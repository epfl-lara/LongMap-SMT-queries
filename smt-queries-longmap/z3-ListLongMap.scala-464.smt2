; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!8570 () Bool)

(assert start!8570)

(declare-fun b!58765 () Bool)

(declare-fun b_free!1961 () Bool)

(declare-fun b_next!1961 () Bool)

(assert (=> b!58765 (= b_free!1961 (not b_next!1961))))

(declare-fun tp!7997 () Bool)

(declare-fun b_and!3551 () Bool)

(assert (=> b!58765 (= tp!7997 b_and!3551)))

(declare-fun b!58764 () Bool)

(declare-fun b_free!1963 () Bool)

(declare-fun b_next!1963 () Bool)

(assert (=> b!58764 (= b_free!1963 (not b_next!1963))))

(declare-fun tp!7998 () Bool)

(declare-fun b_and!3553 () Bool)

(assert (=> b!58764 (= tp!7998 b_and!3553)))

(declare-fun b!58763 () Bool)

(declare-fun res!32706 () Bool)

(declare-fun e!38674 () Bool)

(assert (=> b!58763 (=> (not res!32706) (not e!38674))))

(declare-datatypes ((V!2843 0))(
  ( (V!2844 (val!1243 Int)) )
))
(declare-datatypes ((array!3721 0))(
  ( (array!3722 (arr!1781 (Array (_ BitVec 32) (_ BitVec 64))) (size!2011 (_ BitVec 32))) )
))
(declare-datatypes ((ValueCell!855 0))(
  ( (ValueCellFull!855 (v!2382 V!2843)) (EmptyCell!855) )
))
(declare-datatypes ((array!3723 0))(
  ( (array!3724 (arr!1782 (Array (_ BitVec 32) ValueCell!855)) (size!2012 (_ BitVec 32))) )
))
(declare-datatypes ((LongMapFixedSize!618 0))(
  ( (LongMapFixedSize!619 (defaultEntry!2043 Int) (mask!5927 (_ BitVec 32)) (extraKeys!1930 (_ BitVec 32)) (zeroValue!1959 V!2843) (minValue!1959 V!2843) (_size!358 (_ BitVec 32)) (_keys!3667 array!3721) (_values!2026 array!3723) (_vacant!358 (_ BitVec 32))) )
))
(declare-datatypes ((Cell!430 0))(
  ( (Cell!431 (v!2383 LongMapFixedSize!618)) )
))
(declare-datatypes ((LongMap!430 0))(
  ( (LongMap!431 (underlying!226 Cell!430)) )
))
(declare-fun thiss!992 () LongMap!430)

(declare-fun validMask!0 ((_ BitVec 32)) Bool)

(assert (=> b!58763 (= res!32706 (validMask!0 (mask!5927 (v!2383 (underlying!226 thiss!992)))))))

(declare-fun e!38680 () Bool)

(declare-fun tp_is_empty!2397 () Bool)

(declare-fun newMap!16 () LongMapFixedSize!618)

(declare-fun e!38687 () Bool)

(declare-fun array_inv!1101 (array!3721) Bool)

(declare-fun array_inv!1102 (array!3723) Bool)

(assert (=> b!58764 (= e!38687 (and tp!7998 tp_is_empty!2397 (array_inv!1101 (_keys!3667 newMap!16)) (array_inv!1102 (_values!2026 newMap!16)) e!38680))))

(declare-fun mapIsEmpty!2873 () Bool)

(declare-fun mapRes!2874 () Bool)

(assert (=> mapIsEmpty!2873 mapRes!2874))

(declare-fun e!38681 () Bool)

(declare-fun e!38686 () Bool)

(assert (=> b!58765 (= e!38686 (and tp!7997 tp_is_empty!2397 (array_inv!1101 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (array_inv!1102 (_values!2026 (v!2383 (underlying!226 thiss!992)))) e!38681))))

(declare-fun b!58766 () Bool)

(declare-datatypes ((Unit!1551 0))(
  ( (Unit!1552) )
))
(declare-fun e!38675 () Unit!1551)

(declare-fun Unit!1553 () Unit!1551)

(assert (=> b!58766 (= e!38675 Unit!1553)))

(declare-fun b!58767 () Bool)

(declare-fun res!32708 () Bool)

(declare-fun e!38684 () Bool)

(assert (=> b!58767 (=> (not res!32708) (not e!38684))))

(declare-fun from!355 () (_ BitVec 32))

(assert (=> b!58767 (= res!32708 (and (bvsge from!355 #b00000000000000000000000000000000) (bvslt from!355 (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun mapIsEmpty!2874 () Bool)

(declare-fun mapRes!2873 () Bool)

(assert (=> mapIsEmpty!2874 mapRes!2873))

(declare-fun b!58768 () Bool)

(declare-fun e!38682 () Bool)

(assert (=> b!58768 (= e!38681 (and e!38682 mapRes!2874))))

(declare-fun condMapEmpty!2873 () Bool)

(declare-fun mapDefault!2873 () ValueCell!855)

(assert (=> b!58768 (= condMapEmpty!2873 (= (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) ((as const (Array (_ BitVec 32) ValueCell!855)) mapDefault!2873)))))

(declare-fun b!58769 () Bool)

(assert (=> b!58769 (= e!38682 tp_is_empty!2397)))

(declare-fun b!58771 () Bool)

(declare-fun e!38677 () Bool)

(assert (=> b!58771 (= e!38677 e!38674)))

(declare-fun res!32705 () Bool)

(assert (=> b!58771 (=> (not res!32705) (not e!38674))))

(declare-datatypes ((tuple2!2020 0))(
  ( (tuple2!2021 (_1!1021 Bool) (_2!1021 LongMapFixedSize!618)) )
))
(declare-fun lt!23651 () tuple2!2020)

(assert (=> b!58771 (= res!32705 (and (_1!1021 lt!23651) (bvsgt from!355 #b00000000000000000000000000000000)))))

(declare-fun lt!23652 () Unit!1551)

(assert (=> b!58771 (= lt!23652 e!38675)))

(declare-fun c!7444 () Bool)

(declare-datatypes ((tuple2!2022 0))(
  ( (tuple2!2023 (_1!1022 (_ BitVec 64)) (_2!1022 V!2843)) )
))
(declare-datatypes ((List!1430 0))(
  ( (Nil!1427) (Cons!1426 (h!2007 tuple2!2022) (t!4768 List!1430)) )
))
(declare-datatypes ((ListLongMap!1363 0))(
  ( (ListLongMap!1364 (toList!697 List!1430)) )
))
(declare-fun lt!23655 () ListLongMap!1363)

(declare-fun contains!682 (ListLongMap!1363 (_ BitVec 64)) Bool)

(assert (=> b!58771 (= c!7444 (contains!682 lt!23655 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(declare-fun update!73 (LongMapFixedSize!618 (_ BitVec 64) V!2843) tuple2!2020)

(declare-fun get!1066 (ValueCell!855 V!2843) V!2843)

(declare-fun dynLambda!304 (Int (_ BitVec 64)) V!2843)

(assert (=> b!58771 (= lt!23651 (update!73 newMap!16 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!58772 () Bool)

(declare-fun e!38688 () Bool)

(declare-fun e!38683 () Bool)

(assert (=> b!58772 (= e!38688 e!38683)))

(declare-fun mapNonEmpty!2873 () Bool)

(declare-fun tp!7995 () Bool)

(declare-fun e!38673 () Bool)

(assert (=> mapNonEmpty!2873 (= mapRes!2873 (and tp!7995 e!38673))))

(declare-fun mapValue!2874 () ValueCell!855)

(declare-fun mapKey!2873 () (_ BitVec 32))

(declare-fun mapRest!2873 () (Array (_ BitVec 32) ValueCell!855))

(assert (=> mapNonEmpty!2873 (= (arr!1782 (_values!2026 newMap!16)) (store mapRest!2873 mapKey!2873 mapValue!2874))))

(declare-fun b!58773 () Bool)

(declare-fun Unit!1554 () Unit!1551)

(assert (=> b!58773 (= e!38675 Unit!1554)))

(declare-fun lt!23650 () Unit!1551)

(declare-fun lemmaListMapContainsThenArrayContainsFrom!30 (array!3721 array!3723 (_ BitVec 32) (_ BitVec 32) V!2843 V!2843 (_ BitVec 64) (_ BitVec 32) Int) Unit!1551)

(assert (=> b!58773 (= lt!23650 (lemmaListMapContainsThenArrayContainsFrom!30 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (_values!2026 (v!2383 (underlying!226 thiss!992))) (mask!5927 (v!2383 (underlying!226 thiss!992))) (extraKeys!1930 (v!2383 (underlying!226 thiss!992))) (zeroValue!1959 (v!2383 (underlying!226 thiss!992))) (minValue!1959 (v!2383 (underlying!226 thiss!992))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2043 (v!2383 (underlying!226 thiss!992)))))))

(declare-fun arrayContainsKey!0 (array!3721 (_ BitVec 64) (_ BitVec 32)) Bool)

(assert (=> b!58773 (arrayContainsKey!0 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355))))

(declare-fun lt!23653 () Unit!1551)

(declare-fun lemmaNoDuplicateFromThenFromBigger!0 (array!3721 (_ BitVec 32) (_ BitVec 32)) Unit!1551)

(assert (=> b!58773 (= lt!23653 (lemmaNoDuplicateFromThenFromBigger!0 (_keys!3667 (v!2383 (underlying!226 thiss!992))) #b00000000000000000000000000000000 from!355))))

(declare-datatypes ((List!1431 0))(
  ( (Nil!1428) (Cons!1427 (h!2008 (_ BitVec 64)) (t!4769 List!1431)) )
))
(declare-fun arrayNoDuplicates!0 (array!3721 (_ BitVec 32) List!1431) Bool)

(assert (=> b!58773 (arrayNoDuplicates!0 (_keys!3667 (v!2383 (underlying!226 thiss!992))) from!355 Nil!1428)))

(declare-fun lt!23649 () Unit!1551)

(declare-fun lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (array!3721 (_ BitVec 32) (_ BitVec 64) List!1431) Unit!1551)

(assert (=> b!58773 (= lt!23649 (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (Cons!1427 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) Nil!1428)))))

(assert (=> b!58773 false))

(declare-fun b!58774 () Bool)

(declare-fun e!38676 () Bool)

(assert (=> b!58774 (= e!38676 tp_is_empty!2397)))

(declare-fun b!58775 () Bool)

(assert (=> b!58775 (= e!38680 (and e!38676 mapRes!2873))))

(declare-fun condMapEmpty!2874 () Bool)

(declare-fun mapDefault!2874 () ValueCell!855)

(assert (=> b!58775 (= condMapEmpty!2874 (= (arr!1782 (_values!2026 newMap!16)) ((as const (Array (_ BitVec 32) ValueCell!855)) mapDefault!2874)))))

(declare-fun b!58776 () Bool)

(declare-fun res!32710 () Bool)

(assert (=> b!58776 (=> (not res!32710) (not e!38684))))

(declare-fun valid!254 (LongMapFixedSize!618) Bool)

(assert (=> b!58776 (= res!32710 (valid!254 newMap!16))))

(declare-fun b!58777 () Bool)

(assert (=> b!58777 (= e!38674 (and (= (size!2012 (_values!2026 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 (mask!5927 (v!2383 (underlying!226 thiss!992))))) (not (= (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (size!2012 (_values!2026 (v!2383 (underlying!226 thiss!992))))))))))

(declare-fun b!58778 () Bool)

(assert (=> b!58778 (= e!38683 e!38686)))

(declare-fun b!58779 () Bool)

(declare-fun res!32709 () Bool)

(assert (=> b!58779 (=> (not res!32709) (not e!38684))))

(assert (=> b!58779 (= res!32709 (bvsge (bvadd #b00000000000000000000000000000001 (mask!5927 newMap!16)) (_size!358 (v!2383 (underlying!226 thiss!992)))))))

(declare-fun b!58780 () Bool)

(declare-fun e!38678 () Bool)

(assert (=> b!58780 (= e!38678 tp_is_empty!2397)))

(declare-fun mapNonEmpty!2874 () Bool)

(declare-fun tp!7996 () Bool)

(assert (=> mapNonEmpty!2874 (= mapRes!2874 (and tp!7996 e!38678))))

(declare-fun mapKey!2874 () (_ BitVec 32))

(declare-fun mapRest!2874 () (Array (_ BitVec 32) ValueCell!855))

(declare-fun mapValue!2873 () ValueCell!855)

(assert (=> mapNonEmpty!2874 (= (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) (store mapRest!2874 mapKey!2874 mapValue!2873))))

(declare-fun b!58781 () Bool)

(assert (=> b!58781 (= e!38673 tp_is_empty!2397)))

(declare-fun b!58770 () Bool)

(assert (=> b!58770 (= e!38684 e!38677)))

(declare-fun res!32707 () Bool)

(assert (=> b!58770 (=> (not res!32707) (not e!38677))))

(declare-fun lt!23654 () ListLongMap!1363)

(assert (=> b!58770 (= res!32707 (and (= lt!23654 lt!23655) (not (= (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun map!1105 (LongMapFixedSize!618) ListLongMap!1363)

(assert (=> b!58770 (= lt!23655 (map!1105 newMap!16))))

(declare-fun getCurrentListMap!402 (array!3721 array!3723 (_ BitVec 32) (_ BitVec 32) V!2843 V!2843 (_ BitVec 32) Int) ListLongMap!1363)

(assert (=> b!58770 (= lt!23654 (getCurrentListMap!402 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (_values!2026 (v!2383 (underlying!226 thiss!992))) (mask!5927 (v!2383 (underlying!226 thiss!992))) (extraKeys!1930 (v!2383 (underlying!226 thiss!992))) (zeroValue!1959 (v!2383 (underlying!226 thiss!992))) (minValue!1959 (v!2383 (underlying!226 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2043 (v!2383 (underlying!226 thiss!992)))))))

(declare-fun res!32704 () Bool)

(assert (=> start!8570 (=> (not res!32704) (not e!38684))))

(declare-fun valid!255 (LongMap!430) Bool)

(assert (=> start!8570 (= res!32704 (valid!255 thiss!992))))

(assert (=> start!8570 e!38684))

(assert (=> start!8570 e!38688))

(assert (=> start!8570 true))

(assert (=> start!8570 e!38687))

(assert (= (and start!8570 res!32704) b!58767))

(assert (= (and b!58767 res!32708) b!58776))

(assert (= (and b!58776 res!32710) b!58779))

(assert (= (and b!58779 res!32709) b!58770))

(assert (= (and b!58770 res!32707) b!58771))

(assert (= (and b!58771 c!7444) b!58773))

(assert (= (and b!58771 (not c!7444)) b!58766))

(assert (= (and b!58771 res!32705) b!58763))

(assert (= (and b!58763 res!32706) b!58777))

(assert (= (and b!58768 condMapEmpty!2873) mapIsEmpty!2873))

(assert (= (and b!58768 (not condMapEmpty!2873)) mapNonEmpty!2874))

(get-info :version)

(assert (= (and mapNonEmpty!2874 ((_ is ValueCellFull!855) mapValue!2873)) b!58780))

(assert (= (and b!58768 ((_ is ValueCellFull!855) mapDefault!2873)) b!58769))

(assert (= b!58765 b!58768))

(assert (= b!58778 b!58765))

(assert (= b!58772 b!58778))

(assert (= start!8570 b!58772))

(assert (= (and b!58775 condMapEmpty!2874) mapIsEmpty!2874))

(assert (= (and b!58775 (not condMapEmpty!2874)) mapNonEmpty!2873))

(assert (= (and mapNonEmpty!2873 ((_ is ValueCellFull!855) mapValue!2874)) b!58781))

(assert (= (and b!58775 ((_ is ValueCellFull!855) mapDefault!2874)) b!58774))

(assert (= b!58764 b!58775))

(assert (= start!8570 b!58764))

(declare-fun b_lambda!2581 () Bool)

(assert (=> (not b_lambda!2581) (not b!58771)))

(declare-fun t!4765 () Bool)

(declare-fun tb!1313 () Bool)

(assert (=> (and b!58765 (= (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) (defaultEntry!2043 (v!2383 (underlying!226 thiss!992)))) t!4765) tb!1313))

(declare-fun result!2367 () Bool)

(assert (=> tb!1313 (= result!2367 tp_is_empty!2397)))

(assert (=> b!58771 t!4765))

(declare-fun b_and!3555 () Bool)

(assert (= b_and!3551 (and (=> t!4765 result!2367) b_and!3555)))

(declare-fun tb!1315 () Bool)

(declare-fun t!4767 () Bool)

(assert (=> (and b!58764 (= (defaultEntry!2043 newMap!16) (defaultEntry!2043 (v!2383 (underlying!226 thiss!992)))) t!4767) tb!1315))

(declare-fun result!2371 () Bool)

(assert (= result!2371 result!2367))

(assert (=> b!58771 t!4767))

(declare-fun b_and!3557 () Bool)

(assert (= b_and!3553 (and (=> t!4767 result!2371) b_and!3557)))

(declare-fun m!50529 () Bool)

(assert (=> b!58770 m!50529))

(declare-fun m!50531 () Bool)

(assert (=> b!58770 m!50531))

(declare-fun m!50533 () Bool)

(assert (=> b!58770 m!50533))

(declare-fun m!50535 () Bool)

(assert (=> b!58773 m!50535))

(declare-fun m!50537 () Bool)

(assert (=> b!58773 m!50537))

(assert (=> b!58773 m!50529))

(declare-fun m!50539 () Bool)

(assert (=> b!58773 m!50539))

(assert (=> b!58773 m!50529))

(assert (=> b!58773 m!50529))

(declare-fun m!50541 () Bool)

(assert (=> b!58773 m!50541))

(assert (=> b!58773 m!50529))

(declare-fun m!50543 () Bool)

(assert (=> b!58773 m!50543))

(declare-fun m!50545 () Bool)

(assert (=> b!58764 m!50545))

(declare-fun m!50547 () Bool)

(assert (=> b!58764 m!50547))

(assert (=> b!58771 m!50529))

(declare-fun m!50549 () Bool)

(assert (=> b!58771 m!50549))

(declare-fun m!50551 () Bool)

(assert (=> b!58771 m!50551))

(declare-fun m!50553 () Bool)

(assert (=> b!58771 m!50553))

(declare-fun m!50555 () Bool)

(assert (=> b!58771 m!50555))

(assert (=> b!58771 m!50529))

(assert (=> b!58771 m!50553))

(assert (=> b!58771 m!50529))

(assert (=> b!58771 m!50555))

(declare-fun m!50557 () Bool)

(assert (=> b!58771 m!50557))

(assert (=> b!58771 m!50551))

(declare-fun m!50559 () Bool)

(assert (=> mapNonEmpty!2873 m!50559))

(declare-fun m!50561 () Bool)

(assert (=> b!58765 m!50561))

(declare-fun m!50563 () Bool)

(assert (=> b!58765 m!50563))

(declare-fun m!50565 () Bool)

(assert (=> b!58763 m!50565))

(declare-fun m!50567 () Bool)

(assert (=> b!58776 m!50567))

(declare-fun m!50569 () Bool)

(assert (=> start!8570 m!50569))

(declare-fun m!50571 () Bool)

(assert (=> mapNonEmpty!2874 m!50571))

(check-sat (not b!58776) (not mapNonEmpty!2873) (not b!58771) (not b!58764) (not mapNonEmpty!2874) (not b!58765) (not b_next!1963) (not b!58763) (not b_lambda!2581) (not b!58773) b_and!3557 (not b_next!1961) tp_is_empty!2397 (not start!8570) b_and!3555 (not b!58770))
(check-sat b_and!3555 b_and!3557 (not b_next!1961) (not b_next!1963))
(get-model)

(declare-fun b_lambda!2585 () Bool)

(assert (= b_lambda!2581 (or (and b!58765 b_free!1961) (and b!58764 b_free!1963 (= (defaultEntry!2043 newMap!16) (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))))) b_lambda!2585)))

(check-sat (not mapNonEmpty!2873) (not b!58771) (not b!58764) (not mapNonEmpty!2874) (not b!58765) (not b!58776) (not b_lambda!2585) (not b_next!1963) (not b!58763) (not b!58773) b_and!3557 (not b_next!1961) tp_is_empty!2397 (not start!8570) b_and!3555 (not b!58770))
(check-sat b_and!3555 b_and!3557 (not b_next!1961) (not b_next!1963))
(get-model)

(declare-fun d!11209 () Bool)

(assert (=> d!11209 (= (map!1105 newMap!16) (getCurrentListMap!402 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun bs!2551 () Bool)

(assert (= bs!2551 d!11209))

(declare-fun m!50617 () Bool)

(assert (=> bs!2551 m!50617))

(assert (=> b!58770 d!11209))

(declare-fun call!4335 () ListLongMap!1363)

(declare-fun c!7465 () Bool)

(declare-fun call!4336 () ListLongMap!1363)

(declare-fun c!7462 () Bool)

(declare-fun call!4333 () ListLongMap!1363)

(declare-fun call!4332 () ListLongMap!1363)

(declare-fun bm!4327 () Bool)

(declare-fun +!81 (ListLongMap!1363 tuple2!2022) ListLongMap!1363)

(assert (=> bm!4327 (= call!4333 (+!81 (ite c!7462 call!4332 (ite c!7465 call!4335 call!4336)) (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun b!58885 () Bool)

(declare-fun e!38763 () ListLongMap!1363)

(declare-fun call!4330 () ListLongMap!1363)

(assert (=> b!58885 (= e!38763 call!4330)))

(declare-fun b!58886 () Bool)

(declare-fun c!7464 () Bool)

(assert (=> b!58886 (= c!7464 (and (not (= (bvand (extraKeys!1930 (v!2383 (underlying!226 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1930 (v!2383 (underlying!226 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!38767 () ListLongMap!1363)

(assert (=> b!58886 (= e!38767 e!38763)))

(declare-fun b!58887 () Bool)

(declare-fun e!38770 () Bool)

(declare-fun call!4334 () Bool)

(assert (=> b!58887 (= e!38770 (not call!4334))))

(declare-fun b!58889 () Bool)

(declare-fun e!38769 () Bool)

(declare-fun validKeyInArray!0 ((_ BitVec 64)) Bool)

(assert (=> b!58889 (= e!38769 (validKeyInArray!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!58890 () Bool)

(declare-fun e!38773 () Bool)

(assert (=> b!58890 (= e!38770 e!38773)))

(declare-fun res!32758 () Bool)

(assert (=> b!58890 (= res!32758 call!4334)))

(assert (=> b!58890 (=> (not res!32758) (not e!38773))))

(declare-fun b!58891 () Bool)

(declare-fun e!38775 () Bool)

(assert (=> b!58891 (= e!38775 e!38770)))

(declare-fun c!7463 () Bool)

(assert (=> b!58891 (= c!7463 (not (= (bvand (extraKeys!1930 (v!2383 (underlying!226 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!58892 () Bool)

(declare-fun e!38771 () Bool)

(declare-fun call!4331 () Bool)

(assert (=> b!58892 (= e!38771 (not call!4331))))

(declare-fun b!58893 () Bool)

(declare-fun e!38764 () Bool)

(declare-fun lt!23739 () ListLongMap!1363)

(declare-fun apply!66 (ListLongMap!1363 (_ BitVec 64)) V!2843)

(assert (=> b!58893 (= e!38764 (= (apply!66 lt!23739 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))

(declare-fun b!58894 () Bool)

(declare-fun e!38765 () ListLongMap!1363)

(assert (=> b!58894 (= e!38765 e!38767)))

(assert (=> b!58894 (= c!7465 (and (not (= (bvand (extraKeys!1930 (v!2383 (underlying!226 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1930 (v!2383 (underlying!226 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!58895 () Bool)

(declare-fun e!38772 () Unit!1551)

(declare-fun Unit!1555 () Unit!1551)

(assert (=> b!58895 (= e!38772 Unit!1555)))

(declare-fun bm!4328 () Bool)

(assert (=> bm!4328 (= call!4331 (contains!682 lt!23739 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58896 () Bool)

(declare-fun res!32750 () Bool)

(assert (=> b!58896 (=> (not res!32750) (not e!38775))))

(declare-fun e!38766 () Bool)

(assert (=> b!58896 (= res!32750 e!38766)))

(declare-fun res!32751 () Bool)

(assert (=> b!58896 (=> res!32751 e!38766)))

(declare-fun e!38774 () Bool)

(assert (=> b!58896 (= res!32751 (not e!38774))))

(declare-fun res!32753 () Bool)

(assert (=> b!58896 (=> (not res!32753) (not e!38774))))

(assert (=> b!58896 (= res!32753 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992))))))))

(declare-fun b!58888 () Bool)

(assert (=> b!58888 (= e!38765 (+!81 call!4333 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))

(declare-fun d!11211 () Bool)

(assert (=> d!11211 e!38775))

(declare-fun res!32757 () Bool)

(assert (=> d!11211 (=> (not res!32757) (not e!38775))))

(assert (=> d!11211 (= res!32757 (or (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992))))) (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992))))))))))

(declare-fun lt!23724 () ListLongMap!1363)

(assert (=> d!11211 (= lt!23739 lt!23724)))

(declare-fun lt!23727 () Unit!1551)

(assert (=> d!11211 (= lt!23727 e!38772)))

(declare-fun c!7460 () Bool)

(assert (=> d!11211 (= c!7460 e!38769)))

(declare-fun res!32754 () Bool)

(assert (=> d!11211 (=> (not res!32754) (not e!38769))))

(assert (=> d!11211 (= res!32754 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992))))))))

(assert (=> d!11211 (= lt!23724 e!38765)))

(assert (=> d!11211 (= c!7462 (and (not (= (bvand (extraKeys!1930 (v!2383 (underlying!226 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1930 (v!2383 (underlying!226 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11211 (validMask!0 (mask!5927 (v!2383 (underlying!226 thiss!992))))))

(assert (=> d!11211 (= (getCurrentListMap!402 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (_values!2026 (v!2383 (underlying!226 thiss!992))) (mask!5927 (v!2383 (underlying!226 thiss!992))) (extraKeys!1930 (v!2383 (underlying!226 thiss!992))) (zeroValue!1959 (v!2383 (underlying!226 thiss!992))) (minValue!1959 (v!2383 (underlying!226 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2043 (v!2383 (underlying!226 thiss!992)))) lt!23739)))

(declare-fun bm!4329 () Bool)

(assert (=> bm!4329 (= call!4336 call!4335)))

(declare-fun b!58897 () Bool)

(assert (=> b!58897 (= e!38774 (validKeyInArray!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!58898 () Bool)

(assert (=> b!58898 (= e!38771 e!38764)))

(declare-fun res!32756 () Bool)

(assert (=> b!58898 (= res!32756 call!4331)))

(assert (=> b!58898 (=> (not res!32756) (not e!38764))))

(declare-fun bm!4330 () Bool)

(assert (=> bm!4330 (= call!4335 call!4332)))

(declare-fun b!58899 () Bool)

(assert (=> b!58899 (= e!38763 call!4336)))

(declare-fun bm!4331 () Bool)

(assert (=> bm!4331 (= call!4330 call!4333)))

(declare-fun bm!4332 () Bool)

(declare-fun getCurrentListMapNoExtraKeys!44 (array!3721 array!3723 (_ BitVec 32) (_ BitVec 32) V!2843 V!2843 (_ BitVec 32) Int) ListLongMap!1363)

(assert (=> bm!4332 (= call!4332 (getCurrentListMapNoExtraKeys!44 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (_values!2026 (v!2383 (underlying!226 thiss!992))) (mask!5927 (v!2383 (underlying!226 thiss!992))) (extraKeys!1930 (v!2383 (underlying!226 thiss!992))) (zeroValue!1959 (v!2383 (underlying!226 thiss!992))) (minValue!1959 (v!2383 (underlying!226 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2043 (v!2383 (underlying!226 thiss!992)))))))

(declare-fun b!58900 () Bool)

(declare-fun e!38768 () Bool)

(assert (=> b!58900 (= e!38768 (= (apply!66 lt!23739 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!58900 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2012 (_values!2026 (v!2383 (underlying!226 thiss!992))))))))

(assert (=> b!58900 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992))))))))

(declare-fun b!58901 () Bool)

(declare-fun lt!23735 () Unit!1551)

(assert (=> b!58901 (= e!38772 lt!23735)))

(declare-fun lt!23728 () ListLongMap!1363)

(assert (=> b!58901 (= lt!23728 (getCurrentListMapNoExtraKeys!44 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (_values!2026 (v!2383 (underlying!226 thiss!992))) (mask!5927 (v!2383 (underlying!226 thiss!992))) (extraKeys!1930 (v!2383 (underlying!226 thiss!992))) (zeroValue!1959 (v!2383 (underlying!226 thiss!992))) (minValue!1959 (v!2383 (underlying!226 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2043 (v!2383 (underlying!226 thiss!992)))))))

(declare-fun lt!23723 () (_ BitVec 64))

(assert (=> b!58901 (= lt!23723 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23721 () (_ BitVec 64))

(assert (=> b!58901 (= lt!23721 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!23736 () Unit!1551)

(declare-fun addStillContains!42 (ListLongMap!1363 (_ BitVec 64) V!2843 (_ BitVec 64)) Unit!1551)

(assert (=> b!58901 (= lt!23736 (addStillContains!42 lt!23728 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))) lt!23721))))

(assert (=> b!58901 (contains!682 (+!81 lt!23728 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))) lt!23721)))

(declare-fun lt!23742 () Unit!1551)

(assert (=> b!58901 (= lt!23742 lt!23736)))

(declare-fun lt!23725 () ListLongMap!1363)

(assert (=> b!58901 (= lt!23725 (getCurrentListMapNoExtraKeys!44 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (_values!2026 (v!2383 (underlying!226 thiss!992))) (mask!5927 (v!2383 (underlying!226 thiss!992))) (extraKeys!1930 (v!2383 (underlying!226 thiss!992))) (zeroValue!1959 (v!2383 (underlying!226 thiss!992))) (minValue!1959 (v!2383 (underlying!226 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2043 (v!2383 (underlying!226 thiss!992)))))))

(declare-fun lt!23733 () (_ BitVec 64))

(assert (=> b!58901 (= lt!23733 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23738 () (_ BitVec 64))

(assert (=> b!58901 (= lt!23738 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!23731 () Unit!1551)

(declare-fun addApplyDifferent!42 (ListLongMap!1363 (_ BitVec 64) V!2843 (_ BitVec 64)) Unit!1551)

(assert (=> b!58901 (= lt!23731 (addApplyDifferent!42 lt!23725 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992))) lt!23738))))

(assert (=> b!58901 (= (apply!66 (+!81 lt!23725 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) lt!23738) (apply!66 lt!23725 lt!23738))))

(declare-fun lt!23737 () Unit!1551)

(assert (=> b!58901 (= lt!23737 lt!23731)))

(declare-fun lt!23726 () ListLongMap!1363)

(assert (=> b!58901 (= lt!23726 (getCurrentListMapNoExtraKeys!44 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (_values!2026 (v!2383 (underlying!226 thiss!992))) (mask!5927 (v!2383 (underlying!226 thiss!992))) (extraKeys!1930 (v!2383 (underlying!226 thiss!992))) (zeroValue!1959 (v!2383 (underlying!226 thiss!992))) (minValue!1959 (v!2383 (underlying!226 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2043 (v!2383 (underlying!226 thiss!992)))))))

(declare-fun lt!23734 () (_ BitVec 64))

(assert (=> b!58901 (= lt!23734 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23722 () (_ BitVec 64))

(assert (=> b!58901 (= lt!23722 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!23740 () Unit!1551)

(assert (=> b!58901 (= lt!23740 (addApplyDifferent!42 lt!23726 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))) lt!23722))))

(assert (=> b!58901 (= (apply!66 (+!81 lt!23726 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))) lt!23722) (apply!66 lt!23726 lt!23722))))

(declare-fun lt!23729 () Unit!1551)

(assert (=> b!58901 (= lt!23729 lt!23740)))

(declare-fun lt!23732 () ListLongMap!1363)

(assert (=> b!58901 (= lt!23732 (getCurrentListMapNoExtraKeys!44 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (_values!2026 (v!2383 (underlying!226 thiss!992))) (mask!5927 (v!2383 (underlying!226 thiss!992))) (extraKeys!1930 (v!2383 (underlying!226 thiss!992))) (zeroValue!1959 (v!2383 (underlying!226 thiss!992))) (minValue!1959 (v!2383 (underlying!226 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2043 (v!2383 (underlying!226 thiss!992)))))))

(declare-fun lt!23730 () (_ BitVec 64))

(assert (=> b!58901 (= lt!23730 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23741 () (_ BitVec 64))

(assert (=> b!58901 (= lt!23741 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!58901 (= lt!23735 (addApplyDifferent!42 lt!23732 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992))) lt!23741))))

(assert (=> b!58901 (= (apply!66 (+!81 lt!23732 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) lt!23741) (apply!66 lt!23732 lt!23741))))

(declare-fun b!58902 () Bool)

(assert (=> b!58902 (= e!38766 e!38768)))

(declare-fun res!32752 () Bool)

(assert (=> b!58902 (=> (not res!32752) (not e!38768))))

(assert (=> b!58902 (= res!32752 (contains!682 lt!23739 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!58902 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992))))))))

(declare-fun b!58903 () Bool)

(declare-fun res!32755 () Bool)

(assert (=> b!58903 (=> (not res!32755) (not e!38775))))

(assert (=> b!58903 (= res!32755 e!38771)))

(declare-fun c!7461 () Bool)

(assert (=> b!58903 (= c!7461 (not (= (bvand (extraKeys!1930 (v!2383 (underlying!226 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!4333 () Bool)

(assert (=> bm!4333 (= call!4334 (contains!682 lt!23739 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58904 () Bool)

(assert (=> b!58904 (= e!38767 call!4330)))

(declare-fun b!58905 () Bool)

(assert (=> b!58905 (= e!38773 (= (apply!66 lt!23739 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))

(assert (= (and d!11211 c!7462) b!58888))

(assert (= (and d!11211 (not c!7462)) b!58894))

(assert (= (and b!58894 c!7465) b!58904))

(assert (= (and b!58894 (not c!7465)) b!58886))

(assert (= (and b!58886 c!7464) b!58885))

(assert (= (and b!58886 (not c!7464)) b!58899))

(assert (= (or b!58885 b!58899) bm!4329))

(assert (= (or b!58904 bm!4329) bm!4330))

(assert (= (or b!58904 b!58885) bm!4331))

(assert (= (or b!58888 bm!4330) bm!4332))

(assert (= (or b!58888 bm!4331) bm!4327))

(assert (= (and d!11211 res!32754) b!58889))

(assert (= (and d!11211 c!7460) b!58901))

(assert (= (and d!11211 (not c!7460)) b!58895))

(assert (= (and d!11211 res!32757) b!58896))

(assert (= (and b!58896 res!32753) b!58897))

(assert (= (and b!58896 (not res!32751)) b!58902))

(assert (= (and b!58902 res!32752) b!58900))

(assert (= (and b!58896 res!32750) b!58903))

(assert (= (and b!58903 c!7461) b!58898))

(assert (= (and b!58903 (not c!7461)) b!58892))

(assert (= (and b!58898 res!32756) b!58893))

(assert (= (or b!58898 b!58892) bm!4328))

(assert (= (and b!58903 res!32755) b!58891))

(assert (= (and b!58891 c!7463) b!58890))

(assert (= (and b!58891 (not c!7463)) b!58887))

(assert (= (and b!58890 res!32758) b!58905))

(assert (= (or b!58890 b!58887) bm!4333))

(declare-fun b_lambda!2587 () Bool)

(assert (=> (not b_lambda!2587) (not b!58900)))

(assert (=> b!58900 t!4765))

(declare-fun b_and!3567 () Bool)

(assert (= b_and!3555 (and (=> t!4765 result!2367) b_and!3567)))

(assert (=> b!58900 t!4767))

(declare-fun b_and!3569 () Bool)

(assert (= b_and!3557 (and (=> t!4767 result!2371) b_and!3569)))

(declare-fun m!50619 () Bool)

(assert (=> b!58888 m!50619))

(declare-fun m!50621 () Bool)

(assert (=> bm!4332 m!50621))

(declare-fun m!50623 () Bool)

(assert (=> bm!4327 m!50623))

(declare-fun m!50625 () Bool)

(assert (=> b!58893 m!50625))

(declare-fun m!50627 () Bool)

(assert (=> b!58897 m!50627))

(assert (=> b!58897 m!50627))

(declare-fun m!50629 () Bool)

(assert (=> b!58897 m!50629))

(declare-fun m!50631 () Bool)

(assert (=> bm!4328 m!50631))

(declare-fun m!50633 () Bool)

(assert (=> b!58900 m!50633))

(assert (=> b!58900 m!50627))

(declare-fun m!50635 () Bool)

(assert (=> b!58900 m!50635))

(assert (=> b!58900 m!50553))

(assert (=> b!58900 m!50633))

(assert (=> b!58900 m!50553))

(declare-fun m!50637 () Bool)

(assert (=> b!58900 m!50637))

(assert (=> b!58900 m!50627))

(declare-fun m!50639 () Bool)

(assert (=> b!58905 m!50639))

(assert (=> b!58902 m!50627))

(assert (=> b!58902 m!50627))

(declare-fun m!50641 () Bool)

(assert (=> b!58902 m!50641))

(assert (=> b!58889 m!50627))

(assert (=> b!58889 m!50627))

(assert (=> b!58889 m!50629))

(assert (=> d!11211 m!50565))

(declare-fun m!50643 () Bool)

(assert (=> bm!4333 m!50643))

(declare-fun m!50645 () Bool)

(assert (=> b!58901 m!50645))

(declare-fun m!50647 () Bool)

(assert (=> b!58901 m!50647))

(declare-fun m!50649 () Bool)

(assert (=> b!58901 m!50649))

(declare-fun m!50651 () Bool)

(assert (=> b!58901 m!50651))

(assert (=> b!58901 m!50645))

(declare-fun m!50653 () Bool)

(assert (=> b!58901 m!50653))

(declare-fun m!50655 () Bool)

(assert (=> b!58901 m!50655))

(declare-fun m!50657 () Bool)

(assert (=> b!58901 m!50657))

(assert (=> b!58901 m!50621))

(declare-fun m!50659 () Bool)

(assert (=> b!58901 m!50659))

(declare-fun m!50661 () Bool)

(assert (=> b!58901 m!50661))

(declare-fun m!50663 () Bool)

(assert (=> b!58901 m!50663))

(assert (=> b!58901 m!50627))

(declare-fun m!50665 () Bool)

(assert (=> b!58901 m!50665))

(declare-fun m!50667 () Bool)

(assert (=> b!58901 m!50667))

(declare-fun m!50669 () Bool)

(assert (=> b!58901 m!50669))

(assert (=> b!58901 m!50659))

(declare-fun m!50671 () Bool)

(assert (=> b!58901 m!50671))

(assert (=> b!58901 m!50655))

(declare-fun m!50673 () Bool)

(assert (=> b!58901 m!50673))

(assert (=> b!58901 m!50665))

(assert (=> b!58770 d!11211))

(declare-fun d!11213 () Bool)

(declare-fun e!38780 () Bool)

(assert (=> d!11213 e!38780))

(declare-fun res!32761 () Bool)

(assert (=> d!11213 (=> res!32761 e!38780)))

(declare-fun lt!23753 () Bool)

(assert (=> d!11213 (= res!32761 (not lt!23753))))

(declare-fun lt!23752 () Bool)

(assert (=> d!11213 (= lt!23753 lt!23752)))

(declare-fun lt!23754 () Unit!1551)

(declare-fun e!38781 () Unit!1551)

(assert (=> d!11213 (= lt!23754 e!38781)))

(declare-fun c!7468 () Bool)

(assert (=> d!11213 (= c!7468 lt!23752)))

(declare-fun containsKey!128 (List!1430 (_ BitVec 64)) Bool)

(assert (=> d!11213 (= lt!23752 (containsKey!128 (toList!697 lt!23655) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(assert (=> d!11213 (= (contains!682 lt!23655 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) lt!23753)))

(declare-fun b!58912 () Bool)

(declare-fun lt!23751 () Unit!1551)

(assert (=> b!58912 (= e!38781 lt!23751)))

(declare-fun lemmaContainsKeyImpliesGetValueByKeyDefined!76 (List!1430 (_ BitVec 64)) Unit!1551)

(assert (=> b!58912 (= lt!23751 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 lt!23655) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(declare-datatypes ((Option!130 0))(
  ( (Some!129 (v!2386 V!2843)) (None!128) )
))
(declare-fun isDefined!77 (Option!130) Bool)

(declare-fun getValueByKey!124 (List!1430 (_ BitVec 64)) Option!130)

(assert (=> b!58912 (isDefined!77 (getValueByKey!124 (toList!697 lt!23655) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(declare-fun b!58913 () Bool)

(declare-fun Unit!1556 () Unit!1551)

(assert (=> b!58913 (= e!38781 Unit!1556)))

(declare-fun b!58914 () Bool)

(assert (=> b!58914 (= e!38780 (isDefined!77 (getValueByKey!124 (toList!697 lt!23655) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355))))))

(assert (= (and d!11213 c!7468) b!58912))

(assert (= (and d!11213 (not c!7468)) b!58913))

(assert (= (and d!11213 (not res!32761)) b!58914))

(assert (=> d!11213 m!50529))

(declare-fun m!50675 () Bool)

(assert (=> d!11213 m!50675))

(assert (=> b!58912 m!50529))

(declare-fun m!50677 () Bool)

(assert (=> b!58912 m!50677))

(assert (=> b!58912 m!50529))

(declare-fun m!50679 () Bool)

(assert (=> b!58912 m!50679))

(assert (=> b!58912 m!50679))

(declare-fun m!50681 () Bool)

(assert (=> b!58912 m!50681))

(assert (=> b!58914 m!50529))

(assert (=> b!58914 m!50679))

(assert (=> b!58914 m!50679))

(assert (=> b!58914 m!50681))

(assert (=> b!58771 d!11213))

(declare-fun b!58995 () Bool)

(declare-fun c!7501 () Bool)

(declare-datatypes ((SeekEntryResult!227 0))(
  ( (MissingZero!227 (index!3031 (_ BitVec 32))) (Found!227 (index!3032 (_ BitVec 32))) (Intermediate!227 (undefined!1039 Bool) (index!3033 (_ BitVec 32)) (x!10003 (_ BitVec 32))) (Undefined!227) (MissingVacant!227 (index!3034 (_ BitVec 32))) )
))
(declare-fun lt!23811 () SeekEntryResult!227)

(assert (=> b!58995 (= c!7501 ((_ is MissingVacant!227) lt!23811))))

(declare-fun e!38833 () Bool)

(declare-fun e!38843 () Bool)

(assert (=> b!58995 (= e!38833 e!38843)))

(declare-fun b!58996 () Bool)

(declare-fun e!38838 () Bool)

(assert (=> b!58996 (= e!38843 e!38838)))

(declare-fun res!32796 () Bool)

(declare-fun call!4404 () Bool)

(assert (=> b!58996 (= res!32796 call!4404)))

(assert (=> b!58996 (=> (not res!32796) (not e!38838))))

(declare-fun b!58997 () Bool)

(declare-fun e!38842 () Bool)

(declare-fun e!38825 () Bool)

(assert (=> b!58997 (= e!38842 e!38825)))

(declare-fun c!7500 () Bool)

(declare-fun lt!23809 () tuple2!2020)

(assert (=> b!58997 (= c!7500 (_1!1021 lt!23809))))

(declare-fun b!58998 () Bool)

(declare-fun e!38829 () ListLongMap!1363)

(declare-fun call!4406 () ListLongMap!1363)

(assert (=> b!58998 (= e!38829 call!4406)))

(declare-fun b!58999 () Bool)

(declare-fun e!38840 () tuple2!2020)

(declare-fun lt!23813 () tuple2!2020)

(assert (=> b!58999 (= e!38840 (tuple2!2021 (_1!1021 lt!23813) (_2!1021 lt!23813)))))

(declare-fun call!4400 () tuple2!2020)

(assert (=> b!58999 (= lt!23813 call!4400)))

(declare-fun b!59000 () Bool)

(declare-fun lt!23814 () Unit!1551)

(declare-fun lt!23831 () Unit!1551)

(assert (=> b!59000 (= lt!23814 lt!23831)))

(declare-fun call!4394 () ListLongMap!1363)

(declare-fun call!4385 () ListLongMap!1363)

(assert (=> b!59000 (= call!4394 call!4385)))

(declare-fun lt!23829 () (_ BitVec 32))

(declare-fun lemmaChangeZeroKeyThenAddPairToListMap!15 (array!3721 array!3723 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2843 V!2843 V!2843 Int) Unit!1551)

(assert (=> b!59000 (= lt!23831 (lemmaChangeZeroKeyThenAddPairToListMap!15 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) lt!23829 (zeroValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1959 newMap!16) (defaultEntry!2043 newMap!16)))))

(assert (=> b!59000 (= lt!23829 (bvor (extraKeys!1930 newMap!16) #b00000000000000000000000000000001))))

(declare-fun e!38839 () tuple2!2020)

(assert (=> b!59000 (= e!38839 (tuple2!2021 true (LongMapFixedSize!619 (defaultEntry!2043 newMap!16) (mask!5927 newMap!16) (bvor (extraKeys!1930 newMap!16) #b00000000000000000000000000000001) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1959 newMap!16) (_size!358 newMap!16) (_keys!3667 newMap!16) (_values!2026 newMap!16) (_vacant!358 newMap!16))))))

(declare-fun bm!4382 () Bool)

(declare-fun call!4393 () SeekEntryResult!227)

(declare-fun call!4398 () SeekEntryResult!227)

(assert (=> bm!4382 (= call!4393 call!4398)))

(declare-fun call!4403 () Bool)

(declare-fun bm!4383 () Bool)

(assert (=> bm!4383 (= call!4403 (arrayContainsKey!0 (_keys!3667 newMap!16) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!59001 () Bool)

(declare-fun res!32792 () Bool)

(declare-fun e!38824 () Bool)

(assert (=> b!59001 (=> (not res!32792) (not e!38824))))

(assert (=> b!59001 (= res!32792 (= (select (arr!1781 (_keys!3667 newMap!16)) (index!3031 lt!23811)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4384 () Bool)

(declare-fun call!4396 () Bool)

(declare-fun call!4408 () Bool)

(assert (=> bm!4384 (= call!4396 call!4408)))

(declare-fun b!59002 () Bool)

(declare-fun e!38841 () tuple2!2020)

(assert (=> b!59002 (= e!38840 e!38841)))

(declare-fun c!7504 () Bool)

(declare-fun lt!23832 () SeekEntryResult!227)

(assert (=> b!59002 (= c!7504 ((_ is MissingZero!227) lt!23832))))

(declare-fun bm!4385 () Bool)

(declare-fun call!4392 () ListLongMap!1363)

(assert (=> bm!4385 (= call!4392 (map!1105 (_2!1021 lt!23809)))))

(declare-fun b!59003 () Bool)

(declare-fun e!38827 () Bool)

(declare-fun call!4401 () Bool)

(assert (=> b!59003 (= e!38827 (not call!4401))))

(declare-fun b!59004 () Bool)

(declare-fun lt!23828 () Unit!1551)

(declare-fun lt!23810 () Unit!1551)

(assert (=> b!59004 (= lt!23828 lt!23810)))

(declare-fun lt!23824 () array!3723)

(assert (=> b!59004 (contains!682 (getCurrentListMap!402 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)) (select (arr!1781 (_keys!3667 newMap!16)) (index!3032 lt!23832)))))

(declare-fun lemmaValidKeyInArrayIsInListMap!76 (array!3721 array!3723 (_ BitVec 32) (_ BitVec 32) V!2843 V!2843 (_ BitVec 32) Int) Unit!1551)

(assert (=> b!59004 (= lt!23810 (lemmaValidKeyInArrayIsInListMap!76 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) (index!3032 lt!23832) (defaultEntry!2043 newMap!16)))))

(assert (=> b!59004 (= lt!23824 (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (index!3032 lt!23832) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16))))))

(declare-fun lt!23819 () Unit!1551)

(declare-fun lt!23823 () Unit!1551)

(assert (=> b!59004 (= lt!23819 lt!23823)))

(declare-fun call!4388 () ListLongMap!1363)

(declare-fun call!4405 () ListLongMap!1363)

(assert (=> b!59004 (= call!4388 call!4405)))

(declare-fun lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!15 (array!3721 array!3723 (_ BitVec 32) (_ BitVec 32) V!2843 V!2843 (_ BitVec 32) (_ BitVec 64) V!2843 Int) Unit!1551)

(assert (=> b!59004 (= lt!23823 (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!15 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) (index!3032 lt!23832) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2043 newMap!16)))))

(declare-fun lt!23821 () Unit!1551)

(declare-fun e!38831 () Unit!1551)

(assert (=> b!59004 (= lt!23821 e!38831)))

(declare-fun c!7496 () Bool)

(declare-fun call!4390 () Bool)

(assert (=> b!59004 (= c!7496 call!4390)))

(assert (=> b!59004 (= e!38841 (tuple2!2021 true (LongMapFixedSize!619 (defaultEntry!2043 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) (_size!358 newMap!16) (_keys!3667 newMap!16) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (index!3032 lt!23832) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16))) (_vacant!358 newMap!16))))))

(declare-fun b!59005 () Bool)

(assert (=> b!59005 (= e!38829 call!4405)))

(declare-fun b!59006 () Bool)

(declare-fun lt!23834 () Unit!1551)

(declare-fun lt!23835 () Unit!1551)

(assert (=> b!59006 (= lt!23834 lt!23835)))

(declare-fun call!4395 () ListLongMap!1363)

(assert (=> b!59006 (= call!4394 call!4395)))

(declare-fun lt!23820 () (_ BitVec 32))

(declare-fun lemmaChangeLongMinValueKeyThenAddPairToListMap!15 (array!3721 array!3723 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2843 V!2843 V!2843 Int) Unit!1551)

(assert (=> b!59006 (= lt!23835 (lemmaChangeLongMinValueKeyThenAddPairToListMap!15 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) lt!23820 (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2043 newMap!16)))))

(assert (=> b!59006 (= lt!23820 (bvor (extraKeys!1930 newMap!16) #b00000000000000000000000000000010))))

(assert (=> b!59006 (= e!38839 (tuple2!2021 true (LongMapFixedSize!619 (defaultEntry!2043 newMap!16) (mask!5927 newMap!16) (bvor (extraKeys!1930 newMap!16) #b00000000000000000000000000000010) (zeroValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (_size!358 newMap!16) (_keys!3667 newMap!16) (_values!2026 newMap!16) (_vacant!358 newMap!16))))))

(declare-fun b!59007 () Bool)

(declare-fun e!38835 () Bool)

(assert (=> b!59007 (= e!38835 (not call!4401))))

(declare-fun b!59008 () Bool)

(declare-fun e!38837 () tuple2!2020)

(assert (=> b!59008 (= e!38837 e!38839)))

(declare-fun c!7507 () Bool)

(assert (=> b!59008 (= c!7507 (= (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59009 () Bool)

(declare-fun e!38834 () Bool)

(assert (=> b!59009 (= e!38834 e!38835)))

(declare-fun res!32790 () Bool)

(assert (=> b!59009 (= res!32790 call!4396)))

(assert (=> b!59009 (=> (not res!32790) (not e!38835))))

(declare-fun bm!4386 () Bool)

(declare-fun call!4391 () Unit!1551)

(declare-fun lemmaInListMapThenSeekEntryOrOpenFindsIt!15 (array!3721 array!3723 (_ BitVec 32) (_ BitVec 32) V!2843 V!2843 (_ BitVec 64) Int) Unit!1551)

(assert (=> bm!4386 (= call!4391 (lemmaInListMapThenSeekEntryOrOpenFindsIt!15 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (defaultEntry!2043 newMap!16)))))

(declare-fun b!59010 () Bool)

(declare-fun res!32802 () Bool)

(assert (=> b!59010 (= res!32802 (= (select (arr!1781 (_keys!3667 newMap!16)) (index!3034 lt!23811)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59010 (=> (not res!32802) (not e!38838))))

(declare-fun b!59011 () Bool)

(declare-fun res!32800 () Bool)

(declare-fun lt!23818 () SeekEntryResult!227)

(assert (=> b!59011 (= res!32800 (= (select (arr!1781 (_keys!3667 newMap!16)) (index!3034 lt!23818)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59011 (=> (not res!32800) (not e!38835))))

(declare-fun bm!4387 () Bool)

(declare-fun call!4397 () Bool)

(assert (=> bm!4387 (= call!4397 call!4403)))

(declare-fun bm!4388 () Bool)

(declare-fun seekEntryOrOpen!0 ((_ BitVec 64) array!3721 (_ BitVec 32)) SeekEntryResult!227)

(assert (=> bm!4388 (= call!4398 (seekEntryOrOpen!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (_keys!3667 newMap!16) (mask!5927 newMap!16)))))

(declare-fun b!59012 () Bool)

(declare-fun res!32803 () Bool)

(assert (=> b!59012 (= res!32803 call!4408)))

(declare-fun e!38832 () Bool)

(assert (=> b!59012 (=> (not res!32803) (not e!38832))))

(declare-fun b!59013 () Bool)

(declare-fun e!38844 () Bool)

(assert (=> b!59013 (= e!38825 e!38844)))

(declare-fun res!32797 () Bool)

(assert (=> b!59013 (= res!32797 (contains!682 call!4392 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(assert (=> b!59013 (=> (not res!32797) (not e!38844))))

(declare-fun b!59014 () Bool)

(assert (=> b!59014 (= e!38838 (not call!4397))))

(declare-fun c!7503 () Bool)

(declare-fun call!4387 () ListLongMap!1363)

(declare-fun bm!4389 () Bool)

(declare-fun c!7502 () Bool)

(assert (=> bm!4389 (= call!4387 (getCurrentListMap!402 (_keys!3667 newMap!16) (ite (or c!7503 c!7502) (_values!2026 newMap!16) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (index!3032 lt!23832) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16)))) (mask!5927 newMap!16) (ite c!7503 (ite c!7507 (extraKeys!1930 newMap!16) lt!23820) (extraKeys!1930 newMap!16)) (zeroValue!1959 newMap!16) (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun b!59015 () Bool)

(declare-fun lt!23825 () tuple2!2020)

(assert (=> b!59015 (= lt!23825 call!4400)))

(assert (=> b!59015 (= e!38841 (tuple2!2021 (_1!1021 lt!23825) (_2!1021 lt!23825)))))

(declare-fun b!59016 () Bool)

(declare-fun Unit!1557 () Unit!1551)

(assert (=> b!59016 (= e!38831 Unit!1557)))

(declare-fun lt!23812 () Unit!1551)

(declare-fun call!4402 () Unit!1551)

(assert (=> b!59016 (= lt!23812 call!4402)))

(assert (=> b!59016 (= lt!23818 call!4393)))

(declare-fun c!7499 () Bool)

(assert (=> b!59016 (= c!7499 ((_ is MissingZero!227) lt!23818))))

(declare-fun e!38828 () Bool)

(assert (=> b!59016 e!38828))

(declare-fun lt!23830 () Unit!1551)

(assert (=> b!59016 (= lt!23830 lt!23812)))

(assert (=> b!59016 false))

(declare-fun b!59017 () Bool)

(declare-fun call!4407 () ListLongMap!1363)

(assert (=> b!59017 (= e!38844 (= call!4392 (+!81 call!4407 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!59018 () Bool)

(declare-fun lt!23822 () SeekEntryResult!227)

(assert (=> b!59018 (= e!38832 (= (select (arr!1781 (_keys!3667 newMap!16)) (index!3032 lt!23822)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(declare-fun b!59019 () Bool)

(declare-fun res!32799 () Bool)

(assert (=> b!59019 (=> (not res!32799) (not e!38824))))

(assert (=> b!59019 (= res!32799 call!4404)))

(assert (=> b!59019 (= e!38833 e!38824)))

(declare-fun b!59020 () Bool)

(declare-fun c!7498 () Bool)

(assert (=> b!59020 (= c!7498 ((_ is MissingVacant!227) lt!23818))))

(assert (=> b!59020 (= e!38828 e!38834)))

(declare-fun b!59021 () Bool)

(declare-fun e!38826 () Unit!1551)

(declare-fun lt!23817 () Unit!1551)

(assert (=> b!59021 (= e!38826 lt!23817)))

(assert (=> b!59021 (= lt!23817 call!4402)))

(declare-fun call!4389 () SeekEntryResult!227)

(assert (=> b!59021 (= lt!23811 call!4389)))

(declare-fun c!7505 () Bool)

(assert (=> b!59021 (= c!7505 ((_ is MissingZero!227) lt!23811))))

(assert (=> b!59021 e!38833))

(declare-fun b!59022 () Bool)

(declare-fun res!32791 () Bool)

(declare-fun call!4386 () Bool)

(assert (=> b!59022 (= res!32791 call!4386)))

(declare-fun e!38836 () Bool)

(assert (=> b!59022 (=> (not res!32791) (not e!38836))))

(declare-fun b!59023 () Bool)

(declare-fun res!32798 () Bool)

(assert (=> b!59023 (=> (not res!32798) (not e!38827))))

(assert (=> b!59023 (= res!32798 call!4396)))

(assert (=> b!59023 (= e!38828 e!38827)))

(declare-fun bm!4390 () Bool)

(declare-fun call!4399 () Bool)

(assert (=> bm!4390 (= call!4386 call!4399)))

(declare-fun c!7506 () Bool)

(declare-fun bm!4391 () Bool)

(declare-fun lt!23833 () SeekEntryResult!227)

(declare-fun inRange!0 ((_ BitVec 32) (_ BitVec 32)) Bool)

(assert (=> bm!4391 (= call!4399 (inRange!0 (ite c!7502 (ite c!7506 (index!3032 lt!23833) (ite c!7505 (index!3031 lt!23811) (index!3034 lt!23811))) (ite c!7496 (index!3032 lt!23822) (ite c!7499 (index!3031 lt!23818) (index!3034 lt!23818)))) (mask!5927 newMap!16)))))

(declare-fun bm!4392 () Bool)

(assert (=> bm!4392 (= call!4385 call!4406)))

(declare-fun b!59024 () Bool)

(declare-fun Unit!1558 () Unit!1551)

(assert (=> b!59024 (= e!38826 Unit!1558)))

(declare-fun lt!23816 () Unit!1551)

(assert (=> b!59024 (= lt!23816 call!4391)))

(assert (=> b!59024 (= lt!23833 call!4389)))

(declare-fun res!32801 () Bool)

(assert (=> b!59024 (= res!32801 ((_ is Found!227) lt!23833))))

(assert (=> b!59024 (=> (not res!32801) (not e!38836))))

(assert (=> b!59024 e!38836))

(declare-fun lt!23815 () Unit!1551)

(assert (=> b!59024 (= lt!23815 lt!23816)))

(assert (=> b!59024 false))

(declare-fun bm!4393 () Bool)

(assert (=> bm!4393 (= call!4407 (map!1105 newMap!16))))

(declare-fun bm!4394 () Bool)

(declare-fun c!7497 () Bool)

(assert (=> bm!4394 (= c!7497 c!7502)))

(assert (=> bm!4394 (= call!4390 (contains!682 e!38829 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(declare-fun b!59025 () Bool)

(declare-fun lt!23827 () Unit!1551)

(assert (=> b!59025 (= e!38831 lt!23827)))

(assert (=> b!59025 (= lt!23827 call!4391)))

(assert (=> b!59025 (= lt!23822 call!4393)))

(declare-fun res!32795 () Bool)

(assert (=> b!59025 (= res!32795 ((_ is Found!227) lt!23822))))

(assert (=> b!59025 (=> (not res!32795) (not e!38832))))

(assert (=> b!59025 e!38832))

(declare-fun bm!4395 () Bool)

(assert (=> bm!4395 (= call!4406 (getCurrentListMap!402 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (ite (and c!7503 c!7507) lt!23829 (extraKeys!1930 newMap!16)) (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16)) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun bm!4396 () Bool)

(assert (=> bm!4396 (= call!4394 call!4388)))

(declare-fun b!59026 () Bool)

(assert (=> b!59026 (= e!38834 ((_ is Undefined!227) lt!23818))))

(declare-fun b!59027 () Bool)

(assert (=> b!59027 (= e!38825 (= call!4392 call!4407))))

(declare-fun bm!4397 () Bool)

(assert (=> bm!4397 (= call!4395 call!4387)))

(declare-fun b!59028 () Bool)

(declare-fun lt!23826 () Unit!1551)

(assert (=> b!59028 (= lt!23826 e!38826)))

(assert (=> b!59028 (= c!7506 call!4390)))

(declare-fun e!38830 () tuple2!2020)

(assert (=> b!59028 (= e!38830 (tuple2!2021 false newMap!16))))

(declare-fun b!59029 () Bool)

(assert (=> b!59029 (= e!38824 (not call!4397))))

(declare-fun d!11215 () Bool)

(assert (=> d!11215 e!38842))

(declare-fun res!32794 () Bool)

(assert (=> d!11215 (=> (not res!32794) (not e!38842))))

(assert (=> d!11215 (= res!32794 (valid!254 (_2!1021 lt!23809)))))

(assert (=> d!11215 (= lt!23809 e!38837)))

(assert (=> d!11215 (= c!7503 (= (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (bvneg (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355))))))

(assert (=> d!11215 (valid!254 newMap!16)))

(assert (=> d!11215 (= (update!73 newMap!16 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) lt!23809)))

(declare-fun bm!4398 () Bool)

(assert (=> bm!4398 (= call!4404 call!4386)))

(declare-fun b!59030 () Bool)

(assert (=> b!59030 (= e!38843 ((_ is Undefined!227) lt!23811))))

(declare-fun b!59031 () Bool)

(assert (=> b!59031 (= e!38836 (= (select (arr!1781 (_keys!3667 newMap!16)) (index!3032 lt!23833)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(declare-fun bm!4399 () Bool)

(assert (=> bm!4399 (= call!4405 call!4387)))

(declare-fun bm!4400 () Bool)

(declare-fun c!7495 () Bool)

(declare-fun updateHelperNewKey!15 (LongMapFixedSize!618 (_ BitVec 64) V!2843 (_ BitVec 32)) tuple2!2020)

(assert (=> bm!4400 (= call!4400 (updateHelperNewKey!15 newMap!16 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832))))))

(declare-fun b!59032 () Bool)

(assert (=> b!59032 (= c!7495 ((_ is MissingVacant!227) lt!23832))))

(assert (=> b!59032 (= e!38830 e!38840)))

(declare-fun bm!4401 () Bool)

(assert (=> bm!4401 (= call!4389 call!4398)))

(declare-fun b!59033 () Bool)

(assert (=> b!59033 (= e!38837 e!38830)))

(assert (=> b!59033 (= lt!23832 (seekEntryOrOpen!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (_keys!3667 newMap!16) (mask!5927 newMap!16)))))

(assert (=> b!59033 (= c!7502 ((_ is Undefined!227) lt!23832))))

(declare-fun bm!4402 () Bool)

(declare-fun lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!15 (array!3721 array!3723 (_ BitVec 32) (_ BitVec 32) V!2843 V!2843 (_ BitVec 64) Int) Unit!1551)

(assert (=> bm!4402 (= call!4402 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!15 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (defaultEntry!2043 newMap!16)))))

(declare-fun bm!4403 () Bool)

(assert (=> bm!4403 (= call!4401 call!4403)))

(declare-fun bm!4404 () Bool)

(assert (=> bm!4404 (= call!4408 call!4399)))

(declare-fun b!59034 () Bool)

(declare-fun res!32793 () Bool)

(assert (=> b!59034 (=> (not res!32793) (not e!38827))))

(assert (=> b!59034 (= res!32793 (= (select (arr!1781 (_keys!3667 newMap!16)) (index!3031 lt!23818)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4405 () Bool)

(assert (=> bm!4405 (= call!4388 (+!81 (ite c!7503 (ite c!7507 call!4395 call!4385) call!4406) (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!11215 c!7503) b!59008))

(assert (= (and d!11215 (not c!7503)) b!59033))

(assert (= (and b!59008 c!7507) b!59000))

(assert (= (and b!59008 (not c!7507)) b!59006))

(assert (= (or b!59000 b!59006) bm!4392))

(assert (= (or b!59000 b!59006) bm!4397))

(assert (= (or b!59000 b!59006) bm!4396))

(assert (= (and b!59033 c!7502) b!59028))

(assert (= (and b!59033 (not c!7502)) b!59032))

(assert (= (and b!59028 c!7506) b!59024))

(assert (= (and b!59028 (not c!7506)) b!59021))

(assert (= (and b!59024 res!32801) b!59022))

(assert (= (and b!59022 res!32791) b!59031))

(assert (= (and b!59021 c!7505) b!59019))

(assert (= (and b!59021 (not c!7505)) b!58995))

(assert (= (and b!59019 res!32799) b!59001))

(assert (= (and b!59001 res!32792) b!59029))

(assert (= (and b!58995 c!7501) b!58996))

(assert (= (and b!58995 (not c!7501)) b!59030))

(assert (= (and b!58996 res!32796) b!59010))

(assert (= (and b!59010 res!32802) b!59014))

(assert (= (or b!59019 b!58996) bm!4398))

(assert (= (or b!59029 b!59014) bm!4387))

(assert (= (or b!59022 bm!4398) bm!4390))

(assert (= (or b!59024 b!59021) bm!4401))

(assert (= (and b!59032 c!7495) b!58999))

(assert (= (and b!59032 (not c!7495)) b!59002))

(assert (= (and b!59002 c!7504) b!59015))

(assert (= (and b!59002 (not c!7504)) b!59004))

(assert (= (and b!59004 c!7496) b!59025))

(assert (= (and b!59004 (not c!7496)) b!59016))

(assert (= (and b!59025 res!32795) b!59012))

(assert (= (and b!59012 res!32803) b!59018))

(assert (= (and b!59016 c!7499) b!59023))

(assert (= (and b!59016 (not c!7499)) b!59020))

(assert (= (and b!59023 res!32798) b!59034))

(assert (= (and b!59034 res!32793) b!59003))

(assert (= (and b!59020 c!7498) b!59009))

(assert (= (and b!59020 (not c!7498)) b!59026))

(assert (= (and b!59009 res!32790) b!59011))

(assert (= (and b!59011 res!32800) b!59007))

(assert (= (or b!59023 b!59009) bm!4384))

(assert (= (or b!59003 b!59007) bm!4403))

(assert (= (or b!59012 bm!4384) bm!4404))

(assert (= (or b!59025 b!59016) bm!4382))

(assert (= (or b!58999 b!59015) bm!4400))

(assert (= (or bm!4390 bm!4404) bm!4391))

(assert (= (or bm!4401 bm!4382) bm!4388))

(assert (= (or bm!4387 bm!4403) bm!4383))

(assert (= (or b!59021 b!59016) bm!4402))

(assert (= (or b!59028 b!59004) bm!4399))

(assert (= (or b!59024 b!59025) bm!4386))

(assert (= (or b!59028 b!59004) bm!4394))

(assert (= (and bm!4394 c!7497) b!59005))

(assert (= (and bm!4394 (not c!7497)) b!58998))

(assert (= (or bm!4397 bm!4399) bm!4389))

(assert (= (or bm!4392 b!58998 b!59004) bm!4395))

(assert (= (or bm!4396 b!59004) bm!4405))

(assert (= (and d!11215 res!32794) b!58997))

(assert (= (and b!58997 c!7500) b!59013))

(assert (= (and b!58997 (not c!7500)) b!59027))

(assert (= (and b!59013 res!32797) b!59017))

(assert (= (or b!59013 b!59017 b!59027) bm!4385))

(assert (= (or b!59017 b!59027) bm!4393))

(declare-fun m!50683 () Bool)

(assert (=> bm!4385 m!50683))

(assert (=> b!59013 m!50529))

(declare-fun m!50685 () Bool)

(assert (=> b!59013 m!50685))

(assert (=> bm!4383 m!50529))

(declare-fun m!50687 () Bool)

(assert (=> bm!4383 m!50687))

(assert (=> b!59000 m!50555))

(declare-fun m!50689 () Bool)

(assert (=> b!59000 m!50689))

(declare-fun m!50691 () Bool)

(assert (=> b!59018 m!50691))

(declare-fun m!50693 () Bool)

(assert (=> b!59034 m!50693))

(assert (=> bm!4393 m!50531))

(declare-fun m!50695 () Bool)

(assert (=> bm!4395 m!50695))

(declare-fun m!50697 () Bool)

(assert (=> b!59031 m!50697))

(assert (=> bm!4394 m!50529))

(declare-fun m!50699 () Bool)

(assert (=> bm!4394 m!50699))

(declare-fun m!50701 () Bool)

(assert (=> d!11215 m!50701))

(assert (=> d!11215 m!50567))

(assert (=> bm!4402 m!50529))

(declare-fun m!50703 () Bool)

(assert (=> bm!4402 m!50703))

(declare-fun m!50705 () Bool)

(assert (=> bm!4405 m!50705))

(declare-fun m!50707 () Bool)

(assert (=> bm!4389 m!50707))

(declare-fun m!50709 () Bool)

(assert (=> bm!4389 m!50709))

(assert (=> b!59006 m!50555))

(declare-fun m!50711 () Bool)

(assert (=> b!59006 m!50711))

(assert (=> b!59033 m!50529))

(declare-fun m!50713 () Bool)

(assert (=> b!59033 m!50713))

(declare-fun m!50715 () Bool)

(assert (=> b!59010 m!50715))

(declare-fun m!50717 () Bool)

(assert (=> b!59001 m!50717))

(declare-fun m!50719 () Bool)

(assert (=> b!59004 m!50719))

(declare-fun m!50721 () Bool)

(assert (=> b!59004 m!50721))

(assert (=> b!59004 m!50707))

(assert (=> b!59004 m!50529))

(assert (=> b!59004 m!50555))

(declare-fun m!50723 () Bool)

(assert (=> b!59004 m!50723))

(assert (=> b!59004 m!50719))

(declare-fun m!50725 () Bool)

(assert (=> b!59004 m!50725))

(declare-fun m!50727 () Bool)

(assert (=> b!59004 m!50727))

(assert (=> b!59004 m!50725))

(declare-fun m!50729 () Bool)

(assert (=> bm!4391 m!50729))

(declare-fun m!50731 () Bool)

(assert (=> b!59011 m!50731))

(declare-fun m!50733 () Bool)

(assert (=> b!59017 m!50733))

(assert (=> bm!4388 m!50529))

(assert (=> bm!4388 m!50713))

(assert (=> bm!4400 m!50529))

(assert (=> bm!4400 m!50555))

(declare-fun m!50735 () Bool)

(assert (=> bm!4400 m!50735))

(assert (=> bm!4386 m!50529))

(declare-fun m!50737 () Bool)

(assert (=> bm!4386 m!50737))

(assert (=> b!58771 d!11215))

(declare-fun d!11217 () Bool)

(declare-fun c!7510 () Bool)

(assert (=> d!11217 (= c!7510 ((_ is ValueCellFull!855) (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(declare-fun e!38847 () V!2843)

(assert (=> d!11217 (= (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!38847)))

(declare-fun b!59039 () Bool)

(declare-fun get!1067 (ValueCell!855 V!2843) V!2843)

(assert (=> b!59039 (= e!38847 (get!1067 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!59040 () Bool)

(declare-fun get!1068 (ValueCell!855 V!2843) V!2843)

(assert (=> b!59040 (= e!38847 (get!1068 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11217 c!7510) b!59039))

(assert (= (and d!11217 (not c!7510)) b!59040))

(assert (=> b!59039 m!50551))

(assert (=> b!59039 m!50553))

(declare-fun m!50739 () Bool)

(assert (=> b!59039 m!50739))

(assert (=> b!59040 m!50551))

(assert (=> b!59040 m!50553))

(declare-fun m!50741 () Bool)

(assert (=> b!59040 m!50741))

(assert (=> b!58771 d!11217))

(declare-fun d!11219 () Bool)

(assert (=> d!11219 (= (validMask!0 (mask!5927 (v!2383 (underlying!226 thiss!992)))) (and (or (= (mask!5927 (v!2383 (underlying!226 thiss!992))) #b00000000000000000000000000000111) (= (mask!5927 (v!2383 (underlying!226 thiss!992))) #b00000000000000000000000000001111) (= (mask!5927 (v!2383 (underlying!226 thiss!992))) #b00000000000000000000000000011111) (= (mask!5927 (v!2383 (underlying!226 thiss!992))) #b00000000000000000000000000111111) (= (mask!5927 (v!2383 (underlying!226 thiss!992))) #b00000000000000000000000001111111) (= (mask!5927 (v!2383 (underlying!226 thiss!992))) #b00000000000000000000000011111111) (= (mask!5927 (v!2383 (underlying!226 thiss!992))) #b00000000000000000000000111111111) (= (mask!5927 (v!2383 (underlying!226 thiss!992))) #b00000000000000000000001111111111) (= (mask!5927 (v!2383 (underlying!226 thiss!992))) #b00000000000000000000011111111111) (= (mask!5927 (v!2383 (underlying!226 thiss!992))) #b00000000000000000000111111111111) (= (mask!5927 (v!2383 (underlying!226 thiss!992))) #b00000000000000000001111111111111) (= (mask!5927 (v!2383 (underlying!226 thiss!992))) #b00000000000000000011111111111111) (= (mask!5927 (v!2383 (underlying!226 thiss!992))) #b00000000000000000111111111111111) (= (mask!5927 (v!2383 (underlying!226 thiss!992))) #b00000000000000001111111111111111) (= (mask!5927 (v!2383 (underlying!226 thiss!992))) #b00000000000000011111111111111111) (= (mask!5927 (v!2383 (underlying!226 thiss!992))) #b00000000000000111111111111111111) (= (mask!5927 (v!2383 (underlying!226 thiss!992))) #b00000000000001111111111111111111) (= (mask!5927 (v!2383 (underlying!226 thiss!992))) #b00000000000011111111111111111111) (= (mask!5927 (v!2383 (underlying!226 thiss!992))) #b00000000000111111111111111111111) (= (mask!5927 (v!2383 (underlying!226 thiss!992))) #b00000000001111111111111111111111) (= (mask!5927 (v!2383 (underlying!226 thiss!992))) #b00000000011111111111111111111111) (= (mask!5927 (v!2383 (underlying!226 thiss!992))) #b00000000111111111111111111111111) (= (mask!5927 (v!2383 (underlying!226 thiss!992))) #b00000001111111111111111111111111) (= (mask!5927 (v!2383 (underlying!226 thiss!992))) #b00000011111111111111111111111111) (= (mask!5927 (v!2383 (underlying!226 thiss!992))) #b00000111111111111111111111111111) (= (mask!5927 (v!2383 (underlying!226 thiss!992))) #b00001111111111111111111111111111) (= (mask!5927 (v!2383 (underlying!226 thiss!992))) #b00011111111111111111111111111111) (= (mask!5927 (v!2383 (underlying!226 thiss!992))) #b00111111111111111111111111111111)) (bvsle (mask!5927 (v!2383 (underlying!226 thiss!992))) #b00111111111111111111111111111111)))))

(assert (=> b!58763 d!11219))

(declare-fun d!11221 () Bool)

(declare-fun res!32810 () Bool)

(declare-fun e!38850 () Bool)

(assert (=> d!11221 (=> (not res!32810) (not e!38850))))

(declare-fun simpleValid!42 (LongMapFixedSize!618) Bool)

(assert (=> d!11221 (= res!32810 (simpleValid!42 newMap!16))))

(assert (=> d!11221 (= (valid!254 newMap!16) e!38850)))

(declare-fun b!59047 () Bool)

(declare-fun res!32811 () Bool)

(assert (=> b!59047 (=> (not res!32811) (not e!38850))))

(declare-fun arrayCountValidKeys!0 (array!3721 (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!59047 (= res!32811 (= (arrayCountValidKeys!0 (_keys!3667 newMap!16) #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))) (_size!358 newMap!16)))))

(declare-fun b!59048 () Bool)

(declare-fun res!32812 () Bool)

(assert (=> b!59048 (=> (not res!32812) (not e!38850))))

(declare-fun arrayForallSeekEntryOrOpenFound!0 ((_ BitVec 32) array!3721 (_ BitVec 32)) Bool)

(assert (=> b!59048 (= res!32812 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3667 newMap!16) (mask!5927 newMap!16)))))

(declare-fun b!59049 () Bool)

(assert (=> b!59049 (= e!38850 (arrayNoDuplicates!0 (_keys!3667 newMap!16) #b00000000000000000000000000000000 Nil!1428))))

(assert (= (and d!11221 res!32810) b!59047))

(assert (= (and b!59047 res!32811) b!59048))

(assert (= (and b!59048 res!32812) b!59049))

(declare-fun m!50743 () Bool)

(assert (=> d!11221 m!50743))

(declare-fun m!50745 () Bool)

(assert (=> b!59047 m!50745))

(declare-fun m!50747 () Bool)

(assert (=> b!59048 m!50747))

(declare-fun m!50749 () Bool)

(assert (=> b!59049 m!50749))

(assert (=> b!58776 d!11221))

(declare-fun d!11223 () Bool)

(assert (=> d!11223 (= (array_inv!1101 (_keys!3667 newMap!16)) (bvsge (size!2011 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!58764 d!11223))

(declare-fun d!11225 () Bool)

(assert (=> d!11225 (= (array_inv!1102 (_values!2026 newMap!16)) (bvsge (size!2012 (_values!2026 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!58764 d!11225))

(declare-fun d!11227 () Bool)

(assert (=> d!11227 (not (arrayContainsKey!0 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!23838 () Unit!1551)

(declare-fun choose!68 (array!3721 (_ BitVec 32) (_ BitVec 64) List!1431) Unit!1551)

(assert (=> d!11227 (= lt!23838 (choose!68 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (Cons!1427 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) Nil!1428)))))

(assert (=> d!11227 (bvslt (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!11227 (= (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (Cons!1427 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) Nil!1428)) lt!23838)))

(declare-fun bs!2552 () Bool)

(assert (= bs!2552 d!11227))

(assert (=> bs!2552 m!50529))

(assert (=> bs!2552 m!50541))

(assert (=> bs!2552 m!50529))

(declare-fun m!50751 () Bool)

(assert (=> bs!2552 m!50751))

(assert (=> b!58773 d!11227))

(declare-fun d!11229 () Bool)

(assert (=> d!11229 (arrayNoDuplicates!0 (_keys!3667 (v!2383 (underlying!226 thiss!992))) from!355 Nil!1428)))

(declare-fun lt!23841 () Unit!1551)

(declare-fun choose!39 (array!3721 (_ BitVec 32) (_ BitVec 32)) Unit!1551)

(assert (=> d!11229 (= lt!23841 (choose!39 (_keys!3667 (v!2383 (underlying!226 thiss!992))) #b00000000000000000000000000000000 from!355))))

(assert (=> d!11229 (bvslt (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!11229 (= (lemmaNoDuplicateFromThenFromBigger!0 (_keys!3667 (v!2383 (underlying!226 thiss!992))) #b00000000000000000000000000000000 from!355) lt!23841)))

(declare-fun bs!2553 () Bool)

(assert (= bs!2553 d!11229))

(assert (=> bs!2553 m!50537))

(declare-fun m!50753 () Bool)

(assert (=> bs!2553 m!50753))

(assert (=> b!58773 d!11229))

(declare-fun d!11231 () Bool)

(declare-fun res!32817 () Bool)

(declare-fun e!38855 () Bool)

(assert (=> d!11231 (=> res!32817 e!38855)))

(assert (=> d!11231 (= res!32817 (= (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(assert (=> d!11231 (= (arrayContainsKey!0 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)) e!38855)))

(declare-fun b!59054 () Bool)

(declare-fun e!38856 () Bool)

(assert (=> b!59054 (= e!38855 e!38856)))

(declare-fun res!32818 () Bool)

(assert (=> b!59054 (=> (not res!32818) (not e!38856))))

(assert (=> b!59054 (= res!32818 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992))))))))

(declare-fun b!59055 () Bool)

(assert (=> b!59055 (= e!38856 (arrayContainsKey!0 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (= (and d!11231 (not res!32817)) b!59054))

(assert (= (and b!59054 res!32818) b!59055))

(assert (=> d!11231 m!50627))

(assert (=> b!59055 m!50529))

(declare-fun m!50755 () Bool)

(assert (=> b!59055 m!50755))

(assert (=> b!58773 d!11231))

(declare-fun d!11233 () Bool)

(declare-fun e!38859 () Bool)

(assert (=> d!11233 e!38859))

(declare-fun c!7513 () Bool)

(assert (=> d!11233 (= c!7513 (and (not (= (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun lt!23844 () Unit!1551)

(declare-fun choose!301 (array!3721 array!3723 (_ BitVec 32) (_ BitVec 32) V!2843 V!2843 (_ BitVec 64) (_ BitVec 32) Int) Unit!1551)

(assert (=> d!11233 (= lt!23844 (choose!301 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (_values!2026 (v!2383 (underlying!226 thiss!992))) (mask!5927 (v!2383 (underlying!226 thiss!992))) (extraKeys!1930 (v!2383 (underlying!226 thiss!992))) (zeroValue!1959 (v!2383 (underlying!226 thiss!992))) (minValue!1959 (v!2383 (underlying!226 thiss!992))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2043 (v!2383 (underlying!226 thiss!992)))))))

(assert (=> d!11233 (validMask!0 (mask!5927 (v!2383 (underlying!226 thiss!992))))))

(assert (=> d!11233 (= (lemmaListMapContainsThenArrayContainsFrom!30 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (_values!2026 (v!2383 (underlying!226 thiss!992))) (mask!5927 (v!2383 (underlying!226 thiss!992))) (extraKeys!1930 (v!2383 (underlying!226 thiss!992))) (zeroValue!1959 (v!2383 (underlying!226 thiss!992))) (minValue!1959 (v!2383 (underlying!226 thiss!992))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2043 (v!2383 (underlying!226 thiss!992)))) lt!23844)))

(declare-fun b!59060 () Bool)

(assert (=> b!59060 (= e!38859 (arrayContainsKey!0 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!59061 () Bool)

(assert (=> b!59061 (= e!38859 (ite (= (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!1930 (v!2383 (underlying!226 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1930 (v!2383 (underlying!226 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!11233 c!7513) b!59060))

(assert (= (and d!11233 (not c!7513)) b!59061))

(assert (=> d!11233 m!50529))

(declare-fun m!50757 () Bool)

(assert (=> d!11233 m!50757))

(assert (=> d!11233 m!50565))

(assert (=> b!59060 m!50529))

(assert (=> b!59060 m!50541))

(assert (=> b!58773 d!11233))

(declare-fun bm!4408 () Bool)

(declare-fun call!4411 () Bool)

(declare-fun c!7516 () Bool)

(assert (=> bm!4408 (= call!4411 (arrayNoDuplicates!0 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!7516 (Cons!1427 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) Nil!1428) Nil!1428)))))

(declare-fun b!59072 () Bool)

(declare-fun e!38870 () Bool)

(declare-fun contains!683 (List!1431 (_ BitVec 64)) Bool)

(assert (=> b!59072 (= e!38870 (contains!683 Nil!1428 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(declare-fun b!59073 () Bool)

(declare-fun e!38869 () Bool)

(assert (=> b!59073 (= e!38869 call!4411)))

(declare-fun b!59074 () Bool)

(assert (=> b!59074 (= e!38869 call!4411)))

(declare-fun b!59075 () Bool)

(declare-fun e!38871 () Bool)

(assert (=> b!59075 (= e!38871 e!38869)))

(assert (=> b!59075 (= c!7516 (validKeyInArray!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(declare-fun d!11235 () Bool)

(declare-fun res!32827 () Bool)

(declare-fun e!38868 () Bool)

(assert (=> d!11235 (=> res!32827 e!38868)))

(assert (=> d!11235 (= res!32827 (bvsge from!355 (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992))))))))

(assert (=> d!11235 (= (arrayNoDuplicates!0 (_keys!3667 (v!2383 (underlying!226 thiss!992))) from!355 Nil!1428) e!38868)))

(declare-fun b!59076 () Bool)

(assert (=> b!59076 (= e!38868 e!38871)))

(declare-fun res!32826 () Bool)

(assert (=> b!59076 (=> (not res!32826) (not e!38871))))

(assert (=> b!59076 (= res!32826 (not e!38870))))

(declare-fun res!32825 () Bool)

(assert (=> b!59076 (=> (not res!32825) (not e!38870))))

(assert (=> b!59076 (= res!32825 (validKeyInArray!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(assert (= (and d!11235 (not res!32827)) b!59076))

(assert (= (and b!59076 res!32825) b!59072))

(assert (= (and b!59076 res!32826) b!59075))

(assert (= (and b!59075 c!7516) b!59073))

(assert (= (and b!59075 (not c!7516)) b!59074))

(assert (= (or b!59073 b!59074) bm!4408))

(assert (=> bm!4408 m!50529))

(declare-fun m!50759 () Bool)

(assert (=> bm!4408 m!50759))

(assert (=> b!59072 m!50529))

(assert (=> b!59072 m!50529))

(declare-fun m!50761 () Bool)

(assert (=> b!59072 m!50761))

(assert (=> b!59075 m!50529))

(assert (=> b!59075 m!50529))

(declare-fun m!50763 () Bool)

(assert (=> b!59075 m!50763))

(assert (=> b!59076 m!50529))

(assert (=> b!59076 m!50529))

(assert (=> b!59076 m!50763))

(assert (=> b!58773 d!11235))

(declare-fun d!11237 () Bool)

(assert (=> d!11237 (= (valid!255 thiss!992) (valid!254 (v!2383 (underlying!226 thiss!992))))))

(declare-fun bs!2554 () Bool)

(assert (= bs!2554 d!11237))

(declare-fun m!50765 () Bool)

(assert (=> bs!2554 m!50765))

(assert (=> start!8570 d!11237))

(declare-fun d!11239 () Bool)

(assert (=> d!11239 (= (array_inv!1101 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvsge (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!58765 d!11239))

(declare-fun d!11241 () Bool)

(assert (=> d!11241 (= (array_inv!1102 (_values!2026 (v!2383 (underlying!226 thiss!992)))) (bvsge (size!2012 (_values!2026 (v!2383 (underlying!226 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!58765 d!11241))

(declare-fun b!59083 () Bool)

(declare-fun e!38876 () Bool)

(assert (=> b!59083 (= e!38876 tp_is_empty!2397)))

(declare-fun b!59084 () Bool)

(declare-fun e!38877 () Bool)

(assert (=> b!59084 (= e!38877 tp_is_empty!2397)))

(declare-fun mapNonEmpty!2883 () Bool)

(declare-fun mapRes!2883 () Bool)

(declare-fun tp!8013 () Bool)

(assert (=> mapNonEmpty!2883 (= mapRes!2883 (and tp!8013 e!38876))))

(declare-fun mapRest!2883 () (Array (_ BitVec 32) ValueCell!855))

(declare-fun mapKey!2883 () (_ BitVec 32))

(declare-fun mapValue!2883 () ValueCell!855)

(assert (=> mapNonEmpty!2883 (= mapRest!2874 (store mapRest!2883 mapKey!2883 mapValue!2883))))

(declare-fun condMapEmpty!2883 () Bool)

(declare-fun mapDefault!2883 () ValueCell!855)

(assert (=> mapNonEmpty!2874 (= condMapEmpty!2883 (= mapRest!2874 ((as const (Array (_ BitVec 32) ValueCell!855)) mapDefault!2883)))))

(assert (=> mapNonEmpty!2874 (= tp!7996 (and e!38877 mapRes!2883))))

(declare-fun mapIsEmpty!2883 () Bool)

(assert (=> mapIsEmpty!2883 mapRes!2883))

(assert (= (and mapNonEmpty!2874 condMapEmpty!2883) mapIsEmpty!2883))

(assert (= (and mapNonEmpty!2874 (not condMapEmpty!2883)) mapNonEmpty!2883))

(assert (= (and mapNonEmpty!2883 ((_ is ValueCellFull!855) mapValue!2883)) b!59083))

(assert (= (and mapNonEmpty!2874 ((_ is ValueCellFull!855) mapDefault!2883)) b!59084))

(declare-fun m!50767 () Bool)

(assert (=> mapNonEmpty!2883 m!50767))

(declare-fun b!59085 () Bool)

(declare-fun e!38878 () Bool)

(assert (=> b!59085 (= e!38878 tp_is_empty!2397)))

(declare-fun b!59086 () Bool)

(declare-fun e!38879 () Bool)

(assert (=> b!59086 (= e!38879 tp_is_empty!2397)))

(declare-fun mapNonEmpty!2884 () Bool)

(declare-fun mapRes!2884 () Bool)

(declare-fun tp!8014 () Bool)

(assert (=> mapNonEmpty!2884 (= mapRes!2884 (and tp!8014 e!38878))))

(declare-fun mapValue!2884 () ValueCell!855)

(declare-fun mapRest!2884 () (Array (_ BitVec 32) ValueCell!855))

(declare-fun mapKey!2884 () (_ BitVec 32))

(assert (=> mapNonEmpty!2884 (= mapRest!2873 (store mapRest!2884 mapKey!2884 mapValue!2884))))

(declare-fun condMapEmpty!2884 () Bool)

(declare-fun mapDefault!2884 () ValueCell!855)

(assert (=> mapNonEmpty!2873 (= condMapEmpty!2884 (= mapRest!2873 ((as const (Array (_ BitVec 32) ValueCell!855)) mapDefault!2884)))))

(assert (=> mapNonEmpty!2873 (= tp!7995 (and e!38879 mapRes!2884))))

(declare-fun mapIsEmpty!2884 () Bool)

(assert (=> mapIsEmpty!2884 mapRes!2884))

(assert (= (and mapNonEmpty!2873 condMapEmpty!2884) mapIsEmpty!2884))

(assert (= (and mapNonEmpty!2873 (not condMapEmpty!2884)) mapNonEmpty!2884))

(assert (= (and mapNonEmpty!2884 ((_ is ValueCellFull!855) mapValue!2884)) b!59085))

(assert (= (and mapNonEmpty!2873 ((_ is ValueCellFull!855) mapDefault!2884)) b!59086))

(declare-fun m!50769 () Bool)

(assert (=> mapNonEmpty!2884 m!50769))

(declare-fun b_lambda!2589 () Bool)

(assert (= b_lambda!2587 (or (and b!58765 b_free!1961) (and b!58764 b_free!1963 (= (defaultEntry!2043 newMap!16) (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))))) b_lambda!2589)))

(check-sat b_and!3569 (not d!11227) (not b!58900) (not b!58912) (not mapNonEmpty!2883) (not b!58914) (not b_lambda!2585) (not mapNonEmpty!2884) (not b!59048) (not b_next!1963) (not d!11211) (not bm!4402) (not b!59039) (not b!59013) (not b!59006) (not b!59000) (not b!58905) (not bm!4408) (not d!11233) (not b!58897) (not b_lambda!2589) (not bm!4388) (not bm!4386) (not bm!4394) (not bm!4393) (not bm!4405) (not b!58889) (not bm!4385) (not d!11215) (not b_next!1961) (not bm!4400) (not bm!4389) tp_is_empty!2397 (not b!58888) (not b!59017) (not b!59049) (not bm!4391) (not b!59075) (not b!59004) (not b!59076) (not b!58902) (not bm!4327) (not d!11213) (not d!11229) (not b!59040) (not b!59047) (not bm!4328) (not bm!4395) (not b!59072) (not bm!4332) (not b!58893) (not b!59033) (not b!58901) (not bm!4333) b_and!3567 (not b!59055) (not b!59060) (not d!11221) (not d!11209) (not bm!4383) (not d!11237))
(check-sat b_and!3567 b_and!3569 (not b_next!1961) (not b_next!1963))
(get-model)

(assert (=> b!59060 d!11231))

(declare-fun d!11243 () Bool)

(assert (=> d!11243 (= (+!81 (getCurrentListMap!402 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!402 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) lt!23820 (zeroValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!23847 () Unit!1551)

(declare-fun choose!302 (array!3721 array!3723 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2843 V!2843 V!2843 Int) Unit!1551)

(assert (=> d!11243 (= lt!23847 (choose!302 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) lt!23820 (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2043 newMap!16)))))

(assert (=> d!11243 (validMask!0 (mask!5927 newMap!16))))

(assert (=> d!11243 (= (lemmaChangeLongMinValueKeyThenAddPairToListMap!15 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) lt!23820 (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2043 newMap!16)) lt!23847)))

(declare-fun bs!2555 () Bool)

(assert (= bs!2555 d!11243))

(declare-fun m!50771 () Bool)

(assert (=> bs!2555 m!50771))

(assert (=> bs!2555 m!50555))

(declare-fun m!50773 () Bool)

(assert (=> bs!2555 m!50773))

(assert (=> bs!2555 m!50617))

(assert (=> bs!2555 m!50617))

(declare-fun m!50775 () Bool)

(assert (=> bs!2555 m!50775))

(assert (=> bs!2555 m!50555))

(declare-fun m!50777 () Bool)

(assert (=> bs!2555 m!50777))

(assert (=> b!59006 d!11243))

(assert (=> d!11229 d!11235))

(declare-fun d!11245 () Bool)

(assert (=> d!11245 (arrayNoDuplicates!0 (_keys!3667 (v!2383 (underlying!226 thiss!992))) from!355 Nil!1428)))

(assert (=> d!11245 true))

(declare-fun _$71!72 () Unit!1551)

(assert (=> d!11245 (= (choose!39 (_keys!3667 (v!2383 (underlying!226 thiss!992))) #b00000000000000000000000000000000 from!355) _$71!72)))

(declare-fun bs!2556 () Bool)

(assert (= bs!2556 d!11245))

(assert (=> bs!2556 m!50537))

(assert (=> d!11229 d!11245))

(declare-fun d!11247 () Bool)

(declare-fun res!32828 () Bool)

(declare-fun e!38880 () Bool)

(assert (=> d!11247 (=> (not res!32828) (not e!38880))))

(assert (=> d!11247 (= res!32828 (simpleValid!42 (v!2383 (underlying!226 thiss!992))))))

(assert (=> d!11247 (= (valid!254 (v!2383 (underlying!226 thiss!992))) e!38880)))

(declare-fun b!59087 () Bool)

(declare-fun res!32829 () Bool)

(assert (=> b!59087 (=> (not res!32829) (not e!38880))))

(assert (=> b!59087 (= res!32829 (= (arrayCountValidKeys!0 (_keys!3667 (v!2383 (underlying!226 thiss!992))) #b00000000000000000000000000000000 (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992))))) (_size!358 (v!2383 (underlying!226 thiss!992)))))))

(declare-fun b!59088 () Bool)

(declare-fun res!32830 () Bool)

(assert (=> b!59088 (=> (not res!32830) (not e!38880))))

(assert (=> b!59088 (= res!32830 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (mask!5927 (v!2383 (underlying!226 thiss!992)))))))

(declare-fun b!59089 () Bool)

(assert (=> b!59089 (= e!38880 (arrayNoDuplicates!0 (_keys!3667 (v!2383 (underlying!226 thiss!992))) #b00000000000000000000000000000000 Nil!1428))))

(assert (= (and d!11247 res!32828) b!59087))

(assert (= (and b!59087 res!32829) b!59088))

(assert (= (and b!59088 res!32830) b!59089))

(declare-fun m!50779 () Bool)

(assert (=> d!11247 m!50779))

(declare-fun m!50781 () Bool)

(assert (=> b!59087 m!50781))

(declare-fun m!50783 () Bool)

(assert (=> b!59088 m!50783))

(declare-fun m!50785 () Bool)

(assert (=> b!59089 m!50785))

(assert (=> d!11237 d!11247))

(declare-fun d!11249 () Bool)

(declare-fun e!38881 () Bool)

(assert (=> d!11249 e!38881))

(declare-fun res!32831 () Bool)

(assert (=> d!11249 (=> res!32831 e!38881)))

(declare-fun lt!23850 () Bool)

(assert (=> d!11249 (= res!32831 (not lt!23850))))

(declare-fun lt!23849 () Bool)

(assert (=> d!11249 (= lt!23850 lt!23849)))

(declare-fun lt!23851 () Unit!1551)

(declare-fun e!38882 () Unit!1551)

(assert (=> d!11249 (= lt!23851 e!38882)))

(declare-fun c!7517 () Bool)

(assert (=> d!11249 (= c!7517 lt!23849)))

(assert (=> d!11249 (= lt!23849 (containsKey!128 (toList!697 (getCurrentListMap!402 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16))) (select (arr!1781 (_keys!3667 newMap!16)) (index!3032 lt!23832))))))

(assert (=> d!11249 (= (contains!682 (getCurrentListMap!402 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)) (select (arr!1781 (_keys!3667 newMap!16)) (index!3032 lt!23832))) lt!23850)))

(declare-fun b!59090 () Bool)

(declare-fun lt!23848 () Unit!1551)

(assert (=> b!59090 (= e!38882 lt!23848)))

(assert (=> b!59090 (= lt!23848 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 (getCurrentListMap!402 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16))) (select (arr!1781 (_keys!3667 newMap!16)) (index!3032 lt!23832))))))

(assert (=> b!59090 (isDefined!77 (getValueByKey!124 (toList!697 (getCurrentListMap!402 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16))) (select (arr!1781 (_keys!3667 newMap!16)) (index!3032 lt!23832))))))

(declare-fun b!59091 () Bool)

(declare-fun Unit!1559 () Unit!1551)

(assert (=> b!59091 (= e!38882 Unit!1559)))

(declare-fun b!59092 () Bool)

(assert (=> b!59092 (= e!38881 (isDefined!77 (getValueByKey!124 (toList!697 (getCurrentListMap!402 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16))) (select (arr!1781 (_keys!3667 newMap!16)) (index!3032 lt!23832)))))))

(assert (= (and d!11249 c!7517) b!59090))

(assert (= (and d!11249 (not c!7517)) b!59091))

(assert (= (and d!11249 (not res!32831)) b!59092))

(assert (=> d!11249 m!50725))

(declare-fun m!50787 () Bool)

(assert (=> d!11249 m!50787))

(assert (=> b!59090 m!50725))

(declare-fun m!50789 () Bool)

(assert (=> b!59090 m!50789))

(assert (=> b!59090 m!50725))

(declare-fun m!50791 () Bool)

(assert (=> b!59090 m!50791))

(assert (=> b!59090 m!50791))

(declare-fun m!50793 () Bool)

(assert (=> b!59090 m!50793))

(assert (=> b!59092 m!50725))

(assert (=> b!59092 m!50791))

(assert (=> b!59092 m!50791))

(assert (=> b!59092 m!50793))

(assert (=> b!59004 d!11249))

(declare-fun c!7523 () Bool)

(declare-fun c!7520 () Bool)

(declare-fun call!4418 () ListLongMap!1363)

(declare-fun call!4417 () ListLongMap!1363)

(declare-fun call!4415 () ListLongMap!1363)

(declare-fun bm!4409 () Bool)

(declare-fun call!4414 () ListLongMap!1363)

(assert (=> bm!4409 (= call!4415 (+!81 (ite c!7520 call!4414 (ite c!7523 call!4417 call!4418)) (ite (or c!7520 c!7523) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))))))

(declare-fun b!59093 () Bool)

(declare-fun e!38883 () ListLongMap!1363)

(declare-fun call!4412 () ListLongMap!1363)

(assert (=> b!59093 (= e!38883 call!4412)))

(declare-fun b!59094 () Bool)

(declare-fun c!7522 () Bool)

(assert (=> b!59094 (= c!7522 (and (not (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!38887 () ListLongMap!1363)

(assert (=> b!59094 (= e!38887 e!38883)))

(declare-fun b!59095 () Bool)

(declare-fun e!38890 () Bool)

(declare-fun call!4416 () Bool)

(assert (=> b!59095 (= e!38890 (not call!4416))))

(declare-fun b!59097 () Bool)

(declare-fun e!38889 () Bool)

(assert (=> b!59097 (= e!38889 (validKeyInArray!0 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59098 () Bool)

(declare-fun e!38893 () Bool)

(assert (=> b!59098 (= e!38890 e!38893)))

(declare-fun res!32840 () Bool)

(assert (=> b!59098 (= res!32840 call!4416)))

(assert (=> b!59098 (=> (not res!32840) (not e!38893))))

(declare-fun b!59099 () Bool)

(declare-fun e!38895 () Bool)

(assert (=> b!59099 (= e!38895 e!38890)))

(declare-fun c!7521 () Bool)

(assert (=> b!59099 (= c!7521 (not (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!59100 () Bool)

(declare-fun e!38891 () Bool)

(declare-fun call!4413 () Bool)

(assert (=> b!59100 (= e!38891 (not call!4413))))

(declare-fun b!59101 () Bool)

(declare-fun e!38884 () Bool)

(declare-fun lt!23870 () ListLongMap!1363)

(assert (=> b!59101 (= e!38884 (= (apply!66 lt!23870 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1959 newMap!16)))))

(declare-fun b!59102 () Bool)

(declare-fun e!38885 () ListLongMap!1363)

(assert (=> b!59102 (= e!38885 e!38887)))

(assert (=> b!59102 (= c!7523 (and (not (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!59103 () Bool)

(declare-fun e!38892 () Unit!1551)

(declare-fun Unit!1560 () Unit!1551)

(assert (=> b!59103 (= e!38892 Unit!1560)))

(declare-fun bm!4410 () Bool)

(assert (=> bm!4410 (= call!4413 (contains!682 lt!23870 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59104 () Bool)

(declare-fun res!32832 () Bool)

(assert (=> b!59104 (=> (not res!32832) (not e!38895))))

(declare-fun e!38886 () Bool)

(assert (=> b!59104 (= res!32832 e!38886)))

(declare-fun res!32833 () Bool)

(assert (=> b!59104 (=> res!32833 e!38886)))

(declare-fun e!38894 () Bool)

(assert (=> b!59104 (= res!32833 (not e!38894))))

(declare-fun res!32835 () Bool)

(assert (=> b!59104 (=> (not res!32835) (not e!38894))))

(assert (=> b!59104 (= res!32835 (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(declare-fun b!59096 () Bool)

(assert (=> b!59096 (= e!38885 (+!81 call!4415 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))))))

(declare-fun d!11251 () Bool)

(assert (=> d!11251 e!38895))

(declare-fun res!32839 () Bool)

(assert (=> d!11251 (=> (not res!32839) (not e!38895))))

(assert (=> d!11251 (= res!32839 (or (bvsge #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))))

(declare-fun lt!23855 () ListLongMap!1363)

(assert (=> d!11251 (= lt!23870 lt!23855)))

(declare-fun lt!23858 () Unit!1551)

(assert (=> d!11251 (= lt!23858 e!38892)))

(declare-fun c!7518 () Bool)

(assert (=> d!11251 (= c!7518 e!38889)))

(declare-fun res!32836 () Bool)

(assert (=> d!11251 (=> (not res!32836) (not e!38889))))

(assert (=> d!11251 (= res!32836 (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(assert (=> d!11251 (= lt!23855 e!38885)))

(assert (=> d!11251 (= c!7520 (and (not (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11251 (validMask!0 (mask!5927 newMap!16))))

(assert (=> d!11251 (= (getCurrentListMap!402 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)) lt!23870)))

(declare-fun bm!4411 () Bool)

(assert (=> bm!4411 (= call!4418 call!4417)))

(declare-fun b!59105 () Bool)

(assert (=> b!59105 (= e!38894 (validKeyInArray!0 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59106 () Bool)

(assert (=> b!59106 (= e!38891 e!38884)))

(declare-fun res!32838 () Bool)

(assert (=> b!59106 (= res!32838 call!4413)))

(assert (=> b!59106 (=> (not res!32838) (not e!38884))))

(declare-fun bm!4412 () Bool)

(assert (=> bm!4412 (= call!4417 call!4414)))

(declare-fun b!59107 () Bool)

(assert (=> b!59107 (= e!38883 call!4418)))

(declare-fun bm!4413 () Bool)

(assert (=> bm!4413 (= call!4412 call!4415)))

(declare-fun bm!4414 () Bool)

(assert (=> bm!4414 (= call!4414 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun e!38888 () Bool)

(declare-fun b!59108 () Bool)

(assert (=> b!59108 (= e!38888 (= (apply!66 lt!23870 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)) (get!1066 (select (arr!1782 lt!23824) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2043 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!59108 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2012 lt!23824)))))

(assert (=> b!59108 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(declare-fun b!59109 () Bool)

(declare-fun lt!23866 () Unit!1551)

(assert (=> b!59109 (= e!38892 lt!23866)))

(declare-fun lt!23859 () ListLongMap!1363)

(assert (=> b!59109 (= lt!23859 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!23854 () (_ BitVec 64))

(assert (=> b!59109 (= lt!23854 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23852 () (_ BitVec 64))

(assert (=> b!59109 (= lt!23852 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23867 () Unit!1551)

(assert (=> b!59109 (= lt!23867 (addStillContains!42 lt!23859 lt!23854 (zeroValue!1959 newMap!16) lt!23852))))

(assert (=> b!59109 (contains!682 (+!81 lt!23859 (tuple2!2023 lt!23854 (zeroValue!1959 newMap!16))) lt!23852)))

(declare-fun lt!23873 () Unit!1551)

(assert (=> b!59109 (= lt!23873 lt!23867)))

(declare-fun lt!23856 () ListLongMap!1363)

(assert (=> b!59109 (= lt!23856 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!23864 () (_ BitVec 64))

(assert (=> b!59109 (= lt!23864 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23869 () (_ BitVec 64))

(assert (=> b!59109 (= lt!23869 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23862 () Unit!1551)

(assert (=> b!59109 (= lt!23862 (addApplyDifferent!42 lt!23856 lt!23864 (minValue!1959 newMap!16) lt!23869))))

(assert (=> b!59109 (= (apply!66 (+!81 lt!23856 (tuple2!2023 lt!23864 (minValue!1959 newMap!16))) lt!23869) (apply!66 lt!23856 lt!23869))))

(declare-fun lt!23868 () Unit!1551)

(assert (=> b!59109 (= lt!23868 lt!23862)))

(declare-fun lt!23857 () ListLongMap!1363)

(assert (=> b!59109 (= lt!23857 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!23865 () (_ BitVec 64))

(assert (=> b!59109 (= lt!23865 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23853 () (_ BitVec 64))

(assert (=> b!59109 (= lt!23853 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23871 () Unit!1551)

(assert (=> b!59109 (= lt!23871 (addApplyDifferent!42 lt!23857 lt!23865 (zeroValue!1959 newMap!16) lt!23853))))

(assert (=> b!59109 (= (apply!66 (+!81 lt!23857 (tuple2!2023 lt!23865 (zeroValue!1959 newMap!16))) lt!23853) (apply!66 lt!23857 lt!23853))))

(declare-fun lt!23860 () Unit!1551)

(assert (=> b!59109 (= lt!23860 lt!23871)))

(declare-fun lt!23863 () ListLongMap!1363)

(assert (=> b!59109 (= lt!23863 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!23861 () (_ BitVec 64))

(assert (=> b!59109 (= lt!23861 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23872 () (_ BitVec 64))

(assert (=> b!59109 (= lt!23872 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!59109 (= lt!23866 (addApplyDifferent!42 lt!23863 lt!23861 (minValue!1959 newMap!16) lt!23872))))

(assert (=> b!59109 (= (apply!66 (+!81 lt!23863 (tuple2!2023 lt!23861 (minValue!1959 newMap!16))) lt!23872) (apply!66 lt!23863 lt!23872))))

(declare-fun b!59110 () Bool)

(assert (=> b!59110 (= e!38886 e!38888)))

(declare-fun res!32834 () Bool)

(assert (=> b!59110 (=> (not res!32834) (not e!38888))))

(assert (=> b!59110 (= res!32834 (contains!682 lt!23870 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59110 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(declare-fun b!59111 () Bool)

(declare-fun res!32837 () Bool)

(assert (=> b!59111 (=> (not res!32837) (not e!38895))))

(assert (=> b!59111 (= res!32837 e!38891)))

(declare-fun c!7519 () Bool)

(assert (=> b!59111 (= c!7519 (not (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!4415 () Bool)

(assert (=> bm!4415 (= call!4416 (contains!682 lt!23870 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59112 () Bool)

(assert (=> b!59112 (= e!38887 call!4412)))

(declare-fun b!59113 () Bool)

(assert (=> b!59113 (= e!38893 (= (apply!66 lt!23870 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1959 newMap!16)))))

(assert (= (and d!11251 c!7520) b!59096))

(assert (= (and d!11251 (not c!7520)) b!59102))

(assert (= (and b!59102 c!7523) b!59112))

(assert (= (and b!59102 (not c!7523)) b!59094))

(assert (= (and b!59094 c!7522) b!59093))

(assert (= (and b!59094 (not c!7522)) b!59107))

(assert (= (or b!59093 b!59107) bm!4411))

(assert (= (or b!59112 bm!4411) bm!4412))

(assert (= (or b!59112 b!59093) bm!4413))

(assert (= (or b!59096 bm!4412) bm!4414))

(assert (= (or b!59096 bm!4413) bm!4409))

(assert (= (and d!11251 res!32836) b!59097))

(assert (= (and d!11251 c!7518) b!59109))

(assert (= (and d!11251 (not c!7518)) b!59103))

(assert (= (and d!11251 res!32839) b!59104))

(assert (= (and b!59104 res!32835) b!59105))

(assert (= (and b!59104 (not res!32833)) b!59110))

(assert (= (and b!59110 res!32834) b!59108))

(assert (= (and b!59104 res!32832) b!59111))

(assert (= (and b!59111 c!7519) b!59106))

(assert (= (and b!59111 (not c!7519)) b!59100))

(assert (= (and b!59106 res!32838) b!59101))

(assert (= (or b!59106 b!59100) bm!4410))

(assert (= (and b!59111 res!32837) b!59099))

(assert (= (and b!59099 c!7521) b!59098))

(assert (= (and b!59099 (not c!7521)) b!59095))

(assert (= (and b!59098 res!32840) b!59113))

(assert (= (or b!59098 b!59095) bm!4415))

(declare-fun b_lambda!2591 () Bool)

(assert (=> (not b_lambda!2591) (not b!59108)))

(declare-fun tb!1321 () Bool)

(declare-fun t!4775 () Bool)

(assert (=> (and b!58765 (= (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) (defaultEntry!2043 newMap!16)) t!4775) tb!1321))

(declare-fun result!2381 () Bool)

(assert (=> tb!1321 (= result!2381 tp_is_empty!2397)))

(assert (=> b!59108 t!4775))

(declare-fun b_and!3571 () Bool)

(assert (= b_and!3567 (and (=> t!4775 result!2381) b_and!3571)))

(declare-fun t!4777 () Bool)

(declare-fun tb!1323 () Bool)

(assert (=> (and b!58764 (= (defaultEntry!2043 newMap!16) (defaultEntry!2043 newMap!16)) t!4777) tb!1323))

(declare-fun result!2383 () Bool)

(assert (= result!2383 result!2381))

(assert (=> b!59108 t!4777))

(declare-fun b_and!3573 () Bool)

(assert (= b_and!3569 (and (=> t!4777 result!2383) b_and!3573)))

(declare-fun m!50795 () Bool)

(assert (=> b!59096 m!50795))

(declare-fun m!50797 () Bool)

(assert (=> bm!4414 m!50797))

(declare-fun m!50799 () Bool)

(assert (=> bm!4409 m!50799))

(declare-fun m!50801 () Bool)

(assert (=> b!59101 m!50801))

(declare-fun m!50803 () Bool)

(assert (=> b!59105 m!50803))

(assert (=> b!59105 m!50803))

(declare-fun m!50805 () Bool)

(assert (=> b!59105 m!50805))

(declare-fun m!50807 () Bool)

(assert (=> bm!4410 m!50807))

(declare-fun m!50809 () Bool)

(assert (=> b!59108 m!50809))

(assert (=> b!59108 m!50803))

(declare-fun m!50811 () Bool)

(assert (=> b!59108 m!50811))

(declare-fun m!50813 () Bool)

(assert (=> b!59108 m!50813))

(assert (=> b!59108 m!50809))

(assert (=> b!59108 m!50813))

(declare-fun m!50815 () Bool)

(assert (=> b!59108 m!50815))

(assert (=> b!59108 m!50803))

(declare-fun m!50817 () Bool)

(assert (=> b!59113 m!50817))

(assert (=> b!59110 m!50803))

(assert (=> b!59110 m!50803))

(declare-fun m!50819 () Bool)

(assert (=> b!59110 m!50819))

(assert (=> b!59097 m!50803))

(assert (=> b!59097 m!50803))

(assert (=> b!59097 m!50805))

(assert (=> d!11251 m!50771))

(declare-fun m!50821 () Bool)

(assert (=> bm!4415 m!50821))

(declare-fun m!50823 () Bool)

(assert (=> b!59109 m!50823))

(declare-fun m!50825 () Bool)

(assert (=> b!59109 m!50825))

(declare-fun m!50827 () Bool)

(assert (=> b!59109 m!50827))

(declare-fun m!50829 () Bool)

(assert (=> b!59109 m!50829))

(assert (=> b!59109 m!50823))

(declare-fun m!50831 () Bool)

(assert (=> b!59109 m!50831))

(declare-fun m!50833 () Bool)

(assert (=> b!59109 m!50833))

(declare-fun m!50835 () Bool)

(assert (=> b!59109 m!50835))

(assert (=> b!59109 m!50797))

(declare-fun m!50837 () Bool)

(assert (=> b!59109 m!50837))

(declare-fun m!50839 () Bool)

(assert (=> b!59109 m!50839))

(declare-fun m!50841 () Bool)

(assert (=> b!59109 m!50841))

(assert (=> b!59109 m!50803))

(declare-fun m!50843 () Bool)

(assert (=> b!59109 m!50843))

(declare-fun m!50845 () Bool)

(assert (=> b!59109 m!50845))

(declare-fun m!50847 () Bool)

(assert (=> b!59109 m!50847))

(assert (=> b!59109 m!50837))

(declare-fun m!50849 () Bool)

(assert (=> b!59109 m!50849))

(assert (=> b!59109 m!50833))

(declare-fun m!50851 () Bool)

(assert (=> b!59109 m!50851))

(assert (=> b!59109 m!50843))

(assert (=> b!59004 d!11251))

(declare-fun d!11253 () Bool)

(declare-fun e!38898 () Bool)

(assert (=> d!11253 e!38898))

(declare-fun res!32843 () Bool)

(assert (=> d!11253 (=> (not res!32843) (not e!38898))))

(assert (=> d!11253 (= res!32843 (and (bvsge (index!3032 lt!23832) #b00000000000000000000000000000000) (bvslt (index!3032 lt!23832) (size!2011 (_keys!3667 newMap!16)))))))

(declare-fun lt!23876 () Unit!1551)

(declare-fun choose!303 (array!3721 array!3723 (_ BitVec 32) (_ BitVec 32) V!2843 V!2843 (_ BitVec 32) Int) Unit!1551)

(assert (=> d!11253 (= lt!23876 (choose!303 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) (index!3032 lt!23832) (defaultEntry!2043 newMap!16)))))

(assert (=> d!11253 (validMask!0 (mask!5927 newMap!16))))

(assert (=> d!11253 (= (lemmaValidKeyInArrayIsInListMap!76 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) (index!3032 lt!23832) (defaultEntry!2043 newMap!16)) lt!23876)))

(declare-fun b!59116 () Bool)

(assert (=> b!59116 (= e!38898 (contains!682 (getCurrentListMap!402 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)) (select (arr!1781 (_keys!3667 newMap!16)) (index!3032 lt!23832))))))

(assert (= (and d!11253 res!32843) b!59116))

(declare-fun m!50853 () Bool)

(assert (=> d!11253 m!50853))

(assert (=> d!11253 m!50771))

(assert (=> b!59116 m!50719))

(assert (=> b!59116 m!50725))

(assert (=> b!59116 m!50719))

(assert (=> b!59116 m!50725))

(assert (=> b!59116 m!50727))

(assert (=> b!59004 d!11253))

(declare-fun d!11255 () Bool)

(declare-fun e!38901 () Bool)

(assert (=> d!11255 e!38901))

(declare-fun res!32846 () Bool)

(assert (=> d!11255 (=> (not res!32846) (not e!38901))))

(assert (=> d!11255 (= res!32846 (and (bvsge (index!3032 lt!23832) #b00000000000000000000000000000000) (bvslt (index!3032 lt!23832) (size!2012 (_values!2026 newMap!16)))))))

(declare-fun lt!23879 () Unit!1551)

(declare-fun choose!304 (array!3721 array!3723 (_ BitVec 32) (_ BitVec 32) V!2843 V!2843 (_ BitVec 32) (_ BitVec 64) V!2843 Int) Unit!1551)

(assert (=> d!11255 (= lt!23879 (choose!304 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) (index!3032 lt!23832) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2043 newMap!16)))))

(assert (=> d!11255 (validMask!0 (mask!5927 newMap!16))))

(assert (=> d!11255 (= (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!15 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) (index!3032 lt!23832) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2043 newMap!16)) lt!23879)))

(declare-fun b!59119 () Bool)

(assert (=> b!59119 (= e!38901 (= (+!81 (getCurrentListMap!402 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!402 (_keys!3667 newMap!16) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (index!3032 lt!23832) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16))) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16))))))

(assert (= (and d!11255 res!32846) b!59119))

(assert (=> d!11255 m!50529))

(assert (=> d!11255 m!50555))

(declare-fun m!50855 () Bool)

(assert (=> d!11255 m!50855))

(assert (=> d!11255 m!50771))

(assert (=> b!59119 m!50617))

(assert (=> b!59119 m!50617))

(declare-fun m!50857 () Bool)

(assert (=> b!59119 m!50857))

(assert (=> b!59119 m!50707))

(declare-fun m!50859 () Bool)

(assert (=> b!59119 m!50859))

(assert (=> b!59004 d!11255))

(declare-fun b!59154 () Bool)

(declare-fun e!38921 () Unit!1551)

(declare-fun lt!23954 () Unit!1551)

(assert (=> b!59154 (= e!38921 lt!23954)))

(assert (=> b!59154 (= lt!23954 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!15 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (defaultEntry!2043 newMap!16)))))

(declare-fun lt!23969 () SeekEntryResult!227)

(declare-fun call!4429 () SeekEntryResult!227)

(assert (=> b!59154 (= lt!23969 call!4429)))

(declare-fun c!7532 () Bool)

(assert (=> b!59154 (= c!7532 ((_ is MissingZero!227) lt!23969))))

(declare-fun e!38923 () Bool)

(assert (=> b!59154 e!38923))

(declare-fun b!59155 () Bool)

(declare-fun e!38920 () Unit!1551)

(declare-fun Unit!1561 () Unit!1551)

(assert (=> b!59155 (= e!38920 Unit!1561)))

(declare-fun lt!23948 () Unit!1551)

(declare-fun lemmaArrayContainsKeyThenInListMap!5 (array!3721 array!3723 (_ BitVec 32) (_ BitVec 32) V!2843 V!2843 (_ BitVec 64) (_ BitVec 32) Int) Unit!1551)

(assert (=> b!59155 (= lt!23948 (lemmaArrayContainsKeyThenInListMap!5 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(assert (=> b!59155 (contains!682 (getCurrentListMap!402 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355))))

(declare-fun lt!23956 () Unit!1551)

(assert (=> b!59155 (= lt!23956 lt!23948)))

(assert (=> b!59155 false))

(declare-fun b!59156 () Bool)

(declare-fun e!38919 () Bool)

(declare-fun call!4430 () Bool)

(assert (=> b!59156 (= e!38919 (not call!4430))))

(declare-fun b!59157 () Bool)

(declare-fun res!32868 () Bool)

(declare-fun e!38925 () Bool)

(assert (=> b!59157 (=> (not res!32868) (not e!38925))))

(assert (=> b!59157 (= res!32868 (= (select (arr!1781 (_keys!3667 newMap!16)) (index!3031 lt!23969)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59158 () Bool)

(assert (=> b!59158 (= e!38925 (not call!4430))))

(declare-fun call!4427 () Bool)

(declare-fun lt!23957 () SeekEntryResult!227)

(declare-fun c!7533 () Bool)

(declare-fun bm!4425 () Bool)

(assert (=> bm!4425 (= call!4427 (inRange!0 (ite c!7533 (index!3032 lt!23957) (ite c!7532 (index!3031 lt!23969) (index!3034 lt!23969))) (mask!5927 newMap!16)))))

(declare-fun b!59159 () Bool)

(declare-fun res!32867 () Bool)

(declare-fun e!38918 () Bool)

(assert (=> b!59159 (=> (not res!32867) (not e!38918))))

(declare-fun lt!23949 () tuple2!2020)

(assert (=> b!59159 (= res!32867 (contains!682 (map!1105 (_2!1021 lt!23949)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(declare-fun b!59160 () Bool)

(assert (=> b!59160 (= e!38918 (= (map!1105 (_2!1021 lt!23949)) (+!81 (map!1105 newMap!16) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!38924 () Bool)

(declare-fun b!59161 () Bool)

(assert (=> b!59161 (= e!38924 (= (select (arr!1781 (_keys!3667 newMap!16)) (index!3032 lt!23957)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(declare-fun b!59162 () Bool)

(declare-fun c!7534 () Bool)

(assert (=> b!59162 (= c!7534 ((_ is MissingVacant!227) lt!23969))))

(declare-fun e!38922 () Bool)

(assert (=> b!59162 (= e!38923 e!38922)))

(declare-fun bm!4426 () Bool)

(assert (=> bm!4426 (= call!4430 (arrayContainsKey!0 (_keys!3667 newMap!16) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!59163 () Bool)

(declare-fun Unit!1562 () Unit!1551)

(assert (=> b!59163 (= e!38920 Unit!1562)))

(declare-fun b!59164 () Bool)

(declare-fun Unit!1563 () Unit!1551)

(assert (=> b!59164 (= e!38921 Unit!1563)))

(declare-fun lt!23941 () Unit!1551)

(assert (=> b!59164 (= lt!23941 (lemmaInListMapThenSeekEntryOrOpenFindsIt!15 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (defaultEntry!2043 newMap!16)))))

(assert (=> b!59164 (= lt!23957 call!4429)))

(declare-fun res!32866 () Bool)

(assert (=> b!59164 (= res!32866 ((_ is Found!227) lt!23957))))

(assert (=> b!59164 (=> (not res!32866) (not e!38924))))

(assert (=> b!59164 e!38924))

(declare-fun lt!23963 () Unit!1551)

(assert (=> b!59164 (= lt!23963 lt!23941)))

(assert (=> b!59164 false))

(declare-fun b!59165 () Bool)

(declare-fun res!32870 () Bool)

(assert (=> b!59165 (=> (not res!32870) (not e!38918))))

(assert (=> b!59165 (= res!32870 (valid!254 (_2!1021 lt!23949)))))

(declare-fun b!59166 () Bool)

(declare-fun res!32872 () Bool)

(assert (=> b!59166 (= res!32872 call!4427)))

(assert (=> b!59166 (=> (not res!32872) (not e!38924))))

(declare-fun b!59167 () Bool)

(declare-fun res!32865 () Bool)

(assert (=> b!59167 (= res!32865 (= (select (arr!1781 (_keys!3667 newMap!16)) (index!3034 lt!23969)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59167 (=> (not res!32865) (not e!38919))))

(declare-fun bm!4424 () Bool)

(assert (=> bm!4424 (= call!4429 (seekEntryOrOpen!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (_keys!3667 newMap!16) (mask!5927 newMap!16)))))

(declare-fun d!11257 () Bool)

(assert (=> d!11257 e!38918))

(declare-fun res!32869 () Bool)

(assert (=> d!11257 (=> (not res!32869) (not e!38918))))

(assert (=> d!11257 (= res!32869 (_1!1021 lt!23949))))

(assert (=> d!11257 (= lt!23949 (tuple2!2021 true (LongMapFixedSize!619 (defaultEntry!2043 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) (bvadd (_size!358 newMap!16) #b00000000000000000000000000000001) (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16))) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16))) (_vacant!358 newMap!16))))))

(declare-fun lt!23953 () Unit!1551)

(declare-fun lt!23967 () Unit!1551)

(assert (=> d!11257 (= lt!23953 lt!23967)))

(declare-fun lt!23964 () array!3721)

(declare-fun lt!23958 () array!3723)

(assert (=> d!11257 (contains!682 (getCurrentListMap!402 lt!23964 lt!23958 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)) (select (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832))))))

(assert (=> d!11257 (= lt!23967 (lemmaValidKeyInArrayIsInListMap!76 lt!23964 lt!23958 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (defaultEntry!2043 newMap!16)))))

(assert (=> d!11257 (= lt!23958 (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16))))))

(assert (=> d!11257 (= lt!23964 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16))))))

(declare-fun lt!23951 () Unit!1551)

(declare-fun lt!23944 () Unit!1551)

(assert (=> d!11257 (= lt!23951 lt!23944)))

(declare-fun lt!23962 () array!3721)

(assert (=> d!11257 (= (arrayCountValidKeys!0 lt!23962 (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (bvadd (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lemmaValidKeyAtIImpliesCountKeysIsOne!0 (array!3721 (_ BitVec 32)) Unit!1551)

(assert (=> d!11257 (= lt!23944 (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!23962 (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832))))))

(assert (=> d!11257 (= lt!23962 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16))))))

(declare-fun lt!23966 () Unit!1551)

(declare-fun lt!23947 () Unit!1551)

(assert (=> d!11257 (= lt!23966 lt!23947)))

(declare-fun lt!23942 () array!3721)

(assert (=> d!11257 (arrayContainsKey!0 lt!23942 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(declare-fun lemmaArrayContainsFromImpliesContainsFromZero!0 (array!3721 (_ BitVec 64) (_ BitVec 32)) Unit!1551)

(assert (=> d!11257 (= lt!23947 (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!23942 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832))))))

(assert (=> d!11257 (= lt!23942 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16))))))

(declare-fun lt!23965 () Unit!1551)

(declare-fun lt!23960 () Unit!1551)

(assert (=> d!11257 (= lt!23965 lt!23960)))

(assert (=> d!11257 (= (+!81 (getCurrentListMap!402 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!402 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16))) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16))) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lemmaAddValidKeyToArrayThenAddPairToListMap!5 (array!3721 array!3723 (_ BitVec 32) (_ BitVec 32) V!2843 V!2843 (_ BitVec 32) (_ BitVec 64) V!2843 Int) Unit!1551)

(assert (=> d!11257 (= lt!23960 (lemmaAddValidKeyToArrayThenAddPairToListMap!5 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2043 newMap!16)))))

(declare-fun lt!23952 () Unit!1551)

(declare-fun lt!23950 () Unit!1551)

(assert (=> d!11257 (= lt!23952 lt!23950)))

(assert (=> d!11257 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16))) (mask!5927 newMap!16))))

(declare-fun lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 ((_ BitVec 64) array!3721 (_ BitVec 32) (_ BitVec 32)) Unit!1551)

(assert (=> d!11257 (= lt!23950 (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (_keys!3667 newMap!16) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (mask!5927 newMap!16)))))

(declare-fun lt!23945 () Unit!1551)

(declare-fun lt!23943 () Unit!1551)

(assert (=> d!11257 (= lt!23945 lt!23943)))

(assert (=> d!11257 (= (arrayCountValidKeys!0 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16))) #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!3667 newMap!16) #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))) #b00000000000000000000000000000001))))

(declare-fun lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (array!3721 (_ BitVec 32) (_ BitVec 64)) Unit!1551)

(assert (=> d!11257 (= lt!23943 (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!3667 newMap!16) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(declare-fun lt!23961 () Unit!1551)

(declare-fun lt!23955 () Unit!1551)

(assert (=> d!11257 (= lt!23961 lt!23955)))

(declare-fun lt!23968 () (_ BitVec 32))

(declare-fun lt!23959 () List!1431)

(assert (=> d!11257 (arrayNoDuplicates!0 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16))) lt!23968 lt!23959)))

(declare-fun lemmaPutNewValidKeyPreservesNoDuplicate!0 (array!3721 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1431) Unit!1551)

(assert (=> d!11257 (= lt!23955 (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!3667 newMap!16) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) lt!23968 lt!23959))))

(assert (=> d!11257 (= lt!23959 Nil!1428)))

(assert (=> d!11257 (= lt!23968 #b00000000000000000000000000000000)))

(declare-fun lt!23940 () Unit!1551)

(assert (=> d!11257 (= lt!23940 e!38920)))

(declare-fun c!7535 () Bool)

(assert (=> d!11257 (= c!7535 (arrayContainsKey!0 (_keys!3667 newMap!16) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun lt!23946 () Unit!1551)

(assert (=> d!11257 (= lt!23946 e!38921)))

(assert (=> d!11257 (= c!7533 (contains!682 (getCurrentListMap!402 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(assert (=> d!11257 (valid!254 newMap!16)))

(assert (=> d!11257 (= (updateHelperNewKey!15 newMap!16 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832))) lt!23949)))

(declare-fun bm!4427 () Bool)

(declare-fun call!4428 () Bool)

(assert (=> bm!4427 (= call!4428 call!4427)))

(declare-fun b!59168 () Bool)

(declare-fun res!32871 () Bool)

(assert (=> b!59168 (=> (not res!32871) (not e!38925))))

(assert (=> b!59168 (= res!32871 call!4428)))

(assert (=> b!59168 (= e!38923 e!38925)))

(declare-fun b!59169 () Bool)

(assert (=> b!59169 (= e!38922 ((_ is Undefined!227) lt!23969))))

(declare-fun b!59170 () Bool)

(assert (=> b!59170 (= e!38922 e!38919)))

(declare-fun res!32873 () Bool)

(assert (=> b!59170 (= res!32873 call!4428)))

(assert (=> b!59170 (=> (not res!32873) (not e!38919))))

(assert (= (and d!11257 c!7533) b!59164))

(assert (= (and d!11257 (not c!7533)) b!59154))

(assert (= (and b!59164 res!32866) b!59166))

(assert (= (and b!59166 res!32872) b!59161))

(assert (= (and b!59154 c!7532) b!59168))

(assert (= (and b!59154 (not c!7532)) b!59162))

(assert (= (and b!59168 res!32871) b!59157))

(assert (= (and b!59157 res!32868) b!59158))

(assert (= (and b!59162 c!7534) b!59170))

(assert (= (and b!59162 (not c!7534)) b!59169))

(assert (= (and b!59170 res!32873) b!59167))

(assert (= (and b!59167 res!32865) b!59156))

(assert (= (or b!59168 b!59170) bm!4427))

(assert (= (or b!59158 b!59156) bm!4426))

(assert (= (or b!59166 bm!4427) bm!4425))

(assert (= (or b!59164 b!59154) bm!4424))

(assert (= (and d!11257 c!7535) b!59155))

(assert (= (and d!11257 (not c!7535)) b!59163))

(assert (= (and d!11257 res!32869) b!59165))

(assert (= (and b!59165 res!32870) b!59159))

(assert (= (and b!59159 res!32867) b!59160))

(declare-fun m!50861 () Bool)

(assert (=> b!59159 m!50861))

(assert (=> b!59159 m!50861))

(assert (=> b!59159 m!50529))

(declare-fun m!50863 () Bool)

(assert (=> b!59159 m!50863))

(assert (=> b!59160 m!50861))

(assert (=> b!59160 m!50531))

(assert (=> b!59160 m!50531))

(declare-fun m!50865 () Bool)

(assert (=> b!59160 m!50865))

(assert (=> bm!4424 m!50529))

(assert (=> bm!4424 m!50713))

(declare-fun m!50867 () Bool)

(assert (=> b!59157 m!50867))

(declare-fun m!50869 () Bool)

(assert (=> bm!4425 m!50869))

(assert (=> b!59164 m!50529))

(assert (=> b!59164 m!50737))

(declare-fun m!50871 () Bool)

(assert (=> b!59167 m!50871))

(declare-fun m!50873 () Bool)

(assert (=> b!59161 m!50873))

(assert (=> d!11257 m!50529))

(declare-fun m!50875 () Bool)

(assert (=> d!11257 m!50875))

(assert (=> d!11257 m!50617))

(assert (=> d!11257 m!50857))

(declare-fun m!50877 () Bool)

(assert (=> d!11257 m!50877))

(declare-fun m!50879 () Bool)

(assert (=> d!11257 m!50879))

(assert (=> d!11257 m!50745))

(assert (=> d!11257 m!50617))

(assert (=> d!11257 m!50529))

(declare-fun m!50881 () Bool)

(assert (=> d!11257 m!50881))

(declare-fun m!50883 () Bool)

(assert (=> d!11257 m!50883))

(declare-fun m!50885 () Bool)

(assert (=> d!11257 m!50885))

(assert (=> d!11257 m!50529))

(assert (=> d!11257 m!50555))

(declare-fun m!50887 () Bool)

(assert (=> d!11257 m!50887))

(assert (=> d!11257 m!50529))

(assert (=> d!11257 m!50687))

(declare-fun m!50889 () Bool)

(assert (=> d!11257 m!50889))

(declare-fun m!50891 () Bool)

(assert (=> d!11257 m!50891))

(assert (=> d!11257 m!50529))

(declare-fun m!50893 () Bool)

(assert (=> d!11257 m!50893))

(assert (=> d!11257 m!50529))

(declare-fun m!50895 () Bool)

(assert (=> d!11257 m!50895))

(declare-fun m!50897 () Bool)

(assert (=> d!11257 m!50897))

(assert (=> d!11257 m!50617))

(declare-fun m!50899 () Bool)

(assert (=> d!11257 m!50899))

(declare-fun m!50901 () Bool)

(assert (=> d!11257 m!50901))

(declare-fun m!50903 () Bool)

(assert (=> d!11257 m!50903))

(assert (=> d!11257 m!50529))

(declare-fun m!50905 () Bool)

(assert (=> d!11257 m!50905))

(assert (=> d!11257 m!50567))

(declare-fun m!50907 () Bool)

(assert (=> d!11257 m!50907))

(assert (=> d!11257 m!50883))

(assert (=> d!11257 m!50901))

(declare-fun m!50909 () Bool)

(assert (=> d!11257 m!50909))

(assert (=> d!11257 m!50529))

(declare-fun m!50911 () Bool)

(assert (=> d!11257 m!50911))

(assert (=> b!59154 m!50529))

(assert (=> b!59154 m!50703))

(assert (=> bm!4426 m!50529))

(assert (=> bm!4426 m!50687))

(assert (=> b!59155 m!50529))

(declare-fun m!50913 () Bool)

(assert (=> b!59155 m!50913))

(assert (=> b!59155 m!50617))

(assert (=> b!59155 m!50617))

(assert (=> b!59155 m!50529))

(assert (=> b!59155 m!50881))

(declare-fun m!50915 () Bool)

(assert (=> b!59165 m!50915))

(assert (=> bm!4400 d!11257))

(declare-fun d!11259 () Bool)

(declare-fun e!38928 () Bool)

(assert (=> d!11259 e!38928))

(declare-fun c!7538 () Bool)

(assert (=> d!11259 (= c!7538 (and (not (= (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> d!11259 true))

(declare-fun _$29!66 () Unit!1551)

(assert (=> d!11259 (= (choose!301 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (_values!2026 (v!2383 (underlying!226 thiss!992))) (mask!5927 (v!2383 (underlying!226 thiss!992))) (extraKeys!1930 (v!2383 (underlying!226 thiss!992))) (zeroValue!1959 (v!2383 (underlying!226 thiss!992))) (minValue!1959 (v!2383 (underlying!226 thiss!992))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2043 (v!2383 (underlying!226 thiss!992)))) _$29!66)))

(declare-fun b!59175 () Bool)

(assert (=> b!59175 (= e!38928 (arrayContainsKey!0 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!59176 () Bool)

(assert (=> b!59176 (= e!38928 (ite (= (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!1930 (v!2383 (underlying!226 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1930 (v!2383 (underlying!226 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!11259 c!7538) b!59175))

(assert (= (and d!11259 (not c!7538)) b!59176))

(assert (=> b!59175 m!50529))

(assert (=> b!59175 m!50541))

(assert (=> d!11233 d!11259))

(assert (=> d!11233 d!11219))

(declare-fun d!11261 () Bool)

(assert (=> d!11261 (= (map!1105 (_2!1021 lt!23809)) (getCurrentListMap!402 (_keys!3667 (_2!1021 lt!23809)) (_values!2026 (_2!1021 lt!23809)) (mask!5927 (_2!1021 lt!23809)) (extraKeys!1930 (_2!1021 lt!23809)) (zeroValue!1959 (_2!1021 lt!23809)) (minValue!1959 (_2!1021 lt!23809)) #b00000000000000000000000000000000 (defaultEntry!2043 (_2!1021 lt!23809))))))

(declare-fun bs!2557 () Bool)

(assert (= bs!2557 d!11261))

(declare-fun m!50917 () Bool)

(assert (=> bs!2557 m!50917))

(assert (=> bm!4385 d!11261))

(declare-fun d!11263 () Bool)

(assert (=> d!11263 (= (validKeyInArray!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (and (not (= (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!58897 d!11263))

(declare-fun d!11265 () Bool)

(assert (=> d!11265 (= (get!1068 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59040 d!11265))

(declare-fun d!11267 () Bool)

(declare-fun e!38931 () Bool)

(assert (=> d!11267 e!38931))

(declare-fun res!32878 () Bool)

(assert (=> d!11267 (=> (not res!32878) (not e!38931))))

(declare-fun lt!23979 () ListLongMap!1363)

(assert (=> d!11267 (= res!32878 (contains!682 lt!23979 (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!23981 () List!1430)

(assert (=> d!11267 (= lt!23979 (ListLongMap!1364 lt!23981))))

(declare-fun lt!23978 () Unit!1551)

(declare-fun lt!23980 () Unit!1551)

(assert (=> d!11267 (= lt!23978 lt!23980)))

(assert (=> d!11267 (= (getValueByKey!124 lt!23981 (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lemmaContainsTupThenGetReturnValue!41 (List!1430 (_ BitVec 64) V!2843) Unit!1551)

(assert (=> d!11267 (= lt!23980 (lemmaContainsTupThenGetReturnValue!41 lt!23981 (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun insertStrictlySorted!44 (List!1430 (_ BitVec 64) V!2843) List!1430)

(assert (=> d!11267 (= lt!23981 (insertStrictlySorted!44 (toList!697 call!4407) (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11267 (= (+!81 call!4407 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!23979)))

(declare-fun b!59181 () Bool)

(declare-fun res!32879 () Bool)

(assert (=> b!59181 (=> (not res!32879) (not e!38931))))

(assert (=> b!59181 (= res!32879 (= (getValueByKey!124 (toList!697 lt!23979) (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!59182 () Bool)

(declare-fun contains!684 (List!1430 tuple2!2022) Bool)

(assert (=> b!59182 (= e!38931 (contains!684 (toList!697 lt!23979) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!11267 res!32878) b!59181))

(assert (= (and b!59181 res!32879) b!59182))

(declare-fun m!50919 () Bool)

(assert (=> d!11267 m!50919))

(declare-fun m!50921 () Bool)

(assert (=> d!11267 m!50921))

(declare-fun m!50923 () Bool)

(assert (=> d!11267 m!50923))

(declare-fun m!50925 () Bool)

(assert (=> d!11267 m!50925))

(declare-fun m!50927 () Bool)

(assert (=> b!59181 m!50927))

(declare-fun m!50929 () Bool)

(assert (=> b!59182 m!50929))

(assert (=> b!59017 d!11267))

(declare-fun d!11269 () Bool)

(declare-fun res!32880 () Bool)

(declare-fun e!38932 () Bool)

(assert (=> d!11269 (=> res!32880 e!38932)))

(assert (=> d!11269 (= res!32880 (= (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(assert (=> d!11269 (= (arrayContainsKey!0 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) e!38932)))

(declare-fun b!59183 () Bool)

(declare-fun e!38933 () Bool)

(assert (=> b!59183 (= e!38932 e!38933)))

(declare-fun res!32881 () Bool)

(assert (=> b!59183 (=> (not res!32881) (not e!38933))))

(assert (=> b!59183 (= res!32881 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992))))))))

(declare-fun b!59184 () Bool)

(assert (=> b!59184 (= e!38933 (arrayContainsKey!0 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!11269 (not res!32880)) b!59183))

(assert (= (and b!59183 res!32881) b!59184))

(declare-fun m!50931 () Bool)

(assert (=> d!11269 m!50931))

(assert (=> b!59184 m!50529))

(declare-fun m!50933 () Bool)

(assert (=> b!59184 m!50933))

(assert (=> b!59055 d!11269))

(declare-fun d!11271 () Bool)

(declare-fun res!32882 () Bool)

(declare-fun e!38934 () Bool)

(assert (=> d!11271 (=> res!32882 e!38934)))

(assert (=> d!11271 (= res!32882 (= (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(assert (=> d!11271 (= (arrayContainsKey!0 (_keys!3667 newMap!16) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) #b00000000000000000000000000000000) e!38934)))

(declare-fun b!59185 () Bool)

(declare-fun e!38935 () Bool)

(assert (=> b!59185 (= e!38934 e!38935)))

(declare-fun res!32883 () Bool)

(assert (=> b!59185 (=> (not res!32883) (not e!38935))))

(assert (=> b!59185 (= res!32883 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2011 (_keys!3667 newMap!16))))))

(declare-fun b!59186 () Bool)

(assert (=> b!59186 (= e!38935 (arrayContainsKey!0 (_keys!3667 newMap!16) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!11271 (not res!32882)) b!59185))

(assert (= (and b!59185 res!32883) b!59186))

(assert (=> d!11271 m!50803))

(assert (=> b!59186 m!50529))

(declare-fun m!50935 () Bool)

(assert (=> b!59186 m!50935))

(assert (=> bm!4383 d!11271))

(declare-fun d!11273 () Bool)

(assert (=> d!11273 (isDefined!77 (getValueByKey!124 (toList!697 lt!23655) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(declare-fun lt!23984 () Unit!1551)

(declare-fun choose!305 (List!1430 (_ BitVec 64)) Unit!1551)

(assert (=> d!11273 (= lt!23984 (choose!305 (toList!697 lt!23655) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(declare-fun e!38938 () Bool)

(assert (=> d!11273 e!38938))

(declare-fun res!32886 () Bool)

(assert (=> d!11273 (=> (not res!32886) (not e!38938))))

(declare-fun isStrictlySorted!284 (List!1430) Bool)

(assert (=> d!11273 (= res!32886 (isStrictlySorted!284 (toList!697 lt!23655)))))

(assert (=> d!11273 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 lt!23655) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) lt!23984)))

(declare-fun b!59189 () Bool)

(assert (=> b!59189 (= e!38938 (containsKey!128 (toList!697 lt!23655) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(assert (= (and d!11273 res!32886) b!59189))

(assert (=> d!11273 m!50529))

(assert (=> d!11273 m!50679))

(assert (=> d!11273 m!50679))

(assert (=> d!11273 m!50681))

(assert (=> d!11273 m!50529))

(declare-fun m!50937 () Bool)

(assert (=> d!11273 m!50937))

(declare-fun m!50939 () Bool)

(assert (=> d!11273 m!50939))

(assert (=> b!59189 m!50529))

(assert (=> b!59189 m!50675))

(assert (=> b!58912 d!11273))

(declare-fun d!11275 () Bool)

(declare-fun isEmpty!293 (Option!130) Bool)

(assert (=> d!11275 (= (isDefined!77 (getValueByKey!124 (toList!697 lt!23655) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355))) (not (isEmpty!293 (getValueByKey!124 (toList!697 lt!23655) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))))

(declare-fun bs!2558 () Bool)

(assert (= bs!2558 d!11275))

(assert (=> bs!2558 m!50679))

(declare-fun m!50941 () Bool)

(assert (=> bs!2558 m!50941))

(assert (=> b!58912 d!11275))

(declare-fun b!59199 () Bool)

(declare-fun e!38943 () Option!130)

(declare-fun e!38944 () Option!130)

(assert (=> b!59199 (= e!38943 e!38944)))

(declare-fun c!7544 () Bool)

(assert (=> b!59199 (= c!7544 (and ((_ is Cons!1426) (toList!697 lt!23655)) (not (= (_1!1022 (h!2007 (toList!697 lt!23655))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))))

(declare-fun b!59198 () Bool)

(assert (=> b!59198 (= e!38943 (Some!129 (_2!1022 (h!2007 (toList!697 lt!23655)))))))

(declare-fun b!59200 () Bool)

(assert (=> b!59200 (= e!38944 (getValueByKey!124 (t!4768 (toList!697 lt!23655)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(declare-fun b!59201 () Bool)

(assert (=> b!59201 (= e!38944 None!128)))

(declare-fun d!11277 () Bool)

(declare-fun c!7543 () Bool)

(assert (=> d!11277 (= c!7543 (and ((_ is Cons!1426) (toList!697 lt!23655)) (= (_1!1022 (h!2007 (toList!697 lt!23655))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355))))))

(assert (=> d!11277 (= (getValueByKey!124 (toList!697 lt!23655) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) e!38943)))

(assert (= (and d!11277 c!7543) b!59198))

(assert (= (and d!11277 (not c!7543)) b!59199))

(assert (= (and b!59199 c!7544) b!59200))

(assert (= (and b!59199 (not c!7544)) b!59201))

(assert (=> b!59200 m!50529))

(declare-fun m!50943 () Bool)

(assert (=> b!59200 m!50943))

(assert (=> b!58912 d!11277))

(declare-fun d!11279 () Bool)

(assert (=> d!11279 (= (validKeyInArray!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (and (not (= (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!59076 d!11279))

(declare-fun d!11281 () Bool)

(assert (=> d!11281 (= (+!81 (getCurrentListMap!402 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!402 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) lt!23829 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!23987 () Unit!1551)

(declare-fun choose!306 (array!3721 array!3723 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2843 V!2843 V!2843 Int) Unit!1551)

(assert (=> d!11281 (= lt!23987 (choose!306 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) lt!23829 (zeroValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1959 newMap!16) (defaultEntry!2043 newMap!16)))))

(assert (=> d!11281 (validMask!0 (mask!5927 newMap!16))))

(assert (=> d!11281 (= (lemmaChangeZeroKeyThenAddPairToListMap!15 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) lt!23829 (zeroValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1959 newMap!16) (defaultEntry!2043 newMap!16)) lt!23987)))

(declare-fun bs!2559 () Bool)

(assert (= bs!2559 d!11281))

(assert (=> bs!2559 m!50771))

(assert (=> bs!2559 m!50555))

(declare-fun m!50945 () Bool)

(assert (=> bs!2559 m!50945))

(assert (=> bs!2559 m!50617))

(assert (=> bs!2559 m!50555))

(declare-fun m!50947 () Bool)

(assert (=> bs!2559 m!50947))

(assert (=> bs!2559 m!50617))

(declare-fun m!50949 () Bool)

(assert (=> bs!2559 m!50949))

(assert (=> b!59000 d!11281))

(declare-fun d!11283 () Bool)

(declare-fun get!1069 (Option!130) V!2843)

(assert (=> d!11283 (= (apply!66 lt!23739 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1069 (getValueByKey!124 (toList!697 lt!23739) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!2560 () Bool)

(assert (= bs!2560 d!11283))

(assert (=> bs!2560 m!50627))

(declare-fun m!50951 () Bool)

(assert (=> bs!2560 m!50951))

(assert (=> bs!2560 m!50951))

(declare-fun m!50953 () Bool)

(assert (=> bs!2560 m!50953))

(assert (=> b!58900 d!11283))

(declare-fun d!11285 () Bool)

(declare-fun c!7545 () Bool)

(assert (=> d!11285 (= c!7545 ((_ is ValueCellFull!855) (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!38945 () V!2843)

(assert (=> d!11285 (= (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!38945)))

(declare-fun b!59202 () Bool)

(assert (=> b!59202 (= e!38945 (get!1067 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!59203 () Bool)

(assert (=> b!59203 (= e!38945 (get!1068 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11285 c!7545) b!59202))

(assert (= (and d!11285 (not c!7545)) b!59203))

(assert (=> b!59202 m!50633))

(assert (=> b!59202 m!50553))

(declare-fun m!50955 () Bool)

(assert (=> b!59202 m!50955))

(assert (=> b!59203 m!50633))

(assert (=> b!59203 m!50553))

(declare-fun m!50957 () Bool)

(assert (=> b!59203 m!50957))

(assert (=> b!58900 d!11285))

(assert (=> b!58914 d!11275))

(assert (=> b!58914 d!11277))

(declare-fun d!11287 () Bool)

(declare-fun e!38946 () Bool)

(assert (=> d!11287 e!38946))

(declare-fun res!32887 () Bool)

(assert (=> d!11287 (=> (not res!32887) (not e!38946))))

(declare-fun lt!23989 () ListLongMap!1363)

(assert (=> d!11287 (= res!32887 (contains!682 lt!23989 (_1!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(declare-fun lt!23991 () List!1430)

(assert (=> d!11287 (= lt!23989 (ListLongMap!1364 lt!23991))))

(declare-fun lt!23988 () Unit!1551)

(declare-fun lt!23990 () Unit!1551)

(assert (=> d!11287 (= lt!23988 lt!23990)))

(assert (=> d!11287 (= (getValueByKey!124 lt!23991 (_1!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))) (Some!129 (_2!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(assert (=> d!11287 (= lt!23990 (lemmaContainsTupThenGetReturnValue!41 lt!23991 (_1!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) (_2!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(assert (=> d!11287 (= lt!23991 (insertStrictlySorted!44 (toList!697 (ite c!7462 call!4332 (ite c!7465 call!4335 call!4336))) (_1!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) (_2!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(assert (=> d!11287 (= (+!81 (ite c!7462 call!4332 (ite c!7465 call!4335 call!4336)) (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!23989)))

(declare-fun b!59204 () Bool)

(declare-fun res!32888 () Bool)

(assert (=> b!59204 (=> (not res!32888) (not e!38946))))

(assert (=> b!59204 (= res!32888 (= (getValueByKey!124 (toList!697 lt!23989) (_1!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))) (Some!129 (_2!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))))

(declare-fun b!59205 () Bool)

(assert (=> b!59205 (= e!38946 (contains!684 (toList!697 lt!23989) (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(assert (= (and d!11287 res!32887) b!59204))

(assert (= (and b!59204 res!32888) b!59205))

(declare-fun m!50959 () Bool)

(assert (=> d!11287 m!50959))

(declare-fun m!50961 () Bool)

(assert (=> d!11287 m!50961))

(declare-fun m!50963 () Bool)

(assert (=> d!11287 m!50963))

(declare-fun m!50965 () Bool)

(assert (=> d!11287 m!50965))

(declare-fun m!50967 () Bool)

(assert (=> b!59204 m!50967))

(declare-fun m!50969 () Bool)

(assert (=> b!59205 m!50969))

(assert (=> bm!4327 d!11287))

(declare-fun d!11289 () Bool)

(declare-fun e!38947 () Bool)

(assert (=> d!11289 e!38947))

(declare-fun res!32889 () Bool)

(assert (=> d!11289 (=> res!32889 e!38947)))

(declare-fun lt!23994 () Bool)

(assert (=> d!11289 (= res!32889 (not lt!23994))))

(declare-fun lt!23993 () Bool)

(assert (=> d!11289 (= lt!23994 lt!23993)))

(declare-fun lt!23995 () Unit!1551)

(declare-fun e!38948 () Unit!1551)

(assert (=> d!11289 (= lt!23995 e!38948)))

(declare-fun c!7546 () Bool)

(assert (=> d!11289 (= c!7546 lt!23993)))

(assert (=> d!11289 (= lt!23993 (containsKey!128 (toList!697 lt!23739) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!11289 (= (contains!682 lt!23739 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!23994)))

(declare-fun b!59206 () Bool)

(declare-fun lt!23992 () Unit!1551)

(assert (=> b!59206 (= e!38948 lt!23992)))

(assert (=> b!59206 (= lt!23992 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 lt!23739) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!59206 (isDefined!77 (getValueByKey!124 (toList!697 lt!23739) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!59207 () Bool)

(declare-fun Unit!1564 () Unit!1551)

(assert (=> b!59207 (= e!38948 Unit!1564)))

(declare-fun b!59208 () Bool)

(assert (=> b!59208 (= e!38947 (isDefined!77 (getValueByKey!124 (toList!697 lt!23739) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!11289 c!7546) b!59206))

(assert (= (and d!11289 (not c!7546)) b!59207))

(assert (= (and d!11289 (not res!32889)) b!59208))

(assert (=> d!11289 m!50627))

(declare-fun m!50971 () Bool)

(assert (=> d!11289 m!50971))

(assert (=> b!59206 m!50627))

(declare-fun m!50973 () Bool)

(assert (=> b!59206 m!50973))

(assert (=> b!59206 m!50627))

(assert (=> b!59206 m!50951))

(assert (=> b!59206 m!50951))

(declare-fun m!50975 () Bool)

(assert (=> b!59206 m!50975))

(assert (=> b!59208 m!50627))

(assert (=> b!59208 m!50951))

(assert (=> b!59208 m!50951))

(assert (=> b!59208 m!50975))

(assert (=> b!58902 d!11289))

(declare-fun d!11291 () Bool)

(declare-fun lt!23998 () Bool)

(define-sort InoxSet (T) (Array T Bool))

(declare-fun content!63 (List!1431) (InoxSet (_ BitVec 64)))

(assert (=> d!11291 (= lt!23998 (select (content!63 Nil!1428) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(declare-fun e!38954 () Bool)

(assert (=> d!11291 (= lt!23998 e!38954)))

(declare-fun res!32894 () Bool)

(assert (=> d!11291 (=> (not res!32894) (not e!38954))))

(assert (=> d!11291 (= res!32894 ((_ is Cons!1427) Nil!1428))))

(assert (=> d!11291 (= (contains!683 Nil!1428 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) lt!23998)))

(declare-fun b!59213 () Bool)

(declare-fun e!38953 () Bool)

(assert (=> b!59213 (= e!38954 e!38953)))

(declare-fun res!32895 () Bool)

(assert (=> b!59213 (=> res!32895 e!38953)))

(assert (=> b!59213 (= res!32895 (= (h!2008 Nil!1428) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(declare-fun b!59214 () Bool)

(assert (=> b!59214 (= e!38953 (contains!683 (t!4769 Nil!1428) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(assert (= (and d!11291 res!32894) b!59213))

(assert (= (and b!59213 (not res!32895)) b!59214))

(declare-fun m!50977 () Bool)

(assert (=> d!11291 m!50977))

(assert (=> d!11291 m!50529))

(declare-fun m!50979 () Bool)

(assert (=> d!11291 m!50979))

(assert (=> b!59214 m!50529))

(declare-fun m!50981 () Bool)

(assert (=> b!59214 m!50981))

(assert (=> b!59072 d!11291))

(declare-fun d!11293 () Bool)

(declare-fun e!38955 () Bool)

(assert (=> d!11293 e!38955))

(declare-fun res!32896 () Bool)

(assert (=> d!11293 (=> res!32896 e!38955)))

(declare-fun lt!24001 () Bool)

(assert (=> d!11293 (= res!32896 (not lt!24001))))

(declare-fun lt!24000 () Bool)

(assert (=> d!11293 (= lt!24001 lt!24000)))

(declare-fun lt!24002 () Unit!1551)

(declare-fun e!38956 () Unit!1551)

(assert (=> d!11293 (= lt!24002 e!38956)))

(declare-fun c!7547 () Bool)

(assert (=> d!11293 (= c!7547 lt!24000)))

(assert (=> d!11293 (= lt!24000 (containsKey!128 (toList!697 lt!23739) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11293 (= (contains!682 lt!23739 #b1000000000000000000000000000000000000000000000000000000000000000) lt!24001)))

(declare-fun b!59215 () Bool)

(declare-fun lt!23999 () Unit!1551)

(assert (=> b!59215 (= e!38956 lt!23999)))

(assert (=> b!59215 (= lt!23999 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 lt!23739) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59215 (isDefined!77 (getValueByKey!124 (toList!697 lt!23739) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59216 () Bool)

(declare-fun Unit!1565 () Unit!1551)

(assert (=> b!59216 (= e!38956 Unit!1565)))

(declare-fun b!59217 () Bool)

(assert (=> b!59217 (= e!38955 (isDefined!77 (getValueByKey!124 (toList!697 lt!23739) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11293 c!7547) b!59215))

(assert (= (and d!11293 (not c!7547)) b!59216))

(assert (= (and d!11293 (not res!32896)) b!59217))

(declare-fun m!50983 () Bool)

(assert (=> d!11293 m!50983))

(declare-fun m!50985 () Bool)

(assert (=> b!59215 m!50985))

(declare-fun m!50987 () Bool)

(assert (=> b!59215 m!50987))

(assert (=> b!59215 m!50987))

(declare-fun m!50989 () Bool)

(assert (=> b!59215 m!50989))

(assert (=> b!59217 m!50987))

(assert (=> b!59217 m!50987))

(assert (=> b!59217 m!50989))

(assert (=> bm!4333 d!11293))

(declare-fun d!11295 () Bool)

(declare-fun res!32902 () Bool)

(declare-fun e!38963 () Bool)

(assert (=> d!11295 (=> res!32902 e!38963)))

(assert (=> d!11295 (= res!32902 (bvsge #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(assert (=> d!11295 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3667 newMap!16) (mask!5927 newMap!16)) e!38963)))

(declare-fun bm!4430 () Bool)

(declare-fun call!4433 () Bool)

(assert (=> bm!4430 (= call!4433 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3667 newMap!16) (mask!5927 newMap!16)))))

(declare-fun b!59226 () Bool)

(declare-fun e!38964 () Bool)

(assert (=> b!59226 (= e!38964 call!4433)))

(declare-fun b!59227 () Bool)

(assert (=> b!59227 (= e!38963 e!38964)))

(declare-fun c!7550 () Bool)

(assert (=> b!59227 (= c!7550 (validKeyInArray!0 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59228 () Bool)

(declare-fun e!38965 () Bool)

(assert (=> b!59228 (= e!38964 e!38965)))

(declare-fun lt!24010 () (_ BitVec 64))

(assert (=> b!59228 (= lt!24010 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24011 () Unit!1551)

(assert (=> b!59228 (= lt!24011 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3667 newMap!16) lt!24010 #b00000000000000000000000000000000))))

(assert (=> b!59228 (arrayContainsKey!0 (_keys!3667 newMap!16) lt!24010 #b00000000000000000000000000000000)))

(declare-fun lt!24009 () Unit!1551)

(assert (=> b!59228 (= lt!24009 lt!24011)))

(declare-fun res!32901 () Bool)

(assert (=> b!59228 (= res!32901 (= (seekEntryOrOpen!0 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000) (_keys!3667 newMap!16) (mask!5927 newMap!16)) (Found!227 #b00000000000000000000000000000000)))))

(assert (=> b!59228 (=> (not res!32901) (not e!38965))))

(declare-fun b!59229 () Bool)

(assert (=> b!59229 (= e!38965 call!4433)))

(assert (= (and d!11295 (not res!32902)) b!59227))

(assert (= (and b!59227 c!7550) b!59228))

(assert (= (and b!59227 (not c!7550)) b!59226))

(assert (= (and b!59228 res!32901) b!59229))

(assert (= (or b!59229 b!59226) bm!4430))

(declare-fun m!50991 () Bool)

(assert (=> bm!4430 m!50991))

(assert (=> b!59227 m!50803))

(assert (=> b!59227 m!50803))

(assert (=> b!59227 m!50805))

(assert (=> b!59228 m!50803))

(declare-fun m!50993 () Bool)

(assert (=> b!59228 m!50993))

(declare-fun m!50995 () Bool)

(assert (=> b!59228 m!50995))

(assert (=> b!59228 m!50803))

(declare-fun m!50997 () Bool)

(assert (=> b!59228 m!50997))

(assert (=> b!59048 d!11295))

(declare-fun d!11297 () Bool)

(declare-fun e!38966 () Bool)

(assert (=> d!11297 e!38966))

(declare-fun res!32903 () Bool)

(assert (=> d!11297 (=> (not res!32903) (not e!38966))))

(declare-fun lt!24013 () ListLongMap!1363)

(assert (=> d!11297 (= res!32903 (contains!682 lt!24013 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun lt!24015 () List!1430)

(assert (=> d!11297 (= lt!24013 (ListLongMap!1364 lt!24015))))

(declare-fun lt!24012 () Unit!1551)

(declare-fun lt!24014 () Unit!1551)

(assert (=> d!11297 (= lt!24012 lt!24014)))

(assert (=> d!11297 (= (getValueByKey!124 lt!24015 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) (Some!129 (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(assert (=> d!11297 (= lt!24014 (lemmaContainsTupThenGetReturnValue!41 lt!24015 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(assert (=> d!11297 (= lt!24015 (insertStrictlySorted!44 (toList!697 call!4333) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(assert (=> d!11297 (= (+!81 call!4333 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) lt!24013)))

(declare-fun b!59230 () Bool)

(declare-fun res!32904 () Bool)

(assert (=> b!59230 (=> (not res!32904) (not e!38966))))

(assert (=> b!59230 (= res!32904 (= (getValueByKey!124 (toList!697 lt!24013) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) (Some!129 (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(declare-fun b!59231 () Bool)

(assert (=> b!59231 (= e!38966 (contains!684 (toList!697 lt!24013) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))

(assert (= (and d!11297 res!32903) b!59230))

(assert (= (and b!59230 res!32904) b!59231))

(declare-fun m!50999 () Bool)

(assert (=> d!11297 m!50999))

(declare-fun m!51001 () Bool)

(assert (=> d!11297 m!51001))

(declare-fun m!51003 () Bool)

(assert (=> d!11297 m!51003))

(declare-fun m!51005 () Bool)

(assert (=> d!11297 m!51005))

(declare-fun m!51007 () Bool)

(assert (=> b!59230 m!51007))

(declare-fun m!51009 () Bool)

(assert (=> b!59231 m!51009))

(assert (=> b!58888 d!11297))

(assert (=> d!11227 d!11231))

(declare-fun d!11299 () Bool)

(assert (=> d!11299 (not (arrayContainsKey!0 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> d!11299 true))

(declare-fun _$68!31 () Unit!1551)

(assert (=> d!11299 (= (choose!68 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (Cons!1427 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) Nil!1428)) _$68!31)))

(declare-fun bs!2561 () Bool)

(assert (= bs!2561 d!11299))

(assert (=> bs!2561 m!50529))

(assert (=> bs!2561 m!50541))

(assert (=> d!11227 d!11299))

(declare-fun b!59242 () Bool)

(declare-fun res!32916 () Bool)

(declare-fun e!38969 () Bool)

(assert (=> b!59242 (=> (not res!32916) (not e!38969))))

(declare-fun size!2015 (LongMapFixedSize!618) (_ BitVec 32))

(assert (=> b!59242 (= res!32916 (= (size!2015 newMap!16) (bvadd (_size!358 newMap!16) (bvsdiv (bvadd (extraKeys!1930 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!59241 () Bool)

(declare-fun res!32914 () Bool)

(assert (=> b!59241 (=> (not res!32914) (not e!38969))))

(assert (=> b!59241 (= res!32914 (bvsge (size!2015 newMap!16) (_size!358 newMap!16)))))

(declare-fun d!11301 () Bool)

(declare-fun res!32915 () Bool)

(assert (=> d!11301 (=> (not res!32915) (not e!38969))))

(assert (=> d!11301 (= res!32915 (validMask!0 (mask!5927 newMap!16)))))

(assert (=> d!11301 (= (simpleValid!42 newMap!16) e!38969)))

(declare-fun b!59243 () Bool)

(assert (=> b!59243 (= e!38969 (and (bvsge (extraKeys!1930 newMap!16) #b00000000000000000000000000000000) (bvsle (extraKeys!1930 newMap!16) #b00000000000000000000000000000011) (bvsge (_vacant!358 newMap!16) #b00000000000000000000000000000000)))))

(declare-fun b!59240 () Bool)

(declare-fun res!32913 () Bool)

(assert (=> b!59240 (=> (not res!32913) (not e!38969))))

(assert (=> b!59240 (= res!32913 (and (= (size!2012 (_values!2026 newMap!16)) (bvadd (mask!5927 newMap!16) #b00000000000000000000000000000001)) (= (size!2011 (_keys!3667 newMap!16)) (size!2012 (_values!2026 newMap!16))) (bvsge (_size!358 newMap!16) #b00000000000000000000000000000000) (bvsle (_size!358 newMap!16) (bvadd (mask!5927 newMap!16) #b00000000000000000000000000000001))))))

(assert (= (and d!11301 res!32915) b!59240))

(assert (= (and b!59240 res!32913) b!59241))

(assert (= (and b!59241 res!32914) b!59242))

(assert (= (and b!59242 res!32916) b!59243))

(declare-fun m!51011 () Bool)

(assert (=> b!59242 m!51011))

(assert (=> b!59241 m!51011))

(assert (=> d!11301 m!50771))

(assert (=> d!11221 d!11301))

(declare-fun d!11303 () Bool)

(assert (=> d!11303 (= (apply!66 lt!23739 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1069 (getValueByKey!124 (toList!697 lt!23739) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2562 () Bool)

(assert (= bs!2562 d!11303))

(assert (=> bs!2562 m!50987))

(assert (=> bs!2562 m!50987))

(declare-fun m!51013 () Bool)

(assert (=> bs!2562 m!51013))

(assert (=> b!58905 d!11303))

(assert (=> bm!4393 d!11209))

(declare-fun d!11305 () Bool)

(declare-fun res!32917 () Bool)

(declare-fun e!38970 () Bool)

(assert (=> d!11305 (=> (not res!32917) (not e!38970))))

(assert (=> d!11305 (= res!32917 (simpleValid!42 (_2!1021 lt!23809)))))

(assert (=> d!11305 (= (valid!254 (_2!1021 lt!23809)) e!38970)))

(declare-fun b!59244 () Bool)

(declare-fun res!32918 () Bool)

(assert (=> b!59244 (=> (not res!32918) (not e!38970))))

(assert (=> b!59244 (= res!32918 (= (arrayCountValidKeys!0 (_keys!3667 (_2!1021 lt!23809)) #b00000000000000000000000000000000 (size!2011 (_keys!3667 (_2!1021 lt!23809)))) (_size!358 (_2!1021 lt!23809))))))

(declare-fun b!59245 () Bool)

(declare-fun res!32919 () Bool)

(assert (=> b!59245 (=> (not res!32919) (not e!38970))))

(assert (=> b!59245 (= res!32919 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3667 (_2!1021 lt!23809)) (mask!5927 (_2!1021 lt!23809))))))

(declare-fun b!59246 () Bool)

(assert (=> b!59246 (= e!38970 (arrayNoDuplicates!0 (_keys!3667 (_2!1021 lt!23809)) #b00000000000000000000000000000000 Nil!1428))))

(assert (= (and d!11305 res!32917) b!59244))

(assert (= (and b!59244 res!32918) b!59245))

(assert (= (and b!59245 res!32919) b!59246))

(declare-fun m!51015 () Bool)

(assert (=> d!11305 m!51015))

(declare-fun m!51017 () Bool)

(assert (=> b!59244 m!51017))

(declare-fun m!51019 () Bool)

(assert (=> b!59245 m!51019))

(declare-fun m!51021 () Bool)

(assert (=> b!59246 m!51021))

(assert (=> d!11215 d!11305))

(assert (=> d!11215 d!11221))

(declare-fun call!4440 () ListLongMap!1363)

(declare-fun call!4439 () ListLongMap!1363)

(declare-fun c!7553 () Bool)

(declare-fun call!4437 () ListLongMap!1363)

(declare-fun call!4436 () ListLongMap!1363)

(declare-fun bm!4431 () Bool)

(declare-fun c!7556 () Bool)

(assert (=> bm!4431 (= call!4437 (+!81 (ite c!7553 call!4436 (ite c!7556 call!4439 call!4440)) (ite (or c!7553 c!7556) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))))))

(declare-fun b!59247 () Bool)

(declare-fun e!38971 () ListLongMap!1363)

(declare-fun call!4434 () ListLongMap!1363)

(assert (=> b!59247 (= e!38971 call!4434)))

(declare-fun b!59248 () Bool)

(declare-fun c!7555 () Bool)

(assert (=> b!59248 (= c!7555 (and (not (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!38975 () ListLongMap!1363)

(assert (=> b!59248 (= e!38975 e!38971)))

(declare-fun b!59249 () Bool)

(declare-fun e!38978 () Bool)

(declare-fun call!4438 () Bool)

(assert (=> b!59249 (= e!38978 (not call!4438))))

(declare-fun b!59251 () Bool)

(declare-fun e!38977 () Bool)

(assert (=> b!59251 (= e!38977 (validKeyInArray!0 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59252 () Bool)

(declare-fun e!38981 () Bool)

(assert (=> b!59252 (= e!38978 e!38981)))

(declare-fun res!32928 () Bool)

(assert (=> b!59252 (= res!32928 call!4438)))

(assert (=> b!59252 (=> (not res!32928) (not e!38981))))

(declare-fun b!59253 () Bool)

(declare-fun e!38983 () Bool)

(assert (=> b!59253 (= e!38983 e!38978)))

(declare-fun c!7554 () Bool)

(assert (=> b!59253 (= c!7554 (not (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!59254 () Bool)

(declare-fun e!38979 () Bool)

(declare-fun call!4435 () Bool)

(assert (=> b!59254 (= e!38979 (not call!4435))))

(declare-fun b!59255 () Bool)

(declare-fun e!38972 () Bool)

(declare-fun lt!24034 () ListLongMap!1363)

(assert (=> b!59255 (= e!38972 (= (apply!66 lt!24034 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1959 newMap!16)))))

(declare-fun b!59256 () Bool)

(declare-fun e!38973 () ListLongMap!1363)

(assert (=> b!59256 (= e!38973 e!38975)))

(assert (=> b!59256 (= c!7556 (and (not (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!59257 () Bool)

(declare-fun e!38980 () Unit!1551)

(declare-fun Unit!1566 () Unit!1551)

(assert (=> b!59257 (= e!38980 Unit!1566)))

(declare-fun bm!4432 () Bool)

(assert (=> bm!4432 (= call!4435 (contains!682 lt!24034 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59258 () Bool)

(declare-fun res!32920 () Bool)

(assert (=> b!59258 (=> (not res!32920) (not e!38983))))

(declare-fun e!38974 () Bool)

(assert (=> b!59258 (= res!32920 e!38974)))

(declare-fun res!32921 () Bool)

(assert (=> b!59258 (=> res!32921 e!38974)))

(declare-fun e!38982 () Bool)

(assert (=> b!59258 (= res!32921 (not e!38982))))

(declare-fun res!32923 () Bool)

(assert (=> b!59258 (=> (not res!32923) (not e!38982))))

(assert (=> b!59258 (= res!32923 (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(declare-fun b!59250 () Bool)

(assert (=> b!59250 (= e!38973 (+!81 call!4437 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))))))

(declare-fun d!11307 () Bool)

(assert (=> d!11307 e!38983))

(declare-fun res!32927 () Bool)

(assert (=> d!11307 (=> (not res!32927) (not e!38983))))

(assert (=> d!11307 (= res!32927 (or (bvsge #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))))

(declare-fun lt!24019 () ListLongMap!1363)

(assert (=> d!11307 (= lt!24034 lt!24019)))

(declare-fun lt!24022 () Unit!1551)

(assert (=> d!11307 (= lt!24022 e!38980)))

(declare-fun c!7551 () Bool)

(assert (=> d!11307 (= c!7551 e!38977)))

(declare-fun res!32924 () Bool)

(assert (=> d!11307 (=> (not res!32924) (not e!38977))))

(assert (=> d!11307 (= res!32924 (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(assert (=> d!11307 (= lt!24019 e!38973)))

(assert (=> d!11307 (= c!7553 (and (not (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11307 (validMask!0 (mask!5927 newMap!16))))

(assert (=> d!11307 (= (getCurrentListMap!402 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)) lt!24034)))

(declare-fun bm!4433 () Bool)

(assert (=> bm!4433 (= call!4440 call!4439)))

(declare-fun b!59259 () Bool)

(assert (=> b!59259 (= e!38982 (validKeyInArray!0 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59260 () Bool)

(assert (=> b!59260 (= e!38979 e!38972)))

(declare-fun res!32926 () Bool)

(assert (=> b!59260 (= res!32926 call!4435)))

(assert (=> b!59260 (=> (not res!32926) (not e!38972))))

(declare-fun bm!4434 () Bool)

(assert (=> bm!4434 (= call!4439 call!4436)))

(declare-fun b!59261 () Bool)

(assert (=> b!59261 (= e!38971 call!4440)))

(declare-fun bm!4435 () Bool)

(assert (=> bm!4435 (= call!4434 call!4437)))

(declare-fun bm!4436 () Bool)

(assert (=> bm!4436 (= call!4436 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun b!59262 () Bool)

(declare-fun e!38976 () Bool)

(assert (=> b!59262 (= e!38976 (= (apply!66 lt!24034 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)) (get!1066 (select (arr!1782 (_values!2026 newMap!16)) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2043 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!59262 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2012 (_values!2026 newMap!16))))))

(assert (=> b!59262 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(declare-fun b!59263 () Bool)

(declare-fun lt!24030 () Unit!1551)

(assert (=> b!59263 (= e!38980 lt!24030)))

(declare-fun lt!24023 () ListLongMap!1363)

(assert (=> b!59263 (= lt!24023 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!24018 () (_ BitVec 64))

(assert (=> b!59263 (= lt!24018 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24016 () (_ BitVec 64))

(assert (=> b!59263 (= lt!24016 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24031 () Unit!1551)

(assert (=> b!59263 (= lt!24031 (addStillContains!42 lt!24023 lt!24018 (zeroValue!1959 newMap!16) lt!24016))))

(assert (=> b!59263 (contains!682 (+!81 lt!24023 (tuple2!2023 lt!24018 (zeroValue!1959 newMap!16))) lt!24016)))

(declare-fun lt!24037 () Unit!1551)

(assert (=> b!59263 (= lt!24037 lt!24031)))

(declare-fun lt!24020 () ListLongMap!1363)

(assert (=> b!59263 (= lt!24020 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!24028 () (_ BitVec 64))

(assert (=> b!59263 (= lt!24028 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24033 () (_ BitVec 64))

(assert (=> b!59263 (= lt!24033 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24026 () Unit!1551)

(assert (=> b!59263 (= lt!24026 (addApplyDifferent!42 lt!24020 lt!24028 (minValue!1959 newMap!16) lt!24033))))

(assert (=> b!59263 (= (apply!66 (+!81 lt!24020 (tuple2!2023 lt!24028 (minValue!1959 newMap!16))) lt!24033) (apply!66 lt!24020 lt!24033))))

(declare-fun lt!24032 () Unit!1551)

(assert (=> b!59263 (= lt!24032 lt!24026)))

(declare-fun lt!24021 () ListLongMap!1363)

(assert (=> b!59263 (= lt!24021 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!24029 () (_ BitVec 64))

(assert (=> b!59263 (= lt!24029 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24017 () (_ BitVec 64))

(assert (=> b!59263 (= lt!24017 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24035 () Unit!1551)

(assert (=> b!59263 (= lt!24035 (addApplyDifferent!42 lt!24021 lt!24029 (zeroValue!1959 newMap!16) lt!24017))))

(assert (=> b!59263 (= (apply!66 (+!81 lt!24021 (tuple2!2023 lt!24029 (zeroValue!1959 newMap!16))) lt!24017) (apply!66 lt!24021 lt!24017))))

(declare-fun lt!24024 () Unit!1551)

(assert (=> b!59263 (= lt!24024 lt!24035)))

(declare-fun lt!24027 () ListLongMap!1363)

(assert (=> b!59263 (= lt!24027 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!24025 () (_ BitVec 64))

(assert (=> b!59263 (= lt!24025 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24036 () (_ BitVec 64))

(assert (=> b!59263 (= lt!24036 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!59263 (= lt!24030 (addApplyDifferent!42 lt!24027 lt!24025 (minValue!1959 newMap!16) lt!24036))))

(assert (=> b!59263 (= (apply!66 (+!81 lt!24027 (tuple2!2023 lt!24025 (minValue!1959 newMap!16))) lt!24036) (apply!66 lt!24027 lt!24036))))

(declare-fun b!59264 () Bool)

(assert (=> b!59264 (= e!38974 e!38976)))

(declare-fun res!32922 () Bool)

(assert (=> b!59264 (=> (not res!32922) (not e!38976))))

(assert (=> b!59264 (= res!32922 (contains!682 lt!24034 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59264 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(declare-fun b!59265 () Bool)

(declare-fun res!32925 () Bool)

(assert (=> b!59265 (=> (not res!32925) (not e!38983))))

(assert (=> b!59265 (= res!32925 e!38979)))

(declare-fun c!7552 () Bool)

(assert (=> b!59265 (= c!7552 (not (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!4437 () Bool)

(assert (=> bm!4437 (= call!4438 (contains!682 lt!24034 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59266 () Bool)

(assert (=> b!59266 (= e!38975 call!4434)))

(declare-fun b!59267 () Bool)

(assert (=> b!59267 (= e!38981 (= (apply!66 lt!24034 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1959 newMap!16)))))

(assert (= (and d!11307 c!7553) b!59250))

(assert (= (and d!11307 (not c!7553)) b!59256))

(assert (= (and b!59256 c!7556) b!59266))

(assert (= (and b!59256 (not c!7556)) b!59248))

(assert (= (and b!59248 c!7555) b!59247))

(assert (= (and b!59248 (not c!7555)) b!59261))

(assert (= (or b!59247 b!59261) bm!4433))

(assert (= (or b!59266 bm!4433) bm!4434))

(assert (= (or b!59266 b!59247) bm!4435))

(assert (= (or b!59250 bm!4434) bm!4436))

(assert (= (or b!59250 bm!4435) bm!4431))

(assert (= (and d!11307 res!32924) b!59251))

(assert (= (and d!11307 c!7551) b!59263))

(assert (= (and d!11307 (not c!7551)) b!59257))

(assert (= (and d!11307 res!32927) b!59258))

(assert (= (and b!59258 res!32923) b!59259))

(assert (= (and b!59258 (not res!32921)) b!59264))

(assert (= (and b!59264 res!32922) b!59262))

(assert (= (and b!59258 res!32920) b!59265))

(assert (= (and b!59265 c!7552) b!59260))

(assert (= (and b!59265 (not c!7552)) b!59254))

(assert (= (and b!59260 res!32926) b!59255))

(assert (= (or b!59260 b!59254) bm!4432))

(assert (= (and b!59265 res!32925) b!59253))

(assert (= (and b!59253 c!7554) b!59252))

(assert (= (and b!59253 (not c!7554)) b!59249))

(assert (= (and b!59252 res!32928) b!59267))

(assert (= (or b!59252 b!59249) bm!4437))

(declare-fun b_lambda!2593 () Bool)

(assert (=> (not b_lambda!2593) (not b!59262)))

(assert (=> b!59262 t!4775))

(declare-fun b_and!3575 () Bool)

(assert (= b_and!3571 (and (=> t!4775 result!2381) b_and!3575)))

(assert (=> b!59262 t!4777))

(declare-fun b_and!3577 () Bool)

(assert (= b_and!3573 (and (=> t!4777 result!2383) b_and!3577)))

(declare-fun m!51023 () Bool)

(assert (=> b!59250 m!51023))

(declare-fun m!51025 () Bool)

(assert (=> bm!4436 m!51025))

(declare-fun m!51027 () Bool)

(assert (=> bm!4431 m!51027))

(declare-fun m!51029 () Bool)

(assert (=> b!59255 m!51029))

(assert (=> b!59259 m!50803))

(assert (=> b!59259 m!50803))

(assert (=> b!59259 m!50805))

(declare-fun m!51031 () Bool)

(assert (=> bm!4432 m!51031))

(declare-fun m!51033 () Bool)

(assert (=> b!59262 m!51033))

(assert (=> b!59262 m!50803))

(declare-fun m!51035 () Bool)

(assert (=> b!59262 m!51035))

(assert (=> b!59262 m!50813))

(assert (=> b!59262 m!51033))

(assert (=> b!59262 m!50813))

(declare-fun m!51037 () Bool)

(assert (=> b!59262 m!51037))

(assert (=> b!59262 m!50803))

(declare-fun m!51039 () Bool)

(assert (=> b!59267 m!51039))

(assert (=> b!59264 m!50803))

(assert (=> b!59264 m!50803))

(declare-fun m!51041 () Bool)

(assert (=> b!59264 m!51041))

(assert (=> b!59251 m!50803))

(assert (=> b!59251 m!50803))

(assert (=> b!59251 m!50805))

(assert (=> d!11307 m!50771))

(declare-fun m!51043 () Bool)

(assert (=> bm!4437 m!51043))

(declare-fun m!51045 () Bool)

(assert (=> b!59263 m!51045))

(declare-fun m!51047 () Bool)

(assert (=> b!59263 m!51047))

(declare-fun m!51049 () Bool)

(assert (=> b!59263 m!51049))

(declare-fun m!51051 () Bool)

(assert (=> b!59263 m!51051))

(assert (=> b!59263 m!51045))

(declare-fun m!51053 () Bool)

(assert (=> b!59263 m!51053))

(declare-fun m!51055 () Bool)

(assert (=> b!59263 m!51055))

(declare-fun m!51057 () Bool)

(assert (=> b!59263 m!51057))

(assert (=> b!59263 m!51025))

(declare-fun m!51059 () Bool)

(assert (=> b!59263 m!51059))

(declare-fun m!51061 () Bool)

(assert (=> b!59263 m!51061))

(declare-fun m!51063 () Bool)

(assert (=> b!59263 m!51063))

(assert (=> b!59263 m!50803))

(declare-fun m!51065 () Bool)

(assert (=> b!59263 m!51065))

(declare-fun m!51067 () Bool)

(assert (=> b!59263 m!51067))

(declare-fun m!51069 () Bool)

(assert (=> b!59263 m!51069))

(assert (=> b!59263 m!51059))

(declare-fun m!51071 () Bool)

(assert (=> b!59263 m!51071))

(assert (=> b!59263 m!51055))

(declare-fun m!51073 () Bool)

(assert (=> b!59263 m!51073))

(assert (=> b!59263 m!51065))

(assert (=> d!11209 d!11307))

(declare-fun b!59280 () Bool)

(declare-fun e!38991 () SeekEntryResult!227)

(assert (=> b!59280 (= e!38991 Undefined!227)))

(declare-fun b!59281 () Bool)

(declare-fun c!7564 () Bool)

(declare-fun lt!24044 () (_ BitVec 64))

(assert (=> b!59281 (= c!7564 (= lt!24044 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!38990 () SeekEntryResult!227)

(declare-fun e!38992 () SeekEntryResult!227)

(assert (=> b!59281 (= e!38990 e!38992)))

(declare-fun b!59282 () Bool)

(declare-fun lt!24046 () SeekEntryResult!227)

(assert (=> b!59282 (= e!38990 (Found!227 (index!3033 lt!24046)))))

(declare-fun b!59283 () Bool)

(assert (=> b!59283 (= e!38991 e!38990)))

(assert (=> b!59283 (= lt!24044 (select (arr!1781 (_keys!3667 newMap!16)) (index!3033 lt!24046)))))

(declare-fun c!7565 () Bool)

(assert (=> b!59283 (= c!7565 (= lt!24044 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(declare-fun lt!24045 () SeekEntryResult!227)

(declare-fun d!11309 () Bool)

(assert (=> d!11309 (and (or ((_ is Undefined!227) lt!24045) (not ((_ is Found!227) lt!24045)) (and (bvsge (index!3032 lt!24045) #b00000000000000000000000000000000) (bvslt (index!3032 lt!24045) (size!2011 (_keys!3667 newMap!16))))) (or ((_ is Undefined!227) lt!24045) ((_ is Found!227) lt!24045) (not ((_ is MissingZero!227) lt!24045)) (and (bvsge (index!3031 lt!24045) #b00000000000000000000000000000000) (bvslt (index!3031 lt!24045) (size!2011 (_keys!3667 newMap!16))))) (or ((_ is Undefined!227) lt!24045) ((_ is Found!227) lt!24045) ((_ is MissingZero!227) lt!24045) (not ((_ is MissingVacant!227) lt!24045)) (and (bvsge (index!3034 lt!24045) #b00000000000000000000000000000000) (bvslt (index!3034 lt!24045) (size!2011 (_keys!3667 newMap!16))))) (or ((_ is Undefined!227) lt!24045) (ite ((_ is Found!227) lt!24045) (= (select (arr!1781 (_keys!3667 newMap!16)) (index!3032 lt!24045)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (ite ((_ is MissingZero!227) lt!24045) (= (select (arr!1781 (_keys!3667 newMap!16)) (index!3031 lt!24045)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!227) lt!24045) (= (select (arr!1781 (_keys!3667 newMap!16)) (index!3034 lt!24045)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11309 (= lt!24045 e!38991)))

(declare-fun c!7563 () Bool)

(assert (=> d!11309 (= c!7563 (and ((_ is Intermediate!227) lt!24046) (undefined!1039 lt!24046)))))

(declare-fun seekKeyOrZeroOrLongMinValue!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!3721 (_ BitVec 32)) SeekEntryResult!227)

(declare-fun toIndex!0 ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))

(assert (=> d!11309 (= lt!24046 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (mask!5927 newMap!16)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (_keys!3667 newMap!16) (mask!5927 newMap!16)))))

(assert (=> d!11309 (validMask!0 (mask!5927 newMap!16))))

(assert (=> d!11309 (= (seekEntryOrOpen!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (_keys!3667 newMap!16) (mask!5927 newMap!16)) lt!24045)))

(declare-fun b!59284 () Bool)

(declare-fun seekKeyOrZeroReturnVacant!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!3721 (_ BitVec 32)) SeekEntryResult!227)

(assert (=> b!59284 (= e!38992 (seekKeyOrZeroReturnVacant!0 (x!10003 lt!24046) (index!3033 lt!24046) (index!3033 lt!24046) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (_keys!3667 newMap!16) (mask!5927 newMap!16)))))

(declare-fun b!59285 () Bool)

(assert (=> b!59285 (= e!38992 (MissingZero!227 (index!3033 lt!24046)))))

(assert (= (and d!11309 c!7563) b!59280))

(assert (= (and d!11309 (not c!7563)) b!59283))

(assert (= (and b!59283 c!7565) b!59282))

(assert (= (and b!59283 (not c!7565)) b!59281))

(assert (= (and b!59281 c!7564) b!59285))

(assert (= (and b!59281 (not c!7564)) b!59284))

(declare-fun m!51075 () Bool)

(assert (=> b!59283 m!51075))

(assert (=> d!11309 m!50529))

(declare-fun m!51077 () Bool)

(assert (=> d!11309 m!51077))

(declare-fun m!51079 () Bool)

(assert (=> d!11309 m!51079))

(declare-fun m!51081 () Bool)

(assert (=> d!11309 m!51081))

(declare-fun m!51083 () Bool)

(assert (=> d!11309 m!51083))

(assert (=> d!11309 m!51077))

(assert (=> d!11309 m!50529))

(declare-fun m!51085 () Bool)

(assert (=> d!11309 m!51085))

(assert (=> d!11309 m!50771))

(assert (=> b!59284 m!50529))

(declare-fun m!51087 () Bool)

(assert (=> b!59284 m!51087))

(assert (=> b!59033 d!11309))

(declare-fun d!11311 () Bool)

(declare-fun e!38993 () Bool)

(assert (=> d!11311 e!38993))

(declare-fun res!32929 () Bool)

(assert (=> d!11311 (=> res!32929 e!38993)))

(declare-fun lt!24049 () Bool)

(assert (=> d!11311 (= res!32929 (not lt!24049))))

(declare-fun lt!24048 () Bool)

(assert (=> d!11311 (= lt!24049 lt!24048)))

(declare-fun lt!24050 () Unit!1551)

(declare-fun e!38994 () Unit!1551)

(assert (=> d!11311 (= lt!24050 e!38994)))

(declare-fun c!7566 () Bool)

(assert (=> d!11311 (= c!7566 lt!24048)))

(assert (=> d!11311 (= lt!24048 (containsKey!128 (toList!697 lt!23739) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11311 (= (contains!682 lt!23739 #b0000000000000000000000000000000000000000000000000000000000000000) lt!24049)))

(declare-fun b!59286 () Bool)

(declare-fun lt!24047 () Unit!1551)

(assert (=> b!59286 (= e!38994 lt!24047)))

(assert (=> b!59286 (= lt!24047 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 lt!23739) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59286 (isDefined!77 (getValueByKey!124 (toList!697 lt!23739) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59287 () Bool)

(declare-fun Unit!1567 () Unit!1551)

(assert (=> b!59287 (= e!38994 Unit!1567)))

(declare-fun b!59288 () Bool)

(assert (=> b!59288 (= e!38993 (isDefined!77 (getValueByKey!124 (toList!697 lt!23739) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11311 c!7566) b!59286))

(assert (= (and d!11311 (not c!7566)) b!59287))

(assert (= (and d!11311 (not res!32929)) b!59288))

(declare-fun m!51089 () Bool)

(assert (=> d!11311 m!51089))

(declare-fun m!51091 () Bool)

(assert (=> b!59286 m!51091))

(declare-fun m!51093 () Bool)

(assert (=> b!59286 m!51093))

(assert (=> b!59286 m!51093))

(declare-fun m!51095 () Bool)

(assert (=> b!59286 m!51095))

(assert (=> b!59288 m!51093))

(assert (=> b!59288 m!51093))

(assert (=> b!59288 m!51095))

(assert (=> bm!4328 d!11311))

(declare-fun d!11313 () Bool)

(assert (=> d!11313 (= (get!1067 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2382 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(assert (=> b!59039 d!11313))

(assert (=> d!11211 d!11219))

(declare-fun call!4444 () ListLongMap!1363)

(declare-fun call!4446 () ListLongMap!1363)

(declare-fun c!7572 () Bool)

(declare-fun call!4443 () ListLongMap!1363)

(declare-fun bm!4438 () Bool)

(declare-fun call!4447 () ListLongMap!1363)

(declare-fun c!7569 () Bool)

(assert (=> bm!4438 (= call!4444 (+!81 (ite c!7569 call!4443 (ite c!7572 call!4446 call!4447)) (ite (or c!7569 c!7572) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16))))))))

(declare-fun b!59289 () Bool)

(declare-fun e!38995 () ListLongMap!1363)

(declare-fun call!4441 () ListLongMap!1363)

(assert (=> b!59289 (= e!38995 call!4441)))

(declare-fun b!59290 () Bool)

(declare-fun c!7571 () Bool)

(assert (=> b!59290 (= c!7571 (and (not (= (bvand (ite c!7503 (ite c!7507 (extraKeys!1930 newMap!16) lt!23820) (extraKeys!1930 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite c!7503 (ite c!7507 (extraKeys!1930 newMap!16) lt!23820) (extraKeys!1930 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!38999 () ListLongMap!1363)

(assert (=> b!59290 (= e!38999 e!38995)))

(declare-fun b!59291 () Bool)

(declare-fun e!39002 () Bool)

(declare-fun call!4445 () Bool)

(assert (=> b!59291 (= e!39002 (not call!4445))))

(declare-fun b!59293 () Bool)

(declare-fun e!39001 () Bool)

(assert (=> b!59293 (= e!39001 (validKeyInArray!0 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59294 () Bool)

(declare-fun e!39005 () Bool)

(assert (=> b!59294 (= e!39002 e!39005)))

(declare-fun res!32938 () Bool)

(assert (=> b!59294 (= res!32938 call!4445)))

(assert (=> b!59294 (=> (not res!32938) (not e!39005))))

(declare-fun b!59295 () Bool)

(declare-fun e!39007 () Bool)

(assert (=> b!59295 (= e!39007 e!39002)))

(declare-fun c!7570 () Bool)

(assert (=> b!59295 (= c!7570 (not (= (bvand (ite c!7503 (ite c!7507 (extraKeys!1930 newMap!16) lt!23820) (extraKeys!1930 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!59296 () Bool)

(declare-fun e!39003 () Bool)

(declare-fun call!4442 () Bool)

(assert (=> b!59296 (= e!39003 (not call!4442))))

(declare-fun b!59297 () Bool)

(declare-fun e!38996 () Bool)

(declare-fun lt!24069 () ListLongMap!1363)

(assert (=> b!59297 (= e!38996 (= (apply!66 lt!24069 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1959 newMap!16)))))

(declare-fun b!59298 () Bool)

(declare-fun e!38997 () ListLongMap!1363)

(assert (=> b!59298 (= e!38997 e!38999)))

(assert (=> b!59298 (= c!7572 (and (not (= (bvand (ite c!7503 (ite c!7507 (extraKeys!1930 newMap!16) lt!23820) (extraKeys!1930 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite c!7503 (ite c!7507 (extraKeys!1930 newMap!16) lt!23820) (extraKeys!1930 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!59299 () Bool)

(declare-fun e!39004 () Unit!1551)

(declare-fun Unit!1568 () Unit!1551)

(assert (=> b!59299 (= e!39004 Unit!1568)))

(declare-fun bm!4439 () Bool)

(assert (=> bm!4439 (= call!4442 (contains!682 lt!24069 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59300 () Bool)

(declare-fun res!32930 () Bool)

(assert (=> b!59300 (=> (not res!32930) (not e!39007))))

(declare-fun e!38998 () Bool)

(assert (=> b!59300 (= res!32930 e!38998)))

(declare-fun res!32931 () Bool)

(assert (=> b!59300 (=> res!32931 e!38998)))

(declare-fun e!39006 () Bool)

(assert (=> b!59300 (= res!32931 (not e!39006))))

(declare-fun res!32933 () Bool)

(assert (=> b!59300 (=> (not res!32933) (not e!39006))))

(assert (=> b!59300 (= res!32933 (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(declare-fun b!59292 () Bool)

(assert (=> b!59292 (= e!38997 (+!81 call!4444 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)))))))

(declare-fun d!11315 () Bool)

(assert (=> d!11315 e!39007))

(declare-fun res!32937 () Bool)

(assert (=> d!11315 (=> (not res!32937) (not e!39007))))

(assert (=> d!11315 (= res!32937 (or (bvsge #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))))

(declare-fun lt!24054 () ListLongMap!1363)

(assert (=> d!11315 (= lt!24069 lt!24054)))

(declare-fun lt!24057 () Unit!1551)

(assert (=> d!11315 (= lt!24057 e!39004)))

(declare-fun c!7567 () Bool)

(assert (=> d!11315 (= c!7567 e!39001)))

(declare-fun res!32934 () Bool)

(assert (=> d!11315 (=> (not res!32934) (not e!39001))))

(assert (=> d!11315 (= res!32934 (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(assert (=> d!11315 (= lt!24054 e!38997)))

(assert (=> d!11315 (= c!7569 (and (not (= (bvand (ite c!7503 (ite c!7507 (extraKeys!1930 newMap!16) lt!23820) (extraKeys!1930 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite c!7503 (ite c!7507 (extraKeys!1930 newMap!16) lt!23820) (extraKeys!1930 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11315 (validMask!0 (mask!5927 newMap!16))))

(assert (=> d!11315 (= (getCurrentListMap!402 (_keys!3667 newMap!16) (ite (or c!7503 c!7502) (_values!2026 newMap!16) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (index!3032 lt!23832) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16)))) (mask!5927 newMap!16) (ite c!7503 (ite c!7507 (extraKeys!1930 newMap!16) lt!23820) (extraKeys!1930 newMap!16)) (zeroValue!1959 newMap!16) (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)) lt!24069)))

(declare-fun bm!4440 () Bool)

(assert (=> bm!4440 (= call!4447 call!4446)))

(declare-fun b!59301 () Bool)

(assert (=> b!59301 (= e!39006 (validKeyInArray!0 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59302 () Bool)

(assert (=> b!59302 (= e!39003 e!38996)))

(declare-fun res!32936 () Bool)

(assert (=> b!59302 (= res!32936 call!4442)))

(assert (=> b!59302 (=> (not res!32936) (not e!38996))))

(declare-fun bm!4441 () Bool)

(assert (=> bm!4441 (= call!4446 call!4443)))

(declare-fun b!59303 () Bool)

(assert (=> b!59303 (= e!38995 call!4447)))

(declare-fun bm!4442 () Bool)

(assert (=> bm!4442 (= call!4441 call!4444)))

(declare-fun bm!4443 () Bool)

(assert (=> bm!4443 (= call!4443 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (ite (or c!7503 c!7502) (_values!2026 newMap!16) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (index!3032 lt!23832) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16)))) (mask!5927 newMap!16) (ite c!7503 (ite c!7507 (extraKeys!1930 newMap!16) lt!23820) (extraKeys!1930 newMap!16)) (zeroValue!1959 newMap!16) (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun b!59304 () Bool)

(declare-fun e!39000 () Bool)

(assert (=> b!59304 (= e!39000 (= (apply!66 lt!24069 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)) (get!1066 (select (arr!1782 (ite (or c!7503 c!7502) (_values!2026 newMap!16) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (index!3032 lt!23832) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2043 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!59304 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2012 (ite (or c!7503 c!7502) (_values!2026 newMap!16) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (index!3032 lt!23832) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16)))))))))

(assert (=> b!59304 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(declare-fun b!59305 () Bool)

(declare-fun lt!24065 () Unit!1551)

(assert (=> b!59305 (= e!39004 lt!24065)))

(declare-fun lt!24058 () ListLongMap!1363)

(assert (=> b!59305 (= lt!24058 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (ite (or c!7503 c!7502) (_values!2026 newMap!16) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (index!3032 lt!23832) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16)))) (mask!5927 newMap!16) (ite c!7503 (ite c!7507 (extraKeys!1930 newMap!16) lt!23820) (extraKeys!1930 newMap!16)) (zeroValue!1959 newMap!16) (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!24053 () (_ BitVec 64))

(assert (=> b!59305 (= lt!24053 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24051 () (_ BitVec 64))

(assert (=> b!59305 (= lt!24051 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24066 () Unit!1551)

(assert (=> b!59305 (= lt!24066 (addStillContains!42 lt!24058 lt!24053 (zeroValue!1959 newMap!16) lt!24051))))

(assert (=> b!59305 (contains!682 (+!81 lt!24058 (tuple2!2023 lt!24053 (zeroValue!1959 newMap!16))) lt!24051)))

(declare-fun lt!24072 () Unit!1551)

(assert (=> b!59305 (= lt!24072 lt!24066)))

(declare-fun lt!24055 () ListLongMap!1363)

(assert (=> b!59305 (= lt!24055 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (ite (or c!7503 c!7502) (_values!2026 newMap!16) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (index!3032 lt!23832) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16)))) (mask!5927 newMap!16) (ite c!7503 (ite c!7507 (extraKeys!1930 newMap!16) lt!23820) (extraKeys!1930 newMap!16)) (zeroValue!1959 newMap!16) (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!24063 () (_ BitVec 64))

(assert (=> b!59305 (= lt!24063 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24068 () (_ BitVec 64))

(assert (=> b!59305 (= lt!24068 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24061 () Unit!1551)

(assert (=> b!59305 (= lt!24061 (addApplyDifferent!42 lt!24055 lt!24063 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)) lt!24068))))

(assert (=> b!59305 (= (apply!66 (+!81 lt!24055 (tuple2!2023 lt!24063 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)))) lt!24068) (apply!66 lt!24055 lt!24068))))

(declare-fun lt!24067 () Unit!1551)

(assert (=> b!59305 (= lt!24067 lt!24061)))

(declare-fun lt!24056 () ListLongMap!1363)

(assert (=> b!59305 (= lt!24056 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (ite (or c!7503 c!7502) (_values!2026 newMap!16) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (index!3032 lt!23832) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16)))) (mask!5927 newMap!16) (ite c!7503 (ite c!7507 (extraKeys!1930 newMap!16) lt!23820) (extraKeys!1930 newMap!16)) (zeroValue!1959 newMap!16) (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!24064 () (_ BitVec 64))

(assert (=> b!59305 (= lt!24064 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24052 () (_ BitVec 64))

(assert (=> b!59305 (= lt!24052 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24070 () Unit!1551)

(assert (=> b!59305 (= lt!24070 (addApplyDifferent!42 lt!24056 lt!24064 (zeroValue!1959 newMap!16) lt!24052))))

(assert (=> b!59305 (= (apply!66 (+!81 lt!24056 (tuple2!2023 lt!24064 (zeroValue!1959 newMap!16))) lt!24052) (apply!66 lt!24056 lt!24052))))

(declare-fun lt!24059 () Unit!1551)

(assert (=> b!59305 (= lt!24059 lt!24070)))

(declare-fun lt!24062 () ListLongMap!1363)

(assert (=> b!59305 (= lt!24062 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (ite (or c!7503 c!7502) (_values!2026 newMap!16) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (index!3032 lt!23832) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16)))) (mask!5927 newMap!16) (ite c!7503 (ite c!7507 (extraKeys!1930 newMap!16) lt!23820) (extraKeys!1930 newMap!16)) (zeroValue!1959 newMap!16) (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!24060 () (_ BitVec 64))

(assert (=> b!59305 (= lt!24060 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24071 () (_ BitVec 64))

(assert (=> b!59305 (= lt!24071 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!59305 (= lt!24065 (addApplyDifferent!42 lt!24062 lt!24060 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)) lt!24071))))

(assert (=> b!59305 (= (apply!66 (+!81 lt!24062 (tuple2!2023 lt!24060 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)))) lt!24071) (apply!66 lt!24062 lt!24071))))

(declare-fun b!59306 () Bool)

(assert (=> b!59306 (= e!38998 e!39000)))

(declare-fun res!32932 () Bool)

(assert (=> b!59306 (=> (not res!32932) (not e!39000))))

(assert (=> b!59306 (= res!32932 (contains!682 lt!24069 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59306 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(declare-fun b!59307 () Bool)

(declare-fun res!32935 () Bool)

(assert (=> b!59307 (=> (not res!32935) (not e!39007))))

(assert (=> b!59307 (= res!32935 e!39003)))

(declare-fun c!7568 () Bool)

(assert (=> b!59307 (= c!7568 (not (= (bvand (ite c!7503 (ite c!7507 (extraKeys!1930 newMap!16) lt!23820) (extraKeys!1930 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!4444 () Bool)

(assert (=> bm!4444 (= call!4445 (contains!682 lt!24069 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59308 () Bool)

(assert (=> b!59308 (= e!38999 call!4441)))

(declare-fun b!59309 () Bool)

(assert (=> b!59309 (= e!39005 (= (apply!66 lt!24069 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16))))))

(assert (= (and d!11315 c!7569) b!59292))

(assert (= (and d!11315 (not c!7569)) b!59298))

(assert (= (and b!59298 c!7572) b!59308))

(assert (= (and b!59298 (not c!7572)) b!59290))

(assert (= (and b!59290 c!7571) b!59289))

(assert (= (and b!59290 (not c!7571)) b!59303))

(assert (= (or b!59289 b!59303) bm!4440))

(assert (= (or b!59308 bm!4440) bm!4441))

(assert (= (or b!59308 b!59289) bm!4442))

(assert (= (or b!59292 bm!4441) bm!4443))

(assert (= (or b!59292 bm!4442) bm!4438))

(assert (= (and d!11315 res!32934) b!59293))

(assert (= (and d!11315 c!7567) b!59305))

(assert (= (and d!11315 (not c!7567)) b!59299))

(assert (= (and d!11315 res!32937) b!59300))

(assert (= (and b!59300 res!32933) b!59301))

(assert (= (and b!59300 (not res!32931)) b!59306))

(assert (= (and b!59306 res!32932) b!59304))

(assert (= (and b!59300 res!32930) b!59307))

(assert (= (and b!59307 c!7568) b!59302))

(assert (= (and b!59307 (not c!7568)) b!59296))

(assert (= (and b!59302 res!32936) b!59297))

(assert (= (or b!59302 b!59296) bm!4439))

(assert (= (and b!59307 res!32935) b!59295))

(assert (= (and b!59295 c!7570) b!59294))

(assert (= (and b!59295 (not c!7570)) b!59291))

(assert (= (and b!59294 res!32938) b!59309))

(assert (= (or b!59294 b!59291) bm!4444))

(declare-fun b_lambda!2595 () Bool)

(assert (=> (not b_lambda!2595) (not b!59304)))

(assert (=> b!59304 t!4775))

(declare-fun b_and!3579 () Bool)

(assert (= b_and!3575 (and (=> t!4775 result!2381) b_and!3579)))

(assert (=> b!59304 t!4777))

(declare-fun b_and!3581 () Bool)

(assert (= b_and!3577 (and (=> t!4777 result!2383) b_and!3581)))

(declare-fun m!51097 () Bool)

(assert (=> b!59292 m!51097))

(declare-fun m!51099 () Bool)

(assert (=> bm!4443 m!51099))

(declare-fun m!51101 () Bool)

(assert (=> bm!4438 m!51101))

(declare-fun m!51103 () Bool)

(assert (=> b!59297 m!51103))

(assert (=> b!59301 m!50803))

(assert (=> b!59301 m!50803))

(assert (=> b!59301 m!50805))

(declare-fun m!51105 () Bool)

(assert (=> bm!4439 m!51105))

(declare-fun m!51107 () Bool)

(assert (=> b!59304 m!51107))

(assert (=> b!59304 m!50803))

(declare-fun m!51109 () Bool)

(assert (=> b!59304 m!51109))

(assert (=> b!59304 m!50813))

(assert (=> b!59304 m!51107))

(assert (=> b!59304 m!50813))

(declare-fun m!51111 () Bool)

(assert (=> b!59304 m!51111))

(assert (=> b!59304 m!50803))

(declare-fun m!51113 () Bool)

(assert (=> b!59309 m!51113))

(assert (=> b!59306 m!50803))

(assert (=> b!59306 m!50803))

(declare-fun m!51115 () Bool)

(assert (=> b!59306 m!51115))

(assert (=> b!59293 m!50803))

(assert (=> b!59293 m!50803))

(assert (=> b!59293 m!50805))

(assert (=> d!11315 m!50771))

(declare-fun m!51117 () Bool)

(assert (=> bm!4444 m!51117))

(declare-fun m!51119 () Bool)

(assert (=> b!59305 m!51119))

(declare-fun m!51121 () Bool)

(assert (=> b!59305 m!51121))

(declare-fun m!51123 () Bool)

(assert (=> b!59305 m!51123))

(declare-fun m!51125 () Bool)

(assert (=> b!59305 m!51125))

(assert (=> b!59305 m!51119))

(declare-fun m!51127 () Bool)

(assert (=> b!59305 m!51127))

(declare-fun m!51129 () Bool)

(assert (=> b!59305 m!51129))

(declare-fun m!51131 () Bool)

(assert (=> b!59305 m!51131))

(assert (=> b!59305 m!51099))

(declare-fun m!51133 () Bool)

(assert (=> b!59305 m!51133))

(declare-fun m!51135 () Bool)

(assert (=> b!59305 m!51135))

(declare-fun m!51137 () Bool)

(assert (=> b!59305 m!51137))

(assert (=> b!59305 m!50803))

(declare-fun m!51139 () Bool)

(assert (=> b!59305 m!51139))

(declare-fun m!51141 () Bool)

(assert (=> b!59305 m!51141))

(declare-fun m!51143 () Bool)

(assert (=> b!59305 m!51143))

(assert (=> b!59305 m!51133))

(declare-fun m!51145 () Bool)

(assert (=> b!59305 m!51145))

(assert (=> b!59305 m!51129))

(declare-fun m!51147 () Bool)

(assert (=> b!59305 m!51147))

(assert (=> b!59305 m!51139))

(assert (=> bm!4389 d!11315))

(declare-fun b!59334 () Bool)

(declare-fun e!39028 () Bool)

(declare-fun lt!24092 () ListLongMap!1363)

(declare-fun isEmpty!294 (ListLongMap!1363) Bool)

(assert (=> b!59334 (= e!39028 (isEmpty!294 lt!24092))))

(declare-fun bm!4447 () Bool)

(declare-fun call!4450 () ListLongMap!1363)

(assert (=> bm!4447 (= call!4450 (getCurrentListMapNoExtraKeys!44 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (_values!2026 (v!2383 (underlying!226 thiss!992))) (mask!5927 (v!2383 (underlying!226 thiss!992))) (extraKeys!1930 (v!2383 (underlying!226 thiss!992))) (zeroValue!1959 (v!2383 (underlying!226 thiss!992))) (minValue!1959 (v!2383 (underlying!226 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2043 (v!2383 (underlying!226 thiss!992)))))))

(declare-fun b!59335 () Bool)

(declare-fun res!32949 () Bool)

(declare-fun e!39024 () Bool)

(assert (=> b!59335 (=> (not res!32949) (not e!39024))))

(assert (=> b!59335 (= res!32949 (not (contains!682 lt!24092 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!59337 () Bool)

(declare-fun e!39025 () Bool)

(declare-fun e!39022 () Bool)

(assert (=> b!59337 (= e!39025 e!39022)))

(assert (=> b!59337 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992))))))))

(declare-fun res!32950 () Bool)

(assert (=> b!59337 (= res!32950 (contains!682 lt!24092 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!59337 (=> (not res!32950) (not e!39022))))

(declare-fun b!59338 () Bool)

(declare-fun e!39023 () ListLongMap!1363)

(declare-fun e!39026 () ListLongMap!1363)

(assert (=> b!59338 (= e!39023 e!39026)))

(declare-fun c!7581 () Bool)

(assert (=> b!59338 (= c!7581 (validKeyInArray!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!59339 () Bool)

(assert (=> b!59339 (= e!39026 call!4450)))

(declare-fun b!59340 () Bool)

(assert (=> b!59340 (= e!39023 (ListLongMap!1364 Nil!1427))))

(declare-fun b!59341 () Bool)

(assert (=> b!59341 (= e!39024 e!39025)))

(declare-fun c!7582 () Bool)

(declare-fun e!39027 () Bool)

(assert (=> b!59341 (= c!7582 e!39027)))

(declare-fun res!32948 () Bool)

(assert (=> b!59341 (=> (not res!32948) (not e!39027))))

(assert (=> b!59341 (= res!32948 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992))))))))

(declare-fun b!59342 () Bool)

(assert (=> b!59342 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992))))))))

(assert (=> b!59342 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2012 (_values!2026 (v!2383 (underlying!226 thiss!992))))))))

(assert (=> b!59342 (= e!39022 (= (apply!66 lt!24092 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!59343 () Bool)

(declare-fun lt!24087 () Unit!1551)

(declare-fun lt!24089 () Unit!1551)

(assert (=> b!59343 (= lt!24087 lt!24089)))

(declare-fun lt!24091 () V!2843)

(declare-fun lt!24090 () ListLongMap!1363)

(declare-fun lt!24093 () (_ BitVec 64))

(declare-fun lt!24088 () (_ BitVec 64))

(assert (=> b!59343 (not (contains!682 (+!81 lt!24090 (tuple2!2023 lt!24093 lt!24091)) lt!24088))))

(declare-fun addStillNotContains!15 (ListLongMap!1363 (_ BitVec 64) V!2843 (_ BitVec 64)) Unit!1551)

(assert (=> b!59343 (= lt!24089 (addStillNotContains!15 lt!24090 lt!24093 lt!24091 lt!24088))))

(assert (=> b!59343 (= lt!24088 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!59343 (= lt!24091 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!59343 (= lt!24093 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!59343 (= lt!24090 call!4450)))

(assert (=> b!59343 (= e!39026 (+!81 call!4450 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun d!11317 () Bool)

(assert (=> d!11317 e!39024))

(declare-fun res!32947 () Bool)

(assert (=> d!11317 (=> (not res!32947) (not e!39024))))

(assert (=> d!11317 (= res!32947 (not (contains!682 lt!24092 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!11317 (= lt!24092 e!39023)))

(declare-fun c!7583 () Bool)

(assert (=> d!11317 (= c!7583 (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992))))))))

(assert (=> d!11317 (validMask!0 (mask!5927 (v!2383 (underlying!226 thiss!992))))))

(assert (=> d!11317 (= (getCurrentListMapNoExtraKeys!44 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (_values!2026 (v!2383 (underlying!226 thiss!992))) (mask!5927 (v!2383 (underlying!226 thiss!992))) (extraKeys!1930 (v!2383 (underlying!226 thiss!992))) (zeroValue!1959 (v!2383 (underlying!226 thiss!992))) (minValue!1959 (v!2383 (underlying!226 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2043 (v!2383 (underlying!226 thiss!992)))) lt!24092)))

(declare-fun b!59336 () Bool)

(assert (=> b!59336 (= e!39025 e!39028)))

(declare-fun c!7584 () Bool)

(assert (=> b!59336 (= c!7584 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992))))))))

(declare-fun b!59344 () Bool)

(assert (=> b!59344 (= e!39027 (validKeyInArray!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!59344 (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000)))

(declare-fun b!59345 () Bool)

(assert (=> b!59345 (= e!39028 (= lt!24092 (getCurrentListMapNoExtraKeys!44 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (_values!2026 (v!2383 (underlying!226 thiss!992))) (mask!5927 (v!2383 (underlying!226 thiss!992))) (extraKeys!1930 (v!2383 (underlying!226 thiss!992))) (zeroValue!1959 (v!2383 (underlying!226 thiss!992))) (minValue!1959 (v!2383 (underlying!226 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))))))))

(assert (= (and d!11317 c!7583) b!59340))

(assert (= (and d!11317 (not c!7583)) b!59338))

(assert (= (and b!59338 c!7581) b!59343))

(assert (= (and b!59338 (not c!7581)) b!59339))

(assert (= (or b!59343 b!59339) bm!4447))

(assert (= (and d!11317 res!32947) b!59335))

(assert (= (and b!59335 res!32949) b!59341))

(assert (= (and b!59341 res!32948) b!59344))

(assert (= (and b!59341 c!7582) b!59337))

(assert (= (and b!59341 (not c!7582)) b!59336))

(assert (= (and b!59337 res!32950) b!59342))

(assert (= (and b!59336 c!7584) b!59345))

(assert (= (and b!59336 (not c!7584)) b!59334))

(declare-fun b_lambda!2597 () Bool)

(assert (=> (not b_lambda!2597) (not b!59342)))

(assert (=> b!59342 t!4765))

(declare-fun b_and!3583 () Bool)

(assert (= b_and!3579 (and (=> t!4765 result!2367) b_and!3583)))

(assert (=> b!59342 t!4767))

(declare-fun b_and!3585 () Bool)

(assert (= b_and!3581 (and (=> t!4767 result!2371) b_and!3585)))

(declare-fun b_lambda!2599 () Bool)

(assert (=> (not b_lambda!2599) (not b!59343)))

(assert (=> b!59343 t!4765))

(declare-fun b_and!3587 () Bool)

(assert (= b_and!3583 (and (=> t!4765 result!2367) b_and!3587)))

(assert (=> b!59343 t!4767))

(declare-fun b_and!3589 () Bool)

(assert (= b_and!3585 (and (=> t!4767 result!2371) b_and!3589)))

(declare-fun m!51149 () Bool)

(assert (=> b!59343 m!51149))

(assert (=> b!59343 m!50633))

(assert (=> b!59343 m!50553))

(assert (=> b!59343 m!50637))

(assert (=> b!59343 m!50553))

(declare-fun m!51151 () Bool)

(assert (=> b!59343 m!51151))

(declare-fun m!51153 () Bool)

(assert (=> b!59343 m!51153))

(assert (=> b!59343 m!50627))

(assert (=> b!59343 m!51153))

(declare-fun m!51155 () Bool)

(assert (=> b!59343 m!51155))

(assert (=> b!59343 m!50633))

(declare-fun m!51157 () Bool)

(assert (=> b!59345 m!51157))

(assert (=> b!59337 m!50627))

(assert (=> b!59337 m!50627))

(declare-fun m!51159 () Bool)

(assert (=> b!59337 m!51159))

(declare-fun m!51161 () Bool)

(assert (=> b!59335 m!51161))

(assert (=> b!59338 m!50627))

(assert (=> b!59338 m!50627))

(assert (=> b!59338 m!50629))

(declare-fun m!51163 () Bool)

(assert (=> b!59334 m!51163))

(assert (=> bm!4447 m!51157))

(assert (=> b!59344 m!50627))

(assert (=> b!59344 m!50627))

(assert (=> b!59344 m!50629))

(declare-fun m!51165 () Bool)

(assert (=> d!11317 m!51165))

(assert (=> d!11317 m!50565))

(assert (=> b!59342 m!50627))

(declare-fun m!51167 () Bool)

(assert (=> b!59342 m!51167))

(assert (=> b!59342 m!50633))

(assert (=> b!59342 m!50553))

(assert (=> b!59342 m!50637))

(assert (=> b!59342 m!50553))

(assert (=> b!59342 m!50627))

(assert (=> b!59342 m!50633))

(assert (=> bm!4332 d!11317))

(assert (=> b!59075 d!11279))

(declare-fun d!11319 () Bool)

(declare-fun e!39029 () Bool)

(assert (=> d!11319 e!39029))

(declare-fun res!32951 () Bool)

(assert (=> d!11319 (=> res!32951 e!39029)))

(declare-fun lt!24096 () Bool)

(assert (=> d!11319 (= res!32951 (not lt!24096))))

(declare-fun lt!24095 () Bool)

(assert (=> d!11319 (= lt!24096 lt!24095)))

(declare-fun lt!24097 () Unit!1551)

(declare-fun e!39030 () Unit!1551)

(assert (=> d!11319 (= lt!24097 e!39030)))

(declare-fun c!7585 () Bool)

(assert (=> d!11319 (= c!7585 lt!24095)))

(assert (=> d!11319 (= lt!24095 (containsKey!128 (toList!697 call!4392) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(assert (=> d!11319 (= (contains!682 call!4392 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) lt!24096)))

(declare-fun b!59346 () Bool)

(declare-fun lt!24094 () Unit!1551)

(assert (=> b!59346 (= e!39030 lt!24094)))

(assert (=> b!59346 (= lt!24094 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 call!4392) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(assert (=> b!59346 (isDefined!77 (getValueByKey!124 (toList!697 call!4392) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(declare-fun b!59347 () Bool)

(declare-fun Unit!1569 () Unit!1551)

(assert (=> b!59347 (= e!39030 Unit!1569)))

(declare-fun b!59348 () Bool)

(assert (=> b!59348 (= e!39029 (isDefined!77 (getValueByKey!124 (toList!697 call!4392) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355))))))

(assert (= (and d!11319 c!7585) b!59346))

(assert (= (and d!11319 (not c!7585)) b!59347))

(assert (= (and d!11319 (not res!32951)) b!59348))

(assert (=> d!11319 m!50529))

(declare-fun m!51169 () Bool)

(assert (=> d!11319 m!51169))

(assert (=> b!59346 m!50529))

(declare-fun m!51171 () Bool)

(assert (=> b!59346 m!51171))

(assert (=> b!59346 m!50529))

(declare-fun m!51173 () Bool)

(assert (=> b!59346 m!51173))

(assert (=> b!59346 m!51173))

(declare-fun m!51175 () Bool)

(assert (=> b!59346 m!51175))

(assert (=> b!59348 m!50529))

(assert (=> b!59348 m!51173))

(assert (=> b!59348 m!51173))

(assert (=> b!59348 m!51175))

(assert (=> b!59013 d!11319))

(declare-fun d!11321 () Bool)

(declare-fun e!39031 () Bool)

(assert (=> d!11321 e!39031))

(declare-fun res!32952 () Bool)

(assert (=> d!11321 (=> res!32952 e!39031)))

(declare-fun lt!24100 () Bool)

(assert (=> d!11321 (= res!32952 (not lt!24100))))

(declare-fun lt!24099 () Bool)

(assert (=> d!11321 (= lt!24100 lt!24099)))

(declare-fun lt!24101 () Unit!1551)

(declare-fun e!39032 () Unit!1551)

(assert (=> d!11321 (= lt!24101 e!39032)))

(declare-fun c!7586 () Bool)

(assert (=> d!11321 (= c!7586 lt!24099)))

(assert (=> d!11321 (= lt!24099 (containsKey!128 (toList!697 (+!81 lt!23728 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!23721))))

(assert (=> d!11321 (= (contains!682 (+!81 lt!23728 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))) lt!23721) lt!24100)))

(declare-fun b!59349 () Bool)

(declare-fun lt!24098 () Unit!1551)

(assert (=> b!59349 (= e!39032 lt!24098)))

(assert (=> b!59349 (= lt!24098 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 (+!81 lt!23728 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!23721))))

(assert (=> b!59349 (isDefined!77 (getValueByKey!124 (toList!697 (+!81 lt!23728 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!23721))))

(declare-fun b!59350 () Bool)

(declare-fun Unit!1570 () Unit!1551)

(assert (=> b!59350 (= e!39032 Unit!1570)))

(declare-fun b!59351 () Bool)

(assert (=> b!59351 (= e!39031 (isDefined!77 (getValueByKey!124 (toList!697 (+!81 lt!23728 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!23721)))))

(assert (= (and d!11321 c!7586) b!59349))

(assert (= (and d!11321 (not c!7586)) b!59350))

(assert (= (and d!11321 (not res!32952)) b!59351))

(declare-fun m!51177 () Bool)

(assert (=> d!11321 m!51177))

(declare-fun m!51179 () Bool)

(assert (=> b!59349 m!51179))

(declare-fun m!51181 () Bool)

(assert (=> b!59349 m!51181))

(assert (=> b!59349 m!51181))

(declare-fun m!51183 () Bool)

(assert (=> b!59349 m!51183))

(assert (=> b!59351 m!51181))

(assert (=> b!59351 m!51181))

(assert (=> b!59351 m!51183))

(assert (=> b!58901 d!11321))

(declare-fun d!11323 () Bool)

(declare-fun e!39033 () Bool)

(assert (=> d!11323 e!39033))

(declare-fun res!32953 () Bool)

(assert (=> d!11323 (=> (not res!32953) (not e!39033))))

(declare-fun lt!24103 () ListLongMap!1363)

(assert (=> d!11323 (= res!32953 (contains!682 lt!24103 (_1!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun lt!24105 () List!1430)

(assert (=> d!11323 (= lt!24103 (ListLongMap!1364 lt!24105))))

(declare-fun lt!24102 () Unit!1551)

(declare-fun lt!24104 () Unit!1551)

(assert (=> d!11323 (= lt!24102 lt!24104)))

(assert (=> d!11323 (= (getValueByKey!124 lt!24105 (_1!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))) (Some!129 (_2!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(assert (=> d!11323 (= lt!24104 (lemmaContainsTupThenGetReturnValue!41 lt!24105 (_1!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(assert (=> d!11323 (= lt!24105 (insertStrictlySorted!44 (toList!697 lt!23726) (_1!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(assert (=> d!11323 (= (+!81 lt!23726 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))) lt!24103)))

(declare-fun b!59352 () Bool)

(declare-fun res!32954 () Bool)

(assert (=> b!59352 (=> (not res!32954) (not e!39033))))

(assert (=> b!59352 (= res!32954 (= (getValueByKey!124 (toList!697 lt!24103) (_1!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))) (Some!129 (_2!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(declare-fun b!59353 () Bool)

(assert (=> b!59353 (= e!39033 (contains!684 (toList!697 lt!24103) (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))))

(assert (= (and d!11323 res!32953) b!59352))

(assert (= (and b!59352 res!32954) b!59353))

(declare-fun m!51185 () Bool)

(assert (=> d!11323 m!51185))

(declare-fun m!51187 () Bool)

(assert (=> d!11323 m!51187))

(declare-fun m!51189 () Bool)

(assert (=> d!11323 m!51189))

(declare-fun m!51191 () Bool)

(assert (=> d!11323 m!51191))

(declare-fun m!51193 () Bool)

(assert (=> b!59352 m!51193))

(declare-fun m!51195 () Bool)

(assert (=> b!59353 m!51195))

(assert (=> b!58901 d!11323))

(declare-fun d!11325 () Bool)

(assert (=> d!11325 (= (apply!66 (+!81 lt!23726 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))) lt!23722) (apply!66 lt!23726 lt!23722))))

(declare-fun lt!24108 () Unit!1551)

(declare-fun choose!307 (ListLongMap!1363 (_ BitVec 64) V!2843 (_ BitVec 64)) Unit!1551)

(assert (=> d!11325 (= lt!24108 (choose!307 lt!23726 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))) lt!23722))))

(declare-fun e!39036 () Bool)

(assert (=> d!11325 e!39036))

(declare-fun res!32957 () Bool)

(assert (=> d!11325 (=> (not res!32957) (not e!39036))))

(assert (=> d!11325 (= res!32957 (contains!682 lt!23726 lt!23722))))

(assert (=> d!11325 (= (addApplyDifferent!42 lt!23726 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))) lt!23722) lt!24108)))

(declare-fun b!59357 () Bool)

(assert (=> b!59357 (= e!39036 (not (= lt!23722 lt!23734)))))

(assert (= (and d!11325 res!32957) b!59357))

(assert (=> d!11325 m!50669))

(assert (=> d!11325 m!50665))

(assert (=> d!11325 m!50667))

(declare-fun m!51197 () Bool)

(assert (=> d!11325 m!51197))

(assert (=> d!11325 m!50665))

(declare-fun m!51199 () Bool)

(assert (=> d!11325 m!51199))

(assert (=> b!58901 d!11325))

(declare-fun d!11327 () Bool)

(assert (=> d!11327 (contains!682 (+!81 lt!23728 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))) lt!23721)))

(declare-fun lt!24111 () Unit!1551)

(declare-fun choose!308 (ListLongMap!1363 (_ BitVec 64) V!2843 (_ BitVec 64)) Unit!1551)

(assert (=> d!11327 (= lt!24111 (choose!308 lt!23728 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))) lt!23721))))

(assert (=> d!11327 (contains!682 lt!23728 lt!23721)))

(assert (=> d!11327 (= (addStillContains!42 lt!23728 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))) lt!23721) lt!24111)))

(declare-fun bs!2563 () Bool)

(assert (= bs!2563 d!11327))

(assert (=> bs!2563 m!50645))

(assert (=> bs!2563 m!50645))

(assert (=> bs!2563 m!50653))

(declare-fun m!51201 () Bool)

(assert (=> bs!2563 m!51201))

(declare-fun m!51203 () Bool)

(assert (=> bs!2563 m!51203))

(assert (=> b!58901 d!11327))

(declare-fun d!11329 () Bool)

(declare-fun e!39037 () Bool)

(assert (=> d!11329 e!39037))

(declare-fun res!32958 () Bool)

(assert (=> d!11329 (=> (not res!32958) (not e!39037))))

(declare-fun lt!24113 () ListLongMap!1363)

(assert (=> d!11329 (= res!32958 (contains!682 lt!24113 (_1!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun lt!24115 () List!1430)

(assert (=> d!11329 (= lt!24113 (ListLongMap!1364 lt!24115))))

(declare-fun lt!24112 () Unit!1551)

(declare-fun lt!24114 () Unit!1551)

(assert (=> d!11329 (= lt!24112 lt!24114)))

(assert (=> d!11329 (= (getValueByKey!124 lt!24115 (_1!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) (Some!129 (_2!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(assert (=> d!11329 (= lt!24114 (lemmaContainsTupThenGetReturnValue!41 lt!24115 (_1!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(assert (=> d!11329 (= lt!24115 (insertStrictlySorted!44 (toList!697 lt!23725) (_1!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(assert (=> d!11329 (= (+!81 lt!23725 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) lt!24113)))

(declare-fun b!59359 () Bool)

(declare-fun res!32959 () Bool)

(assert (=> b!59359 (=> (not res!32959) (not e!39037))))

(assert (=> b!59359 (= res!32959 (= (getValueByKey!124 (toList!697 lt!24113) (_1!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) (Some!129 (_2!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(declare-fun b!59360 () Bool)

(assert (=> b!59360 (= e!39037 (contains!684 (toList!697 lt!24113) (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))

(assert (= (and d!11329 res!32958) b!59359))

(assert (= (and b!59359 res!32959) b!59360))

(declare-fun m!51205 () Bool)

(assert (=> d!11329 m!51205))

(declare-fun m!51207 () Bool)

(assert (=> d!11329 m!51207))

(declare-fun m!51209 () Bool)

(assert (=> d!11329 m!51209))

(declare-fun m!51211 () Bool)

(assert (=> d!11329 m!51211))

(declare-fun m!51213 () Bool)

(assert (=> b!59359 m!51213))

(declare-fun m!51215 () Bool)

(assert (=> b!59360 m!51215))

(assert (=> b!58901 d!11329))

(declare-fun d!11331 () Bool)

(assert (=> d!11331 (= (apply!66 (+!81 lt!23726 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))) lt!23722) (get!1069 (getValueByKey!124 (toList!697 (+!81 lt!23726 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!23722)))))

(declare-fun bs!2564 () Bool)

(assert (= bs!2564 d!11331))

(declare-fun m!51217 () Bool)

(assert (=> bs!2564 m!51217))

(assert (=> bs!2564 m!51217))

(declare-fun m!51219 () Bool)

(assert (=> bs!2564 m!51219))

(assert (=> b!58901 d!11331))

(declare-fun d!11333 () Bool)

(declare-fun e!39038 () Bool)

(assert (=> d!11333 e!39038))

(declare-fun res!32960 () Bool)

(assert (=> d!11333 (=> (not res!32960) (not e!39038))))

(declare-fun lt!24117 () ListLongMap!1363)

(assert (=> d!11333 (= res!32960 (contains!682 lt!24117 (_1!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun lt!24119 () List!1430)

(assert (=> d!11333 (= lt!24117 (ListLongMap!1364 lt!24119))))

(declare-fun lt!24116 () Unit!1551)

(declare-fun lt!24118 () Unit!1551)

(assert (=> d!11333 (= lt!24116 lt!24118)))

(assert (=> d!11333 (= (getValueByKey!124 lt!24119 (_1!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))) (Some!129 (_2!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(assert (=> d!11333 (= lt!24118 (lemmaContainsTupThenGetReturnValue!41 lt!24119 (_1!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(assert (=> d!11333 (= lt!24119 (insertStrictlySorted!44 (toList!697 lt!23728) (_1!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(assert (=> d!11333 (= (+!81 lt!23728 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))) lt!24117)))

(declare-fun b!59361 () Bool)

(declare-fun res!32961 () Bool)

(assert (=> b!59361 (=> (not res!32961) (not e!39038))))

(assert (=> b!59361 (= res!32961 (= (getValueByKey!124 (toList!697 lt!24117) (_1!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))) (Some!129 (_2!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(declare-fun b!59362 () Bool)

(assert (=> b!59362 (= e!39038 (contains!684 (toList!697 lt!24117) (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))))

(assert (= (and d!11333 res!32960) b!59361))

(assert (= (and b!59361 res!32961) b!59362))

(declare-fun m!51221 () Bool)

(assert (=> d!11333 m!51221))

(declare-fun m!51223 () Bool)

(assert (=> d!11333 m!51223))

(declare-fun m!51225 () Bool)

(assert (=> d!11333 m!51225))

(declare-fun m!51227 () Bool)

(assert (=> d!11333 m!51227))

(declare-fun m!51229 () Bool)

(assert (=> b!59361 m!51229))

(declare-fun m!51231 () Bool)

(assert (=> b!59362 m!51231))

(assert (=> b!58901 d!11333))

(declare-fun d!11335 () Bool)

(assert (=> d!11335 (= (apply!66 (+!81 lt!23725 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) lt!23738) (get!1069 (getValueByKey!124 (toList!697 (+!81 lt!23725 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!23738)))))

(declare-fun bs!2565 () Bool)

(assert (= bs!2565 d!11335))

(declare-fun m!51233 () Bool)

(assert (=> bs!2565 m!51233))

(assert (=> bs!2565 m!51233))

(declare-fun m!51235 () Bool)

(assert (=> bs!2565 m!51235))

(assert (=> b!58901 d!11335))

(assert (=> b!58901 d!11317))

(declare-fun d!11337 () Bool)

(declare-fun e!39039 () Bool)

(assert (=> d!11337 e!39039))

(declare-fun res!32962 () Bool)

(assert (=> d!11337 (=> (not res!32962) (not e!39039))))

(declare-fun lt!24121 () ListLongMap!1363)

(assert (=> d!11337 (= res!32962 (contains!682 lt!24121 (_1!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun lt!24123 () List!1430)

(assert (=> d!11337 (= lt!24121 (ListLongMap!1364 lt!24123))))

(declare-fun lt!24120 () Unit!1551)

(declare-fun lt!24122 () Unit!1551)

(assert (=> d!11337 (= lt!24120 lt!24122)))

(assert (=> d!11337 (= (getValueByKey!124 lt!24123 (_1!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) (Some!129 (_2!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(assert (=> d!11337 (= lt!24122 (lemmaContainsTupThenGetReturnValue!41 lt!24123 (_1!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(assert (=> d!11337 (= lt!24123 (insertStrictlySorted!44 (toList!697 lt!23732) (_1!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(assert (=> d!11337 (= (+!81 lt!23732 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) lt!24121)))

(declare-fun b!59363 () Bool)

(declare-fun res!32963 () Bool)

(assert (=> b!59363 (=> (not res!32963) (not e!39039))))

(assert (=> b!59363 (= res!32963 (= (getValueByKey!124 (toList!697 lt!24121) (_1!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) (Some!129 (_2!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(declare-fun b!59364 () Bool)

(assert (=> b!59364 (= e!39039 (contains!684 (toList!697 lt!24121) (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))

(assert (= (and d!11337 res!32962) b!59363))

(assert (= (and b!59363 res!32963) b!59364))

(declare-fun m!51237 () Bool)

(assert (=> d!11337 m!51237))

(declare-fun m!51239 () Bool)

(assert (=> d!11337 m!51239))

(declare-fun m!51241 () Bool)

(assert (=> d!11337 m!51241))

(declare-fun m!51243 () Bool)

(assert (=> d!11337 m!51243))

(declare-fun m!51245 () Bool)

(assert (=> b!59363 m!51245))

(declare-fun m!51247 () Bool)

(assert (=> b!59364 m!51247))

(assert (=> b!58901 d!11337))

(declare-fun d!11339 () Bool)

(assert (=> d!11339 (= (apply!66 (+!81 lt!23732 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) lt!23741) (get!1069 (getValueByKey!124 (toList!697 (+!81 lt!23732 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!23741)))))

(declare-fun bs!2566 () Bool)

(assert (= bs!2566 d!11339))

(declare-fun m!51249 () Bool)

(assert (=> bs!2566 m!51249))

(assert (=> bs!2566 m!51249))

(declare-fun m!51251 () Bool)

(assert (=> bs!2566 m!51251))

(assert (=> b!58901 d!11339))

(declare-fun d!11341 () Bool)

(assert (=> d!11341 (= (apply!66 (+!81 lt!23732 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) lt!23741) (apply!66 lt!23732 lt!23741))))

(declare-fun lt!24124 () Unit!1551)

(assert (=> d!11341 (= lt!24124 (choose!307 lt!23732 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992))) lt!23741))))

(declare-fun e!39040 () Bool)

(assert (=> d!11341 e!39040))

(declare-fun res!32964 () Bool)

(assert (=> d!11341 (=> (not res!32964) (not e!39040))))

(assert (=> d!11341 (= res!32964 (contains!682 lt!23732 lt!23741))))

(assert (=> d!11341 (= (addApplyDifferent!42 lt!23732 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992))) lt!23741) lt!24124)))

(declare-fun b!59365 () Bool)

(assert (=> b!59365 (= e!39040 (not (= lt!23741 lt!23730)))))

(assert (= (and d!11341 res!32964) b!59365))

(assert (=> d!11341 m!50651))

(assert (=> d!11341 m!50659))

(assert (=> d!11341 m!50661))

(declare-fun m!51253 () Bool)

(assert (=> d!11341 m!51253))

(assert (=> d!11341 m!50659))

(declare-fun m!51255 () Bool)

(assert (=> d!11341 m!51255))

(assert (=> b!58901 d!11341))

(declare-fun d!11343 () Bool)

(assert (=> d!11343 (= (apply!66 lt!23732 lt!23741) (get!1069 (getValueByKey!124 (toList!697 lt!23732) lt!23741)))))

(declare-fun bs!2567 () Bool)

(assert (= bs!2567 d!11343))

(declare-fun m!51257 () Bool)

(assert (=> bs!2567 m!51257))

(assert (=> bs!2567 m!51257))

(declare-fun m!51259 () Bool)

(assert (=> bs!2567 m!51259))

(assert (=> b!58901 d!11343))

(declare-fun d!11345 () Bool)

(assert (=> d!11345 (= (apply!66 lt!23726 lt!23722) (get!1069 (getValueByKey!124 (toList!697 lt!23726) lt!23722)))))

(declare-fun bs!2568 () Bool)

(assert (= bs!2568 d!11345))

(declare-fun m!51261 () Bool)

(assert (=> bs!2568 m!51261))

(assert (=> bs!2568 m!51261))

(declare-fun m!51263 () Bool)

(assert (=> bs!2568 m!51263))

(assert (=> b!58901 d!11345))

(declare-fun d!11347 () Bool)

(assert (=> d!11347 (= (apply!66 (+!81 lt!23725 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) lt!23738) (apply!66 lt!23725 lt!23738))))

(declare-fun lt!24125 () Unit!1551)

(assert (=> d!11347 (= lt!24125 (choose!307 lt!23725 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992))) lt!23738))))

(declare-fun e!39041 () Bool)

(assert (=> d!11347 e!39041))

(declare-fun res!32965 () Bool)

(assert (=> d!11347 (=> (not res!32965) (not e!39041))))

(assert (=> d!11347 (= res!32965 (contains!682 lt!23725 lt!23738))))

(assert (=> d!11347 (= (addApplyDifferent!42 lt!23725 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992))) lt!23738) lt!24125)))

(declare-fun b!59366 () Bool)

(assert (=> b!59366 (= e!39041 (not (= lt!23738 lt!23733)))))

(assert (= (and d!11347 res!32965) b!59366))

(assert (=> d!11347 m!50649))

(assert (=> d!11347 m!50655))

(assert (=> d!11347 m!50673))

(declare-fun m!51265 () Bool)

(assert (=> d!11347 m!51265))

(assert (=> d!11347 m!50655))

(declare-fun m!51267 () Bool)

(assert (=> d!11347 m!51267))

(assert (=> b!58901 d!11347))

(declare-fun d!11349 () Bool)

(assert (=> d!11349 (= (apply!66 lt!23725 lt!23738) (get!1069 (getValueByKey!124 (toList!697 lt!23725) lt!23738)))))

(declare-fun bs!2569 () Bool)

(assert (= bs!2569 d!11349))

(declare-fun m!51269 () Bool)

(assert (=> bs!2569 m!51269))

(assert (=> bs!2569 m!51269))

(declare-fun m!51271 () Bool)

(assert (=> bs!2569 m!51271))

(assert (=> b!58901 d!11349))

(assert (=> bm!4388 d!11309))

(declare-fun bm!4448 () Bool)

(declare-fun call!4451 () Bool)

(declare-fun c!7587 () Bool)

(assert (=> bm!4448 (= call!4451 (arrayNoDuplicates!0 (_keys!3667 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!7587 (Cons!1427 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000) Nil!1428) Nil!1428)))))

(declare-fun b!59367 () Bool)

(declare-fun e!39044 () Bool)

(assert (=> b!59367 (= e!39044 (contains!683 Nil!1428 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59368 () Bool)

(declare-fun e!39043 () Bool)

(assert (=> b!59368 (= e!39043 call!4451)))

(declare-fun b!59369 () Bool)

(assert (=> b!59369 (= e!39043 call!4451)))

(declare-fun b!59370 () Bool)

(declare-fun e!39045 () Bool)

(assert (=> b!59370 (= e!39045 e!39043)))

(assert (=> b!59370 (= c!7587 (validKeyInArray!0 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun d!11351 () Bool)

(declare-fun res!32968 () Bool)

(declare-fun e!39042 () Bool)

(assert (=> d!11351 (=> res!32968 e!39042)))

(assert (=> d!11351 (= res!32968 (bvsge #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(assert (=> d!11351 (= (arrayNoDuplicates!0 (_keys!3667 newMap!16) #b00000000000000000000000000000000 Nil!1428) e!39042)))

(declare-fun b!59371 () Bool)

(assert (=> b!59371 (= e!39042 e!39045)))

(declare-fun res!32967 () Bool)

(assert (=> b!59371 (=> (not res!32967) (not e!39045))))

(assert (=> b!59371 (= res!32967 (not e!39044))))

(declare-fun res!32966 () Bool)

(assert (=> b!59371 (=> (not res!32966) (not e!39044))))

(assert (=> b!59371 (= res!32966 (validKeyInArray!0 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!11351 (not res!32968)) b!59371))

(assert (= (and b!59371 res!32966) b!59367))

(assert (= (and b!59371 res!32967) b!59370))

(assert (= (and b!59370 c!7587) b!59368))

(assert (= (and b!59370 (not c!7587)) b!59369))

(assert (= (or b!59368 b!59369) bm!4448))

(assert (=> bm!4448 m!50803))

(declare-fun m!51273 () Bool)

(assert (=> bm!4448 m!51273))

(assert (=> b!59367 m!50803))

(assert (=> b!59367 m!50803))

(declare-fun m!51275 () Bool)

(assert (=> b!59367 m!51275))

(assert (=> b!59370 m!50803))

(assert (=> b!59370 m!50803))

(assert (=> b!59370 m!50805))

(assert (=> b!59371 m!50803))

(assert (=> b!59371 m!50803))

(assert (=> b!59371 m!50805))

(assert (=> b!59049 d!11351))

(declare-fun call!4454 () ListLongMap!1363)

(declare-fun call!4455 () ListLongMap!1363)

(declare-fun c!7593 () Bool)

(declare-fun call!4458 () ListLongMap!1363)

(declare-fun bm!4449 () Bool)

(declare-fun call!4457 () ListLongMap!1363)

(declare-fun c!7590 () Bool)

(assert (=> bm!4449 (= call!4455 (+!81 (ite c!7590 call!4454 (ite c!7593 call!4457 call!4458)) (ite (or c!7590 c!7593) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))))))

(declare-fun b!59372 () Bool)

(declare-fun e!39046 () ListLongMap!1363)

(declare-fun call!4452 () ListLongMap!1363)

(assert (=> b!59372 (= e!39046 call!4452)))

(declare-fun b!59373 () Bool)

(declare-fun c!7592 () Bool)

(assert (=> b!59373 (= c!7592 (and (not (= (bvand (ite (and c!7503 c!7507) lt!23829 (extraKeys!1930 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite (and c!7503 c!7507) lt!23829 (extraKeys!1930 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!39050 () ListLongMap!1363)

(assert (=> b!59373 (= e!39050 e!39046)))

(declare-fun b!59374 () Bool)

(declare-fun e!39053 () Bool)

(declare-fun call!4456 () Bool)

(assert (=> b!59374 (= e!39053 (not call!4456))))

(declare-fun b!59376 () Bool)

(declare-fun e!39052 () Bool)

(assert (=> b!59376 (= e!39052 (validKeyInArray!0 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59377 () Bool)

(declare-fun e!39056 () Bool)

(assert (=> b!59377 (= e!39053 e!39056)))

(declare-fun res!32977 () Bool)

(assert (=> b!59377 (= res!32977 call!4456)))

(assert (=> b!59377 (=> (not res!32977) (not e!39056))))

(declare-fun b!59378 () Bool)

(declare-fun e!39058 () Bool)

(assert (=> b!59378 (= e!39058 e!39053)))

(declare-fun c!7591 () Bool)

(assert (=> b!59378 (= c!7591 (not (= (bvand (ite (and c!7503 c!7507) lt!23829 (extraKeys!1930 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!59379 () Bool)

(declare-fun e!39054 () Bool)

(declare-fun call!4453 () Bool)

(assert (=> b!59379 (= e!39054 (not call!4453))))

(declare-fun b!59380 () Bool)

(declare-fun lt!24144 () ListLongMap!1363)

(declare-fun e!39047 () Bool)

(assert (=> b!59380 (= e!39047 (= (apply!66 lt!24144 #b0000000000000000000000000000000000000000000000000000000000000000) (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16))))))

(declare-fun b!59381 () Bool)

(declare-fun e!39048 () ListLongMap!1363)

(assert (=> b!59381 (= e!39048 e!39050)))

(assert (=> b!59381 (= c!7593 (and (not (= (bvand (ite (and c!7503 c!7507) lt!23829 (extraKeys!1930 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite (and c!7503 c!7507) lt!23829 (extraKeys!1930 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!59382 () Bool)

(declare-fun e!39055 () Unit!1551)

(declare-fun Unit!1571 () Unit!1551)

(assert (=> b!59382 (= e!39055 Unit!1571)))

(declare-fun bm!4450 () Bool)

(assert (=> bm!4450 (= call!4453 (contains!682 lt!24144 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59383 () Bool)

(declare-fun res!32969 () Bool)

(assert (=> b!59383 (=> (not res!32969) (not e!39058))))

(declare-fun e!39049 () Bool)

(assert (=> b!59383 (= res!32969 e!39049)))

(declare-fun res!32970 () Bool)

(assert (=> b!59383 (=> res!32970 e!39049)))

(declare-fun e!39057 () Bool)

(assert (=> b!59383 (= res!32970 (not e!39057))))

(declare-fun res!32972 () Bool)

(assert (=> b!59383 (=> (not res!32972) (not e!39057))))

(assert (=> b!59383 (= res!32972 (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(declare-fun b!59375 () Bool)

(assert (=> b!59375 (= e!39048 (+!81 call!4455 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))))))

(declare-fun d!11353 () Bool)

(assert (=> d!11353 e!39058))

(declare-fun res!32976 () Bool)

(assert (=> d!11353 (=> (not res!32976) (not e!39058))))

(assert (=> d!11353 (= res!32976 (or (bvsge #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))))

(declare-fun lt!24129 () ListLongMap!1363)

(assert (=> d!11353 (= lt!24144 lt!24129)))

(declare-fun lt!24132 () Unit!1551)

(assert (=> d!11353 (= lt!24132 e!39055)))

(declare-fun c!7588 () Bool)

(assert (=> d!11353 (= c!7588 e!39052)))

(declare-fun res!32973 () Bool)

(assert (=> d!11353 (=> (not res!32973) (not e!39052))))

(assert (=> d!11353 (= res!32973 (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(assert (=> d!11353 (= lt!24129 e!39048)))

(assert (=> d!11353 (= c!7590 (and (not (= (bvand (ite (and c!7503 c!7507) lt!23829 (extraKeys!1930 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite (and c!7503 c!7507) lt!23829 (extraKeys!1930 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11353 (validMask!0 (mask!5927 newMap!16))))

(assert (=> d!11353 (= (getCurrentListMap!402 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (ite (and c!7503 c!7507) lt!23829 (extraKeys!1930 newMap!16)) (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16)) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)) lt!24144)))

(declare-fun bm!4451 () Bool)

(assert (=> bm!4451 (= call!4458 call!4457)))

(declare-fun b!59384 () Bool)

(assert (=> b!59384 (= e!39057 (validKeyInArray!0 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59385 () Bool)

(assert (=> b!59385 (= e!39054 e!39047)))

(declare-fun res!32975 () Bool)

(assert (=> b!59385 (= res!32975 call!4453)))

(assert (=> b!59385 (=> (not res!32975) (not e!39047))))

(declare-fun bm!4452 () Bool)

(assert (=> bm!4452 (= call!4457 call!4454)))

(declare-fun b!59386 () Bool)

(assert (=> b!59386 (= e!39046 call!4458)))

(declare-fun bm!4453 () Bool)

(assert (=> bm!4453 (= call!4452 call!4455)))

(declare-fun bm!4454 () Bool)

(assert (=> bm!4454 (= call!4454 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (ite (and c!7503 c!7507) lt!23829 (extraKeys!1930 newMap!16)) (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16)) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun b!59387 () Bool)

(declare-fun e!39051 () Bool)

(assert (=> b!59387 (= e!39051 (= (apply!66 lt!24144 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)) (get!1066 (select (arr!1782 (_values!2026 newMap!16)) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2043 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!59387 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2012 (_values!2026 newMap!16))))))

(assert (=> b!59387 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(declare-fun b!59388 () Bool)

(declare-fun lt!24140 () Unit!1551)

(assert (=> b!59388 (= e!39055 lt!24140)))

(declare-fun lt!24133 () ListLongMap!1363)

(assert (=> b!59388 (= lt!24133 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (ite (and c!7503 c!7507) lt!23829 (extraKeys!1930 newMap!16)) (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16)) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!24128 () (_ BitVec 64))

(assert (=> b!59388 (= lt!24128 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24126 () (_ BitVec 64))

(assert (=> b!59388 (= lt!24126 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24141 () Unit!1551)

(assert (=> b!59388 (= lt!24141 (addStillContains!42 lt!24133 lt!24128 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16)) lt!24126))))

(assert (=> b!59388 (contains!682 (+!81 lt!24133 (tuple2!2023 lt!24128 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16)))) lt!24126)))

(declare-fun lt!24147 () Unit!1551)

(assert (=> b!59388 (= lt!24147 lt!24141)))

(declare-fun lt!24130 () ListLongMap!1363)

(assert (=> b!59388 (= lt!24130 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (ite (and c!7503 c!7507) lt!23829 (extraKeys!1930 newMap!16)) (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16)) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!24138 () (_ BitVec 64))

(assert (=> b!59388 (= lt!24138 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24143 () (_ BitVec 64))

(assert (=> b!59388 (= lt!24143 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24136 () Unit!1551)

(assert (=> b!59388 (= lt!24136 (addApplyDifferent!42 lt!24130 lt!24138 (minValue!1959 newMap!16) lt!24143))))

(assert (=> b!59388 (= (apply!66 (+!81 lt!24130 (tuple2!2023 lt!24138 (minValue!1959 newMap!16))) lt!24143) (apply!66 lt!24130 lt!24143))))

(declare-fun lt!24142 () Unit!1551)

(assert (=> b!59388 (= lt!24142 lt!24136)))

(declare-fun lt!24131 () ListLongMap!1363)

(assert (=> b!59388 (= lt!24131 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (ite (and c!7503 c!7507) lt!23829 (extraKeys!1930 newMap!16)) (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16)) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!24139 () (_ BitVec 64))

(assert (=> b!59388 (= lt!24139 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24127 () (_ BitVec 64))

(assert (=> b!59388 (= lt!24127 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24145 () Unit!1551)

(assert (=> b!59388 (= lt!24145 (addApplyDifferent!42 lt!24131 lt!24139 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16)) lt!24127))))

(assert (=> b!59388 (= (apply!66 (+!81 lt!24131 (tuple2!2023 lt!24139 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16)))) lt!24127) (apply!66 lt!24131 lt!24127))))

(declare-fun lt!24134 () Unit!1551)

(assert (=> b!59388 (= lt!24134 lt!24145)))

(declare-fun lt!24137 () ListLongMap!1363)

(assert (=> b!59388 (= lt!24137 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (ite (and c!7503 c!7507) lt!23829 (extraKeys!1930 newMap!16)) (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16)) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!24135 () (_ BitVec 64))

(assert (=> b!59388 (= lt!24135 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24146 () (_ BitVec 64))

(assert (=> b!59388 (= lt!24146 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!59388 (= lt!24140 (addApplyDifferent!42 lt!24137 lt!24135 (minValue!1959 newMap!16) lt!24146))))

(assert (=> b!59388 (= (apply!66 (+!81 lt!24137 (tuple2!2023 lt!24135 (minValue!1959 newMap!16))) lt!24146) (apply!66 lt!24137 lt!24146))))

(declare-fun b!59389 () Bool)

(assert (=> b!59389 (= e!39049 e!39051)))

(declare-fun res!32971 () Bool)

(assert (=> b!59389 (=> (not res!32971) (not e!39051))))

(assert (=> b!59389 (= res!32971 (contains!682 lt!24144 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59389 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(declare-fun b!59390 () Bool)

(declare-fun res!32974 () Bool)

(assert (=> b!59390 (=> (not res!32974) (not e!39058))))

(assert (=> b!59390 (= res!32974 e!39054)))

(declare-fun c!7589 () Bool)

(assert (=> b!59390 (= c!7589 (not (= (bvand (ite (and c!7503 c!7507) lt!23829 (extraKeys!1930 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!4455 () Bool)

(assert (=> bm!4455 (= call!4456 (contains!682 lt!24144 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59391 () Bool)

(assert (=> b!59391 (= e!39050 call!4452)))

(declare-fun b!59392 () Bool)

(assert (=> b!59392 (= e!39056 (= (apply!66 lt!24144 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1959 newMap!16)))))

(assert (= (and d!11353 c!7590) b!59375))

(assert (= (and d!11353 (not c!7590)) b!59381))

(assert (= (and b!59381 c!7593) b!59391))

(assert (= (and b!59381 (not c!7593)) b!59373))

(assert (= (and b!59373 c!7592) b!59372))

(assert (= (and b!59373 (not c!7592)) b!59386))

(assert (= (or b!59372 b!59386) bm!4451))

(assert (= (or b!59391 bm!4451) bm!4452))

(assert (= (or b!59391 b!59372) bm!4453))

(assert (= (or b!59375 bm!4452) bm!4454))

(assert (= (or b!59375 bm!4453) bm!4449))

(assert (= (and d!11353 res!32973) b!59376))

(assert (= (and d!11353 c!7588) b!59388))

(assert (= (and d!11353 (not c!7588)) b!59382))

(assert (= (and d!11353 res!32976) b!59383))

(assert (= (and b!59383 res!32972) b!59384))

(assert (= (and b!59383 (not res!32970)) b!59389))

(assert (= (and b!59389 res!32971) b!59387))

(assert (= (and b!59383 res!32969) b!59390))

(assert (= (and b!59390 c!7589) b!59385))

(assert (= (and b!59390 (not c!7589)) b!59379))

(assert (= (and b!59385 res!32975) b!59380))

(assert (= (or b!59385 b!59379) bm!4450))

(assert (= (and b!59390 res!32974) b!59378))

(assert (= (and b!59378 c!7591) b!59377))

(assert (= (and b!59378 (not c!7591)) b!59374))

(assert (= (and b!59377 res!32977) b!59392))

(assert (= (or b!59377 b!59374) bm!4455))

(declare-fun b_lambda!2601 () Bool)

(assert (=> (not b_lambda!2601) (not b!59387)))

(assert (=> b!59387 t!4775))

(declare-fun b_and!3591 () Bool)

(assert (= b_and!3587 (and (=> t!4775 result!2381) b_and!3591)))

(assert (=> b!59387 t!4777))

(declare-fun b_and!3593 () Bool)

(assert (= b_and!3589 (and (=> t!4777 result!2383) b_and!3593)))

(declare-fun m!51277 () Bool)

(assert (=> b!59375 m!51277))

(declare-fun m!51279 () Bool)

(assert (=> bm!4454 m!51279))

(declare-fun m!51281 () Bool)

(assert (=> bm!4449 m!51281))

(declare-fun m!51283 () Bool)

(assert (=> b!59380 m!51283))

(assert (=> b!59384 m!50803))

(assert (=> b!59384 m!50803))

(assert (=> b!59384 m!50805))

(declare-fun m!51285 () Bool)

(assert (=> bm!4450 m!51285))

(assert (=> b!59387 m!51033))

(assert (=> b!59387 m!50803))

(declare-fun m!51287 () Bool)

(assert (=> b!59387 m!51287))

(assert (=> b!59387 m!50813))

(assert (=> b!59387 m!51033))

(assert (=> b!59387 m!50813))

(assert (=> b!59387 m!51037))

(assert (=> b!59387 m!50803))

(declare-fun m!51289 () Bool)

(assert (=> b!59392 m!51289))

(assert (=> b!59389 m!50803))

(assert (=> b!59389 m!50803))

(declare-fun m!51291 () Bool)

(assert (=> b!59389 m!51291))

(assert (=> b!59376 m!50803))

(assert (=> b!59376 m!50803))

(assert (=> b!59376 m!50805))

(assert (=> d!11353 m!50771))

(declare-fun m!51293 () Bool)

(assert (=> bm!4455 m!51293))

(declare-fun m!51295 () Bool)

(assert (=> b!59388 m!51295))

(declare-fun m!51297 () Bool)

(assert (=> b!59388 m!51297))

(declare-fun m!51299 () Bool)

(assert (=> b!59388 m!51299))

(declare-fun m!51301 () Bool)

(assert (=> b!59388 m!51301))

(assert (=> b!59388 m!51295))

(declare-fun m!51303 () Bool)

(assert (=> b!59388 m!51303))

(declare-fun m!51305 () Bool)

(assert (=> b!59388 m!51305))

(declare-fun m!51307 () Bool)

(assert (=> b!59388 m!51307))

(assert (=> b!59388 m!51279))

(declare-fun m!51309 () Bool)

(assert (=> b!59388 m!51309))

(declare-fun m!51311 () Bool)

(assert (=> b!59388 m!51311))

(declare-fun m!51313 () Bool)

(assert (=> b!59388 m!51313))

(assert (=> b!59388 m!50803))

(declare-fun m!51315 () Bool)

(assert (=> b!59388 m!51315))

(declare-fun m!51317 () Bool)

(assert (=> b!59388 m!51317))

(declare-fun m!51319 () Bool)

(assert (=> b!59388 m!51319))

(assert (=> b!59388 m!51309))

(declare-fun m!51321 () Bool)

(assert (=> b!59388 m!51321))

(assert (=> b!59388 m!51305))

(declare-fun m!51323 () Bool)

(assert (=> b!59388 m!51323))

(assert (=> b!59388 m!51315))

(assert (=> bm!4395 d!11353))

(declare-fun call!4459 () Bool)

(declare-fun c!7594 () Bool)

(declare-fun bm!4456 () Bool)

(assert (=> bm!4456 (= call!4459 (arrayNoDuplicates!0 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!7594 (Cons!1427 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7516 (Cons!1427 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) Nil!1428) Nil!1428)) (ite c!7516 (Cons!1427 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) Nil!1428) Nil!1428))))))

(declare-fun e!39061 () Bool)

(declare-fun b!59393 () Bool)

(assert (=> b!59393 (= e!39061 (contains!683 (ite c!7516 (Cons!1427 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) Nil!1428) Nil!1428) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!59394 () Bool)

(declare-fun e!39060 () Bool)

(assert (=> b!59394 (= e!39060 call!4459)))

(declare-fun b!59395 () Bool)

(assert (=> b!59395 (= e!39060 call!4459)))

(declare-fun b!59396 () Bool)

(declare-fun e!39062 () Bool)

(assert (=> b!59396 (= e!39062 e!39060)))

(assert (=> b!59396 (= c!7594 (validKeyInArray!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun d!11355 () Bool)

(declare-fun res!32980 () Bool)

(declare-fun e!39059 () Bool)

(assert (=> d!11355 (=> res!32980 e!39059)))

(assert (=> d!11355 (= res!32980 (bvsge (bvadd from!355 #b00000000000000000000000000000001) (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992))))))))

(assert (=> d!11355 (= (arrayNoDuplicates!0 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!7516 (Cons!1427 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) Nil!1428) Nil!1428)) e!39059)))

(declare-fun b!59397 () Bool)

(assert (=> b!59397 (= e!39059 e!39062)))

(declare-fun res!32979 () Bool)

(assert (=> b!59397 (=> (not res!32979) (not e!39062))))

(assert (=> b!59397 (= res!32979 (not e!39061))))

(declare-fun res!32978 () Bool)

(assert (=> b!59397 (=> (not res!32978) (not e!39061))))

(assert (=> b!59397 (= res!32978 (validKeyInArray!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(assert (= (and d!11355 (not res!32980)) b!59397))

(assert (= (and b!59397 res!32978) b!59393))

(assert (= (and b!59397 res!32979) b!59396))

(assert (= (and b!59396 c!7594) b!59394))

(assert (= (and b!59396 (not c!7594)) b!59395))

(assert (= (or b!59394 b!59395) bm!4456))

(declare-fun m!51325 () Bool)

(assert (=> bm!4456 m!51325))

(declare-fun m!51327 () Bool)

(assert (=> bm!4456 m!51327))

(assert (=> b!59393 m!51325))

(assert (=> b!59393 m!51325))

(declare-fun m!51329 () Bool)

(assert (=> b!59393 m!51329))

(assert (=> b!59396 m!51325))

(assert (=> b!59396 m!51325))

(declare-fun m!51331 () Bool)

(assert (=> b!59396 m!51331))

(assert (=> b!59397 m!51325))

(assert (=> b!59397 m!51325))

(assert (=> b!59397 m!51331))

(assert (=> bm!4408 d!11355))

(declare-fun b!59406 () Bool)

(declare-fun e!39068 () (_ BitVec 32))

(declare-fun call!4462 () (_ BitVec 32))

(assert (=> b!59406 (= e!39068 (bvadd #b00000000000000000000000000000001 call!4462))))

(declare-fun bm!4459 () Bool)

(assert (=> bm!4459 (= call!4462 (arrayCountValidKeys!0 (_keys!3667 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2011 (_keys!3667 newMap!16))))))

(declare-fun b!59407 () Bool)

(declare-fun e!39067 () (_ BitVec 32))

(assert (=> b!59407 (= e!39067 e!39068)))

(declare-fun c!7600 () Bool)

(assert (=> b!59407 (= c!7600 (validKeyInArray!0 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59408 () Bool)

(assert (=> b!59408 (= e!39067 #b00000000000000000000000000000000)))

(declare-fun b!59409 () Bool)

(assert (=> b!59409 (= e!39068 call!4462)))

(declare-fun d!11357 () Bool)

(declare-fun lt!24150 () (_ BitVec 32))

(assert (=> d!11357 (and (bvsge lt!24150 #b00000000000000000000000000000000) (bvsle lt!24150 (bvsub (size!2011 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!11357 (= lt!24150 e!39067)))

(declare-fun c!7599 () Bool)

(assert (=> d!11357 (= c!7599 (bvsge #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(assert (=> d!11357 (and (bvsle #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2011 (_keys!3667 newMap!16)) (size!2011 (_keys!3667 newMap!16))))))

(assert (=> d!11357 (= (arrayCountValidKeys!0 (_keys!3667 newMap!16) #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))) lt!24150)))

(assert (= (and d!11357 c!7599) b!59408))

(assert (= (and d!11357 (not c!7599)) b!59407))

(assert (= (and b!59407 c!7600) b!59406))

(assert (= (and b!59407 (not c!7600)) b!59409))

(assert (= (or b!59406 b!59409) bm!4459))

(declare-fun m!51333 () Bool)

(assert (=> bm!4459 m!51333))

(assert (=> b!59407 m!50803))

(assert (=> b!59407 m!50803))

(assert (=> b!59407 m!50805))

(assert (=> b!59047 d!11357))

(declare-fun d!11359 () Bool)

(declare-fun e!39069 () Bool)

(assert (=> d!11359 e!39069))

(declare-fun res!32981 () Bool)

(assert (=> d!11359 (=> res!32981 e!39069)))

(declare-fun lt!24153 () Bool)

(assert (=> d!11359 (= res!32981 (not lt!24153))))

(declare-fun lt!24152 () Bool)

(assert (=> d!11359 (= lt!24153 lt!24152)))

(declare-fun lt!24154 () Unit!1551)

(declare-fun e!39070 () Unit!1551)

(assert (=> d!11359 (= lt!24154 e!39070)))

(declare-fun c!7601 () Bool)

(assert (=> d!11359 (= c!7601 lt!24152)))

(assert (=> d!11359 (= lt!24152 (containsKey!128 (toList!697 e!38829) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(assert (=> d!11359 (= (contains!682 e!38829 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) lt!24153)))

(declare-fun b!59410 () Bool)

(declare-fun lt!24151 () Unit!1551)

(assert (=> b!59410 (= e!39070 lt!24151)))

(assert (=> b!59410 (= lt!24151 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 e!38829) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(assert (=> b!59410 (isDefined!77 (getValueByKey!124 (toList!697 e!38829) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(declare-fun b!59411 () Bool)

(declare-fun Unit!1572 () Unit!1551)

(assert (=> b!59411 (= e!39070 Unit!1572)))

(declare-fun b!59412 () Bool)

(assert (=> b!59412 (= e!39069 (isDefined!77 (getValueByKey!124 (toList!697 e!38829) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355))))))

(assert (= (and d!11359 c!7601) b!59410))

(assert (= (and d!11359 (not c!7601)) b!59411))

(assert (= (and d!11359 (not res!32981)) b!59412))

(assert (=> d!11359 m!50529))

(declare-fun m!51335 () Bool)

(assert (=> d!11359 m!51335))

(assert (=> b!59410 m!50529))

(declare-fun m!51337 () Bool)

(assert (=> b!59410 m!51337))

(assert (=> b!59410 m!50529))

(declare-fun m!51339 () Bool)

(assert (=> b!59410 m!51339))

(assert (=> b!59410 m!51339))

(declare-fun m!51341 () Bool)

(assert (=> b!59410 m!51341))

(assert (=> b!59412 m!50529))

(assert (=> b!59412 m!51339))

(assert (=> b!59412 m!51339))

(assert (=> b!59412 m!51341))

(assert (=> bm!4394 d!11359))

(assert (=> b!58889 d!11263))

(declare-fun d!11361 () Bool)

(declare-fun e!39071 () Bool)

(assert (=> d!11361 e!39071))

(declare-fun res!32982 () Bool)

(assert (=> d!11361 (=> (not res!32982) (not e!39071))))

(declare-fun lt!24156 () ListLongMap!1363)

(assert (=> d!11361 (= res!32982 (contains!682 lt!24156 (_1!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!24158 () List!1430)

(assert (=> d!11361 (= lt!24156 (ListLongMap!1364 lt!24158))))

(declare-fun lt!24155 () Unit!1551)

(declare-fun lt!24157 () Unit!1551)

(assert (=> d!11361 (= lt!24155 lt!24157)))

(assert (=> d!11361 (= (getValueByKey!124 lt!24158 (_1!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!129 (_2!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!11361 (= lt!24157 (lemmaContainsTupThenGetReturnValue!41 lt!24158 (_1!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!11361 (= lt!24158 (insertStrictlySorted!44 (toList!697 (ite c!7503 (ite c!7507 call!4395 call!4385) call!4406)) (_1!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!11361 (= (+!81 (ite c!7503 (ite c!7507 call!4395 call!4385) call!4406) (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!24156)))

(declare-fun b!59413 () Bool)

(declare-fun res!32983 () Bool)

(assert (=> b!59413 (=> (not res!32983) (not e!39071))))

(assert (=> b!59413 (= res!32983 (= (getValueByKey!124 (toList!697 lt!24156) (_1!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!129 (_2!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!59414 () Bool)

(assert (=> b!59414 (= e!39071 (contains!684 (toList!697 lt!24156) (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!11361 res!32982) b!59413))

(assert (= (and b!59413 res!32983) b!59414))

(declare-fun m!51343 () Bool)

(assert (=> d!11361 m!51343))

(declare-fun m!51345 () Bool)

(assert (=> d!11361 m!51345))

(declare-fun m!51347 () Bool)

(assert (=> d!11361 m!51347))

(declare-fun m!51349 () Bool)

(assert (=> d!11361 m!51349))

(declare-fun m!51351 () Bool)

(assert (=> b!59413 m!51351))

(declare-fun m!51353 () Bool)

(assert (=> b!59414 m!51353))

(assert (=> bm!4405 d!11361))

(declare-fun d!11363 () Bool)

(declare-fun res!32988 () Bool)

(declare-fun e!39076 () Bool)

(assert (=> d!11363 (=> res!32988 e!39076)))

(assert (=> d!11363 (= res!32988 (and ((_ is Cons!1426) (toList!697 lt!23655)) (= (_1!1022 (h!2007 (toList!697 lt!23655))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355))))))

(assert (=> d!11363 (= (containsKey!128 (toList!697 lt!23655) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) e!39076)))

(declare-fun b!59419 () Bool)

(declare-fun e!39077 () Bool)

(assert (=> b!59419 (= e!39076 e!39077)))

(declare-fun res!32989 () Bool)

(assert (=> b!59419 (=> (not res!32989) (not e!39077))))

(assert (=> b!59419 (= res!32989 (and (or (not ((_ is Cons!1426) (toList!697 lt!23655))) (bvsle (_1!1022 (h!2007 (toList!697 lt!23655))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355))) ((_ is Cons!1426) (toList!697 lt!23655)) (bvslt (_1!1022 (h!2007 (toList!697 lt!23655))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355))))))

(declare-fun b!59420 () Bool)

(assert (=> b!59420 (= e!39077 (containsKey!128 (t!4768 (toList!697 lt!23655)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(assert (= (and d!11363 (not res!32988)) b!59419))

(assert (= (and b!59419 res!32989) b!59420))

(assert (=> b!59420 m!50529))

(declare-fun m!51355 () Bool)

(assert (=> b!59420 m!51355))

(assert (=> d!11213 d!11363))

(declare-fun d!11365 () Bool)

(declare-fun e!39080 () Bool)

(assert (=> d!11365 e!39080))

(declare-fun res!32994 () Bool)

(assert (=> d!11365 (=> (not res!32994) (not e!39080))))

(declare-fun lt!24164 () SeekEntryResult!227)

(assert (=> d!11365 (= res!32994 ((_ is Found!227) lt!24164))))

(assert (=> d!11365 (= lt!24164 (seekEntryOrOpen!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (_keys!3667 newMap!16) (mask!5927 newMap!16)))))

(declare-fun lt!24163 () Unit!1551)

(declare-fun choose!309 (array!3721 array!3723 (_ BitVec 32) (_ BitVec 32) V!2843 V!2843 (_ BitVec 64) Int) Unit!1551)

(assert (=> d!11365 (= lt!24163 (choose!309 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (defaultEntry!2043 newMap!16)))))

(assert (=> d!11365 (validMask!0 (mask!5927 newMap!16))))

(assert (=> d!11365 (= (lemmaInListMapThenSeekEntryOrOpenFindsIt!15 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (defaultEntry!2043 newMap!16)) lt!24163)))

(declare-fun b!59425 () Bool)

(declare-fun res!32995 () Bool)

(assert (=> b!59425 (=> (not res!32995) (not e!39080))))

(assert (=> b!59425 (= res!32995 (inRange!0 (index!3032 lt!24164) (mask!5927 newMap!16)))))

(declare-fun b!59426 () Bool)

(assert (=> b!59426 (= e!39080 (= (select (arr!1781 (_keys!3667 newMap!16)) (index!3032 lt!24164)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(assert (=> b!59426 (and (bvsge (index!3032 lt!24164) #b00000000000000000000000000000000) (bvslt (index!3032 lt!24164) (size!2011 (_keys!3667 newMap!16))))))

(assert (= (and d!11365 res!32994) b!59425))

(assert (= (and b!59425 res!32995) b!59426))

(assert (=> d!11365 m!50529))

(assert (=> d!11365 m!50713))

(assert (=> d!11365 m!50529))

(declare-fun m!51357 () Bool)

(assert (=> d!11365 m!51357))

(assert (=> d!11365 m!50771))

(declare-fun m!51359 () Bool)

(assert (=> b!59425 m!51359))

(declare-fun m!51361 () Bool)

(assert (=> b!59426 m!51361))

(assert (=> bm!4386 d!11365))

(declare-fun d!11367 () Bool)

(assert (=> d!11367 (= (inRange!0 (ite c!7502 (ite c!7506 (index!3032 lt!23833) (ite c!7505 (index!3031 lt!23811) (index!3034 lt!23811))) (ite c!7496 (index!3032 lt!23822) (ite c!7499 (index!3031 lt!23818) (index!3034 lt!23818)))) (mask!5927 newMap!16)) (and (bvsge (ite c!7502 (ite c!7506 (index!3032 lt!23833) (ite c!7505 (index!3031 lt!23811) (index!3034 lt!23811))) (ite c!7496 (index!3032 lt!23822) (ite c!7499 (index!3031 lt!23818) (index!3034 lt!23818)))) #b00000000000000000000000000000000) (bvslt (ite c!7502 (ite c!7506 (index!3032 lt!23833) (ite c!7505 (index!3031 lt!23811) (index!3034 lt!23811))) (ite c!7496 (index!3032 lt!23822) (ite c!7499 (index!3031 lt!23818) (index!3034 lt!23818)))) (bvadd (mask!5927 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4391 d!11367))

(declare-fun d!11369 () Bool)

(assert (=> d!11369 (= (apply!66 lt!23739 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1069 (getValueByKey!124 (toList!697 lt!23739) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2570 () Bool)

(assert (= bs!2570 d!11369))

(assert (=> bs!2570 m!51093))

(assert (=> bs!2570 m!51093))

(declare-fun m!51363 () Bool)

(assert (=> bs!2570 m!51363))

(assert (=> b!58893 d!11369))

(declare-fun b!59443 () Bool)

(declare-fun e!39090 () Bool)

(declare-fun call!4467 () Bool)

(assert (=> b!59443 (= e!39090 (not call!4467))))

(declare-fun b!59444 () Bool)

(declare-fun lt!24169 () SeekEntryResult!227)

(assert (=> b!59444 (and (bvsge (index!3031 lt!24169) #b00000000000000000000000000000000) (bvslt (index!3031 lt!24169) (size!2011 (_keys!3667 newMap!16))))))

(declare-fun res!33006 () Bool)

(assert (=> b!59444 (= res!33006 (= (select (arr!1781 (_keys!3667 newMap!16)) (index!3031 lt!24169)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!39089 () Bool)

(assert (=> b!59444 (=> (not res!33006) (not e!39089))))

(declare-fun b!59445 () Bool)

(assert (=> b!59445 (= e!39089 (not call!4467))))

(declare-fun bm!4464 () Bool)

(assert (=> bm!4464 (= call!4467 (arrayContainsKey!0 (_keys!3667 newMap!16) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun call!4468 () Bool)

(declare-fun bm!4465 () Bool)

(declare-fun c!7606 () Bool)

(assert (=> bm!4465 (= call!4468 (inRange!0 (ite c!7606 (index!3031 lt!24169) (index!3034 lt!24169)) (mask!5927 newMap!16)))))

(declare-fun b!59447 () Bool)

(declare-fun e!39092 () Bool)

(declare-fun e!39091 () Bool)

(assert (=> b!59447 (= e!39092 e!39091)))

(declare-fun c!7607 () Bool)

(assert (=> b!59447 (= c!7607 ((_ is MissingVacant!227) lt!24169))))

(declare-fun b!59448 () Bool)

(assert (=> b!59448 (= e!39092 e!39089)))

(declare-fun res!33007 () Bool)

(assert (=> b!59448 (= res!33007 call!4468)))

(assert (=> b!59448 (=> (not res!33007) (not e!39089))))

(declare-fun d!11371 () Bool)

(assert (=> d!11371 e!39092))

(assert (=> d!11371 (= c!7606 ((_ is MissingZero!227) lt!24169))))

(assert (=> d!11371 (= lt!24169 (seekEntryOrOpen!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (_keys!3667 newMap!16) (mask!5927 newMap!16)))))

(declare-fun lt!24170 () Unit!1551)

(declare-fun choose!310 (array!3721 array!3723 (_ BitVec 32) (_ BitVec 32) V!2843 V!2843 (_ BitVec 64) Int) Unit!1551)

(assert (=> d!11371 (= lt!24170 (choose!310 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (defaultEntry!2043 newMap!16)))))

(assert (=> d!11371 (validMask!0 (mask!5927 newMap!16))))

(assert (=> d!11371 (= (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!15 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (defaultEntry!2043 newMap!16)) lt!24170)))

(declare-fun b!59446 () Bool)

(declare-fun res!33005 () Bool)

(assert (=> b!59446 (=> (not res!33005) (not e!39090))))

(assert (=> b!59446 (= res!33005 (= (select (arr!1781 (_keys!3667 newMap!16)) (index!3034 lt!24169)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59446 (and (bvsge (index!3034 lt!24169) #b00000000000000000000000000000000) (bvslt (index!3034 lt!24169) (size!2011 (_keys!3667 newMap!16))))))

(declare-fun b!59449 () Bool)

(declare-fun res!33004 () Bool)

(assert (=> b!59449 (=> (not res!33004) (not e!39090))))

(assert (=> b!59449 (= res!33004 call!4468)))

(assert (=> b!59449 (= e!39091 e!39090)))

(declare-fun b!59450 () Bool)

(assert (=> b!59450 (= e!39091 ((_ is Undefined!227) lt!24169))))

(assert (= (and d!11371 c!7606) b!59448))

(assert (= (and d!11371 (not c!7606)) b!59447))

(assert (= (and b!59448 res!33007) b!59444))

(assert (= (and b!59444 res!33006) b!59445))

(assert (= (and b!59447 c!7607) b!59449))

(assert (= (and b!59447 (not c!7607)) b!59450))

(assert (= (and b!59449 res!33004) b!59446))

(assert (= (and b!59446 res!33005) b!59443))

(assert (= (or b!59448 b!59449) bm!4465))

(assert (= (or b!59445 b!59443) bm!4464))

(declare-fun m!51365 () Bool)

(assert (=> b!59446 m!51365))

(declare-fun m!51367 () Bool)

(assert (=> b!59444 m!51367))

(assert (=> bm!4464 m!50529))

(assert (=> bm!4464 m!50687))

(assert (=> d!11371 m!50529))

(assert (=> d!11371 m!50713))

(assert (=> d!11371 m!50529))

(declare-fun m!51369 () Bool)

(assert (=> d!11371 m!51369))

(assert (=> d!11371 m!50771))

(declare-fun m!51371 () Bool)

(assert (=> bm!4465 m!51371))

(assert (=> bm!4402 d!11371))

(declare-fun b!59451 () Bool)

(declare-fun e!39093 () Bool)

(assert (=> b!59451 (= e!39093 tp_is_empty!2397)))

(declare-fun b!59452 () Bool)

(declare-fun e!39094 () Bool)

(assert (=> b!59452 (= e!39094 tp_is_empty!2397)))

(declare-fun mapNonEmpty!2885 () Bool)

(declare-fun mapRes!2885 () Bool)

(declare-fun tp!8015 () Bool)

(assert (=> mapNonEmpty!2885 (= mapRes!2885 (and tp!8015 e!39093))))

(declare-fun mapKey!2885 () (_ BitVec 32))

(declare-fun mapValue!2885 () ValueCell!855)

(declare-fun mapRest!2885 () (Array (_ BitVec 32) ValueCell!855))

(assert (=> mapNonEmpty!2885 (= mapRest!2883 (store mapRest!2885 mapKey!2885 mapValue!2885))))

(declare-fun condMapEmpty!2885 () Bool)

(declare-fun mapDefault!2885 () ValueCell!855)

(assert (=> mapNonEmpty!2883 (= condMapEmpty!2885 (= mapRest!2883 ((as const (Array (_ BitVec 32) ValueCell!855)) mapDefault!2885)))))

(assert (=> mapNonEmpty!2883 (= tp!8013 (and e!39094 mapRes!2885))))

(declare-fun mapIsEmpty!2885 () Bool)

(assert (=> mapIsEmpty!2885 mapRes!2885))

(assert (= (and mapNonEmpty!2883 condMapEmpty!2885) mapIsEmpty!2885))

(assert (= (and mapNonEmpty!2883 (not condMapEmpty!2885)) mapNonEmpty!2885))

(assert (= (and mapNonEmpty!2885 ((_ is ValueCellFull!855) mapValue!2885)) b!59451))

(assert (= (and mapNonEmpty!2883 ((_ is ValueCellFull!855) mapDefault!2885)) b!59452))

(declare-fun m!51373 () Bool)

(assert (=> mapNonEmpty!2885 m!51373))

(declare-fun b!59453 () Bool)

(declare-fun e!39095 () Bool)

(assert (=> b!59453 (= e!39095 tp_is_empty!2397)))

(declare-fun b!59454 () Bool)

(declare-fun e!39096 () Bool)

(assert (=> b!59454 (= e!39096 tp_is_empty!2397)))

(declare-fun mapNonEmpty!2886 () Bool)

(declare-fun mapRes!2886 () Bool)

(declare-fun tp!8016 () Bool)

(assert (=> mapNonEmpty!2886 (= mapRes!2886 (and tp!8016 e!39095))))

(declare-fun mapRest!2886 () (Array (_ BitVec 32) ValueCell!855))

(declare-fun mapValue!2886 () ValueCell!855)

(declare-fun mapKey!2886 () (_ BitVec 32))

(assert (=> mapNonEmpty!2886 (= mapRest!2884 (store mapRest!2886 mapKey!2886 mapValue!2886))))

(declare-fun condMapEmpty!2886 () Bool)

(declare-fun mapDefault!2886 () ValueCell!855)

(assert (=> mapNonEmpty!2884 (= condMapEmpty!2886 (= mapRest!2884 ((as const (Array (_ BitVec 32) ValueCell!855)) mapDefault!2886)))))

(assert (=> mapNonEmpty!2884 (= tp!8014 (and e!39096 mapRes!2886))))

(declare-fun mapIsEmpty!2886 () Bool)

(assert (=> mapIsEmpty!2886 mapRes!2886))

(assert (= (and mapNonEmpty!2884 condMapEmpty!2886) mapIsEmpty!2886))

(assert (= (and mapNonEmpty!2884 (not condMapEmpty!2886)) mapNonEmpty!2886))

(assert (= (and mapNonEmpty!2886 ((_ is ValueCellFull!855) mapValue!2886)) b!59453))

(assert (= (and mapNonEmpty!2884 ((_ is ValueCellFull!855) mapDefault!2886)) b!59454))

(declare-fun m!51375 () Bool)

(assert (=> mapNonEmpty!2886 m!51375))

(declare-fun b_lambda!2603 () Bool)

(assert (= b_lambda!2599 (or (and b!58765 b_free!1961) (and b!58764 b_free!1963 (= (defaultEntry!2043 newMap!16) (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))))) b_lambda!2603)))

(declare-fun b_lambda!2605 () Bool)

(assert (= b_lambda!2593 (or (and b!58765 b_free!1961 (= (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) (defaultEntry!2043 newMap!16))) (and b!58764 b_free!1963) b_lambda!2605)))

(declare-fun b_lambda!2607 () Bool)

(assert (= b_lambda!2591 (or (and b!58765 b_free!1961 (= (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) (defaultEntry!2043 newMap!16))) (and b!58764 b_free!1963) b_lambda!2607)))

(declare-fun b_lambda!2609 () Bool)

(assert (= b_lambda!2601 (or (and b!58765 b_free!1961 (= (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) (defaultEntry!2043 newMap!16))) (and b!58764 b_free!1963) b_lambda!2609)))

(declare-fun b_lambda!2611 () Bool)

(assert (= b_lambda!2597 (or (and b!58765 b_free!1961) (and b!58764 b_free!1963 (= (defaultEntry!2043 newMap!16) (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))))) b_lambda!2611)))

(declare-fun b_lambda!2613 () Bool)

(assert (= b_lambda!2595 (or (and b!58765 b_free!1961 (= (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) (defaultEntry!2043 newMap!16))) (and b!58764 b_free!1963) b_lambda!2613)))

(check-sat (not b_lambda!2585) (not bm!4426) (not b!59297) (not bm!4465) (not b!59396) (not b!59292) (not b_next!1963) (not d!11333) (not d!11273) (not d!11283) (not b!59165) (not b!59200) (not d!11319) (not b!59227) (not d!11339) (not b!59116) (not b!59352) (not b!59284) (not b!59182) (not b!59242) (not d!11349) (not bm!4443) (not b!59231) (not b!59214) (not b!59407) (not d!11361) (not b!59343) (not b!59186) (not bm!4439) (not b!59305) (not bm!4448) (not b!59393) (not b!59388) (not b!59154) (not b!59202) (not b!59096) (not d!11371) (not d!11257) b_and!3591 (not d!11323) (not b!59155) (not d!11247) (not b!59208) (not b!59309) (not d!11299) (not b!59205) (not b!59392) b_and!3593 (not b!59090) (not b_lambda!2589) (not b!59109) (not d!11255) (not d!11347) (not b!59360) (not bm!4464) (not b!59088) (not bm!4447) (not d!11261) (not b!59215) (not b!59371) (not d!11321) (not bm!4432) (not bm!4410) (not bm!4431) (not b!59089) (not b!59092) (not d!11291) (not b!59119) (not b!59346) (not d!11345) (not d!11331) (not b!59110) (not b!59101) (not b!59414) (not d!11297) (not b!59301) (not b!59250) (not b_next!1961) (not b!59255) tp_is_empty!2397 (not b!59217) (not b!59362) (not d!11289) (not b!59286) (not b!59376) (not b!59367) (not b!59338) (not b!59263) (not d!11243) (not b!59164) (not b!59181) (not b!59387) (not b!59363) (not b!59241) (not b!59246) (not d!11307) (not bm!4450) (not d!11343) (not bm!4424) (not d!11303) (not b!59380) (not b!59105) (not d!11369) (not b!59370) (not b!59293) (not d!11309) (not bm!4444) (not b!59259) (not b!59288) (not d!11293) (not b!59337) (not b!59364) (not b!59345) (not b!59344) (not b!59267) (not bm!4459) (not b!59351) (not d!11267) (not d!11359) (not d!11353) (not b!59353) (not bm!4437) (not mapNonEmpty!2885) (not b!59342) (not bm!4430) (not b!59230) (not d!11287) (not b!59306) (not b!59334) (not b_lambda!2611) (not b!59206) (not b!59108) (not d!11275) (not b!59348) (not b!59244) (not b!59425) (not b!59160) (not b!59264) (not b!59203) (not b!59384) (not bm!4409) (not d!11251) (not b!59184) (not b_lambda!2603) (not d!11245) (not d!11335) (not b!59087) (not d!11329) (not d!11365) (not b!59389) (not b!59397) (not b!59159) (not d!11337) (not bm!4455) (not b_lambda!2613) (not b_lambda!2609) (not bm!4456) (not b!59204) (not b!59413) (not b!59361) (not b_lambda!2607) (not d!11301) (not d!11249) (not b!59375) (not b!59359) (not b!59097) (not d!11305) (not b!59113) (not d!11253) (not mapNonEmpty!2886) (not b!59189) (not bm!4414) (not b!59335) (not d!11281) (not b_lambda!2605) (not bm!4449) (not d!11317) (not b!59420) (not d!11315) (not b!59410) (not b!59245) (not bm!4425) (not d!11311) (not bm!4436) (not b!59349) (not b!59262) (not d!11325) (not bm!4415) (not d!11327) (not bm!4454) (not bm!4438) (not d!11341) (not b!59251) (not b!59412) (not b!59304) (not b!59228) (not b!59175))
(check-sat b_and!3591 b_and!3593 (not b_next!1961) (not b_next!1963))
(get-model)

(declare-fun d!11373 () Bool)

(assert (=> d!11373 (= (inRange!0 (index!3032 lt!24164) (mask!5927 newMap!16)) (and (bvsge (index!3032 lt!24164) #b00000000000000000000000000000000) (bvslt (index!3032 lt!24164) (bvadd (mask!5927 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> b!59425 d!11373))

(declare-fun d!11375 () Bool)

(assert (=> d!11375 (= (validKeyInArray!0 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)) (and (not (= (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!59384 d!11375))

(declare-fun d!11377 () Bool)

(assert (=> d!11377 (= (isDefined!77 (getValueByKey!124 (toList!697 call!4392) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355))) (not (isEmpty!293 (getValueByKey!124 (toList!697 call!4392) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))))

(declare-fun bs!2571 () Bool)

(assert (= bs!2571 d!11377))

(assert (=> bs!2571 m!51173))

(declare-fun m!51377 () Bool)

(assert (=> bs!2571 m!51377))

(assert (=> b!59348 d!11377))

(declare-fun b!59456 () Bool)

(declare-fun e!39097 () Option!130)

(declare-fun e!39098 () Option!130)

(assert (=> b!59456 (= e!39097 e!39098)))

(declare-fun c!7609 () Bool)

(assert (=> b!59456 (= c!7609 (and ((_ is Cons!1426) (toList!697 call!4392)) (not (= (_1!1022 (h!2007 (toList!697 call!4392))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))))

(declare-fun b!59455 () Bool)

(assert (=> b!59455 (= e!39097 (Some!129 (_2!1022 (h!2007 (toList!697 call!4392)))))))

(declare-fun b!59457 () Bool)

(assert (=> b!59457 (= e!39098 (getValueByKey!124 (t!4768 (toList!697 call!4392)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(declare-fun b!59458 () Bool)

(assert (=> b!59458 (= e!39098 None!128)))

(declare-fun d!11379 () Bool)

(declare-fun c!7608 () Bool)

(assert (=> d!11379 (= c!7608 (and ((_ is Cons!1426) (toList!697 call!4392)) (= (_1!1022 (h!2007 (toList!697 call!4392))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355))))))

(assert (=> d!11379 (= (getValueByKey!124 (toList!697 call!4392) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) e!39097)))

(assert (= (and d!11379 c!7608) b!59455))

(assert (= (and d!11379 (not c!7608)) b!59456))

(assert (= (and b!59456 c!7609) b!59457))

(assert (= (and b!59456 (not c!7609)) b!59458))

(assert (=> b!59457 m!50529))

(declare-fun m!51379 () Bool)

(assert (=> b!59457 m!51379))

(assert (=> b!59348 d!11379))

(declare-fun d!11381 () Bool)

(assert (=> d!11381 (= (apply!66 (+!81 lt!24027 (tuple2!2023 lt!24025 (minValue!1959 newMap!16))) lt!24036) (apply!66 lt!24027 lt!24036))))

(declare-fun lt!24171 () Unit!1551)

(assert (=> d!11381 (= lt!24171 (choose!307 lt!24027 lt!24025 (minValue!1959 newMap!16) lt!24036))))

(declare-fun e!39099 () Bool)

(assert (=> d!11381 e!39099))

(declare-fun res!33008 () Bool)

(assert (=> d!11381 (=> (not res!33008) (not e!39099))))

(assert (=> d!11381 (= res!33008 (contains!682 lt!24027 lt!24036))))

(assert (=> d!11381 (= (addApplyDifferent!42 lt!24027 lt!24025 (minValue!1959 newMap!16) lt!24036) lt!24171)))

(declare-fun b!59459 () Bool)

(assert (=> b!59459 (= e!39099 (not (= lt!24036 lt!24025)))))

(assert (= (and d!11381 res!33008) b!59459))

(assert (=> d!11381 m!51051))

(assert (=> d!11381 m!51059))

(assert (=> d!11381 m!51061))

(declare-fun m!51381 () Bool)

(assert (=> d!11381 m!51381))

(assert (=> d!11381 m!51059))

(declare-fun m!51383 () Bool)

(assert (=> d!11381 m!51383))

(assert (=> b!59263 d!11381))

(declare-fun d!11383 () Bool)

(assert (=> d!11383 (= (apply!66 lt!24027 lt!24036) (get!1069 (getValueByKey!124 (toList!697 lt!24027) lt!24036)))))

(declare-fun bs!2572 () Bool)

(assert (= bs!2572 d!11383))

(declare-fun m!51385 () Bool)

(assert (=> bs!2572 m!51385))

(assert (=> bs!2572 m!51385))

(declare-fun m!51387 () Bool)

(assert (=> bs!2572 m!51387))

(assert (=> b!59263 d!11383))

(declare-fun d!11385 () Bool)

(declare-fun e!39100 () Bool)

(assert (=> d!11385 e!39100))

(declare-fun res!33009 () Bool)

(assert (=> d!11385 (=> (not res!33009) (not e!39100))))

(declare-fun lt!24173 () ListLongMap!1363)

(assert (=> d!11385 (= res!33009 (contains!682 lt!24173 (_1!1022 (tuple2!2023 lt!24025 (minValue!1959 newMap!16)))))))

(declare-fun lt!24175 () List!1430)

(assert (=> d!11385 (= lt!24173 (ListLongMap!1364 lt!24175))))

(declare-fun lt!24172 () Unit!1551)

(declare-fun lt!24174 () Unit!1551)

(assert (=> d!11385 (= lt!24172 lt!24174)))

(assert (=> d!11385 (= (getValueByKey!124 lt!24175 (_1!1022 (tuple2!2023 lt!24025 (minValue!1959 newMap!16)))) (Some!129 (_2!1022 (tuple2!2023 lt!24025 (minValue!1959 newMap!16)))))))

(assert (=> d!11385 (= lt!24174 (lemmaContainsTupThenGetReturnValue!41 lt!24175 (_1!1022 (tuple2!2023 lt!24025 (minValue!1959 newMap!16))) (_2!1022 (tuple2!2023 lt!24025 (minValue!1959 newMap!16)))))))

(assert (=> d!11385 (= lt!24175 (insertStrictlySorted!44 (toList!697 lt!24027) (_1!1022 (tuple2!2023 lt!24025 (minValue!1959 newMap!16))) (_2!1022 (tuple2!2023 lt!24025 (minValue!1959 newMap!16)))))))

(assert (=> d!11385 (= (+!81 lt!24027 (tuple2!2023 lt!24025 (minValue!1959 newMap!16))) lt!24173)))

(declare-fun b!59460 () Bool)

(declare-fun res!33010 () Bool)

(assert (=> b!59460 (=> (not res!33010) (not e!39100))))

(assert (=> b!59460 (= res!33010 (= (getValueByKey!124 (toList!697 lt!24173) (_1!1022 (tuple2!2023 lt!24025 (minValue!1959 newMap!16)))) (Some!129 (_2!1022 (tuple2!2023 lt!24025 (minValue!1959 newMap!16))))))))

(declare-fun b!59461 () Bool)

(assert (=> b!59461 (= e!39100 (contains!684 (toList!697 lt!24173) (tuple2!2023 lt!24025 (minValue!1959 newMap!16))))))

(assert (= (and d!11385 res!33009) b!59460))

(assert (= (and b!59460 res!33010) b!59461))

(declare-fun m!51389 () Bool)

(assert (=> d!11385 m!51389))

(declare-fun m!51391 () Bool)

(assert (=> d!11385 m!51391))

(declare-fun m!51393 () Bool)

(assert (=> d!11385 m!51393))

(declare-fun m!51395 () Bool)

(assert (=> d!11385 m!51395))

(declare-fun m!51397 () Bool)

(assert (=> b!59460 m!51397))

(declare-fun m!51399 () Bool)

(assert (=> b!59461 m!51399))

(assert (=> b!59263 d!11385))

(declare-fun d!11387 () Bool)

(assert (=> d!11387 (= (apply!66 (+!81 lt!24021 (tuple2!2023 lt!24029 (zeroValue!1959 newMap!16))) lt!24017) (apply!66 lt!24021 lt!24017))))

(declare-fun lt!24176 () Unit!1551)

(assert (=> d!11387 (= lt!24176 (choose!307 lt!24021 lt!24029 (zeroValue!1959 newMap!16) lt!24017))))

(declare-fun e!39101 () Bool)

(assert (=> d!11387 e!39101))

(declare-fun res!33011 () Bool)

(assert (=> d!11387 (=> (not res!33011) (not e!39101))))

(assert (=> d!11387 (= res!33011 (contains!682 lt!24021 lt!24017))))

(assert (=> d!11387 (= (addApplyDifferent!42 lt!24021 lt!24029 (zeroValue!1959 newMap!16) lt!24017) lt!24176)))

(declare-fun b!59462 () Bool)

(assert (=> b!59462 (= e!39101 (not (= lt!24017 lt!24029)))))

(assert (= (and d!11387 res!33011) b!59462))

(assert (=> d!11387 m!51069))

(assert (=> d!11387 m!51065))

(assert (=> d!11387 m!51067))

(declare-fun m!51401 () Bool)

(assert (=> d!11387 m!51401))

(assert (=> d!11387 m!51065))

(declare-fun m!51403 () Bool)

(assert (=> d!11387 m!51403))

(assert (=> b!59263 d!11387))

(declare-fun d!11389 () Bool)

(assert (=> d!11389 (= (apply!66 lt!24020 lt!24033) (get!1069 (getValueByKey!124 (toList!697 lt!24020) lt!24033)))))

(declare-fun bs!2573 () Bool)

(assert (= bs!2573 d!11389))

(declare-fun m!51405 () Bool)

(assert (=> bs!2573 m!51405))

(assert (=> bs!2573 m!51405))

(declare-fun m!51407 () Bool)

(assert (=> bs!2573 m!51407))

(assert (=> b!59263 d!11389))

(declare-fun d!11391 () Bool)

(assert (=> d!11391 (= (apply!66 (+!81 lt!24020 (tuple2!2023 lt!24028 (minValue!1959 newMap!16))) lt!24033) (get!1069 (getValueByKey!124 (toList!697 (+!81 lt!24020 (tuple2!2023 lt!24028 (minValue!1959 newMap!16)))) lt!24033)))))

(declare-fun bs!2574 () Bool)

(assert (= bs!2574 d!11391))

(declare-fun m!51409 () Bool)

(assert (=> bs!2574 m!51409))

(assert (=> bs!2574 m!51409))

(declare-fun m!51411 () Bool)

(assert (=> bs!2574 m!51411))

(assert (=> b!59263 d!11391))

(declare-fun d!11393 () Bool)

(assert (=> d!11393 (= (apply!66 (+!81 lt!24027 (tuple2!2023 lt!24025 (minValue!1959 newMap!16))) lt!24036) (get!1069 (getValueByKey!124 (toList!697 (+!81 lt!24027 (tuple2!2023 lt!24025 (minValue!1959 newMap!16)))) lt!24036)))))

(declare-fun bs!2575 () Bool)

(assert (= bs!2575 d!11393))

(declare-fun m!51413 () Bool)

(assert (=> bs!2575 m!51413))

(assert (=> bs!2575 m!51413))

(declare-fun m!51415 () Bool)

(assert (=> bs!2575 m!51415))

(assert (=> b!59263 d!11393))

(declare-fun d!11395 () Bool)

(assert (=> d!11395 (= (apply!66 lt!24021 lt!24017) (get!1069 (getValueByKey!124 (toList!697 lt!24021) lt!24017)))))

(declare-fun bs!2576 () Bool)

(assert (= bs!2576 d!11395))

(declare-fun m!51417 () Bool)

(assert (=> bs!2576 m!51417))

(assert (=> bs!2576 m!51417))

(declare-fun m!51419 () Bool)

(assert (=> bs!2576 m!51419))

(assert (=> b!59263 d!11395))

(declare-fun d!11397 () Bool)

(assert (=> d!11397 (= (apply!66 (+!81 lt!24020 (tuple2!2023 lt!24028 (minValue!1959 newMap!16))) lt!24033) (apply!66 lt!24020 lt!24033))))

(declare-fun lt!24177 () Unit!1551)

(assert (=> d!11397 (= lt!24177 (choose!307 lt!24020 lt!24028 (minValue!1959 newMap!16) lt!24033))))

(declare-fun e!39102 () Bool)

(assert (=> d!11397 e!39102))

(declare-fun res!33012 () Bool)

(assert (=> d!11397 (=> (not res!33012) (not e!39102))))

(assert (=> d!11397 (= res!33012 (contains!682 lt!24020 lt!24033))))

(assert (=> d!11397 (= (addApplyDifferent!42 lt!24020 lt!24028 (minValue!1959 newMap!16) lt!24033) lt!24177)))

(declare-fun b!59463 () Bool)

(assert (=> b!59463 (= e!39102 (not (= lt!24033 lt!24028)))))

(assert (= (and d!11397 res!33012) b!59463))

(assert (=> d!11397 m!51049))

(assert (=> d!11397 m!51055))

(assert (=> d!11397 m!51073))

(declare-fun m!51421 () Bool)

(assert (=> d!11397 m!51421))

(assert (=> d!11397 m!51055))

(declare-fun m!51423 () Bool)

(assert (=> d!11397 m!51423))

(assert (=> b!59263 d!11397))

(declare-fun b!59464 () Bool)

(declare-fun e!39109 () Bool)

(declare-fun lt!24183 () ListLongMap!1363)

(assert (=> b!59464 (= e!39109 (isEmpty!294 lt!24183))))

(declare-fun bm!4466 () Bool)

(declare-fun call!4469 () ListLongMap!1363)

(assert (=> bm!4466 (= call!4469 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2043 newMap!16)))))

(declare-fun b!59465 () Bool)

(declare-fun res!33015 () Bool)

(declare-fun e!39105 () Bool)

(assert (=> b!59465 (=> (not res!33015) (not e!39105))))

(assert (=> b!59465 (= res!33015 (not (contains!682 lt!24183 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!59467 () Bool)

(declare-fun e!39106 () Bool)

(declare-fun e!39103 () Bool)

(assert (=> b!59467 (= e!39106 e!39103)))

(assert (=> b!59467 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(declare-fun res!33016 () Bool)

(assert (=> b!59467 (= res!33016 (contains!682 lt!24183 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59467 (=> (not res!33016) (not e!39103))))

(declare-fun b!59468 () Bool)

(declare-fun e!39104 () ListLongMap!1363)

(declare-fun e!39107 () ListLongMap!1363)

(assert (=> b!59468 (= e!39104 e!39107)))

(declare-fun c!7610 () Bool)

(assert (=> b!59468 (= c!7610 (validKeyInArray!0 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59469 () Bool)

(assert (=> b!59469 (= e!39107 call!4469)))

(declare-fun b!59470 () Bool)

(assert (=> b!59470 (= e!39104 (ListLongMap!1364 Nil!1427))))

(declare-fun b!59471 () Bool)

(assert (=> b!59471 (= e!39105 e!39106)))

(declare-fun c!7611 () Bool)

(declare-fun e!39108 () Bool)

(assert (=> b!59471 (= c!7611 e!39108)))

(declare-fun res!33014 () Bool)

(assert (=> b!59471 (=> (not res!33014) (not e!39108))))

(assert (=> b!59471 (= res!33014 (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(declare-fun b!59472 () Bool)

(assert (=> b!59472 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(assert (=> b!59472 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2012 (_values!2026 newMap!16))))))

(assert (=> b!59472 (= e!39103 (= (apply!66 lt!24183 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)) (get!1066 (select (arr!1782 (_values!2026 newMap!16)) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2043 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!59473 () Bool)

(declare-fun lt!24178 () Unit!1551)

(declare-fun lt!24180 () Unit!1551)

(assert (=> b!59473 (= lt!24178 lt!24180)))

(declare-fun lt!24182 () V!2843)

(declare-fun lt!24184 () (_ BitVec 64))

(declare-fun lt!24181 () ListLongMap!1363)

(declare-fun lt!24179 () (_ BitVec 64))

(assert (=> b!59473 (not (contains!682 (+!81 lt!24181 (tuple2!2023 lt!24184 lt!24182)) lt!24179))))

(assert (=> b!59473 (= lt!24180 (addStillNotContains!15 lt!24181 lt!24184 lt!24182 lt!24179))))

(assert (=> b!59473 (= lt!24179 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!59473 (= lt!24182 (get!1066 (select (arr!1782 (_values!2026 newMap!16)) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2043 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!59473 (= lt!24184 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!59473 (= lt!24181 call!4469)))

(assert (=> b!59473 (= e!39107 (+!81 call!4469 (tuple2!2023 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000) (get!1066 (select (arr!1782 (_values!2026 newMap!16)) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2043 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun d!11399 () Bool)

(assert (=> d!11399 e!39105))

(declare-fun res!33013 () Bool)

(assert (=> d!11399 (=> (not res!33013) (not e!39105))))

(assert (=> d!11399 (= res!33013 (not (contains!682 lt!24183 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!11399 (= lt!24183 e!39104)))

(declare-fun c!7612 () Bool)

(assert (=> d!11399 (= c!7612 (bvsge #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(assert (=> d!11399 (validMask!0 (mask!5927 newMap!16))))

(assert (=> d!11399 (= (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)) lt!24183)))

(declare-fun b!59466 () Bool)

(assert (=> b!59466 (= e!39106 e!39109)))

(declare-fun c!7613 () Bool)

(assert (=> b!59466 (= c!7613 (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(declare-fun b!59474 () Bool)

(assert (=> b!59474 (= e!39108 (validKeyInArray!0 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59474 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!59475 () Bool)

(assert (=> b!59475 (= e!39109 (= lt!24183 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2043 newMap!16))))))

(assert (= (and d!11399 c!7612) b!59470))

(assert (= (and d!11399 (not c!7612)) b!59468))

(assert (= (and b!59468 c!7610) b!59473))

(assert (= (and b!59468 (not c!7610)) b!59469))

(assert (= (or b!59473 b!59469) bm!4466))

(assert (= (and d!11399 res!33013) b!59465))

(assert (= (and b!59465 res!33015) b!59471))

(assert (= (and b!59471 res!33014) b!59474))

(assert (= (and b!59471 c!7611) b!59467))

(assert (= (and b!59471 (not c!7611)) b!59466))

(assert (= (and b!59467 res!33016) b!59472))

(assert (= (and b!59466 c!7613) b!59475))

(assert (= (and b!59466 (not c!7613)) b!59464))

(declare-fun b_lambda!2615 () Bool)

(assert (=> (not b_lambda!2615) (not b!59472)))

(assert (=> b!59472 t!4775))

(declare-fun b_and!3595 () Bool)

(assert (= b_and!3591 (and (=> t!4775 result!2381) b_and!3595)))

(assert (=> b!59472 t!4777))

(declare-fun b_and!3597 () Bool)

(assert (= b_and!3593 (and (=> t!4777 result!2383) b_and!3597)))

(declare-fun b_lambda!2617 () Bool)

(assert (=> (not b_lambda!2617) (not b!59473)))

(assert (=> b!59473 t!4775))

(declare-fun b_and!3599 () Bool)

(assert (= b_and!3595 (and (=> t!4775 result!2381) b_and!3599)))

(assert (=> b!59473 t!4777))

(declare-fun b_and!3601 () Bool)

(assert (= b_and!3597 (and (=> t!4777 result!2383) b_and!3601)))

(declare-fun m!51425 () Bool)

(assert (=> b!59473 m!51425))

(assert (=> b!59473 m!51033))

(assert (=> b!59473 m!50813))

(assert (=> b!59473 m!51037))

(assert (=> b!59473 m!50813))

(declare-fun m!51427 () Bool)

(assert (=> b!59473 m!51427))

(declare-fun m!51429 () Bool)

(assert (=> b!59473 m!51429))

(assert (=> b!59473 m!50803))

(assert (=> b!59473 m!51429))

(declare-fun m!51431 () Bool)

(assert (=> b!59473 m!51431))

(assert (=> b!59473 m!51033))

(declare-fun m!51433 () Bool)

(assert (=> b!59475 m!51433))

(assert (=> b!59467 m!50803))

(assert (=> b!59467 m!50803))

(declare-fun m!51435 () Bool)

(assert (=> b!59467 m!51435))

(declare-fun m!51437 () Bool)

(assert (=> b!59465 m!51437))

(assert (=> b!59468 m!50803))

(assert (=> b!59468 m!50803))

(assert (=> b!59468 m!50805))

(declare-fun m!51439 () Bool)

(assert (=> b!59464 m!51439))

(assert (=> bm!4466 m!51433))

(assert (=> b!59474 m!50803))

(assert (=> b!59474 m!50803))

(assert (=> b!59474 m!50805))

(declare-fun m!51441 () Bool)

(assert (=> d!11399 m!51441))

(assert (=> d!11399 m!50771))

(assert (=> b!59472 m!50803))

(declare-fun m!51443 () Bool)

(assert (=> b!59472 m!51443))

(assert (=> b!59472 m!51033))

(assert (=> b!59472 m!50813))

(assert (=> b!59472 m!51037))

(assert (=> b!59472 m!50813))

(assert (=> b!59472 m!50803))

(assert (=> b!59472 m!51033))

(assert (=> b!59263 d!11399))

(declare-fun d!11401 () Bool)

(declare-fun e!39110 () Bool)

(assert (=> d!11401 e!39110))

(declare-fun res!33017 () Bool)

(assert (=> d!11401 (=> (not res!33017) (not e!39110))))

(declare-fun lt!24186 () ListLongMap!1363)

(assert (=> d!11401 (= res!33017 (contains!682 lt!24186 (_1!1022 (tuple2!2023 lt!24028 (minValue!1959 newMap!16)))))))

(declare-fun lt!24188 () List!1430)

(assert (=> d!11401 (= lt!24186 (ListLongMap!1364 lt!24188))))

(declare-fun lt!24185 () Unit!1551)

(declare-fun lt!24187 () Unit!1551)

(assert (=> d!11401 (= lt!24185 lt!24187)))

(assert (=> d!11401 (= (getValueByKey!124 lt!24188 (_1!1022 (tuple2!2023 lt!24028 (minValue!1959 newMap!16)))) (Some!129 (_2!1022 (tuple2!2023 lt!24028 (minValue!1959 newMap!16)))))))

(assert (=> d!11401 (= lt!24187 (lemmaContainsTupThenGetReturnValue!41 lt!24188 (_1!1022 (tuple2!2023 lt!24028 (minValue!1959 newMap!16))) (_2!1022 (tuple2!2023 lt!24028 (minValue!1959 newMap!16)))))))

(assert (=> d!11401 (= lt!24188 (insertStrictlySorted!44 (toList!697 lt!24020) (_1!1022 (tuple2!2023 lt!24028 (minValue!1959 newMap!16))) (_2!1022 (tuple2!2023 lt!24028 (minValue!1959 newMap!16)))))))

(assert (=> d!11401 (= (+!81 lt!24020 (tuple2!2023 lt!24028 (minValue!1959 newMap!16))) lt!24186)))

(declare-fun b!59476 () Bool)

(declare-fun res!33018 () Bool)

(assert (=> b!59476 (=> (not res!33018) (not e!39110))))

(assert (=> b!59476 (= res!33018 (= (getValueByKey!124 (toList!697 lt!24186) (_1!1022 (tuple2!2023 lt!24028 (minValue!1959 newMap!16)))) (Some!129 (_2!1022 (tuple2!2023 lt!24028 (minValue!1959 newMap!16))))))))

(declare-fun b!59477 () Bool)

(assert (=> b!59477 (= e!39110 (contains!684 (toList!697 lt!24186) (tuple2!2023 lt!24028 (minValue!1959 newMap!16))))))

(assert (= (and d!11401 res!33017) b!59476))

(assert (= (and b!59476 res!33018) b!59477))

(declare-fun m!51445 () Bool)

(assert (=> d!11401 m!51445))

(declare-fun m!51447 () Bool)

(assert (=> d!11401 m!51447))

(declare-fun m!51449 () Bool)

(assert (=> d!11401 m!51449))

(declare-fun m!51451 () Bool)

(assert (=> d!11401 m!51451))

(declare-fun m!51453 () Bool)

(assert (=> b!59476 m!51453))

(declare-fun m!51455 () Bool)

(assert (=> b!59477 m!51455))

(assert (=> b!59263 d!11401))

(declare-fun d!11403 () Bool)

(declare-fun e!39111 () Bool)

(assert (=> d!11403 e!39111))

(declare-fun res!33019 () Bool)

(assert (=> d!11403 (=> (not res!33019) (not e!39111))))

(declare-fun lt!24190 () ListLongMap!1363)

(assert (=> d!11403 (= res!33019 (contains!682 lt!24190 (_1!1022 (tuple2!2023 lt!24029 (zeroValue!1959 newMap!16)))))))

(declare-fun lt!24192 () List!1430)

(assert (=> d!11403 (= lt!24190 (ListLongMap!1364 lt!24192))))

(declare-fun lt!24189 () Unit!1551)

(declare-fun lt!24191 () Unit!1551)

(assert (=> d!11403 (= lt!24189 lt!24191)))

(assert (=> d!11403 (= (getValueByKey!124 lt!24192 (_1!1022 (tuple2!2023 lt!24029 (zeroValue!1959 newMap!16)))) (Some!129 (_2!1022 (tuple2!2023 lt!24029 (zeroValue!1959 newMap!16)))))))

(assert (=> d!11403 (= lt!24191 (lemmaContainsTupThenGetReturnValue!41 lt!24192 (_1!1022 (tuple2!2023 lt!24029 (zeroValue!1959 newMap!16))) (_2!1022 (tuple2!2023 lt!24029 (zeroValue!1959 newMap!16)))))))

(assert (=> d!11403 (= lt!24192 (insertStrictlySorted!44 (toList!697 lt!24021) (_1!1022 (tuple2!2023 lt!24029 (zeroValue!1959 newMap!16))) (_2!1022 (tuple2!2023 lt!24029 (zeroValue!1959 newMap!16)))))))

(assert (=> d!11403 (= (+!81 lt!24021 (tuple2!2023 lt!24029 (zeroValue!1959 newMap!16))) lt!24190)))

(declare-fun b!59478 () Bool)

(declare-fun res!33020 () Bool)

(assert (=> b!59478 (=> (not res!33020) (not e!39111))))

(assert (=> b!59478 (= res!33020 (= (getValueByKey!124 (toList!697 lt!24190) (_1!1022 (tuple2!2023 lt!24029 (zeroValue!1959 newMap!16)))) (Some!129 (_2!1022 (tuple2!2023 lt!24029 (zeroValue!1959 newMap!16))))))))

(declare-fun b!59479 () Bool)

(assert (=> b!59479 (= e!39111 (contains!684 (toList!697 lt!24190) (tuple2!2023 lt!24029 (zeroValue!1959 newMap!16))))))

(assert (= (and d!11403 res!33019) b!59478))

(assert (= (and b!59478 res!33020) b!59479))

(declare-fun m!51457 () Bool)

(assert (=> d!11403 m!51457))

(declare-fun m!51459 () Bool)

(assert (=> d!11403 m!51459))

(declare-fun m!51461 () Bool)

(assert (=> d!11403 m!51461))

(declare-fun m!51463 () Bool)

(assert (=> d!11403 m!51463))

(declare-fun m!51465 () Bool)

(assert (=> b!59478 m!51465))

(declare-fun m!51467 () Bool)

(assert (=> b!59479 m!51467))

(assert (=> b!59263 d!11403))

(declare-fun d!11405 () Bool)

(assert (=> d!11405 (contains!682 (+!81 lt!24023 (tuple2!2023 lt!24018 (zeroValue!1959 newMap!16))) lt!24016)))

(declare-fun lt!24193 () Unit!1551)

(assert (=> d!11405 (= lt!24193 (choose!308 lt!24023 lt!24018 (zeroValue!1959 newMap!16) lt!24016))))

(assert (=> d!11405 (contains!682 lt!24023 lt!24016)))

(assert (=> d!11405 (= (addStillContains!42 lt!24023 lt!24018 (zeroValue!1959 newMap!16) lt!24016) lt!24193)))

(declare-fun bs!2577 () Bool)

(assert (= bs!2577 d!11405))

(assert (=> bs!2577 m!51045))

(assert (=> bs!2577 m!51045))

(assert (=> bs!2577 m!51053))

(declare-fun m!51469 () Bool)

(assert (=> bs!2577 m!51469))

(declare-fun m!51471 () Bool)

(assert (=> bs!2577 m!51471))

(assert (=> b!59263 d!11405))

(declare-fun d!11407 () Bool)

(declare-fun e!39112 () Bool)

(assert (=> d!11407 e!39112))

(declare-fun res!33021 () Bool)

(assert (=> d!11407 (=> (not res!33021) (not e!39112))))

(declare-fun lt!24195 () ListLongMap!1363)

(assert (=> d!11407 (= res!33021 (contains!682 lt!24195 (_1!1022 (tuple2!2023 lt!24018 (zeroValue!1959 newMap!16)))))))

(declare-fun lt!24197 () List!1430)

(assert (=> d!11407 (= lt!24195 (ListLongMap!1364 lt!24197))))

(declare-fun lt!24194 () Unit!1551)

(declare-fun lt!24196 () Unit!1551)

(assert (=> d!11407 (= lt!24194 lt!24196)))

(assert (=> d!11407 (= (getValueByKey!124 lt!24197 (_1!1022 (tuple2!2023 lt!24018 (zeroValue!1959 newMap!16)))) (Some!129 (_2!1022 (tuple2!2023 lt!24018 (zeroValue!1959 newMap!16)))))))

(assert (=> d!11407 (= lt!24196 (lemmaContainsTupThenGetReturnValue!41 lt!24197 (_1!1022 (tuple2!2023 lt!24018 (zeroValue!1959 newMap!16))) (_2!1022 (tuple2!2023 lt!24018 (zeroValue!1959 newMap!16)))))))

(assert (=> d!11407 (= lt!24197 (insertStrictlySorted!44 (toList!697 lt!24023) (_1!1022 (tuple2!2023 lt!24018 (zeroValue!1959 newMap!16))) (_2!1022 (tuple2!2023 lt!24018 (zeroValue!1959 newMap!16)))))))

(assert (=> d!11407 (= (+!81 lt!24023 (tuple2!2023 lt!24018 (zeroValue!1959 newMap!16))) lt!24195)))

(declare-fun b!59480 () Bool)

(declare-fun res!33022 () Bool)

(assert (=> b!59480 (=> (not res!33022) (not e!39112))))

(assert (=> b!59480 (= res!33022 (= (getValueByKey!124 (toList!697 lt!24195) (_1!1022 (tuple2!2023 lt!24018 (zeroValue!1959 newMap!16)))) (Some!129 (_2!1022 (tuple2!2023 lt!24018 (zeroValue!1959 newMap!16))))))))

(declare-fun b!59481 () Bool)

(assert (=> b!59481 (= e!39112 (contains!684 (toList!697 lt!24195) (tuple2!2023 lt!24018 (zeroValue!1959 newMap!16))))))

(assert (= (and d!11407 res!33021) b!59480))

(assert (= (and b!59480 res!33022) b!59481))

(declare-fun m!51473 () Bool)

(assert (=> d!11407 m!51473))

(declare-fun m!51475 () Bool)

(assert (=> d!11407 m!51475))

(declare-fun m!51477 () Bool)

(assert (=> d!11407 m!51477))

(declare-fun m!51479 () Bool)

(assert (=> d!11407 m!51479))

(declare-fun m!51481 () Bool)

(assert (=> b!59480 m!51481))

(declare-fun m!51483 () Bool)

(assert (=> b!59481 m!51483))

(assert (=> b!59263 d!11407))

(declare-fun d!11409 () Bool)

(assert (=> d!11409 (= (apply!66 (+!81 lt!24021 (tuple2!2023 lt!24029 (zeroValue!1959 newMap!16))) lt!24017) (get!1069 (getValueByKey!124 (toList!697 (+!81 lt!24021 (tuple2!2023 lt!24029 (zeroValue!1959 newMap!16)))) lt!24017)))))

(declare-fun bs!2578 () Bool)

(assert (= bs!2578 d!11409))

(declare-fun m!51485 () Bool)

(assert (=> bs!2578 m!51485))

(assert (=> bs!2578 m!51485))

(declare-fun m!51487 () Bool)

(assert (=> bs!2578 m!51487))

(assert (=> b!59263 d!11409))

(declare-fun d!11411 () Bool)

(declare-fun e!39113 () Bool)

(assert (=> d!11411 e!39113))

(declare-fun res!33023 () Bool)

(assert (=> d!11411 (=> res!33023 e!39113)))

(declare-fun lt!24200 () Bool)

(assert (=> d!11411 (= res!33023 (not lt!24200))))

(declare-fun lt!24199 () Bool)

(assert (=> d!11411 (= lt!24200 lt!24199)))

(declare-fun lt!24201 () Unit!1551)

(declare-fun e!39114 () Unit!1551)

(assert (=> d!11411 (= lt!24201 e!39114)))

(declare-fun c!7614 () Bool)

(assert (=> d!11411 (= c!7614 lt!24199)))

(assert (=> d!11411 (= lt!24199 (containsKey!128 (toList!697 (+!81 lt!24023 (tuple2!2023 lt!24018 (zeroValue!1959 newMap!16)))) lt!24016))))

(assert (=> d!11411 (= (contains!682 (+!81 lt!24023 (tuple2!2023 lt!24018 (zeroValue!1959 newMap!16))) lt!24016) lt!24200)))

(declare-fun b!59482 () Bool)

(declare-fun lt!24198 () Unit!1551)

(assert (=> b!59482 (= e!39114 lt!24198)))

(assert (=> b!59482 (= lt!24198 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 (+!81 lt!24023 (tuple2!2023 lt!24018 (zeroValue!1959 newMap!16)))) lt!24016))))

(assert (=> b!59482 (isDefined!77 (getValueByKey!124 (toList!697 (+!81 lt!24023 (tuple2!2023 lt!24018 (zeroValue!1959 newMap!16)))) lt!24016))))

(declare-fun b!59483 () Bool)

(declare-fun Unit!1573 () Unit!1551)

(assert (=> b!59483 (= e!39114 Unit!1573)))

(declare-fun b!59484 () Bool)

(assert (=> b!59484 (= e!39113 (isDefined!77 (getValueByKey!124 (toList!697 (+!81 lt!24023 (tuple2!2023 lt!24018 (zeroValue!1959 newMap!16)))) lt!24016)))))

(assert (= (and d!11411 c!7614) b!59482))

(assert (= (and d!11411 (not c!7614)) b!59483))

(assert (= (and d!11411 (not res!33023)) b!59484))

(declare-fun m!51489 () Bool)

(assert (=> d!11411 m!51489))

(declare-fun m!51491 () Bool)

(assert (=> b!59482 m!51491))

(declare-fun m!51493 () Bool)

(assert (=> b!59482 m!51493))

(assert (=> b!59482 m!51493))

(declare-fun m!51495 () Bool)

(assert (=> b!59482 m!51495))

(assert (=> b!59484 m!51493))

(assert (=> b!59484 m!51493))

(assert (=> b!59484 m!51495))

(assert (=> b!59263 d!11411))

(declare-fun d!11413 () Bool)

(assert (=> d!11413 (= (isDefined!77 (getValueByKey!124 (toList!697 (+!81 lt!23728 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!23721)) (not (isEmpty!293 (getValueByKey!124 (toList!697 (+!81 lt!23728 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!23721))))))

(declare-fun bs!2579 () Bool)

(assert (= bs!2579 d!11413))

(assert (=> bs!2579 m!51181))

(declare-fun m!51497 () Bool)

(assert (=> bs!2579 m!51497))

(assert (=> b!59351 d!11413))

(declare-fun b!59486 () Bool)

(declare-fun e!39115 () Option!130)

(declare-fun e!39116 () Option!130)

(assert (=> b!59486 (= e!39115 e!39116)))

(declare-fun c!7616 () Bool)

(assert (=> b!59486 (= c!7616 (and ((_ is Cons!1426) (toList!697 (+!81 lt!23728 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))) (not (= (_1!1022 (h!2007 (toList!697 (+!81 lt!23728 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))) lt!23721))))))

(declare-fun b!59485 () Bool)

(assert (=> b!59485 (= e!39115 (Some!129 (_2!1022 (h!2007 (toList!697 (+!81 lt!23728 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))))))))

(declare-fun b!59487 () Bool)

(assert (=> b!59487 (= e!39116 (getValueByKey!124 (t!4768 (toList!697 (+!81 lt!23728 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))) lt!23721))))

(declare-fun b!59488 () Bool)

(assert (=> b!59488 (= e!39116 None!128)))

(declare-fun d!11415 () Bool)

(declare-fun c!7615 () Bool)

(assert (=> d!11415 (= c!7615 (and ((_ is Cons!1426) (toList!697 (+!81 lt!23728 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))) (= (_1!1022 (h!2007 (toList!697 (+!81 lt!23728 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))) lt!23721)))))

(assert (=> d!11415 (= (getValueByKey!124 (toList!697 (+!81 lt!23728 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!23721) e!39115)))

(assert (= (and d!11415 c!7615) b!59485))

(assert (= (and d!11415 (not c!7615)) b!59486))

(assert (= (and b!59486 c!7616) b!59487))

(assert (= (and b!59486 (not c!7616)) b!59488))

(declare-fun m!51499 () Bool)

(assert (=> b!59487 m!51499))

(assert (=> b!59351 d!11415))

(declare-fun b!59489 () Bool)

(declare-fun e!39123 () Bool)

(declare-fun lt!24207 () ListLongMap!1363)

(assert (=> b!59489 (= e!39123 (isEmpty!294 lt!24207))))

(declare-fun bm!4467 () Bool)

(declare-fun call!4470 () ListLongMap!1363)

(assert (=> bm!4467 (= call!4470 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2043 newMap!16)))))

(declare-fun b!59490 () Bool)

(declare-fun res!33026 () Bool)

(declare-fun e!39119 () Bool)

(assert (=> b!59490 (=> (not res!33026) (not e!39119))))

(assert (=> b!59490 (= res!33026 (not (contains!682 lt!24207 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!59492 () Bool)

(declare-fun e!39120 () Bool)

(declare-fun e!39117 () Bool)

(assert (=> b!59492 (= e!39120 e!39117)))

(assert (=> b!59492 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(declare-fun res!33027 () Bool)

(assert (=> b!59492 (= res!33027 (contains!682 lt!24207 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59492 (=> (not res!33027) (not e!39117))))

(declare-fun b!59493 () Bool)

(declare-fun e!39118 () ListLongMap!1363)

(declare-fun e!39121 () ListLongMap!1363)

(assert (=> b!59493 (= e!39118 e!39121)))

(declare-fun c!7617 () Bool)

(assert (=> b!59493 (= c!7617 (validKeyInArray!0 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59494 () Bool)

(assert (=> b!59494 (= e!39121 call!4470)))

(declare-fun b!59495 () Bool)

(assert (=> b!59495 (= e!39118 (ListLongMap!1364 Nil!1427))))

(declare-fun b!59496 () Bool)

(assert (=> b!59496 (= e!39119 e!39120)))

(declare-fun c!7618 () Bool)

(declare-fun e!39122 () Bool)

(assert (=> b!59496 (= c!7618 e!39122)))

(declare-fun res!33025 () Bool)

(assert (=> b!59496 (=> (not res!33025) (not e!39122))))

(assert (=> b!59496 (= res!33025 (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(declare-fun b!59497 () Bool)

(assert (=> b!59497 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(assert (=> b!59497 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2012 lt!23824)))))

(assert (=> b!59497 (= e!39117 (= (apply!66 lt!24207 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)) (get!1066 (select (arr!1782 lt!23824) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2043 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!59498 () Bool)

(declare-fun lt!24202 () Unit!1551)

(declare-fun lt!24204 () Unit!1551)

(assert (=> b!59498 (= lt!24202 lt!24204)))

(declare-fun lt!24206 () V!2843)

(declare-fun lt!24208 () (_ BitVec 64))

(declare-fun lt!24203 () (_ BitVec 64))

(declare-fun lt!24205 () ListLongMap!1363)

(assert (=> b!59498 (not (contains!682 (+!81 lt!24205 (tuple2!2023 lt!24208 lt!24206)) lt!24203))))

(assert (=> b!59498 (= lt!24204 (addStillNotContains!15 lt!24205 lt!24208 lt!24206 lt!24203))))

(assert (=> b!59498 (= lt!24203 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!59498 (= lt!24206 (get!1066 (select (arr!1782 lt!23824) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2043 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!59498 (= lt!24208 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!59498 (= lt!24205 call!4470)))

(assert (=> b!59498 (= e!39121 (+!81 call!4470 (tuple2!2023 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000) (get!1066 (select (arr!1782 lt!23824) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2043 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun d!11417 () Bool)

(assert (=> d!11417 e!39119))

(declare-fun res!33024 () Bool)

(assert (=> d!11417 (=> (not res!33024) (not e!39119))))

(assert (=> d!11417 (= res!33024 (not (contains!682 lt!24207 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!11417 (= lt!24207 e!39118)))

(declare-fun c!7619 () Bool)

(assert (=> d!11417 (= c!7619 (bvsge #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(assert (=> d!11417 (validMask!0 (mask!5927 newMap!16))))

(assert (=> d!11417 (= (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)) lt!24207)))

(declare-fun b!59491 () Bool)

(assert (=> b!59491 (= e!39120 e!39123)))

(declare-fun c!7620 () Bool)

(assert (=> b!59491 (= c!7620 (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(declare-fun b!59499 () Bool)

(assert (=> b!59499 (= e!39122 (validKeyInArray!0 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59499 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!59500 () Bool)

(assert (=> b!59500 (= e!39123 (= lt!24207 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2043 newMap!16))))))

(assert (= (and d!11417 c!7619) b!59495))

(assert (= (and d!11417 (not c!7619)) b!59493))

(assert (= (and b!59493 c!7617) b!59498))

(assert (= (and b!59493 (not c!7617)) b!59494))

(assert (= (or b!59498 b!59494) bm!4467))

(assert (= (and d!11417 res!33024) b!59490))

(assert (= (and b!59490 res!33026) b!59496))

(assert (= (and b!59496 res!33025) b!59499))

(assert (= (and b!59496 c!7618) b!59492))

(assert (= (and b!59496 (not c!7618)) b!59491))

(assert (= (and b!59492 res!33027) b!59497))

(assert (= (and b!59491 c!7620) b!59500))

(assert (= (and b!59491 (not c!7620)) b!59489))

(declare-fun b_lambda!2619 () Bool)

(assert (=> (not b_lambda!2619) (not b!59497)))

(assert (=> b!59497 t!4775))

(declare-fun b_and!3603 () Bool)

(assert (= b_and!3599 (and (=> t!4775 result!2381) b_and!3603)))

(assert (=> b!59497 t!4777))

(declare-fun b_and!3605 () Bool)

(assert (= b_and!3601 (and (=> t!4777 result!2383) b_and!3605)))

(declare-fun b_lambda!2621 () Bool)

(assert (=> (not b_lambda!2621) (not b!59498)))

(assert (=> b!59498 t!4775))

(declare-fun b_and!3607 () Bool)

(assert (= b_and!3603 (and (=> t!4775 result!2381) b_and!3607)))

(assert (=> b!59498 t!4777))

(declare-fun b_and!3609 () Bool)

(assert (= b_and!3605 (and (=> t!4777 result!2383) b_and!3609)))

(declare-fun m!51501 () Bool)

(assert (=> b!59498 m!51501))

(assert (=> b!59498 m!50809))

(assert (=> b!59498 m!50813))

(assert (=> b!59498 m!50815))

(assert (=> b!59498 m!50813))

(declare-fun m!51503 () Bool)

(assert (=> b!59498 m!51503))

(declare-fun m!51505 () Bool)

(assert (=> b!59498 m!51505))

(assert (=> b!59498 m!50803))

(assert (=> b!59498 m!51505))

(declare-fun m!51507 () Bool)

(assert (=> b!59498 m!51507))

(assert (=> b!59498 m!50809))

(declare-fun m!51509 () Bool)

(assert (=> b!59500 m!51509))

(assert (=> b!59492 m!50803))

(assert (=> b!59492 m!50803))

(declare-fun m!51511 () Bool)

(assert (=> b!59492 m!51511))

(declare-fun m!51513 () Bool)

(assert (=> b!59490 m!51513))

(assert (=> b!59493 m!50803))

(assert (=> b!59493 m!50803))

(assert (=> b!59493 m!50805))

(declare-fun m!51515 () Bool)

(assert (=> b!59489 m!51515))

(assert (=> bm!4467 m!51509))

(assert (=> b!59499 m!50803))

(assert (=> b!59499 m!50803))

(assert (=> b!59499 m!50805))

(declare-fun m!51517 () Bool)

(assert (=> d!11417 m!51517))

(assert (=> d!11417 m!50771))

(assert (=> b!59497 m!50803))

(declare-fun m!51519 () Bool)

(assert (=> b!59497 m!51519))

(assert (=> b!59497 m!50809))

(assert (=> b!59497 m!50813))

(assert (=> b!59497 m!50815))

(assert (=> b!59497 m!50813))

(assert (=> b!59497 m!50803))

(assert (=> b!59497 m!50809))

(assert (=> bm!4414 d!11417))

(declare-fun d!11419 () Bool)

(assert (=> d!11419 (= (get!1069 (getValueByKey!124 (toList!697 (+!81 lt!23725 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!23738)) (v!2386 (getValueByKey!124 (toList!697 (+!81 lt!23725 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!23738)))))

(assert (=> d!11335 d!11419))

(declare-fun b!59502 () Bool)

(declare-fun e!39124 () Option!130)

(declare-fun e!39125 () Option!130)

(assert (=> b!59502 (= e!39124 e!39125)))

(declare-fun c!7622 () Bool)

(assert (=> b!59502 (= c!7622 (and ((_ is Cons!1426) (toList!697 (+!81 lt!23725 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))) (not (= (_1!1022 (h!2007 (toList!697 (+!81 lt!23725 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))) lt!23738))))))

(declare-fun b!59501 () Bool)

(assert (=> b!59501 (= e!39124 (Some!129 (_2!1022 (h!2007 (toList!697 (+!81 lt!23725 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))))

(declare-fun b!59503 () Bool)

(assert (=> b!59503 (= e!39125 (getValueByKey!124 (t!4768 (toList!697 (+!81 lt!23725 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))) lt!23738))))

(declare-fun b!59504 () Bool)

(assert (=> b!59504 (= e!39125 None!128)))

(declare-fun c!7621 () Bool)

(declare-fun d!11421 () Bool)

(assert (=> d!11421 (= c!7621 (and ((_ is Cons!1426) (toList!697 (+!81 lt!23725 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))) (= (_1!1022 (h!2007 (toList!697 (+!81 lt!23725 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))) lt!23738)))))

(assert (=> d!11421 (= (getValueByKey!124 (toList!697 (+!81 lt!23725 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!23738) e!39124)))

(assert (= (and d!11421 c!7621) b!59501))

(assert (= (and d!11421 (not c!7621)) b!59502))

(assert (= (and b!59502 c!7622) b!59503))

(assert (= (and b!59502 (not c!7622)) b!59504))

(declare-fun m!51521 () Bool)

(assert (=> b!59503 m!51521))

(assert (=> d!11335 d!11421))

(assert (=> b!59344 d!11263))

(declare-fun bm!4468 () Bool)

(declare-fun call!4471 () Bool)

(declare-fun c!7623 () Bool)

(assert (=> bm!4468 (= call!4471 (arrayNoDuplicates!0 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!7623 (Cons!1427 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) #b00000000000000000000000000000000) Nil!1428) Nil!1428)))))

(declare-fun b!59505 () Bool)

(declare-fun e!39128 () Bool)

(assert (=> b!59505 (= e!39128 (contains!683 Nil!1428 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!59506 () Bool)

(declare-fun e!39127 () Bool)

(assert (=> b!59506 (= e!39127 call!4471)))

(declare-fun b!59507 () Bool)

(assert (=> b!59507 (= e!39127 call!4471)))

(declare-fun b!59508 () Bool)

(declare-fun e!39129 () Bool)

(assert (=> b!59508 (= e!39129 e!39127)))

(assert (=> b!59508 (= c!7623 (validKeyInArray!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun d!11423 () Bool)

(declare-fun res!33030 () Bool)

(declare-fun e!39126 () Bool)

(assert (=> d!11423 (=> res!33030 e!39126)))

(assert (=> d!11423 (= res!33030 (bvsge #b00000000000000000000000000000000 (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992))))))))

(assert (=> d!11423 (= (arrayNoDuplicates!0 (_keys!3667 (v!2383 (underlying!226 thiss!992))) #b00000000000000000000000000000000 Nil!1428) e!39126)))

(declare-fun b!59509 () Bool)

(assert (=> b!59509 (= e!39126 e!39129)))

(declare-fun res!33029 () Bool)

(assert (=> b!59509 (=> (not res!33029) (not e!39129))))

(assert (=> b!59509 (= res!33029 (not e!39128))))

(declare-fun res!33028 () Bool)

(assert (=> b!59509 (=> (not res!33028) (not e!39128))))

(assert (=> b!59509 (= res!33028 (validKeyInArray!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) #b00000000000000000000000000000000)))))

(assert (= (and d!11423 (not res!33030)) b!59509))

(assert (= (and b!59509 res!33028) b!59505))

(assert (= (and b!59509 res!33029) b!59508))

(assert (= (and b!59508 c!7623) b!59506))

(assert (= (and b!59508 (not c!7623)) b!59507))

(assert (= (or b!59506 b!59507) bm!4468))

(declare-fun m!51523 () Bool)

(assert (=> bm!4468 m!51523))

(declare-fun m!51525 () Bool)

(assert (=> bm!4468 m!51525))

(assert (=> b!59505 m!51523))

(assert (=> b!59505 m!51523))

(declare-fun m!51527 () Bool)

(assert (=> b!59505 m!51527))

(assert (=> b!59508 m!51523))

(assert (=> b!59508 m!51523))

(declare-fun m!51529 () Bool)

(assert (=> b!59508 m!51529))

(assert (=> b!59509 m!51523))

(assert (=> b!59509 m!51523))

(assert (=> b!59509 m!51529))

(assert (=> b!59089 d!11423))

(declare-fun d!11425 () Bool)

(assert (=> d!11425 (= (isDefined!77 (getValueByKey!124 (toList!697 (getCurrentListMap!402 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16))) (select (arr!1781 (_keys!3667 newMap!16)) (index!3032 lt!23832)))) (not (isEmpty!293 (getValueByKey!124 (toList!697 (getCurrentListMap!402 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16))) (select (arr!1781 (_keys!3667 newMap!16)) (index!3032 lt!23832))))))))

(declare-fun bs!2580 () Bool)

(assert (= bs!2580 d!11425))

(assert (=> bs!2580 m!50791))

(declare-fun m!51531 () Bool)

(assert (=> bs!2580 m!51531))

(assert (=> b!59092 d!11425))

(declare-fun b!59511 () Bool)

(declare-fun e!39130 () Option!130)

(declare-fun e!39131 () Option!130)

(assert (=> b!59511 (= e!39130 e!39131)))

(declare-fun c!7625 () Bool)

(assert (=> b!59511 (= c!7625 (and ((_ is Cons!1426) (toList!697 (getCurrentListMap!402 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))) (not (= (_1!1022 (h!2007 (toList!697 (getCurrentListMap!402 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16))))) (select (arr!1781 (_keys!3667 newMap!16)) (index!3032 lt!23832))))))))

(declare-fun b!59510 () Bool)

(assert (=> b!59510 (= e!39130 (Some!129 (_2!1022 (h!2007 (toList!697 (getCurrentListMap!402 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))))))

(declare-fun b!59512 () Bool)

(assert (=> b!59512 (= e!39131 (getValueByKey!124 (t!4768 (toList!697 (getCurrentListMap!402 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))) (select (arr!1781 (_keys!3667 newMap!16)) (index!3032 lt!23832))))))

(declare-fun b!59513 () Bool)

(assert (=> b!59513 (= e!39131 None!128)))

(declare-fun c!7624 () Bool)

(declare-fun d!11427 () Bool)

(assert (=> d!11427 (= c!7624 (and ((_ is Cons!1426) (toList!697 (getCurrentListMap!402 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))) (= (_1!1022 (h!2007 (toList!697 (getCurrentListMap!402 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16))))) (select (arr!1781 (_keys!3667 newMap!16)) (index!3032 lt!23832)))))))

(assert (=> d!11427 (= (getValueByKey!124 (toList!697 (getCurrentListMap!402 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16))) (select (arr!1781 (_keys!3667 newMap!16)) (index!3032 lt!23832))) e!39130)))

(assert (= (and d!11427 c!7624) b!59510))

(assert (= (and d!11427 (not c!7624)) b!59511))

(assert (= (and b!59511 c!7625) b!59512))

(assert (= (and b!59511 (not c!7625)) b!59513))

(assert (=> b!59512 m!50725))

(declare-fun m!51533 () Bool)

(assert (=> b!59512 m!51533))

(assert (=> b!59092 d!11427))

(declare-fun d!11429 () Bool)

(declare-fun e!39132 () Bool)

(assert (=> d!11429 e!39132))

(declare-fun res!33031 () Bool)

(assert (=> d!11429 (=> res!33031 e!39132)))

(declare-fun lt!24211 () Bool)

(assert (=> d!11429 (= res!33031 (not lt!24211))))

(declare-fun lt!24210 () Bool)

(assert (=> d!11429 (= lt!24211 lt!24210)))

(declare-fun lt!24212 () Unit!1551)

(declare-fun e!39133 () Unit!1551)

(assert (=> d!11429 (= lt!24212 e!39133)))

(declare-fun c!7626 () Bool)

(assert (=> d!11429 (= c!7626 lt!24210)))

(assert (=> d!11429 (= lt!24210 (containsKey!128 (toList!697 lt!24069) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11429 (= (contains!682 lt!24069 #b0000000000000000000000000000000000000000000000000000000000000000) lt!24211)))

(declare-fun b!59514 () Bool)

(declare-fun lt!24209 () Unit!1551)

(assert (=> b!59514 (= e!39133 lt!24209)))

(assert (=> b!59514 (= lt!24209 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 lt!24069) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59514 (isDefined!77 (getValueByKey!124 (toList!697 lt!24069) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59515 () Bool)

(declare-fun Unit!1574 () Unit!1551)

(assert (=> b!59515 (= e!39133 Unit!1574)))

(declare-fun b!59516 () Bool)

(assert (=> b!59516 (= e!39132 (isDefined!77 (getValueByKey!124 (toList!697 lt!24069) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11429 c!7626) b!59514))

(assert (= (and d!11429 (not c!7626)) b!59515))

(assert (= (and d!11429 (not res!33031)) b!59516))

(declare-fun m!51535 () Bool)

(assert (=> d!11429 m!51535))

(declare-fun m!51537 () Bool)

(assert (=> b!59514 m!51537))

(declare-fun m!51539 () Bool)

(assert (=> b!59514 m!51539))

(assert (=> b!59514 m!51539))

(declare-fun m!51541 () Bool)

(assert (=> b!59514 m!51541))

(assert (=> b!59516 m!51539))

(assert (=> b!59516 m!51539))

(assert (=> b!59516 m!51541))

(assert (=> bm!4439 d!11429))

(declare-fun d!11431 () Bool)

(assert (not d!11431))

(assert (=> b!59214 d!11431))

(declare-fun d!11433 () Bool)

(assert (=> d!11433 (isDefined!77 (getValueByKey!124 (toList!697 lt!23739) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!24213 () Unit!1551)

(assert (=> d!11433 (= lt!24213 (choose!305 (toList!697 lt!23739) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!39134 () Bool)

(assert (=> d!11433 e!39134))

(declare-fun res!33032 () Bool)

(assert (=> d!11433 (=> (not res!33032) (not e!39134))))

(assert (=> d!11433 (= res!33032 (isStrictlySorted!284 (toList!697 lt!23739)))))

(assert (=> d!11433 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 lt!23739) #b0000000000000000000000000000000000000000000000000000000000000000) lt!24213)))

(declare-fun b!59517 () Bool)

(assert (=> b!59517 (= e!39134 (containsKey!128 (toList!697 lt!23739) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!11433 res!33032) b!59517))

(assert (=> d!11433 m!51093))

(assert (=> d!11433 m!51093))

(assert (=> d!11433 m!51095))

(declare-fun m!51543 () Bool)

(assert (=> d!11433 m!51543))

(declare-fun m!51545 () Bool)

(assert (=> d!11433 m!51545))

(assert (=> b!59517 m!51089))

(assert (=> b!59286 d!11433))

(declare-fun d!11435 () Bool)

(assert (=> d!11435 (= (isDefined!77 (getValueByKey!124 (toList!697 lt!23739) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!293 (getValueByKey!124 (toList!697 lt!23739) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!2581 () Bool)

(assert (= bs!2581 d!11435))

(assert (=> bs!2581 m!51093))

(declare-fun m!51547 () Bool)

(assert (=> bs!2581 m!51547))

(assert (=> b!59286 d!11435))

(declare-fun b!59519 () Bool)

(declare-fun e!39135 () Option!130)

(declare-fun e!39136 () Option!130)

(assert (=> b!59519 (= e!39135 e!39136)))

(declare-fun c!7628 () Bool)

(assert (=> b!59519 (= c!7628 (and ((_ is Cons!1426) (toList!697 lt!23739)) (not (= (_1!1022 (h!2007 (toList!697 lt!23739))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!59518 () Bool)

(assert (=> b!59518 (= e!39135 (Some!129 (_2!1022 (h!2007 (toList!697 lt!23739)))))))

(declare-fun b!59520 () Bool)

(assert (=> b!59520 (= e!39136 (getValueByKey!124 (t!4768 (toList!697 lt!23739)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59521 () Bool)

(assert (=> b!59521 (= e!39136 None!128)))

(declare-fun d!11437 () Bool)

(declare-fun c!7627 () Bool)

(assert (=> d!11437 (= c!7627 (and ((_ is Cons!1426) (toList!697 lt!23739)) (= (_1!1022 (h!2007 (toList!697 lt!23739))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!11437 (= (getValueByKey!124 (toList!697 lt!23739) #b0000000000000000000000000000000000000000000000000000000000000000) e!39135)))

(assert (= (and d!11437 c!7627) b!59518))

(assert (= (and d!11437 (not c!7627)) b!59519))

(assert (= (and b!59519 c!7628) b!59520))

(assert (= (and b!59519 (not c!7628)) b!59521))

(declare-fun m!51549 () Bool)

(assert (=> b!59520 m!51549))

(assert (=> b!59286 d!11437))

(declare-fun b!59523 () Bool)

(declare-fun e!39137 () Option!130)

(declare-fun e!39138 () Option!130)

(assert (=> b!59523 (= e!39137 e!39138)))

(declare-fun c!7630 () Bool)

(assert (=> b!59523 (= c!7630 (and ((_ is Cons!1426) (toList!697 lt!24156)) (not (= (_1!1022 (h!2007 (toList!697 lt!24156))) (_1!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun b!59522 () Bool)

(assert (=> b!59522 (= e!39137 (Some!129 (_2!1022 (h!2007 (toList!697 lt!24156)))))))

(declare-fun b!59524 () Bool)

(assert (=> b!59524 (= e!39138 (getValueByKey!124 (t!4768 (toList!697 lt!24156)) (_1!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!59525 () Bool)

(assert (=> b!59525 (= e!39138 None!128)))

(declare-fun d!11439 () Bool)

(declare-fun c!7629 () Bool)

(assert (=> d!11439 (= c!7629 (and ((_ is Cons!1426) (toList!697 lt!24156)) (= (_1!1022 (h!2007 (toList!697 lt!24156))) (_1!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!11439 (= (getValueByKey!124 (toList!697 lt!24156) (_1!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!39137)))

(assert (= (and d!11439 c!7629) b!59522))

(assert (= (and d!11439 (not c!7629)) b!59523))

(assert (= (and b!59523 c!7630) b!59524))

(assert (= (and b!59523 (not c!7630)) b!59525))

(declare-fun m!51551 () Bool)

(assert (=> b!59524 m!51551))

(assert (=> b!59413 d!11439))

(declare-fun d!11441 () Bool)

(declare-fun e!39139 () Bool)

(assert (=> d!11441 e!39139))

(declare-fun res!33033 () Bool)

(assert (=> d!11441 (=> res!33033 e!39139)))

(declare-fun lt!24216 () Bool)

(assert (=> d!11441 (= res!33033 (not lt!24216))))

(declare-fun lt!24215 () Bool)

(assert (=> d!11441 (= lt!24216 lt!24215)))

(declare-fun lt!24217 () Unit!1551)

(declare-fun e!39140 () Unit!1551)

(assert (=> d!11441 (= lt!24217 e!39140)))

(declare-fun c!7631 () Bool)

(assert (=> d!11441 (= c!7631 lt!24215)))

(assert (=> d!11441 (= lt!24215 (containsKey!128 (toList!697 lt!23989) (_1!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(assert (=> d!11441 (= (contains!682 lt!23989 (_1!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))) lt!24216)))

(declare-fun b!59526 () Bool)

(declare-fun lt!24214 () Unit!1551)

(assert (=> b!59526 (= e!39140 lt!24214)))

(assert (=> b!59526 (= lt!24214 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 lt!23989) (_1!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(assert (=> b!59526 (isDefined!77 (getValueByKey!124 (toList!697 lt!23989) (_1!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(declare-fun b!59527 () Bool)

(declare-fun Unit!1575 () Unit!1551)

(assert (=> b!59527 (= e!39140 Unit!1575)))

(declare-fun b!59528 () Bool)

(assert (=> b!59528 (= e!39139 (isDefined!77 (getValueByKey!124 (toList!697 lt!23989) (_1!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))))

(assert (= (and d!11441 c!7631) b!59526))

(assert (= (and d!11441 (not c!7631)) b!59527))

(assert (= (and d!11441 (not res!33033)) b!59528))

(declare-fun m!51553 () Bool)

(assert (=> d!11441 m!51553))

(declare-fun m!51555 () Bool)

(assert (=> b!59526 m!51555))

(assert (=> b!59526 m!50967))

(assert (=> b!59526 m!50967))

(declare-fun m!51557 () Bool)

(assert (=> b!59526 m!51557))

(assert (=> b!59528 m!50967))

(assert (=> b!59528 m!50967))

(assert (=> b!59528 m!51557))

(assert (=> d!11287 d!11441))

(declare-fun b!59530 () Bool)

(declare-fun e!39141 () Option!130)

(declare-fun e!39142 () Option!130)

(assert (=> b!59530 (= e!39141 e!39142)))

(declare-fun c!7633 () Bool)

(assert (=> b!59530 (= c!7633 (and ((_ is Cons!1426) lt!23991) (not (= (_1!1022 (h!2007 lt!23991)) (_1!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))))

(declare-fun b!59529 () Bool)

(assert (=> b!59529 (= e!39141 (Some!129 (_2!1022 (h!2007 lt!23991))))))

(declare-fun b!59531 () Bool)

(assert (=> b!59531 (= e!39142 (getValueByKey!124 (t!4768 lt!23991) (_1!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(declare-fun b!59532 () Bool)

(assert (=> b!59532 (= e!39142 None!128)))

(declare-fun d!11443 () Bool)

(declare-fun c!7632 () Bool)

(assert (=> d!11443 (= c!7632 (and ((_ is Cons!1426) lt!23991) (= (_1!1022 (h!2007 lt!23991)) (_1!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))))

(assert (=> d!11443 (= (getValueByKey!124 lt!23991 (_1!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))) e!39141)))

(assert (= (and d!11443 c!7632) b!59529))

(assert (= (and d!11443 (not c!7632)) b!59530))

(assert (= (and b!59530 c!7633) b!59531))

(assert (= (and b!59530 (not c!7633)) b!59532))

(declare-fun m!51559 () Bool)

(assert (=> b!59531 m!51559))

(assert (=> d!11287 d!11443))

(declare-fun d!11445 () Bool)

(assert (=> d!11445 (= (getValueByKey!124 lt!23991 (_1!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))) (Some!129 (_2!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(declare-fun lt!24220 () Unit!1551)

(declare-fun choose!311 (List!1430 (_ BitVec 64) V!2843) Unit!1551)

(assert (=> d!11445 (= lt!24220 (choose!311 lt!23991 (_1!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) (_2!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(declare-fun e!39145 () Bool)

(assert (=> d!11445 e!39145))

(declare-fun res!33038 () Bool)

(assert (=> d!11445 (=> (not res!33038) (not e!39145))))

(assert (=> d!11445 (= res!33038 (isStrictlySorted!284 lt!23991))))

(assert (=> d!11445 (= (lemmaContainsTupThenGetReturnValue!41 lt!23991 (_1!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) (_2!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))) lt!24220)))

(declare-fun b!59537 () Bool)

(declare-fun res!33039 () Bool)

(assert (=> b!59537 (=> (not res!33039) (not e!39145))))

(assert (=> b!59537 (= res!33039 (containsKey!128 lt!23991 (_1!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(declare-fun b!59538 () Bool)

(assert (=> b!59538 (= e!39145 (contains!684 lt!23991 (tuple2!2023 (_1!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) (_2!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))))

(assert (= (and d!11445 res!33038) b!59537))

(assert (= (and b!59537 res!33039) b!59538))

(assert (=> d!11445 m!50961))

(declare-fun m!51561 () Bool)

(assert (=> d!11445 m!51561))

(declare-fun m!51563 () Bool)

(assert (=> d!11445 m!51563))

(declare-fun m!51565 () Bool)

(assert (=> b!59537 m!51565))

(declare-fun m!51567 () Bool)

(assert (=> b!59538 m!51567))

(assert (=> d!11287 d!11445))

(declare-fun b!59559 () Bool)

(declare-fun e!39158 () List!1430)

(declare-fun call!4480 () List!1430)

(assert (=> b!59559 (= e!39158 call!4480)))

(declare-fun b!59560 () Bool)

(declare-fun lt!24223 () List!1430)

(declare-fun e!39157 () Bool)

(assert (=> b!59560 (= e!39157 (contains!684 lt!24223 (tuple2!2023 (_1!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) (_2!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))))

(declare-fun e!39156 () List!1430)

(declare-fun b!59561 () Bool)

(assert (=> b!59561 (= e!39156 (insertStrictlySorted!44 (t!4768 (toList!697 (ite c!7462 call!4332 (ite c!7465 call!4335 call!4336)))) (_1!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) (_2!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(declare-fun bm!4475 () Bool)

(declare-fun call!4478 () List!1430)

(declare-fun call!4479 () List!1430)

(assert (=> bm!4475 (= call!4478 call!4479)))

(declare-fun b!59562 () Bool)

(declare-fun e!39159 () List!1430)

(declare-fun e!39160 () List!1430)

(assert (=> b!59562 (= e!39159 e!39160)))

(declare-fun c!7643 () Bool)

(assert (=> b!59562 (= c!7643 (and ((_ is Cons!1426) (toList!697 (ite c!7462 call!4332 (ite c!7465 call!4335 call!4336)))) (= (_1!1022 (h!2007 (toList!697 (ite c!7462 call!4332 (ite c!7465 call!4335 call!4336))))) (_1!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))))

(declare-fun d!11447 () Bool)

(assert (=> d!11447 e!39157))

(declare-fun res!33045 () Bool)

(assert (=> d!11447 (=> (not res!33045) (not e!39157))))

(assert (=> d!11447 (= res!33045 (isStrictlySorted!284 lt!24223))))

(assert (=> d!11447 (= lt!24223 e!39159)))

(declare-fun c!7645 () Bool)

(assert (=> d!11447 (= c!7645 (and ((_ is Cons!1426) (toList!697 (ite c!7462 call!4332 (ite c!7465 call!4335 call!4336)))) (bvslt (_1!1022 (h!2007 (toList!697 (ite c!7462 call!4332 (ite c!7465 call!4335 call!4336))))) (_1!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))))

(assert (=> d!11447 (isStrictlySorted!284 (toList!697 (ite c!7462 call!4332 (ite c!7465 call!4335 call!4336))))))

(assert (=> d!11447 (= (insertStrictlySorted!44 (toList!697 (ite c!7462 call!4332 (ite c!7465 call!4335 call!4336))) (_1!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) (_2!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))) lt!24223)))

(declare-fun bm!4476 () Bool)

(assert (=> bm!4476 (= call!4480 call!4478)))

(declare-fun b!59563 () Bool)

(assert (=> b!59563 (= e!39158 call!4480)))

(declare-fun b!59564 () Bool)

(assert (=> b!59564 (= e!39159 call!4479)))

(declare-fun b!59565 () Bool)

(assert (=> b!59565 (= e!39160 call!4478)))

(declare-fun c!7642 () Bool)

(declare-fun b!59566 () Bool)

(assert (=> b!59566 (= e!39156 (ite c!7643 (t!4768 (toList!697 (ite c!7462 call!4332 (ite c!7465 call!4335 call!4336)))) (ite c!7642 (Cons!1426 (h!2007 (toList!697 (ite c!7462 call!4332 (ite c!7465 call!4335 call!4336)))) (t!4768 (toList!697 (ite c!7462 call!4332 (ite c!7465 call!4335 call!4336))))) Nil!1427)))))

(declare-fun b!59567 () Bool)

(declare-fun res!33044 () Bool)

(assert (=> b!59567 (=> (not res!33044) (not e!39157))))

(assert (=> b!59567 (= res!33044 (containsKey!128 lt!24223 (_1!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(declare-fun b!59568 () Bool)

(assert (=> b!59568 (= c!7642 (and ((_ is Cons!1426) (toList!697 (ite c!7462 call!4332 (ite c!7465 call!4335 call!4336)))) (bvsgt (_1!1022 (h!2007 (toList!697 (ite c!7462 call!4332 (ite c!7465 call!4335 call!4336))))) (_1!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))))

(assert (=> b!59568 (= e!39160 e!39158)))

(declare-fun bm!4477 () Bool)

(declare-fun $colon$colon!60 (List!1430 tuple2!2022) List!1430)

(assert (=> bm!4477 (= call!4479 ($colon$colon!60 e!39156 (ite c!7645 (h!2007 (toList!697 (ite c!7462 call!4332 (ite c!7465 call!4335 call!4336)))) (tuple2!2023 (_1!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) (_2!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))))

(declare-fun c!7644 () Bool)

(assert (=> bm!4477 (= c!7644 c!7645)))

(assert (= (and d!11447 c!7645) b!59564))

(assert (= (and d!11447 (not c!7645)) b!59562))

(assert (= (and b!59562 c!7643) b!59565))

(assert (= (and b!59562 (not c!7643)) b!59568))

(assert (= (and b!59568 c!7642) b!59559))

(assert (= (and b!59568 (not c!7642)) b!59563))

(assert (= (or b!59559 b!59563) bm!4476))

(assert (= (or b!59565 bm!4476) bm!4475))

(assert (= (or b!59564 bm!4475) bm!4477))

(assert (= (and bm!4477 c!7644) b!59561))

(assert (= (and bm!4477 (not c!7644)) b!59566))

(assert (= (and d!11447 res!33045) b!59567))

(assert (= (and b!59567 res!33044) b!59560))

(declare-fun m!51569 () Bool)

(assert (=> d!11447 m!51569))

(declare-fun m!51571 () Bool)

(assert (=> d!11447 m!51571))

(declare-fun m!51573 () Bool)

(assert (=> bm!4477 m!51573))

(declare-fun m!51575 () Bool)

(assert (=> b!59561 m!51575))

(declare-fun m!51577 () Bool)

(assert (=> b!59567 m!51577))

(declare-fun m!51579 () Bool)

(assert (=> b!59560 m!51579))

(assert (=> d!11287 d!11447))

(declare-fun b!59569 () Bool)

(declare-fun e!39162 () (_ BitVec 32))

(declare-fun call!4481 () (_ BitVec 32))

(assert (=> b!59569 (= e!39162 (bvadd #b00000000000000000000000000000001 call!4481))))

(declare-fun bm!4478 () Bool)

(assert (=> bm!4478 (= call!4481 (arrayCountValidKeys!0 (_keys!3667 (_2!1021 lt!23809)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2011 (_keys!3667 (_2!1021 lt!23809)))))))

(declare-fun b!59570 () Bool)

(declare-fun e!39161 () (_ BitVec 32))

(assert (=> b!59570 (= e!39161 e!39162)))

(declare-fun c!7647 () Bool)

(assert (=> b!59570 (= c!7647 (validKeyInArray!0 (select (arr!1781 (_keys!3667 (_2!1021 lt!23809))) #b00000000000000000000000000000000)))))

(declare-fun b!59571 () Bool)

(assert (=> b!59571 (= e!39161 #b00000000000000000000000000000000)))

(declare-fun b!59572 () Bool)

(assert (=> b!59572 (= e!39162 call!4481)))

(declare-fun d!11449 () Bool)

(declare-fun lt!24224 () (_ BitVec 32))

(assert (=> d!11449 (and (bvsge lt!24224 #b00000000000000000000000000000000) (bvsle lt!24224 (bvsub (size!2011 (_keys!3667 (_2!1021 lt!23809))) #b00000000000000000000000000000000)))))

(assert (=> d!11449 (= lt!24224 e!39161)))

(declare-fun c!7646 () Bool)

(assert (=> d!11449 (= c!7646 (bvsge #b00000000000000000000000000000000 (size!2011 (_keys!3667 (_2!1021 lt!23809)))))))

(assert (=> d!11449 (and (bvsle #b00000000000000000000000000000000 (size!2011 (_keys!3667 (_2!1021 lt!23809)))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2011 (_keys!3667 (_2!1021 lt!23809))) (size!2011 (_keys!3667 (_2!1021 lt!23809)))))))

(assert (=> d!11449 (= (arrayCountValidKeys!0 (_keys!3667 (_2!1021 lt!23809)) #b00000000000000000000000000000000 (size!2011 (_keys!3667 (_2!1021 lt!23809)))) lt!24224)))

(assert (= (and d!11449 c!7646) b!59571))

(assert (= (and d!11449 (not c!7646)) b!59570))

(assert (= (and b!59570 c!7647) b!59569))

(assert (= (and b!59570 (not c!7647)) b!59572))

(assert (= (or b!59569 b!59572) bm!4478))

(declare-fun m!51581 () Bool)

(assert (=> bm!4478 m!51581))

(declare-fun m!51583 () Bool)

(assert (=> b!59570 m!51583))

(assert (=> b!59570 m!51583))

(declare-fun m!51585 () Bool)

(assert (=> b!59570 m!51585))

(assert (=> b!59244 d!11449))

(declare-fun d!11451 () Bool)

(assert (=> d!11451 (= (get!1069 (getValueByKey!124 (toList!697 lt!23739) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (v!2386 (getValueByKey!124 (toList!697 lt!23739) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!11283 d!11451))

(declare-fun b!59574 () Bool)

(declare-fun e!39163 () Option!130)

(declare-fun e!39164 () Option!130)

(assert (=> b!59574 (= e!39163 e!39164)))

(declare-fun c!7649 () Bool)

(assert (=> b!59574 (= c!7649 (and ((_ is Cons!1426) (toList!697 lt!23739)) (not (= (_1!1022 (h!2007 (toList!697 lt!23739))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun b!59573 () Bool)

(assert (=> b!59573 (= e!39163 (Some!129 (_2!1022 (h!2007 (toList!697 lt!23739)))))))

(declare-fun b!59575 () Bool)

(assert (=> b!59575 (= e!39164 (getValueByKey!124 (t!4768 (toList!697 lt!23739)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!59576 () Bool)

(assert (=> b!59576 (= e!39164 None!128)))

(declare-fun d!11453 () Bool)

(declare-fun c!7648 () Bool)

(assert (=> d!11453 (= c!7648 (and ((_ is Cons!1426) (toList!697 lt!23739)) (= (_1!1022 (h!2007 (toList!697 lt!23739))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!11453 (= (getValueByKey!124 (toList!697 lt!23739) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!39163)))

(assert (= (and d!11453 c!7648) b!59573))

(assert (= (and d!11453 (not c!7648)) b!59574))

(assert (= (and b!59574 c!7649) b!59575))

(assert (= (and b!59574 (not c!7649)) b!59576))

(assert (=> b!59575 m!50627))

(declare-fun m!51587 () Bool)

(assert (=> b!59575 m!51587))

(assert (=> d!11283 d!11453))

(declare-fun d!11455 () Bool)

(assert (=> d!11455 (= (content!63 Nil!1428) ((as const (Array (_ BitVec 64) Bool)) false))))

(assert (=> d!11291 d!11455))

(declare-fun d!11457 () Bool)

(assert (=> d!11457 (isDefined!77 (getValueByKey!124 (toList!697 lt!23739) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!24225 () Unit!1551)

(assert (=> d!11457 (= lt!24225 (choose!305 (toList!697 lt!23739) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!39165 () Bool)

(assert (=> d!11457 e!39165))

(declare-fun res!33046 () Bool)

(assert (=> d!11457 (=> (not res!33046) (not e!39165))))

(assert (=> d!11457 (= res!33046 (isStrictlySorted!284 (toList!697 lt!23739)))))

(assert (=> d!11457 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 lt!23739) #b1000000000000000000000000000000000000000000000000000000000000000) lt!24225)))

(declare-fun b!59577 () Bool)

(assert (=> b!59577 (= e!39165 (containsKey!128 (toList!697 lt!23739) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!11457 res!33046) b!59577))

(assert (=> d!11457 m!50987))

(assert (=> d!11457 m!50987))

(assert (=> d!11457 m!50989))

(declare-fun m!51589 () Bool)

(assert (=> d!11457 m!51589))

(assert (=> d!11457 m!51545))

(assert (=> b!59577 m!50983))

(assert (=> b!59215 d!11457))

(declare-fun d!11459 () Bool)

(assert (=> d!11459 (= (isDefined!77 (getValueByKey!124 (toList!697 lt!23739) #b1000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!293 (getValueByKey!124 (toList!697 lt!23739) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!2582 () Bool)

(assert (= bs!2582 d!11459))

(assert (=> bs!2582 m!50987))

(declare-fun m!51591 () Bool)

(assert (=> bs!2582 m!51591))

(assert (=> b!59215 d!11459))

(declare-fun b!59579 () Bool)

(declare-fun e!39166 () Option!130)

(declare-fun e!39167 () Option!130)

(assert (=> b!59579 (= e!39166 e!39167)))

(declare-fun c!7651 () Bool)

(assert (=> b!59579 (= c!7651 (and ((_ is Cons!1426) (toList!697 lt!23739)) (not (= (_1!1022 (h!2007 (toList!697 lt!23739))) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!59578 () Bool)

(assert (=> b!59578 (= e!39166 (Some!129 (_2!1022 (h!2007 (toList!697 lt!23739)))))))

(declare-fun b!59580 () Bool)

(assert (=> b!59580 (= e!39167 (getValueByKey!124 (t!4768 (toList!697 lt!23739)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59581 () Bool)

(assert (=> b!59581 (= e!39167 None!128)))

(declare-fun d!11461 () Bool)

(declare-fun c!7650 () Bool)

(assert (=> d!11461 (= c!7650 (and ((_ is Cons!1426) (toList!697 lt!23739)) (= (_1!1022 (h!2007 (toList!697 lt!23739))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!11461 (= (getValueByKey!124 (toList!697 lt!23739) #b1000000000000000000000000000000000000000000000000000000000000000) e!39166)))

(assert (= (and d!11461 c!7650) b!59578))

(assert (= (and d!11461 (not c!7650)) b!59579))

(assert (= (and b!59579 c!7651) b!59580))

(assert (= (and b!59579 (not c!7651)) b!59581))

(declare-fun m!51593 () Bool)

(assert (=> b!59580 m!51593))

(assert (=> b!59215 d!11461))

(declare-fun d!11463 () Bool)

(declare-fun e!39168 () Bool)

(assert (=> d!11463 e!39168))

(declare-fun res!33047 () Bool)

(assert (=> d!11463 (=> res!33047 e!39168)))

(declare-fun lt!24228 () Bool)

(assert (=> d!11463 (= res!33047 (not lt!24228))))

(declare-fun lt!24227 () Bool)

(assert (=> d!11463 (= lt!24228 lt!24227)))

(declare-fun lt!24229 () Unit!1551)

(declare-fun e!39169 () Unit!1551)

(assert (=> d!11463 (= lt!24229 e!39169)))

(declare-fun c!7652 () Bool)

(assert (=> d!11463 (= c!7652 lt!24227)))

(assert (=> d!11463 (= lt!24227 (containsKey!128 (toList!697 lt!23870) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11463 (= (contains!682 lt!23870 #b0000000000000000000000000000000000000000000000000000000000000000) lt!24228)))

(declare-fun b!59582 () Bool)

(declare-fun lt!24226 () Unit!1551)

(assert (=> b!59582 (= e!39169 lt!24226)))

(assert (=> b!59582 (= lt!24226 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 lt!23870) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59582 (isDefined!77 (getValueByKey!124 (toList!697 lt!23870) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59583 () Bool)

(declare-fun Unit!1576 () Unit!1551)

(assert (=> b!59583 (= e!39169 Unit!1576)))

(declare-fun b!59584 () Bool)

(assert (=> b!59584 (= e!39168 (isDefined!77 (getValueByKey!124 (toList!697 lt!23870) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11463 c!7652) b!59582))

(assert (= (and d!11463 (not c!7652)) b!59583))

(assert (= (and d!11463 (not res!33047)) b!59584))

(declare-fun m!51595 () Bool)

(assert (=> d!11463 m!51595))

(declare-fun m!51597 () Bool)

(assert (=> b!59582 m!51597))

(declare-fun m!51599 () Bool)

(assert (=> b!59582 m!51599))

(assert (=> b!59582 m!51599))

(declare-fun m!51601 () Bool)

(assert (=> b!59582 m!51601))

(assert (=> b!59584 m!51599))

(assert (=> b!59584 m!51599))

(assert (=> b!59584 m!51601))

(assert (=> bm!4410 d!11463))

(assert (=> bm!4464 d!11271))

(declare-fun d!11465 () Bool)

(declare-fun e!39170 () Bool)

(assert (=> d!11465 e!39170))

(declare-fun res!33048 () Bool)

(assert (=> d!11465 (=> (not res!33048) (not e!39170))))

(declare-fun lt!24231 () ListLongMap!1363)

(assert (=> d!11465 (= res!33048 (contains!682 lt!24231 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16))))))))

(declare-fun lt!24233 () List!1430)

(assert (=> d!11465 (= lt!24231 (ListLongMap!1364 lt!24233))))

(declare-fun lt!24230 () Unit!1551)

(declare-fun lt!24232 () Unit!1551)

(assert (=> d!11465 (= lt!24230 lt!24232)))

(assert (=> d!11465 (= (getValueByKey!124 lt!24233 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16))))) (Some!129 (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16))))))))

(assert (=> d!11465 (= lt!24232 (lemmaContainsTupThenGetReturnValue!41 lt!24233 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16))))))))

(assert (=> d!11465 (= lt!24233 (insertStrictlySorted!44 (toList!697 call!4444) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16))))))))

(assert (=> d!11465 (= (+!81 call!4444 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)))) lt!24231)))

(declare-fun b!59585 () Bool)

(declare-fun res!33049 () Bool)

(assert (=> b!59585 (=> (not res!33049) (not e!39170))))

(assert (=> b!59585 (= res!33049 (= (getValueByKey!124 (toList!697 lt!24231) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16))))) (Some!129 (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)))))))))

(declare-fun b!59586 () Bool)

(assert (=> b!59586 (= e!39170 (contains!684 (toList!697 lt!24231) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)))))))

(assert (= (and d!11465 res!33048) b!59585))

(assert (= (and b!59585 res!33049) b!59586))

(declare-fun m!51603 () Bool)

(assert (=> d!11465 m!51603))

(declare-fun m!51605 () Bool)

(assert (=> d!11465 m!51605))

(declare-fun m!51607 () Bool)

(assert (=> d!11465 m!51607))

(declare-fun m!51609 () Bool)

(assert (=> d!11465 m!51609))

(declare-fun m!51611 () Bool)

(assert (=> b!59585 m!51611))

(declare-fun m!51613 () Bool)

(assert (=> b!59586 m!51613))

(assert (=> b!59292 d!11465))

(declare-fun d!11467 () Bool)

(declare-fun e!39171 () Bool)

(assert (=> d!11467 e!39171))

(declare-fun res!33050 () Bool)

(assert (=> d!11467 (=> res!33050 e!39171)))

(declare-fun lt!24236 () Bool)

(assert (=> d!11467 (= res!33050 (not lt!24236))))

(declare-fun lt!24235 () Bool)

(assert (=> d!11467 (= lt!24236 lt!24235)))

(declare-fun lt!24237 () Unit!1551)

(declare-fun e!39172 () Unit!1551)

(assert (=> d!11467 (= lt!24237 e!39172)))

(declare-fun c!7653 () Bool)

(assert (=> d!11467 (= c!7653 lt!24235)))

(assert (=> d!11467 (= lt!24235 (containsKey!128 (toList!697 lt!24069) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11467 (= (contains!682 lt!24069 #b1000000000000000000000000000000000000000000000000000000000000000) lt!24236)))

(declare-fun b!59587 () Bool)

(declare-fun lt!24234 () Unit!1551)

(assert (=> b!59587 (= e!39172 lt!24234)))

(assert (=> b!59587 (= lt!24234 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 lt!24069) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59587 (isDefined!77 (getValueByKey!124 (toList!697 lt!24069) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59588 () Bool)

(declare-fun Unit!1577 () Unit!1551)

(assert (=> b!59588 (= e!39172 Unit!1577)))

(declare-fun b!59589 () Bool)

(assert (=> b!59589 (= e!39171 (isDefined!77 (getValueByKey!124 (toList!697 lt!24069) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11467 c!7653) b!59587))

(assert (= (and d!11467 (not c!7653)) b!59588))

(assert (= (and d!11467 (not res!33050)) b!59589))

(declare-fun m!51615 () Bool)

(assert (=> d!11467 m!51615))

(declare-fun m!51617 () Bool)

(assert (=> b!59587 m!51617))

(declare-fun m!51619 () Bool)

(assert (=> b!59587 m!51619))

(assert (=> b!59587 m!51619))

(declare-fun m!51621 () Bool)

(assert (=> b!59587 m!51621))

(assert (=> b!59589 m!51619))

(assert (=> b!59589 m!51619))

(assert (=> b!59589 m!51621))

(assert (=> bm!4444 d!11467))

(declare-fun b!59591 () Bool)

(declare-fun e!39173 () Option!130)

(declare-fun e!39174 () Option!130)

(assert (=> b!59591 (= e!39173 e!39174)))

(declare-fun c!7655 () Bool)

(assert (=> b!59591 (= c!7655 (and ((_ is Cons!1426) (toList!697 lt!24013)) (not (= (_1!1022 (h!2007 (toList!697 lt!24013))) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))))

(declare-fun b!59590 () Bool)

(assert (=> b!59590 (= e!39173 (Some!129 (_2!1022 (h!2007 (toList!697 lt!24013)))))))

(declare-fun b!59592 () Bool)

(assert (=> b!59592 (= e!39174 (getValueByKey!124 (t!4768 (toList!697 lt!24013)) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun b!59593 () Bool)

(assert (=> b!59593 (= e!39174 None!128)))

(declare-fun d!11469 () Bool)

(declare-fun c!7654 () Bool)

(assert (=> d!11469 (= c!7654 (and ((_ is Cons!1426) (toList!697 lt!24013)) (= (_1!1022 (h!2007 (toList!697 lt!24013))) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(assert (=> d!11469 (= (getValueByKey!124 (toList!697 lt!24013) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) e!39173)))

(assert (= (and d!11469 c!7654) b!59590))

(assert (= (and d!11469 (not c!7654)) b!59591))

(assert (= (and b!59591 c!7655) b!59592))

(assert (= (and b!59591 (not c!7655)) b!59593))

(declare-fun m!51623 () Bool)

(assert (=> b!59592 m!51623))

(assert (=> b!59230 d!11469))

(assert (=> b!59189 d!11363))

(declare-fun d!11471 () Bool)

(declare-fun res!33051 () Bool)

(declare-fun e!39175 () Bool)

(assert (=> d!11471 (=> res!33051 e!39175)))

(assert (=> d!11471 (= res!33051 (and ((_ is Cons!1426) (toList!697 e!38829)) (= (_1!1022 (h!2007 (toList!697 e!38829))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355))))))

(assert (=> d!11471 (= (containsKey!128 (toList!697 e!38829) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) e!39175)))

(declare-fun b!59594 () Bool)

(declare-fun e!39176 () Bool)

(assert (=> b!59594 (= e!39175 e!39176)))

(declare-fun res!33052 () Bool)

(assert (=> b!59594 (=> (not res!33052) (not e!39176))))

(assert (=> b!59594 (= res!33052 (and (or (not ((_ is Cons!1426) (toList!697 e!38829))) (bvsle (_1!1022 (h!2007 (toList!697 e!38829))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355))) ((_ is Cons!1426) (toList!697 e!38829)) (bvslt (_1!1022 (h!2007 (toList!697 e!38829))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355))))))

(declare-fun b!59595 () Bool)

(assert (=> b!59595 (= e!39176 (containsKey!128 (t!4768 (toList!697 e!38829)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(assert (= (and d!11471 (not res!33051)) b!59594))

(assert (= (and b!59594 res!33052) b!59595))

(assert (=> b!59595 m!50529))

(declare-fun m!51625 () Bool)

(assert (=> b!59595 m!51625))

(assert (=> d!11359 d!11471))

(declare-fun d!11473 () Bool)

(declare-fun e!39177 () Bool)

(assert (=> d!11473 e!39177))

(declare-fun res!33053 () Bool)

(assert (=> d!11473 (=> res!33053 e!39177)))

(declare-fun lt!24240 () Bool)

(assert (=> d!11473 (= res!33053 (not lt!24240))))

(declare-fun lt!24239 () Bool)

(assert (=> d!11473 (= lt!24240 lt!24239)))

(declare-fun lt!24241 () Unit!1551)

(declare-fun e!39178 () Unit!1551)

(assert (=> d!11473 (= lt!24241 e!39178)))

(declare-fun c!7656 () Bool)

(assert (=> d!11473 (= c!7656 lt!24239)))

(assert (=> d!11473 (= lt!24239 (containsKey!128 (toList!697 lt!24156) (_1!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!11473 (= (contains!682 lt!24156 (_1!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!24240)))

(declare-fun b!59596 () Bool)

(declare-fun lt!24238 () Unit!1551)

(assert (=> b!59596 (= e!39178 lt!24238)))

(assert (=> b!59596 (= lt!24238 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 lt!24156) (_1!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!59596 (isDefined!77 (getValueByKey!124 (toList!697 lt!24156) (_1!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!59597 () Bool)

(declare-fun Unit!1578 () Unit!1551)

(assert (=> b!59597 (= e!39178 Unit!1578)))

(declare-fun b!59598 () Bool)

(assert (=> b!59598 (= e!39177 (isDefined!77 (getValueByKey!124 (toList!697 lt!24156) (_1!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!11473 c!7656) b!59596))

(assert (= (and d!11473 (not c!7656)) b!59597))

(assert (= (and d!11473 (not res!33053)) b!59598))

(declare-fun m!51627 () Bool)

(assert (=> d!11473 m!51627))

(declare-fun m!51629 () Bool)

(assert (=> b!59596 m!51629))

(assert (=> b!59596 m!51351))

(assert (=> b!59596 m!51351))

(declare-fun m!51631 () Bool)

(assert (=> b!59596 m!51631))

(assert (=> b!59598 m!51351))

(assert (=> b!59598 m!51351))

(assert (=> b!59598 m!51631))

(assert (=> d!11361 d!11473))

(declare-fun b!59600 () Bool)

(declare-fun e!39179 () Option!130)

(declare-fun e!39180 () Option!130)

(assert (=> b!59600 (= e!39179 e!39180)))

(declare-fun c!7658 () Bool)

(assert (=> b!59600 (= c!7658 (and ((_ is Cons!1426) lt!24158) (not (= (_1!1022 (h!2007 lt!24158)) (_1!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun b!59599 () Bool)

(assert (=> b!59599 (= e!39179 (Some!129 (_2!1022 (h!2007 lt!24158))))))

(declare-fun b!59601 () Bool)

(assert (=> b!59601 (= e!39180 (getValueByKey!124 (t!4768 lt!24158) (_1!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!59602 () Bool)

(assert (=> b!59602 (= e!39180 None!128)))

(declare-fun d!11475 () Bool)

(declare-fun c!7657 () Bool)

(assert (=> d!11475 (= c!7657 (and ((_ is Cons!1426) lt!24158) (= (_1!1022 (h!2007 lt!24158)) (_1!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!11475 (= (getValueByKey!124 lt!24158 (_1!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!39179)))

(assert (= (and d!11475 c!7657) b!59599))

(assert (= (and d!11475 (not c!7657)) b!59600))

(assert (= (and b!59600 c!7658) b!59601))

(assert (= (and b!59600 (not c!7658)) b!59602))

(declare-fun m!51633 () Bool)

(assert (=> b!59601 m!51633))

(assert (=> d!11361 d!11475))

(declare-fun d!11477 () Bool)

(assert (=> d!11477 (= (getValueByKey!124 lt!24158 (_1!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!129 (_2!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!24242 () Unit!1551)

(assert (=> d!11477 (= lt!24242 (choose!311 lt!24158 (_1!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!39181 () Bool)

(assert (=> d!11477 e!39181))

(declare-fun res!33054 () Bool)

(assert (=> d!11477 (=> (not res!33054) (not e!39181))))

(assert (=> d!11477 (= res!33054 (isStrictlySorted!284 lt!24158))))

(assert (=> d!11477 (= (lemmaContainsTupThenGetReturnValue!41 lt!24158 (_1!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!24242)))

(declare-fun b!59603 () Bool)

(declare-fun res!33055 () Bool)

(assert (=> b!59603 (=> (not res!33055) (not e!39181))))

(assert (=> b!59603 (= res!33055 (containsKey!128 lt!24158 (_1!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!59604 () Bool)

(assert (=> b!59604 (= e!39181 (contains!684 lt!24158 (tuple2!2023 (_1!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!11477 res!33054) b!59603))

(assert (= (and b!59603 res!33055) b!59604))

(assert (=> d!11477 m!51345))

(declare-fun m!51635 () Bool)

(assert (=> d!11477 m!51635))

(declare-fun m!51637 () Bool)

(assert (=> d!11477 m!51637))

(declare-fun m!51639 () Bool)

(assert (=> b!59603 m!51639))

(declare-fun m!51641 () Bool)

(assert (=> b!59604 m!51641))

(assert (=> d!11361 d!11477))

(declare-fun b!59605 () Bool)

(declare-fun e!39184 () List!1430)

(declare-fun call!4484 () List!1430)

(assert (=> b!59605 (= e!39184 call!4484)))

(declare-fun b!59606 () Bool)

(declare-fun e!39183 () Bool)

(declare-fun lt!24243 () List!1430)

(assert (=> b!59606 (= e!39183 (contains!684 lt!24243 (tuple2!2023 (_1!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!59607 () Bool)

(declare-fun e!39182 () List!1430)

(assert (=> b!59607 (= e!39182 (insertStrictlySorted!44 (t!4768 (toList!697 (ite c!7503 (ite c!7507 call!4395 call!4385) call!4406))) (_1!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun bm!4479 () Bool)

(declare-fun call!4482 () List!1430)

(declare-fun call!4483 () List!1430)

(assert (=> bm!4479 (= call!4482 call!4483)))

(declare-fun b!59608 () Bool)

(declare-fun e!39185 () List!1430)

(declare-fun e!39186 () List!1430)

(assert (=> b!59608 (= e!39185 e!39186)))

(declare-fun c!7660 () Bool)

(assert (=> b!59608 (= c!7660 (and ((_ is Cons!1426) (toList!697 (ite c!7503 (ite c!7507 call!4395 call!4385) call!4406))) (= (_1!1022 (h!2007 (toList!697 (ite c!7503 (ite c!7507 call!4395 call!4385) call!4406)))) (_1!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun d!11479 () Bool)

(assert (=> d!11479 e!39183))

(declare-fun res!33057 () Bool)

(assert (=> d!11479 (=> (not res!33057) (not e!39183))))

(assert (=> d!11479 (= res!33057 (isStrictlySorted!284 lt!24243))))

(assert (=> d!11479 (= lt!24243 e!39185)))

(declare-fun c!7662 () Bool)

(assert (=> d!11479 (= c!7662 (and ((_ is Cons!1426) (toList!697 (ite c!7503 (ite c!7507 call!4395 call!4385) call!4406))) (bvslt (_1!1022 (h!2007 (toList!697 (ite c!7503 (ite c!7507 call!4395 call!4385) call!4406)))) (_1!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!11479 (isStrictlySorted!284 (toList!697 (ite c!7503 (ite c!7507 call!4395 call!4385) call!4406)))))

(assert (=> d!11479 (= (insertStrictlySorted!44 (toList!697 (ite c!7503 (ite c!7507 call!4395 call!4385) call!4406)) (_1!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!24243)))

(declare-fun bm!4480 () Bool)

(assert (=> bm!4480 (= call!4484 call!4482)))

(declare-fun b!59609 () Bool)

(assert (=> b!59609 (= e!39184 call!4484)))

(declare-fun b!59610 () Bool)

(assert (=> b!59610 (= e!39185 call!4483)))

(declare-fun b!59611 () Bool)

(assert (=> b!59611 (= e!39186 call!4482)))

(declare-fun c!7659 () Bool)

(declare-fun b!59612 () Bool)

(assert (=> b!59612 (= e!39182 (ite c!7660 (t!4768 (toList!697 (ite c!7503 (ite c!7507 call!4395 call!4385) call!4406))) (ite c!7659 (Cons!1426 (h!2007 (toList!697 (ite c!7503 (ite c!7507 call!4395 call!4385) call!4406))) (t!4768 (toList!697 (ite c!7503 (ite c!7507 call!4395 call!4385) call!4406)))) Nil!1427)))))

(declare-fun b!59613 () Bool)

(declare-fun res!33056 () Bool)

(assert (=> b!59613 (=> (not res!33056) (not e!39183))))

(assert (=> b!59613 (= res!33056 (containsKey!128 lt!24243 (_1!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!59614 () Bool)

(assert (=> b!59614 (= c!7659 (and ((_ is Cons!1426) (toList!697 (ite c!7503 (ite c!7507 call!4395 call!4385) call!4406))) (bvsgt (_1!1022 (h!2007 (toList!697 (ite c!7503 (ite c!7507 call!4395 call!4385) call!4406)))) (_1!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> b!59614 (= e!39186 e!39184)))

(declare-fun bm!4481 () Bool)

(assert (=> bm!4481 (= call!4483 ($colon$colon!60 e!39182 (ite c!7662 (h!2007 (toList!697 (ite c!7503 (ite c!7507 call!4395 call!4385) call!4406))) (tuple2!2023 (_1!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1022 (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun c!7661 () Bool)

(assert (=> bm!4481 (= c!7661 c!7662)))

(assert (= (and d!11479 c!7662) b!59610))

(assert (= (and d!11479 (not c!7662)) b!59608))

(assert (= (and b!59608 c!7660) b!59611))

(assert (= (and b!59608 (not c!7660)) b!59614))

(assert (= (and b!59614 c!7659) b!59605))

(assert (= (and b!59614 (not c!7659)) b!59609))

(assert (= (or b!59605 b!59609) bm!4480))

(assert (= (or b!59611 bm!4480) bm!4479))

(assert (= (or b!59610 bm!4479) bm!4481))

(assert (= (and bm!4481 c!7661) b!59607))

(assert (= (and bm!4481 (not c!7661)) b!59612))

(assert (= (and d!11479 res!33057) b!59613))

(assert (= (and b!59613 res!33056) b!59606))

(declare-fun m!51643 () Bool)

(assert (=> d!11479 m!51643))

(declare-fun m!51645 () Bool)

(assert (=> d!11479 m!51645))

(declare-fun m!51647 () Bool)

(assert (=> bm!4481 m!51647))

(declare-fun m!51649 () Bool)

(assert (=> b!59607 m!51649))

(declare-fun m!51651 () Bool)

(assert (=> b!59613 m!51651))

(declare-fun m!51653 () Bool)

(assert (=> b!59606 m!51653))

(assert (=> d!11361 d!11479))

(declare-fun d!11481 () Bool)

(assert (=> d!11481 (= (get!1069 (getValueByKey!124 (toList!697 (+!81 lt!23732 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!23741)) (v!2386 (getValueByKey!124 (toList!697 (+!81 lt!23732 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!23741)))))

(assert (=> d!11339 d!11481))

(declare-fun b!59616 () Bool)

(declare-fun e!39187 () Option!130)

(declare-fun e!39188 () Option!130)

(assert (=> b!59616 (= e!39187 e!39188)))

(declare-fun c!7664 () Bool)

(assert (=> b!59616 (= c!7664 (and ((_ is Cons!1426) (toList!697 (+!81 lt!23732 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))) (not (= (_1!1022 (h!2007 (toList!697 (+!81 lt!23732 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))) lt!23741))))))

(declare-fun b!59615 () Bool)

(assert (=> b!59615 (= e!39187 (Some!129 (_2!1022 (h!2007 (toList!697 (+!81 lt!23732 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))))

(declare-fun b!59617 () Bool)

(assert (=> b!59617 (= e!39188 (getValueByKey!124 (t!4768 (toList!697 (+!81 lt!23732 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))) lt!23741))))

(declare-fun b!59618 () Bool)

(assert (=> b!59618 (= e!39188 None!128)))

(declare-fun c!7663 () Bool)

(declare-fun d!11483 () Bool)

(assert (=> d!11483 (= c!7663 (and ((_ is Cons!1426) (toList!697 (+!81 lt!23732 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))) (= (_1!1022 (h!2007 (toList!697 (+!81 lt!23732 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))) lt!23741)))))

(assert (=> d!11483 (= (getValueByKey!124 (toList!697 (+!81 lt!23732 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!23741) e!39187)))

(assert (= (and d!11483 c!7663) b!59615))

(assert (= (and d!11483 (not c!7663)) b!59616))

(assert (= (and b!59616 c!7664) b!59617))

(assert (= (and b!59616 (not c!7664)) b!59618))

(declare-fun m!51655 () Bool)

(assert (=> b!59617 m!51655))

(assert (=> d!11339 d!11483))

(declare-fun d!11485 () Bool)

(declare-fun e!39189 () Bool)

(assert (=> d!11485 e!39189))

(declare-fun res!33058 () Bool)

(assert (=> d!11485 (=> (not res!33058) (not e!39189))))

(declare-fun lt!24245 () ListLongMap!1363)

(assert (=> d!11485 (= res!33058 (contains!682 lt!24245 (_1!1022 (ite (or c!7569 c!7572) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)))))))))

(declare-fun lt!24247 () List!1430)

(assert (=> d!11485 (= lt!24245 (ListLongMap!1364 lt!24247))))

(declare-fun lt!24244 () Unit!1551)

(declare-fun lt!24246 () Unit!1551)

(assert (=> d!11485 (= lt!24244 lt!24246)))

(assert (=> d!11485 (= (getValueByKey!124 lt!24247 (_1!1022 (ite (or c!7569 c!7572) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)))))) (Some!129 (_2!1022 (ite (or c!7569 c!7572) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)))))))))

(assert (=> d!11485 (= lt!24246 (lemmaContainsTupThenGetReturnValue!41 lt!24247 (_1!1022 (ite (or c!7569 c!7572) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16))))) (_2!1022 (ite (or c!7569 c!7572) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)))))))))

(assert (=> d!11485 (= lt!24247 (insertStrictlySorted!44 (toList!697 (ite c!7569 call!4443 (ite c!7572 call!4446 call!4447))) (_1!1022 (ite (or c!7569 c!7572) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16))))) (_2!1022 (ite (or c!7569 c!7572) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)))))))))

(assert (=> d!11485 (= (+!81 (ite c!7569 call!4443 (ite c!7572 call!4446 call!4447)) (ite (or c!7569 c!7572) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16))))) lt!24245)))

(declare-fun b!59619 () Bool)

(declare-fun res!33059 () Bool)

(assert (=> b!59619 (=> (not res!33059) (not e!39189))))

(assert (=> b!59619 (= res!33059 (= (getValueByKey!124 (toList!697 lt!24245) (_1!1022 (ite (or c!7569 c!7572) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)))))) (Some!129 (_2!1022 (ite (or c!7569 c!7572) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16))))))))))

(declare-fun b!59620 () Bool)

(assert (=> b!59620 (= e!39189 (contains!684 (toList!697 lt!24245) (ite (or c!7569 c!7572) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16))))))))

(assert (= (and d!11485 res!33058) b!59619))

(assert (= (and b!59619 res!33059) b!59620))

(declare-fun m!51657 () Bool)

(assert (=> d!11485 m!51657))

(declare-fun m!51659 () Bool)

(assert (=> d!11485 m!51659))

(declare-fun m!51661 () Bool)

(assert (=> d!11485 m!51661))

(declare-fun m!51663 () Bool)

(assert (=> d!11485 m!51663))

(declare-fun m!51665 () Bool)

(assert (=> b!59619 m!51665))

(declare-fun m!51667 () Bool)

(assert (=> b!59620 m!51667))

(assert (=> bm!4438 d!11485))

(declare-fun d!11487 () Bool)

(assert (=> d!11487 (= (isDefined!77 (getValueByKey!124 (toList!697 lt!23739) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (not (isEmpty!293 (getValueByKey!124 (toList!697 lt!23739) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun bs!2583 () Bool)

(assert (= bs!2583 d!11487))

(assert (=> bs!2583 m!50951))

(declare-fun m!51669 () Bool)

(assert (=> bs!2583 m!51669))

(assert (=> b!59208 d!11487))

(assert (=> b!59208 d!11453))

(declare-fun d!11489 () Bool)

(assert (=> d!11489 (= (apply!66 lt!24034 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1069 (getValueByKey!124 (toList!697 lt!24034) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2584 () Bool)

(assert (= bs!2584 d!11489))

(declare-fun m!51671 () Bool)

(assert (=> bs!2584 m!51671))

(assert (=> bs!2584 m!51671))

(declare-fun m!51673 () Bool)

(assert (=> bs!2584 m!51673))

(assert (=> b!59267 d!11489))

(assert (=> b!59371 d!11375))

(declare-fun d!11491 () Bool)

(assert (=> d!11491 (= (apply!66 lt!24069 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)) (get!1069 (getValueByKey!124 (toList!697 lt!24069) (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2585 () Bool)

(assert (= bs!2585 d!11491))

(assert (=> bs!2585 m!50803))

(declare-fun m!51675 () Bool)

(assert (=> bs!2585 m!51675))

(assert (=> bs!2585 m!51675))

(declare-fun m!51677 () Bool)

(assert (=> bs!2585 m!51677))

(assert (=> b!59304 d!11491))

(declare-fun d!11493 () Bool)

(declare-fun c!7665 () Bool)

(assert (=> d!11493 (= c!7665 ((_ is ValueCellFull!855) (select (arr!1782 (ite (or c!7503 c!7502) (_values!2026 newMap!16) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (index!3032 lt!23832) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16))))) #b00000000000000000000000000000000)))))

(declare-fun e!39190 () V!2843)

(assert (=> d!11493 (= (get!1066 (select (arr!1782 (ite (or c!7503 c!7502) (_values!2026 newMap!16) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (index!3032 lt!23832) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2043 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!39190)))

(declare-fun b!59621 () Bool)

(assert (=> b!59621 (= e!39190 (get!1067 (select (arr!1782 (ite (or c!7503 c!7502) (_values!2026 newMap!16) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (index!3032 lt!23832) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2043 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!59622 () Bool)

(assert (=> b!59622 (= e!39190 (get!1068 (select (arr!1782 (ite (or c!7503 c!7502) (_values!2026 newMap!16) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (index!3032 lt!23832) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2043 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11493 c!7665) b!59621))

(assert (= (and d!11493 (not c!7665)) b!59622))

(assert (=> b!59621 m!51107))

(assert (=> b!59621 m!50813))

(declare-fun m!51679 () Bool)

(assert (=> b!59621 m!51679))

(assert (=> b!59622 m!51107))

(assert (=> b!59622 m!50813))

(declare-fun m!51681 () Bool)

(assert (=> b!59622 m!51681))

(assert (=> b!59304 d!11493))

(declare-fun d!11495 () Bool)

(declare-fun e!39191 () Bool)

(assert (=> d!11495 e!39191))

(declare-fun res!33060 () Bool)

(assert (=> d!11495 (=> (not res!33060) (not e!39191))))

(declare-fun lt!24249 () ListLongMap!1363)

(assert (=> d!11495 (= res!33060 (contains!682 lt!24249 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))))))

(declare-fun lt!24251 () List!1430)

(assert (=> d!11495 (= lt!24249 (ListLongMap!1364 lt!24251))))

(declare-fun lt!24248 () Unit!1551)

(declare-fun lt!24250 () Unit!1551)

(assert (=> d!11495 (= lt!24248 lt!24250)))

(assert (=> d!11495 (= (getValueByKey!124 lt!24251 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))) (Some!129 (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))))))

(assert (=> d!11495 (= lt!24250 (lemmaContainsTupThenGetReturnValue!41 lt!24251 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))))))

(assert (=> d!11495 (= lt!24251 (insertStrictlySorted!44 (toList!697 call!4415) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))))))

(assert (=> d!11495 (= (+!81 call!4415 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))) lt!24249)))

(declare-fun b!59623 () Bool)

(declare-fun res!33061 () Bool)

(assert (=> b!59623 (=> (not res!33061) (not e!39191))))

(assert (=> b!59623 (= res!33061 (= (getValueByKey!124 (toList!697 lt!24249) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))) (Some!129 (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))))))))

(declare-fun b!59624 () Bool)

(assert (=> b!59624 (= e!39191 (contains!684 (toList!697 lt!24249) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))))))

(assert (= (and d!11495 res!33060) b!59623))

(assert (= (and b!59623 res!33061) b!59624))

(declare-fun m!51683 () Bool)

(assert (=> d!11495 m!51683))

(declare-fun m!51685 () Bool)

(assert (=> d!11495 m!51685))

(declare-fun m!51687 () Bool)

(assert (=> d!11495 m!51687))

(declare-fun m!51689 () Bool)

(assert (=> d!11495 m!51689))

(declare-fun m!51691 () Bool)

(assert (=> b!59623 m!51691))

(declare-fun m!51693 () Bool)

(assert (=> b!59624 m!51693))

(assert (=> b!59096 d!11495))

(declare-fun d!11497 () Bool)

(declare-fun e!39192 () Bool)

(assert (=> d!11497 e!39192))

(declare-fun res!33062 () Bool)

(assert (=> d!11497 (=> res!33062 e!39192)))

(declare-fun lt!24254 () Bool)

(assert (=> d!11497 (= res!33062 (not lt!24254))))

(declare-fun lt!24253 () Bool)

(assert (=> d!11497 (= lt!24254 lt!24253)))

(declare-fun lt!24255 () Unit!1551)

(declare-fun e!39193 () Unit!1551)

(assert (=> d!11497 (= lt!24255 e!39193)))

(declare-fun c!7666 () Bool)

(assert (=> d!11497 (= c!7666 lt!24253)))

(assert (=> d!11497 (= lt!24253 (containsKey!128 (toList!697 lt!23870) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11497 (= (contains!682 lt!23870 #b1000000000000000000000000000000000000000000000000000000000000000) lt!24254)))

(declare-fun b!59625 () Bool)

(declare-fun lt!24252 () Unit!1551)

(assert (=> b!59625 (= e!39193 lt!24252)))

(assert (=> b!59625 (= lt!24252 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 lt!23870) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59625 (isDefined!77 (getValueByKey!124 (toList!697 lt!23870) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59626 () Bool)

(declare-fun Unit!1579 () Unit!1551)

(assert (=> b!59626 (= e!39193 Unit!1579)))

(declare-fun b!59627 () Bool)

(assert (=> b!59627 (= e!39192 (isDefined!77 (getValueByKey!124 (toList!697 lt!23870) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11497 c!7666) b!59625))

(assert (= (and d!11497 (not c!7666)) b!59626))

(assert (= (and d!11497 (not res!33062)) b!59627))

(declare-fun m!51695 () Bool)

(assert (=> d!11497 m!51695))

(declare-fun m!51697 () Bool)

(assert (=> b!59625 m!51697))

(declare-fun m!51699 () Bool)

(assert (=> b!59625 m!51699))

(assert (=> b!59625 m!51699))

(declare-fun m!51701 () Bool)

(assert (=> b!59625 m!51701))

(assert (=> b!59627 m!51699))

(assert (=> b!59627 m!51699))

(assert (=> b!59627 m!51701))

(assert (=> bm!4415 d!11497))

(declare-fun b!59628 () Bool)

(declare-fun e!39200 () Bool)

(declare-fun lt!24261 () ListLongMap!1363)

(assert (=> b!59628 (= e!39200 (isEmpty!294 lt!24261))))

(declare-fun bm!4482 () Bool)

(declare-fun call!4485 () ListLongMap!1363)

(assert (=> bm!4482 (= call!4485 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (ite (and c!7503 c!7507) lt!23829 (extraKeys!1930 newMap!16)) (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16)) (minValue!1959 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2043 newMap!16)))))

(declare-fun b!59629 () Bool)

(declare-fun res!33065 () Bool)

(declare-fun e!39196 () Bool)

(assert (=> b!59629 (=> (not res!33065) (not e!39196))))

(assert (=> b!59629 (= res!33065 (not (contains!682 lt!24261 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!59631 () Bool)

(declare-fun e!39197 () Bool)

(declare-fun e!39194 () Bool)

(assert (=> b!59631 (= e!39197 e!39194)))

(assert (=> b!59631 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(declare-fun res!33066 () Bool)

(assert (=> b!59631 (= res!33066 (contains!682 lt!24261 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59631 (=> (not res!33066) (not e!39194))))

(declare-fun b!59632 () Bool)

(declare-fun e!39195 () ListLongMap!1363)

(declare-fun e!39198 () ListLongMap!1363)

(assert (=> b!59632 (= e!39195 e!39198)))

(declare-fun c!7667 () Bool)

(assert (=> b!59632 (= c!7667 (validKeyInArray!0 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59633 () Bool)

(assert (=> b!59633 (= e!39198 call!4485)))

(declare-fun b!59634 () Bool)

(assert (=> b!59634 (= e!39195 (ListLongMap!1364 Nil!1427))))

(declare-fun b!59635 () Bool)

(assert (=> b!59635 (= e!39196 e!39197)))

(declare-fun c!7668 () Bool)

(declare-fun e!39199 () Bool)

(assert (=> b!59635 (= c!7668 e!39199)))

(declare-fun res!33064 () Bool)

(assert (=> b!59635 (=> (not res!33064) (not e!39199))))

(assert (=> b!59635 (= res!33064 (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(declare-fun b!59636 () Bool)

(assert (=> b!59636 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(assert (=> b!59636 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2012 (_values!2026 newMap!16))))))

(assert (=> b!59636 (= e!39194 (= (apply!66 lt!24261 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)) (get!1066 (select (arr!1782 (_values!2026 newMap!16)) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2043 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!59637 () Bool)

(declare-fun lt!24256 () Unit!1551)

(declare-fun lt!24258 () Unit!1551)

(assert (=> b!59637 (= lt!24256 lt!24258)))

(declare-fun lt!24260 () V!2843)

(declare-fun lt!24259 () ListLongMap!1363)

(declare-fun lt!24262 () (_ BitVec 64))

(declare-fun lt!24257 () (_ BitVec 64))

(assert (=> b!59637 (not (contains!682 (+!81 lt!24259 (tuple2!2023 lt!24262 lt!24260)) lt!24257))))

(assert (=> b!59637 (= lt!24258 (addStillNotContains!15 lt!24259 lt!24262 lt!24260 lt!24257))))

(assert (=> b!59637 (= lt!24257 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!59637 (= lt!24260 (get!1066 (select (arr!1782 (_values!2026 newMap!16)) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2043 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!59637 (= lt!24262 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!59637 (= lt!24259 call!4485)))

(assert (=> b!59637 (= e!39198 (+!81 call!4485 (tuple2!2023 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000) (get!1066 (select (arr!1782 (_values!2026 newMap!16)) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2043 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun d!11499 () Bool)

(assert (=> d!11499 e!39196))

(declare-fun res!33063 () Bool)

(assert (=> d!11499 (=> (not res!33063) (not e!39196))))

(assert (=> d!11499 (= res!33063 (not (contains!682 lt!24261 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!11499 (= lt!24261 e!39195)))

(declare-fun c!7669 () Bool)

(assert (=> d!11499 (= c!7669 (bvsge #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(assert (=> d!11499 (validMask!0 (mask!5927 newMap!16))))

(assert (=> d!11499 (= (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (ite (and c!7503 c!7507) lt!23829 (extraKeys!1930 newMap!16)) (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16)) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)) lt!24261)))

(declare-fun b!59630 () Bool)

(assert (=> b!59630 (= e!39197 e!39200)))

(declare-fun c!7670 () Bool)

(assert (=> b!59630 (= c!7670 (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(declare-fun b!59638 () Bool)

(assert (=> b!59638 (= e!39199 (validKeyInArray!0 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59638 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!59639 () Bool)

(assert (=> b!59639 (= e!39200 (= lt!24261 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (ite (and c!7503 c!7507) lt!23829 (extraKeys!1930 newMap!16)) (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16)) (minValue!1959 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2043 newMap!16))))))

(assert (= (and d!11499 c!7669) b!59634))

(assert (= (and d!11499 (not c!7669)) b!59632))

(assert (= (and b!59632 c!7667) b!59637))

(assert (= (and b!59632 (not c!7667)) b!59633))

(assert (= (or b!59637 b!59633) bm!4482))

(assert (= (and d!11499 res!33063) b!59629))

(assert (= (and b!59629 res!33065) b!59635))

(assert (= (and b!59635 res!33064) b!59638))

(assert (= (and b!59635 c!7668) b!59631))

(assert (= (and b!59635 (not c!7668)) b!59630))

(assert (= (and b!59631 res!33066) b!59636))

(assert (= (and b!59630 c!7670) b!59639))

(assert (= (and b!59630 (not c!7670)) b!59628))

(declare-fun b_lambda!2623 () Bool)

(assert (=> (not b_lambda!2623) (not b!59636)))

(assert (=> b!59636 t!4775))

(declare-fun b_and!3611 () Bool)

(assert (= b_and!3607 (and (=> t!4775 result!2381) b_and!3611)))

(assert (=> b!59636 t!4777))

(declare-fun b_and!3613 () Bool)

(assert (= b_and!3609 (and (=> t!4777 result!2383) b_and!3613)))

(declare-fun b_lambda!2625 () Bool)

(assert (=> (not b_lambda!2625) (not b!59637)))

(assert (=> b!59637 t!4775))

(declare-fun b_and!3615 () Bool)

(assert (= b_and!3611 (and (=> t!4775 result!2381) b_and!3615)))

(assert (=> b!59637 t!4777))

(declare-fun b_and!3617 () Bool)

(assert (= b_and!3613 (and (=> t!4777 result!2383) b_and!3617)))

(declare-fun m!51703 () Bool)

(assert (=> b!59637 m!51703))

(assert (=> b!59637 m!51033))

(assert (=> b!59637 m!50813))

(assert (=> b!59637 m!51037))

(assert (=> b!59637 m!50813))

(declare-fun m!51705 () Bool)

(assert (=> b!59637 m!51705))

(declare-fun m!51707 () Bool)

(assert (=> b!59637 m!51707))

(assert (=> b!59637 m!50803))

(assert (=> b!59637 m!51707))

(declare-fun m!51709 () Bool)

(assert (=> b!59637 m!51709))

(assert (=> b!59637 m!51033))

(declare-fun m!51711 () Bool)

(assert (=> b!59639 m!51711))

(assert (=> b!59631 m!50803))

(assert (=> b!59631 m!50803))

(declare-fun m!51713 () Bool)

(assert (=> b!59631 m!51713))

(declare-fun m!51715 () Bool)

(assert (=> b!59629 m!51715))

(assert (=> b!59632 m!50803))

(assert (=> b!59632 m!50803))

(assert (=> b!59632 m!50805))

(declare-fun m!51717 () Bool)

(assert (=> b!59628 m!51717))

(assert (=> bm!4482 m!51711))

(assert (=> b!59638 m!50803))

(assert (=> b!59638 m!50803))

(assert (=> b!59638 m!50805))

(declare-fun m!51719 () Bool)

(assert (=> d!11499 m!51719))

(assert (=> d!11499 m!50771))

(assert (=> b!59636 m!50803))

(declare-fun m!51721 () Bool)

(assert (=> b!59636 m!51721))

(assert (=> b!59636 m!51033))

(assert (=> b!59636 m!50813))

(assert (=> b!59636 m!51037))

(assert (=> b!59636 m!50813))

(assert (=> b!59636 m!50803))

(assert (=> b!59636 m!51033))

(assert (=> bm!4454 d!11499))

(declare-fun d!11501 () Bool)

(assert (=> d!11501 (= (get!1069 (getValueByKey!124 (toList!697 lt!23732) lt!23741)) (v!2386 (getValueByKey!124 (toList!697 lt!23732) lt!23741)))))

(assert (=> d!11343 d!11501))

(declare-fun b!59641 () Bool)

(declare-fun e!39201 () Option!130)

(declare-fun e!39202 () Option!130)

(assert (=> b!59641 (= e!39201 e!39202)))

(declare-fun c!7672 () Bool)

(assert (=> b!59641 (= c!7672 (and ((_ is Cons!1426) (toList!697 lt!23732)) (not (= (_1!1022 (h!2007 (toList!697 lt!23732))) lt!23741))))))

(declare-fun b!59640 () Bool)

(assert (=> b!59640 (= e!39201 (Some!129 (_2!1022 (h!2007 (toList!697 lt!23732)))))))

(declare-fun b!59642 () Bool)

(assert (=> b!59642 (= e!39202 (getValueByKey!124 (t!4768 (toList!697 lt!23732)) lt!23741))))

(declare-fun b!59643 () Bool)

(assert (=> b!59643 (= e!39202 None!128)))

(declare-fun d!11503 () Bool)

(declare-fun c!7671 () Bool)

(assert (=> d!11503 (= c!7671 (and ((_ is Cons!1426) (toList!697 lt!23732)) (= (_1!1022 (h!2007 (toList!697 lt!23732))) lt!23741)))))

(assert (=> d!11503 (= (getValueByKey!124 (toList!697 lt!23732) lt!23741) e!39201)))

(assert (= (and d!11503 c!7671) b!59640))

(assert (= (and d!11503 (not c!7671)) b!59641))

(assert (= (and b!59641 c!7672) b!59642))

(assert (= (and b!59641 (not c!7672)) b!59643))

(declare-fun m!51723 () Bool)

(assert (=> b!59642 m!51723))

(assert (=> d!11343 d!11503))

(declare-fun d!11505 () Bool)

(assert (=> d!11505 (= (map!1105 (_2!1021 lt!23949)) (getCurrentListMap!402 (_keys!3667 (_2!1021 lt!23949)) (_values!2026 (_2!1021 lt!23949)) (mask!5927 (_2!1021 lt!23949)) (extraKeys!1930 (_2!1021 lt!23949)) (zeroValue!1959 (_2!1021 lt!23949)) (minValue!1959 (_2!1021 lt!23949)) #b00000000000000000000000000000000 (defaultEntry!2043 (_2!1021 lt!23949))))))

(declare-fun bs!2586 () Bool)

(assert (= bs!2586 d!11505))

(declare-fun m!51725 () Bool)

(assert (=> bs!2586 m!51725))

(assert (=> b!59160 d!11505))

(declare-fun d!11507 () Bool)

(declare-fun e!39203 () Bool)

(assert (=> d!11507 e!39203))

(declare-fun res!33067 () Bool)

(assert (=> d!11507 (=> (not res!33067) (not e!39203))))

(declare-fun lt!24264 () ListLongMap!1363)

(assert (=> d!11507 (= res!33067 (contains!682 lt!24264 (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!24266 () List!1430)

(assert (=> d!11507 (= lt!24264 (ListLongMap!1364 lt!24266))))

(declare-fun lt!24263 () Unit!1551)

(declare-fun lt!24265 () Unit!1551)

(assert (=> d!11507 (= lt!24263 lt!24265)))

(assert (=> d!11507 (= (getValueByKey!124 lt!24266 (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11507 (= lt!24265 (lemmaContainsTupThenGetReturnValue!41 lt!24266 (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11507 (= lt!24266 (insertStrictlySorted!44 (toList!697 (map!1105 newMap!16)) (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11507 (= (+!81 (map!1105 newMap!16) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!24264)))

(declare-fun b!59644 () Bool)

(declare-fun res!33068 () Bool)

(assert (=> b!59644 (=> (not res!33068) (not e!39203))))

(assert (=> b!59644 (= res!33068 (= (getValueByKey!124 (toList!697 lt!24264) (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!59645 () Bool)

(assert (=> b!59645 (= e!39203 (contains!684 (toList!697 lt!24264) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!11507 res!33067) b!59644))

(assert (= (and b!59644 res!33068) b!59645))

(declare-fun m!51727 () Bool)

(assert (=> d!11507 m!51727))

(declare-fun m!51729 () Bool)

(assert (=> d!11507 m!51729))

(declare-fun m!51731 () Bool)

(assert (=> d!11507 m!51731))

(declare-fun m!51733 () Bool)

(assert (=> d!11507 m!51733))

(declare-fun m!51735 () Bool)

(assert (=> b!59644 m!51735))

(declare-fun m!51737 () Bool)

(assert (=> b!59645 m!51737))

(assert (=> b!59160 d!11507))

(assert (=> b!59160 d!11209))

(declare-fun d!11509 () Bool)

(declare-fun lt!24269 () Bool)

(declare-fun content!64 (List!1430) (InoxSet tuple2!2022))

(assert (=> d!11509 (= lt!24269 (select (content!64 (toList!697 lt!23989)) (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun e!39208 () Bool)

(assert (=> d!11509 (= lt!24269 e!39208)))

(declare-fun res!33074 () Bool)

(assert (=> d!11509 (=> (not res!33074) (not e!39208))))

(assert (=> d!11509 (= res!33074 ((_ is Cons!1426) (toList!697 lt!23989)))))

(assert (=> d!11509 (= (contains!684 (toList!697 lt!23989) (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!24269)))

(declare-fun b!59650 () Bool)

(declare-fun e!39209 () Bool)

(assert (=> b!59650 (= e!39208 e!39209)))

(declare-fun res!33073 () Bool)

(assert (=> b!59650 (=> res!33073 e!39209)))

(assert (=> b!59650 (= res!33073 (= (h!2007 (toList!697 lt!23989)) (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun b!59651 () Bool)

(assert (=> b!59651 (= e!39209 (contains!684 (t!4768 (toList!697 lt!23989)) (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(assert (= (and d!11509 res!33074) b!59650))

(assert (= (and b!59650 (not res!33073)) b!59651))

(declare-fun m!51739 () Bool)

(assert (=> d!11509 m!51739))

(declare-fun m!51741 () Bool)

(assert (=> d!11509 m!51741))

(declare-fun m!51743 () Bool)

(assert (=> b!59651 m!51743))

(assert (=> b!59205 d!11509))

(declare-fun d!11511 () Bool)

(declare-fun e!39210 () Bool)

(assert (=> d!11511 e!39210))

(declare-fun res!33075 () Bool)

(assert (=> d!11511 (=> res!33075 e!39210)))

(declare-fun lt!24272 () Bool)

(assert (=> d!11511 (= res!33075 (not lt!24272))))

(declare-fun lt!24271 () Bool)

(assert (=> d!11511 (= lt!24272 lt!24271)))

(declare-fun lt!24273 () Unit!1551)

(declare-fun e!39211 () Unit!1551)

(assert (=> d!11511 (= lt!24273 e!39211)))

(declare-fun c!7673 () Bool)

(assert (=> d!11511 (= c!7673 lt!24271)))

(assert (=> d!11511 (= lt!24271 (containsKey!128 (toList!697 lt!24034) (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!11511 (= (contains!682 lt!24034 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)) lt!24272)))

(declare-fun b!59652 () Bool)

(declare-fun lt!24270 () Unit!1551)

(assert (=> b!59652 (= e!39211 lt!24270)))

(assert (=> b!59652 (= lt!24270 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 lt!24034) (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59652 (isDefined!77 (getValueByKey!124 (toList!697 lt!24034) (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59653 () Bool)

(declare-fun Unit!1580 () Unit!1551)

(assert (=> b!59653 (= e!39211 Unit!1580)))

(declare-fun b!59654 () Bool)

(assert (=> b!59654 (= e!39210 (isDefined!77 (getValueByKey!124 (toList!697 lt!24034) (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!11511 c!7673) b!59652))

(assert (= (and d!11511 (not c!7673)) b!59653))

(assert (= (and d!11511 (not res!33075)) b!59654))

(assert (=> d!11511 m!50803))

(declare-fun m!51745 () Bool)

(assert (=> d!11511 m!51745))

(assert (=> b!59652 m!50803))

(declare-fun m!51747 () Bool)

(assert (=> b!59652 m!51747))

(assert (=> b!59652 m!50803))

(declare-fun m!51749 () Bool)

(assert (=> b!59652 m!51749))

(assert (=> b!59652 m!51749))

(declare-fun m!51751 () Bool)

(assert (=> b!59652 m!51751))

(assert (=> b!59654 m!50803))

(assert (=> b!59654 m!51749))

(assert (=> b!59654 m!51749))

(assert (=> b!59654 m!51751))

(assert (=> b!59264 d!11511))

(declare-fun d!11513 () Bool)

(declare-fun lt!24274 () Bool)

(assert (=> d!11513 (= lt!24274 (select (content!63 Nil!1428) (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!39213 () Bool)

(assert (=> d!11513 (= lt!24274 e!39213)))

(declare-fun res!33076 () Bool)

(assert (=> d!11513 (=> (not res!33076) (not e!39213))))

(assert (=> d!11513 (= res!33076 ((_ is Cons!1427) Nil!1428))))

(assert (=> d!11513 (= (contains!683 Nil!1428 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)) lt!24274)))

(declare-fun b!59655 () Bool)

(declare-fun e!39212 () Bool)

(assert (=> b!59655 (= e!39213 e!39212)))

(declare-fun res!33077 () Bool)

(assert (=> b!59655 (=> res!33077 e!39212)))

(assert (=> b!59655 (= res!33077 (= (h!2008 Nil!1428) (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59656 () Bool)

(assert (=> b!59656 (= e!39212 (contains!683 (t!4769 Nil!1428) (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!11513 res!33076) b!59655))

(assert (= (and b!59655 (not res!33077)) b!59656))

(assert (=> d!11513 m!50977))

(assert (=> d!11513 m!50803))

(declare-fun m!51753 () Bool)

(assert (=> d!11513 m!51753))

(assert (=> b!59656 m!50803))

(declare-fun m!51755 () Bool)

(assert (=> b!59656 m!51755))

(assert (=> b!59367 d!11513))

(assert (=> d!11245 d!11235))

(declare-fun d!11515 () Bool)

(assert (=> d!11515 (= (inRange!0 (ite c!7533 (index!3032 lt!23957) (ite c!7532 (index!3031 lt!23969) (index!3034 lt!23969))) (mask!5927 newMap!16)) (and (bvsge (ite c!7533 (index!3032 lt!23957) (ite c!7532 (index!3031 lt!23969) (index!3034 lt!23969))) #b00000000000000000000000000000000) (bvslt (ite c!7533 (index!3032 lt!23957) (ite c!7532 (index!3031 lt!23969) (index!3034 lt!23969))) (bvadd (mask!5927 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4425 d!11515))

(assert (=> b!59407 d!11375))

(declare-fun d!11517 () Bool)

(assert (=> d!11517 (= (apply!66 lt!24034 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)) (get!1069 (getValueByKey!124 (toList!697 lt!24034) (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2587 () Bool)

(assert (= bs!2587 d!11517))

(assert (=> bs!2587 m!50803))

(assert (=> bs!2587 m!51749))

(assert (=> bs!2587 m!51749))

(declare-fun m!51757 () Bool)

(assert (=> bs!2587 m!51757))

(assert (=> b!59262 d!11517))

(declare-fun d!11519 () Bool)

(declare-fun c!7674 () Bool)

(assert (=> d!11519 (= c!7674 ((_ is ValueCellFull!855) (select (arr!1782 (_values!2026 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!39214 () V!2843)

(assert (=> d!11519 (= (get!1066 (select (arr!1782 (_values!2026 newMap!16)) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2043 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!39214)))

(declare-fun b!59657 () Bool)

(assert (=> b!59657 (= e!39214 (get!1067 (select (arr!1782 (_values!2026 newMap!16)) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2043 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!59658 () Bool)

(assert (=> b!59658 (= e!39214 (get!1068 (select (arr!1782 (_values!2026 newMap!16)) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2043 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11519 c!7674) b!59657))

(assert (= (and d!11519 (not c!7674)) b!59658))

(assert (=> b!59657 m!51033))

(assert (=> b!59657 m!50813))

(declare-fun m!51759 () Bool)

(assert (=> b!59657 m!51759))

(assert (=> b!59658 m!51033))

(assert (=> b!59658 m!50813))

(declare-fun m!51761 () Bool)

(assert (=> b!59658 m!51761))

(assert (=> b!59262 d!11519))

(assert (=> d!11371 d!11309))

(declare-fun b!59675 () Bool)

(declare-fun e!39223 () Bool)

(declare-fun e!39225 () Bool)

(assert (=> b!59675 (= e!39223 e!39225)))

(declare-fun c!7680 () Bool)

(declare-fun lt!24277 () SeekEntryResult!227)

(assert (=> b!59675 (= c!7680 ((_ is MissingVacant!227) lt!24277))))

(declare-fun call!4490 () Bool)

(declare-fun bm!4487 () Bool)

(declare-fun c!7679 () Bool)

(assert (=> bm!4487 (= call!4490 (inRange!0 (ite c!7679 (index!3031 lt!24277) (index!3034 lt!24277)) (mask!5927 newMap!16)))))

(declare-fun b!59676 () Bool)

(declare-fun res!33087 () Bool)

(declare-fun e!39226 () Bool)

(assert (=> b!59676 (=> (not res!33087) (not e!39226))))

(assert (=> b!59676 (= res!33087 (= (select (arr!1781 (_keys!3667 newMap!16)) (index!3034 lt!24277)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59677 () Bool)

(declare-fun e!39224 () Bool)

(assert (=> b!59677 (= e!39223 e!39224)))

(declare-fun res!33089 () Bool)

(assert (=> b!59677 (= res!33089 call!4490)))

(assert (=> b!59677 (=> (not res!33089) (not e!39224))))

(declare-fun b!59678 () Bool)

(declare-fun call!4491 () Bool)

(assert (=> b!59678 (= e!39224 (not call!4491))))

(declare-fun d!11521 () Bool)

(assert (=> d!11521 e!39223))

(assert (=> d!11521 (= c!7679 ((_ is MissingZero!227) lt!24277))))

(assert (=> d!11521 (= lt!24277 (seekEntryOrOpen!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (_keys!3667 newMap!16) (mask!5927 newMap!16)))))

(assert (=> d!11521 true))

(declare-fun _$34!759 () Unit!1551)

(assert (=> d!11521 (= (choose!310 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (defaultEntry!2043 newMap!16)) _$34!759)))

(declare-fun b!59679 () Bool)

(declare-fun res!33088 () Bool)

(assert (=> b!59679 (=> (not res!33088) (not e!39226))))

(assert (=> b!59679 (= res!33088 call!4490)))

(assert (=> b!59679 (= e!39225 e!39226)))

(declare-fun b!59680 () Bool)

(assert (=> b!59680 (= e!39226 (not call!4491))))

(declare-fun bm!4488 () Bool)

(assert (=> bm!4488 (= call!4491 (arrayContainsKey!0 (_keys!3667 newMap!16) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!59681 () Bool)

(assert (=> b!59681 (= e!39225 ((_ is Undefined!227) lt!24277))))

(declare-fun b!59682 () Bool)

(declare-fun res!33086 () Bool)

(assert (=> b!59682 (= res!33086 (= (select (arr!1781 (_keys!3667 newMap!16)) (index!3031 lt!24277)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59682 (=> (not res!33086) (not e!39224))))

(assert (= (and d!11521 c!7679) b!59677))

(assert (= (and d!11521 (not c!7679)) b!59675))

(assert (= (and b!59677 res!33089) b!59682))

(assert (= (and b!59682 res!33086) b!59678))

(assert (= (and b!59675 c!7680) b!59679))

(assert (= (and b!59675 (not c!7680)) b!59681))

(assert (= (and b!59679 res!33088) b!59676))

(assert (= (and b!59676 res!33087) b!59680))

(assert (= (or b!59677 b!59679) bm!4487))

(assert (= (or b!59678 b!59680) bm!4488))

(assert (=> d!11521 m!50529))

(assert (=> d!11521 m!50713))

(declare-fun m!51763 () Bool)

(assert (=> bm!4487 m!51763))

(declare-fun m!51765 () Bool)

(assert (=> b!59676 m!51765))

(assert (=> bm!4488 m!50529))

(assert (=> bm!4488 m!50687))

(declare-fun m!51767 () Bool)

(assert (=> b!59682 m!51767))

(assert (=> d!11371 d!11521))

(declare-fun d!11523 () Bool)

(assert (=> d!11523 (= (validMask!0 (mask!5927 newMap!16)) (and (or (= (mask!5927 newMap!16) #b00000000000000000000000000000111) (= (mask!5927 newMap!16) #b00000000000000000000000000001111) (= (mask!5927 newMap!16) #b00000000000000000000000000011111) (= (mask!5927 newMap!16) #b00000000000000000000000000111111) (= (mask!5927 newMap!16) #b00000000000000000000000001111111) (= (mask!5927 newMap!16) #b00000000000000000000000011111111) (= (mask!5927 newMap!16) #b00000000000000000000000111111111) (= (mask!5927 newMap!16) #b00000000000000000000001111111111) (= (mask!5927 newMap!16) #b00000000000000000000011111111111) (= (mask!5927 newMap!16) #b00000000000000000000111111111111) (= (mask!5927 newMap!16) #b00000000000000000001111111111111) (= (mask!5927 newMap!16) #b00000000000000000011111111111111) (= (mask!5927 newMap!16) #b00000000000000000111111111111111) (= (mask!5927 newMap!16) #b00000000000000001111111111111111) (= (mask!5927 newMap!16) #b00000000000000011111111111111111) (= (mask!5927 newMap!16) #b00000000000000111111111111111111) (= (mask!5927 newMap!16) #b00000000000001111111111111111111) (= (mask!5927 newMap!16) #b00000000000011111111111111111111) (= (mask!5927 newMap!16) #b00000000000111111111111111111111) (= (mask!5927 newMap!16) #b00000000001111111111111111111111) (= (mask!5927 newMap!16) #b00000000011111111111111111111111) (= (mask!5927 newMap!16) #b00000000111111111111111111111111) (= (mask!5927 newMap!16) #b00000001111111111111111111111111) (= (mask!5927 newMap!16) #b00000011111111111111111111111111) (= (mask!5927 newMap!16) #b00000111111111111111111111111111) (= (mask!5927 newMap!16) #b00001111111111111111111111111111) (= (mask!5927 newMap!16) #b00011111111111111111111111111111) (= (mask!5927 newMap!16) #b00111111111111111111111111111111)) (bvsle (mask!5927 newMap!16) #b00111111111111111111111111111111)))))

(assert (=> d!11371 d!11523))

(assert (=> b!59301 d!11375))

(declare-fun d!11525 () Bool)

(declare-fun e!39227 () Bool)

(assert (=> d!11525 e!39227))

(declare-fun res!33090 () Bool)

(assert (=> d!11525 (=> (not res!33090) (not e!39227))))

(declare-fun lt!24279 () ListLongMap!1363)

(assert (=> d!11525 (= res!33090 (contains!682 lt!24279 (_1!1022 (ite (or c!7553 c!7556) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))))))))

(declare-fun lt!24281 () List!1430)

(assert (=> d!11525 (= lt!24279 (ListLongMap!1364 lt!24281))))

(declare-fun lt!24278 () Unit!1551)

(declare-fun lt!24280 () Unit!1551)

(assert (=> d!11525 (= lt!24278 lt!24280)))

(assert (=> d!11525 (= (getValueByKey!124 lt!24281 (_1!1022 (ite (or c!7553 c!7556) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))))) (Some!129 (_2!1022 (ite (or c!7553 c!7556) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))))))))

(assert (=> d!11525 (= lt!24280 (lemmaContainsTupThenGetReturnValue!41 lt!24281 (_1!1022 (ite (or c!7553 c!7556) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))) (_2!1022 (ite (or c!7553 c!7556) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))))))))

(assert (=> d!11525 (= lt!24281 (insertStrictlySorted!44 (toList!697 (ite c!7553 call!4436 (ite c!7556 call!4439 call!4440))) (_1!1022 (ite (or c!7553 c!7556) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))) (_2!1022 (ite (or c!7553 c!7556) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))))))))

(assert (=> d!11525 (= (+!81 (ite c!7553 call!4436 (ite c!7556 call!4439 call!4440)) (ite (or c!7553 c!7556) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))) lt!24279)))

(declare-fun b!59683 () Bool)

(declare-fun res!33091 () Bool)

(assert (=> b!59683 (=> (not res!33091) (not e!39227))))

(assert (=> b!59683 (= res!33091 (= (getValueByKey!124 (toList!697 lt!24279) (_1!1022 (ite (or c!7553 c!7556) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))))) (Some!129 (_2!1022 (ite (or c!7553 c!7556) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))))))))

(declare-fun b!59684 () Bool)

(assert (=> b!59684 (= e!39227 (contains!684 (toList!697 lt!24279) (ite (or c!7553 c!7556) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))))))

(assert (= (and d!11525 res!33090) b!59683))

(assert (= (and b!59683 res!33091) b!59684))

(declare-fun m!51769 () Bool)

(assert (=> d!11525 m!51769))

(declare-fun m!51771 () Bool)

(assert (=> d!11525 m!51771))

(declare-fun m!51773 () Bool)

(assert (=> d!11525 m!51773))

(declare-fun m!51775 () Bool)

(assert (=> d!11525 m!51775))

(declare-fun m!51777 () Bool)

(assert (=> b!59683 m!51777))

(declare-fun m!51779 () Bool)

(assert (=> b!59684 m!51779))

(assert (=> bm!4431 d!11525))

(declare-fun d!11527 () Bool)

(declare-fun lt!24282 () Bool)

(assert (=> d!11527 (= lt!24282 (select (content!64 (toList!697 lt!23979)) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!39228 () Bool)

(assert (=> d!11527 (= lt!24282 e!39228)))

(declare-fun res!33093 () Bool)

(assert (=> d!11527 (=> (not res!33093) (not e!39228))))

(assert (=> d!11527 (= res!33093 ((_ is Cons!1426) (toList!697 lt!23979)))))

(assert (=> d!11527 (= (contains!684 (toList!697 lt!23979) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!24282)))

(declare-fun b!59685 () Bool)

(declare-fun e!39229 () Bool)

(assert (=> b!59685 (= e!39228 e!39229)))

(declare-fun res!33092 () Bool)

(assert (=> b!59685 (=> res!33092 e!39229)))

(assert (=> b!59685 (= res!33092 (= (h!2007 (toList!697 lt!23979)) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!59686 () Bool)

(assert (=> b!59686 (= e!39229 (contains!684 (t!4768 (toList!697 lt!23979)) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!11527 res!33093) b!59685))

(assert (= (and b!59685 (not res!33092)) b!59686))

(declare-fun m!51781 () Bool)

(assert (=> d!11527 m!51781))

(declare-fun m!51783 () Bool)

(assert (=> d!11527 m!51783))

(declare-fun m!51785 () Bool)

(assert (=> b!59686 m!51785))

(assert (=> b!59182 d!11527))

(declare-fun d!11529 () Bool)

(assert (=> d!11529 (= (validKeyInArray!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) (and (not (= (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!59397 d!11529))

(declare-fun d!11531 () Bool)

(declare-fun e!39230 () Bool)

(assert (=> d!11531 e!39230))

(declare-fun res!33094 () Bool)

(assert (=> d!11531 (=> (not res!33094) (not e!39230))))

(declare-fun lt!24284 () ListLongMap!1363)

(assert (=> d!11531 (= res!33094 (contains!682 lt!24284 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!24286 () List!1430)

(assert (=> d!11531 (= lt!24284 (ListLongMap!1364 lt!24286))))

(declare-fun lt!24283 () Unit!1551)

(declare-fun lt!24285 () Unit!1551)

(assert (=> d!11531 (= lt!24283 lt!24285)))

(assert (=> d!11531 (= (getValueByKey!124 lt!24286 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11531 (= lt!24285 (lemmaContainsTupThenGetReturnValue!41 lt!24286 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11531 (= lt!24286 (insertStrictlySorted!44 (toList!697 (getCurrentListMap!402 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16))) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11531 (= (+!81 (getCurrentListMap!402 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!24284)))

(declare-fun b!59687 () Bool)

(declare-fun res!33095 () Bool)

(assert (=> b!59687 (=> (not res!33095) (not e!39230))))

(assert (=> b!59687 (= res!33095 (= (getValueByKey!124 (toList!697 lt!24284) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!59688 () Bool)

(assert (=> b!59688 (= e!39230 (contains!684 (toList!697 lt!24284) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!11531 res!33094) b!59687))

(assert (= (and b!59687 res!33095) b!59688))

(declare-fun m!51787 () Bool)

(assert (=> d!11531 m!51787))

(declare-fun m!51789 () Bool)

(assert (=> d!11531 m!51789))

(declare-fun m!51791 () Bool)

(assert (=> d!11531 m!51791))

(declare-fun m!51793 () Bool)

(assert (=> d!11531 m!51793))

(declare-fun m!51795 () Bool)

(assert (=> b!59687 m!51795))

(declare-fun m!51797 () Bool)

(assert (=> b!59688 m!51797))

(assert (=> d!11243 d!11531))

(declare-fun d!11533 () Bool)

(assert (=> d!11533 (= (+!81 (getCurrentListMap!402 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!402 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) lt!23820 (zeroValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(assert (=> d!11533 true))

(declare-fun _$8!46 () Unit!1551)

(assert (=> d!11533 (= (choose!302 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) lt!23820 (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2043 newMap!16)) _$8!46)))

(declare-fun bs!2588 () Bool)

(assert (= bs!2588 d!11533))

(assert (=> bs!2588 m!50617))

(assert (=> bs!2588 m!50617))

(assert (=> bs!2588 m!50775))

(assert (=> bs!2588 m!50555))

(assert (=> bs!2588 m!50773))

(assert (=> d!11243 d!11533))

(assert (=> d!11243 d!11307))

(declare-fun c!7686 () Bool)

(declare-fun call!4494 () ListLongMap!1363)

(declare-fun call!4498 () ListLongMap!1363)

(declare-fun call!4497 () ListLongMap!1363)

(declare-fun c!7683 () Bool)

(declare-fun bm!4489 () Bool)

(declare-fun call!4495 () ListLongMap!1363)

(assert (=> bm!4489 (= call!4495 (+!81 (ite c!7683 call!4494 (ite c!7686 call!4497 call!4498)) (ite (or c!7683 c!7686) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!59689 () Bool)

(declare-fun e!39231 () ListLongMap!1363)

(declare-fun call!4492 () ListLongMap!1363)

(assert (=> b!59689 (= e!39231 call!4492)))

(declare-fun b!59690 () Bool)

(declare-fun c!7685 () Bool)

(assert (=> b!59690 (= c!7685 (and (not (= (bvand lt!23820 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!23820 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!39235 () ListLongMap!1363)

(assert (=> b!59690 (= e!39235 e!39231)))

(declare-fun b!59691 () Bool)

(declare-fun e!39238 () Bool)

(declare-fun call!4496 () Bool)

(assert (=> b!59691 (= e!39238 (not call!4496))))

(declare-fun b!59693 () Bool)

(declare-fun e!39237 () Bool)

(assert (=> b!59693 (= e!39237 (validKeyInArray!0 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59694 () Bool)

(declare-fun e!39241 () Bool)

(assert (=> b!59694 (= e!39238 e!39241)))

(declare-fun res!33104 () Bool)

(assert (=> b!59694 (= res!33104 call!4496)))

(assert (=> b!59694 (=> (not res!33104) (not e!39241))))

(declare-fun b!59695 () Bool)

(declare-fun e!39243 () Bool)

(assert (=> b!59695 (= e!39243 e!39238)))

(declare-fun c!7684 () Bool)

(assert (=> b!59695 (= c!7684 (not (= (bvand lt!23820 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!59696 () Bool)

(declare-fun e!39239 () Bool)

(declare-fun call!4493 () Bool)

(assert (=> b!59696 (= e!39239 (not call!4493))))

(declare-fun b!59697 () Bool)

(declare-fun e!39232 () Bool)

(declare-fun lt!24305 () ListLongMap!1363)

(assert (=> b!59697 (= e!39232 (= (apply!66 lt!24305 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1959 newMap!16)))))

(declare-fun b!59698 () Bool)

(declare-fun e!39233 () ListLongMap!1363)

(assert (=> b!59698 (= e!39233 e!39235)))

(assert (=> b!59698 (= c!7686 (and (not (= (bvand lt!23820 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!23820 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!59699 () Bool)

(declare-fun e!39240 () Unit!1551)

(declare-fun Unit!1581 () Unit!1551)

(assert (=> b!59699 (= e!39240 Unit!1581)))

(declare-fun bm!4490 () Bool)

(assert (=> bm!4490 (= call!4493 (contains!682 lt!24305 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59700 () Bool)

(declare-fun res!33096 () Bool)

(assert (=> b!59700 (=> (not res!33096) (not e!39243))))

(declare-fun e!39234 () Bool)

(assert (=> b!59700 (= res!33096 e!39234)))

(declare-fun res!33097 () Bool)

(assert (=> b!59700 (=> res!33097 e!39234)))

(declare-fun e!39242 () Bool)

(assert (=> b!59700 (= res!33097 (not e!39242))))

(declare-fun res!33099 () Bool)

(assert (=> b!59700 (=> (not res!33099) (not e!39242))))

(assert (=> b!59700 (= res!33099 (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(declare-fun b!59692 () Bool)

(assert (=> b!59692 (= e!39233 (+!81 call!4495 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun d!11535 () Bool)

(assert (=> d!11535 e!39243))

(declare-fun res!33103 () Bool)

(assert (=> d!11535 (=> (not res!33103) (not e!39243))))

(assert (=> d!11535 (= res!33103 (or (bvsge #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))))

(declare-fun lt!24290 () ListLongMap!1363)

(assert (=> d!11535 (= lt!24305 lt!24290)))

(declare-fun lt!24293 () Unit!1551)

(assert (=> d!11535 (= lt!24293 e!39240)))

(declare-fun c!7681 () Bool)

(assert (=> d!11535 (= c!7681 e!39237)))

(declare-fun res!33100 () Bool)

(assert (=> d!11535 (=> (not res!33100) (not e!39237))))

(assert (=> d!11535 (= res!33100 (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(assert (=> d!11535 (= lt!24290 e!39233)))

(assert (=> d!11535 (= c!7683 (and (not (= (bvand lt!23820 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!23820 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11535 (validMask!0 (mask!5927 newMap!16))))

(assert (=> d!11535 (= (getCurrentListMap!402 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) lt!23820 (zeroValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)) lt!24305)))

(declare-fun bm!4491 () Bool)

(assert (=> bm!4491 (= call!4498 call!4497)))

(declare-fun b!59701 () Bool)

(assert (=> b!59701 (= e!39242 (validKeyInArray!0 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59702 () Bool)

(assert (=> b!59702 (= e!39239 e!39232)))

(declare-fun res!33102 () Bool)

(assert (=> b!59702 (= res!33102 call!4493)))

(assert (=> b!59702 (=> (not res!33102) (not e!39232))))

(declare-fun bm!4492 () Bool)

(assert (=> bm!4492 (= call!4497 call!4494)))

(declare-fun b!59703 () Bool)

(assert (=> b!59703 (= e!39231 call!4498)))

(declare-fun bm!4493 () Bool)

(assert (=> bm!4493 (= call!4492 call!4495)))

(declare-fun bm!4494 () Bool)

(assert (=> bm!4494 (= call!4494 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) lt!23820 (zeroValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun b!59704 () Bool)

(declare-fun e!39236 () Bool)

(assert (=> b!59704 (= e!39236 (= (apply!66 lt!24305 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)) (get!1066 (select (arr!1782 (_values!2026 newMap!16)) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2043 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!59704 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2012 (_values!2026 newMap!16))))))

(assert (=> b!59704 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(declare-fun b!59705 () Bool)

(declare-fun lt!24301 () Unit!1551)

(assert (=> b!59705 (= e!39240 lt!24301)))

(declare-fun lt!24294 () ListLongMap!1363)

(assert (=> b!59705 (= lt!24294 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) lt!23820 (zeroValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!24289 () (_ BitVec 64))

(assert (=> b!59705 (= lt!24289 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24287 () (_ BitVec 64))

(assert (=> b!59705 (= lt!24287 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24302 () Unit!1551)

(assert (=> b!59705 (= lt!24302 (addStillContains!42 lt!24294 lt!24289 (zeroValue!1959 newMap!16) lt!24287))))

(assert (=> b!59705 (contains!682 (+!81 lt!24294 (tuple2!2023 lt!24289 (zeroValue!1959 newMap!16))) lt!24287)))

(declare-fun lt!24308 () Unit!1551)

(assert (=> b!59705 (= lt!24308 lt!24302)))

(declare-fun lt!24291 () ListLongMap!1363)

(assert (=> b!59705 (= lt!24291 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) lt!23820 (zeroValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!24299 () (_ BitVec 64))

(assert (=> b!59705 (= lt!24299 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24304 () (_ BitVec 64))

(assert (=> b!59705 (= lt!24304 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24297 () Unit!1551)

(assert (=> b!59705 (= lt!24297 (addApplyDifferent!42 lt!24291 lt!24299 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!24304))))

(assert (=> b!59705 (= (apply!66 (+!81 lt!24291 (tuple2!2023 lt!24299 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!24304) (apply!66 lt!24291 lt!24304))))

(declare-fun lt!24303 () Unit!1551)

(assert (=> b!59705 (= lt!24303 lt!24297)))

(declare-fun lt!24292 () ListLongMap!1363)

(assert (=> b!59705 (= lt!24292 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) lt!23820 (zeroValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!24300 () (_ BitVec 64))

(assert (=> b!59705 (= lt!24300 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24288 () (_ BitVec 64))

(assert (=> b!59705 (= lt!24288 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24306 () Unit!1551)

(assert (=> b!59705 (= lt!24306 (addApplyDifferent!42 lt!24292 lt!24300 (zeroValue!1959 newMap!16) lt!24288))))

(assert (=> b!59705 (= (apply!66 (+!81 lt!24292 (tuple2!2023 lt!24300 (zeroValue!1959 newMap!16))) lt!24288) (apply!66 lt!24292 lt!24288))))

(declare-fun lt!24295 () Unit!1551)

(assert (=> b!59705 (= lt!24295 lt!24306)))

(declare-fun lt!24298 () ListLongMap!1363)

(assert (=> b!59705 (= lt!24298 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) lt!23820 (zeroValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!24296 () (_ BitVec 64))

(assert (=> b!59705 (= lt!24296 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24307 () (_ BitVec 64))

(assert (=> b!59705 (= lt!24307 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!59705 (= lt!24301 (addApplyDifferent!42 lt!24298 lt!24296 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!24307))))

(assert (=> b!59705 (= (apply!66 (+!81 lt!24298 (tuple2!2023 lt!24296 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!24307) (apply!66 lt!24298 lt!24307))))

(declare-fun b!59706 () Bool)

(assert (=> b!59706 (= e!39234 e!39236)))

(declare-fun res!33098 () Bool)

(assert (=> b!59706 (=> (not res!33098) (not e!39236))))

(assert (=> b!59706 (= res!33098 (contains!682 lt!24305 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59706 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(declare-fun b!59707 () Bool)

(declare-fun res!33101 () Bool)

(assert (=> b!59707 (=> (not res!33101) (not e!39243))))

(assert (=> b!59707 (= res!33101 e!39239)))

(declare-fun c!7682 () Bool)

(assert (=> b!59707 (= c!7682 (not (= (bvand lt!23820 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!4495 () Bool)

(assert (=> bm!4495 (= call!4496 (contains!682 lt!24305 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59708 () Bool)

(assert (=> b!59708 (= e!39235 call!4492)))

(declare-fun b!59709 () Bool)

(assert (=> b!59709 (= e!39241 (= (apply!66 lt!24305 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (= (and d!11535 c!7683) b!59692))

(assert (= (and d!11535 (not c!7683)) b!59698))

(assert (= (and b!59698 c!7686) b!59708))

(assert (= (and b!59698 (not c!7686)) b!59690))

(assert (= (and b!59690 c!7685) b!59689))

(assert (= (and b!59690 (not c!7685)) b!59703))

(assert (= (or b!59689 b!59703) bm!4491))

(assert (= (or b!59708 bm!4491) bm!4492))

(assert (= (or b!59708 b!59689) bm!4493))

(assert (= (or b!59692 bm!4492) bm!4494))

(assert (= (or b!59692 bm!4493) bm!4489))

(assert (= (and d!11535 res!33100) b!59693))

(assert (= (and d!11535 c!7681) b!59705))

(assert (= (and d!11535 (not c!7681)) b!59699))

(assert (= (and d!11535 res!33103) b!59700))

(assert (= (and b!59700 res!33099) b!59701))

(assert (= (and b!59700 (not res!33097)) b!59706))

(assert (= (and b!59706 res!33098) b!59704))

(assert (= (and b!59700 res!33096) b!59707))

(assert (= (and b!59707 c!7682) b!59702))

(assert (= (and b!59707 (not c!7682)) b!59696))

(assert (= (and b!59702 res!33102) b!59697))

(assert (= (or b!59702 b!59696) bm!4490))

(assert (= (and b!59707 res!33101) b!59695))

(assert (= (and b!59695 c!7684) b!59694))

(assert (= (and b!59695 (not c!7684)) b!59691))

(assert (= (and b!59694 res!33104) b!59709))

(assert (= (or b!59694 b!59691) bm!4495))

(declare-fun b_lambda!2627 () Bool)

(assert (=> (not b_lambda!2627) (not b!59704)))

(assert (=> b!59704 t!4775))

(declare-fun b_and!3619 () Bool)

(assert (= b_and!3615 (and (=> t!4775 result!2381) b_and!3619)))

(assert (=> b!59704 t!4777))

(declare-fun b_and!3621 () Bool)

(assert (= b_and!3617 (and (=> t!4777 result!2383) b_and!3621)))

(declare-fun m!51799 () Bool)

(assert (=> b!59692 m!51799))

(assert (=> bm!4494 m!50555))

(declare-fun m!51801 () Bool)

(assert (=> bm!4494 m!51801))

(declare-fun m!51803 () Bool)

(assert (=> bm!4489 m!51803))

(declare-fun m!51805 () Bool)

(assert (=> b!59697 m!51805))

(assert (=> b!59701 m!50803))

(assert (=> b!59701 m!50803))

(assert (=> b!59701 m!50805))

(declare-fun m!51807 () Bool)

(assert (=> bm!4490 m!51807))

(assert (=> b!59704 m!51033))

(assert (=> b!59704 m!50803))

(declare-fun m!51809 () Bool)

(assert (=> b!59704 m!51809))

(assert (=> b!59704 m!50813))

(assert (=> b!59704 m!51033))

(assert (=> b!59704 m!50813))

(assert (=> b!59704 m!51037))

(assert (=> b!59704 m!50803))

(declare-fun m!51811 () Bool)

(assert (=> b!59709 m!51811))

(assert (=> b!59706 m!50803))

(assert (=> b!59706 m!50803))

(declare-fun m!51813 () Bool)

(assert (=> b!59706 m!51813))

(assert (=> b!59693 m!50803))

(assert (=> b!59693 m!50803))

(assert (=> b!59693 m!50805))

(assert (=> d!11535 m!50771))

(declare-fun m!51815 () Bool)

(assert (=> bm!4495 m!51815))

(declare-fun m!51817 () Bool)

(assert (=> b!59705 m!51817))

(declare-fun m!51819 () Bool)

(assert (=> b!59705 m!51819))

(declare-fun m!51821 () Bool)

(assert (=> b!59705 m!51821))

(declare-fun m!51823 () Bool)

(assert (=> b!59705 m!51823))

(assert (=> b!59705 m!51817))

(declare-fun m!51825 () Bool)

(assert (=> b!59705 m!51825))

(declare-fun m!51827 () Bool)

(assert (=> b!59705 m!51827))

(assert (=> b!59705 m!50555))

(declare-fun m!51829 () Bool)

(assert (=> b!59705 m!51829))

(assert (=> b!59705 m!50555))

(assert (=> b!59705 m!51801))

(declare-fun m!51831 () Bool)

(assert (=> b!59705 m!51831))

(declare-fun m!51833 () Bool)

(assert (=> b!59705 m!51833))

(declare-fun m!51835 () Bool)

(assert (=> b!59705 m!51835))

(assert (=> b!59705 m!50803))

(declare-fun m!51837 () Bool)

(assert (=> b!59705 m!51837))

(declare-fun m!51839 () Bool)

(assert (=> b!59705 m!51839))

(declare-fun m!51841 () Bool)

(assert (=> b!59705 m!51841))

(assert (=> b!59705 m!51831))

(assert (=> b!59705 m!50555))

(declare-fun m!51843 () Bool)

(assert (=> b!59705 m!51843))

(assert (=> b!59705 m!51827))

(declare-fun m!51845 () Bool)

(assert (=> b!59705 m!51845))

(assert (=> b!59705 m!51837))

(assert (=> d!11243 d!11535))

(assert (=> d!11243 d!11523))

(declare-fun d!11537 () Bool)

(assert (=> d!11537 (contains!682 (getCurrentListMap!402 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355))))

(declare-fun lt!24311 () Unit!1551)

(declare-fun choose!312 (array!3721 array!3723 (_ BitVec 32) (_ BitVec 32) V!2843 V!2843 (_ BitVec 64) (_ BitVec 32) Int) Unit!1551)

(assert (=> d!11537 (= lt!24311 (choose!312 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(assert (=> d!11537 (validMask!0 (mask!5927 newMap!16))))

(assert (=> d!11537 (= (lemmaArrayContainsKeyThenInListMap!5 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)) lt!24311)))

(declare-fun bs!2589 () Bool)

(assert (= bs!2589 d!11537))

(assert (=> bs!2589 m!50617))

(assert (=> bs!2589 m!50617))

(assert (=> bs!2589 m!50529))

(assert (=> bs!2589 m!50881))

(assert (=> bs!2589 m!50529))

(declare-fun m!51847 () Bool)

(assert (=> bs!2589 m!51847))

(assert (=> bs!2589 m!50771))

(assert (=> b!59155 d!11537))

(declare-fun d!11539 () Bool)

(declare-fun e!39244 () Bool)

(assert (=> d!11539 e!39244))

(declare-fun res!33105 () Bool)

(assert (=> d!11539 (=> res!33105 e!39244)))

(declare-fun lt!24314 () Bool)

(assert (=> d!11539 (= res!33105 (not lt!24314))))

(declare-fun lt!24313 () Bool)

(assert (=> d!11539 (= lt!24314 lt!24313)))

(declare-fun lt!24315 () Unit!1551)

(declare-fun e!39245 () Unit!1551)

(assert (=> d!11539 (= lt!24315 e!39245)))

(declare-fun c!7687 () Bool)

(assert (=> d!11539 (= c!7687 lt!24313)))

(assert (=> d!11539 (= lt!24313 (containsKey!128 (toList!697 (getCurrentListMap!402 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(assert (=> d!11539 (= (contains!682 (getCurrentListMap!402 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) lt!24314)))

(declare-fun b!59710 () Bool)

(declare-fun lt!24312 () Unit!1551)

(assert (=> b!59710 (= e!39245 lt!24312)))

(assert (=> b!59710 (= lt!24312 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 (getCurrentListMap!402 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(assert (=> b!59710 (isDefined!77 (getValueByKey!124 (toList!697 (getCurrentListMap!402 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(declare-fun b!59711 () Bool)

(declare-fun Unit!1582 () Unit!1551)

(assert (=> b!59711 (= e!39245 Unit!1582)))

(declare-fun b!59712 () Bool)

(assert (=> b!59712 (= e!39244 (isDefined!77 (getValueByKey!124 (toList!697 (getCurrentListMap!402 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355))))))

(assert (= (and d!11539 c!7687) b!59710))

(assert (= (and d!11539 (not c!7687)) b!59711))

(assert (= (and d!11539 (not res!33105)) b!59712))

(assert (=> d!11539 m!50529))

(declare-fun m!51849 () Bool)

(assert (=> d!11539 m!51849))

(assert (=> b!59710 m!50529))

(declare-fun m!51851 () Bool)

(assert (=> b!59710 m!51851))

(assert (=> b!59710 m!50529))

(declare-fun m!51853 () Bool)

(assert (=> b!59710 m!51853))

(assert (=> b!59710 m!51853))

(declare-fun m!51855 () Bool)

(assert (=> b!59710 m!51855))

(assert (=> b!59712 m!50529))

(assert (=> b!59712 m!51853))

(assert (=> b!59712 m!51853))

(assert (=> b!59712 m!51855))

(assert (=> b!59155 d!11539))

(assert (=> b!59155 d!11307))

(declare-fun d!11541 () Bool)

(declare-fun res!33107 () Bool)

(declare-fun e!39246 () Bool)

(assert (=> d!11541 (=> res!33107 e!39246)))

(assert (=> d!11541 (= res!33107 (bvsge #b00000000000000000000000000000000 (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992))))))))

(assert (=> d!11541 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (mask!5927 (v!2383 (underlying!226 thiss!992)))) e!39246)))

(declare-fun bm!4496 () Bool)

(declare-fun call!4499 () Bool)

(assert (=> bm!4496 (= call!4499 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3667 (v!2383 (underlying!226 thiss!992))) (mask!5927 (v!2383 (underlying!226 thiss!992)))))))

(declare-fun b!59713 () Bool)

(declare-fun e!39247 () Bool)

(assert (=> b!59713 (= e!39247 call!4499)))

(declare-fun b!59714 () Bool)

(assert (=> b!59714 (= e!39246 e!39247)))

(declare-fun c!7688 () Bool)

(assert (=> b!59714 (= c!7688 (validKeyInArray!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!59715 () Bool)

(declare-fun e!39248 () Bool)

(assert (=> b!59715 (= e!39247 e!39248)))

(declare-fun lt!24317 () (_ BitVec 64))

(assert (=> b!59715 (= lt!24317 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) #b00000000000000000000000000000000))))

(declare-fun lt!24318 () Unit!1551)

(assert (=> b!59715 (= lt!24318 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3667 (v!2383 (underlying!226 thiss!992))) lt!24317 #b00000000000000000000000000000000))))

(assert (=> b!59715 (arrayContainsKey!0 (_keys!3667 (v!2383 (underlying!226 thiss!992))) lt!24317 #b00000000000000000000000000000000)))

(declare-fun lt!24316 () Unit!1551)

(assert (=> b!59715 (= lt!24316 lt!24318)))

(declare-fun res!33106 () Bool)

(assert (=> b!59715 (= res!33106 (= (seekEntryOrOpen!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) #b00000000000000000000000000000000) (_keys!3667 (v!2383 (underlying!226 thiss!992))) (mask!5927 (v!2383 (underlying!226 thiss!992)))) (Found!227 #b00000000000000000000000000000000)))))

(assert (=> b!59715 (=> (not res!33106) (not e!39248))))

(declare-fun b!59716 () Bool)

(assert (=> b!59716 (= e!39248 call!4499)))

(assert (= (and d!11541 (not res!33107)) b!59714))

(assert (= (and b!59714 c!7688) b!59715))

(assert (= (and b!59714 (not c!7688)) b!59713))

(assert (= (and b!59715 res!33106) b!59716))

(assert (= (or b!59716 b!59713) bm!4496))

(declare-fun m!51857 () Bool)

(assert (=> bm!4496 m!51857))

(assert (=> b!59714 m!51523))

(assert (=> b!59714 m!51523))

(assert (=> b!59714 m!51529))

(assert (=> b!59715 m!51523))

(declare-fun m!51859 () Bool)

(assert (=> b!59715 m!51859))

(declare-fun m!51861 () Bool)

(assert (=> b!59715 m!51861))

(assert (=> b!59715 m!51523))

(declare-fun m!51863 () Bool)

(assert (=> b!59715 m!51863))

(assert (=> b!59088 d!11541))

(declare-fun d!11543 () Bool)

(assert (=> d!11543 (= (isDefined!77 (getValueByKey!124 (toList!697 e!38829) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355))) (not (isEmpty!293 (getValueByKey!124 (toList!697 e!38829) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))))

(declare-fun bs!2590 () Bool)

(assert (= bs!2590 d!11543))

(assert (=> bs!2590 m!51339))

(declare-fun m!51865 () Bool)

(assert (=> bs!2590 m!51865))

(assert (=> b!59412 d!11543))

(declare-fun b!59718 () Bool)

(declare-fun e!39249 () Option!130)

(declare-fun e!39250 () Option!130)

(assert (=> b!59718 (= e!39249 e!39250)))

(declare-fun c!7690 () Bool)

(assert (=> b!59718 (= c!7690 (and ((_ is Cons!1426) (toList!697 e!38829)) (not (= (_1!1022 (h!2007 (toList!697 e!38829))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))))

(declare-fun b!59717 () Bool)

(assert (=> b!59717 (= e!39249 (Some!129 (_2!1022 (h!2007 (toList!697 e!38829)))))))

(declare-fun b!59719 () Bool)

(assert (=> b!59719 (= e!39250 (getValueByKey!124 (t!4768 (toList!697 e!38829)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(declare-fun b!59720 () Bool)

(assert (=> b!59720 (= e!39250 None!128)))

(declare-fun d!11545 () Bool)

(declare-fun c!7689 () Bool)

(assert (=> d!11545 (= c!7689 (and ((_ is Cons!1426) (toList!697 e!38829)) (= (_1!1022 (h!2007 (toList!697 e!38829))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355))))))

(assert (=> d!11545 (= (getValueByKey!124 (toList!697 e!38829) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) e!39249)))

(assert (= (and d!11545 c!7689) b!59717))

(assert (= (and d!11545 (not c!7689)) b!59718))

(assert (= (and b!59718 c!7690) b!59719))

(assert (= (and b!59718 (not c!7690)) b!59720))

(assert (=> b!59719 m!50529))

(declare-fun m!51867 () Bool)

(assert (=> b!59719 m!51867))

(assert (=> b!59412 d!11545))

(assert (=> b!59343 d!11285))

(declare-fun d!11547 () Bool)

(declare-fun e!39251 () Bool)

(assert (=> d!11547 e!39251))

(declare-fun res!33108 () Bool)

(assert (=> d!11547 (=> (not res!33108) (not e!39251))))

(declare-fun lt!24320 () ListLongMap!1363)

(assert (=> d!11547 (= res!33108 (contains!682 lt!24320 (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!24322 () List!1430)

(assert (=> d!11547 (= lt!24320 (ListLongMap!1364 lt!24322))))

(declare-fun lt!24319 () Unit!1551)

(declare-fun lt!24321 () Unit!1551)

(assert (=> d!11547 (= lt!24319 lt!24321)))

(assert (=> d!11547 (= (getValueByKey!124 lt!24322 (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11547 (= lt!24321 (lemmaContainsTupThenGetReturnValue!41 lt!24322 (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11547 (= lt!24322 (insertStrictlySorted!44 (toList!697 call!4450) (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11547 (= (+!81 call!4450 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!24320)))

(declare-fun b!59721 () Bool)

(declare-fun res!33109 () Bool)

(assert (=> b!59721 (=> (not res!33109) (not e!39251))))

(assert (=> b!59721 (= res!33109 (= (getValueByKey!124 (toList!697 lt!24320) (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!59722 () Bool)

(assert (=> b!59722 (= e!39251 (contains!684 (toList!697 lt!24320) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!11547 res!33108) b!59721))

(assert (= (and b!59721 res!33109) b!59722))

(declare-fun m!51869 () Bool)

(assert (=> d!11547 m!51869))

(declare-fun m!51871 () Bool)

(assert (=> d!11547 m!51871))

(declare-fun m!51873 () Bool)

(assert (=> d!11547 m!51873))

(declare-fun m!51875 () Bool)

(assert (=> d!11547 m!51875))

(declare-fun m!51877 () Bool)

(assert (=> b!59721 m!51877))

(declare-fun m!51879 () Bool)

(assert (=> b!59722 m!51879))

(assert (=> b!59343 d!11547))

(declare-fun d!11549 () Bool)

(declare-fun e!39252 () Bool)

(assert (=> d!11549 e!39252))

(declare-fun res!33110 () Bool)

(assert (=> d!11549 (=> res!33110 e!39252)))

(declare-fun lt!24325 () Bool)

(assert (=> d!11549 (= res!33110 (not lt!24325))))

(declare-fun lt!24324 () Bool)

(assert (=> d!11549 (= lt!24325 lt!24324)))

(declare-fun lt!24326 () Unit!1551)

(declare-fun e!39253 () Unit!1551)

(assert (=> d!11549 (= lt!24326 e!39253)))

(declare-fun c!7691 () Bool)

(assert (=> d!11549 (= c!7691 lt!24324)))

(assert (=> d!11549 (= lt!24324 (containsKey!128 (toList!697 (+!81 lt!24090 (tuple2!2023 lt!24093 lt!24091))) lt!24088))))

(assert (=> d!11549 (= (contains!682 (+!81 lt!24090 (tuple2!2023 lt!24093 lt!24091)) lt!24088) lt!24325)))

(declare-fun b!59723 () Bool)

(declare-fun lt!24323 () Unit!1551)

(assert (=> b!59723 (= e!39253 lt!24323)))

(assert (=> b!59723 (= lt!24323 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 (+!81 lt!24090 (tuple2!2023 lt!24093 lt!24091))) lt!24088))))

(assert (=> b!59723 (isDefined!77 (getValueByKey!124 (toList!697 (+!81 lt!24090 (tuple2!2023 lt!24093 lt!24091))) lt!24088))))

(declare-fun b!59724 () Bool)

(declare-fun Unit!1583 () Unit!1551)

(assert (=> b!59724 (= e!39253 Unit!1583)))

(declare-fun b!59725 () Bool)

(assert (=> b!59725 (= e!39252 (isDefined!77 (getValueByKey!124 (toList!697 (+!81 lt!24090 (tuple2!2023 lt!24093 lt!24091))) lt!24088)))))

(assert (= (and d!11549 c!7691) b!59723))

(assert (= (and d!11549 (not c!7691)) b!59724))

(assert (= (and d!11549 (not res!33110)) b!59725))

(declare-fun m!51881 () Bool)

(assert (=> d!11549 m!51881))

(declare-fun m!51883 () Bool)

(assert (=> b!59723 m!51883))

(declare-fun m!51885 () Bool)

(assert (=> b!59723 m!51885))

(assert (=> b!59723 m!51885))

(declare-fun m!51887 () Bool)

(assert (=> b!59723 m!51887))

(assert (=> b!59725 m!51885))

(assert (=> b!59725 m!51885))

(assert (=> b!59725 m!51887))

(assert (=> b!59343 d!11549))

(declare-fun d!11551 () Bool)

(assert (=> d!11551 (not (contains!682 (+!81 lt!24090 (tuple2!2023 lt!24093 lt!24091)) lt!24088))))

(declare-fun lt!24329 () Unit!1551)

(declare-fun choose!313 (ListLongMap!1363 (_ BitVec 64) V!2843 (_ BitVec 64)) Unit!1551)

(assert (=> d!11551 (= lt!24329 (choose!313 lt!24090 lt!24093 lt!24091 lt!24088))))

(declare-fun e!39256 () Bool)

(assert (=> d!11551 e!39256))

(declare-fun res!33113 () Bool)

(assert (=> d!11551 (=> (not res!33113) (not e!39256))))

(assert (=> d!11551 (= res!33113 (not (contains!682 lt!24090 lt!24088)))))

(assert (=> d!11551 (= (addStillNotContains!15 lt!24090 lt!24093 lt!24091 lt!24088) lt!24329)))

(declare-fun b!59729 () Bool)

(assert (=> b!59729 (= e!39256 (not (= lt!24093 lt!24088)))))

(assert (= (and d!11551 res!33113) b!59729))

(assert (=> d!11551 m!51153))

(assert (=> d!11551 m!51153))

(assert (=> d!11551 m!51155))

(declare-fun m!51889 () Bool)

(assert (=> d!11551 m!51889))

(declare-fun m!51891 () Bool)

(assert (=> d!11551 m!51891))

(assert (=> b!59343 d!11551))

(declare-fun d!11553 () Bool)

(declare-fun e!39257 () Bool)

(assert (=> d!11553 e!39257))

(declare-fun res!33114 () Bool)

(assert (=> d!11553 (=> (not res!33114) (not e!39257))))

(declare-fun lt!24331 () ListLongMap!1363)

(assert (=> d!11553 (= res!33114 (contains!682 lt!24331 (_1!1022 (tuple2!2023 lt!24093 lt!24091))))))

(declare-fun lt!24333 () List!1430)

(assert (=> d!11553 (= lt!24331 (ListLongMap!1364 lt!24333))))

(declare-fun lt!24330 () Unit!1551)

(declare-fun lt!24332 () Unit!1551)

(assert (=> d!11553 (= lt!24330 lt!24332)))

(assert (=> d!11553 (= (getValueByKey!124 lt!24333 (_1!1022 (tuple2!2023 lt!24093 lt!24091))) (Some!129 (_2!1022 (tuple2!2023 lt!24093 lt!24091))))))

(assert (=> d!11553 (= lt!24332 (lemmaContainsTupThenGetReturnValue!41 lt!24333 (_1!1022 (tuple2!2023 lt!24093 lt!24091)) (_2!1022 (tuple2!2023 lt!24093 lt!24091))))))

(assert (=> d!11553 (= lt!24333 (insertStrictlySorted!44 (toList!697 lt!24090) (_1!1022 (tuple2!2023 lt!24093 lt!24091)) (_2!1022 (tuple2!2023 lt!24093 lt!24091))))))

(assert (=> d!11553 (= (+!81 lt!24090 (tuple2!2023 lt!24093 lt!24091)) lt!24331)))

(declare-fun b!59730 () Bool)

(declare-fun res!33115 () Bool)

(assert (=> b!59730 (=> (not res!33115) (not e!39257))))

(assert (=> b!59730 (= res!33115 (= (getValueByKey!124 (toList!697 lt!24331) (_1!1022 (tuple2!2023 lt!24093 lt!24091))) (Some!129 (_2!1022 (tuple2!2023 lt!24093 lt!24091)))))))

(declare-fun b!59731 () Bool)

(assert (=> b!59731 (= e!39257 (contains!684 (toList!697 lt!24331) (tuple2!2023 lt!24093 lt!24091)))))

(assert (= (and d!11553 res!33114) b!59730))

(assert (= (and b!59730 res!33115) b!59731))

(declare-fun m!51893 () Bool)

(assert (=> d!11553 m!51893))

(declare-fun m!51895 () Bool)

(assert (=> d!11553 m!51895))

(declare-fun m!51897 () Bool)

(assert (=> d!11553 m!51897))

(declare-fun m!51899 () Bool)

(assert (=> d!11553 m!51899))

(declare-fun m!51901 () Bool)

(assert (=> b!59730 m!51901))

(declare-fun m!51903 () Bool)

(assert (=> b!59731 m!51903))

(assert (=> b!59343 d!11553))

(assert (=> b!59105 d!11375))

(declare-fun d!11555 () Bool)

(declare-fun lt!24334 () Bool)

(assert (=> d!11555 (= lt!24334 (select (content!63 (ite c!7516 (Cons!1427 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) Nil!1428) Nil!1428)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun e!39259 () Bool)

(assert (=> d!11555 (= lt!24334 e!39259)))

(declare-fun res!33116 () Bool)

(assert (=> d!11555 (=> (not res!33116) (not e!39259))))

(assert (=> d!11555 (= res!33116 ((_ is Cons!1427) (ite c!7516 (Cons!1427 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) Nil!1428) Nil!1428)))))

(assert (=> d!11555 (= (contains!683 (ite c!7516 (Cons!1427 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) Nil!1428) Nil!1428) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) lt!24334)))

(declare-fun b!59732 () Bool)

(declare-fun e!39258 () Bool)

(assert (=> b!59732 (= e!39259 e!39258)))

(declare-fun res!33117 () Bool)

(assert (=> b!59732 (=> res!33117 e!39258)))

(assert (=> b!59732 (= res!33117 (= (h!2008 (ite c!7516 (Cons!1427 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) Nil!1428) Nil!1428)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!59733 () Bool)

(assert (=> b!59733 (= e!39258 (contains!683 (t!4769 (ite c!7516 (Cons!1427 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) Nil!1428) Nil!1428)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(assert (= (and d!11555 res!33116) b!59732))

(assert (= (and b!59732 (not res!33117)) b!59733))

(declare-fun m!51905 () Bool)

(assert (=> d!11555 m!51905))

(assert (=> d!11555 m!51325))

(declare-fun m!51907 () Bool)

(assert (=> d!11555 m!51907))

(assert (=> b!59733 m!51325))

(declare-fun m!51909 () Bool)

(assert (=> b!59733 m!51909))

(assert (=> b!59393 d!11555))

(declare-fun d!11557 () Bool)

(declare-fun lt!24335 () Bool)

(assert (=> d!11557 (= lt!24335 (select (content!64 (toList!697 lt!24121)) (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))

(declare-fun e!39260 () Bool)

(assert (=> d!11557 (= lt!24335 e!39260)))

(declare-fun res!33119 () Bool)

(assert (=> d!11557 (=> (not res!33119) (not e!39260))))

(assert (=> d!11557 (= res!33119 ((_ is Cons!1426) (toList!697 lt!24121)))))

(assert (=> d!11557 (= (contains!684 (toList!697 lt!24121) (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) lt!24335)))

(declare-fun b!59734 () Bool)

(declare-fun e!39261 () Bool)

(assert (=> b!59734 (= e!39260 e!39261)))

(declare-fun res!33118 () Bool)

(assert (=> b!59734 (=> res!33118 e!39261)))

(assert (=> b!59734 (= res!33118 (= (h!2007 (toList!697 lt!24121)) (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))

(declare-fun b!59735 () Bool)

(assert (=> b!59735 (= e!39261 (contains!684 (t!4768 (toList!697 lt!24121)) (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))

(assert (= (and d!11557 res!33119) b!59734))

(assert (= (and b!59734 (not res!33118)) b!59735))

(declare-fun m!51911 () Bool)

(assert (=> d!11557 m!51911))

(declare-fun m!51913 () Bool)

(assert (=> d!11557 m!51913))

(declare-fun m!51915 () Bool)

(assert (=> b!59735 m!51915))

(assert (=> b!59364 d!11557))

(declare-fun d!11559 () Bool)

(declare-fun e!39262 () Bool)

(assert (=> d!11559 e!39262))

(declare-fun res!33120 () Bool)

(assert (=> d!11559 (=> res!33120 e!39262)))

(declare-fun lt!24338 () Bool)

(assert (=> d!11559 (= res!33120 (not lt!24338))))

(declare-fun lt!24337 () Bool)

(assert (=> d!11559 (= lt!24338 lt!24337)))

(declare-fun lt!24339 () Unit!1551)

(declare-fun e!39263 () Unit!1551)

(assert (=> d!11559 (= lt!24339 e!39263)))

(declare-fun c!7692 () Bool)

(assert (=> d!11559 (= c!7692 lt!24337)))

(assert (=> d!11559 (= lt!24337 (containsKey!128 (toList!697 lt!23732) lt!23741))))

(assert (=> d!11559 (= (contains!682 lt!23732 lt!23741) lt!24338)))

(declare-fun b!59736 () Bool)

(declare-fun lt!24336 () Unit!1551)

(assert (=> b!59736 (= e!39263 lt!24336)))

(assert (=> b!59736 (= lt!24336 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 lt!23732) lt!23741))))

(assert (=> b!59736 (isDefined!77 (getValueByKey!124 (toList!697 lt!23732) lt!23741))))

(declare-fun b!59737 () Bool)

(declare-fun Unit!1584 () Unit!1551)

(assert (=> b!59737 (= e!39263 Unit!1584)))

(declare-fun b!59738 () Bool)

(assert (=> b!59738 (= e!39262 (isDefined!77 (getValueByKey!124 (toList!697 lt!23732) lt!23741)))))

(assert (= (and d!11559 c!7692) b!59736))

(assert (= (and d!11559 (not c!7692)) b!59737))

(assert (= (and d!11559 (not res!33120)) b!59738))

(declare-fun m!51917 () Bool)

(assert (=> d!11559 m!51917))

(declare-fun m!51919 () Bool)

(assert (=> b!59736 m!51919))

(assert (=> b!59736 m!51257))

(assert (=> b!59736 m!51257))

(declare-fun m!51921 () Bool)

(assert (=> b!59736 m!51921))

(assert (=> b!59738 m!51257))

(assert (=> b!59738 m!51257))

(assert (=> b!59738 m!51921))

(assert (=> d!11341 d!11559))

(assert (=> d!11341 d!11343))

(declare-fun d!11561 () Bool)

(assert (=> d!11561 (= (apply!66 (+!81 lt!23732 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) lt!23741) (apply!66 lt!23732 lt!23741))))

(assert (=> d!11561 true))

(declare-fun _$34!762 () Unit!1551)

(assert (=> d!11561 (= (choose!307 lt!23732 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992))) lt!23741) _$34!762)))

(declare-fun bs!2591 () Bool)

(assert (= bs!2591 d!11561))

(assert (=> bs!2591 m!50659))

(assert (=> bs!2591 m!50659))

(assert (=> bs!2591 m!50661))

(assert (=> bs!2591 m!50651))

(assert (=> d!11341 d!11561))

(assert (=> d!11341 d!11337))

(assert (=> d!11341 d!11339))

(assert (=> b!59175 d!11231))

(declare-fun d!11563 () Bool)

(declare-fun e!39264 () Bool)

(assert (=> d!11563 e!39264))

(declare-fun res!33121 () Bool)

(assert (=> d!11563 (=> res!33121 e!39264)))

(declare-fun lt!24342 () Bool)

(assert (=> d!11563 (= res!33121 (not lt!24342))))

(declare-fun lt!24341 () Bool)

(assert (=> d!11563 (= lt!24342 lt!24341)))

(declare-fun lt!24343 () Unit!1551)

(declare-fun e!39265 () Unit!1551)

(assert (=> d!11563 (= lt!24343 e!39265)))

(declare-fun c!7693 () Bool)

(assert (=> d!11563 (= c!7693 lt!24341)))

(assert (=> d!11563 (= lt!24341 (containsKey!128 (toList!697 lt!23726) lt!23722))))

(assert (=> d!11563 (= (contains!682 lt!23726 lt!23722) lt!24342)))

(declare-fun b!59740 () Bool)

(declare-fun lt!24340 () Unit!1551)

(assert (=> b!59740 (= e!39265 lt!24340)))

(assert (=> b!59740 (= lt!24340 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 lt!23726) lt!23722))))

(assert (=> b!59740 (isDefined!77 (getValueByKey!124 (toList!697 lt!23726) lt!23722))))

(declare-fun b!59741 () Bool)

(declare-fun Unit!1585 () Unit!1551)

(assert (=> b!59741 (= e!39265 Unit!1585)))

(declare-fun b!59742 () Bool)

(assert (=> b!59742 (= e!39264 (isDefined!77 (getValueByKey!124 (toList!697 lt!23726) lt!23722)))))

(assert (= (and d!11563 c!7693) b!59740))

(assert (= (and d!11563 (not c!7693)) b!59741))

(assert (= (and d!11563 (not res!33121)) b!59742))

(declare-fun m!51923 () Bool)

(assert (=> d!11563 m!51923))

(declare-fun m!51925 () Bool)

(assert (=> b!59740 m!51925))

(assert (=> b!59740 m!51261))

(assert (=> b!59740 m!51261))

(declare-fun m!51927 () Bool)

(assert (=> b!59740 m!51927))

(assert (=> b!59742 m!51261))

(assert (=> b!59742 m!51261))

(assert (=> b!59742 m!51927))

(assert (=> d!11325 d!11563))

(assert (=> d!11325 d!11323))

(declare-fun d!11565 () Bool)

(assert (=> d!11565 (= (apply!66 (+!81 lt!23726 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))) lt!23722) (apply!66 lt!23726 lt!23722))))

(assert (=> d!11565 true))

(declare-fun _$34!763 () Unit!1551)

(assert (=> d!11565 (= (choose!307 lt!23726 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))) lt!23722) _$34!763)))

(declare-fun bs!2592 () Bool)

(assert (= bs!2592 d!11565))

(assert (=> bs!2592 m!50665))

(assert (=> bs!2592 m!50665))

(assert (=> bs!2592 m!50667))

(assert (=> bs!2592 m!50669))

(assert (=> d!11325 d!11565))

(assert (=> d!11325 d!11345))

(assert (=> d!11325 d!11331))

(declare-fun d!11567 () Bool)

(assert (=> d!11567 (= (apply!66 lt!24144 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1069 (getValueByKey!124 (toList!697 lt!24144) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2593 () Bool)

(assert (= bs!2593 d!11567))

(declare-fun m!51929 () Bool)

(assert (=> bs!2593 m!51929))

(assert (=> bs!2593 m!51929))

(declare-fun m!51931 () Bool)

(assert (=> bs!2593 m!51931))

(assert (=> b!59392 d!11567))

(assert (=> d!11365 d!11309))

(declare-fun d!11569 () Bool)

(declare-fun e!39268 () Bool)

(assert (=> d!11569 e!39268))

(declare-fun res!33126 () Bool)

(assert (=> d!11569 (=> (not res!33126) (not e!39268))))

(declare-fun lt!24346 () SeekEntryResult!227)

(assert (=> d!11569 (= res!33126 ((_ is Found!227) lt!24346))))

(assert (=> d!11569 (= lt!24346 (seekEntryOrOpen!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (_keys!3667 newMap!16) (mask!5927 newMap!16)))))

(assert (=> d!11569 true))

(declare-fun _$33!42 () Unit!1551)

(assert (=> d!11569 (= (choose!309 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (defaultEntry!2043 newMap!16)) _$33!42)))

(declare-fun b!59747 () Bool)

(declare-fun res!33127 () Bool)

(assert (=> b!59747 (=> (not res!33127) (not e!39268))))

(assert (=> b!59747 (= res!33127 (inRange!0 (index!3032 lt!24346) (mask!5927 newMap!16)))))

(declare-fun b!59748 () Bool)

(assert (=> b!59748 (= e!39268 (= (select (arr!1781 (_keys!3667 newMap!16)) (index!3032 lt!24346)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(assert (= (and d!11569 res!33126) b!59747))

(assert (= (and b!59747 res!33127) b!59748))

(assert (=> d!11569 m!50529))

(assert (=> d!11569 m!50713))

(declare-fun m!51933 () Bool)

(assert (=> b!59747 m!51933))

(declare-fun m!51935 () Bool)

(assert (=> b!59748 m!51935))

(assert (=> d!11365 d!11569))

(assert (=> d!11365 d!11523))

(declare-fun b!59761 () Bool)

(declare-fun e!39276 () SeekEntryResult!227)

(assert (=> b!59761 (= e!39276 Undefined!227)))

(declare-fun lt!24351 () SeekEntryResult!227)

(declare-fun d!11571 () Bool)

(assert (=> d!11571 (and (or ((_ is Undefined!227) lt!24351) (not ((_ is Found!227) lt!24351)) (and (bvsge (index!3032 lt!24351) #b00000000000000000000000000000000) (bvslt (index!3032 lt!24351) (size!2011 (_keys!3667 newMap!16))))) (or ((_ is Undefined!227) lt!24351) ((_ is Found!227) lt!24351) (not ((_ is MissingVacant!227) lt!24351)) (not (= (index!3034 lt!24351) (index!3033 lt!24046))) (and (bvsge (index!3034 lt!24351) #b00000000000000000000000000000000) (bvslt (index!3034 lt!24351) (size!2011 (_keys!3667 newMap!16))))) (or ((_ is Undefined!227) lt!24351) (ite ((_ is Found!227) lt!24351) (= (select (arr!1781 (_keys!3667 newMap!16)) (index!3032 lt!24351)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (and ((_ is MissingVacant!227) lt!24351) (= (index!3034 lt!24351) (index!3033 lt!24046)) (= (select (arr!1781 (_keys!3667 newMap!16)) (index!3034 lt!24351)) #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (=> d!11571 (= lt!24351 e!39276)))

(declare-fun c!7702 () Bool)

(assert (=> d!11571 (= c!7702 (bvsge (x!10003 lt!24046) #b01111111111111111111111111111110))))

(declare-fun lt!24352 () (_ BitVec 64))

(assert (=> d!11571 (= lt!24352 (select (arr!1781 (_keys!3667 newMap!16)) (index!3033 lt!24046)))))

(assert (=> d!11571 (validMask!0 (mask!5927 newMap!16))))

(assert (=> d!11571 (= (seekKeyOrZeroReturnVacant!0 (x!10003 lt!24046) (index!3033 lt!24046) (index!3033 lt!24046) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (_keys!3667 newMap!16) (mask!5927 newMap!16)) lt!24351)))

(declare-fun b!59762 () Bool)

(declare-fun e!39275 () SeekEntryResult!227)

(assert (=> b!59762 (= e!39275 (Found!227 (index!3033 lt!24046)))))

(declare-fun b!59763 () Bool)

(declare-fun e!39277 () SeekEntryResult!227)

(assert (=> b!59763 (= e!39277 (MissingVacant!227 (index!3033 lt!24046)))))

(declare-fun b!59764 () Bool)

(declare-fun nextIndex!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!59764 (= e!39277 (seekKeyOrZeroReturnVacant!0 (bvadd (x!10003 lt!24046) #b00000000000000000000000000000001) (nextIndex!0 (index!3033 lt!24046) (x!10003 lt!24046) (mask!5927 newMap!16)) (index!3033 lt!24046) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (_keys!3667 newMap!16) (mask!5927 newMap!16)))))

(declare-fun b!59765 () Bool)

(declare-fun c!7701 () Bool)

(assert (=> b!59765 (= c!7701 (= lt!24352 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59765 (= e!39275 e!39277)))

(declare-fun b!59766 () Bool)

(assert (=> b!59766 (= e!39276 e!39275)))

(declare-fun c!7700 () Bool)

(assert (=> b!59766 (= c!7700 (= lt!24352 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(assert (= (and d!11571 c!7702) b!59761))

(assert (= (and d!11571 (not c!7702)) b!59766))

(assert (= (and b!59766 c!7700) b!59762))

(assert (= (and b!59766 (not c!7700)) b!59765))

(assert (= (and b!59765 c!7701) b!59763))

(assert (= (and b!59765 (not c!7701)) b!59764))

(declare-fun m!51937 () Bool)

(assert (=> d!11571 m!51937))

(declare-fun m!51939 () Bool)

(assert (=> d!11571 m!51939))

(assert (=> d!11571 m!51075))

(assert (=> d!11571 m!50771))

(declare-fun m!51941 () Bool)

(assert (=> b!59764 m!51941))

(assert (=> b!59764 m!51941))

(assert (=> b!59764 m!50529))

(declare-fun m!51943 () Bool)

(assert (=> b!59764 m!51943))

(assert (=> b!59284 d!11571))

(declare-fun d!11573 () Bool)

(assert (=> d!11573 (= (get!1069 (getValueByKey!124 (toList!697 (+!81 lt!23726 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!23722)) (v!2386 (getValueByKey!124 (toList!697 (+!81 lt!23726 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!23722)))))

(assert (=> d!11331 d!11573))

(declare-fun b!59768 () Bool)

(declare-fun e!39278 () Option!130)

(declare-fun e!39279 () Option!130)

(assert (=> b!59768 (= e!39278 e!39279)))

(declare-fun c!7704 () Bool)

(assert (=> b!59768 (= c!7704 (and ((_ is Cons!1426) (toList!697 (+!81 lt!23726 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))) (not (= (_1!1022 (h!2007 (toList!697 (+!81 lt!23726 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))) lt!23722))))))

(declare-fun b!59767 () Bool)

(assert (=> b!59767 (= e!39278 (Some!129 (_2!1022 (h!2007 (toList!697 (+!81 lt!23726 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))))))))

(declare-fun b!59769 () Bool)

(assert (=> b!59769 (= e!39279 (getValueByKey!124 (t!4768 (toList!697 (+!81 lt!23726 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))) lt!23722))))

(declare-fun b!59770 () Bool)

(assert (=> b!59770 (= e!39279 None!128)))

(declare-fun d!11575 () Bool)

(declare-fun c!7703 () Bool)

(assert (=> d!11575 (= c!7703 (and ((_ is Cons!1426) (toList!697 (+!81 lt!23726 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))) (= (_1!1022 (h!2007 (toList!697 (+!81 lt!23726 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))) lt!23722)))))

(assert (=> d!11575 (= (getValueByKey!124 (toList!697 (+!81 lt!23726 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!23722) e!39278)))

(assert (= (and d!11575 c!7703) b!59767))

(assert (= (and d!11575 (not c!7703)) b!59768))

(assert (= (and b!59768 c!7704) b!59769))

(assert (= (and b!59768 (not c!7704)) b!59770))

(declare-fun m!51945 () Bool)

(assert (=> b!59769 m!51945))

(assert (=> d!11331 d!11575))

(declare-fun b!59773 () Bool)

(declare-fun res!33131 () Bool)

(declare-fun e!39280 () Bool)

(assert (=> b!59773 (=> (not res!33131) (not e!39280))))

(assert (=> b!59773 (= res!33131 (= (size!2015 (_2!1021 lt!23809)) (bvadd (_size!358 (_2!1021 lt!23809)) (bvsdiv (bvadd (extraKeys!1930 (_2!1021 lt!23809)) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!59772 () Bool)

(declare-fun res!33129 () Bool)

(assert (=> b!59772 (=> (not res!33129) (not e!39280))))

(assert (=> b!59772 (= res!33129 (bvsge (size!2015 (_2!1021 lt!23809)) (_size!358 (_2!1021 lt!23809))))))

(declare-fun d!11577 () Bool)

(declare-fun res!33130 () Bool)

(assert (=> d!11577 (=> (not res!33130) (not e!39280))))

(assert (=> d!11577 (= res!33130 (validMask!0 (mask!5927 (_2!1021 lt!23809))))))

(assert (=> d!11577 (= (simpleValid!42 (_2!1021 lt!23809)) e!39280)))

(declare-fun b!59774 () Bool)

(assert (=> b!59774 (= e!39280 (and (bvsge (extraKeys!1930 (_2!1021 lt!23809)) #b00000000000000000000000000000000) (bvsle (extraKeys!1930 (_2!1021 lt!23809)) #b00000000000000000000000000000011) (bvsge (_vacant!358 (_2!1021 lt!23809)) #b00000000000000000000000000000000)))))

(declare-fun b!59771 () Bool)

(declare-fun res!33128 () Bool)

(assert (=> b!59771 (=> (not res!33128) (not e!39280))))

(assert (=> b!59771 (= res!33128 (and (= (size!2012 (_values!2026 (_2!1021 lt!23809))) (bvadd (mask!5927 (_2!1021 lt!23809)) #b00000000000000000000000000000001)) (= (size!2011 (_keys!3667 (_2!1021 lt!23809))) (size!2012 (_values!2026 (_2!1021 lt!23809)))) (bvsge (_size!358 (_2!1021 lt!23809)) #b00000000000000000000000000000000) (bvsle (_size!358 (_2!1021 lt!23809)) (bvadd (mask!5927 (_2!1021 lt!23809)) #b00000000000000000000000000000001))))))

(assert (= (and d!11577 res!33130) b!59771))

(assert (= (and b!59771 res!33128) b!59772))

(assert (= (and b!59772 res!33129) b!59773))

(assert (= (and b!59773 res!33131) b!59774))

(declare-fun m!51947 () Bool)

(assert (=> b!59773 m!51947))

(assert (=> b!59772 m!51947))

(declare-fun m!51949 () Bool)

(assert (=> d!11577 m!51949))

(assert (=> d!11305 d!11577))

(declare-fun d!11579 () Bool)

(assert (=> d!11579 (= (get!1069 (getValueByKey!124 (toList!697 lt!23726) lt!23722)) (v!2386 (getValueByKey!124 (toList!697 lt!23726) lt!23722)))))

(assert (=> d!11345 d!11579))

(declare-fun b!59776 () Bool)

(declare-fun e!39281 () Option!130)

(declare-fun e!39282 () Option!130)

(assert (=> b!59776 (= e!39281 e!39282)))

(declare-fun c!7706 () Bool)

(assert (=> b!59776 (= c!7706 (and ((_ is Cons!1426) (toList!697 lt!23726)) (not (= (_1!1022 (h!2007 (toList!697 lt!23726))) lt!23722))))))

(declare-fun b!59775 () Bool)

(assert (=> b!59775 (= e!39281 (Some!129 (_2!1022 (h!2007 (toList!697 lt!23726)))))))

(declare-fun b!59777 () Bool)

(assert (=> b!59777 (= e!39282 (getValueByKey!124 (t!4768 (toList!697 lt!23726)) lt!23722))))

(declare-fun b!59778 () Bool)

(assert (=> b!59778 (= e!39282 None!128)))

(declare-fun d!11581 () Bool)

(declare-fun c!7705 () Bool)

(assert (=> d!11581 (= c!7705 (and ((_ is Cons!1426) (toList!697 lt!23726)) (= (_1!1022 (h!2007 (toList!697 lt!23726))) lt!23722)))))

(assert (=> d!11581 (= (getValueByKey!124 (toList!697 lt!23726) lt!23722) e!39281)))

(assert (= (and d!11581 c!7705) b!59775))

(assert (= (and d!11581 (not c!7705)) b!59776))

(assert (= (and b!59776 c!7706) b!59777))

(assert (= (and b!59776 (not c!7706)) b!59778))

(declare-fun m!51951 () Bool)

(assert (=> b!59777 m!51951))

(assert (=> d!11345 d!11581))

(declare-fun d!11583 () Bool)

(declare-fun e!39283 () Bool)

(assert (=> d!11583 e!39283))

(declare-fun res!33132 () Bool)

(assert (=> d!11583 (=> res!33132 e!39283)))

(declare-fun lt!24355 () Bool)

(assert (=> d!11583 (= res!33132 (not lt!24355))))

(declare-fun lt!24354 () Bool)

(assert (=> d!11583 (= lt!24355 lt!24354)))

(declare-fun lt!24356 () Unit!1551)

(declare-fun e!39284 () Unit!1551)

(assert (=> d!11583 (= lt!24356 e!39284)))

(declare-fun c!7707 () Bool)

(assert (=> d!11583 (= c!7707 lt!24354)))

(assert (=> d!11583 (= lt!24354 (containsKey!128 (toList!697 lt!24092) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11583 (= (contains!682 lt!24092 #b1000000000000000000000000000000000000000000000000000000000000000) lt!24355)))

(declare-fun b!59779 () Bool)

(declare-fun lt!24353 () Unit!1551)

(assert (=> b!59779 (= e!39284 lt!24353)))

(assert (=> b!59779 (= lt!24353 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 lt!24092) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59779 (isDefined!77 (getValueByKey!124 (toList!697 lt!24092) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59780 () Bool)

(declare-fun Unit!1586 () Unit!1551)

(assert (=> b!59780 (= e!39284 Unit!1586)))

(declare-fun b!59781 () Bool)

(assert (=> b!59781 (= e!39283 (isDefined!77 (getValueByKey!124 (toList!697 lt!24092) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11583 c!7707) b!59779))

(assert (= (and d!11583 (not c!7707)) b!59780))

(assert (= (and d!11583 (not res!33132)) b!59781))

(declare-fun m!51953 () Bool)

(assert (=> d!11583 m!51953))

(declare-fun m!51955 () Bool)

(assert (=> b!59779 m!51955))

(declare-fun m!51957 () Bool)

(assert (=> b!59779 m!51957))

(assert (=> b!59779 m!51957))

(declare-fun m!51959 () Bool)

(assert (=> b!59779 m!51959))

(assert (=> b!59781 m!51957))

(assert (=> b!59781 m!51957))

(assert (=> b!59781 m!51959))

(assert (=> b!59335 d!11583))

(declare-fun d!11585 () Bool)

(assert (=> d!11585 (= (apply!66 lt!24034 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1069 (getValueByKey!124 (toList!697 lt!24034) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2594 () Bool)

(assert (= bs!2594 d!11585))

(declare-fun m!51961 () Bool)

(assert (=> bs!2594 m!51961))

(assert (=> bs!2594 m!51961))

(declare-fun m!51963 () Bool)

(assert (=> bs!2594 m!51963))

(assert (=> b!59255 d!11585))

(declare-fun d!11587 () Bool)

(declare-fun e!39285 () Bool)

(assert (=> d!11587 e!39285))

(declare-fun res!33133 () Bool)

(assert (=> d!11587 (=> res!33133 e!39285)))

(declare-fun lt!24359 () Bool)

(assert (=> d!11587 (= res!33133 (not lt!24359))))

(declare-fun lt!24358 () Bool)

(assert (=> d!11587 (= lt!24359 lt!24358)))

(declare-fun lt!24360 () Unit!1551)

(declare-fun e!39286 () Unit!1551)

(assert (=> d!11587 (= lt!24360 e!39286)))

(declare-fun c!7708 () Bool)

(assert (=> d!11587 (= c!7708 lt!24358)))

(assert (=> d!11587 (= lt!24358 (containsKey!128 (toList!697 lt!24144) (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!11587 (= (contains!682 lt!24144 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)) lt!24359)))

(declare-fun b!59782 () Bool)

(declare-fun lt!24357 () Unit!1551)

(assert (=> b!59782 (= e!39286 lt!24357)))

(assert (=> b!59782 (= lt!24357 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 lt!24144) (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59782 (isDefined!77 (getValueByKey!124 (toList!697 lt!24144) (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59783 () Bool)

(declare-fun Unit!1587 () Unit!1551)

(assert (=> b!59783 (= e!39286 Unit!1587)))

(declare-fun b!59784 () Bool)

(assert (=> b!59784 (= e!39285 (isDefined!77 (getValueByKey!124 (toList!697 lt!24144) (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!11587 c!7708) b!59782))

(assert (= (and d!11587 (not c!7708)) b!59783))

(assert (= (and d!11587 (not res!33133)) b!59784))

(assert (=> d!11587 m!50803))

(declare-fun m!51965 () Bool)

(assert (=> d!11587 m!51965))

(assert (=> b!59782 m!50803))

(declare-fun m!51967 () Bool)

(assert (=> b!59782 m!51967))

(assert (=> b!59782 m!50803))

(declare-fun m!51969 () Bool)

(assert (=> b!59782 m!51969))

(assert (=> b!59782 m!51969))

(declare-fun m!51971 () Bool)

(assert (=> b!59782 m!51971))

(assert (=> b!59784 m!50803))

(assert (=> b!59784 m!51969))

(assert (=> b!59784 m!51969))

(assert (=> b!59784 m!51971))

(assert (=> b!59389 d!11587))

(declare-fun d!11589 () Bool)

(declare-fun res!33134 () Bool)

(declare-fun e!39287 () Bool)

(assert (=> d!11589 (=> res!33134 e!39287)))

(assert (=> d!11589 (= res!33134 (and ((_ is Cons!1426) (t!4768 (toList!697 lt!23655))) (= (_1!1022 (h!2007 (t!4768 (toList!697 lt!23655)))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355))))))

(assert (=> d!11589 (= (containsKey!128 (t!4768 (toList!697 lt!23655)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) e!39287)))

(declare-fun b!59785 () Bool)

(declare-fun e!39288 () Bool)

(assert (=> b!59785 (= e!39287 e!39288)))

(declare-fun res!33135 () Bool)

(assert (=> b!59785 (=> (not res!33135) (not e!39288))))

(assert (=> b!59785 (= res!33135 (and (or (not ((_ is Cons!1426) (t!4768 (toList!697 lt!23655)))) (bvsle (_1!1022 (h!2007 (t!4768 (toList!697 lt!23655)))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355))) ((_ is Cons!1426) (t!4768 (toList!697 lt!23655))) (bvslt (_1!1022 (h!2007 (t!4768 (toList!697 lt!23655)))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355))))))

(declare-fun b!59786 () Bool)

(assert (=> b!59786 (= e!39288 (containsKey!128 (t!4768 (t!4768 (toList!697 lt!23655))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(assert (= (and d!11589 (not res!33134)) b!59785))

(assert (= (and b!59785 res!33135) b!59786))

(assert (=> b!59786 m!50529))

(declare-fun m!51973 () Bool)

(assert (=> b!59786 m!51973))

(assert (=> b!59420 d!11589))

(declare-fun d!11591 () Bool)

(declare-fun res!33137 () Bool)

(declare-fun e!39289 () Bool)

(assert (=> d!11591 (=> res!33137 e!39289)))

(assert (=> d!11591 (= res!33137 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2011 (_keys!3667 newMap!16))))))

(assert (=> d!11591 (= (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3667 newMap!16) (mask!5927 newMap!16)) e!39289)))

(declare-fun bm!4497 () Bool)

(declare-fun call!4500 () Bool)

(assert (=> bm!4497 (= call!4500 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (_keys!3667 newMap!16) (mask!5927 newMap!16)))))

(declare-fun b!59787 () Bool)

(declare-fun e!39290 () Bool)

(assert (=> b!59787 (= e!39290 call!4500)))

(declare-fun b!59788 () Bool)

(assert (=> b!59788 (= e!39289 e!39290)))

(declare-fun c!7709 () Bool)

(assert (=> b!59788 (= c!7709 (validKeyInArray!0 (select (arr!1781 (_keys!3667 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!59789 () Bool)

(declare-fun e!39291 () Bool)

(assert (=> b!59789 (= e!39290 e!39291)))

(declare-fun lt!24362 () (_ BitVec 64))

(assert (=> b!59789 (= lt!24362 (select (arr!1781 (_keys!3667 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(declare-fun lt!24363 () Unit!1551)

(assert (=> b!59789 (= lt!24363 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3667 newMap!16) lt!24362 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (=> b!59789 (arrayContainsKey!0 (_keys!3667 newMap!16) lt!24362 #b00000000000000000000000000000000)))

(declare-fun lt!24361 () Unit!1551)

(assert (=> b!59789 (= lt!24361 lt!24363)))

(declare-fun res!33136 () Bool)

(assert (=> b!59789 (= res!33136 (= (seekEntryOrOpen!0 (select (arr!1781 (_keys!3667 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (_keys!3667 newMap!16) (mask!5927 newMap!16)) (Found!227 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> b!59789 (=> (not res!33136) (not e!39291))))

(declare-fun b!59790 () Bool)

(assert (=> b!59790 (= e!39291 call!4500)))

(assert (= (and d!11591 (not res!33137)) b!59788))

(assert (= (and b!59788 c!7709) b!59789))

(assert (= (and b!59788 (not c!7709)) b!59787))

(assert (= (and b!59789 res!33136) b!59790))

(assert (= (or b!59790 b!59787) bm!4497))

(declare-fun m!51975 () Bool)

(assert (=> bm!4497 m!51975))

(declare-fun m!51977 () Bool)

(assert (=> b!59788 m!51977))

(assert (=> b!59788 m!51977))

(declare-fun m!51979 () Bool)

(assert (=> b!59788 m!51979))

(assert (=> b!59789 m!51977))

(declare-fun m!51981 () Bool)

(assert (=> b!59789 m!51981))

(declare-fun m!51983 () Bool)

(assert (=> b!59789 m!51983))

(assert (=> b!59789 m!51977))

(declare-fun m!51985 () Bool)

(assert (=> b!59789 m!51985))

(assert (=> bm!4430 d!11591))

(declare-fun d!11593 () Bool)

(declare-fun e!39292 () Bool)

(assert (=> d!11593 e!39292))

(declare-fun res!33138 () Bool)

(assert (=> d!11593 (=> res!33138 e!39292)))

(declare-fun lt!24366 () Bool)

(assert (=> d!11593 (= res!33138 (not lt!24366))))

(declare-fun lt!24365 () Bool)

(assert (=> d!11593 (= lt!24366 lt!24365)))

(declare-fun lt!24367 () Unit!1551)

(declare-fun e!39293 () Unit!1551)

(assert (=> d!11593 (= lt!24367 e!39293)))

(declare-fun c!7710 () Bool)

(assert (=> d!11593 (= c!7710 lt!24365)))

(assert (=> d!11593 (= lt!24365 (containsKey!128 (toList!697 lt!24092) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11593 (= (contains!682 lt!24092 #b0000000000000000000000000000000000000000000000000000000000000000) lt!24366)))

(declare-fun b!59791 () Bool)

(declare-fun lt!24364 () Unit!1551)

(assert (=> b!59791 (= e!39293 lt!24364)))

(assert (=> b!59791 (= lt!24364 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 lt!24092) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59791 (isDefined!77 (getValueByKey!124 (toList!697 lt!24092) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59792 () Bool)

(declare-fun Unit!1588 () Unit!1551)

(assert (=> b!59792 (= e!39293 Unit!1588)))

(declare-fun b!59793 () Bool)

(assert (=> b!59793 (= e!39292 (isDefined!77 (getValueByKey!124 (toList!697 lt!24092) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11593 c!7710) b!59791))

(assert (= (and d!11593 (not c!7710)) b!59792))

(assert (= (and d!11593 (not res!33138)) b!59793))

(declare-fun m!51987 () Bool)

(assert (=> d!11593 m!51987))

(declare-fun m!51989 () Bool)

(assert (=> b!59791 m!51989))

(declare-fun m!51991 () Bool)

(assert (=> b!59791 m!51991))

(assert (=> b!59791 m!51991))

(declare-fun m!51993 () Bool)

(assert (=> b!59791 m!51993))

(assert (=> b!59793 m!51991))

(assert (=> b!59793 m!51991))

(assert (=> b!59793 m!51993))

(assert (=> d!11317 d!11593))

(assert (=> d!11317 d!11219))

(assert (=> bm!4426 d!11271))

(declare-fun d!11595 () Bool)

(assert (=> d!11595 (= (get!1069 (getValueByKey!124 (toList!697 lt!23725) lt!23738)) (v!2386 (getValueByKey!124 (toList!697 lt!23725) lt!23738)))))

(assert (=> d!11349 d!11595))

(declare-fun b!59795 () Bool)

(declare-fun e!39294 () Option!130)

(declare-fun e!39295 () Option!130)

(assert (=> b!59795 (= e!39294 e!39295)))

(declare-fun c!7712 () Bool)

(assert (=> b!59795 (= c!7712 (and ((_ is Cons!1426) (toList!697 lt!23725)) (not (= (_1!1022 (h!2007 (toList!697 lt!23725))) lt!23738))))))

(declare-fun b!59794 () Bool)

(assert (=> b!59794 (= e!39294 (Some!129 (_2!1022 (h!2007 (toList!697 lt!23725)))))))

(declare-fun b!59796 () Bool)

(assert (=> b!59796 (= e!39295 (getValueByKey!124 (t!4768 (toList!697 lt!23725)) lt!23738))))

(declare-fun b!59797 () Bool)

(assert (=> b!59797 (= e!39295 None!128)))

(declare-fun d!11597 () Bool)

(declare-fun c!7711 () Bool)

(assert (=> d!11597 (= c!7711 (and ((_ is Cons!1426) (toList!697 lt!23725)) (= (_1!1022 (h!2007 (toList!697 lt!23725))) lt!23738)))))

(assert (=> d!11597 (= (getValueByKey!124 (toList!697 lt!23725) lt!23738) e!39294)))

(assert (= (and d!11597 c!7711) b!59794))

(assert (= (and d!11597 (not c!7711)) b!59795))

(assert (= (and b!59795 c!7712) b!59796))

(assert (= (and b!59795 (not c!7712)) b!59797))

(declare-fun m!51995 () Bool)

(assert (=> b!59796 m!51995))

(assert (=> d!11349 d!11597))

(declare-fun d!11599 () Bool)

(declare-fun res!33139 () Bool)

(declare-fun e!39296 () Bool)

(assert (=> d!11599 (=> res!33139 e!39296)))

(assert (=> d!11599 (= res!33139 (and ((_ is Cons!1426) (toList!697 lt!23739)) (= (_1!1022 (h!2007 (toList!697 lt!23739))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!11599 (= (containsKey!128 (toList!697 lt!23739) #b0000000000000000000000000000000000000000000000000000000000000000) e!39296)))

(declare-fun b!59798 () Bool)

(declare-fun e!39297 () Bool)

(assert (=> b!59798 (= e!39296 e!39297)))

(declare-fun res!33140 () Bool)

(assert (=> b!59798 (=> (not res!33140) (not e!39297))))

(assert (=> b!59798 (= res!33140 (and (or (not ((_ is Cons!1426) (toList!697 lt!23739))) (bvsle (_1!1022 (h!2007 (toList!697 lt!23739))) #b0000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1426) (toList!697 lt!23739)) (bvslt (_1!1022 (h!2007 (toList!697 lt!23739))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!59799 () Bool)

(assert (=> b!59799 (= e!39297 (containsKey!128 (t!4768 (toList!697 lt!23739)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!11599 (not res!33139)) b!59798))

(assert (= (and b!59798 res!33140) b!59799))

(declare-fun m!51997 () Bool)

(assert (=> b!59799 m!51997))

(assert (=> d!11311 d!11599))

(declare-fun b!59801 () Bool)

(declare-fun e!39298 () Option!130)

(declare-fun e!39299 () Option!130)

(assert (=> b!59801 (= e!39298 e!39299)))

(declare-fun c!7714 () Bool)

(assert (=> b!59801 (= c!7714 (and ((_ is Cons!1426) (t!4768 (toList!697 lt!23655))) (not (= (_1!1022 (h!2007 (t!4768 (toList!697 lt!23655)))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))))

(declare-fun b!59800 () Bool)

(assert (=> b!59800 (= e!39298 (Some!129 (_2!1022 (h!2007 (t!4768 (toList!697 lt!23655))))))))

(declare-fun b!59802 () Bool)

(assert (=> b!59802 (= e!39299 (getValueByKey!124 (t!4768 (t!4768 (toList!697 lt!23655))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(declare-fun b!59803 () Bool)

(assert (=> b!59803 (= e!39299 None!128)))

(declare-fun c!7713 () Bool)

(declare-fun d!11601 () Bool)

(assert (=> d!11601 (= c!7713 (and ((_ is Cons!1426) (t!4768 (toList!697 lt!23655))) (= (_1!1022 (h!2007 (t!4768 (toList!697 lt!23655)))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355))))))

(assert (=> d!11601 (= (getValueByKey!124 (t!4768 (toList!697 lt!23655)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) e!39298)))

(assert (= (and d!11601 c!7713) b!59800))

(assert (= (and d!11601 (not c!7713)) b!59801))

(assert (= (and b!59801 c!7714) b!59802))

(assert (= (and b!59801 (not c!7714)) b!59803))

(assert (=> b!59802 m!50529))

(declare-fun m!51999 () Bool)

(assert (=> b!59802 m!51999))

(assert (=> b!59200 d!11601))

(assert (=> b!59370 d!11375))

(assert (=> d!11307 d!11523))

(declare-fun b!59804 () Bool)

(declare-fun e!39306 () Bool)

(declare-fun lt!24373 () ListLongMap!1363)

(assert (=> b!59804 (= e!39306 (isEmpty!294 lt!24373))))

(declare-fun bm!4498 () Bool)

(declare-fun call!4501 () ListLongMap!1363)

(assert (=> bm!4498 (= call!4501 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (ite (or c!7503 c!7502) (_values!2026 newMap!16) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (index!3032 lt!23832) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16)))) (mask!5927 newMap!16) (ite c!7503 (ite c!7507 (extraKeys!1930 newMap!16) lt!23820) (extraKeys!1930 newMap!16)) (zeroValue!1959 newMap!16) (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2043 newMap!16)))))

(declare-fun b!59805 () Bool)

(declare-fun res!33143 () Bool)

(declare-fun e!39302 () Bool)

(assert (=> b!59805 (=> (not res!33143) (not e!39302))))

(assert (=> b!59805 (= res!33143 (not (contains!682 lt!24373 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!59807 () Bool)

(declare-fun e!39303 () Bool)

(declare-fun e!39300 () Bool)

(assert (=> b!59807 (= e!39303 e!39300)))

(assert (=> b!59807 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(declare-fun res!33144 () Bool)

(assert (=> b!59807 (= res!33144 (contains!682 lt!24373 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59807 (=> (not res!33144) (not e!39300))))

(declare-fun b!59808 () Bool)

(declare-fun e!39301 () ListLongMap!1363)

(declare-fun e!39304 () ListLongMap!1363)

(assert (=> b!59808 (= e!39301 e!39304)))

(declare-fun c!7715 () Bool)

(assert (=> b!59808 (= c!7715 (validKeyInArray!0 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59809 () Bool)

(assert (=> b!59809 (= e!39304 call!4501)))

(declare-fun b!59810 () Bool)

(assert (=> b!59810 (= e!39301 (ListLongMap!1364 Nil!1427))))

(declare-fun b!59811 () Bool)

(assert (=> b!59811 (= e!39302 e!39303)))

(declare-fun c!7716 () Bool)

(declare-fun e!39305 () Bool)

(assert (=> b!59811 (= c!7716 e!39305)))

(declare-fun res!33142 () Bool)

(assert (=> b!59811 (=> (not res!33142) (not e!39305))))

(assert (=> b!59811 (= res!33142 (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(declare-fun b!59812 () Bool)

(assert (=> b!59812 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(assert (=> b!59812 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2012 (ite (or c!7503 c!7502) (_values!2026 newMap!16) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (index!3032 lt!23832) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16)))))))))

(assert (=> b!59812 (= e!39300 (= (apply!66 lt!24373 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)) (get!1066 (select (arr!1782 (ite (or c!7503 c!7502) (_values!2026 newMap!16) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (index!3032 lt!23832) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2043 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!59813 () Bool)

(declare-fun lt!24368 () Unit!1551)

(declare-fun lt!24370 () Unit!1551)

(assert (=> b!59813 (= lt!24368 lt!24370)))

(declare-fun lt!24371 () ListLongMap!1363)

(declare-fun lt!24369 () (_ BitVec 64))

(declare-fun lt!24372 () V!2843)

(declare-fun lt!24374 () (_ BitVec 64))

(assert (=> b!59813 (not (contains!682 (+!81 lt!24371 (tuple2!2023 lt!24374 lt!24372)) lt!24369))))

(assert (=> b!59813 (= lt!24370 (addStillNotContains!15 lt!24371 lt!24374 lt!24372 lt!24369))))

(assert (=> b!59813 (= lt!24369 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!59813 (= lt!24372 (get!1066 (select (arr!1782 (ite (or c!7503 c!7502) (_values!2026 newMap!16) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (index!3032 lt!23832) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2043 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!59813 (= lt!24374 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!59813 (= lt!24371 call!4501)))

(assert (=> b!59813 (= e!39304 (+!81 call!4501 (tuple2!2023 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000) (get!1066 (select (arr!1782 (ite (or c!7503 c!7502) (_values!2026 newMap!16) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (index!3032 lt!23832) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2043 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun d!11603 () Bool)

(assert (=> d!11603 e!39302))

(declare-fun res!33141 () Bool)

(assert (=> d!11603 (=> (not res!33141) (not e!39302))))

(assert (=> d!11603 (= res!33141 (not (contains!682 lt!24373 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!11603 (= lt!24373 e!39301)))

(declare-fun c!7717 () Bool)

(assert (=> d!11603 (= c!7717 (bvsge #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(assert (=> d!11603 (validMask!0 (mask!5927 newMap!16))))

(assert (=> d!11603 (= (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (ite (or c!7503 c!7502) (_values!2026 newMap!16) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (index!3032 lt!23832) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16)))) (mask!5927 newMap!16) (ite c!7503 (ite c!7507 (extraKeys!1930 newMap!16) lt!23820) (extraKeys!1930 newMap!16)) (zeroValue!1959 newMap!16) (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)) lt!24373)))

(declare-fun b!59806 () Bool)

(assert (=> b!59806 (= e!39303 e!39306)))

(declare-fun c!7718 () Bool)

(assert (=> b!59806 (= c!7718 (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(declare-fun b!59814 () Bool)

(assert (=> b!59814 (= e!39305 (validKeyInArray!0 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59814 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!59815 () Bool)

(assert (=> b!59815 (= e!39306 (= lt!24373 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (ite (or c!7503 c!7502) (_values!2026 newMap!16) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (index!3032 lt!23832) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16)))) (mask!5927 newMap!16) (ite c!7503 (ite c!7507 (extraKeys!1930 newMap!16) lt!23820) (extraKeys!1930 newMap!16)) (zeroValue!1959 newMap!16) (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2043 newMap!16))))))

(assert (= (and d!11603 c!7717) b!59810))

(assert (= (and d!11603 (not c!7717)) b!59808))

(assert (= (and b!59808 c!7715) b!59813))

(assert (= (and b!59808 (not c!7715)) b!59809))

(assert (= (or b!59813 b!59809) bm!4498))

(assert (= (and d!11603 res!33141) b!59805))

(assert (= (and b!59805 res!33143) b!59811))

(assert (= (and b!59811 res!33142) b!59814))

(assert (= (and b!59811 c!7716) b!59807))

(assert (= (and b!59811 (not c!7716)) b!59806))

(assert (= (and b!59807 res!33144) b!59812))

(assert (= (and b!59806 c!7718) b!59815))

(assert (= (and b!59806 (not c!7718)) b!59804))

(declare-fun b_lambda!2629 () Bool)

(assert (=> (not b_lambda!2629) (not b!59812)))

(assert (=> b!59812 t!4775))

(declare-fun b_and!3623 () Bool)

(assert (= b_and!3619 (and (=> t!4775 result!2381) b_and!3623)))

(assert (=> b!59812 t!4777))

(declare-fun b_and!3625 () Bool)

(assert (= b_and!3621 (and (=> t!4777 result!2383) b_and!3625)))

(declare-fun b_lambda!2631 () Bool)

(assert (=> (not b_lambda!2631) (not b!59813)))

(assert (=> b!59813 t!4775))

(declare-fun b_and!3627 () Bool)

(assert (= b_and!3623 (and (=> t!4775 result!2381) b_and!3627)))

(assert (=> b!59813 t!4777))

(declare-fun b_and!3629 () Bool)

(assert (= b_and!3625 (and (=> t!4777 result!2383) b_and!3629)))

(declare-fun m!52001 () Bool)

(assert (=> b!59813 m!52001))

(assert (=> b!59813 m!51107))

(assert (=> b!59813 m!50813))

(assert (=> b!59813 m!51111))

(assert (=> b!59813 m!50813))

(declare-fun m!52003 () Bool)

(assert (=> b!59813 m!52003))

(declare-fun m!52005 () Bool)

(assert (=> b!59813 m!52005))

(assert (=> b!59813 m!50803))

(assert (=> b!59813 m!52005))

(declare-fun m!52007 () Bool)

(assert (=> b!59813 m!52007))

(assert (=> b!59813 m!51107))

(declare-fun m!52009 () Bool)

(assert (=> b!59815 m!52009))

(assert (=> b!59807 m!50803))

(assert (=> b!59807 m!50803))

(declare-fun m!52011 () Bool)

(assert (=> b!59807 m!52011))

(declare-fun m!52013 () Bool)

(assert (=> b!59805 m!52013))

(assert (=> b!59808 m!50803))

(assert (=> b!59808 m!50803))

(assert (=> b!59808 m!50805))

(declare-fun m!52015 () Bool)

(assert (=> b!59804 m!52015))

(assert (=> bm!4498 m!52009))

(assert (=> b!59814 m!50803))

(assert (=> b!59814 m!50803))

(assert (=> b!59814 m!50805))

(declare-fun m!52017 () Bool)

(assert (=> d!11603 m!52017))

(assert (=> d!11603 m!50771))

(assert (=> b!59812 m!50803))

(declare-fun m!52019 () Bool)

(assert (=> b!59812 m!52019))

(assert (=> b!59812 m!51107))

(assert (=> b!59812 m!50813))

(assert (=> b!59812 m!51111))

(assert (=> b!59812 m!50813))

(assert (=> b!59812 m!50803))

(assert (=> b!59812 m!51107))

(assert (=> bm!4443 d!11603))

(assert (=> b!59251 d!11375))

(declare-fun d!11605 () Bool)

(declare-fun res!33145 () Bool)

(declare-fun e!39307 () Bool)

(assert (=> d!11605 (=> res!33145 e!39307)))

(assert (=> d!11605 (= res!33145 (and ((_ is Cons!1426) (toList!697 lt!23739)) (= (_1!1022 (h!2007 (toList!697 lt!23739))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!11605 (= (containsKey!128 (toList!697 lt!23739) #b1000000000000000000000000000000000000000000000000000000000000000) e!39307)))

(declare-fun b!59816 () Bool)

(declare-fun e!39308 () Bool)

(assert (=> b!59816 (= e!39307 e!39308)))

(declare-fun res!33146 () Bool)

(assert (=> b!59816 (=> (not res!33146) (not e!39308))))

(assert (=> b!59816 (= res!33146 (and (or (not ((_ is Cons!1426) (toList!697 lt!23739))) (bvsle (_1!1022 (h!2007 (toList!697 lt!23739))) #b1000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1426) (toList!697 lt!23739)) (bvslt (_1!1022 (h!2007 (toList!697 lt!23739))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!59817 () Bool)

(assert (=> b!59817 (= e!39308 (containsKey!128 (t!4768 (toList!697 lt!23739)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!11605 (not res!33145)) b!59816))

(assert (= (and b!59816 res!33146) b!59817))

(declare-fun m!52021 () Bool)

(assert (=> b!59817 m!52021))

(assert (=> d!11293 d!11605))

(declare-fun d!11607 () Bool)

(declare-fun e!39309 () Bool)

(assert (=> d!11607 e!39309))

(declare-fun res!33147 () Bool)

(assert (=> d!11607 (=> res!33147 e!39309)))

(declare-fun lt!24377 () Bool)

(assert (=> d!11607 (= res!33147 (not lt!24377))))

(declare-fun lt!24376 () Bool)

(assert (=> d!11607 (= lt!24377 lt!24376)))

(declare-fun lt!24378 () Unit!1551)

(declare-fun e!39310 () Unit!1551)

(assert (=> d!11607 (= lt!24378 e!39310)))

(declare-fun c!7719 () Bool)

(assert (=> d!11607 (= c!7719 lt!24376)))

(assert (=> d!11607 (= lt!24376 (containsKey!128 (toList!697 (map!1105 (_2!1021 lt!23949))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(assert (=> d!11607 (= (contains!682 (map!1105 (_2!1021 lt!23949)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) lt!24377)))

(declare-fun b!59818 () Bool)

(declare-fun lt!24375 () Unit!1551)

(assert (=> b!59818 (= e!39310 lt!24375)))

(assert (=> b!59818 (= lt!24375 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 (map!1105 (_2!1021 lt!23949))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(assert (=> b!59818 (isDefined!77 (getValueByKey!124 (toList!697 (map!1105 (_2!1021 lt!23949))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(declare-fun b!59819 () Bool)

(declare-fun Unit!1589 () Unit!1551)

(assert (=> b!59819 (= e!39310 Unit!1589)))

(declare-fun b!59820 () Bool)

(assert (=> b!59820 (= e!39309 (isDefined!77 (getValueByKey!124 (toList!697 (map!1105 (_2!1021 lt!23949))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355))))))

(assert (= (and d!11607 c!7719) b!59818))

(assert (= (and d!11607 (not c!7719)) b!59819))

(assert (= (and d!11607 (not res!33147)) b!59820))

(assert (=> d!11607 m!50529))

(declare-fun m!52023 () Bool)

(assert (=> d!11607 m!52023))

(assert (=> b!59818 m!50529))

(declare-fun m!52025 () Bool)

(assert (=> b!59818 m!52025))

(assert (=> b!59818 m!50529))

(declare-fun m!52027 () Bool)

(assert (=> b!59818 m!52027))

(assert (=> b!59818 m!52027))

(declare-fun m!52029 () Bool)

(assert (=> b!59818 m!52029))

(assert (=> b!59820 m!50529))

(assert (=> b!59820 m!52027))

(assert (=> b!59820 m!52027))

(assert (=> b!59820 m!52029))

(assert (=> b!59159 d!11607))

(assert (=> b!59159 d!11505))

(declare-fun c!7720 () Bool)

(declare-fun bm!4499 () Bool)

(declare-fun call!4502 () Bool)

(assert (=> bm!4499 (= call!4502 (arrayNoDuplicates!0 (_keys!3667 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!7720 (Cons!1427 (select (arr!1781 (_keys!3667 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (ite c!7587 (Cons!1427 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000) Nil!1428) Nil!1428)) (ite c!7587 (Cons!1427 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000) Nil!1428) Nil!1428))))))

(declare-fun b!59821 () Bool)

(declare-fun e!39313 () Bool)

(assert (=> b!59821 (= e!39313 (contains!683 (ite c!7587 (Cons!1427 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000) Nil!1428) Nil!1428) (select (arr!1781 (_keys!3667 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!59822 () Bool)

(declare-fun e!39312 () Bool)

(assert (=> b!59822 (= e!39312 call!4502)))

(declare-fun b!59823 () Bool)

(assert (=> b!59823 (= e!39312 call!4502)))

(declare-fun b!59824 () Bool)

(declare-fun e!39314 () Bool)

(assert (=> b!59824 (= e!39314 e!39312)))

(assert (=> b!59824 (= c!7720 (validKeyInArray!0 (select (arr!1781 (_keys!3667 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun d!11609 () Bool)

(declare-fun res!33150 () Bool)

(declare-fun e!39311 () Bool)

(assert (=> d!11609 (=> res!33150 e!39311)))

(assert (=> d!11609 (= res!33150 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2011 (_keys!3667 newMap!16))))))

(assert (=> d!11609 (= (arrayNoDuplicates!0 (_keys!3667 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!7587 (Cons!1427 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000) Nil!1428) Nil!1428)) e!39311)))

(declare-fun b!59825 () Bool)

(assert (=> b!59825 (= e!39311 e!39314)))

(declare-fun res!33149 () Bool)

(assert (=> b!59825 (=> (not res!33149) (not e!39314))))

(assert (=> b!59825 (= res!33149 (not e!39313))))

(declare-fun res!33148 () Bool)

(assert (=> b!59825 (=> (not res!33148) (not e!39313))))

(assert (=> b!59825 (= res!33148 (validKeyInArray!0 (select (arr!1781 (_keys!3667 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (= (and d!11609 (not res!33150)) b!59825))

(assert (= (and b!59825 res!33148) b!59821))

(assert (= (and b!59825 res!33149) b!59824))

(assert (= (and b!59824 c!7720) b!59822))

(assert (= (and b!59824 (not c!7720)) b!59823))

(assert (= (or b!59822 b!59823) bm!4499))

(assert (=> bm!4499 m!51977))

(declare-fun m!52031 () Bool)

(assert (=> bm!4499 m!52031))

(assert (=> b!59821 m!51977))

(assert (=> b!59821 m!51977))

(declare-fun m!52033 () Bool)

(assert (=> b!59821 m!52033))

(assert (=> b!59824 m!51977))

(assert (=> b!59824 m!51977))

(assert (=> b!59824 m!51979))

(assert (=> b!59825 m!51977))

(assert (=> b!59825 m!51977))

(assert (=> b!59825 m!51979))

(assert (=> bm!4448 d!11609))

(declare-fun b!59827 () Bool)

(declare-fun e!39315 () Option!130)

(declare-fun e!39316 () Option!130)

(assert (=> b!59827 (= e!39315 e!39316)))

(declare-fun c!7722 () Bool)

(assert (=> b!59827 (= c!7722 (and ((_ is Cons!1426) (toList!697 lt!23989)) (not (= (_1!1022 (h!2007 (toList!697 lt!23989))) (_1!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))))

(declare-fun b!59826 () Bool)

(assert (=> b!59826 (= e!39315 (Some!129 (_2!1022 (h!2007 (toList!697 lt!23989)))))))

(declare-fun b!59828 () Bool)

(assert (=> b!59828 (= e!39316 (getValueByKey!124 (t!4768 (toList!697 lt!23989)) (_1!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(declare-fun b!59829 () Bool)

(assert (=> b!59829 (= e!39316 None!128)))

(declare-fun c!7721 () Bool)

(declare-fun d!11611 () Bool)

(assert (=> d!11611 (= c!7721 (and ((_ is Cons!1426) (toList!697 lt!23989)) (= (_1!1022 (h!2007 (toList!697 lt!23989))) (_1!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))))

(assert (=> d!11611 (= (getValueByKey!124 (toList!697 lt!23989) (_1!1022 (ite (or c!7462 c!7465) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))) e!39315)))

(assert (= (and d!11611 c!7721) b!59826))

(assert (= (and d!11611 (not c!7721)) b!59827))

(assert (= (and b!59827 c!7722) b!59828))

(assert (= (and b!59827 (not c!7722)) b!59829))

(declare-fun m!52035 () Bool)

(assert (=> b!59828 m!52035))

(assert (=> b!59204 d!11611))

(declare-fun b!59830 () Bool)

(declare-fun e!39318 () (_ BitVec 32))

(declare-fun call!4503 () (_ BitVec 32))

(assert (=> b!59830 (= e!39318 (bvadd #b00000000000000000000000000000001 call!4503))))

(declare-fun bm!4500 () Bool)

(assert (=> bm!4500 (= call!4503 (arrayCountValidKeys!0 (_keys!3667 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2011 (_keys!3667 newMap!16))))))

(declare-fun b!59831 () Bool)

(declare-fun e!39317 () (_ BitVec 32))

(assert (=> b!59831 (= e!39317 e!39318)))

(declare-fun c!7724 () Bool)

(assert (=> b!59831 (= c!7724 (validKeyInArray!0 (select (arr!1781 (_keys!3667 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!59832 () Bool)

(assert (=> b!59832 (= e!39317 #b00000000000000000000000000000000)))

(declare-fun b!59833 () Bool)

(assert (=> b!59833 (= e!39318 call!4503)))

(declare-fun d!11613 () Bool)

(declare-fun lt!24379 () (_ BitVec 32))

(assert (=> d!11613 (and (bvsge lt!24379 #b00000000000000000000000000000000) (bvsle lt!24379 (bvsub (size!2011 (_keys!3667 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> d!11613 (= lt!24379 e!39317)))

(declare-fun c!7723 () Bool)

(assert (=> d!11613 (= c!7723 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2011 (_keys!3667 newMap!16))))))

(assert (=> d!11613 (and (bvsle (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2011 (_keys!3667 newMap!16))) (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvsle (size!2011 (_keys!3667 newMap!16)) (size!2011 (_keys!3667 newMap!16))))))

(assert (=> d!11613 (= (arrayCountValidKeys!0 (_keys!3667 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2011 (_keys!3667 newMap!16))) lt!24379)))

(assert (= (and d!11613 c!7723) b!59832))

(assert (= (and d!11613 (not c!7723)) b!59831))

(assert (= (and b!59831 c!7724) b!59830))

(assert (= (and b!59831 (not c!7724)) b!59833))

(assert (= (or b!59830 b!59833) bm!4500))

(declare-fun m!52037 () Bool)

(assert (=> bm!4500 m!52037))

(assert (=> b!59831 m!51977))

(assert (=> b!59831 m!51977))

(assert (=> b!59831 m!51979))

(assert (=> bm!4459 d!11613))

(declare-fun d!11615 () Bool)

(assert (=> d!11615 (= (size!2015 newMap!16) (bvadd (_size!358 newMap!16) (bvsdiv (bvadd (extraKeys!1930 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010)))))

(assert (=> b!59242 d!11615))

(assert (=> b!59116 d!11249))

(assert (=> b!59116 d!11251))

(declare-fun d!11617 () Bool)

(assert (=> d!11617 (isDefined!77 (getValueByKey!124 (toList!697 call!4392) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(declare-fun lt!24380 () Unit!1551)

(assert (=> d!11617 (= lt!24380 (choose!305 (toList!697 call!4392) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(declare-fun e!39319 () Bool)

(assert (=> d!11617 e!39319))

(declare-fun res!33151 () Bool)

(assert (=> d!11617 (=> (not res!33151) (not e!39319))))

(assert (=> d!11617 (= res!33151 (isStrictlySorted!284 (toList!697 call!4392)))))

(assert (=> d!11617 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 call!4392) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) lt!24380)))

(declare-fun b!59834 () Bool)

(assert (=> b!59834 (= e!39319 (containsKey!128 (toList!697 call!4392) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(assert (= (and d!11617 res!33151) b!59834))

(assert (=> d!11617 m!50529))

(assert (=> d!11617 m!51173))

(assert (=> d!11617 m!51173))

(assert (=> d!11617 m!51175))

(assert (=> d!11617 m!50529))

(declare-fun m!52039 () Bool)

(assert (=> d!11617 m!52039))

(declare-fun m!52041 () Bool)

(assert (=> d!11617 m!52041))

(assert (=> b!59834 m!50529))

(assert (=> b!59834 m!51169))

(assert (=> b!59346 d!11617))

(assert (=> b!59346 d!11377))

(assert (=> b!59346 d!11379))

(declare-fun d!11619 () Bool)

(assert (=> d!11619 (isDefined!77 (getValueByKey!124 (toList!697 (+!81 lt!23728 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!23721))))

(declare-fun lt!24381 () Unit!1551)

(assert (=> d!11619 (= lt!24381 (choose!305 (toList!697 (+!81 lt!23728 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!23721))))

(declare-fun e!39320 () Bool)

(assert (=> d!11619 e!39320))

(declare-fun res!33152 () Bool)

(assert (=> d!11619 (=> (not res!33152) (not e!39320))))

(assert (=> d!11619 (= res!33152 (isStrictlySorted!284 (toList!697 (+!81 lt!23728 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(assert (=> d!11619 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 (+!81 lt!23728 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!23721) lt!24381)))

(declare-fun b!59835 () Bool)

(assert (=> b!59835 (= e!39320 (containsKey!128 (toList!697 (+!81 lt!23728 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!23721))))

(assert (= (and d!11619 res!33152) b!59835))

(assert (=> d!11619 m!51181))

(assert (=> d!11619 m!51181))

(assert (=> d!11619 m!51183))

(declare-fun m!52043 () Bool)

(assert (=> d!11619 m!52043))

(declare-fun m!52045 () Bool)

(assert (=> d!11619 m!52045))

(assert (=> b!59835 m!51177))

(assert (=> b!59349 d!11619))

(assert (=> b!59349 d!11413))

(assert (=> b!59349 d!11415))

(assert (=> bm!4436 d!11399))

(declare-fun lt!24382 () Bool)

(declare-fun d!11621 () Bool)

(assert (=> d!11621 (= lt!24382 (select (content!64 (toList!697 lt!24113)) (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))

(declare-fun e!39321 () Bool)

(assert (=> d!11621 (= lt!24382 e!39321)))

(declare-fun res!33154 () Bool)

(assert (=> d!11621 (=> (not res!33154) (not e!39321))))

(assert (=> d!11621 (= res!33154 ((_ is Cons!1426) (toList!697 lt!24113)))))

(assert (=> d!11621 (= (contains!684 (toList!697 lt!24113) (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) lt!24382)))

(declare-fun b!59836 () Bool)

(declare-fun e!39322 () Bool)

(assert (=> b!59836 (= e!39321 e!39322)))

(declare-fun res!33153 () Bool)

(assert (=> b!59836 (=> res!33153 e!39322)))

(assert (=> b!59836 (= res!33153 (= (h!2007 (toList!697 lt!24113)) (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))

(declare-fun b!59837 () Bool)

(assert (=> b!59837 (= e!39322 (contains!684 (t!4768 (toList!697 lt!24113)) (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))

(assert (= (and d!11621 res!33154) b!59836))

(assert (= (and b!59836 (not res!33153)) b!59837))

(declare-fun m!52047 () Bool)

(assert (=> d!11621 m!52047))

(declare-fun m!52049 () Bool)

(assert (=> d!11621 m!52049))

(declare-fun m!52051 () Bool)

(assert (=> b!59837 m!52051))

(assert (=> b!59360 d!11621))

(declare-fun d!11623 () Bool)

(declare-fun res!33155 () Bool)

(declare-fun e!39323 () Bool)

(assert (=> d!11623 (=> res!33155 e!39323)))

(assert (=> d!11623 (= res!33155 (= (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(assert (=> d!11623 (= (arrayContainsKey!0 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) e!39323)))

(declare-fun b!59838 () Bool)

(declare-fun e!39324 () Bool)

(assert (=> b!59838 (= e!39323 e!39324)))

(declare-fun res!33156 () Bool)

(assert (=> b!59838 (=> (not res!33156) (not e!39324))))

(assert (=> b!59838 (= res!33156 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992))))))))

(declare-fun b!59839 () Bool)

(assert (=> b!59839 (= e!39324 (arrayContainsKey!0 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!11623 (not res!33155)) b!59838))

(assert (= (and b!59838 res!33156) b!59839))

(declare-fun m!52053 () Bool)

(assert (=> d!11623 m!52053))

(assert (=> b!59839 m!50529))

(declare-fun m!52055 () Bool)

(assert (=> b!59839 m!52055))

(assert (=> b!59184 d!11623))

(declare-fun d!11625 () Bool)

(declare-fun lt!24383 () Bool)

(assert (=> d!11625 (= lt!24383 (select (content!64 (toList!697 lt!24103)) (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))))

(declare-fun e!39325 () Bool)

(assert (=> d!11625 (= lt!24383 e!39325)))

(declare-fun res!33158 () Bool)

(assert (=> d!11625 (=> (not res!33158) (not e!39325))))

(assert (=> d!11625 (= res!33158 ((_ is Cons!1426) (toList!697 lt!24103)))))

(assert (=> d!11625 (= (contains!684 (toList!697 lt!24103) (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))) lt!24383)))

(declare-fun b!59840 () Bool)

(declare-fun e!39326 () Bool)

(assert (=> b!59840 (= e!39325 e!39326)))

(declare-fun res!33157 () Bool)

(assert (=> b!59840 (=> res!33157 e!39326)))

(assert (=> b!59840 (= res!33157 (= (h!2007 (toList!697 lt!24103)) (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))))

(declare-fun b!59841 () Bool)

(assert (=> b!59841 (= e!39326 (contains!684 (t!4768 (toList!697 lt!24103)) (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))))

(assert (= (and d!11625 res!33158) b!59840))

(assert (= (and b!59840 (not res!33157)) b!59841))

(declare-fun m!52057 () Bool)

(assert (=> d!11625 m!52057))

(declare-fun m!52059 () Bool)

(assert (=> d!11625 m!52059))

(declare-fun m!52061 () Bool)

(assert (=> b!59841 m!52061))

(assert (=> b!59353 d!11625))

(declare-fun b!59843 () Bool)

(declare-fun e!39327 () Option!130)

(declare-fun e!39328 () Option!130)

(assert (=> b!59843 (= e!39327 e!39328)))

(declare-fun c!7726 () Bool)

(assert (=> b!59843 (= c!7726 (and ((_ is Cons!1426) (toList!697 lt!23979)) (not (= (_1!1022 (h!2007 (toList!697 lt!23979))) (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!59842 () Bool)

(assert (=> b!59842 (= e!39327 (Some!129 (_2!1022 (h!2007 (toList!697 lt!23979)))))))

(declare-fun b!59844 () Bool)

(assert (=> b!59844 (= e!39328 (getValueByKey!124 (t!4768 (toList!697 lt!23979)) (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!59845 () Bool)

(assert (=> b!59845 (= e!39328 None!128)))

(declare-fun d!11627 () Bool)

(declare-fun c!7725 () Bool)

(assert (=> d!11627 (= c!7725 (and ((_ is Cons!1426) (toList!697 lt!23979)) (= (_1!1022 (h!2007 (toList!697 lt!23979))) (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!11627 (= (getValueByKey!124 (toList!697 lt!23979) (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!39327)))

(assert (= (and d!11627 c!7725) b!59842))

(assert (= (and d!11627 (not c!7725)) b!59843))

(assert (= (and b!59843 c!7726) b!59844))

(assert (= (and b!59843 (not c!7726)) b!59845))

(declare-fun m!52063 () Bool)

(assert (=> b!59844 m!52063))

(assert (=> b!59181 d!11627))

(assert (=> b!59288 d!11435))

(assert (=> b!59288 d!11437))

(assert (=> b!59154 d!11371))

(declare-fun d!11629 () Bool)

(declare-fun e!39329 () Bool)

(assert (=> d!11629 e!39329))

(declare-fun res!33159 () Bool)

(assert (=> d!11629 (=> res!33159 e!39329)))

(declare-fun lt!24386 () Bool)

(assert (=> d!11629 (= res!33159 (not lt!24386))))

(declare-fun lt!24385 () Bool)

(assert (=> d!11629 (= lt!24386 lt!24385)))

(declare-fun lt!24387 () Unit!1551)

(declare-fun e!39330 () Unit!1551)

(assert (=> d!11629 (= lt!24387 e!39330)))

(declare-fun c!7727 () Bool)

(assert (=> d!11629 (= c!7727 lt!24385)))

(assert (=> d!11629 (= lt!24385 (containsKey!128 (toList!697 lt!24117) (_1!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(assert (=> d!11629 (= (contains!682 lt!24117 (_1!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!24386)))

(declare-fun b!59846 () Bool)

(declare-fun lt!24384 () Unit!1551)

(assert (=> b!59846 (= e!39330 lt!24384)))

(assert (=> b!59846 (= lt!24384 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 lt!24117) (_1!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(assert (=> b!59846 (isDefined!77 (getValueByKey!124 (toList!697 lt!24117) (_1!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun b!59847 () Bool)

(declare-fun Unit!1590 () Unit!1551)

(assert (=> b!59847 (= e!39330 Unit!1590)))

(declare-fun b!59848 () Bool)

(assert (=> b!59848 (= e!39329 (isDefined!77 (getValueByKey!124 (toList!697 lt!24117) (_1!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(assert (= (and d!11629 c!7727) b!59846))

(assert (= (and d!11629 (not c!7727)) b!59847))

(assert (= (and d!11629 (not res!33159)) b!59848))

(declare-fun m!52065 () Bool)

(assert (=> d!11629 m!52065))

(declare-fun m!52067 () Bool)

(assert (=> b!59846 m!52067))

(assert (=> b!59846 m!51229))

(assert (=> b!59846 m!51229))

(declare-fun m!52069 () Bool)

(assert (=> b!59846 m!52069))

(assert (=> b!59848 m!51229))

(assert (=> b!59848 m!51229))

(assert (=> b!59848 m!52069))

(assert (=> d!11333 d!11629))

(declare-fun b!59850 () Bool)

(declare-fun e!39331 () Option!130)

(declare-fun e!39332 () Option!130)

(assert (=> b!59850 (= e!39331 e!39332)))

(declare-fun c!7729 () Bool)

(assert (=> b!59850 (= c!7729 (and ((_ is Cons!1426) lt!24119) (not (= (_1!1022 (h!2007 lt!24119)) (_1!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))))))

(declare-fun b!59849 () Bool)

(assert (=> b!59849 (= e!39331 (Some!129 (_2!1022 (h!2007 lt!24119))))))

(declare-fun b!59851 () Bool)

(assert (=> b!59851 (= e!39332 (getValueByKey!124 (t!4768 lt!24119) (_1!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun b!59852 () Bool)

(assert (=> b!59852 (= e!39332 None!128)))

(declare-fun c!7728 () Bool)

(declare-fun d!11631 () Bool)

(assert (=> d!11631 (= c!7728 (and ((_ is Cons!1426) lt!24119) (= (_1!1022 (h!2007 lt!24119)) (_1!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(assert (=> d!11631 (= (getValueByKey!124 lt!24119 (_1!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))) e!39331)))

(assert (= (and d!11631 c!7728) b!59849))

(assert (= (and d!11631 (not c!7728)) b!59850))

(assert (= (and b!59850 c!7729) b!59851))

(assert (= (and b!59850 (not c!7729)) b!59852))

(declare-fun m!52071 () Bool)

(assert (=> b!59851 m!52071))

(assert (=> d!11333 d!11631))

(declare-fun d!11633 () Bool)

(assert (=> d!11633 (= (getValueByKey!124 lt!24119 (_1!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))) (Some!129 (_2!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun lt!24388 () Unit!1551)

(assert (=> d!11633 (= lt!24388 (choose!311 lt!24119 (_1!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun e!39333 () Bool)

(assert (=> d!11633 e!39333))

(declare-fun res!33160 () Bool)

(assert (=> d!11633 (=> (not res!33160) (not e!39333))))

(assert (=> d!11633 (= res!33160 (isStrictlySorted!284 lt!24119))))

(assert (=> d!11633 (= (lemmaContainsTupThenGetReturnValue!41 lt!24119 (_1!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!24388)))

(declare-fun b!59853 () Bool)

(declare-fun res!33161 () Bool)

(assert (=> b!59853 (=> (not res!33161) (not e!39333))))

(assert (=> b!59853 (= res!33161 (containsKey!128 lt!24119 (_1!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun b!59854 () Bool)

(assert (=> b!59854 (= e!39333 (contains!684 lt!24119 (tuple2!2023 (_1!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(assert (= (and d!11633 res!33160) b!59853))

(assert (= (and b!59853 res!33161) b!59854))

(assert (=> d!11633 m!51223))

(declare-fun m!52073 () Bool)

(assert (=> d!11633 m!52073))

(declare-fun m!52075 () Bool)

(assert (=> d!11633 m!52075))

(declare-fun m!52077 () Bool)

(assert (=> b!59853 m!52077))

(declare-fun m!52079 () Bool)

(assert (=> b!59854 m!52079))

(assert (=> d!11333 d!11633))

(declare-fun b!59855 () Bool)

(declare-fun e!39336 () List!1430)

(declare-fun call!4506 () List!1430)

(assert (=> b!59855 (= e!39336 call!4506)))

(declare-fun lt!24389 () List!1430)

(declare-fun b!59856 () Bool)

(declare-fun e!39335 () Bool)

(assert (=> b!59856 (= e!39335 (contains!684 lt!24389 (tuple2!2023 (_1!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(declare-fun e!39334 () List!1430)

(declare-fun b!59857 () Bool)

(assert (=> b!59857 (= e!39334 (insertStrictlySorted!44 (t!4768 (toList!697 lt!23728)) (_1!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun bm!4501 () Bool)

(declare-fun call!4504 () List!1430)

(declare-fun call!4505 () List!1430)

(assert (=> bm!4501 (= call!4504 call!4505)))

(declare-fun b!59858 () Bool)

(declare-fun e!39337 () List!1430)

(declare-fun e!39338 () List!1430)

(assert (=> b!59858 (= e!39337 e!39338)))

(declare-fun c!7731 () Bool)

(assert (=> b!59858 (= c!7731 (and ((_ is Cons!1426) (toList!697 lt!23728)) (= (_1!1022 (h!2007 (toList!697 lt!23728))) (_1!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(declare-fun d!11635 () Bool)

(assert (=> d!11635 e!39335))

(declare-fun res!33163 () Bool)

(assert (=> d!11635 (=> (not res!33163) (not e!39335))))

(assert (=> d!11635 (= res!33163 (isStrictlySorted!284 lt!24389))))

(assert (=> d!11635 (= lt!24389 e!39337)))

(declare-fun c!7733 () Bool)

(assert (=> d!11635 (= c!7733 (and ((_ is Cons!1426) (toList!697 lt!23728)) (bvslt (_1!1022 (h!2007 (toList!697 lt!23728))) (_1!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(assert (=> d!11635 (isStrictlySorted!284 (toList!697 lt!23728))))

(assert (=> d!11635 (= (insertStrictlySorted!44 (toList!697 lt!23728) (_1!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!24389)))

(declare-fun bm!4502 () Bool)

(assert (=> bm!4502 (= call!4506 call!4504)))

(declare-fun b!59859 () Bool)

(assert (=> b!59859 (= e!39336 call!4506)))

(declare-fun b!59860 () Bool)

(assert (=> b!59860 (= e!39337 call!4505)))

(declare-fun b!59861 () Bool)

(assert (=> b!59861 (= e!39338 call!4504)))

(declare-fun c!7730 () Bool)

(declare-fun b!59862 () Bool)

(assert (=> b!59862 (= e!39334 (ite c!7731 (t!4768 (toList!697 lt!23728)) (ite c!7730 (Cons!1426 (h!2007 (toList!697 lt!23728)) (t!4768 (toList!697 lt!23728))) Nil!1427)))))

(declare-fun b!59863 () Bool)

(declare-fun res!33162 () Bool)

(assert (=> b!59863 (=> (not res!33162) (not e!39335))))

(assert (=> b!59863 (= res!33162 (containsKey!128 lt!24389 (_1!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun b!59864 () Bool)

(assert (=> b!59864 (= c!7730 (and ((_ is Cons!1426) (toList!697 lt!23728)) (bvsgt (_1!1022 (h!2007 (toList!697 lt!23728))) (_1!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(assert (=> b!59864 (= e!39338 e!39336)))

(declare-fun bm!4503 () Bool)

(assert (=> bm!4503 (= call!4505 ($colon$colon!60 e!39334 (ite c!7733 (h!2007 (toList!697 lt!23728)) (tuple2!2023 (_1!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))))))

(declare-fun c!7732 () Bool)

(assert (=> bm!4503 (= c!7732 c!7733)))

(assert (= (and d!11635 c!7733) b!59860))

(assert (= (and d!11635 (not c!7733)) b!59858))

(assert (= (and b!59858 c!7731) b!59861))

(assert (= (and b!59858 (not c!7731)) b!59864))

(assert (= (and b!59864 c!7730) b!59855))

(assert (= (and b!59864 (not c!7730)) b!59859))

(assert (= (or b!59855 b!59859) bm!4502))

(assert (= (or b!59861 bm!4502) bm!4501))

(assert (= (or b!59860 bm!4501) bm!4503))

(assert (= (and bm!4503 c!7732) b!59857))

(assert (= (and bm!4503 (not c!7732)) b!59862))

(assert (= (and d!11635 res!33163) b!59863))

(assert (= (and b!59863 res!33162) b!59856))

(declare-fun m!52081 () Bool)

(assert (=> d!11635 m!52081))

(declare-fun m!52083 () Bool)

(assert (=> d!11635 m!52083))

(declare-fun m!52085 () Bool)

(assert (=> bm!4503 m!52085))

(declare-fun m!52087 () Bool)

(assert (=> b!59857 m!52087))

(declare-fun m!52089 () Bool)

(assert (=> b!59863 m!52089))

(declare-fun m!52091 () Bool)

(assert (=> b!59856 m!52091))

(assert (=> d!11333 d!11635))

(assert (=> b!59396 d!11529))

(declare-fun b!59865 () Bool)

(declare-fun e!39340 () (_ BitVec 32))

(declare-fun call!4507 () (_ BitVec 32))

(assert (=> b!59865 (= e!39340 (bvadd #b00000000000000000000000000000001 call!4507))))

(declare-fun bm!4504 () Bool)

(assert (=> bm!4504 (= call!4507 (arrayCountValidKeys!0 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992))))))))

(declare-fun b!59866 () Bool)

(declare-fun e!39339 () (_ BitVec 32))

(assert (=> b!59866 (= e!39339 e!39340)))

(declare-fun c!7735 () Bool)

(assert (=> b!59866 (= c!7735 (validKeyInArray!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!59867 () Bool)

(assert (=> b!59867 (= e!39339 #b00000000000000000000000000000000)))

(declare-fun b!59868 () Bool)

(assert (=> b!59868 (= e!39340 call!4507)))

(declare-fun d!11637 () Bool)

(declare-fun lt!24390 () (_ BitVec 32))

(assert (=> d!11637 (and (bvsge lt!24390 #b00000000000000000000000000000000) (bvsle lt!24390 (bvsub (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) #b00000000000000000000000000000000)))))

(assert (=> d!11637 (= lt!24390 e!39339)))

(declare-fun c!7734 () Bool)

(assert (=> d!11637 (= c!7734 (bvsge #b00000000000000000000000000000000 (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992))))))))

(assert (=> d!11637 (and (bvsle #b00000000000000000000000000000000 (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992))))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992))))))))

(assert (=> d!11637 (= (arrayCountValidKeys!0 (_keys!3667 (v!2383 (underlying!226 thiss!992))) #b00000000000000000000000000000000 (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992))))) lt!24390)))

(assert (= (and d!11637 c!7734) b!59867))

(assert (= (and d!11637 (not c!7734)) b!59866))

(assert (= (and b!59866 c!7735) b!59865))

(assert (= (and b!59866 (not c!7735)) b!59868))

(assert (= (or b!59865 b!59868) bm!4504))

(declare-fun m!52093 () Bool)

(assert (=> bm!4504 m!52093))

(assert (=> b!59866 m!51523))

(assert (=> b!59866 m!51523))

(assert (=> b!59866 m!51529))

(assert (=> b!59087 d!11637))

(declare-fun bm!4505 () Bool)

(declare-fun call!4508 () Bool)

(declare-fun c!7736 () Bool)

(assert (=> bm!4505 (= call!4508 (arrayNoDuplicates!0 (_keys!3667 (_2!1021 lt!23809)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!7736 (Cons!1427 (select (arr!1781 (_keys!3667 (_2!1021 lt!23809))) #b00000000000000000000000000000000) Nil!1428) Nil!1428)))))

(declare-fun b!59869 () Bool)

(declare-fun e!39343 () Bool)

(assert (=> b!59869 (= e!39343 (contains!683 Nil!1428 (select (arr!1781 (_keys!3667 (_2!1021 lt!23809))) #b00000000000000000000000000000000)))))

(declare-fun b!59870 () Bool)

(declare-fun e!39342 () Bool)

(assert (=> b!59870 (= e!39342 call!4508)))

(declare-fun b!59871 () Bool)

(assert (=> b!59871 (= e!39342 call!4508)))

(declare-fun b!59872 () Bool)

(declare-fun e!39344 () Bool)

(assert (=> b!59872 (= e!39344 e!39342)))

(assert (=> b!59872 (= c!7736 (validKeyInArray!0 (select (arr!1781 (_keys!3667 (_2!1021 lt!23809))) #b00000000000000000000000000000000)))))

(declare-fun d!11639 () Bool)

(declare-fun res!33166 () Bool)

(declare-fun e!39341 () Bool)

(assert (=> d!11639 (=> res!33166 e!39341)))

(assert (=> d!11639 (= res!33166 (bvsge #b00000000000000000000000000000000 (size!2011 (_keys!3667 (_2!1021 lt!23809)))))))

(assert (=> d!11639 (= (arrayNoDuplicates!0 (_keys!3667 (_2!1021 lt!23809)) #b00000000000000000000000000000000 Nil!1428) e!39341)))

(declare-fun b!59873 () Bool)

(assert (=> b!59873 (= e!39341 e!39344)))

(declare-fun res!33165 () Bool)

(assert (=> b!59873 (=> (not res!33165) (not e!39344))))

(assert (=> b!59873 (= res!33165 (not e!39343))))

(declare-fun res!33164 () Bool)

(assert (=> b!59873 (=> (not res!33164) (not e!39343))))

(assert (=> b!59873 (= res!33164 (validKeyInArray!0 (select (arr!1781 (_keys!3667 (_2!1021 lt!23809))) #b00000000000000000000000000000000)))))

(assert (= (and d!11639 (not res!33166)) b!59873))

(assert (= (and b!59873 res!33164) b!59869))

(assert (= (and b!59873 res!33165) b!59872))

(assert (= (and b!59872 c!7736) b!59870))

(assert (= (and b!59872 (not c!7736)) b!59871))

(assert (= (or b!59870 b!59871) bm!4505))

(assert (=> bm!4505 m!51583))

(declare-fun m!52095 () Bool)

(assert (=> bm!4505 m!52095))

(assert (=> b!59869 m!51583))

(assert (=> b!59869 m!51583))

(declare-fun m!52097 () Bool)

(assert (=> b!59869 m!52097))

(assert (=> b!59872 m!51583))

(assert (=> b!59872 m!51583))

(assert (=> b!59872 m!51585))

(assert (=> b!59873 m!51583))

(assert (=> b!59873 m!51583))

(assert (=> b!59873 m!51585))

(assert (=> b!59246 d!11639))

(declare-fun d!11641 () Bool)

(assert (=> d!11641 (isDefined!77 (getValueByKey!124 (toList!697 (getCurrentListMap!402 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16))) (select (arr!1781 (_keys!3667 newMap!16)) (index!3032 lt!23832))))))

(declare-fun lt!24391 () Unit!1551)

(assert (=> d!11641 (= lt!24391 (choose!305 (toList!697 (getCurrentListMap!402 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16))) (select (arr!1781 (_keys!3667 newMap!16)) (index!3032 lt!23832))))))

(declare-fun e!39345 () Bool)

(assert (=> d!11641 e!39345))

(declare-fun res!33167 () Bool)

(assert (=> d!11641 (=> (not res!33167) (not e!39345))))

(assert (=> d!11641 (= res!33167 (isStrictlySorted!284 (toList!697 (getCurrentListMap!402 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))))

(assert (=> d!11641 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 (getCurrentListMap!402 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16))) (select (arr!1781 (_keys!3667 newMap!16)) (index!3032 lt!23832))) lt!24391)))

(declare-fun b!59874 () Bool)

(assert (=> b!59874 (= e!39345 (containsKey!128 (toList!697 (getCurrentListMap!402 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16))) (select (arr!1781 (_keys!3667 newMap!16)) (index!3032 lt!23832))))))

(assert (= (and d!11641 res!33167) b!59874))

(assert (=> d!11641 m!50725))

(assert (=> d!11641 m!50791))

(assert (=> d!11641 m!50791))

(assert (=> d!11641 m!50793))

(assert (=> d!11641 m!50725))

(declare-fun m!52099 () Bool)

(assert (=> d!11641 m!52099))

(declare-fun m!52101 () Bool)

(assert (=> d!11641 m!52101))

(assert (=> b!59874 m!50725))

(assert (=> b!59874 m!50787))

(assert (=> b!59090 d!11641))

(assert (=> b!59090 d!11425))

(assert (=> b!59090 d!11427))

(declare-fun d!11643 () Bool)

(assert (=> d!11643 (= (apply!66 (+!81 lt!23725 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) lt!23738) (apply!66 lt!23725 lt!23738))))

(assert (=> d!11643 true))

(declare-fun _$34!764 () Unit!1551)

(assert (=> d!11643 (= (choose!307 lt!23725 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992))) lt!23738) _$34!764)))

(declare-fun bs!2595 () Bool)

(assert (= bs!2595 d!11643))

(assert (=> bs!2595 m!50655))

(assert (=> bs!2595 m!50655))

(assert (=> bs!2595 m!50673))

(assert (=> bs!2595 m!50649))

(assert (=> d!11347 d!11643))

(assert (=> d!11347 d!11335))

(declare-fun d!11645 () Bool)

(declare-fun e!39346 () Bool)

(assert (=> d!11645 e!39346))

(declare-fun res!33168 () Bool)

(assert (=> d!11645 (=> res!33168 e!39346)))

(declare-fun lt!24394 () Bool)

(assert (=> d!11645 (= res!33168 (not lt!24394))))

(declare-fun lt!24393 () Bool)

(assert (=> d!11645 (= lt!24394 lt!24393)))

(declare-fun lt!24395 () Unit!1551)

(declare-fun e!39347 () Unit!1551)

(assert (=> d!11645 (= lt!24395 e!39347)))

(declare-fun c!7737 () Bool)

(assert (=> d!11645 (= c!7737 lt!24393)))

(assert (=> d!11645 (= lt!24393 (containsKey!128 (toList!697 lt!23725) lt!23738))))

(assert (=> d!11645 (= (contains!682 lt!23725 lt!23738) lt!24394)))

(declare-fun b!59875 () Bool)

(declare-fun lt!24392 () Unit!1551)

(assert (=> b!59875 (= e!39347 lt!24392)))

(assert (=> b!59875 (= lt!24392 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 lt!23725) lt!23738))))

(assert (=> b!59875 (isDefined!77 (getValueByKey!124 (toList!697 lt!23725) lt!23738))))

(declare-fun b!59876 () Bool)

(declare-fun Unit!1591 () Unit!1551)

(assert (=> b!59876 (= e!39347 Unit!1591)))

(declare-fun b!59877 () Bool)

(assert (=> b!59877 (= e!39346 (isDefined!77 (getValueByKey!124 (toList!697 lt!23725) lt!23738)))))

(assert (= (and d!11645 c!7737) b!59875))

(assert (= (and d!11645 (not c!7737)) b!59876))

(assert (= (and d!11645 (not res!33168)) b!59877))

(declare-fun m!52103 () Bool)

(assert (=> d!11645 m!52103))

(declare-fun m!52105 () Bool)

(assert (=> b!59875 m!52105))

(assert (=> b!59875 m!51269))

(assert (=> b!59875 m!51269))

(declare-fun m!52107 () Bool)

(assert (=> b!59875 m!52107))

(assert (=> b!59877 m!51269))

(assert (=> b!59877 m!51269))

(assert (=> b!59877 m!52107))

(assert (=> d!11347 d!11645))

(assert (=> d!11347 d!11329))

(assert (=> d!11347 d!11349))

(declare-fun d!11647 () Bool)

(assert (=> d!11647 (= (apply!66 lt!24092 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1069 (getValueByKey!124 (toList!697 lt!24092) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!2596 () Bool)

(assert (= bs!2596 d!11647))

(assert (=> bs!2596 m!50627))

(declare-fun m!52109 () Bool)

(assert (=> bs!2596 m!52109))

(assert (=> bs!2596 m!52109))

(declare-fun m!52111 () Bool)

(assert (=> bs!2596 m!52111))

(assert (=> b!59342 d!11647))

(assert (=> b!59342 d!11285))

(declare-fun d!11649 () Bool)

(declare-fun res!33169 () Bool)

(declare-fun e!39348 () Bool)

(assert (=> d!11649 (=> res!33169 e!39348)))

(assert (=> d!11649 (= res!33169 (and ((_ is Cons!1426) (toList!697 lt!23739)) (= (_1!1022 (h!2007 (toList!697 lt!23739))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!11649 (= (containsKey!128 (toList!697 lt!23739) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!39348)))

(declare-fun b!59878 () Bool)

(declare-fun e!39349 () Bool)

(assert (=> b!59878 (= e!39348 e!39349)))

(declare-fun res!33170 () Bool)

(assert (=> b!59878 (=> (not res!33170) (not e!39349))))

(assert (=> b!59878 (= res!33170 (and (or (not ((_ is Cons!1426) (toList!697 lt!23739))) (bvsle (_1!1022 (h!2007 (toList!697 lt!23739))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) ((_ is Cons!1426) (toList!697 lt!23739)) (bvslt (_1!1022 (h!2007 (toList!697 lt!23739))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun b!59879 () Bool)

(assert (=> b!59879 (= e!39349 (containsKey!128 (t!4768 (toList!697 lt!23739)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!11649 (not res!33169)) b!59878))

(assert (= (and b!59878 res!33170) b!59879))

(assert (=> b!59879 m!50627))

(declare-fun m!52113 () Bool)

(assert (=> b!59879 m!52113))

(assert (=> d!11289 d!11649))

(assert (=> b!59217 d!11459))

(assert (=> b!59217 d!11461))

(assert (=> d!11327 d!11321))

(assert (=> d!11327 d!11333))

(declare-fun d!11651 () Bool)

(assert (=> d!11651 (contains!682 (+!81 lt!23728 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))) lt!23721)))

(assert (=> d!11651 true))

(declare-fun _$35!300 () Unit!1551)

(assert (=> d!11651 (= (choose!308 lt!23728 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))) lt!23721) _$35!300)))

(declare-fun bs!2597 () Bool)

(assert (= bs!2597 d!11651))

(assert (=> bs!2597 m!50645))

(assert (=> bs!2597 m!50645))

(assert (=> bs!2597 m!50653))

(assert (=> d!11327 d!11651))

(declare-fun d!11653 () Bool)

(declare-fun e!39350 () Bool)

(assert (=> d!11653 e!39350))

(declare-fun res!33171 () Bool)

(assert (=> d!11653 (=> res!33171 e!39350)))

(declare-fun lt!24398 () Bool)

(assert (=> d!11653 (= res!33171 (not lt!24398))))

(declare-fun lt!24397 () Bool)

(assert (=> d!11653 (= lt!24398 lt!24397)))

(declare-fun lt!24399 () Unit!1551)

(declare-fun e!39351 () Unit!1551)

(assert (=> d!11653 (= lt!24399 e!39351)))

(declare-fun c!7738 () Bool)

(assert (=> d!11653 (= c!7738 lt!24397)))

(assert (=> d!11653 (= lt!24397 (containsKey!128 (toList!697 lt!23728) lt!23721))))

(assert (=> d!11653 (= (contains!682 lt!23728 lt!23721) lt!24398)))

(declare-fun b!59881 () Bool)

(declare-fun lt!24396 () Unit!1551)

(assert (=> b!59881 (= e!39351 lt!24396)))

(assert (=> b!59881 (= lt!24396 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 lt!23728) lt!23721))))

(assert (=> b!59881 (isDefined!77 (getValueByKey!124 (toList!697 lt!23728) lt!23721))))

(declare-fun b!59882 () Bool)

(declare-fun Unit!1592 () Unit!1551)

(assert (=> b!59882 (= e!39351 Unit!1592)))

(declare-fun b!59883 () Bool)

(assert (=> b!59883 (= e!39350 (isDefined!77 (getValueByKey!124 (toList!697 lt!23728) lt!23721)))))

(assert (= (and d!11653 c!7738) b!59881))

(assert (= (and d!11653 (not c!7738)) b!59882))

(assert (= (and d!11653 (not res!33171)) b!59883))

(declare-fun m!52115 () Bool)

(assert (=> d!11653 m!52115))

(declare-fun m!52117 () Bool)

(assert (=> b!59881 m!52117))

(declare-fun m!52119 () Bool)

(assert (=> b!59881 m!52119))

(assert (=> b!59881 m!52119))

(declare-fun m!52121 () Bool)

(assert (=> b!59881 m!52121))

(assert (=> b!59883 m!52119))

(assert (=> b!59883 m!52119))

(assert (=> b!59883 m!52121))

(assert (=> d!11327 d!11653))

(declare-fun bm!4506 () Bool)

(declare-fun c!7744 () Bool)

(declare-fun call!4514 () ListLongMap!1363)

(declare-fun call!4512 () ListLongMap!1363)

(declare-fun call!4511 () ListLongMap!1363)

(declare-fun c!7741 () Bool)

(declare-fun call!4515 () ListLongMap!1363)

(assert (=> bm!4506 (= call!4512 (+!81 (ite c!7741 call!4511 (ite c!7744 call!4514 call!4515)) (ite (or c!7741 c!7744) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 (_2!1021 lt!23809))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (_2!1021 lt!23809))))))))

(declare-fun b!59884 () Bool)

(declare-fun e!39352 () ListLongMap!1363)

(declare-fun call!4509 () ListLongMap!1363)

(assert (=> b!59884 (= e!39352 call!4509)))

(declare-fun b!59885 () Bool)

(declare-fun c!7743 () Bool)

(assert (=> b!59885 (= c!7743 (and (not (= (bvand (extraKeys!1930 (_2!1021 lt!23809)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1930 (_2!1021 lt!23809)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!39356 () ListLongMap!1363)

(assert (=> b!59885 (= e!39356 e!39352)))

(declare-fun b!59886 () Bool)

(declare-fun e!39359 () Bool)

(declare-fun call!4513 () Bool)

(assert (=> b!59886 (= e!39359 (not call!4513))))

(declare-fun b!59888 () Bool)

(declare-fun e!39358 () Bool)

(assert (=> b!59888 (= e!39358 (validKeyInArray!0 (select (arr!1781 (_keys!3667 (_2!1021 lt!23809))) #b00000000000000000000000000000000)))))

(declare-fun b!59889 () Bool)

(declare-fun e!39362 () Bool)

(assert (=> b!59889 (= e!39359 e!39362)))

(declare-fun res!33180 () Bool)

(assert (=> b!59889 (= res!33180 call!4513)))

(assert (=> b!59889 (=> (not res!33180) (not e!39362))))

(declare-fun b!59890 () Bool)

(declare-fun e!39364 () Bool)

(assert (=> b!59890 (= e!39364 e!39359)))

(declare-fun c!7742 () Bool)

(assert (=> b!59890 (= c!7742 (not (= (bvand (extraKeys!1930 (_2!1021 lt!23809)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!59891 () Bool)

(declare-fun e!39360 () Bool)

(declare-fun call!4510 () Bool)

(assert (=> b!59891 (= e!39360 (not call!4510))))

(declare-fun b!59892 () Bool)

(declare-fun e!39353 () Bool)

(declare-fun lt!24418 () ListLongMap!1363)

(assert (=> b!59892 (= e!39353 (= (apply!66 lt!24418 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1959 (_2!1021 lt!23809))))))

(declare-fun b!59893 () Bool)

(declare-fun e!39354 () ListLongMap!1363)

(assert (=> b!59893 (= e!39354 e!39356)))

(assert (=> b!59893 (= c!7744 (and (not (= (bvand (extraKeys!1930 (_2!1021 lt!23809)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1930 (_2!1021 lt!23809)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!59894 () Bool)

(declare-fun e!39361 () Unit!1551)

(declare-fun Unit!1593 () Unit!1551)

(assert (=> b!59894 (= e!39361 Unit!1593)))

(declare-fun bm!4507 () Bool)

(assert (=> bm!4507 (= call!4510 (contains!682 lt!24418 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59895 () Bool)

(declare-fun res!33172 () Bool)

(assert (=> b!59895 (=> (not res!33172) (not e!39364))))

(declare-fun e!39355 () Bool)

(assert (=> b!59895 (= res!33172 e!39355)))

(declare-fun res!33173 () Bool)

(assert (=> b!59895 (=> res!33173 e!39355)))

(declare-fun e!39363 () Bool)

(assert (=> b!59895 (= res!33173 (not e!39363))))

(declare-fun res!33175 () Bool)

(assert (=> b!59895 (=> (not res!33175) (not e!39363))))

(assert (=> b!59895 (= res!33175 (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 (_2!1021 lt!23809)))))))

(declare-fun b!59887 () Bool)

(assert (=> b!59887 (= e!39354 (+!81 call!4512 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (_2!1021 lt!23809)))))))

(declare-fun d!11655 () Bool)

(assert (=> d!11655 e!39364))

(declare-fun res!33179 () Bool)

(assert (=> d!11655 (=> (not res!33179) (not e!39364))))

(assert (=> d!11655 (= res!33179 (or (bvsge #b00000000000000000000000000000000 (size!2011 (_keys!3667 (_2!1021 lt!23809)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 (_2!1021 lt!23809)))))))))

(declare-fun lt!24403 () ListLongMap!1363)

(assert (=> d!11655 (= lt!24418 lt!24403)))

(declare-fun lt!24406 () Unit!1551)

(assert (=> d!11655 (= lt!24406 e!39361)))

(declare-fun c!7739 () Bool)

(assert (=> d!11655 (= c!7739 e!39358)))

(declare-fun res!33176 () Bool)

(assert (=> d!11655 (=> (not res!33176) (not e!39358))))

(assert (=> d!11655 (= res!33176 (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 (_2!1021 lt!23809)))))))

(assert (=> d!11655 (= lt!24403 e!39354)))

(assert (=> d!11655 (= c!7741 (and (not (= (bvand (extraKeys!1930 (_2!1021 lt!23809)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1930 (_2!1021 lt!23809)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11655 (validMask!0 (mask!5927 (_2!1021 lt!23809)))))

(assert (=> d!11655 (= (getCurrentListMap!402 (_keys!3667 (_2!1021 lt!23809)) (_values!2026 (_2!1021 lt!23809)) (mask!5927 (_2!1021 lt!23809)) (extraKeys!1930 (_2!1021 lt!23809)) (zeroValue!1959 (_2!1021 lt!23809)) (minValue!1959 (_2!1021 lt!23809)) #b00000000000000000000000000000000 (defaultEntry!2043 (_2!1021 lt!23809))) lt!24418)))

(declare-fun bm!4508 () Bool)

(assert (=> bm!4508 (= call!4515 call!4514)))

(declare-fun b!59896 () Bool)

(assert (=> b!59896 (= e!39363 (validKeyInArray!0 (select (arr!1781 (_keys!3667 (_2!1021 lt!23809))) #b00000000000000000000000000000000)))))

(declare-fun b!59897 () Bool)

(assert (=> b!59897 (= e!39360 e!39353)))

(declare-fun res!33178 () Bool)

(assert (=> b!59897 (= res!33178 call!4510)))

(assert (=> b!59897 (=> (not res!33178) (not e!39353))))

(declare-fun bm!4509 () Bool)

(assert (=> bm!4509 (= call!4514 call!4511)))

(declare-fun b!59898 () Bool)

(assert (=> b!59898 (= e!39352 call!4515)))

(declare-fun bm!4510 () Bool)

(assert (=> bm!4510 (= call!4509 call!4512)))

(declare-fun bm!4511 () Bool)

(assert (=> bm!4511 (= call!4511 (getCurrentListMapNoExtraKeys!44 (_keys!3667 (_2!1021 lt!23809)) (_values!2026 (_2!1021 lt!23809)) (mask!5927 (_2!1021 lt!23809)) (extraKeys!1930 (_2!1021 lt!23809)) (zeroValue!1959 (_2!1021 lt!23809)) (minValue!1959 (_2!1021 lt!23809)) #b00000000000000000000000000000000 (defaultEntry!2043 (_2!1021 lt!23809))))))

(declare-fun b!59899 () Bool)

(declare-fun e!39357 () Bool)

(assert (=> b!59899 (= e!39357 (= (apply!66 lt!24418 (select (arr!1781 (_keys!3667 (_2!1021 lt!23809))) #b00000000000000000000000000000000)) (get!1066 (select (arr!1782 (_values!2026 (_2!1021 lt!23809))) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2043 (_2!1021 lt!23809)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!59899 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2012 (_values!2026 (_2!1021 lt!23809)))))))

(assert (=> b!59899 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 (_2!1021 lt!23809)))))))

(declare-fun b!59900 () Bool)

(declare-fun lt!24414 () Unit!1551)

(assert (=> b!59900 (= e!39361 lt!24414)))

(declare-fun lt!24407 () ListLongMap!1363)

(assert (=> b!59900 (= lt!24407 (getCurrentListMapNoExtraKeys!44 (_keys!3667 (_2!1021 lt!23809)) (_values!2026 (_2!1021 lt!23809)) (mask!5927 (_2!1021 lt!23809)) (extraKeys!1930 (_2!1021 lt!23809)) (zeroValue!1959 (_2!1021 lt!23809)) (minValue!1959 (_2!1021 lt!23809)) #b00000000000000000000000000000000 (defaultEntry!2043 (_2!1021 lt!23809))))))

(declare-fun lt!24402 () (_ BitVec 64))

(assert (=> b!59900 (= lt!24402 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24400 () (_ BitVec 64))

(assert (=> b!59900 (= lt!24400 (select (arr!1781 (_keys!3667 (_2!1021 lt!23809))) #b00000000000000000000000000000000))))

(declare-fun lt!24415 () Unit!1551)

(assert (=> b!59900 (= lt!24415 (addStillContains!42 lt!24407 lt!24402 (zeroValue!1959 (_2!1021 lt!23809)) lt!24400))))

(assert (=> b!59900 (contains!682 (+!81 lt!24407 (tuple2!2023 lt!24402 (zeroValue!1959 (_2!1021 lt!23809)))) lt!24400)))

(declare-fun lt!24421 () Unit!1551)

(assert (=> b!59900 (= lt!24421 lt!24415)))

(declare-fun lt!24404 () ListLongMap!1363)

(assert (=> b!59900 (= lt!24404 (getCurrentListMapNoExtraKeys!44 (_keys!3667 (_2!1021 lt!23809)) (_values!2026 (_2!1021 lt!23809)) (mask!5927 (_2!1021 lt!23809)) (extraKeys!1930 (_2!1021 lt!23809)) (zeroValue!1959 (_2!1021 lt!23809)) (minValue!1959 (_2!1021 lt!23809)) #b00000000000000000000000000000000 (defaultEntry!2043 (_2!1021 lt!23809))))))

(declare-fun lt!24412 () (_ BitVec 64))

(assert (=> b!59900 (= lt!24412 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24417 () (_ BitVec 64))

(assert (=> b!59900 (= lt!24417 (select (arr!1781 (_keys!3667 (_2!1021 lt!23809))) #b00000000000000000000000000000000))))

(declare-fun lt!24410 () Unit!1551)

(assert (=> b!59900 (= lt!24410 (addApplyDifferent!42 lt!24404 lt!24412 (minValue!1959 (_2!1021 lt!23809)) lt!24417))))

(assert (=> b!59900 (= (apply!66 (+!81 lt!24404 (tuple2!2023 lt!24412 (minValue!1959 (_2!1021 lt!23809)))) lt!24417) (apply!66 lt!24404 lt!24417))))

(declare-fun lt!24416 () Unit!1551)

(assert (=> b!59900 (= lt!24416 lt!24410)))

(declare-fun lt!24405 () ListLongMap!1363)

(assert (=> b!59900 (= lt!24405 (getCurrentListMapNoExtraKeys!44 (_keys!3667 (_2!1021 lt!23809)) (_values!2026 (_2!1021 lt!23809)) (mask!5927 (_2!1021 lt!23809)) (extraKeys!1930 (_2!1021 lt!23809)) (zeroValue!1959 (_2!1021 lt!23809)) (minValue!1959 (_2!1021 lt!23809)) #b00000000000000000000000000000000 (defaultEntry!2043 (_2!1021 lt!23809))))))

(declare-fun lt!24413 () (_ BitVec 64))

(assert (=> b!59900 (= lt!24413 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24401 () (_ BitVec 64))

(assert (=> b!59900 (= lt!24401 (select (arr!1781 (_keys!3667 (_2!1021 lt!23809))) #b00000000000000000000000000000000))))

(declare-fun lt!24419 () Unit!1551)

(assert (=> b!59900 (= lt!24419 (addApplyDifferent!42 lt!24405 lt!24413 (zeroValue!1959 (_2!1021 lt!23809)) lt!24401))))

(assert (=> b!59900 (= (apply!66 (+!81 lt!24405 (tuple2!2023 lt!24413 (zeroValue!1959 (_2!1021 lt!23809)))) lt!24401) (apply!66 lt!24405 lt!24401))))

(declare-fun lt!24408 () Unit!1551)

(assert (=> b!59900 (= lt!24408 lt!24419)))

(declare-fun lt!24411 () ListLongMap!1363)

(assert (=> b!59900 (= lt!24411 (getCurrentListMapNoExtraKeys!44 (_keys!3667 (_2!1021 lt!23809)) (_values!2026 (_2!1021 lt!23809)) (mask!5927 (_2!1021 lt!23809)) (extraKeys!1930 (_2!1021 lt!23809)) (zeroValue!1959 (_2!1021 lt!23809)) (minValue!1959 (_2!1021 lt!23809)) #b00000000000000000000000000000000 (defaultEntry!2043 (_2!1021 lt!23809))))))

(declare-fun lt!24409 () (_ BitVec 64))

(assert (=> b!59900 (= lt!24409 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24420 () (_ BitVec 64))

(assert (=> b!59900 (= lt!24420 (select (arr!1781 (_keys!3667 (_2!1021 lt!23809))) #b00000000000000000000000000000000))))

(assert (=> b!59900 (= lt!24414 (addApplyDifferent!42 lt!24411 lt!24409 (minValue!1959 (_2!1021 lt!23809)) lt!24420))))

(assert (=> b!59900 (= (apply!66 (+!81 lt!24411 (tuple2!2023 lt!24409 (minValue!1959 (_2!1021 lt!23809)))) lt!24420) (apply!66 lt!24411 lt!24420))))

(declare-fun b!59901 () Bool)

(assert (=> b!59901 (= e!39355 e!39357)))

(declare-fun res!33174 () Bool)

(assert (=> b!59901 (=> (not res!33174) (not e!39357))))

(assert (=> b!59901 (= res!33174 (contains!682 lt!24418 (select (arr!1781 (_keys!3667 (_2!1021 lt!23809))) #b00000000000000000000000000000000)))))

(assert (=> b!59901 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 (_2!1021 lt!23809)))))))

(declare-fun b!59902 () Bool)

(declare-fun res!33177 () Bool)

(assert (=> b!59902 (=> (not res!33177) (not e!39364))))

(assert (=> b!59902 (= res!33177 e!39360)))

(declare-fun c!7740 () Bool)

(assert (=> b!59902 (= c!7740 (not (= (bvand (extraKeys!1930 (_2!1021 lt!23809)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!4512 () Bool)

(assert (=> bm!4512 (= call!4513 (contains!682 lt!24418 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59903 () Bool)

(assert (=> b!59903 (= e!39356 call!4509)))

(declare-fun b!59904 () Bool)

(assert (=> b!59904 (= e!39362 (= (apply!66 lt!24418 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1959 (_2!1021 lt!23809))))))

(assert (= (and d!11655 c!7741) b!59887))

(assert (= (and d!11655 (not c!7741)) b!59893))

(assert (= (and b!59893 c!7744) b!59903))

(assert (= (and b!59893 (not c!7744)) b!59885))

(assert (= (and b!59885 c!7743) b!59884))

(assert (= (and b!59885 (not c!7743)) b!59898))

(assert (= (or b!59884 b!59898) bm!4508))

(assert (= (or b!59903 bm!4508) bm!4509))

(assert (= (or b!59903 b!59884) bm!4510))

(assert (= (or b!59887 bm!4509) bm!4511))

(assert (= (or b!59887 bm!4510) bm!4506))

(assert (= (and d!11655 res!33176) b!59888))

(assert (= (and d!11655 c!7739) b!59900))

(assert (= (and d!11655 (not c!7739)) b!59894))

(assert (= (and d!11655 res!33179) b!59895))

(assert (= (and b!59895 res!33175) b!59896))

(assert (= (and b!59895 (not res!33173)) b!59901))

(assert (= (and b!59901 res!33174) b!59899))

(assert (= (and b!59895 res!33172) b!59902))

(assert (= (and b!59902 c!7740) b!59897))

(assert (= (and b!59902 (not c!7740)) b!59891))

(assert (= (and b!59897 res!33178) b!59892))

(assert (= (or b!59897 b!59891) bm!4507))

(assert (= (and b!59902 res!33177) b!59890))

(assert (= (and b!59890 c!7742) b!59889))

(assert (= (and b!59890 (not c!7742)) b!59886))

(assert (= (and b!59889 res!33180) b!59904))

(assert (= (or b!59889 b!59886) bm!4512))

(declare-fun b_lambda!2633 () Bool)

(assert (=> (not b_lambda!2633) (not b!59899)))

(declare-fun t!4779 () Bool)

(declare-fun tb!1325 () Bool)

(assert (=> (and b!58765 (= (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) (defaultEntry!2043 (_2!1021 lt!23809))) t!4779) tb!1325))

(declare-fun result!2385 () Bool)

(assert (=> tb!1325 (= result!2385 tp_is_empty!2397)))

(assert (=> b!59899 t!4779))

(declare-fun b_and!3631 () Bool)

(assert (= b_and!3627 (and (=> t!4779 result!2385) b_and!3631)))

(declare-fun tb!1327 () Bool)

(declare-fun t!4781 () Bool)

(assert (=> (and b!58764 (= (defaultEntry!2043 newMap!16) (defaultEntry!2043 (_2!1021 lt!23809))) t!4781) tb!1327))

(declare-fun result!2387 () Bool)

(assert (= result!2387 result!2385))

(assert (=> b!59899 t!4781))

(declare-fun b_and!3633 () Bool)

(assert (= b_and!3629 (and (=> t!4781 result!2387) b_and!3633)))

(declare-fun m!52123 () Bool)

(assert (=> b!59887 m!52123))

(declare-fun m!52125 () Bool)

(assert (=> bm!4511 m!52125))

(declare-fun m!52127 () Bool)

(assert (=> bm!4506 m!52127))

(declare-fun m!52129 () Bool)

(assert (=> b!59892 m!52129))

(assert (=> b!59896 m!51583))

(assert (=> b!59896 m!51583))

(assert (=> b!59896 m!51585))

(declare-fun m!52131 () Bool)

(assert (=> bm!4507 m!52131))

(declare-fun m!52133 () Bool)

(assert (=> b!59899 m!52133))

(assert (=> b!59899 m!51583))

(declare-fun m!52135 () Bool)

(assert (=> b!59899 m!52135))

(declare-fun m!52137 () Bool)

(assert (=> b!59899 m!52137))

(assert (=> b!59899 m!52133))

(assert (=> b!59899 m!52137))

(declare-fun m!52139 () Bool)

(assert (=> b!59899 m!52139))

(assert (=> b!59899 m!51583))

(declare-fun m!52141 () Bool)

(assert (=> b!59904 m!52141))

(assert (=> b!59901 m!51583))

(assert (=> b!59901 m!51583))

(declare-fun m!52143 () Bool)

(assert (=> b!59901 m!52143))

(assert (=> b!59888 m!51583))

(assert (=> b!59888 m!51583))

(assert (=> b!59888 m!51585))

(assert (=> d!11655 m!51949))

(declare-fun m!52145 () Bool)

(assert (=> bm!4512 m!52145))

(declare-fun m!52147 () Bool)

(assert (=> b!59900 m!52147))

(declare-fun m!52149 () Bool)

(assert (=> b!59900 m!52149))

(declare-fun m!52151 () Bool)

(assert (=> b!59900 m!52151))

(declare-fun m!52153 () Bool)

(assert (=> b!59900 m!52153))

(assert (=> b!59900 m!52147))

(declare-fun m!52155 () Bool)

(assert (=> b!59900 m!52155))

(declare-fun m!52157 () Bool)

(assert (=> b!59900 m!52157))

(declare-fun m!52159 () Bool)

(assert (=> b!59900 m!52159))

(assert (=> b!59900 m!52125))

(declare-fun m!52161 () Bool)

(assert (=> b!59900 m!52161))

(declare-fun m!52163 () Bool)

(assert (=> b!59900 m!52163))

(declare-fun m!52165 () Bool)

(assert (=> b!59900 m!52165))

(assert (=> b!59900 m!51583))

(declare-fun m!52167 () Bool)

(assert (=> b!59900 m!52167))

(declare-fun m!52169 () Bool)

(assert (=> b!59900 m!52169))

(declare-fun m!52171 () Bool)

(assert (=> b!59900 m!52171))

(assert (=> b!59900 m!52161))

(declare-fun m!52173 () Bool)

(assert (=> b!59900 m!52173))

(assert (=> b!59900 m!52157))

(declare-fun m!52175 () Bool)

(assert (=> b!59900 m!52175))

(assert (=> b!59900 m!52167))

(assert (=> d!11261 d!11655))

(declare-fun d!11657 () Bool)

(assert (=> d!11657 (= (get!1069 (getValueByKey!124 (toList!697 lt!23739) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2386 (getValueByKey!124 (toList!697 lt!23739) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!11369 d!11657))

(assert (=> d!11369 d!11437))

(declare-fun d!11659 () Bool)

(assert (=> d!11659 (= (apply!66 lt!24144 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1069 (getValueByKey!124 (toList!697 lt!24144) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2598 () Bool)

(assert (= bs!2598 d!11659))

(declare-fun m!52177 () Bool)

(assert (=> bs!2598 m!52177))

(assert (=> bs!2598 m!52177))

(declare-fun m!52179 () Bool)

(assert (=> bs!2598 m!52179))

(assert (=> b!59380 d!11659))

(declare-fun d!11661 () Bool)

(assert (=> d!11661 (= (isEmpty!293 (getValueByKey!124 (toList!697 lt!23655) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355))) (not ((_ is Some!129) (getValueByKey!124 (toList!697 lt!23655) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))))

(assert (=> d!11275 d!11661))

(declare-fun b!59906 () Bool)

(declare-fun e!39365 () Option!130)

(declare-fun e!39366 () Option!130)

(assert (=> b!59906 (= e!39365 e!39366)))

(declare-fun c!7746 () Bool)

(assert (=> b!59906 (= c!7746 (and ((_ is Cons!1426) (toList!697 lt!24121)) (not (= (_1!1022 (h!2007 (toList!697 lt!24121))) (_1!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))))

(declare-fun b!59905 () Bool)

(assert (=> b!59905 (= e!39365 (Some!129 (_2!1022 (h!2007 (toList!697 lt!24121)))))))

(declare-fun b!59907 () Bool)

(assert (=> b!59907 (= e!39366 (getValueByKey!124 (t!4768 (toList!697 lt!24121)) (_1!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun b!59908 () Bool)

(assert (=> b!59908 (= e!39366 None!128)))

(declare-fun d!11663 () Bool)

(declare-fun c!7745 () Bool)

(assert (=> d!11663 (= c!7745 (and ((_ is Cons!1426) (toList!697 lt!24121)) (= (_1!1022 (h!2007 (toList!697 lt!24121))) (_1!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(assert (=> d!11663 (= (getValueByKey!124 (toList!697 lt!24121) (_1!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) e!39365)))

(assert (= (and d!11663 c!7745) b!59905))

(assert (= (and d!11663 (not c!7745)) b!59906))

(assert (= (and b!59906 c!7746) b!59907))

(assert (= (and b!59906 (not c!7746)) b!59908))

(declare-fun m!52181 () Bool)

(assert (=> b!59907 m!52181))

(assert (=> b!59363 d!11663))

(declare-fun d!11665 () Bool)

(declare-fun e!39367 () Bool)

(assert (=> d!11665 e!39367))

(declare-fun res!33181 () Bool)

(assert (=> d!11665 (=> (not res!33181) (not e!39367))))

(declare-fun lt!24423 () ListLongMap!1363)

(assert (=> d!11665 (= res!33181 (contains!682 lt!24423 (_1!1022 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!24425 () List!1430)

(assert (=> d!11665 (= lt!24423 (ListLongMap!1364 lt!24425))))

(declare-fun lt!24422 () Unit!1551)

(declare-fun lt!24424 () Unit!1551)

(assert (=> d!11665 (= lt!24422 lt!24424)))

(assert (=> d!11665 (= (getValueByKey!124 lt!24425 (_1!1022 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1022 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11665 (= lt!24424 (lemmaContainsTupThenGetReturnValue!41 lt!24425 (_1!1022 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11665 (= lt!24425 (insertStrictlySorted!44 (toList!697 (getCurrentListMap!402 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16))) (_1!1022 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11665 (= (+!81 (getCurrentListMap!402 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!24423)))

(declare-fun b!59909 () Bool)

(declare-fun res!33182 () Bool)

(assert (=> b!59909 (=> (not res!33182) (not e!39367))))

(assert (=> b!59909 (= res!33182 (= (getValueByKey!124 (toList!697 lt!24423) (_1!1022 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1022 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!59910 () Bool)

(assert (=> b!59910 (= e!39367 (contains!684 (toList!697 lt!24423) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!11665 res!33181) b!59909))

(assert (= (and b!59909 res!33182) b!59910))

(declare-fun m!52183 () Bool)

(assert (=> d!11665 m!52183))

(declare-fun m!52185 () Bool)

(assert (=> d!11665 m!52185))

(declare-fun m!52187 () Bool)

(assert (=> d!11665 m!52187))

(declare-fun m!52189 () Bool)

(assert (=> d!11665 m!52189))

(declare-fun m!52191 () Bool)

(assert (=> b!59909 m!52191))

(declare-fun m!52193 () Bool)

(assert (=> b!59910 m!52193))

(assert (=> d!11281 d!11665))

(declare-fun d!11667 () Bool)

(assert (=> d!11667 (= (+!81 (getCurrentListMap!402 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!402 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) lt!23829 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(assert (=> d!11667 true))

(declare-fun _$7!44 () Unit!1551)

(assert (=> d!11667 (= (choose!306 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) lt!23829 (zeroValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1959 newMap!16) (defaultEntry!2043 newMap!16)) _$7!44)))

(declare-fun bs!2599 () Bool)

(assert (= bs!2599 d!11667))

(assert (=> bs!2599 m!50617))

(assert (=> bs!2599 m!50617))

(assert (=> bs!2599 m!50949))

(assert (=> bs!2599 m!50555))

(assert (=> bs!2599 m!50947))

(assert (=> d!11281 d!11667))

(assert (=> d!11281 d!11307))

(declare-fun c!7749 () Bool)

(declare-fun call!4522 () ListLongMap!1363)

(declare-fun call!4519 () ListLongMap!1363)

(declare-fun call!4521 () ListLongMap!1363)

(declare-fun c!7752 () Bool)

(declare-fun call!4518 () ListLongMap!1363)

(declare-fun bm!4513 () Bool)

(assert (=> bm!4513 (= call!4519 (+!81 (ite c!7749 call!4518 (ite c!7752 call!4521 call!4522)) (ite (or c!7749 c!7752) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))))))

(declare-fun b!59911 () Bool)

(declare-fun e!39368 () ListLongMap!1363)

(declare-fun call!4516 () ListLongMap!1363)

(assert (=> b!59911 (= e!39368 call!4516)))

(declare-fun b!59912 () Bool)

(declare-fun c!7751 () Bool)

(assert (=> b!59912 (= c!7751 (and (not (= (bvand lt!23829 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!23829 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!39372 () ListLongMap!1363)

(assert (=> b!59912 (= e!39372 e!39368)))

(declare-fun b!59913 () Bool)

(declare-fun e!39375 () Bool)

(declare-fun call!4520 () Bool)

(assert (=> b!59913 (= e!39375 (not call!4520))))

(declare-fun b!59915 () Bool)

(declare-fun e!39374 () Bool)

(assert (=> b!59915 (= e!39374 (validKeyInArray!0 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59916 () Bool)

(declare-fun e!39378 () Bool)

(assert (=> b!59916 (= e!39375 e!39378)))

(declare-fun res!33191 () Bool)

(assert (=> b!59916 (= res!33191 call!4520)))

(assert (=> b!59916 (=> (not res!33191) (not e!39378))))

(declare-fun b!59917 () Bool)

(declare-fun e!39380 () Bool)

(assert (=> b!59917 (= e!39380 e!39375)))

(declare-fun c!7750 () Bool)

(assert (=> b!59917 (= c!7750 (not (= (bvand lt!23829 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!59918 () Bool)

(declare-fun e!39376 () Bool)

(declare-fun call!4517 () Bool)

(assert (=> b!59918 (= e!39376 (not call!4517))))

(declare-fun b!59919 () Bool)

(declare-fun e!39369 () Bool)

(declare-fun lt!24444 () ListLongMap!1363)

(assert (=> b!59919 (= e!39369 (= (apply!66 lt!24444 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!59920 () Bool)

(declare-fun e!39370 () ListLongMap!1363)

(assert (=> b!59920 (= e!39370 e!39372)))

(assert (=> b!59920 (= c!7752 (and (not (= (bvand lt!23829 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!23829 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!59921 () Bool)

(declare-fun e!39377 () Unit!1551)

(declare-fun Unit!1594 () Unit!1551)

(assert (=> b!59921 (= e!39377 Unit!1594)))

(declare-fun bm!4514 () Bool)

(assert (=> bm!4514 (= call!4517 (contains!682 lt!24444 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59922 () Bool)

(declare-fun res!33183 () Bool)

(assert (=> b!59922 (=> (not res!33183) (not e!39380))))

(declare-fun e!39371 () Bool)

(assert (=> b!59922 (= res!33183 e!39371)))

(declare-fun res!33184 () Bool)

(assert (=> b!59922 (=> res!33184 e!39371)))

(declare-fun e!39379 () Bool)

(assert (=> b!59922 (= res!33184 (not e!39379))))

(declare-fun res!33186 () Bool)

(assert (=> b!59922 (=> (not res!33186) (not e!39379))))

(assert (=> b!59922 (= res!33186 (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(declare-fun b!59914 () Bool)

(assert (=> b!59914 (= e!39370 (+!81 call!4519 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))))))

(declare-fun d!11669 () Bool)

(assert (=> d!11669 e!39380))

(declare-fun res!33190 () Bool)

(assert (=> d!11669 (=> (not res!33190) (not e!39380))))

(assert (=> d!11669 (= res!33190 (or (bvsge #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))))

(declare-fun lt!24429 () ListLongMap!1363)

(assert (=> d!11669 (= lt!24444 lt!24429)))

(declare-fun lt!24432 () Unit!1551)

(assert (=> d!11669 (= lt!24432 e!39377)))

(declare-fun c!7747 () Bool)

(assert (=> d!11669 (= c!7747 e!39374)))

(declare-fun res!33187 () Bool)

(assert (=> d!11669 (=> (not res!33187) (not e!39374))))

(assert (=> d!11669 (= res!33187 (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(assert (=> d!11669 (= lt!24429 e!39370)))

(assert (=> d!11669 (= c!7749 (and (not (= (bvand lt!23829 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!23829 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11669 (validMask!0 (mask!5927 newMap!16))))

(assert (=> d!11669 (= (getCurrentListMap!402 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) lt!23829 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)) lt!24444)))

(declare-fun bm!4515 () Bool)

(assert (=> bm!4515 (= call!4522 call!4521)))

(declare-fun b!59923 () Bool)

(assert (=> b!59923 (= e!39379 (validKeyInArray!0 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59924 () Bool)

(assert (=> b!59924 (= e!39376 e!39369)))

(declare-fun res!33189 () Bool)

(assert (=> b!59924 (= res!33189 call!4517)))

(assert (=> b!59924 (=> (not res!33189) (not e!39369))))

(declare-fun bm!4516 () Bool)

(assert (=> bm!4516 (= call!4521 call!4518)))

(declare-fun b!59925 () Bool)

(assert (=> b!59925 (= e!39368 call!4522)))

(declare-fun bm!4517 () Bool)

(assert (=> bm!4517 (= call!4516 call!4519)))

(declare-fun bm!4518 () Bool)

(assert (=> bm!4518 (= call!4518 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) lt!23829 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun b!59926 () Bool)

(declare-fun e!39373 () Bool)

(assert (=> b!59926 (= e!39373 (= (apply!66 lt!24444 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)) (get!1066 (select (arr!1782 (_values!2026 newMap!16)) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2043 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!59926 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2012 (_values!2026 newMap!16))))))

(assert (=> b!59926 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(declare-fun b!59927 () Bool)

(declare-fun lt!24440 () Unit!1551)

(assert (=> b!59927 (= e!39377 lt!24440)))

(declare-fun lt!24433 () ListLongMap!1363)

(assert (=> b!59927 (= lt!24433 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) lt!23829 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!24428 () (_ BitVec 64))

(assert (=> b!59927 (= lt!24428 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24426 () (_ BitVec 64))

(assert (=> b!59927 (= lt!24426 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24441 () Unit!1551)

(assert (=> b!59927 (= lt!24441 (addStillContains!42 lt!24433 lt!24428 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!24426))))

(assert (=> b!59927 (contains!682 (+!81 lt!24433 (tuple2!2023 lt!24428 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!24426)))

(declare-fun lt!24447 () Unit!1551)

(assert (=> b!59927 (= lt!24447 lt!24441)))

(declare-fun lt!24430 () ListLongMap!1363)

(assert (=> b!59927 (= lt!24430 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) lt!23829 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!24438 () (_ BitVec 64))

(assert (=> b!59927 (= lt!24438 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24443 () (_ BitVec 64))

(assert (=> b!59927 (= lt!24443 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24436 () Unit!1551)

(assert (=> b!59927 (= lt!24436 (addApplyDifferent!42 lt!24430 lt!24438 (minValue!1959 newMap!16) lt!24443))))

(assert (=> b!59927 (= (apply!66 (+!81 lt!24430 (tuple2!2023 lt!24438 (minValue!1959 newMap!16))) lt!24443) (apply!66 lt!24430 lt!24443))))

(declare-fun lt!24442 () Unit!1551)

(assert (=> b!59927 (= lt!24442 lt!24436)))

(declare-fun lt!24431 () ListLongMap!1363)

(assert (=> b!59927 (= lt!24431 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) lt!23829 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!24439 () (_ BitVec 64))

(assert (=> b!59927 (= lt!24439 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24427 () (_ BitVec 64))

(assert (=> b!59927 (= lt!24427 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24445 () Unit!1551)

(assert (=> b!59927 (= lt!24445 (addApplyDifferent!42 lt!24431 lt!24439 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!24427))))

(assert (=> b!59927 (= (apply!66 (+!81 lt!24431 (tuple2!2023 lt!24439 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!24427) (apply!66 lt!24431 lt!24427))))

(declare-fun lt!24434 () Unit!1551)

(assert (=> b!59927 (= lt!24434 lt!24445)))

(declare-fun lt!24437 () ListLongMap!1363)

(assert (=> b!59927 (= lt!24437 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) lt!23829 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!24435 () (_ BitVec 64))

(assert (=> b!59927 (= lt!24435 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24446 () (_ BitVec 64))

(assert (=> b!59927 (= lt!24446 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!59927 (= lt!24440 (addApplyDifferent!42 lt!24437 lt!24435 (minValue!1959 newMap!16) lt!24446))))

(assert (=> b!59927 (= (apply!66 (+!81 lt!24437 (tuple2!2023 lt!24435 (minValue!1959 newMap!16))) lt!24446) (apply!66 lt!24437 lt!24446))))

(declare-fun b!59928 () Bool)

(assert (=> b!59928 (= e!39371 e!39373)))

(declare-fun res!33185 () Bool)

(assert (=> b!59928 (=> (not res!33185) (not e!39373))))

(assert (=> b!59928 (= res!33185 (contains!682 lt!24444 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59928 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(declare-fun b!59929 () Bool)

(declare-fun res!33188 () Bool)

(assert (=> b!59929 (=> (not res!33188) (not e!39380))))

(assert (=> b!59929 (= res!33188 e!39376)))

(declare-fun c!7748 () Bool)

(assert (=> b!59929 (= c!7748 (not (= (bvand lt!23829 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!4519 () Bool)

(assert (=> bm!4519 (= call!4520 (contains!682 lt!24444 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59930 () Bool)

(assert (=> b!59930 (= e!39372 call!4516)))

(declare-fun b!59931 () Bool)

(assert (=> b!59931 (= e!39378 (= (apply!66 lt!24444 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1959 newMap!16)))))

(assert (= (and d!11669 c!7749) b!59914))

(assert (= (and d!11669 (not c!7749)) b!59920))

(assert (= (and b!59920 c!7752) b!59930))

(assert (= (and b!59920 (not c!7752)) b!59912))

(assert (= (and b!59912 c!7751) b!59911))

(assert (= (and b!59912 (not c!7751)) b!59925))

(assert (= (or b!59911 b!59925) bm!4515))

(assert (= (or b!59930 bm!4515) bm!4516))

(assert (= (or b!59930 b!59911) bm!4517))

(assert (= (or b!59914 bm!4516) bm!4518))

(assert (= (or b!59914 bm!4517) bm!4513))

(assert (= (and d!11669 res!33187) b!59915))

(assert (= (and d!11669 c!7747) b!59927))

(assert (= (and d!11669 (not c!7747)) b!59921))

(assert (= (and d!11669 res!33190) b!59922))

(assert (= (and b!59922 res!33186) b!59923))

(assert (= (and b!59922 (not res!33184)) b!59928))

(assert (= (and b!59928 res!33185) b!59926))

(assert (= (and b!59922 res!33183) b!59929))

(assert (= (and b!59929 c!7748) b!59924))

(assert (= (and b!59929 (not c!7748)) b!59918))

(assert (= (and b!59924 res!33189) b!59919))

(assert (= (or b!59924 b!59918) bm!4514))

(assert (= (and b!59929 res!33188) b!59917))

(assert (= (and b!59917 c!7750) b!59916))

(assert (= (and b!59917 (not c!7750)) b!59913))

(assert (= (and b!59916 res!33191) b!59931))

(assert (= (or b!59916 b!59913) bm!4519))

(declare-fun b_lambda!2635 () Bool)

(assert (=> (not b_lambda!2635) (not b!59926)))

(assert (=> b!59926 t!4775))

(declare-fun b_and!3635 () Bool)

(assert (= b_and!3631 (and (=> t!4775 result!2381) b_and!3635)))

(assert (=> b!59926 t!4777))

(declare-fun b_and!3637 () Bool)

(assert (= b_and!3633 (and (=> t!4777 result!2383) b_and!3637)))

(declare-fun m!52195 () Bool)

(assert (=> b!59914 m!52195))

(assert (=> bm!4518 m!50555))

(declare-fun m!52197 () Bool)

(assert (=> bm!4518 m!52197))

(declare-fun m!52199 () Bool)

(assert (=> bm!4513 m!52199))

(declare-fun m!52201 () Bool)

(assert (=> b!59919 m!52201))

(assert (=> b!59923 m!50803))

(assert (=> b!59923 m!50803))

(assert (=> b!59923 m!50805))

(declare-fun m!52203 () Bool)

(assert (=> bm!4514 m!52203))

(assert (=> b!59926 m!51033))

(assert (=> b!59926 m!50803))

(declare-fun m!52205 () Bool)

(assert (=> b!59926 m!52205))

(assert (=> b!59926 m!50813))

(assert (=> b!59926 m!51033))

(assert (=> b!59926 m!50813))

(assert (=> b!59926 m!51037))

(assert (=> b!59926 m!50803))

(declare-fun m!52207 () Bool)

(assert (=> b!59931 m!52207))

(assert (=> b!59928 m!50803))

(assert (=> b!59928 m!50803))

(declare-fun m!52209 () Bool)

(assert (=> b!59928 m!52209))

(assert (=> b!59915 m!50803))

(assert (=> b!59915 m!50803))

(assert (=> b!59915 m!50805))

(assert (=> d!11669 m!50771))

(declare-fun m!52211 () Bool)

(assert (=> bm!4519 m!52211))

(declare-fun m!52213 () Bool)

(assert (=> b!59927 m!52213))

(assert (=> b!59927 m!50555))

(declare-fun m!52215 () Bool)

(assert (=> b!59927 m!52215))

(declare-fun m!52217 () Bool)

(assert (=> b!59927 m!52217))

(declare-fun m!52219 () Bool)

(assert (=> b!59927 m!52219))

(assert (=> b!59927 m!52213))

(declare-fun m!52221 () Bool)

(assert (=> b!59927 m!52221))

(declare-fun m!52223 () Bool)

(assert (=> b!59927 m!52223))

(declare-fun m!52225 () Bool)

(assert (=> b!59927 m!52225))

(assert (=> b!59927 m!50555))

(assert (=> b!59927 m!52197))

(declare-fun m!52227 () Bool)

(assert (=> b!59927 m!52227))

(declare-fun m!52229 () Bool)

(assert (=> b!59927 m!52229))

(assert (=> b!59927 m!50555))

(declare-fun m!52231 () Bool)

(assert (=> b!59927 m!52231))

(assert (=> b!59927 m!50803))

(declare-fun m!52233 () Bool)

(assert (=> b!59927 m!52233))

(declare-fun m!52235 () Bool)

(assert (=> b!59927 m!52235))

(declare-fun m!52237 () Bool)

(assert (=> b!59927 m!52237))

(assert (=> b!59927 m!52227))

(declare-fun m!52239 () Bool)

(assert (=> b!59927 m!52239))

(assert (=> b!59927 m!52223))

(declare-fun m!52241 () Bool)

(assert (=> b!59927 m!52241))

(assert (=> b!59927 m!52233))

(assert (=> d!11281 d!11669))

(assert (=> d!11281 d!11523))

(assert (=> d!11301 d!11523))

(declare-fun c!7753 () Bool)

(declare-fun bm!4520 () Bool)

(declare-fun call!4523 () Bool)

(assert (=> bm!4520 (= call!4523 (arrayNoDuplicates!0 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!7753 (Cons!1427 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (ite c!7594 (Cons!1427 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7516 (Cons!1427 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) Nil!1428) Nil!1428)) (ite c!7516 (Cons!1427 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) Nil!1428) Nil!1428))) (ite c!7594 (Cons!1427 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7516 (Cons!1427 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) Nil!1428) Nil!1428)) (ite c!7516 (Cons!1427 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) Nil!1428) Nil!1428)))))))

(declare-fun b!59932 () Bool)

(declare-fun e!39383 () Bool)

(assert (=> b!59932 (= e!39383 (contains!683 (ite c!7594 (Cons!1427 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7516 (Cons!1427 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) Nil!1428) Nil!1428)) (ite c!7516 (Cons!1427 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) Nil!1428) Nil!1428)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun b!59933 () Bool)

(declare-fun e!39382 () Bool)

(assert (=> b!59933 (= e!39382 call!4523)))

(declare-fun b!59934 () Bool)

(assert (=> b!59934 (= e!39382 call!4523)))

(declare-fun b!59935 () Bool)

(declare-fun e!39384 () Bool)

(assert (=> b!59935 (= e!39384 e!39382)))

(assert (=> b!59935 (= c!7753 (validKeyInArray!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun d!11671 () Bool)

(declare-fun res!33194 () Bool)

(declare-fun e!39381 () Bool)

(assert (=> d!11671 (=> res!33194 e!39381)))

(assert (=> d!11671 (= res!33194 (bvsge (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992))))))))

(assert (=> d!11671 (= (arrayNoDuplicates!0 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!7594 (Cons!1427 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7516 (Cons!1427 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) Nil!1428) Nil!1428)) (ite c!7516 (Cons!1427 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) Nil!1428) Nil!1428))) e!39381)))

(declare-fun b!59936 () Bool)

(assert (=> b!59936 (= e!39381 e!39384)))

(declare-fun res!33193 () Bool)

(assert (=> b!59936 (=> (not res!33193) (not e!39384))))

(assert (=> b!59936 (= res!33193 (not e!39383))))

(declare-fun res!33192 () Bool)

(assert (=> b!59936 (=> (not res!33192) (not e!39383))))

(assert (=> b!59936 (= res!33192 (validKeyInArray!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(assert (= (and d!11671 (not res!33194)) b!59936))

(assert (= (and b!59936 res!33192) b!59932))

(assert (= (and b!59936 res!33193) b!59935))

(assert (= (and b!59935 c!7753) b!59933))

(assert (= (and b!59935 (not c!7753)) b!59934))

(assert (= (or b!59933 b!59934) bm!4520))

(declare-fun m!52243 () Bool)

(assert (=> bm!4520 m!52243))

(declare-fun m!52245 () Bool)

(assert (=> bm!4520 m!52245))

(assert (=> b!59932 m!52243))

(assert (=> b!59932 m!52243))

(declare-fun m!52247 () Bool)

(assert (=> b!59932 m!52247))

(assert (=> b!59935 m!52243))

(assert (=> b!59935 m!52243))

(declare-fun m!52249 () Bool)

(assert (=> b!59935 m!52249))

(assert (=> b!59936 m!52243))

(assert (=> b!59936 m!52243))

(assert (=> b!59936 m!52249))

(assert (=> bm!4456 d!11671))

(assert (=> d!11353 d!11523))

(assert (=> b!59338 d!11263))

(declare-fun d!11673 () Bool)

(assert (=> d!11673 (= (apply!66 lt!24069 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1069 (getValueByKey!124 (toList!697 lt!24069) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2600 () Bool)

(assert (= bs!2600 d!11673))

(assert (=> bs!2600 m!51619))

(assert (=> bs!2600 m!51619))

(declare-fun m!52251 () Bool)

(assert (=> bs!2600 m!52251))

(assert (=> b!59309 d!11673))

(declare-fun d!11675 () Bool)

(declare-fun e!39385 () Bool)

(assert (=> d!11675 e!39385))

(declare-fun res!33195 () Bool)

(assert (=> d!11675 (=> res!33195 e!39385)))

(declare-fun lt!24450 () Bool)

(assert (=> d!11675 (= res!33195 (not lt!24450))))

(declare-fun lt!24449 () Bool)

(assert (=> d!11675 (= lt!24450 lt!24449)))

(declare-fun lt!24451 () Unit!1551)

(declare-fun e!39386 () Unit!1551)

(assert (=> d!11675 (= lt!24451 e!39386)))

(declare-fun c!7754 () Bool)

(assert (=> d!11675 (= c!7754 lt!24449)))

(assert (=> d!11675 (= lt!24449 (containsKey!128 (toList!697 lt!24034) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11675 (= (contains!682 lt!24034 #b0000000000000000000000000000000000000000000000000000000000000000) lt!24450)))

(declare-fun b!59937 () Bool)

(declare-fun lt!24448 () Unit!1551)

(assert (=> b!59937 (= e!39386 lt!24448)))

(assert (=> b!59937 (= lt!24448 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 lt!24034) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59937 (isDefined!77 (getValueByKey!124 (toList!697 lt!24034) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59938 () Bool)

(declare-fun Unit!1595 () Unit!1551)

(assert (=> b!59938 (= e!39386 Unit!1595)))

(declare-fun b!59939 () Bool)

(assert (=> b!59939 (= e!39385 (isDefined!77 (getValueByKey!124 (toList!697 lt!24034) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11675 c!7754) b!59937))

(assert (= (and d!11675 (not c!7754)) b!59938))

(assert (= (and d!11675 (not res!33195)) b!59939))

(declare-fun m!52253 () Bool)

(assert (=> d!11675 m!52253))

(declare-fun m!52255 () Bool)

(assert (=> b!59937 m!52255))

(assert (=> b!59937 m!51961))

(assert (=> b!59937 m!51961))

(declare-fun m!52257 () Bool)

(assert (=> b!59937 m!52257))

(assert (=> b!59939 m!51961))

(assert (=> b!59939 m!51961))

(assert (=> b!59939 m!52257))

(assert (=> bm!4432 d!11675))

(assert (=> b!59376 d!11375))

(declare-fun d!11677 () Bool)

(assert (=> d!11677 (arrayContainsKey!0 (_keys!3667 newMap!16) lt!24010 #b00000000000000000000000000000000)))

(declare-fun lt!24454 () Unit!1551)

(declare-fun choose!13 (array!3721 (_ BitVec 64) (_ BitVec 32)) Unit!1551)

(assert (=> d!11677 (= lt!24454 (choose!13 (_keys!3667 newMap!16) lt!24010 #b00000000000000000000000000000000))))

(assert (=> d!11677 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (=> d!11677 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3667 newMap!16) lt!24010 #b00000000000000000000000000000000) lt!24454)))

(declare-fun bs!2601 () Bool)

(assert (= bs!2601 d!11677))

(assert (=> bs!2601 m!50995))

(declare-fun m!52259 () Bool)

(assert (=> bs!2601 m!52259))

(assert (=> b!59228 d!11677))

(declare-fun d!11679 () Bool)

(declare-fun res!33196 () Bool)

(declare-fun e!39387 () Bool)

(assert (=> d!11679 (=> res!33196 e!39387)))

(assert (=> d!11679 (= res!33196 (= (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000) lt!24010))))

(assert (=> d!11679 (= (arrayContainsKey!0 (_keys!3667 newMap!16) lt!24010 #b00000000000000000000000000000000) e!39387)))

(declare-fun b!59940 () Bool)

(declare-fun e!39388 () Bool)

(assert (=> b!59940 (= e!39387 e!39388)))

(declare-fun res!33197 () Bool)

(assert (=> b!59940 (=> (not res!33197) (not e!39388))))

(assert (=> b!59940 (= res!33197 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2011 (_keys!3667 newMap!16))))))

(declare-fun b!59941 () Bool)

(assert (=> b!59941 (= e!39388 (arrayContainsKey!0 (_keys!3667 newMap!16) lt!24010 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!11679 (not res!33196)) b!59940))

(assert (= (and b!59940 res!33197) b!59941))

(assert (=> d!11679 m!50803))

(declare-fun m!52261 () Bool)

(assert (=> b!59941 m!52261))

(assert (=> b!59228 d!11679))

(declare-fun b!59942 () Bool)

(declare-fun e!39390 () SeekEntryResult!227)

(assert (=> b!59942 (= e!39390 Undefined!227)))

(declare-fun b!59943 () Bool)

(declare-fun c!7756 () Bool)

(declare-fun lt!24455 () (_ BitVec 64))

(assert (=> b!59943 (= c!7756 (= lt!24455 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!39389 () SeekEntryResult!227)

(declare-fun e!39391 () SeekEntryResult!227)

(assert (=> b!59943 (= e!39389 e!39391)))

(declare-fun b!59944 () Bool)

(declare-fun lt!24457 () SeekEntryResult!227)

(assert (=> b!59944 (= e!39389 (Found!227 (index!3033 lt!24457)))))

(declare-fun b!59945 () Bool)

(assert (=> b!59945 (= e!39390 e!39389)))

(assert (=> b!59945 (= lt!24455 (select (arr!1781 (_keys!3667 newMap!16)) (index!3033 lt!24457)))))

(declare-fun c!7757 () Bool)

(assert (=> b!59945 (= c!7757 (= lt!24455 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun d!11681 () Bool)

(declare-fun lt!24456 () SeekEntryResult!227)

(assert (=> d!11681 (and (or ((_ is Undefined!227) lt!24456) (not ((_ is Found!227) lt!24456)) (and (bvsge (index!3032 lt!24456) #b00000000000000000000000000000000) (bvslt (index!3032 lt!24456) (size!2011 (_keys!3667 newMap!16))))) (or ((_ is Undefined!227) lt!24456) ((_ is Found!227) lt!24456) (not ((_ is MissingZero!227) lt!24456)) (and (bvsge (index!3031 lt!24456) #b00000000000000000000000000000000) (bvslt (index!3031 lt!24456) (size!2011 (_keys!3667 newMap!16))))) (or ((_ is Undefined!227) lt!24456) ((_ is Found!227) lt!24456) ((_ is MissingZero!227) lt!24456) (not ((_ is MissingVacant!227) lt!24456)) (and (bvsge (index!3034 lt!24456) #b00000000000000000000000000000000) (bvslt (index!3034 lt!24456) (size!2011 (_keys!3667 newMap!16))))) (or ((_ is Undefined!227) lt!24456) (ite ((_ is Found!227) lt!24456) (= (select (arr!1781 (_keys!3667 newMap!16)) (index!3032 lt!24456)) (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)) (ite ((_ is MissingZero!227) lt!24456) (= (select (arr!1781 (_keys!3667 newMap!16)) (index!3031 lt!24456)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!227) lt!24456) (= (select (arr!1781 (_keys!3667 newMap!16)) (index!3034 lt!24456)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11681 (= lt!24456 e!39390)))

(declare-fun c!7755 () Bool)

(assert (=> d!11681 (= c!7755 (and ((_ is Intermediate!227) lt!24457) (undefined!1039 lt!24457)))))

(assert (=> d!11681 (= lt!24457 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000) (mask!5927 newMap!16)) (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000) (_keys!3667 newMap!16) (mask!5927 newMap!16)))))

(assert (=> d!11681 (validMask!0 (mask!5927 newMap!16))))

(assert (=> d!11681 (= (seekEntryOrOpen!0 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000) (_keys!3667 newMap!16) (mask!5927 newMap!16)) lt!24456)))

(declare-fun b!59946 () Bool)

(assert (=> b!59946 (= e!39391 (seekKeyOrZeroReturnVacant!0 (x!10003 lt!24457) (index!3033 lt!24457) (index!3033 lt!24457) (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000) (_keys!3667 newMap!16) (mask!5927 newMap!16)))))

(declare-fun b!59947 () Bool)

(assert (=> b!59947 (= e!39391 (MissingZero!227 (index!3033 lt!24457)))))

(assert (= (and d!11681 c!7755) b!59942))

(assert (= (and d!11681 (not c!7755)) b!59945))

(assert (= (and b!59945 c!7757) b!59944))

(assert (= (and b!59945 (not c!7757)) b!59943))

(assert (= (and b!59943 c!7756) b!59947))

(assert (= (and b!59943 (not c!7756)) b!59946))

(declare-fun m!52263 () Bool)

(assert (=> b!59945 m!52263))

(assert (=> d!11681 m!50803))

(declare-fun m!52265 () Bool)

(assert (=> d!11681 m!52265))

(declare-fun m!52267 () Bool)

(assert (=> d!11681 m!52267))

(declare-fun m!52269 () Bool)

(assert (=> d!11681 m!52269))

(declare-fun m!52271 () Bool)

(assert (=> d!11681 m!52271))

(assert (=> d!11681 m!52265))

(assert (=> d!11681 m!50803))

(declare-fun m!52273 () Bool)

(assert (=> d!11681 m!52273))

(assert (=> d!11681 m!50771))

(assert (=> b!59946 m!50803))

(declare-fun m!52275 () Bool)

(assert (=> b!59946 m!52275))

(assert (=> b!59228 d!11681))

(declare-fun d!11683 () Bool)

(assert (=> d!11683 (= (get!1068 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59203 d!11683))

(declare-fun d!11685 () Bool)

(declare-fun res!33198 () Bool)

(declare-fun e!39392 () Bool)

(assert (=> d!11685 (=> (not res!33198) (not e!39392))))

(assert (=> d!11685 (= res!33198 (simpleValid!42 (_2!1021 lt!23949)))))

(assert (=> d!11685 (= (valid!254 (_2!1021 lt!23949)) e!39392)))

(declare-fun b!59948 () Bool)

(declare-fun res!33199 () Bool)

(assert (=> b!59948 (=> (not res!33199) (not e!39392))))

(assert (=> b!59948 (= res!33199 (= (arrayCountValidKeys!0 (_keys!3667 (_2!1021 lt!23949)) #b00000000000000000000000000000000 (size!2011 (_keys!3667 (_2!1021 lt!23949)))) (_size!358 (_2!1021 lt!23949))))))

(declare-fun b!59949 () Bool)

(declare-fun res!33200 () Bool)

(assert (=> b!59949 (=> (not res!33200) (not e!39392))))

(assert (=> b!59949 (= res!33200 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3667 (_2!1021 lt!23949)) (mask!5927 (_2!1021 lt!23949))))))

(declare-fun b!59950 () Bool)

(assert (=> b!59950 (= e!39392 (arrayNoDuplicates!0 (_keys!3667 (_2!1021 lt!23949)) #b00000000000000000000000000000000 Nil!1428))))

(assert (= (and d!11685 res!33198) b!59948))

(assert (= (and b!59948 res!33199) b!59949))

(assert (= (and b!59949 res!33200) b!59950))

(declare-fun m!52277 () Bool)

(assert (=> d!11685 m!52277))

(declare-fun m!52279 () Bool)

(assert (=> b!59948 m!52279))

(declare-fun m!52281 () Bool)

(assert (=> b!59949 m!52281))

(declare-fun m!52283 () Bool)

(assert (=> b!59950 m!52283))

(assert (=> b!59165 d!11685))

(declare-fun b!59951 () Bool)

(declare-fun e!39399 () Bool)

(declare-fun lt!24463 () ListLongMap!1363)

(assert (=> b!59951 (= e!39399 (isEmpty!294 lt!24463))))

(declare-fun bm!4521 () Bool)

(declare-fun call!4524 () ListLongMap!1363)

(assert (=> bm!4521 (= call!4524 (getCurrentListMapNoExtraKeys!44 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (_values!2026 (v!2383 (underlying!226 thiss!992))) (mask!5927 (v!2383 (underlying!226 thiss!992))) (extraKeys!1930 (v!2383 (underlying!226 thiss!992))) (zeroValue!1959 (v!2383 (underlying!226 thiss!992))) (minValue!1959 (v!2383 (underlying!226 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2043 (v!2383 (underlying!226 thiss!992)))))))

(declare-fun b!59952 () Bool)

(declare-fun res!33203 () Bool)

(declare-fun e!39395 () Bool)

(assert (=> b!59952 (=> (not res!33203) (not e!39395))))

(assert (=> b!59952 (= res!33203 (not (contains!682 lt!24463 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!59954 () Bool)

(declare-fun e!39396 () Bool)

(declare-fun e!39393 () Bool)

(assert (=> b!59954 (= e!39396 e!39393)))

(assert (=> b!59954 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992))))))))

(declare-fun res!33204 () Bool)

(assert (=> b!59954 (= res!33204 (contains!682 lt!24463 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!59954 (=> (not res!33204) (not e!39393))))

(declare-fun b!59955 () Bool)

(declare-fun e!39394 () ListLongMap!1363)

(declare-fun e!39397 () ListLongMap!1363)

(assert (=> b!59955 (= e!39394 e!39397)))

(declare-fun c!7758 () Bool)

(assert (=> b!59955 (= c!7758 (validKeyInArray!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(declare-fun b!59956 () Bool)

(assert (=> b!59956 (= e!39397 call!4524)))

(declare-fun b!59957 () Bool)

(assert (=> b!59957 (= e!39394 (ListLongMap!1364 Nil!1427))))

(declare-fun b!59958 () Bool)

(assert (=> b!59958 (= e!39395 e!39396)))

(declare-fun c!7759 () Bool)

(declare-fun e!39398 () Bool)

(assert (=> b!59958 (= c!7759 e!39398)))

(declare-fun res!33202 () Bool)

(assert (=> b!59958 (=> (not res!33202) (not e!39398))))

(assert (=> b!59958 (= res!33202 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992))))))))

(declare-fun b!59959 () Bool)

(assert (=> b!59959 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992))))))))

(assert (=> b!59959 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2012 (_values!2026 (v!2383 (underlying!226 thiss!992))))))))

(assert (=> b!59959 (= e!39393 (= (apply!66 lt!24463 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!59960 () Bool)

(declare-fun lt!24458 () Unit!1551)

(declare-fun lt!24460 () Unit!1551)

(assert (=> b!59960 (= lt!24458 lt!24460)))

(declare-fun lt!24464 () (_ BitVec 64))

(declare-fun lt!24459 () (_ BitVec 64))

(declare-fun lt!24461 () ListLongMap!1363)

(declare-fun lt!24462 () V!2843)

(assert (=> b!59960 (not (contains!682 (+!81 lt!24461 (tuple2!2023 lt!24464 lt!24462)) lt!24459))))

(assert (=> b!59960 (= lt!24460 (addStillNotContains!15 lt!24461 lt!24464 lt!24462 lt!24459))))

(assert (=> b!59960 (= lt!24459 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!59960 (= lt!24462 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!59960 (= lt!24464 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (=> b!59960 (= lt!24461 call!4524)))

(assert (=> b!59960 (= e!39397 (+!81 call!4524 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun d!11687 () Bool)

(assert (=> d!11687 e!39395))

(declare-fun res!33201 () Bool)

(assert (=> d!11687 (=> (not res!33201) (not e!39395))))

(assert (=> d!11687 (= res!33201 (not (contains!682 lt!24463 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!11687 (= lt!24463 e!39394)))

(declare-fun c!7760 () Bool)

(assert (=> d!11687 (= c!7760 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992))))))))

(assert (=> d!11687 (validMask!0 (mask!5927 (v!2383 (underlying!226 thiss!992))))))

(assert (=> d!11687 (= (getCurrentListMapNoExtraKeys!44 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (_values!2026 (v!2383 (underlying!226 thiss!992))) (mask!5927 (v!2383 (underlying!226 thiss!992))) (extraKeys!1930 (v!2383 (underlying!226 thiss!992))) (zeroValue!1959 (v!2383 (underlying!226 thiss!992))) (minValue!1959 (v!2383 (underlying!226 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2043 (v!2383 (underlying!226 thiss!992)))) lt!24463)))

(declare-fun b!59953 () Bool)

(assert (=> b!59953 (= e!39396 e!39399)))

(declare-fun c!7761 () Bool)

(assert (=> b!59953 (= c!7761 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992))))))))

(declare-fun b!59961 () Bool)

(assert (=> b!59961 (= e!39398 (validKeyInArray!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!59961 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))

(declare-fun b!59962 () Bool)

(assert (=> b!59962 (= e!39399 (= lt!24463 (getCurrentListMapNoExtraKeys!44 (_keys!3667 (v!2383 (underlying!226 thiss!992))) (_values!2026 (v!2383 (underlying!226 thiss!992))) (mask!5927 (v!2383 (underlying!226 thiss!992))) (extraKeys!1930 (v!2383 (underlying!226 thiss!992))) (zeroValue!1959 (v!2383 (underlying!226 thiss!992))) (minValue!1959 (v!2383 (underlying!226 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))))))))

(assert (= (and d!11687 c!7760) b!59957))

(assert (= (and d!11687 (not c!7760)) b!59955))

(assert (= (and b!59955 c!7758) b!59960))

(assert (= (and b!59955 (not c!7758)) b!59956))

(assert (= (or b!59960 b!59956) bm!4521))

(assert (= (and d!11687 res!33201) b!59952))

(assert (= (and b!59952 res!33203) b!59958))

(assert (= (and b!59958 res!33202) b!59961))

(assert (= (and b!59958 c!7759) b!59954))

(assert (= (and b!59958 (not c!7759)) b!59953))

(assert (= (and b!59954 res!33204) b!59959))

(assert (= (and b!59953 c!7761) b!59962))

(assert (= (and b!59953 (not c!7761)) b!59951))

(declare-fun b_lambda!2637 () Bool)

(assert (=> (not b_lambda!2637) (not b!59959)))

(assert (=> b!59959 t!4765))

(declare-fun b_and!3639 () Bool)

(assert (= b_and!3635 (and (=> t!4765 result!2367) b_and!3639)))

(assert (=> b!59959 t!4767))

(declare-fun b_and!3641 () Bool)

(assert (= b_and!3637 (and (=> t!4767 result!2371) b_and!3641)))

(declare-fun b_lambda!2639 () Bool)

(assert (=> (not b_lambda!2639) (not b!59960)))

(assert (=> b!59960 t!4765))

(declare-fun b_and!3643 () Bool)

(assert (= b_and!3639 (and (=> t!4765 result!2367) b_and!3643)))

(assert (=> b!59960 t!4767))

(declare-fun b_and!3645 () Bool)

(assert (= b_and!3641 (and (=> t!4767 result!2371) b_and!3645)))

(declare-fun m!52285 () Bool)

(assert (=> b!59960 m!52285))

(declare-fun m!52287 () Bool)

(assert (=> b!59960 m!52287))

(assert (=> b!59960 m!50553))

(declare-fun m!52289 () Bool)

(assert (=> b!59960 m!52289))

(assert (=> b!59960 m!50553))

(declare-fun m!52291 () Bool)

(assert (=> b!59960 m!52291))

(declare-fun m!52293 () Bool)

(assert (=> b!59960 m!52293))

(assert (=> b!59960 m!50931))

(assert (=> b!59960 m!52293))

(declare-fun m!52295 () Bool)

(assert (=> b!59960 m!52295))

(assert (=> b!59960 m!52287))

(declare-fun m!52297 () Bool)

(assert (=> b!59962 m!52297))

(assert (=> b!59954 m!50931))

(assert (=> b!59954 m!50931))

(declare-fun m!52299 () Bool)

(assert (=> b!59954 m!52299))

(declare-fun m!52301 () Bool)

(assert (=> b!59952 m!52301))

(assert (=> b!59955 m!50931))

(assert (=> b!59955 m!50931))

(declare-fun m!52303 () Bool)

(assert (=> b!59955 m!52303))

(declare-fun m!52305 () Bool)

(assert (=> b!59951 m!52305))

(assert (=> bm!4521 m!52297))

(assert (=> b!59961 m!50931))

(assert (=> b!59961 m!50931))

(assert (=> b!59961 m!52303))

(declare-fun m!52307 () Bool)

(assert (=> d!11687 m!52307))

(assert (=> d!11687 m!50565))

(assert (=> b!59959 m!50931))

(declare-fun m!52309 () Bool)

(assert (=> b!59959 m!52309))

(assert (=> b!59959 m!52287))

(assert (=> b!59959 m!50553))

(assert (=> b!59959 m!52289))

(assert (=> b!59959 m!50553))

(assert (=> b!59959 m!50931))

(assert (=> b!59959 m!52287))

(assert (=> bm!4447 d!11687))

(declare-fun d!11689 () Bool)

(assert (=> d!11689 (= (apply!66 lt!24131 lt!24127) (get!1069 (getValueByKey!124 (toList!697 lt!24131) lt!24127)))))

(declare-fun bs!2602 () Bool)

(assert (= bs!2602 d!11689))

(declare-fun m!52311 () Bool)

(assert (=> bs!2602 m!52311))

(assert (=> bs!2602 m!52311))

(declare-fun m!52313 () Bool)

(assert (=> bs!2602 m!52313))

(assert (=> b!59388 d!11689))

(declare-fun d!11691 () Bool)

(declare-fun e!39400 () Bool)

(assert (=> d!11691 e!39400))

(declare-fun res!33205 () Bool)

(assert (=> d!11691 (=> (not res!33205) (not e!39400))))

(declare-fun lt!24466 () ListLongMap!1363)

(assert (=> d!11691 (= res!33205 (contains!682 lt!24466 (_1!1022 (tuple2!2023 lt!24139 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16))))))))

(declare-fun lt!24468 () List!1430)

(assert (=> d!11691 (= lt!24466 (ListLongMap!1364 lt!24468))))

(declare-fun lt!24465 () Unit!1551)

(declare-fun lt!24467 () Unit!1551)

(assert (=> d!11691 (= lt!24465 lt!24467)))

(assert (=> d!11691 (= (getValueByKey!124 lt!24468 (_1!1022 (tuple2!2023 lt!24139 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16))))) (Some!129 (_2!1022 (tuple2!2023 lt!24139 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16))))))))

(assert (=> d!11691 (= lt!24467 (lemmaContainsTupThenGetReturnValue!41 lt!24468 (_1!1022 (tuple2!2023 lt!24139 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16)))) (_2!1022 (tuple2!2023 lt!24139 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16))))))))

(assert (=> d!11691 (= lt!24468 (insertStrictlySorted!44 (toList!697 lt!24131) (_1!1022 (tuple2!2023 lt!24139 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16)))) (_2!1022 (tuple2!2023 lt!24139 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16))))))))

(assert (=> d!11691 (= (+!81 lt!24131 (tuple2!2023 lt!24139 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16)))) lt!24466)))

(declare-fun b!59963 () Bool)

(declare-fun res!33206 () Bool)

(assert (=> b!59963 (=> (not res!33206) (not e!39400))))

(assert (=> b!59963 (= res!33206 (= (getValueByKey!124 (toList!697 lt!24466) (_1!1022 (tuple2!2023 lt!24139 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16))))) (Some!129 (_2!1022 (tuple2!2023 lt!24139 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16)))))))))

(declare-fun b!59964 () Bool)

(assert (=> b!59964 (= e!39400 (contains!684 (toList!697 lt!24466) (tuple2!2023 lt!24139 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16)))))))

(assert (= (and d!11691 res!33205) b!59963))

(assert (= (and b!59963 res!33206) b!59964))

(declare-fun m!52315 () Bool)

(assert (=> d!11691 m!52315))

(declare-fun m!52317 () Bool)

(assert (=> d!11691 m!52317))

(declare-fun m!52319 () Bool)

(assert (=> d!11691 m!52319))

(declare-fun m!52321 () Bool)

(assert (=> d!11691 m!52321))

(declare-fun m!52323 () Bool)

(assert (=> b!59963 m!52323))

(declare-fun m!52325 () Bool)

(assert (=> b!59964 m!52325))

(assert (=> b!59388 d!11691))

(declare-fun d!11693 () Bool)

(assert (=> d!11693 (= (apply!66 lt!24137 lt!24146) (get!1069 (getValueByKey!124 (toList!697 lt!24137) lt!24146)))))

(declare-fun bs!2603 () Bool)

(assert (= bs!2603 d!11693))

(declare-fun m!52327 () Bool)

(assert (=> bs!2603 m!52327))

(assert (=> bs!2603 m!52327))

(declare-fun m!52329 () Bool)

(assert (=> bs!2603 m!52329))

(assert (=> b!59388 d!11693))

(declare-fun d!11695 () Bool)

(assert (=> d!11695 (= (apply!66 (+!81 lt!24131 (tuple2!2023 lt!24139 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16)))) lt!24127) (get!1069 (getValueByKey!124 (toList!697 (+!81 lt!24131 (tuple2!2023 lt!24139 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16))))) lt!24127)))))

(declare-fun bs!2604 () Bool)

(assert (= bs!2604 d!11695))

(declare-fun m!52331 () Bool)

(assert (=> bs!2604 m!52331))

(assert (=> bs!2604 m!52331))

(declare-fun m!52333 () Bool)

(assert (=> bs!2604 m!52333))

(assert (=> b!59388 d!11695))

(declare-fun d!11697 () Bool)

(declare-fun e!39401 () Bool)

(assert (=> d!11697 e!39401))

(declare-fun res!33207 () Bool)

(assert (=> d!11697 (=> res!33207 e!39401)))

(declare-fun lt!24471 () Bool)

(assert (=> d!11697 (= res!33207 (not lt!24471))))

(declare-fun lt!24470 () Bool)

(assert (=> d!11697 (= lt!24471 lt!24470)))

(declare-fun lt!24472 () Unit!1551)

(declare-fun e!39402 () Unit!1551)

(assert (=> d!11697 (= lt!24472 e!39402)))

(declare-fun c!7762 () Bool)

(assert (=> d!11697 (= c!7762 lt!24470)))

(assert (=> d!11697 (= lt!24470 (containsKey!128 (toList!697 (+!81 lt!24133 (tuple2!2023 lt!24128 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16))))) lt!24126))))

(assert (=> d!11697 (= (contains!682 (+!81 lt!24133 (tuple2!2023 lt!24128 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16)))) lt!24126) lt!24471)))

(declare-fun b!59965 () Bool)

(declare-fun lt!24469 () Unit!1551)

(assert (=> b!59965 (= e!39402 lt!24469)))

(assert (=> b!59965 (= lt!24469 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 (+!81 lt!24133 (tuple2!2023 lt!24128 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16))))) lt!24126))))

(assert (=> b!59965 (isDefined!77 (getValueByKey!124 (toList!697 (+!81 lt!24133 (tuple2!2023 lt!24128 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16))))) lt!24126))))

(declare-fun b!59966 () Bool)

(declare-fun Unit!1596 () Unit!1551)

(assert (=> b!59966 (= e!39402 Unit!1596)))

(declare-fun b!59967 () Bool)

(assert (=> b!59967 (= e!39401 (isDefined!77 (getValueByKey!124 (toList!697 (+!81 lt!24133 (tuple2!2023 lt!24128 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16))))) lt!24126)))))

(assert (= (and d!11697 c!7762) b!59965))

(assert (= (and d!11697 (not c!7762)) b!59966))

(assert (= (and d!11697 (not res!33207)) b!59967))

(declare-fun m!52335 () Bool)

(assert (=> d!11697 m!52335))

(declare-fun m!52337 () Bool)

(assert (=> b!59965 m!52337))

(declare-fun m!52339 () Bool)

(assert (=> b!59965 m!52339))

(assert (=> b!59965 m!52339))

(declare-fun m!52341 () Bool)

(assert (=> b!59965 m!52341))

(assert (=> b!59967 m!52339))

(assert (=> b!59967 m!52339))

(assert (=> b!59967 m!52341))

(assert (=> b!59388 d!11697))

(declare-fun d!11699 () Bool)

(declare-fun e!39403 () Bool)

(assert (=> d!11699 e!39403))

(declare-fun res!33208 () Bool)

(assert (=> d!11699 (=> (not res!33208) (not e!39403))))

(declare-fun lt!24474 () ListLongMap!1363)

(assert (=> d!11699 (= res!33208 (contains!682 lt!24474 (_1!1022 (tuple2!2023 lt!24128 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16))))))))

(declare-fun lt!24476 () List!1430)

(assert (=> d!11699 (= lt!24474 (ListLongMap!1364 lt!24476))))

(declare-fun lt!24473 () Unit!1551)

(declare-fun lt!24475 () Unit!1551)

(assert (=> d!11699 (= lt!24473 lt!24475)))

(assert (=> d!11699 (= (getValueByKey!124 lt!24476 (_1!1022 (tuple2!2023 lt!24128 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16))))) (Some!129 (_2!1022 (tuple2!2023 lt!24128 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16))))))))

(assert (=> d!11699 (= lt!24475 (lemmaContainsTupThenGetReturnValue!41 lt!24476 (_1!1022 (tuple2!2023 lt!24128 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16)))) (_2!1022 (tuple2!2023 lt!24128 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16))))))))

(assert (=> d!11699 (= lt!24476 (insertStrictlySorted!44 (toList!697 lt!24133) (_1!1022 (tuple2!2023 lt!24128 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16)))) (_2!1022 (tuple2!2023 lt!24128 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16))))))))

(assert (=> d!11699 (= (+!81 lt!24133 (tuple2!2023 lt!24128 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16)))) lt!24474)))

(declare-fun b!59968 () Bool)

(declare-fun res!33209 () Bool)

(assert (=> b!59968 (=> (not res!33209) (not e!39403))))

(assert (=> b!59968 (= res!33209 (= (getValueByKey!124 (toList!697 lt!24474) (_1!1022 (tuple2!2023 lt!24128 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16))))) (Some!129 (_2!1022 (tuple2!2023 lt!24128 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16)))))))))

(declare-fun b!59969 () Bool)

(assert (=> b!59969 (= e!39403 (contains!684 (toList!697 lt!24474) (tuple2!2023 lt!24128 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16)))))))

(assert (= (and d!11699 res!33208) b!59968))

(assert (= (and b!59968 res!33209) b!59969))

(declare-fun m!52343 () Bool)

(assert (=> d!11699 m!52343))

(declare-fun m!52345 () Bool)

(assert (=> d!11699 m!52345))

(declare-fun m!52347 () Bool)

(assert (=> d!11699 m!52347))

(declare-fun m!52349 () Bool)

(assert (=> d!11699 m!52349))

(declare-fun m!52351 () Bool)

(assert (=> b!59968 m!52351))

(declare-fun m!52353 () Bool)

(assert (=> b!59969 m!52353))

(assert (=> b!59388 d!11699))

(declare-fun d!11701 () Bool)

(assert (=> d!11701 (= (apply!66 (+!81 lt!24130 (tuple2!2023 lt!24138 (minValue!1959 newMap!16))) lt!24143) (get!1069 (getValueByKey!124 (toList!697 (+!81 lt!24130 (tuple2!2023 lt!24138 (minValue!1959 newMap!16)))) lt!24143)))))

(declare-fun bs!2605 () Bool)

(assert (= bs!2605 d!11701))

(declare-fun m!52355 () Bool)

(assert (=> bs!2605 m!52355))

(assert (=> bs!2605 m!52355))

(declare-fun m!52357 () Bool)

(assert (=> bs!2605 m!52357))

(assert (=> b!59388 d!11701))

(declare-fun d!11703 () Bool)

(assert (=> d!11703 (= (apply!66 (+!81 lt!24131 (tuple2!2023 lt!24139 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16)))) lt!24127) (apply!66 lt!24131 lt!24127))))

(declare-fun lt!24477 () Unit!1551)

(assert (=> d!11703 (= lt!24477 (choose!307 lt!24131 lt!24139 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16)) lt!24127))))

(declare-fun e!39404 () Bool)

(assert (=> d!11703 e!39404))

(declare-fun res!33210 () Bool)

(assert (=> d!11703 (=> (not res!33210) (not e!39404))))

(assert (=> d!11703 (= res!33210 (contains!682 lt!24131 lt!24127))))

(assert (=> d!11703 (= (addApplyDifferent!42 lt!24131 lt!24139 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16)) lt!24127) lt!24477)))

(declare-fun b!59970 () Bool)

(assert (=> b!59970 (= e!39404 (not (= lt!24127 lt!24139)))))

(assert (= (and d!11703 res!33210) b!59970))

(assert (=> d!11703 m!51319))

(assert (=> d!11703 m!51315))

(assert (=> d!11703 m!51317))

(declare-fun m!52359 () Bool)

(assert (=> d!11703 m!52359))

(assert (=> d!11703 m!51315))

(declare-fun m!52361 () Bool)

(assert (=> d!11703 m!52361))

(assert (=> b!59388 d!11703))

(declare-fun d!11705 () Bool)

(assert (=> d!11705 (= (apply!66 (+!81 lt!24137 (tuple2!2023 lt!24135 (minValue!1959 newMap!16))) lt!24146) (apply!66 lt!24137 lt!24146))))

(declare-fun lt!24478 () Unit!1551)

(assert (=> d!11705 (= lt!24478 (choose!307 lt!24137 lt!24135 (minValue!1959 newMap!16) lt!24146))))

(declare-fun e!39405 () Bool)

(assert (=> d!11705 e!39405))

(declare-fun res!33211 () Bool)

(assert (=> d!11705 (=> (not res!33211) (not e!39405))))

(assert (=> d!11705 (= res!33211 (contains!682 lt!24137 lt!24146))))

(assert (=> d!11705 (= (addApplyDifferent!42 lt!24137 lt!24135 (minValue!1959 newMap!16) lt!24146) lt!24478)))

(declare-fun b!59971 () Bool)

(assert (=> b!59971 (= e!39405 (not (= lt!24146 lt!24135)))))

(assert (= (and d!11705 res!33211) b!59971))

(assert (=> d!11705 m!51301))

(assert (=> d!11705 m!51309))

(assert (=> d!11705 m!51311))

(declare-fun m!52363 () Bool)

(assert (=> d!11705 m!52363))

(assert (=> d!11705 m!51309))

(declare-fun m!52365 () Bool)

(assert (=> d!11705 m!52365))

(assert (=> b!59388 d!11705))

(declare-fun d!11707 () Bool)

(assert (=> d!11707 (= (apply!66 (+!81 lt!24130 (tuple2!2023 lt!24138 (minValue!1959 newMap!16))) lt!24143) (apply!66 lt!24130 lt!24143))))

(declare-fun lt!24479 () Unit!1551)

(assert (=> d!11707 (= lt!24479 (choose!307 lt!24130 lt!24138 (minValue!1959 newMap!16) lt!24143))))

(declare-fun e!39406 () Bool)

(assert (=> d!11707 e!39406))

(declare-fun res!33212 () Bool)

(assert (=> d!11707 (=> (not res!33212) (not e!39406))))

(assert (=> d!11707 (= res!33212 (contains!682 lt!24130 lt!24143))))

(assert (=> d!11707 (= (addApplyDifferent!42 lt!24130 lt!24138 (minValue!1959 newMap!16) lt!24143) lt!24479)))

(declare-fun b!59972 () Bool)

(assert (=> b!59972 (= e!39406 (not (= lt!24143 lt!24138)))))

(assert (= (and d!11707 res!33212) b!59972))

(assert (=> d!11707 m!51299))

(assert (=> d!11707 m!51305))

(assert (=> d!11707 m!51323))

(declare-fun m!52367 () Bool)

(assert (=> d!11707 m!52367))

(assert (=> d!11707 m!51305))

(declare-fun m!52369 () Bool)

(assert (=> d!11707 m!52369))

(assert (=> b!59388 d!11707))

(declare-fun d!11709 () Bool)

(declare-fun e!39407 () Bool)

(assert (=> d!11709 e!39407))

(declare-fun res!33213 () Bool)

(assert (=> d!11709 (=> (not res!33213) (not e!39407))))

(declare-fun lt!24481 () ListLongMap!1363)

(assert (=> d!11709 (= res!33213 (contains!682 lt!24481 (_1!1022 (tuple2!2023 lt!24138 (minValue!1959 newMap!16)))))))

(declare-fun lt!24483 () List!1430)

(assert (=> d!11709 (= lt!24481 (ListLongMap!1364 lt!24483))))

(declare-fun lt!24480 () Unit!1551)

(declare-fun lt!24482 () Unit!1551)

(assert (=> d!11709 (= lt!24480 lt!24482)))

(assert (=> d!11709 (= (getValueByKey!124 lt!24483 (_1!1022 (tuple2!2023 lt!24138 (minValue!1959 newMap!16)))) (Some!129 (_2!1022 (tuple2!2023 lt!24138 (minValue!1959 newMap!16)))))))

(assert (=> d!11709 (= lt!24482 (lemmaContainsTupThenGetReturnValue!41 lt!24483 (_1!1022 (tuple2!2023 lt!24138 (minValue!1959 newMap!16))) (_2!1022 (tuple2!2023 lt!24138 (minValue!1959 newMap!16)))))))

(assert (=> d!11709 (= lt!24483 (insertStrictlySorted!44 (toList!697 lt!24130) (_1!1022 (tuple2!2023 lt!24138 (minValue!1959 newMap!16))) (_2!1022 (tuple2!2023 lt!24138 (minValue!1959 newMap!16)))))))

(assert (=> d!11709 (= (+!81 lt!24130 (tuple2!2023 lt!24138 (minValue!1959 newMap!16))) lt!24481)))

(declare-fun b!59973 () Bool)

(declare-fun res!33214 () Bool)

(assert (=> b!59973 (=> (not res!33214) (not e!39407))))

(assert (=> b!59973 (= res!33214 (= (getValueByKey!124 (toList!697 lt!24481) (_1!1022 (tuple2!2023 lt!24138 (minValue!1959 newMap!16)))) (Some!129 (_2!1022 (tuple2!2023 lt!24138 (minValue!1959 newMap!16))))))))

(declare-fun b!59974 () Bool)

(assert (=> b!59974 (= e!39407 (contains!684 (toList!697 lt!24481) (tuple2!2023 lt!24138 (minValue!1959 newMap!16))))))

(assert (= (and d!11709 res!33213) b!59973))

(assert (= (and b!59973 res!33214) b!59974))

(declare-fun m!52371 () Bool)

(assert (=> d!11709 m!52371))

(declare-fun m!52373 () Bool)

(assert (=> d!11709 m!52373))

(declare-fun m!52375 () Bool)

(assert (=> d!11709 m!52375))

(declare-fun m!52377 () Bool)

(assert (=> d!11709 m!52377))

(declare-fun m!52379 () Bool)

(assert (=> b!59973 m!52379))

(declare-fun m!52381 () Bool)

(assert (=> b!59974 m!52381))

(assert (=> b!59388 d!11709))

(assert (=> b!59388 d!11499))

(declare-fun d!11711 () Bool)

(assert (=> d!11711 (= (apply!66 lt!24130 lt!24143) (get!1069 (getValueByKey!124 (toList!697 lt!24130) lt!24143)))))

(declare-fun bs!2606 () Bool)

(assert (= bs!2606 d!11711))

(declare-fun m!52383 () Bool)

(assert (=> bs!2606 m!52383))

(assert (=> bs!2606 m!52383))

(declare-fun m!52385 () Bool)

(assert (=> bs!2606 m!52385))

(assert (=> b!59388 d!11711))

(declare-fun d!11713 () Bool)

(declare-fun e!39408 () Bool)

(assert (=> d!11713 e!39408))

(declare-fun res!33215 () Bool)

(assert (=> d!11713 (=> (not res!33215) (not e!39408))))

(declare-fun lt!24485 () ListLongMap!1363)

(assert (=> d!11713 (= res!33215 (contains!682 lt!24485 (_1!1022 (tuple2!2023 lt!24135 (minValue!1959 newMap!16)))))))

(declare-fun lt!24487 () List!1430)

(assert (=> d!11713 (= lt!24485 (ListLongMap!1364 lt!24487))))

(declare-fun lt!24484 () Unit!1551)

(declare-fun lt!24486 () Unit!1551)

(assert (=> d!11713 (= lt!24484 lt!24486)))

(assert (=> d!11713 (= (getValueByKey!124 lt!24487 (_1!1022 (tuple2!2023 lt!24135 (minValue!1959 newMap!16)))) (Some!129 (_2!1022 (tuple2!2023 lt!24135 (minValue!1959 newMap!16)))))))

(assert (=> d!11713 (= lt!24486 (lemmaContainsTupThenGetReturnValue!41 lt!24487 (_1!1022 (tuple2!2023 lt!24135 (minValue!1959 newMap!16))) (_2!1022 (tuple2!2023 lt!24135 (minValue!1959 newMap!16)))))))

(assert (=> d!11713 (= lt!24487 (insertStrictlySorted!44 (toList!697 lt!24137) (_1!1022 (tuple2!2023 lt!24135 (minValue!1959 newMap!16))) (_2!1022 (tuple2!2023 lt!24135 (minValue!1959 newMap!16)))))))

(assert (=> d!11713 (= (+!81 lt!24137 (tuple2!2023 lt!24135 (minValue!1959 newMap!16))) lt!24485)))

(declare-fun b!59975 () Bool)

(declare-fun res!33216 () Bool)

(assert (=> b!59975 (=> (not res!33216) (not e!39408))))

(assert (=> b!59975 (= res!33216 (= (getValueByKey!124 (toList!697 lt!24485) (_1!1022 (tuple2!2023 lt!24135 (minValue!1959 newMap!16)))) (Some!129 (_2!1022 (tuple2!2023 lt!24135 (minValue!1959 newMap!16))))))))

(declare-fun b!59976 () Bool)

(assert (=> b!59976 (= e!39408 (contains!684 (toList!697 lt!24485) (tuple2!2023 lt!24135 (minValue!1959 newMap!16))))))

(assert (= (and d!11713 res!33215) b!59975))

(assert (= (and b!59975 res!33216) b!59976))

(declare-fun m!52387 () Bool)

(assert (=> d!11713 m!52387))

(declare-fun m!52389 () Bool)

(assert (=> d!11713 m!52389))

(declare-fun m!52391 () Bool)

(assert (=> d!11713 m!52391))

(declare-fun m!52393 () Bool)

(assert (=> d!11713 m!52393))

(declare-fun m!52395 () Bool)

(assert (=> b!59975 m!52395))

(declare-fun m!52397 () Bool)

(assert (=> b!59976 m!52397))

(assert (=> b!59388 d!11713))

(declare-fun d!11715 () Bool)

(assert (=> d!11715 (contains!682 (+!81 lt!24133 (tuple2!2023 lt!24128 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16)))) lt!24126)))

(declare-fun lt!24488 () Unit!1551)

(assert (=> d!11715 (= lt!24488 (choose!308 lt!24133 lt!24128 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16)) lt!24126))))

(assert (=> d!11715 (contains!682 lt!24133 lt!24126)))

(assert (=> d!11715 (= (addStillContains!42 lt!24133 lt!24128 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16)) lt!24126) lt!24488)))

(declare-fun bs!2607 () Bool)

(assert (= bs!2607 d!11715))

(assert (=> bs!2607 m!51295))

(assert (=> bs!2607 m!51295))

(assert (=> bs!2607 m!51303))

(declare-fun m!52399 () Bool)

(assert (=> bs!2607 m!52399))

(declare-fun m!52401 () Bool)

(assert (=> bs!2607 m!52401))

(assert (=> b!59388 d!11715))

(declare-fun d!11717 () Bool)

(assert (=> d!11717 (= (apply!66 (+!81 lt!24137 (tuple2!2023 lt!24135 (minValue!1959 newMap!16))) lt!24146) (get!1069 (getValueByKey!124 (toList!697 (+!81 lt!24137 (tuple2!2023 lt!24135 (minValue!1959 newMap!16)))) lt!24146)))))

(declare-fun bs!2608 () Bool)

(assert (= bs!2608 d!11717))

(declare-fun m!52403 () Bool)

(assert (=> bs!2608 m!52403))

(assert (=> bs!2608 m!52403))

(declare-fun m!52405 () Bool)

(assert (=> bs!2608 m!52405))

(assert (=> b!59388 d!11717))

(declare-fun d!11719 () Bool)

(declare-fun e!39409 () Bool)

(assert (=> d!11719 e!39409))

(declare-fun res!33217 () Bool)

(assert (=> d!11719 (=> res!33217 e!39409)))

(declare-fun lt!24491 () Bool)

(assert (=> d!11719 (= res!33217 (not lt!24491))))

(declare-fun lt!24490 () Bool)

(assert (=> d!11719 (= lt!24491 lt!24490)))

(declare-fun lt!24492 () Unit!1551)

(declare-fun e!39410 () Unit!1551)

(assert (=> d!11719 (= lt!24492 e!39410)))

(declare-fun c!7763 () Bool)

(assert (=> d!11719 (= c!7763 lt!24490)))

(assert (=> d!11719 (= lt!24490 (containsKey!128 (toList!697 lt!24069) (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!11719 (= (contains!682 lt!24069 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)) lt!24491)))

(declare-fun b!59977 () Bool)

(declare-fun lt!24489 () Unit!1551)

(assert (=> b!59977 (= e!39410 lt!24489)))

(assert (=> b!59977 (= lt!24489 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 lt!24069) (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59977 (isDefined!77 (getValueByKey!124 (toList!697 lt!24069) (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59978 () Bool)

(declare-fun Unit!1597 () Unit!1551)

(assert (=> b!59978 (= e!39410 Unit!1597)))

(declare-fun b!59979 () Bool)

(assert (=> b!59979 (= e!39409 (isDefined!77 (getValueByKey!124 (toList!697 lt!24069) (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!11719 c!7763) b!59977))

(assert (= (and d!11719 (not c!7763)) b!59978))

(assert (= (and d!11719 (not res!33217)) b!59979))

(assert (=> d!11719 m!50803))

(declare-fun m!52407 () Bool)

(assert (=> d!11719 m!52407))

(assert (=> b!59977 m!50803))

(declare-fun m!52409 () Bool)

(assert (=> b!59977 m!52409))

(assert (=> b!59977 m!50803))

(assert (=> b!59977 m!51675))

(assert (=> b!59977 m!51675))

(declare-fun m!52411 () Bool)

(assert (=> b!59977 m!52411))

(assert (=> b!59979 m!50803))

(assert (=> b!59979 m!51675))

(assert (=> b!59979 m!51675))

(assert (=> b!59979 m!52411))

(assert (=> b!59306 d!11719))

(declare-fun d!11721 () Bool)

(assert (=> d!11721 (= (apply!66 lt!23870 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1069 (getValueByKey!124 (toList!697 lt!23870) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2609 () Bool)

(assert (= bs!2609 d!11721))

(assert (=> bs!2609 m!51699))

(assert (=> bs!2609 m!51699))

(declare-fun m!52413 () Bool)

(assert (=> bs!2609 m!52413))

(assert (=> b!59113 d!11721))

(declare-fun d!11723 () Bool)

(declare-fun e!39411 () Bool)

(assert (=> d!11723 e!39411))

(declare-fun res!33218 () Bool)

(assert (=> d!11723 (=> res!33218 e!39411)))

(declare-fun lt!24495 () Bool)

(assert (=> d!11723 (= res!33218 (not lt!24495))))

(declare-fun lt!24494 () Bool)

(assert (=> d!11723 (= lt!24495 lt!24494)))

(declare-fun lt!24496 () Unit!1551)

(declare-fun e!39412 () Unit!1551)

(assert (=> d!11723 (= lt!24496 e!39412)))

(declare-fun c!7764 () Bool)

(assert (=> d!11723 (= c!7764 lt!24494)))

(assert (=> d!11723 (= lt!24494 (containsKey!128 (toList!697 lt!24121) (_1!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(assert (=> d!11723 (= (contains!682 lt!24121 (_1!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!24495)))

(declare-fun b!59980 () Bool)

(declare-fun lt!24493 () Unit!1551)

(assert (=> b!59980 (= e!39412 lt!24493)))

(assert (=> b!59980 (= lt!24493 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 lt!24121) (_1!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(assert (=> b!59980 (isDefined!77 (getValueByKey!124 (toList!697 lt!24121) (_1!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun b!59981 () Bool)

(declare-fun Unit!1598 () Unit!1551)

(assert (=> b!59981 (= e!39412 Unit!1598)))

(declare-fun b!59982 () Bool)

(assert (=> b!59982 (= e!39411 (isDefined!77 (getValueByKey!124 (toList!697 lt!24121) (_1!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(assert (= (and d!11723 c!7764) b!59980))

(assert (= (and d!11723 (not c!7764)) b!59981))

(assert (= (and d!11723 (not res!33218)) b!59982))

(declare-fun m!52415 () Bool)

(assert (=> d!11723 m!52415))

(declare-fun m!52417 () Bool)

(assert (=> b!59980 m!52417))

(assert (=> b!59980 m!51245))

(assert (=> b!59980 m!51245))

(declare-fun m!52419 () Bool)

(assert (=> b!59980 m!52419))

(assert (=> b!59982 m!51245))

(assert (=> b!59982 m!51245))

(assert (=> b!59982 m!52419))

(assert (=> d!11337 d!11723))

(declare-fun b!59984 () Bool)

(declare-fun e!39413 () Option!130)

(declare-fun e!39414 () Option!130)

(assert (=> b!59984 (= e!39413 e!39414)))

(declare-fun c!7766 () Bool)

(assert (=> b!59984 (= c!7766 (and ((_ is Cons!1426) lt!24123) (not (= (_1!1022 (h!2007 lt!24123)) (_1!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))))

(declare-fun b!59983 () Bool)

(assert (=> b!59983 (= e!39413 (Some!129 (_2!1022 (h!2007 lt!24123))))))

(declare-fun b!59985 () Bool)

(assert (=> b!59985 (= e!39414 (getValueByKey!124 (t!4768 lt!24123) (_1!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun b!59986 () Bool)

(assert (=> b!59986 (= e!39414 None!128)))

(declare-fun d!11725 () Bool)

(declare-fun c!7765 () Bool)

(assert (=> d!11725 (= c!7765 (and ((_ is Cons!1426) lt!24123) (= (_1!1022 (h!2007 lt!24123)) (_1!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(assert (=> d!11725 (= (getValueByKey!124 lt!24123 (_1!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) e!39413)))

(assert (= (and d!11725 c!7765) b!59983))

(assert (= (and d!11725 (not c!7765)) b!59984))

(assert (= (and b!59984 c!7766) b!59985))

(assert (= (and b!59984 (not c!7766)) b!59986))

(declare-fun m!52421 () Bool)

(assert (=> b!59985 m!52421))

(assert (=> d!11337 d!11725))

(declare-fun d!11727 () Bool)

(assert (=> d!11727 (= (getValueByKey!124 lt!24123 (_1!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) (Some!129 (_2!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun lt!24497 () Unit!1551)

(assert (=> d!11727 (= lt!24497 (choose!311 lt!24123 (_1!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun e!39415 () Bool)

(assert (=> d!11727 e!39415))

(declare-fun res!33219 () Bool)

(assert (=> d!11727 (=> (not res!33219) (not e!39415))))

(assert (=> d!11727 (= res!33219 (isStrictlySorted!284 lt!24123))))

(assert (=> d!11727 (= (lemmaContainsTupThenGetReturnValue!41 lt!24123 (_1!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!24497)))

(declare-fun b!59987 () Bool)

(declare-fun res!33220 () Bool)

(assert (=> b!59987 (=> (not res!33220) (not e!39415))))

(assert (=> b!59987 (= res!33220 (containsKey!128 lt!24123 (_1!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun b!59988 () Bool)

(assert (=> b!59988 (= e!39415 (contains!684 lt!24123 (tuple2!2023 (_1!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(assert (= (and d!11727 res!33219) b!59987))

(assert (= (and b!59987 res!33220) b!59988))

(assert (=> d!11727 m!51239))

(declare-fun m!52423 () Bool)

(assert (=> d!11727 m!52423))

(declare-fun m!52425 () Bool)

(assert (=> d!11727 m!52425))

(declare-fun m!52427 () Bool)

(assert (=> b!59987 m!52427))

(declare-fun m!52429 () Bool)

(assert (=> b!59988 m!52429))

(assert (=> d!11337 d!11727))

(declare-fun b!59989 () Bool)

(declare-fun e!39418 () List!1430)

(declare-fun call!4527 () List!1430)

(assert (=> b!59989 (= e!39418 call!4527)))

(declare-fun lt!24498 () List!1430)

(declare-fun b!59990 () Bool)

(declare-fun e!39417 () Bool)

(assert (=> b!59990 (= e!39417 (contains!684 lt!24498 (tuple2!2023 (_1!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(declare-fun b!59991 () Bool)

(declare-fun e!39416 () List!1430)

(assert (=> b!59991 (= e!39416 (insertStrictlySorted!44 (t!4768 (toList!697 lt!23732)) (_1!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun bm!4522 () Bool)

(declare-fun call!4525 () List!1430)

(declare-fun call!4526 () List!1430)

(assert (=> bm!4522 (= call!4525 call!4526)))

(declare-fun b!59992 () Bool)

(declare-fun e!39419 () List!1430)

(declare-fun e!39420 () List!1430)

(assert (=> b!59992 (= e!39419 e!39420)))

(declare-fun c!7768 () Bool)

(assert (=> b!59992 (= c!7768 (and ((_ is Cons!1426) (toList!697 lt!23732)) (= (_1!1022 (h!2007 (toList!697 lt!23732))) (_1!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(declare-fun d!11729 () Bool)

(assert (=> d!11729 e!39417))

(declare-fun res!33222 () Bool)

(assert (=> d!11729 (=> (not res!33222) (not e!39417))))

(assert (=> d!11729 (= res!33222 (isStrictlySorted!284 lt!24498))))

(assert (=> d!11729 (= lt!24498 e!39419)))

(declare-fun c!7770 () Bool)

(assert (=> d!11729 (= c!7770 (and ((_ is Cons!1426) (toList!697 lt!23732)) (bvslt (_1!1022 (h!2007 (toList!697 lt!23732))) (_1!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(assert (=> d!11729 (isStrictlySorted!284 (toList!697 lt!23732))))

(assert (=> d!11729 (= (insertStrictlySorted!44 (toList!697 lt!23732) (_1!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!24498)))

(declare-fun bm!4523 () Bool)

(assert (=> bm!4523 (= call!4527 call!4525)))

(declare-fun b!59993 () Bool)

(assert (=> b!59993 (= e!39418 call!4527)))

(declare-fun b!59994 () Bool)

(assert (=> b!59994 (= e!39419 call!4526)))

(declare-fun b!59995 () Bool)

(assert (=> b!59995 (= e!39420 call!4525)))

(declare-fun c!7767 () Bool)

(declare-fun b!59996 () Bool)

(assert (=> b!59996 (= e!39416 (ite c!7768 (t!4768 (toList!697 lt!23732)) (ite c!7767 (Cons!1426 (h!2007 (toList!697 lt!23732)) (t!4768 (toList!697 lt!23732))) Nil!1427)))))

(declare-fun b!59997 () Bool)

(declare-fun res!33221 () Bool)

(assert (=> b!59997 (=> (not res!33221) (not e!39417))))

(assert (=> b!59997 (= res!33221 (containsKey!128 lt!24498 (_1!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun b!59998 () Bool)

(assert (=> b!59998 (= c!7767 (and ((_ is Cons!1426) (toList!697 lt!23732)) (bvsgt (_1!1022 (h!2007 (toList!697 lt!23732))) (_1!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(assert (=> b!59998 (= e!39420 e!39418)))

(declare-fun bm!4524 () Bool)

(assert (=> bm!4524 (= call!4526 ($colon$colon!60 e!39416 (ite c!7770 (h!2007 (toList!697 lt!23732)) (tuple2!2023 (_1!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 lt!23730 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))))

(declare-fun c!7769 () Bool)

(assert (=> bm!4524 (= c!7769 c!7770)))

(assert (= (and d!11729 c!7770) b!59994))

(assert (= (and d!11729 (not c!7770)) b!59992))

(assert (= (and b!59992 c!7768) b!59995))

(assert (= (and b!59992 (not c!7768)) b!59998))

(assert (= (and b!59998 c!7767) b!59989))

(assert (= (and b!59998 (not c!7767)) b!59993))

(assert (= (or b!59989 b!59993) bm!4523))

(assert (= (or b!59995 bm!4523) bm!4522))

(assert (= (or b!59994 bm!4522) bm!4524))

(assert (= (and bm!4524 c!7769) b!59991))

(assert (= (and bm!4524 (not c!7769)) b!59996))

(assert (= (and d!11729 res!33222) b!59997))

(assert (= (and b!59997 res!33221) b!59990))

(declare-fun m!52431 () Bool)

(assert (=> d!11729 m!52431))

(declare-fun m!52433 () Bool)

(assert (=> d!11729 m!52433))

(declare-fun m!52435 () Bool)

(assert (=> bm!4524 m!52435))

(declare-fun m!52437 () Bool)

(assert (=> b!59991 m!52437))

(declare-fun m!52439 () Bool)

(assert (=> b!59997 m!52439))

(declare-fun m!52441 () Bool)

(assert (=> b!59990 m!52441))

(assert (=> d!11337 d!11729))

(declare-fun lt!24499 () Bool)

(declare-fun d!11731 () Bool)

(assert (=> d!11731 (= lt!24499 (select (content!64 (toList!697 lt!24117)) (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))))

(declare-fun e!39421 () Bool)

(assert (=> d!11731 (= lt!24499 e!39421)))

(declare-fun res!33224 () Bool)

(assert (=> d!11731 (=> (not res!33224) (not e!39421))))

(assert (=> d!11731 (= res!33224 ((_ is Cons!1426) (toList!697 lt!24117)))))

(assert (=> d!11731 (= (contains!684 (toList!697 lt!24117) (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))) lt!24499)))

(declare-fun b!59999 () Bool)

(declare-fun e!39422 () Bool)

(assert (=> b!59999 (= e!39421 e!39422)))

(declare-fun res!33223 () Bool)

(assert (=> b!59999 (=> res!33223 e!39422)))

(assert (=> b!59999 (= res!33223 (= (h!2007 (toList!697 lt!24117)) (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))))

(declare-fun b!60000 () Bool)

(assert (=> b!60000 (= e!39422 (contains!684 (t!4768 (toList!697 lt!24117)) (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))))

(assert (= (and d!11731 res!33224) b!59999))

(assert (= (and b!59999 (not res!33223)) b!60000))

(declare-fun m!52443 () Bool)

(assert (=> d!11731 m!52443))

(declare-fun m!52445 () Bool)

(assert (=> d!11731 m!52445))

(declare-fun m!52447 () Bool)

(assert (=> b!60000 m!52447))

(assert (=> b!59362 d!11731))

(declare-fun d!11733 () Bool)

(assert (=> d!11733 (= (get!1069 (getValueByKey!124 (toList!697 lt!23739) #b1000000000000000000000000000000000000000000000000000000000000000)) (v!2386 (getValueByKey!124 (toList!697 lt!23739) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!11303 d!11733))

(assert (=> d!11303 d!11461))

(declare-fun d!11735 () Bool)

(assert (=> d!11735 (isDefined!77 (getValueByKey!124 (toList!697 lt!23739) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun lt!24500 () Unit!1551)

(assert (=> d!11735 (= lt!24500 (choose!305 (toList!697 lt!23739) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!39423 () Bool)

(assert (=> d!11735 e!39423))

(declare-fun res!33225 () Bool)

(assert (=> d!11735 (=> (not res!33225) (not e!39423))))

(assert (=> d!11735 (= res!33225 (isStrictlySorted!284 (toList!697 lt!23739)))))

(assert (=> d!11735 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 lt!23739) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!24500)))

(declare-fun b!60001 () Bool)

(assert (=> b!60001 (= e!39423 (containsKey!128 (toList!697 lt!23739) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!11735 res!33225) b!60001))

(assert (=> d!11735 m!50627))

(assert (=> d!11735 m!50951))

(assert (=> d!11735 m!50951))

(assert (=> d!11735 m!50975))

(assert (=> d!11735 m!50627))

(declare-fun m!52449 () Bool)

(assert (=> d!11735 m!52449))

(assert (=> d!11735 m!51545))

(assert (=> b!60001 m!50627))

(assert (=> b!60001 m!50971))

(assert (=> b!59206 d!11735))

(assert (=> b!59206 d!11487))

(assert (=> b!59206 d!11453))

(declare-fun d!11737 () Bool)

(declare-fun e!39424 () Bool)

(assert (=> d!11737 e!39424))

(declare-fun res!33226 () Bool)

(assert (=> d!11737 (=> res!33226 e!39424)))

(declare-fun lt!24503 () Bool)

(assert (=> d!11737 (= res!33226 (not lt!24503))))

(declare-fun lt!24502 () Bool)

(assert (=> d!11737 (= lt!24503 lt!24502)))

(declare-fun lt!24504 () Unit!1551)

(declare-fun e!39425 () Unit!1551)

(assert (=> d!11737 (= lt!24504 e!39425)))

(declare-fun c!7771 () Bool)

(assert (=> d!11737 (= c!7771 lt!24502)))

(assert (=> d!11737 (= lt!24502 (containsKey!128 (toList!697 lt!24034) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11737 (= (contains!682 lt!24034 #b1000000000000000000000000000000000000000000000000000000000000000) lt!24503)))

(declare-fun b!60002 () Bool)

(declare-fun lt!24501 () Unit!1551)

(assert (=> b!60002 (= e!39425 lt!24501)))

(assert (=> b!60002 (= lt!24501 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 lt!24034) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!60002 (isDefined!77 (getValueByKey!124 (toList!697 lt!24034) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60003 () Bool)

(declare-fun Unit!1599 () Unit!1551)

(assert (=> b!60003 (= e!39425 Unit!1599)))

(declare-fun b!60004 () Bool)

(assert (=> b!60004 (= e!39424 (isDefined!77 (getValueByKey!124 (toList!697 lt!24034) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11737 c!7771) b!60002))

(assert (= (and d!11737 (not c!7771)) b!60003))

(assert (= (and d!11737 (not res!33226)) b!60004))

(declare-fun m!52451 () Bool)

(assert (=> d!11737 m!52451))

(declare-fun m!52453 () Bool)

(assert (=> b!60002 m!52453))

(assert (=> b!60002 m!51671))

(assert (=> b!60002 m!51671))

(declare-fun m!52455 () Bool)

(assert (=> b!60002 m!52455))

(assert (=> b!60004 m!51671))

(assert (=> b!60004 m!51671))

(assert (=> b!60004 m!52455))

(assert (=> bm!4437 d!11737))

(declare-fun d!11739 () Bool)

(declare-fun e!39426 () Bool)

(assert (=> d!11739 e!39426))

(declare-fun res!33227 () Bool)

(assert (=> d!11739 (=> (not res!33227) (not e!39426))))

(declare-fun lt!24506 () ListLongMap!1363)

(assert (=> d!11739 (= res!33227 (contains!682 lt!24506 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))))))

(declare-fun lt!24508 () List!1430)

(assert (=> d!11739 (= lt!24506 (ListLongMap!1364 lt!24508))))

(declare-fun lt!24505 () Unit!1551)

(declare-fun lt!24507 () Unit!1551)

(assert (=> d!11739 (= lt!24505 lt!24507)))

(assert (=> d!11739 (= (getValueByKey!124 lt!24508 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))) (Some!129 (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))))))

(assert (=> d!11739 (= lt!24507 (lemmaContainsTupThenGetReturnValue!41 lt!24508 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))))))

(assert (=> d!11739 (= lt!24508 (insertStrictlySorted!44 (toList!697 call!4437) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))))))

(assert (=> d!11739 (= (+!81 call!4437 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))) lt!24506)))

(declare-fun b!60005 () Bool)

(declare-fun res!33228 () Bool)

(assert (=> b!60005 (=> (not res!33228) (not e!39426))))

(assert (=> b!60005 (= res!33228 (= (getValueByKey!124 (toList!697 lt!24506) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))) (Some!129 (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))))))))

(declare-fun b!60006 () Bool)

(assert (=> b!60006 (= e!39426 (contains!684 (toList!697 lt!24506) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))))))

(assert (= (and d!11739 res!33227) b!60005))

(assert (= (and b!60005 res!33228) b!60006))

(declare-fun m!52457 () Bool)

(assert (=> d!11739 m!52457))

(declare-fun m!52459 () Bool)

(assert (=> d!11739 m!52459))

(declare-fun m!52461 () Bool)

(assert (=> d!11739 m!52461))

(declare-fun m!52463 () Bool)

(assert (=> d!11739 m!52463))

(declare-fun m!52465 () Bool)

(assert (=> b!60005 m!52465))

(declare-fun m!52467 () Bool)

(assert (=> b!60006 m!52467))

(assert (=> b!59250 d!11739))

(declare-fun d!11741 () Bool)

(declare-fun e!39427 () Bool)

(assert (=> d!11741 e!39427))

(declare-fun res!33229 () Bool)

(assert (=> d!11741 (=> res!33229 e!39427)))

(declare-fun lt!24511 () Bool)

(assert (=> d!11741 (= res!33229 (not lt!24511))))

(declare-fun lt!24510 () Bool)

(assert (=> d!11741 (= lt!24511 lt!24510)))

(declare-fun lt!24512 () Unit!1551)

(declare-fun e!39428 () Unit!1551)

(assert (=> d!11741 (= lt!24512 e!39428)))

(declare-fun c!7772 () Bool)

(assert (=> d!11741 (= c!7772 lt!24510)))

(assert (=> d!11741 (= lt!24510 (containsKey!128 (toList!697 lt!23870) (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!11741 (= (contains!682 lt!23870 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)) lt!24511)))

(declare-fun b!60007 () Bool)

(declare-fun lt!24509 () Unit!1551)

(assert (=> b!60007 (= e!39428 lt!24509)))

(assert (=> b!60007 (= lt!24509 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 lt!23870) (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!60007 (isDefined!77 (getValueByKey!124 (toList!697 lt!23870) (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!60008 () Bool)

(declare-fun Unit!1600 () Unit!1551)

(assert (=> b!60008 (= e!39428 Unit!1600)))

(declare-fun b!60009 () Bool)

(assert (=> b!60009 (= e!39427 (isDefined!77 (getValueByKey!124 (toList!697 lt!23870) (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!11741 c!7772) b!60007))

(assert (= (and d!11741 (not c!7772)) b!60008))

(assert (= (and d!11741 (not res!33229)) b!60009))

(assert (=> d!11741 m!50803))

(declare-fun m!52469 () Bool)

(assert (=> d!11741 m!52469))

(assert (=> b!60007 m!50803))

(declare-fun m!52471 () Bool)

(assert (=> b!60007 m!52471))

(assert (=> b!60007 m!50803))

(declare-fun m!52473 () Bool)

(assert (=> b!60007 m!52473))

(assert (=> b!60007 m!52473))

(declare-fun m!52475 () Bool)

(assert (=> b!60007 m!52475))

(assert (=> b!60009 m!50803))

(assert (=> b!60009 m!52473))

(assert (=> b!60009 m!52473))

(assert (=> b!60009 m!52475))

(assert (=> b!59110 d!11741))

(assert (=> d!11299 d!11231))

(declare-fun d!11743 () Bool)

(declare-fun e!39429 () Bool)

(assert (=> d!11743 e!39429))

(declare-fun res!33230 () Bool)

(assert (=> d!11743 (=> (not res!33230) (not e!39429))))

(declare-fun lt!24514 () ListLongMap!1363)

(assert (=> d!11743 (= res!33230 (contains!682 lt!24514 (_1!1022 (ite (or c!7520 c!7523) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))))))))

(declare-fun lt!24516 () List!1430)

(assert (=> d!11743 (= lt!24514 (ListLongMap!1364 lt!24516))))

(declare-fun lt!24513 () Unit!1551)

(declare-fun lt!24515 () Unit!1551)

(assert (=> d!11743 (= lt!24513 lt!24515)))

(assert (=> d!11743 (= (getValueByKey!124 lt!24516 (_1!1022 (ite (or c!7520 c!7523) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))))) (Some!129 (_2!1022 (ite (or c!7520 c!7523) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))))))))

(assert (=> d!11743 (= lt!24515 (lemmaContainsTupThenGetReturnValue!41 lt!24516 (_1!1022 (ite (or c!7520 c!7523) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))) (_2!1022 (ite (or c!7520 c!7523) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))))))))

(assert (=> d!11743 (= lt!24516 (insertStrictlySorted!44 (toList!697 (ite c!7520 call!4414 (ite c!7523 call!4417 call!4418))) (_1!1022 (ite (or c!7520 c!7523) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))) (_2!1022 (ite (or c!7520 c!7523) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))))))))

(assert (=> d!11743 (= (+!81 (ite c!7520 call!4414 (ite c!7523 call!4417 call!4418)) (ite (or c!7520 c!7523) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))) lt!24514)))

(declare-fun b!60010 () Bool)

(declare-fun res!33231 () Bool)

(assert (=> b!60010 (=> (not res!33231) (not e!39429))))

(assert (=> b!60010 (= res!33231 (= (getValueByKey!124 (toList!697 lt!24514) (_1!1022 (ite (or c!7520 c!7523) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))))) (Some!129 (_2!1022 (ite (or c!7520 c!7523) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))))))))

(declare-fun b!60011 () Bool)

(assert (=> b!60011 (= e!39429 (contains!684 (toList!697 lt!24514) (ite (or c!7520 c!7523) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))))))

(assert (= (and d!11743 res!33230) b!60010))

(assert (= (and b!60010 res!33231) b!60011))

(declare-fun m!52477 () Bool)

(assert (=> d!11743 m!52477))

(declare-fun m!52479 () Bool)

(assert (=> d!11743 m!52479))

(declare-fun m!52481 () Bool)

(assert (=> d!11743 m!52481))

(declare-fun m!52483 () Bool)

(assert (=> d!11743 m!52483))

(declare-fun m!52485 () Bool)

(assert (=> b!60010 m!52485))

(declare-fun m!52487 () Bool)

(assert (=> b!60011 m!52487))

(assert (=> bm!4409 d!11743))

(declare-fun d!11745 () Bool)

(assert (=> d!11745 (= (apply!66 lt!23870 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)) (get!1069 (getValueByKey!124 (toList!697 lt!23870) (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2610 () Bool)

(assert (= bs!2610 d!11745))

(assert (=> bs!2610 m!50803))

(assert (=> bs!2610 m!52473))

(assert (=> bs!2610 m!52473))

(declare-fun m!52489 () Bool)

(assert (=> bs!2610 m!52489))

(assert (=> b!59108 d!11745))

(declare-fun d!11747 () Bool)

(declare-fun c!7773 () Bool)

(assert (=> d!11747 (= c!7773 ((_ is ValueCellFull!855) (select (arr!1782 lt!23824) #b00000000000000000000000000000000)))))

(declare-fun e!39430 () V!2843)

(assert (=> d!11747 (= (get!1066 (select (arr!1782 lt!23824) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2043 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!39430)))

(declare-fun b!60012 () Bool)

(assert (=> b!60012 (= e!39430 (get!1067 (select (arr!1782 lt!23824) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2043 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!60013 () Bool)

(assert (=> b!60013 (= e!39430 (get!1068 (select (arr!1782 lt!23824) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2043 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11747 c!7773) b!60012))

(assert (= (and d!11747 (not c!7773)) b!60013))

(assert (=> b!60012 m!50809))

(assert (=> b!60012 m!50813))

(declare-fun m!52491 () Bool)

(assert (=> b!60012 m!52491))

(assert (=> b!60013 m!50809))

(assert (=> b!60013 m!50813))

(declare-fun m!52493 () Bool)

(assert (=> b!60013 m!52493))

(assert (=> b!59108 d!11747))

(declare-fun d!11749 () Bool)

(declare-fun e!39431 () Bool)

(assert (=> d!11749 e!39431))

(declare-fun res!33232 () Bool)

(assert (=> d!11749 (=> res!33232 e!39431)))

(declare-fun lt!24519 () Bool)

(assert (=> d!11749 (= res!33232 (not lt!24519))))

(declare-fun lt!24518 () Bool)

(assert (=> d!11749 (= lt!24519 lt!24518)))

(declare-fun lt!24520 () Unit!1551)

(declare-fun e!39432 () Unit!1551)

(assert (=> d!11749 (= lt!24520 e!39432)))

(declare-fun c!7774 () Bool)

(assert (=> d!11749 (= c!7774 lt!24518)))

(assert (=> d!11749 (= lt!24518 (containsKey!128 (toList!697 lt!24013) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(assert (=> d!11749 (= (contains!682 lt!24013 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!24519)))

(declare-fun b!60014 () Bool)

(declare-fun lt!24517 () Unit!1551)

(assert (=> b!60014 (= e!39432 lt!24517)))

(assert (=> b!60014 (= lt!24517 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 lt!24013) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(assert (=> b!60014 (isDefined!77 (getValueByKey!124 (toList!697 lt!24013) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun b!60015 () Bool)

(declare-fun Unit!1601 () Unit!1551)

(assert (=> b!60015 (= e!39432 Unit!1601)))

(declare-fun b!60016 () Bool)

(assert (=> b!60016 (= e!39431 (isDefined!77 (getValueByKey!124 (toList!697 lt!24013) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(assert (= (and d!11749 c!7774) b!60014))

(assert (= (and d!11749 (not c!7774)) b!60015))

(assert (= (and d!11749 (not res!33232)) b!60016))

(declare-fun m!52495 () Bool)

(assert (=> d!11749 m!52495))

(declare-fun m!52497 () Bool)

(assert (=> b!60014 m!52497))

(assert (=> b!60014 m!51007))

(assert (=> b!60014 m!51007))

(declare-fun m!52499 () Bool)

(assert (=> b!60014 m!52499))

(assert (=> b!60016 m!51007))

(assert (=> b!60016 m!51007))

(assert (=> b!60016 m!52499))

(assert (=> d!11297 d!11749))

(declare-fun b!60018 () Bool)

(declare-fun e!39433 () Option!130)

(declare-fun e!39434 () Option!130)

(assert (=> b!60018 (= e!39433 e!39434)))

(declare-fun c!7776 () Bool)

(assert (=> b!60018 (= c!7776 (and ((_ is Cons!1426) lt!24015) (not (= (_1!1022 (h!2007 lt!24015)) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))))

(declare-fun b!60017 () Bool)

(assert (=> b!60017 (= e!39433 (Some!129 (_2!1022 (h!2007 lt!24015))))))

(declare-fun b!60019 () Bool)

(assert (=> b!60019 (= e!39434 (getValueByKey!124 (t!4768 lt!24015) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun b!60020 () Bool)

(assert (=> b!60020 (= e!39434 None!128)))

(declare-fun d!11751 () Bool)

(declare-fun c!7775 () Bool)

(assert (=> d!11751 (= c!7775 (and ((_ is Cons!1426) lt!24015) (= (_1!1022 (h!2007 lt!24015)) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(assert (=> d!11751 (= (getValueByKey!124 lt!24015 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) e!39433)))

(assert (= (and d!11751 c!7775) b!60017))

(assert (= (and d!11751 (not c!7775)) b!60018))

(assert (= (and b!60018 c!7776) b!60019))

(assert (= (and b!60018 (not c!7776)) b!60020))

(declare-fun m!52501 () Bool)

(assert (=> b!60019 m!52501))

(assert (=> d!11297 d!11751))

(declare-fun d!11753 () Bool)

(assert (=> d!11753 (= (getValueByKey!124 lt!24015 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) (Some!129 (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun lt!24521 () Unit!1551)

(assert (=> d!11753 (= lt!24521 (choose!311 lt!24015 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun e!39435 () Bool)

(assert (=> d!11753 e!39435))

(declare-fun res!33233 () Bool)

(assert (=> d!11753 (=> (not res!33233) (not e!39435))))

(assert (=> d!11753 (= res!33233 (isStrictlySorted!284 lt!24015))))

(assert (=> d!11753 (= (lemmaContainsTupThenGetReturnValue!41 lt!24015 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!24521)))

(declare-fun b!60021 () Bool)

(declare-fun res!33234 () Bool)

(assert (=> b!60021 (=> (not res!33234) (not e!39435))))

(assert (=> b!60021 (= res!33234 (containsKey!128 lt!24015 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun b!60022 () Bool)

(assert (=> b!60022 (= e!39435 (contains!684 lt!24015 (tuple2!2023 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(assert (= (and d!11753 res!33233) b!60021))

(assert (= (and b!60021 res!33234) b!60022))

(assert (=> d!11753 m!51001))

(declare-fun m!52503 () Bool)

(assert (=> d!11753 m!52503))

(declare-fun m!52505 () Bool)

(assert (=> d!11753 m!52505))

(declare-fun m!52507 () Bool)

(assert (=> b!60021 m!52507))

(declare-fun m!52509 () Bool)

(assert (=> b!60022 m!52509))

(assert (=> d!11297 d!11753))

(declare-fun b!60023 () Bool)

(declare-fun e!39438 () List!1430)

(declare-fun call!4530 () List!1430)

(assert (=> b!60023 (= e!39438 call!4530)))

(declare-fun b!60024 () Bool)

(declare-fun e!39437 () Bool)

(declare-fun lt!24522 () List!1430)

(assert (=> b!60024 (= e!39437 (contains!684 lt!24522 (tuple2!2023 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(declare-fun b!60025 () Bool)

(declare-fun e!39436 () List!1430)

(assert (=> b!60025 (= e!39436 (insertStrictlySorted!44 (t!4768 (toList!697 call!4333)) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun bm!4525 () Bool)

(declare-fun call!4528 () List!1430)

(declare-fun call!4529 () List!1430)

(assert (=> bm!4525 (= call!4528 call!4529)))

(declare-fun b!60026 () Bool)

(declare-fun e!39439 () List!1430)

(declare-fun e!39440 () List!1430)

(assert (=> b!60026 (= e!39439 e!39440)))

(declare-fun c!7778 () Bool)

(assert (=> b!60026 (= c!7778 (and ((_ is Cons!1426) (toList!697 call!4333)) (= (_1!1022 (h!2007 (toList!697 call!4333))) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(declare-fun d!11755 () Bool)

(assert (=> d!11755 e!39437))

(declare-fun res!33236 () Bool)

(assert (=> d!11755 (=> (not res!33236) (not e!39437))))

(assert (=> d!11755 (= res!33236 (isStrictlySorted!284 lt!24522))))

(assert (=> d!11755 (= lt!24522 e!39439)))

(declare-fun c!7780 () Bool)

(assert (=> d!11755 (= c!7780 (and ((_ is Cons!1426) (toList!697 call!4333)) (bvslt (_1!1022 (h!2007 (toList!697 call!4333))) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(assert (=> d!11755 (isStrictlySorted!284 (toList!697 call!4333))))

(assert (=> d!11755 (= (insertStrictlySorted!44 (toList!697 call!4333) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!24522)))

(declare-fun bm!4526 () Bool)

(assert (=> bm!4526 (= call!4530 call!4528)))

(declare-fun b!60027 () Bool)

(assert (=> b!60027 (= e!39438 call!4530)))

(declare-fun b!60028 () Bool)

(assert (=> b!60028 (= e!39439 call!4529)))

(declare-fun b!60029 () Bool)

(assert (=> b!60029 (= e!39440 call!4528)))

(declare-fun c!7777 () Bool)

(declare-fun b!60030 () Bool)

(assert (=> b!60030 (= e!39436 (ite c!7778 (t!4768 (toList!697 call!4333)) (ite c!7777 (Cons!1426 (h!2007 (toList!697 call!4333)) (t!4768 (toList!697 call!4333))) Nil!1427)))))

(declare-fun b!60031 () Bool)

(declare-fun res!33235 () Bool)

(assert (=> b!60031 (=> (not res!33235) (not e!39437))))

(assert (=> b!60031 (= res!33235 (containsKey!128 lt!24522 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun b!60032 () Bool)

(assert (=> b!60032 (= c!7777 (and ((_ is Cons!1426) (toList!697 call!4333)) (bvsgt (_1!1022 (h!2007 (toList!697 call!4333))) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(assert (=> b!60032 (= e!39440 e!39438)))

(declare-fun bm!4527 () Bool)

(assert (=> bm!4527 (= call!4529 ($colon$colon!60 e!39436 (ite c!7780 (h!2007 (toList!697 call!4333)) (tuple2!2023 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))))

(declare-fun c!7779 () Bool)

(assert (=> bm!4527 (= c!7779 c!7780)))

(assert (= (and d!11755 c!7780) b!60028))

(assert (= (and d!11755 (not c!7780)) b!60026))

(assert (= (and b!60026 c!7778) b!60029))

(assert (= (and b!60026 (not c!7778)) b!60032))

(assert (= (and b!60032 c!7777) b!60023))

(assert (= (and b!60032 (not c!7777)) b!60027))

(assert (= (or b!60023 b!60027) bm!4526))

(assert (= (or b!60029 bm!4526) bm!4525))

(assert (= (or b!60028 bm!4525) bm!4527))

(assert (= (and bm!4527 c!7779) b!60025))

(assert (= (and bm!4527 (not c!7779)) b!60030))

(assert (= (and d!11755 res!33236) b!60031))

(assert (= (and b!60031 res!33235) b!60024))

(declare-fun m!52511 () Bool)

(assert (=> d!11755 m!52511))

(declare-fun m!52513 () Bool)

(assert (=> d!11755 m!52513))

(declare-fun m!52515 () Bool)

(assert (=> bm!4527 m!52515))

(declare-fun m!52517 () Bool)

(assert (=> b!60025 m!52517))

(declare-fun m!52519 () Bool)

(assert (=> b!60031 m!52519))

(declare-fun m!52521 () Bool)

(assert (=> b!60024 m!52521))

(assert (=> d!11297 d!11755))

(declare-fun d!11757 () Bool)

(assert (=> d!11757 (contains!682 (getCurrentListMap!402 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)) (select (arr!1781 (_keys!3667 newMap!16)) (index!3032 lt!23832)))))

(assert (=> d!11757 true))

(declare-fun _$16!78 () Unit!1551)

(assert (=> d!11757 (= (choose!303 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) (index!3032 lt!23832) (defaultEntry!2043 newMap!16)) _$16!78)))

(declare-fun bs!2611 () Bool)

(assert (= bs!2611 d!11757))

(assert (=> bs!2611 m!50719))

(assert (=> bs!2611 m!50725))

(assert (=> bs!2611 m!50719))

(assert (=> bs!2611 m!50725))

(assert (=> bs!2611 m!50727))

(assert (=> d!11253 d!11757))

(assert (=> d!11253 d!11523))

(assert (=> b!59345 d!11687))

(assert (=> b!59241 d!11615))

(declare-fun b!60034 () Bool)

(declare-fun e!39441 () Option!130)

(declare-fun e!39442 () Option!130)

(assert (=> b!60034 (= e!39441 e!39442)))

(declare-fun c!7782 () Bool)

(assert (=> b!60034 (= c!7782 (and ((_ is Cons!1426) (toList!697 lt!24103)) (not (= (_1!1022 (h!2007 (toList!697 lt!24103))) (_1!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))))))

(declare-fun b!60033 () Bool)

(assert (=> b!60033 (= e!39441 (Some!129 (_2!1022 (h!2007 (toList!697 lt!24103)))))))

(declare-fun b!60035 () Bool)

(assert (=> b!60035 (= e!39442 (getValueByKey!124 (t!4768 (toList!697 lt!24103)) (_1!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun b!60036 () Bool)

(assert (=> b!60036 (= e!39442 None!128)))

(declare-fun d!11759 () Bool)

(declare-fun c!7781 () Bool)

(assert (=> d!11759 (= c!7781 (and ((_ is Cons!1426) (toList!697 lt!24103)) (= (_1!1022 (h!2007 (toList!697 lt!24103))) (_1!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(assert (=> d!11759 (= (getValueByKey!124 (toList!697 lt!24103) (_1!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))) e!39441)))

(assert (= (and d!11759 c!7781) b!60033))

(assert (= (and d!11759 (not c!7781)) b!60034))

(assert (= (and b!60034 c!7782) b!60035))

(assert (= (and b!60034 (not c!7782)) b!60036))

(declare-fun m!52523 () Bool)

(assert (=> b!60035 m!52523))

(assert (=> b!59352 d!11759))

(declare-fun b!60038 () Bool)

(declare-fun e!39443 () Option!130)

(declare-fun e!39444 () Option!130)

(assert (=> b!60038 (= e!39443 e!39444)))

(declare-fun c!7784 () Bool)

(assert (=> b!60038 (= c!7784 (and ((_ is Cons!1426) (toList!697 lt!24113)) (not (= (_1!1022 (h!2007 (toList!697 lt!24113))) (_1!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))))

(declare-fun b!60037 () Bool)

(assert (=> b!60037 (= e!39443 (Some!129 (_2!1022 (h!2007 (toList!697 lt!24113)))))))

(declare-fun b!60039 () Bool)

(assert (=> b!60039 (= e!39444 (getValueByKey!124 (t!4768 (toList!697 lt!24113)) (_1!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun b!60040 () Bool)

(assert (=> b!60040 (= e!39444 None!128)))

(declare-fun d!11761 () Bool)

(declare-fun c!7783 () Bool)

(assert (=> d!11761 (= c!7783 (and ((_ is Cons!1426) (toList!697 lt!24113)) (= (_1!1022 (h!2007 (toList!697 lt!24113))) (_1!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(assert (=> d!11761 (= (getValueByKey!124 (toList!697 lt!24113) (_1!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) e!39443)))

(assert (= (and d!11761 c!7783) b!60037))

(assert (= (and d!11761 (not c!7783)) b!60038))

(assert (= (and b!60038 c!7784) b!60039))

(assert (= (and b!60038 (not c!7784)) b!60040))

(declare-fun m!52525 () Bool)

(assert (=> b!60039 m!52525))

(assert (=> b!59359 d!11761))

(declare-fun d!11763 () Bool)

(declare-fun e!39445 () Bool)

(assert (=> d!11763 e!39445))

(declare-fun res!33237 () Bool)

(assert (=> d!11763 (=> res!33237 e!39445)))

(declare-fun lt!24525 () Bool)

(assert (=> d!11763 (= res!33237 (not lt!24525))))

(declare-fun lt!24524 () Bool)

(assert (=> d!11763 (= lt!24525 lt!24524)))

(declare-fun lt!24526 () Unit!1551)

(declare-fun e!39446 () Unit!1551)

(assert (=> d!11763 (= lt!24526 e!39446)))

(declare-fun c!7785 () Bool)

(assert (=> d!11763 (= c!7785 lt!24524)))

(assert (=> d!11763 (= lt!24524 (containsKey!128 (toList!697 lt!24144) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11763 (= (contains!682 lt!24144 #b0000000000000000000000000000000000000000000000000000000000000000) lt!24525)))

(declare-fun b!60041 () Bool)

(declare-fun lt!24523 () Unit!1551)

(assert (=> b!60041 (= e!39446 lt!24523)))

(assert (=> b!60041 (= lt!24523 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 lt!24144) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!60041 (isDefined!77 (getValueByKey!124 (toList!697 lt!24144) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60042 () Bool)

(declare-fun Unit!1602 () Unit!1551)

(assert (=> b!60042 (= e!39446 Unit!1602)))

(declare-fun b!60043 () Bool)

(assert (=> b!60043 (= e!39445 (isDefined!77 (getValueByKey!124 (toList!697 lt!24144) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11763 c!7785) b!60041))

(assert (= (and d!11763 (not c!7785)) b!60042))

(assert (= (and d!11763 (not res!33237)) b!60043))

(declare-fun m!52527 () Bool)

(assert (=> d!11763 m!52527))

(declare-fun m!52529 () Bool)

(assert (=> b!60041 m!52529))

(assert (=> b!60041 m!52177))

(assert (=> b!60041 m!52177))

(declare-fun m!52531 () Bool)

(assert (=> b!60041 m!52531))

(assert (=> b!60043 m!52177))

(assert (=> b!60043 m!52177))

(assert (=> b!60043 m!52531))

(assert (=> bm!4450 d!11763))

(declare-fun d!11765 () Bool)

(assert (=> d!11765 (isDefined!77 (getValueByKey!124 (toList!697 e!38829) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(declare-fun lt!24527 () Unit!1551)

(assert (=> d!11765 (= lt!24527 (choose!305 (toList!697 e!38829) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(declare-fun e!39447 () Bool)

(assert (=> d!11765 e!39447))

(declare-fun res!33238 () Bool)

(assert (=> d!11765 (=> (not res!33238) (not e!39447))))

(assert (=> d!11765 (= res!33238 (isStrictlySorted!284 (toList!697 e!38829)))))

(assert (=> d!11765 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 e!38829) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) lt!24527)))

(declare-fun b!60044 () Bool)

(assert (=> b!60044 (= e!39447 (containsKey!128 (toList!697 e!38829) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(assert (= (and d!11765 res!33238) b!60044))

(assert (=> d!11765 m!50529))

(assert (=> d!11765 m!51339))

(assert (=> d!11765 m!51339))

(assert (=> d!11765 m!51341))

(assert (=> d!11765 m!50529))

(declare-fun m!52533 () Bool)

(assert (=> d!11765 m!52533))

(declare-fun m!52535 () Bool)

(assert (=> d!11765 m!52535))

(assert (=> b!60044 m!50529))

(assert (=> b!60044 m!51335))

(assert (=> b!59410 d!11765))

(assert (=> b!59410 d!11543))

(assert (=> b!59410 d!11545))

(declare-fun d!11767 () Bool)

(declare-fun res!33240 () Bool)

(declare-fun e!39448 () Bool)

(assert (=> d!11767 (=> res!33240 e!39448)))

(assert (=> d!11767 (= res!33240 (bvsge #b00000000000000000000000000000000 (size!2011 (_keys!3667 (_2!1021 lt!23809)))))))

(assert (=> d!11767 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3667 (_2!1021 lt!23809)) (mask!5927 (_2!1021 lt!23809))) e!39448)))

(declare-fun bm!4528 () Bool)

(declare-fun call!4531 () Bool)

(assert (=> bm!4528 (= call!4531 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3667 (_2!1021 lt!23809)) (mask!5927 (_2!1021 lt!23809))))))

(declare-fun b!60045 () Bool)

(declare-fun e!39449 () Bool)

(assert (=> b!60045 (= e!39449 call!4531)))

(declare-fun b!60046 () Bool)

(assert (=> b!60046 (= e!39448 e!39449)))

(declare-fun c!7786 () Bool)

(assert (=> b!60046 (= c!7786 (validKeyInArray!0 (select (arr!1781 (_keys!3667 (_2!1021 lt!23809))) #b00000000000000000000000000000000)))))

(declare-fun b!60047 () Bool)

(declare-fun e!39450 () Bool)

(assert (=> b!60047 (= e!39449 e!39450)))

(declare-fun lt!24529 () (_ BitVec 64))

(assert (=> b!60047 (= lt!24529 (select (arr!1781 (_keys!3667 (_2!1021 lt!23809))) #b00000000000000000000000000000000))))

(declare-fun lt!24530 () Unit!1551)

(assert (=> b!60047 (= lt!24530 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3667 (_2!1021 lt!23809)) lt!24529 #b00000000000000000000000000000000))))

(assert (=> b!60047 (arrayContainsKey!0 (_keys!3667 (_2!1021 lt!23809)) lt!24529 #b00000000000000000000000000000000)))

(declare-fun lt!24528 () Unit!1551)

(assert (=> b!60047 (= lt!24528 lt!24530)))

(declare-fun res!33239 () Bool)

(assert (=> b!60047 (= res!33239 (= (seekEntryOrOpen!0 (select (arr!1781 (_keys!3667 (_2!1021 lt!23809))) #b00000000000000000000000000000000) (_keys!3667 (_2!1021 lt!23809)) (mask!5927 (_2!1021 lt!23809))) (Found!227 #b00000000000000000000000000000000)))))

(assert (=> b!60047 (=> (not res!33239) (not e!39450))))

(declare-fun b!60048 () Bool)

(assert (=> b!60048 (= e!39450 call!4531)))

(assert (= (and d!11767 (not res!33240)) b!60046))

(assert (= (and b!60046 c!7786) b!60047))

(assert (= (and b!60046 (not c!7786)) b!60045))

(assert (= (and b!60047 res!33239) b!60048))

(assert (= (or b!60048 b!60045) bm!4528))

(declare-fun m!52537 () Bool)

(assert (=> bm!4528 m!52537))

(assert (=> b!60046 m!51583))

(assert (=> b!60046 m!51583))

(assert (=> b!60046 m!51585))

(assert (=> b!60047 m!51583))

(declare-fun m!52539 () Bool)

(assert (=> b!60047 m!52539))

(declare-fun m!52541 () Bool)

(assert (=> b!60047 m!52541))

(assert (=> b!60047 m!51583))

(declare-fun m!52543 () Bool)

(assert (=> b!60047 m!52543))

(assert (=> b!59245 d!11767))

(assert (=> bm!4424 d!11309))

(declare-fun c!7789 () Bool)

(declare-fun call!4537 () ListLongMap!1363)

(declare-fun c!7792 () Bool)

(declare-fun call!4538 () ListLongMap!1363)

(declare-fun call!4535 () ListLongMap!1363)

(declare-fun call!4534 () ListLongMap!1363)

(declare-fun bm!4529 () Bool)

(assert (=> bm!4529 (= call!4535 (+!81 (ite c!7789 call!4534 (ite c!7792 call!4537 call!4538)) (ite (or c!7789 c!7792) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))))))

(declare-fun b!60049 () Bool)

(declare-fun e!39451 () ListLongMap!1363)

(declare-fun call!4532 () ListLongMap!1363)

(assert (=> b!60049 (= e!39451 call!4532)))

(declare-fun b!60050 () Bool)

(declare-fun c!7791 () Bool)

(assert (=> b!60050 (= c!7791 (and (not (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!39455 () ListLongMap!1363)

(assert (=> b!60050 (= e!39455 e!39451)))

(declare-fun b!60051 () Bool)

(declare-fun e!39458 () Bool)

(declare-fun call!4536 () Bool)

(assert (=> b!60051 (= e!39458 (not call!4536))))

(declare-fun e!39457 () Bool)

(declare-fun b!60053 () Bool)

(assert (=> b!60053 (= e!39457 (validKeyInArray!0 (select (arr!1781 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!60054 () Bool)

(declare-fun e!39461 () Bool)

(assert (=> b!60054 (= e!39458 e!39461)))

(declare-fun res!33249 () Bool)

(assert (=> b!60054 (= res!33249 call!4536)))

(assert (=> b!60054 (=> (not res!33249) (not e!39461))))

(declare-fun b!60055 () Bool)

(declare-fun e!39463 () Bool)

(assert (=> b!60055 (= e!39463 e!39458)))

(declare-fun c!7790 () Bool)

(assert (=> b!60055 (= c!7790 (not (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!60056 () Bool)

(declare-fun e!39459 () Bool)

(declare-fun call!4533 () Bool)

(assert (=> b!60056 (= e!39459 (not call!4533))))

(declare-fun b!60057 () Bool)

(declare-fun e!39452 () Bool)

(declare-fun lt!24549 () ListLongMap!1363)

(assert (=> b!60057 (= e!39452 (= (apply!66 lt!24549 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1959 newMap!16)))))

(declare-fun b!60058 () Bool)

(declare-fun e!39453 () ListLongMap!1363)

(assert (=> b!60058 (= e!39453 e!39455)))

(assert (=> b!60058 (= c!7792 (and (not (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!60059 () Bool)

(declare-fun e!39460 () Unit!1551)

(declare-fun Unit!1603 () Unit!1551)

(assert (=> b!60059 (= e!39460 Unit!1603)))

(declare-fun bm!4530 () Bool)

(assert (=> bm!4530 (= call!4533 (contains!682 lt!24549 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60060 () Bool)

(declare-fun res!33241 () Bool)

(assert (=> b!60060 (=> (not res!33241) (not e!39463))))

(declare-fun e!39454 () Bool)

(assert (=> b!60060 (= res!33241 e!39454)))

(declare-fun res!33242 () Bool)

(assert (=> b!60060 (=> res!33242 e!39454)))

(declare-fun e!39462 () Bool)

(assert (=> b!60060 (= res!33242 (not e!39462))))

(declare-fun res!33244 () Bool)

(assert (=> b!60060 (=> (not res!33244) (not e!39462))))

(assert (=> b!60060 (= res!33244 (bvslt #b00000000000000000000000000000000 (size!2011 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16))))))))

(declare-fun b!60052 () Bool)

(assert (=> b!60052 (= e!39453 (+!81 call!4535 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))))))

(declare-fun d!11769 () Bool)

(assert (=> d!11769 e!39463))

(declare-fun res!33248 () Bool)

(assert (=> d!11769 (=> (not res!33248) (not e!39463))))

(assert (=> d!11769 (= res!33248 (or (bvsge #b00000000000000000000000000000000 (size!2011 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16))))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16))))))))))

(declare-fun lt!24534 () ListLongMap!1363)

(assert (=> d!11769 (= lt!24549 lt!24534)))

(declare-fun lt!24537 () Unit!1551)

(assert (=> d!11769 (= lt!24537 e!39460)))

(declare-fun c!7787 () Bool)

(assert (=> d!11769 (= c!7787 e!39457)))

(declare-fun res!33245 () Bool)

(assert (=> d!11769 (=> (not res!33245) (not e!39457))))

(assert (=> d!11769 (= res!33245 (bvslt #b00000000000000000000000000000000 (size!2011 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16))))))))

(assert (=> d!11769 (= lt!24534 e!39453)))

(assert (=> d!11769 (= c!7789 (and (not (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11769 (validMask!0 (mask!5927 newMap!16))))

(assert (=> d!11769 (= (getCurrentListMap!402 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16))) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16))) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)) lt!24549)))

(declare-fun bm!4531 () Bool)

(assert (=> bm!4531 (= call!4538 call!4537)))

(declare-fun b!60061 () Bool)

(assert (=> b!60061 (= e!39462 (validKeyInArray!0 (select (arr!1781 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!60062 () Bool)

(assert (=> b!60062 (= e!39459 e!39452)))

(declare-fun res!33247 () Bool)

(assert (=> b!60062 (= res!33247 call!4533)))

(assert (=> b!60062 (=> (not res!33247) (not e!39452))))

(declare-fun bm!4532 () Bool)

(assert (=> bm!4532 (= call!4537 call!4534)))

(declare-fun b!60063 () Bool)

(assert (=> b!60063 (= e!39451 call!4538)))

(declare-fun bm!4533 () Bool)

(assert (=> bm!4533 (= call!4532 call!4535)))

(declare-fun bm!4534 () Bool)

(assert (=> bm!4534 (= call!4534 (getCurrentListMapNoExtraKeys!44 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16))) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16))) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun e!39456 () Bool)

(declare-fun b!60064 () Bool)

(assert (=> b!60064 (= e!39456 (= (apply!66 lt!24549 (select (arr!1781 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16)))) #b00000000000000000000000000000000)) (get!1066 (select (arr!1782 (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2043 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!60064 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2012 (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16))))))))

(assert (=> b!60064 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16))))))))

(declare-fun b!60065 () Bool)

(declare-fun lt!24545 () Unit!1551)

(assert (=> b!60065 (= e!39460 lt!24545)))

(declare-fun lt!24538 () ListLongMap!1363)

(assert (=> b!60065 (= lt!24538 (getCurrentListMapNoExtraKeys!44 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16))) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16))) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!24533 () (_ BitVec 64))

(assert (=> b!60065 (= lt!24533 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24531 () (_ BitVec 64))

(assert (=> b!60065 (= lt!24531 (select (arr!1781 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!24546 () Unit!1551)

(assert (=> b!60065 (= lt!24546 (addStillContains!42 lt!24538 lt!24533 (zeroValue!1959 newMap!16) lt!24531))))

(assert (=> b!60065 (contains!682 (+!81 lt!24538 (tuple2!2023 lt!24533 (zeroValue!1959 newMap!16))) lt!24531)))

(declare-fun lt!24552 () Unit!1551)

(assert (=> b!60065 (= lt!24552 lt!24546)))

(declare-fun lt!24535 () ListLongMap!1363)

(assert (=> b!60065 (= lt!24535 (getCurrentListMapNoExtraKeys!44 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16))) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16))) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!24543 () (_ BitVec 64))

(assert (=> b!60065 (= lt!24543 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24548 () (_ BitVec 64))

(assert (=> b!60065 (= lt!24548 (select (arr!1781 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!24541 () Unit!1551)

(assert (=> b!60065 (= lt!24541 (addApplyDifferent!42 lt!24535 lt!24543 (minValue!1959 newMap!16) lt!24548))))

(assert (=> b!60065 (= (apply!66 (+!81 lt!24535 (tuple2!2023 lt!24543 (minValue!1959 newMap!16))) lt!24548) (apply!66 lt!24535 lt!24548))))

(declare-fun lt!24547 () Unit!1551)

(assert (=> b!60065 (= lt!24547 lt!24541)))

(declare-fun lt!24536 () ListLongMap!1363)

(assert (=> b!60065 (= lt!24536 (getCurrentListMapNoExtraKeys!44 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16))) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16))) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!24544 () (_ BitVec 64))

(assert (=> b!60065 (= lt!24544 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24532 () (_ BitVec 64))

(assert (=> b!60065 (= lt!24532 (select (arr!1781 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!24550 () Unit!1551)

(assert (=> b!60065 (= lt!24550 (addApplyDifferent!42 lt!24536 lt!24544 (zeroValue!1959 newMap!16) lt!24532))))

(assert (=> b!60065 (= (apply!66 (+!81 lt!24536 (tuple2!2023 lt!24544 (zeroValue!1959 newMap!16))) lt!24532) (apply!66 lt!24536 lt!24532))))

(declare-fun lt!24539 () Unit!1551)

(assert (=> b!60065 (= lt!24539 lt!24550)))

(declare-fun lt!24542 () ListLongMap!1363)

(assert (=> b!60065 (= lt!24542 (getCurrentListMapNoExtraKeys!44 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16))) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16))) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!24540 () (_ BitVec 64))

(assert (=> b!60065 (= lt!24540 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24551 () (_ BitVec 64))

(assert (=> b!60065 (= lt!24551 (select (arr!1781 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16)))) #b00000000000000000000000000000000))))

(assert (=> b!60065 (= lt!24545 (addApplyDifferent!42 lt!24542 lt!24540 (minValue!1959 newMap!16) lt!24551))))

(assert (=> b!60065 (= (apply!66 (+!81 lt!24542 (tuple2!2023 lt!24540 (minValue!1959 newMap!16))) lt!24551) (apply!66 lt!24542 lt!24551))))

(declare-fun b!60066 () Bool)

(assert (=> b!60066 (= e!39454 e!39456)))

(declare-fun res!33243 () Bool)

(assert (=> b!60066 (=> (not res!33243) (not e!39456))))

(assert (=> b!60066 (= res!33243 (contains!682 lt!24549 (select (arr!1781 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> b!60066 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16))))))))

(declare-fun b!60067 () Bool)

(declare-fun res!33246 () Bool)

(assert (=> b!60067 (=> (not res!33246) (not e!39463))))

(assert (=> b!60067 (= res!33246 e!39459)))

(declare-fun c!7788 () Bool)

(assert (=> b!60067 (= c!7788 (not (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!4535 () Bool)

(assert (=> bm!4535 (= call!4536 (contains!682 lt!24549 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60068 () Bool)

(assert (=> b!60068 (= e!39455 call!4532)))

(declare-fun b!60069 () Bool)

(assert (=> b!60069 (= e!39461 (= (apply!66 lt!24549 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1959 newMap!16)))))

(assert (= (and d!11769 c!7789) b!60052))

(assert (= (and d!11769 (not c!7789)) b!60058))

(assert (= (and b!60058 c!7792) b!60068))

(assert (= (and b!60058 (not c!7792)) b!60050))

(assert (= (and b!60050 c!7791) b!60049))

(assert (= (and b!60050 (not c!7791)) b!60063))

(assert (= (or b!60049 b!60063) bm!4531))

(assert (= (or b!60068 bm!4531) bm!4532))

(assert (= (or b!60068 b!60049) bm!4533))

(assert (= (or b!60052 bm!4532) bm!4534))

(assert (= (or b!60052 bm!4533) bm!4529))

(assert (= (and d!11769 res!33245) b!60053))

(assert (= (and d!11769 c!7787) b!60065))

(assert (= (and d!11769 (not c!7787)) b!60059))

(assert (= (and d!11769 res!33248) b!60060))

(assert (= (and b!60060 res!33244) b!60061))

(assert (= (and b!60060 (not res!33242)) b!60066))

(assert (= (and b!60066 res!33243) b!60064))

(assert (= (and b!60060 res!33241) b!60067))

(assert (= (and b!60067 c!7788) b!60062))

(assert (= (and b!60067 (not c!7788)) b!60056))

(assert (= (and b!60062 res!33247) b!60057))

(assert (= (or b!60062 b!60056) bm!4530))

(assert (= (and b!60067 res!33246) b!60055))

(assert (= (and b!60055 c!7790) b!60054))

(assert (= (and b!60055 (not c!7790)) b!60051))

(assert (= (and b!60054 res!33249) b!60069))

(assert (= (or b!60054 b!60051) bm!4535))

(declare-fun b_lambda!2641 () Bool)

(assert (=> (not b_lambda!2641) (not b!60064)))

(assert (=> b!60064 t!4775))

(declare-fun b_and!3647 () Bool)

(assert (= b_and!3643 (and (=> t!4775 result!2381) b_and!3647)))

(assert (=> b!60064 t!4777))

(declare-fun b_and!3649 () Bool)

(assert (= b_and!3645 (and (=> t!4777 result!2383) b_and!3649)))

(declare-fun m!52545 () Bool)

(assert (=> b!60052 m!52545))

(declare-fun m!52547 () Bool)

(assert (=> bm!4534 m!52547))

(declare-fun m!52549 () Bool)

(assert (=> bm!4529 m!52549))

(declare-fun m!52551 () Bool)

(assert (=> b!60057 m!52551))

(declare-fun m!52553 () Bool)

(assert (=> b!60061 m!52553))

(assert (=> b!60061 m!52553))

(declare-fun m!52555 () Bool)

(assert (=> b!60061 m!52555))

(declare-fun m!52557 () Bool)

(assert (=> bm!4530 m!52557))

(declare-fun m!52559 () Bool)

(assert (=> b!60064 m!52559))

(assert (=> b!60064 m!52553))

(declare-fun m!52561 () Bool)

(assert (=> b!60064 m!52561))

(assert (=> b!60064 m!50813))

(assert (=> b!60064 m!52559))

(assert (=> b!60064 m!50813))

(declare-fun m!52563 () Bool)

(assert (=> b!60064 m!52563))

(assert (=> b!60064 m!52553))

(declare-fun m!52565 () Bool)

(assert (=> b!60069 m!52565))

(assert (=> b!60066 m!52553))

(assert (=> b!60066 m!52553))

(declare-fun m!52567 () Bool)

(assert (=> b!60066 m!52567))

(assert (=> b!60053 m!52553))

(assert (=> b!60053 m!52553))

(assert (=> b!60053 m!52555))

(assert (=> d!11769 m!50771))

(declare-fun m!52569 () Bool)

(assert (=> bm!4535 m!52569))

(declare-fun m!52571 () Bool)

(assert (=> b!60065 m!52571))

(declare-fun m!52573 () Bool)

(assert (=> b!60065 m!52573))

(declare-fun m!52575 () Bool)

(assert (=> b!60065 m!52575))

(declare-fun m!52577 () Bool)

(assert (=> b!60065 m!52577))

(assert (=> b!60065 m!52571))

(declare-fun m!52579 () Bool)

(assert (=> b!60065 m!52579))

(declare-fun m!52581 () Bool)

(assert (=> b!60065 m!52581))

(declare-fun m!52583 () Bool)

(assert (=> b!60065 m!52583))

(assert (=> b!60065 m!52547))

(declare-fun m!52585 () Bool)

(assert (=> b!60065 m!52585))

(declare-fun m!52587 () Bool)

(assert (=> b!60065 m!52587))

(declare-fun m!52589 () Bool)

(assert (=> b!60065 m!52589))

(assert (=> b!60065 m!52553))

(declare-fun m!52591 () Bool)

(assert (=> b!60065 m!52591))

(declare-fun m!52593 () Bool)

(assert (=> b!60065 m!52593))

(declare-fun m!52595 () Bool)

(assert (=> b!60065 m!52595))

(assert (=> b!60065 m!52585))

(declare-fun m!52597 () Bool)

(assert (=> b!60065 m!52597))

(assert (=> b!60065 m!52581))

(declare-fun m!52599 () Bool)

(assert (=> b!60065 m!52599))

(assert (=> b!60065 m!52591))

(assert (=> d!11257 d!11769))

(declare-fun d!11771 () Bool)

(assert (=> d!11771 (arrayContainsKey!0 lt!23942 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(declare-fun lt!24553 () Unit!1551)

(assert (=> d!11771 (= lt!24553 (choose!13 lt!23942 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832))))))

(assert (=> d!11771 (bvsge (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) #b00000000000000000000000000000000)))

(assert (=> d!11771 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!23942 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832))) lt!24553)))

(declare-fun bs!2612 () Bool)

(assert (= bs!2612 d!11771))

(assert (=> bs!2612 m!50529))

(assert (=> bs!2612 m!50875))

(assert (=> bs!2612 m!50529))

(declare-fun m!52601 () Bool)

(assert (=> bs!2612 m!52601))

(assert (=> d!11257 d!11771))

(declare-fun d!11773 () Bool)

(declare-fun e!39464 () Bool)

(assert (=> d!11773 e!39464))

(declare-fun res!33250 () Bool)

(assert (=> d!11773 (=> (not res!33250) (not e!39464))))

(assert (=> d!11773 (= res!33250 (and (bvsge (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) #b00000000000000000000000000000000) (bvslt (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (size!2011 lt!23964))))))

(declare-fun lt!24554 () Unit!1551)

(assert (=> d!11773 (= lt!24554 (choose!303 lt!23964 lt!23958 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (defaultEntry!2043 newMap!16)))))

(assert (=> d!11773 (validMask!0 (mask!5927 newMap!16))))

(assert (=> d!11773 (= (lemmaValidKeyInArrayIsInListMap!76 lt!23964 lt!23958 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (defaultEntry!2043 newMap!16)) lt!24554)))

(declare-fun b!60070 () Bool)

(assert (=> b!60070 (= e!39464 (contains!682 (getCurrentListMap!402 lt!23964 lt!23958 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)) (select (arr!1781 lt!23964) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)))))))

(assert (= (and d!11773 res!33250) b!60070))

(declare-fun m!52603 () Bool)

(assert (=> d!11773 m!52603))

(assert (=> d!11773 m!50771))

(assert (=> b!60070 m!50883))

(declare-fun m!52605 () Bool)

(assert (=> b!60070 m!52605))

(assert (=> b!60070 m!50883))

(assert (=> b!60070 m!52605))

(declare-fun m!52607 () Bool)

(assert (=> b!60070 m!52607))

(assert (=> d!11257 d!11773))

(assert (=> d!11257 d!11539))

(assert (=> d!11257 d!11307))

(declare-fun b!60071 () Bool)

(declare-fun e!39466 () (_ BitVec 32))

(declare-fun call!4539 () (_ BitVec 32))

(assert (=> b!60071 (= e!39466 (bvadd #b00000000000000000000000000000001 call!4539))))

(declare-fun bm!4536 () Bool)

(assert (=> bm!4536 (= call!4539 (arrayCountValidKeys!0 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2011 (_keys!3667 newMap!16))))))

(declare-fun b!60072 () Bool)

(declare-fun e!39465 () (_ BitVec 32))

(assert (=> b!60072 (= e!39465 e!39466)))

(declare-fun c!7794 () Bool)

(assert (=> b!60072 (= c!7794 (validKeyInArray!0 (select (arr!1781 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!60073 () Bool)

(assert (=> b!60073 (= e!39465 #b00000000000000000000000000000000)))

(declare-fun b!60074 () Bool)

(assert (=> b!60074 (= e!39466 call!4539)))

(declare-fun d!11775 () Bool)

(declare-fun lt!24555 () (_ BitVec 32))

(assert (=> d!11775 (and (bvsge lt!24555 #b00000000000000000000000000000000) (bvsle lt!24555 (bvsub (size!2011 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> d!11775 (= lt!24555 e!39465)))

(declare-fun c!7793 () Bool)

(assert (=> d!11775 (= c!7793 (bvsge #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(assert (=> d!11775 (and (bvsle #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2011 (_keys!3667 newMap!16)) (size!2011 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16))))))))

(assert (=> d!11775 (= (arrayCountValidKeys!0 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16))) #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))) lt!24555)))

(assert (= (and d!11775 c!7793) b!60073))

(assert (= (and d!11775 (not c!7793)) b!60072))

(assert (= (and b!60072 c!7794) b!60071))

(assert (= (and b!60072 (not c!7794)) b!60074))

(assert (= (or b!60071 b!60074) bm!4536))

(declare-fun m!52609 () Bool)

(assert (=> bm!4536 m!52609))

(assert (=> b!60072 m!52553))

(assert (=> b!60072 m!52553))

(assert (=> b!60072 m!52555))

(assert (=> d!11257 d!11775))

(assert (=> d!11257 d!11271))

(assert (=> d!11257 d!11357))

(declare-fun d!11777 () Bool)

(declare-fun e!39472 () Bool)

(assert (=> d!11777 e!39472))

(declare-fun res!33260 () Bool)

(assert (=> d!11777 (=> (not res!33260) (not e!39472))))

(assert (=> d!11777 (= res!33260 (and (bvsge (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) #b00000000000000000000000000000000) (bvslt (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (size!2011 (_keys!3667 newMap!16)))))))

(declare-fun lt!24558 () Unit!1551)

(declare-fun choose!1 (array!3721 (_ BitVec 32) (_ BitVec 64)) Unit!1551)

(assert (=> d!11777 (= lt!24558 (choose!1 (_keys!3667 newMap!16) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(declare-fun e!39471 () Bool)

(assert (=> d!11777 e!39471))

(declare-fun res!33259 () Bool)

(assert (=> d!11777 (=> (not res!33259) (not e!39471))))

(assert (=> d!11777 (= res!33259 (and (bvsge (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) #b00000000000000000000000000000000) (bvslt (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (size!2011 (_keys!3667 newMap!16)))))))

(assert (=> d!11777 (= (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!3667 newMap!16) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) lt!24558)))

(declare-fun b!60083 () Bool)

(declare-fun res!33262 () Bool)

(assert (=> b!60083 (=> (not res!33262) (not e!39471))))

(assert (=> b!60083 (= res!33262 (not (validKeyInArray!0 (select (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832))))))))

(declare-fun b!60086 () Bool)

(assert (=> b!60086 (= e!39472 (= (arrayCountValidKeys!0 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16))) #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!3667 newMap!16) #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))) #b00000000000000000000000000000001)))))

(declare-fun b!60085 () Bool)

(assert (=> b!60085 (= e!39471 (bvslt (size!2011 (_keys!3667 newMap!16)) #b01111111111111111111111111111111))))

(declare-fun b!60084 () Bool)

(declare-fun res!33261 () Bool)

(assert (=> b!60084 (=> (not res!33261) (not e!39471))))

(assert (=> b!60084 (= res!33261 (validKeyInArray!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(assert (= (and d!11777 res!33259) b!60083))

(assert (= (and b!60083 res!33262) b!60084))

(assert (= (and b!60084 res!33261) b!60085))

(assert (= (and d!11777 res!33260) b!60086))

(assert (=> d!11777 m!50529))

(declare-fun m!52611 () Bool)

(assert (=> d!11777 m!52611))

(declare-fun m!52613 () Bool)

(assert (=> b!60083 m!52613))

(assert (=> b!60083 m!52613))

(declare-fun m!52615 () Bool)

(assert (=> b!60083 m!52615))

(assert (=> b!60086 m!50885))

(assert (=> b!60086 m!50879))

(assert (=> b!60086 m!50745))

(assert (=> b!60084 m!50529))

(assert (=> b!60084 m!50763))

(assert (=> d!11257 d!11777))

(declare-fun b!60087 () Bool)

(declare-fun e!39474 () (_ BitVec 32))

(declare-fun call!4540 () (_ BitVec 32))

(assert (=> b!60087 (= e!39474 (bvadd #b00000000000000000000000000000001 call!4540))))

(declare-fun bm!4537 () Bool)

(assert (=> bm!4537 (= call!4540 (arrayCountValidKeys!0 lt!23962 (bvadd (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) #b00000000000000000000000000000001) (bvadd (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) #b00000000000000000000000000000001)))))

(declare-fun b!60088 () Bool)

(declare-fun e!39473 () (_ BitVec 32))

(assert (=> b!60088 (= e!39473 e!39474)))

(declare-fun c!7796 () Bool)

(assert (=> b!60088 (= c!7796 (validKeyInArray!0 (select (arr!1781 lt!23962) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)))))))

(declare-fun b!60089 () Bool)

(assert (=> b!60089 (= e!39473 #b00000000000000000000000000000000)))

(declare-fun b!60090 () Bool)

(assert (=> b!60090 (= e!39474 call!4540)))

(declare-fun lt!24559 () (_ BitVec 32))

(declare-fun d!11779 () Bool)

(assert (=> d!11779 (and (bvsge lt!24559 #b00000000000000000000000000000000) (bvsle lt!24559 (bvsub (size!2011 lt!23962) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)))))))

(assert (=> d!11779 (= lt!24559 e!39473)))

(declare-fun c!7795 () Bool)

(assert (=> d!11779 (= c!7795 (bvsge (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (bvadd (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) #b00000000000000000000000000000001)))))

(assert (=> d!11779 (and (bvsle (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (bvadd (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) #b00000000000000000000000000000001)) (bvsge (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) #b00000000000000000000000000000000) (bvsle (bvadd (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) #b00000000000000000000000000000001) (size!2011 lt!23962)))))

(assert (=> d!11779 (= (arrayCountValidKeys!0 lt!23962 (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (bvadd (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) #b00000000000000000000000000000001)) lt!24559)))

(assert (= (and d!11779 c!7795) b!60089))

(assert (= (and d!11779 (not c!7795)) b!60088))

(assert (= (and b!60088 c!7796) b!60087))

(assert (= (and b!60088 (not c!7796)) b!60090))

(assert (= (or b!60087 b!60090) bm!4537))

(declare-fun m!52617 () Bool)

(assert (=> bm!4537 m!52617))

(declare-fun m!52619 () Bool)

(assert (=> b!60088 m!52619))

(assert (=> b!60088 m!52619))

(declare-fun m!52621 () Bool)

(assert (=> b!60088 m!52621))

(assert (=> d!11257 d!11779))

(declare-fun call!4543 () ListLongMap!1363)

(declare-fun call!4544 () ListLongMap!1363)

(declare-fun call!4546 () ListLongMap!1363)

(declare-fun call!4547 () ListLongMap!1363)

(declare-fun bm!4538 () Bool)

(declare-fun c!7802 () Bool)

(declare-fun c!7799 () Bool)

(assert (=> bm!4538 (= call!4544 (+!81 (ite c!7799 call!4543 (ite c!7802 call!4546 call!4547)) (ite (or c!7799 c!7802) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))))))

(declare-fun b!60091 () Bool)

(declare-fun e!39475 () ListLongMap!1363)

(declare-fun call!4541 () ListLongMap!1363)

(assert (=> b!60091 (= e!39475 call!4541)))

(declare-fun b!60092 () Bool)

(declare-fun c!7801 () Bool)

(assert (=> b!60092 (= c!7801 (and (not (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!39479 () ListLongMap!1363)

(assert (=> b!60092 (= e!39479 e!39475)))

(declare-fun b!60093 () Bool)

(declare-fun e!39482 () Bool)

(declare-fun call!4545 () Bool)

(assert (=> b!60093 (= e!39482 (not call!4545))))

(declare-fun b!60095 () Bool)

(declare-fun e!39481 () Bool)

(assert (=> b!60095 (= e!39481 (validKeyInArray!0 (select (arr!1781 lt!23964) #b00000000000000000000000000000000)))))

(declare-fun b!60096 () Bool)

(declare-fun e!39485 () Bool)

(assert (=> b!60096 (= e!39482 e!39485)))

(declare-fun res!33271 () Bool)

(assert (=> b!60096 (= res!33271 call!4545)))

(assert (=> b!60096 (=> (not res!33271) (not e!39485))))

(declare-fun b!60097 () Bool)

(declare-fun e!39487 () Bool)

(assert (=> b!60097 (= e!39487 e!39482)))

(declare-fun c!7800 () Bool)

(assert (=> b!60097 (= c!7800 (not (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!60098 () Bool)

(declare-fun e!39483 () Bool)

(declare-fun call!4542 () Bool)

(assert (=> b!60098 (= e!39483 (not call!4542))))

(declare-fun b!60099 () Bool)

(declare-fun e!39476 () Bool)

(declare-fun lt!24578 () ListLongMap!1363)

(assert (=> b!60099 (= e!39476 (= (apply!66 lt!24578 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1959 newMap!16)))))

(declare-fun b!60100 () Bool)

(declare-fun e!39477 () ListLongMap!1363)

(assert (=> b!60100 (= e!39477 e!39479)))

(assert (=> b!60100 (= c!7802 (and (not (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!60101 () Bool)

(declare-fun e!39484 () Unit!1551)

(declare-fun Unit!1604 () Unit!1551)

(assert (=> b!60101 (= e!39484 Unit!1604)))

(declare-fun bm!4539 () Bool)

(assert (=> bm!4539 (= call!4542 (contains!682 lt!24578 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60102 () Bool)

(declare-fun res!33263 () Bool)

(assert (=> b!60102 (=> (not res!33263) (not e!39487))))

(declare-fun e!39478 () Bool)

(assert (=> b!60102 (= res!33263 e!39478)))

(declare-fun res!33264 () Bool)

(assert (=> b!60102 (=> res!33264 e!39478)))

(declare-fun e!39486 () Bool)

(assert (=> b!60102 (= res!33264 (not e!39486))))

(declare-fun res!33266 () Bool)

(assert (=> b!60102 (=> (not res!33266) (not e!39486))))

(assert (=> b!60102 (= res!33266 (bvslt #b00000000000000000000000000000000 (size!2011 lt!23964)))))

(declare-fun b!60094 () Bool)

(assert (=> b!60094 (= e!39477 (+!81 call!4544 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))))))

(declare-fun d!11781 () Bool)

(assert (=> d!11781 e!39487))

(declare-fun res!33270 () Bool)

(assert (=> d!11781 (=> (not res!33270) (not e!39487))))

(assert (=> d!11781 (= res!33270 (or (bvsge #b00000000000000000000000000000000 (size!2011 lt!23964)) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 lt!23964)))))))

(declare-fun lt!24563 () ListLongMap!1363)

(assert (=> d!11781 (= lt!24578 lt!24563)))

(declare-fun lt!24566 () Unit!1551)

(assert (=> d!11781 (= lt!24566 e!39484)))

(declare-fun c!7797 () Bool)

(assert (=> d!11781 (= c!7797 e!39481)))

(declare-fun res!33267 () Bool)

(assert (=> d!11781 (=> (not res!33267) (not e!39481))))

(assert (=> d!11781 (= res!33267 (bvslt #b00000000000000000000000000000000 (size!2011 lt!23964)))))

(assert (=> d!11781 (= lt!24563 e!39477)))

(assert (=> d!11781 (= c!7799 (and (not (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11781 (validMask!0 (mask!5927 newMap!16))))

(assert (=> d!11781 (= (getCurrentListMap!402 lt!23964 lt!23958 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)) lt!24578)))

(declare-fun bm!4540 () Bool)

(assert (=> bm!4540 (= call!4547 call!4546)))

(declare-fun b!60103 () Bool)

(assert (=> b!60103 (= e!39486 (validKeyInArray!0 (select (arr!1781 lt!23964) #b00000000000000000000000000000000)))))

(declare-fun b!60104 () Bool)

(assert (=> b!60104 (= e!39483 e!39476)))

(declare-fun res!33269 () Bool)

(assert (=> b!60104 (= res!33269 call!4542)))

(assert (=> b!60104 (=> (not res!33269) (not e!39476))))

(declare-fun bm!4541 () Bool)

(assert (=> bm!4541 (= call!4546 call!4543)))

(declare-fun b!60105 () Bool)

(assert (=> b!60105 (= e!39475 call!4547)))

(declare-fun bm!4542 () Bool)

(assert (=> bm!4542 (= call!4541 call!4544)))

(declare-fun bm!4543 () Bool)

(assert (=> bm!4543 (= call!4543 (getCurrentListMapNoExtraKeys!44 lt!23964 lt!23958 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun e!39480 () Bool)

(declare-fun b!60106 () Bool)

(assert (=> b!60106 (= e!39480 (= (apply!66 lt!24578 (select (arr!1781 lt!23964) #b00000000000000000000000000000000)) (get!1066 (select (arr!1782 lt!23958) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2043 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!60106 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2012 lt!23958)))))

(assert (=> b!60106 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 lt!23964)))))

(declare-fun b!60107 () Bool)

(declare-fun lt!24574 () Unit!1551)

(assert (=> b!60107 (= e!39484 lt!24574)))

(declare-fun lt!24567 () ListLongMap!1363)

(assert (=> b!60107 (= lt!24567 (getCurrentListMapNoExtraKeys!44 lt!23964 lt!23958 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!24562 () (_ BitVec 64))

(assert (=> b!60107 (= lt!24562 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24560 () (_ BitVec 64))

(assert (=> b!60107 (= lt!24560 (select (arr!1781 lt!23964) #b00000000000000000000000000000000))))

(declare-fun lt!24575 () Unit!1551)

(assert (=> b!60107 (= lt!24575 (addStillContains!42 lt!24567 lt!24562 (zeroValue!1959 newMap!16) lt!24560))))

(assert (=> b!60107 (contains!682 (+!81 lt!24567 (tuple2!2023 lt!24562 (zeroValue!1959 newMap!16))) lt!24560)))

(declare-fun lt!24581 () Unit!1551)

(assert (=> b!60107 (= lt!24581 lt!24575)))

(declare-fun lt!24564 () ListLongMap!1363)

(assert (=> b!60107 (= lt!24564 (getCurrentListMapNoExtraKeys!44 lt!23964 lt!23958 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!24572 () (_ BitVec 64))

(assert (=> b!60107 (= lt!24572 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24577 () (_ BitVec 64))

(assert (=> b!60107 (= lt!24577 (select (arr!1781 lt!23964) #b00000000000000000000000000000000))))

(declare-fun lt!24570 () Unit!1551)

(assert (=> b!60107 (= lt!24570 (addApplyDifferent!42 lt!24564 lt!24572 (minValue!1959 newMap!16) lt!24577))))

(assert (=> b!60107 (= (apply!66 (+!81 lt!24564 (tuple2!2023 lt!24572 (minValue!1959 newMap!16))) lt!24577) (apply!66 lt!24564 lt!24577))))

(declare-fun lt!24576 () Unit!1551)

(assert (=> b!60107 (= lt!24576 lt!24570)))

(declare-fun lt!24565 () ListLongMap!1363)

(assert (=> b!60107 (= lt!24565 (getCurrentListMapNoExtraKeys!44 lt!23964 lt!23958 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!24573 () (_ BitVec 64))

(assert (=> b!60107 (= lt!24573 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24561 () (_ BitVec 64))

(assert (=> b!60107 (= lt!24561 (select (arr!1781 lt!23964) #b00000000000000000000000000000000))))

(declare-fun lt!24579 () Unit!1551)

(assert (=> b!60107 (= lt!24579 (addApplyDifferent!42 lt!24565 lt!24573 (zeroValue!1959 newMap!16) lt!24561))))

(assert (=> b!60107 (= (apply!66 (+!81 lt!24565 (tuple2!2023 lt!24573 (zeroValue!1959 newMap!16))) lt!24561) (apply!66 lt!24565 lt!24561))))

(declare-fun lt!24568 () Unit!1551)

(assert (=> b!60107 (= lt!24568 lt!24579)))

(declare-fun lt!24571 () ListLongMap!1363)

(assert (=> b!60107 (= lt!24571 (getCurrentListMapNoExtraKeys!44 lt!23964 lt!23958 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!24569 () (_ BitVec 64))

(assert (=> b!60107 (= lt!24569 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24580 () (_ BitVec 64))

(assert (=> b!60107 (= lt!24580 (select (arr!1781 lt!23964) #b00000000000000000000000000000000))))

(assert (=> b!60107 (= lt!24574 (addApplyDifferent!42 lt!24571 lt!24569 (minValue!1959 newMap!16) lt!24580))))

(assert (=> b!60107 (= (apply!66 (+!81 lt!24571 (tuple2!2023 lt!24569 (minValue!1959 newMap!16))) lt!24580) (apply!66 lt!24571 lt!24580))))

(declare-fun b!60108 () Bool)

(assert (=> b!60108 (= e!39478 e!39480)))

(declare-fun res!33265 () Bool)

(assert (=> b!60108 (=> (not res!33265) (not e!39480))))

(assert (=> b!60108 (= res!33265 (contains!682 lt!24578 (select (arr!1781 lt!23964) #b00000000000000000000000000000000)))))

(assert (=> b!60108 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 lt!23964)))))

(declare-fun b!60109 () Bool)

(declare-fun res!33268 () Bool)

(assert (=> b!60109 (=> (not res!33268) (not e!39487))))

(assert (=> b!60109 (= res!33268 e!39483)))

(declare-fun c!7798 () Bool)

(assert (=> b!60109 (= c!7798 (not (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!4544 () Bool)

(assert (=> bm!4544 (= call!4545 (contains!682 lt!24578 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60110 () Bool)

(assert (=> b!60110 (= e!39479 call!4541)))

(declare-fun b!60111 () Bool)

(assert (=> b!60111 (= e!39485 (= (apply!66 lt!24578 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1959 newMap!16)))))

(assert (= (and d!11781 c!7799) b!60094))

(assert (= (and d!11781 (not c!7799)) b!60100))

(assert (= (and b!60100 c!7802) b!60110))

(assert (= (and b!60100 (not c!7802)) b!60092))

(assert (= (and b!60092 c!7801) b!60091))

(assert (= (and b!60092 (not c!7801)) b!60105))

(assert (= (or b!60091 b!60105) bm!4540))

(assert (= (or b!60110 bm!4540) bm!4541))

(assert (= (or b!60110 b!60091) bm!4542))

(assert (= (or b!60094 bm!4541) bm!4543))

(assert (= (or b!60094 bm!4542) bm!4538))

(assert (= (and d!11781 res!33267) b!60095))

(assert (= (and d!11781 c!7797) b!60107))

(assert (= (and d!11781 (not c!7797)) b!60101))

(assert (= (and d!11781 res!33270) b!60102))

(assert (= (and b!60102 res!33266) b!60103))

(assert (= (and b!60102 (not res!33264)) b!60108))

(assert (= (and b!60108 res!33265) b!60106))

(assert (= (and b!60102 res!33263) b!60109))

(assert (= (and b!60109 c!7798) b!60104))

(assert (= (and b!60109 (not c!7798)) b!60098))

(assert (= (and b!60104 res!33269) b!60099))

(assert (= (or b!60104 b!60098) bm!4539))

(assert (= (and b!60109 res!33268) b!60097))

(assert (= (and b!60097 c!7800) b!60096))

(assert (= (and b!60097 (not c!7800)) b!60093))

(assert (= (and b!60096 res!33271) b!60111))

(assert (= (or b!60096 b!60093) bm!4544))

(declare-fun b_lambda!2643 () Bool)

(assert (=> (not b_lambda!2643) (not b!60106)))

(assert (=> b!60106 t!4775))

(declare-fun b_and!3651 () Bool)

(assert (= b_and!3647 (and (=> t!4775 result!2381) b_and!3651)))

(assert (=> b!60106 t!4777))

(declare-fun b_and!3653 () Bool)

(assert (= b_and!3649 (and (=> t!4777 result!2383) b_and!3653)))

(declare-fun m!52623 () Bool)

(assert (=> b!60094 m!52623))

(declare-fun m!52625 () Bool)

(assert (=> bm!4543 m!52625))

(declare-fun m!52627 () Bool)

(assert (=> bm!4538 m!52627))

(declare-fun m!52629 () Bool)

(assert (=> b!60099 m!52629))

(declare-fun m!52631 () Bool)

(assert (=> b!60103 m!52631))

(assert (=> b!60103 m!52631))

(declare-fun m!52633 () Bool)

(assert (=> b!60103 m!52633))

(declare-fun m!52635 () Bool)

(assert (=> bm!4539 m!52635))

(declare-fun m!52637 () Bool)

(assert (=> b!60106 m!52637))

(assert (=> b!60106 m!52631))

(declare-fun m!52639 () Bool)

(assert (=> b!60106 m!52639))

(assert (=> b!60106 m!50813))

(assert (=> b!60106 m!52637))

(assert (=> b!60106 m!50813))

(declare-fun m!52641 () Bool)

(assert (=> b!60106 m!52641))

(assert (=> b!60106 m!52631))

(declare-fun m!52643 () Bool)

(assert (=> b!60111 m!52643))

(assert (=> b!60108 m!52631))

(assert (=> b!60108 m!52631))

(declare-fun m!52645 () Bool)

(assert (=> b!60108 m!52645))

(assert (=> b!60095 m!52631))

(assert (=> b!60095 m!52631))

(assert (=> b!60095 m!52633))

(assert (=> d!11781 m!50771))

(declare-fun m!52647 () Bool)

(assert (=> bm!4544 m!52647))

(declare-fun m!52649 () Bool)

(assert (=> b!60107 m!52649))

(declare-fun m!52651 () Bool)

(assert (=> b!60107 m!52651))

(declare-fun m!52653 () Bool)

(assert (=> b!60107 m!52653))

(declare-fun m!52655 () Bool)

(assert (=> b!60107 m!52655))

(assert (=> b!60107 m!52649))

(declare-fun m!52657 () Bool)

(assert (=> b!60107 m!52657))

(declare-fun m!52659 () Bool)

(assert (=> b!60107 m!52659))

(declare-fun m!52661 () Bool)

(assert (=> b!60107 m!52661))

(assert (=> b!60107 m!52625))

(declare-fun m!52663 () Bool)

(assert (=> b!60107 m!52663))

(declare-fun m!52665 () Bool)

(assert (=> b!60107 m!52665))

(declare-fun m!52667 () Bool)

(assert (=> b!60107 m!52667))

(assert (=> b!60107 m!52631))

(declare-fun m!52669 () Bool)

(assert (=> b!60107 m!52669))

(declare-fun m!52671 () Bool)

(assert (=> b!60107 m!52671))

(declare-fun m!52673 () Bool)

(assert (=> b!60107 m!52673))

(assert (=> b!60107 m!52663))

(declare-fun m!52675 () Bool)

(assert (=> b!60107 m!52675))

(assert (=> b!60107 m!52659))

(declare-fun m!52677 () Bool)

(assert (=> b!60107 m!52677))

(assert (=> b!60107 m!52669))

(assert (=> d!11257 d!11781))

(declare-fun d!11783 () Bool)

(declare-fun e!39488 () Bool)

(assert (=> d!11783 e!39488))

(declare-fun res!33272 () Bool)

(assert (=> d!11783 (=> res!33272 e!39488)))

(declare-fun lt!24584 () Bool)

(assert (=> d!11783 (= res!33272 (not lt!24584))))

(declare-fun lt!24583 () Bool)

(assert (=> d!11783 (= lt!24584 lt!24583)))

(declare-fun lt!24585 () Unit!1551)

(declare-fun e!39489 () Unit!1551)

(assert (=> d!11783 (= lt!24585 e!39489)))

(declare-fun c!7803 () Bool)

(assert (=> d!11783 (= c!7803 lt!24583)))

(assert (=> d!11783 (= lt!24583 (containsKey!128 (toList!697 (getCurrentListMap!402 lt!23964 lt!23958 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16))) (select (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)))))))

(assert (=> d!11783 (= (contains!682 (getCurrentListMap!402 lt!23964 lt!23958 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)) (select (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)))) lt!24584)))

(declare-fun b!60112 () Bool)

(declare-fun lt!24582 () Unit!1551)

(assert (=> b!60112 (= e!39489 lt!24582)))

(assert (=> b!60112 (= lt!24582 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 (getCurrentListMap!402 lt!23964 lt!23958 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16))) (select (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)))))))

(assert (=> b!60112 (isDefined!77 (getValueByKey!124 (toList!697 (getCurrentListMap!402 lt!23964 lt!23958 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16))) (select (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)))))))

(declare-fun b!60113 () Bool)

(declare-fun Unit!1605 () Unit!1551)

(assert (=> b!60113 (= e!39489 Unit!1605)))

(declare-fun b!60114 () Bool)

(assert (=> b!60114 (= e!39488 (isDefined!77 (getValueByKey!124 (toList!697 (getCurrentListMap!402 lt!23964 lt!23958 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16))) (select (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832))))))))

(assert (= (and d!11783 c!7803) b!60112))

(assert (= (and d!11783 (not c!7803)) b!60113))

(assert (= (and d!11783 (not res!33272)) b!60114))

(assert (=> d!11783 m!50901))

(declare-fun m!52679 () Bool)

(assert (=> d!11783 m!52679))

(assert (=> b!60112 m!50901))

(declare-fun m!52681 () Bool)

(assert (=> b!60112 m!52681))

(assert (=> b!60112 m!50901))

(declare-fun m!52683 () Bool)

(assert (=> b!60112 m!52683))

(assert (=> b!60112 m!52683))

(declare-fun m!52685 () Bool)

(assert (=> b!60112 m!52685))

(assert (=> b!60114 m!50901))

(assert (=> b!60114 m!52683))

(assert (=> b!60114 m!52683))

(assert (=> b!60114 m!52685))

(assert (=> d!11257 d!11783))

(declare-fun bm!4545 () Bool)

(declare-fun call!4548 () Bool)

(declare-fun c!7804 () Bool)

(assert (=> bm!4545 (= call!4548 (arrayNoDuplicates!0 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16))) (bvadd lt!23968 #b00000000000000000000000000000001) (ite c!7804 (Cons!1427 (select (arr!1781 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16)))) lt!23968) lt!23959) lt!23959)))))

(declare-fun e!39492 () Bool)

(declare-fun b!60115 () Bool)

(assert (=> b!60115 (= e!39492 (contains!683 lt!23959 (select (arr!1781 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16)))) lt!23968)))))

(declare-fun b!60116 () Bool)

(declare-fun e!39491 () Bool)

(assert (=> b!60116 (= e!39491 call!4548)))

(declare-fun b!60117 () Bool)

(assert (=> b!60117 (= e!39491 call!4548)))

(declare-fun b!60118 () Bool)

(declare-fun e!39493 () Bool)

(assert (=> b!60118 (= e!39493 e!39491)))

(assert (=> b!60118 (= c!7804 (validKeyInArray!0 (select (arr!1781 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16)))) lt!23968)))))

(declare-fun d!11785 () Bool)

(declare-fun res!33275 () Bool)

(declare-fun e!39490 () Bool)

(assert (=> d!11785 (=> res!33275 e!39490)))

(assert (=> d!11785 (= res!33275 (bvsge lt!23968 (size!2011 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16))))))))

(assert (=> d!11785 (= (arrayNoDuplicates!0 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16))) lt!23968 lt!23959) e!39490)))

(declare-fun b!60119 () Bool)

(assert (=> b!60119 (= e!39490 e!39493)))

(declare-fun res!33274 () Bool)

(assert (=> b!60119 (=> (not res!33274) (not e!39493))))

(assert (=> b!60119 (= res!33274 (not e!39492))))

(declare-fun res!33273 () Bool)

(assert (=> b!60119 (=> (not res!33273) (not e!39492))))

(assert (=> b!60119 (= res!33273 (validKeyInArray!0 (select (arr!1781 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16)))) lt!23968)))))

(assert (= (and d!11785 (not res!33275)) b!60119))

(assert (= (and b!60119 res!33273) b!60115))

(assert (= (and b!60119 res!33274) b!60118))

(assert (= (and b!60118 c!7804) b!60116))

(assert (= (and b!60118 (not c!7804)) b!60117))

(assert (= (or b!60116 b!60117) bm!4545))

(declare-fun m!52687 () Bool)

(assert (=> bm!4545 m!52687))

(declare-fun m!52689 () Bool)

(assert (=> bm!4545 m!52689))

(assert (=> b!60115 m!52687))

(assert (=> b!60115 m!52687))

(declare-fun m!52691 () Bool)

(assert (=> b!60115 m!52691))

(assert (=> b!60118 m!52687))

(assert (=> b!60118 m!52687))

(declare-fun m!52693 () Bool)

(assert (=> b!60118 m!52693))

(assert (=> b!60119 m!52687))

(assert (=> b!60119 m!52687))

(assert (=> b!60119 m!52693))

(assert (=> d!11257 d!11785))

(declare-fun d!11787 () Bool)

(assert (=> d!11787 (= (arrayCountValidKeys!0 lt!23962 (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (bvadd (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lt!24588 () Unit!1551)

(declare-fun choose!2 (array!3721 (_ BitVec 32)) Unit!1551)

(assert (=> d!11787 (= lt!24588 (choose!2 lt!23962 (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832))))))

(declare-fun e!39496 () Bool)

(assert (=> d!11787 e!39496))

(declare-fun res!33280 () Bool)

(assert (=> d!11787 (=> (not res!33280) (not e!39496))))

(assert (=> d!11787 (= res!33280 (and (bvsge (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) #b00000000000000000000000000000000) (bvslt (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (size!2011 lt!23962))))))

(assert (=> d!11787 (= (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!23962 (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832))) lt!24588)))

(declare-fun b!60124 () Bool)

(declare-fun res!33281 () Bool)

(assert (=> b!60124 (=> (not res!33281) (not e!39496))))

(assert (=> b!60124 (= res!33281 (validKeyInArray!0 (select (arr!1781 lt!23962) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)))))))

(declare-fun b!60125 () Bool)

(assert (=> b!60125 (= e!39496 (bvslt (size!2011 lt!23962) #b01111111111111111111111111111111))))

(assert (= (and d!11787 res!33280) b!60124))

(assert (= (and b!60124 res!33281) b!60125))

(assert (=> d!11787 m!50891))

(declare-fun m!52695 () Bool)

(assert (=> d!11787 m!52695))

(assert (=> b!60124 m!52619))

(assert (=> b!60124 m!52619))

(assert (=> b!60124 m!52621))

(assert (=> d!11257 d!11787))

(declare-fun d!11789 () Bool)

(declare-fun res!33282 () Bool)

(declare-fun e!39497 () Bool)

(assert (=> d!11789 (=> res!33282 e!39497)))

(assert (=> d!11789 (= res!33282 (= (select (arr!1781 lt!23942) #b00000000000000000000000000000000) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(assert (=> d!11789 (= (arrayContainsKey!0 lt!23942 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) #b00000000000000000000000000000000) e!39497)))

(declare-fun b!60126 () Bool)

(declare-fun e!39498 () Bool)

(assert (=> b!60126 (= e!39497 e!39498)))

(declare-fun res!33283 () Bool)

(assert (=> b!60126 (=> (not res!33283) (not e!39498))))

(assert (=> b!60126 (= res!33283 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2011 lt!23942)))))

(declare-fun b!60127 () Bool)

(assert (=> b!60127 (= e!39498 (arrayContainsKey!0 lt!23942 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!11789 (not res!33282)) b!60126))

(assert (= (and b!60126 res!33283) b!60127))

(declare-fun m!52697 () Bool)

(assert (=> d!11789 m!52697))

(assert (=> b!60127 m!50529))

(declare-fun m!52699 () Bool)

(assert (=> b!60127 m!52699))

(assert (=> d!11257 d!11789))

(declare-fun d!11791 () Bool)

(declare-fun res!33285 () Bool)

(declare-fun e!39499 () Bool)

(assert (=> d!11791 (=> res!33285 e!39499)))

(assert (=> d!11791 (= res!33285 (bvsge #b00000000000000000000000000000000 (size!2011 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16))))))))

(assert (=> d!11791 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16))) (mask!5927 newMap!16)) e!39499)))

(declare-fun bm!4546 () Bool)

(declare-fun call!4549 () Bool)

(assert (=> bm!4546 (= call!4549 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16))) (mask!5927 newMap!16)))))

(declare-fun b!60128 () Bool)

(declare-fun e!39500 () Bool)

(assert (=> b!60128 (= e!39500 call!4549)))

(declare-fun b!60129 () Bool)

(assert (=> b!60129 (= e!39499 e!39500)))

(declare-fun c!7805 () Bool)

(assert (=> b!60129 (= c!7805 (validKeyInArray!0 (select (arr!1781 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!60130 () Bool)

(declare-fun e!39501 () Bool)

(assert (=> b!60130 (= e!39500 e!39501)))

(declare-fun lt!24590 () (_ BitVec 64))

(assert (=> b!60130 (= lt!24590 (select (arr!1781 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!24591 () Unit!1551)

(assert (=> b!60130 (= lt!24591 (lemmaArrayContainsFromImpliesContainsFromZero!0 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16))) lt!24590 #b00000000000000000000000000000000))))

(assert (=> b!60130 (arrayContainsKey!0 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16))) lt!24590 #b00000000000000000000000000000000)))

(declare-fun lt!24589 () Unit!1551)

(assert (=> b!60130 (= lt!24589 lt!24591)))

(declare-fun res!33284 () Bool)

(assert (=> b!60130 (= res!33284 (= (seekEntryOrOpen!0 (select (arr!1781 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16)))) #b00000000000000000000000000000000) (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16))) (mask!5927 newMap!16)) (Found!227 #b00000000000000000000000000000000)))))

(assert (=> b!60130 (=> (not res!33284) (not e!39501))))

(declare-fun b!60131 () Bool)

(assert (=> b!60131 (= e!39501 call!4549)))

(assert (= (and d!11791 (not res!33285)) b!60129))

(assert (= (and b!60129 c!7805) b!60130))

(assert (= (and b!60129 (not c!7805)) b!60128))

(assert (= (and b!60130 res!33284) b!60131))

(assert (= (or b!60131 b!60128) bm!4546))

(declare-fun m!52701 () Bool)

(assert (=> bm!4546 m!52701))

(assert (=> b!60129 m!52553))

(assert (=> b!60129 m!52553))

(assert (=> b!60129 m!52555))

(assert (=> b!60130 m!52553))

(declare-fun m!52703 () Bool)

(assert (=> b!60130 m!52703))

(declare-fun m!52705 () Bool)

(assert (=> b!60130 m!52705))

(assert (=> b!60130 m!52553))

(declare-fun m!52707 () Bool)

(assert (=> b!60130 m!52707))

(assert (=> d!11257 d!11791))

(declare-fun d!11793 () Bool)

(declare-fun e!39502 () Bool)

(assert (=> d!11793 e!39502))

(declare-fun res!33286 () Bool)

(assert (=> d!11793 (=> (not res!33286) (not e!39502))))

(declare-fun lt!24593 () ListLongMap!1363)

(assert (=> d!11793 (= res!33286 (contains!682 lt!24593 (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!24595 () List!1430)

(assert (=> d!11793 (= lt!24593 (ListLongMap!1364 lt!24595))))

(declare-fun lt!24592 () Unit!1551)

(declare-fun lt!24594 () Unit!1551)

(assert (=> d!11793 (= lt!24592 lt!24594)))

(assert (=> d!11793 (= (getValueByKey!124 lt!24595 (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11793 (= lt!24594 (lemmaContainsTupThenGetReturnValue!41 lt!24595 (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11793 (= lt!24595 (insertStrictlySorted!44 (toList!697 (getCurrentListMap!402 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16))) (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11793 (= (+!81 (getCurrentListMap!402 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!24593)))

(declare-fun b!60132 () Bool)

(declare-fun res!33287 () Bool)

(assert (=> b!60132 (=> (not res!33287) (not e!39502))))

(assert (=> b!60132 (= res!33287 (= (getValueByKey!124 (toList!697 lt!24593) (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!60133 () Bool)

(assert (=> b!60133 (= e!39502 (contains!684 (toList!697 lt!24593) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!11793 res!33286) b!60132))

(assert (= (and b!60132 res!33287) b!60133))

(declare-fun m!52709 () Bool)

(assert (=> d!11793 m!52709))

(declare-fun m!52711 () Bool)

(assert (=> d!11793 m!52711))

(declare-fun m!52713 () Bool)

(assert (=> d!11793 m!52713))

(declare-fun m!52715 () Bool)

(assert (=> d!11793 m!52715))

(declare-fun m!52717 () Bool)

(assert (=> b!60132 m!52717))

(declare-fun m!52719 () Bool)

(assert (=> b!60133 m!52719))

(assert (=> d!11257 d!11793))

(declare-fun d!11795 () Bool)

(declare-fun e!39505 () Bool)

(assert (=> d!11795 e!39505))

(declare-fun res!33290 () Bool)

(assert (=> d!11795 (=> (not res!33290) (not e!39505))))

(assert (=> d!11795 (= res!33290 (and (bvsge (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) #b00000000000000000000000000000000) (bvslt (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (size!2011 (_keys!3667 newMap!16))) (bvslt (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (size!2012 (_values!2026 newMap!16)))))))

(declare-fun lt!24598 () Unit!1551)

(declare-fun choose!314 (array!3721 array!3723 (_ BitVec 32) (_ BitVec 32) V!2843 V!2843 (_ BitVec 32) (_ BitVec 64) V!2843 Int) Unit!1551)

(assert (=> d!11795 (= lt!24598 (choose!314 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2043 newMap!16)))))

(assert (=> d!11795 (validMask!0 (mask!5927 newMap!16))))

(assert (=> d!11795 (= (lemmaAddValidKeyToArrayThenAddPairToListMap!5 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2043 newMap!16)) lt!24598)))

(declare-fun b!60136 () Bool)

(assert (=> b!60136 (= e!39505 (= (+!81 (getCurrentListMap!402 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!402 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16))) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16))) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16))))))

(assert (= (and d!11795 res!33290) b!60136))

(assert (=> d!11795 m!50529))

(assert (=> d!11795 m!50555))

(declare-fun m!52721 () Bool)

(assert (=> d!11795 m!52721))

(assert (=> d!11795 m!50771))

(assert (=> b!60136 m!50617))

(assert (=> b!60136 m!50617))

(assert (=> b!60136 m!50857))

(assert (=> b!60136 m!50885))

(assert (=> b!60136 m!50899))

(assert (=> b!60136 m!50903))

(assert (=> d!11257 d!11795))

(assert (=> d!11257 d!11221))

(declare-fun d!11797 () Bool)

(declare-fun e!39508 () Bool)

(assert (=> d!11797 e!39508))

(declare-fun res!33293 () Bool)

(assert (=> d!11797 (=> (not res!33293) (not e!39508))))

(assert (=> d!11797 (= res!33293 (and (bvsge (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) #b00000000000000000000000000000000) (bvslt (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (size!2011 (_keys!3667 newMap!16)))))))

(declare-fun lt!24601 () Unit!1551)

(declare-fun choose!102 ((_ BitVec 64) array!3721 (_ BitVec 32) (_ BitVec 32)) Unit!1551)

(assert (=> d!11797 (= lt!24601 (choose!102 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (_keys!3667 newMap!16) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (mask!5927 newMap!16)))))

(assert (=> d!11797 (validMask!0 (mask!5927 newMap!16))))

(assert (=> d!11797 (= (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (_keys!3667 newMap!16) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (mask!5927 newMap!16)) lt!24601)))

(declare-fun b!60139 () Bool)

(assert (=> b!60139 (= e!39508 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16))) (mask!5927 newMap!16)))))

(assert (= (and d!11797 res!33293) b!60139))

(assert (=> d!11797 m!50529))

(declare-fun m!52723 () Bool)

(assert (=> d!11797 m!52723))

(assert (=> d!11797 m!50771))

(assert (=> b!60139 m!50885))

(assert (=> b!60139 m!50897))

(assert (=> d!11257 d!11797))

(declare-fun d!11799 () Bool)

(declare-fun e!39511 () Bool)

(assert (=> d!11799 e!39511))

(declare-fun res!33296 () Bool)

(assert (=> d!11799 (=> (not res!33296) (not e!39511))))

(assert (=> d!11799 (= res!33296 (and (bvsge (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) #b00000000000000000000000000000000) (bvslt (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (size!2011 (_keys!3667 newMap!16)))))))

(declare-fun lt!24604 () Unit!1551)

(declare-fun choose!41 (array!3721 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1431) Unit!1551)

(assert (=> d!11799 (= lt!24604 (choose!41 (_keys!3667 newMap!16) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) lt!23968 lt!23959))))

(assert (=> d!11799 (bvslt (size!2011 (_keys!3667 newMap!16)) #b01111111111111111111111111111111)))

(assert (=> d!11799 (= (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!3667 newMap!16) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) lt!23968 lt!23959) lt!24604)))

(declare-fun b!60142 () Bool)

(assert (=> b!60142 (= e!39511 (arrayNoDuplicates!0 (array!3722 (store (arr!1781 (_keys!3667 newMap!16)) (ite c!7495 (index!3034 lt!23832) (index!3031 lt!23832)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (size!2011 (_keys!3667 newMap!16))) lt!23968 lt!23959))))

(assert (= (and d!11799 res!33296) b!60142))

(assert (=> d!11799 m!50529))

(declare-fun m!52725 () Bool)

(assert (=> d!11799 m!52725))

(assert (=> b!60142 m!50885))

(assert (=> b!60142 m!50889))

(assert (=> d!11257 d!11799))

(assert (=> b!59259 d!11375))

(declare-fun d!11801 () Bool)

(declare-fun lt!24605 () Bool)

(assert (=> d!11801 (= lt!24605 (select (content!64 (toList!697 lt!24156)) (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!39512 () Bool)

(assert (=> d!11801 (= lt!24605 e!39512)))

(declare-fun res!33298 () Bool)

(assert (=> d!11801 (=> (not res!33298) (not e!39512))))

(assert (=> d!11801 (= res!33298 ((_ is Cons!1426) (toList!697 lt!24156)))))

(assert (=> d!11801 (= (contains!684 (toList!697 lt!24156) (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!24605)))

(declare-fun b!60143 () Bool)

(declare-fun e!39513 () Bool)

(assert (=> b!60143 (= e!39512 e!39513)))

(declare-fun res!33297 () Bool)

(assert (=> b!60143 (=> res!33297 e!39513)))

(assert (=> b!60143 (= res!33297 (= (h!2007 (toList!697 lt!24156)) (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!60144 () Bool)

(assert (=> b!60144 (= e!39513 (contains!684 (t!4768 (toList!697 lt!24156)) (ite c!7503 (ite c!7507 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!11801 res!33298) b!60143))

(assert (= (and b!60143 (not res!33297)) b!60144))

(declare-fun m!52727 () Bool)

(assert (=> d!11801 m!52727))

(declare-fun m!52729 () Bool)

(assert (=> d!11801 m!52729))

(declare-fun m!52731 () Bool)

(assert (=> b!60144 m!52731))

(assert (=> b!59414 d!11801))

(declare-fun d!11803 () Bool)

(assert (=> d!11803 (= (apply!66 lt!24069 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1069 (getValueByKey!124 (toList!697 lt!24069) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2613 () Bool)

(assert (= bs!2613 d!11803))

(assert (=> bs!2613 m!51539))

(assert (=> bs!2613 m!51539))

(declare-fun m!52733 () Bool)

(assert (=> bs!2613 m!52733))

(assert (=> b!59297 d!11803))

(assert (=> d!11273 d!11275))

(assert (=> d!11273 d!11277))

(declare-fun d!11805 () Bool)

(assert (=> d!11805 (isDefined!77 (getValueByKey!124 (toList!697 lt!23655) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(assert (=> d!11805 true))

(declare-fun _$12!305 () Unit!1551)

(assert (=> d!11805 (= (choose!305 (toList!697 lt!23655) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) _$12!305)))

(declare-fun bs!2614 () Bool)

(assert (= bs!2614 d!11805))

(assert (=> bs!2614 m!50529))

(assert (=> bs!2614 m!50679))

(assert (=> bs!2614 m!50679))

(assert (=> bs!2614 m!50681))

(assert (=> d!11273 d!11805))

(declare-fun d!11807 () Bool)

(declare-fun res!33303 () Bool)

(declare-fun e!39518 () Bool)

(assert (=> d!11807 (=> res!33303 e!39518)))

(assert (=> d!11807 (= res!33303 (or ((_ is Nil!1427) (toList!697 lt!23655)) ((_ is Nil!1427) (t!4768 (toList!697 lt!23655)))))))

(assert (=> d!11807 (= (isStrictlySorted!284 (toList!697 lt!23655)) e!39518)))

(declare-fun b!60149 () Bool)

(declare-fun e!39519 () Bool)

(assert (=> b!60149 (= e!39518 e!39519)))

(declare-fun res!33304 () Bool)

(assert (=> b!60149 (=> (not res!33304) (not e!39519))))

(assert (=> b!60149 (= res!33304 (bvslt (_1!1022 (h!2007 (toList!697 lt!23655))) (_1!1022 (h!2007 (t!4768 (toList!697 lt!23655))))))))

(declare-fun b!60150 () Bool)

(assert (=> b!60150 (= e!39519 (isStrictlySorted!284 (t!4768 (toList!697 lt!23655))))))

(assert (= (and d!11807 (not res!33303)) b!60149))

(assert (= (and b!60149 res!33304) b!60150))

(declare-fun m!52735 () Bool)

(assert (=> b!60150 m!52735))

(assert (=> d!11273 d!11807))

(declare-fun d!11809 () Bool)

(declare-fun e!39520 () Bool)

(assert (=> d!11809 e!39520))

(declare-fun res!33305 () Bool)

(assert (=> d!11809 (=> res!33305 e!39520)))

(declare-fun lt!24608 () Bool)

(assert (=> d!11809 (= res!33305 (not lt!24608))))

(declare-fun lt!24607 () Bool)

(assert (=> d!11809 (= lt!24608 lt!24607)))

(declare-fun lt!24609 () Unit!1551)

(declare-fun e!39521 () Unit!1551)

(assert (=> d!11809 (= lt!24609 e!39521)))

(declare-fun c!7806 () Bool)

(assert (=> d!11809 (= c!7806 lt!24607)))

(assert (=> d!11809 (= lt!24607 (containsKey!128 (toList!697 lt!24092) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!11809 (= (contains!682 lt!24092 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!24608)))

(declare-fun b!60151 () Bool)

(declare-fun lt!24606 () Unit!1551)

(assert (=> b!60151 (= e!39521 lt!24606)))

(assert (=> b!60151 (= lt!24606 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 lt!24092) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!60151 (isDefined!77 (getValueByKey!124 (toList!697 lt!24092) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!60152 () Bool)

(declare-fun Unit!1606 () Unit!1551)

(assert (=> b!60152 (= e!39521 Unit!1606)))

(declare-fun b!60153 () Bool)

(assert (=> b!60153 (= e!39520 (isDefined!77 (getValueByKey!124 (toList!697 lt!24092) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!11809 c!7806) b!60151))

(assert (= (and d!11809 (not c!7806)) b!60152))

(assert (= (and d!11809 (not res!33305)) b!60153))

(assert (=> d!11809 m!50627))

(declare-fun m!52737 () Bool)

(assert (=> d!11809 m!52737))

(assert (=> b!60151 m!50627))

(declare-fun m!52739 () Bool)

(assert (=> b!60151 m!52739))

(assert (=> b!60151 m!50627))

(assert (=> b!60151 m!52109))

(assert (=> b!60151 m!52109))

(declare-fun m!52741 () Bool)

(assert (=> b!60151 m!52741))

(assert (=> b!60153 m!50627))

(assert (=> b!60153 m!52109))

(assert (=> b!60153 m!52109))

(assert (=> b!60153 m!52741))

(assert (=> b!59337 d!11809))

(assert (=> d!11315 d!11523))

(declare-fun d!11811 () Bool)

(assert (=> d!11811 (= (inRange!0 (ite c!7606 (index!3031 lt!24169) (index!3034 lt!24169)) (mask!5927 newMap!16)) (and (bvsge (ite c!7606 (index!3031 lt!24169) (index!3034 lt!24169)) #b00000000000000000000000000000000) (bvslt (ite c!7606 (index!3031 lt!24169) (index!3034 lt!24169)) (bvadd (mask!5927 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4465 d!11811))

(declare-fun b!60156 () Bool)

(declare-fun res!33309 () Bool)

(declare-fun e!39522 () Bool)

(assert (=> b!60156 (=> (not res!33309) (not e!39522))))

(assert (=> b!60156 (= res!33309 (= (size!2015 (v!2383 (underlying!226 thiss!992))) (bvadd (_size!358 (v!2383 (underlying!226 thiss!992))) (bvsdiv (bvadd (extraKeys!1930 (v!2383 (underlying!226 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!60155 () Bool)

(declare-fun res!33307 () Bool)

(assert (=> b!60155 (=> (not res!33307) (not e!39522))))

(assert (=> b!60155 (= res!33307 (bvsge (size!2015 (v!2383 (underlying!226 thiss!992))) (_size!358 (v!2383 (underlying!226 thiss!992)))))))

(declare-fun d!11813 () Bool)

(declare-fun res!33308 () Bool)

(assert (=> d!11813 (=> (not res!33308) (not e!39522))))

(assert (=> d!11813 (= res!33308 (validMask!0 (mask!5927 (v!2383 (underlying!226 thiss!992)))))))

(assert (=> d!11813 (= (simpleValid!42 (v!2383 (underlying!226 thiss!992))) e!39522)))

(declare-fun b!60157 () Bool)

(assert (=> b!60157 (= e!39522 (and (bvsge (extraKeys!1930 (v!2383 (underlying!226 thiss!992))) #b00000000000000000000000000000000) (bvsle (extraKeys!1930 (v!2383 (underlying!226 thiss!992))) #b00000000000000000000000000000011) (bvsge (_vacant!358 (v!2383 (underlying!226 thiss!992))) #b00000000000000000000000000000000)))))

(declare-fun b!60154 () Bool)

(declare-fun res!33306 () Bool)

(assert (=> b!60154 (=> (not res!33306) (not e!39522))))

(assert (=> b!60154 (= res!33306 (and (= (size!2012 (_values!2026 (v!2383 (underlying!226 thiss!992)))) (bvadd (mask!5927 (v!2383 (underlying!226 thiss!992))) #b00000000000000000000000000000001)) (= (size!2011 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) (size!2012 (_values!2026 (v!2383 (underlying!226 thiss!992))))) (bvsge (_size!358 (v!2383 (underlying!226 thiss!992))) #b00000000000000000000000000000000) (bvsle (_size!358 (v!2383 (underlying!226 thiss!992))) (bvadd (mask!5927 (v!2383 (underlying!226 thiss!992))) #b00000000000000000000000000000001))))))

(assert (= (and d!11813 res!33308) b!60154))

(assert (= (and b!60154 res!33306) b!60155))

(assert (= (and b!60155 res!33307) b!60156))

(assert (= (and b!60156 res!33309) b!60157))

(declare-fun m!52743 () Bool)

(assert (=> b!60156 m!52743))

(assert (=> b!60155 m!52743))

(assert (=> d!11813 m!50565))

(assert (=> d!11247 d!11813))

(declare-fun d!11815 () Bool)

(declare-fun res!33310 () Bool)

(declare-fun e!39523 () Bool)

(assert (=> d!11815 (=> res!33310 e!39523)))

(assert (=> d!11815 (= res!33310 (and ((_ is Cons!1426) (toList!697 (+!81 lt!23728 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))) (= (_1!1022 (h!2007 (toList!697 (+!81 lt!23728 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))) lt!23721)))))

(assert (=> d!11815 (= (containsKey!128 (toList!697 (+!81 lt!23728 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!23721) e!39523)))

(declare-fun b!60158 () Bool)

(declare-fun e!39524 () Bool)

(assert (=> b!60158 (= e!39523 e!39524)))

(declare-fun res!33311 () Bool)

(assert (=> b!60158 (=> (not res!33311) (not e!39524))))

(assert (=> b!60158 (= res!33311 (and (or (not ((_ is Cons!1426) (toList!697 (+!81 lt!23728 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))) (bvsle (_1!1022 (h!2007 (toList!697 (+!81 lt!23728 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))) lt!23721)) ((_ is Cons!1426) (toList!697 (+!81 lt!23728 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))) (bvslt (_1!1022 (h!2007 (toList!697 (+!81 lt!23728 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))) lt!23721)))))

(declare-fun b!60159 () Bool)

(assert (=> b!60159 (= e!39524 (containsKey!128 (t!4768 (toList!697 (+!81 lt!23728 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))) lt!23721))))

(assert (= (and d!11815 (not res!33310)) b!60158))

(assert (= (and b!60158 res!33311) b!60159))

(declare-fun m!52745 () Bool)

(assert (=> b!60159 m!52745))

(assert (=> d!11321 d!11815))

(declare-fun d!11817 () Bool)

(declare-fun e!39525 () Bool)

(assert (=> d!11817 e!39525))

(declare-fun res!33312 () Bool)

(assert (=> d!11817 (=> res!33312 e!39525)))

(declare-fun lt!24612 () Bool)

(assert (=> d!11817 (= res!33312 (not lt!24612))))

(declare-fun lt!24611 () Bool)

(assert (=> d!11817 (= lt!24612 lt!24611)))

(declare-fun lt!24613 () Unit!1551)

(declare-fun e!39526 () Unit!1551)

(assert (=> d!11817 (= lt!24613 e!39526)))

(declare-fun c!7807 () Bool)

(assert (=> d!11817 (= c!7807 lt!24611)))

(assert (=> d!11817 (= lt!24611 (containsKey!128 (toList!697 lt!24103) (_1!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(assert (=> d!11817 (= (contains!682 lt!24103 (_1!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!24612)))

(declare-fun b!60160 () Bool)

(declare-fun lt!24610 () Unit!1551)

(assert (=> b!60160 (= e!39526 lt!24610)))

(assert (=> b!60160 (= lt!24610 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 lt!24103) (_1!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(assert (=> b!60160 (isDefined!77 (getValueByKey!124 (toList!697 lt!24103) (_1!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun b!60161 () Bool)

(declare-fun Unit!1607 () Unit!1551)

(assert (=> b!60161 (= e!39526 Unit!1607)))

(declare-fun b!60162 () Bool)

(assert (=> b!60162 (= e!39525 (isDefined!77 (getValueByKey!124 (toList!697 lt!24103) (_1!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(assert (= (and d!11817 c!7807) b!60160))

(assert (= (and d!11817 (not c!7807)) b!60161))

(assert (= (and d!11817 (not res!33312)) b!60162))

(declare-fun m!52747 () Bool)

(assert (=> d!11817 m!52747))

(declare-fun m!52749 () Bool)

(assert (=> b!60160 m!52749))

(assert (=> b!60160 m!51193))

(assert (=> b!60160 m!51193))

(declare-fun m!52751 () Bool)

(assert (=> b!60160 m!52751))

(assert (=> b!60162 m!51193))

(assert (=> b!60162 m!51193))

(assert (=> b!60162 m!52751))

(assert (=> d!11323 d!11817))

(declare-fun b!60164 () Bool)

(declare-fun e!39527 () Option!130)

(declare-fun e!39528 () Option!130)

(assert (=> b!60164 (= e!39527 e!39528)))

(declare-fun c!7809 () Bool)

(assert (=> b!60164 (= c!7809 (and ((_ is Cons!1426) lt!24105) (not (= (_1!1022 (h!2007 lt!24105)) (_1!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))))))

(declare-fun b!60163 () Bool)

(assert (=> b!60163 (= e!39527 (Some!129 (_2!1022 (h!2007 lt!24105))))))

(declare-fun b!60165 () Bool)

(assert (=> b!60165 (= e!39528 (getValueByKey!124 (t!4768 lt!24105) (_1!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun b!60166 () Bool)

(assert (=> b!60166 (= e!39528 None!128)))

(declare-fun d!11819 () Bool)

(declare-fun c!7808 () Bool)

(assert (=> d!11819 (= c!7808 (and ((_ is Cons!1426) lt!24105) (= (_1!1022 (h!2007 lt!24105)) (_1!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(assert (=> d!11819 (= (getValueByKey!124 lt!24105 (_1!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))) e!39527)))

(assert (= (and d!11819 c!7808) b!60163))

(assert (= (and d!11819 (not c!7808)) b!60164))

(assert (= (and b!60164 c!7809) b!60165))

(assert (= (and b!60164 (not c!7809)) b!60166))

(declare-fun m!52753 () Bool)

(assert (=> b!60165 m!52753))

(assert (=> d!11323 d!11819))

(declare-fun d!11821 () Bool)

(assert (=> d!11821 (= (getValueByKey!124 lt!24105 (_1!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))) (Some!129 (_2!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun lt!24614 () Unit!1551)

(assert (=> d!11821 (= lt!24614 (choose!311 lt!24105 (_1!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun e!39529 () Bool)

(assert (=> d!11821 e!39529))

(declare-fun res!33313 () Bool)

(assert (=> d!11821 (=> (not res!33313) (not e!39529))))

(assert (=> d!11821 (= res!33313 (isStrictlySorted!284 lt!24105))))

(assert (=> d!11821 (= (lemmaContainsTupThenGetReturnValue!41 lt!24105 (_1!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!24614)))

(declare-fun b!60167 () Bool)

(declare-fun res!33314 () Bool)

(assert (=> b!60167 (=> (not res!33314) (not e!39529))))

(assert (=> b!60167 (= res!33314 (containsKey!128 lt!24105 (_1!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun b!60168 () Bool)

(assert (=> b!60168 (= e!39529 (contains!684 lt!24105 (tuple2!2023 (_1!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(assert (= (and d!11821 res!33313) b!60167))

(assert (= (and b!60167 res!33314) b!60168))

(assert (=> d!11821 m!51187))

(declare-fun m!52755 () Bool)

(assert (=> d!11821 m!52755))

(declare-fun m!52757 () Bool)

(assert (=> d!11821 m!52757))

(declare-fun m!52759 () Bool)

(assert (=> b!60167 m!52759))

(declare-fun m!52761 () Bool)

(assert (=> b!60168 m!52761))

(assert (=> d!11323 d!11821))

(declare-fun b!60169 () Bool)

(declare-fun e!39532 () List!1430)

(declare-fun call!4552 () List!1430)

(assert (=> b!60169 (= e!39532 call!4552)))

(declare-fun lt!24615 () List!1430)

(declare-fun e!39531 () Bool)

(declare-fun b!60170 () Bool)

(assert (=> b!60170 (= e!39531 (contains!684 lt!24615 (tuple2!2023 (_1!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(declare-fun b!60171 () Bool)

(declare-fun e!39530 () List!1430)

(assert (=> b!60171 (= e!39530 (insertStrictlySorted!44 (t!4768 (toList!697 lt!23726)) (_1!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun bm!4547 () Bool)

(declare-fun call!4550 () List!1430)

(declare-fun call!4551 () List!1430)

(assert (=> bm!4547 (= call!4550 call!4551)))

(declare-fun b!60172 () Bool)

(declare-fun e!39533 () List!1430)

(declare-fun e!39534 () List!1430)

(assert (=> b!60172 (= e!39533 e!39534)))

(declare-fun c!7811 () Bool)

(assert (=> b!60172 (= c!7811 (and ((_ is Cons!1426) (toList!697 lt!23726)) (= (_1!1022 (h!2007 (toList!697 lt!23726))) (_1!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(declare-fun d!11823 () Bool)

(assert (=> d!11823 e!39531))

(declare-fun res!33316 () Bool)

(assert (=> d!11823 (=> (not res!33316) (not e!39531))))

(assert (=> d!11823 (= res!33316 (isStrictlySorted!284 lt!24615))))

(assert (=> d!11823 (= lt!24615 e!39533)))

(declare-fun c!7813 () Bool)

(assert (=> d!11823 (= c!7813 (and ((_ is Cons!1426) (toList!697 lt!23726)) (bvslt (_1!1022 (h!2007 (toList!697 lt!23726))) (_1!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(assert (=> d!11823 (isStrictlySorted!284 (toList!697 lt!23726))))

(assert (=> d!11823 (= (insertStrictlySorted!44 (toList!697 lt!23726) (_1!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!24615)))

(declare-fun bm!4548 () Bool)

(assert (=> bm!4548 (= call!4552 call!4550)))

(declare-fun b!60173 () Bool)

(assert (=> b!60173 (= e!39532 call!4552)))

(declare-fun b!60174 () Bool)

(assert (=> b!60174 (= e!39533 call!4551)))

(declare-fun b!60175 () Bool)

(assert (=> b!60175 (= e!39534 call!4550)))

(declare-fun b!60176 () Bool)

(declare-fun c!7810 () Bool)

(assert (=> b!60176 (= e!39530 (ite c!7811 (t!4768 (toList!697 lt!23726)) (ite c!7810 (Cons!1426 (h!2007 (toList!697 lt!23726)) (t!4768 (toList!697 lt!23726))) Nil!1427)))))

(declare-fun b!60177 () Bool)

(declare-fun res!33315 () Bool)

(assert (=> b!60177 (=> (not res!33315) (not e!39531))))

(assert (=> b!60177 (= res!33315 (containsKey!128 lt!24615 (_1!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun b!60178 () Bool)

(assert (=> b!60178 (= c!7810 (and ((_ is Cons!1426) (toList!697 lt!23726)) (bvsgt (_1!1022 (h!2007 (toList!697 lt!23726))) (_1!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(assert (=> b!60178 (= e!39534 e!39532)))

(declare-fun bm!4549 () Bool)

(assert (=> bm!4549 (= call!4551 ($colon$colon!60 e!39530 (ite c!7813 (h!2007 (toList!697 lt!23726)) (tuple2!2023 (_1!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 lt!23734 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))))))

(declare-fun c!7812 () Bool)

(assert (=> bm!4549 (= c!7812 c!7813)))

(assert (= (and d!11823 c!7813) b!60174))

(assert (= (and d!11823 (not c!7813)) b!60172))

(assert (= (and b!60172 c!7811) b!60175))

(assert (= (and b!60172 (not c!7811)) b!60178))

(assert (= (and b!60178 c!7810) b!60169))

(assert (= (and b!60178 (not c!7810)) b!60173))

(assert (= (or b!60169 b!60173) bm!4548))

(assert (= (or b!60175 bm!4548) bm!4547))

(assert (= (or b!60174 bm!4547) bm!4549))

(assert (= (and bm!4549 c!7812) b!60171))

(assert (= (and bm!4549 (not c!7812)) b!60176))

(assert (= (and d!11823 res!33316) b!60177))

(assert (= (and b!60177 res!33315) b!60170))

(declare-fun m!52763 () Bool)

(assert (=> d!11823 m!52763))

(declare-fun m!52765 () Bool)

(assert (=> d!11823 m!52765))

(declare-fun m!52767 () Bool)

(assert (=> bm!4549 m!52767))

(declare-fun m!52769 () Bool)

(assert (=> b!60171 m!52769))

(declare-fun m!52771 () Bool)

(assert (=> b!60177 m!52771))

(declare-fun m!52773 () Bool)

(assert (=> b!60170 m!52773))

(assert (=> d!11323 d!11823))

(assert (=> b!59293 d!11375))

(declare-fun d!11825 () Bool)

(declare-fun res!33317 () Bool)

(declare-fun e!39535 () Bool)

(assert (=> d!11825 (=> res!33317 e!39535)))

(assert (=> d!11825 (= res!33317 (and ((_ is Cons!1426) (toList!697 call!4392)) (= (_1!1022 (h!2007 (toList!697 call!4392))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355))))))

(assert (=> d!11825 (= (containsKey!128 (toList!697 call!4392) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) e!39535)))

(declare-fun b!60179 () Bool)

(declare-fun e!39536 () Bool)

(assert (=> b!60179 (= e!39535 e!39536)))

(declare-fun res!33318 () Bool)

(assert (=> b!60179 (=> (not res!33318) (not e!39536))))

(assert (=> b!60179 (= res!33318 (and (or (not ((_ is Cons!1426) (toList!697 call!4392))) (bvsle (_1!1022 (h!2007 (toList!697 call!4392))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355))) ((_ is Cons!1426) (toList!697 call!4392)) (bvslt (_1!1022 (h!2007 (toList!697 call!4392))) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355))))))

(declare-fun b!60180 () Bool)

(assert (=> b!60180 (= e!39536 (containsKey!128 (t!4768 (toList!697 call!4392)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(assert (= (and d!11825 (not res!33317)) b!60179))

(assert (= (and b!60179 res!33318) b!60180))

(assert (=> b!60180 m!50529))

(declare-fun m!52775 () Bool)

(assert (=> b!60180 m!52775))

(assert (=> d!11319 d!11825))

(declare-fun d!11827 () Bool)

(declare-fun e!39537 () Bool)

(assert (=> d!11827 e!39537))

(declare-fun res!33319 () Bool)

(assert (=> d!11827 (=> res!33319 e!39537)))

(declare-fun lt!24618 () Bool)

(assert (=> d!11827 (= res!33319 (not lt!24618))))

(declare-fun lt!24617 () Bool)

(assert (=> d!11827 (= lt!24618 lt!24617)))

(declare-fun lt!24619 () Unit!1551)

(declare-fun e!39538 () Unit!1551)

(assert (=> d!11827 (= lt!24619 e!39538)))

(declare-fun c!7814 () Bool)

(assert (=> d!11827 (= c!7814 lt!24617)))

(assert (=> d!11827 (= lt!24617 (containsKey!128 (toList!697 lt!24113) (_1!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(assert (=> d!11827 (= (contains!682 lt!24113 (_1!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!24618)))

(declare-fun b!60181 () Bool)

(declare-fun lt!24616 () Unit!1551)

(assert (=> b!60181 (= e!39538 lt!24616)))

(assert (=> b!60181 (= lt!24616 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 lt!24113) (_1!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(assert (=> b!60181 (isDefined!77 (getValueByKey!124 (toList!697 lt!24113) (_1!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun b!60182 () Bool)

(declare-fun Unit!1608 () Unit!1551)

(assert (=> b!60182 (= e!39538 Unit!1608)))

(declare-fun b!60183 () Bool)

(assert (=> b!60183 (= e!39537 (isDefined!77 (getValueByKey!124 (toList!697 lt!24113) (_1!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(assert (= (and d!11827 c!7814) b!60181))

(assert (= (and d!11827 (not c!7814)) b!60182))

(assert (= (and d!11827 (not res!33319)) b!60183))

(declare-fun m!52777 () Bool)

(assert (=> d!11827 m!52777))

(declare-fun m!52779 () Bool)

(assert (=> b!60181 m!52779))

(assert (=> b!60181 m!51213))

(assert (=> b!60181 m!51213))

(declare-fun m!52781 () Bool)

(assert (=> b!60181 m!52781))

(assert (=> b!60183 m!51213))

(assert (=> b!60183 m!51213))

(assert (=> b!60183 m!52781))

(assert (=> d!11329 d!11827))

(declare-fun b!60185 () Bool)

(declare-fun e!39539 () Option!130)

(declare-fun e!39540 () Option!130)

(assert (=> b!60185 (= e!39539 e!39540)))

(declare-fun c!7816 () Bool)

(assert (=> b!60185 (= c!7816 (and ((_ is Cons!1426) lt!24115) (not (= (_1!1022 (h!2007 lt!24115)) (_1!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))))

(declare-fun b!60184 () Bool)

(assert (=> b!60184 (= e!39539 (Some!129 (_2!1022 (h!2007 lt!24115))))))

(declare-fun b!60186 () Bool)

(assert (=> b!60186 (= e!39540 (getValueByKey!124 (t!4768 lt!24115) (_1!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun b!60187 () Bool)

(assert (=> b!60187 (= e!39540 None!128)))

(declare-fun d!11829 () Bool)

(declare-fun c!7815 () Bool)

(assert (=> d!11829 (= c!7815 (and ((_ is Cons!1426) lt!24115) (= (_1!1022 (h!2007 lt!24115)) (_1!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(assert (=> d!11829 (= (getValueByKey!124 lt!24115 (_1!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) e!39539)))

(assert (= (and d!11829 c!7815) b!60184))

(assert (= (and d!11829 (not c!7815)) b!60185))

(assert (= (and b!60185 c!7816) b!60186))

(assert (= (and b!60185 (not c!7816)) b!60187))

(declare-fun m!52783 () Bool)

(assert (=> b!60186 m!52783))

(assert (=> d!11329 d!11829))

(declare-fun d!11831 () Bool)

(assert (=> d!11831 (= (getValueByKey!124 lt!24115 (_1!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) (Some!129 (_2!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun lt!24620 () Unit!1551)

(assert (=> d!11831 (= lt!24620 (choose!311 lt!24115 (_1!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun e!39541 () Bool)

(assert (=> d!11831 e!39541))

(declare-fun res!33320 () Bool)

(assert (=> d!11831 (=> (not res!33320) (not e!39541))))

(assert (=> d!11831 (= res!33320 (isStrictlySorted!284 lt!24115))))

(assert (=> d!11831 (= (lemmaContainsTupThenGetReturnValue!41 lt!24115 (_1!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!24620)))

(declare-fun b!60188 () Bool)

(declare-fun res!33321 () Bool)

(assert (=> b!60188 (=> (not res!33321) (not e!39541))))

(assert (=> b!60188 (= res!33321 (containsKey!128 lt!24115 (_1!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun b!60189 () Bool)

(assert (=> b!60189 (= e!39541 (contains!684 lt!24115 (tuple2!2023 (_1!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(assert (= (and d!11831 res!33320) b!60188))

(assert (= (and b!60188 res!33321) b!60189))

(assert (=> d!11831 m!51207))

(declare-fun m!52785 () Bool)

(assert (=> d!11831 m!52785))

(declare-fun m!52787 () Bool)

(assert (=> d!11831 m!52787))

(declare-fun m!52789 () Bool)

(assert (=> b!60188 m!52789))

(declare-fun m!52791 () Bool)

(assert (=> b!60189 m!52791))

(assert (=> d!11329 d!11831))

(declare-fun b!60190 () Bool)

(declare-fun e!39544 () List!1430)

(declare-fun call!4555 () List!1430)

(assert (=> b!60190 (= e!39544 call!4555)))

(declare-fun b!60191 () Bool)

(declare-fun e!39543 () Bool)

(declare-fun lt!24621 () List!1430)

(assert (=> b!60191 (= e!39543 (contains!684 lt!24621 (tuple2!2023 (_1!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(declare-fun e!39542 () List!1430)

(declare-fun b!60192 () Bool)

(assert (=> b!60192 (= e!39542 (insertStrictlySorted!44 (t!4768 (toList!697 lt!23725)) (_1!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun bm!4550 () Bool)

(declare-fun call!4553 () List!1430)

(declare-fun call!4554 () List!1430)

(assert (=> bm!4550 (= call!4553 call!4554)))

(declare-fun b!60193 () Bool)

(declare-fun e!39545 () List!1430)

(declare-fun e!39546 () List!1430)

(assert (=> b!60193 (= e!39545 e!39546)))

(declare-fun c!7818 () Bool)

(assert (=> b!60193 (= c!7818 (and ((_ is Cons!1426) (toList!697 lt!23725)) (= (_1!1022 (h!2007 (toList!697 lt!23725))) (_1!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(declare-fun d!11833 () Bool)

(assert (=> d!11833 e!39543))

(declare-fun res!33323 () Bool)

(assert (=> d!11833 (=> (not res!33323) (not e!39543))))

(assert (=> d!11833 (= res!33323 (isStrictlySorted!284 lt!24621))))

(assert (=> d!11833 (= lt!24621 e!39545)))

(declare-fun c!7820 () Bool)

(assert (=> d!11833 (= c!7820 (and ((_ is Cons!1426) (toList!697 lt!23725)) (bvslt (_1!1022 (h!2007 (toList!697 lt!23725))) (_1!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(assert (=> d!11833 (isStrictlySorted!284 (toList!697 lt!23725))))

(assert (=> d!11833 (= (insertStrictlySorted!44 (toList!697 lt!23725) (_1!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))) lt!24621)))

(declare-fun bm!4551 () Bool)

(assert (=> bm!4551 (= call!4555 call!4553)))

(declare-fun b!60194 () Bool)

(assert (=> b!60194 (= e!39544 call!4555)))

(declare-fun b!60195 () Bool)

(assert (=> b!60195 (= e!39545 call!4554)))

(declare-fun b!60196 () Bool)

(assert (=> b!60196 (= e!39546 call!4553)))

(declare-fun b!60197 () Bool)

(declare-fun c!7817 () Bool)

(assert (=> b!60197 (= e!39542 (ite c!7818 (t!4768 (toList!697 lt!23725)) (ite c!7817 (Cons!1426 (h!2007 (toList!697 lt!23725)) (t!4768 (toList!697 lt!23725))) Nil!1427)))))

(declare-fun b!60198 () Bool)

(declare-fun res!33322 () Bool)

(assert (=> b!60198 (=> (not res!33322) (not e!39543))))

(assert (=> b!60198 (= res!33322 (containsKey!128 lt!24621 (_1!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun b!60199 () Bool)

(assert (=> b!60199 (= c!7817 (and ((_ is Cons!1426) (toList!697 lt!23725)) (bvsgt (_1!1022 (h!2007 (toList!697 lt!23725))) (_1!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(assert (=> b!60199 (= e!39546 e!39544)))

(declare-fun bm!4552 () Bool)

(assert (=> bm!4552 (= call!4554 ($colon$colon!60 e!39542 (ite c!7820 (h!2007 (toList!697 lt!23725)) (tuple2!2023 (_1!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) (_2!1022 (tuple2!2023 lt!23733 (minValue!1959 (v!2383 (underlying!226 thiss!992)))))))))))

(declare-fun c!7819 () Bool)

(assert (=> bm!4552 (= c!7819 c!7820)))

(assert (= (and d!11833 c!7820) b!60195))

(assert (= (and d!11833 (not c!7820)) b!60193))

(assert (= (and b!60193 c!7818) b!60196))

(assert (= (and b!60193 (not c!7818)) b!60199))

(assert (= (and b!60199 c!7817) b!60190))

(assert (= (and b!60199 (not c!7817)) b!60194))

(assert (= (or b!60190 b!60194) bm!4551))

(assert (= (or b!60196 bm!4551) bm!4550))

(assert (= (or b!60195 bm!4550) bm!4552))

(assert (= (and bm!4552 c!7819) b!60192))

(assert (= (and bm!4552 (not c!7819)) b!60197))

(assert (= (and d!11833 res!33323) b!60198))

(assert (= (and b!60198 res!33322) b!60191))

(declare-fun m!52793 () Bool)

(assert (=> d!11833 m!52793))

(declare-fun m!52795 () Bool)

(assert (=> d!11833 m!52795))

(declare-fun m!52797 () Bool)

(assert (=> bm!4552 m!52797))

(declare-fun m!52799 () Bool)

(assert (=> b!60192 m!52799))

(declare-fun m!52801 () Bool)

(assert (=> b!60198 m!52801))

(declare-fun m!52803 () Bool)

(assert (=> b!60191 m!52803))

(assert (=> d!11329 d!11833))

(declare-fun d!11835 () Bool)

(assert (=> d!11835 (= (apply!66 lt!23870 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1069 (getValueByKey!124 (toList!697 lt!23870) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2615 () Bool)

(assert (= bs!2615 d!11835))

(assert (=> bs!2615 m!51599))

(assert (=> bs!2615 m!51599))

(declare-fun m!52805 () Bool)

(assert (=> bs!2615 m!52805))

(assert (=> b!59101 d!11835))

(declare-fun d!11837 () Bool)

(declare-fun e!39547 () Bool)

(assert (=> d!11837 e!39547))

(declare-fun res!33324 () Bool)

(assert (=> d!11837 (=> res!33324 e!39547)))

(declare-fun lt!24624 () Bool)

(assert (=> d!11837 (= res!33324 (not lt!24624))))

(declare-fun lt!24623 () Bool)

(assert (=> d!11837 (= lt!24624 lt!24623)))

(declare-fun lt!24625 () Unit!1551)

(declare-fun e!39548 () Unit!1551)

(assert (=> d!11837 (= lt!24625 e!39548)))

(declare-fun c!7821 () Bool)

(assert (=> d!11837 (= c!7821 lt!24623)))

(assert (=> d!11837 (= lt!24623 (containsKey!128 (toList!697 lt!23979) (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11837 (= (contains!682 lt!23979 (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!24624)))

(declare-fun b!60200 () Bool)

(declare-fun lt!24622 () Unit!1551)

(assert (=> b!60200 (= e!39548 lt!24622)))

(assert (=> b!60200 (= lt!24622 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 lt!23979) (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> b!60200 (isDefined!77 (getValueByKey!124 (toList!697 lt!23979) (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!60201 () Bool)

(declare-fun Unit!1609 () Unit!1551)

(assert (=> b!60201 (= e!39548 Unit!1609)))

(declare-fun b!60202 () Bool)

(assert (=> b!60202 (= e!39547 (isDefined!77 (getValueByKey!124 (toList!697 lt!23979) (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!11837 c!7821) b!60200))

(assert (= (and d!11837 (not c!7821)) b!60201))

(assert (= (and d!11837 (not res!33324)) b!60202))

(declare-fun m!52807 () Bool)

(assert (=> d!11837 m!52807))

(declare-fun m!52809 () Bool)

(assert (=> b!60200 m!52809))

(assert (=> b!60200 m!50927))

(assert (=> b!60200 m!50927))

(declare-fun m!52811 () Bool)

(assert (=> b!60200 m!52811))

(assert (=> b!60202 m!50927))

(assert (=> b!60202 m!50927))

(assert (=> b!60202 m!52811))

(assert (=> d!11267 d!11837))

(declare-fun b!60204 () Bool)

(declare-fun e!39549 () Option!130)

(declare-fun e!39550 () Option!130)

(assert (=> b!60204 (= e!39549 e!39550)))

(declare-fun c!7823 () Bool)

(assert (=> b!60204 (= c!7823 (and ((_ is Cons!1426) lt!23981) (not (= (_1!1022 (h!2007 lt!23981)) (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!60203 () Bool)

(assert (=> b!60203 (= e!39549 (Some!129 (_2!1022 (h!2007 lt!23981))))))

(declare-fun b!60205 () Bool)

(assert (=> b!60205 (= e!39550 (getValueByKey!124 (t!4768 lt!23981) (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!60206 () Bool)

(assert (=> b!60206 (= e!39550 None!128)))

(declare-fun c!7822 () Bool)

(declare-fun d!11839 () Bool)

(assert (=> d!11839 (= c!7822 (and ((_ is Cons!1426) lt!23981) (= (_1!1022 (h!2007 lt!23981)) (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!11839 (= (getValueByKey!124 lt!23981 (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!39549)))

(assert (= (and d!11839 c!7822) b!60203))

(assert (= (and d!11839 (not c!7822)) b!60204))

(assert (= (and b!60204 c!7823) b!60205))

(assert (= (and b!60204 (not c!7823)) b!60206))

(declare-fun m!52813 () Bool)

(assert (=> b!60205 m!52813))

(assert (=> d!11267 d!11839))

(declare-fun d!11841 () Bool)

(assert (=> d!11841 (= (getValueByKey!124 lt!23981 (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!24626 () Unit!1551)

(assert (=> d!11841 (= lt!24626 (choose!311 lt!23981 (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!39551 () Bool)

(assert (=> d!11841 e!39551))

(declare-fun res!33325 () Bool)

(assert (=> d!11841 (=> (not res!33325) (not e!39551))))

(assert (=> d!11841 (= res!33325 (isStrictlySorted!284 lt!23981))))

(assert (=> d!11841 (= (lemmaContainsTupThenGetReturnValue!41 lt!23981 (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!24626)))

(declare-fun b!60207 () Bool)

(declare-fun res!33326 () Bool)

(assert (=> b!60207 (=> (not res!33326) (not e!39551))))

(assert (=> b!60207 (= res!33326 (containsKey!128 lt!23981 (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!60208 () Bool)

(assert (=> b!60208 (= e!39551 (contains!684 lt!23981 (tuple2!2023 (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!11841 res!33325) b!60207))

(assert (= (and b!60207 res!33326) b!60208))

(assert (=> d!11841 m!50921))

(declare-fun m!52815 () Bool)

(assert (=> d!11841 m!52815))

(declare-fun m!52817 () Bool)

(assert (=> d!11841 m!52817))

(declare-fun m!52819 () Bool)

(assert (=> b!60207 m!52819))

(declare-fun m!52821 () Bool)

(assert (=> b!60208 m!52821))

(assert (=> d!11267 d!11841))

(declare-fun b!60209 () Bool)

(declare-fun e!39554 () List!1430)

(declare-fun call!4558 () List!1430)

(assert (=> b!60209 (= e!39554 call!4558)))

(declare-fun lt!24627 () List!1430)

(declare-fun b!60210 () Bool)

(declare-fun e!39553 () Bool)

(assert (=> b!60210 (= e!39553 (contains!684 lt!24627 (tuple2!2023 (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!60211 () Bool)

(declare-fun e!39552 () List!1430)

(assert (=> b!60211 (= e!39552 (insertStrictlySorted!44 (t!4768 (toList!697 call!4407)) (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun bm!4553 () Bool)

(declare-fun call!4556 () List!1430)

(declare-fun call!4557 () List!1430)

(assert (=> bm!4553 (= call!4556 call!4557)))

(declare-fun b!60212 () Bool)

(declare-fun e!39555 () List!1430)

(declare-fun e!39556 () List!1430)

(assert (=> b!60212 (= e!39555 e!39556)))

(declare-fun c!7825 () Bool)

(assert (=> b!60212 (= c!7825 (and ((_ is Cons!1426) (toList!697 call!4407)) (= (_1!1022 (h!2007 (toList!697 call!4407))) (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun d!11843 () Bool)

(assert (=> d!11843 e!39553))

(declare-fun res!33328 () Bool)

(assert (=> d!11843 (=> (not res!33328) (not e!39553))))

(assert (=> d!11843 (= res!33328 (isStrictlySorted!284 lt!24627))))

(assert (=> d!11843 (= lt!24627 e!39555)))

(declare-fun c!7827 () Bool)

(assert (=> d!11843 (= c!7827 (and ((_ is Cons!1426) (toList!697 call!4407)) (bvslt (_1!1022 (h!2007 (toList!697 call!4407))) (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!11843 (isStrictlySorted!284 (toList!697 call!4407))))

(assert (=> d!11843 (= (insertStrictlySorted!44 (toList!697 call!4407) (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!24627)))

(declare-fun bm!4554 () Bool)

(assert (=> bm!4554 (= call!4558 call!4556)))

(declare-fun b!60213 () Bool)

(assert (=> b!60213 (= e!39554 call!4558)))

(declare-fun b!60214 () Bool)

(assert (=> b!60214 (= e!39555 call!4557)))

(declare-fun b!60215 () Bool)

(assert (=> b!60215 (= e!39556 call!4556)))

(declare-fun b!60216 () Bool)

(declare-fun c!7824 () Bool)

(assert (=> b!60216 (= e!39552 (ite c!7825 (t!4768 (toList!697 call!4407)) (ite c!7824 (Cons!1426 (h!2007 (toList!697 call!4407)) (t!4768 (toList!697 call!4407))) Nil!1427)))))

(declare-fun b!60217 () Bool)

(declare-fun res!33327 () Bool)

(assert (=> b!60217 (=> (not res!33327) (not e!39553))))

(assert (=> b!60217 (= res!33327 (containsKey!128 lt!24627 (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!60218 () Bool)

(assert (=> b!60218 (= c!7824 (and ((_ is Cons!1426) (toList!697 call!4407)) (bvsgt (_1!1022 (h!2007 (toList!697 call!4407))) (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!60218 (= e!39556 e!39554)))

(declare-fun bm!4555 () Bool)

(assert (=> bm!4555 (= call!4557 ($colon$colon!60 e!39552 (ite c!7827 (h!2007 (toList!697 call!4407)) (tuple2!2023 (_1!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun c!7826 () Bool)

(assert (=> bm!4555 (= c!7826 c!7827)))

(assert (= (and d!11843 c!7827) b!60214))

(assert (= (and d!11843 (not c!7827)) b!60212))

(assert (= (and b!60212 c!7825) b!60215))

(assert (= (and b!60212 (not c!7825)) b!60218))

(assert (= (and b!60218 c!7824) b!60209))

(assert (= (and b!60218 (not c!7824)) b!60213))

(assert (= (or b!60209 b!60213) bm!4554))

(assert (= (or b!60215 bm!4554) bm!4553))

(assert (= (or b!60214 bm!4553) bm!4555))

(assert (= (and bm!4555 c!7826) b!60211))

(assert (= (and bm!4555 (not c!7826)) b!60216))

(assert (= (and d!11843 res!33328) b!60217))

(assert (= (and b!60217 res!33327) b!60210))

(declare-fun m!52823 () Bool)

(assert (=> d!11843 m!52823))

(declare-fun m!52825 () Bool)

(assert (=> d!11843 m!52825))

(declare-fun m!52827 () Bool)

(assert (=> bm!4555 m!52827))

(declare-fun m!52829 () Bool)

(assert (=> b!60211 m!52829))

(declare-fun m!52831 () Bool)

(assert (=> b!60217 m!52831))

(declare-fun m!52833 () Bool)

(assert (=> b!60210 m!52833))

(assert (=> d!11267 d!11843))

(assert (=> b!59227 d!11375))

(declare-fun d!11845 () Bool)

(declare-fun res!33329 () Bool)

(declare-fun e!39557 () Bool)

(assert (=> d!11845 (=> res!33329 e!39557)))

(assert (=> d!11845 (= res!33329 (= (select (arr!1781 (_keys!3667 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(assert (=> d!11845 (= (arrayContainsKey!0 (_keys!3667 newMap!16) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) e!39557)))

(declare-fun b!60219 () Bool)

(declare-fun e!39558 () Bool)

(assert (=> b!60219 (= e!39557 e!39558)))

(declare-fun res!33330 () Bool)

(assert (=> b!60219 (=> (not res!33330) (not e!39558))))

(assert (=> b!60219 (= res!33330 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2011 (_keys!3667 newMap!16))))))

(declare-fun b!60220 () Bool)

(assert (=> b!60220 (= e!39558 (arrayContainsKey!0 (_keys!3667 newMap!16) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!11845 (not res!33329)) b!60219))

(assert (= (and b!60219 res!33330) b!60220))

(assert (=> d!11845 m!51977))

(assert (=> b!60220 m!50529))

(declare-fun m!52835 () Bool)

(assert (=> b!60220 m!52835))

(assert (=> b!59186 d!11845))

(declare-fun d!11847 () Bool)

(declare-fun e!39559 () Bool)

(assert (=> d!11847 e!39559))

(declare-fun res!33331 () Bool)

(assert (=> d!11847 (=> (not res!33331) (not e!39559))))

(declare-fun lt!24629 () ListLongMap!1363)

(assert (=> d!11847 (= res!33331 (contains!682 lt!24629 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))))))

(declare-fun lt!24631 () List!1430)

(assert (=> d!11847 (= lt!24629 (ListLongMap!1364 lt!24631))))

(declare-fun lt!24628 () Unit!1551)

(declare-fun lt!24630 () Unit!1551)

(assert (=> d!11847 (= lt!24628 lt!24630)))

(assert (=> d!11847 (= (getValueByKey!124 lt!24631 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))) (Some!129 (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))))))

(assert (=> d!11847 (= lt!24630 (lemmaContainsTupThenGetReturnValue!41 lt!24631 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))))))

(assert (=> d!11847 (= lt!24631 (insertStrictlySorted!44 (toList!697 call!4455) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))))))

(assert (=> d!11847 (= (+!81 call!4455 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))) lt!24629)))

(declare-fun b!60221 () Bool)

(declare-fun res!33332 () Bool)

(assert (=> b!60221 (=> (not res!33332) (not e!39559))))

(assert (=> b!60221 (= res!33332 (= (getValueByKey!124 (toList!697 lt!24629) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))) (Some!129 (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))))))))

(declare-fun b!60222 () Bool)

(assert (=> b!60222 (= e!39559 (contains!684 (toList!697 lt!24629) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))))))

(assert (= (and d!11847 res!33331) b!60221))

(assert (= (and b!60221 res!33332) b!60222))

(declare-fun m!52837 () Bool)

(assert (=> d!11847 m!52837))

(declare-fun m!52839 () Bool)

(assert (=> d!11847 m!52839))

(declare-fun m!52841 () Bool)

(assert (=> d!11847 m!52841))

(declare-fun m!52843 () Bool)

(assert (=> d!11847 m!52843))

(declare-fun m!52845 () Bool)

(assert (=> b!60221 m!52845))

(declare-fun m!52847 () Bool)

(assert (=> b!60222 m!52847))

(assert (=> b!59375 d!11847))

(declare-fun d!11849 () Bool)

(declare-fun e!39560 () Bool)

(assert (=> d!11849 e!39560))

(declare-fun res!33333 () Bool)

(assert (=> d!11849 (=> res!33333 e!39560)))

(declare-fun lt!24634 () Bool)

(assert (=> d!11849 (= res!33333 (not lt!24634))))

(declare-fun lt!24633 () Bool)

(assert (=> d!11849 (= lt!24634 lt!24633)))

(declare-fun lt!24635 () Unit!1551)

(declare-fun e!39561 () Unit!1551)

(assert (=> d!11849 (= lt!24635 e!39561)))

(declare-fun c!7828 () Bool)

(assert (=> d!11849 (= c!7828 lt!24633)))

(assert (=> d!11849 (= lt!24633 (containsKey!128 (toList!697 lt!24144) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11849 (= (contains!682 lt!24144 #b1000000000000000000000000000000000000000000000000000000000000000) lt!24634)))

(declare-fun b!60223 () Bool)

(declare-fun lt!24632 () Unit!1551)

(assert (=> b!60223 (= e!39561 lt!24632)))

(assert (=> b!60223 (= lt!24632 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 lt!24144) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!60223 (isDefined!77 (getValueByKey!124 (toList!697 lt!24144) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60224 () Bool)

(declare-fun Unit!1610 () Unit!1551)

(assert (=> b!60224 (= e!39561 Unit!1610)))

(declare-fun b!60225 () Bool)

(assert (=> b!60225 (= e!39560 (isDefined!77 (getValueByKey!124 (toList!697 lt!24144) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11849 c!7828) b!60223))

(assert (= (and d!11849 (not c!7828)) b!60224))

(assert (= (and d!11849 (not res!33333)) b!60225))

(declare-fun m!52849 () Bool)

(assert (=> d!11849 m!52849))

(declare-fun m!52851 () Bool)

(assert (=> b!60223 m!52851))

(assert (=> b!60223 m!51929))

(assert (=> b!60223 m!51929))

(declare-fun m!52853 () Bool)

(assert (=> b!60223 m!52853))

(assert (=> b!60225 m!51929))

(assert (=> b!60225 m!51929))

(assert (=> b!60225 m!52853))

(assert (=> bm!4455 d!11849))

(declare-fun d!11851 () Bool)

(declare-fun lt!24636 () Bool)

(assert (=> d!11851 (= lt!24636 (select (content!64 (toList!697 lt!24013)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))

(declare-fun e!39562 () Bool)

(assert (=> d!11851 (= lt!24636 e!39562)))

(declare-fun res!33335 () Bool)

(assert (=> d!11851 (=> (not res!33335) (not e!39562))))

(assert (=> d!11851 (= res!33335 ((_ is Cons!1426) (toList!697 lt!24013)))))

(assert (=> d!11851 (= (contains!684 (toList!697 lt!24013) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))) lt!24636)))

(declare-fun b!60226 () Bool)

(declare-fun e!39563 () Bool)

(assert (=> b!60226 (= e!39562 e!39563)))

(declare-fun res!33334 () Bool)

(assert (=> b!60226 (=> res!33334 e!39563)))

(assert (=> b!60226 (= res!33334 (= (h!2007 (toList!697 lt!24013)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))

(declare-fun b!60227 () Bool)

(assert (=> b!60227 (= e!39563 (contains!684 (t!4768 (toList!697 lt!24013)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 (v!2383 (underlying!226 thiss!992))))))))

(assert (= (and d!11851 res!33335) b!60226))

(assert (= (and b!60226 (not res!33334)) b!60227))

(declare-fun m!52855 () Bool)

(assert (=> d!11851 m!52855))

(declare-fun m!52857 () Bool)

(assert (=> d!11851 m!52857))

(declare-fun m!52859 () Bool)

(assert (=> b!60227 m!52859))

(assert (=> b!59231 d!11851))

(declare-fun d!11853 () Bool)

(declare-fun isEmpty!295 (List!1430) Bool)

(assert (=> d!11853 (= (isEmpty!294 lt!24092) (isEmpty!295 (toList!697 lt!24092)))))

(declare-fun bs!2616 () Bool)

(assert (= bs!2616 d!11853))

(declare-fun m!52861 () Bool)

(assert (=> bs!2616 m!52861))

(assert (=> b!59334 d!11853))

(assert (=> b!59164 d!11365))

(assert (=> b!59119 d!11793))

(assert (=> b!59119 d!11307))

(declare-fun call!4565 () ListLongMap!1363)

(declare-fun bm!4556 () Bool)

(declare-fun call!4564 () ListLongMap!1363)

(declare-fun c!7834 () Bool)

(declare-fun call!4562 () ListLongMap!1363)

(declare-fun c!7831 () Bool)

(declare-fun call!4561 () ListLongMap!1363)

(assert (=> bm!4556 (= call!4562 (+!81 (ite c!7831 call!4561 (ite c!7834 call!4564 call!4565)) (ite (or c!7831 c!7834) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1959 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))))))

(declare-fun b!60228 () Bool)

(declare-fun e!39564 () ListLongMap!1363)

(declare-fun call!4559 () ListLongMap!1363)

(assert (=> b!60228 (= e!39564 call!4559)))

(declare-fun b!60229 () Bool)

(declare-fun c!7833 () Bool)

(assert (=> b!60229 (= c!7833 (and (not (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!39568 () ListLongMap!1363)

(assert (=> b!60229 (= e!39568 e!39564)))

(declare-fun b!60230 () Bool)

(declare-fun e!39571 () Bool)

(declare-fun call!4563 () Bool)

(assert (=> b!60230 (= e!39571 (not call!4563))))

(declare-fun b!60232 () Bool)

(declare-fun e!39570 () Bool)

(assert (=> b!60232 (= e!39570 (validKeyInArray!0 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!60233 () Bool)

(declare-fun e!39574 () Bool)

(assert (=> b!60233 (= e!39571 e!39574)))

(declare-fun res!33344 () Bool)

(assert (=> b!60233 (= res!33344 call!4563)))

(assert (=> b!60233 (=> (not res!33344) (not e!39574))))

(declare-fun b!60234 () Bool)

(declare-fun e!39576 () Bool)

(assert (=> b!60234 (= e!39576 e!39571)))

(declare-fun c!7832 () Bool)

(assert (=> b!60234 (= c!7832 (not (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!60235 () Bool)

(declare-fun e!39572 () Bool)

(declare-fun call!4560 () Bool)

(assert (=> b!60235 (= e!39572 (not call!4560))))

(declare-fun b!60236 () Bool)

(declare-fun e!39565 () Bool)

(declare-fun lt!24655 () ListLongMap!1363)

(assert (=> b!60236 (= e!39565 (= (apply!66 lt!24655 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1959 newMap!16)))))

(declare-fun b!60237 () Bool)

(declare-fun e!39566 () ListLongMap!1363)

(assert (=> b!60237 (= e!39566 e!39568)))

(assert (=> b!60237 (= c!7834 (and (not (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!60238 () Bool)

(declare-fun e!39573 () Unit!1551)

(declare-fun Unit!1611 () Unit!1551)

(assert (=> b!60238 (= e!39573 Unit!1611)))

(declare-fun bm!4557 () Bool)

(assert (=> bm!4557 (= call!4560 (contains!682 lt!24655 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60239 () Bool)

(declare-fun res!33336 () Bool)

(assert (=> b!60239 (=> (not res!33336) (not e!39576))))

(declare-fun e!39567 () Bool)

(assert (=> b!60239 (= res!33336 e!39567)))

(declare-fun res!33337 () Bool)

(assert (=> b!60239 (=> res!33337 e!39567)))

(declare-fun e!39575 () Bool)

(assert (=> b!60239 (= res!33337 (not e!39575))))

(declare-fun res!33339 () Bool)

(assert (=> b!60239 (=> (not res!33339) (not e!39575))))

(assert (=> b!60239 (= res!33339 (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(declare-fun b!60231 () Bool)

(assert (=> b!60231 (= e!39566 (+!81 call!4562 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))))))

(declare-fun d!11855 () Bool)

(assert (=> d!11855 e!39576))

(declare-fun res!33343 () Bool)

(assert (=> d!11855 (=> (not res!33343) (not e!39576))))

(assert (=> d!11855 (= res!33343 (or (bvsge #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))))

(declare-fun lt!24640 () ListLongMap!1363)

(assert (=> d!11855 (= lt!24655 lt!24640)))

(declare-fun lt!24643 () Unit!1551)

(assert (=> d!11855 (= lt!24643 e!39573)))

(declare-fun c!7829 () Bool)

(assert (=> d!11855 (= c!7829 e!39570)))

(declare-fun res!33340 () Bool)

(assert (=> d!11855 (=> (not res!33340) (not e!39570))))

(assert (=> d!11855 (= res!33340 (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(assert (=> d!11855 (= lt!24640 e!39566)))

(assert (=> d!11855 (= c!7831 (and (not (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11855 (validMask!0 (mask!5927 newMap!16))))

(assert (=> d!11855 (= (getCurrentListMap!402 (_keys!3667 newMap!16) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (index!3032 lt!23832) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16))) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)) lt!24655)))

(declare-fun bm!4558 () Bool)

(assert (=> bm!4558 (= call!4565 call!4564)))

(declare-fun b!60240 () Bool)

(assert (=> b!60240 (= e!39575 (validKeyInArray!0 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!60241 () Bool)

(assert (=> b!60241 (= e!39572 e!39565)))

(declare-fun res!33342 () Bool)

(assert (=> b!60241 (= res!33342 call!4560)))

(assert (=> b!60241 (=> (not res!33342) (not e!39565))))

(declare-fun bm!4559 () Bool)

(assert (=> bm!4559 (= call!4564 call!4561)))

(declare-fun b!60242 () Bool)

(assert (=> b!60242 (= e!39564 call!4565)))

(declare-fun bm!4560 () Bool)

(assert (=> bm!4560 (= call!4559 call!4562)))

(declare-fun bm!4561 () Bool)

(assert (=> bm!4561 (= call!4561 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (index!3032 lt!23832) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16))) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun b!60243 () Bool)

(declare-fun e!39569 () Bool)

(assert (=> b!60243 (= e!39569 (= (apply!66 lt!24655 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)) (get!1066 (select (arr!1782 (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (index!3032 lt!23832) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2043 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!60243 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2012 (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (index!3032 lt!23832) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16))))))))

(assert (=> b!60243 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(declare-fun b!60244 () Bool)

(declare-fun lt!24651 () Unit!1551)

(assert (=> b!60244 (= e!39573 lt!24651)))

(declare-fun lt!24644 () ListLongMap!1363)

(assert (=> b!60244 (= lt!24644 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (index!3032 lt!23832) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16))) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!24639 () (_ BitVec 64))

(assert (=> b!60244 (= lt!24639 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24637 () (_ BitVec 64))

(assert (=> b!60244 (= lt!24637 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24652 () Unit!1551)

(assert (=> b!60244 (= lt!24652 (addStillContains!42 lt!24644 lt!24639 (zeroValue!1959 newMap!16) lt!24637))))

(assert (=> b!60244 (contains!682 (+!81 lt!24644 (tuple2!2023 lt!24639 (zeroValue!1959 newMap!16))) lt!24637)))

(declare-fun lt!24658 () Unit!1551)

(assert (=> b!60244 (= lt!24658 lt!24652)))

(declare-fun lt!24641 () ListLongMap!1363)

(assert (=> b!60244 (= lt!24641 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (index!3032 lt!23832) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16))) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!24649 () (_ BitVec 64))

(assert (=> b!60244 (= lt!24649 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24654 () (_ BitVec 64))

(assert (=> b!60244 (= lt!24654 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24647 () Unit!1551)

(assert (=> b!60244 (= lt!24647 (addApplyDifferent!42 lt!24641 lt!24649 (minValue!1959 newMap!16) lt!24654))))

(assert (=> b!60244 (= (apply!66 (+!81 lt!24641 (tuple2!2023 lt!24649 (minValue!1959 newMap!16))) lt!24654) (apply!66 lt!24641 lt!24654))))

(declare-fun lt!24653 () Unit!1551)

(assert (=> b!60244 (= lt!24653 lt!24647)))

(declare-fun lt!24642 () ListLongMap!1363)

(assert (=> b!60244 (= lt!24642 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (index!3032 lt!23832) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16))) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!24650 () (_ BitVec 64))

(assert (=> b!60244 (= lt!24650 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24638 () (_ BitVec 64))

(assert (=> b!60244 (= lt!24638 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24656 () Unit!1551)

(assert (=> b!60244 (= lt!24656 (addApplyDifferent!42 lt!24642 lt!24650 (zeroValue!1959 newMap!16) lt!24638))))

(assert (=> b!60244 (= (apply!66 (+!81 lt!24642 (tuple2!2023 lt!24650 (zeroValue!1959 newMap!16))) lt!24638) (apply!66 lt!24642 lt!24638))))

(declare-fun lt!24645 () Unit!1551)

(assert (=> b!60244 (= lt!24645 lt!24656)))

(declare-fun lt!24648 () ListLongMap!1363)

(assert (=> b!60244 (= lt!24648 (getCurrentListMapNoExtraKeys!44 (_keys!3667 newMap!16) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (index!3032 lt!23832) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16))) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(declare-fun lt!24646 () (_ BitVec 64))

(assert (=> b!60244 (= lt!24646 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24657 () (_ BitVec 64))

(assert (=> b!60244 (= lt!24657 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!60244 (= lt!24651 (addApplyDifferent!42 lt!24648 lt!24646 (minValue!1959 newMap!16) lt!24657))))

(assert (=> b!60244 (= (apply!66 (+!81 lt!24648 (tuple2!2023 lt!24646 (minValue!1959 newMap!16))) lt!24657) (apply!66 lt!24648 lt!24657))))

(declare-fun b!60245 () Bool)

(assert (=> b!60245 (= e!39567 e!39569)))

(declare-fun res!33338 () Bool)

(assert (=> b!60245 (=> (not res!33338) (not e!39569))))

(assert (=> b!60245 (= res!33338 (contains!682 lt!24655 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!60245 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2011 (_keys!3667 newMap!16))))))

(declare-fun b!60246 () Bool)

(declare-fun res!33341 () Bool)

(assert (=> b!60246 (=> (not res!33341) (not e!39576))))

(assert (=> b!60246 (= res!33341 e!39572)))

(declare-fun c!7830 () Bool)

(assert (=> b!60246 (= c!7830 (not (= (bvand (extraKeys!1930 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun bm!4562 () Bool)

(assert (=> bm!4562 (= call!4563 (contains!682 lt!24655 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60247 () Bool)

(assert (=> b!60247 (= e!39568 call!4559)))

(declare-fun b!60248 () Bool)

(assert (=> b!60248 (= e!39574 (= (apply!66 lt!24655 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1959 newMap!16)))))

(assert (= (and d!11855 c!7831) b!60231))

(assert (= (and d!11855 (not c!7831)) b!60237))

(assert (= (and b!60237 c!7834) b!60247))

(assert (= (and b!60237 (not c!7834)) b!60229))

(assert (= (and b!60229 c!7833) b!60228))

(assert (= (and b!60229 (not c!7833)) b!60242))

(assert (= (or b!60228 b!60242) bm!4558))

(assert (= (or b!60247 bm!4558) bm!4559))

(assert (= (or b!60247 b!60228) bm!4560))

(assert (= (or b!60231 bm!4559) bm!4561))

(assert (= (or b!60231 bm!4560) bm!4556))

(assert (= (and d!11855 res!33340) b!60232))

(assert (= (and d!11855 c!7829) b!60244))

(assert (= (and d!11855 (not c!7829)) b!60238))

(assert (= (and d!11855 res!33343) b!60239))

(assert (= (and b!60239 res!33339) b!60240))

(assert (= (and b!60239 (not res!33337)) b!60245))

(assert (= (and b!60245 res!33338) b!60243))

(assert (= (and b!60239 res!33336) b!60246))

(assert (= (and b!60246 c!7830) b!60241))

(assert (= (and b!60246 (not c!7830)) b!60235))

(assert (= (and b!60241 res!33342) b!60236))

(assert (= (or b!60241 b!60235) bm!4557))

(assert (= (and b!60246 res!33341) b!60234))

(assert (= (and b!60234 c!7832) b!60233))

(assert (= (and b!60234 (not c!7832)) b!60230))

(assert (= (and b!60233 res!33344) b!60248))

(assert (= (or b!60233 b!60230) bm!4562))

(declare-fun b_lambda!2645 () Bool)

(assert (=> (not b_lambda!2645) (not b!60243)))

(assert (=> b!60243 t!4775))

(declare-fun b_and!3655 () Bool)

(assert (= b_and!3651 (and (=> t!4775 result!2381) b_and!3655)))

(assert (=> b!60243 t!4777))

(declare-fun b_and!3657 () Bool)

(assert (= b_and!3653 (and (=> t!4777 result!2383) b_and!3657)))

(declare-fun m!52863 () Bool)

(assert (=> b!60231 m!52863))

(declare-fun m!52865 () Bool)

(assert (=> bm!4561 m!52865))

(declare-fun m!52867 () Bool)

(assert (=> bm!4556 m!52867))

(declare-fun m!52869 () Bool)

(assert (=> b!60236 m!52869))

(assert (=> b!60240 m!50803))

(assert (=> b!60240 m!50803))

(assert (=> b!60240 m!50805))

(declare-fun m!52871 () Bool)

(assert (=> bm!4557 m!52871))

(declare-fun m!52873 () Bool)

(assert (=> b!60243 m!52873))

(assert (=> b!60243 m!50803))

(declare-fun m!52875 () Bool)

(assert (=> b!60243 m!52875))

(assert (=> b!60243 m!50813))

(assert (=> b!60243 m!52873))

(assert (=> b!60243 m!50813))

(declare-fun m!52877 () Bool)

(assert (=> b!60243 m!52877))

(assert (=> b!60243 m!50803))

(declare-fun m!52879 () Bool)

(assert (=> b!60248 m!52879))

(assert (=> b!60245 m!50803))

(assert (=> b!60245 m!50803))

(declare-fun m!52881 () Bool)

(assert (=> b!60245 m!52881))

(assert (=> b!60232 m!50803))

(assert (=> b!60232 m!50803))

(assert (=> b!60232 m!50805))

(assert (=> d!11855 m!50771))

(declare-fun m!52883 () Bool)

(assert (=> bm!4562 m!52883))

(declare-fun m!52885 () Bool)

(assert (=> b!60244 m!52885))

(declare-fun m!52887 () Bool)

(assert (=> b!60244 m!52887))

(declare-fun m!52889 () Bool)

(assert (=> b!60244 m!52889))

(declare-fun m!52891 () Bool)

(assert (=> b!60244 m!52891))

(assert (=> b!60244 m!52885))

(declare-fun m!52893 () Bool)

(assert (=> b!60244 m!52893))

(declare-fun m!52895 () Bool)

(assert (=> b!60244 m!52895))

(declare-fun m!52897 () Bool)

(assert (=> b!60244 m!52897))

(assert (=> b!60244 m!52865))

(declare-fun m!52899 () Bool)

(assert (=> b!60244 m!52899))

(declare-fun m!52901 () Bool)

(assert (=> b!60244 m!52901))

(declare-fun m!52903 () Bool)

(assert (=> b!60244 m!52903))

(assert (=> b!60244 m!50803))

(declare-fun m!52905 () Bool)

(assert (=> b!60244 m!52905))

(declare-fun m!52907 () Bool)

(assert (=> b!60244 m!52907))

(declare-fun m!52909 () Bool)

(assert (=> b!60244 m!52909))

(assert (=> b!60244 m!52899))

(declare-fun m!52911 () Bool)

(assert (=> b!60244 m!52911))

(assert (=> b!60244 m!52895))

(declare-fun m!52913 () Bool)

(assert (=> b!60244 m!52913))

(assert (=> b!60244 m!52905))

(assert (=> b!59119 d!11855))

(declare-fun d!11857 () Bool)

(declare-fun res!33345 () Bool)

(declare-fun e!39577 () Bool)

(assert (=> d!11857 (=> res!33345 e!39577)))

(assert (=> d!11857 (= res!33345 (and ((_ is Cons!1426) (toList!697 (getCurrentListMap!402 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))) (= (_1!1022 (h!2007 (toList!697 (getCurrentListMap!402 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16))))) (select (arr!1781 (_keys!3667 newMap!16)) (index!3032 lt!23832)))))))

(assert (=> d!11857 (= (containsKey!128 (toList!697 (getCurrentListMap!402 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16))) (select (arr!1781 (_keys!3667 newMap!16)) (index!3032 lt!23832))) e!39577)))

(declare-fun b!60249 () Bool)

(declare-fun e!39578 () Bool)

(assert (=> b!60249 (= e!39577 e!39578)))

(declare-fun res!33346 () Bool)

(assert (=> b!60249 (=> (not res!33346) (not e!39578))))

(assert (=> b!60249 (= res!33346 (and (or (not ((_ is Cons!1426) (toList!697 (getCurrentListMap!402 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16))))) (bvsle (_1!1022 (h!2007 (toList!697 (getCurrentListMap!402 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16))))) (select (arr!1781 (_keys!3667 newMap!16)) (index!3032 lt!23832)))) ((_ is Cons!1426) (toList!697 (getCurrentListMap!402 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))) (bvslt (_1!1022 (h!2007 (toList!697 (getCurrentListMap!402 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16))))) (select (arr!1781 (_keys!3667 newMap!16)) (index!3032 lt!23832)))))))

(declare-fun b!60250 () Bool)

(assert (=> b!60250 (= e!39578 (containsKey!128 (t!4768 (toList!697 (getCurrentListMap!402 (_keys!3667 newMap!16) lt!23824 (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))) (select (arr!1781 (_keys!3667 newMap!16)) (index!3032 lt!23832))))))

(assert (= (and d!11857 (not res!33345)) b!60249))

(assert (= (and b!60249 res!33346) b!60250))

(assert (=> b!60250 m!50725))

(declare-fun m!52915 () Bool)

(assert (=> b!60250 m!52915))

(assert (=> d!11249 d!11857))

(declare-fun d!11859 () Bool)

(assert (=> d!11859 (= (get!1067 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2382 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!59202 d!11859))

(assert (=> d!11251 d!11523))

(declare-fun d!11861 () Bool)

(assert (=> d!11861 (= (apply!66 (+!81 lt!24055 (tuple2!2023 lt!24063 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)))) lt!24068) (apply!66 lt!24055 lt!24068))))

(declare-fun lt!24659 () Unit!1551)

(assert (=> d!11861 (= lt!24659 (choose!307 lt!24055 lt!24063 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)) lt!24068))))

(declare-fun e!39579 () Bool)

(assert (=> d!11861 e!39579))

(declare-fun res!33347 () Bool)

(assert (=> d!11861 (=> (not res!33347) (not e!39579))))

(assert (=> d!11861 (= res!33347 (contains!682 lt!24055 lt!24068))))

(assert (=> d!11861 (= (addApplyDifferent!42 lt!24055 lt!24063 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)) lt!24068) lt!24659)))

(declare-fun b!60251 () Bool)

(assert (=> b!60251 (= e!39579 (not (= lt!24068 lt!24063)))))

(assert (= (and d!11861 res!33347) b!60251))

(assert (=> d!11861 m!51123))

(assert (=> d!11861 m!51129))

(assert (=> d!11861 m!51147))

(declare-fun m!52917 () Bool)

(assert (=> d!11861 m!52917))

(assert (=> d!11861 m!51129))

(declare-fun m!52919 () Bool)

(assert (=> d!11861 m!52919))

(assert (=> b!59305 d!11861))

(declare-fun d!11863 () Bool)

(assert (=> d!11863 (= (apply!66 lt!24055 lt!24068) (get!1069 (getValueByKey!124 (toList!697 lt!24055) lt!24068)))))

(declare-fun bs!2617 () Bool)

(assert (= bs!2617 d!11863))

(declare-fun m!52921 () Bool)

(assert (=> bs!2617 m!52921))

(assert (=> bs!2617 m!52921))

(declare-fun m!52923 () Bool)

(assert (=> bs!2617 m!52923))

(assert (=> b!59305 d!11863))

(declare-fun d!11865 () Bool)

(declare-fun e!39580 () Bool)

(assert (=> d!11865 e!39580))

(declare-fun res!33348 () Bool)

(assert (=> d!11865 (=> (not res!33348) (not e!39580))))

(declare-fun lt!24661 () ListLongMap!1363)

(assert (=> d!11865 (= res!33348 (contains!682 lt!24661 (_1!1022 (tuple2!2023 lt!24064 (zeroValue!1959 newMap!16)))))))

(declare-fun lt!24663 () List!1430)

(assert (=> d!11865 (= lt!24661 (ListLongMap!1364 lt!24663))))

(declare-fun lt!24660 () Unit!1551)

(declare-fun lt!24662 () Unit!1551)

(assert (=> d!11865 (= lt!24660 lt!24662)))

(assert (=> d!11865 (= (getValueByKey!124 lt!24663 (_1!1022 (tuple2!2023 lt!24064 (zeroValue!1959 newMap!16)))) (Some!129 (_2!1022 (tuple2!2023 lt!24064 (zeroValue!1959 newMap!16)))))))

(assert (=> d!11865 (= lt!24662 (lemmaContainsTupThenGetReturnValue!41 lt!24663 (_1!1022 (tuple2!2023 lt!24064 (zeroValue!1959 newMap!16))) (_2!1022 (tuple2!2023 lt!24064 (zeroValue!1959 newMap!16)))))))

(assert (=> d!11865 (= lt!24663 (insertStrictlySorted!44 (toList!697 lt!24056) (_1!1022 (tuple2!2023 lt!24064 (zeroValue!1959 newMap!16))) (_2!1022 (tuple2!2023 lt!24064 (zeroValue!1959 newMap!16)))))))

(assert (=> d!11865 (= (+!81 lt!24056 (tuple2!2023 lt!24064 (zeroValue!1959 newMap!16))) lt!24661)))

(declare-fun b!60252 () Bool)

(declare-fun res!33349 () Bool)

(assert (=> b!60252 (=> (not res!33349) (not e!39580))))

(assert (=> b!60252 (= res!33349 (= (getValueByKey!124 (toList!697 lt!24661) (_1!1022 (tuple2!2023 lt!24064 (zeroValue!1959 newMap!16)))) (Some!129 (_2!1022 (tuple2!2023 lt!24064 (zeroValue!1959 newMap!16))))))))

(declare-fun b!60253 () Bool)

(assert (=> b!60253 (= e!39580 (contains!684 (toList!697 lt!24661) (tuple2!2023 lt!24064 (zeroValue!1959 newMap!16))))))

(assert (= (and d!11865 res!33348) b!60252))

(assert (= (and b!60252 res!33349) b!60253))

(declare-fun m!52925 () Bool)

(assert (=> d!11865 m!52925))

(declare-fun m!52927 () Bool)

(assert (=> d!11865 m!52927))

(declare-fun m!52929 () Bool)

(assert (=> d!11865 m!52929))

(declare-fun m!52931 () Bool)

(assert (=> d!11865 m!52931))

(declare-fun m!52933 () Bool)

(assert (=> b!60252 m!52933))

(declare-fun m!52935 () Bool)

(assert (=> b!60253 m!52935))

(assert (=> b!59305 d!11865))

(declare-fun d!11867 () Bool)

(declare-fun e!39581 () Bool)

(assert (=> d!11867 e!39581))

(declare-fun res!33350 () Bool)

(assert (=> d!11867 (=> res!33350 e!39581)))

(declare-fun lt!24666 () Bool)

(assert (=> d!11867 (= res!33350 (not lt!24666))))

(declare-fun lt!24665 () Bool)

(assert (=> d!11867 (= lt!24666 lt!24665)))

(declare-fun lt!24667 () Unit!1551)

(declare-fun e!39582 () Unit!1551)

(assert (=> d!11867 (= lt!24667 e!39582)))

(declare-fun c!7835 () Bool)

(assert (=> d!11867 (= c!7835 lt!24665)))

(assert (=> d!11867 (= lt!24665 (containsKey!128 (toList!697 (+!81 lt!24058 (tuple2!2023 lt!24053 (zeroValue!1959 newMap!16)))) lt!24051))))

(assert (=> d!11867 (= (contains!682 (+!81 lt!24058 (tuple2!2023 lt!24053 (zeroValue!1959 newMap!16))) lt!24051) lt!24666)))

(declare-fun b!60254 () Bool)

(declare-fun lt!24664 () Unit!1551)

(assert (=> b!60254 (= e!39582 lt!24664)))

(assert (=> b!60254 (= lt!24664 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 (+!81 lt!24058 (tuple2!2023 lt!24053 (zeroValue!1959 newMap!16)))) lt!24051))))

(assert (=> b!60254 (isDefined!77 (getValueByKey!124 (toList!697 (+!81 lt!24058 (tuple2!2023 lt!24053 (zeroValue!1959 newMap!16)))) lt!24051))))

(declare-fun b!60255 () Bool)

(declare-fun Unit!1612 () Unit!1551)

(assert (=> b!60255 (= e!39582 Unit!1612)))

(declare-fun b!60256 () Bool)

(assert (=> b!60256 (= e!39581 (isDefined!77 (getValueByKey!124 (toList!697 (+!81 lt!24058 (tuple2!2023 lt!24053 (zeroValue!1959 newMap!16)))) lt!24051)))))

(assert (= (and d!11867 c!7835) b!60254))

(assert (= (and d!11867 (not c!7835)) b!60255))

(assert (= (and d!11867 (not res!33350)) b!60256))

(declare-fun m!52937 () Bool)

(assert (=> d!11867 m!52937))

(declare-fun m!52939 () Bool)

(assert (=> b!60254 m!52939))

(declare-fun m!52941 () Bool)

(assert (=> b!60254 m!52941))

(assert (=> b!60254 m!52941))

(declare-fun m!52943 () Bool)

(assert (=> b!60254 m!52943))

(assert (=> b!60256 m!52941))

(assert (=> b!60256 m!52941))

(assert (=> b!60256 m!52943))

(assert (=> b!59305 d!11867))

(declare-fun d!11869 () Bool)

(declare-fun e!39583 () Bool)

(assert (=> d!11869 e!39583))

(declare-fun res!33351 () Bool)

(assert (=> d!11869 (=> (not res!33351) (not e!39583))))

(declare-fun lt!24669 () ListLongMap!1363)

(assert (=> d!11869 (= res!33351 (contains!682 lt!24669 (_1!1022 (tuple2!2023 lt!24053 (zeroValue!1959 newMap!16)))))))

(declare-fun lt!24671 () List!1430)

(assert (=> d!11869 (= lt!24669 (ListLongMap!1364 lt!24671))))

(declare-fun lt!24668 () Unit!1551)

(declare-fun lt!24670 () Unit!1551)

(assert (=> d!11869 (= lt!24668 lt!24670)))

(assert (=> d!11869 (= (getValueByKey!124 lt!24671 (_1!1022 (tuple2!2023 lt!24053 (zeroValue!1959 newMap!16)))) (Some!129 (_2!1022 (tuple2!2023 lt!24053 (zeroValue!1959 newMap!16)))))))

(assert (=> d!11869 (= lt!24670 (lemmaContainsTupThenGetReturnValue!41 lt!24671 (_1!1022 (tuple2!2023 lt!24053 (zeroValue!1959 newMap!16))) (_2!1022 (tuple2!2023 lt!24053 (zeroValue!1959 newMap!16)))))))

(assert (=> d!11869 (= lt!24671 (insertStrictlySorted!44 (toList!697 lt!24058) (_1!1022 (tuple2!2023 lt!24053 (zeroValue!1959 newMap!16))) (_2!1022 (tuple2!2023 lt!24053 (zeroValue!1959 newMap!16)))))))

(assert (=> d!11869 (= (+!81 lt!24058 (tuple2!2023 lt!24053 (zeroValue!1959 newMap!16))) lt!24669)))

(declare-fun b!60257 () Bool)

(declare-fun res!33352 () Bool)

(assert (=> b!60257 (=> (not res!33352) (not e!39583))))

(assert (=> b!60257 (= res!33352 (= (getValueByKey!124 (toList!697 lt!24669) (_1!1022 (tuple2!2023 lt!24053 (zeroValue!1959 newMap!16)))) (Some!129 (_2!1022 (tuple2!2023 lt!24053 (zeroValue!1959 newMap!16))))))))

(declare-fun b!60258 () Bool)

(assert (=> b!60258 (= e!39583 (contains!684 (toList!697 lt!24669) (tuple2!2023 lt!24053 (zeroValue!1959 newMap!16))))))

(assert (= (and d!11869 res!33351) b!60257))

(assert (= (and b!60257 res!33352) b!60258))

(declare-fun m!52945 () Bool)

(assert (=> d!11869 m!52945))

(declare-fun m!52947 () Bool)

(assert (=> d!11869 m!52947))

(declare-fun m!52949 () Bool)

(assert (=> d!11869 m!52949))

(declare-fun m!52951 () Bool)

(assert (=> d!11869 m!52951))

(declare-fun m!52953 () Bool)

(assert (=> b!60257 m!52953))

(declare-fun m!52955 () Bool)

(assert (=> b!60258 m!52955))

(assert (=> b!59305 d!11869))

(declare-fun d!11871 () Bool)

(assert (=> d!11871 (= (apply!66 lt!24056 lt!24052) (get!1069 (getValueByKey!124 (toList!697 lt!24056) lt!24052)))))

(declare-fun bs!2618 () Bool)

(assert (= bs!2618 d!11871))

(declare-fun m!52957 () Bool)

(assert (=> bs!2618 m!52957))

(assert (=> bs!2618 m!52957))

(declare-fun m!52959 () Bool)

(assert (=> bs!2618 m!52959))

(assert (=> b!59305 d!11871))

(declare-fun d!11873 () Bool)

(assert (=> d!11873 (= (apply!66 (+!81 lt!24056 (tuple2!2023 lt!24064 (zeroValue!1959 newMap!16))) lt!24052) (apply!66 lt!24056 lt!24052))))

(declare-fun lt!24672 () Unit!1551)

(assert (=> d!11873 (= lt!24672 (choose!307 lt!24056 lt!24064 (zeroValue!1959 newMap!16) lt!24052))))

(declare-fun e!39584 () Bool)

(assert (=> d!11873 e!39584))

(declare-fun res!33353 () Bool)

(assert (=> d!11873 (=> (not res!33353) (not e!39584))))

(assert (=> d!11873 (= res!33353 (contains!682 lt!24056 lt!24052))))

(assert (=> d!11873 (= (addApplyDifferent!42 lt!24056 lt!24064 (zeroValue!1959 newMap!16) lt!24052) lt!24672)))

(declare-fun b!60259 () Bool)

(assert (=> b!60259 (= e!39584 (not (= lt!24052 lt!24064)))))

(assert (= (and d!11873 res!33353) b!60259))

(assert (=> d!11873 m!51143))

(assert (=> d!11873 m!51139))

(assert (=> d!11873 m!51141))

(declare-fun m!52961 () Bool)

(assert (=> d!11873 m!52961))

(assert (=> d!11873 m!51139))

(declare-fun m!52963 () Bool)

(assert (=> d!11873 m!52963))

(assert (=> b!59305 d!11873))

(declare-fun d!11875 () Bool)

(assert (=> d!11875 (= (apply!66 (+!81 lt!24056 (tuple2!2023 lt!24064 (zeroValue!1959 newMap!16))) lt!24052) (get!1069 (getValueByKey!124 (toList!697 (+!81 lt!24056 (tuple2!2023 lt!24064 (zeroValue!1959 newMap!16)))) lt!24052)))))

(declare-fun bs!2619 () Bool)

(assert (= bs!2619 d!11875))

(declare-fun m!52965 () Bool)

(assert (=> bs!2619 m!52965))

(assert (=> bs!2619 m!52965))

(declare-fun m!52967 () Bool)

(assert (=> bs!2619 m!52967))

(assert (=> b!59305 d!11875))

(declare-fun d!11877 () Bool)

(assert (=> d!11877 (= (apply!66 lt!24062 lt!24071) (get!1069 (getValueByKey!124 (toList!697 lt!24062) lt!24071)))))

(declare-fun bs!2620 () Bool)

(assert (= bs!2620 d!11877))

(declare-fun m!52969 () Bool)

(assert (=> bs!2620 m!52969))

(assert (=> bs!2620 m!52969))

(declare-fun m!52971 () Bool)

(assert (=> bs!2620 m!52971))

(assert (=> b!59305 d!11877))

(declare-fun d!11879 () Bool)

(assert (=> d!11879 (= (apply!66 (+!81 lt!24055 (tuple2!2023 lt!24063 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)))) lt!24068) (get!1069 (getValueByKey!124 (toList!697 (+!81 lt!24055 (tuple2!2023 lt!24063 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16))))) lt!24068)))))

(declare-fun bs!2621 () Bool)

(assert (= bs!2621 d!11879))

(declare-fun m!52973 () Bool)

(assert (=> bs!2621 m!52973))

(assert (=> bs!2621 m!52973))

(declare-fun m!52975 () Bool)

(assert (=> bs!2621 m!52975))

(assert (=> b!59305 d!11879))

(assert (=> b!59305 d!11603))

(declare-fun d!11881 () Bool)

(declare-fun e!39585 () Bool)

(assert (=> d!11881 e!39585))

(declare-fun res!33354 () Bool)

(assert (=> d!11881 (=> (not res!33354) (not e!39585))))

(declare-fun lt!24674 () ListLongMap!1363)

(assert (=> d!11881 (= res!33354 (contains!682 lt!24674 (_1!1022 (tuple2!2023 lt!24063 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16))))))))

(declare-fun lt!24676 () List!1430)

(assert (=> d!11881 (= lt!24674 (ListLongMap!1364 lt!24676))))

(declare-fun lt!24673 () Unit!1551)

(declare-fun lt!24675 () Unit!1551)

(assert (=> d!11881 (= lt!24673 lt!24675)))

(assert (=> d!11881 (= (getValueByKey!124 lt!24676 (_1!1022 (tuple2!2023 lt!24063 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16))))) (Some!129 (_2!1022 (tuple2!2023 lt!24063 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16))))))))

(assert (=> d!11881 (= lt!24675 (lemmaContainsTupThenGetReturnValue!41 lt!24676 (_1!1022 (tuple2!2023 lt!24063 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)))) (_2!1022 (tuple2!2023 lt!24063 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16))))))))

(assert (=> d!11881 (= lt!24676 (insertStrictlySorted!44 (toList!697 lt!24055) (_1!1022 (tuple2!2023 lt!24063 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)))) (_2!1022 (tuple2!2023 lt!24063 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16))))))))

(assert (=> d!11881 (= (+!81 lt!24055 (tuple2!2023 lt!24063 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)))) lt!24674)))

(declare-fun b!60260 () Bool)

(declare-fun res!33355 () Bool)

(assert (=> b!60260 (=> (not res!33355) (not e!39585))))

(assert (=> b!60260 (= res!33355 (= (getValueByKey!124 (toList!697 lt!24674) (_1!1022 (tuple2!2023 lt!24063 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16))))) (Some!129 (_2!1022 (tuple2!2023 lt!24063 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)))))))))

(declare-fun b!60261 () Bool)

(assert (=> b!60261 (= e!39585 (contains!684 (toList!697 lt!24674) (tuple2!2023 lt!24063 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)))))))

(assert (= (and d!11881 res!33354) b!60260))

(assert (= (and b!60260 res!33355) b!60261))

(declare-fun m!52977 () Bool)

(assert (=> d!11881 m!52977))

(declare-fun m!52979 () Bool)

(assert (=> d!11881 m!52979))

(declare-fun m!52981 () Bool)

(assert (=> d!11881 m!52981))

(declare-fun m!52983 () Bool)

(assert (=> d!11881 m!52983))

(declare-fun m!52985 () Bool)

(assert (=> b!60260 m!52985))

(declare-fun m!52987 () Bool)

(assert (=> b!60261 m!52987))

(assert (=> b!59305 d!11881))

(declare-fun d!11883 () Bool)

(assert (=> d!11883 (= (apply!66 (+!81 lt!24062 (tuple2!2023 lt!24060 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)))) lt!24071) (get!1069 (getValueByKey!124 (toList!697 (+!81 lt!24062 (tuple2!2023 lt!24060 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16))))) lt!24071)))))

(declare-fun bs!2622 () Bool)

(assert (= bs!2622 d!11883))

(declare-fun m!52989 () Bool)

(assert (=> bs!2622 m!52989))

(assert (=> bs!2622 m!52989))

(declare-fun m!52991 () Bool)

(assert (=> bs!2622 m!52991))

(assert (=> b!59305 d!11883))

(declare-fun d!11885 () Bool)

(assert (=> d!11885 (= (apply!66 (+!81 lt!24062 (tuple2!2023 lt!24060 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)))) lt!24071) (apply!66 lt!24062 lt!24071))))

(declare-fun lt!24677 () Unit!1551)

(assert (=> d!11885 (= lt!24677 (choose!307 lt!24062 lt!24060 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)) lt!24071))))

(declare-fun e!39586 () Bool)

(assert (=> d!11885 e!39586))

(declare-fun res!33356 () Bool)

(assert (=> d!11885 (=> (not res!33356) (not e!39586))))

(assert (=> d!11885 (= res!33356 (contains!682 lt!24062 lt!24071))))

(assert (=> d!11885 (= (addApplyDifferent!42 lt!24062 lt!24060 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)) lt!24071) lt!24677)))

(declare-fun b!60262 () Bool)

(assert (=> b!60262 (= e!39586 (not (= lt!24071 lt!24060)))))

(assert (= (and d!11885 res!33356) b!60262))

(assert (=> d!11885 m!51125))

(assert (=> d!11885 m!51133))

(assert (=> d!11885 m!51135))

(declare-fun m!52993 () Bool)

(assert (=> d!11885 m!52993))

(assert (=> d!11885 m!51133))

(declare-fun m!52995 () Bool)

(assert (=> d!11885 m!52995))

(assert (=> b!59305 d!11885))

(declare-fun d!11887 () Bool)

(declare-fun e!39587 () Bool)

(assert (=> d!11887 e!39587))

(declare-fun res!33357 () Bool)

(assert (=> d!11887 (=> (not res!33357) (not e!39587))))

(declare-fun lt!24679 () ListLongMap!1363)

(assert (=> d!11887 (= res!33357 (contains!682 lt!24679 (_1!1022 (tuple2!2023 lt!24060 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16))))))))

(declare-fun lt!24681 () List!1430)

(assert (=> d!11887 (= lt!24679 (ListLongMap!1364 lt!24681))))

(declare-fun lt!24678 () Unit!1551)

(declare-fun lt!24680 () Unit!1551)

(assert (=> d!11887 (= lt!24678 lt!24680)))

(assert (=> d!11887 (= (getValueByKey!124 lt!24681 (_1!1022 (tuple2!2023 lt!24060 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16))))) (Some!129 (_2!1022 (tuple2!2023 lt!24060 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16))))))))

(assert (=> d!11887 (= lt!24680 (lemmaContainsTupThenGetReturnValue!41 lt!24681 (_1!1022 (tuple2!2023 lt!24060 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)))) (_2!1022 (tuple2!2023 lt!24060 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16))))))))

(assert (=> d!11887 (= lt!24681 (insertStrictlySorted!44 (toList!697 lt!24062) (_1!1022 (tuple2!2023 lt!24060 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)))) (_2!1022 (tuple2!2023 lt!24060 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16))))))))

(assert (=> d!11887 (= (+!81 lt!24062 (tuple2!2023 lt!24060 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)))) lt!24679)))

(declare-fun b!60263 () Bool)

(declare-fun res!33358 () Bool)

(assert (=> b!60263 (=> (not res!33358) (not e!39587))))

(assert (=> b!60263 (= res!33358 (= (getValueByKey!124 (toList!697 lt!24679) (_1!1022 (tuple2!2023 lt!24060 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16))))) (Some!129 (_2!1022 (tuple2!2023 lt!24060 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)))))))))

(declare-fun b!60264 () Bool)

(assert (=> b!60264 (= e!39587 (contains!684 (toList!697 lt!24679) (tuple2!2023 lt!24060 (ite c!7503 (ite c!7507 (minValue!1959 newMap!16) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1959 newMap!16)))))))

(assert (= (and d!11887 res!33357) b!60263))

(assert (= (and b!60263 res!33358) b!60264))

(declare-fun m!52997 () Bool)

(assert (=> d!11887 m!52997))

(declare-fun m!52999 () Bool)

(assert (=> d!11887 m!52999))

(declare-fun m!53001 () Bool)

(assert (=> d!11887 m!53001))

(declare-fun m!53003 () Bool)

(assert (=> d!11887 m!53003))

(declare-fun m!53005 () Bool)

(assert (=> b!60263 m!53005))

(declare-fun m!53007 () Bool)

(assert (=> b!60264 m!53007))

(assert (=> b!59305 d!11887))

(declare-fun d!11889 () Bool)

(assert (=> d!11889 (contains!682 (+!81 lt!24058 (tuple2!2023 lt!24053 (zeroValue!1959 newMap!16))) lt!24051)))

(declare-fun lt!24682 () Unit!1551)

(assert (=> d!11889 (= lt!24682 (choose!308 lt!24058 lt!24053 (zeroValue!1959 newMap!16) lt!24051))))

(assert (=> d!11889 (contains!682 lt!24058 lt!24051)))

(assert (=> d!11889 (= (addStillContains!42 lt!24058 lt!24053 (zeroValue!1959 newMap!16) lt!24051) lt!24682)))

(declare-fun bs!2623 () Bool)

(assert (= bs!2623 d!11889))

(assert (=> bs!2623 m!51119))

(assert (=> bs!2623 m!51119))

(assert (=> bs!2623 m!51127))

(declare-fun m!53009 () Bool)

(assert (=> bs!2623 m!53009))

(declare-fun m!53011 () Bool)

(assert (=> bs!2623 m!53011))

(assert (=> b!59305 d!11889))

(assert (=> b!59097 d!11375))

(declare-fun d!11891 () Bool)

(declare-fun e!39588 () Bool)

(assert (=> d!11891 e!39588))

(declare-fun res!33359 () Bool)

(assert (=> d!11891 (=> (not res!33359) (not e!39588))))

(declare-fun lt!24684 () ListLongMap!1363)

(assert (=> d!11891 (= res!33359 (contains!682 lt!24684 (_1!1022 (ite (or c!7590 c!7593) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))))))))

(declare-fun lt!24686 () List!1430)

(assert (=> d!11891 (= lt!24684 (ListLongMap!1364 lt!24686))))

(declare-fun lt!24683 () Unit!1551)

(declare-fun lt!24685 () Unit!1551)

(assert (=> d!11891 (= lt!24683 lt!24685)))

(assert (=> d!11891 (= (getValueByKey!124 lt!24686 (_1!1022 (ite (or c!7590 c!7593) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))))) (Some!129 (_2!1022 (ite (or c!7590 c!7593) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))))))))

(assert (=> d!11891 (= lt!24685 (lemmaContainsTupThenGetReturnValue!41 lt!24686 (_1!1022 (ite (or c!7590 c!7593) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))) (_2!1022 (ite (or c!7590 c!7593) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))))))))

(assert (=> d!11891 (= lt!24686 (insertStrictlySorted!44 (toList!697 (ite c!7590 call!4454 (ite c!7593 call!4457 call!4458))) (_1!1022 (ite (or c!7590 c!7593) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))) (_2!1022 (ite (or c!7590 c!7593) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))))))))

(assert (=> d!11891 (= (+!81 (ite c!7590 call!4454 (ite c!7593 call!4457 call!4458)) (ite (or c!7590 c!7593) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))) lt!24684)))

(declare-fun b!60265 () Bool)

(declare-fun res!33360 () Bool)

(assert (=> b!60265 (=> (not res!33360) (not e!39588))))

(assert (=> b!60265 (= res!33360 (= (getValueByKey!124 (toList!697 lt!24684) (_1!1022 (ite (or c!7590 c!7593) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16))))) (Some!129 (_2!1022 (ite (or c!7590 c!7593) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))))))))

(declare-fun b!60266 () Bool)

(assert (=> b!60266 (= e!39588 (contains!684 (toList!697 lt!24684) (ite (or c!7590 c!7593) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7503 c!7507) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1959 newMap!16))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1959 newMap!16)))))))

(assert (= (and d!11891 res!33359) b!60265))

(assert (= (and b!60265 res!33360) b!60266))

(declare-fun m!53013 () Bool)

(assert (=> d!11891 m!53013))

(declare-fun m!53015 () Bool)

(assert (=> d!11891 m!53015))

(declare-fun m!53017 () Bool)

(assert (=> d!11891 m!53017))

(declare-fun m!53019 () Bool)

(assert (=> d!11891 m!53019))

(declare-fun m!53021 () Bool)

(assert (=> b!60265 m!53021))

(declare-fun m!53023 () Bool)

(assert (=> b!60266 m!53023))

(assert (=> bm!4449 d!11891))

(declare-fun d!11893 () Bool)

(assert (=> d!11893 (= (apply!66 lt!24144 (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000)) (get!1069 (getValueByKey!124 (toList!697 lt!24144) (select (arr!1781 (_keys!3667 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2624 () Bool)

(assert (= bs!2624 d!11893))

(assert (=> bs!2624 m!50803))

(assert (=> bs!2624 m!51969))

(assert (=> bs!2624 m!51969))

(declare-fun m!53025 () Bool)

(assert (=> bs!2624 m!53025))

(assert (=> b!59387 d!11893))

(assert (=> b!59387 d!11519))

(declare-fun b!60268 () Bool)

(declare-fun e!39589 () Option!130)

(declare-fun e!39590 () Option!130)

(assert (=> b!60268 (= e!39589 e!39590)))

(declare-fun c!7837 () Bool)

(assert (=> b!60268 (= c!7837 (and ((_ is Cons!1426) (toList!697 lt!24117)) (not (= (_1!1022 (h!2007 (toList!697 lt!24117))) (_1!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))))))

(declare-fun b!60267 () Bool)

(assert (=> b!60267 (= e!39589 (Some!129 (_2!1022 (h!2007 (toList!697 lt!24117)))))))

(declare-fun b!60269 () Bool)

(assert (=> b!60269 (= e!39590 (getValueByKey!124 (t!4768 (toList!697 lt!24117)) (_1!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))))))

(declare-fun b!60270 () Bool)

(assert (=> b!60270 (= e!39590 None!128)))

(declare-fun d!11895 () Bool)

(declare-fun c!7836 () Bool)

(assert (=> d!11895 (= c!7836 (and ((_ is Cons!1426) (toList!697 lt!24117)) (= (_1!1022 (h!2007 (toList!697 lt!24117))) (_1!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992))))))))))

(assert (=> d!11895 (= (getValueByKey!124 (toList!697 lt!24117) (_1!1022 (tuple2!2023 lt!23723 (zeroValue!1959 (v!2383 (underlying!226 thiss!992)))))) e!39589)))

(assert (= (and d!11895 c!7836) b!60267))

(assert (= (and d!11895 (not c!7836)) b!60268))

(assert (= (and b!60268 c!7837) b!60269))

(assert (= (and b!60268 (not c!7837)) b!60270))

(declare-fun m!53027 () Bool)

(assert (=> b!60269 m!53027))

(assert (=> b!59361 d!11895))

(declare-fun d!11897 () Bool)

(assert (=> d!11897 (= (+!81 (getCurrentListMap!402 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)) (tuple2!2023 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!402 (_keys!3667 newMap!16) (array!3724 (store (arr!1782 (_values!2026 newMap!16)) (index!3032 lt!23832) (ValueCellFull!855 (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2012 (_values!2026 newMap!16))) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2043 newMap!16)))))

(assert (=> d!11897 true))

(declare-fun _$5!62 () Unit!1551)

(assert (=> d!11897 (= (choose!304 (_keys!3667 newMap!16) (_values!2026 newMap!16) (mask!5927 newMap!16) (extraKeys!1930 newMap!16) (zeroValue!1959 newMap!16) (minValue!1959 newMap!16) (index!3032 lt!23832) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (get!1066 (select (arr!1782 (_values!2026 (v!2383 (underlying!226 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2043 newMap!16)) _$5!62)))

(declare-fun bs!2625 () Bool)

(assert (= bs!2625 d!11897))

(assert (=> bs!2625 m!50617))

(assert (=> bs!2625 m!50617))

(assert (=> bs!2625 m!50857))

(assert (=> bs!2625 m!50707))

(assert (=> bs!2625 m!50859))

(assert (=> d!11255 d!11897))

(assert (=> d!11255 d!11523))

(declare-fun d!11899 () Bool)

(declare-fun e!39591 () Bool)

(assert (=> d!11899 e!39591))

(declare-fun res!33361 () Bool)

(assert (=> d!11899 (=> (not res!33361) (not e!39591))))

(declare-fun lt!24688 () ListLongMap!1363)

(assert (=> d!11899 (= res!33361 (contains!682 lt!24688 (_1!1022 (tuple2!2023 lt!23861 (minValue!1959 newMap!16)))))))

(declare-fun lt!24690 () List!1430)

(assert (=> d!11899 (= lt!24688 (ListLongMap!1364 lt!24690))))

(declare-fun lt!24687 () Unit!1551)

(declare-fun lt!24689 () Unit!1551)

(assert (=> d!11899 (= lt!24687 lt!24689)))

(assert (=> d!11899 (= (getValueByKey!124 lt!24690 (_1!1022 (tuple2!2023 lt!23861 (minValue!1959 newMap!16)))) (Some!129 (_2!1022 (tuple2!2023 lt!23861 (minValue!1959 newMap!16)))))))

(assert (=> d!11899 (= lt!24689 (lemmaContainsTupThenGetReturnValue!41 lt!24690 (_1!1022 (tuple2!2023 lt!23861 (minValue!1959 newMap!16))) (_2!1022 (tuple2!2023 lt!23861 (minValue!1959 newMap!16)))))))

(assert (=> d!11899 (= lt!24690 (insertStrictlySorted!44 (toList!697 lt!23863) (_1!1022 (tuple2!2023 lt!23861 (minValue!1959 newMap!16))) (_2!1022 (tuple2!2023 lt!23861 (minValue!1959 newMap!16)))))))

(assert (=> d!11899 (= (+!81 lt!23863 (tuple2!2023 lt!23861 (minValue!1959 newMap!16))) lt!24688)))

(declare-fun b!60271 () Bool)

(declare-fun res!33362 () Bool)

(assert (=> b!60271 (=> (not res!33362) (not e!39591))))

(assert (=> b!60271 (= res!33362 (= (getValueByKey!124 (toList!697 lt!24688) (_1!1022 (tuple2!2023 lt!23861 (minValue!1959 newMap!16)))) (Some!129 (_2!1022 (tuple2!2023 lt!23861 (minValue!1959 newMap!16))))))))

(declare-fun b!60272 () Bool)

(assert (=> b!60272 (= e!39591 (contains!684 (toList!697 lt!24688) (tuple2!2023 lt!23861 (minValue!1959 newMap!16))))))

(assert (= (and d!11899 res!33361) b!60271))

(assert (= (and b!60271 res!33362) b!60272))

(declare-fun m!53029 () Bool)

(assert (=> d!11899 m!53029))

(declare-fun m!53031 () Bool)

(assert (=> d!11899 m!53031))

(declare-fun m!53033 () Bool)

(assert (=> d!11899 m!53033))

(declare-fun m!53035 () Bool)

(assert (=> d!11899 m!53035))

(declare-fun m!53037 () Bool)

(assert (=> b!60271 m!53037))

(declare-fun m!53039 () Bool)

(assert (=> b!60272 m!53039))

(assert (=> b!59109 d!11899))

(assert (=> b!59109 d!11417))

(declare-fun d!11901 () Bool)

(assert (=> d!11901 (= (apply!66 lt!23857 lt!23853) (get!1069 (getValueByKey!124 (toList!697 lt!23857) lt!23853)))))

(declare-fun bs!2626 () Bool)

(assert (= bs!2626 d!11901))

(declare-fun m!53041 () Bool)

(assert (=> bs!2626 m!53041))

(assert (=> bs!2626 m!53041))

(declare-fun m!53043 () Bool)

(assert (=> bs!2626 m!53043))

(assert (=> b!59109 d!11901))

(declare-fun d!11903 () Bool)

(assert (=> d!11903 (= (apply!66 (+!81 lt!23856 (tuple2!2023 lt!23864 (minValue!1959 newMap!16))) lt!23869) (apply!66 lt!23856 lt!23869))))

(declare-fun lt!24691 () Unit!1551)

(assert (=> d!11903 (= lt!24691 (choose!307 lt!23856 lt!23864 (minValue!1959 newMap!16) lt!23869))))

(declare-fun e!39592 () Bool)

(assert (=> d!11903 e!39592))

(declare-fun res!33363 () Bool)

(assert (=> d!11903 (=> (not res!33363) (not e!39592))))

(assert (=> d!11903 (= res!33363 (contains!682 lt!23856 lt!23869))))

(assert (=> d!11903 (= (addApplyDifferent!42 lt!23856 lt!23864 (minValue!1959 newMap!16) lt!23869) lt!24691)))

(declare-fun b!60273 () Bool)

(assert (=> b!60273 (= e!39592 (not (= lt!23869 lt!23864)))))

(assert (= (and d!11903 res!33363) b!60273))

(assert (=> d!11903 m!50827))

(assert (=> d!11903 m!50833))

(assert (=> d!11903 m!50851))

(declare-fun m!53045 () Bool)

(assert (=> d!11903 m!53045))

(assert (=> d!11903 m!50833))

(declare-fun m!53047 () Bool)

(assert (=> d!11903 m!53047))

(assert (=> b!59109 d!11903))

(declare-fun d!11905 () Bool)

(assert (=> d!11905 (= (apply!66 lt!23856 lt!23869) (get!1069 (getValueByKey!124 (toList!697 lt!23856) lt!23869)))))

(declare-fun bs!2627 () Bool)

(assert (= bs!2627 d!11905))

(declare-fun m!53049 () Bool)

(assert (=> bs!2627 m!53049))

(assert (=> bs!2627 m!53049))

(declare-fun m!53051 () Bool)

(assert (=> bs!2627 m!53051))

(assert (=> b!59109 d!11905))

(declare-fun d!11907 () Bool)

(assert (=> d!11907 (= (apply!66 (+!81 lt!23857 (tuple2!2023 lt!23865 (zeroValue!1959 newMap!16))) lt!23853) (apply!66 lt!23857 lt!23853))))

(declare-fun lt!24692 () Unit!1551)

(assert (=> d!11907 (= lt!24692 (choose!307 lt!23857 lt!23865 (zeroValue!1959 newMap!16) lt!23853))))

(declare-fun e!39593 () Bool)

(assert (=> d!11907 e!39593))

(declare-fun res!33364 () Bool)

(assert (=> d!11907 (=> (not res!33364) (not e!39593))))

(assert (=> d!11907 (= res!33364 (contains!682 lt!23857 lt!23853))))

(assert (=> d!11907 (= (addApplyDifferent!42 lt!23857 lt!23865 (zeroValue!1959 newMap!16) lt!23853) lt!24692)))

(declare-fun b!60274 () Bool)

(assert (=> b!60274 (= e!39593 (not (= lt!23853 lt!23865)))))

(assert (= (and d!11907 res!33364) b!60274))

(assert (=> d!11907 m!50847))

(assert (=> d!11907 m!50843))

(assert (=> d!11907 m!50845))

(declare-fun m!53053 () Bool)

(assert (=> d!11907 m!53053))

(assert (=> d!11907 m!50843))

(declare-fun m!53055 () Bool)

(assert (=> d!11907 m!53055))

(assert (=> b!59109 d!11907))

(declare-fun d!11909 () Bool)

(declare-fun e!39594 () Bool)

(assert (=> d!11909 e!39594))

(declare-fun res!33365 () Bool)

(assert (=> d!11909 (=> (not res!33365) (not e!39594))))

(declare-fun lt!24694 () ListLongMap!1363)

(assert (=> d!11909 (= res!33365 (contains!682 lt!24694 (_1!1022 (tuple2!2023 lt!23864 (minValue!1959 newMap!16)))))))

(declare-fun lt!24696 () List!1430)

(assert (=> d!11909 (= lt!24694 (ListLongMap!1364 lt!24696))))

(declare-fun lt!24693 () Unit!1551)

(declare-fun lt!24695 () Unit!1551)

(assert (=> d!11909 (= lt!24693 lt!24695)))

(assert (=> d!11909 (= (getValueByKey!124 lt!24696 (_1!1022 (tuple2!2023 lt!23864 (minValue!1959 newMap!16)))) (Some!129 (_2!1022 (tuple2!2023 lt!23864 (minValue!1959 newMap!16)))))))

(assert (=> d!11909 (= lt!24695 (lemmaContainsTupThenGetReturnValue!41 lt!24696 (_1!1022 (tuple2!2023 lt!23864 (minValue!1959 newMap!16))) (_2!1022 (tuple2!2023 lt!23864 (minValue!1959 newMap!16)))))))

(assert (=> d!11909 (= lt!24696 (insertStrictlySorted!44 (toList!697 lt!23856) (_1!1022 (tuple2!2023 lt!23864 (minValue!1959 newMap!16))) (_2!1022 (tuple2!2023 lt!23864 (minValue!1959 newMap!16)))))))

(assert (=> d!11909 (= (+!81 lt!23856 (tuple2!2023 lt!23864 (minValue!1959 newMap!16))) lt!24694)))

(declare-fun b!60275 () Bool)

(declare-fun res!33366 () Bool)

(assert (=> b!60275 (=> (not res!33366) (not e!39594))))

(assert (=> b!60275 (= res!33366 (= (getValueByKey!124 (toList!697 lt!24694) (_1!1022 (tuple2!2023 lt!23864 (minValue!1959 newMap!16)))) (Some!129 (_2!1022 (tuple2!2023 lt!23864 (minValue!1959 newMap!16))))))))

(declare-fun b!60276 () Bool)

(assert (=> b!60276 (= e!39594 (contains!684 (toList!697 lt!24694) (tuple2!2023 lt!23864 (minValue!1959 newMap!16))))))

(assert (= (and d!11909 res!33365) b!60275))

(assert (= (and b!60275 res!33366) b!60276))

(declare-fun m!53057 () Bool)

(assert (=> d!11909 m!53057))

(declare-fun m!53059 () Bool)

(assert (=> d!11909 m!53059))

(declare-fun m!53061 () Bool)

(assert (=> d!11909 m!53061))

(declare-fun m!53063 () Bool)

(assert (=> d!11909 m!53063))

(declare-fun m!53065 () Bool)

(assert (=> b!60275 m!53065))

(declare-fun m!53067 () Bool)

(assert (=> b!60276 m!53067))

(assert (=> b!59109 d!11909))

(declare-fun d!11911 () Bool)

(assert (=> d!11911 (= (apply!66 (+!81 lt!23857 (tuple2!2023 lt!23865 (zeroValue!1959 newMap!16))) lt!23853) (get!1069 (getValueByKey!124 (toList!697 (+!81 lt!23857 (tuple2!2023 lt!23865 (zeroValue!1959 newMap!16)))) lt!23853)))))

(declare-fun bs!2628 () Bool)

(assert (= bs!2628 d!11911))

(declare-fun m!53069 () Bool)

(assert (=> bs!2628 m!53069))

(assert (=> bs!2628 m!53069))

(declare-fun m!53071 () Bool)

(assert (=> bs!2628 m!53071))

(assert (=> b!59109 d!11911))

(declare-fun d!11913 () Bool)

(assert (=> d!11913 (= (apply!66 lt!23863 lt!23872) (get!1069 (getValueByKey!124 (toList!697 lt!23863) lt!23872)))))

(declare-fun bs!2629 () Bool)

(assert (= bs!2629 d!11913))

(declare-fun m!53073 () Bool)

(assert (=> bs!2629 m!53073))

(assert (=> bs!2629 m!53073))

(declare-fun m!53075 () Bool)

(assert (=> bs!2629 m!53075))

(assert (=> b!59109 d!11913))

(declare-fun d!11915 () Bool)

(assert (=> d!11915 (= (apply!66 (+!81 lt!23856 (tuple2!2023 lt!23864 (minValue!1959 newMap!16))) lt!23869) (get!1069 (getValueByKey!124 (toList!697 (+!81 lt!23856 (tuple2!2023 lt!23864 (minValue!1959 newMap!16)))) lt!23869)))))

(declare-fun bs!2630 () Bool)

(assert (= bs!2630 d!11915))

(declare-fun m!53077 () Bool)

(assert (=> bs!2630 m!53077))

(assert (=> bs!2630 m!53077))

(declare-fun m!53079 () Bool)

(assert (=> bs!2630 m!53079))

(assert (=> b!59109 d!11915))

(declare-fun d!11917 () Bool)

(declare-fun e!39595 () Bool)

(assert (=> d!11917 e!39595))

(declare-fun res!33367 () Bool)

(assert (=> d!11917 (=> (not res!33367) (not e!39595))))

(declare-fun lt!24698 () ListLongMap!1363)

(assert (=> d!11917 (= res!33367 (contains!682 lt!24698 (_1!1022 (tuple2!2023 lt!23865 (zeroValue!1959 newMap!16)))))))

(declare-fun lt!24700 () List!1430)

(assert (=> d!11917 (= lt!24698 (ListLongMap!1364 lt!24700))))

(declare-fun lt!24697 () Unit!1551)

(declare-fun lt!24699 () Unit!1551)

(assert (=> d!11917 (= lt!24697 lt!24699)))

(assert (=> d!11917 (= (getValueByKey!124 lt!24700 (_1!1022 (tuple2!2023 lt!23865 (zeroValue!1959 newMap!16)))) (Some!129 (_2!1022 (tuple2!2023 lt!23865 (zeroValue!1959 newMap!16)))))))

(assert (=> d!11917 (= lt!24699 (lemmaContainsTupThenGetReturnValue!41 lt!24700 (_1!1022 (tuple2!2023 lt!23865 (zeroValue!1959 newMap!16))) (_2!1022 (tuple2!2023 lt!23865 (zeroValue!1959 newMap!16)))))))

(assert (=> d!11917 (= lt!24700 (insertStrictlySorted!44 (toList!697 lt!23857) (_1!1022 (tuple2!2023 lt!23865 (zeroValue!1959 newMap!16))) (_2!1022 (tuple2!2023 lt!23865 (zeroValue!1959 newMap!16)))))))

(assert (=> d!11917 (= (+!81 lt!23857 (tuple2!2023 lt!23865 (zeroValue!1959 newMap!16))) lt!24698)))

(declare-fun b!60277 () Bool)

(declare-fun res!33368 () Bool)

(assert (=> b!60277 (=> (not res!33368) (not e!39595))))

(assert (=> b!60277 (= res!33368 (= (getValueByKey!124 (toList!697 lt!24698) (_1!1022 (tuple2!2023 lt!23865 (zeroValue!1959 newMap!16)))) (Some!129 (_2!1022 (tuple2!2023 lt!23865 (zeroValue!1959 newMap!16))))))))

(declare-fun b!60278 () Bool)

(assert (=> b!60278 (= e!39595 (contains!684 (toList!697 lt!24698) (tuple2!2023 lt!23865 (zeroValue!1959 newMap!16))))))

(assert (= (and d!11917 res!33367) b!60277))

(assert (= (and b!60277 res!33368) b!60278))

(declare-fun m!53081 () Bool)

(assert (=> d!11917 m!53081))

(declare-fun m!53083 () Bool)

(assert (=> d!11917 m!53083))

(declare-fun m!53085 () Bool)

(assert (=> d!11917 m!53085))

(declare-fun m!53087 () Bool)

(assert (=> d!11917 m!53087))

(declare-fun m!53089 () Bool)

(assert (=> b!60277 m!53089))

(declare-fun m!53091 () Bool)

(assert (=> b!60278 m!53091))

(assert (=> b!59109 d!11917))

(declare-fun d!11919 () Bool)

(assert (=> d!11919 (= (apply!66 (+!81 lt!23863 (tuple2!2023 lt!23861 (minValue!1959 newMap!16))) lt!23872) (get!1069 (getValueByKey!124 (toList!697 (+!81 lt!23863 (tuple2!2023 lt!23861 (minValue!1959 newMap!16)))) lt!23872)))))

(declare-fun bs!2631 () Bool)

(assert (= bs!2631 d!11919))

(declare-fun m!53093 () Bool)

(assert (=> bs!2631 m!53093))

(assert (=> bs!2631 m!53093))

(declare-fun m!53095 () Bool)

(assert (=> bs!2631 m!53095))

(assert (=> b!59109 d!11919))

(declare-fun d!11921 () Bool)

(assert (=> d!11921 (contains!682 (+!81 lt!23859 (tuple2!2023 lt!23854 (zeroValue!1959 newMap!16))) lt!23852)))

(declare-fun lt!24701 () Unit!1551)

(assert (=> d!11921 (= lt!24701 (choose!308 lt!23859 lt!23854 (zeroValue!1959 newMap!16) lt!23852))))

(assert (=> d!11921 (contains!682 lt!23859 lt!23852)))

(assert (=> d!11921 (= (addStillContains!42 lt!23859 lt!23854 (zeroValue!1959 newMap!16) lt!23852) lt!24701)))

(declare-fun bs!2632 () Bool)

(assert (= bs!2632 d!11921))

(assert (=> bs!2632 m!50823))

(assert (=> bs!2632 m!50823))

(assert (=> bs!2632 m!50831))

(declare-fun m!53097 () Bool)

(assert (=> bs!2632 m!53097))

(declare-fun m!53099 () Bool)

(assert (=> bs!2632 m!53099))

(assert (=> b!59109 d!11921))

(declare-fun d!11923 () Bool)

(declare-fun e!39596 () Bool)

(assert (=> d!11923 e!39596))

(declare-fun res!33369 () Bool)

(assert (=> d!11923 (=> res!33369 e!39596)))

(declare-fun lt!24704 () Bool)

(assert (=> d!11923 (= res!33369 (not lt!24704))))

(declare-fun lt!24703 () Bool)

(assert (=> d!11923 (= lt!24704 lt!24703)))

(declare-fun lt!24705 () Unit!1551)

(declare-fun e!39597 () Unit!1551)

(assert (=> d!11923 (= lt!24705 e!39597)))

(declare-fun c!7838 () Bool)

(assert (=> d!11923 (= c!7838 lt!24703)))

(assert (=> d!11923 (= lt!24703 (containsKey!128 (toList!697 (+!81 lt!23859 (tuple2!2023 lt!23854 (zeroValue!1959 newMap!16)))) lt!23852))))

(assert (=> d!11923 (= (contains!682 (+!81 lt!23859 (tuple2!2023 lt!23854 (zeroValue!1959 newMap!16))) lt!23852) lt!24704)))

(declare-fun b!60279 () Bool)

(declare-fun lt!24702 () Unit!1551)

(assert (=> b!60279 (= e!39597 lt!24702)))

(assert (=> b!60279 (= lt!24702 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!697 (+!81 lt!23859 (tuple2!2023 lt!23854 (zeroValue!1959 newMap!16)))) lt!23852))))

(assert (=> b!60279 (isDefined!77 (getValueByKey!124 (toList!697 (+!81 lt!23859 (tuple2!2023 lt!23854 (zeroValue!1959 newMap!16)))) lt!23852))))

(declare-fun b!60280 () Bool)

(declare-fun Unit!1613 () Unit!1551)

(assert (=> b!60280 (= e!39597 Unit!1613)))

(declare-fun b!60281 () Bool)

(assert (=> b!60281 (= e!39596 (isDefined!77 (getValueByKey!124 (toList!697 (+!81 lt!23859 (tuple2!2023 lt!23854 (zeroValue!1959 newMap!16)))) lt!23852)))))

(assert (= (and d!11923 c!7838) b!60279))

(assert (= (and d!11923 (not c!7838)) b!60280))

(assert (= (and d!11923 (not res!33369)) b!60281))

(declare-fun m!53101 () Bool)

(assert (=> d!11923 m!53101))

(declare-fun m!53103 () Bool)

(assert (=> b!60279 m!53103))

(declare-fun m!53105 () Bool)

(assert (=> b!60279 m!53105))

(assert (=> b!60279 m!53105))

(declare-fun m!53107 () Bool)

(assert (=> b!60279 m!53107))

(assert (=> b!60281 m!53105))

(assert (=> b!60281 m!53105))

(assert (=> b!60281 m!53107))

(assert (=> b!59109 d!11923))

(declare-fun d!11925 () Bool)

(declare-fun e!39598 () Bool)

(assert (=> d!11925 e!39598))

(declare-fun res!33370 () Bool)

(assert (=> d!11925 (=> (not res!33370) (not e!39598))))

(declare-fun lt!24707 () ListLongMap!1363)

(assert (=> d!11925 (= res!33370 (contains!682 lt!24707 (_1!1022 (tuple2!2023 lt!23854 (zeroValue!1959 newMap!16)))))))

(declare-fun lt!24709 () List!1430)

(assert (=> d!11925 (= lt!24707 (ListLongMap!1364 lt!24709))))

(declare-fun lt!24706 () Unit!1551)

(declare-fun lt!24708 () Unit!1551)

(assert (=> d!11925 (= lt!24706 lt!24708)))

(assert (=> d!11925 (= (getValueByKey!124 lt!24709 (_1!1022 (tuple2!2023 lt!23854 (zeroValue!1959 newMap!16)))) (Some!129 (_2!1022 (tuple2!2023 lt!23854 (zeroValue!1959 newMap!16)))))))

(assert (=> d!11925 (= lt!24708 (lemmaContainsTupThenGetReturnValue!41 lt!24709 (_1!1022 (tuple2!2023 lt!23854 (zeroValue!1959 newMap!16))) (_2!1022 (tuple2!2023 lt!23854 (zeroValue!1959 newMap!16)))))))

(assert (=> d!11925 (= lt!24709 (insertStrictlySorted!44 (toList!697 lt!23859) (_1!1022 (tuple2!2023 lt!23854 (zeroValue!1959 newMap!16))) (_2!1022 (tuple2!2023 lt!23854 (zeroValue!1959 newMap!16)))))))

(assert (=> d!11925 (= (+!81 lt!23859 (tuple2!2023 lt!23854 (zeroValue!1959 newMap!16))) lt!24707)))

(declare-fun b!60282 () Bool)

(declare-fun res!33371 () Bool)

(assert (=> b!60282 (=> (not res!33371) (not e!39598))))

(assert (=> b!60282 (= res!33371 (= (getValueByKey!124 (toList!697 lt!24707) (_1!1022 (tuple2!2023 lt!23854 (zeroValue!1959 newMap!16)))) (Some!129 (_2!1022 (tuple2!2023 lt!23854 (zeroValue!1959 newMap!16))))))))

(declare-fun b!60283 () Bool)

(assert (=> b!60283 (= e!39598 (contains!684 (toList!697 lt!24707) (tuple2!2023 lt!23854 (zeroValue!1959 newMap!16))))))

(assert (= (and d!11925 res!33370) b!60282))

(assert (= (and b!60282 res!33371) b!60283))

(declare-fun m!53109 () Bool)

(assert (=> d!11925 m!53109))

(declare-fun m!53111 () Bool)

(assert (=> d!11925 m!53111))

(declare-fun m!53113 () Bool)

(assert (=> d!11925 m!53113))

(declare-fun m!53115 () Bool)

(assert (=> d!11925 m!53115))

(declare-fun m!53117 () Bool)

(assert (=> b!60282 m!53117))

(declare-fun m!53119 () Bool)

(assert (=> b!60283 m!53119))

(assert (=> b!59109 d!11925))

(declare-fun d!11927 () Bool)

(assert (=> d!11927 (= (apply!66 (+!81 lt!23863 (tuple2!2023 lt!23861 (minValue!1959 newMap!16))) lt!23872) (apply!66 lt!23863 lt!23872))))

(declare-fun lt!24710 () Unit!1551)

(assert (=> d!11927 (= lt!24710 (choose!307 lt!23863 lt!23861 (minValue!1959 newMap!16) lt!23872))))

(declare-fun e!39599 () Bool)

(assert (=> d!11927 e!39599))

(declare-fun res!33372 () Bool)

(assert (=> d!11927 (=> (not res!33372) (not e!39599))))

(assert (=> d!11927 (= res!33372 (contains!682 lt!23863 lt!23872))))

(assert (=> d!11927 (= (addApplyDifferent!42 lt!23863 lt!23861 (minValue!1959 newMap!16) lt!23872) lt!24710)))

(declare-fun b!60284 () Bool)

(assert (=> b!60284 (= e!39599 (not (= lt!23872 lt!23861)))))

(assert (= (and d!11927 res!33372) b!60284))

(assert (=> d!11927 m!50829))

(assert (=> d!11927 m!50837))

(assert (=> d!11927 m!50839))

(declare-fun m!53121 () Bool)

(assert (=> d!11927 m!53121))

(assert (=> d!11927 m!50837))

(declare-fun m!53123 () Bool)

(assert (=> d!11927 m!53123))

(assert (=> b!59109 d!11927))

(declare-fun b!60303 () Bool)

(declare-fun lt!24716 () SeekEntryResult!227)

(assert (=> b!60303 (and (bvsge (index!3033 lt!24716) #b00000000000000000000000000000000) (bvslt (index!3033 lt!24716) (size!2011 (_keys!3667 newMap!16))))))

(declare-fun res!33380 () Bool)

(assert (=> b!60303 (= res!33380 (= (select (arr!1781 (_keys!3667 newMap!16)) (index!3033 lt!24716)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)))))

(declare-fun e!39614 () Bool)

(assert (=> b!60303 (=> res!33380 e!39614)))

(declare-fun e!39611 () Bool)

(assert (=> b!60303 (= e!39611 e!39614)))

(declare-fun b!60304 () Bool)

(declare-fun e!39613 () Bool)

(assert (=> b!60304 (= e!39613 e!39611)))

(declare-fun res!33381 () Bool)

(assert (=> b!60304 (= res!33381 (and ((_ is Intermediate!227) lt!24716) (not (undefined!1039 lt!24716)) (bvslt (x!10003 lt!24716) #b01111111111111111111111111111110) (bvsge (x!10003 lt!24716) #b00000000000000000000000000000000) (bvsge (x!10003 lt!24716) #b00000000000000000000000000000000)))))

(assert (=> b!60304 (=> (not res!33381) (not e!39611))))

(declare-fun d!11929 () Bool)

(assert (=> d!11929 e!39613))

(declare-fun c!7846 () Bool)

(assert (=> d!11929 (= c!7846 (and ((_ is Intermediate!227) lt!24716) (undefined!1039 lt!24716)))))

(declare-fun e!39612 () SeekEntryResult!227)

(assert (=> d!11929 (= lt!24716 e!39612)))

(declare-fun c!7845 () Bool)

(assert (=> d!11929 (= c!7845 (bvsge #b00000000000000000000000000000000 #b01111111111111111111111111111110))))

(declare-fun lt!24715 () (_ BitVec 64))

(assert (=> d!11929 (= lt!24715 (select (arr!1781 (_keys!3667 newMap!16)) (toIndex!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (mask!5927 newMap!16))))))

(assert (=> d!11929 (validMask!0 (mask!5927 newMap!16))))

(assert (=> d!11929 (= (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (mask!5927 newMap!16)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (_keys!3667 newMap!16) (mask!5927 newMap!16)) lt!24716)))

(declare-fun e!39610 () SeekEntryResult!227)

(declare-fun b!60305 () Bool)

(assert (=> b!60305 (= e!39610 (Intermediate!227 false (toIndex!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (mask!5927 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!60306 () Bool)

(assert (=> b!60306 (and (bvsge (index!3033 lt!24716) #b00000000000000000000000000000000) (bvslt (index!3033 lt!24716) (size!2011 (_keys!3667 newMap!16))))))

(assert (=> b!60306 (= e!39614 (= (select (arr!1781 (_keys!3667 newMap!16)) (index!3033 lt!24716)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60307 () Bool)

(assert (=> b!60307 (= e!39612 (Intermediate!227 true (toIndex!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (mask!5927 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!60308 () Bool)

(assert (=> b!60308 (= e!39612 e!39610)))

(declare-fun c!7847 () Bool)

(assert (=> b!60308 (= c!7847 (or (= lt!24715 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355)) (= (bvadd lt!24715 lt!24715) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!60309 () Bool)

(assert (=> b!60309 (= e!39610 (seekKeyOrZeroOrLongMinValue!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (nextIndex!0 (toIndex!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (mask!5927 newMap!16)) #b00000000000000000000000000000000 (mask!5927 newMap!16)) (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (_keys!3667 newMap!16) (mask!5927 newMap!16)))))

(declare-fun b!60310 () Bool)

(assert (=> b!60310 (and (bvsge (index!3033 lt!24716) #b00000000000000000000000000000000) (bvslt (index!3033 lt!24716) (size!2011 (_keys!3667 newMap!16))))))

(declare-fun res!33379 () Bool)

(assert (=> b!60310 (= res!33379 (= (select (arr!1781 (_keys!3667 newMap!16)) (index!3033 lt!24716)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!60310 (=> res!33379 e!39614)))

(declare-fun b!60311 () Bool)

(assert (=> b!60311 (= e!39613 (bvsge (x!10003 lt!24716) #b01111111111111111111111111111110))))

(assert (= (and d!11929 c!7845) b!60307))

(assert (= (and d!11929 (not c!7845)) b!60308))

(assert (= (and b!60308 c!7847) b!60305))

(assert (= (and b!60308 (not c!7847)) b!60309))

(assert (= (and d!11929 c!7846) b!60311))

(assert (= (and d!11929 (not c!7846)) b!60304))

(assert (= (and b!60304 res!33381) b!60303))

(assert (= (and b!60303 (not res!33380)) b!60310))

(assert (= (and b!60310 (not res!33379)) b!60306))

(assert (=> b!60309 m!51077))

(declare-fun m!53125 () Bool)

(assert (=> b!60309 m!53125))

(assert (=> b!60309 m!53125))

(assert (=> b!60309 m!50529))

(declare-fun m!53127 () Bool)

(assert (=> b!60309 m!53127))

(assert (=> d!11929 m!51077))

(declare-fun m!53129 () Bool)

(assert (=> d!11929 m!53129))

(assert (=> d!11929 m!50771))

(declare-fun m!53131 () Bool)

(assert (=> b!60306 m!53131))

(assert (=> b!60303 m!53131))

(assert (=> b!60310 m!53131))

(assert (=> d!11309 d!11929))

(declare-fun d!11931 () Bool)

(declare-fun lt!24722 () (_ BitVec 32))

(declare-fun lt!24721 () (_ BitVec 32))

(assert (=> d!11931 (= lt!24722 (bvmul (bvxor lt!24721 (bvlshr lt!24721 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))))

(assert (=> d!11931 (= lt!24721 ((_ extract 31 0) (bvand (bvxor (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (bvlshr (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))))

(assert (=> d!11931 (and (bvsge (mask!5927 newMap!16) #b00000000000000000000000000000000) (let ((res!33382 (let ((h!2009 ((_ extract 31 0) (bvand (bvxor (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (bvlshr (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))) (let ((x!10107 (bvmul (bvxor h!2009 (bvlshr h!2009 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))) (bvand (bvxor x!10107 (bvlshr x!10107 #b00000000000000000000000000001101)) (mask!5927 newMap!16)))))) (and (bvslt res!33382 (bvadd (mask!5927 newMap!16) #b00000000000000000000000000000001)) (bvsge res!33382 #b00000000000000000000000000000000))))))

(assert (=> d!11931 (= (toIndex!0 (select (arr!1781 (_keys!3667 (v!2383 (underlying!226 thiss!992)))) from!355) (mask!5927 newMap!16)) (bvand (bvxor lt!24722 (bvlshr lt!24722 #b00000000000000000000000000001101)) (mask!5927 newMap!16)))))

(assert (=> d!11309 d!11931))

(assert (=> d!11309 d!11523))

(declare-fun b!60312 () Bool)

(declare-fun e!39615 () Bool)

(assert (=> b!60312 (= e!39615 tp_is_empty!2397)))

(declare-fun b!60313 () Bool)

(declare-fun e!39616 () Bool)

(assert (=> b!60313 (= e!39616 tp_is_empty!2397)))

(declare-fun mapNonEmpty!2887 () Bool)

(declare-fun mapRes!2887 () Bool)

(declare-fun tp!8017 () Bool)

(assert (=> mapNonEmpty!2887 (= mapRes!2887 (and tp!8017 e!39615))))

(declare-fun mapRest!2887 () (Array (_ BitVec 32) ValueCell!855))

(declare-fun mapKey!2887 () (_ BitVec 32))

(declare-fun mapValue!2887 () ValueCell!855)

(assert (=> mapNonEmpty!2887 (= mapRest!2885 (store mapRest!2887 mapKey!2887 mapValue!2887))))

(declare-fun condMapEmpty!2887 () Bool)

(declare-fun mapDefault!2887 () ValueCell!855)

(assert (=> mapNonEmpty!2885 (= condMapEmpty!2887 (= mapRest!2885 ((as const (Array (_ BitVec 32) ValueCell!855)) mapDefault!2887)))))

(assert (=> mapNonEmpty!2885 (= tp!8015 (and e!39616 mapRes!2887))))

(declare-fun mapIsEmpty!2887 () Bool)

(assert (=> mapIsEmpty!2887 mapRes!2887))

(assert (= (and mapNonEmpty!2885 condMapEmpty!2887) mapIsEmpty!2887))

(assert (= (and mapNonEmpty!2885 (not condMapEmpty!2887)) mapNonEmpty!2887))

(assert (= (and mapNonEmpty!2887 ((_ is ValueCellFull!855) mapValue!2887)) b!60312))

(assert (= (and mapNonEmpty!2885 ((_ is ValueCellFull!855) mapDefault!2887)) b!60313))

(declare-fun m!53133 () Bool)

(assert (=> mapNonEmpty!2887 m!53133))

(declare-fun b!60314 () Bool)

(declare-fun e!39617 () Bool)

(assert (=> b!60314 (= e!39617 tp_is_empty!2397)))

(declare-fun b!60315 () Bool)

(declare-fun e!39618 () Bool)

(assert (=> b!60315 (= e!39618 tp_is_empty!2397)))

(declare-fun mapNonEmpty!2888 () Bool)

(declare-fun mapRes!2888 () Bool)

(declare-fun tp!8018 () Bool)

(assert (=> mapNonEmpty!2888 (= mapRes!2888 (and tp!8018 e!39617))))

(declare-fun mapValue!2888 () ValueCell!855)

(declare-fun mapRest!2888 () (Array (_ BitVec 32) ValueCell!855))

(declare-fun mapKey!2888 () (_ BitVec 32))

(assert (=> mapNonEmpty!2888 (= mapRest!2886 (store mapRest!2888 mapKey!2888 mapValue!2888))))

(declare-fun condMapEmpty!2888 () Bool)

(declare-fun mapDefault!2888 () ValueCell!855)

(assert (=> mapNonEmpty!2886 (= condMapEmpty!2888 (= mapRest!2886 ((as const (Array (_ BitVec 32) ValueCell!855)) mapDefault!2888)))))

(assert (=> mapNonEmpty!2886 (= tp!8016 (and e!39618 mapRes!2888))))

(declare-fun mapIsEmpty!2888 () Bool)

(assert (=> mapIsEmpty!2888 mapRes!2888))

(assert (= (and mapNonEmpty!2886 condMapEmpty!2888) mapIsEmpty!2888))

(assert (= (and mapNonEmpty!2886 (not condMapEmpty!2888)) mapNonEmpty!2888))

(assert (= (and mapNonEmpty!2888 ((_ is ValueCellFull!855) mapValue!2888)) b!60314))

(assert (= (and mapNonEmpty!2886 ((_ is ValueCellFull!855) mapDefault!2888)) b!60315))

(declare-fun m!53135 () Bool)

(assert (=> mapNonEmpty!2888 m!53135))

(declare-fun b_lambda!2647 () Bool)

(assert (= b_lambda!2631 (or (and b!58765 b_free!1961 (= (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) (defaultEntry!2043 newMap!16))) (and b!58764 b_free!1963) b_lambda!2647)))

(declare-fun b_lambda!2649 () Bool)

(assert (= b_lambda!2623 (or (and b!58765 b_free!1961 (= (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) (defaultEntry!2043 newMap!16))) (and b!58764 b_free!1963) b_lambda!2649)))

(declare-fun b_lambda!2651 () Bool)

(assert (= b_lambda!2643 (or (and b!58765 b_free!1961 (= (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) (defaultEntry!2043 newMap!16))) (and b!58764 b_free!1963) b_lambda!2651)))

(declare-fun b_lambda!2653 () Bool)

(assert (= b_lambda!2617 (or (and b!58765 b_free!1961 (= (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) (defaultEntry!2043 newMap!16))) (and b!58764 b_free!1963) b_lambda!2653)))

(declare-fun b_lambda!2655 () Bool)

(assert (= b_lambda!2629 (or (and b!58765 b_free!1961 (= (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) (defaultEntry!2043 newMap!16))) (and b!58764 b_free!1963) b_lambda!2655)))

(declare-fun b_lambda!2657 () Bool)

(assert (= b_lambda!2625 (or (and b!58765 b_free!1961 (= (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) (defaultEntry!2043 newMap!16))) (and b!58764 b_free!1963) b_lambda!2657)))

(declare-fun b_lambda!2659 () Bool)

(assert (= b_lambda!2627 (or (and b!58765 b_free!1961 (= (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) (defaultEntry!2043 newMap!16))) (and b!58764 b_free!1963) b_lambda!2659)))

(declare-fun b_lambda!2661 () Bool)

(assert (= b_lambda!2645 (or (and b!58765 b_free!1961 (= (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) (defaultEntry!2043 newMap!16))) (and b!58764 b_free!1963) b_lambda!2661)))

(declare-fun b_lambda!2663 () Bool)

(assert (= b_lambda!2641 (or (and b!58765 b_free!1961 (= (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) (defaultEntry!2043 newMap!16))) (and b!58764 b_free!1963) b_lambda!2663)))

(declare-fun b_lambda!2665 () Bool)

(assert (= b_lambda!2639 (or (and b!58765 b_free!1961) (and b!58764 b_free!1963 (= (defaultEntry!2043 newMap!16) (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))))) b_lambda!2665)))

(declare-fun b_lambda!2667 () Bool)

(assert (= b_lambda!2621 (or (and b!58765 b_free!1961 (= (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) (defaultEntry!2043 newMap!16))) (and b!58764 b_free!1963) b_lambda!2667)))

(declare-fun b_lambda!2669 () Bool)

(assert (= b_lambda!2637 (or (and b!58765 b_free!1961) (and b!58764 b_free!1963 (= (defaultEntry!2043 newMap!16) (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))))) b_lambda!2669)))

(declare-fun b_lambda!2671 () Bool)

(assert (= b_lambda!2615 (or (and b!58765 b_free!1961 (= (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) (defaultEntry!2043 newMap!16))) (and b!58764 b_free!1963) b_lambda!2671)))

(declare-fun b_lambda!2673 () Bool)

(assert (= b_lambda!2619 (or (and b!58765 b_free!1961 (= (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) (defaultEntry!2043 newMap!16))) (and b!58764 b_free!1963) b_lambda!2673)))

(declare-fun b_lambda!2675 () Bool)

(assert (= b_lambda!2635 (or (and b!58765 b_free!1961 (= (defaultEntry!2043 (v!2383 (underlying!226 thiss!992))) (defaultEntry!2043 newMap!16))) (and b!58764 b_free!1963) b_lambda!2675)))

(check-sat (not b!60052) (not b_lambda!2585) (not b!59500) (not b!60245) (not d!11655) (not b!59722) (not b!60133) (not d!11917) (not d!11505) (not d!11921) (not bm!4478) (not d!11551) (not b!60004) (not d!11517) (not b!59828) (not d!11737) (not b!60095) (not b!59901) (not b!59461) (not b_next!1963) (not b!60248) (not b!60162) (not b!60039) (not b!60013) (not b!60258) (not bm!4556) (not b!60009) (not d!11685) (not d!11711) (not b!60200) (not d!11549) (not bm!4477) (not d!11827) (not b!59781) (not b!60220) (not b!59577) (not bm!4466) (not b!59606) (not b!60210) (not d!11607) (not b!59900) (not d!11567) (not d!11673) (not b!59963) (not d!11653) (not b!60047) (not b!59473) (not b!60256) (not b!59575) (not d!11403) (not b!59514) (not d!11805) (not b!60130) (not d!11473) (not bm!4511) (not b!60099) (not bm!4543) (not b!59710) (not b!59651) (not b!59683) (not d!11923) (not bm!4527) (not b!59820) (not d!11399) (not b!60069) (not d!11429) (not b!59709) (not d!11765) (not b!59706) (not b!60136) (not d!11727) (not d!11425) (not d!11797) (not b!60272) (not b!59841) (not d!11633) (not b!60222) (not b!60261) (not b!60086) (not b!59955) (not d!11881) (not d!11741) (not d!11643) (not b!59874) (not b!60263) (not b!59631) (not b!60000) (not b!59856) (not b!59834) (not b!59979) (not b!59869) (not d!11665) (not d!11593) (not b!59935) (not b!59697) (not d!11781) (not b!60309) (not d!11543) (not d!11873) (not d!11405) (not b!60177) (not b!59817) (not b!59531) (not bm!4539) (not b!59807) (not b!59941) (not d!11735) (not d!11513) (not b!60168) (not b!60043) (not d!11907) (not b!59927) (not b!59628) (not b!60156) (not b_lambda!2665) (not d!11783) (not b!60046) (not b!60119) (not b!59484) (not b!59846) (not b!60277) (not b!59582) (not b!59607) (not b!60118) (not b!59714) (not d!11705) (not b!59624) (not d!11867) (not b!60269) (not mapNonEmpty!2887) (not b!59968) (not b!59804) (not b!59645) (not b!59887) (not d!11883) (not b!59499) (not b!60257) (not b!59987) (not bm!4497) (not b!59959) (not b!59636) (not b!59492) (not d!11891) (not b!59976) (not d!11407) (not b!59802) (not d!11479) (not d!11641) (not b!59537) (not b!60278) (not b!59931) (not b!59652) (not d!11397) (not b!59598) (not b!59907) (not b!60283) (not bm!4490) (not d!11853) (not b!60127) (not b!60031) (not d!11477) (not b_lambda!2589) (not d!11909) (not b!60065) (not b!60021) (not b!59909) (not d!11777) (not b!60124) (not bm!4518) (not d!11565) (not d!11697) (not b!59457) (not d!11417) (not d!11863) (not b!59923) (not b!59813) (not b!59498) (not d!11847) (not b!59961) (not b!60183) (not b!60107) (not bm!4549) (not b_lambda!2651) (not d!11871) (not d!11647) (not b!60217) (not b!60225) (not b!60191) (not bm!4528) (not d!11457) (not d!11875) (not b!59584) (not b!59719) (not b!60254) (not d!11659) (not d!11533) (not b_lambda!2673) (not b!59854) (not b!59644) (not d!11509) (not b!59627) (not bm!4467) (not b!60084) (not b!59881) (not bm!4494) (not d!11849) (not b!60244) (not b!59784) (not b!59837) (not d!11905) (not b!59873) (not b!60114) (not b!60010) (not b!59821) (not d!11395) (not b!59475) (not bm!4538) (not b!59509) (not bm!4519) (not d!11929) (not b!59980) (not d!11571) (not b!60232) (not d!11731) (not b!59997) (not b!59899) (not b!59914) (not b_lambda!2633) (not d!11919) (not b!60025) (not b_lambda!2671) (not b!59948) (not d!11699) (not b!59791) (not b_lambda!2663) (not b!59516) (not b!59967) (not d!11887) (not d!11495) (not b!60167) (not b!59853) tp_is_empty!2397 (not d!11823) (not bm!4488) (not b!59479) (not b!59936) (not d!11459) (not d!11635) (not d!11629) (not d!11389) (not d!11433) (not b!59799) (not b_next!1961) (not b!59866) (not d!11435) (not bm!4503) (not b!60236) (not d!11915) (not b!60150) (not b!59476) (not bm!4562) (not b!59493) (not bm!4521) (not d!11561) (not d!11511) (not d!11717) (not b!59604) (not b!59538) (not d!11837) (not d!11645) (not b!59622) (not b!59654) (not b!59928) (not b!60014) (not b!59474) (not b!59561) (not b!59560) (not b!59638) (not b!60171) (not d!11861) (not d!11897) (not b!59805) (not b!59742) (not b!59725) (not b!59883) (not b!60057) (not b!59580) (not b!60159) (not b!59969) (not b!59520) (not d!11587) (not bm!4555) (not b!60016) (not d!11377) (not bm!4496) (not b!60083) (not bm!4557) (not b!59815) (not d!11557) (not b!60129) (not b!59570) (not d!11841) (not bm!4530) (not bm!4468) (not d!11413) (not d!11507) (not b!59985) (not b!59796) (not b!59701) (not b!59926) (not d!11715) (not b!59949) (not b!59879) (not d!11835) (not d!11577) (not b!60151) b_and!3655 (not d!11489) (not b!59524) (not b!60108) (not d!11559) (not d!11491) (not b!59990) (not d!11719) (not b!60181) (not b!59625) (not d!11743) (not b!59848) (not b_lambda!2661) (not b!60276) (not b!59825) (not b!59592) (not bm!4513) (not b_lambda!2657) (not d!11851) (not b!60188) (not b_lambda!2675) (not b!60155) (not d!11385) (not b!59786) (not b!60186) (not b!59965) (not bm!4545) (not b!60144) (not b!59977) (not b!60103) (not b!60139) (not b!59465) (not d!11701) (not b!59512) (not b!60260) (not d!11893) (not b!59595) (not b!59487) (not b!59587) (not d!11499) (not d!11381) (not b!59478) (not b!59596) (not d!11441) (not d!11603) (not bm!4507) (not b!59505) (not d!11749) (not b!60205) (not b!60053) (not b!59988) (not d!11773) (not b!60221) (not b!59877) (not bm!4512) (not d!11911) (not d!11753) (not d!11889) (not d!11769) (not d!11901) (not b!59736) (not d!11831) (not b!59477) (not b!59863) (not bm!4537) (not bm!4544) (not d!11487) (not b!60231) (not d!11809) (not b!59857) (not d!11843) (not b!60160) (not b!59688) (not d!11467) (not d!11555) (not b!59617) (not d!11695) (not b!59705) (not d!11757) (not d!11619) (not b!59686) (not mapNonEmpty!2888) (not b!59777) (not b!59888) (not b!60250) (not b!59721) (not b!59589) (not d!11879) (not d!11745) (not b!59517) (not b!59772) (not b!59623) (not d!11667) (not b!59723) (not d!11383) (not b!59704) (not b!59603) (not b!60165) (not b!59632) (not d!11721) (not bm!4534) (not bm!4505) (not b!60024) (not b!59658) (not b!59490) (not b!60240) (not b!59835) (not d!11445) (not b!60066) (not b!59975) (not b!59740) (not b!60153) (not d!11393) (not b_lambda!2611) (not bm!4495) (not b!60011) (not b!60022) (not b!60192) (not d!11713) (not b!59482) (not d!11677) (not b!59684) (not b!60180) (not d!11925) (not b!60142) (not b!59460) (not d!11547) (not b!59950) (not b!60211) (not d!11723) (not b!59824) (not b_lambda!2649) (not b!60012) (not d!11755) (not d!11709) (not b!59892) (not d!11625) (not d!11787) (not d!11539) (not b!60275) (not d!11813) (not b!60282) (not b!60198) (not b!59764) (not d!11693) (not bm!4552) (not b!59629) (not bm!4487) (not b!60189) (not d!11763) (not b!59872) (not b!59831) (not b!60041) (not b!59793) (not b!60227) (not bm!4529) (not b!59932) (not b!60243) (not d!11465) (not b!59974) (not b!59782) (not b!60223) (not b_lambda!2603) (not bm!4520) (not b!60264) (not b!59962) (not b!59480) (not b!60253) (not b!59779) (not bm!4481) (not d!11531) b_and!3657 (not d!11585) (not b!59731) (not d!11707) (not b!59692) (not b!59738) (not bm!4561) (not d!11401) (not d!11563) (not b!60044) (not d!11817) (not b!59982) (not b!59812) (not b!59621) (not b!59715) (not b!60064) (not b!59910) (not b!59844) (not d!11795) (not bm!4546) (not b!59620) (not b!59851) (not d!11409) (not b_lambda!2613) (not b!59735) (not d!11535) (not d!11485) (not d!11387) (not d!11703) (not b_lambda!2655) (not b_lambda!2609) (not d!11799) (not d!11833) (not bm!4504) (not b!59875) (not d!11687) (not b!60170) (not b!60279) (not b!59814) (not d!11821) (not d!11869) (not b!59619) (not b!59586) (not b!59601) (not d!11771) (not b!60035) (not b!60115) (not b!59951) (not d!11583) (not b!60088) (not b!60005) (not d!11525) (not d!11537) (not d!11913) (not b_lambda!2607) (not b!59687) (not b!59954) (not b_lambda!2667) (not d!11793) (not d!11903) (not b!60265) (not d!11899) (not b!60070) (not b!60019) (not d!11447) (not b!59964) (not b!59773) (not b!59567) (not d!11411) (not b!59481) (not d!11681) (not b!60132) (not d!11553) (not b_lambda!2647) (not bm!4482) (not bm!4498) (not b!59526) (not d!11617) (not d!11569) (not d!11803) (not bm!4499) (not b!59656) (not b!59904) (not b!59464) (not b!60001) (not b!59503) (not b_lambda!2653) (not b!59508) (not b!59973) (not b!60281) (not b!59613) (not b!59896) (not b!59693) (not b!59808) (not b_lambda!2605) (not b!60271) (not b!59939) (not d!11669) (not b!60266) (not b!60006) (not b!59960) (not b!59818) (not b!59712) (not b!59991) (not b!59769) (not bm!4506) (not b_lambda!2659) (not b!60002) (not d!11521) (not b!59637) (not d!11801) (not b!59472) (not b!59467) (not b!59489) (not b!60202) (not bm!4536) (not b_lambda!2669) (not d!11527) (not b!60112) (not b!60007) (not b!60106) (not b!60072) (not d!11621) (not d!11689) (not b!60252) (not d!11865) (not bm!4535) (not b!60208) (not b!59657) (not b!59839) (not bm!4500) (not d!11877) (not b!60207) (not d!11391) (not d!11739) (not d!11855) (not b!59468) (not d!11885) (not bm!4514) (not b!60111) (not b!59730) (not b!59788) (not b!59747) (not b!59946) (not d!11497) (not d!11927) (not b!60061) (not b!59733) (not d!11463) (not b!59642) (not b!59915) (not b!59919) (not b!59528) (not b!59585) (not d!11675) (not b!59497) (not b!59639) (not bm!4489) (not bm!4524) (not d!11729) (not d!11691) (not d!11651) (not b!59937) (not b!59789) (not b!59952) (not b!60094))
(check-sat b_and!3655 b_and!3657 (not b_next!1961) (not b_next!1963))
