; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!8572 () Bool)

(assert start!8572)

(declare-fun b!58642 () Bool)

(declare-fun b_free!1957 () Bool)

(declare-fun b_next!1957 () Bool)

(assert (=> b!58642 (= b_free!1957 (not b_next!1957))))

(declare-fun tp!7986 () Bool)

(declare-fun b_and!3541 () Bool)

(assert (=> b!58642 (= tp!7986 b_and!3541)))

(declare-fun b!58653 () Bool)

(declare-fun b_free!1959 () Bool)

(declare-fun b_next!1959 () Bool)

(assert (=> b!58653 (= b_free!1959 (not b_next!1959))))

(declare-fun tp!7985 () Bool)

(declare-fun b_and!3543 () Bool)

(assert (=> b!58653 (= tp!7985 b_and!3543)))

(declare-fun b!58641 () Bool)

(declare-fun res!32664 () Bool)

(declare-fun e!38599 () Bool)

(assert (=> b!58641 (=> (not res!32664) (not e!38599))))

(declare-fun from!355 () (_ BitVec 32))

(declare-datatypes ((V!2841 0))(
  ( (V!2842 (val!1242 Int)) )
))
(declare-datatypes ((array!3703 0))(
  ( (array!3704 (arr!1772 (Array (_ BitVec 32) (_ BitVec 64))) (size!2002 (_ BitVec 32))) )
))
(declare-datatypes ((ValueCell!854 0))(
  ( (ValueCellFull!854 (v!2381 V!2841)) (EmptyCell!854) )
))
(declare-datatypes ((array!3705 0))(
  ( (array!3706 (arr!1773 (Array (_ BitVec 32) ValueCell!854)) (size!2003 (_ BitVec 32))) )
))
(declare-datatypes ((LongMapFixedSize!616 0))(
  ( (LongMapFixedSize!617 (defaultEntry!2042 Int) (mask!5926 (_ BitVec 32)) (extraKeys!1929 (_ BitVec 32)) (zeroValue!1958 V!2841) (minValue!1958 V!2841) (_size!357 (_ BitVec 32)) (_keys!3666 array!3703) (_values!2025 array!3705) (_vacant!357 (_ BitVec 32))) )
))
(declare-datatypes ((Cell!428 0))(
  ( (Cell!429 (v!2382 LongMapFixedSize!616)) )
))
(declare-datatypes ((LongMap!428 0))(
  ( (LongMap!429 (underlying!225 Cell!428)) )
))
(declare-fun thiss!992 () LongMap!428)

(assert (=> b!58641 (= res!32664 (and (bvsge from!355 #b00000000000000000000000000000000) (bvslt from!355 (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun e!38594 () Bool)

(declare-fun tp_is_empty!2395 () Bool)

(declare-fun e!38591 () Bool)

(declare-fun array_inv!1089 (array!3703) Bool)

(declare-fun array_inv!1090 (array!3705) Bool)

(assert (=> b!58642 (= e!38594 (and tp!7986 tp_is_empty!2395 (array_inv!1089 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (array_inv!1090 (_values!2025 (v!2382 (underlying!225 thiss!992)))) e!38591))))

(declare-fun b!58643 () Bool)

(declare-fun e!38598 () Bool)

(assert (=> b!58643 (= e!38598 tp_is_empty!2395)))

(declare-fun mapIsEmpty!2867 () Bool)

(declare-fun mapRes!2867 () Bool)

(assert (=> mapIsEmpty!2867 mapRes!2867))

(declare-fun mapIsEmpty!2868 () Bool)

(declare-fun mapRes!2868 () Bool)

(assert (=> mapIsEmpty!2868 mapRes!2868))

(declare-fun b!58644 () Bool)

(declare-fun e!38600 () Bool)

(assert (=> b!58644 (= e!38600 tp_is_empty!2395)))

(declare-fun b!58645 () Bool)

(declare-fun e!38586 () Bool)

(declare-fun e!38597 () Bool)

(assert (=> b!58645 (= e!38586 e!38597)))

(declare-fun mapNonEmpty!2867 () Bool)

(declare-fun tp!7983 () Bool)

(declare-fun e!38590 () Bool)

(assert (=> mapNonEmpty!2867 (= mapRes!2868 (and tp!7983 e!38590))))

(declare-fun mapRest!2867 () (Array (_ BitVec 32) ValueCell!854))

(declare-fun mapValue!2868 () ValueCell!854)

(declare-fun mapKey!2867 () (_ BitVec 32))

(assert (=> mapNonEmpty!2867 (= (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) (store mapRest!2867 mapKey!2867 mapValue!2868))))

(declare-fun mapNonEmpty!2868 () Bool)

(declare-fun tp!7984 () Bool)

(declare-fun e!38596 () Bool)

(assert (=> mapNonEmpty!2868 (= mapRes!2867 (and tp!7984 e!38596))))

(declare-fun mapValue!2867 () ValueCell!854)

(declare-fun mapRest!2868 () (Array (_ BitVec 32) ValueCell!854))

(declare-fun newMap!16 () LongMapFixedSize!616)

(declare-fun mapKey!2868 () (_ BitVec 32))

(assert (=> mapNonEmpty!2868 (= (arr!1773 (_values!2025 newMap!16)) (store mapRest!2868 mapKey!2868 mapValue!2867))))

(declare-fun res!32661 () Bool)

(assert (=> start!8572 (=> (not res!32661) (not e!38599))))

(declare-fun valid!262 (LongMap!428) Bool)

(assert (=> start!8572 (= res!32661 (valid!262 thiss!992))))

(assert (=> start!8572 e!38599))

(assert (=> start!8572 e!38586))

(assert (=> start!8572 true))

(declare-fun e!38587 () Bool)

(assert (=> start!8572 e!38587))

(declare-fun b!58646 () Bool)

(declare-datatypes ((Unit!1547 0))(
  ( (Unit!1548) )
))
(declare-fun e!38593 () Unit!1547)

(declare-fun Unit!1549 () Unit!1547)

(assert (=> b!58646 (= e!38593 Unit!1549)))

(declare-fun lt!23586 () Unit!1547)

(declare-fun lemmaListMapContainsThenArrayContainsFrom!24 (array!3703 array!3705 (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 (_ BitVec 64) (_ BitVec 32) Int) Unit!1547)

(assert (=> b!58646 (= lt!23586 (lemmaListMapContainsThenArrayContainsFrom!24 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (_values!2025 (v!2382 (underlying!225 thiss!992))) (mask!5926 (v!2382 (underlying!225 thiss!992))) (extraKeys!1929 (v!2382 (underlying!225 thiss!992))) (zeroValue!1958 (v!2382 (underlying!225 thiss!992))) (minValue!1958 (v!2382 (underlying!225 thiss!992))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2042 (v!2382 (underlying!225 thiss!992)))))))

(declare-fun arrayContainsKey!0 (array!3703 (_ BitVec 64) (_ BitVec 32)) Bool)

(assert (=> b!58646 (arrayContainsKey!0 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355))))

(declare-fun lt!23585 () Unit!1547)

(declare-fun lemmaNoDuplicateFromThenFromBigger!0 (array!3703 (_ BitVec 32) (_ BitVec 32)) Unit!1547)

(assert (=> b!58646 (= lt!23585 (lemmaNoDuplicateFromThenFromBigger!0 (_keys!3666 (v!2382 (underlying!225 thiss!992))) #b00000000000000000000000000000000 from!355))))

(declare-datatypes ((List!1422 0))(
  ( (Nil!1419) (Cons!1418 (h!1999 (_ BitVec 64)) (t!4756 List!1422)) )
))
(declare-fun arrayNoDuplicates!0 (array!3703 (_ BitVec 32) List!1422) Bool)

(assert (=> b!58646 (arrayNoDuplicates!0 (_keys!3666 (v!2382 (underlying!225 thiss!992))) from!355 Nil!1419)))

(declare-fun lt!23589 () Unit!1547)

(declare-fun lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (array!3703 (_ BitVec 32) (_ BitVec 64) List!1422) Unit!1547)

(assert (=> b!58646 (= lt!23589 (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (Cons!1418 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) Nil!1419)))))

(assert (=> b!58646 false))

(declare-fun b!58647 () Bool)

(declare-fun e!38589 () Bool)

(assert (=> b!58647 (= e!38589 (and e!38600 mapRes!2867))))

(declare-fun condMapEmpty!2867 () Bool)

(declare-fun mapDefault!2867 () ValueCell!854)

(assert (=> b!58647 (= condMapEmpty!2867 (= (arr!1773 (_values!2025 newMap!16)) ((as const (Array (_ BitVec 32) ValueCell!854)) mapDefault!2867)))))

(declare-fun b!58648 () Bool)

(assert (=> b!58648 (= e!38590 tp_is_empty!2395)))

(declare-fun b!58649 () Bool)

(declare-fun res!32658 () Bool)

(assert (=> b!58649 (=> (not res!32658) (not e!38599))))

(assert (=> b!58649 (= res!32658 (bvsge (bvadd #b00000000000000000000000000000001 (mask!5926 newMap!16)) (_size!357 (v!2382 (underlying!225 thiss!992)))))))

(declare-fun b!58650 () Bool)

(assert (=> b!58650 (= e!38596 tp_is_empty!2395)))

(declare-fun b!58651 () Bool)

(declare-fun Unit!1550 () Unit!1547)

(assert (=> b!58651 (= e!38593 Unit!1550)))

(declare-fun b!58652 () Bool)

(declare-fun e!38588 () Bool)

(assert (=> b!58652 (= e!38588 (and (= (size!2003 (_values!2025 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 (mask!5926 (v!2382 (underlying!225 thiss!992))))) (not (= (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (size!2003 (_values!2025 (v!2382 (underlying!225 thiss!992))))))))))

(assert (=> b!58653 (= e!38587 (and tp!7985 tp_is_empty!2395 (array_inv!1089 (_keys!3666 newMap!16)) (array_inv!1090 (_values!2025 newMap!16)) e!38589))))

(declare-fun b!58654 () Bool)

(declare-fun res!32660 () Bool)

(assert (=> b!58654 (=> (not res!32660) (not e!38588))))

(declare-fun validMask!0 ((_ BitVec 32)) Bool)

(assert (=> b!58654 (= res!32660 (validMask!0 (mask!5926 (v!2382 (underlying!225 thiss!992)))))))

(declare-fun b!58655 () Bool)

(declare-fun res!32659 () Bool)

(assert (=> b!58655 (=> (not res!32659) (not e!38599))))

(declare-fun valid!263 (LongMapFixedSize!616) Bool)

(assert (=> b!58655 (= res!32659 (valid!263 newMap!16))))

(declare-fun b!58656 () Bool)

(declare-fun e!38595 () Bool)

(assert (=> b!58656 (= e!38599 e!38595)))

(declare-fun res!32663 () Bool)

(assert (=> b!58656 (=> (not res!32663) (not e!38595))))

(declare-datatypes ((tuple2!2014 0))(
  ( (tuple2!2015 (_1!1018 (_ BitVec 64)) (_2!1018 V!2841)) )
))
(declare-datatypes ((List!1423 0))(
  ( (Nil!1420) (Cons!1419 (h!2000 tuple2!2014) (t!4757 List!1423)) )
))
(declare-datatypes ((ListLongMap!1343 0))(
  ( (ListLongMap!1344 (toList!687 List!1423)) )
))
(declare-fun lt!23590 () ListLongMap!1343)

(declare-fun lt!23588 () ListLongMap!1343)

(assert (=> b!58656 (= res!32663 (and (= lt!23588 lt!23590) (not (= (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun map!1108 (LongMapFixedSize!616) ListLongMap!1343)

(assert (=> b!58656 (= lt!23590 (map!1108 newMap!16))))

(declare-fun getCurrentListMap!388 (array!3703 array!3705 (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 (_ BitVec 32) Int) ListLongMap!1343)

(assert (=> b!58656 (= lt!23588 (getCurrentListMap!388 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (_values!2025 (v!2382 (underlying!225 thiss!992))) (mask!5926 (v!2382 (underlying!225 thiss!992))) (extraKeys!1929 (v!2382 (underlying!225 thiss!992))) (zeroValue!1958 (v!2382 (underlying!225 thiss!992))) (minValue!1958 (v!2382 (underlying!225 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2042 (v!2382 (underlying!225 thiss!992)))))))

(declare-fun b!58657 () Bool)

(assert (=> b!58657 (= e!38597 e!38594)))

(declare-fun b!58658 () Bool)

(assert (=> b!58658 (= e!38591 (and e!38598 mapRes!2868))))

(declare-fun condMapEmpty!2868 () Bool)

(declare-fun mapDefault!2868 () ValueCell!854)

(assert (=> b!58658 (= condMapEmpty!2868 (= (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) ((as const (Array (_ BitVec 32) ValueCell!854)) mapDefault!2868)))))

(declare-fun b!58659 () Bool)

(assert (=> b!58659 (= e!38595 e!38588)))

(declare-fun res!32662 () Bool)

(assert (=> b!58659 (=> (not res!32662) (not e!38588))))

(declare-datatypes ((tuple2!2016 0))(
  ( (tuple2!2017 (_1!1019 Bool) (_2!1019 LongMapFixedSize!616)) )
))
(declare-fun lt!23587 () tuple2!2016)

(assert (=> b!58659 (= res!32662 (and (_1!1019 lt!23587) (bvsgt from!355 #b00000000000000000000000000000000)))))

(declare-fun lt!23591 () Unit!1547)

(assert (=> b!58659 (= lt!23591 e!38593)))

(declare-fun c!7422 () Bool)

(declare-fun contains!678 (ListLongMap!1343 (_ BitVec 64)) Bool)

(assert (=> b!58659 (= c!7422 (contains!678 lt!23590 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(declare-fun update!86 (LongMapFixedSize!616 (_ BitVec 64) V!2841) tuple2!2016)

(declare-fun get!1072 (ValueCell!854 V!2841) V!2841)

(declare-fun dynLambda!304 (Int (_ BitVec 64)) V!2841)

(assert (=> b!58659 (= lt!23587 (update!86 newMap!16 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (= (and start!8572 res!32661) b!58641))

(assert (= (and b!58641 res!32664) b!58655))

(assert (= (and b!58655 res!32659) b!58649))

(assert (= (and b!58649 res!32658) b!58656))

(assert (= (and b!58656 res!32663) b!58659))

(assert (= (and b!58659 c!7422) b!58646))

(assert (= (and b!58659 (not c!7422)) b!58651))

(assert (= (and b!58659 res!32662) b!58654))

(assert (= (and b!58654 res!32660) b!58652))

(assert (= (and b!58658 condMapEmpty!2868) mapIsEmpty!2868))

(assert (= (and b!58658 (not condMapEmpty!2868)) mapNonEmpty!2867))

(get-info :version)

(assert (= (and mapNonEmpty!2867 ((_ is ValueCellFull!854) mapValue!2868)) b!58648))

(assert (= (and b!58658 ((_ is ValueCellFull!854) mapDefault!2868)) b!58643))

(assert (= b!58642 b!58658))

(assert (= b!58657 b!58642))

(assert (= b!58645 b!58657))

(assert (= start!8572 b!58645))

(assert (= (and b!58647 condMapEmpty!2867) mapIsEmpty!2867))

(assert (= (and b!58647 (not condMapEmpty!2867)) mapNonEmpty!2868))

(assert (= (and mapNonEmpty!2868 ((_ is ValueCellFull!854) mapValue!2867)) b!58650))

(assert (= (and b!58647 ((_ is ValueCellFull!854) mapDefault!2867)) b!58644))

(assert (= b!58653 b!58647))

(assert (= start!8572 b!58653))

(declare-fun b_lambda!2579 () Bool)

(assert (=> (not b_lambda!2579) (not b!58659)))

(declare-fun t!4753 () Bool)

(declare-fun tb!1309 () Bool)

(assert (=> (and b!58642 (= (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) (defaultEntry!2042 (v!2382 (underlying!225 thiss!992)))) t!4753) tb!1309))

(declare-fun result!2361 () Bool)

(assert (=> tb!1309 (= result!2361 tp_is_empty!2395)))

(assert (=> b!58659 t!4753))

(declare-fun b_and!3545 () Bool)

(assert (= b_and!3541 (and (=> t!4753 result!2361) b_and!3545)))

(declare-fun t!4755 () Bool)

(declare-fun tb!1311 () Bool)

(assert (=> (and b!58653 (= (defaultEntry!2042 newMap!16) (defaultEntry!2042 (v!2382 (underlying!225 thiss!992)))) t!4755) tb!1311))

(declare-fun result!2365 () Bool)

(assert (= result!2365 result!2361))

(assert (=> b!58659 t!4755))

(declare-fun b_and!3547 () Bool)

(assert (= b_and!3543 (and (=> t!4755 result!2365) b_and!3547)))

(declare-fun m!50361 () Bool)

(assert (=> b!58654 m!50361))

(declare-fun m!50363 () Bool)

(assert (=> b!58646 m!50363))

(declare-fun m!50365 () Bool)

(assert (=> b!58646 m!50365))

(declare-fun m!50367 () Bool)

(assert (=> b!58646 m!50367))

(declare-fun m!50369 () Bool)

(assert (=> b!58646 m!50369))

(assert (=> b!58646 m!50367))

(assert (=> b!58646 m!50367))

(declare-fun m!50371 () Bool)

(assert (=> b!58646 m!50371))

(assert (=> b!58646 m!50367))

(declare-fun m!50373 () Bool)

(assert (=> b!58646 m!50373))

(declare-fun m!50375 () Bool)

(assert (=> b!58642 m!50375))

(declare-fun m!50377 () Bool)

(assert (=> b!58642 m!50377))

(assert (=> b!58656 m!50367))

(declare-fun m!50379 () Bool)

(assert (=> b!58656 m!50379))

(declare-fun m!50381 () Bool)

(assert (=> b!58656 m!50381))

(declare-fun m!50383 () Bool)

(assert (=> mapNonEmpty!2868 m!50383))

(declare-fun m!50385 () Bool)

(assert (=> b!58655 m!50385))

(declare-fun m!50387 () Bool)

(assert (=> start!8572 m!50387))

(declare-fun m!50389 () Bool)

(assert (=> mapNonEmpty!2867 m!50389))

(declare-fun m!50391 () Bool)

(assert (=> b!58659 m!50391))

(declare-fun m!50393 () Bool)

(assert (=> b!58659 m!50393))

(declare-fun m!50395 () Bool)

(assert (=> b!58659 m!50395))

(assert (=> b!58659 m!50367))

(assert (=> b!58659 m!50367))

(declare-fun m!50397 () Bool)

(assert (=> b!58659 m!50397))

(assert (=> b!58659 m!50393))

(assert (=> b!58659 m!50367))

(assert (=> b!58659 m!50395))

(declare-fun m!50399 () Bool)

(assert (=> b!58659 m!50399))

(assert (=> b!58659 m!50391))

(declare-fun m!50401 () Bool)

(assert (=> b!58653 m!50401))

(declare-fun m!50403 () Bool)

(assert (=> b!58653 m!50403))

(check-sat (not b!58642) (not b_lambda!2579) b_and!3545 (not b!58646) (not b_next!1957) (not b!58656) (not start!8572) tp_is_empty!2395 (not b!58654) (not b!58653) b_and!3547 (not b!58655) (not mapNonEmpty!2867) (not b!58659) (not b_next!1959) (not mapNonEmpty!2868))
(check-sat b_and!3545 b_and!3547 (not b_next!1957) (not b_next!1959))
(get-model)

(declare-fun b_lambda!2585 () Bool)

(assert (= b_lambda!2579 (or (and b!58642 b_free!1957) (and b!58653 b_free!1959 (= (defaultEntry!2042 newMap!16) (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))))) b_lambda!2585)))

(check-sat (not b!58642) b_and!3545 (not b!58646) (not b_next!1957) (not b!58656) (not start!8572) tp_is_empty!2395 (not b!58654) (not b!58653) b_and!3547 (not b!58655) (not b!58659) (not b_next!1959) (not mapNonEmpty!2868) (not b_lambda!2585) (not mapNonEmpty!2867))
(check-sat b_and!3545 b_and!3547 (not b_next!1957) (not b_next!1959))
(get-model)

(declare-fun d!11195 () Bool)

(assert (=> d!11195 (= (array_inv!1089 (_keys!3666 newMap!16)) (bvsge (size!2002 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!58653 d!11195))

(declare-fun d!11197 () Bool)

(assert (=> d!11197 (= (array_inv!1090 (_values!2025 newMap!16)) (bvsge (size!2003 (_values!2025 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!58653 d!11197))

(declare-fun d!11199 () Bool)

(assert (=> d!11199 (= (validMask!0 (mask!5926 (v!2382 (underlying!225 thiss!992)))) (and (or (= (mask!5926 (v!2382 (underlying!225 thiss!992))) #b00000000000000000000000000000111) (= (mask!5926 (v!2382 (underlying!225 thiss!992))) #b00000000000000000000000000001111) (= (mask!5926 (v!2382 (underlying!225 thiss!992))) #b00000000000000000000000000011111) (= (mask!5926 (v!2382 (underlying!225 thiss!992))) #b00000000000000000000000000111111) (= (mask!5926 (v!2382 (underlying!225 thiss!992))) #b00000000000000000000000001111111) (= (mask!5926 (v!2382 (underlying!225 thiss!992))) #b00000000000000000000000011111111) (= (mask!5926 (v!2382 (underlying!225 thiss!992))) #b00000000000000000000000111111111) (= (mask!5926 (v!2382 (underlying!225 thiss!992))) #b00000000000000000000001111111111) (= (mask!5926 (v!2382 (underlying!225 thiss!992))) #b00000000000000000000011111111111) (= (mask!5926 (v!2382 (underlying!225 thiss!992))) #b00000000000000000000111111111111) (= (mask!5926 (v!2382 (underlying!225 thiss!992))) #b00000000000000000001111111111111) (= (mask!5926 (v!2382 (underlying!225 thiss!992))) #b00000000000000000011111111111111) (= (mask!5926 (v!2382 (underlying!225 thiss!992))) #b00000000000000000111111111111111) (= (mask!5926 (v!2382 (underlying!225 thiss!992))) #b00000000000000001111111111111111) (= (mask!5926 (v!2382 (underlying!225 thiss!992))) #b00000000000000011111111111111111) (= (mask!5926 (v!2382 (underlying!225 thiss!992))) #b00000000000000111111111111111111) (= (mask!5926 (v!2382 (underlying!225 thiss!992))) #b00000000000001111111111111111111) (= (mask!5926 (v!2382 (underlying!225 thiss!992))) #b00000000000011111111111111111111) (= (mask!5926 (v!2382 (underlying!225 thiss!992))) #b00000000000111111111111111111111) (= (mask!5926 (v!2382 (underlying!225 thiss!992))) #b00000000001111111111111111111111) (= (mask!5926 (v!2382 (underlying!225 thiss!992))) #b00000000011111111111111111111111) (= (mask!5926 (v!2382 (underlying!225 thiss!992))) #b00000000111111111111111111111111) (= (mask!5926 (v!2382 (underlying!225 thiss!992))) #b00000001111111111111111111111111) (= (mask!5926 (v!2382 (underlying!225 thiss!992))) #b00000011111111111111111111111111) (= (mask!5926 (v!2382 (underlying!225 thiss!992))) #b00000111111111111111111111111111) (= (mask!5926 (v!2382 (underlying!225 thiss!992))) #b00001111111111111111111111111111) (= (mask!5926 (v!2382 (underlying!225 thiss!992))) #b00011111111111111111111111111111) (= (mask!5926 (v!2382 (underlying!225 thiss!992))) #b00111111111111111111111111111111)) (bvsle (mask!5926 (v!2382 (underlying!225 thiss!992))) #b00111111111111111111111111111111)))))

(assert (=> b!58654 d!11199))

(declare-fun d!11201 () Bool)

(assert (=> d!11201 (= (array_inv!1089 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvsge (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!58642 d!11201))

(declare-fun d!11203 () Bool)

(assert (=> d!11203 (= (array_inv!1090 (_values!2025 (v!2382 (underlying!225 thiss!992)))) (bvsge (size!2003 (_values!2025 (v!2382 (underlying!225 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!58642 d!11203))

(declare-fun d!11205 () Bool)

(declare-fun e!38701 () Bool)

(assert (=> d!11205 e!38701))

(declare-fun res!32709 () Bool)

(assert (=> d!11205 (=> res!32709 e!38701)))

(declare-fun lt!23644 () Bool)

(assert (=> d!11205 (= res!32709 (not lt!23644))))

(declare-fun lt!23643 () Bool)

(assert (=> d!11205 (= lt!23644 lt!23643)))

(declare-fun lt!23642 () Unit!1547)

(declare-fun e!38702 () Unit!1547)

(assert (=> d!11205 (= lt!23642 e!38702)))

(declare-fun c!7431 () Bool)

(assert (=> d!11205 (= c!7431 lt!23643)))

(declare-fun containsKey!128 (List!1423 (_ BitVec 64)) Bool)

(assert (=> d!11205 (= lt!23643 (containsKey!128 (toList!687 lt!23590) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(assert (=> d!11205 (= (contains!678 lt!23590 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) lt!23644)))

(declare-fun b!58786 () Bool)

(declare-fun lt!23645 () Unit!1547)

(assert (=> b!58786 (= e!38702 lt!23645)))

(declare-fun lemmaContainsKeyImpliesGetValueByKeyDefined!76 (List!1423 (_ BitVec 64)) Unit!1547)

(assert (=> b!58786 (= lt!23645 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 lt!23590) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(declare-datatypes ((Option!131 0))(
  ( (Some!130 (v!2387 V!2841)) (None!129) )
))
(declare-fun isDefined!77 (Option!131) Bool)

(declare-fun getValueByKey!125 (List!1423 (_ BitVec 64)) Option!131)

(assert (=> b!58786 (isDefined!77 (getValueByKey!125 (toList!687 lt!23590) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(declare-fun b!58787 () Bool)

(declare-fun Unit!1551 () Unit!1547)

(assert (=> b!58787 (= e!38702 Unit!1551)))

(declare-fun b!58788 () Bool)

(assert (=> b!58788 (= e!38701 (isDefined!77 (getValueByKey!125 (toList!687 lt!23590) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355))))))

(assert (= (and d!11205 c!7431) b!58786))

(assert (= (and d!11205 (not c!7431)) b!58787))

(assert (= (and d!11205 (not res!32709)) b!58788))

(assert (=> d!11205 m!50367))

(declare-fun m!50493 () Bool)

(assert (=> d!11205 m!50493))

(assert (=> b!58786 m!50367))

(declare-fun m!50495 () Bool)

(assert (=> b!58786 m!50495))

(assert (=> b!58786 m!50367))

(declare-fun m!50497 () Bool)

(assert (=> b!58786 m!50497))

(assert (=> b!58786 m!50497))

(declare-fun m!50499 () Bool)

(assert (=> b!58786 m!50499))

(assert (=> b!58788 m!50367))

(assert (=> b!58788 m!50497))

(assert (=> b!58788 m!50497))

(assert (=> b!58788 m!50499))

(assert (=> b!58659 d!11205))

(declare-fun b!58873 () Bool)

(declare-fun e!38748 () Bool)

(declare-fun e!38760 () Bool)

(assert (=> b!58873 (= e!38748 e!38760)))

(declare-fun res!32739 () Bool)

(declare-fun call!4353 () Bool)

(assert (=> b!58873 (= res!32739 call!4353)))

(assert (=> b!58873 (=> (not res!32739) (not e!38760))))

(declare-datatypes ((SeekEntryResult!221 0))(
  ( (MissingZero!221 (index!3007 (_ BitVec 32))) (Found!221 (index!3008 (_ BitVec 32))) (Intermediate!221 (undefined!1033 Bool) (index!3009 (_ BitVec 32)) (x!9997 (_ BitVec 32))) (Undefined!221) (MissingVacant!221 (index!3010 (_ BitVec 32))) )
))
(declare-fun lt!23718 () SeekEntryResult!221)

(declare-fun b!58874 () Bool)

(declare-fun e!38764 () Bool)

(assert (=> b!58874 (= e!38764 (= (select (arr!1772 (_keys!3666 newMap!16)) (index!3008 lt!23718)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(declare-fun call!4367 () ListLongMap!1343)

(declare-fun c!7473 () Bool)

(declare-fun b!58875 () Bool)

(declare-fun call!4371 () ListLongMap!1343)

(declare-fun e!38759 () ListLongMap!1343)

(assert (=> b!58875 (= e!38759 (ite c!7473 call!4367 call!4371))))

(declare-fun call!4369 () ListLongMap!1343)

(declare-fun bm!4347 () Bool)

(declare-fun c!7472 () Bool)

(declare-fun +!80 (ListLongMap!1343 tuple2!2014) ListLongMap!1343)

(assert (=> bm!4347 (= call!4369 (+!80 e!38759 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun c!7469 () Bool)

(assert (=> bm!4347 (= c!7469 c!7472)))

(declare-fun bm!4348 () Bool)

(declare-fun call!4361 () ListLongMap!1343)

(assert (=> bm!4348 (= call!4361 (map!1108 newMap!16))))

(declare-fun bm!4349 () Bool)

(declare-fun call!4373 () ListLongMap!1343)

(declare-fun call!4362 () ListLongMap!1343)

(assert (=> bm!4349 (= call!4373 call!4362)))

(declare-fun bm!4350 () Bool)

(declare-fun call!4364 () ListLongMap!1343)

(assert (=> bm!4350 (= call!4367 call!4364)))

(declare-fun b!58877 () Bool)

(declare-fun e!38752 () Bool)

(declare-fun lt!23717 () SeekEntryResult!221)

(assert (=> b!58877 (= e!38752 ((_ is Undefined!221) lt!23717))))

(declare-fun b!58878 () Bool)

(declare-fun e!38765 () tuple2!2016)

(declare-fun e!38755 () tuple2!2016)

(assert (=> b!58878 (= e!38765 e!38755)))

(declare-fun lt!23716 () SeekEntryResult!221)

(declare-fun seekEntryOrOpen!0 ((_ BitVec 64) array!3703 (_ BitVec 32)) SeekEntryResult!221)

(assert (=> b!58878 (= lt!23716 (seekEntryOrOpen!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (_keys!3666 newMap!16) (mask!5926 newMap!16)))))

(declare-fun c!7461 () Bool)

(assert (=> b!58878 (= c!7461 ((_ is Undefined!221) lt!23716))))

(declare-fun b!58879 () Bool)

(declare-fun e!38767 () Unit!1547)

(declare-fun Unit!1552 () Unit!1547)

(assert (=> b!58879 (= e!38767 Unit!1552)))

(declare-fun lt!23707 () Unit!1547)

(declare-fun call!4372 () Unit!1547)

(assert (=> b!58879 (= lt!23707 call!4372)))

(declare-fun lt!23708 () SeekEntryResult!221)

(declare-fun call!4365 () SeekEntryResult!221)

(assert (=> b!58879 (= lt!23708 call!4365)))

(declare-fun res!32743 () Bool)

(assert (=> b!58879 (= res!32743 ((_ is Found!221) lt!23708))))

(declare-fun e!38756 () Bool)

(assert (=> b!58879 (=> (not res!32743) (not e!38756))))

(assert (=> b!58879 e!38756))

(declare-fun lt!23714 () Unit!1547)

(assert (=> b!58879 (= lt!23714 lt!23707)))

(assert (=> b!58879 false))

(declare-fun b!58880 () Bool)

(declare-fun call!4350 () Bool)

(assert (=> b!58880 (= e!38760 (not call!4350))))

(declare-fun b!58881 () Bool)

(declare-fun e!38753 () tuple2!2016)

(declare-fun e!38754 () tuple2!2016)

(assert (=> b!58881 (= e!38753 e!38754)))

(declare-fun c!7468 () Bool)

(assert (=> b!58881 (= c!7468 ((_ is MissingZero!221) lt!23716))))

(declare-fun b!58882 () Bool)

(declare-fun lt!23724 () Unit!1547)

(declare-fun lt!23720 () Unit!1547)

(assert (=> b!58882 (= lt!23724 lt!23720)))

(declare-fun call!4370 () ListLongMap!1343)

(assert (=> b!58882 (= call!4370 call!4371)))

(declare-fun lt!23725 () (_ BitVec 32))

(declare-fun lemmaChangeZeroKeyThenAddPairToListMap!15 (array!3703 array!3705 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 V!2841 Int) Unit!1547)

(assert (=> b!58882 (= lt!23720 (lemmaChangeZeroKeyThenAddPairToListMap!15 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) lt!23725 (zeroValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1958 newMap!16) (defaultEntry!2042 newMap!16)))))

(assert (=> b!58882 (= lt!23725 (bvor (extraKeys!1929 newMap!16) #b00000000000000000000000000000001))))

(declare-fun e!38761 () tuple2!2016)

(assert (=> b!58882 (= e!38761 (tuple2!2017 true (LongMapFixedSize!617 (defaultEntry!2042 newMap!16) (mask!5926 newMap!16) (bvor (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1958 newMap!16) (_size!357 newMap!16) (_keys!3666 newMap!16) (_values!2025 newMap!16) (_vacant!357 newMap!16))))))

(declare-fun b!58883 () Bool)

(declare-fun lt!23712 () tuple2!2016)

(assert (=> b!58883 (= e!38753 (tuple2!2017 (_1!1019 lt!23712) (_2!1019 lt!23712)))))

(declare-fun call!4363 () tuple2!2016)

(assert (=> b!58883 (= lt!23712 call!4363)))

(declare-fun b!58884 () Bool)

(declare-fun e!38750 () Bool)

(declare-fun e!38757 () Bool)

(assert (=> b!58884 (= e!38750 e!38757)))

(declare-fun c!7470 () Bool)

(declare-fun lt!23711 () tuple2!2016)

(assert (=> b!58884 (= c!7470 (_1!1019 lt!23711))))

(declare-fun bm!4351 () Bool)

(declare-fun call!4358 () SeekEntryResult!221)

(assert (=> bm!4351 (= call!4365 call!4358)))

(declare-fun b!58885 () Bool)

(declare-fun call!4351 () ListLongMap!1343)

(assert (=> b!58885 (= e!38757 (= call!4351 call!4361))))

(declare-fun b!58886 () Bool)

(declare-fun res!32744 () Bool)

(declare-fun call!4366 () Bool)

(assert (=> b!58886 (= res!32744 call!4366)))

(assert (=> b!58886 (=> (not res!32744) (not e!38756))))

(declare-fun lt!23700 () SeekEntryResult!221)

(declare-fun c!7460 () Bool)

(declare-fun c!7467 () Bool)

(declare-fun c!7465 () Bool)

(declare-fun c!7471 () Bool)

(declare-fun call!4357 () Bool)

(declare-fun bm!4352 () Bool)

(declare-fun inRange!0 ((_ BitVec 32) (_ BitVec 32)) Bool)

(assert (=> bm!4352 (= call!4357 (inRange!0 (ite c!7461 (ite c!7465 (index!3008 lt!23708) (ite c!7460 (index!3007 lt!23717) (index!3010 lt!23717))) (ite c!7467 (index!3008 lt!23718) (ite c!7471 (index!3007 lt!23700) (index!3010 lt!23700)))) (mask!5926 newMap!16)))))

(declare-fun b!58887 () Bool)

(declare-fun e!38751 () Unit!1547)

(declare-fun Unit!1553 () Unit!1547)

(assert (=> b!58887 (= e!38751 Unit!1553)))

(declare-fun lt!23704 () Unit!1547)

(declare-fun call!4355 () Unit!1547)

(assert (=> b!58887 (= lt!23704 call!4355)))

(declare-fun call!4354 () SeekEntryResult!221)

(assert (=> b!58887 (= lt!23700 call!4354)))

(assert (=> b!58887 (= c!7471 ((_ is MissingZero!221) lt!23700))))

(declare-fun e!38763 () Bool)

(assert (=> b!58887 e!38763))

(declare-fun lt!23701 () Unit!1547)

(assert (=> b!58887 (= lt!23701 lt!23704)))

(assert (=> b!58887 false))

(declare-fun bm!4353 () Bool)

(assert (=> bm!4353 (= call!4370 call!4369)))

(declare-fun bm!4354 () Bool)

(assert (=> bm!4354 (= call!4354 call!4358)))

(declare-fun b!58888 () Bool)

(declare-fun lt!23715 () Unit!1547)

(assert (=> b!58888 (= e!38767 lt!23715)))

(assert (=> b!58888 (= lt!23715 call!4355)))

(assert (=> b!58888 (= lt!23717 call!4365)))

(assert (=> b!58888 (= c!7460 ((_ is MissingZero!221) lt!23717))))

(declare-fun e!38768 () Bool)

(assert (=> b!58888 e!38768))

(declare-fun b!58889 () Bool)

(declare-fun c!7466 () Bool)

(assert (=> b!58889 (= c!7466 ((_ is MissingVacant!221) lt!23700))))

(assert (=> b!58889 (= e!38763 e!38748)))

(declare-fun bm!4355 () Bool)

(declare-fun lt!23721 () (_ BitVec 32))

(declare-fun lt!23706 () array!3705)

(assert (=> bm!4355 (= call!4364 (getCurrentListMap!388 (_keys!3666 newMap!16) (ite c!7472 (_values!2025 newMap!16) lt!23706) (mask!5926 newMap!16) (ite c!7472 (ite c!7473 (extraKeys!1929 newMap!16) lt!23721) (extraKeys!1929 newMap!16)) (zeroValue!1958 newMap!16) (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun b!58890 () Bool)

(declare-fun res!32745 () Bool)

(declare-fun e!38749 () Bool)

(assert (=> b!58890 (=> (not res!32745) (not e!38749))))

(assert (=> b!58890 (= res!32745 (= (select (arr!1772 (_keys!3666 newMap!16)) (index!3007 lt!23700)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4356 () Bool)

(assert (=> bm!4356 (= call!4371 call!4362)))

(declare-fun d!11207 () Bool)

(assert (=> d!11207 e!38750))

(declare-fun res!32751 () Bool)

(assert (=> d!11207 (=> (not res!32751) (not e!38750))))

(assert (=> d!11207 (= res!32751 (valid!263 (_2!1019 lt!23711)))))

(assert (=> d!11207 (= lt!23711 e!38765)))

(assert (=> d!11207 (= c!7472 (= (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (bvneg (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355))))))

(assert (=> d!11207 (valid!263 newMap!16)))

(assert (=> d!11207 (= (update!86 newMap!16 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) lt!23711)))

(declare-fun b!58876 () Bool)

(assert (=> b!58876 (= e!38749 (not call!4350))))

(declare-fun b!58891 () Bool)

(assert (=> b!58891 (= e!38765 e!38761)))

(assert (=> b!58891 (= c!7473 (= (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58892 () Bool)

(assert (=> b!58892 (= e!38759 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun bm!4357 () Bool)

(declare-fun call!4368 () Bool)

(assert (=> bm!4357 (= call!4350 call!4368)))

(declare-fun b!58893 () Bool)

(declare-fun lt!23726 () Unit!1547)

(assert (=> b!58893 (= lt!23726 e!38767)))

(declare-fun call!4360 () Bool)

(assert (=> b!58893 (= c!7465 call!4360)))

(assert (=> b!58893 (= e!38755 (tuple2!2017 false newMap!16))))

(declare-fun bm!4358 () Bool)

(declare-fun call!4359 () Bool)

(assert (=> bm!4358 (= call!4359 call!4368)))

(declare-fun bm!4359 () Bool)

(declare-fun call!4352 () Bool)

(assert (=> bm!4359 (= call!4352 call!4357)))

(declare-fun bm!4360 () Bool)

(declare-fun lemmaInListMapThenSeekEntryOrOpenFindsIt!15 (array!3703 array!3705 (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 (_ BitVec 64) Int) Unit!1547)

(assert (=> bm!4360 (= call!4372 (lemmaInListMapThenSeekEntryOrOpenFindsIt!15 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (defaultEntry!2042 newMap!16)))))

(declare-fun b!58894 () Bool)

(assert (=> b!58894 (= e!38756 (= (select (arr!1772 (_keys!3666 newMap!16)) (index!3008 lt!23708)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(declare-fun bm!4361 () Bool)

(assert (=> bm!4361 (= call!4351 (map!1108 (_2!1019 lt!23711)))))

(declare-fun b!58895 () Bool)

(declare-fun e!38747 () ListLongMap!1343)

(assert (=> b!58895 (= e!38747 call!4364)))

(declare-fun b!58896 () Bool)

(declare-fun c!7462 () Bool)

(assert (=> b!58896 (= c!7462 ((_ is MissingVacant!221) lt!23717))))

(assert (=> b!58896 (= e!38768 e!38752)))

(declare-fun b!58897 () Bool)

(declare-fun res!32748 () Bool)

(assert (=> b!58897 (= res!32748 (= (select (arr!1772 (_keys!3666 newMap!16)) (index!3010 lt!23717)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!38762 () Bool)

(assert (=> b!58897 (=> (not res!32748) (not e!38762))))

(declare-fun b!58898 () Bool)

(declare-fun lt!23710 () Unit!1547)

(assert (=> b!58898 (= e!38751 lt!23710)))

(assert (=> b!58898 (= lt!23710 call!4372)))

(assert (=> b!58898 (= lt!23718 call!4354)))

(declare-fun res!32750 () Bool)

(assert (=> b!58898 (= res!32750 ((_ is Found!221) lt!23718))))

(assert (=> b!58898 (=> (not res!32750) (not e!38764))))

(assert (=> b!58898 e!38764))

(declare-fun b!58899 () Bool)

(declare-fun e!38758 () Bool)

(assert (=> b!58899 (= e!38758 (= call!4351 (+!80 call!4361 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!58900 () Bool)

(assert (=> b!58900 (= e!38748 ((_ is Undefined!221) lt!23700))))

(declare-fun b!58901 () Bool)

(declare-fun res!32742 () Bool)

(declare-fun e!38766 () Bool)

(assert (=> b!58901 (=> (not res!32742) (not e!38766))))

(declare-fun call!4356 () Bool)

(assert (=> b!58901 (= res!32742 call!4356)))

(assert (=> b!58901 (= e!38768 e!38766)))

(declare-fun b!58902 () Bool)

(assert (=> b!58902 (= e!38757 e!38758)))

(declare-fun res!32749 () Bool)

(assert (=> b!58902 (= res!32749 (contains!678 call!4351 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(assert (=> b!58902 (=> (not res!32749) (not e!38758))))

(declare-fun b!58903 () Bool)

(declare-fun lt!23722 () Unit!1547)

(declare-fun lt!23703 () Unit!1547)

(assert (=> b!58903 (= lt!23722 lt!23703)))

(assert (=> b!58903 (= call!4370 call!4367)))

(declare-fun lemmaChangeLongMinValueKeyThenAddPairToListMap!15 (array!3703 array!3705 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 V!2841 Int) Unit!1547)

(assert (=> b!58903 (= lt!23703 (lemmaChangeLongMinValueKeyThenAddPairToListMap!15 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) lt!23721 (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2042 newMap!16)))))

(assert (=> b!58903 (= lt!23721 (bvor (extraKeys!1929 newMap!16) #b00000000000000000000000000000010))))

(assert (=> b!58903 (= e!38761 (tuple2!2017 true (LongMapFixedSize!617 (defaultEntry!2042 newMap!16) (mask!5926 newMap!16) (bvor (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) (zeroValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (_size!357 newMap!16) (_keys!3666 newMap!16) (_values!2025 newMap!16) (_vacant!357 newMap!16))))))

(declare-fun b!58904 () Bool)

(declare-fun lt!23709 () tuple2!2016)

(assert (=> b!58904 (= lt!23709 call!4363)))

(assert (=> b!58904 (= e!38754 (tuple2!2017 (_1!1019 lt!23709) (_2!1019 lt!23709)))))

(declare-fun bm!4362 () Bool)

(declare-fun c!7463 () Bool)

(assert (=> bm!4362 (= c!7463 c!7461)))

(assert (=> bm!4362 (= call!4360 (contains!678 e!38747 (ite c!7461 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (select (arr!1772 (_keys!3666 newMap!16)) (index!3008 lt!23716)))))))

(declare-fun b!58905 () Bool)

(declare-fun res!32741 () Bool)

(assert (=> b!58905 (= res!32741 call!4352)))

(assert (=> b!58905 (=> (not res!32741) (not e!38764))))

(declare-fun b!58906 () Bool)

(declare-fun res!32747 () Bool)

(assert (=> b!58906 (= res!32747 (= (select (arr!1772 (_keys!3666 newMap!16)) (index!3010 lt!23700)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!58906 (=> (not res!32747) (not e!38760))))

(declare-fun b!58907 () Bool)

(assert (=> b!58907 (= e!38747 call!4373)))

(declare-fun b!58908 () Bool)

(assert (=> b!58908 (= e!38752 e!38762)))

(declare-fun res!32740 () Bool)

(assert (=> b!58908 (= res!32740 call!4356)))

(assert (=> b!58908 (=> (not res!32740) (not e!38762))))

(declare-fun b!58909 () Bool)

(assert (=> b!58909 (= e!38762 (not call!4359))))

(declare-fun b!58910 () Bool)

(declare-fun res!32738 () Bool)

(assert (=> b!58910 (=> (not res!32738) (not e!38766))))

(assert (=> b!58910 (= res!32738 (= (select (arr!1772 (_keys!3666 newMap!16)) (index!3007 lt!23717)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58911 () Bool)

(declare-fun lt!23713 () Unit!1547)

(declare-fun lt!23702 () Unit!1547)

(assert (=> b!58911 (= lt!23713 lt!23702)))

(assert (=> b!58911 call!4360))

(declare-fun lemmaValidKeyInArrayIsInListMap!75 (array!3703 array!3705 (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 (_ BitVec 32) Int) Unit!1547)

(assert (=> b!58911 (= lt!23702 (lemmaValidKeyInArrayIsInListMap!75 (_keys!3666 newMap!16) lt!23706 (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (index!3008 lt!23716) (defaultEntry!2042 newMap!16)))))

(assert (=> b!58911 (= lt!23706 (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (index!3008 lt!23716) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16))))))

(declare-fun lt!23705 () Unit!1547)

(declare-fun lt!23719 () Unit!1547)

(assert (=> b!58911 (= lt!23705 lt!23719)))

(assert (=> b!58911 (= call!4369 call!4373)))

(declare-fun lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!15 (array!3703 array!3705 (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 (_ BitVec 32) (_ BitVec 64) V!2841 Int) Unit!1547)

(assert (=> b!58911 (= lt!23719 (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!15 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (index!3008 lt!23716) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2042 newMap!16)))))

(declare-fun lt!23723 () Unit!1547)

(assert (=> b!58911 (= lt!23723 e!38751)))

(assert (=> b!58911 (= c!7467 (contains!678 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(assert (=> b!58911 (= e!38754 (tuple2!2017 true (LongMapFixedSize!617 (defaultEntry!2042 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (_size!357 newMap!16) (_keys!3666 newMap!16) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (index!3008 lt!23716) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16))) (_vacant!357 newMap!16))))))

(declare-fun bm!4363 () Bool)

(assert (=> bm!4363 (= call!4366 call!4357)))

(declare-fun bm!4364 () Bool)

(declare-fun lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!15 (array!3703 array!3705 (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 (_ BitVec 64) Int) Unit!1547)

(assert (=> bm!4364 (= call!4355 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!15 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (defaultEntry!2042 newMap!16)))))

(declare-fun bm!4365 () Bool)

(assert (=> bm!4365 (= call!4358 (seekEntryOrOpen!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (_keys!3666 newMap!16) (mask!5926 newMap!16)))))

(declare-fun bm!4366 () Bool)

(assert (=> bm!4366 (= call!4353 call!4352)))

(declare-fun bm!4367 () Bool)

(assert (=> bm!4367 (= call!4368 (arrayContainsKey!0 (_keys!3666 newMap!16) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!58912 () Bool)

(declare-fun res!32746 () Bool)

(assert (=> b!58912 (=> (not res!32746) (not e!38749))))

(assert (=> b!58912 (= res!32746 call!4353)))

(assert (=> b!58912 (= e!38763 e!38749)))

(declare-fun bm!4368 () Bool)

(assert (=> bm!4368 (= call!4362 (getCurrentListMap!388 (_keys!3666 newMap!16) (ite (or c!7472 c!7461) (_values!2025 newMap!16) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (index!3008 lt!23716) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16)))) (mask!5926 newMap!16) (ite (and c!7472 c!7473) lt!23725 (extraKeys!1929 newMap!16)) (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun b!58913 () Bool)

(assert (=> b!58913 (= e!38766 (not call!4359))))

(declare-fun bm!4369 () Bool)

(assert (=> bm!4369 (= call!4356 call!4366)))

(declare-fun bm!4370 () Bool)

(declare-fun c!7464 () Bool)

(declare-fun updateHelperNewKey!15 (LongMapFixedSize!616 (_ BitVec 64) V!2841 (_ BitVec 32)) tuple2!2016)

(assert (=> bm!4370 (= call!4363 (updateHelperNewKey!15 newMap!16 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716))))))

(declare-fun b!58914 () Bool)

(assert (=> b!58914 (= c!7464 ((_ is MissingVacant!221) lt!23716))))

(assert (=> b!58914 (= e!38755 e!38753)))

(assert (= (and d!11207 c!7472) b!58891))

(assert (= (and d!11207 (not c!7472)) b!58878))

(assert (= (and b!58891 c!7473) b!58882))

(assert (= (and b!58891 (not c!7473)) b!58903))

(assert (= (or b!58882 b!58903) bm!4350))

(assert (= (or b!58882 b!58903) bm!4356))

(assert (= (or b!58882 b!58903) bm!4353))

(assert (= (and b!58878 c!7461) b!58893))

(assert (= (and b!58878 (not c!7461)) b!58914))

(assert (= (and b!58893 c!7465) b!58879))

(assert (= (and b!58893 (not c!7465)) b!58888))

(assert (= (and b!58879 res!32743) b!58886))

(assert (= (and b!58886 res!32744) b!58894))

(assert (= (and b!58888 c!7460) b!58901))

(assert (= (and b!58888 (not c!7460)) b!58896))

(assert (= (and b!58901 res!32742) b!58910))

(assert (= (and b!58910 res!32738) b!58913))

(assert (= (and b!58896 c!7462) b!58908))

(assert (= (and b!58896 (not c!7462)) b!58877))

(assert (= (and b!58908 res!32740) b!58897))

(assert (= (and b!58897 res!32748) b!58909))

(assert (= (or b!58901 b!58908) bm!4369))

(assert (= (or b!58913 b!58909) bm!4358))

(assert (= (or b!58886 bm!4369) bm!4363))

(assert (= (or b!58879 b!58888) bm!4351))

(assert (= (and b!58914 c!7464) b!58883))

(assert (= (and b!58914 (not c!7464)) b!58881))

(assert (= (and b!58881 c!7468) b!58904))

(assert (= (and b!58881 (not c!7468)) b!58911))

(assert (= (and b!58911 c!7467) b!58898))

(assert (= (and b!58911 (not c!7467)) b!58887))

(assert (= (and b!58898 res!32750) b!58905))

(assert (= (and b!58905 res!32741) b!58874))

(assert (= (and b!58887 c!7471) b!58912))

(assert (= (and b!58887 (not c!7471)) b!58889))

(assert (= (and b!58912 res!32746) b!58890))

(assert (= (and b!58890 res!32745) b!58876))

(assert (= (and b!58889 c!7466) b!58873))

(assert (= (and b!58889 (not c!7466)) b!58900))

(assert (= (and b!58873 res!32739) b!58906))

(assert (= (and b!58906 res!32747) b!58880))

(assert (= (or b!58912 b!58873) bm!4366))

(assert (= (or b!58876 b!58880) bm!4357))

(assert (= (or b!58905 bm!4366) bm!4359))

(assert (= (or b!58898 b!58887) bm!4354))

(assert (= (or b!58883 b!58904) bm!4370))

(assert (= (or bm!4358 bm!4357) bm!4367))

(assert (= (or b!58879 b!58898) bm!4360))

(assert (= (or b!58888 b!58887) bm!4364))

(assert (= (or bm!4351 bm!4354) bm!4365))

(assert (= (or b!58893 b!58911) bm!4349))

(assert (= (or bm!4363 bm!4359) bm!4352))

(assert (= (or b!58893 b!58911) bm!4362))

(assert (= (and bm!4362 c!7463) b!58907))

(assert (= (and bm!4362 (not c!7463)) b!58895))

(assert (= (or bm!4350 b!58895) bm!4355))

(assert (= (or bm!4356 bm!4349) bm!4368))

(assert (= (or bm!4353 b!58911) bm!4347))

(assert (= (and bm!4347 c!7469) b!58875))

(assert (= (and bm!4347 (not c!7469)) b!58892))

(assert (= (and d!11207 res!32751) b!58884))

(assert (= (and b!58884 c!7470) b!58902))

(assert (= (and b!58884 (not c!7470)) b!58885))

(assert (= (and b!58902 res!32749) b!58899))

(assert (= (or b!58902 b!58899 b!58885) bm!4361))

(assert (= (or b!58899 b!58885) bm!4348))

(assert (=> bm!4370 m!50367))

(assert (=> bm!4370 m!50395))

(declare-fun m!50501 () Bool)

(assert (=> bm!4370 m!50501))

(assert (=> b!58902 m!50367))

(declare-fun m!50503 () Bool)

(assert (=> b!58902 m!50503))

(declare-fun m!50505 () Bool)

(assert (=> b!58910 m!50505))

(declare-fun m!50507 () Bool)

(assert (=> b!58897 m!50507))

(declare-fun m!50509 () Bool)

(assert (=> b!58892 m!50509))

(assert (=> bm!4367 m!50367))

(declare-fun m!50511 () Bool)

(assert (=> bm!4367 m!50511))

(declare-fun m!50513 () Bool)

(assert (=> b!58899 m!50513))

(declare-fun m!50515 () Bool)

(assert (=> bm!4347 m!50515))

(declare-fun m!50517 () Bool)

(assert (=> b!58890 m!50517))

(assert (=> bm!4360 m!50367))

(declare-fun m!50519 () Bool)

(assert (=> bm!4360 m!50519))

(declare-fun m!50521 () Bool)

(assert (=> bm!4361 m!50521))

(declare-fun m!50523 () Bool)

(assert (=> b!58894 m!50523))

(assert (=> b!58878 m!50367))

(declare-fun m!50525 () Bool)

(assert (=> b!58878 m!50525))

(assert (=> bm!4364 m!50367))

(declare-fun m!50527 () Bool)

(assert (=> bm!4364 m!50527))

(assert (=> bm!4348 m!50379))

(declare-fun m!50529 () Bool)

(assert (=> b!58906 m!50529))

(assert (=> b!58882 m!50395))

(declare-fun m!50531 () Bool)

(assert (=> b!58882 m!50531))

(declare-fun m!50533 () Bool)

(assert (=> b!58874 m!50533))

(declare-fun m!50535 () Bool)

(assert (=> bm!4352 m!50535))

(declare-fun m!50537 () Bool)

(assert (=> d!11207 m!50537))

(assert (=> d!11207 m!50385))

(declare-fun m!50539 () Bool)

(assert (=> bm!4362 m!50539))

(declare-fun m!50541 () Bool)

(assert (=> bm!4362 m!50541))

(assert (=> b!58903 m!50395))

(declare-fun m!50543 () Bool)

(assert (=> b!58903 m!50543))

(assert (=> bm!4365 m!50367))

(assert (=> bm!4365 m!50525))

(declare-fun m!50545 () Bool)

(assert (=> bm!4368 m!50545))

(declare-fun m!50547 () Bool)

(assert (=> bm!4368 m!50547))

(declare-fun m!50549 () Bool)

(assert (=> bm!4355 m!50549))

(assert (=> b!58911 m!50367))

(assert (=> b!58911 m!50395))

(declare-fun m!50551 () Bool)

(assert (=> b!58911 m!50551))

(assert (=> b!58911 m!50509))

(assert (=> b!58911 m!50367))

(declare-fun m!50553 () Bool)

(assert (=> b!58911 m!50553))

(assert (=> b!58911 m!50545))

(assert (=> b!58911 m!50509))

(declare-fun m!50555 () Bool)

(assert (=> b!58911 m!50555))

(assert (=> b!58659 d!11207))

(declare-fun d!11209 () Bool)

(declare-fun c!7476 () Bool)

(assert (=> d!11209 (= c!7476 ((_ is ValueCellFull!854) (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(declare-fun e!38771 () V!2841)

(assert (=> d!11209 (= (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!38771)))

(declare-fun b!58919 () Bool)

(declare-fun get!1073 (ValueCell!854 V!2841) V!2841)

(assert (=> b!58919 (= e!38771 (get!1073 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!58920 () Bool)

(declare-fun get!1074 (ValueCell!854 V!2841) V!2841)

(assert (=> b!58920 (= e!38771 (get!1074 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11209 c!7476) b!58919))

(assert (= (and d!11209 (not c!7476)) b!58920))

(assert (=> b!58919 m!50391))

(assert (=> b!58919 m!50393))

(declare-fun m!50557 () Bool)

(assert (=> b!58919 m!50557))

(assert (=> b!58920 m!50391))

(assert (=> b!58920 m!50393))

(declare-fun m!50559 () Bool)

(assert (=> b!58920 m!50559))

(assert (=> b!58659 d!11209))

(declare-fun d!11211 () Bool)

(declare-fun res!32758 () Bool)

(declare-fun e!38774 () Bool)

(assert (=> d!11211 (=> (not res!32758) (not e!38774))))

(declare-fun simpleValid!42 (LongMapFixedSize!616) Bool)

(assert (=> d!11211 (= res!32758 (simpleValid!42 newMap!16))))

(assert (=> d!11211 (= (valid!263 newMap!16) e!38774)))

(declare-fun b!58927 () Bool)

(declare-fun res!32759 () Bool)

(assert (=> b!58927 (=> (not res!32759) (not e!38774))))

(declare-fun arrayCountValidKeys!0 (array!3703 (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!58927 (= res!32759 (= (arrayCountValidKeys!0 (_keys!3666 newMap!16) #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))) (_size!357 newMap!16)))))

(declare-fun b!58928 () Bool)

(declare-fun res!32760 () Bool)

(assert (=> b!58928 (=> (not res!32760) (not e!38774))))

(declare-fun arrayForallSeekEntryOrOpenFound!0 ((_ BitVec 32) array!3703 (_ BitVec 32)) Bool)

(assert (=> b!58928 (= res!32760 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3666 newMap!16) (mask!5926 newMap!16)))))

(declare-fun b!58929 () Bool)

(assert (=> b!58929 (= e!38774 (arrayNoDuplicates!0 (_keys!3666 newMap!16) #b00000000000000000000000000000000 Nil!1419))))

(assert (= (and d!11211 res!32758) b!58927))

(assert (= (and b!58927 res!32759) b!58928))

(assert (= (and b!58928 res!32760) b!58929))

(declare-fun m!50561 () Bool)

(assert (=> d!11211 m!50561))

(declare-fun m!50563 () Bool)

(assert (=> b!58927 m!50563))

(declare-fun m!50565 () Bool)

(assert (=> b!58928 m!50565))

(declare-fun m!50567 () Bool)

(assert (=> b!58929 m!50567))

(assert (=> b!58655 d!11211))

(declare-fun d!11213 () Bool)

(assert (=> d!11213 (= (valid!262 thiss!992) (valid!263 (v!2382 (underlying!225 thiss!992))))))

(declare-fun bs!2551 () Bool)

(assert (= bs!2551 d!11213))

(declare-fun m!50569 () Bool)

(assert (=> bs!2551 m!50569))

(assert (=> start!8572 d!11213))

(declare-fun d!11215 () Bool)

(assert (=> d!11215 (= (map!1108 newMap!16) (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun bs!2552 () Bool)

(assert (= bs!2552 d!11215))

(assert (=> bs!2552 m!50509))

(assert (=> b!58656 d!11215))

(declare-fun bm!4385 () Bool)

(declare-fun call!4391 () ListLongMap!1343)

(declare-fun call!4388 () ListLongMap!1343)

(assert (=> bm!4385 (= call!4391 call!4388)))

(declare-fun b!58972 () Bool)

(declare-fun c!7489 () Bool)

(assert (=> b!58972 (= c!7489 (and (not (= (bvand (extraKeys!1929 (v!2382 (underlying!225 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1929 (v!2382 (underlying!225 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!38805 () ListLongMap!1343)

(declare-fun e!38811 () ListLongMap!1343)

(assert (=> b!58972 (= e!38805 e!38811)))

(declare-fun b!58973 () Bool)

(declare-fun e!38812 () Bool)

(declare-fun call!4389 () Bool)

(assert (=> b!58973 (= e!38812 (not call!4389))))

(declare-fun bm!4386 () Bool)

(declare-fun call!4390 () ListLongMap!1343)

(declare-fun getCurrentListMapNoExtraKeys!44 (array!3703 array!3705 (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 (_ BitVec 32) Int) ListLongMap!1343)

(assert (=> bm!4386 (= call!4390 (getCurrentListMapNoExtraKeys!44 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (_values!2025 (v!2382 (underlying!225 thiss!992))) (mask!5926 (v!2382 (underlying!225 thiss!992))) (extraKeys!1929 (v!2382 (underlying!225 thiss!992))) (zeroValue!1958 (v!2382 (underlying!225 thiss!992))) (minValue!1958 (v!2382 (underlying!225 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2042 (v!2382 (underlying!225 thiss!992)))))))

(declare-fun b!58974 () Bool)

(declare-fun e!38803 () Bool)

(declare-fun e!38810 () Bool)

(assert (=> b!58974 (= e!38803 e!38810)))

(declare-fun res!32779 () Bool)

(declare-fun call!4393 () Bool)

(assert (=> b!58974 (= res!32779 call!4393)))

(assert (=> b!58974 (=> (not res!32779) (not e!38810))))

(declare-fun b!58975 () Bool)

(declare-fun e!38806 () Bool)

(declare-fun e!38809 () Bool)

(assert (=> b!58975 (= e!38806 e!38809)))

(declare-fun res!32787 () Bool)

(assert (=> b!58975 (=> (not res!32787) (not e!38809))))

(declare-fun lt!23783 () ListLongMap!1343)

(assert (=> b!58975 (= res!32787 (contains!678 lt!23783 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!58975 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992))))))))

(declare-fun b!58976 () Bool)

(declare-fun e!38813 () ListLongMap!1343)

(assert (=> b!58976 (= e!38813 e!38805)))

(declare-fun c!7493 () Bool)

(assert (=> b!58976 (= c!7493 (and (not (= (bvand (extraKeys!1929 (v!2382 (underlying!225 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1929 (v!2382 (underlying!225 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun d!11217 () Bool)

(declare-fun e!38801 () Bool)

(assert (=> d!11217 e!38801))

(declare-fun res!32783 () Bool)

(assert (=> d!11217 (=> (not res!32783) (not e!38801))))

(assert (=> d!11217 (= res!32783 (or (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992))))) (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992))))))))))

(declare-fun lt!23791 () ListLongMap!1343)

(assert (=> d!11217 (= lt!23783 lt!23791)))

(declare-fun lt!23773 () Unit!1547)

(declare-fun e!38804 () Unit!1547)

(assert (=> d!11217 (= lt!23773 e!38804)))

(declare-fun c!7494 () Bool)

(declare-fun e!38808 () Bool)

(assert (=> d!11217 (= c!7494 e!38808)))

(declare-fun res!32784 () Bool)

(assert (=> d!11217 (=> (not res!32784) (not e!38808))))

(assert (=> d!11217 (= res!32784 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992))))))))

(assert (=> d!11217 (= lt!23791 e!38813)))

(declare-fun c!7491 () Bool)

(assert (=> d!11217 (= c!7491 (and (not (= (bvand (extraKeys!1929 (v!2382 (underlying!225 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1929 (v!2382 (underlying!225 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11217 (validMask!0 (mask!5926 (v!2382 (underlying!225 thiss!992))))))

(assert (=> d!11217 (= (getCurrentListMap!388 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (_values!2025 (v!2382 (underlying!225 thiss!992))) (mask!5926 (v!2382 (underlying!225 thiss!992))) (extraKeys!1929 (v!2382 (underlying!225 thiss!992))) (zeroValue!1958 (v!2382 (underlying!225 thiss!992))) (minValue!1958 (v!2382 (underlying!225 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2042 (v!2382 (underlying!225 thiss!992)))) lt!23783)))

(declare-fun b!58977 () Bool)

(declare-fun lt!23772 () Unit!1547)

(assert (=> b!58977 (= e!38804 lt!23772)))

(declare-fun lt!23775 () ListLongMap!1343)

(assert (=> b!58977 (= lt!23775 (getCurrentListMapNoExtraKeys!44 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (_values!2025 (v!2382 (underlying!225 thiss!992))) (mask!5926 (v!2382 (underlying!225 thiss!992))) (extraKeys!1929 (v!2382 (underlying!225 thiss!992))) (zeroValue!1958 (v!2382 (underlying!225 thiss!992))) (minValue!1958 (v!2382 (underlying!225 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2042 (v!2382 (underlying!225 thiss!992)))))))

(declare-fun lt!23789 () (_ BitVec 64))

(assert (=> b!58977 (= lt!23789 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23782 () (_ BitVec 64))

(assert (=> b!58977 (= lt!23782 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!23771 () Unit!1547)

(declare-fun addStillContains!42 (ListLongMap!1343 (_ BitVec 64) V!2841 (_ BitVec 64)) Unit!1547)

(assert (=> b!58977 (= lt!23771 (addStillContains!42 lt!23775 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))) lt!23782))))

(assert (=> b!58977 (contains!678 (+!80 lt!23775 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))) lt!23782)))

(declare-fun lt!23774 () Unit!1547)

(assert (=> b!58977 (= lt!23774 lt!23771)))

(declare-fun lt!23788 () ListLongMap!1343)

(assert (=> b!58977 (= lt!23788 (getCurrentListMapNoExtraKeys!44 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (_values!2025 (v!2382 (underlying!225 thiss!992))) (mask!5926 (v!2382 (underlying!225 thiss!992))) (extraKeys!1929 (v!2382 (underlying!225 thiss!992))) (zeroValue!1958 (v!2382 (underlying!225 thiss!992))) (minValue!1958 (v!2382 (underlying!225 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2042 (v!2382 (underlying!225 thiss!992)))))))

(declare-fun lt!23777 () (_ BitVec 64))

(assert (=> b!58977 (= lt!23777 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23778 () (_ BitVec 64))

(assert (=> b!58977 (= lt!23778 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!23790 () Unit!1547)

(declare-fun addApplyDifferent!42 (ListLongMap!1343 (_ BitVec 64) V!2841 (_ BitVec 64)) Unit!1547)

(assert (=> b!58977 (= lt!23790 (addApplyDifferent!42 lt!23788 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992))) lt!23778))))

(declare-fun apply!66 (ListLongMap!1343 (_ BitVec 64)) V!2841)

(assert (=> b!58977 (= (apply!66 (+!80 lt!23788 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) lt!23778) (apply!66 lt!23788 lt!23778))))

(declare-fun lt!23780 () Unit!1547)

(assert (=> b!58977 (= lt!23780 lt!23790)))

(declare-fun lt!23781 () ListLongMap!1343)

(assert (=> b!58977 (= lt!23781 (getCurrentListMapNoExtraKeys!44 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (_values!2025 (v!2382 (underlying!225 thiss!992))) (mask!5926 (v!2382 (underlying!225 thiss!992))) (extraKeys!1929 (v!2382 (underlying!225 thiss!992))) (zeroValue!1958 (v!2382 (underlying!225 thiss!992))) (minValue!1958 (v!2382 (underlying!225 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2042 (v!2382 (underlying!225 thiss!992)))))))

(declare-fun lt!23787 () (_ BitVec 64))

(assert (=> b!58977 (= lt!23787 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23779 () (_ BitVec 64))

(assert (=> b!58977 (= lt!23779 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!23792 () Unit!1547)

(assert (=> b!58977 (= lt!23792 (addApplyDifferent!42 lt!23781 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))) lt!23779))))

(assert (=> b!58977 (= (apply!66 (+!80 lt!23781 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))) lt!23779) (apply!66 lt!23781 lt!23779))))

(declare-fun lt!23785 () Unit!1547)

(assert (=> b!58977 (= lt!23785 lt!23792)))

(declare-fun lt!23776 () ListLongMap!1343)

(assert (=> b!58977 (= lt!23776 (getCurrentListMapNoExtraKeys!44 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (_values!2025 (v!2382 (underlying!225 thiss!992))) (mask!5926 (v!2382 (underlying!225 thiss!992))) (extraKeys!1929 (v!2382 (underlying!225 thiss!992))) (zeroValue!1958 (v!2382 (underlying!225 thiss!992))) (minValue!1958 (v!2382 (underlying!225 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2042 (v!2382 (underlying!225 thiss!992)))))))

(declare-fun lt!23784 () (_ BitVec 64))

(assert (=> b!58977 (= lt!23784 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23786 () (_ BitVec 64))

(assert (=> b!58977 (= lt!23786 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!58977 (= lt!23772 (addApplyDifferent!42 lt!23776 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992))) lt!23786))))

(assert (=> b!58977 (= (apply!66 (+!80 lt!23776 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) lt!23786) (apply!66 lt!23776 lt!23786))))

(declare-fun b!58978 () Bool)

(assert (=> b!58978 (= e!38811 call!4391)))

(declare-fun b!58979 () Bool)

(declare-fun call!4394 () ListLongMap!1343)

(assert (=> b!58979 (= e!38811 call!4394)))

(declare-fun bm!4387 () Bool)

(assert (=> bm!4387 (= call!4388 call!4390)))

(declare-fun call!4392 () ListLongMap!1343)

(declare-fun bm!4388 () Bool)

(assert (=> bm!4388 (= call!4392 (+!80 (ite c!7491 call!4390 (ite c!7493 call!4388 call!4391)) (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun b!58980 () Bool)

(assert (=> b!58980 (= e!38810 (= (apply!66 lt!23783 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))

(declare-fun b!58981 () Bool)

(assert (=> b!58981 (= e!38813 (+!80 call!4392 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))

(declare-fun b!58982 () Bool)

(assert (=> b!58982 (= e!38805 call!4394)))

(declare-fun b!58983 () Bool)

(declare-fun res!32781 () Bool)

(assert (=> b!58983 (=> (not res!32781) (not e!38801))))

(assert (=> b!58983 (= res!32781 e!38803)))

(declare-fun c!7490 () Bool)

(assert (=> b!58983 (= c!7490 (not (= (bvand (extraKeys!1929 (v!2382 (underlying!225 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!58984 () Bool)

(assert (=> b!58984 (= e!38809 (= (apply!66 lt!23783 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!58984 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2003 (_values!2025 (v!2382 (underlying!225 thiss!992))))))))

(assert (=> b!58984 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992))))))))

(declare-fun b!58985 () Bool)

(declare-fun e!38807 () Bool)

(assert (=> b!58985 (= e!38812 e!38807)))

(declare-fun res!32780 () Bool)

(assert (=> b!58985 (= res!32780 call!4389)))

(assert (=> b!58985 (=> (not res!32780) (not e!38807))))

(declare-fun bm!4389 () Bool)

(assert (=> bm!4389 (= call!4394 call!4392)))

(declare-fun b!58986 () Bool)

(assert (=> b!58986 (= e!38803 (not call!4393))))

(declare-fun bm!4390 () Bool)

(assert (=> bm!4390 (= call!4389 (contains!678 lt!23783 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4391 () Bool)

(assert (=> bm!4391 (= call!4393 (contains!678 lt!23783 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58987 () Bool)

(declare-fun e!38802 () Bool)

(declare-fun validKeyInArray!0 ((_ BitVec 64)) Bool)

(assert (=> b!58987 (= e!38802 (validKeyInArray!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!58988 () Bool)

(declare-fun Unit!1554 () Unit!1547)

(assert (=> b!58988 (= e!38804 Unit!1554)))

(declare-fun b!58989 () Bool)

(assert (=> b!58989 (= e!38801 e!38812)))

(declare-fun c!7492 () Bool)

(assert (=> b!58989 (= c!7492 (not (= (bvand (extraKeys!1929 (v!2382 (underlying!225 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!58990 () Bool)

(assert (=> b!58990 (= e!38807 (= (apply!66 lt!23783 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))

(declare-fun b!58991 () Bool)

(assert (=> b!58991 (= e!38808 (validKeyInArray!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!58992 () Bool)

(declare-fun res!32786 () Bool)

(assert (=> b!58992 (=> (not res!32786) (not e!38801))))

(assert (=> b!58992 (= res!32786 e!38806)))

(declare-fun res!32782 () Bool)

(assert (=> b!58992 (=> res!32782 e!38806)))

(assert (=> b!58992 (= res!32782 (not e!38802))))

(declare-fun res!32785 () Bool)

(assert (=> b!58992 (=> (not res!32785) (not e!38802))))

(assert (=> b!58992 (= res!32785 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992))))))))

(assert (= (and d!11217 c!7491) b!58981))

(assert (= (and d!11217 (not c!7491)) b!58976))

(assert (= (and b!58976 c!7493) b!58982))

(assert (= (and b!58976 (not c!7493)) b!58972))

(assert (= (and b!58972 c!7489) b!58979))

(assert (= (and b!58972 (not c!7489)) b!58978))

(assert (= (or b!58979 b!58978) bm!4385))

(assert (= (or b!58982 bm!4385) bm!4387))

(assert (= (or b!58982 b!58979) bm!4389))

(assert (= (or b!58981 bm!4387) bm!4386))

(assert (= (or b!58981 bm!4389) bm!4388))

(assert (= (and d!11217 res!32784) b!58991))

(assert (= (and d!11217 c!7494) b!58977))

(assert (= (and d!11217 (not c!7494)) b!58988))

(assert (= (and d!11217 res!32783) b!58992))

(assert (= (and b!58992 res!32785) b!58987))

(assert (= (and b!58992 (not res!32782)) b!58975))

(assert (= (and b!58975 res!32787) b!58984))

(assert (= (and b!58992 res!32786) b!58983))

(assert (= (and b!58983 c!7490) b!58974))

(assert (= (and b!58983 (not c!7490)) b!58986))

(assert (= (and b!58974 res!32779) b!58980))

(assert (= (or b!58974 b!58986) bm!4391))

(assert (= (and b!58983 res!32781) b!58989))

(assert (= (and b!58989 c!7492) b!58985))

(assert (= (and b!58989 (not c!7492)) b!58973))

(assert (= (and b!58985 res!32780) b!58990))

(assert (= (or b!58985 b!58973) bm!4390))

(declare-fun b_lambda!2587 () Bool)

(assert (=> (not b_lambda!2587) (not b!58984)))

(assert (=> b!58984 t!4753))

(declare-fun b_and!3565 () Bool)

(assert (= b_and!3545 (and (=> t!4753 result!2361) b_and!3565)))

(assert (=> b!58984 t!4755))

(declare-fun b_and!3567 () Bool)

(assert (= b_and!3547 (and (=> t!4755 result!2365) b_and!3567)))

(declare-fun m!50571 () Bool)

(assert (=> b!58980 m!50571))

(declare-fun m!50573 () Bool)

(assert (=> b!58991 m!50573))

(assert (=> b!58991 m!50573))

(declare-fun m!50575 () Bool)

(assert (=> b!58991 m!50575))

(declare-fun m!50577 () Bool)

(assert (=> b!58981 m!50577))

(assert (=> b!58975 m!50573))

(assert (=> b!58975 m!50573))

(declare-fun m!50579 () Bool)

(assert (=> b!58975 m!50579))

(declare-fun m!50581 () Bool)

(assert (=> bm!4391 m!50581))

(declare-fun m!50583 () Bool)

(assert (=> b!58990 m!50583))

(declare-fun m!50585 () Bool)

(assert (=> bm!4390 m!50585))

(assert (=> b!58984 m!50393))

(declare-fun m!50587 () Bool)

(assert (=> b!58984 m!50587))

(assert (=> b!58984 m!50573))

(assert (=> b!58984 m!50573))

(declare-fun m!50589 () Bool)

(assert (=> b!58984 m!50589))

(assert (=> b!58984 m!50587))

(assert (=> b!58984 m!50393))

(declare-fun m!50591 () Bool)

(assert (=> b!58984 m!50591))

(declare-fun m!50593 () Bool)

(assert (=> bm!4388 m!50593))

(assert (=> d!11217 m!50361))

(assert (=> b!58987 m!50573))

(assert (=> b!58987 m!50573))

(assert (=> b!58987 m!50575))

(declare-fun m!50595 () Bool)

(assert (=> bm!4386 m!50595))

(declare-fun m!50597 () Bool)

(assert (=> b!58977 m!50597))

(declare-fun m!50599 () Bool)

(assert (=> b!58977 m!50599))

(declare-fun m!50601 () Bool)

(assert (=> b!58977 m!50601))

(assert (=> b!58977 m!50573))

(declare-fun m!50603 () Bool)

(assert (=> b!58977 m!50603))

(declare-fun m!50605 () Bool)

(assert (=> b!58977 m!50605))

(declare-fun m!50607 () Bool)

(assert (=> b!58977 m!50607))

(declare-fun m!50609 () Bool)

(assert (=> b!58977 m!50609))

(declare-fun m!50611 () Bool)

(assert (=> b!58977 m!50611))

(declare-fun m!50613 () Bool)

(assert (=> b!58977 m!50613))

(declare-fun m!50615 () Bool)

(assert (=> b!58977 m!50615))

(assert (=> b!58977 m!50597))

(declare-fun m!50617 () Bool)

(assert (=> b!58977 m!50617))

(declare-fun m!50619 () Bool)

(assert (=> b!58977 m!50619))

(declare-fun m!50621 () Bool)

(assert (=> b!58977 m!50621))

(assert (=> b!58977 m!50619))

(declare-fun m!50623 () Bool)

(assert (=> b!58977 m!50623))

(declare-fun m!50625 () Bool)

(assert (=> b!58977 m!50625))

(assert (=> b!58977 m!50595))

(assert (=> b!58977 m!50609))

(assert (=> b!58977 m!50603))

(assert (=> b!58656 d!11217))

(declare-fun d!11219 () Bool)

(assert (=> d!11219 (not (arrayContainsKey!0 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!23795 () Unit!1547)

(declare-fun choose!68 (array!3703 (_ BitVec 32) (_ BitVec 64) List!1422) Unit!1547)

(assert (=> d!11219 (= lt!23795 (choose!68 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (Cons!1418 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) Nil!1419)))))

(assert (=> d!11219 (bvslt (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!11219 (= (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (Cons!1418 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) Nil!1419)) lt!23795)))

(declare-fun bs!2553 () Bool)

(assert (= bs!2553 d!11219))

(assert (=> bs!2553 m!50367))

(assert (=> bs!2553 m!50371))

(assert (=> bs!2553 m!50367))

(declare-fun m!50627 () Bool)

(assert (=> bs!2553 m!50627))

(assert (=> b!58646 d!11219))

(declare-fun d!11221 () Bool)

(assert (=> d!11221 (arrayNoDuplicates!0 (_keys!3666 (v!2382 (underlying!225 thiss!992))) from!355 Nil!1419)))

(declare-fun lt!23798 () Unit!1547)

(declare-fun choose!39 (array!3703 (_ BitVec 32) (_ BitVec 32)) Unit!1547)

(assert (=> d!11221 (= lt!23798 (choose!39 (_keys!3666 (v!2382 (underlying!225 thiss!992))) #b00000000000000000000000000000000 from!355))))

(assert (=> d!11221 (bvslt (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!11221 (= (lemmaNoDuplicateFromThenFromBigger!0 (_keys!3666 (v!2382 (underlying!225 thiss!992))) #b00000000000000000000000000000000 from!355) lt!23798)))

(declare-fun bs!2554 () Bool)

(assert (= bs!2554 d!11221))

(assert (=> bs!2554 m!50365))

(declare-fun m!50629 () Bool)

(assert (=> bs!2554 m!50629))

(assert (=> b!58646 d!11221))

(declare-fun d!11223 () Bool)

(declare-fun res!32792 () Bool)

(declare-fun e!38818 () Bool)

(assert (=> d!11223 (=> res!32792 e!38818)))

(assert (=> d!11223 (= res!32792 (= (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(assert (=> d!11223 (= (arrayContainsKey!0 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)) e!38818)))

(declare-fun b!58997 () Bool)

(declare-fun e!38819 () Bool)

(assert (=> b!58997 (= e!38818 e!38819)))

(declare-fun res!32793 () Bool)

(assert (=> b!58997 (=> (not res!32793) (not e!38819))))

(assert (=> b!58997 (= res!32793 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992))))))))

(declare-fun b!58998 () Bool)

(assert (=> b!58998 (= e!38819 (arrayContainsKey!0 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (= (and d!11223 (not res!32792)) b!58997))

(assert (= (and b!58997 res!32793) b!58998))

(assert (=> d!11223 m!50573))

(assert (=> b!58998 m!50367))

(declare-fun m!50631 () Bool)

(assert (=> b!58998 m!50631))

(assert (=> b!58646 d!11223))

(declare-fun d!11225 () Bool)

(declare-fun e!38822 () Bool)

(assert (=> d!11225 e!38822))

(declare-fun c!7497 () Bool)

(assert (=> d!11225 (= c!7497 (and (not (= (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun lt!23801 () Unit!1547)

(declare-fun choose!308 (array!3703 array!3705 (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 (_ BitVec 64) (_ BitVec 32) Int) Unit!1547)

(assert (=> d!11225 (= lt!23801 (choose!308 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (_values!2025 (v!2382 (underlying!225 thiss!992))) (mask!5926 (v!2382 (underlying!225 thiss!992))) (extraKeys!1929 (v!2382 (underlying!225 thiss!992))) (zeroValue!1958 (v!2382 (underlying!225 thiss!992))) (minValue!1958 (v!2382 (underlying!225 thiss!992))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2042 (v!2382 (underlying!225 thiss!992)))))))

(assert (=> d!11225 (validMask!0 (mask!5926 (v!2382 (underlying!225 thiss!992))))))

(assert (=> d!11225 (= (lemmaListMapContainsThenArrayContainsFrom!24 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (_values!2025 (v!2382 (underlying!225 thiss!992))) (mask!5926 (v!2382 (underlying!225 thiss!992))) (extraKeys!1929 (v!2382 (underlying!225 thiss!992))) (zeroValue!1958 (v!2382 (underlying!225 thiss!992))) (minValue!1958 (v!2382 (underlying!225 thiss!992))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2042 (v!2382 (underlying!225 thiss!992)))) lt!23801)))

(declare-fun b!59003 () Bool)

(assert (=> b!59003 (= e!38822 (arrayContainsKey!0 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!59004 () Bool)

(assert (=> b!59004 (= e!38822 (ite (= (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!1929 (v!2382 (underlying!225 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1929 (v!2382 (underlying!225 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!11225 c!7497) b!59003))

(assert (= (and d!11225 (not c!7497)) b!59004))

(assert (=> d!11225 m!50367))

(declare-fun m!50633 () Bool)

(assert (=> d!11225 m!50633))

(assert (=> d!11225 m!50361))

(assert (=> b!59003 m!50367))

(assert (=> b!59003 m!50371))

(assert (=> b!58646 d!11225))

(declare-fun b!59015 () Bool)

(declare-fun e!38834 () Bool)

(declare-fun e!38833 () Bool)

(assert (=> b!59015 (= e!38834 e!38833)))

(declare-fun res!32801 () Bool)

(assert (=> b!59015 (=> (not res!32801) (not e!38833))))

(declare-fun e!38831 () Bool)

(assert (=> b!59015 (= res!32801 (not e!38831))))

(declare-fun res!32800 () Bool)

(assert (=> b!59015 (=> (not res!32800) (not e!38831))))

(assert (=> b!59015 (= res!32800 (validKeyInArray!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(declare-fun b!59016 () Bool)

(declare-fun e!38832 () Bool)

(declare-fun call!4397 () Bool)

(assert (=> b!59016 (= e!38832 call!4397)))

(declare-fun b!59017 () Bool)

(assert (=> b!59017 (= e!38832 call!4397)))

(declare-fun d!11227 () Bool)

(declare-fun res!32802 () Bool)

(assert (=> d!11227 (=> res!32802 e!38834)))

(assert (=> d!11227 (= res!32802 (bvsge from!355 (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992))))))))

(assert (=> d!11227 (= (arrayNoDuplicates!0 (_keys!3666 (v!2382 (underlying!225 thiss!992))) from!355 Nil!1419) e!38834)))

(declare-fun c!7500 () Bool)

(declare-fun bm!4394 () Bool)

(assert (=> bm!4394 (= call!4397 (arrayNoDuplicates!0 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!7500 (Cons!1418 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) Nil!1419) Nil!1419)))))

(declare-fun b!59018 () Bool)

(declare-fun contains!679 (List!1422 (_ BitVec 64)) Bool)

(assert (=> b!59018 (= e!38831 (contains!679 Nil!1419 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(declare-fun b!59019 () Bool)

(assert (=> b!59019 (= e!38833 e!38832)))

(assert (=> b!59019 (= c!7500 (validKeyInArray!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(assert (= (and d!11227 (not res!32802)) b!59015))

(assert (= (and b!59015 res!32800) b!59018))

(assert (= (and b!59015 res!32801) b!59019))

(assert (= (and b!59019 c!7500) b!59016))

(assert (= (and b!59019 (not c!7500)) b!59017))

(assert (= (or b!59016 b!59017) bm!4394))

(assert (=> b!59015 m!50367))

(assert (=> b!59015 m!50367))

(declare-fun m!50635 () Bool)

(assert (=> b!59015 m!50635))

(assert (=> bm!4394 m!50367))

(declare-fun m!50637 () Bool)

(assert (=> bm!4394 m!50637))

(assert (=> b!59018 m!50367))

(assert (=> b!59018 m!50367))

(declare-fun m!50639 () Bool)

(assert (=> b!59018 m!50639))

(assert (=> b!59019 m!50367))

(assert (=> b!59019 m!50367))

(assert (=> b!59019 m!50635))

(assert (=> b!58646 d!11227))

(declare-fun condMapEmpty!2883 () Bool)

(declare-fun mapDefault!2883 () ValueCell!854)

(assert (=> mapNonEmpty!2867 (= condMapEmpty!2883 (= mapRest!2867 ((as const (Array (_ BitVec 32) ValueCell!854)) mapDefault!2883)))))

(declare-fun e!38839 () Bool)

(declare-fun mapRes!2883 () Bool)

(assert (=> mapNonEmpty!2867 (= tp!7983 (and e!38839 mapRes!2883))))

(declare-fun b!59026 () Bool)

(declare-fun e!38840 () Bool)

(assert (=> b!59026 (= e!38840 tp_is_empty!2395)))

(declare-fun mapIsEmpty!2883 () Bool)

(assert (=> mapIsEmpty!2883 mapRes!2883))

(declare-fun b!59027 () Bool)

(assert (=> b!59027 (= e!38839 tp_is_empty!2395)))

(declare-fun mapNonEmpty!2883 () Bool)

(declare-fun tp!8013 () Bool)

(assert (=> mapNonEmpty!2883 (= mapRes!2883 (and tp!8013 e!38840))))

(declare-fun mapKey!2883 () (_ BitVec 32))

(declare-fun mapRest!2883 () (Array (_ BitVec 32) ValueCell!854))

(declare-fun mapValue!2883 () ValueCell!854)

(assert (=> mapNonEmpty!2883 (= mapRest!2867 (store mapRest!2883 mapKey!2883 mapValue!2883))))

(assert (= (and mapNonEmpty!2867 condMapEmpty!2883) mapIsEmpty!2883))

(assert (= (and mapNonEmpty!2867 (not condMapEmpty!2883)) mapNonEmpty!2883))

(assert (= (and mapNonEmpty!2883 ((_ is ValueCellFull!854) mapValue!2883)) b!59026))

(assert (= (and mapNonEmpty!2867 ((_ is ValueCellFull!854) mapDefault!2883)) b!59027))

(declare-fun m!50641 () Bool)

(assert (=> mapNonEmpty!2883 m!50641))

(declare-fun condMapEmpty!2884 () Bool)

(declare-fun mapDefault!2884 () ValueCell!854)

(assert (=> mapNonEmpty!2868 (= condMapEmpty!2884 (= mapRest!2868 ((as const (Array (_ BitVec 32) ValueCell!854)) mapDefault!2884)))))

(declare-fun e!38841 () Bool)

(declare-fun mapRes!2884 () Bool)

(assert (=> mapNonEmpty!2868 (= tp!7984 (and e!38841 mapRes!2884))))

(declare-fun b!59028 () Bool)

(declare-fun e!38842 () Bool)

(assert (=> b!59028 (= e!38842 tp_is_empty!2395)))

(declare-fun mapIsEmpty!2884 () Bool)

(assert (=> mapIsEmpty!2884 mapRes!2884))

(declare-fun b!59029 () Bool)

(assert (=> b!59029 (= e!38841 tp_is_empty!2395)))

(declare-fun mapNonEmpty!2884 () Bool)

(declare-fun tp!8014 () Bool)

(assert (=> mapNonEmpty!2884 (= mapRes!2884 (and tp!8014 e!38842))))

(declare-fun mapValue!2884 () ValueCell!854)

(declare-fun mapRest!2884 () (Array (_ BitVec 32) ValueCell!854))

(declare-fun mapKey!2884 () (_ BitVec 32))

(assert (=> mapNonEmpty!2884 (= mapRest!2868 (store mapRest!2884 mapKey!2884 mapValue!2884))))

(assert (= (and mapNonEmpty!2868 condMapEmpty!2884) mapIsEmpty!2884))

(assert (= (and mapNonEmpty!2868 (not condMapEmpty!2884)) mapNonEmpty!2884))

(assert (= (and mapNonEmpty!2884 ((_ is ValueCellFull!854) mapValue!2884)) b!59028))

(assert (= (and mapNonEmpty!2868 ((_ is ValueCellFull!854) mapDefault!2884)) b!59029))

(declare-fun m!50643 () Bool)

(assert (=> mapNonEmpty!2884 m!50643))

(declare-fun b_lambda!2589 () Bool)

(assert (= b_lambda!2587 (or (and b!58642 b_free!1957) (and b!58653 b_free!1959 (= (defaultEntry!2042 newMap!16) (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))))) b_lambda!2589)))

(check-sat (not bm!4367) (not b!58977) (not bm!4370) (not b!58903) (not bm!4361) (not bm!4348) (not b!58927) (not d!11215) b_and!3565 (not b_lambda!2585) (not b!58899) (not d!11219) (not bm!4368) (not b_lambda!2589) (not b!59003) (not b!58788) (not b!58928) (not b!58998) (not bm!4352) (not bm!4364) (not d!11221) (not b!58878) (not b!59015) (not b_next!1959) (not bm!4391) (not mapNonEmpty!2883) b_and!3567 (not b!58984) (not bm!4347) (not b!58991) (not bm!4365) (not bm!4390) (not d!11207) (not b!58882) (not mapNonEmpty!2884) (not b!58919) (not d!11217) (not bm!4362) (not b!59018) (not b_next!1957) (not b!58980) (not bm!4386) (not b!58902) (not b!58920) (not b!58975) (not b!58911) (not b!58987) (not bm!4388) (not b!58786) (not b!58929) (not b!58892) (not b!58981) tp_is_empty!2395 (not b!59019) (not d!11213) (not d!11205) (not d!11225) (not d!11211) (not bm!4355) (not b!58990) (not bm!4360) (not bm!4394))
(check-sat b_and!3565 b_and!3567 (not b_next!1957) (not b_next!1959))
(get-model)

(assert (=> bm!4348 d!11215))

(declare-fun d!11229 () Bool)

(declare-fun get!1075 (Option!131) V!2841)

(assert (=> d!11229 (= (apply!66 lt!23783 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1075 (getValueByKey!125 (toList!687 lt!23783) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2555 () Bool)

(assert (= bs!2555 d!11229))

(declare-fun m!50645 () Bool)

(assert (=> bs!2555 m!50645))

(assert (=> bs!2555 m!50645))

(declare-fun m!50647 () Bool)

(assert (=> bs!2555 m!50647))

(assert (=> b!58990 d!11229))

(declare-fun d!11231 () Bool)

(declare-fun res!32803 () Bool)

(declare-fun e!38843 () Bool)

(assert (=> d!11231 (=> (not res!32803) (not e!38843))))

(assert (=> d!11231 (= res!32803 (simpleValid!42 (v!2382 (underlying!225 thiss!992))))))

(assert (=> d!11231 (= (valid!263 (v!2382 (underlying!225 thiss!992))) e!38843)))

(declare-fun b!59030 () Bool)

(declare-fun res!32804 () Bool)

(assert (=> b!59030 (=> (not res!32804) (not e!38843))))

(assert (=> b!59030 (= res!32804 (= (arrayCountValidKeys!0 (_keys!3666 (v!2382 (underlying!225 thiss!992))) #b00000000000000000000000000000000 (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992))))) (_size!357 (v!2382 (underlying!225 thiss!992)))))))

(declare-fun b!59031 () Bool)

(declare-fun res!32805 () Bool)

(assert (=> b!59031 (=> (not res!32805) (not e!38843))))

(assert (=> b!59031 (= res!32805 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (mask!5926 (v!2382 (underlying!225 thiss!992)))))))

(declare-fun b!59032 () Bool)

(assert (=> b!59032 (= e!38843 (arrayNoDuplicates!0 (_keys!3666 (v!2382 (underlying!225 thiss!992))) #b00000000000000000000000000000000 Nil!1419))))

(assert (= (and d!11231 res!32803) b!59030))

(assert (= (and b!59030 res!32804) b!59031))

(assert (= (and b!59031 res!32805) b!59032))

(declare-fun m!50649 () Bool)

(assert (=> d!11231 m!50649))

(declare-fun m!50651 () Bool)

(assert (=> b!59030 m!50651))

(declare-fun m!50653 () Bool)

(assert (=> b!59031 m!50653))

(declare-fun m!50655 () Bool)

(assert (=> b!59032 m!50655))

(assert (=> d!11213 d!11231))

(declare-fun d!11233 () Bool)

(declare-fun lt!23808 () SeekEntryResult!221)

(assert (=> d!11233 (and (or ((_ is Undefined!221) lt!23808) (not ((_ is Found!221) lt!23808)) (and (bvsge (index!3008 lt!23808) #b00000000000000000000000000000000) (bvslt (index!3008 lt!23808) (size!2002 (_keys!3666 newMap!16))))) (or ((_ is Undefined!221) lt!23808) ((_ is Found!221) lt!23808) (not ((_ is MissingZero!221) lt!23808)) (and (bvsge (index!3007 lt!23808) #b00000000000000000000000000000000) (bvslt (index!3007 lt!23808) (size!2002 (_keys!3666 newMap!16))))) (or ((_ is Undefined!221) lt!23808) ((_ is Found!221) lt!23808) ((_ is MissingZero!221) lt!23808) (not ((_ is MissingVacant!221) lt!23808)) (and (bvsge (index!3010 lt!23808) #b00000000000000000000000000000000) (bvslt (index!3010 lt!23808) (size!2002 (_keys!3666 newMap!16))))) (or ((_ is Undefined!221) lt!23808) (ite ((_ is Found!221) lt!23808) (= (select (arr!1772 (_keys!3666 newMap!16)) (index!3008 lt!23808)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (ite ((_ is MissingZero!221) lt!23808) (= (select (arr!1772 (_keys!3666 newMap!16)) (index!3007 lt!23808)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!221) lt!23808) (= (select (arr!1772 (_keys!3666 newMap!16)) (index!3010 lt!23808)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!38850 () SeekEntryResult!221)

(assert (=> d!11233 (= lt!23808 e!38850)))

(declare-fun c!7509 () Bool)

(declare-fun lt!23809 () SeekEntryResult!221)

(assert (=> d!11233 (= c!7509 (and ((_ is Intermediate!221) lt!23809) (undefined!1033 lt!23809)))))

(declare-fun seekKeyOrZeroOrLongMinValue!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!3703 (_ BitVec 32)) SeekEntryResult!221)

(declare-fun toIndex!0 ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))

(assert (=> d!11233 (= lt!23809 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (mask!5926 newMap!16)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (_keys!3666 newMap!16) (mask!5926 newMap!16)))))

(assert (=> d!11233 (validMask!0 (mask!5926 newMap!16))))

(assert (=> d!11233 (= (seekEntryOrOpen!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (_keys!3666 newMap!16) (mask!5926 newMap!16)) lt!23808)))

(declare-fun e!38852 () SeekEntryResult!221)

(declare-fun b!59045 () Bool)

(declare-fun seekKeyOrZeroReturnVacant!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!3703 (_ BitVec 32)) SeekEntryResult!221)

(assert (=> b!59045 (= e!38852 (seekKeyOrZeroReturnVacant!0 (x!9997 lt!23809) (index!3009 lt!23809) (index!3009 lt!23809) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (_keys!3666 newMap!16) (mask!5926 newMap!16)))))

(declare-fun b!59046 () Bool)

(declare-fun e!38851 () SeekEntryResult!221)

(assert (=> b!59046 (= e!38851 (Found!221 (index!3009 lt!23809)))))

(declare-fun b!59047 () Bool)

(assert (=> b!59047 (= e!38850 e!38851)))

(declare-fun lt!23810 () (_ BitVec 64))

(assert (=> b!59047 (= lt!23810 (select (arr!1772 (_keys!3666 newMap!16)) (index!3009 lt!23809)))))

(declare-fun c!7508 () Bool)

(assert (=> b!59047 (= c!7508 (= lt!23810 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(declare-fun b!59048 () Bool)

(assert (=> b!59048 (= e!38852 (MissingZero!221 (index!3009 lt!23809)))))

(declare-fun b!59049 () Bool)

(assert (=> b!59049 (= e!38850 Undefined!221)))

(declare-fun b!59050 () Bool)

(declare-fun c!7507 () Bool)

(assert (=> b!59050 (= c!7507 (= lt!23810 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59050 (= e!38851 e!38852)))

(assert (= (and d!11233 c!7509) b!59049))

(assert (= (and d!11233 (not c!7509)) b!59047))

(assert (= (and b!59047 c!7508) b!59046))

(assert (= (and b!59047 (not c!7508)) b!59050))

(assert (= (and b!59050 c!7507) b!59048))

(assert (= (and b!59050 (not c!7507)) b!59045))

(assert (=> d!11233 m!50367))

(declare-fun m!50657 () Bool)

(assert (=> d!11233 m!50657))

(assert (=> d!11233 m!50657))

(assert (=> d!11233 m!50367))

(declare-fun m!50659 () Bool)

(assert (=> d!11233 m!50659))

(declare-fun m!50661 () Bool)

(assert (=> d!11233 m!50661))

(declare-fun m!50663 () Bool)

(assert (=> d!11233 m!50663))

(declare-fun m!50665 () Bool)

(assert (=> d!11233 m!50665))

(declare-fun m!50667 () Bool)

(assert (=> d!11233 m!50667))

(assert (=> b!59045 m!50367))

(declare-fun m!50669 () Bool)

(assert (=> b!59045 m!50669))

(declare-fun m!50671 () Bool)

(assert (=> b!59047 m!50671))

(assert (=> b!58878 d!11233))

(declare-fun d!11235 () Bool)

(assert (=> d!11235 (= (get!1074 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!58920 d!11235))

(declare-fun d!11237 () Bool)

(declare-fun e!38855 () Bool)

(assert (=> d!11237 e!38855))

(declare-fun res!32811 () Bool)

(assert (=> d!11237 (=> (not res!32811) (not e!38855))))

(declare-fun lt!23816 () SeekEntryResult!221)

(assert (=> d!11237 (= res!32811 ((_ is Found!221) lt!23816))))

(assert (=> d!11237 (= lt!23816 (seekEntryOrOpen!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (_keys!3666 newMap!16) (mask!5926 newMap!16)))))

(declare-fun lt!23815 () Unit!1547)

(declare-fun choose!309 (array!3703 array!3705 (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 (_ BitVec 64) Int) Unit!1547)

(assert (=> d!11237 (= lt!23815 (choose!309 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (defaultEntry!2042 newMap!16)))))

(assert (=> d!11237 (validMask!0 (mask!5926 newMap!16))))

(assert (=> d!11237 (= (lemmaInListMapThenSeekEntryOrOpenFindsIt!15 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (defaultEntry!2042 newMap!16)) lt!23815)))

(declare-fun b!59055 () Bool)

(declare-fun res!32810 () Bool)

(assert (=> b!59055 (=> (not res!32810) (not e!38855))))

(assert (=> b!59055 (= res!32810 (inRange!0 (index!3008 lt!23816) (mask!5926 newMap!16)))))

(declare-fun b!59056 () Bool)

(assert (=> b!59056 (= e!38855 (= (select (arr!1772 (_keys!3666 newMap!16)) (index!3008 lt!23816)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(assert (=> b!59056 (and (bvsge (index!3008 lt!23816) #b00000000000000000000000000000000) (bvslt (index!3008 lt!23816) (size!2002 (_keys!3666 newMap!16))))))

(assert (= (and d!11237 res!32811) b!59055))

(assert (= (and b!59055 res!32810) b!59056))

(assert (=> d!11237 m!50367))

(assert (=> d!11237 m!50525))

(assert (=> d!11237 m!50367))

(declare-fun m!50673 () Bool)

(assert (=> d!11237 m!50673))

(assert (=> d!11237 m!50667))

(declare-fun m!50675 () Bool)

(assert (=> b!59055 m!50675))

(declare-fun m!50677 () Bool)

(assert (=> b!59056 m!50677))

(assert (=> bm!4360 d!11237))

(declare-fun d!11239 () Bool)

(assert (=> d!11239 (= (+!80 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) lt!23725 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!23819 () Unit!1547)

(declare-fun choose!310 (array!3703 array!3705 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 V!2841 Int) Unit!1547)

(assert (=> d!11239 (= lt!23819 (choose!310 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) lt!23725 (zeroValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1958 newMap!16) (defaultEntry!2042 newMap!16)))))

(assert (=> d!11239 (validMask!0 (mask!5926 newMap!16))))

(assert (=> d!11239 (= (lemmaChangeZeroKeyThenAddPairToListMap!15 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) lt!23725 (zeroValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1958 newMap!16) (defaultEntry!2042 newMap!16)) lt!23819)))

(declare-fun bs!2556 () Bool)

(assert (= bs!2556 d!11239))

(assert (=> bs!2556 m!50395))

(declare-fun m!50679 () Bool)

(assert (=> bs!2556 m!50679))

(assert (=> bs!2556 m!50395))

(declare-fun m!50681 () Bool)

(assert (=> bs!2556 m!50681))

(assert (=> bs!2556 m!50509))

(assert (=> bs!2556 m!50509))

(declare-fun m!50683 () Bool)

(assert (=> bs!2556 m!50683))

(assert (=> bs!2556 m!50667))

(assert (=> b!58882 d!11239))

(assert (=> bm!4365 d!11233))

(declare-fun d!11241 () Bool)

(assert (=> d!11241 (= (map!1108 (_2!1019 lt!23711)) (getCurrentListMap!388 (_keys!3666 (_2!1019 lt!23711)) (_values!2025 (_2!1019 lt!23711)) (mask!5926 (_2!1019 lt!23711)) (extraKeys!1929 (_2!1019 lt!23711)) (zeroValue!1958 (_2!1019 lt!23711)) (minValue!1958 (_2!1019 lt!23711)) #b00000000000000000000000000000000 (defaultEntry!2042 (_2!1019 lt!23711))))))

(declare-fun bs!2557 () Bool)

(assert (= bs!2557 d!11241))

(declare-fun m!50685 () Bool)

(assert (=> bs!2557 m!50685))

(assert (=> bm!4361 d!11241))

(declare-fun d!11243 () Bool)

(assert (=> d!11243 (= (validKeyInArray!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (and (not (= (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!59019 d!11243))

(declare-fun d!11245 () Bool)

(assert (=> d!11245 (= (apply!66 lt!23783 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1075 (getValueByKey!125 (toList!687 lt!23783) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2558 () Bool)

(assert (= bs!2558 d!11245))

(declare-fun m!50687 () Bool)

(assert (=> bs!2558 m!50687))

(assert (=> bs!2558 m!50687))

(declare-fun m!50689 () Bool)

(assert (=> bs!2558 m!50689))

(assert (=> b!58980 d!11245))

(declare-fun bm!4395 () Bool)

(declare-fun call!4401 () ListLongMap!1343)

(declare-fun call!4398 () ListLongMap!1343)

(assert (=> bm!4395 (= call!4401 call!4398)))

(declare-fun b!59057 () Bool)

(declare-fun c!7510 () Bool)

(assert (=> b!59057 (= c!7510 (and (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!38860 () ListLongMap!1343)

(declare-fun e!38866 () ListLongMap!1343)

(assert (=> b!59057 (= e!38860 e!38866)))

(declare-fun b!59058 () Bool)

(declare-fun e!38867 () Bool)

(declare-fun call!4399 () Bool)

(assert (=> b!59058 (= e!38867 (not call!4399))))

(declare-fun bm!4396 () Bool)

(declare-fun call!4400 () ListLongMap!1343)

(assert (=> bm!4396 (= call!4400 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun b!59059 () Bool)

(declare-fun e!38858 () Bool)

(declare-fun e!38865 () Bool)

(assert (=> b!59059 (= e!38858 e!38865)))

(declare-fun res!32812 () Bool)

(declare-fun call!4403 () Bool)

(assert (=> b!59059 (= res!32812 call!4403)))

(assert (=> b!59059 (=> (not res!32812) (not e!38865))))

(declare-fun b!59060 () Bool)

(declare-fun e!38861 () Bool)

(declare-fun e!38864 () Bool)

(assert (=> b!59060 (= e!38861 e!38864)))

(declare-fun res!32820 () Bool)

(assert (=> b!59060 (=> (not res!32820) (not e!38864))))

(declare-fun lt!23832 () ListLongMap!1343)

(assert (=> b!59060 (= res!32820 (contains!678 lt!23832 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59060 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(declare-fun b!59061 () Bool)

(declare-fun e!38868 () ListLongMap!1343)

(assert (=> b!59061 (= e!38868 e!38860)))

(declare-fun c!7514 () Bool)

(assert (=> b!59061 (= c!7514 (and (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun d!11247 () Bool)

(declare-fun e!38856 () Bool)

(assert (=> d!11247 e!38856))

(declare-fun res!32816 () Bool)

(assert (=> d!11247 (=> (not res!32816) (not e!38856))))

(assert (=> d!11247 (= res!32816 (or (bvsge #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))))

(declare-fun lt!23840 () ListLongMap!1343)

(assert (=> d!11247 (= lt!23832 lt!23840)))

(declare-fun lt!23822 () Unit!1547)

(declare-fun e!38859 () Unit!1547)

(assert (=> d!11247 (= lt!23822 e!38859)))

(declare-fun c!7515 () Bool)

(declare-fun e!38863 () Bool)

(assert (=> d!11247 (= c!7515 e!38863)))

(declare-fun res!32817 () Bool)

(assert (=> d!11247 (=> (not res!32817) (not e!38863))))

(assert (=> d!11247 (= res!32817 (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(assert (=> d!11247 (= lt!23840 e!38868)))

(declare-fun c!7512 () Bool)

(assert (=> d!11247 (= c!7512 (and (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11247 (validMask!0 (mask!5926 newMap!16))))

(assert (=> d!11247 (= (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) lt!23832)))

(declare-fun b!59062 () Bool)

(declare-fun lt!23821 () Unit!1547)

(assert (=> b!59062 (= e!38859 lt!23821)))

(declare-fun lt!23824 () ListLongMap!1343)

(assert (=> b!59062 (= lt!23824 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!23838 () (_ BitVec 64))

(assert (=> b!59062 (= lt!23838 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23831 () (_ BitVec 64))

(assert (=> b!59062 (= lt!23831 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23820 () Unit!1547)

(assert (=> b!59062 (= lt!23820 (addStillContains!42 lt!23824 lt!23838 (zeroValue!1958 newMap!16) lt!23831))))

(assert (=> b!59062 (contains!678 (+!80 lt!23824 (tuple2!2015 lt!23838 (zeroValue!1958 newMap!16))) lt!23831)))

(declare-fun lt!23823 () Unit!1547)

(assert (=> b!59062 (= lt!23823 lt!23820)))

(declare-fun lt!23837 () ListLongMap!1343)

(assert (=> b!59062 (= lt!23837 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!23826 () (_ BitVec 64))

(assert (=> b!59062 (= lt!23826 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23827 () (_ BitVec 64))

(assert (=> b!59062 (= lt!23827 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23839 () Unit!1547)

(assert (=> b!59062 (= lt!23839 (addApplyDifferent!42 lt!23837 lt!23826 (minValue!1958 newMap!16) lt!23827))))

(assert (=> b!59062 (= (apply!66 (+!80 lt!23837 (tuple2!2015 lt!23826 (minValue!1958 newMap!16))) lt!23827) (apply!66 lt!23837 lt!23827))))

(declare-fun lt!23829 () Unit!1547)

(assert (=> b!59062 (= lt!23829 lt!23839)))

(declare-fun lt!23830 () ListLongMap!1343)

(assert (=> b!59062 (= lt!23830 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!23836 () (_ BitVec 64))

(assert (=> b!59062 (= lt!23836 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23828 () (_ BitVec 64))

(assert (=> b!59062 (= lt!23828 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23841 () Unit!1547)

(assert (=> b!59062 (= lt!23841 (addApplyDifferent!42 lt!23830 lt!23836 (zeroValue!1958 newMap!16) lt!23828))))

(assert (=> b!59062 (= (apply!66 (+!80 lt!23830 (tuple2!2015 lt!23836 (zeroValue!1958 newMap!16))) lt!23828) (apply!66 lt!23830 lt!23828))))

(declare-fun lt!23834 () Unit!1547)

(assert (=> b!59062 (= lt!23834 lt!23841)))

(declare-fun lt!23825 () ListLongMap!1343)

(assert (=> b!59062 (= lt!23825 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!23833 () (_ BitVec 64))

(assert (=> b!59062 (= lt!23833 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23835 () (_ BitVec 64))

(assert (=> b!59062 (= lt!23835 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!59062 (= lt!23821 (addApplyDifferent!42 lt!23825 lt!23833 (minValue!1958 newMap!16) lt!23835))))

(assert (=> b!59062 (= (apply!66 (+!80 lt!23825 (tuple2!2015 lt!23833 (minValue!1958 newMap!16))) lt!23835) (apply!66 lt!23825 lt!23835))))

(declare-fun b!59063 () Bool)

(assert (=> b!59063 (= e!38866 call!4401)))

(declare-fun b!59064 () Bool)

(declare-fun call!4404 () ListLongMap!1343)

(assert (=> b!59064 (= e!38866 call!4404)))

(declare-fun bm!4397 () Bool)

(assert (=> bm!4397 (= call!4398 call!4400)))

(declare-fun call!4402 () ListLongMap!1343)

(declare-fun bm!4398 () Bool)

(assert (=> bm!4398 (= call!4402 (+!80 (ite c!7512 call!4400 (ite c!7514 call!4398 call!4401)) (ite (or c!7512 c!7514) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))

(declare-fun b!59065 () Bool)

(assert (=> b!59065 (= e!38865 (= (apply!66 lt!23832 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1958 newMap!16)))))

(declare-fun b!59066 () Bool)

(assert (=> b!59066 (= e!38868 (+!80 call!4402 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))

(declare-fun b!59067 () Bool)

(assert (=> b!59067 (= e!38860 call!4404)))

(declare-fun b!59068 () Bool)

(declare-fun res!32814 () Bool)

(assert (=> b!59068 (=> (not res!32814) (not e!38856))))

(assert (=> b!59068 (= res!32814 e!38858)))

(declare-fun c!7511 () Bool)

(assert (=> b!59068 (= c!7511 (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!59069 () Bool)

(assert (=> b!59069 (= e!38864 (= (apply!66 lt!23832 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)) (get!1072 (select (arr!1773 (_values!2025 newMap!16)) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!59069 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (_values!2025 newMap!16))))))

(assert (=> b!59069 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(declare-fun b!59070 () Bool)

(declare-fun e!38862 () Bool)

(assert (=> b!59070 (= e!38867 e!38862)))

(declare-fun res!32813 () Bool)

(assert (=> b!59070 (= res!32813 call!4399)))

(assert (=> b!59070 (=> (not res!32813) (not e!38862))))

(declare-fun bm!4399 () Bool)

(assert (=> bm!4399 (= call!4404 call!4402)))

(declare-fun b!59071 () Bool)

(assert (=> b!59071 (= e!38858 (not call!4403))))

(declare-fun bm!4400 () Bool)

(assert (=> bm!4400 (= call!4399 (contains!678 lt!23832 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4401 () Bool)

(assert (=> bm!4401 (= call!4403 (contains!678 lt!23832 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59072 () Bool)

(declare-fun e!38857 () Bool)

(assert (=> b!59072 (= e!38857 (validKeyInArray!0 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59073 () Bool)

(declare-fun Unit!1555 () Unit!1547)

(assert (=> b!59073 (= e!38859 Unit!1555)))

(declare-fun b!59074 () Bool)

(assert (=> b!59074 (= e!38856 e!38867)))

(declare-fun c!7513 () Bool)

(assert (=> b!59074 (= c!7513 (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!59075 () Bool)

(assert (=> b!59075 (= e!38862 (= (apply!66 lt!23832 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1958 newMap!16)))))

(declare-fun b!59076 () Bool)

(assert (=> b!59076 (= e!38863 (validKeyInArray!0 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59077 () Bool)

(declare-fun res!32819 () Bool)

(assert (=> b!59077 (=> (not res!32819) (not e!38856))))

(assert (=> b!59077 (= res!32819 e!38861)))

(declare-fun res!32815 () Bool)

(assert (=> b!59077 (=> res!32815 e!38861)))

(assert (=> b!59077 (= res!32815 (not e!38857))))

(declare-fun res!32818 () Bool)

(assert (=> b!59077 (=> (not res!32818) (not e!38857))))

(assert (=> b!59077 (= res!32818 (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(assert (= (and d!11247 c!7512) b!59066))

(assert (= (and d!11247 (not c!7512)) b!59061))

(assert (= (and b!59061 c!7514) b!59067))

(assert (= (and b!59061 (not c!7514)) b!59057))

(assert (= (and b!59057 c!7510) b!59064))

(assert (= (and b!59057 (not c!7510)) b!59063))

(assert (= (or b!59064 b!59063) bm!4395))

(assert (= (or b!59067 bm!4395) bm!4397))

(assert (= (or b!59067 b!59064) bm!4399))

(assert (= (or b!59066 bm!4397) bm!4396))

(assert (= (or b!59066 bm!4399) bm!4398))

(assert (= (and d!11247 res!32817) b!59076))

(assert (= (and d!11247 c!7515) b!59062))

(assert (= (and d!11247 (not c!7515)) b!59073))

(assert (= (and d!11247 res!32816) b!59077))

(assert (= (and b!59077 res!32818) b!59072))

(assert (= (and b!59077 (not res!32815)) b!59060))

(assert (= (and b!59060 res!32820) b!59069))

(assert (= (and b!59077 res!32819) b!59068))

(assert (= (and b!59068 c!7511) b!59059))

(assert (= (and b!59068 (not c!7511)) b!59071))

(assert (= (and b!59059 res!32812) b!59065))

(assert (= (or b!59059 b!59071) bm!4401))

(assert (= (and b!59068 res!32814) b!59074))

(assert (= (and b!59074 c!7513) b!59070))

(assert (= (and b!59074 (not c!7513)) b!59058))

(assert (= (and b!59070 res!32813) b!59075))

(assert (= (or b!59070 b!59058) bm!4400))

(declare-fun b_lambda!2591 () Bool)

(assert (=> (not b_lambda!2591) (not b!59069)))

(declare-fun tb!1321 () Bool)

(declare-fun t!4767 () Bool)

(assert (=> (and b!58642 (= (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) (defaultEntry!2042 newMap!16)) t!4767) tb!1321))

(declare-fun result!2381 () Bool)

(assert (=> tb!1321 (= result!2381 tp_is_empty!2395)))

(assert (=> b!59069 t!4767))

(declare-fun b_and!3569 () Bool)

(assert (= b_and!3565 (and (=> t!4767 result!2381) b_and!3569)))

(declare-fun t!4769 () Bool)

(declare-fun tb!1323 () Bool)

(assert (=> (and b!58653 (= (defaultEntry!2042 newMap!16) (defaultEntry!2042 newMap!16)) t!4769) tb!1323))

(declare-fun result!2383 () Bool)

(assert (= result!2383 result!2381))

(assert (=> b!59069 t!4769))

(declare-fun b_and!3571 () Bool)

(assert (= b_and!3567 (and (=> t!4769 result!2383) b_and!3571)))

(declare-fun m!50691 () Bool)

(assert (=> b!59065 m!50691))

(declare-fun m!50693 () Bool)

(assert (=> b!59076 m!50693))

(assert (=> b!59076 m!50693))

(declare-fun m!50695 () Bool)

(assert (=> b!59076 m!50695))

(declare-fun m!50697 () Bool)

(assert (=> b!59066 m!50697))

(assert (=> b!59060 m!50693))

(assert (=> b!59060 m!50693))

(declare-fun m!50699 () Bool)

(assert (=> b!59060 m!50699))

(declare-fun m!50701 () Bool)

(assert (=> bm!4401 m!50701))

(declare-fun m!50703 () Bool)

(assert (=> b!59075 m!50703))

(declare-fun m!50705 () Bool)

(assert (=> bm!4400 m!50705))

(declare-fun m!50707 () Bool)

(assert (=> b!59069 m!50707))

(declare-fun m!50709 () Bool)

(assert (=> b!59069 m!50709))

(assert (=> b!59069 m!50693))

(assert (=> b!59069 m!50693))

(declare-fun m!50711 () Bool)

(assert (=> b!59069 m!50711))

(assert (=> b!59069 m!50709))

(assert (=> b!59069 m!50707))

(declare-fun m!50713 () Bool)

(assert (=> b!59069 m!50713))

(declare-fun m!50715 () Bool)

(assert (=> bm!4398 m!50715))

(assert (=> d!11247 m!50667))

(assert (=> b!59072 m!50693))

(assert (=> b!59072 m!50693))

(assert (=> b!59072 m!50695))

(declare-fun m!50717 () Bool)

(assert (=> bm!4396 m!50717))

(declare-fun m!50719 () Bool)

(assert (=> b!59062 m!50719))

(declare-fun m!50721 () Bool)

(assert (=> b!59062 m!50721))

(declare-fun m!50723 () Bool)

(assert (=> b!59062 m!50723))

(assert (=> b!59062 m!50693))

(declare-fun m!50725 () Bool)

(assert (=> b!59062 m!50725))

(declare-fun m!50727 () Bool)

(assert (=> b!59062 m!50727))

(declare-fun m!50729 () Bool)

(assert (=> b!59062 m!50729))

(declare-fun m!50731 () Bool)

(assert (=> b!59062 m!50731))

(declare-fun m!50733 () Bool)

(assert (=> b!59062 m!50733))

(declare-fun m!50735 () Bool)

(assert (=> b!59062 m!50735))

(declare-fun m!50737 () Bool)

(assert (=> b!59062 m!50737))

(assert (=> b!59062 m!50719))

(declare-fun m!50739 () Bool)

(assert (=> b!59062 m!50739))

(declare-fun m!50741 () Bool)

(assert (=> b!59062 m!50741))

(declare-fun m!50743 () Bool)

(assert (=> b!59062 m!50743))

(assert (=> b!59062 m!50741))

(declare-fun m!50745 () Bool)

(assert (=> b!59062 m!50745))

(declare-fun m!50747 () Bool)

(assert (=> b!59062 m!50747))

(assert (=> b!59062 m!50717))

(assert (=> b!59062 m!50731))

(assert (=> b!59062 m!50725))

(assert (=> d!11215 d!11247))

(declare-fun d!11249 () Bool)

(declare-fun res!32821 () Bool)

(declare-fun e!38869 () Bool)

(assert (=> d!11249 (=> res!32821 e!38869)))

(assert (=> d!11249 (= res!32821 (= (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(assert (=> d!11249 (= (arrayContainsKey!0 (_keys!3666 newMap!16) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) #b00000000000000000000000000000000) e!38869)))

(declare-fun b!59078 () Bool)

(declare-fun e!38870 () Bool)

(assert (=> b!59078 (= e!38869 e!38870)))

(declare-fun res!32822 () Bool)

(assert (=> b!59078 (=> (not res!32822) (not e!38870))))

(assert (=> b!59078 (= res!32822 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2002 (_keys!3666 newMap!16))))))

(declare-fun b!59079 () Bool)

(assert (=> b!59079 (= e!38870 (arrayContainsKey!0 (_keys!3666 newMap!16) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!11249 (not res!32821)) b!59078))

(assert (= (and b!59078 res!32822) b!59079))

(assert (=> d!11249 m!50693))

(assert (=> b!59079 m!50367))

(declare-fun m!50749 () Bool)

(assert (=> b!59079 m!50749))

(assert (=> bm!4367 d!11249))

(declare-fun d!11251 () Bool)

(assert (=> d!11251 (isDefined!77 (getValueByKey!125 (toList!687 lt!23590) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(declare-fun lt!23844 () Unit!1547)

(declare-fun choose!311 (List!1423 (_ BitVec 64)) Unit!1547)

(assert (=> d!11251 (= lt!23844 (choose!311 (toList!687 lt!23590) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(declare-fun e!38873 () Bool)

(assert (=> d!11251 e!38873))

(declare-fun res!32825 () Bool)

(assert (=> d!11251 (=> (not res!32825) (not e!38873))))

(declare-fun isStrictlySorted!271 (List!1423) Bool)

(assert (=> d!11251 (= res!32825 (isStrictlySorted!271 (toList!687 lt!23590)))))

(assert (=> d!11251 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 lt!23590) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) lt!23844)))

(declare-fun b!59082 () Bool)

(assert (=> b!59082 (= e!38873 (containsKey!128 (toList!687 lt!23590) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(assert (= (and d!11251 res!32825) b!59082))

(assert (=> d!11251 m!50367))

(assert (=> d!11251 m!50497))

(assert (=> d!11251 m!50497))

(assert (=> d!11251 m!50499))

(assert (=> d!11251 m!50367))

(declare-fun m!50751 () Bool)

(assert (=> d!11251 m!50751))

(declare-fun m!50753 () Bool)

(assert (=> d!11251 m!50753))

(assert (=> b!59082 m!50367))

(assert (=> b!59082 m!50493))

(assert (=> b!58786 d!11251))

(declare-fun d!11253 () Bool)

(declare-fun isEmpty!299 (Option!131) Bool)

(assert (=> d!11253 (= (isDefined!77 (getValueByKey!125 (toList!687 lt!23590) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355))) (not (isEmpty!299 (getValueByKey!125 (toList!687 lt!23590) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))))

(declare-fun bs!2559 () Bool)

(assert (= bs!2559 d!11253))

(assert (=> bs!2559 m!50497))

(declare-fun m!50755 () Bool)

(assert (=> bs!2559 m!50755))

(assert (=> b!58786 d!11253))

(declare-fun b!59092 () Bool)

(declare-fun e!38878 () Option!131)

(declare-fun e!38879 () Option!131)

(assert (=> b!59092 (= e!38878 e!38879)))

(declare-fun c!7521 () Bool)

(assert (=> b!59092 (= c!7521 (and ((_ is Cons!1419) (toList!687 lt!23590)) (not (= (_1!1018 (h!2000 (toList!687 lt!23590))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))))

(declare-fun b!59091 () Bool)

(assert (=> b!59091 (= e!38878 (Some!130 (_2!1018 (h!2000 (toList!687 lt!23590)))))))

(declare-fun d!11255 () Bool)

(declare-fun c!7520 () Bool)

(assert (=> d!11255 (= c!7520 (and ((_ is Cons!1419) (toList!687 lt!23590)) (= (_1!1018 (h!2000 (toList!687 lt!23590))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355))))))

(assert (=> d!11255 (= (getValueByKey!125 (toList!687 lt!23590) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) e!38878)))

(declare-fun b!59094 () Bool)

(assert (=> b!59094 (= e!38879 None!129)))

(declare-fun b!59093 () Bool)

(assert (=> b!59093 (= e!38879 (getValueByKey!125 (t!4757 (toList!687 lt!23590)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(assert (= (and d!11255 c!7520) b!59091))

(assert (= (and d!11255 (not c!7520)) b!59092))

(assert (= (and b!59092 c!7521) b!59093))

(assert (= (and b!59092 (not c!7521)) b!59094))

(assert (=> b!59093 m!50367))

(declare-fun m!50757 () Bool)

(assert (=> b!59093 m!50757))

(assert (=> b!58786 d!11255))

(declare-fun d!11257 () Bool)

(declare-fun res!32834 () Bool)

(declare-fun e!38882 () Bool)

(assert (=> d!11257 (=> (not res!32834) (not e!38882))))

(assert (=> d!11257 (= res!32834 (validMask!0 (mask!5926 newMap!16)))))

(assert (=> d!11257 (= (simpleValid!42 newMap!16) e!38882)))

(declare-fun b!59104 () Bool)

(declare-fun res!32837 () Bool)

(assert (=> b!59104 (=> (not res!32837) (not e!38882))))

(declare-fun size!2008 (LongMapFixedSize!616) (_ BitVec 32))

(assert (=> b!59104 (= res!32837 (bvsge (size!2008 newMap!16) (_size!357 newMap!16)))))

(declare-fun b!59105 () Bool)

(declare-fun res!32836 () Bool)

(assert (=> b!59105 (=> (not res!32836) (not e!38882))))

(assert (=> b!59105 (= res!32836 (= (size!2008 newMap!16) (bvadd (_size!357 newMap!16) (bvsdiv (bvadd (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!59103 () Bool)

(declare-fun res!32835 () Bool)

(assert (=> b!59103 (=> (not res!32835) (not e!38882))))

(assert (=> b!59103 (= res!32835 (and (= (size!2003 (_values!2025 newMap!16)) (bvadd (mask!5926 newMap!16) #b00000000000000000000000000000001)) (= (size!2002 (_keys!3666 newMap!16)) (size!2003 (_values!2025 newMap!16))) (bvsge (_size!357 newMap!16) #b00000000000000000000000000000000) (bvsle (_size!357 newMap!16) (bvadd (mask!5926 newMap!16) #b00000000000000000000000000000001))))))

(declare-fun b!59106 () Bool)

(assert (=> b!59106 (= e!38882 (and (bvsge (extraKeys!1929 newMap!16) #b00000000000000000000000000000000) (bvsle (extraKeys!1929 newMap!16) #b00000000000000000000000000000011) (bvsge (_vacant!357 newMap!16) #b00000000000000000000000000000000)))))

(assert (= (and d!11257 res!32834) b!59103))

(assert (= (and b!59103 res!32835) b!59104))

(assert (= (and b!59104 res!32837) b!59105))

(assert (= (and b!59105 res!32836) b!59106))

(assert (=> d!11257 m!50667))

(declare-fun m!50759 () Bool)

(assert (=> b!59104 m!50759))

(assert (=> b!59105 m!50759))

(assert (=> d!11211 d!11257))

(declare-fun b!59107 () Bool)

(declare-fun e!38886 () Bool)

(declare-fun e!38885 () Bool)

(assert (=> b!59107 (= e!38886 e!38885)))

(declare-fun res!32839 () Bool)

(assert (=> b!59107 (=> (not res!32839) (not e!38885))))

(declare-fun e!38883 () Bool)

(assert (=> b!59107 (= res!32839 (not e!38883))))

(declare-fun res!32838 () Bool)

(assert (=> b!59107 (=> (not res!32838) (not e!38883))))

(assert (=> b!59107 (= res!32838 (validKeyInArray!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!59108 () Bool)

(declare-fun e!38884 () Bool)

(declare-fun call!4405 () Bool)

(assert (=> b!59108 (= e!38884 call!4405)))

(declare-fun b!59109 () Bool)

(assert (=> b!59109 (= e!38884 call!4405)))

(declare-fun d!11259 () Bool)

(declare-fun res!32840 () Bool)

(assert (=> d!11259 (=> res!32840 e!38886)))

(assert (=> d!11259 (= res!32840 (bvsge (bvadd from!355 #b00000000000000000000000000000001) (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992))))))))

(assert (=> d!11259 (= (arrayNoDuplicates!0 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!7500 (Cons!1418 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) Nil!1419) Nil!1419)) e!38886)))

(declare-fun bm!4402 () Bool)

(declare-fun c!7522 () Bool)

(assert (=> bm!4402 (= call!4405 (arrayNoDuplicates!0 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!7522 (Cons!1418 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7500 (Cons!1418 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) Nil!1419) Nil!1419)) (ite c!7500 (Cons!1418 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) Nil!1419) Nil!1419))))))

(declare-fun b!59110 () Bool)

(assert (=> b!59110 (= e!38883 (contains!679 (ite c!7500 (Cons!1418 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) Nil!1419) Nil!1419) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!59111 () Bool)

(assert (=> b!59111 (= e!38885 e!38884)))

(assert (=> b!59111 (= c!7522 (validKeyInArray!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(assert (= (and d!11259 (not res!32840)) b!59107))

(assert (= (and b!59107 res!32838) b!59110))

(assert (= (and b!59107 res!32839) b!59111))

(assert (= (and b!59111 c!7522) b!59108))

(assert (= (and b!59111 (not c!7522)) b!59109))

(assert (= (or b!59108 b!59109) bm!4402))

(declare-fun m!50761 () Bool)

(assert (=> b!59107 m!50761))

(assert (=> b!59107 m!50761))

(declare-fun m!50763 () Bool)

(assert (=> b!59107 m!50763))

(assert (=> bm!4402 m!50761))

(declare-fun m!50765 () Bool)

(assert (=> bm!4402 m!50765))

(assert (=> b!59110 m!50761))

(assert (=> b!59110 m!50761))

(declare-fun m!50767 () Bool)

(assert (=> b!59110 m!50767))

(assert (=> b!59111 m!50761))

(assert (=> b!59111 m!50761))

(assert (=> b!59111 m!50763))

(assert (=> bm!4394 d!11259))

(declare-fun bm!4403 () Bool)

(declare-fun call!4409 () ListLongMap!1343)

(declare-fun call!4406 () ListLongMap!1343)

(assert (=> bm!4403 (= call!4409 call!4406)))

(declare-fun c!7523 () Bool)

(declare-fun b!59112 () Bool)

(assert (=> b!59112 (= c!7523 (and (not (= (bvand (ite (and c!7472 c!7473) lt!23725 (extraKeys!1929 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite (and c!7472 c!7473) lt!23725 (extraKeys!1929 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!38891 () ListLongMap!1343)

(declare-fun e!38897 () ListLongMap!1343)

(assert (=> b!59112 (= e!38891 e!38897)))

(declare-fun b!59113 () Bool)

(declare-fun e!38898 () Bool)

(declare-fun call!4407 () Bool)

(assert (=> b!59113 (= e!38898 (not call!4407))))

(declare-fun call!4408 () ListLongMap!1343)

(declare-fun bm!4404 () Bool)

(assert (=> bm!4404 (= call!4408 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (ite (or c!7472 c!7461) (_values!2025 newMap!16) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (index!3008 lt!23716) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16)))) (mask!5926 newMap!16) (ite (and c!7472 c!7473) lt!23725 (extraKeys!1929 newMap!16)) (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun b!59114 () Bool)

(declare-fun e!38889 () Bool)

(declare-fun e!38896 () Bool)

(assert (=> b!59114 (= e!38889 e!38896)))

(declare-fun res!32841 () Bool)

(declare-fun call!4411 () Bool)

(assert (=> b!59114 (= res!32841 call!4411)))

(assert (=> b!59114 (=> (not res!32841) (not e!38896))))

(declare-fun b!59115 () Bool)

(declare-fun e!38892 () Bool)

(declare-fun e!38895 () Bool)

(assert (=> b!59115 (= e!38892 e!38895)))

(declare-fun res!32849 () Bool)

(assert (=> b!59115 (=> (not res!32849) (not e!38895))))

(declare-fun lt!23857 () ListLongMap!1343)

(assert (=> b!59115 (= res!32849 (contains!678 lt!23857 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59115 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(declare-fun b!59116 () Bool)

(declare-fun e!38899 () ListLongMap!1343)

(assert (=> b!59116 (= e!38899 e!38891)))

(declare-fun c!7527 () Bool)

(assert (=> b!59116 (= c!7527 (and (not (= (bvand (ite (and c!7472 c!7473) lt!23725 (extraKeys!1929 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite (and c!7472 c!7473) lt!23725 (extraKeys!1929 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun d!11261 () Bool)

(declare-fun e!38887 () Bool)

(assert (=> d!11261 e!38887))

(declare-fun res!32845 () Bool)

(assert (=> d!11261 (=> (not res!32845) (not e!38887))))

(assert (=> d!11261 (= res!32845 (or (bvsge #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))))

(declare-fun lt!23865 () ListLongMap!1343)

(assert (=> d!11261 (= lt!23857 lt!23865)))

(declare-fun lt!23847 () Unit!1547)

(declare-fun e!38890 () Unit!1547)

(assert (=> d!11261 (= lt!23847 e!38890)))

(declare-fun c!7528 () Bool)

(declare-fun e!38894 () Bool)

(assert (=> d!11261 (= c!7528 e!38894)))

(declare-fun res!32846 () Bool)

(assert (=> d!11261 (=> (not res!32846) (not e!38894))))

(assert (=> d!11261 (= res!32846 (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(assert (=> d!11261 (= lt!23865 e!38899)))

(declare-fun c!7525 () Bool)

(assert (=> d!11261 (= c!7525 (and (not (= (bvand (ite (and c!7472 c!7473) lt!23725 (extraKeys!1929 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite (and c!7472 c!7473) lt!23725 (extraKeys!1929 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11261 (validMask!0 (mask!5926 newMap!16))))

(assert (=> d!11261 (= (getCurrentListMap!388 (_keys!3666 newMap!16) (ite (or c!7472 c!7461) (_values!2025 newMap!16) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (index!3008 lt!23716) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16)))) (mask!5926 newMap!16) (ite (and c!7472 c!7473) lt!23725 (extraKeys!1929 newMap!16)) (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) lt!23857)))

(declare-fun b!59117 () Bool)

(declare-fun lt!23846 () Unit!1547)

(assert (=> b!59117 (= e!38890 lt!23846)))

(declare-fun lt!23849 () ListLongMap!1343)

(assert (=> b!59117 (= lt!23849 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (ite (or c!7472 c!7461) (_values!2025 newMap!16) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (index!3008 lt!23716) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16)))) (mask!5926 newMap!16) (ite (and c!7472 c!7473) lt!23725 (extraKeys!1929 newMap!16)) (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!23863 () (_ BitVec 64))

(assert (=> b!59117 (= lt!23863 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23856 () (_ BitVec 64))

(assert (=> b!59117 (= lt!23856 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23845 () Unit!1547)

(assert (=> b!59117 (= lt!23845 (addStillContains!42 lt!23849 lt!23863 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)) lt!23856))))

(assert (=> b!59117 (contains!678 (+!80 lt!23849 (tuple2!2015 lt!23863 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)))) lt!23856)))

(declare-fun lt!23848 () Unit!1547)

(assert (=> b!59117 (= lt!23848 lt!23845)))

(declare-fun lt!23862 () ListLongMap!1343)

(assert (=> b!59117 (= lt!23862 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (ite (or c!7472 c!7461) (_values!2025 newMap!16) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (index!3008 lt!23716) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16)))) (mask!5926 newMap!16) (ite (and c!7472 c!7473) lt!23725 (extraKeys!1929 newMap!16)) (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!23851 () (_ BitVec 64))

(assert (=> b!59117 (= lt!23851 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23852 () (_ BitVec 64))

(assert (=> b!59117 (= lt!23852 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23864 () Unit!1547)

(assert (=> b!59117 (= lt!23864 (addApplyDifferent!42 lt!23862 lt!23851 (minValue!1958 newMap!16) lt!23852))))

(assert (=> b!59117 (= (apply!66 (+!80 lt!23862 (tuple2!2015 lt!23851 (minValue!1958 newMap!16))) lt!23852) (apply!66 lt!23862 lt!23852))))

(declare-fun lt!23854 () Unit!1547)

(assert (=> b!59117 (= lt!23854 lt!23864)))

(declare-fun lt!23855 () ListLongMap!1343)

(assert (=> b!59117 (= lt!23855 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (ite (or c!7472 c!7461) (_values!2025 newMap!16) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (index!3008 lt!23716) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16)))) (mask!5926 newMap!16) (ite (and c!7472 c!7473) lt!23725 (extraKeys!1929 newMap!16)) (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!23861 () (_ BitVec 64))

(assert (=> b!59117 (= lt!23861 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23853 () (_ BitVec 64))

(assert (=> b!59117 (= lt!23853 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23866 () Unit!1547)

(assert (=> b!59117 (= lt!23866 (addApplyDifferent!42 lt!23855 lt!23861 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)) lt!23853))))

(assert (=> b!59117 (= (apply!66 (+!80 lt!23855 (tuple2!2015 lt!23861 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)))) lt!23853) (apply!66 lt!23855 lt!23853))))

(declare-fun lt!23859 () Unit!1547)

(assert (=> b!59117 (= lt!23859 lt!23866)))

(declare-fun lt!23850 () ListLongMap!1343)

(assert (=> b!59117 (= lt!23850 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (ite (or c!7472 c!7461) (_values!2025 newMap!16) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (index!3008 lt!23716) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16)))) (mask!5926 newMap!16) (ite (and c!7472 c!7473) lt!23725 (extraKeys!1929 newMap!16)) (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!23858 () (_ BitVec 64))

(assert (=> b!59117 (= lt!23858 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23860 () (_ BitVec 64))

(assert (=> b!59117 (= lt!23860 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!59117 (= lt!23846 (addApplyDifferent!42 lt!23850 lt!23858 (minValue!1958 newMap!16) lt!23860))))

(assert (=> b!59117 (= (apply!66 (+!80 lt!23850 (tuple2!2015 lt!23858 (minValue!1958 newMap!16))) lt!23860) (apply!66 lt!23850 lt!23860))))

(declare-fun b!59118 () Bool)

(assert (=> b!59118 (= e!38897 call!4409)))

(declare-fun b!59119 () Bool)

(declare-fun call!4412 () ListLongMap!1343)

(assert (=> b!59119 (= e!38897 call!4412)))

(declare-fun bm!4405 () Bool)

(assert (=> bm!4405 (= call!4406 call!4408)))

(declare-fun call!4410 () ListLongMap!1343)

(declare-fun bm!4406 () Bool)

(assert (=> bm!4406 (= call!4410 (+!80 (ite c!7525 call!4408 (ite c!7527 call!4406 call!4409)) (ite (or c!7525 c!7527) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))

(declare-fun b!59120 () Bool)

(assert (=> b!59120 (= e!38896 (= (apply!66 lt!23857 #b0000000000000000000000000000000000000000000000000000000000000000) (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))))))

(declare-fun b!59121 () Bool)

(assert (=> b!59121 (= e!38899 (+!80 call!4410 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))

(declare-fun b!59122 () Bool)

(assert (=> b!59122 (= e!38891 call!4412)))

(declare-fun b!59123 () Bool)

(declare-fun res!32843 () Bool)

(assert (=> b!59123 (=> (not res!32843) (not e!38887))))

(assert (=> b!59123 (= res!32843 e!38889)))

(declare-fun c!7524 () Bool)

(assert (=> b!59123 (= c!7524 (not (= (bvand (ite (and c!7472 c!7473) lt!23725 (extraKeys!1929 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!59124 () Bool)

(assert (=> b!59124 (= e!38895 (= (apply!66 lt!23857 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)) (get!1072 (select (arr!1773 (ite (or c!7472 c!7461) (_values!2025 newMap!16) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (index!3008 lt!23716) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!59124 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (ite (or c!7472 c!7461) (_values!2025 newMap!16) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (index!3008 lt!23716) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16)))))))))

(assert (=> b!59124 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(declare-fun b!59125 () Bool)

(declare-fun e!38893 () Bool)

(assert (=> b!59125 (= e!38898 e!38893)))

(declare-fun res!32842 () Bool)

(assert (=> b!59125 (= res!32842 call!4407)))

(assert (=> b!59125 (=> (not res!32842) (not e!38893))))

(declare-fun bm!4407 () Bool)

(assert (=> bm!4407 (= call!4412 call!4410)))

(declare-fun b!59126 () Bool)

(assert (=> b!59126 (= e!38889 (not call!4411))))

(declare-fun bm!4408 () Bool)

(assert (=> bm!4408 (= call!4407 (contains!678 lt!23857 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4409 () Bool)

(assert (=> bm!4409 (= call!4411 (contains!678 lt!23857 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59127 () Bool)

(declare-fun e!38888 () Bool)

(assert (=> b!59127 (= e!38888 (validKeyInArray!0 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59128 () Bool)

(declare-fun Unit!1556 () Unit!1547)

(assert (=> b!59128 (= e!38890 Unit!1556)))

(declare-fun b!59129 () Bool)

(assert (=> b!59129 (= e!38887 e!38898)))

(declare-fun c!7526 () Bool)

(assert (=> b!59129 (= c!7526 (not (= (bvand (ite (and c!7472 c!7473) lt!23725 (extraKeys!1929 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!59130 () Bool)

(assert (=> b!59130 (= e!38893 (= (apply!66 lt!23857 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1958 newMap!16)))))

(declare-fun b!59131 () Bool)

(assert (=> b!59131 (= e!38894 (validKeyInArray!0 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59132 () Bool)

(declare-fun res!32848 () Bool)

(assert (=> b!59132 (=> (not res!32848) (not e!38887))))

(assert (=> b!59132 (= res!32848 e!38892)))

(declare-fun res!32844 () Bool)

(assert (=> b!59132 (=> res!32844 e!38892)))

(assert (=> b!59132 (= res!32844 (not e!38888))))

(declare-fun res!32847 () Bool)

(assert (=> b!59132 (=> (not res!32847) (not e!38888))))

(assert (=> b!59132 (= res!32847 (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(assert (= (and d!11261 c!7525) b!59121))

(assert (= (and d!11261 (not c!7525)) b!59116))

(assert (= (and b!59116 c!7527) b!59122))

(assert (= (and b!59116 (not c!7527)) b!59112))

(assert (= (and b!59112 c!7523) b!59119))

(assert (= (and b!59112 (not c!7523)) b!59118))

(assert (= (or b!59119 b!59118) bm!4403))

(assert (= (or b!59122 bm!4403) bm!4405))

(assert (= (or b!59122 b!59119) bm!4407))

(assert (= (or b!59121 bm!4405) bm!4404))

(assert (= (or b!59121 bm!4407) bm!4406))

(assert (= (and d!11261 res!32846) b!59131))

(assert (= (and d!11261 c!7528) b!59117))

(assert (= (and d!11261 (not c!7528)) b!59128))

(assert (= (and d!11261 res!32845) b!59132))

(assert (= (and b!59132 res!32847) b!59127))

(assert (= (and b!59132 (not res!32844)) b!59115))

(assert (= (and b!59115 res!32849) b!59124))

(assert (= (and b!59132 res!32848) b!59123))

(assert (= (and b!59123 c!7524) b!59114))

(assert (= (and b!59123 (not c!7524)) b!59126))

(assert (= (and b!59114 res!32841) b!59120))

(assert (= (or b!59114 b!59126) bm!4409))

(assert (= (and b!59123 res!32843) b!59129))

(assert (= (and b!59129 c!7526) b!59125))

(assert (= (and b!59129 (not c!7526)) b!59113))

(assert (= (and b!59125 res!32842) b!59130))

(assert (= (or b!59125 b!59113) bm!4408))

(declare-fun b_lambda!2593 () Bool)

(assert (=> (not b_lambda!2593) (not b!59124)))

(assert (=> b!59124 t!4767))

(declare-fun b_and!3573 () Bool)

(assert (= b_and!3569 (and (=> t!4767 result!2381) b_and!3573)))

(assert (=> b!59124 t!4769))

(declare-fun b_and!3575 () Bool)

(assert (= b_and!3571 (and (=> t!4769 result!2383) b_and!3575)))

(declare-fun m!50769 () Bool)

(assert (=> b!59120 m!50769))

(assert (=> b!59131 m!50693))

(assert (=> b!59131 m!50693))

(assert (=> b!59131 m!50695))

(declare-fun m!50771 () Bool)

(assert (=> b!59121 m!50771))

(assert (=> b!59115 m!50693))

(assert (=> b!59115 m!50693))

(declare-fun m!50773 () Bool)

(assert (=> b!59115 m!50773))

(declare-fun m!50775 () Bool)

(assert (=> bm!4409 m!50775))

(declare-fun m!50777 () Bool)

(assert (=> b!59130 m!50777))

(declare-fun m!50779 () Bool)

(assert (=> bm!4408 m!50779))

(assert (=> b!59124 m!50707))

(declare-fun m!50781 () Bool)

(assert (=> b!59124 m!50781))

(assert (=> b!59124 m!50693))

(assert (=> b!59124 m!50693))

(declare-fun m!50783 () Bool)

(assert (=> b!59124 m!50783))

(assert (=> b!59124 m!50781))

(assert (=> b!59124 m!50707))

(declare-fun m!50785 () Bool)

(assert (=> b!59124 m!50785))

(declare-fun m!50787 () Bool)

(assert (=> bm!4406 m!50787))

(assert (=> d!11261 m!50667))

(assert (=> b!59127 m!50693))

(assert (=> b!59127 m!50693))

(assert (=> b!59127 m!50695))

(declare-fun m!50789 () Bool)

(assert (=> bm!4404 m!50789))

(declare-fun m!50791 () Bool)

(assert (=> b!59117 m!50791))

(declare-fun m!50793 () Bool)

(assert (=> b!59117 m!50793))

(declare-fun m!50795 () Bool)

(assert (=> b!59117 m!50795))

(assert (=> b!59117 m!50693))

(declare-fun m!50797 () Bool)

(assert (=> b!59117 m!50797))

(declare-fun m!50799 () Bool)

(assert (=> b!59117 m!50799))

(declare-fun m!50801 () Bool)

(assert (=> b!59117 m!50801))

(declare-fun m!50803 () Bool)

(assert (=> b!59117 m!50803))

(declare-fun m!50805 () Bool)

(assert (=> b!59117 m!50805))

(declare-fun m!50807 () Bool)

(assert (=> b!59117 m!50807))

(declare-fun m!50809 () Bool)

(assert (=> b!59117 m!50809))

(assert (=> b!59117 m!50791))

(declare-fun m!50811 () Bool)

(assert (=> b!59117 m!50811))

(declare-fun m!50813 () Bool)

(assert (=> b!59117 m!50813))

(declare-fun m!50815 () Bool)

(assert (=> b!59117 m!50815))

(assert (=> b!59117 m!50813))

(declare-fun m!50817 () Bool)

(assert (=> b!59117 m!50817))

(declare-fun m!50819 () Bool)

(assert (=> b!59117 m!50819))

(assert (=> b!59117 m!50789))

(assert (=> b!59117 m!50803))

(assert (=> b!59117 m!50797))

(assert (=> bm!4368 d!11261))

(assert (=> b!58788 d!11253))

(assert (=> b!58788 d!11255))

(declare-fun b!59141 () Bool)

(declare-fun e!38906 () Bool)

(declare-fun call!4415 () Bool)

(assert (=> b!59141 (= e!38906 call!4415)))

(declare-fun bm!4412 () Bool)

(assert (=> bm!4412 (= call!4415 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3666 newMap!16) (mask!5926 newMap!16)))))

(declare-fun b!59142 () Bool)

(declare-fun e!38907 () Bool)

(assert (=> b!59142 (= e!38907 call!4415)))

(declare-fun b!59143 () Bool)

(declare-fun e!38908 () Bool)

(assert (=> b!59143 (= e!38908 e!38906)))

(declare-fun c!7531 () Bool)

(assert (=> b!59143 (= c!7531 (validKeyInArray!0 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun d!11263 () Bool)

(declare-fun res!32855 () Bool)

(assert (=> d!11263 (=> res!32855 e!38908)))

(assert (=> d!11263 (= res!32855 (bvsge #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(assert (=> d!11263 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3666 newMap!16) (mask!5926 newMap!16)) e!38908)))

(declare-fun b!59144 () Bool)

(assert (=> b!59144 (= e!38906 e!38907)))

(declare-fun lt!23874 () (_ BitVec 64))

(assert (=> b!59144 (= lt!23874 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23873 () Unit!1547)

(declare-fun lemmaArrayContainsFromImpliesContainsFromZero!0 (array!3703 (_ BitVec 64) (_ BitVec 32)) Unit!1547)

(assert (=> b!59144 (= lt!23873 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3666 newMap!16) lt!23874 #b00000000000000000000000000000000))))

(assert (=> b!59144 (arrayContainsKey!0 (_keys!3666 newMap!16) lt!23874 #b00000000000000000000000000000000)))

(declare-fun lt!23875 () Unit!1547)

(assert (=> b!59144 (= lt!23875 lt!23873)))

(declare-fun res!32854 () Bool)

(assert (=> b!59144 (= res!32854 (= (seekEntryOrOpen!0 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000) (_keys!3666 newMap!16) (mask!5926 newMap!16)) (Found!221 #b00000000000000000000000000000000)))))

(assert (=> b!59144 (=> (not res!32854) (not e!38907))))

(assert (= (and d!11263 (not res!32855)) b!59143))

(assert (= (and b!59143 c!7531) b!59144))

(assert (= (and b!59143 (not c!7531)) b!59141))

(assert (= (and b!59144 res!32854) b!59142))

(assert (= (or b!59142 b!59141) bm!4412))

(declare-fun m!50821 () Bool)

(assert (=> bm!4412 m!50821))

(assert (=> b!59143 m!50693))

(assert (=> b!59143 m!50693))

(assert (=> b!59143 m!50695))

(assert (=> b!59144 m!50693))

(declare-fun m!50823 () Bool)

(assert (=> b!59144 m!50823))

(declare-fun m!50825 () Bool)

(assert (=> b!59144 m!50825))

(assert (=> b!59144 m!50693))

(declare-fun m!50827 () Bool)

(assert (=> b!59144 m!50827))

(assert (=> b!58928 d!11263))

(declare-fun d!11265 () Bool)

(assert (=> d!11265 (= (inRange!0 (ite c!7461 (ite c!7465 (index!3008 lt!23708) (ite c!7460 (index!3007 lt!23717) (index!3010 lt!23717))) (ite c!7467 (index!3008 lt!23718) (ite c!7471 (index!3007 lt!23700) (index!3010 lt!23700)))) (mask!5926 newMap!16)) (and (bvsge (ite c!7461 (ite c!7465 (index!3008 lt!23708) (ite c!7460 (index!3007 lt!23717) (index!3010 lt!23717))) (ite c!7467 (index!3008 lt!23718) (ite c!7471 (index!3007 lt!23700) (index!3010 lt!23700)))) #b00000000000000000000000000000000) (bvslt (ite c!7461 (ite c!7465 (index!3008 lt!23708) (ite c!7460 (index!3007 lt!23717) (index!3010 lt!23717))) (ite c!7467 (index!3008 lt!23718) (ite c!7471 (index!3007 lt!23700) (index!3010 lt!23700)))) (bvadd (mask!5926 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4352 d!11265))

(declare-fun d!11267 () Bool)

(assert (=> d!11267 (= (apply!66 lt!23783 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1075 (getValueByKey!125 (toList!687 lt!23783) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!2560 () Bool)

(assert (= bs!2560 d!11267))

(assert (=> bs!2560 m!50573))

(declare-fun m!50829 () Bool)

(assert (=> bs!2560 m!50829))

(assert (=> bs!2560 m!50829))

(declare-fun m!50831 () Bool)

(assert (=> bs!2560 m!50831))

(assert (=> b!58984 d!11267))

(declare-fun d!11269 () Bool)

(declare-fun c!7532 () Bool)

(assert (=> d!11269 (= c!7532 ((_ is ValueCellFull!854) (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!38909 () V!2841)

(assert (=> d!11269 (= (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!38909)))

(declare-fun b!59145 () Bool)

(assert (=> b!59145 (= e!38909 (get!1073 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!59146 () Bool)

(assert (=> b!59146 (= e!38909 (get!1074 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11269 c!7532) b!59145))

(assert (= (and d!11269 (not c!7532)) b!59146))

(assert (=> b!59145 m!50587))

(assert (=> b!59145 m!50393))

(declare-fun m!50833 () Bool)

(assert (=> b!59145 m!50833))

(assert (=> b!59146 m!50587))

(assert (=> b!59146 m!50393))

(declare-fun m!50835 () Bool)

(assert (=> b!59146 m!50835))

(assert (=> b!58984 d!11269))

(assert (=> d!11217 d!11199))

(declare-fun d!11271 () Bool)

(declare-fun e!38910 () Bool)

(assert (=> d!11271 e!38910))

(declare-fun res!32856 () Bool)

(assert (=> d!11271 (=> res!32856 e!38910)))

(declare-fun lt!23878 () Bool)

(assert (=> d!11271 (= res!32856 (not lt!23878))))

(declare-fun lt!23877 () Bool)

(assert (=> d!11271 (= lt!23878 lt!23877)))

(declare-fun lt!23876 () Unit!1547)

(declare-fun e!38911 () Unit!1547)

(assert (=> d!11271 (= lt!23876 e!38911)))

(declare-fun c!7533 () Bool)

(assert (=> d!11271 (= c!7533 lt!23877)))

(assert (=> d!11271 (= lt!23877 (containsKey!128 (toList!687 call!4351) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(assert (=> d!11271 (= (contains!678 call!4351 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) lt!23878)))

(declare-fun b!59147 () Bool)

(declare-fun lt!23879 () Unit!1547)

(assert (=> b!59147 (= e!38911 lt!23879)))

(assert (=> b!59147 (= lt!23879 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 call!4351) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(assert (=> b!59147 (isDefined!77 (getValueByKey!125 (toList!687 call!4351) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(declare-fun b!59148 () Bool)

(declare-fun Unit!1557 () Unit!1547)

(assert (=> b!59148 (= e!38911 Unit!1557)))

(declare-fun b!59149 () Bool)

(assert (=> b!59149 (= e!38910 (isDefined!77 (getValueByKey!125 (toList!687 call!4351) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355))))))

(assert (= (and d!11271 c!7533) b!59147))

(assert (= (and d!11271 (not c!7533)) b!59148))

(assert (= (and d!11271 (not res!32856)) b!59149))

(assert (=> d!11271 m!50367))

(declare-fun m!50837 () Bool)

(assert (=> d!11271 m!50837))

(assert (=> b!59147 m!50367))

(declare-fun m!50839 () Bool)

(assert (=> b!59147 m!50839))

(assert (=> b!59147 m!50367))

(declare-fun m!50841 () Bool)

(assert (=> b!59147 m!50841))

(assert (=> b!59147 m!50841))

(declare-fun m!50843 () Bool)

(assert (=> b!59147 m!50843))

(assert (=> b!59149 m!50367))

(assert (=> b!59149 m!50841))

(assert (=> b!59149 m!50841))

(assert (=> b!59149 m!50843))

(assert (=> b!58902 d!11271))

(declare-fun d!11273 () Bool)

(declare-fun e!38912 () Bool)

(assert (=> d!11273 e!38912))

(declare-fun res!32857 () Bool)

(assert (=> d!11273 (=> res!32857 e!38912)))

(declare-fun lt!23882 () Bool)

(assert (=> d!11273 (= res!32857 (not lt!23882))))

(declare-fun lt!23881 () Bool)

(assert (=> d!11273 (= lt!23882 lt!23881)))

(declare-fun lt!23880 () Unit!1547)

(declare-fun e!38913 () Unit!1547)

(assert (=> d!11273 (= lt!23880 e!38913)))

(declare-fun c!7534 () Bool)

(assert (=> d!11273 (= c!7534 lt!23881)))

(assert (=> d!11273 (= lt!23881 (containsKey!128 (toList!687 lt!23783) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11273 (= (contains!678 lt!23783 #b1000000000000000000000000000000000000000000000000000000000000000) lt!23882)))

(declare-fun b!59150 () Bool)

(declare-fun lt!23883 () Unit!1547)

(assert (=> b!59150 (= e!38913 lt!23883)))

(assert (=> b!59150 (= lt!23883 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 lt!23783) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59150 (isDefined!77 (getValueByKey!125 (toList!687 lt!23783) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59151 () Bool)

(declare-fun Unit!1558 () Unit!1547)

(assert (=> b!59151 (= e!38913 Unit!1558)))

(declare-fun b!59152 () Bool)

(assert (=> b!59152 (= e!38912 (isDefined!77 (getValueByKey!125 (toList!687 lt!23783) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11273 c!7534) b!59150))

(assert (= (and d!11273 (not c!7534)) b!59151))

(assert (= (and d!11273 (not res!32857)) b!59152))

(declare-fun m!50845 () Bool)

(assert (=> d!11273 m!50845))

(declare-fun m!50847 () Bool)

(assert (=> b!59150 m!50847))

(assert (=> b!59150 m!50645))

(assert (=> b!59150 m!50645))

(declare-fun m!50849 () Bool)

(assert (=> b!59150 m!50849))

(assert (=> b!59152 m!50645))

(assert (=> b!59152 m!50645))

(assert (=> b!59152 m!50849))

(assert (=> bm!4390 d!11273))

(declare-fun bm!4413 () Bool)

(declare-fun call!4419 () ListLongMap!1343)

(declare-fun call!4416 () ListLongMap!1343)

(assert (=> bm!4413 (= call!4419 call!4416)))

(declare-fun c!7535 () Bool)

(declare-fun b!59153 () Bool)

(assert (=> b!59153 (= c!7535 (and (not (= (bvand (ite c!7472 (ite c!7473 (extraKeys!1929 newMap!16) lt!23721) (extraKeys!1929 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite c!7472 (ite c!7473 (extraKeys!1929 newMap!16) lt!23721) (extraKeys!1929 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!38918 () ListLongMap!1343)

(declare-fun e!38924 () ListLongMap!1343)

(assert (=> b!59153 (= e!38918 e!38924)))

(declare-fun b!59154 () Bool)

(declare-fun e!38925 () Bool)

(declare-fun call!4417 () Bool)

(assert (=> b!59154 (= e!38925 (not call!4417))))

(declare-fun bm!4414 () Bool)

(declare-fun call!4418 () ListLongMap!1343)

(assert (=> bm!4414 (= call!4418 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (ite c!7472 (_values!2025 newMap!16) lt!23706) (mask!5926 newMap!16) (ite c!7472 (ite c!7473 (extraKeys!1929 newMap!16) lt!23721) (extraKeys!1929 newMap!16)) (zeroValue!1958 newMap!16) (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun b!59155 () Bool)

(declare-fun e!38916 () Bool)

(declare-fun e!38923 () Bool)

(assert (=> b!59155 (= e!38916 e!38923)))

(declare-fun res!32858 () Bool)

(declare-fun call!4421 () Bool)

(assert (=> b!59155 (= res!32858 call!4421)))

(assert (=> b!59155 (=> (not res!32858) (not e!38923))))

(declare-fun b!59156 () Bool)

(declare-fun e!38919 () Bool)

(declare-fun e!38922 () Bool)

(assert (=> b!59156 (= e!38919 e!38922)))

(declare-fun res!32866 () Bool)

(assert (=> b!59156 (=> (not res!32866) (not e!38922))))

(declare-fun lt!23896 () ListLongMap!1343)

(assert (=> b!59156 (= res!32866 (contains!678 lt!23896 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59156 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(declare-fun b!59157 () Bool)

(declare-fun e!38926 () ListLongMap!1343)

(assert (=> b!59157 (= e!38926 e!38918)))

(declare-fun c!7539 () Bool)

(assert (=> b!59157 (= c!7539 (and (not (= (bvand (ite c!7472 (ite c!7473 (extraKeys!1929 newMap!16) lt!23721) (extraKeys!1929 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite c!7472 (ite c!7473 (extraKeys!1929 newMap!16) lt!23721) (extraKeys!1929 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun d!11275 () Bool)

(declare-fun e!38914 () Bool)

(assert (=> d!11275 e!38914))

(declare-fun res!32862 () Bool)

(assert (=> d!11275 (=> (not res!32862) (not e!38914))))

(assert (=> d!11275 (= res!32862 (or (bvsge #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))))

(declare-fun lt!23904 () ListLongMap!1343)

(assert (=> d!11275 (= lt!23896 lt!23904)))

(declare-fun lt!23886 () Unit!1547)

(declare-fun e!38917 () Unit!1547)

(assert (=> d!11275 (= lt!23886 e!38917)))

(declare-fun c!7540 () Bool)

(declare-fun e!38921 () Bool)

(assert (=> d!11275 (= c!7540 e!38921)))

(declare-fun res!32863 () Bool)

(assert (=> d!11275 (=> (not res!32863) (not e!38921))))

(assert (=> d!11275 (= res!32863 (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(assert (=> d!11275 (= lt!23904 e!38926)))

(declare-fun c!7537 () Bool)

(assert (=> d!11275 (= c!7537 (and (not (= (bvand (ite c!7472 (ite c!7473 (extraKeys!1929 newMap!16) lt!23721) (extraKeys!1929 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite c!7472 (ite c!7473 (extraKeys!1929 newMap!16) lt!23721) (extraKeys!1929 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11275 (validMask!0 (mask!5926 newMap!16))))

(assert (=> d!11275 (= (getCurrentListMap!388 (_keys!3666 newMap!16) (ite c!7472 (_values!2025 newMap!16) lt!23706) (mask!5926 newMap!16) (ite c!7472 (ite c!7473 (extraKeys!1929 newMap!16) lt!23721) (extraKeys!1929 newMap!16)) (zeroValue!1958 newMap!16) (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) lt!23896)))

(declare-fun b!59158 () Bool)

(declare-fun lt!23885 () Unit!1547)

(assert (=> b!59158 (= e!38917 lt!23885)))

(declare-fun lt!23888 () ListLongMap!1343)

(assert (=> b!59158 (= lt!23888 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (ite c!7472 (_values!2025 newMap!16) lt!23706) (mask!5926 newMap!16) (ite c!7472 (ite c!7473 (extraKeys!1929 newMap!16) lt!23721) (extraKeys!1929 newMap!16)) (zeroValue!1958 newMap!16) (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!23902 () (_ BitVec 64))

(assert (=> b!59158 (= lt!23902 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23895 () (_ BitVec 64))

(assert (=> b!59158 (= lt!23895 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23884 () Unit!1547)

(assert (=> b!59158 (= lt!23884 (addStillContains!42 lt!23888 lt!23902 (zeroValue!1958 newMap!16) lt!23895))))

(assert (=> b!59158 (contains!678 (+!80 lt!23888 (tuple2!2015 lt!23902 (zeroValue!1958 newMap!16))) lt!23895)))

(declare-fun lt!23887 () Unit!1547)

(assert (=> b!59158 (= lt!23887 lt!23884)))

(declare-fun lt!23901 () ListLongMap!1343)

(assert (=> b!59158 (= lt!23901 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (ite c!7472 (_values!2025 newMap!16) lt!23706) (mask!5926 newMap!16) (ite c!7472 (ite c!7473 (extraKeys!1929 newMap!16) lt!23721) (extraKeys!1929 newMap!16)) (zeroValue!1958 newMap!16) (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!23890 () (_ BitVec 64))

(assert (=> b!59158 (= lt!23890 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23891 () (_ BitVec 64))

(assert (=> b!59158 (= lt!23891 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23903 () Unit!1547)

(assert (=> b!59158 (= lt!23903 (addApplyDifferent!42 lt!23901 lt!23890 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)) lt!23891))))

(assert (=> b!59158 (= (apply!66 (+!80 lt!23901 (tuple2!2015 lt!23890 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))) lt!23891) (apply!66 lt!23901 lt!23891))))

(declare-fun lt!23893 () Unit!1547)

(assert (=> b!59158 (= lt!23893 lt!23903)))

(declare-fun lt!23894 () ListLongMap!1343)

(assert (=> b!59158 (= lt!23894 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (ite c!7472 (_values!2025 newMap!16) lt!23706) (mask!5926 newMap!16) (ite c!7472 (ite c!7473 (extraKeys!1929 newMap!16) lt!23721) (extraKeys!1929 newMap!16)) (zeroValue!1958 newMap!16) (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!23900 () (_ BitVec 64))

(assert (=> b!59158 (= lt!23900 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23892 () (_ BitVec 64))

(assert (=> b!59158 (= lt!23892 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23905 () Unit!1547)

(assert (=> b!59158 (= lt!23905 (addApplyDifferent!42 lt!23894 lt!23900 (zeroValue!1958 newMap!16) lt!23892))))

(assert (=> b!59158 (= (apply!66 (+!80 lt!23894 (tuple2!2015 lt!23900 (zeroValue!1958 newMap!16))) lt!23892) (apply!66 lt!23894 lt!23892))))

(declare-fun lt!23898 () Unit!1547)

(assert (=> b!59158 (= lt!23898 lt!23905)))

(declare-fun lt!23889 () ListLongMap!1343)

(assert (=> b!59158 (= lt!23889 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (ite c!7472 (_values!2025 newMap!16) lt!23706) (mask!5926 newMap!16) (ite c!7472 (ite c!7473 (extraKeys!1929 newMap!16) lt!23721) (extraKeys!1929 newMap!16)) (zeroValue!1958 newMap!16) (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!23897 () (_ BitVec 64))

(assert (=> b!59158 (= lt!23897 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23899 () (_ BitVec 64))

(assert (=> b!59158 (= lt!23899 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!59158 (= lt!23885 (addApplyDifferent!42 lt!23889 lt!23897 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)) lt!23899))))

(assert (=> b!59158 (= (apply!66 (+!80 lt!23889 (tuple2!2015 lt!23897 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))) lt!23899) (apply!66 lt!23889 lt!23899))))

(declare-fun b!59159 () Bool)

(assert (=> b!59159 (= e!38924 call!4419)))

(declare-fun b!59160 () Bool)

(declare-fun call!4422 () ListLongMap!1343)

(assert (=> b!59160 (= e!38924 call!4422)))

(declare-fun bm!4415 () Bool)

(assert (=> bm!4415 (= call!4416 call!4418)))

(declare-fun bm!4416 () Bool)

(declare-fun call!4420 () ListLongMap!1343)

(assert (=> bm!4416 (= call!4420 (+!80 (ite c!7537 call!4418 (ite c!7539 call!4416 call!4419)) (ite (or c!7537 c!7539) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))))))

(declare-fun b!59161 () Bool)

(assert (=> b!59161 (= e!38923 (= (apply!66 lt!23896 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1958 newMap!16)))))

(declare-fun b!59162 () Bool)

(assert (=> b!59162 (= e!38926 (+!80 call!4420 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))))))

(declare-fun b!59163 () Bool)

(assert (=> b!59163 (= e!38918 call!4422)))

(declare-fun b!59164 () Bool)

(declare-fun res!32860 () Bool)

(assert (=> b!59164 (=> (not res!32860) (not e!38914))))

(assert (=> b!59164 (= res!32860 e!38916)))

(declare-fun c!7536 () Bool)

(assert (=> b!59164 (= c!7536 (not (= (bvand (ite c!7472 (ite c!7473 (extraKeys!1929 newMap!16) lt!23721) (extraKeys!1929 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!59165 () Bool)

(assert (=> b!59165 (= e!38922 (= (apply!66 lt!23896 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)) (get!1072 (select (arr!1773 (ite c!7472 (_values!2025 newMap!16) lt!23706)) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!59165 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (ite c!7472 (_values!2025 newMap!16) lt!23706))))))

(assert (=> b!59165 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(declare-fun b!59166 () Bool)

(declare-fun e!38920 () Bool)

(assert (=> b!59166 (= e!38925 e!38920)))

(declare-fun res!32859 () Bool)

(assert (=> b!59166 (= res!32859 call!4417)))

(assert (=> b!59166 (=> (not res!32859) (not e!38920))))

(declare-fun bm!4417 () Bool)

(assert (=> bm!4417 (= call!4422 call!4420)))

(declare-fun b!59167 () Bool)

(assert (=> b!59167 (= e!38916 (not call!4421))))

(declare-fun bm!4418 () Bool)

(assert (=> bm!4418 (= call!4417 (contains!678 lt!23896 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4419 () Bool)

(assert (=> bm!4419 (= call!4421 (contains!678 lt!23896 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59168 () Bool)

(declare-fun e!38915 () Bool)

(assert (=> b!59168 (= e!38915 (validKeyInArray!0 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59169 () Bool)

(declare-fun Unit!1559 () Unit!1547)

(assert (=> b!59169 (= e!38917 Unit!1559)))

(declare-fun b!59170 () Bool)

(assert (=> b!59170 (= e!38914 e!38925)))

(declare-fun c!7538 () Bool)

(assert (=> b!59170 (= c!7538 (not (= (bvand (ite c!7472 (ite c!7473 (extraKeys!1929 newMap!16) lt!23721) (extraKeys!1929 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!59171 () Bool)

(assert (=> b!59171 (= e!38920 (= (apply!66 lt!23896 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))))

(declare-fun b!59172 () Bool)

(assert (=> b!59172 (= e!38921 (validKeyInArray!0 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59173 () Bool)

(declare-fun res!32865 () Bool)

(assert (=> b!59173 (=> (not res!32865) (not e!38914))))

(assert (=> b!59173 (= res!32865 e!38919)))

(declare-fun res!32861 () Bool)

(assert (=> b!59173 (=> res!32861 e!38919)))

(assert (=> b!59173 (= res!32861 (not e!38915))))

(declare-fun res!32864 () Bool)

(assert (=> b!59173 (=> (not res!32864) (not e!38915))))

(assert (=> b!59173 (= res!32864 (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(assert (= (and d!11275 c!7537) b!59162))

(assert (= (and d!11275 (not c!7537)) b!59157))

(assert (= (and b!59157 c!7539) b!59163))

(assert (= (and b!59157 (not c!7539)) b!59153))

(assert (= (and b!59153 c!7535) b!59160))

(assert (= (and b!59153 (not c!7535)) b!59159))

(assert (= (or b!59160 b!59159) bm!4413))

(assert (= (or b!59163 bm!4413) bm!4415))

(assert (= (or b!59163 b!59160) bm!4417))

(assert (= (or b!59162 bm!4415) bm!4414))

(assert (= (or b!59162 bm!4417) bm!4416))

(assert (= (and d!11275 res!32863) b!59172))

(assert (= (and d!11275 c!7540) b!59158))

(assert (= (and d!11275 (not c!7540)) b!59169))

(assert (= (and d!11275 res!32862) b!59173))

(assert (= (and b!59173 res!32864) b!59168))

(assert (= (and b!59173 (not res!32861)) b!59156))

(assert (= (and b!59156 res!32866) b!59165))

(assert (= (and b!59173 res!32865) b!59164))

(assert (= (and b!59164 c!7536) b!59155))

(assert (= (and b!59164 (not c!7536)) b!59167))

(assert (= (and b!59155 res!32858) b!59161))

(assert (= (or b!59155 b!59167) bm!4419))

(assert (= (and b!59164 res!32860) b!59170))

(assert (= (and b!59170 c!7538) b!59166))

(assert (= (and b!59170 (not c!7538)) b!59154))

(assert (= (and b!59166 res!32859) b!59171))

(assert (= (or b!59166 b!59154) bm!4418))

(declare-fun b_lambda!2595 () Bool)

(assert (=> (not b_lambda!2595) (not b!59165)))

(assert (=> b!59165 t!4767))

(declare-fun b_and!3577 () Bool)

(assert (= b_and!3573 (and (=> t!4767 result!2381) b_and!3577)))

(assert (=> b!59165 t!4769))

(declare-fun b_and!3579 () Bool)

(assert (= b_and!3575 (and (=> t!4769 result!2383) b_and!3579)))

(declare-fun m!50851 () Bool)

(assert (=> b!59161 m!50851))

(assert (=> b!59172 m!50693))

(assert (=> b!59172 m!50693))

(assert (=> b!59172 m!50695))

(declare-fun m!50853 () Bool)

(assert (=> b!59162 m!50853))

(assert (=> b!59156 m!50693))

(assert (=> b!59156 m!50693))

(declare-fun m!50855 () Bool)

(assert (=> b!59156 m!50855))

(declare-fun m!50857 () Bool)

(assert (=> bm!4419 m!50857))

(declare-fun m!50859 () Bool)

(assert (=> b!59171 m!50859))

(declare-fun m!50861 () Bool)

(assert (=> bm!4418 m!50861))

(assert (=> b!59165 m!50707))

(declare-fun m!50863 () Bool)

(assert (=> b!59165 m!50863))

(assert (=> b!59165 m!50693))

(assert (=> b!59165 m!50693))

(declare-fun m!50865 () Bool)

(assert (=> b!59165 m!50865))

(assert (=> b!59165 m!50863))

(assert (=> b!59165 m!50707))

(declare-fun m!50867 () Bool)

(assert (=> b!59165 m!50867))

(declare-fun m!50869 () Bool)

(assert (=> bm!4416 m!50869))

(assert (=> d!11275 m!50667))

(assert (=> b!59168 m!50693))

(assert (=> b!59168 m!50693))

(assert (=> b!59168 m!50695))

(declare-fun m!50871 () Bool)

(assert (=> bm!4414 m!50871))

(declare-fun m!50873 () Bool)

(assert (=> b!59158 m!50873))

(declare-fun m!50875 () Bool)

(assert (=> b!59158 m!50875))

(declare-fun m!50877 () Bool)

(assert (=> b!59158 m!50877))

(assert (=> b!59158 m!50693))

(declare-fun m!50879 () Bool)

(assert (=> b!59158 m!50879))

(declare-fun m!50881 () Bool)

(assert (=> b!59158 m!50881))

(declare-fun m!50883 () Bool)

(assert (=> b!59158 m!50883))

(declare-fun m!50885 () Bool)

(assert (=> b!59158 m!50885))

(declare-fun m!50887 () Bool)

(assert (=> b!59158 m!50887))

(declare-fun m!50889 () Bool)

(assert (=> b!59158 m!50889))

(declare-fun m!50891 () Bool)

(assert (=> b!59158 m!50891))

(assert (=> b!59158 m!50873))

(declare-fun m!50893 () Bool)

(assert (=> b!59158 m!50893))

(declare-fun m!50895 () Bool)

(assert (=> b!59158 m!50895))

(declare-fun m!50897 () Bool)

(assert (=> b!59158 m!50897))

(assert (=> b!59158 m!50895))

(declare-fun m!50899 () Bool)

(assert (=> b!59158 m!50899))

(declare-fun m!50901 () Bool)

(assert (=> b!59158 m!50901))

(assert (=> b!59158 m!50871))

(assert (=> b!59158 m!50885))

(assert (=> b!59158 m!50879))

(assert (=> bm!4355 d!11275))

(declare-fun d!11277 () Bool)

(declare-fun e!38929 () Bool)

(assert (=> d!11277 e!38929))

(declare-fun res!32871 () Bool)

(assert (=> d!11277 (=> (not res!32871) (not e!38929))))

(declare-fun lt!23916 () ListLongMap!1343)

(assert (=> d!11277 (= res!32871 (contains!678 lt!23916 (_1!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!23917 () List!1423)

(assert (=> d!11277 (= lt!23916 (ListLongMap!1344 lt!23917))))

(declare-fun lt!23915 () Unit!1547)

(declare-fun lt!23914 () Unit!1547)

(assert (=> d!11277 (= lt!23915 lt!23914)))

(assert (=> d!11277 (= (getValueByKey!125 lt!23917 (_1!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!130 (_2!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lemmaContainsTupThenGetReturnValue!42 (List!1423 (_ BitVec 64) V!2841) Unit!1547)

(assert (=> d!11277 (= lt!23914 (lemmaContainsTupThenGetReturnValue!42 lt!23917 (_1!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun insertStrictlySorted!45 (List!1423 (_ BitVec 64) V!2841) List!1423)

(assert (=> d!11277 (= lt!23917 (insertStrictlySorted!45 (toList!687 e!38759) (_1!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!11277 (= (+!80 e!38759 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!23916)))

(declare-fun b!59178 () Bool)

(declare-fun res!32872 () Bool)

(assert (=> b!59178 (=> (not res!32872) (not e!38929))))

(assert (=> b!59178 (= res!32872 (= (getValueByKey!125 (toList!687 lt!23916) (_1!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!130 (_2!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!59179 () Bool)

(declare-fun contains!680 (List!1423 tuple2!2014) Bool)

(assert (=> b!59179 (= e!38929 (contains!680 (toList!687 lt!23916) (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!11277 res!32871) b!59178))

(assert (= (and b!59178 res!32872) b!59179))

(declare-fun m!50903 () Bool)

(assert (=> d!11277 m!50903))

(declare-fun m!50905 () Bool)

(assert (=> d!11277 m!50905))

(declare-fun m!50907 () Bool)

(assert (=> d!11277 m!50907))

(declare-fun m!50909 () Bool)

(assert (=> d!11277 m!50909))

(declare-fun m!50911 () Bool)

(assert (=> b!59178 m!50911))

(declare-fun m!50913 () Bool)

(assert (=> b!59179 m!50913))

(assert (=> bm!4347 d!11277))

(declare-fun d!11279 () Bool)

(assert (=> d!11279 (= (validKeyInArray!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (and (not (= (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!58987 d!11279))

(declare-fun d!11281 () Bool)

(declare-fun res!32873 () Bool)

(declare-fun e!38930 () Bool)

(assert (=> d!11281 (=> (not res!32873) (not e!38930))))

(assert (=> d!11281 (= res!32873 (simpleValid!42 (_2!1019 lt!23711)))))

(assert (=> d!11281 (= (valid!263 (_2!1019 lt!23711)) e!38930)))

(declare-fun b!59180 () Bool)

(declare-fun res!32874 () Bool)

(assert (=> b!59180 (=> (not res!32874) (not e!38930))))

(assert (=> b!59180 (= res!32874 (= (arrayCountValidKeys!0 (_keys!3666 (_2!1019 lt!23711)) #b00000000000000000000000000000000 (size!2002 (_keys!3666 (_2!1019 lt!23711)))) (_size!357 (_2!1019 lt!23711))))))

(declare-fun b!59181 () Bool)

(declare-fun res!32875 () Bool)

(assert (=> b!59181 (=> (not res!32875) (not e!38930))))

(assert (=> b!59181 (= res!32875 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3666 (_2!1019 lt!23711)) (mask!5926 (_2!1019 lt!23711))))))

(declare-fun b!59182 () Bool)

(assert (=> b!59182 (= e!38930 (arrayNoDuplicates!0 (_keys!3666 (_2!1019 lt!23711)) #b00000000000000000000000000000000 Nil!1419))))

(assert (= (and d!11281 res!32873) b!59180))

(assert (= (and b!59180 res!32874) b!59181))

(assert (= (and b!59181 res!32875) b!59182))

(declare-fun m!50915 () Bool)

(assert (=> d!11281 m!50915))

(declare-fun m!50917 () Bool)

(assert (=> b!59180 m!50917))

(declare-fun m!50919 () Bool)

(assert (=> b!59181 m!50919))

(declare-fun m!50921 () Bool)

(assert (=> b!59182 m!50921))

(assert (=> d!11207 d!11281))

(assert (=> d!11207 d!11211))

(declare-fun b!59207 () Bool)

(declare-fun e!38951 () ListLongMap!1343)

(assert (=> b!59207 (= e!38951 (ListLongMap!1344 Nil!1420))))

(declare-fun b!59208 () Bool)

(declare-fun e!38950 () ListLongMap!1343)

(declare-fun call!4425 () ListLongMap!1343)

(assert (=> b!59208 (= e!38950 call!4425)))

(declare-fun b!59209 () Bool)

(declare-fun e!38947 () Bool)

(assert (=> b!59209 (= e!38947 (validKeyInArray!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!59209 (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000)))

(declare-fun b!59210 () Bool)

(declare-fun res!32885 () Bool)

(declare-fun e!38946 () Bool)

(assert (=> b!59210 (=> (not res!32885) (not e!38946))))

(declare-fun lt!23935 () ListLongMap!1343)

(assert (=> b!59210 (= res!32885 (not (contains!678 lt!23935 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!59211 () Bool)

(declare-fun e!38945 () Bool)

(assert (=> b!59211 (= e!38945 (= lt!23935 (getCurrentListMapNoExtraKeys!44 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (_values!2025 (v!2382 (underlying!225 thiss!992))) (mask!5926 (v!2382 (underlying!225 thiss!992))) (extraKeys!1929 (v!2382 (underlying!225 thiss!992))) (zeroValue!1958 (v!2382 (underlying!225 thiss!992))) (minValue!1958 (v!2382 (underlying!225 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))))))))

(declare-fun bm!4422 () Bool)

(assert (=> bm!4422 (= call!4425 (getCurrentListMapNoExtraKeys!44 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (_values!2025 (v!2382 (underlying!225 thiss!992))) (mask!5926 (v!2382 (underlying!225 thiss!992))) (extraKeys!1929 (v!2382 (underlying!225 thiss!992))) (zeroValue!1958 (v!2382 (underlying!225 thiss!992))) (minValue!1958 (v!2382 (underlying!225 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2042 (v!2382 (underlying!225 thiss!992)))))))

(declare-fun b!59212 () Bool)

(declare-fun isEmpty!300 (ListLongMap!1343) Bool)

(assert (=> b!59212 (= e!38945 (isEmpty!300 lt!23935))))

(declare-fun b!59213 () Bool)

(declare-fun lt!23932 () Unit!1547)

(declare-fun lt!23936 () Unit!1547)

(assert (=> b!59213 (= lt!23932 lt!23936)))

(declare-fun lt!23937 () (_ BitVec 64))

(declare-fun lt!23938 () (_ BitVec 64))

(declare-fun lt!23933 () ListLongMap!1343)

(declare-fun lt!23934 () V!2841)

(assert (=> b!59213 (not (contains!678 (+!80 lt!23933 (tuple2!2015 lt!23937 lt!23934)) lt!23938))))

(declare-fun addStillNotContains!17 (ListLongMap!1343 (_ BitVec 64) V!2841 (_ BitVec 64)) Unit!1547)

(assert (=> b!59213 (= lt!23936 (addStillNotContains!17 lt!23933 lt!23937 lt!23934 lt!23938))))

(assert (=> b!59213 (= lt!23938 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!59213 (= lt!23934 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!59213 (= lt!23937 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!59213 (= lt!23933 call!4425)))

(assert (=> b!59213 (= e!38950 (+!80 call!4425 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!59214 () Bool)

(declare-fun e!38949 () Bool)

(declare-fun e!38948 () Bool)

(assert (=> b!59214 (= e!38949 e!38948)))

(assert (=> b!59214 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992))))))))

(declare-fun res!32886 () Bool)

(assert (=> b!59214 (= res!32886 (contains!678 lt!23935 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!59214 (=> (not res!32886) (not e!38948))))

(declare-fun b!59215 () Bool)

(assert (=> b!59215 (= e!38949 e!38945)))

(declare-fun c!7550 () Bool)

(assert (=> b!59215 (= c!7550 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992))))))))

(declare-fun b!59216 () Bool)

(assert (=> b!59216 (= e!38946 e!38949)))

(declare-fun c!7549 () Bool)

(assert (=> b!59216 (= c!7549 e!38947)))

(declare-fun res!32887 () Bool)

(assert (=> b!59216 (=> (not res!32887) (not e!38947))))

(assert (=> b!59216 (= res!32887 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992))))))))

(declare-fun b!59217 () Bool)

(assert (=> b!59217 (= e!38951 e!38950)))

(declare-fun c!7552 () Bool)

(assert (=> b!59217 (= c!7552 (validKeyInArray!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!59218 () Bool)

(assert (=> b!59218 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992))))))))

(assert (=> b!59218 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2003 (_values!2025 (v!2382 (underlying!225 thiss!992))))))))

(assert (=> b!59218 (= e!38948 (= (apply!66 lt!23935 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!11283 () Bool)

(assert (=> d!11283 e!38946))

(declare-fun res!32884 () Bool)

(assert (=> d!11283 (=> (not res!32884) (not e!38946))))

(assert (=> d!11283 (= res!32884 (not (contains!678 lt!23935 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!11283 (= lt!23935 e!38951)))

(declare-fun c!7551 () Bool)

(assert (=> d!11283 (= c!7551 (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992))))))))

(assert (=> d!11283 (validMask!0 (mask!5926 (v!2382 (underlying!225 thiss!992))))))

(assert (=> d!11283 (= (getCurrentListMapNoExtraKeys!44 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (_values!2025 (v!2382 (underlying!225 thiss!992))) (mask!5926 (v!2382 (underlying!225 thiss!992))) (extraKeys!1929 (v!2382 (underlying!225 thiss!992))) (zeroValue!1958 (v!2382 (underlying!225 thiss!992))) (minValue!1958 (v!2382 (underlying!225 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2042 (v!2382 (underlying!225 thiss!992)))) lt!23935)))

(assert (= (and d!11283 c!7551) b!59207))

(assert (= (and d!11283 (not c!7551)) b!59217))

(assert (= (and b!59217 c!7552) b!59213))

(assert (= (and b!59217 (not c!7552)) b!59208))

(assert (= (or b!59213 b!59208) bm!4422))

(assert (= (and d!11283 res!32884) b!59210))

(assert (= (and b!59210 res!32885) b!59216))

(assert (= (and b!59216 res!32887) b!59209))

(assert (= (and b!59216 c!7549) b!59214))

(assert (= (and b!59216 (not c!7549)) b!59215))

(assert (= (and b!59214 res!32886) b!59218))

(assert (= (and b!59215 c!7550) b!59211))

(assert (= (and b!59215 (not c!7550)) b!59212))

(declare-fun b_lambda!2597 () Bool)

(assert (=> (not b_lambda!2597) (not b!59213)))

(assert (=> b!59213 t!4753))

(declare-fun b_and!3581 () Bool)

(assert (= b_and!3577 (and (=> t!4753 result!2361) b_and!3581)))

(assert (=> b!59213 t!4755))

(declare-fun b_and!3583 () Bool)

(assert (= b_and!3579 (and (=> t!4755 result!2365) b_and!3583)))

(declare-fun b_lambda!2599 () Bool)

(assert (=> (not b_lambda!2599) (not b!59218)))

(assert (=> b!59218 t!4753))

(declare-fun b_and!3585 () Bool)

(assert (= b_and!3581 (and (=> t!4753 result!2361) b_and!3585)))

(assert (=> b!59218 t!4755))

(declare-fun b_and!3587 () Bool)

(assert (= b_and!3583 (and (=> t!4755 result!2365) b_and!3587)))

(declare-fun m!50923 () Bool)

(assert (=> d!11283 m!50923))

(assert (=> d!11283 m!50361))

(assert (=> b!59217 m!50573))

(assert (=> b!59217 m!50573))

(assert (=> b!59217 m!50575))

(declare-fun m!50925 () Bool)

(assert (=> b!59210 m!50925))

(assert (=> b!59209 m!50573))

(assert (=> b!59209 m!50573))

(assert (=> b!59209 m!50575))

(declare-fun m!50927 () Bool)

(assert (=> b!59212 m!50927))

(declare-fun m!50929 () Bool)

(assert (=> bm!4422 m!50929))

(declare-fun m!50931 () Bool)

(assert (=> b!59213 m!50931))

(declare-fun m!50933 () Bool)

(assert (=> b!59213 m!50933))

(declare-fun m!50935 () Bool)

(assert (=> b!59213 m!50935))

(assert (=> b!59213 m!50587))

(assert (=> b!59213 m!50587))

(assert (=> b!59213 m!50393))

(assert (=> b!59213 m!50591))

(assert (=> b!59213 m!50573))

(assert (=> b!59213 m!50393))

(assert (=> b!59213 m!50935))

(declare-fun m!50937 () Bool)

(assert (=> b!59213 m!50937))

(assert (=> b!59214 m!50573))

(assert (=> b!59214 m!50573))

(declare-fun m!50939 () Bool)

(assert (=> b!59214 m!50939))

(assert (=> b!59218 m!50587))

(assert (=> b!59218 m!50587))

(assert (=> b!59218 m!50393))

(assert (=> b!59218 m!50591))

(assert (=> b!59218 m!50573))

(declare-fun m!50941 () Bool)

(assert (=> b!59218 m!50941))

(assert (=> b!59218 m!50573))

(assert (=> b!59218 m!50393))

(assert (=> b!59211 m!50929))

(assert (=> bm!4386 d!11283))

(assert (=> b!58892 d!11247))

(assert (=> b!58991 d!11279))

(declare-fun d!11285 () Bool)

(declare-fun e!38952 () Bool)

(assert (=> d!11285 e!38952))

(declare-fun res!32888 () Bool)

(assert (=> d!11285 (=> res!32888 e!38952)))

(declare-fun lt!23941 () Bool)

(assert (=> d!11285 (= res!32888 (not lt!23941))))

(declare-fun lt!23940 () Bool)

(assert (=> d!11285 (= lt!23941 lt!23940)))

(declare-fun lt!23939 () Unit!1547)

(declare-fun e!38953 () Unit!1547)

(assert (=> d!11285 (= lt!23939 e!38953)))

(declare-fun c!7553 () Bool)

(assert (=> d!11285 (= c!7553 lt!23940)))

(assert (=> d!11285 (= lt!23940 (containsKey!128 (toList!687 lt!23783) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!11285 (= (contains!678 lt!23783 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!23941)))

(declare-fun b!59219 () Bool)

(declare-fun lt!23942 () Unit!1547)

(assert (=> b!59219 (= e!38953 lt!23942)))

(assert (=> b!59219 (= lt!23942 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 lt!23783) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!59219 (isDefined!77 (getValueByKey!125 (toList!687 lt!23783) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!59220 () Bool)

(declare-fun Unit!1560 () Unit!1547)

(assert (=> b!59220 (= e!38953 Unit!1560)))

(declare-fun b!59221 () Bool)

(assert (=> b!59221 (= e!38952 (isDefined!77 (getValueByKey!125 (toList!687 lt!23783) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!11285 c!7553) b!59219))

(assert (= (and d!11285 (not c!7553)) b!59220))

(assert (= (and d!11285 (not res!32888)) b!59221))

(assert (=> d!11285 m!50573))

(declare-fun m!50943 () Bool)

(assert (=> d!11285 m!50943))

(assert (=> b!59219 m!50573))

(declare-fun m!50945 () Bool)

(assert (=> b!59219 m!50945))

(assert (=> b!59219 m!50573))

(assert (=> b!59219 m!50829))

(assert (=> b!59219 m!50829))

(declare-fun m!50947 () Bool)

(assert (=> b!59219 m!50947))

(assert (=> b!59221 m!50573))

(assert (=> b!59221 m!50829))

(assert (=> b!59221 m!50829))

(assert (=> b!59221 m!50947))

(assert (=> b!58975 d!11285))

(assert (=> d!11219 d!11223))

(declare-fun d!11287 () Bool)

(assert (=> d!11287 (not (arrayContainsKey!0 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> d!11287 true))

(declare-fun _$68!31 () Unit!1547)

(assert (=> d!11287 (= (choose!68 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (Cons!1418 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) Nil!1419)) _$68!31)))

(declare-fun bs!2561 () Bool)

(assert (= bs!2561 d!11287))

(assert (=> bs!2561 m!50367))

(assert (=> bs!2561 m!50371))

(assert (=> d!11219 d!11287))

(declare-fun d!11289 () Bool)

(assert (=> d!11289 (= (get!1073 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2381 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(assert (=> b!58919 d!11289))

(declare-fun d!11291 () Bool)

(assert (=> d!11291 (= (apply!66 (+!80 lt!23776 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) lt!23786) (apply!66 lt!23776 lt!23786))))

(declare-fun lt!23945 () Unit!1547)

(declare-fun choose!312 (ListLongMap!1343 (_ BitVec 64) V!2841 (_ BitVec 64)) Unit!1547)

(assert (=> d!11291 (= lt!23945 (choose!312 lt!23776 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992))) lt!23786))))

(declare-fun e!38956 () Bool)

(assert (=> d!11291 e!38956))

(declare-fun res!32891 () Bool)

(assert (=> d!11291 (=> (not res!32891) (not e!38956))))

(assert (=> d!11291 (= res!32891 (contains!678 lt!23776 lt!23786))))

(assert (=> d!11291 (= (addApplyDifferent!42 lt!23776 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992))) lt!23786) lt!23945)))

(declare-fun b!59225 () Bool)

(assert (=> b!59225 (= e!38956 (not (= lt!23786 lt!23784)))))

(assert (= (and d!11291 res!32891) b!59225))

(assert (=> d!11291 m!50607))

(declare-fun m!50949 () Bool)

(assert (=> d!11291 m!50949))

(declare-fun m!50951 () Bool)

(assert (=> d!11291 m!50951))

(assert (=> d!11291 m!50609))

(assert (=> d!11291 m!50609))

(assert (=> d!11291 m!50611))

(assert (=> b!58977 d!11291))

(declare-fun d!11293 () Bool)

(assert (=> d!11293 (= (apply!66 (+!80 lt!23788 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) lt!23778) (get!1075 (getValueByKey!125 (toList!687 (+!80 lt!23788 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!23778)))))

(declare-fun bs!2562 () Bool)

(assert (= bs!2562 d!11293))

(declare-fun m!50953 () Bool)

(assert (=> bs!2562 m!50953))

(assert (=> bs!2562 m!50953))

(declare-fun m!50955 () Bool)

(assert (=> bs!2562 m!50955))

(assert (=> b!58977 d!11293))

(declare-fun d!11295 () Bool)

(declare-fun e!38957 () Bool)

(assert (=> d!11295 e!38957))

(declare-fun res!32892 () Bool)

(assert (=> d!11295 (=> (not res!32892) (not e!38957))))

(declare-fun lt!23948 () ListLongMap!1343)

(assert (=> d!11295 (= res!32892 (contains!678 lt!23948 (_1!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun lt!23949 () List!1423)

(assert (=> d!11295 (= lt!23948 (ListLongMap!1344 lt!23949))))

(declare-fun lt!23947 () Unit!1547)

(declare-fun lt!23946 () Unit!1547)

(assert (=> d!11295 (= lt!23947 lt!23946)))

(assert (=> d!11295 (= (getValueByKey!125 lt!23949 (_1!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) (Some!130 (_2!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(assert (=> d!11295 (= lt!23946 (lemmaContainsTupThenGetReturnValue!42 lt!23949 (_1!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(assert (=> d!11295 (= lt!23949 (insertStrictlySorted!45 (toList!687 lt!23788) (_1!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(assert (=> d!11295 (= (+!80 lt!23788 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) lt!23948)))

(declare-fun b!59226 () Bool)

(declare-fun res!32893 () Bool)

(assert (=> b!59226 (=> (not res!32893) (not e!38957))))

(assert (=> b!59226 (= res!32893 (= (getValueByKey!125 (toList!687 lt!23948) (_1!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) (Some!130 (_2!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(declare-fun b!59227 () Bool)

(assert (=> b!59227 (= e!38957 (contains!680 (toList!687 lt!23948) (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))

(assert (= (and d!11295 res!32892) b!59226))

(assert (= (and b!59226 res!32893) b!59227))

(declare-fun m!50957 () Bool)

(assert (=> d!11295 m!50957))

(declare-fun m!50959 () Bool)

(assert (=> d!11295 m!50959))

(declare-fun m!50961 () Bool)

(assert (=> d!11295 m!50961))

(declare-fun m!50963 () Bool)

(assert (=> d!11295 m!50963))

(declare-fun m!50965 () Bool)

(assert (=> b!59226 m!50965))

(declare-fun m!50967 () Bool)

(assert (=> b!59227 m!50967))

(assert (=> b!58977 d!11295))

(assert (=> b!58977 d!11283))

(declare-fun d!11297 () Bool)

(assert (=> d!11297 (= (apply!66 (+!80 lt!23776 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) lt!23786) (get!1075 (getValueByKey!125 (toList!687 (+!80 lt!23776 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!23786)))))

(declare-fun bs!2563 () Bool)

(assert (= bs!2563 d!11297))

(declare-fun m!50969 () Bool)

(assert (=> bs!2563 m!50969))

(assert (=> bs!2563 m!50969))

(declare-fun m!50971 () Bool)

(assert (=> bs!2563 m!50971))

(assert (=> b!58977 d!11297))

(declare-fun d!11299 () Bool)

(assert (=> d!11299 (= (apply!66 lt!23788 lt!23778) (get!1075 (getValueByKey!125 (toList!687 lt!23788) lt!23778)))))

(declare-fun bs!2564 () Bool)

(assert (= bs!2564 d!11299))

(declare-fun m!50973 () Bool)

(assert (=> bs!2564 m!50973))

(assert (=> bs!2564 m!50973))

(declare-fun m!50975 () Bool)

(assert (=> bs!2564 m!50975))

(assert (=> b!58977 d!11299))

(declare-fun d!11301 () Bool)

(declare-fun e!38958 () Bool)

(assert (=> d!11301 e!38958))

(declare-fun res!32894 () Bool)

(assert (=> d!11301 (=> (not res!32894) (not e!38958))))

(declare-fun lt!23952 () ListLongMap!1343)

(assert (=> d!11301 (= res!32894 (contains!678 lt!23952 (_1!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun lt!23953 () List!1423)

(assert (=> d!11301 (= lt!23952 (ListLongMap!1344 lt!23953))))

(declare-fun lt!23951 () Unit!1547)

(declare-fun lt!23950 () Unit!1547)

(assert (=> d!11301 (= lt!23951 lt!23950)))

(assert (=> d!11301 (= (getValueByKey!125 lt!23953 (_1!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))) (Some!130 (_2!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(assert (=> d!11301 (= lt!23950 (lemmaContainsTupThenGetReturnValue!42 lt!23953 (_1!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(assert (=> d!11301 (= lt!23953 (insertStrictlySorted!45 (toList!687 lt!23775) (_1!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(assert (=> d!11301 (= (+!80 lt!23775 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))) lt!23952)))

(declare-fun b!59228 () Bool)

(declare-fun res!32895 () Bool)

(assert (=> b!59228 (=> (not res!32895) (not e!38958))))

(assert (=> b!59228 (= res!32895 (= (getValueByKey!125 (toList!687 lt!23952) (_1!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))) (Some!130 (_2!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(declare-fun b!59229 () Bool)

(assert (=> b!59229 (= e!38958 (contains!680 (toList!687 lt!23952) (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))))

(assert (= (and d!11301 res!32894) b!59228))

(assert (= (and b!59228 res!32895) b!59229))

(declare-fun m!50977 () Bool)

(assert (=> d!11301 m!50977))

(declare-fun m!50979 () Bool)

(assert (=> d!11301 m!50979))

(declare-fun m!50981 () Bool)

(assert (=> d!11301 m!50981))

(declare-fun m!50983 () Bool)

(assert (=> d!11301 m!50983))

(declare-fun m!50985 () Bool)

(assert (=> b!59228 m!50985))

(declare-fun m!50987 () Bool)

(assert (=> b!59229 m!50987))

(assert (=> b!58977 d!11301))

(declare-fun d!11303 () Bool)

(declare-fun e!38959 () Bool)

(assert (=> d!11303 e!38959))

(declare-fun res!32896 () Bool)

(assert (=> d!11303 (=> (not res!32896) (not e!38959))))

(declare-fun lt!23956 () ListLongMap!1343)

(assert (=> d!11303 (= res!32896 (contains!678 lt!23956 (_1!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun lt!23957 () List!1423)

(assert (=> d!11303 (= lt!23956 (ListLongMap!1344 lt!23957))))

(declare-fun lt!23955 () Unit!1547)

(declare-fun lt!23954 () Unit!1547)

(assert (=> d!11303 (= lt!23955 lt!23954)))

(assert (=> d!11303 (= (getValueByKey!125 lt!23957 (_1!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) (Some!130 (_2!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(assert (=> d!11303 (= lt!23954 (lemmaContainsTupThenGetReturnValue!42 lt!23957 (_1!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(assert (=> d!11303 (= lt!23957 (insertStrictlySorted!45 (toList!687 lt!23776) (_1!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(assert (=> d!11303 (= (+!80 lt!23776 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) lt!23956)))

(declare-fun b!59230 () Bool)

(declare-fun res!32897 () Bool)

(assert (=> b!59230 (=> (not res!32897) (not e!38959))))

(assert (=> b!59230 (= res!32897 (= (getValueByKey!125 (toList!687 lt!23956) (_1!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) (Some!130 (_2!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(declare-fun b!59231 () Bool)

(assert (=> b!59231 (= e!38959 (contains!680 (toList!687 lt!23956) (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))

(assert (= (and d!11303 res!32896) b!59230))

(assert (= (and b!59230 res!32897) b!59231))

(declare-fun m!50989 () Bool)

(assert (=> d!11303 m!50989))

(declare-fun m!50991 () Bool)

(assert (=> d!11303 m!50991))

(declare-fun m!50993 () Bool)

(assert (=> d!11303 m!50993))

(declare-fun m!50995 () Bool)

(assert (=> d!11303 m!50995))

(declare-fun m!50997 () Bool)

(assert (=> b!59230 m!50997))

(declare-fun m!50999 () Bool)

(assert (=> b!59231 m!50999))

(assert (=> b!58977 d!11303))

(declare-fun d!11305 () Bool)

(assert (=> d!11305 (= (apply!66 (+!80 lt!23788 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) lt!23778) (apply!66 lt!23788 lt!23778))))

(declare-fun lt!23958 () Unit!1547)

(assert (=> d!11305 (= lt!23958 (choose!312 lt!23788 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992))) lt!23778))))

(declare-fun e!38960 () Bool)

(assert (=> d!11305 e!38960))

(declare-fun res!32898 () Bool)

(assert (=> d!11305 (=> (not res!32898) (not e!38960))))

(assert (=> d!11305 (= res!32898 (contains!678 lt!23788 lt!23778))))

(assert (=> d!11305 (= (addApplyDifferent!42 lt!23788 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992))) lt!23778) lt!23958)))

(declare-fun b!59232 () Bool)

(assert (=> b!59232 (= e!38960 (not (= lt!23778 lt!23777)))))

(assert (= (and d!11305 res!32898) b!59232))

(assert (=> d!11305 m!50601))

(declare-fun m!51001 () Bool)

(assert (=> d!11305 m!51001))

(declare-fun m!51003 () Bool)

(assert (=> d!11305 m!51003))

(assert (=> d!11305 m!50597))

(assert (=> d!11305 m!50597))

(assert (=> d!11305 m!50617))

(assert (=> b!58977 d!11305))

(declare-fun d!11307 () Bool)

(assert (=> d!11307 (= (apply!66 (+!80 lt!23781 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))) lt!23779) (apply!66 lt!23781 lt!23779))))

(declare-fun lt!23959 () Unit!1547)

(assert (=> d!11307 (= lt!23959 (choose!312 lt!23781 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))) lt!23779))))

(declare-fun e!38961 () Bool)

(assert (=> d!11307 e!38961))

(declare-fun res!32899 () Bool)

(assert (=> d!11307 (=> (not res!32899) (not e!38961))))

(assert (=> d!11307 (= res!32899 (contains!678 lt!23781 lt!23779))))

(assert (=> d!11307 (= (addApplyDifferent!42 lt!23781 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))) lt!23779) lt!23959)))

(declare-fun b!59233 () Bool)

(assert (=> b!59233 (= e!38961 (not (= lt!23779 lt!23787)))))

(assert (= (and d!11307 res!32899) b!59233))

(assert (=> d!11307 m!50613))

(declare-fun m!51005 () Bool)

(assert (=> d!11307 m!51005))

(declare-fun m!51007 () Bool)

(assert (=> d!11307 m!51007))

(assert (=> d!11307 m!50603))

(assert (=> d!11307 m!50603))

(assert (=> d!11307 m!50605))

(assert (=> b!58977 d!11307))

(declare-fun d!11309 () Bool)

(assert (=> d!11309 (= (apply!66 lt!23781 lt!23779) (get!1075 (getValueByKey!125 (toList!687 lt!23781) lt!23779)))))

(declare-fun bs!2565 () Bool)

(assert (= bs!2565 d!11309))

(declare-fun m!51009 () Bool)

(assert (=> bs!2565 m!51009))

(assert (=> bs!2565 m!51009))

(declare-fun m!51011 () Bool)

(assert (=> bs!2565 m!51011))

(assert (=> b!58977 d!11309))

(declare-fun d!11311 () Bool)

(declare-fun e!38962 () Bool)

(assert (=> d!11311 e!38962))

(declare-fun res!32900 () Bool)

(assert (=> d!11311 (=> (not res!32900) (not e!38962))))

(declare-fun lt!23962 () ListLongMap!1343)

(assert (=> d!11311 (= res!32900 (contains!678 lt!23962 (_1!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun lt!23963 () List!1423)

(assert (=> d!11311 (= lt!23962 (ListLongMap!1344 lt!23963))))

(declare-fun lt!23961 () Unit!1547)

(declare-fun lt!23960 () Unit!1547)

(assert (=> d!11311 (= lt!23961 lt!23960)))

(assert (=> d!11311 (= (getValueByKey!125 lt!23963 (_1!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))) (Some!130 (_2!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(assert (=> d!11311 (= lt!23960 (lemmaContainsTupThenGetReturnValue!42 lt!23963 (_1!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(assert (=> d!11311 (= lt!23963 (insertStrictlySorted!45 (toList!687 lt!23781) (_1!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(assert (=> d!11311 (= (+!80 lt!23781 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))) lt!23962)))

(declare-fun b!59234 () Bool)

(declare-fun res!32901 () Bool)

(assert (=> b!59234 (=> (not res!32901) (not e!38962))))

(assert (=> b!59234 (= res!32901 (= (getValueByKey!125 (toList!687 lt!23962) (_1!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))) (Some!130 (_2!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(declare-fun b!59235 () Bool)

(assert (=> b!59235 (= e!38962 (contains!680 (toList!687 lt!23962) (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))))

(assert (= (and d!11311 res!32900) b!59234))

(assert (= (and b!59234 res!32901) b!59235))

(declare-fun m!51013 () Bool)

(assert (=> d!11311 m!51013))

(declare-fun m!51015 () Bool)

(assert (=> d!11311 m!51015))

(declare-fun m!51017 () Bool)

(assert (=> d!11311 m!51017))

(declare-fun m!51019 () Bool)

(assert (=> d!11311 m!51019))

(declare-fun m!51021 () Bool)

(assert (=> b!59234 m!51021))

(declare-fun m!51023 () Bool)

(assert (=> b!59235 m!51023))

(assert (=> b!58977 d!11311))

(declare-fun d!11313 () Bool)

(assert (=> d!11313 (contains!678 (+!80 lt!23775 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))) lt!23782)))

(declare-fun lt!23966 () Unit!1547)

(declare-fun choose!313 (ListLongMap!1343 (_ BitVec 64) V!2841 (_ BitVec 64)) Unit!1547)

(assert (=> d!11313 (= lt!23966 (choose!313 lt!23775 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))) lt!23782))))

(assert (=> d!11313 (contains!678 lt!23775 lt!23782)))

(assert (=> d!11313 (= (addStillContains!42 lt!23775 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))) lt!23782) lt!23966)))

(declare-fun bs!2566 () Bool)

(assert (= bs!2566 d!11313))

(assert (=> bs!2566 m!50619))

(assert (=> bs!2566 m!50619))

(assert (=> bs!2566 m!50621))

(declare-fun m!51025 () Bool)

(assert (=> bs!2566 m!51025))

(declare-fun m!51027 () Bool)

(assert (=> bs!2566 m!51027))

(assert (=> b!58977 d!11313))

(declare-fun d!11315 () Bool)

(assert (=> d!11315 (= (apply!66 (+!80 lt!23781 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))) lt!23779) (get!1075 (getValueByKey!125 (toList!687 (+!80 lt!23781 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!23779)))))

(declare-fun bs!2567 () Bool)

(assert (= bs!2567 d!11315))

(declare-fun m!51029 () Bool)

(assert (=> bs!2567 m!51029))

(assert (=> bs!2567 m!51029))

(declare-fun m!51031 () Bool)

(assert (=> bs!2567 m!51031))

(assert (=> b!58977 d!11315))

(declare-fun d!11317 () Bool)

(declare-fun e!38963 () Bool)

(assert (=> d!11317 e!38963))

(declare-fun res!32902 () Bool)

(assert (=> d!11317 (=> res!32902 e!38963)))

(declare-fun lt!23969 () Bool)

(assert (=> d!11317 (= res!32902 (not lt!23969))))

(declare-fun lt!23968 () Bool)

(assert (=> d!11317 (= lt!23969 lt!23968)))

(declare-fun lt!23967 () Unit!1547)

(declare-fun e!38964 () Unit!1547)

(assert (=> d!11317 (= lt!23967 e!38964)))

(declare-fun c!7554 () Bool)

(assert (=> d!11317 (= c!7554 lt!23968)))

(assert (=> d!11317 (= lt!23968 (containsKey!128 (toList!687 (+!80 lt!23775 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!23782))))

(assert (=> d!11317 (= (contains!678 (+!80 lt!23775 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))) lt!23782) lt!23969)))

(declare-fun b!59237 () Bool)

(declare-fun lt!23970 () Unit!1547)

(assert (=> b!59237 (= e!38964 lt!23970)))

(assert (=> b!59237 (= lt!23970 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 (+!80 lt!23775 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!23782))))

(assert (=> b!59237 (isDefined!77 (getValueByKey!125 (toList!687 (+!80 lt!23775 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!23782))))

(declare-fun b!59238 () Bool)

(declare-fun Unit!1561 () Unit!1547)

(assert (=> b!59238 (= e!38964 Unit!1561)))

(declare-fun b!59239 () Bool)

(assert (=> b!59239 (= e!38963 (isDefined!77 (getValueByKey!125 (toList!687 (+!80 lt!23775 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!23782)))))

(assert (= (and d!11317 c!7554) b!59237))

(assert (= (and d!11317 (not c!7554)) b!59238))

(assert (= (and d!11317 (not res!32902)) b!59239))

(declare-fun m!51033 () Bool)

(assert (=> d!11317 m!51033))

(declare-fun m!51035 () Bool)

(assert (=> b!59237 m!51035))

(declare-fun m!51037 () Bool)

(assert (=> b!59237 m!51037))

(assert (=> b!59237 m!51037))

(declare-fun m!51039 () Bool)

(assert (=> b!59237 m!51039))

(assert (=> b!59239 m!51037))

(assert (=> b!59239 m!51037))

(assert (=> b!59239 m!51039))

(assert (=> b!58977 d!11317))

(declare-fun d!11319 () Bool)

(assert (=> d!11319 (= (apply!66 lt!23776 lt!23786) (get!1075 (getValueByKey!125 (toList!687 lt!23776) lt!23786)))))

(declare-fun bs!2568 () Bool)

(assert (= bs!2568 d!11319))

(declare-fun m!51041 () Bool)

(assert (=> bs!2568 m!51041))

(assert (=> bs!2568 m!51041))

(declare-fun m!51043 () Bool)

(assert (=> bs!2568 m!51043))

(assert (=> b!58977 d!11319))

(declare-fun d!11321 () Bool)

(declare-fun e!38967 () Bool)

(assert (=> d!11321 e!38967))

(declare-fun res!32905 () Bool)

(assert (=> d!11321 (=> (not res!32905) (not e!38967))))

(assert (=> d!11321 (= res!32905 (and (bvsge (index!3008 lt!23716) #b00000000000000000000000000000000) (bvslt (index!3008 lt!23716) (size!2002 (_keys!3666 newMap!16)))))))

(declare-fun lt!23973 () Unit!1547)

(declare-fun choose!314 (array!3703 array!3705 (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 (_ BitVec 32) Int) Unit!1547)

(assert (=> d!11321 (= lt!23973 (choose!314 (_keys!3666 newMap!16) lt!23706 (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (index!3008 lt!23716) (defaultEntry!2042 newMap!16)))))

(assert (=> d!11321 (validMask!0 (mask!5926 newMap!16))))

(assert (=> d!11321 (= (lemmaValidKeyInArrayIsInListMap!75 (_keys!3666 newMap!16) lt!23706 (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (index!3008 lt!23716) (defaultEntry!2042 newMap!16)) lt!23973)))

(declare-fun b!59242 () Bool)

(assert (=> b!59242 (= e!38967 (contains!678 (getCurrentListMap!388 (_keys!3666 newMap!16) lt!23706 (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (select (arr!1772 (_keys!3666 newMap!16)) (index!3008 lt!23716))))))

(assert (= (and d!11321 res!32905) b!59242))

(declare-fun m!51045 () Bool)

(assert (=> d!11321 m!51045))

(assert (=> d!11321 m!50667))

(declare-fun m!51047 () Bool)

(assert (=> b!59242 m!51047))

(assert (=> b!59242 m!50539))

(assert (=> b!59242 m!51047))

(assert (=> b!59242 m!50539))

(declare-fun m!51049 () Bool)

(assert (=> b!59242 m!51049))

(assert (=> b!58911 d!11321))

(declare-fun d!11323 () Bool)

(declare-fun e!38970 () Bool)

(assert (=> d!11323 e!38970))

(declare-fun res!32908 () Bool)

(assert (=> d!11323 (=> (not res!32908) (not e!38970))))

(assert (=> d!11323 (= res!32908 (and (bvsge (index!3008 lt!23716) #b00000000000000000000000000000000) (bvslt (index!3008 lt!23716) (size!2003 (_values!2025 newMap!16)))))))

(declare-fun lt!23976 () Unit!1547)

(declare-fun choose!315 (array!3703 array!3705 (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 (_ BitVec 32) (_ BitVec 64) V!2841 Int) Unit!1547)

(assert (=> d!11323 (= lt!23976 (choose!315 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (index!3008 lt!23716) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2042 newMap!16)))))

(assert (=> d!11323 (validMask!0 (mask!5926 newMap!16))))

(assert (=> d!11323 (= (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!15 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (index!3008 lt!23716) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2042 newMap!16)) lt!23976)))

(declare-fun b!59245 () Bool)

(assert (=> b!59245 (= e!38970 (= (+!80 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!388 (_keys!3666 newMap!16) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (index!3008 lt!23716) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16))) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))))))

(assert (= (and d!11323 res!32908) b!59245))

(assert (=> d!11323 m!50367))

(assert (=> d!11323 m!50395))

(declare-fun m!51051 () Bool)

(assert (=> d!11323 m!51051))

(assert (=> d!11323 m!50667))

(assert (=> b!59245 m!50509))

(assert (=> b!59245 m!50509))

(declare-fun m!51053 () Bool)

(assert (=> b!59245 m!51053))

(assert (=> b!59245 m!50545))

(declare-fun m!51055 () Bool)

(assert (=> b!59245 m!51055))

(assert (=> b!58911 d!11323))

(declare-fun d!11325 () Bool)

(declare-fun e!38971 () Bool)

(assert (=> d!11325 e!38971))

(declare-fun res!32909 () Bool)

(assert (=> d!11325 (=> res!32909 e!38971)))

(declare-fun lt!23979 () Bool)

(assert (=> d!11325 (= res!32909 (not lt!23979))))

(declare-fun lt!23978 () Bool)

(assert (=> d!11325 (= lt!23979 lt!23978)))

(declare-fun lt!23977 () Unit!1547)

(declare-fun e!38972 () Unit!1547)

(assert (=> d!11325 (= lt!23977 e!38972)))

(declare-fun c!7555 () Bool)

(assert (=> d!11325 (= c!7555 lt!23978)))

(assert (=> d!11325 (= lt!23978 (containsKey!128 (toList!687 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(assert (=> d!11325 (= (contains!678 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) lt!23979)))

(declare-fun b!59246 () Bool)

(declare-fun lt!23980 () Unit!1547)

(assert (=> b!59246 (= e!38972 lt!23980)))

(assert (=> b!59246 (= lt!23980 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(assert (=> b!59246 (isDefined!77 (getValueByKey!125 (toList!687 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(declare-fun b!59247 () Bool)

(declare-fun Unit!1562 () Unit!1547)

(assert (=> b!59247 (= e!38972 Unit!1562)))

(declare-fun b!59248 () Bool)

(assert (=> b!59248 (= e!38971 (isDefined!77 (getValueByKey!125 (toList!687 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355))))))

(assert (= (and d!11325 c!7555) b!59246))

(assert (= (and d!11325 (not c!7555)) b!59247))

(assert (= (and d!11325 (not res!32909)) b!59248))

(assert (=> d!11325 m!50367))

(declare-fun m!51057 () Bool)

(assert (=> d!11325 m!51057))

(assert (=> b!59246 m!50367))

(declare-fun m!51059 () Bool)

(assert (=> b!59246 m!51059))

(assert (=> b!59246 m!50367))

(declare-fun m!51061 () Bool)

(assert (=> b!59246 m!51061))

(assert (=> b!59246 m!51061))

(declare-fun m!51063 () Bool)

(assert (=> b!59246 m!51063))

(assert (=> b!59248 m!50367))

(assert (=> b!59248 m!51061))

(assert (=> b!59248 m!51061))

(assert (=> b!59248 m!51063))

(assert (=> b!58911 d!11325))

(assert (=> b!58911 d!11247))

(declare-fun lt!23985 () SeekEntryResult!221)

(declare-fun c!7561 () Bool)

(declare-fun call!4431 () Bool)

(declare-fun bm!4427 () Bool)

(assert (=> bm!4427 (= call!4431 (inRange!0 (ite c!7561 (index!3007 lt!23985) (index!3010 lt!23985)) (mask!5926 newMap!16)))))

(declare-fun b!59265 () Bool)

(declare-fun res!32919 () Bool)

(declare-fun e!38981 () Bool)

(assert (=> b!59265 (=> (not res!32919) (not e!38981))))

(assert (=> b!59265 (= res!32919 (= (select (arr!1772 (_keys!3666 newMap!16)) (index!3010 lt!23985)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59265 (and (bvsge (index!3010 lt!23985) #b00000000000000000000000000000000) (bvslt (index!3010 lt!23985) (size!2002 (_keys!3666 newMap!16))))))

(declare-fun b!59266 () Bool)

(declare-fun res!32918 () Bool)

(assert (=> b!59266 (=> (not res!32918) (not e!38981))))

(assert (=> b!59266 (= res!32918 call!4431)))

(declare-fun e!38983 () Bool)

(assert (=> b!59266 (= e!38983 e!38981)))

(declare-fun b!59267 () Bool)

(declare-fun e!38984 () Bool)

(assert (=> b!59267 (= e!38984 e!38983)))

(declare-fun c!7560 () Bool)

(assert (=> b!59267 (= c!7560 ((_ is MissingVacant!221) lt!23985))))

(declare-fun b!59269 () Bool)

(declare-fun e!38982 () Bool)

(declare-fun call!4430 () Bool)

(assert (=> b!59269 (= e!38982 (not call!4430))))

(declare-fun b!59270 () Bool)

(assert (=> b!59270 (= e!38981 (not call!4430))))

(declare-fun b!59271 () Bool)

(assert (=> b!59271 (= e!38983 ((_ is Undefined!221) lt!23985))))

(declare-fun bm!4428 () Bool)

(assert (=> bm!4428 (= call!4430 (arrayContainsKey!0 (_keys!3666 newMap!16) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!59272 () Bool)

(assert (=> b!59272 (and (bvsge (index!3007 lt!23985) #b00000000000000000000000000000000) (bvslt (index!3007 lt!23985) (size!2002 (_keys!3666 newMap!16))))))

(declare-fun res!32920 () Bool)

(assert (=> b!59272 (= res!32920 (= (select (arr!1772 (_keys!3666 newMap!16)) (index!3007 lt!23985)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59272 (=> (not res!32920) (not e!38982))))

(declare-fun b!59268 () Bool)

(assert (=> b!59268 (= e!38984 e!38982)))

(declare-fun res!32921 () Bool)

(assert (=> b!59268 (= res!32921 call!4431)))

(assert (=> b!59268 (=> (not res!32921) (not e!38982))))

(declare-fun d!11327 () Bool)

(assert (=> d!11327 e!38984))

(assert (=> d!11327 (= c!7561 ((_ is MissingZero!221) lt!23985))))

(assert (=> d!11327 (= lt!23985 (seekEntryOrOpen!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (_keys!3666 newMap!16) (mask!5926 newMap!16)))))

(declare-fun lt!23986 () Unit!1547)

(declare-fun choose!316 (array!3703 array!3705 (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 (_ BitVec 64) Int) Unit!1547)

(assert (=> d!11327 (= lt!23986 (choose!316 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (defaultEntry!2042 newMap!16)))))

(assert (=> d!11327 (validMask!0 (mask!5926 newMap!16))))

(assert (=> d!11327 (= (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!15 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (defaultEntry!2042 newMap!16)) lt!23986)))

(assert (= (and d!11327 c!7561) b!59268))

(assert (= (and d!11327 (not c!7561)) b!59267))

(assert (= (and b!59268 res!32921) b!59272))

(assert (= (and b!59272 res!32920) b!59269))

(assert (= (and b!59267 c!7560) b!59266))

(assert (= (and b!59267 (not c!7560)) b!59271))

(assert (= (and b!59266 res!32918) b!59265))

(assert (= (and b!59265 res!32919) b!59270))

(assert (= (or b!59268 b!59266) bm!4427))

(assert (= (or b!59269 b!59270) bm!4428))

(assert (=> d!11327 m!50367))

(assert (=> d!11327 m!50525))

(assert (=> d!11327 m!50367))

(declare-fun m!51065 () Bool)

(assert (=> d!11327 m!51065))

(assert (=> d!11327 m!50667))

(declare-fun m!51067 () Bool)

(assert (=> b!59272 m!51067))

(assert (=> bm!4428 m!50367))

(assert (=> bm!4428 m!50511))

(declare-fun m!51069 () Bool)

(assert (=> bm!4427 m!51069))

(declare-fun m!51071 () Bool)

(assert (=> b!59265 m!51071))

(assert (=> bm!4364 d!11327))

(declare-fun d!11329 () Bool)

(declare-fun e!38985 () Bool)

(assert (=> d!11329 e!38985))

(declare-fun res!32922 () Bool)

(assert (=> d!11329 (=> (not res!32922) (not e!38985))))

(declare-fun lt!23989 () ListLongMap!1343)

(assert (=> d!11329 (= res!32922 (contains!678 lt!23989 (_1!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(declare-fun lt!23990 () List!1423)

(assert (=> d!11329 (= lt!23989 (ListLongMap!1344 lt!23990))))

(declare-fun lt!23988 () Unit!1547)

(declare-fun lt!23987 () Unit!1547)

(assert (=> d!11329 (= lt!23988 lt!23987)))

(assert (=> d!11329 (= (getValueByKey!125 lt!23990 (_1!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))) (Some!130 (_2!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (=> d!11329 (= lt!23987 (lemmaContainsTupThenGetReturnValue!42 lt!23990 (_1!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) (_2!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (=> d!11329 (= lt!23990 (insertStrictlySorted!45 (toList!687 (ite c!7491 call!4390 (ite c!7493 call!4388 call!4391))) (_1!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) (_2!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (=> d!11329 (= (+!80 (ite c!7491 call!4390 (ite c!7493 call!4388 call!4391)) (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!23989)))

(declare-fun b!59273 () Bool)

(declare-fun res!32923 () Bool)

(assert (=> b!59273 (=> (not res!32923) (not e!38985))))

(assert (=> b!59273 (= res!32923 (= (getValueByKey!125 (toList!687 lt!23989) (_1!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))) (Some!130 (_2!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))))

(declare-fun b!59274 () Bool)

(assert (=> b!59274 (= e!38985 (contains!680 (toList!687 lt!23989) (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(assert (= (and d!11329 res!32922) b!59273))

(assert (= (and b!59273 res!32923) b!59274))

(declare-fun m!51073 () Bool)

(assert (=> d!11329 m!51073))

(declare-fun m!51075 () Bool)

(assert (=> d!11329 m!51075))

(declare-fun m!51077 () Bool)

(assert (=> d!11329 m!51077))

(declare-fun m!51079 () Bool)

(assert (=> d!11329 m!51079))

(declare-fun m!51081 () Bool)

(assert (=> b!59273 m!51081))

(declare-fun m!51083 () Bool)

(assert (=> b!59274 m!51083))

(assert (=> bm!4388 d!11329))

(declare-fun d!11331 () Bool)

(declare-fun lt!23993 () Bool)

(define-sort InoxSet (T) (Array T Bool))

(declare-fun content!64 (List!1422) (InoxSet (_ BitVec 64)))

(assert (=> d!11331 (= lt!23993 (select (content!64 Nil!1419) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(declare-fun e!38990 () Bool)

(assert (=> d!11331 (= lt!23993 e!38990)))

(declare-fun res!32928 () Bool)

(assert (=> d!11331 (=> (not res!32928) (not e!38990))))

(assert (=> d!11331 (= res!32928 ((_ is Cons!1418) Nil!1419))))

(assert (=> d!11331 (= (contains!679 Nil!1419 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) lt!23993)))

(declare-fun b!59279 () Bool)

(declare-fun e!38991 () Bool)

(assert (=> b!59279 (= e!38990 e!38991)))

(declare-fun res!32929 () Bool)

(assert (=> b!59279 (=> res!32929 e!38991)))

(assert (=> b!59279 (= res!32929 (= (h!1999 Nil!1419) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(declare-fun b!59280 () Bool)

(assert (=> b!59280 (= e!38991 (contains!679 (t!4756 Nil!1419) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(assert (= (and d!11331 res!32928) b!59279))

(assert (= (and b!59279 (not res!32929)) b!59280))

(declare-fun m!51085 () Bool)

(assert (=> d!11331 m!51085))

(assert (=> d!11331 m!50367))

(declare-fun m!51087 () Bool)

(assert (=> d!11331 m!51087))

(assert (=> b!59280 m!50367))

(declare-fun m!51089 () Bool)

(assert (=> b!59280 m!51089))

(assert (=> b!59018 d!11331))

(declare-fun d!11333 () Bool)

(declare-fun res!32930 () Bool)

(declare-fun e!38992 () Bool)

(assert (=> d!11333 (=> res!32930 e!38992)))

(assert (=> d!11333 (= res!32930 (= (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(assert (=> d!11333 (= (arrayContainsKey!0 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) e!38992)))

(declare-fun b!59281 () Bool)

(declare-fun e!38993 () Bool)

(assert (=> b!59281 (= e!38992 e!38993)))

(declare-fun res!32931 () Bool)

(assert (=> b!59281 (=> (not res!32931) (not e!38993))))

(assert (=> b!59281 (= res!32931 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992))))))))

(declare-fun b!59282 () Bool)

(assert (=> b!59282 (= e!38993 (arrayContainsKey!0 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!11333 (not res!32930)) b!59281))

(assert (= (and b!59281 res!32931) b!59282))

(declare-fun m!51091 () Bool)

(assert (=> d!11333 m!51091))

(assert (=> b!59282 m!50367))

(declare-fun m!51093 () Bool)

(assert (=> b!59282 m!51093))

(assert (=> b!58998 d!11333))

(declare-fun d!11335 () Bool)

(declare-fun e!38994 () Bool)

(assert (=> d!11335 e!38994))

(declare-fun res!32932 () Bool)

(assert (=> d!11335 (=> (not res!32932) (not e!38994))))

(declare-fun lt!23996 () ListLongMap!1343)

(assert (=> d!11335 (= res!32932 (contains!678 lt!23996 (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun lt!23997 () List!1423)

(assert (=> d!11335 (= lt!23996 (ListLongMap!1344 lt!23997))))

(declare-fun lt!23995 () Unit!1547)

(declare-fun lt!23994 () Unit!1547)

(assert (=> d!11335 (= lt!23995 lt!23994)))

(assert (=> d!11335 (= (getValueByKey!125 lt!23997 (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) (Some!130 (_2!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(assert (=> d!11335 (= lt!23994 (lemmaContainsTupThenGetReturnValue!42 lt!23997 (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(assert (=> d!11335 (= lt!23997 (insertStrictlySorted!45 (toList!687 call!4392) (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(assert (=> d!11335 (= (+!80 call!4392 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) lt!23996)))

(declare-fun b!59283 () Bool)

(declare-fun res!32933 () Bool)

(assert (=> b!59283 (=> (not res!32933) (not e!38994))))

(assert (=> b!59283 (= res!32933 (= (getValueByKey!125 (toList!687 lt!23996) (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) (Some!130 (_2!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(declare-fun b!59284 () Bool)

(assert (=> b!59284 (= e!38994 (contains!680 (toList!687 lt!23996) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))

(assert (= (and d!11335 res!32932) b!59283))

(assert (= (and b!59283 res!32933) b!59284))

(declare-fun m!51095 () Bool)

(assert (=> d!11335 m!51095))

(declare-fun m!51097 () Bool)

(assert (=> d!11335 m!51097))

(declare-fun m!51099 () Bool)

(assert (=> d!11335 m!51099))

(declare-fun m!51101 () Bool)

(assert (=> d!11335 m!51101))

(declare-fun m!51103 () Bool)

(assert (=> b!59283 m!51103))

(declare-fun m!51105 () Bool)

(assert (=> b!59284 m!51105))

(assert (=> b!58981 d!11335))

(declare-fun b!59293 () Bool)

(declare-fun e!39000 () (_ BitVec 32))

(declare-fun call!4434 () (_ BitVec 32))

(assert (=> b!59293 (= e!39000 (bvadd #b00000000000000000000000000000001 call!4434))))

(declare-fun b!59294 () Bool)

(declare-fun e!38999 () (_ BitVec 32))

(assert (=> b!59294 (= e!38999 e!39000)))

(declare-fun c!7566 () Bool)

(assert (=> b!59294 (= c!7566 (validKeyInArray!0 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59295 () Bool)

(assert (=> b!59295 (= e!39000 call!4434)))

(declare-fun bm!4431 () Bool)

(assert (=> bm!4431 (= call!4434 (arrayCountValidKeys!0 (_keys!3666 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2002 (_keys!3666 newMap!16))))))

(declare-fun d!11337 () Bool)

(declare-fun lt!24000 () (_ BitVec 32))

(assert (=> d!11337 (and (bvsge lt!24000 #b00000000000000000000000000000000) (bvsle lt!24000 (bvsub (size!2002 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!11337 (= lt!24000 e!38999)))

(declare-fun c!7567 () Bool)

(assert (=> d!11337 (= c!7567 (bvsge #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(assert (=> d!11337 (and (bvsle #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2002 (_keys!3666 newMap!16)) (size!2002 (_keys!3666 newMap!16))))))

(assert (=> d!11337 (= (arrayCountValidKeys!0 (_keys!3666 newMap!16) #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))) lt!24000)))

(declare-fun b!59296 () Bool)

(assert (=> b!59296 (= e!38999 #b00000000000000000000000000000000)))

(assert (= (and d!11337 c!7567) b!59296))

(assert (= (and d!11337 (not c!7567)) b!59294))

(assert (= (and b!59294 c!7566) b!59293))

(assert (= (and b!59294 (not c!7566)) b!59295))

(assert (= (or b!59293 b!59295) bm!4431))

(assert (=> b!59294 m!50693))

(assert (=> b!59294 m!50693))

(assert (=> b!59294 m!50695))

(declare-fun m!51107 () Bool)

(assert (=> bm!4431 m!51107))

(assert (=> b!58927 d!11337))

(declare-fun b!59297 () Bool)

(declare-fun e!39004 () Bool)

(declare-fun e!39003 () Bool)

(assert (=> b!59297 (= e!39004 e!39003)))

(declare-fun res!32935 () Bool)

(assert (=> b!59297 (=> (not res!32935) (not e!39003))))

(declare-fun e!39001 () Bool)

(assert (=> b!59297 (= res!32935 (not e!39001))))

(declare-fun res!32934 () Bool)

(assert (=> b!59297 (=> (not res!32934) (not e!39001))))

(assert (=> b!59297 (= res!32934 (validKeyInArray!0 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59298 () Bool)

(declare-fun e!39002 () Bool)

(declare-fun call!4435 () Bool)

(assert (=> b!59298 (= e!39002 call!4435)))

(declare-fun b!59299 () Bool)

(assert (=> b!59299 (= e!39002 call!4435)))

(declare-fun d!11339 () Bool)

(declare-fun res!32936 () Bool)

(assert (=> d!11339 (=> res!32936 e!39004)))

(assert (=> d!11339 (= res!32936 (bvsge #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(assert (=> d!11339 (= (arrayNoDuplicates!0 (_keys!3666 newMap!16) #b00000000000000000000000000000000 Nil!1419) e!39004)))

(declare-fun bm!4432 () Bool)

(declare-fun c!7568 () Bool)

(assert (=> bm!4432 (= call!4435 (arrayNoDuplicates!0 (_keys!3666 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!7568 (Cons!1418 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000) Nil!1419) Nil!1419)))))

(declare-fun b!59300 () Bool)

(assert (=> b!59300 (= e!39001 (contains!679 Nil!1419 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59301 () Bool)

(assert (=> b!59301 (= e!39003 e!39002)))

(assert (=> b!59301 (= c!7568 (validKeyInArray!0 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!11339 (not res!32936)) b!59297))

(assert (= (and b!59297 res!32934) b!59300))

(assert (= (and b!59297 res!32935) b!59301))

(assert (= (and b!59301 c!7568) b!59298))

(assert (= (and b!59301 (not c!7568)) b!59299))

(assert (= (or b!59298 b!59299) bm!4432))

(assert (=> b!59297 m!50693))

(assert (=> b!59297 m!50693))

(assert (=> b!59297 m!50695))

(assert (=> bm!4432 m!50693))

(declare-fun m!51109 () Bool)

(assert (=> bm!4432 m!51109))

(assert (=> b!59300 m!50693))

(assert (=> b!59300 m!50693))

(declare-fun m!51111 () Bool)

(assert (=> b!59300 m!51111))

(assert (=> b!59301 m!50693))

(assert (=> b!59301 m!50693))

(assert (=> b!59301 m!50695))

(assert (=> b!58929 d!11339))

(declare-fun d!11341 () Bool)

(declare-fun e!39005 () Bool)

(assert (=> d!11341 e!39005))

(declare-fun res!32937 () Bool)

(assert (=> d!11341 (=> (not res!32937) (not e!39005))))

(declare-fun lt!24003 () ListLongMap!1343)

(assert (=> d!11341 (= res!32937 (contains!678 lt!24003 (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!24004 () List!1423)

(assert (=> d!11341 (= lt!24003 (ListLongMap!1344 lt!24004))))

(declare-fun lt!24002 () Unit!1547)

(declare-fun lt!24001 () Unit!1547)

(assert (=> d!11341 (= lt!24002 lt!24001)))

(assert (=> d!11341 (= (getValueByKey!125 lt!24004 (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11341 (= lt!24001 (lemmaContainsTupThenGetReturnValue!42 lt!24004 (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11341 (= lt!24004 (insertStrictlySorted!45 (toList!687 call!4361) (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11341 (= (+!80 call!4361 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!24003)))

(declare-fun b!59302 () Bool)

(declare-fun res!32938 () Bool)

(assert (=> b!59302 (=> (not res!32938) (not e!39005))))

(assert (=> b!59302 (= res!32938 (= (getValueByKey!125 (toList!687 lt!24003) (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!59303 () Bool)

(assert (=> b!59303 (= e!39005 (contains!680 (toList!687 lt!24003) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!11341 res!32937) b!59302))

(assert (= (and b!59302 res!32938) b!59303))

(declare-fun m!51113 () Bool)

(assert (=> d!11341 m!51113))

(declare-fun m!51115 () Bool)

(assert (=> d!11341 m!51115))

(declare-fun m!51117 () Bool)

(assert (=> d!11341 m!51117))

(declare-fun m!51119 () Bool)

(assert (=> d!11341 m!51119))

(declare-fun m!51121 () Bool)

(assert (=> b!59302 m!51121))

(declare-fun m!51123 () Bool)

(assert (=> b!59303 m!51123))

(assert (=> b!58899 d!11341))

(assert (=> b!59015 d!11243))

(declare-fun d!11343 () Bool)

(declare-fun e!39008 () Bool)

(assert (=> d!11343 e!39008))

(declare-fun c!7571 () Bool)

(assert (=> d!11343 (= c!7571 (and (not (= (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> d!11343 true))

(declare-fun _$29!66 () Unit!1547)

(assert (=> d!11343 (= (choose!308 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (_values!2025 (v!2382 (underlying!225 thiss!992))) (mask!5926 (v!2382 (underlying!225 thiss!992))) (extraKeys!1929 (v!2382 (underlying!225 thiss!992))) (zeroValue!1958 (v!2382 (underlying!225 thiss!992))) (minValue!1958 (v!2382 (underlying!225 thiss!992))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2042 (v!2382 (underlying!225 thiss!992)))) _$29!66)))

(declare-fun b!59308 () Bool)

(assert (=> b!59308 (= e!39008 (arrayContainsKey!0 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!59309 () Bool)

(assert (=> b!59309 (= e!39008 (ite (= (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!1929 (v!2382 (underlying!225 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1929 (v!2382 (underlying!225 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!11343 c!7571) b!59308))

(assert (= (and d!11343 (not c!7571)) b!59309))

(assert (=> b!59308 m!50367))

(assert (=> b!59308 m!50371))

(assert (=> d!11225 d!11343))

(assert (=> d!11225 d!11199))

(declare-fun b!59344 () Bool)

(declare-fun e!39029 () Unit!1547)

(declare-fun Unit!1563 () Unit!1547)

(assert (=> b!59344 (= e!39029 Unit!1563)))

(declare-fun lt!24090 () Unit!1547)

(declare-fun lemmaArrayContainsKeyThenInListMap!5 (array!3703 array!3705 (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 (_ BitVec 64) (_ BitVec 32) Int) Unit!1547)

(assert (=> b!59344 (= lt!24090 (lemmaArrayContainsKeyThenInListMap!5 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(assert (=> b!59344 (contains!678 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355))))

(declare-fun lt!24078 () Unit!1547)

(assert (=> b!59344 (= lt!24078 lt!24090)))

(assert (=> b!59344 false))

(declare-fun lt!24070 () tuple2!2016)

(declare-fun b!59345 () Bool)

(declare-fun e!39032 () Bool)

(assert (=> b!59345 (= e!39032 (= (map!1108 (_2!1019 lt!24070)) (+!80 (map!1108 newMap!16) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!59346 () Bool)

(declare-fun e!39030 () Unit!1547)

(declare-fun Unit!1564 () Unit!1547)

(assert (=> b!59346 (= e!39030 Unit!1564)))

(declare-fun lt!24075 () Unit!1547)

(assert (=> b!59346 (= lt!24075 (lemmaInListMapThenSeekEntryOrOpenFindsIt!15 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24082 () SeekEntryResult!221)

(declare-fun call!4446 () SeekEntryResult!221)

(assert (=> b!59346 (= lt!24082 call!4446)))

(declare-fun res!32964 () Bool)

(assert (=> b!59346 (= res!32964 ((_ is Found!221) lt!24082))))

(declare-fun e!39031 () Bool)

(assert (=> b!59346 (=> (not res!32964) (not e!39031))))

(assert (=> b!59346 e!39031))

(declare-fun lt!24089 () Unit!1547)

(assert (=> b!59346 (= lt!24089 lt!24075)))

(assert (=> b!59346 false))

(declare-fun b!59347 () Bool)

(declare-fun res!32957 () Bool)

(declare-fun e!39025 () Bool)

(assert (=> b!59347 (=> (not res!32957) (not e!39025))))

(declare-fun call!4444 () Bool)

(assert (=> b!59347 (= res!32957 call!4444)))

(declare-fun e!39027 () Bool)

(assert (=> b!59347 (= e!39027 e!39025)))

(declare-fun b!59348 () Bool)

(declare-fun call!4445 () Bool)

(assert (=> b!59348 (= e!39025 (not call!4445))))

(declare-fun bm!4441 () Bool)

(assert (=> bm!4441 (= call!4446 (seekEntryOrOpen!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (_keys!3666 newMap!16) (mask!5926 newMap!16)))))

(declare-fun d!11345 () Bool)

(assert (=> d!11345 e!39032))

(declare-fun res!32963 () Bool)

(assert (=> d!11345 (=> (not res!32963) (not e!39032))))

(assert (=> d!11345 (= res!32963 (_1!1019 lt!24070))))

(assert (=> d!11345 (= lt!24070 (tuple2!2017 true (LongMapFixedSize!617 (defaultEntry!2042 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (bvadd (_size!357 newMap!16) #b00000000000000000000000000000001) (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16))) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16))) (_vacant!357 newMap!16))))))

(declare-fun lt!24067 () Unit!1547)

(declare-fun lt!24077 () Unit!1547)

(assert (=> d!11345 (= lt!24067 lt!24077)))

(declare-fun lt!24079 () array!3705)

(declare-fun lt!24076 () array!3703)

(assert (=> d!11345 (contains!678 (getCurrentListMap!388 lt!24076 lt!24079 (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (select (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716))))))

(assert (=> d!11345 (= lt!24077 (lemmaValidKeyInArrayIsInListMap!75 lt!24076 lt!24079 (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (defaultEntry!2042 newMap!16)))))

(assert (=> d!11345 (= lt!24079 (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16))))))

(assert (=> d!11345 (= lt!24076 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16))))))

(declare-fun lt!24091 () Unit!1547)

(declare-fun lt!24080 () Unit!1547)

(assert (=> d!11345 (= lt!24091 lt!24080)))

(declare-fun lt!24073 () array!3703)

(assert (=> d!11345 (= (arrayCountValidKeys!0 lt!24073 (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (bvadd (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lemmaValidKeyAtIImpliesCountKeysIsOne!0 (array!3703 (_ BitVec 32)) Unit!1547)

(assert (=> d!11345 (= lt!24080 (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!24073 (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716))))))

(assert (=> d!11345 (= lt!24073 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16))))))

(declare-fun lt!24066 () Unit!1547)

(declare-fun lt!24094 () Unit!1547)

(assert (=> d!11345 (= lt!24066 lt!24094)))

(declare-fun lt!24087 () array!3703)

(assert (=> d!11345 (arrayContainsKey!0 lt!24087 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(assert (=> d!11345 (= lt!24094 (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!24087 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716))))))

(assert (=> d!11345 (= lt!24087 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16))))))

(declare-fun lt!24083 () Unit!1547)

(declare-fun lt!24093 () Unit!1547)

(assert (=> d!11345 (= lt!24083 lt!24093)))

(assert (=> d!11345 (= (+!80 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!388 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16))) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16))) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lemmaAddValidKeyToArrayThenAddPairToListMap!5 (array!3703 array!3705 (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 (_ BitVec 32) (_ BitVec 64) V!2841 Int) Unit!1547)

(assert (=> d!11345 (= lt!24093 (lemmaAddValidKeyToArrayThenAddPairToListMap!5 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24072 () Unit!1547)

(declare-fun lt!24086 () Unit!1547)

(assert (=> d!11345 (= lt!24072 lt!24086)))

(assert (=> d!11345 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16))) (mask!5926 newMap!16))))

(declare-fun lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 ((_ BitVec 64) array!3703 (_ BitVec 32) (_ BitVec 32)) Unit!1547)

(assert (=> d!11345 (= lt!24086 (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (_keys!3666 newMap!16) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (mask!5926 newMap!16)))))

(declare-fun lt!24085 () Unit!1547)

(declare-fun lt!24088 () Unit!1547)

(assert (=> d!11345 (= lt!24085 lt!24088)))

(assert (=> d!11345 (= (arrayCountValidKeys!0 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16))) #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!3666 newMap!16) #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))) #b00000000000000000000000000000001))))

(declare-fun lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (array!3703 (_ BitVec 32) (_ BitVec 64)) Unit!1547)

(assert (=> d!11345 (= lt!24088 (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!3666 newMap!16) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(declare-fun lt!24069 () Unit!1547)

(declare-fun lt!24065 () Unit!1547)

(assert (=> d!11345 (= lt!24069 lt!24065)))

(declare-fun lt!24071 () List!1422)

(declare-fun lt!24074 () (_ BitVec 32))

(assert (=> d!11345 (arrayNoDuplicates!0 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16))) lt!24074 lt!24071)))

(declare-fun lemmaPutNewValidKeyPreservesNoDuplicate!0 (array!3703 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1422) Unit!1547)

(assert (=> d!11345 (= lt!24065 (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!3666 newMap!16) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) lt!24074 lt!24071))))

(assert (=> d!11345 (= lt!24071 Nil!1419)))

(assert (=> d!11345 (= lt!24074 #b00000000000000000000000000000000)))

(declare-fun lt!24068 () Unit!1547)

(assert (=> d!11345 (= lt!24068 e!39029)))

(declare-fun c!7581 () Bool)

(assert (=> d!11345 (= c!7581 (arrayContainsKey!0 (_keys!3666 newMap!16) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun lt!24084 () Unit!1547)

(assert (=> d!11345 (= lt!24084 e!39030)))

(declare-fun c!7582 () Bool)

(assert (=> d!11345 (= c!7582 (contains!678 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(assert (=> d!11345 (valid!263 newMap!16)))

(assert (=> d!11345 (= (updateHelperNewKey!15 newMap!16 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716))) lt!24070)))

(declare-fun b!59349 () Bool)

(declare-fun c!7580 () Bool)

(declare-fun lt!24092 () SeekEntryResult!221)

(assert (=> b!59349 (= c!7580 ((_ is MissingVacant!221) lt!24092))))

(declare-fun e!39028 () Bool)

(assert (=> b!59349 (= e!39027 e!39028)))

(declare-fun b!59350 () Bool)

(declare-fun res!32961 () Bool)

(declare-fun call!4447 () Bool)

(assert (=> b!59350 (= res!32961 call!4447)))

(assert (=> b!59350 (=> (not res!32961) (not e!39031))))

(declare-fun b!59351 () Bool)

(assert (=> b!59351 (= e!39028 ((_ is Undefined!221) lt!24092))))

(declare-fun b!59352 () Bool)

(declare-fun lt!24081 () Unit!1547)

(assert (=> b!59352 (= e!39030 lt!24081)))

(assert (=> b!59352 (= lt!24081 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!15 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (defaultEntry!2042 newMap!16)))))

(assert (=> b!59352 (= lt!24092 call!4446)))

(declare-fun c!7583 () Bool)

(assert (=> b!59352 (= c!7583 ((_ is MissingZero!221) lt!24092))))

(assert (=> b!59352 e!39027))

(declare-fun b!59353 () Bool)

(declare-fun res!32962 () Bool)

(assert (=> b!59353 (=> (not res!32962) (not e!39025))))

(assert (=> b!59353 (= res!32962 (= (select (arr!1772 (_keys!3666 newMap!16)) (index!3007 lt!24092)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59354 () Bool)

(declare-fun res!32958 () Bool)

(assert (=> b!59354 (= res!32958 (= (select (arr!1772 (_keys!3666 newMap!16)) (index!3010 lt!24092)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!39026 () Bool)

(assert (=> b!59354 (=> (not res!32958) (not e!39026))))

(declare-fun b!59355 () Bool)

(assert (=> b!59355 (= e!39026 (not call!4445))))

(declare-fun bm!4442 () Bool)

(assert (=> bm!4442 (= call!4447 (inRange!0 (ite c!7582 (index!3008 lt!24082) (ite c!7583 (index!3007 lt!24092) (index!3010 lt!24092))) (mask!5926 newMap!16)))))

(declare-fun bm!4443 () Bool)

(assert (=> bm!4443 (= call!4444 call!4447)))

(declare-fun b!59356 () Bool)

(assert (=> b!59356 (= e!39028 e!39026)))

(declare-fun res!32960 () Bool)

(assert (=> b!59356 (= res!32960 call!4444)))

(assert (=> b!59356 (=> (not res!32960) (not e!39026))))

(declare-fun b!59357 () Bool)

(declare-fun Unit!1565 () Unit!1547)

(assert (=> b!59357 (= e!39029 Unit!1565)))

(declare-fun b!59358 () Bool)

(declare-fun res!32959 () Bool)

(assert (=> b!59358 (=> (not res!32959) (not e!39032))))

(assert (=> b!59358 (= res!32959 (valid!263 (_2!1019 lt!24070)))))

(declare-fun b!59359 () Bool)

(assert (=> b!59359 (= e!39031 (= (select (arr!1772 (_keys!3666 newMap!16)) (index!3008 lt!24082)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(declare-fun bm!4444 () Bool)

(assert (=> bm!4444 (= call!4445 (arrayContainsKey!0 (_keys!3666 newMap!16) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!59360 () Bool)

(declare-fun res!32965 () Bool)

(assert (=> b!59360 (=> (not res!32965) (not e!39032))))

(assert (=> b!59360 (= res!32965 (contains!678 (map!1108 (_2!1019 lt!24070)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(assert (= (and d!11345 c!7582) b!59346))

(assert (= (and d!11345 (not c!7582)) b!59352))

(assert (= (and b!59346 res!32964) b!59350))

(assert (= (and b!59350 res!32961) b!59359))

(assert (= (and b!59352 c!7583) b!59347))

(assert (= (and b!59352 (not c!7583)) b!59349))

(assert (= (and b!59347 res!32957) b!59353))

(assert (= (and b!59353 res!32962) b!59348))

(assert (= (and b!59349 c!7580) b!59356))

(assert (= (and b!59349 (not c!7580)) b!59351))

(assert (= (and b!59356 res!32960) b!59354))

(assert (= (and b!59354 res!32958) b!59355))

(assert (= (or b!59347 b!59356) bm!4443))

(assert (= (or b!59348 b!59355) bm!4444))

(assert (= (or b!59350 bm!4443) bm!4442))

(assert (= (or b!59346 b!59352) bm!4441))

(assert (= (and d!11345 c!7581) b!59344))

(assert (= (and d!11345 (not c!7581)) b!59357))

(assert (= (and d!11345 res!32963) b!59358))

(assert (= (and b!59358 res!32959) b!59360))

(assert (= (and b!59360 res!32965) b!59345))

(declare-fun m!51125 () Bool)

(assert (=> b!59354 m!51125))

(declare-fun m!51127 () Bool)

(assert (=> b!59360 m!51127))

(assert (=> b!59360 m!51127))

(assert (=> b!59360 m!50367))

(declare-fun m!51129 () Bool)

(assert (=> b!59360 m!51129))

(declare-fun m!51131 () Bool)

(assert (=> b!59358 m!51131))

(declare-fun m!51133 () Bool)

(assert (=> bm!4442 m!51133))

(assert (=> b!59344 m!50367))

(declare-fun m!51135 () Bool)

(assert (=> b!59344 m!51135))

(assert (=> b!59344 m!50509))

(assert (=> b!59344 m!50509))

(assert (=> b!59344 m!50367))

(assert (=> b!59344 m!50553))

(assert (=> bm!4441 m!50367))

(assert (=> bm!4441 m!50525))

(declare-fun m!51137 () Bool)

(assert (=> d!11345 m!51137))

(assert (=> d!11345 m!50367))

(declare-fun m!51139 () Bool)

(assert (=> d!11345 m!51139))

(declare-fun m!51141 () Bool)

(assert (=> d!11345 m!51141))

(assert (=> d!11345 m!50563))

(declare-fun m!51143 () Bool)

(assert (=> d!11345 m!51143))

(declare-fun m!51145 () Bool)

(assert (=> d!11345 m!51145))

(declare-fun m!51147 () Bool)

(assert (=> d!11345 m!51147))

(assert (=> d!11345 m!50509))

(assert (=> d!11345 m!50367))

(assert (=> d!11345 m!50553))

(assert (=> d!11345 m!50367))

(declare-fun m!51149 () Bool)

(assert (=> d!11345 m!51149))

(declare-fun m!51151 () Bool)

(assert (=> d!11345 m!51151))

(declare-fun m!51153 () Bool)

(assert (=> d!11345 m!51153))

(declare-fun m!51155 () Bool)

(assert (=> d!11345 m!51155))

(assert (=> d!11345 m!51141))

(assert (=> d!11345 m!51143))

(declare-fun m!51157 () Bool)

(assert (=> d!11345 m!51157))

(assert (=> d!11345 m!50367))

(declare-fun m!51159 () Bool)

(assert (=> d!11345 m!51159))

(assert (=> d!11345 m!50367))

(assert (=> d!11345 m!50511))

(assert (=> d!11345 m!50367))

(declare-fun m!51161 () Bool)

(assert (=> d!11345 m!51161))

(assert (=> d!11345 m!50509))

(assert (=> d!11345 m!51053))

(declare-fun m!51163 () Bool)

(assert (=> d!11345 m!51163))

(assert (=> d!11345 m!50367))

(assert (=> d!11345 m!50395))

(declare-fun m!51165 () Bool)

(assert (=> d!11345 m!51165))

(declare-fun m!51167 () Bool)

(assert (=> d!11345 m!51167))

(assert (=> d!11345 m!50385))

(assert (=> d!11345 m!50367))

(declare-fun m!51169 () Bool)

(assert (=> d!11345 m!51169))

(assert (=> d!11345 m!50509))

(declare-fun m!51171 () Bool)

(assert (=> d!11345 m!51171))

(assert (=> b!59345 m!51127))

(assert (=> b!59345 m!50379))

(assert (=> b!59345 m!50379))

(declare-fun m!51173 () Bool)

(assert (=> b!59345 m!51173))

(declare-fun m!51175 () Bool)

(assert (=> b!59359 m!51175))

(assert (=> bm!4444 m!50367))

(assert (=> bm!4444 m!50511))

(assert (=> b!59352 m!50367))

(assert (=> b!59352 m!50527))

(declare-fun m!51177 () Bool)

(assert (=> b!59353 m!51177))

(assert (=> b!59346 m!50367))

(assert (=> b!59346 m!50519))

(assert (=> bm!4370 d!11345))

(declare-fun d!11347 () Bool)

(declare-fun res!32970 () Bool)

(declare-fun e!39037 () Bool)

(assert (=> d!11347 (=> res!32970 e!39037)))

(assert (=> d!11347 (= res!32970 (and ((_ is Cons!1419) (toList!687 lt!23590)) (= (_1!1018 (h!2000 (toList!687 lt!23590))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355))))))

(assert (=> d!11347 (= (containsKey!128 (toList!687 lt!23590) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) e!39037)))

(declare-fun b!59365 () Bool)

(declare-fun e!39038 () Bool)

(assert (=> b!59365 (= e!39037 e!39038)))

(declare-fun res!32971 () Bool)

(assert (=> b!59365 (=> (not res!32971) (not e!39038))))

(assert (=> b!59365 (= res!32971 (and (or (not ((_ is Cons!1419) (toList!687 lt!23590))) (bvsle (_1!1018 (h!2000 (toList!687 lt!23590))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355))) ((_ is Cons!1419) (toList!687 lt!23590)) (bvslt (_1!1018 (h!2000 (toList!687 lt!23590))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355))))))

(declare-fun b!59366 () Bool)

(assert (=> b!59366 (= e!39038 (containsKey!128 (t!4757 (toList!687 lt!23590)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(assert (= (and d!11347 (not res!32970)) b!59365))

(assert (= (and b!59365 res!32971) b!59366))

(assert (=> b!59366 m!50367))

(declare-fun m!51179 () Bool)

(assert (=> b!59366 m!51179))

(assert (=> d!11205 d!11347))

(declare-fun d!11349 () Bool)

(assert (=> d!11349 (= (+!80 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) lt!23721 (zeroValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24097 () Unit!1547)

(declare-fun choose!317 (array!3703 array!3705 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 V!2841 Int) Unit!1547)

(assert (=> d!11349 (= lt!24097 (choose!317 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) lt!23721 (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2042 newMap!16)))))

(assert (=> d!11349 (validMask!0 (mask!5926 newMap!16))))

(assert (=> d!11349 (= (lemmaChangeLongMinValueKeyThenAddPairToListMap!15 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) lt!23721 (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2042 newMap!16)) lt!24097)))

(declare-fun bs!2569 () Bool)

(assert (= bs!2569 d!11349))

(assert (=> bs!2569 m!50509))

(declare-fun m!51181 () Bool)

(assert (=> bs!2569 m!51181))

(assert (=> bs!2569 m!50395))

(declare-fun m!51183 () Bool)

(assert (=> bs!2569 m!51183))

(assert (=> bs!2569 m!50509))

(assert (=> bs!2569 m!50395))

(declare-fun m!51185 () Bool)

(assert (=> bs!2569 m!51185))

(assert (=> bs!2569 m!50667))

(assert (=> b!58903 d!11349))

(assert (=> d!11221 d!11227))

(declare-fun d!11351 () Bool)

(assert (=> d!11351 (arrayNoDuplicates!0 (_keys!3666 (v!2382 (underlying!225 thiss!992))) from!355 Nil!1419)))

(assert (=> d!11351 true))

(declare-fun _$71!72 () Unit!1547)

(assert (=> d!11351 (= (choose!39 (_keys!3666 (v!2382 (underlying!225 thiss!992))) #b00000000000000000000000000000000 from!355) _$71!72)))

(declare-fun bs!2570 () Bool)

(assert (= bs!2570 d!11351))

(assert (=> bs!2570 m!50365))

(assert (=> d!11221 d!11351))

(assert (=> b!59003 d!11223))

(declare-fun d!11353 () Bool)

(declare-fun e!39039 () Bool)

(assert (=> d!11353 e!39039))

(declare-fun res!32972 () Bool)

(assert (=> d!11353 (=> res!32972 e!39039)))

(declare-fun lt!24100 () Bool)

(assert (=> d!11353 (= res!32972 (not lt!24100))))

(declare-fun lt!24099 () Bool)

(assert (=> d!11353 (= lt!24100 lt!24099)))

(declare-fun lt!24098 () Unit!1547)

(declare-fun e!39040 () Unit!1547)

(assert (=> d!11353 (= lt!24098 e!39040)))

(declare-fun c!7584 () Bool)

(assert (=> d!11353 (= c!7584 lt!24099)))

(assert (=> d!11353 (= lt!24099 (containsKey!128 (toList!687 lt!23783) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11353 (= (contains!678 lt!23783 #b0000000000000000000000000000000000000000000000000000000000000000) lt!24100)))

(declare-fun b!59367 () Bool)

(declare-fun lt!24101 () Unit!1547)

(assert (=> b!59367 (= e!39040 lt!24101)))

(assert (=> b!59367 (= lt!24101 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 lt!23783) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59367 (isDefined!77 (getValueByKey!125 (toList!687 lt!23783) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59368 () Bool)

(declare-fun Unit!1566 () Unit!1547)

(assert (=> b!59368 (= e!39040 Unit!1566)))

(declare-fun b!59369 () Bool)

(assert (=> b!59369 (= e!39039 (isDefined!77 (getValueByKey!125 (toList!687 lt!23783) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11353 c!7584) b!59367))

(assert (= (and d!11353 (not c!7584)) b!59368))

(assert (= (and d!11353 (not res!32972)) b!59369))

(declare-fun m!51187 () Bool)

(assert (=> d!11353 m!51187))

(declare-fun m!51189 () Bool)

(assert (=> b!59367 m!51189))

(assert (=> b!59367 m!50687))

(assert (=> b!59367 m!50687))

(declare-fun m!51191 () Bool)

(assert (=> b!59367 m!51191))

(assert (=> b!59369 m!50687))

(assert (=> b!59369 m!50687))

(assert (=> b!59369 m!51191))

(assert (=> bm!4391 d!11353))

(declare-fun d!11355 () Bool)

(declare-fun e!39041 () Bool)

(assert (=> d!11355 e!39041))

(declare-fun res!32973 () Bool)

(assert (=> d!11355 (=> res!32973 e!39041)))

(declare-fun lt!24104 () Bool)

(assert (=> d!11355 (= res!32973 (not lt!24104))))

(declare-fun lt!24103 () Bool)

(assert (=> d!11355 (= lt!24104 lt!24103)))

(declare-fun lt!24102 () Unit!1547)

(declare-fun e!39042 () Unit!1547)

(assert (=> d!11355 (= lt!24102 e!39042)))

(declare-fun c!7585 () Bool)

(assert (=> d!11355 (= c!7585 lt!24103)))

(assert (=> d!11355 (= lt!24103 (containsKey!128 (toList!687 e!38747) (ite c!7461 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (select (arr!1772 (_keys!3666 newMap!16)) (index!3008 lt!23716)))))))

(assert (=> d!11355 (= (contains!678 e!38747 (ite c!7461 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (select (arr!1772 (_keys!3666 newMap!16)) (index!3008 lt!23716)))) lt!24104)))

(declare-fun b!59370 () Bool)

(declare-fun lt!24105 () Unit!1547)

(assert (=> b!59370 (= e!39042 lt!24105)))

(assert (=> b!59370 (= lt!24105 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 e!38747) (ite c!7461 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (select (arr!1772 (_keys!3666 newMap!16)) (index!3008 lt!23716)))))))

(assert (=> b!59370 (isDefined!77 (getValueByKey!125 (toList!687 e!38747) (ite c!7461 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (select (arr!1772 (_keys!3666 newMap!16)) (index!3008 lt!23716)))))))

(declare-fun b!59371 () Bool)

(declare-fun Unit!1567 () Unit!1547)

(assert (=> b!59371 (= e!39042 Unit!1567)))

(declare-fun b!59372 () Bool)

(assert (=> b!59372 (= e!39041 (isDefined!77 (getValueByKey!125 (toList!687 e!38747) (ite c!7461 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (select (arr!1772 (_keys!3666 newMap!16)) (index!3008 lt!23716))))))))

(assert (= (and d!11355 c!7585) b!59370))

(assert (= (and d!11355 (not c!7585)) b!59371))

(assert (= (and d!11355 (not res!32973)) b!59372))

(declare-fun m!51193 () Bool)

(assert (=> d!11355 m!51193))

(declare-fun m!51195 () Bool)

(assert (=> b!59370 m!51195))

(declare-fun m!51197 () Bool)

(assert (=> b!59370 m!51197))

(assert (=> b!59370 m!51197))

(declare-fun m!51199 () Bool)

(assert (=> b!59370 m!51199))

(assert (=> b!59372 m!51197))

(assert (=> b!59372 m!51197))

(assert (=> b!59372 m!51199))

(assert (=> bm!4362 d!11355))

(declare-fun condMapEmpty!2885 () Bool)

(declare-fun mapDefault!2885 () ValueCell!854)

(assert (=> mapNonEmpty!2883 (= condMapEmpty!2885 (= mapRest!2883 ((as const (Array (_ BitVec 32) ValueCell!854)) mapDefault!2885)))))

(declare-fun e!39043 () Bool)

(declare-fun mapRes!2885 () Bool)

(assert (=> mapNonEmpty!2883 (= tp!8013 (and e!39043 mapRes!2885))))

(declare-fun b!59373 () Bool)

(declare-fun e!39044 () Bool)

(assert (=> b!59373 (= e!39044 tp_is_empty!2395)))

(declare-fun mapIsEmpty!2885 () Bool)

(assert (=> mapIsEmpty!2885 mapRes!2885))

(declare-fun b!59374 () Bool)

(assert (=> b!59374 (= e!39043 tp_is_empty!2395)))

(declare-fun mapNonEmpty!2885 () Bool)

(declare-fun tp!8015 () Bool)

(assert (=> mapNonEmpty!2885 (= mapRes!2885 (and tp!8015 e!39044))))

(declare-fun mapKey!2885 () (_ BitVec 32))

(declare-fun mapRest!2885 () (Array (_ BitVec 32) ValueCell!854))

(declare-fun mapValue!2885 () ValueCell!854)

(assert (=> mapNonEmpty!2885 (= mapRest!2883 (store mapRest!2885 mapKey!2885 mapValue!2885))))

(assert (= (and mapNonEmpty!2883 condMapEmpty!2885) mapIsEmpty!2885))

(assert (= (and mapNonEmpty!2883 (not condMapEmpty!2885)) mapNonEmpty!2885))

(assert (= (and mapNonEmpty!2885 ((_ is ValueCellFull!854) mapValue!2885)) b!59373))

(assert (= (and mapNonEmpty!2883 ((_ is ValueCellFull!854) mapDefault!2885)) b!59374))

(declare-fun m!51201 () Bool)

(assert (=> mapNonEmpty!2885 m!51201))

(declare-fun condMapEmpty!2886 () Bool)

(declare-fun mapDefault!2886 () ValueCell!854)

(assert (=> mapNonEmpty!2884 (= condMapEmpty!2886 (= mapRest!2884 ((as const (Array (_ BitVec 32) ValueCell!854)) mapDefault!2886)))))

(declare-fun e!39045 () Bool)

(declare-fun mapRes!2886 () Bool)

(assert (=> mapNonEmpty!2884 (= tp!8014 (and e!39045 mapRes!2886))))

(declare-fun b!59375 () Bool)

(declare-fun e!39046 () Bool)

(assert (=> b!59375 (= e!39046 tp_is_empty!2395)))

(declare-fun mapIsEmpty!2886 () Bool)

(assert (=> mapIsEmpty!2886 mapRes!2886))

(declare-fun b!59376 () Bool)

(assert (=> b!59376 (= e!39045 tp_is_empty!2395)))

(declare-fun mapNonEmpty!2886 () Bool)

(declare-fun tp!8016 () Bool)

(assert (=> mapNonEmpty!2886 (= mapRes!2886 (and tp!8016 e!39046))))

(declare-fun mapRest!2886 () (Array (_ BitVec 32) ValueCell!854))

(declare-fun mapKey!2886 () (_ BitVec 32))

(declare-fun mapValue!2886 () ValueCell!854)

(assert (=> mapNonEmpty!2886 (= mapRest!2884 (store mapRest!2886 mapKey!2886 mapValue!2886))))

(assert (= (and mapNonEmpty!2884 condMapEmpty!2886) mapIsEmpty!2886))

(assert (= (and mapNonEmpty!2884 (not condMapEmpty!2886)) mapNonEmpty!2886))

(assert (= (and mapNonEmpty!2886 ((_ is ValueCellFull!854) mapValue!2886)) b!59375))

(assert (= (and mapNonEmpty!2884 ((_ is ValueCellFull!854) mapDefault!2886)) b!59376))

(declare-fun m!51203 () Bool)

(assert (=> mapNonEmpty!2886 m!51203))

(declare-fun b_lambda!2601 () Bool)

(assert (= b_lambda!2599 (or (and b!58642 b_free!1957) (and b!58653 b_free!1959 (= (defaultEntry!2042 newMap!16) (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))))) b_lambda!2601)))

(declare-fun b_lambda!2603 () Bool)

(assert (= b_lambda!2597 (or (and b!58642 b_free!1957) (and b!58653 b_free!1959 (= (defaultEntry!2042 newMap!16) (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))))) b_lambda!2603)))

(declare-fun b_lambda!2605 () Bool)

(assert (= b_lambda!2591 (or (and b!58642 b_free!1957 (= (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) (defaultEntry!2042 newMap!16))) (and b!58653 b_free!1959) b_lambda!2605)))

(declare-fun b_lambda!2607 () Bool)

(assert (= b_lambda!2595 (or (and b!58642 b_free!1957 (= (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) (defaultEntry!2042 newMap!16))) (and b!58653 b_free!1959) b_lambda!2607)))

(declare-fun b_lambda!2609 () Bool)

(assert (= b_lambda!2593 (or (and b!58642 b_free!1957 (= (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) (defaultEntry!2042 newMap!16))) (and b!58653 b_free!1959) b_lambda!2609)))

(check-sat (not d!11325) (not b!59031) (not b!59273) (not b!59283) (not bm!4414) (not b!59180) (not b!59242) (not b_lambda!2605) (not b!59211) (not b!59219) (not b_lambda!2607) (not b!59344) (not b!59367) (not bm!4404) (not b!59229) (not bm!4412) (not b!59127) (not b!59228) (not b!59360) (not d!11341) (not d!11285) (not d!11331) (not d!11257) (not b!59227) (not d!11277) b_and!3585 (not b_lambda!2589) (not bm!4444) (not b!59065) (not b!59346) (not b!59032) (not d!11233) (not b!59165) (not b!59158) b_and!3587 (not b!59055) (not b!59358) (not b!59239) (not b!59079) (not d!11291) (not b!59294) (not bm!4400) (not b!59366) (not b!59210) (not b!59248) (not b!59117) (not b!59062) (not d!11241) (not d!11283) (not d!11353) (not d!11287) (not d!11307) (not b!59214) (not bm!4418) (not b!59171) (not d!11321) (not b!59072) (not bm!4416) (not b_next!1959) (not d!11295) (not b!59162) (not b!59168) (not b!59245) (not b!59274) (not b!59226) (not d!11303) (not d!11237) (not b!59144) (not bm!4406) (not b!59246) (not b!59149) (not b!59147) (not b!59172) (not bm!4422) (not bm!4419) (not d!11231) (not d!11245) (not d!11335) (not d!11299) (not bm!4441) (not b!59076) (not b!59156) (not b!59217) (not b!59297) (not d!11319) (not bm!4402) (not d!11323) (not b!59303) (not b!59235) (not b!59345) (not bm!4428) (not b_next!1957) (not b_lambda!2601) (not d!11271) (not d!11281) (not b!59152) (not b!59181) (not b!59143) (not b!59372) (not b!59124) (not b!59104) (not bm!4401) (not b!59107) (not d!11247) (not d!11355) (not b!59182) (not b!59115) (not b!59120) (not d!11345) (not mapNonEmpty!2886) (not b!59146) (not d!11317) (not b!59234) (not b!59030) (not d!11305) (not b!59209) (not b!59069) (not b_lambda!2603) (not d!11351) (not b!59161) tp_is_empty!2395 (not b!59237) (not d!11267) (not b!59231) (not d!11309) (not b_lambda!2609) (not bm!4432) (not b!59284) (not d!11297) (not b!59218) (not b!59075) (not d!11315) (not b!59066) (not bm!4442) (not b!59131) (not b!59370) (not bm!4396) (not d!11261) (not b!59121) (not b!59082) (not b!59302) (not d!11253) (not d!11293) (not b!59060) (not b!59179) (not d!11275) (not d!11327) (not b!59301) (not d!11349) (not b!59212) (not b!59308) (not b!59282) (not b!59145) (not b!59280) (not d!11329) (not d!11311) (not d!11229) (not b!59352) (not b!59213) (not d!11239) (not b!59150) (not b!59230) (not mapNonEmpty!2885) (not b_lambda!2585) (not b!59178) (not b!59369) (not b!59130) (not d!11313) (not b!59093) (not bm!4431) (not b!59111) (not d!11251) (not b!59300) (not b!59110) (not bm!4427) (not b!59045) (not b!59105) (not bm!4398) (not bm!4408) (not d!11301) (not b!59221) (not bm!4409) (not d!11273))
(check-sat b_and!3585 b_and!3587 (not b_next!1957) (not b_next!1959))
(get-model)

(assert (=> d!11251 d!11253))

(assert (=> d!11251 d!11255))

(declare-fun d!11357 () Bool)

(assert (=> d!11357 (isDefined!77 (getValueByKey!125 (toList!687 lt!23590) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(assert (=> d!11357 true))

(declare-fun _$12!305 () Unit!1547)

(assert (=> d!11357 (= (choose!311 (toList!687 lt!23590) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) _$12!305)))

(declare-fun bs!2571 () Bool)

(assert (= bs!2571 d!11357))

(assert (=> bs!2571 m!50367))

(assert (=> bs!2571 m!50497))

(assert (=> bs!2571 m!50497))

(assert (=> bs!2571 m!50499))

(assert (=> d!11251 d!11357))

(declare-fun d!11359 () Bool)

(declare-fun res!32978 () Bool)

(declare-fun e!39051 () Bool)

(assert (=> d!11359 (=> res!32978 e!39051)))

(assert (=> d!11359 (= res!32978 (or ((_ is Nil!1420) (toList!687 lt!23590)) ((_ is Nil!1420) (t!4757 (toList!687 lt!23590)))))))

(assert (=> d!11359 (= (isStrictlySorted!271 (toList!687 lt!23590)) e!39051)))

(declare-fun b!59381 () Bool)

(declare-fun e!39052 () Bool)

(assert (=> b!59381 (= e!39051 e!39052)))

(declare-fun res!32979 () Bool)

(assert (=> b!59381 (=> (not res!32979) (not e!39052))))

(assert (=> b!59381 (= res!32979 (bvslt (_1!1018 (h!2000 (toList!687 lt!23590))) (_1!1018 (h!2000 (t!4757 (toList!687 lt!23590))))))))

(declare-fun b!59382 () Bool)

(assert (=> b!59382 (= e!39052 (isStrictlySorted!271 (t!4757 (toList!687 lt!23590))))))

(assert (= (and d!11359 (not res!32978)) b!59381))

(assert (= (and b!59381 res!32979) b!59382))

(declare-fun m!51205 () Bool)

(assert (=> b!59382 m!51205))

(assert (=> d!11251 d!11359))

(declare-fun d!11361 () Bool)

(assert (=> d!11361 (contains!678 (getCurrentListMap!388 (_keys!3666 newMap!16) lt!23706 (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (select (arr!1772 (_keys!3666 newMap!16)) (index!3008 lt!23716)))))

(assert (=> d!11361 true))

(declare-fun _$16!78 () Unit!1547)

(assert (=> d!11361 (= (choose!314 (_keys!3666 newMap!16) lt!23706 (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (index!3008 lt!23716) (defaultEntry!2042 newMap!16)) _$16!78)))

(declare-fun bs!2572 () Bool)

(assert (= bs!2572 d!11361))

(assert (=> bs!2572 m!51047))

(assert (=> bs!2572 m!50539))

(assert (=> bs!2572 m!51047))

(assert (=> bs!2572 m!50539))

(assert (=> bs!2572 m!51049))

(assert (=> d!11321 d!11361))

(declare-fun d!11363 () Bool)

(assert (=> d!11363 (= (validMask!0 (mask!5926 newMap!16)) (and (or (= (mask!5926 newMap!16) #b00000000000000000000000000000111) (= (mask!5926 newMap!16) #b00000000000000000000000000001111) (= (mask!5926 newMap!16) #b00000000000000000000000000011111) (= (mask!5926 newMap!16) #b00000000000000000000000000111111) (= (mask!5926 newMap!16) #b00000000000000000000000001111111) (= (mask!5926 newMap!16) #b00000000000000000000000011111111) (= (mask!5926 newMap!16) #b00000000000000000000000111111111) (= (mask!5926 newMap!16) #b00000000000000000000001111111111) (= (mask!5926 newMap!16) #b00000000000000000000011111111111) (= (mask!5926 newMap!16) #b00000000000000000000111111111111) (= (mask!5926 newMap!16) #b00000000000000000001111111111111) (= (mask!5926 newMap!16) #b00000000000000000011111111111111) (= (mask!5926 newMap!16) #b00000000000000000111111111111111) (= (mask!5926 newMap!16) #b00000000000000001111111111111111) (= (mask!5926 newMap!16) #b00000000000000011111111111111111) (= (mask!5926 newMap!16) #b00000000000000111111111111111111) (= (mask!5926 newMap!16) #b00000000000001111111111111111111) (= (mask!5926 newMap!16) #b00000000000011111111111111111111) (= (mask!5926 newMap!16) #b00000000000111111111111111111111) (= (mask!5926 newMap!16) #b00000000001111111111111111111111) (= (mask!5926 newMap!16) #b00000000011111111111111111111111) (= (mask!5926 newMap!16) #b00000000111111111111111111111111) (= (mask!5926 newMap!16) #b00000001111111111111111111111111) (= (mask!5926 newMap!16) #b00000011111111111111111111111111) (= (mask!5926 newMap!16) #b00000111111111111111111111111111) (= (mask!5926 newMap!16) #b00001111111111111111111111111111) (= (mask!5926 newMap!16) #b00011111111111111111111111111111) (= (mask!5926 newMap!16) #b00111111111111111111111111111111)) (bvsle (mask!5926 newMap!16) #b00111111111111111111111111111111)))))

(assert (=> d!11321 d!11363))

(declare-fun d!11365 () Bool)

(assert (=> d!11365 (= (validKeyInArray!0 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)) (and (not (= (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!59297 d!11365))

(declare-fun d!11367 () Bool)

(declare-fun res!32980 () Bool)

(declare-fun e!39053 () Bool)

(assert (=> d!11367 (=> res!32980 e!39053)))

(assert (=> d!11367 (= res!32980 (and ((_ is Cons!1419) (toList!687 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))) (= (_1!1018 (h!2000 (toList!687 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355))))))

(assert (=> d!11367 (= (containsKey!128 (toList!687 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) e!39053)))

(declare-fun b!59383 () Bool)

(declare-fun e!39054 () Bool)

(assert (=> b!59383 (= e!39053 e!39054)))

(declare-fun res!32981 () Bool)

(assert (=> b!59383 (=> (not res!32981) (not e!39054))))

(assert (=> b!59383 (= res!32981 (and (or (not ((_ is Cons!1419) (toList!687 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))))) (bvsle (_1!1018 (h!2000 (toList!687 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355))) ((_ is Cons!1419) (toList!687 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))) (bvslt (_1!1018 (h!2000 (toList!687 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355))))))

(declare-fun b!59384 () Bool)

(assert (=> b!59384 (= e!39054 (containsKey!128 (t!4757 (toList!687 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(assert (= (and d!11367 (not res!32980)) b!59383))

(assert (= (and b!59383 res!32981) b!59384))

(assert (=> b!59384 m!50367))

(declare-fun m!51207 () Bool)

(assert (=> b!59384 m!51207))

(assert (=> d!11325 d!11367))

(assert (=> d!11327 d!11233))

(declare-fun b!59401 () Bool)

(declare-fun res!32990 () Bool)

(declare-fun e!39066 () Bool)

(assert (=> b!59401 (=> (not res!32990) (not e!39066))))

(declare-fun lt!24108 () SeekEntryResult!221)

(assert (=> b!59401 (= res!32990 (= (select (arr!1772 (_keys!3666 newMap!16)) (index!3010 lt!24108)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59402 () Bool)

(declare-fun res!32992 () Bool)

(assert (=> b!59402 (=> (not res!32992) (not e!39066))))

(declare-fun call!4452 () Bool)

(assert (=> b!59402 (= res!32992 call!4452)))

(declare-fun e!39064 () Bool)

(assert (=> b!59402 (= e!39064 e!39066)))

(declare-fun c!7590 () Bool)

(declare-fun bm!4449 () Bool)

(assert (=> bm!4449 (= call!4452 (inRange!0 (ite c!7590 (index!3007 lt!24108) (index!3010 lt!24108)) (mask!5926 newMap!16)))))

(declare-fun b!59403 () Bool)

(declare-fun res!32991 () Bool)

(assert (=> b!59403 (= res!32991 (= (select (arr!1772 (_keys!3666 newMap!16)) (index!3007 lt!24108)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!39063 () Bool)

(assert (=> b!59403 (=> (not res!32991) (not e!39063))))

(declare-fun b!59404 () Bool)

(declare-fun call!4453 () Bool)

(assert (=> b!59404 (= e!39063 (not call!4453))))

(declare-fun b!59405 () Bool)

(declare-fun e!39065 () Bool)

(assert (=> b!59405 (= e!39065 e!39063)))

(declare-fun res!32993 () Bool)

(assert (=> b!59405 (= res!32993 call!4452)))

(assert (=> b!59405 (=> (not res!32993) (not e!39063))))

(declare-fun b!59406 () Bool)

(assert (=> b!59406 (= e!39066 (not call!4453))))

(declare-fun b!59408 () Bool)

(assert (=> b!59408 (= e!39064 ((_ is Undefined!221) lt!24108))))

(declare-fun bm!4450 () Bool)

(assert (=> bm!4450 (= call!4453 (arrayContainsKey!0 (_keys!3666 newMap!16) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!59407 () Bool)

(assert (=> b!59407 (= e!39065 e!39064)))

(declare-fun c!7591 () Bool)

(assert (=> b!59407 (= c!7591 ((_ is MissingVacant!221) lt!24108))))

(declare-fun d!11369 () Bool)

(assert (=> d!11369 e!39065))

(assert (=> d!11369 (= c!7590 ((_ is MissingZero!221) lt!24108))))

(assert (=> d!11369 (= lt!24108 (seekEntryOrOpen!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (_keys!3666 newMap!16) (mask!5926 newMap!16)))))

(assert (=> d!11369 true))

(declare-fun _$34!759 () Unit!1547)

(assert (=> d!11369 (= (choose!316 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (defaultEntry!2042 newMap!16)) _$34!759)))

(assert (= (and d!11369 c!7590) b!59405))

(assert (= (and d!11369 (not c!7590)) b!59407))

(assert (= (and b!59405 res!32993) b!59403))

(assert (= (and b!59403 res!32991) b!59404))

(assert (= (and b!59407 c!7591) b!59402))

(assert (= (and b!59407 (not c!7591)) b!59408))

(assert (= (and b!59402 res!32992) b!59401))

(assert (= (and b!59401 res!32990) b!59406))

(assert (= (or b!59405 b!59402) bm!4449))

(assert (= (or b!59404 b!59406) bm!4450))

(declare-fun m!51209 () Bool)

(assert (=> bm!4449 m!51209))

(declare-fun m!51211 () Bool)

(assert (=> b!59403 m!51211))

(assert (=> d!11369 m!50367))

(assert (=> d!11369 m!50525))

(assert (=> bm!4450 m!50367))

(assert (=> bm!4450 m!50511))

(declare-fun m!51213 () Bool)

(assert (=> b!59401 m!51213))

(assert (=> d!11327 d!11369))

(assert (=> d!11327 d!11363))

(declare-fun d!11371 () Bool)

(assert (=> d!11371 (= (map!1108 (_2!1019 lt!24070)) (getCurrentListMap!388 (_keys!3666 (_2!1019 lt!24070)) (_values!2025 (_2!1019 lt!24070)) (mask!5926 (_2!1019 lt!24070)) (extraKeys!1929 (_2!1019 lt!24070)) (zeroValue!1958 (_2!1019 lt!24070)) (minValue!1958 (_2!1019 lt!24070)) #b00000000000000000000000000000000 (defaultEntry!2042 (_2!1019 lt!24070))))))

(declare-fun bs!2573 () Bool)

(assert (= bs!2573 d!11371))

(declare-fun m!51215 () Bool)

(assert (=> bs!2573 m!51215))

(assert (=> b!59345 d!11371))

(declare-fun d!11373 () Bool)

(declare-fun e!39067 () Bool)

(assert (=> d!11373 e!39067))

(declare-fun res!32994 () Bool)

(assert (=> d!11373 (=> (not res!32994) (not e!39067))))

(declare-fun lt!24111 () ListLongMap!1343)

(assert (=> d!11373 (= res!32994 (contains!678 lt!24111 (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!24112 () List!1423)

(assert (=> d!11373 (= lt!24111 (ListLongMap!1344 lt!24112))))

(declare-fun lt!24110 () Unit!1547)

(declare-fun lt!24109 () Unit!1547)

(assert (=> d!11373 (= lt!24110 lt!24109)))

(assert (=> d!11373 (= (getValueByKey!125 lt!24112 (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11373 (= lt!24109 (lemmaContainsTupThenGetReturnValue!42 lt!24112 (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11373 (= lt!24112 (insertStrictlySorted!45 (toList!687 (map!1108 newMap!16)) (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11373 (= (+!80 (map!1108 newMap!16) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!24111)))

(declare-fun b!59409 () Bool)

(declare-fun res!32995 () Bool)

(assert (=> b!59409 (=> (not res!32995) (not e!39067))))

(assert (=> b!59409 (= res!32995 (= (getValueByKey!125 (toList!687 lt!24111) (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!59410 () Bool)

(assert (=> b!59410 (= e!39067 (contains!680 (toList!687 lt!24111) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!11373 res!32994) b!59409))

(assert (= (and b!59409 res!32995) b!59410))

(declare-fun m!51217 () Bool)

(assert (=> d!11373 m!51217))

(declare-fun m!51219 () Bool)

(assert (=> d!11373 m!51219))

(declare-fun m!51221 () Bool)

(assert (=> d!11373 m!51221))

(declare-fun m!51223 () Bool)

(assert (=> d!11373 m!51223))

(declare-fun m!51225 () Bool)

(assert (=> b!59409 m!51225))

(declare-fun m!51227 () Bool)

(assert (=> b!59410 m!51227))

(assert (=> b!59345 d!11373))

(assert (=> b!59345 d!11215))

(declare-fun b!59423 () Bool)

(declare-fun e!39074 () SeekEntryResult!221)

(declare-fun nextIndex!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!59423 (= e!39074 (seekKeyOrZeroReturnVacant!0 (bvadd (x!9997 lt!23809) #b00000000000000000000000000000001) (nextIndex!0 (index!3009 lt!23809) (bvadd (x!9997 lt!23809) #b00000000000000000000000000000001) (mask!5926 newMap!16)) (index!3009 lt!23809) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (_keys!3666 newMap!16) (mask!5926 newMap!16)))))

(declare-fun b!59424 () Bool)

(declare-fun e!39076 () SeekEntryResult!221)

(assert (=> b!59424 (= e!39076 Undefined!221)))

(declare-fun d!11375 () Bool)

(declare-fun lt!24118 () SeekEntryResult!221)

(assert (=> d!11375 (and (or ((_ is Undefined!221) lt!24118) (not ((_ is Found!221) lt!24118)) (and (bvsge (index!3008 lt!24118) #b00000000000000000000000000000000) (bvslt (index!3008 lt!24118) (size!2002 (_keys!3666 newMap!16))))) (or ((_ is Undefined!221) lt!24118) ((_ is Found!221) lt!24118) (not ((_ is MissingVacant!221) lt!24118)) (not (= (index!3010 lt!24118) (index!3009 lt!23809))) (and (bvsge (index!3010 lt!24118) #b00000000000000000000000000000000) (bvslt (index!3010 lt!24118) (size!2002 (_keys!3666 newMap!16))))) (or ((_ is Undefined!221) lt!24118) (ite ((_ is Found!221) lt!24118) (= (select (arr!1772 (_keys!3666 newMap!16)) (index!3008 lt!24118)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (and ((_ is MissingVacant!221) lt!24118) (= (index!3010 lt!24118) (index!3009 lt!23809)) (= (select (arr!1772 (_keys!3666 newMap!16)) (index!3010 lt!24118)) #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (=> d!11375 (= lt!24118 e!39076)))

(declare-fun c!7600 () Bool)

(assert (=> d!11375 (= c!7600 (bvsge (x!9997 lt!23809) #b01111111111111111111111111111110))))

(declare-fun lt!24117 () (_ BitVec 64))

(assert (=> d!11375 (= lt!24117 (select (arr!1772 (_keys!3666 newMap!16)) (index!3009 lt!23809)))))

(assert (=> d!11375 (validMask!0 (mask!5926 newMap!16))))

(assert (=> d!11375 (= (seekKeyOrZeroReturnVacant!0 (x!9997 lt!23809) (index!3009 lt!23809) (index!3009 lt!23809) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (_keys!3666 newMap!16) (mask!5926 newMap!16)) lt!24118)))

(declare-fun b!59425 () Bool)

(declare-fun e!39075 () SeekEntryResult!221)

(assert (=> b!59425 (= e!39076 e!39075)))

(declare-fun c!7599 () Bool)

(assert (=> b!59425 (= c!7599 (= lt!24117 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(declare-fun b!59426 () Bool)

(assert (=> b!59426 (= e!39075 (Found!221 (index!3009 lt!23809)))))

(declare-fun b!59427 () Bool)

(assert (=> b!59427 (= e!39074 (MissingVacant!221 (index!3009 lt!23809)))))

(declare-fun b!59428 () Bool)

(declare-fun c!7598 () Bool)

(assert (=> b!59428 (= c!7598 (= lt!24117 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59428 (= e!39075 e!39074)))

(assert (= (and d!11375 c!7600) b!59424))

(assert (= (and d!11375 (not c!7600)) b!59425))

(assert (= (and b!59425 c!7599) b!59426))

(assert (= (and b!59425 (not c!7599)) b!59428))

(assert (= (and b!59428 c!7598) b!59427))

(assert (= (and b!59428 (not c!7598)) b!59423))

(declare-fun m!51229 () Bool)

(assert (=> b!59423 m!51229))

(assert (=> b!59423 m!51229))

(assert (=> b!59423 m!50367))

(declare-fun m!51231 () Bool)

(assert (=> b!59423 m!51231))

(declare-fun m!51233 () Bool)

(assert (=> d!11375 m!51233))

(declare-fun m!51235 () Bool)

(assert (=> d!11375 m!51235))

(assert (=> d!11375 m!50671))

(assert (=> d!11375 m!50667))

(assert (=> b!59045 d!11375))

(declare-fun d!11377 () Bool)

(declare-fun res!32996 () Bool)

(declare-fun e!39077 () Bool)

(assert (=> d!11377 (=> res!32996 e!39077)))

(assert (=> d!11377 (= res!32996 (= (select (arr!1772 (_keys!3666 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(assert (=> d!11377 (= (arrayContainsKey!0 (_keys!3666 newMap!16) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) e!39077)))

(declare-fun b!59429 () Bool)

(declare-fun e!39078 () Bool)

(assert (=> b!59429 (= e!39077 e!39078)))

(declare-fun res!32997 () Bool)

(assert (=> b!59429 (=> (not res!32997) (not e!39078))))

(assert (=> b!59429 (= res!32997 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2002 (_keys!3666 newMap!16))))))

(declare-fun b!59430 () Bool)

(assert (=> b!59430 (= e!39078 (arrayContainsKey!0 (_keys!3666 newMap!16) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!11377 (not res!32996)) b!59429))

(assert (= (and b!59429 res!32997) b!59430))

(declare-fun m!51237 () Bool)

(assert (=> d!11377 m!51237))

(assert (=> b!59430 m!50367))

(declare-fun m!51239 () Bool)

(assert (=> b!59430 m!51239))

(assert (=> b!59079 d!11377))

(declare-fun b!59432 () Bool)

(declare-fun e!39079 () Option!131)

(declare-fun e!39080 () Option!131)

(assert (=> b!59432 (= e!39079 e!39080)))

(declare-fun c!7602 () Bool)

(assert (=> b!59432 (= c!7602 (and ((_ is Cons!1419) (toList!687 lt!23996)) (not (= (_1!1018 (h!2000 (toList!687 lt!23996))) (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))))

(declare-fun b!59431 () Bool)

(assert (=> b!59431 (= e!39079 (Some!130 (_2!1018 (h!2000 (toList!687 lt!23996)))))))

(declare-fun d!11379 () Bool)

(declare-fun c!7601 () Bool)

(assert (=> d!11379 (= c!7601 (and ((_ is Cons!1419) (toList!687 lt!23996)) (= (_1!1018 (h!2000 (toList!687 lt!23996))) (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (=> d!11379 (= (getValueByKey!125 (toList!687 lt!23996) (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) e!39079)))

(declare-fun b!59434 () Bool)

(assert (=> b!59434 (= e!39080 None!129)))

(declare-fun b!59433 () Bool)

(assert (=> b!59433 (= e!39080 (getValueByKey!125 (t!4757 (toList!687 lt!23996)) (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(assert (= (and d!11379 c!7601) b!59431))

(assert (= (and d!11379 (not c!7601)) b!59432))

(assert (= (and b!59432 c!7602) b!59433))

(assert (= (and b!59432 (not c!7602)) b!59434))

(declare-fun m!51241 () Bool)

(assert (=> b!59433 m!51241))

(assert (=> b!59283 d!11379))

(assert (=> b!59143 d!11365))

(declare-fun b!59436 () Bool)

(declare-fun e!39081 () Option!131)

(declare-fun e!39082 () Option!131)

(assert (=> b!59436 (= e!39081 e!39082)))

(declare-fun c!7604 () Bool)

(assert (=> b!59436 (= c!7604 (and ((_ is Cons!1419) (toList!687 lt!23948)) (not (= (_1!1018 (h!2000 (toList!687 lt!23948))) (_1!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))))

(declare-fun b!59435 () Bool)

(assert (=> b!59435 (= e!39081 (Some!130 (_2!1018 (h!2000 (toList!687 lt!23948)))))))

(declare-fun c!7603 () Bool)

(declare-fun d!11381 () Bool)

(assert (=> d!11381 (= c!7603 (and ((_ is Cons!1419) (toList!687 lt!23948)) (= (_1!1018 (h!2000 (toList!687 lt!23948))) (_1!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (=> d!11381 (= (getValueByKey!125 (toList!687 lt!23948) (_1!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) e!39081)))

(declare-fun b!59438 () Bool)

(assert (=> b!59438 (= e!39082 None!129)))

(declare-fun b!59437 () Bool)

(assert (=> b!59437 (= e!39082 (getValueByKey!125 (t!4757 (toList!687 lt!23948)) (_1!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(assert (= (and d!11381 c!7603) b!59435))

(assert (= (and d!11381 (not c!7603)) b!59436))

(assert (= (and b!59436 c!7604) b!59437))

(assert (= (and b!59436 (not c!7604)) b!59438))

(declare-fun m!51243 () Bool)

(assert (=> b!59437 m!51243))

(assert (=> b!59226 d!11381))

(assert (=> b!59308 d!11223))

(declare-fun lt!24121 () Bool)

(declare-fun d!11383 () Bool)

(declare-fun content!65 (List!1423) (InoxSet tuple2!2014))

(assert (=> d!11383 (= lt!24121 (select (content!65 (toList!687 lt!23989)) (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun e!39088 () Bool)

(assert (=> d!11383 (= lt!24121 e!39088)))

(declare-fun res!33003 () Bool)

(assert (=> d!11383 (=> (not res!33003) (not e!39088))))

(assert (=> d!11383 (= res!33003 ((_ is Cons!1419) (toList!687 lt!23989)))))

(assert (=> d!11383 (= (contains!680 (toList!687 lt!23989) (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!24121)))

(declare-fun b!59443 () Bool)

(declare-fun e!39087 () Bool)

(assert (=> b!59443 (= e!39088 e!39087)))

(declare-fun res!33002 () Bool)

(assert (=> b!59443 (=> res!33002 e!39087)))

(assert (=> b!59443 (= res!33002 (= (h!2000 (toList!687 lt!23989)) (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun b!59444 () Bool)

(assert (=> b!59444 (= e!39087 (contains!680 (t!4757 (toList!687 lt!23989)) (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(assert (= (and d!11383 res!33003) b!59443))

(assert (= (and b!59443 (not res!33002)) b!59444))

(declare-fun m!51245 () Bool)

(assert (=> d!11383 m!51245))

(declare-fun m!51247 () Bool)

(assert (=> d!11383 m!51247))

(declare-fun m!51249 () Bool)

(assert (=> b!59444 m!51249))

(assert (=> b!59274 d!11383))

(declare-fun d!11385 () Bool)

(declare-fun e!39089 () Bool)

(assert (=> d!11385 e!39089))

(declare-fun res!33004 () Bool)

(assert (=> d!11385 (=> (not res!33004) (not e!39089))))

(declare-fun lt!24124 () ListLongMap!1343)

(assert (=> d!11385 (= res!33004 (contains!678 lt!24124 (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!24125 () List!1423)

(assert (=> d!11385 (= lt!24124 (ListLongMap!1344 lt!24125))))

(declare-fun lt!24123 () Unit!1547)

(declare-fun lt!24122 () Unit!1547)

(assert (=> d!11385 (= lt!24123 lt!24122)))

(assert (=> d!11385 (= (getValueByKey!125 lt!24125 (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11385 (= lt!24122 (lemmaContainsTupThenGetReturnValue!42 lt!24125 (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11385 (= lt!24125 (insertStrictlySorted!45 (toList!687 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11385 (= (+!80 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!24124)))

(declare-fun b!59445 () Bool)

(declare-fun res!33005 () Bool)

(assert (=> b!59445 (=> (not res!33005) (not e!39089))))

(assert (=> b!59445 (= res!33005 (= (getValueByKey!125 (toList!687 lt!24124) (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!59446 () Bool)

(assert (=> b!59446 (= e!39089 (contains!680 (toList!687 lt!24124) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!11385 res!33004) b!59445))

(assert (= (and b!59445 res!33005) b!59446))

(declare-fun m!51251 () Bool)

(assert (=> d!11385 m!51251))

(declare-fun m!51253 () Bool)

(assert (=> d!11385 m!51253))

(declare-fun m!51255 () Bool)

(assert (=> d!11385 m!51255))

(declare-fun m!51257 () Bool)

(assert (=> d!11385 m!51257))

(declare-fun m!51259 () Bool)

(assert (=> b!59445 m!51259))

(declare-fun m!51261 () Bool)

(assert (=> b!59446 m!51261))

(assert (=> d!11349 d!11385))

(declare-fun bm!4451 () Bool)

(declare-fun call!4457 () ListLongMap!1343)

(declare-fun call!4454 () ListLongMap!1343)

(assert (=> bm!4451 (= call!4457 call!4454)))

(declare-fun b!59447 () Bool)

(declare-fun c!7605 () Bool)

(assert (=> b!59447 (= c!7605 (and (not (= (bvand lt!23721 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!23721 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!39094 () ListLongMap!1343)

(declare-fun e!39100 () ListLongMap!1343)

(assert (=> b!59447 (= e!39094 e!39100)))

(declare-fun b!59448 () Bool)

(declare-fun e!39101 () Bool)

(declare-fun call!4455 () Bool)

(assert (=> b!59448 (= e!39101 (not call!4455))))

(declare-fun bm!4452 () Bool)

(declare-fun call!4456 () ListLongMap!1343)

(assert (=> bm!4452 (= call!4456 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) lt!23721 (zeroValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun b!59449 () Bool)

(declare-fun e!39092 () Bool)

(declare-fun e!39099 () Bool)

(assert (=> b!59449 (= e!39092 e!39099)))

(declare-fun res!33006 () Bool)

(declare-fun call!4459 () Bool)

(assert (=> b!59449 (= res!33006 call!4459)))

(assert (=> b!59449 (=> (not res!33006) (not e!39099))))

(declare-fun b!59450 () Bool)

(declare-fun e!39095 () Bool)

(declare-fun e!39098 () Bool)

(assert (=> b!59450 (= e!39095 e!39098)))

(declare-fun res!33014 () Bool)

(assert (=> b!59450 (=> (not res!33014) (not e!39098))))

(declare-fun lt!24138 () ListLongMap!1343)

(assert (=> b!59450 (= res!33014 (contains!678 lt!24138 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59450 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(declare-fun b!59451 () Bool)

(declare-fun e!39102 () ListLongMap!1343)

(assert (=> b!59451 (= e!39102 e!39094)))

(declare-fun c!7609 () Bool)

(assert (=> b!59451 (= c!7609 (and (not (= (bvand lt!23721 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!23721 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun d!11387 () Bool)

(declare-fun e!39090 () Bool)

(assert (=> d!11387 e!39090))

(declare-fun res!33010 () Bool)

(assert (=> d!11387 (=> (not res!33010) (not e!39090))))

(assert (=> d!11387 (= res!33010 (or (bvsge #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))))

(declare-fun lt!24146 () ListLongMap!1343)

(assert (=> d!11387 (= lt!24138 lt!24146)))

(declare-fun lt!24128 () Unit!1547)

(declare-fun e!39093 () Unit!1547)

(assert (=> d!11387 (= lt!24128 e!39093)))

(declare-fun c!7610 () Bool)

(declare-fun e!39097 () Bool)

(assert (=> d!11387 (= c!7610 e!39097)))

(declare-fun res!33011 () Bool)

(assert (=> d!11387 (=> (not res!33011) (not e!39097))))

(assert (=> d!11387 (= res!33011 (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(assert (=> d!11387 (= lt!24146 e!39102)))

(declare-fun c!7607 () Bool)

(assert (=> d!11387 (= c!7607 (and (not (= (bvand lt!23721 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!23721 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11387 (validMask!0 (mask!5926 newMap!16))))

(assert (=> d!11387 (= (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) lt!23721 (zeroValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) lt!24138)))

(declare-fun b!59452 () Bool)

(declare-fun lt!24127 () Unit!1547)

(assert (=> b!59452 (= e!39093 lt!24127)))

(declare-fun lt!24130 () ListLongMap!1343)

(assert (=> b!59452 (= lt!24130 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) lt!23721 (zeroValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24144 () (_ BitVec 64))

(assert (=> b!59452 (= lt!24144 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24137 () (_ BitVec 64))

(assert (=> b!59452 (= lt!24137 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24126 () Unit!1547)

(assert (=> b!59452 (= lt!24126 (addStillContains!42 lt!24130 lt!24144 (zeroValue!1958 newMap!16) lt!24137))))

(assert (=> b!59452 (contains!678 (+!80 lt!24130 (tuple2!2015 lt!24144 (zeroValue!1958 newMap!16))) lt!24137)))

(declare-fun lt!24129 () Unit!1547)

(assert (=> b!59452 (= lt!24129 lt!24126)))

(declare-fun lt!24143 () ListLongMap!1343)

(assert (=> b!59452 (= lt!24143 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) lt!23721 (zeroValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24132 () (_ BitVec 64))

(assert (=> b!59452 (= lt!24132 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24133 () (_ BitVec 64))

(assert (=> b!59452 (= lt!24133 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24145 () Unit!1547)

(assert (=> b!59452 (= lt!24145 (addApplyDifferent!42 lt!24143 lt!24132 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!24133))))

(assert (=> b!59452 (= (apply!66 (+!80 lt!24143 (tuple2!2015 lt!24132 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!24133) (apply!66 lt!24143 lt!24133))))

(declare-fun lt!24135 () Unit!1547)

(assert (=> b!59452 (= lt!24135 lt!24145)))

(declare-fun lt!24136 () ListLongMap!1343)

(assert (=> b!59452 (= lt!24136 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) lt!23721 (zeroValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24142 () (_ BitVec 64))

(assert (=> b!59452 (= lt!24142 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24134 () (_ BitVec 64))

(assert (=> b!59452 (= lt!24134 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24147 () Unit!1547)

(assert (=> b!59452 (= lt!24147 (addApplyDifferent!42 lt!24136 lt!24142 (zeroValue!1958 newMap!16) lt!24134))))

(assert (=> b!59452 (= (apply!66 (+!80 lt!24136 (tuple2!2015 lt!24142 (zeroValue!1958 newMap!16))) lt!24134) (apply!66 lt!24136 lt!24134))))

(declare-fun lt!24140 () Unit!1547)

(assert (=> b!59452 (= lt!24140 lt!24147)))

(declare-fun lt!24131 () ListLongMap!1343)

(assert (=> b!59452 (= lt!24131 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) lt!23721 (zeroValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24139 () (_ BitVec 64))

(assert (=> b!59452 (= lt!24139 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24141 () (_ BitVec 64))

(assert (=> b!59452 (= lt!24141 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!59452 (= lt!24127 (addApplyDifferent!42 lt!24131 lt!24139 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!24141))))

(assert (=> b!59452 (= (apply!66 (+!80 lt!24131 (tuple2!2015 lt!24139 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!24141) (apply!66 lt!24131 lt!24141))))

(declare-fun b!59453 () Bool)

(assert (=> b!59453 (= e!39100 call!4457)))

(declare-fun b!59454 () Bool)

(declare-fun call!4460 () ListLongMap!1343)

(assert (=> b!59454 (= e!39100 call!4460)))

(declare-fun bm!4453 () Bool)

(assert (=> bm!4453 (= call!4454 call!4456)))

(declare-fun bm!4454 () Bool)

(declare-fun call!4458 () ListLongMap!1343)

(assert (=> bm!4454 (= call!4458 (+!80 (ite c!7607 call!4456 (ite c!7609 call!4454 call!4457)) (ite (or c!7607 c!7609) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!59455 () Bool)

(assert (=> b!59455 (= e!39099 (= (apply!66 lt!24138 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1958 newMap!16)))))

(declare-fun b!59456 () Bool)

(assert (=> b!59456 (= e!39102 (+!80 call!4458 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!59457 () Bool)

(assert (=> b!59457 (= e!39094 call!4460)))

(declare-fun b!59458 () Bool)

(declare-fun res!33008 () Bool)

(assert (=> b!59458 (=> (not res!33008) (not e!39090))))

(assert (=> b!59458 (= res!33008 e!39092)))

(declare-fun c!7606 () Bool)

(assert (=> b!59458 (= c!7606 (not (= (bvand lt!23721 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!59459 () Bool)

(assert (=> b!59459 (= e!39098 (= (apply!66 lt!24138 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)) (get!1072 (select (arr!1773 (_values!2025 newMap!16)) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!59459 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (_values!2025 newMap!16))))))

(assert (=> b!59459 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(declare-fun b!59460 () Bool)

(declare-fun e!39096 () Bool)

(assert (=> b!59460 (= e!39101 e!39096)))

(declare-fun res!33007 () Bool)

(assert (=> b!59460 (= res!33007 call!4455)))

(assert (=> b!59460 (=> (not res!33007) (not e!39096))))

(declare-fun bm!4455 () Bool)

(assert (=> bm!4455 (= call!4460 call!4458)))

(declare-fun b!59461 () Bool)

(assert (=> b!59461 (= e!39092 (not call!4459))))

(declare-fun bm!4456 () Bool)

(assert (=> bm!4456 (= call!4455 (contains!678 lt!24138 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4457 () Bool)

(assert (=> bm!4457 (= call!4459 (contains!678 lt!24138 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59462 () Bool)

(declare-fun e!39091 () Bool)

(assert (=> b!59462 (= e!39091 (validKeyInArray!0 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59463 () Bool)

(declare-fun Unit!1568 () Unit!1547)

(assert (=> b!59463 (= e!39093 Unit!1568)))

(declare-fun b!59464 () Bool)

(assert (=> b!59464 (= e!39090 e!39101)))

(declare-fun c!7608 () Bool)

(assert (=> b!59464 (= c!7608 (not (= (bvand lt!23721 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!59465 () Bool)

(assert (=> b!59465 (= e!39096 (= (apply!66 lt!24138 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!59466 () Bool)

(assert (=> b!59466 (= e!39097 (validKeyInArray!0 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59467 () Bool)

(declare-fun res!33013 () Bool)

(assert (=> b!59467 (=> (not res!33013) (not e!39090))))

(assert (=> b!59467 (= res!33013 e!39095)))

(declare-fun res!33009 () Bool)

(assert (=> b!59467 (=> res!33009 e!39095)))

(assert (=> b!59467 (= res!33009 (not e!39091))))

(declare-fun res!33012 () Bool)

(assert (=> b!59467 (=> (not res!33012) (not e!39091))))

(assert (=> b!59467 (= res!33012 (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(assert (= (and d!11387 c!7607) b!59456))

(assert (= (and d!11387 (not c!7607)) b!59451))

(assert (= (and b!59451 c!7609) b!59457))

(assert (= (and b!59451 (not c!7609)) b!59447))

(assert (= (and b!59447 c!7605) b!59454))

(assert (= (and b!59447 (not c!7605)) b!59453))

(assert (= (or b!59454 b!59453) bm!4451))

(assert (= (or b!59457 bm!4451) bm!4453))

(assert (= (or b!59457 b!59454) bm!4455))

(assert (= (or b!59456 bm!4453) bm!4452))

(assert (= (or b!59456 bm!4455) bm!4454))

(assert (= (and d!11387 res!33011) b!59466))

(assert (= (and d!11387 c!7610) b!59452))

(assert (= (and d!11387 (not c!7610)) b!59463))

(assert (= (and d!11387 res!33010) b!59467))

(assert (= (and b!59467 res!33012) b!59462))

(assert (= (and b!59467 (not res!33009)) b!59450))

(assert (= (and b!59450 res!33014) b!59459))

(assert (= (and b!59467 res!33013) b!59458))

(assert (= (and b!59458 c!7606) b!59449))

(assert (= (and b!59458 (not c!7606)) b!59461))

(assert (= (and b!59449 res!33006) b!59455))

(assert (= (or b!59449 b!59461) bm!4457))

(assert (= (and b!59458 res!33008) b!59464))

(assert (= (and b!59464 c!7608) b!59460))

(assert (= (and b!59464 (not c!7608)) b!59448))

(assert (= (and b!59460 res!33007) b!59465))

(assert (= (or b!59460 b!59448) bm!4456))

(declare-fun b_lambda!2611 () Bool)

(assert (=> (not b_lambda!2611) (not b!59459)))

(assert (=> b!59459 t!4767))

(declare-fun b_and!3589 () Bool)

(assert (= b_and!3585 (and (=> t!4767 result!2381) b_and!3589)))

(assert (=> b!59459 t!4769))

(declare-fun b_and!3591 () Bool)

(assert (= b_and!3587 (and (=> t!4769 result!2383) b_and!3591)))

(declare-fun m!51263 () Bool)

(assert (=> b!59455 m!51263))

(assert (=> b!59466 m!50693))

(assert (=> b!59466 m!50693))

(assert (=> b!59466 m!50695))

(declare-fun m!51265 () Bool)

(assert (=> b!59456 m!51265))

(assert (=> b!59450 m!50693))

(assert (=> b!59450 m!50693))

(declare-fun m!51267 () Bool)

(assert (=> b!59450 m!51267))

(declare-fun m!51269 () Bool)

(assert (=> bm!4457 m!51269))

(declare-fun m!51271 () Bool)

(assert (=> b!59465 m!51271))

(declare-fun m!51273 () Bool)

(assert (=> bm!4456 m!51273))

(assert (=> b!59459 m!50707))

(assert (=> b!59459 m!50709))

(assert (=> b!59459 m!50693))

(assert (=> b!59459 m!50693))

(declare-fun m!51275 () Bool)

(assert (=> b!59459 m!51275))

(assert (=> b!59459 m!50709))

(assert (=> b!59459 m!50707))

(assert (=> b!59459 m!50713))

(declare-fun m!51277 () Bool)

(assert (=> bm!4454 m!51277))

(assert (=> d!11387 m!50667))

(assert (=> b!59462 m!50693))

(assert (=> b!59462 m!50693))

(assert (=> b!59462 m!50695))

(assert (=> bm!4452 m!50395))

(declare-fun m!51279 () Bool)

(assert (=> bm!4452 m!51279))

(declare-fun m!51281 () Bool)

(assert (=> b!59452 m!51281))

(assert (=> b!59452 m!50395))

(declare-fun m!51283 () Bool)

(assert (=> b!59452 m!51283))

(declare-fun m!51285 () Bool)

(assert (=> b!59452 m!51285))

(assert (=> b!59452 m!50693))

(declare-fun m!51287 () Bool)

(assert (=> b!59452 m!51287))

(declare-fun m!51289 () Bool)

(assert (=> b!59452 m!51289))

(declare-fun m!51291 () Bool)

(assert (=> b!59452 m!51291))

(declare-fun m!51293 () Bool)

(assert (=> b!59452 m!51293))

(declare-fun m!51295 () Bool)

(assert (=> b!59452 m!51295))

(declare-fun m!51297 () Bool)

(assert (=> b!59452 m!51297))

(assert (=> b!59452 m!50395))

(declare-fun m!51299 () Bool)

(assert (=> b!59452 m!51299))

(assert (=> b!59452 m!51281))

(declare-fun m!51301 () Bool)

(assert (=> b!59452 m!51301))

(declare-fun m!51303 () Bool)

(assert (=> b!59452 m!51303))

(declare-fun m!51305 () Bool)

(assert (=> b!59452 m!51305))

(assert (=> b!59452 m!51303))

(declare-fun m!51307 () Bool)

(assert (=> b!59452 m!51307))

(declare-fun m!51309 () Bool)

(assert (=> b!59452 m!51309))

(assert (=> b!59452 m!50395))

(assert (=> b!59452 m!51279))

(assert (=> b!59452 m!51293))

(assert (=> b!59452 m!51287))

(assert (=> d!11349 d!11387))

(declare-fun d!11389 () Bool)

(assert (=> d!11389 (= (+!80 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) lt!23721 (zeroValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(assert (=> d!11389 true))

(declare-fun _$8!46 () Unit!1547)

(assert (=> d!11389 (= (choose!317 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) lt!23721 (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2042 newMap!16)) _$8!46)))

(declare-fun bs!2574 () Bool)

(assert (= bs!2574 d!11389))

(assert (=> bs!2574 m!50509))

(assert (=> bs!2574 m!50509))

(assert (=> bs!2574 m!51181))

(assert (=> bs!2574 m!50395))

(assert (=> bs!2574 m!51185))

(assert (=> d!11349 d!11389))

(assert (=> d!11349 d!11247))

(assert (=> d!11349 d!11363))

(declare-fun d!11391 () Bool)

(assert (=> d!11391 (isDefined!77 (getValueByKey!125 (toList!687 lt!23783) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun lt!24148 () Unit!1547)

(assert (=> d!11391 (= lt!24148 (choose!311 (toList!687 lt!23783) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!39103 () Bool)

(assert (=> d!11391 e!39103))

(declare-fun res!33015 () Bool)

(assert (=> d!11391 (=> (not res!33015) (not e!39103))))

(assert (=> d!11391 (= res!33015 (isStrictlySorted!271 (toList!687 lt!23783)))))

(assert (=> d!11391 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 lt!23783) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!24148)))

(declare-fun b!59468 () Bool)

(assert (=> b!59468 (= e!39103 (containsKey!128 (toList!687 lt!23783) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!11391 res!33015) b!59468))

(assert (=> d!11391 m!50573))

(assert (=> d!11391 m!50829))

(assert (=> d!11391 m!50829))

(assert (=> d!11391 m!50947))

(assert (=> d!11391 m!50573))

(declare-fun m!51311 () Bool)

(assert (=> d!11391 m!51311))

(declare-fun m!51313 () Bool)

(assert (=> d!11391 m!51313))

(assert (=> b!59468 m!50573))

(assert (=> b!59468 m!50943))

(assert (=> b!59219 d!11391))

(declare-fun d!11393 () Bool)

(assert (=> d!11393 (= (isDefined!77 (getValueByKey!125 (toList!687 lt!23783) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (not (isEmpty!299 (getValueByKey!125 (toList!687 lt!23783) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun bs!2575 () Bool)

(assert (= bs!2575 d!11393))

(assert (=> bs!2575 m!50829))

(declare-fun m!51315 () Bool)

(assert (=> bs!2575 m!51315))

(assert (=> b!59219 d!11393))

(declare-fun b!59470 () Bool)

(declare-fun e!39104 () Option!131)

(declare-fun e!39105 () Option!131)

(assert (=> b!59470 (= e!39104 e!39105)))

(declare-fun c!7612 () Bool)

(assert (=> b!59470 (= c!7612 (and ((_ is Cons!1419) (toList!687 lt!23783)) (not (= (_1!1018 (h!2000 (toList!687 lt!23783))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun b!59469 () Bool)

(assert (=> b!59469 (= e!39104 (Some!130 (_2!1018 (h!2000 (toList!687 lt!23783)))))))

(declare-fun c!7611 () Bool)

(declare-fun d!11395 () Bool)

(assert (=> d!11395 (= c!7611 (and ((_ is Cons!1419) (toList!687 lt!23783)) (= (_1!1018 (h!2000 (toList!687 lt!23783))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!11395 (= (getValueByKey!125 (toList!687 lt!23783) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!39104)))

(declare-fun b!59472 () Bool)

(assert (=> b!59472 (= e!39105 None!129)))

(declare-fun b!59471 () Bool)

(assert (=> b!59471 (= e!39105 (getValueByKey!125 (t!4757 (toList!687 lt!23783)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!11395 c!7611) b!59469))

(assert (= (and d!11395 (not c!7611)) b!59470))

(assert (= (and b!59470 c!7612) b!59471))

(assert (= (and b!59470 (not c!7612)) b!59472))

(assert (=> b!59471 m!50573))

(declare-fun m!51317 () Bool)

(assert (=> b!59471 m!51317))

(assert (=> b!59219 d!11395))

(declare-fun d!11397 () Bool)

(declare-fun e!39106 () Bool)

(assert (=> d!11397 e!39106))

(declare-fun res!33016 () Bool)

(assert (=> d!11397 (=> (not res!33016) (not e!39106))))

(declare-fun lt!24151 () ListLongMap!1343)

(assert (=> d!11397 (= res!33016 (contains!678 lt!24151 (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!24152 () List!1423)

(assert (=> d!11397 (= lt!24151 (ListLongMap!1344 lt!24152))))

(declare-fun lt!24150 () Unit!1547)

(declare-fun lt!24149 () Unit!1547)

(assert (=> d!11397 (= lt!24150 lt!24149)))

(assert (=> d!11397 (= (getValueByKey!125 lt!24152 (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11397 (= lt!24149 (lemmaContainsTupThenGetReturnValue!42 lt!24152 (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11397 (= lt!24152 (insertStrictlySorted!45 (toList!687 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11397 (= (+!80 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!24151)))

(declare-fun b!59473 () Bool)

(declare-fun res!33017 () Bool)

(assert (=> b!59473 (=> (not res!33017) (not e!39106))))

(assert (=> b!59473 (= res!33017 (= (getValueByKey!125 (toList!687 lt!24151) (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!59474 () Bool)

(assert (=> b!59474 (= e!39106 (contains!680 (toList!687 lt!24151) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!11397 res!33016) b!59473))

(assert (= (and b!59473 res!33017) b!59474))

(declare-fun m!51319 () Bool)

(assert (=> d!11397 m!51319))

(declare-fun m!51321 () Bool)

(assert (=> d!11397 m!51321))

(declare-fun m!51323 () Bool)

(assert (=> d!11397 m!51323))

(declare-fun m!51325 () Bool)

(assert (=> d!11397 m!51325))

(declare-fun m!51327 () Bool)

(assert (=> b!59473 m!51327))

(declare-fun m!51329 () Bool)

(assert (=> b!59474 m!51329))

(assert (=> b!59245 d!11397))

(assert (=> b!59245 d!11247))

(declare-fun bm!4458 () Bool)

(declare-fun call!4464 () ListLongMap!1343)

(declare-fun call!4461 () ListLongMap!1343)

(assert (=> bm!4458 (= call!4464 call!4461)))

(declare-fun b!59475 () Bool)

(declare-fun c!7613 () Bool)

(assert (=> b!59475 (= c!7613 (and (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!39111 () ListLongMap!1343)

(declare-fun e!39117 () ListLongMap!1343)

(assert (=> b!59475 (= e!39111 e!39117)))

(declare-fun b!59476 () Bool)

(declare-fun e!39118 () Bool)

(declare-fun call!4462 () Bool)

(assert (=> b!59476 (= e!39118 (not call!4462))))

(declare-fun call!4463 () ListLongMap!1343)

(declare-fun bm!4459 () Bool)

(assert (=> bm!4459 (= call!4463 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (index!3008 lt!23716) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16))) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun b!59477 () Bool)

(declare-fun e!39109 () Bool)

(declare-fun e!39116 () Bool)

(assert (=> b!59477 (= e!39109 e!39116)))

(declare-fun res!33018 () Bool)

(declare-fun call!4466 () Bool)

(assert (=> b!59477 (= res!33018 call!4466)))

(assert (=> b!59477 (=> (not res!33018) (not e!39116))))

(declare-fun b!59478 () Bool)

(declare-fun e!39112 () Bool)

(declare-fun e!39115 () Bool)

(assert (=> b!59478 (= e!39112 e!39115)))

(declare-fun res!33026 () Bool)

(assert (=> b!59478 (=> (not res!33026) (not e!39115))))

(declare-fun lt!24165 () ListLongMap!1343)

(assert (=> b!59478 (= res!33026 (contains!678 lt!24165 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59478 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(declare-fun b!59479 () Bool)

(declare-fun e!39119 () ListLongMap!1343)

(assert (=> b!59479 (= e!39119 e!39111)))

(declare-fun c!7617 () Bool)

(assert (=> b!59479 (= c!7617 (and (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun d!11399 () Bool)

(declare-fun e!39107 () Bool)

(assert (=> d!11399 e!39107))

(declare-fun res!33022 () Bool)

(assert (=> d!11399 (=> (not res!33022) (not e!39107))))

(assert (=> d!11399 (= res!33022 (or (bvsge #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))))

(declare-fun lt!24173 () ListLongMap!1343)

(assert (=> d!11399 (= lt!24165 lt!24173)))

(declare-fun lt!24155 () Unit!1547)

(declare-fun e!39110 () Unit!1547)

(assert (=> d!11399 (= lt!24155 e!39110)))

(declare-fun c!7618 () Bool)

(declare-fun e!39114 () Bool)

(assert (=> d!11399 (= c!7618 e!39114)))

(declare-fun res!33023 () Bool)

(assert (=> d!11399 (=> (not res!33023) (not e!39114))))

(assert (=> d!11399 (= res!33023 (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(assert (=> d!11399 (= lt!24173 e!39119)))

(declare-fun c!7615 () Bool)

(assert (=> d!11399 (= c!7615 (and (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11399 (validMask!0 (mask!5926 newMap!16))))

(assert (=> d!11399 (= (getCurrentListMap!388 (_keys!3666 newMap!16) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (index!3008 lt!23716) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16))) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) lt!24165)))

(declare-fun b!59480 () Bool)

(declare-fun lt!24154 () Unit!1547)

(assert (=> b!59480 (= e!39110 lt!24154)))

(declare-fun lt!24157 () ListLongMap!1343)

(assert (=> b!59480 (= lt!24157 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (index!3008 lt!23716) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16))) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24171 () (_ BitVec 64))

(assert (=> b!59480 (= lt!24171 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24164 () (_ BitVec 64))

(assert (=> b!59480 (= lt!24164 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24153 () Unit!1547)

(assert (=> b!59480 (= lt!24153 (addStillContains!42 lt!24157 lt!24171 (zeroValue!1958 newMap!16) lt!24164))))

(assert (=> b!59480 (contains!678 (+!80 lt!24157 (tuple2!2015 lt!24171 (zeroValue!1958 newMap!16))) lt!24164)))

(declare-fun lt!24156 () Unit!1547)

(assert (=> b!59480 (= lt!24156 lt!24153)))

(declare-fun lt!24170 () ListLongMap!1343)

(assert (=> b!59480 (= lt!24170 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (index!3008 lt!23716) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16))) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24159 () (_ BitVec 64))

(assert (=> b!59480 (= lt!24159 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24160 () (_ BitVec 64))

(assert (=> b!59480 (= lt!24160 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24172 () Unit!1547)

(assert (=> b!59480 (= lt!24172 (addApplyDifferent!42 lt!24170 lt!24159 (minValue!1958 newMap!16) lt!24160))))

(assert (=> b!59480 (= (apply!66 (+!80 lt!24170 (tuple2!2015 lt!24159 (minValue!1958 newMap!16))) lt!24160) (apply!66 lt!24170 lt!24160))))

(declare-fun lt!24162 () Unit!1547)

(assert (=> b!59480 (= lt!24162 lt!24172)))

(declare-fun lt!24163 () ListLongMap!1343)

(assert (=> b!59480 (= lt!24163 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (index!3008 lt!23716) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16))) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24169 () (_ BitVec 64))

(assert (=> b!59480 (= lt!24169 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24161 () (_ BitVec 64))

(assert (=> b!59480 (= lt!24161 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24174 () Unit!1547)

(assert (=> b!59480 (= lt!24174 (addApplyDifferent!42 lt!24163 lt!24169 (zeroValue!1958 newMap!16) lt!24161))))

(assert (=> b!59480 (= (apply!66 (+!80 lt!24163 (tuple2!2015 lt!24169 (zeroValue!1958 newMap!16))) lt!24161) (apply!66 lt!24163 lt!24161))))

(declare-fun lt!24167 () Unit!1547)

(assert (=> b!59480 (= lt!24167 lt!24174)))

(declare-fun lt!24158 () ListLongMap!1343)

(assert (=> b!59480 (= lt!24158 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (index!3008 lt!23716) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16))) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24166 () (_ BitVec 64))

(assert (=> b!59480 (= lt!24166 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24168 () (_ BitVec 64))

(assert (=> b!59480 (= lt!24168 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!59480 (= lt!24154 (addApplyDifferent!42 lt!24158 lt!24166 (minValue!1958 newMap!16) lt!24168))))

(assert (=> b!59480 (= (apply!66 (+!80 lt!24158 (tuple2!2015 lt!24166 (minValue!1958 newMap!16))) lt!24168) (apply!66 lt!24158 lt!24168))))

(declare-fun b!59481 () Bool)

(assert (=> b!59481 (= e!39117 call!4464)))

(declare-fun b!59482 () Bool)

(declare-fun call!4467 () ListLongMap!1343)

(assert (=> b!59482 (= e!39117 call!4467)))

(declare-fun bm!4460 () Bool)

(assert (=> bm!4460 (= call!4461 call!4463)))

(declare-fun call!4465 () ListLongMap!1343)

(declare-fun bm!4461 () Bool)

(assert (=> bm!4461 (= call!4465 (+!80 (ite c!7615 call!4463 (ite c!7617 call!4461 call!4464)) (ite (or c!7615 c!7617) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))

(declare-fun b!59483 () Bool)

(assert (=> b!59483 (= e!39116 (= (apply!66 lt!24165 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1958 newMap!16)))))

(declare-fun b!59484 () Bool)

(assert (=> b!59484 (= e!39119 (+!80 call!4465 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))

(declare-fun b!59485 () Bool)

(assert (=> b!59485 (= e!39111 call!4467)))

(declare-fun b!59486 () Bool)

(declare-fun res!33020 () Bool)

(assert (=> b!59486 (=> (not res!33020) (not e!39107))))

(assert (=> b!59486 (= res!33020 e!39109)))

(declare-fun c!7614 () Bool)

(assert (=> b!59486 (= c!7614 (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!59487 () Bool)

(assert (=> b!59487 (= e!39115 (= (apply!66 lt!24165 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)) (get!1072 (select (arr!1773 (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (index!3008 lt!23716) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!59487 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (index!3008 lt!23716) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16))))))))

(assert (=> b!59487 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(declare-fun b!59488 () Bool)

(declare-fun e!39113 () Bool)

(assert (=> b!59488 (= e!39118 e!39113)))

(declare-fun res!33019 () Bool)

(assert (=> b!59488 (= res!33019 call!4462)))

(assert (=> b!59488 (=> (not res!33019) (not e!39113))))

(declare-fun bm!4462 () Bool)

(assert (=> bm!4462 (= call!4467 call!4465)))

(declare-fun b!59489 () Bool)

(assert (=> b!59489 (= e!39109 (not call!4466))))

(declare-fun bm!4463 () Bool)

(assert (=> bm!4463 (= call!4462 (contains!678 lt!24165 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4464 () Bool)

(assert (=> bm!4464 (= call!4466 (contains!678 lt!24165 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59490 () Bool)

(declare-fun e!39108 () Bool)

(assert (=> b!59490 (= e!39108 (validKeyInArray!0 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59491 () Bool)

(declare-fun Unit!1569 () Unit!1547)

(assert (=> b!59491 (= e!39110 Unit!1569)))

(declare-fun b!59492 () Bool)

(assert (=> b!59492 (= e!39107 e!39118)))

(declare-fun c!7616 () Bool)

(assert (=> b!59492 (= c!7616 (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!59493 () Bool)

(assert (=> b!59493 (= e!39113 (= (apply!66 lt!24165 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1958 newMap!16)))))

(declare-fun b!59494 () Bool)

(assert (=> b!59494 (= e!39114 (validKeyInArray!0 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59495 () Bool)

(declare-fun res!33025 () Bool)

(assert (=> b!59495 (=> (not res!33025) (not e!39107))))

(assert (=> b!59495 (= res!33025 e!39112)))

(declare-fun res!33021 () Bool)

(assert (=> b!59495 (=> res!33021 e!39112)))

(assert (=> b!59495 (= res!33021 (not e!39108))))

(declare-fun res!33024 () Bool)

(assert (=> b!59495 (=> (not res!33024) (not e!39108))))

(assert (=> b!59495 (= res!33024 (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(assert (= (and d!11399 c!7615) b!59484))

(assert (= (and d!11399 (not c!7615)) b!59479))

(assert (= (and b!59479 c!7617) b!59485))

(assert (= (and b!59479 (not c!7617)) b!59475))

(assert (= (and b!59475 c!7613) b!59482))

(assert (= (and b!59475 (not c!7613)) b!59481))

(assert (= (or b!59482 b!59481) bm!4458))

(assert (= (or b!59485 bm!4458) bm!4460))

(assert (= (or b!59485 b!59482) bm!4462))

(assert (= (or b!59484 bm!4460) bm!4459))

(assert (= (or b!59484 bm!4462) bm!4461))

(assert (= (and d!11399 res!33023) b!59494))

(assert (= (and d!11399 c!7618) b!59480))

(assert (= (and d!11399 (not c!7618)) b!59491))

(assert (= (and d!11399 res!33022) b!59495))

(assert (= (and b!59495 res!33024) b!59490))

(assert (= (and b!59495 (not res!33021)) b!59478))

(assert (= (and b!59478 res!33026) b!59487))

(assert (= (and b!59495 res!33025) b!59486))

(assert (= (and b!59486 c!7614) b!59477))

(assert (= (and b!59486 (not c!7614)) b!59489))

(assert (= (and b!59477 res!33018) b!59483))

(assert (= (or b!59477 b!59489) bm!4464))

(assert (= (and b!59486 res!33020) b!59492))

(assert (= (and b!59492 c!7616) b!59488))

(assert (= (and b!59492 (not c!7616)) b!59476))

(assert (= (and b!59488 res!33019) b!59493))

(assert (= (or b!59488 b!59476) bm!4463))

(declare-fun b_lambda!2613 () Bool)

(assert (=> (not b_lambda!2613) (not b!59487)))

(assert (=> b!59487 t!4767))

(declare-fun b_and!3593 () Bool)

(assert (= b_and!3589 (and (=> t!4767 result!2381) b_and!3593)))

(assert (=> b!59487 t!4769))

(declare-fun b_and!3595 () Bool)

(assert (= b_and!3591 (and (=> t!4769 result!2383) b_and!3595)))

(declare-fun m!51331 () Bool)

(assert (=> b!59483 m!51331))

(assert (=> b!59494 m!50693))

(assert (=> b!59494 m!50693))

(assert (=> b!59494 m!50695))

(declare-fun m!51333 () Bool)

(assert (=> b!59484 m!51333))

(assert (=> b!59478 m!50693))

(assert (=> b!59478 m!50693))

(declare-fun m!51335 () Bool)

(assert (=> b!59478 m!51335))

(declare-fun m!51337 () Bool)

(assert (=> bm!4464 m!51337))

(declare-fun m!51339 () Bool)

(assert (=> b!59493 m!51339))

(declare-fun m!51341 () Bool)

(assert (=> bm!4463 m!51341))

(assert (=> b!59487 m!50707))

(declare-fun m!51343 () Bool)

(assert (=> b!59487 m!51343))

(assert (=> b!59487 m!50693))

(assert (=> b!59487 m!50693))

(declare-fun m!51345 () Bool)

(assert (=> b!59487 m!51345))

(assert (=> b!59487 m!51343))

(assert (=> b!59487 m!50707))

(declare-fun m!51347 () Bool)

(assert (=> b!59487 m!51347))

(declare-fun m!51349 () Bool)

(assert (=> bm!4461 m!51349))

(assert (=> d!11399 m!50667))

(assert (=> b!59490 m!50693))

(assert (=> b!59490 m!50693))

(assert (=> b!59490 m!50695))

(declare-fun m!51351 () Bool)

(assert (=> bm!4459 m!51351))

(declare-fun m!51353 () Bool)

(assert (=> b!59480 m!51353))

(declare-fun m!51355 () Bool)

(assert (=> b!59480 m!51355))

(declare-fun m!51357 () Bool)

(assert (=> b!59480 m!51357))

(assert (=> b!59480 m!50693))

(declare-fun m!51359 () Bool)

(assert (=> b!59480 m!51359))

(declare-fun m!51361 () Bool)

(assert (=> b!59480 m!51361))

(declare-fun m!51363 () Bool)

(assert (=> b!59480 m!51363))

(declare-fun m!51365 () Bool)

(assert (=> b!59480 m!51365))

(declare-fun m!51367 () Bool)

(assert (=> b!59480 m!51367))

(declare-fun m!51369 () Bool)

(assert (=> b!59480 m!51369))

(declare-fun m!51371 () Bool)

(assert (=> b!59480 m!51371))

(assert (=> b!59480 m!51353))

(declare-fun m!51373 () Bool)

(assert (=> b!59480 m!51373))

(declare-fun m!51375 () Bool)

(assert (=> b!59480 m!51375))

(declare-fun m!51377 () Bool)

(assert (=> b!59480 m!51377))

(assert (=> b!59480 m!51375))

(declare-fun m!51379 () Bool)

(assert (=> b!59480 m!51379))

(declare-fun m!51381 () Bool)

(assert (=> b!59480 m!51381))

(assert (=> b!59480 m!51351))

(assert (=> b!59480 m!51365))

(assert (=> b!59480 m!51359))

(assert (=> b!59245 d!11399))

(declare-fun d!11401 () Bool)

(assert (=> d!11401 (= (inRange!0 (index!3008 lt!23816) (mask!5926 newMap!16)) (and (bvsge (index!3008 lt!23816) #b00000000000000000000000000000000) (bvslt (index!3008 lt!23816) (bvadd (mask!5926 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> b!59055 d!11401))

(declare-fun b!59496 () Bool)

(declare-fun e!39123 () Bool)

(declare-fun e!39122 () Bool)

(assert (=> b!59496 (= e!39123 e!39122)))

(declare-fun res!33028 () Bool)

(assert (=> b!59496 (=> (not res!33028) (not e!39122))))

(declare-fun e!39120 () Bool)

(assert (=> b!59496 (= res!33028 (not e!39120))))

(declare-fun res!33027 () Bool)

(assert (=> b!59496 (=> (not res!33027) (not e!39120))))

(assert (=> b!59496 (= res!33027 (validKeyInArray!0 (select (arr!1772 (_keys!3666 (_2!1019 lt!23711))) #b00000000000000000000000000000000)))))

(declare-fun b!59497 () Bool)

(declare-fun e!39121 () Bool)

(declare-fun call!4468 () Bool)

(assert (=> b!59497 (= e!39121 call!4468)))

(declare-fun b!59498 () Bool)

(assert (=> b!59498 (= e!39121 call!4468)))

(declare-fun d!11403 () Bool)

(declare-fun res!33029 () Bool)

(assert (=> d!11403 (=> res!33029 e!39123)))

(assert (=> d!11403 (= res!33029 (bvsge #b00000000000000000000000000000000 (size!2002 (_keys!3666 (_2!1019 lt!23711)))))))

(assert (=> d!11403 (= (arrayNoDuplicates!0 (_keys!3666 (_2!1019 lt!23711)) #b00000000000000000000000000000000 Nil!1419) e!39123)))

(declare-fun bm!4465 () Bool)

(declare-fun c!7619 () Bool)

(assert (=> bm!4465 (= call!4468 (arrayNoDuplicates!0 (_keys!3666 (_2!1019 lt!23711)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!7619 (Cons!1418 (select (arr!1772 (_keys!3666 (_2!1019 lt!23711))) #b00000000000000000000000000000000) Nil!1419) Nil!1419)))))

(declare-fun b!59499 () Bool)

(assert (=> b!59499 (= e!39120 (contains!679 Nil!1419 (select (arr!1772 (_keys!3666 (_2!1019 lt!23711))) #b00000000000000000000000000000000)))))

(declare-fun b!59500 () Bool)

(assert (=> b!59500 (= e!39122 e!39121)))

(assert (=> b!59500 (= c!7619 (validKeyInArray!0 (select (arr!1772 (_keys!3666 (_2!1019 lt!23711))) #b00000000000000000000000000000000)))))

(assert (= (and d!11403 (not res!33029)) b!59496))

(assert (= (and b!59496 res!33027) b!59499))

(assert (= (and b!59496 res!33028) b!59500))

(assert (= (and b!59500 c!7619) b!59497))

(assert (= (and b!59500 (not c!7619)) b!59498))

(assert (= (or b!59497 b!59498) bm!4465))

(declare-fun m!51383 () Bool)

(assert (=> b!59496 m!51383))

(assert (=> b!59496 m!51383))

(declare-fun m!51385 () Bool)

(assert (=> b!59496 m!51385))

(assert (=> bm!4465 m!51383))

(declare-fun m!51387 () Bool)

(assert (=> bm!4465 m!51387))

(assert (=> b!59499 m!51383))

(assert (=> b!59499 m!51383))

(declare-fun m!51389 () Bool)

(assert (=> b!59499 m!51389))

(assert (=> b!59500 m!51383))

(assert (=> b!59500 m!51383))

(assert (=> b!59500 m!51385))

(assert (=> b!59182 d!11403))

(declare-fun d!11405 () Bool)

(assert (=> d!11405 (= (get!1075 (getValueByKey!125 (toList!687 lt!23783) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (v!2387 (getValueByKey!125 (toList!687 lt!23783) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!11267 d!11405))

(assert (=> d!11267 d!11395))

(declare-fun d!11407 () Bool)

(assert (=> d!11407 (= (get!1075 (getValueByKey!125 (toList!687 lt!23783) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2387 (getValueByKey!125 (toList!687 lt!23783) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!11245 d!11407))

(declare-fun b!59502 () Bool)

(declare-fun e!39124 () Option!131)

(declare-fun e!39125 () Option!131)

(assert (=> b!59502 (= e!39124 e!39125)))

(declare-fun c!7621 () Bool)

(assert (=> b!59502 (= c!7621 (and ((_ is Cons!1419) (toList!687 lt!23783)) (not (= (_1!1018 (h!2000 (toList!687 lt!23783))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!59501 () Bool)

(assert (=> b!59501 (= e!39124 (Some!130 (_2!1018 (h!2000 (toList!687 lt!23783)))))))

(declare-fun d!11409 () Bool)

(declare-fun c!7620 () Bool)

(assert (=> d!11409 (= c!7620 (and ((_ is Cons!1419) (toList!687 lt!23783)) (= (_1!1018 (h!2000 (toList!687 lt!23783))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!11409 (= (getValueByKey!125 (toList!687 lt!23783) #b0000000000000000000000000000000000000000000000000000000000000000) e!39124)))

(declare-fun b!59504 () Bool)

(assert (=> b!59504 (= e!39125 None!129)))

(declare-fun b!59503 () Bool)

(assert (=> b!59503 (= e!39125 (getValueByKey!125 (t!4757 (toList!687 lt!23783)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!11409 c!7620) b!59501))

(assert (= (and d!11409 (not c!7620)) b!59502))

(assert (= (and b!59502 c!7621) b!59503))

(assert (= (and b!59502 (not c!7621)) b!59504))

(declare-fun m!51391 () Bool)

(assert (=> b!59503 m!51391))

(assert (=> d!11245 d!11409))

(declare-fun lt!24175 () Bool)

(declare-fun d!11411 () Bool)

(assert (=> d!11411 (= lt!24175 (select (content!65 (toList!687 lt!23952)) (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))))

(declare-fun e!39127 () Bool)

(assert (=> d!11411 (= lt!24175 e!39127)))

(declare-fun res!33031 () Bool)

(assert (=> d!11411 (=> (not res!33031) (not e!39127))))

(assert (=> d!11411 (= res!33031 ((_ is Cons!1419) (toList!687 lt!23952)))))

(assert (=> d!11411 (= (contains!680 (toList!687 lt!23952) (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))) lt!24175)))

(declare-fun b!59505 () Bool)

(declare-fun e!39126 () Bool)

(assert (=> b!59505 (= e!39127 e!39126)))

(declare-fun res!33030 () Bool)

(assert (=> b!59505 (=> res!33030 e!39126)))

(assert (=> b!59505 (= res!33030 (= (h!2000 (toList!687 lt!23952)) (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))))

(declare-fun b!59506 () Bool)

(assert (=> b!59506 (= e!39126 (contains!680 (t!4757 (toList!687 lt!23952)) (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))))

(assert (= (and d!11411 res!33031) b!59505))

(assert (= (and b!59505 (not res!33030)) b!59506))

(declare-fun m!51393 () Bool)

(assert (=> d!11411 m!51393))

(declare-fun m!51395 () Bool)

(assert (=> d!11411 m!51395))

(declare-fun m!51397 () Bool)

(assert (=> b!59506 m!51397))

(assert (=> b!59229 d!11411))

(declare-fun d!11413 () Bool)

(declare-fun e!39128 () Bool)

(assert (=> d!11413 e!39128))

(declare-fun res!33032 () Bool)

(assert (=> d!11413 (=> (not res!33032) (not e!39128))))

(declare-fun lt!24178 () ListLongMap!1343)

(assert (=> d!11413 (= res!33032 (contains!678 lt!24178 (_1!1018 (ite (or c!7537 c!7539) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))))))))

(declare-fun lt!24179 () List!1423)

(assert (=> d!11413 (= lt!24178 (ListLongMap!1344 lt!24179))))

(declare-fun lt!24177 () Unit!1547)

(declare-fun lt!24176 () Unit!1547)

(assert (=> d!11413 (= lt!24177 lt!24176)))

(assert (=> d!11413 (= (getValueByKey!125 lt!24179 (_1!1018 (ite (or c!7537 c!7539) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))))) (Some!130 (_2!1018 (ite (or c!7537 c!7539) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))))))))

(assert (=> d!11413 (= lt!24176 (lemmaContainsTupThenGetReturnValue!42 lt!24179 (_1!1018 (ite (or c!7537 c!7539) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))) (_2!1018 (ite (or c!7537 c!7539) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))))))))

(assert (=> d!11413 (= lt!24179 (insertStrictlySorted!45 (toList!687 (ite c!7537 call!4418 (ite c!7539 call!4416 call!4419))) (_1!1018 (ite (or c!7537 c!7539) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))) (_2!1018 (ite (or c!7537 c!7539) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))))))))

(assert (=> d!11413 (= (+!80 (ite c!7537 call!4418 (ite c!7539 call!4416 call!4419)) (ite (or c!7537 c!7539) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))) lt!24178)))

(declare-fun b!59507 () Bool)

(declare-fun res!33033 () Bool)

(assert (=> b!59507 (=> (not res!33033) (not e!39128))))

(assert (=> b!59507 (= res!33033 (= (getValueByKey!125 (toList!687 lt!24178) (_1!1018 (ite (or c!7537 c!7539) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))))) (Some!130 (_2!1018 (ite (or c!7537 c!7539) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))))))))

(declare-fun b!59508 () Bool)

(assert (=> b!59508 (= e!39128 (contains!680 (toList!687 lt!24178) (ite (or c!7537 c!7539) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))))))

(assert (= (and d!11413 res!33032) b!59507))

(assert (= (and b!59507 res!33033) b!59508))

(declare-fun m!51399 () Bool)

(assert (=> d!11413 m!51399))

(declare-fun m!51401 () Bool)

(assert (=> d!11413 m!51401))

(declare-fun m!51403 () Bool)

(assert (=> d!11413 m!51403))

(declare-fun m!51405 () Bool)

(assert (=> d!11413 m!51405))

(declare-fun m!51407 () Bool)

(assert (=> b!59507 m!51407))

(declare-fun m!51409 () Bool)

(assert (=> b!59508 m!51409))

(assert (=> bm!4416 d!11413))

(declare-fun d!11415 () Bool)

(declare-fun res!33034 () Bool)

(declare-fun e!39129 () Bool)

(assert (=> d!11415 (=> res!33034 e!39129)))

(assert (=> d!11415 (= res!33034 (and ((_ is Cons!1419) (t!4757 (toList!687 lt!23590))) (= (_1!1018 (h!2000 (t!4757 (toList!687 lt!23590)))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355))))))

(assert (=> d!11415 (= (containsKey!128 (t!4757 (toList!687 lt!23590)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) e!39129)))

(declare-fun b!59509 () Bool)

(declare-fun e!39130 () Bool)

(assert (=> b!59509 (= e!39129 e!39130)))

(declare-fun res!33035 () Bool)

(assert (=> b!59509 (=> (not res!33035) (not e!39130))))

(assert (=> b!59509 (= res!33035 (and (or (not ((_ is Cons!1419) (t!4757 (toList!687 lt!23590)))) (bvsle (_1!1018 (h!2000 (t!4757 (toList!687 lt!23590)))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355))) ((_ is Cons!1419) (t!4757 (toList!687 lt!23590))) (bvslt (_1!1018 (h!2000 (t!4757 (toList!687 lt!23590)))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355))))))

(declare-fun b!59510 () Bool)

(assert (=> b!59510 (= e!39130 (containsKey!128 (t!4757 (t!4757 (toList!687 lt!23590))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(assert (= (and d!11415 (not res!33034)) b!59509))

(assert (= (and b!59509 res!33035) b!59510))

(assert (=> b!59510 m!50367))

(declare-fun m!51411 () Bool)

(assert (=> b!59510 m!51411))

(assert (=> b!59366 d!11415))

(declare-fun d!11417 () Bool)

(declare-fun e!39131 () Bool)

(assert (=> d!11417 e!39131))

(declare-fun res!33036 () Bool)

(assert (=> d!11417 (=> res!33036 e!39131)))

(declare-fun lt!24182 () Bool)

(assert (=> d!11417 (= res!33036 (not lt!24182))))

(declare-fun lt!24181 () Bool)

(assert (=> d!11417 (= lt!24182 lt!24181)))

(declare-fun lt!24180 () Unit!1547)

(declare-fun e!39132 () Unit!1547)

(assert (=> d!11417 (= lt!24180 e!39132)))

(declare-fun c!7622 () Bool)

(assert (=> d!11417 (= c!7622 lt!24181)))

(assert (=> d!11417 (= lt!24181 (containsKey!128 (toList!687 lt!23996) (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(assert (=> d!11417 (= (contains!678 lt!23996 (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!24182)))

(declare-fun b!59511 () Bool)

(declare-fun lt!24183 () Unit!1547)

(assert (=> b!59511 (= e!39132 lt!24183)))

(assert (=> b!59511 (= lt!24183 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 lt!23996) (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(assert (=> b!59511 (isDefined!77 (getValueByKey!125 (toList!687 lt!23996) (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun b!59512 () Bool)

(declare-fun Unit!1570 () Unit!1547)

(assert (=> b!59512 (= e!39132 Unit!1570)))

(declare-fun b!59513 () Bool)

(assert (=> b!59513 (= e!39131 (isDefined!77 (getValueByKey!125 (toList!687 lt!23996) (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (= (and d!11417 c!7622) b!59511))

(assert (= (and d!11417 (not c!7622)) b!59512))

(assert (= (and d!11417 (not res!33036)) b!59513))

(declare-fun m!51413 () Bool)

(assert (=> d!11417 m!51413))

(declare-fun m!51415 () Bool)

(assert (=> b!59511 m!51415))

(assert (=> b!59511 m!51103))

(assert (=> b!59511 m!51103))

(declare-fun m!51417 () Bool)

(assert (=> b!59511 m!51417))

(assert (=> b!59513 m!51103))

(assert (=> b!59513 m!51103))

(assert (=> b!59513 m!51417))

(assert (=> d!11335 d!11417))

(declare-fun b!59515 () Bool)

(declare-fun e!39133 () Option!131)

(declare-fun e!39134 () Option!131)

(assert (=> b!59515 (= e!39133 e!39134)))

(declare-fun c!7624 () Bool)

(assert (=> b!59515 (= c!7624 (and ((_ is Cons!1419) lt!23997) (not (= (_1!1018 (h!2000 lt!23997)) (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))))

(declare-fun b!59514 () Bool)

(assert (=> b!59514 (= e!39133 (Some!130 (_2!1018 (h!2000 lt!23997))))))

(declare-fun d!11419 () Bool)

(declare-fun c!7623 () Bool)

(assert (=> d!11419 (= c!7623 (and ((_ is Cons!1419) lt!23997) (= (_1!1018 (h!2000 lt!23997)) (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (=> d!11419 (= (getValueByKey!125 lt!23997 (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) e!39133)))

(declare-fun b!59517 () Bool)

(assert (=> b!59517 (= e!39134 None!129)))

(declare-fun b!59516 () Bool)

(assert (=> b!59516 (= e!39134 (getValueByKey!125 (t!4757 lt!23997) (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(assert (= (and d!11419 c!7623) b!59514))

(assert (= (and d!11419 (not c!7623)) b!59515))

(assert (= (and b!59515 c!7624) b!59516))

(assert (= (and b!59515 (not c!7624)) b!59517))

(declare-fun m!51419 () Bool)

(assert (=> b!59516 m!51419))

(assert (=> d!11335 d!11419))

(declare-fun d!11421 () Bool)

(assert (=> d!11421 (= (getValueByKey!125 lt!23997 (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) (Some!130 (_2!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun lt!24186 () Unit!1547)

(declare-fun choose!318 (List!1423 (_ BitVec 64) V!2841) Unit!1547)

(assert (=> d!11421 (= lt!24186 (choose!318 lt!23997 (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun e!39137 () Bool)

(assert (=> d!11421 e!39137))

(declare-fun res!33041 () Bool)

(assert (=> d!11421 (=> (not res!33041) (not e!39137))))

(assert (=> d!11421 (= res!33041 (isStrictlySorted!271 lt!23997))))

(assert (=> d!11421 (= (lemmaContainsTupThenGetReturnValue!42 lt!23997 (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!24186)))

(declare-fun b!59522 () Bool)

(declare-fun res!33042 () Bool)

(assert (=> b!59522 (=> (not res!33042) (not e!39137))))

(assert (=> b!59522 (= res!33042 (containsKey!128 lt!23997 (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun b!59523 () Bool)

(assert (=> b!59523 (= e!39137 (contains!680 lt!23997 (tuple2!2015 (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (= (and d!11421 res!33041) b!59522))

(assert (= (and b!59522 res!33042) b!59523))

(assert (=> d!11421 m!51097))

(declare-fun m!51421 () Bool)

(assert (=> d!11421 m!51421))

(declare-fun m!51423 () Bool)

(assert (=> d!11421 m!51423))

(declare-fun m!51425 () Bool)

(assert (=> b!59522 m!51425))

(declare-fun m!51427 () Bool)

(assert (=> b!59523 m!51427))

(assert (=> d!11335 d!11421))

(declare-fun b!59544 () Bool)

(declare-fun e!39150 () List!1423)

(declare-fun call!4476 () List!1423)

(assert (=> b!59544 (= e!39150 call!4476)))

(declare-fun b!59545 () Bool)

(declare-fun e!39152 () Bool)

(declare-fun lt!24189 () List!1423)

(assert (=> b!59545 (= e!39152 (contains!680 lt!24189 (tuple2!2015 (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(declare-fun b!59546 () Bool)

(declare-fun e!39148 () List!1423)

(assert (=> b!59546 (= e!39148 (insertStrictlySorted!45 (t!4757 (toList!687 call!4392)) (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun d!11423 () Bool)

(assert (=> d!11423 e!39152))

(declare-fun res!33047 () Bool)

(assert (=> d!11423 (=> (not res!33047) (not e!39152))))

(assert (=> d!11423 (= res!33047 (isStrictlySorted!271 lt!24189))))

(assert (=> d!11423 (= lt!24189 e!39150)))

(declare-fun c!7633 () Bool)

(assert (=> d!11423 (= c!7633 (and ((_ is Cons!1419) (toList!687 call!4392)) (bvslt (_1!1018 (h!2000 (toList!687 call!4392))) (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (=> d!11423 (isStrictlySorted!271 (toList!687 call!4392))))

(assert (=> d!11423 (= (insertStrictlySorted!45 (toList!687 call!4392) (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!24189)))

(declare-fun bm!4472 () Bool)

(declare-fun call!4475 () List!1423)

(declare-fun call!4477 () List!1423)

(assert (=> bm!4472 (= call!4475 call!4477)))

(declare-fun b!59547 () Bool)

(declare-fun e!39151 () List!1423)

(assert (=> b!59547 (= e!39150 e!39151)))

(declare-fun c!7634 () Bool)

(assert (=> b!59547 (= c!7634 (and ((_ is Cons!1419) (toList!687 call!4392)) (= (_1!1018 (h!2000 (toList!687 call!4392))) (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(declare-fun b!59548 () Bool)

(declare-fun res!33048 () Bool)

(assert (=> b!59548 (=> (not res!33048) (not e!39152))))

(assert (=> b!59548 (= res!33048 (containsKey!128 lt!24189 (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun b!59549 () Bool)

(declare-fun e!39149 () List!1423)

(assert (=> b!59549 (= e!39149 call!4475)))

(declare-fun bm!4473 () Bool)

(declare-fun $colon$colon!59 (List!1423 tuple2!2014) List!1423)

(assert (=> bm!4473 (= call!4476 ($colon$colon!59 e!39148 (ite c!7633 (h!2000 (toList!687 call!4392)) (tuple2!2015 (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))))

(declare-fun c!7635 () Bool)

(assert (=> bm!4473 (= c!7635 c!7633)))

(declare-fun b!59550 () Bool)

(assert (=> b!59550 (= e!39149 call!4475)))

(declare-fun b!59551 () Bool)

(assert (=> b!59551 (= e!39151 call!4477)))

(declare-fun bm!4474 () Bool)

(assert (=> bm!4474 (= call!4477 call!4476)))

(declare-fun b!59552 () Bool)

(declare-fun c!7636 () Bool)

(assert (=> b!59552 (= c!7636 (and ((_ is Cons!1419) (toList!687 call!4392)) (bvsgt (_1!1018 (h!2000 (toList!687 call!4392))) (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (=> b!59552 (= e!39151 e!39149)))

(declare-fun b!59553 () Bool)

(assert (=> b!59553 (= e!39148 (ite c!7634 (t!4757 (toList!687 call!4392)) (ite c!7636 (Cons!1419 (h!2000 (toList!687 call!4392)) (t!4757 (toList!687 call!4392))) Nil!1420)))))

(assert (= (and d!11423 c!7633) b!59544))

(assert (= (and d!11423 (not c!7633)) b!59547))

(assert (= (and b!59547 c!7634) b!59551))

(assert (= (and b!59547 (not c!7634)) b!59552))

(assert (= (and b!59552 c!7636) b!59550))

(assert (= (and b!59552 (not c!7636)) b!59549))

(assert (= (or b!59550 b!59549) bm!4472))

(assert (= (or b!59551 bm!4472) bm!4474))

(assert (= (or b!59544 bm!4474) bm!4473))

(assert (= (and bm!4473 c!7635) b!59546))

(assert (= (and bm!4473 (not c!7635)) b!59553))

(assert (= (and d!11423 res!33047) b!59548))

(assert (= (and b!59548 res!33048) b!59545))

(declare-fun m!51429 () Bool)

(assert (=> b!59545 m!51429))

(declare-fun m!51431 () Bool)

(assert (=> b!59546 m!51431))

(declare-fun m!51433 () Bool)

(assert (=> bm!4473 m!51433))

(declare-fun m!51435 () Bool)

(assert (=> b!59548 m!51435))

(declare-fun m!51437 () Bool)

(assert (=> d!11423 m!51437))

(declare-fun m!51439 () Bool)

(assert (=> d!11423 m!51439))

(assert (=> d!11335 d!11423))

(declare-fun d!11425 () Bool)

(assert (=> d!11425 (= (+!80 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!388 (_keys!3666 newMap!16) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (index!3008 lt!23716) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16))) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(assert (=> d!11425 true))

(declare-fun _$5!62 () Unit!1547)

(assert (=> d!11425 (= (choose!315 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (index!3008 lt!23716) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2042 newMap!16)) _$5!62)))

(declare-fun bs!2576 () Bool)

(assert (= bs!2576 d!11425))

(assert (=> bs!2576 m!50509))

(assert (=> bs!2576 m!50509))

(assert (=> bs!2576 m!51053))

(assert (=> bs!2576 m!50545))

(assert (=> bs!2576 m!51055))

(assert (=> d!11323 d!11425))

(assert (=> d!11323 d!11363))

(declare-fun d!11427 () Bool)

(assert (=> d!11427 (isDefined!77 (getValueByKey!125 (toList!687 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(declare-fun lt!24190 () Unit!1547)

(assert (=> d!11427 (= lt!24190 (choose!311 (toList!687 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(declare-fun e!39153 () Bool)

(assert (=> d!11427 e!39153))

(declare-fun res!33049 () Bool)

(assert (=> d!11427 (=> (not res!33049) (not e!39153))))

(assert (=> d!11427 (= res!33049 (isStrictlySorted!271 (toList!687 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))))

(assert (=> d!11427 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) lt!24190)))

(declare-fun b!59554 () Bool)

(assert (=> b!59554 (= e!39153 (containsKey!128 (toList!687 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(assert (= (and d!11427 res!33049) b!59554))

(assert (=> d!11427 m!50367))

(assert (=> d!11427 m!51061))

(assert (=> d!11427 m!51061))

(assert (=> d!11427 m!51063))

(assert (=> d!11427 m!50367))

(declare-fun m!51441 () Bool)

(assert (=> d!11427 m!51441))

(declare-fun m!51443 () Bool)

(assert (=> d!11427 m!51443))

(assert (=> b!59554 m!50367))

(assert (=> b!59554 m!51057))

(assert (=> b!59246 d!11427))

(declare-fun d!11429 () Bool)

(assert (=> d!11429 (= (isDefined!77 (getValueByKey!125 (toList!687 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355))) (not (isEmpty!299 (getValueByKey!125 (toList!687 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))))

(declare-fun bs!2577 () Bool)

(assert (= bs!2577 d!11429))

(assert (=> bs!2577 m!51061))

(declare-fun m!51445 () Bool)

(assert (=> bs!2577 m!51445))

(assert (=> b!59246 d!11429))

(declare-fun b!59556 () Bool)

(declare-fun e!39154 () Option!131)

(declare-fun e!39155 () Option!131)

(assert (=> b!59556 (= e!39154 e!39155)))

(declare-fun c!7638 () Bool)

(assert (=> b!59556 (= c!7638 (and ((_ is Cons!1419) (toList!687 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))) (not (= (_1!1018 (h!2000 (toList!687 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))))

(declare-fun b!59555 () Bool)

(assert (=> b!59555 (= e!39154 (Some!130 (_2!1018 (h!2000 (toList!687 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))))))

(declare-fun d!11431 () Bool)

(declare-fun c!7637 () Bool)

(assert (=> d!11431 (= c!7637 (and ((_ is Cons!1419) (toList!687 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))) (= (_1!1018 (h!2000 (toList!687 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355))))))

(assert (=> d!11431 (= (getValueByKey!125 (toList!687 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) e!39154)))

(declare-fun b!59558 () Bool)

(assert (=> b!59558 (= e!39155 None!129)))

(declare-fun b!59557 () Bool)

(assert (=> b!59557 (= e!39155 (getValueByKey!125 (t!4757 (toList!687 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(assert (= (and d!11431 c!7637) b!59555))

(assert (= (and d!11431 (not c!7637)) b!59556))

(assert (= (and b!59556 c!7638) b!59557))

(assert (= (and b!59556 (not c!7638)) b!59558))

(assert (=> b!59557 m!50367))

(declare-fun m!51447 () Bool)

(assert (=> b!59557 m!51447))

(assert (=> b!59246 d!11431))

(declare-fun d!11433 () Bool)

(declare-fun e!39156 () Bool)

(assert (=> d!11433 e!39156))

(declare-fun res!33050 () Bool)

(assert (=> d!11433 (=> res!33050 e!39156)))

(declare-fun lt!24193 () Bool)

(assert (=> d!11433 (= res!33050 (not lt!24193))))

(declare-fun lt!24192 () Bool)

(assert (=> d!11433 (= lt!24193 lt!24192)))

(declare-fun lt!24191 () Unit!1547)

(declare-fun e!39157 () Unit!1547)

(assert (=> d!11433 (= lt!24191 e!39157)))

(declare-fun c!7639 () Bool)

(assert (=> d!11433 (= c!7639 lt!24192)))

(assert (=> d!11433 (= lt!24192 (containsKey!128 (toList!687 lt!23948) (_1!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(assert (=> d!11433 (= (contains!678 lt!23948 (_1!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!24193)))

(declare-fun b!59559 () Bool)

(declare-fun lt!24194 () Unit!1547)

(assert (=> b!59559 (= e!39157 lt!24194)))

(assert (=> b!59559 (= lt!24194 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 lt!23948) (_1!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(assert (=> b!59559 (isDefined!77 (getValueByKey!125 (toList!687 lt!23948) (_1!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun b!59560 () Bool)

(declare-fun Unit!1571 () Unit!1547)

(assert (=> b!59560 (= e!39157 Unit!1571)))

(declare-fun b!59561 () Bool)

(assert (=> b!59561 (= e!39156 (isDefined!77 (getValueByKey!125 (toList!687 lt!23948) (_1!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (= (and d!11433 c!7639) b!59559))

(assert (= (and d!11433 (not c!7639)) b!59560))

(assert (= (and d!11433 (not res!33050)) b!59561))

(declare-fun m!51449 () Bool)

(assert (=> d!11433 m!51449))

(declare-fun m!51451 () Bool)

(assert (=> b!59559 m!51451))

(assert (=> b!59559 m!50965))

(assert (=> b!59559 m!50965))

(declare-fun m!51453 () Bool)

(assert (=> b!59559 m!51453))

(assert (=> b!59561 m!50965))

(assert (=> b!59561 m!50965))

(assert (=> b!59561 m!51453))

(assert (=> d!11295 d!11433))

(declare-fun b!59563 () Bool)

(declare-fun e!39158 () Option!131)

(declare-fun e!39159 () Option!131)

(assert (=> b!59563 (= e!39158 e!39159)))

(declare-fun c!7641 () Bool)

(assert (=> b!59563 (= c!7641 (and ((_ is Cons!1419) lt!23949) (not (= (_1!1018 (h!2000 lt!23949)) (_1!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))))

(declare-fun b!59562 () Bool)

(assert (=> b!59562 (= e!39158 (Some!130 (_2!1018 (h!2000 lt!23949))))))

(declare-fun c!7640 () Bool)

(declare-fun d!11435 () Bool)

(assert (=> d!11435 (= c!7640 (and ((_ is Cons!1419) lt!23949) (= (_1!1018 (h!2000 lt!23949)) (_1!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (=> d!11435 (= (getValueByKey!125 lt!23949 (_1!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) e!39158)))

(declare-fun b!59565 () Bool)

(assert (=> b!59565 (= e!39159 None!129)))

(declare-fun b!59564 () Bool)

(assert (=> b!59564 (= e!39159 (getValueByKey!125 (t!4757 lt!23949) (_1!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(assert (= (and d!11435 c!7640) b!59562))

(assert (= (and d!11435 (not c!7640)) b!59563))

(assert (= (and b!59563 c!7641) b!59564))

(assert (= (and b!59563 (not c!7641)) b!59565))

(declare-fun m!51455 () Bool)

(assert (=> b!59564 m!51455))

(assert (=> d!11295 d!11435))

(declare-fun d!11437 () Bool)

(assert (=> d!11437 (= (getValueByKey!125 lt!23949 (_1!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) (Some!130 (_2!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun lt!24195 () Unit!1547)

(assert (=> d!11437 (= lt!24195 (choose!318 lt!23949 (_1!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun e!39160 () Bool)

(assert (=> d!11437 e!39160))

(declare-fun res!33051 () Bool)

(assert (=> d!11437 (=> (not res!33051) (not e!39160))))

(assert (=> d!11437 (= res!33051 (isStrictlySorted!271 lt!23949))))

(assert (=> d!11437 (= (lemmaContainsTupThenGetReturnValue!42 lt!23949 (_1!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!24195)))

(declare-fun b!59566 () Bool)

(declare-fun res!33052 () Bool)

(assert (=> b!59566 (=> (not res!33052) (not e!39160))))

(assert (=> b!59566 (= res!33052 (containsKey!128 lt!23949 (_1!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun b!59567 () Bool)

(assert (=> b!59567 (= e!39160 (contains!680 lt!23949 (tuple2!2015 (_1!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (= (and d!11437 res!33051) b!59566))

(assert (= (and b!59566 res!33052) b!59567))

(assert (=> d!11437 m!50959))

(declare-fun m!51457 () Bool)

(assert (=> d!11437 m!51457))

(declare-fun m!51459 () Bool)

(assert (=> d!11437 m!51459))

(declare-fun m!51461 () Bool)

(assert (=> b!59566 m!51461))

(declare-fun m!51463 () Bool)

(assert (=> b!59567 m!51463))

(assert (=> d!11295 d!11437))

(declare-fun b!59568 () Bool)

(declare-fun e!39163 () List!1423)

(declare-fun call!4479 () List!1423)

(assert (=> b!59568 (= e!39163 call!4479)))

(declare-fun e!39165 () Bool)

(declare-fun lt!24196 () List!1423)

(declare-fun b!59569 () Bool)

(assert (=> b!59569 (= e!39165 (contains!680 lt!24196 (tuple2!2015 (_1!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(declare-fun b!59570 () Bool)

(declare-fun e!39161 () List!1423)

(assert (=> b!59570 (= e!39161 (insertStrictlySorted!45 (t!4757 (toList!687 lt!23788)) (_1!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun d!11439 () Bool)

(assert (=> d!11439 e!39165))

(declare-fun res!33053 () Bool)

(assert (=> d!11439 (=> (not res!33053) (not e!39165))))

(assert (=> d!11439 (= res!33053 (isStrictlySorted!271 lt!24196))))

(assert (=> d!11439 (= lt!24196 e!39163)))

(declare-fun c!7642 () Bool)

(assert (=> d!11439 (= c!7642 (and ((_ is Cons!1419) (toList!687 lt!23788)) (bvslt (_1!1018 (h!2000 (toList!687 lt!23788))) (_1!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (=> d!11439 (isStrictlySorted!271 (toList!687 lt!23788))))

(assert (=> d!11439 (= (insertStrictlySorted!45 (toList!687 lt!23788) (_1!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!24196)))

(declare-fun bm!4475 () Bool)

(declare-fun call!4478 () List!1423)

(declare-fun call!4480 () List!1423)

(assert (=> bm!4475 (= call!4478 call!4480)))

(declare-fun b!59571 () Bool)

(declare-fun e!39164 () List!1423)

(assert (=> b!59571 (= e!39163 e!39164)))

(declare-fun c!7643 () Bool)

(assert (=> b!59571 (= c!7643 (and ((_ is Cons!1419) (toList!687 lt!23788)) (= (_1!1018 (h!2000 (toList!687 lt!23788))) (_1!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(declare-fun b!59572 () Bool)

(declare-fun res!33054 () Bool)

(assert (=> b!59572 (=> (not res!33054) (not e!39165))))

(assert (=> b!59572 (= res!33054 (containsKey!128 lt!24196 (_1!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun b!59573 () Bool)

(declare-fun e!39162 () List!1423)

(assert (=> b!59573 (= e!39162 call!4478)))

(declare-fun bm!4476 () Bool)

(assert (=> bm!4476 (= call!4479 ($colon$colon!59 e!39161 (ite c!7642 (h!2000 (toList!687 lt!23788)) (tuple2!2015 (_1!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))))

(declare-fun c!7644 () Bool)

(assert (=> bm!4476 (= c!7644 c!7642)))

(declare-fun b!59574 () Bool)

(assert (=> b!59574 (= e!39162 call!4478)))

(declare-fun b!59575 () Bool)

(assert (=> b!59575 (= e!39164 call!4480)))

(declare-fun bm!4477 () Bool)

(assert (=> bm!4477 (= call!4480 call!4479)))

(declare-fun b!59576 () Bool)

(declare-fun c!7645 () Bool)

(assert (=> b!59576 (= c!7645 (and ((_ is Cons!1419) (toList!687 lt!23788)) (bvsgt (_1!1018 (h!2000 (toList!687 lt!23788))) (_1!1018 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (=> b!59576 (= e!39164 e!39162)))

(declare-fun b!59577 () Bool)

(assert (=> b!59577 (= e!39161 (ite c!7643 (t!4757 (toList!687 lt!23788)) (ite c!7645 (Cons!1419 (h!2000 (toList!687 lt!23788)) (t!4757 (toList!687 lt!23788))) Nil!1420)))))

(assert (= (and d!11439 c!7642) b!59568))

(assert (= (and d!11439 (not c!7642)) b!59571))

(assert (= (and b!59571 c!7643) b!59575))

(assert (= (and b!59571 (not c!7643)) b!59576))

(assert (= (and b!59576 c!7645) b!59574))

(assert (= (and b!59576 (not c!7645)) b!59573))

(assert (= (or b!59574 b!59573) bm!4475))

(assert (= (or b!59575 bm!4475) bm!4477))

(assert (= (or b!59568 bm!4477) bm!4476))

(assert (= (and bm!4476 c!7644) b!59570))

(assert (= (and bm!4476 (not c!7644)) b!59577))

(assert (= (and d!11439 res!33053) b!59572))

(assert (= (and b!59572 res!33054) b!59569))

(declare-fun m!51465 () Bool)

(assert (=> b!59569 m!51465))

(declare-fun m!51467 () Bool)

(assert (=> b!59570 m!51467))

(declare-fun m!51469 () Bool)

(assert (=> bm!4476 m!51469))

(declare-fun m!51471 () Bool)

(assert (=> b!59572 m!51471))

(declare-fun m!51473 () Bool)

(assert (=> d!11439 m!51473))

(declare-fun m!51475 () Bool)

(assert (=> d!11439 m!51475))

(assert (=> d!11295 d!11439))

(declare-fun d!11441 () Bool)

(declare-fun res!33055 () Bool)

(declare-fun e!39166 () Bool)

(assert (=> d!11441 (=> res!33055 e!39166)))

(assert (=> d!11441 (= res!33055 (and ((_ is Cons!1419) (toList!687 call!4351)) (= (_1!1018 (h!2000 (toList!687 call!4351))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355))))))

(assert (=> d!11441 (= (containsKey!128 (toList!687 call!4351) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) e!39166)))

(declare-fun b!59578 () Bool)

(declare-fun e!39167 () Bool)

(assert (=> b!59578 (= e!39166 e!39167)))

(declare-fun res!33056 () Bool)

(assert (=> b!59578 (=> (not res!33056) (not e!39167))))

(assert (=> b!59578 (= res!33056 (and (or (not ((_ is Cons!1419) (toList!687 call!4351))) (bvsle (_1!1018 (h!2000 (toList!687 call!4351))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355))) ((_ is Cons!1419) (toList!687 call!4351)) (bvslt (_1!1018 (h!2000 (toList!687 call!4351))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355))))))

(declare-fun b!59579 () Bool)

(assert (=> b!59579 (= e!39167 (containsKey!128 (t!4757 (toList!687 call!4351)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(assert (= (and d!11441 (not res!33055)) b!59578))

(assert (= (and b!59578 res!33056) b!59579))

(assert (=> b!59579 m!50367))

(declare-fun m!51477 () Bool)

(assert (=> b!59579 m!51477))

(assert (=> d!11271 d!11441))

(declare-fun d!11443 () Bool)

(declare-fun res!33057 () Bool)

(declare-fun e!39168 () Bool)

(assert (=> d!11443 (=> res!33057 e!39168)))

(assert (=> d!11443 (= res!33057 (and ((_ is Cons!1419) (toList!687 lt!23783)) (= (_1!1018 (h!2000 (toList!687 lt!23783))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!11443 (= (containsKey!128 (toList!687 lt!23783) #b1000000000000000000000000000000000000000000000000000000000000000) e!39168)))

(declare-fun b!59580 () Bool)

(declare-fun e!39169 () Bool)

(assert (=> b!59580 (= e!39168 e!39169)))

(declare-fun res!33058 () Bool)

(assert (=> b!59580 (=> (not res!33058) (not e!39169))))

(assert (=> b!59580 (= res!33058 (and (or (not ((_ is Cons!1419) (toList!687 lt!23783))) (bvsle (_1!1018 (h!2000 (toList!687 lt!23783))) #b1000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1419) (toList!687 lt!23783)) (bvslt (_1!1018 (h!2000 (toList!687 lt!23783))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!59581 () Bool)

(assert (=> b!59581 (= e!39169 (containsKey!128 (t!4757 (toList!687 lt!23783)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!11443 (not res!33057)) b!59580))

(assert (= (and b!59580 res!33058) b!59581))

(declare-fun m!51479 () Bool)

(assert (=> b!59581 m!51479))

(assert (=> d!11273 d!11443))

(declare-fun d!11445 () Bool)

(declare-fun res!33059 () Bool)

(declare-fun e!39170 () Bool)

(assert (=> d!11445 (=> res!33059 e!39170)))

(assert (=> d!11445 (= res!33059 (and ((_ is Cons!1419) (toList!687 lt!23783)) (= (_1!1018 (h!2000 (toList!687 lt!23783))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!11445 (= (containsKey!128 (toList!687 lt!23783) #b0000000000000000000000000000000000000000000000000000000000000000) e!39170)))

(declare-fun b!59582 () Bool)

(declare-fun e!39171 () Bool)

(assert (=> b!59582 (= e!39170 e!39171)))

(declare-fun res!33060 () Bool)

(assert (=> b!59582 (=> (not res!33060) (not e!39171))))

(assert (=> b!59582 (= res!33060 (and (or (not ((_ is Cons!1419) (toList!687 lt!23783))) (bvsle (_1!1018 (h!2000 (toList!687 lt!23783))) #b0000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1419) (toList!687 lt!23783)) (bvslt (_1!1018 (h!2000 (toList!687 lt!23783))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!59583 () Bool)

(assert (=> b!59583 (= e!39171 (containsKey!128 (t!4757 (toList!687 lt!23783)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!11445 (not res!33059)) b!59582))

(assert (= (and b!59582 res!33060) b!59583))

(declare-fun m!51481 () Bool)

(assert (=> b!59583 m!51481))

(assert (=> d!11353 d!11445))

(declare-fun b!59584 () Bool)

(declare-fun e!39178 () ListLongMap!1343)

(assert (=> b!59584 (= e!39178 (ListLongMap!1344 Nil!1420))))

(declare-fun b!59585 () Bool)

(declare-fun e!39177 () ListLongMap!1343)

(declare-fun call!4481 () ListLongMap!1343)

(assert (=> b!59585 (= e!39177 call!4481)))

(declare-fun b!59586 () Bool)

(declare-fun e!39174 () Bool)

(assert (=> b!59586 (= e!39174 (validKeyInArray!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!59586 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))

(declare-fun b!59587 () Bool)

(declare-fun res!33062 () Bool)

(declare-fun e!39173 () Bool)

(assert (=> b!59587 (=> (not res!33062) (not e!39173))))

(declare-fun lt!24200 () ListLongMap!1343)

(assert (=> b!59587 (= res!33062 (not (contains!678 lt!24200 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!59588 () Bool)

(declare-fun e!39172 () Bool)

(assert (=> b!59588 (= e!39172 (= lt!24200 (getCurrentListMapNoExtraKeys!44 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (_values!2025 (v!2382 (underlying!225 thiss!992))) (mask!5926 (v!2382 (underlying!225 thiss!992))) (extraKeys!1929 (v!2382 (underlying!225 thiss!992))) (zeroValue!1958 (v!2382 (underlying!225 thiss!992))) (minValue!1958 (v!2382 (underlying!225 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))))))))

(declare-fun bm!4478 () Bool)

(assert (=> bm!4478 (= call!4481 (getCurrentListMapNoExtraKeys!44 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (_values!2025 (v!2382 (underlying!225 thiss!992))) (mask!5926 (v!2382 (underlying!225 thiss!992))) (extraKeys!1929 (v!2382 (underlying!225 thiss!992))) (zeroValue!1958 (v!2382 (underlying!225 thiss!992))) (minValue!1958 (v!2382 (underlying!225 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2042 (v!2382 (underlying!225 thiss!992)))))))

(declare-fun b!59589 () Bool)

(assert (=> b!59589 (= e!39172 (isEmpty!300 lt!24200))))

(declare-fun b!59590 () Bool)

(declare-fun lt!24197 () Unit!1547)

(declare-fun lt!24201 () Unit!1547)

(assert (=> b!59590 (= lt!24197 lt!24201)))

(declare-fun lt!24203 () (_ BitVec 64))

(declare-fun lt!24199 () V!2841)

(declare-fun lt!24198 () ListLongMap!1343)

(declare-fun lt!24202 () (_ BitVec 64))

(assert (=> b!59590 (not (contains!678 (+!80 lt!24198 (tuple2!2015 lt!24202 lt!24199)) lt!24203))))

(assert (=> b!59590 (= lt!24201 (addStillNotContains!17 lt!24198 lt!24202 lt!24199 lt!24203))))

(assert (=> b!59590 (= lt!24203 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!59590 (= lt!24199 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!59590 (= lt!24202 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (=> b!59590 (= lt!24198 call!4481)))

(assert (=> b!59590 (= e!39177 (+!80 call!4481 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!59591 () Bool)

(declare-fun e!39176 () Bool)

(declare-fun e!39175 () Bool)

(assert (=> b!59591 (= e!39176 e!39175)))

(assert (=> b!59591 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992))))))))

(declare-fun res!33063 () Bool)

(assert (=> b!59591 (= res!33063 (contains!678 lt!24200 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!59591 (=> (not res!33063) (not e!39175))))

(declare-fun b!59592 () Bool)

(assert (=> b!59592 (= e!39176 e!39172)))

(declare-fun c!7647 () Bool)

(assert (=> b!59592 (= c!7647 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992))))))))

(declare-fun b!59593 () Bool)

(assert (=> b!59593 (= e!39173 e!39176)))

(declare-fun c!7646 () Bool)

(assert (=> b!59593 (= c!7646 e!39174)))

(declare-fun res!33064 () Bool)

(assert (=> b!59593 (=> (not res!33064) (not e!39174))))

(assert (=> b!59593 (= res!33064 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992))))))))

(declare-fun b!59594 () Bool)

(assert (=> b!59594 (= e!39178 e!39177)))

(declare-fun c!7649 () Bool)

(assert (=> b!59594 (= c!7649 (validKeyInArray!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(declare-fun b!59595 () Bool)

(assert (=> b!59595 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992))))))))

(assert (=> b!59595 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2003 (_values!2025 (v!2382 (underlying!225 thiss!992))))))))

(assert (=> b!59595 (= e!39175 (= (apply!66 lt!24200 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!11447 () Bool)

(assert (=> d!11447 e!39173))

(declare-fun res!33061 () Bool)

(assert (=> d!11447 (=> (not res!33061) (not e!39173))))

(assert (=> d!11447 (= res!33061 (not (contains!678 lt!24200 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!11447 (= lt!24200 e!39178)))

(declare-fun c!7648 () Bool)

(assert (=> d!11447 (= c!7648 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992))))))))

(assert (=> d!11447 (validMask!0 (mask!5926 (v!2382 (underlying!225 thiss!992))))))

(assert (=> d!11447 (= (getCurrentListMapNoExtraKeys!44 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (_values!2025 (v!2382 (underlying!225 thiss!992))) (mask!5926 (v!2382 (underlying!225 thiss!992))) (extraKeys!1929 (v!2382 (underlying!225 thiss!992))) (zeroValue!1958 (v!2382 (underlying!225 thiss!992))) (minValue!1958 (v!2382 (underlying!225 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2042 (v!2382 (underlying!225 thiss!992)))) lt!24200)))

(assert (= (and d!11447 c!7648) b!59584))

(assert (= (and d!11447 (not c!7648)) b!59594))

(assert (= (and b!59594 c!7649) b!59590))

(assert (= (and b!59594 (not c!7649)) b!59585))

(assert (= (or b!59590 b!59585) bm!4478))

(assert (= (and d!11447 res!33061) b!59587))

(assert (= (and b!59587 res!33062) b!59593))

(assert (= (and b!59593 res!33064) b!59586))

(assert (= (and b!59593 c!7646) b!59591))

(assert (= (and b!59593 (not c!7646)) b!59592))

(assert (= (and b!59591 res!33063) b!59595))

(assert (= (and b!59592 c!7647) b!59588))

(assert (= (and b!59592 (not c!7647)) b!59589))

(declare-fun b_lambda!2615 () Bool)

(assert (=> (not b_lambda!2615) (not b!59590)))

(assert (=> b!59590 t!4753))

(declare-fun b_and!3597 () Bool)

(assert (= b_and!3593 (and (=> t!4753 result!2361) b_and!3597)))

(assert (=> b!59590 t!4755))

(declare-fun b_and!3599 () Bool)

(assert (= b_and!3595 (and (=> t!4755 result!2365) b_and!3599)))

(declare-fun b_lambda!2617 () Bool)

(assert (=> (not b_lambda!2617) (not b!59595)))

(assert (=> b!59595 t!4753))

(declare-fun b_and!3601 () Bool)

(assert (= b_and!3597 (and (=> t!4753 result!2361) b_and!3601)))

(assert (=> b!59595 t!4755))

(declare-fun b_and!3603 () Bool)

(assert (= b_and!3599 (and (=> t!4755 result!2365) b_and!3603)))

(declare-fun m!51483 () Bool)

(assert (=> d!11447 m!51483))

(assert (=> d!11447 m!50361))

(assert (=> b!59594 m!51091))

(assert (=> b!59594 m!51091))

(declare-fun m!51485 () Bool)

(assert (=> b!59594 m!51485))

(declare-fun m!51487 () Bool)

(assert (=> b!59587 m!51487))

(assert (=> b!59586 m!51091))

(assert (=> b!59586 m!51091))

(assert (=> b!59586 m!51485))

(declare-fun m!51489 () Bool)

(assert (=> b!59589 m!51489))

(declare-fun m!51491 () Bool)

(assert (=> bm!4478 m!51491))

(declare-fun m!51493 () Bool)

(assert (=> b!59590 m!51493))

(declare-fun m!51495 () Bool)

(assert (=> b!59590 m!51495))

(declare-fun m!51497 () Bool)

(assert (=> b!59590 m!51497))

(declare-fun m!51499 () Bool)

(assert (=> b!59590 m!51499))

(assert (=> b!59590 m!51499))

(assert (=> b!59590 m!50393))

(declare-fun m!51501 () Bool)

(assert (=> b!59590 m!51501))

(assert (=> b!59590 m!51091))

(assert (=> b!59590 m!50393))

(assert (=> b!59590 m!51497))

(declare-fun m!51503 () Bool)

(assert (=> b!59590 m!51503))

(assert (=> b!59591 m!51091))

(assert (=> b!59591 m!51091))

(declare-fun m!51505 () Bool)

(assert (=> b!59591 m!51505))

(assert (=> b!59595 m!51499))

(assert (=> b!59595 m!51499))

(assert (=> b!59595 m!50393))

(assert (=> b!59595 m!51501))

(assert (=> b!59595 m!51091))

(declare-fun m!51507 () Bool)

(assert (=> b!59595 m!51507))

(assert (=> b!59595 m!51091))

(assert (=> b!59595 m!50393))

(assert (=> b!59588 m!51491))

(assert (=> bm!4422 d!11447))

(declare-fun d!11449 () Bool)

(assert (=> d!11449 (= (apply!66 (+!80 lt!23901 (tuple2!2015 lt!23890 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))) lt!23891) (apply!66 lt!23901 lt!23891))))

(declare-fun lt!24204 () Unit!1547)

(assert (=> d!11449 (= lt!24204 (choose!312 lt!23901 lt!23890 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)) lt!23891))))

(declare-fun e!39179 () Bool)

(assert (=> d!11449 e!39179))

(declare-fun res!33065 () Bool)

(assert (=> d!11449 (=> (not res!33065) (not e!39179))))

(assert (=> d!11449 (= res!33065 (contains!678 lt!23901 lt!23891))))

(assert (=> d!11449 (= (addApplyDifferent!42 lt!23901 lt!23890 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)) lt!23891) lt!24204)))

(declare-fun b!59596 () Bool)

(assert (=> b!59596 (= e!39179 (not (= lt!23891 lt!23890)))))

(assert (= (and d!11449 res!33065) b!59596))

(assert (=> d!11449 m!50877))

(declare-fun m!51509 () Bool)

(assert (=> d!11449 m!51509))

(declare-fun m!51511 () Bool)

(assert (=> d!11449 m!51511))

(assert (=> d!11449 m!50873))

(assert (=> d!11449 m!50873))

(assert (=> d!11449 m!50893))

(assert (=> b!59158 d!11449))

(declare-fun d!11451 () Bool)

(assert (=> d!11451 (= (apply!66 lt!23901 lt!23891) (get!1075 (getValueByKey!125 (toList!687 lt!23901) lt!23891)))))

(declare-fun bs!2578 () Bool)

(assert (= bs!2578 d!11451))

(declare-fun m!51513 () Bool)

(assert (=> bs!2578 m!51513))

(assert (=> bs!2578 m!51513))

(declare-fun m!51515 () Bool)

(assert (=> bs!2578 m!51515))

(assert (=> b!59158 d!11451))

(declare-fun d!11453 () Bool)

(assert (=> d!11453 (contains!678 (+!80 lt!23888 (tuple2!2015 lt!23902 (zeroValue!1958 newMap!16))) lt!23895)))

(declare-fun lt!24205 () Unit!1547)

(assert (=> d!11453 (= lt!24205 (choose!313 lt!23888 lt!23902 (zeroValue!1958 newMap!16) lt!23895))))

(assert (=> d!11453 (contains!678 lt!23888 lt!23895)))

(assert (=> d!11453 (= (addStillContains!42 lt!23888 lt!23902 (zeroValue!1958 newMap!16) lt!23895) lt!24205)))

(declare-fun bs!2579 () Bool)

(assert (= bs!2579 d!11453))

(assert (=> bs!2579 m!50895))

(assert (=> bs!2579 m!50895))

(assert (=> bs!2579 m!50897))

(declare-fun m!51517 () Bool)

(assert (=> bs!2579 m!51517))

(declare-fun m!51519 () Bool)

(assert (=> bs!2579 m!51519))

(assert (=> b!59158 d!11453))

(declare-fun b!59597 () Bool)

(declare-fun e!39186 () ListLongMap!1343)

(assert (=> b!59597 (= e!39186 (ListLongMap!1344 Nil!1420))))

(declare-fun b!59598 () Bool)

(declare-fun e!39185 () ListLongMap!1343)

(declare-fun call!4482 () ListLongMap!1343)

(assert (=> b!59598 (= e!39185 call!4482)))

(declare-fun b!59599 () Bool)

(declare-fun e!39182 () Bool)

(assert (=> b!59599 (= e!39182 (validKeyInArray!0 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59599 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!59600 () Bool)

(declare-fun res!33067 () Bool)

(declare-fun e!39181 () Bool)

(assert (=> b!59600 (=> (not res!33067) (not e!39181))))

(declare-fun lt!24209 () ListLongMap!1343)

(assert (=> b!59600 (= res!33067 (not (contains!678 lt!24209 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!39180 () Bool)

(declare-fun b!59601 () Bool)

(assert (=> b!59601 (= e!39180 (= lt!24209 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (ite c!7472 (_values!2025 newMap!16) lt!23706) (mask!5926 newMap!16) (ite c!7472 (ite c!7473 (extraKeys!1929 newMap!16) lt!23721) (extraKeys!1929 newMap!16)) (zeroValue!1958 newMap!16) (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2042 newMap!16))))))

(declare-fun bm!4479 () Bool)

(assert (=> bm!4479 (= call!4482 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (ite c!7472 (_values!2025 newMap!16) lt!23706) (mask!5926 newMap!16) (ite c!7472 (ite c!7473 (extraKeys!1929 newMap!16) lt!23721) (extraKeys!1929 newMap!16)) (zeroValue!1958 newMap!16) (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2042 newMap!16)))))

(declare-fun b!59602 () Bool)

(assert (=> b!59602 (= e!39180 (isEmpty!300 lt!24209))))

(declare-fun b!59603 () Bool)

(declare-fun lt!24206 () Unit!1547)

(declare-fun lt!24210 () Unit!1547)

(assert (=> b!59603 (= lt!24206 lt!24210)))

(declare-fun lt!24207 () ListLongMap!1343)

(declare-fun lt!24208 () V!2841)

(declare-fun lt!24211 () (_ BitVec 64))

(declare-fun lt!24212 () (_ BitVec 64))

(assert (=> b!59603 (not (contains!678 (+!80 lt!24207 (tuple2!2015 lt!24211 lt!24208)) lt!24212))))

(assert (=> b!59603 (= lt!24210 (addStillNotContains!17 lt!24207 lt!24211 lt!24208 lt!24212))))

(assert (=> b!59603 (= lt!24212 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!59603 (= lt!24208 (get!1072 (select (arr!1773 (ite c!7472 (_values!2025 newMap!16) lt!23706)) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!59603 (= lt!24211 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!59603 (= lt!24207 call!4482)))

(assert (=> b!59603 (= e!39185 (+!80 call!4482 (tuple2!2015 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000) (get!1072 (select (arr!1773 (ite c!7472 (_values!2025 newMap!16) lt!23706)) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!59604 () Bool)

(declare-fun e!39184 () Bool)

(declare-fun e!39183 () Bool)

(assert (=> b!59604 (= e!39184 e!39183)))

(assert (=> b!59604 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(declare-fun res!33068 () Bool)

(assert (=> b!59604 (= res!33068 (contains!678 lt!24209 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59604 (=> (not res!33068) (not e!39183))))

(declare-fun b!59605 () Bool)

(assert (=> b!59605 (= e!39184 e!39180)))

(declare-fun c!7651 () Bool)

(assert (=> b!59605 (= c!7651 (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(declare-fun b!59606 () Bool)

(assert (=> b!59606 (= e!39181 e!39184)))

(declare-fun c!7650 () Bool)

(assert (=> b!59606 (= c!7650 e!39182)))

(declare-fun res!33069 () Bool)

(assert (=> b!59606 (=> (not res!33069) (not e!39182))))

(assert (=> b!59606 (= res!33069 (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(declare-fun b!59607 () Bool)

(assert (=> b!59607 (= e!39186 e!39185)))

(declare-fun c!7653 () Bool)

(assert (=> b!59607 (= c!7653 (validKeyInArray!0 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59608 () Bool)

(assert (=> b!59608 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(assert (=> b!59608 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (ite c!7472 (_values!2025 newMap!16) lt!23706))))))

(assert (=> b!59608 (= e!39183 (= (apply!66 lt!24209 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)) (get!1072 (select (arr!1773 (ite c!7472 (_values!2025 newMap!16) lt!23706)) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!11455 () Bool)

(assert (=> d!11455 e!39181))

(declare-fun res!33066 () Bool)

(assert (=> d!11455 (=> (not res!33066) (not e!39181))))

(assert (=> d!11455 (= res!33066 (not (contains!678 lt!24209 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!11455 (= lt!24209 e!39186)))

(declare-fun c!7652 () Bool)

(assert (=> d!11455 (= c!7652 (bvsge #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(assert (=> d!11455 (validMask!0 (mask!5926 newMap!16))))

(assert (=> d!11455 (= (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (ite c!7472 (_values!2025 newMap!16) lt!23706) (mask!5926 newMap!16) (ite c!7472 (ite c!7473 (extraKeys!1929 newMap!16) lt!23721) (extraKeys!1929 newMap!16)) (zeroValue!1958 newMap!16) (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) lt!24209)))

(assert (= (and d!11455 c!7652) b!59597))

(assert (= (and d!11455 (not c!7652)) b!59607))

(assert (= (and b!59607 c!7653) b!59603))

(assert (= (and b!59607 (not c!7653)) b!59598))

(assert (= (or b!59603 b!59598) bm!4479))

(assert (= (and d!11455 res!33066) b!59600))

(assert (= (and b!59600 res!33067) b!59606))

(assert (= (and b!59606 res!33069) b!59599))

(assert (= (and b!59606 c!7650) b!59604))

(assert (= (and b!59606 (not c!7650)) b!59605))

(assert (= (and b!59604 res!33068) b!59608))

(assert (= (and b!59605 c!7651) b!59601))

(assert (= (and b!59605 (not c!7651)) b!59602))

(declare-fun b_lambda!2619 () Bool)

(assert (=> (not b_lambda!2619) (not b!59603)))

(assert (=> b!59603 t!4767))

(declare-fun b_and!3605 () Bool)

(assert (= b_and!3601 (and (=> t!4767 result!2381) b_and!3605)))

(assert (=> b!59603 t!4769))

(declare-fun b_and!3607 () Bool)

(assert (= b_and!3603 (and (=> t!4769 result!2383) b_and!3607)))

(declare-fun b_lambda!2621 () Bool)

(assert (=> (not b_lambda!2621) (not b!59608)))

(assert (=> b!59608 t!4767))

(declare-fun b_and!3609 () Bool)

(assert (= b_and!3605 (and (=> t!4767 result!2381) b_and!3609)))

(assert (=> b!59608 t!4769))

(declare-fun b_and!3611 () Bool)

(assert (= b_and!3607 (and (=> t!4769 result!2383) b_and!3611)))

(declare-fun m!51521 () Bool)

(assert (=> d!11455 m!51521))

(assert (=> d!11455 m!50667))

(assert (=> b!59607 m!50693))

(assert (=> b!59607 m!50693))

(assert (=> b!59607 m!50695))

(declare-fun m!51523 () Bool)

(assert (=> b!59600 m!51523))

(assert (=> b!59599 m!50693))

(assert (=> b!59599 m!50693))

(assert (=> b!59599 m!50695))

(declare-fun m!51525 () Bool)

(assert (=> b!59602 m!51525))

(declare-fun m!51527 () Bool)

(assert (=> bm!4479 m!51527))

(declare-fun m!51529 () Bool)

(assert (=> b!59603 m!51529))

(declare-fun m!51531 () Bool)

(assert (=> b!59603 m!51531))

(declare-fun m!51533 () Bool)

(assert (=> b!59603 m!51533))

(assert (=> b!59603 m!50863))

(assert (=> b!59603 m!50863))

(assert (=> b!59603 m!50707))

(assert (=> b!59603 m!50867))

(assert (=> b!59603 m!50693))

(assert (=> b!59603 m!50707))

(assert (=> b!59603 m!51533))

(declare-fun m!51535 () Bool)

(assert (=> b!59603 m!51535))

(assert (=> b!59604 m!50693))

(assert (=> b!59604 m!50693))

(declare-fun m!51537 () Bool)

(assert (=> b!59604 m!51537))

(assert (=> b!59608 m!50863))

(assert (=> b!59608 m!50863))

(assert (=> b!59608 m!50707))

(assert (=> b!59608 m!50867))

(assert (=> b!59608 m!50693))

(declare-fun m!51539 () Bool)

(assert (=> b!59608 m!51539))

(assert (=> b!59608 m!50693))

(assert (=> b!59608 m!50707))

(assert (=> b!59601 m!51527))

(assert (=> b!59158 d!11455))

(declare-fun d!11457 () Bool)

(assert (=> d!11457 (= (apply!66 (+!80 lt!23894 (tuple2!2015 lt!23900 (zeroValue!1958 newMap!16))) lt!23892) (apply!66 lt!23894 lt!23892))))

(declare-fun lt!24213 () Unit!1547)

(assert (=> d!11457 (= lt!24213 (choose!312 lt!23894 lt!23900 (zeroValue!1958 newMap!16) lt!23892))))

(declare-fun e!39187 () Bool)

(assert (=> d!11457 e!39187))

(declare-fun res!33070 () Bool)

(assert (=> d!11457 (=> (not res!33070) (not e!39187))))

(assert (=> d!11457 (= res!33070 (contains!678 lt!23894 lt!23892))))

(assert (=> d!11457 (= (addApplyDifferent!42 lt!23894 lt!23900 (zeroValue!1958 newMap!16) lt!23892) lt!24213)))

(declare-fun b!59609 () Bool)

(assert (=> b!59609 (= e!39187 (not (= lt!23892 lt!23900)))))

(assert (= (and d!11457 res!33070) b!59609))

(assert (=> d!11457 m!50889))

(declare-fun m!51541 () Bool)

(assert (=> d!11457 m!51541))

(declare-fun m!51543 () Bool)

(assert (=> d!11457 m!51543))

(assert (=> d!11457 m!50879))

(assert (=> d!11457 m!50879))

(assert (=> d!11457 m!50881))

(assert (=> b!59158 d!11457))

(declare-fun d!11459 () Bool)

(declare-fun e!39188 () Bool)

(assert (=> d!11459 e!39188))

(declare-fun res!33071 () Bool)

(assert (=> d!11459 (=> (not res!33071) (not e!39188))))

(declare-fun lt!24216 () ListLongMap!1343)

(assert (=> d!11459 (= res!33071 (contains!678 lt!24216 (_1!1018 (tuple2!2015 lt!23897 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))))))

(declare-fun lt!24217 () List!1423)

(assert (=> d!11459 (= lt!24216 (ListLongMap!1344 lt!24217))))

(declare-fun lt!24215 () Unit!1547)

(declare-fun lt!24214 () Unit!1547)

(assert (=> d!11459 (= lt!24215 lt!24214)))

(assert (=> d!11459 (= (getValueByKey!125 lt!24217 (_1!1018 (tuple2!2015 lt!23897 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))) (Some!130 (_2!1018 (tuple2!2015 lt!23897 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))))))

(assert (=> d!11459 (= lt!24214 (lemmaContainsTupThenGetReturnValue!42 lt!24217 (_1!1018 (tuple2!2015 lt!23897 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))) (_2!1018 (tuple2!2015 lt!23897 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))))))

(assert (=> d!11459 (= lt!24217 (insertStrictlySorted!45 (toList!687 lt!23889) (_1!1018 (tuple2!2015 lt!23897 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))) (_2!1018 (tuple2!2015 lt!23897 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))))))

(assert (=> d!11459 (= (+!80 lt!23889 (tuple2!2015 lt!23897 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))) lt!24216)))

(declare-fun b!59610 () Bool)

(declare-fun res!33072 () Bool)

(assert (=> b!59610 (=> (not res!33072) (not e!39188))))

(assert (=> b!59610 (= res!33072 (= (getValueByKey!125 (toList!687 lt!24216) (_1!1018 (tuple2!2015 lt!23897 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))) (Some!130 (_2!1018 (tuple2!2015 lt!23897 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))))))))

(declare-fun b!59611 () Bool)

(assert (=> b!59611 (= e!39188 (contains!680 (toList!687 lt!24216) (tuple2!2015 lt!23897 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))))))

(assert (= (and d!11459 res!33071) b!59610))

(assert (= (and b!59610 res!33072) b!59611))

(declare-fun m!51545 () Bool)

(assert (=> d!11459 m!51545))

(declare-fun m!51547 () Bool)

(assert (=> d!11459 m!51547))

(declare-fun m!51549 () Bool)

(assert (=> d!11459 m!51549))

(declare-fun m!51551 () Bool)

(assert (=> d!11459 m!51551))

(declare-fun m!51553 () Bool)

(assert (=> b!59610 m!51553))

(declare-fun m!51555 () Bool)

(assert (=> b!59611 m!51555))

(assert (=> b!59158 d!11459))

(declare-fun d!11461 () Bool)

(declare-fun e!39189 () Bool)

(assert (=> d!11461 e!39189))

(declare-fun res!33073 () Bool)

(assert (=> d!11461 (=> (not res!33073) (not e!39189))))

(declare-fun lt!24220 () ListLongMap!1343)

(assert (=> d!11461 (= res!33073 (contains!678 lt!24220 (_1!1018 (tuple2!2015 lt!23890 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))))))

(declare-fun lt!24221 () List!1423)

(assert (=> d!11461 (= lt!24220 (ListLongMap!1344 lt!24221))))

(declare-fun lt!24219 () Unit!1547)

(declare-fun lt!24218 () Unit!1547)

(assert (=> d!11461 (= lt!24219 lt!24218)))

(assert (=> d!11461 (= (getValueByKey!125 lt!24221 (_1!1018 (tuple2!2015 lt!23890 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))) (Some!130 (_2!1018 (tuple2!2015 lt!23890 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))))))

(assert (=> d!11461 (= lt!24218 (lemmaContainsTupThenGetReturnValue!42 lt!24221 (_1!1018 (tuple2!2015 lt!23890 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))) (_2!1018 (tuple2!2015 lt!23890 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))))))

(assert (=> d!11461 (= lt!24221 (insertStrictlySorted!45 (toList!687 lt!23901) (_1!1018 (tuple2!2015 lt!23890 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))) (_2!1018 (tuple2!2015 lt!23890 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))))))

(assert (=> d!11461 (= (+!80 lt!23901 (tuple2!2015 lt!23890 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))) lt!24220)))

(declare-fun b!59612 () Bool)

(declare-fun res!33074 () Bool)

(assert (=> b!59612 (=> (not res!33074) (not e!39189))))

(assert (=> b!59612 (= res!33074 (= (getValueByKey!125 (toList!687 lt!24220) (_1!1018 (tuple2!2015 lt!23890 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))) (Some!130 (_2!1018 (tuple2!2015 lt!23890 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))))))))

(declare-fun b!59613 () Bool)

(assert (=> b!59613 (= e!39189 (contains!680 (toList!687 lt!24220) (tuple2!2015 lt!23890 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))))))

(assert (= (and d!11461 res!33073) b!59612))

(assert (= (and b!59612 res!33074) b!59613))

(declare-fun m!51557 () Bool)

(assert (=> d!11461 m!51557))

(declare-fun m!51559 () Bool)

(assert (=> d!11461 m!51559))

(declare-fun m!51561 () Bool)

(assert (=> d!11461 m!51561))

(declare-fun m!51563 () Bool)

(assert (=> d!11461 m!51563))

(declare-fun m!51565 () Bool)

(assert (=> b!59612 m!51565))

(declare-fun m!51567 () Bool)

(assert (=> b!59613 m!51567))

(assert (=> b!59158 d!11461))

(declare-fun d!11463 () Bool)

(declare-fun e!39190 () Bool)

(assert (=> d!11463 e!39190))

(declare-fun res!33075 () Bool)

(assert (=> d!11463 (=> (not res!33075) (not e!39190))))

(declare-fun lt!24224 () ListLongMap!1343)

(assert (=> d!11463 (= res!33075 (contains!678 lt!24224 (_1!1018 (tuple2!2015 lt!23902 (zeroValue!1958 newMap!16)))))))

(declare-fun lt!24225 () List!1423)

(assert (=> d!11463 (= lt!24224 (ListLongMap!1344 lt!24225))))

(declare-fun lt!24223 () Unit!1547)

(declare-fun lt!24222 () Unit!1547)

(assert (=> d!11463 (= lt!24223 lt!24222)))

(assert (=> d!11463 (= (getValueByKey!125 lt!24225 (_1!1018 (tuple2!2015 lt!23902 (zeroValue!1958 newMap!16)))) (Some!130 (_2!1018 (tuple2!2015 lt!23902 (zeroValue!1958 newMap!16)))))))

(assert (=> d!11463 (= lt!24222 (lemmaContainsTupThenGetReturnValue!42 lt!24225 (_1!1018 (tuple2!2015 lt!23902 (zeroValue!1958 newMap!16))) (_2!1018 (tuple2!2015 lt!23902 (zeroValue!1958 newMap!16)))))))

(assert (=> d!11463 (= lt!24225 (insertStrictlySorted!45 (toList!687 lt!23888) (_1!1018 (tuple2!2015 lt!23902 (zeroValue!1958 newMap!16))) (_2!1018 (tuple2!2015 lt!23902 (zeroValue!1958 newMap!16)))))))

(assert (=> d!11463 (= (+!80 lt!23888 (tuple2!2015 lt!23902 (zeroValue!1958 newMap!16))) lt!24224)))

(declare-fun b!59614 () Bool)

(declare-fun res!33076 () Bool)

(assert (=> b!59614 (=> (not res!33076) (not e!39190))))

(assert (=> b!59614 (= res!33076 (= (getValueByKey!125 (toList!687 lt!24224) (_1!1018 (tuple2!2015 lt!23902 (zeroValue!1958 newMap!16)))) (Some!130 (_2!1018 (tuple2!2015 lt!23902 (zeroValue!1958 newMap!16))))))))

(declare-fun b!59615 () Bool)

(assert (=> b!59615 (= e!39190 (contains!680 (toList!687 lt!24224) (tuple2!2015 lt!23902 (zeroValue!1958 newMap!16))))))

(assert (= (and d!11463 res!33075) b!59614))

(assert (= (and b!59614 res!33076) b!59615))

(declare-fun m!51569 () Bool)

(assert (=> d!11463 m!51569))

(declare-fun m!51571 () Bool)

(assert (=> d!11463 m!51571))

(declare-fun m!51573 () Bool)

(assert (=> d!11463 m!51573))

(declare-fun m!51575 () Bool)

(assert (=> d!11463 m!51575))

(declare-fun m!51577 () Bool)

(assert (=> b!59614 m!51577))

(declare-fun m!51579 () Bool)

(assert (=> b!59615 m!51579))

(assert (=> b!59158 d!11463))

(declare-fun d!11465 () Bool)

(assert (=> d!11465 (= (apply!66 (+!80 lt!23901 (tuple2!2015 lt!23890 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))) lt!23891) (get!1075 (getValueByKey!125 (toList!687 (+!80 lt!23901 (tuple2!2015 lt!23890 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))) lt!23891)))))

(declare-fun bs!2580 () Bool)

(assert (= bs!2580 d!11465))

(declare-fun m!51581 () Bool)

(assert (=> bs!2580 m!51581))

(assert (=> bs!2580 m!51581))

(declare-fun m!51583 () Bool)

(assert (=> bs!2580 m!51583))

(assert (=> b!59158 d!11465))

(declare-fun d!11467 () Bool)

(assert (=> d!11467 (= (apply!66 (+!80 lt!23889 (tuple2!2015 lt!23897 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))) lt!23899) (get!1075 (getValueByKey!125 (toList!687 (+!80 lt!23889 (tuple2!2015 lt!23897 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))) lt!23899)))))

(declare-fun bs!2581 () Bool)

(assert (= bs!2581 d!11467))

(declare-fun m!51585 () Bool)

(assert (=> bs!2581 m!51585))

(assert (=> bs!2581 m!51585))

(declare-fun m!51587 () Bool)

(assert (=> bs!2581 m!51587))

(assert (=> b!59158 d!11467))

(declare-fun d!11469 () Bool)

(assert (=> d!11469 (= (apply!66 lt!23894 lt!23892) (get!1075 (getValueByKey!125 (toList!687 lt!23894) lt!23892)))))

(declare-fun bs!2582 () Bool)

(assert (= bs!2582 d!11469))

(declare-fun m!51589 () Bool)

(assert (=> bs!2582 m!51589))

(assert (=> bs!2582 m!51589))

(declare-fun m!51591 () Bool)

(assert (=> bs!2582 m!51591))

(assert (=> b!59158 d!11469))

(declare-fun d!11471 () Bool)

(declare-fun e!39191 () Bool)

(assert (=> d!11471 e!39191))

(declare-fun res!33077 () Bool)

(assert (=> d!11471 (=> res!33077 e!39191)))

(declare-fun lt!24228 () Bool)

(assert (=> d!11471 (= res!33077 (not lt!24228))))

(declare-fun lt!24227 () Bool)

(assert (=> d!11471 (= lt!24228 lt!24227)))

(declare-fun lt!24226 () Unit!1547)

(declare-fun e!39192 () Unit!1547)

(assert (=> d!11471 (= lt!24226 e!39192)))

(declare-fun c!7654 () Bool)

(assert (=> d!11471 (= c!7654 lt!24227)))

(assert (=> d!11471 (= lt!24227 (containsKey!128 (toList!687 (+!80 lt!23888 (tuple2!2015 lt!23902 (zeroValue!1958 newMap!16)))) lt!23895))))

(assert (=> d!11471 (= (contains!678 (+!80 lt!23888 (tuple2!2015 lt!23902 (zeroValue!1958 newMap!16))) lt!23895) lt!24228)))

(declare-fun b!59616 () Bool)

(declare-fun lt!24229 () Unit!1547)

(assert (=> b!59616 (= e!39192 lt!24229)))

(assert (=> b!59616 (= lt!24229 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 (+!80 lt!23888 (tuple2!2015 lt!23902 (zeroValue!1958 newMap!16)))) lt!23895))))

(assert (=> b!59616 (isDefined!77 (getValueByKey!125 (toList!687 (+!80 lt!23888 (tuple2!2015 lt!23902 (zeroValue!1958 newMap!16)))) lt!23895))))

(declare-fun b!59617 () Bool)

(declare-fun Unit!1572 () Unit!1547)

(assert (=> b!59617 (= e!39192 Unit!1572)))

(declare-fun b!59618 () Bool)

(assert (=> b!59618 (= e!39191 (isDefined!77 (getValueByKey!125 (toList!687 (+!80 lt!23888 (tuple2!2015 lt!23902 (zeroValue!1958 newMap!16)))) lt!23895)))))

(assert (= (and d!11471 c!7654) b!59616))

(assert (= (and d!11471 (not c!7654)) b!59617))

(assert (= (and d!11471 (not res!33077)) b!59618))

(declare-fun m!51593 () Bool)

(assert (=> d!11471 m!51593))

(declare-fun m!51595 () Bool)

(assert (=> b!59616 m!51595))

(declare-fun m!51597 () Bool)

(assert (=> b!59616 m!51597))

(assert (=> b!59616 m!51597))

(declare-fun m!51599 () Bool)

(assert (=> b!59616 m!51599))

(assert (=> b!59618 m!51597))

(assert (=> b!59618 m!51597))

(assert (=> b!59618 m!51599))

(assert (=> b!59158 d!11471))

(declare-fun d!11473 () Bool)

(assert (=> d!11473 (= (apply!66 (+!80 lt!23889 (tuple2!2015 lt!23897 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))) lt!23899) (apply!66 lt!23889 lt!23899))))

(declare-fun lt!24230 () Unit!1547)

(assert (=> d!11473 (= lt!24230 (choose!312 lt!23889 lt!23897 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)) lt!23899))))

(declare-fun e!39193 () Bool)

(assert (=> d!11473 e!39193))

(declare-fun res!33078 () Bool)

(assert (=> d!11473 (=> (not res!33078) (not e!39193))))

(assert (=> d!11473 (= res!33078 (contains!678 lt!23889 lt!23899))))

(assert (=> d!11473 (= (addApplyDifferent!42 lt!23889 lt!23897 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)) lt!23899) lt!24230)))

(declare-fun b!59619 () Bool)

(assert (=> b!59619 (= e!39193 (not (= lt!23899 lt!23897)))))

(assert (= (and d!11473 res!33078) b!59619))

(assert (=> d!11473 m!50883))

(declare-fun m!51601 () Bool)

(assert (=> d!11473 m!51601))

(declare-fun m!51603 () Bool)

(assert (=> d!11473 m!51603))

(assert (=> d!11473 m!50885))

(assert (=> d!11473 m!50885))

(assert (=> d!11473 m!50887))

(assert (=> b!59158 d!11473))

(declare-fun d!11475 () Bool)

(assert (=> d!11475 (= (apply!66 lt!23889 lt!23899) (get!1075 (getValueByKey!125 (toList!687 lt!23889) lt!23899)))))

(declare-fun bs!2583 () Bool)

(assert (= bs!2583 d!11475))

(declare-fun m!51605 () Bool)

(assert (=> bs!2583 m!51605))

(assert (=> bs!2583 m!51605))

(declare-fun m!51607 () Bool)

(assert (=> bs!2583 m!51607))

(assert (=> b!59158 d!11475))

(declare-fun d!11477 () Bool)

(declare-fun e!39194 () Bool)

(assert (=> d!11477 e!39194))

(declare-fun res!33079 () Bool)

(assert (=> d!11477 (=> (not res!33079) (not e!39194))))

(declare-fun lt!24233 () ListLongMap!1343)

(assert (=> d!11477 (= res!33079 (contains!678 lt!24233 (_1!1018 (tuple2!2015 lt!23900 (zeroValue!1958 newMap!16)))))))

(declare-fun lt!24234 () List!1423)

(assert (=> d!11477 (= lt!24233 (ListLongMap!1344 lt!24234))))

(declare-fun lt!24232 () Unit!1547)

(declare-fun lt!24231 () Unit!1547)

(assert (=> d!11477 (= lt!24232 lt!24231)))

(assert (=> d!11477 (= (getValueByKey!125 lt!24234 (_1!1018 (tuple2!2015 lt!23900 (zeroValue!1958 newMap!16)))) (Some!130 (_2!1018 (tuple2!2015 lt!23900 (zeroValue!1958 newMap!16)))))))

(assert (=> d!11477 (= lt!24231 (lemmaContainsTupThenGetReturnValue!42 lt!24234 (_1!1018 (tuple2!2015 lt!23900 (zeroValue!1958 newMap!16))) (_2!1018 (tuple2!2015 lt!23900 (zeroValue!1958 newMap!16)))))))

(assert (=> d!11477 (= lt!24234 (insertStrictlySorted!45 (toList!687 lt!23894) (_1!1018 (tuple2!2015 lt!23900 (zeroValue!1958 newMap!16))) (_2!1018 (tuple2!2015 lt!23900 (zeroValue!1958 newMap!16)))))))

(assert (=> d!11477 (= (+!80 lt!23894 (tuple2!2015 lt!23900 (zeroValue!1958 newMap!16))) lt!24233)))

(declare-fun b!59620 () Bool)

(declare-fun res!33080 () Bool)

(assert (=> b!59620 (=> (not res!33080) (not e!39194))))

(assert (=> b!59620 (= res!33080 (= (getValueByKey!125 (toList!687 lt!24233) (_1!1018 (tuple2!2015 lt!23900 (zeroValue!1958 newMap!16)))) (Some!130 (_2!1018 (tuple2!2015 lt!23900 (zeroValue!1958 newMap!16))))))))

(declare-fun b!59621 () Bool)

(assert (=> b!59621 (= e!39194 (contains!680 (toList!687 lt!24233) (tuple2!2015 lt!23900 (zeroValue!1958 newMap!16))))))

(assert (= (and d!11477 res!33079) b!59620))

(assert (= (and b!59620 res!33080) b!59621))

(declare-fun m!51609 () Bool)

(assert (=> d!11477 m!51609))

(declare-fun m!51611 () Bool)

(assert (=> d!11477 m!51611))

(declare-fun m!51613 () Bool)

(assert (=> d!11477 m!51613))

(declare-fun m!51615 () Bool)

(assert (=> d!11477 m!51615))

(declare-fun m!51617 () Bool)

(assert (=> b!59620 m!51617))

(declare-fun m!51619 () Bool)

(assert (=> b!59621 m!51619))

(assert (=> b!59158 d!11477))

(declare-fun d!11479 () Bool)

(assert (=> d!11479 (= (apply!66 (+!80 lt!23894 (tuple2!2015 lt!23900 (zeroValue!1958 newMap!16))) lt!23892) (get!1075 (getValueByKey!125 (toList!687 (+!80 lt!23894 (tuple2!2015 lt!23900 (zeroValue!1958 newMap!16)))) lt!23892)))))

(declare-fun bs!2584 () Bool)

(assert (= bs!2584 d!11479))

(declare-fun m!51621 () Bool)

(assert (=> bs!2584 m!51621))

(assert (=> bs!2584 m!51621))

(declare-fun m!51623 () Bool)

(assert (=> bs!2584 m!51623))

(assert (=> b!59158 d!11479))

(assert (=> b!59301 d!11365))

(declare-fun lt!24235 () Bool)

(declare-fun d!11481 () Bool)

(assert (=> d!11481 (= lt!24235 (select (content!64 (ite c!7500 (Cons!1418 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) Nil!1419) Nil!1419)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun e!39195 () Bool)

(assert (=> d!11481 (= lt!24235 e!39195)))

(declare-fun res!33081 () Bool)

(assert (=> d!11481 (=> (not res!33081) (not e!39195))))

(assert (=> d!11481 (= res!33081 ((_ is Cons!1418) (ite c!7500 (Cons!1418 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) Nil!1419) Nil!1419)))))

(assert (=> d!11481 (= (contains!679 (ite c!7500 (Cons!1418 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) Nil!1419) Nil!1419) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) lt!24235)))

(declare-fun b!59622 () Bool)

(declare-fun e!39196 () Bool)

(assert (=> b!59622 (= e!39195 e!39196)))

(declare-fun res!33082 () Bool)

(assert (=> b!59622 (=> res!33082 e!39196)))

(assert (=> b!59622 (= res!33082 (= (h!1999 (ite c!7500 (Cons!1418 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) Nil!1419) Nil!1419)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!59623 () Bool)

(assert (=> b!59623 (= e!39196 (contains!679 (t!4756 (ite c!7500 (Cons!1418 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) Nil!1419) Nil!1419)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(assert (= (and d!11481 res!33081) b!59622))

(assert (= (and b!59622 (not res!33082)) b!59623))

(declare-fun m!51625 () Bool)

(assert (=> d!11481 m!51625))

(assert (=> d!11481 m!50761))

(declare-fun m!51627 () Bool)

(assert (=> d!11481 m!51627))

(assert (=> b!59623 m!50761))

(declare-fun m!51629 () Bool)

(assert (=> b!59623 m!51629))

(assert (=> b!59110 d!11481))

(declare-fun d!11483 () Bool)

(declare-fun e!39197 () Bool)

(assert (=> d!11483 e!39197))

(declare-fun res!33083 () Bool)

(assert (=> d!11483 (=> (not res!33083) (not e!39197))))

(declare-fun lt!24238 () ListLongMap!1343)

(assert (=> d!11483 (= res!33083 (contains!678 lt!24238 (_1!1018 (ite (or c!7512 c!7514) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))))

(declare-fun lt!24239 () List!1423)

(assert (=> d!11483 (= lt!24238 (ListLongMap!1344 lt!24239))))

(declare-fun lt!24237 () Unit!1547)

(declare-fun lt!24236 () Unit!1547)

(assert (=> d!11483 (= lt!24237 lt!24236)))

(assert (=> d!11483 (= (getValueByKey!125 lt!24239 (_1!1018 (ite (or c!7512 c!7514) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))) (Some!130 (_2!1018 (ite (or c!7512 c!7514) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))))

(assert (=> d!11483 (= lt!24236 (lemmaContainsTupThenGetReturnValue!42 lt!24239 (_1!1018 (ite (or c!7512 c!7514) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))) (_2!1018 (ite (or c!7512 c!7514) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))))

(assert (=> d!11483 (= lt!24239 (insertStrictlySorted!45 (toList!687 (ite c!7512 call!4400 (ite c!7514 call!4398 call!4401))) (_1!1018 (ite (or c!7512 c!7514) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))) (_2!1018 (ite (or c!7512 c!7514) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))))

(assert (=> d!11483 (= (+!80 (ite c!7512 call!4400 (ite c!7514 call!4398 call!4401)) (ite (or c!7512 c!7514) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))) lt!24238)))

(declare-fun b!59624 () Bool)

(declare-fun res!33084 () Bool)

(assert (=> b!59624 (=> (not res!33084) (not e!39197))))

(assert (=> b!59624 (= res!33084 (= (getValueByKey!125 (toList!687 lt!24238) (_1!1018 (ite (or c!7512 c!7514) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))) (Some!130 (_2!1018 (ite (or c!7512 c!7514) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))))

(declare-fun b!59625 () Bool)

(assert (=> b!59625 (= e!39197 (contains!680 (toList!687 lt!24238) (ite (or c!7512 c!7514) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))

(assert (= (and d!11483 res!33083) b!59624))

(assert (= (and b!59624 res!33084) b!59625))

(declare-fun m!51631 () Bool)

(assert (=> d!11483 m!51631))

(declare-fun m!51633 () Bool)

(assert (=> d!11483 m!51633))

(declare-fun m!51635 () Bool)

(assert (=> d!11483 m!51635))

(declare-fun m!51637 () Bool)

(assert (=> d!11483 m!51637))

(declare-fun m!51639 () Bool)

(assert (=> b!59624 m!51639))

(declare-fun m!51641 () Bool)

(assert (=> b!59625 m!51641))

(assert (=> bm!4398 d!11483))

(declare-fun b!59626 () Bool)

(declare-fun e!39201 () Bool)

(declare-fun e!39200 () Bool)

(assert (=> b!59626 (= e!39201 e!39200)))

(declare-fun res!33086 () Bool)

(assert (=> b!59626 (=> (not res!33086) (not e!39200))))

(declare-fun e!39198 () Bool)

(assert (=> b!59626 (= res!33086 (not e!39198))))

(declare-fun res!33085 () Bool)

(assert (=> b!59626 (=> (not res!33085) (not e!39198))))

(assert (=> b!59626 (= res!33085 (validKeyInArray!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!59627 () Bool)

(declare-fun e!39199 () Bool)

(declare-fun call!4483 () Bool)

(assert (=> b!59627 (= e!39199 call!4483)))

(declare-fun b!59628 () Bool)

(assert (=> b!59628 (= e!39199 call!4483)))

(declare-fun d!11485 () Bool)

(declare-fun res!33087 () Bool)

(assert (=> d!11485 (=> res!33087 e!39201)))

(assert (=> d!11485 (= res!33087 (bvsge #b00000000000000000000000000000000 (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992))))))))

(assert (=> d!11485 (= (arrayNoDuplicates!0 (_keys!3666 (v!2382 (underlying!225 thiss!992))) #b00000000000000000000000000000000 Nil!1419) e!39201)))

(declare-fun bm!4480 () Bool)

(declare-fun c!7655 () Bool)

(assert (=> bm!4480 (= call!4483 (arrayNoDuplicates!0 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!7655 (Cons!1418 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) #b00000000000000000000000000000000) Nil!1419) Nil!1419)))))

(declare-fun b!59629 () Bool)

(assert (=> b!59629 (= e!39198 (contains!679 Nil!1419 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!59630 () Bool)

(assert (=> b!59630 (= e!39200 e!39199)))

(assert (=> b!59630 (= c!7655 (validKeyInArray!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) #b00000000000000000000000000000000)))))

(assert (= (and d!11485 (not res!33087)) b!59626))

(assert (= (and b!59626 res!33085) b!59629))

(assert (= (and b!59626 res!33086) b!59630))

(assert (= (and b!59630 c!7655) b!59627))

(assert (= (and b!59630 (not c!7655)) b!59628))

(assert (= (or b!59627 b!59628) bm!4480))

(declare-fun m!51643 () Bool)

(assert (=> b!59626 m!51643))

(assert (=> b!59626 m!51643))

(declare-fun m!51645 () Bool)

(assert (=> b!59626 m!51645))

(assert (=> bm!4480 m!51643))

(declare-fun m!51647 () Bool)

(assert (=> bm!4480 m!51647))

(assert (=> b!59629 m!51643))

(assert (=> b!59629 m!51643))

(declare-fun m!51649 () Bool)

(assert (=> b!59629 m!51649))

(assert (=> b!59630 m!51643))

(assert (=> b!59630 m!51643))

(assert (=> b!59630 m!51645))

(assert (=> b!59032 d!11485))

(assert (=> bm!4414 d!11455))

(declare-fun d!11487 () Bool)

(declare-fun e!39202 () Bool)

(assert (=> d!11487 e!39202))

(declare-fun res!33088 () Bool)

(assert (=> d!11487 (=> res!33088 e!39202)))

(declare-fun lt!24242 () Bool)

(assert (=> d!11487 (= res!33088 (not lt!24242))))

(declare-fun lt!24241 () Bool)

(assert (=> d!11487 (= lt!24242 lt!24241)))

(declare-fun lt!24240 () Unit!1547)

(declare-fun e!39203 () Unit!1547)

(assert (=> d!11487 (= lt!24240 e!39203)))

(declare-fun c!7656 () Bool)

(assert (=> d!11487 (= c!7656 lt!24241)))

(assert (=> d!11487 (= lt!24241 (containsKey!128 (toList!687 lt!23916) (_1!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!11487 (= (contains!678 lt!23916 (_1!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!24242)))

(declare-fun b!59631 () Bool)

(declare-fun lt!24243 () Unit!1547)

(assert (=> b!59631 (= e!39203 lt!24243)))

(assert (=> b!59631 (= lt!24243 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 lt!23916) (_1!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!59631 (isDefined!77 (getValueByKey!125 (toList!687 lt!23916) (_1!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!59632 () Bool)

(declare-fun Unit!1573 () Unit!1547)

(assert (=> b!59632 (= e!39203 Unit!1573)))

(declare-fun b!59633 () Bool)

(assert (=> b!59633 (= e!39202 (isDefined!77 (getValueByKey!125 (toList!687 lt!23916) (_1!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!11487 c!7656) b!59631))

(assert (= (and d!11487 (not c!7656)) b!59632))

(assert (= (and d!11487 (not res!33088)) b!59633))

(declare-fun m!51651 () Bool)

(assert (=> d!11487 m!51651))

(declare-fun m!51653 () Bool)

(assert (=> b!59631 m!51653))

(assert (=> b!59631 m!50911))

(assert (=> b!59631 m!50911))

(declare-fun m!51655 () Bool)

(assert (=> b!59631 m!51655))

(assert (=> b!59633 m!50911))

(assert (=> b!59633 m!50911))

(assert (=> b!59633 m!51655))

(assert (=> d!11277 d!11487))

(declare-fun b!59635 () Bool)

(declare-fun e!39204 () Option!131)

(declare-fun e!39205 () Option!131)

(assert (=> b!59635 (= e!39204 e!39205)))

(declare-fun c!7658 () Bool)

(assert (=> b!59635 (= c!7658 (and ((_ is Cons!1419) lt!23917) (not (= (_1!1018 (h!2000 lt!23917)) (_1!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun b!59634 () Bool)

(assert (=> b!59634 (= e!39204 (Some!130 (_2!1018 (h!2000 lt!23917))))))

(declare-fun c!7657 () Bool)

(declare-fun d!11489 () Bool)

(assert (=> d!11489 (= c!7657 (and ((_ is Cons!1419) lt!23917) (= (_1!1018 (h!2000 lt!23917)) (_1!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!11489 (= (getValueByKey!125 lt!23917 (_1!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!39204)))

(declare-fun b!59637 () Bool)

(assert (=> b!59637 (= e!39205 None!129)))

(declare-fun b!59636 () Bool)

(assert (=> b!59636 (= e!39205 (getValueByKey!125 (t!4757 lt!23917) (_1!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!11489 c!7657) b!59634))

(assert (= (and d!11489 (not c!7657)) b!59635))

(assert (= (and b!59635 c!7658) b!59636))

(assert (= (and b!59635 (not c!7658)) b!59637))

(declare-fun m!51657 () Bool)

(assert (=> b!59636 m!51657))

(assert (=> d!11277 d!11489))

(declare-fun d!11491 () Bool)

(assert (=> d!11491 (= (getValueByKey!125 lt!23917 (_1!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!130 (_2!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!24244 () Unit!1547)

(assert (=> d!11491 (= lt!24244 (choose!318 lt!23917 (_1!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!39206 () Bool)

(assert (=> d!11491 e!39206))

(declare-fun res!33089 () Bool)

(assert (=> d!11491 (=> (not res!33089) (not e!39206))))

(assert (=> d!11491 (= res!33089 (isStrictlySorted!271 lt!23917))))

(assert (=> d!11491 (= (lemmaContainsTupThenGetReturnValue!42 lt!23917 (_1!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!24244)))

(declare-fun b!59638 () Bool)

(declare-fun res!33090 () Bool)

(assert (=> b!59638 (=> (not res!33090) (not e!39206))))

(assert (=> b!59638 (= res!33090 (containsKey!128 lt!23917 (_1!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!59639 () Bool)

(assert (=> b!59639 (= e!39206 (contains!680 lt!23917 (tuple2!2015 (_1!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!11491 res!33089) b!59638))

(assert (= (and b!59638 res!33090) b!59639))

(assert (=> d!11491 m!50905))

(declare-fun m!51659 () Bool)

(assert (=> d!11491 m!51659))

(declare-fun m!51661 () Bool)

(assert (=> d!11491 m!51661))

(declare-fun m!51663 () Bool)

(assert (=> b!59638 m!51663))

(declare-fun m!51665 () Bool)

(assert (=> b!59639 m!51665))

(assert (=> d!11277 d!11491))

(declare-fun b!59640 () Bool)

(declare-fun e!39209 () List!1423)

(declare-fun call!4485 () List!1423)

(assert (=> b!59640 (= e!39209 call!4485)))

(declare-fun lt!24245 () List!1423)

(declare-fun b!59641 () Bool)

(declare-fun e!39211 () Bool)

(assert (=> b!59641 (= e!39211 (contains!680 lt!24245 (tuple2!2015 (_1!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun e!39207 () List!1423)

(declare-fun b!59642 () Bool)

(assert (=> b!59642 (= e!39207 (insertStrictlySorted!45 (t!4757 (toList!687 e!38759)) (_1!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun d!11493 () Bool)

(assert (=> d!11493 e!39211))

(declare-fun res!33091 () Bool)

(assert (=> d!11493 (=> (not res!33091) (not e!39211))))

(assert (=> d!11493 (= res!33091 (isStrictlySorted!271 lt!24245))))

(assert (=> d!11493 (= lt!24245 e!39209)))

(declare-fun c!7659 () Bool)

(assert (=> d!11493 (= c!7659 (and ((_ is Cons!1419) (toList!687 e!38759)) (bvslt (_1!1018 (h!2000 (toList!687 e!38759))) (_1!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!11493 (isStrictlySorted!271 (toList!687 e!38759))))

(assert (=> d!11493 (= (insertStrictlySorted!45 (toList!687 e!38759) (_1!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!24245)))

(declare-fun bm!4481 () Bool)

(declare-fun call!4484 () List!1423)

(declare-fun call!4486 () List!1423)

(assert (=> bm!4481 (= call!4484 call!4486)))

(declare-fun b!59643 () Bool)

(declare-fun e!39210 () List!1423)

(assert (=> b!59643 (= e!39209 e!39210)))

(declare-fun c!7660 () Bool)

(assert (=> b!59643 (= c!7660 (and ((_ is Cons!1419) (toList!687 e!38759)) (= (_1!1018 (h!2000 (toList!687 e!38759))) (_1!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!59644 () Bool)

(declare-fun res!33092 () Bool)

(assert (=> b!59644 (=> (not res!33092) (not e!39211))))

(assert (=> b!59644 (= res!33092 (containsKey!128 lt!24245 (_1!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!59645 () Bool)

(declare-fun e!39208 () List!1423)

(assert (=> b!59645 (= e!39208 call!4484)))

(declare-fun bm!4482 () Bool)

(assert (=> bm!4482 (= call!4485 ($colon$colon!59 e!39207 (ite c!7659 (h!2000 (toList!687 e!38759)) (tuple2!2015 (_1!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun c!7661 () Bool)

(assert (=> bm!4482 (= c!7661 c!7659)))

(declare-fun b!59646 () Bool)

(assert (=> b!59646 (= e!39208 call!4484)))

(declare-fun b!59647 () Bool)

(assert (=> b!59647 (= e!39210 call!4486)))

(declare-fun bm!4483 () Bool)

(assert (=> bm!4483 (= call!4486 call!4485)))

(declare-fun b!59648 () Bool)

(declare-fun c!7662 () Bool)

(assert (=> b!59648 (= c!7662 (and ((_ is Cons!1419) (toList!687 e!38759)) (bvsgt (_1!1018 (h!2000 (toList!687 e!38759))) (_1!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> b!59648 (= e!39210 e!39208)))

(declare-fun b!59649 () Bool)

(assert (=> b!59649 (= e!39207 (ite c!7660 (t!4757 (toList!687 e!38759)) (ite c!7662 (Cons!1419 (h!2000 (toList!687 e!38759)) (t!4757 (toList!687 e!38759))) Nil!1420)))))

(assert (= (and d!11493 c!7659) b!59640))

(assert (= (and d!11493 (not c!7659)) b!59643))

(assert (= (and b!59643 c!7660) b!59647))

(assert (= (and b!59643 (not c!7660)) b!59648))

(assert (= (and b!59648 c!7662) b!59646))

(assert (= (and b!59648 (not c!7662)) b!59645))

(assert (= (or b!59646 b!59645) bm!4481))

(assert (= (or b!59647 bm!4481) bm!4483))

(assert (= (or b!59640 bm!4483) bm!4482))

(assert (= (and bm!4482 c!7661) b!59642))

(assert (= (and bm!4482 (not c!7661)) b!59649))

(assert (= (and d!11493 res!33091) b!59644))

(assert (= (and b!59644 res!33092) b!59641))

(declare-fun m!51667 () Bool)

(assert (=> b!59641 m!51667))

(declare-fun m!51669 () Bool)

(assert (=> b!59642 m!51669))

(declare-fun m!51671 () Bool)

(assert (=> bm!4482 m!51671))

(declare-fun m!51673 () Bool)

(assert (=> b!59644 m!51673))

(declare-fun m!51675 () Bool)

(assert (=> d!11493 m!51675))

(declare-fun m!51677 () Bool)

(assert (=> d!11493 m!51677))

(assert (=> d!11277 d!11493))

(declare-fun d!11495 () Bool)

(assert (=> d!11495 (= (isEmpty!299 (getValueByKey!125 (toList!687 lt!23590) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355))) (not ((_ is Some!130) (getValueByKey!125 (toList!687 lt!23590) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))))

(assert (=> d!11253 d!11495))

(declare-fun d!11497 () Bool)

(declare-fun e!39212 () Bool)

(assert (=> d!11497 e!39212))

(declare-fun res!33093 () Bool)

(assert (=> d!11497 (=> res!33093 e!39212)))

(declare-fun lt!24248 () Bool)

(assert (=> d!11497 (= res!33093 (not lt!24248))))

(declare-fun lt!24247 () Bool)

(assert (=> d!11497 (= lt!24248 lt!24247)))

(declare-fun lt!24246 () Unit!1547)

(declare-fun e!39213 () Unit!1547)

(assert (=> d!11497 (= lt!24246 e!39213)))

(declare-fun c!7663 () Bool)

(assert (=> d!11497 (= c!7663 lt!24247)))

(assert (=> d!11497 (= lt!24247 (containsKey!128 (toList!687 (getCurrentListMap!388 (_keys!3666 newMap!16) lt!23706 (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (select (arr!1772 (_keys!3666 newMap!16)) (index!3008 lt!23716))))))

(assert (=> d!11497 (= (contains!678 (getCurrentListMap!388 (_keys!3666 newMap!16) lt!23706 (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (select (arr!1772 (_keys!3666 newMap!16)) (index!3008 lt!23716))) lt!24248)))

(declare-fun b!59650 () Bool)

(declare-fun lt!24249 () Unit!1547)

(assert (=> b!59650 (= e!39213 lt!24249)))

(assert (=> b!59650 (= lt!24249 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 (getCurrentListMap!388 (_keys!3666 newMap!16) lt!23706 (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (select (arr!1772 (_keys!3666 newMap!16)) (index!3008 lt!23716))))))

(assert (=> b!59650 (isDefined!77 (getValueByKey!125 (toList!687 (getCurrentListMap!388 (_keys!3666 newMap!16) lt!23706 (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (select (arr!1772 (_keys!3666 newMap!16)) (index!3008 lt!23716))))))

(declare-fun b!59651 () Bool)

(declare-fun Unit!1574 () Unit!1547)

(assert (=> b!59651 (= e!39213 Unit!1574)))

(declare-fun b!59652 () Bool)

(assert (=> b!59652 (= e!39212 (isDefined!77 (getValueByKey!125 (toList!687 (getCurrentListMap!388 (_keys!3666 newMap!16) lt!23706 (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (select (arr!1772 (_keys!3666 newMap!16)) (index!3008 lt!23716)))))))

(assert (= (and d!11497 c!7663) b!59650))

(assert (= (and d!11497 (not c!7663)) b!59651))

(assert (= (and d!11497 (not res!33093)) b!59652))

(assert (=> d!11497 m!50539))

(declare-fun m!51679 () Bool)

(assert (=> d!11497 m!51679))

(assert (=> b!59650 m!50539))

(declare-fun m!51681 () Bool)

(assert (=> b!59650 m!51681))

(assert (=> b!59650 m!50539))

(declare-fun m!51683 () Bool)

(assert (=> b!59650 m!51683))

(assert (=> b!59650 m!51683))

(declare-fun m!51685 () Bool)

(assert (=> b!59650 m!51685))

(assert (=> b!59652 m!50539))

(assert (=> b!59652 m!51683))

(assert (=> b!59652 m!51683))

(assert (=> b!59652 m!51685))

(assert (=> b!59242 d!11497))

(declare-fun bm!4484 () Bool)

(declare-fun call!4490 () ListLongMap!1343)

(declare-fun call!4487 () ListLongMap!1343)

(assert (=> bm!4484 (= call!4490 call!4487)))

(declare-fun b!59653 () Bool)

(declare-fun c!7664 () Bool)

(assert (=> b!59653 (= c!7664 (and (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!39218 () ListLongMap!1343)

(declare-fun e!39224 () ListLongMap!1343)

(assert (=> b!59653 (= e!39218 e!39224)))

(declare-fun b!59654 () Bool)

(declare-fun e!39225 () Bool)

(declare-fun call!4488 () Bool)

(assert (=> b!59654 (= e!39225 (not call!4488))))

(declare-fun bm!4485 () Bool)

(declare-fun call!4489 () ListLongMap!1343)

(assert (=> bm!4485 (= call!4489 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) lt!23706 (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun b!59655 () Bool)

(declare-fun e!39216 () Bool)

(declare-fun e!39223 () Bool)

(assert (=> b!59655 (= e!39216 e!39223)))

(declare-fun res!33094 () Bool)

(declare-fun call!4492 () Bool)

(assert (=> b!59655 (= res!33094 call!4492)))

(assert (=> b!59655 (=> (not res!33094) (not e!39223))))

(declare-fun b!59656 () Bool)

(declare-fun e!39219 () Bool)

(declare-fun e!39222 () Bool)

(assert (=> b!59656 (= e!39219 e!39222)))

(declare-fun res!33102 () Bool)

(assert (=> b!59656 (=> (not res!33102) (not e!39222))))

(declare-fun lt!24262 () ListLongMap!1343)

(assert (=> b!59656 (= res!33102 (contains!678 lt!24262 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59656 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(declare-fun b!59657 () Bool)

(declare-fun e!39226 () ListLongMap!1343)

(assert (=> b!59657 (= e!39226 e!39218)))

(declare-fun c!7668 () Bool)

(assert (=> b!59657 (= c!7668 (and (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun d!11499 () Bool)

(declare-fun e!39214 () Bool)

(assert (=> d!11499 e!39214))

(declare-fun res!33098 () Bool)

(assert (=> d!11499 (=> (not res!33098) (not e!39214))))

(assert (=> d!11499 (= res!33098 (or (bvsge #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))))

(declare-fun lt!24270 () ListLongMap!1343)

(assert (=> d!11499 (= lt!24262 lt!24270)))

(declare-fun lt!24252 () Unit!1547)

(declare-fun e!39217 () Unit!1547)

(assert (=> d!11499 (= lt!24252 e!39217)))

(declare-fun c!7669 () Bool)

(declare-fun e!39221 () Bool)

(assert (=> d!11499 (= c!7669 e!39221)))

(declare-fun res!33099 () Bool)

(assert (=> d!11499 (=> (not res!33099) (not e!39221))))

(assert (=> d!11499 (= res!33099 (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(assert (=> d!11499 (= lt!24270 e!39226)))

(declare-fun c!7666 () Bool)

(assert (=> d!11499 (= c!7666 (and (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11499 (validMask!0 (mask!5926 newMap!16))))

(assert (=> d!11499 (= (getCurrentListMap!388 (_keys!3666 newMap!16) lt!23706 (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) lt!24262)))

(declare-fun b!59658 () Bool)

(declare-fun lt!24251 () Unit!1547)

(assert (=> b!59658 (= e!39217 lt!24251)))

(declare-fun lt!24254 () ListLongMap!1343)

(assert (=> b!59658 (= lt!24254 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) lt!23706 (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24268 () (_ BitVec 64))

(assert (=> b!59658 (= lt!24268 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24261 () (_ BitVec 64))

(assert (=> b!59658 (= lt!24261 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24250 () Unit!1547)

(assert (=> b!59658 (= lt!24250 (addStillContains!42 lt!24254 lt!24268 (zeroValue!1958 newMap!16) lt!24261))))

(assert (=> b!59658 (contains!678 (+!80 lt!24254 (tuple2!2015 lt!24268 (zeroValue!1958 newMap!16))) lt!24261)))

(declare-fun lt!24253 () Unit!1547)

(assert (=> b!59658 (= lt!24253 lt!24250)))

(declare-fun lt!24267 () ListLongMap!1343)

(assert (=> b!59658 (= lt!24267 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) lt!23706 (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24256 () (_ BitVec 64))

(assert (=> b!59658 (= lt!24256 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24257 () (_ BitVec 64))

(assert (=> b!59658 (= lt!24257 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24269 () Unit!1547)

(assert (=> b!59658 (= lt!24269 (addApplyDifferent!42 lt!24267 lt!24256 (minValue!1958 newMap!16) lt!24257))))

(assert (=> b!59658 (= (apply!66 (+!80 lt!24267 (tuple2!2015 lt!24256 (minValue!1958 newMap!16))) lt!24257) (apply!66 lt!24267 lt!24257))))

(declare-fun lt!24259 () Unit!1547)

(assert (=> b!59658 (= lt!24259 lt!24269)))

(declare-fun lt!24260 () ListLongMap!1343)

(assert (=> b!59658 (= lt!24260 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) lt!23706 (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24266 () (_ BitVec 64))

(assert (=> b!59658 (= lt!24266 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24258 () (_ BitVec 64))

(assert (=> b!59658 (= lt!24258 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24271 () Unit!1547)

(assert (=> b!59658 (= lt!24271 (addApplyDifferent!42 lt!24260 lt!24266 (zeroValue!1958 newMap!16) lt!24258))))

(assert (=> b!59658 (= (apply!66 (+!80 lt!24260 (tuple2!2015 lt!24266 (zeroValue!1958 newMap!16))) lt!24258) (apply!66 lt!24260 lt!24258))))

(declare-fun lt!24264 () Unit!1547)

(assert (=> b!59658 (= lt!24264 lt!24271)))

(declare-fun lt!24255 () ListLongMap!1343)

(assert (=> b!59658 (= lt!24255 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) lt!23706 (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24263 () (_ BitVec 64))

(assert (=> b!59658 (= lt!24263 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24265 () (_ BitVec 64))

(assert (=> b!59658 (= lt!24265 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!59658 (= lt!24251 (addApplyDifferent!42 lt!24255 lt!24263 (minValue!1958 newMap!16) lt!24265))))

(assert (=> b!59658 (= (apply!66 (+!80 lt!24255 (tuple2!2015 lt!24263 (minValue!1958 newMap!16))) lt!24265) (apply!66 lt!24255 lt!24265))))

(declare-fun b!59659 () Bool)

(assert (=> b!59659 (= e!39224 call!4490)))

(declare-fun b!59660 () Bool)

(declare-fun call!4493 () ListLongMap!1343)

(assert (=> b!59660 (= e!39224 call!4493)))

(declare-fun bm!4486 () Bool)

(assert (=> bm!4486 (= call!4487 call!4489)))

(declare-fun call!4491 () ListLongMap!1343)

(declare-fun bm!4487 () Bool)

(assert (=> bm!4487 (= call!4491 (+!80 (ite c!7666 call!4489 (ite c!7668 call!4487 call!4490)) (ite (or c!7666 c!7668) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))

(declare-fun b!59661 () Bool)

(assert (=> b!59661 (= e!39223 (= (apply!66 lt!24262 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1958 newMap!16)))))

(declare-fun b!59662 () Bool)

(assert (=> b!59662 (= e!39226 (+!80 call!4491 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))

(declare-fun b!59663 () Bool)

(assert (=> b!59663 (= e!39218 call!4493)))

(declare-fun b!59664 () Bool)

(declare-fun res!33096 () Bool)

(assert (=> b!59664 (=> (not res!33096) (not e!39214))))

(assert (=> b!59664 (= res!33096 e!39216)))

(declare-fun c!7665 () Bool)

(assert (=> b!59664 (= c!7665 (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!59665 () Bool)

(assert (=> b!59665 (= e!39222 (= (apply!66 lt!24262 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)) (get!1072 (select (arr!1773 lt!23706) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!59665 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 lt!23706)))))

(assert (=> b!59665 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(declare-fun b!59666 () Bool)

(declare-fun e!39220 () Bool)

(assert (=> b!59666 (= e!39225 e!39220)))

(declare-fun res!33095 () Bool)

(assert (=> b!59666 (= res!33095 call!4488)))

(assert (=> b!59666 (=> (not res!33095) (not e!39220))))

(declare-fun bm!4488 () Bool)

(assert (=> bm!4488 (= call!4493 call!4491)))

(declare-fun b!59667 () Bool)

(assert (=> b!59667 (= e!39216 (not call!4492))))

(declare-fun bm!4489 () Bool)

(assert (=> bm!4489 (= call!4488 (contains!678 lt!24262 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4490 () Bool)

(assert (=> bm!4490 (= call!4492 (contains!678 lt!24262 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59668 () Bool)

(declare-fun e!39215 () Bool)

(assert (=> b!59668 (= e!39215 (validKeyInArray!0 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59669 () Bool)

(declare-fun Unit!1575 () Unit!1547)

(assert (=> b!59669 (= e!39217 Unit!1575)))

(declare-fun b!59670 () Bool)

(assert (=> b!59670 (= e!39214 e!39225)))

(declare-fun c!7667 () Bool)

(assert (=> b!59670 (= c!7667 (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!59671 () Bool)

(assert (=> b!59671 (= e!39220 (= (apply!66 lt!24262 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1958 newMap!16)))))

(declare-fun b!59672 () Bool)

(assert (=> b!59672 (= e!39221 (validKeyInArray!0 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59673 () Bool)

(declare-fun res!33101 () Bool)

(assert (=> b!59673 (=> (not res!33101) (not e!39214))))

(assert (=> b!59673 (= res!33101 e!39219)))

(declare-fun res!33097 () Bool)

(assert (=> b!59673 (=> res!33097 e!39219)))

(assert (=> b!59673 (= res!33097 (not e!39215))))

(declare-fun res!33100 () Bool)

(assert (=> b!59673 (=> (not res!33100) (not e!39215))))

(assert (=> b!59673 (= res!33100 (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(assert (= (and d!11499 c!7666) b!59662))

(assert (= (and d!11499 (not c!7666)) b!59657))

(assert (= (and b!59657 c!7668) b!59663))

(assert (= (and b!59657 (not c!7668)) b!59653))

(assert (= (and b!59653 c!7664) b!59660))

(assert (= (and b!59653 (not c!7664)) b!59659))

(assert (= (or b!59660 b!59659) bm!4484))

(assert (= (or b!59663 bm!4484) bm!4486))

(assert (= (or b!59663 b!59660) bm!4488))

(assert (= (or b!59662 bm!4486) bm!4485))

(assert (= (or b!59662 bm!4488) bm!4487))

(assert (= (and d!11499 res!33099) b!59672))

(assert (= (and d!11499 c!7669) b!59658))

(assert (= (and d!11499 (not c!7669)) b!59669))

(assert (= (and d!11499 res!33098) b!59673))

(assert (= (and b!59673 res!33100) b!59668))

(assert (= (and b!59673 (not res!33097)) b!59656))

(assert (= (and b!59656 res!33102) b!59665))

(assert (= (and b!59673 res!33101) b!59664))

(assert (= (and b!59664 c!7665) b!59655))

(assert (= (and b!59664 (not c!7665)) b!59667))

(assert (= (and b!59655 res!33094) b!59661))

(assert (= (or b!59655 b!59667) bm!4490))

(assert (= (and b!59664 res!33096) b!59670))

(assert (= (and b!59670 c!7667) b!59666))

(assert (= (and b!59670 (not c!7667)) b!59654))

(assert (= (and b!59666 res!33095) b!59671))

(assert (= (or b!59666 b!59654) bm!4489))

(declare-fun b_lambda!2623 () Bool)

(assert (=> (not b_lambda!2623) (not b!59665)))

(assert (=> b!59665 t!4767))

(declare-fun b_and!3613 () Bool)

(assert (= b_and!3609 (and (=> t!4767 result!2381) b_and!3613)))

(assert (=> b!59665 t!4769))

(declare-fun b_and!3615 () Bool)

(assert (= b_and!3611 (and (=> t!4769 result!2383) b_and!3615)))

(declare-fun m!51687 () Bool)

(assert (=> b!59661 m!51687))

(assert (=> b!59672 m!50693))

(assert (=> b!59672 m!50693))

(assert (=> b!59672 m!50695))

(declare-fun m!51689 () Bool)

(assert (=> b!59662 m!51689))

(assert (=> b!59656 m!50693))

(assert (=> b!59656 m!50693))

(declare-fun m!51691 () Bool)

(assert (=> b!59656 m!51691))

(declare-fun m!51693 () Bool)

(assert (=> bm!4490 m!51693))

(declare-fun m!51695 () Bool)

(assert (=> b!59671 m!51695))

(declare-fun m!51697 () Bool)

(assert (=> bm!4489 m!51697))

(assert (=> b!59665 m!50707))

(declare-fun m!51699 () Bool)

(assert (=> b!59665 m!51699))

(assert (=> b!59665 m!50693))

(assert (=> b!59665 m!50693))

(declare-fun m!51701 () Bool)

(assert (=> b!59665 m!51701))

(assert (=> b!59665 m!51699))

(assert (=> b!59665 m!50707))

(declare-fun m!51703 () Bool)

(assert (=> b!59665 m!51703))

(declare-fun m!51705 () Bool)

(assert (=> bm!4487 m!51705))

(assert (=> d!11499 m!50667))

(assert (=> b!59668 m!50693))

(assert (=> b!59668 m!50693))

(assert (=> b!59668 m!50695))

(declare-fun m!51707 () Bool)

(assert (=> bm!4485 m!51707))

(declare-fun m!51709 () Bool)

(assert (=> b!59658 m!51709))

(declare-fun m!51711 () Bool)

(assert (=> b!59658 m!51711))

(declare-fun m!51713 () Bool)

(assert (=> b!59658 m!51713))

(assert (=> b!59658 m!50693))

(declare-fun m!51715 () Bool)

(assert (=> b!59658 m!51715))

(declare-fun m!51717 () Bool)

(assert (=> b!59658 m!51717))

(declare-fun m!51719 () Bool)

(assert (=> b!59658 m!51719))

(declare-fun m!51721 () Bool)

(assert (=> b!59658 m!51721))

(declare-fun m!51723 () Bool)

(assert (=> b!59658 m!51723))

(declare-fun m!51725 () Bool)

(assert (=> b!59658 m!51725))

(declare-fun m!51727 () Bool)

(assert (=> b!59658 m!51727))

(assert (=> b!59658 m!51709))

(declare-fun m!51729 () Bool)

(assert (=> b!59658 m!51729))

(declare-fun m!51731 () Bool)

(assert (=> b!59658 m!51731))

(declare-fun m!51733 () Bool)

(assert (=> b!59658 m!51733))

(assert (=> b!59658 m!51731))

(declare-fun m!51735 () Bool)

(assert (=> b!59658 m!51735))

(declare-fun m!51737 () Bool)

(assert (=> b!59658 m!51737))

(assert (=> b!59658 m!51707))

(assert (=> b!59658 m!51721))

(assert (=> b!59658 m!51715))

(assert (=> b!59242 d!11499))

(declare-fun b!59674 () Bool)

(declare-fun e!39228 () (_ BitVec 32))

(declare-fun call!4494 () (_ BitVec 32))

(assert (=> b!59674 (= e!39228 (bvadd #b00000000000000000000000000000001 call!4494))))

(declare-fun b!59675 () Bool)

(declare-fun e!39227 () (_ BitVec 32))

(assert (=> b!59675 (= e!39227 e!39228)))

(declare-fun c!7670 () Bool)

(assert (=> b!59675 (= c!7670 (validKeyInArray!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!59676 () Bool)

(assert (=> b!59676 (= e!39228 call!4494)))

(declare-fun bm!4491 () Bool)

(assert (=> bm!4491 (= call!4494 (arrayCountValidKeys!0 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992))))))))

(declare-fun d!11501 () Bool)

(declare-fun lt!24272 () (_ BitVec 32))

(assert (=> d!11501 (and (bvsge lt!24272 #b00000000000000000000000000000000) (bvsle lt!24272 (bvsub (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) #b00000000000000000000000000000000)))))

(assert (=> d!11501 (= lt!24272 e!39227)))

(declare-fun c!7671 () Bool)

(assert (=> d!11501 (= c!7671 (bvsge #b00000000000000000000000000000000 (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992))))))))

(assert (=> d!11501 (and (bvsle #b00000000000000000000000000000000 (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992))))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992))))))))

(assert (=> d!11501 (= (arrayCountValidKeys!0 (_keys!3666 (v!2382 (underlying!225 thiss!992))) #b00000000000000000000000000000000 (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992))))) lt!24272)))

(declare-fun b!59677 () Bool)

(assert (=> b!59677 (= e!39227 #b00000000000000000000000000000000)))

(assert (= (and d!11501 c!7671) b!59677))

(assert (= (and d!11501 (not c!7671)) b!59675))

(assert (= (and b!59675 c!7670) b!59674))

(assert (= (and b!59675 (not c!7670)) b!59676))

(assert (= (or b!59674 b!59676) bm!4491))

(assert (=> b!59675 m!51643))

(assert (=> b!59675 m!51643))

(assert (=> b!59675 m!51645))

(declare-fun m!51739 () Bool)

(assert (=> bm!4491 m!51739))

(assert (=> b!59030 d!11501))

(declare-fun d!11503 () Bool)

(declare-fun e!39229 () Bool)

(assert (=> d!11503 e!39229))

(declare-fun res!33103 () Bool)

(assert (=> d!11503 (=> (not res!33103) (not e!39229))))

(declare-fun lt!24275 () ListLongMap!1343)

(assert (=> d!11503 (= res!33103 (contains!678 lt!24275 (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))

(declare-fun lt!24276 () List!1423)

(assert (=> d!11503 (= lt!24275 (ListLongMap!1344 lt!24276))))

(declare-fun lt!24274 () Unit!1547)

(declare-fun lt!24273 () Unit!1547)

(assert (=> d!11503 (= lt!24274 lt!24273)))

(assert (=> d!11503 (= (getValueByKey!125 lt!24276 (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))) (Some!130 (_2!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))

(assert (=> d!11503 (= lt!24273 (lemmaContainsTupThenGetReturnValue!42 lt!24276 (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))) (_2!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))

(assert (=> d!11503 (= lt!24276 (insertStrictlySorted!45 (toList!687 call!4410) (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))) (_2!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))

(assert (=> d!11503 (= (+!80 call!4410 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))) lt!24275)))

(declare-fun b!59678 () Bool)

(declare-fun res!33104 () Bool)

(assert (=> b!59678 (=> (not res!33104) (not e!39229))))

(assert (=> b!59678 (= res!33104 (= (getValueByKey!125 (toList!687 lt!24275) (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))) (Some!130 (_2!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))))

(declare-fun b!59679 () Bool)

(assert (=> b!59679 (= e!39229 (contains!680 (toList!687 lt!24275) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))

(assert (= (and d!11503 res!33103) b!59678))

(assert (= (and b!59678 res!33104) b!59679))

(declare-fun m!51741 () Bool)

(assert (=> d!11503 m!51741))

(declare-fun m!51743 () Bool)

(assert (=> d!11503 m!51743))

(declare-fun m!51745 () Bool)

(assert (=> d!11503 m!51745))

(declare-fun m!51747 () Bool)

(assert (=> d!11503 m!51747))

(declare-fun m!51749 () Bool)

(assert (=> b!59678 m!51749))

(declare-fun m!51751 () Bool)

(assert (=> b!59679 m!51751))

(assert (=> b!59121 d!11503))

(assert (=> b!59168 d!11365))

(declare-fun d!11505 () Bool)

(declare-fun e!39230 () Bool)

(assert (=> d!11505 e!39230))

(declare-fun res!33105 () Bool)

(assert (=> d!11505 (=> res!33105 e!39230)))

(declare-fun lt!24279 () Bool)

(assert (=> d!11505 (= res!33105 (not lt!24279))))

(declare-fun lt!24278 () Bool)

(assert (=> d!11505 (= lt!24279 lt!24278)))

(declare-fun lt!24277 () Unit!1547)

(declare-fun e!39231 () Unit!1547)

(assert (=> d!11505 (= lt!24277 e!39231)))

(declare-fun c!7672 () Bool)

(assert (=> d!11505 (= c!7672 lt!24278)))

(assert (=> d!11505 (= lt!24278 (containsKey!128 (toList!687 lt!23776) lt!23786))))

(assert (=> d!11505 (= (contains!678 lt!23776 lt!23786) lt!24279)))

(declare-fun b!59680 () Bool)

(declare-fun lt!24280 () Unit!1547)

(assert (=> b!59680 (= e!39231 lt!24280)))

(assert (=> b!59680 (= lt!24280 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 lt!23776) lt!23786))))

(assert (=> b!59680 (isDefined!77 (getValueByKey!125 (toList!687 lt!23776) lt!23786))))

(declare-fun b!59681 () Bool)

(declare-fun Unit!1576 () Unit!1547)

(assert (=> b!59681 (= e!39231 Unit!1576)))

(declare-fun b!59682 () Bool)

(assert (=> b!59682 (= e!39230 (isDefined!77 (getValueByKey!125 (toList!687 lt!23776) lt!23786)))))

(assert (= (and d!11505 c!7672) b!59680))

(assert (= (and d!11505 (not c!7672)) b!59681))

(assert (= (and d!11505 (not res!33105)) b!59682))

(declare-fun m!51753 () Bool)

(assert (=> d!11505 m!51753))

(declare-fun m!51755 () Bool)

(assert (=> b!59680 m!51755))

(assert (=> b!59680 m!51041))

(assert (=> b!59680 m!51041))

(declare-fun m!51757 () Bool)

(assert (=> b!59680 m!51757))

(assert (=> b!59682 m!51041))

(assert (=> b!59682 m!51041))

(assert (=> b!59682 m!51757))

(assert (=> d!11291 d!11505))

(assert (=> d!11291 d!11297))

(assert (=> d!11291 d!11319))

(declare-fun d!11507 () Bool)

(assert (=> d!11507 (= (apply!66 (+!80 lt!23776 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) lt!23786) (apply!66 lt!23776 lt!23786))))

(assert (=> d!11507 true))

(declare-fun _$34!762 () Unit!1547)

(assert (=> d!11507 (= (choose!312 lt!23776 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992))) lt!23786) _$34!762)))

(declare-fun bs!2585 () Bool)

(assert (= bs!2585 d!11507))

(assert (=> bs!2585 m!50609))

(assert (=> bs!2585 m!50609))

(assert (=> bs!2585 m!50611))

(assert (=> bs!2585 m!50607))

(assert (=> d!11291 d!11507))

(assert (=> d!11291 d!11303))

(declare-fun d!11509 () Bool)

(assert (=> d!11509 (contains!678 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355))))

(declare-fun lt!24283 () Unit!1547)

(declare-fun choose!319 (array!3703 array!3705 (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 (_ BitVec 64) (_ BitVec 32) Int) Unit!1547)

(assert (=> d!11509 (= lt!24283 (choose!319 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(assert (=> d!11509 (validMask!0 (mask!5926 newMap!16))))

(assert (=> d!11509 (= (lemmaArrayContainsKeyThenInListMap!5 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) lt!24283)))

(declare-fun bs!2586 () Bool)

(assert (= bs!2586 d!11509))

(assert (=> bs!2586 m!50509))

(assert (=> bs!2586 m!50509))

(assert (=> bs!2586 m!50367))

(assert (=> bs!2586 m!50553))

(assert (=> bs!2586 m!50367))

(declare-fun m!51759 () Bool)

(assert (=> bs!2586 m!51759))

(assert (=> bs!2586 m!50667))

(assert (=> b!59344 d!11509))

(assert (=> b!59344 d!11325))

(assert (=> b!59344 d!11247))

(declare-fun d!11511 () Bool)

(declare-fun lt!24284 () Bool)

(assert (=> d!11511 (= lt!24284 (select (content!65 (toList!687 lt!24003)) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!39233 () Bool)

(assert (=> d!11511 (= lt!24284 e!39233)))

(declare-fun res!33107 () Bool)

(assert (=> d!11511 (=> (not res!33107) (not e!39233))))

(assert (=> d!11511 (= res!33107 ((_ is Cons!1419) (toList!687 lt!24003)))))

(assert (=> d!11511 (= (contains!680 (toList!687 lt!24003) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!24284)))

(declare-fun b!59684 () Bool)

(declare-fun e!39232 () Bool)

(assert (=> b!59684 (= e!39233 e!39232)))

(declare-fun res!33106 () Bool)

(assert (=> b!59684 (=> res!33106 e!39232)))

(assert (=> b!59684 (= res!33106 (= (h!2000 (toList!687 lt!24003)) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!59685 () Bool)

(assert (=> b!59685 (= e!39232 (contains!680 (t!4757 (toList!687 lt!24003)) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!11511 res!33107) b!59684))

(assert (= (and b!59684 (not res!33106)) b!59685))

(declare-fun m!51761 () Bool)

(assert (=> d!11511 m!51761))

(declare-fun m!51763 () Bool)

(assert (=> d!11511 m!51763))

(declare-fun m!51765 () Bool)

(assert (=> b!59685 m!51765))

(assert (=> b!59303 d!11511))

(assert (=> d!11257 d!11363))

(assert (=> d!11247 d!11363))

(declare-fun d!11513 () Bool)

(declare-fun e!39236 () Bool)

(assert (=> d!11513 e!39236))

(declare-fun res!33110 () Bool)

(assert (=> d!11513 (=> (not res!33110) (not e!39236))))

(assert (=> d!11513 (= res!33110 (and (bvsge (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) #b00000000000000000000000000000000) (bvslt (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (size!2002 (_keys!3666 newMap!16)))))))

(declare-fun lt!24287 () Unit!1547)

(declare-fun choose!102 ((_ BitVec 64) array!3703 (_ BitVec 32) (_ BitVec 32)) Unit!1547)

(assert (=> d!11513 (= lt!24287 (choose!102 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (_keys!3666 newMap!16) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (mask!5926 newMap!16)))))

(assert (=> d!11513 (validMask!0 (mask!5926 newMap!16))))

(assert (=> d!11513 (= (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (_keys!3666 newMap!16) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (mask!5926 newMap!16)) lt!24287)))

(declare-fun b!59688 () Bool)

(assert (=> b!59688 (= e!39236 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16))) (mask!5926 newMap!16)))))

(assert (= (and d!11513 res!33110) b!59688))

(assert (=> d!11513 m!50367))

(declare-fun m!51767 () Bool)

(assert (=> d!11513 m!51767))

(assert (=> d!11513 m!50667))

(assert (=> b!59688 m!51137))

(assert (=> b!59688 m!51151))

(assert (=> d!11345 d!11513))

(assert (=> d!11345 d!11325))

(declare-fun d!11515 () Bool)

(declare-fun e!39237 () Bool)

(assert (=> d!11515 e!39237))

(declare-fun res!33111 () Bool)

(assert (=> d!11515 (=> res!33111 e!39237)))

(declare-fun lt!24290 () Bool)

(assert (=> d!11515 (= res!33111 (not lt!24290))))

(declare-fun lt!24289 () Bool)

(assert (=> d!11515 (= lt!24290 lt!24289)))

(declare-fun lt!24288 () Unit!1547)

(declare-fun e!39238 () Unit!1547)

(assert (=> d!11515 (= lt!24288 e!39238)))

(declare-fun c!7673 () Bool)

(assert (=> d!11515 (= c!7673 lt!24289)))

(assert (=> d!11515 (= lt!24289 (containsKey!128 (toList!687 (getCurrentListMap!388 lt!24076 lt!24079 (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (select (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)))))))

(assert (=> d!11515 (= (contains!678 (getCurrentListMap!388 lt!24076 lt!24079 (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (select (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)))) lt!24290)))

(declare-fun b!59689 () Bool)

(declare-fun lt!24291 () Unit!1547)

(assert (=> b!59689 (= e!39238 lt!24291)))

(assert (=> b!59689 (= lt!24291 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 (getCurrentListMap!388 lt!24076 lt!24079 (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (select (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)))))))

(assert (=> b!59689 (isDefined!77 (getValueByKey!125 (toList!687 (getCurrentListMap!388 lt!24076 lt!24079 (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (select (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)))))))

(declare-fun b!59690 () Bool)

(declare-fun Unit!1577 () Unit!1547)

(assert (=> b!59690 (= e!39238 Unit!1577)))

(declare-fun b!59691 () Bool)

(assert (=> b!59691 (= e!39237 (isDefined!77 (getValueByKey!125 (toList!687 (getCurrentListMap!388 lt!24076 lt!24079 (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (select (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716))))))))

(assert (= (and d!11515 c!7673) b!59689))

(assert (= (and d!11515 (not c!7673)) b!59690))

(assert (= (and d!11515 (not res!33111)) b!59691))

(assert (=> d!11515 m!51143))

(declare-fun m!51769 () Bool)

(assert (=> d!11515 m!51769))

(assert (=> b!59689 m!51143))

(declare-fun m!51771 () Bool)

(assert (=> b!59689 m!51771))

(assert (=> b!59689 m!51143))

(declare-fun m!51773 () Bool)

(assert (=> b!59689 m!51773))

(assert (=> b!59689 m!51773))

(declare-fun m!51775 () Bool)

(assert (=> b!59689 m!51775))

(assert (=> b!59691 m!51143))

(assert (=> b!59691 m!51773))

(assert (=> b!59691 m!51773))

(assert (=> b!59691 m!51775))

(assert (=> d!11345 d!11515))

(assert (=> d!11345 d!11249))

(assert (=> d!11345 d!11337))

(declare-fun d!11517 () Bool)

(declare-fun e!39241 () Bool)

(assert (=> d!11517 e!39241))

(declare-fun res!33114 () Bool)

(assert (=> d!11517 (=> (not res!33114) (not e!39241))))

(assert (=> d!11517 (= res!33114 (and (bvsge (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) #b00000000000000000000000000000000) (bvslt (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (size!2002 (_keys!3666 newMap!16))) (bvslt (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (size!2003 (_values!2025 newMap!16)))))))

(declare-fun lt!24294 () Unit!1547)

(declare-fun choose!320 (array!3703 array!3705 (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 (_ BitVec 32) (_ BitVec 64) V!2841 Int) Unit!1547)

(assert (=> d!11517 (= lt!24294 (choose!320 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2042 newMap!16)))))

(assert (=> d!11517 (validMask!0 (mask!5926 newMap!16))))

(assert (=> d!11517 (= (lemmaAddValidKeyToArrayThenAddPairToListMap!5 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2042 newMap!16)) lt!24294)))

(declare-fun b!59694 () Bool)

(assert (=> b!59694 (= e!39241 (= (+!80 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!388 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16))) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16))) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))))))

(assert (= (and d!11517 res!33114) b!59694))

(assert (=> d!11517 m!50367))

(assert (=> d!11517 m!50395))

(declare-fun m!51777 () Bool)

(assert (=> d!11517 m!51777))

(assert (=> d!11517 m!50667))

(assert (=> b!59694 m!50509))

(assert (=> b!59694 m!51053))

(assert (=> b!59694 m!50509))

(assert (=> b!59694 m!51137))

(assert (=> b!59694 m!51167))

(assert (=> b!59694 m!51145))

(assert (=> d!11345 d!11517))

(declare-fun bm!4492 () Bool)

(declare-fun call!4498 () ListLongMap!1343)

(declare-fun call!4495 () ListLongMap!1343)

(assert (=> bm!4492 (= call!4498 call!4495)))

(declare-fun b!59695 () Bool)

(declare-fun c!7674 () Bool)

(assert (=> b!59695 (= c!7674 (and (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!39246 () ListLongMap!1343)

(declare-fun e!39252 () ListLongMap!1343)

(assert (=> b!59695 (= e!39246 e!39252)))

(declare-fun b!59696 () Bool)

(declare-fun e!39253 () Bool)

(declare-fun call!4496 () Bool)

(assert (=> b!59696 (= e!39253 (not call!4496))))

(declare-fun bm!4493 () Bool)

(declare-fun call!4497 () ListLongMap!1343)

(assert (=> bm!4493 (= call!4497 (getCurrentListMapNoExtraKeys!44 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16))) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16))) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun b!59697 () Bool)

(declare-fun e!39244 () Bool)

(declare-fun e!39251 () Bool)

(assert (=> b!59697 (= e!39244 e!39251)))

(declare-fun res!33115 () Bool)

(declare-fun call!4500 () Bool)

(assert (=> b!59697 (= res!33115 call!4500)))

(assert (=> b!59697 (=> (not res!33115) (not e!39251))))

(declare-fun b!59698 () Bool)

(declare-fun e!39247 () Bool)

(declare-fun e!39250 () Bool)

(assert (=> b!59698 (= e!39247 e!39250)))

(declare-fun res!33123 () Bool)

(assert (=> b!59698 (=> (not res!33123) (not e!39250))))

(declare-fun lt!24307 () ListLongMap!1343)

(assert (=> b!59698 (= res!33123 (contains!678 lt!24307 (select (arr!1772 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> b!59698 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2002 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16))))))))

(declare-fun b!59699 () Bool)

(declare-fun e!39254 () ListLongMap!1343)

(assert (=> b!59699 (= e!39254 e!39246)))

(declare-fun c!7678 () Bool)

(assert (=> b!59699 (= c!7678 (and (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun d!11519 () Bool)

(declare-fun e!39242 () Bool)

(assert (=> d!11519 e!39242))

(declare-fun res!33119 () Bool)

(assert (=> d!11519 (=> (not res!33119) (not e!39242))))

(assert (=> d!11519 (= res!33119 (or (bvsge #b00000000000000000000000000000000 (size!2002 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16))))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2002 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16))))))))))

(declare-fun lt!24315 () ListLongMap!1343)

(assert (=> d!11519 (= lt!24307 lt!24315)))

(declare-fun lt!24297 () Unit!1547)

(declare-fun e!39245 () Unit!1547)

(assert (=> d!11519 (= lt!24297 e!39245)))

(declare-fun c!7679 () Bool)

(declare-fun e!39249 () Bool)

(assert (=> d!11519 (= c!7679 e!39249)))

(declare-fun res!33120 () Bool)

(assert (=> d!11519 (=> (not res!33120) (not e!39249))))

(assert (=> d!11519 (= res!33120 (bvslt #b00000000000000000000000000000000 (size!2002 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16))))))))

(assert (=> d!11519 (= lt!24315 e!39254)))

(declare-fun c!7676 () Bool)

(assert (=> d!11519 (= c!7676 (and (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11519 (validMask!0 (mask!5926 newMap!16))))

(assert (=> d!11519 (= (getCurrentListMap!388 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16))) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16))) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) lt!24307)))

(declare-fun b!59700 () Bool)

(declare-fun lt!24296 () Unit!1547)

(assert (=> b!59700 (= e!39245 lt!24296)))

(declare-fun lt!24299 () ListLongMap!1343)

(assert (=> b!59700 (= lt!24299 (getCurrentListMapNoExtraKeys!44 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16))) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16))) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24313 () (_ BitVec 64))

(assert (=> b!59700 (= lt!24313 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24306 () (_ BitVec 64))

(assert (=> b!59700 (= lt!24306 (select (arr!1772 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!24295 () Unit!1547)

(assert (=> b!59700 (= lt!24295 (addStillContains!42 lt!24299 lt!24313 (zeroValue!1958 newMap!16) lt!24306))))

(assert (=> b!59700 (contains!678 (+!80 lt!24299 (tuple2!2015 lt!24313 (zeroValue!1958 newMap!16))) lt!24306)))

(declare-fun lt!24298 () Unit!1547)

(assert (=> b!59700 (= lt!24298 lt!24295)))

(declare-fun lt!24312 () ListLongMap!1343)

(assert (=> b!59700 (= lt!24312 (getCurrentListMapNoExtraKeys!44 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16))) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16))) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24301 () (_ BitVec 64))

(assert (=> b!59700 (= lt!24301 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24302 () (_ BitVec 64))

(assert (=> b!59700 (= lt!24302 (select (arr!1772 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!24314 () Unit!1547)

(assert (=> b!59700 (= lt!24314 (addApplyDifferent!42 lt!24312 lt!24301 (minValue!1958 newMap!16) lt!24302))))

(assert (=> b!59700 (= (apply!66 (+!80 lt!24312 (tuple2!2015 lt!24301 (minValue!1958 newMap!16))) lt!24302) (apply!66 lt!24312 lt!24302))))

(declare-fun lt!24304 () Unit!1547)

(assert (=> b!59700 (= lt!24304 lt!24314)))

(declare-fun lt!24305 () ListLongMap!1343)

(assert (=> b!59700 (= lt!24305 (getCurrentListMapNoExtraKeys!44 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16))) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16))) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24311 () (_ BitVec 64))

(assert (=> b!59700 (= lt!24311 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24303 () (_ BitVec 64))

(assert (=> b!59700 (= lt!24303 (select (arr!1772 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!24316 () Unit!1547)

(assert (=> b!59700 (= lt!24316 (addApplyDifferent!42 lt!24305 lt!24311 (zeroValue!1958 newMap!16) lt!24303))))

(assert (=> b!59700 (= (apply!66 (+!80 lt!24305 (tuple2!2015 lt!24311 (zeroValue!1958 newMap!16))) lt!24303) (apply!66 lt!24305 lt!24303))))

(declare-fun lt!24309 () Unit!1547)

(assert (=> b!59700 (= lt!24309 lt!24316)))

(declare-fun lt!24300 () ListLongMap!1343)

(assert (=> b!59700 (= lt!24300 (getCurrentListMapNoExtraKeys!44 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16))) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16))) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24308 () (_ BitVec 64))

(assert (=> b!59700 (= lt!24308 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24310 () (_ BitVec 64))

(assert (=> b!59700 (= lt!24310 (select (arr!1772 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16)))) #b00000000000000000000000000000000))))

(assert (=> b!59700 (= lt!24296 (addApplyDifferent!42 lt!24300 lt!24308 (minValue!1958 newMap!16) lt!24310))))

(assert (=> b!59700 (= (apply!66 (+!80 lt!24300 (tuple2!2015 lt!24308 (minValue!1958 newMap!16))) lt!24310) (apply!66 lt!24300 lt!24310))))

(declare-fun b!59701 () Bool)

(assert (=> b!59701 (= e!39252 call!4498)))

(declare-fun b!59702 () Bool)

(declare-fun call!4501 () ListLongMap!1343)

(assert (=> b!59702 (= e!39252 call!4501)))

(declare-fun bm!4494 () Bool)

(assert (=> bm!4494 (= call!4495 call!4497)))

(declare-fun call!4499 () ListLongMap!1343)

(declare-fun bm!4495 () Bool)

(assert (=> bm!4495 (= call!4499 (+!80 (ite c!7676 call!4497 (ite c!7678 call!4495 call!4498)) (ite (or c!7676 c!7678) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))

(declare-fun b!59703 () Bool)

(assert (=> b!59703 (= e!39251 (= (apply!66 lt!24307 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1958 newMap!16)))))

(declare-fun b!59704 () Bool)

(assert (=> b!59704 (= e!39254 (+!80 call!4499 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))

(declare-fun b!59705 () Bool)

(assert (=> b!59705 (= e!39246 call!4501)))

(declare-fun b!59706 () Bool)

(declare-fun res!33117 () Bool)

(assert (=> b!59706 (=> (not res!33117) (not e!39242))))

(assert (=> b!59706 (= res!33117 e!39244)))

(declare-fun c!7675 () Bool)

(assert (=> b!59706 (= c!7675 (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!59707 () Bool)

(assert (=> b!59707 (= e!39250 (= (apply!66 lt!24307 (select (arr!1772 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16)))) #b00000000000000000000000000000000)) (get!1072 (select (arr!1773 (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!59707 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16))))))))

(assert (=> b!59707 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2002 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16))))))))

(declare-fun b!59708 () Bool)

(declare-fun e!39248 () Bool)

(assert (=> b!59708 (= e!39253 e!39248)))

(declare-fun res!33116 () Bool)

(assert (=> b!59708 (= res!33116 call!4496)))

(assert (=> b!59708 (=> (not res!33116) (not e!39248))))

(declare-fun bm!4496 () Bool)

(assert (=> bm!4496 (= call!4501 call!4499)))

(declare-fun b!59709 () Bool)

(assert (=> b!59709 (= e!39244 (not call!4500))))

(declare-fun bm!4497 () Bool)

(assert (=> bm!4497 (= call!4496 (contains!678 lt!24307 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4498 () Bool)

(assert (=> bm!4498 (= call!4500 (contains!678 lt!24307 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!39243 () Bool)

(declare-fun b!59710 () Bool)

(assert (=> b!59710 (= e!39243 (validKeyInArray!0 (select (arr!1772 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!59711 () Bool)

(declare-fun Unit!1578 () Unit!1547)

(assert (=> b!59711 (= e!39245 Unit!1578)))

(declare-fun b!59712 () Bool)

(assert (=> b!59712 (= e!39242 e!39253)))

(declare-fun c!7677 () Bool)

(assert (=> b!59712 (= c!7677 (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!59713 () Bool)

(assert (=> b!59713 (= e!39248 (= (apply!66 lt!24307 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1958 newMap!16)))))

(declare-fun b!59714 () Bool)

(assert (=> b!59714 (= e!39249 (validKeyInArray!0 (select (arr!1772 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!59715 () Bool)

(declare-fun res!33122 () Bool)

(assert (=> b!59715 (=> (not res!33122) (not e!39242))))

(assert (=> b!59715 (= res!33122 e!39247)))

(declare-fun res!33118 () Bool)

(assert (=> b!59715 (=> res!33118 e!39247)))

(assert (=> b!59715 (= res!33118 (not e!39243))))

(declare-fun res!33121 () Bool)

(assert (=> b!59715 (=> (not res!33121) (not e!39243))))

(assert (=> b!59715 (= res!33121 (bvslt #b00000000000000000000000000000000 (size!2002 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16))))))))

(assert (= (and d!11519 c!7676) b!59704))

(assert (= (and d!11519 (not c!7676)) b!59699))

(assert (= (and b!59699 c!7678) b!59705))

(assert (= (and b!59699 (not c!7678)) b!59695))

(assert (= (and b!59695 c!7674) b!59702))

(assert (= (and b!59695 (not c!7674)) b!59701))

(assert (= (or b!59702 b!59701) bm!4492))

(assert (= (or b!59705 bm!4492) bm!4494))

(assert (= (or b!59705 b!59702) bm!4496))

(assert (= (or b!59704 bm!4494) bm!4493))

(assert (= (or b!59704 bm!4496) bm!4495))

(assert (= (and d!11519 res!33120) b!59714))

(assert (= (and d!11519 c!7679) b!59700))

(assert (= (and d!11519 (not c!7679)) b!59711))

(assert (= (and d!11519 res!33119) b!59715))

(assert (= (and b!59715 res!33121) b!59710))

(assert (= (and b!59715 (not res!33118)) b!59698))

(assert (= (and b!59698 res!33123) b!59707))

(assert (= (and b!59715 res!33122) b!59706))

(assert (= (and b!59706 c!7675) b!59697))

(assert (= (and b!59706 (not c!7675)) b!59709))

(assert (= (and b!59697 res!33115) b!59703))

(assert (= (or b!59697 b!59709) bm!4498))

(assert (= (and b!59706 res!33117) b!59712))

(assert (= (and b!59712 c!7677) b!59708))

(assert (= (and b!59712 (not c!7677)) b!59696))

(assert (= (and b!59708 res!33116) b!59713))

(assert (= (or b!59708 b!59696) bm!4497))

(declare-fun b_lambda!2625 () Bool)

(assert (=> (not b_lambda!2625) (not b!59707)))

(assert (=> b!59707 t!4767))

(declare-fun b_and!3617 () Bool)

(assert (= b_and!3613 (and (=> t!4767 result!2381) b_and!3617)))

(assert (=> b!59707 t!4769))

(declare-fun b_and!3619 () Bool)

(assert (= b_and!3615 (and (=> t!4769 result!2383) b_and!3619)))

(declare-fun m!51779 () Bool)

(assert (=> b!59703 m!51779))

(declare-fun m!51781 () Bool)

(assert (=> b!59714 m!51781))

(assert (=> b!59714 m!51781))

(declare-fun m!51783 () Bool)

(assert (=> b!59714 m!51783))

(declare-fun m!51785 () Bool)

(assert (=> b!59704 m!51785))

(assert (=> b!59698 m!51781))

(assert (=> b!59698 m!51781))

(declare-fun m!51787 () Bool)

(assert (=> b!59698 m!51787))

(declare-fun m!51789 () Bool)

(assert (=> bm!4498 m!51789))

(declare-fun m!51791 () Bool)

(assert (=> b!59713 m!51791))

(declare-fun m!51793 () Bool)

(assert (=> bm!4497 m!51793))

(assert (=> b!59707 m!50707))

(declare-fun m!51795 () Bool)

(assert (=> b!59707 m!51795))

(assert (=> b!59707 m!51781))

(assert (=> b!59707 m!51781))

(declare-fun m!51797 () Bool)

(assert (=> b!59707 m!51797))

(assert (=> b!59707 m!51795))

(assert (=> b!59707 m!50707))

(declare-fun m!51799 () Bool)

(assert (=> b!59707 m!51799))

(declare-fun m!51801 () Bool)

(assert (=> bm!4495 m!51801))

(assert (=> d!11519 m!50667))

(assert (=> b!59710 m!51781))

(assert (=> b!59710 m!51781))

(assert (=> b!59710 m!51783))

(declare-fun m!51803 () Bool)

(assert (=> bm!4493 m!51803))

(declare-fun m!51805 () Bool)

(assert (=> b!59700 m!51805))

(declare-fun m!51807 () Bool)

(assert (=> b!59700 m!51807))

(declare-fun m!51809 () Bool)

(assert (=> b!59700 m!51809))

(assert (=> b!59700 m!51781))

(declare-fun m!51811 () Bool)

(assert (=> b!59700 m!51811))

(declare-fun m!51813 () Bool)

(assert (=> b!59700 m!51813))

(declare-fun m!51815 () Bool)

(assert (=> b!59700 m!51815))

(declare-fun m!51817 () Bool)

(assert (=> b!59700 m!51817))

(declare-fun m!51819 () Bool)

(assert (=> b!59700 m!51819))

(declare-fun m!51821 () Bool)

(assert (=> b!59700 m!51821))

(declare-fun m!51823 () Bool)

(assert (=> b!59700 m!51823))

(assert (=> b!59700 m!51805))

(declare-fun m!51825 () Bool)

(assert (=> b!59700 m!51825))

(declare-fun m!51827 () Bool)

(assert (=> b!59700 m!51827))

(declare-fun m!51829 () Bool)

(assert (=> b!59700 m!51829))

(assert (=> b!59700 m!51827))

(declare-fun m!51831 () Bool)

(assert (=> b!59700 m!51831))

(declare-fun m!51833 () Bool)

(assert (=> b!59700 m!51833))

(assert (=> b!59700 m!51803))

(assert (=> b!59700 m!51817))

(assert (=> b!59700 m!51811))

(assert (=> d!11345 d!11519))

(declare-fun b!59716 () Bool)

(declare-fun e!39256 () (_ BitVec 32))

(declare-fun call!4502 () (_ BitVec 32))

(assert (=> b!59716 (= e!39256 (bvadd #b00000000000000000000000000000001 call!4502))))

(declare-fun b!59717 () Bool)

(declare-fun e!39255 () (_ BitVec 32))

(assert (=> b!59717 (= e!39255 e!39256)))

(declare-fun c!7680 () Bool)

(assert (=> b!59717 (= c!7680 (validKeyInArray!0 (select (arr!1772 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!59718 () Bool)

(assert (=> b!59718 (= e!39256 call!4502)))

(declare-fun bm!4499 () Bool)

(assert (=> bm!4499 (= call!4502 (arrayCountValidKeys!0 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2002 (_keys!3666 newMap!16))))))

(declare-fun lt!24317 () (_ BitVec 32))

(declare-fun d!11521 () Bool)

(assert (=> d!11521 (and (bvsge lt!24317 #b00000000000000000000000000000000) (bvsle lt!24317 (bvsub (size!2002 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> d!11521 (= lt!24317 e!39255)))

(declare-fun c!7681 () Bool)

(assert (=> d!11521 (= c!7681 (bvsge #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(assert (=> d!11521 (and (bvsle #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2002 (_keys!3666 newMap!16)) (size!2002 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16))))))))

(assert (=> d!11521 (= (arrayCountValidKeys!0 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16))) #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))) lt!24317)))

(declare-fun b!59719 () Bool)

(assert (=> b!59719 (= e!39255 #b00000000000000000000000000000000)))

(assert (= (and d!11521 c!7681) b!59719))

(assert (= (and d!11521 (not c!7681)) b!59717))

(assert (= (and b!59717 c!7680) b!59716))

(assert (= (and b!59717 (not c!7680)) b!59718))

(assert (= (or b!59716 b!59718) bm!4499))

(assert (=> b!59717 m!51781))

(assert (=> b!59717 m!51781))

(assert (=> b!59717 m!51783))

(declare-fun m!51835 () Bool)

(assert (=> bm!4499 m!51835))

(assert (=> d!11345 d!11521))

(declare-fun b!59720 () Bool)

(declare-fun e!39258 () (_ BitVec 32))

(declare-fun call!4503 () (_ BitVec 32))

(assert (=> b!59720 (= e!39258 (bvadd #b00000000000000000000000000000001 call!4503))))

(declare-fun b!59721 () Bool)

(declare-fun e!39257 () (_ BitVec 32))

(assert (=> b!59721 (= e!39257 e!39258)))

(declare-fun c!7682 () Bool)

(assert (=> b!59721 (= c!7682 (validKeyInArray!0 (select (arr!1772 lt!24073) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)))))))

(declare-fun b!59722 () Bool)

(assert (=> b!59722 (= e!39258 call!4503)))

(declare-fun bm!4500 () Bool)

(assert (=> bm!4500 (= call!4503 (arrayCountValidKeys!0 lt!24073 (bvadd (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) #b00000000000000000000000000000001) (bvadd (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) #b00000000000000000000000000000001)))))

(declare-fun d!11523 () Bool)

(declare-fun lt!24318 () (_ BitVec 32))

(assert (=> d!11523 (and (bvsge lt!24318 #b00000000000000000000000000000000) (bvsle lt!24318 (bvsub (size!2002 lt!24073) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)))))))

(assert (=> d!11523 (= lt!24318 e!39257)))

(declare-fun c!7683 () Bool)

(assert (=> d!11523 (= c!7683 (bvsge (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (bvadd (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) #b00000000000000000000000000000001)))))

(assert (=> d!11523 (and (bvsle (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (bvadd (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) #b00000000000000000000000000000001)) (bvsge (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) #b00000000000000000000000000000000) (bvsle (bvadd (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) #b00000000000000000000000000000001) (size!2002 lt!24073)))))

(assert (=> d!11523 (= (arrayCountValidKeys!0 lt!24073 (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (bvadd (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) #b00000000000000000000000000000001)) lt!24318)))

(declare-fun b!59723 () Bool)

(assert (=> b!59723 (= e!39257 #b00000000000000000000000000000000)))

(assert (= (and d!11523 c!7683) b!59723))

(assert (= (and d!11523 (not c!7683)) b!59721))

(assert (= (and b!59721 c!7682) b!59720))

(assert (= (and b!59721 (not c!7682)) b!59722))

(assert (= (or b!59720 b!59722) bm!4500))

(declare-fun m!51837 () Bool)

(assert (=> b!59721 m!51837))

(assert (=> b!59721 m!51837))

(declare-fun m!51839 () Bool)

(assert (=> b!59721 m!51839))

(declare-fun m!51841 () Bool)

(assert (=> bm!4500 m!51841))

(assert (=> d!11345 d!11523))

(declare-fun b!59724 () Bool)

(declare-fun e!39259 () Bool)

(declare-fun call!4504 () Bool)

(assert (=> b!59724 (= e!39259 call!4504)))

(declare-fun bm!4501 () Bool)

(assert (=> bm!4501 (= call!4504 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16))) (mask!5926 newMap!16)))))

(declare-fun b!59725 () Bool)

(declare-fun e!39260 () Bool)

(assert (=> b!59725 (= e!39260 call!4504)))

(declare-fun b!59726 () Bool)

(declare-fun e!39261 () Bool)

(assert (=> b!59726 (= e!39261 e!39259)))

(declare-fun c!7684 () Bool)

(assert (=> b!59726 (= c!7684 (validKeyInArray!0 (select (arr!1772 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun d!11525 () Bool)

(declare-fun res!33125 () Bool)

(assert (=> d!11525 (=> res!33125 e!39261)))

(assert (=> d!11525 (= res!33125 (bvsge #b00000000000000000000000000000000 (size!2002 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16))))))))

(assert (=> d!11525 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16))) (mask!5926 newMap!16)) e!39261)))

(declare-fun b!59727 () Bool)

(assert (=> b!59727 (= e!39259 e!39260)))

(declare-fun lt!24320 () (_ BitVec 64))

(assert (=> b!59727 (= lt!24320 (select (arr!1772 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!24319 () Unit!1547)

(assert (=> b!59727 (= lt!24319 (lemmaArrayContainsFromImpliesContainsFromZero!0 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16))) lt!24320 #b00000000000000000000000000000000))))

(assert (=> b!59727 (arrayContainsKey!0 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16))) lt!24320 #b00000000000000000000000000000000)))

(declare-fun lt!24321 () Unit!1547)

(assert (=> b!59727 (= lt!24321 lt!24319)))

(declare-fun res!33124 () Bool)

(assert (=> b!59727 (= res!33124 (= (seekEntryOrOpen!0 (select (arr!1772 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16)))) #b00000000000000000000000000000000) (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16))) (mask!5926 newMap!16)) (Found!221 #b00000000000000000000000000000000)))))

(assert (=> b!59727 (=> (not res!33124) (not e!39260))))

(assert (= (and d!11525 (not res!33125)) b!59726))

(assert (= (and b!59726 c!7684) b!59727))

(assert (= (and b!59726 (not c!7684)) b!59724))

(assert (= (and b!59727 res!33124) b!59725))

(assert (= (or b!59725 b!59724) bm!4501))

(declare-fun m!51843 () Bool)

(assert (=> bm!4501 m!51843))

(assert (=> b!59726 m!51781))

(assert (=> b!59726 m!51781))

(assert (=> b!59726 m!51783))

(assert (=> b!59727 m!51781))

(declare-fun m!51845 () Bool)

(assert (=> b!59727 m!51845))

(declare-fun m!51847 () Bool)

(assert (=> b!59727 m!51847))

(assert (=> b!59727 m!51781))

(declare-fun m!51849 () Bool)

(assert (=> b!59727 m!51849))

(assert (=> d!11345 d!11525))

(declare-fun bm!4502 () Bool)

(declare-fun call!4508 () ListLongMap!1343)

(declare-fun call!4505 () ListLongMap!1343)

(assert (=> bm!4502 (= call!4508 call!4505)))

(declare-fun b!59728 () Bool)

(declare-fun c!7685 () Bool)

(assert (=> b!59728 (= c!7685 (and (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!39266 () ListLongMap!1343)

(declare-fun e!39272 () ListLongMap!1343)

(assert (=> b!59728 (= e!39266 e!39272)))

(declare-fun b!59729 () Bool)

(declare-fun e!39273 () Bool)

(declare-fun call!4506 () Bool)

(assert (=> b!59729 (= e!39273 (not call!4506))))

(declare-fun call!4507 () ListLongMap!1343)

(declare-fun bm!4503 () Bool)

(assert (=> bm!4503 (= call!4507 (getCurrentListMapNoExtraKeys!44 lt!24076 lt!24079 (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun b!59730 () Bool)

(declare-fun e!39264 () Bool)

(declare-fun e!39271 () Bool)

(assert (=> b!59730 (= e!39264 e!39271)))

(declare-fun res!33126 () Bool)

(declare-fun call!4510 () Bool)

(assert (=> b!59730 (= res!33126 call!4510)))

(assert (=> b!59730 (=> (not res!33126) (not e!39271))))

(declare-fun b!59731 () Bool)

(declare-fun e!39267 () Bool)

(declare-fun e!39270 () Bool)

(assert (=> b!59731 (= e!39267 e!39270)))

(declare-fun res!33134 () Bool)

(assert (=> b!59731 (=> (not res!33134) (not e!39270))))

(declare-fun lt!24334 () ListLongMap!1343)

(assert (=> b!59731 (= res!33134 (contains!678 lt!24334 (select (arr!1772 lt!24076) #b00000000000000000000000000000000)))))

(assert (=> b!59731 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2002 lt!24076)))))

(declare-fun b!59732 () Bool)

(declare-fun e!39274 () ListLongMap!1343)

(assert (=> b!59732 (= e!39274 e!39266)))

(declare-fun c!7689 () Bool)

(assert (=> b!59732 (= c!7689 (and (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun d!11527 () Bool)

(declare-fun e!39262 () Bool)

(assert (=> d!11527 e!39262))

(declare-fun res!33130 () Bool)

(assert (=> d!11527 (=> (not res!33130) (not e!39262))))

(assert (=> d!11527 (= res!33130 (or (bvsge #b00000000000000000000000000000000 (size!2002 lt!24076)) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2002 lt!24076)))))))

(declare-fun lt!24342 () ListLongMap!1343)

(assert (=> d!11527 (= lt!24334 lt!24342)))

(declare-fun lt!24324 () Unit!1547)

(declare-fun e!39265 () Unit!1547)

(assert (=> d!11527 (= lt!24324 e!39265)))

(declare-fun c!7690 () Bool)

(declare-fun e!39269 () Bool)

(assert (=> d!11527 (= c!7690 e!39269)))

(declare-fun res!33131 () Bool)

(assert (=> d!11527 (=> (not res!33131) (not e!39269))))

(assert (=> d!11527 (= res!33131 (bvslt #b00000000000000000000000000000000 (size!2002 lt!24076)))))

(assert (=> d!11527 (= lt!24342 e!39274)))

(declare-fun c!7687 () Bool)

(assert (=> d!11527 (= c!7687 (and (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11527 (validMask!0 (mask!5926 newMap!16))))

(assert (=> d!11527 (= (getCurrentListMap!388 lt!24076 lt!24079 (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) lt!24334)))

(declare-fun b!59733 () Bool)

(declare-fun lt!24323 () Unit!1547)

(assert (=> b!59733 (= e!39265 lt!24323)))

(declare-fun lt!24326 () ListLongMap!1343)

(assert (=> b!59733 (= lt!24326 (getCurrentListMapNoExtraKeys!44 lt!24076 lt!24079 (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24340 () (_ BitVec 64))

(assert (=> b!59733 (= lt!24340 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24333 () (_ BitVec 64))

(assert (=> b!59733 (= lt!24333 (select (arr!1772 lt!24076) #b00000000000000000000000000000000))))

(declare-fun lt!24322 () Unit!1547)

(assert (=> b!59733 (= lt!24322 (addStillContains!42 lt!24326 lt!24340 (zeroValue!1958 newMap!16) lt!24333))))

(assert (=> b!59733 (contains!678 (+!80 lt!24326 (tuple2!2015 lt!24340 (zeroValue!1958 newMap!16))) lt!24333)))

(declare-fun lt!24325 () Unit!1547)

(assert (=> b!59733 (= lt!24325 lt!24322)))

(declare-fun lt!24339 () ListLongMap!1343)

(assert (=> b!59733 (= lt!24339 (getCurrentListMapNoExtraKeys!44 lt!24076 lt!24079 (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24328 () (_ BitVec 64))

(assert (=> b!59733 (= lt!24328 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24329 () (_ BitVec 64))

(assert (=> b!59733 (= lt!24329 (select (arr!1772 lt!24076) #b00000000000000000000000000000000))))

(declare-fun lt!24341 () Unit!1547)

(assert (=> b!59733 (= lt!24341 (addApplyDifferent!42 lt!24339 lt!24328 (minValue!1958 newMap!16) lt!24329))))

(assert (=> b!59733 (= (apply!66 (+!80 lt!24339 (tuple2!2015 lt!24328 (minValue!1958 newMap!16))) lt!24329) (apply!66 lt!24339 lt!24329))))

(declare-fun lt!24331 () Unit!1547)

(assert (=> b!59733 (= lt!24331 lt!24341)))

(declare-fun lt!24332 () ListLongMap!1343)

(assert (=> b!59733 (= lt!24332 (getCurrentListMapNoExtraKeys!44 lt!24076 lt!24079 (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24338 () (_ BitVec 64))

(assert (=> b!59733 (= lt!24338 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24330 () (_ BitVec 64))

(assert (=> b!59733 (= lt!24330 (select (arr!1772 lt!24076) #b00000000000000000000000000000000))))

(declare-fun lt!24343 () Unit!1547)

(assert (=> b!59733 (= lt!24343 (addApplyDifferent!42 lt!24332 lt!24338 (zeroValue!1958 newMap!16) lt!24330))))

(assert (=> b!59733 (= (apply!66 (+!80 lt!24332 (tuple2!2015 lt!24338 (zeroValue!1958 newMap!16))) lt!24330) (apply!66 lt!24332 lt!24330))))

(declare-fun lt!24336 () Unit!1547)

(assert (=> b!59733 (= lt!24336 lt!24343)))

(declare-fun lt!24327 () ListLongMap!1343)

(assert (=> b!59733 (= lt!24327 (getCurrentListMapNoExtraKeys!44 lt!24076 lt!24079 (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24335 () (_ BitVec 64))

(assert (=> b!59733 (= lt!24335 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24337 () (_ BitVec 64))

(assert (=> b!59733 (= lt!24337 (select (arr!1772 lt!24076) #b00000000000000000000000000000000))))

(assert (=> b!59733 (= lt!24323 (addApplyDifferent!42 lt!24327 lt!24335 (minValue!1958 newMap!16) lt!24337))))

(assert (=> b!59733 (= (apply!66 (+!80 lt!24327 (tuple2!2015 lt!24335 (minValue!1958 newMap!16))) lt!24337) (apply!66 lt!24327 lt!24337))))

(declare-fun b!59734 () Bool)

(assert (=> b!59734 (= e!39272 call!4508)))

(declare-fun b!59735 () Bool)

(declare-fun call!4511 () ListLongMap!1343)

(assert (=> b!59735 (= e!39272 call!4511)))

(declare-fun bm!4504 () Bool)

(assert (=> bm!4504 (= call!4505 call!4507)))

(declare-fun call!4509 () ListLongMap!1343)

(declare-fun bm!4505 () Bool)

(assert (=> bm!4505 (= call!4509 (+!80 (ite c!7687 call!4507 (ite c!7689 call!4505 call!4508)) (ite (or c!7687 c!7689) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))

(declare-fun b!59736 () Bool)

(assert (=> b!59736 (= e!39271 (= (apply!66 lt!24334 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1958 newMap!16)))))

(declare-fun b!59737 () Bool)

(assert (=> b!59737 (= e!39274 (+!80 call!4509 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))

(declare-fun b!59738 () Bool)

(assert (=> b!59738 (= e!39266 call!4511)))

(declare-fun b!59739 () Bool)

(declare-fun res!33128 () Bool)

(assert (=> b!59739 (=> (not res!33128) (not e!39262))))

(assert (=> b!59739 (= res!33128 e!39264)))

(declare-fun c!7686 () Bool)

(assert (=> b!59739 (= c!7686 (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!59740 () Bool)

(assert (=> b!59740 (= e!39270 (= (apply!66 lt!24334 (select (arr!1772 lt!24076) #b00000000000000000000000000000000)) (get!1072 (select (arr!1773 lt!24079) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!59740 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 lt!24079)))))

(assert (=> b!59740 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2002 lt!24076)))))

(declare-fun b!59741 () Bool)

(declare-fun e!39268 () Bool)

(assert (=> b!59741 (= e!39273 e!39268)))

(declare-fun res!33127 () Bool)

(assert (=> b!59741 (= res!33127 call!4506)))

(assert (=> b!59741 (=> (not res!33127) (not e!39268))))

(declare-fun bm!4506 () Bool)

(assert (=> bm!4506 (= call!4511 call!4509)))

(declare-fun b!59742 () Bool)

(assert (=> b!59742 (= e!39264 (not call!4510))))

(declare-fun bm!4507 () Bool)

(assert (=> bm!4507 (= call!4506 (contains!678 lt!24334 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4508 () Bool)

(assert (=> bm!4508 (= call!4510 (contains!678 lt!24334 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59743 () Bool)

(declare-fun e!39263 () Bool)

(assert (=> b!59743 (= e!39263 (validKeyInArray!0 (select (arr!1772 lt!24076) #b00000000000000000000000000000000)))))

(declare-fun b!59744 () Bool)

(declare-fun Unit!1579 () Unit!1547)

(assert (=> b!59744 (= e!39265 Unit!1579)))

(declare-fun b!59745 () Bool)

(assert (=> b!59745 (= e!39262 e!39273)))

(declare-fun c!7688 () Bool)

(assert (=> b!59745 (= c!7688 (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!59746 () Bool)

(assert (=> b!59746 (= e!39268 (= (apply!66 lt!24334 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1958 newMap!16)))))

(declare-fun b!59747 () Bool)

(assert (=> b!59747 (= e!39269 (validKeyInArray!0 (select (arr!1772 lt!24076) #b00000000000000000000000000000000)))))

(declare-fun b!59748 () Bool)

(declare-fun res!33133 () Bool)

(assert (=> b!59748 (=> (not res!33133) (not e!39262))))

(assert (=> b!59748 (= res!33133 e!39267)))

(declare-fun res!33129 () Bool)

(assert (=> b!59748 (=> res!33129 e!39267)))

(assert (=> b!59748 (= res!33129 (not e!39263))))

(declare-fun res!33132 () Bool)

(assert (=> b!59748 (=> (not res!33132) (not e!39263))))

(assert (=> b!59748 (= res!33132 (bvslt #b00000000000000000000000000000000 (size!2002 lt!24076)))))

(assert (= (and d!11527 c!7687) b!59737))

(assert (= (and d!11527 (not c!7687)) b!59732))

(assert (= (and b!59732 c!7689) b!59738))

(assert (= (and b!59732 (not c!7689)) b!59728))

(assert (= (and b!59728 c!7685) b!59735))

(assert (= (and b!59728 (not c!7685)) b!59734))

(assert (= (or b!59735 b!59734) bm!4502))

(assert (= (or b!59738 bm!4502) bm!4504))

(assert (= (or b!59738 b!59735) bm!4506))

(assert (= (or b!59737 bm!4504) bm!4503))

(assert (= (or b!59737 bm!4506) bm!4505))

(assert (= (and d!11527 res!33131) b!59747))

(assert (= (and d!11527 c!7690) b!59733))

(assert (= (and d!11527 (not c!7690)) b!59744))

(assert (= (and d!11527 res!33130) b!59748))

(assert (= (and b!59748 res!33132) b!59743))

(assert (= (and b!59748 (not res!33129)) b!59731))

(assert (= (and b!59731 res!33134) b!59740))

(assert (= (and b!59748 res!33133) b!59739))

(assert (= (and b!59739 c!7686) b!59730))

(assert (= (and b!59739 (not c!7686)) b!59742))

(assert (= (and b!59730 res!33126) b!59736))

(assert (= (or b!59730 b!59742) bm!4508))

(assert (= (and b!59739 res!33128) b!59745))

(assert (= (and b!59745 c!7688) b!59741))

(assert (= (and b!59745 (not c!7688)) b!59729))

(assert (= (and b!59741 res!33127) b!59746))

(assert (= (or b!59741 b!59729) bm!4507))

(declare-fun b_lambda!2627 () Bool)

(assert (=> (not b_lambda!2627) (not b!59740)))

(assert (=> b!59740 t!4767))

(declare-fun b_and!3621 () Bool)

(assert (= b_and!3617 (and (=> t!4767 result!2381) b_and!3621)))

(assert (=> b!59740 t!4769))

(declare-fun b_and!3623 () Bool)

(assert (= b_and!3619 (and (=> t!4769 result!2383) b_and!3623)))

(declare-fun m!51851 () Bool)

(assert (=> b!59736 m!51851))

(declare-fun m!51853 () Bool)

(assert (=> b!59747 m!51853))

(assert (=> b!59747 m!51853))

(declare-fun m!51855 () Bool)

(assert (=> b!59747 m!51855))

(declare-fun m!51857 () Bool)

(assert (=> b!59737 m!51857))

(assert (=> b!59731 m!51853))

(assert (=> b!59731 m!51853))

(declare-fun m!51859 () Bool)

(assert (=> b!59731 m!51859))

(declare-fun m!51861 () Bool)

(assert (=> bm!4508 m!51861))

(declare-fun m!51863 () Bool)

(assert (=> b!59746 m!51863))

(declare-fun m!51865 () Bool)

(assert (=> bm!4507 m!51865))

(assert (=> b!59740 m!50707))

(declare-fun m!51867 () Bool)

(assert (=> b!59740 m!51867))

(assert (=> b!59740 m!51853))

(assert (=> b!59740 m!51853))

(declare-fun m!51869 () Bool)

(assert (=> b!59740 m!51869))

(assert (=> b!59740 m!51867))

(assert (=> b!59740 m!50707))

(declare-fun m!51871 () Bool)

(assert (=> b!59740 m!51871))

(declare-fun m!51873 () Bool)

(assert (=> bm!4505 m!51873))

(assert (=> d!11527 m!50667))

(assert (=> b!59743 m!51853))

(assert (=> b!59743 m!51853))

(assert (=> b!59743 m!51855))

(declare-fun m!51875 () Bool)

(assert (=> bm!4503 m!51875))

(declare-fun m!51877 () Bool)

(assert (=> b!59733 m!51877))

(declare-fun m!51879 () Bool)

(assert (=> b!59733 m!51879))

(declare-fun m!51881 () Bool)

(assert (=> b!59733 m!51881))

(assert (=> b!59733 m!51853))

(declare-fun m!51883 () Bool)

(assert (=> b!59733 m!51883))

(declare-fun m!51885 () Bool)

(assert (=> b!59733 m!51885))

(declare-fun m!51887 () Bool)

(assert (=> b!59733 m!51887))

(declare-fun m!51889 () Bool)

(assert (=> b!59733 m!51889))

(declare-fun m!51891 () Bool)

(assert (=> b!59733 m!51891))

(declare-fun m!51893 () Bool)

(assert (=> b!59733 m!51893))

(declare-fun m!51895 () Bool)

(assert (=> b!59733 m!51895))

(assert (=> b!59733 m!51877))

(declare-fun m!51897 () Bool)

(assert (=> b!59733 m!51897))

(declare-fun m!51899 () Bool)

(assert (=> b!59733 m!51899))

(declare-fun m!51901 () Bool)

(assert (=> b!59733 m!51901))

(assert (=> b!59733 m!51899))

(declare-fun m!51903 () Bool)

(assert (=> b!59733 m!51903))

(declare-fun m!51905 () Bool)

(assert (=> b!59733 m!51905))

(assert (=> b!59733 m!51875))

(assert (=> b!59733 m!51889))

(assert (=> b!59733 m!51883))

(assert (=> d!11345 d!11527))

(declare-fun d!11529 () Bool)

(assert (=> d!11529 (arrayContainsKey!0 lt!24087 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(declare-fun lt!24346 () Unit!1547)

(declare-fun choose!13 (array!3703 (_ BitVec 64) (_ BitVec 32)) Unit!1547)

(assert (=> d!11529 (= lt!24346 (choose!13 lt!24087 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716))))))

(assert (=> d!11529 (bvsge (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) #b00000000000000000000000000000000)))

(assert (=> d!11529 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!24087 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716))) lt!24346)))

(declare-fun bs!2587 () Bool)

(assert (= bs!2587 d!11529))

(assert (=> bs!2587 m!50367))

(assert (=> bs!2587 m!51139))

(assert (=> bs!2587 m!50367))

(declare-fun m!51907 () Bool)

(assert (=> bs!2587 m!51907))

(assert (=> d!11345 d!11529))

(assert (=> d!11345 d!11397))

(declare-fun d!11531 () Bool)

(assert (=> d!11531 (= (arrayCountValidKeys!0 lt!24073 (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (bvadd (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lt!24349 () Unit!1547)

(declare-fun choose!2 (array!3703 (_ BitVec 32)) Unit!1547)

(assert (=> d!11531 (= lt!24349 (choose!2 lt!24073 (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716))))))

(declare-fun e!39277 () Bool)

(assert (=> d!11531 e!39277))

(declare-fun res!33139 () Bool)

(assert (=> d!11531 (=> (not res!33139) (not e!39277))))

(assert (=> d!11531 (= res!33139 (and (bvsge (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) #b00000000000000000000000000000000) (bvslt (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (size!2002 lt!24073))))))

(assert (=> d!11531 (= (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!24073 (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716))) lt!24349)))

(declare-fun b!59753 () Bool)

(declare-fun res!33140 () Bool)

(assert (=> b!59753 (=> (not res!33140) (not e!39277))))

(assert (=> b!59753 (= res!33140 (validKeyInArray!0 (select (arr!1772 lt!24073) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)))))))

(declare-fun b!59754 () Bool)

(assert (=> b!59754 (= e!39277 (bvslt (size!2002 lt!24073) #b01111111111111111111111111111111))))

(assert (= (and d!11531 res!33139) b!59753))

(assert (= (and b!59753 res!33140) b!59754))

(assert (=> d!11531 m!51153))

(declare-fun m!51909 () Bool)

(assert (=> d!11531 m!51909))

(assert (=> b!59753 m!51837))

(assert (=> b!59753 m!51837))

(assert (=> b!59753 m!51839))

(assert (=> d!11345 d!11531))

(declare-fun d!11533 () Bool)

(declare-fun e!39278 () Bool)

(assert (=> d!11533 e!39278))

(declare-fun res!33141 () Bool)

(assert (=> d!11533 (=> (not res!33141) (not e!39278))))

(assert (=> d!11533 (= res!33141 (and (bvsge (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) #b00000000000000000000000000000000) (bvslt (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (size!2002 lt!24076))))))

(declare-fun lt!24350 () Unit!1547)

(assert (=> d!11533 (= lt!24350 (choose!314 lt!24076 lt!24079 (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (defaultEntry!2042 newMap!16)))))

(assert (=> d!11533 (validMask!0 (mask!5926 newMap!16))))

(assert (=> d!11533 (= (lemmaValidKeyInArrayIsInListMap!75 lt!24076 lt!24079 (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (defaultEntry!2042 newMap!16)) lt!24350)))

(declare-fun b!59755 () Bool)

(assert (=> b!59755 (= e!39278 (contains!678 (getCurrentListMap!388 lt!24076 lt!24079 (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (select (arr!1772 lt!24076) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)))))))

(assert (= (and d!11533 res!33141) b!59755))

(declare-fun m!51911 () Bool)

(assert (=> d!11533 m!51911))

(assert (=> d!11533 m!50667))

(assert (=> b!59755 m!51141))

(declare-fun m!51913 () Bool)

(assert (=> b!59755 m!51913))

(assert (=> b!59755 m!51141))

(assert (=> b!59755 m!51913))

(declare-fun m!51915 () Bool)

(assert (=> b!59755 m!51915))

(assert (=> d!11345 d!11533))

(assert (=> d!11345 d!11247))

(declare-fun b!59756 () Bool)

(declare-fun e!39282 () Bool)

(declare-fun e!39281 () Bool)

(assert (=> b!59756 (= e!39282 e!39281)))

(declare-fun res!33143 () Bool)

(assert (=> b!59756 (=> (not res!33143) (not e!39281))))

(declare-fun e!39279 () Bool)

(assert (=> b!59756 (= res!33143 (not e!39279))))

(declare-fun res!33142 () Bool)

(assert (=> b!59756 (=> (not res!33142) (not e!39279))))

(assert (=> b!59756 (= res!33142 (validKeyInArray!0 (select (arr!1772 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16)))) lt!24074)))))

(declare-fun b!59757 () Bool)

(declare-fun e!39280 () Bool)

(declare-fun call!4512 () Bool)

(assert (=> b!59757 (= e!39280 call!4512)))

(declare-fun b!59758 () Bool)

(assert (=> b!59758 (= e!39280 call!4512)))

(declare-fun d!11535 () Bool)

(declare-fun res!33144 () Bool)

(assert (=> d!11535 (=> res!33144 e!39282)))

(assert (=> d!11535 (= res!33144 (bvsge lt!24074 (size!2002 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16))))))))

(assert (=> d!11535 (= (arrayNoDuplicates!0 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16))) lt!24074 lt!24071) e!39282)))

(declare-fun bm!4509 () Bool)

(declare-fun c!7691 () Bool)

(assert (=> bm!4509 (= call!4512 (arrayNoDuplicates!0 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16))) (bvadd lt!24074 #b00000000000000000000000000000001) (ite c!7691 (Cons!1418 (select (arr!1772 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16)))) lt!24074) lt!24071) lt!24071)))))

(declare-fun b!59759 () Bool)

(assert (=> b!59759 (= e!39279 (contains!679 lt!24071 (select (arr!1772 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16)))) lt!24074)))))

(declare-fun b!59760 () Bool)

(assert (=> b!59760 (= e!39281 e!39280)))

(assert (=> b!59760 (= c!7691 (validKeyInArray!0 (select (arr!1772 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16)))) lt!24074)))))

(assert (= (and d!11535 (not res!33144)) b!59756))

(assert (= (and b!59756 res!33142) b!59759))

(assert (= (and b!59756 res!33143) b!59760))

(assert (= (and b!59760 c!7691) b!59757))

(assert (= (and b!59760 (not c!7691)) b!59758))

(assert (= (or b!59757 b!59758) bm!4509))

(declare-fun m!51917 () Bool)

(assert (=> b!59756 m!51917))

(assert (=> b!59756 m!51917))

(declare-fun m!51919 () Bool)

(assert (=> b!59756 m!51919))

(assert (=> bm!4509 m!51917))

(declare-fun m!51921 () Bool)

(assert (=> bm!4509 m!51921))

(assert (=> b!59759 m!51917))

(assert (=> b!59759 m!51917))

(declare-fun m!51923 () Bool)

(assert (=> b!59759 m!51923))

(assert (=> b!59760 m!51917))

(assert (=> b!59760 m!51917))

(assert (=> b!59760 m!51919))

(assert (=> d!11345 d!11535))

(declare-fun d!11537 () Bool)

(declare-fun res!33145 () Bool)

(declare-fun e!39283 () Bool)

(assert (=> d!11537 (=> res!33145 e!39283)))

(assert (=> d!11537 (= res!33145 (= (select (arr!1772 lt!24087) #b00000000000000000000000000000000) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(assert (=> d!11537 (= (arrayContainsKey!0 lt!24087 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) #b00000000000000000000000000000000) e!39283)))

(declare-fun b!59761 () Bool)

(declare-fun e!39284 () Bool)

(assert (=> b!59761 (= e!39283 e!39284)))

(declare-fun res!33146 () Bool)

(assert (=> b!59761 (=> (not res!33146) (not e!39284))))

(assert (=> b!59761 (= res!33146 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2002 lt!24087)))))

(declare-fun b!59762 () Bool)

(assert (=> b!59762 (= e!39284 (arrayContainsKey!0 lt!24087 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!11537 (not res!33145)) b!59761))

(assert (= (and b!59761 res!33146) b!59762))

(declare-fun m!51925 () Bool)

(assert (=> d!11537 m!51925))

(assert (=> b!59762 m!50367))

(declare-fun m!51927 () Bool)

(assert (=> b!59762 m!51927))

(assert (=> d!11345 d!11537))

(assert (=> d!11345 d!11211))

(declare-fun d!11539 () Bool)

(declare-fun e!39287 () Bool)

(assert (=> d!11539 e!39287))

(declare-fun res!33149 () Bool)

(assert (=> d!11539 (=> (not res!33149) (not e!39287))))

(assert (=> d!11539 (= res!33149 (and (bvsge (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) #b00000000000000000000000000000000) (bvslt (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (size!2002 (_keys!3666 newMap!16)))))))

(declare-fun lt!24353 () Unit!1547)

(declare-fun choose!41 (array!3703 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1422) Unit!1547)

(assert (=> d!11539 (= lt!24353 (choose!41 (_keys!3666 newMap!16) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) lt!24074 lt!24071))))

(assert (=> d!11539 (bvslt (size!2002 (_keys!3666 newMap!16)) #b01111111111111111111111111111111)))

(assert (=> d!11539 (= (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!3666 newMap!16) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) lt!24074 lt!24071) lt!24353)))

(declare-fun b!59765 () Bool)

(assert (=> b!59765 (= e!39287 (arrayNoDuplicates!0 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16))) lt!24074 lt!24071))))

(assert (= (and d!11539 res!33149) b!59765))

(assert (=> d!11539 m!50367))

(declare-fun m!51929 () Bool)

(assert (=> d!11539 m!51929))

(assert (=> b!59765 m!51137))

(assert (=> b!59765 m!51163))

(assert (=> d!11345 d!11539))

(declare-fun e!39292 () Bool)

(declare-fun b!59777 () Bool)

(assert (=> b!59777 (= e!39292 (= (arrayCountValidKeys!0 (array!3704 (store (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (size!2002 (_keys!3666 newMap!16))) #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!3666 newMap!16) #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))) #b00000000000000000000000000000001)))))

(declare-fun d!11541 () Bool)

(assert (=> d!11541 e!39292))

(declare-fun res!33159 () Bool)

(assert (=> d!11541 (=> (not res!33159) (not e!39292))))

(assert (=> d!11541 (= res!33159 (and (bvsge (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) #b00000000000000000000000000000000) (bvslt (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (size!2002 (_keys!3666 newMap!16)))))))

(declare-fun lt!24356 () Unit!1547)

(declare-fun choose!1 (array!3703 (_ BitVec 32) (_ BitVec 64)) Unit!1547)

(assert (=> d!11541 (= lt!24356 (choose!1 (_keys!3666 newMap!16) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(declare-fun e!39293 () Bool)

(assert (=> d!11541 e!39293))

(declare-fun res!33158 () Bool)

(assert (=> d!11541 (=> (not res!33158) (not e!39293))))

(assert (=> d!11541 (= res!33158 (and (bvsge (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) #b00000000000000000000000000000000) (bvslt (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (size!2002 (_keys!3666 newMap!16)))))))

(assert (=> d!11541 (= (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!3666 newMap!16) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) lt!24356)))

(declare-fun b!59774 () Bool)

(declare-fun res!33160 () Bool)

(assert (=> b!59774 (=> (not res!33160) (not e!39293))))

(assert (=> b!59774 (= res!33160 (not (validKeyInArray!0 (select (arr!1772 (_keys!3666 newMap!16)) (ite c!7464 (index!3010 lt!23716) (index!3007 lt!23716))))))))

(declare-fun b!59775 () Bool)

(declare-fun res!33161 () Bool)

(assert (=> b!59775 (=> (not res!33161) (not e!39293))))

(assert (=> b!59775 (= res!33161 (validKeyInArray!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(declare-fun b!59776 () Bool)

(assert (=> b!59776 (= e!39293 (bvslt (size!2002 (_keys!3666 newMap!16)) #b01111111111111111111111111111111))))

(assert (= (and d!11541 res!33158) b!59774))

(assert (= (and b!59774 res!33160) b!59775))

(assert (= (and b!59775 res!33161) b!59776))

(assert (= (and d!11541 res!33159) b!59777))

(assert (=> b!59777 m!51137))

(assert (=> b!59777 m!51155))

(assert (=> b!59777 m!50563))

(assert (=> d!11541 m!50367))

(declare-fun m!51931 () Bool)

(assert (=> d!11541 m!51931))

(declare-fun m!51933 () Bool)

(assert (=> b!59774 m!51933))

(assert (=> b!59774 m!51933))

(declare-fun m!51935 () Bool)

(assert (=> b!59774 m!51935))

(assert (=> b!59775 m!50367))

(assert (=> b!59775 m!50635))

(assert (=> d!11345 d!11541))

(declare-fun d!11543 () Bool)

(assert (=> d!11543 (= (isDefined!77 (getValueByKey!125 (toList!687 call!4351) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355))) (not (isEmpty!299 (getValueByKey!125 (toList!687 call!4351) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))))

(declare-fun bs!2588 () Bool)

(assert (= bs!2588 d!11543))

(assert (=> bs!2588 m!50841))

(declare-fun m!51937 () Bool)

(assert (=> bs!2588 m!51937))

(assert (=> b!59149 d!11543))

(declare-fun b!59779 () Bool)

(declare-fun e!39294 () Option!131)

(declare-fun e!39295 () Option!131)

(assert (=> b!59779 (= e!39294 e!39295)))

(declare-fun c!7693 () Bool)

(assert (=> b!59779 (= c!7693 (and ((_ is Cons!1419) (toList!687 call!4351)) (not (= (_1!1018 (h!2000 (toList!687 call!4351))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))))

(declare-fun b!59778 () Bool)

(assert (=> b!59778 (= e!39294 (Some!130 (_2!1018 (h!2000 (toList!687 call!4351)))))))

(declare-fun d!11545 () Bool)

(declare-fun c!7692 () Bool)

(assert (=> d!11545 (= c!7692 (and ((_ is Cons!1419) (toList!687 call!4351)) (= (_1!1018 (h!2000 (toList!687 call!4351))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355))))))

(assert (=> d!11545 (= (getValueByKey!125 (toList!687 call!4351) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) e!39294)))

(declare-fun b!59781 () Bool)

(assert (=> b!59781 (= e!39295 None!129)))

(declare-fun b!59780 () Bool)

(assert (=> b!59780 (= e!39295 (getValueByKey!125 (t!4757 (toList!687 call!4351)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(assert (= (and d!11545 c!7692) b!59778))

(assert (= (and d!11545 (not c!7692)) b!59779))

(assert (= (and b!59779 c!7693) b!59780))

(assert (= (and b!59779 (not c!7693)) b!59781))

(assert (=> b!59780 m!50367))

(declare-fun m!51939 () Bool)

(assert (=> b!59780 m!51939))

(assert (=> b!59149 d!11545))

(declare-fun d!11547 () Bool)

(assert (=> d!11547 (= (isDefined!77 (getValueByKey!125 (toList!687 lt!23783) #b1000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!299 (getValueByKey!125 (toList!687 lt!23783) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!2589 () Bool)

(assert (= bs!2589 d!11547))

(assert (=> bs!2589 m!50645))

(declare-fun m!51941 () Bool)

(assert (=> bs!2589 m!51941))

(assert (=> b!59152 d!11547))

(declare-fun b!59783 () Bool)

(declare-fun e!39296 () Option!131)

(declare-fun e!39297 () Option!131)

(assert (=> b!59783 (= e!39296 e!39297)))

(declare-fun c!7695 () Bool)

(assert (=> b!59783 (= c!7695 (and ((_ is Cons!1419) (toList!687 lt!23783)) (not (= (_1!1018 (h!2000 (toList!687 lt!23783))) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!59782 () Bool)

(assert (=> b!59782 (= e!39296 (Some!130 (_2!1018 (h!2000 (toList!687 lt!23783)))))))

(declare-fun d!11549 () Bool)

(declare-fun c!7694 () Bool)

(assert (=> d!11549 (= c!7694 (and ((_ is Cons!1419) (toList!687 lt!23783)) (= (_1!1018 (h!2000 (toList!687 lt!23783))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!11549 (= (getValueByKey!125 (toList!687 lt!23783) #b1000000000000000000000000000000000000000000000000000000000000000) e!39296)))

(declare-fun b!59785 () Bool)

(assert (=> b!59785 (= e!39297 None!129)))

(declare-fun b!59784 () Bool)

(assert (=> b!59784 (= e!39297 (getValueByKey!125 (t!4757 (toList!687 lt!23783)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!11549 c!7694) b!59782))

(assert (= (and d!11549 (not c!7694)) b!59783))

(assert (= (and b!59783 c!7695) b!59784))

(assert (= (and b!59783 (not c!7695)) b!59785))

(declare-fun m!51943 () Bool)

(assert (=> b!59784 m!51943))

(assert (=> b!59152 d!11549))

(declare-fun d!11551 () Bool)

(declare-fun e!39298 () Bool)

(assert (=> d!11551 e!39298))

(declare-fun res!33162 () Bool)

(assert (=> d!11551 (=> res!33162 e!39298)))

(declare-fun lt!24359 () Bool)

(assert (=> d!11551 (= res!33162 (not lt!24359))))

(declare-fun lt!24358 () Bool)

(assert (=> d!11551 (= lt!24359 lt!24358)))

(declare-fun lt!24357 () Unit!1547)

(declare-fun e!39299 () Unit!1547)

(assert (=> d!11551 (= lt!24357 e!39299)))

(declare-fun c!7696 () Bool)

(assert (=> d!11551 (= c!7696 lt!24358)))

(assert (=> d!11551 (= lt!24358 (containsKey!128 (toList!687 lt!23832) (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!11551 (= (contains!678 lt!23832 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)) lt!24359)))

(declare-fun b!59786 () Bool)

(declare-fun lt!24360 () Unit!1547)

(assert (=> b!59786 (= e!39299 lt!24360)))

(assert (=> b!59786 (= lt!24360 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 lt!23832) (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59786 (isDefined!77 (getValueByKey!125 (toList!687 lt!23832) (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59787 () Bool)

(declare-fun Unit!1580 () Unit!1547)

(assert (=> b!59787 (= e!39299 Unit!1580)))

(declare-fun b!59788 () Bool)

(assert (=> b!59788 (= e!39298 (isDefined!77 (getValueByKey!125 (toList!687 lt!23832) (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!11551 c!7696) b!59786))

(assert (= (and d!11551 (not c!7696)) b!59787))

(assert (= (and d!11551 (not res!33162)) b!59788))

(assert (=> d!11551 m!50693))

(declare-fun m!51945 () Bool)

(assert (=> d!11551 m!51945))

(assert (=> b!59786 m!50693))

(declare-fun m!51947 () Bool)

(assert (=> b!59786 m!51947))

(assert (=> b!59786 m!50693))

(declare-fun m!51949 () Bool)

(assert (=> b!59786 m!51949))

(assert (=> b!59786 m!51949))

(declare-fun m!51951 () Bool)

(assert (=> b!59786 m!51951))

(assert (=> b!59788 m!50693))

(assert (=> b!59788 m!51949))

(assert (=> b!59788 m!51949))

(assert (=> b!59788 m!51951))

(assert (=> b!59060 d!11551))

(assert (=> b!59076 d!11365))

(declare-fun d!11553 () Bool)

(assert (=> d!11553 (= (isDefined!77 (getValueByKey!125 (toList!687 lt!23783) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!299 (getValueByKey!125 (toList!687 lt!23783) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!2590 () Bool)

(assert (= bs!2590 d!11553))

(assert (=> bs!2590 m!50687))

(declare-fun m!51953 () Bool)

(assert (=> bs!2590 m!51953))

(assert (=> b!59369 d!11553))

(assert (=> b!59369 d!11409))

(assert (=> b!59082 d!11347))

(assert (=> d!11261 d!11363))

(declare-fun d!11555 () Bool)

(declare-fun res!33163 () Bool)

(declare-fun e!39300 () Bool)

(assert (=> d!11555 (=> (not res!33163) (not e!39300))))

(assert (=> d!11555 (= res!33163 (simpleValid!42 (_2!1019 lt!24070)))))

(assert (=> d!11555 (= (valid!263 (_2!1019 lt!24070)) e!39300)))

(declare-fun b!59789 () Bool)

(declare-fun res!33164 () Bool)

(assert (=> b!59789 (=> (not res!33164) (not e!39300))))

(assert (=> b!59789 (= res!33164 (= (arrayCountValidKeys!0 (_keys!3666 (_2!1019 lt!24070)) #b00000000000000000000000000000000 (size!2002 (_keys!3666 (_2!1019 lt!24070)))) (_size!357 (_2!1019 lt!24070))))))

(declare-fun b!59790 () Bool)

(declare-fun res!33165 () Bool)

(assert (=> b!59790 (=> (not res!33165) (not e!39300))))

(assert (=> b!59790 (= res!33165 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3666 (_2!1019 lt!24070)) (mask!5926 (_2!1019 lt!24070))))))

(declare-fun b!59791 () Bool)

(assert (=> b!59791 (= e!39300 (arrayNoDuplicates!0 (_keys!3666 (_2!1019 lt!24070)) #b00000000000000000000000000000000 Nil!1419))))

(assert (= (and d!11555 res!33163) b!59789))

(assert (= (and b!59789 res!33164) b!59790))

(assert (= (and b!59790 res!33165) b!59791))

(declare-fun m!51955 () Bool)

(assert (=> d!11555 m!51955))

(declare-fun m!51957 () Bool)

(assert (=> b!59789 m!51957))

(declare-fun m!51959 () Bool)

(assert (=> b!59790 m!51959))

(declare-fun m!51961 () Bool)

(assert (=> b!59791 m!51961))

(assert (=> b!59358 d!11555))

(assert (=> b!59072 d!11365))

(assert (=> d!11313 d!11317))

(assert (=> d!11313 d!11301))

(declare-fun d!11557 () Bool)

(assert (=> d!11557 (contains!678 (+!80 lt!23775 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))) lt!23782)))

(assert (=> d!11557 true))

(declare-fun _$35!300 () Unit!1547)

(assert (=> d!11557 (= (choose!313 lt!23775 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))) lt!23782) _$35!300)))

(declare-fun bs!2591 () Bool)

(assert (= bs!2591 d!11557))

(assert (=> bs!2591 m!50619))

(assert (=> bs!2591 m!50619))

(assert (=> bs!2591 m!50621))

(assert (=> d!11313 d!11557))

(declare-fun d!11559 () Bool)

(declare-fun e!39301 () Bool)

(assert (=> d!11559 e!39301))

(declare-fun res!33166 () Bool)

(assert (=> d!11559 (=> res!33166 e!39301)))

(declare-fun lt!24363 () Bool)

(assert (=> d!11559 (= res!33166 (not lt!24363))))

(declare-fun lt!24362 () Bool)

(assert (=> d!11559 (= lt!24363 lt!24362)))

(declare-fun lt!24361 () Unit!1547)

(declare-fun e!39302 () Unit!1547)

(assert (=> d!11559 (= lt!24361 e!39302)))

(declare-fun c!7697 () Bool)

(assert (=> d!11559 (= c!7697 lt!24362)))

(assert (=> d!11559 (= lt!24362 (containsKey!128 (toList!687 lt!23775) lt!23782))))

(assert (=> d!11559 (= (contains!678 lt!23775 lt!23782) lt!24363)))

(declare-fun b!59793 () Bool)

(declare-fun lt!24364 () Unit!1547)

(assert (=> b!59793 (= e!39302 lt!24364)))

(assert (=> b!59793 (= lt!24364 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 lt!23775) lt!23782))))

(assert (=> b!59793 (isDefined!77 (getValueByKey!125 (toList!687 lt!23775) lt!23782))))

(declare-fun b!59794 () Bool)

(declare-fun Unit!1581 () Unit!1547)

(assert (=> b!59794 (= e!39302 Unit!1581)))

(declare-fun b!59795 () Bool)

(assert (=> b!59795 (= e!39301 (isDefined!77 (getValueByKey!125 (toList!687 lt!23775) lt!23782)))))

(assert (= (and d!11559 c!7697) b!59793))

(assert (= (and d!11559 (not c!7697)) b!59794))

(assert (= (and d!11559 (not res!33166)) b!59795))

(declare-fun m!51963 () Bool)

(assert (=> d!11559 m!51963))

(declare-fun m!51965 () Bool)

(assert (=> b!59793 m!51965))

(declare-fun m!51967 () Bool)

(assert (=> b!59793 m!51967))

(assert (=> b!59793 m!51967))

(declare-fun m!51969 () Bool)

(assert (=> b!59793 m!51969))

(assert (=> b!59795 m!51967))

(assert (=> b!59795 m!51967))

(assert (=> b!59795 m!51969))

(assert (=> d!11313 d!11559))

(declare-fun d!11561 () Bool)

(declare-fun e!39303 () Bool)

(assert (=> d!11561 e!39303))

(declare-fun res!33167 () Bool)

(assert (=> d!11561 (=> res!33167 e!39303)))

(declare-fun lt!24367 () Bool)

(assert (=> d!11561 (= res!33167 (not lt!24367))))

(declare-fun lt!24366 () Bool)

(assert (=> d!11561 (= lt!24367 lt!24366)))

(declare-fun lt!24365 () Unit!1547)

(declare-fun e!39304 () Unit!1547)

(assert (=> d!11561 (= lt!24365 e!39304)))

(declare-fun c!7698 () Bool)

(assert (=> d!11561 (= c!7698 lt!24366)))

(assert (=> d!11561 (= lt!24366 (containsKey!128 (toList!687 lt!23857) (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!11561 (= (contains!678 lt!23857 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)) lt!24367)))

(declare-fun b!59796 () Bool)

(declare-fun lt!24368 () Unit!1547)

(assert (=> b!59796 (= e!39304 lt!24368)))

(assert (=> b!59796 (= lt!24368 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 lt!23857) (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59796 (isDefined!77 (getValueByKey!125 (toList!687 lt!23857) (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59797 () Bool)

(declare-fun Unit!1582 () Unit!1547)

(assert (=> b!59797 (= e!39304 Unit!1582)))

(declare-fun b!59798 () Bool)

(assert (=> b!59798 (= e!39303 (isDefined!77 (getValueByKey!125 (toList!687 lt!23857) (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!11561 c!7698) b!59796))

(assert (= (and d!11561 (not c!7698)) b!59797))

(assert (= (and d!11561 (not res!33167)) b!59798))

(assert (=> d!11561 m!50693))

(declare-fun m!51971 () Bool)

(assert (=> d!11561 m!51971))

(assert (=> b!59796 m!50693))

(declare-fun m!51973 () Bool)

(assert (=> b!59796 m!51973))

(assert (=> b!59796 m!50693))

(declare-fun m!51975 () Bool)

(assert (=> b!59796 m!51975))

(assert (=> b!59796 m!51975))

(declare-fun m!51977 () Bool)

(assert (=> b!59796 m!51977))

(assert (=> b!59798 m!50693))

(assert (=> b!59798 m!51975))

(assert (=> b!59798 m!51975))

(assert (=> b!59798 m!51977))

(assert (=> b!59115 d!11561))

(declare-fun b!59800 () Bool)

(declare-fun e!39305 () Option!131)

(declare-fun e!39306 () Option!131)

(assert (=> b!59800 (= e!39305 e!39306)))

(declare-fun c!7700 () Bool)

(assert (=> b!59800 (= c!7700 (and ((_ is Cons!1419) (toList!687 lt!23989)) (not (= (_1!1018 (h!2000 (toList!687 lt!23989))) (_1!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))))

(declare-fun b!59799 () Bool)

(assert (=> b!59799 (= e!39305 (Some!130 (_2!1018 (h!2000 (toList!687 lt!23989)))))))

(declare-fun c!7699 () Bool)

(declare-fun d!11563 () Bool)

(assert (=> d!11563 (= c!7699 (and ((_ is Cons!1419) (toList!687 lt!23989)) (= (_1!1018 (h!2000 (toList!687 lt!23989))) (_1!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))))

(assert (=> d!11563 (= (getValueByKey!125 (toList!687 lt!23989) (_1!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))) e!39305)))

(declare-fun b!59802 () Bool)

(assert (=> b!59802 (= e!39306 None!129)))

(declare-fun b!59801 () Bool)

(assert (=> b!59801 (= e!39306 (getValueByKey!125 (t!4757 (toList!687 lt!23989)) (_1!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (= (and d!11563 c!7699) b!59799))

(assert (= (and d!11563 (not c!7699)) b!59800))

(assert (= (and b!59800 c!7700) b!59801))

(assert (= (and b!59800 (not c!7700)) b!59802))

(declare-fun m!51979 () Bool)

(assert (=> b!59801 m!51979))

(assert (=> b!59273 d!11563))

(declare-fun d!11565 () Bool)

(assert (=> d!11565 (isDefined!77 (getValueByKey!125 (toList!687 e!38747) (ite c!7461 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (select (arr!1772 (_keys!3666 newMap!16)) (index!3008 lt!23716)))))))

(declare-fun lt!24369 () Unit!1547)

(assert (=> d!11565 (= lt!24369 (choose!311 (toList!687 e!38747) (ite c!7461 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (select (arr!1772 (_keys!3666 newMap!16)) (index!3008 lt!23716)))))))

(declare-fun e!39307 () Bool)

(assert (=> d!11565 e!39307))

(declare-fun res!33168 () Bool)

(assert (=> d!11565 (=> (not res!33168) (not e!39307))))

(assert (=> d!11565 (= res!33168 (isStrictlySorted!271 (toList!687 e!38747)))))

(assert (=> d!11565 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 e!38747) (ite c!7461 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (select (arr!1772 (_keys!3666 newMap!16)) (index!3008 lt!23716)))) lt!24369)))

(declare-fun b!59803 () Bool)

(assert (=> b!59803 (= e!39307 (containsKey!128 (toList!687 e!38747) (ite c!7461 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (select (arr!1772 (_keys!3666 newMap!16)) (index!3008 lt!23716)))))))

(assert (= (and d!11565 res!33168) b!59803))

(assert (=> d!11565 m!51197))

(assert (=> d!11565 m!51197))

(assert (=> d!11565 m!51199))

(declare-fun m!51981 () Bool)

(assert (=> d!11565 m!51981))

(declare-fun m!51983 () Bool)

(assert (=> d!11565 m!51983))

(assert (=> b!59803 m!51193))

(assert (=> b!59370 d!11565))

(declare-fun d!11567 () Bool)

(assert (=> d!11567 (= (isDefined!77 (getValueByKey!125 (toList!687 e!38747) (ite c!7461 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (select (arr!1772 (_keys!3666 newMap!16)) (index!3008 lt!23716))))) (not (isEmpty!299 (getValueByKey!125 (toList!687 e!38747) (ite c!7461 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (select (arr!1772 (_keys!3666 newMap!16)) (index!3008 lt!23716)))))))))

(declare-fun bs!2592 () Bool)

(assert (= bs!2592 d!11567))

(assert (=> bs!2592 m!51197))

(declare-fun m!51985 () Bool)

(assert (=> bs!2592 m!51985))

(assert (=> b!59370 d!11567))

(declare-fun b!59805 () Bool)

(declare-fun e!39308 () Option!131)

(declare-fun e!39309 () Option!131)

(assert (=> b!59805 (= e!39308 e!39309)))

(declare-fun c!7702 () Bool)

(assert (=> b!59805 (= c!7702 (and ((_ is Cons!1419) (toList!687 e!38747)) (not (= (_1!1018 (h!2000 (toList!687 e!38747))) (ite c!7461 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (select (arr!1772 (_keys!3666 newMap!16)) (index!3008 lt!23716)))))))))

(declare-fun b!59804 () Bool)

(assert (=> b!59804 (= e!39308 (Some!130 (_2!1018 (h!2000 (toList!687 e!38747)))))))

(declare-fun c!7701 () Bool)

(declare-fun d!11569 () Bool)

(assert (=> d!11569 (= c!7701 (and ((_ is Cons!1419) (toList!687 e!38747)) (= (_1!1018 (h!2000 (toList!687 e!38747))) (ite c!7461 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (select (arr!1772 (_keys!3666 newMap!16)) (index!3008 lt!23716))))))))

(assert (=> d!11569 (= (getValueByKey!125 (toList!687 e!38747) (ite c!7461 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (select (arr!1772 (_keys!3666 newMap!16)) (index!3008 lt!23716)))) e!39308)))

(declare-fun b!59807 () Bool)

(assert (=> b!59807 (= e!39309 None!129)))

(declare-fun b!59806 () Bool)

(assert (=> b!59806 (= e!39309 (getValueByKey!125 (t!4757 (toList!687 e!38747)) (ite c!7461 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (select (arr!1772 (_keys!3666 newMap!16)) (index!3008 lt!23716)))))))

(assert (= (and d!11569 c!7701) b!59804))

(assert (= (and d!11569 (not c!7701)) b!59805))

(assert (= (and b!59805 c!7702) b!59806))

(assert (= (and b!59805 (not c!7702)) b!59807))

(declare-fun m!51987 () Bool)

(assert (=> b!59806 m!51987))

(assert (=> b!59370 d!11569))

(assert (=> b!59131 d!11365))

(declare-fun d!11571 () Bool)

(assert (=> d!11571 (= (apply!66 lt!23935 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1075 (getValueByKey!125 (toList!687 lt!23935) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!2593 () Bool)

(assert (= bs!2593 d!11571))

(assert (=> bs!2593 m!50573))

(declare-fun m!51989 () Bool)

(assert (=> bs!2593 m!51989))

(assert (=> bs!2593 m!51989))

(declare-fun m!51991 () Bool)

(assert (=> bs!2593 m!51991))

(assert (=> b!59218 d!11571))

(assert (=> b!59218 d!11269))

(declare-fun b!59809 () Bool)

(declare-fun e!39310 () Option!131)

(declare-fun e!39311 () Option!131)

(assert (=> b!59809 (= e!39310 e!39311)))

(declare-fun c!7704 () Bool)

(assert (=> b!59809 (= c!7704 (and ((_ is Cons!1419) (toList!687 lt!23952)) (not (= (_1!1018 (h!2000 (toList!687 lt!23952))) (_1!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))))))

(declare-fun b!59808 () Bool)

(assert (=> b!59808 (= e!39310 (Some!130 (_2!1018 (h!2000 (toList!687 lt!23952)))))))

(declare-fun c!7703 () Bool)

(declare-fun d!11573 () Bool)

(assert (=> d!11573 (= c!7703 (and ((_ is Cons!1419) (toList!687 lt!23952)) (= (_1!1018 (h!2000 (toList!687 lt!23952))) (_1!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (=> d!11573 (= (getValueByKey!125 (toList!687 lt!23952) (_1!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))) e!39310)))

(declare-fun b!59811 () Bool)

(assert (=> b!59811 (= e!39311 None!129)))

(declare-fun b!59810 () Bool)

(assert (=> b!59810 (= e!39311 (getValueByKey!125 (t!4757 (toList!687 lt!23952)) (_1!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(assert (= (and d!11573 c!7703) b!59808))

(assert (= (and d!11573 (not c!7703)) b!59809))

(assert (= (and b!59809 c!7704) b!59810))

(assert (= (and b!59809 (not c!7704)) b!59811))

(declare-fun m!51993 () Bool)

(assert (=> b!59810 m!51993))

(assert (=> b!59228 d!11573))

(declare-fun b!59812 () Bool)

(declare-fun e!39312 () Bool)

(declare-fun call!4513 () Bool)

(assert (=> b!59812 (= e!39312 call!4513)))

(declare-fun bm!4510 () Bool)

(assert (=> bm!4510 (= call!4513 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3666 (_2!1019 lt!23711)) (mask!5926 (_2!1019 lt!23711))))))

(declare-fun b!59813 () Bool)

(declare-fun e!39313 () Bool)

(assert (=> b!59813 (= e!39313 call!4513)))

(declare-fun b!59814 () Bool)

(declare-fun e!39314 () Bool)

(assert (=> b!59814 (= e!39314 e!39312)))

(declare-fun c!7705 () Bool)

(assert (=> b!59814 (= c!7705 (validKeyInArray!0 (select (arr!1772 (_keys!3666 (_2!1019 lt!23711))) #b00000000000000000000000000000000)))))

(declare-fun d!11575 () Bool)

(declare-fun res!33170 () Bool)

(assert (=> d!11575 (=> res!33170 e!39314)))

(assert (=> d!11575 (= res!33170 (bvsge #b00000000000000000000000000000000 (size!2002 (_keys!3666 (_2!1019 lt!23711)))))))

(assert (=> d!11575 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3666 (_2!1019 lt!23711)) (mask!5926 (_2!1019 lt!23711))) e!39314)))

(declare-fun b!59815 () Bool)

(assert (=> b!59815 (= e!39312 e!39313)))

(declare-fun lt!24371 () (_ BitVec 64))

(assert (=> b!59815 (= lt!24371 (select (arr!1772 (_keys!3666 (_2!1019 lt!23711))) #b00000000000000000000000000000000))))

(declare-fun lt!24370 () Unit!1547)

(assert (=> b!59815 (= lt!24370 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3666 (_2!1019 lt!23711)) lt!24371 #b00000000000000000000000000000000))))

(assert (=> b!59815 (arrayContainsKey!0 (_keys!3666 (_2!1019 lt!23711)) lt!24371 #b00000000000000000000000000000000)))

(declare-fun lt!24372 () Unit!1547)

(assert (=> b!59815 (= lt!24372 lt!24370)))

(declare-fun res!33169 () Bool)

(assert (=> b!59815 (= res!33169 (= (seekEntryOrOpen!0 (select (arr!1772 (_keys!3666 (_2!1019 lt!23711))) #b00000000000000000000000000000000) (_keys!3666 (_2!1019 lt!23711)) (mask!5926 (_2!1019 lt!23711))) (Found!221 #b00000000000000000000000000000000)))))

(assert (=> b!59815 (=> (not res!33169) (not e!39313))))

(assert (= (and d!11575 (not res!33170)) b!59814))

(assert (= (and b!59814 c!7705) b!59815))

(assert (= (and b!59814 (not c!7705)) b!59812))

(assert (= (and b!59815 res!33169) b!59813))

(assert (= (or b!59813 b!59812) bm!4510))

(declare-fun m!51995 () Bool)

(assert (=> bm!4510 m!51995))

(assert (=> b!59814 m!51383))

(assert (=> b!59814 m!51383))

(assert (=> b!59814 m!51385))

(assert (=> b!59815 m!51383))

(declare-fun m!51997 () Bool)

(assert (=> b!59815 m!51997))

(declare-fun m!51999 () Bool)

(assert (=> b!59815 m!51999))

(assert (=> b!59815 m!51383))

(declare-fun m!52001 () Bool)

(assert (=> b!59815 m!52001))

(assert (=> b!59181 d!11575))

(declare-fun d!11577 () Bool)

(assert (=> d!11577 (= (inRange!0 (ite c!7582 (index!3008 lt!24082) (ite c!7583 (index!3007 lt!24092) (index!3010 lt!24092))) (mask!5926 newMap!16)) (and (bvsge (ite c!7582 (index!3008 lt!24082) (ite c!7583 (index!3007 lt!24092) (index!3010 lt!24092))) #b00000000000000000000000000000000) (bvslt (ite c!7582 (index!3008 lt!24082) (ite c!7583 (index!3007 lt!24092) (index!3010 lt!24092))) (bvadd (mask!5926 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4442 d!11577))

(assert (=> b!59127 d!11365))

(declare-fun d!11579 () Bool)

(declare-fun e!39315 () Bool)

(assert (=> d!11579 e!39315))

(declare-fun res!33171 () Bool)

(assert (=> d!11579 (=> res!33171 e!39315)))

(declare-fun lt!24375 () Bool)

(assert (=> d!11579 (= res!33171 (not lt!24375))))

(declare-fun lt!24374 () Bool)

(assert (=> d!11579 (= lt!24375 lt!24374)))

(declare-fun lt!24373 () Unit!1547)

(declare-fun e!39316 () Unit!1547)

(assert (=> d!11579 (= lt!24373 e!39316)))

(declare-fun c!7706 () Bool)

(assert (=> d!11579 (= c!7706 lt!24374)))

(assert (=> d!11579 (= lt!24374 (containsKey!128 (toList!687 lt!23935) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!11579 (= (contains!678 lt!23935 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!24375)))

(declare-fun b!59816 () Bool)

(declare-fun lt!24376 () Unit!1547)

(assert (=> b!59816 (= e!39316 lt!24376)))

(assert (=> b!59816 (= lt!24376 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 lt!23935) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!59816 (isDefined!77 (getValueByKey!125 (toList!687 lt!23935) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!59817 () Bool)

(declare-fun Unit!1583 () Unit!1547)

(assert (=> b!59817 (= e!39316 Unit!1583)))

(declare-fun b!59818 () Bool)

(assert (=> b!59818 (= e!39315 (isDefined!77 (getValueByKey!125 (toList!687 lt!23935) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!11579 c!7706) b!59816))

(assert (= (and d!11579 (not c!7706)) b!59817))

(assert (= (and d!11579 (not res!33171)) b!59818))

(assert (=> d!11579 m!50573))

(declare-fun m!52003 () Bool)

(assert (=> d!11579 m!52003))

(assert (=> b!59816 m!50573))

(declare-fun m!52005 () Bool)

(assert (=> b!59816 m!52005))

(assert (=> b!59816 m!50573))

(assert (=> b!59816 m!51989))

(assert (=> b!59816 m!51989))

(declare-fun m!52007 () Bool)

(assert (=> b!59816 m!52007))

(assert (=> b!59818 m!50573))

(assert (=> b!59818 m!51989))

(assert (=> b!59818 m!51989))

(assert (=> b!59818 m!52007))

(assert (=> b!59214 d!11579))

(declare-fun d!11581 () Bool)

(declare-fun e!39317 () Bool)

(assert (=> d!11581 e!39317))

(declare-fun res!33172 () Bool)

(assert (=> d!11581 (=> res!33172 e!39317)))

(declare-fun lt!24379 () Bool)

(assert (=> d!11581 (= res!33172 (not lt!24379))))

(declare-fun lt!24378 () Bool)

(assert (=> d!11581 (= lt!24379 lt!24378)))

(declare-fun lt!24377 () Unit!1547)

(declare-fun e!39318 () Unit!1547)

(assert (=> d!11581 (= lt!24377 e!39318)))

(declare-fun c!7707 () Bool)

(assert (=> d!11581 (= c!7707 lt!24378)))

(assert (=> d!11581 (= lt!24378 (containsKey!128 (toList!687 lt!23788) lt!23778))))

(assert (=> d!11581 (= (contains!678 lt!23788 lt!23778) lt!24379)))

(declare-fun b!59819 () Bool)

(declare-fun lt!24380 () Unit!1547)

(assert (=> b!59819 (= e!39318 lt!24380)))

(assert (=> b!59819 (= lt!24380 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 lt!23788) lt!23778))))

(assert (=> b!59819 (isDefined!77 (getValueByKey!125 (toList!687 lt!23788) lt!23778))))

(declare-fun b!59820 () Bool)

(declare-fun Unit!1584 () Unit!1547)

(assert (=> b!59820 (= e!39318 Unit!1584)))

(declare-fun b!59821 () Bool)

(assert (=> b!59821 (= e!39317 (isDefined!77 (getValueByKey!125 (toList!687 lt!23788) lt!23778)))))

(assert (= (and d!11581 c!7707) b!59819))

(assert (= (and d!11581 (not c!7707)) b!59820))

(assert (= (and d!11581 (not res!33172)) b!59821))

(declare-fun m!52009 () Bool)

(assert (=> d!11581 m!52009))

(declare-fun m!52011 () Bool)

(assert (=> b!59819 m!52011))

(assert (=> b!59819 m!50973))

(assert (=> b!59819 m!50973))

(declare-fun m!52013 () Bool)

(assert (=> b!59819 m!52013))

(assert (=> b!59821 m!50973))

(assert (=> b!59821 m!50973))

(assert (=> b!59821 m!52013))

(assert (=> d!11305 d!11581))

(assert (=> d!11305 d!11293))

(assert (=> d!11305 d!11295))

(assert (=> d!11305 d!11299))

(declare-fun d!11583 () Bool)

(assert (=> d!11583 (= (apply!66 (+!80 lt!23788 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) lt!23778) (apply!66 lt!23788 lt!23778))))

(assert (=> d!11583 true))

(declare-fun _$34!763 () Unit!1547)

(assert (=> d!11583 (= (choose!312 lt!23788 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992))) lt!23778) _$34!763)))

(declare-fun bs!2594 () Bool)

(assert (= bs!2594 d!11583))

(assert (=> bs!2594 m!50597))

(assert (=> bs!2594 m!50597))

(assert (=> bs!2594 m!50617))

(assert (=> bs!2594 m!50601))

(assert (=> d!11305 d!11583))

(assert (=> b!59352 d!11327))

(declare-fun d!11585 () Bool)

(assert (=> d!11585 (= (get!1075 (getValueByKey!125 (toList!687 lt!23783) #b1000000000000000000000000000000000000000000000000000000000000000)) (v!2387 (getValueByKey!125 (toList!687 lt!23783) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!11229 d!11585))

(assert (=> d!11229 d!11549))

(declare-fun d!11587 () Bool)

(declare-fun e!39319 () Bool)

(assert (=> d!11587 e!39319))

(declare-fun res!33173 () Bool)

(assert (=> d!11587 (=> res!33173 e!39319)))

(declare-fun lt!24383 () Bool)

(assert (=> d!11587 (= res!33173 (not lt!24383))))

(declare-fun lt!24382 () Bool)

(assert (=> d!11587 (= lt!24383 lt!24382)))

(declare-fun lt!24381 () Unit!1547)

(declare-fun e!39320 () Unit!1547)

(assert (=> d!11587 (= lt!24381 e!39320)))

(declare-fun c!7708 () Bool)

(assert (=> d!11587 (= c!7708 lt!24382)))

(assert (=> d!11587 (= lt!24382 (containsKey!128 (toList!687 lt!23989) (_1!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (=> d!11587 (= (contains!678 lt!23989 (_1!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))) lt!24383)))

(declare-fun b!59822 () Bool)

(declare-fun lt!24384 () Unit!1547)

(assert (=> b!59822 (= e!39320 lt!24384)))

(assert (=> b!59822 (= lt!24384 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 lt!23989) (_1!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (=> b!59822 (isDefined!77 (getValueByKey!125 (toList!687 lt!23989) (_1!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(declare-fun b!59823 () Bool)

(declare-fun Unit!1585 () Unit!1547)

(assert (=> b!59823 (= e!39320 Unit!1585)))

(declare-fun b!59824 () Bool)

(assert (=> b!59824 (= e!39319 (isDefined!77 (getValueByKey!125 (toList!687 lt!23989) (_1!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))))

(assert (= (and d!11587 c!7708) b!59822))

(assert (= (and d!11587 (not c!7708)) b!59823))

(assert (= (and d!11587 (not res!33173)) b!59824))

(declare-fun m!52015 () Bool)

(assert (=> d!11587 m!52015))

(declare-fun m!52017 () Bool)

(assert (=> b!59822 m!52017))

(assert (=> b!59822 m!51081))

(assert (=> b!59822 m!51081))

(declare-fun m!52019 () Bool)

(assert (=> b!59822 m!52019))

(assert (=> b!59824 m!51081))

(assert (=> b!59824 m!51081))

(assert (=> b!59824 m!52019))

(assert (=> d!11329 d!11587))

(declare-fun b!59826 () Bool)

(declare-fun e!39321 () Option!131)

(declare-fun e!39322 () Option!131)

(assert (=> b!59826 (= e!39321 e!39322)))

(declare-fun c!7710 () Bool)

(assert (=> b!59826 (= c!7710 (and ((_ is Cons!1419) lt!23990) (not (= (_1!1018 (h!2000 lt!23990)) (_1!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))))

(declare-fun b!59825 () Bool)

(assert (=> b!59825 (= e!39321 (Some!130 (_2!1018 (h!2000 lt!23990))))))

(declare-fun c!7709 () Bool)

(declare-fun d!11589 () Bool)

(assert (=> d!11589 (= c!7709 (and ((_ is Cons!1419) lt!23990) (= (_1!1018 (h!2000 lt!23990)) (_1!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))))

(assert (=> d!11589 (= (getValueByKey!125 lt!23990 (_1!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))) e!39321)))

(declare-fun b!59828 () Bool)

(assert (=> b!59828 (= e!39322 None!129)))

(declare-fun b!59827 () Bool)

(assert (=> b!59827 (= e!39322 (getValueByKey!125 (t!4757 lt!23990) (_1!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (= (and d!11589 c!7709) b!59825))

(assert (= (and d!11589 (not c!7709)) b!59826))

(assert (= (and b!59826 c!7710) b!59827))

(assert (= (and b!59826 (not c!7710)) b!59828))

(declare-fun m!52021 () Bool)

(assert (=> b!59827 m!52021))

(assert (=> d!11329 d!11589))

(declare-fun d!11591 () Bool)

(assert (=> d!11591 (= (getValueByKey!125 lt!23990 (_1!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))) (Some!130 (_2!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(declare-fun lt!24385 () Unit!1547)

(assert (=> d!11591 (= lt!24385 (choose!318 lt!23990 (_1!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) (_2!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(declare-fun e!39323 () Bool)

(assert (=> d!11591 e!39323))

(declare-fun res!33174 () Bool)

(assert (=> d!11591 (=> (not res!33174) (not e!39323))))

(assert (=> d!11591 (= res!33174 (isStrictlySorted!271 lt!23990))))

(assert (=> d!11591 (= (lemmaContainsTupThenGetReturnValue!42 lt!23990 (_1!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) (_2!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))) lt!24385)))

(declare-fun b!59829 () Bool)

(declare-fun res!33175 () Bool)

(assert (=> b!59829 (=> (not res!33175) (not e!39323))))

(assert (=> b!59829 (= res!33175 (containsKey!128 lt!23990 (_1!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(declare-fun b!59830 () Bool)

(assert (=> b!59830 (= e!39323 (contains!680 lt!23990 (tuple2!2015 (_1!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) (_2!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))))

(assert (= (and d!11591 res!33174) b!59829))

(assert (= (and b!59829 res!33175) b!59830))

(assert (=> d!11591 m!51075))

(declare-fun m!52023 () Bool)

(assert (=> d!11591 m!52023))

(declare-fun m!52025 () Bool)

(assert (=> d!11591 m!52025))

(declare-fun m!52027 () Bool)

(assert (=> b!59829 m!52027))

(declare-fun m!52029 () Bool)

(assert (=> b!59830 m!52029))

(assert (=> d!11329 d!11591))

(declare-fun b!59831 () Bool)

(declare-fun e!39326 () List!1423)

(declare-fun call!4515 () List!1423)

(assert (=> b!59831 (= e!39326 call!4515)))

(declare-fun e!39328 () Bool)

(declare-fun b!59832 () Bool)

(declare-fun lt!24386 () List!1423)

(assert (=> b!59832 (= e!39328 (contains!680 lt!24386 (tuple2!2015 (_1!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) (_2!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))))

(declare-fun b!59833 () Bool)

(declare-fun e!39324 () List!1423)

(assert (=> b!59833 (= e!39324 (insertStrictlySorted!45 (t!4757 (toList!687 (ite c!7491 call!4390 (ite c!7493 call!4388 call!4391)))) (_1!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) (_2!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(declare-fun d!11593 () Bool)

(assert (=> d!11593 e!39328))

(declare-fun res!33176 () Bool)

(assert (=> d!11593 (=> (not res!33176) (not e!39328))))

(assert (=> d!11593 (= res!33176 (isStrictlySorted!271 lt!24386))))

(assert (=> d!11593 (= lt!24386 e!39326)))

(declare-fun c!7711 () Bool)

(assert (=> d!11593 (= c!7711 (and ((_ is Cons!1419) (toList!687 (ite c!7491 call!4390 (ite c!7493 call!4388 call!4391)))) (bvslt (_1!1018 (h!2000 (toList!687 (ite c!7491 call!4390 (ite c!7493 call!4388 call!4391))))) (_1!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))))

(assert (=> d!11593 (isStrictlySorted!271 (toList!687 (ite c!7491 call!4390 (ite c!7493 call!4388 call!4391))))))

(assert (=> d!11593 (= (insertStrictlySorted!45 (toList!687 (ite c!7491 call!4390 (ite c!7493 call!4388 call!4391))) (_1!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) (_2!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))) lt!24386)))

(declare-fun bm!4511 () Bool)

(declare-fun call!4514 () List!1423)

(declare-fun call!4516 () List!1423)

(assert (=> bm!4511 (= call!4514 call!4516)))

(declare-fun b!59834 () Bool)

(declare-fun e!39327 () List!1423)

(assert (=> b!59834 (= e!39326 e!39327)))

(declare-fun c!7712 () Bool)

(assert (=> b!59834 (= c!7712 (and ((_ is Cons!1419) (toList!687 (ite c!7491 call!4390 (ite c!7493 call!4388 call!4391)))) (= (_1!1018 (h!2000 (toList!687 (ite c!7491 call!4390 (ite c!7493 call!4388 call!4391))))) (_1!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))))

(declare-fun b!59835 () Bool)

(declare-fun res!33177 () Bool)

(assert (=> b!59835 (=> (not res!33177) (not e!39328))))

(assert (=> b!59835 (= res!33177 (containsKey!128 lt!24386 (_1!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(declare-fun b!59836 () Bool)

(declare-fun e!39325 () List!1423)

(assert (=> b!59836 (= e!39325 call!4514)))

(declare-fun bm!4512 () Bool)

(assert (=> bm!4512 (= call!4515 ($colon$colon!59 e!39324 (ite c!7711 (h!2000 (toList!687 (ite c!7491 call!4390 (ite c!7493 call!4388 call!4391)))) (tuple2!2015 (_1!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) (_2!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))))

(declare-fun c!7713 () Bool)

(assert (=> bm!4512 (= c!7713 c!7711)))

(declare-fun b!59837 () Bool)

(assert (=> b!59837 (= e!39325 call!4514)))

(declare-fun b!59838 () Bool)

(assert (=> b!59838 (= e!39327 call!4516)))

(declare-fun bm!4513 () Bool)

(assert (=> bm!4513 (= call!4516 call!4515)))

(declare-fun c!7714 () Bool)

(declare-fun b!59839 () Bool)

(assert (=> b!59839 (= c!7714 (and ((_ is Cons!1419) (toList!687 (ite c!7491 call!4390 (ite c!7493 call!4388 call!4391)))) (bvsgt (_1!1018 (h!2000 (toList!687 (ite c!7491 call!4390 (ite c!7493 call!4388 call!4391))))) (_1!1018 (ite (or c!7491 c!7493) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))))

(assert (=> b!59839 (= e!39327 e!39325)))

(declare-fun b!59840 () Bool)

(assert (=> b!59840 (= e!39324 (ite c!7712 (t!4757 (toList!687 (ite c!7491 call!4390 (ite c!7493 call!4388 call!4391)))) (ite c!7714 (Cons!1419 (h!2000 (toList!687 (ite c!7491 call!4390 (ite c!7493 call!4388 call!4391)))) (t!4757 (toList!687 (ite c!7491 call!4390 (ite c!7493 call!4388 call!4391))))) Nil!1420)))))

(assert (= (and d!11593 c!7711) b!59831))

(assert (= (and d!11593 (not c!7711)) b!59834))

(assert (= (and b!59834 c!7712) b!59838))

(assert (= (and b!59834 (not c!7712)) b!59839))

(assert (= (and b!59839 c!7714) b!59837))

(assert (= (and b!59839 (not c!7714)) b!59836))

(assert (= (or b!59837 b!59836) bm!4511))

(assert (= (or b!59838 bm!4511) bm!4513))

(assert (= (or b!59831 bm!4513) bm!4512))

(assert (= (and bm!4512 c!7713) b!59833))

(assert (= (and bm!4512 (not c!7713)) b!59840))

(assert (= (and d!11593 res!33176) b!59835))

(assert (= (and b!59835 res!33177) b!59832))

(declare-fun m!52031 () Bool)

(assert (=> b!59832 m!52031))

(declare-fun m!52033 () Bool)

(assert (=> b!59833 m!52033))

(declare-fun m!52035 () Bool)

(assert (=> bm!4512 m!52035))

(declare-fun m!52037 () Bool)

(assert (=> b!59835 m!52037))

(declare-fun m!52039 () Bool)

(assert (=> d!11593 m!52039))

(declare-fun m!52041 () Bool)

(assert (=> d!11593 m!52041))

(assert (=> d!11329 d!11593))

(declare-fun d!11595 () Bool)

(assert (=> d!11595 (= (isDefined!77 (getValueByKey!125 (toList!687 (+!80 lt!23775 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!23782)) (not (isEmpty!299 (getValueByKey!125 (toList!687 (+!80 lt!23775 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!23782))))))

(declare-fun bs!2595 () Bool)

(assert (= bs!2595 d!11595))

(assert (=> bs!2595 m!51037))

(declare-fun m!52043 () Bool)

(assert (=> bs!2595 m!52043))

(assert (=> b!59239 d!11595))

(declare-fun b!59842 () Bool)

(declare-fun e!39329 () Option!131)

(declare-fun e!39330 () Option!131)

(assert (=> b!59842 (= e!39329 e!39330)))

(declare-fun c!7716 () Bool)

(assert (=> b!59842 (= c!7716 (and ((_ is Cons!1419) (toList!687 (+!80 lt!23775 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))) (not (= (_1!1018 (h!2000 (toList!687 (+!80 lt!23775 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))) lt!23782))))))

(declare-fun b!59841 () Bool)

(assert (=> b!59841 (= e!39329 (Some!130 (_2!1018 (h!2000 (toList!687 (+!80 lt!23775 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))))))))

(declare-fun c!7715 () Bool)

(declare-fun d!11597 () Bool)

(assert (=> d!11597 (= c!7715 (and ((_ is Cons!1419) (toList!687 (+!80 lt!23775 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))) (= (_1!1018 (h!2000 (toList!687 (+!80 lt!23775 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))) lt!23782)))))

(assert (=> d!11597 (= (getValueByKey!125 (toList!687 (+!80 lt!23775 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!23782) e!39329)))

(declare-fun b!59844 () Bool)

(assert (=> b!59844 (= e!39330 None!129)))

(declare-fun b!59843 () Bool)

(assert (=> b!59843 (= e!39330 (getValueByKey!125 (t!4757 (toList!687 (+!80 lt!23775 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))) lt!23782))))

(assert (= (and d!11597 c!7715) b!59841))

(assert (= (and d!11597 (not c!7715)) b!59842))

(assert (= (and b!59842 c!7716) b!59843))

(assert (= (and b!59842 (not c!7716)) b!59844))

(declare-fun m!52045 () Bool)

(assert (=> b!59843 m!52045))

(assert (=> b!59239 d!11597))

(assert (=> b!59211 d!11447))

(assert (=> d!11237 d!11233))

(declare-fun d!11599 () Bool)

(declare-fun e!39333 () Bool)

(assert (=> d!11599 e!39333))

(declare-fun res!33182 () Bool)

(assert (=> d!11599 (=> (not res!33182) (not e!39333))))

(declare-fun lt!24389 () SeekEntryResult!221)

(assert (=> d!11599 (= res!33182 ((_ is Found!221) lt!24389))))

(assert (=> d!11599 (= lt!24389 (seekEntryOrOpen!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (_keys!3666 newMap!16) (mask!5926 newMap!16)))))

(assert (=> d!11599 true))

(declare-fun _$33!42 () Unit!1547)

(assert (=> d!11599 (= (choose!309 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (defaultEntry!2042 newMap!16)) _$33!42)))

(declare-fun b!59849 () Bool)

(declare-fun res!33183 () Bool)

(assert (=> b!59849 (=> (not res!33183) (not e!39333))))

(assert (=> b!59849 (= res!33183 (inRange!0 (index!3008 lt!24389) (mask!5926 newMap!16)))))

(declare-fun b!59850 () Bool)

(assert (=> b!59850 (= e!39333 (= (select (arr!1772 (_keys!3666 newMap!16)) (index!3008 lt!24389)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(assert (= (and d!11599 res!33182) b!59849))

(assert (= (and b!59849 res!33183) b!59850))

(assert (=> d!11599 m!50367))

(assert (=> d!11599 m!50525))

(declare-fun m!52047 () Bool)

(assert (=> b!59849 m!52047))

(declare-fun m!52049 () Bool)

(assert (=> b!59850 m!52049))

(assert (=> d!11237 d!11599))

(assert (=> d!11237 d!11363))

(declare-fun d!11601 () Bool)

(declare-fun res!33184 () Bool)

(declare-fun e!39334 () Bool)

(assert (=> d!11601 (=> res!33184 e!39334)))

(assert (=> d!11601 (= res!33184 (and ((_ is Cons!1419) (toList!687 lt!23783)) (= (_1!1018 (h!2000 (toList!687 lt!23783))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!11601 (= (containsKey!128 (toList!687 lt!23783) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!39334)))

(declare-fun b!59851 () Bool)

(declare-fun e!39335 () Bool)

(assert (=> b!59851 (= e!39334 e!39335)))

(declare-fun res!33185 () Bool)

(assert (=> b!59851 (=> (not res!33185) (not e!39335))))

(assert (=> b!59851 (= res!33185 (and (or (not ((_ is Cons!1419) (toList!687 lt!23783))) (bvsle (_1!1018 (h!2000 (toList!687 lt!23783))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) ((_ is Cons!1419) (toList!687 lt!23783)) (bvslt (_1!1018 (h!2000 (toList!687 lt!23783))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun b!59852 () Bool)

(assert (=> b!59852 (= e!39335 (containsKey!128 (t!4757 (toList!687 lt!23783)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!11601 (not res!33184)) b!59851))

(assert (= (and b!59851 res!33185) b!59852))

(assert (=> b!59852 m!50573))

(declare-fun m!52051 () Bool)

(assert (=> b!59852 m!52051))

(assert (=> d!11285 d!11601))

(declare-fun d!11603 () Bool)

(declare-fun lt!24390 () Bool)

(assert (=> d!11603 (= lt!24390 (select (content!64 Nil!1419) (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!39336 () Bool)

(assert (=> d!11603 (= lt!24390 e!39336)))

(declare-fun res!33186 () Bool)

(assert (=> d!11603 (=> (not res!33186) (not e!39336))))

(assert (=> d!11603 (= res!33186 ((_ is Cons!1418) Nil!1419))))

(assert (=> d!11603 (= (contains!679 Nil!1419 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)) lt!24390)))

(declare-fun b!59853 () Bool)

(declare-fun e!39337 () Bool)

(assert (=> b!59853 (= e!39336 e!39337)))

(declare-fun res!33187 () Bool)

(assert (=> b!59853 (=> res!33187 e!39337)))

(assert (=> b!59853 (= res!33187 (= (h!1999 Nil!1419) (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59854 () Bool)

(assert (=> b!59854 (= e!39337 (contains!679 (t!4756 Nil!1419) (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!11603 res!33186) b!59853))

(assert (= (and b!59853 (not res!33187)) b!59854))

(assert (=> d!11603 m!51085))

(assert (=> d!11603 m!50693))

(declare-fun m!52053 () Bool)

(assert (=> d!11603 m!52053))

(assert (=> b!59854 m!50693))

(declare-fun m!52055 () Bool)

(assert (=> b!59854 m!52055))

(assert (=> b!59300 d!11603))

(assert (=> b!59294 d!11365))

(declare-fun d!11605 () Bool)

(declare-fun e!39338 () Bool)

(assert (=> d!11605 e!39338))

(declare-fun res!33188 () Bool)

(assert (=> d!11605 (=> res!33188 e!39338)))

(declare-fun lt!24393 () Bool)

(assert (=> d!11605 (= res!33188 (not lt!24393))))

(declare-fun lt!24392 () Bool)

(assert (=> d!11605 (= lt!24393 lt!24392)))

(declare-fun lt!24391 () Unit!1547)

(declare-fun e!39339 () Unit!1547)

(assert (=> d!11605 (= lt!24391 e!39339)))

(declare-fun c!7717 () Bool)

(assert (=> d!11605 (= c!7717 lt!24392)))

(assert (=> d!11605 (= lt!24392 (containsKey!128 (toList!687 lt!23952) (_1!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(assert (=> d!11605 (= (contains!678 lt!23952 (_1!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!24393)))

(declare-fun b!59855 () Bool)

(declare-fun lt!24394 () Unit!1547)

(assert (=> b!59855 (= e!39339 lt!24394)))

(assert (=> b!59855 (= lt!24394 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 lt!23952) (_1!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(assert (=> b!59855 (isDefined!77 (getValueByKey!125 (toList!687 lt!23952) (_1!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun b!59856 () Bool)

(declare-fun Unit!1586 () Unit!1547)

(assert (=> b!59856 (= e!39339 Unit!1586)))

(declare-fun b!59857 () Bool)

(assert (=> b!59857 (= e!39338 (isDefined!77 (getValueByKey!125 (toList!687 lt!23952) (_1!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (= (and d!11605 c!7717) b!59855))

(assert (= (and d!11605 (not c!7717)) b!59856))

(assert (= (and d!11605 (not res!33188)) b!59857))

(declare-fun m!52057 () Bool)

(assert (=> d!11605 m!52057))

(declare-fun m!52059 () Bool)

(assert (=> b!59855 m!52059))

(assert (=> b!59855 m!50985))

(assert (=> b!59855 m!50985))

(declare-fun m!52061 () Bool)

(assert (=> b!59855 m!52061))

(assert (=> b!59857 m!50985))

(assert (=> b!59857 m!50985))

(assert (=> b!59857 m!52061))

(assert (=> d!11301 d!11605))

(declare-fun b!59859 () Bool)

(declare-fun e!39340 () Option!131)

(declare-fun e!39341 () Option!131)

(assert (=> b!59859 (= e!39340 e!39341)))

(declare-fun c!7719 () Bool)

(assert (=> b!59859 (= c!7719 (and ((_ is Cons!1419) lt!23953) (not (= (_1!1018 (h!2000 lt!23953)) (_1!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))))))

(declare-fun b!59858 () Bool)

(assert (=> b!59858 (= e!39340 (Some!130 (_2!1018 (h!2000 lt!23953))))))

(declare-fun d!11607 () Bool)

(declare-fun c!7718 () Bool)

(assert (=> d!11607 (= c!7718 (and ((_ is Cons!1419) lt!23953) (= (_1!1018 (h!2000 lt!23953)) (_1!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (=> d!11607 (= (getValueByKey!125 lt!23953 (_1!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))) e!39340)))

(declare-fun b!59861 () Bool)

(assert (=> b!59861 (= e!39341 None!129)))

(declare-fun b!59860 () Bool)

(assert (=> b!59860 (= e!39341 (getValueByKey!125 (t!4757 lt!23953) (_1!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(assert (= (and d!11607 c!7718) b!59858))

(assert (= (and d!11607 (not c!7718)) b!59859))

(assert (= (and b!59859 c!7719) b!59860))

(assert (= (and b!59859 (not c!7719)) b!59861))

(declare-fun m!52063 () Bool)

(assert (=> b!59860 m!52063))

(assert (=> d!11301 d!11607))

(declare-fun d!11609 () Bool)

(assert (=> d!11609 (= (getValueByKey!125 lt!23953 (_1!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))) (Some!130 (_2!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun lt!24395 () Unit!1547)

(assert (=> d!11609 (= lt!24395 (choose!318 lt!23953 (_1!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun e!39342 () Bool)

(assert (=> d!11609 e!39342))

(declare-fun res!33189 () Bool)

(assert (=> d!11609 (=> (not res!33189) (not e!39342))))

(assert (=> d!11609 (= res!33189 (isStrictlySorted!271 lt!23953))))

(assert (=> d!11609 (= (lemmaContainsTupThenGetReturnValue!42 lt!23953 (_1!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!24395)))

(declare-fun b!59862 () Bool)

(declare-fun res!33190 () Bool)

(assert (=> b!59862 (=> (not res!33190) (not e!39342))))

(assert (=> b!59862 (= res!33190 (containsKey!128 lt!23953 (_1!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun b!59863 () Bool)

(assert (=> b!59863 (= e!39342 (contains!680 lt!23953 (tuple2!2015 (_1!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (= (and d!11609 res!33189) b!59862))

(assert (= (and b!59862 res!33190) b!59863))

(assert (=> d!11609 m!50979))

(declare-fun m!52065 () Bool)

(assert (=> d!11609 m!52065))

(declare-fun m!52067 () Bool)

(assert (=> d!11609 m!52067))

(declare-fun m!52069 () Bool)

(assert (=> b!59862 m!52069))

(declare-fun m!52071 () Bool)

(assert (=> b!59863 m!52071))

(assert (=> d!11301 d!11609))

(declare-fun b!59864 () Bool)

(declare-fun e!39345 () List!1423)

(declare-fun call!4518 () List!1423)

(assert (=> b!59864 (= e!39345 call!4518)))

(declare-fun b!59865 () Bool)

(declare-fun lt!24396 () List!1423)

(declare-fun e!39347 () Bool)

(assert (=> b!59865 (= e!39347 (contains!680 lt!24396 (tuple2!2015 (_1!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(declare-fun e!39343 () List!1423)

(declare-fun b!59866 () Bool)

(assert (=> b!59866 (= e!39343 (insertStrictlySorted!45 (t!4757 (toList!687 lt!23775)) (_1!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun d!11611 () Bool)

(assert (=> d!11611 e!39347))

(declare-fun res!33191 () Bool)

(assert (=> d!11611 (=> (not res!33191) (not e!39347))))

(assert (=> d!11611 (= res!33191 (isStrictlySorted!271 lt!24396))))

(assert (=> d!11611 (= lt!24396 e!39345)))

(declare-fun c!7720 () Bool)

(assert (=> d!11611 (= c!7720 (and ((_ is Cons!1419) (toList!687 lt!23775)) (bvslt (_1!1018 (h!2000 (toList!687 lt!23775))) (_1!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (=> d!11611 (isStrictlySorted!271 (toList!687 lt!23775))))

(assert (=> d!11611 (= (insertStrictlySorted!45 (toList!687 lt!23775) (_1!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!24396)))

(declare-fun bm!4514 () Bool)

(declare-fun call!4517 () List!1423)

(declare-fun call!4519 () List!1423)

(assert (=> bm!4514 (= call!4517 call!4519)))

(declare-fun b!59867 () Bool)

(declare-fun e!39346 () List!1423)

(assert (=> b!59867 (= e!39345 e!39346)))

(declare-fun c!7721 () Bool)

(assert (=> b!59867 (= c!7721 (and ((_ is Cons!1419) (toList!687 lt!23775)) (= (_1!1018 (h!2000 (toList!687 lt!23775))) (_1!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(declare-fun b!59868 () Bool)

(declare-fun res!33192 () Bool)

(assert (=> b!59868 (=> (not res!33192) (not e!39347))))

(assert (=> b!59868 (= res!33192 (containsKey!128 lt!24396 (_1!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun b!59869 () Bool)

(declare-fun e!39344 () List!1423)

(assert (=> b!59869 (= e!39344 call!4517)))

(declare-fun bm!4515 () Bool)

(assert (=> bm!4515 (= call!4518 ($colon$colon!59 e!39343 (ite c!7720 (h!2000 (toList!687 lt!23775)) (tuple2!2015 (_1!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))))))

(declare-fun c!7722 () Bool)

(assert (=> bm!4515 (= c!7722 c!7720)))

(declare-fun b!59870 () Bool)

(assert (=> b!59870 (= e!39344 call!4517)))

(declare-fun b!59871 () Bool)

(assert (=> b!59871 (= e!39346 call!4519)))

(declare-fun bm!4516 () Bool)

(assert (=> bm!4516 (= call!4519 call!4518)))

(declare-fun c!7723 () Bool)

(declare-fun b!59872 () Bool)

(assert (=> b!59872 (= c!7723 (and ((_ is Cons!1419) (toList!687 lt!23775)) (bvsgt (_1!1018 (h!2000 (toList!687 lt!23775))) (_1!1018 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (=> b!59872 (= e!39346 e!39344)))

(declare-fun b!59873 () Bool)

(assert (=> b!59873 (= e!39343 (ite c!7721 (t!4757 (toList!687 lt!23775)) (ite c!7723 (Cons!1419 (h!2000 (toList!687 lt!23775)) (t!4757 (toList!687 lt!23775))) Nil!1420)))))

(assert (= (and d!11611 c!7720) b!59864))

(assert (= (and d!11611 (not c!7720)) b!59867))

(assert (= (and b!59867 c!7721) b!59871))

(assert (= (and b!59867 (not c!7721)) b!59872))

(assert (= (and b!59872 c!7723) b!59870))

(assert (= (and b!59872 (not c!7723)) b!59869))

(assert (= (or b!59870 b!59869) bm!4514))

(assert (= (or b!59871 bm!4514) bm!4516))

(assert (= (or b!59864 bm!4516) bm!4515))

(assert (= (and bm!4515 c!7722) b!59866))

(assert (= (and bm!4515 (not c!7722)) b!59873))

(assert (= (and d!11611 res!33191) b!59868))

(assert (= (and b!59868 res!33192) b!59865))

(declare-fun m!52073 () Bool)

(assert (=> b!59865 m!52073))

(declare-fun m!52075 () Bool)

(assert (=> b!59866 m!52075))

(declare-fun m!52077 () Bool)

(assert (=> bm!4515 m!52077))

(declare-fun m!52079 () Bool)

(assert (=> b!59868 m!52079))

(declare-fun m!52081 () Bool)

(assert (=> d!11611 m!52081))

(declare-fun m!52083 () Bool)

(assert (=> d!11611 m!52083))

(assert (=> d!11301 d!11611))

(declare-fun b!59874 () Bool)

(declare-fun e!39351 () Bool)

(declare-fun e!39350 () Bool)

(assert (=> b!59874 (= e!39351 e!39350)))

(declare-fun res!33194 () Bool)

(assert (=> b!59874 (=> (not res!33194) (not e!39350))))

(declare-fun e!39348 () Bool)

(assert (=> b!59874 (= res!33194 (not e!39348))))

(declare-fun res!33193 () Bool)

(assert (=> b!59874 (=> (not res!33193) (not e!39348))))

(assert (=> b!59874 (= res!33193 (validKeyInArray!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun b!59875 () Bool)

(declare-fun e!39349 () Bool)

(declare-fun call!4520 () Bool)

(assert (=> b!59875 (= e!39349 call!4520)))

(declare-fun b!59876 () Bool)

(assert (=> b!59876 (= e!39349 call!4520)))

(declare-fun d!11613 () Bool)

(declare-fun res!33195 () Bool)

(assert (=> d!11613 (=> res!33195 e!39351)))

(assert (=> d!11613 (= res!33195 (bvsge (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992))))))))

(assert (=> d!11613 (= (arrayNoDuplicates!0 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!7522 (Cons!1418 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7500 (Cons!1418 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) Nil!1419) Nil!1419)) (ite c!7500 (Cons!1418 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) Nil!1419) Nil!1419))) e!39351)))

(declare-fun bm!4517 () Bool)

(declare-fun c!7724 () Bool)

(assert (=> bm!4517 (= call!4520 (arrayNoDuplicates!0 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!7724 (Cons!1418 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (ite c!7522 (Cons!1418 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7500 (Cons!1418 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) Nil!1419) Nil!1419)) (ite c!7500 (Cons!1418 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) Nil!1419) Nil!1419))) (ite c!7522 (Cons!1418 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7500 (Cons!1418 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) Nil!1419) Nil!1419)) (ite c!7500 (Cons!1418 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) Nil!1419) Nil!1419)))))))

(declare-fun b!59877 () Bool)

(assert (=> b!59877 (= e!39348 (contains!679 (ite c!7522 (Cons!1418 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7500 (Cons!1418 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) Nil!1419) Nil!1419)) (ite c!7500 (Cons!1418 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) Nil!1419) Nil!1419)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun b!59878 () Bool)

(assert (=> b!59878 (= e!39350 e!39349)))

(assert (=> b!59878 (= c!7724 (validKeyInArray!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(assert (= (and d!11613 (not res!33195)) b!59874))

(assert (= (and b!59874 res!33193) b!59877))

(assert (= (and b!59874 res!33194) b!59878))

(assert (= (and b!59878 c!7724) b!59875))

(assert (= (and b!59878 (not c!7724)) b!59876))

(assert (= (or b!59875 b!59876) bm!4517))

(declare-fun m!52085 () Bool)

(assert (=> b!59874 m!52085))

(assert (=> b!59874 m!52085))

(declare-fun m!52087 () Bool)

(assert (=> b!59874 m!52087))

(assert (=> bm!4517 m!52085))

(declare-fun m!52089 () Bool)

(assert (=> bm!4517 m!52089))

(assert (=> b!59877 m!52085))

(assert (=> b!59877 m!52085))

(declare-fun m!52091 () Bool)

(assert (=> b!59877 m!52091))

(assert (=> b!59878 m!52085))

(assert (=> b!59878 m!52085))

(assert (=> b!59878 m!52087))

(assert (=> bm!4402 d!11613))

(assert (=> bm!4441 d!11233))

(declare-fun b!59879 () Bool)

(declare-fun e!39352 () Bool)

(declare-fun call!4521 () Bool)

(assert (=> b!59879 (= e!39352 call!4521)))

(declare-fun bm!4518 () Bool)

(assert (=> bm!4518 (= call!4521 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3666 (v!2382 (underlying!225 thiss!992))) (mask!5926 (v!2382 (underlying!225 thiss!992)))))))

(declare-fun b!59880 () Bool)

(declare-fun e!39353 () Bool)

(assert (=> b!59880 (= e!39353 call!4521)))

(declare-fun b!59881 () Bool)

(declare-fun e!39354 () Bool)

(assert (=> b!59881 (= e!39354 e!39352)))

(declare-fun c!7725 () Bool)

(assert (=> b!59881 (= c!7725 (validKeyInArray!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun d!11615 () Bool)

(declare-fun res!33197 () Bool)

(assert (=> d!11615 (=> res!33197 e!39354)))

(assert (=> d!11615 (= res!33197 (bvsge #b00000000000000000000000000000000 (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992))))))))

(assert (=> d!11615 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (mask!5926 (v!2382 (underlying!225 thiss!992)))) e!39354)))

(declare-fun b!59882 () Bool)

(assert (=> b!59882 (= e!39352 e!39353)))

(declare-fun lt!24398 () (_ BitVec 64))

(assert (=> b!59882 (= lt!24398 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) #b00000000000000000000000000000000))))

(declare-fun lt!24397 () Unit!1547)

(assert (=> b!59882 (= lt!24397 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3666 (v!2382 (underlying!225 thiss!992))) lt!24398 #b00000000000000000000000000000000))))

(assert (=> b!59882 (arrayContainsKey!0 (_keys!3666 (v!2382 (underlying!225 thiss!992))) lt!24398 #b00000000000000000000000000000000)))

(declare-fun lt!24399 () Unit!1547)

(assert (=> b!59882 (= lt!24399 lt!24397)))

(declare-fun res!33196 () Bool)

(assert (=> b!59882 (= res!33196 (= (seekEntryOrOpen!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) #b00000000000000000000000000000000) (_keys!3666 (v!2382 (underlying!225 thiss!992))) (mask!5926 (v!2382 (underlying!225 thiss!992)))) (Found!221 #b00000000000000000000000000000000)))))

(assert (=> b!59882 (=> (not res!33196) (not e!39353))))

(assert (= (and d!11615 (not res!33197)) b!59881))

(assert (= (and b!59881 c!7725) b!59882))

(assert (= (and b!59881 (not c!7725)) b!59879))

(assert (= (and b!59882 res!33196) b!59880))

(assert (= (or b!59880 b!59879) bm!4518))

(declare-fun m!52093 () Bool)

(assert (=> bm!4518 m!52093))

(assert (=> b!59881 m!51643))

(assert (=> b!59881 m!51643))

(assert (=> b!59881 m!51645))

(assert (=> b!59882 m!51643))

(declare-fun m!52095 () Bool)

(assert (=> b!59882 m!52095))

(declare-fun m!52097 () Bool)

(assert (=> b!59882 m!52097))

(assert (=> b!59882 m!51643))

(declare-fun m!52099 () Bool)

(assert (=> b!59882 m!52099))

(assert (=> b!59031 d!11615))

(declare-fun d!11617 () Bool)

(declare-fun lt!24400 () Bool)

(assert (=> d!11617 (= lt!24400 (select (content!65 (toList!687 lt!23962)) (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))))

(declare-fun e!39356 () Bool)

(assert (=> d!11617 (= lt!24400 e!39356)))

(declare-fun res!33199 () Bool)

(assert (=> d!11617 (=> (not res!33199) (not e!39356))))

(assert (=> d!11617 (= res!33199 ((_ is Cons!1419) (toList!687 lt!23962)))))

(assert (=> d!11617 (= (contains!680 (toList!687 lt!23962) (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))) lt!24400)))

(declare-fun b!59883 () Bool)

(declare-fun e!39355 () Bool)

(assert (=> b!59883 (= e!39356 e!39355)))

(declare-fun res!33198 () Bool)

(assert (=> b!59883 (=> res!33198 e!39355)))

(assert (=> b!59883 (= res!33198 (= (h!2000 (toList!687 lt!23962)) (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))))

(declare-fun b!59884 () Bool)

(assert (=> b!59884 (= e!39355 (contains!680 (t!4757 (toList!687 lt!23962)) (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))))

(assert (= (and d!11617 res!33199) b!59883))

(assert (= (and b!59883 (not res!33198)) b!59884))

(declare-fun m!52101 () Bool)

(assert (=> d!11617 m!52101))

(declare-fun m!52103 () Bool)

(assert (=> d!11617 m!52103))

(declare-fun m!52105 () Bool)

(assert (=> b!59884 m!52105))

(assert (=> b!59235 d!11617))

(declare-fun d!11619 () Bool)

(assert (=> d!11619 (= (apply!66 lt!23857 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1075 (getValueByKey!125 (toList!687 lt!23857) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2596 () Bool)

(assert (= bs!2596 d!11619))

(declare-fun m!52107 () Bool)

(assert (=> bs!2596 m!52107))

(assert (=> bs!2596 m!52107))

(declare-fun m!52109 () Bool)

(assert (=> bs!2596 m!52109))

(assert (=> b!59120 d!11619))

(declare-fun d!11621 () Bool)

(declare-fun e!39357 () Bool)

(assert (=> d!11621 e!39357))

(declare-fun res!33200 () Bool)

(assert (=> d!11621 (=> res!33200 e!39357)))

(declare-fun lt!24403 () Bool)

(assert (=> d!11621 (= res!33200 (not lt!24403))))

(declare-fun lt!24402 () Bool)

(assert (=> d!11621 (= lt!24403 lt!24402)))

(declare-fun lt!24401 () Unit!1547)

(declare-fun e!39358 () Unit!1547)

(assert (=> d!11621 (= lt!24401 e!39358)))

(declare-fun c!7726 () Bool)

(assert (=> d!11621 (= c!7726 lt!24402)))

(assert (=> d!11621 (= lt!24402 (containsKey!128 (toList!687 lt!23896) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11621 (= (contains!678 lt!23896 #b0000000000000000000000000000000000000000000000000000000000000000) lt!24403)))

(declare-fun b!59885 () Bool)

(declare-fun lt!24404 () Unit!1547)

(assert (=> b!59885 (= e!39358 lt!24404)))

(assert (=> b!59885 (= lt!24404 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 lt!23896) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59885 (isDefined!77 (getValueByKey!125 (toList!687 lt!23896) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59886 () Bool)

(declare-fun Unit!1587 () Unit!1547)

(assert (=> b!59886 (= e!39358 Unit!1587)))

(declare-fun b!59887 () Bool)

(assert (=> b!59887 (= e!39357 (isDefined!77 (getValueByKey!125 (toList!687 lt!23896) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11621 c!7726) b!59885))

(assert (= (and d!11621 (not c!7726)) b!59886))

(assert (= (and d!11621 (not res!33200)) b!59887))

(declare-fun m!52111 () Bool)

(assert (=> d!11621 m!52111))

(declare-fun m!52113 () Bool)

(assert (=> b!59885 m!52113))

(declare-fun m!52115 () Bool)

(assert (=> b!59885 m!52115))

(assert (=> b!59885 m!52115))

(declare-fun m!52117 () Bool)

(assert (=> b!59885 m!52117))

(assert (=> b!59887 m!52115))

(assert (=> b!59887 m!52115))

(assert (=> b!59887 m!52117))

(assert (=> bm!4419 d!11621))

(declare-fun d!11623 () Bool)

(declare-fun e!39359 () Bool)

(assert (=> d!11623 e!39359))

(declare-fun res!33201 () Bool)

(assert (=> d!11623 (=> res!33201 e!39359)))

(declare-fun lt!24407 () Bool)

(assert (=> d!11623 (= res!33201 (not lt!24407))))

(declare-fun lt!24406 () Bool)

(assert (=> d!11623 (= lt!24407 lt!24406)))

(declare-fun lt!24405 () Unit!1547)

(declare-fun e!39360 () Unit!1547)

(assert (=> d!11623 (= lt!24405 e!39360)))

(declare-fun c!7727 () Bool)

(assert (=> d!11623 (= c!7727 lt!24406)))

(assert (=> d!11623 (= lt!24406 (containsKey!128 (toList!687 (map!1108 (_2!1019 lt!24070))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(assert (=> d!11623 (= (contains!678 (map!1108 (_2!1019 lt!24070)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) lt!24407)))

(declare-fun b!59888 () Bool)

(declare-fun lt!24408 () Unit!1547)

(assert (=> b!59888 (= e!39360 lt!24408)))

(assert (=> b!59888 (= lt!24408 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 (map!1108 (_2!1019 lt!24070))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(assert (=> b!59888 (isDefined!77 (getValueByKey!125 (toList!687 (map!1108 (_2!1019 lt!24070))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(declare-fun b!59889 () Bool)

(declare-fun Unit!1588 () Unit!1547)

(assert (=> b!59889 (= e!39360 Unit!1588)))

(declare-fun b!59890 () Bool)

(assert (=> b!59890 (= e!39359 (isDefined!77 (getValueByKey!125 (toList!687 (map!1108 (_2!1019 lt!24070))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355))))))

(assert (= (and d!11623 c!7727) b!59888))

(assert (= (and d!11623 (not c!7727)) b!59889))

(assert (= (and d!11623 (not res!33201)) b!59890))

(assert (=> d!11623 m!50367))

(declare-fun m!52119 () Bool)

(assert (=> d!11623 m!52119))

(assert (=> b!59888 m!50367))

(declare-fun m!52121 () Bool)

(assert (=> b!59888 m!52121))

(assert (=> b!59888 m!50367))

(declare-fun m!52123 () Bool)

(assert (=> b!59888 m!52123))

(assert (=> b!59888 m!52123))

(declare-fun m!52125 () Bool)

(assert (=> b!59888 m!52125))

(assert (=> b!59890 m!50367))

(assert (=> b!59890 m!52123))

(assert (=> b!59890 m!52123))

(assert (=> b!59890 m!52125))

(assert (=> b!59360 d!11623))

(assert (=> b!59360 d!11371))

(declare-fun b!59892 () Bool)

(declare-fun e!39361 () Option!131)

(declare-fun e!39362 () Option!131)

(assert (=> b!59892 (= e!39361 e!39362)))

(declare-fun c!7729 () Bool)

(assert (=> b!59892 (= c!7729 (and ((_ is Cons!1419) (toList!687 lt!24003)) (not (= (_1!1018 (h!2000 (toList!687 lt!24003))) (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!59891 () Bool)

(assert (=> b!59891 (= e!39361 (Some!130 (_2!1018 (h!2000 (toList!687 lt!24003)))))))

(declare-fun d!11625 () Bool)

(declare-fun c!7728 () Bool)

(assert (=> d!11625 (= c!7728 (and ((_ is Cons!1419) (toList!687 lt!24003)) (= (_1!1018 (h!2000 (toList!687 lt!24003))) (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!11625 (= (getValueByKey!125 (toList!687 lt!24003) (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!39361)))

(declare-fun b!59894 () Bool)

(assert (=> b!59894 (= e!39362 None!129)))

(declare-fun b!59893 () Bool)

(assert (=> b!59893 (= e!39362 (getValueByKey!125 (t!4757 (toList!687 lt!24003)) (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!11625 c!7728) b!59891))

(assert (= (and d!11625 (not c!7728)) b!59892))

(assert (= (and b!59892 c!7729) b!59893))

(assert (= (and b!59892 (not c!7729)) b!59894))

(declare-fun m!52127 () Bool)

(assert (=> b!59893 m!52127))

(assert (=> b!59302 d!11625))

(declare-fun d!11627 () Bool)

(assert (=> d!11627 (= (apply!66 lt!23832 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1075 (getValueByKey!125 (toList!687 lt!23832) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2597 () Bool)

(assert (= bs!2597 d!11627))

(declare-fun m!52129 () Bool)

(assert (=> bs!2597 m!52129))

(assert (=> bs!2597 m!52129))

(declare-fun m!52131 () Bool)

(assert (=> bs!2597 m!52131))

(assert (=> b!59075 d!11627))

(declare-fun d!11629 () Bool)

(declare-fun res!33202 () Bool)

(declare-fun e!39363 () Bool)

(assert (=> d!11629 (=> (not res!33202) (not e!39363))))

(assert (=> d!11629 (= res!33202 (validMask!0 (mask!5926 (v!2382 (underlying!225 thiss!992)))))))

(assert (=> d!11629 (= (simpleValid!42 (v!2382 (underlying!225 thiss!992))) e!39363)))

(declare-fun b!59896 () Bool)

(declare-fun res!33205 () Bool)

(assert (=> b!59896 (=> (not res!33205) (not e!39363))))

(assert (=> b!59896 (= res!33205 (bvsge (size!2008 (v!2382 (underlying!225 thiss!992))) (_size!357 (v!2382 (underlying!225 thiss!992)))))))

(declare-fun b!59897 () Bool)

(declare-fun res!33204 () Bool)

(assert (=> b!59897 (=> (not res!33204) (not e!39363))))

(assert (=> b!59897 (= res!33204 (= (size!2008 (v!2382 (underlying!225 thiss!992))) (bvadd (_size!357 (v!2382 (underlying!225 thiss!992))) (bvsdiv (bvadd (extraKeys!1929 (v!2382 (underlying!225 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!59895 () Bool)

(declare-fun res!33203 () Bool)

(assert (=> b!59895 (=> (not res!33203) (not e!39363))))

(assert (=> b!59895 (= res!33203 (and (= (size!2003 (_values!2025 (v!2382 (underlying!225 thiss!992)))) (bvadd (mask!5926 (v!2382 (underlying!225 thiss!992))) #b00000000000000000000000000000001)) (= (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (size!2003 (_values!2025 (v!2382 (underlying!225 thiss!992))))) (bvsge (_size!357 (v!2382 (underlying!225 thiss!992))) #b00000000000000000000000000000000) (bvsle (_size!357 (v!2382 (underlying!225 thiss!992))) (bvadd (mask!5926 (v!2382 (underlying!225 thiss!992))) #b00000000000000000000000000000001))))))

(declare-fun b!59898 () Bool)

(assert (=> b!59898 (= e!39363 (and (bvsge (extraKeys!1929 (v!2382 (underlying!225 thiss!992))) #b00000000000000000000000000000000) (bvsle (extraKeys!1929 (v!2382 (underlying!225 thiss!992))) #b00000000000000000000000000000011) (bvsge (_vacant!357 (v!2382 (underlying!225 thiss!992))) #b00000000000000000000000000000000)))))

(assert (= (and d!11629 res!33202) b!59895))

(assert (= (and b!59895 res!33203) b!59896))

(assert (= (and b!59896 res!33205) b!59897))

(assert (= (and b!59897 res!33204) b!59898))

(assert (=> d!11629 m!50361))

(declare-fun m!52133 () Bool)

(assert (=> b!59896 m!52133))

(assert (=> b!59897 m!52133))

(assert (=> d!11231 d!11629))

(assert (=> b!59221 d!11393))

(assert (=> b!59221 d!11395))

(assert (=> d!11351 d!11227))

(declare-fun b!59899 () Bool)

(declare-fun e!39364 () Bool)

(declare-fun call!4522 () Bool)

(assert (=> b!59899 (= e!39364 call!4522)))

(declare-fun bm!4519 () Bool)

(assert (=> bm!4519 (= call!4522 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (_keys!3666 newMap!16) (mask!5926 newMap!16)))))

(declare-fun b!59900 () Bool)

(declare-fun e!39365 () Bool)

(assert (=> b!59900 (= e!39365 call!4522)))

(declare-fun b!59901 () Bool)

(declare-fun e!39366 () Bool)

(assert (=> b!59901 (= e!39366 e!39364)))

(declare-fun c!7730 () Bool)

(assert (=> b!59901 (= c!7730 (validKeyInArray!0 (select (arr!1772 (_keys!3666 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun d!11631 () Bool)

(declare-fun res!33207 () Bool)

(assert (=> d!11631 (=> res!33207 e!39366)))

(assert (=> d!11631 (= res!33207 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2002 (_keys!3666 newMap!16))))))

(assert (=> d!11631 (= (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3666 newMap!16) (mask!5926 newMap!16)) e!39366)))

(declare-fun b!59902 () Bool)

(assert (=> b!59902 (= e!39364 e!39365)))

(declare-fun lt!24410 () (_ BitVec 64))

(assert (=> b!59902 (= lt!24410 (select (arr!1772 (_keys!3666 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(declare-fun lt!24409 () Unit!1547)

(assert (=> b!59902 (= lt!24409 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3666 newMap!16) lt!24410 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (=> b!59902 (arrayContainsKey!0 (_keys!3666 newMap!16) lt!24410 #b00000000000000000000000000000000)))

(declare-fun lt!24411 () Unit!1547)

(assert (=> b!59902 (= lt!24411 lt!24409)))

(declare-fun res!33206 () Bool)

(assert (=> b!59902 (= res!33206 (= (seekEntryOrOpen!0 (select (arr!1772 (_keys!3666 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (_keys!3666 newMap!16) (mask!5926 newMap!16)) (Found!221 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> b!59902 (=> (not res!33206) (not e!39365))))

(assert (= (and d!11631 (not res!33207)) b!59901))

(assert (= (and b!59901 c!7730) b!59902))

(assert (= (and b!59901 (not c!7730)) b!59899))

(assert (= (and b!59902 res!33206) b!59900))

(assert (= (or b!59900 b!59899) bm!4519))

(declare-fun m!52135 () Bool)

(assert (=> bm!4519 m!52135))

(assert (=> b!59901 m!51237))

(assert (=> b!59901 m!51237))

(declare-fun m!52137 () Bool)

(assert (=> b!59901 m!52137))

(assert (=> b!59902 m!51237))

(declare-fun m!52139 () Bool)

(assert (=> b!59902 m!52139))

(declare-fun m!52141 () Bool)

(assert (=> b!59902 m!52141))

(assert (=> b!59902 m!51237))

(declare-fun m!52143 () Bool)

(assert (=> b!59902 m!52143))

(assert (=> bm!4412 d!11631))

(declare-fun b!59904 () Bool)

(declare-fun e!39367 () Option!131)

(declare-fun e!39368 () Option!131)

(assert (=> b!59904 (= e!39367 e!39368)))

(declare-fun c!7732 () Bool)

(assert (=> b!59904 (= c!7732 (and ((_ is Cons!1419) (t!4757 (toList!687 lt!23590))) (not (= (_1!1018 (h!2000 (t!4757 (toList!687 lt!23590)))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))))

(declare-fun b!59903 () Bool)

(assert (=> b!59903 (= e!39367 (Some!130 (_2!1018 (h!2000 (t!4757 (toList!687 lt!23590))))))))

(declare-fun d!11633 () Bool)

(declare-fun c!7731 () Bool)

(assert (=> d!11633 (= c!7731 (and ((_ is Cons!1419) (t!4757 (toList!687 lt!23590))) (= (_1!1018 (h!2000 (t!4757 (toList!687 lt!23590)))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355))))))

(assert (=> d!11633 (= (getValueByKey!125 (t!4757 (toList!687 lt!23590)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) e!39367)))

(declare-fun b!59906 () Bool)

(assert (=> b!59906 (= e!39368 None!129)))

(declare-fun b!59905 () Bool)

(assert (=> b!59905 (= e!39368 (getValueByKey!125 (t!4757 (t!4757 (toList!687 lt!23590))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(assert (= (and d!11633 c!7731) b!59903))

(assert (= (and d!11633 (not c!7731)) b!59904))

(assert (= (and b!59904 c!7732) b!59905))

(assert (= (and b!59904 (not c!7732)) b!59906))

(assert (=> b!59905 m!50367))

(declare-fun m!52145 () Bool)

(assert (=> b!59905 m!52145))

(assert (=> b!59093 d!11633))

(declare-fun lt!24412 () Bool)

(declare-fun d!11635 () Bool)

(assert (=> d!11635 (= lt!24412 (select (content!65 (toList!687 lt!23956)) (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))

(declare-fun e!39370 () Bool)

(assert (=> d!11635 (= lt!24412 e!39370)))

(declare-fun res!33209 () Bool)

(assert (=> d!11635 (=> (not res!33209) (not e!39370))))

(assert (=> d!11635 (= res!33209 ((_ is Cons!1419) (toList!687 lt!23956)))))

(assert (=> d!11635 (= (contains!680 (toList!687 lt!23956) (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) lt!24412)))

(declare-fun b!59907 () Bool)

(declare-fun e!39369 () Bool)

(assert (=> b!59907 (= e!39370 e!39369)))

(declare-fun res!33208 () Bool)

(assert (=> b!59907 (=> res!33208 e!39369)))

(assert (=> b!59907 (= res!33208 (= (h!2000 (toList!687 lt!23956)) (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))

(declare-fun b!59908 () Bool)

(assert (=> b!59908 (= e!39369 (contains!680 (t!4757 (toList!687 lt!23956)) (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))

(assert (= (and d!11635 res!33209) b!59907))

(assert (= (and b!59907 (not res!33208)) b!59908))

(declare-fun m!52147 () Bool)

(assert (=> d!11635 m!52147))

(declare-fun m!52149 () Bool)

(assert (=> d!11635 m!52149))

(declare-fun m!52151 () Bool)

(assert (=> b!59908 m!52151))

(assert (=> b!59231 d!11635))

(declare-fun d!11637 () Bool)

(declare-fun e!39371 () Bool)

(assert (=> d!11637 e!39371))

(declare-fun res!33210 () Bool)

(assert (=> d!11637 (=> res!33210 e!39371)))

(declare-fun lt!24415 () Bool)

(assert (=> d!11637 (= res!33210 (not lt!24415))))

(declare-fun lt!24414 () Bool)

(assert (=> d!11637 (= lt!24415 lt!24414)))

(declare-fun lt!24413 () Unit!1547)

(declare-fun e!39372 () Unit!1547)

(assert (=> d!11637 (= lt!24413 e!39372)))

(declare-fun c!7733 () Bool)

(assert (=> d!11637 (= c!7733 lt!24414)))

(assert (=> d!11637 (= lt!24414 (containsKey!128 (toList!687 lt!23832) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11637 (= (contains!678 lt!23832 #b0000000000000000000000000000000000000000000000000000000000000000) lt!24415)))

(declare-fun b!59909 () Bool)

(declare-fun lt!24416 () Unit!1547)

(assert (=> b!59909 (= e!39372 lt!24416)))

(assert (=> b!59909 (= lt!24416 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 lt!23832) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59909 (isDefined!77 (getValueByKey!125 (toList!687 lt!23832) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59910 () Bool)

(declare-fun Unit!1589 () Unit!1547)

(assert (=> b!59910 (= e!39372 Unit!1589)))

(declare-fun b!59911 () Bool)

(assert (=> b!59911 (= e!39371 (isDefined!77 (getValueByKey!125 (toList!687 lt!23832) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11637 c!7733) b!59909))

(assert (= (and d!11637 (not c!7733)) b!59910))

(assert (= (and d!11637 (not res!33210)) b!59911))

(declare-fun m!52153 () Bool)

(assert (=> d!11637 m!52153))

(declare-fun m!52155 () Bool)

(assert (=> b!59909 m!52155))

(declare-fun m!52157 () Bool)

(assert (=> b!59909 m!52157))

(assert (=> b!59909 m!52157))

(declare-fun m!52159 () Bool)

(assert (=> b!59909 m!52159))

(assert (=> b!59911 m!52157))

(assert (=> b!59911 m!52157))

(assert (=> b!59911 m!52159))

(assert (=> bm!4401 d!11637))

(declare-fun b!59930 () Bool)

(declare-fun e!39384 () SeekEntryResult!221)

(assert (=> b!59930 (= e!39384 (Intermediate!221 true (toIndex!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (mask!5926 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!59931 () Bool)

(declare-fun lt!24422 () SeekEntryResult!221)

(assert (=> b!59931 (and (bvsge (index!3009 lt!24422) #b00000000000000000000000000000000) (bvslt (index!3009 lt!24422) (size!2002 (_keys!3666 newMap!16))))))

(declare-fun res!33219 () Bool)

(assert (=> b!59931 (= res!33219 (= (select (arr!1772 (_keys!3666 newMap!16)) (index!3009 lt!24422)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(declare-fun e!39385 () Bool)

(assert (=> b!59931 (=> res!33219 e!39385)))

(declare-fun e!39386 () Bool)

(assert (=> b!59931 (= e!39386 e!39385)))

(declare-fun b!59932 () Bool)

(declare-fun e!39387 () Bool)

(assert (=> b!59932 (= e!39387 (bvsge (x!9997 lt!24422) #b01111111111111111111111111111110))))

(declare-fun b!59933 () Bool)

(declare-fun e!39383 () SeekEntryResult!221)

(assert (=> b!59933 (= e!39384 e!39383)))

(declare-fun c!7740 () Bool)

(declare-fun lt!24421 () (_ BitVec 64))

(assert (=> b!59933 (= c!7740 (or (= lt!24421 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) (= (bvadd lt!24421 lt!24421) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!59934 () Bool)

(assert (=> b!59934 (= e!39383 (seekKeyOrZeroOrLongMinValue!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (nextIndex!0 (toIndex!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (mask!5926 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (mask!5926 newMap!16)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (_keys!3666 newMap!16) (mask!5926 newMap!16)))))

(declare-fun b!59935 () Bool)

(assert (=> b!59935 (and (bvsge (index!3009 lt!24422) #b00000000000000000000000000000000) (bvslt (index!3009 lt!24422) (size!2002 (_keys!3666 newMap!16))))))

(declare-fun res!33218 () Bool)

(assert (=> b!59935 (= res!33218 (= (select (arr!1772 (_keys!3666 newMap!16)) (index!3009 lt!24422)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59935 (=> res!33218 e!39385)))

(declare-fun b!59936 () Bool)

(assert (=> b!59936 (= e!39383 (Intermediate!221 false (toIndex!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (mask!5926 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!59937 () Bool)

(assert (=> b!59937 (and (bvsge (index!3009 lt!24422) #b00000000000000000000000000000000) (bvslt (index!3009 lt!24422) (size!2002 (_keys!3666 newMap!16))))))

(assert (=> b!59937 (= e!39385 (= (select (arr!1772 (_keys!3666 newMap!16)) (index!3009 lt!24422)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59938 () Bool)

(assert (=> b!59938 (= e!39387 e!39386)))

(declare-fun res!33217 () Bool)

(assert (=> b!59938 (= res!33217 (and ((_ is Intermediate!221) lt!24422) (not (undefined!1033 lt!24422)) (bvslt (x!9997 lt!24422) #b01111111111111111111111111111110) (bvsge (x!9997 lt!24422) #b00000000000000000000000000000000) (bvsge (x!9997 lt!24422) #b00000000000000000000000000000000)))))

(assert (=> b!59938 (=> (not res!33217) (not e!39386))))

(declare-fun d!11639 () Bool)

(assert (=> d!11639 e!39387))

(declare-fun c!7742 () Bool)

(assert (=> d!11639 (= c!7742 (and ((_ is Intermediate!221) lt!24422) (undefined!1033 lt!24422)))))

(assert (=> d!11639 (= lt!24422 e!39384)))

(declare-fun c!7741 () Bool)

(assert (=> d!11639 (= c!7741 (bvsge #b00000000000000000000000000000000 #b01111111111111111111111111111110))))

(assert (=> d!11639 (= lt!24421 (select (arr!1772 (_keys!3666 newMap!16)) (toIndex!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (mask!5926 newMap!16))))))

(assert (=> d!11639 (validMask!0 (mask!5926 newMap!16))))

(assert (=> d!11639 (= (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (mask!5926 newMap!16)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (_keys!3666 newMap!16) (mask!5926 newMap!16)) lt!24422)))

(assert (= (and d!11639 c!7741) b!59930))

(assert (= (and d!11639 (not c!7741)) b!59933))

(assert (= (and b!59933 c!7740) b!59936))

(assert (= (and b!59933 (not c!7740)) b!59934))

(assert (= (and d!11639 c!7742) b!59932))

(assert (= (and d!11639 (not c!7742)) b!59938))

(assert (= (and b!59938 res!33217) b!59931))

(assert (= (and b!59931 (not res!33219)) b!59935))

(assert (= (and b!59935 (not res!33218)) b!59937))

(assert (=> d!11639 m!50657))

(declare-fun m!52161 () Bool)

(assert (=> d!11639 m!52161))

(assert (=> d!11639 m!50667))

(assert (=> b!59934 m!50657))

(declare-fun m!52163 () Bool)

(assert (=> b!59934 m!52163))

(assert (=> b!59934 m!52163))

(assert (=> b!59934 m!50367))

(declare-fun m!52165 () Bool)

(assert (=> b!59934 m!52165))

(declare-fun m!52167 () Bool)

(assert (=> b!59935 m!52167))

(assert (=> b!59931 m!52167))

(assert (=> b!59937 m!52167))

(assert (=> d!11233 d!11639))

(declare-fun d!11641 () Bool)

(declare-fun lt!24428 () (_ BitVec 32))

(declare-fun lt!24427 () (_ BitVec 32))

(assert (=> d!11641 (= lt!24428 (bvmul (bvxor lt!24427 (bvlshr lt!24427 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))))

(assert (=> d!11641 (= lt!24427 ((_ extract 31 0) (bvand (bvxor (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (bvlshr (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))))

(assert (=> d!11641 (and (bvsge (mask!5926 newMap!16) #b00000000000000000000000000000000) (let ((res!33220 (let ((h!2001 ((_ extract 31 0) (bvand (bvxor (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (bvlshr (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))) (let ((x!10101 (bvmul (bvxor h!2001 (bvlshr h!2001 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))) (bvand (bvxor x!10101 (bvlshr x!10101 #b00000000000000000000000000001101)) (mask!5926 newMap!16)))))) (and (bvslt res!33220 (bvadd (mask!5926 newMap!16) #b00000000000000000000000000000001)) (bvsge res!33220 #b00000000000000000000000000000000))))))

(assert (=> d!11641 (= (toIndex!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (mask!5926 newMap!16)) (bvand (bvxor lt!24428 (bvlshr lt!24428 #b00000000000000000000000000001101)) (mask!5926 newMap!16)))))

(assert (=> d!11233 d!11641))

(assert (=> d!11233 d!11363))

(assert (=> b!59217 d!11279))

(declare-fun d!11643 () Bool)

(declare-fun e!39388 () Bool)

(assert (=> d!11643 e!39388))

(declare-fun res!33221 () Bool)

(assert (=> d!11643 (=> (not res!33221) (not e!39388))))

(declare-fun lt!24431 () ListLongMap!1343)

(assert (=> d!11643 (= res!33221 (contains!678 lt!24431 (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))))))

(declare-fun lt!24432 () List!1423)

(assert (=> d!11643 (= lt!24431 (ListLongMap!1344 lt!24432))))

(declare-fun lt!24430 () Unit!1547)

(declare-fun lt!24429 () Unit!1547)

(assert (=> d!11643 (= lt!24430 lt!24429)))

(assert (=> d!11643 (= (getValueByKey!125 lt!24432 (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))) (Some!130 (_2!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))))))

(assert (=> d!11643 (= lt!24429 (lemmaContainsTupThenGetReturnValue!42 lt!24432 (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))) (_2!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))))))

(assert (=> d!11643 (= lt!24432 (insertStrictlySorted!45 (toList!687 call!4420) (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))) (_2!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))))))

(assert (=> d!11643 (= (+!80 call!4420 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))) lt!24431)))

(declare-fun b!59939 () Bool)

(declare-fun res!33222 () Bool)

(assert (=> b!59939 (=> (not res!33222) (not e!39388))))

(assert (=> b!59939 (= res!33222 (= (getValueByKey!125 (toList!687 lt!24431) (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))) (Some!130 (_2!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))))))))

(declare-fun b!59940 () Bool)

(assert (=> b!59940 (= e!39388 (contains!680 (toList!687 lt!24431) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7472 (ite c!7473 (minValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))))))

(assert (= (and d!11643 res!33221) b!59939))

(assert (= (and b!59939 res!33222) b!59940))

(declare-fun m!52169 () Bool)

(assert (=> d!11643 m!52169))

(declare-fun m!52171 () Bool)

(assert (=> d!11643 m!52171))

(declare-fun m!52173 () Bool)

(assert (=> d!11643 m!52173))

(declare-fun m!52175 () Bool)

(assert (=> d!11643 m!52175))

(declare-fun m!52177 () Bool)

(assert (=> b!59939 m!52177))

(declare-fun m!52179 () Bool)

(assert (=> b!59940 m!52179))

(assert (=> b!59162 d!11643))

(declare-fun d!11645 () Bool)

(assert (=> d!11645 (= (apply!66 lt!23857 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1075 (getValueByKey!125 (toList!687 lt!23857) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2598 () Bool)

(assert (= bs!2598 d!11645))

(declare-fun m!52181 () Bool)

(assert (=> bs!2598 m!52181))

(assert (=> bs!2598 m!52181))

(declare-fun m!52183 () Bool)

(assert (=> bs!2598 m!52183))

(assert (=> b!59130 d!11645))

(declare-fun d!11647 () Bool)

(assert (=> d!11647 (= (get!1075 (getValueByKey!125 (toList!687 (+!80 lt!23776 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!23786)) (v!2387 (getValueByKey!125 (toList!687 (+!80 lt!23776 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!23786)))))

(assert (=> d!11297 d!11647))

(declare-fun b!59942 () Bool)

(declare-fun e!39389 () Option!131)

(declare-fun e!39390 () Option!131)

(assert (=> b!59942 (= e!39389 e!39390)))

(declare-fun c!7744 () Bool)

(assert (=> b!59942 (= c!7744 (and ((_ is Cons!1419) (toList!687 (+!80 lt!23776 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))) (not (= (_1!1018 (h!2000 (toList!687 (+!80 lt!23776 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))) lt!23786))))))

(declare-fun b!59941 () Bool)

(assert (=> b!59941 (= e!39389 (Some!130 (_2!1018 (h!2000 (toList!687 (+!80 lt!23776 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))))

(declare-fun c!7743 () Bool)

(declare-fun d!11649 () Bool)

(assert (=> d!11649 (= c!7743 (and ((_ is Cons!1419) (toList!687 (+!80 lt!23776 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))) (= (_1!1018 (h!2000 (toList!687 (+!80 lt!23776 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))) lt!23786)))))

(assert (=> d!11649 (= (getValueByKey!125 (toList!687 (+!80 lt!23776 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!23786) e!39389)))

(declare-fun b!59944 () Bool)

(assert (=> b!59944 (= e!39390 None!129)))

(declare-fun b!59943 () Bool)

(assert (=> b!59943 (= e!39390 (getValueByKey!125 (t!4757 (toList!687 (+!80 lt!23776 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))) lt!23786))))

(assert (= (and d!11649 c!7743) b!59941))

(assert (= (and d!11649 (not c!7743)) b!59942))

(assert (= (and b!59942 c!7744) b!59943))

(assert (= (and b!59942 (not c!7744)) b!59944))

(declare-fun m!52185 () Bool)

(assert (=> b!59943 m!52185))

(assert (=> d!11297 d!11649))

(declare-fun b!59945 () Bool)

(declare-fun e!39392 () (_ BitVec 32))

(declare-fun call!4523 () (_ BitVec 32))

(assert (=> b!59945 (= e!39392 (bvadd #b00000000000000000000000000000001 call!4523))))

(declare-fun b!59946 () Bool)

(declare-fun e!39391 () (_ BitVec 32))

(assert (=> b!59946 (= e!39391 e!39392)))

(declare-fun c!7745 () Bool)

(assert (=> b!59946 (= c!7745 (validKeyInArray!0 (select (arr!1772 (_keys!3666 (_2!1019 lt!23711))) #b00000000000000000000000000000000)))))

(declare-fun b!59947 () Bool)

(assert (=> b!59947 (= e!39392 call!4523)))

(declare-fun bm!4520 () Bool)

(assert (=> bm!4520 (= call!4523 (arrayCountValidKeys!0 (_keys!3666 (_2!1019 lt!23711)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2002 (_keys!3666 (_2!1019 lt!23711)))))))

(declare-fun d!11651 () Bool)

(declare-fun lt!24433 () (_ BitVec 32))

(assert (=> d!11651 (and (bvsge lt!24433 #b00000000000000000000000000000000) (bvsle lt!24433 (bvsub (size!2002 (_keys!3666 (_2!1019 lt!23711))) #b00000000000000000000000000000000)))))

(assert (=> d!11651 (= lt!24433 e!39391)))

(declare-fun c!7746 () Bool)

(assert (=> d!11651 (= c!7746 (bvsge #b00000000000000000000000000000000 (size!2002 (_keys!3666 (_2!1019 lt!23711)))))))

(assert (=> d!11651 (and (bvsle #b00000000000000000000000000000000 (size!2002 (_keys!3666 (_2!1019 lt!23711)))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2002 (_keys!3666 (_2!1019 lt!23711))) (size!2002 (_keys!3666 (_2!1019 lt!23711)))))))

(assert (=> d!11651 (= (arrayCountValidKeys!0 (_keys!3666 (_2!1019 lt!23711)) #b00000000000000000000000000000000 (size!2002 (_keys!3666 (_2!1019 lt!23711)))) lt!24433)))

(declare-fun b!59948 () Bool)

(assert (=> b!59948 (= e!39391 #b00000000000000000000000000000000)))

(assert (= (and d!11651 c!7746) b!59948))

(assert (= (and d!11651 (not c!7746)) b!59946))

(assert (= (and b!59946 c!7745) b!59945))

(assert (= (and b!59946 (not c!7745)) b!59947))

(assert (= (or b!59945 b!59947) bm!4520))

(assert (=> b!59946 m!51383))

(assert (=> b!59946 m!51383))

(assert (=> b!59946 m!51385))

(declare-fun m!52187 () Bool)

(assert (=> bm!4520 m!52187))

(assert (=> b!59180 d!11651))

(declare-fun d!11653 () Bool)

(declare-fun e!39393 () Bool)

(assert (=> d!11653 e!39393))

(declare-fun res!33223 () Bool)

(assert (=> d!11653 (=> res!33223 e!39393)))

(declare-fun lt!24436 () Bool)

(assert (=> d!11653 (= res!33223 (not lt!24436))))

(declare-fun lt!24435 () Bool)

(assert (=> d!11653 (= lt!24436 lt!24435)))

(declare-fun lt!24434 () Unit!1547)

(declare-fun e!39394 () Unit!1547)

(assert (=> d!11653 (= lt!24434 e!39394)))

(declare-fun c!7747 () Bool)

(assert (=> d!11653 (= c!7747 lt!24435)))

(assert (=> d!11653 (= lt!24435 (containsKey!128 (toList!687 lt!24003) (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11653 (= (contains!678 lt!24003 (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!24436)))

(declare-fun b!59949 () Bool)

(declare-fun lt!24437 () Unit!1547)

(assert (=> b!59949 (= e!39394 lt!24437)))

(assert (=> b!59949 (= lt!24437 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 lt!24003) (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> b!59949 (isDefined!77 (getValueByKey!125 (toList!687 lt!24003) (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!59950 () Bool)

(declare-fun Unit!1590 () Unit!1547)

(assert (=> b!59950 (= e!39394 Unit!1590)))

(declare-fun b!59951 () Bool)

(assert (=> b!59951 (= e!39393 (isDefined!77 (getValueByKey!125 (toList!687 lt!24003) (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!11653 c!7747) b!59949))

(assert (= (and d!11653 (not c!7747)) b!59950))

(assert (= (and d!11653 (not res!33223)) b!59951))

(declare-fun m!52189 () Bool)

(assert (=> d!11653 m!52189))

(declare-fun m!52191 () Bool)

(assert (=> b!59949 m!52191))

(assert (=> b!59949 m!51121))

(assert (=> b!59949 m!51121))

(declare-fun m!52193 () Bool)

(assert (=> b!59949 m!52193))

(assert (=> b!59951 m!51121))

(assert (=> b!59951 m!51121))

(assert (=> b!59951 m!52193))

(assert (=> d!11341 d!11653))

(declare-fun b!59953 () Bool)

(declare-fun e!39395 () Option!131)

(declare-fun e!39396 () Option!131)

(assert (=> b!59953 (= e!39395 e!39396)))

(declare-fun c!7749 () Bool)

(assert (=> b!59953 (= c!7749 (and ((_ is Cons!1419) lt!24004) (not (= (_1!1018 (h!2000 lt!24004)) (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!59952 () Bool)

(assert (=> b!59952 (= e!39395 (Some!130 (_2!1018 (h!2000 lt!24004))))))

(declare-fun d!11655 () Bool)

(declare-fun c!7748 () Bool)

(assert (=> d!11655 (= c!7748 (and ((_ is Cons!1419) lt!24004) (= (_1!1018 (h!2000 lt!24004)) (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!11655 (= (getValueByKey!125 lt!24004 (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!39395)))

(declare-fun b!59955 () Bool)

(assert (=> b!59955 (= e!39396 None!129)))

(declare-fun b!59954 () Bool)

(assert (=> b!59954 (= e!39396 (getValueByKey!125 (t!4757 lt!24004) (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!11655 c!7748) b!59952))

(assert (= (and d!11655 (not c!7748)) b!59953))

(assert (= (and b!59953 c!7749) b!59954))

(assert (= (and b!59953 (not c!7749)) b!59955))

(declare-fun m!52195 () Bool)

(assert (=> b!59954 m!52195))

(assert (=> d!11341 d!11655))

(declare-fun d!11657 () Bool)

(assert (=> d!11657 (= (getValueByKey!125 lt!24004 (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!24438 () Unit!1547)

(assert (=> d!11657 (= lt!24438 (choose!318 lt!24004 (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!39397 () Bool)

(assert (=> d!11657 e!39397))

(declare-fun res!33224 () Bool)

(assert (=> d!11657 (=> (not res!33224) (not e!39397))))

(assert (=> d!11657 (= res!33224 (isStrictlySorted!271 lt!24004))))

(assert (=> d!11657 (= (lemmaContainsTupThenGetReturnValue!42 lt!24004 (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!24438)))

(declare-fun b!59956 () Bool)

(declare-fun res!33225 () Bool)

(assert (=> b!59956 (=> (not res!33225) (not e!39397))))

(assert (=> b!59956 (= res!33225 (containsKey!128 lt!24004 (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!59957 () Bool)

(assert (=> b!59957 (= e!39397 (contains!680 lt!24004 (tuple2!2015 (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!11657 res!33224) b!59956))

(assert (= (and b!59956 res!33225) b!59957))

(assert (=> d!11657 m!51115))

(declare-fun m!52197 () Bool)

(assert (=> d!11657 m!52197))

(declare-fun m!52199 () Bool)

(assert (=> d!11657 m!52199))

(declare-fun m!52201 () Bool)

(assert (=> b!59956 m!52201))

(declare-fun m!52203 () Bool)

(assert (=> b!59957 m!52203))

(assert (=> d!11341 d!11657))

(declare-fun b!59958 () Bool)

(declare-fun e!39400 () List!1423)

(declare-fun call!4525 () List!1423)

(assert (=> b!59958 (= e!39400 call!4525)))

(declare-fun lt!24439 () List!1423)

(declare-fun e!39402 () Bool)

(declare-fun b!59959 () Bool)

(assert (=> b!59959 (= e!39402 (contains!680 lt!24439 (tuple2!2015 (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!39398 () List!1423)

(declare-fun b!59960 () Bool)

(assert (=> b!59960 (= e!39398 (insertStrictlySorted!45 (t!4757 (toList!687 call!4361)) (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun d!11659 () Bool)

(assert (=> d!11659 e!39402))

(declare-fun res!33226 () Bool)

(assert (=> d!11659 (=> (not res!33226) (not e!39402))))

(assert (=> d!11659 (= res!33226 (isStrictlySorted!271 lt!24439))))

(assert (=> d!11659 (= lt!24439 e!39400)))

(declare-fun c!7750 () Bool)

(assert (=> d!11659 (= c!7750 (and ((_ is Cons!1419) (toList!687 call!4361)) (bvslt (_1!1018 (h!2000 (toList!687 call!4361))) (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!11659 (isStrictlySorted!271 (toList!687 call!4361))))

(assert (=> d!11659 (= (insertStrictlySorted!45 (toList!687 call!4361) (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!24439)))

(declare-fun bm!4521 () Bool)

(declare-fun call!4524 () List!1423)

(declare-fun call!4526 () List!1423)

(assert (=> bm!4521 (= call!4524 call!4526)))

(declare-fun b!59961 () Bool)

(declare-fun e!39401 () List!1423)

(assert (=> b!59961 (= e!39400 e!39401)))

(declare-fun c!7751 () Bool)

(assert (=> b!59961 (= c!7751 (and ((_ is Cons!1419) (toList!687 call!4361)) (= (_1!1018 (h!2000 (toList!687 call!4361))) (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!59962 () Bool)

(declare-fun res!33227 () Bool)

(assert (=> b!59962 (=> (not res!33227) (not e!39402))))

(assert (=> b!59962 (= res!33227 (containsKey!128 lt!24439 (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!59963 () Bool)

(declare-fun e!39399 () List!1423)

(assert (=> b!59963 (= e!39399 call!4524)))

(declare-fun bm!4522 () Bool)

(assert (=> bm!4522 (= call!4525 ($colon$colon!59 e!39398 (ite c!7750 (h!2000 (toList!687 call!4361)) (tuple2!2015 (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun c!7752 () Bool)

(assert (=> bm!4522 (= c!7752 c!7750)))

(declare-fun b!59964 () Bool)

(assert (=> b!59964 (= e!39399 call!4524)))

(declare-fun b!59965 () Bool)

(assert (=> b!59965 (= e!39401 call!4526)))

(declare-fun bm!4523 () Bool)

(assert (=> bm!4523 (= call!4526 call!4525)))

(declare-fun c!7753 () Bool)

(declare-fun b!59966 () Bool)

(assert (=> b!59966 (= c!7753 (and ((_ is Cons!1419) (toList!687 call!4361)) (bvsgt (_1!1018 (h!2000 (toList!687 call!4361))) (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!59966 (= e!39401 e!39399)))

(declare-fun b!59967 () Bool)

(assert (=> b!59967 (= e!39398 (ite c!7751 (t!4757 (toList!687 call!4361)) (ite c!7753 (Cons!1419 (h!2000 (toList!687 call!4361)) (t!4757 (toList!687 call!4361))) Nil!1420)))))

(assert (= (and d!11659 c!7750) b!59958))

(assert (= (and d!11659 (not c!7750)) b!59961))

(assert (= (and b!59961 c!7751) b!59965))

(assert (= (and b!59961 (not c!7751)) b!59966))

(assert (= (and b!59966 c!7753) b!59964))

(assert (= (and b!59966 (not c!7753)) b!59963))

(assert (= (or b!59964 b!59963) bm!4521))

(assert (= (or b!59965 bm!4521) bm!4523))

(assert (= (or b!59958 bm!4523) bm!4522))

(assert (= (and bm!4522 c!7752) b!59960))

(assert (= (and bm!4522 (not c!7752)) b!59967))

(assert (= (and d!11659 res!33226) b!59962))

(assert (= (and b!59962 res!33227) b!59959))

(declare-fun m!52205 () Bool)

(assert (=> b!59959 m!52205))

(declare-fun m!52207 () Bool)

(assert (=> b!59960 m!52207))

(declare-fun m!52209 () Bool)

(assert (=> bm!4522 m!52209))

(declare-fun m!52211 () Bool)

(assert (=> b!59962 m!52211))

(declare-fun m!52213 () Bool)

(assert (=> d!11659 m!52213))

(declare-fun m!52215 () Bool)

(assert (=> d!11659 m!52215))

(assert (=> d!11341 d!11659))

(assert (=> b!59248 d!11429))

(assert (=> b!59248 d!11431))

(declare-fun d!11661 () Bool)

(declare-fun lt!24440 () Bool)

(assert (=> d!11661 (= lt!24440 (select (content!65 (toList!687 lt!23916)) (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!39404 () Bool)

(assert (=> d!11661 (= lt!24440 e!39404)))

(declare-fun res!33229 () Bool)

(assert (=> d!11661 (=> (not res!33229) (not e!39404))))

(assert (=> d!11661 (= res!33229 ((_ is Cons!1419) (toList!687 lt!23916)))))

(assert (=> d!11661 (= (contains!680 (toList!687 lt!23916) (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!24440)))

(declare-fun b!59968 () Bool)

(declare-fun e!39403 () Bool)

(assert (=> b!59968 (= e!39404 e!39403)))

(declare-fun res!33228 () Bool)

(assert (=> b!59968 (=> res!33228 e!39403)))

(assert (=> b!59968 (= res!33228 (= (h!2000 (toList!687 lt!23916)) (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!59969 () Bool)

(assert (=> b!59969 (= e!39403 (contains!680 (t!4757 (toList!687 lt!23916)) (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!11661 res!33229) b!59968))

(assert (= (and b!59968 (not res!33228)) b!59969))

(declare-fun m!52217 () Bool)

(assert (=> d!11661 m!52217))

(declare-fun m!52219 () Bool)

(assert (=> d!11661 m!52219))

(declare-fun m!52221 () Bool)

(assert (=> b!59969 m!52221))

(assert (=> b!59179 d!11661))

(declare-fun d!11663 () Bool)

(assert (=> d!11663 (= (get!1075 (getValueByKey!125 (toList!687 (+!80 lt!23781 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!23779)) (v!2387 (getValueByKey!125 (toList!687 (+!80 lt!23781 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!23779)))))

(assert (=> d!11315 d!11663))

(declare-fun b!59971 () Bool)

(declare-fun e!39405 () Option!131)

(declare-fun e!39406 () Option!131)

(assert (=> b!59971 (= e!39405 e!39406)))

(declare-fun c!7755 () Bool)

(assert (=> b!59971 (= c!7755 (and ((_ is Cons!1419) (toList!687 (+!80 lt!23781 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))) (not (= (_1!1018 (h!2000 (toList!687 (+!80 lt!23781 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))) lt!23779))))))

(declare-fun b!59970 () Bool)

(assert (=> b!59970 (= e!39405 (Some!130 (_2!1018 (h!2000 (toList!687 (+!80 lt!23781 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))))))))

(declare-fun d!11665 () Bool)

(declare-fun c!7754 () Bool)

(assert (=> d!11665 (= c!7754 (and ((_ is Cons!1419) (toList!687 (+!80 lt!23781 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))) (= (_1!1018 (h!2000 (toList!687 (+!80 lt!23781 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))) lt!23779)))))

(assert (=> d!11665 (= (getValueByKey!125 (toList!687 (+!80 lt!23781 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!23779) e!39405)))

(declare-fun b!59973 () Bool)

(assert (=> b!59973 (= e!39406 None!129)))

(declare-fun b!59972 () Bool)

(assert (=> b!59972 (= e!39406 (getValueByKey!125 (t!4757 (toList!687 (+!80 lt!23781 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))) lt!23779))))

(assert (= (and d!11665 c!7754) b!59970))

(assert (= (and d!11665 (not c!7754)) b!59971))

(assert (= (and b!59971 c!7755) b!59972))

(assert (= (and b!59971 (not c!7755)) b!59973))

(declare-fun m!52223 () Bool)

(assert (=> b!59972 m!52223))

(assert (=> d!11315 d!11665))

(assert (=> b!59213 d!11269))

(declare-fun d!11667 () Bool)

(declare-fun e!39407 () Bool)

(assert (=> d!11667 e!39407))

(declare-fun res!33230 () Bool)

(assert (=> d!11667 (=> (not res!33230) (not e!39407))))

(declare-fun lt!24443 () ListLongMap!1343)

(assert (=> d!11667 (= res!33230 (contains!678 lt!24443 (_1!1018 (tuple2!2015 lt!23937 lt!23934))))))

(declare-fun lt!24444 () List!1423)

(assert (=> d!11667 (= lt!24443 (ListLongMap!1344 lt!24444))))

(declare-fun lt!24442 () Unit!1547)

(declare-fun lt!24441 () Unit!1547)

(assert (=> d!11667 (= lt!24442 lt!24441)))

(assert (=> d!11667 (= (getValueByKey!125 lt!24444 (_1!1018 (tuple2!2015 lt!23937 lt!23934))) (Some!130 (_2!1018 (tuple2!2015 lt!23937 lt!23934))))))

(assert (=> d!11667 (= lt!24441 (lemmaContainsTupThenGetReturnValue!42 lt!24444 (_1!1018 (tuple2!2015 lt!23937 lt!23934)) (_2!1018 (tuple2!2015 lt!23937 lt!23934))))))

(assert (=> d!11667 (= lt!24444 (insertStrictlySorted!45 (toList!687 lt!23933) (_1!1018 (tuple2!2015 lt!23937 lt!23934)) (_2!1018 (tuple2!2015 lt!23937 lt!23934))))))

(assert (=> d!11667 (= (+!80 lt!23933 (tuple2!2015 lt!23937 lt!23934)) lt!24443)))

(declare-fun b!59974 () Bool)

(declare-fun res!33231 () Bool)

(assert (=> b!59974 (=> (not res!33231) (not e!39407))))

(assert (=> b!59974 (= res!33231 (= (getValueByKey!125 (toList!687 lt!24443) (_1!1018 (tuple2!2015 lt!23937 lt!23934))) (Some!130 (_2!1018 (tuple2!2015 lt!23937 lt!23934)))))))

(declare-fun b!59975 () Bool)

(assert (=> b!59975 (= e!39407 (contains!680 (toList!687 lt!24443) (tuple2!2015 lt!23937 lt!23934)))))

(assert (= (and d!11667 res!33230) b!59974))

(assert (= (and b!59974 res!33231) b!59975))

(declare-fun m!52225 () Bool)

(assert (=> d!11667 m!52225))

(declare-fun m!52227 () Bool)

(assert (=> d!11667 m!52227))

(declare-fun m!52229 () Bool)

(assert (=> d!11667 m!52229))

(declare-fun m!52231 () Bool)

(assert (=> d!11667 m!52231))

(declare-fun m!52233 () Bool)

(assert (=> b!59974 m!52233))

(declare-fun m!52235 () Bool)

(assert (=> b!59975 m!52235))

(assert (=> b!59213 d!11667))

(declare-fun d!11669 () Bool)

(declare-fun e!39408 () Bool)

(assert (=> d!11669 e!39408))

(declare-fun res!33232 () Bool)

(assert (=> d!11669 (=> (not res!33232) (not e!39408))))

(declare-fun lt!24447 () ListLongMap!1343)

(assert (=> d!11669 (= res!33232 (contains!678 lt!24447 (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!24448 () List!1423)

(assert (=> d!11669 (= lt!24447 (ListLongMap!1344 lt!24448))))

(declare-fun lt!24446 () Unit!1547)

(declare-fun lt!24445 () Unit!1547)

(assert (=> d!11669 (= lt!24446 lt!24445)))

(assert (=> d!11669 (= (getValueByKey!125 lt!24448 (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11669 (= lt!24445 (lemmaContainsTupThenGetReturnValue!42 lt!24448 (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11669 (= lt!24448 (insertStrictlySorted!45 (toList!687 call!4425) (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11669 (= (+!80 call!4425 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!24447)))

(declare-fun b!59976 () Bool)

(declare-fun res!33233 () Bool)

(assert (=> b!59976 (=> (not res!33233) (not e!39408))))

(assert (=> b!59976 (= res!33233 (= (getValueByKey!125 (toList!687 lt!24447) (_1!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1018 (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!59977 () Bool)

(assert (=> b!59977 (= e!39408 (contains!680 (toList!687 lt!24447) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!11669 res!33232) b!59976))

(assert (= (and b!59976 res!33233) b!59977))

(declare-fun m!52237 () Bool)

(assert (=> d!11669 m!52237))

(declare-fun m!52239 () Bool)

(assert (=> d!11669 m!52239))

(declare-fun m!52241 () Bool)

(assert (=> d!11669 m!52241))

(declare-fun m!52243 () Bool)

(assert (=> d!11669 m!52243))

(declare-fun m!52245 () Bool)

(assert (=> b!59976 m!52245))

(declare-fun m!52247 () Bool)

(assert (=> b!59977 m!52247))

(assert (=> b!59213 d!11669))

(declare-fun d!11671 () Bool)

(declare-fun e!39409 () Bool)

(assert (=> d!11671 e!39409))

(declare-fun res!33234 () Bool)

(assert (=> d!11671 (=> res!33234 e!39409)))

(declare-fun lt!24451 () Bool)

(assert (=> d!11671 (= res!33234 (not lt!24451))))

(declare-fun lt!24450 () Bool)

(assert (=> d!11671 (= lt!24451 lt!24450)))

(declare-fun lt!24449 () Unit!1547)

(declare-fun e!39410 () Unit!1547)

(assert (=> d!11671 (= lt!24449 e!39410)))

(declare-fun c!7756 () Bool)

(assert (=> d!11671 (= c!7756 lt!24450)))

(assert (=> d!11671 (= lt!24450 (containsKey!128 (toList!687 (+!80 lt!23933 (tuple2!2015 lt!23937 lt!23934))) lt!23938))))

(assert (=> d!11671 (= (contains!678 (+!80 lt!23933 (tuple2!2015 lt!23937 lt!23934)) lt!23938) lt!24451)))

(declare-fun b!59978 () Bool)

(declare-fun lt!24452 () Unit!1547)

(assert (=> b!59978 (= e!39410 lt!24452)))

(assert (=> b!59978 (= lt!24452 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 (+!80 lt!23933 (tuple2!2015 lt!23937 lt!23934))) lt!23938))))

(assert (=> b!59978 (isDefined!77 (getValueByKey!125 (toList!687 (+!80 lt!23933 (tuple2!2015 lt!23937 lt!23934))) lt!23938))))

(declare-fun b!59979 () Bool)

(declare-fun Unit!1591 () Unit!1547)

(assert (=> b!59979 (= e!39410 Unit!1591)))

(declare-fun b!59980 () Bool)

(assert (=> b!59980 (= e!39409 (isDefined!77 (getValueByKey!125 (toList!687 (+!80 lt!23933 (tuple2!2015 lt!23937 lt!23934))) lt!23938)))))

(assert (= (and d!11671 c!7756) b!59978))

(assert (= (and d!11671 (not c!7756)) b!59979))

(assert (= (and d!11671 (not res!33234)) b!59980))

(declare-fun m!52249 () Bool)

(assert (=> d!11671 m!52249))

(declare-fun m!52251 () Bool)

(assert (=> b!59978 m!52251))

(declare-fun m!52253 () Bool)

(assert (=> b!59978 m!52253))

(assert (=> b!59978 m!52253))

(declare-fun m!52255 () Bool)

(assert (=> b!59978 m!52255))

(assert (=> b!59980 m!52253))

(assert (=> b!59980 m!52253))

(assert (=> b!59980 m!52255))

(assert (=> b!59213 d!11671))

(declare-fun d!11673 () Bool)

(assert (=> d!11673 (not (contains!678 (+!80 lt!23933 (tuple2!2015 lt!23937 lt!23934)) lt!23938))))

(declare-fun lt!24455 () Unit!1547)

(declare-fun choose!321 (ListLongMap!1343 (_ BitVec 64) V!2841 (_ BitVec 64)) Unit!1547)

(assert (=> d!11673 (= lt!24455 (choose!321 lt!23933 lt!23937 lt!23934 lt!23938))))

(declare-fun e!39413 () Bool)

(assert (=> d!11673 e!39413))

(declare-fun res!33237 () Bool)

(assert (=> d!11673 (=> (not res!33237) (not e!39413))))

(assert (=> d!11673 (= res!33237 (not (contains!678 lt!23933 lt!23938)))))

(assert (=> d!11673 (= (addStillNotContains!17 lt!23933 lt!23937 lt!23934 lt!23938) lt!24455)))

(declare-fun b!59984 () Bool)

(assert (=> b!59984 (= e!39413 (not (= lt!23937 lt!23938)))))

(assert (= (and d!11673 res!33237) b!59984))

(assert (=> d!11673 m!50935))

(assert (=> d!11673 m!50935))

(assert (=> d!11673 m!50937))

(declare-fun m!52257 () Bool)

(assert (=> d!11673 m!52257))

(declare-fun m!52259 () Bool)

(assert (=> d!11673 m!52259))

(assert (=> b!59213 d!11673))

(declare-fun d!11675 () Bool)

(declare-fun e!39414 () Bool)

(assert (=> d!11675 e!39414))

(declare-fun res!33238 () Bool)

(assert (=> d!11675 (=> res!33238 e!39414)))

(declare-fun lt!24458 () Bool)

(assert (=> d!11675 (= res!33238 (not lt!24458))))

(declare-fun lt!24457 () Bool)

(assert (=> d!11675 (= lt!24458 lt!24457)))

(declare-fun lt!24456 () Unit!1547)

(declare-fun e!39415 () Unit!1547)

(assert (=> d!11675 (= lt!24456 e!39415)))

(declare-fun c!7757 () Bool)

(assert (=> d!11675 (= c!7757 lt!24457)))

(assert (=> d!11675 (= lt!24457 (containsKey!128 (toList!687 lt!23857) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11675 (= (contains!678 lt!23857 #b0000000000000000000000000000000000000000000000000000000000000000) lt!24458)))

(declare-fun b!59985 () Bool)

(declare-fun lt!24459 () Unit!1547)

(assert (=> b!59985 (= e!39415 lt!24459)))

(assert (=> b!59985 (= lt!24459 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 lt!23857) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59985 (isDefined!77 (getValueByKey!125 (toList!687 lt!23857) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59986 () Bool)

(declare-fun Unit!1592 () Unit!1547)

(assert (=> b!59986 (= e!39415 Unit!1592)))

(declare-fun b!59987 () Bool)

(assert (=> b!59987 (= e!39414 (isDefined!77 (getValueByKey!125 (toList!687 lt!23857) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11675 c!7757) b!59985))

(assert (= (and d!11675 (not c!7757)) b!59986))

(assert (= (and d!11675 (not res!33238)) b!59987))

(declare-fun m!52261 () Bool)

(assert (=> d!11675 m!52261))

(declare-fun m!52263 () Bool)

(assert (=> b!59985 m!52263))

(assert (=> b!59985 m!52107))

(assert (=> b!59985 m!52107))

(declare-fun m!52265 () Bool)

(assert (=> b!59985 m!52265))

(assert (=> b!59987 m!52107))

(assert (=> b!59987 m!52107))

(assert (=> b!59987 m!52265))

(assert (=> bm!4409 d!11675))

(declare-fun d!11677 () Bool)

(assert (=> d!11677 (= (size!2008 newMap!16) (bvadd (_size!357 newMap!16) (bvsdiv (bvadd (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010)))))

(assert (=> b!59105 d!11677))

(assert (=> d!11275 d!11363))

(declare-fun d!11679 () Bool)

(assert (=> d!11679 (= (get!1075 (getValueByKey!125 (toList!687 lt!23781) lt!23779)) (v!2387 (getValueByKey!125 (toList!687 lt!23781) lt!23779)))))

(assert (=> d!11309 d!11679))

(declare-fun b!59989 () Bool)

(declare-fun e!39416 () Option!131)

(declare-fun e!39417 () Option!131)

(assert (=> b!59989 (= e!39416 e!39417)))

(declare-fun c!7759 () Bool)

(assert (=> b!59989 (= c!7759 (and ((_ is Cons!1419) (toList!687 lt!23781)) (not (= (_1!1018 (h!2000 (toList!687 lt!23781))) lt!23779))))))

(declare-fun b!59988 () Bool)

(assert (=> b!59988 (= e!39416 (Some!130 (_2!1018 (h!2000 (toList!687 lt!23781)))))))

(declare-fun d!11681 () Bool)

(declare-fun c!7758 () Bool)

(assert (=> d!11681 (= c!7758 (and ((_ is Cons!1419) (toList!687 lt!23781)) (= (_1!1018 (h!2000 (toList!687 lt!23781))) lt!23779)))))

(assert (=> d!11681 (= (getValueByKey!125 (toList!687 lt!23781) lt!23779) e!39416)))

(declare-fun b!59991 () Bool)

(assert (=> b!59991 (= e!39417 None!129)))

(declare-fun b!59990 () Bool)

(assert (=> b!59990 (= e!39417 (getValueByKey!125 (t!4757 (toList!687 lt!23781)) lt!23779))))

(assert (= (and d!11681 c!7758) b!59988))

(assert (= (and d!11681 (not c!7758)) b!59989))

(assert (= (and b!59989 c!7759) b!59990))

(assert (= (and b!59989 (not c!7759)) b!59991))

(declare-fun m!52267 () Bool)

(assert (=> b!59990 m!52267))

(assert (=> d!11309 d!11681))

(declare-fun d!11683 () Bool)

(declare-fun e!39418 () Bool)

(assert (=> d!11683 e!39418))

(declare-fun res!33239 () Bool)

(assert (=> d!11683 (=> (not res!33239) (not e!39418))))

(declare-fun lt!24462 () ListLongMap!1343)

(assert (=> d!11683 (= res!33239 (contains!678 lt!24462 (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))

(declare-fun lt!24463 () List!1423)

(assert (=> d!11683 (= lt!24462 (ListLongMap!1344 lt!24463))))

(declare-fun lt!24461 () Unit!1547)

(declare-fun lt!24460 () Unit!1547)

(assert (=> d!11683 (= lt!24461 lt!24460)))

(assert (=> d!11683 (= (getValueByKey!125 lt!24463 (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))) (Some!130 (_2!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))

(assert (=> d!11683 (= lt!24460 (lemmaContainsTupThenGetReturnValue!42 lt!24463 (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))) (_2!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))

(assert (=> d!11683 (= lt!24463 (insertStrictlySorted!45 (toList!687 call!4402) (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))) (_2!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))

(assert (=> d!11683 (= (+!80 call!4402 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))) lt!24462)))

(declare-fun b!59992 () Bool)

(declare-fun res!33240 () Bool)

(assert (=> b!59992 (=> (not res!33240) (not e!39418))))

(assert (=> b!59992 (= res!33240 (= (getValueByKey!125 (toList!687 lt!24462) (_1!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))) (Some!130 (_2!1018 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))))

(declare-fun b!59993 () Bool)

(assert (=> b!59993 (= e!39418 (contains!680 (toList!687 lt!24462) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))

(assert (= (and d!11683 res!33239) b!59992))

(assert (= (and b!59992 res!33240) b!59993))

(declare-fun m!52269 () Bool)

(assert (=> d!11683 m!52269))

(declare-fun m!52271 () Bool)

(assert (=> d!11683 m!52271))

(declare-fun m!52273 () Bool)

(assert (=> d!11683 m!52273))

(declare-fun m!52275 () Bool)

(assert (=> d!11683 m!52275))

(declare-fun m!52277 () Bool)

(assert (=> b!59992 m!52277))

(declare-fun m!52279 () Bool)

(assert (=> b!59993 m!52279))

(assert (=> b!59066 d!11683))

(declare-fun d!11685 () Bool)

(declare-fun e!39419 () Bool)

(assert (=> d!11685 e!39419))

(declare-fun res!33241 () Bool)

(assert (=> d!11685 (=> res!33241 e!39419)))

(declare-fun lt!24466 () Bool)

(assert (=> d!11685 (= res!33241 (not lt!24466))))

(declare-fun lt!24465 () Bool)

(assert (=> d!11685 (= lt!24466 lt!24465)))

(declare-fun lt!24464 () Unit!1547)

(declare-fun e!39420 () Unit!1547)

(assert (=> d!11685 (= lt!24464 e!39420)))

(declare-fun c!7760 () Bool)

(assert (=> d!11685 (= c!7760 lt!24465)))

(assert (=> d!11685 (= lt!24465 (containsKey!128 (toList!687 lt!23935) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11685 (= (contains!678 lt!23935 #b1000000000000000000000000000000000000000000000000000000000000000) lt!24466)))

(declare-fun b!59994 () Bool)

(declare-fun lt!24467 () Unit!1547)

(assert (=> b!59994 (= e!39420 lt!24467)))

(assert (=> b!59994 (= lt!24467 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 lt!23935) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59994 (isDefined!77 (getValueByKey!125 (toList!687 lt!23935) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59995 () Bool)

(declare-fun Unit!1593 () Unit!1547)

(assert (=> b!59995 (= e!39420 Unit!1593)))

(declare-fun b!59996 () Bool)

(assert (=> b!59996 (= e!39419 (isDefined!77 (getValueByKey!125 (toList!687 lt!23935) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11685 c!7760) b!59994))

(assert (= (and d!11685 (not c!7760)) b!59995))

(assert (= (and d!11685 (not res!33241)) b!59996))

(declare-fun m!52281 () Bool)

(assert (=> d!11685 m!52281))

(declare-fun m!52283 () Bool)

(assert (=> b!59994 m!52283))

(declare-fun m!52285 () Bool)

(assert (=> b!59994 m!52285))

(assert (=> b!59994 m!52285))

(declare-fun m!52287 () Bool)

(assert (=> b!59994 m!52287))

(assert (=> b!59996 m!52285))

(assert (=> b!59996 m!52285))

(assert (=> b!59996 m!52287))

(assert (=> b!59210 d!11685))

(declare-fun d!11687 () Bool)

(declare-fun res!33242 () Bool)

(declare-fun e!39421 () Bool)

(assert (=> d!11687 (=> res!33242 e!39421)))

(assert (=> d!11687 (= res!33242 (and ((_ is Cons!1419) (toList!687 e!38747)) (= (_1!1018 (h!2000 (toList!687 e!38747))) (ite c!7461 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (select (arr!1772 (_keys!3666 newMap!16)) (index!3008 lt!23716))))))))

(assert (=> d!11687 (= (containsKey!128 (toList!687 e!38747) (ite c!7461 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (select (arr!1772 (_keys!3666 newMap!16)) (index!3008 lt!23716)))) e!39421)))

(declare-fun b!59997 () Bool)

(declare-fun e!39422 () Bool)

(assert (=> b!59997 (= e!39421 e!39422)))

(declare-fun res!33243 () Bool)

(assert (=> b!59997 (=> (not res!33243) (not e!39422))))

(assert (=> b!59997 (= res!33243 (and (or (not ((_ is Cons!1419) (toList!687 e!38747))) (bvsle (_1!1018 (h!2000 (toList!687 e!38747))) (ite c!7461 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (select (arr!1772 (_keys!3666 newMap!16)) (index!3008 lt!23716))))) ((_ is Cons!1419) (toList!687 e!38747)) (bvslt (_1!1018 (h!2000 (toList!687 e!38747))) (ite c!7461 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (select (arr!1772 (_keys!3666 newMap!16)) (index!3008 lt!23716))))))))

(declare-fun b!59998 () Bool)

(assert (=> b!59998 (= e!39422 (containsKey!128 (t!4757 (toList!687 e!38747)) (ite c!7461 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (select (arr!1772 (_keys!3666 newMap!16)) (index!3008 lt!23716)))))))

(assert (= (and d!11687 (not res!33242)) b!59997))

(assert (= (and b!59997 res!33243) b!59998))

(declare-fun m!52289 () Bool)

(assert (=> b!59998 m!52289))

(assert (=> d!11355 d!11687))

(declare-fun d!11689 () Bool)

(declare-fun e!39423 () Bool)

(assert (=> d!11689 e!39423))

(declare-fun res!33244 () Bool)

(assert (=> d!11689 (=> res!33244 e!39423)))

(declare-fun lt!24470 () Bool)

(assert (=> d!11689 (= res!33244 (not lt!24470))))

(declare-fun lt!24469 () Bool)

(assert (=> d!11689 (= lt!24470 lt!24469)))

(declare-fun lt!24468 () Unit!1547)

(declare-fun e!39424 () Unit!1547)

(assert (=> d!11689 (= lt!24468 e!39424)))

(declare-fun c!7761 () Bool)

(assert (=> d!11689 (= c!7761 lt!24469)))

(assert (=> d!11689 (= lt!24469 (containsKey!128 (toList!687 lt!23896) (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!11689 (= (contains!678 lt!23896 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)) lt!24470)))

(declare-fun b!59999 () Bool)

(declare-fun lt!24471 () Unit!1547)

(assert (=> b!59999 (= e!39424 lt!24471)))

(assert (=> b!59999 (= lt!24471 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 lt!23896) (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59999 (isDefined!77 (getValueByKey!125 (toList!687 lt!23896) (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!60000 () Bool)

(declare-fun Unit!1594 () Unit!1547)

(assert (=> b!60000 (= e!39424 Unit!1594)))

(declare-fun b!60001 () Bool)

(assert (=> b!60001 (= e!39423 (isDefined!77 (getValueByKey!125 (toList!687 lt!23896) (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!11689 c!7761) b!59999))

(assert (= (and d!11689 (not c!7761)) b!60000))

(assert (= (and d!11689 (not res!33244)) b!60001))

(assert (=> d!11689 m!50693))

(declare-fun m!52291 () Bool)

(assert (=> d!11689 m!52291))

(assert (=> b!59999 m!50693))

(declare-fun m!52293 () Bool)

(assert (=> b!59999 m!52293))

(assert (=> b!59999 m!50693))

(declare-fun m!52295 () Bool)

(assert (=> b!59999 m!52295))

(assert (=> b!59999 m!52295))

(declare-fun m!52297 () Bool)

(assert (=> b!59999 m!52297))

(assert (=> b!60001 m!50693))

(assert (=> b!60001 m!52295))

(assert (=> b!60001 m!52295))

(assert (=> b!60001 m!52297))

(assert (=> b!59156 d!11689))

(assert (=> b!59172 d!11365))

(declare-fun d!11691 () Bool)

(declare-fun res!33245 () Bool)

(declare-fun e!39425 () Bool)

(assert (=> d!11691 (=> res!33245 e!39425)))

(assert (=> d!11691 (= res!33245 (= (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(assert (=> d!11691 (= (arrayContainsKey!0 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) e!39425)))

(declare-fun b!60002 () Bool)

(declare-fun e!39426 () Bool)

(assert (=> b!60002 (= e!39425 e!39426)))

(declare-fun res!33246 () Bool)

(assert (=> b!60002 (=> (not res!33246) (not e!39426))))

(assert (=> b!60002 (= res!33246 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2002 (_keys!3666 (v!2382 (underlying!225 thiss!992))))))))

(declare-fun b!60003 () Bool)

(assert (=> b!60003 (= e!39426 (arrayContainsKey!0 (_keys!3666 (v!2382 (underlying!225 thiss!992))) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!11691 (not res!33245)) b!60002))

(assert (= (and b!60002 res!33246) b!60003))

(declare-fun m!52299 () Bool)

(assert (=> d!11691 m!52299))

(assert (=> b!60003 m!50367))

(declare-fun m!52301 () Bool)

(assert (=> b!60003 m!52301))

(assert (=> b!59282 d!11691))

(declare-fun bm!4524 () Bool)

(declare-fun call!4530 () ListLongMap!1343)

(declare-fun call!4527 () ListLongMap!1343)

(assert (=> bm!4524 (= call!4530 call!4527)))

(declare-fun b!60004 () Bool)

(declare-fun c!7762 () Bool)

(assert (=> b!60004 (= c!7762 (and (not (= (bvand (extraKeys!1929 (_2!1019 lt!23711)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1929 (_2!1019 lt!23711)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!39431 () ListLongMap!1343)

(declare-fun e!39437 () ListLongMap!1343)

(assert (=> b!60004 (= e!39431 e!39437)))

(declare-fun b!60005 () Bool)

(declare-fun e!39438 () Bool)

(declare-fun call!4528 () Bool)

(assert (=> b!60005 (= e!39438 (not call!4528))))

(declare-fun bm!4525 () Bool)

(declare-fun call!4529 () ListLongMap!1343)

(assert (=> bm!4525 (= call!4529 (getCurrentListMapNoExtraKeys!44 (_keys!3666 (_2!1019 lt!23711)) (_values!2025 (_2!1019 lt!23711)) (mask!5926 (_2!1019 lt!23711)) (extraKeys!1929 (_2!1019 lt!23711)) (zeroValue!1958 (_2!1019 lt!23711)) (minValue!1958 (_2!1019 lt!23711)) #b00000000000000000000000000000000 (defaultEntry!2042 (_2!1019 lt!23711))))))

(declare-fun b!60006 () Bool)

(declare-fun e!39429 () Bool)

(declare-fun e!39436 () Bool)

(assert (=> b!60006 (= e!39429 e!39436)))

(declare-fun res!33247 () Bool)

(declare-fun call!4532 () Bool)

(assert (=> b!60006 (= res!33247 call!4532)))

(assert (=> b!60006 (=> (not res!33247) (not e!39436))))

(declare-fun b!60007 () Bool)

(declare-fun e!39432 () Bool)

(declare-fun e!39435 () Bool)

(assert (=> b!60007 (= e!39432 e!39435)))

(declare-fun res!33255 () Bool)

(assert (=> b!60007 (=> (not res!33255) (not e!39435))))

(declare-fun lt!24484 () ListLongMap!1343)

(assert (=> b!60007 (= res!33255 (contains!678 lt!24484 (select (arr!1772 (_keys!3666 (_2!1019 lt!23711))) #b00000000000000000000000000000000)))))

(assert (=> b!60007 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 (_2!1019 lt!23711)))))))

(declare-fun b!60008 () Bool)

(declare-fun e!39439 () ListLongMap!1343)

(assert (=> b!60008 (= e!39439 e!39431)))

(declare-fun c!7766 () Bool)

(assert (=> b!60008 (= c!7766 (and (not (= (bvand (extraKeys!1929 (_2!1019 lt!23711)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1929 (_2!1019 lt!23711)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun d!11693 () Bool)

(declare-fun e!39427 () Bool)

(assert (=> d!11693 e!39427))

(declare-fun res!33251 () Bool)

(assert (=> d!11693 (=> (not res!33251) (not e!39427))))

(assert (=> d!11693 (= res!33251 (or (bvsge #b00000000000000000000000000000000 (size!2002 (_keys!3666 (_2!1019 lt!23711)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 (_2!1019 lt!23711)))))))))

(declare-fun lt!24492 () ListLongMap!1343)

(assert (=> d!11693 (= lt!24484 lt!24492)))

(declare-fun lt!24474 () Unit!1547)

(declare-fun e!39430 () Unit!1547)

(assert (=> d!11693 (= lt!24474 e!39430)))

(declare-fun c!7767 () Bool)

(declare-fun e!39434 () Bool)

(assert (=> d!11693 (= c!7767 e!39434)))

(declare-fun res!33252 () Bool)

(assert (=> d!11693 (=> (not res!33252) (not e!39434))))

(assert (=> d!11693 (= res!33252 (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 (_2!1019 lt!23711)))))))

(assert (=> d!11693 (= lt!24492 e!39439)))

(declare-fun c!7764 () Bool)

(assert (=> d!11693 (= c!7764 (and (not (= (bvand (extraKeys!1929 (_2!1019 lt!23711)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1929 (_2!1019 lt!23711)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11693 (validMask!0 (mask!5926 (_2!1019 lt!23711)))))

(assert (=> d!11693 (= (getCurrentListMap!388 (_keys!3666 (_2!1019 lt!23711)) (_values!2025 (_2!1019 lt!23711)) (mask!5926 (_2!1019 lt!23711)) (extraKeys!1929 (_2!1019 lt!23711)) (zeroValue!1958 (_2!1019 lt!23711)) (minValue!1958 (_2!1019 lt!23711)) #b00000000000000000000000000000000 (defaultEntry!2042 (_2!1019 lt!23711))) lt!24484)))

(declare-fun b!60009 () Bool)

(declare-fun lt!24473 () Unit!1547)

(assert (=> b!60009 (= e!39430 lt!24473)))

(declare-fun lt!24476 () ListLongMap!1343)

(assert (=> b!60009 (= lt!24476 (getCurrentListMapNoExtraKeys!44 (_keys!3666 (_2!1019 lt!23711)) (_values!2025 (_2!1019 lt!23711)) (mask!5926 (_2!1019 lt!23711)) (extraKeys!1929 (_2!1019 lt!23711)) (zeroValue!1958 (_2!1019 lt!23711)) (minValue!1958 (_2!1019 lt!23711)) #b00000000000000000000000000000000 (defaultEntry!2042 (_2!1019 lt!23711))))))

(declare-fun lt!24490 () (_ BitVec 64))

(assert (=> b!60009 (= lt!24490 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24483 () (_ BitVec 64))

(assert (=> b!60009 (= lt!24483 (select (arr!1772 (_keys!3666 (_2!1019 lt!23711))) #b00000000000000000000000000000000))))

(declare-fun lt!24472 () Unit!1547)

(assert (=> b!60009 (= lt!24472 (addStillContains!42 lt!24476 lt!24490 (zeroValue!1958 (_2!1019 lt!23711)) lt!24483))))

(assert (=> b!60009 (contains!678 (+!80 lt!24476 (tuple2!2015 lt!24490 (zeroValue!1958 (_2!1019 lt!23711)))) lt!24483)))

(declare-fun lt!24475 () Unit!1547)

(assert (=> b!60009 (= lt!24475 lt!24472)))

(declare-fun lt!24489 () ListLongMap!1343)

(assert (=> b!60009 (= lt!24489 (getCurrentListMapNoExtraKeys!44 (_keys!3666 (_2!1019 lt!23711)) (_values!2025 (_2!1019 lt!23711)) (mask!5926 (_2!1019 lt!23711)) (extraKeys!1929 (_2!1019 lt!23711)) (zeroValue!1958 (_2!1019 lt!23711)) (minValue!1958 (_2!1019 lt!23711)) #b00000000000000000000000000000000 (defaultEntry!2042 (_2!1019 lt!23711))))))

(declare-fun lt!24478 () (_ BitVec 64))

(assert (=> b!60009 (= lt!24478 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24479 () (_ BitVec 64))

(assert (=> b!60009 (= lt!24479 (select (arr!1772 (_keys!3666 (_2!1019 lt!23711))) #b00000000000000000000000000000000))))

(declare-fun lt!24491 () Unit!1547)

(assert (=> b!60009 (= lt!24491 (addApplyDifferent!42 lt!24489 lt!24478 (minValue!1958 (_2!1019 lt!23711)) lt!24479))))

(assert (=> b!60009 (= (apply!66 (+!80 lt!24489 (tuple2!2015 lt!24478 (minValue!1958 (_2!1019 lt!23711)))) lt!24479) (apply!66 lt!24489 lt!24479))))

(declare-fun lt!24481 () Unit!1547)

(assert (=> b!60009 (= lt!24481 lt!24491)))

(declare-fun lt!24482 () ListLongMap!1343)

(assert (=> b!60009 (= lt!24482 (getCurrentListMapNoExtraKeys!44 (_keys!3666 (_2!1019 lt!23711)) (_values!2025 (_2!1019 lt!23711)) (mask!5926 (_2!1019 lt!23711)) (extraKeys!1929 (_2!1019 lt!23711)) (zeroValue!1958 (_2!1019 lt!23711)) (minValue!1958 (_2!1019 lt!23711)) #b00000000000000000000000000000000 (defaultEntry!2042 (_2!1019 lt!23711))))))

(declare-fun lt!24488 () (_ BitVec 64))

(assert (=> b!60009 (= lt!24488 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24480 () (_ BitVec 64))

(assert (=> b!60009 (= lt!24480 (select (arr!1772 (_keys!3666 (_2!1019 lt!23711))) #b00000000000000000000000000000000))))

(declare-fun lt!24493 () Unit!1547)

(assert (=> b!60009 (= lt!24493 (addApplyDifferent!42 lt!24482 lt!24488 (zeroValue!1958 (_2!1019 lt!23711)) lt!24480))))

(assert (=> b!60009 (= (apply!66 (+!80 lt!24482 (tuple2!2015 lt!24488 (zeroValue!1958 (_2!1019 lt!23711)))) lt!24480) (apply!66 lt!24482 lt!24480))))

(declare-fun lt!24486 () Unit!1547)

(assert (=> b!60009 (= lt!24486 lt!24493)))

(declare-fun lt!24477 () ListLongMap!1343)

(assert (=> b!60009 (= lt!24477 (getCurrentListMapNoExtraKeys!44 (_keys!3666 (_2!1019 lt!23711)) (_values!2025 (_2!1019 lt!23711)) (mask!5926 (_2!1019 lt!23711)) (extraKeys!1929 (_2!1019 lt!23711)) (zeroValue!1958 (_2!1019 lt!23711)) (minValue!1958 (_2!1019 lt!23711)) #b00000000000000000000000000000000 (defaultEntry!2042 (_2!1019 lt!23711))))))

(declare-fun lt!24485 () (_ BitVec 64))

(assert (=> b!60009 (= lt!24485 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24487 () (_ BitVec 64))

(assert (=> b!60009 (= lt!24487 (select (arr!1772 (_keys!3666 (_2!1019 lt!23711))) #b00000000000000000000000000000000))))

(assert (=> b!60009 (= lt!24473 (addApplyDifferent!42 lt!24477 lt!24485 (minValue!1958 (_2!1019 lt!23711)) lt!24487))))

(assert (=> b!60009 (= (apply!66 (+!80 lt!24477 (tuple2!2015 lt!24485 (minValue!1958 (_2!1019 lt!23711)))) lt!24487) (apply!66 lt!24477 lt!24487))))

(declare-fun b!60010 () Bool)

(assert (=> b!60010 (= e!39437 call!4530)))

(declare-fun b!60011 () Bool)

(declare-fun call!4533 () ListLongMap!1343)

(assert (=> b!60011 (= e!39437 call!4533)))

(declare-fun bm!4526 () Bool)

(assert (=> bm!4526 (= call!4527 call!4529)))

(declare-fun call!4531 () ListLongMap!1343)

(declare-fun bm!4527 () Bool)

(assert (=> bm!4527 (= call!4531 (+!80 (ite c!7764 call!4529 (ite c!7766 call!4527 call!4530)) (ite (or c!7764 c!7766) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (_2!1019 lt!23711))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (_2!1019 lt!23711))))))))

(declare-fun b!60012 () Bool)

(assert (=> b!60012 (= e!39436 (= (apply!66 lt!24484 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1958 (_2!1019 lt!23711))))))

(declare-fun b!60013 () Bool)

(assert (=> b!60013 (= e!39439 (+!80 call!4531 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (_2!1019 lt!23711)))))))

(declare-fun b!60014 () Bool)

(assert (=> b!60014 (= e!39431 call!4533)))

(declare-fun b!60015 () Bool)

(declare-fun res!33249 () Bool)

(assert (=> b!60015 (=> (not res!33249) (not e!39427))))

(assert (=> b!60015 (= res!33249 e!39429)))

(declare-fun c!7763 () Bool)

(assert (=> b!60015 (= c!7763 (not (= (bvand (extraKeys!1929 (_2!1019 lt!23711)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!60016 () Bool)

(assert (=> b!60016 (= e!39435 (= (apply!66 lt!24484 (select (arr!1772 (_keys!3666 (_2!1019 lt!23711))) #b00000000000000000000000000000000)) (get!1072 (select (arr!1773 (_values!2025 (_2!1019 lt!23711))) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2042 (_2!1019 lt!23711)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!60016 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (_values!2025 (_2!1019 lt!23711)))))))

(assert (=> b!60016 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 (_2!1019 lt!23711)))))))

(declare-fun b!60017 () Bool)

(declare-fun e!39433 () Bool)

(assert (=> b!60017 (= e!39438 e!39433)))

(declare-fun res!33248 () Bool)

(assert (=> b!60017 (= res!33248 call!4528)))

(assert (=> b!60017 (=> (not res!33248) (not e!39433))))

(declare-fun bm!4528 () Bool)

(assert (=> bm!4528 (= call!4533 call!4531)))

(declare-fun b!60018 () Bool)

(assert (=> b!60018 (= e!39429 (not call!4532))))

(declare-fun bm!4529 () Bool)

(assert (=> bm!4529 (= call!4528 (contains!678 lt!24484 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4530 () Bool)

(assert (=> bm!4530 (= call!4532 (contains!678 lt!24484 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60019 () Bool)

(declare-fun e!39428 () Bool)

(assert (=> b!60019 (= e!39428 (validKeyInArray!0 (select (arr!1772 (_keys!3666 (_2!1019 lt!23711))) #b00000000000000000000000000000000)))))

(declare-fun b!60020 () Bool)

(declare-fun Unit!1595 () Unit!1547)

(assert (=> b!60020 (= e!39430 Unit!1595)))

(declare-fun b!60021 () Bool)

(assert (=> b!60021 (= e!39427 e!39438)))

(declare-fun c!7765 () Bool)

(assert (=> b!60021 (= c!7765 (not (= (bvand (extraKeys!1929 (_2!1019 lt!23711)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!60022 () Bool)

(assert (=> b!60022 (= e!39433 (= (apply!66 lt!24484 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1958 (_2!1019 lt!23711))))))

(declare-fun b!60023 () Bool)

(assert (=> b!60023 (= e!39434 (validKeyInArray!0 (select (arr!1772 (_keys!3666 (_2!1019 lt!23711))) #b00000000000000000000000000000000)))))

(declare-fun b!60024 () Bool)

(declare-fun res!33254 () Bool)

(assert (=> b!60024 (=> (not res!33254) (not e!39427))))

(assert (=> b!60024 (= res!33254 e!39432)))

(declare-fun res!33250 () Bool)

(assert (=> b!60024 (=> res!33250 e!39432)))

(assert (=> b!60024 (= res!33250 (not e!39428))))

(declare-fun res!33253 () Bool)

(assert (=> b!60024 (=> (not res!33253) (not e!39428))))

(assert (=> b!60024 (= res!33253 (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 (_2!1019 lt!23711)))))))

(assert (= (and d!11693 c!7764) b!60013))

(assert (= (and d!11693 (not c!7764)) b!60008))

(assert (= (and b!60008 c!7766) b!60014))

(assert (= (and b!60008 (not c!7766)) b!60004))

(assert (= (and b!60004 c!7762) b!60011))

(assert (= (and b!60004 (not c!7762)) b!60010))

(assert (= (or b!60011 b!60010) bm!4524))

(assert (= (or b!60014 bm!4524) bm!4526))

(assert (= (or b!60014 b!60011) bm!4528))

(assert (= (or b!60013 bm!4526) bm!4525))

(assert (= (or b!60013 bm!4528) bm!4527))

(assert (= (and d!11693 res!33252) b!60023))

(assert (= (and d!11693 c!7767) b!60009))

(assert (= (and d!11693 (not c!7767)) b!60020))

(assert (= (and d!11693 res!33251) b!60024))

(assert (= (and b!60024 res!33253) b!60019))

(assert (= (and b!60024 (not res!33250)) b!60007))

(assert (= (and b!60007 res!33255) b!60016))

(assert (= (and b!60024 res!33254) b!60015))

(assert (= (and b!60015 c!7763) b!60006))

(assert (= (and b!60015 (not c!7763)) b!60018))

(assert (= (and b!60006 res!33247) b!60012))

(assert (= (or b!60006 b!60018) bm!4530))

(assert (= (and b!60015 res!33249) b!60021))

(assert (= (and b!60021 c!7765) b!60017))

(assert (= (and b!60021 (not c!7765)) b!60005))

(assert (= (and b!60017 res!33248) b!60022))

(assert (= (or b!60017 b!60005) bm!4529))

(declare-fun b_lambda!2629 () Bool)

(assert (=> (not b_lambda!2629) (not b!60016)))

(declare-fun t!4771 () Bool)

(declare-fun tb!1325 () Bool)

(assert (=> (and b!58642 (= (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) (defaultEntry!2042 (_2!1019 lt!23711))) t!4771) tb!1325))

(declare-fun result!2385 () Bool)

(assert (=> tb!1325 (= result!2385 tp_is_empty!2395)))

(assert (=> b!60016 t!4771))

(declare-fun b_and!3625 () Bool)

(assert (= b_and!3621 (and (=> t!4771 result!2385) b_and!3625)))

(declare-fun t!4773 () Bool)

(declare-fun tb!1327 () Bool)

(assert (=> (and b!58653 (= (defaultEntry!2042 newMap!16) (defaultEntry!2042 (_2!1019 lt!23711))) t!4773) tb!1327))

(declare-fun result!2387 () Bool)

(assert (= result!2387 result!2385))

(assert (=> b!60016 t!4773))

(declare-fun b_and!3627 () Bool)

(assert (= b_and!3623 (and (=> t!4773 result!2387) b_and!3627)))

(declare-fun m!52303 () Bool)

(assert (=> b!60012 m!52303))

(assert (=> b!60023 m!51383))

(assert (=> b!60023 m!51383))

(assert (=> b!60023 m!51385))

(declare-fun m!52305 () Bool)

(assert (=> b!60013 m!52305))

(assert (=> b!60007 m!51383))

(assert (=> b!60007 m!51383))

(declare-fun m!52307 () Bool)

(assert (=> b!60007 m!52307))

(declare-fun m!52309 () Bool)

(assert (=> bm!4530 m!52309))

(declare-fun m!52311 () Bool)

(assert (=> b!60022 m!52311))

(declare-fun m!52313 () Bool)

(assert (=> bm!4529 m!52313))

(declare-fun m!52315 () Bool)

(assert (=> b!60016 m!52315))

(declare-fun m!52317 () Bool)

(assert (=> b!60016 m!52317))

(assert (=> b!60016 m!51383))

(assert (=> b!60016 m!51383))

(declare-fun m!52319 () Bool)

(assert (=> b!60016 m!52319))

(assert (=> b!60016 m!52317))

(assert (=> b!60016 m!52315))

(declare-fun m!52321 () Bool)

(assert (=> b!60016 m!52321))

(declare-fun m!52323 () Bool)

(assert (=> bm!4527 m!52323))

(declare-fun m!52325 () Bool)

(assert (=> d!11693 m!52325))

(assert (=> b!60019 m!51383))

(assert (=> b!60019 m!51383))

(assert (=> b!60019 m!51385))

(declare-fun m!52327 () Bool)

(assert (=> bm!4525 m!52327))

(declare-fun m!52329 () Bool)

(assert (=> b!60009 m!52329))

(declare-fun m!52331 () Bool)

(assert (=> b!60009 m!52331))

(declare-fun m!52333 () Bool)

(assert (=> b!60009 m!52333))

(assert (=> b!60009 m!51383))

(declare-fun m!52335 () Bool)

(assert (=> b!60009 m!52335))

(declare-fun m!52337 () Bool)

(assert (=> b!60009 m!52337))

(declare-fun m!52339 () Bool)

(assert (=> b!60009 m!52339))

(declare-fun m!52341 () Bool)

(assert (=> b!60009 m!52341))

(declare-fun m!52343 () Bool)

(assert (=> b!60009 m!52343))

(declare-fun m!52345 () Bool)

(assert (=> b!60009 m!52345))

(declare-fun m!52347 () Bool)

(assert (=> b!60009 m!52347))

(assert (=> b!60009 m!52329))

(declare-fun m!52349 () Bool)

(assert (=> b!60009 m!52349))

(declare-fun m!52351 () Bool)

(assert (=> b!60009 m!52351))

(declare-fun m!52353 () Bool)

(assert (=> b!60009 m!52353))

(assert (=> b!60009 m!52351))

(declare-fun m!52355 () Bool)

(assert (=> b!60009 m!52355))

(declare-fun m!52357 () Bool)

(assert (=> b!60009 m!52357))

(assert (=> b!60009 m!52327))

(assert (=> b!60009 m!52341))

(assert (=> b!60009 m!52335))

(assert (=> d!11241 d!11693))

(declare-fun b!60025 () Bool)

(declare-fun e!39443 () Bool)

(declare-fun e!39442 () Bool)

(assert (=> b!60025 (= e!39443 e!39442)))

(declare-fun res!33257 () Bool)

(assert (=> b!60025 (=> (not res!33257) (not e!39442))))

(declare-fun e!39440 () Bool)

(assert (=> b!60025 (= res!33257 (not e!39440))))

(declare-fun res!33256 () Bool)

(assert (=> b!60025 (=> (not res!33256) (not e!39440))))

(assert (=> b!60025 (= res!33256 (validKeyInArray!0 (select (arr!1772 (_keys!3666 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!60026 () Bool)

(declare-fun e!39441 () Bool)

(declare-fun call!4534 () Bool)

(assert (=> b!60026 (= e!39441 call!4534)))

(declare-fun b!60027 () Bool)

(assert (=> b!60027 (= e!39441 call!4534)))

(declare-fun d!11695 () Bool)

(declare-fun res!33258 () Bool)

(assert (=> d!11695 (=> res!33258 e!39443)))

(assert (=> d!11695 (= res!33258 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2002 (_keys!3666 newMap!16))))))

(assert (=> d!11695 (= (arrayNoDuplicates!0 (_keys!3666 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!7568 (Cons!1418 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000) Nil!1419) Nil!1419)) e!39443)))

(declare-fun bm!4531 () Bool)

(declare-fun c!7768 () Bool)

(assert (=> bm!4531 (= call!4534 (arrayNoDuplicates!0 (_keys!3666 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!7768 (Cons!1418 (select (arr!1772 (_keys!3666 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (ite c!7568 (Cons!1418 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000) Nil!1419) Nil!1419)) (ite c!7568 (Cons!1418 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000) Nil!1419) Nil!1419))))))

(declare-fun b!60028 () Bool)

(assert (=> b!60028 (= e!39440 (contains!679 (ite c!7568 (Cons!1418 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000) Nil!1419) Nil!1419) (select (arr!1772 (_keys!3666 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!60029 () Bool)

(assert (=> b!60029 (= e!39442 e!39441)))

(assert (=> b!60029 (= c!7768 (validKeyInArray!0 (select (arr!1772 (_keys!3666 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (= (and d!11695 (not res!33258)) b!60025))

(assert (= (and b!60025 res!33256) b!60028))

(assert (= (and b!60025 res!33257) b!60029))

(assert (= (and b!60029 c!7768) b!60026))

(assert (= (and b!60029 (not c!7768)) b!60027))

(assert (= (or b!60026 b!60027) bm!4531))

(assert (=> b!60025 m!51237))

(assert (=> b!60025 m!51237))

(assert (=> b!60025 m!52137))

(assert (=> bm!4531 m!51237))

(declare-fun m!52359 () Bool)

(assert (=> bm!4531 m!52359))

(assert (=> b!60028 m!51237))

(assert (=> b!60028 m!51237))

(declare-fun m!52361 () Bool)

(assert (=> b!60028 m!52361))

(assert (=> b!60029 m!51237))

(assert (=> b!60029 m!51237))

(assert (=> b!60029 m!52137))

(assert (=> bm!4432 d!11695))

(declare-fun d!11697 () Bool)

(assert (=> d!11697 (= (get!1074 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59146 d!11697))

(declare-fun d!11699 () Bool)

(declare-fun e!39444 () Bool)

(assert (=> d!11699 e!39444))

(declare-fun res!33259 () Bool)

(assert (=> d!11699 (=> (not res!33259) (not e!39444))))

(declare-fun lt!24496 () ListLongMap!1343)

(assert (=> d!11699 (= res!33259 (contains!678 lt!24496 (_1!1018 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!24497 () List!1423)

(assert (=> d!11699 (= lt!24496 (ListLongMap!1344 lt!24497))))

(declare-fun lt!24495 () Unit!1547)

(declare-fun lt!24494 () Unit!1547)

(assert (=> d!11699 (= lt!24495 lt!24494)))

(assert (=> d!11699 (= (getValueByKey!125 lt!24497 (_1!1018 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1018 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11699 (= lt!24494 (lemmaContainsTupThenGetReturnValue!42 lt!24497 (_1!1018 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1018 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11699 (= lt!24497 (insertStrictlySorted!45 (toList!687 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (_1!1018 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1018 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11699 (= (+!80 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!24496)))

(declare-fun b!60030 () Bool)

(declare-fun res!33260 () Bool)

(assert (=> b!60030 (=> (not res!33260) (not e!39444))))

(assert (=> b!60030 (= res!33260 (= (getValueByKey!125 (toList!687 lt!24496) (_1!1018 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1018 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!60031 () Bool)

(assert (=> b!60031 (= e!39444 (contains!680 (toList!687 lt!24496) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!11699 res!33259) b!60030))

(assert (= (and b!60030 res!33260) b!60031))

(declare-fun m!52363 () Bool)

(assert (=> d!11699 m!52363))

(declare-fun m!52365 () Bool)

(assert (=> d!11699 m!52365))

(declare-fun m!52367 () Bool)

(assert (=> d!11699 m!52367))

(declare-fun m!52369 () Bool)

(assert (=> d!11699 m!52369))

(declare-fun m!52371 () Bool)

(assert (=> b!60030 m!52371))

(declare-fun m!52373 () Bool)

(assert (=> b!60031 m!52373))

(assert (=> d!11239 d!11699))

(declare-fun bm!4532 () Bool)

(declare-fun call!4538 () ListLongMap!1343)

(declare-fun call!4535 () ListLongMap!1343)

(assert (=> bm!4532 (= call!4538 call!4535)))

(declare-fun b!60032 () Bool)

(declare-fun c!7769 () Bool)

(assert (=> b!60032 (= c!7769 (and (not (= (bvand lt!23725 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!23725 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!39449 () ListLongMap!1343)

(declare-fun e!39455 () ListLongMap!1343)

(assert (=> b!60032 (= e!39449 e!39455)))

(declare-fun b!60033 () Bool)

(declare-fun e!39456 () Bool)

(declare-fun call!4536 () Bool)

(assert (=> b!60033 (= e!39456 (not call!4536))))

(declare-fun bm!4533 () Bool)

(declare-fun call!4537 () ListLongMap!1343)

(assert (=> bm!4533 (= call!4537 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) lt!23725 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun b!60034 () Bool)

(declare-fun e!39447 () Bool)

(declare-fun e!39454 () Bool)

(assert (=> b!60034 (= e!39447 e!39454)))

(declare-fun res!33261 () Bool)

(declare-fun call!4540 () Bool)

(assert (=> b!60034 (= res!33261 call!4540)))

(assert (=> b!60034 (=> (not res!33261) (not e!39454))))

(declare-fun b!60035 () Bool)

(declare-fun e!39450 () Bool)

(declare-fun e!39453 () Bool)

(assert (=> b!60035 (= e!39450 e!39453)))

(declare-fun res!33269 () Bool)

(assert (=> b!60035 (=> (not res!33269) (not e!39453))))

(declare-fun lt!24510 () ListLongMap!1343)

(assert (=> b!60035 (= res!33269 (contains!678 lt!24510 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!60035 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(declare-fun b!60036 () Bool)

(declare-fun e!39457 () ListLongMap!1343)

(assert (=> b!60036 (= e!39457 e!39449)))

(declare-fun c!7773 () Bool)

(assert (=> b!60036 (= c!7773 (and (not (= (bvand lt!23725 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!23725 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun d!11701 () Bool)

(declare-fun e!39445 () Bool)

(assert (=> d!11701 e!39445))

(declare-fun res!33265 () Bool)

(assert (=> d!11701 (=> (not res!33265) (not e!39445))))

(assert (=> d!11701 (= res!33265 (or (bvsge #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))))

(declare-fun lt!24518 () ListLongMap!1343)

(assert (=> d!11701 (= lt!24510 lt!24518)))

(declare-fun lt!24500 () Unit!1547)

(declare-fun e!39448 () Unit!1547)

(assert (=> d!11701 (= lt!24500 e!39448)))

(declare-fun c!7774 () Bool)

(declare-fun e!39452 () Bool)

(assert (=> d!11701 (= c!7774 e!39452)))

(declare-fun res!33266 () Bool)

(assert (=> d!11701 (=> (not res!33266) (not e!39452))))

(assert (=> d!11701 (= res!33266 (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(assert (=> d!11701 (= lt!24518 e!39457)))

(declare-fun c!7771 () Bool)

(assert (=> d!11701 (= c!7771 (and (not (= (bvand lt!23725 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!23725 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11701 (validMask!0 (mask!5926 newMap!16))))

(assert (=> d!11701 (= (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) lt!23725 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) lt!24510)))

(declare-fun b!60037 () Bool)

(declare-fun lt!24499 () Unit!1547)

(assert (=> b!60037 (= e!39448 lt!24499)))

(declare-fun lt!24502 () ListLongMap!1343)

(assert (=> b!60037 (= lt!24502 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) lt!23725 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24516 () (_ BitVec 64))

(assert (=> b!60037 (= lt!24516 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24509 () (_ BitVec 64))

(assert (=> b!60037 (= lt!24509 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24498 () Unit!1547)

(assert (=> b!60037 (= lt!24498 (addStillContains!42 lt!24502 lt!24516 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!24509))))

(assert (=> b!60037 (contains!678 (+!80 lt!24502 (tuple2!2015 lt!24516 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!24509)))

(declare-fun lt!24501 () Unit!1547)

(assert (=> b!60037 (= lt!24501 lt!24498)))

(declare-fun lt!24515 () ListLongMap!1343)

(assert (=> b!60037 (= lt!24515 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) lt!23725 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24504 () (_ BitVec 64))

(assert (=> b!60037 (= lt!24504 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24505 () (_ BitVec 64))

(assert (=> b!60037 (= lt!24505 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24517 () Unit!1547)

(assert (=> b!60037 (= lt!24517 (addApplyDifferent!42 lt!24515 lt!24504 (minValue!1958 newMap!16) lt!24505))))

(assert (=> b!60037 (= (apply!66 (+!80 lt!24515 (tuple2!2015 lt!24504 (minValue!1958 newMap!16))) lt!24505) (apply!66 lt!24515 lt!24505))))

(declare-fun lt!24507 () Unit!1547)

(assert (=> b!60037 (= lt!24507 lt!24517)))

(declare-fun lt!24508 () ListLongMap!1343)

(assert (=> b!60037 (= lt!24508 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) lt!23725 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24514 () (_ BitVec 64))

(assert (=> b!60037 (= lt!24514 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24506 () (_ BitVec 64))

(assert (=> b!60037 (= lt!24506 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24519 () Unit!1547)

(assert (=> b!60037 (= lt!24519 (addApplyDifferent!42 lt!24508 lt!24514 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!24506))))

(assert (=> b!60037 (= (apply!66 (+!80 lt!24508 (tuple2!2015 lt!24514 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!24506) (apply!66 lt!24508 lt!24506))))

(declare-fun lt!24512 () Unit!1547)

(assert (=> b!60037 (= lt!24512 lt!24519)))

(declare-fun lt!24503 () ListLongMap!1343)

(assert (=> b!60037 (= lt!24503 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) lt!23725 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24511 () (_ BitVec 64))

(assert (=> b!60037 (= lt!24511 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24513 () (_ BitVec 64))

(assert (=> b!60037 (= lt!24513 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!60037 (= lt!24499 (addApplyDifferent!42 lt!24503 lt!24511 (minValue!1958 newMap!16) lt!24513))))

(assert (=> b!60037 (= (apply!66 (+!80 lt!24503 (tuple2!2015 lt!24511 (minValue!1958 newMap!16))) lt!24513) (apply!66 lt!24503 lt!24513))))

(declare-fun b!60038 () Bool)

(assert (=> b!60038 (= e!39455 call!4538)))

(declare-fun b!60039 () Bool)

(declare-fun call!4541 () ListLongMap!1343)

(assert (=> b!60039 (= e!39455 call!4541)))

(declare-fun bm!4534 () Bool)

(assert (=> bm!4534 (= call!4535 call!4537)))

(declare-fun call!4539 () ListLongMap!1343)

(declare-fun bm!4535 () Bool)

(assert (=> bm!4535 (= call!4539 (+!80 (ite c!7771 call!4537 (ite c!7773 call!4535 call!4538)) (ite (or c!7771 c!7773) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))

(declare-fun b!60040 () Bool)

(assert (=> b!60040 (= e!39454 (= (apply!66 lt!24510 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!60041 () Bool)

(assert (=> b!60041 (= e!39457 (+!80 call!4539 (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))

(declare-fun b!60042 () Bool)

(assert (=> b!60042 (= e!39449 call!4541)))

(declare-fun b!60043 () Bool)

(declare-fun res!33263 () Bool)

(assert (=> b!60043 (=> (not res!33263) (not e!39445))))

(assert (=> b!60043 (= res!33263 e!39447)))

(declare-fun c!7770 () Bool)

(assert (=> b!60043 (= c!7770 (not (= (bvand lt!23725 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!60044 () Bool)

(assert (=> b!60044 (= e!39453 (= (apply!66 lt!24510 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)) (get!1072 (select (arr!1773 (_values!2025 newMap!16)) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!60044 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (_values!2025 newMap!16))))))

(assert (=> b!60044 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(declare-fun b!60045 () Bool)

(declare-fun e!39451 () Bool)

(assert (=> b!60045 (= e!39456 e!39451)))

(declare-fun res!33262 () Bool)

(assert (=> b!60045 (= res!33262 call!4536)))

(assert (=> b!60045 (=> (not res!33262) (not e!39451))))

(declare-fun bm!4536 () Bool)

(assert (=> bm!4536 (= call!4541 call!4539)))

(declare-fun b!60046 () Bool)

(assert (=> b!60046 (= e!39447 (not call!4540))))

(declare-fun bm!4537 () Bool)

(assert (=> bm!4537 (= call!4536 (contains!678 lt!24510 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4538 () Bool)

(assert (=> bm!4538 (= call!4540 (contains!678 lt!24510 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60047 () Bool)

(declare-fun e!39446 () Bool)

(assert (=> b!60047 (= e!39446 (validKeyInArray!0 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!60048 () Bool)

(declare-fun Unit!1596 () Unit!1547)

(assert (=> b!60048 (= e!39448 Unit!1596)))

(declare-fun b!60049 () Bool)

(assert (=> b!60049 (= e!39445 e!39456)))

(declare-fun c!7772 () Bool)

(assert (=> b!60049 (= c!7772 (not (= (bvand lt!23725 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!60050 () Bool)

(assert (=> b!60050 (= e!39451 (= (apply!66 lt!24510 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1958 newMap!16)))))

(declare-fun b!60051 () Bool)

(assert (=> b!60051 (= e!39452 (validKeyInArray!0 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!60052 () Bool)

(declare-fun res!33268 () Bool)

(assert (=> b!60052 (=> (not res!33268) (not e!39445))))

(assert (=> b!60052 (= res!33268 e!39450)))

(declare-fun res!33264 () Bool)

(assert (=> b!60052 (=> res!33264 e!39450)))

(assert (=> b!60052 (= res!33264 (not e!39446))))

(declare-fun res!33267 () Bool)

(assert (=> b!60052 (=> (not res!33267) (not e!39446))))

(assert (=> b!60052 (= res!33267 (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(assert (= (and d!11701 c!7771) b!60041))

(assert (= (and d!11701 (not c!7771)) b!60036))

(assert (= (and b!60036 c!7773) b!60042))

(assert (= (and b!60036 (not c!7773)) b!60032))

(assert (= (and b!60032 c!7769) b!60039))

(assert (= (and b!60032 (not c!7769)) b!60038))

(assert (= (or b!60039 b!60038) bm!4532))

(assert (= (or b!60042 bm!4532) bm!4534))

(assert (= (or b!60042 b!60039) bm!4536))

(assert (= (or b!60041 bm!4534) bm!4533))

(assert (= (or b!60041 bm!4536) bm!4535))

(assert (= (and d!11701 res!33266) b!60051))

(assert (= (and d!11701 c!7774) b!60037))

(assert (= (and d!11701 (not c!7774)) b!60048))

(assert (= (and d!11701 res!33265) b!60052))

(assert (= (and b!60052 res!33267) b!60047))

(assert (= (and b!60052 (not res!33264)) b!60035))

(assert (= (and b!60035 res!33269) b!60044))

(assert (= (and b!60052 res!33268) b!60043))

(assert (= (and b!60043 c!7770) b!60034))

(assert (= (and b!60043 (not c!7770)) b!60046))

(assert (= (and b!60034 res!33261) b!60040))

(assert (= (or b!60034 b!60046) bm!4538))

(assert (= (and b!60043 res!33263) b!60049))

(assert (= (and b!60049 c!7772) b!60045))

(assert (= (and b!60049 (not c!7772)) b!60033))

(assert (= (and b!60045 res!33262) b!60050))

(assert (= (or b!60045 b!60033) bm!4537))

(declare-fun b_lambda!2631 () Bool)

(assert (=> (not b_lambda!2631) (not b!60044)))

(assert (=> b!60044 t!4767))

(declare-fun b_and!3629 () Bool)

(assert (= b_and!3625 (and (=> t!4767 result!2381) b_and!3629)))

(assert (=> b!60044 t!4769))

(declare-fun b_and!3631 () Bool)

(assert (= b_and!3627 (and (=> t!4769 result!2383) b_and!3631)))

(declare-fun m!52375 () Bool)

(assert (=> b!60040 m!52375))

(assert (=> b!60051 m!50693))

(assert (=> b!60051 m!50693))

(assert (=> b!60051 m!50695))

(declare-fun m!52377 () Bool)

(assert (=> b!60041 m!52377))

(assert (=> b!60035 m!50693))

(assert (=> b!60035 m!50693))

(declare-fun m!52379 () Bool)

(assert (=> b!60035 m!52379))

(declare-fun m!52381 () Bool)

(assert (=> bm!4538 m!52381))

(declare-fun m!52383 () Bool)

(assert (=> b!60050 m!52383))

(declare-fun m!52385 () Bool)

(assert (=> bm!4537 m!52385))

(assert (=> b!60044 m!50707))

(assert (=> b!60044 m!50709))

(assert (=> b!60044 m!50693))

(assert (=> b!60044 m!50693))

(declare-fun m!52387 () Bool)

(assert (=> b!60044 m!52387))

(assert (=> b!60044 m!50709))

(assert (=> b!60044 m!50707))

(assert (=> b!60044 m!50713))

(declare-fun m!52389 () Bool)

(assert (=> bm!4535 m!52389))

(assert (=> d!11701 m!50667))

(assert (=> b!60047 m!50693))

(assert (=> b!60047 m!50693))

(assert (=> b!60047 m!50695))

(assert (=> bm!4533 m!50395))

(declare-fun m!52391 () Bool)

(assert (=> bm!4533 m!52391))

(declare-fun m!52393 () Bool)

(assert (=> b!60037 m!52393))

(declare-fun m!52395 () Bool)

(assert (=> b!60037 m!52395))

(declare-fun m!52397 () Bool)

(assert (=> b!60037 m!52397))

(assert (=> b!60037 m!50693))

(declare-fun m!52399 () Bool)

(assert (=> b!60037 m!52399))

(declare-fun m!52401 () Bool)

(assert (=> b!60037 m!52401))

(declare-fun m!52403 () Bool)

(assert (=> b!60037 m!52403))

(declare-fun m!52405 () Bool)

(assert (=> b!60037 m!52405))

(declare-fun m!52407 () Bool)

(assert (=> b!60037 m!52407))

(declare-fun m!52409 () Bool)

(assert (=> b!60037 m!52409))

(declare-fun m!52411 () Bool)

(assert (=> b!60037 m!52411))

(assert (=> b!60037 m!52393))

(declare-fun m!52413 () Bool)

(assert (=> b!60037 m!52413))

(declare-fun m!52415 () Bool)

(assert (=> b!60037 m!52415))

(declare-fun m!52417 () Bool)

(assert (=> b!60037 m!52417))

(assert (=> b!60037 m!52415))

(assert (=> b!60037 m!50395))

(declare-fun m!52419 () Bool)

(assert (=> b!60037 m!52419))

(assert (=> b!60037 m!50395))

(declare-fun m!52421 () Bool)

(assert (=> b!60037 m!52421))

(assert (=> b!60037 m!50395))

(assert (=> b!60037 m!52391))

(assert (=> b!60037 m!52405))

(assert (=> b!60037 m!52399))

(assert (=> d!11239 d!11701))

(assert (=> d!11239 d!11363))

(declare-fun d!11703 () Bool)

(assert (=> d!11703 (= (+!80 (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!388 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) lt!23725 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(assert (=> d!11703 true))

(declare-fun _$7!44 () Unit!1547)

(assert (=> d!11703 (= (choose!310 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) lt!23725 (zeroValue!1958 newMap!16) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1958 newMap!16) (defaultEntry!2042 newMap!16)) _$7!44)))

(declare-fun bs!2599 () Bool)

(assert (= bs!2599 d!11703))

(assert (=> bs!2599 m!50509))

(assert (=> bs!2599 m!50509))

(assert (=> bs!2599 m!50683))

(assert (=> bs!2599 m!50395))

(assert (=> bs!2599 m!50681))

(assert (=> d!11239 d!11703))

(assert (=> d!11239 d!11247))

(declare-fun d!11705 () Bool)

(assert (=> d!11705 (= (validKeyInArray!0 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) (and (not (= (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!59107 d!11705))

(assert (=> b!59346 d!11237))

(declare-fun d!11707 () Bool)

(assert (=> d!11707 (= (apply!66 (+!80 lt!23837 (tuple2!2015 lt!23826 (minValue!1958 newMap!16))) lt!23827) (get!1075 (getValueByKey!125 (toList!687 (+!80 lt!23837 (tuple2!2015 lt!23826 (minValue!1958 newMap!16)))) lt!23827)))))

(declare-fun bs!2600 () Bool)

(assert (= bs!2600 d!11707))

(declare-fun m!52423 () Bool)

(assert (=> bs!2600 m!52423))

(assert (=> bs!2600 m!52423))

(declare-fun m!52425 () Bool)

(assert (=> bs!2600 m!52425))

(assert (=> b!59062 d!11707))

(declare-fun d!11709 () Bool)

(declare-fun e!39458 () Bool)

(assert (=> d!11709 e!39458))

(declare-fun res!33270 () Bool)

(assert (=> d!11709 (=> (not res!33270) (not e!39458))))

(declare-fun lt!24522 () ListLongMap!1343)

(assert (=> d!11709 (= res!33270 (contains!678 lt!24522 (_1!1018 (tuple2!2015 lt!23836 (zeroValue!1958 newMap!16)))))))

(declare-fun lt!24523 () List!1423)

(assert (=> d!11709 (= lt!24522 (ListLongMap!1344 lt!24523))))

(declare-fun lt!24521 () Unit!1547)

(declare-fun lt!24520 () Unit!1547)

(assert (=> d!11709 (= lt!24521 lt!24520)))

(assert (=> d!11709 (= (getValueByKey!125 lt!24523 (_1!1018 (tuple2!2015 lt!23836 (zeroValue!1958 newMap!16)))) (Some!130 (_2!1018 (tuple2!2015 lt!23836 (zeroValue!1958 newMap!16)))))))

(assert (=> d!11709 (= lt!24520 (lemmaContainsTupThenGetReturnValue!42 lt!24523 (_1!1018 (tuple2!2015 lt!23836 (zeroValue!1958 newMap!16))) (_2!1018 (tuple2!2015 lt!23836 (zeroValue!1958 newMap!16)))))))

(assert (=> d!11709 (= lt!24523 (insertStrictlySorted!45 (toList!687 lt!23830) (_1!1018 (tuple2!2015 lt!23836 (zeroValue!1958 newMap!16))) (_2!1018 (tuple2!2015 lt!23836 (zeroValue!1958 newMap!16)))))))

(assert (=> d!11709 (= (+!80 lt!23830 (tuple2!2015 lt!23836 (zeroValue!1958 newMap!16))) lt!24522)))

(declare-fun b!60053 () Bool)

(declare-fun res!33271 () Bool)

(assert (=> b!60053 (=> (not res!33271) (not e!39458))))

(assert (=> b!60053 (= res!33271 (= (getValueByKey!125 (toList!687 lt!24522) (_1!1018 (tuple2!2015 lt!23836 (zeroValue!1958 newMap!16)))) (Some!130 (_2!1018 (tuple2!2015 lt!23836 (zeroValue!1958 newMap!16))))))))

(declare-fun b!60054 () Bool)

(assert (=> b!60054 (= e!39458 (contains!680 (toList!687 lt!24522) (tuple2!2015 lt!23836 (zeroValue!1958 newMap!16))))))

(assert (= (and d!11709 res!33270) b!60053))

(assert (= (and b!60053 res!33271) b!60054))

(declare-fun m!52427 () Bool)

(assert (=> d!11709 m!52427))

(declare-fun m!52429 () Bool)

(assert (=> d!11709 m!52429))

(declare-fun m!52431 () Bool)

(assert (=> d!11709 m!52431))

(declare-fun m!52433 () Bool)

(assert (=> d!11709 m!52433))

(declare-fun m!52435 () Bool)

(assert (=> b!60053 m!52435))

(declare-fun m!52437 () Bool)

(assert (=> b!60054 m!52437))

(assert (=> b!59062 d!11709))

(declare-fun d!11711 () Bool)

(assert (=> d!11711 (= (apply!66 lt!23825 lt!23835) (get!1075 (getValueByKey!125 (toList!687 lt!23825) lt!23835)))))

(declare-fun bs!2601 () Bool)

(assert (= bs!2601 d!11711))

(declare-fun m!52439 () Bool)

(assert (=> bs!2601 m!52439))

(assert (=> bs!2601 m!52439))

(declare-fun m!52441 () Bool)

(assert (=> bs!2601 m!52441))

(assert (=> b!59062 d!11711))

(declare-fun d!11713 () Bool)

(declare-fun e!39459 () Bool)

(assert (=> d!11713 e!39459))

(declare-fun res!33272 () Bool)

(assert (=> d!11713 (=> res!33272 e!39459)))

(declare-fun lt!24526 () Bool)

(assert (=> d!11713 (= res!33272 (not lt!24526))))

(declare-fun lt!24525 () Bool)

(assert (=> d!11713 (= lt!24526 lt!24525)))

(declare-fun lt!24524 () Unit!1547)

(declare-fun e!39460 () Unit!1547)

(assert (=> d!11713 (= lt!24524 e!39460)))

(declare-fun c!7775 () Bool)

(assert (=> d!11713 (= c!7775 lt!24525)))

(assert (=> d!11713 (= lt!24525 (containsKey!128 (toList!687 (+!80 lt!23824 (tuple2!2015 lt!23838 (zeroValue!1958 newMap!16)))) lt!23831))))

(assert (=> d!11713 (= (contains!678 (+!80 lt!23824 (tuple2!2015 lt!23838 (zeroValue!1958 newMap!16))) lt!23831) lt!24526)))

(declare-fun b!60055 () Bool)

(declare-fun lt!24527 () Unit!1547)

(assert (=> b!60055 (= e!39460 lt!24527)))

(assert (=> b!60055 (= lt!24527 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 (+!80 lt!23824 (tuple2!2015 lt!23838 (zeroValue!1958 newMap!16)))) lt!23831))))

(assert (=> b!60055 (isDefined!77 (getValueByKey!125 (toList!687 (+!80 lt!23824 (tuple2!2015 lt!23838 (zeroValue!1958 newMap!16)))) lt!23831))))

(declare-fun b!60056 () Bool)

(declare-fun Unit!1597 () Unit!1547)

(assert (=> b!60056 (= e!39460 Unit!1597)))

(declare-fun b!60057 () Bool)

(assert (=> b!60057 (= e!39459 (isDefined!77 (getValueByKey!125 (toList!687 (+!80 lt!23824 (tuple2!2015 lt!23838 (zeroValue!1958 newMap!16)))) lt!23831)))))

(assert (= (and d!11713 c!7775) b!60055))

(assert (= (and d!11713 (not c!7775)) b!60056))

(assert (= (and d!11713 (not res!33272)) b!60057))

(declare-fun m!52443 () Bool)

(assert (=> d!11713 m!52443))

(declare-fun m!52445 () Bool)

(assert (=> b!60055 m!52445))

(declare-fun m!52447 () Bool)

(assert (=> b!60055 m!52447))

(assert (=> b!60055 m!52447))

(declare-fun m!52449 () Bool)

(assert (=> b!60055 m!52449))

(assert (=> b!60057 m!52447))

(assert (=> b!60057 m!52447))

(assert (=> b!60057 m!52449))

(assert (=> b!59062 d!11713))

(declare-fun d!11715 () Bool)

(assert (=> d!11715 (= (apply!66 lt!23837 lt!23827) (get!1075 (getValueByKey!125 (toList!687 lt!23837) lt!23827)))))

(declare-fun bs!2602 () Bool)

(assert (= bs!2602 d!11715))

(declare-fun m!52451 () Bool)

(assert (=> bs!2602 m!52451))

(assert (=> bs!2602 m!52451))

(declare-fun m!52453 () Bool)

(assert (=> bs!2602 m!52453))

(assert (=> b!59062 d!11715))

(declare-fun d!11717 () Bool)

(assert (=> d!11717 (= (apply!66 (+!80 lt!23830 (tuple2!2015 lt!23836 (zeroValue!1958 newMap!16))) lt!23828) (get!1075 (getValueByKey!125 (toList!687 (+!80 lt!23830 (tuple2!2015 lt!23836 (zeroValue!1958 newMap!16)))) lt!23828)))))

(declare-fun bs!2603 () Bool)

(assert (= bs!2603 d!11717))

(declare-fun m!52455 () Bool)

(assert (=> bs!2603 m!52455))

(assert (=> bs!2603 m!52455))

(declare-fun m!52457 () Bool)

(assert (=> bs!2603 m!52457))

(assert (=> b!59062 d!11717))

(declare-fun d!11719 () Bool)

(declare-fun e!39461 () Bool)

(assert (=> d!11719 e!39461))

(declare-fun res!33273 () Bool)

(assert (=> d!11719 (=> (not res!33273) (not e!39461))))

(declare-fun lt!24530 () ListLongMap!1343)

(assert (=> d!11719 (= res!33273 (contains!678 lt!24530 (_1!1018 (tuple2!2015 lt!23833 (minValue!1958 newMap!16)))))))

(declare-fun lt!24531 () List!1423)

(assert (=> d!11719 (= lt!24530 (ListLongMap!1344 lt!24531))))

(declare-fun lt!24529 () Unit!1547)

(declare-fun lt!24528 () Unit!1547)

(assert (=> d!11719 (= lt!24529 lt!24528)))

(assert (=> d!11719 (= (getValueByKey!125 lt!24531 (_1!1018 (tuple2!2015 lt!23833 (minValue!1958 newMap!16)))) (Some!130 (_2!1018 (tuple2!2015 lt!23833 (minValue!1958 newMap!16)))))))

(assert (=> d!11719 (= lt!24528 (lemmaContainsTupThenGetReturnValue!42 lt!24531 (_1!1018 (tuple2!2015 lt!23833 (minValue!1958 newMap!16))) (_2!1018 (tuple2!2015 lt!23833 (minValue!1958 newMap!16)))))))

(assert (=> d!11719 (= lt!24531 (insertStrictlySorted!45 (toList!687 lt!23825) (_1!1018 (tuple2!2015 lt!23833 (minValue!1958 newMap!16))) (_2!1018 (tuple2!2015 lt!23833 (minValue!1958 newMap!16)))))))

(assert (=> d!11719 (= (+!80 lt!23825 (tuple2!2015 lt!23833 (minValue!1958 newMap!16))) lt!24530)))

(declare-fun b!60058 () Bool)

(declare-fun res!33274 () Bool)

(assert (=> b!60058 (=> (not res!33274) (not e!39461))))

(assert (=> b!60058 (= res!33274 (= (getValueByKey!125 (toList!687 lt!24530) (_1!1018 (tuple2!2015 lt!23833 (minValue!1958 newMap!16)))) (Some!130 (_2!1018 (tuple2!2015 lt!23833 (minValue!1958 newMap!16))))))))

(declare-fun b!60059 () Bool)

(assert (=> b!60059 (= e!39461 (contains!680 (toList!687 lt!24530) (tuple2!2015 lt!23833 (minValue!1958 newMap!16))))))

(assert (= (and d!11719 res!33273) b!60058))

(assert (= (and b!60058 res!33274) b!60059))

(declare-fun m!52459 () Bool)

(assert (=> d!11719 m!52459))

(declare-fun m!52461 () Bool)

(assert (=> d!11719 m!52461))

(declare-fun m!52463 () Bool)

(assert (=> d!11719 m!52463))

(declare-fun m!52465 () Bool)

(assert (=> d!11719 m!52465))

(declare-fun m!52467 () Bool)

(assert (=> b!60058 m!52467))

(declare-fun m!52469 () Bool)

(assert (=> b!60059 m!52469))

(assert (=> b!59062 d!11719))

(declare-fun d!11721 () Bool)

(assert (=> d!11721 (= (apply!66 (+!80 lt!23830 (tuple2!2015 lt!23836 (zeroValue!1958 newMap!16))) lt!23828) (apply!66 lt!23830 lt!23828))))

(declare-fun lt!24532 () Unit!1547)

(assert (=> d!11721 (= lt!24532 (choose!312 lt!23830 lt!23836 (zeroValue!1958 newMap!16) lt!23828))))

(declare-fun e!39462 () Bool)

(assert (=> d!11721 e!39462))

(declare-fun res!33275 () Bool)

(assert (=> d!11721 (=> (not res!33275) (not e!39462))))

(assert (=> d!11721 (= res!33275 (contains!678 lt!23830 lt!23828))))

(assert (=> d!11721 (= (addApplyDifferent!42 lt!23830 lt!23836 (zeroValue!1958 newMap!16) lt!23828) lt!24532)))

(declare-fun b!60060 () Bool)

(assert (=> b!60060 (= e!39462 (not (= lt!23828 lt!23836)))))

(assert (= (and d!11721 res!33275) b!60060))

(assert (=> d!11721 m!50735))

(declare-fun m!52471 () Bool)

(assert (=> d!11721 m!52471))

(declare-fun m!52473 () Bool)

(assert (=> d!11721 m!52473))

(assert (=> d!11721 m!50725))

(assert (=> d!11721 m!50725))

(assert (=> d!11721 m!50727))

(assert (=> b!59062 d!11721))

(declare-fun d!11723 () Bool)

(declare-fun e!39463 () Bool)

(assert (=> d!11723 e!39463))

(declare-fun res!33276 () Bool)

(assert (=> d!11723 (=> (not res!33276) (not e!39463))))

(declare-fun lt!24535 () ListLongMap!1343)

(assert (=> d!11723 (= res!33276 (contains!678 lt!24535 (_1!1018 (tuple2!2015 lt!23838 (zeroValue!1958 newMap!16)))))))

(declare-fun lt!24536 () List!1423)

(assert (=> d!11723 (= lt!24535 (ListLongMap!1344 lt!24536))))

(declare-fun lt!24534 () Unit!1547)

(declare-fun lt!24533 () Unit!1547)

(assert (=> d!11723 (= lt!24534 lt!24533)))

(assert (=> d!11723 (= (getValueByKey!125 lt!24536 (_1!1018 (tuple2!2015 lt!23838 (zeroValue!1958 newMap!16)))) (Some!130 (_2!1018 (tuple2!2015 lt!23838 (zeroValue!1958 newMap!16)))))))

(assert (=> d!11723 (= lt!24533 (lemmaContainsTupThenGetReturnValue!42 lt!24536 (_1!1018 (tuple2!2015 lt!23838 (zeroValue!1958 newMap!16))) (_2!1018 (tuple2!2015 lt!23838 (zeroValue!1958 newMap!16)))))))

(assert (=> d!11723 (= lt!24536 (insertStrictlySorted!45 (toList!687 lt!23824) (_1!1018 (tuple2!2015 lt!23838 (zeroValue!1958 newMap!16))) (_2!1018 (tuple2!2015 lt!23838 (zeroValue!1958 newMap!16)))))))

(assert (=> d!11723 (= (+!80 lt!23824 (tuple2!2015 lt!23838 (zeroValue!1958 newMap!16))) lt!24535)))

(declare-fun b!60061 () Bool)

(declare-fun res!33277 () Bool)

(assert (=> b!60061 (=> (not res!33277) (not e!39463))))

(assert (=> b!60061 (= res!33277 (= (getValueByKey!125 (toList!687 lt!24535) (_1!1018 (tuple2!2015 lt!23838 (zeroValue!1958 newMap!16)))) (Some!130 (_2!1018 (tuple2!2015 lt!23838 (zeroValue!1958 newMap!16))))))))

(declare-fun b!60062 () Bool)

(assert (=> b!60062 (= e!39463 (contains!680 (toList!687 lt!24535) (tuple2!2015 lt!23838 (zeroValue!1958 newMap!16))))))

(assert (= (and d!11723 res!33276) b!60061))

(assert (= (and b!60061 res!33277) b!60062))

(declare-fun m!52475 () Bool)

(assert (=> d!11723 m!52475))

(declare-fun m!52477 () Bool)

(assert (=> d!11723 m!52477))

(declare-fun m!52479 () Bool)

(assert (=> d!11723 m!52479))

(declare-fun m!52481 () Bool)

(assert (=> d!11723 m!52481))

(declare-fun m!52483 () Bool)

(assert (=> b!60061 m!52483))

(declare-fun m!52485 () Bool)

(assert (=> b!60062 m!52485))

(assert (=> b!59062 d!11723))

(declare-fun d!11725 () Bool)

(assert (=> d!11725 (= (apply!66 lt!23830 lt!23828) (get!1075 (getValueByKey!125 (toList!687 lt!23830) lt!23828)))))

(declare-fun bs!2604 () Bool)

(assert (= bs!2604 d!11725))

(declare-fun m!52487 () Bool)

(assert (=> bs!2604 m!52487))

(assert (=> bs!2604 m!52487))

(declare-fun m!52489 () Bool)

(assert (=> bs!2604 m!52489))

(assert (=> b!59062 d!11725))

(declare-fun d!11727 () Bool)

(assert (=> d!11727 (contains!678 (+!80 lt!23824 (tuple2!2015 lt!23838 (zeroValue!1958 newMap!16))) lt!23831)))

(declare-fun lt!24537 () Unit!1547)

(assert (=> d!11727 (= lt!24537 (choose!313 lt!23824 lt!23838 (zeroValue!1958 newMap!16) lt!23831))))

(assert (=> d!11727 (contains!678 lt!23824 lt!23831)))

(assert (=> d!11727 (= (addStillContains!42 lt!23824 lt!23838 (zeroValue!1958 newMap!16) lt!23831) lt!24537)))

(declare-fun bs!2605 () Bool)

(assert (= bs!2605 d!11727))

(assert (=> bs!2605 m!50741))

(assert (=> bs!2605 m!50741))

(assert (=> bs!2605 m!50743))

(declare-fun m!52491 () Bool)

(assert (=> bs!2605 m!52491))

(declare-fun m!52493 () Bool)

(assert (=> bs!2605 m!52493))

(assert (=> b!59062 d!11727))

(declare-fun d!11729 () Bool)

(declare-fun e!39464 () Bool)

(assert (=> d!11729 e!39464))

(declare-fun res!33278 () Bool)

(assert (=> d!11729 (=> (not res!33278) (not e!39464))))

(declare-fun lt!24540 () ListLongMap!1343)

(assert (=> d!11729 (= res!33278 (contains!678 lt!24540 (_1!1018 (tuple2!2015 lt!23826 (minValue!1958 newMap!16)))))))

(declare-fun lt!24541 () List!1423)

(assert (=> d!11729 (= lt!24540 (ListLongMap!1344 lt!24541))))

(declare-fun lt!24539 () Unit!1547)

(declare-fun lt!24538 () Unit!1547)

(assert (=> d!11729 (= lt!24539 lt!24538)))

(assert (=> d!11729 (= (getValueByKey!125 lt!24541 (_1!1018 (tuple2!2015 lt!23826 (minValue!1958 newMap!16)))) (Some!130 (_2!1018 (tuple2!2015 lt!23826 (minValue!1958 newMap!16)))))))

(assert (=> d!11729 (= lt!24538 (lemmaContainsTupThenGetReturnValue!42 lt!24541 (_1!1018 (tuple2!2015 lt!23826 (minValue!1958 newMap!16))) (_2!1018 (tuple2!2015 lt!23826 (minValue!1958 newMap!16)))))))

(assert (=> d!11729 (= lt!24541 (insertStrictlySorted!45 (toList!687 lt!23837) (_1!1018 (tuple2!2015 lt!23826 (minValue!1958 newMap!16))) (_2!1018 (tuple2!2015 lt!23826 (minValue!1958 newMap!16)))))))

(assert (=> d!11729 (= (+!80 lt!23837 (tuple2!2015 lt!23826 (minValue!1958 newMap!16))) lt!24540)))

(declare-fun b!60063 () Bool)

(declare-fun res!33279 () Bool)

(assert (=> b!60063 (=> (not res!33279) (not e!39464))))

(assert (=> b!60063 (= res!33279 (= (getValueByKey!125 (toList!687 lt!24540) (_1!1018 (tuple2!2015 lt!23826 (minValue!1958 newMap!16)))) (Some!130 (_2!1018 (tuple2!2015 lt!23826 (minValue!1958 newMap!16))))))))

(declare-fun b!60064 () Bool)

(assert (=> b!60064 (= e!39464 (contains!680 (toList!687 lt!24540) (tuple2!2015 lt!23826 (minValue!1958 newMap!16))))))

(assert (= (and d!11729 res!33278) b!60063))

(assert (= (and b!60063 res!33279) b!60064))

(declare-fun m!52495 () Bool)

(assert (=> d!11729 m!52495))

(declare-fun m!52497 () Bool)

(assert (=> d!11729 m!52497))

(declare-fun m!52499 () Bool)

(assert (=> d!11729 m!52499))

(declare-fun m!52501 () Bool)

(assert (=> d!11729 m!52501))

(declare-fun m!52503 () Bool)

(assert (=> b!60063 m!52503))

(declare-fun m!52505 () Bool)

(assert (=> b!60064 m!52505))

(assert (=> b!59062 d!11729))

(declare-fun d!11731 () Bool)

(assert (=> d!11731 (= (apply!66 (+!80 lt!23825 (tuple2!2015 lt!23833 (minValue!1958 newMap!16))) lt!23835) (get!1075 (getValueByKey!125 (toList!687 (+!80 lt!23825 (tuple2!2015 lt!23833 (minValue!1958 newMap!16)))) lt!23835)))))

(declare-fun bs!2606 () Bool)

(assert (= bs!2606 d!11731))

(declare-fun m!52507 () Bool)

(assert (=> bs!2606 m!52507))

(assert (=> bs!2606 m!52507))

(declare-fun m!52509 () Bool)

(assert (=> bs!2606 m!52509))

(assert (=> b!59062 d!11731))

(declare-fun d!11733 () Bool)

(assert (=> d!11733 (= (apply!66 (+!80 lt!23837 (tuple2!2015 lt!23826 (minValue!1958 newMap!16))) lt!23827) (apply!66 lt!23837 lt!23827))))

(declare-fun lt!24542 () Unit!1547)

(assert (=> d!11733 (= lt!24542 (choose!312 lt!23837 lt!23826 (minValue!1958 newMap!16) lt!23827))))

(declare-fun e!39465 () Bool)

(assert (=> d!11733 e!39465))

(declare-fun res!33280 () Bool)

(assert (=> d!11733 (=> (not res!33280) (not e!39465))))

(assert (=> d!11733 (= res!33280 (contains!678 lt!23837 lt!23827))))

(assert (=> d!11733 (= (addApplyDifferent!42 lt!23837 lt!23826 (minValue!1958 newMap!16) lt!23827) lt!24542)))

(declare-fun b!60065 () Bool)

(assert (=> b!60065 (= e!39465 (not (= lt!23827 lt!23826)))))

(assert (= (and d!11733 res!33280) b!60065))

(assert (=> d!11733 m!50723))

(declare-fun m!52511 () Bool)

(assert (=> d!11733 m!52511))

(declare-fun m!52513 () Bool)

(assert (=> d!11733 m!52513))

(assert (=> d!11733 m!50719))

(assert (=> d!11733 m!50719))

(assert (=> d!11733 m!50739))

(assert (=> b!59062 d!11733))

(declare-fun b!60066 () Bool)

(declare-fun e!39472 () ListLongMap!1343)

(assert (=> b!60066 (= e!39472 (ListLongMap!1344 Nil!1420))))

(declare-fun b!60067 () Bool)

(declare-fun e!39471 () ListLongMap!1343)

(declare-fun call!4542 () ListLongMap!1343)

(assert (=> b!60067 (= e!39471 call!4542)))

(declare-fun b!60068 () Bool)

(declare-fun e!39468 () Bool)

(assert (=> b!60068 (= e!39468 (validKeyInArray!0 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!60068 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!60069 () Bool)

(declare-fun res!33282 () Bool)

(declare-fun e!39467 () Bool)

(assert (=> b!60069 (=> (not res!33282) (not e!39467))))

(declare-fun lt!24546 () ListLongMap!1343)

(assert (=> b!60069 (= res!33282 (not (contains!678 lt!24546 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!60070 () Bool)

(declare-fun e!39466 () Bool)

(assert (=> b!60070 (= e!39466 (= lt!24546 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2042 newMap!16))))))

(declare-fun bm!4539 () Bool)

(assert (=> bm!4539 (= call!4542 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2042 newMap!16)))))

(declare-fun b!60071 () Bool)

(assert (=> b!60071 (= e!39466 (isEmpty!300 lt!24546))))

(declare-fun b!60072 () Bool)

(declare-fun lt!24543 () Unit!1547)

(declare-fun lt!24547 () Unit!1547)

(assert (=> b!60072 (= lt!24543 lt!24547)))

(declare-fun lt!24548 () (_ BitVec 64))

(declare-fun lt!24549 () (_ BitVec 64))

(declare-fun lt!24545 () V!2841)

(declare-fun lt!24544 () ListLongMap!1343)

(assert (=> b!60072 (not (contains!678 (+!80 lt!24544 (tuple2!2015 lt!24548 lt!24545)) lt!24549))))

(assert (=> b!60072 (= lt!24547 (addStillNotContains!17 lt!24544 lt!24548 lt!24545 lt!24549))))

(assert (=> b!60072 (= lt!24549 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!60072 (= lt!24545 (get!1072 (select (arr!1773 (_values!2025 newMap!16)) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!60072 (= lt!24548 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!60072 (= lt!24544 call!4542)))

(assert (=> b!60072 (= e!39471 (+!80 call!4542 (tuple2!2015 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000) (get!1072 (select (arr!1773 (_values!2025 newMap!16)) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!60073 () Bool)

(declare-fun e!39470 () Bool)

(declare-fun e!39469 () Bool)

(assert (=> b!60073 (= e!39470 e!39469)))

(assert (=> b!60073 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(declare-fun res!33283 () Bool)

(assert (=> b!60073 (= res!33283 (contains!678 lt!24546 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!60073 (=> (not res!33283) (not e!39469))))

(declare-fun b!60074 () Bool)

(assert (=> b!60074 (= e!39470 e!39466)))

(declare-fun c!7777 () Bool)

(assert (=> b!60074 (= c!7777 (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(declare-fun b!60075 () Bool)

(assert (=> b!60075 (= e!39467 e!39470)))

(declare-fun c!7776 () Bool)

(assert (=> b!60075 (= c!7776 e!39468)))

(declare-fun res!33284 () Bool)

(assert (=> b!60075 (=> (not res!33284) (not e!39468))))

(assert (=> b!60075 (= res!33284 (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(declare-fun b!60076 () Bool)

(assert (=> b!60076 (= e!39472 e!39471)))

(declare-fun c!7779 () Bool)

(assert (=> b!60076 (= c!7779 (validKeyInArray!0 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!60077 () Bool)

(assert (=> b!60077 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(assert (=> b!60077 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (_values!2025 newMap!16))))))

(assert (=> b!60077 (= e!39469 (= (apply!66 lt!24546 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)) (get!1072 (select (arr!1773 (_values!2025 newMap!16)) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!11735 () Bool)

(assert (=> d!11735 e!39467))

(declare-fun res!33281 () Bool)

(assert (=> d!11735 (=> (not res!33281) (not e!39467))))

(assert (=> d!11735 (= res!33281 (not (contains!678 lt!24546 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!11735 (= lt!24546 e!39472)))

(declare-fun c!7778 () Bool)

(assert (=> d!11735 (= c!7778 (bvsge #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(assert (=> d!11735 (validMask!0 (mask!5926 newMap!16))))

(assert (=> d!11735 (= (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (_values!2025 newMap!16) (mask!5926 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) lt!24546)))

(assert (= (and d!11735 c!7778) b!60066))

(assert (= (and d!11735 (not c!7778)) b!60076))

(assert (= (and b!60076 c!7779) b!60072))

(assert (= (and b!60076 (not c!7779)) b!60067))

(assert (= (or b!60072 b!60067) bm!4539))

(assert (= (and d!11735 res!33281) b!60069))

(assert (= (and b!60069 res!33282) b!60075))

(assert (= (and b!60075 res!33284) b!60068))

(assert (= (and b!60075 c!7776) b!60073))

(assert (= (and b!60075 (not c!7776)) b!60074))

(assert (= (and b!60073 res!33283) b!60077))

(assert (= (and b!60074 c!7777) b!60070))

(assert (= (and b!60074 (not c!7777)) b!60071))

(declare-fun b_lambda!2633 () Bool)

(assert (=> (not b_lambda!2633) (not b!60072)))

(assert (=> b!60072 t!4767))

(declare-fun b_and!3633 () Bool)

(assert (= b_and!3629 (and (=> t!4767 result!2381) b_and!3633)))

(assert (=> b!60072 t!4769))

(declare-fun b_and!3635 () Bool)

(assert (= b_and!3631 (and (=> t!4769 result!2383) b_and!3635)))

(declare-fun b_lambda!2635 () Bool)

(assert (=> (not b_lambda!2635) (not b!60077)))

(assert (=> b!60077 t!4767))

(declare-fun b_and!3637 () Bool)

(assert (= b_and!3633 (and (=> t!4767 result!2381) b_and!3637)))

(assert (=> b!60077 t!4769))

(declare-fun b_and!3639 () Bool)

(assert (= b_and!3635 (and (=> t!4769 result!2383) b_and!3639)))

(declare-fun m!52515 () Bool)

(assert (=> d!11735 m!52515))

(assert (=> d!11735 m!50667))

(assert (=> b!60076 m!50693))

(assert (=> b!60076 m!50693))

(assert (=> b!60076 m!50695))

(declare-fun m!52517 () Bool)

(assert (=> b!60069 m!52517))

(assert (=> b!60068 m!50693))

(assert (=> b!60068 m!50693))

(assert (=> b!60068 m!50695))

(declare-fun m!52519 () Bool)

(assert (=> b!60071 m!52519))

(declare-fun m!52521 () Bool)

(assert (=> bm!4539 m!52521))

(declare-fun m!52523 () Bool)

(assert (=> b!60072 m!52523))

(declare-fun m!52525 () Bool)

(assert (=> b!60072 m!52525))

(declare-fun m!52527 () Bool)

(assert (=> b!60072 m!52527))

(assert (=> b!60072 m!50709))

(assert (=> b!60072 m!50709))

(assert (=> b!60072 m!50707))

(assert (=> b!60072 m!50713))

(assert (=> b!60072 m!50693))

(assert (=> b!60072 m!50707))

(assert (=> b!60072 m!52527))

(declare-fun m!52529 () Bool)

(assert (=> b!60072 m!52529))

(assert (=> b!60073 m!50693))

(assert (=> b!60073 m!50693))

(declare-fun m!52531 () Bool)

(assert (=> b!60073 m!52531))

(assert (=> b!60077 m!50709))

(assert (=> b!60077 m!50709))

(assert (=> b!60077 m!50707))

(assert (=> b!60077 m!50713))

(assert (=> b!60077 m!50693))

(declare-fun m!52533 () Bool)

(assert (=> b!60077 m!52533))

(assert (=> b!60077 m!50693))

(assert (=> b!60077 m!50707))

(assert (=> b!60070 m!52521))

(assert (=> b!59062 d!11735))

(declare-fun d!11737 () Bool)

(assert (=> d!11737 (= (apply!66 (+!80 lt!23825 (tuple2!2015 lt!23833 (minValue!1958 newMap!16))) lt!23835) (apply!66 lt!23825 lt!23835))))

(declare-fun lt!24550 () Unit!1547)

(assert (=> d!11737 (= lt!24550 (choose!312 lt!23825 lt!23833 (minValue!1958 newMap!16) lt!23835))))

(declare-fun e!39473 () Bool)

(assert (=> d!11737 e!39473))

(declare-fun res!33285 () Bool)

(assert (=> d!11737 (=> (not res!33285) (not e!39473))))

(assert (=> d!11737 (= res!33285 (contains!678 lt!23825 lt!23835))))

(assert (=> d!11737 (= (addApplyDifferent!42 lt!23825 lt!23833 (minValue!1958 newMap!16) lt!23835) lt!24550)))

(declare-fun b!60078 () Bool)

(assert (=> b!60078 (= e!39473 (not (= lt!23835 lt!23833)))))

(assert (= (and d!11737 res!33285) b!60078))

(assert (=> d!11737 m!50729))

(declare-fun m!52535 () Bool)

(assert (=> d!11737 m!52535))

(declare-fun m!52537 () Bool)

(assert (=> d!11737 m!52537))

(assert (=> d!11737 m!50731))

(assert (=> d!11737 m!50731))

(assert (=> d!11737 m!50733))

(assert (=> b!59062 d!11737))

(declare-fun d!11739 () Bool)

(declare-fun e!39474 () Bool)

(assert (=> d!11739 e!39474))

(declare-fun res!33286 () Bool)

(assert (=> d!11739 (=> (not res!33286) (not e!39474))))

(declare-fun lt!24553 () ListLongMap!1343)

(assert (=> d!11739 (= res!33286 (contains!678 lt!24553 (_1!1018 (ite (or c!7525 c!7527) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))))

(declare-fun lt!24554 () List!1423)

(assert (=> d!11739 (= lt!24553 (ListLongMap!1344 lt!24554))))

(declare-fun lt!24552 () Unit!1547)

(declare-fun lt!24551 () Unit!1547)

(assert (=> d!11739 (= lt!24552 lt!24551)))

(assert (=> d!11739 (= (getValueByKey!125 lt!24554 (_1!1018 (ite (or c!7525 c!7527) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))) (Some!130 (_2!1018 (ite (or c!7525 c!7527) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))))

(assert (=> d!11739 (= lt!24551 (lemmaContainsTupThenGetReturnValue!42 lt!24554 (_1!1018 (ite (or c!7525 c!7527) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))) (_2!1018 (ite (or c!7525 c!7527) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))))

(assert (=> d!11739 (= lt!24554 (insertStrictlySorted!45 (toList!687 (ite c!7525 call!4408 (ite c!7527 call!4406 call!4409))) (_1!1018 (ite (or c!7525 c!7527) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))) (_2!1018 (ite (or c!7525 c!7527) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))))

(assert (=> d!11739 (= (+!80 (ite c!7525 call!4408 (ite c!7527 call!4406 call!4409)) (ite (or c!7525 c!7527) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))) lt!24553)))

(declare-fun b!60079 () Bool)

(declare-fun res!33287 () Bool)

(assert (=> b!60079 (=> (not res!33287) (not e!39474))))

(assert (=> b!60079 (= res!33287 (= (getValueByKey!125 (toList!687 lt!24553) (_1!1018 (ite (or c!7525 c!7527) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))) (Some!130 (_2!1018 (ite (or c!7525 c!7527) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))))

(declare-fun b!60080 () Bool)

(assert (=> b!60080 (= e!39474 (contains!680 (toList!687 lt!24553) (ite (or c!7525 c!7527) (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))

(assert (= (and d!11739 res!33286) b!60079))

(assert (= (and b!60079 res!33287) b!60080))

(declare-fun m!52539 () Bool)

(assert (=> d!11739 m!52539))

(declare-fun m!52541 () Bool)

(assert (=> d!11739 m!52541))

(declare-fun m!52543 () Bool)

(assert (=> d!11739 m!52543))

(declare-fun m!52545 () Bool)

(assert (=> d!11739 m!52545))

(declare-fun m!52547 () Bool)

(assert (=> b!60079 m!52547))

(declare-fun m!52549 () Bool)

(assert (=> b!60080 m!52549))

(assert (=> bm!4406 d!11739))

(declare-fun b!60082 () Bool)

(declare-fun e!39475 () Option!131)

(declare-fun e!39476 () Option!131)

(assert (=> b!60082 (= e!39475 e!39476)))

(declare-fun c!7781 () Bool)

(assert (=> b!60082 (= c!7781 (and ((_ is Cons!1419) (toList!687 lt!23962)) (not (= (_1!1018 (h!2000 (toList!687 lt!23962))) (_1!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))))))

(declare-fun b!60081 () Bool)

(assert (=> b!60081 (= e!39475 (Some!130 (_2!1018 (h!2000 (toList!687 lt!23962)))))))

(declare-fun c!7780 () Bool)

(declare-fun d!11741 () Bool)

(assert (=> d!11741 (= c!7780 (and ((_ is Cons!1419) (toList!687 lt!23962)) (= (_1!1018 (h!2000 (toList!687 lt!23962))) (_1!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (=> d!11741 (= (getValueByKey!125 (toList!687 lt!23962) (_1!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))) e!39475)))

(declare-fun b!60084 () Bool)

(assert (=> b!60084 (= e!39476 None!129)))

(declare-fun b!60083 () Bool)

(assert (=> b!60083 (= e!39476 (getValueByKey!125 (t!4757 (toList!687 lt!23962)) (_1!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(assert (= (and d!11741 c!7780) b!60081))

(assert (= (and d!11741 (not c!7780)) b!60082))

(assert (= (and b!60082 c!7781) b!60083))

(assert (= (and b!60082 (not c!7781)) b!60084))

(declare-fun m!52551 () Bool)

(assert (=> b!60083 m!52551))

(assert (=> b!59234 d!11741))

(declare-fun d!11743 () Bool)

(declare-fun e!39477 () Bool)

(assert (=> d!11743 e!39477))

(declare-fun res!33288 () Bool)

(assert (=> d!11743 (=> res!33288 e!39477)))

(declare-fun lt!24557 () Bool)

(assert (=> d!11743 (= res!33288 (not lt!24557))))

(declare-fun lt!24556 () Bool)

(assert (=> d!11743 (= lt!24557 lt!24556)))

(declare-fun lt!24555 () Unit!1547)

(declare-fun e!39478 () Unit!1547)

(assert (=> d!11743 (= lt!24555 e!39478)))

(declare-fun c!7782 () Bool)

(assert (=> d!11743 (= c!7782 lt!24556)))

(assert (=> d!11743 (= lt!24556 (containsKey!128 (toList!687 lt!23896) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11743 (= (contains!678 lt!23896 #b1000000000000000000000000000000000000000000000000000000000000000) lt!24557)))

(declare-fun b!60085 () Bool)

(declare-fun lt!24558 () Unit!1547)

(assert (=> b!60085 (= e!39478 lt!24558)))

(assert (=> b!60085 (= lt!24558 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 lt!23896) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!60085 (isDefined!77 (getValueByKey!125 (toList!687 lt!23896) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60086 () Bool)

(declare-fun Unit!1598 () Unit!1547)

(assert (=> b!60086 (= e!39478 Unit!1598)))

(declare-fun b!60087 () Bool)

(assert (=> b!60087 (= e!39477 (isDefined!77 (getValueByKey!125 (toList!687 lt!23896) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11743 c!7782) b!60085))

(assert (= (and d!11743 (not c!7782)) b!60086))

(assert (= (and d!11743 (not res!33288)) b!60087))

(declare-fun m!52553 () Bool)

(assert (=> d!11743 m!52553))

(declare-fun m!52555 () Bool)

(assert (=> b!60085 m!52555))

(declare-fun m!52557 () Bool)

(assert (=> b!60085 m!52557))

(assert (=> b!60085 m!52557))

(declare-fun m!52559 () Bool)

(assert (=> b!60085 m!52559))

(assert (=> b!60087 m!52557))

(assert (=> b!60087 m!52557))

(assert (=> b!60087 m!52559))

(assert (=> bm!4418 d!11743))

(declare-fun d!11745 () Bool)

(declare-fun lt!24559 () Bool)

(assert (=> d!11745 (= lt!24559 (select (content!65 (toList!687 lt!23996)) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))

(declare-fun e!39480 () Bool)

(assert (=> d!11745 (= lt!24559 e!39480)))

(declare-fun res!33290 () Bool)

(assert (=> d!11745 (=> (not res!33290) (not e!39480))))

(assert (=> d!11745 (= res!33290 ((_ is Cons!1419) (toList!687 lt!23996)))))

(assert (=> d!11745 (= (contains!680 (toList!687 lt!23996) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) lt!24559)))

(declare-fun b!60088 () Bool)

(declare-fun e!39479 () Bool)

(assert (=> b!60088 (= e!39480 e!39479)))

(declare-fun res!33289 () Bool)

(assert (=> b!60088 (=> res!33289 e!39479)))

(assert (=> b!60088 (= res!33289 (= (h!2000 (toList!687 lt!23996)) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))

(declare-fun b!60089 () Bool)

(assert (=> b!60089 (= e!39479 (contains!680 (t!4757 (toList!687 lt!23996)) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))

(assert (= (and d!11745 res!33290) b!60088))

(assert (= (and b!60088 (not res!33289)) b!60089))

(declare-fun m!52561 () Bool)

(assert (=> d!11745 m!52561))

(declare-fun m!52563 () Bool)

(assert (=> d!11745 m!52563))

(declare-fun m!52565 () Bool)

(assert (=> b!60089 m!52565))

(assert (=> b!59284 d!11745))

(declare-fun lt!24560 () Bool)

(declare-fun d!11747 () Bool)

(assert (=> d!11747 (= lt!24560 (select (content!65 (toList!687 lt!23948)) (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))

(declare-fun e!39482 () Bool)

(assert (=> d!11747 (= lt!24560 e!39482)))

(declare-fun res!33292 () Bool)

(assert (=> d!11747 (=> (not res!33292) (not e!39482))))

(assert (=> d!11747 (= res!33292 ((_ is Cons!1419) (toList!687 lt!23948)))))

(assert (=> d!11747 (= (contains!680 (toList!687 lt!23948) (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) lt!24560)))

(declare-fun b!60090 () Bool)

(declare-fun e!39481 () Bool)

(assert (=> b!60090 (= e!39482 e!39481)))

(declare-fun res!33291 () Bool)

(assert (=> b!60090 (=> res!33291 e!39481)))

(assert (=> b!60090 (= res!33291 (= (h!2000 (toList!687 lt!23948)) (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))

(declare-fun b!60091 () Bool)

(assert (=> b!60091 (= e!39481 (contains!680 (t!4757 (toList!687 lt!23948)) (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))

(assert (= (and d!11747 res!33292) b!60090))

(assert (= (and b!60090 (not res!33291)) b!60091))

(declare-fun m!52567 () Bool)

(assert (=> d!11747 m!52567))

(declare-fun m!52569 () Bool)

(assert (=> d!11747 m!52569))

(declare-fun m!52571 () Bool)

(assert (=> b!60091 m!52571))

(assert (=> b!59227 d!11747))

(assert (=> bm!4444 d!11249))

(declare-fun d!11749 () Bool)

(assert (=> d!11749 (arrayContainsKey!0 (_keys!3666 newMap!16) lt!23874 #b00000000000000000000000000000000)))

(declare-fun lt!24561 () Unit!1547)

(assert (=> d!11749 (= lt!24561 (choose!13 (_keys!3666 newMap!16) lt!23874 #b00000000000000000000000000000000))))

(assert (=> d!11749 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (=> d!11749 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3666 newMap!16) lt!23874 #b00000000000000000000000000000000) lt!24561)))

(declare-fun bs!2607 () Bool)

(assert (= bs!2607 d!11749))

(assert (=> bs!2607 m!50825))

(declare-fun m!52573 () Bool)

(assert (=> bs!2607 m!52573))

(assert (=> b!59144 d!11749))

(declare-fun d!11751 () Bool)

(declare-fun res!33293 () Bool)

(declare-fun e!39483 () Bool)

(assert (=> d!11751 (=> res!33293 e!39483)))

(assert (=> d!11751 (= res!33293 (= (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000) lt!23874))))

(assert (=> d!11751 (= (arrayContainsKey!0 (_keys!3666 newMap!16) lt!23874 #b00000000000000000000000000000000) e!39483)))

(declare-fun b!60092 () Bool)

(declare-fun e!39484 () Bool)

(assert (=> b!60092 (= e!39483 e!39484)))

(declare-fun res!33294 () Bool)

(assert (=> b!60092 (=> (not res!33294) (not e!39484))))

(assert (=> b!60092 (= res!33294 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2002 (_keys!3666 newMap!16))))))

(declare-fun b!60093 () Bool)

(assert (=> b!60093 (= e!39484 (arrayContainsKey!0 (_keys!3666 newMap!16) lt!23874 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!11751 (not res!33293)) b!60092))

(assert (= (and b!60092 res!33294) b!60093))

(assert (=> d!11751 m!50693))

(declare-fun m!52575 () Bool)

(assert (=> b!60093 m!52575))

(assert (=> b!59144 d!11751))

(declare-fun d!11753 () Bool)

(declare-fun lt!24562 () SeekEntryResult!221)

(assert (=> d!11753 (and (or ((_ is Undefined!221) lt!24562) (not ((_ is Found!221) lt!24562)) (and (bvsge (index!3008 lt!24562) #b00000000000000000000000000000000) (bvslt (index!3008 lt!24562) (size!2002 (_keys!3666 newMap!16))))) (or ((_ is Undefined!221) lt!24562) ((_ is Found!221) lt!24562) (not ((_ is MissingZero!221) lt!24562)) (and (bvsge (index!3007 lt!24562) #b00000000000000000000000000000000) (bvslt (index!3007 lt!24562) (size!2002 (_keys!3666 newMap!16))))) (or ((_ is Undefined!221) lt!24562) ((_ is Found!221) lt!24562) ((_ is MissingZero!221) lt!24562) (not ((_ is MissingVacant!221) lt!24562)) (and (bvsge (index!3010 lt!24562) #b00000000000000000000000000000000) (bvslt (index!3010 lt!24562) (size!2002 (_keys!3666 newMap!16))))) (or ((_ is Undefined!221) lt!24562) (ite ((_ is Found!221) lt!24562) (= (select (arr!1772 (_keys!3666 newMap!16)) (index!3008 lt!24562)) (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)) (ite ((_ is MissingZero!221) lt!24562) (= (select (arr!1772 (_keys!3666 newMap!16)) (index!3007 lt!24562)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!221) lt!24562) (= (select (arr!1772 (_keys!3666 newMap!16)) (index!3010 lt!24562)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!39485 () SeekEntryResult!221)

(assert (=> d!11753 (= lt!24562 e!39485)))

(declare-fun c!7785 () Bool)

(declare-fun lt!24563 () SeekEntryResult!221)

(assert (=> d!11753 (= c!7785 (and ((_ is Intermediate!221) lt!24563) (undefined!1033 lt!24563)))))

(assert (=> d!11753 (= lt!24563 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000) (mask!5926 newMap!16)) (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000) (_keys!3666 newMap!16) (mask!5926 newMap!16)))))

(assert (=> d!11753 (validMask!0 (mask!5926 newMap!16))))

(assert (=> d!11753 (= (seekEntryOrOpen!0 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000) (_keys!3666 newMap!16) (mask!5926 newMap!16)) lt!24562)))

(declare-fun b!60094 () Bool)

(declare-fun e!39487 () SeekEntryResult!221)

(assert (=> b!60094 (= e!39487 (seekKeyOrZeroReturnVacant!0 (x!9997 lt!24563) (index!3009 lt!24563) (index!3009 lt!24563) (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000) (_keys!3666 newMap!16) (mask!5926 newMap!16)))))

(declare-fun b!60095 () Bool)

(declare-fun e!39486 () SeekEntryResult!221)

(assert (=> b!60095 (= e!39486 (Found!221 (index!3009 lt!24563)))))

(declare-fun b!60096 () Bool)

(assert (=> b!60096 (= e!39485 e!39486)))

(declare-fun lt!24564 () (_ BitVec 64))

(assert (=> b!60096 (= lt!24564 (select (arr!1772 (_keys!3666 newMap!16)) (index!3009 lt!24563)))))

(declare-fun c!7784 () Bool)

(assert (=> b!60096 (= c!7784 (= lt!24564 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!60097 () Bool)

(assert (=> b!60097 (= e!39487 (MissingZero!221 (index!3009 lt!24563)))))

(declare-fun b!60098 () Bool)

(assert (=> b!60098 (= e!39485 Undefined!221)))

(declare-fun b!60099 () Bool)

(declare-fun c!7783 () Bool)

(assert (=> b!60099 (= c!7783 (= lt!24564 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!60099 (= e!39486 e!39487)))

(assert (= (and d!11753 c!7785) b!60098))

(assert (= (and d!11753 (not c!7785)) b!60096))

(assert (= (and b!60096 c!7784) b!60095))

(assert (= (and b!60096 (not c!7784)) b!60099))

(assert (= (and b!60099 c!7783) b!60097))

(assert (= (and b!60099 (not c!7783)) b!60094))

(assert (=> d!11753 m!50693))

(declare-fun m!52577 () Bool)

(assert (=> d!11753 m!52577))

(assert (=> d!11753 m!52577))

(assert (=> d!11753 m!50693))

(declare-fun m!52579 () Bool)

(assert (=> d!11753 m!52579))

(declare-fun m!52581 () Bool)

(assert (=> d!11753 m!52581))

(declare-fun m!52583 () Bool)

(assert (=> d!11753 m!52583))

(declare-fun m!52585 () Bool)

(assert (=> d!11753 m!52585))

(assert (=> d!11753 m!50667))

(assert (=> b!60094 m!50693))

(declare-fun m!52587 () Bool)

(assert (=> b!60094 m!52587))

(declare-fun m!52589 () Bool)

(assert (=> b!60096 m!52589))

(assert (=> b!59144 d!11753))

(declare-fun d!11755 () Bool)

(assert (=> d!11755 (isDefined!77 (getValueByKey!125 (toList!687 call!4351) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(declare-fun lt!24565 () Unit!1547)

(assert (=> d!11755 (= lt!24565 (choose!311 (toList!687 call!4351) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(declare-fun e!39488 () Bool)

(assert (=> d!11755 e!39488))

(declare-fun res!33295 () Bool)

(assert (=> d!11755 (=> (not res!33295) (not e!39488))))

(assert (=> d!11755 (= res!33295 (isStrictlySorted!271 (toList!687 call!4351)))))

(assert (=> d!11755 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 call!4351) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)) lt!24565)))

(declare-fun b!60100 () Bool)

(assert (=> b!60100 (= e!39488 (containsKey!128 (toList!687 call!4351) (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355)))))

(assert (= (and d!11755 res!33295) b!60100))

(assert (=> d!11755 m!50367))

(assert (=> d!11755 m!50841))

(assert (=> d!11755 m!50841))

(assert (=> d!11755 m!50843))

(assert (=> d!11755 m!50367))

(declare-fun m!52591 () Bool)

(assert (=> d!11755 m!52591))

(declare-fun m!52593 () Bool)

(assert (=> d!11755 m!52593))

(assert (=> b!60100 m!50367))

(assert (=> b!60100 m!50837))

(assert (=> b!59147 d!11755))

(assert (=> b!59147 d!11543))

(assert (=> b!59147 d!11545))

(declare-fun d!11757 () Bool)

(assert (=> d!11757 (= (get!1075 (getValueByKey!125 (toList!687 lt!23788) lt!23778)) (v!2387 (getValueByKey!125 (toList!687 lt!23788) lt!23778)))))

(assert (=> d!11299 d!11757))

(declare-fun b!60102 () Bool)

(declare-fun e!39489 () Option!131)

(declare-fun e!39490 () Option!131)

(assert (=> b!60102 (= e!39489 e!39490)))

(declare-fun c!7787 () Bool)

(assert (=> b!60102 (= c!7787 (and ((_ is Cons!1419) (toList!687 lt!23788)) (not (= (_1!1018 (h!2000 (toList!687 lt!23788))) lt!23778))))))

(declare-fun b!60101 () Bool)

(assert (=> b!60101 (= e!39489 (Some!130 (_2!1018 (h!2000 (toList!687 lt!23788)))))))

(declare-fun d!11759 () Bool)

(declare-fun c!7786 () Bool)

(assert (=> d!11759 (= c!7786 (and ((_ is Cons!1419) (toList!687 lt!23788)) (= (_1!1018 (h!2000 (toList!687 lt!23788))) lt!23778)))))

(assert (=> d!11759 (= (getValueByKey!125 (toList!687 lt!23788) lt!23778) e!39489)))

(declare-fun b!60104 () Bool)

(assert (=> b!60104 (= e!39490 None!129)))

(declare-fun b!60103 () Bool)

(assert (=> b!60103 (= e!39490 (getValueByKey!125 (t!4757 (toList!687 lt!23788)) lt!23778))))

(assert (= (and d!11759 c!7786) b!60101))

(assert (= (and d!11759 (not c!7786)) b!60102))

(assert (= (and b!60102 c!7787) b!60103))

(assert (= (and b!60102 (not c!7787)) b!60104))

(declare-fun m!52595 () Bool)

(assert (=> b!60103 m!52595))

(assert (=> d!11299 d!11759))

(declare-fun d!11761 () Bool)

(assert (=> d!11761 (isDefined!77 (getValueByKey!125 (toList!687 lt!23783) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!24566 () Unit!1547)

(assert (=> d!11761 (= lt!24566 (choose!311 (toList!687 lt!23783) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!39491 () Bool)

(assert (=> d!11761 e!39491))

(declare-fun res!33296 () Bool)

(assert (=> d!11761 (=> (not res!33296) (not e!39491))))

(assert (=> d!11761 (= res!33296 (isStrictlySorted!271 (toList!687 lt!23783)))))

(assert (=> d!11761 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 lt!23783) #b1000000000000000000000000000000000000000000000000000000000000000) lt!24566)))

(declare-fun b!60105 () Bool)

(assert (=> b!60105 (= e!39491 (containsKey!128 (toList!687 lt!23783) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!11761 res!33296) b!60105))

(assert (=> d!11761 m!50645))

(assert (=> d!11761 m!50645))

(assert (=> d!11761 m!50849))

(declare-fun m!52597 () Bool)

(assert (=> d!11761 m!52597))

(assert (=> d!11761 m!51313))

(assert (=> b!60105 m!50845))

(assert (=> b!59150 d!11761))

(assert (=> b!59150 d!11547))

(assert (=> b!59150 d!11549))

(assert (=> bm!4428 d!11249))

(declare-fun d!11763 () Bool)

(assert (=> d!11763 (= (apply!66 (+!80 lt!23781 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))) lt!23779) (apply!66 lt!23781 lt!23779))))

(assert (=> d!11763 true))

(declare-fun _$34!764 () Unit!1547)

(assert (=> d!11763 (= (choose!312 lt!23781 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))) lt!23779) _$34!764)))

(declare-fun bs!2608 () Bool)

(assert (= bs!2608 d!11763))

(assert (=> bs!2608 m!50603))

(assert (=> bs!2608 m!50603))

(assert (=> bs!2608 m!50605))

(assert (=> bs!2608 m!50613))

(assert (=> d!11307 d!11763))

(declare-fun d!11765 () Bool)

(declare-fun e!39492 () Bool)

(assert (=> d!11765 e!39492))

(declare-fun res!33297 () Bool)

(assert (=> d!11765 (=> res!33297 e!39492)))

(declare-fun lt!24569 () Bool)

(assert (=> d!11765 (= res!33297 (not lt!24569))))

(declare-fun lt!24568 () Bool)

(assert (=> d!11765 (= lt!24569 lt!24568)))

(declare-fun lt!24567 () Unit!1547)

(declare-fun e!39493 () Unit!1547)

(assert (=> d!11765 (= lt!24567 e!39493)))

(declare-fun c!7788 () Bool)

(assert (=> d!11765 (= c!7788 lt!24568)))

(assert (=> d!11765 (= lt!24568 (containsKey!128 (toList!687 lt!23781) lt!23779))))

(assert (=> d!11765 (= (contains!678 lt!23781 lt!23779) lt!24569)))

(declare-fun b!60106 () Bool)

(declare-fun lt!24570 () Unit!1547)

(assert (=> b!60106 (= e!39493 lt!24570)))

(assert (=> b!60106 (= lt!24570 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 lt!23781) lt!23779))))

(assert (=> b!60106 (isDefined!77 (getValueByKey!125 (toList!687 lt!23781) lt!23779))))

(declare-fun b!60107 () Bool)

(declare-fun Unit!1599 () Unit!1547)

(assert (=> b!60107 (= e!39493 Unit!1599)))

(declare-fun b!60108 () Bool)

(assert (=> b!60108 (= e!39492 (isDefined!77 (getValueByKey!125 (toList!687 lt!23781) lt!23779)))))

(assert (= (and d!11765 c!7788) b!60106))

(assert (= (and d!11765 (not c!7788)) b!60107))

(assert (= (and d!11765 (not res!33297)) b!60108))

(declare-fun m!52599 () Bool)

(assert (=> d!11765 m!52599))

(declare-fun m!52601 () Bool)

(assert (=> b!60106 m!52601))

(assert (=> b!60106 m!51009))

(assert (=> b!60106 m!51009))

(declare-fun m!52603 () Bool)

(assert (=> b!60106 m!52603))

(assert (=> b!60108 m!51009))

(assert (=> b!60108 m!51009))

(assert (=> b!60108 m!52603))

(assert (=> d!11307 d!11765))

(assert (=> d!11307 d!11315))

(assert (=> d!11307 d!11309))

(assert (=> d!11307 d!11311))

(assert (=> bm!4396 d!11735))

(declare-fun d!11767 () Bool)

(assert (=> d!11767 (= (apply!66 (+!80 lt!23855 (tuple2!2015 lt!23861 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)))) lt!23853) (apply!66 lt!23855 lt!23853))))

(declare-fun lt!24571 () Unit!1547)

(assert (=> d!11767 (= lt!24571 (choose!312 lt!23855 lt!23861 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)) lt!23853))))

(declare-fun e!39494 () Bool)

(assert (=> d!11767 e!39494))

(declare-fun res!33298 () Bool)

(assert (=> d!11767 (=> (not res!33298) (not e!39494))))

(assert (=> d!11767 (= res!33298 (contains!678 lt!23855 lt!23853))))

(assert (=> d!11767 (= (addApplyDifferent!42 lt!23855 lt!23861 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)) lt!23853) lt!24571)))

(declare-fun b!60109 () Bool)

(assert (=> b!60109 (= e!39494 (not (= lt!23853 lt!23861)))))

(assert (= (and d!11767 res!33298) b!60109))

(assert (=> d!11767 m!50807))

(declare-fun m!52605 () Bool)

(assert (=> d!11767 m!52605))

(declare-fun m!52607 () Bool)

(assert (=> d!11767 m!52607))

(assert (=> d!11767 m!50797))

(assert (=> d!11767 m!50797))

(assert (=> d!11767 m!50799))

(assert (=> b!59117 d!11767))

(declare-fun d!11769 () Bool)

(assert (=> d!11769 (= (apply!66 (+!80 lt!23862 (tuple2!2015 lt!23851 (minValue!1958 newMap!16))) lt!23852) (apply!66 lt!23862 lt!23852))))

(declare-fun lt!24572 () Unit!1547)

(assert (=> d!11769 (= lt!24572 (choose!312 lt!23862 lt!23851 (minValue!1958 newMap!16) lt!23852))))

(declare-fun e!39495 () Bool)

(assert (=> d!11769 e!39495))

(declare-fun res!33299 () Bool)

(assert (=> d!11769 (=> (not res!33299) (not e!39495))))

(assert (=> d!11769 (= res!33299 (contains!678 lt!23862 lt!23852))))

(assert (=> d!11769 (= (addApplyDifferent!42 lt!23862 lt!23851 (minValue!1958 newMap!16) lt!23852) lt!24572)))

(declare-fun b!60110 () Bool)

(assert (=> b!60110 (= e!39495 (not (= lt!23852 lt!23851)))))

(assert (= (and d!11769 res!33299) b!60110))

(assert (=> d!11769 m!50795))

(declare-fun m!52609 () Bool)

(assert (=> d!11769 m!52609))

(declare-fun m!52611 () Bool)

(assert (=> d!11769 m!52611))

(assert (=> d!11769 m!50791))

(assert (=> d!11769 m!50791))

(assert (=> d!11769 m!50811))

(assert (=> b!59117 d!11769))

(declare-fun d!11771 () Bool)

(declare-fun e!39496 () Bool)

(assert (=> d!11771 e!39496))

(declare-fun res!33300 () Bool)

(assert (=> d!11771 (=> (not res!33300) (not e!39496))))

(declare-fun lt!24575 () ListLongMap!1343)

(assert (=> d!11771 (= res!33300 (contains!678 lt!24575 (_1!1018 (tuple2!2015 lt!23863 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))))))))

(declare-fun lt!24576 () List!1423)

(assert (=> d!11771 (= lt!24575 (ListLongMap!1344 lt!24576))))

(declare-fun lt!24574 () Unit!1547)

(declare-fun lt!24573 () Unit!1547)

(assert (=> d!11771 (= lt!24574 lt!24573)))

(assert (=> d!11771 (= (getValueByKey!125 lt!24576 (_1!1018 (tuple2!2015 lt!23863 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))))) (Some!130 (_2!1018 (tuple2!2015 lt!23863 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))))))))

(assert (=> d!11771 (= lt!24573 (lemmaContainsTupThenGetReturnValue!42 lt!24576 (_1!1018 (tuple2!2015 lt!23863 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)))) (_2!1018 (tuple2!2015 lt!23863 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))))))))

(assert (=> d!11771 (= lt!24576 (insertStrictlySorted!45 (toList!687 lt!23849) (_1!1018 (tuple2!2015 lt!23863 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)))) (_2!1018 (tuple2!2015 lt!23863 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))))))))

(assert (=> d!11771 (= (+!80 lt!23849 (tuple2!2015 lt!23863 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)))) lt!24575)))

(declare-fun b!60111 () Bool)

(declare-fun res!33301 () Bool)

(assert (=> b!60111 (=> (not res!33301) (not e!39496))))

(assert (=> b!60111 (= res!33301 (= (getValueByKey!125 (toList!687 lt!24575) (_1!1018 (tuple2!2015 lt!23863 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))))) (Some!130 (_2!1018 (tuple2!2015 lt!23863 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)))))))))

(declare-fun b!60112 () Bool)

(assert (=> b!60112 (= e!39496 (contains!680 (toList!687 lt!24575) (tuple2!2015 lt!23863 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)))))))

(assert (= (and d!11771 res!33300) b!60111))

(assert (= (and b!60111 res!33301) b!60112))

(declare-fun m!52613 () Bool)

(assert (=> d!11771 m!52613))

(declare-fun m!52615 () Bool)

(assert (=> d!11771 m!52615))

(declare-fun m!52617 () Bool)

(assert (=> d!11771 m!52617))

(declare-fun m!52619 () Bool)

(assert (=> d!11771 m!52619))

(declare-fun m!52621 () Bool)

(assert (=> b!60111 m!52621))

(declare-fun m!52623 () Bool)

(assert (=> b!60112 m!52623))

(assert (=> b!59117 d!11771))

(declare-fun d!11773 () Bool)

(assert (=> d!11773 (= (apply!66 (+!80 lt!23850 (tuple2!2015 lt!23858 (minValue!1958 newMap!16))) lt!23860) (get!1075 (getValueByKey!125 (toList!687 (+!80 lt!23850 (tuple2!2015 lt!23858 (minValue!1958 newMap!16)))) lt!23860)))))

(declare-fun bs!2609 () Bool)

(assert (= bs!2609 d!11773))

(declare-fun m!52625 () Bool)

(assert (=> bs!2609 m!52625))

(assert (=> bs!2609 m!52625))

(declare-fun m!52627 () Bool)

(assert (=> bs!2609 m!52627))

(assert (=> b!59117 d!11773))

(declare-fun d!11775 () Bool)

(assert (=> d!11775 (= (apply!66 lt!23862 lt!23852) (get!1075 (getValueByKey!125 (toList!687 lt!23862) lt!23852)))))

(declare-fun bs!2610 () Bool)

(assert (= bs!2610 d!11775))

(declare-fun m!52629 () Bool)

(assert (=> bs!2610 m!52629))

(assert (=> bs!2610 m!52629))

(declare-fun m!52631 () Bool)

(assert (=> bs!2610 m!52631))

(assert (=> b!59117 d!11775))

(declare-fun d!11777 () Bool)

(assert (=> d!11777 (= (apply!66 (+!80 lt!23855 (tuple2!2015 lt!23861 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)))) lt!23853) (get!1075 (getValueByKey!125 (toList!687 (+!80 lt!23855 (tuple2!2015 lt!23861 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))))) lt!23853)))))

(declare-fun bs!2611 () Bool)

(assert (= bs!2611 d!11777))

(declare-fun m!52633 () Bool)

(assert (=> bs!2611 m!52633))

(assert (=> bs!2611 m!52633))

(declare-fun m!52635 () Bool)

(assert (=> bs!2611 m!52635))

(assert (=> b!59117 d!11777))

(declare-fun d!11779 () Bool)

(declare-fun e!39497 () Bool)

(assert (=> d!11779 e!39497))

(declare-fun res!33302 () Bool)

(assert (=> d!11779 (=> res!33302 e!39497)))

(declare-fun lt!24579 () Bool)

(assert (=> d!11779 (= res!33302 (not lt!24579))))

(declare-fun lt!24578 () Bool)

(assert (=> d!11779 (= lt!24579 lt!24578)))

(declare-fun lt!24577 () Unit!1547)

(declare-fun e!39498 () Unit!1547)

(assert (=> d!11779 (= lt!24577 e!39498)))

(declare-fun c!7789 () Bool)

(assert (=> d!11779 (= c!7789 lt!24578)))

(assert (=> d!11779 (= lt!24578 (containsKey!128 (toList!687 (+!80 lt!23849 (tuple2!2015 lt!23863 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))))) lt!23856))))

(assert (=> d!11779 (= (contains!678 (+!80 lt!23849 (tuple2!2015 lt!23863 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)))) lt!23856) lt!24579)))

(declare-fun b!60113 () Bool)

(declare-fun lt!24580 () Unit!1547)

(assert (=> b!60113 (= e!39498 lt!24580)))

(assert (=> b!60113 (= lt!24580 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 (+!80 lt!23849 (tuple2!2015 lt!23863 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))))) lt!23856))))

(assert (=> b!60113 (isDefined!77 (getValueByKey!125 (toList!687 (+!80 lt!23849 (tuple2!2015 lt!23863 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))))) lt!23856))))

(declare-fun b!60114 () Bool)

(declare-fun Unit!1600 () Unit!1547)

(assert (=> b!60114 (= e!39498 Unit!1600)))

(declare-fun b!60115 () Bool)

(assert (=> b!60115 (= e!39497 (isDefined!77 (getValueByKey!125 (toList!687 (+!80 lt!23849 (tuple2!2015 lt!23863 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))))) lt!23856)))))

(assert (= (and d!11779 c!7789) b!60113))

(assert (= (and d!11779 (not c!7789)) b!60114))

(assert (= (and d!11779 (not res!33302)) b!60115))

(declare-fun m!52637 () Bool)

(assert (=> d!11779 m!52637))

(declare-fun m!52639 () Bool)

(assert (=> b!60113 m!52639))

(declare-fun m!52641 () Bool)

(assert (=> b!60113 m!52641))

(assert (=> b!60113 m!52641))

(declare-fun m!52643 () Bool)

(assert (=> b!60113 m!52643))

(assert (=> b!60115 m!52641))

(assert (=> b!60115 m!52641))

(assert (=> b!60115 m!52643))

(assert (=> b!59117 d!11779))

(declare-fun d!11781 () Bool)

(assert (=> d!11781 (= (apply!66 lt!23850 lt!23860) (get!1075 (getValueByKey!125 (toList!687 lt!23850) lt!23860)))))

(declare-fun bs!2612 () Bool)

(assert (= bs!2612 d!11781))

(declare-fun m!52645 () Bool)

(assert (=> bs!2612 m!52645))

(assert (=> bs!2612 m!52645))

(declare-fun m!52647 () Bool)

(assert (=> bs!2612 m!52647))

(assert (=> b!59117 d!11781))

(declare-fun b!60116 () Bool)

(declare-fun e!39505 () ListLongMap!1343)

(assert (=> b!60116 (= e!39505 (ListLongMap!1344 Nil!1420))))

(declare-fun b!60117 () Bool)

(declare-fun e!39504 () ListLongMap!1343)

(declare-fun call!4543 () ListLongMap!1343)

(assert (=> b!60117 (= e!39504 call!4543)))

(declare-fun b!60118 () Bool)

(declare-fun e!39501 () Bool)

(assert (=> b!60118 (= e!39501 (validKeyInArray!0 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!60118 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!60119 () Bool)

(declare-fun res!33304 () Bool)

(declare-fun e!39500 () Bool)

(assert (=> b!60119 (=> (not res!33304) (not e!39500))))

(declare-fun lt!24584 () ListLongMap!1343)

(assert (=> b!60119 (= res!33304 (not (contains!678 lt!24584 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!39499 () Bool)

(declare-fun b!60120 () Bool)

(assert (=> b!60120 (= e!39499 (= lt!24584 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (ite (or c!7472 c!7461) (_values!2025 newMap!16) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (index!3008 lt!23716) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16)))) (mask!5926 newMap!16) (ite (and c!7472 c!7473) lt!23725 (extraKeys!1929 newMap!16)) (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)) (minValue!1958 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2042 newMap!16))))))

(declare-fun bm!4540 () Bool)

(assert (=> bm!4540 (= call!4543 (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (ite (or c!7472 c!7461) (_values!2025 newMap!16) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (index!3008 lt!23716) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16)))) (mask!5926 newMap!16) (ite (and c!7472 c!7473) lt!23725 (extraKeys!1929 newMap!16)) (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)) (minValue!1958 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2042 newMap!16)))))

(declare-fun b!60121 () Bool)

(assert (=> b!60121 (= e!39499 (isEmpty!300 lt!24584))))

(declare-fun b!60122 () Bool)

(declare-fun lt!24581 () Unit!1547)

(declare-fun lt!24585 () Unit!1547)

(assert (=> b!60122 (= lt!24581 lt!24585)))

(declare-fun lt!24586 () (_ BitVec 64))

(declare-fun lt!24582 () ListLongMap!1343)

(declare-fun lt!24587 () (_ BitVec 64))

(declare-fun lt!24583 () V!2841)

(assert (=> b!60122 (not (contains!678 (+!80 lt!24582 (tuple2!2015 lt!24586 lt!24583)) lt!24587))))

(assert (=> b!60122 (= lt!24585 (addStillNotContains!17 lt!24582 lt!24586 lt!24583 lt!24587))))

(assert (=> b!60122 (= lt!24587 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!60122 (= lt!24583 (get!1072 (select (arr!1773 (ite (or c!7472 c!7461) (_values!2025 newMap!16) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (index!3008 lt!23716) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!60122 (= lt!24586 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!60122 (= lt!24582 call!4543)))

(assert (=> b!60122 (= e!39504 (+!80 call!4543 (tuple2!2015 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000) (get!1072 (select (arr!1773 (ite (or c!7472 c!7461) (_values!2025 newMap!16) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (index!3008 lt!23716) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!60123 () Bool)

(declare-fun e!39503 () Bool)

(declare-fun e!39502 () Bool)

(assert (=> b!60123 (= e!39503 e!39502)))

(assert (=> b!60123 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(declare-fun res!33305 () Bool)

(assert (=> b!60123 (= res!33305 (contains!678 lt!24584 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!60123 (=> (not res!33305) (not e!39502))))

(declare-fun b!60124 () Bool)

(assert (=> b!60124 (= e!39503 e!39499)))

(declare-fun c!7791 () Bool)

(assert (=> b!60124 (= c!7791 (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(declare-fun b!60125 () Bool)

(assert (=> b!60125 (= e!39500 e!39503)))

(declare-fun c!7790 () Bool)

(assert (=> b!60125 (= c!7790 e!39501)))

(declare-fun res!33306 () Bool)

(assert (=> b!60125 (=> (not res!33306) (not e!39501))))

(assert (=> b!60125 (= res!33306 (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(declare-fun b!60126 () Bool)

(assert (=> b!60126 (= e!39505 e!39504)))

(declare-fun c!7793 () Bool)

(assert (=> b!60126 (= c!7793 (validKeyInArray!0 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!60127 () Bool)

(assert (=> b!60127 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(assert (=> b!60127 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2003 (ite (or c!7472 c!7461) (_values!2025 newMap!16) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (index!3008 lt!23716) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16)))))))))

(assert (=> b!60127 (= e!39502 (= (apply!66 lt!24584 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)) (get!1072 (select (arr!1773 (ite (or c!7472 c!7461) (_values!2025 newMap!16) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (index!3008 lt!23716) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!11783 () Bool)

(assert (=> d!11783 e!39500))

(declare-fun res!33303 () Bool)

(assert (=> d!11783 (=> (not res!33303) (not e!39500))))

(assert (=> d!11783 (= res!33303 (not (contains!678 lt!24584 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!11783 (= lt!24584 e!39505)))

(declare-fun c!7792 () Bool)

(assert (=> d!11783 (= c!7792 (bvsge #b00000000000000000000000000000000 (size!2002 (_keys!3666 newMap!16))))))

(assert (=> d!11783 (validMask!0 (mask!5926 newMap!16))))

(assert (=> d!11783 (= (getCurrentListMapNoExtraKeys!44 (_keys!3666 newMap!16) (ite (or c!7472 c!7461) (_values!2025 newMap!16) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (index!3008 lt!23716) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16)))) (mask!5926 newMap!16) (ite (and c!7472 c!7473) lt!23725 (extraKeys!1929 newMap!16)) (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) lt!24584)))

(assert (= (and d!11783 c!7792) b!60116))

(assert (= (and d!11783 (not c!7792)) b!60126))

(assert (= (and b!60126 c!7793) b!60122))

(assert (= (and b!60126 (not c!7793)) b!60117))

(assert (= (or b!60122 b!60117) bm!4540))

(assert (= (and d!11783 res!33303) b!60119))

(assert (= (and b!60119 res!33304) b!60125))

(assert (= (and b!60125 res!33306) b!60118))

(assert (= (and b!60125 c!7790) b!60123))

(assert (= (and b!60125 (not c!7790)) b!60124))

(assert (= (and b!60123 res!33305) b!60127))

(assert (= (and b!60124 c!7791) b!60120))

(assert (= (and b!60124 (not c!7791)) b!60121))

(declare-fun b_lambda!2637 () Bool)

(assert (=> (not b_lambda!2637) (not b!60122)))

(assert (=> b!60122 t!4767))

(declare-fun b_and!3641 () Bool)

(assert (= b_and!3637 (and (=> t!4767 result!2381) b_and!3641)))

(assert (=> b!60122 t!4769))

(declare-fun b_and!3643 () Bool)

(assert (= b_and!3639 (and (=> t!4769 result!2383) b_and!3643)))

(declare-fun b_lambda!2639 () Bool)

(assert (=> (not b_lambda!2639) (not b!60127)))

(assert (=> b!60127 t!4767))

(declare-fun b_and!3645 () Bool)

(assert (= b_and!3641 (and (=> t!4767 result!2381) b_and!3645)))

(assert (=> b!60127 t!4769))

(declare-fun b_and!3647 () Bool)

(assert (= b_and!3643 (and (=> t!4769 result!2383) b_and!3647)))

(declare-fun m!52649 () Bool)

(assert (=> d!11783 m!52649))

(assert (=> d!11783 m!50667))

(assert (=> b!60126 m!50693))

(assert (=> b!60126 m!50693))

(assert (=> b!60126 m!50695))

(declare-fun m!52651 () Bool)

(assert (=> b!60119 m!52651))

(assert (=> b!60118 m!50693))

(assert (=> b!60118 m!50693))

(assert (=> b!60118 m!50695))

(declare-fun m!52653 () Bool)

(assert (=> b!60121 m!52653))

(declare-fun m!52655 () Bool)

(assert (=> bm!4540 m!52655))

(declare-fun m!52657 () Bool)

(assert (=> b!60122 m!52657))

(declare-fun m!52659 () Bool)

(assert (=> b!60122 m!52659))

(declare-fun m!52661 () Bool)

(assert (=> b!60122 m!52661))

(assert (=> b!60122 m!50781))

(assert (=> b!60122 m!50781))

(assert (=> b!60122 m!50707))

(assert (=> b!60122 m!50785))

(assert (=> b!60122 m!50693))

(assert (=> b!60122 m!50707))

(assert (=> b!60122 m!52661))

(declare-fun m!52663 () Bool)

(assert (=> b!60122 m!52663))

(assert (=> b!60123 m!50693))

(assert (=> b!60123 m!50693))

(declare-fun m!52665 () Bool)

(assert (=> b!60123 m!52665))

(assert (=> b!60127 m!50781))

(assert (=> b!60127 m!50781))

(assert (=> b!60127 m!50707))

(assert (=> b!60127 m!50785))

(assert (=> b!60127 m!50693))

(declare-fun m!52667 () Bool)

(assert (=> b!60127 m!52667))

(assert (=> b!60127 m!50693))

(assert (=> b!60127 m!50707))

(assert (=> b!60120 m!52655))

(assert (=> b!59117 d!11783))

(declare-fun d!11785 () Bool)

(assert (=> d!11785 (= (apply!66 (+!80 lt!23862 (tuple2!2015 lt!23851 (minValue!1958 newMap!16))) lt!23852) (get!1075 (getValueByKey!125 (toList!687 (+!80 lt!23862 (tuple2!2015 lt!23851 (minValue!1958 newMap!16)))) lt!23852)))))

(declare-fun bs!2613 () Bool)

(assert (= bs!2613 d!11785))

(declare-fun m!52669 () Bool)

(assert (=> bs!2613 m!52669))

(assert (=> bs!2613 m!52669))

(declare-fun m!52671 () Bool)

(assert (=> bs!2613 m!52671))

(assert (=> b!59117 d!11785))

(declare-fun d!11787 () Bool)

(assert (=> d!11787 (= (apply!66 lt!23855 lt!23853) (get!1075 (getValueByKey!125 (toList!687 lt!23855) lt!23853)))))

(declare-fun bs!2614 () Bool)

(assert (= bs!2614 d!11787))

(declare-fun m!52673 () Bool)

(assert (=> bs!2614 m!52673))

(assert (=> bs!2614 m!52673))

(declare-fun m!52675 () Bool)

(assert (=> bs!2614 m!52675))

(assert (=> b!59117 d!11787))

(declare-fun d!11789 () Bool)

(assert (=> d!11789 (contains!678 (+!80 lt!23849 (tuple2!2015 lt!23863 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)))) lt!23856)))

(declare-fun lt!24588 () Unit!1547)

(assert (=> d!11789 (= lt!24588 (choose!313 lt!23849 lt!23863 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)) lt!23856))))

(assert (=> d!11789 (contains!678 lt!23849 lt!23856)))

(assert (=> d!11789 (= (addStillContains!42 lt!23849 lt!23863 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)) lt!23856) lt!24588)))

(declare-fun bs!2615 () Bool)

(assert (= bs!2615 d!11789))

(assert (=> bs!2615 m!50813))

(assert (=> bs!2615 m!50813))

(assert (=> bs!2615 m!50815))

(declare-fun m!52677 () Bool)

(assert (=> bs!2615 m!52677))

(declare-fun m!52679 () Bool)

(assert (=> bs!2615 m!52679))

(assert (=> b!59117 d!11789))

(declare-fun d!11791 () Bool)

(assert (=> d!11791 (= (apply!66 (+!80 lt!23850 (tuple2!2015 lt!23858 (minValue!1958 newMap!16))) lt!23860) (apply!66 lt!23850 lt!23860))))

(declare-fun lt!24589 () Unit!1547)

(assert (=> d!11791 (= lt!24589 (choose!312 lt!23850 lt!23858 (minValue!1958 newMap!16) lt!23860))))

(declare-fun e!39506 () Bool)

(assert (=> d!11791 e!39506))

(declare-fun res!33307 () Bool)

(assert (=> d!11791 (=> (not res!33307) (not e!39506))))

(assert (=> d!11791 (= res!33307 (contains!678 lt!23850 lt!23860))))

(assert (=> d!11791 (= (addApplyDifferent!42 lt!23850 lt!23858 (minValue!1958 newMap!16) lt!23860) lt!24589)))

(declare-fun b!60128 () Bool)

(assert (=> b!60128 (= e!39506 (not (= lt!23860 lt!23858)))))

(assert (= (and d!11791 res!33307) b!60128))

(assert (=> d!11791 m!50801))

(declare-fun m!52681 () Bool)

(assert (=> d!11791 m!52681))

(declare-fun m!52683 () Bool)

(assert (=> d!11791 m!52683))

(assert (=> d!11791 m!50803))

(assert (=> d!11791 m!50803))

(assert (=> d!11791 m!50805))

(assert (=> b!59117 d!11791))

(declare-fun d!11793 () Bool)

(declare-fun e!39507 () Bool)

(assert (=> d!11793 e!39507))

(declare-fun res!33308 () Bool)

(assert (=> d!11793 (=> (not res!33308) (not e!39507))))

(declare-fun lt!24592 () ListLongMap!1343)

(assert (=> d!11793 (= res!33308 (contains!678 lt!24592 (_1!1018 (tuple2!2015 lt!23861 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))))))))

(declare-fun lt!24593 () List!1423)

(assert (=> d!11793 (= lt!24592 (ListLongMap!1344 lt!24593))))

(declare-fun lt!24591 () Unit!1547)

(declare-fun lt!24590 () Unit!1547)

(assert (=> d!11793 (= lt!24591 lt!24590)))

(assert (=> d!11793 (= (getValueByKey!125 lt!24593 (_1!1018 (tuple2!2015 lt!23861 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))))) (Some!130 (_2!1018 (tuple2!2015 lt!23861 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))))))))

(assert (=> d!11793 (= lt!24590 (lemmaContainsTupThenGetReturnValue!42 lt!24593 (_1!1018 (tuple2!2015 lt!23861 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)))) (_2!1018 (tuple2!2015 lt!23861 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))))))))

(assert (=> d!11793 (= lt!24593 (insertStrictlySorted!45 (toList!687 lt!23855) (_1!1018 (tuple2!2015 lt!23861 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)))) (_2!1018 (tuple2!2015 lt!23861 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))))))))

(assert (=> d!11793 (= (+!80 lt!23855 (tuple2!2015 lt!23861 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)))) lt!24592)))

(declare-fun b!60129 () Bool)

(declare-fun res!33309 () Bool)

(assert (=> b!60129 (=> (not res!33309) (not e!39507))))

(assert (=> b!60129 (= res!33309 (= (getValueByKey!125 (toList!687 lt!24592) (_1!1018 (tuple2!2015 lt!23861 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))))) (Some!130 (_2!1018 (tuple2!2015 lt!23861 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)))))))))

(declare-fun b!60130 () Bool)

(assert (=> b!60130 (= e!39507 (contains!680 (toList!687 lt!24592) (tuple2!2015 lt!23861 (ite (and c!7472 c!7473) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)))))))

(assert (= (and d!11793 res!33308) b!60129))

(assert (= (and b!60129 res!33309) b!60130))

(declare-fun m!52685 () Bool)

(assert (=> d!11793 m!52685))

(declare-fun m!52687 () Bool)

(assert (=> d!11793 m!52687))

(declare-fun m!52689 () Bool)

(assert (=> d!11793 m!52689))

(declare-fun m!52691 () Bool)

(assert (=> d!11793 m!52691))

(declare-fun m!52693 () Bool)

(assert (=> b!60129 m!52693))

(declare-fun m!52695 () Bool)

(assert (=> b!60130 m!52695))

(assert (=> b!59117 d!11793))

(declare-fun d!11795 () Bool)

(declare-fun e!39508 () Bool)

(assert (=> d!11795 e!39508))

(declare-fun res!33310 () Bool)

(assert (=> d!11795 (=> (not res!33310) (not e!39508))))

(declare-fun lt!24596 () ListLongMap!1343)

(assert (=> d!11795 (= res!33310 (contains!678 lt!24596 (_1!1018 (tuple2!2015 lt!23851 (minValue!1958 newMap!16)))))))

(declare-fun lt!24597 () List!1423)

(assert (=> d!11795 (= lt!24596 (ListLongMap!1344 lt!24597))))

(declare-fun lt!24595 () Unit!1547)

(declare-fun lt!24594 () Unit!1547)

(assert (=> d!11795 (= lt!24595 lt!24594)))

(assert (=> d!11795 (= (getValueByKey!125 lt!24597 (_1!1018 (tuple2!2015 lt!23851 (minValue!1958 newMap!16)))) (Some!130 (_2!1018 (tuple2!2015 lt!23851 (minValue!1958 newMap!16)))))))

(assert (=> d!11795 (= lt!24594 (lemmaContainsTupThenGetReturnValue!42 lt!24597 (_1!1018 (tuple2!2015 lt!23851 (minValue!1958 newMap!16))) (_2!1018 (tuple2!2015 lt!23851 (minValue!1958 newMap!16)))))))

(assert (=> d!11795 (= lt!24597 (insertStrictlySorted!45 (toList!687 lt!23862) (_1!1018 (tuple2!2015 lt!23851 (minValue!1958 newMap!16))) (_2!1018 (tuple2!2015 lt!23851 (minValue!1958 newMap!16)))))))

(assert (=> d!11795 (= (+!80 lt!23862 (tuple2!2015 lt!23851 (minValue!1958 newMap!16))) lt!24596)))

(declare-fun b!60131 () Bool)

(declare-fun res!33311 () Bool)

(assert (=> b!60131 (=> (not res!33311) (not e!39508))))

(assert (=> b!60131 (= res!33311 (= (getValueByKey!125 (toList!687 lt!24596) (_1!1018 (tuple2!2015 lt!23851 (minValue!1958 newMap!16)))) (Some!130 (_2!1018 (tuple2!2015 lt!23851 (minValue!1958 newMap!16))))))))

(declare-fun b!60132 () Bool)

(assert (=> b!60132 (= e!39508 (contains!680 (toList!687 lt!24596) (tuple2!2015 lt!23851 (minValue!1958 newMap!16))))))

(assert (= (and d!11795 res!33310) b!60131))

(assert (= (and b!60131 res!33311) b!60132))

(declare-fun m!52697 () Bool)

(assert (=> d!11795 m!52697))

(declare-fun m!52699 () Bool)

(assert (=> d!11795 m!52699))

(declare-fun m!52701 () Bool)

(assert (=> d!11795 m!52701))

(declare-fun m!52703 () Bool)

(assert (=> d!11795 m!52703))

(declare-fun m!52705 () Bool)

(assert (=> b!60131 m!52705))

(declare-fun m!52707 () Bool)

(assert (=> b!60132 m!52707))

(assert (=> b!59117 d!11795))

(declare-fun d!11797 () Bool)

(declare-fun e!39509 () Bool)

(assert (=> d!11797 e!39509))

(declare-fun res!33312 () Bool)

(assert (=> d!11797 (=> (not res!33312) (not e!39509))))

(declare-fun lt!24600 () ListLongMap!1343)

(assert (=> d!11797 (= res!33312 (contains!678 lt!24600 (_1!1018 (tuple2!2015 lt!23858 (minValue!1958 newMap!16)))))))

(declare-fun lt!24601 () List!1423)

(assert (=> d!11797 (= lt!24600 (ListLongMap!1344 lt!24601))))

(declare-fun lt!24599 () Unit!1547)

(declare-fun lt!24598 () Unit!1547)

(assert (=> d!11797 (= lt!24599 lt!24598)))

(assert (=> d!11797 (= (getValueByKey!125 lt!24601 (_1!1018 (tuple2!2015 lt!23858 (minValue!1958 newMap!16)))) (Some!130 (_2!1018 (tuple2!2015 lt!23858 (minValue!1958 newMap!16)))))))

(assert (=> d!11797 (= lt!24598 (lemmaContainsTupThenGetReturnValue!42 lt!24601 (_1!1018 (tuple2!2015 lt!23858 (minValue!1958 newMap!16))) (_2!1018 (tuple2!2015 lt!23858 (minValue!1958 newMap!16)))))))

(assert (=> d!11797 (= lt!24601 (insertStrictlySorted!45 (toList!687 lt!23850) (_1!1018 (tuple2!2015 lt!23858 (minValue!1958 newMap!16))) (_2!1018 (tuple2!2015 lt!23858 (minValue!1958 newMap!16)))))))

(assert (=> d!11797 (= (+!80 lt!23850 (tuple2!2015 lt!23858 (minValue!1958 newMap!16))) lt!24600)))

(declare-fun b!60133 () Bool)

(declare-fun res!33313 () Bool)

(assert (=> b!60133 (=> (not res!33313) (not e!39509))))

(assert (=> b!60133 (= res!33313 (= (getValueByKey!125 (toList!687 lt!24600) (_1!1018 (tuple2!2015 lt!23858 (minValue!1958 newMap!16)))) (Some!130 (_2!1018 (tuple2!2015 lt!23858 (minValue!1958 newMap!16))))))))

(declare-fun b!60134 () Bool)

(assert (=> b!60134 (= e!39509 (contains!680 (toList!687 lt!24600) (tuple2!2015 lt!23858 (minValue!1958 newMap!16))))))

(assert (= (and d!11797 res!33312) b!60133))

(assert (= (and b!60133 res!33313) b!60134))

(declare-fun m!52709 () Bool)

(assert (=> d!11797 m!52709))

(declare-fun m!52711 () Bool)

(assert (=> d!11797 m!52711))

(declare-fun m!52713 () Bool)

(assert (=> d!11797 m!52713))

(declare-fun m!52715 () Bool)

(assert (=> d!11797 m!52715))

(declare-fun m!52717 () Bool)

(assert (=> b!60133 m!52717))

(declare-fun m!52719 () Bool)

(assert (=> b!60134 m!52719))

(assert (=> b!59117 d!11797))

(declare-fun d!11799 () Bool)

(assert (=> d!11799 (= (apply!66 lt!23896 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)) (get!1075 (getValueByKey!125 (toList!687 lt!23896) (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2616 () Bool)

(assert (= bs!2616 d!11799))

(assert (=> bs!2616 m!50693))

(assert (=> bs!2616 m!52295))

(assert (=> bs!2616 m!52295))

(declare-fun m!52721 () Bool)

(assert (=> bs!2616 m!52721))

(assert (=> b!59165 d!11799))

(declare-fun c!7794 () Bool)

(declare-fun d!11801 () Bool)

(assert (=> d!11801 (= c!7794 ((_ is ValueCellFull!854) (select (arr!1773 (ite c!7472 (_values!2025 newMap!16) lt!23706)) #b00000000000000000000000000000000)))))

(declare-fun e!39510 () V!2841)

(assert (=> d!11801 (= (get!1072 (select (arr!1773 (ite c!7472 (_values!2025 newMap!16) lt!23706)) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!39510)))

(declare-fun b!60135 () Bool)

(assert (=> b!60135 (= e!39510 (get!1073 (select (arr!1773 (ite c!7472 (_values!2025 newMap!16) lt!23706)) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!60136 () Bool)

(assert (=> b!60136 (= e!39510 (get!1074 (select (arr!1773 (ite c!7472 (_values!2025 newMap!16) lt!23706)) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11801 c!7794) b!60135))

(assert (= (and d!11801 (not c!7794)) b!60136))

(assert (=> b!60135 m!50863))

(assert (=> b!60135 m!50707))

(declare-fun m!52723 () Bool)

(assert (=> b!60135 m!52723))

(assert (=> b!60136 m!50863))

(assert (=> b!60136 m!50707))

(declare-fun m!52725 () Bool)

(assert (=> b!60136 m!52725))

(assert (=> b!59165 d!11801))

(declare-fun d!11803 () Bool)

(assert (=> d!11803 (= (get!1075 (getValueByKey!125 (toList!687 lt!23776) lt!23786)) (v!2387 (getValueByKey!125 (toList!687 lt!23776) lt!23786)))))

(assert (=> d!11319 d!11803))

(declare-fun b!60138 () Bool)

(declare-fun e!39511 () Option!131)

(declare-fun e!39512 () Option!131)

(assert (=> b!60138 (= e!39511 e!39512)))

(declare-fun c!7796 () Bool)

(assert (=> b!60138 (= c!7796 (and ((_ is Cons!1419) (toList!687 lt!23776)) (not (= (_1!1018 (h!2000 (toList!687 lt!23776))) lt!23786))))))

(declare-fun b!60137 () Bool)

(assert (=> b!60137 (= e!39511 (Some!130 (_2!1018 (h!2000 (toList!687 lt!23776)))))))

(declare-fun d!11805 () Bool)

(declare-fun c!7795 () Bool)

(assert (=> d!11805 (= c!7795 (and ((_ is Cons!1419) (toList!687 lt!23776)) (= (_1!1018 (h!2000 (toList!687 lt!23776))) lt!23786)))))

(assert (=> d!11805 (= (getValueByKey!125 (toList!687 lt!23776) lt!23786) e!39511)))

(declare-fun b!60140 () Bool)

(assert (=> b!60140 (= e!39512 None!129)))

(declare-fun b!60139 () Bool)

(assert (=> b!60139 (= e!39512 (getValueByKey!125 (t!4757 (toList!687 lt!23776)) lt!23786))))

(assert (= (and d!11805 c!7795) b!60137))

(assert (= (and d!11805 (not c!7795)) b!60138))

(assert (= (and b!60138 c!7796) b!60139))

(assert (= (and b!60138 (not c!7796)) b!60140))

(declare-fun m!52727 () Bool)

(assert (=> b!60139 m!52727))

(assert (=> d!11319 d!11805))

(declare-fun d!11807 () Bool)

(declare-fun res!33314 () Bool)

(declare-fun e!39513 () Bool)

(assert (=> d!11807 (=> res!33314 e!39513)))

(assert (=> d!11807 (= res!33314 (and ((_ is Cons!1419) (toList!687 (+!80 lt!23775 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))) (= (_1!1018 (h!2000 (toList!687 (+!80 lt!23775 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))) lt!23782)))))

(assert (=> d!11807 (= (containsKey!128 (toList!687 (+!80 lt!23775 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!23782) e!39513)))

(declare-fun b!60141 () Bool)

(declare-fun e!39514 () Bool)

(assert (=> b!60141 (= e!39513 e!39514)))

(declare-fun res!33315 () Bool)

(assert (=> b!60141 (=> (not res!33315) (not e!39514))))

(assert (=> b!60141 (= res!33315 (and (or (not ((_ is Cons!1419) (toList!687 (+!80 lt!23775 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))) (bvsle (_1!1018 (h!2000 (toList!687 (+!80 lt!23775 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))) lt!23782)) ((_ is Cons!1419) (toList!687 (+!80 lt!23775 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))) (bvslt (_1!1018 (h!2000 (toList!687 (+!80 lt!23775 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))) lt!23782)))))

(declare-fun b!60142 () Bool)

(assert (=> b!60142 (= e!39514 (containsKey!128 (t!4757 (toList!687 (+!80 lt!23775 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))) lt!23782))))

(assert (= (and d!11807 (not res!33314)) b!60141))

(assert (= (and b!60141 res!33315) b!60142))

(declare-fun m!52729 () Bool)

(assert (=> b!60142 m!52729))

(assert (=> d!11317 d!11807))

(declare-fun d!11809 () Bool)

(assert (=> d!11809 (isDefined!77 (getValueByKey!125 (toList!687 lt!23783) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!24602 () Unit!1547)

(assert (=> d!11809 (= lt!24602 (choose!311 (toList!687 lt!23783) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!39515 () Bool)

(assert (=> d!11809 e!39515))

(declare-fun res!33316 () Bool)

(assert (=> d!11809 (=> (not res!33316) (not e!39515))))

(assert (=> d!11809 (= res!33316 (isStrictlySorted!271 (toList!687 lt!23783)))))

(assert (=> d!11809 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 lt!23783) #b0000000000000000000000000000000000000000000000000000000000000000) lt!24602)))

(declare-fun b!60143 () Bool)

(assert (=> b!60143 (= e!39515 (containsKey!128 (toList!687 lt!23783) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!11809 res!33316) b!60143))

(assert (=> d!11809 m!50687))

(assert (=> d!11809 m!50687))

(assert (=> d!11809 m!51191))

(declare-fun m!52731 () Bool)

(assert (=> d!11809 m!52731))

(assert (=> d!11809 m!51313))

(assert (=> b!60143 m!51187))

(assert (=> b!59367 d!11809))

(assert (=> b!59367 d!11553))

(assert (=> b!59367 d!11409))

(assert (=> b!59372 d!11567))

(assert (=> b!59372 d!11569))

(declare-fun b!60145 () Bool)

(declare-fun e!39516 () Option!131)

(declare-fun e!39517 () Option!131)

(assert (=> b!60145 (= e!39516 e!39517)))

(declare-fun c!7798 () Bool)

(assert (=> b!60145 (= c!7798 (and ((_ is Cons!1419) (toList!687 lt!23956)) (not (= (_1!1018 (h!2000 (toList!687 lt!23956))) (_1!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))))

(declare-fun b!60144 () Bool)

(assert (=> b!60144 (= e!39516 (Some!130 (_2!1018 (h!2000 (toList!687 lt!23956)))))))

(declare-fun d!11811 () Bool)

(declare-fun c!7797 () Bool)

(assert (=> d!11811 (= c!7797 (and ((_ is Cons!1419) (toList!687 lt!23956)) (= (_1!1018 (h!2000 (toList!687 lt!23956))) (_1!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (=> d!11811 (= (getValueByKey!125 (toList!687 lt!23956) (_1!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) e!39516)))

(declare-fun b!60147 () Bool)

(assert (=> b!60147 (= e!39517 None!129)))

(declare-fun b!60146 () Bool)

(assert (=> b!60146 (= e!39517 (getValueByKey!125 (t!4757 (toList!687 lt!23956)) (_1!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(assert (= (and d!11811 c!7797) b!60144))

(assert (= (and d!11811 (not c!7797)) b!60145))

(assert (= (and b!60145 c!7798) b!60146))

(assert (= (and b!60145 (not c!7798)) b!60147))

(declare-fun m!52733 () Bool)

(assert (=> b!60146 m!52733))

(assert (=> b!59230 d!11811))

(declare-fun d!11813 () Bool)

(declare-fun e!39518 () Bool)

(assert (=> d!11813 e!39518))

(declare-fun res!33317 () Bool)

(assert (=> d!11813 (=> res!33317 e!39518)))

(declare-fun lt!24605 () Bool)

(assert (=> d!11813 (= res!33317 (not lt!24605))))

(declare-fun lt!24604 () Bool)

(assert (=> d!11813 (= lt!24605 lt!24604)))

(declare-fun lt!24603 () Unit!1547)

(declare-fun e!39519 () Unit!1547)

(assert (=> d!11813 (= lt!24603 e!39519)))

(declare-fun c!7799 () Bool)

(assert (=> d!11813 (= c!7799 lt!24604)))

(assert (=> d!11813 (= lt!24604 (containsKey!128 (toList!687 lt!23832) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11813 (= (contains!678 lt!23832 #b1000000000000000000000000000000000000000000000000000000000000000) lt!24605)))

(declare-fun b!60148 () Bool)

(declare-fun lt!24606 () Unit!1547)

(assert (=> b!60148 (= e!39519 lt!24606)))

(assert (=> b!60148 (= lt!24606 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 lt!23832) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!60148 (isDefined!77 (getValueByKey!125 (toList!687 lt!23832) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60149 () Bool)

(declare-fun Unit!1601 () Unit!1547)

(assert (=> b!60149 (= e!39519 Unit!1601)))

(declare-fun b!60150 () Bool)

(assert (=> b!60150 (= e!39518 (isDefined!77 (getValueByKey!125 (toList!687 lt!23832) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11813 c!7799) b!60148))

(assert (= (and d!11813 (not c!7799)) b!60149))

(assert (= (and d!11813 (not res!33317)) b!60150))

(declare-fun m!52735 () Bool)

(assert (=> d!11813 m!52735))

(declare-fun m!52737 () Bool)

(assert (=> b!60148 m!52737))

(assert (=> b!60148 m!52129))

(assert (=> b!60148 m!52129))

(declare-fun m!52739 () Bool)

(assert (=> b!60148 m!52739))

(assert (=> b!60150 m!52129))

(assert (=> b!60150 m!52129))

(assert (=> b!60150 m!52739))

(assert (=> bm!4400 d!11813))

(assert (=> bm!4404 d!11783))

(declare-fun d!11815 () Bool)

(declare-fun e!39520 () Bool)

(assert (=> d!11815 e!39520))

(declare-fun res!33318 () Bool)

(assert (=> d!11815 (=> res!33318 e!39520)))

(declare-fun lt!24609 () Bool)

(assert (=> d!11815 (= res!33318 (not lt!24609))))

(declare-fun lt!24608 () Bool)

(assert (=> d!11815 (= lt!24609 lt!24608)))

(declare-fun lt!24607 () Unit!1547)

(declare-fun e!39521 () Unit!1547)

(assert (=> d!11815 (= lt!24607 e!39521)))

(declare-fun c!7800 () Bool)

(assert (=> d!11815 (= c!7800 lt!24608)))

(assert (=> d!11815 (= lt!24608 (containsKey!128 (toList!687 lt!23962) (_1!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(assert (=> d!11815 (= (contains!678 lt!23962 (_1!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!24609)))

(declare-fun b!60151 () Bool)

(declare-fun lt!24610 () Unit!1547)

(assert (=> b!60151 (= e!39521 lt!24610)))

(assert (=> b!60151 (= lt!24610 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 lt!23962) (_1!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(assert (=> b!60151 (isDefined!77 (getValueByKey!125 (toList!687 lt!23962) (_1!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun b!60152 () Bool)

(declare-fun Unit!1602 () Unit!1547)

(assert (=> b!60152 (= e!39521 Unit!1602)))

(declare-fun b!60153 () Bool)

(assert (=> b!60153 (= e!39520 (isDefined!77 (getValueByKey!125 (toList!687 lt!23962) (_1!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (= (and d!11815 c!7800) b!60151))

(assert (= (and d!11815 (not c!7800)) b!60152))

(assert (= (and d!11815 (not res!33318)) b!60153))

(declare-fun m!52741 () Bool)

(assert (=> d!11815 m!52741))

(declare-fun m!52743 () Bool)

(assert (=> b!60151 m!52743))

(assert (=> b!60151 m!51021))

(assert (=> b!60151 m!51021))

(declare-fun m!52745 () Bool)

(assert (=> b!60151 m!52745))

(assert (=> b!60153 m!51021))

(assert (=> b!60153 m!51021))

(assert (=> b!60153 m!52745))

(assert (=> d!11311 d!11815))

(declare-fun b!60155 () Bool)

(declare-fun e!39522 () Option!131)

(declare-fun e!39523 () Option!131)

(assert (=> b!60155 (= e!39522 e!39523)))

(declare-fun c!7802 () Bool)

(assert (=> b!60155 (= c!7802 (and ((_ is Cons!1419) lt!23963) (not (= (_1!1018 (h!2000 lt!23963)) (_1!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))))))

(declare-fun b!60154 () Bool)

(assert (=> b!60154 (= e!39522 (Some!130 (_2!1018 (h!2000 lt!23963))))))

(declare-fun d!11817 () Bool)

(declare-fun c!7801 () Bool)

(assert (=> d!11817 (= c!7801 (and ((_ is Cons!1419) lt!23963) (= (_1!1018 (h!2000 lt!23963)) (_1!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (=> d!11817 (= (getValueByKey!125 lt!23963 (_1!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))) e!39522)))

(declare-fun b!60157 () Bool)

(assert (=> b!60157 (= e!39523 None!129)))

(declare-fun b!60156 () Bool)

(assert (=> b!60156 (= e!39523 (getValueByKey!125 (t!4757 lt!23963) (_1!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(assert (= (and d!11817 c!7801) b!60154))

(assert (= (and d!11817 (not c!7801)) b!60155))

(assert (= (and b!60155 c!7802) b!60156))

(assert (= (and b!60155 (not c!7802)) b!60157))

(declare-fun m!52747 () Bool)

(assert (=> b!60156 m!52747))

(assert (=> d!11311 d!11817))

(declare-fun d!11819 () Bool)

(assert (=> d!11819 (= (getValueByKey!125 lt!23963 (_1!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))) (Some!130 (_2!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun lt!24611 () Unit!1547)

(assert (=> d!11819 (= lt!24611 (choose!318 lt!23963 (_1!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun e!39524 () Bool)

(assert (=> d!11819 e!39524))

(declare-fun res!33319 () Bool)

(assert (=> d!11819 (=> (not res!33319) (not e!39524))))

(assert (=> d!11819 (= res!33319 (isStrictlySorted!271 lt!23963))))

(assert (=> d!11819 (= (lemmaContainsTupThenGetReturnValue!42 lt!23963 (_1!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!24611)))

(declare-fun b!60158 () Bool)

(declare-fun res!33320 () Bool)

(assert (=> b!60158 (=> (not res!33320) (not e!39524))))

(assert (=> b!60158 (= res!33320 (containsKey!128 lt!23963 (_1!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun b!60159 () Bool)

(assert (=> b!60159 (= e!39524 (contains!680 lt!23963 (tuple2!2015 (_1!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (= (and d!11819 res!33319) b!60158))

(assert (= (and b!60158 res!33320) b!60159))

(assert (=> d!11819 m!51015))

(declare-fun m!52749 () Bool)

(assert (=> d!11819 m!52749))

(declare-fun m!52751 () Bool)

(assert (=> d!11819 m!52751))

(declare-fun m!52753 () Bool)

(assert (=> b!60158 m!52753))

(declare-fun m!52755 () Bool)

(assert (=> b!60159 m!52755))

(assert (=> d!11311 d!11819))

(declare-fun b!60160 () Bool)

(declare-fun e!39527 () List!1423)

(declare-fun call!4545 () List!1423)

(assert (=> b!60160 (= e!39527 call!4545)))

(declare-fun e!39529 () Bool)

(declare-fun lt!24612 () List!1423)

(declare-fun b!60161 () Bool)

(assert (=> b!60161 (= e!39529 (contains!680 lt!24612 (tuple2!2015 (_1!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(declare-fun e!39525 () List!1423)

(declare-fun b!60162 () Bool)

(assert (=> b!60162 (= e!39525 (insertStrictlySorted!45 (t!4757 (toList!687 lt!23781)) (_1!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun d!11821 () Bool)

(assert (=> d!11821 e!39529))

(declare-fun res!33321 () Bool)

(assert (=> d!11821 (=> (not res!33321) (not e!39529))))

(assert (=> d!11821 (= res!33321 (isStrictlySorted!271 lt!24612))))

(assert (=> d!11821 (= lt!24612 e!39527)))

(declare-fun c!7803 () Bool)

(assert (=> d!11821 (= c!7803 (and ((_ is Cons!1419) (toList!687 lt!23781)) (bvslt (_1!1018 (h!2000 (toList!687 lt!23781))) (_1!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (=> d!11821 (isStrictlySorted!271 (toList!687 lt!23781))))

(assert (=> d!11821 (= (insertStrictlySorted!45 (toList!687 lt!23781) (_1!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!24612)))

(declare-fun bm!4541 () Bool)

(declare-fun call!4544 () List!1423)

(declare-fun call!4546 () List!1423)

(assert (=> bm!4541 (= call!4544 call!4546)))

(declare-fun b!60163 () Bool)

(declare-fun e!39528 () List!1423)

(assert (=> b!60163 (= e!39527 e!39528)))

(declare-fun c!7804 () Bool)

(assert (=> b!60163 (= c!7804 (and ((_ is Cons!1419) (toList!687 lt!23781)) (= (_1!1018 (h!2000 (toList!687 lt!23781))) (_1!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(declare-fun b!60164 () Bool)

(declare-fun res!33322 () Bool)

(assert (=> b!60164 (=> (not res!33322) (not e!39529))))

(assert (=> b!60164 (= res!33322 (containsKey!128 lt!24612 (_1!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun b!60165 () Bool)

(declare-fun e!39526 () List!1423)

(assert (=> b!60165 (= e!39526 call!4544)))

(declare-fun bm!4542 () Bool)

(assert (=> bm!4542 (= call!4545 ($colon$colon!59 e!39525 (ite c!7803 (h!2000 (toList!687 lt!23781)) (tuple2!2015 (_1!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))))))))

(declare-fun c!7805 () Bool)

(assert (=> bm!4542 (= c!7805 c!7803)))

(declare-fun b!60166 () Bool)

(assert (=> b!60166 (= e!39526 call!4544)))

(declare-fun b!60167 () Bool)

(assert (=> b!60167 (= e!39528 call!4546)))

(declare-fun bm!4543 () Bool)

(assert (=> bm!4543 (= call!4546 call!4545)))

(declare-fun c!7806 () Bool)

(declare-fun b!60168 () Bool)

(assert (=> b!60168 (= c!7806 (and ((_ is Cons!1419) (toList!687 lt!23781)) (bvsgt (_1!1018 (h!2000 (toList!687 lt!23781))) (_1!1018 (tuple2!2015 lt!23787 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (=> b!60168 (= e!39528 e!39526)))

(declare-fun b!60169 () Bool)

(assert (=> b!60169 (= e!39525 (ite c!7804 (t!4757 (toList!687 lt!23781)) (ite c!7806 (Cons!1419 (h!2000 (toList!687 lt!23781)) (t!4757 (toList!687 lt!23781))) Nil!1420)))))

(assert (= (and d!11821 c!7803) b!60160))

(assert (= (and d!11821 (not c!7803)) b!60163))

(assert (= (and b!60163 c!7804) b!60167))

(assert (= (and b!60163 (not c!7804)) b!60168))

(assert (= (and b!60168 c!7806) b!60166))

(assert (= (and b!60168 (not c!7806)) b!60165))

(assert (= (or b!60166 b!60165) bm!4541))

(assert (= (or b!60167 bm!4541) bm!4543))

(assert (= (or b!60160 bm!4543) bm!4542))

(assert (= (and bm!4542 c!7805) b!60162))

(assert (= (and bm!4542 (not c!7805)) b!60169))

(assert (= (and d!11821 res!33321) b!60164))

(assert (= (and b!60164 res!33322) b!60161))

(declare-fun m!52757 () Bool)

(assert (=> b!60161 m!52757))

(declare-fun m!52759 () Bool)

(assert (=> b!60162 m!52759))

(declare-fun m!52761 () Bool)

(assert (=> bm!4542 m!52761))

(declare-fun m!52763 () Bool)

(assert (=> b!60164 m!52763))

(declare-fun m!52765 () Bool)

(assert (=> d!11821 m!52765))

(declare-fun m!52767 () Bool)

(assert (=> d!11821 m!52767))

(assert (=> d!11311 d!11821))

(declare-fun d!11823 () Bool)

(assert (=> d!11823 (= (apply!66 lt!23896 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1075 (getValueByKey!125 (toList!687 lt!23896) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2617 () Bool)

(assert (= bs!2617 d!11823))

(assert (=> bs!2617 m!52115))

(assert (=> bs!2617 m!52115))

(declare-fun m!52769 () Bool)

(assert (=> bs!2617 m!52769))

(assert (=> b!59161 d!11823))

(declare-fun d!11825 () Bool)

(assert (not d!11825))

(assert (=> b!59280 d!11825))

(declare-fun b!60171 () Bool)

(declare-fun e!39530 () Option!131)

(declare-fun e!39531 () Option!131)

(assert (=> b!60171 (= e!39530 e!39531)))

(declare-fun c!7808 () Bool)

(assert (=> b!60171 (= c!7808 (and ((_ is Cons!1419) (toList!687 lt!23916)) (not (= (_1!1018 (h!2000 (toList!687 lt!23916))) (_1!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun b!60170 () Bool)

(assert (=> b!60170 (= e!39530 (Some!130 (_2!1018 (h!2000 (toList!687 lt!23916)))))))

(declare-fun d!11827 () Bool)

(declare-fun c!7807 () Bool)

(assert (=> d!11827 (= c!7807 (and ((_ is Cons!1419) (toList!687 lt!23916)) (= (_1!1018 (h!2000 (toList!687 lt!23916))) (_1!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!11827 (= (getValueByKey!125 (toList!687 lt!23916) (_1!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!39530)))

(declare-fun b!60173 () Bool)

(assert (=> b!60173 (= e!39531 None!129)))

(declare-fun b!60172 () Bool)

(assert (=> b!60172 (= e!39531 (getValueByKey!125 (t!4757 (toList!687 lt!23916)) (_1!1018 (ite c!7472 (ite c!7473 (tuple2!2015 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2015 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2015 (select (arr!1772 (_keys!3666 (v!2382 (underlying!225 thiss!992)))) from!355) (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!11827 c!7807) b!60170))

(assert (= (and d!11827 (not c!7807)) b!60171))

(assert (= (and b!60171 c!7808) b!60172))

(assert (= (and b!60171 (not c!7808)) b!60173))

(declare-fun m!52771 () Bool)

(assert (=> b!60172 m!52771))

(assert (=> b!59178 d!11827))

(declare-fun d!11829 () Bool)

(assert (=> d!11829 (= (inRange!0 (ite c!7561 (index!3007 lt!23985) (index!3010 lt!23985)) (mask!5926 newMap!16)) (and (bvsge (ite c!7561 (index!3007 lt!23985) (index!3010 lt!23985)) #b00000000000000000000000000000000) (bvslt (ite c!7561 (index!3007 lt!23985) (index!3010 lt!23985)) (bvadd (mask!5926 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4427 d!11829))

(declare-fun d!11831 () Bool)

(assert (=> d!11831 (= (apply!66 lt!23832 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)) (get!1075 (getValueByKey!125 (toList!687 lt!23832) (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2618 () Bool)

(assert (= bs!2618 d!11831))

(assert (=> bs!2618 m!50693))

(assert (=> bs!2618 m!51949))

(assert (=> bs!2618 m!51949))

(declare-fun m!52773 () Bool)

(assert (=> bs!2618 m!52773))

(assert (=> b!59069 d!11831))

(declare-fun d!11833 () Bool)

(declare-fun c!7809 () Bool)

(assert (=> d!11833 (= c!7809 ((_ is ValueCellFull!854) (select (arr!1773 (_values!2025 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!39532 () V!2841)

(assert (=> d!11833 (= (get!1072 (select (arr!1773 (_values!2025 newMap!16)) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!39532)))

(declare-fun b!60174 () Bool)

(assert (=> b!60174 (= e!39532 (get!1073 (select (arr!1773 (_values!2025 newMap!16)) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!60175 () Bool)

(assert (=> b!60175 (= e!39532 (get!1074 (select (arr!1773 (_values!2025 newMap!16)) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11833 c!7809) b!60174))

(assert (= (and d!11833 (not c!7809)) b!60175))

(assert (=> b!60174 m!50709))

(assert (=> b!60174 m!50707))

(declare-fun m!52775 () Bool)

(assert (=> b!60174 m!52775))

(assert (=> b!60175 m!50709))

(assert (=> b!60175 m!50707))

(declare-fun m!52777 () Bool)

(assert (=> b!60175 m!52777))

(assert (=> b!59069 d!11833))

(declare-fun d!11835 () Bool)

(assert (=> d!11835 (= (content!64 Nil!1419) ((as const (Array (_ BitVec 64) Bool)) false))))

(assert (=> d!11331 d!11835))

(declare-fun d!11837 () Bool)

(declare-fun e!39533 () Bool)

(assert (=> d!11837 e!39533))

(declare-fun res!33323 () Bool)

(assert (=> d!11837 (=> res!33323 e!39533)))

(declare-fun lt!24615 () Bool)

(assert (=> d!11837 (= res!33323 (not lt!24615))))

(declare-fun lt!24614 () Bool)

(assert (=> d!11837 (= lt!24615 lt!24614)))

(declare-fun lt!24613 () Unit!1547)

(declare-fun e!39534 () Unit!1547)

(assert (=> d!11837 (= lt!24613 e!39534)))

(declare-fun c!7810 () Bool)

(assert (=> d!11837 (= c!7810 lt!24614)))

(assert (=> d!11837 (= lt!24614 (containsKey!128 (toList!687 lt!23857) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11837 (= (contains!678 lt!23857 #b1000000000000000000000000000000000000000000000000000000000000000) lt!24615)))

(declare-fun b!60176 () Bool)

(declare-fun lt!24616 () Unit!1547)

(assert (=> b!60176 (= e!39534 lt!24616)))

(assert (=> b!60176 (= lt!24616 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 lt!23857) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!60176 (isDefined!77 (getValueByKey!125 (toList!687 lt!23857) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60177 () Bool)

(declare-fun Unit!1603 () Unit!1547)

(assert (=> b!60177 (= e!39534 Unit!1603)))

(declare-fun b!60178 () Bool)

(assert (=> b!60178 (= e!39533 (isDefined!77 (getValueByKey!125 (toList!687 lt!23857) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11837 c!7810) b!60176))

(assert (= (and d!11837 (not c!7810)) b!60177))

(assert (= (and d!11837 (not res!33323)) b!60178))

(declare-fun m!52779 () Bool)

(assert (=> d!11837 m!52779))

(declare-fun m!52781 () Bool)

(assert (=> b!60176 m!52781))

(assert (=> b!60176 m!52181))

(assert (=> b!60176 m!52181))

(declare-fun m!52783 () Bool)

(assert (=> b!60176 m!52783))

(assert (=> b!60178 m!52181))

(assert (=> b!60178 m!52181))

(assert (=> b!60178 m!52783))

(assert (=> bm!4408 d!11837))

(declare-fun d!11839 () Bool)

(declare-fun isEmpty!301 (List!1423) Bool)

(assert (=> d!11839 (= (isEmpty!300 lt!23935) (isEmpty!301 (toList!687 lt!23935)))))

(declare-fun bs!2619 () Bool)

(assert (= bs!2619 d!11839))

(declare-fun m!52785 () Bool)

(assert (=> bs!2619 m!52785))

(assert (=> b!59212 d!11839))

(declare-fun b!60179 () Bool)

(declare-fun e!39536 () (_ BitVec 32))

(declare-fun call!4547 () (_ BitVec 32))

(assert (=> b!60179 (= e!39536 (bvadd #b00000000000000000000000000000001 call!4547))))

(declare-fun b!60180 () Bool)

(declare-fun e!39535 () (_ BitVec 32))

(assert (=> b!60180 (= e!39535 e!39536)))

(declare-fun c!7811 () Bool)

(assert (=> b!60180 (= c!7811 (validKeyInArray!0 (select (arr!1772 (_keys!3666 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!60181 () Bool)

(assert (=> b!60181 (= e!39536 call!4547)))

(declare-fun bm!4544 () Bool)

(assert (=> bm!4544 (= call!4547 (arrayCountValidKeys!0 (_keys!3666 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2002 (_keys!3666 newMap!16))))))

(declare-fun d!11841 () Bool)

(declare-fun lt!24617 () (_ BitVec 32))

(assert (=> d!11841 (and (bvsge lt!24617 #b00000000000000000000000000000000) (bvsle lt!24617 (bvsub (size!2002 (_keys!3666 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> d!11841 (= lt!24617 e!39535)))

(declare-fun c!7812 () Bool)

(assert (=> d!11841 (= c!7812 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2002 (_keys!3666 newMap!16))))))

(assert (=> d!11841 (and (bvsle (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2002 (_keys!3666 newMap!16))) (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvsle (size!2002 (_keys!3666 newMap!16)) (size!2002 (_keys!3666 newMap!16))))))

(assert (=> d!11841 (= (arrayCountValidKeys!0 (_keys!3666 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2002 (_keys!3666 newMap!16))) lt!24617)))

(declare-fun b!60182 () Bool)

(assert (=> b!60182 (= e!39535 #b00000000000000000000000000000000)))

(assert (= (and d!11841 c!7812) b!60182))

(assert (= (and d!11841 (not c!7812)) b!60180))

(assert (= (and b!60180 c!7811) b!60179))

(assert (= (and b!60180 (not c!7811)) b!60181))

(assert (= (or b!60179 b!60181) bm!4544))

(assert (=> b!60180 m!51237))

(assert (=> b!60180 m!51237))

(assert (=> b!60180 m!52137))

(declare-fun m!52787 () Bool)

(assert (=> bm!4544 m!52787))

(assert (=> bm!4431 d!11841))

(assert (=> b!59104 d!11677))

(declare-fun d!11843 () Bool)

(declare-fun res!33324 () Bool)

(declare-fun e!39537 () Bool)

(assert (=> d!11843 (=> (not res!33324) (not e!39537))))

(assert (=> d!11843 (= res!33324 (validMask!0 (mask!5926 (_2!1019 lt!23711))))))

(assert (=> d!11843 (= (simpleValid!42 (_2!1019 lt!23711)) e!39537)))

(declare-fun b!60184 () Bool)

(declare-fun res!33327 () Bool)

(assert (=> b!60184 (=> (not res!33327) (not e!39537))))

(assert (=> b!60184 (= res!33327 (bvsge (size!2008 (_2!1019 lt!23711)) (_size!357 (_2!1019 lt!23711))))))

(declare-fun b!60185 () Bool)

(declare-fun res!33326 () Bool)

(assert (=> b!60185 (=> (not res!33326) (not e!39537))))

(assert (=> b!60185 (= res!33326 (= (size!2008 (_2!1019 lt!23711)) (bvadd (_size!357 (_2!1019 lt!23711)) (bvsdiv (bvadd (extraKeys!1929 (_2!1019 lt!23711)) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!60183 () Bool)

(declare-fun res!33325 () Bool)

(assert (=> b!60183 (=> (not res!33325) (not e!39537))))

(assert (=> b!60183 (= res!33325 (and (= (size!2003 (_values!2025 (_2!1019 lt!23711))) (bvadd (mask!5926 (_2!1019 lt!23711)) #b00000000000000000000000000000001)) (= (size!2002 (_keys!3666 (_2!1019 lt!23711))) (size!2003 (_values!2025 (_2!1019 lt!23711)))) (bvsge (_size!357 (_2!1019 lt!23711)) #b00000000000000000000000000000000) (bvsle (_size!357 (_2!1019 lt!23711)) (bvadd (mask!5926 (_2!1019 lt!23711)) #b00000000000000000000000000000001))))))

(declare-fun b!60186 () Bool)

(assert (=> b!60186 (= e!39537 (and (bvsge (extraKeys!1929 (_2!1019 lt!23711)) #b00000000000000000000000000000000) (bvsle (extraKeys!1929 (_2!1019 lt!23711)) #b00000000000000000000000000000011) (bvsge (_vacant!357 (_2!1019 lt!23711)) #b00000000000000000000000000000000)))))

(assert (= (and d!11843 res!33324) b!60183))

(assert (= (and b!60183 res!33325) b!60184))

(assert (= (and b!60184 res!33327) b!60185))

(assert (= (and b!60185 res!33326) b!60186))

(assert (=> d!11843 m!52325))

(declare-fun m!52789 () Bool)

(assert (=> b!60184 m!52789))

(assert (=> b!60185 m!52789))

(assert (=> d!11281 d!11843))

(assert (=> b!59111 d!11705))

(declare-fun d!11845 () Bool)

(declare-fun e!39538 () Bool)

(assert (=> d!11845 e!39538))

(declare-fun res!33328 () Bool)

(assert (=> d!11845 (=> res!33328 e!39538)))

(declare-fun lt!24620 () Bool)

(assert (=> d!11845 (= res!33328 (not lt!24620))))

(declare-fun lt!24619 () Bool)

(assert (=> d!11845 (= lt!24620 lt!24619)))

(declare-fun lt!24618 () Unit!1547)

(declare-fun e!39539 () Unit!1547)

(assert (=> d!11845 (= lt!24618 e!39539)))

(declare-fun c!7813 () Bool)

(assert (=> d!11845 (= c!7813 lt!24619)))

(assert (=> d!11845 (= lt!24619 (containsKey!128 (toList!687 lt!23956) (_1!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(assert (=> d!11845 (= (contains!678 lt!23956 (_1!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!24620)))

(declare-fun b!60187 () Bool)

(declare-fun lt!24621 () Unit!1547)

(assert (=> b!60187 (= e!39539 lt!24621)))

(assert (=> b!60187 (= lt!24621 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 lt!23956) (_1!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(assert (=> b!60187 (isDefined!77 (getValueByKey!125 (toList!687 lt!23956) (_1!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun b!60188 () Bool)

(declare-fun Unit!1604 () Unit!1547)

(assert (=> b!60188 (= e!39539 Unit!1604)))

(declare-fun b!60189 () Bool)

(assert (=> b!60189 (= e!39538 (isDefined!77 (getValueByKey!125 (toList!687 lt!23956) (_1!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (= (and d!11845 c!7813) b!60187))

(assert (= (and d!11845 (not c!7813)) b!60188))

(assert (= (and d!11845 (not res!33328)) b!60189))

(declare-fun m!52791 () Bool)

(assert (=> d!11845 m!52791))

(declare-fun m!52793 () Bool)

(assert (=> b!60187 m!52793))

(assert (=> b!60187 m!50997))

(assert (=> b!60187 m!50997))

(declare-fun m!52795 () Bool)

(assert (=> b!60187 m!52795))

(assert (=> b!60189 m!50997))

(assert (=> b!60189 m!50997))

(assert (=> b!60189 m!52795))

(assert (=> d!11303 d!11845))

(declare-fun b!60191 () Bool)

(declare-fun e!39540 () Option!131)

(declare-fun e!39541 () Option!131)

(assert (=> b!60191 (= e!39540 e!39541)))

(declare-fun c!7815 () Bool)

(assert (=> b!60191 (= c!7815 (and ((_ is Cons!1419) lt!23957) (not (= (_1!1018 (h!2000 lt!23957)) (_1!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))))

(declare-fun b!60190 () Bool)

(assert (=> b!60190 (= e!39540 (Some!130 (_2!1018 (h!2000 lt!23957))))))

(declare-fun c!7814 () Bool)

(declare-fun d!11847 () Bool)

(assert (=> d!11847 (= c!7814 (and ((_ is Cons!1419) lt!23957) (= (_1!1018 (h!2000 lt!23957)) (_1!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (=> d!11847 (= (getValueByKey!125 lt!23957 (_1!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) e!39540)))

(declare-fun b!60193 () Bool)

(assert (=> b!60193 (= e!39541 None!129)))

(declare-fun b!60192 () Bool)

(assert (=> b!60192 (= e!39541 (getValueByKey!125 (t!4757 lt!23957) (_1!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(assert (= (and d!11847 c!7814) b!60190))

(assert (= (and d!11847 (not c!7814)) b!60191))

(assert (= (and b!60191 c!7815) b!60192))

(assert (= (and b!60191 (not c!7815)) b!60193))

(declare-fun m!52797 () Bool)

(assert (=> b!60192 m!52797))

(assert (=> d!11303 d!11847))

(declare-fun d!11849 () Bool)

(assert (=> d!11849 (= (getValueByKey!125 lt!23957 (_1!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) (Some!130 (_2!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun lt!24622 () Unit!1547)

(assert (=> d!11849 (= lt!24622 (choose!318 lt!23957 (_1!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun e!39542 () Bool)

(assert (=> d!11849 e!39542))

(declare-fun res!33329 () Bool)

(assert (=> d!11849 (=> (not res!33329) (not e!39542))))

(assert (=> d!11849 (= res!33329 (isStrictlySorted!271 lt!23957))))

(assert (=> d!11849 (= (lemmaContainsTupThenGetReturnValue!42 lt!23957 (_1!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!24622)))

(declare-fun b!60194 () Bool)

(declare-fun res!33330 () Bool)

(assert (=> b!60194 (=> (not res!33330) (not e!39542))))

(assert (=> b!60194 (= res!33330 (containsKey!128 lt!23957 (_1!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun b!60195 () Bool)

(assert (=> b!60195 (= e!39542 (contains!680 lt!23957 (tuple2!2015 (_1!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (= (and d!11849 res!33329) b!60194))

(assert (= (and b!60194 res!33330) b!60195))

(assert (=> d!11849 m!50991))

(declare-fun m!52799 () Bool)

(assert (=> d!11849 m!52799))

(declare-fun m!52801 () Bool)

(assert (=> d!11849 m!52801))

(declare-fun m!52803 () Bool)

(assert (=> b!60194 m!52803))

(declare-fun m!52805 () Bool)

(assert (=> b!60195 m!52805))

(assert (=> d!11303 d!11849))

(declare-fun b!60196 () Bool)

(declare-fun e!39545 () List!1423)

(declare-fun call!4549 () List!1423)

(assert (=> b!60196 (= e!39545 call!4549)))

(declare-fun e!39547 () Bool)

(declare-fun lt!24623 () List!1423)

(declare-fun b!60197 () Bool)

(assert (=> b!60197 (= e!39547 (contains!680 lt!24623 (tuple2!2015 (_1!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(declare-fun e!39543 () List!1423)

(declare-fun b!60198 () Bool)

(assert (=> b!60198 (= e!39543 (insertStrictlySorted!45 (t!4757 (toList!687 lt!23776)) (_1!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun d!11851 () Bool)

(assert (=> d!11851 e!39547))

(declare-fun res!33331 () Bool)

(assert (=> d!11851 (=> (not res!33331) (not e!39547))))

(assert (=> d!11851 (= res!33331 (isStrictlySorted!271 lt!24623))))

(assert (=> d!11851 (= lt!24623 e!39545)))

(declare-fun c!7816 () Bool)

(assert (=> d!11851 (= c!7816 (and ((_ is Cons!1419) (toList!687 lt!23776)) (bvslt (_1!1018 (h!2000 (toList!687 lt!23776))) (_1!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (=> d!11851 (isStrictlySorted!271 (toList!687 lt!23776))))

(assert (=> d!11851 (= (insertStrictlySorted!45 (toList!687 lt!23776) (_1!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!24623)))

(declare-fun bm!4545 () Bool)

(declare-fun call!4548 () List!1423)

(declare-fun call!4550 () List!1423)

(assert (=> bm!4545 (= call!4548 call!4550)))

(declare-fun b!60199 () Bool)

(declare-fun e!39546 () List!1423)

(assert (=> b!60199 (= e!39545 e!39546)))

(declare-fun c!7817 () Bool)

(assert (=> b!60199 (= c!7817 (and ((_ is Cons!1419) (toList!687 lt!23776)) (= (_1!1018 (h!2000 (toList!687 lt!23776))) (_1!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(declare-fun b!60200 () Bool)

(declare-fun res!33332 () Bool)

(assert (=> b!60200 (=> (not res!33332) (not e!39547))))

(assert (=> b!60200 (= res!33332 (containsKey!128 lt!24623 (_1!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))

(declare-fun b!60201 () Bool)

(declare-fun e!39544 () List!1423)

(assert (=> b!60201 (= e!39544 call!4548)))

(declare-fun bm!4546 () Bool)

(assert (=> bm!4546 (= call!4549 ($colon$colon!59 e!39543 (ite c!7816 (h!2000 (toList!687 lt!23776)) (tuple2!2015 (_1!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992))))) (_2!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))))))

(declare-fun c!7818 () Bool)

(assert (=> bm!4546 (= c!7818 c!7816)))

(declare-fun b!60202 () Bool)

(assert (=> b!60202 (= e!39544 call!4548)))

(declare-fun b!60203 () Bool)

(assert (=> b!60203 (= e!39546 call!4550)))

(declare-fun bm!4547 () Bool)

(assert (=> bm!4547 (= call!4550 call!4549)))

(declare-fun b!60204 () Bool)

(declare-fun c!7819 () Bool)

(assert (=> b!60204 (= c!7819 (and ((_ is Cons!1419) (toList!687 lt!23776)) (bvsgt (_1!1018 (h!2000 (toList!687 lt!23776))) (_1!1018 (tuple2!2015 lt!23784 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (=> b!60204 (= e!39546 e!39544)))

(declare-fun b!60205 () Bool)

(assert (=> b!60205 (= e!39543 (ite c!7817 (t!4757 (toList!687 lt!23776)) (ite c!7819 (Cons!1419 (h!2000 (toList!687 lt!23776)) (t!4757 (toList!687 lt!23776))) Nil!1420)))))

(assert (= (and d!11851 c!7816) b!60196))

(assert (= (and d!11851 (not c!7816)) b!60199))

(assert (= (and b!60199 c!7817) b!60203))

(assert (= (and b!60199 (not c!7817)) b!60204))

(assert (= (and b!60204 c!7819) b!60202))

(assert (= (and b!60204 (not c!7819)) b!60201))

(assert (= (or b!60202 b!60201) bm!4545))

(assert (= (or b!60203 bm!4545) bm!4547))

(assert (= (or b!60196 bm!4547) bm!4546))

(assert (= (and bm!4546 c!7818) b!60198))

(assert (= (and bm!4546 (not c!7818)) b!60205))

(assert (= (and d!11851 res!33331) b!60200))

(assert (= (and b!60200 res!33332) b!60197))

(declare-fun m!52807 () Bool)

(assert (=> b!60197 m!52807))

(declare-fun m!52809 () Bool)

(assert (=> b!60198 m!52809))

(declare-fun m!52811 () Bool)

(assert (=> bm!4546 m!52811))

(declare-fun m!52813 () Bool)

(assert (=> b!60200 m!52813))

(declare-fun m!52815 () Bool)

(assert (=> d!11851 m!52815))

(declare-fun m!52817 () Bool)

(assert (=> d!11851 m!52817))

(assert (=> d!11303 d!11851))

(declare-fun d!11853 () Bool)

(assert (=> d!11853 (= (apply!66 lt!23832 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1075 (getValueByKey!125 (toList!687 lt!23832) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2620 () Bool)

(assert (= bs!2620 d!11853))

(assert (=> bs!2620 m!52157))

(assert (=> bs!2620 m!52157))

(declare-fun m!52819 () Bool)

(assert (=> bs!2620 m!52819))

(assert (=> b!59065 d!11853))

(declare-fun d!11855 () Bool)

(assert (=> d!11855 (= (apply!66 lt!23857 (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000)) (get!1075 (getValueByKey!125 (toList!687 lt!23857) (select (arr!1772 (_keys!3666 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2621 () Bool)

(assert (= bs!2621 d!11855))

(assert (=> bs!2621 m!50693))

(assert (=> bs!2621 m!51975))

(assert (=> bs!2621 m!51975))

(declare-fun m!52821 () Bool)

(assert (=> bs!2621 m!52821))

(assert (=> b!59124 d!11855))

(declare-fun d!11857 () Bool)

(declare-fun c!7820 () Bool)

(assert (=> d!11857 (= c!7820 ((_ is ValueCellFull!854) (select (arr!1773 (ite (or c!7472 c!7461) (_values!2025 newMap!16) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (index!3008 lt!23716) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16))))) #b00000000000000000000000000000000)))))

(declare-fun e!39548 () V!2841)

(assert (=> d!11857 (= (get!1072 (select (arr!1773 (ite (or c!7472 c!7461) (_values!2025 newMap!16) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (index!3008 lt!23716) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!39548)))

(declare-fun b!60206 () Bool)

(assert (=> b!60206 (= e!39548 (get!1073 (select (arr!1773 (ite (or c!7472 c!7461) (_values!2025 newMap!16) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (index!3008 lt!23716) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!60207 () Bool)

(assert (=> b!60207 (= e!39548 (get!1074 (select (arr!1773 (ite (or c!7472 c!7461) (_values!2025 newMap!16) (array!3706 (store (arr!1773 (_values!2025 newMap!16)) (index!3008 lt!23716) (ValueCellFull!854 (get!1072 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) from!355) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2003 (_values!2025 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!304 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11857 c!7820) b!60206))

(assert (= (and d!11857 (not c!7820)) b!60207))

(assert (=> b!60206 m!50781))

(assert (=> b!60206 m!50707))

(declare-fun m!52823 () Bool)

(assert (=> b!60206 m!52823))

(assert (=> b!60207 m!50781))

(assert (=> b!60207 m!50707))

(declare-fun m!52825 () Bool)

(assert (=> b!60207 m!52825))

(assert (=> b!59124 d!11857))

(declare-fun d!11859 () Bool)

(assert (=> d!11859 (isDefined!77 (getValueByKey!125 (toList!687 (+!80 lt!23775 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!23782))))

(declare-fun lt!24624 () Unit!1547)

(assert (=> d!11859 (= lt!24624 (choose!311 (toList!687 (+!80 lt!23775 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!23782))))

(declare-fun e!39549 () Bool)

(assert (=> d!11859 e!39549))

(declare-fun res!33333 () Bool)

(assert (=> d!11859 (=> (not res!33333) (not e!39549))))

(assert (=> d!11859 (= res!33333 (isStrictlySorted!271 (toList!687 (+!80 lt!23775 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992))))))))))

(assert (=> d!11859 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 (+!80 lt!23775 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!23782) lt!24624)))

(declare-fun b!60208 () Bool)

(assert (=> b!60208 (= e!39549 (containsKey!128 (toList!687 (+!80 lt!23775 (tuple2!2015 lt!23789 (zeroValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!23782))))

(assert (= (and d!11859 res!33333) b!60208))

(assert (=> d!11859 m!51037))

(assert (=> d!11859 m!51037))

(assert (=> d!11859 m!51039))

(declare-fun m!52827 () Bool)

(assert (=> d!11859 m!52827))

(declare-fun m!52829 () Bool)

(assert (=> d!11859 m!52829))

(assert (=> b!60208 m!51033))

(assert (=> b!59237 d!11859))

(assert (=> b!59237 d!11595))

(assert (=> b!59237 d!11597))

(declare-fun d!11861 () Bool)

(assert (=> d!11861 (= (apply!66 lt!23896 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1075 (getValueByKey!125 (toList!687 lt!23896) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2622 () Bool)

(assert (= bs!2622 d!11861))

(assert (=> bs!2622 m!52557))

(assert (=> bs!2622 m!52557))

(declare-fun m!52831 () Bool)

(assert (=> bs!2622 m!52831))

(assert (=> b!59171 d!11861))

(assert (=> b!59209 d!11279))

(assert (=> d!11287 d!11223))

(declare-fun d!11863 () Bool)

(assert (=> d!11863 (= (get!1075 (getValueByKey!125 (toList!687 (+!80 lt!23788 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!23778)) (v!2387 (getValueByKey!125 (toList!687 (+!80 lt!23788 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!23778)))))

(assert (=> d!11293 d!11863))

(declare-fun b!60210 () Bool)

(declare-fun e!39550 () Option!131)

(declare-fun e!39551 () Option!131)

(assert (=> b!60210 (= e!39550 e!39551)))

(declare-fun c!7822 () Bool)

(assert (=> b!60210 (= c!7822 (and ((_ is Cons!1419) (toList!687 (+!80 lt!23788 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))) (not (= (_1!1018 (h!2000 (toList!687 (+!80 lt!23788 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))) lt!23778))))))

(declare-fun b!60209 () Bool)

(assert (=> b!60209 (= e!39550 (Some!130 (_2!1018 (h!2000 (toList!687 (+!80 lt!23788 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))))))))

(declare-fun d!11865 () Bool)

(declare-fun c!7821 () Bool)

(assert (=> d!11865 (= c!7821 (and ((_ is Cons!1419) (toList!687 (+!80 lt!23788 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))) (= (_1!1018 (h!2000 (toList!687 (+!80 lt!23788 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))))) lt!23778)))))

(assert (=> d!11865 (= (getValueByKey!125 (toList!687 (+!80 lt!23788 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992)))))) lt!23778) e!39550)))

(declare-fun b!60212 () Bool)

(assert (=> b!60212 (= e!39551 None!129)))

(declare-fun b!60211 () Bool)

(assert (=> b!60211 (= e!39551 (getValueByKey!125 (t!4757 (toList!687 (+!80 lt!23788 (tuple2!2015 lt!23777 (minValue!1958 (v!2382 (underlying!225 thiss!992))))))) lt!23778))))

(assert (= (and d!11865 c!7821) b!60209))

(assert (= (and d!11865 (not c!7821)) b!60210))

(assert (= (and b!60210 c!7822) b!60211))

(assert (= (and b!60210 (not c!7822)) b!60212))

(declare-fun m!52833 () Bool)

(assert (=> b!60211 m!52833))

(assert (=> d!11293 d!11865))

(declare-fun d!11867 () Bool)

(declare-fun e!39552 () Bool)

(assert (=> d!11867 e!39552))

(declare-fun res!33334 () Bool)

(assert (=> d!11867 (=> res!33334 e!39552)))

(declare-fun lt!24627 () Bool)

(assert (=> d!11867 (= res!33334 (not lt!24627))))

(declare-fun lt!24626 () Bool)

(assert (=> d!11867 (= lt!24627 lt!24626)))

(declare-fun lt!24625 () Unit!1547)

(declare-fun e!39553 () Unit!1547)

(assert (=> d!11867 (= lt!24625 e!39553)))

(declare-fun c!7823 () Bool)

(assert (=> d!11867 (= c!7823 lt!24626)))

(assert (=> d!11867 (= lt!24626 (containsKey!128 (toList!687 lt!23935) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11867 (= (contains!678 lt!23935 #b0000000000000000000000000000000000000000000000000000000000000000) lt!24627)))

(declare-fun b!60213 () Bool)

(declare-fun lt!24628 () Unit!1547)

(assert (=> b!60213 (= e!39553 lt!24628)))

(assert (=> b!60213 (= lt!24628 (lemmaContainsKeyImpliesGetValueByKeyDefined!76 (toList!687 lt!23935) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!60213 (isDefined!77 (getValueByKey!125 (toList!687 lt!23935) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60214 () Bool)

(declare-fun Unit!1605 () Unit!1547)

(assert (=> b!60214 (= e!39553 Unit!1605)))

(declare-fun b!60215 () Bool)

(assert (=> b!60215 (= e!39552 (isDefined!77 (getValueByKey!125 (toList!687 lt!23935) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11867 c!7823) b!60213))

(assert (= (and d!11867 (not c!7823)) b!60214))

(assert (= (and d!11867 (not res!33334)) b!60215))

(declare-fun m!52835 () Bool)

(assert (=> d!11867 m!52835))

(declare-fun m!52837 () Bool)

(assert (=> b!60213 m!52837))

(declare-fun m!52839 () Bool)

(assert (=> b!60213 m!52839))

(assert (=> b!60213 m!52839))

(declare-fun m!52841 () Bool)

(assert (=> b!60213 m!52841))

(assert (=> b!60215 m!52839))

(assert (=> b!60215 m!52839))

(assert (=> b!60215 m!52841))

(assert (=> d!11283 d!11867))

(assert (=> d!11283 d!11199))

(declare-fun d!11869 () Bool)

(assert (=> d!11869 (= (get!1073 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!304 (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2381 (select (arr!1773 (_values!2025 (v!2382 (underlying!225 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!59145 d!11869))

(declare-fun condMapEmpty!2887 () Bool)

(declare-fun mapDefault!2887 () ValueCell!854)

(assert (=> mapNonEmpty!2886 (= condMapEmpty!2887 (= mapRest!2886 ((as const (Array (_ BitVec 32) ValueCell!854)) mapDefault!2887)))))

(declare-fun e!39554 () Bool)

(declare-fun mapRes!2887 () Bool)

(assert (=> mapNonEmpty!2886 (= tp!8016 (and e!39554 mapRes!2887))))

(declare-fun b!60216 () Bool)

(declare-fun e!39555 () Bool)

(assert (=> b!60216 (= e!39555 tp_is_empty!2395)))

(declare-fun mapIsEmpty!2887 () Bool)

(assert (=> mapIsEmpty!2887 mapRes!2887))

(declare-fun b!60217 () Bool)

(assert (=> b!60217 (= e!39554 tp_is_empty!2395)))

(declare-fun mapNonEmpty!2887 () Bool)

(declare-fun tp!8017 () Bool)

(assert (=> mapNonEmpty!2887 (= mapRes!2887 (and tp!8017 e!39555))))

(declare-fun mapKey!2887 () (_ BitVec 32))

(declare-fun mapValue!2887 () ValueCell!854)

(declare-fun mapRest!2887 () (Array (_ BitVec 32) ValueCell!854))

(assert (=> mapNonEmpty!2887 (= mapRest!2886 (store mapRest!2887 mapKey!2887 mapValue!2887))))

(assert (= (and mapNonEmpty!2886 condMapEmpty!2887) mapIsEmpty!2887))

(assert (= (and mapNonEmpty!2886 (not condMapEmpty!2887)) mapNonEmpty!2887))

(assert (= (and mapNonEmpty!2887 ((_ is ValueCellFull!854) mapValue!2887)) b!60216))

(assert (= (and mapNonEmpty!2886 ((_ is ValueCellFull!854) mapDefault!2887)) b!60217))

(declare-fun m!52843 () Bool)

(assert (=> mapNonEmpty!2887 m!52843))

(declare-fun condMapEmpty!2888 () Bool)

(declare-fun mapDefault!2888 () ValueCell!854)

(assert (=> mapNonEmpty!2885 (= condMapEmpty!2888 (= mapRest!2885 ((as const (Array (_ BitVec 32) ValueCell!854)) mapDefault!2888)))))

(declare-fun e!39556 () Bool)

(declare-fun mapRes!2888 () Bool)

(assert (=> mapNonEmpty!2885 (= tp!8015 (and e!39556 mapRes!2888))))

(declare-fun b!60218 () Bool)

(declare-fun e!39557 () Bool)

(assert (=> b!60218 (= e!39557 tp_is_empty!2395)))

(declare-fun mapIsEmpty!2888 () Bool)

(assert (=> mapIsEmpty!2888 mapRes!2888))

(declare-fun b!60219 () Bool)

(assert (=> b!60219 (= e!39556 tp_is_empty!2395)))

(declare-fun mapNonEmpty!2888 () Bool)

(declare-fun tp!8018 () Bool)

(assert (=> mapNonEmpty!2888 (= mapRes!2888 (and tp!8018 e!39557))))

(declare-fun mapRest!2888 () (Array (_ BitVec 32) ValueCell!854))

(declare-fun mapKey!2888 () (_ BitVec 32))

(declare-fun mapValue!2888 () ValueCell!854)

(assert (=> mapNonEmpty!2888 (= mapRest!2885 (store mapRest!2888 mapKey!2888 mapValue!2888))))

(assert (= (and mapNonEmpty!2885 condMapEmpty!2888) mapIsEmpty!2888))

(assert (= (and mapNonEmpty!2885 (not condMapEmpty!2888)) mapNonEmpty!2888))

(assert (= (and mapNonEmpty!2888 ((_ is ValueCellFull!854) mapValue!2888)) b!60218))

(assert (= (and mapNonEmpty!2885 ((_ is ValueCellFull!854) mapDefault!2888)) b!60219))

(declare-fun m!52845 () Bool)

(assert (=> mapNonEmpty!2888 m!52845))

(declare-fun b_lambda!2641 () Bool)

(assert (= b_lambda!2615 (or (and b!58642 b_free!1957) (and b!58653 b_free!1959 (= (defaultEntry!2042 newMap!16) (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))))) b_lambda!2641)))

(declare-fun b_lambda!2643 () Bool)

(assert (= b_lambda!2623 (or (and b!58642 b_free!1957 (= (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) (defaultEntry!2042 newMap!16))) (and b!58653 b_free!1959) b_lambda!2643)))

(declare-fun b_lambda!2645 () Bool)

(assert (= b_lambda!2621 (or (and b!58642 b_free!1957 (= (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) (defaultEntry!2042 newMap!16))) (and b!58653 b_free!1959) b_lambda!2645)))

(declare-fun b_lambda!2647 () Bool)

(assert (= b_lambda!2619 (or (and b!58642 b_free!1957 (= (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) (defaultEntry!2042 newMap!16))) (and b!58653 b_free!1959) b_lambda!2647)))

(declare-fun b_lambda!2649 () Bool)

(assert (= b_lambda!2627 (or (and b!58642 b_free!1957 (= (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) (defaultEntry!2042 newMap!16))) (and b!58653 b_free!1959) b_lambda!2649)))

(declare-fun b_lambda!2651 () Bool)

(assert (= b_lambda!2631 (or (and b!58642 b_free!1957 (= (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) (defaultEntry!2042 newMap!16))) (and b!58653 b_free!1959) b_lambda!2651)))

(declare-fun b_lambda!2653 () Bool)

(assert (= b_lambda!2635 (or (and b!58642 b_free!1957 (= (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) (defaultEntry!2042 newMap!16))) (and b!58653 b_free!1959) b_lambda!2653)))

(declare-fun b_lambda!2655 () Bool)

(assert (= b_lambda!2613 (or (and b!58642 b_free!1957 (= (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) (defaultEntry!2042 newMap!16))) (and b!58653 b_free!1959) b_lambda!2655)))

(declare-fun b_lambda!2657 () Bool)

(assert (= b_lambda!2611 (or (and b!58642 b_free!1957 (= (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) (defaultEntry!2042 newMap!16))) (and b!58653 b_free!1959) b_lambda!2657)))

(declare-fun b_lambda!2659 () Bool)

(assert (= b_lambda!2633 (or (and b!58642 b_free!1957 (= (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) (defaultEntry!2042 newMap!16))) (and b!58653 b_free!1959) b_lambda!2659)))

(declare-fun b_lambda!2661 () Bool)

(assert (= b_lambda!2637 (or (and b!58642 b_free!1957 (= (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) (defaultEntry!2042 newMap!16))) (and b!58653 b_free!1959) b_lambda!2661)))

(declare-fun b_lambda!2663 () Bool)

(assert (= b_lambda!2639 (or (and b!58642 b_free!1957 (= (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) (defaultEntry!2042 newMap!16))) (and b!58653 b_free!1959) b_lambda!2663)))

(declare-fun b_lambda!2665 () Bool)

(assert (= b_lambda!2625 (or (and b!58642 b_free!1957 (= (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))) (defaultEntry!2042 newMap!16))) (and b!58653 b_free!1959) b_lambda!2665)))

(declare-fun b_lambda!2667 () Bool)

(assert (= b_lambda!2617 (or (and b!58642 b_free!1957) (and b!58653 b_free!1959 (= (defaultEntry!2042 newMap!16) (defaultEntry!2042 (v!2382 (underlying!225 thiss!992))))) b_lambda!2667)))

(check-sat (not b!59507) (not b!59957) (not b!59959) (not d!11749) (not b!60133) (not b!60150) (not d!11515) (not b!60151) (not b!59843) (not d!11619) (not b!59827) (not b!60126) (not b!59679) (not d!11557) (not b_lambda!2665) (not b_lambda!2663) (not b!60197) (not b!59636) (not d!11747) (not b!59522) (not b!59824) (not b!59951) (not b!59629) (not d!11851) (not b_lambda!2605) (not b!59671) (not b!59818) (not b!59678) (not d!11773) (not d!11461) (not b!60194) (not d!11465) (not bm!4535) (not b!59887) (not b!59523) (not b_lambda!2659) (not d!11635) (not d!11605) (not b!59747) (not b!59821) (not b!59570) (not b_lambda!2607) (not bm!4544) (not b!60121) (not b!59513) (not b!59710) (not b!59865) (not d!11743) (not b!60087) (not b!59466) (not d!11611) (not b!60175) (not b!59896) (not b!60068) (not b!60103) (not b!59815) (not b!59885) (not b_lambda!2661) (not b!59949) (not b!60051) (not b!60164) (not d!11487) (not d!11547) (not b!60136) (not b!59691) (not d!11397) (not b_lambda!2647) (not b!60115) (not d!11393) (not b!59829) (not b!59774) (not d!11509) (not b!60047) (not b!59607) (not b!60106) (not b_lambda!2589) (not d!11667) (not d!11659) (not b!59874) (not b!59993) (not b!60030) (not b!59911) (not b!60031) (not d!11559) (not b!59471) (not b!59452) (not b!60071) (not b!59599) (not b!60122) (not b!59554) (not b!59698) (not bm!4515) (not b!59888) (not b!59567) (not b!60077) (not b!59881) (not b!59863) (not b!59740) (not d!11843) (not b!59611) (not d!11453) (not b!59616) (not bm!4540) (not b!59857) (not b!59999) (not b!59822) (not d!11795) (not d!11595) (not bm!4500) (not d!11511) (not b!60069) (not d!11739) (not bm!4495) (not bm!4461) (not d!11725) (not d!11797) (not d!11375) (not d!11423) (not b!60142) (not d!11765) (not bm!4459) (not b!59623) (not b!59765) (not d!11639) (not b!59707) (not b!59626) (not b!59603) (not b!59954) (not b!59511) (not b!60072) (not b!60159) (not b!60058) (not b!59833) (not b!59890) (not b!60055) (not b!59656) (not b!60134) (not d!11733) (not b!59384) (not b!59726) (not b!60059) (not d!11399) (not b!59473) (not b_lambda!2629) (not b!59682) (not b!60022) (not b!60007) (not b!59962) (not b!60085) (not b!60108) (not bm!4490) (not d!11603) (not d!11429) (not b!59905) (not d!11661) (not b!60131) (not bm!4518) (not b!59583) (not d!11831) (not bm!4456) (not d!11387) (not d!11781) (not b_next!1959) (not d!11539) (not b!59478) (not b!59760) (not d!11439) (not b!59624) (not b!59775) (not d!11357) (not b!59618) (not d!11567) (not d!11855) (not b!60127) (not b!59737) (not bm!4473) (not b!59727) (not d!11837) (not b!60135) (not b!60019) (not b!60211) (not d!11703) (not b!59780) (not d!11529) (not d!11707) (not bm!4503) (not b!59980) (not b!59704) (not b!60112) (not b!59849) (not d!11561) (not b!59810) (not d!11531) (not d!11669) (not b!59569) (not d!11849) (not b!59496) (not b!59612) (not b!59762) (not bm!4493) (not b!59700) (not b!60040) (not d!11861) (not b_lambda!2641) (not b!60174) (not d!11783) (not b!59459) (not b!59784) (not bm!4530) (not b!59969) (not b_lambda!2645) (not bm!4465) (not b!60083) (not d!11689) (not d!11653) (not d!11609) (not b!60044) (not d!11755) (not b!59746) (not d!11699) (not b!59600) (not bm!4539) (not b!60053) (not b!59694) (not b!59382) (not b!60162) (not b!59866) (not b!59545) (not b!59878) (not b!60057) (not b!59855) (not bm!4512) (not b!60120) (not d!11823) (not d!11657) (not b!59868) (not b!59832) (not d!11771) (not b!59590) (not d!11789) (not b!60054) (not b!59591) (not b!59661) (not d!11745) (not d!11433) (not d!11581) (not bm!4498) (not b!60050) (not b!60028) (not b!60089) (not b!59652) (not bm!4497) (not d!11553) (not d!11637) (not d!11839) (not bm!4522) (not d!11793) (not b!60061) (not b!59516) (not d!11373) (not bm!4485) (not b!60132) (not d!11779) (not b!59586) (not b!59548) (not b!60129) (not b!60156) (not bm!4520) (not d!11383) (not bm!4529) (not b!59934) (not b_next!1957) (not d!11777) (not b!59788) (not d!11587) (not b!60064) (not b!60195) (not d!11447) (not b!59572) (not b!60176) (not d!11513) (not b_lambda!2601) (not b!60111) (not d!11791) (not b!60187) (not d!11505) (not b!59884) (not d!11467) (not b!59796) (not b!59835) (not d!11497) (not b!59759) (not b!59972) (not b!59940) (not b!59633) (not d!11449) (not b!59559) (not bm!4533) (not b!59830) (not b_lambda!2653) (not b!60094) (not d!11763) (not b!60001) (not b_lambda!2651) (not b!60009) (not d!11579) (not bm!4542) (not b!59601) (not d!11645) (not d!11477) (not b!59717) (not d!11417) (not b!59650) (not b!59630) (not b!59777) (not b!59579) (not b!59996) (not b!59688) (not b!59631) (not b!59465) (not d!11859) (not d!11867) (not b!59974) (not d!11799) (not b!59468) (not b!60161) (not b!59689) (not d!11483) (not bm!4508) (not bm!4525) (not b!60123) (not b!59462) (not b!60198) (not d!11533) (not b!59581) (not b!60178) (not d!11391) (not d!11769) (not d!11713) (not b!59901) (not b!59620) (not d!11767) (not d!11727) (not b!59801) (not b!60080) (not b!60158) (not d!11481) (not d!11627) (not d!11685) (not d!11719) (not b!59487) (not b!59639) (not b!60172) (not b!59786) (not b!59882) (not d!11819) (not d!11787) (not b!59753) (not b!59990) (not b!60003) (not d!11457) (not b!60208) (not b!60013) (not d!11517) (not b!60185) (not b!60076) (not bm!4519) (not b!60206) (not d!11723) (not b!60091) (not b!59685) (not b!59500) (not b!60012) (not b_lambda!2603) (not b!59561) (not bm!4487) tp_is_empty!2395 (not b!59672) (not d!11475) (not d!11753) (not b!59819) (not b!59602) (not b!60016) (not b!60023) (not d!11571) (not b!59494) (not d!11623) (not d!11717) (not d!11775) (not b!60180) (not d!11413) b_and!3645 (not b!60063) (not b!60139) (not d!11463) (not mapNonEmpty!2888) (not d!11583) (not d!11459) (not d!11737) (not b!59680) (not d!11629) (not d!11451) (not d!11565) (not d!11479) (not d!11729) (not bm!4538) (not b!59566) (not b!59595) (not b!59806) (not b!59641) (not b!60189) (not b_lambda!2657) (not b_lambda!2609) (not b!59445) (not b!59987) (not b!60215) (not d!11473) (not b!59992) (not d!11673) (not b!60118) (not b_lambda!2655) (not b!59790) (not b!59939) (not b!59444) (not bm!4527) (not d!11617) (not d!11555) (not b!59755) (not bm!4449) (not b!59588) (not d!11709) (not b!59852) (not d!11599) (not bm!4478) (not b!59510) (not b!59731) (not b!60035) (not b!59615) (not b!59503) (not d!11507) (not b!59642) (not d!11491) (not b!59610) (not b!60070) (not d!11643) (not b!60143) (not b!59862) (not bm!4476) (not b!59589) (not b!60062) (not b!59860) (not b!60148) (not d!11813) (not d!11503) (not bm!4454) (not b!59956) (not b!59877) (not d!11389) (not b!59587) (not b!60029) (not b!60037) (not bm!4491) (not b!59490) (not bm!4463) (not b!59506) (not b!59943) (not b!59480) (not b!60153) (not b!59499) (not b!59736) (not bm!4457) (not b!60025) (not b!59608) (not b!59644) (not b!60200) (not b!59604) (not d!11551) (not b!59897) (not b!59675) (not b!59960) (not b!59998) (not b!59430) (not b!59437) (not b!59909) (not bm!4546) (not d!11621) (not d!11593) (not b!59902) (not b!59484) (not b!59423) (not d!11693) (not b!59798) (not d!11499) (not b!59814) (not bm!4450) (not b!59789) (not b!60113) (not d!11711) (not mapNonEmpty!2887) (not d!11493) (not bm!4510) (not d!11469) (not b!60041) (not b!59546) (not d!11683) (not b!59743) (not bm!4517) (not bm!4464) (not b!59433) (not b!59733) (not b!59658) (not d!11591) (not b!59410) (not d!11527) (not b!60105) (not d!11701) (not d!11543) (not b!59854) (not d!11731) (not b!59483) (not d!11519) (not d!11815) (not b!59508) (not bm!4489) (not b!59795) (not d!11369) (not d!11371) (not b!59714) (not b!60130) (not b!59713) (not bm!4480) (not bm!4499) (not b!60184) (not d!11385) (not bm!4531) (not bm!4452) (not b!60119) (not bm!4479) (not b!60192) (not bm!4505) (not b!59908) (not b!59977) (not d!11427) (not d!11761) (not b_lambda!2649) (not bm!4507) (not d!11425) (not bm!4501) (not b!59474) (not b_lambda!2585) (not d!11671) (not d!11809) (not d!11411) (not d!11785) (not b!59994) (not b!59613) (not b!59668) (not b!59594) (not d!11715) (not b!59665) (not b!60207) (not d!11721) (not b!59946) (not b!60213) (not d!11853) (not bm!4482) (not b!59557) (not b!59662) (not d!11675) (not b_lambda!2667) (not b!60079) (not b!59756) (not d!11541) (not b!59803) (not bm!4537) (not bm!4509) (not d!11821) (not b!59976) (not b!59721) (not b!59446) (not d!11455) (not b!60100) (not b!59793) (not b!59985) (not d!11437) (not b!60073) (not b!59703) (not d!11735) (not b_lambda!2643) (not b!59450) (not b!59816) (not b!59614) (not b!59975) (not d!11421) (not b!59625) (not b!59978) b_and!3647 (not b!59638) (not b!60093) (not b!59893) (not b!59621) (not b!59791) (not d!11845) (not d!11361) (not b!59455) (not d!11471) (not b!59564) (not b!59409) (not b!59493) (not b!60146) (not b!59456))
(check-sat b_and!3645 b_and!3647 (not b_next!1957) (not b_next!1959))
