; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!8572 () Bool)

(assert start!8572)

(declare-fun b!58610 () Bool)

(declare-fun b_free!1957 () Bool)

(declare-fun b_next!1957 () Bool)

(assert (=> b!58610 (= b_free!1957 (not b_next!1957))))

(declare-fun tp!7984 () Bool)

(declare-fun b_and!3541 () Bool)

(assert (=> b!58610 (= tp!7984 b_and!3541)))

(declare-fun b!58607 () Bool)

(declare-fun b_free!1959 () Bool)

(declare-fun b_next!1959 () Bool)

(assert (=> b!58607 (= b_free!1959 (not b_next!1959))))

(declare-fun tp!7985 () Bool)

(declare-fun b_and!3543 () Bool)

(assert (=> b!58607 (= tp!7985 b_and!3543)))

(declare-fun res!32657 () Bool)

(declare-fun e!38565 () Bool)

(assert (=> start!8572 (=> (not res!32657) (not e!38565))))

(declare-datatypes ((V!2841 0))(
  ( (V!2842 (val!1242 Int)) )
))
(declare-datatypes ((array!3697 0))(
  ( (array!3698 (arr!1768 (Array (_ BitVec 32) (_ BitVec 64))) (size!1999 (_ BitVec 32))) )
))
(declare-datatypes ((ValueCell!854 0))(
  ( (ValueCellFull!854 (v!2376 V!2841)) (EmptyCell!854) )
))
(declare-datatypes ((array!3699 0))(
  ( (array!3700 (arr!1769 (Array (_ BitVec 32) ValueCell!854)) (size!2000 (_ BitVec 32))) )
))
(declare-datatypes ((LongMapFixedSize!616 0))(
  ( (LongMapFixedSize!617 (defaultEntry!2042 Int) (mask!5925 (_ BitVec 32)) (extraKeys!1929 (_ BitVec 32)) (zeroValue!1958 V!2841) (minValue!1958 V!2841) (_size!357 (_ BitVec 32)) (_keys!3665 array!3697) (_values!2025 array!3699) (_vacant!357 (_ BitVec 32))) )
))
(declare-datatypes ((Cell!424 0))(
  ( (Cell!425 (v!2377 LongMapFixedSize!616)) )
))
(declare-datatypes ((LongMap!424 0))(
  ( (LongMap!425 (underlying!223 Cell!424)) )
))
(declare-fun thiss!992 () LongMap!424)

(declare-fun valid!255 (LongMap!424) Bool)

(assert (=> start!8572 (= res!32657 (valid!255 thiss!992))))

(assert (=> start!8572 e!38565))

(declare-fun e!38575 () Bool)

(assert (=> start!8572 e!38575))

(assert (=> start!8572 true))

(declare-fun e!38578 () Bool)

(assert (=> start!8572 e!38578))

(declare-fun b!58605 () Bool)

(declare-fun e!38576 () Bool)

(declare-fun e!38570 () Bool)

(declare-fun mapRes!2868 () Bool)

(assert (=> b!58605 (= e!38576 (and e!38570 mapRes!2868))))

(declare-fun condMapEmpty!2868 () Bool)

(declare-fun mapDefault!2867 () ValueCell!854)

(assert (=> b!58605 (= condMapEmpty!2868 (= (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) ((as const (Array (_ BitVec 32) ValueCell!854)) mapDefault!2867)))))

(declare-fun b!58606 () Bool)

(declare-fun res!32656 () Bool)

(declare-fun e!38577 () Bool)

(assert (=> b!58606 (=> (not res!32656) (not e!38577))))

(declare-fun validMask!0 ((_ BitVec 32)) Bool)

(assert (=> b!58606 (= res!32656 (validMask!0 (mask!5925 (v!2377 (underlying!223 thiss!992)))))))

(declare-fun e!38563 () Bool)

(declare-fun newMap!16 () LongMapFixedSize!616)

(declare-fun tp_is_empty!2395 () Bool)

(declare-fun array_inv!1099 (array!3697) Bool)

(declare-fun array_inv!1100 (array!3699) Bool)

(assert (=> b!58607 (= e!38578 (and tp!7985 tp_is_empty!2395 (array_inv!1099 (_keys!3665 newMap!16)) (array_inv!1100 (_values!2025 newMap!16)) e!38563))))

(declare-fun b!58608 () Bool)

(declare-fun e!38572 () Bool)

(declare-fun mapRes!2867 () Bool)

(assert (=> b!58608 (= e!38563 (and e!38572 mapRes!2867))))

(declare-fun condMapEmpty!2867 () Bool)

(declare-fun mapDefault!2868 () ValueCell!854)

(assert (=> b!58608 (= condMapEmpty!2867 (= (arr!1769 (_values!2025 newMap!16)) ((as const (Array (_ BitVec 32) ValueCell!854)) mapDefault!2868)))))

(declare-fun b!58609 () Bool)

(declare-datatypes ((Unit!1550 0))(
  ( (Unit!1551) )
))
(declare-fun e!38573 () Unit!1550)

(declare-fun Unit!1552 () Unit!1550)

(assert (=> b!58609 (= e!38573 Unit!1552)))

(declare-fun lt!23595 () Unit!1550)

(declare-fun from!355 () (_ BitVec 32))

(declare-fun lemmaListMapContainsThenArrayContainsFrom!28 (array!3697 array!3699 (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 (_ BitVec 64) (_ BitVec 32) Int) Unit!1550)

(assert (=> b!58609 (= lt!23595 (lemmaListMapContainsThenArrayContainsFrom!28 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (_values!2025 (v!2377 (underlying!223 thiss!992))) (mask!5925 (v!2377 (underlying!223 thiss!992))) (extraKeys!1929 (v!2377 (underlying!223 thiss!992))) (zeroValue!1958 (v!2377 (underlying!223 thiss!992))) (minValue!1958 (v!2377 (underlying!223 thiss!992))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2042 (v!2377 (underlying!223 thiss!992)))))))

(declare-fun arrayContainsKey!0 (array!3697 (_ BitVec 64) (_ BitVec 32)) Bool)

(assert (=> b!58609 (arrayContainsKey!0 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355))))

(declare-fun lt!23590 () Unit!1550)

(declare-fun lemmaNoDuplicateFromThenFromBigger!0 (array!3697 (_ BitVec 32) (_ BitVec 32)) Unit!1550)

(assert (=> b!58609 (= lt!23590 (lemmaNoDuplicateFromThenFromBigger!0 (_keys!3665 (v!2377 (underlying!223 thiss!992))) #b00000000000000000000000000000000 from!355))))

(declare-datatypes ((List!1436 0))(
  ( (Nil!1433) (Cons!1432 (h!2013 (_ BitVec 64)) (t!4769 List!1436)) )
))
(declare-fun arrayNoDuplicates!0 (array!3697 (_ BitVec 32) List!1436) Bool)

(assert (=> b!58609 (arrayNoDuplicates!0 (_keys!3665 (v!2377 (underlying!223 thiss!992))) from!355 Nil!1433)))

(declare-fun lt!23593 () Unit!1550)

(declare-fun lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (array!3697 (_ BitVec 32) (_ BitVec 64) List!1436) Unit!1550)

(assert (=> b!58609 (= lt!23593 (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (Cons!1432 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) Nil!1433)))))

(assert (=> b!58609 false))

(declare-fun e!38568 () Bool)

(assert (=> b!58610 (= e!38568 (and tp!7984 tp_is_empty!2395 (array_inv!1099 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (array_inv!1100 (_values!2025 (v!2377 (underlying!223 thiss!992)))) e!38576))))

(declare-fun b!58611 () Bool)

(declare-fun Unit!1553 () Unit!1550)

(assert (=> b!58611 (= e!38573 Unit!1553)))

(declare-fun b!58612 () Bool)

(declare-fun e!38571 () Bool)

(assert (=> b!58612 (= e!38575 e!38571)))

(declare-fun mapIsEmpty!2867 () Bool)

(assert (=> mapIsEmpty!2867 mapRes!2867))

(declare-fun b!58613 () Bool)

(assert (=> b!58613 (= e!38571 e!38568)))

(declare-fun mapNonEmpty!2867 () Bool)

(declare-fun tp!7983 () Bool)

(declare-fun e!38567 () Bool)

(assert (=> mapNonEmpty!2867 (= mapRes!2867 (and tp!7983 e!38567))))

(declare-fun mapRest!2867 () (Array (_ BitVec 32) ValueCell!854))

(declare-fun mapValue!2867 () ValueCell!854)

(declare-fun mapKey!2868 () (_ BitVec 32))

(assert (=> mapNonEmpty!2867 (= (arr!1769 (_values!2025 newMap!16)) (store mapRest!2867 mapKey!2868 mapValue!2867))))

(declare-fun mapNonEmpty!2868 () Bool)

(declare-fun tp!7986 () Bool)

(declare-fun e!38569 () Bool)

(assert (=> mapNonEmpty!2868 (= mapRes!2868 (and tp!7986 e!38569))))

(declare-fun mapRest!2868 () (Array (_ BitVec 32) ValueCell!854))

(declare-fun mapKey!2867 () (_ BitVec 32))

(declare-fun mapValue!2868 () ValueCell!854)

(assert (=> mapNonEmpty!2868 (= (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) (store mapRest!2868 mapKey!2867 mapValue!2868))))

(declare-fun b!58614 () Bool)

(assert (=> b!58614 (= e!38569 tp_is_empty!2395)))

(declare-fun b!58615 () Bool)

(assert (=> b!58615 (= e!38567 tp_is_empty!2395)))

(declare-fun b!58616 () Bool)

(declare-fun res!32659 () Bool)

(assert (=> b!58616 (=> (not res!32659) (not e!38565))))

(declare-fun valid!256 (LongMapFixedSize!616) Bool)

(assert (=> b!58616 (= res!32659 (valid!256 newMap!16))))

(declare-fun b!58617 () Bool)

(assert (=> b!58617 (= e!38572 tp_is_empty!2395)))

(declare-fun b!58618 () Bool)

(assert (=> b!58618 (= e!38570 tp_is_empty!2395)))

(declare-fun b!58619 () Bool)

(declare-fun res!32658 () Bool)

(assert (=> b!58619 (=> (not res!32658) (not e!38565))))

(assert (=> b!58619 (= res!32658 (and (bvsge from!355 #b00000000000000000000000000000000) (bvslt from!355 (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun mapIsEmpty!2868 () Bool)

(assert (=> mapIsEmpty!2868 mapRes!2868))

(declare-fun b!58620 () Bool)

(declare-fun e!38564 () Bool)

(assert (=> b!58620 (= e!38564 e!38577)))

(declare-fun res!32654 () Bool)

(assert (=> b!58620 (=> (not res!32654) (not e!38577))))

(declare-datatypes ((tuple2!2034 0))(
  ( (tuple2!2035 (_1!1028 Bool) (_2!1028 LongMapFixedSize!616)) )
))
(declare-fun lt!23591 () tuple2!2034)

(assert (=> b!58620 (= res!32654 (and (_1!1028 lt!23591) (bvsgt from!355 #b00000000000000000000000000000000)))))

(declare-fun lt!23592 () Unit!1550)

(assert (=> b!58620 (= lt!23592 e!38573)))

(declare-fun c!7406 () Bool)

(declare-datatypes ((tuple2!2036 0))(
  ( (tuple2!2037 (_1!1029 (_ BitVec 64)) (_2!1029 V!2841)) )
))
(declare-datatypes ((List!1437 0))(
  ( (Nil!1434) (Cons!1433 (h!2014 tuple2!2036) (t!4770 List!1437)) )
))
(declare-datatypes ((ListLongMap!1355 0))(
  ( (ListLongMap!1356 (toList!693 List!1437)) )
))
(declare-fun lt!23596 () ListLongMap!1355)

(declare-fun contains!682 (ListLongMap!1355 (_ BitVec 64)) Bool)

(assert (=> b!58620 (= c!7406 (contains!682 lt!23596 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(declare-fun update!84 (LongMapFixedSize!616 (_ BitVec 64) V!2841) tuple2!2034)

(declare-fun get!1073 (ValueCell!854 V!2841) V!2841)

(declare-fun dynLambda!308 (Int (_ BitVec 64)) V!2841)

(assert (=> b!58620 (= lt!23591 (update!84 newMap!16 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!58621 () Bool)

(declare-fun res!32655 () Bool)

(assert (=> b!58621 (=> (not res!32655) (not e!38565))))

(assert (=> b!58621 (= res!32655 (bvsge (bvadd #b00000000000000000000000000000001 (mask!5925 newMap!16)) (_size!357 (v!2377 (underlying!223 thiss!992)))))))

(declare-fun b!58622 () Bool)

(assert (=> b!58622 (= e!38565 e!38564)))

(declare-fun res!32660 () Bool)

(assert (=> b!58622 (=> (not res!32660) (not e!38564))))

(declare-fun lt!23594 () ListLongMap!1355)

(assert (=> b!58622 (= res!32660 (and (= lt!23594 lt!23596) (not (= (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun map!1103 (LongMapFixedSize!616) ListLongMap!1355)

(assert (=> b!58622 (= lt!23596 (map!1103 newMap!16))))

(declare-fun getCurrentListMap!389 (array!3697 array!3699 (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 (_ BitVec 32) Int) ListLongMap!1355)

(assert (=> b!58622 (= lt!23594 (getCurrentListMap!389 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (_values!2025 (v!2377 (underlying!223 thiss!992))) (mask!5925 (v!2377 (underlying!223 thiss!992))) (extraKeys!1929 (v!2377 (underlying!223 thiss!992))) (zeroValue!1958 (v!2377 (underlying!223 thiss!992))) (minValue!1958 (v!2377 (underlying!223 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2042 (v!2377 (underlying!223 thiss!992)))))))

(declare-fun b!58623 () Bool)

(assert (=> b!58623 (= e!38577 (and (= (size!2000 (_values!2025 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 (mask!5925 (v!2377 (underlying!223 thiss!992))))) (not (= (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (size!2000 (_values!2025 (v!2377 (underlying!223 thiss!992))))))))))

(assert (= (and start!8572 res!32657) b!58619))

(assert (= (and b!58619 res!32658) b!58616))

(assert (= (and b!58616 res!32659) b!58621))

(assert (= (and b!58621 res!32655) b!58622))

(assert (= (and b!58622 res!32660) b!58620))

(assert (= (and b!58620 c!7406) b!58609))

(assert (= (and b!58620 (not c!7406)) b!58611))

(assert (= (and b!58620 res!32654) b!58606))

(assert (= (and b!58606 res!32656) b!58623))

(assert (= (and b!58605 condMapEmpty!2868) mapIsEmpty!2868))

(assert (= (and b!58605 (not condMapEmpty!2868)) mapNonEmpty!2868))

(get-info :version)

(assert (= (and mapNonEmpty!2868 ((_ is ValueCellFull!854) mapValue!2868)) b!58614))

(assert (= (and b!58605 ((_ is ValueCellFull!854) mapDefault!2867)) b!58618))

(assert (= b!58610 b!58605))

(assert (= b!58613 b!58610))

(assert (= b!58612 b!58613))

(assert (= start!8572 b!58612))

(assert (= (and b!58608 condMapEmpty!2867) mapIsEmpty!2867))

(assert (= (and b!58608 (not condMapEmpty!2867)) mapNonEmpty!2867))

(assert (= (and mapNonEmpty!2867 ((_ is ValueCellFull!854) mapValue!2867)) b!58615))

(assert (= (and b!58608 ((_ is ValueCellFull!854) mapDefault!2868)) b!58617))

(assert (= b!58607 b!58608))

(assert (= start!8572 b!58607))

(declare-fun b_lambda!2579 () Bool)

(assert (=> (not b_lambda!2579) (not b!58620)))

(declare-fun t!4766 () Bool)

(declare-fun tb!1309 () Bool)

(assert (=> (and b!58610 (= (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) (defaultEntry!2042 (v!2377 (underlying!223 thiss!992)))) t!4766) tb!1309))

(declare-fun result!2361 () Bool)

(assert (=> tb!1309 (= result!2361 tp_is_empty!2395)))

(assert (=> b!58620 t!4766))

(declare-fun b_and!3545 () Bool)

(assert (= b_and!3541 (and (=> t!4766 result!2361) b_and!3545)))

(declare-fun tb!1311 () Bool)

(declare-fun t!4768 () Bool)

(assert (=> (and b!58607 (= (defaultEntry!2042 newMap!16) (defaultEntry!2042 (v!2377 (underlying!223 thiss!992)))) t!4768) tb!1311))

(declare-fun result!2365 () Bool)

(assert (= result!2365 result!2361))

(assert (=> b!58620 t!4768))

(declare-fun b_and!3547 () Bool)

(assert (= b_and!3543 (and (=> t!4768 result!2365) b_and!3547)))

(declare-fun m!50349 () Bool)

(assert (=> b!58609 m!50349))

(declare-fun m!50351 () Bool)

(assert (=> b!58609 m!50351))

(declare-fun m!50353 () Bool)

(assert (=> b!58609 m!50353))

(declare-fun m!50355 () Bool)

(assert (=> b!58609 m!50355))

(assert (=> b!58609 m!50353))

(assert (=> b!58609 m!50353))

(declare-fun m!50357 () Bool)

(assert (=> b!58609 m!50357))

(assert (=> b!58609 m!50353))

(declare-fun m!50359 () Bool)

(assert (=> b!58609 m!50359))

(declare-fun m!50361 () Bool)

(assert (=> b!58616 m!50361))

(declare-fun m!50363 () Bool)

(assert (=> start!8572 m!50363))

(declare-fun m!50365 () Bool)

(assert (=> b!58620 m!50365))

(declare-fun m!50367 () Bool)

(assert (=> b!58620 m!50367))

(declare-fun m!50369 () Bool)

(assert (=> b!58620 m!50369))

(assert (=> b!58620 m!50353))

(declare-fun m!50371 () Bool)

(assert (=> b!58620 m!50371))

(assert (=> b!58620 m!50353))

(assert (=> b!58620 m!50367))

(assert (=> b!58620 m!50353))

(assert (=> b!58620 m!50369))

(declare-fun m!50373 () Bool)

(assert (=> b!58620 m!50373))

(assert (=> b!58620 m!50365))

(declare-fun m!50375 () Bool)

(assert (=> mapNonEmpty!2867 m!50375))

(declare-fun m!50377 () Bool)

(assert (=> mapNonEmpty!2868 m!50377))

(declare-fun m!50379 () Bool)

(assert (=> b!58610 m!50379))

(declare-fun m!50381 () Bool)

(assert (=> b!58610 m!50381))

(declare-fun m!50383 () Bool)

(assert (=> b!58606 m!50383))

(declare-fun m!50385 () Bool)

(assert (=> b!58607 m!50385))

(declare-fun m!50387 () Bool)

(assert (=> b!58607 m!50387))

(assert (=> b!58622 m!50353))

(declare-fun m!50389 () Bool)

(assert (=> b!58622 m!50389))

(declare-fun m!50391 () Bool)

(assert (=> b!58622 m!50391))

(check-sat (not mapNonEmpty!2867) (not b!58610) (not mapNonEmpty!2868) (not b_next!1959) (not start!8572) (not b!58616) (not b!58609) (not b_next!1957) (not b!58622) tp_is_empty!2395 (not b!58606) b_and!3547 (not b!58620) b_and!3545 (not b_lambda!2579) (not b!58607))
(check-sat b_and!3545 b_and!3547 (not b_next!1957) (not b_next!1959))
(get-model)

(declare-fun b_lambda!2585 () Bool)

(assert (= b_lambda!2579 (or (and b!58610 b_free!1957) (and b!58607 b_free!1959 (= (defaultEntry!2042 newMap!16) (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))))) b_lambda!2585)))

(check-sat (not mapNonEmpty!2867) (not b!58610) (not mapNonEmpty!2868) (not b_next!1959) (not b!58607) (not start!8572) (not b!58616) (not b!58609) (not b_next!1957) (not b!58622) tp_is_empty!2395 (not b!58606) b_and!3547 (not b_lambda!2585) (not b!58620) b_and!3545)
(check-sat b_and!3545 b_and!3547 (not b_next!1957) (not b_next!1959))
(get-model)

(declare-fun d!11183 () Bool)

(assert (=> d!11183 (= (array_inv!1099 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvsge (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!58610 d!11183))

(declare-fun d!11185 () Bool)

(assert (=> d!11185 (= (array_inv!1100 (_values!2025 (v!2377 (underlying!223 thiss!992)))) (bvsge (size!2000 (_values!2025 (v!2377 (underlying!223 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!58610 d!11185))

(declare-fun d!11187 () Bool)

(assert (=> d!11187 (= (map!1103 newMap!16) (getCurrentListMap!389 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun bs!2550 () Bool)

(assert (= bs!2550 d!11187))

(declare-fun m!50481 () Bool)

(assert (=> bs!2550 m!50481))

(assert (=> b!58622 d!11187))

(declare-fun b!58786 () Bool)

(declare-fun e!38707 () Bool)

(declare-fun validKeyInArray!0 ((_ BitVec 64)) Bool)

(assert (=> b!58786 (= e!38707 (validKeyInArray!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun bm!4319 () Bool)

(declare-fun call!4328 () Bool)

(declare-fun lt!23704 () ListLongMap!1355)

(assert (=> bm!4319 (= call!4328 (contains!682 lt!23704 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58787 () Bool)

(declare-fun e!38705 () Unit!1550)

(declare-fun Unit!1557 () Unit!1550)

(assert (=> b!58787 (= e!38705 Unit!1557)))

(declare-fun b!58788 () Bool)

(declare-fun res!32724 () Bool)

(declare-fun e!38708 () Bool)

(assert (=> b!58788 (=> (not res!32724) (not e!38708))))

(declare-fun e!38706 () Bool)

(assert (=> b!58788 (= res!32724 e!38706)))

(declare-fun c!7425 () Bool)

(assert (=> b!58788 (= c!7425 (not (= (bvand (extraKeys!1929 (v!2377 (underlying!223 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!58789 () Bool)

(declare-fun e!38702 () ListLongMap!1355)

(declare-fun call!4325 () ListLongMap!1355)

(assert (=> b!58789 (= e!38702 call!4325)))

(declare-fun bm!4320 () Bool)

(declare-fun call!4324 () ListLongMap!1355)

(declare-fun call!4326 () ListLongMap!1355)

(assert (=> bm!4320 (= call!4324 call!4326)))

(declare-fun b!58791 () Bool)

(declare-fun e!38713 () Bool)

(declare-fun e!38701 () Bool)

(assert (=> b!58791 (= e!38713 e!38701)))

(declare-fun res!32727 () Bool)

(declare-fun call!4322 () Bool)

(assert (=> b!58791 (= res!32727 call!4322)))

(assert (=> b!58791 (=> (not res!32727) (not e!38701))))

(declare-fun b!58792 () Bool)

(assert (=> b!58792 (= e!38708 e!38713)))

(declare-fun c!7426 () Bool)

(assert (=> b!58792 (= c!7426 (not (= (bvand (extraKeys!1929 (v!2377 (underlying!223 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4321 () Bool)

(assert (=> bm!4321 (= call!4322 (contains!682 lt!23704 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4322 () Bool)

(declare-fun call!4327 () ListLongMap!1355)

(assert (=> bm!4322 (= call!4325 call!4327)))

(declare-fun b!58793 () Bool)

(declare-fun c!7429 () Bool)

(assert (=> b!58793 (= c!7429 (and (not (= (bvand (extraKeys!1929 (v!2377 (underlying!223 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1929 (v!2377 (underlying!223 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!38703 () ListLongMap!1355)

(assert (=> b!58793 (= e!38702 e!38703)))

(declare-fun b!58794 () Bool)

(declare-fun e!38711 () Bool)

(declare-fun apply!66 (ListLongMap!1355 (_ BitVec 64)) V!2841)

(assert (=> b!58794 (= e!38711 (= (apply!66 lt!23704 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))

(declare-fun b!58795 () Bool)

(declare-fun res!32721 () Bool)

(assert (=> b!58795 (=> (not res!32721) (not e!38708))))

(declare-fun e!38712 () Bool)

(assert (=> b!58795 (= res!32721 e!38712)))

(declare-fun res!32723 () Bool)

(assert (=> b!58795 (=> res!32723 e!38712)))

(assert (=> b!58795 (= res!32723 (not e!38707))))

(declare-fun res!32729 () Bool)

(assert (=> b!58795 (=> (not res!32729) (not e!38707))))

(assert (=> b!58795 (= res!32729 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992))))))))

(declare-fun b!58796 () Bool)

(declare-fun e!38710 () ListLongMap!1355)

(declare-fun +!81 (ListLongMap!1355 tuple2!2036) ListLongMap!1355)

(assert (=> b!58796 (= e!38710 (+!81 call!4327 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))

(declare-fun bm!4323 () Bool)

(declare-fun call!4323 () ListLongMap!1355)

(declare-fun getCurrentListMapNoExtraKeys!44 (array!3697 array!3699 (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 (_ BitVec 32) Int) ListLongMap!1355)

(assert (=> bm!4323 (= call!4323 (getCurrentListMapNoExtraKeys!44 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (_values!2025 (v!2377 (underlying!223 thiss!992))) (mask!5925 (v!2377 (underlying!223 thiss!992))) (extraKeys!1929 (v!2377 (underlying!223 thiss!992))) (zeroValue!1958 (v!2377 (underlying!223 thiss!992))) (minValue!1958 (v!2377 (underlying!223 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2042 (v!2377 (underlying!223 thiss!992)))))))

(declare-fun bm!4324 () Bool)

(declare-fun c!7428 () Bool)

(declare-fun c!7430 () Bool)

(assert (=> bm!4324 (= call!4327 (+!81 (ite c!7428 call!4323 (ite c!7430 call!4326 call!4324)) (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun b!58797 () Bool)

(assert (=> b!58797 (= e!38713 (not call!4322))))

(declare-fun b!58798 () Bool)

(assert (=> b!58798 (= e!38701 (= (apply!66 lt!23704 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))

(declare-fun e!38704 () Bool)

(declare-fun b!58799 () Bool)

(assert (=> b!58799 (= e!38704 (= (apply!66 lt!23704 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!58799 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2000 (_values!2025 (v!2377 (underlying!223 thiss!992))))))))

(assert (=> b!58799 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992))))))))

(declare-fun b!58790 () Bool)

(assert (=> b!58790 (= e!38712 e!38704)))

(declare-fun res!32726 () Bool)

(assert (=> b!58790 (=> (not res!32726) (not e!38704))))

(assert (=> b!58790 (= res!32726 (contains!682 lt!23704 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!58790 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992))))))))

(declare-fun d!11189 () Bool)

(assert (=> d!11189 e!38708))

(declare-fun res!32725 () Bool)

(assert (=> d!11189 (=> (not res!32725) (not e!38708))))

(assert (=> d!11189 (= res!32725 (or (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992))))) (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992))))))))))

(declare-fun lt!23698 () ListLongMap!1355)

(assert (=> d!11189 (= lt!23704 lt!23698)))

(declare-fun lt!23703 () Unit!1550)

(assert (=> d!11189 (= lt!23703 e!38705)))

(declare-fun c!7427 () Bool)

(declare-fun e!38709 () Bool)

(assert (=> d!11189 (= c!7427 e!38709)))

(declare-fun res!32728 () Bool)

(assert (=> d!11189 (=> (not res!32728) (not e!38709))))

(assert (=> d!11189 (= res!32728 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992))))))))

(assert (=> d!11189 (= lt!23698 e!38710)))

(assert (=> d!11189 (= c!7428 (and (not (= (bvand (extraKeys!1929 (v!2377 (underlying!223 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1929 (v!2377 (underlying!223 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11189 (validMask!0 (mask!5925 (v!2377 (underlying!223 thiss!992))))))

(assert (=> d!11189 (= (getCurrentListMap!389 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (_values!2025 (v!2377 (underlying!223 thiss!992))) (mask!5925 (v!2377 (underlying!223 thiss!992))) (extraKeys!1929 (v!2377 (underlying!223 thiss!992))) (zeroValue!1958 (v!2377 (underlying!223 thiss!992))) (minValue!1958 (v!2377 (underlying!223 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2042 (v!2377 (underlying!223 thiss!992)))) lt!23704)))

(declare-fun b!58800 () Bool)

(declare-fun lt!23692 () Unit!1550)

(assert (=> b!58800 (= e!38705 lt!23692)))

(declare-fun lt!23697 () ListLongMap!1355)

(assert (=> b!58800 (= lt!23697 (getCurrentListMapNoExtraKeys!44 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (_values!2025 (v!2377 (underlying!223 thiss!992))) (mask!5925 (v!2377 (underlying!223 thiss!992))) (extraKeys!1929 (v!2377 (underlying!223 thiss!992))) (zeroValue!1958 (v!2377 (underlying!223 thiss!992))) (minValue!1958 (v!2377 (underlying!223 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2042 (v!2377 (underlying!223 thiss!992)))))))

(declare-fun lt!23696 () (_ BitVec 64))

(assert (=> b!58800 (= lt!23696 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23695 () (_ BitVec 64))

(assert (=> b!58800 (= lt!23695 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!23688 () Unit!1550)

(declare-fun addStillContains!42 (ListLongMap!1355 (_ BitVec 64) V!2841 (_ BitVec 64)) Unit!1550)

(assert (=> b!58800 (= lt!23688 (addStillContains!42 lt!23697 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))) lt!23695))))

(assert (=> b!58800 (contains!682 (+!81 lt!23697 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))) lt!23695)))

(declare-fun lt!23699 () Unit!1550)

(assert (=> b!58800 (= lt!23699 lt!23688)))

(declare-fun lt!23702 () ListLongMap!1355)

(assert (=> b!58800 (= lt!23702 (getCurrentListMapNoExtraKeys!44 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (_values!2025 (v!2377 (underlying!223 thiss!992))) (mask!5925 (v!2377 (underlying!223 thiss!992))) (extraKeys!1929 (v!2377 (underlying!223 thiss!992))) (zeroValue!1958 (v!2377 (underlying!223 thiss!992))) (minValue!1958 (v!2377 (underlying!223 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2042 (v!2377 (underlying!223 thiss!992)))))))

(declare-fun lt!23684 () (_ BitVec 64))

(assert (=> b!58800 (= lt!23684 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23686 () (_ BitVec 64))

(assert (=> b!58800 (= lt!23686 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!23683 () Unit!1550)

(declare-fun addApplyDifferent!42 (ListLongMap!1355 (_ BitVec 64) V!2841 (_ BitVec 64)) Unit!1550)

(assert (=> b!58800 (= lt!23683 (addApplyDifferent!42 lt!23702 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992))) lt!23686))))

(assert (=> b!58800 (= (apply!66 (+!81 lt!23702 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) lt!23686) (apply!66 lt!23702 lt!23686))))

(declare-fun lt!23691 () Unit!1550)

(assert (=> b!58800 (= lt!23691 lt!23683)))

(declare-fun lt!23690 () ListLongMap!1355)

(assert (=> b!58800 (= lt!23690 (getCurrentListMapNoExtraKeys!44 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (_values!2025 (v!2377 (underlying!223 thiss!992))) (mask!5925 (v!2377 (underlying!223 thiss!992))) (extraKeys!1929 (v!2377 (underlying!223 thiss!992))) (zeroValue!1958 (v!2377 (underlying!223 thiss!992))) (minValue!1958 (v!2377 (underlying!223 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2042 (v!2377 (underlying!223 thiss!992)))))))

(declare-fun lt!23687 () (_ BitVec 64))

(assert (=> b!58800 (= lt!23687 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23694 () (_ BitVec 64))

(assert (=> b!58800 (= lt!23694 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!23689 () Unit!1550)

(assert (=> b!58800 (= lt!23689 (addApplyDifferent!42 lt!23690 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))) lt!23694))))

(assert (=> b!58800 (= (apply!66 (+!81 lt!23690 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))) lt!23694) (apply!66 lt!23690 lt!23694))))

(declare-fun lt!23701 () Unit!1550)

(assert (=> b!58800 (= lt!23701 lt!23689)))

(declare-fun lt!23700 () ListLongMap!1355)

(assert (=> b!58800 (= lt!23700 (getCurrentListMapNoExtraKeys!44 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (_values!2025 (v!2377 (underlying!223 thiss!992))) (mask!5925 (v!2377 (underlying!223 thiss!992))) (extraKeys!1929 (v!2377 (underlying!223 thiss!992))) (zeroValue!1958 (v!2377 (underlying!223 thiss!992))) (minValue!1958 (v!2377 (underlying!223 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2042 (v!2377 (underlying!223 thiss!992)))))))

(declare-fun lt!23693 () (_ BitVec 64))

(assert (=> b!58800 (= lt!23693 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23685 () (_ BitVec 64))

(assert (=> b!58800 (= lt!23685 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!58800 (= lt!23692 (addApplyDifferent!42 lt!23700 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992))) lt!23685))))

(assert (=> b!58800 (= (apply!66 (+!81 lt!23700 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) lt!23685) (apply!66 lt!23700 lt!23685))))

(declare-fun b!58801 () Bool)

(assert (=> b!58801 (= e!38709 (validKeyInArray!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!58802 () Bool)

(assert (=> b!58802 (= e!38706 e!38711)))

(declare-fun res!32722 () Bool)

(assert (=> b!58802 (= res!32722 call!4328)))

(assert (=> b!58802 (=> (not res!32722) (not e!38711))))

(declare-fun b!58803 () Bool)

(assert (=> b!58803 (= e!38710 e!38702)))

(assert (=> b!58803 (= c!7430 (and (not (= (bvand (extraKeys!1929 (v!2377 (underlying!223 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1929 (v!2377 (underlying!223 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!58804 () Bool)

(assert (=> b!58804 (= e!38703 call!4325)))

(declare-fun b!58805 () Bool)

(assert (=> b!58805 (= e!38706 (not call!4328))))

(declare-fun b!58806 () Bool)

(assert (=> b!58806 (= e!38703 call!4324)))

(declare-fun bm!4325 () Bool)

(assert (=> bm!4325 (= call!4326 call!4323)))

(assert (= (and d!11189 c!7428) b!58796))

(assert (= (and d!11189 (not c!7428)) b!58803))

(assert (= (and b!58803 c!7430) b!58789))

(assert (= (and b!58803 (not c!7430)) b!58793))

(assert (= (and b!58793 c!7429) b!58804))

(assert (= (and b!58793 (not c!7429)) b!58806))

(assert (= (or b!58804 b!58806) bm!4320))

(assert (= (or b!58789 bm!4320) bm!4325))

(assert (= (or b!58789 b!58804) bm!4322))

(assert (= (or b!58796 bm!4325) bm!4323))

(assert (= (or b!58796 bm!4322) bm!4324))

(assert (= (and d!11189 res!32728) b!58801))

(assert (= (and d!11189 c!7427) b!58800))

(assert (= (and d!11189 (not c!7427)) b!58787))

(assert (= (and d!11189 res!32725) b!58795))

(assert (= (and b!58795 res!32729) b!58786))

(assert (= (and b!58795 (not res!32723)) b!58790))

(assert (= (and b!58790 res!32726) b!58799))

(assert (= (and b!58795 res!32721) b!58788))

(assert (= (and b!58788 c!7425) b!58802))

(assert (= (and b!58788 (not c!7425)) b!58805))

(assert (= (and b!58802 res!32722) b!58794))

(assert (= (or b!58802 b!58805) bm!4319))

(assert (= (and b!58788 res!32724) b!58792))

(assert (= (and b!58792 c!7426) b!58791))

(assert (= (and b!58792 (not c!7426)) b!58797))

(assert (= (and b!58791 res!32727) b!58798))

(assert (= (or b!58791 b!58797) bm!4321))

(declare-fun b_lambda!2587 () Bool)

(assert (=> (not b_lambda!2587) (not b!58799)))

(assert (=> b!58799 t!4766))

(declare-fun b_and!3565 () Bool)

(assert (= b_and!3545 (and (=> t!4766 result!2361) b_and!3565)))

(assert (=> b!58799 t!4768))

(declare-fun b_and!3567 () Bool)

(assert (= b_and!3547 (and (=> t!4768 result!2365) b_and!3567)))

(declare-fun m!50483 () Bool)

(assert (=> b!58798 m!50483))

(assert (=> d!11189 m!50383))

(declare-fun m!50485 () Bool)

(assert (=> b!58801 m!50485))

(assert (=> b!58801 m!50485))

(declare-fun m!50487 () Bool)

(assert (=> b!58801 m!50487))

(declare-fun m!50489 () Bool)

(assert (=> bm!4319 m!50489))

(assert (=> b!58786 m!50485))

(assert (=> b!58786 m!50485))

(assert (=> b!58786 m!50487))

(declare-fun m!50491 () Bool)

(assert (=> b!58800 m!50491))

(declare-fun m!50493 () Bool)

(assert (=> b!58800 m!50493))

(declare-fun m!50495 () Bool)

(assert (=> b!58800 m!50495))

(declare-fun m!50497 () Bool)

(assert (=> b!58800 m!50497))

(declare-fun m!50499 () Bool)

(assert (=> b!58800 m!50499))

(declare-fun m!50501 () Bool)

(assert (=> b!58800 m!50501))

(declare-fun m!50503 () Bool)

(assert (=> b!58800 m!50503))

(declare-fun m!50505 () Bool)

(assert (=> b!58800 m!50505))

(assert (=> b!58800 m!50485))

(declare-fun m!50507 () Bool)

(assert (=> b!58800 m!50507))

(declare-fun m!50509 () Bool)

(assert (=> b!58800 m!50509))

(declare-fun m!50511 () Bool)

(assert (=> b!58800 m!50511))

(assert (=> b!58800 m!50491))

(declare-fun m!50513 () Bool)

(assert (=> b!58800 m!50513))

(declare-fun m!50515 () Bool)

(assert (=> b!58800 m!50515))

(declare-fun m!50517 () Bool)

(assert (=> b!58800 m!50517))

(assert (=> b!58800 m!50501))

(declare-fun m!50519 () Bool)

(assert (=> b!58800 m!50519))

(assert (=> b!58800 m!50513))

(assert (=> b!58800 m!50507))

(declare-fun m!50521 () Bool)

(assert (=> b!58800 m!50521))

(assert (=> b!58799 m!50485))

(declare-fun m!50523 () Bool)

(assert (=> b!58799 m!50523))

(assert (=> b!58799 m!50367))

(declare-fun m!50525 () Bool)

(assert (=> b!58799 m!50525))

(assert (=> b!58799 m!50367))

(declare-fun m!50527 () Bool)

(assert (=> b!58799 m!50527))

(assert (=> b!58799 m!50525))

(assert (=> b!58799 m!50485))

(assert (=> bm!4323 m!50519))

(assert (=> b!58790 m!50485))

(assert (=> b!58790 m!50485))

(declare-fun m!50529 () Bool)

(assert (=> b!58790 m!50529))

(declare-fun m!50531 () Bool)

(assert (=> b!58794 m!50531))

(declare-fun m!50533 () Bool)

(assert (=> b!58796 m!50533))

(declare-fun m!50535 () Bool)

(assert (=> bm!4324 m!50535))

(declare-fun m!50537 () Bool)

(assert (=> bm!4321 m!50537))

(assert (=> b!58622 d!11189))

(declare-fun d!11191 () Bool)

(assert (=> d!11191 (= (validMask!0 (mask!5925 (v!2377 (underlying!223 thiss!992)))) (and (or (= (mask!5925 (v!2377 (underlying!223 thiss!992))) #b00000000000000000000000000000111) (= (mask!5925 (v!2377 (underlying!223 thiss!992))) #b00000000000000000000000000001111) (= (mask!5925 (v!2377 (underlying!223 thiss!992))) #b00000000000000000000000000011111) (= (mask!5925 (v!2377 (underlying!223 thiss!992))) #b00000000000000000000000000111111) (= (mask!5925 (v!2377 (underlying!223 thiss!992))) #b00000000000000000000000001111111) (= (mask!5925 (v!2377 (underlying!223 thiss!992))) #b00000000000000000000000011111111) (= (mask!5925 (v!2377 (underlying!223 thiss!992))) #b00000000000000000000000111111111) (= (mask!5925 (v!2377 (underlying!223 thiss!992))) #b00000000000000000000001111111111) (= (mask!5925 (v!2377 (underlying!223 thiss!992))) #b00000000000000000000011111111111) (= (mask!5925 (v!2377 (underlying!223 thiss!992))) #b00000000000000000000111111111111) (= (mask!5925 (v!2377 (underlying!223 thiss!992))) #b00000000000000000001111111111111) (= (mask!5925 (v!2377 (underlying!223 thiss!992))) #b00000000000000000011111111111111) (= (mask!5925 (v!2377 (underlying!223 thiss!992))) #b00000000000000000111111111111111) (= (mask!5925 (v!2377 (underlying!223 thiss!992))) #b00000000000000001111111111111111) (= (mask!5925 (v!2377 (underlying!223 thiss!992))) #b00000000000000011111111111111111) (= (mask!5925 (v!2377 (underlying!223 thiss!992))) #b00000000000000111111111111111111) (= (mask!5925 (v!2377 (underlying!223 thiss!992))) #b00000000000001111111111111111111) (= (mask!5925 (v!2377 (underlying!223 thiss!992))) #b00000000000011111111111111111111) (= (mask!5925 (v!2377 (underlying!223 thiss!992))) #b00000000000111111111111111111111) (= (mask!5925 (v!2377 (underlying!223 thiss!992))) #b00000000001111111111111111111111) (= (mask!5925 (v!2377 (underlying!223 thiss!992))) #b00000000011111111111111111111111) (= (mask!5925 (v!2377 (underlying!223 thiss!992))) #b00000000111111111111111111111111) (= (mask!5925 (v!2377 (underlying!223 thiss!992))) #b00000001111111111111111111111111) (= (mask!5925 (v!2377 (underlying!223 thiss!992))) #b00000011111111111111111111111111) (= (mask!5925 (v!2377 (underlying!223 thiss!992))) #b00000111111111111111111111111111) (= (mask!5925 (v!2377 (underlying!223 thiss!992))) #b00001111111111111111111111111111) (= (mask!5925 (v!2377 (underlying!223 thiss!992))) #b00011111111111111111111111111111) (= (mask!5925 (v!2377 (underlying!223 thiss!992))) #b00111111111111111111111111111111)) (bvsle (mask!5925 (v!2377 (underlying!223 thiss!992))) #b00111111111111111111111111111111)))))

(assert (=> b!58606 d!11191))

(declare-fun d!11193 () Bool)

(assert (=> d!11193 (= (array_inv!1099 (_keys!3665 newMap!16)) (bvsge (size!1999 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!58607 d!11193))

(declare-fun d!11195 () Bool)

(assert (=> d!11195 (= (array_inv!1100 (_values!2025 newMap!16)) (bvsge (size!2000 (_values!2025 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!58607 d!11195))

(declare-fun d!11197 () Bool)

(assert (=> d!11197 (= (valid!255 thiss!992) (valid!256 (v!2377 (underlying!223 thiss!992))))))

(declare-fun bs!2551 () Bool)

(assert (= bs!2551 d!11197))

(declare-fun m!50539 () Bool)

(assert (=> bs!2551 m!50539))

(assert (=> start!8572 d!11197))

(declare-fun d!11199 () Bool)

(declare-fun res!32736 () Bool)

(declare-fun e!38716 () Bool)

(assert (=> d!11199 (=> (not res!32736) (not e!38716))))

(declare-fun simpleValid!42 (LongMapFixedSize!616) Bool)

(assert (=> d!11199 (= res!32736 (simpleValid!42 newMap!16))))

(assert (=> d!11199 (= (valid!256 newMap!16) e!38716)))

(declare-fun b!58813 () Bool)

(declare-fun res!32737 () Bool)

(assert (=> b!58813 (=> (not res!32737) (not e!38716))))

(declare-fun arrayCountValidKeys!0 (array!3697 (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!58813 (= res!32737 (= (arrayCountValidKeys!0 (_keys!3665 newMap!16) #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))) (_size!357 newMap!16)))))

(declare-fun b!58814 () Bool)

(declare-fun res!32738 () Bool)

(assert (=> b!58814 (=> (not res!32738) (not e!38716))))

(declare-fun arrayForallSeekEntryOrOpenFound!0 ((_ BitVec 32) array!3697 (_ BitVec 32)) Bool)

(assert (=> b!58814 (= res!32738 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3665 newMap!16) (mask!5925 newMap!16)))))

(declare-fun b!58815 () Bool)

(assert (=> b!58815 (= e!38716 (arrayNoDuplicates!0 (_keys!3665 newMap!16) #b00000000000000000000000000000000 Nil!1433))))

(assert (= (and d!11199 res!32736) b!58813))

(assert (= (and b!58813 res!32737) b!58814))

(assert (= (and b!58814 res!32738) b!58815))

(declare-fun m!50541 () Bool)

(assert (=> d!11199 m!50541))

(declare-fun m!50543 () Bool)

(assert (=> b!58813 m!50543))

(declare-fun m!50545 () Bool)

(assert (=> b!58814 m!50545))

(declare-fun m!50547 () Bool)

(assert (=> b!58815 m!50547))

(assert (=> b!58616 d!11199))

(declare-fun d!11201 () Bool)

(declare-fun e!38722 () Bool)

(assert (=> d!11201 e!38722))

(declare-fun res!32741 () Bool)

(assert (=> d!11201 (=> res!32741 e!38722)))

(declare-fun lt!23713 () Bool)

(assert (=> d!11201 (= res!32741 (not lt!23713))))

(declare-fun lt!23715 () Bool)

(assert (=> d!11201 (= lt!23713 lt!23715)))

(declare-fun lt!23714 () Unit!1550)

(declare-fun e!38721 () Unit!1550)

(assert (=> d!11201 (= lt!23714 e!38721)))

(declare-fun c!7433 () Bool)

(assert (=> d!11201 (= c!7433 lt!23715)))

(declare-fun containsKey!126 (List!1437 (_ BitVec 64)) Bool)

(assert (=> d!11201 (= lt!23715 (containsKey!126 (toList!693 lt!23596) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(assert (=> d!11201 (= (contains!682 lt!23596 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) lt!23713)))

(declare-fun b!58822 () Bool)

(declare-fun lt!23716 () Unit!1550)

(assert (=> b!58822 (= e!38721 lt!23716)))

(declare-fun lemmaContainsKeyImpliesGetValueByKeyDefined!75 (List!1437 (_ BitVec 64)) Unit!1550)

(assert (=> b!58822 (= lt!23716 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 lt!23596) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(declare-datatypes ((Option!128 0))(
  ( (Some!127 (v!2382 V!2841)) (None!126) )
))
(declare-fun isDefined!76 (Option!128) Bool)

(declare-fun getValueByKey!122 (List!1437 (_ BitVec 64)) Option!128)

(assert (=> b!58822 (isDefined!76 (getValueByKey!122 (toList!693 lt!23596) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(declare-fun b!58823 () Bool)

(declare-fun Unit!1558 () Unit!1550)

(assert (=> b!58823 (= e!38721 Unit!1558)))

(declare-fun b!58824 () Bool)

(assert (=> b!58824 (= e!38722 (isDefined!76 (getValueByKey!122 (toList!693 lt!23596) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355))))))

(assert (= (and d!11201 c!7433) b!58822))

(assert (= (and d!11201 (not c!7433)) b!58823))

(assert (= (and d!11201 (not res!32741)) b!58824))

(assert (=> d!11201 m!50353))

(declare-fun m!50549 () Bool)

(assert (=> d!11201 m!50549))

(assert (=> b!58822 m!50353))

(declare-fun m!50551 () Bool)

(assert (=> b!58822 m!50551))

(assert (=> b!58822 m!50353))

(declare-fun m!50553 () Bool)

(assert (=> b!58822 m!50553))

(assert (=> b!58822 m!50553))

(declare-fun m!50555 () Bool)

(assert (=> b!58822 m!50555))

(assert (=> b!58824 m!50353))

(assert (=> b!58824 m!50553))

(assert (=> b!58824 m!50553))

(assert (=> b!58824 m!50555))

(assert (=> b!58620 d!11201))

(declare-fun b!58909 () Bool)

(declare-fun e!38783 () Bool)

(declare-fun call!4392 () Bool)

(assert (=> b!58909 (= e!38783 (not call!4392))))

(declare-datatypes ((SeekEntryResult!230 0))(
  ( (MissingZero!230 (index!3043 (_ BitVec 32))) (Found!230 (index!3044 (_ BitVec 32))) (Intermediate!230 (undefined!1042 Bool) (index!3045 (_ BitVec 32)) (x!10005 (_ BitVec 32))) (Undefined!230) (MissingVacant!230 (index!3046 (_ BitVec 32))) )
))
(declare-fun call!4397 () SeekEntryResult!230)

(declare-fun bm!4374 () Bool)

(declare-fun seekEntryOrOpen!0 ((_ BitVec 64) array!3697 (_ BitVec 32)) SeekEntryResult!230)

(assert (=> bm!4374 (= call!4397 (seekEntryOrOpen!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (_keys!3665 newMap!16) (mask!5925 newMap!16)))))

(declare-fun b!58910 () Bool)

(declare-fun e!38787 () Bool)

(declare-fun e!38771 () Bool)

(assert (=> b!58910 (= e!38787 e!38771)))

(declare-fun res!32770 () Bool)

(declare-fun call!4385 () Bool)

(assert (=> b!58910 (= res!32770 call!4385)))

(assert (=> b!58910 (=> (not res!32770) (not e!38771))))

(declare-fun b!58911 () Bool)

(declare-fun e!38784 () Bool)

(declare-fun e!38786 () Bool)

(assert (=> b!58911 (= e!38784 e!38786)))

(declare-fun call!4382 () ListLongMap!1355)

(declare-fun res!32781 () Bool)

(assert (=> b!58911 (= res!32781 (contains!682 call!4382 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(assert (=> b!58911 (=> (not res!32781) (not e!38786))))

(declare-fun e!38785 () Bool)

(declare-fun b!58912 () Bool)

(declare-fun lt!23777 () SeekEntryResult!230)

(assert (=> b!58912 (= e!38785 (= (select (arr!1768 (_keys!3665 newMap!16)) (index!3044 lt!23777)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(declare-fun b!58913 () Bool)

(declare-fun res!32774 () Bool)

(declare-fun call!4394 () Bool)

(assert (=> b!58913 (= res!32774 call!4394)))

(declare-fun e!38773 () Bool)

(assert (=> b!58913 (=> (not res!32774) (not e!38773))))

(declare-fun b!58914 () Bool)

(declare-fun c!7475 () Bool)

(declare-fun lt!23771 () SeekEntryResult!230)

(assert (=> b!58914 (= c!7475 ((_ is MissingVacant!230) lt!23771))))

(declare-fun e!38788 () Bool)

(assert (=> b!58914 (= e!38788 e!38787)))

(declare-fun call!4384 () ListLongMap!1355)

(declare-fun c!7466 () Bool)

(declare-fun lt!23781 () (_ BitVec 32))

(declare-fun lt!23792 () array!3699)

(declare-fun bm!4375 () Bool)

(declare-fun c!7465 () Bool)

(assert (=> bm!4375 (= call!4384 (getCurrentListMap!389 (_keys!3665 newMap!16) (ite c!7466 (_values!2025 newMap!16) lt!23792) (mask!5925 newMap!16) (ite (and c!7466 c!7465) lt!23781 (extraKeys!1929 newMap!16)) (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun b!58915 () Bool)

(declare-fun e!38779 () Bool)

(declare-fun call!4399 () Bool)

(assert (=> b!58915 (= e!38779 (not call!4399))))

(declare-fun bm!4376 () Bool)

(declare-fun call!4391 () ListLongMap!1355)

(declare-fun call!4386 () ListLongMap!1355)

(assert (=> bm!4376 (= call!4391 call!4386)))

(declare-fun bm!4377 () Bool)

(declare-fun call!4398 () ListLongMap!1355)

(assert (=> bm!4377 (= call!4398 call!4384)))

(declare-fun b!58916 () Bool)

(declare-fun res!32779 () Bool)

(assert (=> b!58916 (= res!32779 (= (select (arr!1768 (_keys!3665 newMap!16)) (index!3046 lt!23771)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!58916 (=> (not res!32779) (not e!38771))))

(declare-fun bm!4378 () Bool)

(declare-fun call!4389 () Bool)

(assert (=> bm!4378 (= call!4392 call!4389)))

(declare-fun b!58917 () Bool)

(declare-fun res!32772 () Bool)

(declare-fun lt!23779 () SeekEntryResult!230)

(assert (=> b!58917 (= res!32772 (= (select (arr!1768 (_keys!3665 newMap!16)) (index!3046 lt!23779)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!58917 (=> (not res!32772) (not e!38779))))

(declare-fun b!58918 () Bool)

(declare-fun lt!23788 () SeekEntryResult!230)

(assert (=> b!58918 (= e!38773 (= (select (arr!1768 (_keys!3665 newMap!16)) (index!3044 lt!23788)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(declare-fun b!58919 () Bool)

(declare-fun res!32782 () Bool)

(assert (=> b!58919 (=> (not res!32782) (not e!38783))))

(assert (=> b!58919 (= res!32782 (= (select (arr!1768 (_keys!3665 newMap!16)) (index!3043 lt!23771)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58920 () Bool)

(declare-fun lt!23793 () Unit!1550)

(declare-fun e!38775 () Unit!1550)

(assert (=> b!58920 (= lt!23793 e!38775)))

(declare-fun c!7472 () Bool)

(declare-fun call!4383 () Bool)

(assert (=> b!58920 (= c!7472 call!4383)))

(declare-fun e!38768 () tuple2!2034)

(assert (=> b!58920 (= e!38768 (tuple2!2035 false newMap!16))))

(declare-fun bm!4379 () Bool)

(declare-fun call!4381 () Unit!1550)

(declare-fun lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!15 (array!3697 array!3699 (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 (_ BitVec 64) Int) Unit!1550)

(assert (=> bm!4379 (= call!4381 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!15 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (defaultEntry!2042 newMap!16)))))

(declare-fun bm!4380 () Bool)

(declare-fun call!4396 () Unit!1550)

(declare-fun lemmaInListMapThenSeekEntryOrOpenFindsIt!15 (array!3697 array!3699 (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 (_ BitVec 64) Int) Unit!1550)

(assert (=> bm!4380 (= call!4396 (lemmaInListMapThenSeekEntryOrOpenFindsIt!15 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (defaultEntry!2042 newMap!16)))))

(declare-fun b!58921 () Bool)

(declare-fun e!38774 () tuple2!2034)

(declare-fun lt!23775 () tuple2!2034)

(assert (=> b!58921 (= e!38774 (tuple2!2035 (_1!1028 lt!23775) (_2!1028 lt!23775)))))

(declare-fun call!4378 () tuple2!2034)

(assert (=> b!58921 (= lt!23775 call!4378)))

(declare-fun b!58922 () Bool)

(declare-fun e!38772 () Bool)

(assert (=> b!58922 (= e!38772 e!38779)))

(declare-fun res!32780 () Bool)

(declare-fun call!4400 () Bool)

(assert (=> b!58922 (= res!32780 call!4400)))

(assert (=> b!58922 (=> (not res!32780) (not e!38779))))

(declare-fun b!58923 () Bool)

(declare-fun res!32771 () Bool)

(assert (=> b!58923 (=> (not res!32771) (not e!38783))))

(assert (=> b!58923 (= res!32771 call!4385)))

(assert (=> b!58923 (= e!38788 e!38783)))

(declare-fun bm!4381 () Bool)

(declare-fun call!4388 () ListLongMap!1355)

(declare-fun call!4379 () ListLongMap!1355)

(assert (=> bm!4381 (= call!4388 call!4379)))

(declare-fun bm!4382 () Bool)

(assert (=> bm!4382 (= call!4389 (arrayContainsKey!0 (_keys!3665 newMap!16) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun c!7471 () Bool)

(declare-fun c!7473 () Bool)

(declare-fun bm!4383 () Bool)

(declare-fun c!7462 () Bool)

(declare-fun call!4390 () Bool)

(declare-fun c!7469 () Bool)

(declare-fun inRange!0 ((_ BitVec 32) (_ BitVec 32)) Bool)

(assert (=> bm!4383 (= call!4390 (inRange!0 (ite c!7462 (ite c!7472 (index!3044 lt!23788) (ite c!7471 (index!3043 lt!23771) (index!3046 lt!23771))) (ite c!7469 (index!3044 lt!23777) (ite c!7473 (index!3043 lt!23779) (index!3046 lt!23779)))) (mask!5925 newMap!16)))))

(declare-fun b!58924 () Bool)

(declare-fun call!4377 () ListLongMap!1355)

(assert (=> b!58924 (= e!38784 (= call!4382 call!4377))))

(declare-fun bm!4384 () Bool)

(declare-fun c!7464 () Bool)

(declare-fun lt!23774 () SeekEntryResult!230)

(declare-fun updateHelperNewKey!15 (LongMapFixedSize!616 (_ BitVec 64) V!2841 (_ BitVec 32)) tuple2!2034)

(assert (=> bm!4384 (= call!4378 (updateHelperNewKey!15 newMap!16 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774))))))

(declare-fun b!58925 () Bool)

(declare-fun lt!23778 () Unit!1550)

(declare-fun lt!23797 () Unit!1550)

(assert (=> b!58925 (= lt!23778 lt!23797)))

(declare-fun call!4393 () ListLongMap!1355)

(assert (=> b!58925 (= call!4388 call!4393)))

(declare-fun lt!23782 () (_ BitVec 32))

(declare-fun lemmaChangeLongMinValueKeyThenAddPairToListMap!15 (array!3697 array!3699 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 V!2841 Int) Unit!1550)

(assert (=> b!58925 (= lt!23797 (lemmaChangeLongMinValueKeyThenAddPairToListMap!15 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) lt!23782 (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2042 newMap!16)))))

(assert (=> b!58925 (= lt!23782 (bvor (extraKeys!1929 newMap!16) #b00000000000000000000000000000010))))

(declare-fun e!38777 () tuple2!2034)

(assert (=> b!58925 (= e!38777 (tuple2!2035 true (LongMapFixedSize!617 (defaultEntry!2042 newMap!16) (mask!5925 newMap!16) (bvor (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) (zeroValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (_size!357 newMap!16) (_keys!3665 newMap!16) (_values!2025 newMap!16) (_vacant!357 newMap!16))))))

(declare-fun b!58926 () Bool)

(assert (=> b!58926 (= e!38771 (not call!4392))))

(declare-fun bm!4385 () Bool)

(assert (=> bm!4385 (= call!4385 call!4394)))

(declare-fun b!58927 () Bool)

(declare-fun e!38767 () Unit!1550)

(declare-fun lt!23785 () Unit!1550)

(assert (=> b!58927 (= e!38767 lt!23785)))

(assert (=> b!58927 (= lt!23785 call!4396)))

(declare-fun call!4387 () SeekEntryResult!230)

(assert (=> b!58927 (= lt!23777 call!4387)))

(declare-fun res!32776 () Bool)

(assert (=> b!58927 (= res!32776 ((_ is Found!230) lt!23777))))

(assert (=> b!58927 (=> (not res!32776) (not e!38785))))

(assert (=> b!58927 e!38785))

(declare-fun b!58928 () Bool)

(declare-fun res!32775 () Bool)

(declare-fun e!38776 () Bool)

(assert (=> b!58928 (=> (not res!32775) (not e!38776))))

(assert (=> b!58928 (= res!32775 call!4400)))

(declare-fun e!38781 () Bool)

(assert (=> b!58928 (= e!38781 e!38776)))

(declare-fun b!58929 () Bool)

(assert (=> b!58929 (= e!38787 ((_ is Undefined!230) lt!23771))))

(declare-fun bm!4386 () Bool)

(declare-fun c!7463 () Bool)

(assert (=> bm!4386 (= c!7463 c!7462)))

(declare-fun e!38780 () ListLongMap!1355)

(assert (=> bm!4386 (= call!4383 (contains!682 e!38780 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(declare-fun b!58930 () Bool)

(declare-fun res!32778 () Bool)

(declare-fun call!4380 () Bool)

(assert (=> b!58930 (= res!32778 call!4380)))

(assert (=> b!58930 (=> (not res!32778) (not e!38785))))

(declare-fun bm!4387 () Bool)

(declare-fun call!4395 () SeekEntryResult!230)

(assert (=> bm!4387 (= call!4395 call!4397)))

(declare-fun b!58931 () Bool)

(declare-fun e!38770 () tuple2!2034)

(assert (=> b!58931 (= e!38770 e!38777)))

(assert (=> b!58931 (= c!7465 (= (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58932 () Bool)

(declare-fun e!38782 () ListLongMap!1355)

(assert (=> b!58932 (= e!38782 (getCurrentListMap!389 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun bm!4388 () Bool)

(declare-fun lt!23773 () tuple2!2034)

(assert (=> bm!4388 (= call!4382 (map!1103 (_2!1028 lt!23773)))))

(declare-fun bm!4389 () Bool)

(assert (=> bm!4389 (= call!4393 call!4386)))

(declare-fun bm!4390 () Bool)

(assert (=> bm!4390 (= call!4380 call!4390)))

(declare-fun b!58933 () Bool)

(declare-fun Unit!1559 () Unit!1550)

(assert (=> b!58933 (= e!38775 Unit!1559)))

(declare-fun lt!23794 () Unit!1550)

(assert (=> b!58933 (= lt!23794 call!4396)))

(assert (=> b!58933 (= lt!23788 call!4395)))

(declare-fun res!32777 () Bool)

(assert (=> b!58933 (= res!32777 ((_ is Found!230) lt!23788))))

(assert (=> b!58933 (=> (not res!32777) (not e!38773))))

(assert (=> b!58933 e!38773))

(declare-fun lt!23783 () Unit!1550)

(assert (=> b!58933 (= lt!23783 lt!23794)))

(assert (=> b!58933 false))

(declare-fun b!58934 () Bool)

(declare-fun res!32773 () Bool)

(assert (=> b!58934 (=> (not res!32773) (not e!38776))))

(assert (=> b!58934 (= res!32773 (= (select (arr!1768 (_keys!3665 newMap!16)) (index!3043 lt!23779)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!58935 () Bool)

(declare-fun lt!23791 () Unit!1550)

(declare-fun lt!23795 () Unit!1550)

(assert (=> b!58935 (= lt!23791 lt!23795)))

(assert (=> b!58935 (contains!682 call!4384 (select (arr!1768 (_keys!3665 newMap!16)) (index!3044 lt!23774)))))

(declare-fun lemmaValidKeyInArrayIsInListMap!74 (array!3697 array!3699 (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 (_ BitVec 32) Int) Unit!1550)

(assert (=> b!58935 (= lt!23795 (lemmaValidKeyInArrayIsInListMap!74 (_keys!3665 newMap!16) lt!23792 (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (index!3044 lt!23774) (defaultEntry!2042 newMap!16)))))

(assert (=> b!58935 (= lt!23792 (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (index!3044 lt!23774) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16))))))

(declare-fun lt!23780 () Unit!1550)

(declare-fun lt!23787 () Unit!1550)

(assert (=> b!58935 (= lt!23780 lt!23787)))

(assert (=> b!58935 (= call!4379 call!4391)))

(declare-fun lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!15 (array!3697 array!3699 (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 (_ BitVec 32) (_ BitVec 64) V!2841 Int) Unit!1550)

(assert (=> b!58935 (= lt!23787 (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!15 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (index!3044 lt!23774) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2042 newMap!16)))))

(declare-fun lt!23772 () Unit!1550)

(assert (=> b!58935 (= lt!23772 e!38767)))

(assert (=> b!58935 (= c!7469 call!4383)))

(declare-fun e!38769 () tuple2!2034)

(assert (=> b!58935 (= e!38769 (tuple2!2035 true (LongMapFixedSize!617 (defaultEntry!2042 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (_size!357 newMap!16) (_keys!3665 newMap!16) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (index!3044 lt!23774) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16))) (_vacant!357 newMap!16))))))

(declare-fun bm!4391 () Bool)

(assert (=> bm!4391 (= call!4387 call!4397)))

(declare-fun bm!4392 () Bool)

(assert (=> bm!4392 (= call!4394 call!4390)))

(declare-fun b!58936 () Bool)

(declare-fun Unit!1560 () Unit!1550)

(assert (=> b!58936 (= e!38767 Unit!1560)))

(declare-fun lt!23784 () Unit!1550)

(assert (=> b!58936 (= lt!23784 call!4381)))

(assert (=> b!58936 (= lt!23779 call!4387)))

(assert (=> b!58936 (= c!7473 ((_ is MissingZero!230) lt!23779))))

(assert (=> b!58936 e!38781))

(declare-fun lt!23789 () Unit!1550)

(assert (=> b!58936 (= lt!23789 lt!23784)))

(assert (=> b!58936 false))

(declare-fun b!58937 () Bool)

(declare-fun e!38778 () Bool)

(assert (=> b!58937 (= e!38778 e!38784)))

(declare-fun c!7468 () Bool)

(assert (=> b!58937 (= c!7468 (_1!1028 lt!23773))))

(declare-fun b!58938 () Bool)

(assert (=> b!58938 (= e!38780 call!4391)))

(declare-fun b!58939 () Bool)

(assert (=> b!58939 (= e!38780 (getCurrentListMap!389 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun b!58940 () Bool)

(assert (=> b!58940 (= e!38776 (not call!4399))))

(declare-fun b!58941 () Bool)

(assert (=> b!58941 (= e!38774 e!38769)))

(declare-fun c!7467 () Bool)

(assert (=> b!58941 (= c!7467 ((_ is MissingZero!230) lt!23774))))

(declare-fun b!58942 () Bool)

(declare-fun lt!23786 () tuple2!2034)

(assert (=> b!58942 (= lt!23786 call!4378)))

(assert (=> b!58942 (= e!38769 (tuple2!2035 (_1!1028 lt!23786) (_2!1028 lt!23786)))))

(declare-fun bm!4393 () Bool)

(assert (=> bm!4393 (= call!4399 call!4389)))

(declare-fun b!58943 () Bool)

(assert (=> b!58943 (= c!7464 ((_ is MissingVacant!230) lt!23774))))

(assert (=> b!58943 (= e!38768 e!38774)))

(declare-fun b!58944 () Bool)

(assert (=> b!58944 (= e!38786 (= call!4382 (+!81 call!4377 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun bm!4394 () Bool)

(assert (=> bm!4394 (= call!4377 (map!1103 newMap!16))))

(declare-fun bm!4395 () Bool)

(assert (=> bm!4395 (= call!4400 call!4380)))

(declare-fun d!11203 () Bool)

(assert (=> d!11203 e!38778))

(declare-fun res!32783 () Bool)

(assert (=> d!11203 (=> (not res!32783) (not e!38778))))

(assert (=> d!11203 (= res!32783 (valid!256 (_2!1028 lt!23773)))))

(assert (=> d!11203 (= lt!23773 e!38770)))

(assert (=> d!11203 (= c!7466 (= (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (bvneg (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355))))))

(assert (=> d!11203 (valid!256 newMap!16)))

(assert (=> d!11203 (= (update!84 newMap!16 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) lt!23773)))

(declare-fun b!58945 () Bool)

(declare-fun lt!23796 () Unit!1550)

(declare-fun lt!23776 () Unit!1550)

(assert (=> b!58945 (= lt!23796 lt!23776)))

(assert (=> b!58945 (= call!4388 call!4398)))

(declare-fun lemmaChangeZeroKeyThenAddPairToListMap!15 (array!3697 array!3699 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 V!2841 Int) Unit!1550)

(assert (=> b!58945 (= lt!23776 (lemmaChangeZeroKeyThenAddPairToListMap!15 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) lt!23781 (zeroValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1958 newMap!16) (defaultEntry!2042 newMap!16)))))

(assert (=> b!58945 (= lt!23781 (bvor (extraKeys!1929 newMap!16) #b00000000000000000000000000000001))))

(assert (=> b!58945 (= e!38777 (tuple2!2035 true (LongMapFixedSize!617 (defaultEntry!2042 newMap!16) (mask!5925 newMap!16) (bvor (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1958 newMap!16) (_size!357 newMap!16) (_keys!3665 newMap!16) (_values!2025 newMap!16) (_vacant!357 newMap!16))))))

(declare-fun b!58946 () Bool)

(declare-fun lt!23790 () Unit!1550)

(assert (=> b!58946 (= e!38775 lt!23790)))

(assert (=> b!58946 (= lt!23790 call!4381)))

(assert (=> b!58946 (= lt!23771 call!4395)))

(assert (=> b!58946 (= c!7471 ((_ is MissingZero!230) lt!23771))))

(assert (=> b!58946 e!38788))

(declare-fun b!58947 () Bool)

(assert (=> b!58947 (= e!38772 ((_ is Undefined!230) lt!23779))))

(declare-fun b!58948 () Bool)

(assert (=> b!58948 (= e!38770 e!38768)))

(assert (=> b!58948 (= lt!23774 (seekEntryOrOpen!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (_keys!3665 newMap!16) (mask!5925 newMap!16)))))

(assert (=> b!58948 (= c!7462 ((_ is Undefined!230) lt!23774))))

(declare-fun b!58949 () Bool)

(declare-fun c!7470 () Bool)

(assert (=> b!58949 (= c!7470 ((_ is MissingVacant!230) lt!23779))))

(assert (=> b!58949 (= e!38781 e!38772)))

(declare-fun bm!4396 () Bool)

(assert (=> bm!4396 (= call!4386 (getCurrentListMap!389 (_keys!3665 newMap!16) (ite (or c!7466 c!7462) (_values!2025 newMap!16) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (index!3044 lt!23774) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16)))) (mask!5925 newMap!16) (ite c!7466 (ite c!7465 (extraKeys!1929 newMap!16) lt!23782) (extraKeys!1929 newMap!16)) (zeroValue!1958 newMap!16) (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun b!58950 () Bool)

(assert (=> b!58950 (= e!38782 (ite c!7465 call!4393 call!4398))))

(declare-fun bm!4397 () Bool)

(assert (=> bm!4397 (= call!4379 (+!81 e!38782 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun c!7474 () Bool)

(assert (=> bm!4397 (= c!7474 c!7466)))

(assert (= (and d!11203 c!7466) b!58931))

(assert (= (and d!11203 (not c!7466)) b!58948))

(assert (= (and b!58931 c!7465) b!58945))

(assert (= (and b!58931 (not c!7465)) b!58925))

(assert (= (or b!58945 b!58925) bm!4377))

(assert (= (or b!58945 b!58925) bm!4389))

(assert (= (or b!58945 b!58925) bm!4381))

(assert (= (and b!58948 c!7462) b!58920))

(assert (= (and b!58948 (not c!7462)) b!58943))

(assert (= (and b!58920 c!7472) b!58933))

(assert (= (and b!58920 (not c!7472)) b!58946))

(assert (= (and b!58933 res!32777) b!58913))

(assert (= (and b!58913 res!32774) b!58918))

(assert (= (and b!58946 c!7471) b!58923))

(assert (= (and b!58946 (not c!7471)) b!58914))

(assert (= (and b!58923 res!32771) b!58919))

(assert (= (and b!58919 res!32782) b!58909))

(assert (= (and b!58914 c!7475) b!58910))

(assert (= (and b!58914 (not c!7475)) b!58929))

(assert (= (and b!58910 res!32770) b!58916))

(assert (= (and b!58916 res!32779) b!58926))

(assert (= (or b!58923 b!58910) bm!4385))

(assert (= (or b!58909 b!58926) bm!4378))

(assert (= (or b!58913 bm!4385) bm!4392))

(assert (= (or b!58933 b!58946) bm!4387))

(assert (= (and b!58943 c!7464) b!58921))

(assert (= (and b!58943 (not c!7464)) b!58941))

(assert (= (and b!58941 c!7467) b!58942))

(assert (= (and b!58941 (not c!7467)) b!58935))

(assert (= (and b!58935 c!7469) b!58927))

(assert (= (and b!58935 (not c!7469)) b!58936))

(assert (= (and b!58927 res!32776) b!58930))

(assert (= (and b!58930 res!32778) b!58912))

(assert (= (and b!58936 c!7473) b!58928))

(assert (= (and b!58936 (not c!7473)) b!58949))

(assert (= (and b!58928 res!32775) b!58934))

(assert (= (and b!58934 res!32773) b!58940))

(assert (= (and b!58949 c!7470) b!58922))

(assert (= (and b!58949 (not c!7470)) b!58947))

(assert (= (and b!58922 res!32780) b!58917))

(assert (= (and b!58917 res!32772) b!58915))

(assert (= (or b!58928 b!58922) bm!4395))

(assert (= (or b!58940 b!58915) bm!4393))

(assert (= (or b!58930 bm!4395) bm!4390))

(assert (= (or b!58927 b!58936) bm!4391))

(assert (= (or b!58921 b!58942) bm!4384))

(assert (= (or bm!4378 bm!4393) bm!4382))

(assert (= (or bm!4392 bm!4390) bm!4383))

(assert (= (or b!58920 b!58935) bm!4376))

(assert (= (or b!58946 b!58936) bm!4379))

(assert (= (or bm!4387 bm!4391) bm!4374))

(assert (= (or b!58933 b!58927) bm!4380))

(assert (= (or b!58920 b!58935) bm!4386))

(assert (= (and bm!4386 c!7463) b!58938))

(assert (= (and bm!4386 (not c!7463)) b!58939))

(assert (= (or bm!4389 bm!4376) bm!4396))

(assert (= (or bm!4377 b!58935) bm!4375))

(assert (= (or bm!4381 b!58935) bm!4397))

(assert (= (and bm!4397 c!7474) b!58950))

(assert (= (and bm!4397 (not c!7474)) b!58932))

(assert (= (and d!11203 res!32783) b!58937))

(assert (= (and b!58937 c!7468) b!58911))

(assert (= (and b!58937 (not c!7468)) b!58924))

(assert (= (and b!58911 res!32781) b!58944))

(assert (= (or b!58944 b!58924) bm!4394))

(assert (= (or b!58911 b!58944 b!58924) bm!4388))

(assert (=> b!58948 m!50353))

(declare-fun m!50557 () Bool)

(assert (=> b!58948 m!50557))

(declare-fun m!50559 () Bool)

(assert (=> bm!4396 m!50559))

(declare-fun m!50561 () Bool)

(assert (=> bm!4396 m!50561))

(declare-fun m!50563 () Bool)

(assert (=> b!58916 m!50563))

(declare-fun m!50565 () Bool)

(assert (=> bm!4388 m!50565))

(assert (=> bm!4394 m!50389))

(declare-fun m!50567 () Bool)

(assert (=> d!11203 m!50567))

(assert (=> d!11203 m!50361))

(assert (=> b!58939 m!50481))

(declare-fun m!50569 () Bool)

(assert (=> b!58919 m!50569))

(declare-fun m!50571 () Bool)

(assert (=> bm!4397 m!50571))

(assert (=> b!58935 m!50353))

(assert (=> b!58935 m!50369))

(declare-fun m!50573 () Bool)

(assert (=> b!58935 m!50573))

(declare-fun m!50575 () Bool)

(assert (=> b!58935 m!50575))

(assert (=> b!58935 m!50575))

(declare-fun m!50577 () Bool)

(assert (=> b!58935 m!50577))

(declare-fun m!50579 () Bool)

(assert (=> b!58935 m!50579))

(assert (=> b!58935 m!50559))

(assert (=> bm!4374 m!50353))

(assert (=> bm!4374 m!50557))

(assert (=> bm!4382 m!50353))

(declare-fun m!50581 () Bool)

(assert (=> bm!4382 m!50581))

(declare-fun m!50583 () Bool)

(assert (=> b!58934 m!50583))

(declare-fun m!50585 () Bool)

(assert (=> b!58918 m!50585))

(assert (=> b!58925 m!50369))

(declare-fun m!50587 () Bool)

(assert (=> b!58925 m!50587))

(assert (=> bm!4380 m!50353))

(declare-fun m!50589 () Bool)

(assert (=> bm!4380 m!50589))

(assert (=> bm!4384 m!50353))

(assert (=> bm!4384 m!50369))

(declare-fun m!50591 () Bool)

(assert (=> bm!4384 m!50591))

(declare-fun m!50593 () Bool)

(assert (=> b!58944 m!50593))

(assert (=> bm!4379 m!50353))

(declare-fun m!50595 () Bool)

(assert (=> bm!4379 m!50595))

(assert (=> bm!4386 m!50353))

(declare-fun m!50597 () Bool)

(assert (=> bm!4386 m!50597))

(assert (=> b!58911 m!50353))

(declare-fun m!50599 () Bool)

(assert (=> b!58911 m!50599))

(assert (=> b!58932 m!50481))

(declare-fun m!50601 () Bool)

(assert (=> bm!4383 m!50601))

(assert (=> b!58945 m!50369))

(declare-fun m!50603 () Bool)

(assert (=> b!58945 m!50603))

(declare-fun m!50605 () Bool)

(assert (=> bm!4375 m!50605))

(declare-fun m!50607 () Bool)

(assert (=> b!58912 m!50607))

(declare-fun m!50609 () Bool)

(assert (=> b!58917 m!50609))

(assert (=> b!58620 d!11203))

(declare-fun d!11205 () Bool)

(declare-fun c!7478 () Bool)

(assert (=> d!11205 (= c!7478 ((_ is ValueCellFull!854) (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(declare-fun e!38791 () V!2841)

(assert (=> d!11205 (= (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!38791)))

(declare-fun b!58955 () Bool)

(declare-fun get!1074 (ValueCell!854 V!2841) V!2841)

(assert (=> b!58955 (= e!38791 (get!1074 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!58956 () Bool)

(declare-fun get!1075 (ValueCell!854 V!2841) V!2841)

(assert (=> b!58956 (= e!38791 (get!1075 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11205 c!7478) b!58955))

(assert (= (and d!11205 (not c!7478)) b!58956))

(assert (=> b!58955 m!50365))

(assert (=> b!58955 m!50367))

(declare-fun m!50611 () Bool)

(assert (=> b!58955 m!50611))

(assert (=> b!58956 m!50365))

(assert (=> b!58956 m!50367))

(declare-fun m!50613 () Bool)

(assert (=> b!58956 m!50613))

(assert (=> b!58620 d!11205))

(declare-fun d!11207 () Bool)

(assert (=> d!11207 (not (arrayContainsKey!0 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!23800 () Unit!1550)

(declare-fun choose!68 (array!3697 (_ BitVec 32) (_ BitVec 64) List!1436) Unit!1550)

(assert (=> d!11207 (= lt!23800 (choose!68 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (Cons!1432 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) Nil!1433)))))

(assert (=> d!11207 (bvslt (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!11207 (= (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (Cons!1432 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) Nil!1433)) lt!23800)))

(declare-fun bs!2552 () Bool)

(assert (= bs!2552 d!11207))

(assert (=> bs!2552 m!50353))

(assert (=> bs!2552 m!50357))

(assert (=> bs!2552 m!50353))

(declare-fun m!50615 () Bool)

(assert (=> bs!2552 m!50615))

(assert (=> b!58609 d!11207))

(declare-fun d!11209 () Bool)

(assert (=> d!11209 (arrayNoDuplicates!0 (_keys!3665 (v!2377 (underlying!223 thiss!992))) from!355 Nil!1433)))

(declare-fun lt!23803 () Unit!1550)

(declare-fun choose!39 (array!3697 (_ BitVec 32) (_ BitVec 32)) Unit!1550)

(assert (=> d!11209 (= lt!23803 (choose!39 (_keys!3665 (v!2377 (underlying!223 thiss!992))) #b00000000000000000000000000000000 from!355))))

(assert (=> d!11209 (bvslt (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!11209 (= (lemmaNoDuplicateFromThenFromBigger!0 (_keys!3665 (v!2377 (underlying!223 thiss!992))) #b00000000000000000000000000000000 from!355) lt!23803)))

(declare-fun bs!2553 () Bool)

(assert (= bs!2553 d!11209))

(assert (=> bs!2553 m!50351))

(declare-fun m!50617 () Bool)

(assert (=> bs!2553 m!50617))

(assert (=> b!58609 d!11209))

(declare-fun d!11211 () Bool)

(declare-fun res!32788 () Bool)

(declare-fun e!38796 () Bool)

(assert (=> d!11211 (=> res!32788 e!38796)))

(assert (=> d!11211 (= res!32788 (= (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(assert (=> d!11211 (= (arrayContainsKey!0 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)) e!38796)))

(declare-fun b!58961 () Bool)

(declare-fun e!38797 () Bool)

(assert (=> b!58961 (= e!38796 e!38797)))

(declare-fun res!32789 () Bool)

(assert (=> b!58961 (=> (not res!32789) (not e!38797))))

(assert (=> b!58961 (= res!32789 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992))))))))

(declare-fun b!58962 () Bool)

(assert (=> b!58962 (= e!38797 (arrayContainsKey!0 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (= (and d!11211 (not res!32788)) b!58961))

(assert (= (and b!58961 res!32789) b!58962))

(assert (=> d!11211 m!50485))

(assert (=> b!58962 m!50353))

(declare-fun m!50619 () Bool)

(assert (=> b!58962 m!50619))

(assert (=> b!58609 d!11211))

(declare-fun d!11213 () Bool)

(declare-fun e!38800 () Bool)

(assert (=> d!11213 e!38800))

(declare-fun c!7481 () Bool)

(assert (=> d!11213 (= c!7481 (and (not (= (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun lt!23806 () Unit!1550)

(declare-fun choose!308 (array!3697 array!3699 (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 (_ BitVec 64) (_ BitVec 32) Int) Unit!1550)

(assert (=> d!11213 (= lt!23806 (choose!308 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (_values!2025 (v!2377 (underlying!223 thiss!992))) (mask!5925 (v!2377 (underlying!223 thiss!992))) (extraKeys!1929 (v!2377 (underlying!223 thiss!992))) (zeroValue!1958 (v!2377 (underlying!223 thiss!992))) (minValue!1958 (v!2377 (underlying!223 thiss!992))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2042 (v!2377 (underlying!223 thiss!992)))))))

(assert (=> d!11213 (validMask!0 (mask!5925 (v!2377 (underlying!223 thiss!992))))))

(assert (=> d!11213 (= (lemmaListMapContainsThenArrayContainsFrom!28 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (_values!2025 (v!2377 (underlying!223 thiss!992))) (mask!5925 (v!2377 (underlying!223 thiss!992))) (extraKeys!1929 (v!2377 (underlying!223 thiss!992))) (zeroValue!1958 (v!2377 (underlying!223 thiss!992))) (minValue!1958 (v!2377 (underlying!223 thiss!992))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2042 (v!2377 (underlying!223 thiss!992)))) lt!23806)))

(declare-fun b!58967 () Bool)

(assert (=> b!58967 (= e!38800 (arrayContainsKey!0 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!58968 () Bool)

(assert (=> b!58968 (= e!38800 (ite (= (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!1929 (v!2377 (underlying!223 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1929 (v!2377 (underlying!223 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!11213 c!7481) b!58967))

(assert (= (and d!11213 (not c!7481)) b!58968))

(assert (=> d!11213 m!50353))

(declare-fun m!50621 () Bool)

(assert (=> d!11213 m!50621))

(assert (=> d!11213 m!50383))

(assert (=> b!58967 m!50353))

(assert (=> b!58967 m!50357))

(assert (=> b!58609 d!11213))

(declare-fun b!58979 () Bool)

(declare-fun e!38812 () Bool)

(declare-fun call!4403 () Bool)

(assert (=> b!58979 (= e!38812 call!4403)))

(declare-fun b!58980 () Bool)

(declare-fun e!38810 () Bool)

(declare-fun e!38809 () Bool)

(assert (=> b!58980 (= e!38810 e!38809)))

(declare-fun res!32796 () Bool)

(assert (=> b!58980 (=> (not res!32796) (not e!38809))))

(declare-fun e!38811 () Bool)

(assert (=> b!58980 (= res!32796 (not e!38811))))

(declare-fun res!32797 () Bool)

(assert (=> b!58980 (=> (not res!32797) (not e!38811))))

(assert (=> b!58980 (= res!32797 (validKeyInArray!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(declare-fun c!7484 () Bool)

(declare-fun bm!4400 () Bool)

(assert (=> bm!4400 (= call!4403 (arrayNoDuplicates!0 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!7484 (Cons!1432 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) Nil!1433) Nil!1433)))))

(declare-fun b!58981 () Bool)

(assert (=> b!58981 (= e!38812 call!4403)))

(declare-fun d!11215 () Bool)

(declare-fun res!32798 () Bool)

(assert (=> d!11215 (=> res!32798 e!38810)))

(assert (=> d!11215 (= res!32798 (bvsge from!355 (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992))))))))

(assert (=> d!11215 (= (arrayNoDuplicates!0 (_keys!3665 (v!2377 (underlying!223 thiss!992))) from!355 Nil!1433) e!38810)))

(declare-fun b!58982 () Bool)

(assert (=> b!58982 (= e!38809 e!38812)))

(assert (=> b!58982 (= c!7484 (validKeyInArray!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(declare-fun b!58983 () Bool)

(declare-fun contains!683 (List!1436 (_ BitVec 64)) Bool)

(assert (=> b!58983 (= e!38811 (contains!683 Nil!1433 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(assert (= (and d!11215 (not res!32798)) b!58980))

(assert (= (and b!58980 res!32797) b!58983))

(assert (= (and b!58980 res!32796) b!58982))

(assert (= (and b!58982 c!7484) b!58979))

(assert (= (and b!58982 (not c!7484)) b!58981))

(assert (= (or b!58979 b!58981) bm!4400))

(assert (=> b!58980 m!50353))

(assert (=> b!58980 m!50353))

(declare-fun m!50623 () Bool)

(assert (=> b!58980 m!50623))

(assert (=> bm!4400 m!50353))

(declare-fun m!50625 () Bool)

(assert (=> bm!4400 m!50625))

(assert (=> b!58982 m!50353))

(assert (=> b!58982 m!50353))

(assert (=> b!58982 m!50623))

(assert (=> b!58983 m!50353))

(assert (=> b!58983 m!50353))

(declare-fun m!50627 () Bool)

(assert (=> b!58983 m!50627))

(assert (=> b!58609 d!11215))

(declare-fun mapNonEmpty!2883 () Bool)

(declare-fun mapRes!2883 () Bool)

(declare-fun tp!8013 () Bool)

(declare-fun e!38818 () Bool)

(assert (=> mapNonEmpty!2883 (= mapRes!2883 (and tp!8013 e!38818))))

(declare-fun mapKey!2883 () (_ BitVec 32))

(declare-fun mapValue!2883 () ValueCell!854)

(declare-fun mapRest!2883 () (Array (_ BitVec 32) ValueCell!854))

(assert (=> mapNonEmpty!2883 (= mapRest!2867 (store mapRest!2883 mapKey!2883 mapValue!2883))))

(declare-fun b!58990 () Bool)

(assert (=> b!58990 (= e!38818 tp_is_empty!2395)))

(declare-fun condMapEmpty!2883 () Bool)

(declare-fun mapDefault!2883 () ValueCell!854)

(assert (=> mapNonEmpty!2867 (= condMapEmpty!2883 (= mapRest!2867 ((as const (Array (_ BitVec 32) ValueCell!854)) mapDefault!2883)))))

(declare-fun e!38817 () Bool)

(assert (=> mapNonEmpty!2867 (= tp!7983 (and e!38817 mapRes!2883))))

(declare-fun mapIsEmpty!2883 () Bool)

(assert (=> mapIsEmpty!2883 mapRes!2883))

(declare-fun b!58991 () Bool)

(assert (=> b!58991 (= e!38817 tp_is_empty!2395)))

(assert (= (and mapNonEmpty!2867 condMapEmpty!2883) mapIsEmpty!2883))

(assert (= (and mapNonEmpty!2867 (not condMapEmpty!2883)) mapNonEmpty!2883))

(assert (= (and mapNonEmpty!2883 ((_ is ValueCellFull!854) mapValue!2883)) b!58990))

(assert (= (and mapNonEmpty!2867 ((_ is ValueCellFull!854) mapDefault!2883)) b!58991))

(declare-fun m!50629 () Bool)

(assert (=> mapNonEmpty!2883 m!50629))

(declare-fun mapNonEmpty!2884 () Bool)

(declare-fun mapRes!2884 () Bool)

(declare-fun tp!8014 () Bool)

(declare-fun e!38820 () Bool)

(assert (=> mapNonEmpty!2884 (= mapRes!2884 (and tp!8014 e!38820))))

(declare-fun mapRest!2884 () (Array (_ BitVec 32) ValueCell!854))

(declare-fun mapKey!2884 () (_ BitVec 32))

(declare-fun mapValue!2884 () ValueCell!854)

(assert (=> mapNonEmpty!2884 (= mapRest!2868 (store mapRest!2884 mapKey!2884 mapValue!2884))))

(declare-fun b!58992 () Bool)

(assert (=> b!58992 (= e!38820 tp_is_empty!2395)))

(declare-fun condMapEmpty!2884 () Bool)

(declare-fun mapDefault!2884 () ValueCell!854)

(assert (=> mapNonEmpty!2868 (= condMapEmpty!2884 (= mapRest!2868 ((as const (Array (_ BitVec 32) ValueCell!854)) mapDefault!2884)))))

(declare-fun e!38819 () Bool)

(assert (=> mapNonEmpty!2868 (= tp!7986 (and e!38819 mapRes!2884))))

(declare-fun mapIsEmpty!2884 () Bool)

(assert (=> mapIsEmpty!2884 mapRes!2884))

(declare-fun b!58993 () Bool)

(assert (=> b!58993 (= e!38819 tp_is_empty!2395)))

(assert (= (and mapNonEmpty!2868 condMapEmpty!2884) mapIsEmpty!2884))

(assert (= (and mapNonEmpty!2868 (not condMapEmpty!2884)) mapNonEmpty!2884))

(assert (= (and mapNonEmpty!2884 ((_ is ValueCellFull!854) mapValue!2884)) b!58992))

(assert (= (and mapNonEmpty!2868 ((_ is ValueCellFull!854) mapDefault!2884)) b!58993))

(declare-fun m!50631 () Bool)

(assert (=> mapNonEmpty!2884 m!50631))

(declare-fun b_lambda!2589 () Bool)

(assert (= b_lambda!2587 (or (and b!58610 b_free!1957) (and b!58607 b_free!1959 (= (defaultEntry!2042 newMap!16) (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))))) b_lambda!2589)))

(check-sat (not b!58956) (not d!11207) (not bm!4382) (not mapNonEmpty!2884) (not bm!4386) (not b!58944) b_and!3567 (not b!58800) (not d!11197) (not bm!4321) (not b!58982) (not mapNonEmpty!2883) (not bm!4394) (not bm!4388) (not b_lambda!2585) (not b!58801) (not bm!4380) (not b!58935) (not b!58813) (not b!58962) (not bm!4400) (not b!58798) (not d!11189) (not b_lambda!2589) (not bm!4374) (not bm!4397) (not b_next!1959) (not d!11209) b_and!3565 (not d!11201) (not bm!4319) (not bm!4396) (not b!58794) (not d!11199) (not b!58980) (not bm!4383) (not b!58948) (not bm!4324) (not b!58790) (not b!58814) (not d!11203) (not d!11213) (not b_next!1957) (not b!58955) (not b!58799) (not b!58911) (not b!58786) (not d!11187) (not b!58822) (not b!58945) (not b!58983) (not b!58824) (not b!58932) (not bm!4375) (not b!58939) (not b!58967) tp_is_empty!2395 (not b!58796) (not b!58925) (not bm!4323) (not bm!4379) (not bm!4384) (not b!58815))
(check-sat b_and!3565 b_and!3567 (not b_next!1957) (not b_next!1959))
(get-model)

(declare-fun d!11217 () Bool)

(declare-fun e!38822 () Bool)

(assert (=> d!11217 e!38822))

(declare-fun res!32799 () Bool)

(assert (=> d!11217 (=> res!32799 e!38822)))

(declare-fun lt!23807 () Bool)

(assert (=> d!11217 (= res!32799 (not lt!23807))))

(declare-fun lt!23809 () Bool)

(assert (=> d!11217 (= lt!23807 lt!23809)))

(declare-fun lt!23808 () Unit!1550)

(declare-fun e!38821 () Unit!1550)

(assert (=> d!11217 (= lt!23808 e!38821)))

(declare-fun c!7485 () Bool)

(assert (=> d!11217 (= c!7485 lt!23809)))

(assert (=> d!11217 (= lt!23809 (containsKey!126 (toList!693 e!38780) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(assert (=> d!11217 (= (contains!682 e!38780 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) lt!23807)))

(declare-fun b!58994 () Bool)

(declare-fun lt!23810 () Unit!1550)

(assert (=> b!58994 (= e!38821 lt!23810)))

(assert (=> b!58994 (= lt!23810 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 e!38780) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(assert (=> b!58994 (isDefined!76 (getValueByKey!122 (toList!693 e!38780) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(declare-fun b!58995 () Bool)

(declare-fun Unit!1561 () Unit!1550)

(assert (=> b!58995 (= e!38821 Unit!1561)))

(declare-fun b!58996 () Bool)

(assert (=> b!58996 (= e!38822 (isDefined!76 (getValueByKey!122 (toList!693 e!38780) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355))))))

(assert (= (and d!11217 c!7485) b!58994))

(assert (= (and d!11217 (not c!7485)) b!58995))

(assert (= (and d!11217 (not res!32799)) b!58996))

(assert (=> d!11217 m!50353))

(declare-fun m!50633 () Bool)

(assert (=> d!11217 m!50633))

(assert (=> b!58994 m!50353))

(declare-fun m!50635 () Bool)

(assert (=> b!58994 m!50635))

(assert (=> b!58994 m!50353))

(declare-fun m!50637 () Bool)

(assert (=> b!58994 m!50637))

(assert (=> b!58994 m!50637))

(declare-fun m!50639 () Bool)

(assert (=> b!58994 m!50639))

(assert (=> b!58996 m!50353))

(assert (=> b!58996 m!50637))

(assert (=> b!58996 m!50637))

(assert (=> b!58996 m!50639))

(assert (=> bm!4386 d!11217))

(assert (=> b!58967 d!11211))

(declare-fun bm!4403 () Bool)

(declare-fun call!4406 () (_ BitVec 32))

(assert (=> bm!4403 (= call!4406 (arrayCountValidKeys!0 (_keys!3665 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!1999 (_keys!3665 newMap!16))))))

(declare-fun b!59005 () Bool)

(declare-fun e!38828 () (_ BitVec 32))

(assert (=> b!59005 (= e!38828 (bvadd #b00000000000000000000000000000001 call!4406))))

(declare-fun b!59006 () Bool)

(declare-fun e!38827 () (_ BitVec 32))

(assert (=> b!59006 (= e!38827 #b00000000000000000000000000000000)))

(declare-fun d!11219 () Bool)

(declare-fun lt!23813 () (_ BitVec 32))

(assert (=> d!11219 (and (bvsge lt!23813 #b00000000000000000000000000000000) (bvsle lt!23813 (bvsub (size!1999 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!11219 (= lt!23813 e!38827)))

(declare-fun c!7490 () Bool)

(assert (=> d!11219 (= c!7490 (bvsge #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(assert (=> d!11219 (and (bvsle #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!1999 (_keys!3665 newMap!16)) (size!1999 (_keys!3665 newMap!16))))))

(assert (=> d!11219 (= (arrayCountValidKeys!0 (_keys!3665 newMap!16) #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))) lt!23813)))

(declare-fun b!59007 () Bool)

(assert (=> b!59007 (= e!38828 call!4406)))

(declare-fun b!59008 () Bool)

(assert (=> b!59008 (= e!38827 e!38828)))

(declare-fun c!7491 () Bool)

(assert (=> b!59008 (= c!7491 (validKeyInArray!0 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!11219 c!7490) b!59006))

(assert (= (and d!11219 (not c!7490)) b!59008))

(assert (= (and b!59008 c!7491) b!59005))

(assert (= (and b!59008 (not c!7491)) b!59007))

(assert (= (or b!59005 b!59007) bm!4403))

(declare-fun m!50641 () Bool)

(assert (=> bm!4403 m!50641))

(declare-fun m!50643 () Bool)

(assert (=> b!59008 m!50643))

(assert (=> b!59008 m!50643))

(declare-fun m!50645 () Bool)

(assert (=> b!59008 m!50645))

(assert (=> b!58813 d!11219))

(declare-fun d!11221 () Bool)

(assert (=> d!11221 (= (get!1074 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2376 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(assert (=> b!58955 d!11221))

(assert (=> d!11209 d!11215))

(declare-fun d!11223 () Bool)

(assert (=> d!11223 (arrayNoDuplicates!0 (_keys!3665 (v!2377 (underlying!223 thiss!992))) from!355 Nil!1433)))

(assert (=> d!11223 true))

(declare-fun _$71!72 () Unit!1550)

(assert (=> d!11223 (= (choose!39 (_keys!3665 (v!2377 (underlying!223 thiss!992))) #b00000000000000000000000000000000 from!355) _$71!72)))

(declare-fun bs!2554 () Bool)

(assert (= bs!2554 d!11223))

(assert (=> bs!2554 m!50351))

(assert (=> d!11209 d!11223))

(assert (=> bm!4394 d!11187))

(declare-fun b!59009 () Bool)

(declare-fun e!38832 () Bool)

(declare-fun call!4407 () Bool)

(assert (=> b!59009 (= e!38832 call!4407)))

(declare-fun b!59010 () Bool)

(declare-fun e!38830 () Bool)

(declare-fun e!38829 () Bool)

(assert (=> b!59010 (= e!38830 e!38829)))

(declare-fun res!32800 () Bool)

(assert (=> b!59010 (=> (not res!32800) (not e!38829))))

(declare-fun e!38831 () Bool)

(assert (=> b!59010 (= res!32800 (not e!38831))))

(declare-fun res!32801 () Bool)

(assert (=> b!59010 (=> (not res!32801) (not e!38831))))

(assert (=> b!59010 (= res!32801 (validKeyInArray!0 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!4404 () Bool)

(declare-fun c!7492 () Bool)

(assert (=> bm!4404 (= call!4407 (arrayNoDuplicates!0 (_keys!3665 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!7492 (Cons!1432 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000) Nil!1433) Nil!1433)))))

(declare-fun b!59011 () Bool)

(assert (=> b!59011 (= e!38832 call!4407)))

(declare-fun d!11225 () Bool)

(declare-fun res!32802 () Bool)

(assert (=> d!11225 (=> res!32802 e!38830)))

(assert (=> d!11225 (= res!32802 (bvsge #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(assert (=> d!11225 (= (arrayNoDuplicates!0 (_keys!3665 newMap!16) #b00000000000000000000000000000000 Nil!1433) e!38830)))

(declare-fun b!59012 () Bool)

(assert (=> b!59012 (= e!38829 e!38832)))

(assert (=> b!59012 (= c!7492 (validKeyInArray!0 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59013 () Bool)

(assert (=> b!59013 (= e!38831 (contains!683 Nil!1433 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!11225 (not res!32802)) b!59010))

(assert (= (and b!59010 res!32801) b!59013))

(assert (= (and b!59010 res!32800) b!59012))

(assert (= (and b!59012 c!7492) b!59009))

(assert (= (and b!59012 (not c!7492)) b!59011))

(assert (= (or b!59009 b!59011) bm!4404))

(assert (=> b!59010 m!50643))

(assert (=> b!59010 m!50643))

(assert (=> b!59010 m!50645))

(assert (=> bm!4404 m!50643))

(declare-fun m!50647 () Bool)

(assert (=> bm!4404 m!50647))

(assert (=> b!59012 m!50643))

(assert (=> b!59012 m!50643))

(assert (=> b!59012 m!50645))

(assert (=> b!59013 m!50643))

(assert (=> b!59013 m!50643))

(declare-fun m!50649 () Bool)

(assert (=> b!59013 m!50649))

(assert (=> b!58815 d!11225))

(declare-fun d!11227 () Bool)

(assert (=> d!11227 (= (+!81 (getCurrentListMap!389 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!389 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) lt!23781 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!23816 () Unit!1550)

(declare-fun choose!309 (array!3697 array!3699 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 V!2841 Int) Unit!1550)

(assert (=> d!11227 (= lt!23816 (choose!309 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) lt!23781 (zeroValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1958 newMap!16) (defaultEntry!2042 newMap!16)))))

(assert (=> d!11227 (validMask!0 (mask!5925 newMap!16))))

(assert (=> d!11227 (= (lemmaChangeZeroKeyThenAddPairToListMap!15 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) lt!23781 (zeroValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1958 newMap!16) (defaultEntry!2042 newMap!16)) lt!23816)))

(declare-fun bs!2555 () Bool)

(assert (= bs!2555 d!11227))

(assert (=> bs!2555 m!50481))

(declare-fun m!50651 () Bool)

(assert (=> bs!2555 m!50651))

(assert (=> bs!2555 m!50369))

(declare-fun m!50653 () Bool)

(assert (=> bs!2555 m!50653))

(assert (=> bs!2555 m!50481))

(assert (=> bs!2555 m!50369))

(declare-fun m!50655 () Bool)

(assert (=> bs!2555 m!50655))

(declare-fun m!50657 () Bool)

(assert (=> bs!2555 m!50657))

(assert (=> b!58945 d!11227))

(declare-fun d!11229 () Bool)

(declare-fun e!38835 () Bool)

(assert (=> d!11229 e!38835))

(declare-fun c!7495 () Bool)

(assert (=> d!11229 (= c!7495 (and (not (= (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> d!11229 true))

(declare-fun _$29!66 () Unit!1550)

(assert (=> d!11229 (= (choose!308 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (_values!2025 (v!2377 (underlying!223 thiss!992))) (mask!5925 (v!2377 (underlying!223 thiss!992))) (extraKeys!1929 (v!2377 (underlying!223 thiss!992))) (zeroValue!1958 (v!2377 (underlying!223 thiss!992))) (minValue!1958 (v!2377 (underlying!223 thiss!992))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2042 (v!2377 (underlying!223 thiss!992)))) _$29!66)))

(declare-fun b!59018 () Bool)

(assert (=> b!59018 (= e!38835 (arrayContainsKey!0 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!59019 () Bool)

(assert (=> b!59019 (= e!38835 (ite (= (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!1929 (v!2377 (underlying!223 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1929 (v!2377 (underlying!223 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!11229 c!7495) b!59018))

(assert (= (and d!11229 (not c!7495)) b!59019))

(assert (=> b!59018 m!50353))

(assert (=> b!59018 m!50357))

(assert (=> d!11213 d!11229))

(assert (=> d!11213 d!11191))

(declare-fun b!59020 () Bool)

(declare-fun e!38842 () Bool)

(assert (=> b!59020 (= e!38842 (validKeyInArray!0 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!4405 () Bool)

(declare-fun call!4414 () Bool)

(declare-fun lt!23838 () ListLongMap!1355)

(assert (=> bm!4405 (= call!4414 (contains!682 lt!23838 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59021 () Bool)

(declare-fun e!38840 () Unit!1550)

(declare-fun Unit!1562 () Unit!1550)

(assert (=> b!59021 (= e!38840 Unit!1562)))

(declare-fun b!59022 () Bool)

(declare-fun res!32806 () Bool)

(declare-fun e!38843 () Bool)

(assert (=> b!59022 (=> (not res!32806) (not e!38843))))

(declare-fun e!38841 () Bool)

(assert (=> b!59022 (= res!32806 e!38841)))

(declare-fun c!7496 () Bool)

(assert (=> b!59022 (= c!7496 (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!59023 () Bool)

(declare-fun e!38837 () ListLongMap!1355)

(declare-fun call!4411 () ListLongMap!1355)

(assert (=> b!59023 (= e!38837 call!4411)))

(declare-fun bm!4406 () Bool)

(declare-fun call!4410 () ListLongMap!1355)

(declare-fun call!4412 () ListLongMap!1355)

(assert (=> bm!4406 (= call!4410 call!4412)))

(declare-fun b!59025 () Bool)

(declare-fun e!38848 () Bool)

(declare-fun e!38836 () Bool)

(assert (=> b!59025 (= e!38848 e!38836)))

(declare-fun res!32809 () Bool)

(declare-fun call!4408 () Bool)

(assert (=> b!59025 (= res!32809 call!4408)))

(assert (=> b!59025 (=> (not res!32809) (not e!38836))))

(declare-fun b!59026 () Bool)

(assert (=> b!59026 (= e!38843 e!38848)))

(declare-fun c!7497 () Bool)

(assert (=> b!59026 (= c!7497 (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4407 () Bool)

(assert (=> bm!4407 (= call!4408 (contains!682 lt!23838 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4408 () Bool)

(declare-fun call!4413 () ListLongMap!1355)

(assert (=> bm!4408 (= call!4411 call!4413)))

(declare-fun b!59027 () Bool)

(declare-fun c!7500 () Bool)

(assert (=> b!59027 (= c!7500 (and (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!38838 () ListLongMap!1355)

(assert (=> b!59027 (= e!38837 e!38838)))

(declare-fun b!59028 () Bool)

(declare-fun e!38846 () Bool)

(assert (=> b!59028 (= e!38846 (= (apply!66 lt!23838 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1958 newMap!16)))))

(declare-fun b!59029 () Bool)

(declare-fun res!32803 () Bool)

(assert (=> b!59029 (=> (not res!32803) (not e!38843))))

(declare-fun e!38847 () Bool)

(assert (=> b!59029 (= res!32803 e!38847)))

(declare-fun res!32805 () Bool)

(assert (=> b!59029 (=> res!32805 e!38847)))

(assert (=> b!59029 (= res!32805 (not e!38842))))

(declare-fun res!32811 () Bool)

(assert (=> b!59029 (=> (not res!32811) (not e!38842))))

(assert (=> b!59029 (= res!32811 (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(declare-fun b!59030 () Bool)

(declare-fun e!38845 () ListLongMap!1355)

(assert (=> b!59030 (= e!38845 (+!81 call!4413 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))

(declare-fun bm!4409 () Bool)

(declare-fun call!4409 () ListLongMap!1355)

(assert (=> bm!4409 (= call!4409 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun bm!4410 () Bool)

(declare-fun c!7499 () Bool)

(declare-fun c!7501 () Bool)

(assert (=> bm!4410 (= call!4413 (+!81 (ite c!7499 call!4409 (ite c!7501 call!4412 call!4410)) (ite (or c!7499 c!7501) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))

(declare-fun b!59031 () Bool)

(assert (=> b!59031 (= e!38848 (not call!4408))))

(declare-fun b!59032 () Bool)

(assert (=> b!59032 (= e!38836 (= (apply!66 lt!23838 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1958 newMap!16)))))

(declare-fun b!59033 () Bool)

(declare-fun e!38839 () Bool)

(assert (=> b!59033 (= e!38839 (= (apply!66 lt!23838 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)) (get!1073 (select (arr!1769 (_values!2025 newMap!16)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!59033 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2000 (_values!2025 newMap!16))))))

(assert (=> b!59033 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(declare-fun b!59024 () Bool)

(assert (=> b!59024 (= e!38847 e!38839)))

(declare-fun res!32808 () Bool)

(assert (=> b!59024 (=> (not res!32808) (not e!38839))))

(assert (=> b!59024 (= res!32808 (contains!682 lt!23838 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59024 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(declare-fun d!11231 () Bool)

(assert (=> d!11231 e!38843))

(declare-fun res!32807 () Bool)

(assert (=> d!11231 (=> (not res!32807) (not e!38843))))

(assert (=> d!11231 (= res!32807 (or (bvsge #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))))

(declare-fun lt!23832 () ListLongMap!1355)

(assert (=> d!11231 (= lt!23838 lt!23832)))

(declare-fun lt!23837 () Unit!1550)

(assert (=> d!11231 (= lt!23837 e!38840)))

(declare-fun c!7498 () Bool)

(declare-fun e!38844 () Bool)

(assert (=> d!11231 (= c!7498 e!38844)))

(declare-fun res!32810 () Bool)

(assert (=> d!11231 (=> (not res!32810) (not e!38844))))

(assert (=> d!11231 (= res!32810 (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(assert (=> d!11231 (= lt!23832 e!38845)))

(assert (=> d!11231 (= c!7499 (and (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11231 (validMask!0 (mask!5925 newMap!16))))

(assert (=> d!11231 (= (getCurrentListMap!389 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) lt!23838)))

(declare-fun b!59034 () Bool)

(declare-fun lt!23826 () Unit!1550)

(assert (=> b!59034 (= e!38840 lt!23826)))

(declare-fun lt!23831 () ListLongMap!1355)

(assert (=> b!59034 (= lt!23831 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!23830 () (_ BitVec 64))

(assert (=> b!59034 (= lt!23830 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23829 () (_ BitVec 64))

(assert (=> b!59034 (= lt!23829 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23822 () Unit!1550)

(assert (=> b!59034 (= lt!23822 (addStillContains!42 lt!23831 lt!23830 (zeroValue!1958 newMap!16) lt!23829))))

(assert (=> b!59034 (contains!682 (+!81 lt!23831 (tuple2!2037 lt!23830 (zeroValue!1958 newMap!16))) lt!23829)))

(declare-fun lt!23833 () Unit!1550)

(assert (=> b!59034 (= lt!23833 lt!23822)))

(declare-fun lt!23836 () ListLongMap!1355)

(assert (=> b!59034 (= lt!23836 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!23818 () (_ BitVec 64))

(assert (=> b!59034 (= lt!23818 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23820 () (_ BitVec 64))

(assert (=> b!59034 (= lt!23820 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23817 () Unit!1550)

(assert (=> b!59034 (= lt!23817 (addApplyDifferent!42 lt!23836 lt!23818 (minValue!1958 newMap!16) lt!23820))))

(assert (=> b!59034 (= (apply!66 (+!81 lt!23836 (tuple2!2037 lt!23818 (minValue!1958 newMap!16))) lt!23820) (apply!66 lt!23836 lt!23820))))

(declare-fun lt!23825 () Unit!1550)

(assert (=> b!59034 (= lt!23825 lt!23817)))

(declare-fun lt!23824 () ListLongMap!1355)

(assert (=> b!59034 (= lt!23824 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!23821 () (_ BitVec 64))

(assert (=> b!59034 (= lt!23821 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23828 () (_ BitVec 64))

(assert (=> b!59034 (= lt!23828 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23823 () Unit!1550)

(assert (=> b!59034 (= lt!23823 (addApplyDifferent!42 lt!23824 lt!23821 (zeroValue!1958 newMap!16) lt!23828))))

(assert (=> b!59034 (= (apply!66 (+!81 lt!23824 (tuple2!2037 lt!23821 (zeroValue!1958 newMap!16))) lt!23828) (apply!66 lt!23824 lt!23828))))

(declare-fun lt!23835 () Unit!1550)

(assert (=> b!59034 (= lt!23835 lt!23823)))

(declare-fun lt!23834 () ListLongMap!1355)

(assert (=> b!59034 (= lt!23834 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!23827 () (_ BitVec 64))

(assert (=> b!59034 (= lt!23827 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23819 () (_ BitVec 64))

(assert (=> b!59034 (= lt!23819 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!59034 (= lt!23826 (addApplyDifferent!42 lt!23834 lt!23827 (minValue!1958 newMap!16) lt!23819))))

(assert (=> b!59034 (= (apply!66 (+!81 lt!23834 (tuple2!2037 lt!23827 (minValue!1958 newMap!16))) lt!23819) (apply!66 lt!23834 lt!23819))))

(declare-fun b!59035 () Bool)

(assert (=> b!59035 (= e!38844 (validKeyInArray!0 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59036 () Bool)

(assert (=> b!59036 (= e!38841 e!38846)))

(declare-fun res!32804 () Bool)

(assert (=> b!59036 (= res!32804 call!4414)))

(assert (=> b!59036 (=> (not res!32804) (not e!38846))))

(declare-fun b!59037 () Bool)

(assert (=> b!59037 (= e!38845 e!38837)))

(assert (=> b!59037 (= c!7501 (and (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!59038 () Bool)

(assert (=> b!59038 (= e!38838 call!4411)))

(declare-fun b!59039 () Bool)

(assert (=> b!59039 (= e!38841 (not call!4414))))

(declare-fun b!59040 () Bool)

(assert (=> b!59040 (= e!38838 call!4410)))

(declare-fun bm!4411 () Bool)

(assert (=> bm!4411 (= call!4412 call!4409)))

(assert (= (and d!11231 c!7499) b!59030))

(assert (= (and d!11231 (not c!7499)) b!59037))

(assert (= (and b!59037 c!7501) b!59023))

(assert (= (and b!59037 (not c!7501)) b!59027))

(assert (= (and b!59027 c!7500) b!59038))

(assert (= (and b!59027 (not c!7500)) b!59040))

(assert (= (or b!59038 b!59040) bm!4406))

(assert (= (or b!59023 bm!4406) bm!4411))

(assert (= (or b!59023 b!59038) bm!4408))

(assert (= (or b!59030 bm!4411) bm!4409))

(assert (= (or b!59030 bm!4408) bm!4410))

(assert (= (and d!11231 res!32810) b!59035))

(assert (= (and d!11231 c!7498) b!59034))

(assert (= (and d!11231 (not c!7498)) b!59021))

(assert (= (and d!11231 res!32807) b!59029))

(assert (= (and b!59029 res!32811) b!59020))

(assert (= (and b!59029 (not res!32805)) b!59024))

(assert (= (and b!59024 res!32808) b!59033))

(assert (= (and b!59029 res!32803) b!59022))

(assert (= (and b!59022 c!7496) b!59036))

(assert (= (and b!59022 (not c!7496)) b!59039))

(assert (= (and b!59036 res!32804) b!59028))

(assert (= (or b!59036 b!59039) bm!4405))

(assert (= (and b!59022 res!32806) b!59026))

(assert (= (and b!59026 c!7497) b!59025))

(assert (= (and b!59026 (not c!7497)) b!59031))

(assert (= (and b!59025 res!32809) b!59032))

(assert (= (or b!59025 b!59031) bm!4407))

(declare-fun b_lambda!2591 () Bool)

(assert (=> (not b_lambda!2591) (not b!59033)))

(declare-fun tb!1321 () Bool)

(declare-fun t!4781 () Bool)

(assert (=> (and b!58610 (= (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) (defaultEntry!2042 newMap!16)) t!4781) tb!1321))

(declare-fun result!2381 () Bool)

(assert (=> tb!1321 (= result!2381 tp_is_empty!2395)))

(assert (=> b!59033 t!4781))

(declare-fun b_and!3569 () Bool)

(assert (= b_and!3565 (and (=> t!4781 result!2381) b_and!3569)))

(declare-fun t!4783 () Bool)

(declare-fun tb!1323 () Bool)

(assert (=> (and b!58607 (= (defaultEntry!2042 newMap!16) (defaultEntry!2042 newMap!16)) t!4783) tb!1323))

(declare-fun result!2383 () Bool)

(assert (= result!2383 result!2381))

(assert (=> b!59033 t!4783))

(declare-fun b_and!3571 () Bool)

(assert (= b_and!3567 (and (=> t!4783 result!2383) b_and!3571)))

(declare-fun m!50659 () Bool)

(assert (=> b!59032 m!50659))

(assert (=> d!11231 m!50657))

(assert (=> b!59035 m!50643))

(assert (=> b!59035 m!50643))

(assert (=> b!59035 m!50645))

(declare-fun m!50661 () Bool)

(assert (=> bm!4405 m!50661))

(assert (=> b!59020 m!50643))

(assert (=> b!59020 m!50643))

(assert (=> b!59020 m!50645))

(declare-fun m!50663 () Bool)

(assert (=> b!59034 m!50663))

(declare-fun m!50665 () Bool)

(assert (=> b!59034 m!50665))

(declare-fun m!50667 () Bool)

(assert (=> b!59034 m!50667))

(declare-fun m!50669 () Bool)

(assert (=> b!59034 m!50669))

(declare-fun m!50671 () Bool)

(assert (=> b!59034 m!50671))

(declare-fun m!50673 () Bool)

(assert (=> b!59034 m!50673))

(declare-fun m!50675 () Bool)

(assert (=> b!59034 m!50675))

(declare-fun m!50677 () Bool)

(assert (=> b!59034 m!50677))

(assert (=> b!59034 m!50643))

(declare-fun m!50679 () Bool)

(assert (=> b!59034 m!50679))

(declare-fun m!50681 () Bool)

(assert (=> b!59034 m!50681))

(declare-fun m!50683 () Bool)

(assert (=> b!59034 m!50683))

(assert (=> b!59034 m!50663))

(declare-fun m!50685 () Bool)

(assert (=> b!59034 m!50685))

(declare-fun m!50687 () Bool)

(assert (=> b!59034 m!50687))

(declare-fun m!50689 () Bool)

(assert (=> b!59034 m!50689))

(assert (=> b!59034 m!50673))

(declare-fun m!50691 () Bool)

(assert (=> b!59034 m!50691))

(assert (=> b!59034 m!50685))

(assert (=> b!59034 m!50679))

(declare-fun m!50693 () Bool)

(assert (=> b!59034 m!50693))

(assert (=> b!59033 m!50643))

(declare-fun m!50695 () Bool)

(assert (=> b!59033 m!50695))

(declare-fun m!50697 () Bool)

(assert (=> b!59033 m!50697))

(declare-fun m!50699 () Bool)

(assert (=> b!59033 m!50699))

(assert (=> b!59033 m!50697))

(declare-fun m!50701 () Bool)

(assert (=> b!59033 m!50701))

(assert (=> b!59033 m!50699))

(assert (=> b!59033 m!50643))

(assert (=> bm!4409 m!50691))

(assert (=> b!59024 m!50643))

(assert (=> b!59024 m!50643))

(declare-fun m!50703 () Bool)

(assert (=> b!59024 m!50703))

(declare-fun m!50705 () Bool)

(assert (=> b!59028 m!50705))

(declare-fun m!50707 () Bool)

(assert (=> b!59030 m!50707))

(declare-fun m!50709 () Bool)

(assert (=> bm!4410 m!50709))

(declare-fun m!50711 () Bool)

(assert (=> bm!4407 m!50711))

(assert (=> b!58932 d!11231))

(declare-fun d!11233 () Bool)

(declare-fun e!38850 () Bool)

(assert (=> d!11233 e!38850))

(declare-fun res!32812 () Bool)

(assert (=> d!11233 (=> res!32812 e!38850)))

(declare-fun lt!23839 () Bool)

(assert (=> d!11233 (= res!32812 (not lt!23839))))

(declare-fun lt!23841 () Bool)

(assert (=> d!11233 (= lt!23839 lt!23841)))

(declare-fun lt!23840 () Unit!1550)

(declare-fun e!38849 () Unit!1550)

(assert (=> d!11233 (= lt!23840 e!38849)))

(declare-fun c!7502 () Bool)

(assert (=> d!11233 (= c!7502 lt!23841)))

(assert (=> d!11233 (= lt!23841 (containsKey!126 (toList!693 lt!23704) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!11233 (= (contains!682 lt!23704 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!23839)))

(declare-fun b!59041 () Bool)

(declare-fun lt!23842 () Unit!1550)

(assert (=> b!59041 (= e!38849 lt!23842)))

(assert (=> b!59041 (= lt!23842 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 lt!23704) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!59041 (isDefined!76 (getValueByKey!122 (toList!693 lt!23704) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!59042 () Bool)

(declare-fun Unit!1563 () Unit!1550)

(assert (=> b!59042 (= e!38849 Unit!1563)))

(declare-fun b!59043 () Bool)

(assert (=> b!59043 (= e!38850 (isDefined!76 (getValueByKey!122 (toList!693 lt!23704) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!11233 c!7502) b!59041))

(assert (= (and d!11233 (not c!7502)) b!59042))

(assert (= (and d!11233 (not res!32812)) b!59043))

(assert (=> d!11233 m!50485))

(declare-fun m!50713 () Bool)

(assert (=> d!11233 m!50713))

(assert (=> b!59041 m!50485))

(declare-fun m!50715 () Bool)

(assert (=> b!59041 m!50715))

(assert (=> b!59041 m!50485))

(declare-fun m!50717 () Bool)

(assert (=> b!59041 m!50717))

(assert (=> b!59041 m!50717))

(declare-fun m!50719 () Bool)

(assert (=> b!59041 m!50719))

(assert (=> b!59043 m!50485))

(assert (=> b!59043 m!50717))

(assert (=> b!59043 m!50717))

(assert (=> b!59043 m!50719))

(assert (=> b!58790 d!11233))

(declare-fun d!11235 () Bool)

(declare-fun e!38853 () Bool)

(assert (=> d!11235 e!38853))

(declare-fun res!32817 () Bool)

(assert (=> d!11235 (=> (not res!32817) (not e!38853))))

(declare-fun lt!23848 () SeekEntryResult!230)

(assert (=> d!11235 (= res!32817 ((_ is Found!230) lt!23848))))

(assert (=> d!11235 (= lt!23848 (seekEntryOrOpen!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (_keys!3665 newMap!16) (mask!5925 newMap!16)))))

(declare-fun lt!23847 () Unit!1550)

(declare-fun choose!310 (array!3697 array!3699 (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 (_ BitVec 64) Int) Unit!1550)

(assert (=> d!11235 (= lt!23847 (choose!310 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (defaultEntry!2042 newMap!16)))))

(assert (=> d!11235 (validMask!0 (mask!5925 newMap!16))))

(assert (=> d!11235 (= (lemmaInListMapThenSeekEntryOrOpenFindsIt!15 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (defaultEntry!2042 newMap!16)) lt!23847)))

(declare-fun b!59048 () Bool)

(declare-fun res!32818 () Bool)

(assert (=> b!59048 (=> (not res!32818) (not e!38853))))

(assert (=> b!59048 (= res!32818 (inRange!0 (index!3044 lt!23848) (mask!5925 newMap!16)))))

(declare-fun b!59049 () Bool)

(assert (=> b!59049 (= e!38853 (= (select (arr!1768 (_keys!3665 newMap!16)) (index!3044 lt!23848)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(assert (=> b!59049 (and (bvsge (index!3044 lt!23848) #b00000000000000000000000000000000) (bvslt (index!3044 lt!23848) (size!1999 (_keys!3665 newMap!16))))))

(assert (= (and d!11235 res!32817) b!59048))

(assert (= (and b!59048 res!32818) b!59049))

(assert (=> d!11235 m!50353))

(assert (=> d!11235 m!50557))

(assert (=> d!11235 m!50353))

(declare-fun m!50721 () Bool)

(assert (=> d!11235 m!50721))

(assert (=> d!11235 m!50657))

(declare-fun m!50723 () Bool)

(assert (=> b!59048 m!50723))

(declare-fun m!50725 () Bool)

(assert (=> b!59049 m!50725))

(assert (=> bm!4380 d!11235))

(declare-fun d!11237 () Bool)

(declare-fun res!32819 () Bool)

(declare-fun e!38854 () Bool)

(assert (=> d!11237 (=> res!32819 e!38854)))

(assert (=> d!11237 (= res!32819 (= (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(assert (=> d!11237 (= (arrayContainsKey!0 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) e!38854)))

(declare-fun b!59050 () Bool)

(declare-fun e!38855 () Bool)

(assert (=> b!59050 (= e!38854 e!38855)))

(declare-fun res!32820 () Bool)

(assert (=> b!59050 (=> (not res!32820) (not e!38855))))

(assert (=> b!59050 (= res!32820 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992))))))))

(declare-fun b!59051 () Bool)

(assert (=> b!59051 (= e!38855 (arrayContainsKey!0 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!11237 (not res!32819)) b!59050))

(assert (= (and b!59050 res!32820) b!59051))

(declare-fun m!50727 () Bool)

(assert (=> d!11237 m!50727))

(assert (=> b!59051 m!50353))

(declare-fun m!50729 () Bool)

(assert (=> b!59051 m!50729))

(assert (=> b!58962 d!11237))

(assert (=> d!11187 d!11231))

(declare-fun d!11239 () Bool)

(declare-fun lt!23851 () Bool)

(define-sort InoxSet (T) (Array T Bool))

(declare-fun content!63 (List!1436) (InoxSet (_ BitVec 64)))

(assert (=> d!11239 (= lt!23851 (select (content!63 Nil!1433) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(declare-fun e!38861 () Bool)

(assert (=> d!11239 (= lt!23851 e!38861)))

(declare-fun res!32825 () Bool)

(assert (=> d!11239 (=> (not res!32825) (not e!38861))))

(assert (=> d!11239 (= res!32825 ((_ is Cons!1432) Nil!1433))))

(assert (=> d!11239 (= (contains!683 Nil!1433 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) lt!23851)))

(declare-fun b!59056 () Bool)

(declare-fun e!38860 () Bool)

(assert (=> b!59056 (= e!38861 e!38860)))

(declare-fun res!32826 () Bool)

(assert (=> b!59056 (=> res!32826 e!38860)))

(assert (=> b!59056 (= res!32826 (= (h!2013 Nil!1433) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(declare-fun b!59057 () Bool)

(assert (=> b!59057 (= e!38860 (contains!683 (t!4769 Nil!1433) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(assert (= (and d!11239 res!32825) b!59056))

(assert (= (and b!59056 (not res!32826)) b!59057))

(declare-fun m!50731 () Bool)

(assert (=> d!11239 m!50731))

(assert (=> d!11239 m!50353))

(declare-fun m!50733 () Bool)

(assert (=> d!11239 m!50733))

(assert (=> b!59057 m!50353))

(declare-fun m!50735 () Bool)

(assert (=> b!59057 m!50735))

(assert (=> b!58983 d!11239))

(declare-fun d!11241 () Bool)

(declare-fun e!38863 () Bool)

(assert (=> d!11241 e!38863))

(declare-fun res!32827 () Bool)

(assert (=> d!11241 (=> res!32827 e!38863)))

(declare-fun lt!23852 () Bool)

(assert (=> d!11241 (= res!32827 (not lt!23852))))

(declare-fun lt!23854 () Bool)

(assert (=> d!11241 (= lt!23852 lt!23854)))

(declare-fun lt!23853 () Unit!1550)

(declare-fun e!38862 () Unit!1550)

(assert (=> d!11241 (= lt!23853 e!38862)))

(declare-fun c!7503 () Bool)

(assert (=> d!11241 (= c!7503 lt!23854)))

(assert (=> d!11241 (= lt!23854 (containsKey!126 (toList!693 call!4384) (select (arr!1768 (_keys!3665 newMap!16)) (index!3044 lt!23774))))))

(assert (=> d!11241 (= (contains!682 call!4384 (select (arr!1768 (_keys!3665 newMap!16)) (index!3044 lt!23774))) lt!23852)))

(declare-fun b!59058 () Bool)

(declare-fun lt!23855 () Unit!1550)

(assert (=> b!59058 (= e!38862 lt!23855)))

(assert (=> b!59058 (= lt!23855 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 call!4384) (select (arr!1768 (_keys!3665 newMap!16)) (index!3044 lt!23774))))))

(assert (=> b!59058 (isDefined!76 (getValueByKey!122 (toList!693 call!4384) (select (arr!1768 (_keys!3665 newMap!16)) (index!3044 lt!23774))))))

(declare-fun b!59059 () Bool)

(declare-fun Unit!1564 () Unit!1550)

(assert (=> b!59059 (= e!38862 Unit!1564)))

(declare-fun b!59060 () Bool)

(assert (=> b!59060 (= e!38863 (isDefined!76 (getValueByKey!122 (toList!693 call!4384) (select (arr!1768 (_keys!3665 newMap!16)) (index!3044 lt!23774)))))))

(assert (= (and d!11241 c!7503) b!59058))

(assert (= (and d!11241 (not c!7503)) b!59059))

(assert (= (and d!11241 (not res!32827)) b!59060))

(assert (=> d!11241 m!50575))

(declare-fun m!50737 () Bool)

(assert (=> d!11241 m!50737))

(assert (=> b!59058 m!50575))

(declare-fun m!50739 () Bool)

(assert (=> b!59058 m!50739))

(assert (=> b!59058 m!50575))

(declare-fun m!50741 () Bool)

(assert (=> b!59058 m!50741))

(assert (=> b!59058 m!50741))

(declare-fun m!50743 () Bool)

(assert (=> b!59058 m!50743))

(assert (=> b!59060 m!50575))

(assert (=> b!59060 m!50741))

(assert (=> b!59060 m!50741))

(assert (=> b!59060 m!50743))

(assert (=> b!58935 d!11241))

(declare-fun d!11243 () Bool)

(declare-fun e!38866 () Bool)

(assert (=> d!11243 e!38866))

(declare-fun res!32830 () Bool)

(assert (=> d!11243 (=> (not res!32830) (not e!38866))))

(assert (=> d!11243 (= res!32830 (and (bvsge (index!3044 lt!23774) #b00000000000000000000000000000000) (bvslt (index!3044 lt!23774) (size!1999 (_keys!3665 newMap!16)))))))

(declare-fun lt!23858 () Unit!1550)

(declare-fun choose!311 (array!3697 array!3699 (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 (_ BitVec 32) Int) Unit!1550)

(assert (=> d!11243 (= lt!23858 (choose!311 (_keys!3665 newMap!16) lt!23792 (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (index!3044 lt!23774) (defaultEntry!2042 newMap!16)))))

(assert (=> d!11243 (validMask!0 (mask!5925 newMap!16))))

(assert (=> d!11243 (= (lemmaValidKeyInArrayIsInListMap!74 (_keys!3665 newMap!16) lt!23792 (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (index!3044 lt!23774) (defaultEntry!2042 newMap!16)) lt!23858)))

(declare-fun b!59063 () Bool)

(assert (=> b!59063 (= e!38866 (contains!682 (getCurrentListMap!389 (_keys!3665 newMap!16) lt!23792 (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (select (arr!1768 (_keys!3665 newMap!16)) (index!3044 lt!23774))))))

(assert (= (and d!11243 res!32830) b!59063))

(declare-fun m!50745 () Bool)

(assert (=> d!11243 m!50745))

(assert (=> d!11243 m!50657))

(declare-fun m!50747 () Bool)

(assert (=> b!59063 m!50747))

(assert (=> b!59063 m!50575))

(assert (=> b!59063 m!50747))

(assert (=> b!59063 m!50575))

(declare-fun m!50749 () Bool)

(assert (=> b!59063 m!50749))

(assert (=> b!58935 d!11243))

(declare-fun d!11245 () Bool)

(declare-fun e!38869 () Bool)

(assert (=> d!11245 e!38869))

(declare-fun res!32833 () Bool)

(assert (=> d!11245 (=> (not res!32833) (not e!38869))))

(assert (=> d!11245 (= res!32833 (and (bvsge (index!3044 lt!23774) #b00000000000000000000000000000000) (bvslt (index!3044 lt!23774) (size!2000 (_values!2025 newMap!16)))))))

(declare-fun lt!23861 () Unit!1550)

(declare-fun choose!312 (array!3697 array!3699 (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 (_ BitVec 32) (_ BitVec 64) V!2841 Int) Unit!1550)

(assert (=> d!11245 (= lt!23861 (choose!312 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (index!3044 lt!23774) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2042 newMap!16)))))

(assert (=> d!11245 (validMask!0 (mask!5925 newMap!16))))

(assert (=> d!11245 (= (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!15 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (index!3044 lt!23774) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2042 newMap!16)) lt!23861)))

(declare-fun b!59066 () Bool)

(assert (=> b!59066 (= e!38869 (= (+!81 (getCurrentListMap!389 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!389 (_keys!3665 newMap!16) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (index!3044 lt!23774) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16))) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))))))

(assert (= (and d!11245 res!32833) b!59066))

(assert (=> d!11245 m!50353))

(assert (=> d!11245 m!50369))

(declare-fun m!50751 () Bool)

(assert (=> d!11245 m!50751))

(assert (=> d!11245 m!50657))

(assert (=> b!59066 m!50481))

(assert (=> b!59066 m!50481))

(declare-fun m!50753 () Bool)

(assert (=> b!59066 m!50753))

(assert (=> b!59066 m!50559))

(declare-fun m!50755 () Bool)

(assert (=> b!59066 m!50755))

(assert (=> b!58935 d!11245))

(declare-fun d!11247 () Bool)

(declare-fun get!1076 (Option!128) V!2841)

(assert (=> d!11247 (= (apply!66 lt!23704 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1076 (getValueByKey!122 (toList!693 lt!23704) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2556 () Bool)

(assert (= bs!2556 d!11247))

(declare-fun m!50757 () Bool)

(assert (=> bs!2556 m!50757))

(assert (=> bs!2556 m!50757))

(declare-fun m!50759 () Bool)

(assert (=> bs!2556 m!50759))

(assert (=> b!58794 d!11247))

(declare-fun b!59079 () Bool)

(declare-fun e!38877 () SeekEntryResult!230)

(declare-fun lt!23869 () SeekEntryResult!230)

(assert (=> b!59079 (= e!38877 (MissingZero!230 (index!3045 lt!23869)))))

(declare-fun b!59080 () Bool)

(declare-fun c!7512 () Bool)

(declare-fun lt!23868 () (_ BitVec 64))

(assert (=> b!59080 (= c!7512 (= lt!23868 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!38878 () SeekEntryResult!230)

(assert (=> b!59080 (= e!38878 e!38877)))

(declare-fun b!59081 () Bool)

(assert (=> b!59081 (= e!38878 (Found!230 (index!3045 lt!23869)))))

(declare-fun b!59082 () Bool)

(declare-fun e!38876 () SeekEntryResult!230)

(assert (=> b!59082 (= e!38876 e!38878)))

(assert (=> b!59082 (= lt!23868 (select (arr!1768 (_keys!3665 newMap!16)) (index!3045 lt!23869)))))

(declare-fun c!7510 () Bool)

(assert (=> b!59082 (= c!7510 (= lt!23868 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(declare-fun d!11249 () Bool)

(declare-fun lt!23870 () SeekEntryResult!230)

(assert (=> d!11249 (and (or ((_ is Undefined!230) lt!23870) (not ((_ is Found!230) lt!23870)) (and (bvsge (index!3044 lt!23870) #b00000000000000000000000000000000) (bvslt (index!3044 lt!23870) (size!1999 (_keys!3665 newMap!16))))) (or ((_ is Undefined!230) lt!23870) ((_ is Found!230) lt!23870) (not ((_ is MissingZero!230) lt!23870)) (and (bvsge (index!3043 lt!23870) #b00000000000000000000000000000000) (bvslt (index!3043 lt!23870) (size!1999 (_keys!3665 newMap!16))))) (or ((_ is Undefined!230) lt!23870) ((_ is Found!230) lt!23870) ((_ is MissingZero!230) lt!23870) (not ((_ is MissingVacant!230) lt!23870)) (and (bvsge (index!3046 lt!23870) #b00000000000000000000000000000000) (bvslt (index!3046 lt!23870) (size!1999 (_keys!3665 newMap!16))))) (or ((_ is Undefined!230) lt!23870) (ite ((_ is Found!230) lt!23870) (= (select (arr!1768 (_keys!3665 newMap!16)) (index!3044 lt!23870)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (ite ((_ is MissingZero!230) lt!23870) (= (select (arr!1768 (_keys!3665 newMap!16)) (index!3043 lt!23870)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!230) lt!23870) (= (select (arr!1768 (_keys!3665 newMap!16)) (index!3046 lt!23870)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11249 (= lt!23870 e!38876)))

(declare-fun c!7511 () Bool)

(assert (=> d!11249 (= c!7511 (and ((_ is Intermediate!230) lt!23869) (undefined!1042 lt!23869)))))

(declare-fun seekKeyOrZeroOrLongMinValue!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!3697 (_ BitVec 32)) SeekEntryResult!230)

(declare-fun toIndex!0 ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))

(assert (=> d!11249 (= lt!23869 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (mask!5925 newMap!16)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (_keys!3665 newMap!16) (mask!5925 newMap!16)))))

(assert (=> d!11249 (validMask!0 (mask!5925 newMap!16))))

(assert (=> d!11249 (= (seekEntryOrOpen!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (_keys!3665 newMap!16) (mask!5925 newMap!16)) lt!23870)))

(declare-fun b!59083 () Bool)

(declare-fun seekKeyOrZeroReturnVacant!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!3697 (_ BitVec 32)) SeekEntryResult!230)

(assert (=> b!59083 (= e!38877 (seekKeyOrZeroReturnVacant!0 (x!10005 lt!23869) (index!3045 lt!23869) (index!3045 lt!23869) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (_keys!3665 newMap!16) (mask!5925 newMap!16)))))

(declare-fun b!59084 () Bool)

(assert (=> b!59084 (= e!38876 Undefined!230)))

(assert (= (and d!11249 c!7511) b!59084))

(assert (= (and d!11249 (not c!7511)) b!59082))

(assert (= (and b!59082 c!7510) b!59081))

(assert (= (and b!59082 (not c!7510)) b!59080))

(assert (= (and b!59080 c!7512) b!59079))

(assert (= (and b!59080 (not c!7512)) b!59083))

(declare-fun m!50761 () Bool)

(assert (=> b!59082 m!50761))

(declare-fun m!50763 () Bool)

(assert (=> d!11249 m!50763))

(declare-fun m!50765 () Bool)

(assert (=> d!11249 m!50765))

(assert (=> d!11249 m!50657))

(declare-fun m!50767 () Bool)

(assert (=> d!11249 m!50767))

(assert (=> d!11249 m!50353))

(declare-fun m!50769 () Bool)

(assert (=> d!11249 m!50769))

(assert (=> d!11249 m!50353))

(assert (=> d!11249 m!50767))

(declare-fun m!50771 () Bool)

(assert (=> d!11249 m!50771))

(assert (=> b!59083 m!50353))

(declare-fun m!50773 () Bool)

(assert (=> b!59083 m!50773))

(assert (=> bm!4374 d!11249))

(declare-fun d!11251 () Bool)

(assert (=> d!11251 (= (inRange!0 (ite c!7462 (ite c!7472 (index!3044 lt!23788) (ite c!7471 (index!3043 lt!23771) (index!3046 lt!23771))) (ite c!7469 (index!3044 lt!23777) (ite c!7473 (index!3043 lt!23779) (index!3046 lt!23779)))) (mask!5925 newMap!16)) (and (bvsge (ite c!7462 (ite c!7472 (index!3044 lt!23788) (ite c!7471 (index!3043 lt!23771) (index!3046 lt!23771))) (ite c!7469 (index!3044 lt!23777) (ite c!7473 (index!3043 lt!23779) (index!3046 lt!23779)))) #b00000000000000000000000000000000) (bvslt (ite c!7462 (ite c!7472 (index!3044 lt!23788) (ite c!7471 (index!3043 lt!23771) (index!3046 lt!23771))) (ite c!7469 (index!3044 lt!23777) (ite c!7473 (index!3043 lt!23779) (index!3046 lt!23779)))) (bvadd (mask!5925 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4383 d!11251))

(declare-fun d!11253 () Bool)

(declare-fun res!32838 () Bool)

(declare-fun e!38883 () Bool)

(assert (=> d!11253 (=> res!32838 e!38883)))

(assert (=> d!11253 (= res!32838 (and ((_ is Cons!1433) (toList!693 lt!23596)) (= (_1!1029 (h!2014 (toList!693 lt!23596))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355))))))

(assert (=> d!11253 (= (containsKey!126 (toList!693 lt!23596) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) e!38883)))

(declare-fun b!59089 () Bool)

(declare-fun e!38884 () Bool)

(assert (=> b!59089 (= e!38883 e!38884)))

(declare-fun res!32839 () Bool)

(assert (=> b!59089 (=> (not res!32839) (not e!38884))))

(assert (=> b!59089 (= res!32839 (and (or (not ((_ is Cons!1433) (toList!693 lt!23596))) (bvsle (_1!1029 (h!2014 (toList!693 lt!23596))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355))) ((_ is Cons!1433) (toList!693 lt!23596)) (bvslt (_1!1029 (h!2014 (toList!693 lt!23596))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355))))))

(declare-fun b!59090 () Bool)

(assert (=> b!59090 (= e!38884 (containsKey!126 (t!4770 (toList!693 lt!23596)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(assert (= (and d!11253 (not res!32838)) b!59089))

(assert (= (and b!59089 res!32839) b!59090))

(assert (=> b!59090 m!50353))

(declare-fun m!50775 () Bool)

(assert (=> b!59090 m!50775))

(assert (=> d!11201 d!11253))

(declare-fun d!11255 () Bool)

(declare-fun e!38887 () Bool)

(assert (=> d!11255 e!38887))

(declare-fun res!32844 () Bool)

(assert (=> d!11255 (=> (not res!32844) (not e!38887))))

(declare-fun lt!23881 () ListLongMap!1355)

(assert (=> d!11255 (= res!32844 (contains!682 lt!23881 (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun lt!23882 () List!1437)

(assert (=> d!11255 (= lt!23881 (ListLongMap!1356 lt!23882))))

(declare-fun lt!23879 () Unit!1550)

(declare-fun lt!23880 () Unit!1550)

(assert (=> d!11255 (= lt!23879 lt!23880)))

(assert (=> d!11255 (= (getValueByKey!122 lt!23882 (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) (Some!127 (_2!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun lemmaContainsTupThenGetReturnValue!42 (List!1437 (_ BitVec 64) V!2841) Unit!1550)

(assert (=> d!11255 (= lt!23880 (lemmaContainsTupThenGetReturnValue!42 lt!23882 (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun insertStrictlySorted!45 (List!1437 (_ BitVec 64) V!2841) List!1437)

(assert (=> d!11255 (= lt!23882 (insertStrictlySorted!45 (toList!693 call!4327) (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(assert (=> d!11255 (= (+!81 call!4327 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) lt!23881)))

(declare-fun b!59095 () Bool)

(declare-fun res!32845 () Bool)

(assert (=> b!59095 (=> (not res!32845) (not e!38887))))

(assert (=> b!59095 (= res!32845 (= (getValueByKey!122 (toList!693 lt!23881) (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) (Some!127 (_2!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(declare-fun b!59096 () Bool)

(declare-fun contains!684 (List!1437 tuple2!2036) Bool)

(assert (=> b!59096 (= e!38887 (contains!684 (toList!693 lt!23881) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))

(assert (= (and d!11255 res!32844) b!59095))

(assert (= (and b!59095 res!32845) b!59096))

(declare-fun m!50777 () Bool)

(assert (=> d!11255 m!50777))

(declare-fun m!50779 () Bool)

(assert (=> d!11255 m!50779))

(declare-fun m!50781 () Bool)

(assert (=> d!11255 m!50781))

(declare-fun m!50783 () Bool)

(assert (=> d!11255 m!50783))

(declare-fun m!50785 () Bool)

(assert (=> b!59095 m!50785))

(declare-fun m!50787 () Bool)

(assert (=> b!59096 m!50787))

(assert (=> b!58796 d!11255))

(declare-fun d!11257 () Bool)

(declare-fun e!38889 () Bool)

(assert (=> d!11257 e!38889))

(declare-fun res!32846 () Bool)

(assert (=> d!11257 (=> res!32846 e!38889)))

(declare-fun lt!23883 () Bool)

(assert (=> d!11257 (= res!32846 (not lt!23883))))

(declare-fun lt!23885 () Bool)

(assert (=> d!11257 (= lt!23883 lt!23885)))

(declare-fun lt!23884 () Unit!1550)

(declare-fun e!38888 () Unit!1550)

(assert (=> d!11257 (= lt!23884 e!38888)))

(declare-fun c!7513 () Bool)

(assert (=> d!11257 (= c!7513 lt!23885)))

(assert (=> d!11257 (= lt!23885 (containsKey!126 (toList!693 call!4382) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(assert (=> d!11257 (= (contains!682 call!4382 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) lt!23883)))

(declare-fun b!59097 () Bool)

(declare-fun lt!23886 () Unit!1550)

(assert (=> b!59097 (= e!38888 lt!23886)))

(assert (=> b!59097 (= lt!23886 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 call!4382) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(assert (=> b!59097 (isDefined!76 (getValueByKey!122 (toList!693 call!4382) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(declare-fun b!59098 () Bool)

(declare-fun Unit!1565 () Unit!1550)

(assert (=> b!59098 (= e!38888 Unit!1565)))

(declare-fun b!59099 () Bool)

(assert (=> b!59099 (= e!38889 (isDefined!76 (getValueByKey!122 (toList!693 call!4382) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355))))))

(assert (= (and d!11257 c!7513) b!59097))

(assert (= (and d!11257 (not c!7513)) b!59098))

(assert (= (and d!11257 (not res!32846)) b!59099))

(assert (=> d!11257 m!50353))

(declare-fun m!50789 () Bool)

(assert (=> d!11257 m!50789))

(assert (=> b!59097 m!50353))

(declare-fun m!50791 () Bool)

(assert (=> b!59097 m!50791))

(assert (=> b!59097 m!50353))

(declare-fun m!50793 () Bool)

(assert (=> b!59097 m!50793))

(assert (=> b!59097 m!50793))

(declare-fun m!50795 () Bool)

(assert (=> b!59097 m!50795))

(assert (=> b!59099 m!50353))

(assert (=> b!59099 m!50793))

(assert (=> b!59099 m!50793))

(assert (=> b!59099 m!50795))

(assert (=> b!58911 d!11257))

(declare-fun d!11259 () Bool)

(declare-fun res!32847 () Bool)

(declare-fun e!38890 () Bool)

(assert (=> d!11259 (=> (not res!32847) (not e!38890))))

(assert (=> d!11259 (= res!32847 (simpleValid!42 (v!2377 (underlying!223 thiss!992))))))

(assert (=> d!11259 (= (valid!256 (v!2377 (underlying!223 thiss!992))) e!38890)))

(declare-fun b!59100 () Bool)

(declare-fun res!32848 () Bool)

(assert (=> b!59100 (=> (not res!32848) (not e!38890))))

(assert (=> b!59100 (= res!32848 (= (arrayCountValidKeys!0 (_keys!3665 (v!2377 (underlying!223 thiss!992))) #b00000000000000000000000000000000 (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992))))) (_size!357 (v!2377 (underlying!223 thiss!992)))))))

(declare-fun b!59101 () Bool)

(declare-fun res!32849 () Bool)

(assert (=> b!59101 (=> (not res!32849) (not e!38890))))

(assert (=> b!59101 (= res!32849 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (mask!5925 (v!2377 (underlying!223 thiss!992)))))))

(declare-fun b!59102 () Bool)

(assert (=> b!59102 (= e!38890 (arrayNoDuplicates!0 (_keys!3665 (v!2377 (underlying!223 thiss!992))) #b00000000000000000000000000000000 Nil!1433))))

(assert (= (and d!11259 res!32847) b!59100))

(assert (= (and b!59100 res!32848) b!59101))

(assert (= (and b!59101 res!32849) b!59102))

(declare-fun m!50797 () Bool)

(assert (=> d!11259 m!50797))

(declare-fun m!50799 () Bool)

(assert (=> b!59100 m!50799))

(declare-fun m!50801 () Bool)

(assert (=> b!59101 m!50801))

(declare-fun m!50803 () Bool)

(assert (=> b!59102 m!50803))

(assert (=> d!11197 d!11259))

(declare-fun d!11261 () Bool)

(assert (=> d!11261 (= (validKeyInArray!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (and (not (= (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!58980 d!11261))

(declare-fun b!59137 () Bool)

(declare-fun res!32875 () Bool)

(declare-fun call!4426 () Bool)

(assert (=> b!59137 (= res!32875 call!4426)))

(declare-fun e!38913 () Bool)

(assert (=> b!59137 (=> (not res!32875) (not e!38913))))

(declare-fun b!59138 () Bool)

(declare-fun res!32876 () Bool)

(declare-fun e!38907 () Bool)

(assert (=> b!59138 (=> (not res!32876) (not e!38907))))

(declare-fun lt!23961 () SeekEntryResult!230)

(assert (=> b!59138 (= res!32876 (= (select (arr!1768 (_keys!3665 newMap!16)) (index!3043 lt!23961)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun call!4425 () Bool)

(declare-fun bm!4420 () Bool)

(assert (=> bm!4420 (= call!4425 (arrayContainsKey!0 (_keys!3665 newMap!16) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!59139 () Bool)

(declare-fun e!38914 () Unit!1550)

(declare-fun Unit!1566 () Unit!1550)

(assert (=> b!59139 (= e!38914 Unit!1566)))

(declare-fun lt!23955 () Unit!1550)

(assert (=> b!59139 (= lt!23955 (lemmaInListMapThenSeekEntryOrOpenFindsIt!15 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (defaultEntry!2042 newMap!16)))))

(declare-fun lt!23958 () SeekEntryResult!230)

(declare-fun call!4423 () SeekEntryResult!230)

(assert (=> b!59139 (= lt!23958 call!4423)))

(declare-fun res!32868 () Bool)

(assert (=> b!59139 (= res!32868 ((_ is Found!230) lt!23958))))

(assert (=> b!59139 (=> (not res!32868) (not e!38913))))

(assert (=> b!59139 e!38913))

(declare-fun lt!23948 () Unit!1550)

(assert (=> b!59139 (= lt!23948 lt!23955)))

(assert (=> b!59139 false))

(declare-fun b!59140 () Bool)

(declare-fun e!38909 () Bool)

(assert (=> b!59140 (= e!38909 ((_ is Undefined!230) lt!23961))))

(declare-fun bm!4421 () Bool)

(assert (=> bm!4421 (= call!4423 (seekEntryOrOpen!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (_keys!3665 newMap!16) (mask!5925 newMap!16)))))

(declare-fun bm!4422 () Bool)

(declare-fun call!4424 () Bool)

(assert (=> bm!4422 (= call!4424 call!4426)))

(declare-fun bm!4423 () Bool)

(declare-fun c!7524 () Bool)

(declare-fun c!7523 () Bool)

(assert (=> bm!4423 (= call!4426 (inRange!0 (ite c!7524 (index!3044 lt!23958) (ite c!7523 (index!3043 lt!23961) (index!3046 lt!23961))) (mask!5925 newMap!16)))))

(declare-fun b!59142 () Bool)

(declare-fun e!38911 () Unit!1550)

(declare-fun Unit!1567 () Unit!1550)

(assert (=> b!59142 (= e!38911 Unit!1567)))

(declare-fun lt!23965 () Unit!1550)

(declare-fun lemmaArrayContainsKeyThenInListMap!5 (array!3697 array!3699 (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 (_ BitVec 64) (_ BitVec 32) Int) Unit!1550)

(assert (=> b!59142 (= lt!23965 (lemmaArrayContainsKeyThenInListMap!5 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(assert (=> b!59142 (contains!682 (getCurrentListMap!389 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355))))

(declare-fun lt!23954 () Unit!1550)

(assert (=> b!59142 (= lt!23954 lt!23965)))

(assert (=> b!59142 false))

(declare-fun b!59143 () Bool)

(assert (=> b!59143 (= e!38907 (not call!4425))))

(declare-fun b!59144 () Bool)

(assert (=> b!59144 (= e!38913 (= (select (arr!1768 (_keys!3665 newMap!16)) (index!3044 lt!23958)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(declare-fun b!59145 () Bool)

(declare-fun lt!23963 () Unit!1550)

(assert (=> b!59145 (= e!38914 lt!23963)))

(assert (=> b!59145 (= lt!23963 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!15 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (defaultEntry!2042 newMap!16)))))

(assert (=> b!59145 (= lt!23961 call!4423)))

(assert (=> b!59145 (= c!7523 ((_ is MissingZero!230) lt!23961))))

(declare-fun e!38908 () Bool)

(assert (=> b!59145 e!38908))

(declare-fun b!59146 () Bool)

(declare-fun res!32869 () Bool)

(declare-fun e!38912 () Bool)

(assert (=> b!59146 (=> (not res!32869) (not e!38912))))

(declare-fun lt!23976 () tuple2!2034)

(assert (=> b!59146 (= res!32869 (valid!256 (_2!1028 lt!23976)))))

(declare-fun b!59147 () Bool)

(declare-fun res!32870 () Bool)

(assert (=> b!59147 (=> (not res!32870) (not e!38907))))

(assert (=> b!59147 (= res!32870 call!4424)))

(assert (=> b!59147 (= e!38908 e!38907)))

(declare-fun b!59148 () Bool)

(assert (=> b!59148 (= e!38912 (= (map!1103 (_2!1028 lt!23976)) (+!81 (map!1103 newMap!16) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!59149 () Bool)

(declare-fun res!32874 () Bool)

(assert (=> b!59149 (=> (not res!32874) (not e!38912))))

(assert (=> b!59149 (= res!32874 (contains!682 (map!1103 (_2!1028 lt!23976)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(declare-fun b!59150 () Bool)

(declare-fun e!38910 () Bool)

(assert (=> b!59150 (= e!38909 e!38910)))

(declare-fun res!32873 () Bool)

(assert (=> b!59150 (= res!32873 call!4424)))

(assert (=> b!59150 (=> (not res!32873) (not e!38910))))

(declare-fun b!59141 () Bool)

(declare-fun c!7525 () Bool)

(assert (=> b!59141 (= c!7525 ((_ is MissingVacant!230) lt!23961))))

(assert (=> b!59141 (= e!38908 e!38909)))

(declare-fun d!11263 () Bool)

(assert (=> d!11263 e!38912))

(declare-fun res!32871 () Bool)

(assert (=> d!11263 (=> (not res!32871) (not e!38912))))

(assert (=> d!11263 (= res!32871 (_1!1028 lt!23976))))

(assert (=> d!11263 (= lt!23976 (tuple2!2035 true (LongMapFixedSize!617 (defaultEntry!2042 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (bvadd (_size!357 newMap!16) #b00000000000000000000000000000001) (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16))) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16))) (_vacant!357 newMap!16))))))

(declare-fun lt!23960 () Unit!1550)

(declare-fun lt!23952 () Unit!1550)

(assert (=> d!11263 (= lt!23960 lt!23952)))

(declare-fun lt!23956 () array!3699)

(declare-fun lt!23962 () array!3697)

(assert (=> d!11263 (contains!682 (getCurrentListMap!389 lt!23962 lt!23956 (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (select (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774))))))

(assert (=> d!11263 (= lt!23952 (lemmaValidKeyInArrayIsInListMap!74 lt!23962 lt!23956 (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (defaultEntry!2042 newMap!16)))))

(assert (=> d!11263 (= lt!23956 (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16))))))

(assert (=> d!11263 (= lt!23962 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16))))))

(declare-fun lt!23970 () Unit!1550)

(declare-fun lt!23972 () Unit!1550)

(assert (=> d!11263 (= lt!23970 lt!23972)))

(declare-fun lt!23967 () array!3697)

(assert (=> d!11263 (= (arrayCountValidKeys!0 lt!23967 (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (bvadd (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lemmaValidKeyAtIImpliesCountKeysIsOne!0 (array!3697 (_ BitVec 32)) Unit!1550)

(assert (=> d!11263 (= lt!23972 (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!23967 (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774))))))

(assert (=> d!11263 (= lt!23967 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16))))))

(declare-fun lt!23973 () Unit!1550)

(declare-fun lt!23947 () Unit!1550)

(assert (=> d!11263 (= lt!23973 lt!23947)))

(declare-fun lt!23968 () array!3697)

(assert (=> d!11263 (arrayContainsKey!0 lt!23968 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(declare-fun lemmaArrayContainsFromImpliesContainsFromZero!0 (array!3697 (_ BitVec 64) (_ BitVec 32)) Unit!1550)

(assert (=> d!11263 (= lt!23947 (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!23968 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774))))))

(assert (=> d!11263 (= lt!23968 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16))))))

(declare-fun lt!23953 () Unit!1550)

(declare-fun lt!23964 () Unit!1550)

(assert (=> d!11263 (= lt!23953 lt!23964)))

(assert (=> d!11263 (= (+!81 (getCurrentListMap!389 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!389 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16))) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16))) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lemmaAddValidKeyToArrayThenAddPairToListMap!5 (array!3697 array!3699 (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 (_ BitVec 32) (_ BitVec 64) V!2841 Int) Unit!1550)

(assert (=> d!11263 (= lt!23964 (lemmaAddValidKeyToArrayThenAddPairToListMap!5 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2042 newMap!16)))))

(declare-fun lt!23951 () Unit!1550)

(declare-fun lt!23966 () Unit!1550)

(assert (=> d!11263 (= lt!23951 lt!23966)))

(assert (=> d!11263 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16))) (mask!5925 newMap!16))))

(declare-fun lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 ((_ BitVec 64) array!3697 (_ BitVec 32) (_ BitVec 32)) Unit!1550)

(assert (=> d!11263 (= lt!23966 (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (_keys!3665 newMap!16) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (mask!5925 newMap!16)))))

(declare-fun lt!23969 () Unit!1550)

(declare-fun lt!23974 () Unit!1550)

(assert (=> d!11263 (= lt!23969 lt!23974)))

(assert (=> d!11263 (= (arrayCountValidKeys!0 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16))) #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!3665 newMap!16) #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))) #b00000000000000000000000000000001))))

(declare-fun lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (array!3697 (_ BitVec 32) (_ BitVec 64)) Unit!1550)

(assert (=> d!11263 (= lt!23974 (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!3665 newMap!16) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(declare-fun lt!23949 () Unit!1550)

(declare-fun lt!23971 () Unit!1550)

(assert (=> d!11263 (= lt!23949 lt!23971)))

(declare-fun lt!23959 () (_ BitVec 32))

(declare-fun lt!23975 () List!1436)

(assert (=> d!11263 (arrayNoDuplicates!0 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16))) lt!23959 lt!23975)))

(declare-fun lemmaPutNewValidKeyPreservesNoDuplicate!0 (array!3697 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1436) Unit!1550)

(assert (=> d!11263 (= lt!23971 (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!3665 newMap!16) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) lt!23959 lt!23975))))

(assert (=> d!11263 (= lt!23975 Nil!1433)))

(assert (=> d!11263 (= lt!23959 #b00000000000000000000000000000000)))

(declare-fun lt!23957 () Unit!1550)

(assert (=> d!11263 (= lt!23957 e!38911)))

(declare-fun c!7522 () Bool)

(assert (=> d!11263 (= c!7522 (arrayContainsKey!0 (_keys!3665 newMap!16) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun lt!23950 () Unit!1550)

(assert (=> d!11263 (= lt!23950 e!38914)))

(assert (=> d!11263 (= c!7524 (contains!682 (getCurrentListMap!389 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(assert (=> d!11263 (valid!256 newMap!16)))

(assert (=> d!11263 (= (updateHelperNewKey!15 newMap!16 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774))) lt!23976)))

(declare-fun b!59151 () Bool)

(declare-fun res!32872 () Bool)

(assert (=> b!59151 (= res!32872 (= (select (arr!1768 (_keys!3665 newMap!16)) (index!3046 lt!23961)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59151 (=> (not res!32872) (not e!38910))))

(declare-fun b!59152 () Bool)

(declare-fun Unit!1568 () Unit!1550)

(assert (=> b!59152 (= e!38911 Unit!1568)))

(declare-fun b!59153 () Bool)

(assert (=> b!59153 (= e!38910 (not call!4425))))

(assert (= (and d!11263 c!7524) b!59139))

(assert (= (and d!11263 (not c!7524)) b!59145))

(assert (= (and b!59139 res!32868) b!59137))

(assert (= (and b!59137 res!32875) b!59144))

(assert (= (and b!59145 c!7523) b!59147))

(assert (= (and b!59145 (not c!7523)) b!59141))

(assert (= (and b!59147 res!32870) b!59138))

(assert (= (and b!59138 res!32876) b!59143))

(assert (= (and b!59141 c!7525) b!59150))

(assert (= (and b!59141 (not c!7525)) b!59140))

(assert (= (and b!59150 res!32873) b!59151))

(assert (= (and b!59151 res!32872) b!59153))

(assert (= (or b!59147 b!59150) bm!4422))

(assert (= (or b!59143 b!59153) bm!4420))

(assert (= (or b!59137 bm!4422) bm!4423))

(assert (= (or b!59139 b!59145) bm!4421))

(assert (= (and d!11263 c!7522) b!59142))

(assert (= (and d!11263 (not c!7522)) b!59152))

(assert (= (and d!11263 res!32871) b!59146))

(assert (= (and b!59146 res!32869) b!59149))

(assert (= (and b!59149 res!32874) b!59148))

(declare-fun m!50805 () Bool)

(assert (=> b!59146 m!50805))

(declare-fun m!50807 () Bool)

(assert (=> b!59148 m!50807))

(assert (=> b!59148 m!50389))

(assert (=> b!59148 m!50389))

(declare-fun m!50809 () Bool)

(assert (=> b!59148 m!50809))

(declare-fun m!50811 () Bool)

(assert (=> b!59138 m!50811))

(assert (=> b!59145 m!50353))

(assert (=> b!59145 m!50595))

(assert (=> b!59139 m!50353))

(assert (=> b!59139 m!50589))

(assert (=> b!59142 m!50353))

(declare-fun m!50813 () Bool)

(assert (=> b!59142 m!50813))

(assert (=> b!59142 m!50481))

(assert (=> b!59142 m!50481))

(assert (=> b!59142 m!50353))

(declare-fun m!50815 () Bool)

(assert (=> b!59142 m!50815))

(assert (=> b!59149 m!50807))

(assert (=> b!59149 m!50807))

(assert (=> b!59149 m!50353))

(declare-fun m!50817 () Bool)

(assert (=> b!59149 m!50817))

(assert (=> bm!4420 m!50353))

(assert (=> bm!4420 m!50581))

(declare-fun m!50819 () Bool)

(assert (=> b!59151 m!50819))

(declare-fun m!50821 () Bool)

(assert (=> bm!4423 m!50821))

(assert (=> d!11263 m!50353))

(declare-fun m!50823 () Bool)

(assert (=> d!11263 m!50823))

(assert (=> d!11263 m!50353))

(declare-fun m!50825 () Bool)

(assert (=> d!11263 m!50825))

(assert (=> d!11263 m!50481))

(assert (=> d!11263 m!50353))

(assert (=> d!11263 m!50815))

(assert (=> d!11263 m!50481))

(assert (=> d!11263 m!50753))

(declare-fun m!50827 () Bool)

(assert (=> d!11263 m!50827))

(declare-fun m!50829 () Bool)

(assert (=> d!11263 m!50829))

(declare-fun m!50831 () Bool)

(assert (=> d!11263 m!50831))

(assert (=> d!11263 m!50353))

(declare-fun m!50833 () Bool)

(assert (=> d!11263 m!50833))

(assert (=> d!11263 m!50353))

(assert (=> d!11263 m!50369))

(declare-fun m!50835 () Bool)

(assert (=> d!11263 m!50835))

(declare-fun m!50837 () Bool)

(assert (=> d!11263 m!50837))

(declare-fun m!50839 () Bool)

(assert (=> d!11263 m!50839))

(declare-fun m!50841 () Bool)

(assert (=> d!11263 m!50841))

(declare-fun m!50843 () Bool)

(assert (=> d!11263 m!50843))

(declare-fun m!50845 () Bool)

(assert (=> d!11263 m!50845))

(assert (=> d!11263 m!50353))

(declare-fun m!50847 () Bool)

(assert (=> d!11263 m!50847))

(declare-fun m!50849 () Bool)

(assert (=> d!11263 m!50849))

(assert (=> d!11263 m!50353))

(assert (=> d!11263 m!50581))

(assert (=> d!11263 m!50361))

(declare-fun m!50851 () Bool)

(assert (=> d!11263 m!50851))

(assert (=> d!11263 m!50841))

(assert (=> d!11263 m!50353))

(declare-fun m!50853 () Bool)

(assert (=> d!11263 m!50853))

(assert (=> d!11263 m!50543))

(assert (=> d!11263 m!50843))

(assert (=> d!11263 m!50481))

(declare-fun m!50855 () Bool)

(assert (=> d!11263 m!50855))

(declare-fun m!50857 () Bool)

(assert (=> d!11263 m!50857))

(declare-fun m!50859 () Bool)

(assert (=> b!59144 m!50859))

(assert (=> bm!4421 m!50353))

(assert (=> bm!4421 m!50557))

(assert (=> bm!4384 d!11263))

(declare-fun d!11265 () Bool)

(declare-fun e!38915 () Bool)

(assert (=> d!11265 e!38915))

(declare-fun res!32877 () Bool)

(assert (=> d!11265 (=> (not res!32877) (not e!38915))))

(declare-fun lt!23979 () ListLongMap!1355)

(assert (=> d!11265 (= res!32877 (contains!682 lt!23979 (_1!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(declare-fun lt!23980 () List!1437)

(assert (=> d!11265 (= lt!23979 (ListLongMap!1356 lt!23980))))

(declare-fun lt!23977 () Unit!1550)

(declare-fun lt!23978 () Unit!1550)

(assert (=> d!11265 (= lt!23977 lt!23978)))

(assert (=> d!11265 (= (getValueByKey!122 lt!23980 (_1!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))) (Some!127 (_2!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(assert (=> d!11265 (= lt!23978 (lemmaContainsTupThenGetReturnValue!42 lt!23980 (_1!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) (_2!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(assert (=> d!11265 (= lt!23980 (insertStrictlySorted!45 (toList!693 (ite c!7428 call!4323 (ite c!7430 call!4326 call!4324))) (_1!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) (_2!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(assert (=> d!11265 (= (+!81 (ite c!7428 call!4323 (ite c!7430 call!4326 call!4324)) (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!23979)))

(declare-fun b!59154 () Bool)

(declare-fun res!32878 () Bool)

(assert (=> b!59154 (=> (not res!32878) (not e!38915))))

(assert (=> b!59154 (= res!32878 (= (getValueByKey!122 (toList!693 lt!23979) (_1!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))) (Some!127 (_2!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))))

(declare-fun b!59155 () Bool)

(assert (=> b!59155 (= e!38915 (contains!684 (toList!693 lt!23979) (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(assert (= (and d!11265 res!32877) b!59154))

(assert (= (and b!59154 res!32878) b!59155))

(declare-fun m!50861 () Bool)

(assert (=> d!11265 m!50861))

(declare-fun m!50863 () Bool)

(assert (=> d!11265 m!50863))

(declare-fun m!50865 () Bool)

(assert (=> d!11265 m!50865))

(declare-fun m!50867 () Bool)

(assert (=> d!11265 m!50867))

(declare-fun m!50869 () Bool)

(assert (=> b!59154 m!50869))

(declare-fun m!50871 () Bool)

(assert (=> b!59155 m!50871))

(assert (=> bm!4324 d!11265))

(assert (=> d!11207 d!11211))

(declare-fun d!11267 () Bool)

(assert (=> d!11267 (not (arrayContainsKey!0 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> d!11267 true))

(declare-fun _$68!31 () Unit!1550)

(assert (=> d!11267 (= (choose!68 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (Cons!1432 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) Nil!1433)) _$68!31)))

(declare-fun bs!2557 () Bool)

(assert (= bs!2557 d!11267))

(assert (=> bs!2557 m!50353))

(assert (=> bs!2557 m!50357))

(assert (=> d!11207 d!11267))

(assert (=> b!58939 d!11231))

(declare-fun d!11269 () Bool)

(assert (=> d!11269 (= (apply!66 lt!23704 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1076 (getValueByKey!122 (toList!693 lt!23704) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2558 () Bool)

(assert (= bs!2558 d!11269))

(declare-fun m!50873 () Bool)

(assert (=> bs!2558 m!50873))

(assert (=> bs!2558 m!50873))

(declare-fun m!50875 () Bool)

(assert (=> bs!2558 m!50875))

(assert (=> b!58798 d!11269))

(assert (=> d!11189 d!11191))

(declare-fun b!59156 () Bool)

(declare-fun e!38922 () Bool)

(assert (=> b!59156 (= e!38922 (validKeyInArray!0 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!4424 () Bool)

(declare-fun call!4433 () Bool)

(declare-fun lt!24002 () ListLongMap!1355)

(assert (=> bm!4424 (= call!4433 (contains!682 lt!24002 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59157 () Bool)

(declare-fun e!38920 () Unit!1550)

(declare-fun Unit!1569 () Unit!1550)

(assert (=> b!59157 (= e!38920 Unit!1569)))

(declare-fun b!59158 () Bool)

(declare-fun res!32882 () Bool)

(declare-fun e!38923 () Bool)

(assert (=> b!59158 (=> (not res!32882) (not e!38923))))

(declare-fun e!38921 () Bool)

(assert (=> b!59158 (= res!32882 e!38921)))

(declare-fun c!7526 () Bool)

(assert (=> b!59158 (= c!7526 (not (= (bvand (ite (and c!7466 c!7465) lt!23781 (extraKeys!1929 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!59159 () Bool)

(declare-fun e!38917 () ListLongMap!1355)

(declare-fun call!4430 () ListLongMap!1355)

(assert (=> b!59159 (= e!38917 call!4430)))

(declare-fun bm!4425 () Bool)

(declare-fun call!4429 () ListLongMap!1355)

(declare-fun call!4431 () ListLongMap!1355)

(assert (=> bm!4425 (= call!4429 call!4431)))

(declare-fun b!59161 () Bool)

(declare-fun e!38928 () Bool)

(declare-fun e!38916 () Bool)

(assert (=> b!59161 (= e!38928 e!38916)))

(declare-fun res!32885 () Bool)

(declare-fun call!4427 () Bool)

(assert (=> b!59161 (= res!32885 call!4427)))

(assert (=> b!59161 (=> (not res!32885) (not e!38916))))

(declare-fun b!59162 () Bool)

(assert (=> b!59162 (= e!38923 e!38928)))

(declare-fun c!7527 () Bool)

(assert (=> b!59162 (= c!7527 (not (= (bvand (ite (and c!7466 c!7465) lt!23781 (extraKeys!1929 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4426 () Bool)

(assert (=> bm!4426 (= call!4427 (contains!682 lt!24002 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4427 () Bool)

(declare-fun call!4432 () ListLongMap!1355)

(assert (=> bm!4427 (= call!4430 call!4432)))

(declare-fun b!59163 () Bool)

(declare-fun c!7530 () Bool)

(assert (=> b!59163 (= c!7530 (and (not (= (bvand (ite (and c!7466 c!7465) lt!23781 (extraKeys!1929 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite (and c!7466 c!7465) lt!23781 (extraKeys!1929 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!38918 () ListLongMap!1355)

(assert (=> b!59163 (= e!38917 e!38918)))

(declare-fun b!59164 () Bool)

(declare-fun e!38926 () Bool)

(assert (=> b!59164 (= e!38926 (= (apply!66 lt!24002 #b0000000000000000000000000000000000000000000000000000000000000000) (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))))))

(declare-fun b!59165 () Bool)

(declare-fun res!32879 () Bool)

(assert (=> b!59165 (=> (not res!32879) (not e!38923))))

(declare-fun e!38927 () Bool)

(assert (=> b!59165 (= res!32879 e!38927)))

(declare-fun res!32881 () Bool)

(assert (=> b!59165 (=> res!32881 e!38927)))

(assert (=> b!59165 (= res!32881 (not e!38922))))

(declare-fun res!32887 () Bool)

(assert (=> b!59165 (=> (not res!32887) (not e!38922))))

(assert (=> b!59165 (= res!32887 (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(declare-fun b!59166 () Bool)

(declare-fun e!38925 () ListLongMap!1355)

(assert (=> b!59166 (= e!38925 (+!81 call!4432 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))

(declare-fun bm!4428 () Bool)

(declare-fun call!4428 () ListLongMap!1355)

(assert (=> bm!4428 (= call!4428 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (ite c!7466 (_values!2025 newMap!16) lt!23792) (mask!5925 newMap!16) (ite (and c!7466 c!7465) lt!23781 (extraKeys!1929 newMap!16)) (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun bm!4429 () Bool)

(declare-fun c!7529 () Bool)

(declare-fun c!7531 () Bool)

(assert (=> bm!4429 (= call!4432 (+!81 (ite c!7529 call!4428 (ite c!7531 call!4431 call!4429)) (ite (or c!7529 c!7531) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))

(declare-fun b!59167 () Bool)

(assert (=> b!59167 (= e!38928 (not call!4427))))

(declare-fun b!59168 () Bool)

(assert (=> b!59168 (= e!38916 (= (apply!66 lt!24002 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1958 newMap!16)))))

(declare-fun e!38919 () Bool)

(declare-fun b!59169 () Bool)

(assert (=> b!59169 (= e!38919 (= (apply!66 lt!24002 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)) (get!1073 (select (arr!1769 (ite c!7466 (_values!2025 newMap!16) lt!23792)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!59169 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2000 (ite c!7466 (_values!2025 newMap!16) lt!23792))))))

(assert (=> b!59169 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(declare-fun b!59160 () Bool)

(assert (=> b!59160 (= e!38927 e!38919)))

(declare-fun res!32884 () Bool)

(assert (=> b!59160 (=> (not res!32884) (not e!38919))))

(assert (=> b!59160 (= res!32884 (contains!682 lt!24002 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59160 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(declare-fun d!11271 () Bool)

(assert (=> d!11271 e!38923))

(declare-fun res!32883 () Bool)

(assert (=> d!11271 (=> (not res!32883) (not e!38923))))

(assert (=> d!11271 (= res!32883 (or (bvsge #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))))

(declare-fun lt!23996 () ListLongMap!1355)

(assert (=> d!11271 (= lt!24002 lt!23996)))

(declare-fun lt!24001 () Unit!1550)

(assert (=> d!11271 (= lt!24001 e!38920)))

(declare-fun c!7528 () Bool)

(declare-fun e!38924 () Bool)

(assert (=> d!11271 (= c!7528 e!38924)))

(declare-fun res!32886 () Bool)

(assert (=> d!11271 (=> (not res!32886) (not e!38924))))

(assert (=> d!11271 (= res!32886 (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(assert (=> d!11271 (= lt!23996 e!38925)))

(assert (=> d!11271 (= c!7529 (and (not (= (bvand (ite (and c!7466 c!7465) lt!23781 (extraKeys!1929 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite (and c!7466 c!7465) lt!23781 (extraKeys!1929 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11271 (validMask!0 (mask!5925 newMap!16))))

(assert (=> d!11271 (= (getCurrentListMap!389 (_keys!3665 newMap!16) (ite c!7466 (_values!2025 newMap!16) lt!23792) (mask!5925 newMap!16) (ite (and c!7466 c!7465) lt!23781 (extraKeys!1929 newMap!16)) (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) lt!24002)))

(declare-fun b!59170 () Bool)

(declare-fun lt!23990 () Unit!1550)

(assert (=> b!59170 (= e!38920 lt!23990)))

(declare-fun lt!23995 () ListLongMap!1355)

(assert (=> b!59170 (= lt!23995 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (ite c!7466 (_values!2025 newMap!16) lt!23792) (mask!5925 newMap!16) (ite (and c!7466 c!7465) lt!23781 (extraKeys!1929 newMap!16)) (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!23994 () (_ BitVec 64))

(assert (=> b!59170 (= lt!23994 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23993 () (_ BitVec 64))

(assert (=> b!59170 (= lt!23993 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23986 () Unit!1550)

(assert (=> b!59170 (= lt!23986 (addStillContains!42 lt!23995 lt!23994 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)) lt!23993))))

(assert (=> b!59170 (contains!682 (+!81 lt!23995 (tuple2!2037 lt!23994 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)))) lt!23993)))

(declare-fun lt!23997 () Unit!1550)

(assert (=> b!59170 (= lt!23997 lt!23986)))

(declare-fun lt!24000 () ListLongMap!1355)

(assert (=> b!59170 (= lt!24000 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (ite c!7466 (_values!2025 newMap!16) lt!23792) (mask!5925 newMap!16) (ite (and c!7466 c!7465) lt!23781 (extraKeys!1929 newMap!16)) (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!23982 () (_ BitVec 64))

(assert (=> b!59170 (= lt!23982 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23984 () (_ BitVec 64))

(assert (=> b!59170 (= lt!23984 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23981 () Unit!1550)

(assert (=> b!59170 (= lt!23981 (addApplyDifferent!42 lt!24000 lt!23982 (minValue!1958 newMap!16) lt!23984))))

(assert (=> b!59170 (= (apply!66 (+!81 lt!24000 (tuple2!2037 lt!23982 (minValue!1958 newMap!16))) lt!23984) (apply!66 lt!24000 lt!23984))))

(declare-fun lt!23989 () Unit!1550)

(assert (=> b!59170 (= lt!23989 lt!23981)))

(declare-fun lt!23988 () ListLongMap!1355)

(assert (=> b!59170 (= lt!23988 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (ite c!7466 (_values!2025 newMap!16) lt!23792) (mask!5925 newMap!16) (ite (and c!7466 c!7465) lt!23781 (extraKeys!1929 newMap!16)) (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!23985 () (_ BitVec 64))

(assert (=> b!59170 (= lt!23985 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23992 () (_ BitVec 64))

(assert (=> b!59170 (= lt!23992 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!23987 () Unit!1550)

(assert (=> b!59170 (= lt!23987 (addApplyDifferent!42 lt!23988 lt!23985 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)) lt!23992))))

(assert (=> b!59170 (= (apply!66 (+!81 lt!23988 (tuple2!2037 lt!23985 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)))) lt!23992) (apply!66 lt!23988 lt!23992))))

(declare-fun lt!23999 () Unit!1550)

(assert (=> b!59170 (= lt!23999 lt!23987)))

(declare-fun lt!23998 () ListLongMap!1355)

(assert (=> b!59170 (= lt!23998 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (ite c!7466 (_values!2025 newMap!16) lt!23792) (mask!5925 newMap!16) (ite (and c!7466 c!7465) lt!23781 (extraKeys!1929 newMap!16)) (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!23991 () (_ BitVec 64))

(assert (=> b!59170 (= lt!23991 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!23983 () (_ BitVec 64))

(assert (=> b!59170 (= lt!23983 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!59170 (= lt!23990 (addApplyDifferent!42 lt!23998 lt!23991 (minValue!1958 newMap!16) lt!23983))))

(assert (=> b!59170 (= (apply!66 (+!81 lt!23998 (tuple2!2037 lt!23991 (minValue!1958 newMap!16))) lt!23983) (apply!66 lt!23998 lt!23983))))

(declare-fun b!59171 () Bool)

(assert (=> b!59171 (= e!38924 (validKeyInArray!0 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59172 () Bool)

(assert (=> b!59172 (= e!38921 e!38926)))

(declare-fun res!32880 () Bool)

(assert (=> b!59172 (= res!32880 call!4433)))

(assert (=> b!59172 (=> (not res!32880) (not e!38926))))

(declare-fun b!59173 () Bool)

(assert (=> b!59173 (= e!38925 e!38917)))

(assert (=> b!59173 (= c!7531 (and (not (= (bvand (ite (and c!7466 c!7465) lt!23781 (extraKeys!1929 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite (and c!7466 c!7465) lt!23781 (extraKeys!1929 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!59174 () Bool)

(assert (=> b!59174 (= e!38918 call!4430)))

(declare-fun b!59175 () Bool)

(assert (=> b!59175 (= e!38921 (not call!4433))))

(declare-fun b!59176 () Bool)

(assert (=> b!59176 (= e!38918 call!4429)))

(declare-fun bm!4430 () Bool)

(assert (=> bm!4430 (= call!4431 call!4428)))

(assert (= (and d!11271 c!7529) b!59166))

(assert (= (and d!11271 (not c!7529)) b!59173))

(assert (= (and b!59173 c!7531) b!59159))

(assert (= (and b!59173 (not c!7531)) b!59163))

(assert (= (and b!59163 c!7530) b!59174))

(assert (= (and b!59163 (not c!7530)) b!59176))

(assert (= (or b!59174 b!59176) bm!4425))

(assert (= (or b!59159 bm!4425) bm!4430))

(assert (= (or b!59159 b!59174) bm!4427))

(assert (= (or b!59166 bm!4430) bm!4428))

(assert (= (or b!59166 bm!4427) bm!4429))

(assert (= (and d!11271 res!32886) b!59171))

(assert (= (and d!11271 c!7528) b!59170))

(assert (= (and d!11271 (not c!7528)) b!59157))

(assert (= (and d!11271 res!32883) b!59165))

(assert (= (and b!59165 res!32887) b!59156))

(assert (= (and b!59165 (not res!32881)) b!59160))

(assert (= (and b!59160 res!32884) b!59169))

(assert (= (and b!59165 res!32879) b!59158))

(assert (= (and b!59158 c!7526) b!59172))

(assert (= (and b!59158 (not c!7526)) b!59175))

(assert (= (and b!59172 res!32880) b!59164))

(assert (= (or b!59172 b!59175) bm!4424))

(assert (= (and b!59158 res!32882) b!59162))

(assert (= (and b!59162 c!7527) b!59161))

(assert (= (and b!59162 (not c!7527)) b!59167))

(assert (= (and b!59161 res!32885) b!59168))

(assert (= (or b!59161 b!59167) bm!4426))

(declare-fun b_lambda!2593 () Bool)

(assert (=> (not b_lambda!2593) (not b!59169)))

(assert (=> b!59169 t!4781))

(declare-fun b_and!3573 () Bool)

(assert (= b_and!3569 (and (=> t!4781 result!2381) b_and!3573)))

(assert (=> b!59169 t!4783))

(declare-fun b_and!3575 () Bool)

(assert (= b_and!3571 (and (=> t!4783 result!2383) b_and!3575)))

(declare-fun m!50877 () Bool)

(assert (=> b!59168 m!50877))

(assert (=> d!11271 m!50657))

(assert (=> b!59171 m!50643))

(assert (=> b!59171 m!50643))

(assert (=> b!59171 m!50645))

(declare-fun m!50879 () Bool)

(assert (=> bm!4424 m!50879))

(assert (=> b!59156 m!50643))

(assert (=> b!59156 m!50643))

(assert (=> b!59156 m!50645))

(declare-fun m!50881 () Bool)

(assert (=> b!59170 m!50881))

(declare-fun m!50883 () Bool)

(assert (=> b!59170 m!50883))

(declare-fun m!50885 () Bool)

(assert (=> b!59170 m!50885))

(declare-fun m!50887 () Bool)

(assert (=> b!59170 m!50887))

(declare-fun m!50889 () Bool)

(assert (=> b!59170 m!50889))

(declare-fun m!50891 () Bool)

(assert (=> b!59170 m!50891))

(declare-fun m!50893 () Bool)

(assert (=> b!59170 m!50893))

(declare-fun m!50895 () Bool)

(assert (=> b!59170 m!50895))

(assert (=> b!59170 m!50643))

(declare-fun m!50897 () Bool)

(assert (=> b!59170 m!50897))

(declare-fun m!50899 () Bool)

(assert (=> b!59170 m!50899))

(declare-fun m!50901 () Bool)

(assert (=> b!59170 m!50901))

(assert (=> b!59170 m!50881))

(declare-fun m!50903 () Bool)

(assert (=> b!59170 m!50903))

(declare-fun m!50905 () Bool)

(assert (=> b!59170 m!50905))

(declare-fun m!50907 () Bool)

(assert (=> b!59170 m!50907))

(assert (=> b!59170 m!50891))

(declare-fun m!50909 () Bool)

(assert (=> b!59170 m!50909))

(assert (=> b!59170 m!50903))

(assert (=> b!59170 m!50897))

(declare-fun m!50911 () Bool)

(assert (=> b!59170 m!50911))

(assert (=> b!59169 m!50643))

(declare-fun m!50913 () Bool)

(assert (=> b!59169 m!50913))

(assert (=> b!59169 m!50697))

(declare-fun m!50915 () Bool)

(assert (=> b!59169 m!50915))

(assert (=> b!59169 m!50697))

(declare-fun m!50917 () Bool)

(assert (=> b!59169 m!50917))

(assert (=> b!59169 m!50915))

(assert (=> b!59169 m!50643))

(assert (=> bm!4428 m!50909))

(assert (=> b!59160 m!50643))

(assert (=> b!59160 m!50643))

(declare-fun m!50919 () Bool)

(assert (=> b!59160 m!50919))

(declare-fun m!50921 () Bool)

(assert (=> b!59164 m!50921))

(declare-fun m!50923 () Bool)

(assert (=> b!59166 m!50923))

(declare-fun m!50925 () Bool)

(assert (=> bm!4429 m!50925))

(declare-fun m!50927 () Bool)

(assert (=> bm!4426 m!50927))

(assert (=> bm!4375 d!11271))

(declare-fun b!59201 () Bool)

(declare-fun e!38948 () Bool)

(declare-fun e!38946 () Bool)

(assert (=> b!59201 (= e!38948 e!38946)))

(declare-fun c!7543 () Bool)

(assert (=> b!59201 (= c!7543 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992))))))))

(declare-fun b!59202 () Bool)

(declare-fun res!32897 () Bool)

(declare-fun e!38947 () Bool)

(assert (=> b!59202 (=> (not res!32897) (not e!38947))))

(declare-fun lt!24020 () ListLongMap!1355)

(assert (=> b!59202 (= res!32897 (not (contains!682 lt!24020 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bm!4433 () Bool)

(declare-fun call!4436 () ListLongMap!1355)

(assert (=> bm!4433 (= call!4436 (getCurrentListMapNoExtraKeys!44 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (_values!2025 (v!2377 (underlying!223 thiss!992))) (mask!5925 (v!2377 (underlying!223 thiss!992))) (extraKeys!1929 (v!2377 (underlying!223 thiss!992))) (zeroValue!1958 (v!2377 (underlying!223 thiss!992))) (minValue!1958 (v!2377 (underlying!223 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2042 (v!2377 (underlying!223 thiss!992)))))))

(declare-fun d!11273 () Bool)

(assert (=> d!11273 e!38947))

(declare-fun res!32899 () Bool)

(assert (=> d!11273 (=> (not res!32899) (not e!38947))))

(assert (=> d!11273 (= res!32899 (not (contains!682 lt!24020 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!38944 () ListLongMap!1355)

(assert (=> d!11273 (= lt!24020 e!38944)))

(declare-fun c!7542 () Bool)

(assert (=> d!11273 (= c!7542 (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992))))))))

(assert (=> d!11273 (validMask!0 (mask!5925 (v!2377 (underlying!223 thiss!992))))))

(assert (=> d!11273 (= (getCurrentListMapNoExtraKeys!44 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (_values!2025 (v!2377 (underlying!223 thiss!992))) (mask!5925 (v!2377 (underlying!223 thiss!992))) (extraKeys!1929 (v!2377 (underlying!223 thiss!992))) (zeroValue!1958 (v!2377 (underlying!223 thiss!992))) (minValue!1958 (v!2377 (underlying!223 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2042 (v!2377 (underlying!223 thiss!992)))) lt!24020)))

(declare-fun b!59203 () Bool)

(assert (=> b!59203 (= e!38947 e!38948)))

(declare-fun c!7540 () Bool)

(declare-fun e!38949 () Bool)

(assert (=> b!59203 (= c!7540 e!38949)))

(declare-fun res!32898 () Bool)

(assert (=> b!59203 (=> (not res!32898) (not e!38949))))

(assert (=> b!59203 (= res!32898 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992))))))))

(declare-fun b!59204 () Bool)

(declare-fun e!38945 () ListLongMap!1355)

(assert (=> b!59204 (= e!38945 call!4436)))

(declare-fun b!59205 () Bool)

(assert (=> b!59205 (= e!38944 e!38945)))

(declare-fun c!7541 () Bool)

(assert (=> b!59205 (= c!7541 (validKeyInArray!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!59206 () Bool)

(assert (=> b!59206 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992))))))))

(assert (=> b!59206 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2000 (_values!2025 (v!2377 (underlying!223 thiss!992))))))))

(declare-fun e!38943 () Bool)

(assert (=> b!59206 (= e!38943 (= (apply!66 lt!24020 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!59207 () Bool)

(declare-fun lt!24017 () Unit!1550)

(declare-fun lt!24018 () Unit!1550)

(assert (=> b!59207 (= lt!24017 lt!24018)))

(declare-fun lt!24021 () (_ BitVec 64))

(declare-fun lt!24022 () (_ BitVec 64))

(declare-fun lt!24023 () ListLongMap!1355)

(declare-fun lt!24019 () V!2841)

(assert (=> b!59207 (not (contains!682 (+!81 lt!24023 (tuple2!2037 lt!24021 lt!24019)) lt!24022))))

(declare-fun addStillNotContains!16 (ListLongMap!1355 (_ BitVec 64) V!2841 (_ BitVec 64)) Unit!1550)

(assert (=> b!59207 (= lt!24018 (addStillNotContains!16 lt!24023 lt!24021 lt!24019 lt!24022))))

(assert (=> b!59207 (= lt!24022 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!59207 (= lt!24019 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!59207 (= lt!24021 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!59207 (= lt!24023 call!4436)))

(assert (=> b!59207 (= e!38945 (+!81 call!4436 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!59208 () Bool)

(assert (=> b!59208 (= e!38949 (validKeyInArray!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!59208 (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000)))

(declare-fun b!59209 () Bool)

(declare-fun isEmpty!297 (ListLongMap!1355) Bool)

(assert (=> b!59209 (= e!38946 (isEmpty!297 lt!24020))))

(declare-fun b!59210 () Bool)

(assert (=> b!59210 (= e!38944 (ListLongMap!1356 Nil!1434))))

(declare-fun b!59211 () Bool)

(assert (=> b!59211 (= e!38946 (= lt!24020 (getCurrentListMapNoExtraKeys!44 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (_values!2025 (v!2377 (underlying!223 thiss!992))) (mask!5925 (v!2377 (underlying!223 thiss!992))) (extraKeys!1929 (v!2377 (underlying!223 thiss!992))) (zeroValue!1958 (v!2377 (underlying!223 thiss!992))) (minValue!1958 (v!2377 (underlying!223 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))))))))

(declare-fun b!59212 () Bool)

(assert (=> b!59212 (= e!38948 e!38943)))

(assert (=> b!59212 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992))))))))

(declare-fun res!32896 () Bool)

(assert (=> b!59212 (= res!32896 (contains!682 lt!24020 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!59212 (=> (not res!32896) (not e!38943))))

(assert (= (and d!11273 c!7542) b!59210))

(assert (= (and d!11273 (not c!7542)) b!59205))

(assert (= (and b!59205 c!7541) b!59207))

(assert (= (and b!59205 (not c!7541)) b!59204))

(assert (= (or b!59207 b!59204) bm!4433))

(assert (= (and d!11273 res!32899) b!59202))

(assert (= (and b!59202 res!32897) b!59203))

(assert (= (and b!59203 res!32898) b!59208))

(assert (= (and b!59203 c!7540) b!59212))

(assert (= (and b!59203 (not c!7540)) b!59201))

(assert (= (and b!59212 res!32896) b!59206))

(assert (= (and b!59201 c!7543) b!59211))

(assert (= (and b!59201 (not c!7543)) b!59209))

(declare-fun b_lambda!2595 () Bool)

(assert (=> (not b_lambda!2595) (not b!59206)))

(assert (=> b!59206 t!4766))

(declare-fun b_and!3577 () Bool)

(assert (= b_and!3573 (and (=> t!4766 result!2361) b_and!3577)))

(assert (=> b!59206 t!4768))

(declare-fun b_and!3579 () Bool)

(assert (= b_and!3575 (and (=> t!4768 result!2365) b_and!3579)))

(declare-fun b_lambda!2597 () Bool)

(assert (=> (not b_lambda!2597) (not b!59207)))

(assert (=> b!59207 t!4766))

(declare-fun b_and!3581 () Bool)

(assert (= b_and!3577 (and (=> t!4766 result!2361) b_and!3581)))

(assert (=> b!59207 t!4768))

(declare-fun b_and!3583 () Bool)

(assert (= b_and!3579 (and (=> t!4768 result!2365) b_and!3583)))

(declare-fun m!50929 () Bool)

(assert (=> d!11273 m!50929))

(assert (=> d!11273 m!50383))

(assert (=> b!59206 m!50525))

(assert (=> b!59206 m!50485))

(assert (=> b!59206 m!50485))

(declare-fun m!50931 () Bool)

(assert (=> b!59206 m!50931))

(assert (=> b!59206 m!50367))

(assert (=> b!59206 m!50525))

(assert (=> b!59206 m!50367))

(assert (=> b!59206 m!50527))

(declare-fun m!50933 () Bool)

(assert (=> b!59202 m!50933))

(declare-fun m!50935 () Bool)

(assert (=> b!59209 m!50935))

(declare-fun m!50937 () Bool)

(assert (=> b!59207 m!50937))

(assert (=> b!59207 m!50525))

(assert (=> b!59207 m!50485))

(declare-fun m!50939 () Bool)

(assert (=> b!59207 m!50939))

(declare-fun m!50941 () Bool)

(assert (=> b!59207 m!50941))

(declare-fun m!50943 () Bool)

(assert (=> b!59207 m!50943))

(assert (=> b!59207 m!50941))

(assert (=> b!59207 m!50367))

(assert (=> b!59207 m!50525))

(assert (=> b!59207 m!50367))

(assert (=> b!59207 m!50527))

(assert (=> b!59208 m!50485))

(assert (=> b!59208 m!50485))

(assert (=> b!59208 m!50487))

(declare-fun m!50945 () Bool)

(assert (=> bm!4433 m!50945))

(assert (=> b!59212 m!50485))

(assert (=> b!59212 m!50485))

(declare-fun m!50947 () Bool)

(assert (=> b!59212 m!50947))

(assert (=> b!59211 m!50945))

(assert (=> b!59205 m!50485))

(assert (=> b!59205 m!50485))

(assert (=> b!59205 m!50487))

(assert (=> b!58800 d!11273))

(declare-fun d!11275 () Bool)

(assert (=> d!11275 (= (apply!66 (+!81 lt!23690 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))) lt!23694) (get!1076 (getValueByKey!122 (toList!693 (+!81 lt!23690 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!23694)))))

(declare-fun bs!2559 () Bool)

(assert (= bs!2559 d!11275))

(declare-fun m!50949 () Bool)

(assert (=> bs!2559 m!50949))

(assert (=> bs!2559 m!50949))

(declare-fun m!50951 () Bool)

(assert (=> bs!2559 m!50951))

(assert (=> b!58800 d!11275))

(declare-fun d!11277 () Bool)

(declare-fun e!38950 () Bool)

(assert (=> d!11277 e!38950))

(declare-fun res!32900 () Bool)

(assert (=> d!11277 (=> (not res!32900) (not e!38950))))

(declare-fun lt!24026 () ListLongMap!1355)

(assert (=> d!11277 (= res!32900 (contains!682 lt!24026 (_1!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun lt!24027 () List!1437)

(assert (=> d!11277 (= lt!24026 (ListLongMap!1356 lt!24027))))

(declare-fun lt!24024 () Unit!1550)

(declare-fun lt!24025 () Unit!1550)

(assert (=> d!11277 (= lt!24024 lt!24025)))

(assert (=> d!11277 (= (getValueByKey!122 lt!24027 (_1!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) (Some!127 (_2!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(assert (=> d!11277 (= lt!24025 (lemmaContainsTupThenGetReturnValue!42 lt!24027 (_1!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(assert (=> d!11277 (= lt!24027 (insertStrictlySorted!45 (toList!693 lt!23702) (_1!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(assert (=> d!11277 (= (+!81 lt!23702 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) lt!24026)))

(declare-fun b!59213 () Bool)

(declare-fun res!32901 () Bool)

(assert (=> b!59213 (=> (not res!32901) (not e!38950))))

(assert (=> b!59213 (= res!32901 (= (getValueByKey!122 (toList!693 lt!24026) (_1!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) (Some!127 (_2!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(declare-fun b!59214 () Bool)

(assert (=> b!59214 (= e!38950 (contains!684 (toList!693 lt!24026) (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))

(assert (= (and d!11277 res!32900) b!59213))

(assert (= (and b!59213 res!32901) b!59214))

(declare-fun m!50953 () Bool)

(assert (=> d!11277 m!50953))

(declare-fun m!50955 () Bool)

(assert (=> d!11277 m!50955))

(declare-fun m!50957 () Bool)

(assert (=> d!11277 m!50957))

(declare-fun m!50959 () Bool)

(assert (=> d!11277 m!50959))

(declare-fun m!50961 () Bool)

(assert (=> b!59213 m!50961))

(declare-fun m!50963 () Bool)

(assert (=> b!59214 m!50963))

(assert (=> b!58800 d!11277))

(declare-fun d!11279 () Bool)

(assert (=> d!11279 (= (apply!66 (+!81 lt!23700 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) lt!23685) (apply!66 lt!23700 lt!23685))))

(declare-fun lt!24030 () Unit!1550)

(declare-fun choose!313 (ListLongMap!1355 (_ BitVec 64) V!2841 (_ BitVec 64)) Unit!1550)

(assert (=> d!11279 (= lt!24030 (choose!313 lt!23700 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992))) lt!23685))))

(declare-fun e!38953 () Bool)

(assert (=> d!11279 e!38953))

(declare-fun res!32904 () Bool)

(assert (=> d!11279 (=> (not res!32904) (not e!38953))))

(assert (=> d!11279 (= res!32904 (contains!682 lt!23700 lt!23685))))

(assert (=> d!11279 (= (addApplyDifferent!42 lt!23700 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992))) lt!23685) lt!24030)))

(declare-fun b!59218 () Bool)

(assert (=> b!59218 (= e!38953 (not (= lt!23685 lt!23693)))))

(assert (= (and d!11279 res!32904) b!59218))

(assert (=> d!11279 m!50513))

(declare-fun m!50965 () Bool)

(assert (=> d!11279 m!50965))

(declare-fun m!50967 () Bool)

(assert (=> d!11279 m!50967))

(assert (=> d!11279 m!50513))

(assert (=> d!11279 m!50515))

(assert (=> d!11279 m!50495))

(assert (=> b!58800 d!11279))

(declare-fun d!11281 () Bool)

(assert (=> d!11281 (= (apply!66 lt!23702 lt!23686) (get!1076 (getValueByKey!122 (toList!693 lt!23702) lt!23686)))))

(declare-fun bs!2560 () Bool)

(assert (= bs!2560 d!11281))

(declare-fun m!50969 () Bool)

(assert (=> bs!2560 m!50969))

(assert (=> bs!2560 m!50969))

(declare-fun m!50971 () Bool)

(assert (=> bs!2560 m!50971))

(assert (=> b!58800 d!11281))

(declare-fun d!11283 () Bool)

(assert (=> d!11283 (= (apply!66 (+!81 lt!23690 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))) lt!23694) (apply!66 lt!23690 lt!23694))))

(declare-fun lt!24031 () Unit!1550)

(assert (=> d!11283 (= lt!24031 (choose!313 lt!23690 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))) lt!23694))))

(declare-fun e!38954 () Bool)

(assert (=> d!11283 e!38954))

(declare-fun res!32905 () Bool)

(assert (=> d!11283 (=> (not res!32905) (not e!38954))))

(assert (=> d!11283 (= res!32905 (contains!682 lt!23690 lt!23694))))

(assert (=> d!11283 (= (addApplyDifferent!42 lt!23690 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))) lt!23694) lt!24031)))

(declare-fun b!59219 () Bool)

(assert (=> b!59219 (= e!38954 (not (= lt!23694 lt!23687)))))

(assert (= (and d!11283 res!32905) b!59219))

(assert (=> d!11283 m!50501))

(declare-fun m!50973 () Bool)

(assert (=> d!11283 m!50973))

(declare-fun m!50975 () Bool)

(assert (=> d!11283 m!50975))

(assert (=> d!11283 m!50501))

(assert (=> d!11283 m!50503))

(assert (=> d!11283 m!50521))

(assert (=> b!58800 d!11283))

(declare-fun d!11285 () Bool)

(assert (=> d!11285 (= (apply!66 (+!81 lt!23702 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) lt!23686) (get!1076 (getValueByKey!122 (toList!693 (+!81 lt!23702 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!23686)))))

(declare-fun bs!2561 () Bool)

(assert (= bs!2561 d!11285))

(declare-fun m!50977 () Bool)

(assert (=> bs!2561 m!50977))

(assert (=> bs!2561 m!50977))

(declare-fun m!50979 () Bool)

(assert (=> bs!2561 m!50979))

(assert (=> b!58800 d!11285))

(declare-fun d!11287 () Bool)

(assert (=> d!11287 (contains!682 (+!81 lt!23697 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))) lt!23695)))

(declare-fun lt!24034 () Unit!1550)

(declare-fun choose!314 (ListLongMap!1355 (_ BitVec 64) V!2841 (_ BitVec 64)) Unit!1550)

(assert (=> d!11287 (= lt!24034 (choose!314 lt!23697 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))) lt!23695))))

(assert (=> d!11287 (contains!682 lt!23697 lt!23695)))

(assert (=> d!11287 (= (addStillContains!42 lt!23697 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))) lt!23695) lt!24034)))

(declare-fun bs!2562 () Bool)

(assert (= bs!2562 d!11287))

(assert (=> bs!2562 m!50507))

(assert (=> bs!2562 m!50507))

(assert (=> bs!2562 m!50509))

(declare-fun m!50981 () Bool)

(assert (=> bs!2562 m!50981))

(declare-fun m!50983 () Bool)

(assert (=> bs!2562 m!50983))

(assert (=> b!58800 d!11287))

(declare-fun d!11289 () Bool)

(assert (=> d!11289 (= (apply!66 (+!81 lt!23702 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) lt!23686) (apply!66 lt!23702 lt!23686))))

(declare-fun lt!24035 () Unit!1550)

(assert (=> d!11289 (= lt!24035 (choose!313 lt!23702 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992))) lt!23686))))

(declare-fun e!38955 () Bool)

(assert (=> d!11289 e!38955))

(declare-fun res!32906 () Bool)

(assert (=> d!11289 (=> (not res!32906) (not e!38955))))

(assert (=> d!11289 (= res!32906 (contains!682 lt!23702 lt!23686))))

(assert (=> d!11289 (= (addApplyDifferent!42 lt!23702 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992))) lt!23686) lt!24035)))

(declare-fun b!59221 () Bool)

(assert (=> b!59221 (= e!38955 (not (= lt!23686 lt!23684)))))

(assert (= (and d!11289 res!32906) b!59221))

(assert (=> d!11289 m!50491))

(declare-fun m!50985 () Bool)

(assert (=> d!11289 m!50985))

(declare-fun m!50987 () Bool)

(assert (=> d!11289 m!50987))

(assert (=> d!11289 m!50491))

(assert (=> d!11289 m!50493))

(assert (=> d!11289 m!50499))

(assert (=> b!58800 d!11289))

(declare-fun d!11291 () Bool)

(declare-fun e!38956 () Bool)

(assert (=> d!11291 e!38956))

(declare-fun res!32907 () Bool)

(assert (=> d!11291 (=> (not res!32907) (not e!38956))))

(declare-fun lt!24038 () ListLongMap!1355)

(assert (=> d!11291 (= res!32907 (contains!682 lt!24038 (_1!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun lt!24039 () List!1437)

(assert (=> d!11291 (= lt!24038 (ListLongMap!1356 lt!24039))))

(declare-fun lt!24036 () Unit!1550)

(declare-fun lt!24037 () Unit!1550)

(assert (=> d!11291 (= lt!24036 lt!24037)))

(assert (=> d!11291 (= (getValueByKey!122 lt!24039 (_1!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))) (Some!127 (_2!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(assert (=> d!11291 (= lt!24037 (lemmaContainsTupThenGetReturnValue!42 lt!24039 (_1!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(assert (=> d!11291 (= lt!24039 (insertStrictlySorted!45 (toList!693 lt!23697) (_1!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(assert (=> d!11291 (= (+!81 lt!23697 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))) lt!24038)))

(declare-fun b!59222 () Bool)

(declare-fun res!32908 () Bool)

(assert (=> b!59222 (=> (not res!32908) (not e!38956))))

(assert (=> b!59222 (= res!32908 (= (getValueByKey!122 (toList!693 lt!24038) (_1!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))) (Some!127 (_2!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(declare-fun b!59223 () Bool)

(assert (=> b!59223 (= e!38956 (contains!684 (toList!693 lt!24038) (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))))

(assert (= (and d!11291 res!32907) b!59222))

(assert (= (and b!59222 res!32908) b!59223))

(declare-fun m!50989 () Bool)

(assert (=> d!11291 m!50989))

(declare-fun m!50991 () Bool)

(assert (=> d!11291 m!50991))

(declare-fun m!50993 () Bool)

(assert (=> d!11291 m!50993))

(declare-fun m!50995 () Bool)

(assert (=> d!11291 m!50995))

(declare-fun m!50997 () Bool)

(assert (=> b!59222 m!50997))

(declare-fun m!50999 () Bool)

(assert (=> b!59223 m!50999))

(assert (=> b!58800 d!11291))

(declare-fun d!11293 () Bool)

(assert (=> d!11293 (= (apply!66 lt!23690 lt!23694) (get!1076 (getValueByKey!122 (toList!693 lt!23690) lt!23694)))))

(declare-fun bs!2563 () Bool)

(assert (= bs!2563 d!11293))

(declare-fun m!51001 () Bool)

(assert (=> bs!2563 m!51001))

(assert (=> bs!2563 m!51001))

(declare-fun m!51003 () Bool)

(assert (=> bs!2563 m!51003))

(assert (=> b!58800 d!11293))

(declare-fun d!11295 () Bool)

(declare-fun e!38957 () Bool)

(assert (=> d!11295 e!38957))

(declare-fun res!32909 () Bool)

(assert (=> d!11295 (=> (not res!32909) (not e!38957))))

(declare-fun lt!24042 () ListLongMap!1355)

(assert (=> d!11295 (= res!32909 (contains!682 lt!24042 (_1!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun lt!24043 () List!1437)

(assert (=> d!11295 (= lt!24042 (ListLongMap!1356 lt!24043))))

(declare-fun lt!24040 () Unit!1550)

(declare-fun lt!24041 () Unit!1550)

(assert (=> d!11295 (= lt!24040 lt!24041)))

(assert (=> d!11295 (= (getValueByKey!122 lt!24043 (_1!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) (Some!127 (_2!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(assert (=> d!11295 (= lt!24041 (lemmaContainsTupThenGetReturnValue!42 lt!24043 (_1!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(assert (=> d!11295 (= lt!24043 (insertStrictlySorted!45 (toList!693 lt!23700) (_1!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(assert (=> d!11295 (= (+!81 lt!23700 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) lt!24042)))

(declare-fun b!59224 () Bool)

(declare-fun res!32910 () Bool)

(assert (=> b!59224 (=> (not res!32910) (not e!38957))))

(assert (=> b!59224 (= res!32910 (= (getValueByKey!122 (toList!693 lt!24042) (_1!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) (Some!127 (_2!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(declare-fun b!59225 () Bool)

(assert (=> b!59225 (= e!38957 (contains!684 (toList!693 lt!24042) (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))

(assert (= (and d!11295 res!32909) b!59224))

(assert (= (and b!59224 res!32910) b!59225))

(declare-fun m!51005 () Bool)

(assert (=> d!11295 m!51005))

(declare-fun m!51007 () Bool)

(assert (=> d!11295 m!51007))

(declare-fun m!51009 () Bool)

(assert (=> d!11295 m!51009))

(declare-fun m!51011 () Bool)

(assert (=> d!11295 m!51011))

(declare-fun m!51013 () Bool)

(assert (=> b!59224 m!51013))

(declare-fun m!51015 () Bool)

(assert (=> b!59225 m!51015))

(assert (=> b!58800 d!11295))

(declare-fun d!11297 () Bool)

(assert (=> d!11297 (= (apply!66 lt!23700 lt!23685) (get!1076 (getValueByKey!122 (toList!693 lt!23700) lt!23685)))))

(declare-fun bs!2564 () Bool)

(assert (= bs!2564 d!11297))

(declare-fun m!51017 () Bool)

(assert (=> bs!2564 m!51017))

(assert (=> bs!2564 m!51017))

(declare-fun m!51019 () Bool)

(assert (=> bs!2564 m!51019))

(assert (=> b!58800 d!11297))

(declare-fun d!11299 () Bool)

(declare-fun e!38958 () Bool)

(assert (=> d!11299 e!38958))

(declare-fun res!32911 () Bool)

(assert (=> d!11299 (=> (not res!32911) (not e!38958))))

(declare-fun lt!24046 () ListLongMap!1355)

(assert (=> d!11299 (= res!32911 (contains!682 lt!24046 (_1!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun lt!24047 () List!1437)

(assert (=> d!11299 (= lt!24046 (ListLongMap!1356 lt!24047))))

(declare-fun lt!24044 () Unit!1550)

(declare-fun lt!24045 () Unit!1550)

(assert (=> d!11299 (= lt!24044 lt!24045)))

(assert (=> d!11299 (= (getValueByKey!122 lt!24047 (_1!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))) (Some!127 (_2!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(assert (=> d!11299 (= lt!24045 (lemmaContainsTupThenGetReturnValue!42 lt!24047 (_1!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(assert (=> d!11299 (= lt!24047 (insertStrictlySorted!45 (toList!693 lt!23690) (_1!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(assert (=> d!11299 (= (+!81 lt!23690 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))) lt!24046)))

(declare-fun b!59226 () Bool)

(declare-fun res!32912 () Bool)

(assert (=> b!59226 (=> (not res!32912) (not e!38958))))

(assert (=> b!59226 (= res!32912 (= (getValueByKey!122 (toList!693 lt!24046) (_1!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))) (Some!127 (_2!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(declare-fun b!59227 () Bool)

(assert (=> b!59227 (= e!38958 (contains!684 (toList!693 lt!24046) (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))))

(assert (= (and d!11299 res!32911) b!59226))

(assert (= (and b!59226 res!32912) b!59227))

(declare-fun m!51021 () Bool)

(assert (=> d!11299 m!51021))

(declare-fun m!51023 () Bool)

(assert (=> d!11299 m!51023))

(declare-fun m!51025 () Bool)

(assert (=> d!11299 m!51025))

(declare-fun m!51027 () Bool)

(assert (=> d!11299 m!51027))

(declare-fun m!51029 () Bool)

(assert (=> b!59226 m!51029))

(declare-fun m!51031 () Bool)

(assert (=> b!59227 m!51031))

(assert (=> b!58800 d!11299))

(declare-fun d!11301 () Bool)

(declare-fun e!38960 () Bool)

(assert (=> d!11301 e!38960))

(declare-fun res!32913 () Bool)

(assert (=> d!11301 (=> res!32913 e!38960)))

(declare-fun lt!24048 () Bool)

(assert (=> d!11301 (= res!32913 (not lt!24048))))

(declare-fun lt!24050 () Bool)

(assert (=> d!11301 (= lt!24048 lt!24050)))

(declare-fun lt!24049 () Unit!1550)

(declare-fun e!38959 () Unit!1550)

(assert (=> d!11301 (= lt!24049 e!38959)))

(declare-fun c!7544 () Bool)

(assert (=> d!11301 (= c!7544 lt!24050)))

(assert (=> d!11301 (= lt!24050 (containsKey!126 (toList!693 (+!81 lt!23697 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!23695))))

(assert (=> d!11301 (= (contains!682 (+!81 lt!23697 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))) lt!23695) lt!24048)))

(declare-fun b!59228 () Bool)

(declare-fun lt!24051 () Unit!1550)

(assert (=> b!59228 (= e!38959 lt!24051)))

(assert (=> b!59228 (= lt!24051 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 (+!81 lt!23697 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!23695))))

(assert (=> b!59228 (isDefined!76 (getValueByKey!122 (toList!693 (+!81 lt!23697 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!23695))))

(declare-fun b!59229 () Bool)

(declare-fun Unit!1570 () Unit!1550)

(assert (=> b!59229 (= e!38959 Unit!1570)))

(declare-fun b!59230 () Bool)

(assert (=> b!59230 (= e!38960 (isDefined!76 (getValueByKey!122 (toList!693 (+!81 lt!23697 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!23695)))))

(assert (= (and d!11301 c!7544) b!59228))

(assert (= (and d!11301 (not c!7544)) b!59229))

(assert (= (and d!11301 (not res!32913)) b!59230))

(declare-fun m!51033 () Bool)

(assert (=> d!11301 m!51033))

(declare-fun m!51035 () Bool)

(assert (=> b!59228 m!51035))

(declare-fun m!51037 () Bool)

(assert (=> b!59228 m!51037))

(assert (=> b!59228 m!51037))

(declare-fun m!51039 () Bool)

(assert (=> b!59228 m!51039))

(assert (=> b!59230 m!51037))

(assert (=> b!59230 m!51037))

(assert (=> b!59230 m!51039))

(assert (=> b!58800 d!11301))

(declare-fun d!11303 () Bool)

(assert (=> d!11303 (= (apply!66 (+!81 lt!23700 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) lt!23685) (get!1076 (getValueByKey!122 (toList!693 (+!81 lt!23700 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!23685)))))

(declare-fun bs!2565 () Bool)

(assert (= bs!2565 d!11303))

(declare-fun m!51041 () Bool)

(assert (=> bs!2565 m!51041))

(assert (=> bs!2565 m!51041))

(declare-fun m!51043 () Bool)

(assert (=> bs!2565 m!51043))

(assert (=> b!58800 d!11303))

(declare-fun d!11305 () Bool)

(declare-fun e!38962 () Bool)

(assert (=> d!11305 e!38962))

(declare-fun res!32914 () Bool)

(assert (=> d!11305 (=> res!32914 e!38962)))

(declare-fun lt!24052 () Bool)

(assert (=> d!11305 (= res!32914 (not lt!24052))))

(declare-fun lt!24054 () Bool)

(assert (=> d!11305 (= lt!24052 lt!24054)))

(declare-fun lt!24053 () Unit!1550)

(declare-fun e!38961 () Unit!1550)

(assert (=> d!11305 (= lt!24053 e!38961)))

(declare-fun c!7545 () Bool)

(assert (=> d!11305 (= c!7545 lt!24054)))

(assert (=> d!11305 (= lt!24054 (containsKey!126 (toList!693 lt!23704) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11305 (= (contains!682 lt!23704 #b0000000000000000000000000000000000000000000000000000000000000000) lt!24052)))

(declare-fun b!59231 () Bool)

(declare-fun lt!24055 () Unit!1550)

(assert (=> b!59231 (= e!38961 lt!24055)))

(assert (=> b!59231 (= lt!24055 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 lt!23704) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59231 (isDefined!76 (getValueByKey!122 (toList!693 lt!23704) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59232 () Bool)

(declare-fun Unit!1571 () Unit!1550)

(assert (=> b!59232 (= e!38961 Unit!1571)))

(declare-fun b!59233 () Bool)

(assert (=> b!59233 (= e!38962 (isDefined!76 (getValueByKey!122 (toList!693 lt!23704) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11305 c!7545) b!59231))

(assert (= (and d!11305 (not c!7545)) b!59232))

(assert (= (and d!11305 (not res!32914)) b!59233))

(declare-fun m!51045 () Bool)

(assert (=> d!11305 m!51045))

(declare-fun m!51047 () Bool)

(assert (=> b!59231 m!51047))

(assert (=> b!59231 m!50757))

(assert (=> b!59231 m!50757))

(declare-fun m!51049 () Bool)

(assert (=> b!59231 m!51049))

(assert (=> b!59233 m!50757))

(assert (=> b!59233 m!50757))

(assert (=> b!59233 m!51049))

(assert (=> bm!4319 d!11305))

(declare-fun b!59245 () Bool)

(declare-fun e!38965 () Bool)

(assert (=> b!59245 (= e!38965 (and (bvsge (extraKeys!1929 newMap!16) #b00000000000000000000000000000000) (bvsle (extraKeys!1929 newMap!16) #b00000000000000000000000000000011) (bvsge (_vacant!357 newMap!16) #b00000000000000000000000000000000)))))

(declare-fun d!11307 () Bool)

(declare-fun res!32926 () Bool)

(assert (=> d!11307 (=> (not res!32926) (not e!38965))))

(assert (=> d!11307 (= res!32926 (validMask!0 (mask!5925 newMap!16)))))

(assert (=> d!11307 (= (simpleValid!42 newMap!16) e!38965)))

(declare-fun b!59242 () Bool)

(declare-fun res!32923 () Bool)

(assert (=> b!59242 (=> (not res!32923) (not e!38965))))

(assert (=> b!59242 (= res!32923 (and (= (size!2000 (_values!2025 newMap!16)) (bvadd (mask!5925 newMap!16) #b00000000000000000000000000000001)) (= (size!1999 (_keys!3665 newMap!16)) (size!2000 (_values!2025 newMap!16))) (bvsge (_size!357 newMap!16) #b00000000000000000000000000000000) (bvsle (_size!357 newMap!16) (bvadd (mask!5925 newMap!16) #b00000000000000000000000000000001))))))

(declare-fun b!59243 () Bool)

(declare-fun res!32924 () Bool)

(assert (=> b!59243 (=> (not res!32924) (not e!38965))))

(declare-fun size!2005 (LongMapFixedSize!616) (_ BitVec 32))

(assert (=> b!59243 (= res!32924 (bvsge (size!2005 newMap!16) (_size!357 newMap!16)))))

(declare-fun b!59244 () Bool)

(declare-fun res!32925 () Bool)

(assert (=> b!59244 (=> (not res!32925) (not e!38965))))

(assert (=> b!59244 (= res!32925 (= (size!2005 newMap!16) (bvadd (_size!357 newMap!16) (bvsdiv (bvadd (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(assert (= (and d!11307 res!32926) b!59242))

(assert (= (and b!59242 res!32923) b!59243))

(assert (= (and b!59243 res!32924) b!59244))

(assert (= (and b!59244 res!32925) b!59245))

(assert (=> d!11307 m!50657))

(declare-fun m!51051 () Bool)

(assert (=> b!59243 m!51051))

(assert (=> b!59244 m!51051))

(assert (=> d!11199 d!11307))

(declare-fun d!11309 () Bool)

(assert (=> d!11309 (= (get!1075 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!58956 d!11309))

(declare-fun d!11311 () Bool)

(declare-fun e!38966 () Bool)

(assert (=> d!11311 e!38966))

(declare-fun res!32927 () Bool)

(assert (=> d!11311 (=> (not res!32927) (not e!38966))))

(declare-fun lt!24058 () ListLongMap!1355)

(assert (=> d!11311 (= res!32927 (contains!682 lt!24058 (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!24059 () List!1437)

(assert (=> d!11311 (= lt!24058 (ListLongMap!1356 lt!24059))))

(declare-fun lt!24056 () Unit!1550)

(declare-fun lt!24057 () Unit!1550)

(assert (=> d!11311 (= lt!24056 lt!24057)))

(assert (=> d!11311 (= (getValueByKey!122 lt!24059 (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!127 (_2!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11311 (= lt!24057 (lemmaContainsTupThenGetReturnValue!42 lt!24059 (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11311 (= lt!24059 (insertStrictlySorted!45 (toList!693 call!4377) (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11311 (= (+!81 call!4377 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!24058)))

(declare-fun b!59246 () Bool)

(declare-fun res!32928 () Bool)

(assert (=> b!59246 (=> (not res!32928) (not e!38966))))

(assert (=> b!59246 (= res!32928 (= (getValueByKey!122 (toList!693 lt!24058) (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!127 (_2!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!59247 () Bool)

(assert (=> b!59247 (= e!38966 (contains!684 (toList!693 lt!24058) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!11311 res!32927) b!59246))

(assert (= (and b!59246 res!32928) b!59247))

(declare-fun m!51053 () Bool)

(assert (=> d!11311 m!51053))

(declare-fun m!51055 () Bool)

(assert (=> d!11311 m!51055))

(declare-fun m!51057 () Bool)

(assert (=> d!11311 m!51057))

(declare-fun m!51059 () Bool)

(assert (=> d!11311 m!51059))

(declare-fun m!51061 () Bool)

(assert (=> b!59246 m!51061))

(declare-fun m!51063 () Bool)

(assert (=> b!59247 m!51063))

(assert (=> b!58944 d!11311))

(declare-fun b!59256 () Bool)

(declare-fun e!38975 () Bool)

(declare-fun call!4439 () Bool)

(assert (=> b!59256 (= e!38975 call!4439)))

(declare-fun bm!4436 () Bool)

(assert (=> bm!4436 (= call!4439 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3665 newMap!16) (mask!5925 newMap!16)))))

(declare-fun b!59257 () Bool)

(declare-fun e!38973 () Bool)

(assert (=> b!59257 (= e!38973 e!38975)))

(declare-fun lt!24068 () (_ BitVec 64))

(assert (=> b!59257 (= lt!24068 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24067 () Unit!1550)

(assert (=> b!59257 (= lt!24067 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3665 newMap!16) lt!24068 #b00000000000000000000000000000000))))

(assert (=> b!59257 (arrayContainsKey!0 (_keys!3665 newMap!16) lt!24068 #b00000000000000000000000000000000)))

(declare-fun lt!24066 () Unit!1550)

(assert (=> b!59257 (= lt!24066 lt!24067)))

(declare-fun res!32933 () Bool)

(assert (=> b!59257 (= res!32933 (= (seekEntryOrOpen!0 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000) (_keys!3665 newMap!16) (mask!5925 newMap!16)) (Found!230 #b00000000000000000000000000000000)))))

(assert (=> b!59257 (=> (not res!32933) (not e!38975))))

(declare-fun b!59258 () Bool)

(assert (=> b!59258 (= e!38973 call!4439)))

(declare-fun b!59259 () Bool)

(declare-fun e!38974 () Bool)

(assert (=> b!59259 (= e!38974 e!38973)))

(declare-fun c!7548 () Bool)

(assert (=> b!59259 (= c!7548 (validKeyInArray!0 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun d!11313 () Bool)

(declare-fun res!32934 () Bool)

(assert (=> d!11313 (=> res!32934 e!38974)))

(assert (=> d!11313 (= res!32934 (bvsge #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(assert (=> d!11313 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3665 newMap!16) (mask!5925 newMap!16)) e!38974)))

(assert (= (and d!11313 (not res!32934)) b!59259))

(assert (= (and b!59259 c!7548) b!59257))

(assert (= (and b!59259 (not c!7548)) b!59258))

(assert (= (and b!59257 res!32933) b!59256))

(assert (= (or b!59256 b!59258) bm!4436))

(declare-fun m!51065 () Bool)

(assert (=> bm!4436 m!51065))

(assert (=> b!59257 m!50643))

(declare-fun m!51067 () Bool)

(assert (=> b!59257 m!51067))

(declare-fun m!51069 () Bool)

(assert (=> b!59257 m!51069))

(assert (=> b!59257 m!50643))

(declare-fun m!51071 () Bool)

(assert (=> b!59257 m!51071))

(assert (=> b!59259 m!50643))

(assert (=> b!59259 m!50643))

(assert (=> b!59259 m!50645))

(assert (=> b!58814 d!11313))

(declare-fun d!11315 () Bool)

(assert (=> d!11315 (isDefined!76 (getValueByKey!122 (toList!693 lt!23596) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(declare-fun lt!24071 () Unit!1550)

(declare-fun choose!315 (List!1437 (_ BitVec 64)) Unit!1550)

(assert (=> d!11315 (= lt!24071 (choose!315 (toList!693 lt!23596) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(declare-fun e!38978 () Bool)

(assert (=> d!11315 e!38978))

(declare-fun res!32937 () Bool)

(assert (=> d!11315 (=> (not res!32937) (not e!38978))))

(declare-fun isStrictlySorted!279 (List!1437) Bool)

(assert (=> d!11315 (= res!32937 (isStrictlySorted!279 (toList!693 lt!23596)))))

(assert (=> d!11315 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 lt!23596) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) lt!24071)))

(declare-fun b!59262 () Bool)

(assert (=> b!59262 (= e!38978 (containsKey!126 (toList!693 lt!23596) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(assert (= (and d!11315 res!32937) b!59262))

(assert (=> d!11315 m!50353))

(assert (=> d!11315 m!50553))

(assert (=> d!11315 m!50553))

(assert (=> d!11315 m!50555))

(assert (=> d!11315 m!50353))

(declare-fun m!51073 () Bool)

(assert (=> d!11315 m!51073))

(declare-fun m!51075 () Bool)

(assert (=> d!11315 m!51075))

(assert (=> b!59262 m!50353))

(assert (=> b!59262 m!50549))

(assert (=> b!58822 d!11315))

(declare-fun d!11317 () Bool)

(declare-fun isEmpty!298 (Option!128) Bool)

(assert (=> d!11317 (= (isDefined!76 (getValueByKey!122 (toList!693 lt!23596) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355))) (not (isEmpty!298 (getValueByKey!122 (toList!693 lt!23596) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))))

(declare-fun bs!2566 () Bool)

(assert (= bs!2566 d!11317))

(assert (=> bs!2566 m!50553))

(declare-fun m!51077 () Bool)

(assert (=> bs!2566 m!51077))

(assert (=> b!58822 d!11317))

(declare-fun d!11319 () Bool)

(declare-fun c!7553 () Bool)

(assert (=> d!11319 (= c!7553 (and ((_ is Cons!1433) (toList!693 lt!23596)) (= (_1!1029 (h!2014 (toList!693 lt!23596))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355))))))

(declare-fun e!38983 () Option!128)

(assert (=> d!11319 (= (getValueByKey!122 (toList!693 lt!23596) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) e!38983)))

(declare-fun b!59273 () Bool)

(declare-fun e!38984 () Option!128)

(assert (=> b!59273 (= e!38984 (getValueByKey!122 (t!4770 (toList!693 lt!23596)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(declare-fun b!59272 () Bool)

(assert (=> b!59272 (= e!38983 e!38984)))

(declare-fun c!7554 () Bool)

(assert (=> b!59272 (= c!7554 (and ((_ is Cons!1433) (toList!693 lt!23596)) (not (= (_1!1029 (h!2014 (toList!693 lt!23596))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))))

(declare-fun b!59274 () Bool)

(assert (=> b!59274 (= e!38984 None!126)))

(declare-fun b!59271 () Bool)

(assert (=> b!59271 (= e!38983 (Some!127 (_2!1029 (h!2014 (toList!693 lt!23596)))))))

(assert (= (and d!11319 c!7553) b!59271))

(assert (= (and d!11319 (not c!7553)) b!59272))

(assert (= (and b!59272 c!7554) b!59273))

(assert (= (and b!59272 (not c!7554)) b!59274))

(assert (=> b!59273 m!50353))

(declare-fun m!51079 () Bool)

(assert (=> b!59273 m!51079))

(assert (=> b!58822 d!11319))

(declare-fun d!11321 () Bool)

(assert (=> d!11321 (= (map!1103 (_2!1028 lt!23773)) (getCurrentListMap!389 (_keys!3665 (_2!1028 lt!23773)) (_values!2025 (_2!1028 lt!23773)) (mask!5925 (_2!1028 lt!23773)) (extraKeys!1929 (_2!1028 lt!23773)) (zeroValue!1958 (_2!1028 lt!23773)) (minValue!1958 (_2!1028 lt!23773)) #b00000000000000000000000000000000 (defaultEntry!2042 (_2!1028 lt!23773))))))

(declare-fun bs!2567 () Bool)

(assert (= bs!2567 d!11321))

(declare-fun m!51081 () Bool)

(assert (=> bs!2567 m!51081))

(assert (=> bm!4388 d!11321))

(declare-fun b!59291 () Bool)

(declare-fun e!38994 () Bool)

(declare-fun call!4445 () Bool)

(assert (=> b!59291 (= e!38994 (not call!4445))))

(declare-fun b!59292 () Bool)

(declare-fun e!38995 () Bool)

(assert (=> b!59292 (= e!38995 (not call!4445))))

(declare-fun b!59293 () Bool)

(declare-fun e!38996 () Bool)

(assert (=> b!59293 (= e!38996 e!38995)))

(declare-fun res!32948 () Bool)

(declare-fun call!4444 () Bool)

(assert (=> b!59293 (= res!32948 call!4444)))

(assert (=> b!59293 (=> (not res!32948) (not e!38995))))

(declare-fun b!59294 () Bool)

(declare-fun res!32947 () Bool)

(assert (=> b!59294 (=> (not res!32947) (not e!38994))))

(assert (=> b!59294 (= res!32947 call!4444)))

(declare-fun e!38993 () Bool)

(assert (=> b!59294 (= e!38993 e!38994)))

(declare-fun b!59295 () Bool)

(declare-fun lt!24077 () SeekEntryResult!230)

(assert (=> b!59295 (and (bvsge (index!3043 lt!24077) #b00000000000000000000000000000000) (bvslt (index!3043 lt!24077) (size!1999 (_keys!3665 newMap!16))))))

(declare-fun res!32946 () Bool)

(assert (=> b!59295 (= res!32946 (= (select (arr!1768 (_keys!3665 newMap!16)) (index!3043 lt!24077)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59295 (=> (not res!32946) (not e!38995))))

(declare-fun c!7559 () Bool)

(declare-fun bm!4441 () Bool)

(assert (=> bm!4441 (= call!4444 (inRange!0 (ite c!7559 (index!3043 lt!24077) (index!3046 lt!24077)) (mask!5925 newMap!16)))))

(declare-fun d!11323 () Bool)

(assert (=> d!11323 e!38996))

(assert (=> d!11323 (= c!7559 ((_ is MissingZero!230) lt!24077))))

(assert (=> d!11323 (= lt!24077 (seekEntryOrOpen!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (_keys!3665 newMap!16) (mask!5925 newMap!16)))))

(declare-fun lt!24076 () Unit!1550)

(declare-fun choose!316 (array!3697 array!3699 (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 (_ BitVec 64) Int) Unit!1550)

(assert (=> d!11323 (= lt!24076 (choose!316 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (defaultEntry!2042 newMap!16)))))

(assert (=> d!11323 (validMask!0 (mask!5925 newMap!16))))

(assert (=> d!11323 (= (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!15 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (defaultEntry!2042 newMap!16)) lt!24076)))

(declare-fun b!59296 () Bool)

(assert (=> b!59296 (= e!38993 ((_ is Undefined!230) lt!24077))))

(declare-fun b!59297 () Bool)

(assert (=> b!59297 (= e!38996 e!38993)))

(declare-fun c!7560 () Bool)

(assert (=> b!59297 (= c!7560 ((_ is MissingVacant!230) lt!24077))))

(declare-fun b!59298 () Bool)

(declare-fun res!32949 () Bool)

(assert (=> b!59298 (=> (not res!32949) (not e!38994))))

(assert (=> b!59298 (= res!32949 (= (select (arr!1768 (_keys!3665 newMap!16)) (index!3046 lt!24077)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59298 (and (bvsge (index!3046 lt!24077) #b00000000000000000000000000000000) (bvslt (index!3046 lt!24077) (size!1999 (_keys!3665 newMap!16))))))

(declare-fun bm!4442 () Bool)

(assert (=> bm!4442 (= call!4445 (arrayContainsKey!0 (_keys!3665 newMap!16) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(assert (= (and d!11323 c!7559) b!59293))

(assert (= (and d!11323 (not c!7559)) b!59297))

(assert (= (and b!59293 res!32948) b!59295))

(assert (= (and b!59295 res!32946) b!59292))

(assert (= (and b!59297 c!7560) b!59294))

(assert (= (and b!59297 (not c!7560)) b!59296))

(assert (= (and b!59294 res!32947) b!59298))

(assert (= (and b!59298 res!32949) b!59291))

(assert (= (or b!59293 b!59294) bm!4441))

(assert (= (or b!59292 b!59291) bm!4442))

(assert (=> d!11323 m!50353))

(assert (=> d!11323 m!50557))

(assert (=> d!11323 m!50353))

(declare-fun m!51083 () Bool)

(assert (=> d!11323 m!51083))

(assert (=> d!11323 m!50657))

(assert (=> bm!4442 m!50353))

(assert (=> bm!4442 m!50581))

(declare-fun m!51085 () Bool)

(assert (=> b!59298 m!51085))

(declare-fun m!51087 () Bool)

(assert (=> b!59295 m!51087))

(declare-fun m!51089 () Bool)

(assert (=> bm!4441 m!51089))

(assert (=> bm!4379 d!11323))

(assert (=> b!58948 d!11249))

(assert (=> b!58824 d!11317))

(assert (=> b!58824 d!11319))

(declare-fun d!11325 () Bool)

(declare-fun e!38998 () Bool)

(assert (=> d!11325 e!38998))

(declare-fun res!32950 () Bool)

(assert (=> d!11325 (=> res!32950 e!38998)))

(declare-fun lt!24078 () Bool)

(assert (=> d!11325 (= res!32950 (not lt!24078))))

(declare-fun lt!24080 () Bool)

(assert (=> d!11325 (= lt!24078 lt!24080)))

(declare-fun lt!24079 () Unit!1550)

(declare-fun e!38997 () Unit!1550)

(assert (=> d!11325 (= lt!24079 e!38997)))

(declare-fun c!7561 () Bool)

(assert (=> d!11325 (= c!7561 lt!24080)))

(assert (=> d!11325 (= lt!24080 (containsKey!126 (toList!693 lt!23704) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11325 (= (contains!682 lt!23704 #b1000000000000000000000000000000000000000000000000000000000000000) lt!24078)))

(declare-fun b!59299 () Bool)

(declare-fun lt!24081 () Unit!1550)

(assert (=> b!59299 (= e!38997 lt!24081)))

(assert (=> b!59299 (= lt!24081 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 lt!23704) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59299 (isDefined!76 (getValueByKey!122 (toList!693 lt!23704) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59300 () Bool)

(declare-fun Unit!1572 () Unit!1550)

(assert (=> b!59300 (= e!38997 Unit!1572)))

(declare-fun b!59301 () Bool)

(assert (=> b!59301 (= e!38998 (isDefined!76 (getValueByKey!122 (toList!693 lt!23704) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11325 c!7561) b!59299))

(assert (= (and d!11325 (not c!7561)) b!59300))

(assert (= (and d!11325 (not res!32950)) b!59301))

(declare-fun m!51091 () Bool)

(assert (=> d!11325 m!51091))

(declare-fun m!51093 () Bool)

(assert (=> b!59299 m!51093))

(assert (=> b!59299 m!50873))

(assert (=> b!59299 m!50873))

(declare-fun m!51095 () Bool)

(assert (=> b!59299 m!51095))

(assert (=> b!59301 m!50873))

(assert (=> b!59301 m!50873))

(assert (=> b!59301 m!51095))

(assert (=> bm!4321 d!11325))

(declare-fun b!59302 () Bool)

(declare-fun e!39005 () Bool)

(assert (=> b!59302 (= e!39005 (validKeyInArray!0 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!4443 () Bool)

(declare-fun call!4452 () Bool)

(declare-fun lt!24103 () ListLongMap!1355)

(assert (=> bm!4443 (= call!4452 (contains!682 lt!24103 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59303 () Bool)

(declare-fun e!39003 () Unit!1550)

(declare-fun Unit!1573 () Unit!1550)

(assert (=> b!59303 (= e!39003 Unit!1573)))

(declare-fun b!59304 () Bool)

(declare-fun res!32954 () Bool)

(declare-fun e!39006 () Bool)

(assert (=> b!59304 (=> (not res!32954) (not e!39006))))

(declare-fun e!39004 () Bool)

(assert (=> b!59304 (= res!32954 e!39004)))

(declare-fun c!7562 () Bool)

(assert (=> b!59304 (= c!7562 (not (= (bvand (ite c!7466 (ite c!7465 (extraKeys!1929 newMap!16) lt!23782) (extraKeys!1929 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!59305 () Bool)

(declare-fun e!39000 () ListLongMap!1355)

(declare-fun call!4449 () ListLongMap!1355)

(assert (=> b!59305 (= e!39000 call!4449)))

(declare-fun bm!4444 () Bool)

(declare-fun call!4448 () ListLongMap!1355)

(declare-fun call!4450 () ListLongMap!1355)

(assert (=> bm!4444 (= call!4448 call!4450)))

(declare-fun b!59307 () Bool)

(declare-fun e!39011 () Bool)

(declare-fun e!38999 () Bool)

(assert (=> b!59307 (= e!39011 e!38999)))

(declare-fun res!32957 () Bool)

(declare-fun call!4446 () Bool)

(assert (=> b!59307 (= res!32957 call!4446)))

(assert (=> b!59307 (=> (not res!32957) (not e!38999))))

(declare-fun b!59308 () Bool)

(assert (=> b!59308 (= e!39006 e!39011)))

(declare-fun c!7563 () Bool)

(assert (=> b!59308 (= c!7563 (not (= (bvand (ite c!7466 (ite c!7465 (extraKeys!1929 newMap!16) lt!23782) (extraKeys!1929 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4445 () Bool)

(assert (=> bm!4445 (= call!4446 (contains!682 lt!24103 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4446 () Bool)

(declare-fun call!4451 () ListLongMap!1355)

(assert (=> bm!4446 (= call!4449 call!4451)))

(declare-fun b!59309 () Bool)

(declare-fun c!7566 () Bool)

(assert (=> b!59309 (= c!7566 (and (not (= (bvand (ite c!7466 (ite c!7465 (extraKeys!1929 newMap!16) lt!23782) (extraKeys!1929 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite c!7466 (ite c!7465 (extraKeys!1929 newMap!16) lt!23782) (extraKeys!1929 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!39001 () ListLongMap!1355)

(assert (=> b!59309 (= e!39000 e!39001)))

(declare-fun b!59310 () Bool)

(declare-fun e!39009 () Bool)

(assert (=> b!59310 (= e!39009 (= (apply!66 lt!24103 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1958 newMap!16)))))

(declare-fun b!59311 () Bool)

(declare-fun res!32951 () Bool)

(assert (=> b!59311 (=> (not res!32951) (not e!39006))))

(declare-fun e!39010 () Bool)

(assert (=> b!59311 (= res!32951 e!39010)))

(declare-fun res!32953 () Bool)

(assert (=> b!59311 (=> res!32953 e!39010)))

(assert (=> b!59311 (= res!32953 (not e!39005))))

(declare-fun res!32959 () Bool)

(assert (=> b!59311 (=> (not res!32959) (not e!39005))))

(assert (=> b!59311 (= res!32959 (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(declare-fun b!59312 () Bool)

(declare-fun e!39008 () ListLongMap!1355)

(assert (=> b!59312 (= e!39008 (+!81 call!4451 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))))))

(declare-fun bm!4447 () Bool)

(declare-fun call!4447 () ListLongMap!1355)

(assert (=> bm!4447 (= call!4447 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (ite (or c!7466 c!7462) (_values!2025 newMap!16) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (index!3044 lt!23774) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16)))) (mask!5925 newMap!16) (ite c!7466 (ite c!7465 (extraKeys!1929 newMap!16) lt!23782) (extraKeys!1929 newMap!16)) (zeroValue!1958 newMap!16) (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun c!7565 () Bool)

(declare-fun bm!4448 () Bool)

(declare-fun c!7567 () Bool)

(assert (=> bm!4448 (= call!4451 (+!81 (ite c!7565 call!4447 (ite c!7567 call!4450 call!4448)) (ite (or c!7565 c!7567) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))))))

(declare-fun b!59313 () Bool)

(assert (=> b!59313 (= e!39011 (not call!4446))))

(declare-fun b!59314 () Bool)

(assert (=> b!59314 (= e!38999 (= (apply!66 lt!24103 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))))

(declare-fun b!59315 () Bool)

(declare-fun e!39002 () Bool)

(assert (=> b!59315 (= e!39002 (= (apply!66 lt!24103 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)) (get!1073 (select (arr!1769 (ite (or c!7466 c!7462) (_values!2025 newMap!16) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (index!3044 lt!23774) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!59315 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2000 (ite (or c!7466 c!7462) (_values!2025 newMap!16) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (index!3044 lt!23774) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16)))))))))

(assert (=> b!59315 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(declare-fun b!59306 () Bool)

(assert (=> b!59306 (= e!39010 e!39002)))

(declare-fun res!32956 () Bool)

(assert (=> b!59306 (=> (not res!32956) (not e!39002))))

(assert (=> b!59306 (= res!32956 (contains!682 lt!24103 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59306 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(declare-fun d!11327 () Bool)

(assert (=> d!11327 e!39006))

(declare-fun res!32955 () Bool)

(assert (=> d!11327 (=> (not res!32955) (not e!39006))))

(assert (=> d!11327 (= res!32955 (or (bvsge #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))))

(declare-fun lt!24097 () ListLongMap!1355)

(assert (=> d!11327 (= lt!24103 lt!24097)))

(declare-fun lt!24102 () Unit!1550)

(assert (=> d!11327 (= lt!24102 e!39003)))

(declare-fun c!7564 () Bool)

(declare-fun e!39007 () Bool)

(assert (=> d!11327 (= c!7564 e!39007)))

(declare-fun res!32958 () Bool)

(assert (=> d!11327 (=> (not res!32958) (not e!39007))))

(assert (=> d!11327 (= res!32958 (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(assert (=> d!11327 (= lt!24097 e!39008)))

(assert (=> d!11327 (= c!7565 (and (not (= (bvand (ite c!7466 (ite c!7465 (extraKeys!1929 newMap!16) lt!23782) (extraKeys!1929 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite c!7466 (ite c!7465 (extraKeys!1929 newMap!16) lt!23782) (extraKeys!1929 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11327 (validMask!0 (mask!5925 newMap!16))))

(assert (=> d!11327 (= (getCurrentListMap!389 (_keys!3665 newMap!16) (ite (or c!7466 c!7462) (_values!2025 newMap!16) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (index!3044 lt!23774) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16)))) (mask!5925 newMap!16) (ite c!7466 (ite c!7465 (extraKeys!1929 newMap!16) lt!23782) (extraKeys!1929 newMap!16)) (zeroValue!1958 newMap!16) (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) lt!24103)))

(declare-fun b!59316 () Bool)

(declare-fun lt!24091 () Unit!1550)

(assert (=> b!59316 (= e!39003 lt!24091)))

(declare-fun lt!24096 () ListLongMap!1355)

(assert (=> b!59316 (= lt!24096 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (ite (or c!7466 c!7462) (_values!2025 newMap!16) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (index!3044 lt!23774) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16)))) (mask!5925 newMap!16) (ite c!7466 (ite c!7465 (extraKeys!1929 newMap!16) lt!23782) (extraKeys!1929 newMap!16)) (zeroValue!1958 newMap!16) (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24095 () (_ BitVec 64))

(assert (=> b!59316 (= lt!24095 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24094 () (_ BitVec 64))

(assert (=> b!59316 (= lt!24094 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24087 () Unit!1550)

(assert (=> b!59316 (= lt!24087 (addStillContains!42 lt!24096 lt!24095 (zeroValue!1958 newMap!16) lt!24094))))

(assert (=> b!59316 (contains!682 (+!81 lt!24096 (tuple2!2037 lt!24095 (zeroValue!1958 newMap!16))) lt!24094)))

(declare-fun lt!24098 () Unit!1550)

(assert (=> b!59316 (= lt!24098 lt!24087)))

(declare-fun lt!24101 () ListLongMap!1355)

(assert (=> b!59316 (= lt!24101 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (ite (or c!7466 c!7462) (_values!2025 newMap!16) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (index!3044 lt!23774) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16)))) (mask!5925 newMap!16) (ite c!7466 (ite c!7465 (extraKeys!1929 newMap!16) lt!23782) (extraKeys!1929 newMap!16)) (zeroValue!1958 newMap!16) (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24083 () (_ BitVec 64))

(assert (=> b!59316 (= lt!24083 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24085 () (_ BitVec 64))

(assert (=> b!59316 (= lt!24085 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24082 () Unit!1550)

(assert (=> b!59316 (= lt!24082 (addApplyDifferent!42 lt!24101 lt!24083 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)) lt!24085))))

(assert (=> b!59316 (= (apply!66 (+!81 lt!24101 (tuple2!2037 lt!24083 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))) lt!24085) (apply!66 lt!24101 lt!24085))))

(declare-fun lt!24090 () Unit!1550)

(assert (=> b!59316 (= lt!24090 lt!24082)))

(declare-fun lt!24089 () ListLongMap!1355)

(assert (=> b!59316 (= lt!24089 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (ite (or c!7466 c!7462) (_values!2025 newMap!16) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (index!3044 lt!23774) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16)))) (mask!5925 newMap!16) (ite c!7466 (ite c!7465 (extraKeys!1929 newMap!16) lt!23782) (extraKeys!1929 newMap!16)) (zeroValue!1958 newMap!16) (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24086 () (_ BitVec 64))

(assert (=> b!59316 (= lt!24086 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24093 () (_ BitVec 64))

(assert (=> b!59316 (= lt!24093 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24088 () Unit!1550)

(assert (=> b!59316 (= lt!24088 (addApplyDifferent!42 lt!24089 lt!24086 (zeroValue!1958 newMap!16) lt!24093))))

(assert (=> b!59316 (= (apply!66 (+!81 lt!24089 (tuple2!2037 lt!24086 (zeroValue!1958 newMap!16))) lt!24093) (apply!66 lt!24089 lt!24093))))

(declare-fun lt!24100 () Unit!1550)

(assert (=> b!59316 (= lt!24100 lt!24088)))

(declare-fun lt!24099 () ListLongMap!1355)

(assert (=> b!59316 (= lt!24099 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (ite (or c!7466 c!7462) (_values!2025 newMap!16) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (index!3044 lt!23774) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16)))) (mask!5925 newMap!16) (ite c!7466 (ite c!7465 (extraKeys!1929 newMap!16) lt!23782) (extraKeys!1929 newMap!16)) (zeroValue!1958 newMap!16) (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24092 () (_ BitVec 64))

(assert (=> b!59316 (= lt!24092 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24084 () (_ BitVec 64))

(assert (=> b!59316 (= lt!24084 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!59316 (= lt!24091 (addApplyDifferent!42 lt!24099 lt!24092 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)) lt!24084))))

(assert (=> b!59316 (= (apply!66 (+!81 lt!24099 (tuple2!2037 lt!24092 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))) lt!24084) (apply!66 lt!24099 lt!24084))))

(declare-fun b!59317 () Bool)

(assert (=> b!59317 (= e!39007 (validKeyInArray!0 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59318 () Bool)

(assert (=> b!59318 (= e!39004 e!39009)))

(declare-fun res!32952 () Bool)

(assert (=> b!59318 (= res!32952 call!4452)))

(assert (=> b!59318 (=> (not res!32952) (not e!39009))))

(declare-fun b!59319 () Bool)

(assert (=> b!59319 (= e!39008 e!39000)))

(assert (=> b!59319 (= c!7567 (and (not (= (bvand (ite c!7466 (ite c!7465 (extraKeys!1929 newMap!16) lt!23782) (extraKeys!1929 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite c!7466 (ite c!7465 (extraKeys!1929 newMap!16) lt!23782) (extraKeys!1929 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!59320 () Bool)

(assert (=> b!59320 (= e!39001 call!4449)))

(declare-fun b!59321 () Bool)

(assert (=> b!59321 (= e!39004 (not call!4452))))

(declare-fun b!59322 () Bool)

(assert (=> b!59322 (= e!39001 call!4448)))

(declare-fun bm!4449 () Bool)

(assert (=> bm!4449 (= call!4450 call!4447)))

(assert (= (and d!11327 c!7565) b!59312))

(assert (= (and d!11327 (not c!7565)) b!59319))

(assert (= (and b!59319 c!7567) b!59305))

(assert (= (and b!59319 (not c!7567)) b!59309))

(assert (= (and b!59309 c!7566) b!59320))

(assert (= (and b!59309 (not c!7566)) b!59322))

(assert (= (or b!59320 b!59322) bm!4444))

(assert (= (or b!59305 bm!4444) bm!4449))

(assert (= (or b!59305 b!59320) bm!4446))

(assert (= (or b!59312 bm!4449) bm!4447))

(assert (= (or b!59312 bm!4446) bm!4448))

(assert (= (and d!11327 res!32958) b!59317))

(assert (= (and d!11327 c!7564) b!59316))

(assert (= (and d!11327 (not c!7564)) b!59303))

(assert (= (and d!11327 res!32955) b!59311))

(assert (= (and b!59311 res!32959) b!59302))

(assert (= (and b!59311 (not res!32953)) b!59306))

(assert (= (and b!59306 res!32956) b!59315))

(assert (= (and b!59311 res!32951) b!59304))

(assert (= (and b!59304 c!7562) b!59318))

(assert (= (and b!59304 (not c!7562)) b!59321))

(assert (= (and b!59318 res!32952) b!59310))

(assert (= (or b!59318 b!59321) bm!4443))

(assert (= (and b!59304 res!32954) b!59308))

(assert (= (and b!59308 c!7563) b!59307))

(assert (= (and b!59308 (not c!7563)) b!59313))

(assert (= (and b!59307 res!32957) b!59314))

(assert (= (or b!59307 b!59313) bm!4445))

(declare-fun b_lambda!2599 () Bool)

(assert (=> (not b_lambda!2599) (not b!59315)))

(assert (=> b!59315 t!4781))

(declare-fun b_and!3585 () Bool)

(assert (= b_and!3581 (and (=> t!4781 result!2381) b_and!3585)))

(assert (=> b!59315 t!4783))

(declare-fun b_and!3587 () Bool)

(assert (= b_and!3583 (and (=> t!4783 result!2383) b_and!3587)))

(declare-fun m!51097 () Bool)

(assert (=> b!59314 m!51097))

(assert (=> d!11327 m!50657))

(assert (=> b!59317 m!50643))

(assert (=> b!59317 m!50643))

(assert (=> b!59317 m!50645))

(declare-fun m!51099 () Bool)

(assert (=> bm!4443 m!51099))

(assert (=> b!59302 m!50643))

(assert (=> b!59302 m!50643))

(assert (=> b!59302 m!50645))

(declare-fun m!51101 () Bool)

(assert (=> b!59316 m!51101))

(declare-fun m!51103 () Bool)

(assert (=> b!59316 m!51103))

(declare-fun m!51105 () Bool)

(assert (=> b!59316 m!51105))

(declare-fun m!51107 () Bool)

(assert (=> b!59316 m!51107))

(declare-fun m!51109 () Bool)

(assert (=> b!59316 m!51109))

(declare-fun m!51111 () Bool)

(assert (=> b!59316 m!51111))

(declare-fun m!51113 () Bool)

(assert (=> b!59316 m!51113))

(declare-fun m!51115 () Bool)

(assert (=> b!59316 m!51115))

(assert (=> b!59316 m!50643))

(declare-fun m!51117 () Bool)

(assert (=> b!59316 m!51117))

(declare-fun m!51119 () Bool)

(assert (=> b!59316 m!51119))

(declare-fun m!51121 () Bool)

(assert (=> b!59316 m!51121))

(assert (=> b!59316 m!51101))

(declare-fun m!51123 () Bool)

(assert (=> b!59316 m!51123))

(declare-fun m!51125 () Bool)

(assert (=> b!59316 m!51125))

(declare-fun m!51127 () Bool)

(assert (=> b!59316 m!51127))

(assert (=> b!59316 m!51111))

(declare-fun m!51129 () Bool)

(assert (=> b!59316 m!51129))

(assert (=> b!59316 m!51123))

(assert (=> b!59316 m!51117))

(declare-fun m!51131 () Bool)

(assert (=> b!59316 m!51131))

(assert (=> b!59315 m!50643))

(declare-fun m!51133 () Bool)

(assert (=> b!59315 m!51133))

(assert (=> b!59315 m!50697))

(declare-fun m!51135 () Bool)

(assert (=> b!59315 m!51135))

(assert (=> b!59315 m!50697))

(declare-fun m!51137 () Bool)

(assert (=> b!59315 m!51137))

(assert (=> b!59315 m!51135))

(assert (=> b!59315 m!50643))

(assert (=> bm!4447 m!51129))

(assert (=> b!59306 m!50643))

(assert (=> b!59306 m!50643))

(declare-fun m!51139 () Bool)

(assert (=> b!59306 m!51139))

(declare-fun m!51141 () Bool)

(assert (=> b!59310 m!51141))

(declare-fun m!51143 () Bool)

(assert (=> b!59312 m!51143))

(declare-fun m!51145 () Bool)

(assert (=> bm!4448 m!51145))

(declare-fun m!51147 () Bool)

(assert (=> bm!4445 m!51147))

(assert (=> bm!4396 d!11327))

(assert (=> b!58982 d!11261))

(declare-fun d!11329 () Bool)

(declare-fun e!39012 () Bool)

(assert (=> d!11329 e!39012))

(declare-fun res!32960 () Bool)

(assert (=> d!11329 (=> (not res!32960) (not e!39012))))

(declare-fun lt!24106 () ListLongMap!1355)

(assert (=> d!11329 (= res!32960 (contains!682 lt!24106 (_1!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!24107 () List!1437)

(assert (=> d!11329 (= lt!24106 (ListLongMap!1356 lt!24107))))

(declare-fun lt!24104 () Unit!1550)

(declare-fun lt!24105 () Unit!1550)

(assert (=> d!11329 (= lt!24104 lt!24105)))

(assert (=> d!11329 (= (getValueByKey!122 lt!24107 (_1!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!127 (_2!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!11329 (= lt!24105 (lemmaContainsTupThenGetReturnValue!42 lt!24107 (_1!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!11329 (= lt!24107 (insertStrictlySorted!45 (toList!693 e!38782) (_1!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!11329 (= (+!81 e!38782 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!24106)))

(declare-fun b!59323 () Bool)

(declare-fun res!32961 () Bool)

(assert (=> b!59323 (=> (not res!32961) (not e!39012))))

(assert (=> b!59323 (= res!32961 (= (getValueByKey!122 (toList!693 lt!24106) (_1!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!127 (_2!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!59324 () Bool)

(assert (=> b!59324 (= e!39012 (contains!684 (toList!693 lt!24106) (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!11329 res!32960) b!59323))

(assert (= (and b!59323 res!32961) b!59324))

(declare-fun m!51149 () Bool)

(assert (=> d!11329 m!51149))

(declare-fun m!51151 () Bool)

(assert (=> d!11329 m!51151))

(declare-fun m!51153 () Bool)

(assert (=> d!11329 m!51153))

(declare-fun m!51155 () Bool)

(assert (=> d!11329 m!51155))

(declare-fun m!51157 () Bool)

(assert (=> b!59323 m!51157))

(declare-fun m!51159 () Bool)

(assert (=> b!59324 m!51159))

(assert (=> bm!4397 d!11329))

(declare-fun d!11331 () Bool)

(declare-fun res!32962 () Bool)

(declare-fun e!39013 () Bool)

(assert (=> d!11331 (=> res!32962 e!39013)))

(assert (=> d!11331 (= res!32962 (= (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(assert (=> d!11331 (= (arrayContainsKey!0 (_keys!3665 newMap!16) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) #b00000000000000000000000000000000) e!39013)))

(declare-fun b!59325 () Bool)

(declare-fun e!39014 () Bool)

(assert (=> b!59325 (= e!39013 e!39014)))

(declare-fun res!32963 () Bool)

(assert (=> b!59325 (=> (not res!32963) (not e!39014))))

(assert (=> b!59325 (= res!32963 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!1999 (_keys!3665 newMap!16))))))

(declare-fun b!59326 () Bool)

(assert (=> b!59326 (= e!39014 (arrayContainsKey!0 (_keys!3665 newMap!16) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!11331 (not res!32962)) b!59325))

(assert (= (and b!59325 res!32963) b!59326))

(assert (=> d!11331 m!50643))

(assert (=> b!59326 m!50353))

(declare-fun m!51161 () Bool)

(assert (=> b!59326 m!51161))

(assert (=> bm!4382 d!11331))

(declare-fun b!59327 () Bool)

(declare-fun e!39018 () Bool)

(declare-fun call!4453 () Bool)

(assert (=> b!59327 (= e!39018 call!4453)))

(declare-fun b!59328 () Bool)

(declare-fun e!39016 () Bool)

(declare-fun e!39015 () Bool)

(assert (=> b!59328 (= e!39016 e!39015)))

(declare-fun res!32964 () Bool)

(assert (=> b!59328 (=> (not res!32964) (not e!39015))))

(declare-fun e!39017 () Bool)

(assert (=> b!59328 (= res!32964 (not e!39017))))

(declare-fun res!32965 () Bool)

(assert (=> b!59328 (=> (not res!32965) (not e!39017))))

(assert (=> b!59328 (= res!32965 (validKeyInArray!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun c!7568 () Bool)

(declare-fun bm!4450 () Bool)

(assert (=> bm!4450 (= call!4453 (arrayNoDuplicates!0 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!7568 (Cons!1432 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7484 (Cons!1432 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) Nil!1433) Nil!1433)) (ite c!7484 (Cons!1432 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) Nil!1433) Nil!1433))))))

(declare-fun b!59329 () Bool)

(assert (=> b!59329 (= e!39018 call!4453)))

(declare-fun d!11333 () Bool)

(declare-fun res!32966 () Bool)

(assert (=> d!11333 (=> res!32966 e!39016)))

(assert (=> d!11333 (= res!32966 (bvsge (bvadd from!355 #b00000000000000000000000000000001) (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992))))))))

(assert (=> d!11333 (= (arrayNoDuplicates!0 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!7484 (Cons!1432 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) Nil!1433) Nil!1433)) e!39016)))

(declare-fun b!59330 () Bool)

(assert (=> b!59330 (= e!39015 e!39018)))

(assert (=> b!59330 (= c!7568 (validKeyInArray!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!59331 () Bool)

(assert (=> b!59331 (= e!39017 (contains!683 (ite c!7484 (Cons!1432 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) Nil!1433) Nil!1433) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(assert (= (and d!11333 (not res!32966)) b!59328))

(assert (= (and b!59328 res!32965) b!59331))

(assert (= (and b!59328 res!32964) b!59330))

(assert (= (and b!59330 c!7568) b!59327))

(assert (= (and b!59330 (not c!7568)) b!59329))

(assert (= (or b!59327 b!59329) bm!4450))

(declare-fun m!51163 () Bool)

(assert (=> b!59328 m!51163))

(assert (=> b!59328 m!51163))

(declare-fun m!51165 () Bool)

(assert (=> b!59328 m!51165))

(assert (=> bm!4450 m!51163))

(declare-fun m!51167 () Bool)

(assert (=> bm!4450 m!51167))

(assert (=> b!59330 m!51163))

(assert (=> b!59330 m!51163))

(assert (=> b!59330 m!51165))

(assert (=> b!59331 m!51163))

(assert (=> b!59331 m!51163))

(declare-fun m!51169 () Bool)

(assert (=> b!59331 m!51169))

(assert (=> bm!4400 d!11333))

(assert (=> bm!4323 d!11273))

(declare-fun d!11335 () Bool)

(assert (=> d!11335 (= (+!81 (getCurrentListMap!389 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!389 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) lt!23782 (zeroValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24110 () Unit!1550)

(declare-fun choose!317 (array!3697 array!3699 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 V!2841 Int) Unit!1550)

(assert (=> d!11335 (= lt!24110 (choose!317 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) lt!23782 (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2042 newMap!16)))))

(assert (=> d!11335 (validMask!0 (mask!5925 newMap!16))))

(assert (=> d!11335 (= (lemmaChangeLongMinValueKeyThenAddPairToListMap!15 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) lt!23782 (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2042 newMap!16)) lt!24110)))

(declare-fun bs!2568 () Bool)

(assert (= bs!2568 d!11335))

(assert (=> bs!2568 m!50481))

(assert (=> bs!2568 m!50481))

(declare-fun m!51171 () Bool)

(assert (=> bs!2568 m!51171))

(assert (=> bs!2568 m!50657))

(assert (=> bs!2568 m!50369))

(declare-fun m!51173 () Bool)

(assert (=> bs!2568 m!51173))

(assert (=> bs!2568 m!50369))

(declare-fun m!51175 () Bool)

(assert (=> bs!2568 m!51175))

(assert (=> b!58925 d!11335))

(declare-fun d!11337 () Bool)

(declare-fun res!32967 () Bool)

(declare-fun e!39019 () Bool)

(assert (=> d!11337 (=> (not res!32967) (not e!39019))))

(assert (=> d!11337 (= res!32967 (simpleValid!42 (_2!1028 lt!23773)))))

(assert (=> d!11337 (= (valid!256 (_2!1028 lt!23773)) e!39019)))

(declare-fun b!59332 () Bool)

(declare-fun res!32968 () Bool)

(assert (=> b!59332 (=> (not res!32968) (not e!39019))))

(assert (=> b!59332 (= res!32968 (= (arrayCountValidKeys!0 (_keys!3665 (_2!1028 lt!23773)) #b00000000000000000000000000000000 (size!1999 (_keys!3665 (_2!1028 lt!23773)))) (_size!357 (_2!1028 lt!23773))))))

(declare-fun b!59333 () Bool)

(declare-fun res!32969 () Bool)

(assert (=> b!59333 (=> (not res!32969) (not e!39019))))

(assert (=> b!59333 (= res!32969 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3665 (_2!1028 lt!23773)) (mask!5925 (_2!1028 lt!23773))))))

(declare-fun b!59334 () Bool)

(assert (=> b!59334 (= e!39019 (arrayNoDuplicates!0 (_keys!3665 (_2!1028 lt!23773)) #b00000000000000000000000000000000 Nil!1433))))

(assert (= (and d!11337 res!32967) b!59332))

(assert (= (and b!59332 res!32968) b!59333))

(assert (= (and b!59333 res!32969) b!59334))

(declare-fun m!51177 () Bool)

(assert (=> d!11337 m!51177))

(declare-fun m!51179 () Bool)

(assert (=> b!59332 m!51179))

(declare-fun m!51181 () Bool)

(assert (=> b!59333 m!51181))

(declare-fun m!51183 () Bool)

(assert (=> b!59334 m!51183))

(assert (=> d!11203 d!11337))

(assert (=> d!11203 d!11199))

(declare-fun d!11339 () Bool)

(assert (=> d!11339 (= (apply!66 lt!23704 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1076 (getValueByKey!122 (toList!693 lt!23704) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!2569 () Bool)

(assert (= bs!2569 d!11339))

(assert (=> bs!2569 m!50485))

(assert (=> bs!2569 m!50717))

(assert (=> bs!2569 m!50717))

(declare-fun m!51185 () Bool)

(assert (=> bs!2569 m!51185))

(assert (=> b!58799 d!11339))

(declare-fun d!11341 () Bool)

(declare-fun c!7569 () Bool)

(assert (=> d!11341 (= c!7569 ((_ is ValueCellFull!854) (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!39020 () V!2841)

(assert (=> d!11341 (= (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!39020)))

(declare-fun b!59335 () Bool)

(assert (=> b!59335 (= e!39020 (get!1074 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!59336 () Bool)

(assert (=> b!59336 (= e!39020 (get!1075 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11341 c!7569) b!59335))

(assert (= (and d!11341 (not c!7569)) b!59336))

(assert (=> b!59335 m!50525))

(assert (=> b!59335 m!50367))

(declare-fun m!51187 () Bool)

(assert (=> b!59335 m!51187))

(assert (=> b!59336 m!50525))

(assert (=> b!59336 m!50367))

(declare-fun m!51189 () Bool)

(assert (=> b!59336 m!51189))

(assert (=> b!58799 d!11341))

(declare-fun d!11343 () Bool)

(assert (=> d!11343 (= (validKeyInArray!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (and (not (= (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!58801 d!11343))

(assert (=> b!58786 d!11343))

(declare-fun mapNonEmpty!2885 () Bool)

(declare-fun mapRes!2885 () Bool)

(declare-fun tp!8015 () Bool)

(declare-fun e!39022 () Bool)

(assert (=> mapNonEmpty!2885 (= mapRes!2885 (and tp!8015 e!39022))))

(declare-fun mapRest!2885 () (Array (_ BitVec 32) ValueCell!854))

(declare-fun mapValue!2885 () ValueCell!854)

(declare-fun mapKey!2885 () (_ BitVec 32))

(assert (=> mapNonEmpty!2885 (= mapRest!2883 (store mapRest!2885 mapKey!2885 mapValue!2885))))

(declare-fun b!59337 () Bool)

(assert (=> b!59337 (= e!39022 tp_is_empty!2395)))

(declare-fun condMapEmpty!2885 () Bool)

(declare-fun mapDefault!2885 () ValueCell!854)

(assert (=> mapNonEmpty!2883 (= condMapEmpty!2885 (= mapRest!2883 ((as const (Array (_ BitVec 32) ValueCell!854)) mapDefault!2885)))))

(declare-fun e!39021 () Bool)

(assert (=> mapNonEmpty!2883 (= tp!8013 (and e!39021 mapRes!2885))))

(declare-fun mapIsEmpty!2885 () Bool)

(assert (=> mapIsEmpty!2885 mapRes!2885))

(declare-fun b!59338 () Bool)

(assert (=> b!59338 (= e!39021 tp_is_empty!2395)))

(assert (= (and mapNonEmpty!2883 condMapEmpty!2885) mapIsEmpty!2885))

(assert (= (and mapNonEmpty!2883 (not condMapEmpty!2885)) mapNonEmpty!2885))

(assert (= (and mapNonEmpty!2885 ((_ is ValueCellFull!854) mapValue!2885)) b!59337))

(assert (= (and mapNonEmpty!2883 ((_ is ValueCellFull!854) mapDefault!2885)) b!59338))

(declare-fun m!51191 () Bool)

(assert (=> mapNonEmpty!2885 m!51191))

(declare-fun mapNonEmpty!2886 () Bool)

(declare-fun mapRes!2886 () Bool)

(declare-fun tp!8016 () Bool)

(declare-fun e!39024 () Bool)

(assert (=> mapNonEmpty!2886 (= mapRes!2886 (and tp!8016 e!39024))))

(declare-fun mapKey!2886 () (_ BitVec 32))

(declare-fun mapRest!2886 () (Array (_ BitVec 32) ValueCell!854))

(declare-fun mapValue!2886 () ValueCell!854)

(assert (=> mapNonEmpty!2886 (= mapRest!2884 (store mapRest!2886 mapKey!2886 mapValue!2886))))

(declare-fun b!59339 () Bool)

(assert (=> b!59339 (= e!39024 tp_is_empty!2395)))

(declare-fun condMapEmpty!2886 () Bool)

(declare-fun mapDefault!2886 () ValueCell!854)

(assert (=> mapNonEmpty!2884 (= condMapEmpty!2886 (= mapRest!2884 ((as const (Array (_ BitVec 32) ValueCell!854)) mapDefault!2886)))))

(declare-fun e!39023 () Bool)

(assert (=> mapNonEmpty!2884 (= tp!8014 (and e!39023 mapRes!2886))))

(declare-fun mapIsEmpty!2886 () Bool)

(assert (=> mapIsEmpty!2886 mapRes!2886))

(declare-fun b!59340 () Bool)

(assert (=> b!59340 (= e!39023 tp_is_empty!2395)))

(assert (= (and mapNonEmpty!2884 condMapEmpty!2886) mapIsEmpty!2886))

(assert (= (and mapNonEmpty!2884 (not condMapEmpty!2886)) mapNonEmpty!2886))

(assert (= (and mapNonEmpty!2886 ((_ is ValueCellFull!854) mapValue!2886)) b!59339))

(assert (= (and mapNonEmpty!2884 ((_ is ValueCellFull!854) mapDefault!2886)) b!59340))

(declare-fun m!51193 () Bool)

(assert (=> mapNonEmpty!2886 m!51193))

(declare-fun b_lambda!2601 () Bool)

(assert (= b_lambda!2599 (or (and b!58610 b_free!1957 (= (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) (defaultEntry!2042 newMap!16))) (and b!58607 b_free!1959) b_lambda!2601)))

(declare-fun b_lambda!2603 () Bool)

(assert (= b_lambda!2593 (or (and b!58610 b_free!1957 (= (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) (defaultEntry!2042 newMap!16))) (and b!58607 b_free!1959) b_lambda!2603)))

(declare-fun b_lambda!2605 () Bool)

(assert (= b_lambda!2597 (or (and b!58610 b_free!1957) (and b!58607 b_free!1959 (= (defaultEntry!2042 newMap!16) (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))))) b_lambda!2605)))

(declare-fun b_lambda!2607 () Bool)

(assert (= b_lambda!2591 (or (and b!58610 b_free!1957 (= (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) (defaultEntry!2042 newMap!16))) (and b!58607 b_free!1959) b_lambda!2607)))

(declare-fun b_lambda!2609 () Bool)

(assert (= b_lambda!2595 (or (and b!58610 b_free!1957) (and b!58607 b_free!1959 (= (defaultEntry!2042 newMap!16) (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))))) b_lambda!2609)))

(check-sat (not d!11307) (not b!59244) (not b!59168) (not b!59212) (not d!11265) (not d!11277) (not d!11293) (not b!59041) (not b!59328) (not b!59033) (not bm!4403) (not b!59145) (not d!11329) (not b!59051) (not b!59316) (not d!11267) (not b!59333) (not b!59222) (not b!59246) (not d!11327) (not b!59243) (not d!11273) (not d!11321) (not b!59024) (not b!59028) (not b_lambda!2585) (not mapNonEmpty!2886) (not d!11227) (not bm!4443) (not b!59227) (not b!59100) (not d!11285) (not bm!4433) (not bm!4442) (not b!59259) (not b!59206) (not d!11287) (not b_lambda!2605) (not b!59326) (not b!59097) (not b!59205) (not d!11301) (not b!59169) (not b_lambda!2609) (not b!59315) (not d!11223) (not b!59262) (not b!59312) (not b!59335) (not b!59209) (not bm!4429) (not d!11315) (not b!59273) (not d!11335) (not bm!4407) (not bm!4428) (not b!59306) (not b!59154) (not b_lambda!2589) b_and!3587 (not b_next!1959) (not b!59139) (not bm!4405) (not bm!4410) (not b!58994) (not b!59095) (not d!11289) (not bm!4424) (not b!59233) (not b!59225) (not d!11257) (not d!11275) (not b!59149) (not b!59247) (not bm!4423) (not b!59223) (not d!11233) (not d!11263) (not d!11291) (not d!11243) (not b!59299) (not b!59043) (not b!59324) (not b!59063) (not d!11305) (not d!11249) (not b!59317) (not b!59331) (not b!59208) (not d!11247) (not b_lambda!2607) (not b!59334) (not b!59096) (not b!59323) (not b!59034) (not d!11297) (not d!11299) (not b!59336) (not b!59166) (not d!11323) (not mapNonEmpty!2885) (not b!59060) (not d!11325) (not b!59214) (not d!11269) (not b!59230) (not b!59207) (not b!59099) (not b_lambda!2603) (not b!59164) (not b!59155) (not b!59083) (not b!59156) (not b!59058) (not b!59310) (not b!59302) (not b!59170) (not b!59257) (not b!59101) (not d!11235) (not d!11281) (not b!59213) (not b!59148) (not b!59171) (not b_next!1957) (not b!59090) (not b!59231) (not d!11317) (not bm!4404) (not b!59160) (not bm!4450) (not b!59226) (not b!59211) (not d!11303) (not b!59018) (not b!59030) (not d!11339) (not b!59032) (not b!59332) (not b!59202) (not b!59013) (not bm!4445) (not d!11241) (not b!59012) (not b!59057) (not bm!4420) (not b!59066) (not b!59224) (not bm!4436) (not bm!4426) (not b!59048) (not d!11245) (not b!58996) (not b!59010) (not b!59330) b_and!3585 (not d!11337) (not bm!4448) (not b!59020) (not bm!4441) tp_is_empty!2395 (not b!59301) (not bm!4421) (not d!11255) (not b!59008) (not d!11259) (not d!11283) (not bm!4447) (not d!11239) (not d!11217) (not bm!4409) (not d!11311) (not b!59228) (not b!59102) (not d!11279) (not b!59314) (not d!11271) (not b!59146) (not d!11295) (not d!11231) (not b!59035) (not b!59142) (not b_lambda!2601))
(check-sat b_and!3585 b_and!3587 (not b_next!1957) (not b_next!1959))
(get-model)

(declare-fun d!11345 () Bool)

(assert (=> d!11345 (contains!682 (getCurrentListMap!389 (_keys!3665 newMap!16) lt!23792 (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (select (arr!1768 (_keys!3665 newMap!16)) (index!3044 lt!23774)))))

(assert (=> d!11345 true))

(declare-fun _$16!78 () Unit!1550)

(assert (=> d!11345 (= (choose!311 (_keys!3665 newMap!16) lt!23792 (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (index!3044 lt!23774) (defaultEntry!2042 newMap!16)) _$16!78)))

(declare-fun bs!2570 () Bool)

(assert (= bs!2570 d!11345))

(assert (=> bs!2570 m!50747))

(assert (=> bs!2570 m!50575))

(assert (=> bs!2570 m!50747))

(assert (=> bs!2570 m!50575))

(assert (=> bs!2570 m!50749))

(assert (=> d!11243 d!11345))

(declare-fun d!11347 () Bool)

(assert (=> d!11347 (= (validMask!0 (mask!5925 newMap!16)) (and (or (= (mask!5925 newMap!16) #b00000000000000000000000000000111) (= (mask!5925 newMap!16) #b00000000000000000000000000001111) (= (mask!5925 newMap!16) #b00000000000000000000000000011111) (= (mask!5925 newMap!16) #b00000000000000000000000000111111) (= (mask!5925 newMap!16) #b00000000000000000000000001111111) (= (mask!5925 newMap!16) #b00000000000000000000000011111111) (= (mask!5925 newMap!16) #b00000000000000000000000111111111) (= (mask!5925 newMap!16) #b00000000000000000000001111111111) (= (mask!5925 newMap!16) #b00000000000000000000011111111111) (= (mask!5925 newMap!16) #b00000000000000000000111111111111) (= (mask!5925 newMap!16) #b00000000000000000001111111111111) (= (mask!5925 newMap!16) #b00000000000000000011111111111111) (= (mask!5925 newMap!16) #b00000000000000000111111111111111) (= (mask!5925 newMap!16) #b00000000000000001111111111111111) (= (mask!5925 newMap!16) #b00000000000000011111111111111111) (= (mask!5925 newMap!16) #b00000000000000111111111111111111) (= (mask!5925 newMap!16) #b00000000000001111111111111111111) (= (mask!5925 newMap!16) #b00000000000011111111111111111111) (= (mask!5925 newMap!16) #b00000000000111111111111111111111) (= (mask!5925 newMap!16) #b00000000001111111111111111111111) (= (mask!5925 newMap!16) #b00000000011111111111111111111111) (= (mask!5925 newMap!16) #b00000000111111111111111111111111) (= (mask!5925 newMap!16) #b00000001111111111111111111111111) (= (mask!5925 newMap!16) #b00000011111111111111111111111111) (= (mask!5925 newMap!16) #b00000111111111111111111111111111) (= (mask!5925 newMap!16) #b00001111111111111111111111111111) (= (mask!5925 newMap!16) #b00011111111111111111111111111111) (= (mask!5925 newMap!16) #b00111111111111111111111111111111)) (bvsle (mask!5925 newMap!16) #b00111111111111111111111111111111)))))

(assert (=> d!11243 d!11347))

(declare-fun d!11349 () Bool)

(assert (=> d!11349 (= (get!1076 (getValueByKey!122 (toList!693 lt!23704) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2382 (getValueByKey!122 (toList!693 lt!23704) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!11247 d!11349))

(declare-fun d!11351 () Bool)

(declare-fun c!7570 () Bool)

(assert (=> d!11351 (= c!7570 (and ((_ is Cons!1433) (toList!693 lt!23704)) (= (_1!1029 (h!2014 (toList!693 lt!23704))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!39025 () Option!128)

(assert (=> d!11351 (= (getValueByKey!122 (toList!693 lt!23704) #b0000000000000000000000000000000000000000000000000000000000000000) e!39025)))

(declare-fun b!59343 () Bool)

(declare-fun e!39026 () Option!128)

(assert (=> b!59343 (= e!39026 (getValueByKey!122 (t!4770 (toList!693 lt!23704)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59342 () Bool)

(assert (=> b!59342 (= e!39025 e!39026)))

(declare-fun c!7571 () Bool)

(assert (=> b!59342 (= c!7571 (and ((_ is Cons!1433) (toList!693 lt!23704)) (not (= (_1!1029 (h!2014 (toList!693 lt!23704))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!59344 () Bool)

(assert (=> b!59344 (= e!39026 None!126)))

(declare-fun b!59341 () Bool)

(assert (=> b!59341 (= e!39025 (Some!127 (_2!1029 (h!2014 (toList!693 lt!23704)))))))

(assert (= (and d!11351 c!7570) b!59341))

(assert (= (and d!11351 (not c!7570)) b!59342))

(assert (= (and b!59342 c!7571) b!59343))

(assert (= (and b!59342 (not c!7571)) b!59344))

(declare-fun m!51195 () Bool)

(assert (=> b!59343 m!51195))

(assert (=> d!11247 d!11351))

(assert (=> d!11307 d!11347))

(declare-fun b!59345 () Bool)

(declare-fun e!39029 () Bool)

(declare-fun call!4454 () Bool)

(assert (=> b!59345 (= e!39029 call!4454)))

(declare-fun bm!4451 () Bool)

(assert (=> bm!4451 (= call!4454 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3665 (_2!1028 lt!23773)) (mask!5925 (_2!1028 lt!23773))))))

(declare-fun b!59346 () Bool)

(declare-fun e!39027 () Bool)

(assert (=> b!59346 (= e!39027 e!39029)))

(declare-fun lt!24113 () (_ BitVec 64))

(assert (=> b!59346 (= lt!24113 (select (arr!1768 (_keys!3665 (_2!1028 lt!23773))) #b00000000000000000000000000000000))))

(declare-fun lt!24112 () Unit!1550)

(assert (=> b!59346 (= lt!24112 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3665 (_2!1028 lt!23773)) lt!24113 #b00000000000000000000000000000000))))

(assert (=> b!59346 (arrayContainsKey!0 (_keys!3665 (_2!1028 lt!23773)) lt!24113 #b00000000000000000000000000000000)))

(declare-fun lt!24111 () Unit!1550)

(assert (=> b!59346 (= lt!24111 lt!24112)))

(declare-fun res!32970 () Bool)

(assert (=> b!59346 (= res!32970 (= (seekEntryOrOpen!0 (select (arr!1768 (_keys!3665 (_2!1028 lt!23773))) #b00000000000000000000000000000000) (_keys!3665 (_2!1028 lt!23773)) (mask!5925 (_2!1028 lt!23773))) (Found!230 #b00000000000000000000000000000000)))))

(assert (=> b!59346 (=> (not res!32970) (not e!39029))))

(declare-fun b!59347 () Bool)

(assert (=> b!59347 (= e!39027 call!4454)))

(declare-fun b!59348 () Bool)

(declare-fun e!39028 () Bool)

(assert (=> b!59348 (= e!39028 e!39027)))

(declare-fun c!7572 () Bool)

(assert (=> b!59348 (= c!7572 (validKeyInArray!0 (select (arr!1768 (_keys!3665 (_2!1028 lt!23773))) #b00000000000000000000000000000000)))))

(declare-fun d!11353 () Bool)

(declare-fun res!32971 () Bool)

(assert (=> d!11353 (=> res!32971 e!39028)))

(assert (=> d!11353 (= res!32971 (bvsge #b00000000000000000000000000000000 (size!1999 (_keys!3665 (_2!1028 lt!23773)))))))

(assert (=> d!11353 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3665 (_2!1028 lt!23773)) (mask!5925 (_2!1028 lt!23773))) e!39028)))

(assert (= (and d!11353 (not res!32971)) b!59348))

(assert (= (and b!59348 c!7572) b!59346))

(assert (= (and b!59348 (not c!7572)) b!59347))

(assert (= (and b!59346 res!32970) b!59345))

(assert (= (or b!59345 b!59347) bm!4451))

(declare-fun m!51197 () Bool)

(assert (=> bm!4451 m!51197))

(declare-fun m!51199 () Bool)

(assert (=> b!59346 m!51199))

(declare-fun m!51201 () Bool)

(assert (=> b!59346 m!51201))

(declare-fun m!51203 () Bool)

(assert (=> b!59346 m!51203))

(assert (=> b!59346 m!51199))

(declare-fun m!51205 () Bool)

(assert (=> b!59346 m!51205))

(assert (=> b!59348 m!51199))

(assert (=> b!59348 m!51199))

(declare-fun m!51207 () Bool)

(assert (=> b!59348 m!51207))

(assert (=> b!59333 d!11353))

(declare-fun b!59361 () Bool)

(declare-fun c!7579 () Bool)

(declare-fun lt!24118 () (_ BitVec 64))

(assert (=> b!59361 (= c!7579 (= lt!24118 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!39038 () SeekEntryResult!230)

(declare-fun e!39037 () SeekEntryResult!230)

(assert (=> b!59361 (= e!39038 e!39037)))

(declare-fun b!59362 () Bool)

(assert (=> b!59362 (= e!39038 (Found!230 (index!3045 lt!23869)))))

(declare-fun d!11355 () Bool)

(declare-fun lt!24119 () SeekEntryResult!230)

(assert (=> d!11355 (and (or ((_ is Undefined!230) lt!24119) (not ((_ is Found!230) lt!24119)) (and (bvsge (index!3044 lt!24119) #b00000000000000000000000000000000) (bvslt (index!3044 lt!24119) (size!1999 (_keys!3665 newMap!16))))) (or ((_ is Undefined!230) lt!24119) ((_ is Found!230) lt!24119) (not ((_ is MissingVacant!230) lt!24119)) (not (= (index!3046 lt!24119) (index!3045 lt!23869))) (and (bvsge (index!3046 lt!24119) #b00000000000000000000000000000000) (bvslt (index!3046 lt!24119) (size!1999 (_keys!3665 newMap!16))))) (or ((_ is Undefined!230) lt!24119) (ite ((_ is Found!230) lt!24119) (= (select (arr!1768 (_keys!3665 newMap!16)) (index!3044 lt!24119)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (and ((_ is MissingVacant!230) lt!24119) (= (index!3046 lt!24119) (index!3045 lt!23869)) (= (select (arr!1768 (_keys!3665 newMap!16)) (index!3046 lt!24119)) #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!39036 () SeekEntryResult!230)

(assert (=> d!11355 (= lt!24119 e!39036)))

(declare-fun c!7580 () Bool)

(assert (=> d!11355 (= c!7580 (bvsge (x!10005 lt!23869) #b01111111111111111111111111111110))))

(assert (=> d!11355 (= lt!24118 (select (arr!1768 (_keys!3665 newMap!16)) (index!3045 lt!23869)))))

(assert (=> d!11355 (validMask!0 (mask!5925 newMap!16))))

(assert (=> d!11355 (= (seekKeyOrZeroReturnVacant!0 (x!10005 lt!23869) (index!3045 lt!23869) (index!3045 lt!23869) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (_keys!3665 newMap!16) (mask!5925 newMap!16)) lt!24119)))

(declare-fun b!59363 () Bool)

(declare-fun nextIndex!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!59363 (= e!39037 (seekKeyOrZeroReturnVacant!0 (bvadd (x!10005 lt!23869) #b00000000000000000000000000000001) (nextIndex!0 (index!3045 lt!23869) (x!10005 lt!23869) (mask!5925 newMap!16)) (index!3045 lt!23869) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (_keys!3665 newMap!16) (mask!5925 newMap!16)))))

(declare-fun b!59364 () Bool)

(assert (=> b!59364 (= e!39037 (MissingVacant!230 (index!3045 lt!23869)))))

(declare-fun b!59365 () Bool)

(assert (=> b!59365 (= e!39036 Undefined!230)))

(declare-fun b!59366 () Bool)

(assert (=> b!59366 (= e!39036 e!39038)))

(declare-fun c!7581 () Bool)

(assert (=> b!59366 (= c!7581 (= lt!24118 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(assert (= (and d!11355 c!7580) b!59365))

(assert (= (and d!11355 (not c!7580)) b!59366))

(assert (= (and b!59366 c!7581) b!59362))

(assert (= (and b!59366 (not c!7581)) b!59361))

(assert (= (and b!59361 c!7579) b!59364))

(assert (= (and b!59361 (not c!7579)) b!59363))

(declare-fun m!51209 () Bool)

(assert (=> d!11355 m!51209))

(declare-fun m!51211 () Bool)

(assert (=> d!11355 m!51211))

(assert (=> d!11355 m!50761))

(assert (=> d!11355 m!50657))

(declare-fun m!51213 () Bool)

(assert (=> b!59363 m!51213))

(assert (=> b!59363 m!51213))

(assert (=> b!59363 m!50353))

(declare-fun m!51215 () Bool)

(assert (=> b!59363 m!51215))

(assert (=> b!59083 d!11355))

(declare-fun b!59367 () Bool)

(declare-fun e!39042 () Bool)

(declare-fun call!4455 () Bool)

(assert (=> b!59367 (= e!39042 call!4455)))

(declare-fun b!59368 () Bool)

(declare-fun e!39040 () Bool)

(declare-fun e!39039 () Bool)

(assert (=> b!59368 (= e!39040 e!39039)))

(declare-fun res!32972 () Bool)

(assert (=> b!59368 (=> (not res!32972) (not e!39039))))

(declare-fun e!39041 () Bool)

(assert (=> b!59368 (= res!32972 (not e!39041))))

(declare-fun res!32973 () Bool)

(assert (=> b!59368 (=> (not res!32973) (not e!39041))))

(assert (=> b!59368 (= res!32973 (validKeyInArray!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun c!7582 () Bool)

(declare-fun bm!4452 () Bool)

(assert (=> bm!4452 (= call!4455 (arrayNoDuplicates!0 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!7582 (Cons!1432 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (ite c!7568 (Cons!1432 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7484 (Cons!1432 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) Nil!1433) Nil!1433)) (ite c!7484 (Cons!1432 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) Nil!1433) Nil!1433))) (ite c!7568 (Cons!1432 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7484 (Cons!1432 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) Nil!1433) Nil!1433)) (ite c!7484 (Cons!1432 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) Nil!1433) Nil!1433)))))))

(declare-fun b!59369 () Bool)

(assert (=> b!59369 (= e!39042 call!4455)))

(declare-fun d!11357 () Bool)

(declare-fun res!32974 () Bool)

(assert (=> d!11357 (=> res!32974 e!39040)))

(assert (=> d!11357 (= res!32974 (bvsge (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992))))))))

(assert (=> d!11357 (= (arrayNoDuplicates!0 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!7568 (Cons!1432 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7484 (Cons!1432 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) Nil!1433) Nil!1433)) (ite c!7484 (Cons!1432 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) Nil!1433) Nil!1433))) e!39040)))

(declare-fun b!59370 () Bool)

(assert (=> b!59370 (= e!39039 e!39042)))

(assert (=> b!59370 (= c!7582 (validKeyInArray!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun b!59371 () Bool)

(assert (=> b!59371 (= e!39041 (contains!683 (ite c!7568 (Cons!1432 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7484 (Cons!1432 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) Nil!1433) Nil!1433)) (ite c!7484 (Cons!1432 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) Nil!1433) Nil!1433)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(assert (= (and d!11357 (not res!32974)) b!59368))

(assert (= (and b!59368 res!32973) b!59371))

(assert (= (and b!59368 res!32972) b!59370))

(assert (= (and b!59370 c!7582) b!59367))

(assert (= (and b!59370 (not c!7582)) b!59369))

(assert (= (or b!59367 b!59369) bm!4452))

(declare-fun m!51217 () Bool)

(assert (=> b!59368 m!51217))

(assert (=> b!59368 m!51217))

(declare-fun m!51219 () Bool)

(assert (=> b!59368 m!51219))

(assert (=> bm!4452 m!51217))

(declare-fun m!51221 () Bool)

(assert (=> bm!4452 m!51221))

(assert (=> b!59370 m!51217))

(assert (=> b!59370 m!51217))

(assert (=> b!59370 m!51219))

(assert (=> b!59371 m!51217))

(assert (=> b!59371 m!51217))

(declare-fun m!51223 () Bool)

(assert (=> b!59371 m!51223))

(assert (=> bm!4450 d!11357))

(declare-fun d!11359 () Bool)

(declare-fun lt!24120 () Bool)

(assert (=> d!11359 (= lt!24120 (select (content!63 Nil!1433) (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!39044 () Bool)

(assert (=> d!11359 (= lt!24120 e!39044)))

(declare-fun res!32975 () Bool)

(assert (=> d!11359 (=> (not res!32975) (not e!39044))))

(assert (=> d!11359 (= res!32975 ((_ is Cons!1432) Nil!1433))))

(assert (=> d!11359 (= (contains!683 Nil!1433 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)) lt!24120)))

(declare-fun b!59372 () Bool)

(declare-fun e!39043 () Bool)

(assert (=> b!59372 (= e!39044 e!39043)))

(declare-fun res!32976 () Bool)

(assert (=> b!59372 (=> res!32976 e!39043)))

(assert (=> b!59372 (= res!32976 (= (h!2013 Nil!1433) (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59373 () Bool)

(assert (=> b!59373 (= e!39043 (contains!683 (t!4769 Nil!1433) (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!11359 res!32975) b!59372))

(assert (= (and b!59372 (not res!32976)) b!59373))

(assert (=> d!11359 m!50731))

(assert (=> d!11359 m!50643))

(declare-fun m!51225 () Bool)

(assert (=> d!11359 m!51225))

(assert (=> b!59373 m!50643))

(declare-fun m!51227 () Bool)

(assert (=> b!59373 m!51227))

(assert (=> b!59013 d!11359))

(declare-fun d!11361 () Bool)

(declare-fun e!39046 () Bool)

(assert (=> d!11361 e!39046))

(declare-fun res!32977 () Bool)

(assert (=> d!11361 (=> res!32977 e!39046)))

(declare-fun lt!24121 () Bool)

(assert (=> d!11361 (= res!32977 (not lt!24121))))

(declare-fun lt!24123 () Bool)

(assert (=> d!11361 (= lt!24121 lt!24123)))

(declare-fun lt!24122 () Unit!1550)

(declare-fun e!39045 () Unit!1550)

(assert (=> d!11361 (= lt!24122 e!39045)))

(declare-fun c!7583 () Bool)

(assert (=> d!11361 (= c!7583 lt!24123)))

(assert (=> d!11361 (= lt!24123 (containsKey!126 (toList!693 lt!24038) (_1!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(assert (=> d!11361 (= (contains!682 lt!24038 (_1!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!24121)))

(declare-fun b!59374 () Bool)

(declare-fun lt!24124 () Unit!1550)

(assert (=> b!59374 (= e!39045 lt!24124)))

(assert (=> b!59374 (= lt!24124 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 lt!24038) (_1!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(assert (=> b!59374 (isDefined!76 (getValueByKey!122 (toList!693 lt!24038) (_1!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun b!59375 () Bool)

(declare-fun Unit!1574 () Unit!1550)

(assert (=> b!59375 (= e!39045 Unit!1574)))

(declare-fun b!59376 () Bool)

(assert (=> b!59376 (= e!39046 (isDefined!76 (getValueByKey!122 (toList!693 lt!24038) (_1!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(assert (= (and d!11361 c!7583) b!59374))

(assert (= (and d!11361 (not c!7583)) b!59375))

(assert (= (and d!11361 (not res!32977)) b!59376))

(declare-fun m!51229 () Bool)

(assert (=> d!11361 m!51229))

(declare-fun m!51231 () Bool)

(assert (=> b!59374 m!51231))

(assert (=> b!59374 m!50997))

(assert (=> b!59374 m!50997))

(declare-fun m!51233 () Bool)

(assert (=> b!59374 m!51233))

(assert (=> b!59376 m!50997))

(assert (=> b!59376 m!50997))

(assert (=> b!59376 m!51233))

(assert (=> d!11291 d!11361))

(declare-fun c!7584 () Bool)

(declare-fun d!11363 () Bool)

(assert (=> d!11363 (= c!7584 (and ((_ is Cons!1433) lt!24039) (= (_1!1029 (h!2014 lt!24039)) (_1!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(declare-fun e!39047 () Option!128)

(assert (=> d!11363 (= (getValueByKey!122 lt!24039 (_1!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))) e!39047)))

(declare-fun b!59379 () Bool)

(declare-fun e!39048 () Option!128)

(assert (=> b!59379 (= e!39048 (getValueByKey!122 (t!4770 lt!24039) (_1!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun b!59378 () Bool)

(assert (=> b!59378 (= e!39047 e!39048)))

(declare-fun c!7585 () Bool)

(assert (=> b!59378 (= c!7585 (and ((_ is Cons!1433) lt!24039) (not (= (_1!1029 (h!2014 lt!24039)) (_1!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))))))

(declare-fun b!59380 () Bool)

(assert (=> b!59380 (= e!39048 None!126)))

(declare-fun b!59377 () Bool)

(assert (=> b!59377 (= e!39047 (Some!127 (_2!1029 (h!2014 lt!24039))))))

(assert (= (and d!11363 c!7584) b!59377))

(assert (= (and d!11363 (not c!7584)) b!59378))

(assert (= (and b!59378 c!7585) b!59379))

(assert (= (and b!59378 (not c!7585)) b!59380))

(declare-fun m!51235 () Bool)

(assert (=> b!59379 m!51235))

(assert (=> d!11291 d!11363))

(declare-fun d!11365 () Bool)

(assert (=> d!11365 (= (getValueByKey!122 lt!24039 (_1!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))) (Some!127 (_2!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun lt!24127 () Unit!1550)

(declare-fun choose!318 (List!1437 (_ BitVec 64) V!2841) Unit!1550)

(assert (=> d!11365 (= lt!24127 (choose!318 lt!24039 (_1!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun e!39051 () Bool)

(assert (=> d!11365 e!39051))

(declare-fun res!32982 () Bool)

(assert (=> d!11365 (=> (not res!32982) (not e!39051))))

(assert (=> d!11365 (= res!32982 (isStrictlySorted!279 lt!24039))))

(assert (=> d!11365 (= (lemmaContainsTupThenGetReturnValue!42 lt!24039 (_1!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!24127)))

(declare-fun b!59385 () Bool)

(declare-fun res!32983 () Bool)

(assert (=> b!59385 (=> (not res!32983) (not e!39051))))

(assert (=> b!59385 (= res!32983 (containsKey!126 lt!24039 (_1!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun b!59386 () Bool)

(assert (=> b!59386 (= e!39051 (contains!684 lt!24039 (tuple2!2037 (_1!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(assert (= (and d!11365 res!32982) b!59385))

(assert (= (and b!59385 res!32983) b!59386))

(assert (=> d!11365 m!50991))

(declare-fun m!51237 () Bool)

(assert (=> d!11365 m!51237))

(declare-fun m!51239 () Bool)

(assert (=> d!11365 m!51239))

(declare-fun m!51241 () Bool)

(assert (=> b!59385 m!51241))

(declare-fun m!51243 () Bool)

(assert (=> b!59386 m!51243))

(assert (=> d!11291 d!11365))

(declare-fun b!59407 () Bool)

(declare-fun e!39062 () List!1437)

(assert (=> b!59407 (= e!39062 (insertStrictlySorted!45 (t!4770 (toList!693 lt!23697)) (_1!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun b!59408 () Bool)

(declare-fun e!39065 () List!1437)

(declare-fun call!4462 () List!1437)

(assert (=> b!59408 (= e!39065 call!4462)))

(declare-fun b!59409 () Bool)

(declare-fun e!39063 () List!1437)

(assert (=> b!59409 (= e!39065 e!39063)))

(declare-fun c!7597 () Bool)

(assert (=> b!59409 (= c!7597 (and ((_ is Cons!1433) (toList!693 lt!23697)) (= (_1!1029 (h!2014 (toList!693 lt!23697))) (_1!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(declare-fun b!59410 () Bool)

(declare-fun call!4463 () List!1437)

(assert (=> b!59410 (= e!39063 call!4463)))

(declare-fun c!7595 () Bool)

(declare-fun bm!4460 () Bool)

(declare-fun $colon$colon!59 (List!1437 tuple2!2036) List!1437)

(assert (=> bm!4460 (= call!4462 ($colon$colon!59 e!39062 (ite c!7595 (h!2014 (toList!693 lt!23697)) (tuple2!2037 (_1!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))))))

(declare-fun c!7596 () Bool)

(assert (=> bm!4460 (= c!7596 c!7595)))

(declare-fun lt!24130 () List!1437)

(declare-fun e!39066 () Bool)

(declare-fun b!59411 () Bool)

(assert (=> b!59411 (= e!39066 (contains!684 lt!24130 (tuple2!2037 (_1!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(declare-fun b!59412 () Bool)

(declare-fun e!39064 () List!1437)

(declare-fun call!4464 () List!1437)

(assert (=> b!59412 (= e!39064 call!4464)))

(declare-fun b!59413 () Bool)

(declare-fun c!7594 () Bool)

(assert (=> b!59413 (= e!39062 (ite c!7597 (t!4770 (toList!693 lt!23697)) (ite c!7594 (Cons!1433 (h!2014 (toList!693 lt!23697)) (t!4770 (toList!693 lt!23697))) Nil!1434)))))

(declare-fun bm!4459 () Bool)

(assert (=> bm!4459 (= call!4464 call!4463)))

(declare-fun d!11367 () Bool)

(assert (=> d!11367 e!39066))

(declare-fun res!32988 () Bool)

(assert (=> d!11367 (=> (not res!32988) (not e!39066))))

(assert (=> d!11367 (= res!32988 (isStrictlySorted!279 lt!24130))))

(assert (=> d!11367 (= lt!24130 e!39065)))

(assert (=> d!11367 (= c!7595 (and ((_ is Cons!1433) (toList!693 lt!23697)) (bvslt (_1!1029 (h!2014 (toList!693 lt!23697))) (_1!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(assert (=> d!11367 (isStrictlySorted!279 (toList!693 lt!23697))))

(assert (=> d!11367 (= (insertStrictlySorted!45 (toList!693 lt!23697) (_1!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!24130)))

(declare-fun bm!4461 () Bool)

(assert (=> bm!4461 (= call!4463 call!4462)))

(declare-fun b!59414 () Bool)

(assert (=> b!59414 (= e!39064 call!4464)))

(declare-fun b!59415 () Bool)

(assert (=> b!59415 (= c!7594 (and ((_ is Cons!1433) (toList!693 lt!23697)) (bvsgt (_1!1029 (h!2014 (toList!693 lt!23697))) (_1!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(assert (=> b!59415 (= e!39063 e!39064)))

(declare-fun b!59416 () Bool)

(declare-fun res!32989 () Bool)

(assert (=> b!59416 (=> (not res!32989) (not e!39066))))

(assert (=> b!59416 (= res!32989 (containsKey!126 lt!24130 (_1!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(assert (= (and d!11367 c!7595) b!59408))

(assert (= (and d!11367 (not c!7595)) b!59409))

(assert (= (and b!59409 c!7597) b!59410))

(assert (= (and b!59409 (not c!7597)) b!59415))

(assert (= (and b!59415 c!7594) b!59414))

(assert (= (and b!59415 (not c!7594)) b!59412))

(assert (= (or b!59414 b!59412) bm!4459))

(assert (= (or b!59410 bm!4459) bm!4461))

(assert (= (or b!59408 bm!4461) bm!4460))

(assert (= (and bm!4460 c!7596) b!59407))

(assert (= (and bm!4460 (not c!7596)) b!59413))

(assert (= (and d!11367 res!32988) b!59416))

(assert (= (and b!59416 res!32989) b!59411))

(declare-fun m!51245 () Bool)

(assert (=> b!59416 m!51245))

(declare-fun m!51247 () Bool)

(assert (=> d!11367 m!51247))

(declare-fun m!51249 () Bool)

(assert (=> d!11367 m!51249))

(declare-fun m!51251 () Bool)

(assert (=> b!59411 m!51251))

(declare-fun m!51253 () Bool)

(assert (=> b!59407 m!51253))

(declare-fun m!51255 () Bool)

(assert (=> bm!4460 m!51255))

(assert (=> d!11291 d!11367))

(declare-fun d!11369 () Bool)

(assert (=> d!11369 (= (isDefined!76 (getValueByKey!122 (toList!693 call!4382) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355))) (not (isEmpty!298 (getValueByKey!122 (toList!693 call!4382) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))))

(declare-fun bs!2571 () Bool)

(assert (= bs!2571 d!11369))

(assert (=> bs!2571 m!50793))

(declare-fun m!51257 () Bool)

(assert (=> bs!2571 m!51257))

(assert (=> b!59099 d!11369))

(declare-fun c!7598 () Bool)

(declare-fun d!11371 () Bool)

(assert (=> d!11371 (= c!7598 (and ((_ is Cons!1433) (toList!693 call!4382)) (= (_1!1029 (h!2014 (toList!693 call!4382))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355))))))

(declare-fun e!39067 () Option!128)

(assert (=> d!11371 (= (getValueByKey!122 (toList!693 call!4382) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) e!39067)))

(declare-fun e!39068 () Option!128)

(declare-fun b!59419 () Bool)

(assert (=> b!59419 (= e!39068 (getValueByKey!122 (t!4770 (toList!693 call!4382)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(declare-fun b!59418 () Bool)

(assert (=> b!59418 (= e!39067 e!39068)))

(declare-fun c!7599 () Bool)

(assert (=> b!59418 (= c!7599 (and ((_ is Cons!1433) (toList!693 call!4382)) (not (= (_1!1029 (h!2014 (toList!693 call!4382))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))))

(declare-fun b!59420 () Bool)

(assert (=> b!59420 (= e!39068 None!126)))

(declare-fun b!59417 () Bool)

(assert (=> b!59417 (= e!39067 (Some!127 (_2!1029 (h!2014 (toList!693 call!4382)))))))

(assert (= (and d!11371 c!7598) b!59417))

(assert (= (and d!11371 (not c!7598)) b!59418))

(assert (= (and b!59418 c!7599) b!59419))

(assert (= (and b!59418 (not c!7599)) b!59420))

(assert (=> b!59419 m!50353))

(declare-fun m!51259 () Bool)

(assert (=> b!59419 m!51259))

(assert (=> b!59099 d!11371))

(declare-fun d!11373 () Bool)

(declare-fun e!39070 () Bool)

(assert (=> d!11373 e!39070))

(declare-fun res!32990 () Bool)

(assert (=> d!11373 (=> res!32990 e!39070)))

(declare-fun lt!24131 () Bool)

(assert (=> d!11373 (= res!32990 (not lt!24131))))

(declare-fun lt!24133 () Bool)

(assert (=> d!11373 (= lt!24131 lt!24133)))

(declare-fun lt!24132 () Unit!1550)

(declare-fun e!39069 () Unit!1550)

(assert (=> d!11373 (= lt!24132 e!39069)))

(declare-fun c!7600 () Bool)

(assert (=> d!11373 (= c!7600 lt!24133)))

(assert (=> d!11373 (= lt!24133 (containsKey!126 (toList!693 lt!23838) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11373 (= (contains!682 lt!23838 #b1000000000000000000000000000000000000000000000000000000000000000) lt!24131)))

(declare-fun b!59421 () Bool)

(declare-fun lt!24134 () Unit!1550)

(assert (=> b!59421 (= e!39069 lt!24134)))

(assert (=> b!59421 (= lt!24134 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 lt!23838) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59421 (isDefined!76 (getValueByKey!122 (toList!693 lt!23838) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59422 () Bool)

(declare-fun Unit!1575 () Unit!1550)

(assert (=> b!59422 (= e!39069 Unit!1575)))

(declare-fun b!59423 () Bool)

(assert (=> b!59423 (= e!39070 (isDefined!76 (getValueByKey!122 (toList!693 lt!23838) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11373 c!7600) b!59421))

(assert (= (and d!11373 (not c!7600)) b!59422))

(assert (= (and d!11373 (not res!32990)) b!59423))

(declare-fun m!51261 () Bool)

(assert (=> d!11373 m!51261))

(declare-fun m!51263 () Bool)

(assert (=> b!59421 m!51263))

(declare-fun m!51265 () Bool)

(assert (=> b!59421 m!51265))

(assert (=> b!59421 m!51265))

(declare-fun m!51267 () Bool)

(assert (=> b!59421 m!51267))

(assert (=> b!59423 m!51265))

(assert (=> b!59423 m!51265))

(assert (=> b!59423 m!51267))

(assert (=> bm!4407 d!11373))

(declare-fun d!11375 () Bool)

(assert (=> d!11375 (= (isDefined!76 (getValueByKey!122 (toList!693 e!38780) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355))) (not (isEmpty!298 (getValueByKey!122 (toList!693 e!38780) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))))

(declare-fun bs!2572 () Bool)

(assert (= bs!2572 d!11375))

(assert (=> bs!2572 m!50637))

(declare-fun m!51269 () Bool)

(assert (=> bs!2572 m!51269))

(assert (=> b!58996 d!11375))

(declare-fun c!7601 () Bool)

(declare-fun d!11377 () Bool)

(assert (=> d!11377 (= c!7601 (and ((_ is Cons!1433) (toList!693 e!38780)) (= (_1!1029 (h!2014 (toList!693 e!38780))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355))))))

(declare-fun e!39071 () Option!128)

(assert (=> d!11377 (= (getValueByKey!122 (toList!693 e!38780) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) e!39071)))

(declare-fun b!59426 () Bool)

(declare-fun e!39072 () Option!128)

(assert (=> b!59426 (= e!39072 (getValueByKey!122 (t!4770 (toList!693 e!38780)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(declare-fun b!59425 () Bool)

(assert (=> b!59425 (= e!39071 e!39072)))

(declare-fun c!7602 () Bool)

(assert (=> b!59425 (= c!7602 (and ((_ is Cons!1433) (toList!693 e!38780)) (not (= (_1!1029 (h!2014 (toList!693 e!38780))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))))

(declare-fun b!59427 () Bool)

(assert (=> b!59427 (= e!39072 None!126)))

(declare-fun b!59424 () Bool)

(assert (=> b!59424 (= e!39071 (Some!127 (_2!1029 (h!2014 (toList!693 e!38780)))))))

(assert (= (and d!11377 c!7601) b!59424))

(assert (= (and d!11377 (not c!7601)) b!59425))

(assert (= (and b!59425 c!7602) b!59426))

(assert (= (and b!59425 (not c!7602)) b!59427))

(assert (=> b!59426 m!50353))

(declare-fun m!51271 () Bool)

(assert (=> b!59426 m!51271))

(assert (=> b!58996 d!11377))

(declare-fun lt!24137 () Bool)

(declare-fun d!11379 () Bool)

(declare-fun content!64 (List!1437) (InoxSet tuple2!2036))

(assert (=> d!11379 (= lt!24137 (select (content!64 (toList!693 lt!24026)) (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))

(declare-fun e!39077 () Bool)

(assert (=> d!11379 (= lt!24137 e!39077)))

(declare-fun res!32996 () Bool)

(assert (=> d!11379 (=> (not res!32996) (not e!39077))))

(assert (=> d!11379 (= res!32996 ((_ is Cons!1433) (toList!693 lt!24026)))))

(assert (=> d!11379 (= (contains!684 (toList!693 lt!24026) (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) lt!24137)))

(declare-fun b!59432 () Bool)

(declare-fun e!39078 () Bool)

(assert (=> b!59432 (= e!39077 e!39078)))

(declare-fun res!32995 () Bool)

(assert (=> b!59432 (=> res!32995 e!39078)))

(assert (=> b!59432 (= res!32995 (= (h!2014 (toList!693 lt!24026)) (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))

(declare-fun b!59433 () Bool)

(assert (=> b!59433 (= e!39078 (contains!684 (t!4770 (toList!693 lt!24026)) (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))

(assert (= (and d!11379 res!32996) b!59432))

(assert (= (and b!59432 (not res!32995)) b!59433))

(declare-fun m!51273 () Bool)

(assert (=> d!11379 m!51273))

(declare-fun m!51275 () Bool)

(assert (=> d!11379 m!51275))

(declare-fun m!51277 () Bool)

(assert (=> b!59433 m!51277))

(assert (=> b!59214 d!11379))

(declare-fun d!11381 () Bool)

(assert (=> d!11381 (= (validKeyInArray!0 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)) (and (not (= (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!59156 d!11381))

(assert (=> b!59010 d!11381))

(assert (=> b!59171 d!11381))

(declare-fun d!11383 () Bool)

(assert (=> d!11383 (= (apply!66 lt!24103 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)) (get!1076 (getValueByKey!122 (toList!693 lt!24103) (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2573 () Bool)

(assert (= bs!2573 d!11383))

(assert (=> bs!2573 m!50643))

(declare-fun m!51279 () Bool)

(assert (=> bs!2573 m!51279))

(assert (=> bs!2573 m!51279))

(declare-fun m!51281 () Bool)

(assert (=> bs!2573 m!51281))

(assert (=> b!59315 d!11383))

(declare-fun c!7603 () Bool)

(declare-fun d!11385 () Bool)

(assert (=> d!11385 (= c!7603 ((_ is ValueCellFull!854) (select (arr!1769 (ite (or c!7466 c!7462) (_values!2025 newMap!16) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (index!3044 lt!23774) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16))))) #b00000000000000000000000000000000)))))

(declare-fun e!39079 () V!2841)

(assert (=> d!11385 (= (get!1073 (select (arr!1769 (ite (or c!7466 c!7462) (_values!2025 newMap!16) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (index!3044 lt!23774) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!39079)))

(declare-fun b!59434 () Bool)

(assert (=> b!59434 (= e!39079 (get!1074 (select (arr!1769 (ite (or c!7466 c!7462) (_values!2025 newMap!16) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (index!3044 lt!23774) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!59435 () Bool)

(assert (=> b!59435 (= e!39079 (get!1075 (select (arr!1769 (ite (or c!7466 c!7462) (_values!2025 newMap!16) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (index!3044 lt!23774) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11385 c!7603) b!59434))

(assert (= (and d!11385 (not c!7603)) b!59435))

(assert (=> b!59434 m!51135))

(assert (=> b!59434 m!50697))

(declare-fun m!51283 () Bool)

(assert (=> b!59434 m!51283))

(assert (=> b!59435 m!51135))

(assert (=> b!59435 m!50697))

(declare-fun m!51285 () Bool)

(assert (=> b!59435 m!51285))

(assert (=> b!59315 d!11385))

(declare-fun d!11387 () Bool)

(declare-fun lt!24138 () Bool)

(assert (=> d!11387 (= lt!24138 (select (content!64 (toList!693 lt!23881)) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))

(declare-fun e!39080 () Bool)

(assert (=> d!11387 (= lt!24138 e!39080)))

(declare-fun res!32998 () Bool)

(assert (=> d!11387 (=> (not res!32998) (not e!39080))))

(assert (=> d!11387 (= res!32998 ((_ is Cons!1433) (toList!693 lt!23881)))))

(assert (=> d!11387 (= (contains!684 (toList!693 lt!23881) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) lt!24138)))

(declare-fun b!59436 () Bool)

(declare-fun e!39081 () Bool)

(assert (=> b!59436 (= e!39080 e!39081)))

(declare-fun res!32997 () Bool)

(assert (=> b!59436 (=> res!32997 e!39081)))

(assert (=> b!59436 (= res!32997 (= (h!2014 (toList!693 lt!23881)) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))

(declare-fun b!59437 () Bool)

(assert (=> b!59437 (= e!39081 (contains!684 (t!4770 (toList!693 lt!23881)) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))

(assert (= (and d!11387 res!32998) b!59436))

(assert (= (and b!59436 (not res!32997)) b!59437))

(declare-fun m!51287 () Bool)

(assert (=> d!11387 m!51287))

(declare-fun m!51289 () Bool)

(assert (=> d!11387 m!51289))

(declare-fun m!51291 () Bool)

(assert (=> b!59437 m!51291))

(assert (=> b!59096 d!11387))

(assert (=> bm!4421 d!11249))

(declare-fun d!11389 () Bool)

(assert (not d!11389))

(assert (=> b!59057 d!11389))

(assert (=> d!11231 d!11347))

(declare-fun b!59438 () Bool)

(declare-fun e!39085 () Bool)

(declare-fun call!4465 () Bool)

(assert (=> b!59438 (= e!39085 call!4465)))

(declare-fun b!59439 () Bool)

(declare-fun e!39083 () Bool)

(declare-fun e!39082 () Bool)

(assert (=> b!59439 (= e!39083 e!39082)))

(declare-fun res!32999 () Bool)

(assert (=> b!59439 (=> (not res!32999) (not e!39082))))

(declare-fun e!39084 () Bool)

(assert (=> b!59439 (= res!32999 (not e!39084))))

(declare-fun res!33000 () Bool)

(assert (=> b!59439 (=> (not res!33000) (not e!39084))))

(assert (=> b!59439 (= res!33000 (validKeyInArray!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun bm!4462 () Bool)

(declare-fun c!7604 () Bool)

(assert (=> bm!4462 (= call!4465 (arrayNoDuplicates!0 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!7604 (Cons!1432 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) #b00000000000000000000000000000000) Nil!1433) Nil!1433)))))

(declare-fun b!59440 () Bool)

(assert (=> b!59440 (= e!39085 call!4465)))

(declare-fun d!11391 () Bool)

(declare-fun res!33001 () Bool)

(assert (=> d!11391 (=> res!33001 e!39083)))

(assert (=> d!11391 (= res!33001 (bvsge #b00000000000000000000000000000000 (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992))))))))

(assert (=> d!11391 (= (arrayNoDuplicates!0 (_keys!3665 (v!2377 (underlying!223 thiss!992))) #b00000000000000000000000000000000 Nil!1433) e!39083)))

(declare-fun b!59441 () Bool)

(assert (=> b!59441 (= e!39082 e!39085)))

(assert (=> b!59441 (= c!7604 (validKeyInArray!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!59442 () Bool)

(assert (=> b!59442 (= e!39084 (contains!683 Nil!1433 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) #b00000000000000000000000000000000)))))

(assert (= (and d!11391 (not res!33001)) b!59439))

(assert (= (and b!59439 res!33000) b!59442))

(assert (= (and b!59439 res!32999) b!59441))

(assert (= (and b!59441 c!7604) b!59438))

(assert (= (and b!59441 (not c!7604)) b!59440))

(assert (= (or b!59438 b!59440) bm!4462))

(declare-fun m!51293 () Bool)

(assert (=> b!59439 m!51293))

(assert (=> b!59439 m!51293))

(declare-fun m!51295 () Bool)

(assert (=> b!59439 m!51295))

(assert (=> bm!4462 m!51293))

(declare-fun m!51297 () Bool)

(assert (=> bm!4462 m!51297))

(assert (=> b!59441 m!51293))

(assert (=> b!59441 m!51293))

(assert (=> b!59441 m!51295))

(assert (=> b!59442 m!51293))

(assert (=> b!59442 m!51293))

(declare-fun m!51299 () Bool)

(assert (=> b!59442 m!51299))

(assert (=> b!59102 d!11391))

(declare-fun c!7605 () Bool)

(declare-fun d!11393 () Bool)

(assert (=> d!11393 (= c!7605 (and ((_ is Cons!1433) (toList!693 lt!24042)) (= (_1!1029 (h!2014 (toList!693 lt!24042))) (_1!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(declare-fun e!39086 () Option!128)

(assert (=> d!11393 (= (getValueByKey!122 (toList!693 lt!24042) (_1!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) e!39086)))

(declare-fun e!39087 () Option!128)

(declare-fun b!59445 () Bool)

(assert (=> b!59445 (= e!39087 (getValueByKey!122 (t!4770 (toList!693 lt!24042)) (_1!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun b!59444 () Bool)

(assert (=> b!59444 (= e!39086 e!39087)))

(declare-fun c!7606 () Bool)

(assert (=> b!59444 (= c!7606 (and ((_ is Cons!1433) (toList!693 lt!24042)) (not (= (_1!1029 (h!2014 (toList!693 lt!24042))) (_1!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))))

(declare-fun b!59446 () Bool)

(assert (=> b!59446 (= e!39087 None!126)))

(declare-fun b!59443 () Bool)

(assert (=> b!59443 (= e!39086 (Some!127 (_2!1029 (h!2014 (toList!693 lt!24042)))))))

(assert (= (and d!11393 c!7605) b!59443))

(assert (= (and d!11393 (not c!7605)) b!59444))

(assert (= (and b!59444 c!7606) b!59445))

(assert (= (and b!59444 (not c!7606)) b!59446))

(declare-fun m!51301 () Bool)

(assert (=> b!59445 m!51301))

(assert (=> b!59224 d!11393))

(declare-fun d!11395 () Bool)

(declare-fun e!39088 () Bool)

(assert (=> d!11395 e!39088))

(declare-fun res!33002 () Bool)

(assert (=> d!11395 (=> (not res!33002) (not e!39088))))

(declare-fun lt!24141 () ListLongMap!1355)

(assert (=> d!11395 (= res!33002 (contains!682 lt!24141 (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!24142 () List!1437)

(assert (=> d!11395 (= lt!24141 (ListLongMap!1356 lt!24142))))

(declare-fun lt!24139 () Unit!1550)

(declare-fun lt!24140 () Unit!1550)

(assert (=> d!11395 (= lt!24139 lt!24140)))

(assert (=> d!11395 (= (getValueByKey!122 lt!24142 (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!127 (_2!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11395 (= lt!24140 (lemmaContainsTupThenGetReturnValue!42 lt!24142 (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11395 (= lt!24142 (insertStrictlySorted!45 (toList!693 (getCurrentListMap!389 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11395 (= (+!81 (getCurrentListMap!389 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!24141)))

(declare-fun b!59447 () Bool)

(declare-fun res!33003 () Bool)

(assert (=> b!59447 (=> (not res!33003) (not e!39088))))

(assert (=> b!59447 (= res!33003 (= (getValueByKey!122 (toList!693 lt!24141) (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!127 (_2!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!59448 () Bool)

(assert (=> b!59448 (= e!39088 (contains!684 (toList!693 lt!24141) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!11395 res!33002) b!59447))

(assert (= (and b!59447 res!33003) b!59448))

(declare-fun m!51303 () Bool)

(assert (=> d!11395 m!51303))

(declare-fun m!51305 () Bool)

(assert (=> d!11395 m!51305))

(declare-fun m!51307 () Bool)

(assert (=> d!11395 m!51307))

(declare-fun m!51309 () Bool)

(assert (=> d!11395 m!51309))

(declare-fun m!51311 () Bool)

(assert (=> b!59447 m!51311))

(declare-fun m!51313 () Bool)

(assert (=> b!59448 m!51313))

(assert (=> b!59066 d!11395))

(assert (=> b!59066 d!11231))

(declare-fun b!59449 () Bool)

(declare-fun e!39095 () Bool)

(assert (=> b!59449 (= e!39095 (validKeyInArray!0 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!4463 () Bool)

(declare-fun call!4472 () Bool)

(declare-fun lt!24164 () ListLongMap!1355)

(assert (=> bm!4463 (= call!4472 (contains!682 lt!24164 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59450 () Bool)

(declare-fun e!39093 () Unit!1550)

(declare-fun Unit!1576 () Unit!1550)

(assert (=> b!59450 (= e!39093 Unit!1576)))

(declare-fun b!59451 () Bool)

(declare-fun res!33007 () Bool)

(declare-fun e!39096 () Bool)

(assert (=> b!59451 (=> (not res!33007) (not e!39096))))

(declare-fun e!39094 () Bool)

(assert (=> b!59451 (= res!33007 e!39094)))

(declare-fun c!7607 () Bool)

(assert (=> b!59451 (= c!7607 (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!59452 () Bool)

(declare-fun e!39090 () ListLongMap!1355)

(declare-fun call!4469 () ListLongMap!1355)

(assert (=> b!59452 (= e!39090 call!4469)))

(declare-fun bm!4464 () Bool)

(declare-fun call!4468 () ListLongMap!1355)

(declare-fun call!4470 () ListLongMap!1355)

(assert (=> bm!4464 (= call!4468 call!4470)))

(declare-fun b!59454 () Bool)

(declare-fun e!39101 () Bool)

(declare-fun e!39089 () Bool)

(assert (=> b!59454 (= e!39101 e!39089)))

(declare-fun res!33010 () Bool)

(declare-fun call!4466 () Bool)

(assert (=> b!59454 (= res!33010 call!4466)))

(assert (=> b!59454 (=> (not res!33010) (not e!39089))))

(declare-fun b!59455 () Bool)

(assert (=> b!59455 (= e!39096 e!39101)))

(declare-fun c!7608 () Bool)

(assert (=> b!59455 (= c!7608 (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4465 () Bool)

(assert (=> bm!4465 (= call!4466 (contains!682 lt!24164 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4466 () Bool)

(declare-fun call!4471 () ListLongMap!1355)

(assert (=> bm!4466 (= call!4469 call!4471)))

(declare-fun b!59456 () Bool)

(declare-fun c!7611 () Bool)

(assert (=> b!59456 (= c!7611 (and (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!39091 () ListLongMap!1355)

(assert (=> b!59456 (= e!39090 e!39091)))

(declare-fun b!59457 () Bool)

(declare-fun e!39099 () Bool)

(assert (=> b!59457 (= e!39099 (= (apply!66 lt!24164 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1958 newMap!16)))))

(declare-fun b!59458 () Bool)

(declare-fun res!33004 () Bool)

(assert (=> b!59458 (=> (not res!33004) (not e!39096))))

(declare-fun e!39100 () Bool)

(assert (=> b!59458 (= res!33004 e!39100)))

(declare-fun res!33006 () Bool)

(assert (=> b!59458 (=> res!33006 e!39100)))

(assert (=> b!59458 (= res!33006 (not e!39095))))

(declare-fun res!33012 () Bool)

(assert (=> b!59458 (=> (not res!33012) (not e!39095))))

(assert (=> b!59458 (= res!33012 (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(declare-fun b!59459 () Bool)

(declare-fun e!39098 () ListLongMap!1355)

(assert (=> b!59459 (= e!39098 (+!81 call!4471 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))

(declare-fun bm!4467 () Bool)

(declare-fun call!4467 () ListLongMap!1355)

(assert (=> bm!4467 (= call!4467 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (index!3044 lt!23774) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16))) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun c!7612 () Bool)

(declare-fun c!7610 () Bool)

(declare-fun bm!4468 () Bool)

(assert (=> bm!4468 (= call!4471 (+!81 (ite c!7610 call!4467 (ite c!7612 call!4470 call!4468)) (ite (or c!7610 c!7612) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))

(declare-fun b!59460 () Bool)

(assert (=> b!59460 (= e!39101 (not call!4466))))

(declare-fun b!59461 () Bool)

(assert (=> b!59461 (= e!39089 (= (apply!66 lt!24164 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1958 newMap!16)))))

(declare-fun b!59462 () Bool)

(declare-fun e!39092 () Bool)

(assert (=> b!59462 (= e!39092 (= (apply!66 lt!24164 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)) (get!1073 (select (arr!1769 (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (index!3044 lt!23774) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!59462 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2000 (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (index!3044 lt!23774) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16))))))))

(assert (=> b!59462 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(declare-fun b!59453 () Bool)

(assert (=> b!59453 (= e!39100 e!39092)))

(declare-fun res!33009 () Bool)

(assert (=> b!59453 (=> (not res!33009) (not e!39092))))

(assert (=> b!59453 (= res!33009 (contains!682 lt!24164 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59453 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(declare-fun d!11397 () Bool)

(assert (=> d!11397 e!39096))

(declare-fun res!33008 () Bool)

(assert (=> d!11397 (=> (not res!33008) (not e!39096))))

(assert (=> d!11397 (= res!33008 (or (bvsge #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))))

(declare-fun lt!24158 () ListLongMap!1355)

(assert (=> d!11397 (= lt!24164 lt!24158)))

(declare-fun lt!24163 () Unit!1550)

(assert (=> d!11397 (= lt!24163 e!39093)))

(declare-fun c!7609 () Bool)

(declare-fun e!39097 () Bool)

(assert (=> d!11397 (= c!7609 e!39097)))

(declare-fun res!33011 () Bool)

(assert (=> d!11397 (=> (not res!33011) (not e!39097))))

(assert (=> d!11397 (= res!33011 (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(assert (=> d!11397 (= lt!24158 e!39098)))

(assert (=> d!11397 (= c!7610 (and (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11397 (validMask!0 (mask!5925 newMap!16))))

(assert (=> d!11397 (= (getCurrentListMap!389 (_keys!3665 newMap!16) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (index!3044 lt!23774) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16))) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) lt!24164)))

(declare-fun b!59463 () Bool)

(declare-fun lt!24152 () Unit!1550)

(assert (=> b!59463 (= e!39093 lt!24152)))

(declare-fun lt!24157 () ListLongMap!1355)

(assert (=> b!59463 (= lt!24157 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (index!3044 lt!23774) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16))) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24156 () (_ BitVec 64))

(assert (=> b!59463 (= lt!24156 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24155 () (_ BitVec 64))

(assert (=> b!59463 (= lt!24155 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24148 () Unit!1550)

(assert (=> b!59463 (= lt!24148 (addStillContains!42 lt!24157 lt!24156 (zeroValue!1958 newMap!16) lt!24155))))

(assert (=> b!59463 (contains!682 (+!81 lt!24157 (tuple2!2037 lt!24156 (zeroValue!1958 newMap!16))) lt!24155)))

(declare-fun lt!24159 () Unit!1550)

(assert (=> b!59463 (= lt!24159 lt!24148)))

(declare-fun lt!24162 () ListLongMap!1355)

(assert (=> b!59463 (= lt!24162 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (index!3044 lt!23774) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16))) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24144 () (_ BitVec 64))

(assert (=> b!59463 (= lt!24144 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24146 () (_ BitVec 64))

(assert (=> b!59463 (= lt!24146 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24143 () Unit!1550)

(assert (=> b!59463 (= lt!24143 (addApplyDifferent!42 lt!24162 lt!24144 (minValue!1958 newMap!16) lt!24146))))

(assert (=> b!59463 (= (apply!66 (+!81 lt!24162 (tuple2!2037 lt!24144 (minValue!1958 newMap!16))) lt!24146) (apply!66 lt!24162 lt!24146))))

(declare-fun lt!24151 () Unit!1550)

(assert (=> b!59463 (= lt!24151 lt!24143)))

(declare-fun lt!24150 () ListLongMap!1355)

(assert (=> b!59463 (= lt!24150 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (index!3044 lt!23774) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16))) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24147 () (_ BitVec 64))

(assert (=> b!59463 (= lt!24147 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24154 () (_ BitVec 64))

(assert (=> b!59463 (= lt!24154 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24149 () Unit!1550)

(assert (=> b!59463 (= lt!24149 (addApplyDifferent!42 lt!24150 lt!24147 (zeroValue!1958 newMap!16) lt!24154))))

(assert (=> b!59463 (= (apply!66 (+!81 lt!24150 (tuple2!2037 lt!24147 (zeroValue!1958 newMap!16))) lt!24154) (apply!66 lt!24150 lt!24154))))

(declare-fun lt!24161 () Unit!1550)

(assert (=> b!59463 (= lt!24161 lt!24149)))

(declare-fun lt!24160 () ListLongMap!1355)

(assert (=> b!59463 (= lt!24160 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (index!3044 lt!23774) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16))) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24153 () (_ BitVec 64))

(assert (=> b!59463 (= lt!24153 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24145 () (_ BitVec 64))

(assert (=> b!59463 (= lt!24145 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!59463 (= lt!24152 (addApplyDifferent!42 lt!24160 lt!24153 (minValue!1958 newMap!16) lt!24145))))

(assert (=> b!59463 (= (apply!66 (+!81 lt!24160 (tuple2!2037 lt!24153 (minValue!1958 newMap!16))) lt!24145) (apply!66 lt!24160 lt!24145))))

(declare-fun b!59464 () Bool)

(assert (=> b!59464 (= e!39097 (validKeyInArray!0 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59465 () Bool)

(assert (=> b!59465 (= e!39094 e!39099)))

(declare-fun res!33005 () Bool)

(assert (=> b!59465 (= res!33005 call!4472)))

(assert (=> b!59465 (=> (not res!33005) (not e!39099))))

(declare-fun b!59466 () Bool)

(assert (=> b!59466 (= e!39098 e!39090)))

(assert (=> b!59466 (= c!7612 (and (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!59467 () Bool)

(assert (=> b!59467 (= e!39091 call!4469)))

(declare-fun b!59468 () Bool)

(assert (=> b!59468 (= e!39094 (not call!4472))))

(declare-fun b!59469 () Bool)

(assert (=> b!59469 (= e!39091 call!4468)))

(declare-fun bm!4469 () Bool)

(assert (=> bm!4469 (= call!4470 call!4467)))

(assert (= (and d!11397 c!7610) b!59459))

(assert (= (and d!11397 (not c!7610)) b!59466))

(assert (= (and b!59466 c!7612) b!59452))

(assert (= (and b!59466 (not c!7612)) b!59456))

(assert (= (and b!59456 c!7611) b!59467))

(assert (= (and b!59456 (not c!7611)) b!59469))

(assert (= (or b!59467 b!59469) bm!4464))

(assert (= (or b!59452 bm!4464) bm!4469))

(assert (= (or b!59452 b!59467) bm!4466))

(assert (= (or b!59459 bm!4469) bm!4467))

(assert (= (or b!59459 bm!4466) bm!4468))

(assert (= (and d!11397 res!33011) b!59464))

(assert (= (and d!11397 c!7609) b!59463))

(assert (= (and d!11397 (not c!7609)) b!59450))

(assert (= (and d!11397 res!33008) b!59458))

(assert (= (and b!59458 res!33012) b!59449))

(assert (= (and b!59458 (not res!33006)) b!59453))

(assert (= (and b!59453 res!33009) b!59462))

(assert (= (and b!59458 res!33004) b!59451))

(assert (= (and b!59451 c!7607) b!59465))

(assert (= (and b!59451 (not c!7607)) b!59468))

(assert (= (and b!59465 res!33005) b!59457))

(assert (= (or b!59465 b!59468) bm!4463))

(assert (= (and b!59451 res!33007) b!59455))

(assert (= (and b!59455 c!7608) b!59454))

(assert (= (and b!59455 (not c!7608)) b!59460))

(assert (= (and b!59454 res!33010) b!59461))

(assert (= (or b!59454 b!59460) bm!4465))

(declare-fun b_lambda!2611 () Bool)

(assert (=> (not b_lambda!2611) (not b!59462)))

(assert (=> b!59462 t!4781))

(declare-fun b_and!3589 () Bool)

(assert (= b_and!3585 (and (=> t!4781 result!2381) b_and!3589)))

(assert (=> b!59462 t!4783))

(declare-fun b_and!3591 () Bool)

(assert (= b_and!3587 (and (=> t!4783 result!2383) b_and!3591)))

(declare-fun m!51315 () Bool)

(assert (=> b!59461 m!51315))

(assert (=> d!11397 m!50657))

(assert (=> b!59464 m!50643))

(assert (=> b!59464 m!50643))

(assert (=> b!59464 m!50645))

(declare-fun m!51317 () Bool)

(assert (=> bm!4463 m!51317))

(assert (=> b!59449 m!50643))

(assert (=> b!59449 m!50643))

(assert (=> b!59449 m!50645))

(declare-fun m!51319 () Bool)

(assert (=> b!59463 m!51319))

(declare-fun m!51321 () Bool)

(assert (=> b!59463 m!51321))

(declare-fun m!51323 () Bool)

(assert (=> b!59463 m!51323))

(declare-fun m!51325 () Bool)

(assert (=> b!59463 m!51325))

(declare-fun m!51327 () Bool)

(assert (=> b!59463 m!51327))

(declare-fun m!51329 () Bool)

(assert (=> b!59463 m!51329))

(declare-fun m!51331 () Bool)

(assert (=> b!59463 m!51331))

(declare-fun m!51333 () Bool)

(assert (=> b!59463 m!51333))

(assert (=> b!59463 m!50643))

(declare-fun m!51335 () Bool)

(assert (=> b!59463 m!51335))

(declare-fun m!51337 () Bool)

(assert (=> b!59463 m!51337))

(declare-fun m!51339 () Bool)

(assert (=> b!59463 m!51339))

(assert (=> b!59463 m!51319))

(declare-fun m!51341 () Bool)

(assert (=> b!59463 m!51341))

(declare-fun m!51343 () Bool)

(assert (=> b!59463 m!51343))

(declare-fun m!51345 () Bool)

(assert (=> b!59463 m!51345))

(assert (=> b!59463 m!51329))

(declare-fun m!51347 () Bool)

(assert (=> b!59463 m!51347))

(assert (=> b!59463 m!51341))

(assert (=> b!59463 m!51335))

(declare-fun m!51349 () Bool)

(assert (=> b!59463 m!51349))

(assert (=> b!59462 m!50643))

(declare-fun m!51351 () Bool)

(assert (=> b!59462 m!51351))

(assert (=> b!59462 m!50697))

(declare-fun m!51353 () Bool)

(assert (=> b!59462 m!51353))

(assert (=> b!59462 m!50697))

(declare-fun m!51355 () Bool)

(assert (=> b!59462 m!51355))

(assert (=> b!59462 m!51353))

(assert (=> b!59462 m!50643))

(assert (=> bm!4467 m!51347))

(assert (=> b!59453 m!50643))

(assert (=> b!59453 m!50643))

(declare-fun m!51357 () Bool)

(assert (=> b!59453 m!51357))

(declare-fun m!51359 () Bool)

(assert (=> b!59457 m!51359))

(declare-fun m!51361 () Bool)

(assert (=> b!59459 m!51361))

(declare-fun m!51363 () Bool)

(assert (=> bm!4468 m!51363))

(declare-fun m!51365 () Bool)

(assert (=> bm!4465 m!51365))

(assert (=> b!59066 d!11397))

(declare-fun b!59470 () Bool)

(declare-fun e!39108 () Bool)

(assert (=> b!59470 (= e!39108 (validKeyInArray!0 (select (arr!1768 (_keys!3665 (_2!1028 lt!23773))) #b00000000000000000000000000000000)))))

(declare-fun bm!4470 () Bool)

(declare-fun call!4479 () Bool)

(declare-fun lt!24186 () ListLongMap!1355)

(assert (=> bm!4470 (= call!4479 (contains!682 lt!24186 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59471 () Bool)

(declare-fun e!39106 () Unit!1550)

(declare-fun Unit!1577 () Unit!1550)

(assert (=> b!59471 (= e!39106 Unit!1577)))

(declare-fun b!59472 () Bool)

(declare-fun res!33016 () Bool)

(declare-fun e!39109 () Bool)

(assert (=> b!59472 (=> (not res!33016) (not e!39109))))

(declare-fun e!39107 () Bool)

(assert (=> b!59472 (= res!33016 e!39107)))

(declare-fun c!7613 () Bool)

(assert (=> b!59472 (= c!7613 (not (= (bvand (extraKeys!1929 (_2!1028 lt!23773)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!59473 () Bool)

(declare-fun e!39103 () ListLongMap!1355)

(declare-fun call!4476 () ListLongMap!1355)

(assert (=> b!59473 (= e!39103 call!4476)))

(declare-fun bm!4471 () Bool)

(declare-fun call!4475 () ListLongMap!1355)

(declare-fun call!4477 () ListLongMap!1355)

(assert (=> bm!4471 (= call!4475 call!4477)))

(declare-fun b!59475 () Bool)

(declare-fun e!39114 () Bool)

(declare-fun e!39102 () Bool)

(assert (=> b!59475 (= e!39114 e!39102)))

(declare-fun res!33019 () Bool)

(declare-fun call!4473 () Bool)

(assert (=> b!59475 (= res!33019 call!4473)))

(assert (=> b!59475 (=> (not res!33019) (not e!39102))))

(declare-fun b!59476 () Bool)

(assert (=> b!59476 (= e!39109 e!39114)))

(declare-fun c!7614 () Bool)

(assert (=> b!59476 (= c!7614 (not (= (bvand (extraKeys!1929 (_2!1028 lt!23773)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4472 () Bool)

(assert (=> bm!4472 (= call!4473 (contains!682 lt!24186 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4473 () Bool)

(declare-fun call!4478 () ListLongMap!1355)

(assert (=> bm!4473 (= call!4476 call!4478)))

(declare-fun b!59477 () Bool)

(declare-fun c!7617 () Bool)

(assert (=> b!59477 (= c!7617 (and (not (= (bvand (extraKeys!1929 (_2!1028 lt!23773)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1929 (_2!1028 lt!23773)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!39104 () ListLongMap!1355)

(assert (=> b!59477 (= e!39103 e!39104)))

(declare-fun b!59478 () Bool)

(declare-fun e!39112 () Bool)

(assert (=> b!59478 (= e!39112 (= (apply!66 lt!24186 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1958 (_2!1028 lt!23773))))))

(declare-fun b!59479 () Bool)

(declare-fun res!33013 () Bool)

(assert (=> b!59479 (=> (not res!33013) (not e!39109))))

(declare-fun e!39113 () Bool)

(assert (=> b!59479 (= res!33013 e!39113)))

(declare-fun res!33015 () Bool)

(assert (=> b!59479 (=> res!33015 e!39113)))

(assert (=> b!59479 (= res!33015 (not e!39108))))

(declare-fun res!33021 () Bool)

(assert (=> b!59479 (=> (not res!33021) (not e!39108))))

(assert (=> b!59479 (= res!33021 (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 (_2!1028 lt!23773)))))))

(declare-fun b!59480 () Bool)

(declare-fun e!39111 () ListLongMap!1355)

(assert (=> b!59480 (= e!39111 (+!81 call!4478 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (_2!1028 lt!23773)))))))

(declare-fun bm!4474 () Bool)

(declare-fun call!4474 () ListLongMap!1355)

(assert (=> bm!4474 (= call!4474 (getCurrentListMapNoExtraKeys!44 (_keys!3665 (_2!1028 lt!23773)) (_values!2025 (_2!1028 lt!23773)) (mask!5925 (_2!1028 lt!23773)) (extraKeys!1929 (_2!1028 lt!23773)) (zeroValue!1958 (_2!1028 lt!23773)) (minValue!1958 (_2!1028 lt!23773)) #b00000000000000000000000000000000 (defaultEntry!2042 (_2!1028 lt!23773))))))

(declare-fun c!7616 () Bool)

(declare-fun bm!4475 () Bool)

(declare-fun c!7618 () Bool)

(assert (=> bm!4475 (= call!4478 (+!81 (ite c!7616 call!4474 (ite c!7618 call!4477 call!4475)) (ite (or c!7616 c!7618) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (_2!1028 lt!23773))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (_2!1028 lt!23773))))))))

(declare-fun b!59481 () Bool)

(assert (=> b!59481 (= e!39114 (not call!4473))))

(declare-fun b!59482 () Bool)

(assert (=> b!59482 (= e!39102 (= (apply!66 lt!24186 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1958 (_2!1028 lt!23773))))))

(declare-fun b!59483 () Bool)

(declare-fun e!39105 () Bool)

(assert (=> b!59483 (= e!39105 (= (apply!66 lt!24186 (select (arr!1768 (_keys!3665 (_2!1028 lt!23773))) #b00000000000000000000000000000000)) (get!1073 (select (arr!1769 (_values!2025 (_2!1028 lt!23773))) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2042 (_2!1028 lt!23773)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!59483 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2000 (_values!2025 (_2!1028 lt!23773)))))))

(assert (=> b!59483 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 (_2!1028 lt!23773)))))))

(declare-fun b!59474 () Bool)

(assert (=> b!59474 (= e!39113 e!39105)))

(declare-fun res!33018 () Bool)

(assert (=> b!59474 (=> (not res!33018) (not e!39105))))

(assert (=> b!59474 (= res!33018 (contains!682 lt!24186 (select (arr!1768 (_keys!3665 (_2!1028 lt!23773))) #b00000000000000000000000000000000)))))

(assert (=> b!59474 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 (_2!1028 lt!23773)))))))

(declare-fun d!11399 () Bool)

(assert (=> d!11399 e!39109))

(declare-fun res!33017 () Bool)

(assert (=> d!11399 (=> (not res!33017) (not e!39109))))

(assert (=> d!11399 (= res!33017 (or (bvsge #b00000000000000000000000000000000 (size!1999 (_keys!3665 (_2!1028 lt!23773)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 (_2!1028 lt!23773)))))))))

(declare-fun lt!24180 () ListLongMap!1355)

(assert (=> d!11399 (= lt!24186 lt!24180)))

(declare-fun lt!24185 () Unit!1550)

(assert (=> d!11399 (= lt!24185 e!39106)))

(declare-fun c!7615 () Bool)

(declare-fun e!39110 () Bool)

(assert (=> d!11399 (= c!7615 e!39110)))

(declare-fun res!33020 () Bool)

(assert (=> d!11399 (=> (not res!33020) (not e!39110))))

(assert (=> d!11399 (= res!33020 (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 (_2!1028 lt!23773)))))))

(assert (=> d!11399 (= lt!24180 e!39111)))

(assert (=> d!11399 (= c!7616 (and (not (= (bvand (extraKeys!1929 (_2!1028 lt!23773)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1929 (_2!1028 lt!23773)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11399 (validMask!0 (mask!5925 (_2!1028 lt!23773)))))

(assert (=> d!11399 (= (getCurrentListMap!389 (_keys!3665 (_2!1028 lt!23773)) (_values!2025 (_2!1028 lt!23773)) (mask!5925 (_2!1028 lt!23773)) (extraKeys!1929 (_2!1028 lt!23773)) (zeroValue!1958 (_2!1028 lt!23773)) (minValue!1958 (_2!1028 lt!23773)) #b00000000000000000000000000000000 (defaultEntry!2042 (_2!1028 lt!23773))) lt!24186)))

(declare-fun b!59484 () Bool)

(declare-fun lt!24174 () Unit!1550)

(assert (=> b!59484 (= e!39106 lt!24174)))

(declare-fun lt!24179 () ListLongMap!1355)

(assert (=> b!59484 (= lt!24179 (getCurrentListMapNoExtraKeys!44 (_keys!3665 (_2!1028 lt!23773)) (_values!2025 (_2!1028 lt!23773)) (mask!5925 (_2!1028 lt!23773)) (extraKeys!1929 (_2!1028 lt!23773)) (zeroValue!1958 (_2!1028 lt!23773)) (minValue!1958 (_2!1028 lt!23773)) #b00000000000000000000000000000000 (defaultEntry!2042 (_2!1028 lt!23773))))))

(declare-fun lt!24178 () (_ BitVec 64))

(assert (=> b!59484 (= lt!24178 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24177 () (_ BitVec 64))

(assert (=> b!59484 (= lt!24177 (select (arr!1768 (_keys!3665 (_2!1028 lt!23773))) #b00000000000000000000000000000000))))

(declare-fun lt!24170 () Unit!1550)

(assert (=> b!59484 (= lt!24170 (addStillContains!42 lt!24179 lt!24178 (zeroValue!1958 (_2!1028 lt!23773)) lt!24177))))

(assert (=> b!59484 (contains!682 (+!81 lt!24179 (tuple2!2037 lt!24178 (zeroValue!1958 (_2!1028 lt!23773)))) lt!24177)))

(declare-fun lt!24181 () Unit!1550)

(assert (=> b!59484 (= lt!24181 lt!24170)))

(declare-fun lt!24184 () ListLongMap!1355)

(assert (=> b!59484 (= lt!24184 (getCurrentListMapNoExtraKeys!44 (_keys!3665 (_2!1028 lt!23773)) (_values!2025 (_2!1028 lt!23773)) (mask!5925 (_2!1028 lt!23773)) (extraKeys!1929 (_2!1028 lt!23773)) (zeroValue!1958 (_2!1028 lt!23773)) (minValue!1958 (_2!1028 lt!23773)) #b00000000000000000000000000000000 (defaultEntry!2042 (_2!1028 lt!23773))))))

(declare-fun lt!24166 () (_ BitVec 64))

(assert (=> b!59484 (= lt!24166 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24168 () (_ BitVec 64))

(assert (=> b!59484 (= lt!24168 (select (arr!1768 (_keys!3665 (_2!1028 lt!23773))) #b00000000000000000000000000000000))))

(declare-fun lt!24165 () Unit!1550)

(assert (=> b!59484 (= lt!24165 (addApplyDifferent!42 lt!24184 lt!24166 (minValue!1958 (_2!1028 lt!23773)) lt!24168))))

(assert (=> b!59484 (= (apply!66 (+!81 lt!24184 (tuple2!2037 lt!24166 (minValue!1958 (_2!1028 lt!23773)))) lt!24168) (apply!66 lt!24184 lt!24168))))

(declare-fun lt!24173 () Unit!1550)

(assert (=> b!59484 (= lt!24173 lt!24165)))

(declare-fun lt!24172 () ListLongMap!1355)

(assert (=> b!59484 (= lt!24172 (getCurrentListMapNoExtraKeys!44 (_keys!3665 (_2!1028 lt!23773)) (_values!2025 (_2!1028 lt!23773)) (mask!5925 (_2!1028 lt!23773)) (extraKeys!1929 (_2!1028 lt!23773)) (zeroValue!1958 (_2!1028 lt!23773)) (minValue!1958 (_2!1028 lt!23773)) #b00000000000000000000000000000000 (defaultEntry!2042 (_2!1028 lt!23773))))))

(declare-fun lt!24169 () (_ BitVec 64))

(assert (=> b!59484 (= lt!24169 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24176 () (_ BitVec 64))

(assert (=> b!59484 (= lt!24176 (select (arr!1768 (_keys!3665 (_2!1028 lt!23773))) #b00000000000000000000000000000000))))

(declare-fun lt!24171 () Unit!1550)

(assert (=> b!59484 (= lt!24171 (addApplyDifferent!42 lt!24172 lt!24169 (zeroValue!1958 (_2!1028 lt!23773)) lt!24176))))

(assert (=> b!59484 (= (apply!66 (+!81 lt!24172 (tuple2!2037 lt!24169 (zeroValue!1958 (_2!1028 lt!23773)))) lt!24176) (apply!66 lt!24172 lt!24176))))

(declare-fun lt!24183 () Unit!1550)

(assert (=> b!59484 (= lt!24183 lt!24171)))

(declare-fun lt!24182 () ListLongMap!1355)

(assert (=> b!59484 (= lt!24182 (getCurrentListMapNoExtraKeys!44 (_keys!3665 (_2!1028 lt!23773)) (_values!2025 (_2!1028 lt!23773)) (mask!5925 (_2!1028 lt!23773)) (extraKeys!1929 (_2!1028 lt!23773)) (zeroValue!1958 (_2!1028 lt!23773)) (minValue!1958 (_2!1028 lt!23773)) #b00000000000000000000000000000000 (defaultEntry!2042 (_2!1028 lt!23773))))))

(declare-fun lt!24175 () (_ BitVec 64))

(assert (=> b!59484 (= lt!24175 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24167 () (_ BitVec 64))

(assert (=> b!59484 (= lt!24167 (select (arr!1768 (_keys!3665 (_2!1028 lt!23773))) #b00000000000000000000000000000000))))

(assert (=> b!59484 (= lt!24174 (addApplyDifferent!42 lt!24182 lt!24175 (minValue!1958 (_2!1028 lt!23773)) lt!24167))))

(assert (=> b!59484 (= (apply!66 (+!81 lt!24182 (tuple2!2037 lt!24175 (minValue!1958 (_2!1028 lt!23773)))) lt!24167) (apply!66 lt!24182 lt!24167))))

(declare-fun b!59485 () Bool)

(assert (=> b!59485 (= e!39110 (validKeyInArray!0 (select (arr!1768 (_keys!3665 (_2!1028 lt!23773))) #b00000000000000000000000000000000)))))

(declare-fun b!59486 () Bool)

(assert (=> b!59486 (= e!39107 e!39112)))

(declare-fun res!33014 () Bool)

(assert (=> b!59486 (= res!33014 call!4479)))

(assert (=> b!59486 (=> (not res!33014) (not e!39112))))

(declare-fun b!59487 () Bool)

(assert (=> b!59487 (= e!39111 e!39103)))

(assert (=> b!59487 (= c!7618 (and (not (= (bvand (extraKeys!1929 (_2!1028 lt!23773)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1929 (_2!1028 lt!23773)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!59488 () Bool)

(assert (=> b!59488 (= e!39104 call!4476)))

(declare-fun b!59489 () Bool)

(assert (=> b!59489 (= e!39107 (not call!4479))))

(declare-fun b!59490 () Bool)

(assert (=> b!59490 (= e!39104 call!4475)))

(declare-fun bm!4476 () Bool)

(assert (=> bm!4476 (= call!4477 call!4474)))

(assert (= (and d!11399 c!7616) b!59480))

(assert (= (and d!11399 (not c!7616)) b!59487))

(assert (= (and b!59487 c!7618) b!59473))

(assert (= (and b!59487 (not c!7618)) b!59477))

(assert (= (and b!59477 c!7617) b!59488))

(assert (= (and b!59477 (not c!7617)) b!59490))

(assert (= (or b!59488 b!59490) bm!4471))

(assert (= (or b!59473 bm!4471) bm!4476))

(assert (= (or b!59473 b!59488) bm!4473))

(assert (= (or b!59480 bm!4476) bm!4474))

(assert (= (or b!59480 bm!4473) bm!4475))

(assert (= (and d!11399 res!33020) b!59485))

(assert (= (and d!11399 c!7615) b!59484))

(assert (= (and d!11399 (not c!7615)) b!59471))

(assert (= (and d!11399 res!33017) b!59479))

(assert (= (and b!59479 res!33021) b!59470))

(assert (= (and b!59479 (not res!33015)) b!59474))

(assert (= (and b!59474 res!33018) b!59483))

(assert (= (and b!59479 res!33013) b!59472))

(assert (= (and b!59472 c!7613) b!59486))

(assert (= (and b!59472 (not c!7613)) b!59489))

(assert (= (and b!59486 res!33014) b!59478))

(assert (= (or b!59486 b!59489) bm!4470))

(assert (= (and b!59472 res!33016) b!59476))

(assert (= (and b!59476 c!7614) b!59475))

(assert (= (and b!59476 (not c!7614)) b!59481))

(assert (= (and b!59475 res!33019) b!59482))

(assert (= (or b!59475 b!59481) bm!4472))

(declare-fun b_lambda!2613 () Bool)

(assert (=> (not b_lambda!2613) (not b!59483)))

(declare-fun tb!1325 () Bool)

(declare-fun t!4785 () Bool)

(assert (=> (and b!58610 (= (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) (defaultEntry!2042 (_2!1028 lt!23773))) t!4785) tb!1325))

(declare-fun result!2385 () Bool)

(assert (=> tb!1325 (= result!2385 tp_is_empty!2395)))

(assert (=> b!59483 t!4785))

(declare-fun b_and!3593 () Bool)

(assert (= b_and!3589 (and (=> t!4785 result!2385) b_and!3593)))

(declare-fun tb!1327 () Bool)

(declare-fun t!4787 () Bool)

(assert (=> (and b!58607 (= (defaultEntry!2042 newMap!16) (defaultEntry!2042 (_2!1028 lt!23773))) t!4787) tb!1327))

(declare-fun result!2387 () Bool)

(assert (= result!2387 result!2385))

(assert (=> b!59483 t!4787))

(declare-fun b_and!3595 () Bool)

(assert (= b_and!3591 (and (=> t!4787 result!2387) b_and!3595)))

(declare-fun m!51367 () Bool)

(assert (=> b!59482 m!51367))

(declare-fun m!51369 () Bool)

(assert (=> d!11399 m!51369))

(assert (=> b!59485 m!51199))

(assert (=> b!59485 m!51199))

(assert (=> b!59485 m!51207))

(declare-fun m!51371 () Bool)

(assert (=> bm!4470 m!51371))

(assert (=> b!59470 m!51199))

(assert (=> b!59470 m!51199))

(assert (=> b!59470 m!51207))

(declare-fun m!51373 () Bool)

(assert (=> b!59484 m!51373))

(declare-fun m!51375 () Bool)

(assert (=> b!59484 m!51375))

(declare-fun m!51377 () Bool)

(assert (=> b!59484 m!51377))

(declare-fun m!51379 () Bool)

(assert (=> b!59484 m!51379))

(declare-fun m!51381 () Bool)

(assert (=> b!59484 m!51381))

(declare-fun m!51383 () Bool)

(assert (=> b!59484 m!51383))

(declare-fun m!51385 () Bool)

(assert (=> b!59484 m!51385))

(declare-fun m!51387 () Bool)

(assert (=> b!59484 m!51387))

(assert (=> b!59484 m!51199))

(declare-fun m!51389 () Bool)

(assert (=> b!59484 m!51389))

(declare-fun m!51391 () Bool)

(assert (=> b!59484 m!51391))

(declare-fun m!51393 () Bool)

(assert (=> b!59484 m!51393))

(assert (=> b!59484 m!51373))

(declare-fun m!51395 () Bool)

(assert (=> b!59484 m!51395))

(declare-fun m!51397 () Bool)

(assert (=> b!59484 m!51397))

(declare-fun m!51399 () Bool)

(assert (=> b!59484 m!51399))

(assert (=> b!59484 m!51383))

(declare-fun m!51401 () Bool)

(assert (=> b!59484 m!51401))

(assert (=> b!59484 m!51395))

(assert (=> b!59484 m!51389))

(declare-fun m!51403 () Bool)

(assert (=> b!59484 m!51403))

(assert (=> b!59483 m!51199))

(declare-fun m!51405 () Bool)

(assert (=> b!59483 m!51405))

(declare-fun m!51407 () Bool)

(assert (=> b!59483 m!51407))

(declare-fun m!51409 () Bool)

(assert (=> b!59483 m!51409))

(assert (=> b!59483 m!51407))

(declare-fun m!51411 () Bool)

(assert (=> b!59483 m!51411))

(assert (=> b!59483 m!51409))

(assert (=> b!59483 m!51199))

(assert (=> bm!4474 m!51401))

(assert (=> b!59474 m!51199))

(assert (=> b!59474 m!51199))

(declare-fun m!51413 () Bool)

(assert (=> b!59474 m!51413))

(declare-fun m!51415 () Bool)

(assert (=> b!59478 m!51415))

(declare-fun m!51417 () Bool)

(assert (=> b!59480 m!51417))

(declare-fun m!51419 () Bool)

(assert (=> bm!4475 m!51419))

(declare-fun m!51421 () Bool)

(assert (=> bm!4472 m!51421))

(assert (=> d!11321 d!11399))

(declare-fun d!11401 () Bool)

(assert (=> d!11401 (= (isDefined!76 (getValueByKey!122 (toList!693 lt!23704) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!298 (getValueByKey!122 (toList!693 lt!23704) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!2574 () Bool)

(assert (= bs!2574 d!11401))

(assert (=> bs!2574 m!50757))

(declare-fun m!51423 () Bool)

(assert (=> bs!2574 m!51423))

(assert (=> b!59233 d!11401))

(assert (=> b!59233 d!11351))

(declare-fun d!11403 () Bool)

(assert (=> d!11403 (isDefined!76 (getValueByKey!122 (toList!693 lt!23704) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun lt!24187 () Unit!1550)

(assert (=> d!11403 (= lt!24187 (choose!315 (toList!693 lt!23704) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!39115 () Bool)

(assert (=> d!11403 e!39115))

(declare-fun res!33022 () Bool)

(assert (=> d!11403 (=> (not res!33022) (not e!39115))))

(assert (=> d!11403 (= res!33022 (isStrictlySorted!279 (toList!693 lt!23704)))))

(assert (=> d!11403 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 lt!23704) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!24187)))

(declare-fun b!59491 () Bool)

(assert (=> b!59491 (= e!39115 (containsKey!126 (toList!693 lt!23704) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!11403 res!33022) b!59491))

(assert (=> d!11403 m!50485))

(assert (=> d!11403 m!50717))

(assert (=> d!11403 m!50717))

(assert (=> d!11403 m!50719))

(assert (=> d!11403 m!50485))

(declare-fun m!51425 () Bool)

(assert (=> d!11403 m!51425))

(declare-fun m!51427 () Bool)

(assert (=> d!11403 m!51427))

(assert (=> b!59491 m!50485))

(assert (=> b!59491 m!50713))

(assert (=> b!59041 d!11403))

(declare-fun d!11405 () Bool)

(assert (=> d!11405 (= (isDefined!76 (getValueByKey!122 (toList!693 lt!23704) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (not (isEmpty!298 (getValueByKey!122 (toList!693 lt!23704) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun bs!2575 () Bool)

(assert (= bs!2575 d!11405))

(assert (=> bs!2575 m!50717))

(declare-fun m!51429 () Bool)

(assert (=> bs!2575 m!51429))

(assert (=> b!59041 d!11405))

(declare-fun c!7619 () Bool)

(declare-fun d!11407 () Bool)

(assert (=> d!11407 (= c!7619 (and ((_ is Cons!1433) (toList!693 lt!23704)) (= (_1!1029 (h!2014 (toList!693 lt!23704))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun e!39116 () Option!128)

(assert (=> d!11407 (= (getValueByKey!122 (toList!693 lt!23704) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!39116)))

(declare-fun e!39117 () Option!128)

(declare-fun b!59494 () Bool)

(assert (=> b!59494 (= e!39117 (getValueByKey!122 (t!4770 (toList!693 lt!23704)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!59493 () Bool)

(assert (=> b!59493 (= e!39116 e!39117)))

(declare-fun c!7620 () Bool)

(assert (=> b!59493 (= c!7620 (and ((_ is Cons!1433) (toList!693 lt!23704)) (not (= (_1!1029 (h!2014 (toList!693 lt!23704))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun b!59495 () Bool)

(assert (=> b!59495 (= e!39117 None!126)))

(declare-fun b!59492 () Bool)

(assert (=> b!59492 (= e!39116 (Some!127 (_2!1029 (h!2014 (toList!693 lt!23704)))))))

(assert (= (and d!11407 c!7619) b!59492))

(assert (= (and d!11407 (not c!7619)) b!59493))

(assert (= (and b!59493 c!7620) b!59494))

(assert (= (and b!59493 (not c!7620)) b!59495))

(assert (=> b!59494 m!50485))

(declare-fun m!51431 () Bool)

(assert (=> b!59494 m!51431))

(assert (=> b!59041 d!11407))

(declare-fun d!11409 () Bool)

(declare-fun e!39118 () Bool)

(assert (=> d!11409 e!39118))

(declare-fun res!33023 () Bool)

(assert (=> d!11409 (=> (not res!33023) (not e!39118))))

(declare-fun lt!24190 () ListLongMap!1355)

(assert (=> d!11409 (= res!33023 (contains!682 lt!24190 (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!24191 () List!1437)

(assert (=> d!11409 (= lt!24190 (ListLongMap!1356 lt!24191))))

(declare-fun lt!24188 () Unit!1550)

(declare-fun lt!24189 () Unit!1550)

(assert (=> d!11409 (= lt!24188 lt!24189)))

(assert (=> d!11409 (= (getValueByKey!122 lt!24191 (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!127 (_2!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11409 (= lt!24189 (lemmaContainsTupThenGetReturnValue!42 lt!24191 (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11409 (= lt!24191 (insertStrictlySorted!45 (toList!693 (getCurrentListMap!389 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11409 (= (+!81 (getCurrentListMap!389 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!24190)))

(declare-fun b!59496 () Bool)

(declare-fun res!33024 () Bool)

(assert (=> b!59496 (=> (not res!33024) (not e!39118))))

(assert (=> b!59496 (= res!33024 (= (getValueByKey!122 (toList!693 lt!24190) (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!127 (_2!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!59497 () Bool)

(assert (=> b!59497 (= e!39118 (contains!684 (toList!693 lt!24190) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!11409 res!33023) b!59496))

(assert (= (and b!59496 res!33024) b!59497))

(declare-fun m!51433 () Bool)

(assert (=> d!11409 m!51433))

(declare-fun m!51435 () Bool)

(assert (=> d!11409 m!51435))

(declare-fun m!51437 () Bool)

(assert (=> d!11409 m!51437))

(declare-fun m!51439 () Bool)

(assert (=> d!11409 m!51439))

(declare-fun m!51441 () Bool)

(assert (=> b!59496 m!51441))

(declare-fun m!51443 () Bool)

(assert (=> b!59497 m!51443))

(assert (=> d!11335 d!11409))

(assert (=> d!11335 d!11231))

(declare-fun b!59498 () Bool)

(declare-fun e!39125 () Bool)

(assert (=> b!59498 (= e!39125 (validKeyInArray!0 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!4477 () Bool)

(declare-fun call!4486 () Bool)

(declare-fun lt!24213 () ListLongMap!1355)

(assert (=> bm!4477 (= call!4486 (contains!682 lt!24213 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59499 () Bool)

(declare-fun e!39123 () Unit!1550)

(declare-fun Unit!1578 () Unit!1550)

(assert (=> b!59499 (= e!39123 Unit!1578)))

(declare-fun b!59500 () Bool)

(declare-fun res!33028 () Bool)

(declare-fun e!39126 () Bool)

(assert (=> b!59500 (=> (not res!33028) (not e!39126))))

(declare-fun e!39124 () Bool)

(assert (=> b!59500 (= res!33028 e!39124)))

(declare-fun c!7621 () Bool)

(assert (=> b!59500 (= c!7621 (not (= (bvand lt!23782 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!59501 () Bool)

(declare-fun e!39120 () ListLongMap!1355)

(declare-fun call!4483 () ListLongMap!1355)

(assert (=> b!59501 (= e!39120 call!4483)))

(declare-fun bm!4478 () Bool)

(declare-fun call!4482 () ListLongMap!1355)

(declare-fun call!4484 () ListLongMap!1355)

(assert (=> bm!4478 (= call!4482 call!4484)))

(declare-fun b!59503 () Bool)

(declare-fun e!39131 () Bool)

(declare-fun e!39119 () Bool)

(assert (=> b!59503 (= e!39131 e!39119)))

(declare-fun res!33031 () Bool)

(declare-fun call!4480 () Bool)

(assert (=> b!59503 (= res!33031 call!4480)))

(assert (=> b!59503 (=> (not res!33031) (not e!39119))))

(declare-fun b!59504 () Bool)

(assert (=> b!59504 (= e!39126 e!39131)))

(declare-fun c!7622 () Bool)

(assert (=> b!59504 (= c!7622 (not (= (bvand lt!23782 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4479 () Bool)

(assert (=> bm!4479 (= call!4480 (contains!682 lt!24213 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4480 () Bool)

(declare-fun call!4485 () ListLongMap!1355)

(assert (=> bm!4480 (= call!4483 call!4485)))

(declare-fun b!59505 () Bool)

(declare-fun c!7625 () Bool)

(assert (=> b!59505 (= c!7625 (and (not (= (bvand lt!23782 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!23782 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!39121 () ListLongMap!1355)

(assert (=> b!59505 (= e!39120 e!39121)))

(declare-fun b!59506 () Bool)

(declare-fun e!39129 () Bool)

(assert (=> b!59506 (= e!39129 (= (apply!66 lt!24213 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1958 newMap!16)))))

(declare-fun b!59507 () Bool)

(declare-fun res!33025 () Bool)

(assert (=> b!59507 (=> (not res!33025) (not e!39126))))

(declare-fun e!39130 () Bool)

(assert (=> b!59507 (= res!33025 e!39130)))

(declare-fun res!33027 () Bool)

(assert (=> b!59507 (=> res!33027 e!39130)))

(assert (=> b!59507 (= res!33027 (not e!39125))))

(declare-fun res!33033 () Bool)

(assert (=> b!59507 (=> (not res!33033) (not e!39125))))

(assert (=> b!59507 (= res!33033 (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(declare-fun e!39128 () ListLongMap!1355)

(declare-fun b!59508 () Bool)

(assert (=> b!59508 (= e!39128 (+!81 call!4485 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun bm!4481 () Bool)

(declare-fun call!4481 () ListLongMap!1355)

(assert (=> bm!4481 (= call!4481 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) lt!23782 (zeroValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun c!7626 () Bool)

(declare-fun bm!4482 () Bool)

(declare-fun c!7624 () Bool)

(assert (=> bm!4482 (= call!4485 (+!81 (ite c!7624 call!4481 (ite c!7626 call!4484 call!4482)) (ite (or c!7624 c!7626) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!59509 () Bool)

(assert (=> b!59509 (= e!39131 (not call!4480))))

(declare-fun b!59510 () Bool)

(assert (=> b!59510 (= e!39119 (= (apply!66 lt!24213 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!59511 () Bool)

(declare-fun e!39122 () Bool)

(assert (=> b!59511 (= e!39122 (= (apply!66 lt!24213 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)) (get!1073 (select (arr!1769 (_values!2025 newMap!16)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!59511 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2000 (_values!2025 newMap!16))))))

(assert (=> b!59511 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(declare-fun b!59502 () Bool)

(assert (=> b!59502 (= e!39130 e!39122)))

(declare-fun res!33030 () Bool)

(assert (=> b!59502 (=> (not res!33030) (not e!39122))))

(assert (=> b!59502 (= res!33030 (contains!682 lt!24213 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59502 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(declare-fun d!11411 () Bool)

(assert (=> d!11411 e!39126))

(declare-fun res!33029 () Bool)

(assert (=> d!11411 (=> (not res!33029) (not e!39126))))

(assert (=> d!11411 (= res!33029 (or (bvsge #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))))

(declare-fun lt!24207 () ListLongMap!1355)

(assert (=> d!11411 (= lt!24213 lt!24207)))

(declare-fun lt!24212 () Unit!1550)

(assert (=> d!11411 (= lt!24212 e!39123)))

(declare-fun c!7623 () Bool)

(declare-fun e!39127 () Bool)

(assert (=> d!11411 (= c!7623 e!39127)))

(declare-fun res!33032 () Bool)

(assert (=> d!11411 (=> (not res!33032) (not e!39127))))

(assert (=> d!11411 (= res!33032 (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(assert (=> d!11411 (= lt!24207 e!39128)))

(assert (=> d!11411 (= c!7624 (and (not (= (bvand lt!23782 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!23782 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11411 (validMask!0 (mask!5925 newMap!16))))

(assert (=> d!11411 (= (getCurrentListMap!389 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) lt!23782 (zeroValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) lt!24213)))

(declare-fun b!59512 () Bool)

(declare-fun lt!24201 () Unit!1550)

(assert (=> b!59512 (= e!39123 lt!24201)))

(declare-fun lt!24206 () ListLongMap!1355)

(assert (=> b!59512 (= lt!24206 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) lt!23782 (zeroValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24205 () (_ BitVec 64))

(assert (=> b!59512 (= lt!24205 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24204 () (_ BitVec 64))

(assert (=> b!59512 (= lt!24204 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24197 () Unit!1550)

(assert (=> b!59512 (= lt!24197 (addStillContains!42 lt!24206 lt!24205 (zeroValue!1958 newMap!16) lt!24204))))

(assert (=> b!59512 (contains!682 (+!81 lt!24206 (tuple2!2037 lt!24205 (zeroValue!1958 newMap!16))) lt!24204)))

(declare-fun lt!24208 () Unit!1550)

(assert (=> b!59512 (= lt!24208 lt!24197)))

(declare-fun lt!24211 () ListLongMap!1355)

(assert (=> b!59512 (= lt!24211 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) lt!23782 (zeroValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24193 () (_ BitVec 64))

(assert (=> b!59512 (= lt!24193 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24195 () (_ BitVec 64))

(assert (=> b!59512 (= lt!24195 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24192 () Unit!1550)

(assert (=> b!59512 (= lt!24192 (addApplyDifferent!42 lt!24211 lt!24193 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!24195))))

(assert (=> b!59512 (= (apply!66 (+!81 lt!24211 (tuple2!2037 lt!24193 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!24195) (apply!66 lt!24211 lt!24195))))

(declare-fun lt!24200 () Unit!1550)

(assert (=> b!59512 (= lt!24200 lt!24192)))

(declare-fun lt!24199 () ListLongMap!1355)

(assert (=> b!59512 (= lt!24199 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) lt!23782 (zeroValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24196 () (_ BitVec 64))

(assert (=> b!59512 (= lt!24196 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24203 () (_ BitVec 64))

(assert (=> b!59512 (= lt!24203 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24198 () Unit!1550)

(assert (=> b!59512 (= lt!24198 (addApplyDifferent!42 lt!24199 lt!24196 (zeroValue!1958 newMap!16) lt!24203))))

(assert (=> b!59512 (= (apply!66 (+!81 lt!24199 (tuple2!2037 lt!24196 (zeroValue!1958 newMap!16))) lt!24203) (apply!66 lt!24199 lt!24203))))

(declare-fun lt!24210 () Unit!1550)

(assert (=> b!59512 (= lt!24210 lt!24198)))

(declare-fun lt!24209 () ListLongMap!1355)

(assert (=> b!59512 (= lt!24209 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) lt!23782 (zeroValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24202 () (_ BitVec 64))

(assert (=> b!59512 (= lt!24202 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24194 () (_ BitVec 64))

(assert (=> b!59512 (= lt!24194 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!59512 (= lt!24201 (addApplyDifferent!42 lt!24209 lt!24202 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!24194))))

(assert (=> b!59512 (= (apply!66 (+!81 lt!24209 (tuple2!2037 lt!24202 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!24194) (apply!66 lt!24209 lt!24194))))

(declare-fun b!59513 () Bool)

(assert (=> b!59513 (= e!39127 (validKeyInArray!0 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59514 () Bool)

(assert (=> b!59514 (= e!39124 e!39129)))

(declare-fun res!33026 () Bool)

(assert (=> b!59514 (= res!33026 call!4486)))

(assert (=> b!59514 (=> (not res!33026) (not e!39129))))

(declare-fun b!59515 () Bool)

(assert (=> b!59515 (= e!39128 e!39120)))

(assert (=> b!59515 (= c!7626 (and (not (= (bvand lt!23782 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!23782 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!59516 () Bool)

(assert (=> b!59516 (= e!39121 call!4483)))

(declare-fun b!59517 () Bool)

(assert (=> b!59517 (= e!39124 (not call!4486))))

(declare-fun b!59518 () Bool)

(assert (=> b!59518 (= e!39121 call!4482)))

(declare-fun bm!4483 () Bool)

(assert (=> bm!4483 (= call!4484 call!4481)))

(assert (= (and d!11411 c!7624) b!59508))

(assert (= (and d!11411 (not c!7624)) b!59515))

(assert (= (and b!59515 c!7626) b!59501))

(assert (= (and b!59515 (not c!7626)) b!59505))

(assert (= (and b!59505 c!7625) b!59516))

(assert (= (and b!59505 (not c!7625)) b!59518))

(assert (= (or b!59516 b!59518) bm!4478))

(assert (= (or b!59501 bm!4478) bm!4483))

(assert (= (or b!59501 b!59516) bm!4480))

(assert (= (or b!59508 bm!4483) bm!4481))

(assert (= (or b!59508 bm!4480) bm!4482))

(assert (= (and d!11411 res!33032) b!59513))

(assert (= (and d!11411 c!7623) b!59512))

(assert (= (and d!11411 (not c!7623)) b!59499))

(assert (= (and d!11411 res!33029) b!59507))

(assert (= (and b!59507 res!33033) b!59498))

(assert (= (and b!59507 (not res!33027)) b!59502))

(assert (= (and b!59502 res!33030) b!59511))

(assert (= (and b!59507 res!33025) b!59500))

(assert (= (and b!59500 c!7621) b!59514))

(assert (= (and b!59500 (not c!7621)) b!59517))

(assert (= (and b!59514 res!33026) b!59506))

(assert (= (or b!59514 b!59517) bm!4477))

(assert (= (and b!59500 res!33028) b!59504))

(assert (= (and b!59504 c!7622) b!59503))

(assert (= (and b!59504 (not c!7622)) b!59509))

(assert (= (and b!59503 res!33031) b!59510))

(assert (= (or b!59503 b!59509) bm!4479))

(declare-fun b_lambda!2615 () Bool)

(assert (=> (not b_lambda!2615) (not b!59511)))

(assert (=> b!59511 t!4781))

(declare-fun b_and!3597 () Bool)

(assert (= b_and!3593 (and (=> t!4781 result!2381) b_and!3597)))

(assert (=> b!59511 t!4783))

(declare-fun b_and!3599 () Bool)

(assert (= b_and!3595 (and (=> t!4783 result!2383) b_and!3599)))

(declare-fun m!51445 () Bool)

(assert (=> b!59510 m!51445))

(assert (=> d!11411 m!50657))

(assert (=> b!59513 m!50643))

(assert (=> b!59513 m!50643))

(assert (=> b!59513 m!50645))

(declare-fun m!51447 () Bool)

(assert (=> bm!4477 m!51447))

(assert (=> b!59498 m!50643))

(assert (=> b!59498 m!50643))

(assert (=> b!59498 m!50645))

(declare-fun m!51449 () Bool)

(assert (=> b!59512 m!51449))

(declare-fun m!51451 () Bool)

(assert (=> b!59512 m!51451))

(declare-fun m!51453 () Bool)

(assert (=> b!59512 m!51453))

(assert (=> b!59512 m!50369))

(declare-fun m!51455 () Bool)

(assert (=> b!59512 m!51455))

(declare-fun m!51457 () Bool)

(assert (=> b!59512 m!51457))

(declare-fun m!51459 () Bool)

(assert (=> b!59512 m!51459))

(declare-fun m!51461 () Bool)

(assert (=> b!59512 m!51461))

(assert (=> b!59512 m!50369))

(declare-fun m!51463 () Bool)

(assert (=> b!59512 m!51463))

(assert (=> b!59512 m!50643))

(declare-fun m!51465 () Bool)

(assert (=> b!59512 m!51465))

(declare-fun m!51467 () Bool)

(assert (=> b!59512 m!51467))

(declare-fun m!51469 () Bool)

(assert (=> b!59512 m!51469))

(assert (=> b!59512 m!51449))

(declare-fun m!51471 () Bool)

(assert (=> b!59512 m!51471))

(declare-fun m!51473 () Bool)

(assert (=> b!59512 m!51473))

(declare-fun m!51475 () Bool)

(assert (=> b!59512 m!51475))

(assert (=> b!59512 m!51459))

(assert (=> b!59512 m!50369))

(declare-fun m!51477 () Bool)

(assert (=> b!59512 m!51477))

(assert (=> b!59512 m!51471))

(assert (=> b!59512 m!51465))

(declare-fun m!51479 () Bool)

(assert (=> b!59512 m!51479))

(assert (=> b!59511 m!50643))

(declare-fun m!51481 () Bool)

(assert (=> b!59511 m!51481))

(assert (=> b!59511 m!50697))

(assert (=> b!59511 m!50699))

(assert (=> b!59511 m!50697))

(assert (=> b!59511 m!50701))

(assert (=> b!59511 m!50699))

(assert (=> b!59511 m!50643))

(assert (=> bm!4481 m!50369))

(assert (=> bm!4481 m!51477))

(assert (=> b!59502 m!50643))

(assert (=> b!59502 m!50643))

(declare-fun m!51483 () Bool)

(assert (=> b!59502 m!51483))

(declare-fun m!51485 () Bool)

(assert (=> b!59506 m!51485))

(declare-fun m!51487 () Bool)

(assert (=> b!59508 m!51487))

(declare-fun m!51489 () Bool)

(assert (=> bm!4482 m!51489))

(declare-fun m!51491 () Bool)

(assert (=> bm!4479 m!51491))

(assert (=> d!11335 d!11411))

(assert (=> d!11335 d!11347))

(declare-fun d!11413 () Bool)

(assert (=> d!11413 (= (+!81 (getCurrentListMap!389 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!389 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) lt!23782 (zeroValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(assert (=> d!11413 true))

(declare-fun _$8!46 () Unit!1550)

(assert (=> d!11413 (= (choose!317 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) lt!23782 (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2042 newMap!16)) _$8!46)))

(declare-fun bs!2576 () Bool)

(assert (= bs!2576 d!11413))

(assert (=> bs!2576 m!50481))

(assert (=> bs!2576 m!50481))

(assert (=> bs!2576 m!51171))

(assert (=> bs!2576 m!50369))

(assert (=> bs!2576 m!51173))

(assert (=> d!11335 d!11413))

(declare-fun d!11415 () Bool)

(assert (=> d!11415 (= (get!1076 (getValueByKey!122 (toList!693 lt!23702) lt!23686)) (v!2382 (getValueByKey!122 (toList!693 lt!23702) lt!23686)))))

(assert (=> d!11281 d!11415))

(declare-fun d!11417 () Bool)

(declare-fun c!7627 () Bool)

(assert (=> d!11417 (= c!7627 (and ((_ is Cons!1433) (toList!693 lt!23702)) (= (_1!1029 (h!2014 (toList!693 lt!23702))) lt!23686)))))

(declare-fun e!39132 () Option!128)

(assert (=> d!11417 (= (getValueByKey!122 (toList!693 lt!23702) lt!23686) e!39132)))

(declare-fun b!59521 () Bool)

(declare-fun e!39133 () Option!128)

(assert (=> b!59521 (= e!39133 (getValueByKey!122 (t!4770 (toList!693 lt!23702)) lt!23686))))

(declare-fun b!59520 () Bool)

(assert (=> b!59520 (= e!39132 e!39133)))

(declare-fun c!7628 () Bool)

(assert (=> b!59520 (= c!7628 (and ((_ is Cons!1433) (toList!693 lt!23702)) (not (= (_1!1029 (h!2014 (toList!693 lt!23702))) lt!23686))))))

(declare-fun b!59522 () Bool)

(assert (=> b!59522 (= e!39133 None!126)))

(declare-fun b!59519 () Bool)

(assert (=> b!59519 (= e!39132 (Some!127 (_2!1029 (h!2014 (toList!693 lt!23702)))))))

(assert (= (and d!11417 c!7627) b!59519))

(assert (= (and d!11417 (not c!7627)) b!59520))

(assert (= (and b!59520 c!7628) b!59521))

(assert (= (and b!59520 (not c!7628)) b!59522))

(declare-fun m!51493 () Bool)

(assert (=> b!59521 m!51493))

(assert (=> d!11281 d!11417))

(declare-fun d!11419 () Bool)

(assert (=> d!11419 (= (inRange!0 (index!3044 lt!23848) (mask!5925 newMap!16)) (and (bvsge (index!3044 lt!23848) #b00000000000000000000000000000000) (bvslt (index!3044 lt!23848) (bvadd (mask!5925 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> b!59048 d!11419))

(declare-fun b!59523 () Bool)

(declare-fun e!39139 () Bool)

(declare-fun e!39137 () Bool)

(assert (=> b!59523 (= e!39139 e!39137)))

(declare-fun c!7632 () Bool)

(assert (=> b!59523 (= c!7632 (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(declare-fun b!59524 () Bool)

(declare-fun res!33035 () Bool)

(declare-fun e!39138 () Bool)

(assert (=> b!59524 (=> (not res!33035) (not e!39138))))

(declare-fun lt!24217 () ListLongMap!1355)

(assert (=> b!59524 (= res!33035 (not (contains!682 lt!24217 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun call!4487 () ListLongMap!1355)

(declare-fun bm!4484 () Bool)

(assert (=> bm!4484 (= call!4487 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (ite (or c!7466 c!7462) (_values!2025 newMap!16) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (index!3044 lt!23774) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16)))) (mask!5925 newMap!16) (ite c!7466 (ite c!7465 (extraKeys!1929 newMap!16) lt!23782) (extraKeys!1929 newMap!16)) (zeroValue!1958 newMap!16) (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2042 newMap!16)))))

(declare-fun d!11421 () Bool)

(assert (=> d!11421 e!39138))

(declare-fun res!33037 () Bool)

(assert (=> d!11421 (=> (not res!33037) (not e!39138))))

(assert (=> d!11421 (= res!33037 (not (contains!682 lt!24217 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!39135 () ListLongMap!1355)

(assert (=> d!11421 (= lt!24217 e!39135)))

(declare-fun c!7631 () Bool)

(assert (=> d!11421 (= c!7631 (bvsge #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(assert (=> d!11421 (validMask!0 (mask!5925 newMap!16))))

(assert (=> d!11421 (= (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (ite (or c!7466 c!7462) (_values!2025 newMap!16) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (index!3044 lt!23774) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16)))) (mask!5925 newMap!16) (ite c!7466 (ite c!7465 (extraKeys!1929 newMap!16) lt!23782) (extraKeys!1929 newMap!16)) (zeroValue!1958 newMap!16) (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) lt!24217)))

(declare-fun b!59525 () Bool)

(assert (=> b!59525 (= e!39138 e!39139)))

(declare-fun c!7629 () Bool)

(declare-fun e!39140 () Bool)

(assert (=> b!59525 (= c!7629 e!39140)))

(declare-fun res!33036 () Bool)

(assert (=> b!59525 (=> (not res!33036) (not e!39140))))

(assert (=> b!59525 (= res!33036 (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(declare-fun b!59526 () Bool)

(declare-fun e!39136 () ListLongMap!1355)

(assert (=> b!59526 (= e!39136 call!4487)))

(declare-fun b!59527 () Bool)

(assert (=> b!59527 (= e!39135 e!39136)))

(declare-fun c!7630 () Bool)

(assert (=> b!59527 (= c!7630 (validKeyInArray!0 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59528 () Bool)

(assert (=> b!59528 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(assert (=> b!59528 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2000 (ite (or c!7466 c!7462) (_values!2025 newMap!16) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (index!3044 lt!23774) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16)))))))))

(declare-fun e!39134 () Bool)

(assert (=> b!59528 (= e!39134 (= (apply!66 lt!24217 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)) (get!1073 (select (arr!1769 (ite (or c!7466 c!7462) (_values!2025 newMap!16) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (index!3044 lt!23774) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!59529 () Bool)

(declare-fun lt!24214 () Unit!1550)

(declare-fun lt!24215 () Unit!1550)

(assert (=> b!59529 (= lt!24214 lt!24215)))

(declare-fun lt!24218 () (_ BitVec 64))

(declare-fun lt!24219 () (_ BitVec 64))

(declare-fun lt!24220 () ListLongMap!1355)

(declare-fun lt!24216 () V!2841)

(assert (=> b!59529 (not (contains!682 (+!81 lt!24220 (tuple2!2037 lt!24218 lt!24216)) lt!24219))))

(assert (=> b!59529 (= lt!24215 (addStillNotContains!16 lt!24220 lt!24218 lt!24216 lt!24219))))

(assert (=> b!59529 (= lt!24219 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!59529 (= lt!24216 (get!1073 (select (arr!1769 (ite (or c!7466 c!7462) (_values!2025 newMap!16) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (index!3044 lt!23774) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!59529 (= lt!24218 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!59529 (= lt!24220 call!4487)))

(assert (=> b!59529 (= e!39136 (+!81 call!4487 (tuple2!2037 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000) (get!1073 (select (arr!1769 (ite (or c!7466 c!7462) (_values!2025 newMap!16) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (index!3044 lt!23774) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!59530 () Bool)

(assert (=> b!59530 (= e!39140 (validKeyInArray!0 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59530 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!59531 () Bool)

(assert (=> b!59531 (= e!39137 (isEmpty!297 lt!24217))))

(declare-fun b!59532 () Bool)

(assert (=> b!59532 (= e!39135 (ListLongMap!1356 Nil!1434))))

(declare-fun b!59533 () Bool)

(assert (=> b!59533 (= e!39137 (= lt!24217 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (ite (or c!7466 c!7462) (_values!2025 newMap!16) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (index!3044 lt!23774) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16)))) (mask!5925 newMap!16) (ite c!7466 (ite c!7465 (extraKeys!1929 newMap!16) lt!23782) (extraKeys!1929 newMap!16)) (zeroValue!1958 newMap!16) (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2042 newMap!16))))))

(declare-fun b!59534 () Bool)

(assert (=> b!59534 (= e!39139 e!39134)))

(assert (=> b!59534 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(declare-fun res!33034 () Bool)

(assert (=> b!59534 (= res!33034 (contains!682 lt!24217 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59534 (=> (not res!33034) (not e!39134))))

(assert (= (and d!11421 c!7631) b!59532))

(assert (= (and d!11421 (not c!7631)) b!59527))

(assert (= (and b!59527 c!7630) b!59529))

(assert (= (and b!59527 (not c!7630)) b!59526))

(assert (= (or b!59529 b!59526) bm!4484))

(assert (= (and d!11421 res!33037) b!59524))

(assert (= (and b!59524 res!33035) b!59525))

(assert (= (and b!59525 res!33036) b!59530))

(assert (= (and b!59525 c!7629) b!59534))

(assert (= (and b!59525 (not c!7629)) b!59523))

(assert (= (and b!59534 res!33034) b!59528))

(assert (= (and b!59523 c!7632) b!59533))

(assert (= (and b!59523 (not c!7632)) b!59531))

(declare-fun b_lambda!2617 () Bool)

(assert (=> (not b_lambda!2617) (not b!59528)))

(assert (=> b!59528 t!4781))

(declare-fun b_and!3601 () Bool)

(assert (= b_and!3597 (and (=> t!4781 result!2381) b_and!3601)))

(assert (=> b!59528 t!4783))

(declare-fun b_and!3603 () Bool)

(assert (= b_and!3599 (and (=> t!4783 result!2383) b_and!3603)))

(declare-fun b_lambda!2619 () Bool)

(assert (=> (not b_lambda!2619) (not b!59529)))

(assert (=> b!59529 t!4781))

(declare-fun b_and!3605 () Bool)

(assert (= b_and!3601 (and (=> t!4781 result!2381) b_and!3605)))

(assert (=> b!59529 t!4783))

(declare-fun b_and!3607 () Bool)

(assert (= b_and!3603 (and (=> t!4783 result!2383) b_and!3607)))

(declare-fun m!51495 () Bool)

(assert (=> d!11421 m!51495))

(assert (=> d!11421 m!50657))

(assert (=> b!59528 m!51135))

(assert (=> b!59528 m!50643))

(assert (=> b!59528 m!50643))

(declare-fun m!51497 () Bool)

(assert (=> b!59528 m!51497))

(assert (=> b!59528 m!50697))

(assert (=> b!59528 m!51135))

(assert (=> b!59528 m!50697))

(assert (=> b!59528 m!51137))

(declare-fun m!51499 () Bool)

(assert (=> b!59524 m!51499))

(declare-fun m!51501 () Bool)

(assert (=> b!59531 m!51501))

(declare-fun m!51503 () Bool)

(assert (=> b!59529 m!51503))

(assert (=> b!59529 m!51135))

(assert (=> b!59529 m!50643))

(declare-fun m!51505 () Bool)

(assert (=> b!59529 m!51505))

(declare-fun m!51507 () Bool)

(assert (=> b!59529 m!51507))

(declare-fun m!51509 () Bool)

(assert (=> b!59529 m!51509))

(assert (=> b!59529 m!51507))

(assert (=> b!59529 m!50697))

(assert (=> b!59529 m!51135))

(assert (=> b!59529 m!50697))

(assert (=> b!59529 m!51137))

(assert (=> b!59530 m!50643))

(assert (=> b!59530 m!50643))

(assert (=> b!59530 m!50645))

(declare-fun m!51511 () Bool)

(assert (=> bm!4484 m!51511))

(assert (=> b!59534 m!50643))

(assert (=> b!59534 m!50643))

(declare-fun m!51513 () Bool)

(assert (=> b!59534 m!51513))

(assert (=> b!59533 m!51511))

(assert (=> b!59527 m!50643))

(assert (=> b!59527 m!50643))

(assert (=> b!59527 m!50645))

(assert (=> bm!4447 d!11421))

(declare-fun d!11423 () Bool)

(assert (=> d!11423 (= (content!63 Nil!1433) ((as const (Array (_ BitVec 64) Bool)) false))))

(assert (=> d!11239 d!11423))

(assert (=> bm!4420 d!11331))

(declare-fun d!11425 () Bool)

(assert (=> d!11425 (isDefined!76 (getValueByKey!122 (toList!693 call!4384) (select (arr!1768 (_keys!3665 newMap!16)) (index!3044 lt!23774))))))

(declare-fun lt!24221 () Unit!1550)

(assert (=> d!11425 (= lt!24221 (choose!315 (toList!693 call!4384) (select (arr!1768 (_keys!3665 newMap!16)) (index!3044 lt!23774))))))

(declare-fun e!39141 () Bool)

(assert (=> d!11425 e!39141))

(declare-fun res!33038 () Bool)

(assert (=> d!11425 (=> (not res!33038) (not e!39141))))

(assert (=> d!11425 (= res!33038 (isStrictlySorted!279 (toList!693 call!4384)))))

(assert (=> d!11425 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 call!4384) (select (arr!1768 (_keys!3665 newMap!16)) (index!3044 lt!23774))) lt!24221)))

(declare-fun b!59535 () Bool)

(assert (=> b!59535 (= e!39141 (containsKey!126 (toList!693 call!4384) (select (arr!1768 (_keys!3665 newMap!16)) (index!3044 lt!23774))))))

(assert (= (and d!11425 res!33038) b!59535))

(assert (=> d!11425 m!50575))

(assert (=> d!11425 m!50741))

(assert (=> d!11425 m!50741))

(assert (=> d!11425 m!50743))

(assert (=> d!11425 m!50575))

(declare-fun m!51515 () Bool)

(assert (=> d!11425 m!51515))

(declare-fun m!51517 () Bool)

(assert (=> d!11425 m!51517))

(assert (=> b!59535 m!50575))

(assert (=> b!59535 m!50737))

(assert (=> b!59058 d!11425))

(declare-fun d!11427 () Bool)

(assert (=> d!11427 (= (isDefined!76 (getValueByKey!122 (toList!693 call!4384) (select (arr!1768 (_keys!3665 newMap!16)) (index!3044 lt!23774)))) (not (isEmpty!298 (getValueByKey!122 (toList!693 call!4384) (select (arr!1768 (_keys!3665 newMap!16)) (index!3044 lt!23774))))))))

(declare-fun bs!2577 () Bool)

(assert (= bs!2577 d!11427))

(assert (=> bs!2577 m!50741))

(declare-fun m!51519 () Bool)

(assert (=> bs!2577 m!51519))

(assert (=> b!59058 d!11427))

(declare-fun d!11429 () Bool)

(declare-fun c!7633 () Bool)

(assert (=> d!11429 (= c!7633 (and ((_ is Cons!1433) (toList!693 call!4384)) (= (_1!1029 (h!2014 (toList!693 call!4384))) (select (arr!1768 (_keys!3665 newMap!16)) (index!3044 lt!23774)))))))

(declare-fun e!39142 () Option!128)

(assert (=> d!11429 (= (getValueByKey!122 (toList!693 call!4384) (select (arr!1768 (_keys!3665 newMap!16)) (index!3044 lt!23774))) e!39142)))

(declare-fun b!59538 () Bool)

(declare-fun e!39143 () Option!128)

(assert (=> b!59538 (= e!39143 (getValueByKey!122 (t!4770 (toList!693 call!4384)) (select (arr!1768 (_keys!3665 newMap!16)) (index!3044 lt!23774))))))

(declare-fun b!59537 () Bool)

(assert (=> b!59537 (= e!39142 e!39143)))

(declare-fun c!7634 () Bool)

(assert (=> b!59537 (= c!7634 (and ((_ is Cons!1433) (toList!693 call!4384)) (not (= (_1!1029 (h!2014 (toList!693 call!4384))) (select (arr!1768 (_keys!3665 newMap!16)) (index!3044 lt!23774))))))))

(declare-fun b!59539 () Bool)

(assert (=> b!59539 (= e!39143 None!126)))

(declare-fun b!59536 () Bool)

(assert (=> b!59536 (= e!39142 (Some!127 (_2!1029 (h!2014 (toList!693 call!4384)))))))

(assert (= (and d!11429 c!7633) b!59536))

(assert (= (and d!11429 (not c!7633)) b!59537))

(assert (= (and b!59537 c!7634) b!59538))

(assert (= (and b!59537 (not c!7634)) b!59539))

(assert (=> b!59538 m!50575))

(declare-fun m!51521 () Bool)

(assert (=> b!59538 m!51521))

(assert (=> b!59058 d!11429))

(assert (=> b!59262 d!11253))

(declare-fun d!11431 () Bool)

(assert (=> d!11431 (= (+!81 (getCurrentListMap!389 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!389 (_keys!3665 newMap!16) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (index!3044 lt!23774) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16))) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(assert (=> d!11431 true))

(declare-fun _$5!62 () Unit!1550)

(assert (=> d!11431 (= (choose!312 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (index!3044 lt!23774) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2042 newMap!16)) _$5!62)))

(declare-fun bs!2578 () Bool)

(assert (= bs!2578 d!11431))

(assert (=> bs!2578 m!50481))

(assert (=> bs!2578 m!50481))

(assert (=> bs!2578 m!50753))

(assert (=> bs!2578 m!50559))

(assert (=> bs!2578 m!50755))

(assert (=> d!11245 d!11431))

(assert (=> d!11245 d!11347))

(declare-fun d!11433 () Bool)

(declare-fun e!39145 () Bool)

(assert (=> d!11433 e!39145))

(declare-fun res!33039 () Bool)

(assert (=> d!11433 (=> res!33039 e!39145)))

(declare-fun lt!24222 () Bool)

(assert (=> d!11433 (= res!33039 (not lt!24222))))

(declare-fun lt!24224 () Bool)

(assert (=> d!11433 (= lt!24222 lt!24224)))

(declare-fun lt!24223 () Unit!1550)

(declare-fun e!39144 () Unit!1550)

(assert (=> d!11433 (= lt!24223 e!39144)))

(declare-fun c!7635 () Bool)

(assert (=> d!11433 (= c!7635 lt!24224)))

(assert (=> d!11433 (= lt!24224 (containsKey!126 (toList!693 lt!23838) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11433 (= (contains!682 lt!23838 #b0000000000000000000000000000000000000000000000000000000000000000) lt!24222)))

(declare-fun b!59540 () Bool)

(declare-fun lt!24225 () Unit!1550)

(assert (=> b!59540 (= e!39144 lt!24225)))

(assert (=> b!59540 (= lt!24225 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 lt!23838) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59540 (isDefined!76 (getValueByKey!122 (toList!693 lt!23838) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59541 () Bool)

(declare-fun Unit!1579 () Unit!1550)

(assert (=> b!59541 (= e!39144 Unit!1579)))

(declare-fun b!59542 () Bool)

(assert (=> b!59542 (= e!39145 (isDefined!76 (getValueByKey!122 (toList!693 lt!23838) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11433 c!7635) b!59540))

(assert (= (and d!11433 (not c!7635)) b!59541))

(assert (= (and d!11433 (not res!33039)) b!59542))

(declare-fun m!51523 () Bool)

(assert (=> d!11433 m!51523))

(declare-fun m!51525 () Bool)

(assert (=> b!59540 m!51525))

(declare-fun m!51527 () Bool)

(assert (=> b!59540 m!51527))

(assert (=> b!59540 m!51527))

(declare-fun m!51529 () Bool)

(assert (=> b!59540 m!51529))

(assert (=> b!59542 m!51527))

(assert (=> b!59542 m!51527))

(assert (=> b!59542 m!51529))

(assert (=> bm!4405 d!11433))

(declare-fun c!7636 () Bool)

(declare-fun d!11435 () Bool)

(assert (=> d!11435 (= c!7636 (and ((_ is Cons!1433) (toList!693 lt!23979)) (= (_1!1029 (h!2014 (toList!693 lt!23979))) (_1!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))))

(declare-fun e!39146 () Option!128)

(assert (=> d!11435 (= (getValueByKey!122 (toList!693 lt!23979) (_1!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))) e!39146)))

(declare-fun e!39147 () Option!128)

(declare-fun b!59545 () Bool)

(assert (=> b!59545 (= e!39147 (getValueByKey!122 (t!4770 (toList!693 lt!23979)) (_1!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(declare-fun b!59544 () Bool)

(assert (=> b!59544 (= e!39146 e!39147)))

(declare-fun c!7637 () Bool)

(assert (=> b!59544 (= c!7637 (and ((_ is Cons!1433) (toList!693 lt!23979)) (not (= (_1!1029 (h!2014 (toList!693 lt!23979))) (_1!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))))

(declare-fun b!59546 () Bool)

(assert (=> b!59546 (= e!39147 None!126)))

(declare-fun b!59543 () Bool)

(assert (=> b!59543 (= e!39146 (Some!127 (_2!1029 (h!2014 (toList!693 lt!23979)))))))

(assert (= (and d!11435 c!7636) b!59543))

(assert (= (and d!11435 (not c!7636)) b!59544))

(assert (= (and b!59544 c!7637) b!59545))

(assert (= (and b!59544 (not c!7637)) b!59546))

(declare-fun m!51531 () Bool)

(assert (=> b!59545 m!51531))

(assert (=> b!59154 d!11435))

(declare-fun d!11437 () Bool)

(declare-fun e!39149 () Bool)

(assert (=> d!11437 e!39149))

(declare-fun res!33040 () Bool)

(assert (=> d!11437 (=> res!33040 e!39149)))

(declare-fun lt!24226 () Bool)

(assert (=> d!11437 (= res!33040 (not lt!24226))))

(declare-fun lt!24228 () Bool)

(assert (=> d!11437 (= lt!24226 lt!24228)))

(declare-fun lt!24227 () Unit!1550)

(declare-fun e!39148 () Unit!1550)

(assert (=> d!11437 (= lt!24227 e!39148)))

(declare-fun c!7638 () Bool)

(assert (=> d!11437 (= c!7638 lt!24228)))

(assert (=> d!11437 (= lt!24228 (containsKey!126 (toList!693 lt!24020) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!11437 (= (contains!682 lt!24020 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!24226)))

(declare-fun b!59547 () Bool)

(declare-fun lt!24229 () Unit!1550)

(assert (=> b!59547 (= e!39148 lt!24229)))

(assert (=> b!59547 (= lt!24229 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 lt!24020) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!59547 (isDefined!76 (getValueByKey!122 (toList!693 lt!24020) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!59548 () Bool)

(declare-fun Unit!1580 () Unit!1550)

(assert (=> b!59548 (= e!39148 Unit!1580)))

(declare-fun b!59549 () Bool)

(assert (=> b!59549 (= e!39149 (isDefined!76 (getValueByKey!122 (toList!693 lt!24020) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!11437 c!7638) b!59547))

(assert (= (and d!11437 (not c!7638)) b!59548))

(assert (= (and d!11437 (not res!33040)) b!59549))

(assert (=> d!11437 m!50485))

(declare-fun m!51533 () Bool)

(assert (=> d!11437 m!51533))

(assert (=> b!59547 m!50485))

(declare-fun m!51535 () Bool)

(assert (=> b!59547 m!51535))

(assert (=> b!59547 m!50485))

(declare-fun m!51537 () Bool)

(assert (=> b!59547 m!51537))

(assert (=> b!59547 m!51537))

(declare-fun m!51539 () Bool)

(assert (=> b!59547 m!51539))

(assert (=> b!59549 m!50485))

(assert (=> b!59549 m!51537))

(assert (=> b!59549 m!51537))

(assert (=> b!59549 m!51539))

(assert (=> b!59212 d!11437))

(declare-fun d!11439 () Bool)

(assert (=> d!11439 (= (get!1076 (getValueByKey!122 (toList!693 (+!81 lt!23702 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!23686)) (v!2382 (getValueByKey!122 (toList!693 (+!81 lt!23702 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!23686)))))

(assert (=> d!11285 d!11439))

(declare-fun d!11441 () Bool)

(declare-fun c!7639 () Bool)

(assert (=> d!11441 (= c!7639 (and ((_ is Cons!1433) (toList!693 (+!81 lt!23702 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))) (= (_1!1029 (h!2014 (toList!693 (+!81 lt!23702 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))) lt!23686)))))

(declare-fun e!39150 () Option!128)

(assert (=> d!11441 (= (getValueByKey!122 (toList!693 (+!81 lt!23702 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!23686) e!39150)))

(declare-fun b!59552 () Bool)

(declare-fun e!39151 () Option!128)

(assert (=> b!59552 (= e!39151 (getValueByKey!122 (t!4770 (toList!693 (+!81 lt!23702 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))) lt!23686))))

(declare-fun b!59551 () Bool)

(assert (=> b!59551 (= e!39150 e!39151)))

(declare-fun c!7640 () Bool)

(assert (=> b!59551 (= c!7640 (and ((_ is Cons!1433) (toList!693 (+!81 lt!23702 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))) (not (= (_1!1029 (h!2014 (toList!693 (+!81 lt!23702 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))) lt!23686))))))

(declare-fun b!59553 () Bool)

(assert (=> b!59553 (= e!39151 None!126)))

(declare-fun b!59550 () Bool)

(assert (=> b!59550 (= e!39150 (Some!127 (_2!1029 (h!2014 (toList!693 (+!81 lt!23702 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))))

(assert (= (and d!11441 c!7639) b!59550))

(assert (= (and d!11441 (not c!7639)) b!59551))

(assert (= (and b!59551 c!7640) b!59552))

(assert (= (and b!59551 (not c!7640)) b!59553))

(declare-fun m!51541 () Bool)

(assert (=> b!59552 m!51541))

(assert (=> d!11285 d!11441))

(declare-fun d!11443 () Bool)

(declare-fun e!39153 () Bool)

(assert (=> d!11443 e!39153))

(declare-fun res!33041 () Bool)

(assert (=> d!11443 (=> res!33041 e!39153)))

(declare-fun lt!24230 () Bool)

(assert (=> d!11443 (= res!33041 (not lt!24230))))

(declare-fun lt!24232 () Bool)

(assert (=> d!11443 (= lt!24230 lt!24232)))

(declare-fun lt!24231 () Unit!1550)

(declare-fun e!39152 () Unit!1550)

(assert (=> d!11443 (= lt!24231 e!39152)))

(declare-fun c!7641 () Bool)

(assert (=> d!11443 (= c!7641 lt!24232)))

(assert (=> d!11443 (= lt!24232 (containsKey!126 (toList!693 lt!24042) (_1!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(assert (=> d!11443 (= (contains!682 lt!24042 (_1!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!24230)))

(declare-fun b!59554 () Bool)

(declare-fun lt!24233 () Unit!1550)

(assert (=> b!59554 (= e!39152 lt!24233)))

(assert (=> b!59554 (= lt!24233 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 lt!24042) (_1!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(assert (=> b!59554 (isDefined!76 (getValueByKey!122 (toList!693 lt!24042) (_1!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun b!59555 () Bool)

(declare-fun Unit!1581 () Unit!1550)

(assert (=> b!59555 (= e!39152 Unit!1581)))

(declare-fun b!59556 () Bool)

(assert (=> b!59556 (= e!39153 (isDefined!76 (getValueByKey!122 (toList!693 lt!24042) (_1!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(assert (= (and d!11443 c!7641) b!59554))

(assert (= (and d!11443 (not c!7641)) b!59555))

(assert (= (and d!11443 (not res!33041)) b!59556))

(declare-fun m!51543 () Bool)

(assert (=> d!11443 m!51543))

(declare-fun m!51545 () Bool)

(assert (=> b!59554 m!51545))

(assert (=> b!59554 m!51013))

(assert (=> b!59554 m!51013))

(declare-fun m!51547 () Bool)

(assert (=> b!59554 m!51547))

(assert (=> b!59556 m!51013))

(assert (=> b!59556 m!51013))

(assert (=> b!59556 m!51547))

(assert (=> d!11295 d!11443))

(declare-fun c!7642 () Bool)

(declare-fun d!11445 () Bool)

(assert (=> d!11445 (= c!7642 (and ((_ is Cons!1433) lt!24043) (= (_1!1029 (h!2014 lt!24043)) (_1!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(declare-fun e!39154 () Option!128)

(assert (=> d!11445 (= (getValueByKey!122 lt!24043 (_1!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) e!39154)))

(declare-fun e!39155 () Option!128)

(declare-fun b!59559 () Bool)

(assert (=> b!59559 (= e!39155 (getValueByKey!122 (t!4770 lt!24043) (_1!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun b!59558 () Bool)

(assert (=> b!59558 (= e!39154 e!39155)))

(declare-fun c!7643 () Bool)

(assert (=> b!59558 (= c!7643 (and ((_ is Cons!1433) lt!24043) (not (= (_1!1029 (h!2014 lt!24043)) (_1!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))))

(declare-fun b!59560 () Bool)

(assert (=> b!59560 (= e!39155 None!126)))

(declare-fun b!59557 () Bool)

(assert (=> b!59557 (= e!39154 (Some!127 (_2!1029 (h!2014 lt!24043))))))

(assert (= (and d!11445 c!7642) b!59557))

(assert (= (and d!11445 (not c!7642)) b!59558))

(assert (= (and b!59558 c!7643) b!59559))

(assert (= (and b!59558 (not c!7643)) b!59560))

(declare-fun m!51549 () Bool)

(assert (=> b!59559 m!51549))

(assert (=> d!11295 d!11445))

(declare-fun d!11447 () Bool)

(assert (=> d!11447 (= (getValueByKey!122 lt!24043 (_1!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) (Some!127 (_2!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun lt!24234 () Unit!1550)

(assert (=> d!11447 (= lt!24234 (choose!318 lt!24043 (_1!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun e!39156 () Bool)

(assert (=> d!11447 e!39156))

(declare-fun res!33042 () Bool)

(assert (=> d!11447 (=> (not res!33042) (not e!39156))))

(assert (=> d!11447 (= res!33042 (isStrictlySorted!279 lt!24043))))

(assert (=> d!11447 (= (lemmaContainsTupThenGetReturnValue!42 lt!24043 (_1!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!24234)))

(declare-fun b!59561 () Bool)

(declare-fun res!33043 () Bool)

(assert (=> b!59561 (=> (not res!33043) (not e!39156))))

(assert (=> b!59561 (= res!33043 (containsKey!126 lt!24043 (_1!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun b!59562 () Bool)

(assert (=> b!59562 (= e!39156 (contains!684 lt!24043 (tuple2!2037 (_1!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(assert (= (and d!11447 res!33042) b!59561))

(assert (= (and b!59561 res!33043) b!59562))

(assert (=> d!11447 m!51007))

(declare-fun m!51551 () Bool)

(assert (=> d!11447 m!51551))

(declare-fun m!51553 () Bool)

(assert (=> d!11447 m!51553))

(declare-fun m!51555 () Bool)

(assert (=> b!59561 m!51555))

(declare-fun m!51557 () Bool)

(assert (=> b!59562 m!51557))

(assert (=> d!11295 d!11447))

(declare-fun b!59563 () Bool)

(declare-fun e!39157 () List!1437)

(assert (=> b!59563 (= e!39157 (insertStrictlySorted!45 (t!4770 (toList!693 lt!23700)) (_1!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun b!59564 () Bool)

(declare-fun e!39160 () List!1437)

(declare-fun call!4488 () List!1437)

(assert (=> b!59564 (= e!39160 call!4488)))

(declare-fun b!59565 () Bool)

(declare-fun e!39158 () List!1437)

(assert (=> b!59565 (= e!39160 e!39158)))

(declare-fun c!7647 () Bool)

(assert (=> b!59565 (= c!7647 (and ((_ is Cons!1433) (toList!693 lt!23700)) (= (_1!1029 (h!2014 (toList!693 lt!23700))) (_1!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(declare-fun b!59566 () Bool)

(declare-fun call!4489 () List!1437)

(assert (=> b!59566 (= e!39158 call!4489)))

(declare-fun c!7645 () Bool)

(declare-fun bm!4486 () Bool)

(assert (=> bm!4486 (= call!4488 ($colon$colon!59 e!39157 (ite c!7645 (h!2014 (toList!693 lt!23700)) (tuple2!2037 (_1!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))))

(declare-fun c!7646 () Bool)

(assert (=> bm!4486 (= c!7646 c!7645)))

(declare-fun lt!24235 () List!1437)

(declare-fun b!59567 () Bool)

(declare-fun e!39161 () Bool)

(assert (=> b!59567 (= e!39161 (contains!684 lt!24235 (tuple2!2037 (_1!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(declare-fun b!59568 () Bool)

(declare-fun e!39159 () List!1437)

(declare-fun call!4490 () List!1437)

(assert (=> b!59568 (= e!39159 call!4490)))

(declare-fun c!7644 () Bool)

(declare-fun b!59569 () Bool)

(assert (=> b!59569 (= e!39157 (ite c!7647 (t!4770 (toList!693 lt!23700)) (ite c!7644 (Cons!1433 (h!2014 (toList!693 lt!23700)) (t!4770 (toList!693 lt!23700))) Nil!1434)))))

(declare-fun bm!4485 () Bool)

(assert (=> bm!4485 (= call!4490 call!4489)))

(declare-fun d!11449 () Bool)

(assert (=> d!11449 e!39161))

(declare-fun res!33044 () Bool)

(assert (=> d!11449 (=> (not res!33044) (not e!39161))))

(assert (=> d!11449 (= res!33044 (isStrictlySorted!279 lt!24235))))

(assert (=> d!11449 (= lt!24235 e!39160)))

(assert (=> d!11449 (= c!7645 (and ((_ is Cons!1433) (toList!693 lt!23700)) (bvslt (_1!1029 (h!2014 (toList!693 lt!23700))) (_1!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(assert (=> d!11449 (isStrictlySorted!279 (toList!693 lt!23700))))

(assert (=> d!11449 (= (insertStrictlySorted!45 (toList!693 lt!23700) (_1!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!24235)))

(declare-fun bm!4487 () Bool)

(assert (=> bm!4487 (= call!4489 call!4488)))

(declare-fun b!59570 () Bool)

(assert (=> b!59570 (= e!39159 call!4490)))

(declare-fun b!59571 () Bool)

(assert (=> b!59571 (= c!7644 (and ((_ is Cons!1433) (toList!693 lt!23700)) (bvsgt (_1!1029 (h!2014 (toList!693 lt!23700))) (_1!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(assert (=> b!59571 (= e!39158 e!39159)))

(declare-fun b!59572 () Bool)

(declare-fun res!33045 () Bool)

(assert (=> b!59572 (=> (not res!33045) (not e!39161))))

(assert (=> b!59572 (= res!33045 (containsKey!126 lt!24235 (_1!1029 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(assert (= (and d!11449 c!7645) b!59564))

(assert (= (and d!11449 (not c!7645)) b!59565))

(assert (= (and b!59565 c!7647) b!59566))

(assert (= (and b!59565 (not c!7647)) b!59571))

(assert (= (and b!59571 c!7644) b!59570))

(assert (= (and b!59571 (not c!7644)) b!59568))

(assert (= (or b!59570 b!59568) bm!4485))

(assert (= (or b!59566 bm!4485) bm!4487))

(assert (= (or b!59564 bm!4487) bm!4486))

(assert (= (and bm!4486 c!7646) b!59563))

(assert (= (and bm!4486 (not c!7646)) b!59569))

(assert (= (and d!11449 res!33044) b!59572))

(assert (= (and b!59572 res!33045) b!59567))

(declare-fun m!51559 () Bool)

(assert (=> b!59572 m!51559))

(declare-fun m!51561 () Bool)

(assert (=> d!11449 m!51561))

(declare-fun m!51563 () Bool)

(assert (=> d!11449 m!51563))

(declare-fun m!51565 () Bool)

(assert (=> b!59567 m!51565))

(declare-fun m!51567 () Bool)

(assert (=> b!59563 m!51567))

(declare-fun m!51569 () Bool)

(assert (=> bm!4486 m!51569))

(assert (=> d!11295 d!11449))

(declare-fun lt!24236 () Bool)

(declare-fun d!11451 () Bool)

(assert (=> d!11451 (= lt!24236 (select (content!64 (toList!693 lt!24038)) (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))))

(declare-fun e!39162 () Bool)

(assert (=> d!11451 (= lt!24236 e!39162)))

(declare-fun res!33047 () Bool)

(assert (=> d!11451 (=> (not res!33047) (not e!39162))))

(assert (=> d!11451 (= res!33047 ((_ is Cons!1433) (toList!693 lt!24038)))))

(assert (=> d!11451 (= (contains!684 (toList!693 lt!24038) (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))) lt!24236)))

(declare-fun b!59573 () Bool)

(declare-fun e!39163 () Bool)

(assert (=> b!59573 (= e!39162 e!39163)))

(declare-fun res!33046 () Bool)

(assert (=> b!59573 (=> res!33046 e!39163)))

(assert (=> b!59573 (= res!33046 (= (h!2014 (toList!693 lt!24038)) (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))))

(declare-fun b!59574 () Bool)

(assert (=> b!59574 (= e!39163 (contains!684 (t!4770 (toList!693 lt!24038)) (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))))

(assert (= (and d!11451 res!33047) b!59573))

(assert (= (and b!59573 (not res!33046)) b!59574))

(declare-fun m!51571 () Bool)

(assert (=> d!11451 m!51571))

(declare-fun m!51573 () Bool)

(assert (=> d!11451 m!51573))

(declare-fun m!51575 () Bool)

(assert (=> b!59574 m!51575))

(assert (=> b!59223 d!11451))

(declare-fun c!7648 () Bool)

(declare-fun d!11453 () Bool)

(assert (=> d!11453 (= c!7648 (and ((_ is Cons!1433) (toList!693 lt!24106)) (= (_1!1029 (h!2014 (toList!693 lt!24106))) (_1!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun e!39164 () Option!128)

(assert (=> d!11453 (= (getValueByKey!122 (toList!693 lt!24106) (_1!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!39164)))

(declare-fun e!39165 () Option!128)

(declare-fun b!59577 () Bool)

(assert (=> b!59577 (= e!39165 (getValueByKey!122 (t!4770 (toList!693 lt!24106)) (_1!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!59576 () Bool)

(assert (=> b!59576 (= e!39164 e!39165)))

(declare-fun c!7649 () Bool)

(assert (=> b!59576 (= c!7649 (and ((_ is Cons!1433) (toList!693 lt!24106)) (not (= (_1!1029 (h!2014 (toList!693 lt!24106))) (_1!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun b!59578 () Bool)

(assert (=> b!59578 (= e!39165 None!126)))

(declare-fun b!59575 () Bool)

(assert (=> b!59575 (= e!39164 (Some!127 (_2!1029 (h!2014 (toList!693 lt!24106)))))))

(assert (= (and d!11453 c!7648) b!59575))

(assert (= (and d!11453 (not c!7648)) b!59576))

(assert (= (and b!59576 c!7649) b!59577))

(assert (= (and b!59576 (not c!7649)) b!59578))

(declare-fun m!51577 () Bool)

(assert (=> b!59577 m!51577))

(assert (=> b!59323 d!11453))

(declare-fun d!11455 () Bool)

(assert (=> d!11455 (= (apply!66 lt!23838 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1076 (getValueByKey!122 (toList!693 lt!23838) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2579 () Bool)

(assert (= bs!2579 d!11455))

(assert (=> bs!2579 m!51265))

(assert (=> bs!2579 m!51265))

(declare-fun m!51579 () Bool)

(assert (=> bs!2579 m!51579))

(assert (=> b!59032 d!11455))

(assert (=> b!59208 d!11343))

(declare-fun d!11457 () Bool)

(declare-fun res!33048 () Bool)

(declare-fun e!39166 () Bool)

(assert (=> d!11457 (=> res!33048 e!39166)))

(assert (=> d!11457 (= res!33048 (and ((_ is Cons!1433) (toList!693 lt!23704)) (= (_1!1029 (h!2014 (toList!693 lt!23704))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!11457 (= (containsKey!126 (toList!693 lt!23704) #b1000000000000000000000000000000000000000000000000000000000000000) e!39166)))

(declare-fun b!59579 () Bool)

(declare-fun e!39167 () Bool)

(assert (=> b!59579 (= e!39166 e!39167)))

(declare-fun res!33049 () Bool)

(assert (=> b!59579 (=> (not res!33049) (not e!39167))))

(assert (=> b!59579 (= res!33049 (and (or (not ((_ is Cons!1433) (toList!693 lt!23704))) (bvsle (_1!1029 (h!2014 (toList!693 lt!23704))) #b1000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1433) (toList!693 lt!23704)) (bvslt (_1!1029 (h!2014 (toList!693 lt!23704))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!59580 () Bool)

(assert (=> b!59580 (= e!39167 (containsKey!126 (t!4770 (toList!693 lt!23704)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!11457 (not res!33048)) b!59579))

(assert (= (and b!59579 res!33049) b!59580))

(declare-fun m!51581 () Bool)

(assert (=> b!59580 m!51581))

(assert (=> d!11325 d!11457))

(declare-fun d!11459 () Bool)

(declare-fun res!33050 () Bool)

(declare-fun e!39168 () Bool)

(assert (=> d!11459 (=> res!33050 e!39168)))

(assert (=> d!11459 (= res!33050 (= (select (arr!1768 (_keys!3665 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(assert (=> d!11459 (= (arrayContainsKey!0 (_keys!3665 newMap!16) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) e!39168)))

(declare-fun b!59581 () Bool)

(declare-fun e!39169 () Bool)

(assert (=> b!59581 (= e!39168 e!39169)))

(declare-fun res!33051 () Bool)

(assert (=> b!59581 (=> (not res!33051) (not e!39169))))

(assert (=> b!59581 (= res!33051 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!1999 (_keys!3665 newMap!16))))))

(declare-fun b!59582 () Bool)

(assert (=> b!59582 (= e!39169 (arrayContainsKey!0 (_keys!3665 newMap!16) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!11459 (not res!33050)) b!59581))

(assert (= (and b!59581 res!33051) b!59582))

(declare-fun m!51583 () Bool)

(assert (=> d!11459 m!51583))

(assert (=> b!59582 m!50353))

(declare-fun m!51585 () Bool)

(assert (=> b!59582 m!51585))

(assert (=> b!59326 d!11459))

(declare-fun d!11461 () Bool)

(declare-fun e!39171 () Bool)

(assert (=> d!11461 e!39171))

(declare-fun res!33052 () Bool)

(assert (=> d!11461 (=> res!33052 e!39171)))

(declare-fun lt!24237 () Bool)

(assert (=> d!11461 (= res!33052 (not lt!24237))))

(declare-fun lt!24239 () Bool)

(assert (=> d!11461 (= lt!24237 lt!24239)))

(declare-fun lt!24238 () Unit!1550)

(declare-fun e!39170 () Unit!1550)

(assert (=> d!11461 (= lt!24238 e!39170)))

(declare-fun c!7650 () Bool)

(assert (=> d!11461 (= c!7650 lt!24239)))

(assert (=> d!11461 (= lt!24239 (containsKey!126 (toList!693 lt!24002) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11461 (= (contains!682 lt!24002 #b1000000000000000000000000000000000000000000000000000000000000000) lt!24237)))

(declare-fun b!59583 () Bool)

(declare-fun lt!24240 () Unit!1550)

(assert (=> b!59583 (= e!39170 lt!24240)))

(assert (=> b!59583 (= lt!24240 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 lt!24002) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59583 (isDefined!76 (getValueByKey!122 (toList!693 lt!24002) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59584 () Bool)

(declare-fun Unit!1582 () Unit!1550)

(assert (=> b!59584 (= e!39170 Unit!1582)))

(declare-fun b!59585 () Bool)

(assert (=> b!59585 (= e!39171 (isDefined!76 (getValueByKey!122 (toList!693 lt!24002) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11461 c!7650) b!59583))

(assert (= (and d!11461 (not c!7650)) b!59584))

(assert (= (and d!11461 (not res!33052)) b!59585))

(declare-fun m!51587 () Bool)

(assert (=> d!11461 m!51587))

(declare-fun m!51589 () Bool)

(assert (=> b!59583 m!51589))

(declare-fun m!51591 () Bool)

(assert (=> b!59583 m!51591))

(assert (=> b!59583 m!51591))

(declare-fun m!51593 () Bool)

(assert (=> b!59583 m!51593))

(assert (=> b!59585 m!51591))

(assert (=> b!59585 m!51591))

(assert (=> b!59585 m!51593))

(assert (=> bm!4426 d!11461))

(declare-fun b!59586 () Bool)

(declare-fun e!39174 () Bool)

(declare-fun call!4491 () Bool)

(assert (=> b!59586 (= e!39174 call!4491)))

(declare-fun bm!4488 () Bool)

(assert (=> bm!4488 (= call!4491 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (_keys!3665 newMap!16) (mask!5925 newMap!16)))))

(declare-fun b!59587 () Bool)

(declare-fun e!39172 () Bool)

(assert (=> b!59587 (= e!39172 e!39174)))

(declare-fun lt!24243 () (_ BitVec 64))

(assert (=> b!59587 (= lt!24243 (select (arr!1768 (_keys!3665 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(declare-fun lt!24242 () Unit!1550)

(assert (=> b!59587 (= lt!24242 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3665 newMap!16) lt!24243 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (=> b!59587 (arrayContainsKey!0 (_keys!3665 newMap!16) lt!24243 #b00000000000000000000000000000000)))

(declare-fun lt!24241 () Unit!1550)

(assert (=> b!59587 (= lt!24241 lt!24242)))

(declare-fun res!33053 () Bool)

(assert (=> b!59587 (= res!33053 (= (seekEntryOrOpen!0 (select (arr!1768 (_keys!3665 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (_keys!3665 newMap!16) (mask!5925 newMap!16)) (Found!230 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> b!59587 (=> (not res!33053) (not e!39174))))

(declare-fun b!59588 () Bool)

(assert (=> b!59588 (= e!39172 call!4491)))

(declare-fun b!59589 () Bool)

(declare-fun e!39173 () Bool)

(assert (=> b!59589 (= e!39173 e!39172)))

(declare-fun c!7651 () Bool)

(assert (=> b!59589 (= c!7651 (validKeyInArray!0 (select (arr!1768 (_keys!3665 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun d!11463 () Bool)

(declare-fun res!33054 () Bool)

(assert (=> d!11463 (=> res!33054 e!39173)))

(assert (=> d!11463 (= res!33054 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!1999 (_keys!3665 newMap!16))))))

(assert (=> d!11463 (= (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3665 newMap!16) (mask!5925 newMap!16)) e!39173)))

(assert (= (and d!11463 (not res!33054)) b!59589))

(assert (= (and b!59589 c!7651) b!59587))

(assert (= (and b!59589 (not c!7651)) b!59588))

(assert (= (and b!59587 res!33053) b!59586))

(assert (= (or b!59586 b!59588) bm!4488))

(declare-fun m!51595 () Bool)

(assert (=> bm!4488 m!51595))

(assert (=> b!59587 m!51583))

(declare-fun m!51597 () Bool)

(assert (=> b!59587 m!51597))

(declare-fun m!51599 () Bool)

(assert (=> b!59587 m!51599))

(assert (=> b!59587 m!51583))

(declare-fun m!51601 () Bool)

(assert (=> b!59587 m!51601))

(assert (=> b!59589 m!51583))

(assert (=> b!59589 m!51583))

(declare-fun m!51603 () Bool)

(assert (=> b!59589 m!51603))

(assert (=> bm!4436 d!11463))

(declare-fun d!11465 () Bool)

(assert (=> d!11465 (= (map!1103 (_2!1028 lt!23976)) (getCurrentListMap!389 (_keys!3665 (_2!1028 lt!23976)) (_values!2025 (_2!1028 lt!23976)) (mask!5925 (_2!1028 lt!23976)) (extraKeys!1929 (_2!1028 lt!23976)) (zeroValue!1958 (_2!1028 lt!23976)) (minValue!1958 (_2!1028 lt!23976)) #b00000000000000000000000000000000 (defaultEntry!2042 (_2!1028 lt!23976))))))

(declare-fun bs!2580 () Bool)

(assert (= bs!2580 d!11465))

(declare-fun m!51605 () Bool)

(assert (=> bs!2580 m!51605))

(assert (=> b!59148 d!11465))

(declare-fun d!11467 () Bool)

(declare-fun e!39175 () Bool)

(assert (=> d!11467 e!39175))

(declare-fun res!33055 () Bool)

(assert (=> d!11467 (=> (not res!33055) (not e!39175))))

(declare-fun lt!24246 () ListLongMap!1355)

(assert (=> d!11467 (= res!33055 (contains!682 lt!24246 (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!24247 () List!1437)

(assert (=> d!11467 (= lt!24246 (ListLongMap!1356 lt!24247))))

(declare-fun lt!24244 () Unit!1550)

(declare-fun lt!24245 () Unit!1550)

(assert (=> d!11467 (= lt!24244 lt!24245)))

(assert (=> d!11467 (= (getValueByKey!122 lt!24247 (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!127 (_2!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11467 (= lt!24245 (lemmaContainsTupThenGetReturnValue!42 lt!24247 (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11467 (= lt!24247 (insertStrictlySorted!45 (toList!693 (map!1103 newMap!16)) (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11467 (= (+!81 (map!1103 newMap!16) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!24246)))

(declare-fun b!59590 () Bool)

(declare-fun res!33056 () Bool)

(assert (=> b!59590 (=> (not res!33056) (not e!39175))))

(assert (=> b!59590 (= res!33056 (= (getValueByKey!122 (toList!693 lt!24246) (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!127 (_2!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!59591 () Bool)

(assert (=> b!59591 (= e!39175 (contains!684 (toList!693 lt!24246) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!11467 res!33055) b!59590))

(assert (= (and b!59590 res!33056) b!59591))

(declare-fun m!51607 () Bool)

(assert (=> d!11467 m!51607))

(declare-fun m!51609 () Bool)

(assert (=> d!11467 m!51609))

(declare-fun m!51611 () Bool)

(assert (=> d!11467 m!51611))

(declare-fun m!51613 () Bool)

(assert (=> d!11467 m!51613))

(declare-fun m!51615 () Bool)

(assert (=> b!59590 m!51615))

(declare-fun m!51617 () Bool)

(assert (=> b!59591 m!51617))

(assert (=> b!59148 d!11467))

(assert (=> b!59148 d!11187))

(declare-fun d!11469 () Bool)

(declare-fun e!39177 () Bool)

(assert (=> d!11469 e!39177))

(declare-fun res!33057 () Bool)

(assert (=> d!11469 (=> res!33057 e!39177)))

(declare-fun lt!24248 () Bool)

(assert (=> d!11469 (= res!33057 (not lt!24248))))

(declare-fun lt!24250 () Bool)

(assert (=> d!11469 (= lt!24248 lt!24250)))

(declare-fun lt!24249 () Unit!1550)

(declare-fun e!39176 () Unit!1550)

(assert (=> d!11469 (= lt!24249 e!39176)))

(declare-fun c!7652 () Bool)

(assert (=> d!11469 (= c!7652 lt!24250)))

(assert (=> d!11469 (= lt!24250 (containsKey!126 (toList!693 (getCurrentListMap!389 (_keys!3665 newMap!16) lt!23792 (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (select (arr!1768 (_keys!3665 newMap!16)) (index!3044 lt!23774))))))

(assert (=> d!11469 (= (contains!682 (getCurrentListMap!389 (_keys!3665 newMap!16) lt!23792 (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (select (arr!1768 (_keys!3665 newMap!16)) (index!3044 lt!23774))) lt!24248)))

(declare-fun b!59592 () Bool)

(declare-fun lt!24251 () Unit!1550)

(assert (=> b!59592 (= e!39176 lt!24251)))

(assert (=> b!59592 (= lt!24251 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 (getCurrentListMap!389 (_keys!3665 newMap!16) lt!23792 (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (select (arr!1768 (_keys!3665 newMap!16)) (index!3044 lt!23774))))))

(assert (=> b!59592 (isDefined!76 (getValueByKey!122 (toList!693 (getCurrentListMap!389 (_keys!3665 newMap!16) lt!23792 (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (select (arr!1768 (_keys!3665 newMap!16)) (index!3044 lt!23774))))))

(declare-fun b!59593 () Bool)

(declare-fun Unit!1583 () Unit!1550)

(assert (=> b!59593 (= e!39176 Unit!1583)))

(declare-fun b!59594 () Bool)

(assert (=> b!59594 (= e!39177 (isDefined!76 (getValueByKey!122 (toList!693 (getCurrentListMap!389 (_keys!3665 newMap!16) lt!23792 (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (select (arr!1768 (_keys!3665 newMap!16)) (index!3044 lt!23774)))))))

(assert (= (and d!11469 c!7652) b!59592))

(assert (= (and d!11469 (not c!7652)) b!59593))

(assert (= (and d!11469 (not res!33057)) b!59594))

(assert (=> d!11469 m!50575))

(declare-fun m!51619 () Bool)

(assert (=> d!11469 m!51619))

(assert (=> b!59592 m!50575))

(declare-fun m!51621 () Bool)

(assert (=> b!59592 m!51621))

(assert (=> b!59592 m!50575))

(declare-fun m!51623 () Bool)

(assert (=> b!59592 m!51623))

(assert (=> b!59592 m!51623))

(declare-fun m!51625 () Bool)

(assert (=> b!59592 m!51625))

(assert (=> b!59594 m!50575))

(assert (=> b!59594 m!51623))

(assert (=> b!59594 m!51623))

(assert (=> b!59594 m!51625))

(assert (=> b!59063 d!11469))

(declare-fun b!59595 () Bool)

(declare-fun e!39184 () Bool)

(assert (=> b!59595 (= e!39184 (validKeyInArray!0 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!4489 () Bool)

(declare-fun call!4498 () Bool)

(declare-fun lt!24273 () ListLongMap!1355)

(assert (=> bm!4489 (= call!4498 (contains!682 lt!24273 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59596 () Bool)

(declare-fun e!39182 () Unit!1550)

(declare-fun Unit!1584 () Unit!1550)

(assert (=> b!59596 (= e!39182 Unit!1584)))

(declare-fun b!59597 () Bool)

(declare-fun res!33061 () Bool)

(declare-fun e!39185 () Bool)

(assert (=> b!59597 (=> (not res!33061) (not e!39185))))

(declare-fun e!39183 () Bool)

(assert (=> b!59597 (= res!33061 e!39183)))

(declare-fun c!7653 () Bool)

(assert (=> b!59597 (= c!7653 (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!59598 () Bool)

(declare-fun e!39179 () ListLongMap!1355)

(declare-fun call!4495 () ListLongMap!1355)

(assert (=> b!59598 (= e!39179 call!4495)))

(declare-fun bm!4490 () Bool)

(declare-fun call!4494 () ListLongMap!1355)

(declare-fun call!4496 () ListLongMap!1355)

(assert (=> bm!4490 (= call!4494 call!4496)))

(declare-fun b!59600 () Bool)

(declare-fun e!39190 () Bool)

(declare-fun e!39178 () Bool)

(assert (=> b!59600 (= e!39190 e!39178)))

(declare-fun res!33064 () Bool)

(declare-fun call!4492 () Bool)

(assert (=> b!59600 (= res!33064 call!4492)))

(assert (=> b!59600 (=> (not res!33064) (not e!39178))))

(declare-fun b!59601 () Bool)

(assert (=> b!59601 (= e!39185 e!39190)))

(declare-fun c!7654 () Bool)

(assert (=> b!59601 (= c!7654 (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4491 () Bool)

(assert (=> bm!4491 (= call!4492 (contains!682 lt!24273 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4492 () Bool)

(declare-fun call!4497 () ListLongMap!1355)

(assert (=> bm!4492 (= call!4495 call!4497)))

(declare-fun b!59602 () Bool)

(declare-fun c!7657 () Bool)

(assert (=> b!59602 (= c!7657 (and (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!39180 () ListLongMap!1355)

(assert (=> b!59602 (= e!39179 e!39180)))

(declare-fun b!59603 () Bool)

(declare-fun e!39188 () Bool)

(assert (=> b!59603 (= e!39188 (= (apply!66 lt!24273 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1958 newMap!16)))))

(declare-fun b!59604 () Bool)

(declare-fun res!33058 () Bool)

(assert (=> b!59604 (=> (not res!33058) (not e!39185))))

(declare-fun e!39189 () Bool)

(assert (=> b!59604 (= res!33058 e!39189)))

(declare-fun res!33060 () Bool)

(assert (=> b!59604 (=> res!33060 e!39189)))

(assert (=> b!59604 (= res!33060 (not e!39184))))

(declare-fun res!33066 () Bool)

(assert (=> b!59604 (=> (not res!33066) (not e!39184))))

(assert (=> b!59604 (= res!33066 (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(declare-fun b!59605 () Bool)

(declare-fun e!39187 () ListLongMap!1355)

(assert (=> b!59605 (= e!39187 (+!81 call!4497 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))

(declare-fun bm!4493 () Bool)

(declare-fun call!4493 () ListLongMap!1355)

(assert (=> bm!4493 (= call!4493 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) lt!23792 (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun c!7656 () Bool)

(declare-fun c!7658 () Bool)

(declare-fun bm!4494 () Bool)

(assert (=> bm!4494 (= call!4497 (+!81 (ite c!7656 call!4493 (ite c!7658 call!4496 call!4494)) (ite (or c!7656 c!7658) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))

(declare-fun b!59606 () Bool)

(assert (=> b!59606 (= e!39190 (not call!4492))))

(declare-fun b!59607 () Bool)

(assert (=> b!59607 (= e!39178 (= (apply!66 lt!24273 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1958 newMap!16)))))

(declare-fun e!39181 () Bool)

(declare-fun b!59608 () Bool)

(assert (=> b!59608 (= e!39181 (= (apply!66 lt!24273 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)) (get!1073 (select (arr!1769 lt!23792) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!59608 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2000 lt!23792)))))

(assert (=> b!59608 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(declare-fun b!59599 () Bool)

(assert (=> b!59599 (= e!39189 e!39181)))

(declare-fun res!33063 () Bool)

(assert (=> b!59599 (=> (not res!33063) (not e!39181))))

(assert (=> b!59599 (= res!33063 (contains!682 lt!24273 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59599 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(declare-fun d!11471 () Bool)

(assert (=> d!11471 e!39185))

(declare-fun res!33062 () Bool)

(assert (=> d!11471 (=> (not res!33062) (not e!39185))))

(assert (=> d!11471 (= res!33062 (or (bvsge #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))))

(declare-fun lt!24267 () ListLongMap!1355)

(assert (=> d!11471 (= lt!24273 lt!24267)))

(declare-fun lt!24272 () Unit!1550)

(assert (=> d!11471 (= lt!24272 e!39182)))

(declare-fun c!7655 () Bool)

(declare-fun e!39186 () Bool)

(assert (=> d!11471 (= c!7655 e!39186)))

(declare-fun res!33065 () Bool)

(assert (=> d!11471 (=> (not res!33065) (not e!39186))))

(assert (=> d!11471 (= res!33065 (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(assert (=> d!11471 (= lt!24267 e!39187)))

(assert (=> d!11471 (= c!7656 (and (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11471 (validMask!0 (mask!5925 newMap!16))))

(assert (=> d!11471 (= (getCurrentListMap!389 (_keys!3665 newMap!16) lt!23792 (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) lt!24273)))

(declare-fun b!59609 () Bool)

(declare-fun lt!24261 () Unit!1550)

(assert (=> b!59609 (= e!39182 lt!24261)))

(declare-fun lt!24266 () ListLongMap!1355)

(assert (=> b!59609 (= lt!24266 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) lt!23792 (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24265 () (_ BitVec 64))

(assert (=> b!59609 (= lt!24265 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24264 () (_ BitVec 64))

(assert (=> b!59609 (= lt!24264 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24257 () Unit!1550)

(assert (=> b!59609 (= lt!24257 (addStillContains!42 lt!24266 lt!24265 (zeroValue!1958 newMap!16) lt!24264))))

(assert (=> b!59609 (contains!682 (+!81 lt!24266 (tuple2!2037 lt!24265 (zeroValue!1958 newMap!16))) lt!24264)))

(declare-fun lt!24268 () Unit!1550)

(assert (=> b!59609 (= lt!24268 lt!24257)))

(declare-fun lt!24271 () ListLongMap!1355)

(assert (=> b!59609 (= lt!24271 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) lt!23792 (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24253 () (_ BitVec 64))

(assert (=> b!59609 (= lt!24253 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24255 () (_ BitVec 64))

(assert (=> b!59609 (= lt!24255 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24252 () Unit!1550)

(assert (=> b!59609 (= lt!24252 (addApplyDifferent!42 lt!24271 lt!24253 (minValue!1958 newMap!16) lt!24255))))

(assert (=> b!59609 (= (apply!66 (+!81 lt!24271 (tuple2!2037 lt!24253 (minValue!1958 newMap!16))) lt!24255) (apply!66 lt!24271 lt!24255))))

(declare-fun lt!24260 () Unit!1550)

(assert (=> b!59609 (= lt!24260 lt!24252)))

(declare-fun lt!24259 () ListLongMap!1355)

(assert (=> b!59609 (= lt!24259 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) lt!23792 (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24256 () (_ BitVec 64))

(assert (=> b!59609 (= lt!24256 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24263 () (_ BitVec 64))

(assert (=> b!59609 (= lt!24263 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24258 () Unit!1550)

(assert (=> b!59609 (= lt!24258 (addApplyDifferent!42 lt!24259 lt!24256 (zeroValue!1958 newMap!16) lt!24263))))

(assert (=> b!59609 (= (apply!66 (+!81 lt!24259 (tuple2!2037 lt!24256 (zeroValue!1958 newMap!16))) lt!24263) (apply!66 lt!24259 lt!24263))))

(declare-fun lt!24270 () Unit!1550)

(assert (=> b!59609 (= lt!24270 lt!24258)))

(declare-fun lt!24269 () ListLongMap!1355)

(assert (=> b!59609 (= lt!24269 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) lt!23792 (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24262 () (_ BitVec 64))

(assert (=> b!59609 (= lt!24262 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24254 () (_ BitVec 64))

(assert (=> b!59609 (= lt!24254 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!59609 (= lt!24261 (addApplyDifferent!42 lt!24269 lt!24262 (minValue!1958 newMap!16) lt!24254))))

(assert (=> b!59609 (= (apply!66 (+!81 lt!24269 (tuple2!2037 lt!24262 (minValue!1958 newMap!16))) lt!24254) (apply!66 lt!24269 lt!24254))))

(declare-fun b!59610 () Bool)

(assert (=> b!59610 (= e!39186 (validKeyInArray!0 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59611 () Bool)

(assert (=> b!59611 (= e!39183 e!39188)))

(declare-fun res!33059 () Bool)

(assert (=> b!59611 (= res!33059 call!4498)))

(assert (=> b!59611 (=> (not res!33059) (not e!39188))))

(declare-fun b!59612 () Bool)

(assert (=> b!59612 (= e!39187 e!39179)))

(assert (=> b!59612 (= c!7658 (and (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!59613 () Bool)

(assert (=> b!59613 (= e!39180 call!4495)))

(declare-fun b!59614 () Bool)

(assert (=> b!59614 (= e!39183 (not call!4498))))

(declare-fun b!59615 () Bool)

(assert (=> b!59615 (= e!39180 call!4494)))

(declare-fun bm!4495 () Bool)

(assert (=> bm!4495 (= call!4496 call!4493)))

(assert (= (and d!11471 c!7656) b!59605))

(assert (= (and d!11471 (not c!7656)) b!59612))

(assert (= (and b!59612 c!7658) b!59598))

(assert (= (and b!59612 (not c!7658)) b!59602))

(assert (= (and b!59602 c!7657) b!59613))

(assert (= (and b!59602 (not c!7657)) b!59615))

(assert (= (or b!59613 b!59615) bm!4490))

(assert (= (or b!59598 bm!4490) bm!4495))

(assert (= (or b!59598 b!59613) bm!4492))

(assert (= (or b!59605 bm!4495) bm!4493))

(assert (= (or b!59605 bm!4492) bm!4494))

(assert (= (and d!11471 res!33065) b!59610))

(assert (= (and d!11471 c!7655) b!59609))

(assert (= (and d!11471 (not c!7655)) b!59596))

(assert (= (and d!11471 res!33062) b!59604))

(assert (= (and b!59604 res!33066) b!59595))

(assert (= (and b!59604 (not res!33060)) b!59599))

(assert (= (and b!59599 res!33063) b!59608))

(assert (= (and b!59604 res!33058) b!59597))

(assert (= (and b!59597 c!7653) b!59611))

(assert (= (and b!59597 (not c!7653)) b!59614))

(assert (= (and b!59611 res!33059) b!59603))

(assert (= (or b!59611 b!59614) bm!4489))

(assert (= (and b!59597 res!33061) b!59601))

(assert (= (and b!59601 c!7654) b!59600))

(assert (= (and b!59601 (not c!7654)) b!59606))

(assert (= (and b!59600 res!33064) b!59607))

(assert (= (or b!59600 b!59606) bm!4491))

(declare-fun b_lambda!2621 () Bool)

(assert (=> (not b_lambda!2621) (not b!59608)))

(assert (=> b!59608 t!4781))

(declare-fun b_and!3609 () Bool)

(assert (= b_and!3605 (and (=> t!4781 result!2381) b_and!3609)))

(assert (=> b!59608 t!4783))

(declare-fun b_and!3611 () Bool)

(assert (= b_and!3607 (and (=> t!4783 result!2383) b_and!3611)))

(declare-fun m!51627 () Bool)

(assert (=> b!59607 m!51627))

(assert (=> d!11471 m!50657))

(assert (=> b!59610 m!50643))

(assert (=> b!59610 m!50643))

(assert (=> b!59610 m!50645))

(declare-fun m!51629 () Bool)

(assert (=> bm!4489 m!51629))

(assert (=> b!59595 m!50643))

(assert (=> b!59595 m!50643))

(assert (=> b!59595 m!50645))

(declare-fun m!51631 () Bool)

(assert (=> b!59609 m!51631))

(declare-fun m!51633 () Bool)

(assert (=> b!59609 m!51633))

(declare-fun m!51635 () Bool)

(assert (=> b!59609 m!51635))

(declare-fun m!51637 () Bool)

(assert (=> b!59609 m!51637))

(declare-fun m!51639 () Bool)

(assert (=> b!59609 m!51639))

(declare-fun m!51641 () Bool)

(assert (=> b!59609 m!51641))

(declare-fun m!51643 () Bool)

(assert (=> b!59609 m!51643))

(declare-fun m!51645 () Bool)

(assert (=> b!59609 m!51645))

(assert (=> b!59609 m!50643))

(declare-fun m!51647 () Bool)

(assert (=> b!59609 m!51647))

(declare-fun m!51649 () Bool)

(assert (=> b!59609 m!51649))

(declare-fun m!51651 () Bool)

(assert (=> b!59609 m!51651))

(assert (=> b!59609 m!51631))

(declare-fun m!51653 () Bool)

(assert (=> b!59609 m!51653))

(declare-fun m!51655 () Bool)

(assert (=> b!59609 m!51655))

(declare-fun m!51657 () Bool)

(assert (=> b!59609 m!51657))

(assert (=> b!59609 m!51641))

(declare-fun m!51659 () Bool)

(assert (=> b!59609 m!51659))

(assert (=> b!59609 m!51653))

(assert (=> b!59609 m!51647))

(declare-fun m!51661 () Bool)

(assert (=> b!59609 m!51661))

(assert (=> b!59608 m!50643))

(declare-fun m!51663 () Bool)

(assert (=> b!59608 m!51663))

(assert (=> b!59608 m!50697))

(declare-fun m!51665 () Bool)

(assert (=> b!59608 m!51665))

(assert (=> b!59608 m!50697))

(declare-fun m!51667 () Bool)

(assert (=> b!59608 m!51667))

(assert (=> b!59608 m!51665))

(assert (=> b!59608 m!50643))

(assert (=> bm!4493 m!51659))

(assert (=> b!59599 m!50643))

(assert (=> b!59599 m!50643))

(declare-fun m!51669 () Bool)

(assert (=> b!59599 m!51669))

(declare-fun m!51671 () Bool)

(assert (=> b!59603 m!51671))

(declare-fun m!51673 () Bool)

(assert (=> b!59605 m!51673))

(declare-fun m!51675 () Bool)

(assert (=> bm!4494 m!51675))

(declare-fun m!51677 () Bool)

(assert (=> bm!4491 m!51677))

(assert (=> b!59063 d!11471))

(declare-fun d!11473 () Bool)

(declare-fun c!7659 () Bool)

(assert (=> d!11473 (= c!7659 (and ((_ is Cons!1433) (toList!693 lt!24046)) (= (_1!1029 (h!2014 (toList!693 lt!24046))) (_1!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(declare-fun e!39191 () Option!128)

(assert (=> d!11473 (= (getValueByKey!122 (toList!693 lt!24046) (_1!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))) e!39191)))

(declare-fun e!39192 () Option!128)

(declare-fun b!59618 () Bool)

(assert (=> b!59618 (= e!39192 (getValueByKey!122 (t!4770 (toList!693 lt!24046)) (_1!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun b!59617 () Bool)

(assert (=> b!59617 (= e!39191 e!39192)))

(declare-fun c!7660 () Bool)

(assert (=> b!59617 (= c!7660 (and ((_ is Cons!1433) (toList!693 lt!24046)) (not (= (_1!1029 (h!2014 (toList!693 lt!24046))) (_1!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))))))

(declare-fun b!59619 () Bool)

(assert (=> b!59619 (= e!39192 None!126)))

(declare-fun b!59616 () Bool)

(assert (=> b!59616 (= e!39191 (Some!127 (_2!1029 (h!2014 (toList!693 lt!24046)))))))

(assert (= (and d!11473 c!7659) b!59616))

(assert (= (and d!11473 (not c!7659)) b!59617))

(assert (= (and b!59617 c!7660) b!59618))

(assert (= (and b!59617 (not c!7660)) b!59619))

(declare-fun m!51679 () Bool)

(assert (=> b!59618 m!51679))

(assert (=> b!59226 d!11473))

(declare-fun d!11475 () Bool)

(declare-fun e!39194 () Bool)

(assert (=> d!11475 e!39194))

(declare-fun res!33067 () Bool)

(assert (=> d!11475 (=> res!33067 e!39194)))

(declare-fun lt!24274 () Bool)

(assert (=> d!11475 (= res!33067 (not lt!24274))))

(declare-fun lt!24276 () Bool)

(assert (=> d!11475 (= lt!24274 lt!24276)))

(declare-fun lt!24275 () Unit!1550)

(declare-fun e!39193 () Unit!1550)

(assert (=> d!11475 (= lt!24275 e!39193)))

(declare-fun c!7661 () Bool)

(assert (=> d!11475 (= c!7661 lt!24276)))

(assert (=> d!11475 (= lt!24276 (containsKey!126 (toList!693 lt!23979) (_1!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(assert (=> d!11475 (= (contains!682 lt!23979 (_1!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))) lt!24274)))

(declare-fun b!59620 () Bool)

(declare-fun lt!24277 () Unit!1550)

(assert (=> b!59620 (= e!39193 lt!24277)))

(assert (=> b!59620 (= lt!24277 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 lt!23979) (_1!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(assert (=> b!59620 (isDefined!76 (getValueByKey!122 (toList!693 lt!23979) (_1!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(declare-fun b!59621 () Bool)

(declare-fun Unit!1585 () Unit!1550)

(assert (=> b!59621 (= e!39193 Unit!1585)))

(declare-fun b!59622 () Bool)

(assert (=> b!59622 (= e!39194 (isDefined!76 (getValueByKey!122 (toList!693 lt!23979) (_1!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))))

(assert (= (and d!11475 c!7661) b!59620))

(assert (= (and d!11475 (not c!7661)) b!59621))

(assert (= (and d!11475 (not res!33067)) b!59622))

(declare-fun m!51681 () Bool)

(assert (=> d!11475 m!51681))

(declare-fun m!51683 () Bool)

(assert (=> b!59620 m!51683))

(assert (=> b!59620 m!50869))

(assert (=> b!59620 m!50869))

(declare-fun m!51685 () Bool)

(assert (=> b!59620 m!51685))

(assert (=> b!59622 m!50869))

(assert (=> b!59622 m!50869))

(assert (=> b!59622 m!51685))

(assert (=> d!11265 d!11475))

(declare-fun c!7662 () Bool)

(declare-fun d!11477 () Bool)

(assert (=> d!11477 (= c!7662 (and ((_ is Cons!1433) lt!23980) (= (_1!1029 (h!2014 lt!23980)) (_1!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))))

(declare-fun e!39195 () Option!128)

(assert (=> d!11477 (= (getValueByKey!122 lt!23980 (_1!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))) e!39195)))

(declare-fun b!59625 () Bool)

(declare-fun e!39196 () Option!128)

(assert (=> b!59625 (= e!39196 (getValueByKey!122 (t!4770 lt!23980) (_1!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(declare-fun b!59624 () Bool)

(assert (=> b!59624 (= e!39195 e!39196)))

(declare-fun c!7663 () Bool)

(assert (=> b!59624 (= c!7663 (and ((_ is Cons!1433) lt!23980) (not (= (_1!1029 (h!2014 lt!23980)) (_1!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))))

(declare-fun b!59626 () Bool)

(assert (=> b!59626 (= e!39196 None!126)))

(declare-fun b!59623 () Bool)

(assert (=> b!59623 (= e!39195 (Some!127 (_2!1029 (h!2014 lt!23980))))))

(assert (= (and d!11477 c!7662) b!59623))

(assert (= (and d!11477 (not c!7662)) b!59624))

(assert (= (and b!59624 c!7663) b!59625))

(assert (= (and b!59624 (not c!7663)) b!59626))

(declare-fun m!51687 () Bool)

(assert (=> b!59625 m!51687))

(assert (=> d!11265 d!11477))

(declare-fun d!11479 () Bool)

(assert (=> d!11479 (= (getValueByKey!122 lt!23980 (_1!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))) (Some!127 (_2!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(declare-fun lt!24278 () Unit!1550)

(assert (=> d!11479 (= lt!24278 (choose!318 lt!23980 (_1!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) (_2!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(declare-fun e!39197 () Bool)

(assert (=> d!11479 e!39197))

(declare-fun res!33068 () Bool)

(assert (=> d!11479 (=> (not res!33068) (not e!39197))))

(assert (=> d!11479 (= res!33068 (isStrictlySorted!279 lt!23980))))

(assert (=> d!11479 (= (lemmaContainsTupThenGetReturnValue!42 lt!23980 (_1!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) (_2!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))) lt!24278)))

(declare-fun b!59627 () Bool)

(declare-fun res!33069 () Bool)

(assert (=> b!59627 (=> (not res!33069) (not e!39197))))

(assert (=> b!59627 (= res!33069 (containsKey!126 lt!23980 (_1!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(declare-fun b!59628 () Bool)

(assert (=> b!59628 (= e!39197 (contains!684 lt!23980 (tuple2!2037 (_1!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) (_2!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))))

(assert (= (and d!11479 res!33068) b!59627))

(assert (= (and b!59627 res!33069) b!59628))

(assert (=> d!11479 m!50863))

(declare-fun m!51689 () Bool)

(assert (=> d!11479 m!51689))

(declare-fun m!51691 () Bool)

(assert (=> d!11479 m!51691))

(declare-fun m!51693 () Bool)

(assert (=> b!59627 m!51693))

(declare-fun m!51695 () Bool)

(assert (=> b!59628 m!51695))

(assert (=> d!11265 d!11479))

(declare-fun e!39198 () List!1437)

(declare-fun b!59629 () Bool)

(assert (=> b!59629 (= e!39198 (insertStrictlySorted!45 (t!4770 (toList!693 (ite c!7428 call!4323 (ite c!7430 call!4326 call!4324)))) (_1!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) (_2!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(declare-fun b!59630 () Bool)

(declare-fun e!39201 () List!1437)

(declare-fun call!4499 () List!1437)

(assert (=> b!59630 (= e!39201 call!4499)))

(declare-fun b!59631 () Bool)

(declare-fun e!39199 () List!1437)

(assert (=> b!59631 (= e!39201 e!39199)))

(declare-fun c!7667 () Bool)

(assert (=> b!59631 (= c!7667 (and ((_ is Cons!1433) (toList!693 (ite c!7428 call!4323 (ite c!7430 call!4326 call!4324)))) (= (_1!1029 (h!2014 (toList!693 (ite c!7428 call!4323 (ite c!7430 call!4326 call!4324))))) (_1!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))))

(declare-fun b!59632 () Bool)

(declare-fun call!4500 () List!1437)

(assert (=> b!59632 (= e!39199 call!4500)))

(declare-fun bm!4497 () Bool)

(declare-fun c!7665 () Bool)

(assert (=> bm!4497 (= call!4499 ($colon$colon!59 e!39198 (ite c!7665 (h!2014 (toList!693 (ite c!7428 call!4323 (ite c!7430 call!4326 call!4324)))) (tuple2!2037 (_1!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) (_2!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))))

(declare-fun c!7666 () Bool)

(assert (=> bm!4497 (= c!7666 c!7665)))

(declare-fun lt!24279 () List!1437)

(declare-fun b!59633 () Bool)

(declare-fun e!39202 () Bool)

(assert (=> b!59633 (= e!39202 (contains!684 lt!24279 (tuple2!2037 (_1!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) (_2!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))))

(declare-fun b!59634 () Bool)

(declare-fun e!39200 () List!1437)

(declare-fun call!4501 () List!1437)

(assert (=> b!59634 (= e!39200 call!4501)))

(declare-fun b!59635 () Bool)

(declare-fun c!7664 () Bool)

(assert (=> b!59635 (= e!39198 (ite c!7667 (t!4770 (toList!693 (ite c!7428 call!4323 (ite c!7430 call!4326 call!4324)))) (ite c!7664 (Cons!1433 (h!2014 (toList!693 (ite c!7428 call!4323 (ite c!7430 call!4326 call!4324)))) (t!4770 (toList!693 (ite c!7428 call!4323 (ite c!7430 call!4326 call!4324))))) Nil!1434)))))

(declare-fun bm!4496 () Bool)

(assert (=> bm!4496 (= call!4501 call!4500)))

(declare-fun d!11481 () Bool)

(assert (=> d!11481 e!39202))

(declare-fun res!33070 () Bool)

(assert (=> d!11481 (=> (not res!33070) (not e!39202))))

(assert (=> d!11481 (= res!33070 (isStrictlySorted!279 lt!24279))))

(assert (=> d!11481 (= lt!24279 e!39201)))

(assert (=> d!11481 (= c!7665 (and ((_ is Cons!1433) (toList!693 (ite c!7428 call!4323 (ite c!7430 call!4326 call!4324)))) (bvslt (_1!1029 (h!2014 (toList!693 (ite c!7428 call!4323 (ite c!7430 call!4326 call!4324))))) (_1!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))))

(assert (=> d!11481 (isStrictlySorted!279 (toList!693 (ite c!7428 call!4323 (ite c!7430 call!4326 call!4324))))))

(assert (=> d!11481 (= (insertStrictlySorted!45 (toList!693 (ite c!7428 call!4323 (ite c!7430 call!4326 call!4324))) (_1!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) (_2!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))) lt!24279)))

(declare-fun bm!4498 () Bool)

(assert (=> bm!4498 (= call!4500 call!4499)))

(declare-fun b!59636 () Bool)

(assert (=> b!59636 (= e!39200 call!4501)))

(declare-fun b!59637 () Bool)

(assert (=> b!59637 (= c!7664 (and ((_ is Cons!1433) (toList!693 (ite c!7428 call!4323 (ite c!7430 call!4326 call!4324)))) (bvsgt (_1!1029 (h!2014 (toList!693 (ite c!7428 call!4323 (ite c!7430 call!4326 call!4324))))) (_1!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))))

(assert (=> b!59637 (= e!39199 e!39200)))

(declare-fun b!59638 () Bool)

(declare-fun res!33071 () Bool)

(assert (=> b!59638 (=> (not res!33071) (not e!39202))))

(assert (=> b!59638 (= res!33071 (containsKey!126 lt!24279 (_1!1029 (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(assert (= (and d!11481 c!7665) b!59630))

(assert (= (and d!11481 (not c!7665)) b!59631))

(assert (= (and b!59631 c!7667) b!59632))

(assert (= (and b!59631 (not c!7667)) b!59637))

(assert (= (and b!59637 c!7664) b!59636))

(assert (= (and b!59637 (not c!7664)) b!59634))

(assert (= (or b!59636 b!59634) bm!4496))

(assert (= (or b!59632 bm!4496) bm!4498))

(assert (= (or b!59630 bm!4498) bm!4497))

(assert (= (and bm!4497 c!7666) b!59629))

(assert (= (and bm!4497 (not c!7666)) b!59635))

(assert (= (and d!11481 res!33070) b!59638))

(assert (= (and b!59638 res!33071) b!59633))

(declare-fun m!51697 () Bool)

(assert (=> b!59638 m!51697))

(declare-fun m!51699 () Bool)

(assert (=> d!11481 m!51699))

(declare-fun m!51701 () Bool)

(assert (=> d!11481 m!51701))

(declare-fun m!51703 () Bool)

(assert (=> b!59633 m!51703))

(declare-fun m!51705 () Bool)

(assert (=> b!59629 m!51705))

(declare-fun m!51707 () Bool)

(assert (=> bm!4497 m!51707))

(assert (=> d!11265 d!11481))

(declare-fun d!11483 () Bool)

(declare-fun e!39203 () Bool)

(assert (=> d!11483 e!39203))

(declare-fun res!33072 () Bool)

(assert (=> d!11483 (=> (not res!33072) (not e!39203))))

(declare-fun lt!24282 () ListLongMap!1355)

(assert (=> d!11483 (= res!33072 (contains!682 lt!24282 (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))

(declare-fun lt!24283 () List!1437)

(assert (=> d!11483 (= lt!24282 (ListLongMap!1356 lt!24283))))

(declare-fun lt!24280 () Unit!1550)

(declare-fun lt!24281 () Unit!1550)

(assert (=> d!11483 (= lt!24280 lt!24281)))

(assert (=> d!11483 (= (getValueByKey!122 lt!24283 (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))) (Some!127 (_2!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))

(assert (=> d!11483 (= lt!24281 (lemmaContainsTupThenGetReturnValue!42 lt!24283 (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))) (_2!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))

(assert (=> d!11483 (= lt!24283 (insertStrictlySorted!45 (toList!693 call!4413) (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))) (_2!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))

(assert (=> d!11483 (= (+!81 call!4413 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))) lt!24282)))

(declare-fun b!59639 () Bool)

(declare-fun res!33073 () Bool)

(assert (=> b!59639 (=> (not res!33073) (not e!39203))))

(assert (=> b!59639 (= res!33073 (= (getValueByKey!122 (toList!693 lt!24282) (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))) (Some!127 (_2!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))))

(declare-fun b!59640 () Bool)

(assert (=> b!59640 (= e!39203 (contains!684 (toList!693 lt!24282) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))

(assert (= (and d!11483 res!33072) b!59639))

(assert (= (and b!59639 res!33073) b!59640))

(declare-fun m!51709 () Bool)

(assert (=> d!11483 m!51709))

(declare-fun m!51711 () Bool)

(assert (=> d!11483 m!51711))

(declare-fun m!51713 () Bool)

(assert (=> d!11483 m!51713))

(declare-fun m!51715 () Bool)

(assert (=> d!11483 m!51715))

(declare-fun m!51717 () Bool)

(assert (=> b!59639 m!51717))

(declare-fun m!51719 () Bool)

(assert (=> b!59640 m!51719))

(assert (=> b!59030 d!11483))

(declare-fun d!11485 () Bool)

(declare-fun res!33074 () Bool)

(declare-fun e!39204 () Bool)

(assert (=> d!11485 (=> (not res!33074) (not e!39204))))

(assert (=> d!11485 (= res!33074 (simpleValid!42 (_2!1028 lt!23976)))))

(assert (=> d!11485 (= (valid!256 (_2!1028 lt!23976)) e!39204)))

(declare-fun b!59641 () Bool)

(declare-fun res!33075 () Bool)

(assert (=> b!59641 (=> (not res!33075) (not e!39204))))

(assert (=> b!59641 (= res!33075 (= (arrayCountValidKeys!0 (_keys!3665 (_2!1028 lt!23976)) #b00000000000000000000000000000000 (size!1999 (_keys!3665 (_2!1028 lt!23976)))) (_size!357 (_2!1028 lt!23976))))))

(declare-fun b!59642 () Bool)

(declare-fun res!33076 () Bool)

(assert (=> b!59642 (=> (not res!33076) (not e!39204))))

(assert (=> b!59642 (= res!33076 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3665 (_2!1028 lt!23976)) (mask!5925 (_2!1028 lt!23976))))))

(declare-fun b!59643 () Bool)

(assert (=> b!59643 (= e!39204 (arrayNoDuplicates!0 (_keys!3665 (_2!1028 lt!23976)) #b00000000000000000000000000000000 Nil!1433))))

(assert (= (and d!11485 res!33074) b!59641))

(assert (= (and b!59641 res!33075) b!59642))

(assert (= (and b!59642 res!33076) b!59643))

(declare-fun m!51721 () Bool)

(assert (=> d!11485 m!51721))

(declare-fun m!51723 () Bool)

(assert (=> b!59641 m!51723))

(declare-fun m!51725 () Bool)

(assert (=> b!59642 m!51725))

(declare-fun m!51727 () Bool)

(assert (=> b!59643 m!51727))

(assert (=> b!59146 d!11485))

(declare-fun d!11487 () Bool)

(assert (=> d!11487 (= (apply!66 lt!23838 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1076 (getValueByKey!122 (toList!693 lt!23838) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2581 () Bool)

(assert (= bs!2581 d!11487))

(assert (=> bs!2581 m!51527))

(assert (=> bs!2581 m!51527))

(declare-fun m!51729 () Bool)

(assert (=> bs!2581 m!51729))

(assert (=> b!59028 d!11487))

(declare-fun d!11489 () Bool)

(assert (=> d!11489 (= (validKeyInArray!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) (and (not (= (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!59328 d!11489))

(declare-fun b!59644 () Bool)

(declare-fun e!39210 () Bool)

(declare-fun e!39208 () Bool)

(assert (=> b!59644 (= e!39210 e!39208)))

(declare-fun c!7671 () Bool)

(assert (=> b!59644 (= c!7671 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992))))))))

(declare-fun b!59645 () Bool)

(declare-fun res!33078 () Bool)

(declare-fun e!39209 () Bool)

(assert (=> b!59645 (=> (not res!33078) (not e!39209))))

(declare-fun lt!24287 () ListLongMap!1355)

(assert (=> b!59645 (= res!33078 (not (contains!682 lt!24287 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bm!4499 () Bool)

(declare-fun call!4502 () ListLongMap!1355)

(assert (=> bm!4499 (= call!4502 (getCurrentListMapNoExtraKeys!44 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (_values!2025 (v!2377 (underlying!223 thiss!992))) (mask!5925 (v!2377 (underlying!223 thiss!992))) (extraKeys!1929 (v!2377 (underlying!223 thiss!992))) (zeroValue!1958 (v!2377 (underlying!223 thiss!992))) (minValue!1958 (v!2377 (underlying!223 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2042 (v!2377 (underlying!223 thiss!992)))))))

(declare-fun d!11491 () Bool)

(assert (=> d!11491 e!39209))

(declare-fun res!33080 () Bool)

(assert (=> d!11491 (=> (not res!33080) (not e!39209))))

(assert (=> d!11491 (= res!33080 (not (contains!682 lt!24287 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!39206 () ListLongMap!1355)

(assert (=> d!11491 (= lt!24287 e!39206)))

(declare-fun c!7670 () Bool)

(assert (=> d!11491 (= c!7670 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992))))))))

(assert (=> d!11491 (validMask!0 (mask!5925 (v!2377 (underlying!223 thiss!992))))))

(assert (=> d!11491 (= (getCurrentListMapNoExtraKeys!44 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (_values!2025 (v!2377 (underlying!223 thiss!992))) (mask!5925 (v!2377 (underlying!223 thiss!992))) (extraKeys!1929 (v!2377 (underlying!223 thiss!992))) (zeroValue!1958 (v!2377 (underlying!223 thiss!992))) (minValue!1958 (v!2377 (underlying!223 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2042 (v!2377 (underlying!223 thiss!992)))) lt!24287)))

(declare-fun b!59646 () Bool)

(assert (=> b!59646 (= e!39209 e!39210)))

(declare-fun c!7668 () Bool)

(declare-fun e!39211 () Bool)

(assert (=> b!59646 (= c!7668 e!39211)))

(declare-fun res!33079 () Bool)

(assert (=> b!59646 (=> (not res!33079) (not e!39211))))

(assert (=> b!59646 (= res!33079 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992))))))))

(declare-fun b!59647 () Bool)

(declare-fun e!39207 () ListLongMap!1355)

(assert (=> b!59647 (= e!39207 call!4502)))

(declare-fun b!59648 () Bool)

(assert (=> b!59648 (= e!39206 e!39207)))

(declare-fun c!7669 () Bool)

(assert (=> b!59648 (= c!7669 (validKeyInArray!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(declare-fun b!59649 () Bool)

(assert (=> b!59649 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992))))))))

(assert (=> b!59649 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2000 (_values!2025 (v!2377 (underlying!223 thiss!992))))))))

(declare-fun e!39205 () Bool)

(assert (=> b!59649 (= e!39205 (= (apply!66 lt!24287 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!59650 () Bool)

(declare-fun lt!24284 () Unit!1550)

(declare-fun lt!24285 () Unit!1550)

(assert (=> b!59650 (= lt!24284 lt!24285)))

(declare-fun lt!24289 () (_ BitVec 64))

(declare-fun lt!24286 () V!2841)

(declare-fun lt!24288 () (_ BitVec 64))

(declare-fun lt!24290 () ListLongMap!1355)

(assert (=> b!59650 (not (contains!682 (+!81 lt!24290 (tuple2!2037 lt!24288 lt!24286)) lt!24289))))

(assert (=> b!59650 (= lt!24285 (addStillNotContains!16 lt!24290 lt!24288 lt!24286 lt!24289))))

(assert (=> b!59650 (= lt!24289 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!59650 (= lt!24286 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!59650 (= lt!24288 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (=> b!59650 (= lt!24290 call!4502)))

(assert (=> b!59650 (= e!39207 (+!81 call!4502 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!59651 () Bool)

(assert (=> b!59651 (= e!39211 (validKeyInArray!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!59651 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))

(declare-fun b!59652 () Bool)

(assert (=> b!59652 (= e!39208 (isEmpty!297 lt!24287))))

(declare-fun b!59653 () Bool)

(assert (=> b!59653 (= e!39206 (ListLongMap!1356 Nil!1434))))

(declare-fun b!59654 () Bool)

(assert (=> b!59654 (= e!39208 (= lt!24287 (getCurrentListMapNoExtraKeys!44 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (_values!2025 (v!2377 (underlying!223 thiss!992))) (mask!5925 (v!2377 (underlying!223 thiss!992))) (extraKeys!1929 (v!2377 (underlying!223 thiss!992))) (zeroValue!1958 (v!2377 (underlying!223 thiss!992))) (minValue!1958 (v!2377 (underlying!223 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))))))))

(declare-fun b!59655 () Bool)

(assert (=> b!59655 (= e!39210 e!39205)))

(assert (=> b!59655 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992))))))))

(declare-fun res!33077 () Bool)

(assert (=> b!59655 (= res!33077 (contains!682 lt!24287 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!59655 (=> (not res!33077) (not e!39205))))

(assert (= (and d!11491 c!7670) b!59653))

(assert (= (and d!11491 (not c!7670)) b!59648))

(assert (= (and b!59648 c!7669) b!59650))

(assert (= (and b!59648 (not c!7669)) b!59647))

(assert (= (or b!59650 b!59647) bm!4499))

(assert (= (and d!11491 res!33080) b!59645))

(assert (= (and b!59645 res!33078) b!59646))

(assert (= (and b!59646 res!33079) b!59651))

(assert (= (and b!59646 c!7668) b!59655))

(assert (= (and b!59646 (not c!7668)) b!59644))

(assert (= (and b!59655 res!33077) b!59649))

(assert (= (and b!59644 c!7671) b!59654))

(assert (= (and b!59644 (not c!7671)) b!59652))

(declare-fun b_lambda!2623 () Bool)

(assert (=> (not b_lambda!2623) (not b!59649)))

(assert (=> b!59649 t!4766))

(declare-fun b_and!3613 () Bool)

(assert (= b_and!3609 (and (=> t!4766 result!2361) b_and!3613)))

(assert (=> b!59649 t!4768))

(declare-fun b_and!3615 () Bool)

(assert (= b_and!3611 (and (=> t!4768 result!2365) b_and!3615)))

(declare-fun b_lambda!2625 () Bool)

(assert (=> (not b_lambda!2625) (not b!59650)))

(assert (=> b!59650 t!4766))

(declare-fun b_and!3617 () Bool)

(assert (= b_and!3613 (and (=> t!4766 result!2361) b_and!3617)))

(assert (=> b!59650 t!4768))

(declare-fun b_and!3619 () Bool)

(assert (= b_and!3615 (and (=> t!4768 result!2365) b_and!3619)))

(declare-fun m!51731 () Bool)

(assert (=> d!11491 m!51731))

(assert (=> d!11491 m!50383))

(declare-fun m!51733 () Bool)

(assert (=> b!59649 m!51733))

(assert (=> b!59649 m!50727))

(assert (=> b!59649 m!50727))

(declare-fun m!51735 () Bool)

(assert (=> b!59649 m!51735))

(assert (=> b!59649 m!50367))

(assert (=> b!59649 m!51733))

(assert (=> b!59649 m!50367))

(declare-fun m!51737 () Bool)

(assert (=> b!59649 m!51737))

(declare-fun m!51739 () Bool)

(assert (=> b!59645 m!51739))

(declare-fun m!51741 () Bool)

(assert (=> b!59652 m!51741))

(declare-fun m!51743 () Bool)

(assert (=> b!59650 m!51743))

(assert (=> b!59650 m!51733))

(assert (=> b!59650 m!50727))

(declare-fun m!51745 () Bool)

(assert (=> b!59650 m!51745))

(declare-fun m!51747 () Bool)

(assert (=> b!59650 m!51747))

(declare-fun m!51749 () Bool)

(assert (=> b!59650 m!51749))

(assert (=> b!59650 m!51747))

(assert (=> b!59650 m!50367))

(assert (=> b!59650 m!51733))

(assert (=> b!59650 m!50367))

(assert (=> b!59650 m!51737))

(assert (=> b!59651 m!50727))

(assert (=> b!59651 m!50727))

(declare-fun m!51751 () Bool)

(assert (=> b!59651 m!51751))

(declare-fun m!51753 () Bool)

(assert (=> bm!4499 m!51753))

(assert (=> b!59655 m!50727))

(assert (=> b!59655 m!50727))

(declare-fun m!51755 () Bool)

(assert (=> b!59655 m!51755))

(assert (=> b!59654 m!51753))

(assert (=> b!59648 m!50727))

(assert (=> b!59648 m!50727))

(assert (=> b!59648 m!51751))

(assert (=> bm!4433 d!11491))

(declare-fun d!11493 () Bool)

(assert (=> d!11493 (= (get!1075 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59336 d!11493))

(assert (=> b!59012 d!11381))

(declare-fun bm!4500 () Bool)

(declare-fun call!4503 () (_ BitVec 32))

(assert (=> bm!4500 (= call!4503 (arrayCountValidKeys!0 (_keys!3665 (_2!1028 lt!23773)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!1999 (_keys!3665 (_2!1028 lt!23773)))))))

(declare-fun b!59656 () Bool)

(declare-fun e!39213 () (_ BitVec 32))

(assert (=> b!59656 (= e!39213 (bvadd #b00000000000000000000000000000001 call!4503))))

(declare-fun b!59657 () Bool)

(declare-fun e!39212 () (_ BitVec 32))

(assert (=> b!59657 (= e!39212 #b00000000000000000000000000000000)))

(declare-fun d!11495 () Bool)

(declare-fun lt!24291 () (_ BitVec 32))

(assert (=> d!11495 (and (bvsge lt!24291 #b00000000000000000000000000000000) (bvsle lt!24291 (bvsub (size!1999 (_keys!3665 (_2!1028 lt!23773))) #b00000000000000000000000000000000)))))

(assert (=> d!11495 (= lt!24291 e!39212)))

(declare-fun c!7672 () Bool)

(assert (=> d!11495 (= c!7672 (bvsge #b00000000000000000000000000000000 (size!1999 (_keys!3665 (_2!1028 lt!23773)))))))

(assert (=> d!11495 (and (bvsle #b00000000000000000000000000000000 (size!1999 (_keys!3665 (_2!1028 lt!23773)))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!1999 (_keys!3665 (_2!1028 lt!23773))) (size!1999 (_keys!3665 (_2!1028 lt!23773)))))))

(assert (=> d!11495 (= (arrayCountValidKeys!0 (_keys!3665 (_2!1028 lt!23773)) #b00000000000000000000000000000000 (size!1999 (_keys!3665 (_2!1028 lt!23773)))) lt!24291)))

(declare-fun b!59658 () Bool)

(assert (=> b!59658 (= e!39213 call!4503)))

(declare-fun b!59659 () Bool)

(assert (=> b!59659 (= e!39212 e!39213)))

(declare-fun c!7673 () Bool)

(assert (=> b!59659 (= c!7673 (validKeyInArray!0 (select (arr!1768 (_keys!3665 (_2!1028 lt!23773))) #b00000000000000000000000000000000)))))

(assert (= (and d!11495 c!7672) b!59657))

(assert (= (and d!11495 (not c!7672)) b!59659))

(assert (= (and b!59659 c!7673) b!59656))

(assert (= (and b!59659 (not c!7673)) b!59658))

(assert (= (or b!59656 b!59658) bm!4500))

(declare-fun m!51757 () Bool)

(assert (=> bm!4500 m!51757))

(assert (=> b!59659 m!51199))

(assert (=> b!59659 m!51199))

(assert (=> b!59659 m!51207))

(assert (=> b!59332 d!11495))

(assert (=> d!11283 d!11293))

(assert (=> d!11283 d!11275))

(assert (=> d!11283 d!11299))

(declare-fun d!11497 () Bool)

(declare-fun e!39215 () Bool)

(assert (=> d!11497 e!39215))

(declare-fun res!33081 () Bool)

(assert (=> d!11497 (=> res!33081 e!39215)))

(declare-fun lt!24292 () Bool)

(assert (=> d!11497 (= res!33081 (not lt!24292))))

(declare-fun lt!24294 () Bool)

(assert (=> d!11497 (= lt!24292 lt!24294)))

(declare-fun lt!24293 () Unit!1550)

(declare-fun e!39214 () Unit!1550)

(assert (=> d!11497 (= lt!24293 e!39214)))

(declare-fun c!7674 () Bool)

(assert (=> d!11497 (= c!7674 lt!24294)))

(assert (=> d!11497 (= lt!24294 (containsKey!126 (toList!693 lt!23690) lt!23694))))

(assert (=> d!11497 (= (contains!682 lt!23690 lt!23694) lt!24292)))

(declare-fun b!59660 () Bool)

(declare-fun lt!24295 () Unit!1550)

(assert (=> b!59660 (= e!39214 lt!24295)))

(assert (=> b!59660 (= lt!24295 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 lt!23690) lt!23694))))

(assert (=> b!59660 (isDefined!76 (getValueByKey!122 (toList!693 lt!23690) lt!23694))))

(declare-fun b!59661 () Bool)

(declare-fun Unit!1586 () Unit!1550)

(assert (=> b!59661 (= e!39214 Unit!1586)))

(declare-fun b!59662 () Bool)

(assert (=> b!59662 (= e!39215 (isDefined!76 (getValueByKey!122 (toList!693 lt!23690) lt!23694)))))

(assert (= (and d!11497 c!7674) b!59660))

(assert (= (and d!11497 (not c!7674)) b!59661))

(assert (= (and d!11497 (not res!33081)) b!59662))

(declare-fun m!51759 () Bool)

(assert (=> d!11497 m!51759))

(declare-fun m!51761 () Bool)

(assert (=> b!59660 m!51761))

(assert (=> b!59660 m!51001))

(assert (=> b!59660 m!51001))

(declare-fun m!51763 () Bool)

(assert (=> b!59660 m!51763))

(assert (=> b!59662 m!51001))

(assert (=> b!59662 m!51001))

(assert (=> b!59662 m!51763))

(assert (=> d!11283 d!11497))

(declare-fun d!11499 () Bool)

(assert (=> d!11499 (= (apply!66 (+!81 lt!23690 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))) lt!23694) (apply!66 lt!23690 lt!23694))))

(assert (=> d!11499 true))

(declare-fun _$34!759 () Unit!1550)

(assert (=> d!11499 (= (choose!313 lt!23690 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))) lt!23694) _$34!759)))

(declare-fun bs!2582 () Bool)

(assert (= bs!2582 d!11499))

(assert (=> bs!2582 m!50501))

(assert (=> bs!2582 m!50501))

(assert (=> bs!2582 m!50503))

(assert (=> bs!2582 m!50521))

(assert (=> d!11283 d!11499))

(declare-fun d!11501 () Bool)

(declare-fun e!39217 () Bool)

(assert (=> d!11501 e!39217))

(declare-fun res!33082 () Bool)

(assert (=> d!11501 (=> res!33082 e!39217)))

(declare-fun lt!24296 () Bool)

(assert (=> d!11501 (= res!33082 (not lt!24296))))

(declare-fun lt!24298 () Bool)

(assert (=> d!11501 (= lt!24296 lt!24298)))

(declare-fun lt!24297 () Unit!1550)

(declare-fun e!39216 () Unit!1550)

(assert (=> d!11501 (= lt!24297 e!39216)))

(declare-fun c!7675 () Bool)

(assert (=> d!11501 (= c!7675 lt!24298)))

(assert (=> d!11501 (= lt!24298 (containsKey!126 (toList!693 lt!24020) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11501 (= (contains!682 lt!24020 #b0000000000000000000000000000000000000000000000000000000000000000) lt!24296)))

(declare-fun b!59664 () Bool)

(declare-fun lt!24299 () Unit!1550)

(assert (=> b!59664 (= e!39216 lt!24299)))

(assert (=> b!59664 (= lt!24299 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 lt!24020) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59664 (isDefined!76 (getValueByKey!122 (toList!693 lt!24020) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59665 () Bool)

(declare-fun Unit!1587 () Unit!1550)

(assert (=> b!59665 (= e!39216 Unit!1587)))

(declare-fun b!59666 () Bool)

(assert (=> b!59666 (= e!39217 (isDefined!76 (getValueByKey!122 (toList!693 lt!24020) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11501 c!7675) b!59664))

(assert (= (and d!11501 (not c!7675)) b!59665))

(assert (= (and d!11501 (not res!33082)) b!59666))

(declare-fun m!51765 () Bool)

(assert (=> d!11501 m!51765))

(declare-fun m!51767 () Bool)

(assert (=> b!59664 m!51767))

(declare-fun m!51769 () Bool)

(assert (=> b!59664 m!51769))

(assert (=> b!59664 m!51769))

(declare-fun m!51771 () Bool)

(assert (=> b!59664 m!51771))

(assert (=> b!59666 m!51769))

(assert (=> b!59666 m!51769))

(assert (=> b!59666 m!51771))

(assert (=> d!11273 d!11501))

(assert (=> d!11273 d!11191))

(declare-fun d!11503 () Bool)

(assert (=> d!11503 (contains!682 (getCurrentListMap!389 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355))))

(declare-fun lt!24302 () Unit!1550)

(declare-fun choose!319 (array!3697 array!3699 (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 (_ BitVec 64) (_ BitVec 32) Int) Unit!1550)

(assert (=> d!11503 (= lt!24302 (choose!319 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(assert (=> d!11503 (validMask!0 (mask!5925 newMap!16))))

(assert (=> d!11503 (= (lemmaArrayContainsKeyThenInListMap!5 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) lt!24302)))

(declare-fun bs!2583 () Bool)

(assert (= bs!2583 d!11503))

(assert (=> bs!2583 m!50481))

(assert (=> bs!2583 m!50481))

(assert (=> bs!2583 m!50353))

(assert (=> bs!2583 m!50815))

(assert (=> bs!2583 m!50353))

(declare-fun m!51773 () Bool)

(assert (=> bs!2583 m!51773))

(assert (=> bs!2583 m!50657))

(assert (=> b!59142 d!11503))

(declare-fun d!11505 () Bool)

(declare-fun e!39219 () Bool)

(assert (=> d!11505 e!39219))

(declare-fun res!33083 () Bool)

(assert (=> d!11505 (=> res!33083 e!39219)))

(declare-fun lt!24303 () Bool)

(assert (=> d!11505 (= res!33083 (not lt!24303))))

(declare-fun lt!24305 () Bool)

(assert (=> d!11505 (= lt!24303 lt!24305)))

(declare-fun lt!24304 () Unit!1550)

(declare-fun e!39218 () Unit!1550)

(assert (=> d!11505 (= lt!24304 e!39218)))

(declare-fun c!7676 () Bool)

(assert (=> d!11505 (= c!7676 lt!24305)))

(assert (=> d!11505 (= lt!24305 (containsKey!126 (toList!693 (getCurrentListMap!389 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(assert (=> d!11505 (= (contains!682 (getCurrentListMap!389 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) lt!24303)))

(declare-fun b!59667 () Bool)

(declare-fun lt!24306 () Unit!1550)

(assert (=> b!59667 (= e!39218 lt!24306)))

(assert (=> b!59667 (= lt!24306 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 (getCurrentListMap!389 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(assert (=> b!59667 (isDefined!76 (getValueByKey!122 (toList!693 (getCurrentListMap!389 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(declare-fun b!59668 () Bool)

(declare-fun Unit!1588 () Unit!1550)

(assert (=> b!59668 (= e!39218 Unit!1588)))

(declare-fun b!59669 () Bool)

(assert (=> b!59669 (= e!39219 (isDefined!76 (getValueByKey!122 (toList!693 (getCurrentListMap!389 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355))))))

(assert (= (and d!11505 c!7676) b!59667))

(assert (= (and d!11505 (not c!7676)) b!59668))

(assert (= (and d!11505 (not res!33083)) b!59669))

(assert (=> d!11505 m!50353))

(declare-fun m!51775 () Bool)

(assert (=> d!11505 m!51775))

(assert (=> b!59667 m!50353))

(declare-fun m!51777 () Bool)

(assert (=> b!59667 m!51777))

(assert (=> b!59667 m!50353))

(declare-fun m!51779 () Bool)

(assert (=> b!59667 m!51779))

(assert (=> b!59667 m!51779))

(declare-fun m!51781 () Bool)

(assert (=> b!59667 m!51781))

(assert (=> b!59669 m!50353))

(assert (=> b!59669 m!51779))

(assert (=> b!59669 m!51779))

(assert (=> b!59669 m!51781))

(assert (=> b!59142 d!11505))

(assert (=> b!59142 d!11231))

(declare-fun d!11507 () Bool)

(declare-fun e!39221 () Bool)

(assert (=> d!11507 e!39221))

(declare-fun res!33084 () Bool)

(assert (=> d!11507 (=> res!33084 e!39221)))

(declare-fun lt!24307 () Bool)

(assert (=> d!11507 (= res!33084 (not lt!24307))))

(declare-fun lt!24309 () Bool)

(assert (=> d!11507 (= lt!24307 lt!24309)))

(declare-fun lt!24308 () Unit!1550)

(declare-fun e!39220 () Unit!1550)

(assert (=> d!11507 (= lt!24308 e!39220)))

(declare-fun c!7677 () Bool)

(assert (=> d!11507 (= c!7677 lt!24309)))

(assert (=> d!11507 (= lt!24309 (containsKey!126 (toList!693 lt!24103) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11507 (= (contains!682 lt!24103 #b0000000000000000000000000000000000000000000000000000000000000000) lt!24307)))

(declare-fun b!59670 () Bool)

(declare-fun lt!24310 () Unit!1550)

(assert (=> b!59670 (= e!39220 lt!24310)))

(assert (=> b!59670 (= lt!24310 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 lt!24103) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59670 (isDefined!76 (getValueByKey!122 (toList!693 lt!24103) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59671 () Bool)

(declare-fun Unit!1589 () Unit!1550)

(assert (=> b!59671 (= e!39220 Unit!1589)))

(declare-fun b!59672 () Bool)

(assert (=> b!59672 (= e!39221 (isDefined!76 (getValueByKey!122 (toList!693 lt!24103) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11507 c!7677) b!59670))

(assert (= (and d!11507 (not c!7677)) b!59671))

(assert (= (and d!11507 (not res!33084)) b!59672))

(declare-fun m!51783 () Bool)

(assert (=> d!11507 m!51783))

(declare-fun m!51785 () Bool)

(assert (=> b!59670 m!51785))

(declare-fun m!51787 () Bool)

(assert (=> b!59670 m!51787))

(assert (=> b!59670 m!51787))

(declare-fun m!51789 () Bool)

(assert (=> b!59670 m!51789))

(assert (=> b!59672 m!51787))

(assert (=> b!59672 m!51787))

(assert (=> b!59672 m!51789))

(assert (=> bm!4443 d!11507))

(declare-fun d!11509 () Bool)

(assert (=> d!11509 (= (get!1076 (getValueByKey!122 (toList!693 (+!81 lt!23700 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!23685)) (v!2382 (getValueByKey!122 (toList!693 (+!81 lt!23700 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!23685)))))

(assert (=> d!11303 d!11509))

(declare-fun d!11511 () Bool)

(declare-fun c!7678 () Bool)

(assert (=> d!11511 (= c!7678 (and ((_ is Cons!1433) (toList!693 (+!81 lt!23700 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))) (= (_1!1029 (h!2014 (toList!693 (+!81 lt!23700 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))) lt!23685)))))

(declare-fun e!39222 () Option!128)

(assert (=> d!11511 (= (getValueByKey!122 (toList!693 (+!81 lt!23700 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!23685) e!39222)))

(declare-fun b!59675 () Bool)

(declare-fun e!39223 () Option!128)

(assert (=> b!59675 (= e!39223 (getValueByKey!122 (t!4770 (toList!693 (+!81 lt!23700 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))) lt!23685))))

(declare-fun b!59674 () Bool)

(assert (=> b!59674 (= e!39222 e!39223)))

(declare-fun c!7679 () Bool)

(assert (=> b!59674 (= c!7679 (and ((_ is Cons!1433) (toList!693 (+!81 lt!23700 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))) (not (= (_1!1029 (h!2014 (toList!693 (+!81 lt!23700 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))) lt!23685))))))

(declare-fun b!59676 () Bool)

(assert (=> b!59676 (= e!39223 None!126)))

(declare-fun b!59673 () Bool)

(assert (=> b!59673 (= e!39222 (Some!127 (_2!1029 (h!2014 (toList!693 (+!81 lt!23700 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))))

(assert (= (and d!11511 c!7678) b!59673))

(assert (= (and d!11511 (not c!7678)) b!59674))

(assert (= (and b!59674 c!7679) b!59675))

(assert (= (and b!59674 (not c!7679)) b!59676))

(declare-fun m!51791 () Bool)

(assert (=> b!59675 m!51791))

(assert (=> d!11303 d!11511))

(declare-fun d!11513 () Bool)

(declare-fun res!33085 () Bool)

(declare-fun e!39224 () Bool)

(assert (=> d!11513 (=> res!33085 e!39224)))

(assert (=> d!11513 (= res!33085 (and ((_ is Cons!1433) (toList!693 (+!81 lt!23697 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))) (= (_1!1029 (h!2014 (toList!693 (+!81 lt!23697 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))) lt!23695)))))

(assert (=> d!11513 (= (containsKey!126 (toList!693 (+!81 lt!23697 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!23695) e!39224)))

(declare-fun b!59677 () Bool)

(declare-fun e!39225 () Bool)

(assert (=> b!59677 (= e!39224 e!39225)))

(declare-fun res!33086 () Bool)

(assert (=> b!59677 (=> (not res!33086) (not e!39225))))

(assert (=> b!59677 (= res!33086 (and (or (not ((_ is Cons!1433) (toList!693 (+!81 lt!23697 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))) (bvsle (_1!1029 (h!2014 (toList!693 (+!81 lt!23697 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))) lt!23695)) ((_ is Cons!1433) (toList!693 (+!81 lt!23697 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))) (bvslt (_1!1029 (h!2014 (toList!693 (+!81 lt!23697 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))) lt!23695)))))

(declare-fun b!59678 () Bool)

(assert (=> b!59678 (= e!39225 (containsKey!126 (t!4770 (toList!693 (+!81 lt!23697 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))) lt!23695))))

(assert (= (and d!11513 (not res!33085)) b!59677))

(assert (= (and b!59677 res!33086) b!59678))

(declare-fun m!51793 () Bool)

(assert (=> b!59678 m!51793))

(assert (=> d!11301 d!11513))

(declare-fun d!11515 () Bool)

(assert (=> d!11515 (= (isDefined!76 (getValueByKey!122 (toList!693 lt!23704) #b1000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!298 (getValueByKey!122 (toList!693 lt!23704) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!2584 () Bool)

(assert (= bs!2584 d!11515))

(assert (=> bs!2584 m!50873))

(declare-fun m!51795 () Bool)

(assert (=> bs!2584 m!51795))

(assert (=> b!59301 d!11515))

(declare-fun d!11517 () Bool)

(declare-fun c!7680 () Bool)

(assert (=> d!11517 (= c!7680 (and ((_ is Cons!1433) (toList!693 lt!23704)) (= (_1!1029 (h!2014 (toList!693 lt!23704))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!39226 () Option!128)

(assert (=> d!11517 (= (getValueByKey!122 (toList!693 lt!23704) #b1000000000000000000000000000000000000000000000000000000000000000) e!39226)))

(declare-fun b!59681 () Bool)

(declare-fun e!39227 () Option!128)

(assert (=> b!59681 (= e!39227 (getValueByKey!122 (t!4770 (toList!693 lt!23704)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59680 () Bool)

(assert (=> b!59680 (= e!39226 e!39227)))

(declare-fun c!7681 () Bool)

(assert (=> b!59680 (= c!7681 (and ((_ is Cons!1433) (toList!693 lt!23704)) (not (= (_1!1029 (h!2014 (toList!693 lt!23704))) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!59682 () Bool)

(assert (=> b!59682 (= e!39227 None!126)))

(declare-fun b!59679 () Bool)

(assert (=> b!59679 (= e!39226 (Some!127 (_2!1029 (h!2014 (toList!693 lt!23704)))))))

(assert (= (and d!11517 c!7680) b!59679))

(assert (= (and d!11517 (not c!7680)) b!59680))

(assert (= (and b!59680 c!7681) b!59681))

(assert (= (and b!59680 (not c!7681)) b!59682))

(declare-fun m!51797 () Bool)

(assert (=> b!59681 m!51797))

(assert (=> b!59301 d!11517))

(assert (=> d!11223 d!11215))

(declare-fun d!11519 () Bool)

(assert (=> d!11519 (contains!682 (+!81 lt!23995 (tuple2!2037 lt!23994 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)))) lt!23993)))

(declare-fun lt!24311 () Unit!1550)

(assert (=> d!11519 (= lt!24311 (choose!314 lt!23995 lt!23994 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)) lt!23993))))

(assert (=> d!11519 (contains!682 lt!23995 lt!23993)))

(assert (=> d!11519 (= (addStillContains!42 lt!23995 lt!23994 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)) lt!23993) lt!24311)))

(declare-fun bs!2585 () Bool)

(assert (= bs!2585 d!11519))

(assert (=> bs!2585 m!50897))

(assert (=> bs!2585 m!50897))

(assert (=> bs!2585 m!50899))

(declare-fun m!51799 () Bool)

(assert (=> bs!2585 m!51799))

(declare-fun m!51801 () Bool)

(assert (=> bs!2585 m!51801))

(assert (=> b!59170 d!11519))

(declare-fun d!11521 () Bool)

(assert (=> d!11521 (= (apply!66 (+!81 lt!23988 (tuple2!2037 lt!23985 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)))) lt!23992) (get!1076 (getValueByKey!122 (toList!693 (+!81 lt!23988 (tuple2!2037 lt!23985 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))))) lt!23992)))))

(declare-fun bs!2586 () Bool)

(assert (= bs!2586 d!11521))

(declare-fun m!51803 () Bool)

(assert (=> bs!2586 m!51803))

(assert (=> bs!2586 m!51803))

(declare-fun m!51805 () Bool)

(assert (=> bs!2586 m!51805))

(assert (=> b!59170 d!11521))

(declare-fun d!11523 () Bool)

(declare-fun e!39228 () Bool)

(assert (=> d!11523 e!39228))

(declare-fun res!33087 () Bool)

(assert (=> d!11523 (=> (not res!33087) (not e!39228))))

(declare-fun lt!24314 () ListLongMap!1355)

(assert (=> d!11523 (= res!33087 (contains!682 lt!24314 (_1!1029 (tuple2!2037 lt!23994 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))))))))

(declare-fun lt!24315 () List!1437)

(assert (=> d!11523 (= lt!24314 (ListLongMap!1356 lt!24315))))

(declare-fun lt!24312 () Unit!1550)

(declare-fun lt!24313 () Unit!1550)

(assert (=> d!11523 (= lt!24312 lt!24313)))

(assert (=> d!11523 (= (getValueByKey!122 lt!24315 (_1!1029 (tuple2!2037 lt!23994 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))))) (Some!127 (_2!1029 (tuple2!2037 lt!23994 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))))))))

(assert (=> d!11523 (= lt!24313 (lemmaContainsTupThenGetReturnValue!42 lt!24315 (_1!1029 (tuple2!2037 lt!23994 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)))) (_2!1029 (tuple2!2037 lt!23994 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))))))))

(assert (=> d!11523 (= lt!24315 (insertStrictlySorted!45 (toList!693 lt!23995) (_1!1029 (tuple2!2037 lt!23994 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)))) (_2!1029 (tuple2!2037 lt!23994 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))))))))

(assert (=> d!11523 (= (+!81 lt!23995 (tuple2!2037 lt!23994 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)))) lt!24314)))

(declare-fun b!59683 () Bool)

(declare-fun res!33088 () Bool)

(assert (=> b!59683 (=> (not res!33088) (not e!39228))))

(assert (=> b!59683 (= res!33088 (= (getValueByKey!122 (toList!693 lt!24314) (_1!1029 (tuple2!2037 lt!23994 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))))) (Some!127 (_2!1029 (tuple2!2037 lt!23994 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)))))))))

(declare-fun b!59684 () Bool)

(assert (=> b!59684 (= e!39228 (contains!684 (toList!693 lt!24314) (tuple2!2037 lt!23994 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)))))))

(assert (= (and d!11523 res!33087) b!59683))

(assert (= (and b!59683 res!33088) b!59684))

(declare-fun m!51807 () Bool)

(assert (=> d!11523 m!51807))

(declare-fun m!51809 () Bool)

(assert (=> d!11523 m!51809))

(declare-fun m!51811 () Bool)

(assert (=> d!11523 m!51811))

(declare-fun m!51813 () Bool)

(assert (=> d!11523 m!51813))

(declare-fun m!51815 () Bool)

(assert (=> b!59683 m!51815))

(declare-fun m!51817 () Bool)

(assert (=> b!59684 m!51817))

(assert (=> b!59170 d!11523))

(declare-fun b!59685 () Bool)

(declare-fun e!39234 () Bool)

(declare-fun e!39232 () Bool)

(assert (=> b!59685 (= e!39234 e!39232)))

(declare-fun c!7685 () Bool)

(assert (=> b!59685 (= c!7685 (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(declare-fun b!59686 () Bool)

(declare-fun res!33090 () Bool)

(declare-fun e!39233 () Bool)

(assert (=> b!59686 (=> (not res!33090) (not e!39233))))

(declare-fun lt!24319 () ListLongMap!1355)

(assert (=> b!59686 (= res!33090 (not (contains!682 lt!24319 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bm!4501 () Bool)

(declare-fun call!4504 () ListLongMap!1355)

(assert (=> bm!4501 (= call!4504 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (ite c!7466 (_values!2025 newMap!16) lt!23792) (mask!5925 newMap!16) (ite (and c!7466 c!7465) lt!23781 (extraKeys!1929 newMap!16)) (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)) (minValue!1958 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2042 newMap!16)))))

(declare-fun d!11525 () Bool)

(assert (=> d!11525 e!39233))

(declare-fun res!33092 () Bool)

(assert (=> d!11525 (=> (not res!33092) (not e!39233))))

(assert (=> d!11525 (= res!33092 (not (contains!682 lt!24319 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!39230 () ListLongMap!1355)

(assert (=> d!11525 (= lt!24319 e!39230)))

(declare-fun c!7684 () Bool)

(assert (=> d!11525 (= c!7684 (bvsge #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(assert (=> d!11525 (validMask!0 (mask!5925 newMap!16))))

(assert (=> d!11525 (= (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (ite c!7466 (_values!2025 newMap!16) lt!23792) (mask!5925 newMap!16) (ite (and c!7466 c!7465) lt!23781 (extraKeys!1929 newMap!16)) (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) lt!24319)))

(declare-fun b!59687 () Bool)

(assert (=> b!59687 (= e!39233 e!39234)))

(declare-fun c!7682 () Bool)

(declare-fun e!39235 () Bool)

(assert (=> b!59687 (= c!7682 e!39235)))

(declare-fun res!33091 () Bool)

(assert (=> b!59687 (=> (not res!33091) (not e!39235))))

(assert (=> b!59687 (= res!33091 (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(declare-fun b!59688 () Bool)

(declare-fun e!39231 () ListLongMap!1355)

(assert (=> b!59688 (= e!39231 call!4504)))

(declare-fun b!59689 () Bool)

(assert (=> b!59689 (= e!39230 e!39231)))

(declare-fun c!7683 () Bool)

(assert (=> b!59689 (= c!7683 (validKeyInArray!0 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59690 () Bool)

(assert (=> b!59690 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(assert (=> b!59690 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2000 (ite c!7466 (_values!2025 newMap!16) lt!23792))))))

(declare-fun e!39229 () Bool)

(assert (=> b!59690 (= e!39229 (= (apply!66 lt!24319 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)) (get!1073 (select (arr!1769 (ite c!7466 (_values!2025 newMap!16) lt!23792)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!59691 () Bool)

(declare-fun lt!24316 () Unit!1550)

(declare-fun lt!24317 () Unit!1550)

(assert (=> b!59691 (= lt!24316 lt!24317)))

(declare-fun lt!24320 () (_ BitVec 64))

(declare-fun lt!24322 () ListLongMap!1355)

(declare-fun lt!24321 () (_ BitVec 64))

(declare-fun lt!24318 () V!2841)

(assert (=> b!59691 (not (contains!682 (+!81 lt!24322 (tuple2!2037 lt!24320 lt!24318)) lt!24321))))

(assert (=> b!59691 (= lt!24317 (addStillNotContains!16 lt!24322 lt!24320 lt!24318 lt!24321))))

(assert (=> b!59691 (= lt!24321 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!59691 (= lt!24318 (get!1073 (select (arr!1769 (ite c!7466 (_values!2025 newMap!16) lt!23792)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!59691 (= lt!24320 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!59691 (= lt!24322 call!4504)))

(assert (=> b!59691 (= e!39231 (+!81 call!4504 (tuple2!2037 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000) (get!1073 (select (arr!1769 (ite c!7466 (_values!2025 newMap!16) lt!23792)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!59692 () Bool)

(assert (=> b!59692 (= e!39235 (validKeyInArray!0 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59692 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!59693 () Bool)

(assert (=> b!59693 (= e!39232 (isEmpty!297 lt!24319))))

(declare-fun b!59694 () Bool)

(assert (=> b!59694 (= e!39230 (ListLongMap!1356 Nil!1434))))

(declare-fun b!59695 () Bool)

(assert (=> b!59695 (= e!39232 (= lt!24319 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (ite c!7466 (_values!2025 newMap!16) lt!23792) (mask!5925 newMap!16) (ite (and c!7466 c!7465) lt!23781 (extraKeys!1929 newMap!16)) (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)) (minValue!1958 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2042 newMap!16))))))

(declare-fun b!59696 () Bool)

(assert (=> b!59696 (= e!39234 e!39229)))

(assert (=> b!59696 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(declare-fun res!33089 () Bool)

(assert (=> b!59696 (= res!33089 (contains!682 lt!24319 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59696 (=> (not res!33089) (not e!39229))))

(assert (= (and d!11525 c!7684) b!59694))

(assert (= (and d!11525 (not c!7684)) b!59689))

(assert (= (and b!59689 c!7683) b!59691))

(assert (= (and b!59689 (not c!7683)) b!59688))

(assert (= (or b!59691 b!59688) bm!4501))

(assert (= (and d!11525 res!33092) b!59686))

(assert (= (and b!59686 res!33090) b!59687))

(assert (= (and b!59687 res!33091) b!59692))

(assert (= (and b!59687 c!7682) b!59696))

(assert (= (and b!59687 (not c!7682)) b!59685))

(assert (= (and b!59696 res!33089) b!59690))

(assert (= (and b!59685 c!7685) b!59695))

(assert (= (and b!59685 (not c!7685)) b!59693))

(declare-fun b_lambda!2627 () Bool)

(assert (=> (not b_lambda!2627) (not b!59690)))

(assert (=> b!59690 t!4781))

(declare-fun b_and!3621 () Bool)

(assert (= b_and!3617 (and (=> t!4781 result!2381) b_and!3621)))

(assert (=> b!59690 t!4783))

(declare-fun b_and!3623 () Bool)

(assert (= b_and!3619 (and (=> t!4783 result!2383) b_and!3623)))

(declare-fun b_lambda!2629 () Bool)

(assert (=> (not b_lambda!2629) (not b!59691)))

(assert (=> b!59691 t!4781))

(declare-fun b_and!3625 () Bool)

(assert (= b_and!3621 (and (=> t!4781 result!2381) b_and!3625)))

(assert (=> b!59691 t!4783))

(declare-fun b_and!3627 () Bool)

(assert (= b_and!3623 (and (=> t!4783 result!2383) b_and!3627)))

(declare-fun m!51819 () Bool)

(assert (=> d!11525 m!51819))

(assert (=> d!11525 m!50657))

(assert (=> b!59690 m!50915))

(assert (=> b!59690 m!50643))

(assert (=> b!59690 m!50643))

(declare-fun m!51821 () Bool)

(assert (=> b!59690 m!51821))

(assert (=> b!59690 m!50697))

(assert (=> b!59690 m!50915))

(assert (=> b!59690 m!50697))

(assert (=> b!59690 m!50917))

(declare-fun m!51823 () Bool)

(assert (=> b!59686 m!51823))

(declare-fun m!51825 () Bool)

(assert (=> b!59693 m!51825))

(declare-fun m!51827 () Bool)

(assert (=> b!59691 m!51827))

(assert (=> b!59691 m!50915))

(assert (=> b!59691 m!50643))

(declare-fun m!51829 () Bool)

(assert (=> b!59691 m!51829))

(declare-fun m!51831 () Bool)

(assert (=> b!59691 m!51831))

(declare-fun m!51833 () Bool)

(assert (=> b!59691 m!51833))

(assert (=> b!59691 m!51831))

(assert (=> b!59691 m!50697))

(assert (=> b!59691 m!50915))

(assert (=> b!59691 m!50697))

(assert (=> b!59691 m!50917))

(assert (=> b!59692 m!50643))

(assert (=> b!59692 m!50643))

(assert (=> b!59692 m!50645))

(declare-fun m!51835 () Bool)

(assert (=> bm!4501 m!51835))

(assert (=> b!59696 m!50643))

(assert (=> b!59696 m!50643))

(declare-fun m!51837 () Bool)

(assert (=> b!59696 m!51837))

(assert (=> b!59695 m!51835))

(assert (=> b!59689 m!50643))

(assert (=> b!59689 m!50643))

(assert (=> b!59689 m!50645))

(assert (=> b!59170 d!11525))

(declare-fun d!11527 () Bool)

(assert (=> d!11527 (= (apply!66 lt!23988 lt!23992) (get!1076 (getValueByKey!122 (toList!693 lt!23988) lt!23992)))))

(declare-fun bs!2587 () Bool)

(assert (= bs!2587 d!11527))

(declare-fun m!51839 () Bool)

(assert (=> bs!2587 m!51839))

(assert (=> bs!2587 m!51839))

(declare-fun m!51841 () Bool)

(assert (=> bs!2587 m!51841))

(assert (=> b!59170 d!11527))

(declare-fun d!11529 () Bool)

(assert (=> d!11529 (= (apply!66 lt!24000 lt!23984) (get!1076 (getValueByKey!122 (toList!693 lt!24000) lt!23984)))))

(declare-fun bs!2588 () Bool)

(assert (= bs!2588 d!11529))

(declare-fun m!51843 () Bool)

(assert (=> bs!2588 m!51843))

(assert (=> bs!2588 m!51843))

(declare-fun m!51845 () Bool)

(assert (=> bs!2588 m!51845))

(assert (=> b!59170 d!11529))

(declare-fun d!11531 () Bool)

(assert (=> d!11531 (= (apply!66 (+!81 lt!24000 (tuple2!2037 lt!23982 (minValue!1958 newMap!16))) lt!23984) (get!1076 (getValueByKey!122 (toList!693 (+!81 lt!24000 (tuple2!2037 lt!23982 (minValue!1958 newMap!16)))) lt!23984)))))

(declare-fun bs!2589 () Bool)

(assert (= bs!2589 d!11531))

(declare-fun m!51847 () Bool)

(assert (=> bs!2589 m!51847))

(assert (=> bs!2589 m!51847))

(declare-fun m!51849 () Bool)

(assert (=> bs!2589 m!51849))

(assert (=> b!59170 d!11531))

(declare-fun d!11533 () Bool)

(assert (=> d!11533 (= (apply!66 (+!81 lt!24000 (tuple2!2037 lt!23982 (minValue!1958 newMap!16))) lt!23984) (apply!66 lt!24000 lt!23984))))

(declare-fun lt!24323 () Unit!1550)

(assert (=> d!11533 (= lt!24323 (choose!313 lt!24000 lt!23982 (minValue!1958 newMap!16) lt!23984))))

(declare-fun e!39236 () Bool)

(assert (=> d!11533 e!39236))

(declare-fun res!33093 () Bool)

(assert (=> d!11533 (=> (not res!33093) (not e!39236))))

(assert (=> d!11533 (= res!33093 (contains!682 lt!24000 lt!23984))))

(assert (=> d!11533 (= (addApplyDifferent!42 lt!24000 lt!23982 (minValue!1958 newMap!16) lt!23984) lt!24323)))

(declare-fun b!59697 () Bool)

(assert (=> b!59697 (= e!39236 (not (= lt!23984 lt!23982)))))

(assert (= (and d!11533 res!33093) b!59697))

(assert (=> d!11533 m!50881))

(declare-fun m!51851 () Bool)

(assert (=> d!11533 m!51851))

(declare-fun m!51853 () Bool)

(assert (=> d!11533 m!51853))

(assert (=> d!11533 m!50881))

(assert (=> d!11533 m!50883))

(assert (=> d!11533 m!50889))

(assert (=> b!59170 d!11533))

(declare-fun d!11535 () Bool)

(declare-fun e!39237 () Bool)

(assert (=> d!11535 e!39237))

(declare-fun res!33094 () Bool)

(assert (=> d!11535 (=> (not res!33094) (not e!39237))))

(declare-fun lt!24326 () ListLongMap!1355)

(assert (=> d!11535 (= res!33094 (contains!682 lt!24326 (_1!1029 (tuple2!2037 lt!23985 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))))))))

(declare-fun lt!24327 () List!1437)

(assert (=> d!11535 (= lt!24326 (ListLongMap!1356 lt!24327))))

(declare-fun lt!24324 () Unit!1550)

(declare-fun lt!24325 () Unit!1550)

(assert (=> d!11535 (= lt!24324 lt!24325)))

(assert (=> d!11535 (= (getValueByKey!122 lt!24327 (_1!1029 (tuple2!2037 lt!23985 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))))) (Some!127 (_2!1029 (tuple2!2037 lt!23985 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))))))))

(assert (=> d!11535 (= lt!24325 (lemmaContainsTupThenGetReturnValue!42 lt!24327 (_1!1029 (tuple2!2037 lt!23985 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)))) (_2!1029 (tuple2!2037 lt!23985 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))))))))

(assert (=> d!11535 (= lt!24327 (insertStrictlySorted!45 (toList!693 lt!23988) (_1!1029 (tuple2!2037 lt!23985 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)))) (_2!1029 (tuple2!2037 lt!23985 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))))))))

(assert (=> d!11535 (= (+!81 lt!23988 (tuple2!2037 lt!23985 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)))) lt!24326)))

(declare-fun b!59698 () Bool)

(declare-fun res!33095 () Bool)

(assert (=> b!59698 (=> (not res!33095) (not e!39237))))

(assert (=> b!59698 (= res!33095 (= (getValueByKey!122 (toList!693 lt!24326) (_1!1029 (tuple2!2037 lt!23985 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))))) (Some!127 (_2!1029 (tuple2!2037 lt!23985 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)))))))))

(declare-fun b!59699 () Bool)

(assert (=> b!59699 (= e!39237 (contains!684 (toList!693 lt!24326) (tuple2!2037 lt!23985 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)))))))

(assert (= (and d!11535 res!33094) b!59698))

(assert (= (and b!59698 res!33095) b!59699))

(declare-fun m!51855 () Bool)

(assert (=> d!11535 m!51855))

(declare-fun m!51857 () Bool)

(assert (=> d!11535 m!51857))

(declare-fun m!51859 () Bool)

(assert (=> d!11535 m!51859))

(declare-fun m!51861 () Bool)

(assert (=> d!11535 m!51861))

(declare-fun m!51863 () Bool)

(assert (=> b!59698 m!51863))

(declare-fun m!51865 () Bool)

(assert (=> b!59699 m!51865))

(assert (=> b!59170 d!11535))

(declare-fun d!11537 () Bool)

(assert (=> d!11537 (= (apply!66 lt!23998 lt!23983) (get!1076 (getValueByKey!122 (toList!693 lt!23998) lt!23983)))))

(declare-fun bs!2590 () Bool)

(assert (= bs!2590 d!11537))

(declare-fun m!51867 () Bool)

(assert (=> bs!2590 m!51867))

(assert (=> bs!2590 m!51867))

(declare-fun m!51869 () Bool)

(assert (=> bs!2590 m!51869))

(assert (=> b!59170 d!11537))

(declare-fun d!11539 () Bool)

(assert (=> d!11539 (= (apply!66 (+!81 lt!23998 (tuple2!2037 lt!23991 (minValue!1958 newMap!16))) lt!23983) (apply!66 lt!23998 lt!23983))))

(declare-fun lt!24328 () Unit!1550)

(assert (=> d!11539 (= lt!24328 (choose!313 lt!23998 lt!23991 (minValue!1958 newMap!16) lt!23983))))

(declare-fun e!39238 () Bool)

(assert (=> d!11539 e!39238))

(declare-fun res!33096 () Bool)

(assert (=> d!11539 (=> (not res!33096) (not e!39238))))

(assert (=> d!11539 (= res!33096 (contains!682 lt!23998 lt!23983))))

(assert (=> d!11539 (= (addApplyDifferent!42 lt!23998 lt!23991 (minValue!1958 newMap!16) lt!23983) lt!24328)))

(declare-fun b!59700 () Bool)

(assert (=> b!59700 (= e!39238 (not (= lt!23983 lt!23991)))))

(assert (= (and d!11539 res!33096) b!59700))

(assert (=> d!11539 m!50903))

(declare-fun m!51871 () Bool)

(assert (=> d!11539 m!51871))

(declare-fun m!51873 () Bool)

(assert (=> d!11539 m!51873))

(assert (=> d!11539 m!50903))

(assert (=> d!11539 m!50905))

(assert (=> d!11539 m!50885))

(assert (=> b!59170 d!11539))

(declare-fun d!11541 () Bool)

(declare-fun e!39240 () Bool)

(assert (=> d!11541 e!39240))

(declare-fun res!33097 () Bool)

(assert (=> d!11541 (=> res!33097 e!39240)))

(declare-fun lt!24329 () Bool)

(assert (=> d!11541 (= res!33097 (not lt!24329))))

(declare-fun lt!24331 () Bool)

(assert (=> d!11541 (= lt!24329 lt!24331)))

(declare-fun lt!24330 () Unit!1550)

(declare-fun e!39239 () Unit!1550)

(assert (=> d!11541 (= lt!24330 e!39239)))

(declare-fun c!7686 () Bool)

(assert (=> d!11541 (= c!7686 lt!24331)))

(assert (=> d!11541 (= lt!24331 (containsKey!126 (toList!693 (+!81 lt!23995 (tuple2!2037 lt!23994 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))))) lt!23993))))

(assert (=> d!11541 (= (contains!682 (+!81 lt!23995 (tuple2!2037 lt!23994 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)))) lt!23993) lt!24329)))

(declare-fun b!59701 () Bool)

(declare-fun lt!24332 () Unit!1550)

(assert (=> b!59701 (= e!39239 lt!24332)))

(assert (=> b!59701 (= lt!24332 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 (+!81 lt!23995 (tuple2!2037 lt!23994 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))))) lt!23993))))

(assert (=> b!59701 (isDefined!76 (getValueByKey!122 (toList!693 (+!81 lt!23995 (tuple2!2037 lt!23994 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))))) lt!23993))))

(declare-fun b!59702 () Bool)

(declare-fun Unit!1590 () Unit!1550)

(assert (=> b!59702 (= e!39239 Unit!1590)))

(declare-fun b!59703 () Bool)

(assert (=> b!59703 (= e!39240 (isDefined!76 (getValueByKey!122 (toList!693 (+!81 lt!23995 (tuple2!2037 lt!23994 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))))) lt!23993)))))

(assert (= (and d!11541 c!7686) b!59701))

(assert (= (and d!11541 (not c!7686)) b!59702))

(assert (= (and d!11541 (not res!33097)) b!59703))

(declare-fun m!51875 () Bool)

(assert (=> d!11541 m!51875))

(declare-fun m!51877 () Bool)

(assert (=> b!59701 m!51877))

(declare-fun m!51879 () Bool)

(assert (=> b!59701 m!51879))

(assert (=> b!59701 m!51879))

(declare-fun m!51881 () Bool)

(assert (=> b!59701 m!51881))

(assert (=> b!59703 m!51879))

(assert (=> b!59703 m!51879))

(assert (=> b!59703 m!51881))

(assert (=> b!59170 d!11541))

(declare-fun d!11543 () Bool)

(declare-fun e!39241 () Bool)

(assert (=> d!11543 e!39241))

(declare-fun res!33098 () Bool)

(assert (=> d!11543 (=> (not res!33098) (not e!39241))))

(declare-fun lt!24335 () ListLongMap!1355)

(assert (=> d!11543 (= res!33098 (contains!682 lt!24335 (_1!1029 (tuple2!2037 lt!23982 (minValue!1958 newMap!16)))))))

(declare-fun lt!24336 () List!1437)

(assert (=> d!11543 (= lt!24335 (ListLongMap!1356 lt!24336))))

(declare-fun lt!24333 () Unit!1550)

(declare-fun lt!24334 () Unit!1550)

(assert (=> d!11543 (= lt!24333 lt!24334)))

(assert (=> d!11543 (= (getValueByKey!122 lt!24336 (_1!1029 (tuple2!2037 lt!23982 (minValue!1958 newMap!16)))) (Some!127 (_2!1029 (tuple2!2037 lt!23982 (minValue!1958 newMap!16)))))))

(assert (=> d!11543 (= lt!24334 (lemmaContainsTupThenGetReturnValue!42 lt!24336 (_1!1029 (tuple2!2037 lt!23982 (minValue!1958 newMap!16))) (_2!1029 (tuple2!2037 lt!23982 (minValue!1958 newMap!16)))))))

(assert (=> d!11543 (= lt!24336 (insertStrictlySorted!45 (toList!693 lt!24000) (_1!1029 (tuple2!2037 lt!23982 (minValue!1958 newMap!16))) (_2!1029 (tuple2!2037 lt!23982 (minValue!1958 newMap!16)))))))

(assert (=> d!11543 (= (+!81 lt!24000 (tuple2!2037 lt!23982 (minValue!1958 newMap!16))) lt!24335)))

(declare-fun b!59704 () Bool)

(declare-fun res!33099 () Bool)

(assert (=> b!59704 (=> (not res!33099) (not e!39241))))

(assert (=> b!59704 (= res!33099 (= (getValueByKey!122 (toList!693 lt!24335) (_1!1029 (tuple2!2037 lt!23982 (minValue!1958 newMap!16)))) (Some!127 (_2!1029 (tuple2!2037 lt!23982 (minValue!1958 newMap!16))))))))

(declare-fun b!59705 () Bool)

(assert (=> b!59705 (= e!39241 (contains!684 (toList!693 lt!24335) (tuple2!2037 lt!23982 (minValue!1958 newMap!16))))))

(assert (= (and d!11543 res!33098) b!59704))

(assert (= (and b!59704 res!33099) b!59705))

(declare-fun m!51883 () Bool)

(assert (=> d!11543 m!51883))

(declare-fun m!51885 () Bool)

(assert (=> d!11543 m!51885))

(declare-fun m!51887 () Bool)

(assert (=> d!11543 m!51887))

(declare-fun m!51889 () Bool)

(assert (=> d!11543 m!51889))

(declare-fun m!51891 () Bool)

(assert (=> b!59704 m!51891))

(declare-fun m!51893 () Bool)

(assert (=> b!59705 m!51893))

(assert (=> b!59170 d!11543))

(declare-fun d!11545 () Bool)

(assert (=> d!11545 (= (apply!66 (+!81 lt!23988 (tuple2!2037 lt!23985 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)))) lt!23992) (apply!66 lt!23988 lt!23992))))

(declare-fun lt!24337 () Unit!1550)

(assert (=> d!11545 (= lt!24337 (choose!313 lt!23988 lt!23985 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)) lt!23992))))

(declare-fun e!39242 () Bool)

(assert (=> d!11545 e!39242))

(declare-fun res!33100 () Bool)

(assert (=> d!11545 (=> (not res!33100) (not e!39242))))

(assert (=> d!11545 (= res!33100 (contains!682 lt!23988 lt!23992))))

(assert (=> d!11545 (= (addApplyDifferent!42 lt!23988 lt!23985 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16)) lt!23992) lt!24337)))

(declare-fun b!59706 () Bool)

(assert (=> b!59706 (= e!39242 (not (= lt!23992 lt!23985)))))

(assert (= (and d!11545 res!33100) b!59706))

(assert (=> d!11545 m!50891))

(declare-fun m!51895 () Bool)

(assert (=> d!11545 m!51895))

(declare-fun m!51897 () Bool)

(assert (=> d!11545 m!51897))

(assert (=> d!11545 m!50891))

(assert (=> d!11545 m!50893))

(assert (=> d!11545 m!50911))

(assert (=> b!59170 d!11545))

(declare-fun d!11547 () Bool)

(declare-fun e!39243 () Bool)

(assert (=> d!11547 e!39243))

(declare-fun res!33101 () Bool)

(assert (=> d!11547 (=> (not res!33101) (not e!39243))))

(declare-fun lt!24340 () ListLongMap!1355)

(assert (=> d!11547 (= res!33101 (contains!682 lt!24340 (_1!1029 (tuple2!2037 lt!23991 (minValue!1958 newMap!16)))))))

(declare-fun lt!24341 () List!1437)

(assert (=> d!11547 (= lt!24340 (ListLongMap!1356 lt!24341))))

(declare-fun lt!24338 () Unit!1550)

(declare-fun lt!24339 () Unit!1550)

(assert (=> d!11547 (= lt!24338 lt!24339)))

(assert (=> d!11547 (= (getValueByKey!122 lt!24341 (_1!1029 (tuple2!2037 lt!23991 (minValue!1958 newMap!16)))) (Some!127 (_2!1029 (tuple2!2037 lt!23991 (minValue!1958 newMap!16)))))))

(assert (=> d!11547 (= lt!24339 (lemmaContainsTupThenGetReturnValue!42 lt!24341 (_1!1029 (tuple2!2037 lt!23991 (minValue!1958 newMap!16))) (_2!1029 (tuple2!2037 lt!23991 (minValue!1958 newMap!16)))))))

(assert (=> d!11547 (= lt!24341 (insertStrictlySorted!45 (toList!693 lt!23998) (_1!1029 (tuple2!2037 lt!23991 (minValue!1958 newMap!16))) (_2!1029 (tuple2!2037 lt!23991 (minValue!1958 newMap!16)))))))

(assert (=> d!11547 (= (+!81 lt!23998 (tuple2!2037 lt!23991 (minValue!1958 newMap!16))) lt!24340)))

(declare-fun b!59707 () Bool)

(declare-fun res!33102 () Bool)

(assert (=> b!59707 (=> (not res!33102) (not e!39243))))

(assert (=> b!59707 (= res!33102 (= (getValueByKey!122 (toList!693 lt!24340) (_1!1029 (tuple2!2037 lt!23991 (minValue!1958 newMap!16)))) (Some!127 (_2!1029 (tuple2!2037 lt!23991 (minValue!1958 newMap!16))))))))

(declare-fun b!59708 () Bool)

(assert (=> b!59708 (= e!39243 (contains!684 (toList!693 lt!24340) (tuple2!2037 lt!23991 (minValue!1958 newMap!16))))))

(assert (= (and d!11547 res!33101) b!59707))

(assert (= (and b!59707 res!33102) b!59708))

(declare-fun m!51899 () Bool)

(assert (=> d!11547 m!51899))

(declare-fun m!51901 () Bool)

(assert (=> d!11547 m!51901))

(declare-fun m!51903 () Bool)

(assert (=> d!11547 m!51903))

(declare-fun m!51905 () Bool)

(assert (=> d!11547 m!51905))

(declare-fun m!51907 () Bool)

(assert (=> b!59707 m!51907))

(declare-fun m!51909 () Bool)

(assert (=> b!59708 m!51909))

(assert (=> b!59170 d!11547))

(declare-fun d!11549 () Bool)

(assert (=> d!11549 (= (apply!66 (+!81 lt!23998 (tuple2!2037 lt!23991 (minValue!1958 newMap!16))) lt!23983) (get!1076 (getValueByKey!122 (toList!693 (+!81 lt!23998 (tuple2!2037 lt!23991 (minValue!1958 newMap!16)))) lt!23983)))))

(declare-fun bs!2591 () Bool)

(assert (= bs!2591 d!11549))

(declare-fun m!51911 () Bool)

(assert (=> bs!2591 m!51911))

(assert (=> bs!2591 m!51911))

(declare-fun m!51913 () Bool)

(assert (=> bs!2591 m!51913))

(assert (=> b!59170 d!11549))

(declare-fun d!11551 () Bool)

(declare-fun c!7687 () Bool)

(assert (=> d!11551 (= c!7687 (and ((_ is Cons!1433) (toList!693 lt!24026)) (= (_1!1029 (h!2014 (toList!693 lt!24026))) (_1!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(declare-fun e!39244 () Option!128)

(assert (=> d!11551 (= (getValueByKey!122 (toList!693 lt!24026) (_1!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) e!39244)))

(declare-fun b!59711 () Bool)

(declare-fun e!39245 () Option!128)

(assert (=> b!59711 (= e!39245 (getValueByKey!122 (t!4770 (toList!693 lt!24026)) (_1!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun b!59710 () Bool)

(assert (=> b!59710 (= e!39244 e!39245)))

(declare-fun c!7688 () Bool)

(assert (=> b!59710 (= c!7688 (and ((_ is Cons!1433) (toList!693 lt!24026)) (not (= (_1!1029 (h!2014 (toList!693 lt!24026))) (_1!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))))

(declare-fun b!59712 () Bool)

(assert (=> b!59712 (= e!39245 None!126)))

(declare-fun b!59709 () Bool)

(assert (=> b!59709 (= e!39244 (Some!127 (_2!1029 (h!2014 (toList!693 lt!24026)))))))

(assert (= (and d!11551 c!7687) b!59709))

(assert (= (and d!11551 (not c!7687)) b!59710))

(assert (= (and b!59710 c!7688) b!59711))

(assert (= (and b!59710 (not c!7688)) b!59712))

(declare-fun m!51915 () Bool)

(assert (=> b!59711 m!51915))

(assert (=> b!59213 d!11551))

(assert (=> bm!4442 d!11331))

(assert (=> d!11287 d!11301))

(assert (=> d!11287 d!11291))

(declare-fun d!11553 () Bool)

(assert (=> d!11553 (contains!682 (+!81 lt!23697 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))) lt!23695)))

(assert (=> d!11553 true))

(declare-fun _$35!300 () Unit!1550)

(assert (=> d!11553 (= (choose!314 lt!23697 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))) lt!23695) _$35!300)))

(declare-fun bs!2592 () Bool)

(assert (= bs!2592 d!11553))

(assert (=> bs!2592 m!50507))

(assert (=> bs!2592 m!50507))

(assert (=> bs!2592 m!50509))

(assert (=> d!11287 d!11553))

(declare-fun d!11555 () Bool)

(declare-fun e!39247 () Bool)

(assert (=> d!11555 e!39247))

(declare-fun res!33103 () Bool)

(assert (=> d!11555 (=> res!33103 e!39247)))

(declare-fun lt!24342 () Bool)

(assert (=> d!11555 (= res!33103 (not lt!24342))))

(declare-fun lt!24344 () Bool)

(assert (=> d!11555 (= lt!24342 lt!24344)))

(declare-fun lt!24343 () Unit!1550)

(declare-fun e!39246 () Unit!1550)

(assert (=> d!11555 (= lt!24343 e!39246)))

(declare-fun c!7689 () Bool)

(assert (=> d!11555 (= c!7689 lt!24344)))

(assert (=> d!11555 (= lt!24344 (containsKey!126 (toList!693 lt!23697) lt!23695))))

(assert (=> d!11555 (= (contains!682 lt!23697 lt!23695) lt!24342)))

(declare-fun b!59714 () Bool)

(declare-fun lt!24345 () Unit!1550)

(assert (=> b!59714 (= e!39246 lt!24345)))

(assert (=> b!59714 (= lt!24345 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 lt!23697) lt!23695))))

(assert (=> b!59714 (isDefined!76 (getValueByKey!122 (toList!693 lt!23697) lt!23695))))

(declare-fun b!59715 () Bool)

(declare-fun Unit!1591 () Unit!1550)

(assert (=> b!59715 (= e!39246 Unit!1591)))

(declare-fun b!59716 () Bool)

(assert (=> b!59716 (= e!39247 (isDefined!76 (getValueByKey!122 (toList!693 lt!23697) lt!23695)))))

(assert (= (and d!11555 c!7689) b!59714))

(assert (= (and d!11555 (not c!7689)) b!59715))

(assert (= (and d!11555 (not res!33103)) b!59716))

(declare-fun m!51917 () Bool)

(assert (=> d!11555 m!51917))

(declare-fun m!51919 () Bool)

(assert (=> b!59714 m!51919))

(declare-fun m!51921 () Bool)

(assert (=> b!59714 m!51921))

(assert (=> b!59714 m!51921))

(declare-fun m!51923 () Bool)

(assert (=> b!59714 m!51923))

(assert (=> b!59716 m!51921))

(assert (=> b!59716 m!51921))

(assert (=> b!59716 m!51923))

(assert (=> d!11287 d!11555))

(declare-fun d!11557 () Bool)

(assert (=> d!11557 (= (apply!66 lt!24103 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1076 (getValueByKey!122 (toList!693 lt!24103) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2593 () Bool)

(assert (= bs!2593 d!11557))

(declare-fun m!51925 () Bool)

(assert (=> bs!2593 m!51925))

(assert (=> bs!2593 m!51925))

(declare-fun m!51927 () Bool)

(assert (=> bs!2593 m!51927))

(assert (=> b!59314 d!11557))

(declare-fun d!11559 () Bool)

(declare-fun c!7690 () Bool)

(assert (=> d!11559 (= c!7690 (and ((_ is Cons!1433) (toList!693 lt!23881)) (= (_1!1029 (h!2014 (toList!693 lt!23881))) (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(declare-fun e!39248 () Option!128)

(assert (=> d!11559 (= (getValueByKey!122 (toList!693 lt!23881) (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) e!39248)))

(declare-fun b!59719 () Bool)

(declare-fun e!39249 () Option!128)

(assert (=> b!59719 (= e!39249 (getValueByKey!122 (t!4770 (toList!693 lt!23881)) (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun b!59718 () Bool)

(assert (=> b!59718 (= e!39248 e!39249)))

(declare-fun c!7691 () Bool)

(assert (=> b!59718 (= c!7691 (and ((_ is Cons!1433) (toList!693 lt!23881)) (not (= (_1!1029 (h!2014 (toList!693 lt!23881))) (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))))

(declare-fun b!59720 () Bool)

(assert (=> b!59720 (= e!39249 None!126)))

(declare-fun b!59717 () Bool)

(assert (=> b!59717 (= e!39248 (Some!127 (_2!1029 (h!2014 (toList!693 lt!23881)))))))

(assert (= (and d!11559 c!7690) b!59717))

(assert (= (and d!11559 (not c!7690)) b!59718))

(assert (= (and b!59718 c!7691) b!59719))

(assert (= (and b!59718 (not c!7691)) b!59720))

(declare-fun m!51929 () Bool)

(assert (=> b!59719 m!51929))

(assert (=> b!59095 d!11559))

(declare-fun b!59721 () Bool)

(declare-fun e!39252 () Bool)

(declare-fun call!4505 () Bool)

(assert (=> b!59721 (= e!39252 call!4505)))

(declare-fun bm!4502 () Bool)

(assert (=> bm!4502 (= call!4505 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3665 (v!2377 (underlying!223 thiss!992))) (mask!5925 (v!2377 (underlying!223 thiss!992)))))))

(declare-fun b!59722 () Bool)

(declare-fun e!39250 () Bool)

(assert (=> b!59722 (= e!39250 e!39252)))

(declare-fun lt!24348 () (_ BitVec 64))

(assert (=> b!59722 (= lt!24348 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) #b00000000000000000000000000000000))))

(declare-fun lt!24347 () Unit!1550)

(assert (=> b!59722 (= lt!24347 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3665 (v!2377 (underlying!223 thiss!992))) lt!24348 #b00000000000000000000000000000000))))

(assert (=> b!59722 (arrayContainsKey!0 (_keys!3665 (v!2377 (underlying!223 thiss!992))) lt!24348 #b00000000000000000000000000000000)))

(declare-fun lt!24346 () Unit!1550)

(assert (=> b!59722 (= lt!24346 lt!24347)))

(declare-fun res!33104 () Bool)

(assert (=> b!59722 (= res!33104 (= (seekEntryOrOpen!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) #b00000000000000000000000000000000) (_keys!3665 (v!2377 (underlying!223 thiss!992))) (mask!5925 (v!2377 (underlying!223 thiss!992)))) (Found!230 #b00000000000000000000000000000000)))))

(assert (=> b!59722 (=> (not res!33104) (not e!39252))))

(declare-fun b!59723 () Bool)

(assert (=> b!59723 (= e!39250 call!4505)))

(declare-fun b!59724 () Bool)

(declare-fun e!39251 () Bool)

(assert (=> b!59724 (= e!39251 e!39250)))

(declare-fun c!7692 () Bool)

(assert (=> b!59724 (= c!7692 (validKeyInArray!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun d!11561 () Bool)

(declare-fun res!33105 () Bool)

(assert (=> d!11561 (=> res!33105 e!39251)))

(assert (=> d!11561 (= res!33105 (bvsge #b00000000000000000000000000000000 (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992))))))))

(assert (=> d!11561 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (mask!5925 (v!2377 (underlying!223 thiss!992)))) e!39251)))

(assert (= (and d!11561 (not res!33105)) b!59724))

(assert (= (and b!59724 c!7692) b!59722))

(assert (= (and b!59724 (not c!7692)) b!59723))

(assert (= (and b!59722 res!33104) b!59721))

(assert (= (or b!59721 b!59723) bm!4502))

(declare-fun m!51931 () Bool)

(assert (=> bm!4502 m!51931))

(assert (=> b!59722 m!51293))

(declare-fun m!51933 () Bool)

(assert (=> b!59722 m!51933))

(declare-fun m!51935 () Bool)

(assert (=> b!59722 m!51935))

(assert (=> b!59722 m!51293))

(declare-fun m!51937 () Bool)

(assert (=> b!59722 m!51937))

(assert (=> b!59724 m!51293))

(assert (=> b!59724 m!51293))

(assert (=> b!59724 m!51295))

(assert (=> b!59101 d!11561))

(declare-fun d!11563 () Bool)

(declare-fun e!39253 () Bool)

(assert (=> d!11563 e!39253))

(declare-fun res!33106 () Bool)

(assert (=> d!11563 (=> (not res!33106) (not e!39253))))

(declare-fun lt!24351 () ListLongMap!1355)

(assert (=> d!11563 (= res!33106 (contains!682 lt!24351 (_1!1029 (ite (or c!7529 c!7531) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))))

(declare-fun lt!24352 () List!1437)

(assert (=> d!11563 (= lt!24351 (ListLongMap!1356 lt!24352))))

(declare-fun lt!24349 () Unit!1550)

(declare-fun lt!24350 () Unit!1550)

(assert (=> d!11563 (= lt!24349 lt!24350)))

(assert (=> d!11563 (= (getValueByKey!122 lt!24352 (_1!1029 (ite (or c!7529 c!7531) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))) (Some!127 (_2!1029 (ite (or c!7529 c!7531) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))))

(assert (=> d!11563 (= lt!24350 (lemmaContainsTupThenGetReturnValue!42 lt!24352 (_1!1029 (ite (or c!7529 c!7531) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))) (_2!1029 (ite (or c!7529 c!7531) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))))

(assert (=> d!11563 (= lt!24352 (insertStrictlySorted!45 (toList!693 (ite c!7529 call!4428 (ite c!7531 call!4431 call!4429))) (_1!1029 (ite (or c!7529 c!7531) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))) (_2!1029 (ite (or c!7529 c!7531) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))))

(assert (=> d!11563 (= (+!81 (ite c!7529 call!4428 (ite c!7531 call!4431 call!4429)) (ite (or c!7529 c!7531) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))) lt!24351)))

(declare-fun b!59725 () Bool)

(declare-fun res!33107 () Bool)

(assert (=> b!59725 (=> (not res!33107) (not e!39253))))

(assert (=> b!59725 (= res!33107 (= (getValueByKey!122 (toList!693 lt!24351) (_1!1029 (ite (or c!7529 c!7531) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))) (Some!127 (_2!1029 (ite (or c!7529 c!7531) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))))

(declare-fun b!59726 () Bool)

(assert (=> b!59726 (= e!39253 (contains!684 (toList!693 lt!24351) (ite (or c!7529 c!7531) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7466 c!7465) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1958 newMap!16))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))

(assert (= (and d!11563 res!33106) b!59725))

(assert (= (and b!59725 res!33107) b!59726))

(declare-fun m!51939 () Bool)

(assert (=> d!11563 m!51939))

(declare-fun m!51941 () Bool)

(assert (=> d!11563 m!51941))

(declare-fun m!51943 () Bool)

(assert (=> d!11563 m!51943))

(declare-fun m!51945 () Bool)

(assert (=> d!11563 m!51945))

(declare-fun m!51947 () Bool)

(assert (=> b!59725 m!51947))

(declare-fun m!51949 () Bool)

(assert (=> b!59726 m!51949))

(assert (=> bm!4429 d!11563))

(declare-fun d!11565 () Bool)

(assert (=> d!11565 (= (inRange!0 (ite c!7559 (index!3043 lt!24077) (index!3046 lt!24077)) (mask!5925 newMap!16)) (and (bvsge (ite c!7559 (index!3043 lt!24077) (index!3046 lt!24077)) #b00000000000000000000000000000000) (bvslt (ite c!7559 (index!3043 lt!24077) (index!3046 lt!24077)) (bvadd (mask!5925 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4441 d!11565))

(declare-fun d!11567 () Bool)

(declare-fun e!39254 () Bool)

(assert (=> d!11567 e!39254))

(declare-fun res!33108 () Bool)

(assert (=> d!11567 (=> (not res!33108) (not e!39254))))

(declare-fun lt!24355 () ListLongMap!1355)

(assert (=> d!11567 (= res!33108 (contains!682 lt!24355 (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))))))

(declare-fun lt!24356 () List!1437)

(assert (=> d!11567 (= lt!24355 (ListLongMap!1356 lt!24356))))

(declare-fun lt!24353 () Unit!1550)

(declare-fun lt!24354 () Unit!1550)

(assert (=> d!11567 (= lt!24353 lt!24354)))

(assert (=> d!11567 (= (getValueByKey!122 lt!24356 (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))) (Some!127 (_2!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))))))

(assert (=> d!11567 (= lt!24354 (lemmaContainsTupThenGetReturnValue!42 lt!24356 (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))) (_2!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))))))

(assert (=> d!11567 (= lt!24356 (insertStrictlySorted!45 (toList!693 call!4451) (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))) (_2!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))))))

(assert (=> d!11567 (= (+!81 call!4451 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))) lt!24355)))

(declare-fun b!59727 () Bool)

(declare-fun res!33109 () Bool)

(assert (=> b!59727 (=> (not res!33109) (not e!39254))))

(assert (=> b!59727 (= res!33109 (= (getValueByKey!122 (toList!693 lt!24355) (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))) (Some!127 (_2!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))))))))

(declare-fun b!59728 () Bool)

(assert (=> b!59728 (= e!39254 (contains!684 (toList!693 lt!24355) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))))))

(assert (= (and d!11567 res!33108) b!59727))

(assert (= (and b!59727 res!33109) b!59728))

(declare-fun m!51951 () Bool)

(assert (=> d!11567 m!51951))

(declare-fun m!51953 () Bool)

(assert (=> d!11567 m!51953))

(declare-fun m!51955 () Bool)

(assert (=> d!11567 m!51955))

(declare-fun m!51957 () Bool)

(assert (=> d!11567 m!51957))

(declare-fun m!51959 () Bool)

(assert (=> b!59727 m!51959))

(declare-fun m!51961 () Bool)

(assert (=> b!59728 m!51961))

(assert (=> b!59312 d!11567))

(declare-fun c!7693 () Bool)

(declare-fun d!11569 () Bool)

(assert (=> d!11569 (= c!7693 (and ((_ is Cons!1433) (t!4770 (toList!693 lt!23596))) (= (_1!1029 (h!2014 (t!4770 (toList!693 lt!23596)))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355))))))

(declare-fun e!39255 () Option!128)

(assert (=> d!11569 (= (getValueByKey!122 (t!4770 (toList!693 lt!23596)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) e!39255)))

(declare-fun e!39256 () Option!128)

(declare-fun b!59731 () Bool)

(assert (=> b!59731 (= e!39256 (getValueByKey!122 (t!4770 (t!4770 (toList!693 lt!23596))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(declare-fun b!59730 () Bool)

(assert (=> b!59730 (= e!39255 e!39256)))

(declare-fun c!7694 () Bool)

(assert (=> b!59730 (= c!7694 (and ((_ is Cons!1433) (t!4770 (toList!693 lt!23596))) (not (= (_1!1029 (h!2014 (t!4770 (toList!693 lt!23596)))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))))

(declare-fun b!59732 () Bool)

(assert (=> b!59732 (= e!39256 None!126)))

(declare-fun b!59729 () Bool)

(assert (=> b!59729 (= e!39255 (Some!127 (_2!1029 (h!2014 (t!4770 (toList!693 lt!23596))))))))

(assert (= (and d!11569 c!7693) b!59729))

(assert (= (and d!11569 (not c!7693)) b!59730))

(assert (= (and b!59730 c!7694) b!59731))

(assert (= (and b!59730 (not c!7694)) b!59732))

(assert (=> b!59731 m!50353))

(declare-fun m!51963 () Bool)

(assert (=> b!59731 m!51963))

(assert (=> b!59273 d!11569))

(assert (=> b!59020 d!11381))

(assert (=> b!59035 d!11381))

(assert (=> b!59211 d!11491))

(declare-fun d!11571 () Bool)

(assert (=> d!11571 (= (apply!66 lt!24002 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1076 (getValueByKey!122 (toList!693 lt!24002) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2594 () Bool)

(assert (= bs!2594 d!11571))

(declare-fun m!51965 () Bool)

(assert (=> bs!2594 m!51965))

(assert (=> bs!2594 m!51965))

(declare-fun m!51967 () Bool)

(assert (=> bs!2594 m!51967))

(assert (=> b!59164 d!11571))

(declare-fun d!11573 () Bool)

(assert (=> d!11573 (= (size!2005 newMap!16) (bvadd (_size!357 newMap!16) (bvsdiv (bvadd (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010)))))

(assert (=> b!59244 d!11573))

(declare-fun d!11575 () Bool)

(declare-fun e!39258 () Bool)

(assert (=> d!11575 e!39258))

(declare-fun res!33110 () Bool)

(assert (=> d!11575 (=> res!33110 e!39258)))

(declare-fun lt!24357 () Bool)

(assert (=> d!11575 (= res!33110 (not lt!24357))))

(declare-fun lt!24359 () Bool)

(assert (=> d!11575 (= lt!24357 lt!24359)))

(declare-fun lt!24358 () Unit!1550)

(declare-fun e!39257 () Unit!1550)

(assert (=> d!11575 (= lt!24358 e!39257)))

(declare-fun c!7695 () Bool)

(assert (=> d!11575 (= c!7695 lt!24359)))

(assert (=> d!11575 (= lt!24359 (containsKey!126 (toList!693 lt!24026) (_1!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(assert (=> d!11575 (= (contains!682 lt!24026 (_1!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!24357)))

(declare-fun b!59733 () Bool)

(declare-fun lt!24360 () Unit!1550)

(assert (=> b!59733 (= e!39257 lt!24360)))

(assert (=> b!59733 (= lt!24360 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 lt!24026) (_1!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(assert (=> b!59733 (isDefined!76 (getValueByKey!122 (toList!693 lt!24026) (_1!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun b!59734 () Bool)

(declare-fun Unit!1592 () Unit!1550)

(assert (=> b!59734 (= e!39257 Unit!1592)))

(declare-fun b!59735 () Bool)

(assert (=> b!59735 (= e!39258 (isDefined!76 (getValueByKey!122 (toList!693 lt!24026) (_1!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(assert (= (and d!11575 c!7695) b!59733))

(assert (= (and d!11575 (not c!7695)) b!59734))

(assert (= (and d!11575 (not res!33110)) b!59735))

(declare-fun m!51969 () Bool)

(assert (=> d!11575 m!51969))

(declare-fun m!51971 () Bool)

(assert (=> b!59733 m!51971))

(assert (=> b!59733 m!50961))

(assert (=> b!59733 m!50961))

(declare-fun m!51973 () Bool)

(assert (=> b!59733 m!51973))

(assert (=> b!59735 m!50961))

(assert (=> b!59735 m!50961))

(assert (=> b!59735 m!51973))

(assert (=> d!11277 d!11575))

(declare-fun c!7696 () Bool)

(declare-fun d!11577 () Bool)

(assert (=> d!11577 (= c!7696 (and ((_ is Cons!1433) lt!24027) (= (_1!1029 (h!2014 lt!24027)) (_1!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(declare-fun e!39259 () Option!128)

(assert (=> d!11577 (= (getValueByKey!122 lt!24027 (_1!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) e!39259)))

(declare-fun b!59738 () Bool)

(declare-fun e!39260 () Option!128)

(assert (=> b!59738 (= e!39260 (getValueByKey!122 (t!4770 lt!24027) (_1!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun b!59737 () Bool)

(assert (=> b!59737 (= e!39259 e!39260)))

(declare-fun c!7697 () Bool)

(assert (=> b!59737 (= c!7697 (and ((_ is Cons!1433) lt!24027) (not (= (_1!1029 (h!2014 lt!24027)) (_1!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))))

(declare-fun b!59739 () Bool)

(assert (=> b!59739 (= e!39260 None!126)))

(declare-fun b!59736 () Bool)

(assert (=> b!59736 (= e!39259 (Some!127 (_2!1029 (h!2014 lt!24027))))))

(assert (= (and d!11577 c!7696) b!59736))

(assert (= (and d!11577 (not c!7696)) b!59737))

(assert (= (and b!59737 c!7697) b!59738))

(assert (= (and b!59737 (not c!7697)) b!59739))

(declare-fun m!51975 () Bool)

(assert (=> b!59738 m!51975))

(assert (=> d!11277 d!11577))

(declare-fun d!11579 () Bool)

(assert (=> d!11579 (= (getValueByKey!122 lt!24027 (_1!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) (Some!127 (_2!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun lt!24361 () Unit!1550)

(assert (=> d!11579 (= lt!24361 (choose!318 lt!24027 (_1!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun e!39261 () Bool)

(assert (=> d!11579 e!39261))

(declare-fun res!33111 () Bool)

(assert (=> d!11579 (=> (not res!33111) (not e!39261))))

(assert (=> d!11579 (= res!33111 (isStrictlySorted!279 lt!24027))))

(assert (=> d!11579 (= (lemmaContainsTupThenGetReturnValue!42 lt!24027 (_1!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!24361)))

(declare-fun b!59740 () Bool)

(declare-fun res!33112 () Bool)

(assert (=> b!59740 (=> (not res!33112) (not e!39261))))

(assert (=> b!59740 (= res!33112 (containsKey!126 lt!24027 (_1!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun b!59741 () Bool)

(assert (=> b!59741 (= e!39261 (contains!684 lt!24027 (tuple2!2037 (_1!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(assert (= (and d!11579 res!33111) b!59740))

(assert (= (and b!59740 res!33112) b!59741))

(assert (=> d!11579 m!50955))

(declare-fun m!51977 () Bool)

(assert (=> d!11579 m!51977))

(declare-fun m!51979 () Bool)

(assert (=> d!11579 m!51979))

(declare-fun m!51981 () Bool)

(assert (=> b!59740 m!51981))

(declare-fun m!51983 () Bool)

(assert (=> b!59741 m!51983))

(assert (=> d!11277 d!11579))

(declare-fun b!59742 () Bool)

(declare-fun e!39262 () List!1437)

(assert (=> b!59742 (= e!39262 (insertStrictlySorted!45 (t!4770 (toList!693 lt!23702)) (_1!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun b!59743 () Bool)

(declare-fun e!39265 () List!1437)

(declare-fun call!4506 () List!1437)

(assert (=> b!59743 (= e!39265 call!4506)))

(declare-fun b!59744 () Bool)

(declare-fun e!39263 () List!1437)

(assert (=> b!59744 (= e!39265 e!39263)))

(declare-fun c!7701 () Bool)

(assert (=> b!59744 (= c!7701 (and ((_ is Cons!1433) (toList!693 lt!23702)) (= (_1!1029 (h!2014 (toList!693 lt!23702))) (_1!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(declare-fun b!59745 () Bool)

(declare-fun call!4507 () List!1437)

(assert (=> b!59745 (= e!39263 call!4507)))

(declare-fun bm!4504 () Bool)

(declare-fun c!7699 () Bool)

(assert (=> bm!4504 (= call!4506 ($colon$colon!59 e!39262 (ite c!7699 (h!2014 (toList!693 lt!23702)) (tuple2!2037 (_1!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))))

(declare-fun c!7700 () Bool)

(assert (=> bm!4504 (= c!7700 c!7699)))

(declare-fun e!39266 () Bool)

(declare-fun lt!24362 () List!1437)

(declare-fun b!59746 () Bool)

(assert (=> b!59746 (= e!39266 (contains!684 lt!24362 (tuple2!2037 (_1!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(declare-fun b!59747 () Bool)

(declare-fun e!39264 () List!1437)

(declare-fun call!4508 () List!1437)

(assert (=> b!59747 (= e!39264 call!4508)))

(declare-fun c!7698 () Bool)

(declare-fun b!59748 () Bool)

(assert (=> b!59748 (= e!39262 (ite c!7701 (t!4770 (toList!693 lt!23702)) (ite c!7698 (Cons!1433 (h!2014 (toList!693 lt!23702)) (t!4770 (toList!693 lt!23702))) Nil!1434)))))

(declare-fun bm!4503 () Bool)

(assert (=> bm!4503 (= call!4508 call!4507)))

(declare-fun d!11581 () Bool)

(assert (=> d!11581 e!39266))

(declare-fun res!33113 () Bool)

(assert (=> d!11581 (=> (not res!33113) (not e!39266))))

(assert (=> d!11581 (= res!33113 (isStrictlySorted!279 lt!24362))))

(assert (=> d!11581 (= lt!24362 e!39265)))

(assert (=> d!11581 (= c!7699 (and ((_ is Cons!1433) (toList!693 lt!23702)) (bvslt (_1!1029 (h!2014 (toList!693 lt!23702))) (_1!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(assert (=> d!11581 (isStrictlySorted!279 (toList!693 lt!23702))))

(assert (=> d!11581 (= (insertStrictlySorted!45 (toList!693 lt!23702) (_1!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!24362)))

(declare-fun bm!4505 () Bool)

(assert (=> bm!4505 (= call!4507 call!4506)))

(declare-fun b!59749 () Bool)

(assert (=> b!59749 (= e!39264 call!4508)))

(declare-fun b!59750 () Bool)

(assert (=> b!59750 (= c!7698 (and ((_ is Cons!1433) (toList!693 lt!23702)) (bvsgt (_1!1029 (h!2014 (toList!693 lt!23702))) (_1!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(assert (=> b!59750 (= e!39263 e!39264)))

(declare-fun b!59751 () Bool)

(declare-fun res!33114 () Bool)

(assert (=> b!59751 (=> (not res!33114) (not e!39266))))

(assert (=> b!59751 (= res!33114 (containsKey!126 lt!24362 (_1!1029 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(assert (= (and d!11581 c!7699) b!59743))

(assert (= (and d!11581 (not c!7699)) b!59744))

(assert (= (and b!59744 c!7701) b!59745))

(assert (= (and b!59744 (not c!7701)) b!59750))

(assert (= (and b!59750 c!7698) b!59749))

(assert (= (and b!59750 (not c!7698)) b!59747))

(assert (= (or b!59749 b!59747) bm!4503))

(assert (= (or b!59745 bm!4503) bm!4505))

(assert (= (or b!59743 bm!4505) bm!4504))

(assert (= (and bm!4504 c!7700) b!59742))

(assert (= (and bm!4504 (not c!7700)) b!59748))

(assert (= (and d!11581 res!33113) b!59751))

(assert (= (and b!59751 res!33114) b!59746))

(declare-fun m!51985 () Bool)

(assert (=> b!59751 m!51985))

(declare-fun m!51987 () Bool)

(assert (=> d!11581 m!51987))

(declare-fun m!51989 () Bool)

(assert (=> d!11581 m!51989))

(declare-fun m!51991 () Bool)

(assert (=> b!59746 m!51991))

(declare-fun m!51993 () Bool)

(assert (=> b!59742 m!51993))

(declare-fun m!51995 () Bool)

(assert (=> bm!4504 m!51995))

(assert (=> d!11277 d!11581))

(declare-fun c!7702 () Bool)

(declare-fun d!11583 () Bool)

(assert (=> d!11583 (= c!7702 (and ((_ is Cons!1433) (toList!693 lt!24038)) (= (_1!1029 (h!2014 (toList!693 lt!24038))) (_1!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(declare-fun e!39267 () Option!128)

(assert (=> d!11583 (= (getValueByKey!122 (toList!693 lt!24038) (_1!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))) e!39267)))

(declare-fun b!59754 () Bool)

(declare-fun e!39268 () Option!128)

(assert (=> b!59754 (= e!39268 (getValueByKey!122 (t!4770 (toList!693 lt!24038)) (_1!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun b!59753 () Bool)

(assert (=> b!59753 (= e!39267 e!39268)))

(declare-fun c!7703 () Bool)

(assert (=> b!59753 (= c!7703 (and ((_ is Cons!1433) (toList!693 lt!24038)) (not (= (_1!1029 (h!2014 (toList!693 lt!24038))) (_1!1029 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))))))

(declare-fun b!59755 () Bool)

(assert (=> b!59755 (= e!39268 None!126)))

(declare-fun b!59752 () Bool)

(assert (=> b!59752 (= e!39267 (Some!127 (_2!1029 (h!2014 (toList!693 lt!24038)))))))

(assert (= (and d!11583 c!7702) b!59752))

(assert (= (and d!11583 (not c!7702)) b!59753))

(assert (= (and b!59753 c!7703) b!59754))

(assert (= (and b!59753 (not c!7703)) b!59755))

(declare-fun m!51997 () Bool)

(assert (=> b!59754 m!51997))

(assert (=> b!59222 d!11583))

(assert (=> b!59259 d!11381))

(declare-fun d!11585 () Bool)

(assert (=> d!11585 (isDefined!76 (getValueByKey!122 (toList!693 (+!81 lt!23697 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!23695))))

(declare-fun lt!24363 () Unit!1550)

(assert (=> d!11585 (= lt!24363 (choose!315 (toList!693 (+!81 lt!23697 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!23695))))

(declare-fun e!39269 () Bool)

(assert (=> d!11585 e!39269))

(declare-fun res!33115 () Bool)

(assert (=> d!11585 (=> (not res!33115) (not e!39269))))

(assert (=> d!11585 (= res!33115 (isStrictlySorted!279 (toList!693 (+!81 lt!23697 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(assert (=> d!11585 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 (+!81 lt!23697 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!23695) lt!24363)))

(declare-fun b!59756 () Bool)

(assert (=> b!59756 (= e!39269 (containsKey!126 (toList!693 (+!81 lt!23697 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!23695))))

(assert (= (and d!11585 res!33115) b!59756))

(assert (=> d!11585 m!51037))

(assert (=> d!11585 m!51037))

(assert (=> d!11585 m!51039))

(declare-fun m!51999 () Bool)

(assert (=> d!11585 m!51999))

(declare-fun m!52001 () Bool)

(assert (=> d!11585 m!52001))

(assert (=> b!59756 m!51033))

(assert (=> b!59228 d!11585))

(declare-fun d!11587 () Bool)

(assert (=> d!11587 (= (isDefined!76 (getValueByKey!122 (toList!693 (+!81 lt!23697 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!23695)) (not (isEmpty!298 (getValueByKey!122 (toList!693 (+!81 lt!23697 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!23695))))))

(declare-fun bs!2595 () Bool)

(assert (= bs!2595 d!11587))

(assert (=> bs!2595 m!51037))

(declare-fun m!52003 () Bool)

(assert (=> bs!2595 m!52003))

(assert (=> b!59228 d!11587))

(declare-fun d!11589 () Bool)

(declare-fun c!7704 () Bool)

(assert (=> d!11589 (= c!7704 (and ((_ is Cons!1433) (toList!693 (+!81 lt!23697 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))) (= (_1!1029 (h!2014 (toList!693 (+!81 lt!23697 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))) lt!23695)))))

(declare-fun e!39270 () Option!128)

(assert (=> d!11589 (= (getValueByKey!122 (toList!693 (+!81 lt!23697 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!23695) e!39270)))

(declare-fun b!59759 () Bool)

(declare-fun e!39271 () Option!128)

(assert (=> b!59759 (= e!39271 (getValueByKey!122 (t!4770 (toList!693 (+!81 lt!23697 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))) lt!23695))))

(declare-fun b!59758 () Bool)

(assert (=> b!59758 (= e!39270 e!39271)))

(declare-fun c!7705 () Bool)

(assert (=> b!59758 (= c!7705 (and ((_ is Cons!1433) (toList!693 (+!81 lt!23697 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))) (not (= (_1!1029 (h!2014 (toList!693 (+!81 lt!23697 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))) lt!23695))))))

(declare-fun b!59760 () Bool)

(assert (=> b!59760 (= e!39271 None!126)))

(declare-fun b!59757 () Bool)

(assert (=> b!59757 (= e!39270 (Some!127 (_2!1029 (h!2014 (toList!693 (+!81 lt!23697 (tuple2!2037 lt!23696 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))))))))

(assert (= (and d!11589 c!7704) b!59757))

(assert (= (and d!11589 (not c!7704)) b!59758))

(assert (= (and b!59758 c!7705) b!59759))

(assert (= (and b!59758 (not c!7705)) b!59760))

(declare-fun m!52005 () Bool)

(assert (=> b!59759 m!52005))

(assert (=> b!59228 d!11589))

(declare-fun d!11591 () Bool)

(declare-fun e!39272 () Bool)

(assert (=> d!11591 e!39272))

(declare-fun res!33116 () Bool)

(assert (=> d!11591 (=> (not res!33116) (not e!39272))))

(declare-fun lt!24366 () ListLongMap!1355)

(assert (=> d!11591 (= res!33116 (contains!682 lt!24366 (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!24367 () List!1437)

(assert (=> d!11591 (= lt!24366 (ListLongMap!1356 lt!24367))))

(declare-fun lt!24364 () Unit!1550)

(declare-fun lt!24365 () Unit!1550)

(assert (=> d!11591 (= lt!24364 lt!24365)))

(assert (=> d!11591 (= (getValueByKey!122 lt!24367 (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!127 (_2!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11591 (= lt!24365 (lemmaContainsTupThenGetReturnValue!42 lt!24367 (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11591 (= lt!24367 (insertStrictlySorted!45 (toList!693 call!4436) (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11591 (= (+!81 call!4436 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!24366)))

(declare-fun b!59761 () Bool)

(declare-fun res!33117 () Bool)

(assert (=> b!59761 (=> (not res!33117) (not e!39272))))

(assert (=> b!59761 (= res!33117 (= (getValueByKey!122 (toList!693 lt!24366) (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!127 (_2!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!59762 () Bool)

(assert (=> b!59762 (= e!39272 (contains!684 (toList!693 lt!24366) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!11591 res!33116) b!59761))

(assert (= (and b!59761 res!33117) b!59762))

(declare-fun m!52007 () Bool)

(assert (=> d!11591 m!52007))

(declare-fun m!52009 () Bool)

(assert (=> d!11591 m!52009))

(declare-fun m!52011 () Bool)

(assert (=> d!11591 m!52011))

(declare-fun m!52013 () Bool)

(assert (=> d!11591 m!52013))

(declare-fun m!52015 () Bool)

(assert (=> b!59761 m!52015))

(declare-fun m!52017 () Bool)

(assert (=> b!59762 m!52017))

(assert (=> b!59207 d!11591))

(declare-fun d!11593 () Bool)

(declare-fun e!39273 () Bool)

(assert (=> d!11593 e!39273))

(declare-fun res!33118 () Bool)

(assert (=> d!11593 (=> (not res!33118) (not e!39273))))

(declare-fun lt!24370 () ListLongMap!1355)

(assert (=> d!11593 (= res!33118 (contains!682 lt!24370 (_1!1029 (tuple2!2037 lt!24021 lt!24019))))))

(declare-fun lt!24371 () List!1437)

(assert (=> d!11593 (= lt!24370 (ListLongMap!1356 lt!24371))))

(declare-fun lt!24368 () Unit!1550)

(declare-fun lt!24369 () Unit!1550)

(assert (=> d!11593 (= lt!24368 lt!24369)))

(assert (=> d!11593 (= (getValueByKey!122 lt!24371 (_1!1029 (tuple2!2037 lt!24021 lt!24019))) (Some!127 (_2!1029 (tuple2!2037 lt!24021 lt!24019))))))

(assert (=> d!11593 (= lt!24369 (lemmaContainsTupThenGetReturnValue!42 lt!24371 (_1!1029 (tuple2!2037 lt!24021 lt!24019)) (_2!1029 (tuple2!2037 lt!24021 lt!24019))))))

(assert (=> d!11593 (= lt!24371 (insertStrictlySorted!45 (toList!693 lt!24023) (_1!1029 (tuple2!2037 lt!24021 lt!24019)) (_2!1029 (tuple2!2037 lt!24021 lt!24019))))))

(assert (=> d!11593 (= (+!81 lt!24023 (tuple2!2037 lt!24021 lt!24019)) lt!24370)))

(declare-fun b!59763 () Bool)

(declare-fun res!33119 () Bool)

(assert (=> b!59763 (=> (not res!33119) (not e!39273))))

(assert (=> b!59763 (= res!33119 (= (getValueByKey!122 (toList!693 lt!24370) (_1!1029 (tuple2!2037 lt!24021 lt!24019))) (Some!127 (_2!1029 (tuple2!2037 lt!24021 lt!24019)))))))

(declare-fun b!59764 () Bool)

(assert (=> b!59764 (= e!39273 (contains!684 (toList!693 lt!24370) (tuple2!2037 lt!24021 lt!24019)))))

(assert (= (and d!11593 res!33118) b!59763))

(assert (= (and b!59763 res!33119) b!59764))

(declare-fun m!52019 () Bool)

(assert (=> d!11593 m!52019))

(declare-fun m!52021 () Bool)

(assert (=> d!11593 m!52021))

(declare-fun m!52023 () Bool)

(assert (=> d!11593 m!52023))

(declare-fun m!52025 () Bool)

(assert (=> d!11593 m!52025))

(declare-fun m!52027 () Bool)

(assert (=> b!59763 m!52027))

(declare-fun m!52029 () Bool)

(assert (=> b!59764 m!52029))

(assert (=> b!59207 d!11593))

(declare-fun d!11595 () Bool)

(declare-fun e!39275 () Bool)

(assert (=> d!11595 e!39275))

(declare-fun res!33120 () Bool)

(assert (=> d!11595 (=> res!33120 e!39275)))

(declare-fun lt!24372 () Bool)

(assert (=> d!11595 (= res!33120 (not lt!24372))))

(declare-fun lt!24374 () Bool)

(assert (=> d!11595 (= lt!24372 lt!24374)))

(declare-fun lt!24373 () Unit!1550)

(declare-fun e!39274 () Unit!1550)

(assert (=> d!11595 (= lt!24373 e!39274)))

(declare-fun c!7706 () Bool)

(assert (=> d!11595 (= c!7706 lt!24374)))

(assert (=> d!11595 (= lt!24374 (containsKey!126 (toList!693 (+!81 lt!24023 (tuple2!2037 lt!24021 lt!24019))) lt!24022))))

(assert (=> d!11595 (= (contains!682 (+!81 lt!24023 (tuple2!2037 lt!24021 lt!24019)) lt!24022) lt!24372)))

(declare-fun b!59765 () Bool)

(declare-fun lt!24375 () Unit!1550)

(assert (=> b!59765 (= e!39274 lt!24375)))

(assert (=> b!59765 (= lt!24375 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 (+!81 lt!24023 (tuple2!2037 lt!24021 lt!24019))) lt!24022))))

(assert (=> b!59765 (isDefined!76 (getValueByKey!122 (toList!693 (+!81 lt!24023 (tuple2!2037 lt!24021 lt!24019))) lt!24022))))

(declare-fun b!59766 () Bool)

(declare-fun Unit!1593 () Unit!1550)

(assert (=> b!59766 (= e!39274 Unit!1593)))

(declare-fun b!59767 () Bool)

(assert (=> b!59767 (= e!39275 (isDefined!76 (getValueByKey!122 (toList!693 (+!81 lt!24023 (tuple2!2037 lt!24021 lt!24019))) lt!24022)))))

(assert (= (and d!11595 c!7706) b!59765))

(assert (= (and d!11595 (not c!7706)) b!59766))

(assert (= (and d!11595 (not res!33120)) b!59767))

(declare-fun m!52031 () Bool)

(assert (=> d!11595 m!52031))

(declare-fun m!52033 () Bool)

(assert (=> b!59765 m!52033))

(declare-fun m!52035 () Bool)

(assert (=> b!59765 m!52035))

(assert (=> b!59765 m!52035))

(declare-fun m!52037 () Bool)

(assert (=> b!59765 m!52037))

(assert (=> b!59767 m!52035))

(assert (=> b!59767 m!52035))

(assert (=> b!59767 m!52037))

(assert (=> b!59207 d!11595))

(assert (=> b!59207 d!11341))

(declare-fun d!11597 () Bool)

(assert (=> d!11597 (not (contains!682 (+!81 lt!24023 (tuple2!2037 lt!24021 lt!24019)) lt!24022))))

(declare-fun lt!24378 () Unit!1550)

(declare-fun choose!320 (ListLongMap!1355 (_ BitVec 64) V!2841 (_ BitVec 64)) Unit!1550)

(assert (=> d!11597 (= lt!24378 (choose!320 lt!24023 lt!24021 lt!24019 lt!24022))))

(declare-fun e!39278 () Bool)

(assert (=> d!11597 e!39278))

(declare-fun res!33123 () Bool)

(assert (=> d!11597 (=> (not res!33123) (not e!39278))))

(assert (=> d!11597 (= res!33123 (not (contains!682 lt!24023 lt!24022)))))

(assert (=> d!11597 (= (addStillNotContains!16 lt!24023 lt!24021 lt!24019 lt!24022) lt!24378)))

(declare-fun b!59771 () Bool)

(assert (=> b!59771 (= e!39278 (not (= lt!24021 lt!24022)))))

(assert (= (and d!11597 res!33123) b!59771))

(assert (=> d!11597 m!50941))

(assert (=> d!11597 m!50941))

(assert (=> d!11597 m!50943))

(declare-fun m!52039 () Bool)

(assert (=> d!11597 m!52039))

(declare-fun m!52041 () Bool)

(assert (=> d!11597 m!52041))

(assert (=> b!59207 d!11597))

(declare-fun d!11599 () Bool)

(declare-fun res!33124 () Bool)

(declare-fun e!39279 () Bool)

(assert (=> d!11599 (=> res!33124 e!39279)))

(assert (=> d!11599 (= res!33124 (and ((_ is Cons!1433) (toList!693 lt!23704)) (= (_1!1029 (h!2014 (toList!693 lt!23704))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!11599 (= (containsKey!126 (toList!693 lt!23704) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!39279)))

(declare-fun b!59772 () Bool)

(declare-fun e!39280 () Bool)

(assert (=> b!59772 (= e!39279 e!39280)))

(declare-fun res!33125 () Bool)

(assert (=> b!59772 (=> (not res!33125) (not e!39280))))

(assert (=> b!59772 (= res!33125 (and (or (not ((_ is Cons!1433) (toList!693 lt!23704))) (bvsle (_1!1029 (h!2014 (toList!693 lt!23704))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) ((_ is Cons!1433) (toList!693 lt!23704)) (bvslt (_1!1029 (h!2014 (toList!693 lt!23704))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun b!59773 () Bool)

(assert (=> b!59773 (= e!39280 (containsKey!126 (t!4770 (toList!693 lt!23704)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!11599 (not res!33124)) b!59772))

(assert (= (and b!59772 res!33125) b!59773))

(assert (=> b!59773 m!50485))

(declare-fun m!52043 () Bool)

(assert (=> b!59773 m!52043))

(assert (=> d!11233 d!11599))

(assert (=> d!11235 d!11249))

(declare-fun d!11601 () Bool)

(declare-fun e!39283 () Bool)

(assert (=> d!11601 e!39283))

(declare-fun res!33131 () Bool)

(assert (=> d!11601 (=> (not res!33131) (not e!39283))))

(declare-fun lt!24381 () SeekEntryResult!230)

(assert (=> d!11601 (= res!33131 ((_ is Found!230) lt!24381))))

(assert (=> d!11601 (= lt!24381 (seekEntryOrOpen!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (_keys!3665 newMap!16) (mask!5925 newMap!16)))))

(assert (=> d!11601 true))

(declare-fun _$33!42 () Unit!1550)

(assert (=> d!11601 (= (choose!310 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (defaultEntry!2042 newMap!16)) _$33!42)))

(declare-fun b!59778 () Bool)

(declare-fun res!33130 () Bool)

(assert (=> b!59778 (=> (not res!33130) (not e!39283))))

(assert (=> b!59778 (= res!33130 (inRange!0 (index!3044 lt!24381) (mask!5925 newMap!16)))))

(declare-fun b!59779 () Bool)

(assert (=> b!59779 (= e!39283 (= (select (arr!1768 (_keys!3665 newMap!16)) (index!3044 lt!24381)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(assert (= (and d!11601 res!33131) b!59778))

(assert (= (and b!59778 res!33130) b!59779))

(assert (=> d!11601 m!50353))

(assert (=> d!11601 m!50557))

(declare-fun m!52045 () Bool)

(assert (=> b!59778 m!52045))

(declare-fun m!52047 () Bool)

(assert (=> b!59779 m!52047))

(assert (=> d!11235 d!11601))

(assert (=> d!11235 d!11347))

(declare-fun d!11603 () Bool)

(declare-fun e!39285 () Bool)

(assert (=> d!11603 e!39285))

(declare-fun res!33132 () Bool)

(assert (=> d!11603 (=> res!33132 e!39285)))

(declare-fun lt!24382 () Bool)

(assert (=> d!11603 (= res!33132 (not lt!24382))))

(declare-fun lt!24384 () Bool)

(assert (=> d!11603 (= lt!24382 lt!24384)))

(declare-fun lt!24383 () Unit!1550)

(declare-fun e!39284 () Unit!1550)

(assert (=> d!11603 (= lt!24383 e!39284)))

(declare-fun c!7707 () Bool)

(assert (=> d!11603 (= c!7707 lt!24384)))

(assert (=> d!11603 (= lt!24384 (containsKey!126 (toList!693 lt!24103) (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!11603 (= (contains!682 lt!24103 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)) lt!24382)))

(declare-fun b!59780 () Bool)

(declare-fun lt!24385 () Unit!1550)

(assert (=> b!59780 (= e!39284 lt!24385)))

(assert (=> b!59780 (= lt!24385 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 lt!24103) (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59780 (isDefined!76 (getValueByKey!122 (toList!693 lt!24103) (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59781 () Bool)

(declare-fun Unit!1594 () Unit!1550)

(assert (=> b!59781 (= e!39284 Unit!1594)))

(declare-fun b!59782 () Bool)

(assert (=> b!59782 (= e!39285 (isDefined!76 (getValueByKey!122 (toList!693 lt!24103) (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!11603 c!7707) b!59780))

(assert (= (and d!11603 (not c!7707)) b!59781))

(assert (= (and d!11603 (not res!33132)) b!59782))

(assert (=> d!11603 m!50643))

(declare-fun m!52049 () Bool)

(assert (=> d!11603 m!52049))

(assert (=> b!59780 m!50643))

(declare-fun m!52051 () Bool)

(assert (=> b!59780 m!52051))

(assert (=> b!59780 m!50643))

(assert (=> b!59780 m!51279))

(assert (=> b!59780 m!51279))

(declare-fun m!52053 () Bool)

(assert (=> b!59780 m!52053))

(assert (=> b!59782 m!50643))

(assert (=> b!59782 m!51279))

(assert (=> b!59782 m!51279))

(assert (=> b!59782 m!52053))

(assert (=> b!59306 d!11603))

(declare-fun d!11605 () Bool)

(declare-fun res!33133 () Bool)

(declare-fun e!39286 () Bool)

(assert (=> d!11605 (=> res!33133 e!39286)))

(assert (=> d!11605 (= res!33133 (and ((_ is Cons!1433) (toList!693 call!4384)) (= (_1!1029 (h!2014 (toList!693 call!4384))) (select (arr!1768 (_keys!3665 newMap!16)) (index!3044 lt!23774)))))))

(assert (=> d!11605 (= (containsKey!126 (toList!693 call!4384) (select (arr!1768 (_keys!3665 newMap!16)) (index!3044 lt!23774))) e!39286)))

(declare-fun b!59783 () Bool)

(declare-fun e!39287 () Bool)

(assert (=> b!59783 (= e!39286 e!39287)))

(declare-fun res!33134 () Bool)

(assert (=> b!59783 (=> (not res!33134) (not e!39287))))

(assert (=> b!59783 (= res!33134 (and (or (not ((_ is Cons!1433) (toList!693 call!4384))) (bvsle (_1!1029 (h!2014 (toList!693 call!4384))) (select (arr!1768 (_keys!3665 newMap!16)) (index!3044 lt!23774)))) ((_ is Cons!1433) (toList!693 call!4384)) (bvslt (_1!1029 (h!2014 (toList!693 call!4384))) (select (arr!1768 (_keys!3665 newMap!16)) (index!3044 lt!23774)))))))

(declare-fun b!59784 () Bool)

(assert (=> b!59784 (= e!39287 (containsKey!126 (t!4770 (toList!693 call!4384)) (select (arr!1768 (_keys!3665 newMap!16)) (index!3044 lt!23774))))))

(assert (= (and d!11605 (not res!33133)) b!59783))

(assert (= (and b!59783 res!33134) b!59784))

(assert (=> b!59784 m!50575))

(declare-fun m!52055 () Bool)

(assert (=> b!59784 m!52055))

(assert (=> d!11241 d!11605))

(assert (=> b!59008 d!11381))

(declare-fun d!11607 () Bool)

(declare-fun e!39289 () Bool)

(assert (=> d!11607 e!39289))

(declare-fun res!33135 () Bool)

(assert (=> d!11607 (=> res!33135 e!39289)))

(declare-fun lt!24386 () Bool)

(assert (=> d!11607 (= res!33135 (not lt!24386))))

(declare-fun lt!24388 () Bool)

(assert (=> d!11607 (= lt!24386 lt!24388)))

(declare-fun lt!24387 () Unit!1550)

(declare-fun e!39288 () Unit!1550)

(assert (=> d!11607 (= lt!24387 e!39288)))

(declare-fun c!7708 () Bool)

(assert (=> d!11607 (= c!7708 lt!24388)))

(assert (=> d!11607 (= lt!24388 (containsKey!126 (toList!693 lt!24002) (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!11607 (= (contains!682 lt!24002 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)) lt!24386)))

(declare-fun b!59785 () Bool)

(declare-fun lt!24389 () Unit!1550)

(assert (=> b!59785 (= e!39288 lt!24389)))

(assert (=> b!59785 (= lt!24389 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 lt!24002) (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59785 (isDefined!76 (getValueByKey!122 (toList!693 lt!24002) (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59786 () Bool)

(declare-fun Unit!1595 () Unit!1550)

(assert (=> b!59786 (= e!39288 Unit!1595)))

(declare-fun b!59787 () Bool)

(assert (=> b!59787 (= e!39289 (isDefined!76 (getValueByKey!122 (toList!693 lt!24002) (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!11607 c!7708) b!59785))

(assert (= (and d!11607 (not c!7708)) b!59786))

(assert (= (and d!11607 (not res!33135)) b!59787))

(assert (=> d!11607 m!50643))

(declare-fun m!52057 () Bool)

(assert (=> d!11607 m!52057))

(assert (=> b!59785 m!50643))

(declare-fun m!52059 () Bool)

(assert (=> b!59785 m!52059))

(assert (=> b!59785 m!50643))

(declare-fun m!52061 () Bool)

(assert (=> b!59785 m!52061))

(assert (=> b!59785 m!52061))

(declare-fun m!52063 () Bool)

(assert (=> b!59785 m!52063))

(assert (=> b!59787 m!50643))

(assert (=> b!59787 m!52061))

(assert (=> b!59787 m!52061))

(assert (=> b!59787 m!52063))

(assert (=> b!59160 d!11607))

(assert (=> b!59145 d!11323))

(declare-fun d!11609 () Bool)

(assert (=> d!11609 (= (get!1076 (getValueByKey!122 (toList!693 lt!23690) lt!23694)) (v!2382 (getValueByKey!122 (toList!693 lt!23690) lt!23694)))))

(assert (=> d!11293 d!11609))

(declare-fun d!11611 () Bool)

(declare-fun c!7709 () Bool)

(assert (=> d!11611 (= c!7709 (and ((_ is Cons!1433) (toList!693 lt!23690)) (= (_1!1029 (h!2014 (toList!693 lt!23690))) lt!23694)))))

(declare-fun e!39290 () Option!128)

(assert (=> d!11611 (= (getValueByKey!122 (toList!693 lt!23690) lt!23694) e!39290)))

(declare-fun b!59790 () Bool)

(declare-fun e!39291 () Option!128)

(assert (=> b!59790 (= e!39291 (getValueByKey!122 (t!4770 (toList!693 lt!23690)) lt!23694))))

(declare-fun b!59789 () Bool)

(assert (=> b!59789 (= e!39290 e!39291)))

(declare-fun c!7710 () Bool)

(assert (=> b!59789 (= c!7710 (and ((_ is Cons!1433) (toList!693 lt!23690)) (not (= (_1!1029 (h!2014 (toList!693 lt!23690))) lt!23694))))))

(declare-fun b!59791 () Bool)

(assert (=> b!59791 (= e!39291 None!126)))

(declare-fun b!59788 () Bool)

(assert (=> b!59788 (= e!39290 (Some!127 (_2!1029 (h!2014 (toList!693 lt!23690)))))))

(assert (= (and d!11611 c!7709) b!59788))

(assert (= (and d!11611 (not c!7709)) b!59789))

(assert (= (and b!59789 c!7710) b!59790))

(assert (= (and b!59789 (not c!7710)) b!59791))

(declare-fun m!52065 () Bool)

(assert (=> b!59790 m!52065))

(assert (=> d!11293 d!11611))

(declare-fun d!11613 () Bool)

(declare-fun e!39293 () Bool)

(assert (=> d!11613 e!39293))

(declare-fun res!33136 () Bool)

(assert (=> d!11613 (=> res!33136 e!39293)))

(declare-fun lt!24390 () Bool)

(assert (=> d!11613 (= res!33136 (not lt!24390))))

(declare-fun lt!24392 () Bool)

(assert (=> d!11613 (= lt!24390 lt!24392)))

(declare-fun lt!24391 () Unit!1550)

(declare-fun e!39292 () Unit!1550)

(assert (=> d!11613 (= lt!24391 e!39292)))

(declare-fun c!7711 () Bool)

(assert (=> d!11613 (= c!7711 lt!24392)))

(assert (=> d!11613 (= lt!24392 (containsKey!126 (toList!693 lt!24020) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11613 (= (contains!682 lt!24020 #b1000000000000000000000000000000000000000000000000000000000000000) lt!24390)))

(declare-fun b!59792 () Bool)

(declare-fun lt!24393 () Unit!1550)

(assert (=> b!59792 (= e!39292 lt!24393)))

(assert (=> b!59792 (= lt!24393 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 lt!24020) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!59792 (isDefined!76 (getValueByKey!122 (toList!693 lt!24020) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59793 () Bool)

(declare-fun Unit!1596 () Unit!1550)

(assert (=> b!59793 (= e!39292 Unit!1596)))

(declare-fun b!59794 () Bool)

(assert (=> b!59794 (= e!39293 (isDefined!76 (getValueByKey!122 (toList!693 lt!24020) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11613 c!7711) b!59792))

(assert (= (and d!11613 (not c!7711)) b!59793))

(assert (= (and d!11613 (not res!33136)) b!59794))

(declare-fun m!52067 () Bool)

(assert (=> d!11613 m!52067))

(declare-fun m!52069 () Bool)

(assert (=> b!59792 m!52069))

(declare-fun m!52071 () Bool)

(assert (=> b!59792 m!52071))

(assert (=> b!59792 m!52071))

(declare-fun m!52073 () Bool)

(assert (=> b!59792 m!52073))

(assert (=> b!59794 m!52071))

(assert (=> b!59794 m!52071))

(assert (=> b!59794 m!52073))

(assert (=> b!59202 d!11613))

(declare-fun bm!4506 () Bool)

(declare-fun call!4509 () (_ BitVec 32))

(assert (=> bm!4506 (= call!4509 (arrayCountValidKeys!0 (_keys!3665 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!1999 (_keys!3665 newMap!16))))))

(declare-fun b!59795 () Bool)

(declare-fun e!39295 () (_ BitVec 32))

(assert (=> b!59795 (= e!39295 (bvadd #b00000000000000000000000000000001 call!4509))))

(declare-fun b!59796 () Bool)

(declare-fun e!39294 () (_ BitVec 32))

(assert (=> b!59796 (= e!39294 #b00000000000000000000000000000000)))

(declare-fun d!11615 () Bool)

(declare-fun lt!24394 () (_ BitVec 32))

(assert (=> d!11615 (and (bvsge lt!24394 #b00000000000000000000000000000000) (bvsle lt!24394 (bvsub (size!1999 (_keys!3665 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> d!11615 (= lt!24394 e!39294)))

(declare-fun c!7712 () Bool)

(assert (=> d!11615 (= c!7712 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!1999 (_keys!3665 newMap!16))))))

(assert (=> d!11615 (and (bvsle (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!1999 (_keys!3665 newMap!16))) (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvsle (size!1999 (_keys!3665 newMap!16)) (size!1999 (_keys!3665 newMap!16))))))

(assert (=> d!11615 (= (arrayCountValidKeys!0 (_keys!3665 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!1999 (_keys!3665 newMap!16))) lt!24394)))

(declare-fun b!59797 () Bool)

(assert (=> b!59797 (= e!39295 call!4509)))

(declare-fun b!59798 () Bool)

(assert (=> b!59798 (= e!39294 e!39295)))

(declare-fun c!7713 () Bool)

(assert (=> b!59798 (= c!7713 (validKeyInArray!0 (select (arr!1768 (_keys!3665 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (= (and d!11615 c!7712) b!59796))

(assert (= (and d!11615 (not c!7712)) b!59798))

(assert (= (and b!59798 c!7713) b!59795))

(assert (= (and b!59798 (not c!7713)) b!59797))

(assert (= (or b!59795 b!59797) bm!4506))

(declare-fun m!52075 () Bool)

(assert (=> bm!4506 m!52075))

(assert (=> b!59798 m!51583))

(assert (=> b!59798 m!51583))

(assert (=> b!59798 m!51603))

(assert (=> bm!4403 d!11615))

(declare-fun d!11617 () Bool)

(declare-fun e!39297 () Bool)

(assert (=> d!11617 e!39297))

(declare-fun res!33137 () Bool)

(assert (=> d!11617 (=> res!33137 e!39297)))

(declare-fun lt!24395 () Bool)

(assert (=> d!11617 (= res!33137 (not lt!24395))))

(declare-fun lt!24397 () Bool)

(assert (=> d!11617 (= lt!24395 lt!24397)))

(declare-fun lt!24396 () Unit!1550)

(declare-fun e!39296 () Unit!1550)

(assert (=> d!11617 (= lt!24396 e!39296)))

(declare-fun c!7714 () Bool)

(assert (=> d!11617 (= c!7714 lt!24397)))

(assert (=> d!11617 (= lt!24397 (containsKey!126 (toList!693 lt!24058) (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11617 (= (contains!682 lt!24058 (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!24395)))

(declare-fun b!59799 () Bool)

(declare-fun lt!24398 () Unit!1550)

(assert (=> b!59799 (= e!39296 lt!24398)))

(assert (=> b!59799 (= lt!24398 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 lt!24058) (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> b!59799 (isDefined!76 (getValueByKey!122 (toList!693 lt!24058) (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!59800 () Bool)

(declare-fun Unit!1597 () Unit!1550)

(assert (=> b!59800 (= e!39296 Unit!1597)))

(declare-fun b!59801 () Bool)

(assert (=> b!59801 (= e!39297 (isDefined!76 (getValueByKey!122 (toList!693 lt!24058) (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!11617 c!7714) b!59799))

(assert (= (and d!11617 (not c!7714)) b!59800))

(assert (= (and d!11617 (not res!33137)) b!59801))

(declare-fun m!52077 () Bool)

(assert (=> d!11617 m!52077))

(declare-fun m!52079 () Bool)

(assert (=> b!59799 m!52079))

(assert (=> b!59799 m!51061))

(assert (=> b!59799 m!51061))

(declare-fun m!52081 () Bool)

(assert (=> b!59799 m!52081))

(assert (=> b!59801 m!51061))

(assert (=> b!59801 m!51061))

(assert (=> b!59801 m!52081))

(assert (=> d!11311 d!11617))

(declare-fun d!11619 () Bool)

(declare-fun c!7715 () Bool)

(assert (=> d!11619 (= c!7715 (and ((_ is Cons!1433) lt!24059) (= (_1!1029 (h!2014 lt!24059)) (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!39298 () Option!128)

(assert (=> d!11619 (= (getValueByKey!122 lt!24059 (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!39298)))

(declare-fun b!59804 () Bool)

(declare-fun e!39299 () Option!128)

(assert (=> b!59804 (= e!39299 (getValueByKey!122 (t!4770 lt!24059) (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!59803 () Bool)

(assert (=> b!59803 (= e!39298 e!39299)))

(declare-fun c!7716 () Bool)

(assert (=> b!59803 (= c!7716 (and ((_ is Cons!1433) lt!24059) (not (= (_1!1029 (h!2014 lt!24059)) (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!59805 () Bool)

(assert (=> b!59805 (= e!39299 None!126)))

(declare-fun b!59802 () Bool)

(assert (=> b!59802 (= e!39298 (Some!127 (_2!1029 (h!2014 lt!24059))))))

(assert (= (and d!11619 c!7715) b!59802))

(assert (= (and d!11619 (not c!7715)) b!59803))

(assert (= (and b!59803 c!7716) b!59804))

(assert (= (and b!59803 (not c!7716)) b!59805))

(declare-fun m!52083 () Bool)

(assert (=> b!59804 m!52083))

(assert (=> d!11311 d!11619))

(declare-fun d!11621 () Bool)

(assert (=> d!11621 (= (getValueByKey!122 lt!24059 (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!127 (_2!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!24399 () Unit!1550)

(assert (=> d!11621 (= lt!24399 (choose!318 lt!24059 (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!39300 () Bool)

(assert (=> d!11621 e!39300))

(declare-fun res!33138 () Bool)

(assert (=> d!11621 (=> (not res!33138) (not e!39300))))

(assert (=> d!11621 (= res!33138 (isStrictlySorted!279 lt!24059))))

(assert (=> d!11621 (= (lemmaContainsTupThenGetReturnValue!42 lt!24059 (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!24399)))

(declare-fun b!59806 () Bool)

(declare-fun res!33139 () Bool)

(assert (=> b!59806 (=> (not res!33139) (not e!39300))))

(assert (=> b!59806 (= res!33139 (containsKey!126 lt!24059 (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!59807 () Bool)

(assert (=> b!59807 (= e!39300 (contains!684 lt!24059 (tuple2!2037 (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!11621 res!33138) b!59806))

(assert (= (and b!59806 res!33139) b!59807))

(assert (=> d!11621 m!51055))

(declare-fun m!52085 () Bool)

(assert (=> d!11621 m!52085))

(declare-fun m!52087 () Bool)

(assert (=> d!11621 m!52087))

(declare-fun m!52089 () Bool)

(assert (=> b!59806 m!52089))

(declare-fun m!52091 () Bool)

(assert (=> b!59807 m!52091))

(assert (=> d!11311 d!11621))

(declare-fun e!39301 () List!1437)

(declare-fun b!59808 () Bool)

(assert (=> b!59808 (= e!39301 (insertStrictlySorted!45 (t!4770 (toList!693 call!4377)) (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!59809 () Bool)

(declare-fun e!39304 () List!1437)

(declare-fun call!4510 () List!1437)

(assert (=> b!59809 (= e!39304 call!4510)))

(declare-fun b!59810 () Bool)

(declare-fun e!39302 () List!1437)

(assert (=> b!59810 (= e!39304 e!39302)))

(declare-fun c!7720 () Bool)

(assert (=> b!59810 (= c!7720 (and ((_ is Cons!1433) (toList!693 call!4377)) (= (_1!1029 (h!2014 (toList!693 call!4377))) (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!59811 () Bool)

(declare-fun call!4511 () List!1437)

(assert (=> b!59811 (= e!39302 call!4511)))

(declare-fun c!7718 () Bool)

(declare-fun bm!4508 () Bool)

(assert (=> bm!4508 (= call!4510 ($colon$colon!59 e!39301 (ite c!7718 (h!2014 (toList!693 call!4377)) (tuple2!2037 (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun c!7719 () Bool)

(assert (=> bm!4508 (= c!7719 c!7718)))

(declare-fun b!59812 () Bool)

(declare-fun e!39305 () Bool)

(declare-fun lt!24400 () List!1437)

(assert (=> b!59812 (= e!39305 (contains!684 lt!24400 (tuple2!2037 (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!59813 () Bool)

(declare-fun e!39303 () List!1437)

(declare-fun call!4512 () List!1437)

(assert (=> b!59813 (= e!39303 call!4512)))

(declare-fun c!7717 () Bool)

(declare-fun b!59814 () Bool)

(assert (=> b!59814 (= e!39301 (ite c!7720 (t!4770 (toList!693 call!4377)) (ite c!7717 (Cons!1433 (h!2014 (toList!693 call!4377)) (t!4770 (toList!693 call!4377))) Nil!1434)))))

(declare-fun bm!4507 () Bool)

(assert (=> bm!4507 (= call!4512 call!4511)))

(declare-fun d!11623 () Bool)

(assert (=> d!11623 e!39305))

(declare-fun res!33140 () Bool)

(assert (=> d!11623 (=> (not res!33140) (not e!39305))))

(assert (=> d!11623 (= res!33140 (isStrictlySorted!279 lt!24400))))

(assert (=> d!11623 (= lt!24400 e!39304)))

(assert (=> d!11623 (= c!7718 (and ((_ is Cons!1433) (toList!693 call!4377)) (bvslt (_1!1029 (h!2014 (toList!693 call!4377))) (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!11623 (isStrictlySorted!279 (toList!693 call!4377))))

(assert (=> d!11623 (= (insertStrictlySorted!45 (toList!693 call!4377) (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!24400)))

(declare-fun bm!4509 () Bool)

(assert (=> bm!4509 (= call!4511 call!4510)))

(declare-fun b!59815 () Bool)

(assert (=> b!59815 (= e!39303 call!4512)))

(declare-fun b!59816 () Bool)

(assert (=> b!59816 (= c!7717 (and ((_ is Cons!1433) (toList!693 call!4377)) (bvsgt (_1!1029 (h!2014 (toList!693 call!4377))) (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!59816 (= e!39302 e!39303)))

(declare-fun b!59817 () Bool)

(declare-fun res!33141 () Bool)

(assert (=> b!59817 (=> (not res!33141) (not e!39305))))

(assert (=> b!59817 (= res!33141 (containsKey!126 lt!24400 (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!11623 c!7718) b!59809))

(assert (= (and d!11623 (not c!7718)) b!59810))

(assert (= (and b!59810 c!7720) b!59811))

(assert (= (and b!59810 (not c!7720)) b!59816))

(assert (= (and b!59816 c!7717) b!59815))

(assert (= (and b!59816 (not c!7717)) b!59813))

(assert (= (or b!59815 b!59813) bm!4507))

(assert (= (or b!59811 bm!4507) bm!4509))

(assert (= (or b!59809 bm!4509) bm!4508))

(assert (= (and bm!4508 c!7719) b!59808))

(assert (= (and bm!4508 (not c!7719)) b!59814))

(assert (= (and d!11623 res!33140) b!59817))

(assert (= (and b!59817 res!33141) b!59812))

(declare-fun m!52093 () Bool)

(assert (=> b!59817 m!52093))

(declare-fun m!52095 () Bool)

(assert (=> d!11623 m!52095))

(declare-fun m!52097 () Bool)

(assert (=> d!11623 m!52097))

(declare-fun m!52099 () Bool)

(assert (=> b!59812 m!52099))

(declare-fun m!52101 () Bool)

(assert (=> b!59808 m!52101))

(declare-fun m!52103 () Bool)

(assert (=> bm!4508 m!52103))

(assert (=> d!11311 d!11623))

(declare-fun d!11625 () Bool)

(assert (=> d!11625 (= (get!1074 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2376 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!59335 d!11625))

(declare-fun d!11627 () Bool)

(assert (=> d!11627 (= (inRange!0 (ite c!7524 (index!3044 lt!23958) (ite c!7523 (index!3043 lt!23961) (index!3046 lt!23961))) (mask!5925 newMap!16)) (and (bvsge (ite c!7524 (index!3044 lt!23958) (ite c!7523 (index!3043 lt!23961) (index!3046 lt!23961))) #b00000000000000000000000000000000) (bvslt (ite c!7524 (index!3044 lt!23958) (ite c!7523 (index!3043 lt!23961) (index!3046 lt!23961))) (bvadd (mask!5925 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4423 d!11627))

(declare-fun d!11629 () Bool)

(assert (=> d!11629 (isDefined!76 (getValueByKey!122 (toList!693 call!4382) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(declare-fun lt!24401 () Unit!1550)

(assert (=> d!11629 (= lt!24401 (choose!315 (toList!693 call!4382) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(declare-fun e!39306 () Bool)

(assert (=> d!11629 e!39306))

(declare-fun res!33142 () Bool)

(assert (=> d!11629 (=> (not res!33142) (not e!39306))))

(assert (=> d!11629 (= res!33142 (isStrictlySorted!279 (toList!693 call!4382)))))

(assert (=> d!11629 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 call!4382) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) lt!24401)))

(declare-fun b!59818 () Bool)

(assert (=> b!59818 (= e!39306 (containsKey!126 (toList!693 call!4382) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(assert (= (and d!11629 res!33142) b!59818))

(assert (=> d!11629 m!50353))

(assert (=> d!11629 m!50793))

(assert (=> d!11629 m!50793))

(assert (=> d!11629 m!50795))

(assert (=> d!11629 m!50353))

(declare-fun m!52105 () Bool)

(assert (=> d!11629 m!52105))

(declare-fun m!52107 () Bool)

(assert (=> d!11629 m!52107))

(assert (=> b!59818 m!50353))

(assert (=> b!59818 m!50789))

(assert (=> b!59097 d!11629))

(assert (=> b!59097 d!11369))

(assert (=> b!59097 d!11371))

(assert (=> b!59302 d!11381))

(declare-fun d!11631 () Bool)

(assert (=> d!11631 (= (isEmpty!298 (getValueByKey!122 (toList!693 lt!23596) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355))) (not ((_ is Some!127) (getValueByKey!122 (toList!693 lt!23596) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))))

(assert (=> d!11317 d!11631))

(assert (=> b!59317 d!11381))

(declare-fun d!11633 () Bool)

(assert (=> d!11633 (isDefined!76 (getValueByKey!122 (toList!693 e!38780) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(declare-fun lt!24402 () Unit!1550)

(assert (=> d!11633 (= lt!24402 (choose!315 (toList!693 e!38780) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(declare-fun e!39307 () Bool)

(assert (=> d!11633 e!39307))

(declare-fun res!33143 () Bool)

(assert (=> d!11633 (=> (not res!33143) (not e!39307))))

(assert (=> d!11633 (= res!33143 (isStrictlySorted!279 (toList!693 e!38780)))))

(assert (=> d!11633 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 e!38780) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) lt!24402)))

(declare-fun b!59819 () Bool)

(assert (=> b!59819 (= e!39307 (containsKey!126 (toList!693 e!38780) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(assert (= (and d!11633 res!33143) b!59819))

(assert (=> d!11633 m!50353))

(assert (=> d!11633 m!50637))

(assert (=> d!11633 m!50637))

(assert (=> d!11633 m!50639))

(assert (=> d!11633 m!50353))

(declare-fun m!52109 () Bool)

(assert (=> d!11633 m!52109))

(declare-fun m!52111 () Bool)

(assert (=> d!11633 m!52111))

(assert (=> b!59819 m!50353))

(assert (=> b!59819 m!50633))

(assert (=> b!58994 d!11633))

(assert (=> b!58994 d!11375))

(assert (=> b!58994 d!11377))

(declare-fun d!11635 () Bool)

(assert (=> d!11635 (= (get!1076 (getValueByKey!122 (toList!693 lt!23704) #b1000000000000000000000000000000000000000000000000000000000000000)) (v!2382 (getValueByKey!122 (toList!693 lt!23704) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!11269 d!11635))

(assert (=> d!11269 d!11517))

(assert (=> b!59043 d!11405))

(assert (=> b!59043 d!11407))

(declare-fun b!59823 () Bool)

(declare-fun e!39308 () Bool)

(assert (=> b!59823 (= e!39308 (and (bvsge (extraKeys!1929 (_2!1028 lt!23773)) #b00000000000000000000000000000000) (bvsle (extraKeys!1929 (_2!1028 lt!23773)) #b00000000000000000000000000000011) (bvsge (_vacant!357 (_2!1028 lt!23773)) #b00000000000000000000000000000000)))))

(declare-fun d!11637 () Bool)

(declare-fun res!33147 () Bool)

(assert (=> d!11637 (=> (not res!33147) (not e!39308))))

(assert (=> d!11637 (= res!33147 (validMask!0 (mask!5925 (_2!1028 lt!23773))))))

(assert (=> d!11637 (= (simpleValid!42 (_2!1028 lt!23773)) e!39308)))

(declare-fun b!59820 () Bool)

(declare-fun res!33144 () Bool)

(assert (=> b!59820 (=> (not res!33144) (not e!39308))))

(assert (=> b!59820 (= res!33144 (and (= (size!2000 (_values!2025 (_2!1028 lt!23773))) (bvadd (mask!5925 (_2!1028 lt!23773)) #b00000000000000000000000000000001)) (= (size!1999 (_keys!3665 (_2!1028 lt!23773))) (size!2000 (_values!2025 (_2!1028 lt!23773)))) (bvsge (_size!357 (_2!1028 lt!23773)) #b00000000000000000000000000000000) (bvsle (_size!357 (_2!1028 lt!23773)) (bvadd (mask!5925 (_2!1028 lt!23773)) #b00000000000000000000000000000001))))))

(declare-fun b!59821 () Bool)

(declare-fun res!33145 () Bool)

(assert (=> b!59821 (=> (not res!33145) (not e!39308))))

(assert (=> b!59821 (= res!33145 (bvsge (size!2005 (_2!1028 lt!23773)) (_size!357 (_2!1028 lt!23773))))))

(declare-fun b!59822 () Bool)

(declare-fun res!33146 () Bool)

(assert (=> b!59822 (=> (not res!33146) (not e!39308))))

(assert (=> b!59822 (= res!33146 (= (size!2005 (_2!1028 lt!23773)) (bvadd (_size!357 (_2!1028 lt!23773)) (bvsdiv (bvadd (extraKeys!1929 (_2!1028 lt!23773)) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(assert (= (and d!11637 res!33147) b!59820))

(assert (= (and b!59820 res!33144) b!59821))

(assert (= (and b!59821 res!33145) b!59822))

(assert (= (and b!59822 res!33146) b!59823))

(assert (=> d!11637 m!51369))

(declare-fun m!52113 () Bool)

(assert (=> b!59821 m!52113))

(assert (=> b!59822 m!52113))

(assert (=> d!11337 d!11637))

(declare-fun d!11639 () Bool)

(assert (=> d!11639 (= (apply!66 lt!24002 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)) (get!1076 (getValueByKey!122 (toList!693 lt!24002) (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2596 () Bool)

(assert (= bs!2596 d!11639))

(assert (=> bs!2596 m!50643))

(assert (=> bs!2596 m!52061))

(assert (=> bs!2596 m!52061))

(declare-fun m!52115 () Bool)

(assert (=> bs!2596 m!52115))

(assert (=> b!59169 d!11639))

(declare-fun d!11641 () Bool)

(declare-fun c!7721 () Bool)

(assert (=> d!11641 (= c!7721 ((_ is ValueCellFull!854) (select (arr!1769 (ite c!7466 (_values!2025 newMap!16) lt!23792)) #b00000000000000000000000000000000)))))

(declare-fun e!39309 () V!2841)

(assert (=> d!11641 (= (get!1073 (select (arr!1769 (ite c!7466 (_values!2025 newMap!16) lt!23792)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!39309)))

(declare-fun b!59824 () Bool)

(assert (=> b!59824 (= e!39309 (get!1074 (select (arr!1769 (ite c!7466 (_values!2025 newMap!16) lt!23792)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!59825 () Bool)

(assert (=> b!59825 (= e!39309 (get!1075 (select (arr!1769 (ite c!7466 (_values!2025 newMap!16) lt!23792)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11641 c!7721) b!59824))

(assert (= (and d!11641 (not c!7721)) b!59825))

(assert (=> b!59824 m!50915))

(assert (=> b!59824 m!50697))

(declare-fun m!52117 () Bool)

(assert (=> b!59824 m!52117))

(assert (=> b!59825 m!50915))

(assert (=> b!59825 m!50697))

(declare-fun m!52119 () Bool)

(assert (=> b!59825 m!52119))

(assert (=> b!59169 d!11641))

(declare-fun bm!4510 () Bool)

(declare-fun call!4513 () (_ BitVec 32))

(assert (=> bm!4510 (= call!4513 (arrayCountValidKeys!0 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992))))))))

(declare-fun b!59826 () Bool)

(declare-fun e!39311 () (_ BitVec 32))

(assert (=> b!59826 (= e!39311 (bvadd #b00000000000000000000000000000001 call!4513))))

(declare-fun b!59827 () Bool)

(declare-fun e!39310 () (_ BitVec 32))

(assert (=> b!59827 (= e!39310 #b00000000000000000000000000000000)))

(declare-fun d!11643 () Bool)

(declare-fun lt!24403 () (_ BitVec 32))

(assert (=> d!11643 (and (bvsge lt!24403 #b00000000000000000000000000000000) (bvsle lt!24403 (bvsub (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) #b00000000000000000000000000000000)))))

(assert (=> d!11643 (= lt!24403 e!39310)))

(declare-fun c!7722 () Bool)

(assert (=> d!11643 (= c!7722 (bvsge #b00000000000000000000000000000000 (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992))))))))

(assert (=> d!11643 (and (bvsle #b00000000000000000000000000000000 (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992))))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992))))))))

(assert (=> d!11643 (= (arrayCountValidKeys!0 (_keys!3665 (v!2377 (underlying!223 thiss!992))) #b00000000000000000000000000000000 (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992))))) lt!24403)))

(declare-fun b!59828 () Bool)

(assert (=> b!59828 (= e!39311 call!4513)))

(declare-fun b!59829 () Bool)

(assert (=> b!59829 (= e!39310 e!39311)))

(declare-fun c!7723 () Bool)

(assert (=> b!59829 (= c!7723 (validKeyInArray!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) #b00000000000000000000000000000000)))))

(assert (= (and d!11643 c!7722) b!59827))

(assert (= (and d!11643 (not c!7722)) b!59829))

(assert (= (and b!59829 c!7723) b!59826))

(assert (= (and b!59829 (not c!7723)) b!59828))

(assert (= (or b!59826 b!59828) bm!4510))

(declare-fun m!52121 () Bool)

(assert (=> bm!4510 m!52121))

(assert (=> b!59829 m!51293))

(assert (=> b!59829 m!51293))

(assert (=> b!59829 m!51295))

(assert (=> b!59100 d!11643))

(assert (=> b!59060 d!11427))

(assert (=> b!59060 d!11429))

(declare-fun b!59848 () Bool)

(declare-fun e!39324 () SeekEntryResult!230)

(declare-fun e!39322 () SeekEntryResult!230)

(assert (=> b!59848 (= e!39324 e!39322)))

(declare-fun c!7730 () Bool)

(declare-fun lt!24408 () (_ BitVec 64))

(assert (=> b!59848 (= c!7730 (or (= lt!24408 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (= (bvadd lt!24408 lt!24408) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!59849 () Bool)

(declare-fun e!39326 () Bool)

(declare-fun e!39323 () Bool)

(assert (=> b!59849 (= e!39326 e!39323)))

(declare-fun res!33156 () Bool)

(declare-fun lt!24409 () SeekEntryResult!230)

(assert (=> b!59849 (= res!33156 (and ((_ is Intermediate!230) lt!24409) (not (undefined!1042 lt!24409)) (bvslt (x!10005 lt!24409) #b01111111111111111111111111111110) (bvsge (x!10005 lt!24409) #b00000000000000000000000000000000) (bvsge (x!10005 lt!24409) #b00000000000000000000000000000000)))))

(assert (=> b!59849 (=> (not res!33156) (not e!39323))))

(declare-fun b!59851 () Bool)

(assert (=> b!59851 (= e!39324 (Intermediate!230 true (toIndex!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (mask!5925 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!59852 () Bool)

(assert (=> b!59852 (= e!39322 (seekKeyOrZeroOrLongMinValue!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (nextIndex!0 (toIndex!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (mask!5925 newMap!16)) #b00000000000000000000000000000000 (mask!5925 newMap!16)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (_keys!3665 newMap!16) (mask!5925 newMap!16)))))

(declare-fun b!59853 () Bool)

(assert (=> b!59853 (and (bvsge (index!3045 lt!24409) #b00000000000000000000000000000000) (bvslt (index!3045 lt!24409) (size!1999 (_keys!3665 newMap!16))))))

(declare-fun res!33154 () Bool)

(assert (=> b!59853 (= res!33154 (= (select (arr!1768 (_keys!3665 newMap!16)) (index!3045 lt!24409)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!39325 () Bool)

(assert (=> b!59853 (=> res!33154 e!39325)))

(declare-fun b!59854 () Bool)

(assert (=> b!59854 (and (bvsge (index!3045 lt!24409) #b00000000000000000000000000000000) (bvslt (index!3045 lt!24409) (size!1999 (_keys!3665 newMap!16))))))

(declare-fun res!33155 () Bool)

(assert (=> b!59854 (= res!33155 (= (select (arr!1768 (_keys!3665 newMap!16)) (index!3045 lt!24409)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(assert (=> b!59854 (=> res!33155 e!39325)))

(assert (=> b!59854 (= e!39323 e!39325)))

(declare-fun b!59855 () Bool)

(assert (=> b!59855 (and (bvsge (index!3045 lt!24409) #b00000000000000000000000000000000) (bvslt (index!3045 lt!24409) (size!1999 (_keys!3665 newMap!16))))))

(assert (=> b!59855 (= e!39325 (= (select (arr!1768 (_keys!3665 newMap!16)) (index!3045 lt!24409)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59856 () Bool)

(assert (=> b!59856 (= e!39322 (Intermediate!230 false (toIndex!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (mask!5925 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!59850 () Bool)

(assert (=> b!59850 (= e!39326 (bvsge (x!10005 lt!24409) #b01111111111111111111111111111110))))

(declare-fun d!11645 () Bool)

(assert (=> d!11645 e!39326))

(declare-fun c!7732 () Bool)

(assert (=> d!11645 (= c!7732 (and ((_ is Intermediate!230) lt!24409) (undefined!1042 lt!24409)))))

(assert (=> d!11645 (= lt!24409 e!39324)))

(declare-fun c!7731 () Bool)

(assert (=> d!11645 (= c!7731 (bvsge #b00000000000000000000000000000000 #b01111111111111111111111111111110))))

(assert (=> d!11645 (= lt!24408 (select (arr!1768 (_keys!3665 newMap!16)) (toIndex!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (mask!5925 newMap!16))))))

(assert (=> d!11645 (validMask!0 (mask!5925 newMap!16))))

(assert (=> d!11645 (= (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (mask!5925 newMap!16)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (_keys!3665 newMap!16) (mask!5925 newMap!16)) lt!24409)))

(assert (= (and d!11645 c!7731) b!59851))

(assert (= (and d!11645 (not c!7731)) b!59848))

(assert (= (and b!59848 c!7730) b!59856))

(assert (= (and b!59848 (not c!7730)) b!59852))

(assert (= (and d!11645 c!7732) b!59850))

(assert (= (and d!11645 (not c!7732)) b!59849))

(assert (= (and b!59849 res!33156) b!59854))

(assert (= (and b!59854 (not res!33155)) b!59853))

(assert (= (and b!59853 (not res!33154)) b!59855))

(assert (=> b!59852 m!50767))

(declare-fun m!52123 () Bool)

(assert (=> b!59852 m!52123))

(assert (=> b!59852 m!52123))

(assert (=> b!59852 m!50353))

(declare-fun m!52125 () Bool)

(assert (=> b!59852 m!52125))

(declare-fun m!52127 () Bool)

(assert (=> b!59853 m!52127))

(assert (=> b!59855 m!52127))

(assert (=> b!59854 m!52127))

(assert (=> d!11645 m!50767))

(declare-fun m!52129 () Bool)

(assert (=> d!11645 m!52129))

(assert (=> d!11645 m!50657))

(assert (=> d!11249 d!11645))

(declare-fun d!11647 () Bool)

(declare-fun lt!24415 () (_ BitVec 32))

(declare-fun lt!24414 () (_ BitVec 32))

(assert (=> d!11647 (= lt!24415 (bvmul (bvxor lt!24414 (bvlshr lt!24414 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))))

(assert (=> d!11647 (= lt!24414 ((_ extract 31 0) (bvand (bvxor (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (bvlshr (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))))

(assert (=> d!11647 (and (bvsge (mask!5925 newMap!16) #b00000000000000000000000000000000) (let ((res!33157 (let ((h!2016 ((_ extract 31 0) (bvand (bvxor (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (bvlshr (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))) (let ((x!10109 (bvmul (bvxor h!2016 (bvlshr h!2016 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))) (bvand (bvxor x!10109 (bvlshr x!10109 #b00000000000000000000000000001101)) (mask!5925 newMap!16)))))) (and (bvslt res!33157 (bvadd (mask!5925 newMap!16) #b00000000000000000000000000000001)) (bvsge res!33157 #b00000000000000000000000000000000))))))

(assert (=> d!11647 (= (toIndex!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (mask!5925 newMap!16)) (bvand (bvxor lt!24415 (bvlshr lt!24415 #b00000000000000000000000000001101)) (mask!5925 newMap!16)))))

(assert (=> d!11249 d!11647))

(assert (=> d!11249 d!11347))

(declare-fun d!11649 () Bool)

(assert (=> d!11649 (isDefined!76 (getValueByKey!122 (toList!693 lt!23704) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!24416 () Unit!1550)

(assert (=> d!11649 (= lt!24416 (choose!315 (toList!693 lt!23704) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!39327 () Bool)

(assert (=> d!11649 e!39327))

(declare-fun res!33158 () Bool)

(assert (=> d!11649 (=> (not res!33158) (not e!39327))))

(assert (=> d!11649 (= res!33158 (isStrictlySorted!279 (toList!693 lt!23704)))))

(assert (=> d!11649 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 lt!23704) #b0000000000000000000000000000000000000000000000000000000000000000) lt!24416)))

(declare-fun b!59857 () Bool)

(assert (=> b!59857 (= e!39327 (containsKey!126 (toList!693 lt!23704) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!11649 res!33158) b!59857))

(assert (=> d!11649 m!50757))

(assert (=> d!11649 m!50757))

(assert (=> d!11649 m!51049))

(declare-fun m!52131 () Bool)

(assert (=> d!11649 m!52131))

(assert (=> d!11649 m!51427))

(assert (=> b!59857 m!51045))

(assert (=> b!59231 d!11649))

(assert (=> b!59231 d!11401))

(assert (=> b!59231 d!11351))

(assert (=> bm!4428 d!11525))

(declare-fun d!11651 () Bool)

(assert (=> d!11651 (= (get!1076 (getValueByKey!122 (toList!693 lt!23704) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (v!2382 (getValueByKey!122 (toList!693 lt!23704) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!11339 d!11651))

(assert (=> d!11339 d!11407))

(assert (=> d!11289 d!11277))

(declare-fun d!11653 () Bool)

(declare-fun e!39329 () Bool)

(assert (=> d!11653 e!39329))

(declare-fun res!33159 () Bool)

(assert (=> d!11653 (=> res!33159 e!39329)))

(declare-fun lt!24417 () Bool)

(assert (=> d!11653 (= res!33159 (not lt!24417))))

(declare-fun lt!24419 () Bool)

(assert (=> d!11653 (= lt!24417 lt!24419)))

(declare-fun lt!24418 () Unit!1550)

(declare-fun e!39328 () Unit!1550)

(assert (=> d!11653 (= lt!24418 e!39328)))

(declare-fun c!7733 () Bool)

(assert (=> d!11653 (= c!7733 lt!24419)))

(assert (=> d!11653 (= lt!24419 (containsKey!126 (toList!693 lt!23702) lt!23686))))

(assert (=> d!11653 (= (contains!682 lt!23702 lt!23686) lt!24417)))

(declare-fun b!59858 () Bool)

(declare-fun lt!24420 () Unit!1550)

(assert (=> b!59858 (= e!39328 lt!24420)))

(assert (=> b!59858 (= lt!24420 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 lt!23702) lt!23686))))

(assert (=> b!59858 (isDefined!76 (getValueByKey!122 (toList!693 lt!23702) lt!23686))))

(declare-fun b!59859 () Bool)

(declare-fun Unit!1598 () Unit!1550)

(assert (=> b!59859 (= e!39328 Unit!1598)))

(declare-fun b!59860 () Bool)

(assert (=> b!59860 (= e!39329 (isDefined!76 (getValueByKey!122 (toList!693 lt!23702) lt!23686)))))

(assert (= (and d!11653 c!7733) b!59858))

(assert (= (and d!11653 (not c!7733)) b!59859))

(assert (= (and d!11653 (not res!33159)) b!59860))

(declare-fun m!52133 () Bool)

(assert (=> d!11653 m!52133))

(declare-fun m!52135 () Bool)

(assert (=> b!59858 m!52135))

(assert (=> b!59858 m!50969))

(assert (=> b!59858 m!50969))

(declare-fun m!52137 () Bool)

(assert (=> b!59858 m!52137))

(assert (=> b!59860 m!50969))

(assert (=> b!59860 m!50969))

(assert (=> b!59860 m!52137))

(assert (=> d!11289 d!11653))

(assert (=> d!11289 d!11281))

(assert (=> d!11289 d!11285))

(declare-fun d!11655 () Bool)

(assert (=> d!11655 (= (apply!66 (+!81 lt!23702 (tuple2!2037 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) lt!23686) (apply!66 lt!23702 lt!23686))))

(assert (=> d!11655 true))

(declare-fun _$34!760 () Unit!1550)

(assert (=> d!11655 (= (choose!313 lt!23702 lt!23684 (minValue!1958 (v!2377 (underlying!223 thiss!992))) lt!23686) _$34!760)))

(declare-fun bs!2597 () Bool)

(assert (= bs!2597 d!11655))

(assert (=> bs!2597 m!50491))

(assert (=> bs!2597 m!50491))

(assert (=> bs!2597 m!50493))

(assert (=> bs!2597 m!50499))

(assert (=> d!11289 d!11655))

(declare-fun d!11657 () Bool)

(declare-fun e!39331 () Bool)

(assert (=> d!11657 e!39331))

(declare-fun res!33160 () Bool)

(assert (=> d!11657 (=> res!33160 e!39331)))

(declare-fun lt!24421 () Bool)

(assert (=> d!11657 (= res!33160 (not lt!24421))))

(declare-fun lt!24423 () Bool)

(assert (=> d!11657 (= lt!24421 lt!24423)))

(declare-fun lt!24422 () Unit!1550)

(declare-fun e!39330 () Unit!1550)

(assert (=> d!11657 (= lt!24422 e!39330)))

(declare-fun c!7734 () Bool)

(assert (=> d!11657 (= c!7734 lt!24423)))

(assert (=> d!11657 (= lt!24423 (containsKey!126 (toList!693 (getCurrentListMap!389 lt!23962 lt!23956 (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (select (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)))))))

(assert (=> d!11657 (= (contains!682 (getCurrentListMap!389 lt!23962 lt!23956 (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (select (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)))) lt!24421)))

(declare-fun b!59861 () Bool)

(declare-fun lt!24424 () Unit!1550)

(assert (=> b!59861 (= e!39330 lt!24424)))

(assert (=> b!59861 (= lt!24424 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 (getCurrentListMap!389 lt!23962 lt!23956 (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (select (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)))))))

(assert (=> b!59861 (isDefined!76 (getValueByKey!122 (toList!693 (getCurrentListMap!389 lt!23962 lt!23956 (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (select (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)))))))

(declare-fun b!59862 () Bool)

(declare-fun Unit!1599 () Unit!1550)

(assert (=> b!59862 (= e!39330 Unit!1599)))

(declare-fun b!59863 () Bool)

(assert (=> b!59863 (= e!39331 (isDefined!76 (getValueByKey!122 (toList!693 (getCurrentListMap!389 lt!23962 lt!23956 (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (select (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774))))))))

(assert (= (and d!11657 c!7734) b!59861))

(assert (= (and d!11657 (not c!7734)) b!59862))

(assert (= (and d!11657 (not res!33160)) b!59863))

(assert (=> d!11657 m!50843))

(declare-fun m!52139 () Bool)

(assert (=> d!11657 m!52139))

(assert (=> b!59861 m!50843))

(declare-fun m!52141 () Bool)

(assert (=> b!59861 m!52141))

(assert (=> b!59861 m!50843))

(declare-fun m!52143 () Bool)

(assert (=> b!59861 m!52143))

(assert (=> b!59861 m!52143))

(declare-fun m!52145 () Bool)

(assert (=> b!59861 m!52145))

(assert (=> b!59863 m!50843))

(assert (=> b!59863 m!52143))

(assert (=> b!59863 m!52143))

(assert (=> b!59863 m!52145))

(assert (=> d!11263 d!11657))

(declare-fun b!59864 () Bool)

(declare-fun e!39335 () Bool)

(declare-fun call!4514 () Bool)

(assert (=> b!59864 (= e!39335 call!4514)))

(declare-fun b!59865 () Bool)

(declare-fun e!39333 () Bool)

(declare-fun e!39332 () Bool)

(assert (=> b!59865 (= e!39333 e!39332)))

(declare-fun res!33161 () Bool)

(assert (=> b!59865 (=> (not res!33161) (not e!39332))))

(declare-fun e!39334 () Bool)

(assert (=> b!59865 (= res!33161 (not e!39334))))

(declare-fun res!33162 () Bool)

(assert (=> b!59865 (=> (not res!33162) (not e!39334))))

(assert (=> b!59865 (= res!33162 (validKeyInArray!0 (select (arr!1768 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16)))) lt!23959)))))

(declare-fun c!7735 () Bool)

(declare-fun bm!4511 () Bool)

(assert (=> bm!4511 (= call!4514 (arrayNoDuplicates!0 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16))) (bvadd lt!23959 #b00000000000000000000000000000001) (ite c!7735 (Cons!1432 (select (arr!1768 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16)))) lt!23959) lt!23975) lt!23975)))))

(declare-fun b!59866 () Bool)

(assert (=> b!59866 (= e!39335 call!4514)))

(declare-fun d!11659 () Bool)

(declare-fun res!33163 () Bool)

(assert (=> d!11659 (=> res!33163 e!39333)))

(assert (=> d!11659 (= res!33163 (bvsge lt!23959 (size!1999 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16))))))))

(assert (=> d!11659 (= (arrayNoDuplicates!0 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16))) lt!23959 lt!23975) e!39333)))

(declare-fun b!59867 () Bool)

(assert (=> b!59867 (= e!39332 e!39335)))

(assert (=> b!59867 (= c!7735 (validKeyInArray!0 (select (arr!1768 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16)))) lt!23959)))))

(declare-fun b!59868 () Bool)

(assert (=> b!59868 (= e!39334 (contains!683 lt!23975 (select (arr!1768 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16)))) lt!23959)))))

(assert (= (and d!11659 (not res!33163)) b!59865))

(assert (= (and b!59865 res!33162) b!59868))

(assert (= (and b!59865 res!33161) b!59867))

(assert (= (and b!59867 c!7735) b!59864))

(assert (= (and b!59867 (not c!7735)) b!59866))

(assert (= (or b!59864 b!59866) bm!4511))

(declare-fun m!52147 () Bool)

(assert (=> b!59865 m!52147))

(assert (=> b!59865 m!52147))

(declare-fun m!52149 () Bool)

(assert (=> b!59865 m!52149))

(assert (=> bm!4511 m!52147))

(declare-fun m!52151 () Bool)

(assert (=> bm!4511 m!52151))

(assert (=> b!59867 m!52147))

(assert (=> b!59867 m!52147))

(assert (=> b!59867 m!52149))

(assert (=> b!59868 m!52147))

(assert (=> b!59868 m!52147))

(declare-fun m!52153 () Bool)

(assert (=> b!59868 m!52153))

(assert (=> d!11263 d!11659))

(declare-fun d!11661 () Bool)

(declare-fun e!39338 () Bool)

(assert (=> d!11661 e!39338))

(declare-fun res!33166 () Bool)

(assert (=> d!11661 (=> (not res!33166) (not e!39338))))

(assert (=> d!11661 (= res!33166 (and (bvsge (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) #b00000000000000000000000000000000) (bvslt (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (size!1999 (_keys!3665 newMap!16))) (bvslt (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (size!2000 (_values!2025 newMap!16)))))))

(declare-fun lt!24427 () Unit!1550)

(declare-fun choose!321 (array!3697 array!3699 (_ BitVec 32) (_ BitVec 32) V!2841 V!2841 (_ BitVec 32) (_ BitVec 64) V!2841 Int) Unit!1550)

(assert (=> d!11661 (= lt!24427 (choose!321 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2042 newMap!16)))))

(assert (=> d!11661 (validMask!0 (mask!5925 newMap!16))))

(assert (=> d!11661 (= (lemmaAddValidKeyToArrayThenAddPairToListMap!5 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2042 newMap!16)) lt!24427)))

(declare-fun b!59871 () Bool)

(assert (=> b!59871 (= e!39338 (= (+!81 (getCurrentListMap!389 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!389 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16))) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16))) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))))))

(assert (= (and d!11661 res!33166) b!59871))

(assert (=> d!11661 m!50353))

(assert (=> d!11661 m!50369))

(declare-fun m!52155 () Bool)

(assert (=> d!11661 m!52155))

(assert (=> d!11661 m!50657))

(assert (=> b!59871 m!50849))

(assert (=> b!59871 m!50481))

(assert (=> b!59871 m!50753))

(assert (=> b!59871 m!50855))

(assert (=> b!59871 m!50827))

(assert (=> b!59871 m!50481))

(assert (=> d!11263 d!11661))

(assert (=> d!11263 d!11231))

(assert (=> d!11263 d!11331))

(assert (=> d!11263 d!11219))

(declare-fun d!11663 () Bool)

(assert (=> d!11663 (= (arrayCountValidKeys!0 lt!23967 (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (bvadd (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lt!24430 () Unit!1550)

(declare-fun choose!2 (array!3697 (_ BitVec 32)) Unit!1550)

(assert (=> d!11663 (= lt!24430 (choose!2 lt!23967 (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774))))))

(declare-fun e!39341 () Bool)

(assert (=> d!11663 e!39341))

(declare-fun res!33171 () Bool)

(assert (=> d!11663 (=> (not res!33171) (not e!39341))))

(assert (=> d!11663 (= res!33171 (and (bvsge (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) #b00000000000000000000000000000000) (bvslt (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (size!1999 lt!23967))))))

(assert (=> d!11663 (= (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!23967 (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774))) lt!24430)))

(declare-fun b!59876 () Bool)

(declare-fun res!33172 () Bool)

(assert (=> b!59876 (=> (not res!33172) (not e!39341))))

(assert (=> b!59876 (= res!33172 (validKeyInArray!0 (select (arr!1768 lt!23967) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)))))))

(declare-fun b!59877 () Bool)

(assert (=> b!59877 (= e!39341 (bvslt (size!1999 lt!23967) #b01111111111111111111111111111111))))

(assert (= (and d!11663 res!33171) b!59876))

(assert (= (and b!59876 res!33172) b!59877))

(assert (=> d!11663 m!50837))

(declare-fun m!52157 () Bool)

(assert (=> d!11663 m!52157))

(declare-fun m!52159 () Bool)

(assert (=> b!59876 m!52159))

(assert (=> b!59876 m!52159))

(declare-fun m!52161 () Bool)

(assert (=> b!59876 m!52161))

(assert (=> d!11263 d!11663))

(declare-fun call!4515 () (_ BitVec 32))

(declare-fun bm!4512 () Bool)

(assert (=> bm!4512 (= call!4515 (arrayCountValidKeys!0 lt!23967 (bvadd (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) #b00000000000000000000000000000001) (bvadd (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) #b00000000000000000000000000000001)))))

(declare-fun b!59878 () Bool)

(declare-fun e!39343 () (_ BitVec 32))

(assert (=> b!59878 (= e!39343 (bvadd #b00000000000000000000000000000001 call!4515))))

(declare-fun b!59879 () Bool)

(declare-fun e!39342 () (_ BitVec 32))

(assert (=> b!59879 (= e!39342 #b00000000000000000000000000000000)))

(declare-fun d!11665 () Bool)

(declare-fun lt!24431 () (_ BitVec 32))

(assert (=> d!11665 (and (bvsge lt!24431 #b00000000000000000000000000000000) (bvsle lt!24431 (bvsub (size!1999 lt!23967) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)))))))

(assert (=> d!11665 (= lt!24431 e!39342)))

(declare-fun c!7736 () Bool)

(assert (=> d!11665 (= c!7736 (bvsge (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (bvadd (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) #b00000000000000000000000000000001)))))

(assert (=> d!11665 (and (bvsle (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (bvadd (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) #b00000000000000000000000000000001)) (bvsge (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) #b00000000000000000000000000000000) (bvsle (bvadd (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) #b00000000000000000000000000000001) (size!1999 lt!23967)))))

(assert (=> d!11665 (= (arrayCountValidKeys!0 lt!23967 (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (bvadd (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) #b00000000000000000000000000000001)) lt!24431)))

(declare-fun b!59880 () Bool)

(assert (=> b!59880 (= e!39343 call!4515)))

(declare-fun b!59881 () Bool)

(assert (=> b!59881 (= e!39342 e!39343)))

(declare-fun c!7737 () Bool)

(assert (=> b!59881 (= c!7737 (validKeyInArray!0 (select (arr!1768 lt!23967) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)))))))

(assert (= (and d!11665 c!7736) b!59879))

(assert (= (and d!11665 (not c!7736)) b!59881))

(assert (= (and b!59881 c!7737) b!59878))

(assert (= (and b!59881 (not c!7737)) b!59880))

(assert (= (or b!59878 b!59880) bm!4512))

(declare-fun m!52163 () Bool)

(assert (=> bm!4512 m!52163))

(assert (=> b!59881 m!52159))

(assert (=> b!59881 m!52159))

(assert (=> b!59881 m!52161))

(assert (=> d!11263 d!11665))

(declare-fun b!59882 () Bool)

(declare-fun e!39350 () Bool)

(assert (=> b!59882 (= e!39350 (validKeyInArray!0 (select (arr!1768 lt!23962) #b00000000000000000000000000000000)))))

(declare-fun bm!4513 () Bool)

(declare-fun call!4522 () Bool)

(declare-fun lt!24453 () ListLongMap!1355)

(assert (=> bm!4513 (= call!4522 (contains!682 lt!24453 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59883 () Bool)

(declare-fun e!39348 () Unit!1550)

(declare-fun Unit!1600 () Unit!1550)

(assert (=> b!59883 (= e!39348 Unit!1600)))

(declare-fun b!59884 () Bool)

(declare-fun res!33176 () Bool)

(declare-fun e!39351 () Bool)

(assert (=> b!59884 (=> (not res!33176) (not e!39351))))

(declare-fun e!39349 () Bool)

(assert (=> b!59884 (= res!33176 e!39349)))

(declare-fun c!7738 () Bool)

(assert (=> b!59884 (= c!7738 (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!59885 () Bool)

(declare-fun e!39345 () ListLongMap!1355)

(declare-fun call!4519 () ListLongMap!1355)

(assert (=> b!59885 (= e!39345 call!4519)))

(declare-fun bm!4514 () Bool)

(declare-fun call!4518 () ListLongMap!1355)

(declare-fun call!4520 () ListLongMap!1355)

(assert (=> bm!4514 (= call!4518 call!4520)))

(declare-fun b!59887 () Bool)

(declare-fun e!39356 () Bool)

(declare-fun e!39344 () Bool)

(assert (=> b!59887 (= e!39356 e!39344)))

(declare-fun res!33179 () Bool)

(declare-fun call!4516 () Bool)

(assert (=> b!59887 (= res!33179 call!4516)))

(assert (=> b!59887 (=> (not res!33179) (not e!39344))))

(declare-fun b!59888 () Bool)

(assert (=> b!59888 (= e!39351 e!39356)))

(declare-fun c!7739 () Bool)

(assert (=> b!59888 (= c!7739 (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4515 () Bool)

(assert (=> bm!4515 (= call!4516 (contains!682 lt!24453 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4516 () Bool)

(declare-fun call!4521 () ListLongMap!1355)

(assert (=> bm!4516 (= call!4519 call!4521)))

(declare-fun b!59889 () Bool)

(declare-fun c!7742 () Bool)

(assert (=> b!59889 (= c!7742 (and (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!39346 () ListLongMap!1355)

(assert (=> b!59889 (= e!39345 e!39346)))

(declare-fun b!59890 () Bool)

(declare-fun e!39354 () Bool)

(assert (=> b!59890 (= e!39354 (= (apply!66 lt!24453 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1958 newMap!16)))))

(declare-fun b!59891 () Bool)

(declare-fun res!33173 () Bool)

(assert (=> b!59891 (=> (not res!33173) (not e!39351))))

(declare-fun e!39355 () Bool)

(assert (=> b!59891 (= res!33173 e!39355)))

(declare-fun res!33175 () Bool)

(assert (=> b!59891 (=> res!33175 e!39355)))

(assert (=> b!59891 (= res!33175 (not e!39350))))

(declare-fun res!33181 () Bool)

(assert (=> b!59891 (=> (not res!33181) (not e!39350))))

(assert (=> b!59891 (= res!33181 (bvslt #b00000000000000000000000000000000 (size!1999 lt!23962)))))

(declare-fun b!59892 () Bool)

(declare-fun e!39353 () ListLongMap!1355)

(assert (=> b!59892 (= e!39353 (+!81 call!4521 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))

(declare-fun bm!4517 () Bool)

(declare-fun call!4517 () ListLongMap!1355)

(assert (=> bm!4517 (= call!4517 (getCurrentListMapNoExtraKeys!44 lt!23962 lt!23956 (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun c!7741 () Bool)

(declare-fun bm!4518 () Bool)

(declare-fun c!7743 () Bool)

(assert (=> bm!4518 (= call!4521 (+!81 (ite c!7741 call!4517 (ite c!7743 call!4520 call!4518)) (ite (or c!7741 c!7743) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))

(declare-fun b!59893 () Bool)

(assert (=> b!59893 (= e!39356 (not call!4516))))

(declare-fun b!59894 () Bool)

(assert (=> b!59894 (= e!39344 (= (apply!66 lt!24453 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1958 newMap!16)))))

(declare-fun e!39347 () Bool)

(declare-fun b!59895 () Bool)

(assert (=> b!59895 (= e!39347 (= (apply!66 lt!24453 (select (arr!1768 lt!23962) #b00000000000000000000000000000000)) (get!1073 (select (arr!1769 lt!23956) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!59895 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2000 lt!23956)))))

(assert (=> b!59895 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1999 lt!23962)))))

(declare-fun b!59886 () Bool)

(assert (=> b!59886 (= e!39355 e!39347)))

(declare-fun res!33178 () Bool)

(assert (=> b!59886 (=> (not res!33178) (not e!39347))))

(assert (=> b!59886 (= res!33178 (contains!682 lt!24453 (select (arr!1768 lt!23962) #b00000000000000000000000000000000)))))

(assert (=> b!59886 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1999 lt!23962)))))

(declare-fun d!11667 () Bool)

(assert (=> d!11667 e!39351))

(declare-fun res!33177 () Bool)

(assert (=> d!11667 (=> (not res!33177) (not e!39351))))

(assert (=> d!11667 (= res!33177 (or (bvsge #b00000000000000000000000000000000 (size!1999 lt!23962)) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1999 lt!23962)))))))

(declare-fun lt!24447 () ListLongMap!1355)

(assert (=> d!11667 (= lt!24453 lt!24447)))

(declare-fun lt!24452 () Unit!1550)

(assert (=> d!11667 (= lt!24452 e!39348)))

(declare-fun c!7740 () Bool)

(declare-fun e!39352 () Bool)

(assert (=> d!11667 (= c!7740 e!39352)))

(declare-fun res!33180 () Bool)

(assert (=> d!11667 (=> (not res!33180) (not e!39352))))

(assert (=> d!11667 (= res!33180 (bvslt #b00000000000000000000000000000000 (size!1999 lt!23962)))))

(assert (=> d!11667 (= lt!24447 e!39353)))

(assert (=> d!11667 (= c!7741 (and (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11667 (validMask!0 (mask!5925 newMap!16))))

(assert (=> d!11667 (= (getCurrentListMap!389 lt!23962 lt!23956 (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) lt!24453)))

(declare-fun b!59896 () Bool)

(declare-fun lt!24441 () Unit!1550)

(assert (=> b!59896 (= e!39348 lt!24441)))

(declare-fun lt!24446 () ListLongMap!1355)

(assert (=> b!59896 (= lt!24446 (getCurrentListMapNoExtraKeys!44 lt!23962 lt!23956 (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24445 () (_ BitVec 64))

(assert (=> b!59896 (= lt!24445 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24444 () (_ BitVec 64))

(assert (=> b!59896 (= lt!24444 (select (arr!1768 lt!23962) #b00000000000000000000000000000000))))

(declare-fun lt!24437 () Unit!1550)

(assert (=> b!59896 (= lt!24437 (addStillContains!42 lt!24446 lt!24445 (zeroValue!1958 newMap!16) lt!24444))))

(assert (=> b!59896 (contains!682 (+!81 lt!24446 (tuple2!2037 lt!24445 (zeroValue!1958 newMap!16))) lt!24444)))

(declare-fun lt!24448 () Unit!1550)

(assert (=> b!59896 (= lt!24448 lt!24437)))

(declare-fun lt!24451 () ListLongMap!1355)

(assert (=> b!59896 (= lt!24451 (getCurrentListMapNoExtraKeys!44 lt!23962 lt!23956 (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24433 () (_ BitVec 64))

(assert (=> b!59896 (= lt!24433 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24435 () (_ BitVec 64))

(assert (=> b!59896 (= lt!24435 (select (arr!1768 lt!23962) #b00000000000000000000000000000000))))

(declare-fun lt!24432 () Unit!1550)

(assert (=> b!59896 (= lt!24432 (addApplyDifferent!42 lt!24451 lt!24433 (minValue!1958 newMap!16) lt!24435))))

(assert (=> b!59896 (= (apply!66 (+!81 lt!24451 (tuple2!2037 lt!24433 (minValue!1958 newMap!16))) lt!24435) (apply!66 lt!24451 lt!24435))))

(declare-fun lt!24440 () Unit!1550)

(assert (=> b!59896 (= lt!24440 lt!24432)))

(declare-fun lt!24439 () ListLongMap!1355)

(assert (=> b!59896 (= lt!24439 (getCurrentListMapNoExtraKeys!44 lt!23962 lt!23956 (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24436 () (_ BitVec 64))

(assert (=> b!59896 (= lt!24436 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24443 () (_ BitVec 64))

(assert (=> b!59896 (= lt!24443 (select (arr!1768 lt!23962) #b00000000000000000000000000000000))))

(declare-fun lt!24438 () Unit!1550)

(assert (=> b!59896 (= lt!24438 (addApplyDifferent!42 lt!24439 lt!24436 (zeroValue!1958 newMap!16) lt!24443))))

(assert (=> b!59896 (= (apply!66 (+!81 lt!24439 (tuple2!2037 lt!24436 (zeroValue!1958 newMap!16))) lt!24443) (apply!66 lt!24439 lt!24443))))

(declare-fun lt!24450 () Unit!1550)

(assert (=> b!59896 (= lt!24450 lt!24438)))

(declare-fun lt!24449 () ListLongMap!1355)

(assert (=> b!59896 (= lt!24449 (getCurrentListMapNoExtraKeys!44 lt!23962 lt!23956 (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24442 () (_ BitVec 64))

(assert (=> b!59896 (= lt!24442 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24434 () (_ BitVec 64))

(assert (=> b!59896 (= lt!24434 (select (arr!1768 lt!23962) #b00000000000000000000000000000000))))

(assert (=> b!59896 (= lt!24441 (addApplyDifferent!42 lt!24449 lt!24442 (minValue!1958 newMap!16) lt!24434))))

(assert (=> b!59896 (= (apply!66 (+!81 lt!24449 (tuple2!2037 lt!24442 (minValue!1958 newMap!16))) lt!24434) (apply!66 lt!24449 lt!24434))))

(declare-fun b!59897 () Bool)

(assert (=> b!59897 (= e!39352 (validKeyInArray!0 (select (arr!1768 lt!23962) #b00000000000000000000000000000000)))))

(declare-fun b!59898 () Bool)

(assert (=> b!59898 (= e!39349 e!39354)))

(declare-fun res!33174 () Bool)

(assert (=> b!59898 (= res!33174 call!4522)))

(assert (=> b!59898 (=> (not res!33174) (not e!39354))))

(declare-fun b!59899 () Bool)

(assert (=> b!59899 (= e!39353 e!39345)))

(assert (=> b!59899 (= c!7743 (and (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!59900 () Bool)

(assert (=> b!59900 (= e!39346 call!4519)))

(declare-fun b!59901 () Bool)

(assert (=> b!59901 (= e!39349 (not call!4522))))

(declare-fun b!59902 () Bool)

(assert (=> b!59902 (= e!39346 call!4518)))

(declare-fun bm!4519 () Bool)

(assert (=> bm!4519 (= call!4520 call!4517)))

(assert (= (and d!11667 c!7741) b!59892))

(assert (= (and d!11667 (not c!7741)) b!59899))

(assert (= (and b!59899 c!7743) b!59885))

(assert (= (and b!59899 (not c!7743)) b!59889))

(assert (= (and b!59889 c!7742) b!59900))

(assert (= (and b!59889 (not c!7742)) b!59902))

(assert (= (or b!59900 b!59902) bm!4514))

(assert (= (or b!59885 bm!4514) bm!4519))

(assert (= (or b!59885 b!59900) bm!4516))

(assert (= (or b!59892 bm!4519) bm!4517))

(assert (= (or b!59892 bm!4516) bm!4518))

(assert (= (and d!11667 res!33180) b!59897))

(assert (= (and d!11667 c!7740) b!59896))

(assert (= (and d!11667 (not c!7740)) b!59883))

(assert (= (and d!11667 res!33177) b!59891))

(assert (= (and b!59891 res!33181) b!59882))

(assert (= (and b!59891 (not res!33175)) b!59886))

(assert (= (and b!59886 res!33178) b!59895))

(assert (= (and b!59891 res!33173) b!59884))

(assert (= (and b!59884 c!7738) b!59898))

(assert (= (and b!59884 (not c!7738)) b!59901))

(assert (= (and b!59898 res!33174) b!59890))

(assert (= (or b!59898 b!59901) bm!4513))

(assert (= (and b!59884 res!33176) b!59888))

(assert (= (and b!59888 c!7739) b!59887))

(assert (= (and b!59888 (not c!7739)) b!59893))

(assert (= (and b!59887 res!33179) b!59894))

(assert (= (or b!59887 b!59893) bm!4515))

(declare-fun b_lambda!2631 () Bool)

(assert (=> (not b_lambda!2631) (not b!59895)))

(assert (=> b!59895 t!4781))

(declare-fun b_and!3629 () Bool)

(assert (= b_and!3625 (and (=> t!4781 result!2381) b_and!3629)))

(assert (=> b!59895 t!4783))

(declare-fun b_and!3631 () Bool)

(assert (= b_and!3627 (and (=> t!4783 result!2383) b_and!3631)))

(declare-fun m!52165 () Bool)

(assert (=> b!59894 m!52165))

(assert (=> d!11667 m!50657))

(declare-fun m!52167 () Bool)

(assert (=> b!59897 m!52167))

(assert (=> b!59897 m!52167))

(declare-fun m!52169 () Bool)

(assert (=> b!59897 m!52169))

(declare-fun m!52171 () Bool)

(assert (=> bm!4513 m!52171))

(assert (=> b!59882 m!52167))

(assert (=> b!59882 m!52167))

(assert (=> b!59882 m!52169))

(declare-fun m!52173 () Bool)

(assert (=> b!59896 m!52173))

(declare-fun m!52175 () Bool)

(assert (=> b!59896 m!52175))

(declare-fun m!52177 () Bool)

(assert (=> b!59896 m!52177))

(declare-fun m!52179 () Bool)

(assert (=> b!59896 m!52179))

(declare-fun m!52181 () Bool)

(assert (=> b!59896 m!52181))

(declare-fun m!52183 () Bool)

(assert (=> b!59896 m!52183))

(declare-fun m!52185 () Bool)

(assert (=> b!59896 m!52185))

(declare-fun m!52187 () Bool)

(assert (=> b!59896 m!52187))

(assert (=> b!59896 m!52167))

(declare-fun m!52189 () Bool)

(assert (=> b!59896 m!52189))

(declare-fun m!52191 () Bool)

(assert (=> b!59896 m!52191))

(declare-fun m!52193 () Bool)

(assert (=> b!59896 m!52193))

(assert (=> b!59896 m!52173))

(declare-fun m!52195 () Bool)

(assert (=> b!59896 m!52195))

(declare-fun m!52197 () Bool)

(assert (=> b!59896 m!52197))

(declare-fun m!52199 () Bool)

(assert (=> b!59896 m!52199))

(assert (=> b!59896 m!52183))

(declare-fun m!52201 () Bool)

(assert (=> b!59896 m!52201))

(assert (=> b!59896 m!52195))

(assert (=> b!59896 m!52189))

(declare-fun m!52203 () Bool)

(assert (=> b!59896 m!52203))

(assert (=> b!59895 m!52167))

(declare-fun m!52205 () Bool)

(assert (=> b!59895 m!52205))

(assert (=> b!59895 m!50697))

(declare-fun m!52207 () Bool)

(assert (=> b!59895 m!52207))

(assert (=> b!59895 m!50697))

(declare-fun m!52209 () Bool)

(assert (=> b!59895 m!52209))

(assert (=> b!59895 m!52207))

(assert (=> b!59895 m!52167))

(assert (=> bm!4517 m!52201))

(assert (=> b!59886 m!52167))

(assert (=> b!59886 m!52167))

(declare-fun m!52211 () Bool)

(assert (=> b!59886 m!52211))

(declare-fun m!52213 () Bool)

(assert (=> b!59890 m!52213))

(declare-fun m!52215 () Bool)

(assert (=> b!59892 m!52215))

(declare-fun m!52217 () Bool)

(assert (=> bm!4518 m!52217))

(declare-fun m!52219 () Bool)

(assert (=> bm!4515 m!52219))

(assert (=> d!11263 d!11667))

(declare-fun d!11669 () Bool)

(declare-fun res!33182 () Bool)

(declare-fun e!39357 () Bool)

(assert (=> d!11669 (=> res!33182 e!39357)))

(assert (=> d!11669 (= res!33182 (= (select (arr!1768 lt!23968) #b00000000000000000000000000000000) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(assert (=> d!11669 (= (arrayContainsKey!0 lt!23968 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) #b00000000000000000000000000000000) e!39357)))

(declare-fun b!59903 () Bool)

(declare-fun e!39358 () Bool)

(assert (=> b!59903 (= e!39357 e!39358)))

(declare-fun res!33183 () Bool)

(assert (=> b!59903 (=> (not res!33183) (not e!39358))))

(assert (=> b!59903 (= res!33183 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!1999 lt!23968)))))

(declare-fun b!59904 () Bool)

(assert (=> b!59904 (= e!39358 (arrayContainsKey!0 lt!23968 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!11669 (not res!33182)) b!59903))

(assert (= (and b!59903 res!33183) b!59904))

(declare-fun m!52221 () Bool)

(assert (=> d!11669 m!52221))

(assert (=> b!59904 m!50353))

(declare-fun m!52223 () Bool)

(assert (=> b!59904 m!52223))

(assert (=> d!11263 d!11669))

(declare-fun d!11671 () Bool)

(assert (=> d!11671 (arrayContainsKey!0 lt!23968 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(declare-fun lt!24456 () Unit!1550)

(declare-fun choose!13 (array!3697 (_ BitVec 64) (_ BitVec 32)) Unit!1550)

(assert (=> d!11671 (= lt!24456 (choose!13 lt!23968 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774))))))

(assert (=> d!11671 (bvsge (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) #b00000000000000000000000000000000)))

(assert (=> d!11671 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!23968 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774))) lt!24456)))

(declare-fun bs!2598 () Bool)

(assert (= bs!2598 d!11671))

(assert (=> bs!2598 m!50353))

(assert (=> bs!2598 m!50833))

(assert (=> bs!2598 m!50353))

(declare-fun m!52225 () Bool)

(assert (=> bs!2598 m!52225))

(assert (=> d!11263 d!11671))

(declare-fun d!11673 () Bool)

(declare-fun e!39361 () Bool)

(assert (=> d!11673 e!39361))

(declare-fun res!33186 () Bool)

(assert (=> d!11673 (=> (not res!33186) (not e!39361))))

(assert (=> d!11673 (= res!33186 (and (bvsge (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) #b00000000000000000000000000000000) (bvslt (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (size!1999 (_keys!3665 newMap!16)))))))

(declare-fun lt!24459 () Unit!1550)

(declare-fun choose!41 (array!3697 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1436) Unit!1550)

(assert (=> d!11673 (= lt!24459 (choose!41 (_keys!3665 newMap!16) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) lt!23959 lt!23975))))

(assert (=> d!11673 (bvslt (size!1999 (_keys!3665 newMap!16)) #b01111111111111111111111111111111)))

(assert (=> d!11673 (= (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!3665 newMap!16) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) lt!23959 lt!23975) lt!24459)))

(declare-fun b!59907 () Bool)

(assert (=> b!59907 (= e!39361 (arrayNoDuplicates!0 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16))) lt!23959 lt!23975))))

(assert (= (and d!11673 res!33186) b!59907))

(assert (=> d!11673 m!50353))

(declare-fun m!52227 () Bool)

(assert (=> d!11673 m!52227))

(assert (=> b!59907 m!50855))

(assert (=> b!59907 m!50829))

(assert (=> d!11263 d!11673))

(declare-fun bm!4520 () Bool)

(declare-fun call!4523 () (_ BitVec 32))

(assert (=> bm!4520 (= call!4523 (arrayCountValidKeys!0 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!1999 (_keys!3665 newMap!16))))))

(declare-fun b!59908 () Bool)

(declare-fun e!39363 () (_ BitVec 32))

(assert (=> b!59908 (= e!39363 (bvadd #b00000000000000000000000000000001 call!4523))))

(declare-fun b!59909 () Bool)

(declare-fun e!39362 () (_ BitVec 32))

(assert (=> b!59909 (= e!39362 #b00000000000000000000000000000000)))

(declare-fun d!11675 () Bool)

(declare-fun lt!24460 () (_ BitVec 32))

(assert (=> d!11675 (and (bvsge lt!24460 #b00000000000000000000000000000000) (bvsle lt!24460 (bvsub (size!1999 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> d!11675 (= lt!24460 e!39362)))

(declare-fun c!7744 () Bool)

(assert (=> d!11675 (= c!7744 (bvsge #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(assert (=> d!11675 (and (bvsle #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!1999 (_keys!3665 newMap!16)) (size!1999 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16))))))))

(assert (=> d!11675 (= (arrayCountValidKeys!0 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16))) #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))) lt!24460)))

(declare-fun b!59910 () Bool)

(assert (=> b!59910 (= e!39363 call!4523)))

(declare-fun b!59911 () Bool)

(assert (=> b!59911 (= e!39362 e!39363)))

(declare-fun c!7745 () Bool)

(assert (=> b!59911 (= c!7745 (validKeyInArray!0 (select (arr!1768 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (= (and d!11675 c!7744) b!59909))

(assert (= (and d!11675 (not c!7744)) b!59911))

(assert (= (and b!59911 c!7745) b!59908))

(assert (= (and b!59911 (not c!7745)) b!59910))

(assert (= (or b!59908 b!59910) bm!4520))

(declare-fun m!52229 () Bool)

(assert (=> bm!4520 m!52229))

(declare-fun m!52231 () Bool)

(assert (=> b!59911 m!52231))

(assert (=> b!59911 m!52231))

(declare-fun m!52233 () Bool)

(assert (=> b!59911 m!52233))

(assert (=> d!11263 d!11675))

(assert (=> d!11263 d!11395))

(declare-fun d!11677 () Bool)

(declare-fun e!39368 () Bool)

(assert (=> d!11677 e!39368))

(declare-fun res!33196 () Bool)

(assert (=> d!11677 (=> (not res!33196) (not e!39368))))

(assert (=> d!11677 (= res!33196 (and (bvsge (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) #b00000000000000000000000000000000) (bvslt (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (size!1999 (_keys!3665 newMap!16)))))))

(declare-fun lt!24463 () Unit!1550)

(declare-fun choose!1 (array!3697 (_ BitVec 32) (_ BitVec 64)) Unit!1550)

(assert (=> d!11677 (= lt!24463 (choose!1 (_keys!3665 newMap!16) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(declare-fun e!39369 () Bool)

(assert (=> d!11677 e!39369))

(declare-fun res!33195 () Bool)

(assert (=> d!11677 (=> (not res!33195) (not e!39369))))

(assert (=> d!11677 (= res!33195 (and (bvsge (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) #b00000000000000000000000000000000) (bvslt (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (size!1999 (_keys!3665 newMap!16)))))))

(assert (=> d!11677 (= (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!3665 newMap!16) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) lt!24463)))

(declare-fun b!59920 () Bool)

(declare-fun res!33198 () Bool)

(assert (=> b!59920 (=> (not res!33198) (not e!39369))))

(assert (=> b!59920 (= res!33198 (not (validKeyInArray!0 (select (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774))))))))

(declare-fun b!59923 () Bool)

(assert (=> b!59923 (= e!39368 (= (arrayCountValidKeys!0 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16))) #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!3665 newMap!16) #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))) #b00000000000000000000000000000001)))))

(declare-fun b!59922 () Bool)

(assert (=> b!59922 (= e!39369 (bvslt (size!1999 (_keys!3665 newMap!16)) #b01111111111111111111111111111111))))

(declare-fun b!59921 () Bool)

(declare-fun res!33197 () Bool)

(assert (=> b!59921 (=> (not res!33197) (not e!39369))))

(assert (=> b!59921 (= res!33197 (validKeyInArray!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(assert (= (and d!11677 res!33195) b!59920))

(assert (= (and b!59920 res!33198) b!59921))

(assert (= (and b!59921 res!33197) b!59922))

(assert (= (and d!11677 res!33196) b!59923))

(assert (=> d!11677 m!50353))

(declare-fun m!52235 () Bool)

(assert (=> d!11677 m!52235))

(declare-fun m!52237 () Bool)

(assert (=> b!59920 m!52237))

(assert (=> b!59920 m!52237))

(declare-fun m!52239 () Bool)

(assert (=> b!59920 m!52239))

(assert (=> b!59923 m!50855))

(assert (=> b!59923 m!50831))

(assert (=> b!59923 m!50543))

(assert (=> b!59921 m!50353))

(assert (=> b!59921 m!50623))

(assert (=> d!11263 d!11677))

(declare-fun b!59924 () Bool)

(declare-fun e!39372 () Bool)

(declare-fun call!4524 () Bool)

(assert (=> b!59924 (= e!39372 call!4524)))

(declare-fun bm!4521 () Bool)

(assert (=> bm!4521 (= call!4524 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16))) (mask!5925 newMap!16)))))

(declare-fun b!59925 () Bool)

(declare-fun e!39370 () Bool)

(assert (=> b!59925 (= e!39370 e!39372)))

(declare-fun lt!24466 () (_ BitVec 64))

(assert (=> b!59925 (= lt!24466 (select (arr!1768 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!24465 () Unit!1550)

(assert (=> b!59925 (= lt!24465 (lemmaArrayContainsFromImpliesContainsFromZero!0 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16))) lt!24466 #b00000000000000000000000000000000))))

(assert (=> b!59925 (arrayContainsKey!0 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16))) lt!24466 #b00000000000000000000000000000000)))

(declare-fun lt!24464 () Unit!1550)

(assert (=> b!59925 (= lt!24464 lt!24465)))

(declare-fun res!33199 () Bool)

(assert (=> b!59925 (= res!33199 (= (seekEntryOrOpen!0 (select (arr!1768 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16)))) #b00000000000000000000000000000000) (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16))) (mask!5925 newMap!16)) (Found!230 #b00000000000000000000000000000000)))))

(assert (=> b!59925 (=> (not res!33199) (not e!39372))))

(declare-fun b!59926 () Bool)

(assert (=> b!59926 (= e!39370 call!4524)))

(declare-fun b!59927 () Bool)

(declare-fun e!39371 () Bool)

(assert (=> b!59927 (= e!39371 e!39370)))

(declare-fun c!7746 () Bool)

(assert (=> b!59927 (= c!7746 (validKeyInArray!0 (select (arr!1768 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun d!11679 () Bool)

(declare-fun res!33200 () Bool)

(assert (=> d!11679 (=> res!33200 e!39371)))

(assert (=> d!11679 (= res!33200 (bvsge #b00000000000000000000000000000000 (size!1999 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16))))))))

(assert (=> d!11679 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16))) (mask!5925 newMap!16)) e!39371)))

(assert (= (and d!11679 (not res!33200)) b!59927))

(assert (= (and b!59927 c!7746) b!59925))

(assert (= (and b!59927 (not c!7746)) b!59926))

(assert (= (and b!59925 res!33199) b!59924))

(assert (= (or b!59924 b!59926) bm!4521))

(declare-fun m!52241 () Bool)

(assert (=> bm!4521 m!52241))

(assert (=> b!59925 m!52231))

(declare-fun m!52243 () Bool)

(assert (=> b!59925 m!52243))

(declare-fun m!52245 () Bool)

(assert (=> b!59925 m!52245))

(assert (=> b!59925 m!52231))

(declare-fun m!52247 () Bool)

(assert (=> b!59925 m!52247))

(assert (=> b!59927 m!52231))

(assert (=> b!59927 m!52231))

(assert (=> b!59927 m!52233))

(assert (=> d!11263 d!11679))

(assert (=> d!11263 d!11505))

(assert (=> d!11263 d!11199))

(declare-fun d!11681 () Bool)

(declare-fun e!39375 () Bool)

(assert (=> d!11681 e!39375))

(declare-fun res!33203 () Bool)

(assert (=> d!11681 (=> (not res!33203) (not e!39375))))

(assert (=> d!11681 (= res!33203 (and (bvsge (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) #b00000000000000000000000000000000) (bvslt (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (size!1999 (_keys!3665 newMap!16)))))))

(declare-fun lt!24469 () Unit!1550)

(declare-fun choose!102 ((_ BitVec 64) array!3697 (_ BitVec 32) (_ BitVec 32)) Unit!1550)

(assert (=> d!11681 (= lt!24469 (choose!102 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (_keys!3665 newMap!16) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (mask!5925 newMap!16)))))

(assert (=> d!11681 (validMask!0 (mask!5925 newMap!16))))

(assert (=> d!11681 (= (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (_keys!3665 newMap!16) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (mask!5925 newMap!16)) lt!24469)))

(declare-fun b!59930 () Bool)

(assert (=> b!59930 (= e!39375 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16))) (mask!5925 newMap!16)))))

(assert (= (and d!11681 res!33203) b!59930))

(assert (=> d!11681 m!50353))

(declare-fun m!52249 () Bool)

(assert (=> d!11681 m!52249))

(assert (=> d!11681 m!50657))

(assert (=> b!59930 m!50855))

(assert (=> b!59930 m!50851))

(assert (=> d!11263 d!11681))

(declare-fun d!11683 () Bool)

(declare-fun e!39376 () Bool)

(assert (=> d!11683 e!39376))

(declare-fun res!33204 () Bool)

(assert (=> d!11683 (=> (not res!33204) (not e!39376))))

(assert (=> d!11683 (= res!33204 (and (bvsge (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) #b00000000000000000000000000000000) (bvslt (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (size!1999 lt!23962))))))

(declare-fun lt!24470 () Unit!1550)

(assert (=> d!11683 (= lt!24470 (choose!311 lt!23962 lt!23956 (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (defaultEntry!2042 newMap!16)))))

(assert (=> d!11683 (validMask!0 (mask!5925 newMap!16))))

(assert (=> d!11683 (= (lemmaValidKeyInArrayIsInListMap!74 lt!23962 lt!23956 (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (defaultEntry!2042 newMap!16)) lt!24470)))

(declare-fun b!59931 () Bool)

(assert (=> b!59931 (= e!39376 (contains!682 (getCurrentListMap!389 lt!23962 lt!23956 (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (select (arr!1768 lt!23962) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)))))))

(assert (= (and d!11683 res!33204) b!59931))

(declare-fun m!52251 () Bool)

(assert (=> d!11683 m!52251))

(assert (=> d!11683 m!50657))

(assert (=> b!59931 m!50841))

(declare-fun m!52253 () Bool)

(assert (=> b!59931 m!52253))

(assert (=> b!59931 m!50841))

(assert (=> b!59931 m!52253))

(declare-fun m!52255 () Bool)

(assert (=> b!59931 m!52255))

(assert (=> d!11263 d!11683))

(declare-fun e!39383 () Bool)

(declare-fun b!59932 () Bool)

(assert (=> b!59932 (= e!39383 (validKeyInArray!0 (select (arr!1768 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun bm!4522 () Bool)

(declare-fun call!4531 () Bool)

(declare-fun lt!24492 () ListLongMap!1355)

(assert (=> bm!4522 (= call!4531 (contains!682 lt!24492 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!59933 () Bool)

(declare-fun e!39381 () Unit!1550)

(declare-fun Unit!1601 () Unit!1550)

(assert (=> b!59933 (= e!39381 Unit!1601)))

(declare-fun b!59934 () Bool)

(declare-fun res!33208 () Bool)

(declare-fun e!39384 () Bool)

(assert (=> b!59934 (=> (not res!33208) (not e!39384))))

(declare-fun e!39382 () Bool)

(assert (=> b!59934 (= res!33208 e!39382)))

(declare-fun c!7747 () Bool)

(assert (=> b!59934 (= c!7747 (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!59935 () Bool)

(declare-fun e!39378 () ListLongMap!1355)

(declare-fun call!4528 () ListLongMap!1355)

(assert (=> b!59935 (= e!39378 call!4528)))

(declare-fun bm!4523 () Bool)

(declare-fun call!4527 () ListLongMap!1355)

(declare-fun call!4529 () ListLongMap!1355)

(assert (=> bm!4523 (= call!4527 call!4529)))

(declare-fun b!59937 () Bool)

(declare-fun e!39389 () Bool)

(declare-fun e!39377 () Bool)

(assert (=> b!59937 (= e!39389 e!39377)))

(declare-fun res!33211 () Bool)

(declare-fun call!4525 () Bool)

(assert (=> b!59937 (= res!33211 call!4525)))

(assert (=> b!59937 (=> (not res!33211) (not e!39377))))

(declare-fun b!59938 () Bool)

(assert (=> b!59938 (= e!39384 e!39389)))

(declare-fun c!7748 () Bool)

(assert (=> b!59938 (= c!7748 (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4524 () Bool)

(assert (=> bm!4524 (= call!4525 (contains!682 lt!24492 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4525 () Bool)

(declare-fun call!4530 () ListLongMap!1355)

(assert (=> bm!4525 (= call!4528 call!4530)))

(declare-fun b!59939 () Bool)

(declare-fun c!7751 () Bool)

(assert (=> b!59939 (= c!7751 (and (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!39379 () ListLongMap!1355)

(assert (=> b!59939 (= e!39378 e!39379)))

(declare-fun b!59940 () Bool)

(declare-fun e!39387 () Bool)

(assert (=> b!59940 (= e!39387 (= (apply!66 lt!24492 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1958 newMap!16)))))

(declare-fun b!59941 () Bool)

(declare-fun res!33205 () Bool)

(assert (=> b!59941 (=> (not res!33205) (not e!39384))))

(declare-fun e!39388 () Bool)

(assert (=> b!59941 (= res!33205 e!39388)))

(declare-fun res!33207 () Bool)

(assert (=> b!59941 (=> res!33207 e!39388)))

(assert (=> b!59941 (= res!33207 (not e!39383))))

(declare-fun res!33213 () Bool)

(assert (=> b!59941 (=> (not res!33213) (not e!39383))))

(assert (=> b!59941 (= res!33213 (bvslt #b00000000000000000000000000000000 (size!1999 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16))))))))

(declare-fun b!59942 () Bool)

(declare-fun e!39386 () ListLongMap!1355)

(assert (=> b!59942 (= e!39386 (+!81 call!4530 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))

(declare-fun bm!4526 () Bool)

(declare-fun call!4526 () ListLongMap!1355)

(assert (=> bm!4526 (= call!4526 (getCurrentListMapNoExtraKeys!44 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16))) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16))) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun c!7750 () Bool)

(declare-fun bm!4527 () Bool)

(declare-fun c!7752 () Bool)

(assert (=> bm!4527 (= call!4530 (+!81 (ite c!7750 call!4526 (ite c!7752 call!4529 call!4527)) (ite (or c!7750 c!7752) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))

(declare-fun b!59943 () Bool)

(assert (=> b!59943 (= e!39389 (not call!4525))))

(declare-fun b!59944 () Bool)

(assert (=> b!59944 (= e!39377 (= (apply!66 lt!24492 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1958 newMap!16)))))

(declare-fun e!39380 () Bool)

(declare-fun b!59945 () Bool)

(assert (=> b!59945 (= e!39380 (= (apply!66 lt!24492 (select (arr!1768 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16)))) #b00000000000000000000000000000000)) (get!1073 (select (arr!1769 (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!59945 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2000 (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16))))))))

(assert (=> b!59945 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1999 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16))))))))

(declare-fun b!59936 () Bool)

(assert (=> b!59936 (= e!39388 e!39380)))

(declare-fun res!33210 () Bool)

(assert (=> b!59936 (=> (not res!33210) (not e!39380))))

(assert (=> b!59936 (= res!33210 (contains!682 lt!24492 (select (arr!1768 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> b!59936 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1999 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16))))))))

(declare-fun d!11685 () Bool)

(assert (=> d!11685 e!39384))

(declare-fun res!33209 () Bool)

(assert (=> d!11685 (=> (not res!33209) (not e!39384))))

(assert (=> d!11685 (= res!33209 (or (bvsge #b00000000000000000000000000000000 (size!1999 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16))))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1999 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16))))))))))

(declare-fun lt!24486 () ListLongMap!1355)

(assert (=> d!11685 (= lt!24492 lt!24486)))

(declare-fun lt!24491 () Unit!1550)

(assert (=> d!11685 (= lt!24491 e!39381)))

(declare-fun c!7749 () Bool)

(declare-fun e!39385 () Bool)

(assert (=> d!11685 (= c!7749 e!39385)))

(declare-fun res!33212 () Bool)

(assert (=> d!11685 (=> (not res!33212) (not e!39385))))

(assert (=> d!11685 (= res!33212 (bvslt #b00000000000000000000000000000000 (size!1999 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16))))))))

(assert (=> d!11685 (= lt!24486 e!39386)))

(assert (=> d!11685 (= c!7750 (and (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11685 (validMask!0 (mask!5925 newMap!16))))

(assert (=> d!11685 (= (getCurrentListMap!389 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16))) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16))) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) lt!24492)))

(declare-fun b!59946 () Bool)

(declare-fun lt!24480 () Unit!1550)

(assert (=> b!59946 (= e!39381 lt!24480)))

(declare-fun lt!24485 () ListLongMap!1355)

(assert (=> b!59946 (= lt!24485 (getCurrentListMapNoExtraKeys!44 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16))) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16))) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24484 () (_ BitVec 64))

(assert (=> b!59946 (= lt!24484 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24483 () (_ BitVec 64))

(assert (=> b!59946 (= lt!24483 (select (arr!1768 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!24476 () Unit!1550)

(assert (=> b!59946 (= lt!24476 (addStillContains!42 lt!24485 lt!24484 (zeroValue!1958 newMap!16) lt!24483))))

(assert (=> b!59946 (contains!682 (+!81 lt!24485 (tuple2!2037 lt!24484 (zeroValue!1958 newMap!16))) lt!24483)))

(declare-fun lt!24487 () Unit!1550)

(assert (=> b!59946 (= lt!24487 lt!24476)))

(declare-fun lt!24490 () ListLongMap!1355)

(assert (=> b!59946 (= lt!24490 (getCurrentListMapNoExtraKeys!44 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16))) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16))) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24472 () (_ BitVec 64))

(assert (=> b!59946 (= lt!24472 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24474 () (_ BitVec 64))

(assert (=> b!59946 (= lt!24474 (select (arr!1768 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!24471 () Unit!1550)

(assert (=> b!59946 (= lt!24471 (addApplyDifferent!42 lt!24490 lt!24472 (minValue!1958 newMap!16) lt!24474))))

(assert (=> b!59946 (= (apply!66 (+!81 lt!24490 (tuple2!2037 lt!24472 (minValue!1958 newMap!16))) lt!24474) (apply!66 lt!24490 lt!24474))))

(declare-fun lt!24479 () Unit!1550)

(assert (=> b!59946 (= lt!24479 lt!24471)))

(declare-fun lt!24478 () ListLongMap!1355)

(assert (=> b!59946 (= lt!24478 (getCurrentListMapNoExtraKeys!44 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16))) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16))) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24475 () (_ BitVec 64))

(assert (=> b!59946 (= lt!24475 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24482 () (_ BitVec 64))

(assert (=> b!59946 (= lt!24482 (select (arr!1768 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!24477 () Unit!1550)

(assert (=> b!59946 (= lt!24477 (addApplyDifferent!42 lt!24478 lt!24475 (zeroValue!1958 newMap!16) lt!24482))))

(assert (=> b!59946 (= (apply!66 (+!81 lt!24478 (tuple2!2037 lt!24475 (zeroValue!1958 newMap!16))) lt!24482) (apply!66 lt!24478 lt!24482))))

(declare-fun lt!24489 () Unit!1550)

(assert (=> b!59946 (= lt!24489 lt!24477)))

(declare-fun lt!24488 () ListLongMap!1355)

(assert (=> b!59946 (= lt!24488 (getCurrentListMapNoExtraKeys!44 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16))) (array!3700 (store (arr!1769 (_values!2025 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (ValueCellFull!854 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2000 (_values!2025 newMap!16))) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24481 () (_ BitVec 64))

(assert (=> b!59946 (= lt!24481 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24473 () (_ BitVec 64))

(assert (=> b!59946 (= lt!24473 (select (arr!1768 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16)))) #b00000000000000000000000000000000))))

(assert (=> b!59946 (= lt!24480 (addApplyDifferent!42 lt!24488 lt!24481 (minValue!1958 newMap!16) lt!24473))))

(assert (=> b!59946 (= (apply!66 (+!81 lt!24488 (tuple2!2037 lt!24481 (minValue!1958 newMap!16))) lt!24473) (apply!66 lt!24488 lt!24473))))

(declare-fun b!59947 () Bool)

(assert (=> b!59947 (= e!39385 (validKeyInArray!0 (select (arr!1768 (array!3698 (store (arr!1768 (_keys!3665 newMap!16)) (ite c!7464 (index!3046 lt!23774) (index!3043 lt!23774)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) (size!1999 (_keys!3665 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!59948 () Bool)

(assert (=> b!59948 (= e!39382 e!39387)))

(declare-fun res!33206 () Bool)

(assert (=> b!59948 (= res!33206 call!4531)))

(assert (=> b!59948 (=> (not res!33206) (not e!39387))))

(declare-fun b!59949 () Bool)

(assert (=> b!59949 (= e!39386 e!39378)))

(assert (=> b!59949 (= c!7752 (and (not (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1929 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!59950 () Bool)

(assert (=> b!59950 (= e!39379 call!4528)))

(declare-fun b!59951 () Bool)

(assert (=> b!59951 (= e!39382 (not call!4531))))

(declare-fun b!59952 () Bool)

(assert (=> b!59952 (= e!39379 call!4527)))

(declare-fun bm!4528 () Bool)

(assert (=> bm!4528 (= call!4529 call!4526)))

(assert (= (and d!11685 c!7750) b!59942))

(assert (= (and d!11685 (not c!7750)) b!59949))

(assert (= (and b!59949 c!7752) b!59935))

(assert (= (and b!59949 (not c!7752)) b!59939))

(assert (= (and b!59939 c!7751) b!59950))

(assert (= (and b!59939 (not c!7751)) b!59952))

(assert (= (or b!59950 b!59952) bm!4523))

(assert (= (or b!59935 bm!4523) bm!4528))

(assert (= (or b!59935 b!59950) bm!4525))

(assert (= (or b!59942 bm!4528) bm!4526))

(assert (= (or b!59942 bm!4525) bm!4527))

(assert (= (and d!11685 res!33212) b!59947))

(assert (= (and d!11685 c!7749) b!59946))

(assert (= (and d!11685 (not c!7749)) b!59933))

(assert (= (and d!11685 res!33209) b!59941))

(assert (= (and b!59941 res!33213) b!59932))

(assert (= (and b!59941 (not res!33207)) b!59936))

(assert (= (and b!59936 res!33210) b!59945))

(assert (= (and b!59941 res!33205) b!59934))

(assert (= (and b!59934 c!7747) b!59948))

(assert (= (and b!59934 (not c!7747)) b!59951))

(assert (= (and b!59948 res!33206) b!59940))

(assert (= (or b!59948 b!59951) bm!4522))

(assert (= (and b!59934 res!33208) b!59938))

(assert (= (and b!59938 c!7748) b!59937))

(assert (= (and b!59938 (not c!7748)) b!59943))

(assert (= (and b!59937 res!33211) b!59944))

(assert (= (or b!59937 b!59943) bm!4524))

(declare-fun b_lambda!2633 () Bool)

(assert (=> (not b_lambda!2633) (not b!59945)))

(assert (=> b!59945 t!4781))

(declare-fun b_and!3633 () Bool)

(assert (= b_and!3629 (and (=> t!4781 result!2381) b_and!3633)))

(assert (=> b!59945 t!4783))

(declare-fun b_and!3635 () Bool)

(assert (= b_and!3631 (and (=> t!4783 result!2383) b_and!3635)))

(declare-fun m!52257 () Bool)

(assert (=> b!59944 m!52257))

(assert (=> d!11685 m!50657))

(assert (=> b!59947 m!52231))

(assert (=> b!59947 m!52231))

(assert (=> b!59947 m!52233))

(declare-fun m!52259 () Bool)

(assert (=> bm!4522 m!52259))

(assert (=> b!59932 m!52231))

(assert (=> b!59932 m!52231))

(assert (=> b!59932 m!52233))

(declare-fun m!52261 () Bool)

(assert (=> b!59946 m!52261))

(declare-fun m!52263 () Bool)

(assert (=> b!59946 m!52263))

(declare-fun m!52265 () Bool)

(assert (=> b!59946 m!52265))

(declare-fun m!52267 () Bool)

(assert (=> b!59946 m!52267))

(declare-fun m!52269 () Bool)

(assert (=> b!59946 m!52269))

(declare-fun m!52271 () Bool)

(assert (=> b!59946 m!52271))

(declare-fun m!52273 () Bool)

(assert (=> b!59946 m!52273))

(declare-fun m!52275 () Bool)

(assert (=> b!59946 m!52275))

(assert (=> b!59946 m!52231))

(declare-fun m!52277 () Bool)

(assert (=> b!59946 m!52277))

(declare-fun m!52279 () Bool)

(assert (=> b!59946 m!52279))

(declare-fun m!52281 () Bool)

(assert (=> b!59946 m!52281))

(assert (=> b!59946 m!52261))

(declare-fun m!52283 () Bool)

(assert (=> b!59946 m!52283))

(declare-fun m!52285 () Bool)

(assert (=> b!59946 m!52285))

(declare-fun m!52287 () Bool)

(assert (=> b!59946 m!52287))

(assert (=> b!59946 m!52271))

(declare-fun m!52289 () Bool)

(assert (=> b!59946 m!52289))

(assert (=> b!59946 m!52283))

(assert (=> b!59946 m!52277))

(declare-fun m!52291 () Bool)

(assert (=> b!59946 m!52291))

(assert (=> b!59945 m!52231))

(declare-fun m!52293 () Bool)

(assert (=> b!59945 m!52293))

(assert (=> b!59945 m!50697))

(declare-fun m!52295 () Bool)

(assert (=> b!59945 m!52295))

(assert (=> b!59945 m!50697))

(declare-fun m!52297 () Bool)

(assert (=> b!59945 m!52297))

(assert (=> b!59945 m!52295))

(assert (=> b!59945 m!52231))

(assert (=> bm!4526 m!52289))

(assert (=> b!59936 m!52231))

(assert (=> b!59936 m!52231))

(declare-fun m!52299 () Bool)

(assert (=> b!59936 m!52299))

(declare-fun m!52301 () Bool)

(assert (=> b!59940 m!52301))

(declare-fun m!52303 () Bool)

(assert (=> b!59942 m!52303))

(declare-fun m!52305 () Bool)

(assert (=> bm!4527 m!52305))

(declare-fun m!52307 () Bool)

(assert (=> bm!4524 m!52307))

(assert (=> d!11263 d!11685))

(declare-fun d!11687 () Bool)

(declare-fun e!39390 () Bool)

(assert (=> d!11687 e!39390))

(declare-fun res!33214 () Bool)

(assert (=> d!11687 (=> (not res!33214) (not e!39390))))

(declare-fun lt!24495 () ListLongMap!1355)

(assert (=> d!11687 (= res!33214 (contains!682 lt!24495 (_1!1029 (tuple2!2037 lt!23830 (zeroValue!1958 newMap!16)))))))

(declare-fun lt!24496 () List!1437)

(assert (=> d!11687 (= lt!24495 (ListLongMap!1356 lt!24496))))

(declare-fun lt!24493 () Unit!1550)

(declare-fun lt!24494 () Unit!1550)

(assert (=> d!11687 (= lt!24493 lt!24494)))

(assert (=> d!11687 (= (getValueByKey!122 lt!24496 (_1!1029 (tuple2!2037 lt!23830 (zeroValue!1958 newMap!16)))) (Some!127 (_2!1029 (tuple2!2037 lt!23830 (zeroValue!1958 newMap!16)))))))

(assert (=> d!11687 (= lt!24494 (lemmaContainsTupThenGetReturnValue!42 lt!24496 (_1!1029 (tuple2!2037 lt!23830 (zeroValue!1958 newMap!16))) (_2!1029 (tuple2!2037 lt!23830 (zeroValue!1958 newMap!16)))))))

(assert (=> d!11687 (= lt!24496 (insertStrictlySorted!45 (toList!693 lt!23831) (_1!1029 (tuple2!2037 lt!23830 (zeroValue!1958 newMap!16))) (_2!1029 (tuple2!2037 lt!23830 (zeroValue!1958 newMap!16)))))))

(assert (=> d!11687 (= (+!81 lt!23831 (tuple2!2037 lt!23830 (zeroValue!1958 newMap!16))) lt!24495)))

(declare-fun b!59953 () Bool)

(declare-fun res!33215 () Bool)

(assert (=> b!59953 (=> (not res!33215) (not e!39390))))

(assert (=> b!59953 (= res!33215 (= (getValueByKey!122 (toList!693 lt!24495) (_1!1029 (tuple2!2037 lt!23830 (zeroValue!1958 newMap!16)))) (Some!127 (_2!1029 (tuple2!2037 lt!23830 (zeroValue!1958 newMap!16))))))))

(declare-fun b!59954 () Bool)

(assert (=> b!59954 (= e!39390 (contains!684 (toList!693 lt!24495) (tuple2!2037 lt!23830 (zeroValue!1958 newMap!16))))))

(assert (= (and d!11687 res!33214) b!59953))

(assert (= (and b!59953 res!33215) b!59954))

(declare-fun m!52309 () Bool)

(assert (=> d!11687 m!52309))

(declare-fun m!52311 () Bool)

(assert (=> d!11687 m!52311))

(declare-fun m!52313 () Bool)

(assert (=> d!11687 m!52313))

(declare-fun m!52315 () Bool)

(assert (=> d!11687 m!52315))

(declare-fun m!52317 () Bool)

(assert (=> b!59953 m!52317))

(declare-fun m!52319 () Bool)

(assert (=> b!59954 m!52319))

(assert (=> b!59034 d!11687))

(declare-fun d!11689 () Bool)

(assert (=> d!11689 (= (apply!66 (+!81 lt!23836 (tuple2!2037 lt!23818 (minValue!1958 newMap!16))) lt!23820) (get!1076 (getValueByKey!122 (toList!693 (+!81 lt!23836 (tuple2!2037 lt!23818 (minValue!1958 newMap!16)))) lt!23820)))))

(declare-fun bs!2599 () Bool)

(assert (= bs!2599 d!11689))

(declare-fun m!52321 () Bool)

(assert (=> bs!2599 m!52321))

(assert (=> bs!2599 m!52321))

(declare-fun m!52323 () Bool)

(assert (=> bs!2599 m!52323))

(assert (=> b!59034 d!11689))

(declare-fun d!11691 () Bool)

(assert (=> d!11691 (= (apply!66 lt!23834 lt!23819) (get!1076 (getValueByKey!122 (toList!693 lt!23834) lt!23819)))))

(declare-fun bs!2600 () Bool)

(assert (= bs!2600 d!11691))

(declare-fun m!52325 () Bool)

(assert (=> bs!2600 m!52325))

(assert (=> bs!2600 m!52325))

(declare-fun m!52327 () Bool)

(assert (=> bs!2600 m!52327))

(assert (=> b!59034 d!11691))

(declare-fun d!11693 () Bool)

(declare-fun e!39391 () Bool)

(assert (=> d!11693 e!39391))

(declare-fun res!33216 () Bool)

(assert (=> d!11693 (=> (not res!33216) (not e!39391))))

(declare-fun lt!24499 () ListLongMap!1355)

(assert (=> d!11693 (= res!33216 (contains!682 lt!24499 (_1!1029 (tuple2!2037 lt!23821 (zeroValue!1958 newMap!16)))))))

(declare-fun lt!24500 () List!1437)

(assert (=> d!11693 (= lt!24499 (ListLongMap!1356 lt!24500))))

(declare-fun lt!24497 () Unit!1550)

(declare-fun lt!24498 () Unit!1550)

(assert (=> d!11693 (= lt!24497 lt!24498)))

(assert (=> d!11693 (= (getValueByKey!122 lt!24500 (_1!1029 (tuple2!2037 lt!23821 (zeroValue!1958 newMap!16)))) (Some!127 (_2!1029 (tuple2!2037 lt!23821 (zeroValue!1958 newMap!16)))))))

(assert (=> d!11693 (= lt!24498 (lemmaContainsTupThenGetReturnValue!42 lt!24500 (_1!1029 (tuple2!2037 lt!23821 (zeroValue!1958 newMap!16))) (_2!1029 (tuple2!2037 lt!23821 (zeroValue!1958 newMap!16)))))))

(assert (=> d!11693 (= lt!24500 (insertStrictlySorted!45 (toList!693 lt!23824) (_1!1029 (tuple2!2037 lt!23821 (zeroValue!1958 newMap!16))) (_2!1029 (tuple2!2037 lt!23821 (zeroValue!1958 newMap!16)))))))

(assert (=> d!11693 (= (+!81 lt!23824 (tuple2!2037 lt!23821 (zeroValue!1958 newMap!16))) lt!24499)))

(declare-fun b!59955 () Bool)

(declare-fun res!33217 () Bool)

(assert (=> b!59955 (=> (not res!33217) (not e!39391))))

(assert (=> b!59955 (= res!33217 (= (getValueByKey!122 (toList!693 lt!24499) (_1!1029 (tuple2!2037 lt!23821 (zeroValue!1958 newMap!16)))) (Some!127 (_2!1029 (tuple2!2037 lt!23821 (zeroValue!1958 newMap!16))))))))

(declare-fun b!59956 () Bool)

(assert (=> b!59956 (= e!39391 (contains!684 (toList!693 lt!24499) (tuple2!2037 lt!23821 (zeroValue!1958 newMap!16))))))

(assert (= (and d!11693 res!33216) b!59955))

(assert (= (and b!59955 res!33217) b!59956))

(declare-fun m!52329 () Bool)

(assert (=> d!11693 m!52329))

(declare-fun m!52331 () Bool)

(assert (=> d!11693 m!52331))

(declare-fun m!52333 () Bool)

(assert (=> d!11693 m!52333))

(declare-fun m!52335 () Bool)

(assert (=> d!11693 m!52335))

(declare-fun m!52337 () Bool)

(assert (=> b!59955 m!52337))

(declare-fun m!52339 () Bool)

(assert (=> b!59956 m!52339))

(assert (=> b!59034 d!11693))

(declare-fun d!11695 () Bool)

(assert (=> d!11695 (contains!682 (+!81 lt!23831 (tuple2!2037 lt!23830 (zeroValue!1958 newMap!16))) lt!23829)))

(declare-fun lt!24501 () Unit!1550)

(assert (=> d!11695 (= lt!24501 (choose!314 lt!23831 lt!23830 (zeroValue!1958 newMap!16) lt!23829))))

(assert (=> d!11695 (contains!682 lt!23831 lt!23829)))

(assert (=> d!11695 (= (addStillContains!42 lt!23831 lt!23830 (zeroValue!1958 newMap!16) lt!23829) lt!24501)))

(declare-fun bs!2601 () Bool)

(assert (= bs!2601 d!11695))

(assert (=> bs!2601 m!50679))

(assert (=> bs!2601 m!50679))

(assert (=> bs!2601 m!50681))

(declare-fun m!52341 () Bool)

(assert (=> bs!2601 m!52341))

(declare-fun m!52343 () Bool)

(assert (=> bs!2601 m!52343))

(assert (=> b!59034 d!11695))

(declare-fun d!11697 () Bool)

(assert (=> d!11697 (= (apply!66 (+!81 lt!23834 (tuple2!2037 lt!23827 (minValue!1958 newMap!16))) lt!23819) (apply!66 lt!23834 lt!23819))))

(declare-fun lt!24502 () Unit!1550)

(assert (=> d!11697 (= lt!24502 (choose!313 lt!23834 lt!23827 (minValue!1958 newMap!16) lt!23819))))

(declare-fun e!39392 () Bool)

(assert (=> d!11697 e!39392))

(declare-fun res!33218 () Bool)

(assert (=> d!11697 (=> (not res!33218) (not e!39392))))

(assert (=> d!11697 (= res!33218 (contains!682 lt!23834 lt!23819))))

(assert (=> d!11697 (= (addApplyDifferent!42 lt!23834 lt!23827 (minValue!1958 newMap!16) lt!23819) lt!24502)))

(declare-fun b!59957 () Bool)

(assert (=> b!59957 (= e!39392 (not (= lt!23819 lt!23827)))))

(assert (= (and d!11697 res!33218) b!59957))

(assert (=> d!11697 m!50685))

(declare-fun m!52345 () Bool)

(assert (=> d!11697 m!52345))

(declare-fun m!52347 () Bool)

(assert (=> d!11697 m!52347))

(assert (=> d!11697 m!50685))

(assert (=> d!11697 m!50687))

(assert (=> d!11697 m!50667))

(assert (=> b!59034 d!11697))

(declare-fun d!11699 () Bool)

(declare-fun e!39393 () Bool)

(assert (=> d!11699 e!39393))

(declare-fun res!33219 () Bool)

(assert (=> d!11699 (=> (not res!33219) (not e!39393))))

(declare-fun lt!24505 () ListLongMap!1355)

(assert (=> d!11699 (= res!33219 (contains!682 lt!24505 (_1!1029 (tuple2!2037 lt!23818 (minValue!1958 newMap!16)))))))

(declare-fun lt!24506 () List!1437)

(assert (=> d!11699 (= lt!24505 (ListLongMap!1356 lt!24506))))

(declare-fun lt!24503 () Unit!1550)

(declare-fun lt!24504 () Unit!1550)

(assert (=> d!11699 (= lt!24503 lt!24504)))

(assert (=> d!11699 (= (getValueByKey!122 lt!24506 (_1!1029 (tuple2!2037 lt!23818 (minValue!1958 newMap!16)))) (Some!127 (_2!1029 (tuple2!2037 lt!23818 (minValue!1958 newMap!16)))))))

(assert (=> d!11699 (= lt!24504 (lemmaContainsTupThenGetReturnValue!42 lt!24506 (_1!1029 (tuple2!2037 lt!23818 (minValue!1958 newMap!16))) (_2!1029 (tuple2!2037 lt!23818 (minValue!1958 newMap!16)))))))

(assert (=> d!11699 (= lt!24506 (insertStrictlySorted!45 (toList!693 lt!23836) (_1!1029 (tuple2!2037 lt!23818 (minValue!1958 newMap!16))) (_2!1029 (tuple2!2037 lt!23818 (minValue!1958 newMap!16)))))))

(assert (=> d!11699 (= (+!81 lt!23836 (tuple2!2037 lt!23818 (minValue!1958 newMap!16))) lt!24505)))

(declare-fun b!59958 () Bool)

(declare-fun res!33220 () Bool)

(assert (=> b!59958 (=> (not res!33220) (not e!39393))))

(assert (=> b!59958 (= res!33220 (= (getValueByKey!122 (toList!693 lt!24505) (_1!1029 (tuple2!2037 lt!23818 (minValue!1958 newMap!16)))) (Some!127 (_2!1029 (tuple2!2037 lt!23818 (minValue!1958 newMap!16))))))))

(declare-fun b!59959 () Bool)

(assert (=> b!59959 (= e!39393 (contains!684 (toList!693 lt!24505) (tuple2!2037 lt!23818 (minValue!1958 newMap!16))))))

(assert (= (and d!11699 res!33219) b!59958))

(assert (= (and b!59958 res!33220) b!59959))

(declare-fun m!52349 () Bool)

(assert (=> d!11699 m!52349))

(declare-fun m!52351 () Bool)

(assert (=> d!11699 m!52351))

(declare-fun m!52353 () Bool)

(assert (=> d!11699 m!52353))

(declare-fun m!52355 () Bool)

(assert (=> d!11699 m!52355))

(declare-fun m!52357 () Bool)

(assert (=> b!59958 m!52357))

(declare-fun m!52359 () Bool)

(assert (=> b!59959 m!52359))

(assert (=> b!59034 d!11699))

(declare-fun d!11701 () Bool)

(assert (=> d!11701 (= (apply!66 (+!81 lt!23824 (tuple2!2037 lt!23821 (zeroValue!1958 newMap!16))) lt!23828) (apply!66 lt!23824 lt!23828))))

(declare-fun lt!24507 () Unit!1550)

(assert (=> d!11701 (= lt!24507 (choose!313 lt!23824 lt!23821 (zeroValue!1958 newMap!16) lt!23828))))

(declare-fun e!39394 () Bool)

(assert (=> d!11701 e!39394))

(declare-fun res!33221 () Bool)

(assert (=> d!11701 (=> (not res!33221) (not e!39394))))

(assert (=> d!11701 (= res!33221 (contains!682 lt!23824 lt!23828))))

(assert (=> d!11701 (= (addApplyDifferent!42 lt!23824 lt!23821 (zeroValue!1958 newMap!16) lt!23828) lt!24507)))

(declare-fun b!59960 () Bool)

(assert (=> b!59960 (= e!39394 (not (= lt!23828 lt!23821)))))

(assert (= (and d!11701 res!33221) b!59960))

(assert (=> d!11701 m!50673))

(declare-fun m!52361 () Bool)

(assert (=> d!11701 m!52361))

(declare-fun m!52363 () Bool)

(assert (=> d!11701 m!52363))

(assert (=> d!11701 m!50673))

(assert (=> d!11701 m!50675))

(assert (=> d!11701 m!50693))

(assert (=> b!59034 d!11701))

(declare-fun d!11703 () Bool)

(declare-fun e!39396 () Bool)

(assert (=> d!11703 e!39396))

(declare-fun res!33222 () Bool)

(assert (=> d!11703 (=> res!33222 e!39396)))

(declare-fun lt!24508 () Bool)

(assert (=> d!11703 (= res!33222 (not lt!24508))))

(declare-fun lt!24510 () Bool)

(assert (=> d!11703 (= lt!24508 lt!24510)))

(declare-fun lt!24509 () Unit!1550)

(declare-fun e!39395 () Unit!1550)

(assert (=> d!11703 (= lt!24509 e!39395)))

(declare-fun c!7753 () Bool)

(assert (=> d!11703 (= c!7753 lt!24510)))

(assert (=> d!11703 (= lt!24510 (containsKey!126 (toList!693 (+!81 lt!23831 (tuple2!2037 lt!23830 (zeroValue!1958 newMap!16)))) lt!23829))))

(assert (=> d!11703 (= (contains!682 (+!81 lt!23831 (tuple2!2037 lt!23830 (zeroValue!1958 newMap!16))) lt!23829) lt!24508)))

(declare-fun b!59961 () Bool)

(declare-fun lt!24511 () Unit!1550)

(assert (=> b!59961 (= e!39395 lt!24511)))

(assert (=> b!59961 (= lt!24511 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 (+!81 lt!23831 (tuple2!2037 lt!23830 (zeroValue!1958 newMap!16)))) lt!23829))))

(assert (=> b!59961 (isDefined!76 (getValueByKey!122 (toList!693 (+!81 lt!23831 (tuple2!2037 lt!23830 (zeroValue!1958 newMap!16)))) lt!23829))))

(declare-fun b!59962 () Bool)

(declare-fun Unit!1602 () Unit!1550)

(assert (=> b!59962 (= e!39395 Unit!1602)))

(declare-fun b!59963 () Bool)

(assert (=> b!59963 (= e!39396 (isDefined!76 (getValueByKey!122 (toList!693 (+!81 lt!23831 (tuple2!2037 lt!23830 (zeroValue!1958 newMap!16)))) lt!23829)))))

(assert (= (and d!11703 c!7753) b!59961))

(assert (= (and d!11703 (not c!7753)) b!59962))

(assert (= (and d!11703 (not res!33222)) b!59963))

(declare-fun m!52365 () Bool)

(assert (=> d!11703 m!52365))

(declare-fun m!52367 () Bool)

(assert (=> b!59961 m!52367))

(declare-fun m!52369 () Bool)

(assert (=> b!59961 m!52369))

(assert (=> b!59961 m!52369))

(declare-fun m!52371 () Bool)

(assert (=> b!59961 m!52371))

(assert (=> b!59963 m!52369))

(assert (=> b!59963 m!52369))

(assert (=> b!59963 m!52371))

(assert (=> b!59034 d!11703))

(declare-fun d!11705 () Bool)

(assert (=> d!11705 (= (apply!66 lt!23836 lt!23820) (get!1076 (getValueByKey!122 (toList!693 lt!23836) lt!23820)))))

(declare-fun bs!2602 () Bool)

(assert (= bs!2602 d!11705))

(declare-fun m!52373 () Bool)

(assert (=> bs!2602 m!52373))

(assert (=> bs!2602 m!52373))

(declare-fun m!52375 () Bool)

(assert (=> bs!2602 m!52375))

(assert (=> b!59034 d!11705))

(declare-fun d!11707 () Bool)

(assert (=> d!11707 (= (apply!66 (+!81 lt!23834 (tuple2!2037 lt!23827 (minValue!1958 newMap!16))) lt!23819) (get!1076 (getValueByKey!122 (toList!693 (+!81 lt!23834 (tuple2!2037 lt!23827 (minValue!1958 newMap!16)))) lt!23819)))))

(declare-fun bs!2603 () Bool)

(assert (= bs!2603 d!11707))

(declare-fun m!52377 () Bool)

(assert (=> bs!2603 m!52377))

(assert (=> bs!2603 m!52377))

(declare-fun m!52379 () Bool)

(assert (=> bs!2603 m!52379))

(assert (=> b!59034 d!11707))

(declare-fun b!59964 () Bool)

(declare-fun e!39402 () Bool)

(declare-fun e!39400 () Bool)

(assert (=> b!59964 (= e!39402 e!39400)))

(declare-fun c!7757 () Bool)

(assert (=> b!59964 (= c!7757 (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(declare-fun b!59965 () Bool)

(declare-fun res!33224 () Bool)

(declare-fun e!39401 () Bool)

(assert (=> b!59965 (=> (not res!33224) (not e!39401))))

(declare-fun lt!24515 () ListLongMap!1355)

(assert (=> b!59965 (= res!33224 (not (contains!682 lt!24515 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bm!4529 () Bool)

(declare-fun call!4532 () ListLongMap!1355)

(assert (=> bm!4529 (= call!4532 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2042 newMap!16)))))

(declare-fun d!11709 () Bool)

(assert (=> d!11709 e!39401))

(declare-fun res!33226 () Bool)

(assert (=> d!11709 (=> (not res!33226) (not e!39401))))

(assert (=> d!11709 (= res!33226 (not (contains!682 lt!24515 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!39398 () ListLongMap!1355)

(assert (=> d!11709 (= lt!24515 e!39398)))

(declare-fun c!7756 () Bool)

(assert (=> d!11709 (= c!7756 (bvsge #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(assert (=> d!11709 (validMask!0 (mask!5925 newMap!16))))

(assert (=> d!11709 (= (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) lt!24515)))

(declare-fun b!59966 () Bool)

(assert (=> b!59966 (= e!39401 e!39402)))

(declare-fun c!7754 () Bool)

(declare-fun e!39403 () Bool)

(assert (=> b!59966 (= c!7754 e!39403)))

(declare-fun res!33225 () Bool)

(assert (=> b!59966 (=> (not res!33225) (not e!39403))))

(assert (=> b!59966 (= res!33225 (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(declare-fun b!59967 () Bool)

(declare-fun e!39399 () ListLongMap!1355)

(assert (=> b!59967 (= e!39399 call!4532)))

(declare-fun b!59968 () Bool)

(assert (=> b!59968 (= e!39398 e!39399)))

(declare-fun c!7755 () Bool)

(assert (=> b!59968 (= c!7755 (validKeyInArray!0 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!59969 () Bool)

(assert (=> b!59969 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(assert (=> b!59969 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2000 (_values!2025 newMap!16))))))

(declare-fun e!39397 () Bool)

(assert (=> b!59969 (= e!39397 (= (apply!66 lt!24515 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)) (get!1073 (select (arr!1769 (_values!2025 newMap!16)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!59970 () Bool)

(declare-fun lt!24512 () Unit!1550)

(declare-fun lt!24513 () Unit!1550)

(assert (=> b!59970 (= lt!24512 lt!24513)))

(declare-fun lt!24514 () V!2841)

(declare-fun lt!24517 () (_ BitVec 64))

(declare-fun lt!24518 () ListLongMap!1355)

(declare-fun lt!24516 () (_ BitVec 64))

(assert (=> b!59970 (not (contains!682 (+!81 lt!24518 (tuple2!2037 lt!24516 lt!24514)) lt!24517))))

(assert (=> b!59970 (= lt!24513 (addStillNotContains!16 lt!24518 lt!24516 lt!24514 lt!24517))))

(assert (=> b!59970 (= lt!24517 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!59970 (= lt!24514 (get!1073 (select (arr!1769 (_values!2025 newMap!16)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!59970 (= lt!24516 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!59970 (= lt!24518 call!4532)))

(assert (=> b!59970 (= e!39399 (+!81 call!4532 (tuple2!2037 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000) (get!1073 (select (arr!1769 (_values!2025 newMap!16)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!59971 () Bool)

(assert (=> b!59971 (= e!39403 (validKeyInArray!0 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59971 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!59972 () Bool)

(assert (=> b!59972 (= e!39400 (isEmpty!297 lt!24515))))

(declare-fun b!59973 () Bool)

(assert (=> b!59973 (= e!39398 (ListLongMap!1356 Nil!1434))))

(declare-fun b!59974 () Bool)

(assert (=> b!59974 (= e!39400 (= lt!24515 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2042 newMap!16))))))

(declare-fun b!59975 () Bool)

(assert (=> b!59975 (= e!39402 e!39397)))

(assert (=> b!59975 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(declare-fun res!33223 () Bool)

(assert (=> b!59975 (= res!33223 (contains!682 lt!24515 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!59975 (=> (not res!33223) (not e!39397))))

(assert (= (and d!11709 c!7756) b!59973))

(assert (= (and d!11709 (not c!7756)) b!59968))

(assert (= (and b!59968 c!7755) b!59970))

(assert (= (and b!59968 (not c!7755)) b!59967))

(assert (= (or b!59970 b!59967) bm!4529))

(assert (= (and d!11709 res!33226) b!59965))

(assert (= (and b!59965 res!33224) b!59966))

(assert (= (and b!59966 res!33225) b!59971))

(assert (= (and b!59966 c!7754) b!59975))

(assert (= (and b!59966 (not c!7754)) b!59964))

(assert (= (and b!59975 res!33223) b!59969))

(assert (= (and b!59964 c!7757) b!59974))

(assert (= (and b!59964 (not c!7757)) b!59972))

(declare-fun b_lambda!2635 () Bool)

(assert (=> (not b_lambda!2635) (not b!59969)))

(assert (=> b!59969 t!4781))

(declare-fun b_and!3637 () Bool)

(assert (= b_and!3633 (and (=> t!4781 result!2381) b_and!3637)))

(assert (=> b!59969 t!4783))

(declare-fun b_and!3639 () Bool)

(assert (= b_and!3635 (and (=> t!4783 result!2383) b_and!3639)))

(declare-fun b_lambda!2637 () Bool)

(assert (=> (not b_lambda!2637) (not b!59970)))

(assert (=> b!59970 t!4781))

(declare-fun b_and!3641 () Bool)

(assert (= b_and!3637 (and (=> t!4781 result!2381) b_and!3641)))

(assert (=> b!59970 t!4783))

(declare-fun b_and!3643 () Bool)

(assert (= b_and!3639 (and (=> t!4783 result!2383) b_and!3643)))

(declare-fun m!52381 () Bool)

(assert (=> d!11709 m!52381))

(assert (=> d!11709 m!50657))

(assert (=> b!59969 m!50699))

(assert (=> b!59969 m!50643))

(assert (=> b!59969 m!50643))

(declare-fun m!52383 () Bool)

(assert (=> b!59969 m!52383))

(assert (=> b!59969 m!50697))

(assert (=> b!59969 m!50699))

(assert (=> b!59969 m!50697))

(assert (=> b!59969 m!50701))

(declare-fun m!52385 () Bool)

(assert (=> b!59965 m!52385))

(declare-fun m!52387 () Bool)

(assert (=> b!59972 m!52387))

(declare-fun m!52389 () Bool)

(assert (=> b!59970 m!52389))

(assert (=> b!59970 m!50699))

(assert (=> b!59970 m!50643))

(declare-fun m!52391 () Bool)

(assert (=> b!59970 m!52391))

(declare-fun m!52393 () Bool)

(assert (=> b!59970 m!52393))

(declare-fun m!52395 () Bool)

(assert (=> b!59970 m!52395))

(assert (=> b!59970 m!52393))

(assert (=> b!59970 m!50697))

(assert (=> b!59970 m!50699))

(assert (=> b!59970 m!50697))

(assert (=> b!59970 m!50701))

(assert (=> b!59971 m!50643))

(assert (=> b!59971 m!50643))

(assert (=> b!59971 m!50645))

(declare-fun m!52397 () Bool)

(assert (=> bm!4529 m!52397))

(assert (=> b!59975 m!50643))

(assert (=> b!59975 m!50643))

(declare-fun m!52399 () Bool)

(assert (=> b!59975 m!52399))

(assert (=> b!59974 m!52397))

(assert (=> b!59968 m!50643))

(assert (=> b!59968 m!50643))

(assert (=> b!59968 m!50645))

(assert (=> b!59034 d!11709))

(declare-fun d!11711 () Bool)

(assert (=> d!11711 (= (apply!66 lt!23824 lt!23828) (get!1076 (getValueByKey!122 (toList!693 lt!23824) lt!23828)))))

(declare-fun bs!2604 () Bool)

(assert (= bs!2604 d!11711))

(declare-fun m!52401 () Bool)

(assert (=> bs!2604 m!52401))

(assert (=> bs!2604 m!52401))

(declare-fun m!52403 () Bool)

(assert (=> bs!2604 m!52403))

(assert (=> b!59034 d!11711))

(declare-fun d!11713 () Bool)

(assert (=> d!11713 (= (apply!66 (+!81 lt!23824 (tuple2!2037 lt!23821 (zeroValue!1958 newMap!16))) lt!23828) (get!1076 (getValueByKey!122 (toList!693 (+!81 lt!23824 (tuple2!2037 lt!23821 (zeroValue!1958 newMap!16)))) lt!23828)))))

(declare-fun bs!2605 () Bool)

(assert (= bs!2605 d!11713))

(declare-fun m!52405 () Bool)

(assert (=> bs!2605 m!52405))

(assert (=> bs!2605 m!52405))

(declare-fun m!52407 () Bool)

(assert (=> bs!2605 m!52407))

(assert (=> b!59034 d!11713))

(declare-fun d!11715 () Bool)

(declare-fun e!39404 () Bool)

(assert (=> d!11715 e!39404))

(declare-fun res!33227 () Bool)

(assert (=> d!11715 (=> (not res!33227) (not e!39404))))

(declare-fun lt!24521 () ListLongMap!1355)

(assert (=> d!11715 (= res!33227 (contains!682 lt!24521 (_1!1029 (tuple2!2037 lt!23827 (minValue!1958 newMap!16)))))))

(declare-fun lt!24522 () List!1437)

(assert (=> d!11715 (= lt!24521 (ListLongMap!1356 lt!24522))))

(declare-fun lt!24519 () Unit!1550)

(declare-fun lt!24520 () Unit!1550)

(assert (=> d!11715 (= lt!24519 lt!24520)))

(assert (=> d!11715 (= (getValueByKey!122 lt!24522 (_1!1029 (tuple2!2037 lt!23827 (minValue!1958 newMap!16)))) (Some!127 (_2!1029 (tuple2!2037 lt!23827 (minValue!1958 newMap!16)))))))

(assert (=> d!11715 (= lt!24520 (lemmaContainsTupThenGetReturnValue!42 lt!24522 (_1!1029 (tuple2!2037 lt!23827 (minValue!1958 newMap!16))) (_2!1029 (tuple2!2037 lt!23827 (minValue!1958 newMap!16)))))))

(assert (=> d!11715 (= lt!24522 (insertStrictlySorted!45 (toList!693 lt!23834) (_1!1029 (tuple2!2037 lt!23827 (minValue!1958 newMap!16))) (_2!1029 (tuple2!2037 lt!23827 (minValue!1958 newMap!16)))))))

(assert (=> d!11715 (= (+!81 lt!23834 (tuple2!2037 lt!23827 (minValue!1958 newMap!16))) lt!24521)))

(declare-fun b!59976 () Bool)

(declare-fun res!33228 () Bool)

(assert (=> b!59976 (=> (not res!33228) (not e!39404))))

(assert (=> b!59976 (= res!33228 (= (getValueByKey!122 (toList!693 lt!24521) (_1!1029 (tuple2!2037 lt!23827 (minValue!1958 newMap!16)))) (Some!127 (_2!1029 (tuple2!2037 lt!23827 (minValue!1958 newMap!16))))))))

(declare-fun b!59977 () Bool)

(assert (=> b!59977 (= e!39404 (contains!684 (toList!693 lt!24521) (tuple2!2037 lt!23827 (minValue!1958 newMap!16))))))

(assert (= (and d!11715 res!33227) b!59976))

(assert (= (and b!59976 res!33228) b!59977))

(declare-fun m!52409 () Bool)

(assert (=> d!11715 m!52409))

(declare-fun m!52411 () Bool)

(assert (=> d!11715 m!52411))

(declare-fun m!52413 () Bool)

(assert (=> d!11715 m!52413))

(declare-fun m!52415 () Bool)

(assert (=> d!11715 m!52415))

(declare-fun m!52417 () Bool)

(assert (=> b!59976 m!52417))

(declare-fun m!52419 () Bool)

(assert (=> b!59977 m!52419))

(assert (=> b!59034 d!11715))

(declare-fun d!11717 () Bool)

(assert (=> d!11717 (= (apply!66 (+!81 lt!23836 (tuple2!2037 lt!23818 (minValue!1958 newMap!16))) lt!23820) (apply!66 lt!23836 lt!23820))))

(declare-fun lt!24523 () Unit!1550)

(assert (=> d!11717 (= lt!24523 (choose!313 lt!23836 lt!23818 (minValue!1958 newMap!16) lt!23820))))

(declare-fun e!39405 () Bool)

(assert (=> d!11717 e!39405))

(declare-fun res!33229 () Bool)

(assert (=> d!11717 (=> (not res!33229) (not e!39405))))

(assert (=> d!11717 (= res!33229 (contains!682 lt!23836 lt!23820))))

(assert (=> d!11717 (= (addApplyDifferent!42 lt!23836 lt!23818 (minValue!1958 newMap!16) lt!23820) lt!24523)))

(declare-fun b!59978 () Bool)

(assert (=> b!59978 (= e!39405 (not (= lt!23820 lt!23818)))))

(assert (= (and d!11717 res!33229) b!59978))

(assert (=> d!11717 m!50663))

(declare-fun m!52421 () Bool)

(assert (=> d!11717 m!52421))

(declare-fun m!52423 () Bool)

(assert (=> d!11717 m!52423))

(assert (=> d!11717 m!50663))

(assert (=> d!11717 m!50665))

(assert (=> d!11717 m!50671))

(assert (=> b!59034 d!11717))

(declare-fun d!11719 () Bool)

(assert (=> d!11719 (= (get!1076 (getValueByKey!122 (toList!693 lt!23700) lt!23685)) (v!2382 (getValueByKey!122 (toList!693 lt!23700) lt!23685)))))

(assert (=> d!11297 d!11719))

(declare-fun d!11721 () Bool)

(declare-fun c!7758 () Bool)

(assert (=> d!11721 (= c!7758 (and ((_ is Cons!1433) (toList!693 lt!23700)) (= (_1!1029 (h!2014 (toList!693 lt!23700))) lt!23685)))))

(declare-fun e!39406 () Option!128)

(assert (=> d!11721 (= (getValueByKey!122 (toList!693 lt!23700) lt!23685) e!39406)))

(declare-fun b!59981 () Bool)

(declare-fun e!39407 () Option!128)

(assert (=> b!59981 (= e!39407 (getValueByKey!122 (t!4770 (toList!693 lt!23700)) lt!23685))))

(declare-fun b!59980 () Bool)

(assert (=> b!59980 (= e!39406 e!39407)))

(declare-fun c!7759 () Bool)

(assert (=> b!59980 (= c!7759 (and ((_ is Cons!1433) (toList!693 lt!23700)) (not (= (_1!1029 (h!2014 (toList!693 lt!23700))) lt!23685))))))

(declare-fun b!59982 () Bool)

(assert (=> b!59982 (= e!39407 None!126)))

(declare-fun b!59979 () Bool)

(assert (=> b!59979 (= e!39406 (Some!127 (_2!1029 (h!2014 (toList!693 lt!23700)))))))

(assert (= (and d!11721 c!7758) b!59979))

(assert (= (and d!11721 (not c!7758)) b!59980))

(assert (= (and b!59980 c!7759) b!59981))

(assert (= (and b!59980 (not c!7759)) b!59982))

(declare-fun m!52425 () Bool)

(assert (=> b!59981 m!52425))

(assert (=> d!11297 d!11721))

(assert (=> b!59243 d!11573))

(declare-fun d!11723 () Bool)

(declare-fun e!39409 () Bool)

(assert (=> d!11723 e!39409))

(declare-fun res!33230 () Bool)

(assert (=> d!11723 (=> res!33230 e!39409)))

(declare-fun lt!24524 () Bool)

(assert (=> d!11723 (= res!33230 (not lt!24524))))

(declare-fun lt!24526 () Bool)

(assert (=> d!11723 (= lt!24524 lt!24526)))

(declare-fun lt!24525 () Unit!1550)

(declare-fun e!39408 () Unit!1550)

(assert (=> d!11723 (= lt!24525 e!39408)))

(declare-fun c!7760 () Bool)

(assert (=> d!11723 (= c!7760 lt!24526)))

(assert (=> d!11723 (= lt!24526 (containsKey!126 (toList!693 lt!23881) (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(assert (=> d!11723 (= (contains!682 lt!23881 (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!24524)))

(declare-fun b!59983 () Bool)

(declare-fun lt!24527 () Unit!1550)

(assert (=> b!59983 (= e!39408 lt!24527)))

(assert (=> b!59983 (= lt!24527 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 lt!23881) (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(assert (=> b!59983 (isDefined!76 (getValueByKey!122 (toList!693 lt!23881) (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun b!59984 () Bool)

(declare-fun Unit!1603 () Unit!1550)

(assert (=> b!59984 (= e!39408 Unit!1603)))

(declare-fun b!59985 () Bool)

(assert (=> b!59985 (= e!39409 (isDefined!76 (getValueByKey!122 (toList!693 lt!23881) (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(assert (= (and d!11723 c!7760) b!59983))

(assert (= (and d!11723 (not c!7760)) b!59984))

(assert (= (and d!11723 (not res!33230)) b!59985))

(declare-fun m!52427 () Bool)

(assert (=> d!11723 m!52427))

(declare-fun m!52429 () Bool)

(assert (=> b!59983 m!52429))

(assert (=> b!59983 m!50785))

(assert (=> b!59983 m!50785))

(declare-fun m!52431 () Bool)

(assert (=> b!59983 m!52431))

(assert (=> b!59985 m!50785))

(assert (=> b!59985 m!50785))

(assert (=> b!59985 m!52431))

(assert (=> d!11255 d!11723))

(declare-fun d!11725 () Bool)

(declare-fun c!7761 () Bool)

(assert (=> d!11725 (= c!7761 (and ((_ is Cons!1433) lt!23882) (= (_1!1029 (h!2014 lt!23882)) (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(declare-fun e!39410 () Option!128)

(assert (=> d!11725 (= (getValueByKey!122 lt!23882 (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) e!39410)))

(declare-fun b!59988 () Bool)

(declare-fun e!39411 () Option!128)

(assert (=> b!59988 (= e!39411 (getValueByKey!122 (t!4770 lt!23882) (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun b!59987 () Bool)

(assert (=> b!59987 (= e!39410 e!39411)))

(declare-fun c!7762 () Bool)

(assert (=> b!59987 (= c!7762 (and ((_ is Cons!1433) lt!23882) (not (= (_1!1029 (h!2014 lt!23882)) (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))))

(declare-fun b!59989 () Bool)

(assert (=> b!59989 (= e!39411 None!126)))

(declare-fun b!59986 () Bool)

(assert (=> b!59986 (= e!39410 (Some!127 (_2!1029 (h!2014 lt!23882))))))

(assert (= (and d!11725 c!7761) b!59986))

(assert (= (and d!11725 (not c!7761)) b!59987))

(assert (= (and b!59987 c!7762) b!59988))

(assert (= (and b!59987 (not c!7762)) b!59989))

(declare-fun m!52433 () Bool)

(assert (=> b!59988 m!52433))

(assert (=> d!11255 d!11725))

(declare-fun d!11727 () Bool)

(assert (=> d!11727 (= (getValueByKey!122 lt!23882 (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) (Some!127 (_2!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun lt!24528 () Unit!1550)

(assert (=> d!11727 (= lt!24528 (choose!318 lt!23882 (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun e!39412 () Bool)

(assert (=> d!11727 e!39412))

(declare-fun res!33231 () Bool)

(assert (=> d!11727 (=> (not res!33231) (not e!39412))))

(assert (=> d!11727 (= res!33231 (isStrictlySorted!279 lt!23882))))

(assert (=> d!11727 (= (lemmaContainsTupThenGetReturnValue!42 lt!23882 (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!24528)))

(declare-fun b!59990 () Bool)

(declare-fun res!33232 () Bool)

(assert (=> b!59990 (=> (not res!33232) (not e!39412))))

(assert (=> b!59990 (= res!33232 (containsKey!126 lt!23882 (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun b!59991 () Bool)

(assert (=> b!59991 (= e!39412 (contains!684 lt!23882 (tuple2!2037 (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(assert (= (and d!11727 res!33231) b!59990))

(assert (= (and b!59990 res!33232) b!59991))

(assert (=> d!11727 m!50779))

(declare-fun m!52435 () Bool)

(assert (=> d!11727 m!52435))

(declare-fun m!52437 () Bool)

(assert (=> d!11727 m!52437))

(declare-fun m!52439 () Bool)

(assert (=> b!59990 m!52439))

(declare-fun m!52441 () Bool)

(assert (=> b!59991 m!52441))

(assert (=> d!11255 d!11727))

(declare-fun b!59992 () Bool)

(declare-fun e!39413 () List!1437)

(assert (=> b!59992 (= e!39413 (insertStrictlySorted!45 (t!4770 (toList!693 call!4327)) (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun b!59993 () Bool)

(declare-fun e!39416 () List!1437)

(declare-fun call!4533 () List!1437)

(assert (=> b!59993 (= e!39416 call!4533)))

(declare-fun b!59994 () Bool)

(declare-fun e!39414 () List!1437)

(assert (=> b!59994 (= e!39416 e!39414)))

(declare-fun c!7766 () Bool)

(assert (=> b!59994 (= c!7766 (and ((_ is Cons!1433) (toList!693 call!4327)) (= (_1!1029 (h!2014 (toList!693 call!4327))) (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(declare-fun b!59995 () Bool)

(declare-fun call!4534 () List!1437)

(assert (=> b!59995 (= e!39414 call!4534)))

(declare-fun bm!4531 () Bool)

(declare-fun c!7764 () Bool)

(assert (=> bm!4531 (= call!4533 ($colon$colon!59 e!39413 (ite c!7764 (h!2014 (toList!693 call!4327)) (tuple2!2037 (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))))

(declare-fun c!7765 () Bool)

(assert (=> bm!4531 (= c!7765 c!7764)))

(declare-fun b!59996 () Bool)

(declare-fun e!39417 () Bool)

(declare-fun lt!24529 () List!1437)

(assert (=> b!59996 (= e!39417 (contains!684 lt!24529 (tuple2!2037 (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(declare-fun b!59997 () Bool)

(declare-fun e!39415 () List!1437)

(declare-fun call!4535 () List!1437)

(assert (=> b!59997 (= e!39415 call!4535)))

(declare-fun b!59998 () Bool)

(declare-fun c!7763 () Bool)

(assert (=> b!59998 (= e!39413 (ite c!7766 (t!4770 (toList!693 call!4327)) (ite c!7763 (Cons!1433 (h!2014 (toList!693 call!4327)) (t!4770 (toList!693 call!4327))) Nil!1434)))))

(declare-fun bm!4530 () Bool)

(assert (=> bm!4530 (= call!4535 call!4534)))

(declare-fun d!11729 () Bool)

(assert (=> d!11729 e!39417))

(declare-fun res!33233 () Bool)

(assert (=> d!11729 (=> (not res!33233) (not e!39417))))

(assert (=> d!11729 (= res!33233 (isStrictlySorted!279 lt!24529))))

(assert (=> d!11729 (= lt!24529 e!39416)))

(assert (=> d!11729 (= c!7764 (and ((_ is Cons!1433) (toList!693 call!4327)) (bvslt (_1!1029 (h!2014 (toList!693 call!4327))) (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(assert (=> d!11729 (isStrictlySorted!279 (toList!693 call!4327))))

(assert (=> d!11729 (= (insertStrictlySorted!45 (toList!693 call!4327) (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!24529)))

(declare-fun bm!4532 () Bool)

(assert (=> bm!4532 (= call!4534 call!4533)))

(declare-fun b!59999 () Bool)

(assert (=> b!59999 (= e!39415 call!4535)))

(declare-fun b!60000 () Bool)

(assert (=> b!60000 (= c!7763 (and ((_ is Cons!1433) (toList!693 call!4327)) (bvsgt (_1!1029 (h!2014 (toList!693 call!4327))) (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(assert (=> b!60000 (= e!39414 e!39415)))

(declare-fun b!60001 () Bool)

(declare-fun res!33234 () Bool)

(assert (=> b!60001 (=> (not res!33234) (not e!39417))))

(assert (=> b!60001 (= res!33234 (containsKey!126 lt!24529 (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(assert (= (and d!11729 c!7764) b!59993))

(assert (= (and d!11729 (not c!7764)) b!59994))

(assert (= (and b!59994 c!7766) b!59995))

(assert (= (and b!59994 (not c!7766)) b!60000))

(assert (= (and b!60000 c!7763) b!59999))

(assert (= (and b!60000 (not c!7763)) b!59997))

(assert (= (or b!59999 b!59997) bm!4530))

(assert (= (or b!59995 bm!4530) bm!4532))

(assert (= (or b!59993 bm!4532) bm!4531))

(assert (= (and bm!4531 c!7765) b!59992))

(assert (= (and bm!4531 (not c!7765)) b!59998))

(assert (= (and d!11729 res!33233) b!60001))

(assert (= (and b!60001 res!33234) b!59996))

(declare-fun m!52443 () Bool)

(assert (=> b!60001 m!52443))

(declare-fun m!52445 () Bool)

(assert (=> d!11729 m!52445))

(declare-fun m!52447 () Bool)

(assert (=> d!11729 m!52447))

(declare-fun m!52449 () Bool)

(assert (=> b!59996 m!52449))

(declare-fun m!52451 () Bool)

(assert (=> b!59992 m!52451))

(declare-fun m!52453 () Bool)

(assert (=> bm!4531 m!52453))

(assert (=> d!11255 d!11729))

(declare-fun d!11731 () Bool)

(declare-fun lt!24530 () Bool)

(assert (=> d!11731 (= lt!24530 (select (content!64 (toList!693 lt!24058)) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!39418 () Bool)

(assert (=> d!11731 (= lt!24530 e!39418)))

(declare-fun res!33236 () Bool)

(assert (=> d!11731 (=> (not res!33236) (not e!39418))))

(assert (=> d!11731 (= res!33236 ((_ is Cons!1433) (toList!693 lt!24058)))))

(assert (=> d!11731 (= (contains!684 (toList!693 lt!24058) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!24530)))

(declare-fun b!60002 () Bool)

(declare-fun e!39419 () Bool)

(assert (=> b!60002 (= e!39418 e!39419)))

(declare-fun res!33235 () Bool)

(assert (=> b!60002 (=> res!33235 e!39419)))

(assert (=> b!60002 (= res!33235 (= (h!2014 (toList!693 lt!24058)) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!60003 () Bool)

(assert (=> b!60003 (= e!39419 (contains!684 (t!4770 (toList!693 lt!24058)) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!11731 res!33236) b!60002))

(assert (= (and b!60002 (not res!33235)) b!60003))

(declare-fun m!52455 () Bool)

(assert (=> d!11731 m!52455))

(declare-fun m!52457 () Bool)

(assert (=> d!11731 m!52457))

(declare-fun m!52459 () Bool)

(assert (=> b!60003 m!52459))

(assert (=> b!59247 d!11731))

(declare-fun d!11733 () Bool)

(declare-fun res!33237 () Bool)

(declare-fun e!39420 () Bool)

(assert (=> d!11733 (=> res!33237 e!39420)))

(assert (=> d!11733 (= res!33237 (= (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(assert (=> d!11733 (= (arrayContainsKey!0 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) e!39420)))

(declare-fun b!60004 () Bool)

(declare-fun e!39421 () Bool)

(assert (=> b!60004 (= e!39420 e!39421)))

(declare-fun res!33238 () Bool)

(assert (=> b!60004 (=> (not res!33238) (not e!39421))))

(assert (=> b!60004 (= res!33238 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992))))))))

(declare-fun b!60005 () Bool)

(assert (=> b!60005 (= e!39421 (arrayContainsKey!0 (_keys!3665 (v!2377 (underlying!223 thiss!992))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!11733 (not res!33237)) b!60004))

(assert (= (and b!60004 res!33238) b!60005))

(declare-fun m!52461 () Bool)

(assert (=> d!11733 m!52461))

(assert (=> b!60005 m!50353))

(declare-fun m!52463 () Bool)

(assert (=> b!60005 m!52463))

(assert (=> b!59051 d!11733))

(declare-fun d!11735 () Bool)

(declare-fun e!39423 () Bool)

(assert (=> d!11735 e!39423))

(declare-fun res!33239 () Bool)

(assert (=> d!11735 (=> res!33239 e!39423)))

(declare-fun lt!24531 () Bool)

(assert (=> d!11735 (= res!33239 (not lt!24531))))

(declare-fun lt!24533 () Bool)

(assert (=> d!11735 (= lt!24531 lt!24533)))

(declare-fun lt!24532 () Unit!1550)

(declare-fun e!39422 () Unit!1550)

(assert (=> d!11735 (= lt!24532 e!39422)))

(declare-fun c!7767 () Bool)

(assert (=> d!11735 (= c!7767 lt!24533)))

(assert (=> d!11735 (= lt!24533 (containsKey!126 (toList!693 lt!24103) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11735 (= (contains!682 lt!24103 #b1000000000000000000000000000000000000000000000000000000000000000) lt!24531)))

(declare-fun b!60006 () Bool)

(declare-fun lt!24534 () Unit!1550)

(assert (=> b!60006 (= e!39422 lt!24534)))

(assert (=> b!60006 (= lt!24534 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 lt!24103) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!60006 (isDefined!76 (getValueByKey!122 (toList!693 lt!24103) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60007 () Bool)

(declare-fun Unit!1604 () Unit!1550)

(assert (=> b!60007 (= e!39422 Unit!1604)))

(declare-fun b!60008 () Bool)

(assert (=> b!60008 (= e!39423 (isDefined!76 (getValueByKey!122 (toList!693 lt!24103) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11735 c!7767) b!60006))

(assert (= (and d!11735 (not c!7767)) b!60007))

(assert (= (and d!11735 (not res!33239)) b!60008))

(declare-fun m!52465 () Bool)

(assert (=> d!11735 m!52465))

(declare-fun m!52467 () Bool)

(assert (=> b!60006 m!52467))

(assert (=> b!60006 m!51925))

(assert (=> b!60006 m!51925))

(declare-fun m!52469 () Bool)

(assert (=> b!60006 m!52469))

(assert (=> b!60008 m!51925))

(assert (=> b!60008 m!51925))

(assert (=> b!60008 m!52469))

(assert (=> bm!4445 d!11735))

(declare-fun d!11737 () Bool)

(declare-fun e!39424 () Bool)

(assert (=> d!11737 e!39424))

(declare-fun res!33240 () Bool)

(assert (=> d!11737 (=> (not res!33240) (not e!39424))))

(declare-fun lt!24537 () ListLongMap!1355)

(assert (=> d!11737 (= res!33240 (contains!682 lt!24537 (_1!1029 (ite (or c!7499 c!7501) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))))

(declare-fun lt!24538 () List!1437)

(assert (=> d!11737 (= lt!24537 (ListLongMap!1356 lt!24538))))

(declare-fun lt!24535 () Unit!1550)

(declare-fun lt!24536 () Unit!1550)

(assert (=> d!11737 (= lt!24535 lt!24536)))

(assert (=> d!11737 (= (getValueByKey!122 lt!24538 (_1!1029 (ite (or c!7499 c!7501) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))) (Some!127 (_2!1029 (ite (or c!7499 c!7501) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))))

(assert (=> d!11737 (= lt!24536 (lemmaContainsTupThenGetReturnValue!42 lt!24538 (_1!1029 (ite (or c!7499 c!7501) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))) (_2!1029 (ite (or c!7499 c!7501) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))))

(assert (=> d!11737 (= lt!24538 (insertStrictlySorted!45 (toList!693 (ite c!7499 call!4409 (ite c!7501 call!4412 call!4410))) (_1!1029 (ite (or c!7499 c!7501) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))) (_2!1029 (ite (or c!7499 c!7501) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))))

(assert (=> d!11737 (= (+!81 (ite c!7499 call!4409 (ite c!7501 call!4412 call!4410)) (ite (or c!7499 c!7501) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))) lt!24537)))

(declare-fun b!60009 () Bool)

(declare-fun res!33241 () Bool)

(assert (=> b!60009 (=> (not res!33241) (not e!39424))))

(assert (=> b!60009 (= res!33241 (= (getValueByKey!122 (toList!693 lt!24537) (_1!1029 (ite (or c!7499 c!7501) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))) (Some!127 (_2!1029 (ite (or c!7499 c!7501) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))))

(declare-fun b!60010 () Bool)

(assert (=> b!60010 (= e!39424 (contains!684 (toList!693 lt!24537) (ite (or c!7499 c!7501) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))

(assert (= (and d!11737 res!33240) b!60009))

(assert (= (and b!60009 res!33241) b!60010))

(declare-fun m!52471 () Bool)

(assert (=> d!11737 m!52471))

(declare-fun m!52473 () Bool)

(assert (=> d!11737 m!52473))

(declare-fun m!52475 () Bool)

(assert (=> d!11737 m!52475))

(declare-fun m!52477 () Bool)

(assert (=> d!11737 m!52477))

(declare-fun m!52479 () Bool)

(assert (=> b!60009 m!52479))

(declare-fun m!52481 () Bool)

(assert (=> b!60010 m!52481))

(assert (=> bm!4410 d!11737))

(declare-fun d!11739 () Bool)

(declare-fun lt!24539 () Bool)

(assert (=> d!11739 (= lt!24539 (select (content!63 (ite c!7484 (Cons!1432 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) Nil!1433) Nil!1433)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun e!39426 () Bool)

(assert (=> d!11739 (= lt!24539 e!39426)))

(declare-fun res!33242 () Bool)

(assert (=> d!11739 (=> (not res!33242) (not e!39426))))

(assert (=> d!11739 (= res!33242 ((_ is Cons!1432) (ite c!7484 (Cons!1432 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) Nil!1433) Nil!1433)))))

(assert (=> d!11739 (= (contains!683 (ite c!7484 (Cons!1432 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) Nil!1433) Nil!1433) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) lt!24539)))

(declare-fun b!60011 () Bool)

(declare-fun e!39425 () Bool)

(assert (=> b!60011 (= e!39426 e!39425)))

(declare-fun res!33243 () Bool)

(assert (=> b!60011 (=> res!33243 e!39425)))

(assert (=> b!60011 (= res!33243 (= (h!2013 (ite c!7484 (Cons!1432 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) Nil!1433) Nil!1433)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!60012 () Bool)

(assert (=> b!60012 (= e!39425 (contains!683 (t!4769 (ite c!7484 (Cons!1432 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) Nil!1433) Nil!1433)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(assert (= (and d!11739 res!33242) b!60011))

(assert (= (and b!60011 (not res!33243)) b!60012))

(declare-fun m!52483 () Bool)

(assert (=> d!11739 m!52483))

(assert (=> d!11739 m!51163))

(declare-fun m!52485 () Bool)

(assert (=> d!11739 m!52485))

(assert (=> b!60012 m!51163))

(declare-fun m!52487 () Bool)

(assert (=> b!60012 m!52487))

(assert (=> b!59331 d!11739))

(declare-fun d!11741 () Bool)

(assert (=> d!11741 (= (apply!66 lt!24020 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1076 (getValueByKey!122 (toList!693 lt!24020) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!2606 () Bool)

(assert (= bs!2606 d!11741))

(assert (=> bs!2606 m!50485))

(assert (=> bs!2606 m!51537))

(assert (=> bs!2606 m!51537))

(declare-fun m!52489 () Bool)

(assert (=> bs!2606 m!52489))

(assert (=> b!59206 d!11741))

(assert (=> b!59206 d!11341))

(assert (=> d!11267 d!11211))

(assert (=> d!11327 d!11347))

(declare-fun d!11743 () Bool)

(declare-fun res!33244 () Bool)

(declare-fun e!39427 () Bool)

(assert (=> d!11743 (=> res!33244 e!39427)))

(assert (=> d!11743 (= res!33244 (and ((_ is Cons!1433) (t!4770 (toList!693 lt!23596))) (= (_1!1029 (h!2014 (t!4770 (toList!693 lt!23596)))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355))))))

(assert (=> d!11743 (= (containsKey!126 (t!4770 (toList!693 lt!23596)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) e!39427)))

(declare-fun b!60013 () Bool)

(declare-fun e!39428 () Bool)

(assert (=> b!60013 (= e!39427 e!39428)))

(declare-fun res!33245 () Bool)

(assert (=> b!60013 (=> (not res!33245) (not e!39428))))

(assert (=> b!60013 (= res!33245 (and (or (not ((_ is Cons!1433) (t!4770 (toList!693 lt!23596)))) (bvsle (_1!1029 (h!2014 (t!4770 (toList!693 lt!23596)))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355))) ((_ is Cons!1433) (t!4770 (toList!693 lt!23596))) (bvslt (_1!1029 (h!2014 (t!4770 (toList!693 lt!23596)))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355))))))

(declare-fun b!60014 () Bool)

(assert (=> b!60014 (= e!39428 (containsKey!126 (t!4770 (t!4770 (toList!693 lt!23596))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(assert (= (and d!11743 (not res!33244)) b!60013))

(assert (= (and b!60013 res!33245) b!60014))

(assert (=> b!60014 m!50353))

(declare-fun m!52491 () Bool)

(assert (=> b!60014 m!52491))

(assert (=> b!59090 d!11743))

(assert (=> d!11271 d!11347))

(declare-fun b!60015 () Bool)

(declare-fun e!39432 () Bool)

(declare-fun call!4536 () Bool)

(assert (=> b!60015 (= e!39432 call!4536)))

(declare-fun b!60016 () Bool)

(declare-fun e!39430 () Bool)

(declare-fun e!39429 () Bool)

(assert (=> b!60016 (= e!39430 e!39429)))

(declare-fun res!33246 () Bool)

(assert (=> b!60016 (=> (not res!33246) (not e!39429))))

(declare-fun e!39431 () Bool)

(assert (=> b!60016 (= res!33246 (not e!39431))))

(declare-fun res!33247 () Bool)

(assert (=> b!60016 (=> (not res!33247) (not e!39431))))

(assert (=> b!60016 (= res!33247 (validKeyInArray!0 (select (arr!1768 (_keys!3665 (_2!1028 lt!23773))) #b00000000000000000000000000000000)))))

(declare-fun bm!4533 () Bool)

(declare-fun c!7768 () Bool)

(assert (=> bm!4533 (= call!4536 (arrayNoDuplicates!0 (_keys!3665 (_2!1028 lt!23773)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!7768 (Cons!1432 (select (arr!1768 (_keys!3665 (_2!1028 lt!23773))) #b00000000000000000000000000000000) Nil!1433) Nil!1433)))))

(declare-fun b!60017 () Bool)

(assert (=> b!60017 (= e!39432 call!4536)))

(declare-fun d!11745 () Bool)

(declare-fun res!33248 () Bool)

(assert (=> d!11745 (=> res!33248 e!39430)))

(assert (=> d!11745 (= res!33248 (bvsge #b00000000000000000000000000000000 (size!1999 (_keys!3665 (_2!1028 lt!23773)))))))

(assert (=> d!11745 (= (arrayNoDuplicates!0 (_keys!3665 (_2!1028 lt!23773)) #b00000000000000000000000000000000 Nil!1433) e!39430)))

(declare-fun b!60018 () Bool)

(assert (=> b!60018 (= e!39429 e!39432)))

(assert (=> b!60018 (= c!7768 (validKeyInArray!0 (select (arr!1768 (_keys!3665 (_2!1028 lt!23773))) #b00000000000000000000000000000000)))))

(declare-fun b!60019 () Bool)

(assert (=> b!60019 (= e!39431 (contains!683 Nil!1433 (select (arr!1768 (_keys!3665 (_2!1028 lt!23773))) #b00000000000000000000000000000000)))))

(assert (= (and d!11745 (not res!33248)) b!60016))

(assert (= (and b!60016 res!33247) b!60019))

(assert (= (and b!60016 res!33246) b!60018))

(assert (= (and b!60018 c!7768) b!60015))

(assert (= (and b!60018 (not c!7768)) b!60017))

(assert (= (or b!60015 b!60017) bm!4533))

(assert (=> b!60016 m!51199))

(assert (=> b!60016 m!51199))

(assert (=> b!60016 m!51207))

(assert (=> bm!4533 m!51199))

(declare-fun m!52493 () Bool)

(assert (=> bm!4533 m!52493))

(assert (=> b!60018 m!51199))

(assert (=> b!60018 m!51199))

(assert (=> b!60018 m!51207))

(assert (=> b!60019 m!51199))

(assert (=> b!60019 m!51199))

(declare-fun m!52495 () Bool)

(assert (=> b!60019 m!52495))

(assert (=> b!59334 d!11745))

(declare-fun d!11747 () Bool)

(assert (=> d!11747 (= (get!1076 (getValueByKey!122 (toList!693 (+!81 lt!23690 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!23694)) (v!2382 (getValueByKey!122 (toList!693 (+!81 lt!23690 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!23694)))))

(assert (=> d!11275 d!11747))

(declare-fun c!7769 () Bool)

(declare-fun d!11749 () Bool)

(assert (=> d!11749 (= c!7769 (and ((_ is Cons!1433) (toList!693 (+!81 lt!23690 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))) (= (_1!1029 (h!2014 (toList!693 (+!81 lt!23690 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))) lt!23694)))))

(declare-fun e!39433 () Option!128)

(assert (=> d!11749 (= (getValueByKey!122 (toList!693 (+!81 lt!23690 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!23694) e!39433)))

(declare-fun b!60022 () Bool)

(declare-fun e!39434 () Option!128)

(assert (=> b!60022 (= e!39434 (getValueByKey!122 (t!4770 (toList!693 (+!81 lt!23690 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))) lt!23694))))

(declare-fun b!60021 () Bool)

(assert (=> b!60021 (= e!39433 e!39434)))

(declare-fun c!7770 () Bool)

(assert (=> b!60021 (= c!7770 (and ((_ is Cons!1433) (toList!693 (+!81 lt!23690 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))) (not (= (_1!1029 (h!2014 (toList!693 (+!81 lt!23690 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))) lt!23694))))))

(declare-fun b!60023 () Bool)

(assert (=> b!60023 (= e!39434 None!126)))

(declare-fun b!60020 () Bool)

(assert (=> b!60020 (= e!39433 (Some!127 (_2!1029 (h!2014 (toList!693 (+!81 lt!23690 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))))))))

(assert (= (and d!11749 c!7769) b!60020))

(assert (= (and d!11749 (not c!7769)) b!60021))

(assert (= (and b!60021 c!7770) b!60022))

(assert (= (and b!60021 (not c!7770)) b!60023))

(declare-fun m!52497 () Bool)

(assert (=> b!60022 m!52497))

(assert (=> d!11275 d!11749))

(declare-fun d!11751 () Bool)

(declare-fun e!39436 () Bool)

(assert (=> d!11751 e!39436))

(declare-fun res!33249 () Bool)

(assert (=> d!11751 (=> res!33249 e!39436)))

(declare-fun lt!24540 () Bool)

(assert (=> d!11751 (= res!33249 (not lt!24540))))

(declare-fun lt!24542 () Bool)

(assert (=> d!11751 (= lt!24540 lt!24542)))

(declare-fun lt!24541 () Unit!1550)

(declare-fun e!39435 () Unit!1550)

(assert (=> d!11751 (= lt!24541 e!39435)))

(declare-fun c!7771 () Bool)

(assert (=> d!11751 (= c!7771 lt!24542)))

(assert (=> d!11751 (= lt!24542 (containsKey!126 (toList!693 lt!24106) (_1!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!11751 (= (contains!682 lt!24106 (_1!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!24540)))

(declare-fun b!60024 () Bool)

(declare-fun lt!24543 () Unit!1550)

(assert (=> b!60024 (= e!39435 lt!24543)))

(assert (=> b!60024 (= lt!24543 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 lt!24106) (_1!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!60024 (isDefined!76 (getValueByKey!122 (toList!693 lt!24106) (_1!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!60025 () Bool)

(declare-fun Unit!1605 () Unit!1550)

(assert (=> b!60025 (= e!39435 Unit!1605)))

(declare-fun b!60026 () Bool)

(assert (=> b!60026 (= e!39436 (isDefined!76 (getValueByKey!122 (toList!693 lt!24106) (_1!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!11751 c!7771) b!60024))

(assert (= (and d!11751 (not c!7771)) b!60025))

(assert (= (and d!11751 (not res!33249)) b!60026))

(declare-fun m!52499 () Bool)

(assert (=> d!11751 m!52499))

(declare-fun m!52501 () Bool)

(assert (=> b!60024 m!52501))

(assert (=> b!60024 m!51157))

(assert (=> b!60024 m!51157))

(declare-fun m!52503 () Bool)

(assert (=> b!60024 m!52503))

(assert (=> b!60026 m!51157))

(assert (=> b!60026 m!51157))

(assert (=> b!60026 m!52503))

(assert (=> d!11329 d!11751))

(declare-fun c!7772 () Bool)

(declare-fun d!11753 () Bool)

(assert (=> d!11753 (= c!7772 (and ((_ is Cons!1433) lt!24107) (= (_1!1029 (h!2014 lt!24107)) (_1!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun e!39437 () Option!128)

(assert (=> d!11753 (= (getValueByKey!122 lt!24107 (_1!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!39437)))

(declare-fun b!60029 () Bool)

(declare-fun e!39438 () Option!128)

(assert (=> b!60029 (= e!39438 (getValueByKey!122 (t!4770 lt!24107) (_1!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!60028 () Bool)

(assert (=> b!60028 (= e!39437 e!39438)))

(declare-fun c!7773 () Bool)

(assert (=> b!60028 (= c!7773 (and ((_ is Cons!1433) lt!24107) (not (= (_1!1029 (h!2014 lt!24107)) (_1!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun b!60030 () Bool)

(assert (=> b!60030 (= e!39438 None!126)))

(declare-fun b!60027 () Bool)

(assert (=> b!60027 (= e!39437 (Some!127 (_2!1029 (h!2014 lt!24107))))))

(assert (= (and d!11753 c!7772) b!60027))

(assert (= (and d!11753 (not c!7772)) b!60028))

(assert (= (and b!60028 c!7773) b!60029))

(assert (= (and b!60028 (not c!7773)) b!60030))

(declare-fun m!52505 () Bool)

(assert (=> b!60029 m!52505))

(assert (=> d!11329 d!11753))

(declare-fun d!11755 () Bool)

(assert (=> d!11755 (= (getValueByKey!122 lt!24107 (_1!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!127 (_2!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!24544 () Unit!1550)

(assert (=> d!11755 (= lt!24544 (choose!318 lt!24107 (_1!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!39439 () Bool)

(assert (=> d!11755 e!39439))

(declare-fun res!33250 () Bool)

(assert (=> d!11755 (=> (not res!33250) (not e!39439))))

(assert (=> d!11755 (= res!33250 (isStrictlySorted!279 lt!24107))))

(assert (=> d!11755 (= (lemmaContainsTupThenGetReturnValue!42 lt!24107 (_1!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!24544)))

(declare-fun b!60031 () Bool)

(declare-fun res!33251 () Bool)

(assert (=> b!60031 (=> (not res!33251) (not e!39439))))

(assert (=> b!60031 (= res!33251 (containsKey!126 lt!24107 (_1!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!60032 () Bool)

(assert (=> b!60032 (= e!39439 (contains!684 lt!24107 (tuple2!2037 (_1!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!11755 res!33250) b!60031))

(assert (= (and b!60031 res!33251) b!60032))

(assert (=> d!11755 m!51151))

(declare-fun m!52507 () Bool)

(assert (=> d!11755 m!52507))

(declare-fun m!52509 () Bool)

(assert (=> d!11755 m!52509))

(declare-fun m!52511 () Bool)

(assert (=> b!60031 m!52511))

(declare-fun m!52513 () Bool)

(assert (=> b!60032 m!52513))

(assert (=> d!11329 d!11755))

(declare-fun e!39440 () List!1437)

(declare-fun b!60033 () Bool)

(assert (=> b!60033 (= e!39440 (insertStrictlySorted!45 (t!4770 (toList!693 e!38782)) (_1!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!60034 () Bool)

(declare-fun e!39443 () List!1437)

(declare-fun call!4537 () List!1437)

(assert (=> b!60034 (= e!39443 call!4537)))

(declare-fun b!60035 () Bool)

(declare-fun e!39441 () List!1437)

(assert (=> b!60035 (= e!39443 e!39441)))

(declare-fun c!7777 () Bool)

(assert (=> b!60035 (= c!7777 (and ((_ is Cons!1433) (toList!693 e!38782)) (= (_1!1029 (h!2014 (toList!693 e!38782))) (_1!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!60036 () Bool)

(declare-fun call!4538 () List!1437)

(assert (=> b!60036 (= e!39441 call!4538)))

(declare-fun c!7775 () Bool)

(declare-fun bm!4535 () Bool)

(assert (=> bm!4535 (= call!4537 ($colon$colon!59 e!39440 (ite c!7775 (h!2014 (toList!693 e!38782)) (tuple2!2037 (_1!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun c!7776 () Bool)

(assert (=> bm!4535 (= c!7776 c!7775)))

(declare-fun e!39444 () Bool)

(declare-fun b!60037 () Bool)

(declare-fun lt!24545 () List!1437)

(assert (=> b!60037 (= e!39444 (contains!684 lt!24545 (tuple2!2037 (_1!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!60038 () Bool)

(declare-fun e!39442 () List!1437)

(declare-fun call!4539 () List!1437)

(assert (=> b!60038 (= e!39442 call!4539)))

(declare-fun b!60039 () Bool)

(declare-fun c!7774 () Bool)

(assert (=> b!60039 (= e!39440 (ite c!7777 (t!4770 (toList!693 e!38782)) (ite c!7774 (Cons!1433 (h!2014 (toList!693 e!38782)) (t!4770 (toList!693 e!38782))) Nil!1434)))))

(declare-fun bm!4534 () Bool)

(assert (=> bm!4534 (= call!4539 call!4538)))

(declare-fun d!11757 () Bool)

(assert (=> d!11757 e!39444))

(declare-fun res!33252 () Bool)

(assert (=> d!11757 (=> (not res!33252) (not e!39444))))

(assert (=> d!11757 (= res!33252 (isStrictlySorted!279 lt!24545))))

(assert (=> d!11757 (= lt!24545 e!39443)))

(assert (=> d!11757 (= c!7775 (and ((_ is Cons!1433) (toList!693 e!38782)) (bvslt (_1!1029 (h!2014 (toList!693 e!38782))) (_1!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!11757 (isStrictlySorted!279 (toList!693 e!38782))))

(assert (=> d!11757 (= (insertStrictlySorted!45 (toList!693 e!38782) (_1!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!24545)))

(declare-fun bm!4536 () Bool)

(assert (=> bm!4536 (= call!4538 call!4537)))

(declare-fun b!60040 () Bool)

(assert (=> b!60040 (= e!39442 call!4539)))

(declare-fun b!60041 () Bool)

(assert (=> b!60041 (= c!7774 (and ((_ is Cons!1433) (toList!693 e!38782)) (bvsgt (_1!1029 (h!2014 (toList!693 e!38782))) (_1!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> b!60041 (= e!39441 e!39442)))

(declare-fun b!60042 () Bool)

(declare-fun res!33253 () Bool)

(assert (=> b!60042 (=> (not res!33253) (not e!39444))))

(assert (=> b!60042 (= res!33253 (containsKey!126 lt!24545 (_1!1029 (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!11757 c!7775) b!60034))

(assert (= (and d!11757 (not c!7775)) b!60035))

(assert (= (and b!60035 c!7777) b!60036))

(assert (= (and b!60035 (not c!7777)) b!60041))

(assert (= (and b!60041 c!7774) b!60040))

(assert (= (and b!60041 (not c!7774)) b!60038))

(assert (= (or b!60040 b!60038) bm!4534))

(assert (= (or b!60036 bm!4534) bm!4536))

(assert (= (or b!60034 bm!4536) bm!4535))

(assert (= (and bm!4535 c!7776) b!60033))

(assert (= (and bm!4535 (not c!7776)) b!60039))

(assert (= (and d!11757 res!33252) b!60042))

(assert (= (and b!60042 res!33253) b!60037))

(declare-fun m!52515 () Bool)

(assert (=> b!60042 m!52515))

(declare-fun m!52517 () Bool)

(assert (=> d!11757 m!52517))

(declare-fun m!52519 () Bool)

(assert (=> d!11757 m!52519))

(declare-fun m!52521 () Bool)

(assert (=> b!60037 m!52521))

(declare-fun m!52523 () Bool)

(assert (=> b!60033 m!52523))

(declare-fun m!52525 () Bool)

(assert (=> bm!4535 m!52525))

(assert (=> d!11329 d!11757))

(assert (=> d!11323 d!11249))

(declare-fun b!60059 () Bool)

(declare-fun e!39455 () Bool)

(declare-fun call!4545 () Bool)

(assert (=> b!60059 (= e!39455 (not call!4545))))

(declare-fun b!60060 () Bool)

(declare-fun e!39453 () Bool)

(assert (=> b!60060 (= e!39453 (not call!4545))))

(declare-fun bm!4541 () Bool)

(assert (=> bm!4541 (= call!4545 (arrayContainsKey!0 (_keys!3665 newMap!16) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!60061 () Bool)

(declare-fun e!39454 () Bool)

(declare-fun e!39456 () Bool)

(assert (=> b!60061 (= e!39454 e!39456)))

(declare-fun c!7783 () Bool)

(declare-fun lt!24548 () SeekEntryResult!230)

(assert (=> b!60061 (= c!7783 ((_ is MissingVacant!230) lt!24548))))

(declare-fun bm!4542 () Bool)

(declare-fun c!7782 () Bool)

(declare-fun call!4544 () Bool)

(assert (=> bm!4542 (= call!4544 (inRange!0 (ite c!7782 (index!3043 lt!24548) (index!3046 lt!24548)) (mask!5925 newMap!16)))))

(declare-fun b!60063 () Bool)

(assert (=> b!60063 (= e!39454 e!39453)))

(declare-fun res!33264 () Bool)

(assert (=> b!60063 (= res!33264 call!4544)))

(assert (=> b!60063 (=> (not res!33264) (not e!39453))))

(declare-fun b!60064 () Bool)

(assert (=> b!60064 (= e!39456 ((_ is Undefined!230) lt!24548))))

(declare-fun b!60062 () Bool)

(declare-fun res!33262 () Bool)

(assert (=> b!60062 (=> (not res!33262) (not e!39455))))

(assert (=> b!60062 (= res!33262 call!4544)))

(assert (=> b!60062 (= e!39456 e!39455)))

(declare-fun d!11759 () Bool)

(assert (=> d!11759 e!39454))

(assert (=> d!11759 (= c!7782 ((_ is MissingZero!230) lt!24548))))

(assert (=> d!11759 (= lt!24548 (seekEntryOrOpen!0 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (_keys!3665 newMap!16) (mask!5925 newMap!16)))))

(assert (=> d!11759 true))

(declare-fun _$34!763 () Unit!1550)

(assert (=> d!11759 (= (choose!316 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (defaultEntry!2042 newMap!16)) _$34!763)))

(declare-fun b!60065 () Bool)

(declare-fun res!33265 () Bool)

(assert (=> b!60065 (= res!33265 (= (select (arr!1768 (_keys!3665 newMap!16)) (index!3043 lt!24548)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!60065 (=> (not res!33265) (not e!39453))))

(declare-fun b!60066 () Bool)

(declare-fun res!33263 () Bool)

(assert (=> b!60066 (=> (not res!33263) (not e!39455))))

(assert (=> b!60066 (= res!33263 (= (select (arr!1768 (_keys!3665 newMap!16)) (index!3046 lt!24548)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!11759 c!7782) b!60063))

(assert (= (and d!11759 (not c!7782)) b!60061))

(assert (= (and b!60063 res!33264) b!60065))

(assert (= (and b!60065 res!33265) b!60060))

(assert (= (and b!60061 c!7783) b!60062))

(assert (= (and b!60061 (not c!7783)) b!60064))

(assert (= (and b!60062 res!33262) b!60066))

(assert (= (and b!60066 res!33263) b!60059))

(assert (= (or b!60063 b!60062) bm!4542))

(assert (= (or b!60060 b!60059) bm!4541))

(assert (=> d!11759 m!50353))

(assert (=> d!11759 m!50557))

(declare-fun m!52527 () Bool)

(assert (=> b!60065 m!52527))

(assert (=> bm!4541 m!50353))

(assert (=> bm!4541 m!50581))

(declare-fun m!52529 () Bool)

(assert (=> b!60066 m!52529))

(declare-fun m!52531 () Bool)

(assert (=> bm!4542 m!52531))

(assert (=> d!11323 d!11759))

(assert (=> d!11323 d!11347))

(declare-fun b!60067 () Bool)

(declare-fun e!39460 () Bool)

(declare-fun call!4546 () Bool)

(assert (=> b!60067 (= e!39460 call!4546)))

(declare-fun b!60068 () Bool)

(declare-fun e!39458 () Bool)

(declare-fun e!39457 () Bool)

(assert (=> b!60068 (= e!39458 e!39457)))

(declare-fun res!33266 () Bool)

(assert (=> b!60068 (=> (not res!33266) (not e!39457))))

(declare-fun e!39459 () Bool)

(assert (=> b!60068 (= res!33266 (not e!39459))))

(declare-fun res!33267 () Bool)

(assert (=> b!60068 (=> (not res!33267) (not e!39459))))

(assert (=> b!60068 (= res!33267 (validKeyInArray!0 (select (arr!1768 (_keys!3665 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun c!7784 () Bool)

(declare-fun bm!4543 () Bool)

(assert (=> bm!4543 (= call!4546 (arrayNoDuplicates!0 (_keys!3665 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!7784 (Cons!1432 (select (arr!1768 (_keys!3665 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (ite c!7492 (Cons!1432 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000) Nil!1433) Nil!1433)) (ite c!7492 (Cons!1432 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000) Nil!1433) Nil!1433))))))

(declare-fun b!60069 () Bool)

(assert (=> b!60069 (= e!39460 call!4546)))

(declare-fun d!11761 () Bool)

(declare-fun res!33268 () Bool)

(assert (=> d!11761 (=> res!33268 e!39458)))

(assert (=> d!11761 (= res!33268 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!1999 (_keys!3665 newMap!16))))))

(assert (=> d!11761 (= (arrayNoDuplicates!0 (_keys!3665 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!7492 (Cons!1432 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000) Nil!1433) Nil!1433)) e!39458)))

(declare-fun b!60070 () Bool)

(assert (=> b!60070 (= e!39457 e!39460)))

(assert (=> b!60070 (= c!7784 (validKeyInArray!0 (select (arr!1768 (_keys!3665 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!60071 () Bool)

(assert (=> b!60071 (= e!39459 (contains!683 (ite c!7492 (Cons!1432 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000) Nil!1433) Nil!1433) (select (arr!1768 (_keys!3665 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (= (and d!11761 (not res!33268)) b!60068))

(assert (= (and b!60068 res!33267) b!60071))

(assert (= (and b!60068 res!33266) b!60070))

(assert (= (and b!60070 c!7784) b!60067))

(assert (= (and b!60070 (not c!7784)) b!60069))

(assert (= (or b!60067 b!60069) bm!4543))

(assert (=> b!60068 m!51583))

(assert (=> b!60068 m!51583))

(assert (=> b!60068 m!51603))

(assert (=> bm!4543 m!51583))

(declare-fun m!52533 () Bool)

(assert (=> bm!4543 m!52533))

(assert (=> b!60070 m!51583))

(assert (=> b!60070 m!51583))

(assert (=> b!60070 m!51603))

(assert (=> b!60071 m!51583))

(assert (=> b!60071 m!51583))

(declare-fun m!52535 () Bool)

(assert (=> b!60071 m!52535))

(assert (=> bm!4404 d!11761))

(declare-fun d!11763 () Bool)

(declare-fun e!39462 () Bool)

(assert (=> d!11763 e!39462))

(declare-fun res!33269 () Bool)

(assert (=> d!11763 (=> res!33269 e!39462)))

(declare-fun lt!24549 () Bool)

(assert (=> d!11763 (= res!33269 (not lt!24549))))

(declare-fun lt!24551 () Bool)

(assert (=> d!11763 (= lt!24549 lt!24551)))

(declare-fun lt!24550 () Unit!1550)

(declare-fun e!39461 () Unit!1550)

(assert (=> d!11763 (= lt!24550 e!39461)))

(declare-fun c!7785 () Bool)

(assert (=> d!11763 (= c!7785 lt!24551)))

(assert (=> d!11763 (= lt!24551 (containsKey!126 (toList!693 lt!24002) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11763 (= (contains!682 lt!24002 #b0000000000000000000000000000000000000000000000000000000000000000) lt!24549)))

(declare-fun b!60072 () Bool)

(declare-fun lt!24552 () Unit!1550)

(assert (=> b!60072 (= e!39461 lt!24552)))

(assert (=> b!60072 (= lt!24552 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 lt!24002) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!60072 (isDefined!76 (getValueByKey!122 (toList!693 lt!24002) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60073 () Bool)

(declare-fun Unit!1606 () Unit!1550)

(assert (=> b!60073 (= e!39461 Unit!1606)))

(declare-fun b!60074 () Bool)

(assert (=> b!60074 (= e!39462 (isDefined!76 (getValueByKey!122 (toList!693 lt!24002) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11763 c!7785) b!60072))

(assert (= (and d!11763 (not c!7785)) b!60073))

(assert (= (and d!11763 (not res!33269)) b!60074))

(declare-fun m!52537 () Bool)

(assert (=> d!11763 m!52537))

(declare-fun m!52539 () Bool)

(assert (=> b!60072 m!52539))

(assert (=> b!60072 m!51965))

(assert (=> b!60072 m!51965))

(declare-fun m!52541 () Bool)

(assert (=> b!60072 m!52541))

(assert (=> b!60074 m!51965))

(assert (=> b!60074 m!51965))

(assert (=> b!60074 m!52541))

(assert (=> bm!4424 d!11763))

(assert (=> d!11315 d!11317))

(assert (=> d!11315 d!11319))

(declare-fun d!11765 () Bool)

(assert (=> d!11765 (isDefined!76 (getValueByKey!122 (toList!693 lt!23596) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(assert (=> d!11765 true))

(declare-fun _$12!305 () Unit!1550)

(assert (=> d!11765 (= (choose!315 (toList!693 lt!23596) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) _$12!305)))

(declare-fun bs!2607 () Bool)

(assert (= bs!2607 d!11765))

(assert (=> bs!2607 m!50353))

(assert (=> bs!2607 m!50553))

(assert (=> bs!2607 m!50553))

(assert (=> bs!2607 m!50555))

(assert (=> d!11315 d!11765))

(declare-fun d!11767 () Bool)

(declare-fun res!33274 () Bool)

(declare-fun e!39467 () Bool)

(assert (=> d!11767 (=> res!33274 e!39467)))

(assert (=> d!11767 (= res!33274 (or ((_ is Nil!1434) (toList!693 lt!23596)) ((_ is Nil!1434) (t!4770 (toList!693 lt!23596)))))))

(assert (=> d!11767 (= (isStrictlySorted!279 (toList!693 lt!23596)) e!39467)))

(declare-fun b!60079 () Bool)

(declare-fun e!39468 () Bool)

(assert (=> b!60079 (= e!39467 e!39468)))

(declare-fun res!33275 () Bool)

(assert (=> b!60079 (=> (not res!33275) (not e!39468))))

(assert (=> b!60079 (= res!33275 (bvslt (_1!1029 (h!2014 (toList!693 lt!23596))) (_1!1029 (h!2014 (t!4770 (toList!693 lt!23596))))))))

(declare-fun b!60080 () Bool)

(assert (=> b!60080 (= e!39468 (isStrictlySorted!279 (t!4770 (toList!693 lt!23596))))))

(assert (= (and d!11767 (not res!33274)) b!60079))

(assert (= (and b!60079 res!33275) b!60080))

(declare-fun m!52543 () Bool)

(assert (=> b!60080 m!52543))

(assert (=> d!11315 d!11767))

(declare-fun d!11769 () Bool)

(declare-fun e!39470 () Bool)

(assert (=> d!11769 e!39470))

(declare-fun res!33276 () Bool)

(assert (=> d!11769 (=> res!33276 e!39470)))

(declare-fun lt!24553 () Bool)

(assert (=> d!11769 (= res!33276 (not lt!24553))))

(declare-fun lt!24555 () Bool)

(assert (=> d!11769 (= lt!24553 lt!24555)))

(declare-fun lt!24554 () Unit!1550)

(declare-fun e!39469 () Unit!1550)

(assert (=> d!11769 (= lt!24554 e!39469)))

(declare-fun c!7786 () Bool)

(assert (=> d!11769 (= c!7786 lt!24555)))

(assert (=> d!11769 (= lt!24555 (containsKey!126 (toList!693 lt!24046) (_1!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(assert (=> d!11769 (= (contains!682 lt!24046 (_1!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!24553)))

(declare-fun b!60081 () Bool)

(declare-fun lt!24556 () Unit!1550)

(assert (=> b!60081 (= e!39469 lt!24556)))

(assert (=> b!60081 (= lt!24556 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 lt!24046) (_1!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(assert (=> b!60081 (isDefined!76 (getValueByKey!122 (toList!693 lt!24046) (_1!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun b!60082 () Bool)

(declare-fun Unit!1607 () Unit!1550)

(assert (=> b!60082 (= e!39469 Unit!1607)))

(declare-fun b!60083 () Bool)

(assert (=> b!60083 (= e!39470 (isDefined!76 (getValueByKey!122 (toList!693 lt!24046) (_1!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(assert (= (and d!11769 c!7786) b!60081))

(assert (= (and d!11769 (not c!7786)) b!60082))

(assert (= (and d!11769 (not res!33276)) b!60083))

(declare-fun m!52545 () Bool)

(assert (=> d!11769 m!52545))

(declare-fun m!52547 () Bool)

(assert (=> b!60081 m!52547))

(assert (=> b!60081 m!51029))

(assert (=> b!60081 m!51029))

(declare-fun m!52549 () Bool)

(assert (=> b!60081 m!52549))

(assert (=> b!60083 m!51029))

(assert (=> b!60083 m!51029))

(assert (=> b!60083 m!52549))

(assert (=> d!11299 d!11769))

(declare-fun c!7787 () Bool)

(declare-fun d!11771 () Bool)

(assert (=> d!11771 (= c!7787 (and ((_ is Cons!1433) lt!24047) (= (_1!1029 (h!2014 lt!24047)) (_1!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(declare-fun e!39471 () Option!128)

(assert (=> d!11771 (= (getValueByKey!122 lt!24047 (_1!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))) e!39471)))

(declare-fun e!39472 () Option!128)

(declare-fun b!60086 () Bool)

(assert (=> b!60086 (= e!39472 (getValueByKey!122 (t!4770 lt!24047) (_1!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun b!60085 () Bool)

(assert (=> b!60085 (= e!39471 e!39472)))

(declare-fun c!7788 () Bool)

(assert (=> b!60085 (= c!7788 (and ((_ is Cons!1433) lt!24047) (not (= (_1!1029 (h!2014 lt!24047)) (_1!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))))))

(declare-fun b!60087 () Bool)

(assert (=> b!60087 (= e!39472 None!126)))

(declare-fun b!60084 () Bool)

(assert (=> b!60084 (= e!39471 (Some!127 (_2!1029 (h!2014 lt!24047))))))

(assert (= (and d!11771 c!7787) b!60084))

(assert (= (and d!11771 (not c!7787)) b!60085))

(assert (= (and b!60085 c!7788) b!60086))

(assert (= (and b!60085 (not c!7788)) b!60087))

(declare-fun m!52551 () Bool)

(assert (=> b!60086 m!52551))

(assert (=> d!11299 d!11771))

(declare-fun d!11773 () Bool)

(assert (=> d!11773 (= (getValueByKey!122 lt!24047 (_1!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))) (Some!127 (_2!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun lt!24557 () Unit!1550)

(assert (=> d!11773 (= lt!24557 (choose!318 lt!24047 (_1!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun e!39473 () Bool)

(assert (=> d!11773 e!39473))

(declare-fun res!33277 () Bool)

(assert (=> d!11773 (=> (not res!33277) (not e!39473))))

(assert (=> d!11773 (= res!33277 (isStrictlySorted!279 lt!24047))))

(assert (=> d!11773 (= (lemmaContainsTupThenGetReturnValue!42 lt!24047 (_1!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!24557)))

(declare-fun b!60088 () Bool)

(declare-fun res!33278 () Bool)

(assert (=> b!60088 (=> (not res!33278) (not e!39473))))

(assert (=> b!60088 (= res!33278 (containsKey!126 lt!24047 (_1!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun b!60089 () Bool)

(assert (=> b!60089 (= e!39473 (contains!684 lt!24047 (tuple2!2037 (_1!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(assert (= (and d!11773 res!33277) b!60088))

(assert (= (and b!60088 res!33278) b!60089))

(assert (=> d!11773 m!51023))

(declare-fun m!52553 () Bool)

(assert (=> d!11773 m!52553))

(declare-fun m!52555 () Bool)

(assert (=> d!11773 m!52555))

(declare-fun m!52557 () Bool)

(assert (=> b!60088 m!52557))

(declare-fun m!52559 () Bool)

(assert (=> b!60089 m!52559))

(assert (=> d!11299 d!11773))

(declare-fun e!39474 () List!1437)

(declare-fun b!60090 () Bool)

(assert (=> b!60090 (= e!39474 (insertStrictlySorted!45 (t!4770 (toList!693 lt!23690)) (_1!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun b!60091 () Bool)

(declare-fun e!39477 () List!1437)

(declare-fun call!4547 () List!1437)

(assert (=> b!60091 (= e!39477 call!4547)))

(declare-fun b!60092 () Bool)

(declare-fun e!39475 () List!1437)

(assert (=> b!60092 (= e!39477 e!39475)))

(declare-fun c!7792 () Bool)

(assert (=> b!60092 (= c!7792 (and ((_ is Cons!1433) (toList!693 lt!23690)) (= (_1!1029 (h!2014 (toList!693 lt!23690))) (_1!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(declare-fun b!60093 () Bool)

(declare-fun call!4548 () List!1437)

(assert (=> b!60093 (= e!39475 call!4548)))

(declare-fun bm!4545 () Bool)

(declare-fun c!7790 () Bool)

(assert (=> bm!4545 (= call!4547 ($colon$colon!59 e!39474 (ite c!7790 (h!2014 (toList!693 lt!23690)) (tuple2!2037 (_1!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))))))

(declare-fun c!7791 () Bool)

(assert (=> bm!4545 (= c!7791 c!7790)))

(declare-fun e!39478 () Bool)

(declare-fun b!60094 () Bool)

(declare-fun lt!24558 () List!1437)

(assert (=> b!60094 (= e!39478 (contains!684 lt!24558 (tuple2!2037 (_1!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(declare-fun b!60095 () Bool)

(declare-fun e!39476 () List!1437)

(declare-fun call!4549 () List!1437)

(assert (=> b!60095 (= e!39476 call!4549)))

(declare-fun c!7789 () Bool)

(declare-fun b!60096 () Bool)

(assert (=> b!60096 (= e!39474 (ite c!7792 (t!4770 (toList!693 lt!23690)) (ite c!7789 (Cons!1433 (h!2014 (toList!693 lt!23690)) (t!4770 (toList!693 lt!23690))) Nil!1434)))))

(declare-fun bm!4544 () Bool)

(assert (=> bm!4544 (= call!4549 call!4548)))

(declare-fun d!11775 () Bool)

(assert (=> d!11775 e!39478))

(declare-fun res!33279 () Bool)

(assert (=> d!11775 (=> (not res!33279) (not e!39478))))

(assert (=> d!11775 (= res!33279 (isStrictlySorted!279 lt!24558))))

(assert (=> d!11775 (= lt!24558 e!39477)))

(assert (=> d!11775 (= c!7790 (and ((_ is Cons!1433) (toList!693 lt!23690)) (bvslt (_1!1029 (h!2014 (toList!693 lt!23690))) (_1!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(assert (=> d!11775 (isStrictlySorted!279 (toList!693 lt!23690))))

(assert (=> d!11775 (= (insertStrictlySorted!45 (toList!693 lt!23690) (_1!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))) (_2!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!24558)))

(declare-fun bm!4546 () Bool)

(assert (=> bm!4546 (= call!4548 call!4547)))

(declare-fun b!60097 () Bool)

(assert (=> b!60097 (= e!39476 call!4549)))

(declare-fun b!60098 () Bool)

(assert (=> b!60098 (= c!7789 (and ((_ is Cons!1433) (toList!693 lt!23690)) (bvsgt (_1!1029 (h!2014 (toList!693 lt!23690))) (_1!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))))))

(assert (=> b!60098 (= e!39475 e!39476)))

(declare-fun b!60099 () Bool)

(declare-fun res!33280 () Bool)

(assert (=> b!60099 (=> (not res!33280) (not e!39478))))

(assert (=> b!60099 (= res!33280 (containsKey!126 lt!24558 (_1!1029 (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(assert (= (and d!11775 c!7790) b!60091))

(assert (= (and d!11775 (not c!7790)) b!60092))

(assert (= (and b!60092 c!7792) b!60093))

(assert (= (and b!60092 (not c!7792)) b!60098))

(assert (= (and b!60098 c!7789) b!60097))

(assert (= (and b!60098 (not c!7789)) b!60095))

(assert (= (or b!60097 b!60095) bm!4544))

(assert (= (or b!60093 bm!4544) bm!4546))

(assert (= (or b!60091 bm!4546) bm!4545))

(assert (= (and bm!4545 c!7791) b!60090))

(assert (= (and bm!4545 (not c!7791)) b!60096))

(assert (= (and d!11775 res!33279) b!60099))

(assert (= (and b!60099 res!33280) b!60094))

(declare-fun m!52561 () Bool)

(assert (=> b!60099 m!52561))

(declare-fun m!52563 () Bool)

(assert (=> d!11775 m!52563))

(declare-fun m!52565 () Bool)

(assert (=> d!11775 m!52565))

(declare-fun m!52567 () Bool)

(assert (=> b!60094 m!52567))

(declare-fun m!52569 () Bool)

(assert (=> b!60090 m!52569))

(declare-fun m!52571 () Bool)

(assert (=> bm!4545 m!52571))

(assert (=> d!11299 d!11775))

(declare-fun d!11777 () Bool)

(declare-fun e!39479 () Bool)

(assert (=> d!11777 e!39479))

(declare-fun res!33281 () Bool)

(assert (=> d!11777 (=> (not res!33281) (not e!39479))))

(declare-fun lt!24561 () ListLongMap!1355)

(assert (=> d!11777 (= res!33281 (contains!682 lt!24561 (_1!1029 (tuple2!2037 lt!24095 (zeroValue!1958 newMap!16)))))))

(declare-fun lt!24562 () List!1437)

(assert (=> d!11777 (= lt!24561 (ListLongMap!1356 lt!24562))))

(declare-fun lt!24559 () Unit!1550)

(declare-fun lt!24560 () Unit!1550)

(assert (=> d!11777 (= lt!24559 lt!24560)))

(assert (=> d!11777 (= (getValueByKey!122 lt!24562 (_1!1029 (tuple2!2037 lt!24095 (zeroValue!1958 newMap!16)))) (Some!127 (_2!1029 (tuple2!2037 lt!24095 (zeroValue!1958 newMap!16)))))))

(assert (=> d!11777 (= lt!24560 (lemmaContainsTupThenGetReturnValue!42 lt!24562 (_1!1029 (tuple2!2037 lt!24095 (zeroValue!1958 newMap!16))) (_2!1029 (tuple2!2037 lt!24095 (zeroValue!1958 newMap!16)))))))

(assert (=> d!11777 (= lt!24562 (insertStrictlySorted!45 (toList!693 lt!24096) (_1!1029 (tuple2!2037 lt!24095 (zeroValue!1958 newMap!16))) (_2!1029 (tuple2!2037 lt!24095 (zeroValue!1958 newMap!16)))))))

(assert (=> d!11777 (= (+!81 lt!24096 (tuple2!2037 lt!24095 (zeroValue!1958 newMap!16))) lt!24561)))

(declare-fun b!60100 () Bool)

(declare-fun res!33282 () Bool)

(assert (=> b!60100 (=> (not res!33282) (not e!39479))))

(assert (=> b!60100 (= res!33282 (= (getValueByKey!122 (toList!693 lt!24561) (_1!1029 (tuple2!2037 lt!24095 (zeroValue!1958 newMap!16)))) (Some!127 (_2!1029 (tuple2!2037 lt!24095 (zeroValue!1958 newMap!16))))))))

(declare-fun b!60101 () Bool)

(assert (=> b!60101 (= e!39479 (contains!684 (toList!693 lt!24561) (tuple2!2037 lt!24095 (zeroValue!1958 newMap!16))))))

(assert (= (and d!11777 res!33281) b!60100))

(assert (= (and b!60100 res!33282) b!60101))

(declare-fun m!52573 () Bool)

(assert (=> d!11777 m!52573))

(declare-fun m!52575 () Bool)

(assert (=> d!11777 m!52575))

(declare-fun m!52577 () Bool)

(assert (=> d!11777 m!52577))

(declare-fun m!52579 () Bool)

(assert (=> d!11777 m!52579))

(declare-fun m!52581 () Bool)

(assert (=> b!60100 m!52581))

(declare-fun m!52583 () Bool)

(assert (=> b!60101 m!52583))

(assert (=> b!59316 d!11777))

(declare-fun d!11779 () Bool)

(assert (=> d!11779 (= (apply!66 (+!81 lt!24101 (tuple2!2037 lt!24083 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))) lt!24085) (apply!66 lt!24101 lt!24085))))

(declare-fun lt!24563 () Unit!1550)

(assert (=> d!11779 (= lt!24563 (choose!313 lt!24101 lt!24083 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)) lt!24085))))

(declare-fun e!39480 () Bool)

(assert (=> d!11779 e!39480))

(declare-fun res!33283 () Bool)

(assert (=> d!11779 (=> (not res!33283) (not e!39480))))

(assert (=> d!11779 (= res!33283 (contains!682 lt!24101 lt!24085))))

(assert (=> d!11779 (= (addApplyDifferent!42 lt!24101 lt!24083 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)) lt!24085) lt!24563)))

(declare-fun b!60102 () Bool)

(assert (=> b!60102 (= e!39480 (not (= lt!24085 lt!24083)))))

(assert (= (and d!11779 res!33283) b!60102))

(assert (=> d!11779 m!51101))

(declare-fun m!52585 () Bool)

(assert (=> d!11779 m!52585))

(declare-fun m!52587 () Bool)

(assert (=> d!11779 m!52587))

(assert (=> d!11779 m!51101))

(assert (=> d!11779 m!51103))

(assert (=> d!11779 m!51109))

(assert (=> b!59316 d!11779))

(assert (=> b!59316 d!11421))

(declare-fun d!11781 () Bool)

(declare-fun e!39482 () Bool)

(assert (=> d!11781 e!39482))

(declare-fun res!33284 () Bool)

(assert (=> d!11781 (=> res!33284 e!39482)))

(declare-fun lt!24564 () Bool)

(assert (=> d!11781 (= res!33284 (not lt!24564))))

(declare-fun lt!24566 () Bool)

(assert (=> d!11781 (= lt!24564 lt!24566)))

(declare-fun lt!24565 () Unit!1550)

(declare-fun e!39481 () Unit!1550)

(assert (=> d!11781 (= lt!24565 e!39481)))

(declare-fun c!7793 () Bool)

(assert (=> d!11781 (= c!7793 lt!24566)))

(assert (=> d!11781 (= lt!24566 (containsKey!126 (toList!693 (+!81 lt!24096 (tuple2!2037 lt!24095 (zeroValue!1958 newMap!16)))) lt!24094))))

(assert (=> d!11781 (= (contains!682 (+!81 lt!24096 (tuple2!2037 lt!24095 (zeroValue!1958 newMap!16))) lt!24094) lt!24564)))

(declare-fun b!60103 () Bool)

(declare-fun lt!24567 () Unit!1550)

(assert (=> b!60103 (= e!39481 lt!24567)))

(assert (=> b!60103 (= lt!24567 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 (+!81 lt!24096 (tuple2!2037 lt!24095 (zeroValue!1958 newMap!16)))) lt!24094))))

(assert (=> b!60103 (isDefined!76 (getValueByKey!122 (toList!693 (+!81 lt!24096 (tuple2!2037 lt!24095 (zeroValue!1958 newMap!16)))) lt!24094))))

(declare-fun b!60104 () Bool)

(declare-fun Unit!1608 () Unit!1550)

(assert (=> b!60104 (= e!39481 Unit!1608)))

(declare-fun b!60105 () Bool)

(assert (=> b!60105 (= e!39482 (isDefined!76 (getValueByKey!122 (toList!693 (+!81 lt!24096 (tuple2!2037 lt!24095 (zeroValue!1958 newMap!16)))) lt!24094)))))

(assert (= (and d!11781 c!7793) b!60103))

(assert (= (and d!11781 (not c!7793)) b!60104))

(assert (= (and d!11781 (not res!33284)) b!60105))

(declare-fun m!52589 () Bool)

(assert (=> d!11781 m!52589))

(declare-fun m!52591 () Bool)

(assert (=> b!60103 m!52591))

(declare-fun m!52593 () Bool)

(assert (=> b!60103 m!52593))

(assert (=> b!60103 m!52593))

(declare-fun m!52595 () Bool)

(assert (=> b!60103 m!52595))

(assert (=> b!60105 m!52593))

(assert (=> b!60105 m!52593))

(assert (=> b!60105 m!52595))

(assert (=> b!59316 d!11781))

(declare-fun d!11783 () Bool)

(assert (=> d!11783 (= (apply!66 (+!81 lt!24101 (tuple2!2037 lt!24083 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))) lt!24085) (get!1076 (getValueByKey!122 (toList!693 (+!81 lt!24101 (tuple2!2037 lt!24083 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))) lt!24085)))))

(declare-fun bs!2608 () Bool)

(assert (= bs!2608 d!11783))

(declare-fun m!52597 () Bool)

(assert (=> bs!2608 m!52597))

(assert (=> bs!2608 m!52597))

(declare-fun m!52599 () Bool)

(assert (=> bs!2608 m!52599))

(assert (=> b!59316 d!11783))

(declare-fun d!11785 () Bool)

(assert (=> d!11785 (= (apply!66 (+!81 lt!24099 (tuple2!2037 lt!24092 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))) lt!24084) (apply!66 lt!24099 lt!24084))))

(declare-fun lt!24568 () Unit!1550)

(assert (=> d!11785 (= lt!24568 (choose!313 lt!24099 lt!24092 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)) lt!24084))))

(declare-fun e!39483 () Bool)

(assert (=> d!11785 e!39483))

(declare-fun res!33285 () Bool)

(assert (=> d!11785 (=> (not res!33285) (not e!39483))))

(assert (=> d!11785 (= res!33285 (contains!682 lt!24099 lt!24084))))

(assert (=> d!11785 (= (addApplyDifferent!42 lt!24099 lt!24092 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)) lt!24084) lt!24568)))

(declare-fun b!60106 () Bool)

(assert (=> b!60106 (= e!39483 (not (= lt!24084 lt!24092)))))

(assert (= (and d!11785 res!33285) b!60106))

(assert (=> d!11785 m!51123))

(declare-fun m!52601 () Bool)

(assert (=> d!11785 m!52601))

(declare-fun m!52603 () Bool)

(assert (=> d!11785 m!52603))

(assert (=> d!11785 m!51123))

(assert (=> d!11785 m!51125))

(assert (=> d!11785 m!51105))

(assert (=> b!59316 d!11785))

(declare-fun d!11787 () Bool)

(declare-fun e!39484 () Bool)

(assert (=> d!11787 e!39484))

(declare-fun res!33286 () Bool)

(assert (=> d!11787 (=> (not res!33286) (not e!39484))))

(declare-fun lt!24571 () ListLongMap!1355)

(assert (=> d!11787 (= res!33286 (contains!682 lt!24571 (_1!1029 (tuple2!2037 lt!24092 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))))))

(declare-fun lt!24572 () List!1437)

(assert (=> d!11787 (= lt!24571 (ListLongMap!1356 lt!24572))))

(declare-fun lt!24569 () Unit!1550)

(declare-fun lt!24570 () Unit!1550)

(assert (=> d!11787 (= lt!24569 lt!24570)))

(assert (=> d!11787 (= (getValueByKey!122 lt!24572 (_1!1029 (tuple2!2037 lt!24092 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))) (Some!127 (_2!1029 (tuple2!2037 lt!24092 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))))))

(assert (=> d!11787 (= lt!24570 (lemmaContainsTupThenGetReturnValue!42 lt!24572 (_1!1029 (tuple2!2037 lt!24092 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))) (_2!1029 (tuple2!2037 lt!24092 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))))))

(assert (=> d!11787 (= lt!24572 (insertStrictlySorted!45 (toList!693 lt!24099) (_1!1029 (tuple2!2037 lt!24092 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))) (_2!1029 (tuple2!2037 lt!24092 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))))))

(assert (=> d!11787 (= (+!81 lt!24099 (tuple2!2037 lt!24092 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))) lt!24571)))

(declare-fun b!60107 () Bool)

(declare-fun res!33287 () Bool)

(assert (=> b!60107 (=> (not res!33287) (not e!39484))))

(assert (=> b!60107 (= res!33287 (= (getValueByKey!122 (toList!693 lt!24571) (_1!1029 (tuple2!2037 lt!24092 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))) (Some!127 (_2!1029 (tuple2!2037 lt!24092 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))))))))

(declare-fun b!60108 () Bool)

(assert (=> b!60108 (= e!39484 (contains!684 (toList!693 lt!24571) (tuple2!2037 lt!24092 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))))))

(assert (= (and d!11787 res!33286) b!60107))

(assert (= (and b!60107 res!33287) b!60108))

(declare-fun m!52605 () Bool)

(assert (=> d!11787 m!52605))

(declare-fun m!52607 () Bool)

(assert (=> d!11787 m!52607))

(declare-fun m!52609 () Bool)

(assert (=> d!11787 m!52609))

(declare-fun m!52611 () Bool)

(assert (=> d!11787 m!52611))

(declare-fun m!52613 () Bool)

(assert (=> b!60107 m!52613))

(declare-fun m!52615 () Bool)

(assert (=> b!60108 m!52615))

(assert (=> b!59316 d!11787))

(declare-fun d!11789 () Bool)

(assert (=> d!11789 (= (apply!66 (+!81 lt!24099 (tuple2!2037 lt!24092 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))) lt!24084) (get!1076 (getValueByKey!122 (toList!693 (+!81 lt!24099 (tuple2!2037 lt!24092 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))) lt!24084)))))

(declare-fun bs!2609 () Bool)

(assert (= bs!2609 d!11789))

(declare-fun m!52617 () Bool)

(assert (=> bs!2609 m!52617))

(assert (=> bs!2609 m!52617))

(declare-fun m!52619 () Bool)

(assert (=> bs!2609 m!52619))

(assert (=> b!59316 d!11789))

(declare-fun d!11791 () Bool)

(declare-fun e!39485 () Bool)

(assert (=> d!11791 e!39485))

(declare-fun res!33288 () Bool)

(assert (=> d!11791 (=> (not res!33288) (not e!39485))))

(declare-fun lt!24575 () ListLongMap!1355)

(assert (=> d!11791 (= res!33288 (contains!682 lt!24575 (_1!1029 (tuple2!2037 lt!24086 (zeroValue!1958 newMap!16)))))))

(declare-fun lt!24576 () List!1437)

(assert (=> d!11791 (= lt!24575 (ListLongMap!1356 lt!24576))))

(declare-fun lt!24573 () Unit!1550)

(declare-fun lt!24574 () Unit!1550)

(assert (=> d!11791 (= lt!24573 lt!24574)))

(assert (=> d!11791 (= (getValueByKey!122 lt!24576 (_1!1029 (tuple2!2037 lt!24086 (zeroValue!1958 newMap!16)))) (Some!127 (_2!1029 (tuple2!2037 lt!24086 (zeroValue!1958 newMap!16)))))))

(assert (=> d!11791 (= lt!24574 (lemmaContainsTupThenGetReturnValue!42 lt!24576 (_1!1029 (tuple2!2037 lt!24086 (zeroValue!1958 newMap!16))) (_2!1029 (tuple2!2037 lt!24086 (zeroValue!1958 newMap!16)))))))

(assert (=> d!11791 (= lt!24576 (insertStrictlySorted!45 (toList!693 lt!24089) (_1!1029 (tuple2!2037 lt!24086 (zeroValue!1958 newMap!16))) (_2!1029 (tuple2!2037 lt!24086 (zeroValue!1958 newMap!16)))))))

(assert (=> d!11791 (= (+!81 lt!24089 (tuple2!2037 lt!24086 (zeroValue!1958 newMap!16))) lt!24575)))

(declare-fun b!60109 () Bool)

(declare-fun res!33289 () Bool)

(assert (=> b!60109 (=> (not res!33289) (not e!39485))))

(assert (=> b!60109 (= res!33289 (= (getValueByKey!122 (toList!693 lt!24575) (_1!1029 (tuple2!2037 lt!24086 (zeroValue!1958 newMap!16)))) (Some!127 (_2!1029 (tuple2!2037 lt!24086 (zeroValue!1958 newMap!16))))))))

(declare-fun b!60110 () Bool)

(assert (=> b!60110 (= e!39485 (contains!684 (toList!693 lt!24575) (tuple2!2037 lt!24086 (zeroValue!1958 newMap!16))))))

(assert (= (and d!11791 res!33288) b!60109))

(assert (= (and b!60109 res!33289) b!60110))

(declare-fun m!52621 () Bool)

(assert (=> d!11791 m!52621))

(declare-fun m!52623 () Bool)

(assert (=> d!11791 m!52623))

(declare-fun m!52625 () Bool)

(assert (=> d!11791 m!52625))

(declare-fun m!52627 () Bool)

(assert (=> d!11791 m!52627))

(declare-fun m!52629 () Bool)

(assert (=> b!60109 m!52629))

(declare-fun m!52631 () Bool)

(assert (=> b!60110 m!52631))

(assert (=> b!59316 d!11791))

(declare-fun d!11793 () Bool)

(assert (=> d!11793 (contains!682 (+!81 lt!24096 (tuple2!2037 lt!24095 (zeroValue!1958 newMap!16))) lt!24094)))

(declare-fun lt!24577 () Unit!1550)

(assert (=> d!11793 (= lt!24577 (choose!314 lt!24096 lt!24095 (zeroValue!1958 newMap!16) lt!24094))))

(assert (=> d!11793 (contains!682 lt!24096 lt!24094)))

(assert (=> d!11793 (= (addStillContains!42 lt!24096 lt!24095 (zeroValue!1958 newMap!16) lt!24094) lt!24577)))

(declare-fun bs!2610 () Bool)

(assert (= bs!2610 d!11793))

(assert (=> bs!2610 m!51117))

(assert (=> bs!2610 m!51117))

(assert (=> bs!2610 m!51119))

(declare-fun m!52633 () Bool)

(assert (=> bs!2610 m!52633))

(declare-fun m!52635 () Bool)

(assert (=> bs!2610 m!52635))

(assert (=> b!59316 d!11793))

(declare-fun d!11795 () Bool)

(assert (=> d!11795 (= (apply!66 lt!24099 lt!24084) (get!1076 (getValueByKey!122 (toList!693 lt!24099) lt!24084)))))

(declare-fun bs!2611 () Bool)

(assert (= bs!2611 d!11795))

(declare-fun m!52637 () Bool)

(assert (=> bs!2611 m!52637))

(assert (=> bs!2611 m!52637))

(declare-fun m!52639 () Bool)

(assert (=> bs!2611 m!52639))

(assert (=> b!59316 d!11795))

(declare-fun d!11797 () Bool)

(declare-fun e!39486 () Bool)

(assert (=> d!11797 e!39486))

(declare-fun res!33290 () Bool)

(assert (=> d!11797 (=> (not res!33290) (not e!39486))))

(declare-fun lt!24580 () ListLongMap!1355)

(assert (=> d!11797 (= res!33290 (contains!682 lt!24580 (_1!1029 (tuple2!2037 lt!24083 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))))))

(declare-fun lt!24581 () List!1437)

(assert (=> d!11797 (= lt!24580 (ListLongMap!1356 lt!24581))))

(declare-fun lt!24578 () Unit!1550)

(declare-fun lt!24579 () Unit!1550)

(assert (=> d!11797 (= lt!24578 lt!24579)))

(assert (=> d!11797 (= (getValueByKey!122 lt!24581 (_1!1029 (tuple2!2037 lt!24083 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))) (Some!127 (_2!1029 (tuple2!2037 lt!24083 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))))))

(assert (=> d!11797 (= lt!24579 (lemmaContainsTupThenGetReturnValue!42 lt!24581 (_1!1029 (tuple2!2037 lt!24083 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))) (_2!1029 (tuple2!2037 lt!24083 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))))))

(assert (=> d!11797 (= lt!24581 (insertStrictlySorted!45 (toList!693 lt!24101) (_1!1029 (tuple2!2037 lt!24083 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))) (_2!1029 (tuple2!2037 lt!24083 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))))))

(assert (=> d!11797 (= (+!81 lt!24101 (tuple2!2037 lt!24083 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))) lt!24580)))

(declare-fun b!60111 () Bool)

(declare-fun res!33291 () Bool)

(assert (=> b!60111 (=> (not res!33291) (not e!39486))))

(assert (=> b!60111 (= res!33291 (= (getValueByKey!122 (toList!693 lt!24580) (_1!1029 (tuple2!2037 lt!24083 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))) (Some!127 (_2!1029 (tuple2!2037 lt!24083 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))))))))

(declare-fun b!60112 () Bool)

(assert (=> b!60112 (= e!39486 (contains!684 (toList!693 lt!24580) (tuple2!2037 lt!24083 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))))))

(assert (= (and d!11797 res!33290) b!60111))

(assert (= (and b!60111 res!33291) b!60112))

(declare-fun m!52641 () Bool)

(assert (=> d!11797 m!52641))

(declare-fun m!52643 () Bool)

(assert (=> d!11797 m!52643))

(declare-fun m!52645 () Bool)

(assert (=> d!11797 m!52645))

(declare-fun m!52647 () Bool)

(assert (=> d!11797 m!52647))

(declare-fun m!52649 () Bool)

(assert (=> b!60111 m!52649))

(declare-fun m!52651 () Bool)

(assert (=> b!60112 m!52651))

(assert (=> b!59316 d!11797))

(declare-fun d!11799 () Bool)

(assert (=> d!11799 (= (apply!66 (+!81 lt!24089 (tuple2!2037 lt!24086 (zeroValue!1958 newMap!16))) lt!24093) (apply!66 lt!24089 lt!24093))))

(declare-fun lt!24582 () Unit!1550)

(assert (=> d!11799 (= lt!24582 (choose!313 lt!24089 lt!24086 (zeroValue!1958 newMap!16) lt!24093))))

(declare-fun e!39487 () Bool)

(assert (=> d!11799 e!39487))

(declare-fun res!33292 () Bool)

(assert (=> d!11799 (=> (not res!33292) (not e!39487))))

(assert (=> d!11799 (= res!33292 (contains!682 lt!24089 lt!24093))))

(assert (=> d!11799 (= (addApplyDifferent!42 lt!24089 lt!24086 (zeroValue!1958 newMap!16) lt!24093) lt!24582)))

(declare-fun b!60113 () Bool)

(assert (=> b!60113 (= e!39487 (not (= lt!24093 lt!24086)))))

(assert (= (and d!11799 res!33292) b!60113))

(assert (=> d!11799 m!51111))

(declare-fun m!52653 () Bool)

(assert (=> d!11799 m!52653))

(declare-fun m!52655 () Bool)

(assert (=> d!11799 m!52655))

(assert (=> d!11799 m!51111))

(assert (=> d!11799 m!51113))

(assert (=> d!11799 m!51131))

(assert (=> b!59316 d!11799))

(declare-fun d!11801 () Bool)

(assert (=> d!11801 (= (apply!66 (+!81 lt!24089 (tuple2!2037 lt!24086 (zeroValue!1958 newMap!16))) lt!24093) (get!1076 (getValueByKey!122 (toList!693 (+!81 lt!24089 (tuple2!2037 lt!24086 (zeroValue!1958 newMap!16)))) lt!24093)))))

(declare-fun bs!2612 () Bool)

(assert (= bs!2612 d!11801))

(declare-fun m!52657 () Bool)

(assert (=> bs!2612 m!52657))

(assert (=> bs!2612 m!52657))

(declare-fun m!52659 () Bool)

(assert (=> bs!2612 m!52659))

(assert (=> b!59316 d!11801))

(declare-fun d!11803 () Bool)

(assert (=> d!11803 (= (apply!66 lt!24101 lt!24085) (get!1076 (getValueByKey!122 (toList!693 lt!24101) lt!24085)))))

(declare-fun bs!2613 () Bool)

(assert (= bs!2613 d!11803))

(declare-fun m!52661 () Bool)

(assert (=> bs!2613 m!52661))

(assert (=> bs!2613 m!52661))

(declare-fun m!52663 () Bool)

(assert (=> bs!2613 m!52663))

(assert (=> b!59316 d!11803))

(declare-fun d!11805 () Bool)

(assert (=> d!11805 (= (apply!66 lt!24089 lt!24093) (get!1076 (getValueByKey!122 (toList!693 lt!24089) lt!24093)))))

(declare-fun bs!2614 () Bool)

(assert (= bs!2614 d!11805))

(declare-fun m!52665 () Bool)

(assert (=> bs!2614 m!52665))

(assert (=> bs!2614 m!52665))

(declare-fun m!52667 () Bool)

(assert (=> bs!2614 m!52667))

(assert (=> b!59316 d!11805))

(declare-fun d!11807 () Bool)

(declare-fun e!39489 () Bool)

(assert (=> d!11807 e!39489))

(declare-fun res!33293 () Bool)

(assert (=> d!11807 (=> res!33293 e!39489)))

(declare-fun lt!24583 () Bool)

(assert (=> d!11807 (= res!33293 (not lt!24583))))

(declare-fun lt!24585 () Bool)

(assert (=> d!11807 (= lt!24583 lt!24585)))

(declare-fun lt!24584 () Unit!1550)

(declare-fun e!39488 () Unit!1550)

(assert (=> d!11807 (= lt!24584 e!39488)))

(declare-fun c!7794 () Bool)

(assert (=> d!11807 (= c!7794 lt!24585)))

(assert (=> d!11807 (= lt!24585 (containsKey!126 (toList!693 lt!23838) (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!11807 (= (contains!682 lt!23838 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)) lt!24583)))

(declare-fun b!60114 () Bool)

(declare-fun lt!24586 () Unit!1550)

(assert (=> b!60114 (= e!39488 lt!24586)))

(assert (=> b!60114 (= lt!24586 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 lt!23838) (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!60114 (isDefined!76 (getValueByKey!122 (toList!693 lt!23838) (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!60115 () Bool)

(declare-fun Unit!1609 () Unit!1550)

(assert (=> b!60115 (= e!39488 Unit!1609)))

(declare-fun b!60116 () Bool)

(assert (=> b!60116 (= e!39489 (isDefined!76 (getValueByKey!122 (toList!693 lt!23838) (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!11807 c!7794) b!60114))

(assert (= (and d!11807 (not c!7794)) b!60115))

(assert (= (and d!11807 (not res!33293)) b!60116))

(assert (=> d!11807 m!50643))

(declare-fun m!52669 () Bool)

(assert (=> d!11807 m!52669))

(assert (=> b!60114 m!50643))

(declare-fun m!52671 () Bool)

(assert (=> b!60114 m!52671))

(assert (=> b!60114 m!50643))

(declare-fun m!52673 () Bool)

(assert (=> b!60114 m!52673))

(assert (=> b!60114 m!52673))

(declare-fun m!52675 () Bool)

(assert (=> b!60114 m!52675))

(assert (=> b!60116 m!50643))

(assert (=> b!60116 m!52673))

(assert (=> b!60116 m!52673))

(assert (=> b!60116 m!52675))

(assert (=> b!59024 d!11807))

(declare-fun lt!24587 () Bool)

(declare-fun d!11809 () Bool)

(assert (=> d!11809 (= lt!24587 (select (content!64 (toList!693 lt!24042)) (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))

(declare-fun e!39490 () Bool)

(assert (=> d!11809 (= lt!24587 e!39490)))

(declare-fun res!33295 () Bool)

(assert (=> d!11809 (=> (not res!33295) (not e!39490))))

(assert (=> d!11809 (= res!33295 ((_ is Cons!1433) (toList!693 lt!24042)))))

(assert (=> d!11809 (= (contains!684 (toList!693 lt!24042) (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) lt!24587)))

(declare-fun b!60117 () Bool)

(declare-fun e!39491 () Bool)

(assert (=> b!60117 (= e!39490 e!39491)))

(declare-fun res!33294 () Bool)

(assert (=> b!60117 (=> res!33294 e!39491)))

(assert (=> b!60117 (= res!33294 (= (h!2014 (toList!693 lt!24042)) (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))

(declare-fun b!60118 () Bool)

(assert (=> b!60118 (= e!39491 (contains!684 (t!4770 (toList!693 lt!24042)) (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992))))))))

(assert (= (and d!11809 res!33295) b!60117))

(assert (= (and b!60117 (not res!33294)) b!60118))

(declare-fun m!52677 () Bool)

(assert (=> d!11809 m!52677))

(declare-fun m!52679 () Bool)

(assert (=> d!11809 m!52679))

(declare-fun m!52681 () Bool)

(assert (=> b!60118 m!52681))

(assert (=> b!59225 d!11809))

(declare-fun d!11811 () Bool)

(assert (=> d!11811 (= (apply!66 lt!24002 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1076 (getValueByKey!122 (toList!693 lt!24002) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2615 () Bool)

(assert (= bs!2615 d!11811))

(assert (=> bs!2615 m!51591))

(assert (=> bs!2615 m!51591))

(declare-fun m!52683 () Bool)

(assert (=> bs!2615 m!52683))

(assert (=> b!59168 d!11811))

(declare-fun d!11813 () Bool)

(assert (=> d!11813 (isDefined!76 (getValueByKey!122 (toList!693 lt!23704) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!24588 () Unit!1550)

(assert (=> d!11813 (= lt!24588 (choose!315 (toList!693 lt!23704) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!39492 () Bool)

(assert (=> d!11813 e!39492))

(declare-fun res!33296 () Bool)

(assert (=> d!11813 (=> (not res!33296) (not e!39492))))

(assert (=> d!11813 (= res!33296 (isStrictlySorted!279 (toList!693 lt!23704)))))

(assert (=> d!11813 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 lt!23704) #b1000000000000000000000000000000000000000000000000000000000000000) lt!24588)))

(declare-fun b!60119 () Bool)

(assert (=> b!60119 (= e!39492 (containsKey!126 (toList!693 lt!23704) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!11813 res!33296) b!60119))

(assert (=> d!11813 m!50873))

(assert (=> d!11813 m!50873))

(assert (=> d!11813 m!51095))

(declare-fun m!52685 () Bool)

(assert (=> d!11813 m!52685))

(assert (=> d!11813 m!51427))

(assert (=> b!60119 m!51091))

(assert (=> b!59299 d!11813))

(assert (=> b!59299 d!11515))

(assert (=> b!59299 d!11517))

(assert (=> b!59018 d!11211))

(assert (=> b!59139 d!11235))

(declare-fun d!11815 () Bool)

(declare-fun e!39493 () Bool)

(assert (=> d!11815 e!39493))

(declare-fun res!33297 () Bool)

(assert (=> d!11815 (=> (not res!33297) (not e!39493))))

(declare-fun lt!24591 () ListLongMap!1355)

(assert (=> d!11815 (= res!33297 (contains!682 lt!24591 (_1!1029 (ite (or c!7565 c!7567) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))))))))

(declare-fun lt!24592 () List!1437)

(assert (=> d!11815 (= lt!24591 (ListLongMap!1356 lt!24592))))

(declare-fun lt!24589 () Unit!1550)

(declare-fun lt!24590 () Unit!1550)

(assert (=> d!11815 (= lt!24589 lt!24590)))

(assert (=> d!11815 (= (getValueByKey!122 lt!24592 (_1!1029 (ite (or c!7565 c!7567) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))))) (Some!127 (_2!1029 (ite (or c!7565 c!7567) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))))))))

(assert (=> d!11815 (= lt!24590 (lemmaContainsTupThenGetReturnValue!42 lt!24592 (_1!1029 (ite (or c!7565 c!7567) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))) (_2!1029 (ite (or c!7565 c!7567) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))))))))

(assert (=> d!11815 (= lt!24592 (insertStrictlySorted!45 (toList!693 (ite c!7565 call!4447 (ite c!7567 call!4450 call!4448))) (_1!1029 (ite (or c!7565 c!7567) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))) (_2!1029 (ite (or c!7565 c!7567) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))))))))

(assert (=> d!11815 (= (+!81 (ite c!7565 call!4447 (ite c!7567 call!4450 call!4448)) (ite (or c!7565 c!7567) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))) lt!24591)))

(declare-fun b!60120 () Bool)

(declare-fun res!33298 () Bool)

(assert (=> b!60120 (=> (not res!33298) (not e!39493))))

(assert (=> b!60120 (= res!33298 (= (getValueByKey!122 (toList!693 lt!24591) (_1!1029 (ite (or c!7565 c!7567) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16)))))) (Some!127 (_2!1029 (ite (or c!7565 c!7567) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))))))))

(declare-fun b!60121 () Bool)

(assert (=> b!60121 (= e!39493 (contains!684 (toList!693 lt!24591) (ite (or c!7565 c!7567) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 newMap!16)) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7466 (ite c!7465 (minValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1958 newMap!16))))))))

(assert (= (and d!11815 res!33297) b!60120))

(assert (= (and b!60120 res!33298) b!60121))

(declare-fun m!52687 () Bool)

(assert (=> d!11815 m!52687))

(declare-fun m!52689 () Bool)

(assert (=> d!11815 m!52689))

(declare-fun m!52691 () Bool)

(assert (=> d!11815 m!52691))

(declare-fun m!52693 () Bool)

(assert (=> d!11815 m!52693))

(declare-fun m!52695 () Bool)

(assert (=> b!60120 m!52695))

(declare-fun m!52697 () Bool)

(assert (=> b!60121 m!52697))

(assert (=> bm!4448 d!11815))

(declare-fun lt!24593 () Bool)

(declare-fun d!11817 () Bool)

(assert (=> d!11817 (= lt!24593 (select (content!64 (toList!693 lt!23979)) (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun e!39494 () Bool)

(assert (=> d!11817 (= lt!24593 e!39494)))

(declare-fun res!33300 () Bool)

(assert (=> d!11817 (=> (not res!33300) (not e!39494))))

(assert (=> d!11817 (= res!33300 ((_ is Cons!1433) (toList!693 lt!23979)))))

(assert (=> d!11817 (= (contains!684 (toList!693 lt!23979) (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))) lt!24593)))

(declare-fun b!60122 () Bool)

(declare-fun e!39495 () Bool)

(assert (=> b!60122 (= e!39494 e!39495)))

(declare-fun res!33299 () Bool)

(assert (=> b!60122 (=> res!33299 e!39495)))

(assert (=> b!60122 (= res!33299 (= (h!2014 (toList!693 lt!23979)) (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(declare-fun b!60123 () Bool)

(assert (=> b!60123 (= e!39495 (contains!684 (t!4770 (toList!693 lt!23979)) (ite (or c!7428 c!7430) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1958 (v!2377 (underlying!223 thiss!992)))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 (v!2377 (underlying!223 thiss!992)))))))))

(assert (= (and d!11817 res!33300) b!60122))

(assert (= (and b!60122 (not res!33299)) b!60123))

(declare-fun m!52699 () Bool)

(assert (=> d!11817 m!52699))

(declare-fun m!52701 () Bool)

(assert (=> d!11817 m!52701))

(declare-fun m!52703 () Bool)

(assert (=> b!60123 m!52703))

(assert (=> b!59155 d!11817))

(assert (=> d!11279 d!11295))

(declare-fun d!11819 () Bool)

(declare-fun e!39497 () Bool)

(assert (=> d!11819 e!39497))

(declare-fun res!33301 () Bool)

(assert (=> d!11819 (=> res!33301 e!39497)))

(declare-fun lt!24594 () Bool)

(assert (=> d!11819 (= res!33301 (not lt!24594))))

(declare-fun lt!24596 () Bool)

(assert (=> d!11819 (= lt!24594 lt!24596)))

(declare-fun lt!24595 () Unit!1550)

(declare-fun e!39496 () Unit!1550)

(assert (=> d!11819 (= lt!24595 e!39496)))

(declare-fun c!7795 () Bool)

(assert (=> d!11819 (= c!7795 lt!24596)))

(assert (=> d!11819 (= lt!24596 (containsKey!126 (toList!693 lt!23700) lt!23685))))

(assert (=> d!11819 (= (contains!682 lt!23700 lt!23685) lt!24594)))

(declare-fun b!60124 () Bool)

(declare-fun lt!24597 () Unit!1550)

(assert (=> b!60124 (= e!39496 lt!24597)))

(assert (=> b!60124 (= lt!24597 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 lt!23700) lt!23685))))

(assert (=> b!60124 (isDefined!76 (getValueByKey!122 (toList!693 lt!23700) lt!23685))))

(declare-fun b!60125 () Bool)

(declare-fun Unit!1610 () Unit!1550)

(assert (=> b!60125 (= e!39496 Unit!1610)))

(declare-fun b!60126 () Bool)

(assert (=> b!60126 (= e!39497 (isDefined!76 (getValueByKey!122 (toList!693 lt!23700) lt!23685)))))

(assert (= (and d!11819 c!7795) b!60124))

(assert (= (and d!11819 (not c!7795)) b!60125))

(assert (= (and d!11819 (not res!33301)) b!60126))

(declare-fun m!52705 () Bool)

(assert (=> d!11819 m!52705))

(declare-fun m!52707 () Bool)

(assert (=> b!60124 m!52707))

(assert (=> b!60124 m!51017))

(assert (=> b!60124 m!51017))

(declare-fun m!52709 () Bool)

(assert (=> b!60124 m!52709))

(assert (=> b!60126 m!51017))

(assert (=> b!60126 m!51017))

(assert (=> b!60126 m!52709))

(assert (=> d!11279 d!11819))

(declare-fun d!11821 () Bool)

(assert (=> d!11821 (= (apply!66 (+!81 lt!23700 (tuple2!2037 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992))))) lt!23685) (apply!66 lt!23700 lt!23685))))

(assert (=> d!11821 true))

(declare-fun _$34!764 () Unit!1550)

(assert (=> d!11821 (= (choose!313 lt!23700 lt!23693 (minValue!1958 (v!2377 (underlying!223 thiss!992))) lt!23685) _$34!764)))

(declare-fun bs!2616 () Bool)

(assert (= bs!2616 d!11821))

(assert (=> bs!2616 m!50513))

(assert (=> bs!2616 m!50513))

(assert (=> bs!2616 m!50515))

(assert (=> bs!2616 m!50495))

(assert (=> d!11279 d!11821))

(assert (=> d!11279 d!11297))

(assert (=> d!11279 d!11303))

(declare-fun d!11823 () Bool)

(declare-fun e!39498 () Bool)

(assert (=> d!11823 e!39498))

(declare-fun res!33302 () Bool)

(assert (=> d!11823 (=> (not res!33302) (not e!39498))))

(declare-fun lt!24600 () ListLongMap!1355)

(assert (=> d!11823 (= res!33302 (contains!682 lt!24600 (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))

(declare-fun lt!24601 () List!1437)

(assert (=> d!11823 (= lt!24600 (ListLongMap!1356 lt!24601))))

(declare-fun lt!24598 () Unit!1550)

(declare-fun lt!24599 () Unit!1550)

(assert (=> d!11823 (= lt!24598 lt!24599)))

(assert (=> d!11823 (= (getValueByKey!122 lt!24601 (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))) (Some!127 (_2!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))

(assert (=> d!11823 (= lt!24599 (lemmaContainsTupThenGetReturnValue!42 lt!24601 (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))) (_2!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))

(assert (=> d!11823 (= lt!24601 (insertStrictlySorted!45 (toList!693 call!4432) (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))) (_2!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))

(assert (=> d!11823 (= (+!81 call!4432 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))) lt!24600)))

(declare-fun b!60127 () Bool)

(declare-fun res!33303 () Bool)

(assert (=> b!60127 (=> (not res!33303) (not e!39498))))

(assert (=> b!60127 (= res!33303 (= (getValueByKey!122 (toList!693 lt!24600) (_1!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))) (Some!127 (_2!1029 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))))

(declare-fun b!60128 () Bool)

(assert (=> b!60128 (= e!39498 (contains!684 (toList!693 lt!24600) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))

(assert (= (and d!11823 res!33302) b!60127))

(assert (= (and b!60127 res!33303) b!60128))

(declare-fun m!52711 () Bool)

(assert (=> d!11823 m!52711))

(declare-fun m!52713 () Bool)

(assert (=> d!11823 m!52713))

(declare-fun m!52715 () Bool)

(assert (=> d!11823 m!52715))

(declare-fun m!52717 () Bool)

(assert (=> d!11823 m!52717))

(declare-fun m!52719 () Bool)

(assert (=> b!60127 m!52719))

(declare-fun m!52721 () Bool)

(assert (=> b!60128 m!52721))

(assert (=> b!59166 d!11823))

(declare-fun d!11825 () Bool)

(declare-fun res!33304 () Bool)

(declare-fun e!39499 () Bool)

(assert (=> d!11825 (=> res!33304 e!39499)))

(assert (=> d!11825 (= res!33304 (and ((_ is Cons!1433) (toList!693 call!4382)) (= (_1!1029 (h!2014 (toList!693 call!4382))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355))))))

(assert (=> d!11825 (= (containsKey!126 (toList!693 call!4382) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) e!39499)))

(declare-fun b!60129 () Bool)

(declare-fun e!39500 () Bool)

(assert (=> b!60129 (= e!39499 e!39500)))

(declare-fun res!33305 () Bool)

(assert (=> b!60129 (=> (not res!33305) (not e!39500))))

(assert (=> b!60129 (= res!33305 (and (or (not ((_ is Cons!1433) (toList!693 call!4382))) (bvsle (_1!1029 (h!2014 (toList!693 call!4382))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355))) ((_ is Cons!1433) (toList!693 call!4382)) (bvslt (_1!1029 (h!2014 (toList!693 call!4382))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355))))))

(declare-fun b!60130 () Bool)

(assert (=> b!60130 (= e!39500 (containsKey!126 (t!4770 (toList!693 call!4382)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(assert (= (and d!11825 (not res!33304)) b!60129))

(assert (= (and b!60129 res!33305) b!60130))

(assert (=> b!60130 m!50353))

(declare-fun m!52723 () Bool)

(assert (=> b!60130 m!52723))

(assert (=> d!11257 d!11825))

(declare-fun b!60134 () Bool)

(declare-fun e!39501 () Bool)

(assert (=> b!60134 (= e!39501 (and (bvsge (extraKeys!1929 (v!2377 (underlying!223 thiss!992))) #b00000000000000000000000000000000) (bvsle (extraKeys!1929 (v!2377 (underlying!223 thiss!992))) #b00000000000000000000000000000011) (bvsge (_vacant!357 (v!2377 (underlying!223 thiss!992))) #b00000000000000000000000000000000)))))

(declare-fun d!11827 () Bool)

(declare-fun res!33309 () Bool)

(assert (=> d!11827 (=> (not res!33309) (not e!39501))))

(assert (=> d!11827 (= res!33309 (validMask!0 (mask!5925 (v!2377 (underlying!223 thiss!992)))))))

(assert (=> d!11827 (= (simpleValid!42 (v!2377 (underlying!223 thiss!992))) e!39501)))

(declare-fun b!60131 () Bool)

(declare-fun res!33306 () Bool)

(assert (=> b!60131 (=> (not res!33306) (not e!39501))))

(assert (=> b!60131 (= res!33306 (and (= (size!2000 (_values!2025 (v!2377 (underlying!223 thiss!992)))) (bvadd (mask!5925 (v!2377 (underlying!223 thiss!992))) #b00000000000000000000000000000001)) (= (size!1999 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) (size!2000 (_values!2025 (v!2377 (underlying!223 thiss!992))))) (bvsge (_size!357 (v!2377 (underlying!223 thiss!992))) #b00000000000000000000000000000000) (bvsle (_size!357 (v!2377 (underlying!223 thiss!992))) (bvadd (mask!5925 (v!2377 (underlying!223 thiss!992))) #b00000000000000000000000000000001))))))

(declare-fun b!60132 () Bool)

(declare-fun res!33307 () Bool)

(assert (=> b!60132 (=> (not res!33307) (not e!39501))))

(assert (=> b!60132 (= res!33307 (bvsge (size!2005 (v!2377 (underlying!223 thiss!992))) (_size!357 (v!2377 (underlying!223 thiss!992)))))))

(declare-fun b!60133 () Bool)

(declare-fun res!33308 () Bool)

(assert (=> b!60133 (=> (not res!33308) (not e!39501))))

(assert (=> b!60133 (= res!33308 (= (size!2005 (v!2377 (underlying!223 thiss!992))) (bvadd (_size!357 (v!2377 (underlying!223 thiss!992))) (bvsdiv (bvadd (extraKeys!1929 (v!2377 (underlying!223 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(assert (= (and d!11827 res!33309) b!60131))

(assert (= (and b!60131 res!33306) b!60132))

(assert (= (and b!60132 res!33307) b!60133))

(assert (= (and b!60133 res!33308) b!60134))

(assert (=> d!11827 m!50383))

(declare-fun m!52725 () Bool)

(assert (=> b!60132 m!52725))

(assert (=> b!60133 m!52725))

(assert (=> d!11259 d!11827))

(declare-fun d!11829 () Bool)

(assert (=> d!11829 (= (apply!66 lt!24103 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1076 (getValueByKey!122 (toList!693 lt!24103) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2617 () Bool)

(assert (= bs!2617 d!11829))

(assert (=> bs!2617 m!51787))

(assert (=> bs!2617 m!51787))

(declare-fun m!52727 () Bool)

(assert (=> bs!2617 m!52727))

(assert (=> b!59310 d!11829))

(declare-fun d!11831 () Bool)

(assert (=> d!11831 (= (apply!66 lt!23838 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)) (get!1076 (getValueByKey!122 (toList!693 lt!23838) (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2618 () Bool)

(assert (= bs!2618 d!11831))

(assert (=> bs!2618 m!50643))

(assert (=> bs!2618 m!52673))

(assert (=> bs!2618 m!52673))

(declare-fun m!52729 () Bool)

(assert (=> bs!2618 m!52729))

(assert (=> b!59033 d!11831))

(declare-fun d!11833 () Bool)

(declare-fun c!7796 () Bool)

(assert (=> d!11833 (= c!7796 ((_ is ValueCellFull!854) (select (arr!1769 (_values!2025 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!39502 () V!2841)

(assert (=> d!11833 (= (get!1073 (select (arr!1769 (_values!2025 newMap!16)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!39502)))

(declare-fun b!60135 () Bool)

(assert (=> b!60135 (= e!39502 (get!1074 (select (arr!1769 (_values!2025 newMap!16)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!60136 () Bool)

(assert (=> b!60136 (= e!39502 (get!1075 (select (arr!1769 (_values!2025 newMap!16)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11833 c!7796) b!60135))

(assert (= (and d!11833 (not c!7796)) b!60136))

(assert (=> b!60135 m!50699))

(assert (=> b!60135 m!50697))

(declare-fun m!52731 () Bool)

(assert (=> b!60135 m!52731))

(assert (=> b!60136 m!50699))

(assert (=> b!60136 m!50697))

(declare-fun m!52733 () Bool)

(assert (=> b!60136 m!52733))

(assert (=> b!59033 d!11833))

(assert (=> b!59230 d!11587))

(assert (=> b!59230 d!11589))

(declare-fun d!11835 () Bool)

(declare-fun res!33310 () Bool)

(declare-fun e!39503 () Bool)

(assert (=> d!11835 (=> res!33310 e!39503)))

(assert (=> d!11835 (= res!33310 (and ((_ is Cons!1433) (toList!693 e!38780)) (= (_1!1029 (h!2014 (toList!693 e!38780))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355))))))

(assert (=> d!11835 (= (containsKey!126 (toList!693 e!38780) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) e!39503)))

(declare-fun b!60137 () Bool)

(declare-fun e!39504 () Bool)

(assert (=> b!60137 (= e!39503 e!39504)))

(declare-fun res!33311 () Bool)

(assert (=> b!60137 (=> (not res!33311) (not e!39504))))

(assert (=> b!60137 (= res!33311 (and (or (not ((_ is Cons!1433) (toList!693 e!38780))) (bvsle (_1!1029 (h!2014 (toList!693 e!38780))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355))) ((_ is Cons!1433) (toList!693 e!38780)) (bvslt (_1!1029 (h!2014 (toList!693 e!38780))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355))))))

(declare-fun b!60138 () Bool)

(assert (=> b!60138 (= e!39504 (containsKey!126 (t!4770 (toList!693 e!38780)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(assert (= (and d!11835 (not res!33310)) b!60137))

(assert (= (and b!60137 res!33311) b!60138))

(assert (=> b!60138 m!50353))

(declare-fun m!52735 () Bool)

(assert (=> b!60138 m!52735))

(assert (=> d!11217 d!11835))

(declare-fun lt!24602 () Bool)

(declare-fun d!11837 () Bool)

(assert (=> d!11837 (= lt!24602 (select (content!64 (toList!693 lt!24106)) (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!39505 () Bool)

(assert (=> d!11837 (= lt!24602 e!39505)))

(declare-fun res!33313 () Bool)

(assert (=> d!11837 (=> (not res!33313) (not e!39505))))

(assert (=> d!11837 (= res!33313 ((_ is Cons!1433) (toList!693 lt!24106)))))

(assert (=> d!11837 (= (contains!684 (toList!693 lt!24106) (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!24602)))

(declare-fun b!60139 () Bool)

(declare-fun e!39506 () Bool)

(assert (=> b!60139 (= e!39505 e!39506)))

(declare-fun res!33312 () Bool)

(assert (=> b!60139 (=> res!33312 e!39506)))

(assert (=> b!60139 (= res!33312 (= (h!2014 (toList!693 lt!24106)) (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!60140 () Bool)

(assert (=> b!60140 (= e!39506 (contains!684 (t!4770 (toList!693 lt!24106)) (ite c!7466 (ite c!7465 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!11837 res!33313) b!60139))

(assert (= (and b!60139 (not res!33312)) b!60140))

(declare-fun m!52737 () Bool)

(assert (=> d!11837 m!52737))

(declare-fun m!52739 () Bool)

(assert (=> d!11837 m!52739))

(declare-fun m!52741 () Bool)

(assert (=> b!60140 m!52741))

(assert (=> b!59324 d!11837))

(declare-fun d!11839 () Bool)

(declare-fun isEmpty!299 (List!1437) Bool)

(assert (=> d!11839 (= (isEmpty!297 lt!24020) (isEmpty!299 (toList!693 lt!24020)))))

(declare-fun bs!2619 () Bool)

(assert (= bs!2619 d!11839))

(declare-fun m!52743 () Bool)

(assert (=> bs!2619 m!52743))

(assert (=> b!59209 d!11839))

(declare-fun d!11841 () Bool)

(declare-fun c!7797 () Bool)

(assert (=> d!11841 (= c!7797 (and ((_ is Cons!1433) (toList!693 lt!24058)) (= (_1!1029 (h!2014 (toList!693 lt!24058))) (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!39507 () Option!128)

(assert (=> d!11841 (= (getValueByKey!122 (toList!693 lt!24058) (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!39507)))

(declare-fun b!60143 () Bool)

(declare-fun e!39508 () Option!128)

(assert (=> b!60143 (= e!39508 (getValueByKey!122 (t!4770 (toList!693 lt!24058)) (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!60142 () Bool)

(assert (=> b!60142 (= e!39507 e!39508)))

(declare-fun c!7798 () Bool)

(assert (=> b!60142 (= c!7798 (and ((_ is Cons!1433) (toList!693 lt!24058)) (not (= (_1!1029 (h!2014 (toList!693 lt!24058))) (_1!1029 (tuple2!2037 (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!60144 () Bool)

(assert (=> b!60144 (= e!39508 None!126)))

(declare-fun b!60141 () Bool)

(assert (=> b!60141 (= e!39507 (Some!127 (_2!1029 (h!2014 (toList!693 lt!24058)))))))

(assert (= (and d!11841 c!7797) b!60141))

(assert (= (and d!11841 (not c!7797)) b!60142))

(assert (= (and b!60142 c!7798) b!60143))

(assert (= (and b!60142 (not c!7798)) b!60144))

(declare-fun m!52745 () Bool)

(assert (=> b!60143 m!52745))

(assert (=> b!59246 d!11841))

(declare-fun d!11843 () Bool)

(declare-fun e!39509 () Bool)

(assert (=> d!11843 e!39509))

(declare-fun res!33314 () Bool)

(assert (=> d!11843 (=> (not res!33314) (not e!39509))))

(declare-fun lt!24605 () ListLongMap!1355)

(assert (=> d!11843 (= res!33314 (contains!682 lt!24605 (_1!1029 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!24606 () List!1437)

(assert (=> d!11843 (= lt!24605 (ListLongMap!1356 lt!24606))))

(declare-fun lt!24603 () Unit!1550)

(declare-fun lt!24604 () Unit!1550)

(assert (=> d!11843 (= lt!24603 lt!24604)))

(assert (=> d!11843 (= (getValueByKey!122 lt!24606 (_1!1029 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!127 (_2!1029 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11843 (= lt!24604 (lemmaContainsTupThenGetReturnValue!42 lt!24606 (_1!1029 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11843 (= lt!24606 (insertStrictlySorted!45 (toList!693 (getCurrentListMap!389 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16))) (_1!1029 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1029 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11843 (= (+!81 (getCurrentListMap!389 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!24605)))

(declare-fun b!60145 () Bool)

(declare-fun res!33315 () Bool)

(assert (=> b!60145 (=> (not res!33315) (not e!39509))))

(assert (=> b!60145 (= res!33315 (= (getValueByKey!122 (toList!693 lt!24605) (_1!1029 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!127 (_2!1029 (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!60146 () Bool)

(assert (=> b!60146 (= e!39509 (contains!684 (toList!693 lt!24605) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!11843 res!33314) b!60145))

(assert (= (and b!60145 res!33315) b!60146))

(declare-fun m!52747 () Bool)

(assert (=> d!11843 m!52747))

(declare-fun m!52749 () Bool)

(assert (=> d!11843 m!52749))

(declare-fun m!52751 () Bool)

(assert (=> d!11843 m!52751))

(declare-fun m!52753 () Bool)

(assert (=> d!11843 m!52753))

(declare-fun m!52755 () Bool)

(assert (=> b!60145 m!52755))

(declare-fun m!52757 () Bool)

(assert (=> b!60146 m!52757))

(assert (=> d!11227 d!11843))

(assert (=> d!11227 d!11231))

(assert (=> d!11227 d!11347))

(declare-fun d!11845 () Bool)

(assert (=> d!11845 (= (+!81 (getCurrentListMap!389 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) (zeroValue!1958 newMap!16) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!389 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) lt!23781 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(assert (=> d!11845 true))

(declare-fun _$7!44 () Unit!1550)

(assert (=> d!11845 (= (choose!309 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) (extraKeys!1929 newMap!16) lt!23781 (zeroValue!1958 newMap!16) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1958 newMap!16) (defaultEntry!2042 newMap!16)) _$7!44)))

(declare-fun bs!2620 () Bool)

(assert (= bs!2620 d!11845))

(assert (=> bs!2620 m!50481))

(assert (=> bs!2620 m!50481))

(assert (=> bs!2620 m!50651))

(assert (=> bs!2620 m!50369))

(assert (=> bs!2620 m!50653))

(assert (=> d!11227 d!11845))

(declare-fun b!60147 () Bool)

(declare-fun e!39516 () Bool)

(assert (=> b!60147 (= e!39516 (validKeyInArray!0 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!4547 () Bool)

(declare-fun call!4556 () Bool)

(declare-fun lt!24628 () ListLongMap!1355)

(assert (=> bm!4547 (= call!4556 (contains!682 lt!24628 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60148 () Bool)

(declare-fun e!39514 () Unit!1550)

(declare-fun Unit!1611 () Unit!1550)

(assert (=> b!60148 (= e!39514 Unit!1611)))

(declare-fun b!60149 () Bool)

(declare-fun res!33319 () Bool)

(declare-fun e!39517 () Bool)

(assert (=> b!60149 (=> (not res!33319) (not e!39517))))

(declare-fun e!39515 () Bool)

(assert (=> b!60149 (= res!33319 e!39515)))

(declare-fun c!7799 () Bool)

(assert (=> b!60149 (= c!7799 (not (= (bvand lt!23781 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!60150 () Bool)

(declare-fun e!39511 () ListLongMap!1355)

(declare-fun call!4553 () ListLongMap!1355)

(assert (=> b!60150 (= e!39511 call!4553)))

(declare-fun bm!4548 () Bool)

(declare-fun call!4552 () ListLongMap!1355)

(declare-fun call!4554 () ListLongMap!1355)

(assert (=> bm!4548 (= call!4552 call!4554)))

(declare-fun b!60152 () Bool)

(declare-fun e!39522 () Bool)

(declare-fun e!39510 () Bool)

(assert (=> b!60152 (= e!39522 e!39510)))

(declare-fun res!33322 () Bool)

(declare-fun call!4550 () Bool)

(assert (=> b!60152 (= res!33322 call!4550)))

(assert (=> b!60152 (=> (not res!33322) (not e!39510))))

(declare-fun b!60153 () Bool)

(assert (=> b!60153 (= e!39517 e!39522)))

(declare-fun c!7800 () Bool)

(assert (=> b!60153 (= c!7800 (not (= (bvand lt!23781 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4549 () Bool)

(assert (=> bm!4549 (= call!4550 (contains!682 lt!24628 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4550 () Bool)

(declare-fun call!4555 () ListLongMap!1355)

(assert (=> bm!4550 (= call!4553 call!4555)))

(declare-fun b!60154 () Bool)

(declare-fun c!7803 () Bool)

(assert (=> b!60154 (= c!7803 (and (not (= (bvand lt!23781 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!23781 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!39512 () ListLongMap!1355)

(assert (=> b!60154 (= e!39511 e!39512)))

(declare-fun b!60155 () Bool)

(declare-fun e!39520 () Bool)

(assert (=> b!60155 (= e!39520 (= (apply!66 lt!24628 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!60156 () Bool)

(declare-fun res!33316 () Bool)

(assert (=> b!60156 (=> (not res!33316) (not e!39517))))

(declare-fun e!39521 () Bool)

(assert (=> b!60156 (= res!33316 e!39521)))

(declare-fun res!33318 () Bool)

(assert (=> b!60156 (=> res!33318 e!39521)))

(assert (=> b!60156 (= res!33318 (not e!39516))))

(declare-fun res!33324 () Bool)

(assert (=> b!60156 (=> (not res!33324) (not e!39516))))

(assert (=> b!60156 (= res!33324 (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(declare-fun b!60157 () Bool)

(declare-fun e!39519 () ListLongMap!1355)

(assert (=> b!60157 (= e!39519 (+!81 call!4555 (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16))))))

(declare-fun bm!4551 () Bool)

(declare-fun call!4551 () ListLongMap!1355)

(assert (=> bm!4551 (= call!4551 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) lt!23781 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun bm!4552 () Bool)

(declare-fun c!7804 () Bool)

(declare-fun c!7802 () Bool)

(assert (=> bm!4552 (= call!4555 (+!81 (ite c!7802 call!4551 (ite c!7804 call!4554 call!4552)) (ite (or c!7802 c!7804) (tuple2!2037 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2037 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1958 newMap!16)))))))

(declare-fun b!60158 () Bool)

(assert (=> b!60158 (= e!39522 (not call!4550))))

(declare-fun b!60159 () Bool)

(assert (=> b!60159 (= e!39510 (= (apply!66 lt!24628 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1958 newMap!16)))))

(declare-fun b!60160 () Bool)

(declare-fun e!39513 () Bool)

(assert (=> b!60160 (= e!39513 (= (apply!66 lt!24628 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)) (get!1073 (select (arr!1769 (_values!2025 newMap!16)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2042 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!60160 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2000 (_values!2025 newMap!16))))))

(assert (=> b!60160 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(declare-fun b!60151 () Bool)

(assert (=> b!60151 (= e!39521 e!39513)))

(declare-fun res!33321 () Bool)

(assert (=> b!60151 (=> (not res!33321) (not e!39513))))

(assert (=> b!60151 (= res!33321 (contains!682 lt!24628 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!60151 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(declare-fun d!11847 () Bool)

(assert (=> d!11847 e!39517))

(declare-fun res!33320 () Bool)

(assert (=> d!11847 (=> (not res!33320) (not e!39517))))

(assert (=> d!11847 (= res!33320 (or (bvsge #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))))

(declare-fun lt!24622 () ListLongMap!1355)

(assert (=> d!11847 (= lt!24628 lt!24622)))

(declare-fun lt!24627 () Unit!1550)

(assert (=> d!11847 (= lt!24627 e!39514)))

(declare-fun c!7801 () Bool)

(declare-fun e!39518 () Bool)

(assert (=> d!11847 (= c!7801 e!39518)))

(declare-fun res!33323 () Bool)

(assert (=> d!11847 (=> (not res!33323) (not e!39518))))

(assert (=> d!11847 (= res!33323 (bvslt #b00000000000000000000000000000000 (size!1999 (_keys!3665 newMap!16))))))

(assert (=> d!11847 (= lt!24622 e!39519)))

(assert (=> d!11847 (= c!7802 (and (not (= (bvand lt!23781 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!23781 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11847 (validMask!0 (mask!5925 newMap!16))))

(assert (=> d!11847 (= (getCurrentListMap!389 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) lt!23781 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)) lt!24628)))

(declare-fun b!60161 () Bool)

(declare-fun lt!24616 () Unit!1550)

(assert (=> b!60161 (= e!39514 lt!24616)))

(declare-fun lt!24621 () ListLongMap!1355)

(assert (=> b!60161 (= lt!24621 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) lt!23781 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24620 () (_ BitVec 64))

(assert (=> b!60161 (= lt!24620 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24619 () (_ BitVec 64))

(assert (=> b!60161 (= lt!24619 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24612 () Unit!1550)

(assert (=> b!60161 (= lt!24612 (addStillContains!42 lt!24621 lt!24620 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!24619))))

(assert (=> b!60161 (contains!682 (+!81 lt!24621 (tuple2!2037 lt!24620 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!24619)))

(declare-fun lt!24623 () Unit!1550)

(assert (=> b!60161 (= lt!24623 lt!24612)))

(declare-fun lt!24626 () ListLongMap!1355)

(assert (=> b!60161 (= lt!24626 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) lt!23781 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24608 () (_ BitVec 64))

(assert (=> b!60161 (= lt!24608 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24610 () (_ BitVec 64))

(assert (=> b!60161 (= lt!24610 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24607 () Unit!1550)

(assert (=> b!60161 (= lt!24607 (addApplyDifferent!42 lt!24626 lt!24608 (minValue!1958 newMap!16) lt!24610))))

(assert (=> b!60161 (= (apply!66 (+!81 lt!24626 (tuple2!2037 lt!24608 (minValue!1958 newMap!16))) lt!24610) (apply!66 lt!24626 lt!24610))))

(declare-fun lt!24615 () Unit!1550)

(assert (=> b!60161 (= lt!24615 lt!24607)))

(declare-fun lt!24614 () ListLongMap!1355)

(assert (=> b!60161 (= lt!24614 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) lt!23781 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24611 () (_ BitVec 64))

(assert (=> b!60161 (= lt!24611 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24618 () (_ BitVec 64))

(assert (=> b!60161 (= lt!24618 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!24613 () Unit!1550)

(assert (=> b!60161 (= lt!24613 (addApplyDifferent!42 lt!24614 lt!24611 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!24618))))

(assert (=> b!60161 (= (apply!66 (+!81 lt!24614 (tuple2!2037 lt!24611 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!24618) (apply!66 lt!24614 lt!24618))))

(declare-fun lt!24625 () Unit!1550)

(assert (=> b!60161 (= lt!24625 lt!24613)))

(declare-fun lt!24624 () ListLongMap!1355)

(assert (=> b!60161 (= lt!24624 (getCurrentListMapNoExtraKeys!44 (_keys!3665 newMap!16) (_values!2025 newMap!16) (mask!5925 newMap!16) lt!23781 (get!1073 (select (arr!1769 (_values!2025 (v!2377 (underlying!223 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1958 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2042 newMap!16)))))

(declare-fun lt!24617 () (_ BitVec 64))

(assert (=> b!60161 (= lt!24617 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24609 () (_ BitVec 64))

(assert (=> b!60161 (= lt!24609 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!60161 (= lt!24616 (addApplyDifferent!42 lt!24624 lt!24617 (minValue!1958 newMap!16) lt!24609))))

(assert (=> b!60161 (= (apply!66 (+!81 lt!24624 (tuple2!2037 lt!24617 (minValue!1958 newMap!16))) lt!24609) (apply!66 lt!24624 lt!24609))))

(declare-fun b!60162 () Bool)

(assert (=> b!60162 (= e!39518 (validKeyInArray!0 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!60163 () Bool)

(assert (=> b!60163 (= e!39515 e!39520)))

(declare-fun res!33317 () Bool)

(assert (=> b!60163 (= res!33317 call!4556)))

(assert (=> b!60163 (=> (not res!33317) (not e!39520))))

(declare-fun b!60164 () Bool)

(assert (=> b!60164 (= e!39519 e!39511)))

(assert (=> b!60164 (= c!7804 (and (not (= (bvand lt!23781 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!23781 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!60165 () Bool)

(assert (=> b!60165 (= e!39512 call!4553)))

(declare-fun b!60166 () Bool)

(assert (=> b!60166 (= e!39515 (not call!4556))))

(declare-fun b!60167 () Bool)

(assert (=> b!60167 (= e!39512 call!4552)))

(declare-fun bm!4553 () Bool)

(assert (=> bm!4553 (= call!4554 call!4551)))

(assert (= (and d!11847 c!7802) b!60157))

(assert (= (and d!11847 (not c!7802)) b!60164))

(assert (= (and b!60164 c!7804) b!60150))

(assert (= (and b!60164 (not c!7804)) b!60154))

(assert (= (and b!60154 c!7803) b!60165))

(assert (= (and b!60154 (not c!7803)) b!60167))

(assert (= (or b!60165 b!60167) bm!4548))

(assert (= (or b!60150 bm!4548) bm!4553))

(assert (= (or b!60150 b!60165) bm!4550))

(assert (= (or b!60157 bm!4553) bm!4551))

(assert (= (or b!60157 bm!4550) bm!4552))

(assert (= (and d!11847 res!33323) b!60162))

(assert (= (and d!11847 c!7801) b!60161))

(assert (= (and d!11847 (not c!7801)) b!60148))

(assert (= (and d!11847 res!33320) b!60156))

(assert (= (and b!60156 res!33324) b!60147))

(assert (= (and b!60156 (not res!33318)) b!60151))

(assert (= (and b!60151 res!33321) b!60160))

(assert (= (and b!60156 res!33316) b!60149))

(assert (= (and b!60149 c!7799) b!60163))

(assert (= (and b!60149 (not c!7799)) b!60166))

(assert (= (and b!60163 res!33317) b!60155))

(assert (= (or b!60163 b!60166) bm!4547))

(assert (= (and b!60149 res!33319) b!60153))

(assert (= (and b!60153 c!7800) b!60152))

(assert (= (and b!60153 (not c!7800)) b!60158))

(assert (= (and b!60152 res!33322) b!60159))

(assert (= (or b!60152 b!60158) bm!4549))

(declare-fun b_lambda!2639 () Bool)

(assert (=> (not b_lambda!2639) (not b!60160)))

(assert (=> b!60160 t!4781))

(declare-fun b_and!3645 () Bool)

(assert (= b_and!3641 (and (=> t!4781 result!2381) b_and!3645)))

(assert (=> b!60160 t!4783))

(declare-fun b_and!3647 () Bool)

(assert (= b_and!3643 (and (=> t!4783 result!2383) b_and!3647)))

(declare-fun m!52759 () Bool)

(assert (=> b!60159 m!52759))

(assert (=> d!11847 m!50657))

(assert (=> b!60162 m!50643))

(assert (=> b!60162 m!50643))

(assert (=> b!60162 m!50645))

(declare-fun m!52761 () Bool)

(assert (=> bm!4547 m!52761))

(assert (=> b!60147 m!50643))

(assert (=> b!60147 m!50643))

(assert (=> b!60147 m!50645))

(declare-fun m!52763 () Bool)

(assert (=> b!60161 m!52763))

(declare-fun m!52765 () Bool)

(assert (=> b!60161 m!52765))

(declare-fun m!52767 () Bool)

(assert (=> b!60161 m!52767))

(declare-fun m!52769 () Bool)

(assert (=> b!60161 m!52769))

(declare-fun m!52771 () Bool)

(assert (=> b!60161 m!52771))

(declare-fun m!52773 () Bool)

(assert (=> b!60161 m!52773))

(declare-fun m!52775 () Bool)

(assert (=> b!60161 m!52775))

(declare-fun m!52777 () Bool)

(assert (=> b!60161 m!52777))

(assert (=> b!60161 m!50643))

(declare-fun m!52779 () Bool)

(assert (=> b!60161 m!52779))

(declare-fun m!52781 () Bool)

(assert (=> b!60161 m!52781))

(assert (=> b!60161 m!50369))

(declare-fun m!52783 () Bool)

(assert (=> b!60161 m!52783))

(assert (=> b!60161 m!52763))

(declare-fun m!52785 () Bool)

(assert (=> b!60161 m!52785))

(declare-fun m!52787 () Bool)

(assert (=> b!60161 m!52787))

(assert (=> b!60161 m!50369))

(declare-fun m!52789 () Bool)

(assert (=> b!60161 m!52789))

(assert (=> b!60161 m!52773))

(assert (=> b!60161 m!50369))

(declare-fun m!52791 () Bool)

(assert (=> b!60161 m!52791))

(assert (=> b!60161 m!52785))

(assert (=> b!60161 m!52779))

(declare-fun m!52793 () Bool)

(assert (=> b!60161 m!52793))

(assert (=> b!60160 m!50643))

(declare-fun m!52795 () Bool)

(assert (=> b!60160 m!52795))

(assert (=> b!60160 m!50697))

(assert (=> b!60160 m!50699))

(assert (=> b!60160 m!50697))

(assert (=> b!60160 m!50701))

(assert (=> b!60160 m!50699))

(assert (=> b!60160 m!50643))

(assert (=> bm!4551 m!50369))

(assert (=> bm!4551 m!52791))

(assert (=> b!60151 m!50643))

(assert (=> b!60151 m!50643))

(declare-fun m!52797 () Bool)

(assert (=> b!60151 m!52797))

(declare-fun m!52799 () Bool)

(assert (=> b!60155 m!52799))

(declare-fun m!52801 () Bool)

(assert (=> b!60157 m!52801))

(declare-fun m!52803 () Bool)

(assert (=> bm!4552 m!52803))

(declare-fun m!52805 () Bool)

(assert (=> bm!4549 m!52805))

(assert (=> d!11227 d!11847))

(declare-fun d!11849 () Bool)

(declare-fun e!39524 () Bool)

(assert (=> d!11849 e!39524))

(declare-fun res!33325 () Bool)

(assert (=> d!11849 (=> res!33325 e!39524)))

(declare-fun lt!24629 () Bool)

(assert (=> d!11849 (= res!33325 (not lt!24629))))

(declare-fun lt!24631 () Bool)

(assert (=> d!11849 (= lt!24629 lt!24631)))

(declare-fun lt!24630 () Unit!1550)

(declare-fun e!39523 () Unit!1550)

(assert (=> d!11849 (= lt!24630 e!39523)))

(declare-fun c!7805 () Bool)

(assert (=> d!11849 (= c!7805 lt!24631)))

(assert (=> d!11849 (= lt!24631 (containsKey!126 (toList!693 (map!1103 (_2!1028 lt!23976))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(assert (=> d!11849 (= (contains!682 (map!1103 (_2!1028 lt!23976)) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)) lt!24629)))

(declare-fun b!60168 () Bool)

(declare-fun lt!24632 () Unit!1550)

(assert (=> b!60168 (= e!39523 lt!24632)))

(assert (=> b!60168 (= lt!24632 (lemmaContainsKeyImpliesGetValueByKeyDefined!75 (toList!693 (map!1103 (_2!1028 lt!23976))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(assert (=> b!60168 (isDefined!76 (getValueByKey!122 (toList!693 (map!1103 (_2!1028 lt!23976))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355)))))

(declare-fun b!60169 () Bool)

(declare-fun Unit!1612 () Unit!1550)

(assert (=> b!60169 (= e!39523 Unit!1612)))

(declare-fun b!60170 () Bool)

(assert (=> b!60170 (= e!39524 (isDefined!76 (getValueByKey!122 (toList!693 (map!1103 (_2!1028 lt!23976))) (select (arr!1768 (_keys!3665 (v!2377 (underlying!223 thiss!992)))) from!355))))))

(assert (= (and d!11849 c!7805) b!60168))

(assert (= (and d!11849 (not c!7805)) b!60169))

(assert (= (and d!11849 (not res!33325)) b!60170))

(assert (=> d!11849 m!50353))

(declare-fun m!52807 () Bool)

(assert (=> d!11849 m!52807))

(assert (=> b!60168 m!50353))

(declare-fun m!52809 () Bool)

(assert (=> b!60168 m!52809))

(assert (=> b!60168 m!50353))

(declare-fun m!52811 () Bool)

(assert (=> b!60168 m!52811))

(assert (=> b!60168 m!52811))

(declare-fun m!52813 () Bool)

(assert (=> b!60168 m!52813))

(assert (=> b!60170 m!50353))

(assert (=> b!60170 m!52811))

(assert (=> b!60170 m!52811))

(assert (=> b!60170 m!52813))

(assert (=> b!59149 d!11849))

(assert (=> b!59149 d!11465))

(declare-fun d!11851 () Bool)

(assert (=> d!11851 (arrayContainsKey!0 (_keys!3665 newMap!16) lt!24068 #b00000000000000000000000000000000)))

(declare-fun lt!24633 () Unit!1550)

(assert (=> d!11851 (= lt!24633 (choose!13 (_keys!3665 newMap!16) lt!24068 #b00000000000000000000000000000000))))

(assert (=> d!11851 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (=> d!11851 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3665 newMap!16) lt!24068 #b00000000000000000000000000000000) lt!24633)))

(declare-fun bs!2621 () Bool)

(assert (= bs!2621 d!11851))

(assert (=> bs!2621 m!51069))

(declare-fun m!52815 () Bool)

(assert (=> bs!2621 m!52815))

(assert (=> b!59257 d!11851))

(declare-fun d!11853 () Bool)

(declare-fun res!33326 () Bool)

(declare-fun e!39525 () Bool)

(assert (=> d!11853 (=> res!33326 e!39525)))

(assert (=> d!11853 (= res!33326 (= (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000) lt!24068))))

(assert (=> d!11853 (= (arrayContainsKey!0 (_keys!3665 newMap!16) lt!24068 #b00000000000000000000000000000000) e!39525)))

(declare-fun b!60171 () Bool)

(declare-fun e!39526 () Bool)

(assert (=> b!60171 (= e!39525 e!39526)))

(declare-fun res!33327 () Bool)

(assert (=> b!60171 (=> (not res!33327) (not e!39526))))

(assert (=> b!60171 (= res!33327 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!1999 (_keys!3665 newMap!16))))))

(declare-fun b!60172 () Bool)

(assert (=> b!60172 (= e!39526 (arrayContainsKey!0 (_keys!3665 newMap!16) lt!24068 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!11853 (not res!33326)) b!60171))

(assert (= (and b!60171 res!33327) b!60172))

(assert (=> d!11853 m!50643))

(declare-fun m!52817 () Bool)

(assert (=> b!60172 m!52817))

(assert (=> b!59257 d!11853))

(declare-fun b!60173 () Bool)

(declare-fun e!39528 () SeekEntryResult!230)

(declare-fun lt!24635 () SeekEntryResult!230)

(assert (=> b!60173 (= e!39528 (MissingZero!230 (index!3045 lt!24635)))))

(declare-fun b!60174 () Bool)

(declare-fun c!7808 () Bool)

(declare-fun lt!24634 () (_ BitVec 64))

(assert (=> b!60174 (= c!7808 (= lt!24634 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!39529 () SeekEntryResult!230)

(assert (=> b!60174 (= e!39529 e!39528)))

(declare-fun b!60175 () Bool)

(assert (=> b!60175 (= e!39529 (Found!230 (index!3045 lt!24635)))))

(declare-fun b!60176 () Bool)

(declare-fun e!39527 () SeekEntryResult!230)

(assert (=> b!60176 (= e!39527 e!39529)))

(assert (=> b!60176 (= lt!24634 (select (arr!1768 (_keys!3665 newMap!16)) (index!3045 lt!24635)))))

(declare-fun c!7806 () Bool)

(assert (=> b!60176 (= c!7806 (= lt!24634 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun d!11855 () Bool)

(declare-fun lt!24636 () SeekEntryResult!230)

(assert (=> d!11855 (and (or ((_ is Undefined!230) lt!24636) (not ((_ is Found!230) lt!24636)) (and (bvsge (index!3044 lt!24636) #b00000000000000000000000000000000) (bvslt (index!3044 lt!24636) (size!1999 (_keys!3665 newMap!16))))) (or ((_ is Undefined!230) lt!24636) ((_ is Found!230) lt!24636) (not ((_ is MissingZero!230) lt!24636)) (and (bvsge (index!3043 lt!24636) #b00000000000000000000000000000000) (bvslt (index!3043 lt!24636) (size!1999 (_keys!3665 newMap!16))))) (or ((_ is Undefined!230) lt!24636) ((_ is Found!230) lt!24636) ((_ is MissingZero!230) lt!24636) (not ((_ is MissingVacant!230) lt!24636)) (and (bvsge (index!3046 lt!24636) #b00000000000000000000000000000000) (bvslt (index!3046 lt!24636) (size!1999 (_keys!3665 newMap!16))))) (or ((_ is Undefined!230) lt!24636) (ite ((_ is Found!230) lt!24636) (= (select (arr!1768 (_keys!3665 newMap!16)) (index!3044 lt!24636)) (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000)) (ite ((_ is MissingZero!230) lt!24636) (= (select (arr!1768 (_keys!3665 newMap!16)) (index!3043 lt!24636)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!230) lt!24636) (= (select (arr!1768 (_keys!3665 newMap!16)) (index!3046 lt!24636)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11855 (= lt!24636 e!39527)))

(declare-fun c!7807 () Bool)

(assert (=> d!11855 (= c!7807 (and ((_ is Intermediate!230) lt!24635) (undefined!1042 lt!24635)))))

(assert (=> d!11855 (= lt!24635 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000) (mask!5925 newMap!16)) (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000) (_keys!3665 newMap!16) (mask!5925 newMap!16)))))

(assert (=> d!11855 (validMask!0 (mask!5925 newMap!16))))

(assert (=> d!11855 (= (seekEntryOrOpen!0 (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000) (_keys!3665 newMap!16) (mask!5925 newMap!16)) lt!24636)))

(declare-fun b!60177 () Bool)

(assert (=> b!60177 (= e!39528 (seekKeyOrZeroReturnVacant!0 (x!10005 lt!24635) (index!3045 lt!24635) (index!3045 lt!24635) (select (arr!1768 (_keys!3665 newMap!16)) #b00000000000000000000000000000000) (_keys!3665 newMap!16) (mask!5925 newMap!16)))))

(declare-fun b!60178 () Bool)

(assert (=> b!60178 (= e!39527 Undefined!230)))

(assert (= (and d!11855 c!7807) b!60178))

(assert (= (and d!11855 (not c!7807)) b!60176))

(assert (= (and b!60176 c!7806) b!60175))

(assert (= (and b!60176 (not c!7806)) b!60174))

(assert (= (and b!60174 c!7808) b!60173))

(assert (= (and b!60174 (not c!7808)) b!60177))

(declare-fun m!52819 () Bool)

(assert (=> b!60176 m!52819))

(declare-fun m!52821 () Bool)

(assert (=> d!11855 m!52821))

(declare-fun m!52823 () Bool)

(assert (=> d!11855 m!52823))

(assert (=> d!11855 m!50657))

(declare-fun m!52825 () Bool)

(assert (=> d!11855 m!52825))

(assert (=> d!11855 m!50643))

(declare-fun m!52827 () Bool)

(assert (=> d!11855 m!52827))

(assert (=> d!11855 m!50643))

(assert (=> d!11855 m!52825))

(declare-fun m!52829 () Bool)

(assert (=> d!11855 m!52829))

(assert (=> b!60177 m!50643))

(declare-fun m!52831 () Bool)

(assert (=> b!60177 m!52831))

(assert (=> b!59257 d!11855))

(assert (=> bm!4409 d!11709))

(assert (=> b!59330 d!11489))

(declare-fun d!11857 () Bool)

(declare-fun lt!24637 () Bool)

(assert (=> d!11857 (= lt!24637 (select (content!64 (toList!693 lt!24046)) (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))))

(declare-fun e!39530 () Bool)

(assert (=> d!11857 (= lt!24637 e!39530)))

(declare-fun res!33329 () Bool)

(assert (=> d!11857 (=> (not res!33329) (not e!39530))))

(assert (=> d!11857 (= res!33329 ((_ is Cons!1433) (toList!693 lt!24046)))))

(assert (=> d!11857 (= (contains!684 (toList!693 lt!24046) (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))) lt!24637)))

(declare-fun b!60179 () Bool)

(declare-fun e!39531 () Bool)

(assert (=> b!60179 (= e!39530 e!39531)))

(declare-fun res!33328 () Bool)

(assert (=> b!60179 (=> res!33328 e!39531)))

(assert (=> b!60179 (= res!33328 (= (h!2014 (toList!693 lt!24046)) (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))))

(declare-fun b!60180 () Bool)

(assert (=> b!60180 (= e!39531 (contains!684 (t!4770 (toList!693 lt!24046)) (tuple2!2037 lt!23687 (zeroValue!1958 (v!2377 (underlying!223 thiss!992))))))))

(assert (= (and d!11857 res!33329) b!60179))

(assert (= (and b!60179 (not res!33328)) b!60180))

(declare-fun m!52833 () Bool)

(assert (=> d!11857 m!52833))

(declare-fun m!52835 () Bool)

(assert (=> d!11857 m!52835))

(declare-fun m!52837 () Bool)

(assert (=> b!60180 m!52837))

(assert (=> b!59227 d!11857))

(declare-fun d!11859 () Bool)

(declare-fun res!33330 () Bool)

(declare-fun e!39532 () Bool)

(assert (=> d!11859 (=> res!33330 e!39532)))

(assert (=> d!11859 (= res!33330 (and ((_ is Cons!1433) (toList!693 lt!23704)) (= (_1!1029 (h!2014 (toList!693 lt!23704))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!11859 (= (containsKey!126 (toList!693 lt!23704) #b0000000000000000000000000000000000000000000000000000000000000000) e!39532)))

(declare-fun b!60181 () Bool)

(declare-fun e!39533 () Bool)

(assert (=> b!60181 (= e!39532 e!39533)))

(declare-fun res!33331 () Bool)

(assert (=> b!60181 (=> (not res!33331) (not e!39533))))

(assert (=> b!60181 (= res!33331 (and (or (not ((_ is Cons!1433) (toList!693 lt!23704))) (bvsle (_1!1029 (h!2014 (toList!693 lt!23704))) #b0000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1433) (toList!693 lt!23704)) (bvslt (_1!1029 (h!2014 (toList!693 lt!23704))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!60182 () Bool)

(assert (=> b!60182 (= e!39533 (containsKey!126 (t!4770 (toList!693 lt!23704)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!11859 (not res!33330)) b!60181))

(assert (= (and b!60181 res!33331) b!60182))

(declare-fun m!52839 () Bool)

(assert (=> b!60182 m!52839))

(assert (=> d!11305 d!11859))

(assert (=> b!59205 d!11343))

(declare-fun mapNonEmpty!2887 () Bool)

(declare-fun mapRes!2887 () Bool)

(declare-fun tp!8017 () Bool)

(declare-fun e!39535 () Bool)

(assert (=> mapNonEmpty!2887 (= mapRes!2887 (and tp!8017 e!39535))))

(declare-fun mapKey!2887 () (_ BitVec 32))

(declare-fun mapValue!2887 () ValueCell!854)

(declare-fun mapRest!2887 () (Array (_ BitVec 32) ValueCell!854))

(assert (=> mapNonEmpty!2887 (= mapRest!2885 (store mapRest!2887 mapKey!2887 mapValue!2887))))

(declare-fun b!60183 () Bool)

(assert (=> b!60183 (= e!39535 tp_is_empty!2395)))

(declare-fun condMapEmpty!2887 () Bool)

(declare-fun mapDefault!2887 () ValueCell!854)

(assert (=> mapNonEmpty!2885 (= condMapEmpty!2887 (= mapRest!2885 ((as const (Array (_ BitVec 32) ValueCell!854)) mapDefault!2887)))))

(declare-fun e!39534 () Bool)

(assert (=> mapNonEmpty!2885 (= tp!8015 (and e!39534 mapRes!2887))))

(declare-fun mapIsEmpty!2887 () Bool)

(assert (=> mapIsEmpty!2887 mapRes!2887))

(declare-fun b!60184 () Bool)

(assert (=> b!60184 (= e!39534 tp_is_empty!2395)))

(assert (= (and mapNonEmpty!2885 condMapEmpty!2887) mapIsEmpty!2887))

(assert (= (and mapNonEmpty!2885 (not condMapEmpty!2887)) mapNonEmpty!2887))

(assert (= (and mapNonEmpty!2887 ((_ is ValueCellFull!854) mapValue!2887)) b!60183))

(assert (= (and mapNonEmpty!2885 ((_ is ValueCellFull!854) mapDefault!2887)) b!60184))

(declare-fun m!52841 () Bool)

(assert (=> mapNonEmpty!2887 m!52841))

(declare-fun mapNonEmpty!2888 () Bool)

(declare-fun mapRes!2888 () Bool)

(declare-fun tp!8018 () Bool)

(declare-fun e!39537 () Bool)

(assert (=> mapNonEmpty!2888 (= mapRes!2888 (and tp!8018 e!39537))))

(declare-fun mapRest!2888 () (Array (_ BitVec 32) ValueCell!854))

(declare-fun mapKey!2888 () (_ BitVec 32))

(declare-fun mapValue!2888 () ValueCell!854)

(assert (=> mapNonEmpty!2888 (= mapRest!2886 (store mapRest!2888 mapKey!2888 mapValue!2888))))

(declare-fun b!60185 () Bool)

(assert (=> b!60185 (= e!39537 tp_is_empty!2395)))

(declare-fun condMapEmpty!2888 () Bool)

(declare-fun mapDefault!2888 () ValueCell!854)

(assert (=> mapNonEmpty!2886 (= condMapEmpty!2888 (= mapRest!2886 ((as const (Array (_ BitVec 32) ValueCell!854)) mapDefault!2888)))))

(declare-fun e!39536 () Bool)

(assert (=> mapNonEmpty!2886 (= tp!8016 (and e!39536 mapRes!2888))))

(declare-fun mapIsEmpty!2888 () Bool)

(assert (=> mapIsEmpty!2888 mapRes!2888))

(declare-fun b!60186 () Bool)

(assert (=> b!60186 (= e!39536 tp_is_empty!2395)))

(assert (= (and mapNonEmpty!2886 condMapEmpty!2888) mapIsEmpty!2888))

(assert (= (and mapNonEmpty!2886 (not condMapEmpty!2888)) mapNonEmpty!2888))

(assert (= (and mapNonEmpty!2888 ((_ is ValueCellFull!854) mapValue!2888)) b!60185))

(assert (= (and mapNonEmpty!2886 ((_ is ValueCellFull!854) mapDefault!2888)) b!60186))

(declare-fun m!52843 () Bool)

(assert (=> mapNonEmpty!2888 m!52843))

(declare-fun b_lambda!2641 () Bool)

(assert (= b_lambda!2635 (or (and b!58610 b_free!1957 (= (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) (defaultEntry!2042 newMap!16))) (and b!58607 b_free!1959) b_lambda!2641)))

(declare-fun b_lambda!2643 () Bool)

(assert (= b_lambda!2631 (or (and b!58610 b_free!1957 (= (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) (defaultEntry!2042 newMap!16))) (and b!58607 b_free!1959) b_lambda!2643)))

(declare-fun b_lambda!2645 () Bool)

(assert (= b_lambda!2637 (or (and b!58610 b_free!1957 (= (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) (defaultEntry!2042 newMap!16))) (and b!58607 b_free!1959) b_lambda!2645)))

(declare-fun b_lambda!2647 () Bool)

(assert (= b_lambda!2639 (or (and b!58610 b_free!1957 (= (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) (defaultEntry!2042 newMap!16))) (and b!58607 b_free!1959) b_lambda!2647)))

(declare-fun b_lambda!2649 () Bool)

(assert (= b_lambda!2627 (or (and b!58610 b_free!1957 (= (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) (defaultEntry!2042 newMap!16))) (and b!58607 b_free!1959) b_lambda!2649)))

(declare-fun b_lambda!2651 () Bool)

(assert (= b_lambda!2625 (or (and b!58610 b_free!1957) (and b!58607 b_free!1959 (= (defaultEntry!2042 newMap!16) (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))))) b_lambda!2651)))

(declare-fun b_lambda!2653 () Bool)

(assert (= b_lambda!2611 (or (and b!58610 b_free!1957 (= (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) (defaultEntry!2042 newMap!16))) (and b!58607 b_free!1959) b_lambda!2653)))

(declare-fun b_lambda!2655 () Bool)

(assert (= b_lambda!2621 (or (and b!58610 b_free!1957 (= (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) (defaultEntry!2042 newMap!16))) (and b!58607 b_free!1959) b_lambda!2655)))

(declare-fun b_lambda!2657 () Bool)

(assert (= b_lambda!2633 (or (and b!58610 b_free!1957 (= (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) (defaultEntry!2042 newMap!16))) (and b!58607 b_free!1959) b_lambda!2657)))

(declare-fun b_lambda!2659 () Bool)

(assert (= b_lambda!2629 (or (and b!58610 b_free!1957 (= (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) (defaultEntry!2042 newMap!16))) (and b!58607 b_free!1959) b_lambda!2659)))

(declare-fun b_lambda!2661 () Bool)

(assert (= b_lambda!2617 (or (and b!58610 b_free!1957 (= (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) (defaultEntry!2042 newMap!16))) (and b!58607 b_free!1959) b_lambda!2661)))

(declare-fun b_lambda!2663 () Bool)

(assert (= b_lambda!2615 (or (and b!58610 b_free!1957 (= (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) (defaultEntry!2042 newMap!16))) (and b!58607 b_free!1959) b_lambda!2663)))

(declare-fun b_lambda!2665 () Bool)

(assert (= b_lambda!2619 (or (and b!58610 b_free!1957 (= (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))) (defaultEntry!2042 newMap!16))) (and b!58607 b_free!1959) b_lambda!2665)))

(declare-fun b_lambda!2667 () Bool)

(assert (= b_lambda!2623 (or (and b!58610 b_free!1957) (and b!58607 b_free!1959 (= (defaultEntry!2042 newMap!16) (defaultEntry!2042 (v!2377 (underlying!223 thiss!992))))) b_lambda!2667)))

(check-sat (not d!11639) (not b_lambda!2643) (not b!59955) (not bm!4452) (not d!11413) (not b!60138) (not b!59711) (not b!60107) (not b!59633) (not b!60116) (not b!59792) (not b!59642) (not bm!4513) (not d!11361) (not d!11525) (not b!59374) (not b!59549) (not b!59559) (not d!11775) (not d!11567) (not d!11837) (not bm!4481) (not b!60119) (not d!11485) (not b!60159) (not d!11467) (not b!59871) (not b!59691) (not b!59442) (not d!11433) (not d!11705) (not b!59968) (not b!59474) (not b!59972) (not b!60126) (not b!59897) (not b!59445) (not b!59534) (not d!11449) (not b_lambda!2661) (not b!59531) (not d!11499) (not b!59530) (not b!59667) (not b!59740) (not b!59683) (not b!59583) (not b!59512) (not b!60124) (not d!11529) (not b!59726) (not b!59554) (not d!11807) (not b!59868) (not b!59628) (not b!60008) (not d!11487) (not b!59464) (not d!11629) (not bm!4518) (not b!59580) (not b!60006) (not b!59672) (not b!59348) (not b!60031) (not bm!4467) (not b!59439) (not bm!4474) (not b_lambda!2585) (not b!60089) (not bm!4545) (not d!11401) (not b!59961) (not b!60042) (not b!59376) (not b!59542) (not b_lambda!2641) (not bm!4541) (not bm!4493) (not b_lambda!2655) (not b!59990) (not b!59423) (not d!11633) (not b!59639) (not b!59563) (not bm!4529) (not b!60010) (not b!59798) (not b!59371) (not b!59599) (not d!11523) (not b_lambda!2605) (not d!11369) (not b!59625) (not d!11695) (not b!59861) (not bm!4517) (not b!59890) (not bm!4488) (not b!60170) (not b!59670) (not b!59896) (not b!60110) (not d!11661) (not b_lambda!2653) (not b!59643) (not b!59808) (not b!59689) (not b!60105) (not b!59433) b_and!3645 (not bm!4552) (not bm!4472) (not d!11597) (not b_lambda!2609) (not d!11697) (not b!60081) (not b!60012) (not d!11427) (not bm!4468) (not d!11687) (not bm!4475) (not b!59638) (not bm!4502) (not b!60135) (not bm!4524) (not b!59858) (not b!59545) (not bm!4506) (not bm!4479) (not b!59946) (not b!59892) (not d!11787) (not b!59407) (not b!59609) (not b!59894) (not b!59761) (not b!60103) (not b!59988) (not b!59822) (not d!11491) (not d!11465) (not b!60094) (not b!59904) (not b!60029) (not b!59416) (not bm!4486) (not b!59719) (not b!59589) (not b!60108) (not d!11677) (not b!60177) (not b!59434) (not d!11543) (not d!11735) (not d!11621) (not b!59824) (not d!11503) (not b!59784) (not b!59681) (not b!59818) (not d!11793) (not b!59920) (not b!59895) (not b!60068) (not bm!4477) (not d!11855) (not b!59508) (not d!11699) (not b!59971) (not b!59801) (not bm!4551) (not b!60132) (not b!59936) (not bm!4542) (not b!59865) (not b!60160) (not b!59704) (not bm!4491) (not d!11483) (not d!11535) (not b_lambda!2589) (not b!59421) (not bm!4501) (not b!59696) (not d!11587) (not b_lambda!2613) (not d!11515) (not d!11603) (not b!59547) (not bm!4522) (not b!60024) (not d!11823) (not b!59738) (not b_next!1959) (not d!11713) (not b!60009) (not d!11707) (not b!59485) (not d!11805) (not b_lambda!2651) (not d!11497) (not d!11737) (not b!59441) (not b!59605) (not b!59829) (not d!11475) (not b!59863) (not d!11741) (not b!60140) (not bm!4531) (not b!59592) (not b!59975) (not b!59764) (not b!60123) (not b!59927) (not d!11739) (not b!59976) (not d!11399) (not d!11655) (not b_lambda!2667) (not b!59459) (not b!59649) (not b!60099) (not d!11821) (not d!11791) (not d!11571) (not b!60071) (not b!59932) (not b!59692) (not b!59386) (not b!59977) (not d!11645) (not b!59370) (not d!11505) (not d!11383) (not b!60145) (not d!11545) (not d!11481) (not d!11617) (not b!59981) (not d!11581) (not b!59448) (not b!60128) (not b!59741) (not b!59735) (not b!60088) (not b!59954) (not d!11395) (not bm!4515) (not b!59882) (not b!60147) (not d!11709) (not d!11527) (not d!11469) (not d!11425) (not b!59561) (not d!11431) (not d!11827) (not b!59825) (not d!11819) (not d!11781) (not bm!4547) (not b!59921) (not b!59778) (not d!11851) (not d!11539) (not b!59763) (not d!11667) (not d!11783) (not bm!4470) (not b!59703) (not b!59947) (not bm!4465) (not d!11531) (not b!59627) (not d!11479) (not b!59585) (not b!59876) (not d!11727) (not d!11443) (not b!59725) (not b!59620) (not d!11579) (not b!60033) (not b!59666) (not d!11455) (not b!59790) (not d!11843) (not b!59483) (not bm!4484) (not bm!4521) (not b!59591) (not b!60130) (not b!60172) (not b!59860) (not b!59773) (not b!60120) (not b_lambda!2663) (not b!59969) (not d!11575) (not d!11815) (not b!59368) (not d!11813) b_and!3647 (not d!11585) (not b!59594) (not d!11553) (not bm!4526) (not b!59562) (not b!59618) (not d!11795) (not d!11365) (not d!11751) (not d!11397) (not b!60136) (not b_lambda!2607) (not b!59716) (not b!60157) (not b!59707) (not b!59502) (not b!59640) (not b!59867) (not d!11789) (not d!11373) (not b!59759) (not d!11593) (not b!59379) (not b!59527) (not d!11693) (not b!59699) (not d!11649) (not b!60080) (not d!11831) (not d!11657) (not b!60127) (not bm!4482) (not b!60114) (not b_lambda!2657) (not b!60022) (not b!59648) (not bm!4489) (not b!59659) (not b!59343) (not b!59886) (not b!59724) (not b!59983) (not d!11613) (not b!59662) (not b!59528) (not d!11777) (not b!59881) (not b!60005) (not b!60032) (not b!59582) (not b!60151) (not b!59944) (not bm!4508) (not b!60121) (not d!11355) (not b!59780) (not b!59494) (not b!59945) (not d!11375) (not b!59942) (not d!11403) (not d!11701) (not d!11811) (not b!59698) (not b!59529) (not bm!4511) (not b!59524) (not b!59727) (not b_lambda!2603) (not b!59498) (not b!59426) (not b!59958) (not b!59722) (not d!11387) (not b!59437) (not d!11839) (not b!59701) (not d!11845) (not b!59435) (not d!11779) (not bm!4494) (not b!59449) (not b!59590) (not b!59491) (not d!11547) (not b!59985) (not b!59478) (not d!11797) (not b!60019) (not b!59538) (not b!59925) (not b!59751) (not b!59963) (not d!11421) (not b!59684) (not d!11367) (not d!11731) (not b!60109) (not d!11817) (not d!11765) (not b!60083) (not d!11689) (not b!60016) (not b!59577) (not b!59513) (not b!59511) (not b!59714) (not b!60161) (not b!60168) (not b!59799) (not b_next!1957) (not b!59911) (not d!11637) (not bm!4535) (not b!59595) (not d!11673) (not b!59733) (not d!11715) (not d!11519) (not d!11755) (not b!59812) (not b!59346) (not b!59664) (not b!59940) (not b!59608) (not mapNonEmpty!2888) (not b!59782) (not b!60070) (not b!60014) (not d!11501) (not b!59678) (not d!11521) (not b!59650) (not d!11849) (not d!11685) (not d!11799) (not b!60001) (not b!59965) (not d!11595) (not d!11405) (not b!59991) (not d!11409) (not b!59470) (not b_lambda!2665) (not b!59675) (not b!60072) (not b!59731) (not b!59654) (not b!60018) (not b!59622) (not b!59742) (not bm!4499) (not b!59484) (not d!11773) (not d!11803) (not b!59669) (not b!59708) (not d!11847) (not d!11759) (not b!59521) (not d!11359) (not b!59686) (not b!59552) (not b!60146) (not b!59767) (not b!59462) (not bm!4500) (not d!11663) (not d!11729) (not b!59690) (not b!59641) (not b!60090) (not b!59411) (not d!11507) (not d!11447) (not b!59535) (not b!59705) (not bm!4533) (not d!11711) (not b!59992) (not d!11717) (not b!59587) (not b!59655) (not b!59817) (not d!11601) (not b!59497) (not d!11809) (not d!11681) (not bm!4497) (not d!11683) (not b!59574) (not b!60182) (not b!60180) (not b!59931) (not b!59480) (not b!59419) (not b!59852) (not bm!4549) (not b!59807) (not d!11461) (not d!11537) (not b!60101) (not b!60086) (not b!59603) (not bm!4462) (not b!59756) (not b!60037) (not b!59857) (not d!11607) (not b!59651) (not d!11801) (not b!60111) (not b!59695) (not b!60003) (not b!59363) (not b_lambda!2649) (not b!59930) (not b_lambda!2645) (not b!59953) (not d!11563) (not bm!4520) (not bm!4463) (not bm!4543) (not d!11829) (not bm!4512) (not d!11345) (not d!11379) (not b!59652) (not b!60143) (not b!59923) (not b!59787) (not d!11555) (not b!60026) tp_is_empty!2395 (not d!11541) (not b!59567) (not bm!4510) (not b!60133) (not b!59806) (not b!59506) (not d!11549) (not d!11691) (not b!59956) (not b!59693) (not mapNonEmpty!2887) (not b!59385) (not d!11623) (not b!60118) (not b!59457) (not b!59728) (not d!11723) (not b!59804) (not b!59540) (not d!11763) (not b!59572) (not b!59610) (not b!59762) (not b!59453) (not b!59607) (not d!11857) (not b!59970) (not d!11769) (not b!59533) (not b!59463) (not b!59510) (not b!59496) (not bm!4451) (not b!59660) (not d!11451) (not d!11785) (not b!59996) (not b!59785) (not b!60155) (not b_lambda!2647) (not b!59754) (not d!11411) (not b!60074) (not bm!4504) (not d!11471) (not b_lambda!2659) (not b!59645) (not d!11437) (not b!59461) (not b!59974) (not bm!4527) (not b!59482) (not bm!4460) (not b!59907) (not b!59819) (not d!11557) (not b!59629) (not b_lambda!2601) (not d!11591) (not b!60162) (not b!59373) (not b!59821) (not d!11757) (not b!60100) (not b!59959) (not b!59794) (not b!59746) (not b!59556) (not d!11653) (not b!59447) (not b!59765) (not d!11671) (not d!11533) (not b!60112) (not d!11703))
(check-sat b_and!3645 b_and!3647 (not b_next!1957) (not b_next!1959))
