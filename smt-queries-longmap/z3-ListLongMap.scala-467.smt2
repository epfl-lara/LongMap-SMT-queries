; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!8874 () Bool)

(assert start!8874)

(declare-fun b!62113 () Bool)

(declare-fun b_free!1993 () Bool)

(declare-fun b_next!1993 () Bool)

(assert (=> b!62113 (= b_free!1993 (not b_next!1993))))

(declare-fun tp!8110 () Bool)

(declare-fun b_and!3793 () Bool)

(assert (=> b!62113 (= tp!8110 b_and!3793)))

(declare-fun b!62120 () Bool)

(declare-fun b_free!1995 () Bool)

(declare-fun b_next!1995 () Bool)

(assert (=> b!62120 (= b_free!1995 (not b_next!1995))))

(declare-fun tp!8108 () Bool)

(declare-fun b_and!3795 () Bool)

(assert (=> b!62120 (= tp!8108 b_and!3795)))

(declare-fun b!62109 () Bool)

(declare-fun e!40787 () Bool)

(declare-fun e!40785 () Bool)

(assert (=> b!62109 (= e!40787 e!40785)))

(declare-fun res!34137 () Bool)

(assert (=> b!62109 (=> (not res!34137) (not e!40785))))

(declare-datatypes ((V!2865 0))(
  ( (V!2866 (val!1251 Int)) )
))
(declare-datatypes ((array!3743 0))(
  ( (array!3744 (arr!1790 (Array (_ BitVec 32) (_ BitVec 64))) (size!2022 (_ BitVec 32))) )
))
(declare-datatypes ((ValueCell!863 0))(
  ( (ValueCellFull!863 (v!2418 V!2865)) (EmptyCell!863) )
))
(declare-datatypes ((array!3745 0))(
  ( (array!3746 (arr!1791 (Array (_ BitVec 32) ValueCell!863)) (size!2023 (_ BitVec 32))) )
))
(declare-datatypes ((LongMapFixedSize!634 0))(
  ( (LongMapFixedSize!635 (defaultEntry!2087 Int) (mask!5993 (_ BitVec 32)) (extraKeys!1966 (_ BitVec 32)) (zeroValue!1999 V!2865) (minValue!1999 V!2865) (_size!366 (_ BitVec 32)) (_keys!3719 array!3743) (_values!2070 array!3745) (_vacant!366 (_ BitVec 32))) )
))
(declare-datatypes ((tuple2!2030 0))(
  ( (tuple2!2031 (_1!1026 Bool) (_2!1026 LongMapFixedSize!634)) )
))
(declare-fun lt!25843 () tuple2!2030)

(declare-fun from!355 () (_ BitVec 32))

(assert (=> b!62109 (= res!34137 (and (_1!1026 lt!25843) (bvsgt from!355 #b00000000000000000000000000000000)))))

(declare-datatypes ((Unit!1680 0))(
  ( (Unit!1681) )
))
(declare-fun lt!25842 () Unit!1680)

(declare-fun e!40776 () Unit!1680)

(assert (=> b!62109 (= lt!25842 e!40776)))

(declare-datatypes ((Cell!444 0))(
  ( (Cell!445 (v!2419 LongMapFixedSize!634)) )
))
(declare-datatypes ((LongMap!444 0))(
  ( (LongMap!445 (underlying!233 Cell!444)) )
))
(declare-fun thiss!992 () LongMap!444)

(declare-datatypes ((tuple2!2032 0))(
  ( (tuple2!2033 (_1!1027 (_ BitVec 64)) (_2!1027 V!2865)) )
))
(declare-datatypes ((List!1429 0))(
  ( (Nil!1426) (Cons!1425 (h!2008 tuple2!2032) (t!4815 List!1429)) )
))
(declare-datatypes ((ListLongMap!1351 0))(
  ( (ListLongMap!1352 (toList!691 List!1429)) )
))
(declare-fun lt!25841 () ListLongMap!1351)

(declare-fun c!8251 () Bool)

(declare-fun contains!686 (ListLongMap!1351 (_ BitVec 64)) Bool)

(assert (=> b!62109 (= c!8251 (contains!686 lt!25841 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun newMap!16 () LongMapFixedSize!634)

(declare-fun update!90 (LongMapFixedSize!634 (_ BitVec 64) V!2865) tuple2!2030)

(declare-fun get!1088 (ValueCell!863 V!2865) V!2865)

(declare-fun dynLambda!308 (Int (_ BitVec 64)) V!2865)

(assert (=> b!62109 (= lt!25843 (update!90 newMap!16 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!62110 () Bool)

(declare-fun e!40788 () Bool)

(declare-fun e!40780 () Bool)

(declare-fun mapRes!2937 () Bool)

(assert (=> b!62110 (= e!40788 (and e!40780 mapRes!2937))))

(declare-fun condMapEmpty!2937 () Bool)

(declare-fun mapDefault!2938 () ValueCell!863)

(assert (=> b!62110 (= condMapEmpty!2937 (= (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) ((as const (Array (_ BitVec 32) ValueCell!863)) mapDefault!2938)))))

(declare-fun b!62111 () Bool)

(declare-fun e!40782 () Bool)

(declare-fun tp_is_empty!2413 () Bool)

(assert (=> b!62111 (= e!40782 tp_is_empty!2413)))

(declare-fun b!62112 () Bool)

(declare-fun res!34141 () Bool)

(assert (=> b!62112 (=> (not res!34141) (not e!40785))))

(declare-fun validMask!0 ((_ BitVec 32)) Bool)

(assert (=> b!62112 (= res!34141 (validMask!0 (mask!5993 (v!2419 (underlying!233 thiss!992)))))))

(declare-fun mapIsEmpty!2937 () Bool)

(assert (=> mapIsEmpty!2937 mapRes!2937))

(declare-fun e!40777 () Bool)

(declare-fun array_inv!1097 (array!3743) Bool)

(declare-fun array_inv!1098 (array!3745) Bool)

(assert (=> b!62113 (= e!40777 (and tp!8110 tp_is_empty!2413 (array_inv!1097 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (array_inv!1098 (_values!2070 (v!2419 (underlying!233 thiss!992)))) e!40788))))

(declare-fun mapNonEmpty!2937 () Bool)

(declare-fun tp!8107 () Bool)

(assert (=> mapNonEmpty!2937 (= mapRes!2937 (and tp!8107 e!40782))))

(declare-fun mapValue!2937 () ValueCell!863)

(declare-fun mapRest!2938 () (Array (_ BitVec 32) ValueCell!863))

(declare-fun mapKey!2938 () (_ BitVec 32))

(assert (=> mapNonEmpty!2937 (= (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) (store mapRest!2938 mapKey!2938 mapValue!2937))))

(declare-fun b!62114 () Bool)

(declare-fun Unit!1682 () Unit!1680)

(assert (=> b!62114 (= e!40776 Unit!1682)))

(declare-fun b!62115 () Bool)

(declare-fun e!40790 () Bool)

(declare-fun e!40775 () Bool)

(assert (=> b!62115 (= e!40790 e!40775)))

(declare-fun b!62116 () Bool)

(declare-fun res!34142 () Bool)

(declare-fun e!40786 () Bool)

(assert (=> b!62116 (=> (not res!34142) (not e!40786))))

(declare-fun valid!269 (LongMapFixedSize!634) Bool)

(assert (=> b!62116 (= res!34142 (valid!269 newMap!16))))

(declare-fun b!62117 () Bool)

(declare-fun Unit!1683 () Unit!1680)

(assert (=> b!62117 (= e!40776 Unit!1683)))

(declare-fun lt!25845 () Unit!1680)

(declare-fun lemmaListMapContainsThenArrayContainsFrom!27 (array!3743 array!3745 (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 (_ BitVec 64) (_ BitVec 32) Int) Unit!1680)

(assert (=> b!62117 (= lt!25845 (lemmaListMapContainsThenArrayContainsFrom!27 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (_values!2070 (v!2419 (underlying!233 thiss!992))) (mask!5993 (v!2419 (underlying!233 thiss!992))) (extraKeys!1966 (v!2419 (underlying!233 thiss!992))) (zeroValue!1999 (v!2419 (underlying!233 thiss!992))) (minValue!1999 (v!2419 (underlying!233 thiss!992))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2087 (v!2419 (underlying!233 thiss!992)))))))

(declare-fun arrayContainsKey!0 (array!3743 (_ BitVec 64) (_ BitVec 32)) Bool)

(assert (=> b!62117 (arrayContainsKey!0 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355))))

(declare-fun lt!25846 () Unit!1680)

(declare-fun lemmaNoDuplicateFromThenFromBigger!0 (array!3743 (_ BitVec 32) (_ BitVec 32)) Unit!1680)

(assert (=> b!62117 (= lt!25846 (lemmaNoDuplicateFromThenFromBigger!0 (_keys!3719 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000000 from!355))))

(declare-datatypes ((List!1430 0))(
  ( (Nil!1427) (Cons!1426 (h!2009 (_ BitVec 64)) (t!4816 List!1430)) )
))
(declare-fun arrayNoDuplicates!0 (array!3743 (_ BitVec 32) List!1430) Bool)

(assert (=> b!62117 (arrayNoDuplicates!0 (_keys!3719 (v!2419 (underlying!233 thiss!992))) from!355 Nil!1427)))

(declare-fun lt!25844 () Unit!1680)

(declare-fun lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (array!3743 (_ BitVec 32) (_ BitVec 64) List!1430) Unit!1680)

(assert (=> b!62117 (= lt!25844 (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (Cons!1426 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1427)))))

(assert (=> b!62117 false))

(declare-fun b!62118 () Bool)

(declare-fun res!34140 () Bool)

(assert (=> b!62118 (=> (not res!34140) (not e!40786))))

(assert (=> b!62118 (= res!34140 (bvsge (bvadd #b00000000000000000000000000000001 (mask!5993 newMap!16)) (_size!366 (v!2419 (underlying!233 thiss!992)))))))

(declare-fun b!62119 () Bool)

(declare-fun e!40789 () Bool)

(declare-fun e!40779 () Bool)

(declare-fun mapRes!2938 () Bool)

(assert (=> b!62119 (= e!40789 (and e!40779 mapRes!2938))))

(declare-fun condMapEmpty!2938 () Bool)

(declare-fun mapDefault!2937 () ValueCell!863)

(assert (=> b!62119 (= condMapEmpty!2938 (= (arr!1791 (_values!2070 newMap!16)) ((as const (Array (_ BitVec 32) ValueCell!863)) mapDefault!2937)))))

(declare-fun e!40783 () Bool)

(assert (=> b!62120 (= e!40783 (and tp!8108 tp_is_empty!2413 (array_inv!1097 (_keys!3719 newMap!16)) (array_inv!1098 (_values!2070 newMap!16)) e!40789))))

(declare-fun b!62122 () Bool)

(assert (=> b!62122 (= e!40780 tp_is_empty!2413)))

(declare-fun b!62123 () Bool)

(declare-fun e!40781 () Bool)

(assert (=> b!62123 (= e!40781 tp_is_empty!2413)))

(declare-fun b!62124 () Bool)

(assert (=> b!62124 (= e!40785 (and (= (size!2023 (_values!2070 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 (mask!5993 (v!2419 (underlying!233 thiss!992))))) (= (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (size!2023 (_values!2070 (v!2419 (underlying!233 thiss!992))))) (bvsge (mask!5993 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000000) (bvsge (extraKeys!1966 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000000) (bvsgt (extraKeys!1966 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000011)))))

(declare-fun mapIsEmpty!2938 () Bool)

(assert (=> mapIsEmpty!2938 mapRes!2938))

(declare-fun b!62125 () Bool)

(declare-fun res!34139 () Bool)

(assert (=> b!62125 (=> (not res!34139) (not e!40786))))

(assert (=> b!62125 (= res!34139 (and (bvsge from!355 #b00000000000000000000000000000000) (bvslt from!355 (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun mapNonEmpty!2938 () Bool)

(declare-fun tp!8109 () Bool)

(assert (=> mapNonEmpty!2938 (= mapRes!2938 (and tp!8109 e!40781))))

(declare-fun mapKey!2937 () (_ BitVec 32))

(declare-fun mapRest!2937 () (Array (_ BitVec 32) ValueCell!863))

(declare-fun mapValue!2938 () ValueCell!863)

(assert (=> mapNonEmpty!2938 (= (arr!1791 (_values!2070 newMap!16)) (store mapRest!2937 mapKey!2937 mapValue!2938))))

(declare-fun b!62126 () Bool)

(assert (=> b!62126 (= e!40775 e!40777)))

(declare-fun b!62127 () Bool)

(assert (=> b!62127 (= e!40786 e!40787)))

(declare-fun res!34138 () Bool)

(assert (=> b!62127 (=> (not res!34138) (not e!40787))))

(declare-fun lt!25847 () ListLongMap!1351)

(assert (=> b!62127 (= res!34138 (and (= lt!25847 lt!25841) (not (= (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun map!1117 (LongMapFixedSize!634) ListLongMap!1351)

(assert (=> b!62127 (= lt!25841 (map!1117 newMap!16))))

(declare-fun getCurrentListMap!391 (array!3743 array!3745 (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 (_ BitVec 32) Int) ListLongMap!1351)

(assert (=> b!62127 (= lt!25847 (getCurrentListMap!391 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (_values!2070 (v!2419 (underlying!233 thiss!992))) (mask!5993 (v!2419 (underlying!233 thiss!992))) (extraKeys!1966 (v!2419 (underlying!233 thiss!992))) (zeroValue!1999 (v!2419 (underlying!233 thiss!992))) (minValue!1999 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2087 (v!2419 (underlying!233 thiss!992)))))))

(declare-fun b!62121 () Bool)

(assert (=> b!62121 (= e!40779 tp_is_empty!2413)))

(declare-fun res!34136 () Bool)

(assert (=> start!8874 (=> (not res!34136) (not e!40786))))

(declare-fun valid!270 (LongMap!444) Bool)

(assert (=> start!8874 (= res!34136 (valid!270 thiss!992))))

(assert (=> start!8874 e!40786))

(assert (=> start!8874 e!40790))

(assert (=> start!8874 true))

(assert (=> start!8874 e!40783))

(assert (= (and start!8874 res!34136) b!62125))

(assert (= (and b!62125 res!34139) b!62116))

(assert (= (and b!62116 res!34142) b!62118))

(assert (= (and b!62118 res!34140) b!62127))

(assert (= (and b!62127 res!34138) b!62109))

(assert (= (and b!62109 c!8251) b!62117))

(assert (= (and b!62109 (not c!8251)) b!62114))

(assert (= (and b!62109 res!34137) b!62112))

(assert (= (and b!62112 res!34141) b!62124))

(assert (= (and b!62110 condMapEmpty!2937) mapIsEmpty!2937))

(assert (= (and b!62110 (not condMapEmpty!2937)) mapNonEmpty!2937))

(get-info :version)

(assert (= (and mapNonEmpty!2937 ((_ is ValueCellFull!863) mapValue!2937)) b!62111))

(assert (= (and b!62110 ((_ is ValueCellFull!863) mapDefault!2938)) b!62122))

(assert (= b!62113 b!62110))

(assert (= b!62126 b!62113))

(assert (= b!62115 b!62126))

(assert (= start!8874 b!62115))

(assert (= (and b!62119 condMapEmpty!2938) mapIsEmpty!2938))

(assert (= (and b!62119 (not condMapEmpty!2938)) mapNonEmpty!2938))

(assert (= (and mapNonEmpty!2938 ((_ is ValueCellFull!863) mapValue!2938)) b!62123))

(assert (= (and b!62119 ((_ is ValueCellFull!863) mapDefault!2937)) b!62121))

(assert (= b!62120 b!62119))

(assert (= start!8874 b!62120))

(declare-fun b_lambda!2777 () Bool)

(assert (=> (not b_lambda!2777) (not b!62109)))

(declare-fun t!4812 () Bool)

(declare-fun tb!1361 () Bool)

(assert (=> (and b!62113 (= (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2087 (v!2419 (underlying!233 thiss!992)))) t!4812) tb!1361))

(declare-fun result!2435 () Bool)

(assert (=> tb!1361 (= result!2435 tp_is_empty!2413)))

(assert (=> b!62109 t!4812))

(declare-fun b_and!3797 () Bool)

(assert (= b_and!3793 (and (=> t!4812 result!2435) b_and!3797)))

(declare-fun tb!1363 () Bool)

(declare-fun t!4814 () Bool)

(assert (=> (and b!62120 (= (defaultEntry!2087 newMap!16) (defaultEntry!2087 (v!2419 (underlying!233 thiss!992)))) t!4814) tb!1363))

(declare-fun result!2439 () Bool)

(assert (= result!2439 result!2435))

(assert (=> b!62109 t!4814))

(declare-fun b_and!3799 () Bool)

(assert (= b_and!3795 (and (=> t!4814 result!2439) b_and!3799)))

(declare-fun m!55695 () Bool)

(assert (=> b!62112 m!55695))

(declare-fun m!55697 () Bool)

(assert (=> b!62109 m!55697))

(declare-fun m!55699 () Bool)

(assert (=> b!62109 m!55699))

(declare-fun m!55701 () Bool)

(assert (=> b!62109 m!55701))

(declare-fun m!55703 () Bool)

(assert (=> b!62109 m!55703))

(declare-fun m!55705 () Bool)

(assert (=> b!62109 m!55705))

(assert (=> b!62109 m!55703))

(assert (=> b!62109 m!55699))

(assert (=> b!62109 m!55703))

(assert (=> b!62109 m!55701))

(declare-fun m!55707 () Bool)

(assert (=> b!62109 m!55707))

(assert (=> b!62109 m!55697))

(declare-fun m!55709 () Bool)

(assert (=> b!62117 m!55709))

(declare-fun m!55711 () Bool)

(assert (=> b!62117 m!55711))

(assert (=> b!62117 m!55703))

(declare-fun m!55713 () Bool)

(assert (=> b!62117 m!55713))

(assert (=> b!62117 m!55703))

(assert (=> b!62117 m!55703))

(declare-fun m!55715 () Bool)

(assert (=> b!62117 m!55715))

(assert (=> b!62117 m!55703))

(declare-fun m!55717 () Bool)

(assert (=> b!62117 m!55717))

(assert (=> b!62127 m!55703))

(declare-fun m!55719 () Bool)

(assert (=> b!62127 m!55719))

(declare-fun m!55721 () Bool)

(assert (=> b!62127 m!55721))

(declare-fun m!55723 () Bool)

(assert (=> b!62120 m!55723))

(declare-fun m!55725 () Bool)

(assert (=> b!62120 m!55725))

(declare-fun m!55727 () Bool)

(assert (=> b!62113 m!55727))

(declare-fun m!55729 () Bool)

(assert (=> b!62113 m!55729))

(declare-fun m!55731 () Bool)

(assert (=> mapNonEmpty!2937 m!55731))

(declare-fun m!55733 () Bool)

(assert (=> b!62116 m!55733))

(declare-fun m!55735 () Bool)

(assert (=> mapNonEmpty!2938 m!55735))

(declare-fun m!55737 () Bool)

(assert (=> start!8874 m!55737))

(check-sat (not b!62109) (not b_next!1995) (not b!62120) (not b!62112) tp_is_empty!2413 (not start!8874) (not b_lambda!2777) b_and!3799 (not mapNonEmpty!2937) (not b!62113) b_and!3797 (not b!62116) (not b!62127) (not mapNonEmpty!2938) (not b!62117) (not b_next!1993))
(check-sat b_and!3797 b_and!3799 (not b_next!1993) (not b_next!1995))
(get-model)

(declare-fun b_lambda!2783 () Bool)

(assert (= b_lambda!2777 (or (and b!62113 b_free!1993) (and b!62120 b_free!1995 (= (defaultEntry!2087 newMap!16) (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))))) b_lambda!2783)))

(check-sat (not b!62109) (not b_next!1995) (not b!62120) (not b!62112) tp_is_empty!2413 (not start!8874) b_and!3799 (not mapNonEmpty!2937) (not b_lambda!2783) (not b!62113) b_and!3797 (not b!62116) (not b!62127) (not mapNonEmpty!2938) (not b!62117) (not b_next!1993))
(check-sat b_and!3797 b_and!3799 (not b_next!1993) (not b_next!1995))
(get-model)

(declare-fun d!12605 () Bool)

(declare-fun e!40892 () Bool)

(assert (=> d!12605 e!40892))

(declare-fun res!34187 () Bool)

(assert (=> d!12605 (=> res!34187 e!40892)))

(declare-fun lt!25899 () Bool)

(assert (=> d!12605 (= res!34187 (not lt!25899))))

(declare-fun lt!25900 () Bool)

(assert (=> d!12605 (= lt!25899 lt!25900)))

(declare-fun lt!25898 () Unit!1680)

(declare-fun e!40891 () Unit!1680)

(assert (=> d!12605 (= lt!25898 e!40891)))

(declare-fun c!8260 () Bool)

(assert (=> d!12605 (= c!8260 lt!25900)))

(declare-fun containsKey!130 (List!1429 (_ BitVec 64)) Bool)

(assert (=> d!12605 (= lt!25900 (containsKey!130 (toList!691 lt!25841) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> d!12605 (= (contains!686 lt!25841 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) lt!25899)))

(declare-fun b!62254 () Bool)

(declare-fun lt!25901 () Unit!1680)

(assert (=> b!62254 (= e!40891 lt!25901)))

(declare-fun lemmaContainsKeyImpliesGetValueByKeyDefined!78 (List!1429 (_ BitVec 64)) Unit!1680)

(assert (=> b!62254 (= lt!25901 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 lt!25841) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-datatypes ((Option!133 0))(
  ( (Some!132 (v!2425 V!2865)) (None!131) )
))
(declare-fun isDefined!79 (Option!133) Bool)

(declare-fun getValueByKey!127 (List!1429 (_ BitVec 64)) Option!133)

(assert (=> b!62254 (isDefined!79 (getValueByKey!127 (toList!691 lt!25841) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun b!62255 () Bool)

(declare-fun Unit!1688 () Unit!1680)

(assert (=> b!62255 (= e!40891 Unit!1688)))

(declare-fun b!62256 () Bool)

(assert (=> b!62256 (= e!40892 (isDefined!79 (getValueByKey!127 (toList!691 lt!25841) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355))))))

(assert (= (and d!12605 c!8260) b!62254))

(assert (= (and d!12605 (not c!8260)) b!62255))

(assert (= (and d!12605 (not res!34187)) b!62256))

(assert (=> d!12605 m!55703))

(declare-fun m!55827 () Bool)

(assert (=> d!12605 m!55827))

(assert (=> b!62254 m!55703))

(declare-fun m!55829 () Bool)

(assert (=> b!62254 m!55829))

(assert (=> b!62254 m!55703))

(declare-fun m!55831 () Bool)

(assert (=> b!62254 m!55831))

(assert (=> b!62254 m!55831))

(declare-fun m!55833 () Bool)

(assert (=> b!62254 m!55833))

(assert (=> b!62256 m!55703))

(assert (=> b!62256 m!55831))

(assert (=> b!62256 m!55831))

(assert (=> b!62256 m!55833))

(assert (=> b!62109 d!12605))

(declare-fun b!62337 () Bool)

(declare-fun e!40939 () Bool)

(declare-fun call!4856 () Bool)

(assert (=> b!62337 (= e!40939 (not call!4856))))

(declare-fun bm!4853 () Bool)

(declare-datatypes ((SeekEntryResult!223 0))(
  ( (MissingZero!223 (index!3017 (_ BitVec 32))) (Found!223 (index!3018 (_ BitVec 32))) (Intermediate!223 (undefined!1035 Bool) (index!3019 (_ BitVec 32)) (x!10301 (_ BitVec 32))) (Undefined!223) (MissingVacant!223 (index!3020 (_ BitVec 32))) )
))
(declare-fun call!4873 () SeekEntryResult!223)

(declare-fun call!4876 () SeekEntryResult!223)

(assert (=> bm!4853 (= call!4873 call!4876)))

(declare-fun b!62338 () Bool)

(declare-fun lt!25959 () Unit!1680)

(declare-fun e!40952 () Unit!1680)

(assert (=> b!62338 (= lt!25959 e!40952)))

(declare-fun c!8297 () Bool)

(declare-fun call!4868 () Bool)

(assert (=> b!62338 (= c!8297 call!4868)))

(declare-fun e!40944 () tuple2!2030)

(assert (=> b!62338 (= e!40944 (tuple2!2031 false newMap!16))))

(declare-fun bm!4854 () Bool)

(declare-fun call!4858 () Bool)

(declare-fun call!4874 () Bool)

(assert (=> bm!4854 (= call!4858 call!4874)))

(declare-fun b!62339 () Bool)

(declare-fun e!40953 () tuple2!2030)

(assert (=> b!62339 (= e!40953 e!40944)))

(declare-fun lt!25967 () SeekEntryResult!223)

(declare-fun seekEntryOrOpen!0 ((_ BitVec 64) array!3743 (_ BitVec 32)) SeekEntryResult!223)

(assert (=> b!62339 (= lt!25967 (seekEntryOrOpen!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (_keys!3719 newMap!16) (mask!5993 newMap!16)))))

(declare-fun c!8290 () Bool)

(assert (=> b!62339 (= c!8290 ((_ is Undefined!223) lt!25967))))

(declare-fun b!62340 () Bool)

(declare-fun e!40949 () Bool)

(declare-fun lt!25982 () SeekEntryResult!223)

(assert (=> b!62340 (= e!40949 ((_ is Undefined!223) lt!25982))))

(declare-fun b!62341 () Bool)

(declare-fun c!8291 () Bool)

(assert (=> b!62341 (= c!8291 ((_ is MissingVacant!223) lt!25982))))

(declare-fun e!40943 () Bool)

(assert (=> b!62341 (= e!40943 e!40949)))

(declare-fun b!62342 () Bool)

(declare-fun lt!25958 () Unit!1680)

(declare-fun lt!25957 () Unit!1680)

(assert (=> b!62342 (= lt!25958 lt!25957)))

(declare-fun call!4871 () ListLongMap!1351)

(declare-fun call!4879 () ListLongMap!1351)

(assert (=> b!62342 (= call!4871 call!4879)))

(declare-fun lt!25962 () (_ BitVec 32))

(declare-fun lemmaChangeZeroKeyThenAddPairToListMap!17 (array!3743 array!3745 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 V!2865 Int) Unit!1680)

(assert (=> b!62342 (= lt!25957 (lemmaChangeZeroKeyThenAddPairToListMap!17 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) lt!25962 (zeroValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1999 newMap!16) (defaultEntry!2087 newMap!16)))))

(assert (=> b!62342 (= lt!25962 (bvor (extraKeys!1966 newMap!16) #b00000000000000000000000000000001))))

(declare-fun e!40946 () tuple2!2030)

(assert (=> b!62342 (= e!40946 (tuple2!2031 true (LongMapFixedSize!635 (defaultEntry!2087 newMap!16) (mask!5993 newMap!16) (bvor (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1999 newMap!16) (_size!366 newMap!16) (_keys!3719 newMap!16) (_values!2070 newMap!16) (_vacant!366 newMap!16))))))

(declare-fun b!62343 () Bool)

(assert (=> b!62343 (= e!40949 e!40939)))

(declare-fun res!34219 () Bool)

(declare-fun call!4859 () Bool)

(assert (=> b!62343 (= res!34219 call!4859)))

(assert (=> b!62343 (=> (not res!34219) (not e!40939))))

(declare-fun bm!4855 () Bool)

(declare-fun call!4866 () Bool)

(assert (=> bm!4855 (= call!4866 call!4874)))

(declare-fun b!62344 () Bool)

(declare-fun res!34225 () Bool)

(declare-fun e!40940 () Bool)

(assert (=> b!62344 (=> (not res!34225) (not e!40940))))

(assert (=> b!62344 (= res!34225 (= (select (arr!1790 (_keys!3719 newMap!16)) (index!3017 lt!25982)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62345 () Bool)

(declare-fun c!8298 () Bool)

(assert (=> b!62345 (= c!8298 ((_ is MissingVacant!223) lt!25967))))

(declare-fun e!40936 () tuple2!2030)

(assert (=> b!62345 (= e!40944 e!40936)))

(declare-fun b!62346 () Bool)

(declare-fun e!40951 () Unit!1680)

(declare-fun Unit!1689 () Unit!1680)

(assert (=> b!62346 (= e!40951 Unit!1689)))

(declare-fun lt!25969 () Unit!1680)

(declare-fun call!4857 () Unit!1680)

(assert (=> b!62346 (= lt!25969 call!4857)))

(declare-fun call!4862 () SeekEntryResult!223)

(assert (=> b!62346 (= lt!25982 call!4862)))

(declare-fun c!8292 () Bool)

(assert (=> b!62346 (= c!8292 ((_ is MissingZero!223) lt!25982))))

(assert (=> b!62346 e!40943))

(declare-fun lt!25964 () Unit!1680)

(assert (=> b!62346 (= lt!25964 lt!25969)))

(assert (=> b!62346 false))

(declare-fun call!4877 () ListLongMap!1351)

(declare-fun b!62347 () Bool)

(declare-fun e!40945 () Bool)

(declare-fun call!4872 () ListLongMap!1351)

(declare-fun +!82 (ListLongMap!1351 tuple2!2032) ListLongMap!1351)

(assert (=> b!62347 (= e!40945 (= call!4877 (+!82 call!4872 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!62348 () Bool)

(declare-fun lt!25976 () SeekEntryResult!223)

(declare-fun e!40948 () Bool)

(assert (=> b!62348 (= e!40948 (= (select (arr!1790 (_keys!3719 newMap!16)) (index!3018 lt!25976)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun b!62349 () Bool)

(declare-fun e!40938 () tuple2!2030)

(assert (=> b!62349 (= e!40936 e!40938)))

(declare-fun c!8296 () Bool)

(assert (=> b!62349 (= c!8296 ((_ is MissingZero!223) lt!25967))))

(declare-fun b!62350 () Bool)

(assert (=> b!62350 (= e!40953 e!40946)))

(declare-fun c!8289 () Bool)

(assert (=> b!62350 (= c!8289 (= (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun call!4864 () Bool)

(declare-fun bm!4856 () Bool)

(assert (=> bm!4856 (= call!4864 (arrayContainsKey!0 (_keys!3719 newMap!16) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!62351 () Bool)

(declare-fun res!34223 () Bool)

(declare-fun e!40941 () Bool)

(assert (=> b!62351 (=> (not res!34223) (not e!40941))))

(declare-fun call!4860 () Bool)

(assert (=> b!62351 (= res!34223 call!4860)))

(declare-fun e!40935 () Bool)

(assert (=> b!62351 (= e!40935 e!40941)))

(declare-fun b!62352 () Bool)

(declare-fun res!34228 () Bool)

(declare-fun lt!25956 () SeekEntryResult!223)

(assert (=> b!62352 (= res!34228 (= (select (arr!1790 (_keys!3719 newMap!16)) (index!3020 lt!25956)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!40954 () Bool)

(assert (=> b!62352 (=> (not res!34228) (not e!40954))))

(declare-fun b!62353 () Bool)

(declare-fun lt!25977 () tuple2!2030)

(declare-fun call!4869 () tuple2!2030)

(assert (=> b!62353 (= lt!25977 call!4869)))

(assert (=> b!62353 (= e!40938 (tuple2!2031 (_1!1026 lt!25977) (_2!1026 lt!25977)))))

(declare-fun b!62354 () Bool)

(declare-fun c!8293 () Bool)

(assert (=> b!62354 (= c!8293 ((_ is MissingVacant!223) lt!25956))))

(declare-fun e!40937 () Bool)

(assert (=> b!62354 (= e!40935 e!40937)))

(declare-fun bm!4857 () Bool)

(assert (=> bm!4857 (= call!4876 (seekEntryOrOpen!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (_keys!3719 newMap!16) (mask!5993 newMap!16)))))

(declare-fun bm!4858 () Bool)

(declare-fun c!8299 () Bool)

(declare-fun call!4870 () ListLongMap!1351)

(declare-fun lt!25974 () array!3745)

(assert (=> bm!4858 (= call!4870 (getCurrentListMap!391 (_keys!3719 newMap!16) (ite (or c!8299 c!8290) (_values!2070 newMap!16) lt!25974) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun b!62355 () Bool)

(declare-fun e!40947 () ListLongMap!1351)

(declare-fun call!4863 () ListLongMap!1351)

(assert (=> b!62355 (= e!40947 call!4863)))

(declare-fun call!4878 () ListLongMap!1351)

(declare-fun call!4865 () ListLongMap!1351)

(declare-fun bm!4859 () Bool)

(assert (=> bm!4859 (= call!4865 (+!82 (ite c!8299 call!4878 call!4863) (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!25973 () SeekEntryResult!223)

(declare-fun e!40942 () Bool)

(declare-fun b!62356 () Bool)

(assert (=> b!62356 (= e!40942 (= (select (arr!1790 (_keys!3719 newMap!16)) (index!3018 lt!25973)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun bm!4860 () Bool)

(assert (=> bm!4860 (= call!4872 (map!1117 newMap!16))))

(declare-fun b!62357 () Bool)

(declare-fun Unit!1690 () Unit!1680)

(assert (=> b!62357 (= e!40952 Unit!1690)))

(declare-fun lt!25981 () Unit!1680)

(declare-fun call!4861 () Unit!1680)

(assert (=> b!62357 (= lt!25981 call!4861)))

(assert (=> b!62357 (= lt!25976 call!4873)))

(declare-fun res!34222 () Bool)

(assert (=> b!62357 (= res!34222 ((_ is Found!223) lt!25976))))

(assert (=> b!62357 (=> (not res!34222) (not e!40948))))

(assert (=> b!62357 e!40948))

(declare-fun lt!25971 () Unit!1680)

(assert (=> b!62357 (= lt!25971 lt!25981)))

(assert (=> b!62357 false))

(declare-fun bm!4861 () Bool)

(declare-fun c!8295 () Bool)

(assert (=> bm!4861 (= c!8295 c!8290)))

(assert (=> bm!4861 (= call!4868 (contains!686 e!40947 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun bm!4862 () Bool)

(declare-fun call!4875 () Bool)

(assert (=> bm!4862 (= call!4875 call!4864)))

(declare-fun bm!4863 () Bool)

(assert (=> bm!4863 (= call!4862 call!4876)))

(declare-fun b!62358 () Bool)

(declare-fun e!40950 () Bool)

(declare-fun e!40955 () Bool)

(assert (=> b!62358 (= e!40950 e!40955)))

(declare-fun c!8288 () Bool)

(declare-fun lt!25975 () tuple2!2030)

(assert (=> b!62358 (= c!8288 (_1!1026 lt!25975))))

(declare-fun bm!4864 () Bool)

(assert (=> bm!4864 (= call!4860 call!4866)))

(declare-fun b!62359 () Bool)

(declare-fun call!4867 () ListLongMap!1351)

(assert (=> b!62359 (= e!40947 call!4867)))

(declare-fun bm!4865 () Bool)

(declare-fun updateHelperNewKey!17 (LongMapFixedSize!634 (_ BitVec 64) V!2865 (_ BitVec 32)) tuple2!2030)

(assert (=> bm!4865 (= call!4869 (updateHelperNewKey!17 newMap!16 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967))))))

(declare-fun b!62360 () Bool)

(assert (=> b!62360 (= e!40955 (= call!4877 call!4872))))

(declare-fun bm!4866 () Bool)

(declare-fun lemmaInListMapThenSeekEntryOrOpenFindsIt!17 (array!3743 array!3745 (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 (_ BitVec 64) Int) Unit!1680)

(assert (=> bm!4866 (= call!4861 (lemmaInListMapThenSeekEntryOrOpenFindsIt!17 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (defaultEntry!2087 newMap!16)))))

(declare-fun b!62361 () Bool)

(assert (=> b!62361 (= e!40954 (not call!4875))))

(declare-fun b!62362 () Bool)

(declare-fun lt!25965 () Unit!1680)

(assert (=> b!62362 (= e!40951 lt!25965)))

(assert (=> b!62362 (= lt!25965 call!4861)))

(assert (=> b!62362 (= lt!25973 call!4862)))

(declare-fun res!34221 () Bool)

(assert (=> b!62362 (= res!34221 ((_ is Found!223) lt!25973))))

(assert (=> b!62362 (=> (not res!34221) (not e!40942))))

(assert (=> b!62362 e!40942))

(declare-fun b!62363 () Bool)

(assert (=> b!62363 (= e!40937 ((_ is Undefined!223) lt!25956))))

(declare-fun b!62364 () Bool)

(assert (=> b!62364 (= e!40955 e!40945)))

(declare-fun res!34220 () Bool)

(assert (=> b!62364 (= res!34220 (contains!686 call!4877 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> b!62364 (=> (not res!34220) (not e!40945))))

(declare-fun b!62365 () Bool)

(declare-fun res!34217 () Bool)

(assert (=> b!62365 (= res!34217 call!4858)))

(assert (=> b!62365 (=> (not res!34217) (not e!40942))))

(declare-fun b!62366 () Bool)

(assert (=> b!62366 (= e!40940 (not call!4856))))

(declare-fun bm!4867 () Bool)

(declare-fun lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!17 (array!3743 array!3745 (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 (_ BitVec 64) Int) Unit!1680)

(assert (=> bm!4867 (= call!4857 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!17 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (defaultEntry!2087 newMap!16)))))

(declare-fun b!62367 () Bool)

(assert (=> b!62367 (= e!40941 (not call!4875))))

(declare-fun d!12607 () Bool)

(assert (=> d!12607 e!40950))

(declare-fun res!34226 () Bool)

(assert (=> d!12607 (=> (not res!34226) (not e!40950))))

(assert (=> d!12607 (= res!34226 (valid!269 (_2!1026 lt!25975)))))

(assert (=> d!12607 (= lt!25975 e!40953)))

(assert (=> d!12607 (= c!8299 (= (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (bvneg (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355))))))

(assert (=> d!12607 (valid!269 newMap!16)))

(assert (=> d!12607 (= (update!90 newMap!16 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) lt!25975)))

(declare-fun bm!4868 () Bool)

(assert (=> bm!4868 (= call!4859 call!4858)))

(declare-fun lt!25978 () (_ BitVec 32))

(declare-fun bm!4869 () Bool)

(assert (=> bm!4869 (= call!4863 (getCurrentListMap!391 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (ite c!8299 (ite c!8289 lt!25962 lt!25978) (extraKeys!1966 newMap!16)) (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)) (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun b!62368 () Bool)

(declare-fun res!34218 () Bool)

(assert (=> b!62368 (=> (not res!34218) (not e!40940))))

(assert (=> b!62368 (= res!34218 call!4859)))

(assert (=> b!62368 (= e!40943 e!40940)))

(declare-fun bm!4870 () Bool)

(assert (=> bm!4870 (= call!4879 call!4863)))

(declare-fun bm!4871 () Bool)

(assert (=> bm!4871 (= call!4878 call!4870)))

(declare-fun bm!4872 () Bool)

(assert (=> bm!4872 (= call!4856 call!4864)))

(declare-fun b!62369 () Bool)

(assert (=> b!62369 (= e!40937 e!40954)))

(declare-fun res!34224 () Bool)

(assert (=> b!62369 (= res!34224 call!4860)))

(assert (=> b!62369 (=> (not res!34224) (not e!40954))))

(declare-fun bm!4873 () Bool)

(assert (=> bm!4873 (= call!4867 call!4870)))

(declare-fun b!62370 () Bool)

(declare-fun res!34229 () Bool)

(assert (=> b!62370 (=> (not res!34229) (not e!40941))))

(assert (=> b!62370 (= res!34229 (= (select (arr!1790 (_keys!3719 newMap!16)) (index!3017 lt!25956)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4874 () Bool)

(declare-fun c!8294 () Bool)

(declare-fun c!8287 () Bool)

(declare-fun inRange!0 ((_ BitVec 32) (_ BitVec 32)) Bool)

(assert (=> bm!4874 (= call!4874 (inRange!0 (ite c!8290 (ite c!8297 (index!3018 lt!25976) (ite c!8294 (index!3017 lt!25956) (index!3020 lt!25956))) (ite c!8287 (index!3018 lt!25973) (ite c!8292 (index!3017 lt!25982) (index!3020 lt!25982)))) (mask!5993 newMap!16)))))

(declare-fun b!62371 () Bool)

(declare-fun lt!25963 () Unit!1680)

(declare-fun lt!25960 () Unit!1680)

(assert (=> b!62371 (= lt!25963 lt!25960)))

(assert (=> b!62371 (= call!4871 call!4879)))

(declare-fun lemmaChangeLongMinValueKeyThenAddPairToListMap!17 (array!3743 array!3745 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 V!2865 Int) Unit!1680)

(assert (=> b!62371 (= lt!25960 (lemmaChangeLongMinValueKeyThenAddPairToListMap!17 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) lt!25978 (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2087 newMap!16)))))

(assert (=> b!62371 (= lt!25978 (bvor (extraKeys!1966 newMap!16) #b00000000000000000000000000000010))))

(assert (=> b!62371 (= e!40946 (tuple2!2031 true (LongMapFixedSize!635 (defaultEntry!2087 newMap!16) (mask!5993 newMap!16) (bvor (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) (zeroValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (_size!366 newMap!16) (_keys!3719 newMap!16) (_values!2070 newMap!16) (_vacant!366 newMap!16))))))

(declare-fun b!62372 () Bool)

(declare-fun res!34227 () Bool)

(assert (=> b!62372 (= res!34227 call!4866)))

(assert (=> b!62372 (=> (not res!34227) (not e!40948))))

(declare-fun b!62373 () Bool)

(declare-fun res!34216 () Bool)

(assert (=> b!62373 (= res!34216 (= (select (arr!1790 (_keys!3719 newMap!16)) (index!3020 lt!25982)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62373 (=> (not res!34216) (not e!40939))))

(declare-fun b!62374 () Bool)

(declare-fun lt!25979 () Unit!1680)

(declare-fun lt!25972 () Unit!1680)

(assert (=> b!62374 (= lt!25979 lt!25972)))

(assert (=> b!62374 (contains!686 call!4867 (select (arr!1790 (_keys!3719 newMap!16)) (index!3018 lt!25967)))))

(declare-fun lemmaValidKeyInArrayIsInListMap!77 (array!3743 array!3745 (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 (_ BitVec 32) Int) Unit!1680)

(assert (=> b!62374 (= lt!25972 (lemmaValidKeyInArrayIsInListMap!77 (_keys!3719 newMap!16) lt!25974 (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (index!3018 lt!25967) (defaultEntry!2087 newMap!16)))))

(assert (=> b!62374 (= lt!25974 (array!3746 (store (arr!1791 (_values!2070 newMap!16)) (index!3018 lt!25967) (ValueCellFull!863 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2023 (_values!2070 newMap!16))))))

(declare-fun lt!25961 () Unit!1680)

(declare-fun lt!25968 () Unit!1680)

(assert (=> b!62374 (= lt!25961 lt!25968)))

(assert (=> b!62374 (= call!4865 (getCurrentListMap!391 (_keys!3719 newMap!16) (array!3746 (store (arr!1791 (_values!2070 newMap!16)) (index!3018 lt!25967) (ValueCellFull!863 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2023 (_values!2070 newMap!16))) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!17 (array!3743 array!3745 (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 (_ BitVec 32) (_ BitVec 64) V!2865 Int) Unit!1680)

(assert (=> b!62374 (= lt!25968 (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!17 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (index!3018 lt!25967) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2087 newMap!16)))))

(declare-fun lt!25980 () Unit!1680)

(assert (=> b!62374 (= lt!25980 e!40951)))

(assert (=> b!62374 (= c!8287 call!4868)))

(assert (=> b!62374 (= e!40938 (tuple2!2031 true (LongMapFixedSize!635 (defaultEntry!2087 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (_size!366 newMap!16) (_keys!3719 newMap!16) (array!3746 (store (arr!1791 (_values!2070 newMap!16)) (index!3018 lt!25967) (ValueCellFull!863 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2023 (_values!2070 newMap!16))) (_vacant!366 newMap!16))))))

(declare-fun bm!4875 () Bool)

(assert (=> bm!4875 (= call!4871 call!4865)))

(declare-fun bm!4876 () Bool)

(assert (=> bm!4876 (= call!4877 (map!1117 (_2!1026 lt!25975)))))

(declare-fun b!62375 () Bool)

(declare-fun lt!25970 () tuple2!2030)

(assert (=> b!62375 (= e!40936 (tuple2!2031 (_1!1026 lt!25970) (_2!1026 lt!25970)))))

(assert (=> b!62375 (= lt!25970 call!4869)))

(declare-fun b!62376 () Bool)

(declare-fun lt!25966 () Unit!1680)

(assert (=> b!62376 (= e!40952 lt!25966)))

(assert (=> b!62376 (= lt!25966 call!4857)))

(assert (=> b!62376 (= lt!25956 call!4873)))

(assert (=> b!62376 (= c!8294 ((_ is MissingZero!223) lt!25956))))

(assert (=> b!62376 e!40935))

(assert (= (and d!12607 c!8299) b!62350))

(assert (= (and d!12607 (not c!8299)) b!62339))

(assert (= (and b!62350 c!8289) b!62342))

(assert (= (and b!62350 (not c!8289)) b!62371))

(assert (= (or b!62342 b!62371) bm!4870))

(assert (= (or b!62342 b!62371) bm!4871))

(assert (= (or b!62342 b!62371) bm!4875))

(assert (= (and b!62339 c!8290) b!62338))

(assert (= (and b!62339 (not c!8290)) b!62345))

(assert (= (and b!62338 c!8297) b!62357))

(assert (= (and b!62338 (not c!8297)) b!62376))

(assert (= (and b!62357 res!34222) b!62372))

(assert (= (and b!62372 res!34227) b!62348))

(assert (= (and b!62376 c!8294) b!62351))

(assert (= (and b!62376 (not c!8294)) b!62354))

(assert (= (and b!62351 res!34223) b!62370))

(assert (= (and b!62370 res!34229) b!62367))

(assert (= (and b!62354 c!8293) b!62369))

(assert (= (and b!62354 (not c!8293)) b!62363))

(assert (= (and b!62369 res!34224) b!62352))

(assert (= (and b!62352 res!34228) b!62361))

(assert (= (or b!62351 b!62369) bm!4864))

(assert (= (or b!62367 b!62361) bm!4862))

(assert (= (or b!62372 bm!4864) bm!4855))

(assert (= (or b!62357 b!62376) bm!4853))

(assert (= (and b!62345 c!8298) b!62375))

(assert (= (and b!62345 (not c!8298)) b!62349))

(assert (= (and b!62349 c!8296) b!62353))

(assert (= (and b!62349 (not c!8296)) b!62374))

(assert (= (and b!62374 c!8287) b!62362))

(assert (= (and b!62374 (not c!8287)) b!62346))

(assert (= (and b!62362 res!34221) b!62365))

(assert (= (and b!62365 res!34217) b!62356))

(assert (= (and b!62346 c!8292) b!62368))

(assert (= (and b!62346 (not c!8292)) b!62341))

(assert (= (and b!62368 res!34218) b!62344))

(assert (= (and b!62344 res!34225) b!62366))

(assert (= (and b!62341 c!8291) b!62343))

(assert (= (and b!62341 (not c!8291)) b!62340))

(assert (= (and b!62343 res!34219) b!62373))

(assert (= (and b!62373 res!34216) b!62337))

(assert (= (or b!62368 b!62343) bm!4868))

(assert (= (or b!62366 b!62337) bm!4872))

(assert (= (or b!62365 bm!4868) bm!4854))

(assert (= (or b!62362 b!62346) bm!4863))

(assert (= (or b!62375 b!62353) bm!4865))

(assert (= (or b!62338 b!62374) bm!4873))

(assert (= (or bm!4853 bm!4863) bm!4857))

(assert (= (or bm!4862 bm!4872) bm!4856))

(assert (= (or b!62357 b!62362) bm!4866))

(assert (= (or b!62376 b!62346) bm!4867))

(assert (= (or bm!4855 bm!4854) bm!4874))

(assert (= (or b!62338 b!62374) bm!4861))

(assert (= (and bm!4861 c!8295) b!62359))

(assert (= (and bm!4861 (not c!8295)) b!62355))

(assert (= (or bm!4871 bm!4873) bm!4858))

(assert (= (or bm!4870 b!62355 b!62374) bm!4869))

(assert (= (or bm!4875 b!62374) bm!4859))

(assert (= (and d!12607 res!34226) b!62358))

(assert (= (and b!62358 c!8288) b!62364))

(assert (= (and b!62358 (not c!8288)) b!62360))

(assert (= (and b!62364 res!34220) b!62347))

(assert (= (or b!62347 b!62360) bm!4860))

(assert (= (or b!62364 b!62347 b!62360) bm!4876))

(declare-fun m!55835 () Bool)

(assert (=> b!62352 m!55835))

(assert (=> bm!4865 m!55703))

(assert (=> bm!4865 m!55701))

(declare-fun m!55837 () Bool)

(assert (=> bm!4865 m!55837))

(assert (=> bm!4861 m!55703))

(declare-fun m!55839 () Bool)

(assert (=> bm!4861 m!55839))

(declare-fun m!55841 () Bool)

(assert (=> bm!4874 m!55841))

(assert (=> b!62339 m!55703))

(declare-fun m!55843 () Bool)

(assert (=> b!62339 m!55843))

(assert (=> b!62364 m!55703))

(declare-fun m!55845 () Bool)

(assert (=> b!62364 m!55845))

(declare-fun m!55847 () Bool)

(assert (=> b!62373 m!55847))

(declare-fun m!55849 () Bool)

(assert (=> b!62344 m!55849))

(declare-fun m!55851 () Bool)

(assert (=> b!62347 m!55851))

(assert (=> b!62371 m!55701))

(declare-fun m!55853 () Bool)

(assert (=> b!62371 m!55853))

(assert (=> bm!4856 m!55703))

(declare-fun m!55855 () Bool)

(assert (=> bm!4856 m!55855))

(declare-fun m!55857 () Bool)

(assert (=> b!62374 m!55857))

(declare-fun m!55859 () Bool)

(assert (=> b!62374 m!55859))

(declare-fun m!55861 () Bool)

(assert (=> b!62374 m!55861))

(declare-fun m!55863 () Bool)

(assert (=> b!62374 m!55863))

(assert (=> b!62374 m!55857))

(declare-fun m!55865 () Bool)

(assert (=> b!62374 m!55865))

(assert (=> b!62374 m!55703))

(assert (=> b!62374 m!55701))

(declare-fun m!55867 () Bool)

(assert (=> b!62374 m!55867))

(assert (=> bm!4867 m!55703))

(declare-fun m!55869 () Bool)

(assert (=> bm!4867 m!55869))

(assert (=> bm!4866 m!55703))

(declare-fun m!55871 () Bool)

(assert (=> bm!4866 m!55871))

(assert (=> bm!4857 m!55703))

(assert (=> bm!4857 m!55843))

(declare-fun m!55873 () Bool)

(assert (=> b!62356 m!55873))

(declare-fun m!55875 () Bool)

(assert (=> bm!4858 m!55875))

(declare-fun m!55877 () Bool)

(assert (=> d!12607 m!55877))

(assert (=> d!12607 m!55733))

(declare-fun m!55879 () Bool)

(assert (=> b!62348 m!55879))

(declare-fun m!55881 () Bool)

(assert (=> b!62370 m!55881))

(declare-fun m!55883 () Bool)

(assert (=> bm!4869 m!55883))

(declare-fun m!55885 () Bool)

(assert (=> bm!4859 m!55885))

(assert (=> b!62342 m!55701))

(declare-fun m!55887 () Bool)

(assert (=> b!62342 m!55887))

(assert (=> bm!4860 m!55719))

(declare-fun m!55889 () Bool)

(assert (=> bm!4876 m!55889))

(assert (=> b!62109 d!12607))

(declare-fun d!12609 () Bool)

(declare-fun c!8302 () Bool)

(assert (=> d!12609 (= c!8302 ((_ is ValueCellFull!863) (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun e!40958 () V!2865)

(assert (=> d!12609 (= (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!40958)))

(declare-fun b!62381 () Bool)

(declare-fun get!1090 (ValueCell!863 V!2865) V!2865)

(assert (=> b!62381 (= e!40958 (get!1090 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!62382 () Bool)

(declare-fun get!1091 (ValueCell!863 V!2865) V!2865)

(assert (=> b!62382 (= e!40958 (get!1091 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12609 c!8302) b!62381))

(assert (= (and d!12609 (not c!8302)) b!62382))

(assert (=> b!62381 m!55697))

(assert (=> b!62381 m!55699))

(declare-fun m!55891 () Bool)

(assert (=> b!62381 m!55891))

(assert (=> b!62382 m!55697))

(assert (=> b!62382 m!55699))

(declare-fun m!55893 () Bool)

(assert (=> b!62382 m!55893))

(assert (=> b!62109 d!12609))

(declare-fun d!12611 () Bool)

(assert (=> d!12611 (= (map!1117 newMap!16) (getCurrentListMap!391 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun bs!2714 () Bool)

(assert (= bs!2714 d!12611))

(declare-fun m!55895 () Bool)

(assert (=> bs!2714 m!55895))

(assert (=> b!62127 d!12611))

(declare-fun b!62425 () Bool)

(declare-fun e!40992 () ListLongMap!1351)

(declare-fun call!4900 () ListLongMap!1351)

(assert (=> b!62425 (= e!40992 call!4900)))

(declare-fun b!62427 () Bool)

(declare-fun e!40995 () Bool)

(declare-fun e!40993 () Bool)

(assert (=> b!62427 (= e!40995 e!40993)))

(declare-fun res!34251 () Bool)

(declare-fun call!4895 () Bool)

(assert (=> b!62427 (= res!34251 call!4895)))

(assert (=> b!62427 (=> (not res!34251) (not e!40993))))

(declare-fun b!62428 () Bool)

(declare-fun e!40989 () Bool)

(declare-fun validKeyInArray!0 ((_ BitVec 64)) Bool)

(assert (=> b!62428 (= e!40989 (validKeyInArray!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun c!8319 () Bool)

(declare-fun c!8317 () Bool)

(declare-fun call!4898 () ListLongMap!1351)

(declare-fun call!4896 () ListLongMap!1351)

(declare-fun call!4897 () ListLongMap!1351)

(declare-fun bm!4891 () Bool)

(declare-fun call!4894 () ListLongMap!1351)

(assert (=> bm!4891 (= call!4896 (+!82 (ite c!8317 call!4898 (ite c!8319 call!4894 call!4897)) (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!62429 () Bool)

(assert (=> b!62429 (= e!40995 (not call!4895))))

(declare-fun b!62430 () Bool)

(declare-fun e!40986 () ListLongMap!1351)

(assert (=> b!62430 (= e!40986 call!4900)))

(declare-fun b!62431 () Bool)

(declare-fun e!40985 () Bool)

(declare-fun lt!26027 () ListLongMap!1351)

(declare-fun apply!68 (ListLongMap!1351 (_ BitVec 64)) V!2865)

(assert (=> b!62431 (= e!40985 (= (apply!68 lt!26027 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))

(declare-fun b!62432 () Bool)

(assert (=> b!62432 (= e!40993 (= (apply!68 lt!26027 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))

(declare-fun bm!4892 () Bool)

(declare-fun getCurrentListMapNoExtraKeys!46 (array!3743 array!3745 (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 (_ BitVec 32) Int) ListLongMap!1351)

(assert (=> bm!4892 (= call!4898 (getCurrentListMapNoExtraKeys!46 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (_values!2070 (v!2419 (underlying!233 thiss!992))) (mask!5993 (v!2419 (underlying!233 thiss!992))) (extraKeys!1966 (v!2419 (underlying!233 thiss!992))) (zeroValue!1999 (v!2419 (underlying!233 thiss!992))) (minValue!1999 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2087 (v!2419 (underlying!233 thiss!992)))))))

(declare-fun e!40991 () Bool)

(declare-fun b!62433 () Bool)

(assert (=> b!62433 (= e!40991 (= (apply!68 lt!26027 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62433 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2023 (_values!2070 (v!2419 (underlying!233 thiss!992))))))))

(assert (=> b!62433 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun b!62434 () Bool)

(declare-fun e!40988 () Unit!1680)

(declare-fun lt!26038 () Unit!1680)

(assert (=> b!62434 (= e!40988 lt!26038)))

(declare-fun lt!26045 () ListLongMap!1351)

(assert (=> b!62434 (= lt!26045 (getCurrentListMapNoExtraKeys!46 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (_values!2070 (v!2419 (underlying!233 thiss!992))) (mask!5993 (v!2419 (underlying!233 thiss!992))) (extraKeys!1966 (v!2419 (underlying!233 thiss!992))) (zeroValue!1999 (v!2419 (underlying!233 thiss!992))) (minValue!1999 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2087 (v!2419 (underlying!233 thiss!992)))))))

(declare-fun lt!26041 () (_ BitVec 64))

(assert (=> b!62434 (= lt!26041 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26035 () (_ BitVec 64))

(assert (=> b!62434 (= lt!26035 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!26047 () Unit!1680)

(declare-fun addStillContains!44 (ListLongMap!1351 (_ BitVec 64) V!2865 (_ BitVec 64)) Unit!1680)

(assert (=> b!62434 (= lt!26047 (addStillContains!44 lt!26045 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))) lt!26035))))

(assert (=> b!62434 (contains!686 (+!82 lt!26045 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))) lt!26035)))

(declare-fun lt!26028 () Unit!1680)

(assert (=> b!62434 (= lt!26028 lt!26047)))

(declare-fun lt!26034 () ListLongMap!1351)

(assert (=> b!62434 (= lt!26034 (getCurrentListMapNoExtraKeys!46 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (_values!2070 (v!2419 (underlying!233 thiss!992))) (mask!5993 (v!2419 (underlying!233 thiss!992))) (extraKeys!1966 (v!2419 (underlying!233 thiss!992))) (zeroValue!1999 (v!2419 (underlying!233 thiss!992))) (minValue!1999 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2087 (v!2419 (underlying!233 thiss!992)))))))

(declare-fun lt!26042 () (_ BitVec 64))

(assert (=> b!62434 (= lt!26042 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26033 () (_ BitVec 64))

(assert (=> b!62434 (= lt!26033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!26036 () Unit!1680)

(declare-fun addApplyDifferent!44 (ListLongMap!1351 (_ BitVec 64) V!2865 (_ BitVec 64)) Unit!1680)

(assert (=> b!62434 (= lt!26036 (addApplyDifferent!44 lt!26034 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992))) lt!26033))))

(assert (=> b!62434 (= (apply!68 (+!82 lt!26034 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) lt!26033) (apply!68 lt!26034 lt!26033))))

(declare-fun lt!26030 () Unit!1680)

(assert (=> b!62434 (= lt!26030 lt!26036)))

(declare-fun lt!26048 () ListLongMap!1351)

(assert (=> b!62434 (= lt!26048 (getCurrentListMapNoExtraKeys!46 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (_values!2070 (v!2419 (underlying!233 thiss!992))) (mask!5993 (v!2419 (underlying!233 thiss!992))) (extraKeys!1966 (v!2419 (underlying!233 thiss!992))) (zeroValue!1999 (v!2419 (underlying!233 thiss!992))) (minValue!1999 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2087 (v!2419 (underlying!233 thiss!992)))))))

(declare-fun lt!26044 () (_ BitVec 64))

(assert (=> b!62434 (= lt!26044 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26031 () (_ BitVec 64))

(assert (=> b!62434 (= lt!26031 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!26040 () Unit!1680)

(assert (=> b!62434 (= lt!26040 (addApplyDifferent!44 lt!26048 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))) lt!26031))))

(assert (=> b!62434 (= (apply!68 (+!82 lt!26048 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))) lt!26031) (apply!68 lt!26048 lt!26031))))

(declare-fun lt!26037 () Unit!1680)

(assert (=> b!62434 (= lt!26037 lt!26040)))

(declare-fun lt!26043 () ListLongMap!1351)

(assert (=> b!62434 (= lt!26043 (getCurrentListMapNoExtraKeys!46 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (_values!2070 (v!2419 (underlying!233 thiss!992))) (mask!5993 (v!2419 (underlying!233 thiss!992))) (extraKeys!1966 (v!2419 (underlying!233 thiss!992))) (zeroValue!1999 (v!2419 (underlying!233 thiss!992))) (minValue!1999 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2087 (v!2419 (underlying!233 thiss!992)))))))

(declare-fun lt!26032 () (_ BitVec 64))

(assert (=> b!62434 (= lt!26032 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26046 () (_ BitVec 64))

(assert (=> b!62434 (= lt!26046 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!62434 (= lt!26038 (addApplyDifferent!44 lt!26043 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992))) lt!26046))))

(assert (=> b!62434 (= (apply!68 (+!82 lt!26043 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) lt!26046) (apply!68 lt!26043 lt!26046))))

(declare-fun b!62435 () Bool)

(declare-fun e!40994 () Bool)

(assert (=> b!62435 (= e!40994 (validKeyInArray!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!62436 () Bool)

(declare-fun e!40996 () Bool)

(assert (=> b!62436 (= e!40996 e!40995)))

(declare-fun c!8318 () Bool)

(assert (=> b!62436 (= c!8318 (not (= (bvand (extraKeys!1966 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!62437 () Bool)

(declare-fun e!40987 () Bool)

(declare-fun call!4899 () Bool)

(assert (=> b!62437 (= e!40987 (not call!4899))))

(declare-fun b!62438 () Bool)

(declare-fun e!40997 () Bool)

(assert (=> b!62438 (= e!40997 e!40991)))

(declare-fun res!34250 () Bool)

(assert (=> b!62438 (=> (not res!34250) (not e!40991))))

(assert (=> b!62438 (= res!34250 (contains!686 lt!26027 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!62438 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun d!12613 () Bool)

(assert (=> d!12613 e!40996))

(declare-fun res!34255 () Bool)

(assert (=> d!12613 (=> (not res!34255) (not e!40996))))

(assert (=> d!12613 (= res!34255 (or (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992))))) (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun lt!26029 () ListLongMap!1351)

(assert (=> d!12613 (= lt!26027 lt!26029)))

(declare-fun lt!26039 () Unit!1680)

(assert (=> d!12613 (= lt!26039 e!40988)))

(declare-fun c!8320 () Bool)

(assert (=> d!12613 (= c!8320 e!40989)))

(declare-fun res!34252 () Bool)

(assert (=> d!12613 (=> (not res!34252) (not e!40989))))

(assert (=> d!12613 (= res!34252 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun e!40990 () ListLongMap!1351)

(assert (=> d!12613 (= lt!26029 e!40990)))

(assert (=> d!12613 (= c!8317 (and (not (= (bvand (extraKeys!1966 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1966 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12613 (validMask!0 (mask!5993 (v!2419 (underlying!233 thiss!992))))))

(assert (=> d!12613 (= (getCurrentListMap!391 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (_values!2070 (v!2419 (underlying!233 thiss!992))) (mask!5993 (v!2419 (underlying!233 thiss!992))) (extraKeys!1966 (v!2419 (underlying!233 thiss!992))) (zeroValue!1999 (v!2419 (underlying!233 thiss!992))) (minValue!1999 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2087 (v!2419 (underlying!233 thiss!992)))) lt!26027)))

(declare-fun b!62426 () Bool)

(assert (=> b!62426 (= e!40990 (+!82 call!4896 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun bm!4893 () Bool)

(assert (=> bm!4893 (= call!4894 call!4898)))

(declare-fun b!62439 () Bool)

(assert (=> b!62439 (= e!40987 e!40985)))

(declare-fun res!34248 () Bool)

(assert (=> b!62439 (= res!34248 call!4899)))

(assert (=> b!62439 (=> (not res!34248) (not e!40985))))

(declare-fun b!62440 () Bool)

(declare-fun c!8316 () Bool)

(assert (=> b!62440 (= c!8316 (and (not (= (bvand (extraKeys!1966 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1966 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!62440 (= e!40986 e!40992)))

(declare-fun bm!4894 () Bool)

(assert (=> bm!4894 (= call!4897 call!4894)))

(declare-fun bm!4895 () Bool)

(assert (=> bm!4895 (= call!4895 (contains!686 lt!26027 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4896 () Bool)

(assert (=> bm!4896 (= call!4899 (contains!686 lt!26027 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62441 () Bool)

(declare-fun res!34253 () Bool)

(assert (=> b!62441 (=> (not res!34253) (not e!40996))))

(assert (=> b!62441 (= res!34253 e!40997)))

(declare-fun res!34256 () Bool)

(assert (=> b!62441 (=> res!34256 e!40997)))

(assert (=> b!62441 (= res!34256 (not e!40994))))

(declare-fun res!34254 () Bool)

(assert (=> b!62441 (=> (not res!34254) (not e!40994))))

(assert (=> b!62441 (= res!34254 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun b!62442 () Bool)

(declare-fun Unit!1691 () Unit!1680)

(assert (=> b!62442 (= e!40988 Unit!1691)))

(declare-fun b!62443 () Bool)

(assert (=> b!62443 (= e!40992 call!4897)))

(declare-fun bm!4897 () Bool)

(assert (=> bm!4897 (= call!4900 call!4896)))

(declare-fun b!62444 () Bool)

(declare-fun res!34249 () Bool)

(assert (=> b!62444 (=> (not res!34249) (not e!40996))))

(assert (=> b!62444 (= res!34249 e!40987)))

(declare-fun c!8315 () Bool)

(assert (=> b!62444 (= c!8315 (not (= (bvand (extraKeys!1966 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!62445 () Bool)

(assert (=> b!62445 (= e!40990 e!40986)))

(assert (=> b!62445 (= c!8319 (and (not (= (bvand (extraKeys!1966 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1966 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!12613 c!8317) b!62426))

(assert (= (and d!12613 (not c!8317)) b!62445))

(assert (= (and b!62445 c!8319) b!62430))

(assert (= (and b!62445 (not c!8319)) b!62440))

(assert (= (and b!62440 c!8316) b!62425))

(assert (= (and b!62440 (not c!8316)) b!62443))

(assert (= (or b!62425 b!62443) bm!4894))

(assert (= (or b!62430 bm!4894) bm!4893))

(assert (= (or b!62430 b!62425) bm!4897))

(assert (= (or b!62426 bm!4893) bm!4892))

(assert (= (or b!62426 bm!4897) bm!4891))

(assert (= (and d!12613 res!34252) b!62428))

(assert (= (and d!12613 c!8320) b!62434))

(assert (= (and d!12613 (not c!8320)) b!62442))

(assert (= (and d!12613 res!34255) b!62441))

(assert (= (and b!62441 res!34254) b!62435))

(assert (= (and b!62441 (not res!34256)) b!62438))

(assert (= (and b!62438 res!34250) b!62433))

(assert (= (and b!62441 res!34253) b!62444))

(assert (= (and b!62444 c!8315) b!62439))

(assert (= (and b!62444 (not c!8315)) b!62437))

(assert (= (and b!62439 res!34248) b!62431))

(assert (= (or b!62439 b!62437) bm!4896))

(assert (= (and b!62444 res!34249) b!62436))

(assert (= (and b!62436 c!8318) b!62427))

(assert (= (and b!62436 (not c!8318)) b!62429))

(assert (= (and b!62427 res!34251) b!62432))

(assert (= (or b!62427 b!62429) bm!4895))

(declare-fun b_lambda!2785 () Bool)

(assert (=> (not b_lambda!2785) (not b!62433)))

(assert (=> b!62433 t!4812))

(declare-fun b_and!3817 () Bool)

(assert (= b_and!3797 (and (=> t!4812 result!2435) b_and!3817)))

(assert (=> b!62433 t!4814))

(declare-fun b_and!3819 () Bool)

(assert (= b_and!3799 (and (=> t!4814 result!2439) b_and!3819)))

(declare-fun m!55897 () Bool)

(assert (=> b!62434 m!55897))

(declare-fun m!55899 () Bool)

(assert (=> b!62434 m!55899))

(assert (=> b!62434 m!55897))

(declare-fun m!55901 () Bool)

(assert (=> b!62434 m!55901))

(declare-fun m!55903 () Bool)

(assert (=> b!62434 m!55903))

(declare-fun m!55905 () Bool)

(assert (=> b!62434 m!55905))

(declare-fun m!55907 () Bool)

(assert (=> b!62434 m!55907))

(declare-fun m!55909 () Bool)

(assert (=> b!62434 m!55909))

(declare-fun m!55911 () Bool)

(assert (=> b!62434 m!55911))

(declare-fun m!55913 () Bool)

(assert (=> b!62434 m!55913))

(declare-fun m!55915 () Bool)

(assert (=> b!62434 m!55915))

(declare-fun m!55917 () Bool)

(assert (=> b!62434 m!55917))

(declare-fun m!55919 () Bool)

(assert (=> b!62434 m!55919))

(declare-fun m!55921 () Bool)

(assert (=> b!62434 m!55921))

(assert (=> b!62434 m!55909))

(declare-fun m!55923 () Bool)

(assert (=> b!62434 m!55923))

(declare-fun m!55925 () Bool)

(assert (=> b!62434 m!55925))

(declare-fun m!55927 () Bool)

(assert (=> b!62434 m!55927))

(assert (=> b!62434 m!55923))

(assert (=> b!62434 m!55913))

(declare-fun m!55929 () Bool)

(assert (=> b!62434 m!55929))

(declare-fun m!55931 () Bool)

(assert (=> b!62431 m!55931))

(assert (=> b!62438 m!55903))

(assert (=> b!62438 m!55903))

(declare-fun m!55933 () Bool)

(assert (=> b!62438 m!55933))

(assert (=> b!62435 m!55903))

(assert (=> b!62435 m!55903))

(declare-fun m!55935 () Bool)

(assert (=> b!62435 m!55935))

(declare-fun m!55937 () Bool)

(assert (=> bm!4896 m!55937))

(declare-fun m!55939 () Bool)

(assert (=> b!62426 m!55939))

(assert (=> d!12613 m!55695))

(declare-fun m!55941 () Bool)

(assert (=> bm!4891 m!55941))

(assert (=> b!62433 m!55699))

(declare-fun m!55943 () Bool)

(assert (=> b!62433 m!55943))

(assert (=> b!62433 m!55903))

(assert (=> b!62433 m!55943))

(assert (=> b!62433 m!55699))

(declare-fun m!55945 () Bool)

(assert (=> b!62433 m!55945))

(assert (=> b!62433 m!55903))

(declare-fun m!55947 () Bool)

(assert (=> b!62433 m!55947))

(declare-fun m!55949 () Bool)

(assert (=> b!62432 m!55949))

(assert (=> bm!4892 m!55921))

(assert (=> b!62428 m!55903))

(assert (=> b!62428 m!55903))

(assert (=> b!62428 m!55935))

(declare-fun m!55951 () Bool)

(assert (=> bm!4895 m!55951))

(assert (=> b!62127 d!12613))

(declare-fun d!12615 () Bool)

(assert (=> d!12615 (= (array_inv!1097 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvsge (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!62113 d!12615))

(declare-fun d!12617 () Bool)

(assert (=> d!12617 (= (array_inv!1098 (_values!2070 (v!2419 (underlying!233 thiss!992)))) (bvsge (size!2023 (_values!2070 (v!2419 (underlying!233 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!62113 d!12617))

(declare-fun d!12619 () Bool)

(assert (=> d!12619 (not (arrayContainsKey!0 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!26051 () Unit!1680)

(declare-fun choose!68 (array!3743 (_ BitVec 32) (_ BitVec 64) List!1430) Unit!1680)

(assert (=> d!12619 (= lt!26051 (choose!68 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (Cons!1426 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1427)))))

(assert (=> d!12619 (bvslt (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!12619 (= (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (Cons!1426 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1427)) lt!26051)))

(declare-fun bs!2715 () Bool)

(assert (= bs!2715 d!12619))

(assert (=> bs!2715 m!55703))

(assert (=> bs!2715 m!55715))

(assert (=> bs!2715 m!55703))

(declare-fun m!55953 () Bool)

(assert (=> bs!2715 m!55953))

(assert (=> b!62117 d!12619))

(declare-fun d!12621 () Bool)

(assert (=> d!12621 (arrayNoDuplicates!0 (_keys!3719 (v!2419 (underlying!233 thiss!992))) from!355 Nil!1427)))

(declare-fun lt!26054 () Unit!1680)

(declare-fun choose!39 (array!3743 (_ BitVec 32) (_ BitVec 32)) Unit!1680)

(assert (=> d!12621 (= lt!26054 (choose!39 (_keys!3719 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000000 from!355))))

(assert (=> d!12621 (bvslt (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!12621 (= (lemmaNoDuplicateFromThenFromBigger!0 (_keys!3719 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000000 from!355) lt!26054)))

(declare-fun bs!2716 () Bool)

(assert (= bs!2716 d!12621))

(assert (=> bs!2716 m!55711))

(declare-fun m!55955 () Bool)

(assert (=> bs!2716 m!55955))

(assert (=> b!62117 d!12621))

(declare-fun d!12623 () Bool)

(declare-fun res!34261 () Bool)

(declare-fun e!41002 () Bool)

(assert (=> d!12623 (=> res!34261 e!41002)))

(assert (=> d!12623 (= res!34261 (= (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> d!12623 (= (arrayContainsKey!0 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)) e!41002)))

(declare-fun b!62450 () Bool)

(declare-fun e!41003 () Bool)

(assert (=> b!62450 (= e!41002 e!41003)))

(declare-fun res!34262 () Bool)

(assert (=> b!62450 (=> (not res!34262) (not e!41003))))

(assert (=> b!62450 (= res!34262 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun b!62451 () Bool)

(assert (=> b!62451 (= e!41003 (arrayContainsKey!0 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (= (and d!12623 (not res!34261)) b!62450))

(assert (= (and b!62450 res!34262) b!62451))

(assert (=> d!12623 m!55903))

(assert (=> b!62451 m!55703))

(declare-fun m!55957 () Bool)

(assert (=> b!62451 m!55957))

(assert (=> b!62117 d!12623))

(declare-fun d!12625 () Bool)

(declare-fun e!41006 () Bool)

(assert (=> d!12625 e!41006))

(declare-fun c!8323 () Bool)

(assert (=> d!12625 (= c!8323 (and (not (= (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun lt!26057 () Unit!1680)

(declare-fun choose!336 (array!3743 array!3745 (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 (_ BitVec 64) (_ BitVec 32) Int) Unit!1680)

(assert (=> d!12625 (= lt!26057 (choose!336 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (_values!2070 (v!2419 (underlying!233 thiss!992))) (mask!5993 (v!2419 (underlying!233 thiss!992))) (extraKeys!1966 (v!2419 (underlying!233 thiss!992))) (zeroValue!1999 (v!2419 (underlying!233 thiss!992))) (minValue!1999 (v!2419 (underlying!233 thiss!992))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2087 (v!2419 (underlying!233 thiss!992)))))))

(assert (=> d!12625 (validMask!0 (mask!5993 (v!2419 (underlying!233 thiss!992))))))

(assert (=> d!12625 (= (lemmaListMapContainsThenArrayContainsFrom!27 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (_values!2070 (v!2419 (underlying!233 thiss!992))) (mask!5993 (v!2419 (underlying!233 thiss!992))) (extraKeys!1966 (v!2419 (underlying!233 thiss!992))) (zeroValue!1999 (v!2419 (underlying!233 thiss!992))) (minValue!1999 (v!2419 (underlying!233 thiss!992))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2087 (v!2419 (underlying!233 thiss!992)))) lt!26057)))

(declare-fun b!62456 () Bool)

(assert (=> b!62456 (= e!41006 (arrayContainsKey!0 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!62457 () Bool)

(assert (=> b!62457 (= e!41006 (ite (= (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!1966 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1966 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!12625 c!8323) b!62456))

(assert (= (and d!12625 (not c!8323)) b!62457))

(assert (=> d!12625 m!55703))

(declare-fun m!55959 () Bool)

(assert (=> d!12625 m!55959))

(assert (=> d!12625 m!55695))

(assert (=> b!62456 m!55703))

(assert (=> b!62456 m!55715))

(assert (=> b!62117 d!12625))

(declare-fun d!12627 () Bool)

(declare-fun res!34270 () Bool)

(declare-fun e!41018 () Bool)

(assert (=> d!12627 (=> res!34270 e!41018)))

(assert (=> d!12627 (= res!34270 (bvsge from!355 (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992))))))))

(assert (=> d!12627 (= (arrayNoDuplicates!0 (_keys!3719 (v!2419 (underlying!233 thiss!992))) from!355 Nil!1427) e!41018)))

(declare-fun b!62468 () Bool)

(declare-fun e!41016 () Bool)

(declare-fun call!4903 () Bool)

(assert (=> b!62468 (= e!41016 call!4903)))

(declare-fun b!62469 () Bool)

(declare-fun e!41015 () Bool)

(declare-fun contains!688 (List!1430 (_ BitVec 64)) Bool)

(assert (=> b!62469 (= e!41015 (contains!688 Nil!1427 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun b!62470 () Bool)

(declare-fun e!41017 () Bool)

(assert (=> b!62470 (= e!41017 e!41016)))

(declare-fun c!8326 () Bool)

(assert (=> b!62470 (= c!8326 (validKeyInArray!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun bm!4900 () Bool)

(assert (=> bm!4900 (= call!4903 (arrayNoDuplicates!0 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!8326 (Cons!1426 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1427) Nil!1427)))))

(declare-fun b!62471 () Bool)

(assert (=> b!62471 (= e!41016 call!4903)))

(declare-fun b!62472 () Bool)

(assert (=> b!62472 (= e!41018 e!41017)))

(declare-fun res!34271 () Bool)

(assert (=> b!62472 (=> (not res!34271) (not e!41017))))

(assert (=> b!62472 (= res!34271 (not e!41015))))

(declare-fun res!34269 () Bool)

(assert (=> b!62472 (=> (not res!34269) (not e!41015))))

(assert (=> b!62472 (= res!34269 (validKeyInArray!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (= (and d!12627 (not res!34270)) b!62472))

(assert (= (and b!62472 res!34269) b!62469))

(assert (= (and b!62472 res!34271) b!62470))

(assert (= (and b!62470 c!8326) b!62471))

(assert (= (and b!62470 (not c!8326)) b!62468))

(assert (= (or b!62471 b!62468) bm!4900))

(assert (=> b!62469 m!55703))

(assert (=> b!62469 m!55703))

(declare-fun m!55961 () Bool)

(assert (=> b!62469 m!55961))

(assert (=> b!62470 m!55703))

(assert (=> b!62470 m!55703))

(declare-fun m!55963 () Bool)

(assert (=> b!62470 m!55963))

(assert (=> bm!4900 m!55703))

(declare-fun m!55965 () Bool)

(assert (=> bm!4900 m!55965))

(assert (=> b!62472 m!55703))

(assert (=> b!62472 m!55703))

(assert (=> b!62472 m!55963))

(assert (=> b!62117 d!12627))

(declare-fun d!12629 () Bool)

(assert (=> d!12629 (= (validMask!0 (mask!5993 (v!2419 (underlying!233 thiss!992)))) (and (or (= (mask!5993 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000111) (= (mask!5993 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000001111) (= (mask!5993 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000011111) (= (mask!5993 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000111111) (= (mask!5993 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000001111111) (= (mask!5993 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000011111111) (= (mask!5993 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000111111111) (= (mask!5993 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000001111111111) (= (mask!5993 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000011111111111) (= (mask!5993 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000111111111111) (= (mask!5993 (v!2419 (underlying!233 thiss!992))) #b00000000000000000001111111111111) (= (mask!5993 (v!2419 (underlying!233 thiss!992))) #b00000000000000000011111111111111) (= (mask!5993 (v!2419 (underlying!233 thiss!992))) #b00000000000000000111111111111111) (= (mask!5993 (v!2419 (underlying!233 thiss!992))) #b00000000000000001111111111111111) (= (mask!5993 (v!2419 (underlying!233 thiss!992))) #b00000000000000011111111111111111) (= (mask!5993 (v!2419 (underlying!233 thiss!992))) #b00000000000000111111111111111111) (= (mask!5993 (v!2419 (underlying!233 thiss!992))) #b00000000000001111111111111111111) (= (mask!5993 (v!2419 (underlying!233 thiss!992))) #b00000000000011111111111111111111) (= (mask!5993 (v!2419 (underlying!233 thiss!992))) #b00000000000111111111111111111111) (= (mask!5993 (v!2419 (underlying!233 thiss!992))) #b00000000001111111111111111111111) (= (mask!5993 (v!2419 (underlying!233 thiss!992))) #b00000000011111111111111111111111) (= (mask!5993 (v!2419 (underlying!233 thiss!992))) #b00000000111111111111111111111111) (= (mask!5993 (v!2419 (underlying!233 thiss!992))) #b00000001111111111111111111111111) (= (mask!5993 (v!2419 (underlying!233 thiss!992))) #b00000011111111111111111111111111) (= (mask!5993 (v!2419 (underlying!233 thiss!992))) #b00000111111111111111111111111111) (= (mask!5993 (v!2419 (underlying!233 thiss!992))) #b00001111111111111111111111111111) (= (mask!5993 (v!2419 (underlying!233 thiss!992))) #b00011111111111111111111111111111) (= (mask!5993 (v!2419 (underlying!233 thiss!992))) #b00111111111111111111111111111111)) (bvsle (mask!5993 (v!2419 (underlying!233 thiss!992))) #b00111111111111111111111111111111)))))

(assert (=> b!62112 d!12629))

(declare-fun d!12631 () Bool)

(declare-fun res!34278 () Bool)

(declare-fun e!41021 () Bool)

(assert (=> d!12631 (=> (not res!34278) (not e!41021))))

(declare-fun simpleValid!44 (LongMapFixedSize!634) Bool)

(assert (=> d!12631 (= res!34278 (simpleValid!44 newMap!16))))

(assert (=> d!12631 (= (valid!269 newMap!16) e!41021)))

(declare-fun b!62479 () Bool)

(declare-fun res!34279 () Bool)

(assert (=> b!62479 (=> (not res!34279) (not e!41021))))

(declare-fun arrayCountValidKeys!0 (array!3743 (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!62479 (= res!34279 (= (arrayCountValidKeys!0 (_keys!3719 newMap!16) #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))) (_size!366 newMap!16)))))

(declare-fun b!62480 () Bool)

(declare-fun res!34280 () Bool)

(assert (=> b!62480 (=> (not res!34280) (not e!41021))))

(declare-fun arrayForallSeekEntryOrOpenFound!0 ((_ BitVec 32) array!3743 (_ BitVec 32)) Bool)

(assert (=> b!62480 (= res!34280 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3719 newMap!16) (mask!5993 newMap!16)))))

(declare-fun b!62481 () Bool)

(assert (=> b!62481 (= e!41021 (arrayNoDuplicates!0 (_keys!3719 newMap!16) #b00000000000000000000000000000000 Nil!1427))))

(assert (= (and d!12631 res!34278) b!62479))

(assert (= (and b!62479 res!34279) b!62480))

(assert (= (and b!62480 res!34280) b!62481))

(declare-fun m!55967 () Bool)

(assert (=> d!12631 m!55967))

(declare-fun m!55969 () Bool)

(assert (=> b!62479 m!55969))

(declare-fun m!55971 () Bool)

(assert (=> b!62480 m!55971))

(declare-fun m!55973 () Bool)

(assert (=> b!62481 m!55973))

(assert (=> b!62116 d!12631))

(declare-fun d!12633 () Bool)

(assert (=> d!12633 (= (array_inv!1097 (_keys!3719 newMap!16)) (bvsge (size!2022 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!62120 d!12633))

(declare-fun d!12635 () Bool)

(assert (=> d!12635 (= (array_inv!1098 (_values!2070 newMap!16)) (bvsge (size!2023 (_values!2070 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!62120 d!12635))

(declare-fun d!12637 () Bool)

(assert (=> d!12637 (= (valid!270 thiss!992) (valid!269 (v!2419 (underlying!233 thiss!992))))))

(declare-fun bs!2717 () Bool)

(assert (= bs!2717 d!12637))

(declare-fun m!55975 () Bool)

(assert (=> bs!2717 m!55975))

(assert (=> start!8874 d!12637))

(declare-fun mapNonEmpty!2953 () Bool)

(declare-fun mapRes!2953 () Bool)

(declare-fun tp!8137 () Bool)

(declare-fun e!41027 () Bool)

(assert (=> mapNonEmpty!2953 (= mapRes!2953 (and tp!8137 e!41027))))

(declare-fun mapValue!2953 () ValueCell!863)

(declare-fun mapKey!2953 () (_ BitVec 32))

(declare-fun mapRest!2953 () (Array (_ BitVec 32) ValueCell!863))

(assert (=> mapNonEmpty!2953 (= mapRest!2938 (store mapRest!2953 mapKey!2953 mapValue!2953))))

(declare-fun condMapEmpty!2953 () Bool)

(declare-fun mapDefault!2953 () ValueCell!863)

(assert (=> mapNonEmpty!2937 (= condMapEmpty!2953 (= mapRest!2938 ((as const (Array (_ BitVec 32) ValueCell!863)) mapDefault!2953)))))

(declare-fun e!41026 () Bool)

(assert (=> mapNonEmpty!2937 (= tp!8107 (and e!41026 mapRes!2953))))

(declare-fun b!62489 () Bool)

(assert (=> b!62489 (= e!41026 tp_is_empty!2413)))

(declare-fun b!62488 () Bool)

(assert (=> b!62488 (= e!41027 tp_is_empty!2413)))

(declare-fun mapIsEmpty!2953 () Bool)

(assert (=> mapIsEmpty!2953 mapRes!2953))

(assert (= (and mapNonEmpty!2937 condMapEmpty!2953) mapIsEmpty!2953))

(assert (= (and mapNonEmpty!2937 (not condMapEmpty!2953)) mapNonEmpty!2953))

(assert (= (and mapNonEmpty!2953 ((_ is ValueCellFull!863) mapValue!2953)) b!62488))

(assert (= (and mapNonEmpty!2937 ((_ is ValueCellFull!863) mapDefault!2953)) b!62489))

(declare-fun m!55977 () Bool)

(assert (=> mapNonEmpty!2953 m!55977))

(declare-fun mapNonEmpty!2954 () Bool)

(declare-fun mapRes!2954 () Bool)

(declare-fun tp!8138 () Bool)

(declare-fun e!41029 () Bool)

(assert (=> mapNonEmpty!2954 (= mapRes!2954 (and tp!8138 e!41029))))

(declare-fun mapRest!2954 () (Array (_ BitVec 32) ValueCell!863))

(declare-fun mapKey!2954 () (_ BitVec 32))

(declare-fun mapValue!2954 () ValueCell!863)

(assert (=> mapNonEmpty!2954 (= mapRest!2937 (store mapRest!2954 mapKey!2954 mapValue!2954))))

(declare-fun condMapEmpty!2954 () Bool)

(declare-fun mapDefault!2954 () ValueCell!863)

(assert (=> mapNonEmpty!2938 (= condMapEmpty!2954 (= mapRest!2937 ((as const (Array (_ BitVec 32) ValueCell!863)) mapDefault!2954)))))

(declare-fun e!41028 () Bool)

(assert (=> mapNonEmpty!2938 (= tp!8109 (and e!41028 mapRes!2954))))

(declare-fun b!62491 () Bool)

(assert (=> b!62491 (= e!41028 tp_is_empty!2413)))

(declare-fun b!62490 () Bool)

(assert (=> b!62490 (= e!41029 tp_is_empty!2413)))

(declare-fun mapIsEmpty!2954 () Bool)

(assert (=> mapIsEmpty!2954 mapRes!2954))

(assert (= (and mapNonEmpty!2938 condMapEmpty!2954) mapIsEmpty!2954))

(assert (= (and mapNonEmpty!2938 (not condMapEmpty!2954)) mapNonEmpty!2954))

(assert (= (and mapNonEmpty!2954 ((_ is ValueCellFull!863) mapValue!2954)) b!62490))

(assert (= (and mapNonEmpty!2938 ((_ is ValueCellFull!863) mapDefault!2954)) b!62491))

(declare-fun m!55979 () Bool)

(assert (=> mapNonEmpty!2954 m!55979))

(declare-fun b_lambda!2787 () Bool)

(assert (= b_lambda!2785 (or (and b!62113 b_free!1993) (and b!62120 b_free!1995 (= (defaultEntry!2087 newMap!16) (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))))) b_lambda!2787)))

(check-sat (not b!62433) (not b!62428) (not b!62479) (not bm!4858) (not bm!4867) (not bm!4869) (not bm!4876) (not b!62371) (not b!62256) (not b!62347) (not b!62339) (not bm!4900) (not d!12613) (not b!62480) (not b_next!1995) (not mapNonEmpty!2953) (not d!12605) (not mapNonEmpty!2954) b_and!3819 (not d!12637) (not d!12625) (not bm!4892) (not b!62470) (not bm!4866) tp_is_empty!2413 (not b!62432) (not bm!4896) (not b!62381) (not b!62431) b_and!3817 (not b!62434) (not b!62254) (not b!62342) (not d!12619) (not b!62469) (not b!62374) (not bm!4861) (not bm!4859) (not b_lambda!2783) (not d!12631) (not b!62382) (not d!12611) (not bm!4857) (not d!12621) (not b!62481) (not bm!4891) (not bm!4865) (not bm!4856) (not bm!4860) (not d!12607) (not b!62451) (not b!62438) (not b!62456) (not bm!4874) (not b!62435) (not b!62426) (not b_next!1993) (not b_lambda!2787) (not b!62472) (not b!62364) (not bm!4895))
(check-sat b_and!3817 b_and!3819 (not b_next!1993) (not b_next!1995))
(get-model)

(declare-fun d!12639 () Bool)

(declare-fun e!41032 () Bool)

(assert (=> d!12639 e!41032))

(declare-fun res!34285 () Bool)

(assert (=> d!12639 (=> (not res!34285) (not e!41032))))

(declare-fun lt!26067 () ListLongMap!1351)

(assert (=> d!12639 (= res!34285 (contains!686 lt!26067 (_1!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun lt!26068 () List!1429)

(assert (=> d!12639 (= lt!26067 (ListLongMap!1352 lt!26068))))

(declare-fun lt!26066 () Unit!1680)

(declare-fun lt!26069 () Unit!1680)

(assert (=> d!12639 (= lt!26066 lt!26069)))

(assert (=> d!12639 (= (getValueByKey!127 lt!26068 (_1!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))) (Some!132 (_2!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun lemmaContainsTupThenGetReturnValue!44 (List!1429 (_ BitVec 64) V!2865) Unit!1680)

(assert (=> d!12639 (= lt!26069 (lemmaContainsTupThenGetReturnValue!44 lt!26068 (_1!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) (_2!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun insertStrictlySorted!47 (List!1429 (_ BitVec 64) V!2865) List!1429)

(assert (=> d!12639 (= lt!26068 (insertStrictlySorted!47 (toList!691 (ite c!8317 call!4898 (ite c!8319 call!4894 call!4897))) (_1!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) (_2!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> d!12639 (= (+!82 (ite c!8317 call!4898 (ite c!8319 call!4894 call!4897)) (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26067)))

(declare-fun b!62496 () Bool)

(declare-fun res!34286 () Bool)

(assert (=> b!62496 (=> (not res!34286) (not e!41032))))

(assert (=> b!62496 (= res!34286 (= (getValueByKey!127 (toList!691 lt!26067) (_1!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))) (Some!132 (_2!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))))

(declare-fun b!62497 () Bool)

(declare-fun contains!689 (List!1429 tuple2!2032) Bool)

(assert (=> b!62497 (= e!41032 (contains!689 (toList!691 lt!26067) (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(assert (= (and d!12639 res!34285) b!62496))

(assert (= (and b!62496 res!34286) b!62497))

(declare-fun m!55981 () Bool)

(assert (=> d!12639 m!55981))

(declare-fun m!55983 () Bool)

(assert (=> d!12639 m!55983))

(declare-fun m!55985 () Bool)

(assert (=> d!12639 m!55985))

(declare-fun m!55987 () Bool)

(assert (=> d!12639 m!55987))

(declare-fun m!55989 () Bool)

(assert (=> b!62496 m!55989))

(declare-fun m!55991 () Bool)

(assert (=> b!62497 m!55991))

(assert (=> bm!4891 d!12639))

(declare-fun d!12641 () Bool)

(assert (=> d!12641 (= (get!1091 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62382 d!12641))

(declare-fun d!12643 () Bool)

(assert (=> d!12643 (= (validKeyInArray!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (and (not (= (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62472 d!12643))

(declare-fun d!12645 () Bool)

(assert (=> d!12645 (= (+!82 (getCurrentListMap!391 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!391 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) lt!25962 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26072 () Unit!1680)

(declare-fun choose!337 (array!3743 array!3745 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 V!2865 Int) Unit!1680)

(assert (=> d!12645 (= lt!26072 (choose!337 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) lt!25962 (zeroValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1999 newMap!16) (defaultEntry!2087 newMap!16)))))

(assert (=> d!12645 (validMask!0 (mask!5993 newMap!16))))

(assert (=> d!12645 (= (lemmaChangeZeroKeyThenAddPairToListMap!17 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) lt!25962 (zeroValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1999 newMap!16) (defaultEntry!2087 newMap!16)) lt!26072)))

(declare-fun bs!2718 () Bool)

(assert (= bs!2718 d!12645))

(assert (=> bs!2718 m!55701))

(declare-fun m!55993 () Bool)

(assert (=> bs!2718 m!55993))

(assert (=> bs!2718 m!55895))

(declare-fun m!55995 () Bool)

(assert (=> bs!2718 m!55995))

(assert (=> bs!2718 m!55701))

(declare-fun m!55997 () Bool)

(assert (=> bs!2718 m!55997))

(assert (=> bs!2718 m!55895))

(declare-fun m!55999 () Bool)

(assert (=> bs!2718 m!55999))

(assert (=> b!62342 d!12645))

(declare-fun d!12647 () Bool)

(declare-fun e!41034 () Bool)

(assert (=> d!12647 e!41034))

(declare-fun res!34287 () Bool)

(assert (=> d!12647 (=> res!34287 e!41034)))

(declare-fun lt!26074 () Bool)

(assert (=> d!12647 (= res!34287 (not lt!26074))))

(declare-fun lt!26075 () Bool)

(assert (=> d!12647 (= lt!26074 lt!26075)))

(declare-fun lt!26073 () Unit!1680)

(declare-fun e!41033 () Unit!1680)

(assert (=> d!12647 (= lt!26073 e!41033)))

(declare-fun c!8327 () Bool)

(assert (=> d!12647 (= c!8327 lt!26075)))

(assert (=> d!12647 (= lt!26075 (containsKey!130 (toList!691 lt!26027) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12647 (= (contains!686 lt!26027 #b0000000000000000000000000000000000000000000000000000000000000000) lt!26074)))

(declare-fun b!62498 () Bool)

(declare-fun lt!26076 () Unit!1680)

(assert (=> b!62498 (= e!41033 lt!26076)))

(assert (=> b!62498 (= lt!26076 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 lt!26027) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62498 (isDefined!79 (getValueByKey!127 (toList!691 lt!26027) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62499 () Bool)

(declare-fun Unit!1692 () Unit!1680)

(assert (=> b!62499 (= e!41033 Unit!1692)))

(declare-fun b!62500 () Bool)

(assert (=> b!62500 (= e!41034 (isDefined!79 (getValueByKey!127 (toList!691 lt!26027) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12647 c!8327) b!62498))

(assert (= (and d!12647 (not c!8327)) b!62499))

(assert (= (and d!12647 (not res!34287)) b!62500))

(declare-fun m!56001 () Bool)

(assert (=> d!12647 m!56001))

(declare-fun m!56003 () Bool)

(assert (=> b!62498 m!56003))

(declare-fun m!56005 () Bool)

(assert (=> b!62498 m!56005))

(assert (=> b!62498 m!56005))

(declare-fun m!56007 () Bool)

(assert (=> b!62498 m!56007))

(assert (=> b!62500 m!56005))

(assert (=> b!62500 m!56005))

(assert (=> b!62500 m!56007))

(assert (=> bm!4896 d!12647))

(declare-fun d!12649 () Bool)

(declare-fun res!34288 () Bool)

(declare-fun e!41035 () Bool)

(assert (=> d!12649 (=> res!34288 e!41035)))

(assert (=> d!12649 (= res!34288 (= (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> d!12649 (= (arrayContainsKey!0 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) e!41035)))

(declare-fun b!62501 () Bool)

(declare-fun e!41036 () Bool)

(assert (=> b!62501 (= e!41035 e!41036)))

(declare-fun res!34289 () Bool)

(assert (=> b!62501 (=> (not res!34289) (not e!41036))))

(assert (=> b!62501 (= res!34289 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun b!62502 () Bool)

(assert (=> b!62502 (= e!41036 (arrayContainsKey!0 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!12649 (not res!34288)) b!62501))

(assert (= (and b!62501 res!34289) b!62502))

(declare-fun m!56009 () Bool)

(assert (=> d!12649 m!56009))

(assert (=> b!62502 m!55703))

(declare-fun m!56011 () Bool)

(assert (=> b!62502 m!56011))

(assert (=> b!62451 d!12649))

(assert (=> d!12621 d!12627))

(declare-fun d!12651 () Bool)

(assert (=> d!12651 (arrayNoDuplicates!0 (_keys!3719 (v!2419 (underlying!233 thiss!992))) from!355 Nil!1427)))

(assert (=> d!12651 true))

(declare-fun _$71!78 () Unit!1680)

(assert (=> d!12651 (= (choose!39 (_keys!3719 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000000 from!355) _$71!78)))

(declare-fun bs!2719 () Bool)

(assert (= bs!2719 d!12651))

(assert (=> bs!2719 m!55711))

(assert (=> d!12621 d!12651))

(declare-fun d!12653 () Bool)

(declare-fun get!1092 (Option!133) V!2865)

(assert (=> d!12653 (= (apply!68 lt!26027 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1092 (getValueByKey!127 (toList!691 lt!26027) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2720 () Bool)

(assert (= bs!2720 d!12653))

(declare-fun m!56013 () Bool)

(assert (=> bs!2720 m!56013))

(assert (=> bs!2720 m!56013))

(declare-fun m!56015 () Bool)

(assert (=> bs!2720 m!56015))

(assert (=> b!62432 d!12653))

(declare-fun d!12655 () Bool)

(declare-fun res!34294 () Bool)

(declare-fun e!41041 () Bool)

(assert (=> d!12655 (=> res!34294 e!41041)))

(assert (=> d!12655 (= res!34294 (and ((_ is Cons!1425) (toList!691 lt!25841)) (= (_1!1027 (h!2008 (toList!691 lt!25841))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355))))))

(assert (=> d!12655 (= (containsKey!130 (toList!691 lt!25841) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) e!41041)))

(declare-fun b!62507 () Bool)

(declare-fun e!41042 () Bool)

(assert (=> b!62507 (= e!41041 e!41042)))

(declare-fun res!34295 () Bool)

(assert (=> b!62507 (=> (not res!34295) (not e!41042))))

(assert (=> b!62507 (= res!34295 (and (or (not ((_ is Cons!1425) (toList!691 lt!25841))) (bvsle (_1!1027 (h!2008 (toList!691 lt!25841))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355))) ((_ is Cons!1425) (toList!691 lt!25841)) (bvslt (_1!1027 (h!2008 (toList!691 lt!25841))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355))))))

(declare-fun b!62508 () Bool)

(assert (=> b!62508 (= e!41042 (containsKey!130 (t!4815 (toList!691 lt!25841)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (= (and d!12655 (not res!34294)) b!62507))

(assert (= (and b!62507 res!34295) b!62508))

(assert (=> b!62508 m!55703))

(declare-fun m!56017 () Bool)

(assert (=> b!62508 m!56017))

(assert (=> d!12605 d!12655))

(declare-fun d!12657 () Bool)

(assert (=> d!12657 (= (apply!68 lt!26027 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1092 (getValueByKey!127 (toList!691 lt!26027) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!2721 () Bool)

(assert (= bs!2721 d!12657))

(assert (=> bs!2721 m!55903))

(declare-fun m!56019 () Bool)

(assert (=> bs!2721 m!56019))

(assert (=> bs!2721 m!56019))

(declare-fun m!56021 () Bool)

(assert (=> bs!2721 m!56021))

(assert (=> b!62433 d!12657))

(declare-fun d!12659 () Bool)

(declare-fun c!8328 () Bool)

(assert (=> d!12659 (= c!8328 ((_ is ValueCellFull!863) (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!41043 () V!2865)

(assert (=> d!12659 (= (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!41043)))

(declare-fun b!62509 () Bool)

(assert (=> b!62509 (= e!41043 (get!1090 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!62510 () Bool)

(assert (=> b!62510 (= e!41043 (get!1091 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12659 c!8328) b!62509))

(assert (= (and d!12659 (not c!8328)) b!62510))

(assert (=> b!62509 m!55943))

(assert (=> b!62509 m!55699))

(declare-fun m!56023 () Bool)

(assert (=> b!62509 m!56023))

(assert (=> b!62510 m!55943))

(assert (=> b!62510 m!55699))

(declare-fun m!56025 () Bool)

(assert (=> b!62510 m!56025))

(assert (=> b!62433 d!12659))

(declare-fun b!62511 () Bool)

(declare-fun e!41051 () ListLongMap!1351)

(declare-fun call!4910 () ListLongMap!1351)

(assert (=> b!62511 (= e!41051 call!4910)))

(declare-fun b!62513 () Bool)

(declare-fun e!41054 () Bool)

(declare-fun e!41052 () Bool)

(assert (=> b!62513 (= e!41054 e!41052)))

(declare-fun res!34299 () Bool)

(declare-fun call!4905 () Bool)

(assert (=> b!62513 (= res!34299 call!4905)))

(assert (=> b!62513 (=> (not res!34299) (not e!41052))))

(declare-fun b!62514 () Bool)

(declare-fun e!41048 () Bool)

(assert (=> b!62514 (= e!41048 (validKeyInArray!0 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun call!4907 () ListLongMap!1351)

(declare-fun call!4908 () ListLongMap!1351)

(declare-fun call!4906 () ListLongMap!1351)

(declare-fun bm!4901 () Bool)

(declare-fun c!8331 () Bool)

(declare-fun c!8333 () Bool)

(declare-fun call!4904 () ListLongMap!1351)

(assert (=> bm!4901 (= call!4906 (+!82 (ite c!8331 call!4908 (ite c!8333 call!4904 call!4907)) (ite (or c!8331 c!8333) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(declare-fun b!62515 () Bool)

(assert (=> b!62515 (= e!41054 (not call!4905))))

(declare-fun b!62516 () Bool)

(declare-fun e!41045 () ListLongMap!1351)

(assert (=> b!62516 (= e!41045 call!4910)))

(declare-fun b!62517 () Bool)

(declare-fun e!41044 () Bool)

(declare-fun lt!26077 () ListLongMap!1351)

(assert (=> b!62517 (= e!41044 (= (apply!68 lt!26077 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1999 newMap!16)))))

(declare-fun b!62518 () Bool)

(assert (=> b!62518 (= e!41052 (= (apply!68 lt!26077 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1999 newMap!16)))))

(declare-fun bm!4902 () Bool)

(assert (=> bm!4902 (= call!4908 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun b!62519 () Bool)

(declare-fun e!41050 () Bool)

(assert (=> b!62519 (= e!41050 (= (apply!68 lt!26077 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)) (get!1088 (select (arr!1791 (_values!2070 newMap!16)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62519 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (_values!2070 newMap!16))))))

(assert (=> b!62519 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun b!62520 () Bool)

(declare-fun e!41047 () Unit!1680)

(declare-fun lt!26088 () Unit!1680)

(assert (=> b!62520 (= e!41047 lt!26088)))

(declare-fun lt!26095 () ListLongMap!1351)

(assert (=> b!62520 (= lt!26095 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26091 () (_ BitVec 64))

(assert (=> b!62520 (= lt!26091 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26085 () (_ BitVec 64))

(assert (=> b!62520 (= lt!26085 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26097 () Unit!1680)

(assert (=> b!62520 (= lt!26097 (addStillContains!44 lt!26095 lt!26091 (zeroValue!1999 newMap!16) lt!26085))))

(assert (=> b!62520 (contains!686 (+!82 lt!26095 (tuple2!2033 lt!26091 (zeroValue!1999 newMap!16))) lt!26085)))

(declare-fun lt!26078 () Unit!1680)

(assert (=> b!62520 (= lt!26078 lt!26097)))

(declare-fun lt!26084 () ListLongMap!1351)

(assert (=> b!62520 (= lt!26084 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26092 () (_ BitVec 64))

(assert (=> b!62520 (= lt!26092 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26083 () (_ BitVec 64))

(assert (=> b!62520 (= lt!26083 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26086 () Unit!1680)

(assert (=> b!62520 (= lt!26086 (addApplyDifferent!44 lt!26084 lt!26092 (minValue!1999 newMap!16) lt!26083))))

(assert (=> b!62520 (= (apply!68 (+!82 lt!26084 (tuple2!2033 lt!26092 (minValue!1999 newMap!16))) lt!26083) (apply!68 lt!26084 lt!26083))))

(declare-fun lt!26080 () Unit!1680)

(assert (=> b!62520 (= lt!26080 lt!26086)))

(declare-fun lt!26098 () ListLongMap!1351)

(assert (=> b!62520 (= lt!26098 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26094 () (_ BitVec 64))

(assert (=> b!62520 (= lt!26094 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26081 () (_ BitVec 64))

(assert (=> b!62520 (= lt!26081 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26090 () Unit!1680)

(assert (=> b!62520 (= lt!26090 (addApplyDifferent!44 lt!26098 lt!26094 (zeroValue!1999 newMap!16) lt!26081))))

(assert (=> b!62520 (= (apply!68 (+!82 lt!26098 (tuple2!2033 lt!26094 (zeroValue!1999 newMap!16))) lt!26081) (apply!68 lt!26098 lt!26081))))

(declare-fun lt!26087 () Unit!1680)

(assert (=> b!62520 (= lt!26087 lt!26090)))

(declare-fun lt!26093 () ListLongMap!1351)

(assert (=> b!62520 (= lt!26093 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26082 () (_ BitVec 64))

(assert (=> b!62520 (= lt!26082 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26096 () (_ BitVec 64))

(assert (=> b!62520 (= lt!26096 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!62520 (= lt!26088 (addApplyDifferent!44 lt!26093 lt!26082 (minValue!1999 newMap!16) lt!26096))))

(assert (=> b!62520 (= (apply!68 (+!82 lt!26093 (tuple2!2033 lt!26082 (minValue!1999 newMap!16))) lt!26096) (apply!68 lt!26093 lt!26096))))

(declare-fun b!62521 () Bool)

(declare-fun e!41053 () Bool)

(assert (=> b!62521 (= e!41053 (validKeyInArray!0 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62522 () Bool)

(declare-fun e!41055 () Bool)

(assert (=> b!62522 (= e!41055 e!41054)))

(declare-fun c!8332 () Bool)

(assert (=> b!62522 (= c!8332 (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!62523 () Bool)

(declare-fun e!41046 () Bool)

(declare-fun call!4909 () Bool)

(assert (=> b!62523 (= e!41046 (not call!4909))))

(declare-fun b!62524 () Bool)

(declare-fun e!41056 () Bool)

(assert (=> b!62524 (= e!41056 e!41050)))

(declare-fun res!34298 () Bool)

(assert (=> b!62524 (=> (not res!34298) (not e!41050))))

(assert (=> b!62524 (= res!34298 (contains!686 lt!26077 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!62524 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun d!12661 () Bool)

(assert (=> d!12661 e!41055))

(declare-fun res!34303 () Bool)

(assert (=> d!12661 (=> (not res!34303) (not e!41055))))

(assert (=> d!12661 (= res!34303 (or (bvsge #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))))

(declare-fun lt!26079 () ListLongMap!1351)

(assert (=> d!12661 (= lt!26077 lt!26079)))

(declare-fun lt!26089 () Unit!1680)

(assert (=> d!12661 (= lt!26089 e!41047)))

(declare-fun c!8334 () Bool)

(assert (=> d!12661 (= c!8334 e!41048)))

(declare-fun res!34300 () Bool)

(assert (=> d!12661 (=> (not res!34300) (not e!41048))))

(assert (=> d!12661 (= res!34300 (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun e!41049 () ListLongMap!1351)

(assert (=> d!12661 (= lt!26079 e!41049)))

(assert (=> d!12661 (= c!8331 (and (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12661 (validMask!0 (mask!5993 newMap!16))))

(assert (=> d!12661 (= (getCurrentListMap!391 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) lt!26077)))

(declare-fun b!62512 () Bool)

(assert (=> b!62512 (= e!41049 (+!82 call!4906 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))

(declare-fun bm!4903 () Bool)

(assert (=> bm!4903 (= call!4904 call!4908)))

(declare-fun b!62525 () Bool)

(assert (=> b!62525 (= e!41046 e!41044)))

(declare-fun res!34296 () Bool)

(assert (=> b!62525 (= res!34296 call!4909)))

(assert (=> b!62525 (=> (not res!34296) (not e!41044))))

(declare-fun b!62526 () Bool)

(declare-fun c!8330 () Bool)

(assert (=> b!62526 (= c!8330 (and (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!62526 (= e!41045 e!41051)))

(declare-fun bm!4904 () Bool)

(assert (=> bm!4904 (= call!4907 call!4904)))

(declare-fun bm!4905 () Bool)

(assert (=> bm!4905 (= call!4905 (contains!686 lt!26077 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4906 () Bool)

(assert (=> bm!4906 (= call!4909 (contains!686 lt!26077 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62527 () Bool)

(declare-fun res!34301 () Bool)

(assert (=> b!62527 (=> (not res!34301) (not e!41055))))

(assert (=> b!62527 (= res!34301 e!41056)))

(declare-fun res!34304 () Bool)

(assert (=> b!62527 (=> res!34304 e!41056)))

(assert (=> b!62527 (= res!34304 (not e!41053))))

(declare-fun res!34302 () Bool)

(assert (=> b!62527 (=> (not res!34302) (not e!41053))))

(assert (=> b!62527 (= res!34302 (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun b!62528 () Bool)

(declare-fun Unit!1693 () Unit!1680)

(assert (=> b!62528 (= e!41047 Unit!1693)))

(declare-fun b!62529 () Bool)

(assert (=> b!62529 (= e!41051 call!4907)))

(declare-fun bm!4907 () Bool)

(assert (=> bm!4907 (= call!4910 call!4906)))

(declare-fun b!62530 () Bool)

(declare-fun res!34297 () Bool)

(assert (=> b!62530 (=> (not res!34297) (not e!41055))))

(assert (=> b!62530 (= res!34297 e!41046)))

(declare-fun c!8329 () Bool)

(assert (=> b!62530 (= c!8329 (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!62531 () Bool)

(assert (=> b!62531 (= e!41049 e!41045)))

(assert (=> b!62531 (= c!8333 (and (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!12661 c!8331) b!62512))

(assert (= (and d!12661 (not c!8331)) b!62531))

(assert (= (and b!62531 c!8333) b!62516))

(assert (= (and b!62531 (not c!8333)) b!62526))

(assert (= (and b!62526 c!8330) b!62511))

(assert (= (and b!62526 (not c!8330)) b!62529))

(assert (= (or b!62511 b!62529) bm!4904))

(assert (= (or b!62516 bm!4904) bm!4903))

(assert (= (or b!62516 b!62511) bm!4907))

(assert (= (or b!62512 bm!4903) bm!4902))

(assert (= (or b!62512 bm!4907) bm!4901))

(assert (= (and d!12661 res!34300) b!62514))

(assert (= (and d!12661 c!8334) b!62520))

(assert (= (and d!12661 (not c!8334)) b!62528))

(assert (= (and d!12661 res!34303) b!62527))

(assert (= (and b!62527 res!34302) b!62521))

(assert (= (and b!62527 (not res!34304)) b!62524))

(assert (= (and b!62524 res!34298) b!62519))

(assert (= (and b!62527 res!34301) b!62530))

(assert (= (and b!62530 c!8329) b!62525))

(assert (= (and b!62530 (not c!8329)) b!62523))

(assert (= (and b!62525 res!34296) b!62517))

(assert (= (or b!62525 b!62523) bm!4906))

(assert (= (and b!62530 res!34297) b!62522))

(assert (= (and b!62522 c!8332) b!62513))

(assert (= (and b!62522 (not c!8332)) b!62515))

(assert (= (and b!62513 res!34299) b!62518))

(assert (= (or b!62513 b!62515) bm!4905))

(declare-fun b_lambda!2789 () Bool)

(assert (=> (not b_lambda!2789) (not b!62519)))

(declare-fun tb!1373 () Bool)

(declare-fun t!4828 () Bool)

(assert (=> (and b!62113 (= (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2087 newMap!16)) t!4828) tb!1373))

(declare-fun result!2455 () Bool)

(assert (=> tb!1373 (= result!2455 tp_is_empty!2413)))

(assert (=> b!62519 t!4828))

(declare-fun b_and!3821 () Bool)

(assert (= b_and!3817 (and (=> t!4828 result!2455) b_and!3821)))

(declare-fun t!4830 () Bool)

(declare-fun tb!1375 () Bool)

(assert (=> (and b!62120 (= (defaultEntry!2087 newMap!16) (defaultEntry!2087 newMap!16)) t!4830) tb!1375))

(declare-fun result!2457 () Bool)

(assert (= result!2457 result!2455))

(assert (=> b!62519 t!4830))

(declare-fun b_and!3823 () Bool)

(assert (= b_and!3819 (and (=> t!4830 result!2457) b_and!3823)))

(declare-fun m!56027 () Bool)

(assert (=> b!62520 m!56027))

(declare-fun m!56029 () Bool)

(assert (=> b!62520 m!56029))

(assert (=> b!62520 m!56027))

(declare-fun m!56031 () Bool)

(assert (=> b!62520 m!56031))

(declare-fun m!56033 () Bool)

(assert (=> b!62520 m!56033))

(declare-fun m!56035 () Bool)

(assert (=> b!62520 m!56035))

(declare-fun m!56037 () Bool)

(assert (=> b!62520 m!56037))

(declare-fun m!56039 () Bool)

(assert (=> b!62520 m!56039))

(declare-fun m!56041 () Bool)

(assert (=> b!62520 m!56041))

(declare-fun m!56043 () Bool)

(assert (=> b!62520 m!56043))

(declare-fun m!56045 () Bool)

(assert (=> b!62520 m!56045))

(declare-fun m!56047 () Bool)

(assert (=> b!62520 m!56047))

(declare-fun m!56049 () Bool)

(assert (=> b!62520 m!56049))

(declare-fun m!56051 () Bool)

(assert (=> b!62520 m!56051))

(assert (=> b!62520 m!56039))

(declare-fun m!56053 () Bool)

(assert (=> b!62520 m!56053))

(declare-fun m!56055 () Bool)

(assert (=> b!62520 m!56055))

(declare-fun m!56057 () Bool)

(assert (=> b!62520 m!56057))

(assert (=> b!62520 m!56053))

(assert (=> b!62520 m!56043))

(declare-fun m!56059 () Bool)

(assert (=> b!62520 m!56059))

(declare-fun m!56061 () Bool)

(assert (=> b!62517 m!56061))

(assert (=> b!62524 m!56033))

(assert (=> b!62524 m!56033))

(declare-fun m!56063 () Bool)

(assert (=> b!62524 m!56063))

(assert (=> b!62521 m!56033))

(assert (=> b!62521 m!56033))

(declare-fun m!56065 () Bool)

(assert (=> b!62521 m!56065))

(declare-fun m!56067 () Bool)

(assert (=> bm!4906 m!56067))

(declare-fun m!56069 () Bool)

(assert (=> b!62512 m!56069))

(assert (=> d!12661 m!55995))

(declare-fun m!56071 () Bool)

(assert (=> bm!4901 m!56071))

(declare-fun m!56073 () Bool)

(assert (=> b!62519 m!56073))

(declare-fun m!56075 () Bool)

(assert (=> b!62519 m!56075))

(assert (=> b!62519 m!56033))

(assert (=> b!62519 m!56075))

(assert (=> b!62519 m!56073))

(declare-fun m!56077 () Bool)

(assert (=> b!62519 m!56077))

(assert (=> b!62519 m!56033))

(declare-fun m!56079 () Bool)

(assert (=> b!62519 m!56079))

(declare-fun m!56081 () Bool)

(assert (=> b!62518 m!56081))

(assert (=> bm!4902 m!56051))

(assert (=> b!62514 m!56033))

(assert (=> b!62514 m!56033))

(assert (=> b!62514 m!56065))

(declare-fun m!56083 () Bool)

(assert (=> bm!4905 m!56083))

(assert (=> d!12611 d!12661))

(declare-fun d!12663 () Bool)

(declare-fun e!41057 () Bool)

(assert (=> d!12663 e!41057))

(declare-fun res!34305 () Bool)

(assert (=> d!12663 (=> (not res!34305) (not e!41057))))

(declare-fun lt!26100 () ListLongMap!1351)

(assert (=> d!12663 (= res!34305 (contains!686 lt!26100 (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!26101 () List!1429)

(assert (=> d!12663 (= lt!26100 (ListLongMap!1352 lt!26101))))

(declare-fun lt!26099 () Unit!1680)

(declare-fun lt!26102 () Unit!1680)

(assert (=> d!12663 (= lt!26099 lt!26102)))

(assert (=> d!12663 (= (getValueByKey!127 lt!26101 (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!132 (_2!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12663 (= lt!26102 (lemmaContainsTupThenGetReturnValue!44 lt!26101 (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12663 (= lt!26101 (insertStrictlySorted!47 (toList!691 call!4872) (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12663 (= (+!82 call!4872 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26100)))

(declare-fun b!62532 () Bool)

(declare-fun res!34306 () Bool)

(assert (=> b!62532 (=> (not res!34306) (not e!41057))))

(assert (=> b!62532 (= res!34306 (= (getValueByKey!127 (toList!691 lt!26100) (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!132 (_2!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!62533 () Bool)

(assert (=> b!62533 (= e!41057 (contains!689 (toList!691 lt!26100) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12663 res!34305) b!62532))

(assert (= (and b!62532 res!34306) b!62533))

(declare-fun m!56085 () Bool)

(assert (=> d!12663 m!56085))

(declare-fun m!56087 () Bool)

(assert (=> d!12663 m!56087))

(declare-fun m!56089 () Bool)

(assert (=> d!12663 m!56089))

(declare-fun m!56091 () Bool)

(assert (=> d!12663 m!56091))

(declare-fun m!56093 () Bool)

(assert (=> b!62532 m!56093))

(declare-fun m!56095 () Bool)

(assert (=> b!62533 m!56095))

(assert (=> b!62347 d!12663))

(assert (=> b!62456 d!12623))

(declare-fun d!12665 () Bool)

(declare-fun e!41060 () Bool)

(assert (=> d!12665 e!41060))

(declare-fun c!8337 () Bool)

(assert (=> d!12665 (= c!8337 (and (not (= (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> d!12665 true))

(declare-fun _$29!72 () Unit!1680)

(assert (=> d!12665 (= (choose!336 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (_values!2070 (v!2419 (underlying!233 thiss!992))) (mask!5993 (v!2419 (underlying!233 thiss!992))) (extraKeys!1966 (v!2419 (underlying!233 thiss!992))) (zeroValue!1999 (v!2419 (underlying!233 thiss!992))) (minValue!1999 (v!2419 (underlying!233 thiss!992))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2087 (v!2419 (underlying!233 thiss!992)))) _$29!72)))

(declare-fun b!62538 () Bool)

(assert (=> b!62538 (= e!41060 (arrayContainsKey!0 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!62539 () Bool)

(assert (=> b!62539 (= e!41060 (ite (= (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!1966 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1966 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!12665 c!8337) b!62538))

(assert (= (and d!12665 (not c!8337)) b!62539))

(assert (=> b!62538 m!55703))

(assert (=> b!62538 m!55715))

(assert (=> d!12625 d!12665))

(assert (=> d!12625 d!12629))

(declare-fun d!12667 () Bool)

(assert (=> d!12667 (= (inRange!0 (ite c!8290 (ite c!8297 (index!3018 lt!25976) (ite c!8294 (index!3017 lt!25956) (index!3020 lt!25956))) (ite c!8287 (index!3018 lt!25973) (ite c!8292 (index!3017 lt!25982) (index!3020 lt!25982)))) (mask!5993 newMap!16)) (and (bvsge (ite c!8290 (ite c!8297 (index!3018 lt!25976) (ite c!8294 (index!3017 lt!25956) (index!3020 lt!25956))) (ite c!8287 (index!3018 lt!25973) (ite c!8292 (index!3017 lt!25982) (index!3020 lt!25982)))) #b00000000000000000000000000000000) (bvslt (ite c!8290 (ite c!8297 (index!3018 lt!25976) (ite c!8294 (index!3017 lt!25956) (index!3020 lt!25956))) (ite c!8287 (index!3018 lt!25973) (ite c!8292 (index!3017 lt!25982) (index!3020 lt!25982)))) (bvadd (mask!5993 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4874 d!12667))

(declare-fun d!12669 () Bool)

(declare-fun e!41062 () Bool)

(assert (=> d!12669 e!41062))

(declare-fun res!34307 () Bool)

(assert (=> d!12669 (=> res!34307 e!41062)))

(declare-fun lt!26104 () Bool)

(assert (=> d!12669 (= res!34307 (not lt!26104))))

(declare-fun lt!26105 () Bool)

(assert (=> d!12669 (= lt!26104 lt!26105)))

(declare-fun lt!26103 () Unit!1680)

(declare-fun e!41061 () Unit!1680)

(assert (=> d!12669 (= lt!26103 e!41061)))

(declare-fun c!8338 () Bool)

(assert (=> d!12669 (= c!8338 lt!26105)))

(assert (=> d!12669 (= lt!26105 (containsKey!130 (toList!691 call!4877) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> d!12669 (= (contains!686 call!4877 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) lt!26104)))

(declare-fun b!62540 () Bool)

(declare-fun lt!26106 () Unit!1680)

(assert (=> b!62540 (= e!41061 lt!26106)))

(assert (=> b!62540 (= lt!26106 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 call!4877) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> b!62540 (isDefined!79 (getValueByKey!127 (toList!691 call!4877) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun b!62541 () Bool)

(declare-fun Unit!1694 () Unit!1680)

(assert (=> b!62541 (= e!41061 Unit!1694)))

(declare-fun b!62542 () Bool)

(assert (=> b!62542 (= e!41062 (isDefined!79 (getValueByKey!127 (toList!691 call!4877) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355))))))

(assert (= (and d!12669 c!8338) b!62540))

(assert (= (and d!12669 (not c!8338)) b!62541))

(assert (= (and d!12669 (not res!34307)) b!62542))

(assert (=> d!12669 m!55703))

(declare-fun m!56097 () Bool)

(assert (=> d!12669 m!56097))

(assert (=> b!62540 m!55703))

(declare-fun m!56099 () Bool)

(assert (=> b!62540 m!56099))

(assert (=> b!62540 m!55703))

(declare-fun m!56101 () Bool)

(assert (=> b!62540 m!56101))

(assert (=> b!62540 m!56101))

(declare-fun m!56103 () Bool)

(assert (=> b!62540 m!56103))

(assert (=> b!62542 m!55703))

(assert (=> b!62542 m!56101))

(assert (=> b!62542 m!56101))

(assert (=> b!62542 m!56103))

(assert (=> b!62364 d!12669))

(declare-fun b!62552 () Bool)

(declare-fun res!34318 () Bool)

(declare-fun e!41065 () Bool)

(assert (=> b!62552 (=> (not res!34318) (not e!41065))))

(declare-fun size!2028 (LongMapFixedSize!634) (_ BitVec 32))

(assert (=> b!62552 (= res!34318 (bvsge (size!2028 newMap!16) (_size!366 newMap!16)))))

(declare-fun b!62554 () Bool)

(assert (=> b!62554 (= e!41065 (and (bvsge (extraKeys!1966 newMap!16) #b00000000000000000000000000000000) (bvsle (extraKeys!1966 newMap!16) #b00000000000000000000000000000011) (bvsge (_vacant!366 newMap!16) #b00000000000000000000000000000000)))))

(declare-fun b!62551 () Bool)

(declare-fun res!34317 () Bool)

(assert (=> b!62551 (=> (not res!34317) (not e!41065))))

(assert (=> b!62551 (= res!34317 (and (= (size!2023 (_values!2070 newMap!16)) (bvadd (mask!5993 newMap!16) #b00000000000000000000000000000001)) (= (size!2022 (_keys!3719 newMap!16)) (size!2023 (_values!2070 newMap!16))) (bvsge (_size!366 newMap!16) #b00000000000000000000000000000000) (bvsle (_size!366 newMap!16) (bvadd (mask!5993 newMap!16) #b00000000000000000000000000000001))))))

(declare-fun b!62553 () Bool)

(declare-fun res!34316 () Bool)

(assert (=> b!62553 (=> (not res!34316) (not e!41065))))

(assert (=> b!62553 (= res!34316 (= (size!2028 newMap!16) (bvadd (_size!366 newMap!16) (bvsdiv (bvadd (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun d!12671 () Bool)

(declare-fun res!34319 () Bool)

(assert (=> d!12671 (=> (not res!34319) (not e!41065))))

(assert (=> d!12671 (= res!34319 (validMask!0 (mask!5993 newMap!16)))))

(assert (=> d!12671 (= (simpleValid!44 newMap!16) e!41065)))

(assert (= (and d!12671 res!34319) b!62551))

(assert (= (and b!62551 res!34317) b!62552))

(assert (= (and b!62552 res!34318) b!62553))

(assert (= (and b!62553 res!34316) b!62554))

(declare-fun m!56105 () Bool)

(assert (=> b!62552 m!56105))

(assert (=> b!62553 m!56105))

(assert (=> d!12671 m!55995))

(assert (=> d!12631 d!12671))

(declare-fun bm!4910 () Bool)

(declare-fun call!4913 () Bool)

(assert (=> bm!4910 (= call!4913 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3719 newMap!16) (mask!5993 newMap!16)))))

(declare-fun b!62563 () Bool)

(declare-fun e!41074 () Bool)

(assert (=> b!62563 (= e!41074 call!4913)))

(declare-fun b!62564 () Bool)

(declare-fun e!41073 () Bool)

(assert (=> b!62564 (= e!41073 call!4913)))

(declare-fun b!62565 () Bool)

(declare-fun e!41072 () Bool)

(assert (=> b!62565 (= e!41072 e!41073)))

(declare-fun c!8341 () Bool)

(assert (=> b!62565 (= c!8341 (validKeyInArray!0 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62566 () Bool)

(assert (=> b!62566 (= e!41073 e!41074)))

(declare-fun lt!26114 () (_ BitVec 64))

(assert (=> b!62566 (= lt!26114 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26115 () Unit!1680)

(declare-fun lemmaArrayContainsFromImpliesContainsFromZero!0 (array!3743 (_ BitVec 64) (_ BitVec 32)) Unit!1680)

(assert (=> b!62566 (= lt!26115 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3719 newMap!16) lt!26114 #b00000000000000000000000000000000))))

(assert (=> b!62566 (arrayContainsKey!0 (_keys!3719 newMap!16) lt!26114 #b00000000000000000000000000000000)))

(declare-fun lt!26113 () Unit!1680)

(assert (=> b!62566 (= lt!26113 lt!26115)))

(declare-fun res!34324 () Bool)

(assert (=> b!62566 (= res!34324 (= (seekEntryOrOpen!0 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000) (_keys!3719 newMap!16) (mask!5993 newMap!16)) (Found!223 #b00000000000000000000000000000000)))))

(assert (=> b!62566 (=> (not res!34324) (not e!41074))))

(declare-fun d!12673 () Bool)

(declare-fun res!34325 () Bool)

(assert (=> d!12673 (=> res!34325 e!41072)))

(assert (=> d!12673 (= res!34325 (bvsge #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(assert (=> d!12673 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3719 newMap!16) (mask!5993 newMap!16)) e!41072)))

(assert (= (and d!12673 (not res!34325)) b!62565))

(assert (= (and b!62565 c!8341) b!62566))

(assert (= (and b!62565 (not c!8341)) b!62564))

(assert (= (and b!62566 res!34324) b!62563))

(assert (= (or b!62563 b!62564) bm!4910))

(declare-fun m!56107 () Bool)

(assert (=> bm!4910 m!56107))

(assert (=> b!62565 m!56033))

(assert (=> b!62565 m!56033))

(assert (=> b!62565 m!56065))

(assert (=> b!62566 m!56033))

(declare-fun m!56109 () Bool)

(assert (=> b!62566 m!56109))

(declare-fun m!56111 () Bool)

(assert (=> b!62566 m!56111))

(assert (=> b!62566 m!56033))

(declare-fun m!56113 () Bool)

(assert (=> b!62566 m!56113))

(assert (=> b!62480 d!12673))

(declare-fun d!12675 () Bool)

(declare-fun e!41076 () Bool)

(assert (=> d!12675 e!41076))

(declare-fun res!34326 () Bool)

(assert (=> d!12675 (=> res!34326 e!41076)))

(declare-fun lt!26117 () Bool)

(assert (=> d!12675 (= res!34326 (not lt!26117))))

(declare-fun lt!26118 () Bool)

(assert (=> d!12675 (= lt!26117 lt!26118)))

(declare-fun lt!26116 () Unit!1680)

(declare-fun e!41075 () Unit!1680)

(assert (=> d!12675 (= lt!26116 e!41075)))

(declare-fun c!8342 () Bool)

(assert (=> d!12675 (= c!8342 lt!26118)))

(assert (=> d!12675 (= lt!26118 (containsKey!130 (toList!691 lt!26027) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!12675 (= (contains!686 lt!26027 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!26117)))

(declare-fun b!62567 () Bool)

(declare-fun lt!26119 () Unit!1680)

(assert (=> b!62567 (= e!41075 lt!26119)))

(assert (=> b!62567 (= lt!26119 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 lt!26027) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!62567 (isDefined!79 (getValueByKey!127 (toList!691 lt!26027) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!62568 () Bool)

(declare-fun Unit!1695 () Unit!1680)

(assert (=> b!62568 (= e!41075 Unit!1695)))

(declare-fun b!62569 () Bool)

(assert (=> b!62569 (= e!41076 (isDefined!79 (getValueByKey!127 (toList!691 lt!26027) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!12675 c!8342) b!62567))

(assert (= (and d!12675 (not c!8342)) b!62568))

(assert (= (and d!12675 (not res!34326)) b!62569))

(assert (=> d!12675 m!55903))

(declare-fun m!56115 () Bool)

(assert (=> d!12675 m!56115))

(assert (=> b!62567 m!55903))

(declare-fun m!56117 () Bool)

(assert (=> b!62567 m!56117))

(assert (=> b!62567 m!55903))

(assert (=> b!62567 m!56019))

(assert (=> b!62567 m!56019))

(declare-fun m!56119 () Bool)

(assert (=> b!62567 m!56119))

(assert (=> b!62569 m!55903))

(assert (=> b!62569 m!56019))

(assert (=> b!62569 m!56019))

(assert (=> b!62569 m!56119))

(assert (=> b!62438 d!12675))

(declare-fun d!12677 () Bool)

(declare-fun res!34327 () Bool)

(declare-fun e!41077 () Bool)

(assert (=> d!12677 (=> (not res!34327) (not e!41077))))

(assert (=> d!12677 (= res!34327 (simpleValid!44 (_2!1026 lt!25975)))))

(assert (=> d!12677 (= (valid!269 (_2!1026 lt!25975)) e!41077)))

(declare-fun b!62570 () Bool)

(declare-fun res!34328 () Bool)

(assert (=> b!62570 (=> (not res!34328) (not e!41077))))

(assert (=> b!62570 (= res!34328 (= (arrayCountValidKeys!0 (_keys!3719 (_2!1026 lt!25975)) #b00000000000000000000000000000000 (size!2022 (_keys!3719 (_2!1026 lt!25975)))) (_size!366 (_2!1026 lt!25975))))))

(declare-fun b!62571 () Bool)

(declare-fun res!34329 () Bool)

(assert (=> b!62571 (=> (not res!34329) (not e!41077))))

(assert (=> b!62571 (= res!34329 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3719 (_2!1026 lt!25975)) (mask!5993 (_2!1026 lt!25975))))))

(declare-fun b!62572 () Bool)

(assert (=> b!62572 (= e!41077 (arrayNoDuplicates!0 (_keys!3719 (_2!1026 lt!25975)) #b00000000000000000000000000000000 Nil!1427))))

(assert (= (and d!12677 res!34327) b!62570))

(assert (= (and b!62570 res!34328) b!62571))

(assert (= (and b!62571 res!34329) b!62572))

(declare-fun m!56121 () Bool)

(assert (=> d!12677 m!56121))

(declare-fun m!56123 () Bool)

(assert (=> b!62570 m!56123))

(declare-fun m!56125 () Bool)

(assert (=> b!62571 m!56125))

(declare-fun m!56127 () Bool)

(assert (=> b!62572 m!56127))

(assert (=> d!12607 d!12677))

(assert (=> d!12607 d!12631))

(declare-fun d!12679 () Bool)

(declare-fun e!41078 () Bool)

(assert (=> d!12679 e!41078))

(declare-fun res!34330 () Bool)

(assert (=> d!12679 (=> (not res!34330) (not e!41078))))

(declare-fun lt!26121 () ListLongMap!1351)

(assert (=> d!12679 (= res!34330 (contains!686 lt!26121 (_1!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun lt!26122 () List!1429)

(assert (=> d!12679 (= lt!26121 (ListLongMap!1352 lt!26122))))

(declare-fun lt!26120 () Unit!1680)

(declare-fun lt!26123 () Unit!1680)

(assert (=> d!12679 (= lt!26120 lt!26123)))

(assert (=> d!12679 (= (getValueByKey!127 lt!26122 (_1!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))) (Some!132 (_2!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!12679 (= lt!26123 (lemmaContainsTupThenGetReturnValue!44 lt!26122 (_1!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!12679 (= lt!26122 (insertStrictlySorted!47 (toList!691 lt!26045) (_1!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!12679 (= (+!82 lt!26045 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))) lt!26121)))

(declare-fun b!62573 () Bool)

(declare-fun res!34331 () Bool)

(assert (=> b!62573 (=> (not res!34331) (not e!41078))))

(assert (=> b!62573 (= res!34331 (= (getValueByKey!127 (toList!691 lt!26121) (_1!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))) (Some!132 (_2!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!62574 () Bool)

(assert (=> b!62574 (= e!41078 (contains!689 (toList!691 lt!26121) (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))))

(assert (= (and d!12679 res!34330) b!62573))

(assert (= (and b!62573 res!34331) b!62574))

(declare-fun m!56129 () Bool)

(assert (=> d!12679 m!56129))

(declare-fun m!56131 () Bool)

(assert (=> d!12679 m!56131))

(declare-fun m!56133 () Bool)

(assert (=> d!12679 m!56133))

(declare-fun m!56135 () Bool)

(assert (=> d!12679 m!56135))

(declare-fun m!56137 () Bool)

(assert (=> b!62573 m!56137))

(declare-fun m!56139 () Bool)

(assert (=> b!62574 m!56139))

(assert (=> b!62434 d!12679))

(declare-fun d!12681 () Bool)

(assert (=> d!12681 (contains!686 (+!82 lt!26045 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))) lt!26035)))

(declare-fun lt!26126 () Unit!1680)

(declare-fun choose!338 (ListLongMap!1351 (_ BitVec 64) V!2865 (_ BitVec 64)) Unit!1680)

(assert (=> d!12681 (= lt!26126 (choose!338 lt!26045 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))) lt!26035))))

(assert (=> d!12681 (contains!686 lt!26045 lt!26035)))

(assert (=> d!12681 (= (addStillContains!44 lt!26045 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))) lt!26035) lt!26126)))

(declare-fun bs!2722 () Bool)

(assert (= bs!2722 d!12681))

(assert (=> bs!2722 m!55913))

(assert (=> bs!2722 m!55913))

(assert (=> bs!2722 m!55929))

(declare-fun m!56141 () Bool)

(assert (=> bs!2722 m!56141))

(declare-fun m!56143 () Bool)

(assert (=> bs!2722 m!56143))

(assert (=> b!62434 d!12681))

(declare-fun d!12683 () Bool)

(assert (=> d!12683 (= (apply!68 (+!82 lt!26043 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) lt!26046) (apply!68 lt!26043 lt!26046))))

(declare-fun lt!26129 () Unit!1680)

(declare-fun choose!339 (ListLongMap!1351 (_ BitVec 64) V!2865 (_ BitVec 64)) Unit!1680)

(assert (=> d!12683 (= lt!26129 (choose!339 lt!26043 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992))) lt!26046))))

(declare-fun e!41081 () Bool)

(assert (=> d!12683 e!41081))

(declare-fun res!34334 () Bool)

(assert (=> d!12683 (=> (not res!34334) (not e!41081))))

(assert (=> d!12683 (= res!34334 (contains!686 lt!26043 lt!26046))))

(assert (=> d!12683 (= (addApplyDifferent!44 lt!26043 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992))) lt!26046) lt!26129)))

(declare-fun b!62579 () Bool)

(assert (=> b!62579 (= e!41081 (not (= lt!26046 lt!26032)))))

(assert (= (and d!12683 res!34334) b!62579))

(assert (=> d!12683 m!55909))

(assert (=> d!12683 m!55911))

(assert (=> d!12683 m!55909))

(declare-fun m!56145 () Bool)

(assert (=> d!12683 m!56145))

(assert (=> d!12683 m!55907))

(declare-fun m!56147 () Bool)

(assert (=> d!12683 m!56147))

(assert (=> b!62434 d!12683))

(declare-fun d!12685 () Bool)

(assert (=> d!12685 (= (apply!68 lt!26048 lt!26031) (get!1092 (getValueByKey!127 (toList!691 lt!26048) lt!26031)))))

(declare-fun bs!2723 () Bool)

(assert (= bs!2723 d!12685))

(declare-fun m!56149 () Bool)

(assert (=> bs!2723 m!56149))

(assert (=> bs!2723 m!56149))

(declare-fun m!56151 () Bool)

(assert (=> bs!2723 m!56151))

(assert (=> b!62434 d!12685))

(declare-fun bm!4913 () Bool)

(declare-fun call!4916 () ListLongMap!1351)

(assert (=> bm!4913 (= call!4916 (getCurrentListMapNoExtraKeys!46 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (_values!2070 (v!2419 (underlying!233 thiss!992))) (mask!5993 (v!2419 (underlying!233 thiss!992))) (extraKeys!1966 (v!2419 (underlying!233 thiss!992))) (zeroValue!1999 (v!2419 (underlying!233 thiss!992))) (minValue!1999 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2087 (v!2419 (underlying!233 thiss!992)))))))

(declare-fun b!62604 () Bool)

(declare-fun e!41096 () Bool)

(assert (=> b!62604 (= e!41096 (validKeyInArray!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!62604 (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000)))

(declare-fun b!62605 () Bool)

(declare-fun e!41100 () ListLongMap!1351)

(declare-fun e!41102 () ListLongMap!1351)

(assert (=> b!62605 (= e!41100 e!41102)))

(declare-fun c!8353 () Bool)

(assert (=> b!62605 (= c!8353 (validKeyInArray!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!62606 () Bool)

(declare-fun e!41101 () Bool)

(declare-fun e!41099 () Bool)

(assert (=> b!62606 (= e!41101 e!41099)))

(assert (=> b!62606 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun res!34343 () Bool)

(declare-fun lt!26146 () ListLongMap!1351)

(assert (=> b!62606 (= res!34343 (contains!686 lt!26146 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!62606 (=> (not res!34343) (not e!41099))))

(declare-fun b!62607 () Bool)

(assert (=> b!62607 (= e!41100 (ListLongMap!1352 Nil!1426))))

(declare-fun b!62608 () Bool)

(declare-fun e!41097 () Bool)

(assert (=> b!62608 (= e!41101 e!41097)))

(declare-fun c!8352 () Bool)

(assert (=> b!62608 (= c!8352 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun b!62609 () Bool)

(assert (=> b!62609 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992))))))))

(assert (=> b!62609 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2023 (_values!2070 (v!2419 (underlying!233 thiss!992))))))))

(assert (=> b!62609 (= e!41099 (= (apply!68 lt!26146 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!62610 () Bool)

(declare-fun e!41098 () Bool)

(assert (=> b!62610 (= e!41098 e!41101)))

(declare-fun c!8354 () Bool)

(assert (=> b!62610 (= c!8354 e!41096)))

(declare-fun res!34346 () Bool)

(assert (=> b!62610 (=> (not res!34346) (not e!41096))))

(assert (=> b!62610 (= res!34346 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun b!62612 () Bool)

(assert (=> b!62612 (= e!41097 (= lt!26146 (getCurrentListMapNoExtraKeys!46 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (_values!2070 (v!2419 (underlying!233 thiss!992))) (mask!5993 (v!2419 (underlying!233 thiss!992))) (extraKeys!1966 (v!2419 (underlying!233 thiss!992))) (zeroValue!1999 (v!2419 (underlying!233 thiss!992))) (minValue!1999 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun b!62613 () Bool)

(assert (=> b!62613 (= e!41102 call!4916)))

(declare-fun b!62614 () Bool)

(declare-fun lt!26148 () Unit!1680)

(declare-fun lt!26145 () Unit!1680)

(assert (=> b!62614 (= lt!26148 lt!26145)))

(declare-fun lt!26144 () (_ BitVec 64))

(declare-fun lt!26149 () V!2865)

(declare-fun lt!26147 () (_ BitVec 64))

(declare-fun lt!26150 () ListLongMap!1351)

(assert (=> b!62614 (not (contains!686 (+!82 lt!26150 (tuple2!2033 lt!26147 lt!26149)) lt!26144))))

(declare-fun addStillNotContains!19 (ListLongMap!1351 (_ BitVec 64) V!2865 (_ BitVec 64)) Unit!1680)

(assert (=> b!62614 (= lt!26145 (addStillNotContains!19 lt!26150 lt!26147 lt!26149 lt!26144))))

(assert (=> b!62614 (= lt!26144 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!62614 (= lt!26149 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!62614 (= lt!26147 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!62614 (= lt!26150 call!4916)))

(assert (=> b!62614 (= e!41102 (+!82 call!4916 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!62615 () Bool)

(declare-fun res!34345 () Bool)

(assert (=> b!62615 (=> (not res!34345) (not e!41098))))

(assert (=> b!62615 (= res!34345 (not (contains!686 lt!26146 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!62611 () Bool)

(declare-fun isEmpty!305 (ListLongMap!1351) Bool)

(assert (=> b!62611 (= e!41097 (isEmpty!305 lt!26146))))

(declare-fun d!12687 () Bool)

(assert (=> d!12687 e!41098))

(declare-fun res!34344 () Bool)

(assert (=> d!12687 (=> (not res!34344) (not e!41098))))

(assert (=> d!12687 (= res!34344 (not (contains!686 lt!26146 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12687 (= lt!26146 e!41100)))

(declare-fun c!8351 () Bool)

(assert (=> d!12687 (= c!8351 (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992))))))))

(assert (=> d!12687 (validMask!0 (mask!5993 (v!2419 (underlying!233 thiss!992))))))

(assert (=> d!12687 (= (getCurrentListMapNoExtraKeys!46 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (_values!2070 (v!2419 (underlying!233 thiss!992))) (mask!5993 (v!2419 (underlying!233 thiss!992))) (extraKeys!1966 (v!2419 (underlying!233 thiss!992))) (zeroValue!1999 (v!2419 (underlying!233 thiss!992))) (minValue!1999 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2087 (v!2419 (underlying!233 thiss!992)))) lt!26146)))

(assert (= (and d!12687 c!8351) b!62607))

(assert (= (and d!12687 (not c!8351)) b!62605))

(assert (= (and b!62605 c!8353) b!62614))

(assert (= (and b!62605 (not c!8353)) b!62613))

(assert (= (or b!62614 b!62613) bm!4913))

(assert (= (and d!12687 res!34344) b!62615))

(assert (= (and b!62615 res!34345) b!62610))

(assert (= (and b!62610 res!34346) b!62604))

(assert (= (and b!62610 c!8354) b!62606))

(assert (= (and b!62610 (not c!8354)) b!62608))

(assert (= (and b!62606 res!34343) b!62609))

(assert (= (and b!62608 c!8352) b!62612))

(assert (= (and b!62608 (not c!8352)) b!62611))

(declare-fun b_lambda!2791 () Bool)

(assert (=> (not b_lambda!2791) (not b!62609)))

(assert (=> b!62609 t!4812))

(declare-fun b_and!3825 () Bool)

(assert (= b_and!3821 (and (=> t!4812 result!2435) b_and!3825)))

(assert (=> b!62609 t!4814))

(declare-fun b_and!3827 () Bool)

(assert (= b_and!3823 (and (=> t!4814 result!2439) b_and!3827)))

(declare-fun b_lambda!2793 () Bool)

(assert (=> (not b_lambda!2793) (not b!62614)))

(assert (=> b!62614 t!4812))

(declare-fun b_and!3829 () Bool)

(assert (= b_and!3825 (and (=> t!4812 result!2435) b_and!3829)))

(assert (=> b!62614 t!4814))

(declare-fun b_and!3831 () Bool)

(assert (= b_and!3827 (and (=> t!4814 result!2439) b_and!3831)))

(assert (=> b!62609 m!55699))

(assert (=> b!62609 m!55903))

(declare-fun m!56153 () Bool)

(assert (=> b!62609 m!56153))

(assert (=> b!62609 m!55943))

(assert (=> b!62609 m!55699))

(assert (=> b!62609 m!55945))

(assert (=> b!62609 m!55903))

(assert (=> b!62609 m!55943))

(declare-fun m!56155 () Bool)

(assert (=> b!62614 m!56155))

(declare-fun m!56157 () Bool)

(assert (=> b!62614 m!56157))

(declare-fun m!56159 () Bool)

(assert (=> b!62614 m!56159))

(assert (=> b!62614 m!55943))

(assert (=> b!62614 m!55699))

(assert (=> b!62614 m!55945))

(declare-fun m!56161 () Bool)

(assert (=> b!62614 m!56161))

(assert (=> b!62614 m!55903))

(assert (=> b!62614 m!55943))

(assert (=> b!62614 m!56155))

(assert (=> b!62614 m!55699))

(declare-fun m!56163 () Bool)

(assert (=> b!62612 m!56163))

(declare-fun m!56165 () Bool)

(assert (=> b!62615 m!56165))

(declare-fun m!56167 () Bool)

(assert (=> b!62611 m!56167))

(assert (=> b!62605 m!55903))

(assert (=> b!62605 m!55903))

(assert (=> b!62605 m!55935))

(assert (=> bm!4913 m!56163))

(assert (=> b!62606 m!55903))

(assert (=> b!62606 m!55903))

(declare-fun m!56169 () Bool)

(assert (=> b!62606 m!56169))

(declare-fun m!56171 () Bool)

(assert (=> d!12687 m!56171))

(assert (=> d!12687 m!55695))

(assert (=> b!62604 m!55903))

(assert (=> b!62604 m!55903))

(assert (=> b!62604 m!55935))

(assert (=> b!62434 d!12687))

(declare-fun d!12689 () Bool)

(declare-fun e!41103 () Bool)

(assert (=> d!12689 e!41103))

(declare-fun res!34347 () Bool)

(assert (=> d!12689 (=> (not res!34347) (not e!41103))))

(declare-fun lt!26152 () ListLongMap!1351)

(assert (=> d!12689 (= res!34347 (contains!686 lt!26152 (_1!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun lt!26153 () List!1429)

(assert (=> d!12689 (= lt!26152 (ListLongMap!1352 lt!26153))))

(declare-fun lt!26151 () Unit!1680)

(declare-fun lt!26154 () Unit!1680)

(assert (=> d!12689 (= lt!26151 lt!26154)))

(assert (=> d!12689 (= (getValueByKey!127 lt!26153 (_1!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))) (Some!132 (_2!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!12689 (= lt!26154 (lemmaContainsTupThenGetReturnValue!44 lt!26153 (_1!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!12689 (= lt!26153 (insertStrictlySorted!47 (toList!691 lt!26048) (_1!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!12689 (= (+!82 lt!26048 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))) lt!26152)))

(declare-fun b!62616 () Bool)

(declare-fun res!34348 () Bool)

(assert (=> b!62616 (=> (not res!34348) (not e!41103))))

(assert (=> b!62616 (= res!34348 (= (getValueByKey!127 (toList!691 lt!26152) (_1!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))) (Some!132 (_2!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!62617 () Bool)

(assert (=> b!62617 (= e!41103 (contains!689 (toList!691 lt!26152) (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))))

(assert (= (and d!12689 res!34347) b!62616))

(assert (= (and b!62616 res!34348) b!62617))

(declare-fun m!56173 () Bool)

(assert (=> d!12689 m!56173))

(declare-fun m!56175 () Bool)

(assert (=> d!12689 m!56175))

(declare-fun m!56177 () Bool)

(assert (=> d!12689 m!56177))

(declare-fun m!56179 () Bool)

(assert (=> d!12689 m!56179))

(declare-fun m!56181 () Bool)

(assert (=> b!62616 m!56181))

(declare-fun m!56183 () Bool)

(assert (=> b!62617 m!56183))

(assert (=> b!62434 d!12689))

(declare-fun d!12691 () Bool)

(assert (=> d!12691 (= (apply!68 lt!26034 lt!26033) (get!1092 (getValueByKey!127 (toList!691 lt!26034) lt!26033)))))

(declare-fun bs!2724 () Bool)

(assert (= bs!2724 d!12691))

(declare-fun m!56185 () Bool)

(assert (=> bs!2724 m!56185))

(assert (=> bs!2724 m!56185))

(declare-fun m!56187 () Bool)

(assert (=> bs!2724 m!56187))

(assert (=> b!62434 d!12691))

(declare-fun d!12693 () Bool)

(assert (=> d!12693 (= (apply!68 (+!82 lt!26034 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) lt!26033) (apply!68 lt!26034 lt!26033))))

(declare-fun lt!26155 () Unit!1680)

(assert (=> d!12693 (= lt!26155 (choose!339 lt!26034 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992))) lt!26033))))

(declare-fun e!41104 () Bool)

(assert (=> d!12693 e!41104))

(declare-fun res!34349 () Bool)

(assert (=> d!12693 (=> (not res!34349) (not e!41104))))

(assert (=> d!12693 (= res!34349 (contains!686 lt!26034 lt!26033))))

(assert (=> d!12693 (= (addApplyDifferent!44 lt!26034 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992))) lt!26033) lt!26155)))

(declare-fun b!62618 () Bool)

(assert (=> b!62618 (= e!41104 (not (= lt!26033 lt!26042)))))

(assert (= (and d!12693 res!34349) b!62618))

(assert (=> d!12693 m!55897))

(assert (=> d!12693 m!55901))

(assert (=> d!12693 m!55897))

(declare-fun m!56189 () Bool)

(assert (=> d!12693 m!56189))

(assert (=> d!12693 m!55915))

(declare-fun m!56191 () Bool)

(assert (=> d!12693 m!56191))

(assert (=> b!62434 d!12693))

(declare-fun d!12695 () Bool)

(assert (=> d!12695 (= (apply!68 (+!82 lt!26048 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))) lt!26031) (apply!68 lt!26048 lt!26031))))

(declare-fun lt!26156 () Unit!1680)

(assert (=> d!12695 (= lt!26156 (choose!339 lt!26048 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))) lt!26031))))

(declare-fun e!41105 () Bool)

(assert (=> d!12695 e!41105))

(declare-fun res!34350 () Bool)

(assert (=> d!12695 (=> (not res!34350) (not e!41105))))

(assert (=> d!12695 (= res!34350 (contains!686 lt!26048 lt!26031))))

(assert (=> d!12695 (= (addApplyDifferent!44 lt!26048 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))) lt!26031) lt!26156)))

(declare-fun b!62619 () Bool)

(assert (=> b!62619 (= e!41105 (not (= lt!26031 lt!26044)))))

(assert (= (and d!12695 res!34350) b!62619))

(assert (=> d!12695 m!55923))

(assert (=> d!12695 m!55925))

(assert (=> d!12695 m!55923))

(declare-fun m!56193 () Bool)

(assert (=> d!12695 m!56193))

(assert (=> d!12695 m!55919))

(declare-fun m!56195 () Bool)

(assert (=> d!12695 m!56195))

(assert (=> b!62434 d!12695))

(declare-fun d!12697 () Bool)

(assert (=> d!12697 (= (apply!68 (+!82 lt!26034 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) lt!26033) (get!1092 (getValueByKey!127 (toList!691 (+!82 lt!26034 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26033)))))

(declare-fun bs!2725 () Bool)

(assert (= bs!2725 d!12697))

(declare-fun m!56197 () Bool)

(assert (=> bs!2725 m!56197))

(assert (=> bs!2725 m!56197))

(declare-fun m!56199 () Bool)

(assert (=> bs!2725 m!56199))

(assert (=> b!62434 d!12697))

(declare-fun d!12699 () Bool)

(declare-fun e!41107 () Bool)

(assert (=> d!12699 e!41107))

(declare-fun res!34351 () Bool)

(assert (=> d!12699 (=> res!34351 e!41107)))

(declare-fun lt!26158 () Bool)

(assert (=> d!12699 (= res!34351 (not lt!26158))))

(declare-fun lt!26159 () Bool)

(assert (=> d!12699 (= lt!26158 lt!26159)))

(declare-fun lt!26157 () Unit!1680)

(declare-fun e!41106 () Unit!1680)

(assert (=> d!12699 (= lt!26157 e!41106)))

(declare-fun c!8355 () Bool)

(assert (=> d!12699 (= c!8355 lt!26159)))

(assert (=> d!12699 (= lt!26159 (containsKey!130 (toList!691 (+!82 lt!26045 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26035))))

(assert (=> d!12699 (= (contains!686 (+!82 lt!26045 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))) lt!26035) lt!26158)))

(declare-fun b!62620 () Bool)

(declare-fun lt!26160 () Unit!1680)

(assert (=> b!62620 (= e!41106 lt!26160)))

(assert (=> b!62620 (= lt!26160 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 (+!82 lt!26045 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26035))))

(assert (=> b!62620 (isDefined!79 (getValueByKey!127 (toList!691 (+!82 lt!26045 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26035))))

(declare-fun b!62621 () Bool)

(declare-fun Unit!1696 () Unit!1680)

(assert (=> b!62621 (= e!41106 Unit!1696)))

(declare-fun b!62622 () Bool)

(assert (=> b!62622 (= e!41107 (isDefined!79 (getValueByKey!127 (toList!691 (+!82 lt!26045 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26035)))))

(assert (= (and d!12699 c!8355) b!62620))

(assert (= (and d!12699 (not c!8355)) b!62621))

(assert (= (and d!12699 (not res!34351)) b!62622))

(declare-fun m!56201 () Bool)

(assert (=> d!12699 m!56201))

(declare-fun m!56203 () Bool)

(assert (=> b!62620 m!56203))

(declare-fun m!56205 () Bool)

(assert (=> b!62620 m!56205))

(assert (=> b!62620 m!56205))

(declare-fun m!56207 () Bool)

(assert (=> b!62620 m!56207))

(assert (=> b!62622 m!56205))

(assert (=> b!62622 m!56205))

(assert (=> b!62622 m!56207))

(assert (=> b!62434 d!12699))

(declare-fun d!12701 () Bool)

(assert (=> d!12701 (= (apply!68 lt!26043 lt!26046) (get!1092 (getValueByKey!127 (toList!691 lt!26043) lt!26046)))))

(declare-fun bs!2726 () Bool)

(assert (= bs!2726 d!12701))

(declare-fun m!56209 () Bool)

(assert (=> bs!2726 m!56209))

(assert (=> bs!2726 m!56209))

(declare-fun m!56211 () Bool)

(assert (=> bs!2726 m!56211))

(assert (=> b!62434 d!12701))

(declare-fun d!12703 () Bool)

(assert (=> d!12703 (= (apply!68 (+!82 lt!26048 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))) lt!26031) (get!1092 (getValueByKey!127 (toList!691 (+!82 lt!26048 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26031)))))

(declare-fun bs!2727 () Bool)

(assert (= bs!2727 d!12703))

(declare-fun m!56213 () Bool)

(assert (=> bs!2727 m!56213))

(assert (=> bs!2727 m!56213))

(declare-fun m!56215 () Bool)

(assert (=> bs!2727 m!56215))

(assert (=> b!62434 d!12703))

(declare-fun d!12705 () Bool)

(declare-fun e!41108 () Bool)

(assert (=> d!12705 e!41108))

(declare-fun res!34352 () Bool)

(assert (=> d!12705 (=> (not res!34352) (not e!41108))))

(declare-fun lt!26162 () ListLongMap!1351)

(assert (=> d!12705 (= res!34352 (contains!686 lt!26162 (_1!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun lt!26163 () List!1429)

(assert (=> d!12705 (= lt!26162 (ListLongMap!1352 lt!26163))))

(declare-fun lt!26161 () Unit!1680)

(declare-fun lt!26164 () Unit!1680)

(assert (=> d!12705 (= lt!26161 lt!26164)))

(assert (=> d!12705 (= (getValueByKey!127 lt!26163 (_1!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) (Some!132 (_2!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!12705 (= lt!26164 (lemmaContainsTupThenGetReturnValue!44 lt!26163 (_1!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!12705 (= lt!26163 (insertStrictlySorted!47 (toList!691 lt!26034) (_1!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!12705 (= (+!82 lt!26034 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) lt!26162)))

(declare-fun b!62623 () Bool)

(declare-fun res!34353 () Bool)

(assert (=> b!62623 (=> (not res!34353) (not e!41108))))

(assert (=> b!62623 (= res!34353 (= (getValueByKey!127 (toList!691 lt!26162) (_1!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) (Some!132 (_2!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!62624 () Bool)

(assert (=> b!62624 (= e!41108 (contains!689 (toList!691 lt!26162) (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))

(assert (= (and d!12705 res!34352) b!62623))

(assert (= (and b!62623 res!34353) b!62624))

(declare-fun m!56217 () Bool)

(assert (=> d!12705 m!56217))

(declare-fun m!56219 () Bool)

(assert (=> d!12705 m!56219))

(declare-fun m!56221 () Bool)

(assert (=> d!12705 m!56221))

(declare-fun m!56223 () Bool)

(assert (=> d!12705 m!56223))

(declare-fun m!56225 () Bool)

(assert (=> b!62623 m!56225))

(declare-fun m!56227 () Bool)

(assert (=> b!62624 m!56227))

(assert (=> b!62434 d!12705))

(declare-fun d!12707 () Bool)

(declare-fun e!41109 () Bool)

(assert (=> d!12707 e!41109))

(declare-fun res!34354 () Bool)

(assert (=> d!12707 (=> (not res!34354) (not e!41109))))

(declare-fun lt!26166 () ListLongMap!1351)

(assert (=> d!12707 (= res!34354 (contains!686 lt!26166 (_1!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun lt!26167 () List!1429)

(assert (=> d!12707 (= lt!26166 (ListLongMap!1352 lt!26167))))

(declare-fun lt!26165 () Unit!1680)

(declare-fun lt!26168 () Unit!1680)

(assert (=> d!12707 (= lt!26165 lt!26168)))

(assert (=> d!12707 (= (getValueByKey!127 lt!26167 (_1!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) (Some!132 (_2!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!12707 (= lt!26168 (lemmaContainsTupThenGetReturnValue!44 lt!26167 (_1!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!12707 (= lt!26167 (insertStrictlySorted!47 (toList!691 lt!26043) (_1!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!12707 (= (+!82 lt!26043 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) lt!26166)))

(declare-fun b!62625 () Bool)

(declare-fun res!34355 () Bool)

(assert (=> b!62625 (=> (not res!34355) (not e!41109))))

(assert (=> b!62625 (= res!34355 (= (getValueByKey!127 (toList!691 lt!26166) (_1!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) (Some!132 (_2!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!62626 () Bool)

(assert (=> b!62626 (= e!41109 (contains!689 (toList!691 lt!26166) (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))

(assert (= (and d!12707 res!34354) b!62625))

(assert (= (and b!62625 res!34355) b!62626))

(declare-fun m!56229 () Bool)

(assert (=> d!12707 m!56229))

(declare-fun m!56231 () Bool)

(assert (=> d!12707 m!56231))

(declare-fun m!56233 () Bool)

(assert (=> d!12707 m!56233))

(declare-fun m!56235 () Bool)

(assert (=> d!12707 m!56235))

(declare-fun m!56237 () Bool)

(assert (=> b!62625 m!56237))

(declare-fun m!56239 () Bool)

(assert (=> b!62626 m!56239))

(assert (=> b!62434 d!12707))

(declare-fun d!12709 () Bool)

(assert (=> d!12709 (= (apply!68 (+!82 lt!26043 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) lt!26046) (get!1092 (getValueByKey!127 (toList!691 (+!82 lt!26043 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26046)))))

(declare-fun bs!2728 () Bool)

(assert (= bs!2728 d!12709))

(declare-fun m!56241 () Bool)

(assert (=> bs!2728 m!56241))

(assert (=> bs!2728 m!56241))

(declare-fun m!56243 () Bool)

(assert (=> bs!2728 m!56243))

(assert (=> b!62434 d!12709))

(declare-fun d!12711 () Bool)

(declare-fun e!41112 () Bool)

(assert (=> d!12711 e!41112))

(declare-fun res!34361 () Bool)

(assert (=> d!12711 (=> (not res!34361) (not e!41112))))

(declare-fun lt!26173 () SeekEntryResult!223)

(assert (=> d!12711 (= res!34361 ((_ is Found!223) lt!26173))))

(assert (=> d!12711 (= lt!26173 (seekEntryOrOpen!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (_keys!3719 newMap!16) (mask!5993 newMap!16)))))

(declare-fun lt!26174 () Unit!1680)

(declare-fun choose!340 (array!3743 array!3745 (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 (_ BitVec 64) Int) Unit!1680)

(assert (=> d!12711 (= lt!26174 (choose!340 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (defaultEntry!2087 newMap!16)))))

(assert (=> d!12711 (validMask!0 (mask!5993 newMap!16))))

(assert (=> d!12711 (= (lemmaInListMapThenSeekEntryOrOpenFindsIt!17 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (defaultEntry!2087 newMap!16)) lt!26174)))

(declare-fun b!62631 () Bool)

(declare-fun res!34360 () Bool)

(assert (=> b!62631 (=> (not res!34360) (not e!41112))))

(assert (=> b!62631 (= res!34360 (inRange!0 (index!3018 lt!26173) (mask!5993 newMap!16)))))

(declare-fun b!62632 () Bool)

(assert (=> b!62632 (= e!41112 (= (select (arr!1790 (_keys!3719 newMap!16)) (index!3018 lt!26173)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> b!62632 (and (bvsge (index!3018 lt!26173) #b00000000000000000000000000000000) (bvslt (index!3018 lt!26173) (size!2022 (_keys!3719 newMap!16))))))

(assert (= (and d!12711 res!34361) b!62631))

(assert (= (and b!62631 res!34360) b!62632))

(assert (=> d!12711 m!55703))

(assert (=> d!12711 m!55843))

(assert (=> d!12711 m!55703))

(declare-fun m!56245 () Bool)

(assert (=> d!12711 m!56245))

(assert (=> d!12711 m!55995))

(declare-fun m!56247 () Bool)

(assert (=> b!62631 m!56247))

(declare-fun m!56249 () Bool)

(assert (=> b!62632 m!56249))

(assert (=> bm!4866 d!12711))

(declare-fun b!62633 () Bool)

(declare-fun e!41120 () ListLongMap!1351)

(declare-fun call!4923 () ListLongMap!1351)

(assert (=> b!62633 (= e!41120 call!4923)))

(declare-fun b!62635 () Bool)

(declare-fun e!41123 () Bool)

(declare-fun e!41121 () Bool)

(assert (=> b!62635 (= e!41123 e!41121)))

(declare-fun res!34365 () Bool)

(declare-fun call!4918 () Bool)

(assert (=> b!62635 (= res!34365 call!4918)))

(assert (=> b!62635 (=> (not res!34365) (not e!41121))))

(declare-fun b!62636 () Bool)

(declare-fun e!41117 () Bool)

(assert (=> b!62636 (= e!41117 (validKeyInArray!0 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!4914 () Bool)

(declare-fun call!4921 () ListLongMap!1351)

(declare-fun call!4917 () ListLongMap!1351)

(declare-fun c!8358 () Bool)

(declare-fun call!4920 () ListLongMap!1351)

(declare-fun c!8360 () Bool)

(declare-fun call!4919 () ListLongMap!1351)

(assert (=> bm!4914 (= call!4919 (+!82 (ite c!8358 call!4921 (ite c!8360 call!4917 call!4920)) (ite (or c!8358 c!8360) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))))))

(declare-fun b!62637 () Bool)

(assert (=> b!62637 (= e!41123 (not call!4918))))

(declare-fun b!62638 () Bool)

(declare-fun e!41114 () ListLongMap!1351)

(assert (=> b!62638 (= e!41114 call!4923)))

(declare-fun b!62639 () Bool)

(declare-fun lt!26175 () ListLongMap!1351)

(declare-fun e!41113 () Bool)

(assert (=> b!62639 (= e!41113 (= (apply!68 lt!26175 #b0000000000000000000000000000000000000000000000000000000000000000) (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))))))

(declare-fun b!62640 () Bool)

(assert (=> b!62640 (= e!41121 (= (apply!68 lt!26175 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))))

(declare-fun bm!4915 () Bool)

(assert (=> bm!4915 (= call!4921 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (ite c!8299 (ite c!8289 lt!25962 lt!25978) (extraKeys!1966 newMap!16)) (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)) (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun b!62641 () Bool)

(declare-fun e!41119 () Bool)

(assert (=> b!62641 (= e!41119 (= (apply!68 lt!26175 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)) (get!1088 (select (arr!1791 (_values!2070 newMap!16)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62641 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (_values!2070 newMap!16))))))

(assert (=> b!62641 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun b!62642 () Bool)

(declare-fun e!41116 () Unit!1680)

(declare-fun lt!26186 () Unit!1680)

(assert (=> b!62642 (= e!41116 lt!26186)))

(declare-fun lt!26193 () ListLongMap!1351)

(assert (=> b!62642 (= lt!26193 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (ite c!8299 (ite c!8289 lt!25962 lt!25978) (extraKeys!1966 newMap!16)) (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)) (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26189 () (_ BitVec 64))

(assert (=> b!62642 (= lt!26189 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26183 () (_ BitVec 64))

(assert (=> b!62642 (= lt!26183 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26195 () Unit!1680)

(assert (=> b!62642 (= lt!26195 (addStillContains!44 lt!26193 lt!26189 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)) lt!26183))))

(assert (=> b!62642 (contains!686 (+!82 lt!26193 (tuple2!2033 lt!26189 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)))) lt!26183)))

(declare-fun lt!26176 () Unit!1680)

(assert (=> b!62642 (= lt!26176 lt!26195)))

(declare-fun lt!26182 () ListLongMap!1351)

(assert (=> b!62642 (= lt!26182 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (ite c!8299 (ite c!8289 lt!25962 lt!25978) (extraKeys!1966 newMap!16)) (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)) (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26190 () (_ BitVec 64))

(assert (=> b!62642 (= lt!26190 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26181 () (_ BitVec 64))

(assert (=> b!62642 (= lt!26181 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26184 () Unit!1680)

(assert (=> b!62642 (= lt!26184 (addApplyDifferent!44 lt!26182 lt!26190 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)) lt!26181))))

(assert (=> b!62642 (= (apply!68 (+!82 lt!26182 (tuple2!2033 lt!26190 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))) lt!26181) (apply!68 lt!26182 lt!26181))))

(declare-fun lt!26178 () Unit!1680)

(assert (=> b!62642 (= lt!26178 lt!26184)))

(declare-fun lt!26196 () ListLongMap!1351)

(assert (=> b!62642 (= lt!26196 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (ite c!8299 (ite c!8289 lt!25962 lt!25978) (extraKeys!1966 newMap!16)) (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)) (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26192 () (_ BitVec 64))

(assert (=> b!62642 (= lt!26192 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26179 () (_ BitVec 64))

(assert (=> b!62642 (= lt!26179 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26188 () Unit!1680)

(assert (=> b!62642 (= lt!26188 (addApplyDifferent!44 lt!26196 lt!26192 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)) lt!26179))))

(assert (=> b!62642 (= (apply!68 (+!82 lt!26196 (tuple2!2033 lt!26192 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)))) lt!26179) (apply!68 lt!26196 lt!26179))))

(declare-fun lt!26185 () Unit!1680)

(assert (=> b!62642 (= lt!26185 lt!26188)))

(declare-fun lt!26191 () ListLongMap!1351)

(assert (=> b!62642 (= lt!26191 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (ite c!8299 (ite c!8289 lt!25962 lt!25978) (extraKeys!1966 newMap!16)) (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)) (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26180 () (_ BitVec 64))

(assert (=> b!62642 (= lt!26180 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26194 () (_ BitVec 64))

(assert (=> b!62642 (= lt!26194 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!62642 (= lt!26186 (addApplyDifferent!44 lt!26191 lt!26180 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)) lt!26194))))

(assert (=> b!62642 (= (apply!68 (+!82 lt!26191 (tuple2!2033 lt!26180 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))) lt!26194) (apply!68 lt!26191 lt!26194))))

(declare-fun b!62643 () Bool)

(declare-fun e!41122 () Bool)

(assert (=> b!62643 (= e!41122 (validKeyInArray!0 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62644 () Bool)

(declare-fun e!41124 () Bool)

(assert (=> b!62644 (= e!41124 e!41123)))

(declare-fun c!8359 () Bool)

(assert (=> b!62644 (= c!8359 (not (= (bvand (ite c!8299 (ite c!8289 lt!25962 lt!25978) (extraKeys!1966 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!62645 () Bool)

(declare-fun e!41115 () Bool)

(declare-fun call!4922 () Bool)

(assert (=> b!62645 (= e!41115 (not call!4922))))

(declare-fun b!62646 () Bool)

(declare-fun e!41125 () Bool)

(assert (=> b!62646 (= e!41125 e!41119)))

(declare-fun res!34364 () Bool)

(assert (=> b!62646 (=> (not res!34364) (not e!41119))))

(assert (=> b!62646 (= res!34364 (contains!686 lt!26175 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!62646 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun d!12713 () Bool)

(assert (=> d!12713 e!41124))

(declare-fun res!34369 () Bool)

(assert (=> d!12713 (=> (not res!34369) (not e!41124))))

(assert (=> d!12713 (= res!34369 (or (bvsge #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))))

(declare-fun lt!26177 () ListLongMap!1351)

(assert (=> d!12713 (= lt!26175 lt!26177)))

(declare-fun lt!26187 () Unit!1680)

(assert (=> d!12713 (= lt!26187 e!41116)))

(declare-fun c!8361 () Bool)

(assert (=> d!12713 (= c!8361 e!41117)))

(declare-fun res!34366 () Bool)

(assert (=> d!12713 (=> (not res!34366) (not e!41117))))

(assert (=> d!12713 (= res!34366 (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun e!41118 () ListLongMap!1351)

(assert (=> d!12713 (= lt!26177 e!41118)))

(assert (=> d!12713 (= c!8358 (and (not (= (bvand (ite c!8299 (ite c!8289 lt!25962 lt!25978) (extraKeys!1966 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite c!8299 (ite c!8289 lt!25962 lt!25978) (extraKeys!1966 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12713 (validMask!0 (mask!5993 newMap!16))))

(assert (=> d!12713 (= (getCurrentListMap!391 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (ite c!8299 (ite c!8289 lt!25962 lt!25978) (extraKeys!1966 newMap!16)) (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)) (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) lt!26175)))

(declare-fun b!62634 () Bool)

(assert (=> b!62634 (= e!41118 (+!82 call!4919 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))))))

(declare-fun bm!4916 () Bool)

(assert (=> bm!4916 (= call!4917 call!4921)))

(declare-fun b!62647 () Bool)

(assert (=> b!62647 (= e!41115 e!41113)))

(declare-fun res!34362 () Bool)

(assert (=> b!62647 (= res!34362 call!4922)))

(assert (=> b!62647 (=> (not res!34362) (not e!41113))))

(declare-fun b!62648 () Bool)

(declare-fun c!8357 () Bool)

(assert (=> b!62648 (= c!8357 (and (not (= (bvand (ite c!8299 (ite c!8289 lt!25962 lt!25978) (extraKeys!1966 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite c!8299 (ite c!8289 lt!25962 lt!25978) (extraKeys!1966 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!62648 (= e!41114 e!41120)))

(declare-fun bm!4917 () Bool)

(assert (=> bm!4917 (= call!4920 call!4917)))

(declare-fun bm!4918 () Bool)

(assert (=> bm!4918 (= call!4918 (contains!686 lt!26175 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4919 () Bool)

(assert (=> bm!4919 (= call!4922 (contains!686 lt!26175 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62649 () Bool)

(declare-fun res!34367 () Bool)

(assert (=> b!62649 (=> (not res!34367) (not e!41124))))

(assert (=> b!62649 (= res!34367 e!41125)))

(declare-fun res!34370 () Bool)

(assert (=> b!62649 (=> res!34370 e!41125)))

(assert (=> b!62649 (= res!34370 (not e!41122))))

(declare-fun res!34368 () Bool)

(assert (=> b!62649 (=> (not res!34368) (not e!41122))))

(assert (=> b!62649 (= res!34368 (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun b!62650 () Bool)

(declare-fun Unit!1697 () Unit!1680)

(assert (=> b!62650 (= e!41116 Unit!1697)))

(declare-fun b!62651 () Bool)

(assert (=> b!62651 (= e!41120 call!4920)))

(declare-fun bm!4920 () Bool)

(assert (=> bm!4920 (= call!4923 call!4919)))

(declare-fun b!62652 () Bool)

(declare-fun res!34363 () Bool)

(assert (=> b!62652 (=> (not res!34363) (not e!41124))))

(assert (=> b!62652 (= res!34363 e!41115)))

(declare-fun c!8356 () Bool)

(assert (=> b!62652 (= c!8356 (not (= (bvand (ite c!8299 (ite c!8289 lt!25962 lt!25978) (extraKeys!1966 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!62653 () Bool)

(assert (=> b!62653 (= e!41118 e!41114)))

(assert (=> b!62653 (= c!8360 (and (not (= (bvand (ite c!8299 (ite c!8289 lt!25962 lt!25978) (extraKeys!1966 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite c!8299 (ite c!8289 lt!25962 lt!25978) (extraKeys!1966 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!12713 c!8358) b!62634))

(assert (= (and d!12713 (not c!8358)) b!62653))

(assert (= (and b!62653 c!8360) b!62638))

(assert (= (and b!62653 (not c!8360)) b!62648))

(assert (= (and b!62648 c!8357) b!62633))

(assert (= (and b!62648 (not c!8357)) b!62651))

(assert (= (or b!62633 b!62651) bm!4917))

(assert (= (or b!62638 bm!4917) bm!4916))

(assert (= (or b!62638 b!62633) bm!4920))

(assert (= (or b!62634 bm!4916) bm!4915))

(assert (= (or b!62634 bm!4920) bm!4914))

(assert (= (and d!12713 res!34366) b!62636))

(assert (= (and d!12713 c!8361) b!62642))

(assert (= (and d!12713 (not c!8361)) b!62650))

(assert (= (and d!12713 res!34369) b!62649))

(assert (= (and b!62649 res!34368) b!62643))

(assert (= (and b!62649 (not res!34370)) b!62646))

(assert (= (and b!62646 res!34364) b!62641))

(assert (= (and b!62649 res!34367) b!62652))

(assert (= (and b!62652 c!8356) b!62647))

(assert (= (and b!62652 (not c!8356)) b!62645))

(assert (= (and b!62647 res!34362) b!62639))

(assert (= (or b!62647 b!62645) bm!4919))

(assert (= (and b!62652 res!34363) b!62644))

(assert (= (and b!62644 c!8359) b!62635))

(assert (= (and b!62644 (not c!8359)) b!62637))

(assert (= (and b!62635 res!34365) b!62640))

(assert (= (or b!62635 b!62637) bm!4918))

(declare-fun b_lambda!2795 () Bool)

(assert (=> (not b_lambda!2795) (not b!62641)))

(assert (=> b!62641 t!4828))

(declare-fun b_and!3833 () Bool)

(assert (= b_and!3829 (and (=> t!4828 result!2455) b_and!3833)))

(assert (=> b!62641 t!4830))

(declare-fun b_and!3835 () Bool)

(assert (= b_and!3831 (and (=> t!4830 result!2457) b_and!3835)))

(declare-fun m!56251 () Bool)

(assert (=> b!62642 m!56251))

(declare-fun m!56253 () Bool)

(assert (=> b!62642 m!56253))

(assert (=> b!62642 m!56251))

(declare-fun m!56255 () Bool)

(assert (=> b!62642 m!56255))

(assert (=> b!62642 m!56033))

(declare-fun m!56257 () Bool)

(assert (=> b!62642 m!56257))

(declare-fun m!56259 () Bool)

(assert (=> b!62642 m!56259))

(declare-fun m!56261 () Bool)

(assert (=> b!62642 m!56261))

(declare-fun m!56263 () Bool)

(assert (=> b!62642 m!56263))

(declare-fun m!56265 () Bool)

(assert (=> b!62642 m!56265))

(declare-fun m!56267 () Bool)

(assert (=> b!62642 m!56267))

(declare-fun m!56269 () Bool)

(assert (=> b!62642 m!56269))

(declare-fun m!56271 () Bool)

(assert (=> b!62642 m!56271))

(declare-fun m!56273 () Bool)

(assert (=> b!62642 m!56273))

(assert (=> b!62642 m!56261))

(declare-fun m!56275 () Bool)

(assert (=> b!62642 m!56275))

(declare-fun m!56277 () Bool)

(assert (=> b!62642 m!56277))

(declare-fun m!56279 () Bool)

(assert (=> b!62642 m!56279))

(assert (=> b!62642 m!56275))

(assert (=> b!62642 m!56265))

(declare-fun m!56281 () Bool)

(assert (=> b!62642 m!56281))

(declare-fun m!56283 () Bool)

(assert (=> b!62639 m!56283))

(assert (=> b!62646 m!56033))

(assert (=> b!62646 m!56033))

(declare-fun m!56285 () Bool)

(assert (=> b!62646 m!56285))

(assert (=> b!62643 m!56033))

(assert (=> b!62643 m!56033))

(assert (=> b!62643 m!56065))

(declare-fun m!56287 () Bool)

(assert (=> bm!4919 m!56287))

(declare-fun m!56289 () Bool)

(assert (=> b!62634 m!56289))

(assert (=> d!12713 m!55995))

(declare-fun m!56291 () Bool)

(assert (=> bm!4914 m!56291))

(assert (=> b!62641 m!56073))

(assert (=> b!62641 m!56075))

(assert (=> b!62641 m!56033))

(assert (=> b!62641 m!56075))

(assert (=> b!62641 m!56073))

(assert (=> b!62641 m!56077))

(assert (=> b!62641 m!56033))

(declare-fun m!56293 () Bool)

(assert (=> b!62641 m!56293))

(declare-fun m!56295 () Bool)

(assert (=> b!62640 m!56295))

(assert (=> bm!4915 m!56273))

(assert (=> b!62636 m!56033))

(assert (=> b!62636 m!56033))

(assert (=> b!62636 m!56065))

(declare-fun m!56297 () Bool)

(assert (=> bm!4918 m!56297))

(assert (=> bm!4869 d!12713))

(declare-fun d!12715 () Bool)

(declare-fun res!34372 () Bool)

(declare-fun e!41129 () Bool)

(assert (=> d!12715 (=> res!34372 e!41129)))

(assert (=> d!12715 (= res!34372 (bvsge (bvadd from!355 #b00000000000000000000000000000001) (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992))))))))

(assert (=> d!12715 (= (arrayNoDuplicates!0 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!8326 (Cons!1426 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1427) Nil!1427)) e!41129)))

(declare-fun b!62654 () Bool)

(declare-fun e!41127 () Bool)

(declare-fun call!4924 () Bool)

(assert (=> b!62654 (= e!41127 call!4924)))

(declare-fun b!62655 () Bool)

(declare-fun e!41126 () Bool)

(assert (=> b!62655 (= e!41126 (contains!688 (ite c!8326 (Cons!1426 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1427) Nil!1427) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!62656 () Bool)

(declare-fun e!41128 () Bool)

(assert (=> b!62656 (= e!41128 e!41127)))

(declare-fun c!8362 () Bool)

(assert (=> b!62656 (= c!8362 (validKeyInArray!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun bm!4921 () Bool)

(assert (=> bm!4921 (= call!4924 (arrayNoDuplicates!0 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!8362 (Cons!1426 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!8326 (Cons!1426 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1427) Nil!1427)) (ite c!8326 (Cons!1426 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1427) Nil!1427))))))

(declare-fun b!62657 () Bool)

(assert (=> b!62657 (= e!41127 call!4924)))

(declare-fun b!62658 () Bool)

(assert (=> b!62658 (= e!41129 e!41128)))

(declare-fun res!34373 () Bool)

(assert (=> b!62658 (=> (not res!34373) (not e!41128))))

(assert (=> b!62658 (= res!34373 (not e!41126))))

(declare-fun res!34371 () Bool)

(assert (=> b!62658 (=> (not res!34371) (not e!41126))))

(assert (=> b!62658 (= res!34371 (validKeyInArray!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(assert (= (and d!12715 (not res!34372)) b!62658))

(assert (= (and b!62658 res!34371) b!62655))

(assert (= (and b!62658 res!34373) b!62656))

(assert (= (and b!62656 c!8362) b!62657))

(assert (= (and b!62656 (not c!8362)) b!62654))

(assert (= (or b!62657 b!62654) bm!4921))

(declare-fun m!56299 () Bool)

(assert (=> b!62655 m!56299))

(assert (=> b!62655 m!56299))

(declare-fun m!56301 () Bool)

(assert (=> b!62655 m!56301))

(assert (=> b!62656 m!56299))

(assert (=> b!62656 m!56299))

(declare-fun m!56303 () Bool)

(assert (=> b!62656 m!56303))

(assert (=> bm!4921 m!56299))

(declare-fun m!56305 () Bool)

(assert (=> bm!4921 m!56305))

(assert (=> b!62658 m!56299))

(assert (=> b!62658 m!56299))

(assert (=> b!62658 m!56303))

(assert (=> bm!4900 d!12715))

(declare-fun b!62672 () Bool)

(declare-fun c!8370 () Bool)

(declare-fun lt!26203 () (_ BitVec 64))

(assert (=> b!62672 (= c!8370 (= lt!26203 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!41137 () SeekEntryResult!223)

(declare-fun e!41138 () SeekEntryResult!223)

(assert (=> b!62672 (= e!41137 e!41138)))

(declare-fun b!62673 () Bool)

(declare-fun lt!26204 () SeekEntryResult!223)

(declare-fun seekKeyOrZeroReturnVacant!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!3743 (_ BitVec 32)) SeekEntryResult!223)

(assert (=> b!62673 (= e!41138 (seekKeyOrZeroReturnVacant!0 (x!10301 lt!26204) (index!3019 lt!26204) (index!3019 lt!26204) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (_keys!3719 newMap!16) (mask!5993 newMap!16)))))

(declare-fun b!62674 () Bool)

(assert (=> b!62674 (= e!41138 (MissingZero!223 (index!3019 lt!26204)))))

(declare-fun b!62675 () Bool)

(assert (=> b!62675 (= e!41137 (Found!223 (index!3019 lt!26204)))))

(declare-fun b!62676 () Bool)

(declare-fun e!41136 () SeekEntryResult!223)

(assert (=> b!62676 (= e!41136 e!41137)))

(assert (=> b!62676 (= lt!26203 (select (arr!1790 (_keys!3719 newMap!16)) (index!3019 lt!26204)))))

(declare-fun c!8371 () Bool)

(assert (=> b!62676 (= c!8371 (= lt!26203 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun lt!26205 () SeekEntryResult!223)

(declare-fun d!12717 () Bool)

(assert (=> d!12717 (and (or ((_ is Undefined!223) lt!26205) (not ((_ is Found!223) lt!26205)) (and (bvsge (index!3018 lt!26205) #b00000000000000000000000000000000) (bvslt (index!3018 lt!26205) (size!2022 (_keys!3719 newMap!16))))) (or ((_ is Undefined!223) lt!26205) ((_ is Found!223) lt!26205) (not ((_ is MissingZero!223) lt!26205)) (and (bvsge (index!3017 lt!26205) #b00000000000000000000000000000000) (bvslt (index!3017 lt!26205) (size!2022 (_keys!3719 newMap!16))))) (or ((_ is Undefined!223) lt!26205) ((_ is Found!223) lt!26205) ((_ is MissingZero!223) lt!26205) (not ((_ is MissingVacant!223) lt!26205)) (and (bvsge (index!3020 lt!26205) #b00000000000000000000000000000000) (bvslt (index!3020 lt!26205) (size!2022 (_keys!3719 newMap!16))))) (or ((_ is Undefined!223) lt!26205) (ite ((_ is Found!223) lt!26205) (= (select (arr!1790 (_keys!3719 newMap!16)) (index!3018 lt!26205)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (ite ((_ is MissingZero!223) lt!26205) (= (select (arr!1790 (_keys!3719 newMap!16)) (index!3017 lt!26205)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!223) lt!26205) (= (select (arr!1790 (_keys!3719 newMap!16)) (index!3020 lt!26205)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12717 (= lt!26205 e!41136)))

(declare-fun c!8369 () Bool)

(assert (=> d!12717 (= c!8369 (and ((_ is Intermediate!223) lt!26204) (undefined!1035 lt!26204)))))

(declare-fun seekKeyOrZeroOrLongMinValue!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!3743 (_ BitVec 32)) SeekEntryResult!223)

(declare-fun toIndex!0 ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))

(assert (=> d!12717 (= lt!26204 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (mask!5993 newMap!16)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (_keys!3719 newMap!16) (mask!5993 newMap!16)))))

(assert (=> d!12717 (validMask!0 (mask!5993 newMap!16))))

(assert (=> d!12717 (= (seekEntryOrOpen!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (_keys!3719 newMap!16) (mask!5993 newMap!16)) lt!26205)))

(declare-fun b!62671 () Bool)

(assert (=> b!62671 (= e!41136 Undefined!223)))

(assert (= (and d!12717 c!8369) b!62671))

(assert (= (and d!12717 (not c!8369)) b!62676))

(assert (= (and b!62676 c!8371) b!62675))

(assert (= (and b!62676 (not c!8371)) b!62672))

(assert (= (and b!62672 c!8370) b!62674))

(assert (= (and b!62672 (not c!8370)) b!62673))

(assert (=> b!62673 m!55703))

(declare-fun m!56307 () Bool)

(assert (=> b!62673 m!56307))

(declare-fun m!56309 () Bool)

(assert (=> b!62676 m!56309))

(declare-fun m!56311 () Bool)

(assert (=> d!12717 m!56311))

(assert (=> d!12717 m!55703))

(declare-fun m!56313 () Bool)

(assert (=> d!12717 m!56313))

(assert (=> d!12717 m!56313))

(assert (=> d!12717 m!55703))

(declare-fun m!56315 () Bool)

(assert (=> d!12717 m!56315))

(declare-fun m!56317 () Bool)

(assert (=> d!12717 m!56317))

(assert (=> d!12717 m!55995))

(declare-fun m!56319 () Bool)

(assert (=> d!12717 m!56319))

(assert (=> bm!4857 d!12717))

(assert (=> d!12619 d!12623))

(declare-fun d!12719 () Bool)

(assert (=> d!12719 (not (arrayContainsKey!0 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> d!12719 true))

(declare-fun _$68!37 () Unit!1680)

(assert (=> d!12719 (= (choose!68 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (Cons!1426 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1427)) _$68!37)))

(declare-fun bs!2729 () Bool)

(assert (= bs!2729 d!12719))

(assert (=> bs!2729 m!55703))

(assert (=> bs!2729 m!55715))

(assert (=> d!12619 d!12719))

(declare-fun d!12721 () Bool)

(declare-fun lt!26208 () Bool)

(define-sort InoxSet (T) (Array T Bool))

(declare-fun content!68 (List!1430) (InoxSet (_ BitVec 64)))

(assert (=> d!12721 (= lt!26208 (select (content!68 Nil!1427) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun e!41144 () Bool)

(assert (=> d!12721 (= lt!26208 e!41144)))

(declare-fun res!34379 () Bool)

(assert (=> d!12721 (=> (not res!34379) (not e!41144))))

(assert (=> d!12721 (= res!34379 ((_ is Cons!1426) Nil!1427))))

(assert (=> d!12721 (= (contains!688 Nil!1427 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) lt!26208)))

(declare-fun b!62681 () Bool)

(declare-fun e!41143 () Bool)

(assert (=> b!62681 (= e!41144 e!41143)))

(declare-fun res!34378 () Bool)

(assert (=> b!62681 (=> res!34378 e!41143)))

(assert (=> b!62681 (= res!34378 (= (h!2009 Nil!1427) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun b!62682 () Bool)

(assert (=> b!62682 (= e!41143 (contains!688 (t!4816 Nil!1427) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (= (and d!12721 res!34379) b!62681))

(assert (= (and b!62681 (not res!34378)) b!62682))

(declare-fun m!56321 () Bool)

(assert (=> d!12721 m!56321))

(assert (=> d!12721 m!55703))

(declare-fun m!56323 () Bool)

(assert (=> d!12721 m!56323))

(assert (=> b!62682 m!55703))

(declare-fun m!56325 () Bool)

(assert (=> b!62682 m!56325))

(assert (=> b!62469 d!12721))

(declare-fun d!12723 () Bool)

(assert (=> d!12723 (= (validKeyInArray!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (and (not (= (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62428 d!12723))

(declare-fun d!12725 () Bool)

(assert (=> d!12725 (= (get!1090 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2418 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> b!62381 d!12725))

(declare-fun d!12727 () Bool)

(declare-fun e!41146 () Bool)

(assert (=> d!12727 e!41146))

(declare-fun res!34380 () Bool)

(assert (=> d!12727 (=> res!34380 e!41146)))

(declare-fun lt!26210 () Bool)

(assert (=> d!12727 (= res!34380 (not lt!26210))))

(declare-fun lt!26211 () Bool)

(assert (=> d!12727 (= lt!26210 lt!26211)))

(declare-fun lt!26209 () Unit!1680)

(declare-fun e!41145 () Unit!1680)

(assert (=> d!12727 (= lt!26209 e!41145)))

(declare-fun c!8372 () Bool)

(assert (=> d!12727 (= c!8372 lt!26211)))

(assert (=> d!12727 (= lt!26211 (containsKey!130 (toList!691 e!40947) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> d!12727 (= (contains!686 e!40947 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) lt!26210)))

(declare-fun b!62683 () Bool)

(declare-fun lt!26212 () Unit!1680)

(assert (=> b!62683 (= e!41145 lt!26212)))

(assert (=> b!62683 (= lt!26212 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 e!40947) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> b!62683 (isDefined!79 (getValueByKey!127 (toList!691 e!40947) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun b!62684 () Bool)

(declare-fun Unit!1698 () Unit!1680)

(assert (=> b!62684 (= e!41145 Unit!1698)))

(declare-fun b!62685 () Bool)

(assert (=> b!62685 (= e!41146 (isDefined!79 (getValueByKey!127 (toList!691 e!40947) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355))))))

(assert (= (and d!12727 c!8372) b!62683))

(assert (= (and d!12727 (not c!8372)) b!62684))

(assert (= (and d!12727 (not res!34380)) b!62685))

(assert (=> d!12727 m!55703))

(declare-fun m!56327 () Bool)

(assert (=> d!12727 m!56327))

(assert (=> b!62683 m!55703))

(declare-fun m!56329 () Bool)

(assert (=> b!62683 m!56329))

(assert (=> b!62683 m!55703))

(declare-fun m!56331 () Bool)

(assert (=> b!62683 m!56331))

(assert (=> b!62683 m!56331))

(declare-fun m!56333 () Bool)

(assert (=> b!62683 m!56333))

(assert (=> b!62685 m!55703))

(assert (=> b!62685 m!56331))

(assert (=> b!62685 m!56331))

(assert (=> b!62685 m!56333))

(assert (=> bm!4861 d!12727))

(declare-fun d!12729 () Bool)

(declare-fun isEmpty!306 (Option!133) Bool)

(assert (=> d!12729 (= (isDefined!79 (getValueByKey!127 (toList!691 lt!25841) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355))) (not (isEmpty!306 (getValueByKey!127 (toList!691 lt!25841) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))))

(declare-fun bs!2730 () Bool)

(assert (= bs!2730 d!12729))

(assert (=> bs!2730 m!55831))

(declare-fun m!56335 () Bool)

(assert (=> bs!2730 m!56335))

(assert (=> b!62256 d!12729))

(declare-fun b!62694 () Bool)

(declare-fun e!41151 () Option!133)

(assert (=> b!62694 (= e!41151 (Some!132 (_2!1027 (h!2008 (toList!691 lt!25841)))))))

(declare-fun d!12731 () Bool)

(declare-fun c!8377 () Bool)

(assert (=> d!12731 (= c!8377 (and ((_ is Cons!1425) (toList!691 lt!25841)) (= (_1!1027 (h!2008 (toList!691 lt!25841))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355))))))

(assert (=> d!12731 (= (getValueByKey!127 (toList!691 lt!25841) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) e!41151)))

(declare-fun b!62695 () Bool)

(declare-fun e!41152 () Option!133)

(assert (=> b!62695 (= e!41151 e!41152)))

(declare-fun c!8378 () Bool)

(assert (=> b!62695 (= c!8378 (and ((_ is Cons!1425) (toList!691 lt!25841)) (not (= (_1!1027 (h!2008 (toList!691 lt!25841))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))))

(declare-fun b!62696 () Bool)

(assert (=> b!62696 (= e!41152 (getValueByKey!127 (t!4815 (toList!691 lt!25841)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun b!62697 () Bool)

(assert (=> b!62697 (= e!41152 None!131)))

(assert (= (and d!12731 c!8377) b!62694))

(assert (= (and d!12731 (not c!8377)) b!62695))

(assert (= (and b!62695 c!8378) b!62696))

(assert (= (and b!62695 (not c!8378)) b!62697))

(assert (=> b!62696 m!55703))

(declare-fun m!56337 () Bool)

(assert (=> b!62696 m!56337))

(assert (=> b!62256 d!12731))

(declare-fun d!12733 () Bool)

(assert (=> d!12733 (isDefined!79 (getValueByKey!127 (toList!691 lt!25841) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun lt!26215 () Unit!1680)

(declare-fun choose!341 (List!1429 (_ BitVec 64)) Unit!1680)

(assert (=> d!12733 (= lt!26215 (choose!341 (toList!691 lt!25841) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun e!41155 () Bool)

(assert (=> d!12733 e!41155))

(declare-fun res!34383 () Bool)

(assert (=> d!12733 (=> (not res!34383) (not e!41155))))

(declare-fun isStrictlySorted!273 (List!1429) Bool)

(assert (=> d!12733 (= res!34383 (isStrictlySorted!273 (toList!691 lt!25841)))))

(assert (=> d!12733 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 lt!25841) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) lt!26215)))

(declare-fun b!62700 () Bool)

(assert (=> b!62700 (= e!41155 (containsKey!130 (toList!691 lt!25841) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (= (and d!12733 res!34383) b!62700))

(assert (=> d!12733 m!55703))

(assert (=> d!12733 m!55831))

(assert (=> d!12733 m!55831))

(assert (=> d!12733 m!55833))

(assert (=> d!12733 m!55703))

(declare-fun m!56339 () Bool)

(assert (=> d!12733 m!56339))

(declare-fun m!56341 () Bool)

(assert (=> d!12733 m!56341))

(assert (=> b!62700 m!55703))

(assert (=> b!62700 m!55827))

(assert (=> b!62254 d!12733))

(assert (=> b!62254 d!12729))

(assert (=> b!62254 d!12731))

(assert (=> bm!4860 d!12611))

(declare-fun d!12735 () Bool)

(declare-fun e!41156 () Bool)

(assert (=> d!12735 e!41156))

(declare-fun res!34384 () Bool)

(assert (=> d!12735 (=> (not res!34384) (not e!41156))))

(declare-fun lt!26217 () ListLongMap!1351)

(assert (=> d!12735 (= res!34384 (contains!686 lt!26217 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun lt!26218 () List!1429)

(assert (=> d!12735 (= lt!26217 (ListLongMap!1352 lt!26218))))

(declare-fun lt!26216 () Unit!1680)

(declare-fun lt!26219 () Unit!1680)

(assert (=> d!12735 (= lt!26216 lt!26219)))

(assert (=> d!12735 (= (getValueByKey!127 lt!26218 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) (Some!132 (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!12735 (= lt!26219 (lemmaContainsTupThenGetReturnValue!44 lt!26218 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!12735 (= lt!26218 (insertStrictlySorted!47 (toList!691 call!4896) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!12735 (= (+!82 call!4896 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) lt!26217)))

(declare-fun b!62701 () Bool)

(declare-fun res!34385 () Bool)

(assert (=> b!62701 (=> (not res!34385) (not e!41156))))

(assert (=> b!62701 (= res!34385 (= (getValueByKey!127 (toList!691 lt!26217) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) (Some!132 (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!62702 () Bool)

(assert (=> b!62702 (= e!41156 (contains!689 (toList!691 lt!26217) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))

(assert (= (and d!12735 res!34384) b!62701))

(assert (= (and b!62701 res!34385) b!62702))

(declare-fun m!56343 () Bool)

(assert (=> d!12735 m!56343))

(declare-fun m!56345 () Bool)

(assert (=> d!12735 m!56345))

(declare-fun m!56347 () Bool)

(assert (=> d!12735 m!56347))

(declare-fun m!56349 () Bool)

(assert (=> d!12735 m!56349))

(declare-fun m!56351 () Bool)

(assert (=> b!62701 m!56351))

(declare-fun m!56353 () Bool)

(assert (=> b!62702 m!56353))

(assert (=> b!62426 d!12735))

(declare-fun d!12737 () Bool)

(declare-fun res!34386 () Bool)

(declare-fun e!41157 () Bool)

(assert (=> d!12737 (=> (not res!34386) (not e!41157))))

(assert (=> d!12737 (= res!34386 (simpleValid!44 (v!2419 (underlying!233 thiss!992))))))

(assert (=> d!12737 (= (valid!269 (v!2419 (underlying!233 thiss!992))) e!41157)))

(declare-fun b!62703 () Bool)

(declare-fun res!34387 () Bool)

(assert (=> b!62703 (=> (not res!34387) (not e!41157))))

(assert (=> b!62703 (= res!34387 (= (arrayCountValidKeys!0 (_keys!3719 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000000 (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992))))) (_size!366 (v!2419 (underlying!233 thiss!992)))))))

(declare-fun b!62704 () Bool)

(declare-fun res!34388 () Bool)

(assert (=> b!62704 (=> (not res!34388) (not e!41157))))

(assert (=> b!62704 (= res!34388 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (mask!5993 (v!2419 (underlying!233 thiss!992)))))))

(declare-fun b!62705 () Bool)

(assert (=> b!62705 (= e!41157 (arrayNoDuplicates!0 (_keys!3719 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000000 Nil!1427))))

(assert (= (and d!12737 res!34386) b!62703))

(assert (= (and b!62703 res!34387) b!62704))

(assert (= (and b!62704 res!34388) b!62705))

(declare-fun m!56355 () Bool)

(assert (=> d!12737 m!56355))

(declare-fun m!56357 () Bool)

(assert (=> b!62703 m!56357))

(declare-fun m!56359 () Bool)

(assert (=> b!62704 m!56359))

(declare-fun m!56361 () Bool)

(assert (=> b!62705 m!56361))

(assert (=> d!12637 d!12737))

(declare-fun d!12739 () Bool)

(assert (=> d!12739 (= (+!82 (getCurrentListMap!391 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!391 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) lt!25978 (zeroValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26222 () Unit!1680)

(declare-fun choose!342 (array!3743 array!3745 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 V!2865 Int) Unit!1680)

(assert (=> d!12739 (= lt!26222 (choose!342 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) lt!25978 (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2087 newMap!16)))))

(assert (=> d!12739 (validMask!0 (mask!5993 newMap!16))))

(assert (=> d!12739 (= (lemmaChangeLongMinValueKeyThenAddPairToListMap!17 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) lt!25978 (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2087 newMap!16)) lt!26222)))

(declare-fun bs!2731 () Bool)

(assert (= bs!2731 d!12739))

(assert (=> bs!2731 m!55895))

(declare-fun m!56363 () Bool)

(assert (=> bs!2731 m!56363))

(assert (=> bs!2731 m!55701))

(declare-fun m!56365 () Bool)

(assert (=> bs!2731 m!56365))

(assert (=> bs!2731 m!55995))

(assert (=> bs!2731 m!55895))

(assert (=> bs!2731 m!55701))

(declare-fun m!56367 () Bool)

(assert (=> bs!2731 m!56367))

(assert (=> b!62371 d!12739))

(declare-fun b!62740 () Bool)

(declare-fun e!41175 () Unit!1680)

(declare-fun Unit!1699 () Unit!1680)

(assert (=> b!62740 (= e!41175 Unit!1699)))

(declare-fun lt!26291 () Unit!1680)

(declare-fun lemmaArrayContainsKeyThenInListMap!7 (array!3743 array!3745 (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 (_ BitVec 64) (_ BitVec 32) Int) Unit!1680)

(assert (=> b!62740 (= lt!26291 (lemmaArrayContainsKeyThenInListMap!7 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(assert (=> b!62740 (contains!686 (getCurrentListMap!391 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355))))

(declare-fun lt!26287 () Unit!1680)

(assert (=> b!62740 (= lt!26287 lt!26291)))

(assert (=> b!62740 false))

(declare-fun b!62741 () Bool)

(declare-fun res!34407 () Bool)

(declare-fun e!41177 () Bool)

(assert (=> b!62741 (=> (not res!34407) (not e!41177))))

(declare-fun lt!26286 () tuple2!2030)

(assert (=> b!62741 (= res!34407 (valid!269 (_2!1026 lt!26286)))))

(declare-fun d!12741 () Bool)

(assert (=> d!12741 e!41177))

(declare-fun res!34409 () Bool)

(assert (=> d!12741 (=> (not res!34409) (not e!41177))))

(assert (=> d!12741 (= res!34409 (_1!1026 lt!26286))))

(assert (=> d!12741 (= lt!26286 (tuple2!2031 true (LongMapFixedSize!635 (defaultEntry!2087 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (bvadd (_size!366 newMap!16) #b00000000000000000000000000000001) (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16))) (array!3746 (store (arr!1791 (_values!2070 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (ValueCellFull!863 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2023 (_values!2070 newMap!16))) (_vacant!366 newMap!16))))))

(declare-fun lt!26306 () Unit!1680)

(declare-fun lt!26296 () Unit!1680)

(assert (=> d!12741 (= lt!26306 lt!26296)))

(declare-fun lt!26293 () array!3743)

(declare-fun lt!26300 () array!3745)

(assert (=> d!12741 (contains!686 (getCurrentListMap!391 lt!26293 lt!26300 (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (select (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967))))))

(assert (=> d!12741 (= lt!26296 (lemmaValidKeyInArrayIsInListMap!77 lt!26293 lt!26300 (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (defaultEntry!2087 newMap!16)))))

(assert (=> d!12741 (= lt!26300 (array!3746 (store (arr!1791 (_values!2070 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (ValueCellFull!863 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2023 (_values!2070 newMap!16))))))

(assert (=> d!12741 (= lt!26293 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16))))))

(declare-fun lt!26288 () Unit!1680)

(declare-fun lt!26283 () Unit!1680)

(assert (=> d!12741 (= lt!26288 lt!26283)))

(declare-fun lt!26294 () array!3743)

(assert (=> d!12741 (= (arrayCountValidKeys!0 lt!26294 (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (bvadd (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lemmaValidKeyAtIImpliesCountKeysIsOne!0 (array!3743 (_ BitVec 32)) Unit!1680)

(assert (=> d!12741 (= lt!26283 (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!26294 (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967))))))

(assert (=> d!12741 (= lt!26294 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16))))))

(declare-fun lt!26305 () Unit!1680)

(declare-fun lt!26301 () Unit!1680)

(assert (=> d!12741 (= lt!26305 lt!26301)))

(declare-fun lt!26289 () array!3743)

(assert (=> d!12741 (arrayContainsKey!0 lt!26289 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(assert (=> d!12741 (= lt!26301 (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!26289 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967))))))

(assert (=> d!12741 (= lt!26289 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16))))))

(declare-fun lt!26311 () Unit!1680)

(declare-fun lt!26303 () Unit!1680)

(assert (=> d!12741 (= lt!26311 lt!26303)))

(assert (=> d!12741 (= (+!82 (getCurrentListMap!391 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!391 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16))) (array!3746 (store (arr!1791 (_values!2070 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (ValueCellFull!863 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2023 (_values!2070 newMap!16))) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lemmaAddValidKeyToArrayThenAddPairToListMap!7 (array!3743 array!3745 (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 (_ BitVec 32) (_ BitVec 64) V!2865 Int) Unit!1680)

(assert (=> d!12741 (= lt!26303 (lemmaAddValidKeyToArrayThenAddPairToListMap!7 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26308 () Unit!1680)

(declare-fun lt!26312 () Unit!1680)

(assert (=> d!12741 (= lt!26308 lt!26312)))

(assert (=> d!12741 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16))) (mask!5993 newMap!16))))

(declare-fun lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 ((_ BitVec 64) array!3743 (_ BitVec 32) (_ BitVec 32)) Unit!1680)

(assert (=> d!12741 (= lt!26312 (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (_keys!3719 newMap!16) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (mask!5993 newMap!16)))))

(declare-fun lt!26310 () Unit!1680)

(declare-fun lt!26307 () Unit!1680)

(assert (=> d!12741 (= lt!26310 lt!26307)))

(assert (=> d!12741 (= (arrayCountValidKeys!0 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16))) #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!3719 newMap!16) #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))) #b00000000000000000000000000000001))))

(declare-fun lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (array!3743 (_ BitVec 32) (_ BitVec 64)) Unit!1680)

(assert (=> d!12741 (= lt!26307 (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!3719 newMap!16) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun lt!26304 () Unit!1680)

(declare-fun lt!26295 () Unit!1680)

(assert (=> d!12741 (= lt!26304 lt!26295)))

(declare-fun lt!26290 () List!1430)

(declare-fun lt!26297 () (_ BitVec 32))

(assert (=> d!12741 (arrayNoDuplicates!0 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16))) lt!26297 lt!26290)))

(declare-fun lemmaPutNewValidKeyPreservesNoDuplicate!0 (array!3743 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1430) Unit!1680)

(assert (=> d!12741 (= lt!26295 (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!3719 newMap!16) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) lt!26297 lt!26290))))

(assert (=> d!12741 (= lt!26290 Nil!1427)))

(assert (=> d!12741 (= lt!26297 #b00000000000000000000000000000000)))

(declare-fun lt!26299 () Unit!1680)

(assert (=> d!12741 (= lt!26299 e!41175)))

(declare-fun c!8390 () Bool)

(assert (=> d!12741 (= c!8390 (arrayContainsKey!0 (_keys!3719 newMap!16) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun lt!26309 () Unit!1680)

(declare-fun e!41176 () Unit!1680)

(assert (=> d!12741 (= lt!26309 e!41176)))

(declare-fun c!8388 () Bool)

(assert (=> d!12741 (= c!8388 (contains!686 (getCurrentListMap!391 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> d!12741 (valid!269 newMap!16)))

(assert (=> d!12741 (= (updateHelperNewKey!17 newMap!16 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967))) lt!26286)))

(declare-fun b!62742 () Bool)

(declare-fun e!41180 () Bool)

(declare-fun call!4933 () Bool)

(assert (=> b!62742 (= e!41180 (not call!4933))))

(declare-fun bm!4930 () Bool)

(declare-fun call!4935 () Bool)

(declare-fun call!4934 () Bool)

(assert (=> bm!4930 (= call!4935 call!4934)))

(declare-fun b!62743 () Bool)

(declare-fun lt!26298 () Unit!1680)

(assert (=> b!62743 (= e!41176 lt!26298)))

(assert (=> b!62743 (= lt!26298 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!17 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26285 () SeekEntryResult!223)

(declare-fun call!4936 () SeekEntryResult!223)

(assert (=> b!62743 (= lt!26285 call!4936)))

(declare-fun c!8387 () Bool)

(assert (=> b!62743 (= c!8387 ((_ is MissingZero!223) lt!26285))))

(declare-fun e!41174 () Bool)

(assert (=> b!62743 e!41174))

(declare-fun b!62744 () Bool)

(declare-fun e!41181 () Bool)

(assert (=> b!62744 (= e!41181 e!41180)))

(declare-fun res!34408 () Bool)

(assert (=> b!62744 (= res!34408 call!4935)))

(assert (=> b!62744 (=> (not res!34408) (not e!41180))))

(declare-fun b!62745 () Bool)

(declare-fun e!41178 () Bool)

(assert (=> b!62745 (= e!41178 (not call!4933))))

(declare-fun b!62746 () Bool)

(assert (=> b!62746 (= e!41177 (= (map!1117 (_2!1026 lt!26286)) (+!82 (map!1117 newMap!16) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!62747 () Bool)

(declare-fun res!34412 () Bool)

(assert (=> b!62747 (=> (not res!34412) (not e!41178))))

(assert (=> b!62747 (= res!34412 call!4935)))

(assert (=> b!62747 (= e!41174 e!41178)))

(declare-fun lt!26292 () SeekEntryResult!223)

(declare-fun bm!4931 () Bool)

(assert (=> bm!4931 (= call!4934 (inRange!0 (ite c!8388 (index!3018 lt!26292) (ite c!8387 (index!3017 lt!26285) (index!3020 lt!26285))) (mask!5993 newMap!16)))))

(declare-fun e!41179 () Bool)

(declare-fun b!62748 () Bool)

(assert (=> b!62748 (= e!41179 (= (select (arr!1790 (_keys!3719 newMap!16)) (index!3018 lt!26292)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun b!62749 () Bool)

(declare-fun Unit!1700 () Unit!1680)

(assert (=> b!62749 (= e!41175 Unit!1700)))

(declare-fun bm!4932 () Bool)

(assert (=> bm!4932 (= call!4933 (arrayContainsKey!0 (_keys!3719 newMap!16) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!62750 () Bool)

(assert (=> b!62750 (= e!41181 ((_ is Undefined!223) lt!26285))))

(declare-fun b!62751 () Bool)

(declare-fun res!34411 () Bool)

(assert (=> b!62751 (=> (not res!34411) (not e!41178))))

(assert (=> b!62751 (= res!34411 (= (select (arr!1790 (_keys!3719 newMap!16)) (index!3017 lt!26285)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62752 () Bool)

(declare-fun c!8389 () Bool)

(assert (=> b!62752 (= c!8389 ((_ is MissingVacant!223) lt!26285))))

(assert (=> b!62752 (= e!41174 e!41181)))

(declare-fun b!62753 () Bool)

(declare-fun res!34413 () Bool)

(assert (=> b!62753 (=> (not res!34413) (not e!41177))))

(assert (=> b!62753 (= res!34413 (contains!686 (map!1117 (_2!1026 lt!26286)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun b!62754 () Bool)

(declare-fun res!34414 () Bool)

(assert (=> b!62754 (= res!34414 call!4934)))

(assert (=> b!62754 (=> (not res!34414) (not e!41179))))

(declare-fun bm!4933 () Bool)

(assert (=> bm!4933 (= call!4936 (seekEntryOrOpen!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (_keys!3719 newMap!16) (mask!5993 newMap!16)))))

(declare-fun b!62755 () Bool)

(declare-fun Unit!1701 () Unit!1680)

(assert (=> b!62755 (= e!41176 Unit!1701)))

(declare-fun lt!26302 () Unit!1680)

(assert (=> b!62755 (= lt!26302 (lemmaInListMapThenSeekEntryOrOpenFindsIt!17 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (defaultEntry!2087 newMap!16)))))

(assert (=> b!62755 (= lt!26292 call!4936)))

(declare-fun res!34415 () Bool)

(assert (=> b!62755 (= res!34415 ((_ is Found!223) lt!26292))))

(assert (=> b!62755 (=> (not res!34415) (not e!41179))))

(assert (=> b!62755 e!41179))

(declare-fun lt!26284 () Unit!1680)

(assert (=> b!62755 (= lt!26284 lt!26302)))

(assert (=> b!62755 false))

(declare-fun b!62756 () Bool)

(declare-fun res!34410 () Bool)

(assert (=> b!62756 (= res!34410 (= (select (arr!1790 (_keys!3719 newMap!16)) (index!3020 lt!26285)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62756 (=> (not res!34410) (not e!41180))))

(assert (= (and d!12741 c!8388) b!62755))

(assert (= (and d!12741 (not c!8388)) b!62743))

(assert (= (and b!62755 res!34415) b!62754))

(assert (= (and b!62754 res!34414) b!62748))

(assert (= (and b!62743 c!8387) b!62747))

(assert (= (and b!62743 (not c!8387)) b!62752))

(assert (= (and b!62747 res!34412) b!62751))

(assert (= (and b!62751 res!34411) b!62745))

(assert (= (and b!62752 c!8389) b!62744))

(assert (= (and b!62752 (not c!8389)) b!62750))

(assert (= (and b!62744 res!34408) b!62756))

(assert (= (and b!62756 res!34410) b!62742))

(assert (= (or b!62747 b!62744) bm!4930))

(assert (= (or b!62745 b!62742) bm!4932))

(assert (= (or b!62754 bm!4930) bm!4931))

(assert (= (or b!62755 b!62743) bm!4933))

(assert (= (and d!12741 c!8390) b!62740))

(assert (= (and d!12741 (not c!8390)) b!62749))

(assert (= (and d!12741 res!34409) b!62741))

(assert (= (and b!62741 res!34407) b!62753))

(assert (= (and b!62753 res!34413) b!62746))

(declare-fun m!56369 () Bool)

(assert (=> b!62751 m!56369))

(declare-fun m!56371 () Bool)

(assert (=> bm!4931 m!56371))

(assert (=> b!62740 m!55703))

(declare-fun m!56373 () Bool)

(assert (=> b!62740 m!56373))

(assert (=> b!62740 m!55895))

(assert (=> b!62740 m!55895))

(assert (=> b!62740 m!55703))

(declare-fun m!56375 () Bool)

(assert (=> b!62740 m!56375))

(declare-fun m!56377 () Bool)

(assert (=> b!62741 m!56377))

(declare-fun m!56379 () Bool)

(assert (=> b!62748 m!56379))

(assert (=> b!62743 m!55703))

(assert (=> b!62743 m!55869))

(assert (=> bm!4932 m!55703))

(assert (=> bm!4932 m!55855))

(declare-fun m!56381 () Bool)

(assert (=> b!62746 m!56381))

(assert (=> b!62746 m!55719))

(assert (=> b!62746 m!55719))

(declare-fun m!56383 () Bool)

(assert (=> b!62746 m!56383))

(assert (=> bm!4933 m!55703))

(assert (=> bm!4933 m!55843))

(declare-fun m!56385 () Bool)

(assert (=> b!62756 m!56385))

(assert (=> d!12741 m!55703))

(declare-fun m!56387 () Bool)

(assert (=> d!12741 m!56387))

(assert (=> d!12741 m!55703))

(declare-fun m!56389 () Bool)

(assert (=> d!12741 m!56389))

(declare-fun m!56391 () Bool)

(assert (=> d!12741 m!56391))

(declare-fun m!56393 () Bool)

(assert (=> d!12741 m!56393))

(assert (=> d!12741 m!55969))

(declare-fun m!56395 () Bool)

(assert (=> d!12741 m!56395))

(declare-fun m!56397 () Bool)

(assert (=> d!12741 m!56397))

(declare-fun m!56399 () Bool)

(assert (=> d!12741 m!56399))

(declare-fun m!56401 () Bool)

(assert (=> d!12741 m!56401))

(declare-fun m!56403 () Bool)

(assert (=> d!12741 m!56403))

(assert (=> d!12741 m!55703))

(declare-fun m!56405 () Bool)

(assert (=> d!12741 m!56405))

(assert (=> d!12741 m!55703))

(assert (=> d!12741 m!55701))

(declare-fun m!56407 () Bool)

(assert (=> d!12741 m!56407))

(assert (=> d!12741 m!55895))

(declare-fun m!56409 () Bool)

(assert (=> d!12741 m!56409))

(assert (=> d!12741 m!55703))

(declare-fun m!56411 () Bool)

(assert (=> d!12741 m!56411))

(assert (=> d!12741 m!55703))

(assert (=> d!12741 m!55855))

(assert (=> d!12741 m!55895))

(declare-fun m!56413 () Bool)

(assert (=> d!12741 m!56413))

(assert (=> d!12741 m!55733))

(assert (=> d!12741 m!56393))

(declare-fun m!56415 () Bool)

(assert (=> d!12741 m!56415))

(declare-fun m!56417 () Bool)

(assert (=> d!12741 m!56417))

(assert (=> d!12741 m!55895))

(assert (=> d!12741 m!55703))

(assert (=> d!12741 m!56375))

(assert (=> d!12741 m!55703))

(declare-fun m!56419 () Bool)

(assert (=> d!12741 m!56419))

(declare-fun m!56421 () Bool)

(assert (=> d!12741 m!56421))

(declare-fun m!56423 () Bool)

(assert (=> d!12741 m!56423))

(assert (=> d!12741 m!56415))

(assert (=> b!62753 m!56381))

(assert (=> b!62753 m!56381))

(assert (=> b!62753 m!55703))

(declare-fun m!56425 () Bool)

(assert (=> b!62753 m!56425))

(assert (=> b!62755 m!55703))

(assert (=> b!62755 m!55871))

(assert (=> bm!4865 d!12741))

(assert (=> bm!4892 d!12687))

(declare-fun d!12743 () Bool)

(assert (=> d!12743 (= (apply!68 lt!26027 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1092 (getValueByKey!127 (toList!691 lt!26027) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2732 () Bool)

(assert (= bs!2732 d!12743))

(assert (=> bs!2732 m!56005))

(assert (=> bs!2732 m!56005))

(declare-fun m!56427 () Bool)

(assert (=> bs!2732 m!56427))

(assert (=> b!62431 d!12743))

(declare-fun b!62765 () Bool)

(declare-fun e!41187 () (_ BitVec 32))

(declare-fun call!4939 () (_ BitVec 32))

(assert (=> b!62765 (= e!41187 call!4939)))

(declare-fun b!62766 () Bool)

(assert (=> b!62766 (= e!41187 (bvadd #b00000000000000000000000000000001 call!4939))))

(declare-fun b!62767 () Bool)

(declare-fun e!41186 () (_ BitVec 32))

(assert (=> b!62767 (= e!41186 e!41187)))

(declare-fun c!8395 () Bool)

(assert (=> b!62767 (= c!8395 (validKeyInArray!0 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun d!12745 () Bool)

(declare-fun lt!26315 () (_ BitVec 32))

(assert (=> d!12745 (and (bvsge lt!26315 #b00000000000000000000000000000000) (bvsle lt!26315 (bvsub (size!2022 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!12745 (= lt!26315 e!41186)))

(declare-fun c!8396 () Bool)

(assert (=> d!12745 (= c!8396 (bvsge #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(assert (=> d!12745 (and (bvsle #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2022 (_keys!3719 newMap!16)) (size!2022 (_keys!3719 newMap!16))))))

(assert (=> d!12745 (= (arrayCountValidKeys!0 (_keys!3719 newMap!16) #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))) lt!26315)))

(declare-fun bm!4936 () Bool)

(assert (=> bm!4936 (= call!4939 (arrayCountValidKeys!0 (_keys!3719 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2022 (_keys!3719 newMap!16))))))

(declare-fun b!62768 () Bool)

(assert (=> b!62768 (= e!41186 #b00000000000000000000000000000000)))

(assert (= (and d!12745 c!8396) b!62768))

(assert (= (and d!12745 (not c!8396)) b!62767))

(assert (= (and b!62767 c!8395) b!62766))

(assert (= (and b!62767 (not c!8395)) b!62765))

(assert (= (or b!62766 b!62765) bm!4936))

(assert (=> b!62767 m!56033))

(assert (=> b!62767 m!56033))

(assert (=> b!62767 m!56065))

(declare-fun m!56429 () Bool)

(assert (=> bm!4936 m!56429))

(assert (=> b!62479 d!12745))

(declare-fun d!12747 () Bool)

(assert (=> d!12747 (= (map!1117 (_2!1026 lt!25975)) (getCurrentListMap!391 (_keys!3719 (_2!1026 lt!25975)) (_values!2070 (_2!1026 lt!25975)) (mask!5993 (_2!1026 lt!25975)) (extraKeys!1966 (_2!1026 lt!25975)) (zeroValue!1999 (_2!1026 lt!25975)) (minValue!1999 (_2!1026 lt!25975)) #b00000000000000000000000000000000 (defaultEntry!2087 (_2!1026 lt!25975))))))

(declare-fun bs!2733 () Bool)

(assert (= bs!2733 d!12747))

(declare-fun m!56431 () Bool)

(assert (=> bs!2733 m!56431))

(assert (=> bm!4876 d!12747))

(declare-fun d!12749 () Bool)

(declare-fun res!34416 () Bool)

(declare-fun e!41188 () Bool)

(assert (=> d!12749 (=> res!34416 e!41188)))

(assert (=> d!12749 (= res!34416 (= (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> d!12749 (= (arrayContainsKey!0 (_keys!3719 newMap!16) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) #b00000000000000000000000000000000) e!41188)))

(declare-fun b!62769 () Bool)

(declare-fun e!41189 () Bool)

(assert (=> b!62769 (= e!41188 e!41189)))

(declare-fun res!34417 () Bool)

(assert (=> b!62769 (=> (not res!34417) (not e!41189))))

(assert (=> b!62769 (= res!34417 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2022 (_keys!3719 newMap!16))))))

(declare-fun b!62770 () Bool)

(assert (=> b!62770 (= e!41189 (arrayContainsKey!0 (_keys!3719 newMap!16) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!12749 (not res!34416)) b!62769))

(assert (= (and b!62769 res!34417) b!62770))

(assert (=> d!12749 m!56033))

(assert (=> b!62770 m!55703))

(declare-fun m!56433 () Bool)

(assert (=> b!62770 m!56433))

(assert (=> bm!4856 d!12749))

(assert (=> b!62435 d!12723))

(declare-fun d!12751 () Bool)

(declare-fun e!41191 () Bool)

(assert (=> d!12751 e!41191))

(declare-fun res!34418 () Bool)

(assert (=> d!12751 (=> res!34418 e!41191)))

(declare-fun lt!26317 () Bool)

(assert (=> d!12751 (= res!34418 (not lt!26317))))

(declare-fun lt!26318 () Bool)

(assert (=> d!12751 (= lt!26317 lt!26318)))

(declare-fun lt!26316 () Unit!1680)

(declare-fun e!41190 () Unit!1680)

(assert (=> d!12751 (= lt!26316 e!41190)))

(declare-fun c!8397 () Bool)

(assert (=> d!12751 (= c!8397 lt!26318)))

(assert (=> d!12751 (= lt!26318 (containsKey!130 (toList!691 call!4867) (select (arr!1790 (_keys!3719 newMap!16)) (index!3018 lt!25967))))))

(assert (=> d!12751 (= (contains!686 call!4867 (select (arr!1790 (_keys!3719 newMap!16)) (index!3018 lt!25967))) lt!26317)))

(declare-fun b!62771 () Bool)

(declare-fun lt!26319 () Unit!1680)

(assert (=> b!62771 (= e!41190 lt!26319)))

(assert (=> b!62771 (= lt!26319 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 call!4867) (select (arr!1790 (_keys!3719 newMap!16)) (index!3018 lt!25967))))))

(assert (=> b!62771 (isDefined!79 (getValueByKey!127 (toList!691 call!4867) (select (arr!1790 (_keys!3719 newMap!16)) (index!3018 lt!25967))))))

(declare-fun b!62772 () Bool)

(declare-fun Unit!1702 () Unit!1680)

(assert (=> b!62772 (= e!41190 Unit!1702)))

(declare-fun b!62773 () Bool)

(assert (=> b!62773 (= e!41191 (isDefined!79 (getValueByKey!127 (toList!691 call!4867) (select (arr!1790 (_keys!3719 newMap!16)) (index!3018 lt!25967)))))))

(assert (= (and d!12751 c!8397) b!62771))

(assert (= (and d!12751 (not c!8397)) b!62772))

(assert (= (and d!12751 (not res!34418)) b!62773))

(assert (=> d!12751 m!55857))

(declare-fun m!56435 () Bool)

(assert (=> d!12751 m!56435))

(assert (=> b!62771 m!55857))

(declare-fun m!56437 () Bool)

(assert (=> b!62771 m!56437))

(assert (=> b!62771 m!55857))

(declare-fun m!56439 () Bool)

(assert (=> b!62771 m!56439))

(assert (=> b!62771 m!56439))

(declare-fun m!56441 () Bool)

(assert (=> b!62771 m!56441))

(assert (=> b!62773 m!55857))

(assert (=> b!62773 m!56439))

(assert (=> b!62773 m!56439))

(assert (=> b!62773 m!56441))

(assert (=> b!62374 d!12751))

(declare-fun d!12753 () Bool)

(declare-fun e!41194 () Bool)

(assert (=> d!12753 e!41194))

(declare-fun res!34421 () Bool)

(assert (=> d!12753 (=> (not res!34421) (not e!41194))))

(assert (=> d!12753 (= res!34421 (and (bvsge (index!3018 lt!25967) #b00000000000000000000000000000000) (bvslt (index!3018 lt!25967) (size!2022 (_keys!3719 newMap!16)))))))

(declare-fun lt!26322 () Unit!1680)

(declare-fun choose!343 (array!3743 array!3745 (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 (_ BitVec 32) Int) Unit!1680)

(assert (=> d!12753 (= lt!26322 (choose!343 (_keys!3719 newMap!16) lt!25974 (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (index!3018 lt!25967) (defaultEntry!2087 newMap!16)))))

(assert (=> d!12753 (validMask!0 (mask!5993 newMap!16))))

(assert (=> d!12753 (= (lemmaValidKeyInArrayIsInListMap!77 (_keys!3719 newMap!16) lt!25974 (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (index!3018 lt!25967) (defaultEntry!2087 newMap!16)) lt!26322)))

(declare-fun b!62776 () Bool)

(assert (=> b!62776 (= e!41194 (contains!686 (getCurrentListMap!391 (_keys!3719 newMap!16) lt!25974 (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (select (arr!1790 (_keys!3719 newMap!16)) (index!3018 lt!25967))))))

(assert (= (and d!12753 res!34421) b!62776))

(declare-fun m!56443 () Bool)

(assert (=> d!12753 m!56443))

(assert (=> d!12753 m!55995))

(declare-fun m!56445 () Bool)

(assert (=> b!62776 m!56445))

(assert (=> b!62776 m!55857))

(assert (=> b!62776 m!56445))

(assert (=> b!62776 m!55857))

(declare-fun m!56447 () Bool)

(assert (=> b!62776 m!56447))

(assert (=> b!62374 d!12753))

(declare-fun b!62777 () Bool)

(declare-fun e!41202 () ListLongMap!1351)

(declare-fun call!4946 () ListLongMap!1351)

(assert (=> b!62777 (= e!41202 call!4946)))

(declare-fun b!62779 () Bool)

(declare-fun e!41205 () Bool)

(declare-fun e!41203 () Bool)

(assert (=> b!62779 (= e!41205 e!41203)))

(declare-fun res!34425 () Bool)

(declare-fun call!4941 () Bool)

(assert (=> b!62779 (= res!34425 call!4941)))

(assert (=> b!62779 (=> (not res!34425) (not e!41203))))

(declare-fun b!62780 () Bool)

(declare-fun e!41199 () Bool)

(assert (=> b!62780 (= e!41199 (validKeyInArray!0 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun call!4942 () ListLongMap!1351)

(declare-fun call!4943 () ListLongMap!1351)

(declare-fun bm!4937 () Bool)

(declare-fun c!8402 () Bool)

(declare-fun call!4940 () ListLongMap!1351)

(declare-fun c!8400 () Bool)

(declare-fun call!4944 () ListLongMap!1351)

(assert (=> bm!4937 (= call!4942 (+!82 (ite c!8400 call!4944 (ite c!8402 call!4940 call!4943)) (ite (or c!8400 c!8402) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(declare-fun b!62781 () Bool)

(assert (=> b!62781 (= e!41205 (not call!4941))))

(declare-fun b!62782 () Bool)

(declare-fun e!41196 () ListLongMap!1351)

(assert (=> b!62782 (= e!41196 call!4946)))

(declare-fun b!62783 () Bool)

(declare-fun e!41195 () Bool)

(declare-fun lt!26323 () ListLongMap!1351)

(assert (=> b!62783 (= e!41195 (= (apply!68 lt!26323 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1999 newMap!16)))))

(declare-fun b!62784 () Bool)

(assert (=> b!62784 (= e!41203 (= (apply!68 lt!26323 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1999 newMap!16)))))

(declare-fun bm!4938 () Bool)

(assert (=> bm!4938 (= call!4944 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (array!3746 (store (arr!1791 (_values!2070 newMap!16)) (index!3018 lt!25967) (ValueCellFull!863 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2023 (_values!2070 newMap!16))) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun e!41201 () Bool)

(declare-fun b!62785 () Bool)

(assert (=> b!62785 (= e!41201 (= (apply!68 lt!26323 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)) (get!1088 (select (arr!1791 (array!3746 (store (arr!1791 (_values!2070 newMap!16)) (index!3018 lt!25967) (ValueCellFull!863 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2023 (_values!2070 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62785 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (array!3746 (store (arr!1791 (_values!2070 newMap!16)) (index!3018 lt!25967) (ValueCellFull!863 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2023 (_values!2070 newMap!16))))))))

(assert (=> b!62785 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun b!62786 () Bool)

(declare-fun e!41198 () Unit!1680)

(declare-fun lt!26334 () Unit!1680)

(assert (=> b!62786 (= e!41198 lt!26334)))

(declare-fun lt!26341 () ListLongMap!1351)

(assert (=> b!62786 (= lt!26341 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (array!3746 (store (arr!1791 (_values!2070 newMap!16)) (index!3018 lt!25967) (ValueCellFull!863 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2023 (_values!2070 newMap!16))) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26337 () (_ BitVec 64))

(assert (=> b!62786 (= lt!26337 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26331 () (_ BitVec 64))

(assert (=> b!62786 (= lt!26331 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26343 () Unit!1680)

(assert (=> b!62786 (= lt!26343 (addStillContains!44 lt!26341 lt!26337 (zeroValue!1999 newMap!16) lt!26331))))

(assert (=> b!62786 (contains!686 (+!82 lt!26341 (tuple2!2033 lt!26337 (zeroValue!1999 newMap!16))) lt!26331)))

(declare-fun lt!26324 () Unit!1680)

(assert (=> b!62786 (= lt!26324 lt!26343)))

(declare-fun lt!26330 () ListLongMap!1351)

(assert (=> b!62786 (= lt!26330 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (array!3746 (store (arr!1791 (_values!2070 newMap!16)) (index!3018 lt!25967) (ValueCellFull!863 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2023 (_values!2070 newMap!16))) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26338 () (_ BitVec 64))

(assert (=> b!62786 (= lt!26338 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26329 () (_ BitVec 64))

(assert (=> b!62786 (= lt!26329 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26332 () Unit!1680)

(assert (=> b!62786 (= lt!26332 (addApplyDifferent!44 lt!26330 lt!26338 (minValue!1999 newMap!16) lt!26329))))

(assert (=> b!62786 (= (apply!68 (+!82 lt!26330 (tuple2!2033 lt!26338 (minValue!1999 newMap!16))) lt!26329) (apply!68 lt!26330 lt!26329))))

(declare-fun lt!26326 () Unit!1680)

(assert (=> b!62786 (= lt!26326 lt!26332)))

(declare-fun lt!26344 () ListLongMap!1351)

(assert (=> b!62786 (= lt!26344 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (array!3746 (store (arr!1791 (_values!2070 newMap!16)) (index!3018 lt!25967) (ValueCellFull!863 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2023 (_values!2070 newMap!16))) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26340 () (_ BitVec 64))

(assert (=> b!62786 (= lt!26340 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26327 () (_ BitVec 64))

(assert (=> b!62786 (= lt!26327 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26336 () Unit!1680)

(assert (=> b!62786 (= lt!26336 (addApplyDifferent!44 lt!26344 lt!26340 (zeroValue!1999 newMap!16) lt!26327))))

(assert (=> b!62786 (= (apply!68 (+!82 lt!26344 (tuple2!2033 lt!26340 (zeroValue!1999 newMap!16))) lt!26327) (apply!68 lt!26344 lt!26327))))

(declare-fun lt!26333 () Unit!1680)

(assert (=> b!62786 (= lt!26333 lt!26336)))

(declare-fun lt!26339 () ListLongMap!1351)

(assert (=> b!62786 (= lt!26339 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (array!3746 (store (arr!1791 (_values!2070 newMap!16)) (index!3018 lt!25967) (ValueCellFull!863 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2023 (_values!2070 newMap!16))) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26328 () (_ BitVec 64))

(assert (=> b!62786 (= lt!26328 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26342 () (_ BitVec 64))

(assert (=> b!62786 (= lt!26342 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!62786 (= lt!26334 (addApplyDifferent!44 lt!26339 lt!26328 (minValue!1999 newMap!16) lt!26342))))

(assert (=> b!62786 (= (apply!68 (+!82 lt!26339 (tuple2!2033 lt!26328 (minValue!1999 newMap!16))) lt!26342) (apply!68 lt!26339 lt!26342))))

(declare-fun b!62787 () Bool)

(declare-fun e!41204 () Bool)

(assert (=> b!62787 (= e!41204 (validKeyInArray!0 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62788 () Bool)

(declare-fun e!41206 () Bool)

(assert (=> b!62788 (= e!41206 e!41205)))

(declare-fun c!8401 () Bool)

(assert (=> b!62788 (= c!8401 (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!62789 () Bool)

(declare-fun e!41197 () Bool)

(declare-fun call!4945 () Bool)

(assert (=> b!62789 (= e!41197 (not call!4945))))

(declare-fun b!62790 () Bool)

(declare-fun e!41207 () Bool)

(assert (=> b!62790 (= e!41207 e!41201)))

(declare-fun res!34424 () Bool)

(assert (=> b!62790 (=> (not res!34424) (not e!41201))))

(assert (=> b!62790 (= res!34424 (contains!686 lt!26323 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!62790 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun d!12755 () Bool)

(assert (=> d!12755 e!41206))

(declare-fun res!34429 () Bool)

(assert (=> d!12755 (=> (not res!34429) (not e!41206))))

(assert (=> d!12755 (= res!34429 (or (bvsge #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))))

(declare-fun lt!26325 () ListLongMap!1351)

(assert (=> d!12755 (= lt!26323 lt!26325)))

(declare-fun lt!26335 () Unit!1680)

(assert (=> d!12755 (= lt!26335 e!41198)))

(declare-fun c!8403 () Bool)

(assert (=> d!12755 (= c!8403 e!41199)))

(declare-fun res!34426 () Bool)

(assert (=> d!12755 (=> (not res!34426) (not e!41199))))

(assert (=> d!12755 (= res!34426 (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun e!41200 () ListLongMap!1351)

(assert (=> d!12755 (= lt!26325 e!41200)))

(assert (=> d!12755 (= c!8400 (and (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12755 (validMask!0 (mask!5993 newMap!16))))

(assert (=> d!12755 (= (getCurrentListMap!391 (_keys!3719 newMap!16) (array!3746 (store (arr!1791 (_values!2070 newMap!16)) (index!3018 lt!25967) (ValueCellFull!863 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2023 (_values!2070 newMap!16))) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) lt!26323)))

(declare-fun b!62778 () Bool)

(assert (=> b!62778 (= e!41200 (+!82 call!4942 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))

(declare-fun bm!4939 () Bool)

(assert (=> bm!4939 (= call!4940 call!4944)))

(declare-fun b!62791 () Bool)

(assert (=> b!62791 (= e!41197 e!41195)))

(declare-fun res!34422 () Bool)

(assert (=> b!62791 (= res!34422 call!4945)))

(assert (=> b!62791 (=> (not res!34422) (not e!41195))))

(declare-fun b!62792 () Bool)

(declare-fun c!8399 () Bool)

(assert (=> b!62792 (= c!8399 (and (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!62792 (= e!41196 e!41202)))

(declare-fun bm!4940 () Bool)

(assert (=> bm!4940 (= call!4943 call!4940)))

(declare-fun bm!4941 () Bool)

(assert (=> bm!4941 (= call!4941 (contains!686 lt!26323 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4942 () Bool)

(assert (=> bm!4942 (= call!4945 (contains!686 lt!26323 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62793 () Bool)

(declare-fun res!34427 () Bool)

(assert (=> b!62793 (=> (not res!34427) (not e!41206))))

(assert (=> b!62793 (= res!34427 e!41207)))

(declare-fun res!34430 () Bool)

(assert (=> b!62793 (=> res!34430 e!41207)))

(assert (=> b!62793 (= res!34430 (not e!41204))))

(declare-fun res!34428 () Bool)

(assert (=> b!62793 (=> (not res!34428) (not e!41204))))

(assert (=> b!62793 (= res!34428 (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun b!62794 () Bool)

(declare-fun Unit!1703 () Unit!1680)

(assert (=> b!62794 (= e!41198 Unit!1703)))

(declare-fun b!62795 () Bool)

(assert (=> b!62795 (= e!41202 call!4943)))

(declare-fun bm!4943 () Bool)

(assert (=> bm!4943 (= call!4946 call!4942)))

(declare-fun b!62796 () Bool)

(declare-fun res!34423 () Bool)

(assert (=> b!62796 (=> (not res!34423) (not e!41206))))

(assert (=> b!62796 (= res!34423 e!41197)))

(declare-fun c!8398 () Bool)

(assert (=> b!62796 (= c!8398 (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!62797 () Bool)

(assert (=> b!62797 (= e!41200 e!41196)))

(assert (=> b!62797 (= c!8402 (and (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!12755 c!8400) b!62778))

(assert (= (and d!12755 (not c!8400)) b!62797))

(assert (= (and b!62797 c!8402) b!62782))

(assert (= (and b!62797 (not c!8402)) b!62792))

(assert (= (and b!62792 c!8399) b!62777))

(assert (= (and b!62792 (not c!8399)) b!62795))

(assert (= (or b!62777 b!62795) bm!4940))

(assert (= (or b!62782 bm!4940) bm!4939))

(assert (= (or b!62782 b!62777) bm!4943))

(assert (= (or b!62778 bm!4939) bm!4938))

(assert (= (or b!62778 bm!4943) bm!4937))

(assert (= (and d!12755 res!34426) b!62780))

(assert (= (and d!12755 c!8403) b!62786))

(assert (= (and d!12755 (not c!8403)) b!62794))

(assert (= (and d!12755 res!34429) b!62793))

(assert (= (and b!62793 res!34428) b!62787))

(assert (= (and b!62793 (not res!34430)) b!62790))

(assert (= (and b!62790 res!34424) b!62785))

(assert (= (and b!62793 res!34427) b!62796))

(assert (= (and b!62796 c!8398) b!62791))

(assert (= (and b!62796 (not c!8398)) b!62789))

(assert (= (and b!62791 res!34422) b!62783))

(assert (= (or b!62791 b!62789) bm!4942))

(assert (= (and b!62796 res!34423) b!62788))

(assert (= (and b!62788 c!8401) b!62779))

(assert (= (and b!62788 (not c!8401)) b!62781))

(assert (= (and b!62779 res!34425) b!62784))

(assert (= (or b!62779 b!62781) bm!4941))

(declare-fun b_lambda!2797 () Bool)

(assert (=> (not b_lambda!2797) (not b!62785)))

(assert (=> b!62785 t!4828))

(declare-fun b_and!3837 () Bool)

(assert (= b_and!3833 (and (=> t!4828 result!2455) b_and!3837)))

(assert (=> b!62785 t!4830))

(declare-fun b_and!3839 () Bool)

(assert (= b_and!3835 (and (=> t!4830 result!2457) b_and!3839)))

(declare-fun m!56449 () Bool)

(assert (=> b!62786 m!56449))

(declare-fun m!56451 () Bool)

(assert (=> b!62786 m!56451))

(assert (=> b!62786 m!56449))

(declare-fun m!56453 () Bool)

(assert (=> b!62786 m!56453))

(assert (=> b!62786 m!56033))

(declare-fun m!56455 () Bool)

(assert (=> b!62786 m!56455))

(declare-fun m!56457 () Bool)

(assert (=> b!62786 m!56457))

(declare-fun m!56459 () Bool)

(assert (=> b!62786 m!56459))

(declare-fun m!56461 () Bool)

(assert (=> b!62786 m!56461))

(declare-fun m!56463 () Bool)

(assert (=> b!62786 m!56463))

(declare-fun m!56465 () Bool)

(assert (=> b!62786 m!56465))

(declare-fun m!56467 () Bool)

(assert (=> b!62786 m!56467))

(declare-fun m!56469 () Bool)

(assert (=> b!62786 m!56469))

(declare-fun m!56471 () Bool)

(assert (=> b!62786 m!56471))

(assert (=> b!62786 m!56459))

(declare-fun m!56473 () Bool)

(assert (=> b!62786 m!56473))

(declare-fun m!56475 () Bool)

(assert (=> b!62786 m!56475))

(declare-fun m!56477 () Bool)

(assert (=> b!62786 m!56477))

(assert (=> b!62786 m!56473))

(assert (=> b!62786 m!56463))

(declare-fun m!56479 () Bool)

(assert (=> b!62786 m!56479))

(declare-fun m!56481 () Bool)

(assert (=> b!62783 m!56481))

(assert (=> b!62790 m!56033))

(assert (=> b!62790 m!56033))

(declare-fun m!56483 () Bool)

(assert (=> b!62790 m!56483))

(assert (=> b!62787 m!56033))

(assert (=> b!62787 m!56033))

(assert (=> b!62787 m!56065))

(declare-fun m!56485 () Bool)

(assert (=> bm!4942 m!56485))

(declare-fun m!56487 () Bool)

(assert (=> b!62778 m!56487))

(assert (=> d!12755 m!55995))

(declare-fun m!56489 () Bool)

(assert (=> bm!4937 m!56489))

(assert (=> b!62785 m!56073))

(declare-fun m!56491 () Bool)

(assert (=> b!62785 m!56491))

(assert (=> b!62785 m!56033))

(assert (=> b!62785 m!56491))

(assert (=> b!62785 m!56073))

(declare-fun m!56493 () Bool)

(assert (=> b!62785 m!56493))

(assert (=> b!62785 m!56033))

(declare-fun m!56495 () Bool)

(assert (=> b!62785 m!56495))

(declare-fun m!56497 () Bool)

(assert (=> b!62784 m!56497))

(assert (=> bm!4938 m!56471))

(assert (=> b!62780 m!56033))

(assert (=> b!62780 m!56033))

(assert (=> b!62780 m!56065))

(declare-fun m!56499 () Bool)

(assert (=> bm!4941 m!56499))

(assert (=> b!62374 d!12755))

(declare-fun d!12757 () Bool)

(declare-fun e!41210 () Bool)

(assert (=> d!12757 e!41210))

(declare-fun res!34433 () Bool)

(assert (=> d!12757 (=> (not res!34433) (not e!41210))))

(assert (=> d!12757 (= res!34433 (and (bvsge (index!3018 lt!25967) #b00000000000000000000000000000000) (bvslt (index!3018 lt!25967) (size!2023 (_values!2070 newMap!16)))))))

(declare-fun lt!26347 () Unit!1680)

(declare-fun choose!344 (array!3743 array!3745 (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 (_ BitVec 32) (_ BitVec 64) V!2865 Int) Unit!1680)

(assert (=> d!12757 (= lt!26347 (choose!344 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (index!3018 lt!25967) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2087 newMap!16)))))

(assert (=> d!12757 (validMask!0 (mask!5993 newMap!16))))

(assert (=> d!12757 (= (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!17 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (index!3018 lt!25967) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2087 newMap!16)) lt!26347)))

(declare-fun b!62800 () Bool)

(assert (=> b!62800 (= e!41210 (= (+!82 (getCurrentListMap!391 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!391 (_keys!3719 newMap!16) (array!3746 (store (arr!1791 (_values!2070 newMap!16)) (index!3018 lt!25967) (ValueCellFull!863 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2023 (_values!2070 newMap!16))) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))))))

(assert (= (and d!12757 res!34433) b!62800))

(assert (=> d!12757 m!55703))

(assert (=> d!12757 m!55701))

(declare-fun m!56501 () Bool)

(assert (=> d!12757 m!56501))

(assert (=> d!12757 m!55995))

(assert (=> b!62800 m!55895))

(assert (=> b!62800 m!55895))

(assert (=> b!62800 m!56413))

(assert (=> b!62800 m!55865))

(assert (=> b!62800 m!55861))

(assert (=> b!62374 d!12757))

(declare-fun d!12759 () Bool)

(declare-fun e!41211 () Bool)

(assert (=> d!12759 e!41211))

(declare-fun res!34434 () Bool)

(assert (=> d!12759 (=> (not res!34434) (not e!41211))))

(declare-fun lt!26349 () ListLongMap!1351)

(assert (=> d!12759 (= res!34434 (contains!686 lt!26349 (_1!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!26350 () List!1429)

(assert (=> d!12759 (= lt!26349 (ListLongMap!1352 lt!26350))))

(declare-fun lt!26348 () Unit!1680)

(declare-fun lt!26351 () Unit!1680)

(assert (=> d!12759 (= lt!26348 lt!26351)))

(assert (=> d!12759 (= (getValueByKey!127 lt!26350 (_1!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!132 (_2!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!12759 (= lt!26351 (lemmaContainsTupThenGetReturnValue!44 lt!26350 (_1!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!12759 (= lt!26350 (insertStrictlySorted!47 (toList!691 (ite c!8299 call!4878 call!4863)) (_1!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!12759 (= (+!82 (ite c!8299 call!4878 call!4863) (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!26349)))

(declare-fun b!62801 () Bool)

(declare-fun res!34435 () Bool)

(assert (=> b!62801 (=> (not res!34435) (not e!41211))))

(assert (=> b!62801 (= res!34435 (= (getValueByKey!127 (toList!691 lt!26349) (_1!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!132 (_2!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!62802 () Bool)

(assert (=> b!62802 (= e!41211 (contains!689 (toList!691 lt!26349) (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!12759 res!34434) b!62801))

(assert (= (and b!62801 res!34435) b!62802))

(declare-fun m!56503 () Bool)

(assert (=> d!12759 m!56503))

(declare-fun m!56505 () Bool)

(assert (=> d!12759 m!56505))

(declare-fun m!56507 () Bool)

(assert (=> d!12759 m!56507))

(declare-fun m!56509 () Bool)

(assert (=> d!12759 m!56509))

(declare-fun m!56511 () Bool)

(assert (=> b!62801 m!56511))

(declare-fun m!56513 () Bool)

(assert (=> b!62802 m!56513))

(assert (=> bm!4859 d!12759))

(assert (=> b!62339 d!12717))

(assert (=> b!62470 d!12643))

(declare-fun d!12761 () Bool)

(declare-fun e!41213 () Bool)

(assert (=> d!12761 e!41213))

(declare-fun res!34436 () Bool)

(assert (=> d!12761 (=> res!34436 e!41213)))

(declare-fun lt!26353 () Bool)

(assert (=> d!12761 (= res!34436 (not lt!26353))))

(declare-fun lt!26354 () Bool)

(assert (=> d!12761 (= lt!26353 lt!26354)))

(declare-fun lt!26352 () Unit!1680)

(declare-fun e!41212 () Unit!1680)

(assert (=> d!12761 (= lt!26352 e!41212)))

(declare-fun c!8404 () Bool)

(assert (=> d!12761 (= c!8404 lt!26354)))

(assert (=> d!12761 (= lt!26354 (containsKey!130 (toList!691 lt!26027) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12761 (= (contains!686 lt!26027 #b1000000000000000000000000000000000000000000000000000000000000000) lt!26353)))

(declare-fun b!62803 () Bool)

(declare-fun lt!26355 () Unit!1680)

(assert (=> b!62803 (= e!41212 lt!26355)))

(assert (=> b!62803 (= lt!26355 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 lt!26027) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62803 (isDefined!79 (getValueByKey!127 (toList!691 lt!26027) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62804 () Bool)

(declare-fun Unit!1704 () Unit!1680)

(assert (=> b!62804 (= e!41212 Unit!1704)))

(declare-fun b!62805 () Bool)

(assert (=> b!62805 (= e!41213 (isDefined!79 (getValueByKey!127 (toList!691 lt!26027) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12761 c!8404) b!62803))

(assert (= (and d!12761 (not c!8404)) b!62804))

(assert (= (and d!12761 (not res!34436)) b!62805))

(declare-fun m!56515 () Bool)

(assert (=> d!12761 m!56515))

(declare-fun m!56517 () Bool)

(assert (=> b!62803 m!56517))

(assert (=> b!62803 m!56013))

(assert (=> b!62803 m!56013))

(declare-fun m!56519 () Bool)

(assert (=> b!62803 m!56519))

(assert (=> b!62805 m!56013))

(assert (=> b!62805 m!56013))

(assert (=> b!62805 m!56519))

(assert (=> bm!4895 d!12761))

(declare-fun b!62822 () Bool)

(declare-fun res!34446 () Bool)

(declare-fun e!41225 () Bool)

(assert (=> b!62822 (=> (not res!34446) (not e!41225))))

(declare-fun lt!26360 () SeekEntryResult!223)

(assert (=> b!62822 (= res!34446 (= (select (arr!1790 (_keys!3719 newMap!16)) (index!3020 lt!26360)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62822 (and (bvsge (index!3020 lt!26360) #b00000000000000000000000000000000) (bvslt (index!3020 lt!26360) (size!2022 (_keys!3719 newMap!16))))))

(declare-fun b!62823 () Bool)

(declare-fun e!41224 () Bool)

(declare-fun e!41222 () Bool)

(assert (=> b!62823 (= e!41224 e!41222)))

(declare-fun c!8409 () Bool)

(assert (=> b!62823 (= c!8409 ((_ is MissingVacant!223) lt!26360))))

(declare-fun b!62824 () Bool)

(declare-fun e!41223 () Bool)

(declare-fun call!4951 () Bool)

(assert (=> b!62824 (= e!41223 (not call!4951))))

(declare-fun b!62825 () Bool)

(assert (=> b!62825 (= e!41224 e!41223)))

(declare-fun res!34445 () Bool)

(declare-fun call!4952 () Bool)

(assert (=> b!62825 (= res!34445 call!4952)))

(assert (=> b!62825 (=> (not res!34445) (not e!41223))))

(declare-fun b!62826 () Bool)

(assert (=> b!62826 (= e!41222 ((_ is Undefined!223) lt!26360))))

(declare-fun b!62827 () Bool)

(assert (=> b!62827 (= e!41225 (not call!4951))))

(declare-fun b!62828 () Bool)

(declare-fun res!34448 () Bool)

(assert (=> b!62828 (=> (not res!34448) (not e!41225))))

(assert (=> b!62828 (= res!34448 call!4952)))

(assert (=> b!62828 (= e!41222 e!41225)))

(declare-fun b!62829 () Bool)

(assert (=> b!62829 (and (bvsge (index!3017 lt!26360) #b00000000000000000000000000000000) (bvslt (index!3017 lt!26360) (size!2022 (_keys!3719 newMap!16))))))

(declare-fun res!34447 () Bool)

(assert (=> b!62829 (= res!34447 (= (select (arr!1790 (_keys!3719 newMap!16)) (index!3017 lt!26360)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62829 (=> (not res!34447) (not e!41223))))

(declare-fun c!8410 () Bool)

(declare-fun bm!4948 () Bool)

(assert (=> bm!4948 (= call!4952 (inRange!0 (ite c!8410 (index!3017 lt!26360) (index!3020 lt!26360)) (mask!5993 newMap!16)))))

(declare-fun bm!4949 () Bool)

(assert (=> bm!4949 (= call!4951 (arrayContainsKey!0 (_keys!3719 newMap!16) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun d!12763 () Bool)

(assert (=> d!12763 e!41224))

(assert (=> d!12763 (= c!8410 ((_ is MissingZero!223) lt!26360))))

(assert (=> d!12763 (= lt!26360 (seekEntryOrOpen!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (_keys!3719 newMap!16) (mask!5993 newMap!16)))))

(declare-fun lt!26361 () Unit!1680)

(declare-fun choose!345 (array!3743 array!3745 (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 (_ BitVec 64) Int) Unit!1680)

(assert (=> d!12763 (= lt!26361 (choose!345 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (defaultEntry!2087 newMap!16)))))

(assert (=> d!12763 (validMask!0 (mask!5993 newMap!16))))

(assert (=> d!12763 (= (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!17 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (defaultEntry!2087 newMap!16)) lt!26361)))

(assert (= (and d!12763 c!8410) b!62825))

(assert (= (and d!12763 (not c!8410)) b!62823))

(assert (= (and b!62825 res!34445) b!62829))

(assert (= (and b!62829 res!34447) b!62824))

(assert (= (and b!62823 c!8409) b!62828))

(assert (= (and b!62823 (not c!8409)) b!62826))

(assert (= (and b!62828 res!34448) b!62822))

(assert (= (and b!62822 res!34446) b!62827))

(assert (= (or b!62825 b!62828) bm!4948))

(assert (= (or b!62824 b!62827) bm!4949))

(declare-fun m!56521 () Bool)

(assert (=> b!62822 m!56521))

(assert (=> bm!4949 m!55703))

(assert (=> bm!4949 m!55855))

(declare-fun m!56523 () Bool)

(assert (=> bm!4948 m!56523))

(assert (=> d!12763 m!55703))

(assert (=> d!12763 m!55843))

(assert (=> d!12763 m!55703))

(declare-fun m!56525 () Bool)

(assert (=> d!12763 m!56525))

(assert (=> d!12763 m!55995))

(declare-fun m!56527 () Bool)

(assert (=> b!62829 m!56527))

(assert (=> bm!4867 d!12763))

(declare-fun d!12765 () Bool)

(declare-fun res!34450 () Bool)

(declare-fun e!41229 () Bool)

(assert (=> d!12765 (=> res!34450 e!41229)))

(assert (=> d!12765 (= res!34450 (bvsge #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(assert (=> d!12765 (= (arrayNoDuplicates!0 (_keys!3719 newMap!16) #b00000000000000000000000000000000 Nil!1427) e!41229)))

(declare-fun b!62830 () Bool)

(declare-fun e!41227 () Bool)

(declare-fun call!4953 () Bool)

(assert (=> b!62830 (= e!41227 call!4953)))

(declare-fun b!62831 () Bool)

(declare-fun e!41226 () Bool)

(assert (=> b!62831 (= e!41226 (contains!688 Nil!1427 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62832 () Bool)

(declare-fun e!41228 () Bool)

(assert (=> b!62832 (= e!41228 e!41227)))

(declare-fun c!8411 () Bool)

(assert (=> b!62832 (= c!8411 (validKeyInArray!0 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!4950 () Bool)

(assert (=> bm!4950 (= call!4953 (arrayNoDuplicates!0 (_keys!3719 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!8411 (Cons!1426 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000) Nil!1427) Nil!1427)))))

(declare-fun b!62833 () Bool)

(assert (=> b!62833 (= e!41227 call!4953)))

(declare-fun b!62834 () Bool)

(assert (=> b!62834 (= e!41229 e!41228)))

(declare-fun res!34451 () Bool)

(assert (=> b!62834 (=> (not res!34451) (not e!41228))))

(assert (=> b!62834 (= res!34451 (not e!41226))))

(declare-fun res!34449 () Bool)

(assert (=> b!62834 (=> (not res!34449) (not e!41226))))

(assert (=> b!62834 (= res!34449 (validKeyInArray!0 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!12765 (not res!34450)) b!62834))

(assert (= (and b!62834 res!34449) b!62831))

(assert (= (and b!62834 res!34451) b!62832))

(assert (= (and b!62832 c!8411) b!62833))

(assert (= (and b!62832 (not c!8411)) b!62830))

(assert (= (or b!62833 b!62830) bm!4950))

(assert (=> b!62831 m!56033))

(assert (=> b!62831 m!56033))

(declare-fun m!56529 () Bool)

(assert (=> b!62831 m!56529))

(assert (=> b!62832 m!56033))

(assert (=> b!62832 m!56033))

(assert (=> b!62832 m!56065))

(assert (=> bm!4950 m!56033))

(declare-fun m!56531 () Bool)

(assert (=> bm!4950 m!56531))

(assert (=> b!62834 m!56033))

(assert (=> b!62834 m!56033))

(assert (=> b!62834 m!56065))

(assert (=> b!62481 d!12765))

(declare-fun b!62835 () Bool)

(declare-fun e!41237 () ListLongMap!1351)

(declare-fun call!4960 () ListLongMap!1351)

(assert (=> b!62835 (= e!41237 call!4960)))

(declare-fun b!62837 () Bool)

(declare-fun e!41240 () Bool)

(declare-fun e!41238 () Bool)

(assert (=> b!62837 (= e!41240 e!41238)))

(declare-fun res!34455 () Bool)

(declare-fun call!4955 () Bool)

(assert (=> b!62837 (= res!34455 call!4955)))

(assert (=> b!62837 (=> (not res!34455) (not e!41238))))

(declare-fun b!62838 () Bool)

(declare-fun e!41234 () Bool)

(assert (=> b!62838 (= e!41234 (validKeyInArray!0 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun c!8414 () Bool)

(declare-fun c!8416 () Bool)

(declare-fun call!4957 () ListLongMap!1351)

(declare-fun call!4954 () ListLongMap!1351)

(declare-fun call!4956 () ListLongMap!1351)

(declare-fun bm!4951 () Bool)

(declare-fun call!4958 () ListLongMap!1351)

(assert (=> bm!4951 (= call!4956 (+!82 (ite c!8414 call!4958 (ite c!8416 call!4954 call!4957)) (ite (or c!8414 c!8416) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(declare-fun b!62839 () Bool)

(assert (=> b!62839 (= e!41240 (not call!4955))))

(declare-fun b!62840 () Bool)

(declare-fun e!41231 () ListLongMap!1351)

(assert (=> b!62840 (= e!41231 call!4960)))

(declare-fun b!62841 () Bool)

(declare-fun e!41230 () Bool)

(declare-fun lt!26362 () ListLongMap!1351)

(assert (=> b!62841 (= e!41230 (= (apply!68 lt!26362 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1999 newMap!16)))))

(declare-fun b!62842 () Bool)

(assert (=> b!62842 (= e!41238 (= (apply!68 lt!26362 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1999 newMap!16)))))

(declare-fun bm!4952 () Bool)

(assert (=> bm!4952 (= call!4958 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (ite (or c!8299 c!8290) (_values!2070 newMap!16) lt!25974) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun e!41236 () Bool)

(declare-fun b!62843 () Bool)

(assert (=> b!62843 (= e!41236 (= (apply!68 lt!26362 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)) (get!1088 (select (arr!1791 (ite (or c!8299 c!8290) (_values!2070 newMap!16) lt!25974)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62843 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (ite (or c!8299 c!8290) (_values!2070 newMap!16) lt!25974))))))

(assert (=> b!62843 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun b!62844 () Bool)

(declare-fun e!41233 () Unit!1680)

(declare-fun lt!26373 () Unit!1680)

(assert (=> b!62844 (= e!41233 lt!26373)))

(declare-fun lt!26380 () ListLongMap!1351)

(assert (=> b!62844 (= lt!26380 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (ite (or c!8299 c!8290) (_values!2070 newMap!16) lt!25974) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26376 () (_ BitVec 64))

(assert (=> b!62844 (= lt!26376 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26370 () (_ BitVec 64))

(assert (=> b!62844 (= lt!26370 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26382 () Unit!1680)

(assert (=> b!62844 (= lt!26382 (addStillContains!44 lt!26380 lt!26376 (zeroValue!1999 newMap!16) lt!26370))))

(assert (=> b!62844 (contains!686 (+!82 lt!26380 (tuple2!2033 lt!26376 (zeroValue!1999 newMap!16))) lt!26370)))

(declare-fun lt!26363 () Unit!1680)

(assert (=> b!62844 (= lt!26363 lt!26382)))

(declare-fun lt!26369 () ListLongMap!1351)

(assert (=> b!62844 (= lt!26369 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (ite (or c!8299 c!8290) (_values!2070 newMap!16) lt!25974) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26377 () (_ BitVec 64))

(assert (=> b!62844 (= lt!26377 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26368 () (_ BitVec 64))

(assert (=> b!62844 (= lt!26368 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26371 () Unit!1680)

(assert (=> b!62844 (= lt!26371 (addApplyDifferent!44 lt!26369 lt!26377 (minValue!1999 newMap!16) lt!26368))))

(assert (=> b!62844 (= (apply!68 (+!82 lt!26369 (tuple2!2033 lt!26377 (minValue!1999 newMap!16))) lt!26368) (apply!68 lt!26369 lt!26368))))

(declare-fun lt!26365 () Unit!1680)

(assert (=> b!62844 (= lt!26365 lt!26371)))

(declare-fun lt!26383 () ListLongMap!1351)

(assert (=> b!62844 (= lt!26383 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (ite (or c!8299 c!8290) (_values!2070 newMap!16) lt!25974) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26379 () (_ BitVec 64))

(assert (=> b!62844 (= lt!26379 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26366 () (_ BitVec 64))

(assert (=> b!62844 (= lt!26366 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26375 () Unit!1680)

(assert (=> b!62844 (= lt!26375 (addApplyDifferent!44 lt!26383 lt!26379 (zeroValue!1999 newMap!16) lt!26366))))

(assert (=> b!62844 (= (apply!68 (+!82 lt!26383 (tuple2!2033 lt!26379 (zeroValue!1999 newMap!16))) lt!26366) (apply!68 lt!26383 lt!26366))))

(declare-fun lt!26372 () Unit!1680)

(assert (=> b!62844 (= lt!26372 lt!26375)))

(declare-fun lt!26378 () ListLongMap!1351)

(assert (=> b!62844 (= lt!26378 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (ite (or c!8299 c!8290) (_values!2070 newMap!16) lt!25974) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26367 () (_ BitVec 64))

(assert (=> b!62844 (= lt!26367 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26381 () (_ BitVec 64))

(assert (=> b!62844 (= lt!26381 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!62844 (= lt!26373 (addApplyDifferent!44 lt!26378 lt!26367 (minValue!1999 newMap!16) lt!26381))))

(assert (=> b!62844 (= (apply!68 (+!82 lt!26378 (tuple2!2033 lt!26367 (minValue!1999 newMap!16))) lt!26381) (apply!68 lt!26378 lt!26381))))

(declare-fun b!62845 () Bool)

(declare-fun e!41239 () Bool)

(assert (=> b!62845 (= e!41239 (validKeyInArray!0 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62846 () Bool)

(declare-fun e!41241 () Bool)

(assert (=> b!62846 (= e!41241 e!41240)))

(declare-fun c!8415 () Bool)

(assert (=> b!62846 (= c!8415 (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!62847 () Bool)

(declare-fun e!41232 () Bool)

(declare-fun call!4959 () Bool)

(assert (=> b!62847 (= e!41232 (not call!4959))))

(declare-fun b!62848 () Bool)

(declare-fun e!41242 () Bool)

(assert (=> b!62848 (= e!41242 e!41236)))

(declare-fun res!34454 () Bool)

(assert (=> b!62848 (=> (not res!34454) (not e!41236))))

(assert (=> b!62848 (= res!34454 (contains!686 lt!26362 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!62848 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun d!12767 () Bool)

(assert (=> d!12767 e!41241))

(declare-fun res!34459 () Bool)

(assert (=> d!12767 (=> (not res!34459) (not e!41241))))

(assert (=> d!12767 (= res!34459 (or (bvsge #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))))

(declare-fun lt!26364 () ListLongMap!1351)

(assert (=> d!12767 (= lt!26362 lt!26364)))

(declare-fun lt!26374 () Unit!1680)

(assert (=> d!12767 (= lt!26374 e!41233)))

(declare-fun c!8417 () Bool)

(assert (=> d!12767 (= c!8417 e!41234)))

(declare-fun res!34456 () Bool)

(assert (=> d!12767 (=> (not res!34456) (not e!41234))))

(assert (=> d!12767 (= res!34456 (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun e!41235 () ListLongMap!1351)

(assert (=> d!12767 (= lt!26364 e!41235)))

(assert (=> d!12767 (= c!8414 (and (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12767 (validMask!0 (mask!5993 newMap!16))))

(assert (=> d!12767 (= (getCurrentListMap!391 (_keys!3719 newMap!16) (ite (or c!8299 c!8290) (_values!2070 newMap!16) lt!25974) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) lt!26362)))

(declare-fun b!62836 () Bool)

(assert (=> b!62836 (= e!41235 (+!82 call!4956 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))

(declare-fun bm!4953 () Bool)

(assert (=> bm!4953 (= call!4954 call!4958)))

(declare-fun b!62849 () Bool)

(assert (=> b!62849 (= e!41232 e!41230)))

(declare-fun res!34452 () Bool)

(assert (=> b!62849 (= res!34452 call!4959)))

(assert (=> b!62849 (=> (not res!34452) (not e!41230))))

(declare-fun b!62850 () Bool)

(declare-fun c!8413 () Bool)

(assert (=> b!62850 (= c!8413 (and (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!62850 (= e!41231 e!41237)))

(declare-fun bm!4954 () Bool)

(assert (=> bm!4954 (= call!4957 call!4954)))

(declare-fun bm!4955 () Bool)

(assert (=> bm!4955 (= call!4955 (contains!686 lt!26362 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4956 () Bool)

(assert (=> bm!4956 (= call!4959 (contains!686 lt!26362 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62851 () Bool)

(declare-fun res!34457 () Bool)

(assert (=> b!62851 (=> (not res!34457) (not e!41241))))

(assert (=> b!62851 (= res!34457 e!41242)))

(declare-fun res!34460 () Bool)

(assert (=> b!62851 (=> res!34460 e!41242)))

(assert (=> b!62851 (= res!34460 (not e!41239))))

(declare-fun res!34458 () Bool)

(assert (=> b!62851 (=> (not res!34458) (not e!41239))))

(assert (=> b!62851 (= res!34458 (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun b!62852 () Bool)

(declare-fun Unit!1705 () Unit!1680)

(assert (=> b!62852 (= e!41233 Unit!1705)))

(declare-fun b!62853 () Bool)

(assert (=> b!62853 (= e!41237 call!4957)))

(declare-fun bm!4957 () Bool)

(assert (=> bm!4957 (= call!4960 call!4956)))

(declare-fun b!62854 () Bool)

(declare-fun res!34453 () Bool)

(assert (=> b!62854 (=> (not res!34453) (not e!41241))))

(assert (=> b!62854 (= res!34453 e!41232)))

(declare-fun c!8412 () Bool)

(assert (=> b!62854 (= c!8412 (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!62855 () Bool)

(assert (=> b!62855 (= e!41235 e!41231)))

(assert (=> b!62855 (= c!8416 (and (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!12767 c!8414) b!62836))

(assert (= (and d!12767 (not c!8414)) b!62855))

(assert (= (and b!62855 c!8416) b!62840))

(assert (= (and b!62855 (not c!8416)) b!62850))

(assert (= (and b!62850 c!8413) b!62835))

(assert (= (and b!62850 (not c!8413)) b!62853))

(assert (= (or b!62835 b!62853) bm!4954))

(assert (= (or b!62840 bm!4954) bm!4953))

(assert (= (or b!62840 b!62835) bm!4957))

(assert (= (or b!62836 bm!4953) bm!4952))

(assert (= (or b!62836 bm!4957) bm!4951))

(assert (= (and d!12767 res!34456) b!62838))

(assert (= (and d!12767 c!8417) b!62844))

(assert (= (and d!12767 (not c!8417)) b!62852))

(assert (= (and d!12767 res!34459) b!62851))

(assert (= (and b!62851 res!34458) b!62845))

(assert (= (and b!62851 (not res!34460)) b!62848))

(assert (= (and b!62848 res!34454) b!62843))

(assert (= (and b!62851 res!34457) b!62854))

(assert (= (and b!62854 c!8412) b!62849))

(assert (= (and b!62854 (not c!8412)) b!62847))

(assert (= (and b!62849 res!34452) b!62841))

(assert (= (or b!62849 b!62847) bm!4956))

(assert (= (and b!62854 res!34453) b!62846))

(assert (= (and b!62846 c!8415) b!62837))

(assert (= (and b!62846 (not c!8415)) b!62839))

(assert (= (and b!62837 res!34455) b!62842))

(assert (= (or b!62837 b!62839) bm!4955))

(declare-fun b_lambda!2799 () Bool)

(assert (=> (not b_lambda!2799) (not b!62843)))

(assert (=> b!62843 t!4828))

(declare-fun b_and!3841 () Bool)

(assert (= b_and!3837 (and (=> t!4828 result!2455) b_and!3841)))

(assert (=> b!62843 t!4830))

(declare-fun b_and!3843 () Bool)

(assert (= b_and!3839 (and (=> t!4830 result!2457) b_and!3843)))

(declare-fun m!56533 () Bool)

(assert (=> b!62844 m!56533))

(declare-fun m!56535 () Bool)

(assert (=> b!62844 m!56535))

(assert (=> b!62844 m!56533))

(declare-fun m!56537 () Bool)

(assert (=> b!62844 m!56537))

(assert (=> b!62844 m!56033))

(declare-fun m!56539 () Bool)

(assert (=> b!62844 m!56539))

(declare-fun m!56541 () Bool)

(assert (=> b!62844 m!56541))

(declare-fun m!56543 () Bool)

(assert (=> b!62844 m!56543))

(declare-fun m!56545 () Bool)

(assert (=> b!62844 m!56545))

(declare-fun m!56547 () Bool)

(assert (=> b!62844 m!56547))

(declare-fun m!56549 () Bool)

(assert (=> b!62844 m!56549))

(declare-fun m!56551 () Bool)

(assert (=> b!62844 m!56551))

(declare-fun m!56553 () Bool)

(assert (=> b!62844 m!56553))

(declare-fun m!56555 () Bool)

(assert (=> b!62844 m!56555))

(assert (=> b!62844 m!56543))

(declare-fun m!56557 () Bool)

(assert (=> b!62844 m!56557))

(declare-fun m!56559 () Bool)

(assert (=> b!62844 m!56559))

(declare-fun m!56561 () Bool)

(assert (=> b!62844 m!56561))

(assert (=> b!62844 m!56557))

(assert (=> b!62844 m!56547))

(declare-fun m!56563 () Bool)

(assert (=> b!62844 m!56563))

(declare-fun m!56565 () Bool)

(assert (=> b!62841 m!56565))

(assert (=> b!62848 m!56033))

(assert (=> b!62848 m!56033))

(declare-fun m!56567 () Bool)

(assert (=> b!62848 m!56567))

(assert (=> b!62845 m!56033))

(assert (=> b!62845 m!56033))

(assert (=> b!62845 m!56065))

(declare-fun m!56569 () Bool)

(assert (=> bm!4956 m!56569))

(declare-fun m!56571 () Bool)

(assert (=> b!62836 m!56571))

(assert (=> d!12767 m!55995))

(declare-fun m!56573 () Bool)

(assert (=> bm!4951 m!56573))

(assert (=> b!62843 m!56073))

(declare-fun m!56575 () Bool)

(assert (=> b!62843 m!56575))

(assert (=> b!62843 m!56033))

(assert (=> b!62843 m!56575))

(assert (=> b!62843 m!56073))

(declare-fun m!56577 () Bool)

(assert (=> b!62843 m!56577))

(assert (=> b!62843 m!56033))

(declare-fun m!56579 () Bool)

(assert (=> b!62843 m!56579))

(declare-fun m!56581 () Bool)

(assert (=> b!62842 m!56581))

(assert (=> bm!4952 m!56555))

(assert (=> b!62838 m!56033))

(assert (=> b!62838 m!56033))

(assert (=> b!62838 m!56065))

(declare-fun m!56583 () Bool)

(assert (=> bm!4955 m!56583))

(assert (=> bm!4858 d!12767))

(assert (=> d!12613 d!12629))

(declare-fun mapNonEmpty!2955 () Bool)

(declare-fun mapRes!2955 () Bool)

(declare-fun tp!8139 () Bool)

(declare-fun e!41244 () Bool)

(assert (=> mapNonEmpty!2955 (= mapRes!2955 (and tp!8139 e!41244))))

(declare-fun mapRest!2955 () (Array (_ BitVec 32) ValueCell!863))

(declare-fun mapValue!2955 () ValueCell!863)

(declare-fun mapKey!2955 () (_ BitVec 32))

(assert (=> mapNonEmpty!2955 (= mapRest!2954 (store mapRest!2955 mapKey!2955 mapValue!2955))))

(declare-fun condMapEmpty!2955 () Bool)

(declare-fun mapDefault!2955 () ValueCell!863)

(assert (=> mapNonEmpty!2954 (= condMapEmpty!2955 (= mapRest!2954 ((as const (Array (_ BitVec 32) ValueCell!863)) mapDefault!2955)))))

(declare-fun e!41243 () Bool)

(assert (=> mapNonEmpty!2954 (= tp!8138 (and e!41243 mapRes!2955))))

(declare-fun b!62857 () Bool)

(assert (=> b!62857 (= e!41243 tp_is_empty!2413)))

(declare-fun b!62856 () Bool)

(assert (=> b!62856 (= e!41244 tp_is_empty!2413)))

(declare-fun mapIsEmpty!2955 () Bool)

(assert (=> mapIsEmpty!2955 mapRes!2955))

(assert (= (and mapNonEmpty!2954 condMapEmpty!2955) mapIsEmpty!2955))

(assert (= (and mapNonEmpty!2954 (not condMapEmpty!2955)) mapNonEmpty!2955))

(assert (= (and mapNonEmpty!2955 ((_ is ValueCellFull!863) mapValue!2955)) b!62856))

(assert (= (and mapNonEmpty!2954 ((_ is ValueCellFull!863) mapDefault!2955)) b!62857))

(declare-fun m!56585 () Bool)

(assert (=> mapNonEmpty!2955 m!56585))

(declare-fun mapNonEmpty!2956 () Bool)

(declare-fun mapRes!2956 () Bool)

(declare-fun tp!8140 () Bool)

(declare-fun e!41246 () Bool)

(assert (=> mapNonEmpty!2956 (= mapRes!2956 (and tp!8140 e!41246))))

(declare-fun mapKey!2956 () (_ BitVec 32))

(declare-fun mapValue!2956 () ValueCell!863)

(declare-fun mapRest!2956 () (Array (_ BitVec 32) ValueCell!863))

(assert (=> mapNonEmpty!2956 (= mapRest!2953 (store mapRest!2956 mapKey!2956 mapValue!2956))))

(declare-fun condMapEmpty!2956 () Bool)

(declare-fun mapDefault!2956 () ValueCell!863)

(assert (=> mapNonEmpty!2953 (= condMapEmpty!2956 (= mapRest!2953 ((as const (Array (_ BitVec 32) ValueCell!863)) mapDefault!2956)))))

(declare-fun e!41245 () Bool)

(assert (=> mapNonEmpty!2953 (= tp!8137 (and e!41245 mapRes!2956))))

(declare-fun b!62859 () Bool)

(assert (=> b!62859 (= e!41245 tp_is_empty!2413)))

(declare-fun b!62858 () Bool)

(assert (=> b!62858 (= e!41246 tp_is_empty!2413)))

(declare-fun mapIsEmpty!2956 () Bool)

(assert (=> mapIsEmpty!2956 mapRes!2956))

(assert (= (and mapNonEmpty!2953 condMapEmpty!2956) mapIsEmpty!2956))

(assert (= (and mapNonEmpty!2953 (not condMapEmpty!2956)) mapNonEmpty!2956))

(assert (= (and mapNonEmpty!2956 ((_ is ValueCellFull!863) mapValue!2956)) b!62858))

(assert (= (and mapNonEmpty!2953 ((_ is ValueCellFull!863) mapDefault!2956)) b!62859))

(declare-fun m!56587 () Bool)

(assert (=> mapNonEmpty!2956 m!56587))

(declare-fun b_lambda!2801 () Bool)

(assert (= b_lambda!2789 (or (and b!62113 b_free!1993 (= (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2087 newMap!16))) (and b!62120 b_free!1995) b_lambda!2801)))

(declare-fun b_lambda!2803 () Bool)

(assert (= b_lambda!2793 (or (and b!62113 b_free!1993) (and b!62120 b_free!1995 (= (defaultEntry!2087 newMap!16) (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))))) b_lambda!2803)))

(declare-fun b_lambda!2805 () Bool)

(assert (= b_lambda!2791 (or (and b!62113 b_free!1993) (and b!62120 b_free!1995 (= (defaultEntry!2087 newMap!16) (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))))) b_lambda!2805)))

(declare-fun b_lambda!2807 () Bool)

(assert (= b_lambda!2797 (or (and b!62113 b_free!1993 (= (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2087 newMap!16))) (and b!62120 b_free!1995) b_lambda!2807)))

(declare-fun b_lambda!2809 () Bool)

(assert (= b_lambda!2799 (or (and b!62113 b_free!1993 (= (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2087 newMap!16))) (and b!62120 b_free!1995) b_lambda!2809)))

(declare-fun b_lambda!2811 () Bool)

(assert (= b_lambda!2795 (or (and b!62113 b_free!1993 (= (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2087 newMap!16))) (and b!62120 b_free!1995) b_lambda!2811)))

(check-sat (not b!62642) (not d!12645) (not d!12685) (not b_lambda!2811) (not b!62609) (not d!12703) (not b!62569) (not b!62655) (not d!12721) (not d!12695) (not d!12689) (not b!62704) (not b!62616) (not bm!4948) (not b!62605) (not b_next!1995) (not d!12697) (not d!12687) (not b!62778) (not d!12669) (not b!62519) (not bm!4931) (not bm!4905) (not b!62606) (not b!62510) (not b!62783) (not b!62512) (not d!12747) (not b!62673) (not bm!4942) (not bm!4937) (not b!62790) (not b!62705) (not d!12751) (not d!12717) (not b_lambda!2809) (not b!62622) (not b!62565) (not bm!4919) (not b!62776) (not b!62634) (not d!12737) (not d!12767) (not bm!4914) (not b!62802) (not b!62643) tp_is_empty!2413 (not d!12753) (not b!62682) (not b!62801) (not b!62612) (not b!62518) (not d!12679) (not b!62553) (not d!12735) (not b!62755) (not d!12699) (not b!62743) (not bm!4952) (not bm!4956) (not b_lambda!2801) (not b!62521) (not b!62786) (not b!62741) (not d!12739) (not b!62514) (not b!62800) (not b!62771) (not b!62834) (not b!62614) (not d!12755) (not b!62532) (not b!62508) (not b!62640) (not b!62624) (not b!62502) (not b!62520) (not b!62832) (not d!12759) (not b!62843) (not d!12657) (not b!62572) (not b!62566) (not bm!4949) (not b!62740) (not d!12661) (not b!62623) (not bm!4913) (not d!12675) (not d!12681) (not b!62701) (not b!62542) (not b_lambda!2783) (not b!62540) (not b!62615) (not b_lambda!2803) (not d!12701) (not bm!4918) (not b!62604) (not d!12671) (not b!62841) (not b!62787) (not d!12729) (not b!62784) (not b!62497) (not mapNonEmpty!2956) (not b!62611) (not d!12743) (not b!62574) (not b!62625) (not b!62498) (not bm!4941) (not d!12663) (not b!62538) (not d!12691) (not b!62842) (not b!62617) (not d!12705) (not bm!4933) (not b!62836) (not d!12683) (not b!62753) (not d!12761) (not b!62831) (not b!62746) (not bm!4955) (not b!62517) (not b!62780) (not d!12733) (not b!62509) (not b!62767) (not b!62656) (not b_lambda!2807) (not bm!4936) (not b!62573) (not b!62845) (not bm!4938) (not b!62770) (not b!62641) (not b!62685) (not bm!4901) (not d!12719) (not d!12763) (not bm!4910) (not d!12693) (not bm!4951) (not b_lambda!2805) (not b!62524) (not b!62570) (not d!12651) (not b!62533) (not b!62702) (not d!12647) (not d!12709) (not bm!4950) (not d!12713) (not b!62803) (not d!12757) (not b!62552) (not d!12653) (not bm!4902) (not b!62658) (not d!12707) (not b!62620) (not b!62636) (not bm!4906) (not bm!4932) (not b!62500) (not d!12727) (not b!62848) (not b!62683) (not b!62567) (not b!62646) (not d!12711) (not b!62785) (not b!62496) b_and!3843 (not b!62844) (not b!62639) (not b!62838) (not b_lambda!2787) (not b_next!1993) (not b!62773) (not d!12741) (not bm!4915) (not b!62703) (not bm!4921) (not b!62700) (not b!62805) (not d!12639) (not b!62571) (not b!62696) (not d!12677) (not b!62631) (not mapNonEmpty!2955) (not b!62626) b_and!3841)
(check-sat b_and!3841 b_and!3843 (not b_next!1993) (not b_next!1995))
(get-model)

(declare-fun d!12769 () Bool)

(declare-fun e!41248 () Bool)

(assert (=> d!12769 e!41248))

(declare-fun res!34461 () Bool)

(assert (=> d!12769 (=> res!34461 e!41248)))

(declare-fun lt!26385 () Bool)

(assert (=> d!12769 (= res!34461 (not lt!26385))))

(declare-fun lt!26386 () Bool)

(assert (=> d!12769 (= lt!26385 lt!26386)))

(declare-fun lt!26384 () Unit!1680)

(declare-fun e!41247 () Unit!1680)

(assert (=> d!12769 (= lt!26384 e!41247)))

(declare-fun c!8418 () Bool)

(assert (=> d!12769 (= c!8418 lt!26386)))

(assert (=> d!12769 (= lt!26386 (containsKey!130 (toList!691 lt!26067) (_1!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> d!12769 (= (contains!686 lt!26067 (_1!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))) lt!26385)))

(declare-fun b!62860 () Bool)

(declare-fun lt!26387 () Unit!1680)

(assert (=> b!62860 (= e!41247 lt!26387)))

(assert (=> b!62860 (= lt!26387 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 lt!26067) (_1!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> b!62860 (isDefined!79 (getValueByKey!127 (toList!691 lt!26067) (_1!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!62861 () Bool)

(declare-fun Unit!1706 () Unit!1680)

(assert (=> b!62861 (= e!41247 Unit!1706)))

(declare-fun b!62862 () Bool)

(assert (=> b!62862 (= e!41248 (isDefined!79 (getValueByKey!127 (toList!691 lt!26067) (_1!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))))

(assert (= (and d!12769 c!8418) b!62860))

(assert (= (and d!12769 (not c!8418)) b!62861))

(assert (= (and d!12769 (not res!34461)) b!62862))

(declare-fun m!56589 () Bool)

(assert (=> d!12769 m!56589))

(declare-fun m!56591 () Bool)

(assert (=> b!62860 m!56591))

(assert (=> b!62860 m!55989))

(assert (=> b!62860 m!55989))

(declare-fun m!56593 () Bool)

(assert (=> b!62860 m!56593))

(assert (=> b!62862 m!55989))

(assert (=> b!62862 m!55989))

(assert (=> b!62862 m!56593))

(assert (=> d!12639 d!12769))

(declare-fun b!62863 () Bool)

(declare-fun e!41249 () Option!133)

(assert (=> b!62863 (= e!41249 (Some!132 (_2!1027 (h!2008 lt!26068))))))

(declare-fun c!8419 () Bool)

(declare-fun d!12771 () Bool)

(assert (=> d!12771 (= c!8419 (and ((_ is Cons!1425) lt!26068) (= (_1!1027 (h!2008 lt!26068)) (_1!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))))

(assert (=> d!12771 (= (getValueByKey!127 lt!26068 (_1!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))) e!41249)))

(declare-fun b!62864 () Bool)

(declare-fun e!41250 () Option!133)

(assert (=> b!62864 (= e!41249 e!41250)))

(declare-fun c!8420 () Bool)

(assert (=> b!62864 (= c!8420 (and ((_ is Cons!1425) lt!26068) (not (= (_1!1027 (h!2008 lt!26068)) (_1!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))))

(declare-fun b!62865 () Bool)

(assert (=> b!62865 (= e!41250 (getValueByKey!127 (t!4815 lt!26068) (_1!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!62866 () Bool)

(assert (=> b!62866 (= e!41250 None!131)))

(assert (= (and d!12771 c!8419) b!62863))

(assert (= (and d!12771 (not c!8419)) b!62864))

(assert (= (and b!62864 c!8420) b!62865))

(assert (= (and b!62864 (not c!8420)) b!62866))

(declare-fun m!56595 () Bool)

(assert (=> b!62865 m!56595))

(assert (=> d!12639 d!12771))

(declare-fun d!12773 () Bool)

(assert (=> d!12773 (= (getValueByKey!127 lt!26068 (_1!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))) (Some!132 (_2!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun lt!26390 () Unit!1680)

(declare-fun choose!346 (List!1429 (_ BitVec 64) V!2865) Unit!1680)

(assert (=> d!12773 (= lt!26390 (choose!346 lt!26068 (_1!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) (_2!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun e!41253 () Bool)

(assert (=> d!12773 e!41253))

(declare-fun res!34466 () Bool)

(assert (=> d!12773 (=> (not res!34466) (not e!41253))))

(assert (=> d!12773 (= res!34466 (isStrictlySorted!273 lt!26068))))

(assert (=> d!12773 (= (lemmaContainsTupThenGetReturnValue!44 lt!26068 (_1!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) (_2!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))) lt!26390)))

(declare-fun b!62871 () Bool)

(declare-fun res!34467 () Bool)

(assert (=> b!62871 (=> (not res!34467) (not e!41253))))

(assert (=> b!62871 (= res!34467 (containsKey!130 lt!26068 (_1!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!62872 () Bool)

(assert (=> b!62872 (= e!41253 (contains!689 lt!26068 (tuple2!2033 (_1!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) (_2!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))))

(assert (= (and d!12773 res!34466) b!62871))

(assert (= (and b!62871 res!34467) b!62872))

(assert (=> d!12773 m!55983))

(declare-fun m!56597 () Bool)

(assert (=> d!12773 m!56597))

(declare-fun m!56599 () Bool)

(assert (=> d!12773 m!56599))

(declare-fun m!56601 () Bool)

(assert (=> b!62871 m!56601))

(declare-fun m!56603 () Bool)

(assert (=> b!62872 m!56603))

(assert (=> d!12639 d!12773))

(declare-fun b!62893 () Bool)

(declare-fun e!41267 () Bool)

(declare-fun lt!26393 () List!1429)

(assert (=> b!62893 (= e!41267 (contains!689 lt!26393 (tuple2!2033 (_1!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) (_2!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))))

(declare-fun b!62894 () Bool)

(declare-fun res!34473 () Bool)

(assert (=> b!62894 (=> (not res!34473) (not e!41267))))

(assert (=> b!62894 (= res!34473 (containsKey!130 lt!26393 (_1!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun bm!4964 () Bool)

(declare-fun call!4969 () List!1429)

(declare-fun call!4967 () List!1429)

(assert (=> bm!4964 (= call!4969 call!4967)))

(declare-fun bm!4965 () Bool)

(declare-fun call!4968 () List!1429)

(assert (=> bm!4965 (= call!4967 call!4968)))

(declare-fun b!62895 () Bool)

(declare-fun c!8429 () Bool)

(assert (=> b!62895 (= c!8429 (and ((_ is Cons!1425) (toList!691 (ite c!8317 call!4898 (ite c!8319 call!4894 call!4897)))) (bvsgt (_1!1027 (h!2008 (toList!691 (ite c!8317 call!4898 (ite c!8319 call!4894 call!4897))))) (_1!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))))

(declare-fun e!41265 () List!1429)

(declare-fun e!41268 () List!1429)

(assert (=> b!62895 (= e!41265 e!41268)))

(declare-fun d!12775 () Bool)

(assert (=> d!12775 e!41267))

(declare-fun res!34472 () Bool)

(assert (=> d!12775 (=> (not res!34472) (not e!41267))))

(assert (=> d!12775 (= res!34472 (isStrictlySorted!273 lt!26393))))

(declare-fun e!41264 () List!1429)

(assert (=> d!12775 (= lt!26393 e!41264)))

(declare-fun c!8430 () Bool)

(assert (=> d!12775 (= c!8430 (and ((_ is Cons!1425) (toList!691 (ite c!8317 call!4898 (ite c!8319 call!4894 call!4897)))) (bvslt (_1!1027 (h!2008 (toList!691 (ite c!8317 call!4898 (ite c!8319 call!4894 call!4897))))) (_1!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))))

(assert (=> d!12775 (isStrictlySorted!273 (toList!691 (ite c!8317 call!4898 (ite c!8319 call!4894 call!4897))))))

(assert (=> d!12775 (= (insertStrictlySorted!47 (toList!691 (ite c!8317 call!4898 (ite c!8319 call!4894 call!4897))) (_1!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) (_2!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))) lt!26393)))

(declare-fun bm!4966 () Bool)

(declare-fun e!41266 () List!1429)

(declare-fun $colon$colon!61 (List!1429 tuple2!2032) List!1429)

(assert (=> bm!4966 (= call!4968 ($colon$colon!61 e!41266 (ite c!8430 (h!2008 (toList!691 (ite c!8317 call!4898 (ite c!8319 call!4894 call!4897)))) (tuple2!2033 (_1!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) (_2!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))))

(declare-fun c!8432 () Bool)

(assert (=> bm!4966 (= c!8432 c!8430)))

(declare-fun b!62896 () Bool)

(assert (=> b!62896 (= e!41265 call!4967)))

(declare-fun b!62897 () Bool)

(assert (=> b!62897 (= e!41266 (insertStrictlySorted!47 (t!4815 (toList!691 (ite c!8317 call!4898 (ite c!8319 call!4894 call!4897)))) (_1!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) (_2!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!62898 () Bool)

(assert (=> b!62898 (= e!41264 call!4968)))

(declare-fun b!62899 () Bool)

(assert (=> b!62899 (= e!41264 e!41265)))

(declare-fun c!8431 () Bool)

(assert (=> b!62899 (= c!8431 (and ((_ is Cons!1425) (toList!691 (ite c!8317 call!4898 (ite c!8319 call!4894 call!4897)))) (= (_1!1027 (h!2008 (toList!691 (ite c!8317 call!4898 (ite c!8319 call!4894 call!4897))))) (_1!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))))

(declare-fun b!62900 () Bool)

(assert (=> b!62900 (= e!41268 call!4969)))

(declare-fun b!62901 () Bool)

(assert (=> b!62901 (= e!41266 (ite c!8431 (t!4815 (toList!691 (ite c!8317 call!4898 (ite c!8319 call!4894 call!4897)))) (ite c!8429 (Cons!1425 (h!2008 (toList!691 (ite c!8317 call!4898 (ite c!8319 call!4894 call!4897)))) (t!4815 (toList!691 (ite c!8317 call!4898 (ite c!8319 call!4894 call!4897))))) Nil!1426)))))

(declare-fun b!62902 () Bool)

(assert (=> b!62902 (= e!41268 call!4969)))

(assert (= (and d!12775 c!8430) b!62898))

(assert (= (and d!12775 (not c!8430)) b!62899))

(assert (= (and b!62899 c!8431) b!62896))

(assert (= (and b!62899 (not c!8431)) b!62895))

(assert (= (and b!62895 c!8429) b!62902))

(assert (= (and b!62895 (not c!8429)) b!62900))

(assert (= (or b!62902 b!62900) bm!4964))

(assert (= (or b!62896 bm!4964) bm!4965))

(assert (= (or b!62898 bm!4965) bm!4966))

(assert (= (and bm!4966 c!8432) b!62897))

(assert (= (and bm!4966 (not c!8432)) b!62901))

(assert (= (and d!12775 res!34472) b!62894))

(assert (= (and b!62894 res!34473) b!62893))

(declare-fun m!56605 () Bool)

(assert (=> b!62894 m!56605))

(declare-fun m!56607 () Bool)

(assert (=> bm!4966 m!56607))

(declare-fun m!56609 () Bool)

(assert (=> b!62897 m!56609))

(declare-fun m!56611 () Bool)

(assert (=> b!62893 m!56611))

(declare-fun m!56613 () Bool)

(assert (=> d!12775 m!56613))

(declare-fun m!56615 () Bool)

(assert (=> d!12775 m!56615))

(assert (=> d!12639 d!12775))

(declare-fun b!62903 () Bool)

(declare-fun e!41269 () Option!133)

(assert (=> b!62903 (= e!41269 (Some!132 (_2!1027 (h!2008 (t!4815 (toList!691 lt!25841))))))))

(declare-fun c!8433 () Bool)

(declare-fun d!12777 () Bool)

(assert (=> d!12777 (= c!8433 (and ((_ is Cons!1425) (t!4815 (toList!691 lt!25841))) (= (_1!1027 (h!2008 (t!4815 (toList!691 lt!25841)))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355))))))

(assert (=> d!12777 (= (getValueByKey!127 (t!4815 (toList!691 lt!25841)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) e!41269)))

(declare-fun b!62904 () Bool)

(declare-fun e!41270 () Option!133)

(assert (=> b!62904 (= e!41269 e!41270)))

(declare-fun c!8434 () Bool)

(assert (=> b!62904 (= c!8434 (and ((_ is Cons!1425) (t!4815 (toList!691 lt!25841))) (not (= (_1!1027 (h!2008 (t!4815 (toList!691 lt!25841)))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))))

(declare-fun b!62905 () Bool)

(assert (=> b!62905 (= e!41270 (getValueByKey!127 (t!4815 (t!4815 (toList!691 lt!25841))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun b!62906 () Bool)

(assert (=> b!62906 (= e!41270 None!131)))

(assert (= (and d!12777 c!8433) b!62903))

(assert (= (and d!12777 (not c!8433)) b!62904))

(assert (= (and b!62904 c!8434) b!62905))

(assert (= (and b!62904 (not c!8434)) b!62906))

(assert (=> b!62905 m!55703))

(declare-fun m!56617 () Bool)

(assert (=> b!62905 m!56617))

(assert (=> b!62696 d!12777))

(declare-fun b!62908 () Bool)

(declare-fun res!34476 () Bool)

(declare-fun e!41271 () Bool)

(assert (=> b!62908 (=> (not res!34476) (not e!41271))))

(assert (=> b!62908 (= res!34476 (bvsge (size!2028 (_2!1026 lt!25975)) (_size!366 (_2!1026 lt!25975))))))

(declare-fun b!62910 () Bool)

(assert (=> b!62910 (= e!41271 (and (bvsge (extraKeys!1966 (_2!1026 lt!25975)) #b00000000000000000000000000000000) (bvsle (extraKeys!1966 (_2!1026 lt!25975)) #b00000000000000000000000000000011) (bvsge (_vacant!366 (_2!1026 lt!25975)) #b00000000000000000000000000000000)))))

(declare-fun b!62907 () Bool)

(declare-fun res!34475 () Bool)

(assert (=> b!62907 (=> (not res!34475) (not e!41271))))

(assert (=> b!62907 (= res!34475 (and (= (size!2023 (_values!2070 (_2!1026 lt!25975))) (bvadd (mask!5993 (_2!1026 lt!25975)) #b00000000000000000000000000000001)) (= (size!2022 (_keys!3719 (_2!1026 lt!25975))) (size!2023 (_values!2070 (_2!1026 lt!25975)))) (bvsge (_size!366 (_2!1026 lt!25975)) #b00000000000000000000000000000000) (bvsle (_size!366 (_2!1026 lt!25975)) (bvadd (mask!5993 (_2!1026 lt!25975)) #b00000000000000000000000000000001))))))

(declare-fun b!62909 () Bool)

(declare-fun res!34474 () Bool)

(assert (=> b!62909 (=> (not res!34474) (not e!41271))))

(assert (=> b!62909 (= res!34474 (= (size!2028 (_2!1026 lt!25975)) (bvadd (_size!366 (_2!1026 lt!25975)) (bvsdiv (bvadd (extraKeys!1966 (_2!1026 lt!25975)) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun d!12779 () Bool)

(declare-fun res!34477 () Bool)

(assert (=> d!12779 (=> (not res!34477) (not e!41271))))

(assert (=> d!12779 (= res!34477 (validMask!0 (mask!5993 (_2!1026 lt!25975))))))

(assert (=> d!12779 (= (simpleValid!44 (_2!1026 lt!25975)) e!41271)))

(assert (= (and d!12779 res!34477) b!62907))

(assert (= (and b!62907 res!34475) b!62908))

(assert (= (and b!62908 res!34476) b!62909))

(assert (= (and b!62909 res!34474) b!62910))

(declare-fun m!56619 () Bool)

(assert (=> b!62908 m!56619))

(assert (=> b!62909 m!56619))

(declare-fun m!56621 () Bool)

(assert (=> d!12779 m!56621))

(assert (=> d!12677 d!12779))

(declare-fun d!12781 () Bool)

(assert (=> d!12781 (= (isDefined!79 (getValueByKey!127 (toList!691 lt!26027) #b1000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!306 (getValueByKey!127 (toList!691 lt!26027) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!2734 () Bool)

(assert (= bs!2734 d!12781))

(assert (=> bs!2734 m!56013))

(declare-fun m!56623 () Bool)

(assert (=> bs!2734 m!56623))

(assert (=> b!62805 d!12781))

(declare-fun b!62911 () Bool)

(declare-fun e!41272 () Option!133)

(assert (=> b!62911 (= e!41272 (Some!132 (_2!1027 (h!2008 (toList!691 lt!26027)))))))

(declare-fun d!12783 () Bool)

(declare-fun c!8435 () Bool)

(assert (=> d!12783 (= c!8435 (and ((_ is Cons!1425) (toList!691 lt!26027)) (= (_1!1027 (h!2008 (toList!691 lt!26027))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12783 (= (getValueByKey!127 (toList!691 lt!26027) #b1000000000000000000000000000000000000000000000000000000000000000) e!41272)))

(declare-fun b!62912 () Bool)

(declare-fun e!41273 () Option!133)

(assert (=> b!62912 (= e!41272 e!41273)))

(declare-fun c!8436 () Bool)

(assert (=> b!62912 (= c!8436 (and ((_ is Cons!1425) (toList!691 lt!26027)) (not (= (_1!1027 (h!2008 (toList!691 lt!26027))) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!62913 () Bool)

(assert (=> b!62913 (= e!41273 (getValueByKey!127 (t!4815 (toList!691 lt!26027)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62914 () Bool)

(assert (=> b!62914 (= e!41273 None!131)))

(assert (= (and d!12783 c!8435) b!62911))

(assert (= (and d!12783 (not c!8435)) b!62912))

(assert (= (and b!62912 c!8436) b!62913))

(assert (= (and b!62912 (not c!8436)) b!62914))

(declare-fun m!56625 () Bool)

(assert (=> b!62913 m!56625))

(assert (=> b!62805 d!12783))

(declare-fun bm!4967 () Bool)

(declare-fun call!4970 () ListLongMap!1351)

(assert (=> bm!4967 (= call!4970 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (ite c!8299 (ite c!8289 lt!25962 lt!25978) (extraKeys!1966 newMap!16)) (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)) (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2087 newMap!16)))))

(declare-fun b!62915 () Bool)

(declare-fun e!41274 () Bool)

(assert (=> b!62915 (= e!41274 (validKeyInArray!0 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!62915 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!62916 () Bool)

(declare-fun e!41278 () ListLongMap!1351)

(declare-fun e!41280 () ListLongMap!1351)

(assert (=> b!62916 (= e!41278 e!41280)))

(declare-fun c!8439 () Bool)

(assert (=> b!62916 (= c!8439 (validKeyInArray!0 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62917 () Bool)

(declare-fun e!41279 () Bool)

(declare-fun e!41277 () Bool)

(assert (=> b!62917 (= e!41279 e!41277)))

(assert (=> b!62917 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun res!34478 () Bool)

(declare-fun lt!26396 () ListLongMap!1351)

(assert (=> b!62917 (= res!34478 (contains!686 lt!26396 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!62917 (=> (not res!34478) (not e!41277))))

(declare-fun b!62918 () Bool)

(assert (=> b!62918 (= e!41278 (ListLongMap!1352 Nil!1426))))

(declare-fun b!62919 () Bool)

(declare-fun e!41275 () Bool)

(assert (=> b!62919 (= e!41279 e!41275)))

(declare-fun c!8438 () Bool)

(assert (=> b!62919 (= c!8438 (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun b!62920 () Bool)

(assert (=> b!62920 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(assert (=> b!62920 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (_values!2070 newMap!16))))))

(assert (=> b!62920 (= e!41277 (= (apply!68 lt!26396 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)) (get!1088 (select (arr!1791 (_values!2070 newMap!16)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!62921 () Bool)

(declare-fun e!41276 () Bool)

(assert (=> b!62921 (= e!41276 e!41279)))

(declare-fun c!8440 () Bool)

(assert (=> b!62921 (= c!8440 e!41274)))

(declare-fun res!34481 () Bool)

(assert (=> b!62921 (=> (not res!34481) (not e!41274))))

(assert (=> b!62921 (= res!34481 (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun b!62923 () Bool)

(assert (=> b!62923 (= e!41275 (= lt!26396 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (ite c!8299 (ite c!8289 lt!25962 lt!25978) (extraKeys!1966 newMap!16)) (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)) (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2087 newMap!16))))))

(declare-fun b!62924 () Bool)

(assert (=> b!62924 (= e!41280 call!4970)))

(declare-fun b!62925 () Bool)

(declare-fun lt!26398 () Unit!1680)

(declare-fun lt!26395 () Unit!1680)

(assert (=> b!62925 (= lt!26398 lt!26395)))

(declare-fun lt!26397 () (_ BitVec 64))

(declare-fun lt!26400 () ListLongMap!1351)

(declare-fun lt!26394 () (_ BitVec 64))

(declare-fun lt!26399 () V!2865)

(assert (=> b!62925 (not (contains!686 (+!82 lt!26400 (tuple2!2033 lt!26397 lt!26399)) lt!26394))))

(assert (=> b!62925 (= lt!26395 (addStillNotContains!19 lt!26400 lt!26397 lt!26399 lt!26394))))

(assert (=> b!62925 (= lt!26394 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!62925 (= lt!26399 (get!1088 (select (arr!1791 (_values!2070 newMap!16)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!62925 (= lt!26397 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!62925 (= lt!26400 call!4970)))

(assert (=> b!62925 (= e!41280 (+!82 call!4970 (tuple2!2033 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000) (get!1088 (select (arr!1791 (_values!2070 newMap!16)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!62926 () Bool)

(declare-fun res!34480 () Bool)

(assert (=> b!62926 (=> (not res!34480) (not e!41276))))

(assert (=> b!62926 (= res!34480 (not (contains!686 lt!26396 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!62922 () Bool)

(assert (=> b!62922 (= e!41275 (isEmpty!305 lt!26396))))

(declare-fun d!12785 () Bool)

(assert (=> d!12785 e!41276))

(declare-fun res!34479 () Bool)

(assert (=> d!12785 (=> (not res!34479) (not e!41276))))

(assert (=> d!12785 (= res!34479 (not (contains!686 lt!26396 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12785 (= lt!26396 e!41278)))

(declare-fun c!8437 () Bool)

(assert (=> d!12785 (= c!8437 (bvsge #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(assert (=> d!12785 (validMask!0 (mask!5993 newMap!16))))

(assert (=> d!12785 (= (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (ite c!8299 (ite c!8289 lt!25962 lt!25978) (extraKeys!1966 newMap!16)) (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)) (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) lt!26396)))

(assert (= (and d!12785 c!8437) b!62918))

(assert (= (and d!12785 (not c!8437)) b!62916))

(assert (= (and b!62916 c!8439) b!62925))

(assert (= (and b!62916 (not c!8439)) b!62924))

(assert (= (or b!62925 b!62924) bm!4967))

(assert (= (and d!12785 res!34479) b!62926))

(assert (= (and b!62926 res!34480) b!62921))

(assert (= (and b!62921 res!34481) b!62915))

(assert (= (and b!62921 c!8440) b!62917))

(assert (= (and b!62921 (not c!8440)) b!62919))

(assert (= (and b!62917 res!34478) b!62920))

(assert (= (and b!62919 c!8438) b!62923))

(assert (= (and b!62919 (not c!8438)) b!62922))

(declare-fun b_lambda!2813 () Bool)

(assert (=> (not b_lambda!2813) (not b!62920)))

(assert (=> b!62920 t!4828))

(declare-fun b_and!3845 () Bool)

(assert (= b_and!3841 (and (=> t!4828 result!2455) b_and!3845)))

(assert (=> b!62920 t!4830))

(declare-fun b_and!3847 () Bool)

(assert (= b_and!3843 (and (=> t!4830 result!2457) b_and!3847)))

(declare-fun b_lambda!2815 () Bool)

(assert (=> (not b_lambda!2815) (not b!62925)))

(assert (=> b!62925 t!4828))

(declare-fun b_and!3849 () Bool)

(assert (= b_and!3845 (and (=> t!4828 result!2455) b_and!3849)))

(assert (=> b!62925 t!4830))

(declare-fun b_and!3851 () Bool)

(assert (= b_and!3847 (and (=> t!4830 result!2457) b_and!3851)))

(assert (=> b!62920 m!56073))

(assert (=> b!62920 m!56033))

(declare-fun m!56627 () Bool)

(assert (=> b!62920 m!56627))

(assert (=> b!62920 m!56075))

(assert (=> b!62920 m!56073))

(assert (=> b!62920 m!56077))

(assert (=> b!62920 m!56033))

(assert (=> b!62920 m!56075))

(declare-fun m!56629 () Bool)

(assert (=> b!62925 m!56629))

(declare-fun m!56631 () Bool)

(assert (=> b!62925 m!56631))

(declare-fun m!56633 () Bool)

(assert (=> b!62925 m!56633))

(assert (=> b!62925 m!56075))

(assert (=> b!62925 m!56073))

(assert (=> b!62925 m!56077))

(declare-fun m!56635 () Bool)

(assert (=> b!62925 m!56635))

(assert (=> b!62925 m!56033))

(assert (=> b!62925 m!56075))

(assert (=> b!62925 m!56629))

(assert (=> b!62925 m!56073))

(declare-fun m!56637 () Bool)

(assert (=> b!62923 m!56637))

(declare-fun m!56639 () Bool)

(assert (=> b!62926 m!56639))

(declare-fun m!56641 () Bool)

(assert (=> b!62922 m!56641))

(assert (=> b!62916 m!56033))

(assert (=> b!62916 m!56033))

(assert (=> b!62916 m!56065))

(assert (=> bm!4967 m!56637))

(assert (=> b!62917 m!56033))

(assert (=> b!62917 m!56033))

(declare-fun m!56643 () Bool)

(assert (=> b!62917 m!56643))

(declare-fun m!56645 () Bool)

(assert (=> d!12785 m!56645))

(assert (=> d!12785 m!55995))

(assert (=> b!62915 m!56033))

(assert (=> b!62915 m!56033))

(assert (=> b!62915 m!56065))

(assert (=> bm!4915 d!12785))

(declare-fun d!12787 () Bool)

(assert (=> d!12787 (= (get!1090 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2418 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!62509 d!12787))

(declare-fun d!12789 () Bool)

(assert (=> d!12789 (= (size!2028 newMap!16) (bvadd (_size!366 newMap!16) (bvsdiv (bvadd (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010)))))

(assert (=> b!62553 d!12789))

(declare-fun d!12791 () Bool)

(assert (=> d!12791 (= (+!82 (getCurrentListMap!391 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!391 (_keys!3719 newMap!16) (array!3746 (store (arr!1791 (_values!2070 newMap!16)) (index!3018 lt!25967) (ValueCellFull!863 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2023 (_values!2070 newMap!16))) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(assert (=> d!12791 true))

(declare-fun _$5!68 () Unit!1680)

(assert (=> d!12791 (= (choose!344 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (index!3018 lt!25967) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2087 newMap!16)) _$5!68)))

(declare-fun bs!2735 () Bool)

(assert (= bs!2735 d!12791))

(assert (=> bs!2735 m!55895))

(assert (=> bs!2735 m!55895))

(assert (=> bs!2735 m!56413))

(assert (=> bs!2735 m!55865))

(assert (=> bs!2735 m!55861))

(assert (=> d!12757 d!12791))

(declare-fun d!12793 () Bool)

(assert (=> d!12793 (= (validMask!0 (mask!5993 newMap!16)) (and (or (= (mask!5993 newMap!16) #b00000000000000000000000000000111) (= (mask!5993 newMap!16) #b00000000000000000000000000001111) (= (mask!5993 newMap!16) #b00000000000000000000000000011111) (= (mask!5993 newMap!16) #b00000000000000000000000000111111) (= (mask!5993 newMap!16) #b00000000000000000000000001111111) (= (mask!5993 newMap!16) #b00000000000000000000000011111111) (= (mask!5993 newMap!16) #b00000000000000000000000111111111) (= (mask!5993 newMap!16) #b00000000000000000000001111111111) (= (mask!5993 newMap!16) #b00000000000000000000011111111111) (= (mask!5993 newMap!16) #b00000000000000000000111111111111) (= (mask!5993 newMap!16) #b00000000000000000001111111111111) (= (mask!5993 newMap!16) #b00000000000000000011111111111111) (= (mask!5993 newMap!16) #b00000000000000000111111111111111) (= (mask!5993 newMap!16) #b00000000000000001111111111111111) (= (mask!5993 newMap!16) #b00000000000000011111111111111111) (= (mask!5993 newMap!16) #b00000000000000111111111111111111) (= (mask!5993 newMap!16) #b00000000000001111111111111111111) (= (mask!5993 newMap!16) #b00000000000011111111111111111111) (= (mask!5993 newMap!16) #b00000000000111111111111111111111) (= (mask!5993 newMap!16) #b00000000001111111111111111111111) (= (mask!5993 newMap!16) #b00000000011111111111111111111111) (= (mask!5993 newMap!16) #b00000000111111111111111111111111) (= (mask!5993 newMap!16) #b00000001111111111111111111111111) (= (mask!5993 newMap!16) #b00000011111111111111111111111111) (= (mask!5993 newMap!16) #b00000111111111111111111111111111) (= (mask!5993 newMap!16) #b00001111111111111111111111111111) (= (mask!5993 newMap!16) #b00011111111111111111111111111111) (= (mask!5993 newMap!16) #b00111111111111111111111111111111)) (bvsle (mask!5993 newMap!16) #b00111111111111111111111111111111)))))

(assert (=> d!12757 d!12793))

(declare-fun lt!26403 () Bool)

(declare-fun d!12795 () Bool)

(declare-fun content!69 (List!1429) (InoxSet tuple2!2032))

(assert (=> d!12795 (= lt!26403 (select (content!69 (toList!691 lt!26349)) (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!41286 () Bool)

(assert (=> d!12795 (= lt!26403 e!41286)))

(declare-fun res!34486 () Bool)

(assert (=> d!12795 (=> (not res!34486) (not e!41286))))

(assert (=> d!12795 (= res!34486 ((_ is Cons!1425) (toList!691 lt!26349)))))

(assert (=> d!12795 (= (contains!689 (toList!691 lt!26349) (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!26403)))

(declare-fun b!62931 () Bool)

(declare-fun e!41285 () Bool)

(assert (=> b!62931 (= e!41286 e!41285)))

(declare-fun res!34487 () Bool)

(assert (=> b!62931 (=> res!34487 e!41285)))

(assert (=> b!62931 (= res!34487 (= (h!2008 (toList!691 lt!26349)) (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!62932 () Bool)

(assert (=> b!62932 (= e!41285 (contains!689 (t!4815 (toList!691 lt!26349)) (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!12795 res!34486) b!62931))

(assert (= (and b!62931 (not res!34487)) b!62932))

(declare-fun m!56647 () Bool)

(assert (=> d!12795 m!56647))

(declare-fun m!56649 () Bool)

(assert (=> d!12795 m!56649))

(declare-fun m!56651 () Bool)

(assert (=> b!62932 m!56651))

(assert (=> b!62802 d!12795))

(assert (=> d!12713 d!12793))

(assert (=> d!12719 d!12623))

(declare-fun d!12797 () Bool)

(assert (=> d!12797 (= (apply!68 lt!26362 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)) (get!1092 (getValueByKey!127 (toList!691 lt!26362) (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2736 () Bool)

(assert (= bs!2736 d!12797))

(assert (=> bs!2736 m!56033))

(declare-fun m!56653 () Bool)

(assert (=> bs!2736 m!56653))

(assert (=> bs!2736 m!56653))

(declare-fun m!56655 () Bool)

(assert (=> bs!2736 m!56655))

(assert (=> b!62843 d!12797))

(declare-fun d!12799 () Bool)

(declare-fun c!8441 () Bool)

(assert (=> d!12799 (= c!8441 ((_ is ValueCellFull!863) (select (arr!1791 (ite (or c!8299 c!8290) (_values!2070 newMap!16) lt!25974)) #b00000000000000000000000000000000)))))

(declare-fun e!41287 () V!2865)

(assert (=> d!12799 (= (get!1088 (select (arr!1791 (ite (or c!8299 c!8290) (_values!2070 newMap!16) lt!25974)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!41287)))

(declare-fun b!62933 () Bool)

(assert (=> b!62933 (= e!41287 (get!1090 (select (arr!1791 (ite (or c!8299 c!8290) (_values!2070 newMap!16) lt!25974)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!62934 () Bool)

(assert (=> b!62934 (= e!41287 (get!1091 (select (arr!1791 (ite (or c!8299 c!8290) (_values!2070 newMap!16) lt!25974)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12799 c!8441) b!62933))

(assert (= (and d!12799 (not c!8441)) b!62934))

(assert (=> b!62933 m!56575))

(assert (=> b!62933 m!56073))

(declare-fun m!56657 () Bool)

(assert (=> b!62933 m!56657))

(assert (=> b!62934 m!56575))

(assert (=> b!62934 m!56073))

(declare-fun m!56659 () Bool)

(assert (=> b!62934 m!56659))

(assert (=> b!62843 d!12799))

(declare-fun d!12801 () Bool)

(declare-fun e!41289 () Bool)

(assert (=> d!12801 e!41289))

(declare-fun res!34488 () Bool)

(assert (=> d!12801 (=> res!34488 e!41289)))

(declare-fun lt!26405 () Bool)

(assert (=> d!12801 (= res!34488 (not lt!26405))))

(declare-fun lt!26406 () Bool)

(assert (=> d!12801 (= lt!26405 lt!26406)))

(declare-fun lt!26404 () Unit!1680)

(declare-fun e!41288 () Unit!1680)

(assert (=> d!12801 (= lt!26404 e!41288)))

(declare-fun c!8442 () Bool)

(assert (=> d!12801 (= c!8442 lt!26406)))

(assert (=> d!12801 (= lt!26406 (containsKey!130 (toList!691 lt!26323) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12801 (= (contains!686 lt!26323 #b1000000000000000000000000000000000000000000000000000000000000000) lt!26405)))

(declare-fun b!62935 () Bool)

(declare-fun lt!26407 () Unit!1680)

(assert (=> b!62935 (= e!41288 lt!26407)))

(assert (=> b!62935 (= lt!26407 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 lt!26323) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62935 (isDefined!79 (getValueByKey!127 (toList!691 lt!26323) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62936 () Bool)

(declare-fun Unit!1707 () Unit!1680)

(assert (=> b!62936 (= e!41288 Unit!1707)))

(declare-fun b!62937 () Bool)

(assert (=> b!62937 (= e!41289 (isDefined!79 (getValueByKey!127 (toList!691 lt!26323) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12801 c!8442) b!62935))

(assert (= (and d!12801 (not c!8442)) b!62936))

(assert (= (and d!12801 (not res!34488)) b!62937))

(declare-fun m!56661 () Bool)

(assert (=> d!12801 m!56661))

(declare-fun m!56663 () Bool)

(assert (=> b!62935 m!56663))

(declare-fun m!56665 () Bool)

(assert (=> b!62935 m!56665))

(assert (=> b!62935 m!56665))

(declare-fun m!56667 () Bool)

(assert (=> b!62935 m!56667))

(assert (=> b!62937 m!56665))

(assert (=> b!62937 m!56665))

(assert (=> b!62937 m!56667))

(assert (=> bm!4941 d!12801))

(assert (=> b!62700 d!12655))

(declare-fun b!62938 () Bool)

(declare-fun e!41290 () Option!133)

(assert (=> b!62938 (= e!41290 (Some!132 (_2!1027 (h!2008 (toList!691 lt!26162)))))))

(declare-fun c!8443 () Bool)

(declare-fun d!12803 () Bool)

(assert (=> d!12803 (= c!8443 (and ((_ is Cons!1425) (toList!691 lt!26162)) (= (_1!1027 (h!2008 (toList!691 lt!26162))) (_1!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> d!12803 (= (getValueByKey!127 (toList!691 lt!26162) (_1!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) e!41290)))

(declare-fun b!62939 () Bool)

(declare-fun e!41291 () Option!133)

(assert (=> b!62939 (= e!41290 e!41291)))

(declare-fun c!8444 () Bool)

(assert (=> b!62939 (= c!8444 (and ((_ is Cons!1425) (toList!691 lt!26162)) (not (= (_1!1027 (h!2008 (toList!691 lt!26162))) (_1!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))))

(declare-fun b!62940 () Bool)

(assert (=> b!62940 (= e!41291 (getValueByKey!127 (t!4815 (toList!691 lt!26162)) (_1!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!62941 () Bool)

(assert (=> b!62941 (= e!41291 None!131)))

(assert (= (and d!12803 c!8443) b!62938))

(assert (= (and d!12803 (not c!8443)) b!62939))

(assert (= (and b!62939 c!8444) b!62940))

(assert (= (and b!62939 (not c!8444)) b!62941))

(declare-fun m!56669 () Bool)

(assert (=> b!62940 m!56669))

(assert (=> b!62623 d!12803))

(declare-fun d!12805 () Bool)

(declare-fun e!41292 () Bool)

(assert (=> d!12805 e!41292))

(declare-fun res!34489 () Bool)

(assert (=> d!12805 (=> (not res!34489) (not e!41292))))

(declare-fun lt!26409 () ListLongMap!1351)

(assert (=> d!12805 (= res!34489 (contains!686 lt!26409 (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!26410 () List!1429)

(assert (=> d!12805 (= lt!26409 (ListLongMap!1352 lt!26410))))

(declare-fun lt!26408 () Unit!1680)

(declare-fun lt!26411 () Unit!1680)

(assert (=> d!12805 (= lt!26408 lt!26411)))

(assert (=> d!12805 (= (getValueByKey!127 lt!26410 (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!132 (_2!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12805 (= lt!26411 (lemmaContainsTupThenGetReturnValue!44 lt!26410 (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12805 (= lt!26410 (insertStrictlySorted!47 (toList!691 (getCurrentListMap!391 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12805 (= (+!82 (getCurrentListMap!391 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26409)))

(declare-fun b!62942 () Bool)

(declare-fun res!34490 () Bool)

(assert (=> b!62942 (=> (not res!34490) (not e!41292))))

(assert (=> b!62942 (= res!34490 (= (getValueByKey!127 (toList!691 lt!26409) (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!132 (_2!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!62943 () Bool)

(assert (=> b!62943 (= e!41292 (contains!689 (toList!691 lt!26409) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12805 res!34489) b!62942))

(assert (= (and b!62942 res!34490) b!62943))

(declare-fun m!56671 () Bool)

(assert (=> d!12805 m!56671))

(declare-fun m!56673 () Bool)

(assert (=> d!12805 m!56673))

(declare-fun m!56675 () Bool)

(assert (=> d!12805 m!56675))

(declare-fun m!56677 () Bool)

(assert (=> d!12805 m!56677))

(declare-fun m!56679 () Bool)

(assert (=> b!62942 m!56679))

(declare-fun m!56681 () Bool)

(assert (=> b!62943 m!56681))

(assert (=> b!62800 d!12805))

(assert (=> b!62800 d!12661))

(assert (=> b!62800 d!12755))

(assert (=> b!62538 d!12623))

(declare-fun b!62945 () Bool)

(declare-fun res!34493 () Bool)

(declare-fun e!41293 () Bool)

(assert (=> b!62945 (=> (not res!34493) (not e!41293))))

(assert (=> b!62945 (= res!34493 (bvsge (size!2028 (v!2419 (underlying!233 thiss!992))) (_size!366 (v!2419 (underlying!233 thiss!992)))))))

(declare-fun b!62947 () Bool)

(assert (=> b!62947 (= e!41293 (and (bvsge (extraKeys!1966 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000000) (bvsle (extraKeys!1966 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000011) (bvsge (_vacant!366 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000000)))))

(declare-fun b!62944 () Bool)

(declare-fun res!34492 () Bool)

(assert (=> b!62944 (=> (not res!34492) (not e!41293))))

(assert (=> b!62944 (= res!34492 (and (= (size!2023 (_values!2070 (v!2419 (underlying!233 thiss!992)))) (bvadd (mask!5993 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000001)) (= (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (size!2023 (_values!2070 (v!2419 (underlying!233 thiss!992))))) (bvsge (_size!366 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000000) (bvsle (_size!366 (v!2419 (underlying!233 thiss!992))) (bvadd (mask!5993 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000001))))))

(declare-fun b!62946 () Bool)

(declare-fun res!34491 () Bool)

(assert (=> b!62946 (=> (not res!34491) (not e!41293))))

(assert (=> b!62946 (= res!34491 (= (size!2028 (v!2419 (underlying!233 thiss!992))) (bvadd (_size!366 (v!2419 (underlying!233 thiss!992))) (bvsdiv (bvadd (extraKeys!1966 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun d!12807 () Bool)

(declare-fun res!34494 () Bool)

(assert (=> d!12807 (=> (not res!34494) (not e!41293))))

(assert (=> d!12807 (= res!34494 (validMask!0 (mask!5993 (v!2419 (underlying!233 thiss!992)))))))

(assert (=> d!12807 (= (simpleValid!44 (v!2419 (underlying!233 thiss!992))) e!41293)))

(assert (= (and d!12807 res!34494) b!62944))

(assert (= (and b!62944 res!34492) b!62945))

(assert (= (and b!62945 res!34493) b!62946))

(assert (= (and b!62946 res!34491) b!62947))

(declare-fun m!56683 () Bool)

(assert (=> b!62945 m!56683))

(assert (=> b!62946 m!56683))

(assert (=> d!12807 m!55695))

(assert (=> d!12737 d!12807))

(declare-fun d!12809 () Bool)

(assert (=> d!12809 (isDefined!79 (getValueByKey!127 (toList!691 (+!82 lt!26045 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26035))))

(declare-fun lt!26412 () Unit!1680)

(assert (=> d!12809 (= lt!26412 (choose!341 (toList!691 (+!82 lt!26045 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26035))))

(declare-fun e!41294 () Bool)

(assert (=> d!12809 e!41294))

(declare-fun res!34495 () Bool)

(assert (=> d!12809 (=> (not res!34495) (not e!41294))))

(assert (=> d!12809 (= res!34495 (isStrictlySorted!273 (toList!691 (+!82 lt!26045 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> d!12809 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 (+!82 lt!26045 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26035) lt!26412)))

(declare-fun b!62948 () Bool)

(assert (=> b!62948 (= e!41294 (containsKey!130 (toList!691 (+!82 lt!26045 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26035))))

(assert (= (and d!12809 res!34495) b!62948))

(assert (=> d!12809 m!56205))

(assert (=> d!12809 m!56205))

(assert (=> d!12809 m!56207))

(declare-fun m!56685 () Bool)

(assert (=> d!12809 m!56685))

(declare-fun m!56687 () Bool)

(assert (=> d!12809 m!56687))

(assert (=> b!62948 m!56201))

(assert (=> b!62620 d!12809))

(declare-fun d!12811 () Bool)

(assert (=> d!12811 (= (isDefined!79 (getValueByKey!127 (toList!691 (+!82 lt!26045 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26035)) (not (isEmpty!306 (getValueByKey!127 (toList!691 (+!82 lt!26045 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26035))))))

(declare-fun bs!2737 () Bool)

(assert (= bs!2737 d!12811))

(assert (=> bs!2737 m!56205))

(declare-fun m!56689 () Bool)

(assert (=> bs!2737 m!56689))

(assert (=> b!62620 d!12811))

(declare-fun b!62949 () Bool)

(declare-fun e!41295 () Option!133)

(assert (=> b!62949 (= e!41295 (Some!132 (_2!1027 (h!2008 (toList!691 (+!82 lt!26045 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))))))))

(declare-fun c!8445 () Bool)

(declare-fun d!12813 () Bool)

(assert (=> d!12813 (= c!8445 (and ((_ is Cons!1425) (toList!691 (+!82 lt!26045 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))) (= (_1!1027 (h!2008 (toList!691 (+!82 lt!26045 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))) lt!26035)))))

(assert (=> d!12813 (= (getValueByKey!127 (toList!691 (+!82 lt!26045 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26035) e!41295)))

(declare-fun b!62950 () Bool)

(declare-fun e!41296 () Option!133)

(assert (=> b!62950 (= e!41295 e!41296)))

(declare-fun c!8446 () Bool)

(assert (=> b!62950 (= c!8446 (and ((_ is Cons!1425) (toList!691 (+!82 lt!26045 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))) (not (= (_1!1027 (h!2008 (toList!691 (+!82 lt!26045 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))) lt!26035))))))

(declare-fun b!62951 () Bool)

(assert (=> b!62951 (= e!41296 (getValueByKey!127 (t!4815 (toList!691 (+!82 lt!26045 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))) lt!26035))))

(declare-fun b!62952 () Bool)

(assert (=> b!62952 (= e!41296 None!131)))

(assert (= (and d!12813 c!8445) b!62949))

(assert (= (and d!12813 (not c!8445)) b!62950))

(assert (= (and b!62950 c!8446) b!62951))

(assert (= (and b!62950 (not c!8446)) b!62952))

(declare-fun m!56691 () Bool)

(assert (=> b!62951 m!56691))

(assert (=> b!62620 d!12813))

(declare-fun d!12815 () Bool)

(assert (=> d!12815 (= (isDefined!79 (getValueByKey!127 (toList!691 lt!26027) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!306 (getValueByKey!127 (toList!691 lt!26027) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!2738 () Bool)

(assert (= bs!2738 d!12815))

(assert (=> bs!2738 m!56005))

(declare-fun m!56693 () Bool)

(assert (=> bs!2738 m!56693))

(assert (=> b!62500 d!12815))

(declare-fun b!62953 () Bool)

(declare-fun e!41297 () Option!133)

(assert (=> b!62953 (= e!41297 (Some!132 (_2!1027 (h!2008 (toList!691 lt!26027)))))))

(declare-fun d!12817 () Bool)

(declare-fun c!8447 () Bool)

(assert (=> d!12817 (= c!8447 (and ((_ is Cons!1425) (toList!691 lt!26027)) (= (_1!1027 (h!2008 (toList!691 lt!26027))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12817 (= (getValueByKey!127 (toList!691 lt!26027) #b0000000000000000000000000000000000000000000000000000000000000000) e!41297)))

(declare-fun b!62954 () Bool)

(declare-fun e!41298 () Option!133)

(assert (=> b!62954 (= e!41297 e!41298)))

(declare-fun c!8448 () Bool)

(assert (=> b!62954 (= c!8448 (and ((_ is Cons!1425) (toList!691 lt!26027)) (not (= (_1!1027 (h!2008 (toList!691 lt!26027))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!62955 () Bool)

(assert (=> b!62955 (= e!41298 (getValueByKey!127 (t!4815 (toList!691 lt!26027)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62956 () Bool)

(assert (=> b!62956 (= e!41298 None!131)))

(assert (= (and d!12817 c!8447) b!62953))

(assert (= (and d!12817 (not c!8447)) b!62954))

(assert (= (and b!62954 c!8448) b!62955))

(assert (= (and b!62954 (not c!8448)) b!62956))

(declare-fun m!56695 () Bool)

(assert (=> b!62955 m!56695))

(assert (=> b!62500 d!12817))

(declare-fun d!12819 () Bool)

(declare-fun res!34497 () Bool)

(declare-fun e!41302 () Bool)

(assert (=> d!12819 (=> res!34497 e!41302)))

(assert (=> d!12819 (= res!34497 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2022 (_keys!3719 newMap!16))))))

(assert (=> d!12819 (= (arrayNoDuplicates!0 (_keys!3719 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!8411 (Cons!1426 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000) Nil!1427) Nil!1427)) e!41302)))

(declare-fun b!62957 () Bool)

(declare-fun e!41300 () Bool)

(declare-fun call!4971 () Bool)

(assert (=> b!62957 (= e!41300 call!4971)))

(declare-fun b!62958 () Bool)

(declare-fun e!41299 () Bool)

(assert (=> b!62958 (= e!41299 (contains!688 (ite c!8411 (Cons!1426 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000) Nil!1427) Nil!1427) (select (arr!1790 (_keys!3719 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!62959 () Bool)

(declare-fun e!41301 () Bool)

(assert (=> b!62959 (= e!41301 e!41300)))

(declare-fun c!8449 () Bool)

(assert (=> b!62959 (= c!8449 (validKeyInArray!0 (select (arr!1790 (_keys!3719 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun bm!4968 () Bool)

(assert (=> bm!4968 (= call!4971 (arrayNoDuplicates!0 (_keys!3719 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!8449 (Cons!1426 (select (arr!1790 (_keys!3719 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (ite c!8411 (Cons!1426 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000) Nil!1427) Nil!1427)) (ite c!8411 (Cons!1426 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000) Nil!1427) Nil!1427))))))

(declare-fun b!62960 () Bool)

(assert (=> b!62960 (= e!41300 call!4971)))

(declare-fun b!62961 () Bool)

(assert (=> b!62961 (= e!41302 e!41301)))

(declare-fun res!34498 () Bool)

(assert (=> b!62961 (=> (not res!34498) (not e!41301))))

(assert (=> b!62961 (= res!34498 (not e!41299))))

(declare-fun res!34496 () Bool)

(assert (=> b!62961 (=> (not res!34496) (not e!41299))))

(assert (=> b!62961 (= res!34496 (validKeyInArray!0 (select (arr!1790 (_keys!3719 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (= (and d!12819 (not res!34497)) b!62961))

(assert (= (and b!62961 res!34496) b!62958))

(assert (= (and b!62961 res!34498) b!62959))

(assert (= (and b!62959 c!8449) b!62960))

(assert (= (and b!62959 (not c!8449)) b!62957))

(assert (= (or b!62960 b!62957) bm!4968))

(declare-fun m!56697 () Bool)

(assert (=> b!62958 m!56697))

(assert (=> b!62958 m!56697))

(declare-fun m!56699 () Bool)

(assert (=> b!62958 m!56699))

(assert (=> b!62959 m!56697))

(assert (=> b!62959 m!56697))

(declare-fun m!56701 () Bool)

(assert (=> b!62959 m!56701))

(assert (=> bm!4968 m!56697))

(declare-fun m!56703 () Bool)

(assert (=> bm!4968 m!56703))

(assert (=> b!62961 m!56697))

(assert (=> b!62961 m!56697))

(assert (=> b!62961 m!56701))

(assert (=> bm!4950 d!12819))

(declare-fun d!12821 () Bool)

(assert (=> d!12821 (= (apply!68 lt!26323 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1092 (getValueByKey!127 (toList!691 lt!26323) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2739 () Bool)

(assert (= bs!2739 d!12821))

(declare-fun m!56705 () Bool)

(assert (=> bs!2739 m!56705))

(assert (=> bs!2739 m!56705))

(declare-fun m!56707 () Bool)

(assert (=> bs!2739 m!56707))

(assert (=> b!62783 d!12821))

(assert (=> b!62755 d!12711))

(declare-fun b!62962 () Bool)

(declare-fun e!41303 () Option!133)

(assert (=> b!62962 (= e!41303 (Some!132 (_2!1027 (h!2008 (toList!691 lt!26121)))))))

(declare-fun c!8450 () Bool)

(declare-fun d!12823 () Bool)

(assert (=> d!12823 (= c!8450 (and ((_ is Cons!1425) (toList!691 lt!26121)) (= (_1!1027 (h!2008 (toList!691 lt!26121))) (_1!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> d!12823 (= (getValueByKey!127 (toList!691 lt!26121) (_1!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))) e!41303)))

(declare-fun b!62963 () Bool)

(declare-fun e!41304 () Option!133)

(assert (=> b!62963 (= e!41303 e!41304)))

(declare-fun c!8451 () Bool)

(assert (=> b!62963 (= c!8451 (and ((_ is Cons!1425) (toList!691 lt!26121)) (not (= (_1!1027 (h!2008 (toList!691 lt!26121))) (_1!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))))))

(declare-fun b!62964 () Bool)

(assert (=> b!62964 (= e!41304 (getValueByKey!127 (t!4815 (toList!691 lt!26121)) (_1!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!62965 () Bool)

(assert (=> b!62965 (= e!41304 None!131)))

(assert (= (and d!12823 c!8450) b!62962))

(assert (= (and d!12823 (not c!8450)) b!62963))

(assert (= (and b!62963 c!8451) b!62964))

(assert (= (and b!62963 (not c!8451)) b!62965))

(declare-fun m!56709 () Bool)

(assert (=> b!62964 m!56709))

(assert (=> b!62573 d!12823))

(declare-fun d!12825 () Bool)

(declare-fun e!41305 () Bool)

(assert (=> d!12825 e!41305))

(declare-fun res!34499 () Bool)

(assert (=> d!12825 (=> (not res!34499) (not e!41305))))

(declare-fun lt!26414 () ListLongMap!1351)

(assert (=> d!12825 (= res!34499 (contains!686 lt!26414 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!26415 () List!1429)

(assert (=> d!12825 (= lt!26414 (ListLongMap!1352 lt!26415))))

(declare-fun lt!26413 () Unit!1680)

(declare-fun lt!26416 () Unit!1680)

(assert (=> d!12825 (= lt!26413 lt!26416)))

(assert (=> d!12825 (= (getValueByKey!127 lt!26415 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!132 (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12825 (= lt!26416 (lemmaContainsTupThenGetReturnValue!44 lt!26415 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12825 (= lt!26415 (insertStrictlySorted!47 (toList!691 (getCurrentListMap!391 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12825 (= (+!82 (getCurrentListMap!391 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26414)))

(declare-fun b!62966 () Bool)

(declare-fun res!34500 () Bool)

(assert (=> b!62966 (=> (not res!34500) (not e!41305))))

(assert (=> b!62966 (= res!34500 (= (getValueByKey!127 (toList!691 lt!26414) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!132 (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!62967 () Bool)

(assert (=> b!62967 (= e!41305 (contains!689 (toList!691 lt!26414) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12825 res!34499) b!62966))

(assert (= (and b!62966 res!34500) b!62967))

(declare-fun m!56711 () Bool)

(assert (=> d!12825 m!56711))

(declare-fun m!56713 () Bool)

(assert (=> d!12825 m!56713))

(declare-fun m!56715 () Bool)

(assert (=> d!12825 m!56715))

(declare-fun m!56717 () Bool)

(assert (=> d!12825 m!56717))

(declare-fun m!56719 () Bool)

(assert (=> b!62966 m!56719))

(declare-fun m!56721 () Bool)

(assert (=> b!62967 m!56721))

(assert (=> d!12739 d!12825))

(assert (=> d!12739 d!12661))

(declare-fun b!62968 () Bool)

(declare-fun e!41313 () ListLongMap!1351)

(declare-fun call!4978 () ListLongMap!1351)

(assert (=> b!62968 (= e!41313 call!4978)))

(declare-fun b!62970 () Bool)

(declare-fun e!41316 () Bool)

(declare-fun e!41314 () Bool)

(assert (=> b!62970 (= e!41316 e!41314)))

(declare-fun res!34504 () Bool)

(declare-fun call!4973 () Bool)

(assert (=> b!62970 (= res!34504 call!4973)))

(assert (=> b!62970 (=> (not res!34504) (not e!41314))))

(declare-fun b!62971 () Bool)

(declare-fun e!41310 () Bool)

(assert (=> b!62971 (= e!41310 (validKeyInArray!0 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun call!4972 () ListLongMap!1351)

(declare-fun c!8456 () Bool)

(declare-fun call!4976 () ListLongMap!1351)

(declare-fun call!4975 () ListLongMap!1351)

(declare-fun call!4974 () ListLongMap!1351)

(declare-fun c!8454 () Bool)

(declare-fun bm!4969 () Bool)

(assert (=> bm!4969 (= call!4974 (+!82 (ite c!8454 call!4976 (ite c!8456 call!4972 call!4975)) (ite (or c!8454 c!8456) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!62972 () Bool)

(assert (=> b!62972 (= e!41316 (not call!4973))))

(declare-fun b!62973 () Bool)

(declare-fun e!41307 () ListLongMap!1351)

(assert (=> b!62973 (= e!41307 call!4978)))

(declare-fun b!62974 () Bool)

(declare-fun e!41306 () Bool)

(declare-fun lt!26417 () ListLongMap!1351)

(assert (=> b!62974 (= e!41306 (= (apply!68 lt!26417 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1999 newMap!16)))))

(declare-fun b!62975 () Bool)

(assert (=> b!62975 (= e!41314 (= (apply!68 lt!26417 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bm!4970 () Bool)

(assert (=> bm!4970 (= call!4976 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) lt!25978 (zeroValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun b!62976 () Bool)

(declare-fun e!41312 () Bool)

(assert (=> b!62976 (= e!41312 (= (apply!68 lt!26417 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)) (get!1088 (select (arr!1791 (_values!2070 newMap!16)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62976 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (_values!2070 newMap!16))))))

(assert (=> b!62976 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun b!62977 () Bool)

(declare-fun e!41309 () Unit!1680)

(declare-fun lt!26428 () Unit!1680)

(assert (=> b!62977 (= e!41309 lt!26428)))

(declare-fun lt!26435 () ListLongMap!1351)

(assert (=> b!62977 (= lt!26435 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) lt!25978 (zeroValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26431 () (_ BitVec 64))

(assert (=> b!62977 (= lt!26431 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26425 () (_ BitVec 64))

(assert (=> b!62977 (= lt!26425 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26437 () Unit!1680)

(assert (=> b!62977 (= lt!26437 (addStillContains!44 lt!26435 lt!26431 (zeroValue!1999 newMap!16) lt!26425))))

(assert (=> b!62977 (contains!686 (+!82 lt!26435 (tuple2!2033 lt!26431 (zeroValue!1999 newMap!16))) lt!26425)))

(declare-fun lt!26418 () Unit!1680)

(assert (=> b!62977 (= lt!26418 lt!26437)))

(declare-fun lt!26424 () ListLongMap!1351)

(assert (=> b!62977 (= lt!26424 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) lt!25978 (zeroValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26432 () (_ BitVec 64))

(assert (=> b!62977 (= lt!26432 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26423 () (_ BitVec 64))

(assert (=> b!62977 (= lt!26423 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26426 () Unit!1680)

(assert (=> b!62977 (= lt!26426 (addApplyDifferent!44 lt!26424 lt!26432 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!26423))))

(assert (=> b!62977 (= (apply!68 (+!82 lt!26424 (tuple2!2033 lt!26432 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26423) (apply!68 lt!26424 lt!26423))))

(declare-fun lt!26420 () Unit!1680)

(assert (=> b!62977 (= lt!26420 lt!26426)))

(declare-fun lt!26438 () ListLongMap!1351)

(assert (=> b!62977 (= lt!26438 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) lt!25978 (zeroValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26434 () (_ BitVec 64))

(assert (=> b!62977 (= lt!26434 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26421 () (_ BitVec 64))

(assert (=> b!62977 (= lt!26421 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26430 () Unit!1680)

(assert (=> b!62977 (= lt!26430 (addApplyDifferent!44 lt!26438 lt!26434 (zeroValue!1999 newMap!16) lt!26421))))

(assert (=> b!62977 (= (apply!68 (+!82 lt!26438 (tuple2!2033 lt!26434 (zeroValue!1999 newMap!16))) lt!26421) (apply!68 lt!26438 lt!26421))))

(declare-fun lt!26427 () Unit!1680)

(assert (=> b!62977 (= lt!26427 lt!26430)))

(declare-fun lt!26433 () ListLongMap!1351)

(assert (=> b!62977 (= lt!26433 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) lt!25978 (zeroValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26422 () (_ BitVec 64))

(assert (=> b!62977 (= lt!26422 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26436 () (_ BitVec 64))

(assert (=> b!62977 (= lt!26436 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!62977 (= lt!26428 (addApplyDifferent!44 lt!26433 lt!26422 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!26436))))

(assert (=> b!62977 (= (apply!68 (+!82 lt!26433 (tuple2!2033 lt!26422 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26436) (apply!68 lt!26433 lt!26436))))

(declare-fun b!62978 () Bool)

(declare-fun e!41315 () Bool)

(assert (=> b!62978 (= e!41315 (validKeyInArray!0 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62979 () Bool)

(declare-fun e!41317 () Bool)

(assert (=> b!62979 (= e!41317 e!41316)))

(declare-fun c!8455 () Bool)

(assert (=> b!62979 (= c!8455 (not (= (bvand lt!25978 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!62980 () Bool)

(declare-fun e!41308 () Bool)

(declare-fun call!4977 () Bool)

(assert (=> b!62980 (= e!41308 (not call!4977))))

(declare-fun b!62981 () Bool)

(declare-fun e!41318 () Bool)

(assert (=> b!62981 (= e!41318 e!41312)))

(declare-fun res!34503 () Bool)

(assert (=> b!62981 (=> (not res!34503) (not e!41312))))

(assert (=> b!62981 (= res!34503 (contains!686 lt!26417 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!62981 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun d!12827 () Bool)

(assert (=> d!12827 e!41317))

(declare-fun res!34508 () Bool)

(assert (=> d!12827 (=> (not res!34508) (not e!41317))))

(assert (=> d!12827 (= res!34508 (or (bvsge #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))))

(declare-fun lt!26419 () ListLongMap!1351)

(assert (=> d!12827 (= lt!26417 lt!26419)))

(declare-fun lt!26429 () Unit!1680)

(assert (=> d!12827 (= lt!26429 e!41309)))

(declare-fun c!8457 () Bool)

(assert (=> d!12827 (= c!8457 e!41310)))

(declare-fun res!34505 () Bool)

(assert (=> d!12827 (=> (not res!34505) (not e!41310))))

(assert (=> d!12827 (= res!34505 (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun e!41311 () ListLongMap!1351)

(assert (=> d!12827 (= lt!26419 e!41311)))

(assert (=> d!12827 (= c!8454 (and (not (= (bvand lt!25978 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!25978 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12827 (validMask!0 (mask!5993 newMap!16))))

(assert (=> d!12827 (= (getCurrentListMap!391 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) lt!25978 (zeroValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) lt!26417)))

(declare-fun b!62969 () Bool)

(assert (=> b!62969 (= e!41311 (+!82 call!4974 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun bm!4971 () Bool)

(assert (=> bm!4971 (= call!4972 call!4976)))

(declare-fun b!62982 () Bool)

(assert (=> b!62982 (= e!41308 e!41306)))

(declare-fun res!34501 () Bool)

(assert (=> b!62982 (= res!34501 call!4977)))

(assert (=> b!62982 (=> (not res!34501) (not e!41306))))

(declare-fun b!62983 () Bool)

(declare-fun c!8453 () Bool)

(assert (=> b!62983 (= c!8453 (and (not (= (bvand lt!25978 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!25978 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!62983 (= e!41307 e!41313)))

(declare-fun bm!4972 () Bool)

(assert (=> bm!4972 (= call!4975 call!4972)))

(declare-fun bm!4973 () Bool)

(assert (=> bm!4973 (= call!4973 (contains!686 lt!26417 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4974 () Bool)

(assert (=> bm!4974 (= call!4977 (contains!686 lt!26417 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62984 () Bool)

(declare-fun res!34506 () Bool)

(assert (=> b!62984 (=> (not res!34506) (not e!41317))))

(assert (=> b!62984 (= res!34506 e!41318)))

(declare-fun res!34509 () Bool)

(assert (=> b!62984 (=> res!34509 e!41318)))

(assert (=> b!62984 (= res!34509 (not e!41315))))

(declare-fun res!34507 () Bool)

(assert (=> b!62984 (=> (not res!34507) (not e!41315))))

(assert (=> b!62984 (= res!34507 (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun b!62985 () Bool)

(declare-fun Unit!1708 () Unit!1680)

(assert (=> b!62985 (= e!41309 Unit!1708)))

(declare-fun b!62986 () Bool)

(assert (=> b!62986 (= e!41313 call!4975)))

(declare-fun bm!4975 () Bool)

(assert (=> bm!4975 (= call!4978 call!4974)))

(declare-fun b!62987 () Bool)

(declare-fun res!34502 () Bool)

(assert (=> b!62987 (=> (not res!34502) (not e!41317))))

(assert (=> b!62987 (= res!34502 e!41308)))

(declare-fun c!8452 () Bool)

(assert (=> b!62987 (= c!8452 (not (= (bvand lt!25978 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!62988 () Bool)

(assert (=> b!62988 (= e!41311 e!41307)))

(assert (=> b!62988 (= c!8456 (and (not (= (bvand lt!25978 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!25978 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!12827 c!8454) b!62969))

(assert (= (and d!12827 (not c!8454)) b!62988))

(assert (= (and b!62988 c!8456) b!62973))

(assert (= (and b!62988 (not c!8456)) b!62983))

(assert (= (and b!62983 c!8453) b!62968))

(assert (= (and b!62983 (not c!8453)) b!62986))

(assert (= (or b!62968 b!62986) bm!4972))

(assert (= (or b!62973 bm!4972) bm!4971))

(assert (= (or b!62973 b!62968) bm!4975))

(assert (= (or b!62969 bm!4971) bm!4970))

(assert (= (or b!62969 bm!4975) bm!4969))

(assert (= (and d!12827 res!34505) b!62971))

(assert (= (and d!12827 c!8457) b!62977))

(assert (= (and d!12827 (not c!8457)) b!62985))

(assert (= (and d!12827 res!34508) b!62984))

(assert (= (and b!62984 res!34507) b!62978))

(assert (= (and b!62984 (not res!34509)) b!62981))

(assert (= (and b!62981 res!34503) b!62976))

(assert (= (and b!62984 res!34506) b!62987))

(assert (= (and b!62987 c!8452) b!62982))

(assert (= (and b!62987 (not c!8452)) b!62980))

(assert (= (and b!62982 res!34501) b!62974))

(assert (= (or b!62982 b!62980) bm!4974))

(assert (= (and b!62987 res!34502) b!62979))

(assert (= (and b!62979 c!8455) b!62970))

(assert (= (and b!62979 (not c!8455)) b!62972))

(assert (= (and b!62970 res!34504) b!62975))

(assert (= (or b!62970 b!62972) bm!4973))

(declare-fun b_lambda!2817 () Bool)

(assert (=> (not b_lambda!2817) (not b!62976)))

(assert (=> b!62976 t!4828))

(declare-fun b_and!3853 () Bool)

(assert (= b_and!3849 (and (=> t!4828 result!2455) b_and!3853)))

(assert (=> b!62976 t!4830))

(declare-fun b_and!3855 () Bool)

(assert (= b_and!3851 (and (=> t!4830 result!2457) b_and!3855)))

(declare-fun m!56723 () Bool)

(assert (=> b!62977 m!56723))

(declare-fun m!56725 () Bool)

(assert (=> b!62977 m!56725))

(assert (=> b!62977 m!56723))

(declare-fun m!56727 () Bool)

(assert (=> b!62977 m!56727))

(assert (=> b!62977 m!56033))

(declare-fun m!56729 () Bool)

(assert (=> b!62977 m!56729))

(declare-fun m!56731 () Bool)

(assert (=> b!62977 m!56731))

(declare-fun m!56733 () Bool)

(assert (=> b!62977 m!56733))

(declare-fun m!56735 () Bool)

(assert (=> b!62977 m!56735))

(declare-fun m!56737 () Bool)

(assert (=> b!62977 m!56737))

(declare-fun m!56739 () Bool)

(assert (=> b!62977 m!56739))

(assert (=> b!62977 m!55701))

(declare-fun m!56741 () Bool)

(assert (=> b!62977 m!56741))

(declare-fun m!56743 () Bool)

(assert (=> b!62977 m!56743))

(assert (=> b!62977 m!55701))

(declare-fun m!56745 () Bool)

(assert (=> b!62977 m!56745))

(assert (=> b!62977 m!56733))

(declare-fun m!56747 () Bool)

(assert (=> b!62977 m!56747))

(declare-fun m!56749 () Bool)

(assert (=> b!62977 m!56749))

(assert (=> b!62977 m!55701))

(declare-fun m!56751 () Bool)

(assert (=> b!62977 m!56751))

(assert (=> b!62977 m!56747))

(assert (=> b!62977 m!56737))

(declare-fun m!56753 () Bool)

(assert (=> b!62977 m!56753))

(declare-fun m!56755 () Bool)

(assert (=> b!62974 m!56755))

(assert (=> b!62981 m!56033))

(assert (=> b!62981 m!56033))

(declare-fun m!56757 () Bool)

(assert (=> b!62981 m!56757))

(assert (=> b!62978 m!56033))

(assert (=> b!62978 m!56033))

(assert (=> b!62978 m!56065))

(declare-fun m!56759 () Bool)

(assert (=> bm!4974 m!56759))

(declare-fun m!56761 () Bool)

(assert (=> b!62969 m!56761))

(assert (=> d!12827 m!55995))

(declare-fun m!56763 () Bool)

(assert (=> bm!4969 m!56763))

(assert (=> b!62976 m!56073))

(assert (=> b!62976 m!56075))

(assert (=> b!62976 m!56033))

(assert (=> b!62976 m!56075))

(assert (=> b!62976 m!56073))

(assert (=> b!62976 m!56077))

(assert (=> b!62976 m!56033))

(declare-fun m!56765 () Bool)

(assert (=> b!62976 m!56765))

(declare-fun m!56767 () Bool)

(assert (=> b!62975 m!56767))

(assert (=> bm!4970 m!55701))

(assert (=> bm!4970 m!56745))

(assert (=> b!62971 m!56033))

(assert (=> b!62971 m!56033))

(assert (=> b!62971 m!56065))

(declare-fun m!56769 () Bool)

(assert (=> bm!4973 m!56769))

(assert (=> d!12739 d!12827))

(assert (=> d!12739 d!12793))

(declare-fun d!12829 () Bool)

(assert (=> d!12829 (= (+!82 (getCurrentListMap!391 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!391 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) lt!25978 (zeroValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(assert (=> d!12829 true))

(declare-fun _$8!52 () Unit!1680)

(assert (=> d!12829 (= (choose!342 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) lt!25978 (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2087 newMap!16)) _$8!52)))

(declare-fun bs!2740 () Bool)

(assert (= bs!2740 d!12829))

(assert (=> bs!2740 m!55895))

(assert (=> bs!2740 m!55895))

(assert (=> bs!2740 m!56363))

(assert (=> bs!2740 m!55701))

(assert (=> bs!2740 m!56367))

(assert (=> d!12739 d!12829))

(declare-fun d!12831 () Bool)

(assert (=> d!12831 (= (validKeyInArray!0 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)) (and (not (= (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62780 d!12831))

(declare-fun d!12833 () Bool)

(declare-fun e!41320 () Bool)

(assert (=> d!12833 e!41320))

(declare-fun res!34510 () Bool)

(assert (=> d!12833 (=> res!34510 e!41320)))

(declare-fun lt!26440 () Bool)

(assert (=> d!12833 (= res!34510 (not lt!26440))))

(declare-fun lt!26441 () Bool)

(assert (=> d!12833 (= lt!26440 lt!26441)))

(declare-fun lt!26439 () Unit!1680)

(declare-fun e!41319 () Unit!1680)

(assert (=> d!12833 (= lt!26439 e!41319)))

(declare-fun c!8458 () Bool)

(assert (=> d!12833 (= c!8458 lt!26441)))

(assert (=> d!12833 (= lt!26441 (containsKey!130 (toList!691 lt!26146) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!12833 (= (contains!686 lt!26146 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!26440)))

(declare-fun b!62989 () Bool)

(declare-fun lt!26442 () Unit!1680)

(assert (=> b!62989 (= e!41319 lt!26442)))

(assert (=> b!62989 (= lt!26442 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 lt!26146) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!62989 (isDefined!79 (getValueByKey!127 (toList!691 lt!26146) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!62990 () Bool)

(declare-fun Unit!1709 () Unit!1680)

(assert (=> b!62990 (= e!41319 Unit!1709)))

(declare-fun b!62991 () Bool)

(assert (=> b!62991 (= e!41320 (isDefined!79 (getValueByKey!127 (toList!691 lt!26146) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!12833 c!8458) b!62989))

(assert (= (and d!12833 (not c!8458)) b!62990))

(assert (= (and d!12833 (not res!34510)) b!62991))

(assert (=> d!12833 m!55903))

(declare-fun m!56771 () Bool)

(assert (=> d!12833 m!56771))

(assert (=> b!62989 m!55903))

(declare-fun m!56773 () Bool)

(assert (=> b!62989 m!56773))

(assert (=> b!62989 m!55903))

(declare-fun m!56775 () Bool)

(assert (=> b!62989 m!56775))

(assert (=> b!62989 m!56775))

(declare-fun m!56777 () Bool)

(assert (=> b!62989 m!56777))

(assert (=> b!62991 m!55903))

(assert (=> b!62991 m!56775))

(assert (=> b!62991 m!56775))

(assert (=> b!62991 m!56777))

(assert (=> b!62606 d!12833))

(declare-fun d!12835 () Bool)

(assert (=> d!12835 (= (get!1092 (getValueByKey!127 (toList!691 (+!82 lt!26034 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26033)) (v!2425 (getValueByKey!127 (toList!691 (+!82 lt!26034 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26033)))))

(assert (=> d!12697 d!12835))

(declare-fun e!41321 () Option!133)

(declare-fun b!62992 () Bool)

(assert (=> b!62992 (= e!41321 (Some!132 (_2!1027 (h!2008 (toList!691 (+!82 lt!26034 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))))

(declare-fun c!8459 () Bool)

(declare-fun d!12837 () Bool)

(assert (=> d!12837 (= c!8459 (and ((_ is Cons!1425) (toList!691 (+!82 lt!26034 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))) (= (_1!1027 (h!2008 (toList!691 (+!82 lt!26034 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))) lt!26033)))))

(assert (=> d!12837 (= (getValueByKey!127 (toList!691 (+!82 lt!26034 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26033) e!41321)))

(declare-fun b!62993 () Bool)

(declare-fun e!41322 () Option!133)

(assert (=> b!62993 (= e!41321 e!41322)))

(declare-fun c!8460 () Bool)

(assert (=> b!62993 (= c!8460 (and ((_ is Cons!1425) (toList!691 (+!82 lt!26034 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))) (not (= (_1!1027 (h!2008 (toList!691 (+!82 lt!26034 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))) lt!26033))))))

(declare-fun b!62994 () Bool)

(assert (=> b!62994 (= e!41322 (getValueByKey!127 (t!4815 (toList!691 (+!82 lt!26034 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))) lt!26033))))

(declare-fun b!62995 () Bool)

(assert (=> b!62995 (= e!41322 None!131)))

(assert (= (and d!12837 c!8459) b!62992))

(assert (= (and d!12837 (not c!8459)) b!62993))

(assert (= (and b!62993 c!8460) b!62994))

(assert (= (and b!62993 (not c!8460)) b!62995))

(declare-fun m!56779 () Bool)

(assert (=> b!62994 m!56779))

(assert (=> d!12697 d!12837))

(assert (=> b!62787 d!12831))

(declare-fun d!12839 () Bool)

(assert (=> d!12839 (= (map!1117 (_2!1026 lt!26286)) (getCurrentListMap!391 (_keys!3719 (_2!1026 lt!26286)) (_values!2070 (_2!1026 lt!26286)) (mask!5993 (_2!1026 lt!26286)) (extraKeys!1966 (_2!1026 lt!26286)) (zeroValue!1999 (_2!1026 lt!26286)) (minValue!1999 (_2!1026 lt!26286)) #b00000000000000000000000000000000 (defaultEntry!2087 (_2!1026 lt!26286))))))

(declare-fun bs!2741 () Bool)

(assert (= bs!2741 d!12839))

(declare-fun m!56781 () Bool)

(assert (=> bs!2741 m!56781))

(assert (=> b!62746 d!12839))

(declare-fun d!12841 () Bool)

(declare-fun e!41323 () Bool)

(assert (=> d!12841 e!41323))

(declare-fun res!34511 () Bool)

(assert (=> d!12841 (=> (not res!34511) (not e!41323))))

(declare-fun lt!26444 () ListLongMap!1351)

(assert (=> d!12841 (= res!34511 (contains!686 lt!26444 (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!26445 () List!1429)

(assert (=> d!12841 (= lt!26444 (ListLongMap!1352 lt!26445))))

(declare-fun lt!26443 () Unit!1680)

(declare-fun lt!26446 () Unit!1680)

(assert (=> d!12841 (= lt!26443 lt!26446)))

(assert (=> d!12841 (= (getValueByKey!127 lt!26445 (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!132 (_2!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12841 (= lt!26446 (lemmaContainsTupThenGetReturnValue!44 lt!26445 (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12841 (= lt!26445 (insertStrictlySorted!47 (toList!691 (map!1117 newMap!16)) (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12841 (= (+!82 (map!1117 newMap!16) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26444)))

(declare-fun b!62996 () Bool)

(declare-fun res!34512 () Bool)

(assert (=> b!62996 (=> (not res!34512) (not e!41323))))

(assert (=> b!62996 (= res!34512 (= (getValueByKey!127 (toList!691 lt!26444) (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!132 (_2!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!62997 () Bool)

(assert (=> b!62997 (= e!41323 (contains!689 (toList!691 lt!26444) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12841 res!34511) b!62996))

(assert (= (and b!62996 res!34512) b!62997))

(declare-fun m!56783 () Bool)

(assert (=> d!12841 m!56783))

(declare-fun m!56785 () Bool)

(assert (=> d!12841 m!56785))

(declare-fun m!56787 () Bool)

(assert (=> d!12841 m!56787))

(declare-fun m!56789 () Bool)

(assert (=> d!12841 m!56789))

(declare-fun m!56791 () Bool)

(assert (=> b!62996 m!56791))

(declare-fun m!56793 () Bool)

(assert (=> b!62997 m!56793))

(assert (=> b!62746 d!12841))

(assert (=> b!62746 d!12611))

(declare-fun d!12843 () Bool)

(declare-fun e!41325 () Bool)

(assert (=> d!12843 e!41325))

(declare-fun res!34513 () Bool)

(assert (=> d!12843 (=> res!34513 e!41325)))

(declare-fun lt!26448 () Bool)

(assert (=> d!12843 (= res!34513 (not lt!26448))))

(declare-fun lt!26449 () Bool)

(assert (=> d!12843 (= lt!26448 lt!26449)))

(declare-fun lt!26447 () Unit!1680)

(declare-fun e!41324 () Unit!1680)

(assert (=> d!12843 (= lt!26447 e!41324)))

(declare-fun c!8461 () Bool)

(assert (=> d!12843 (= c!8461 lt!26449)))

(assert (=> d!12843 (= lt!26449 (containsKey!130 (toList!691 lt!26162) (_1!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!12843 (= (contains!686 lt!26162 (_1!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26448)))

(declare-fun b!62998 () Bool)

(declare-fun lt!26450 () Unit!1680)

(assert (=> b!62998 (= e!41324 lt!26450)))

(assert (=> b!62998 (= lt!26450 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 lt!26162) (_1!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> b!62998 (isDefined!79 (getValueByKey!127 (toList!691 lt!26162) (_1!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!62999 () Bool)

(declare-fun Unit!1710 () Unit!1680)

(assert (=> b!62999 (= e!41324 Unit!1710)))

(declare-fun b!63000 () Bool)

(assert (=> b!63000 (= e!41325 (isDefined!79 (getValueByKey!127 (toList!691 lt!26162) (_1!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(assert (= (and d!12843 c!8461) b!62998))

(assert (= (and d!12843 (not c!8461)) b!62999))

(assert (= (and d!12843 (not res!34513)) b!63000))

(declare-fun m!56795 () Bool)

(assert (=> d!12843 m!56795))

(declare-fun m!56797 () Bool)

(assert (=> b!62998 m!56797))

(assert (=> b!62998 m!56225))

(assert (=> b!62998 m!56225))

(declare-fun m!56799 () Bool)

(assert (=> b!62998 m!56799))

(assert (=> b!63000 m!56225))

(assert (=> b!63000 m!56225))

(assert (=> b!63000 m!56799))

(assert (=> d!12705 d!12843))

(declare-fun b!63001 () Bool)

(declare-fun e!41326 () Option!133)

(assert (=> b!63001 (= e!41326 (Some!132 (_2!1027 (h!2008 lt!26163))))))

(declare-fun d!12845 () Bool)

(declare-fun c!8462 () Bool)

(assert (=> d!12845 (= c!8462 (and ((_ is Cons!1425) lt!26163) (= (_1!1027 (h!2008 lt!26163)) (_1!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> d!12845 (= (getValueByKey!127 lt!26163 (_1!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) e!41326)))

(declare-fun b!63002 () Bool)

(declare-fun e!41327 () Option!133)

(assert (=> b!63002 (= e!41326 e!41327)))

(declare-fun c!8463 () Bool)

(assert (=> b!63002 (= c!8463 (and ((_ is Cons!1425) lt!26163) (not (= (_1!1027 (h!2008 lt!26163)) (_1!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))))

(declare-fun b!63003 () Bool)

(assert (=> b!63003 (= e!41327 (getValueByKey!127 (t!4815 lt!26163) (_1!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63004 () Bool)

(assert (=> b!63004 (= e!41327 None!131)))

(assert (= (and d!12845 c!8462) b!63001))

(assert (= (and d!12845 (not c!8462)) b!63002))

(assert (= (and b!63002 c!8463) b!63003))

(assert (= (and b!63002 (not c!8463)) b!63004))

(declare-fun m!56801 () Bool)

(assert (=> b!63003 m!56801))

(assert (=> d!12705 d!12845))

(declare-fun d!12847 () Bool)

(assert (=> d!12847 (= (getValueByKey!127 lt!26163 (_1!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) (Some!132 (_2!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun lt!26451 () Unit!1680)

(assert (=> d!12847 (= lt!26451 (choose!346 lt!26163 (_1!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun e!41328 () Bool)

(assert (=> d!12847 e!41328))

(declare-fun res!34514 () Bool)

(assert (=> d!12847 (=> (not res!34514) (not e!41328))))

(assert (=> d!12847 (= res!34514 (isStrictlySorted!273 lt!26163))))

(assert (=> d!12847 (= (lemmaContainsTupThenGetReturnValue!44 lt!26163 (_1!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26451)))

(declare-fun b!63005 () Bool)

(declare-fun res!34515 () Bool)

(assert (=> b!63005 (=> (not res!34515) (not e!41328))))

(assert (=> b!63005 (= res!34515 (containsKey!130 lt!26163 (_1!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63006 () Bool)

(assert (=> b!63006 (= e!41328 (contains!689 lt!26163 (tuple2!2033 (_1!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(assert (= (and d!12847 res!34514) b!63005))

(assert (= (and b!63005 res!34515) b!63006))

(assert (=> d!12847 m!56219))

(declare-fun m!56803 () Bool)

(assert (=> d!12847 m!56803))

(declare-fun m!56805 () Bool)

(assert (=> d!12847 m!56805))

(declare-fun m!56807 () Bool)

(assert (=> b!63005 m!56807))

(declare-fun m!56809 () Bool)

(assert (=> b!63006 m!56809))

(assert (=> d!12705 d!12847))

(declare-fun lt!26452 () List!1429)

(declare-fun e!41332 () Bool)

(declare-fun b!63007 () Bool)

(assert (=> b!63007 (= e!41332 (contains!689 lt!26452 (tuple2!2033 (_1!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!63008 () Bool)

(declare-fun res!34517 () Bool)

(assert (=> b!63008 (=> (not res!34517) (not e!41332))))

(assert (=> b!63008 (= res!34517 (containsKey!130 lt!26452 (_1!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun bm!4976 () Bool)

(declare-fun call!4981 () List!1429)

(declare-fun call!4979 () List!1429)

(assert (=> bm!4976 (= call!4981 call!4979)))

(declare-fun bm!4977 () Bool)

(declare-fun call!4980 () List!1429)

(assert (=> bm!4977 (= call!4979 call!4980)))

(declare-fun c!8464 () Bool)

(declare-fun b!63009 () Bool)

(assert (=> b!63009 (= c!8464 (and ((_ is Cons!1425) (toList!691 lt!26034)) (bvsgt (_1!1027 (h!2008 (toList!691 lt!26034))) (_1!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun e!41330 () List!1429)

(declare-fun e!41333 () List!1429)

(assert (=> b!63009 (= e!41330 e!41333)))

(declare-fun d!12849 () Bool)

(assert (=> d!12849 e!41332))

(declare-fun res!34516 () Bool)

(assert (=> d!12849 (=> (not res!34516) (not e!41332))))

(assert (=> d!12849 (= res!34516 (isStrictlySorted!273 lt!26452))))

(declare-fun e!41329 () List!1429)

(assert (=> d!12849 (= lt!26452 e!41329)))

(declare-fun c!8465 () Bool)

(assert (=> d!12849 (= c!8465 (and ((_ is Cons!1425) (toList!691 lt!26034)) (bvslt (_1!1027 (h!2008 (toList!691 lt!26034))) (_1!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> d!12849 (isStrictlySorted!273 (toList!691 lt!26034))))

(assert (=> d!12849 (= (insertStrictlySorted!47 (toList!691 lt!26034) (_1!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26452)))

(declare-fun bm!4978 () Bool)

(declare-fun e!41331 () List!1429)

(assert (=> bm!4978 (= call!4980 ($colon$colon!61 e!41331 (ite c!8465 (h!2008 (toList!691 lt!26034)) (tuple2!2033 (_1!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))))

(declare-fun c!8467 () Bool)

(assert (=> bm!4978 (= c!8467 c!8465)))

(declare-fun b!63010 () Bool)

(assert (=> b!63010 (= e!41330 call!4979)))

(declare-fun b!63011 () Bool)

(assert (=> b!63011 (= e!41331 (insertStrictlySorted!47 (t!4815 (toList!691 lt!26034)) (_1!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63012 () Bool)

(assert (=> b!63012 (= e!41329 call!4980)))

(declare-fun b!63013 () Bool)

(assert (=> b!63013 (= e!41329 e!41330)))

(declare-fun c!8466 () Bool)

(assert (=> b!63013 (= c!8466 (and ((_ is Cons!1425) (toList!691 lt!26034)) (= (_1!1027 (h!2008 (toList!691 lt!26034))) (_1!1027 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!63014 () Bool)

(assert (=> b!63014 (= e!41333 call!4981)))

(declare-fun b!63015 () Bool)

(assert (=> b!63015 (= e!41331 (ite c!8466 (t!4815 (toList!691 lt!26034)) (ite c!8464 (Cons!1425 (h!2008 (toList!691 lt!26034)) (t!4815 (toList!691 lt!26034))) Nil!1426)))))

(declare-fun b!63016 () Bool)

(assert (=> b!63016 (= e!41333 call!4981)))

(assert (= (and d!12849 c!8465) b!63012))

(assert (= (and d!12849 (not c!8465)) b!63013))

(assert (= (and b!63013 c!8466) b!63010))

(assert (= (and b!63013 (not c!8466)) b!63009))

(assert (= (and b!63009 c!8464) b!63016))

(assert (= (and b!63009 (not c!8464)) b!63014))

(assert (= (or b!63016 b!63014) bm!4976))

(assert (= (or b!63010 bm!4976) bm!4977))

(assert (= (or b!63012 bm!4977) bm!4978))

(assert (= (and bm!4978 c!8467) b!63011))

(assert (= (and bm!4978 (not c!8467)) b!63015))

(assert (= (and d!12849 res!34516) b!63008))

(assert (= (and b!63008 res!34517) b!63007))

(declare-fun m!56811 () Bool)

(assert (=> b!63008 m!56811))

(declare-fun m!56813 () Bool)

(assert (=> bm!4978 m!56813))

(declare-fun m!56815 () Bool)

(assert (=> b!63011 m!56815))

(declare-fun m!56817 () Bool)

(assert (=> b!63007 m!56817))

(declare-fun m!56819 () Bool)

(assert (=> d!12849 m!56819))

(declare-fun m!56821 () Bool)

(assert (=> d!12849 m!56821))

(assert (=> d!12705 d!12849))

(declare-fun b!63017 () Bool)

(declare-fun e!41335 () (_ BitVec 32))

(declare-fun call!4982 () (_ BitVec 32))

(assert (=> b!63017 (= e!41335 call!4982)))

(declare-fun b!63018 () Bool)

(assert (=> b!63018 (= e!41335 (bvadd #b00000000000000000000000000000001 call!4982))))

(declare-fun b!63019 () Bool)

(declare-fun e!41334 () (_ BitVec 32))

(assert (=> b!63019 (= e!41334 e!41335)))

(declare-fun c!8468 () Bool)

(assert (=> b!63019 (= c!8468 (validKeyInArray!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun d!12851 () Bool)

(declare-fun lt!26453 () (_ BitVec 32))

(assert (=> d!12851 (and (bvsge lt!26453 #b00000000000000000000000000000000) (bvsle lt!26453 (bvsub (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) #b00000000000000000000000000000000)))))

(assert (=> d!12851 (= lt!26453 e!41334)))

(declare-fun c!8469 () Bool)

(assert (=> d!12851 (= c!8469 (bvsge #b00000000000000000000000000000000 (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992))))))))

(assert (=> d!12851 (and (bvsle #b00000000000000000000000000000000 (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992))))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992))))))))

(assert (=> d!12851 (= (arrayCountValidKeys!0 (_keys!3719 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000000 (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992))))) lt!26453)))

(declare-fun bm!4979 () Bool)

(assert (=> bm!4979 (= call!4982 (arrayCountValidKeys!0 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun b!63020 () Bool)

(assert (=> b!63020 (= e!41334 #b00000000000000000000000000000000)))

(assert (= (and d!12851 c!8469) b!63020))

(assert (= (and d!12851 (not c!8469)) b!63019))

(assert (= (and b!63019 c!8468) b!63018))

(assert (= (and b!63019 (not c!8468)) b!63017))

(assert (= (or b!63018 b!63017) bm!4979))

(declare-fun m!56823 () Bool)

(assert (=> b!63019 m!56823))

(assert (=> b!63019 m!56823))

(declare-fun m!56825 () Bool)

(assert (=> b!63019 m!56825))

(declare-fun m!56827 () Bool)

(assert (=> bm!4979 m!56827))

(assert (=> b!62703 d!12851))

(declare-fun b!63021 () Bool)

(declare-fun e!41336 () Option!133)

(assert (=> b!63021 (= e!41336 (Some!132 (_2!1027 (h!2008 (toList!691 lt!26067)))))))

(declare-fun d!12853 () Bool)

(declare-fun c!8470 () Bool)

(assert (=> d!12853 (= c!8470 (and ((_ is Cons!1425) (toList!691 lt!26067)) (= (_1!1027 (h!2008 (toList!691 lt!26067))) (_1!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))))

(assert (=> d!12853 (= (getValueByKey!127 (toList!691 lt!26067) (_1!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))) e!41336)))

(declare-fun b!63022 () Bool)

(declare-fun e!41337 () Option!133)

(assert (=> b!63022 (= e!41336 e!41337)))

(declare-fun c!8471 () Bool)

(assert (=> b!63022 (= c!8471 (and ((_ is Cons!1425) (toList!691 lt!26067)) (not (= (_1!1027 (h!2008 (toList!691 lt!26067))) (_1!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))))

(declare-fun b!63023 () Bool)

(assert (=> b!63023 (= e!41337 (getValueByKey!127 (t!4815 (toList!691 lt!26067)) (_1!1027 (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!63024 () Bool)

(assert (=> b!63024 (= e!41337 None!131)))

(assert (= (and d!12853 c!8470) b!63021))

(assert (= (and d!12853 (not c!8470)) b!63022))

(assert (= (and b!63022 c!8471) b!63023))

(assert (= (and b!63022 (not c!8471)) b!63024))

(declare-fun m!56829 () Bool)

(assert (=> b!63023 m!56829))

(assert (=> b!62496 d!12853))

(declare-fun d!12855 () Bool)

(assert (=> d!12855 (= (apply!68 lt!26323 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1092 (getValueByKey!127 (toList!691 lt!26323) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2742 () Bool)

(assert (= bs!2742 d!12855))

(assert (=> bs!2742 m!56665))

(assert (=> bs!2742 m!56665))

(declare-fun m!56831 () Bool)

(assert (=> bs!2742 m!56831))

(assert (=> b!62784 d!12855))

(declare-fun d!12857 () Bool)

(declare-fun isEmpty!307 (List!1429) Bool)

(assert (=> d!12857 (= (isEmpty!305 lt!26146) (isEmpty!307 (toList!691 lt!26146)))))

(declare-fun bs!2743 () Bool)

(assert (= bs!2743 d!12857))

(declare-fun m!56833 () Bool)

(assert (=> bs!2743 m!56833))

(assert (=> b!62611 d!12857))

(declare-fun d!12859 () Bool)

(assert (=> d!12859 (= (apply!68 lt!26077 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1092 (getValueByKey!127 (toList!691 lt!26077) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2744 () Bool)

(assert (= bs!2744 d!12859))

(declare-fun m!56835 () Bool)

(assert (=> bs!2744 m!56835))

(assert (=> bs!2744 m!56835))

(declare-fun m!56837 () Bool)

(assert (=> bs!2744 m!56837))

(assert (=> b!62517 d!12859))

(declare-fun bm!4980 () Bool)

(declare-fun call!4983 () Bool)

(assert (=> bm!4980 (= call!4983 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (_keys!3719 newMap!16) (mask!5993 newMap!16)))))

(declare-fun b!63025 () Bool)

(declare-fun e!41340 () Bool)

(assert (=> b!63025 (= e!41340 call!4983)))

(declare-fun b!63026 () Bool)

(declare-fun e!41339 () Bool)

(assert (=> b!63026 (= e!41339 call!4983)))

(declare-fun b!63027 () Bool)

(declare-fun e!41338 () Bool)

(assert (=> b!63027 (= e!41338 e!41339)))

(declare-fun c!8472 () Bool)

(assert (=> b!63027 (= c!8472 (validKeyInArray!0 (select (arr!1790 (_keys!3719 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!63028 () Bool)

(assert (=> b!63028 (= e!41339 e!41340)))

(declare-fun lt!26455 () (_ BitVec 64))

(assert (=> b!63028 (= lt!26455 (select (arr!1790 (_keys!3719 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(declare-fun lt!26456 () Unit!1680)

(assert (=> b!63028 (= lt!26456 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3719 newMap!16) lt!26455 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (=> b!63028 (arrayContainsKey!0 (_keys!3719 newMap!16) lt!26455 #b00000000000000000000000000000000)))

(declare-fun lt!26454 () Unit!1680)

(assert (=> b!63028 (= lt!26454 lt!26456)))

(declare-fun res!34518 () Bool)

(assert (=> b!63028 (= res!34518 (= (seekEntryOrOpen!0 (select (arr!1790 (_keys!3719 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (_keys!3719 newMap!16) (mask!5993 newMap!16)) (Found!223 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> b!63028 (=> (not res!34518) (not e!41340))))

(declare-fun d!12861 () Bool)

(declare-fun res!34519 () Bool)

(assert (=> d!12861 (=> res!34519 e!41338)))

(assert (=> d!12861 (= res!34519 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2022 (_keys!3719 newMap!16))))))

(assert (=> d!12861 (= (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3719 newMap!16) (mask!5993 newMap!16)) e!41338)))

(assert (= (and d!12861 (not res!34519)) b!63027))

(assert (= (and b!63027 c!8472) b!63028))

(assert (= (and b!63027 (not c!8472)) b!63026))

(assert (= (and b!63028 res!34518) b!63025))

(assert (= (or b!63025 b!63026) bm!4980))

(declare-fun m!56839 () Bool)

(assert (=> bm!4980 m!56839))

(assert (=> b!63027 m!56697))

(assert (=> b!63027 m!56697))

(assert (=> b!63027 m!56701))

(assert (=> b!63028 m!56697))

(declare-fun m!56841 () Bool)

(assert (=> b!63028 m!56841))

(declare-fun m!56843 () Bool)

(assert (=> b!63028 m!56843))

(assert (=> b!63028 m!56697))

(declare-fun m!56845 () Bool)

(assert (=> b!63028 m!56845))

(assert (=> bm!4910 d!12861))

(declare-fun d!12863 () Bool)

(declare-fun e!41342 () Bool)

(assert (=> d!12863 e!41342))

(declare-fun res!34520 () Bool)

(assert (=> d!12863 (=> res!34520 e!41342)))

(declare-fun lt!26458 () Bool)

(assert (=> d!12863 (= res!34520 (not lt!26458))))

(declare-fun lt!26459 () Bool)

(assert (=> d!12863 (= lt!26458 lt!26459)))

(declare-fun lt!26457 () Unit!1680)

(declare-fun e!41341 () Unit!1680)

(assert (=> d!12863 (= lt!26457 e!41341)))

(declare-fun c!8473 () Bool)

(assert (=> d!12863 (= c!8473 lt!26459)))

(assert (=> d!12863 (= lt!26459 (containsKey!130 (toList!691 lt!26121) (_1!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!12863 (= (contains!686 lt!26121 (_1!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26458)))

(declare-fun b!63029 () Bool)

(declare-fun lt!26460 () Unit!1680)

(assert (=> b!63029 (= e!41341 lt!26460)))

(assert (=> b!63029 (= lt!26460 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 lt!26121) (_1!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> b!63029 (isDefined!79 (getValueByKey!127 (toList!691 lt!26121) (_1!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63030 () Bool)

(declare-fun Unit!1711 () Unit!1680)

(assert (=> b!63030 (= e!41341 Unit!1711)))

(declare-fun b!63031 () Bool)

(assert (=> b!63031 (= e!41342 (isDefined!79 (getValueByKey!127 (toList!691 lt!26121) (_1!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(assert (= (and d!12863 c!8473) b!63029))

(assert (= (and d!12863 (not c!8473)) b!63030))

(assert (= (and d!12863 (not res!34520)) b!63031))

(declare-fun m!56847 () Bool)

(assert (=> d!12863 m!56847))

(declare-fun m!56849 () Bool)

(assert (=> b!63029 m!56849))

(assert (=> b!63029 m!56137))

(assert (=> b!63029 m!56137))

(declare-fun m!56851 () Bool)

(assert (=> b!63029 m!56851))

(assert (=> b!63031 m!56137))

(assert (=> b!63031 m!56137))

(assert (=> b!63031 m!56851))

(assert (=> d!12679 d!12863))

(declare-fun b!63032 () Bool)

(declare-fun e!41343 () Option!133)

(assert (=> b!63032 (= e!41343 (Some!132 (_2!1027 (h!2008 lt!26122))))))

(declare-fun c!8474 () Bool)

(declare-fun d!12865 () Bool)

(assert (=> d!12865 (= c!8474 (and ((_ is Cons!1425) lt!26122) (= (_1!1027 (h!2008 lt!26122)) (_1!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> d!12865 (= (getValueByKey!127 lt!26122 (_1!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))) e!41343)))

(declare-fun b!63033 () Bool)

(declare-fun e!41344 () Option!133)

(assert (=> b!63033 (= e!41343 e!41344)))

(declare-fun c!8475 () Bool)

(assert (=> b!63033 (= c!8475 (and ((_ is Cons!1425) lt!26122) (not (= (_1!1027 (h!2008 lt!26122)) (_1!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))))))

(declare-fun b!63034 () Bool)

(assert (=> b!63034 (= e!41344 (getValueByKey!127 (t!4815 lt!26122) (_1!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63035 () Bool)

(assert (=> b!63035 (= e!41344 None!131)))

(assert (= (and d!12865 c!8474) b!63032))

(assert (= (and d!12865 (not c!8474)) b!63033))

(assert (= (and b!63033 c!8475) b!63034))

(assert (= (and b!63033 (not c!8475)) b!63035))

(declare-fun m!56853 () Bool)

(assert (=> b!63034 m!56853))

(assert (=> d!12679 d!12865))

(declare-fun d!12867 () Bool)

(assert (=> d!12867 (= (getValueByKey!127 lt!26122 (_1!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))) (Some!132 (_2!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun lt!26461 () Unit!1680)

(assert (=> d!12867 (= lt!26461 (choose!346 lt!26122 (_1!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun e!41345 () Bool)

(assert (=> d!12867 e!41345))

(declare-fun res!34521 () Bool)

(assert (=> d!12867 (=> (not res!34521) (not e!41345))))

(assert (=> d!12867 (= res!34521 (isStrictlySorted!273 lt!26122))))

(assert (=> d!12867 (= (lemmaContainsTupThenGetReturnValue!44 lt!26122 (_1!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26461)))

(declare-fun b!63036 () Bool)

(declare-fun res!34522 () Bool)

(assert (=> b!63036 (=> (not res!34522) (not e!41345))))

(assert (=> b!63036 (= res!34522 (containsKey!130 lt!26122 (_1!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63037 () Bool)

(assert (=> b!63037 (= e!41345 (contains!689 lt!26122 (tuple2!2033 (_1!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(assert (= (and d!12867 res!34521) b!63036))

(assert (= (and b!63036 res!34522) b!63037))

(assert (=> d!12867 m!56131))

(declare-fun m!56855 () Bool)

(assert (=> d!12867 m!56855))

(declare-fun m!56857 () Bool)

(assert (=> d!12867 m!56857))

(declare-fun m!56859 () Bool)

(assert (=> b!63036 m!56859))

(declare-fun m!56861 () Bool)

(assert (=> b!63037 m!56861))

(assert (=> d!12679 d!12867))

(declare-fun e!41349 () Bool)

(declare-fun lt!26462 () List!1429)

(declare-fun b!63038 () Bool)

(assert (=> b!63038 (= e!41349 (contains!689 lt!26462 (tuple2!2033 (_1!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!63039 () Bool)

(declare-fun res!34524 () Bool)

(assert (=> b!63039 (=> (not res!34524) (not e!41349))))

(assert (=> b!63039 (= res!34524 (containsKey!130 lt!26462 (_1!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun bm!4981 () Bool)

(declare-fun call!4986 () List!1429)

(declare-fun call!4984 () List!1429)

(assert (=> bm!4981 (= call!4986 call!4984)))

(declare-fun bm!4982 () Bool)

(declare-fun call!4985 () List!1429)

(assert (=> bm!4982 (= call!4984 call!4985)))

(declare-fun b!63040 () Bool)

(declare-fun c!8476 () Bool)

(assert (=> b!63040 (= c!8476 (and ((_ is Cons!1425) (toList!691 lt!26045)) (bvsgt (_1!1027 (h!2008 (toList!691 lt!26045))) (_1!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun e!41347 () List!1429)

(declare-fun e!41350 () List!1429)

(assert (=> b!63040 (= e!41347 e!41350)))

(declare-fun d!12869 () Bool)

(assert (=> d!12869 e!41349))

(declare-fun res!34523 () Bool)

(assert (=> d!12869 (=> (not res!34523) (not e!41349))))

(assert (=> d!12869 (= res!34523 (isStrictlySorted!273 lt!26462))))

(declare-fun e!41346 () List!1429)

(assert (=> d!12869 (= lt!26462 e!41346)))

(declare-fun c!8477 () Bool)

(assert (=> d!12869 (= c!8477 (and ((_ is Cons!1425) (toList!691 lt!26045)) (bvslt (_1!1027 (h!2008 (toList!691 lt!26045))) (_1!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> d!12869 (isStrictlySorted!273 (toList!691 lt!26045))))

(assert (=> d!12869 (= (insertStrictlySorted!47 (toList!691 lt!26045) (_1!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26462)))

(declare-fun bm!4983 () Bool)

(declare-fun e!41348 () List!1429)

(assert (=> bm!4983 (= call!4985 ($colon$colon!61 e!41348 (ite c!8477 (h!2008 (toList!691 lt!26045)) (tuple2!2033 (_1!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))))))

(declare-fun c!8479 () Bool)

(assert (=> bm!4983 (= c!8479 c!8477)))

(declare-fun b!63041 () Bool)

(assert (=> b!63041 (= e!41347 call!4984)))

(declare-fun b!63042 () Bool)

(assert (=> b!63042 (= e!41348 (insertStrictlySorted!47 (t!4815 (toList!691 lt!26045)) (_1!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63043 () Bool)

(assert (=> b!63043 (= e!41346 call!4985)))

(declare-fun b!63044 () Bool)

(assert (=> b!63044 (= e!41346 e!41347)))

(declare-fun c!8478 () Bool)

(assert (=> b!63044 (= c!8478 (and ((_ is Cons!1425) (toList!691 lt!26045)) (= (_1!1027 (h!2008 (toList!691 lt!26045))) (_1!1027 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!63045 () Bool)

(assert (=> b!63045 (= e!41350 call!4986)))

(declare-fun b!63046 () Bool)

(assert (=> b!63046 (= e!41348 (ite c!8478 (t!4815 (toList!691 lt!26045)) (ite c!8476 (Cons!1425 (h!2008 (toList!691 lt!26045)) (t!4815 (toList!691 lt!26045))) Nil!1426)))))

(declare-fun b!63047 () Bool)

(assert (=> b!63047 (= e!41350 call!4986)))

(assert (= (and d!12869 c!8477) b!63043))

(assert (= (and d!12869 (not c!8477)) b!63044))

(assert (= (and b!63044 c!8478) b!63041))

(assert (= (and b!63044 (not c!8478)) b!63040))

(assert (= (and b!63040 c!8476) b!63047))

(assert (= (and b!63040 (not c!8476)) b!63045))

(assert (= (or b!63047 b!63045) bm!4981))

(assert (= (or b!63041 bm!4981) bm!4982))

(assert (= (or b!63043 bm!4982) bm!4983))

(assert (= (and bm!4983 c!8479) b!63042))

(assert (= (and bm!4983 (not c!8479)) b!63046))

(assert (= (and d!12869 res!34523) b!63039))

(assert (= (and b!63039 res!34524) b!63038))

(declare-fun m!56863 () Bool)

(assert (=> b!63039 m!56863))

(declare-fun m!56865 () Bool)

(assert (=> bm!4983 m!56865))

(declare-fun m!56867 () Bool)

(assert (=> b!63042 m!56867))

(declare-fun m!56869 () Bool)

(assert (=> b!63038 m!56869))

(declare-fun m!56871 () Bool)

(assert (=> d!12869 m!56871))

(declare-fun m!56873 () Bool)

(assert (=> d!12869 m!56873))

(assert (=> d!12679 d!12869))

(declare-fun d!12871 () Bool)

(assert (=> d!12871 (= (get!1092 (getValueByKey!127 (toList!691 lt!26048) lt!26031)) (v!2425 (getValueByKey!127 (toList!691 lt!26048) lt!26031)))))

(assert (=> d!12685 d!12871))

(declare-fun b!63048 () Bool)

(declare-fun e!41351 () Option!133)

(assert (=> b!63048 (= e!41351 (Some!132 (_2!1027 (h!2008 (toList!691 lt!26048)))))))

(declare-fun d!12873 () Bool)

(declare-fun c!8480 () Bool)

(assert (=> d!12873 (= c!8480 (and ((_ is Cons!1425) (toList!691 lt!26048)) (= (_1!1027 (h!2008 (toList!691 lt!26048))) lt!26031)))))

(assert (=> d!12873 (= (getValueByKey!127 (toList!691 lt!26048) lt!26031) e!41351)))

(declare-fun b!63049 () Bool)

(declare-fun e!41352 () Option!133)

(assert (=> b!63049 (= e!41351 e!41352)))

(declare-fun c!8481 () Bool)

(assert (=> b!63049 (= c!8481 (and ((_ is Cons!1425) (toList!691 lt!26048)) (not (= (_1!1027 (h!2008 (toList!691 lt!26048))) lt!26031))))))

(declare-fun b!63050 () Bool)

(assert (=> b!63050 (= e!41352 (getValueByKey!127 (t!4815 (toList!691 lt!26048)) lt!26031))))

(declare-fun b!63051 () Bool)

(assert (=> b!63051 (= e!41352 None!131)))

(assert (= (and d!12873 c!8480) b!63048))

(assert (= (and d!12873 (not c!8480)) b!63049))

(assert (= (and b!63049 c!8481) b!63050))

(assert (= (and b!63049 (not c!8481)) b!63051))

(declare-fun m!56875 () Bool)

(assert (=> b!63050 m!56875))

(assert (=> d!12685 d!12873))

(declare-fun d!12875 () Bool)

(declare-fun e!41354 () Bool)

(assert (=> d!12875 e!41354))

(declare-fun res!34525 () Bool)

(assert (=> d!12875 (=> res!34525 e!41354)))

(declare-fun lt!26464 () Bool)

(assert (=> d!12875 (= res!34525 (not lt!26464))))

(declare-fun lt!26465 () Bool)

(assert (=> d!12875 (= lt!26464 lt!26465)))

(declare-fun lt!26463 () Unit!1680)

(declare-fun e!41353 () Unit!1680)

(assert (=> d!12875 (= lt!26463 e!41353)))

(declare-fun c!8482 () Bool)

(assert (=> d!12875 (= c!8482 lt!26465)))

(assert (=> d!12875 (= lt!26465 (containsKey!130 (toList!691 lt!26077) (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!12875 (= (contains!686 lt!26077 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)) lt!26464)))

(declare-fun b!63052 () Bool)

(declare-fun lt!26466 () Unit!1680)

(assert (=> b!63052 (= e!41353 lt!26466)))

(assert (=> b!63052 (= lt!26466 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 lt!26077) (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63052 (isDefined!79 (getValueByKey!127 (toList!691 lt!26077) (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63053 () Bool)

(declare-fun Unit!1712 () Unit!1680)

(assert (=> b!63053 (= e!41353 Unit!1712)))

(declare-fun b!63054 () Bool)

(assert (=> b!63054 (= e!41354 (isDefined!79 (getValueByKey!127 (toList!691 lt!26077) (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!12875 c!8482) b!63052))

(assert (= (and d!12875 (not c!8482)) b!63053))

(assert (= (and d!12875 (not res!34525)) b!63054))

(assert (=> d!12875 m!56033))

(declare-fun m!56877 () Bool)

(assert (=> d!12875 m!56877))

(assert (=> b!63052 m!56033))

(declare-fun m!56879 () Bool)

(assert (=> b!63052 m!56879))

(assert (=> b!63052 m!56033))

(declare-fun m!56881 () Bool)

(assert (=> b!63052 m!56881))

(assert (=> b!63052 m!56881))

(declare-fun m!56883 () Bool)

(assert (=> b!63052 m!56883))

(assert (=> b!63054 m!56033))

(assert (=> b!63054 m!56881))

(assert (=> b!63054 m!56881))

(assert (=> b!63054 m!56883))

(assert (=> b!62524 d!12875))

(declare-fun d!12877 () Bool)

(declare-fun e!41356 () Bool)

(assert (=> d!12877 e!41356))

(declare-fun res!34526 () Bool)

(assert (=> d!12877 (=> res!34526 e!41356)))

(declare-fun lt!26468 () Bool)

(assert (=> d!12877 (= res!34526 (not lt!26468))))

(declare-fun lt!26469 () Bool)

(assert (=> d!12877 (= lt!26468 lt!26469)))

(declare-fun lt!26467 () Unit!1680)

(declare-fun e!41355 () Unit!1680)

(assert (=> d!12877 (= lt!26467 e!41355)))

(declare-fun c!8483 () Bool)

(assert (=> d!12877 (= c!8483 lt!26469)))

(assert (=> d!12877 (= lt!26469 (containsKey!130 (toList!691 lt!26146) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12877 (= (contains!686 lt!26146 #b1000000000000000000000000000000000000000000000000000000000000000) lt!26468)))

(declare-fun b!63055 () Bool)

(declare-fun lt!26470 () Unit!1680)

(assert (=> b!63055 (= e!41355 lt!26470)))

(assert (=> b!63055 (= lt!26470 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 lt!26146) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63055 (isDefined!79 (getValueByKey!127 (toList!691 lt!26146) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63056 () Bool)

(declare-fun Unit!1713 () Unit!1680)

(assert (=> b!63056 (= e!41355 Unit!1713)))

(declare-fun b!63057 () Bool)

(assert (=> b!63057 (= e!41356 (isDefined!79 (getValueByKey!127 (toList!691 lt!26146) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12877 c!8483) b!63055))

(assert (= (and d!12877 (not c!8483)) b!63056))

(assert (= (and d!12877 (not res!34526)) b!63057))

(declare-fun m!56885 () Bool)

(assert (=> d!12877 m!56885))

(declare-fun m!56887 () Bool)

(assert (=> b!63055 m!56887))

(declare-fun m!56889 () Bool)

(assert (=> b!63055 m!56889))

(assert (=> b!63055 m!56889))

(declare-fun m!56891 () Bool)

(assert (=> b!63055 m!56891))

(assert (=> b!63057 m!56889))

(assert (=> b!63057 m!56889))

(assert (=> b!63057 m!56891))

(assert (=> b!62615 d!12877))

(declare-fun d!12879 () Bool)

(assert (=> d!12879 (= (apply!68 (+!82 lt!26098 (tuple2!2033 lt!26094 (zeroValue!1999 newMap!16))) lt!26081) (get!1092 (getValueByKey!127 (toList!691 (+!82 lt!26098 (tuple2!2033 lt!26094 (zeroValue!1999 newMap!16)))) lt!26081)))))

(declare-fun bs!2745 () Bool)

(assert (= bs!2745 d!12879))

(declare-fun m!56893 () Bool)

(assert (=> bs!2745 m!56893))

(assert (=> bs!2745 m!56893))

(declare-fun m!56895 () Bool)

(assert (=> bs!2745 m!56895))

(assert (=> b!62520 d!12879))

(declare-fun d!12881 () Bool)

(assert (=> d!12881 (= (apply!68 (+!82 lt!26084 (tuple2!2033 lt!26092 (minValue!1999 newMap!16))) lt!26083) (get!1092 (getValueByKey!127 (toList!691 (+!82 lt!26084 (tuple2!2033 lt!26092 (minValue!1999 newMap!16)))) lt!26083)))))

(declare-fun bs!2746 () Bool)

(assert (= bs!2746 d!12881))

(declare-fun m!56897 () Bool)

(assert (=> bs!2746 m!56897))

(assert (=> bs!2746 m!56897))

(declare-fun m!56899 () Bool)

(assert (=> bs!2746 m!56899))

(assert (=> b!62520 d!12881))

(declare-fun d!12883 () Bool)

(assert (=> d!12883 (contains!686 (+!82 lt!26095 (tuple2!2033 lt!26091 (zeroValue!1999 newMap!16))) lt!26085)))

(declare-fun lt!26471 () Unit!1680)

(assert (=> d!12883 (= lt!26471 (choose!338 lt!26095 lt!26091 (zeroValue!1999 newMap!16) lt!26085))))

(assert (=> d!12883 (contains!686 lt!26095 lt!26085)))

(assert (=> d!12883 (= (addStillContains!44 lt!26095 lt!26091 (zeroValue!1999 newMap!16) lt!26085) lt!26471)))

(declare-fun bs!2747 () Bool)

(assert (= bs!2747 d!12883))

(assert (=> bs!2747 m!56043))

(assert (=> bs!2747 m!56043))

(assert (=> bs!2747 m!56059))

(declare-fun m!56901 () Bool)

(assert (=> bs!2747 m!56901))

(declare-fun m!56903 () Bool)

(assert (=> bs!2747 m!56903))

(assert (=> b!62520 d!12883))

(declare-fun d!12885 () Bool)

(assert (=> d!12885 (= (apply!68 (+!82 lt!26093 (tuple2!2033 lt!26082 (minValue!1999 newMap!16))) lt!26096) (apply!68 lt!26093 lt!26096))))

(declare-fun lt!26472 () Unit!1680)

(assert (=> d!12885 (= lt!26472 (choose!339 lt!26093 lt!26082 (minValue!1999 newMap!16) lt!26096))))

(declare-fun e!41357 () Bool)

(assert (=> d!12885 e!41357))

(declare-fun res!34527 () Bool)

(assert (=> d!12885 (=> (not res!34527) (not e!41357))))

(assert (=> d!12885 (= res!34527 (contains!686 lt!26093 lt!26096))))

(assert (=> d!12885 (= (addApplyDifferent!44 lt!26093 lt!26082 (minValue!1999 newMap!16) lt!26096) lt!26472)))

(declare-fun b!63058 () Bool)

(assert (=> b!63058 (= e!41357 (not (= lt!26096 lt!26082)))))

(assert (= (and d!12885 res!34527) b!63058))

(assert (=> d!12885 m!56039))

(assert (=> d!12885 m!56041))

(assert (=> d!12885 m!56039))

(declare-fun m!56905 () Bool)

(assert (=> d!12885 m!56905))

(assert (=> d!12885 m!56037))

(declare-fun m!56907 () Bool)

(assert (=> d!12885 m!56907))

(assert (=> b!62520 d!12885))

(declare-fun d!12887 () Bool)

(assert (=> d!12887 (= (apply!68 (+!82 lt!26098 (tuple2!2033 lt!26094 (zeroValue!1999 newMap!16))) lt!26081) (apply!68 lt!26098 lt!26081))))

(declare-fun lt!26473 () Unit!1680)

(assert (=> d!12887 (= lt!26473 (choose!339 lt!26098 lt!26094 (zeroValue!1999 newMap!16) lt!26081))))

(declare-fun e!41358 () Bool)

(assert (=> d!12887 e!41358))

(declare-fun res!34528 () Bool)

(assert (=> d!12887 (=> (not res!34528) (not e!41358))))

(assert (=> d!12887 (= res!34528 (contains!686 lt!26098 lt!26081))))

(assert (=> d!12887 (= (addApplyDifferent!44 lt!26098 lt!26094 (zeroValue!1999 newMap!16) lt!26081) lt!26473)))

(declare-fun b!63059 () Bool)

(assert (=> b!63059 (= e!41358 (not (= lt!26081 lt!26094)))))

(assert (= (and d!12887 res!34528) b!63059))

(assert (=> d!12887 m!56053))

(assert (=> d!12887 m!56055))

(assert (=> d!12887 m!56053))

(declare-fun m!56909 () Bool)

(assert (=> d!12887 m!56909))

(assert (=> d!12887 m!56049))

(declare-fun m!56911 () Bool)

(assert (=> d!12887 m!56911))

(assert (=> b!62520 d!12887))

(declare-fun d!12889 () Bool)

(declare-fun e!41359 () Bool)

(assert (=> d!12889 e!41359))

(declare-fun res!34529 () Bool)

(assert (=> d!12889 (=> (not res!34529) (not e!41359))))

(declare-fun lt!26475 () ListLongMap!1351)

(assert (=> d!12889 (= res!34529 (contains!686 lt!26475 (_1!1027 (tuple2!2033 lt!26092 (minValue!1999 newMap!16)))))))

(declare-fun lt!26476 () List!1429)

(assert (=> d!12889 (= lt!26475 (ListLongMap!1352 lt!26476))))

(declare-fun lt!26474 () Unit!1680)

(declare-fun lt!26477 () Unit!1680)

(assert (=> d!12889 (= lt!26474 lt!26477)))

(assert (=> d!12889 (= (getValueByKey!127 lt!26476 (_1!1027 (tuple2!2033 lt!26092 (minValue!1999 newMap!16)))) (Some!132 (_2!1027 (tuple2!2033 lt!26092 (minValue!1999 newMap!16)))))))

(assert (=> d!12889 (= lt!26477 (lemmaContainsTupThenGetReturnValue!44 lt!26476 (_1!1027 (tuple2!2033 lt!26092 (minValue!1999 newMap!16))) (_2!1027 (tuple2!2033 lt!26092 (minValue!1999 newMap!16)))))))

(assert (=> d!12889 (= lt!26476 (insertStrictlySorted!47 (toList!691 lt!26084) (_1!1027 (tuple2!2033 lt!26092 (minValue!1999 newMap!16))) (_2!1027 (tuple2!2033 lt!26092 (minValue!1999 newMap!16)))))))

(assert (=> d!12889 (= (+!82 lt!26084 (tuple2!2033 lt!26092 (minValue!1999 newMap!16))) lt!26475)))

(declare-fun b!63060 () Bool)

(declare-fun res!34530 () Bool)

(assert (=> b!63060 (=> (not res!34530) (not e!41359))))

(assert (=> b!63060 (= res!34530 (= (getValueByKey!127 (toList!691 lt!26475) (_1!1027 (tuple2!2033 lt!26092 (minValue!1999 newMap!16)))) (Some!132 (_2!1027 (tuple2!2033 lt!26092 (minValue!1999 newMap!16))))))))

(declare-fun b!63061 () Bool)

(assert (=> b!63061 (= e!41359 (contains!689 (toList!691 lt!26475) (tuple2!2033 lt!26092 (minValue!1999 newMap!16))))))

(assert (= (and d!12889 res!34529) b!63060))

(assert (= (and b!63060 res!34530) b!63061))

(declare-fun m!56913 () Bool)

(assert (=> d!12889 m!56913))

(declare-fun m!56915 () Bool)

(assert (=> d!12889 m!56915))

(declare-fun m!56917 () Bool)

(assert (=> d!12889 m!56917))

(declare-fun m!56919 () Bool)

(assert (=> d!12889 m!56919))

(declare-fun m!56921 () Bool)

(assert (=> b!63060 m!56921))

(declare-fun m!56923 () Bool)

(assert (=> b!63061 m!56923))

(assert (=> b!62520 d!12889))

(declare-fun bm!4984 () Bool)

(declare-fun call!4987 () ListLongMap!1351)

(assert (=> bm!4984 (= call!4987 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2087 newMap!16)))))

(declare-fun b!63062 () Bool)

(declare-fun e!41360 () Bool)

(assert (=> b!63062 (= e!41360 (validKeyInArray!0 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63062 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!63063 () Bool)

(declare-fun e!41364 () ListLongMap!1351)

(declare-fun e!41366 () ListLongMap!1351)

(assert (=> b!63063 (= e!41364 e!41366)))

(declare-fun c!8486 () Bool)

(assert (=> b!63063 (= c!8486 (validKeyInArray!0 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63064 () Bool)

(declare-fun e!41365 () Bool)

(declare-fun e!41363 () Bool)

(assert (=> b!63064 (= e!41365 e!41363)))

(assert (=> b!63064 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun res!34531 () Bool)

(declare-fun lt!26480 () ListLongMap!1351)

(assert (=> b!63064 (= res!34531 (contains!686 lt!26480 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63064 (=> (not res!34531) (not e!41363))))

(declare-fun b!63065 () Bool)

(assert (=> b!63065 (= e!41364 (ListLongMap!1352 Nil!1426))))

(declare-fun b!63066 () Bool)

(declare-fun e!41361 () Bool)

(assert (=> b!63066 (= e!41365 e!41361)))

(declare-fun c!8485 () Bool)

(assert (=> b!63066 (= c!8485 (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun b!63067 () Bool)

(assert (=> b!63067 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(assert (=> b!63067 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (_values!2070 newMap!16))))))

(assert (=> b!63067 (= e!41363 (= (apply!68 lt!26480 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)) (get!1088 (select (arr!1791 (_values!2070 newMap!16)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!63068 () Bool)

(declare-fun e!41362 () Bool)

(assert (=> b!63068 (= e!41362 e!41365)))

(declare-fun c!8487 () Bool)

(assert (=> b!63068 (= c!8487 e!41360)))

(declare-fun res!34534 () Bool)

(assert (=> b!63068 (=> (not res!34534) (not e!41360))))

(assert (=> b!63068 (= res!34534 (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun b!63070 () Bool)

(assert (=> b!63070 (= e!41361 (= lt!26480 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2087 newMap!16))))))

(declare-fun b!63071 () Bool)

(assert (=> b!63071 (= e!41366 call!4987)))

(declare-fun b!63072 () Bool)

(declare-fun lt!26482 () Unit!1680)

(declare-fun lt!26479 () Unit!1680)

(assert (=> b!63072 (= lt!26482 lt!26479)))

(declare-fun lt!26484 () ListLongMap!1351)

(declare-fun lt!26483 () V!2865)

(declare-fun lt!26481 () (_ BitVec 64))

(declare-fun lt!26478 () (_ BitVec 64))

(assert (=> b!63072 (not (contains!686 (+!82 lt!26484 (tuple2!2033 lt!26481 lt!26483)) lt!26478))))

(assert (=> b!63072 (= lt!26479 (addStillNotContains!19 lt!26484 lt!26481 lt!26483 lt!26478))))

(assert (=> b!63072 (= lt!26478 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!63072 (= lt!26483 (get!1088 (select (arr!1791 (_values!2070 newMap!16)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!63072 (= lt!26481 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!63072 (= lt!26484 call!4987)))

(assert (=> b!63072 (= e!41366 (+!82 call!4987 (tuple2!2033 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000) (get!1088 (select (arr!1791 (_values!2070 newMap!16)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!63073 () Bool)

(declare-fun res!34533 () Bool)

(assert (=> b!63073 (=> (not res!34533) (not e!41362))))

(assert (=> b!63073 (= res!34533 (not (contains!686 lt!26480 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!63069 () Bool)

(assert (=> b!63069 (= e!41361 (isEmpty!305 lt!26480))))

(declare-fun d!12891 () Bool)

(assert (=> d!12891 e!41362))

(declare-fun res!34532 () Bool)

(assert (=> d!12891 (=> (not res!34532) (not e!41362))))

(assert (=> d!12891 (= res!34532 (not (contains!686 lt!26480 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12891 (= lt!26480 e!41364)))

(declare-fun c!8484 () Bool)

(assert (=> d!12891 (= c!8484 (bvsge #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(assert (=> d!12891 (validMask!0 (mask!5993 newMap!16))))

(assert (=> d!12891 (= (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) lt!26480)))

(assert (= (and d!12891 c!8484) b!63065))

(assert (= (and d!12891 (not c!8484)) b!63063))

(assert (= (and b!63063 c!8486) b!63072))

(assert (= (and b!63063 (not c!8486)) b!63071))

(assert (= (or b!63072 b!63071) bm!4984))

(assert (= (and d!12891 res!34532) b!63073))

(assert (= (and b!63073 res!34533) b!63068))

(assert (= (and b!63068 res!34534) b!63062))

(assert (= (and b!63068 c!8487) b!63064))

(assert (= (and b!63068 (not c!8487)) b!63066))

(assert (= (and b!63064 res!34531) b!63067))

(assert (= (and b!63066 c!8485) b!63070))

(assert (= (and b!63066 (not c!8485)) b!63069))

(declare-fun b_lambda!2819 () Bool)

(assert (=> (not b_lambda!2819) (not b!63067)))

(assert (=> b!63067 t!4828))

(declare-fun b_and!3857 () Bool)

(assert (= b_and!3853 (and (=> t!4828 result!2455) b_and!3857)))

(assert (=> b!63067 t!4830))

(declare-fun b_and!3859 () Bool)

(assert (= b_and!3855 (and (=> t!4830 result!2457) b_and!3859)))

(declare-fun b_lambda!2821 () Bool)

(assert (=> (not b_lambda!2821) (not b!63072)))

(assert (=> b!63072 t!4828))

(declare-fun b_and!3861 () Bool)

(assert (= b_and!3857 (and (=> t!4828 result!2455) b_and!3861)))

(assert (=> b!63072 t!4830))

(declare-fun b_and!3863 () Bool)

(assert (= b_and!3859 (and (=> t!4830 result!2457) b_and!3863)))

(assert (=> b!63067 m!56073))

(assert (=> b!63067 m!56033))

(declare-fun m!56925 () Bool)

(assert (=> b!63067 m!56925))

(assert (=> b!63067 m!56075))

(assert (=> b!63067 m!56073))

(assert (=> b!63067 m!56077))

(assert (=> b!63067 m!56033))

(assert (=> b!63067 m!56075))

(declare-fun m!56927 () Bool)

(assert (=> b!63072 m!56927))

(declare-fun m!56929 () Bool)

(assert (=> b!63072 m!56929))

(declare-fun m!56931 () Bool)

(assert (=> b!63072 m!56931))

(assert (=> b!63072 m!56075))

(assert (=> b!63072 m!56073))

(assert (=> b!63072 m!56077))

(declare-fun m!56933 () Bool)

(assert (=> b!63072 m!56933))

(assert (=> b!63072 m!56033))

(assert (=> b!63072 m!56075))

(assert (=> b!63072 m!56927))

(assert (=> b!63072 m!56073))

(declare-fun m!56935 () Bool)

(assert (=> b!63070 m!56935))

(declare-fun m!56937 () Bool)

(assert (=> b!63073 m!56937))

(declare-fun m!56939 () Bool)

(assert (=> b!63069 m!56939))

(assert (=> b!63063 m!56033))

(assert (=> b!63063 m!56033))

(assert (=> b!63063 m!56065))

(assert (=> bm!4984 m!56935))

(assert (=> b!63064 m!56033))

(assert (=> b!63064 m!56033))

(declare-fun m!56941 () Bool)

(assert (=> b!63064 m!56941))

(declare-fun m!56943 () Bool)

(assert (=> d!12891 m!56943))

(assert (=> d!12891 m!55995))

(assert (=> b!63062 m!56033))

(assert (=> b!63062 m!56033))

(assert (=> b!63062 m!56065))

(assert (=> b!62520 d!12891))

(declare-fun d!12893 () Bool)

(declare-fun e!41367 () Bool)

(assert (=> d!12893 e!41367))

(declare-fun res!34535 () Bool)

(assert (=> d!12893 (=> (not res!34535) (not e!41367))))

(declare-fun lt!26486 () ListLongMap!1351)

(assert (=> d!12893 (= res!34535 (contains!686 lt!26486 (_1!1027 (tuple2!2033 lt!26094 (zeroValue!1999 newMap!16)))))))

(declare-fun lt!26487 () List!1429)

(assert (=> d!12893 (= lt!26486 (ListLongMap!1352 lt!26487))))

(declare-fun lt!26485 () Unit!1680)

(declare-fun lt!26488 () Unit!1680)

(assert (=> d!12893 (= lt!26485 lt!26488)))

(assert (=> d!12893 (= (getValueByKey!127 lt!26487 (_1!1027 (tuple2!2033 lt!26094 (zeroValue!1999 newMap!16)))) (Some!132 (_2!1027 (tuple2!2033 lt!26094 (zeroValue!1999 newMap!16)))))))

(assert (=> d!12893 (= lt!26488 (lemmaContainsTupThenGetReturnValue!44 lt!26487 (_1!1027 (tuple2!2033 lt!26094 (zeroValue!1999 newMap!16))) (_2!1027 (tuple2!2033 lt!26094 (zeroValue!1999 newMap!16)))))))

(assert (=> d!12893 (= lt!26487 (insertStrictlySorted!47 (toList!691 lt!26098) (_1!1027 (tuple2!2033 lt!26094 (zeroValue!1999 newMap!16))) (_2!1027 (tuple2!2033 lt!26094 (zeroValue!1999 newMap!16)))))))

(assert (=> d!12893 (= (+!82 lt!26098 (tuple2!2033 lt!26094 (zeroValue!1999 newMap!16))) lt!26486)))

(declare-fun b!63074 () Bool)

(declare-fun res!34536 () Bool)

(assert (=> b!63074 (=> (not res!34536) (not e!41367))))

(assert (=> b!63074 (= res!34536 (= (getValueByKey!127 (toList!691 lt!26486) (_1!1027 (tuple2!2033 lt!26094 (zeroValue!1999 newMap!16)))) (Some!132 (_2!1027 (tuple2!2033 lt!26094 (zeroValue!1999 newMap!16))))))))

(declare-fun b!63075 () Bool)

(assert (=> b!63075 (= e!41367 (contains!689 (toList!691 lt!26486) (tuple2!2033 lt!26094 (zeroValue!1999 newMap!16))))))

(assert (= (and d!12893 res!34535) b!63074))

(assert (= (and b!63074 res!34536) b!63075))

(declare-fun m!56945 () Bool)

(assert (=> d!12893 m!56945))

(declare-fun m!56947 () Bool)

(assert (=> d!12893 m!56947))

(declare-fun m!56949 () Bool)

(assert (=> d!12893 m!56949))

(declare-fun m!56951 () Bool)

(assert (=> d!12893 m!56951))

(declare-fun m!56953 () Bool)

(assert (=> b!63074 m!56953))

(declare-fun m!56955 () Bool)

(assert (=> b!63075 m!56955))

(assert (=> b!62520 d!12893))

(declare-fun d!12895 () Bool)

(assert (=> d!12895 (= (apply!68 (+!82 lt!26084 (tuple2!2033 lt!26092 (minValue!1999 newMap!16))) lt!26083) (apply!68 lt!26084 lt!26083))))

(declare-fun lt!26489 () Unit!1680)

(assert (=> d!12895 (= lt!26489 (choose!339 lt!26084 lt!26092 (minValue!1999 newMap!16) lt!26083))))

(declare-fun e!41368 () Bool)

(assert (=> d!12895 e!41368))

(declare-fun res!34537 () Bool)

(assert (=> d!12895 (=> (not res!34537) (not e!41368))))

(assert (=> d!12895 (= res!34537 (contains!686 lt!26084 lt!26083))))

(assert (=> d!12895 (= (addApplyDifferent!44 lt!26084 lt!26092 (minValue!1999 newMap!16) lt!26083) lt!26489)))

(declare-fun b!63076 () Bool)

(assert (=> b!63076 (= e!41368 (not (= lt!26083 lt!26092)))))

(assert (= (and d!12895 res!34537) b!63076))

(assert (=> d!12895 m!56027))

(assert (=> d!12895 m!56031))

(assert (=> d!12895 m!56027))

(declare-fun m!56957 () Bool)

(assert (=> d!12895 m!56957))

(assert (=> d!12895 m!56045))

(declare-fun m!56959 () Bool)

(assert (=> d!12895 m!56959))

(assert (=> b!62520 d!12895))

(declare-fun d!12897 () Bool)

(assert (=> d!12897 (= (apply!68 (+!82 lt!26093 (tuple2!2033 lt!26082 (minValue!1999 newMap!16))) lt!26096) (get!1092 (getValueByKey!127 (toList!691 (+!82 lt!26093 (tuple2!2033 lt!26082 (minValue!1999 newMap!16)))) lt!26096)))))

(declare-fun bs!2748 () Bool)

(assert (= bs!2748 d!12897))

(declare-fun m!56961 () Bool)

(assert (=> bs!2748 m!56961))

(assert (=> bs!2748 m!56961))

(declare-fun m!56963 () Bool)

(assert (=> bs!2748 m!56963))

(assert (=> b!62520 d!12897))

(declare-fun d!12899 () Bool)

(assert (=> d!12899 (= (apply!68 lt!26098 lt!26081) (get!1092 (getValueByKey!127 (toList!691 lt!26098) lt!26081)))))

(declare-fun bs!2749 () Bool)

(assert (= bs!2749 d!12899))

(declare-fun m!56965 () Bool)

(assert (=> bs!2749 m!56965))

(assert (=> bs!2749 m!56965))

(declare-fun m!56967 () Bool)

(assert (=> bs!2749 m!56967))

(assert (=> b!62520 d!12899))

(declare-fun d!12901 () Bool)

(declare-fun e!41370 () Bool)

(assert (=> d!12901 e!41370))

(declare-fun res!34538 () Bool)

(assert (=> d!12901 (=> res!34538 e!41370)))

(declare-fun lt!26491 () Bool)

(assert (=> d!12901 (= res!34538 (not lt!26491))))

(declare-fun lt!26492 () Bool)

(assert (=> d!12901 (= lt!26491 lt!26492)))

(declare-fun lt!26490 () Unit!1680)

(declare-fun e!41369 () Unit!1680)

(assert (=> d!12901 (= lt!26490 e!41369)))

(declare-fun c!8488 () Bool)

(assert (=> d!12901 (= c!8488 lt!26492)))

(assert (=> d!12901 (= lt!26492 (containsKey!130 (toList!691 (+!82 lt!26095 (tuple2!2033 lt!26091 (zeroValue!1999 newMap!16)))) lt!26085))))

(assert (=> d!12901 (= (contains!686 (+!82 lt!26095 (tuple2!2033 lt!26091 (zeroValue!1999 newMap!16))) lt!26085) lt!26491)))

(declare-fun b!63077 () Bool)

(declare-fun lt!26493 () Unit!1680)

(assert (=> b!63077 (= e!41369 lt!26493)))

(assert (=> b!63077 (= lt!26493 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 (+!82 lt!26095 (tuple2!2033 lt!26091 (zeroValue!1999 newMap!16)))) lt!26085))))

(assert (=> b!63077 (isDefined!79 (getValueByKey!127 (toList!691 (+!82 lt!26095 (tuple2!2033 lt!26091 (zeroValue!1999 newMap!16)))) lt!26085))))

(declare-fun b!63078 () Bool)

(declare-fun Unit!1714 () Unit!1680)

(assert (=> b!63078 (= e!41369 Unit!1714)))

(declare-fun b!63079 () Bool)

(assert (=> b!63079 (= e!41370 (isDefined!79 (getValueByKey!127 (toList!691 (+!82 lt!26095 (tuple2!2033 lt!26091 (zeroValue!1999 newMap!16)))) lt!26085)))))

(assert (= (and d!12901 c!8488) b!63077))

(assert (= (and d!12901 (not c!8488)) b!63078))

(assert (= (and d!12901 (not res!34538)) b!63079))

(declare-fun m!56969 () Bool)

(assert (=> d!12901 m!56969))

(declare-fun m!56971 () Bool)

(assert (=> b!63077 m!56971))

(declare-fun m!56973 () Bool)

(assert (=> b!63077 m!56973))

(assert (=> b!63077 m!56973))

(declare-fun m!56975 () Bool)

(assert (=> b!63077 m!56975))

(assert (=> b!63079 m!56973))

(assert (=> b!63079 m!56973))

(assert (=> b!63079 m!56975))

(assert (=> b!62520 d!12901))

(declare-fun d!12903 () Bool)

(assert (=> d!12903 (= (apply!68 lt!26093 lt!26096) (get!1092 (getValueByKey!127 (toList!691 lt!26093) lt!26096)))))

(declare-fun bs!2750 () Bool)

(assert (= bs!2750 d!12903))

(declare-fun m!56977 () Bool)

(assert (=> bs!2750 m!56977))

(assert (=> bs!2750 m!56977))

(declare-fun m!56979 () Bool)

(assert (=> bs!2750 m!56979))

(assert (=> b!62520 d!12903))

(declare-fun d!12905 () Bool)

(declare-fun e!41371 () Bool)

(assert (=> d!12905 e!41371))

(declare-fun res!34539 () Bool)

(assert (=> d!12905 (=> (not res!34539) (not e!41371))))

(declare-fun lt!26495 () ListLongMap!1351)

(assert (=> d!12905 (= res!34539 (contains!686 lt!26495 (_1!1027 (tuple2!2033 lt!26082 (minValue!1999 newMap!16)))))))

(declare-fun lt!26496 () List!1429)

(assert (=> d!12905 (= lt!26495 (ListLongMap!1352 lt!26496))))

(declare-fun lt!26494 () Unit!1680)

(declare-fun lt!26497 () Unit!1680)

(assert (=> d!12905 (= lt!26494 lt!26497)))

(assert (=> d!12905 (= (getValueByKey!127 lt!26496 (_1!1027 (tuple2!2033 lt!26082 (minValue!1999 newMap!16)))) (Some!132 (_2!1027 (tuple2!2033 lt!26082 (minValue!1999 newMap!16)))))))

(assert (=> d!12905 (= lt!26497 (lemmaContainsTupThenGetReturnValue!44 lt!26496 (_1!1027 (tuple2!2033 lt!26082 (minValue!1999 newMap!16))) (_2!1027 (tuple2!2033 lt!26082 (minValue!1999 newMap!16)))))))

(assert (=> d!12905 (= lt!26496 (insertStrictlySorted!47 (toList!691 lt!26093) (_1!1027 (tuple2!2033 lt!26082 (minValue!1999 newMap!16))) (_2!1027 (tuple2!2033 lt!26082 (minValue!1999 newMap!16)))))))

(assert (=> d!12905 (= (+!82 lt!26093 (tuple2!2033 lt!26082 (minValue!1999 newMap!16))) lt!26495)))

(declare-fun b!63080 () Bool)

(declare-fun res!34540 () Bool)

(assert (=> b!63080 (=> (not res!34540) (not e!41371))))

(assert (=> b!63080 (= res!34540 (= (getValueByKey!127 (toList!691 lt!26495) (_1!1027 (tuple2!2033 lt!26082 (minValue!1999 newMap!16)))) (Some!132 (_2!1027 (tuple2!2033 lt!26082 (minValue!1999 newMap!16))))))))

(declare-fun b!63081 () Bool)

(assert (=> b!63081 (= e!41371 (contains!689 (toList!691 lt!26495) (tuple2!2033 lt!26082 (minValue!1999 newMap!16))))))

(assert (= (and d!12905 res!34539) b!63080))

(assert (= (and b!63080 res!34540) b!63081))

(declare-fun m!56981 () Bool)

(assert (=> d!12905 m!56981))

(declare-fun m!56983 () Bool)

(assert (=> d!12905 m!56983))

(declare-fun m!56985 () Bool)

(assert (=> d!12905 m!56985))

(declare-fun m!56987 () Bool)

(assert (=> d!12905 m!56987))

(declare-fun m!56989 () Bool)

(assert (=> b!63080 m!56989))

(declare-fun m!56991 () Bool)

(assert (=> b!63081 m!56991))

(assert (=> b!62520 d!12905))

(declare-fun d!12907 () Bool)

(declare-fun e!41372 () Bool)

(assert (=> d!12907 e!41372))

(declare-fun res!34541 () Bool)

(assert (=> d!12907 (=> (not res!34541) (not e!41372))))

(declare-fun lt!26499 () ListLongMap!1351)

(assert (=> d!12907 (= res!34541 (contains!686 lt!26499 (_1!1027 (tuple2!2033 lt!26091 (zeroValue!1999 newMap!16)))))))

(declare-fun lt!26500 () List!1429)

(assert (=> d!12907 (= lt!26499 (ListLongMap!1352 lt!26500))))

(declare-fun lt!26498 () Unit!1680)

(declare-fun lt!26501 () Unit!1680)

(assert (=> d!12907 (= lt!26498 lt!26501)))

(assert (=> d!12907 (= (getValueByKey!127 lt!26500 (_1!1027 (tuple2!2033 lt!26091 (zeroValue!1999 newMap!16)))) (Some!132 (_2!1027 (tuple2!2033 lt!26091 (zeroValue!1999 newMap!16)))))))

(assert (=> d!12907 (= lt!26501 (lemmaContainsTupThenGetReturnValue!44 lt!26500 (_1!1027 (tuple2!2033 lt!26091 (zeroValue!1999 newMap!16))) (_2!1027 (tuple2!2033 lt!26091 (zeroValue!1999 newMap!16)))))))

(assert (=> d!12907 (= lt!26500 (insertStrictlySorted!47 (toList!691 lt!26095) (_1!1027 (tuple2!2033 lt!26091 (zeroValue!1999 newMap!16))) (_2!1027 (tuple2!2033 lt!26091 (zeroValue!1999 newMap!16)))))))

(assert (=> d!12907 (= (+!82 lt!26095 (tuple2!2033 lt!26091 (zeroValue!1999 newMap!16))) lt!26499)))

(declare-fun b!63082 () Bool)

(declare-fun res!34542 () Bool)

(assert (=> b!63082 (=> (not res!34542) (not e!41372))))

(assert (=> b!63082 (= res!34542 (= (getValueByKey!127 (toList!691 lt!26499) (_1!1027 (tuple2!2033 lt!26091 (zeroValue!1999 newMap!16)))) (Some!132 (_2!1027 (tuple2!2033 lt!26091 (zeroValue!1999 newMap!16))))))))

(declare-fun b!63083 () Bool)

(assert (=> b!63083 (= e!41372 (contains!689 (toList!691 lt!26499) (tuple2!2033 lt!26091 (zeroValue!1999 newMap!16))))))

(assert (= (and d!12907 res!34541) b!63082))

(assert (= (and b!63082 res!34542) b!63083))

(declare-fun m!56993 () Bool)

(assert (=> d!12907 m!56993))

(declare-fun m!56995 () Bool)

(assert (=> d!12907 m!56995))

(declare-fun m!56997 () Bool)

(assert (=> d!12907 m!56997))

(declare-fun m!56999 () Bool)

(assert (=> d!12907 m!56999))

(declare-fun m!57001 () Bool)

(assert (=> b!63082 m!57001))

(declare-fun m!57003 () Bool)

(assert (=> b!63083 m!57003))

(assert (=> b!62520 d!12907))

(declare-fun d!12909 () Bool)

(assert (=> d!12909 (= (apply!68 lt!26084 lt!26083) (get!1092 (getValueByKey!127 (toList!691 lt!26084) lt!26083)))))

(declare-fun bs!2751 () Bool)

(assert (= bs!2751 d!12909))

(declare-fun m!57005 () Bool)

(assert (=> bs!2751 m!57005))

(assert (=> bs!2751 m!57005))

(declare-fun m!57007 () Bool)

(assert (=> bs!2751 m!57007))

(assert (=> b!62520 d!12909))

(declare-fun b!63084 () Bool)

(declare-fun e!41373 () Option!133)

(assert (=> b!63084 (= e!41373 (Some!132 (_2!1027 (h!2008 (toList!691 lt!26152)))))))

(declare-fun d!12911 () Bool)

(declare-fun c!8489 () Bool)

(assert (=> d!12911 (= c!8489 (and ((_ is Cons!1425) (toList!691 lt!26152)) (= (_1!1027 (h!2008 (toList!691 lt!26152))) (_1!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> d!12911 (= (getValueByKey!127 (toList!691 lt!26152) (_1!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))) e!41373)))

(declare-fun b!63085 () Bool)

(declare-fun e!41374 () Option!133)

(assert (=> b!63085 (= e!41373 e!41374)))

(declare-fun c!8490 () Bool)

(assert (=> b!63085 (= c!8490 (and ((_ is Cons!1425) (toList!691 lt!26152)) (not (= (_1!1027 (h!2008 (toList!691 lt!26152))) (_1!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))))))

(declare-fun b!63086 () Bool)

(assert (=> b!63086 (= e!41374 (getValueByKey!127 (t!4815 (toList!691 lt!26152)) (_1!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63087 () Bool)

(assert (=> b!63087 (= e!41374 None!131)))

(assert (= (and d!12911 c!8489) b!63084))

(assert (= (and d!12911 (not c!8489)) b!63085))

(assert (= (and b!63085 c!8490) b!63086))

(assert (= (and b!63085 (not c!8490)) b!63087))

(declare-fun m!57009 () Bool)

(assert (=> b!63086 m!57009))

(assert (=> b!62616 d!12911))

(declare-fun d!12913 () Bool)

(assert (=> d!12913 (= (isDefined!79 (getValueByKey!127 (toList!691 lt!26027) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (not (isEmpty!306 (getValueByKey!127 (toList!691 lt!26027) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun bs!2752 () Bool)

(assert (= bs!2752 d!12913))

(assert (=> bs!2752 m!56019))

(declare-fun m!57011 () Bool)

(assert (=> bs!2752 m!57011))

(assert (=> b!62569 d!12913))

(declare-fun b!63088 () Bool)

(declare-fun e!41375 () Option!133)

(assert (=> b!63088 (= e!41375 (Some!132 (_2!1027 (h!2008 (toList!691 lt!26027)))))))

(declare-fun d!12915 () Bool)

(declare-fun c!8491 () Bool)

(assert (=> d!12915 (= c!8491 (and ((_ is Cons!1425) (toList!691 lt!26027)) (= (_1!1027 (h!2008 (toList!691 lt!26027))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!12915 (= (getValueByKey!127 (toList!691 lt!26027) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!41375)))

(declare-fun b!63089 () Bool)

(declare-fun e!41376 () Option!133)

(assert (=> b!63089 (= e!41375 e!41376)))

(declare-fun c!8492 () Bool)

(assert (=> b!63089 (= c!8492 (and ((_ is Cons!1425) (toList!691 lt!26027)) (not (= (_1!1027 (h!2008 (toList!691 lt!26027))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun b!63090 () Bool)

(assert (=> b!63090 (= e!41376 (getValueByKey!127 (t!4815 (toList!691 lt!26027)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!63091 () Bool)

(assert (=> b!63091 (= e!41376 None!131)))

(assert (= (and d!12915 c!8491) b!63088))

(assert (= (and d!12915 (not c!8491)) b!63089))

(assert (= (and b!63089 c!8492) b!63090))

(assert (= (and b!63089 (not c!8492)) b!63091))

(assert (=> b!63090 m!55903))

(declare-fun m!57013 () Bool)

(assert (=> b!63090 m!57013))

(assert (=> b!62569 d!12915))

(declare-fun d!12917 () Bool)

(declare-fun e!41377 () Bool)

(assert (=> d!12917 e!41377))

(declare-fun res!34543 () Bool)

(assert (=> d!12917 (=> (not res!34543) (not e!41377))))

(declare-fun lt!26503 () ListLongMap!1351)

(assert (=> d!12917 (= res!34543 (contains!686 lt!26503 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))))))

(declare-fun lt!26504 () List!1429)

(assert (=> d!12917 (= lt!26503 (ListLongMap!1352 lt!26504))))

(declare-fun lt!26502 () Unit!1680)

(declare-fun lt!26505 () Unit!1680)

(assert (=> d!12917 (= lt!26502 lt!26505)))

(assert (=> d!12917 (= (getValueByKey!127 lt!26504 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))) (Some!132 (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))))))

(assert (=> d!12917 (= lt!26505 (lemmaContainsTupThenGetReturnValue!44 lt!26504 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))))))

(assert (=> d!12917 (= lt!26504 (insertStrictlySorted!47 (toList!691 call!4919) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))))))

(assert (=> d!12917 (= (+!82 call!4919 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))) lt!26503)))

(declare-fun b!63092 () Bool)

(declare-fun res!34544 () Bool)

(assert (=> b!63092 (=> (not res!34544) (not e!41377))))

(assert (=> b!63092 (= res!34544 (= (getValueByKey!127 (toList!691 lt!26503) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))) (Some!132 (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))))))))

(declare-fun b!63093 () Bool)

(assert (=> b!63093 (= e!41377 (contains!689 (toList!691 lt!26503) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))))))

(assert (= (and d!12917 res!34543) b!63092))

(assert (= (and b!63092 res!34544) b!63093))

(declare-fun m!57015 () Bool)

(assert (=> d!12917 m!57015))

(declare-fun m!57017 () Bool)

(assert (=> d!12917 m!57017))

(declare-fun m!57019 () Bool)

(assert (=> d!12917 m!57019))

(declare-fun m!57021 () Bool)

(assert (=> d!12917 m!57021))

(declare-fun m!57023 () Bool)

(assert (=> b!63092 m!57023))

(declare-fun m!57025 () Bool)

(assert (=> b!63093 m!57025))

(assert (=> b!62634 d!12917))

(declare-fun d!12919 () Bool)

(assert (=> d!12919 (arrayContainsKey!0 (_keys!3719 newMap!16) lt!26114 #b00000000000000000000000000000000)))

(declare-fun lt!26508 () Unit!1680)

(declare-fun choose!13 (array!3743 (_ BitVec 64) (_ BitVec 32)) Unit!1680)

(assert (=> d!12919 (= lt!26508 (choose!13 (_keys!3719 newMap!16) lt!26114 #b00000000000000000000000000000000))))

(assert (=> d!12919 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (=> d!12919 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3719 newMap!16) lt!26114 #b00000000000000000000000000000000) lt!26508)))

(declare-fun bs!2753 () Bool)

(assert (= bs!2753 d!12919))

(assert (=> bs!2753 m!56111))

(declare-fun m!57027 () Bool)

(assert (=> bs!2753 m!57027))

(assert (=> b!62566 d!12919))

(declare-fun d!12921 () Bool)

(declare-fun res!34545 () Bool)

(declare-fun e!41378 () Bool)

(assert (=> d!12921 (=> res!34545 e!41378)))

(assert (=> d!12921 (= res!34545 (= (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000) lt!26114))))

(assert (=> d!12921 (= (arrayContainsKey!0 (_keys!3719 newMap!16) lt!26114 #b00000000000000000000000000000000) e!41378)))

(declare-fun b!63094 () Bool)

(declare-fun e!41379 () Bool)

(assert (=> b!63094 (= e!41378 e!41379)))

(declare-fun res!34546 () Bool)

(assert (=> b!63094 (=> (not res!34546) (not e!41379))))

(assert (=> b!63094 (= res!34546 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2022 (_keys!3719 newMap!16))))))

(declare-fun b!63095 () Bool)

(assert (=> b!63095 (= e!41379 (arrayContainsKey!0 (_keys!3719 newMap!16) lt!26114 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!12921 (not res!34545)) b!63094))

(assert (= (and b!63094 res!34546) b!63095))

(assert (=> d!12921 m!56033))

(declare-fun m!57029 () Bool)

(assert (=> b!63095 m!57029))

(assert (=> b!62566 d!12921))

(declare-fun b!63097 () Bool)

(declare-fun c!8494 () Bool)

(declare-fun lt!26509 () (_ BitVec 64))

(assert (=> b!63097 (= c!8494 (= lt!26509 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!41381 () SeekEntryResult!223)

(declare-fun e!41382 () SeekEntryResult!223)

(assert (=> b!63097 (= e!41381 e!41382)))

(declare-fun b!63098 () Bool)

(declare-fun lt!26510 () SeekEntryResult!223)

(assert (=> b!63098 (= e!41382 (seekKeyOrZeroReturnVacant!0 (x!10301 lt!26510) (index!3019 lt!26510) (index!3019 lt!26510) (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000) (_keys!3719 newMap!16) (mask!5993 newMap!16)))))

(declare-fun b!63099 () Bool)

(assert (=> b!63099 (= e!41382 (MissingZero!223 (index!3019 lt!26510)))))

(declare-fun b!63100 () Bool)

(assert (=> b!63100 (= e!41381 (Found!223 (index!3019 lt!26510)))))

(declare-fun b!63101 () Bool)

(declare-fun e!41380 () SeekEntryResult!223)

(assert (=> b!63101 (= e!41380 e!41381)))

(assert (=> b!63101 (= lt!26509 (select (arr!1790 (_keys!3719 newMap!16)) (index!3019 lt!26510)))))

(declare-fun c!8495 () Bool)

(assert (=> b!63101 (= c!8495 (= lt!26509 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun d!12923 () Bool)

(declare-fun lt!26511 () SeekEntryResult!223)

(assert (=> d!12923 (and (or ((_ is Undefined!223) lt!26511) (not ((_ is Found!223) lt!26511)) (and (bvsge (index!3018 lt!26511) #b00000000000000000000000000000000) (bvslt (index!3018 lt!26511) (size!2022 (_keys!3719 newMap!16))))) (or ((_ is Undefined!223) lt!26511) ((_ is Found!223) lt!26511) (not ((_ is MissingZero!223) lt!26511)) (and (bvsge (index!3017 lt!26511) #b00000000000000000000000000000000) (bvslt (index!3017 lt!26511) (size!2022 (_keys!3719 newMap!16))))) (or ((_ is Undefined!223) lt!26511) ((_ is Found!223) lt!26511) ((_ is MissingZero!223) lt!26511) (not ((_ is MissingVacant!223) lt!26511)) (and (bvsge (index!3020 lt!26511) #b00000000000000000000000000000000) (bvslt (index!3020 lt!26511) (size!2022 (_keys!3719 newMap!16))))) (or ((_ is Undefined!223) lt!26511) (ite ((_ is Found!223) lt!26511) (= (select (arr!1790 (_keys!3719 newMap!16)) (index!3018 lt!26511)) (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)) (ite ((_ is MissingZero!223) lt!26511) (= (select (arr!1790 (_keys!3719 newMap!16)) (index!3017 lt!26511)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!223) lt!26511) (= (select (arr!1790 (_keys!3719 newMap!16)) (index!3020 lt!26511)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12923 (= lt!26511 e!41380)))

(declare-fun c!8493 () Bool)

(assert (=> d!12923 (= c!8493 (and ((_ is Intermediate!223) lt!26510) (undefined!1035 lt!26510)))))

(assert (=> d!12923 (= lt!26510 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000) (mask!5993 newMap!16)) (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000) (_keys!3719 newMap!16) (mask!5993 newMap!16)))))

(assert (=> d!12923 (validMask!0 (mask!5993 newMap!16))))

(assert (=> d!12923 (= (seekEntryOrOpen!0 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000) (_keys!3719 newMap!16) (mask!5993 newMap!16)) lt!26511)))

(declare-fun b!63096 () Bool)

(assert (=> b!63096 (= e!41380 Undefined!223)))

(assert (= (and d!12923 c!8493) b!63096))

(assert (= (and d!12923 (not c!8493)) b!63101))

(assert (= (and b!63101 c!8495) b!63100))

(assert (= (and b!63101 (not c!8495)) b!63097))

(assert (= (and b!63097 c!8494) b!63099))

(assert (= (and b!63097 (not c!8494)) b!63098))

(assert (=> b!63098 m!56033))

(declare-fun m!57031 () Bool)

(assert (=> b!63098 m!57031))

(declare-fun m!57033 () Bool)

(assert (=> b!63101 m!57033))

(declare-fun m!57035 () Bool)

(assert (=> d!12923 m!57035))

(assert (=> d!12923 m!56033))

(declare-fun m!57037 () Bool)

(assert (=> d!12923 m!57037))

(assert (=> d!12923 m!57037))

(assert (=> d!12923 m!56033))

(declare-fun m!57039 () Bool)

(assert (=> d!12923 m!57039))

(declare-fun m!57041 () Bool)

(assert (=> d!12923 m!57041))

(assert (=> d!12923 m!55995))

(declare-fun m!57043 () Bool)

(assert (=> d!12923 m!57043))

(assert (=> b!62566 d!12923))

(declare-fun d!12925 () Bool)

(assert (=> d!12925 (= (get!1092 (getValueByKey!127 (toList!691 (+!82 lt!26043 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26046)) (v!2425 (getValueByKey!127 (toList!691 (+!82 lt!26043 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26046)))))

(assert (=> d!12709 d!12925))

(declare-fun e!41383 () Option!133)

(declare-fun b!63102 () Bool)

(assert (=> b!63102 (= e!41383 (Some!132 (_2!1027 (h!2008 (toList!691 (+!82 lt!26043 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))))

(declare-fun c!8496 () Bool)

(declare-fun d!12927 () Bool)

(assert (=> d!12927 (= c!8496 (and ((_ is Cons!1425) (toList!691 (+!82 lt!26043 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))) (= (_1!1027 (h!2008 (toList!691 (+!82 lt!26043 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))) lt!26046)))))

(assert (=> d!12927 (= (getValueByKey!127 (toList!691 (+!82 lt!26043 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26046) e!41383)))

(declare-fun b!63103 () Bool)

(declare-fun e!41384 () Option!133)

(assert (=> b!63103 (= e!41383 e!41384)))

(declare-fun c!8497 () Bool)

(assert (=> b!63103 (= c!8497 (and ((_ is Cons!1425) (toList!691 (+!82 lt!26043 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))) (not (= (_1!1027 (h!2008 (toList!691 (+!82 lt!26043 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))) lt!26046))))))

(declare-fun b!63104 () Bool)

(assert (=> b!63104 (= e!41384 (getValueByKey!127 (t!4815 (toList!691 (+!82 lt!26043 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))) lt!26046))))

(declare-fun b!63105 () Bool)

(assert (=> b!63105 (= e!41384 None!131)))

(assert (= (and d!12927 c!8496) b!63102))

(assert (= (and d!12927 (not c!8496)) b!63103))

(assert (= (and b!63103 c!8497) b!63104))

(assert (= (and b!63103 (not c!8497)) b!63105))

(declare-fun m!57045 () Bool)

(assert (=> b!63104 m!57045))

(assert (=> d!12709 d!12927))

(declare-fun d!12929 () Bool)

(declare-fun res!34547 () Bool)

(declare-fun e!41385 () Bool)

(assert (=> d!12929 (=> res!34547 e!41385)))

(assert (=> d!12929 (= res!34547 (and ((_ is Cons!1425) (toList!691 call!4877)) (= (_1!1027 (h!2008 (toList!691 call!4877))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355))))))

(assert (=> d!12929 (= (containsKey!130 (toList!691 call!4877) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) e!41385)))

(declare-fun b!63106 () Bool)

(declare-fun e!41386 () Bool)

(assert (=> b!63106 (= e!41385 e!41386)))

(declare-fun res!34548 () Bool)

(assert (=> b!63106 (=> (not res!34548) (not e!41386))))

(assert (=> b!63106 (= res!34548 (and (or (not ((_ is Cons!1425) (toList!691 call!4877))) (bvsle (_1!1027 (h!2008 (toList!691 call!4877))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355))) ((_ is Cons!1425) (toList!691 call!4877)) (bvslt (_1!1027 (h!2008 (toList!691 call!4877))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355))))))

(declare-fun b!63107 () Bool)

(assert (=> b!63107 (= e!41386 (containsKey!130 (t!4815 (toList!691 call!4877)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (= (and d!12929 (not res!34547)) b!63106))

(assert (= (and b!63106 res!34548) b!63107))

(assert (=> b!63107 m!55703))

(declare-fun m!57047 () Bool)

(assert (=> b!63107 m!57047))

(assert (=> d!12669 d!12929))

(assert (=> d!12671 d!12793))

(assert (=> d!12711 d!12717))

(declare-fun d!12931 () Bool)

(declare-fun e!41389 () Bool)

(assert (=> d!12931 e!41389))

(declare-fun res!34554 () Bool)

(assert (=> d!12931 (=> (not res!34554) (not e!41389))))

(declare-fun lt!26514 () SeekEntryResult!223)

(assert (=> d!12931 (= res!34554 ((_ is Found!223) lt!26514))))

(assert (=> d!12931 (= lt!26514 (seekEntryOrOpen!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (_keys!3719 newMap!16) (mask!5993 newMap!16)))))

(assert (=> d!12931 true))

(declare-fun _$33!48 () Unit!1680)

(assert (=> d!12931 (= (choose!340 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (defaultEntry!2087 newMap!16)) _$33!48)))

(declare-fun b!63112 () Bool)

(declare-fun res!34553 () Bool)

(assert (=> b!63112 (=> (not res!34553) (not e!41389))))

(assert (=> b!63112 (= res!34553 (inRange!0 (index!3018 lt!26514) (mask!5993 newMap!16)))))

(declare-fun b!63113 () Bool)

(assert (=> b!63113 (= e!41389 (= (select (arr!1790 (_keys!3719 newMap!16)) (index!3018 lt!26514)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (= (and d!12931 res!34554) b!63112))

(assert (= (and b!63112 res!34553) b!63113))

(assert (=> d!12931 m!55703))

(assert (=> d!12931 m!55843))

(declare-fun m!57049 () Bool)

(assert (=> b!63112 m!57049))

(declare-fun m!57051 () Bool)

(assert (=> b!63113 m!57051))

(assert (=> d!12711 d!12931))

(assert (=> d!12711 d!12793))

(assert (=> b!62552 d!12789))

(declare-fun d!12933 () Bool)

(declare-fun res!34556 () Bool)

(declare-fun e!41393 () Bool)

(assert (=> d!12933 (=> res!34556 e!41393)))

(assert (=> d!12933 (= res!34556 (bvsge (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992))))))))

(assert (=> d!12933 (= (arrayNoDuplicates!0 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!8362 (Cons!1426 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!8326 (Cons!1426 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1427) Nil!1427)) (ite c!8326 (Cons!1426 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1427) Nil!1427))) e!41393)))

(declare-fun b!63114 () Bool)

(declare-fun e!41391 () Bool)

(declare-fun call!4988 () Bool)

(assert (=> b!63114 (= e!41391 call!4988)))

(declare-fun e!41390 () Bool)

(declare-fun b!63115 () Bool)

(assert (=> b!63115 (= e!41390 (contains!688 (ite c!8362 (Cons!1426 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!8326 (Cons!1426 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1427) Nil!1427)) (ite c!8326 (Cons!1426 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1427) Nil!1427)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun b!63116 () Bool)

(declare-fun e!41392 () Bool)

(assert (=> b!63116 (= e!41392 e!41391)))

(declare-fun c!8498 () Bool)

(assert (=> b!63116 (= c!8498 (validKeyInArray!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun bm!4985 () Bool)

(assert (=> bm!4985 (= call!4988 (arrayNoDuplicates!0 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!8498 (Cons!1426 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (ite c!8362 (Cons!1426 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!8326 (Cons!1426 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1427) Nil!1427)) (ite c!8326 (Cons!1426 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1427) Nil!1427))) (ite c!8362 (Cons!1426 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!8326 (Cons!1426 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1427) Nil!1427)) (ite c!8326 (Cons!1426 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1427) Nil!1427)))))))

(declare-fun b!63117 () Bool)

(assert (=> b!63117 (= e!41391 call!4988)))

(declare-fun b!63118 () Bool)

(assert (=> b!63118 (= e!41393 e!41392)))

(declare-fun res!34557 () Bool)

(assert (=> b!63118 (=> (not res!34557) (not e!41392))))

(assert (=> b!63118 (= res!34557 (not e!41390))))

(declare-fun res!34555 () Bool)

(assert (=> b!63118 (=> (not res!34555) (not e!41390))))

(assert (=> b!63118 (= res!34555 (validKeyInArray!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(assert (= (and d!12933 (not res!34556)) b!63118))

(assert (= (and b!63118 res!34555) b!63115))

(assert (= (and b!63118 res!34557) b!63116))

(assert (= (and b!63116 c!8498) b!63117))

(assert (= (and b!63116 (not c!8498)) b!63114))

(assert (= (or b!63117 b!63114) bm!4985))

(declare-fun m!57053 () Bool)

(assert (=> b!63115 m!57053))

(assert (=> b!63115 m!57053))

(declare-fun m!57055 () Bool)

(assert (=> b!63115 m!57055))

(assert (=> b!63116 m!57053))

(assert (=> b!63116 m!57053))

(declare-fun m!57057 () Bool)

(assert (=> b!63116 m!57057))

(assert (=> bm!4985 m!57053))

(declare-fun m!57059 () Bool)

(assert (=> bm!4985 m!57059))

(assert (=> b!63118 m!57053))

(assert (=> b!63118 m!57053))

(assert (=> b!63118 m!57057))

(assert (=> bm!4921 d!12933))

(declare-fun d!12935 () Bool)

(declare-fun res!34558 () Bool)

(declare-fun e!41394 () Bool)

(assert (=> d!12935 (=> res!34558 e!41394)))

(assert (=> d!12935 (= res!34558 (= (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> d!12935 (= (arrayContainsKey!0 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) e!41394)))

(declare-fun b!63119 () Bool)

(declare-fun e!41395 () Bool)

(assert (=> b!63119 (= e!41394 e!41395)))

(declare-fun res!34559 () Bool)

(assert (=> b!63119 (=> (not res!34559) (not e!41395))))

(assert (=> b!63119 (= res!34559 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun b!63120 () Bool)

(assert (=> b!63120 (= e!41395 (arrayContainsKey!0 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!12935 (not res!34558)) b!63119))

(assert (= (and b!63119 res!34559) b!63120))

(declare-fun m!57061 () Bool)

(assert (=> d!12935 m!57061))

(assert (=> b!63120 m!55703))

(declare-fun m!57063 () Bool)

(assert (=> b!63120 m!57063))

(assert (=> b!62502 d!12935))

(declare-fun lt!26515 () Bool)

(declare-fun d!12937 () Bool)

(assert (=> d!12937 (= lt!26515 (select (content!69 (toList!691 lt!26166)) (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun e!41397 () Bool)

(assert (=> d!12937 (= lt!26515 e!41397)))

(declare-fun res!34560 () Bool)

(assert (=> d!12937 (=> (not res!34560) (not e!41397))))

(assert (=> d!12937 (= res!34560 ((_ is Cons!1425) (toList!691 lt!26166)))))

(assert (=> d!12937 (= (contains!689 (toList!691 lt!26166) (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) lt!26515)))

(declare-fun b!63121 () Bool)

(declare-fun e!41396 () Bool)

(assert (=> b!63121 (= e!41397 e!41396)))

(declare-fun res!34561 () Bool)

(assert (=> b!63121 (=> res!34561 e!41396)))

(assert (=> b!63121 (= res!34561 (= (h!2008 (toList!691 lt!26166)) (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun b!63122 () Bool)

(assert (=> b!63122 (= e!41396 (contains!689 (t!4815 (toList!691 lt!26166)) (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))

(assert (= (and d!12937 res!34560) b!63121))

(assert (= (and b!63121 (not res!34561)) b!63122))

(declare-fun m!57065 () Bool)

(assert (=> d!12937 m!57065))

(declare-fun m!57067 () Bool)

(assert (=> d!12937 m!57067))

(declare-fun m!57069 () Bool)

(assert (=> b!63122 m!57069))

(assert (=> b!62626 d!12937))

(declare-fun d!12939 () Bool)

(declare-fun e!41399 () Bool)

(assert (=> d!12939 e!41399))

(declare-fun res!34562 () Bool)

(assert (=> d!12939 (=> res!34562 e!41399)))

(declare-fun lt!26517 () Bool)

(assert (=> d!12939 (= res!34562 (not lt!26517))))

(declare-fun lt!26518 () Bool)

(assert (=> d!12939 (= lt!26517 lt!26518)))

(declare-fun lt!26516 () Unit!1680)

(declare-fun e!41398 () Unit!1680)

(assert (=> d!12939 (= lt!26516 e!41398)))

(declare-fun c!8499 () Bool)

(assert (=> d!12939 (= c!8499 lt!26518)))

(assert (=> d!12939 (= lt!26518 (containsKey!130 (toList!691 lt!26146) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12939 (= (contains!686 lt!26146 #b0000000000000000000000000000000000000000000000000000000000000000) lt!26517)))

(declare-fun b!63123 () Bool)

(declare-fun lt!26519 () Unit!1680)

(assert (=> b!63123 (= e!41398 lt!26519)))

(assert (=> b!63123 (= lt!26519 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 lt!26146) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63123 (isDefined!79 (getValueByKey!127 (toList!691 lt!26146) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63124 () Bool)

(declare-fun Unit!1715 () Unit!1680)

(assert (=> b!63124 (= e!41398 Unit!1715)))

(declare-fun b!63125 () Bool)

(assert (=> b!63125 (= e!41399 (isDefined!79 (getValueByKey!127 (toList!691 lt!26146) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12939 c!8499) b!63123))

(assert (= (and d!12939 (not c!8499)) b!63124))

(assert (= (and d!12939 (not res!34562)) b!63125))

(declare-fun m!57071 () Bool)

(assert (=> d!12939 m!57071))

(declare-fun m!57073 () Bool)

(assert (=> b!63123 m!57073))

(declare-fun m!57075 () Bool)

(assert (=> b!63123 m!57075))

(assert (=> b!63123 m!57075))

(declare-fun m!57077 () Bool)

(assert (=> b!63123 m!57077))

(assert (=> b!63125 m!57075))

(assert (=> b!63125 m!57075))

(assert (=> b!63125 m!57077))

(assert (=> d!12687 d!12939))

(assert (=> d!12687 d!12629))

(assert (=> bm!4933 d!12717))

(declare-fun d!12941 () Bool)

(assert (=> d!12941 (= (get!1092 (getValueByKey!127 (toList!691 lt!26043) lt!26046)) (v!2425 (getValueByKey!127 (toList!691 lt!26043) lt!26046)))))

(assert (=> d!12701 d!12941))

(declare-fun b!63126 () Bool)

(declare-fun e!41400 () Option!133)

(assert (=> b!63126 (= e!41400 (Some!132 (_2!1027 (h!2008 (toList!691 lt!26043)))))))

(declare-fun d!12943 () Bool)

(declare-fun c!8500 () Bool)

(assert (=> d!12943 (= c!8500 (and ((_ is Cons!1425) (toList!691 lt!26043)) (= (_1!1027 (h!2008 (toList!691 lt!26043))) lt!26046)))))

(assert (=> d!12943 (= (getValueByKey!127 (toList!691 lt!26043) lt!26046) e!41400)))

(declare-fun b!63127 () Bool)

(declare-fun e!41401 () Option!133)

(assert (=> b!63127 (= e!41400 e!41401)))

(declare-fun c!8501 () Bool)

(assert (=> b!63127 (= c!8501 (and ((_ is Cons!1425) (toList!691 lt!26043)) (not (= (_1!1027 (h!2008 (toList!691 lt!26043))) lt!26046))))))

(declare-fun b!63128 () Bool)

(assert (=> b!63128 (= e!41401 (getValueByKey!127 (t!4815 (toList!691 lt!26043)) lt!26046))))

(declare-fun b!63129 () Bool)

(assert (=> b!63129 (= e!41401 None!131)))

(assert (= (and d!12943 c!8500) b!63126))

(assert (= (and d!12943 (not c!8500)) b!63127))

(assert (= (and b!63127 c!8501) b!63128))

(assert (= (and b!63127 (not c!8501)) b!63129))

(declare-fun m!57079 () Bool)

(assert (=> b!63128 m!57079))

(assert (=> d!12701 d!12943))

(declare-fun d!12945 () Bool)

(declare-fun res!34563 () Bool)

(declare-fun e!41402 () Bool)

(assert (=> d!12945 (=> res!34563 e!41402)))

(assert (=> d!12945 (= res!34563 (and ((_ is Cons!1425) (toList!691 (+!82 lt!26045 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))) (= (_1!1027 (h!2008 (toList!691 (+!82 lt!26045 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))) lt!26035)))))

(assert (=> d!12945 (= (containsKey!130 (toList!691 (+!82 lt!26045 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26035) e!41402)))

(declare-fun b!63130 () Bool)

(declare-fun e!41403 () Bool)

(assert (=> b!63130 (= e!41402 e!41403)))

(declare-fun res!34564 () Bool)

(assert (=> b!63130 (=> (not res!34564) (not e!41403))))

(assert (=> b!63130 (= res!34564 (and (or (not ((_ is Cons!1425) (toList!691 (+!82 lt!26045 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))) (bvsle (_1!1027 (h!2008 (toList!691 (+!82 lt!26045 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))) lt!26035)) ((_ is Cons!1425) (toList!691 (+!82 lt!26045 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))) (bvslt (_1!1027 (h!2008 (toList!691 (+!82 lt!26045 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))) lt!26035)))))

(declare-fun b!63131 () Bool)

(assert (=> b!63131 (= e!41403 (containsKey!130 (t!4815 (toList!691 (+!82 lt!26045 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))) lt!26035))))

(assert (= (and d!12945 (not res!34563)) b!63130))

(assert (= (and b!63130 res!34564) b!63131))

(declare-fun m!57081 () Bool)

(assert (=> b!63131 m!57081))

(assert (=> d!12699 d!12945))

(declare-fun d!12947 () Bool)

(assert (=> d!12947 (= (get!1092 (getValueByKey!127 (toList!691 lt!26027) #b1000000000000000000000000000000000000000000000000000000000000000)) (v!2425 (getValueByKey!127 (toList!691 lt!26027) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12653 d!12947))

(assert (=> d!12653 d!12783))

(declare-fun d!12949 () Bool)

(assert (=> d!12949 (= (apply!68 lt!26175 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1092 (getValueByKey!127 (toList!691 lt!26175) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2754 () Bool)

(assert (= bs!2754 d!12949))

(declare-fun m!57083 () Bool)

(assert (=> bs!2754 m!57083))

(assert (=> bs!2754 m!57083))

(declare-fun m!57085 () Bool)

(assert (=> bs!2754 m!57085))

(assert (=> b!62640 d!12949))

(assert (=> b!62832 d!12831))

(declare-fun d!12951 () Bool)

(declare-fun res!34565 () Bool)

(declare-fun e!41404 () Bool)

(assert (=> d!12951 (=> (not res!34565) (not e!41404))))

(assert (=> d!12951 (= res!34565 (simpleValid!44 (_2!1026 lt!26286)))))

(assert (=> d!12951 (= (valid!269 (_2!1026 lt!26286)) e!41404)))

(declare-fun b!63132 () Bool)

(declare-fun res!34566 () Bool)

(assert (=> b!63132 (=> (not res!34566) (not e!41404))))

(assert (=> b!63132 (= res!34566 (= (arrayCountValidKeys!0 (_keys!3719 (_2!1026 lt!26286)) #b00000000000000000000000000000000 (size!2022 (_keys!3719 (_2!1026 lt!26286)))) (_size!366 (_2!1026 lt!26286))))))

(declare-fun b!63133 () Bool)

(declare-fun res!34567 () Bool)

(assert (=> b!63133 (=> (not res!34567) (not e!41404))))

(assert (=> b!63133 (= res!34567 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3719 (_2!1026 lt!26286)) (mask!5993 (_2!1026 lt!26286))))))

(declare-fun b!63134 () Bool)

(assert (=> b!63134 (= e!41404 (arrayNoDuplicates!0 (_keys!3719 (_2!1026 lt!26286)) #b00000000000000000000000000000000 Nil!1427))))

(assert (= (and d!12951 res!34565) b!63132))

(assert (= (and b!63132 res!34566) b!63133))

(assert (= (and b!63133 res!34567) b!63134))

(declare-fun m!57087 () Bool)

(assert (=> d!12951 m!57087))

(declare-fun m!57089 () Bool)

(assert (=> b!63132 m!57089))

(declare-fun m!57091 () Bool)

(assert (=> b!63133 m!57091))

(declare-fun m!57093 () Bool)

(assert (=> b!63134 m!57093))

(assert (=> b!62741 d!12951))

(declare-fun d!12953 () Bool)

(assert (=> d!12953 (= (isEmpty!306 (getValueByKey!127 (toList!691 lt!25841) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355))) (not ((_ is Some!132) (getValueByKey!127 (toList!691 lt!25841) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))))

(assert (=> d!12729 d!12953))

(declare-fun d!12955 () Bool)

(assert (=> d!12955 (= (get!1092 (getValueByKey!127 (toList!691 lt!26034) lt!26033)) (v!2425 (getValueByKey!127 (toList!691 lt!26034) lt!26033)))))

(assert (=> d!12691 d!12955))

(declare-fun b!63135 () Bool)

(declare-fun e!41405 () Option!133)

(assert (=> b!63135 (= e!41405 (Some!132 (_2!1027 (h!2008 (toList!691 lt!26034)))))))

(declare-fun d!12957 () Bool)

(declare-fun c!8502 () Bool)

(assert (=> d!12957 (= c!8502 (and ((_ is Cons!1425) (toList!691 lt!26034)) (= (_1!1027 (h!2008 (toList!691 lt!26034))) lt!26033)))))

(assert (=> d!12957 (= (getValueByKey!127 (toList!691 lt!26034) lt!26033) e!41405)))

(declare-fun b!63136 () Bool)

(declare-fun e!41406 () Option!133)

(assert (=> b!63136 (= e!41405 e!41406)))

(declare-fun c!8503 () Bool)

(assert (=> b!63136 (= c!8503 (and ((_ is Cons!1425) (toList!691 lt!26034)) (not (= (_1!1027 (h!2008 (toList!691 lt!26034))) lt!26033))))))

(declare-fun b!63137 () Bool)

(assert (=> b!63137 (= e!41406 (getValueByKey!127 (t!4815 (toList!691 lt!26034)) lt!26033))))

(declare-fun b!63138 () Bool)

(assert (=> b!63138 (= e!41406 None!131)))

(assert (= (and d!12957 c!8502) b!63135))

(assert (= (and d!12957 (not c!8502)) b!63136))

(assert (= (and b!63136 c!8503) b!63137))

(assert (= (and b!63136 (not c!8503)) b!63138))

(declare-fun m!57095 () Bool)

(assert (=> b!63137 m!57095))

(assert (=> d!12691 d!12957))

(declare-fun d!12959 () Bool)

(declare-fun res!34569 () Bool)

(declare-fun e!41410 () Bool)

(assert (=> d!12959 (=> res!34569 e!41410)))

(assert (=> d!12959 (= res!34569 (bvsge #b00000000000000000000000000000000 (size!2022 (_keys!3719 (_2!1026 lt!25975)))))))

(assert (=> d!12959 (= (arrayNoDuplicates!0 (_keys!3719 (_2!1026 lt!25975)) #b00000000000000000000000000000000 Nil!1427) e!41410)))

(declare-fun b!63139 () Bool)

(declare-fun e!41408 () Bool)

(declare-fun call!4989 () Bool)

(assert (=> b!63139 (= e!41408 call!4989)))

(declare-fun b!63140 () Bool)

(declare-fun e!41407 () Bool)

(assert (=> b!63140 (= e!41407 (contains!688 Nil!1427 (select (arr!1790 (_keys!3719 (_2!1026 lt!25975))) #b00000000000000000000000000000000)))))

(declare-fun b!63141 () Bool)

(declare-fun e!41409 () Bool)

(assert (=> b!63141 (= e!41409 e!41408)))

(declare-fun c!8504 () Bool)

(assert (=> b!63141 (= c!8504 (validKeyInArray!0 (select (arr!1790 (_keys!3719 (_2!1026 lt!25975))) #b00000000000000000000000000000000)))))

(declare-fun bm!4986 () Bool)

(assert (=> bm!4986 (= call!4989 (arrayNoDuplicates!0 (_keys!3719 (_2!1026 lt!25975)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!8504 (Cons!1426 (select (arr!1790 (_keys!3719 (_2!1026 lt!25975))) #b00000000000000000000000000000000) Nil!1427) Nil!1427)))))

(declare-fun b!63142 () Bool)

(assert (=> b!63142 (= e!41408 call!4989)))

(declare-fun b!63143 () Bool)

(assert (=> b!63143 (= e!41410 e!41409)))

(declare-fun res!34570 () Bool)

(assert (=> b!63143 (=> (not res!34570) (not e!41409))))

(assert (=> b!63143 (= res!34570 (not e!41407))))

(declare-fun res!34568 () Bool)

(assert (=> b!63143 (=> (not res!34568) (not e!41407))))

(assert (=> b!63143 (= res!34568 (validKeyInArray!0 (select (arr!1790 (_keys!3719 (_2!1026 lt!25975))) #b00000000000000000000000000000000)))))

(assert (= (and d!12959 (not res!34569)) b!63143))

(assert (= (and b!63143 res!34568) b!63140))

(assert (= (and b!63143 res!34570) b!63141))

(assert (= (and b!63141 c!8504) b!63142))

(assert (= (and b!63141 (not c!8504)) b!63139))

(assert (= (or b!63142 b!63139) bm!4986))

(declare-fun m!57097 () Bool)

(assert (=> b!63140 m!57097))

(assert (=> b!63140 m!57097))

(declare-fun m!57099 () Bool)

(assert (=> b!63140 m!57099))

(assert (=> b!63141 m!57097))

(assert (=> b!63141 m!57097))

(declare-fun m!57101 () Bool)

(assert (=> b!63141 m!57101))

(assert (=> bm!4986 m!57097))

(declare-fun m!57103 () Bool)

(assert (=> bm!4986 m!57103))

(assert (=> b!63143 m!57097))

(assert (=> b!63143 m!57097))

(assert (=> b!63143 m!57101))

(assert (=> b!62572 d!12959))

(declare-fun d!12961 () Bool)

(declare-fun e!41411 () Bool)

(assert (=> d!12961 e!41411))

(declare-fun res!34571 () Bool)

(assert (=> d!12961 (=> (not res!34571) (not e!41411))))

(declare-fun lt!26521 () ListLongMap!1351)

(assert (=> d!12961 (= res!34571 (contains!686 lt!26521 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(declare-fun lt!26522 () List!1429)

(assert (=> d!12961 (= lt!26521 (ListLongMap!1352 lt!26522))))

(declare-fun lt!26520 () Unit!1680)

(declare-fun lt!26523 () Unit!1680)

(assert (=> d!12961 (= lt!26520 lt!26523)))

(assert (=> d!12961 (= (getValueByKey!127 lt!26522 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))) (Some!132 (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(assert (=> d!12961 (= lt!26523 (lemmaContainsTupThenGetReturnValue!44 lt!26522 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(assert (=> d!12961 (= lt!26522 (insertStrictlySorted!47 (toList!691 call!4906) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(assert (=> d!12961 (= (+!82 call!4906 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))) lt!26521)))

(declare-fun b!63144 () Bool)

(declare-fun res!34572 () Bool)

(assert (=> b!63144 (=> (not res!34572) (not e!41411))))

(assert (=> b!63144 (= res!34572 (= (getValueByKey!127 (toList!691 lt!26521) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))) (Some!132 (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))))

(declare-fun b!63145 () Bool)

(assert (=> b!63145 (= e!41411 (contains!689 (toList!691 lt!26521) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))

(assert (= (and d!12961 res!34571) b!63144))

(assert (= (and b!63144 res!34572) b!63145))

(declare-fun m!57105 () Bool)

(assert (=> d!12961 m!57105))

(declare-fun m!57107 () Bool)

(assert (=> d!12961 m!57107))

(declare-fun m!57109 () Bool)

(assert (=> d!12961 m!57109))

(declare-fun m!57111 () Bool)

(assert (=> d!12961 m!57111))

(declare-fun m!57113 () Bool)

(assert (=> b!63144 m!57113))

(declare-fun m!57115 () Bool)

(assert (=> b!63145 m!57115))

(assert (=> b!62512 d!12961))

(assert (=> b!62643 d!12831))

(assert (=> d!12695 d!12685))

(declare-fun d!12963 () Bool)

(declare-fun e!41413 () Bool)

(assert (=> d!12963 e!41413))

(declare-fun res!34573 () Bool)

(assert (=> d!12963 (=> res!34573 e!41413)))

(declare-fun lt!26525 () Bool)

(assert (=> d!12963 (= res!34573 (not lt!26525))))

(declare-fun lt!26526 () Bool)

(assert (=> d!12963 (= lt!26525 lt!26526)))

(declare-fun lt!26524 () Unit!1680)

(declare-fun e!41412 () Unit!1680)

(assert (=> d!12963 (= lt!26524 e!41412)))

(declare-fun c!8505 () Bool)

(assert (=> d!12963 (= c!8505 lt!26526)))

(assert (=> d!12963 (= lt!26526 (containsKey!130 (toList!691 lt!26048) lt!26031))))

(assert (=> d!12963 (= (contains!686 lt!26048 lt!26031) lt!26525)))

(declare-fun b!63146 () Bool)

(declare-fun lt!26527 () Unit!1680)

(assert (=> b!63146 (= e!41412 lt!26527)))

(assert (=> b!63146 (= lt!26527 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 lt!26048) lt!26031))))

(assert (=> b!63146 (isDefined!79 (getValueByKey!127 (toList!691 lt!26048) lt!26031))))

(declare-fun b!63147 () Bool)

(declare-fun Unit!1716 () Unit!1680)

(assert (=> b!63147 (= e!41412 Unit!1716)))

(declare-fun b!63148 () Bool)

(assert (=> b!63148 (= e!41413 (isDefined!79 (getValueByKey!127 (toList!691 lt!26048) lt!26031)))))

(assert (= (and d!12963 c!8505) b!63146))

(assert (= (and d!12963 (not c!8505)) b!63147))

(assert (= (and d!12963 (not res!34573)) b!63148))

(declare-fun m!57117 () Bool)

(assert (=> d!12963 m!57117))

(declare-fun m!57119 () Bool)

(assert (=> b!63146 m!57119))

(assert (=> b!63146 m!56149))

(assert (=> b!63146 m!56149))

(declare-fun m!57121 () Bool)

(assert (=> b!63146 m!57121))

(assert (=> b!63148 m!56149))

(assert (=> b!63148 m!56149))

(assert (=> b!63148 m!57121))

(assert (=> d!12695 d!12963))

(assert (=> d!12695 d!12689))

(declare-fun d!12965 () Bool)

(assert (=> d!12965 (= (apply!68 (+!82 lt!26048 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))) lt!26031) (apply!68 lt!26048 lt!26031))))

(assert (=> d!12965 true))

(declare-fun _$34!775 () Unit!1680)

(assert (=> d!12965 (= (choose!339 lt!26048 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))) lt!26031) _$34!775)))

(declare-fun bs!2755 () Bool)

(assert (= bs!2755 d!12965))

(assert (=> bs!2755 m!55923))

(assert (=> bs!2755 m!55923))

(assert (=> bs!2755 m!55925))

(assert (=> bs!2755 m!55919))

(assert (=> d!12695 d!12965))

(assert (=> d!12695 d!12703))

(declare-fun b!63150 () Bool)

(declare-fun e!41421 () ListLongMap!1351)

(declare-fun call!4996 () ListLongMap!1351)

(assert (=> b!63150 (= e!41421 call!4996)))

(declare-fun b!63152 () Bool)

(declare-fun e!41424 () Bool)

(declare-fun e!41422 () Bool)

(assert (=> b!63152 (= e!41424 e!41422)))

(declare-fun res!34577 () Bool)

(declare-fun call!4991 () Bool)

(assert (=> b!63152 (= res!34577 call!4991)))

(assert (=> b!63152 (=> (not res!34577) (not e!41422))))

(declare-fun b!63153 () Bool)

(declare-fun e!41418 () Bool)

(assert (=> b!63153 (= e!41418 (validKeyInArray!0 (select (arr!1790 (_keys!3719 (_2!1026 lt!25975))) #b00000000000000000000000000000000)))))

(declare-fun call!4992 () ListLongMap!1351)

(declare-fun call!4993 () ListLongMap!1351)

(declare-fun bm!4987 () Bool)

(declare-fun c!8508 () Bool)

(declare-fun call!4990 () ListLongMap!1351)

(declare-fun c!8510 () Bool)

(declare-fun call!4994 () ListLongMap!1351)

(assert (=> bm!4987 (= call!4992 (+!82 (ite c!8508 call!4994 (ite c!8510 call!4990 call!4993)) (ite (or c!8508 c!8510) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (_2!1026 lt!25975))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (_2!1026 lt!25975))))))))

(declare-fun b!63154 () Bool)

(assert (=> b!63154 (= e!41424 (not call!4991))))

(declare-fun b!63155 () Bool)

(declare-fun e!41415 () ListLongMap!1351)

(assert (=> b!63155 (= e!41415 call!4996)))

(declare-fun b!63156 () Bool)

(declare-fun e!41414 () Bool)

(declare-fun lt!26528 () ListLongMap!1351)

(assert (=> b!63156 (= e!41414 (= (apply!68 lt!26528 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1999 (_2!1026 lt!25975))))))

(declare-fun b!63157 () Bool)

(assert (=> b!63157 (= e!41422 (= (apply!68 lt!26528 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1999 (_2!1026 lt!25975))))))

(declare-fun bm!4988 () Bool)

(assert (=> bm!4988 (= call!4994 (getCurrentListMapNoExtraKeys!46 (_keys!3719 (_2!1026 lt!25975)) (_values!2070 (_2!1026 lt!25975)) (mask!5993 (_2!1026 lt!25975)) (extraKeys!1966 (_2!1026 lt!25975)) (zeroValue!1999 (_2!1026 lt!25975)) (minValue!1999 (_2!1026 lt!25975)) #b00000000000000000000000000000000 (defaultEntry!2087 (_2!1026 lt!25975))))))

(declare-fun b!63158 () Bool)

(declare-fun e!41420 () Bool)

(assert (=> b!63158 (= e!41420 (= (apply!68 lt!26528 (select (arr!1790 (_keys!3719 (_2!1026 lt!25975))) #b00000000000000000000000000000000)) (get!1088 (select (arr!1791 (_values!2070 (_2!1026 lt!25975))) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2087 (_2!1026 lt!25975)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!63158 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (_values!2070 (_2!1026 lt!25975)))))))

(assert (=> b!63158 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 (_2!1026 lt!25975)))))))

(declare-fun b!63159 () Bool)

(declare-fun e!41417 () Unit!1680)

(declare-fun lt!26539 () Unit!1680)

(assert (=> b!63159 (= e!41417 lt!26539)))

(declare-fun lt!26546 () ListLongMap!1351)

(assert (=> b!63159 (= lt!26546 (getCurrentListMapNoExtraKeys!46 (_keys!3719 (_2!1026 lt!25975)) (_values!2070 (_2!1026 lt!25975)) (mask!5993 (_2!1026 lt!25975)) (extraKeys!1966 (_2!1026 lt!25975)) (zeroValue!1999 (_2!1026 lt!25975)) (minValue!1999 (_2!1026 lt!25975)) #b00000000000000000000000000000000 (defaultEntry!2087 (_2!1026 lt!25975))))))

(declare-fun lt!26542 () (_ BitVec 64))

(assert (=> b!63159 (= lt!26542 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26536 () (_ BitVec 64))

(assert (=> b!63159 (= lt!26536 (select (arr!1790 (_keys!3719 (_2!1026 lt!25975))) #b00000000000000000000000000000000))))

(declare-fun lt!26548 () Unit!1680)

(assert (=> b!63159 (= lt!26548 (addStillContains!44 lt!26546 lt!26542 (zeroValue!1999 (_2!1026 lt!25975)) lt!26536))))

(assert (=> b!63159 (contains!686 (+!82 lt!26546 (tuple2!2033 lt!26542 (zeroValue!1999 (_2!1026 lt!25975)))) lt!26536)))

(declare-fun lt!26529 () Unit!1680)

(assert (=> b!63159 (= lt!26529 lt!26548)))

(declare-fun lt!26535 () ListLongMap!1351)

(assert (=> b!63159 (= lt!26535 (getCurrentListMapNoExtraKeys!46 (_keys!3719 (_2!1026 lt!25975)) (_values!2070 (_2!1026 lt!25975)) (mask!5993 (_2!1026 lt!25975)) (extraKeys!1966 (_2!1026 lt!25975)) (zeroValue!1999 (_2!1026 lt!25975)) (minValue!1999 (_2!1026 lt!25975)) #b00000000000000000000000000000000 (defaultEntry!2087 (_2!1026 lt!25975))))))

(declare-fun lt!26543 () (_ BitVec 64))

(assert (=> b!63159 (= lt!26543 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26534 () (_ BitVec 64))

(assert (=> b!63159 (= lt!26534 (select (arr!1790 (_keys!3719 (_2!1026 lt!25975))) #b00000000000000000000000000000000))))

(declare-fun lt!26537 () Unit!1680)

(assert (=> b!63159 (= lt!26537 (addApplyDifferent!44 lt!26535 lt!26543 (minValue!1999 (_2!1026 lt!25975)) lt!26534))))

(assert (=> b!63159 (= (apply!68 (+!82 lt!26535 (tuple2!2033 lt!26543 (minValue!1999 (_2!1026 lt!25975)))) lt!26534) (apply!68 lt!26535 lt!26534))))

(declare-fun lt!26531 () Unit!1680)

(assert (=> b!63159 (= lt!26531 lt!26537)))

(declare-fun lt!26549 () ListLongMap!1351)

(assert (=> b!63159 (= lt!26549 (getCurrentListMapNoExtraKeys!46 (_keys!3719 (_2!1026 lt!25975)) (_values!2070 (_2!1026 lt!25975)) (mask!5993 (_2!1026 lt!25975)) (extraKeys!1966 (_2!1026 lt!25975)) (zeroValue!1999 (_2!1026 lt!25975)) (minValue!1999 (_2!1026 lt!25975)) #b00000000000000000000000000000000 (defaultEntry!2087 (_2!1026 lt!25975))))))

(declare-fun lt!26545 () (_ BitVec 64))

(assert (=> b!63159 (= lt!26545 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26532 () (_ BitVec 64))

(assert (=> b!63159 (= lt!26532 (select (arr!1790 (_keys!3719 (_2!1026 lt!25975))) #b00000000000000000000000000000000))))

(declare-fun lt!26541 () Unit!1680)

(assert (=> b!63159 (= lt!26541 (addApplyDifferent!44 lt!26549 lt!26545 (zeroValue!1999 (_2!1026 lt!25975)) lt!26532))))

(assert (=> b!63159 (= (apply!68 (+!82 lt!26549 (tuple2!2033 lt!26545 (zeroValue!1999 (_2!1026 lt!25975)))) lt!26532) (apply!68 lt!26549 lt!26532))))

(declare-fun lt!26538 () Unit!1680)

(assert (=> b!63159 (= lt!26538 lt!26541)))

(declare-fun lt!26544 () ListLongMap!1351)

(assert (=> b!63159 (= lt!26544 (getCurrentListMapNoExtraKeys!46 (_keys!3719 (_2!1026 lt!25975)) (_values!2070 (_2!1026 lt!25975)) (mask!5993 (_2!1026 lt!25975)) (extraKeys!1966 (_2!1026 lt!25975)) (zeroValue!1999 (_2!1026 lt!25975)) (minValue!1999 (_2!1026 lt!25975)) #b00000000000000000000000000000000 (defaultEntry!2087 (_2!1026 lt!25975))))))

(declare-fun lt!26533 () (_ BitVec 64))

(assert (=> b!63159 (= lt!26533 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26547 () (_ BitVec 64))

(assert (=> b!63159 (= lt!26547 (select (arr!1790 (_keys!3719 (_2!1026 lt!25975))) #b00000000000000000000000000000000))))

(assert (=> b!63159 (= lt!26539 (addApplyDifferent!44 lt!26544 lt!26533 (minValue!1999 (_2!1026 lt!25975)) lt!26547))))

(assert (=> b!63159 (= (apply!68 (+!82 lt!26544 (tuple2!2033 lt!26533 (minValue!1999 (_2!1026 lt!25975)))) lt!26547) (apply!68 lt!26544 lt!26547))))

(declare-fun b!63160 () Bool)

(declare-fun e!41423 () Bool)

(assert (=> b!63160 (= e!41423 (validKeyInArray!0 (select (arr!1790 (_keys!3719 (_2!1026 lt!25975))) #b00000000000000000000000000000000)))))

(declare-fun b!63161 () Bool)

(declare-fun e!41425 () Bool)

(assert (=> b!63161 (= e!41425 e!41424)))

(declare-fun c!8509 () Bool)

(assert (=> b!63161 (= c!8509 (not (= (bvand (extraKeys!1966 (_2!1026 lt!25975)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!63162 () Bool)

(declare-fun e!41416 () Bool)

(declare-fun call!4995 () Bool)

(assert (=> b!63162 (= e!41416 (not call!4995))))

(declare-fun b!63163 () Bool)

(declare-fun e!41426 () Bool)

(assert (=> b!63163 (= e!41426 e!41420)))

(declare-fun res!34576 () Bool)

(assert (=> b!63163 (=> (not res!34576) (not e!41420))))

(assert (=> b!63163 (= res!34576 (contains!686 lt!26528 (select (arr!1790 (_keys!3719 (_2!1026 lt!25975))) #b00000000000000000000000000000000)))))

(assert (=> b!63163 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 (_2!1026 lt!25975)))))))

(declare-fun d!12967 () Bool)

(assert (=> d!12967 e!41425))

(declare-fun res!34581 () Bool)

(assert (=> d!12967 (=> (not res!34581) (not e!41425))))

(assert (=> d!12967 (= res!34581 (or (bvsge #b00000000000000000000000000000000 (size!2022 (_keys!3719 (_2!1026 lt!25975)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 (_2!1026 lt!25975)))))))))

(declare-fun lt!26530 () ListLongMap!1351)

(assert (=> d!12967 (= lt!26528 lt!26530)))

(declare-fun lt!26540 () Unit!1680)

(assert (=> d!12967 (= lt!26540 e!41417)))

(declare-fun c!8511 () Bool)

(assert (=> d!12967 (= c!8511 e!41418)))

(declare-fun res!34578 () Bool)

(assert (=> d!12967 (=> (not res!34578) (not e!41418))))

(assert (=> d!12967 (= res!34578 (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 (_2!1026 lt!25975)))))))

(declare-fun e!41419 () ListLongMap!1351)

(assert (=> d!12967 (= lt!26530 e!41419)))

(assert (=> d!12967 (= c!8508 (and (not (= (bvand (extraKeys!1966 (_2!1026 lt!25975)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1966 (_2!1026 lt!25975)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12967 (validMask!0 (mask!5993 (_2!1026 lt!25975)))))

(assert (=> d!12967 (= (getCurrentListMap!391 (_keys!3719 (_2!1026 lt!25975)) (_values!2070 (_2!1026 lt!25975)) (mask!5993 (_2!1026 lt!25975)) (extraKeys!1966 (_2!1026 lt!25975)) (zeroValue!1999 (_2!1026 lt!25975)) (minValue!1999 (_2!1026 lt!25975)) #b00000000000000000000000000000000 (defaultEntry!2087 (_2!1026 lt!25975))) lt!26528)))

(declare-fun b!63151 () Bool)

(assert (=> b!63151 (= e!41419 (+!82 call!4992 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (_2!1026 lt!25975)))))))

(declare-fun bm!4989 () Bool)

(assert (=> bm!4989 (= call!4990 call!4994)))

(declare-fun b!63164 () Bool)

(assert (=> b!63164 (= e!41416 e!41414)))

(declare-fun res!34574 () Bool)

(assert (=> b!63164 (= res!34574 call!4995)))

(assert (=> b!63164 (=> (not res!34574) (not e!41414))))

(declare-fun b!63165 () Bool)

(declare-fun c!8507 () Bool)

(assert (=> b!63165 (= c!8507 (and (not (= (bvand (extraKeys!1966 (_2!1026 lt!25975)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1966 (_2!1026 lt!25975)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!63165 (= e!41415 e!41421)))

(declare-fun bm!4990 () Bool)

(assert (=> bm!4990 (= call!4993 call!4990)))

(declare-fun bm!4991 () Bool)

(assert (=> bm!4991 (= call!4991 (contains!686 lt!26528 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4992 () Bool)

(assert (=> bm!4992 (= call!4995 (contains!686 lt!26528 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63166 () Bool)

(declare-fun res!34579 () Bool)

(assert (=> b!63166 (=> (not res!34579) (not e!41425))))

(assert (=> b!63166 (= res!34579 e!41426)))

(declare-fun res!34582 () Bool)

(assert (=> b!63166 (=> res!34582 e!41426)))

(assert (=> b!63166 (= res!34582 (not e!41423))))

(declare-fun res!34580 () Bool)

(assert (=> b!63166 (=> (not res!34580) (not e!41423))))

(assert (=> b!63166 (= res!34580 (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 (_2!1026 lt!25975)))))))

(declare-fun b!63167 () Bool)

(declare-fun Unit!1717 () Unit!1680)

(assert (=> b!63167 (= e!41417 Unit!1717)))

(declare-fun b!63168 () Bool)

(assert (=> b!63168 (= e!41421 call!4993)))

(declare-fun bm!4993 () Bool)

(assert (=> bm!4993 (= call!4996 call!4992)))

(declare-fun b!63169 () Bool)

(declare-fun res!34575 () Bool)

(assert (=> b!63169 (=> (not res!34575) (not e!41425))))

(assert (=> b!63169 (= res!34575 e!41416)))

(declare-fun c!8506 () Bool)

(assert (=> b!63169 (= c!8506 (not (= (bvand (extraKeys!1966 (_2!1026 lt!25975)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!63170 () Bool)

(assert (=> b!63170 (= e!41419 e!41415)))

(assert (=> b!63170 (= c!8510 (and (not (= (bvand (extraKeys!1966 (_2!1026 lt!25975)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1966 (_2!1026 lt!25975)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!12967 c!8508) b!63151))

(assert (= (and d!12967 (not c!8508)) b!63170))

(assert (= (and b!63170 c!8510) b!63155))

(assert (= (and b!63170 (not c!8510)) b!63165))

(assert (= (and b!63165 c!8507) b!63150))

(assert (= (and b!63165 (not c!8507)) b!63168))

(assert (= (or b!63150 b!63168) bm!4990))

(assert (= (or b!63155 bm!4990) bm!4989))

(assert (= (or b!63155 b!63150) bm!4993))

(assert (= (or b!63151 bm!4989) bm!4988))

(assert (= (or b!63151 bm!4993) bm!4987))

(assert (= (and d!12967 res!34578) b!63153))

(assert (= (and d!12967 c!8511) b!63159))

(assert (= (and d!12967 (not c!8511)) b!63167))

(assert (= (and d!12967 res!34581) b!63166))

(assert (= (and b!63166 res!34580) b!63160))

(assert (= (and b!63166 (not res!34582)) b!63163))

(assert (= (and b!63163 res!34576) b!63158))

(assert (= (and b!63166 res!34579) b!63169))

(assert (= (and b!63169 c!8506) b!63164))

(assert (= (and b!63169 (not c!8506)) b!63162))

(assert (= (and b!63164 res!34574) b!63156))

(assert (= (or b!63164 b!63162) bm!4992))

(assert (= (and b!63169 res!34575) b!63161))

(assert (= (and b!63161 c!8509) b!63152))

(assert (= (and b!63161 (not c!8509)) b!63154))

(assert (= (and b!63152 res!34577) b!63157))

(assert (= (or b!63152 b!63154) bm!4991))

(declare-fun b_lambda!2823 () Bool)

(assert (=> (not b_lambda!2823) (not b!63158)))

(declare-fun t!4832 () Bool)

(declare-fun tb!1377 () Bool)

(assert (=> (and b!62113 (= (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2087 (_2!1026 lt!25975))) t!4832) tb!1377))

(declare-fun result!2459 () Bool)

(assert (=> tb!1377 (= result!2459 tp_is_empty!2413)))

(assert (=> b!63158 t!4832))

(declare-fun b_and!3865 () Bool)

(assert (= b_and!3861 (and (=> t!4832 result!2459) b_and!3865)))

(declare-fun t!4834 () Bool)

(declare-fun tb!1379 () Bool)

(assert (=> (and b!62120 (= (defaultEntry!2087 newMap!16) (defaultEntry!2087 (_2!1026 lt!25975))) t!4834) tb!1379))

(declare-fun result!2461 () Bool)

(assert (= result!2461 result!2459))

(assert (=> b!63158 t!4834))

(declare-fun b_and!3867 () Bool)

(assert (= b_and!3863 (and (=> t!4834 result!2461) b_and!3867)))

(declare-fun m!57123 () Bool)

(assert (=> b!63159 m!57123))

(declare-fun m!57125 () Bool)

(assert (=> b!63159 m!57125))

(assert (=> b!63159 m!57123))

(declare-fun m!57127 () Bool)

(assert (=> b!63159 m!57127))

(assert (=> b!63159 m!57097))

(declare-fun m!57129 () Bool)

(assert (=> b!63159 m!57129))

(declare-fun m!57131 () Bool)

(assert (=> b!63159 m!57131))

(declare-fun m!57133 () Bool)

(assert (=> b!63159 m!57133))

(declare-fun m!57135 () Bool)

(assert (=> b!63159 m!57135))

(declare-fun m!57137 () Bool)

(assert (=> b!63159 m!57137))

(declare-fun m!57139 () Bool)

(assert (=> b!63159 m!57139))

(declare-fun m!57141 () Bool)

(assert (=> b!63159 m!57141))

(declare-fun m!57143 () Bool)

(assert (=> b!63159 m!57143))

(declare-fun m!57145 () Bool)

(assert (=> b!63159 m!57145))

(assert (=> b!63159 m!57133))

(declare-fun m!57147 () Bool)

(assert (=> b!63159 m!57147))

(declare-fun m!57149 () Bool)

(assert (=> b!63159 m!57149))

(declare-fun m!57151 () Bool)

(assert (=> b!63159 m!57151))

(assert (=> b!63159 m!57147))

(assert (=> b!63159 m!57137))

(declare-fun m!57153 () Bool)

(assert (=> b!63159 m!57153))

(declare-fun m!57155 () Bool)

(assert (=> b!63156 m!57155))

(assert (=> b!63163 m!57097))

(assert (=> b!63163 m!57097))

(declare-fun m!57157 () Bool)

(assert (=> b!63163 m!57157))

(assert (=> b!63160 m!57097))

(assert (=> b!63160 m!57097))

(assert (=> b!63160 m!57101))

(declare-fun m!57159 () Bool)

(assert (=> bm!4992 m!57159))

(declare-fun m!57161 () Bool)

(assert (=> b!63151 m!57161))

(assert (=> d!12967 m!56621))

(declare-fun m!57163 () Bool)

(assert (=> bm!4987 m!57163))

(declare-fun m!57165 () Bool)

(assert (=> b!63158 m!57165))

(declare-fun m!57167 () Bool)

(assert (=> b!63158 m!57167))

(assert (=> b!63158 m!57097))

(assert (=> b!63158 m!57167))

(assert (=> b!63158 m!57165))

(declare-fun m!57169 () Bool)

(assert (=> b!63158 m!57169))

(assert (=> b!63158 m!57097))

(declare-fun m!57171 () Bool)

(assert (=> b!63158 m!57171))

(declare-fun m!57173 () Bool)

(assert (=> b!63157 m!57173))

(assert (=> bm!4988 m!57145))

(assert (=> b!63153 m!57097))

(assert (=> b!63153 m!57097))

(assert (=> b!63153 m!57101))

(declare-fun m!57175 () Bool)

(assert (=> bm!4991 m!57175))

(assert (=> d!12747 d!12967))

(declare-fun d!12969 () Bool)

(assert (=> d!12969 (= (isDefined!79 (getValueByKey!127 (toList!691 call!4877) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355))) (not (isEmpty!306 (getValueByKey!127 (toList!691 call!4877) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))))

(declare-fun bs!2756 () Bool)

(assert (= bs!2756 d!12969))

(assert (=> bs!2756 m!56101))

(declare-fun m!57177 () Bool)

(assert (=> bs!2756 m!57177))

(assert (=> b!62542 d!12969))

(declare-fun b!63171 () Bool)

(declare-fun e!41427 () Option!133)

(assert (=> b!63171 (= e!41427 (Some!132 (_2!1027 (h!2008 (toList!691 call!4877)))))))

(declare-fun c!8512 () Bool)

(declare-fun d!12971 () Bool)

(assert (=> d!12971 (= c!8512 (and ((_ is Cons!1425) (toList!691 call!4877)) (= (_1!1027 (h!2008 (toList!691 call!4877))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355))))))

(assert (=> d!12971 (= (getValueByKey!127 (toList!691 call!4877) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) e!41427)))

(declare-fun b!63172 () Bool)

(declare-fun e!41428 () Option!133)

(assert (=> b!63172 (= e!41427 e!41428)))

(declare-fun c!8513 () Bool)

(assert (=> b!63172 (= c!8513 (and ((_ is Cons!1425) (toList!691 call!4877)) (not (= (_1!1027 (h!2008 (toList!691 call!4877))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))))

(declare-fun b!63173 () Bool)

(assert (=> b!63173 (= e!41428 (getValueByKey!127 (t!4815 (toList!691 call!4877)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun b!63174 () Bool)

(assert (=> b!63174 (= e!41428 None!131)))

(assert (= (and d!12971 c!8512) b!63171))

(assert (= (and d!12971 (not c!8512)) b!63172))

(assert (= (and b!63172 c!8513) b!63173))

(assert (= (and b!63172 (not c!8513)) b!63174))

(assert (=> b!63173 m!55703))

(declare-fun m!57179 () Bool)

(assert (=> b!63173 m!57179))

(assert (=> b!62542 d!12971))

(assert (=> b!62605 d!12723))

(declare-fun d!12973 () Bool)

(declare-fun e!41430 () Bool)

(assert (=> d!12973 e!41430))

(declare-fun res!34583 () Bool)

(assert (=> d!12973 (=> res!34583 e!41430)))

(declare-fun lt!26551 () Bool)

(assert (=> d!12973 (= res!34583 (not lt!26551))))

(declare-fun lt!26552 () Bool)

(assert (=> d!12973 (= lt!26551 lt!26552)))

(declare-fun lt!26550 () Unit!1680)

(declare-fun e!41429 () Unit!1680)

(assert (=> d!12973 (= lt!26550 e!41429)))

(declare-fun c!8514 () Bool)

(assert (=> d!12973 (= c!8514 lt!26552)))

(assert (=> d!12973 (= lt!26552 (containsKey!130 (toList!691 (+!82 lt!26341 (tuple2!2033 lt!26337 (zeroValue!1999 newMap!16)))) lt!26331))))

(assert (=> d!12973 (= (contains!686 (+!82 lt!26341 (tuple2!2033 lt!26337 (zeroValue!1999 newMap!16))) lt!26331) lt!26551)))

(declare-fun b!63175 () Bool)

(declare-fun lt!26553 () Unit!1680)

(assert (=> b!63175 (= e!41429 lt!26553)))

(assert (=> b!63175 (= lt!26553 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 (+!82 lt!26341 (tuple2!2033 lt!26337 (zeroValue!1999 newMap!16)))) lt!26331))))

(assert (=> b!63175 (isDefined!79 (getValueByKey!127 (toList!691 (+!82 lt!26341 (tuple2!2033 lt!26337 (zeroValue!1999 newMap!16)))) lt!26331))))

(declare-fun b!63176 () Bool)

(declare-fun Unit!1718 () Unit!1680)

(assert (=> b!63176 (= e!41429 Unit!1718)))

(declare-fun b!63177 () Bool)

(assert (=> b!63177 (= e!41430 (isDefined!79 (getValueByKey!127 (toList!691 (+!82 lt!26341 (tuple2!2033 lt!26337 (zeroValue!1999 newMap!16)))) lt!26331)))))

(assert (= (and d!12973 c!8514) b!63175))

(assert (= (and d!12973 (not c!8514)) b!63176))

(assert (= (and d!12973 (not res!34583)) b!63177))

(declare-fun m!57181 () Bool)

(assert (=> d!12973 m!57181))

(declare-fun m!57183 () Bool)

(assert (=> b!63175 m!57183))

(declare-fun m!57185 () Bool)

(assert (=> b!63175 m!57185))

(assert (=> b!63175 m!57185))

(declare-fun m!57187 () Bool)

(assert (=> b!63175 m!57187))

(assert (=> b!63177 m!57185))

(assert (=> b!63177 m!57185))

(assert (=> b!63177 m!57187))

(assert (=> b!62786 d!12973))

(declare-fun d!12975 () Bool)

(assert (=> d!12975 (= (apply!68 (+!82 lt!26344 (tuple2!2033 lt!26340 (zeroValue!1999 newMap!16))) lt!26327) (apply!68 lt!26344 lt!26327))))

(declare-fun lt!26554 () Unit!1680)

(assert (=> d!12975 (= lt!26554 (choose!339 lt!26344 lt!26340 (zeroValue!1999 newMap!16) lt!26327))))

(declare-fun e!41431 () Bool)

(assert (=> d!12975 e!41431))

(declare-fun res!34584 () Bool)

(assert (=> d!12975 (=> (not res!34584) (not e!41431))))

(assert (=> d!12975 (= res!34584 (contains!686 lt!26344 lt!26327))))

(assert (=> d!12975 (= (addApplyDifferent!44 lt!26344 lt!26340 (zeroValue!1999 newMap!16) lt!26327) lt!26554)))

(declare-fun b!63178 () Bool)

(assert (=> b!63178 (= e!41431 (not (= lt!26327 lt!26340)))))

(assert (= (and d!12975 res!34584) b!63178))

(assert (=> d!12975 m!56473))

(assert (=> d!12975 m!56475))

(assert (=> d!12975 m!56473))

(declare-fun m!57189 () Bool)

(assert (=> d!12975 m!57189))

(assert (=> d!12975 m!56469))

(declare-fun m!57191 () Bool)

(assert (=> d!12975 m!57191))

(assert (=> b!62786 d!12975))

(declare-fun d!12977 () Bool)

(declare-fun e!41432 () Bool)

(assert (=> d!12977 e!41432))

(declare-fun res!34585 () Bool)

(assert (=> d!12977 (=> (not res!34585) (not e!41432))))

(declare-fun lt!26556 () ListLongMap!1351)

(assert (=> d!12977 (= res!34585 (contains!686 lt!26556 (_1!1027 (tuple2!2033 lt!26328 (minValue!1999 newMap!16)))))))

(declare-fun lt!26557 () List!1429)

(assert (=> d!12977 (= lt!26556 (ListLongMap!1352 lt!26557))))

(declare-fun lt!26555 () Unit!1680)

(declare-fun lt!26558 () Unit!1680)

(assert (=> d!12977 (= lt!26555 lt!26558)))

(assert (=> d!12977 (= (getValueByKey!127 lt!26557 (_1!1027 (tuple2!2033 lt!26328 (minValue!1999 newMap!16)))) (Some!132 (_2!1027 (tuple2!2033 lt!26328 (minValue!1999 newMap!16)))))))

(assert (=> d!12977 (= lt!26558 (lemmaContainsTupThenGetReturnValue!44 lt!26557 (_1!1027 (tuple2!2033 lt!26328 (minValue!1999 newMap!16))) (_2!1027 (tuple2!2033 lt!26328 (minValue!1999 newMap!16)))))))

(assert (=> d!12977 (= lt!26557 (insertStrictlySorted!47 (toList!691 lt!26339) (_1!1027 (tuple2!2033 lt!26328 (minValue!1999 newMap!16))) (_2!1027 (tuple2!2033 lt!26328 (minValue!1999 newMap!16)))))))

(assert (=> d!12977 (= (+!82 lt!26339 (tuple2!2033 lt!26328 (minValue!1999 newMap!16))) lt!26556)))

(declare-fun b!63179 () Bool)

(declare-fun res!34586 () Bool)

(assert (=> b!63179 (=> (not res!34586) (not e!41432))))

(assert (=> b!63179 (= res!34586 (= (getValueByKey!127 (toList!691 lt!26556) (_1!1027 (tuple2!2033 lt!26328 (minValue!1999 newMap!16)))) (Some!132 (_2!1027 (tuple2!2033 lt!26328 (minValue!1999 newMap!16))))))))

(declare-fun b!63180 () Bool)

(assert (=> b!63180 (= e!41432 (contains!689 (toList!691 lt!26556) (tuple2!2033 lt!26328 (minValue!1999 newMap!16))))))

(assert (= (and d!12977 res!34585) b!63179))

(assert (= (and b!63179 res!34586) b!63180))

(declare-fun m!57193 () Bool)

(assert (=> d!12977 m!57193))

(declare-fun m!57195 () Bool)

(assert (=> d!12977 m!57195))

(declare-fun m!57197 () Bool)

(assert (=> d!12977 m!57197))

(declare-fun m!57199 () Bool)

(assert (=> d!12977 m!57199))

(declare-fun m!57201 () Bool)

(assert (=> b!63179 m!57201))

(declare-fun m!57203 () Bool)

(assert (=> b!63180 m!57203))

(assert (=> b!62786 d!12977))

(declare-fun d!12979 () Bool)

(assert (=> d!12979 (= (apply!68 (+!82 lt!26344 (tuple2!2033 lt!26340 (zeroValue!1999 newMap!16))) lt!26327) (get!1092 (getValueByKey!127 (toList!691 (+!82 lt!26344 (tuple2!2033 lt!26340 (zeroValue!1999 newMap!16)))) lt!26327)))))

(declare-fun bs!2757 () Bool)

(assert (= bs!2757 d!12979))

(declare-fun m!57205 () Bool)

(assert (=> bs!2757 m!57205))

(assert (=> bs!2757 m!57205))

(declare-fun m!57207 () Bool)

(assert (=> bs!2757 m!57207))

(assert (=> b!62786 d!12979))

(declare-fun d!12981 () Bool)

(assert (=> d!12981 (= (apply!68 (+!82 lt!26339 (tuple2!2033 lt!26328 (minValue!1999 newMap!16))) lt!26342) (get!1092 (getValueByKey!127 (toList!691 (+!82 lt!26339 (tuple2!2033 lt!26328 (minValue!1999 newMap!16)))) lt!26342)))))

(declare-fun bs!2758 () Bool)

(assert (= bs!2758 d!12981))

(declare-fun m!57209 () Bool)

(assert (=> bs!2758 m!57209))

(assert (=> bs!2758 m!57209))

(declare-fun m!57211 () Bool)

(assert (=> bs!2758 m!57211))

(assert (=> b!62786 d!12981))

(declare-fun d!12983 () Bool)

(declare-fun e!41433 () Bool)

(assert (=> d!12983 e!41433))

(declare-fun res!34587 () Bool)

(assert (=> d!12983 (=> (not res!34587) (not e!41433))))

(declare-fun lt!26560 () ListLongMap!1351)

(assert (=> d!12983 (= res!34587 (contains!686 lt!26560 (_1!1027 (tuple2!2033 lt!26337 (zeroValue!1999 newMap!16)))))))

(declare-fun lt!26561 () List!1429)

(assert (=> d!12983 (= lt!26560 (ListLongMap!1352 lt!26561))))

(declare-fun lt!26559 () Unit!1680)

(declare-fun lt!26562 () Unit!1680)

(assert (=> d!12983 (= lt!26559 lt!26562)))

(assert (=> d!12983 (= (getValueByKey!127 lt!26561 (_1!1027 (tuple2!2033 lt!26337 (zeroValue!1999 newMap!16)))) (Some!132 (_2!1027 (tuple2!2033 lt!26337 (zeroValue!1999 newMap!16)))))))

(assert (=> d!12983 (= lt!26562 (lemmaContainsTupThenGetReturnValue!44 lt!26561 (_1!1027 (tuple2!2033 lt!26337 (zeroValue!1999 newMap!16))) (_2!1027 (tuple2!2033 lt!26337 (zeroValue!1999 newMap!16)))))))

(assert (=> d!12983 (= lt!26561 (insertStrictlySorted!47 (toList!691 lt!26341) (_1!1027 (tuple2!2033 lt!26337 (zeroValue!1999 newMap!16))) (_2!1027 (tuple2!2033 lt!26337 (zeroValue!1999 newMap!16)))))))

(assert (=> d!12983 (= (+!82 lt!26341 (tuple2!2033 lt!26337 (zeroValue!1999 newMap!16))) lt!26560)))

(declare-fun b!63181 () Bool)

(declare-fun res!34588 () Bool)

(assert (=> b!63181 (=> (not res!34588) (not e!41433))))

(assert (=> b!63181 (= res!34588 (= (getValueByKey!127 (toList!691 lt!26560) (_1!1027 (tuple2!2033 lt!26337 (zeroValue!1999 newMap!16)))) (Some!132 (_2!1027 (tuple2!2033 lt!26337 (zeroValue!1999 newMap!16))))))))

(declare-fun b!63182 () Bool)

(assert (=> b!63182 (= e!41433 (contains!689 (toList!691 lt!26560) (tuple2!2033 lt!26337 (zeroValue!1999 newMap!16))))))

(assert (= (and d!12983 res!34587) b!63181))

(assert (= (and b!63181 res!34588) b!63182))

(declare-fun m!57213 () Bool)

(assert (=> d!12983 m!57213))

(declare-fun m!57215 () Bool)

(assert (=> d!12983 m!57215))

(declare-fun m!57217 () Bool)

(assert (=> d!12983 m!57217))

(declare-fun m!57219 () Bool)

(assert (=> d!12983 m!57219))

(declare-fun m!57221 () Bool)

(assert (=> b!63181 m!57221))

(declare-fun m!57223 () Bool)

(assert (=> b!63182 m!57223))

(assert (=> b!62786 d!12983))

(declare-fun d!12985 () Bool)

(assert (=> d!12985 (= (apply!68 (+!82 lt!26330 (tuple2!2033 lt!26338 (minValue!1999 newMap!16))) lt!26329) (apply!68 lt!26330 lt!26329))))

(declare-fun lt!26563 () Unit!1680)

(assert (=> d!12985 (= lt!26563 (choose!339 lt!26330 lt!26338 (minValue!1999 newMap!16) lt!26329))))

(declare-fun e!41434 () Bool)

(assert (=> d!12985 e!41434))

(declare-fun res!34589 () Bool)

(assert (=> d!12985 (=> (not res!34589) (not e!41434))))

(assert (=> d!12985 (= res!34589 (contains!686 lt!26330 lt!26329))))

(assert (=> d!12985 (= (addApplyDifferent!44 lt!26330 lt!26338 (minValue!1999 newMap!16) lt!26329) lt!26563)))

(declare-fun b!63183 () Bool)

(assert (=> b!63183 (= e!41434 (not (= lt!26329 lt!26338)))))

(assert (= (and d!12985 res!34589) b!63183))

(assert (=> d!12985 m!56449))

(assert (=> d!12985 m!56453))

(assert (=> d!12985 m!56449))

(declare-fun m!57225 () Bool)

(assert (=> d!12985 m!57225))

(assert (=> d!12985 m!56465))

(declare-fun m!57227 () Bool)

(assert (=> d!12985 m!57227))

(assert (=> b!62786 d!12985))

(declare-fun d!12987 () Bool)

(assert (=> d!12987 (= (apply!68 lt!26344 lt!26327) (get!1092 (getValueByKey!127 (toList!691 lt!26344) lt!26327)))))

(declare-fun bs!2759 () Bool)

(assert (= bs!2759 d!12987))

(declare-fun m!57229 () Bool)

(assert (=> bs!2759 m!57229))

(assert (=> bs!2759 m!57229))

(declare-fun m!57231 () Bool)

(assert (=> bs!2759 m!57231))

(assert (=> b!62786 d!12987))

(declare-fun d!12989 () Bool)

(assert (=> d!12989 (contains!686 (+!82 lt!26341 (tuple2!2033 lt!26337 (zeroValue!1999 newMap!16))) lt!26331)))

(declare-fun lt!26564 () Unit!1680)

(assert (=> d!12989 (= lt!26564 (choose!338 lt!26341 lt!26337 (zeroValue!1999 newMap!16) lt!26331))))

(assert (=> d!12989 (contains!686 lt!26341 lt!26331)))

(assert (=> d!12989 (= (addStillContains!44 lt!26341 lt!26337 (zeroValue!1999 newMap!16) lt!26331) lt!26564)))

(declare-fun bs!2760 () Bool)

(assert (= bs!2760 d!12989))

(assert (=> bs!2760 m!56463))

(assert (=> bs!2760 m!56463))

(assert (=> bs!2760 m!56479))

(declare-fun m!57233 () Bool)

(assert (=> bs!2760 m!57233))

(declare-fun m!57235 () Bool)

(assert (=> bs!2760 m!57235))

(assert (=> b!62786 d!12989))

(declare-fun d!12991 () Bool)

(assert (=> d!12991 (= (apply!68 (+!82 lt!26339 (tuple2!2033 lt!26328 (minValue!1999 newMap!16))) lt!26342) (apply!68 lt!26339 lt!26342))))

(declare-fun lt!26565 () Unit!1680)

(assert (=> d!12991 (= lt!26565 (choose!339 lt!26339 lt!26328 (minValue!1999 newMap!16) lt!26342))))

(declare-fun e!41435 () Bool)

(assert (=> d!12991 e!41435))

(declare-fun res!34590 () Bool)

(assert (=> d!12991 (=> (not res!34590) (not e!41435))))

(assert (=> d!12991 (= res!34590 (contains!686 lt!26339 lt!26342))))

(assert (=> d!12991 (= (addApplyDifferent!44 lt!26339 lt!26328 (minValue!1999 newMap!16) lt!26342) lt!26565)))

(declare-fun b!63184 () Bool)

(assert (=> b!63184 (= e!41435 (not (= lt!26342 lt!26328)))))

(assert (= (and d!12991 res!34590) b!63184))

(assert (=> d!12991 m!56459))

(assert (=> d!12991 m!56461))

(assert (=> d!12991 m!56459))

(declare-fun m!57237 () Bool)

(assert (=> d!12991 m!57237))

(assert (=> d!12991 m!56457))

(declare-fun m!57239 () Bool)

(assert (=> d!12991 m!57239))

(assert (=> b!62786 d!12991))

(declare-fun d!12993 () Bool)

(assert (=> d!12993 (= (apply!68 lt!26339 lt!26342) (get!1092 (getValueByKey!127 (toList!691 lt!26339) lt!26342)))))

(declare-fun bs!2761 () Bool)

(assert (= bs!2761 d!12993))

(declare-fun m!57241 () Bool)

(assert (=> bs!2761 m!57241))

(assert (=> bs!2761 m!57241))

(declare-fun m!57243 () Bool)

(assert (=> bs!2761 m!57243))

(assert (=> b!62786 d!12993))

(declare-fun d!12995 () Bool)

(declare-fun e!41436 () Bool)

(assert (=> d!12995 e!41436))

(declare-fun res!34591 () Bool)

(assert (=> d!12995 (=> (not res!34591) (not e!41436))))

(declare-fun lt!26567 () ListLongMap!1351)

(assert (=> d!12995 (= res!34591 (contains!686 lt!26567 (_1!1027 (tuple2!2033 lt!26338 (minValue!1999 newMap!16)))))))

(declare-fun lt!26568 () List!1429)

(assert (=> d!12995 (= lt!26567 (ListLongMap!1352 lt!26568))))

(declare-fun lt!26566 () Unit!1680)

(declare-fun lt!26569 () Unit!1680)

(assert (=> d!12995 (= lt!26566 lt!26569)))

(assert (=> d!12995 (= (getValueByKey!127 lt!26568 (_1!1027 (tuple2!2033 lt!26338 (minValue!1999 newMap!16)))) (Some!132 (_2!1027 (tuple2!2033 lt!26338 (minValue!1999 newMap!16)))))))

(assert (=> d!12995 (= lt!26569 (lemmaContainsTupThenGetReturnValue!44 lt!26568 (_1!1027 (tuple2!2033 lt!26338 (minValue!1999 newMap!16))) (_2!1027 (tuple2!2033 lt!26338 (minValue!1999 newMap!16)))))))

(assert (=> d!12995 (= lt!26568 (insertStrictlySorted!47 (toList!691 lt!26330) (_1!1027 (tuple2!2033 lt!26338 (minValue!1999 newMap!16))) (_2!1027 (tuple2!2033 lt!26338 (minValue!1999 newMap!16)))))))

(assert (=> d!12995 (= (+!82 lt!26330 (tuple2!2033 lt!26338 (minValue!1999 newMap!16))) lt!26567)))

(declare-fun b!63185 () Bool)

(declare-fun res!34592 () Bool)

(assert (=> b!63185 (=> (not res!34592) (not e!41436))))

(assert (=> b!63185 (= res!34592 (= (getValueByKey!127 (toList!691 lt!26567) (_1!1027 (tuple2!2033 lt!26338 (minValue!1999 newMap!16)))) (Some!132 (_2!1027 (tuple2!2033 lt!26338 (minValue!1999 newMap!16))))))))

(declare-fun b!63186 () Bool)

(assert (=> b!63186 (= e!41436 (contains!689 (toList!691 lt!26567) (tuple2!2033 lt!26338 (minValue!1999 newMap!16))))))

(assert (= (and d!12995 res!34591) b!63185))

(assert (= (and b!63185 res!34592) b!63186))

(declare-fun m!57245 () Bool)

(assert (=> d!12995 m!57245))

(declare-fun m!57247 () Bool)

(assert (=> d!12995 m!57247))

(declare-fun m!57249 () Bool)

(assert (=> d!12995 m!57249))

(declare-fun m!57251 () Bool)

(assert (=> d!12995 m!57251))

(declare-fun m!57253 () Bool)

(assert (=> b!63185 m!57253))

(declare-fun m!57255 () Bool)

(assert (=> b!63186 m!57255))

(assert (=> b!62786 d!12995))

(declare-fun d!12997 () Bool)

(assert (=> d!12997 (= (apply!68 lt!26330 lt!26329) (get!1092 (getValueByKey!127 (toList!691 lt!26330) lt!26329)))))

(declare-fun bs!2762 () Bool)

(assert (= bs!2762 d!12997))

(declare-fun m!57257 () Bool)

(assert (=> bs!2762 m!57257))

(assert (=> bs!2762 m!57257))

(declare-fun m!57259 () Bool)

(assert (=> bs!2762 m!57259))

(assert (=> b!62786 d!12997))

(declare-fun bm!4994 () Bool)

(declare-fun call!4997 () ListLongMap!1351)

(assert (=> bm!4994 (= call!4997 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (array!3746 (store (arr!1791 (_values!2070 newMap!16)) (index!3018 lt!25967) (ValueCellFull!863 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2023 (_values!2070 newMap!16))) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2087 newMap!16)))))

(declare-fun b!63187 () Bool)

(declare-fun e!41437 () Bool)

(assert (=> b!63187 (= e!41437 (validKeyInArray!0 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63187 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!63188 () Bool)

(declare-fun e!41441 () ListLongMap!1351)

(declare-fun e!41443 () ListLongMap!1351)

(assert (=> b!63188 (= e!41441 e!41443)))

(declare-fun c!8517 () Bool)

(assert (=> b!63188 (= c!8517 (validKeyInArray!0 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63189 () Bool)

(declare-fun e!41442 () Bool)

(declare-fun e!41440 () Bool)

(assert (=> b!63189 (= e!41442 e!41440)))

(assert (=> b!63189 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun res!34593 () Bool)

(declare-fun lt!26572 () ListLongMap!1351)

(assert (=> b!63189 (= res!34593 (contains!686 lt!26572 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63189 (=> (not res!34593) (not e!41440))))

(declare-fun b!63190 () Bool)

(assert (=> b!63190 (= e!41441 (ListLongMap!1352 Nil!1426))))

(declare-fun b!63191 () Bool)

(declare-fun e!41438 () Bool)

(assert (=> b!63191 (= e!41442 e!41438)))

(declare-fun c!8516 () Bool)

(assert (=> b!63191 (= c!8516 (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun b!63192 () Bool)

(assert (=> b!63192 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(assert (=> b!63192 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (array!3746 (store (arr!1791 (_values!2070 newMap!16)) (index!3018 lt!25967) (ValueCellFull!863 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2023 (_values!2070 newMap!16))))))))

(assert (=> b!63192 (= e!41440 (= (apply!68 lt!26572 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)) (get!1088 (select (arr!1791 (array!3746 (store (arr!1791 (_values!2070 newMap!16)) (index!3018 lt!25967) (ValueCellFull!863 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2023 (_values!2070 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!63193 () Bool)

(declare-fun e!41439 () Bool)

(assert (=> b!63193 (= e!41439 e!41442)))

(declare-fun c!8518 () Bool)

(assert (=> b!63193 (= c!8518 e!41437)))

(declare-fun res!34596 () Bool)

(assert (=> b!63193 (=> (not res!34596) (not e!41437))))

(assert (=> b!63193 (= res!34596 (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun b!63195 () Bool)

(assert (=> b!63195 (= e!41438 (= lt!26572 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (array!3746 (store (arr!1791 (_values!2070 newMap!16)) (index!3018 lt!25967) (ValueCellFull!863 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2023 (_values!2070 newMap!16))) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2087 newMap!16))))))

(declare-fun b!63196 () Bool)

(assert (=> b!63196 (= e!41443 call!4997)))

(declare-fun b!63197 () Bool)

(declare-fun lt!26574 () Unit!1680)

(declare-fun lt!26571 () Unit!1680)

(assert (=> b!63197 (= lt!26574 lt!26571)))

(declare-fun lt!26576 () ListLongMap!1351)

(declare-fun lt!26573 () (_ BitVec 64))

(declare-fun lt!26575 () V!2865)

(declare-fun lt!26570 () (_ BitVec 64))

(assert (=> b!63197 (not (contains!686 (+!82 lt!26576 (tuple2!2033 lt!26573 lt!26575)) lt!26570))))

(assert (=> b!63197 (= lt!26571 (addStillNotContains!19 lt!26576 lt!26573 lt!26575 lt!26570))))

(assert (=> b!63197 (= lt!26570 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!63197 (= lt!26575 (get!1088 (select (arr!1791 (array!3746 (store (arr!1791 (_values!2070 newMap!16)) (index!3018 lt!25967) (ValueCellFull!863 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2023 (_values!2070 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!63197 (= lt!26573 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!63197 (= lt!26576 call!4997)))

(assert (=> b!63197 (= e!41443 (+!82 call!4997 (tuple2!2033 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000) (get!1088 (select (arr!1791 (array!3746 (store (arr!1791 (_values!2070 newMap!16)) (index!3018 lt!25967) (ValueCellFull!863 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2023 (_values!2070 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!63198 () Bool)

(declare-fun res!34595 () Bool)

(assert (=> b!63198 (=> (not res!34595) (not e!41439))))

(assert (=> b!63198 (= res!34595 (not (contains!686 lt!26572 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!63194 () Bool)

(assert (=> b!63194 (= e!41438 (isEmpty!305 lt!26572))))

(declare-fun d!12999 () Bool)

(assert (=> d!12999 e!41439))

(declare-fun res!34594 () Bool)

(assert (=> d!12999 (=> (not res!34594) (not e!41439))))

(assert (=> d!12999 (= res!34594 (not (contains!686 lt!26572 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12999 (= lt!26572 e!41441)))

(declare-fun c!8515 () Bool)

(assert (=> d!12999 (= c!8515 (bvsge #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(assert (=> d!12999 (validMask!0 (mask!5993 newMap!16))))

(assert (=> d!12999 (= (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (array!3746 (store (arr!1791 (_values!2070 newMap!16)) (index!3018 lt!25967) (ValueCellFull!863 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2023 (_values!2070 newMap!16))) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) lt!26572)))

(assert (= (and d!12999 c!8515) b!63190))

(assert (= (and d!12999 (not c!8515)) b!63188))

(assert (= (and b!63188 c!8517) b!63197))

(assert (= (and b!63188 (not c!8517)) b!63196))

(assert (= (or b!63197 b!63196) bm!4994))

(assert (= (and d!12999 res!34594) b!63198))

(assert (= (and b!63198 res!34595) b!63193))

(assert (= (and b!63193 res!34596) b!63187))

(assert (= (and b!63193 c!8518) b!63189))

(assert (= (and b!63193 (not c!8518)) b!63191))

(assert (= (and b!63189 res!34593) b!63192))

(assert (= (and b!63191 c!8516) b!63195))

(assert (= (and b!63191 (not c!8516)) b!63194))

(declare-fun b_lambda!2825 () Bool)

(assert (=> (not b_lambda!2825) (not b!63192)))

(assert (=> b!63192 t!4828))

(declare-fun b_and!3869 () Bool)

(assert (= b_and!3865 (and (=> t!4828 result!2455) b_and!3869)))

(assert (=> b!63192 t!4830))

(declare-fun b_and!3871 () Bool)

(assert (= b_and!3867 (and (=> t!4830 result!2457) b_and!3871)))

(declare-fun b_lambda!2827 () Bool)

(assert (=> (not b_lambda!2827) (not b!63197)))

(assert (=> b!63197 t!4828))

(declare-fun b_and!3873 () Bool)

(assert (= b_and!3869 (and (=> t!4828 result!2455) b_and!3873)))

(assert (=> b!63197 t!4830))

(declare-fun b_and!3875 () Bool)

(assert (= b_and!3871 (and (=> t!4830 result!2457) b_and!3875)))

(assert (=> b!63192 m!56073))

(assert (=> b!63192 m!56033))

(declare-fun m!57261 () Bool)

(assert (=> b!63192 m!57261))

(assert (=> b!63192 m!56491))

(assert (=> b!63192 m!56073))

(assert (=> b!63192 m!56493))

(assert (=> b!63192 m!56033))

(assert (=> b!63192 m!56491))

(declare-fun m!57263 () Bool)

(assert (=> b!63197 m!57263))

(declare-fun m!57265 () Bool)

(assert (=> b!63197 m!57265))

(declare-fun m!57267 () Bool)

(assert (=> b!63197 m!57267))

(assert (=> b!63197 m!56491))

(assert (=> b!63197 m!56073))

(assert (=> b!63197 m!56493))

(declare-fun m!57269 () Bool)

(assert (=> b!63197 m!57269))

(assert (=> b!63197 m!56033))

(assert (=> b!63197 m!56491))

(assert (=> b!63197 m!57263))

(assert (=> b!63197 m!56073))

(declare-fun m!57271 () Bool)

(assert (=> b!63195 m!57271))

(declare-fun m!57273 () Bool)

(assert (=> b!63198 m!57273))

(declare-fun m!57275 () Bool)

(assert (=> b!63194 m!57275))

(assert (=> b!63188 m!56033))

(assert (=> b!63188 m!56033))

(assert (=> b!63188 m!56065))

(assert (=> bm!4994 m!57271))

(assert (=> b!63189 m!56033))

(assert (=> b!63189 m!56033))

(declare-fun m!57277 () Bool)

(assert (=> b!63189 m!57277))

(declare-fun m!57279 () Bool)

(assert (=> d!12999 m!57279))

(assert (=> d!12999 m!55995))

(assert (=> b!63187 m!56033))

(assert (=> b!63187 m!56033))

(assert (=> b!63187 m!56065))

(assert (=> b!62786 d!12999))

(declare-fun d!13001 () Bool)

(declare-fun e!41444 () Bool)

(assert (=> d!13001 e!41444))

(declare-fun res!34597 () Bool)

(assert (=> d!13001 (=> (not res!34597) (not e!41444))))

(declare-fun lt!26578 () ListLongMap!1351)

(assert (=> d!13001 (= res!34597 (contains!686 lt!26578 (_1!1027 (tuple2!2033 lt!26340 (zeroValue!1999 newMap!16)))))))

(declare-fun lt!26579 () List!1429)

(assert (=> d!13001 (= lt!26578 (ListLongMap!1352 lt!26579))))

(declare-fun lt!26577 () Unit!1680)

(declare-fun lt!26580 () Unit!1680)

(assert (=> d!13001 (= lt!26577 lt!26580)))

(assert (=> d!13001 (= (getValueByKey!127 lt!26579 (_1!1027 (tuple2!2033 lt!26340 (zeroValue!1999 newMap!16)))) (Some!132 (_2!1027 (tuple2!2033 lt!26340 (zeroValue!1999 newMap!16)))))))

(assert (=> d!13001 (= lt!26580 (lemmaContainsTupThenGetReturnValue!44 lt!26579 (_1!1027 (tuple2!2033 lt!26340 (zeroValue!1999 newMap!16))) (_2!1027 (tuple2!2033 lt!26340 (zeroValue!1999 newMap!16)))))))

(assert (=> d!13001 (= lt!26579 (insertStrictlySorted!47 (toList!691 lt!26344) (_1!1027 (tuple2!2033 lt!26340 (zeroValue!1999 newMap!16))) (_2!1027 (tuple2!2033 lt!26340 (zeroValue!1999 newMap!16)))))))

(assert (=> d!13001 (= (+!82 lt!26344 (tuple2!2033 lt!26340 (zeroValue!1999 newMap!16))) lt!26578)))

(declare-fun b!63199 () Bool)

(declare-fun res!34598 () Bool)

(assert (=> b!63199 (=> (not res!34598) (not e!41444))))

(assert (=> b!63199 (= res!34598 (= (getValueByKey!127 (toList!691 lt!26578) (_1!1027 (tuple2!2033 lt!26340 (zeroValue!1999 newMap!16)))) (Some!132 (_2!1027 (tuple2!2033 lt!26340 (zeroValue!1999 newMap!16))))))))

(declare-fun b!63200 () Bool)

(assert (=> b!63200 (= e!41444 (contains!689 (toList!691 lt!26578) (tuple2!2033 lt!26340 (zeroValue!1999 newMap!16))))))

(assert (= (and d!13001 res!34597) b!63199))

(assert (= (and b!63199 res!34598) b!63200))

(declare-fun m!57281 () Bool)

(assert (=> d!13001 m!57281))

(declare-fun m!57283 () Bool)

(assert (=> d!13001 m!57283))

(declare-fun m!57285 () Bool)

(assert (=> d!13001 m!57285))

(declare-fun m!57287 () Bool)

(assert (=> d!13001 m!57287))

(declare-fun m!57289 () Bool)

(assert (=> b!63199 m!57289))

(declare-fun m!57291 () Bool)

(assert (=> b!63200 m!57291))

(assert (=> b!62786 d!13001))

(declare-fun d!13003 () Bool)

(assert (=> d!13003 (= (apply!68 (+!82 lt!26330 (tuple2!2033 lt!26338 (minValue!1999 newMap!16))) lt!26329) (get!1092 (getValueByKey!127 (toList!691 (+!82 lt!26330 (tuple2!2033 lt!26338 (minValue!1999 newMap!16)))) lt!26329)))))

(declare-fun bs!2763 () Bool)

(assert (= bs!2763 d!13003))

(declare-fun m!57293 () Bool)

(assert (=> bs!2763 m!57293))

(assert (=> bs!2763 m!57293))

(declare-fun m!57295 () Bool)

(assert (=> bs!2763 m!57295))

(assert (=> b!62786 d!13003))

(assert (=> b!62565 d!12831))

(declare-fun d!13005 () Bool)

(assert (=> d!13005 (= (apply!68 lt!26077 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)) (get!1092 (getValueByKey!127 (toList!691 lt!26077) (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2764 () Bool)

(assert (= bs!2764 d!13005))

(assert (=> bs!2764 m!56033))

(assert (=> bs!2764 m!56881))

(assert (=> bs!2764 m!56881))

(declare-fun m!57297 () Bool)

(assert (=> bs!2764 m!57297))

(assert (=> b!62519 d!13005))

(declare-fun d!13007 () Bool)

(declare-fun c!8519 () Bool)

(assert (=> d!13007 (= c!8519 ((_ is ValueCellFull!863) (select (arr!1791 (_values!2070 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!41445 () V!2865)

(assert (=> d!13007 (= (get!1088 (select (arr!1791 (_values!2070 newMap!16)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!41445)))

(declare-fun b!63201 () Bool)

(assert (=> b!63201 (= e!41445 (get!1090 (select (arr!1791 (_values!2070 newMap!16)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!63202 () Bool)

(assert (=> b!63202 (= e!41445 (get!1091 (select (arr!1791 (_values!2070 newMap!16)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!13007 c!8519) b!63201))

(assert (= (and d!13007 (not c!8519)) b!63202))

(assert (=> b!63201 m!56075))

(assert (=> b!63201 m!56073))

(declare-fun m!57299 () Bool)

(assert (=> b!63201 m!57299))

(assert (=> b!63202 m!56075))

(assert (=> b!63202 m!56073))

(declare-fun m!57301 () Bool)

(assert (=> b!63202 m!57301))

(assert (=> b!62519 d!13007))

(declare-fun d!13009 () Bool)

(declare-fun e!41447 () Bool)

(assert (=> d!13009 e!41447))

(declare-fun res!34599 () Bool)

(assert (=> d!13009 (=> res!34599 e!41447)))

(declare-fun lt!26582 () Bool)

(assert (=> d!13009 (= res!34599 (not lt!26582))))

(declare-fun lt!26583 () Bool)

(assert (=> d!13009 (= lt!26582 lt!26583)))

(declare-fun lt!26581 () Unit!1680)

(declare-fun e!41446 () Unit!1680)

(assert (=> d!13009 (= lt!26581 e!41446)))

(declare-fun c!8520 () Bool)

(assert (=> d!13009 (= c!8520 lt!26583)))

(assert (=> d!13009 (= lt!26583 (containsKey!130 (toList!691 (+!82 lt!26150 (tuple2!2033 lt!26147 lt!26149))) lt!26144))))

(assert (=> d!13009 (= (contains!686 (+!82 lt!26150 (tuple2!2033 lt!26147 lt!26149)) lt!26144) lt!26582)))

(declare-fun b!63203 () Bool)

(declare-fun lt!26584 () Unit!1680)

(assert (=> b!63203 (= e!41446 lt!26584)))

(assert (=> b!63203 (= lt!26584 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 (+!82 lt!26150 (tuple2!2033 lt!26147 lt!26149))) lt!26144))))

(assert (=> b!63203 (isDefined!79 (getValueByKey!127 (toList!691 (+!82 lt!26150 (tuple2!2033 lt!26147 lt!26149))) lt!26144))))

(declare-fun b!63204 () Bool)

(declare-fun Unit!1719 () Unit!1680)

(assert (=> b!63204 (= e!41446 Unit!1719)))

(declare-fun b!63205 () Bool)

(assert (=> b!63205 (= e!41447 (isDefined!79 (getValueByKey!127 (toList!691 (+!82 lt!26150 (tuple2!2033 lt!26147 lt!26149))) lt!26144)))))

(assert (= (and d!13009 c!8520) b!63203))

(assert (= (and d!13009 (not c!8520)) b!63204))

(assert (= (and d!13009 (not res!34599)) b!63205))

(declare-fun m!57303 () Bool)

(assert (=> d!13009 m!57303))

(declare-fun m!57305 () Bool)

(assert (=> b!63203 m!57305))

(declare-fun m!57307 () Bool)

(assert (=> b!63203 m!57307))

(assert (=> b!63203 m!57307))

(declare-fun m!57309 () Bool)

(assert (=> b!63203 m!57309))

(assert (=> b!63205 m!57307))

(assert (=> b!63205 m!57307))

(assert (=> b!63205 m!57309))

(assert (=> b!62614 d!13009))

(declare-fun d!13011 () Bool)

(declare-fun e!41448 () Bool)

(assert (=> d!13011 e!41448))

(declare-fun res!34600 () Bool)

(assert (=> d!13011 (=> (not res!34600) (not e!41448))))

(declare-fun lt!26586 () ListLongMap!1351)

(assert (=> d!13011 (= res!34600 (contains!686 lt!26586 (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!26587 () List!1429)

(assert (=> d!13011 (= lt!26586 (ListLongMap!1352 lt!26587))))

(declare-fun lt!26585 () Unit!1680)

(declare-fun lt!26588 () Unit!1680)

(assert (=> d!13011 (= lt!26585 lt!26588)))

(assert (=> d!13011 (= (getValueByKey!127 lt!26587 (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!132 (_2!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!13011 (= lt!26588 (lemmaContainsTupThenGetReturnValue!44 lt!26587 (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!13011 (= lt!26587 (insertStrictlySorted!47 (toList!691 call!4916) (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!13011 (= (+!82 call!4916 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26586)))

(declare-fun b!63206 () Bool)

(declare-fun res!34601 () Bool)

(assert (=> b!63206 (=> (not res!34601) (not e!41448))))

(assert (=> b!63206 (= res!34601 (= (getValueByKey!127 (toList!691 lt!26586) (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!132 (_2!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!63207 () Bool)

(assert (=> b!63207 (= e!41448 (contains!689 (toList!691 lt!26586) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!13011 res!34600) b!63206))

(assert (= (and b!63206 res!34601) b!63207))

(declare-fun m!57311 () Bool)

(assert (=> d!13011 m!57311))

(declare-fun m!57313 () Bool)

(assert (=> d!13011 m!57313))

(declare-fun m!57315 () Bool)

(assert (=> d!13011 m!57315))

(declare-fun m!57317 () Bool)

(assert (=> d!13011 m!57317))

(declare-fun m!57319 () Bool)

(assert (=> b!63206 m!57319))

(declare-fun m!57321 () Bool)

(assert (=> b!63207 m!57321))

(assert (=> b!62614 d!13011))

(declare-fun d!13013 () Bool)

(declare-fun e!41449 () Bool)

(assert (=> d!13013 e!41449))

(declare-fun res!34602 () Bool)

(assert (=> d!13013 (=> (not res!34602) (not e!41449))))

(declare-fun lt!26590 () ListLongMap!1351)

(assert (=> d!13013 (= res!34602 (contains!686 lt!26590 (_1!1027 (tuple2!2033 lt!26147 lt!26149))))))

(declare-fun lt!26591 () List!1429)

(assert (=> d!13013 (= lt!26590 (ListLongMap!1352 lt!26591))))

(declare-fun lt!26589 () Unit!1680)

(declare-fun lt!26592 () Unit!1680)

(assert (=> d!13013 (= lt!26589 lt!26592)))

(assert (=> d!13013 (= (getValueByKey!127 lt!26591 (_1!1027 (tuple2!2033 lt!26147 lt!26149))) (Some!132 (_2!1027 (tuple2!2033 lt!26147 lt!26149))))))

(assert (=> d!13013 (= lt!26592 (lemmaContainsTupThenGetReturnValue!44 lt!26591 (_1!1027 (tuple2!2033 lt!26147 lt!26149)) (_2!1027 (tuple2!2033 lt!26147 lt!26149))))))

(assert (=> d!13013 (= lt!26591 (insertStrictlySorted!47 (toList!691 lt!26150) (_1!1027 (tuple2!2033 lt!26147 lt!26149)) (_2!1027 (tuple2!2033 lt!26147 lt!26149))))))

(assert (=> d!13013 (= (+!82 lt!26150 (tuple2!2033 lt!26147 lt!26149)) lt!26590)))

(declare-fun b!63208 () Bool)

(declare-fun res!34603 () Bool)

(assert (=> b!63208 (=> (not res!34603) (not e!41449))))

(assert (=> b!63208 (= res!34603 (= (getValueByKey!127 (toList!691 lt!26590) (_1!1027 (tuple2!2033 lt!26147 lt!26149))) (Some!132 (_2!1027 (tuple2!2033 lt!26147 lt!26149)))))))

(declare-fun b!63209 () Bool)

(assert (=> b!63209 (= e!41449 (contains!689 (toList!691 lt!26590) (tuple2!2033 lt!26147 lt!26149)))))

(assert (= (and d!13013 res!34602) b!63208))

(assert (= (and b!63208 res!34603) b!63209))

(declare-fun m!57323 () Bool)

(assert (=> d!13013 m!57323))

(declare-fun m!57325 () Bool)

(assert (=> d!13013 m!57325))

(declare-fun m!57327 () Bool)

(assert (=> d!13013 m!57327))

(declare-fun m!57329 () Bool)

(assert (=> d!13013 m!57329))

(declare-fun m!57331 () Bool)

(assert (=> b!63208 m!57331))

(declare-fun m!57333 () Bool)

(assert (=> b!63209 m!57333))

(assert (=> b!62614 d!13013))

(assert (=> b!62614 d!12659))

(declare-fun d!13015 () Bool)

(assert (=> d!13015 (not (contains!686 (+!82 lt!26150 (tuple2!2033 lt!26147 lt!26149)) lt!26144))))

(declare-fun lt!26595 () Unit!1680)

(declare-fun choose!347 (ListLongMap!1351 (_ BitVec 64) V!2865 (_ BitVec 64)) Unit!1680)

(assert (=> d!13015 (= lt!26595 (choose!347 lt!26150 lt!26147 lt!26149 lt!26144))))

(declare-fun e!41452 () Bool)

(assert (=> d!13015 e!41452))

(declare-fun res!34606 () Bool)

(assert (=> d!13015 (=> (not res!34606) (not e!41452))))

(assert (=> d!13015 (= res!34606 (not (contains!686 lt!26150 lt!26144)))))

(assert (=> d!13015 (= (addStillNotContains!19 lt!26150 lt!26147 lt!26149 lt!26144) lt!26595)))

(declare-fun b!63213 () Bool)

(assert (=> b!63213 (= e!41452 (not (= lt!26147 lt!26144)))))

(assert (= (and d!13015 res!34606) b!63213))

(assert (=> d!13015 m!56155))

(assert (=> d!13015 m!56155))

(assert (=> d!13015 m!56157))

(declare-fun m!57335 () Bool)

(assert (=> d!13015 m!57335))

(declare-fun m!57337 () Bool)

(assert (=> d!13015 m!57337))

(assert (=> b!62614 d!13015))

(declare-fun d!13017 () Bool)

(declare-fun e!41454 () Bool)

(assert (=> d!13017 e!41454))

(declare-fun res!34607 () Bool)

(assert (=> d!13017 (=> res!34607 e!41454)))

(declare-fun lt!26597 () Bool)

(assert (=> d!13017 (= res!34607 (not lt!26597))))

(declare-fun lt!26598 () Bool)

(assert (=> d!13017 (= lt!26597 lt!26598)))

(declare-fun lt!26596 () Unit!1680)

(declare-fun e!41453 () Unit!1680)

(assert (=> d!13017 (= lt!26596 e!41453)))

(declare-fun c!8521 () Bool)

(assert (=> d!13017 (= c!8521 lt!26598)))

(assert (=> d!13017 (= lt!26598 (containsKey!130 (toList!691 lt!26175) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!13017 (= (contains!686 lt!26175 #b0000000000000000000000000000000000000000000000000000000000000000) lt!26597)))

(declare-fun b!63214 () Bool)

(declare-fun lt!26599 () Unit!1680)

(assert (=> b!63214 (= e!41453 lt!26599)))

(assert (=> b!63214 (= lt!26599 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 lt!26175) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63214 (isDefined!79 (getValueByKey!127 (toList!691 lt!26175) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63215 () Bool)

(declare-fun Unit!1720 () Unit!1680)

(assert (=> b!63215 (= e!41453 Unit!1720)))

(declare-fun b!63216 () Bool)

(assert (=> b!63216 (= e!41454 (isDefined!79 (getValueByKey!127 (toList!691 lt!26175) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!13017 c!8521) b!63214))

(assert (= (and d!13017 (not c!8521)) b!63215))

(assert (= (and d!13017 (not res!34607)) b!63216))

(declare-fun m!57339 () Bool)

(assert (=> d!13017 m!57339))

(declare-fun m!57341 () Bool)

(assert (=> b!63214 m!57341))

(declare-fun m!57343 () Bool)

(assert (=> b!63214 m!57343))

(assert (=> b!63214 m!57343))

(declare-fun m!57345 () Bool)

(assert (=> b!63214 m!57345))

(assert (=> b!63216 m!57343))

(assert (=> b!63216 m!57343))

(assert (=> b!63216 m!57345))

(assert (=> bm!4919 d!13017))

(assert (=> d!12763 d!12717))

(declare-fun b!63233 () Bool)

(declare-fun e!41466 () Bool)

(declare-fun call!5002 () Bool)

(assert (=> b!63233 (= e!41466 (not call!5002))))

(declare-fun b!63234 () Bool)

(declare-fun res!34617 () Bool)

(assert (=> b!63234 (=> (not res!34617) (not e!41466))))

(declare-fun lt!26602 () SeekEntryResult!223)

(assert (=> b!63234 (= res!34617 (= (select (arr!1790 (_keys!3719 newMap!16)) (index!3020 lt!26602)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63235 () Bool)

(declare-fun res!34618 () Bool)

(assert (=> b!63235 (=> (not res!34618) (not e!41466))))

(declare-fun call!5003 () Bool)

(assert (=> b!63235 (= res!34618 call!5003)))

(declare-fun e!41465 () Bool)

(assert (=> b!63235 (= e!41465 e!41466)))

(declare-fun b!63236 () Bool)

(declare-fun e!41464 () Bool)

(assert (=> b!63236 (= e!41464 (not call!5002))))

(declare-fun bm!4999 () Bool)

(assert (=> bm!4999 (= call!5002 (arrayContainsKey!0 (_keys!3719 newMap!16) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!63237 () Bool)

(declare-fun e!41463 () Bool)

(assert (=> b!63237 (= e!41463 e!41465)))

(declare-fun c!8526 () Bool)

(assert (=> b!63237 (= c!8526 ((_ is MissingVacant!223) lt!26602))))

(declare-fun b!63238 () Bool)

(declare-fun res!34619 () Bool)

(assert (=> b!63238 (= res!34619 (= (select (arr!1790 (_keys!3719 newMap!16)) (index!3017 lt!26602)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63238 (=> (not res!34619) (not e!41464))))

(declare-fun bm!5000 () Bool)

(declare-fun c!8527 () Bool)

(assert (=> bm!5000 (= call!5003 (inRange!0 (ite c!8527 (index!3017 lt!26602) (index!3020 lt!26602)) (mask!5993 newMap!16)))))

(declare-fun b!63239 () Bool)

(assert (=> b!63239 (= e!41463 e!41464)))

(declare-fun res!34616 () Bool)

(assert (=> b!63239 (= res!34616 call!5003)))

(assert (=> b!63239 (=> (not res!34616) (not e!41464))))

(declare-fun d!13019 () Bool)

(assert (=> d!13019 e!41463))

(assert (=> d!13019 (= c!8527 ((_ is MissingZero!223) lt!26602))))

(assert (=> d!13019 (= lt!26602 (seekEntryOrOpen!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (_keys!3719 newMap!16) (mask!5993 newMap!16)))))

(assert (=> d!13019 true))

(declare-fun _$34!778 () Unit!1680)

(assert (=> d!13019 (= (choose!345 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (defaultEntry!2087 newMap!16)) _$34!778)))

(declare-fun b!63240 () Bool)

(assert (=> b!63240 (= e!41465 ((_ is Undefined!223) lt!26602))))

(assert (= (and d!13019 c!8527) b!63239))

(assert (= (and d!13019 (not c!8527)) b!63237))

(assert (= (and b!63239 res!34616) b!63238))

(assert (= (and b!63238 res!34619) b!63236))

(assert (= (and b!63237 c!8526) b!63235))

(assert (= (and b!63237 (not c!8526)) b!63240))

(assert (= (and b!63235 res!34618) b!63234))

(assert (= (and b!63234 res!34617) b!63233))

(assert (= (or b!63239 b!63235) bm!5000))

(assert (= (or b!63236 b!63233) bm!4999))

(declare-fun m!57347 () Bool)

(assert (=> b!63234 m!57347))

(assert (=> bm!4999 m!55703))

(assert (=> bm!4999 m!55855))

(declare-fun m!57349 () Bool)

(assert (=> b!63238 m!57349))

(assert (=> d!13019 m!55703))

(assert (=> d!13019 m!55843))

(declare-fun m!57351 () Bool)

(assert (=> bm!5000 m!57351))

(assert (=> d!12763 d!13019))

(assert (=> d!12763 d!12793))

(declare-fun d!13021 () Bool)

(assert (=> d!13021 (= (isDefined!79 (getValueByKey!127 (toList!691 call!4867) (select (arr!1790 (_keys!3719 newMap!16)) (index!3018 lt!25967)))) (not (isEmpty!306 (getValueByKey!127 (toList!691 call!4867) (select (arr!1790 (_keys!3719 newMap!16)) (index!3018 lt!25967))))))))

(declare-fun bs!2765 () Bool)

(assert (= bs!2765 d!13021))

(assert (=> bs!2765 m!56439))

(declare-fun m!57353 () Bool)

(assert (=> bs!2765 m!57353))

(assert (=> b!62773 d!13021))

(declare-fun b!63241 () Bool)

(declare-fun e!41467 () Option!133)

(assert (=> b!63241 (= e!41467 (Some!132 (_2!1027 (h!2008 (toList!691 call!4867)))))))

(declare-fun d!13023 () Bool)

(declare-fun c!8528 () Bool)

(assert (=> d!13023 (= c!8528 (and ((_ is Cons!1425) (toList!691 call!4867)) (= (_1!1027 (h!2008 (toList!691 call!4867))) (select (arr!1790 (_keys!3719 newMap!16)) (index!3018 lt!25967)))))))

(assert (=> d!13023 (= (getValueByKey!127 (toList!691 call!4867) (select (arr!1790 (_keys!3719 newMap!16)) (index!3018 lt!25967))) e!41467)))

(declare-fun b!63242 () Bool)

(declare-fun e!41468 () Option!133)

(assert (=> b!63242 (= e!41467 e!41468)))

(declare-fun c!8529 () Bool)

(assert (=> b!63242 (= c!8529 (and ((_ is Cons!1425) (toList!691 call!4867)) (not (= (_1!1027 (h!2008 (toList!691 call!4867))) (select (arr!1790 (_keys!3719 newMap!16)) (index!3018 lt!25967))))))))

(declare-fun b!63243 () Bool)

(assert (=> b!63243 (= e!41468 (getValueByKey!127 (t!4815 (toList!691 call!4867)) (select (arr!1790 (_keys!3719 newMap!16)) (index!3018 lt!25967))))))

(declare-fun b!63244 () Bool)

(assert (=> b!63244 (= e!41468 None!131)))

(assert (= (and d!13023 c!8528) b!63241))

(assert (= (and d!13023 (not c!8528)) b!63242))

(assert (= (and b!63242 c!8529) b!63243))

(assert (= (and b!63242 (not c!8529)) b!63244))

(assert (=> b!63243 m!55857))

(declare-fun m!57355 () Bool)

(assert (=> b!63243 m!57355))

(assert (=> b!62773 d!13023))

(declare-fun d!13025 () Bool)

(declare-fun e!41470 () Bool)

(assert (=> d!13025 e!41470))

(declare-fun res!34620 () Bool)

(assert (=> d!13025 (=> res!34620 e!41470)))

(declare-fun lt!26604 () Bool)

(assert (=> d!13025 (= res!34620 (not lt!26604))))

(declare-fun lt!26605 () Bool)

(assert (=> d!13025 (= lt!26604 lt!26605)))

(declare-fun lt!26603 () Unit!1680)

(declare-fun e!41469 () Unit!1680)

(assert (=> d!13025 (= lt!26603 e!41469)))

(declare-fun c!8530 () Bool)

(assert (=> d!13025 (= c!8530 lt!26605)))

(assert (=> d!13025 (= lt!26605 (containsKey!130 (toList!691 lt!26349) (_1!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!13025 (= (contains!686 lt!26349 (_1!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!26604)))

(declare-fun b!63245 () Bool)

(declare-fun lt!26606 () Unit!1680)

(assert (=> b!63245 (= e!41469 lt!26606)))

(assert (=> b!63245 (= lt!26606 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 lt!26349) (_1!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!63245 (isDefined!79 (getValueByKey!127 (toList!691 lt!26349) (_1!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!63246 () Bool)

(declare-fun Unit!1721 () Unit!1680)

(assert (=> b!63246 (= e!41469 Unit!1721)))

(declare-fun b!63247 () Bool)

(assert (=> b!63247 (= e!41470 (isDefined!79 (getValueByKey!127 (toList!691 lt!26349) (_1!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!13025 c!8530) b!63245))

(assert (= (and d!13025 (not c!8530)) b!63246))

(assert (= (and d!13025 (not res!34620)) b!63247))

(declare-fun m!57357 () Bool)

(assert (=> d!13025 m!57357))

(declare-fun m!57359 () Bool)

(assert (=> b!63245 m!57359))

(assert (=> b!63245 m!56511))

(assert (=> b!63245 m!56511))

(declare-fun m!57361 () Bool)

(assert (=> b!63245 m!57361))

(assert (=> b!63247 m!56511))

(assert (=> b!63247 m!56511))

(assert (=> b!63247 m!57361))

(assert (=> d!12759 d!13025))

(declare-fun b!63248 () Bool)

(declare-fun e!41471 () Option!133)

(assert (=> b!63248 (= e!41471 (Some!132 (_2!1027 (h!2008 lt!26350))))))

(declare-fun c!8531 () Bool)

(declare-fun d!13027 () Bool)

(assert (=> d!13027 (= c!8531 (and ((_ is Cons!1425) lt!26350) (= (_1!1027 (h!2008 lt!26350)) (_1!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!13027 (= (getValueByKey!127 lt!26350 (_1!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!41471)))

(declare-fun b!63249 () Bool)

(declare-fun e!41472 () Option!133)

(assert (=> b!63249 (= e!41471 e!41472)))

(declare-fun c!8532 () Bool)

(assert (=> b!63249 (= c!8532 (and ((_ is Cons!1425) lt!26350) (not (= (_1!1027 (h!2008 lt!26350)) (_1!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun b!63250 () Bool)

(assert (=> b!63250 (= e!41472 (getValueByKey!127 (t!4815 lt!26350) (_1!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!63251 () Bool)

(assert (=> b!63251 (= e!41472 None!131)))

(assert (= (and d!13027 c!8531) b!63248))

(assert (= (and d!13027 (not c!8531)) b!63249))

(assert (= (and b!63249 c!8532) b!63250))

(assert (= (and b!63249 (not c!8532)) b!63251))

(declare-fun m!57363 () Bool)

(assert (=> b!63250 m!57363))

(assert (=> d!12759 d!13027))

(declare-fun d!13029 () Bool)

(assert (=> d!13029 (= (getValueByKey!127 lt!26350 (_1!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!132 (_2!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!26607 () Unit!1680)

(assert (=> d!13029 (= lt!26607 (choose!346 lt!26350 (_1!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!41473 () Bool)

(assert (=> d!13029 e!41473))

(declare-fun res!34621 () Bool)

(assert (=> d!13029 (=> (not res!34621) (not e!41473))))

(assert (=> d!13029 (= res!34621 (isStrictlySorted!273 lt!26350))))

(assert (=> d!13029 (= (lemmaContainsTupThenGetReturnValue!44 lt!26350 (_1!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!26607)))

(declare-fun b!63252 () Bool)

(declare-fun res!34622 () Bool)

(assert (=> b!63252 (=> (not res!34622) (not e!41473))))

(assert (=> b!63252 (= res!34622 (containsKey!130 lt!26350 (_1!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!63253 () Bool)

(assert (=> b!63253 (= e!41473 (contains!689 lt!26350 (tuple2!2033 (_1!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!13029 res!34621) b!63252))

(assert (= (and b!63252 res!34622) b!63253))

(assert (=> d!13029 m!56505))

(declare-fun m!57365 () Bool)

(assert (=> d!13029 m!57365))

(declare-fun m!57367 () Bool)

(assert (=> d!13029 m!57367))

(declare-fun m!57369 () Bool)

(assert (=> b!63252 m!57369))

(declare-fun m!57371 () Bool)

(assert (=> b!63253 m!57371))

(assert (=> d!12759 d!13029))

(declare-fun b!63254 () Bool)

(declare-fun e!41477 () Bool)

(declare-fun lt!26608 () List!1429)

(assert (=> b!63254 (= e!41477 (contains!689 lt!26608 (tuple2!2033 (_1!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!63255 () Bool)

(declare-fun res!34624 () Bool)

(assert (=> b!63255 (=> (not res!34624) (not e!41477))))

(assert (=> b!63255 (= res!34624 (containsKey!130 lt!26608 (_1!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun bm!5001 () Bool)

(declare-fun call!5006 () List!1429)

(declare-fun call!5004 () List!1429)

(assert (=> bm!5001 (= call!5006 call!5004)))

(declare-fun bm!5002 () Bool)

(declare-fun call!5005 () List!1429)

(assert (=> bm!5002 (= call!5004 call!5005)))

(declare-fun b!63256 () Bool)

(declare-fun c!8533 () Bool)

(assert (=> b!63256 (= c!8533 (and ((_ is Cons!1425) (toList!691 (ite c!8299 call!4878 call!4863))) (bvsgt (_1!1027 (h!2008 (toList!691 (ite c!8299 call!4878 call!4863)))) (_1!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun e!41475 () List!1429)

(declare-fun e!41478 () List!1429)

(assert (=> b!63256 (= e!41475 e!41478)))

(declare-fun d!13031 () Bool)

(assert (=> d!13031 e!41477))

(declare-fun res!34623 () Bool)

(assert (=> d!13031 (=> (not res!34623) (not e!41477))))

(assert (=> d!13031 (= res!34623 (isStrictlySorted!273 lt!26608))))

(declare-fun e!41474 () List!1429)

(assert (=> d!13031 (= lt!26608 e!41474)))

(declare-fun c!8534 () Bool)

(assert (=> d!13031 (= c!8534 (and ((_ is Cons!1425) (toList!691 (ite c!8299 call!4878 call!4863))) (bvslt (_1!1027 (h!2008 (toList!691 (ite c!8299 call!4878 call!4863)))) (_1!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!13031 (isStrictlySorted!273 (toList!691 (ite c!8299 call!4878 call!4863)))))

(assert (=> d!13031 (= (insertStrictlySorted!47 (toList!691 (ite c!8299 call!4878 call!4863)) (_1!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!26608)))

(declare-fun bm!5003 () Bool)

(declare-fun e!41476 () List!1429)

(assert (=> bm!5003 (= call!5005 ($colon$colon!61 e!41476 (ite c!8534 (h!2008 (toList!691 (ite c!8299 call!4878 call!4863))) (tuple2!2033 (_1!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun c!8536 () Bool)

(assert (=> bm!5003 (= c!8536 c!8534)))

(declare-fun b!63257 () Bool)

(assert (=> b!63257 (= e!41475 call!5004)))

(declare-fun b!63258 () Bool)

(assert (=> b!63258 (= e!41476 (insertStrictlySorted!47 (t!4815 (toList!691 (ite c!8299 call!4878 call!4863))) (_1!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!63259 () Bool)

(assert (=> b!63259 (= e!41474 call!5005)))

(declare-fun b!63260 () Bool)

(assert (=> b!63260 (= e!41474 e!41475)))

(declare-fun c!8535 () Bool)

(assert (=> b!63260 (= c!8535 (and ((_ is Cons!1425) (toList!691 (ite c!8299 call!4878 call!4863))) (= (_1!1027 (h!2008 (toList!691 (ite c!8299 call!4878 call!4863)))) (_1!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!63261 () Bool)

(assert (=> b!63261 (= e!41478 call!5006)))

(declare-fun b!63262 () Bool)

(assert (=> b!63262 (= e!41476 (ite c!8535 (t!4815 (toList!691 (ite c!8299 call!4878 call!4863))) (ite c!8533 (Cons!1425 (h!2008 (toList!691 (ite c!8299 call!4878 call!4863))) (t!4815 (toList!691 (ite c!8299 call!4878 call!4863)))) Nil!1426)))))

(declare-fun b!63263 () Bool)

(assert (=> b!63263 (= e!41478 call!5006)))

(assert (= (and d!13031 c!8534) b!63259))

(assert (= (and d!13031 (not c!8534)) b!63260))

(assert (= (and b!63260 c!8535) b!63257))

(assert (= (and b!63260 (not c!8535)) b!63256))

(assert (= (and b!63256 c!8533) b!63263))

(assert (= (and b!63256 (not c!8533)) b!63261))

(assert (= (or b!63263 b!63261) bm!5001))

(assert (= (or b!63257 bm!5001) bm!5002))

(assert (= (or b!63259 bm!5002) bm!5003))

(assert (= (and bm!5003 c!8536) b!63258))

(assert (= (and bm!5003 (not c!8536)) b!63262))

(assert (= (and d!13031 res!34623) b!63255))

(assert (= (and b!63255 res!34624) b!63254))

(declare-fun m!57373 () Bool)

(assert (=> b!63255 m!57373))

(declare-fun m!57375 () Bool)

(assert (=> bm!5003 m!57375))

(declare-fun m!57377 () Bool)

(assert (=> b!63258 m!57377))

(declare-fun m!57379 () Bool)

(assert (=> b!63254 m!57379))

(declare-fun m!57381 () Bool)

(assert (=> d!13031 m!57381))

(declare-fun m!57383 () Bool)

(assert (=> d!13031 m!57383))

(assert (=> d!12759 d!13031))

(declare-fun d!13033 () Bool)

(declare-fun e!41479 () Bool)

(assert (=> d!13033 e!41479))

(declare-fun res!34625 () Bool)

(assert (=> d!13033 (=> (not res!34625) (not e!41479))))

(declare-fun lt!26610 () ListLongMap!1351)

(assert (=> d!13033 (= res!34625 (contains!686 lt!26610 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(declare-fun lt!26611 () List!1429)

(assert (=> d!13033 (= lt!26610 (ListLongMap!1352 lt!26611))))

(declare-fun lt!26609 () Unit!1680)

(declare-fun lt!26612 () Unit!1680)

(assert (=> d!13033 (= lt!26609 lt!26612)))

(assert (=> d!13033 (= (getValueByKey!127 lt!26611 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))) (Some!132 (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(assert (=> d!13033 (= lt!26612 (lemmaContainsTupThenGetReturnValue!44 lt!26611 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(assert (=> d!13033 (= lt!26611 (insertStrictlySorted!47 (toList!691 call!4956) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(assert (=> d!13033 (= (+!82 call!4956 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))) lt!26610)))

(declare-fun b!63264 () Bool)

(declare-fun res!34626 () Bool)

(assert (=> b!63264 (=> (not res!34626) (not e!41479))))

(assert (=> b!63264 (= res!34626 (= (getValueByKey!127 (toList!691 lt!26610) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))) (Some!132 (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))))

(declare-fun b!63265 () Bool)

(assert (=> b!63265 (= e!41479 (contains!689 (toList!691 lt!26610) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))

(assert (= (and d!13033 res!34625) b!63264))

(assert (= (and b!63264 res!34626) b!63265))

(declare-fun m!57385 () Bool)

(assert (=> d!13033 m!57385))

(declare-fun m!57387 () Bool)

(assert (=> d!13033 m!57387))

(declare-fun m!57389 () Bool)

(assert (=> d!13033 m!57389))

(declare-fun m!57391 () Bool)

(assert (=> d!13033 m!57391))

(declare-fun m!57393 () Bool)

(assert (=> b!63264 m!57393))

(declare-fun m!57395 () Bool)

(assert (=> b!63265 m!57395))

(assert (=> b!62836 d!13033))

(declare-fun d!13035 () Bool)

(assert (=> d!13035 (= (content!68 Nil!1427) ((as const (Array (_ BitVec 64) Bool)) false))))

(assert (=> d!12721 d!13035))

(declare-fun d!13037 () Bool)

(assert (=> d!13037 (= (inRange!0 (index!3018 lt!26173) (mask!5993 newMap!16)) (and (bvsge (index!3018 lt!26173) #b00000000000000000000000000000000) (bvslt (index!3018 lt!26173) (bvadd (mask!5993 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> b!62631 d!13037))

(declare-fun d!13039 () Bool)

(declare-fun e!41480 () Bool)

(assert (=> d!13039 e!41480))

(declare-fun res!34627 () Bool)

(assert (=> d!13039 (=> (not res!34627) (not e!41480))))

(declare-fun lt!26614 () ListLongMap!1351)

(assert (=> d!13039 (= res!34627 (contains!686 lt!26614 (_1!1027 (ite (or c!8358 c!8360) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))))))))

(declare-fun lt!26615 () List!1429)

(assert (=> d!13039 (= lt!26614 (ListLongMap!1352 lt!26615))))

(declare-fun lt!26613 () Unit!1680)

(declare-fun lt!26616 () Unit!1680)

(assert (=> d!13039 (= lt!26613 lt!26616)))

(assert (=> d!13039 (= (getValueByKey!127 lt!26615 (_1!1027 (ite (or c!8358 c!8360) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))))) (Some!132 (_2!1027 (ite (or c!8358 c!8360) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))))))))

(assert (=> d!13039 (= lt!26616 (lemmaContainsTupThenGetReturnValue!44 lt!26615 (_1!1027 (ite (or c!8358 c!8360) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))) (_2!1027 (ite (or c!8358 c!8360) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))))))))

(assert (=> d!13039 (= lt!26615 (insertStrictlySorted!47 (toList!691 (ite c!8358 call!4921 (ite c!8360 call!4917 call!4920))) (_1!1027 (ite (or c!8358 c!8360) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))) (_2!1027 (ite (or c!8358 c!8360) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))))))))

(assert (=> d!13039 (= (+!82 (ite c!8358 call!4921 (ite c!8360 call!4917 call!4920)) (ite (or c!8358 c!8360) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))) lt!26614)))

(declare-fun b!63266 () Bool)

(declare-fun res!34628 () Bool)

(assert (=> b!63266 (=> (not res!34628) (not e!41480))))

(assert (=> b!63266 (= res!34628 (= (getValueByKey!127 (toList!691 lt!26614) (_1!1027 (ite (or c!8358 c!8360) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))))) (Some!132 (_2!1027 (ite (or c!8358 c!8360) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))))))))

(declare-fun b!63267 () Bool)

(assert (=> b!63267 (= e!41480 (contains!689 (toList!691 lt!26614) (ite (or c!8358 c!8360) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))))))

(assert (= (and d!13039 res!34627) b!63266))

(assert (= (and b!63266 res!34628) b!63267))

(declare-fun m!57397 () Bool)

(assert (=> d!13039 m!57397))

(declare-fun m!57399 () Bool)

(assert (=> d!13039 m!57399))

(declare-fun m!57401 () Bool)

(assert (=> d!13039 m!57401))

(declare-fun m!57403 () Bool)

(assert (=> d!13039 m!57403))

(declare-fun m!57405 () Bool)

(assert (=> b!63266 m!57405))

(declare-fun m!57407 () Bool)

(assert (=> b!63267 m!57407))

(assert (=> bm!4914 d!13039))

(declare-fun d!13041 () Bool)

(assert (=> d!13041 (isDefined!79 (getValueByKey!127 (toList!691 e!40947) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun lt!26617 () Unit!1680)

(assert (=> d!13041 (= lt!26617 (choose!341 (toList!691 e!40947) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun e!41481 () Bool)

(assert (=> d!13041 e!41481))

(declare-fun res!34629 () Bool)

(assert (=> d!13041 (=> (not res!34629) (not e!41481))))

(assert (=> d!13041 (= res!34629 (isStrictlySorted!273 (toList!691 e!40947)))))

(assert (=> d!13041 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 e!40947) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) lt!26617)))

(declare-fun b!63268 () Bool)

(assert (=> b!63268 (= e!41481 (containsKey!130 (toList!691 e!40947) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (= (and d!13041 res!34629) b!63268))

(assert (=> d!13041 m!55703))

(assert (=> d!13041 m!56331))

(assert (=> d!13041 m!56331))

(assert (=> d!13041 m!56333))

(assert (=> d!13041 m!55703))

(declare-fun m!57409 () Bool)

(assert (=> d!13041 m!57409))

(declare-fun m!57411 () Bool)

(assert (=> d!13041 m!57411))

(assert (=> b!63268 m!55703))

(assert (=> b!63268 m!56327))

(assert (=> b!62683 d!13041))

(declare-fun d!13043 () Bool)

(assert (=> d!13043 (= (isDefined!79 (getValueByKey!127 (toList!691 e!40947) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355))) (not (isEmpty!306 (getValueByKey!127 (toList!691 e!40947) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))))

(declare-fun bs!2766 () Bool)

(assert (= bs!2766 d!13043))

(assert (=> bs!2766 m!56331))

(declare-fun m!57413 () Bool)

(assert (=> bs!2766 m!57413))

(assert (=> b!62683 d!13043))

(declare-fun b!63269 () Bool)

(declare-fun e!41482 () Option!133)

(assert (=> b!63269 (= e!41482 (Some!132 (_2!1027 (h!2008 (toList!691 e!40947)))))))

(declare-fun c!8537 () Bool)

(declare-fun d!13045 () Bool)

(assert (=> d!13045 (= c!8537 (and ((_ is Cons!1425) (toList!691 e!40947)) (= (_1!1027 (h!2008 (toList!691 e!40947))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355))))))

(assert (=> d!13045 (= (getValueByKey!127 (toList!691 e!40947) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) e!41482)))

(declare-fun b!63270 () Bool)

(declare-fun e!41483 () Option!133)

(assert (=> b!63270 (= e!41482 e!41483)))

(declare-fun c!8538 () Bool)

(assert (=> b!63270 (= c!8538 (and ((_ is Cons!1425) (toList!691 e!40947)) (not (= (_1!1027 (h!2008 (toList!691 e!40947))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))))

(declare-fun b!63271 () Bool)

(assert (=> b!63271 (= e!41483 (getValueByKey!127 (t!4815 (toList!691 e!40947)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun b!63272 () Bool)

(assert (=> b!63272 (= e!41483 None!131)))

(assert (= (and d!13045 c!8537) b!63269))

(assert (= (and d!13045 (not c!8537)) b!63270))

(assert (= (and b!63270 c!8538) b!63271))

(assert (= (and b!63270 (not c!8538)) b!63272))

(assert (=> b!63271 m!55703))

(declare-fun m!57415 () Bool)

(assert (=> b!63271 m!57415))

(assert (=> b!62683 d!13045))

(declare-fun b!63273 () Bool)

(declare-fun e!41484 () Option!133)

(assert (=> b!63273 (= e!41484 (Some!132 (_2!1027 (h!2008 (toList!691 lt!26349)))))))

(declare-fun d!13047 () Bool)

(declare-fun c!8539 () Bool)

(assert (=> d!13047 (= c!8539 (and ((_ is Cons!1425) (toList!691 lt!26349)) (= (_1!1027 (h!2008 (toList!691 lt!26349))) (_1!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!13047 (= (getValueByKey!127 (toList!691 lt!26349) (_1!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!41484)))

(declare-fun b!63274 () Bool)

(declare-fun e!41485 () Option!133)

(assert (=> b!63274 (= e!41484 e!41485)))

(declare-fun c!8540 () Bool)

(assert (=> b!63274 (= c!8540 (and ((_ is Cons!1425) (toList!691 lt!26349)) (not (= (_1!1027 (h!2008 (toList!691 lt!26349))) (_1!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun b!63275 () Bool)

(assert (=> b!63275 (= e!41485 (getValueByKey!127 (t!4815 (toList!691 lt!26349)) (_1!1027 (ite c!8299 (ite c!8289 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!63276 () Bool)

(assert (=> b!63276 (= e!41485 None!131)))

(assert (= (and d!13047 c!8539) b!63273))

(assert (= (and d!13047 (not c!8539)) b!63274))

(assert (= (and b!63274 c!8540) b!63275))

(assert (= (and b!63274 (not c!8540)) b!63276))

(declare-fun m!57417 () Bool)

(assert (=> b!63275 m!57417))

(assert (=> b!62801 d!13047))

(declare-fun bm!5004 () Bool)

(declare-fun call!5007 () ListLongMap!1351)

(assert (=> bm!5004 (= call!5007 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (ite (or c!8299 c!8290) (_values!2070 newMap!16) lt!25974) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2087 newMap!16)))))

(declare-fun b!63277 () Bool)

(declare-fun e!41486 () Bool)

(assert (=> b!63277 (= e!41486 (validKeyInArray!0 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63277 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!63278 () Bool)

(declare-fun e!41490 () ListLongMap!1351)

(declare-fun e!41492 () ListLongMap!1351)

(assert (=> b!63278 (= e!41490 e!41492)))

(declare-fun c!8543 () Bool)

(assert (=> b!63278 (= c!8543 (validKeyInArray!0 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63279 () Bool)

(declare-fun e!41491 () Bool)

(declare-fun e!41489 () Bool)

(assert (=> b!63279 (= e!41491 e!41489)))

(assert (=> b!63279 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun res!34630 () Bool)

(declare-fun lt!26620 () ListLongMap!1351)

(assert (=> b!63279 (= res!34630 (contains!686 lt!26620 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63279 (=> (not res!34630) (not e!41489))))

(declare-fun b!63280 () Bool)

(assert (=> b!63280 (= e!41490 (ListLongMap!1352 Nil!1426))))

(declare-fun b!63281 () Bool)

(declare-fun e!41487 () Bool)

(assert (=> b!63281 (= e!41491 e!41487)))

(declare-fun c!8542 () Bool)

(assert (=> b!63281 (= c!8542 (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun b!63282 () Bool)

(assert (=> b!63282 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(assert (=> b!63282 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (ite (or c!8299 c!8290) (_values!2070 newMap!16) lt!25974))))))

(assert (=> b!63282 (= e!41489 (= (apply!68 lt!26620 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)) (get!1088 (select (arr!1791 (ite (or c!8299 c!8290) (_values!2070 newMap!16) lt!25974)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!63283 () Bool)

(declare-fun e!41488 () Bool)

(assert (=> b!63283 (= e!41488 e!41491)))

(declare-fun c!8544 () Bool)

(assert (=> b!63283 (= c!8544 e!41486)))

(declare-fun res!34633 () Bool)

(assert (=> b!63283 (=> (not res!34633) (not e!41486))))

(assert (=> b!63283 (= res!34633 (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun b!63285 () Bool)

(assert (=> b!63285 (= e!41487 (= lt!26620 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (ite (or c!8299 c!8290) (_values!2070 newMap!16) lt!25974) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2087 newMap!16))))))

(declare-fun b!63286 () Bool)

(assert (=> b!63286 (= e!41492 call!5007)))

(declare-fun b!63287 () Bool)

(declare-fun lt!26622 () Unit!1680)

(declare-fun lt!26619 () Unit!1680)

(assert (=> b!63287 (= lt!26622 lt!26619)))

(declare-fun lt!26624 () ListLongMap!1351)

(declare-fun lt!26621 () (_ BitVec 64))

(declare-fun lt!26618 () (_ BitVec 64))

(declare-fun lt!26623 () V!2865)

(assert (=> b!63287 (not (contains!686 (+!82 lt!26624 (tuple2!2033 lt!26621 lt!26623)) lt!26618))))

(assert (=> b!63287 (= lt!26619 (addStillNotContains!19 lt!26624 lt!26621 lt!26623 lt!26618))))

(assert (=> b!63287 (= lt!26618 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!63287 (= lt!26623 (get!1088 (select (arr!1791 (ite (or c!8299 c!8290) (_values!2070 newMap!16) lt!25974)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!63287 (= lt!26621 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!63287 (= lt!26624 call!5007)))

(assert (=> b!63287 (= e!41492 (+!82 call!5007 (tuple2!2033 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000) (get!1088 (select (arr!1791 (ite (or c!8299 c!8290) (_values!2070 newMap!16) lt!25974)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!63288 () Bool)

(declare-fun res!34632 () Bool)

(assert (=> b!63288 (=> (not res!34632) (not e!41488))))

(assert (=> b!63288 (= res!34632 (not (contains!686 lt!26620 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!63284 () Bool)

(assert (=> b!63284 (= e!41487 (isEmpty!305 lt!26620))))

(declare-fun d!13049 () Bool)

(assert (=> d!13049 e!41488))

(declare-fun res!34631 () Bool)

(assert (=> d!13049 (=> (not res!34631) (not e!41488))))

(assert (=> d!13049 (= res!34631 (not (contains!686 lt!26620 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!13049 (= lt!26620 e!41490)))

(declare-fun c!8541 () Bool)

(assert (=> d!13049 (= c!8541 (bvsge #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(assert (=> d!13049 (validMask!0 (mask!5993 newMap!16))))

(assert (=> d!13049 (= (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (ite (or c!8299 c!8290) (_values!2070 newMap!16) lt!25974) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) lt!26620)))

(assert (= (and d!13049 c!8541) b!63280))

(assert (= (and d!13049 (not c!8541)) b!63278))

(assert (= (and b!63278 c!8543) b!63287))

(assert (= (and b!63278 (not c!8543)) b!63286))

(assert (= (or b!63287 b!63286) bm!5004))

(assert (= (and d!13049 res!34631) b!63288))

(assert (= (and b!63288 res!34632) b!63283))

(assert (= (and b!63283 res!34633) b!63277))

(assert (= (and b!63283 c!8544) b!63279))

(assert (= (and b!63283 (not c!8544)) b!63281))

(assert (= (and b!63279 res!34630) b!63282))

(assert (= (and b!63281 c!8542) b!63285))

(assert (= (and b!63281 (not c!8542)) b!63284))

(declare-fun b_lambda!2829 () Bool)

(assert (=> (not b_lambda!2829) (not b!63282)))

(assert (=> b!63282 t!4828))

(declare-fun b_and!3877 () Bool)

(assert (= b_and!3873 (and (=> t!4828 result!2455) b_and!3877)))

(assert (=> b!63282 t!4830))

(declare-fun b_and!3879 () Bool)

(assert (= b_and!3875 (and (=> t!4830 result!2457) b_and!3879)))

(declare-fun b_lambda!2831 () Bool)

(assert (=> (not b_lambda!2831) (not b!63287)))

(assert (=> b!63287 t!4828))

(declare-fun b_and!3881 () Bool)

(assert (= b_and!3877 (and (=> t!4828 result!2455) b_and!3881)))

(assert (=> b!63287 t!4830))

(declare-fun b_and!3883 () Bool)

(assert (= b_and!3879 (and (=> t!4830 result!2457) b_and!3883)))

(assert (=> b!63282 m!56073))

(assert (=> b!63282 m!56033))

(declare-fun m!57419 () Bool)

(assert (=> b!63282 m!57419))

(assert (=> b!63282 m!56575))

(assert (=> b!63282 m!56073))

(assert (=> b!63282 m!56577))

(assert (=> b!63282 m!56033))

(assert (=> b!63282 m!56575))

(declare-fun m!57421 () Bool)

(assert (=> b!63287 m!57421))

(declare-fun m!57423 () Bool)

(assert (=> b!63287 m!57423))

(declare-fun m!57425 () Bool)

(assert (=> b!63287 m!57425))

(assert (=> b!63287 m!56575))

(assert (=> b!63287 m!56073))

(assert (=> b!63287 m!56577))

(declare-fun m!57427 () Bool)

(assert (=> b!63287 m!57427))

(assert (=> b!63287 m!56033))

(assert (=> b!63287 m!56575))

(assert (=> b!63287 m!57421))

(assert (=> b!63287 m!56073))

(declare-fun m!57429 () Bool)

(assert (=> b!63285 m!57429))

(declare-fun m!57431 () Bool)

(assert (=> b!63288 m!57431))

(declare-fun m!57433 () Bool)

(assert (=> b!63284 m!57433))

(assert (=> b!63278 m!56033))

(assert (=> b!63278 m!56033))

(assert (=> b!63278 m!56065))

(assert (=> bm!5004 m!57429))

(assert (=> b!63279 m!56033))

(assert (=> b!63279 m!56033))

(declare-fun m!57435 () Bool)

(assert (=> b!63279 m!57435))

(declare-fun m!57437 () Bool)

(assert (=> d!13049 m!57437))

(assert (=> d!13049 m!55995))

(assert (=> b!63277 m!56033))

(assert (=> b!63277 m!56033))

(assert (=> b!63277 m!56065))

(assert (=> bm!4952 d!13049))

(declare-fun d!13051 () Bool)

(assert (not d!13051))

(assert (=> b!62682 d!13051))

(assert (=> d!12767 d!12793))

(declare-fun d!13053 () Bool)

(declare-fun e!41494 () Bool)

(assert (=> d!13053 e!41494))

(declare-fun res!34634 () Bool)

(assert (=> d!13053 (=> res!34634 e!41494)))

(declare-fun lt!26626 () Bool)

(assert (=> d!13053 (= res!34634 (not lt!26626))))

(declare-fun lt!26627 () Bool)

(assert (=> d!13053 (= lt!26626 lt!26627)))

(declare-fun lt!26625 () Unit!1680)

(declare-fun e!41493 () Unit!1680)

(assert (=> d!13053 (= lt!26625 e!41493)))

(declare-fun c!8545 () Bool)

(assert (=> d!13053 (= c!8545 lt!26627)))

(assert (=> d!13053 (= lt!26627 (containsKey!130 (toList!691 lt!26323) (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!13053 (= (contains!686 lt!26323 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)) lt!26626)))

(declare-fun b!63289 () Bool)

(declare-fun lt!26628 () Unit!1680)

(assert (=> b!63289 (= e!41493 lt!26628)))

(assert (=> b!63289 (= lt!26628 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 lt!26323) (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63289 (isDefined!79 (getValueByKey!127 (toList!691 lt!26323) (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63290 () Bool)

(declare-fun Unit!1722 () Unit!1680)

(assert (=> b!63290 (= e!41493 Unit!1722)))

(declare-fun b!63291 () Bool)

(assert (=> b!63291 (= e!41494 (isDefined!79 (getValueByKey!127 (toList!691 lt!26323) (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!13053 c!8545) b!63289))

(assert (= (and d!13053 (not c!8545)) b!63290))

(assert (= (and d!13053 (not res!34634)) b!63291))

(assert (=> d!13053 m!56033))

(declare-fun m!57439 () Bool)

(assert (=> d!13053 m!57439))

(assert (=> b!63289 m!56033))

(declare-fun m!57441 () Bool)

(assert (=> b!63289 m!57441))

(assert (=> b!63289 m!56033))

(declare-fun m!57443 () Bool)

(assert (=> b!63289 m!57443))

(assert (=> b!63289 m!57443))

(declare-fun m!57445 () Bool)

(assert (=> b!63289 m!57445))

(assert (=> b!63291 m!56033))

(assert (=> b!63291 m!57443))

(assert (=> b!63291 m!57443))

(assert (=> b!63291 m!57445))

(assert (=> b!62790 d!13053))

(declare-fun d!13055 () Bool)

(assert (=> d!13055 (= (validKeyInArray!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) (and (not (= (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62656 d!13055))

(declare-fun d!13057 () Bool)

(declare-fun e!41496 () Bool)

(assert (=> d!13057 e!41496))

(declare-fun res!34635 () Bool)

(assert (=> d!13057 (=> res!34635 e!41496)))

(declare-fun lt!26630 () Bool)

(assert (=> d!13057 (= res!34635 (not lt!26630))))

(declare-fun lt!26631 () Bool)

(assert (=> d!13057 (= lt!26630 lt!26631)))

(declare-fun lt!26629 () Unit!1680)

(declare-fun e!41495 () Unit!1680)

(assert (=> d!13057 (= lt!26629 e!41495)))

(declare-fun c!8546 () Bool)

(assert (=> d!13057 (= c!8546 lt!26631)))

(assert (=> d!13057 (= lt!26631 (containsKey!130 (toList!691 lt!26100) (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!13057 (= (contains!686 lt!26100 (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!26630)))

(declare-fun b!63292 () Bool)

(declare-fun lt!26632 () Unit!1680)

(assert (=> b!63292 (= e!41495 lt!26632)))

(assert (=> b!63292 (= lt!26632 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 lt!26100) (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> b!63292 (isDefined!79 (getValueByKey!127 (toList!691 lt!26100) (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!63293 () Bool)

(declare-fun Unit!1723 () Unit!1680)

(assert (=> b!63293 (= e!41495 Unit!1723)))

(declare-fun b!63294 () Bool)

(assert (=> b!63294 (= e!41496 (isDefined!79 (getValueByKey!127 (toList!691 lt!26100) (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!13057 c!8546) b!63292))

(assert (= (and d!13057 (not c!8546)) b!63293))

(assert (= (and d!13057 (not res!34635)) b!63294))

(declare-fun m!57447 () Bool)

(assert (=> d!13057 m!57447))

(declare-fun m!57449 () Bool)

(assert (=> b!63292 m!57449))

(assert (=> b!63292 m!56093))

(assert (=> b!63292 m!56093))

(declare-fun m!57451 () Bool)

(assert (=> b!63292 m!57451))

(assert (=> b!63294 m!56093))

(assert (=> b!63294 m!56093))

(assert (=> b!63294 m!57451))

(assert (=> d!12663 d!13057))

(declare-fun b!63295 () Bool)

(declare-fun e!41497 () Option!133)

(assert (=> b!63295 (= e!41497 (Some!132 (_2!1027 (h!2008 lt!26101))))))

(declare-fun d!13059 () Bool)

(declare-fun c!8547 () Bool)

(assert (=> d!13059 (= c!8547 (and ((_ is Cons!1425) lt!26101) (= (_1!1027 (h!2008 lt!26101)) (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!13059 (= (getValueByKey!127 lt!26101 (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!41497)))

(declare-fun b!63296 () Bool)

(declare-fun e!41498 () Option!133)

(assert (=> b!63296 (= e!41497 e!41498)))

(declare-fun c!8548 () Bool)

(assert (=> b!63296 (= c!8548 (and ((_ is Cons!1425) lt!26101) (not (= (_1!1027 (h!2008 lt!26101)) (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!63297 () Bool)

(assert (=> b!63297 (= e!41498 (getValueByKey!127 (t!4815 lt!26101) (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!63298 () Bool)

(assert (=> b!63298 (= e!41498 None!131)))

(assert (= (and d!13059 c!8547) b!63295))

(assert (= (and d!13059 (not c!8547)) b!63296))

(assert (= (and b!63296 c!8548) b!63297))

(assert (= (and b!63296 (not c!8548)) b!63298))

(declare-fun m!57453 () Bool)

(assert (=> b!63297 m!57453))

(assert (=> d!12663 d!13059))

(declare-fun d!13061 () Bool)

(assert (=> d!13061 (= (getValueByKey!127 lt!26101 (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!132 (_2!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!26633 () Unit!1680)

(assert (=> d!13061 (= lt!26633 (choose!346 lt!26101 (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!41499 () Bool)

(assert (=> d!13061 e!41499))

(declare-fun res!34636 () Bool)

(assert (=> d!13061 (=> (not res!34636) (not e!41499))))

(assert (=> d!13061 (= res!34636 (isStrictlySorted!273 lt!26101))))

(assert (=> d!13061 (= (lemmaContainsTupThenGetReturnValue!44 lt!26101 (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!26633)))

(declare-fun b!63299 () Bool)

(declare-fun res!34637 () Bool)

(assert (=> b!63299 (=> (not res!34637) (not e!41499))))

(assert (=> b!63299 (= res!34637 (containsKey!130 lt!26101 (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!63300 () Bool)

(assert (=> b!63300 (= e!41499 (contains!689 lt!26101 (tuple2!2033 (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!13061 res!34636) b!63299))

(assert (= (and b!63299 res!34637) b!63300))

(assert (=> d!13061 m!56087))

(declare-fun m!57455 () Bool)

(assert (=> d!13061 m!57455))

(declare-fun m!57457 () Bool)

(assert (=> d!13061 m!57457))

(declare-fun m!57459 () Bool)

(assert (=> b!63299 m!57459))

(declare-fun m!57461 () Bool)

(assert (=> b!63300 m!57461))

(assert (=> d!12663 d!13061))

(declare-fun lt!26634 () List!1429)

(declare-fun b!63301 () Bool)

(declare-fun e!41503 () Bool)

(assert (=> b!63301 (= e!41503 (contains!689 lt!26634 (tuple2!2033 (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!63302 () Bool)

(declare-fun res!34639 () Bool)

(assert (=> b!63302 (=> (not res!34639) (not e!41503))))

(assert (=> b!63302 (= res!34639 (containsKey!130 lt!26634 (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun bm!5005 () Bool)

(declare-fun call!5010 () List!1429)

(declare-fun call!5008 () List!1429)

(assert (=> bm!5005 (= call!5010 call!5008)))

(declare-fun bm!5006 () Bool)

(declare-fun call!5009 () List!1429)

(assert (=> bm!5006 (= call!5008 call!5009)))

(declare-fun c!8549 () Bool)

(declare-fun b!63303 () Bool)

(assert (=> b!63303 (= c!8549 (and ((_ is Cons!1425) (toList!691 call!4872)) (bvsgt (_1!1027 (h!2008 (toList!691 call!4872))) (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!41501 () List!1429)

(declare-fun e!41504 () List!1429)

(assert (=> b!63303 (= e!41501 e!41504)))

(declare-fun d!13063 () Bool)

(assert (=> d!13063 e!41503))

(declare-fun res!34638 () Bool)

(assert (=> d!13063 (=> (not res!34638) (not e!41503))))

(assert (=> d!13063 (= res!34638 (isStrictlySorted!273 lt!26634))))

(declare-fun e!41500 () List!1429)

(assert (=> d!13063 (= lt!26634 e!41500)))

(declare-fun c!8550 () Bool)

(assert (=> d!13063 (= c!8550 (and ((_ is Cons!1425) (toList!691 call!4872)) (bvslt (_1!1027 (h!2008 (toList!691 call!4872))) (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!13063 (isStrictlySorted!273 (toList!691 call!4872))))

(assert (=> d!13063 (= (insertStrictlySorted!47 (toList!691 call!4872) (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!26634)))

(declare-fun e!41502 () List!1429)

(declare-fun bm!5007 () Bool)

(assert (=> bm!5007 (= call!5009 ($colon$colon!61 e!41502 (ite c!8550 (h!2008 (toList!691 call!4872)) (tuple2!2033 (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun c!8552 () Bool)

(assert (=> bm!5007 (= c!8552 c!8550)))

(declare-fun b!63304 () Bool)

(assert (=> b!63304 (= e!41501 call!5008)))

(declare-fun b!63305 () Bool)

(assert (=> b!63305 (= e!41502 (insertStrictlySorted!47 (t!4815 (toList!691 call!4872)) (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!63306 () Bool)

(assert (=> b!63306 (= e!41500 call!5009)))

(declare-fun b!63307 () Bool)

(assert (=> b!63307 (= e!41500 e!41501)))

(declare-fun c!8551 () Bool)

(assert (=> b!63307 (= c!8551 (and ((_ is Cons!1425) (toList!691 call!4872)) (= (_1!1027 (h!2008 (toList!691 call!4872))) (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!63308 () Bool)

(assert (=> b!63308 (= e!41504 call!5010)))

(declare-fun b!63309 () Bool)

(assert (=> b!63309 (= e!41502 (ite c!8551 (t!4815 (toList!691 call!4872)) (ite c!8549 (Cons!1425 (h!2008 (toList!691 call!4872)) (t!4815 (toList!691 call!4872))) Nil!1426)))))

(declare-fun b!63310 () Bool)

(assert (=> b!63310 (= e!41504 call!5010)))

(assert (= (and d!13063 c!8550) b!63306))

(assert (= (and d!13063 (not c!8550)) b!63307))

(assert (= (and b!63307 c!8551) b!63304))

(assert (= (and b!63307 (not c!8551)) b!63303))

(assert (= (and b!63303 c!8549) b!63310))

(assert (= (and b!63303 (not c!8549)) b!63308))

(assert (= (or b!63310 b!63308) bm!5005))

(assert (= (or b!63304 bm!5005) bm!5006))

(assert (= (or b!63306 bm!5006) bm!5007))

(assert (= (and bm!5007 c!8552) b!63305))

(assert (= (and bm!5007 (not c!8552)) b!63309))

(assert (= (and d!13063 res!34638) b!63302))

(assert (= (and b!63302 res!34639) b!63301))

(declare-fun m!57463 () Bool)

(assert (=> b!63302 m!57463))

(declare-fun m!57465 () Bool)

(assert (=> bm!5007 m!57465))

(declare-fun m!57467 () Bool)

(assert (=> b!63305 m!57467))

(declare-fun m!57469 () Bool)

(assert (=> b!63301 m!57469))

(declare-fun m!57471 () Bool)

(assert (=> d!13063 m!57471))

(declare-fun m!57473 () Bool)

(assert (=> d!13063 m!57473))

(assert (=> d!12663 d!13063))

(assert (=> b!62845 d!12831))

(declare-fun d!13065 () Bool)

(assert (=> d!13065 (= (get!1092 (getValueByKey!127 (toList!691 lt!26027) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2425 (getValueByKey!127 (toList!691 lt!26027) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12743 d!13065))

(assert (=> d!12743 d!12817))

(declare-fun b!63323 () Bool)

(declare-fun e!41513 () SeekEntryResult!223)

(assert (=> b!63323 (= e!41513 (MissingVacant!223 (index!3019 lt!26204)))))

(declare-fun b!63324 () Bool)

(declare-fun e!41511 () SeekEntryResult!223)

(assert (=> b!63324 (= e!41511 Undefined!223)))

(declare-fun d!13067 () Bool)

(declare-fun lt!26639 () SeekEntryResult!223)

(assert (=> d!13067 (and (or ((_ is Undefined!223) lt!26639) (not ((_ is Found!223) lt!26639)) (and (bvsge (index!3018 lt!26639) #b00000000000000000000000000000000) (bvslt (index!3018 lt!26639) (size!2022 (_keys!3719 newMap!16))))) (or ((_ is Undefined!223) lt!26639) ((_ is Found!223) lt!26639) (not ((_ is MissingVacant!223) lt!26639)) (not (= (index!3020 lt!26639) (index!3019 lt!26204))) (and (bvsge (index!3020 lt!26639) #b00000000000000000000000000000000) (bvslt (index!3020 lt!26639) (size!2022 (_keys!3719 newMap!16))))) (or ((_ is Undefined!223) lt!26639) (ite ((_ is Found!223) lt!26639) (= (select (arr!1790 (_keys!3719 newMap!16)) (index!3018 lt!26639)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (and ((_ is MissingVacant!223) lt!26639) (= (index!3020 lt!26639) (index!3019 lt!26204)) (= (select (arr!1790 (_keys!3719 newMap!16)) (index!3020 lt!26639)) #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (=> d!13067 (= lt!26639 e!41511)))

(declare-fun c!8561 () Bool)

(assert (=> d!13067 (= c!8561 (bvsge (x!10301 lt!26204) #b01111111111111111111111111111110))))

(declare-fun lt!26640 () (_ BitVec 64))

(assert (=> d!13067 (= lt!26640 (select (arr!1790 (_keys!3719 newMap!16)) (index!3019 lt!26204)))))

(assert (=> d!13067 (validMask!0 (mask!5993 newMap!16))))

(assert (=> d!13067 (= (seekKeyOrZeroReturnVacant!0 (x!10301 lt!26204) (index!3019 lt!26204) (index!3019 lt!26204) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (_keys!3719 newMap!16) (mask!5993 newMap!16)) lt!26639)))

(declare-fun b!63325 () Bool)

(declare-fun e!41512 () SeekEntryResult!223)

(assert (=> b!63325 (= e!41512 (Found!223 (index!3019 lt!26204)))))

(declare-fun b!63326 () Bool)

(declare-fun c!8560 () Bool)

(assert (=> b!63326 (= c!8560 (= lt!26640 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63326 (= e!41512 e!41513)))

(declare-fun b!63327 () Bool)

(declare-fun nextIndex!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!63327 (= e!41513 (seekKeyOrZeroReturnVacant!0 (bvadd (x!10301 lt!26204) #b00000000000000000000000000000001) (nextIndex!0 (index!3019 lt!26204) (bvadd (x!10301 lt!26204) #b00000000000000000000000000000001) (mask!5993 newMap!16)) (index!3019 lt!26204) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (_keys!3719 newMap!16) (mask!5993 newMap!16)))))

(declare-fun b!63328 () Bool)

(assert (=> b!63328 (= e!41511 e!41512)))

(declare-fun c!8559 () Bool)

(assert (=> b!63328 (= c!8559 (= lt!26640 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (= (and d!13067 c!8561) b!63324))

(assert (= (and d!13067 (not c!8561)) b!63328))

(assert (= (and b!63328 c!8559) b!63325))

(assert (= (and b!63328 (not c!8559)) b!63326))

(assert (= (and b!63326 c!8560) b!63323))

(assert (= (and b!63326 (not c!8560)) b!63327))

(declare-fun m!57475 () Bool)

(assert (=> d!13067 m!57475))

(declare-fun m!57477 () Bool)

(assert (=> d!13067 m!57477))

(assert (=> d!13067 m!56309))

(assert (=> d!13067 m!55995))

(declare-fun m!57479 () Bool)

(assert (=> b!63327 m!57479))

(assert (=> b!63327 m!57479))

(assert (=> b!63327 m!55703))

(declare-fun m!57481 () Bool)

(assert (=> b!63327 m!57481))

(assert (=> b!62673 d!13067))

(declare-fun b!63329 () Bool)

(declare-fun e!41514 () Option!133)

(assert (=> b!63329 (= e!41514 (Some!132 (_2!1027 (h!2008 (toList!691 lt!26166)))))))

(declare-fun d!13069 () Bool)

(declare-fun c!8562 () Bool)

(assert (=> d!13069 (= c!8562 (and ((_ is Cons!1425) (toList!691 lt!26166)) (= (_1!1027 (h!2008 (toList!691 lt!26166))) (_1!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> d!13069 (= (getValueByKey!127 (toList!691 lt!26166) (_1!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) e!41514)))

(declare-fun b!63330 () Bool)

(declare-fun e!41515 () Option!133)

(assert (=> b!63330 (= e!41514 e!41515)))

(declare-fun c!8563 () Bool)

(assert (=> b!63330 (= c!8563 (and ((_ is Cons!1425) (toList!691 lt!26166)) (not (= (_1!1027 (h!2008 (toList!691 lt!26166))) (_1!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))))

(declare-fun b!63331 () Bool)

(assert (=> b!63331 (= e!41515 (getValueByKey!127 (t!4815 (toList!691 lt!26166)) (_1!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63332 () Bool)

(assert (=> b!63332 (= e!41515 None!131)))

(assert (= (and d!13069 c!8562) b!63329))

(assert (= (and d!13069 (not c!8562)) b!63330))

(assert (= (and b!63330 c!8563) b!63331))

(assert (= (and b!63330 (not c!8563)) b!63332))

(declare-fun m!57483 () Bool)

(assert (=> b!63331 m!57483))

(assert (=> b!62625 d!13069))

(declare-fun d!13071 () Bool)

(declare-fun e!41517 () Bool)

(assert (=> d!13071 e!41517))

(declare-fun res!34640 () Bool)

(assert (=> d!13071 (=> res!34640 e!41517)))

(declare-fun lt!26642 () Bool)

(assert (=> d!13071 (= res!34640 (not lt!26642))))

(declare-fun lt!26643 () Bool)

(assert (=> d!13071 (= lt!26642 lt!26643)))

(declare-fun lt!26641 () Unit!1680)

(declare-fun e!41516 () Unit!1680)

(assert (=> d!13071 (= lt!26641 e!41516)))

(declare-fun c!8564 () Bool)

(assert (=> d!13071 (= c!8564 lt!26643)))

(assert (=> d!13071 (= lt!26643 (containsKey!130 (toList!691 lt!26077) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!13071 (= (contains!686 lt!26077 #b0000000000000000000000000000000000000000000000000000000000000000) lt!26642)))

(declare-fun b!63333 () Bool)

(declare-fun lt!26644 () Unit!1680)

(assert (=> b!63333 (= e!41516 lt!26644)))

(assert (=> b!63333 (= lt!26644 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 lt!26077) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63333 (isDefined!79 (getValueByKey!127 (toList!691 lt!26077) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63334 () Bool)

(declare-fun Unit!1724 () Unit!1680)

(assert (=> b!63334 (= e!41516 Unit!1724)))

(declare-fun b!63335 () Bool)

(assert (=> b!63335 (= e!41517 (isDefined!79 (getValueByKey!127 (toList!691 lt!26077) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!13071 c!8564) b!63333))

(assert (= (and d!13071 (not c!8564)) b!63334))

(assert (= (and d!13071 (not res!34640)) b!63335))

(declare-fun m!57485 () Bool)

(assert (=> d!13071 m!57485))

(declare-fun m!57487 () Bool)

(assert (=> b!63333 m!57487))

(assert (=> b!63333 m!56835))

(assert (=> b!63333 m!56835))

(declare-fun m!57489 () Bool)

(assert (=> b!63333 m!57489))

(assert (=> b!63335 m!56835))

(assert (=> b!63335 m!56835))

(assert (=> b!63335 m!57489))

(assert (=> bm!4906 d!13071))

(declare-fun d!13073 () Bool)

(assert (=> d!13073 (= (apply!68 (+!82 lt!26182 (tuple2!2033 lt!26190 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))) lt!26181) (apply!68 lt!26182 lt!26181))))

(declare-fun lt!26645 () Unit!1680)

(assert (=> d!13073 (= lt!26645 (choose!339 lt!26182 lt!26190 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)) lt!26181))))

(declare-fun e!41518 () Bool)

(assert (=> d!13073 e!41518))

(declare-fun res!34641 () Bool)

(assert (=> d!13073 (=> (not res!34641) (not e!41518))))

(assert (=> d!13073 (= res!34641 (contains!686 lt!26182 lt!26181))))

(assert (=> d!13073 (= (addApplyDifferent!44 lt!26182 lt!26190 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)) lt!26181) lt!26645)))

(declare-fun b!63336 () Bool)

(assert (=> b!63336 (= e!41518 (not (= lt!26181 lt!26190)))))

(assert (= (and d!13073 res!34641) b!63336))

(assert (=> d!13073 m!56251))

(assert (=> d!13073 m!56255))

(assert (=> d!13073 m!56251))

(declare-fun m!57491 () Bool)

(assert (=> d!13073 m!57491))

(assert (=> d!13073 m!56267))

(declare-fun m!57493 () Bool)

(assert (=> d!13073 m!57493))

(assert (=> b!62642 d!13073))

(declare-fun d!13075 () Bool)

(assert (=> d!13075 (= (apply!68 lt!26196 lt!26179) (get!1092 (getValueByKey!127 (toList!691 lt!26196) lt!26179)))))

(declare-fun bs!2767 () Bool)

(assert (= bs!2767 d!13075))

(declare-fun m!57495 () Bool)

(assert (=> bs!2767 m!57495))

(assert (=> bs!2767 m!57495))

(declare-fun m!57497 () Bool)

(assert (=> bs!2767 m!57497))

(assert (=> b!62642 d!13075))

(declare-fun d!13077 () Bool)

(declare-fun e!41519 () Bool)

(assert (=> d!13077 e!41519))

(declare-fun res!34642 () Bool)

(assert (=> d!13077 (=> (not res!34642) (not e!41519))))

(declare-fun lt!26647 () ListLongMap!1351)

(assert (=> d!13077 (= res!34642 (contains!686 lt!26647 (_1!1027 (tuple2!2033 lt!26190 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))))))

(declare-fun lt!26648 () List!1429)

(assert (=> d!13077 (= lt!26647 (ListLongMap!1352 lt!26648))))

(declare-fun lt!26646 () Unit!1680)

(declare-fun lt!26649 () Unit!1680)

(assert (=> d!13077 (= lt!26646 lt!26649)))

(assert (=> d!13077 (= (getValueByKey!127 lt!26648 (_1!1027 (tuple2!2033 lt!26190 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))) (Some!132 (_2!1027 (tuple2!2033 lt!26190 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))))))

(assert (=> d!13077 (= lt!26649 (lemmaContainsTupThenGetReturnValue!44 lt!26648 (_1!1027 (tuple2!2033 lt!26190 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))) (_2!1027 (tuple2!2033 lt!26190 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))))))

(assert (=> d!13077 (= lt!26648 (insertStrictlySorted!47 (toList!691 lt!26182) (_1!1027 (tuple2!2033 lt!26190 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))) (_2!1027 (tuple2!2033 lt!26190 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))))))

(assert (=> d!13077 (= (+!82 lt!26182 (tuple2!2033 lt!26190 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))) lt!26647)))

(declare-fun b!63337 () Bool)

(declare-fun res!34643 () Bool)

(assert (=> b!63337 (=> (not res!34643) (not e!41519))))

(assert (=> b!63337 (= res!34643 (= (getValueByKey!127 (toList!691 lt!26647) (_1!1027 (tuple2!2033 lt!26190 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))) (Some!132 (_2!1027 (tuple2!2033 lt!26190 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))))))))

(declare-fun b!63338 () Bool)

(assert (=> b!63338 (= e!41519 (contains!689 (toList!691 lt!26647) (tuple2!2033 lt!26190 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))))))

(assert (= (and d!13077 res!34642) b!63337))

(assert (= (and b!63337 res!34643) b!63338))

(declare-fun m!57499 () Bool)

(assert (=> d!13077 m!57499))

(declare-fun m!57501 () Bool)

(assert (=> d!13077 m!57501))

(declare-fun m!57503 () Bool)

(assert (=> d!13077 m!57503))

(declare-fun m!57505 () Bool)

(assert (=> d!13077 m!57505))

(declare-fun m!57507 () Bool)

(assert (=> b!63337 m!57507))

(declare-fun m!57509 () Bool)

(assert (=> b!63338 m!57509))

(assert (=> b!62642 d!13077))

(declare-fun d!13079 () Bool)

(declare-fun e!41520 () Bool)

(assert (=> d!13079 e!41520))

(declare-fun res!34644 () Bool)

(assert (=> d!13079 (=> (not res!34644) (not e!41520))))

(declare-fun lt!26651 () ListLongMap!1351)

(assert (=> d!13079 (= res!34644 (contains!686 lt!26651 (_1!1027 (tuple2!2033 lt!26180 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))))))

(declare-fun lt!26652 () List!1429)

(assert (=> d!13079 (= lt!26651 (ListLongMap!1352 lt!26652))))

(declare-fun lt!26650 () Unit!1680)

(declare-fun lt!26653 () Unit!1680)

(assert (=> d!13079 (= lt!26650 lt!26653)))

(assert (=> d!13079 (= (getValueByKey!127 lt!26652 (_1!1027 (tuple2!2033 lt!26180 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))) (Some!132 (_2!1027 (tuple2!2033 lt!26180 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))))))

(assert (=> d!13079 (= lt!26653 (lemmaContainsTupThenGetReturnValue!44 lt!26652 (_1!1027 (tuple2!2033 lt!26180 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))) (_2!1027 (tuple2!2033 lt!26180 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))))))

(assert (=> d!13079 (= lt!26652 (insertStrictlySorted!47 (toList!691 lt!26191) (_1!1027 (tuple2!2033 lt!26180 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))) (_2!1027 (tuple2!2033 lt!26180 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))))))

(assert (=> d!13079 (= (+!82 lt!26191 (tuple2!2033 lt!26180 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))) lt!26651)))

(declare-fun b!63339 () Bool)

(declare-fun res!34645 () Bool)

(assert (=> b!63339 (=> (not res!34645) (not e!41520))))

(assert (=> b!63339 (= res!34645 (= (getValueByKey!127 (toList!691 lt!26651) (_1!1027 (tuple2!2033 lt!26180 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))) (Some!132 (_2!1027 (tuple2!2033 lt!26180 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))))))))

(declare-fun b!63340 () Bool)

(assert (=> b!63340 (= e!41520 (contains!689 (toList!691 lt!26651) (tuple2!2033 lt!26180 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))))))

(assert (= (and d!13079 res!34644) b!63339))

(assert (= (and b!63339 res!34645) b!63340))

(declare-fun m!57511 () Bool)

(assert (=> d!13079 m!57511))

(declare-fun m!57513 () Bool)

(assert (=> d!13079 m!57513))

(declare-fun m!57515 () Bool)

(assert (=> d!13079 m!57515))

(declare-fun m!57517 () Bool)

(assert (=> d!13079 m!57517))

(declare-fun m!57519 () Bool)

(assert (=> b!63339 m!57519))

(declare-fun m!57521 () Bool)

(assert (=> b!63340 m!57521))

(assert (=> b!62642 d!13079))

(declare-fun d!13081 () Bool)

(assert (=> d!13081 (= (apply!68 (+!82 lt!26182 (tuple2!2033 lt!26190 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))) lt!26181) (get!1092 (getValueByKey!127 (toList!691 (+!82 lt!26182 (tuple2!2033 lt!26190 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))) lt!26181)))))

(declare-fun bs!2768 () Bool)

(assert (= bs!2768 d!13081))

(declare-fun m!57523 () Bool)

(assert (=> bs!2768 m!57523))

(assert (=> bs!2768 m!57523))

(declare-fun m!57525 () Bool)

(assert (=> bs!2768 m!57525))

(assert (=> b!62642 d!13081))

(declare-fun d!13083 () Bool)

(assert (=> d!13083 (= (apply!68 lt!26191 lt!26194) (get!1092 (getValueByKey!127 (toList!691 lt!26191) lt!26194)))))

(declare-fun bs!2769 () Bool)

(assert (= bs!2769 d!13083))

(declare-fun m!57527 () Bool)

(assert (=> bs!2769 m!57527))

(assert (=> bs!2769 m!57527))

(declare-fun m!57529 () Bool)

(assert (=> bs!2769 m!57529))

(assert (=> b!62642 d!13083))

(declare-fun d!13085 () Bool)

(assert (=> d!13085 (= (apply!68 (+!82 lt!26196 (tuple2!2033 lt!26192 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)))) lt!26179) (apply!68 lt!26196 lt!26179))))

(declare-fun lt!26654 () Unit!1680)

(assert (=> d!13085 (= lt!26654 (choose!339 lt!26196 lt!26192 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)) lt!26179))))

(declare-fun e!41521 () Bool)

(assert (=> d!13085 e!41521))

(declare-fun res!34646 () Bool)

(assert (=> d!13085 (=> (not res!34646) (not e!41521))))

(assert (=> d!13085 (= res!34646 (contains!686 lt!26196 lt!26179))))

(assert (=> d!13085 (= (addApplyDifferent!44 lt!26196 lt!26192 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)) lt!26179) lt!26654)))

(declare-fun b!63341 () Bool)

(assert (=> b!63341 (= e!41521 (not (= lt!26179 lt!26192)))))

(assert (= (and d!13085 res!34646) b!63341))

(assert (=> d!13085 m!56275))

(assert (=> d!13085 m!56277))

(assert (=> d!13085 m!56275))

(declare-fun m!57531 () Bool)

(assert (=> d!13085 m!57531))

(assert (=> d!13085 m!56271))

(declare-fun m!57533 () Bool)

(assert (=> d!13085 m!57533))

(assert (=> b!62642 d!13085))

(declare-fun d!13087 () Bool)

(declare-fun e!41523 () Bool)

(assert (=> d!13087 e!41523))

(declare-fun res!34647 () Bool)

(assert (=> d!13087 (=> res!34647 e!41523)))

(declare-fun lt!26656 () Bool)

(assert (=> d!13087 (= res!34647 (not lt!26656))))

(declare-fun lt!26657 () Bool)

(assert (=> d!13087 (= lt!26656 lt!26657)))

(declare-fun lt!26655 () Unit!1680)

(declare-fun e!41522 () Unit!1680)

(assert (=> d!13087 (= lt!26655 e!41522)))

(declare-fun c!8565 () Bool)

(assert (=> d!13087 (= c!8565 lt!26657)))

(assert (=> d!13087 (= lt!26657 (containsKey!130 (toList!691 (+!82 lt!26193 (tuple2!2033 lt!26189 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))))) lt!26183))))

(assert (=> d!13087 (= (contains!686 (+!82 lt!26193 (tuple2!2033 lt!26189 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)))) lt!26183) lt!26656)))

(declare-fun b!63342 () Bool)

(declare-fun lt!26658 () Unit!1680)

(assert (=> b!63342 (= e!41522 lt!26658)))

(assert (=> b!63342 (= lt!26658 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 (+!82 lt!26193 (tuple2!2033 lt!26189 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))))) lt!26183))))

(assert (=> b!63342 (isDefined!79 (getValueByKey!127 (toList!691 (+!82 lt!26193 (tuple2!2033 lt!26189 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))))) lt!26183))))

(declare-fun b!63343 () Bool)

(declare-fun Unit!1725 () Unit!1680)

(assert (=> b!63343 (= e!41522 Unit!1725)))

(declare-fun b!63344 () Bool)

(assert (=> b!63344 (= e!41523 (isDefined!79 (getValueByKey!127 (toList!691 (+!82 lt!26193 (tuple2!2033 lt!26189 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))))) lt!26183)))))

(assert (= (and d!13087 c!8565) b!63342))

(assert (= (and d!13087 (not c!8565)) b!63343))

(assert (= (and d!13087 (not res!34647)) b!63344))

(declare-fun m!57535 () Bool)

(assert (=> d!13087 m!57535))

(declare-fun m!57537 () Bool)

(assert (=> b!63342 m!57537))

(declare-fun m!57539 () Bool)

(assert (=> b!63342 m!57539))

(assert (=> b!63342 m!57539))

(declare-fun m!57541 () Bool)

(assert (=> b!63342 m!57541))

(assert (=> b!63344 m!57539))

(assert (=> b!63344 m!57539))

(assert (=> b!63344 m!57541))

(assert (=> b!62642 d!13087))

(declare-fun d!13089 () Bool)

(assert (=> d!13089 (= (apply!68 (+!82 lt!26191 (tuple2!2033 lt!26180 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))) lt!26194) (apply!68 lt!26191 lt!26194))))

(declare-fun lt!26659 () Unit!1680)

(assert (=> d!13089 (= lt!26659 (choose!339 lt!26191 lt!26180 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)) lt!26194))))

(declare-fun e!41524 () Bool)

(assert (=> d!13089 e!41524))

(declare-fun res!34648 () Bool)

(assert (=> d!13089 (=> (not res!34648) (not e!41524))))

(assert (=> d!13089 (= res!34648 (contains!686 lt!26191 lt!26194))))

(assert (=> d!13089 (= (addApplyDifferent!44 lt!26191 lt!26180 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)) lt!26194) lt!26659)))

(declare-fun b!63345 () Bool)

(assert (=> b!63345 (= e!41524 (not (= lt!26194 lt!26180)))))

(assert (= (and d!13089 res!34648) b!63345))

(assert (=> d!13089 m!56261))

(assert (=> d!13089 m!56263))

(assert (=> d!13089 m!56261))

(declare-fun m!57543 () Bool)

(assert (=> d!13089 m!57543))

(assert (=> d!13089 m!56259))

(declare-fun m!57545 () Bool)

(assert (=> d!13089 m!57545))

(assert (=> b!62642 d!13089))

(assert (=> b!62642 d!12785))

(declare-fun d!13091 () Bool)

(assert (=> d!13091 (= (apply!68 (+!82 lt!26191 (tuple2!2033 lt!26180 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))) lt!26194) (get!1092 (getValueByKey!127 (toList!691 (+!82 lt!26191 (tuple2!2033 lt!26180 (ite c!8299 (ite c!8289 (minValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))) lt!26194)))))

(declare-fun bs!2770 () Bool)

(assert (= bs!2770 d!13091))

(declare-fun m!57547 () Bool)

(assert (=> bs!2770 m!57547))

(assert (=> bs!2770 m!57547))

(declare-fun m!57549 () Bool)

(assert (=> bs!2770 m!57549))

(assert (=> b!62642 d!13091))

(declare-fun d!13093 () Bool)

(declare-fun e!41525 () Bool)

(assert (=> d!13093 e!41525))

(declare-fun res!34649 () Bool)

(assert (=> d!13093 (=> (not res!34649) (not e!41525))))

(declare-fun lt!26661 () ListLongMap!1351)

(assert (=> d!13093 (= res!34649 (contains!686 lt!26661 (_1!1027 (tuple2!2033 lt!26189 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))))))))

(declare-fun lt!26662 () List!1429)

(assert (=> d!13093 (= lt!26661 (ListLongMap!1352 lt!26662))))

(declare-fun lt!26660 () Unit!1680)

(declare-fun lt!26663 () Unit!1680)

(assert (=> d!13093 (= lt!26660 lt!26663)))

(assert (=> d!13093 (= (getValueByKey!127 lt!26662 (_1!1027 (tuple2!2033 lt!26189 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))))) (Some!132 (_2!1027 (tuple2!2033 lt!26189 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))))))))

(assert (=> d!13093 (= lt!26663 (lemmaContainsTupThenGetReturnValue!44 lt!26662 (_1!1027 (tuple2!2033 lt!26189 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)))) (_2!1027 (tuple2!2033 lt!26189 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))))))))

(assert (=> d!13093 (= lt!26662 (insertStrictlySorted!47 (toList!691 lt!26193) (_1!1027 (tuple2!2033 lt!26189 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)))) (_2!1027 (tuple2!2033 lt!26189 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))))))))

(assert (=> d!13093 (= (+!82 lt!26193 (tuple2!2033 lt!26189 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)))) lt!26661)))

(declare-fun b!63346 () Bool)

(declare-fun res!34650 () Bool)

(assert (=> b!63346 (=> (not res!34650) (not e!41525))))

(assert (=> b!63346 (= res!34650 (= (getValueByKey!127 (toList!691 lt!26661) (_1!1027 (tuple2!2033 lt!26189 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))))) (Some!132 (_2!1027 (tuple2!2033 lt!26189 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)))))))))

(declare-fun b!63347 () Bool)

(assert (=> b!63347 (= e!41525 (contains!689 (toList!691 lt!26661) (tuple2!2033 lt!26189 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)))))))

(assert (= (and d!13093 res!34649) b!63346))

(assert (= (and b!63346 res!34650) b!63347))

(declare-fun m!57551 () Bool)

(assert (=> d!13093 m!57551))

(declare-fun m!57553 () Bool)

(assert (=> d!13093 m!57553))

(declare-fun m!57555 () Bool)

(assert (=> d!13093 m!57555))

(declare-fun m!57557 () Bool)

(assert (=> d!13093 m!57557))

(declare-fun m!57559 () Bool)

(assert (=> b!63346 m!57559))

(declare-fun m!57561 () Bool)

(assert (=> b!63347 m!57561))

(assert (=> b!62642 d!13093))

(declare-fun d!13095 () Bool)

(assert (=> d!13095 (= (apply!68 lt!26182 lt!26181) (get!1092 (getValueByKey!127 (toList!691 lt!26182) lt!26181)))))

(declare-fun bs!2771 () Bool)

(assert (= bs!2771 d!13095))

(declare-fun m!57563 () Bool)

(assert (=> bs!2771 m!57563))

(assert (=> bs!2771 m!57563))

(declare-fun m!57565 () Bool)

(assert (=> bs!2771 m!57565))

(assert (=> b!62642 d!13095))

(declare-fun d!13097 () Bool)

(assert (=> d!13097 (contains!686 (+!82 lt!26193 (tuple2!2033 lt!26189 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)))) lt!26183)))

(declare-fun lt!26664 () Unit!1680)

(assert (=> d!13097 (= lt!26664 (choose!338 lt!26193 lt!26189 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)) lt!26183))))

(assert (=> d!13097 (contains!686 lt!26193 lt!26183)))

(assert (=> d!13097 (= (addStillContains!44 lt!26193 lt!26189 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)) lt!26183) lt!26664)))

(declare-fun bs!2772 () Bool)

(assert (= bs!2772 d!13097))

(assert (=> bs!2772 m!56265))

(assert (=> bs!2772 m!56265))

(assert (=> bs!2772 m!56281))

(declare-fun m!57567 () Bool)

(assert (=> bs!2772 m!57567))

(declare-fun m!57569 () Bool)

(assert (=> bs!2772 m!57569))

(assert (=> b!62642 d!13097))

(declare-fun d!13099 () Bool)

(declare-fun e!41526 () Bool)

(assert (=> d!13099 e!41526))

(declare-fun res!34651 () Bool)

(assert (=> d!13099 (=> (not res!34651) (not e!41526))))

(declare-fun lt!26666 () ListLongMap!1351)

(assert (=> d!13099 (= res!34651 (contains!686 lt!26666 (_1!1027 (tuple2!2033 lt!26192 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))))))))

(declare-fun lt!26667 () List!1429)

(assert (=> d!13099 (= lt!26666 (ListLongMap!1352 lt!26667))))

(declare-fun lt!26665 () Unit!1680)

(declare-fun lt!26668 () Unit!1680)

(assert (=> d!13099 (= lt!26665 lt!26668)))

(assert (=> d!13099 (= (getValueByKey!127 lt!26667 (_1!1027 (tuple2!2033 lt!26192 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))))) (Some!132 (_2!1027 (tuple2!2033 lt!26192 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))))))))

(assert (=> d!13099 (= lt!26668 (lemmaContainsTupThenGetReturnValue!44 lt!26667 (_1!1027 (tuple2!2033 lt!26192 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)))) (_2!1027 (tuple2!2033 lt!26192 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))))))))

(assert (=> d!13099 (= lt!26667 (insertStrictlySorted!47 (toList!691 lt!26196) (_1!1027 (tuple2!2033 lt!26192 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)))) (_2!1027 (tuple2!2033 lt!26192 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))))))))

(assert (=> d!13099 (= (+!82 lt!26196 (tuple2!2033 lt!26192 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)))) lt!26666)))

(declare-fun b!63348 () Bool)

(declare-fun res!34652 () Bool)

(assert (=> b!63348 (=> (not res!34652) (not e!41526))))

(assert (=> b!63348 (= res!34652 (= (getValueByKey!127 (toList!691 lt!26666) (_1!1027 (tuple2!2033 lt!26192 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))))) (Some!132 (_2!1027 (tuple2!2033 lt!26192 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)))))))))

(declare-fun b!63349 () Bool)

(assert (=> b!63349 (= e!41526 (contains!689 (toList!691 lt!26666) (tuple2!2033 lt!26192 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)))))))

(assert (= (and d!13099 res!34651) b!63348))

(assert (= (and b!63348 res!34652) b!63349))

(declare-fun m!57571 () Bool)

(assert (=> d!13099 m!57571))

(declare-fun m!57573 () Bool)

(assert (=> d!13099 m!57573))

(declare-fun m!57575 () Bool)

(assert (=> d!13099 m!57575))

(declare-fun m!57577 () Bool)

(assert (=> d!13099 m!57577))

(declare-fun m!57579 () Bool)

(assert (=> b!63348 m!57579))

(declare-fun m!57581 () Bool)

(assert (=> b!63349 m!57581))

(assert (=> b!62642 d!13099))

(declare-fun d!13101 () Bool)

(assert (=> d!13101 (= (apply!68 (+!82 lt!26196 (tuple2!2033 lt!26192 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)))) lt!26179) (get!1092 (getValueByKey!127 (toList!691 (+!82 lt!26196 (tuple2!2033 lt!26192 (ite (and c!8299 c!8289) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))))) lt!26179)))))

(declare-fun bs!2773 () Bool)

(assert (= bs!2773 d!13101))

(declare-fun m!57583 () Bool)

(assert (=> bs!2773 m!57583))

(assert (=> bs!2773 m!57583))

(declare-fun m!57585 () Bool)

(assert (=> bs!2773 m!57585))

(assert (=> b!62642 d!13101))

(declare-fun d!13103 () Bool)

(declare-fun res!34653 () Bool)

(declare-fun e!41527 () Bool)

(assert (=> d!13103 (=> res!34653 e!41527)))

(assert (=> d!13103 (= res!34653 (and ((_ is Cons!1425) (toList!691 lt!26027)) (= (_1!1027 (h!2008 (toList!691 lt!26027))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!13103 (= (containsKey!130 (toList!691 lt!26027) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!41527)))

(declare-fun b!63350 () Bool)

(declare-fun e!41528 () Bool)

(assert (=> b!63350 (= e!41527 e!41528)))

(declare-fun res!34654 () Bool)

(assert (=> b!63350 (=> (not res!34654) (not e!41528))))

(assert (=> b!63350 (= res!34654 (and (or (not ((_ is Cons!1425) (toList!691 lt!26027))) (bvsle (_1!1027 (h!2008 (toList!691 lt!26027))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) ((_ is Cons!1425) (toList!691 lt!26027)) (bvslt (_1!1027 (h!2008 (toList!691 lt!26027))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun b!63351 () Bool)

(assert (=> b!63351 (= e!41528 (containsKey!130 (t!4815 (toList!691 lt!26027)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!13103 (not res!34653)) b!63350))

(assert (= (and b!63350 res!34654) b!63351))

(assert (=> b!63351 m!55903))

(declare-fun m!57587 () Bool)

(assert (=> b!63351 m!57587))

(assert (=> d!12675 d!13103))

(declare-fun d!13105 () Bool)

(declare-fun e!41529 () Bool)

(assert (=> d!13105 e!41529))

(declare-fun res!34655 () Bool)

(assert (=> d!13105 (=> (not res!34655) (not e!41529))))

(declare-fun lt!26670 () ListLongMap!1351)

(assert (=> d!13105 (= res!34655 (contains!686 lt!26670 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(declare-fun lt!26671 () List!1429)

(assert (=> d!13105 (= lt!26670 (ListLongMap!1352 lt!26671))))

(declare-fun lt!26669 () Unit!1680)

(declare-fun lt!26672 () Unit!1680)

(assert (=> d!13105 (= lt!26669 lt!26672)))

(assert (=> d!13105 (= (getValueByKey!127 lt!26671 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))) (Some!132 (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(assert (=> d!13105 (= lt!26672 (lemmaContainsTupThenGetReturnValue!44 lt!26671 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(assert (=> d!13105 (= lt!26671 (insertStrictlySorted!47 (toList!691 call!4942) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(assert (=> d!13105 (= (+!82 call!4942 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))) lt!26670)))

(declare-fun b!63352 () Bool)

(declare-fun res!34656 () Bool)

(assert (=> b!63352 (=> (not res!34656) (not e!41529))))

(assert (=> b!63352 (= res!34656 (= (getValueByKey!127 (toList!691 lt!26670) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))) (Some!132 (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))))

(declare-fun b!63353 () Bool)

(assert (=> b!63353 (= e!41529 (contains!689 (toList!691 lt!26670) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))

(assert (= (and d!13105 res!34655) b!63352))

(assert (= (and b!63352 res!34656) b!63353))

(declare-fun m!57589 () Bool)

(assert (=> d!13105 m!57589))

(declare-fun m!57591 () Bool)

(assert (=> d!13105 m!57591))

(declare-fun m!57593 () Bool)

(assert (=> d!13105 m!57593))

(declare-fun m!57595 () Bool)

(assert (=> d!13105 m!57595))

(declare-fun m!57597 () Bool)

(assert (=> b!63352 m!57597))

(declare-fun m!57599 () Bool)

(assert (=> b!63353 m!57599))

(assert (=> b!62778 d!13105))

(declare-fun d!13107 () Bool)

(assert (=> d!13107 (= (apply!68 lt!26175 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1092 (getValueByKey!127 (toList!691 lt!26175) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2774 () Bool)

(assert (= bs!2774 d!13107))

(assert (=> bs!2774 m!57343))

(assert (=> bs!2774 m!57343))

(declare-fun m!57601 () Bool)

(assert (=> bs!2774 m!57601))

(assert (=> b!62639 d!13107))

(assert (=> d!12681 d!12699))

(assert (=> d!12681 d!12679))

(declare-fun d!13109 () Bool)

(assert (=> d!13109 (contains!686 (+!82 lt!26045 (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))) lt!26035)))

(assert (=> d!13109 true))

(declare-fun _$35!306 () Unit!1680)

(assert (=> d!13109 (= (choose!338 lt!26045 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))) lt!26035) _$35!306)))

(declare-fun bs!2775 () Bool)

(assert (= bs!2775 d!13109))

(assert (=> bs!2775 m!55913))

(assert (=> bs!2775 m!55913))

(assert (=> bs!2775 m!55929))

(assert (=> d!12681 d!13109))

(declare-fun d!13111 () Bool)

(declare-fun e!41531 () Bool)

(assert (=> d!13111 e!41531))

(declare-fun res!34657 () Bool)

(assert (=> d!13111 (=> res!34657 e!41531)))

(declare-fun lt!26674 () Bool)

(assert (=> d!13111 (= res!34657 (not lt!26674))))

(declare-fun lt!26675 () Bool)

(assert (=> d!13111 (= lt!26674 lt!26675)))

(declare-fun lt!26673 () Unit!1680)

(declare-fun e!41530 () Unit!1680)

(assert (=> d!13111 (= lt!26673 e!41530)))

(declare-fun c!8566 () Bool)

(assert (=> d!13111 (= c!8566 lt!26675)))

(assert (=> d!13111 (= lt!26675 (containsKey!130 (toList!691 lt!26045) lt!26035))))

(assert (=> d!13111 (= (contains!686 lt!26045 lt!26035) lt!26674)))

(declare-fun b!63355 () Bool)

(declare-fun lt!26676 () Unit!1680)

(assert (=> b!63355 (= e!41530 lt!26676)))

(assert (=> b!63355 (= lt!26676 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 lt!26045) lt!26035))))

(assert (=> b!63355 (isDefined!79 (getValueByKey!127 (toList!691 lt!26045) lt!26035))))

(declare-fun b!63356 () Bool)

(declare-fun Unit!1726 () Unit!1680)

(assert (=> b!63356 (= e!41530 Unit!1726)))

(declare-fun b!63357 () Bool)

(assert (=> b!63357 (= e!41531 (isDefined!79 (getValueByKey!127 (toList!691 lt!26045) lt!26035)))))

(assert (= (and d!13111 c!8566) b!63355))

(assert (= (and d!13111 (not c!8566)) b!63356))

(assert (= (and d!13111 (not res!34657)) b!63357))

(declare-fun m!57603 () Bool)

(assert (=> d!13111 m!57603))

(declare-fun m!57605 () Bool)

(assert (=> b!63355 m!57605))

(declare-fun m!57607 () Bool)

(assert (=> b!63355 m!57607))

(assert (=> b!63355 m!57607))

(declare-fun m!57609 () Bool)

(assert (=> b!63355 m!57609))

(assert (=> b!63357 m!57607))

(assert (=> b!63357 m!57607))

(assert (=> b!63357 m!57609))

(assert (=> d!12681 d!13111))

(declare-fun d!13113 () Bool)

(declare-fun e!41533 () Bool)

(assert (=> d!13113 e!41533))

(declare-fun res!34658 () Bool)

(assert (=> d!13113 (=> res!34658 e!41533)))

(declare-fun lt!26678 () Bool)

(assert (=> d!13113 (= res!34658 (not lt!26678))))

(declare-fun lt!26679 () Bool)

(assert (=> d!13113 (= lt!26678 lt!26679)))

(declare-fun lt!26677 () Unit!1680)

(declare-fun e!41532 () Unit!1680)

(assert (=> d!13113 (= lt!26677 e!41532)))

(declare-fun c!8567 () Bool)

(assert (=> d!13113 (= c!8567 lt!26679)))

(assert (=> d!13113 (= lt!26679 (containsKey!130 (toList!691 (getCurrentListMap!391 (_keys!3719 newMap!16) lt!25974 (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (select (arr!1790 (_keys!3719 newMap!16)) (index!3018 lt!25967))))))

(assert (=> d!13113 (= (contains!686 (getCurrentListMap!391 (_keys!3719 newMap!16) lt!25974 (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (select (arr!1790 (_keys!3719 newMap!16)) (index!3018 lt!25967))) lt!26678)))

(declare-fun b!63358 () Bool)

(declare-fun lt!26680 () Unit!1680)

(assert (=> b!63358 (= e!41532 lt!26680)))

(assert (=> b!63358 (= lt!26680 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 (getCurrentListMap!391 (_keys!3719 newMap!16) lt!25974 (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (select (arr!1790 (_keys!3719 newMap!16)) (index!3018 lt!25967))))))

(assert (=> b!63358 (isDefined!79 (getValueByKey!127 (toList!691 (getCurrentListMap!391 (_keys!3719 newMap!16) lt!25974 (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (select (arr!1790 (_keys!3719 newMap!16)) (index!3018 lt!25967))))))

(declare-fun b!63359 () Bool)

(declare-fun Unit!1727 () Unit!1680)

(assert (=> b!63359 (= e!41532 Unit!1727)))

(declare-fun b!63360 () Bool)

(assert (=> b!63360 (= e!41533 (isDefined!79 (getValueByKey!127 (toList!691 (getCurrentListMap!391 (_keys!3719 newMap!16) lt!25974 (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (select (arr!1790 (_keys!3719 newMap!16)) (index!3018 lt!25967)))))))

(assert (= (and d!13113 c!8567) b!63358))

(assert (= (and d!13113 (not c!8567)) b!63359))

(assert (= (and d!13113 (not res!34658)) b!63360))

(assert (=> d!13113 m!55857))

(declare-fun m!57611 () Bool)

(assert (=> d!13113 m!57611))

(assert (=> b!63358 m!55857))

(declare-fun m!57613 () Bool)

(assert (=> b!63358 m!57613))

(assert (=> b!63358 m!55857))

(declare-fun m!57615 () Bool)

(assert (=> b!63358 m!57615))

(assert (=> b!63358 m!57615))

(declare-fun m!57617 () Bool)

(assert (=> b!63358 m!57617))

(assert (=> b!63360 m!55857))

(assert (=> b!63360 m!57615))

(assert (=> b!63360 m!57615))

(assert (=> b!63360 m!57617))

(assert (=> b!62776 d!13113))

(declare-fun b!63361 () Bool)

(declare-fun e!41541 () ListLongMap!1351)

(declare-fun call!5017 () ListLongMap!1351)

(assert (=> b!63361 (= e!41541 call!5017)))

(declare-fun b!63363 () Bool)

(declare-fun e!41544 () Bool)

(declare-fun e!41542 () Bool)

(assert (=> b!63363 (= e!41544 e!41542)))

(declare-fun res!34662 () Bool)

(declare-fun call!5012 () Bool)

(assert (=> b!63363 (= res!34662 call!5012)))

(assert (=> b!63363 (=> (not res!34662) (not e!41542))))

(declare-fun b!63364 () Bool)

(declare-fun e!41538 () Bool)

(assert (=> b!63364 (= e!41538 (validKeyInArray!0 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!5008 () Bool)

(declare-fun call!5014 () ListLongMap!1351)

(declare-fun call!5015 () ListLongMap!1351)

(declare-fun c!8570 () Bool)

(declare-fun call!5013 () ListLongMap!1351)

(declare-fun call!5011 () ListLongMap!1351)

(declare-fun c!8572 () Bool)

(assert (=> bm!5008 (= call!5013 (+!82 (ite c!8570 call!5015 (ite c!8572 call!5011 call!5014)) (ite (or c!8570 c!8572) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(declare-fun b!63365 () Bool)

(assert (=> b!63365 (= e!41544 (not call!5012))))

(declare-fun b!63366 () Bool)

(declare-fun e!41535 () ListLongMap!1351)

(assert (=> b!63366 (= e!41535 call!5017)))

(declare-fun b!63367 () Bool)

(declare-fun e!41534 () Bool)

(declare-fun lt!26681 () ListLongMap!1351)

(assert (=> b!63367 (= e!41534 (= (apply!68 lt!26681 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1999 newMap!16)))))

(declare-fun b!63368 () Bool)

(assert (=> b!63368 (= e!41542 (= (apply!68 lt!26681 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1999 newMap!16)))))

(declare-fun bm!5009 () Bool)

(assert (=> bm!5009 (= call!5015 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) lt!25974 (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun b!63369 () Bool)

(declare-fun e!41540 () Bool)

(assert (=> b!63369 (= e!41540 (= (apply!68 lt!26681 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)) (get!1088 (select (arr!1791 lt!25974) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!63369 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 lt!25974)))))

(assert (=> b!63369 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun b!63370 () Bool)

(declare-fun e!41537 () Unit!1680)

(declare-fun lt!26692 () Unit!1680)

(assert (=> b!63370 (= e!41537 lt!26692)))

(declare-fun lt!26699 () ListLongMap!1351)

(assert (=> b!63370 (= lt!26699 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) lt!25974 (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26695 () (_ BitVec 64))

(assert (=> b!63370 (= lt!26695 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26689 () (_ BitVec 64))

(assert (=> b!63370 (= lt!26689 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26701 () Unit!1680)

(assert (=> b!63370 (= lt!26701 (addStillContains!44 lt!26699 lt!26695 (zeroValue!1999 newMap!16) lt!26689))))

(assert (=> b!63370 (contains!686 (+!82 lt!26699 (tuple2!2033 lt!26695 (zeroValue!1999 newMap!16))) lt!26689)))

(declare-fun lt!26682 () Unit!1680)

(assert (=> b!63370 (= lt!26682 lt!26701)))

(declare-fun lt!26688 () ListLongMap!1351)

(assert (=> b!63370 (= lt!26688 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) lt!25974 (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26696 () (_ BitVec 64))

(assert (=> b!63370 (= lt!26696 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26687 () (_ BitVec 64))

(assert (=> b!63370 (= lt!26687 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26690 () Unit!1680)

(assert (=> b!63370 (= lt!26690 (addApplyDifferent!44 lt!26688 lt!26696 (minValue!1999 newMap!16) lt!26687))))

(assert (=> b!63370 (= (apply!68 (+!82 lt!26688 (tuple2!2033 lt!26696 (minValue!1999 newMap!16))) lt!26687) (apply!68 lt!26688 lt!26687))))

(declare-fun lt!26684 () Unit!1680)

(assert (=> b!63370 (= lt!26684 lt!26690)))

(declare-fun lt!26702 () ListLongMap!1351)

(assert (=> b!63370 (= lt!26702 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) lt!25974 (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26698 () (_ BitVec 64))

(assert (=> b!63370 (= lt!26698 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26685 () (_ BitVec 64))

(assert (=> b!63370 (= lt!26685 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26694 () Unit!1680)

(assert (=> b!63370 (= lt!26694 (addApplyDifferent!44 lt!26702 lt!26698 (zeroValue!1999 newMap!16) lt!26685))))

(assert (=> b!63370 (= (apply!68 (+!82 lt!26702 (tuple2!2033 lt!26698 (zeroValue!1999 newMap!16))) lt!26685) (apply!68 lt!26702 lt!26685))))

(declare-fun lt!26691 () Unit!1680)

(assert (=> b!63370 (= lt!26691 lt!26694)))

(declare-fun lt!26697 () ListLongMap!1351)

(assert (=> b!63370 (= lt!26697 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) lt!25974 (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26686 () (_ BitVec 64))

(assert (=> b!63370 (= lt!26686 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26700 () (_ BitVec 64))

(assert (=> b!63370 (= lt!26700 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!63370 (= lt!26692 (addApplyDifferent!44 lt!26697 lt!26686 (minValue!1999 newMap!16) lt!26700))))

(assert (=> b!63370 (= (apply!68 (+!82 lt!26697 (tuple2!2033 lt!26686 (minValue!1999 newMap!16))) lt!26700) (apply!68 lt!26697 lt!26700))))

(declare-fun b!63371 () Bool)

(declare-fun e!41543 () Bool)

(assert (=> b!63371 (= e!41543 (validKeyInArray!0 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63372 () Bool)

(declare-fun e!41545 () Bool)

(assert (=> b!63372 (= e!41545 e!41544)))

(declare-fun c!8571 () Bool)

(assert (=> b!63372 (= c!8571 (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!63373 () Bool)

(declare-fun e!41536 () Bool)

(declare-fun call!5016 () Bool)

(assert (=> b!63373 (= e!41536 (not call!5016))))

(declare-fun b!63374 () Bool)

(declare-fun e!41546 () Bool)

(assert (=> b!63374 (= e!41546 e!41540)))

(declare-fun res!34661 () Bool)

(assert (=> b!63374 (=> (not res!34661) (not e!41540))))

(assert (=> b!63374 (= res!34661 (contains!686 lt!26681 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63374 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun d!13115 () Bool)

(assert (=> d!13115 e!41545))

(declare-fun res!34666 () Bool)

(assert (=> d!13115 (=> (not res!34666) (not e!41545))))

(assert (=> d!13115 (= res!34666 (or (bvsge #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))))

(declare-fun lt!26683 () ListLongMap!1351)

(assert (=> d!13115 (= lt!26681 lt!26683)))

(declare-fun lt!26693 () Unit!1680)

(assert (=> d!13115 (= lt!26693 e!41537)))

(declare-fun c!8573 () Bool)

(assert (=> d!13115 (= c!8573 e!41538)))

(declare-fun res!34663 () Bool)

(assert (=> d!13115 (=> (not res!34663) (not e!41538))))

(assert (=> d!13115 (= res!34663 (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun e!41539 () ListLongMap!1351)

(assert (=> d!13115 (= lt!26683 e!41539)))

(assert (=> d!13115 (= c!8570 (and (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!13115 (validMask!0 (mask!5993 newMap!16))))

(assert (=> d!13115 (= (getCurrentListMap!391 (_keys!3719 newMap!16) lt!25974 (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) lt!26681)))

(declare-fun b!63362 () Bool)

(assert (=> b!63362 (= e!41539 (+!82 call!5013 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))

(declare-fun bm!5010 () Bool)

(assert (=> bm!5010 (= call!5011 call!5015)))

(declare-fun b!63375 () Bool)

(assert (=> b!63375 (= e!41536 e!41534)))

(declare-fun res!34659 () Bool)

(assert (=> b!63375 (= res!34659 call!5016)))

(assert (=> b!63375 (=> (not res!34659) (not e!41534))))

(declare-fun b!63376 () Bool)

(declare-fun c!8569 () Bool)

(assert (=> b!63376 (= c!8569 (and (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!63376 (= e!41535 e!41541)))

(declare-fun bm!5011 () Bool)

(assert (=> bm!5011 (= call!5014 call!5011)))

(declare-fun bm!5012 () Bool)

(assert (=> bm!5012 (= call!5012 (contains!686 lt!26681 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!5013 () Bool)

(assert (=> bm!5013 (= call!5016 (contains!686 lt!26681 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63377 () Bool)

(declare-fun res!34664 () Bool)

(assert (=> b!63377 (=> (not res!34664) (not e!41545))))

(assert (=> b!63377 (= res!34664 e!41546)))

(declare-fun res!34667 () Bool)

(assert (=> b!63377 (=> res!34667 e!41546)))

(assert (=> b!63377 (= res!34667 (not e!41543))))

(declare-fun res!34665 () Bool)

(assert (=> b!63377 (=> (not res!34665) (not e!41543))))

(assert (=> b!63377 (= res!34665 (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun b!63378 () Bool)

(declare-fun Unit!1728 () Unit!1680)

(assert (=> b!63378 (= e!41537 Unit!1728)))

(declare-fun b!63379 () Bool)

(assert (=> b!63379 (= e!41541 call!5014)))

(declare-fun bm!5014 () Bool)

(assert (=> bm!5014 (= call!5017 call!5013)))

(declare-fun b!63380 () Bool)

(declare-fun res!34660 () Bool)

(assert (=> b!63380 (=> (not res!34660) (not e!41545))))

(assert (=> b!63380 (= res!34660 e!41536)))

(declare-fun c!8568 () Bool)

(assert (=> b!63380 (= c!8568 (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!63381 () Bool)

(assert (=> b!63381 (= e!41539 e!41535)))

(assert (=> b!63381 (= c!8572 (and (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!13115 c!8570) b!63362))

(assert (= (and d!13115 (not c!8570)) b!63381))

(assert (= (and b!63381 c!8572) b!63366))

(assert (= (and b!63381 (not c!8572)) b!63376))

(assert (= (and b!63376 c!8569) b!63361))

(assert (= (and b!63376 (not c!8569)) b!63379))

(assert (= (or b!63361 b!63379) bm!5011))

(assert (= (or b!63366 bm!5011) bm!5010))

(assert (= (or b!63366 b!63361) bm!5014))

(assert (= (or b!63362 bm!5010) bm!5009))

(assert (= (or b!63362 bm!5014) bm!5008))

(assert (= (and d!13115 res!34663) b!63364))

(assert (= (and d!13115 c!8573) b!63370))

(assert (= (and d!13115 (not c!8573)) b!63378))

(assert (= (and d!13115 res!34666) b!63377))

(assert (= (and b!63377 res!34665) b!63371))

(assert (= (and b!63377 (not res!34667)) b!63374))

(assert (= (and b!63374 res!34661) b!63369))

(assert (= (and b!63377 res!34664) b!63380))

(assert (= (and b!63380 c!8568) b!63375))

(assert (= (and b!63380 (not c!8568)) b!63373))

(assert (= (and b!63375 res!34659) b!63367))

(assert (= (or b!63375 b!63373) bm!5013))

(assert (= (and b!63380 res!34660) b!63372))

(assert (= (and b!63372 c!8571) b!63363))

(assert (= (and b!63372 (not c!8571)) b!63365))

(assert (= (and b!63363 res!34662) b!63368))

(assert (= (or b!63363 b!63365) bm!5012))

(declare-fun b_lambda!2833 () Bool)

(assert (=> (not b_lambda!2833) (not b!63369)))

(assert (=> b!63369 t!4828))

(declare-fun b_and!3885 () Bool)

(assert (= b_and!3881 (and (=> t!4828 result!2455) b_and!3885)))

(assert (=> b!63369 t!4830))

(declare-fun b_and!3887 () Bool)

(assert (= b_and!3883 (and (=> t!4830 result!2457) b_and!3887)))

(declare-fun m!57619 () Bool)

(assert (=> b!63370 m!57619))

(declare-fun m!57621 () Bool)

(assert (=> b!63370 m!57621))

(assert (=> b!63370 m!57619))

(declare-fun m!57623 () Bool)

(assert (=> b!63370 m!57623))

(assert (=> b!63370 m!56033))

(declare-fun m!57625 () Bool)

(assert (=> b!63370 m!57625))

(declare-fun m!57627 () Bool)

(assert (=> b!63370 m!57627))

(declare-fun m!57629 () Bool)

(assert (=> b!63370 m!57629))

(declare-fun m!57631 () Bool)

(assert (=> b!63370 m!57631))

(declare-fun m!57633 () Bool)

(assert (=> b!63370 m!57633))

(declare-fun m!57635 () Bool)

(assert (=> b!63370 m!57635))

(declare-fun m!57637 () Bool)

(assert (=> b!63370 m!57637))

(declare-fun m!57639 () Bool)

(assert (=> b!63370 m!57639))

(declare-fun m!57641 () Bool)

(assert (=> b!63370 m!57641))

(assert (=> b!63370 m!57629))

(declare-fun m!57643 () Bool)

(assert (=> b!63370 m!57643))

(declare-fun m!57645 () Bool)

(assert (=> b!63370 m!57645))

(declare-fun m!57647 () Bool)

(assert (=> b!63370 m!57647))

(assert (=> b!63370 m!57643))

(assert (=> b!63370 m!57633))

(declare-fun m!57649 () Bool)

(assert (=> b!63370 m!57649))

(declare-fun m!57651 () Bool)

(assert (=> b!63367 m!57651))

(assert (=> b!63374 m!56033))

(assert (=> b!63374 m!56033))

(declare-fun m!57653 () Bool)

(assert (=> b!63374 m!57653))

(assert (=> b!63371 m!56033))

(assert (=> b!63371 m!56033))

(assert (=> b!63371 m!56065))

(declare-fun m!57655 () Bool)

(assert (=> bm!5013 m!57655))

(declare-fun m!57657 () Bool)

(assert (=> b!63362 m!57657))

(assert (=> d!13115 m!55995))

(declare-fun m!57659 () Bool)

(assert (=> bm!5008 m!57659))

(assert (=> b!63369 m!56073))

(declare-fun m!57661 () Bool)

(assert (=> b!63369 m!57661))

(assert (=> b!63369 m!56033))

(assert (=> b!63369 m!57661))

(assert (=> b!63369 m!56073))

(declare-fun m!57663 () Bool)

(assert (=> b!63369 m!57663))

(assert (=> b!63369 m!56033))

(declare-fun m!57665 () Bool)

(assert (=> b!63369 m!57665))

(declare-fun m!57667 () Bool)

(assert (=> b!63368 m!57667))

(assert (=> bm!5009 m!57641))

(assert (=> b!63364 m!56033))

(assert (=> b!63364 m!56033))

(assert (=> b!63364 m!56065))

(declare-fun m!57669 () Bool)

(assert (=> bm!5012 m!57669))

(assert (=> b!62776 d!13115))

(declare-fun d!13117 () Bool)

(assert (=> d!13117 (isDefined!79 (getValueByKey!127 (toList!691 lt!26027) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!26703 () Unit!1680)

(assert (=> d!13117 (= lt!26703 (choose!341 (toList!691 lt!26027) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!41547 () Bool)

(assert (=> d!13117 e!41547))

(declare-fun res!34668 () Bool)

(assert (=> d!13117 (=> (not res!34668) (not e!41547))))

(assert (=> d!13117 (= res!34668 (isStrictlySorted!273 (toList!691 lt!26027)))))

(assert (=> d!13117 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 lt!26027) #b1000000000000000000000000000000000000000000000000000000000000000) lt!26703)))

(declare-fun b!63382 () Bool)

(assert (=> b!63382 (= e!41547 (containsKey!130 (toList!691 lt!26027) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!13117 res!34668) b!63382))

(assert (=> d!13117 m!56013))

(assert (=> d!13117 m!56013))

(assert (=> d!13117 m!56519))

(declare-fun m!57671 () Bool)

(assert (=> d!13117 m!57671))

(declare-fun m!57673 () Bool)

(assert (=> d!13117 m!57673))

(assert (=> b!63382 m!56515))

(assert (=> b!62803 d!13117))

(assert (=> b!62803 d!12781))

(assert (=> b!62803 d!12783))

(declare-fun b!63383 () Bool)

(declare-fun e!41549 () (_ BitVec 32))

(declare-fun call!5018 () (_ BitVec 32))

(assert (=> b!63383 (= e!41549 call!5018)))

(declare-fun b!63384 () Bool)

(assert (=> b!63384 (= e!41549 (bvadd #b00000000000000000000000000000001 call!5018))))

(declare-fun b!63385 () Bool)

(declare-fun e!41548 () (_ BitVec 32))

(assert (=> b!63385 (= e!41548 e!41549)))

(declare-fun c!8574 () Bool)

(assert (=> b!63385 (= c!8574 (validKeyInArray!0 (select (arr!1790 (_keys!3719 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun d!13119 () Bool)

(declare-fun lt!26704 () (_ BitVec 32))

(assert (=> d!13119 (and (bvsge lt!26704 #b00000000000000000000000000000000) (bvsle lt!26704 (bvsub (size!2022 (_keys!3719 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> d!13119 (= lt!26704 e!41548)))

(declare-fun c!8575 () Bool)

(assert (=> d!13119 (= c!8575 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2022 (_keys!3719 newMap!16))))))

(assert (=> d!13119 (and (bvsle (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2022 (_keys!3719 newMap!16))) (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvsle (size!2022 (_keys!3719 newMap!16)) (size!2022 (_keys!3719 newMap!16))))))

(assert (=> d!13119 (= (arrayCountValidKeys!0 (_keys!3719 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2022 (_keys!3719 newMap!16))) lt!26704)))

(declare-fun bm!5015 () Bool)

(assert (=> bm!5015 (= call!5018 (arrayCountValidKeys!0 (_keys!3719 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2022 (_keys!3719 newMap!16))))))

(declare-fun b!63386 () Bool)

(assert (=> b!63386 (= e!41548 #b00000000000000000000000000000000)))

(assert (= (and d!13119 c!8575) b!63386))

(assert (= (and d!13119 (not c!8575)) b!63385))

(assert (= (and b!63385 c!8574) b!63384))

(assert (= (and b!63385 (not c!8574)) b!63383))

(assert (= (or b!63384 b!63383) bm!5015))

(assert (=> b!63385 m!56697))

(assert (=> b!63385 m!56697))

(assert (=> b!63385 m!56701))

(declare-fun m!57675 () Bool)

(assert (=> bm!5015 m!57675))

(assert (=> bm!4936 d!13119))

(declare-fun bm!5016 () Bool)

(declare-fun call!5019 () Bool)

(assert (=> bm!5016 (= call!5019 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3719 (_2!1026 lt!25975)) (mask!5993 (_2!1026 lt!25975))))))

(declare-fun b!63387 () Bool)

(declare-fun e!41552 () Bool)

(assert (=> b!63387 (= e!41552 call!5019)))

(declare-fun b!63388 () Bool)

(declare-fun e!41551 () Bool)

(assert (=> b!63388 (= e!41551 call!5019)))

(declare-fun b!63389 () Bool)

(declare-fun e!41550 () Bool)

(assert (=> b!63389 (= e!41550 e!41551)))

(declare-fun c!8576 () Bool)

(assert (=> b!63389 (= c!8576 (validKeyInArray!0 (select (arr!1790 (_keys!3719 (_2!1026 lt!25975))) #b00000000000000000000000000000000)))))

(declare-fun b!63390 () Bool)

(assert (=> b!63390 (= e!41551 e!41552)))

(declare-fun lt!26706 () (_ BitVec 64))

(assert (=> b!63390 (= lt!26706 (select (arr!1790 (_keys!3719 (_2!1026 lt!25975))) #b00000000000000000000000000000000))))

(declare-fun lt!26707 () Unit!1680)

(assert (=> b!63390 (= lt!26707 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3719 (_2!1026 lt!25975)) lt!26706 #b00000000000000000000000000000000))))

(assert (=> b!63390 (arrayContainsKey!0 (_keys!3719 (_2!1026 lt!25975)) lt!26706 #b00000000000000000000000000000000)))

(declare-fun lt!26705 () Unit!1680)

(assert (=> b!63390 (= lt!26705 lt!26707)))

(declare-fun res!34669 () Bool)

(assert (=> b!63390 (= res!34669 (= (seekEntryOrOpen!0 (select (arr!1790 (_keys!3719 (_2!1026 lt!25975))) #b00000000000000000000000000000000) (_keys!3719 (_2!1026 lt!25975)) (mask!5993 (_2!1026 lt!25975))) (Found!223 #b00000000000000000000000000000000)))))

(assert (=> b!63390 (=> (not res!34669) (not e!41552))))

(declare-fun d!13121 () Bool)

(declare-fun res!34670 () Bool)

(assert (=> d!13121 (=> res!34670 e!41550)))

(assert (=> d!13121 (= res!34670 (bvsge #b00000000000000000000000000000000 (size!2022 (_keys!3719 (_2!1026 lt!25975)))))))

(assert (=> d!13121 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3719 (_2!1026 lt!25975)) (mask!5993 (_2!1026 lt!25975))) e!41550)))

(assert (= (and d!13121 (not res!34670)) b!63389))

(assert (= (and b!63389 c!8576) b!63390))

(assert (= (and b!63389 (not c!8576)) b!63388))

(assert (= (and b!63390 res!34669) b!63387))

(assert (= (or b!63387 b!63388) bm!5016))

(declare-fun m!57677 () Bool)

(assert (=> bm!5016 m!57677))

(assert (=> b!63389 m!57097))

(assert (=> b!63389 m!57097))

(assert (=> b!63389 m!57101))

(assert (=> b!63390 m!57097))

(declare-fun m!57679 () Bool)

(assert (=> b!63390 m!57679))

(declare-fun m!57681 () Bool)

(assert (=> b!63390 m!57681))

(assert (=> b!63390 m!57097))

(declare-fun m!57683 () Bool)

(assert (=> b!63390 m!57683))

(assert (=> b!62571 d!13121))

(assert (=> bm!4949 d!12749))

(declare-fun d!13123 () Bool)

(declare-fun e!41554 () Bool)

(assert (=> d!13123 e!41554))

(declare-fun res!34671 () Bool)

(assert (=> d!13123 (=> res!34671 e!41554)))

(declare-fun lt!26709 () Bool)

(assert (=> d!13123 (= res!34671 (not lt!26709))))

(declare-fun lt!26710 () Bool)

(assert (=> d!13123 (= lt!26709 lt!26710)))

(declare-fun lt!26708 () Unit!1680)

(declare-fun e!41553 () Unit!1680)

(assert (=> d!13123 (= lt!26708 e!41553)))

(declare-fun c!8577 () Bool)

(assert (=> d!13123 (= c!8577 lt!26710)))

(assert (=> d!13123 (= lt!26710 (containsKey!130 (toList!691 lt!26175) (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!13123 (= (contains!686 lt!26175 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)) lt!26709)))

(declare-fun b!63391 () Bool)

(declare-fun lt!26711 () Unit!1680)

(assert (=> b!63391 (= e!41553 lt!26711)))

(assert (=> b!63391 (= lt!26711 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 lt!26175) (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63391 (isDefined!79 (getValueByKey!127 (toList!691 lt!26175) (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63392 () Bool)

(declare-fun Unit!1729 () Unit!1680)

(assert (=> b!63392 (= e!41553 Unit!1729)))

(declare-fun b!63393 () Bool)

(assert (=> b!63393 (= e!41554 (isDefined!79 (getValueByKey!127 (toList!691 lt!26175) (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!13123 c!8577) b!63391))

(assert (= (and d!13123 (not c!8577)) b!63392))

(assert (= (and d!13123 (not res!34671)) b!63393))

(assert (=> d!13123 m!56033))

(declare-fun m!57685 () Bool)

(assert (=> d!13123 m!57685))

(assert (=> b!63391 m!56033))

(declare-fun m!57687 () Bool)

(assert (=> b!63391 m!57687))

(assert (=> b!63391 m!56033))

(declare-fun m!57689 () Bool)

(assert (=> b!63391 m!57689))

(assert (=> b!63391 m!57689))

(declare-fun m!57691 () Bool)

(assert (=> b!63391 m!57691))

(assert (=> b!63393 m!56033))

(assert (=> b!63393 m!57689))

(assert (=> b!63393 m!57689))

(assert (=> b!63393 m!57691))

(assert (=> b!62646 d!13123))

(declare-fun d!13125 () Bool)

(declare-fun lt!26712 () Bool)

(assert (=> d!13125 (= lt!26712 (select (content!68 Nil!1427) (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!41556 () Bool)

(assert (=> d!13125 (= lt!26712 e!41556)))

(declare-fun res!34673 () Bool)

(assert (=> d!13125 (=> (not res!34673) (not e!41556))))

(assert (=> d!13125 (= res!34673 ((_ is Cons!1426) Nil!1427))))

(assert (=> d!13125 (= (contains!688 Nil!1427 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)) lt!26712)))

(declare-fun b!63394 () Bool)

(declare-fun e!41555 () Bool)

(assert (=> b!63394 (= e!41556 e!41555)))

(declare-fun res!34672 () Bool)

(assert (=> b!63394 (=> res!34672 e!41555)))

(assert (=> b!63394 (= res!34672 (= (h!2009 Nil!1427) (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63395 () Bool)

(assert (=> b!63395 (= e!41555 (contains!688 (t!4816 Nil!1427) (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!13125 res!34673) b!63394))

(assert (= (and b!63394 (not res!34672)) b!63395))

(assert (=> d!13125 m!56321))

(assert (=> d!13125 m!56033))

(declare-fun m!57693 () Bool)

(assert (=> d!13125 m!57693))

(assert (=> b!63395 m!56033))

(declare-fun m!57695 () Bool)

(assert (=> b!63395 m!57695))

(assert (=> b!62831 d!13125))

(declare-fun d!13127 () Bool)

(assert (=> d!13127 (contains!686 (getCurrentListMap!391 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355))))

(declare-fun lt!26715 () Unit!1680)

(declare-fun choose!348 (array!3743 array!3745 (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 (_ BitVec 64) (_ BitVec 32) Int) Unit!1680)

(assert (=> d!13127 (= lt!26715 (choose!348 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(assert (=> d!13127 (validMask!0 (mask!5993 newMap!16))))

(assert (=> d!13127 (= (lemmaArrayContainsKeyThenInListMap!7 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) lt!26715)))

(declare-fun bs!2776 () Bool)

(assert (= bs!2776 d!13127))

(assert (=> bs!2776 m!55895))

(assert (=> bs!2776 m!55895))

(assert (=> bs!2776 m!55703))

(assert (=> bs!2776 m!56375))

(assert (=> bs!2776 m!55703))

(declare-fun m!57697 () Bool)

(assert (=> bs!2776 m!57697))

(assert (=> bs!2776 m!55995))

(assert (=> b!62740 d!13127))

(declare-fun d!13129 () Bool)

(declare-fun e!41558 () Bool)

(assert (=> d!13129 e!41558))

(declare-fun res!34674 () Bool)

(assert (=> d!13129 (=> res!34674 e!41558)))

(declare-fun lt!26717 () Bool)

(assert (=> d!13129 (= res!34674 (not lt!26717))))

(declare-fun lt!26718 () Bool)

(assert (=> d!13129 (= lt!26717 lt!26718)))

(declare-fun lt!26716 () Unit!1680)

(declare-fun e!41557 () Unit!1680)

(assert (=> d!13129 (= lt!26716 e!41557)))

(declare-fun c!8578 () Bool)

(assert (=> d!13129 (= c!8578 lt!26718)))

(assert (=> d!13129 (= lt!26718 (containsKey!130 (toList!691 (getCurrentListMap!391 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> d!13129 (= (contains!686 (getCurrentListMap!391 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) lt!26717)))

(declare-fun b!63396 () Bool)

(declare-fun lt!26719 () Unit!1680)

(assert (=> b!63396 (= e!41557 lt!26719)))

(assert (=> b!63396 (= lt!26719 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 (getCurrentListMap!391 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> b!63396 (isDefined!79 (getValueByKey!127 (toList!691 (getCurrentListMap!391 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun b!63397 () Bool)

(declare-fun Unit!1730 () Unit!1680)

(assert (=> b!63397 (= e!41557 Unit!1730)))

(declare-fun b!63398 () Bool)

(assert (=> b!63398 (= e!41558 (isDefined!79 (getValueByKey!127 (toList!691 (getCurrentListMap!391 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355))))))

(assert (= (and d!13129 c!8578) b!63396))

(assert (= (and d!13129 (not c!8578)) b!63397))

(assert (= (and d!13129 (not res!34674)) b!63398))

(assert (=> d!13129 m!55703))

(declare-fun m!57699 () Bool)

(assert (=> d!13129 m!57699))

(assert (=> b!63396 m!55703))

(declare-fun m!57701 () Bool)

(assert (=> b!63396 m!57701))

(assert (=> b!63396 m!55703))

(declare-fun m!57703 () Bool)

(assert (=> b!63396 m!57703))

(assert (=> b!63396 m!57703))

(declare-fun m!57705 () Bool)

(assert (=> b!63396 m!57705))

(assert (=> b!63398 m!55703))

(assert (=> b!63398 m!57703))

(assert (=> b!63398 m!57703))

(assert (=> b!63398 m!57705))

(assert (=> b!62740 d!13129))

(assert (=> b!62740 d!12661))

(assert (=> d!12755 d!12793))

(declare-fun d!13131 () Bool)

(declare-fun e!41560 () Bool)

(assert (=> d!13131 e!41560))

(declare-fun res!34675 () Bool)

(assert (=> d!13131 (=> res!34675 e!41560)))

(declare-fun lt!26721 () Bool)

(assert (=> d!13131 (= res!34675 (not lt!26721))))

(declare-fun lt!26722 () Bool)

(assert (=> d!13131 (= lt!26721 lt!26722)))

(declare-fun lt!26720 () Unit!1680)

(declare-fun e!41559 () Unit!1680)

(assert (=> d!13131 (= lt!26720 e!41559)))

(declare-fun c!8579 () Bool)

(assert (=> d!13131 (= c!8579 lt!26722)))

(assert (=> d!13131 (= lt!26722 (containsKey!130 (toList!691 lt!26217) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!13131 (= (contains!686 lt!26217 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26721)))

(declare-fun b!63399 () Bool)

(declare-fun lt!26723 () Unit!1680)

(assert (=> b!63399 (= e!41559 lt!26723)))

(assert (=> b!63399 (= lt!26723 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 lt!26217) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> b!63399 (isDefined!79 (getValueByKey!127 (toList!691 lt!26217) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63400 () Bool)

(declare-fun Unit!1731 () Unit!1680)

(assert (=> b!63400 (= e!41559 Unit!1731)))

(declare-fun b!63401 () Bool)

(assert (=> b!63401 (= e!41560 (isDefined!79 (getValueByKey!127 (toList!691 lt!26217) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(assert (= (and d!13131 c!8579) b!63399))

(assert (= (and d!13131 (not c!8579)) b!63400))

(assert (= (and d!13131 (not res!34675)) b!63401))

(declare-fun m!57707 () Bool)

(assert (=> d!13131 m!57707))

(declare-fun m!57709 () Bool)

(assert (=> b!63399 m!57709))

(assert (=> b!63399 m!56351))

(assert (=> b!63399 m!56351))

(declare-fun m!57711 () Bool)

(assert (=> b!63399 m!57711))

(assert (=> b!63401 m!56351))

(assert (=> b!63401 m!56351))

(assert (=> b!63401 m!57711))

(assert (=> d!12735 d!13131))

(declare-fun b!63402 () Bool)

(declare-fun e!41561 () Option!133)

(assert (=> b!63402 (= e!41561 (Some!132 (_2!1027 (h!2008 lt!26218))))))

(declare-fun d!13133 () Bool)

(declare-fun c!8580 () Bool)

(assert (=> d!13133 (= c!8580 (and ((_ is Cons!1425) lt!26218) (= (_1!1027 (h!2008 lt!26218)) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> d!13133 (= (getValueByKey!127 lt!26218 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) e!41561)))

(declare-fun b!63403 () Bool)

(declare-fun e!41562 () Option!133)

(assert (=> b!63403 (= e!41561 e!41562)))

(declare-fun c!8581 () Bool)

(assert (=> b!63403 (= c!8581 (and ((_ is Cons!1425) lt!26218) (not (= (_1!1027 (h!2008 lt!26218)) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))))

(declare-fun b!63404 () Bool)

(assert (=> b!63404 (= e!41562 (getValueByKey!127 (t!4815 lt!26218) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63405 () Bool)

(assert (=> b!63405 (= e!41562 None!131)))

(assert (= (and d!13133 c!8580) b!63402))

(assert (= (and d!13133 (not c!8580)) b!63403))

(assert (= (and b!63403 c!8581) b!63404))

(assert (= (and b!63403 (not c!8581)) b!63405))

(declare-fun m!57713 () Bool)

(assert (=> b!63404 m!57713))

(assert (=> d!12735 d!13133))

(declare-fun d!13135 () Bool)

(assert (=> d!13135 (= (getValueByKey!127 lt!26218 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) (Some!132 (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun lt!26724 () Unit!1680)

(assert (=> d!13135 (= lt!26724 (choose!346 lt!26218 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun e!41563 () Bool)

(assert (=> d!13135 e!41563))

(declare-fun res!34676 () Bool)

(assert (=> d!13135 (=> (not res!34676) (not e!41563))))

(assert (=> d!13135 (= res!34676 (isStrictlySorted!273 lt!26218))))

(assert (=> d!13135 (= (lemmaContainsTupThenGetReturnValue!44 lt!26218 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26724)))

(declare-fun b!63406 () Bool)

(declare-fun res!34677 () Bool)

(assert (=> b!63406 (=> (not res!34677) (not e!41563))))

(assert (=> b!63406 (= res!34677 (containsKey!130 lt!26218 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63407 () Bool)

(assert (=> b!63407 (= e!41563 (contains!689 lt!26218 (tuple2!2033 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(assert (= (and d!13135 res!34676) b!63406))

(assert (= (and b!63406 res!34677) b!63407))

(assert (=> d!13135 m!56345))

(declare-fun m!57715 () Bool)

(assert (=> d!13135 m!57715))

(declare-fun m!57717 () Bool)

(assert (=> d!13135 m!57717))

(declare-fun m!57719 () Bool)

(assert (=> b!63406 m!57719))

(declare-fun m!57721 () Bool)

(assert (=> b!63407 m!57721))

(assert (=> d!12735 d!13135))

(declare-fun b!63408 () Bool)

(declare-fun e!41567 () Bool)

(declare-fun lt!26725 () List!1429)

(assert (=> b!63408 (= e!41567 (contains!689 lt!26725 (tuple2!2033 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!63409 () Bool)

(declare-fun res!34679 () Bool)

(assert (=> b!63409 (=> (not res!34679) (not e!41567))))

(assert (=> b!63409 (= res!34679 (containsKey!130 lt!26725 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun bm!5017 () Bool)

(declare-fun call!5022 () List!1429)

(declare-fun call!5020 () List!1429)

(assert (=> bm!5017 (= call!5022 call!5020)))

(declare-fun bm!5018 () Bool)

(declare-fun call!5021 () List!1429)

(assert (=> bm!5018 (= call!5020 call!5021)))

(declare-fun b!63410 () Bool)

(declare-fun c!8582 () Bool)

(assert (=> b!63410 (= c!8582 (and ((_ is Cons!1425) (toList!691 call!4896)) (bvsgt (_1!1027 (h!2008 (toList!691 call!4896))) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun e!41565 () List!1429)

(declare-fun e!41568 () List!1429)

(assert (=> b!63410 (= e!41565 e!41568)))

(declare-fun d!13137 () Bool)

(assert (=> d!13137 e!41567))

(declare-fun res!34678 () Bool)

(assert (=> d!13137 (=> (not res!34678) (not e!41567))))

(assert (=> d!13137 (= res!34678 (isStrictlySorted!273 lt!26725))))

(declare-fun e!41564 () List!1429)

(assert (=> d!13137 (= lt!26725 e!41564)))

(declare-fun c!8583 () Bool)

(assert (=> d!13137 (= c!8583 (and ((_ is Cons!1425) (toList!691 call!4896)) (bvslt (_1!1027 (h!2008 (toList!691 call!4896))) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> d!13137 (isStrictlySorted!273 (toList!691 call!4896))))

(assert (=> d!13137 (= (insertStrictlySorted!47 (toList!691 call!4896) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26725)))

(declare-fun bm!5019 () Bool)

(declare-fun e!41566 () List!1429)

(assert (=> bm!5019 (= call!5021 ($colon$colon!61 e!41566 (ite c!8583 (h!2008 (toList!691 call!4896)) (tuple2!2033 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))))

(declare-fun c!8585 () Bool)

(assert (=> bm!5019 (= c!8585 c!8583)))

(declare-fun b!63411 () Bool)

(assert (=> b!63411 (= e!41565 call!5020)))

(declare-fun b!63412 () Bool)

(assert (=> b!63412 (= e!41566 (insertStrictlySorted!47 (t!4815 (toList!691 call!4896)) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63413 () Bool)

(assert (=> b!63413 (= e!41564 call!5021)))

(declare-fun b!63414 () Bool)

(assert (=> b!63414 (= e!41564 e!41565)))

(declare-fun c!8584 () Bool)

(assert (=> b!63414 (= c!8584 (and ((_ is Cons!1425) (toList!691 call!4896)) (= (_1!1027 (h!2008 (toList!691 call!4896))) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!63415 () Bool)

(assert (=> b!63415 (= e!41568 call!5022)))

(declare-fun b!63416 () Bool)

(assert (=> b!63416 (= e!41566 (ite c!8584 (t!4815 (toList!691 call!4896)) (ite c!8582 (Cons!1425 (h!2008 (toList!691 call!4896)) (t!4815 (toList!691 call!4896))) Nil!1426)))))

(declare-fun b!63417 () Bool)

(assert (=> b!63417 (= e!41568 call!5022)))

(assert (= (and d!13137 c!8583) b!63413))

(assert (= (and d!13137 (not c!8583)) b!63414))

(assert (= (and b!63414 c!8584) b!63411))

(assert (= (and b!63414 (not c!8584)) b!63410))

(assert (= (and b!63410 c!8582) b!63417))

(assert (= (and b!63410 (not c!8582)) b!63415))

(assert (= (or b!63417 b!63415) bm!5017))

(assert (= (or b!63411 bm!5017) bm!5018))

(assert (= (or b!63413 bm!5018) bm!5019))

(assert (= (and bm!5019 c!8585) b!63412))

(assert (= (and bm!5019 (not c!8585)) b!63416))

(assert (= (and d!13137 res!34678) b!63409))

(assert (= (and b!63409 res!34679) b!63408))

(declare-fun m!57723 () Bool)

(assert (=> b!63409 m!57723))

(declare-fun m!57725 () Bool)

(assert (=> bm!5019 m!57725))

(declare-fun m!57727 () Bool)

(assert (=> b!63412 m!57727))

(declare-fun m!57729 () Bool)

(assert (=> b!63408 m!57729))

(declare-fun m!57731 () Bool)

(assert (=> d!13137 m!57731))

(declare-fun m!57733 () Bool)

(assert (=> d!13137 m!57733))

(assert (=> d!12735 d!13137))

(declare-fun d!13139 () Bool)

(assert (=> d!13139 (isDefined!79 (getValueByKey!127 (toList!691 call!4867) (select (arr!1790 (_keys!3719 newMap!16)) (index!3018 lt!25967))))))

(declare-fun lt!26726 () Unit!1680)

(assert (=> d!13139 (= lt!26726 (choose!341 (toList!691 call!4867) (select (arr!1790 (_keys!3719 newMap!16)) (index!3018 lt!25967))))))

(declare-fun e!41569 () Bool)

(assert (=> d!13139 e!41569))

(declare-fun res!34680 () Bool)

(assert (=> d!13139 (=> (not res!34680) (not e!41569))))

(assert (=> d!13139 (= res!34680 (isStrictlySorted!273 (toList!691 call!4867)))))

(assert (=> d!13139 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 call!4867) (select (arr!1790 (_keys!3719 newMap!16)) (index!3018 lt!25967))) lt!26726)))

(declare-fun b!63418 () Bool)

(assert (=> b!63418 (= e!41569 (containsKey!130 (toList!691 call!4867) (select (arr!1790 (_keys!3719 newMap!16)) (index!3018 lt!25967))))))

(assert (= (and d!13139 res!34680) b!63418))

(assert (=> d!13139 m!55857))

(assert (=> d!13139 m!56439))

(assert (=> d!13139 m!56439))

(assert (=> d!13139 m!56441))

(assert (=> d!13139 m!55857))

(declare-fun m!57735 () Bool)

(assert (=> d!13139 m!57735))

(declare-fun m!57737 () Bool)

(assert (=> d!13139 m!57737))

(assert (=> b!63418 m!55857))

(assert (=> b!63418 m!56435))

(assert (=> b!62771 d!13139))

(assert (=> b!62771 d!13021))

(assert (=> b!62771 d!13023))

(declare-fun d!13141 () Bool)

(declare-fun e!41570 () Bool)

(assert (=> d!13141 e!41570))

(declare-fun res!34681 () Bool)

(assert (=> d!13141 (=> (not res!34681) (not e!41570))))

(declare-fun lt!26728 () ListLongMap!1351)

(assert (=> d!13141 (= res!34681 (contains!686 lt!26728 (_1!1027 (ite (or c!8331 c!8333) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))))

(declare-fun lt!26729 () List!1429)

(assert (=> d!13141 (= lt!26728 (ListLongMap!1352 lt!26729))))

(declare-fun lt!26727 () Unit!1680)

(declare-fun lt!26730 () Unit!1680)

(assert (=> d!13141 (= lt!26727 lt!26730)))

(assert (=> d!13141 (= (getValueByKey!127 lt!26729 (_1!1027 (ite (or c!8331 c!8333) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))) (Some!132 (_2!1027 (ite (or c!8331 c!8333) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))))

(assert (=> d!13141 (= lt!26730 (lemmaContainsTupThenGetReturnValue!44 lt!26729 (_1!1027 (ite (or c!8331 c!8333) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))) (_2!1027 (ite (or c!8331 c!8333) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))))

(assert (=> d!13141 (= lt!26729 (insertStrictlySorted!47 (toList!691 (ite c!8331 call!4908 (ite c!8333 call!4904 call!4907))) (_1!1027 (ite (or c!8331 c!8333) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))) (_2!1027 (ite (or c!8331 c!8333) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))))

(assert (=> d!13141 (= (+!82 (ite c!8331 call!4908 (ite c!8333 call!4904 call!4907)) (ite (or c!8331 c!8333) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))) lt!26728)))

(declare-fun b!63419 () Bool)

(declare-fun res!34682 () Bool)

(assert (=> b!63419 (=> (not res!34682) (not e!41570))))

(assert (=> b!63419 (= res!34682 (= (getValueByKey!127 (toList!691 lt!26728) (_1!1027 (ite (or c!8331 c!8333) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))) (Some!132 (_2!1027 (ite (or c!8331 c!8333) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))))

(declare-fun b!63420 () Bool)

(assert (=> b!63420 (= e!41570 (contains!689 (toList!691 lt!26728) (ite (or c!8331 c!8333) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(assert (= (and d!13141 res!34681) b!63419))

(assert (= (and b!63419 res!34682) b!63420))

(declare-fun m!57739 () Bool)

(assert (=> d!13141 m!57739))

(declare-fun m!57741 () Bool)

(assert (=> d!13141 m!57741))

(declare-fun m!57743 () Bool)

(assert (=> d!13141 m!57743))

(declare-fun m!57745 () Bool)

(assert (=> d!13141 m!57745))

(declare-fun m!57747 () Bool)

(assert (=> b!63419 m!57747))

(declare-fun m!57749 () Bool)

(assert (=> b!63420 m!57749))

(assert (=> bm!4901 d!13141))

(assert (=> b!62604 d!12723))

(declare-fun d!13143 () Bool)

(assert (=> d!13143 (isDefined!79 (getValueByKey!127 (toList!691 lt!26027) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!26731 () Unit!1680)

(assert (=> d!13143 (= lt!26731 (choose!341 (toList!691 lt!26027) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!41571 () Bool)

(assert (=> d!13143 e!41571))

(declare-fun res!34683 () Bool)

(assert (=> d!13143 (=> (not res!34683) (not e!41571))))

(assert (=> d!13143 (= res!34683 (isStrictlySorted!273 (toList!691 lt!26027)))))

(assert (=> d!13143 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 lt!26027) #b0000000000000000000000000000000000000000000000000000000000000000) lt!26731)))

(declare-fun b!63421 () Bool)

(assert (=> b!63421 (= e!41571 (containsKey!130 (toList!691 lt!26027) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!13143 res!34683) b!63421))

(assert (=> d!13143 m!56005))

(assert (=> d!13143 m!56005))

(assert (=> d!13143 m!56007))

(declare-fun m!57751 () Bool)

(assert (=> d!13143 m!57751))

(assert (=> d!13143 m!57673))

(assert (=> b!63421 m!56001))

(assert (=> b!62498 d!13143))

(assert (=> b!62498 d!12815))

(assert (=> b!62498 d!12817))

(declare-fun d!13145 () Bool)

(assert (=> d!13145 (= (get!1092 (getValueByKey!127 (toList!691 (+!82 lt!26048 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26031)) (v!2425 (getValueByKey!127 (toList!691 (+!82 lt!26048 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26031)))))

(assert (=> d!12703 d!13145))

(declare-fun b!63422 () Bool)

(declare-fun e!41572 () Option!133)

(assert (=> b!63422 (= e!41572 (Some!132 (_2!1027 (h!2008 (toList!691 (+!82 lt!26048 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))))))))

(declare-fun d!13147 () Bool)

(declare-fun c!8586 () Bool)

(assert (=> d!13147 (= c!8586 (and ((_ is Cons!1425) (toList!691 (+!82 lt!26048 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))) (= (_1!1027 (h!2008 (toList!691 (+!82 lt!26048 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))) lt!26031)))))

(assert (=> d!13147 (= (getValueByKey!127 (toList!691 (+!82 lt!26048 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26031) e!41572)))

(declare-fun b!63423 () Bool)

(declare-fun e!41573 () Option!133)

(assert (=> b!63423 (= e!41572 e!41573)))

(declare-fun c!8587 () Bool)

(assert (=> b!63423 (= c!8587 (and ((_ is Cons!1425) (toList!691 (+!82 lt!26048 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))) (not (= (_1!1027 (h!2008 (toList!691 (+!82 lt!26048 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))) lt!26031))))))

(declare-fun b!63424 () Bool)

(assert (=> b!63424 (= e!41573 (getValueByKey!127 (t!4815 (toList!691 (+!82 lt!26048 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))) lt!26031))))

(declare-fun b!63425 () Bool)

(assert (=> b!63425 (= e!41573 None!131)))

(assert (= (and d!13147 c!8586) b!63422))

(assert (= (and d!13147 (not c!8586)) b!63423))

(assert (= (and b!63423 c!8587) b!63424))

(assert (= (and b!63423 (not c!8587)) b!63425))

(declare-fun m!57753 () Bool)

(assert (=> b!63424 m!57753))

(assert (=> d!12703 d!13147))

(assert (=> d!12741 d!12805))

(declare-fun call!5023 () Bool)

(declare-fun bm!5020 () Bool)

(assert (=> bm!5020 (= call!5023 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16))) (mask!5993 newMap!16)))))

(declare-fun b!63426 () Bool)

(declare-fun e!41576 () Bool)

(assert (=> b!63426 (= e!41576 call!5023)))

(declare-fun b!63427 () Bool)

(declare-fun e!41575 () Bool)

(assert (=> b!63427 (= e!41575 call!5023)))

(declare-fun b!63428 () Bool)

(declare-fun e!41574 () Bool)

(assert (=> b!63428 (= e!41574 e!41575)))

(declare-fun c!8588 () Bool)

(assert (=> b!63428 (= c!8588 (validKeyInArray!0 (select (arr!1790 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!63429 () Bool)

(assert (=> b!63429 (= e!41575 e!41576)))

(declare-fun lt!26733 () (_ BitVec 64))

(assert (=> b!63429 (= lt!26733 (select (arr!1790 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!26734 () Unit!1680)

(assert (=> b!63429 (= lt!26734 (lemmaArrayContainsFromImpliesContainsFromZero!0 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16))) lt!26733 #b00000000000000000000000000000000))))

(assert (=> b!63429 (arrayContainsKey!0 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16))) lt!26733 #b00000000000000000000000000000000)))

(declare-fun lt!26732 () Unit!1680)

(assert (=> b!63429 (= lt!26732 lt!26734)))

(declare-fun res!34684 () Bool)

(assert (=> b!63429 (= res!34684 (= (seekEntryOrOpen!0 (select (arr!1790 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16)))) #b00000000000000000000000000000000) (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16))) (mask!5993 newMap!16)) (Found!223 #b00000000000000000000000000000000)))))

(assert (=> b!63429 (=> (not res!34684) (not e!41576))))

(declare-fun d!13149 () Bool)

(declare-fun res!34685 () Bool)

(assert (=> d!13149 (=> res!34685 e!41574)))

(assert (=> d!13149 (= res!34685 (bvsge #b00000000000000000000000000000000 (size!2022 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16))))))))

(assert (=> d!13149 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16))) (mask!5993 newMap!16)) e!41574)))

(assert (= (and d!13149 (not res!34685)) b!63428))

(assert (= (and b!63428 c!8588) b!63429))

(assert (= (and b!63428 (not c!8588)) b!63427))

(assert (= (and b!63429 res!34684) b!63426))

(assert (= (or b!63426 b!63427) bm!5020))

(declare-fun m!57755 () Bool)

(assert (=> bm!5020 m!57755))

(declare-fun m!57757 () Bool)

(assert (=> b!63428 m!57757))

(assert (=> b!63428 m!57757))

(declare-fun m!57759 () Bool)

(assert (=> b!63428 m!57759))

(assert (=> b!63429 m!57757))

(declare-fun m!57761 () Bool)

(assert (=> b!63429 m!57761))

(declare-fun m!57763 () Bool)

(assert (=> b!63429 m!57763))

(assert (=> b!63429 m!57757))

(declare-fun m!57765 () Bool)

(assert (=> b!63429 m!57765))

(assert (=> d!12741 d!13149))

(assert (=> d!12741 d!12749))

(declare-fun b!63430 () Bool)

(declare-fun e!41578 () (_ BitVec 32))

(declare-fun call!5024 () (_ BitVec 32))

(assert (=> b!63430 (= e!41578 call!5024)))

(declare-fun b!63431 () Bool)

(assert (=> b!63431 (= e!41578 (bvadd #b00000000000000000000000000000001 call!5024))))

(declare-fun b!63432 () Bool)

(declare-fun e!41577 () (_ BitVec 32))

(assert (=> b!63432 (= e!41577 e!41578)))

(declare-fun c!8589 () Bool)

(assert (=> b!63432 (= c!8589 (validKeyInArray!0 (select (arr!1790 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun d!13151 () Bool)

(declare-fun lt!26735 () (_ BitVec 32))

(assert (=> d!13151 (and (bvsge lt!26735 #b00000000000000000000000000000000) (bvsle lt!26735 (bvsub (size!2022 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> d!13151 (= lt!26735 e!41577)))

(declare-fun c!8590 () Bool)

(assert (=> d!13151 (= c!8590 (bvsge #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(assert (=> d!13151 (and (bvsle #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2022 (_keys!3719 newMap!16)) (size!2022 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16))))))))

(assert (=> d!13151 (= (arrayCountValidKeys!0 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16))) #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))) lt!26735)))

(declare-fun bm!5021 () Bool)

(assert (=> bm!5021 (= call!5024 (arrayCountValidKeys!0 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2022 (_keys!3719 newMap!16))))))

(declare-fun b!63433 () Bool)

(assert (=> b!63433 (= e!41577 #b00000000000000000000000000000000)))

(assert (= (and d!13151 c!8590) b!63433))

(assert (= (and d!13151 (not c!8590)) b!63432))

(assert (= (and b!63432 c!8589) b!63431))

(assert (= (and b!63432 (not c!8589)) b!63430))

(assert (= (or b!63431 b!63430) bm!5021))

(assert (=> b!63432 m!57757))

(assert (=> b!63432 m!57757))

(assert (=> b!63432 m!57759))

(declare-fun m!57767 () Bool)

(assert (=> bm!5021 m!57767))

(assert (=> d!12741 d!13151))

(assert (=> d!12741 d!12745))

(declare-fun b!63434 () Bool)

(declare-fun e!41586 () ListLongMap!1351)

(declare-fun call!5031 () ListLongMap!1351)

(assert (=> b!63434 (= e!41586 call!5031)))

(declare-fun b!63436 () Bool)

(declare-fun e!41589 () Bool)

(declare-fun e!41587 () Bool)

(assert (=> b!63436 (= e!41589 e!41587)))

(declare-fun res!34689 () Bool)

(declare-fun call!5026 () Bool)

(assert (=> b!63436 (= res!34689 call!5026)))

(assert (=> b!63436 (=> (not res!34689) (not e!41587))))

(declare-fun e!41583 () Bool)

(declare-fun b!63437 () Bool)

(assert (=> b!63437 (= e!41583 (validKeyInArray!0 (select (arr!1790 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun call!5028 () ListLongMap!1351)

(declare-fun c!8593 () Bool)

(declare-fun call!5025 () ListLongMap!1351)

(declare-fun bm!5022 () Bool)

(declare-fun call!5027 () ListLongMap!1351)

(declare-fun call!5029 () ListLongMap!1351)

(declare-fun c!8595 () Bool)

(assert (=> bm!5022 (= call!5027 (+!82 (ite c!8593 call!5029 (ite c!8595 call!5025 call!5028)) (ite (or c!8593 c!8595) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(declare-fun b!63438 () Bool)

(assert (=> b!63438 (= e!41589 (not call!5026))))

(declare-fun b!63439 () Bool)

(declare-fun e!41580 () ListLongMap!1351)

(assert (=> b!63439 (= e!41580 call!5031)))

(declare-fun b!63440 () Bool)

(declare-fun e!41579 () Bool)

(declare-fun lt!26736 () ListLongMap!1351)

(assert (=> b!63440 (= e!41579 (= (apply!68 lt!26736 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1999 newMap!16)))))

(declare-fun b!63441 () Bool)

(assert (=> b!63441 (= e!41587 (= (apply!68 lt!26736 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1999 newMap!16)))))

(declare-fun bm!5023 () Bool)

(assert (=> bm!5023 (= call!5029 (getCurrentListMapNoExtraKeys!46 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16))) (array!3746 (store (arr!1791 (_values!2070 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (ValueCellFull!863 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2023 (_values!2070 newMap!16))) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun b!63442 () Bool)

(declare-fun e!41585 () Bool)

(assert (=> b!63442 (= e!41585 (= (apply!68 lt!26736 (select (arr!1790 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16)))) #b00000000000000000000000000000000)) (get!1088 (select (arr!1791 (array!3746 (store (arr!1791 (_values!2070 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (ValueCellFull!863 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2023 (_values!2070 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!63442 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (array!3746 (store (arr!1791 (_values!2070 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (ValueCellFull!863 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2023 (_values!2070 newMap!16))))))))

(assert (=> b!63442 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16))))))))

(declare-fun b!63443 () Bool)

(declare-fun e!41582 () Unit!1680)

(declare-fun lt!26747 () Unit!1680)

(assert (=> b!63443 (= e!41582 lt!26747)))

(declare-fun lt!26754 () ListLongMap!1351)

(assert (=> b!63443 (= lt!26754 (getCurrentListMapNoExtraKeys!46 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16))) (array!3746 (store (arr!1791 (_values!2070 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (ValueCellFull!863 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2023 (_values!2070 newMap!16))) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26750 () (_ BitVec 64))

(assert (=> b!63443 (= lt!26750 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26744 () (_ BitVec 64))

(assert (=> b!63443 (= lt!26744 (select (arr!1790 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!26756 () Unit!1680)

(assert (=> b!63443 (= lt!26756 (addStillContains!44 lt!26754 lt!26750 (zeroValue!1999 newMap!16) lt!26744))))

(assert (=> b!63443 (contains!686 (+!82 lt!26754 (tuple2!2033 lt!26750 (zeroValue!1999 newMap!16))) lt!26744)))

(declare-fun lt!26737 () Unit!1680)

(assert (=> b!63443 (= lt!26737 lt!26756)))

(declare-fun lt!26743 () ListLongMap!1351)

(assert (=> b!63443 (= lt!26743 (getCurrentListMapNoExtraKeys!46 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16))) (array!3746 (store (arr!1791 (_values!2070 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (ValueCellFull!863 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2023 (_values!2070 newMap!16))) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26751 () (_ BitVec 64))

(assert (=> b!63443 (= lt!26751 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26742 () (_ BitVec 64))

(assert (=> b!63443 (= lt!26742 (select (arr!1790 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!26745 () Unit!1680)

(assert (=> b!63443 (= lt!26745 (addApplyDifferent!44 lt!26743 lt!26751 (minValue!1999 newMap!16) lt!26742))))

(assert (=> b!63443 (= (apply!68 (+!82 lt!26743 (tuple2!2033 lt!26751 (minValue!1999 newMap!16))) lt!26742) (apply!68 lt!26743 lt!26742))))

(declare-fun lt!26739 () Unit!1680)

(assert (=> b!63443 (= lt!26739 lt!26745)))

(declare-fun lt!26757 () ListLongMap!1351)

(assert (=> b!63443 (= lt!26757 (getCurrentListMapNoExtraKeys!46 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16))) (array!3746 (store (arr!1791 (_values!2070 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (ValueCellFull!863 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2023 (_values!2070 newMap!16))) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26753 () (_ BitVec 64))

(assert (=> b!63443 (= lt!26753 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26740 () (_ BitVec 64))

(assert (=> b!63443 (= lt!26740 (select (arr!1790 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!26749 () Unit!1680)

(assert (=> b!63443 (= lt!26749 (addApplyDifferent!44 lt!26757 lt!26753 (zeroValue!1999 newMap!16) lt!26740))))

(assert (=> b!63443 (= (apply!68 (+!82 lt!26757 (tuple2!2033 lt!26753 (zeroValue!1999 newMap!16))) lt!26740) (apply!68 lt!26757 lt!26740))))

(declare-fun lt!26746 () Unit!1680)

(assert (=> b!63443 (= lt!26746 lt!26749)))

(declare-fun lt!26752 () ListLongMap!1351)

(assert (=> b!63443 (= lt!26752 (getCurrentListMapNoExtraKeys!46 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16))) (array!3746 (store (arr!1791 (_values!2070 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (ValueCellFull!863 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2023 (_values!2070 newMap!16))) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26741 () (_ BitVec 64))

(assert (=> b!63443 (= lt!26741 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26755 () (_ BitVec 64))

(assert (=> b!63443 (= lt!26755 (select (arr!1790 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16)))) #b00000000000000000000000000000000))))

(assert (=> b!63443 (= lt!26747 (addApplyDifferent!44 lt!26752 lt!26741 (minValue!1999 newMap!16) lt!26755))))

(assert (=> b!63443 (= (apply!68 (+!82 lt!26752 (tuple2!2033 lt!26741 (minValue!1999 newMap!16))) lt!26755) (apply!68 lt!26752 lt!26755))))

(declare-fun b!63444 () Bool)

(declare-fun e!41588 () Bool)

(assert (=> b!63444 (= e!41588 (validKeyInArray!0 (select (arr!1790 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!63445 () Bool)

(declare-fun e!41590 () Bool)

(assert (=> b!63445 (= e!41590 e!41589)))

(declare-fun c!8594 () Bool)

(assert (=> b!63445 (= c!8594 (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!63446 () Bool)

(declare-fun e!41581 () Bool)

(declare-fun call!5030 () Bool)

(assert (=> b!63446 (= e!41581 (not call!5030))))

(declare-fun b!63447 () Bool)

(declare-fun e!41591 () Bool)

(assert (=> b!63447 (= e!41591 e!41585)))

(declare-fun res!34688 () Bool)

(assert (=> b!63447 (=> (not res!34688) (not e!41585))))

(assert (=> b!63447 (= res!34688 (contains!686 lt!26736 (select (arr!1790 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> b!63447 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16))))))))

(declare-fun d!13153 () Bool)

(assert (=> d!13153 e!41590))

(declare-fun res!34693 () Bool)

(assert (=> d!13153 (=> (not res!34693) (not e!41590))))

(assert (=> d!13153 (= res!34693 (or (bvsge #b00000000000000000000000000000000 (size!2022 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16))))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16))))))))))

(declare-fun lt!26738 () ListLongMap!1351)

(assert (=> d!13153 (= lt!26736 lt!26738)))

(declare-fun lt!26748 () Unit!1680)

(assert (=> d!13153 (= lt!26748 e!41582)))

(declare-fun c!8596 () Bool)

(assert (=> d!13153 (= c!8596 e!41583)))

(declare-fun res!34690 () Bool)

(assert (=> d!13153 (=> (not res!34690) (not e!41583))))

(assert (=> d!13153 (= res!34690 (bvslt #b00000000000000000000000000000000 (size!2022 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16))))))))

(declare-fun e!41584 () ListLongMap!1351)

(assert (=> d!13153 (= lt!26738 e!41584)))

(assert (=> d!13153 (= c!8593 (and (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!13153 (validMask!0 (mask!5993 newMap!16))))

(assert (=> d!13153 (= (getCurrentListMap!391 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16))) (array!3746 (store (arr!1791 (_values!2070 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (ValueCellFull!863 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2023 (_values!2070 newMap!16))) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) lt!26736)))

(declare-fun b!63435 () Bool)

(assert (=> b!63435 (= e!41584 (+!82 call!5027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))

(declare-fun bm!5024 () Bool)

(assert (=> bm!5024 (= call!5025 call!5029)))

(declare-fun b!63448 () Bool)

(assert (=> b!63448 (= e!41581 e!41579)))

(declare-fun res!34686 () Bool)

(assert (=> b!63448 (= res!34686 call!5030)))

(assert (=> b!63448 (=> (not res!34686) (not e!41579))))

(declare-fun b!63449 () Bool)

(declare-fun c!8592 () Bool)

(assert (=> b!63449 (= c!8592 (and (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!63449 (= e!41580 e!41586)))

(declare-fun bm!5025 () Bool)

(assert (=> bm!5025 (= call!5028 call!5025)))

(declare-fun bm!5026 () Bool)

(assert (=> bm!5026 (= call!5026 (contains!686 lt!26736 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!5027 () Bool)

(assert (=> bm!5027 (= call!5030 (contains!686 lt!26736 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63450 () Bool)

(declare-fun res!34691 () Bool)

(assert (=> b!63450 (=> (not res!34691) (not e!41590))))

(assert (=> b!63450 (= res!34691 e!41591)))

(declare-fun res!34694 () Bool)

(assert (=> b!63450 (=> res!34694 e!41591)))

(assert (=> b!63450 (= res!34694 (not e!41588))))

(declare-fun res!34692 () Bool)

(assert (=> b!63450 (=> (not res!34692) (not e!41588))))

(assert (=> b!63450 (= res!34692 (bvslt #b00000000000000000000000000000000 (size!2022 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16))))))))

(declare-fun b!63451 () Bool)

(declare-fun Unit!1732 () Unit!1680)

(assert (=> b!63451 (= e!41582 Unit!1732)))

(declare-fun b!63452 () Bool)

(assert (=> b!63452 (= e!41586 call!5028)))

(declare-fun bm!5028 () Bool)

(assert (=> bm!5028 (= call!5031 call!5027)))

(declare-fun b!63453 () Bool)

(declare-fun res!34687 () Bool)

(assert (=> b!63453 (=> (not res!34687) (not e!41590))))

(assert (=> b!63453 (= res!34687 e!41581)))

(declare-fun c!8591 () Bool)

(assert (=> b!63453 (= c!8591 (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!63454 () Bool)

(assert (=> b!63454 (= e!41584 e!41580)))

(assert (=> b!63454 (= c!8595 (and (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!13153 c!8593) b!63435))

(assert (= (and d!13153 (not c!8593)) b!63454))

(assert (= (and b!63454 c!8595) b!63439))

(assert (= (and b!63454 (not c!8595)) b!63449))

(assert (= (and b!63449 c!8592) b!63434))

(assert (= (and b!63449 (not c!8592)) b!63452))

(assert (= (or b!63434 b!63452) bm!5025))

(assert (= (or b!63439 bm!5025) bm!5024))

(assert (= (or b!63439 b!63434) bm!5028))

(assert (= (or b!63435 bm!5024) bm!5023))

(assert (= (or b!63435 bm!5028) bm!5022))

(assert (= (and d!13153 res!34690) b!63437))

(assert (= (and d!13153 c!8596) b!63443))

(assert (= (and d!13153 (not c!8596)) b!63451))

(assert (= (and d!13153 res!34693) b!63450))

(assert (= (and b!63450 res!34692) b!63444))

(assert (= (and b!63450 (not res!34694)) b!63447))

(assert (= (and b!63447 res!34688) b!63442))

(assert (= (and b!63450 res!34691) b!63453))

(assert (= (and b!63453 c!8591) b!63448))

(assert (= (and b!63453 (not c!8591)) b!63446))

(assert (= (and b!63448 res!34686) b!63440))

(assert (= (or b!63448 b!63446) bm!5027))

(assert (= (and b!63453 res!34687) b!63445))

(assert (= (and b!63445 c!8594) b!63436))

(assert (= (and b!63445 (not c!8594)) b!63438))

(assert (= (and b!63436 res!34689) b!63441))

(assert (= (or b!63436 b!63438) bm!5026))

(declare-fun b_lambda!2835 () Bool)

(assert (=> (not b_lambda!2835) (not b!63442)))

(assert (=> b!63442 t!4828))

(declare-fun b_and!3889 () Bool)

(assert (= b_and!3885 (and (=> t!4828 result!2455) b_and!3889)))

(assert (=> b!63442 t!4830))

(declare-fun b_and!3891 () Bool)

(assert (= b_and!3887 (and (=> t!4830 result!2457) b_and!3891)))

(declare-fun m!57769 () Bool)

(assert (=> b!63443 m!57769))

(declare-fun m!57771 () Bool)

(assert (=> b!63443 m!57771))

(assert (=> b!63443 m!57769))

(declare-fun m!57773 () Bool)

(assert (=> b!63443 m!57773))

(assert (=> b!63443 m!57757))

(declare-fun m!57775 () Bool)

(assert (=> b!63443 m!57775))

(declare-fun m!57777 () Bool)

(assert (=> b!63443 m!57777))

(declare-fun m!57779 () Bool)

(assert (=> b!63443 m!57779))

(declare-fun m!57781 () Bool)

(assert (=> b!63443 m!57781))

(declare-fun m!57783 () Bool)

(assert (=> b!63443 m!57783))

(declare-fun m!57785 () Bool)

(assert (=> b!63443 m!57785))

(declare-fun m!57787 () Bool)

(assert (=> b!63443 m!57787))

(declare-fun m!57789 () Bool)

(assert (=> b!63443 m!57789))

(declare-fun m!57791 () Bool)

(assert (=> b!63443 m!57791))

(assert (=> b!63443 m!57779))

(declare-fun m!57793 () Bool)

(assert (=> b!63443 m!57793))

(declare-fun m!57795 () Bool)

(assert (=> b!63443 m!57795))

(declare-fun m!57797 () Bool)

(assert (=> b!63443 m!57797))

(assert (=> b!63443 m!57793))

(assert (=> b!63443 m!57783))

(declare-fun m!57799 () Bool)

(assert (=> b!63443 m!57799))

(declare-fun m!57801 () Bool)

(assert (=> b!63440 m!57801))

(assert (=> b!63447 m!57757))

(assert (=> b!63447 m!57757))

(declare-fun m!57803 () Bool)

(assert (=> b!63447 m!57803))

(assert (=> b!63444 m!57757))

(assert (=> b!63444 m!57757))

(assert (=> b!63444 m!57759))

(declare-fun m!57805 () Bool)

(assert (=> bm!5027 m!57805))

(declare-fun m!57807 () Bool)

(assert (=> b!63435 m!57807))

(assert (=> d!13153 m!55995))

(declare-fun m!57809 () Bool)

(assert (=> bm!5022 m!57809))

(assert (=> b!63442 m!56073))

(declare-fun m!57811 () Bool)

(assert (=> b!63442 m!57811))

(assert (=> b!63442 m!57757))

(assert (=> b!63442 m!57811))

(assert (=> b!63442 m!56073))

(declare-fun m!57813 () Bool)

(assert (=> b!63442 m!57813))

(assert (=> b!63442 m!57757))

(declare-fun m!57815 () Bool)

(assert (=> b!63442 m!57815))

(declare-fun m!57817 () Bool)

(assert (=> b!63441 m!57817))

(assert (=> bm!5023 m!57791))

(assert (=> b!63437 m!57757))

(assert (=> b!63437 m!57757))

(assert (=> b!63437 m!57759))

(declare-fun m!57819 () Bool)

(assert (=> bm!5026 m!57819))

(assert (=> d!12741 d!13153))

(declare-fun d!13155 () Bool)

(declare-fun e!41592 () Bool)

(assert (=> d!13155 e!41592))

(declare-fun res!34695 () Bool)

(assert (=> d!13155 (=> (not res!34695) (not e!41592))))

(assert (=> d!13155 (= res!34695 (and (bvsge (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) #b00000000000000000000000000000000) (bvslt (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (size!2022 lt!26293))))))

(declare-fun lt!26758 () Unit!1680)

(assert (=> d!13155 (= lt!26758 (choose!343 lt!26293 lt!26300 (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (defaultEntry!2087 newMap!16)))))

(assert (=> d!13155 (validMask!0 (mask!5993 newMap!16))))

(assert (=> d!13155 (= (lemmaValidKeyInArrayIsInListMap!77 lt!26293 lt!26300 (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (defaultEntry!2087 newMap!16)) lt!26758)))

(declare-fun b!63455 () Bool)

(assert (=> b!63455 (= e!41592 (contains!686 (getCurrentListMap!391 lt!26293 lt!26300 (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (select (arr!1790 lt!26293) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)))))))

(assert (= (and d!13155 res!34695) b!63455))

(declare-fun m!57821 () Bool)

(assert (=> d!13155 m!57821))

(assert (=> d!13155 m!55995))

(assert (=> b!63455 m!56393))

(declare-fun m!57823 () Bool)

(assert (=> b!63455 m!57823))

(assert (=> b!63455 m!56393))

(assert (=> b!63455 m!57823))

(declare-fun m!57825 () Bool)

(assert (=> b!63455 m!57825))

(assert (=> d!12741 d!13155))

(declare-fun d!13157 () Bool)

(declare-fun e!41595 () Bool)

(assert (=> d!13157 e!41595))

(declare-fun res!34698 () Bool)

(assert (=> d!13157 (=> (not res!34698) (not e!41595))))

(assert (=> d!13157 (= res!34698 (and (bvsge (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) #b00000000000000000000000000000000) (bvslt (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (size!2022 (_keys!3719 newMap!16)))))))

(declare-fun lt!26761 () Unit!1680)

(declare-fun choose!41 (array!3743 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1430) Unit!1680)

(assert (=> d!13157 (= lt!26761 (choose!41 (_keys!3719 newMap!16) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) lt!26297 lt!26290))))

(assert (=> d!13157 (bvslt (size!2022 (_keys!3719 newMap!16)) #b01111111111111111111111111111111)))

(assert (=> d!13157 (= (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!3719 newMap!16) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) lt!26297 lt!26290) lt!26761)))

(declare-fun b!63458 () Bool)

(assert (=> b!63458 (= e!41595 (arrayNoDuplicates!0 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16))) lt!26297 lt!26290))))

(assert (= (and d!13157 res!34698) b!63458))

(assert (=> d!13157 m!55703))

(declare-fun m!57827 () Bool)

(assert (=> d!13157 m!57827))

(assert (=> b!63458 m!56421))

(assert (=> b!63458 m!56395))

(assert (=> d!12741 d!13157))

(declare-fun d!13159 () Bool)

(declare-fun e!41597 () Bool)

(assert (=> d!13159 e!41597))

(declare-fun res!34699 () Bool)

(assert (=> d!13159 (=> res!34699 e!41597)))

(declare-fun lt!26763 () Bool)

(assert (=> d!13159 (= res!34699 (not lt!26763))))

(declare-fun lt!26764 () Bool)

(assert (=> d!13159 (= lt!26763 lt!26764)))

(declare-fun lt!26762 () Unit!1680)

(declare-fun e!41596 () Unit!1680)

(assert (=> d!13159 (= lt!26762 e!41596)))

(declare-fun c!8597 () Bool)

(assert (=> d!13159 (= c!8597 lt!26764)))

(assert (=> d!13159 (= lt!26764 (containsKey!130 (toList!691 (getCurrentListMap!391 lt!26293 lt!26300 (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (select (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)))))))

(assert (=> d!13159 (= (contains!686 (getCurrentListMap!391 lt!26293 lt!26300 (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (select (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)))) lt!26763)))

(declare-fun b!63459 () Bool)

(declare-fun lt!26765 () Unit!1680)

(assert (=> b!63459 (= e!41596 lt!26765)))

(assert (=> b!63459 (= lt!26765 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 (getCurrentListMap!391 lt!26293 lt!26300 (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (select (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)))))))

(assert (=> b!63459 (isDefined!79 (getValueByKey!127 (toList!691 (getCurrentListMap!391 lt!26293 lt!26300 (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (select (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)))))))

(declare-fun b!63460 () Bool)

(declare-fun Unit!1733 () Unit!1680)

(assert (=> b!63460 (= e!41596 Unit!1733)))

(declare-fun b!63461 () Bool)

(assert (=> b!63461 (= e!41597 (isDefined!79 (getValueByKey!127 (toList!691 (getCurrentListMap!391 lt!26293 lt!26300 (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (select (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967))))))))

(assert (= (and d!13159 c!8597) b!63459))

(assert (= (and d!13159 (not c!8597)) b!63460))

(assert (= (and d!13159 (not res!34699)) b!63461))

(assert (=> d!13159 m!56415))

(declare-fun m!57829 () Bool)

(assert (=> d!13159 m!57829))

(assert (=> b!63459 m!56415))

(declare-fun m!57831 () Bool)

(assert (=> b!63459 m!57831))

(assert (=> b!63459 m!56415))

(declare-fun m!57833 () Bool)

(assert (=> b!63459 m!57833))

(assert (=> b!63459 m!57833))

(declare-fun m!57835 () Bool)

(assert (=> b!63459 m!57835))

(assert (=> b!63461 m!56415))

(assert (=> b!63461 m!57833))

(assert (=> b!63461 m!57833))

(assert (=> b!63461 m!57835))

(assert (=> d!12741 d!13159))

(declare-fun d!13161 () Bool)

(declare-fun e!41600 () Bool)

(assert (=> d!13161 e!41600))

(declare-fun res!34702 () Bool)

(assert (=> d!13161 (=> (not res!34702) (not e!41600))))

(assert (=> d!13161 (= res!34702 (and (bvsge (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) #b00000000000000000000000000000000) (bvslt (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (size!2022 (_keys!3719 newMap!16))) (bvslt (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (size!2023 (_values!2070 newMap!16)))))))

(declare-fun lt!26768 () Unit!1680)

(declare-fun choose!349 (array!3743 array!3745 (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 (_ BitVec 32) (_ BitVec 64) V!2865 Int) Unit!1680)

(assert (=> d!13161 (= lt!26768 (choose!349 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2087 newMap!16)))))

(assert (=> d!13161 (validMask!0 (mask!5993 newMap!16))))

(assert (=> d!13161 (= (lemmaAddValidKeyToArrayThenAddPairToListMap!7 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2087 newMap!16)) lt!26768)))

(declare-fun b!63464 () Bool)

(assert (=> b!63464 (= e!41600 (= (+!82 (getCurrentListMap!391 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!391 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16))) (array!3746 (store (arr!1791 (_values!2070 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (ValueCellFull!863 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2023 (_values!2070 newMap!16))) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))))))

(assert (= (and d!13161 res!34702) b!63464))

(assert (=> d!13161 m!55703))

(assert (=> d!13161 m!55701))

(declare-fun m!57837 () Bool)

(assert (=> d!13161 m!57837))

(assert (=> d!13161 m!55995))

(assert (=> b!63464 m!56423))

(assert (=> b!63464 m!56409))

(assert (=> b!63464 m!56421))

(assert (=> b!63464 m!55895))

(assert (=> b!63464 m!55895))

(assert (=> b!63464 m!56413))

(assert (=> d!12741 d!13161))

(declare-fun d!13163 () Bool)

(declare-fun res!34703 () Bool)

(declare-fun e!41601 () Bool)

(assert (=> d!13163 (=> res!34703 e!41601)))

(assert (=> d!13163 (= res!34703 (= (select (arr!1790 lt!26289) #b00000000000000000000000000000000) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> d!13163 (= (arrayContainsKey!0 lt!26289 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) #b00000000000000000000000000000000) e!41601)))

(declare-fun b!63465 () Bool)

(declare-fun e!41602 () Bool)

(assert (=> b!63465 (= e!41601 e!41602)))

(declare-fun res!34704 () Bool)

(assert (=> b!63465 (=> (not res!34704) (not e!41602))))

(assert (=> b!63465 (= res!34704 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2022 lt!26289)))))

(declare-fun b!63466 () Bool)

(assert (=> b!63466 (= e!41602 (arrayContainsKey!0 lt!26289 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!13163 (not res!34703)) b!63465))

(assert (= (and b!63465 res!34704) b!63466))

(declare-fun m!57839 () Bool)

(assert (=> d!13163 m!57839))

(assert (=> b!63466 m!55703))

(declare-fun m!57841 () Bool)

(assert (=> b!63466 m!57841))

(assert (=> d!12741 d!13163))

(declare-fun b!63467 () Bool)

(declare-fun e!41610 () ListLongMap!1351)

(declare-fun call!5038 () ListLongMap!1351)

(assert (=> b!63467 (= e!41610 call!5038)))

(declare-fun b!63469 () Bool)

(declare-fun e!41613 () Bool)

(declare-fun e!41611 () Bool)

(assert (=> b!63469 (= e!41613 e!41611)))

(declare-fun res!34708 () Bool)

(declare-fun call!5033 () Bool)

(assert (=> b!63469 (= res!34708 call!5033)))

(assert (=> b!63469 (=> (not res!34708) (not e!41611))))

(declare-fun b!63470 () Bool)

(declare-fun e!41607 () Bool)

(assert (=> b!63470 (= e!41607 (validKeyInArray!0 (select (arr!1790 lt!26293) #b00000000000000000000000000000000)))))

(declare-fun bm!5029 () Bool)

(declare-fun call!5036 () ListLongMap!1351)

(declare-fun c!8600 () Bool)

(declare-fun call!5032 () ListLongMap!1351)

(declare-fun call!5035 () ListLongMap!1351)

(declare-fun call!5034 () ListLongMap!1351)

(declare-fun c!8602 () Bool)

(assert (=> bm!5029 (= call!5034 (+!82 (ite c!8600 call!5036 (ite c!8602 call!5032 call!5035)) (ite (or c!8600 c!8602) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(declare-fun b!63471 () Bool)

(assert (=> b!63471 (= e!41613 (not call!5033))))

(declare-fun b!63472 () Bool)

(declare-fun e!41604 () ListLongMap!1351)

(assert (=> b!63472 (= e!41604 call!5038)))

(declare-fun b!63473 () Bool)

(declare-fun e!41603 () Bool)

(declare-fun lt!26769 () ListLongMap!1351)

(assert (=> b!63473 (= e!41603 (= (apply!68 lt!26769 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1999 newMap!16)))))

(declare-fun b!63474 () Bool)

(assert (=> b!63474 (= e!41611 (= (apply!68 lt!26769 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1999 newMap!16)))))

(declare-fun bm!5030 () Bool)

(assert (=> bm!5030 (= call!5036 (getCurrentListMapNoExtraKeys!46 lt!26293 lt!26300 (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun e!41609 () Bool)

(declare-fun b!63475 () Bool)

(assert (=> b!63475 (= e!41609 (= (apply!68 lt!26769 (select (arr!1790 lt!26293) #b00000000000000000000000000000000)) (get!1088 (select (arr!1791 lt!26300) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!63475 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 lt!26300)))))

(assert (=> b!63475 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 lt!26293)))))

(declare-fun b!63476 () Bool)

(declare-fun e!41606 () Unit!1680)

(declare-fun lt!26780 () Unit!1680)

(assert (=> b!63476 (= e!41606 lt!26780)))

(declare-fun lt!26787 () ListLongMap!1351)

(assert (=> b!63476 (= lt!26787 (getCurrentListMapNoExtraKeys!46 lt!26293 lt!26300 (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26783 () (_ BitVec 64))

(assert (=> b!63476 (= lt!26783 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26777 () (_ BitVec 64))

(assert (=> b!63476 (= lt!26777 (select (arr!1790 lt!26293) #b00000000000000000000000000000000))))

(declare-fun lt!26789 () Unit!1680)

(assert (=> b!63476 (= lt!26789 (addStillContains!44 lt!26787 lt!26783 (zeroValue!1999 newMap!16) lt!26777))))

(assert (=> b!63476 (contains!686 (+!82 lt!26787 (tuple2!2033 lt!26783 (zeroValue!1999 newMap!16))) lt!26777)))

(declare-fun lt!26770 () Unit!1680)

(assert (=> b!63476 (= lt!26770 lt!26789)))

(declare-fun lt!26776 () ListLongMap!1351)

(assert (=> b!63476 (= lt!26776 (getCurrentListMapNoExtraKeys!46 lt!26293 lt!26300 (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26784 () (_ BitVec 64))

(assert (=> b!63476 (= lt!26784 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26775 () (_ BitVec 64))

(assert (=> b!63476 (= lt!26775 (select (arr!1790 lt!26293) #b00000000000000000000000000000000))))

(declare-fun lt!26778 () Unit!1680)

(assert (=> b!63476 (= lt!26778 (addApplyDifferent!44 lt!26776 lt!26784 (minValue!1999 newMap!16) lt!26775))))

(assert (=> b!63476 (= (apply!68 (+!82 lt!26776 (tuple2!2033 lt!26784 (minValue!1999 newMap!16))) lt!26775) (apply!68 lt!26776 lt!26775))))

(declare-fun lt!26772 () Unit!1680)

(assert (=> b!63476 (= lt!26772 lt!26778)))

(declare-fun lt!26790 () ListLongMap!1351)

(assert (=> b!63476 (= lt!26790 (getCurrentListMapNoExtraKeys!46 lt!26293 lt!26300 (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26786 () (_ BitVec 64))

(assert (=> b!63476 (= lt!26786 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26773 () (_ BitVec 64))

(assert (=> b!63476 (= lt!26773 (select (arr!1790 lt!26293) #b00000000000000000000000000000000))))

(declare-fun lt!26782 () Unit!1680)

(assert (=> b!63476 (= lt!26782 (addApplyDifferent!44 lt!26790 lt!26786 (zeroValue!1999 newMap!16) lt!26773))))

(assert (=> b!63476 (= (apply!68 (+!82 lt!26790 (tuple2!2033 lt!26786 (zeroValue!1999 newMap!16))) lt!26773) (apply!68 lt!26790 lt!26773))))

(declare-fun lt!26779 () Unit!1680)

(assert (=> b!63476 (= lt!26779 lt!26782)))

(declare-fun lt!26785 () ListLongMap!1351)

(assert (=> b!63476 (= lt!26785 (getCurrentListMapNoExtraKeys!46 lt!26293 lt!26300 (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26774 () (_ BitVec 64))

(assert (=> b!63476 (= lt!26774 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26788 () (_ BitVec 64))

(assert (=> b!63476 (= lt!26788 (select (arr!1790 lt!26293) #b00000000000000000000000000000000))))

(assert (=> b!63476 (= lt!26780 (addApplyDifferent!44 lt!26785 lt!26774 (minValue!1999 newMap!16) lt!26788))))

(assert (=> b!63476 (= (apply!68 (+!82 lt!26785 (tuple2!2033 lt!26774 (minValue!1999 newMap!16))) lt!26788) (apply!68 lt!26785 lt!26788))))

(declare-fun b!63477 () Bool)

(declare-fun e!41612 () Bool)

(assert (=> b!63477 (= e!41612 (validKeyInArray!0 (select (arr!1790 lt!26293) #b00000000000000000000000000000000)))))

(declare-fun b!63478 () Bool)

(declare-fun e!41614 () Bool)

(assert (=> b!63478 (= e!41614 e!41613)))

(declare-fun c!8601 () Bool)

(assert (=> b!63478 (= c!8601 (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!63479 () Bool)

(declare-fun e!41605 () Bool)

(declare-fun call!5037 () Bool)

(assert (=> b!63479 (= e!41605 (not call!5037))))

(declare-fun b!63480 () Bool)

(declare-fun e!41615 () Bool)

(assert (=> b!63480 (= e!41615 e!41609)))

(declare-fun res!34707 () Bool)

(assert (=> b!63480 (=> (not res!34707) (not e!41609))))

(assert (=> b!63480 (= res!34707 (contains!686 lt!26769 (select (arr!1790 lt!26293) #b00000000000000000000000000000000)))))

(assert (=> b!63480 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 lt!26293)))))

(declare-fun d!13165 () Bool)

(assert (=> d!13165 e!41614))

(declare-fun res!34712 () Bool)

(assert (=> d!13165 (=> (not res!34712) (not e!41614))))

(assert (=> d!13165 (= res!34712 (or (bvsge #b00000000000000000000000000000000 (size!2022 lt!26293)) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 lt!26293)))))))

(declare-fun lt!26771 () ListLongMap!1351)

(assert (=> d!13165 (= lt!26769 lt!26771)))

(declare-fun lt!26781 () Unit!1680)

(assert (=> d!13165 (= lt!26781 e!41606)))

(declare-fun c!8603 () Bool)

(assert (=> d!13165 (= c!8603 e!41607)))

(declare-fun res!34709 () Bool)

(assert (=> d!13165 (=> (not res!34709) (not e!41607))))

(assert (=> d!13165 (= res!34709 (bvslt #b00000000000000000000000000000000 (size!2022 lt!26293)))))

(declare-fun e!41608 () ListLongMap!1351)

(assert (=> d!13165 (= lt!26771 e!41608)))

(assert (=> d!13165 (= c!8600 (and (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!13165 (validMask!0 (mask!5993 newMap!16))))

(assert (=> d!13165 (= (getCurrentListMap!391 lt!26293 lt!26300 (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) lt!26769)))

(declare-fun b!63468 () Bool)

(assert (=> b!63468 (= e!41608 (+!82 call!5034 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))

(declare-fun bm!5031 () Bool)

(assert (=> bm!5031 (= call!5032 call!5036)))

(declare-fun b!63481 () Bool)

(assert (=> b!63481 (= e!41605 e!41603)))

(declare-fun res!34705 () Bool)

(assert (=> b!63481 (= res!34705 call!5037)))

(assert (=> b!63481 (=> (not res!34705) (not e!41603))))

(declare-fun b!63482 () Bool)

(declare-fun c!8599 () Bool)

(assert (=> b!63482 (= c!8599 (and (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!63482 (= e!41604 e!41610)))

(declare-fun bm!5032 () Bool)

(assert (=> bm!5032 (= call!5035 call!5032)))

(declare-fun bm!5033 () Bool)

(assert (=> bm!5033 (= call!5033 (contains!686 lt!26769 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!5034 () Bool)

(assert (=> bm!5034 (= call!5037 (contains!686 lt!26769 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63483 () Bool)

(declare-fun res!34710 () Bool)

(assert (=> b!63483 (=> (not res!34710) (not e!41614))))

(assert (=> b!63483 (= res!34710 e!41615)))

(declare-fun res!34713 () Bool)

(assert (=> b!63483 (=> res!34713 e!41615)))

(assert (=> b!63483 (= res!34713 (not e!41612))))

(declare-fun res!34711 () Bool)

(assert (=> b!63483 (=> (not res!34711) (not e!41612))))

(assert (=> b!63483 (= res!34711 (bvslt #b00000000000000000000000000000000 (size!2022 lt!26293)))))

(declare-fun b!63484 () Bool)

(declare-fun Unit!1734 () Unit!1680)

(assert (=> b!63484 (= e!41606 Unit!1734)))

(declare-fun b!63485 () Bool)

(assert (=> b!63485 (= e!41610 call!5035)))

(declare-fun bm!5035 () Bool)

(assert (=> bm!5035 (= call!5038 call!5034)))

(declare-fun b!63486 () Bool)

(declare-fun res!34706 () Bool)

(assert (=> b!63486 (=> (not res!34706) (not e!41614))))

(assert (=> b!63486 (= res!34706 e!41605)))

(declare-fun c!8598 () Bool)

(assert (=> b!63486 (= c!8598 (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!63487 () Bool)

(assert (=> b!63487 (= e!41608 e!41604)))

(assert (=> b!63487 (= c!8602 (and (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!13165 c!8600) b!63468))

(assert (= (and d!13165 (not c!8600)) b!63487))

(assert (= (and b!63487 c!8602) b!63472))

(assert (= (and b!63487 (not c!8602)) b!63482))

(assert (= (and b!63482 c!8599) b!63467))

(assert (= (and b!63482 (not c!8599)) b!63485))

(assert (= (or b!63467 b!63485) bm!5032))

(assert (= (or b!63472 bm!5032) bm!5031))

(assert (= (or b!63472 b!63467) bm!5035))

(assert (= (or b!63468 bm!5031) bm!5030))

(assert (= (or b!63468 bm!5035) bm!5029))

(assert (= (and d!13165 res!34709) b!63470))

(assert (= (and d!13165 c!8603) b!63476))

(assert (= (and d!13165 (not c!8603)) b!63484))

(assert (= (and d!13165 res!34712) b!63483))

(assert (= (and b!63483 res!34711) b!63477))

(assert (= (and b!63483 (not res!34713)) b!63480))

(assert (= (and b!63480 res!34707) b!63475))

(assert (= (and b!63483 res!34710) b!63486))

(assert (= (and b!63486 c!8598) b!63481))

(assert (= (and b!63486 (not c!8598)) b!63479))

(assert (= (and b!63481 res!34705) b!63473))

(assert (= (or b!63481 b!63479) bm!5034))

(assert (= (and b!63486 res!34706) b!63478))

(assert (= (and b!63478 c!8601) b!63469))

(assert (= (and b!63478 (not c!8601)) b!63471))

(assert (= (and b!63469 res!34708) b!63474))

(assert (= (or b!63469 b!63471) bm!5033))

(declare-fun b_lambda!2837 () Bool)

(assert (=> (not b_lambda!2837) (not b!63475)))

(assert (=> b!63475 t!4828))

(declare-fun b_and!3893 () Bool)

(assert (= b_and!3889 (and (=> t!4828 result!2455) b_and!3893)))

(assert (=> b!63475 t!4830))

(declare-fun b_and!3895 () Bool)

(assert (= b_and!3891 (and (=> t!4830 result!2457) b_and!3895)))

(declare-fun m!57843 () Bool)

(assert (=> b!63476 m!57843))

(declare-fun m!57845 () Bool)

(assert (=> b!63476 m!57845))

(assert (=> b!63476 m!57843))

(declare-fun m!57847 () Bool)

(assert (=> b!63476 m!57847))

(declare-fun m!57849 () Bool)

(assert (=> b!63476 m!57849))

(declare-fun m!57851 () Bool)

(assert (=> b!63476 m!57851))

(declare-fun m!57853 () Bool)

(assert (=> b!63476 m!57853))

(declare-fun m!57855 () Bool)

(assert (=> b!63476 m!57855))

(declare-fun m!57857 () Bool)

(assert (=> b!63476 m!57857))

(declare-fun m!57859 () Bool)

(assert (=> b!63476 m!57859))

(declare-fun m!57861 () Bool)

(assert (=> b!63476 m!57861))

(declare-fun m!57863 () Bool)

(assert (=> b!63476 m!57863))

(declare-fun m!57865 () Bool)

(assert (=> b!63476 m!57865))

(declare-fun m!57867 () Bool)

(assert (=> b!63476 m!57867))

(assert (=> b!63476 m!57855))

(declare-fun m!57869 () Bool)

(assert (=> b!63476 m!57869))

(declare-fun m!57871 () Bool)

(assert (=> b!63476 m!57871))

(declare-fun m!57873 () Bool)

(assert (=> b!63476 m!57873))

(assert (=> b!63476 m!57869))

(assert (=> b!63476 m!57859))

(declare-fun m!57875 () Bool)

(assert (=> b!63476 m!57875))

(declare-fun m!57877 () Bool)

(assert (=> b!63473 m!57877))

(assert (=> b!63480 m!57849))

(assert (=> b!63480 m!57849))

(declare-fun m!57879 () Bool)

(assert (=> b!63480 m!57879))

(assert (=> b!63477 m!57849))

(assert (=> b!63477 m!57849))

(declare-fun m!57881 () Bool)

(assert (=> b!63477 m!57881))

(declare-fun m!57883 () Bool)

(assert (=> bm!5034 m!57883))

(declare-fun m!57885 () Bool)

(assert (=> b!63468 m!57885))

(assert (=> d!13165 m!55995))

(declare-fun m!57887 () Bool)

(assert (=> bm!5029 m!57887))

(assert (=> b!63475 m!56073))

(declare-fun m!57889 () Bool)

(assert (=> b!63475 m!57889))

(assert (=> b!63475 m!57849))

(assert (=> b!63475 m!57889))

(assert (=> b!63475 m!56073))

(declare-fun m!57891 () Bool)

(assert (=> b!63475 m!57891))

(assert (=> b!63475 m!57849))

(declare-fun m!57893 () Bool)

(assert (=> b!63475 m!57893))

(declare-fun m!57895 () Bool)

(assert (=> b!63474 m!57895))

(assert (=> bm!5030 m!57867))

(assert (=> b!63470 m!57849))

(assert (=> b!63470 m!57849))

(assert (=> b!63470 m!57881))

(declare-fun m!57897 () Bool)

(assert (=> bm!5033 m!57897))

(assert (=> d!12741 d!13165))

(declare-fun b!63488 () Bool)

(declare-fun e!41617 () (_ BitVec 32))

(declare-fun call!5039 () (_ BitVec 32))

(assert (=> b!63488 (= e!41617 call!5039)))

(declare-fun b!63489 () Bool)

(assert (=> b!63489 (= e!41617 (bvadd #b00000000000000000000000000000001 call!5039))))

(declare-fun b!63490 () Bool)

(declare-fun e!41616 () (_ BitVec 32))

(assert (=> b!63490 (= e!41616 e!41617)))

(declare-fun c!8604 () Bool)

(assert (=> b!63490 (= c!8604 (validKeyInArray!0 (select (arr!1790 lt!26294) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)))))))

(declare-fun lt!26791 () (_ BitVec 32))

(declare-fun d!13167 () Bool)

(assert (=> d!13167 (and (bvsge lt!26791 #b00000000000000000000000000000000) (bvsle lt!26791 (bvsub (size!2022 lt!26294) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)))))))

(assert (=> d!13167 (= lt!26791 e!41616)))

(declare-fun c!8605 () Bool)

(assert (=> d!13167 (= c!8605 (bvsge (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (bvadd (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) #b00000000000000000000000000000001)))))

(assert (=> d!13167 (and (bvsle (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (bvadd (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) #b00000000000000000000000000000001)) (bvsge (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) #b00000000000000000000000000000000) (bvsle (bvadd (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) #b00000000000000000000000000000001) (size!2022 lt!26294)))))

(assert (=> d!13167 (= (arrayCountValidKeys!0 lt!26294 (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (bvadd (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) #b00000000000000000000000000000001)) lt!26791)))

(declare-fun bm!5036 () Bool)

(assert (=> bm!5036 (= call!5039 (arrayCountValidKeys!0 lt!26294 (bvadd (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) #b00000000000000000000000000000001) (bvadd (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) #b00000000000000000000000000000001)))))

(declare-fun b!63491 () Bool)

(assert (=> b!63491 (= e!41616 #b00000000000000000000000000000000)))

(assert (= (and d!13167 c!8605) b!63491))

(assert (= (and d!13167 (not c!8605)) b!63490))

(assert (= (and b!63490 c!8604) b!63489))

(assert (= (and b!63490 (not c!8604)) b!63488))

(assert (= (or b!63489 b!63488) bm!5036))

(declare-fun m!57899 () Bool)

(assert (=> b!63490 m!57899))

(assert (=> b!63490 m!57899))

(declare-fun m!57901 () Bool)

(assert (=> b!63490 m!57901))

(declare-fun m!57903 () Bool)

(assert (=> bm!5036 m!57903))

(assert (=> d!12741 d!13167))

(assert (=> d!12741 d!13129))

(declare-fun d!13169 () Bool)

(declare-fun e!41620 () Bool)

(assert (=> d!13169 e!41620))

(declare-fun res!34716 () Bool)

(assert (=> d!13169 (=> (not res!34716) (not e!41620))))

(assert (=> d!13169 (= res!34716 (and (bvsge (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) #b00000000000000000000000000000000) (bvslt (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (size!2022 (_keys!3719 newMap!16)))))))

(declare-fun lt!26794 () Unit!1680)

(declare-fun choose!102 ((_ BitVec 64) array!3743 (_ BitVec 32) (_ BitVec 32)) Unit!1680)

(assert (=> d!13169 (= lt!26794 (choose!102 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (_keys!3719 newMap!16) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (mask!5993 newMap!16)))))

(assert (=> d!13169 (validMask!0 (mask!5993 newMap!16))))

(assert (=> d!13169 (= (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (_keys!3719 newMap!16) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (mask!5993 newMap!16)) lt!26794)))

(declare-fun b!63494 () Bool)

(assert (=> b!63494 (= e!41620 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16))) (mask!5993 newMap!16)))))

(assert (= (and d!13169 res!34716) b!63494))

(assert (=> d!13169 m!55703))

(declare-fun m!57905 () Bool)

(assert (=> d!13169 m!57905))

(assert (=> d!13169 m!55995))

(assert (=> b!63494 m!56421))

(assert (=> b!63494 m!56397))

(assert (=> d!12741 d!13169))

(assert (=> d!12741 d!12661))

(declare-fun d!13171 () Bool)

(assert (=> d!13171 (= (arrayCountValidKeys!0 lt!26294 (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (bvadd (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lt!26797 () Unit!1680)

(declare-fun choose!2 (array!3743 (_ BitVec 32)) Unit!1680)

(assert (=> d!13171 (= lt!26797 (choose!2 lt!26294 (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967))))))

(declare-fun e!41623 () Bool)

(assert (=> d!13171 e!41623))

(declare-fun res!34721 () Bool)

(assert (=> d!13171 (=> (not res!34721) (not e!41623))))

(assert (=> d!13171 (= res!34721 (and (bvsge (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) #b00000000000000000000000000000000) (bvslt (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (size!2022 lt!26294))))))

(assert (=> d!13171 (= (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!26294 (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967))) lt!26797)))

(declare-fun b!63499 () Bool)

(declare-fun res!34722 () Bool)

(assert (=> b!63499 (=> (not res!34722) (not e!41623))))

(assert (=> b!63499 (= res!34722 (validKeyInArray!0 (select (arr!1790 lt!26294) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)))))))

(declare-fun b!63500 () Bool)

(assert (=> b!63500 (= e!41623 (bvslt (size!2022 lt!26294) #b01111111111111111111111111111111))))

(assert (= (and d!13171 res!34721) b!63499))

(assert (= (and b!63499 res!34722) b!63500))

(assert (=> d!13171 m!56399))

(declare-fun m!57907 () Bool)

(assert (=> d!13171 m!57907))

(assert (=> b!63499 m!57899))

(assert (=> b!63499 m!57899))

(assert (=> b!63499 m!57901))

(assert (=> d!12741 d!13171))

(assert (=> d!12741 d!12631))

(declare-fun e!41629 () Bool)

(declare-fun b!63512 () Bool)

(assert (=> b!63512 (= e!41629 (= (arrayCountValidKeys!0 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16))) #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!3719 newMap!16) #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))) #b00000000000000000000000000000001)))))

(declare-fun b!63510 () Bool)

(declare-fun res!34731 () Bool)

(declare-fun e!41628 () Bool)

(assert (=> b!63510 (=> (not res!34731) (not e!41628))))

(assert (=> b!63510 (= res!34731 (validKeyInArray!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun d!13173 () Bool)

(assert (=> d!13173 e!41629))

(declare-fun res!34734 () Bool)

(assert (=> d!13173 (=> (not res!34734) (not e!41629))))

(assert (=> d!13173 (= res!34734 (and (bvsge (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) #b00000000000000000000000000000000) (bvslt (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (size!2022 (_keys!3719 newMap!16)))))))

(declare-fun lt!26800 () Unit!1680)

(declare-fun choose!1 (array!3743 (_ BitVec 32) (_ BitVec 64)) Unit!1680)

(assert (=> d!13173 (= lt!26800 (choose!1 (_keys!3719 newMap!16) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> d!13173 e!41628))

(declare-fun res!34733 () Bool)

(assert (=> d!13173 (=> (not res!34733) (not e!41628))))

(assert (=> d!13173 (= res!34733 (and (bvsge (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) #b00000000000000000000000000000000) (bvslt (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (size!2022 (_keys!3719 newMap!16)))))))

(assert (=> d!13173 (= (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!3719 newMap!16) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) lt!26800)))

(declare-fun b!63511 () Bool)

(assert (=> b!63511 (= e!41628 (bvslt (size!2022 (_keys!3719 newMap!16)) #b01111111111111111111111111111111))))

(declare-fun b!63509 () Bool)

(declare-fun res!34732 () Bool)

(assert (=> b!63509 (=> (not res!34732) (not e!41628))))

(assert (=> b!63509 (= res!34732 (not (validKeyInArray!0 (select (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967))))))))

(assert (= (and d!13173 res!34733) b!63509))

(assert (= (and b!63509 res!34732) b!63510))

(assert (= (and b!63510 res!34731) b!63511))

(assert (= (and d!13173 res!34734) b!63512))

(assert (=> b!63512 m!56421))

(assert (=> b!63512 m!56403))

(assert (=> b!63512 m!55969))

(assert (=> b!63510 m!55703))

(assert (=> b!63510 m!55963))

(assert (=> d!13173 m!55703))

(declare-fun m!57909 () Bool)

(assert (=> d!13173 m!57909))

(declare-fun m!57911 () Bool)

(assert (=> b!63509 m!57911))

(assert (=> b!63509 m!57911))

(declare-fun m!57913 () Bool)

(assert (=> b!63509 m!57913))

(assert (=> d!12741 d!13173))

(declare-fun d!13175 () Bool)

(assert (=> d!13175 (arrayContainsKey!0 lt!26289 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(declare-fun lt!26801 () Unit!1680)

(assert (=> d!13175 (= lt!26801 (choose!13 lt!26289 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967))))))

(assert (=> d!13175 (bvsge (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) #b00000000000000000000000000000000)))

(assert (=> d!13175 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!26289 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967))) lt!26801)))

(declare-fun bs!2777 () Bool)

(assert (= bs!2777 d!13175))

(assert (=> bs!2777 m!55703))

(assert (=> bs!2777 m!56387))

(assert (=> bs!2777 m!55703))

(declare-fun m!57915 () Bool)

(assert (=> bs!2777 m!57915))

(assert (=> d!12741 d!13175))

(declare-fun d!13177 () Bool)

(declare-fun res!34736 () Bool)

(declare-fun e!41633 () Bool)

(assert (=> d!13177 (=> res!34736 e!41633)))

(assert (=> d!13177 (= res!34736 (bvsge lt!26297 (size!2022 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16))))))))

(assert (=> d!13177 (= (arrayNoDuplicates!0 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16))) lt!26297 lt!26290) e!41633)))

(declare-fun b!63513 () Bool)

(declare-fun e!41631 () Bool)

(declare-fun call!5040 () Bool)

(assert (=> b!63513 (= e!41631 call!5040)))

(declare-fun b!63514 () Bool)

(declare-fun e!41630 () Bool)

(assert (=> b!63514 (= e!41630 (contains!688 lt!26290 (select (arr!1790 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16)))) lt!26297)))))

(declare-fun b!63515 () Bool)

(declare-fun e!41632 () Bool)

(assert (=> b!63515 (= e!41632 e!41631)))

(declare-fun c!8606 () Bool)

(assert (=> b!63515 (= c!8606 (validKeyInArray!0 (select (arr!1790 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16)))) lt!26297)))))

(declare-fun bm!5037 () Bool)

(assert (=> bm!5037 (= call!5040 (arrayNoDuplicates!0 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16))) (bvadd lt!26297 #b00000000000000000000000000000001) (ite c!8606 (Cons!1426 (select (arr!1790 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16)))) lt!26297) lt!26290) lt!26290)))))

(declare-fun b!63516 () Bool)

(assert (=> b!63516 (= e!41631 call!5040)))

(declare-fun b!63517 () Bool)

(assert (=> b!63517 (= e!41633 e!41632)))

(declare-fun res!34737 () Bool)

(assert (=> b!63517 (=> (not res!34737) (not e!41632))))

(assert (=> b!63517 (= res!34737 (not e!41630))))

(declare-fun res!34735 () Bool)

(assert (=> b!63517 (=> (not res!34735) (not e!41630))))

(assert (=> b!63517 (= res!34735 (validKeyInArray!0 (select (arr!1790 (array!3744 (store (arr!1790 (_keys!3719 newMap!16)) (ite c!8298 (index!3020 lt!25967) (index!3017 lt!25967)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2022 (_keys!3719 newMap!16)))) lt!26297)))))

(assert (= (and d!13177 (not res!34736)) b!63517))

(assert (= (and b!63517 res!34735) b!63514))

(assert (= (and b!63517 res!34737) b!63515))

(assert (= (and b!63515 c!8606) b!63516))

(assert (= (and b!63515 (not c!8606)) b!63513))

(assert (= (or b!63516 b!63513) bm!5037))

(declare-fun m!57917 () Bool)

(assert (=> b!63514 m!57917))

(assert (=> b!63514 m!57917))

(declare-fun m!57919 () Bool)

(assert (=> b!63514 m!57919))

(assert (=> b!63515 m!57917))

(assert (=> b!63515 m!57917))

(declare-fun m!57921 () Bool)

(assert (=> b!63515 m!57921))

(assert (=> bm!5037 m!57917))

(declare-fun m!57923 () Bool)

(assert (=> bm!5037 m!57923))

(assert (=> b!63517 m!57917))

(assert (=> b!63517 m!57917))

(assert (=> b!63517 m!57921))

(assert (=> d!12741 d!13177))

(assert (=> bm!4902 d!12891))

(declare-fun d!13179 () Bool)

(declare-fun e!41635 () Bool)

(assert (=> d!13179 e!41635))

(declare-fun res!34738 () Bool)

(assert (=> d!13179 (=> res!34738 e!41635)))

(declare-fun lt!26803 () Bool)

(assert (=> d!13179 (= res!34738 (not lt!26803))))

(declare-fun lt!26804 () Bool)

(assert (=> d!13179 (= lt!26803 lt!26804)))

(declare-fun lt!26802 () Unit!1680)

(declare-fun e!41634 () Unit!1680)

(assert (=> d!13179 (= lt!26802 e!41634)))

(declare-fun c!8607 () Bool)

(assert (=> d!13179 (= c!8607 lt!26804)))

(assert (=> d!13179 (= lt!26804 (containsKey!130 (toList!691 lt!26175) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!13179 (= (contains!686 lt!26175 #b1000000000000000000000000000000000000000000000000000000000000000) lt!26803)))

(declare-fun b!63518 () Bool)

(declare-fun lt!26805 () Unit!1680)

(assert (=> b!63518 (= e!41634 lt!26805)))

(assert (=> b!63518 (= lt!26805 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 lt!26175) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63518 (isDefined!79 (getValueByKey!127 (toList!691 lt!26175) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63519 () Bool)

(declare-fun Unit!1735 () Unit!1680)

(assert (=> b!63519 (= e!41634 Unit!1735)))

(declare-fun b!63520 () Bool)

(assert (=> b!63520 (= e!41635 (isDefined!79 (getValueByKey!127 (toList!691 lt!26175) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!13179 c!8607) b!63518))

(assert (= (and d!13179 (not c!8607)) b!63519))

(assert (= (and d!13179 (not res!34738)) b!63520))

(declare-fun m!57925 () Bool)

(assert (=> d!13179 m!57925))

(declare-fun m!57927 () Bool)

(assert (=> b!63518 m!57927))

(assert (=> b!63518 m!57083))

(assert (=> b!63518 m!57083))

(declare-fun m!57929 () Bool)

(assert (=> b!63518 m!57929))

(assert (=> b!63520 m!57083))

(assert (=> b!63520 m!57083))

(assert (=> b!63520 m!57929))

(assert (=> bm!4918 d!13179))

(declare-fun d!13181 () Bool)

(assert (=> d!13181 (isDefined!79 (getValueByKey!127 (toList!691 lt!26027) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun lt!26806 () Unit!1680)

(assert (=> d!13181 (= lt!26806 (choose!341 (toList!691 lt!26027) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!41636 () Bool)

(assert (=> d!13181 e!41636))

(declare-fun res!34739 () Bool)

(assert (=> d!13181 (=> (not res!34739) (not e!41636))))

(assert (=> d!13181 (= res!34739 (isStrictlySorted!273 (toList!691 lt!26027)))))

(assert (=> d!13181 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 lt!26027) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!26806)))

(declare-fun b!63521 () Bool)

(assert (=> b!63521 (= e!41636 (containsKey!130 (toList!691 lt!26027) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!13181 res!34739) b!63521))

(assert (=> d!13181 m!55903))

(assert (=> d!13181 m!56019))

(assert (=> d!13181 m!56019))

(assert (=> d!13181 m!56119))

(assert (=> d!13181 m!55903))

(declare-fun m!57931 () Bool)

(assert (=> d!13181 m!57931))

(assert (=> d!13181 m!57673))

(assert (=> b!63521 m!55903))

(assert (=> b!63521 m!56115))

(assert (=> b!62567 d!13181))

(assert (=> b!62567 d!12913))

(assert (=> b!62567 d!12915))

(declare-fun d!13183 () Bool)

(assert (=> d!13183 (= (get!1092 (getValueByKey!127 (toList!691 lt!26027) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (v!2425 (getValueByKey!127 (toList!691 lt!26027) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!12657 d!13183))

(assert (=> d!12657 d!12915))

(declare-fun d!13185 () Bool)

(declare-fun res!34740 () Bool)

(declare-fun e!41637 () Bool)

(assert (=> d!13185 (=> res!34740 e!41637)))

(assert (=> d!13185 (= res!34740 (and ((_ is Cons!1425) (t!4815 (toList!691 lt!25841))) (= (_1!1027 (h!2008 (t!4815 (toList!691 lt!25841)))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355))))))

(assert (=> d!13185 (= (containsKey!130 (t!4815 (toList!691 lt!25841)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) e!41637)))

(declare-fun b!63522 () Bool)

(declare-fun e!41638 () Bool)

(assert (=> b!63522 (= e!41637 e!41638)))

(declare-fun res!34741 () Bool)

(assert (=> b!63522 (=> (not res!34741) (not e!41638))))

(assert (=> b!63522 (= res!34741 (and (or (not ((_ is Cons!1425) (t!4815 (toList!691 lt!25841)))) (bvsle (_1!1027 (h!2008 (t!4815 (toList!691 lt!25841)))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355))) ((_ is Cons!1425) (t!4815 (toList!691 lt!25841))) (bvslt (_1!1027 (h!2008 (t!4815 (toList!691 lt!25841)))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355))))))

(declare-fun b!63523 () Bool)

(assert (=> b!63523 (= e!41638 (containsKey!130 (t!4815 (t!4815 (toList!691 lt!25841))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (= (and d!13185 (not res!34740)) b!63522))

(assert (= (and b!63522 res!34741) b!63523))

(assert (=> b!63523 m!55703))

(declare-fun m!57933 () Bool)

(assert (=> b!63523 m!57933))

(assert (=> b!62508 d!13185))

(assert (=> d!12661 d!12793))

(declare-fun d!13187 () Bool)

(declare-fun res!34742 () Bool)

(declare-fun e!41639 () Bool)

(assert (=> d!13187 (=> res!34742 e!41639)))

(assert (=> d!13187 (= res!34742 (and ((_ is Cons!1425) (toList!691 e!40947)) (= (_1!1027 (h!2008 (toList!691 e!40947))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355))))))

(assert (=> d!13187 (= (containsKey!130 (toList!691 e!40947) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) e!41639)))

(declare-fun b!63524 () Bool)

(declare-fun e!41640 () Bool)

(assert (=> b!63524 (= e!41639 e!41640)))

(declare-fun res!34743 () Bool)

(assert (=> b!63524 (=> (not res!34743) (not e!41640))))

(assert (=> b!63524 (= res!34743 (and (or (not ((_ is Cons!1425) (toList!691 e!40947))) (bvsle (_1!1027 (h!2008 (toList!691 e!40947))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355))) ((_ is Cons!1425) (toList!691 e!40947)) (bvslt (_1!1027 (h!2008 (toList!691 e!40947))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355))))))

(declare-fun b!63525 () Bool)

(assert (=> b!63525 (= e!41640 (containsKey!130 (t!4815 (toList!691 e!40947)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (= (and d!13187 (not res!34742)) b!63524))

(assert (= (and b!63524 res!34743) b!63525))

(assert (=> b!63525 m!55703))

(declare-fun m!57935 () Bool)

(assert (=> b!63525 m!57935))

(assert (=> d!12727 d!13187))

(declare-fun d!13189 () Bool)

(assert (=> d!13189 (= (apply!68 lt!26146 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1092 (getValueByKey!127 (toList!691 lt!26146) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!2778 () Bool)

(assert (= bs!2778 d!13189))

(assert (=> bs!2778 m!55903))

(assert (=> bs!2778 m!56775))

(assert (=> bs!2778 m!56775))

(declare-fun m!57937 () Bool)

(assert (=> bs!2778 m!57937))

(assert (=> b!62609 d!13189))

(assert (=> b!62609 d!12659))

(declare-fun d!13191 () Bool)

(declare-fun e!41642 () Bool)

(assert (=> d!13191 e!41642))

(declare-fun res!34744 () Bool)

(assert (=> d!13191 (=> res!34744 e!41642)))

(declare-fun lt!26808 () Bool)

(assert (=> d!13191 (= res!34744 (not lt!26808))))

(declare-fun lt!26809 () Bool)

(assert (=> d!13191 (= lt!26808 lt!26809)))

(declare-fun lt!26807 () Unit!1680)

(declare-fun e!41641 () Unit!1680)

(assert (=> d!13191 (= lt!26807 e!41641)))

(declare-fun c!8608 () Bool)

(assert (=> d!13191 (= c!8608 lt!26809)))

(assert (=> d!13191 (= lt!26809 (containsKey!130 (toList!691 lt!26362) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!13191 (= (contains!686 lt!26362 #b0000000000000000000000000000000000000000000000000000000000000000) lt!26808)))

(declare-fun b!63526 () Bool)

(declare-fun lt!26810 () Unit!1680)

(assert (=> b!63526 (= e!41641 lt!26810)))

(assert (=> b!63526 (= lt!26810 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 lt!26362) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63526 (isDefined!79 (getValueByKey!127 (toList!691 lt!26362) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63527 () Bool)

(declare-fun Unit!1736 () Unit!1680)

(assert (=> b!63527 (= e!41641 Unit!1736)))

(declare-fun b!63528 () Bool)

(assert (=> b!63528 (= e!41642 (isDefined!79 (getValueByKey!127 (toList!691 lt!26362) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!13191 c!8608) b!63526))

(assert (= (and d!13191 (not c!8608)) b!63527))

(assert (= (and d!13191 (not res!34744)) b!63528))

(declare-fun m!57939 () Bool)

(assert (=> d!13191 m!57939))

(declare-fun m!57941 () Bool)

(assert (=> b!63526 m!57941))

(declare-fun m!57943 () Bool)

(assert (=> b!63526 m!57943))

(assert (=> b!63526 m!57943))

(declare-fun m!57945 () Bool)

(assert (=> b!63526 m!57945))

(assert (=> b!63528 m!57943))

(assert (=> b!63528 m!57943))

(assert (=> b!63528 m!57945))

(assert (=> bm!4956 d!13191))

(declare-fun lt!26811 () Bool)

(declare-fun d!13193 () Bool)

(assert (=> d!13193 (= lt!26811 (select (content!69 (toList!691 lt!26100)) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!41644 () Bool)

(assert (=> d!13193 (= lt!26811 e!41644)))

(declare-fun res!34745 () Bool)

(assert (=> d!13193 (=> (not res!34745) (not e!41644))))

(assert (=> d!13193 (= res!34745 ((_ is Cons!1425) (toList!691 lt!26100)))))

(assert (=> d!13193 (= (contains!689 (toList!691 lt!26100) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26811)))

(declare-fun b!63529 () Bool)

(declare-fun e!41643 () Bool)

(assert (=> b!63529 (= e!41644 e!41643)))

(declare-fun res!34746 () Bool)

(assert (=> b!63529 (=> res!34746 e!41643)))

(assert (=> b!63529 (= res!34746 (= (h!2008 (toList!691 lt!26100)) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!63530 () Bool)

(assert (=> b!63530 (= e!41643 (contains!689 (t!4815 (toList!691 lt!26100)) (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!13193 res!34745) b!63529))

(assert (= (and b!63529 (not res!34746)) b!63530))

(declare-fun m!57947 () Bool)

(assert (=> d!13193 m!57947))

(declare-fun m!57949 () Bool)

(assert (=> d!13193 m!57949))

(declare-fun m!57951 () Bool)

(assert (=> b!63530 m!57951))

(assert (=> b!62533 d!13193))

(declare-fun d!13195 () Bool)

(assert (=> d!13195 (= (apply!68 lt!26323 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)) (get!1092 (getValueByKey!127 (toList!691 lt!26323) (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2779 () Bool)

(assert (= bs!2779 d!13195))

(assert (=> bs!2779 m!56033))

(assert (=> bs!2779 m!57443))

(assert (=> bs!2779 m!57443))

(declare-fun m!57953 () Bool)

(assert (=> bs!2779 m!57953))

(assert (=> b!62785 d!13195))

(declare-fun c!8609 () Bool)

(declare-fun d!13197 () Bool)

(assert (=> d!13197 (= c!8609 ((_ is ValueCellFull!863) (select (arr!1791 (array!3746 (store (arr!1791 (_values!2070 newMap!16)) (index!3018 lt!25967) (ValueCellFull!863 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2023 (_values!2070 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun e!41645 () V!2865)

(assert (=> d!13197 (= (get!1088 (select (arr!1791 (array!3746 (store (arr!1791 (_values!2070 newMap!16)) (index!3018 lt!25967) (ValueCellFull!863 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2023 (_values!2070 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!41645)))

(declare-fun b!63531 () Bool)

(assert (=> b!63531 (= e!41645 (get!1090 (select (arr!1791 (array!3746 (store (arr!1791 (_values!2070 newMap!16)) (index!3018 lt!25967) (ValueCellFull!863 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2023 (_values!2070 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!63532 () Bool)

(assert (=> b!63532 (= e!41645 (get!1091 (select (arr!1791 (array!3746 (store (arr!1791 (_values!2070 newMap!16)) (index!3018 lt!25967) (ValueCellFull!863 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2023 (_values!2070 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!13197 c!8609) b!63531))

(assert (= (and d!13197 (not c!8609)) b!63532))

(assert (=> b!63531 m!56491))

(assert (=> b!63531 m!56073))

(declare-fun m!57955 () Bool)

(assert (=> b!63531 m!57955))

(assert (=> b!63532 m!56491))

(assert (=> b!63532 m!56073))

(declare-fun m!57957 () Bool)

(assert (=> b!63532 m!57957))

(assert (=> b!62785 d!13197))

(declare-fun d!13199 () Bool)

(assert (=> d!13199 (= (apply!68 lt!26362 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1092 (getValueByKey!127 (toList!691 lt!26362) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2780 () Bool)

(assert (= bs!2780 d!13199))

(declare-fun m!57959 () Bool)

(assert (=> bs!2780 m!57959))

(assert (=> bs!2780 m!57959))

(declare-fun m!57961 () Bool)

(assert (=> bs!2780 m!57961))

(assert (=> b!62842 d!13199))

(declare-fun b!63551 () Bool)

(declare-fun lt!26816 () SeekEntryResult!223)

(assert (=> b!63551 (and (bvsge (index!3019 lt!26816) #b00000000000000000000000000000000) (bvslt (index!3019 lt!26816) (size!2022 (_keys!3719 newMap!16))))))

(declare-fun res!34755 () Bool)

(assert (=> b!63551 (= res!34755 (= (select (arr!1790 (_keys!3719 newMap!16)) (index!3019 lt!26816)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!41660 () Bool)

(assert (=> b!63551 (=> res!34755 e!41660)))

(declare-fun b!63552 () Bool)

(declare-fun e!41656 () Bool)

(assert (=> b!63552 (= e!41656 (bvsge (x!10301 lt!26816) #b01111111111111111111111111111110))))

(declare-fun b!63553 () Bool)

(declare-fun e!41658 () SeekEntryResult!223)

(declare-fun e!41659 () SeekEntryResult!223)

(assert (=> b!63553 (= e!41658 e!41659)))

(declare-fun c!8617 () Bool)

(declare-fun lt!26817 () (_ BitVec 64))

(assert (=> b!63553 (= c!8617 (or (= lt!26817 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) (= (bvadd lt!26817 lt!26817) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!63554 () Bool)

(assert (=> b!63554 (and (bvsge (index!3019 lt!26816) #b00000000000000000000000000000000) (bvslt (index!3019 lt!26816) (size!2022 (_keys!3719 newMap!16))))))

(assert (=> b!63554 (= e!41660 (= (select (arr!1790 (_keys!3719 newMap!16)) (index!3019 lt!26816)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63555 () Bool)

(assert (=> b!63555 (= e!41659 (seekKeyOrZeroOrLongMinValue!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (nextIndex!0 (toIndex!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (mask!5993 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (mask!5993 newMap!16)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (_keys!3719 newMap!16) (mask!5993 newMap!16)))))

(declare-fun b!63556 () Bool)

(assert (=> b!63556 (= e!41658 (Intermediate!223 true (toIndex!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (mask!5993 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!63557 () Bool)

(assert (=> b!63557 (and (bvsge (index!3019 lt!26816) #b00000000000000000000000000000000) (bvslt (index!3019 lt!26816) (size!2022 (_keys!3719 newMap!16))))))

(declare-fun res!34754 () Bool)

(assert (=> b!63557 (= res!34754 (= (select (arr!1790 (_keys!3719 newMap!16)) (index!3019 lt!26816)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> b!63557 (=> res!34754 e!41660)))

(declare-fun e!41657 () Bool)

(assert (=> b!63557 (= e!41657 e!41660)))

(declare-fun d!13201 () Bool)

(assert (=> d!13201 e!41656))

(declare-fun c!8618 () Bool)

(assert (=> d!13201 (= c!8618 (and ((_ is Intermediate!223) lt!26816) (undefined!1035 lt!26816)))))

(assert (=> d!13201 (= lt!26816 e!41658)))

(declare-fun c!8616 () Bool)

(assert (=> d!13201 (= c!8616 (bvsge #b00000000000000000000000000000000 #b01111111111111111111111111111110))))

(assert (=> d!13201 (= lt!26817 (select (arr!1790 (_keys!3719 newMap!16)) (toIndex!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (mask!5993 newMap!16))))))

(assert (=> d!13201 (validMask!0 (mask!5993 newMap!16))))

(assert (=> d!13201 (= (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (mask!5993 newMap!16)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (_keys!3719 newMap!16) (mask!5993 newMap!16)) lt!26816)))

(declare-fun b!63558 () Bool)

(assert (=> b!63558 (= e!41656 e!41657)))

(declare-fun res!34753 () Bool)

(assert (=> b!63558 (= res!34753 (and ((_ is Intermediate!223) lt!26816) (not (undefined!1035 lt!26816)) (bvslt (x!10301 lt!26816) #b01111111111111111111111111111110) (bvsge (x!10301 lt!26816) #b00000000000000000000000000000000) (bvsge (x!10301 lt!26816) #b00000000000000000000000000000000)))))

(assert (=> b!63558 (=> (not res!34753) (not e!41657))))

(declare-fun b!63559 () Bool)

(assert (=> b!63559 (= e!41659 (Intermediate!223 false (toIndex!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (mask!5993 newMap!16)) #b00000000000000000000000000000000))))

(assert (= (and d!13201 c!8616) b!63556))

(assert (= (and d!13201 (not c!8616)) b!63553))

(assert (= (and b!63553 c!8617) b!63559))

(assert (= (and b!63553 (not c!8617)) b!63555))

(assert (= (and d!13201 c!8618) b!63552))

(assert (= (and d!13201 (not c!8618)) b!63558))

(assert (= (and b!63558 res!34753) b!63557))

(assert (= (and b!63557 (not res!34754)) b!63551))

(assert (= (and b!63551 (not res!34755)) b!63554))

(assert (=> b!63555 m!56313))

(declare-fun m!57963 () Bool)

(assert (=> b!63555 m!57963))

(assert (=> b!63555 m!57963))

(assert (=> b!63555 m!55703))

(declare-fun m!57965 () Bool)

(assert (=> b!63555 m!57965))

(assert (=> d!13201 m!56313))

(declare-fun m!57967 () Bool)

(assert (=> d!13201 m!57967))

(assert (=> d!13201 m!55995))

(declare-fun m!57969 () Bool)

(assert (=> b!63554 m!57969))

(assert (=> b!63551 m!57969))

(assert (=> b!63557 m!57969))

(assert (=> d!12717 d!13201))

(declare-fun d!13203 () Bool)

(declare-fun lt!26823 () (_ BitVec 32))

(declare-fun lt!26822 () (_ BitVec 32))

(assert (=> d!13203 (= lt!26823 (bvmul (bvxor lt!26822 (bvlshr lt!26822 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))))

(assert (=> d!13203 (= lt!26822 ((_ extract 31 0) (bvand (bvxor (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (bvlshr (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))))

(assert (=> d!13203 (and (bvsge (mask!5993 newMap!16) #b00000000000000000000000000000000) (let ((res!34756 (let ((h!2012 ((_ extract 31 0) (bvand (bvxor (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (bvlshr (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))) (let ((x!10405 (bvmul (bvxor h!2012 (bvlshr h!2012 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))) (bvand (bvxor x!10405 (bvlshr x!10405 #b00000000000000000000000000001101)) (mask!5993 newMap!16)))))) (and (bvslt res!34756 (bvadd (mask!5993 newMap!16) #b00000000000000000000000000000001)) (bvsge res!34756 #b00000000000000000000000000000000))))))

(assert (=> d!13203 (= (toIndex!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (mask!5993 newMap!16)) (bvand (bvxor lt!26823 (bvlshr lt!26823 #b00000000000000000000000000001101)) (mask!5993 newMap!16)))))

(assert (=> d!12717 d!13203))

(assert (=> d!12717 d!12793))

(declare-fun d!13205 () Bool)

(declare-fun res!34758 () Bool)

(declare-fun e!41664 () Bool)

(assert (=> d!13205 (=> res!34758 e!41664)))

(assert (=> d!13205 (= res!34758 (bvsge #b00000000000000000000000000000000 (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992))))))))

(assert (=> d!13205 (= (arrayNoDuplicates!0 (_keys!3719 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000000 Nil!1427) e!41664)))

(declare-fun b!63560 () Bool)

(declare-fun e!41662 () Bool)

(declare-fun call!5041 () Bool)

(assert (=> b!63560 (= e!41662 call!5041)))

(declare-fun b!63561 () Bool)

(declare-fun e!41661 () Bool)

(assert (=> b!63561 (= e!41661 (contains!688 Nil!1427 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!63562 () Bool)

(declare-fun e!41663 () Bool)

(assert (=> b!63562 (= e!41663 e!41662)))

(declare-fun c!8619 () Bool)

(assert (=> b!63562 (= c!8619 (validKeyInArray!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun bm!5038 () Bool)

(assert (=> bm!5038 (= call!5041 (arrayNoDuplicates!0 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!8619 (Cons!1426 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) #b00000000000000000000000000000000) Nil!1427) Nil!1427)))))

(declare-fun b!63563 () Bool)

(assert (=> b!63563 (= e!41662 call!5041)))

(declare-fun b!63564 () Bool)

(assert (=> b!63564 (= e!41664 e!41663)))

(declare-fun res!34759 () Bool)

(assert (=> b!63564 (=> (not res!34759) (not e!41663))))

(assert (=> b!63564 (= res!34759 (not e!41661))))

(declare-fun res!34757 () Bool)

(assert (=> b!63564 (=> (not res!34757) (not e!41661))))

(assert (=> b!63564 (= res!34757 (validKeyInArray!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) #b00000000000000000000000000000000)))))

(assert (= (and d!13205 (not res!34758)) b!63564))

(assert (= (and b!63564 res!34757) b!63561))

(assert (= (and b!63564 res!34759) b!63562))

(assert (= (and b!63562 c!8619) b!63563))

(assert (= (and b!63562 (not c!8619)) b!63560))

(assert (= (or b!63563 b!63560) bm!5038))

(assert (=> b!63561 m!56823))

(assert (=> b!63561 m!56823))

(declare-fun m!57971 () Bool)

(assert (=> b!63561 m!57971))

(assert (=> b!63562 m!56823))

(assert (=> b!63562 m!56823))

(assert (=> b!63562 m!56825))

(assert (=> bm!5038 m!56823))

(declare-fun m!57973 () Bool)

(assert (=> bm!5038 m!57973))

(assert (=> b!63564 m!56823))

(assert (=> b!63564 m!56823))

(assert (=> b!63564 m!56825))

(assert (=> b!62705 d!13205))

(declare-fun d!13207 () Bool)

(declare-fun e!41665 () Bool)

(assert (=> d!13207 e!41665))

(declare-fun res!34760 () Bool)

(assert (=> d!13207 (=> (not res!34760) (not e!41665))))

(declare-fun lt!26825 () ListLongMap!1351)

(assert (=> d!13207 (= res!34760 (contains!686 lt!26825 (_1!1027 (ite (or c!8414 c!8416) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))))

(declare-fun lt!26826 () List!1429)

(assert (=> d!13207 (= lt!26825 (ListLongMap!1352 lt!26826))))

(declare-fun lt!26824 () Unit!1680)

(declare-fun lt!26827 () Unit!1680)

(assert (=> d!13207 (= lt!26824 lt!26827)))

(assert (=> d!13207 (= (getValueByKey!127 lt!26826 (_1!1027 (ite (or c!8414 c!8416) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))) (Some!132 (_2!1027 (ite (or c!8414 c!8416) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))))

(assert (=> d!13207 (= lt!26827 (lemmaContainsTupThenGetReturnValue!44 lt!26826 (_1!1027 (ite (or c!8414 c!8416) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))) (_2!1027 (ite (or c!8414 c!8416) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))))

(assert (=> d!13207 (= lt!26826 (insertStrictlySorted!47 (toList!691 (ite c!8414 call!4958 (ite c!8416 call!4954 call!4957))) (_1!1027 (ite (or c!8414 c!8416) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))) (_2!1027 (ite (or c!8414 c!8416) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))))

(assert (=> d!13207 (= (+!82 (ite c!8414 call!4958 (ite c!8416 call!4954 call!4957)) (ite (or c!8414 c!8416) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))) lt!26825)))

(declare-fun b!63565 () Bool)

(declare-fun res!34761 () Bool)

(assert (=> b!63565 (=> (not res!34761) (not e!41665))))

(assert (=> b!63565 (= res!34761 (= (getValueByKey!127 (toList!691 lt!26825) (_1!1027 (ite (or c!8414 c!8416) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))) (Some!132 (_2!1027 (ite (or c!8414 c!8416) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))))

(declare-fun b!63566 () Bool)

(assert (=> b!63566 (= e!41665 (contains!689 (toList!691 lt!26825) (ite (or c!8414 c!8416) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(assert (= (and d!13207 res!34760) b!63565))

(assert (= (and b!63565 res!34761) b!63566))

(declare-fun m!57975 () Bool)

(assert (=> d!13207 m!57975))

(declare-fun m!57977 () Bool)

(assert (=> d!13207 m!57977))

(declare-fun m!57979 () Bool)

(assert (=> d!13207 m!57979))

(declare-fun m!57981 () Bool)

(assert (=> d!13207 m!57981))

(declare-fun m!57983 () Bool)

(assert (=> b!63565 m!57983))

(declare-fun m!57985 () Bool)

(assert (=> b!63566 m!57985))

(assert (=> bm!4951 d!13207))

(declare-fun d!13209 () Bool)

(assert (=> d!13209 (= (inRange!0 (ite c!8388 (index!3018 lt!26292) (ite c!8387 (index!3017 lt!26285) (index!3020 lt!26285))) (mask!5993 newMap!16)) (and (bvsge (ite c!8388 (index!3018 lt!26292) (ite c!8387 (index!3017 lt!26285) (index!3020 lt!26285))) #b00000000000000000000000000000000) (bvslt (ite c!8388 (index!3018 lt!26292) (ite c!8387 (index!3017 lt!26285) (index!3020 lt!26285))) (bvadd (mask!5993 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4931 d!13209))

(declare-fun d!13211 () Bool)

(declare-fun e!41667 () Bool)

(assert (=> d!13211 e!41667))

(declare-fun res!34762 () Bool)

(assert (=> d!13211 (=> res!34762 e!41667)))

(declare-fun lt!26829 () Bool)

(assert (=> d!13211 (= res!34762 (not lt!26829))))

(declare-fun lt!26830 () Bool)

(assert (=> d!13211 (= lt!26829 lt!26830)))

(declare-fun lt!26828 () Unit!1680)

(declare-fun e!41666 () Unit!1680)

(assert (=> d!13211 (= lt!26828 e!41666)))

(declare-fun c!8620 () Bool)

(assert (=> d!13211 (= c!8620 lt!26830)))

(assert (=> d!13211 (= lt!26830 (containsKey!130 (toList!691 lt!26166) (_1!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!13211 (= (contains!686 lt!26166 (_1!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26829)))

(declare-fun b!63567 () Bool)

(declare-fun lt!26831 () Unit!1680)

(assert (=> b!63567 (= e!41666 lt!26831)))

(assert (=> b!63567 (= lt!26831 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 lt!26166) (_1!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> b!63567 (isDefined!79 (getValueByKey!127 (toList!691 lt!26166) (_1!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63568 () Bool)

(declare-fun Unit!1737 () Unit!1680)

(assert (=> b!63568 (= e!41666 Unit!1737)))

(declare-fun b!63569 () Bool)

(assert (=> b!63569 (= e!41667 (isDefined!79 (getValueByKey!127 (toList!691 lt!26166) (_1!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(assert (= (and d!13211 c!8620) b!63567))

(assert (= (and d!13211 (not c!8620)) b!63568))

(assert (= (and d!13211 (not res!34762)) b!63569))

(declare-fun m!57987 () Bool)

(assert (=> d!13211 m!57987))

(declare-fun m!57989 () Bool)

(assert (=> b!63567 m!57989))

(assert (=> b!63567 m!56237))

(assert (=> b!63567 m!56237))

(declare-fun m!57991 () Bool)

(assert (=> b!63567 m!57991))

(assert (=> b!63569 m!56237))

(assert (=> b!63569 m!56237))

(assert (=> b!63569 m!57991))

(assert (=> d!12707 d!13211))

(declare-fun b!63570 () Bool)

(declare-fun e!41668 () Option!133)

(assert (=> b!63570 (= e!41668 (Some!132 (_2!1027 (h!2008 lt!26167))))))

(declare-fun c!8621 () Bool)

(declare-fun d!13213 () Bool)

(assert (=> d!13213 (= c!8621 (and ((_ is Cons!1425) lt!26167) (= (_1!1027 (h!2008 lt!26167)) (_1!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> d!13213 (= (getValueByKey!127 lt!26167 (_1!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) e!41668)))

(declare-fun b!63571 () Bool)

(declare-fun e!41669 () Option!133)

(assert (=> b!63571 (= e!41668 e!41669)))

(declare-fun c!8622 () Bool)

(assert (=> b!63571 (= c!8622 (and ((_ is Cons!1425) lt!26167) (not (= (_1!1027 (h!2008 lt!26167)) (_1!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))))

(declare-fun b!63572 () Bool)

(assert (=> b!63572 (= e!41669 (getValueByKey!127 (t!4815 lt!26167) (_1!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63573 () Bool)

(assert (=> b!63573 (= e!41669 None!131)))

(assert (= (and d!13213 c!8621) b!63570))

(assert (= (and d!13213 (not c!8621)) b!63571))

(assert (= (and b!63571 c!8622) b!63572))

(assert (= (and b!63571 (not c!8622)) b!63573))

(declare-fun m!57993 () Bool)

(assert (=> b!63572 m!57993))

(assert (=> d!12707 d!13213))

(declare-fun d!13215 () Bool)

(assert (=> d!13215 (= (getValueByKey!127 lt!26167 (_1!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) (Some!132 (_2!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun lt!26832 () Unit!1680)

(assert (=> d!13215 (= lt!26832 (choose!346 lt!26167 (_1!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun e!41670 () Bool)

(assert (=> d!13215 e!41670))

(declare-fun res!34763 () Bool)

(assert (=> d!13215 (=> (not res!34763) (not e!41670))))

(assert (=> d!13215 (= res!34763 (isStrictlySorted!273 lt!26167))))

(assert (=> d!13215 (= (lemmaContainsTupThenGetReturnValue!44 lt!26167 (_1!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26832)))

(declare-fun b!63574 () Bool)

(declare-fun res!34764 () Bool)

(assert (=> b!63574 (=> (not res!34764) (not e!41670))))

(assert (=> b!63574 (= res!34764 (containsKey!130 lt!26167 (_1!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63575 () Bool)

(assert (=> b!63575 (= e!41670 (contains!689 lt!26167 (tuple2!2033 (_1!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(assert (= (and d!13215 res!34763) b!63574))

(assert (= (and b!63574 res!34764) b!63575))

(assert (=> d!13215 m!56231))

(declare-fun m!57995 () Bool)

(assert (=> d!13215 m!57995))

(declare-fun m!57997 () Bool)

(assert (=> d!13215 m!57997))

(declare-fun m!57999 () Bool)

(assert (=> b!63574 m!57999))

(declare-fun m!58001 () Bool)

(assert (=> b!63575 m!58001))

(assert (=> d!12707 d!13215))

(declare-fun b!63576 () Bool)

(declare-fun lt!26833 () List!1429)

(declare-fun e!41674 () Bool)

(assert (=> b!63576 (= e!41674 (contains!689 lt!26833 (tuple2!2033 (_1!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!63577 () Bool)

(declare-fun res!34766 () Bool)

(assert (=> b!63577 (=> (not res!34766) (not e!41674))))

(assert (=> b!63577 (= res!34766 (containsKey!130 lt!26833 (_1!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun bm!5039 () Bool)

(declare-fun call!5044 () List!1429)

(declare-fun call!5042 () List!1429)

(assert (=> bm!5039 (= call!5044 call!5042)))

(declare-fun bm!5040 () Bool)

(declare-fun call!5043 () List!1429)

(assert (=> bm!5040 (= call!5042 call!5043)))

(declare-fun c!8623 () Bool)

(declare-fun b!63578 () Bool)

(assert (=> b!63578 (= c!8623 (and ((_ is Cons!1425) (toList!691 lt!26043)) (bvsgt (_1!1027 (h!2008 (toList!691 lt!26043))) (_1!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun e!41672 () List!1429)

(declare-fun e!41675 () List!1429)

(assert (=> b!63578 (= e!41672 e!41675)))

(declare-fun d!13217 () Bool)

(assert (=> d!13217 e!41674))

(declare-fun res!34765 () Bool)

(assert (=> d!13217 (=> (not res!34765) (not e!41674))))

(assert (=> d!13217 (= res!34765 (isStrictlySorted!273 lt!26833))))

(declare-fun e!41671 () List!1429)

(assert (=> d!13217 (= lt!26833 e!41671)))

(declare-fun c!8624 () Bool)

(assert (=> d!13217 (= c!8624 (and ((_ is Cons!1425) (toList!691 lt!26043)) (bvslt (_1!1027 (h!2008 (toList!691 lt!26043))) (_1!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> d!13217 (isStrictlySorted!273 (toList!691 lt!26043))))

(assert (=> d!13217 (= (insertStrictlySorted!47 (toList!691 lt!26043) (_1!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26833)))

(declare-fun e!41673 () List!1429)

(declare-fun bm!5041 () Bool)

(assert (=> bm!5041 (= call!5043 ($colon$colon!61 e!41673 (ite c!8624 (h!2008 (toList!691 lt!26043)) (tuple2!2033 (_1!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))))

(declare-fun c!8626 () Bool)

(assert (=> bm!5041 (= c!8626 c!8624)))

(declare-fun b!63579 () Bool)

(assert (=> b!63579 (= e!41672 call!5042)))

(declare-fun b!63580 () Bool)

(assert (=> b!63580 (= e!41673 (insertStrictlySorted!47 (t!4815 (toList!691 lt!26043)) (_1!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63581 () Bool)

(assert (=> b!63581 (= e!41671 call!5043)))

(declare-fun b!63582 () Bool)

(assert (=> b!63582 (= e!41671 e!41672)))

(declare-fun c!8625 () Bool)

(assert (=> b!63582 (= c!8625 (and ((_ is Cons!1425) (toList!691 lt!26043)) (= (_1!1027 (h!2008 (toList!691 lt!26043))) (_1!1027 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!63583 () Bool)

(assert (=> b!63583 (= e!41675 call!5044)))

(declare-fun b!63584 () Bool)

(assert (=> b!63584 (= e!41673 (ite c!8625 (t!4815 (toList!691 lt!26043)) (ite c!8623 (Cons!1425 (h!2008 (toList!691 lt!26043)) (t!4815 (toList!691 lt!26043))) Nil!1426)))))

(declare-fun b!63585 () Bool)

(assert (=> b!63585 (= e!41675 call!5044)))

(assert (= (and d!13217 c!8624) b!63581))

(assert (= (and d!13217 (not c!8624)) b!63582))

(assert (= (and b!63582 c!8625) b!63579))

(assert (= (and b!63582 (not c!8625)) b!63578))

(assert (= (and b!63578 c!8623) b!63585))

(assert (= (and b!63578 (not c!8623)) b!63583))

(assert (= (or b!63585 b!63583) bm!5039))

(assert (= (or b!63579 bm!5039) bm!5040))

(assert (= (or b!63581 bm!5040) bm!5041))

(assert (= (and bm!5041 c!8626) b!63580))

(assert (= (and bm!5041 (not c!8626)) b!63584))

(assert (= (and d!13217 res!34765) b!63577))

(assert (= (and b!63577 res!34766) b!63576))

(declare-fun m!58003 () Bool)

(assert (=> b!63577 m!58003))

(declare-fun m!58005 () Bool)

(assert (=> bm!5041 m!58005))

(declare-fun m!58007 () Bool)

(assert (=> b!63580 m!58007))

(declare-fun m!58009 () Bool)

(assert (=> b!63576 m!58009))

(declare-fun m!58011 () Bool)

(assert (=> d!13217 m!58011))

(declare-fun m!58013 () Bool)

(assert (=> d!13217 m!58013))

(assert (=> d!12707 d!13217))

(assert (=> b!62636 d!12831))

(declare-fun d!13219 () Bool)

(declare-fun lt!26834 () Bool)

(assert (=> d!13219 (= lt!26834 (select (content!69 (toList!691 lt!26217)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun e!41677 () Bool)

(assert (=> d!13219 (= lt!26834 e!41677)))

(declare-fun res!34767 () Bool)

(assert (=> d!13219 (=> (not res!34767) (not e!41677))))

(assert (=> d!13219 (= res!34767 ((_ is Cons!1425) (toList!691 lt!26217)))))

(assert (=> d!13219 (= (contains!689 (toList!691 lt!26217) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) lt!26834)))

(declare-fun b!63586 () Bool)

(declare-fun e!41676 () Bool)

(assert (=> b!63586 (= e!41677 e!41676)))

(declare-fun res!34768 () Bool)

(assert (=> b!63586 (=> res!34768 e!41676)))

(assert (=> b!63586 (= res!34768 (= (h!2008 (toList!691 lt!26217)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun b!63587 () Bool)

(assert (=> b!63587 (= e!41676 (contains!689 (t!4815 (toList!691 lt!26217)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))

(assert (= (and d!13219 res!34767) b!63586))

(assert (= (and b!63586 (not res!34768)) b!63587))

(declare-fun m!58015 () Bool)

(assert (=> d!13219 m!58015))

(declare-fun m!58017 () Bool)

(assert (=> d!13219 m!58017))

(declare-fun m!58019 () Bool)

(assert (=> b!63587 m!58019))

(assert (=> b!62702 d!13219))

(declare-fun d!13221 () Bool)

(declare-fun e!41679 () Bool)

(assert (=> d!13221 e!41679))

(declare-fun res!34769 () Bool)

(assert (=> d!13221 (=> res!34769 e!41679)))

(declare-fun lt!26836 () Bool)

(assert (=> d!13221 (= res!34769 (not lt!26836))))

(declare-fun lt!26837 () Bool)

(assert (=> d!13221 (= lt!26836 lt!26837)))

(declare-fun lt!26835 () Unit!1680)

(declare-fun e!41678 () Unit!1680)

(assert (=> d!13221 (= lt!26835 e!41678)))

(declare-fun c!8627 () Bool)

(assert (=> d!13221 (= c!8627 lt!26837)))

(assert (=> d!13221 (= lt!26837 (containsKey!130 (toList!691 lt!26323) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!13221 (= (contains!686 lt!26323 #b0000000000000000000000000000000000000000000000000000000000000000) lt!26836)))

(declare-fun b!63588 () Bool)

(declare-fun lt!26838 () Unit!1680)

(assert (=> b!63588 (= e!41678 lt!26838)))

(assert (=> b!63588 (= lt!26838 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 lt!26323) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63588 (isDefined!79 (getValueByKey!127 (toList!691 lt!26323) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63589 () Bool)

(declare-fun Unit!1738 () Unit!1680)

(assert (=> b!63589 (= e!41678 Unit!1738)))

(declare-fun b!63590 () Bool)

(assert (=> b!63590 (= e!41679 (isDefined!79 (getValueByKey!127 (toList!691 lt!26323) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!13221 c!8627) b!63588))

(assert (= (and d!13221 (not c!8627)) b!63589))

(assert (= (and d!13221 (not res!34769)) b!63590))

(declare-fun m!58021 () Bool)

(assert (=> d!13221 m!58021))

(declare-fun m!58023 () Bool)

(assert (=> b!63588 m!58023))

(assert (=> b!63588 m!56705))

(assert (=> b!63588 m!56705))

(declare-fun m!58025 () Bool)

(assert (=> b!63588 m!58025))

(assert (=> b!63590 m!56705))

(assert (=> b!63590 m!56705))

(assert (=> b!63590 m!58025))

(assert (=> bm!4942 d!13221))

(declare-fun d!13223 () Bool)

(declare-fun e!41681 () Bool)

(assert (=> d!13223 e!41681))

(declare-fun res!34770 () Bool)

(assert (=> d!13223 (=> res!34770 e!41681)))

(declare-fun lt!26840 () Bool)

(assert (=> d!13223 (= res!34770 (not lt!26840))))

(declare-fun lt!26841 () Bool)

(assert (=> d!13223 (= lt!26840 lt!26841)))

(declare-fun lt!26839 () Unit!1680)

(declare-fun e!41680 () Unit!1680)

(assert (=> d!13223 (= lt!26839 e!41680)))

(declare-fun c!8628 () Bool)

(assert (=> d!13223 (= c!8628 lt!26841)))

(assert (=> d!13223 (= lt!26841 (containsKey!130 (toList!691 (map!1117 (_2!1026 lt!26286))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> d!13223 (= (contains!686 (map!1117 (_2!1026 lt!26286)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) lt!26840)))

(declare-fun b!63591 () Bool)

(declare-fun lt!26842 () Unit!1680)

(assert (=> b!63591 (= e!41680 lt!26842)))

(assert (=> b!63591 (= lt!26842 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 (map!1117 (_2!1026 lt!26286))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> b!63591 (isDefined!79 (getValueByKey!127 (toList!691 (map!1117 (_2!1026 lt!26286))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun b!63592 () Bool)

(declare-fun Unit!1739 () Unit!1680)

(assert (=> b!63592 (= e!41680 Unit!1739)))

(declare-fun b!63593 () Bool)

(assert (=> b!63593 (= e!41681 (isDefined!79 (getValueByKey!127 (toList!691 (map!1117 (_2!1026 lt!26286))) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355))))))

(assert (= (and d!13223 c!8628) b!63591))

(assert (= (and d!13223 (not c!8628)) b!63592))

(assert (= (and d!13223 (not res!34770)) b!63593))

(assert (=> d!13223 m!55703))

(declare-fun m!58027 () Bool)

(assert (=> d!13223 m!58027))

(assert (=> b!63591 m!55703))

(declare-fun m!58029 () Bool)

(assert (=> b!63591 m!58029))

(assert (=> b!63591 m!55703))

(declare-fun m!58031 () Bool)

(assert (=> b!63591 m!58031))

(assert (=> b!63591 m!58031))

(declare-fun m!58033 () Bool)

(assert (=> b!63591 m!58033))

(assert (=> b!63593 m!55703))

(assert (=> b!63593 m!58031))

(assert (=> b!63593 m!58031))

(assert (=> b!63593 m!58033))

(assert (=> b!62753 d!13223))

(assert (=> b!62753 d!12839))

(declare-fun d!13225 () Bool)

(declare-fun lt!26843 () Bool)

(assert (=> d!13225 (= lt!26843 (select (content!68 (ite c!8326 (Cons!1426 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1427) Nil!1427)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun e!41683 () Bool)

(assert (=> d!13225 (= lt!26843 e!41683)))

(declare-fun res!34772 () Bool)

(assert (=> d!13225 (=> (not res!34772) (not e!41683))))

(assert (=> d!13225 (= res!34772 ((_ is Cons!1426) (ite c!8326 (Cons!1426 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1427) Nil!1427)))))

(assert (=> d!13225 (= (contains!688 (ite c!8326 (Cons!1426 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1427) Nil!1427) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) lt!26843)))

(declare-fun b!63594 () Bool)

(declare-fun e!41682 () Bool)

(assert (=> b!63594 (= e!41683 e!41682)))

(declare-fun res!34771 () Bool)

(assert (=> b!63594 (=> res!34771 e!41682)))

(assert (=> b!63594 (= res!34771 (= (h!2009 (ite c!8326 (Cons!1426 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1427) Nil!1427)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!63595 () Bool)

(assert (=> b!63595 (= e!41682 (contains!688 (t!4816 (ite c!8326 (Cons!1426 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1427) Nil!1427)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(assert (= (and d!13225 res!34772) b!63594))

(assert (= (and b!63594 (not res!34771)) b!63595))

(declare-fun m!58035 () Bool)

(assert (=> d!13225 m!58035))

(assert (=> d!13225 m!56299))

(declare-fun m!58037 () Bool)

(assert (=> d!13225 m!58037))

(assert (=> b!63595 m!56299))

(declare-fun m!58039 () Bool)

(assert (=> b!63595 m!58039))

(assert (=> b!62655 d!13225))

(declare-fun bm!5042 () Bool)

(declare-fun call!5045 () ListLongMap!1351)

(assert (=> bm!5042 (= call!5045 (getCurrentListMapNoExtraKeys!46 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (_values!2070 (v!2419 (underlying!233 thiss!992))) (mask!5993 (v!2419 (underlying!233 thiss!992))) (extraKeys!1966 (v!2419 (underlying!233 thiss!992))) (zeroValue!1999 (v!2419 (underlying!233 thiss!992))) (minValue!1999 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2087 (v!2419 (underlying!233 thiss!992)))))))

(declare-fun b!63596 () Bool)

(declare-fun e!41684 () Bool)

(assert (=> b!63596 (= e!41684 (validKeyInArray!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!63596 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))

(declare-fun b!63597 () Bool)

(declare-fun e!41688 () ListLongMap!1351)

(declare-fun e!41690 () ListLongMap!1351)

(assert (=> b!63597 (= e!41688 e!41690)))

(declare-fun c!8631 () Bool)

(assert (=> b!63597 (= c!8631 (validKeyInArray!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(declare-fun b!63598 () Bool)

(declare-fun e!41689 () Bool)

(declare-fun e!41687 () Bool)

(assert (=> b!63598 (= e!41689 e!41687)))

(assert (=> b!63598 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun lt!26846 () ListLongMap!1351)

(declare-fun res!34773 () Bool)

(assert (=> b!63598 (= res!34773 (contains!686 lt!26846 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!63598 (=> (not res!34773) (not e!41687))))

(declare-fun b!63599 () Bool)

(assert (=> b!63599 (= e!41688 (ListLongMap!1352 Nil!1426))))

(declare-fun b!63600 () Bool)

(declare-fun e!41685 () Bool)

(assert (=> b!63600 (= e!41689 e!41685)))

(declare-fun c!8630 () Bool)

(assert (=> b!63600 (= c!8630 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun b!63601 () Bool)

(assert (=> b!63601 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992))))))))

(assert (=> b!63601 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2023 (_values!2070 (v!2419 (underlying!233 thiss!992))))))))

(assert (=> b!63601 (= e!41687 (= (apply!68 lt!26846 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!63602 () Bool)

(declare-fun e!41686 () Bool)

(assert (=> b!63602 (= e!41686 e!41689)))

(declare-fun c!8632 () Bool)

(assert (=> b!63602 (= c!8632 e!41684)))

(declare-fun res!34776 () Bool)

(assert (=> b!63602 (=> (not res!34776) (not e!41684))))

(assert (=> b!63602 (= res!34776 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun b!63604 () Bool)

(assert (=> b!63604 (= e!41685 (= lt!26846 (getCurrentListMapNoExtraKeys!46 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (_values!2070 (v!2419 (underlying!233 thiss!992))) (mask!5993 (v!2419 (underlying!233 thiss!992))) (extraKeys!1966 (v!2419 (underlying!233 thiss!992))) (zeroValue!1999 (v!2419 (underlying!233 thiss!992))) (minValue!1999 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun b!63605 () Bool)

(assert (=> b!63605 (= e!41690 call!5045)))

(declare-fun b!63606 () Bool)

(declare-fun lt!26848 () Unit!1680)

(declare-fun lt!26845 () Unit!1680)

(assert (=> b!63606 (= lt!26848 lt!26845)))

(declare-fun lt!26847 () (_ BitVec 64))

(declare-fun lt!26850 () ListLongMap!1351)

(declare-fun lt!26844 () (_ BitVec 64))

(declare-fun lt!26849 () V!2865)

(assert (=> b!63606 (not (contains!686 (+!82 lt!26850 (tuple2!2033 lt!26847 lt!26849)) lt!26844))))

(assert (=> b!63606 (= lt!26845 (addStillNotContains!19 lt!26850 lt!26847 lt!26849 lt!26844))))

(assert (=> b!63606 (= lt!26844 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!63606 (= lt!26849 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!63606 (= lt!26847 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (=> b!63606 (= lt!26850 call!5045)))

(assert (=> b!63606 (= e!41690 (+!82 call!5045 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!63607 () Bool)

(declare-fun res!34775 () Bool)

(assert (=> b!63607 (=> (not res!34775) (not e!41686))))

(assert (=> b!63607 (= res!34775 (not (contains!686 lt!26846 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!63603 () Bool)

(assert (=> b!63603 (= e!41685 (isEmpty!305 lt!26846))))

(declare-fun d!13227 () Bool)

(assert (=> d!13227 e!41686))

(declare-fun res!34774 () Bool)

(assert (=> d!13227 (=> (not res!34774) (not e!41686))))

(assert (=> d!13227 (= res!34774 (not (contains!686 lt!26846 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!13227 (= lt!26846 e!41688)))

(declare-fun c!8629 () Bool)

(assert (=> d!13227 (= c!8629 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992))))))))

(assert (=> d!13227 (validMask!0 (mask!5993 (v!2419 (underlying!233 thiss!992))))))

(assert (=> d!13227 (= (getCurrentListMapNoExtraKeys!46 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (_values!2070 (v!2419 (underlying!233 thiss!992))) (mask!5993 (v!2419 (underlying!233 thiss!992))) (extraKeys!1966 (v!2419 (underlying!233 thiss!992))) (zeroValue!1999 (v!2419 (underlying!233 thiss!992))) (minValue!1999 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2087 (v!2419 (underlying!233 thiss!992)))) lt!26846)))

(assert (= (and d!13227 c!8629) b!63599))

(assert (= (and d!13227 (not c!8629)) b!63597))

(assert (= (and b!63597 c!8631) b!63606))

(assert (= (and b!63597 (not c!8631)) b!63605))

(assert (= (or b!63606 b!63605) bm!5042))

(assert (= (and d!13227 res!34774) b!63607))

(assert (= (and b!63607 res!34775) b!63602))

(assert (= (and b!63602 res!34776) b!63596))

(assert (= (and b!63602 c!8632) b!63598))

(assert (= (and b!63602 (not c!8632)) b!63600))

(assert (= (and b!63598 res!34773) b!63601))

(assert (= (and b!63600 c!8630) b!63604))

(assert (= (and b!63600 (not c!8630)) b!63603))

(declare-fun b_lambda!2839 () Bool)

(assert (=> (not b_lambda!2839) (not b!63601)))

(assert (=> b!63601 t!4812))

(declare-fun b_and!3897 () Bool)

(assert (= b_and!3893 (and (=> t!4812 result!2435) b_and!3897)))

(assert (=> b!63601 t!4814))

(declare-fun b_and!3899 () Bool)

(assert (= b_and!3895 (and (=> t!4814 result!2439) b_and!3899)))

(declare-fun b_lambda!2841 () Bool)

(assert (=> (not b_lambda!2841) (not b!63606)))

(assert (=> b!63606 t!4812))

(declare-fun b_and!3901 () Bool)

(assert (= b_and!3897 (and (=> t!4812 result!2435) b_and!3901)))

(assert (=> b!63606 t!4814))

(declare-fun b_and!3903 () Bool)

(assert (= b_and!3899 (and (=> t!4814 result!2439) b_and!3903)))

(assert (=> b!63601 m!55699))

(assert (=> b!63601 m!56009))

(declare-fun m!58041 () Bool)

(assert (=> b!63601 m!58041))

(declare-fun m!58043 () Bool)

(assert (=> b!63601 m!58043))

(assert (=> b!63601 m!55699))

(declare-fun m!58045 () Bool)

(assert (=> b!63601 m!58045))

(assert (=> b!63601 m!56009))

(assert (=> b!63601 m!58043))

(declare-fun m!58047 () Bool)

(assert (=> b!63606 m!58047))

(declare-fun m!58049 () Bool)

(assert (=> b!63606 m!58049))

(declare-fun m!58051 () Bool)

(assert (=> b!63606 m!58051))

(assert (=> b!63606 m!58043))

(assert (=> b!63606 m!55699))

(assert (=> b!63606 m!58045))

(declare-fun m!58053 () Bool)

(assert (=> b!63606 m!58053))

(assert (=> b!63606 m!56009))

(assert (=> b!63606 m!58043))

(assert (=> b!63606 m!58047))

(assert (=> b!63606 m!55699))

(declare-fun m!58055 () Bool)

(assert (=> b!63604 m!58055))

(declare-fun m!58057 () Bool)

(assert (=> b!63607 m!58057))

(declare-fun m!58059 () Bool)

(assert (=> b!63603 m!58059))

(assert (=> b!63597 m!56009))

(assert (=> b!63597 m!56009))

(declare-fun m!58061 () Bool)

(assert (=> b!63597 m!58061))

(assert (=> bm!5042 m!58055))

(assert (=> b!63598 m!56009))

(assert (=> b!63598 m!56009))

(declare-fun m!58063 () Bool)

(assert (=> b!63598 m!58063))

(declare-fun m!58065 () Bool)

(assert (=> d!13227 m!58065))

(assert (=> d!13227 m!55695))

(assert (=> b!63596 m!56009))

(assert (=> b!63596 m!56009))

(assert (=> b!63596 m!58061))

(assert (=> bm!4913 d!13227))

(declare-fun d!13229 () Bool)

(assert (=> d!13229 (= (apply!68 lt!26175 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)) (get!1092 (getValueByKey!127 (toList!691 lt!26175) (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2781 () Bool)

(assert (= bs!2781 d!13229))

(assert (=> bs!2781 m!56033))

(assert (=> bs!2781 m!57689))

(assert (=> bs!2781 m!57689))

(declare-fun m!58067 () Bool)

(assert (=> bs!2781 m!58067))

(assert (=> b!62641 d!13229))

(assert (=> b!62641 d!13007))

(declare-fun d!13231 () Bool)

(declare-fun e!41692 () Bool)

(assert (=> d!13231 e!41692))

(declare-fun res!34777 () Bool)

(assert (=> d!13231 (=> res!34777 e!41692)))

(declare-fun lt!26852 () Bool)

(assert (=> d!13231 (= res!34777 (not lt!26852))))

(declare-fun lt!26853 () Bool)

(assert (=> d!13231 (= lt!26852 lt!26853)))

(declare-fun lt!26851 () Unit!1680)

(declare-fun e!41691 () Unit!1680)

(assert (=> d!13231 (= lt!26851 e!41691)))

(declare-fun c!8633 () Bool)

(assert (=> d!13231 (= c!8633 lt!26853)))

(assert (=> d!13231 (= lt!26853 (containsKey!130 (toList!691 lt!26077) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!13231 (= (contains!686 lt!26077 #b1000000000000000000000000000000000000000000000000000000000000000) lt!26852)))

(declare-fun b!63608 () Bool)

(declare-fun lt!26854 () Unit!1680)

(assert (=> b!63608 (= e!41691 lt!26854)))

(assert (=> b!63608 (= lt!26854 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 lt!26077) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63608 (isDefined!79 (getValueByKey!127 (toList!691 lt!26077) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63609 () Bool)

(declare-fun Unit!1740 () Unit!1680)

(assert (=> b!63609 (= e!41691 Unit!1740)))

(declare-fun b!63610 () Bool)

(assert (=> b!63610 (= e!41692 (isDefined!79 (getValueByKey!127 (toList!691 lt!26077) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!13231 c!8633) b!63608))

(assert (= (and d!13231 (not c!8633)) b!63609))

(assert (= (and d!13231 (not res!34777)) b!63610))

(declare-fun m!58069 () Bool)

(assert (=> d!13231 m!58069))

(declare-fun m!58071 () Bool)

(assert (=> b!63608 m!58071))

(declare-fun m!58073 () Bool)

(assert (=> b!63608 m!58073))

(assert (=> b!63608 m!58073))

(declare-fun m!58075 () Bool)

(assert (=> b!63608 m!58075))

(assert (=> b!63610 m!58073))

(assert (=> b!63610 m!58073))

(assert (=> b!63610 m!58075))

(assert (=> bm!4905 d!13231))

(declare-fun d!13233 () Bool)

(assert (=> d!13233 (contains!686 (getCurrentListMap!391 (_keys!3719 newMap!16) lt!25974 (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (select (arr!1790 (_keys!3719 newMap!16)) (index!3018 lt!25967)))))

(assert (=> d!13233 true))

(declare-fun _$16!84 () Unit!1680)

(assert (=> d!13233 (= (choose!343 (_keys!3719 newMap!16) lt!25974 (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (index!3018 lt!25967) (defaultEntry!2087 newMap!16)) _$16!84)))

(declare-fun bs!2782 () Bool)

(assert (= bs!2782 d!13233))

(assert (=> bs!2782 m!56445))

(assert (=> bs!2782 m!55857))

(assert (=> bs!2782 m!56445))

(assert (=> bs!2782 m!55857))

(assert (=> bs!2782 m!56447))

(assert (=> d!12753 d!13233))

(assert (=> d!12753 d!12793))

(assert (=> b!62767 d!12831))

(assert (=> b!62685 d!13043))

(assert (=> b!62685 d!13045))

(declare-fun d!13235 () Bool)

(declare-fun res!34778 () Bool)

(declare-fun e!41693 () Bool)

(assert (=> d!13235 (=> res!34778 e!41693)))

(assert (=> d!13235 (= res!34778 (and ((_ is Cons!1425) (toList!691 call!4867)) (= (_1!1027 (h!2008 (toList!691 call!4867))) (select (arr!1790 (_keys!3719 newMap!16)) (index!3018 lt!25967)))))))

(assert (=> d!13235 (= (containsKey!130 (toList!691 call!4867) (select (arr!1790 (_keys!3719 newMap!16)) (index!3018 lt!25967))) e!41693)))

(declare-fun b!63611 () Bool)

(declare-fun e!41694 () Bool)

(assert (=> b!63611 (= e!41693 e!41694)))

(declare-fun res!34779 () Bool)

(assert (=> b!63611 (=> (not res!34779) (not e!41694))))

(assert (=> b!63611 (= res!34779 (and (or (not ((_ is Cons!1425) (toList!691 call!4867))) (bvsle (_1!1027 (h!2008 (toList!691 call!4867))) (select (arr!1790 (_keys!3719 newMap!16)) (index!3018 lt!25967)))) ((_ is Cons!1425) (toList!691 call!4867)) (bvslt (_1!1027 (h!2008 (toList!691 call!4867))) (select (arr!1790 (_keys!3719 newMap!16)) (index!3018 lt!25967)))))))

(declare-fun b!63612 () Bool)

(assert (=> b!63612 (= e!41694 (containsKey!130 (t!4815 (toList!691 call!4867)) (select (arr!1790 (_keys!3719 newMap!16)) (index!3018 lt!25967))))))

(assert (= (and d!13235 (not res!34778)) b!63611))

(assert (= (and b!63611 res!34779) b!63612))

(assert (=> b!63612 m!55857))

(declare-fun m!58077 () Bool)

(assert (=> b!63612 m!58077))

(assert (=> d!12751 d!13235))

(declare-fun d!13237 () Bool)

(assert (=> d!13237 (contains!686 (+!82 lt!26380 (tuple2!2033 lt!26376 (zeroValue!1999 newMap!16))) lt!26370)))

(declare-fun lt!26855 () Unit!1680)

(assert (=> d!13237 (= lt!26855 (choose!338 lt!26380 lt!26376 (zeroValue!1999 newMap!16) lt!26370))))

(assert (=> d!13237 (contains!686 lt!26380 lt!26370)))

(assert (=> d!13237 (= (addStillContains!44 lt!26380 lt!26376 (zeroValue!1999 newMap!16) lt!26370) lt!26855)))

(declare-fun bs!2783 () Bool)

(assert (= bs!2783 d!13237))

(assert (=> bs!2783 m!56547))

(assert (=> bs!2783 m!56547))

(assert (=> bs!2783 m!56563))

(declare-fun m!58079 () Bool)

(assert (=> bs!2783 m!58079))

(declare-fun m!58081 () Bool)

(assert (=> bs!2783 m!58081))

(assert (=> b!62844 d!13237))

(declare-fun d!13239 () Bool)

(declare-fun e!41695 () Bool)

(assert (=> d!13239 e!41695))

(declare-fun res!34780 () Bool)

(assert (=> d!13239 (=> (not res!34780) (not e!41695))))

(declare-fun lt!26857 () ListLongMap!1351)

(assert (=> d!13239 (= res!34780 (contains!686 lt!26857 (_1!1027 (tuple2!2033 lt!26377 (minValue!1999 newMap!16)))))))

(declare-fun lt!26858 () List!1429)

(assert (=> d!13239 (= lt!26857 (ListLongMap!1352 lt!26858))))

(declare-fun lt!26856 () Unit!1680)

(declare-fun lt!26859 () Unit!1680)

(assert (=> d!13239 (= lt!26856 lt!26859)))

(assert (=> d!13239 (= (getValueByKey!127 lt!26858 (_1!1027 (tuple2!2033 lt!26377 (minValue!1999 newMap!16)))) (Some!132 (_2!1027 (tuple2!2033 lt!26377 (minValue!1999 newMap!16)))))))

(assert (=> d!13239 (= lt!26859 (lemmaContainsTupThenGetReturnValue!44 lt!26858 (_1!1027 (tuple2!2033 lt!26377 (minValue!1999 newMap!16))) (_2!1027 (tuple2!2033 lt!26377 (minValue!1999 newMap!16)))))))

(assert (=> d!13239 (= lt!26858 (insertStrictlySorted!47 (toList!691 lt!26369) (_1!1027 (tuple2!2033 lt!26377 (minValue!1999 newMap!16))) (_2!1027 (tuple2!2033 lt!26377 (minValue!1999 newMap!16)))))))

(assert (=> d!13239 (= (+!82 lt!26369 (tuple2!2033 lt!26377 (minValue!1999 newMap!16))) lt!26857)))

(declare-fun b!63613 () Bool)

(declare-fun res!34781 () Bool)

(assert (=> b!63613 (=> (not res!34781) (not e!41695))))

(assert (=> b!63613 (= res!34781 (= (getValueByKey!127 (toList!691 lt!26857) (_1!1027 (tuple2!2033 lt!26377 (minValue!1999 newMap!16)))) (Some!132 (_2!1027 (tuple2!2033 lt!26377 (minValue!1999 newMap!16))))))))

(declare-fun b!63614 () Bool)

(assert (=> b!63614 (= e!41695 (contains!689 (toList!691 lt!26857) (tuple2!2033 lt!26377 (minValue!1999 newMap!16))))))

(assert (= (and d!13239 res!34780) b!63613))

(assert (= (and b!63613 res!34781) b!63614))

(declare-fun m!58083 () Bool)

(assert (=> d!13239 m!58083))

(declare-fun m!58085 () Bool)

(assert (=> d!13239 m!58085))

(declare-fun m!58087 () Bool)

(assert (=> d!13239 m!58087))

(declare-fun m!58089 () Bool)

(assert (=> d!13239 m!58089))

(declare-fun m!58091 () Bool)

(assert (=> b!63613 m!58091))

(declare-fun m!58093 () Bool)

(assert (=> b!63614 m!58093))

(assert (=> b!62844 d!13239))

(declare-fun d!13241 () Bool)

(declare-fun e!41697 () Bool)

(assert (=> d!13241 e!41697))

(declare-fun res!34782 () Bool)

(assert (=> d!13241 (=> res!34782 e!41697)))

(declare-fun lt!26861 () Bool)

(assert (=> d!13241 (= res!34782 (not lt!26861))))

(declare-fun lt!26862 () Bool)

(assert (=> d!13241 (= lt!26861 lt!26862)))

(declare-fun lt!26860 () Unit!1680)

(declare-fun e!41696 () Unit!1680)

(assert (=> d!13241 (= lt!26860 e!41696)))

(declare-fun c!8634 () Bool)

(assert (=> d!13241 (= c!8634 lt!26862)))

(assert (=> d!13241 (= lt!26862 (containsKey!130 (toList!691 (+!82 lt!26380 (tuple2!2033 lt!26376 (zeroValue!1999 newMap!16)))) lt!26370))))

(assert (=> d!13241 (= (contains!686 (+!82 lt!26380 (tuple2!2033 lt!26376 (zeroValue!1999 newMap!16))) lt!26370) lt!26861)))

(declare-fun b!63615 () Bool)

(declare-fun lt!26863 () Unit!1680)

(assert (=> b!63615 (= e!41696 lt!26863)))

(assert (=> b!63615 (= lt!26863 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 (+!82 lt!26380 (tuple2!2033 lt!26376 (zeroValue!1999 newMap!16)))) lt!26370))))

(assert (=> b!63615 (isDefined!79 (getValueByKey!127 (toList!691 (+!82 lt!26380 (tuple2!2033 lt!26376 (zeroValue!1999 newMap!16)))) lt!26370))))

(declare-fun b!63616 () Bool)

(declare-fun Unit!1741 () Unit!1680)

(assert (=> b!63616 (= e!41696 Unit!1741)))

(declare-fun b!63617 () Bool)

(assert (=> b!63617 (= e!41697 (isDefined!79 (getValueByKey!127 (toList!691 (+!82 lt!26380 (tuple2!2033 lt!26376 (zeroValue!1999 newMap!16)))) lt!26370)))))

(assert (= (and d!13241 c!8634) b!63615))

(assert (= (and d!13241 (not c!8634)) b!63616))

(assert (= (and d!13241 (not res!34782)) b!63617))

(declare-fun m!58095 () Bool)

(assert (=> d!13241 m!58095))

(declare-fun m!58097 () Bool)

(assert (=> b!63615 m!58097))

(declare-fun m!58099 () Bool)

(assert (=> b!63615 m!58099))

(assert (=> b!63615 m!58099))

(declare-fun m!58101 () Bool)

(assert (=> b!63615 m!58101))

(assert (=> b!63617 m!58099))

(assert (=> b!63617 m!58099))

(assert (=> b!63617 m!58101))

(assert (=> b!62844 d!13241))

(declare-fun d!13243 () Bool)

(assert (=> d!13243 (= (apply!68 (+!82 lt!26378 (tuple2!2033 lt!26367 (minValue!1999 newMap!16))) lt!26381) (get!1092 (getValueByKey!127 (toList!691 (+!82 lt!26378 (tuple2!2033 lt!26367 (minValue!1999 newMap!16)))) lt!26381)))))

(declare-fun bs!2784 () Bool)

(assert (= bs!2784 d!13243))

(declare-fun m!58103 () Bool)

(assert (=> bs!2784 m!58103))

(assert (=> bs!2784 m!58103))

(declare-fun m!58105 () Bool)

(assert (=> bs!2784 m!58105))

(assert (=> b!62844 d!13243))

(declare-fun d!13245 () Bool)

(assert (=> d!13245 (= (apply!68 lt!26378 lt!26381) (get!1092 (getValueByKey!127 (toList!691 lt!26378) lt!26381)))))

(declare-fun bs!2785 () Bool)

(assert (= bs!2785 d!13245))

(declare-fun m!58107 () Bool)

(assert (=> bs!2785 m!58107))

(assert (=> bs!2785 m!58107))

(declare-fun m!58109 () Bool)

(assert (=> bs!2785 m!58109))

(assert (=> b!62844 d!13245))

(declare-fun d!13247 () Bool)

(declare-fun e!41698 () Bool)

(assert (=> d!13247 e!41698))

(declare-fun res!34783 () Bool)

(assert (=> d!13247 (=> (not res!34783) (not e!41698))))

(declare-fun lt!26865 () ListLongMap!1351)

(assert (=> d!13247 (= res!34783 (contains!686 lt!26865 (_1!1027 (tuple2!2033 lt!26367 (minValue!1999 newMap!16)))))))

(declare-fun lt!26866 () List!1429)

(assert (=> d!13247 (= lt!26865 (ListLongMap!1352 lt!26866))))

(declare-fun lt!26864 () Unit!1680)

(declare-fun lt!26867 () Unit!1680)

(assert (=> d!13247 (= lt!26864 lt!26867)))

(assert (=> d!13247 (= (getValueByKey!127 lt!26866 (_1!1027 (tuple2!2033 lt!26367 (minValue!1999 newMap!16)))) (Some!132 (_2!1027 (tuple2!2033 lt!26367 (minValue!1999 newMap!16)))))))

(assert (=> d!13247 (= lt!26867 (lemmaContainsTupThenGetReturnValue!44 lt!26866 (_1!1027 (tuple2!2033 lt!26367 (minValue!1999 newMap!16))) (_2!1027 (tuple2!2033 lt!26367 (minValue!1999 newMap!16)))))))

(assert (=> d!13247 (= lt!26866 (insertStrictlySorted!47 (toList!691 lt!26378) (_1!1027 (tuple2!2033 lt!26367 (minValue!1999 newMap!16))) (_2!1027 (tuple2!2033 lt!26367 (minValue!1999 newMap!16)))))))

(assert (=> d!13247 (= (+!82 lt!26378 (tuple2!2033 lt!26367 (minValue!1999 newMap!16))) lt!26865)))

(declare-fun b!63618 () Bool)

(declare-fun res!34784 () Bool)

(assert (=> b!63618 (=> (not res!34784) (not e!41698))))

(assert (=> b!63618 (= res!34784 (= (getValueByKey!127 (toList!691 lt!26865) (_1!1027 (tuple2!2033 lt!26367 (minValue!1999 newMap!16)))) (Some!132 (_2!1027 (tuple2!2033 lt!26367 (minValue!1999 newMap!16))))))))

(declare-fun b!63619 () Bool)

(assert (=> b!63619 (= e!41698 (contains!689 (toList!691 lt!26865) (tuple2!2033 lt!26367 (minValue!1999 newMap!16))))))

(assert (= (and d!13247 res!34783) b!63618))

(assert (= (and b!63618 res!34784) b!63619))

(declare-fun m!58111 () Bool)

(assert (=> d!13247 m!58111))

(declare-fun m!58113 () Bool)

(assert (=> d!13247 m!58113))

(declare-fun m!58115 () Bool)

(assert (=> d!13247 m!58115))

(declare-fun m!58117 () Bool)

(assert (=> d!13247 m!58117))

(declare-fun m!58119 () Bool)

(assert (=> b!63618 m!58119))

(declare-fun m!58121 () Bool)

(assert (=> b!63619 m!58121))

(assert (=> b!62844 d!13247))

(declare-fun d!13249 () Bool)

(assert (=> d!13249 (= (apply!68 lt!26369 lt!26368) (get!1092 (getValueByKey!127 (toList!691 lt!26369) lt!26368)))))

(declare-fun bs!2786 () Bool)

(assert (= bs!2786 d!13249))

(declare-fun m!58123 () Bool)

(assert (=> bs!2786 m!58123))

(assert (=> bs!2786 m!58123))

(declare-fun m!58125 () Bool)

(assert (=> bs!2786 m!58125))

(assert (=> b!62844 d!13249))

(declare-fun d!13251 () Bool)

(assert (=> d!13251 (= (apply!68 (+!82 lt!26369 (tuple2!2033 lt!26377 (minValue!1999 newMap!16))) lt!26368) (get!1092 (getValueByKey!127 (toList!691 (+!82 lt!26369 (tuple2!2033 lt!26377 (minValue!1999 newMap!16)))) lt!26368)))))

(declare-fun bs!2787 () Bool)

(assert (= bs!2787 d!13251))

(declare-fun m!58127 () Bool)

(assert (=> bs!2787 m!58127))

(assert (=> bs!2787 m!58127))

(declare-fun m!58129 () Bool)

(assert (=> bs!2787 m!58129))

(assert (=> b!62844 d!13251))

(declare-fun d!13253 () Bool)

(declare-fun e!41699 () Bool)

(assert (=> d!13253 e!41699))

(declare-fun res!34785 () Bool)

(assert (=> d!13253 (=> (not res!34785) (not e!41699))))

(declare-fun lt!26869 () ListLongMap!1351)

(assert (=> d!13253 (= res!34785 (contains!686 lt!26869 (_1!1027 (tuple2!2033 lt!26376 (zeroValue!1999 newMap!16)))))))

(declare-fun lt!26870 () List!1429)

(assert (=> d!13253 (= lt!26869 (ListLongMap!1352 lt!26870))))

(declare-fun lt!26868 () Unit!1680)

(declare-fun lt!26871 () Unit!1680)

(assert (=> d!13253 (= lt!26868 lt!26871)))

(assert (=> d!13253 (= (getValueByKey!127 lt!26870 (_1!1027 (tuple2!2033 lt!26376 (zeroValue!1999 newMap!16)))) (Some!132 (_2!1027 (tuple2!2033 lt!26376 (zeroValue!1999 newMap!16)))))))

(assert (=> d!13253 (= lt!26871 (lemmaContainsTupThenGetReturnValue!44 lt!26870 (_1!1027 (tuple2!2033 lt!26376 (zeroValue!1999 newMap!16))) (_2!1027 (tuple2!2033 lt!26376 (zeroValue!1999 newMap!16)))))))

(assert (=> d!13253 (= lt!26870 (insertStrictlySorted!47 (toList!691 lt!26380) (_1!1027 (tuple2!2033 lt!26376 (zeroValue!1999 newMap!16))) (_2!1027 (tuple2!2033 lt!26376 (zeroValue!1999 newMap!16)))))))

(assert (=> d!13253 (= (+!82 lt!26380 (tuple2!2033 lt!26376 (zeroValue!1999 newMap!16))) lt!26869)))

(declare-fun b!63620 () Bool)

(declare-fun res!34786 () Bool)

(assert (=> b!63620 (=> (not res!34786) (not e!41699))))

(assert (=> b!63620 (= res!34786 (= (getValueByKey!127 (toList!691 lt!26869) (_1!1027 (tuple2!2033 lt!26376 (zeroValue!1999 newMap!16)))) (Some!132 (_2!1027 (tuple2!2033 lt!26376 (zeroValue!1999 newMap!16))))))))

(declare-fun b!63621 () Bool)

(assert (=> b!63621 (= e!41699 (contains!689 (toList!691 lt!26869) (tuple2!2033 lt!26376 (zeroValue!1999 newMap!16))))))

(assert (= (and d!13253 res!34785) b!63620))

(assert (= (and b!63620 res!34786) b!63621))

(declare-fun m!58131 () Bool)

(assert (=> d!13253 m!58131))

(declare-fun m!58133 () Bool)

(assert (=> d!13253 m!58133))

(declare-fun m!58135 () Bool)

(assert (=> d!13253 m!58135))

(declare-fun m!58137 () Bool)

(assert (=> d!13253 m!58137))

(declare-fun m!58139 () Bool)

(assert (=> b!63620 m!58139))

(declare-fun m!58141 () Bool)

(assert (=> b!63621 m!58141))

(assert (=> b!62844 d!13253))

(declare-fun d!13255 () Bool)

(assert (=> d!13255 (= (apply!68 (+!82 lt!26378 (tuple2!2033 lt!26367 (minValue!1999 newMap!16))) lt!26381) (apply!68 lt!26378 lt!26381))))

(declare-fun lt!26872 () Unit!1680)

(assert (=> d!13255 (= lt!26872 (choose!339 lt!26378 lt!26367 (minValue!1999 newMap!16) lt!26381))))

(declare-fun e!41700 () Bool)

(assert (=> d!13255 e!41700))

(declare-fun res!34787 () Bool)

(assert (=> d!13255 (=> (not res!34787) (not e!41700))))

(assert (=> d!13255 (= res!34787 (contains!686 lt!26378 lt!26381))))

(assert (=> d!13255 (= (addApplyDifferent!44 lt!26378 lt!26367 (minValue!1999 newMap!16) lt!26381) lt!26872)))

(declare-fun b!63622 () Bool)

(assert (=> b!63622 (= e!41700 (not (= lt!26381 lt!26367)))))

(assert (= (and d!13255 res!34787) b!63622))

(assert (=> d!13255 m!56543))

(assert (=> d!13255 m!56545))

(assert (=> d!13255 m!56543))

(declare-fun m!58143 () Bool)

(assert (=> d!13255 m!58143))

(assert (=> d!13255 m!56541))

(declare-fun m!58145 () Bool)

(assert (=> d!13255 m!58145))

(assert (=> b!62844 d!13255))

(declare-fun d!13257 () Bool)

(declare-fun e!41701 () Bool)

(assert (=> d!13257 e!41701))

(declare-fun res!34788 () Bool)

(assert (=> d!13257 (=> (not res!34788) (not e!41701))))

(declare-fun lt!26874 () ListLongMap!1351)

(assert (=> d!13257 (= res!34788 (contains!686 lt!26874 (_1!1027 (tuple2!2033 lt!26379 (zeroValue!1999 newMap!16)))))))

(declare-fun lt!26875 () List!1429)

(assert (=> d!13257 (= lt!26874 (ListLongMap!1352 lt!26875))))

(declare-fun lt!26873 () Unit!1680)

(declare-fun lt!26876 () Unit!1680)

(assert (=> d!13257 (= lt!26873 lt!26876)))

(assert (=> d!13257 (= (getValueByKey!127 lt!26875 (_1!1027 (tuple2!2033 lt!26379 (zeroValue!1999 newMap!16)))) (Some!132 (_2!1027 (tuple2!2033 lt!26379 (zeroValue!1999 newMap!16)))))))

(assert (=> d!13257 (= lt!26876 (lemmaContainsTupThenGetReturnValue!44 lt!26875 (_1!1027 (tuple2!2033 lt!26379 (zeroValue!1999 newMap!16))) (_2!1027 (tuple2!2033 lt!26379 (zeroValue!1999 newMap!16)))))))

(assert (=> d!13257 (= lt!26875 (insertStrictlySorted!47 (toList!691 lt!26383) (_1!1027 (tuple2!2033 lt!26379 (zeroValue!1999 newMap!16))) (_2!1027 (tuple2!2033 lt!26379 (zeroValue!1999 newMap!16)))))))

(assert (=> d!13257 (= (+!82 lt!26383 (tuple2!2033 lt!26379 (zeroValue!1999 newMap!16))) lt!26874)))

(declare-fun b!63623 () Bool)

(declare-fun res!34789 () Bool)

(assert (=> b!63623 (=> (not res!34789) (not e!41701))))

(assert (=> b!63623 (= res!34789 (= (getValueByKey!127 (toList!691 lt!26874) (_1!1027 (tuple2!2033 lt!26379 (zeroValue!1999 newMap!16)))) (Some!132 (_2!1027 (tuple2!2033 lt!26379 (zeroValue!1999 newMap!16))))))))

(declare-fun b!63624 () Bool)

(assert (=> b!63624 (= e!41701 (contains!689 (toList!691 lt!26874) (tuple2!2033 lt!26379 (zeroValue!1999 newMap!16))))))

(assert (= (and d!13257 res!34788) b!63623))

(assert (= (and b!63623 res!34789) b!63624))

(declare-fun m!58147 () Bool)

(assert (=> d!13257 m!58147))

(declare-fun m!58149 () Bool)

(assert (=> d!13257 m!58149))

(declare-fun m!58151 () Bool)

(assert (=> d!13257 m!58151))

(declare-fun m!58153 () Bool)

(assert (=> d!13257 m!58153))

(declare-fun m!58155 () Bool)

(assert (=> b!63623 m!58155))

(declare-fun m!58157 () Bool)

(assert (=> b!63624 m!58157))

(assert (=> b!62844 d!13257))

(declare-fun d!13259 () Bool)

(assert (=> d!13259 (= (apply!68 lt!26383 lt!26366) (get!1092 (getValueByKey!127 (toList!691 lt!26383) lt!26366)))))

(declare-fun bs!2788 () Bool)

(assert (= bs!2788 d!13259))

(declare-fun m!58159 () Bool)

(assert (=> bs!2788 m!58159))

(assert (=> bs!2788 m!58159))

(declare-fun m!58161 () Bool)

(assert (=> bs!2788 m!58161))

(assert (=> b!62844 d!13259))

(declare-fun d!13261 () Bool)

(assert (=> d!13261 (= (apply!68 (+!82 lt!26369 (tuple2!2033 lt!26377 (minValue!1999 newMap!16))) lt!26368) (apply!68 lt!26369 lt!26368))))

(declare-fun lt!26877 () Unit!1680)

(assert (=> d!13261 (= lt!26877 (choose!339 lt!26369 lt!26377 (minValue!1999 newMap!16) lt!26368))))

(declare-fun e!41702 () Bool)

(assert (=> d!13261 e!41702))

(declare-fun res!34790 () Bool)

(assert (=> d!13261 (=> (not res!34790) (not e!41702))))

(assert (=> d!13261 (= res!34790 (contains!686 lt!26369 lt!26368))))

(assert (=> d!13261 (= (addApplyDifferent!44 lt!26369 lt!26377 (minValue!1999 newMap!16) lt!26368) lt!26877)))

(declare-fun b!63625 () Bool)

(assert (=> b!63625 (= e!41702 (not (= lt!26368 lt!26377)))))

(assert (= (and d!13261 res!34790) b!63625))

(assert (=> d!13261 m!56533))

(assert (=> d!13261 m!56537))

(assert (=> d!13261 m!56533))

(declare-fun m!58163 () Bool)

(assert (=> d!13261 m!58163))

(assert (=> d!13261 m!56549))

(declare-fun m!58165 () Bool)

(assert (=> d!13261 m!58165))

(assert (=> b!62844 d!13261))

(declare-fun d!13263 () Bool)

(assert (=> d!13263 (= (apply!68 (+!82 lt!26383 (tuple2!2033 lt!26379 (zeroValue!1999 newMap!16))) lt!26366) (get!1092 (getValueByKey!127 (toList!691 (+!82 lt!26383 (tuple2!2033 lt!26379 (zeroValue!1999 newMap!16)))) lt!26366)))))

(declare-fun bs!2789 () Bool)

(assert (= bs!2789 d!13263))

(declare-fun m!58167 () Bool)

(assert (=> bs!2789 m!58167))

(assert (=> bs!2789 m!58167))

(declare-fun m!58169 () Bool)

(assert (=> bs!2789 m!58169))

(assert (=> b!62844 d!13263))

(declare-fun d!13265 () Bool)

(assert (=> d!13265 (= (apply!68 (+!82 lt!26383 (tuple2!2033 lt!26379 (zeroValue!1999 newMap!16))) lt!26366) (apply!68 lt!26383 lt!26366))))

(declare-fun lt!26878 () Unit!1680)

(assert (=> d!13265 (= lt!26878 (choose!339 lt!26383 lt!26379 (zeroValue!1999 newMap!16) lt!26366))))

(declare-fun e!41703 () Bool)

(assert (=> d!13265 e!41703))

(declare-fun res!34791 () Bool)

(assert (=> d!13265 (=> (not res!34791) (not e!41703))))

(assert (=> d!13265 (= res!34791 (contains!686 lt!26383 lt!26366))))

(assert (=> d!13265 (= (addApplyDifferent!44 lt!26383 lt!26379 (zeroValue!1999 newMap!16) lt!26366) lt!26878)))

(declare-fun b!63626 () Bool)

(assert (=> b!63626 (= e!41703 (not (= lt!26366 lt!26379)))))

(assert (= (and d!13265 res!34791) b!63626))

(assert (=> d!13265 m!56557))

(assert (=> d!13265 m!56559))

(assert (=> d!13265 m!56557))

(declare-fun m!58171 () Bool)

(assert (=> d!13265 m!58171))

(assert (=> d!13265 m!56553))

(declare-fun m!58173 () Bool)

(assert (=> d!13265 m!58173))

(assert (=> b!62844 d!13265))

(assert (=> b!62844 d!13049))

(declare-fun lt!26879 () Bool)

(declare-fun d!13267 () Bool)

(assert (=> d!13267 (= lt!26879 (select (content!69 (toList!691 lt!26162)) (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun e!41705 () Bool)

(assert (=> d!13267 (= lt!26879 e!41705)))

(declare-fun res!34792 () Bool)

(assert (=> d!13267 (=> (not res!34792) (not e!41705))))

(assert (=> d!13267 (= res!34792 ((_ is Cons!1425) (toList!691 lt!26162)))))

(assert (=> d!13267 (= (contains!689 (toList!691 lt!26162) (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) lt!26879)))

(declare-fun b!63627 () Bool)

(declare-fun e!41704 () Bool)

(assert (=> b!63627 (= e!41705 e!41704)))

(declare-fun res!34793 () Bool)

(assert (=> b!63627 (=> res!34793 e!41704)))

(assert (=> b!63627 (= res!34793 (= (h!2008 (toList!691 lt!26162)) (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun b!63628 () Bool)

(assert (=> b!63628 (= e!41704 (contains!689 (t!4815 (toList!691 lt!26162)) (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))

(assert (= (and d!13267 res!34792) b!63627))

(assert (= (and b!63627 (not res!34793)) b!63628))

(declare-fun m!58175 () Bool)

(assert (=> d!13267 m!58175))

(declare-fun m!58177 () Bool)

(assert (=> d!13267 m!58177))

(declare-fun m!58179 () Bool)

(assert (=> b!63628 m!58179))

(assert (=> b!62624 d!13267))

(assert (=> b!62514 d!12831))

(declare-fun d!13269 () Bool)

(declare-fun e!41707 () Bool)

(assert (=> d!13269 e!41707))

(declare-fun res!34794 () Bool)

(assert (=> d!13269 (=> res!34794 e!41707)))

(declare-fun lt!26881 () Bool)

(assert (=> d!13269 (= res!34794 (not lt!26881))))

(declare-fun lt!26882 () Bool)

(assert (=> d!13269 (= lt!26881 lt!26882)))

(declare-fun lt!26880 () Unit!1680)

(declare-fun e!41706 () Unit!1680)

(assert (=> d!13269 (= lt!26880 e!41706)))

(declare-fun c!8635 () Bool)

(assert (=> d!13269 (= c!8635 lt!26882)))

(assert (=> d!13269 (= lt!26882 (containsKey!130 (toList!691 lt!26152) (_1!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!13269 (= (contains!686 lt!26152 (_1!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26881)))

(declare-fun b!63629 () Bool)

(declare-fun lt!26883 () Unit!1680)

(assert (=> b!63629 (= e!41706 lt!26883)))

(assert (=> b!63629 (= lt!26883 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 lt!26152) (_1!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> b!63629 (isDefined!79 (getValueByKey!127 (toList!691 lt!26152) (_1!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63630 () Bool)

(declare-fun Unit!1742 () Unit!1680)

(assert (=> b!63630 (= e!41706 Unit!1742)))

(declare-fun b!63631 () Bool)

(assert (=> b!63631 (= e!41707 (isDefined!79 (getValueByKey!127 (toList!691 lt!26152) (_1!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(assert (= (and d!13269 c!8635) b!63629))

(assert (= (and d!13269 (not c!8635)) b!63630))

(assert (= (and d!13269 (not res!34794)) b!63631))

(declare-fun m!58181 () Bool)

(assert (=> d!13269 m!58181))

(declare-fun m!58183 () Bool)

(assert (=> b!63629 m!58183))

(assert (=> b!63629 m!56181))

(assert (=> b!63629 m!56181))

(declare-fun m!58185 () Bool)

(assert (=> b!63629 m!58185))

(assert (=> b!63631 m!56181))

(assert (=> b!63631 m!56181))

(assert (=> b!63631 m!58185))

(assert (=> d!12689 d!13269))

(declare-fun b!63632 () Bool)

(declare-fun e!41708 () Option!133)

(assert (=> b!63632 (= e!41708 (Some!132 (_2!1027 (h!2008 lt!26153))))))

(declare-fun c!8636 () Bool)

(declare-fun d!13271 () Bool)

(assert (=> d!13271 (= c!8636 (and ((_ is Cons!1425) lt!26153) (= (_1!1027 (h!2008 lt!26153)) (_1!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> d!13271 (= (getValueByKey!127 lt!26153 (_1!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))) e!41708)))

(declare-fun b!63633 () Bool)

(declare-fun e!41709 () Option!133)

(assert (=> b!63633 (= e!41708 e!41709)))

(declare-fun c!8637 () Bool)

(assert (=> b!63633 (= c!8637 (and ((_ is Cons!1425) lt!26153) (not (= (_1!1027 (h!2008 lt!26153)) (_1!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))))))

(declare-fun b!63634 () Bool)

(assert (=> b!63634 (= e!41709 (getValueByKey!127 (t!4815 lt!26153) (_1!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63635 () Bool)

(assert (=> b!63635 (= e!41709 None!131)))

(assert (= (and d!13271 c!8636) b!63632))

(assert (= (and d!13271 (not c!8636)) b!63633))

(assert (= (and b!63633 c!8637) b!63634))

(assert (= (and b!63633 (not c!8637)) b!63635))

(declare-fun m!58187 () Bool)

(assert (=> b!63634 m!58187))

(assert (=> d!12689 d!13271))

(declare-fun d!13273 () Bool)

(assert (=> d!13273 (= (getValueByKey!127 lt!26153 (_1!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))) (Some!132 (_2!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun lt!26884 () Unit!1680)

(assert (=> d!13273 (= lt!26884 (choose!346 lt!26153 (_1!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun e!41710 () Bool)

(assert (=> d!13273 e!41710))

(declare-fun res!34795 () Bool)

(assert (=> d!13273 (=> (not res!34795) (not e!41710))))

(assert (=> d!13273 (= res!34795 (isStrictlySorted!273 lt!26153))))

(assert (=> d!13273 (= (lemmaContainsTupThenGetReturnValue!44 lt!26153 (_1!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26884)))

(declare-fun b!63636 () Bool)

(declare-fun res!34796 () Bool)

(assert (=> b!63636 (=> (not res!34796) (not e!41710))))

(assert (=> b!63636 (= res!34796 (containsKey!130 lt!26153 (_1!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63637 () Bool)

(assert (=> b!63637 (= e!41710 (contains!689 lt!26153 (tuple2!2033 (_1!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(assert (= (and d!13273 res!34795) b!63636))

(assert (= (and b!63636 res!34796) b!63637))

(assert (=> d!13273 m!56175))

(declare-fun m!58189 () Bool)

(assert (=> d!13273 m!58189))

(declare-fun m!58191 () Bool)

(assert (=> d!13273 m!58191))

(declare-fun m!58193 () Bool)

(assert (=> b!63636 m!58193))

(declare-fun m!58195 () Bool)

(assert (=> b!63637 m!58195))

(assert (=> d!12689 d!13273))

(declare-fun b!63638 () Bool)

(declare-fun lt!26885 () List!1429)

(declare-fun e!41714 () Bool)

(assert (=> b!63638 (= e!41714 (contains!689 lt!26885 (tuple2!2033 (_1!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!63639 () Bool)

(declare-fun res!34798 () Bool)

(assert (=> b!63639 (=> (not res!34798) (not e!41714))))

(assert (=> b!63639 (= res!34798 (containsKey!130 lt!26885 (_1!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun bm!5043 () Bool)

(declare-fun call!5048 () List!1429)

(declare-fun call!5046 () List!1429)

(assert (=> bm!5043 (= call!5048 call!5046)))

(declare-fun bm!5044 () Bool)

(declare-fun call!5047 () List!1429)

(assert (=> bm!5044 (= call!5046 call!5047)))

(declare-fun c!8638 () Bool)

(declare-fun b!63640 () Bool)

(assert (=> b!63640 (= c!8638 (and ((_ is Cons!1425) (toList!691 lt!26048)) (bvsgt (_1!1027 (h!2008 (toList!691 lt!26048))) (_1!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun e!41712 () List!1429)

(declare-fun e!41715 () List!1429)

(assert (=> b!63640 (= e!41712 e!41715)))

(declare-fun d!13275 () Bool)

(assert (=> d!13275 e!41714))

(declare-fun res!34797 () Bool)

(assert (=> d!13275 (=> (not res!34797) (not e!41714))))

(assert (=> d!13275 (= res!34797 (isStrictlySorted!273 lt!26885))))

(declare-fun e!41711 () List!1429)

(assert (=> d!13275 (= lt!26885 e!41711)))

(declare-fun c!8639 () Bool)

(assert (=> d!13275 (= c!8639 (and ((_ is Cons!1425) (toList!691 lt!26048)) (bvslt (_1!1027 (h!2008 (toList!691 lt!26048))) (_1!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> d!13275 (isStrictlySorted!273 (toList!691 lt!26048))))

(assert (=> d!13275 (= (insertStrictlySorted!47 (toList!691 lt!26048) (_1!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26885)))

(declare-fun e!41713 () List!1429)

(declare-fun bm!5045 () Bool)

(assert (=> bm!5045 (= call!5047 ($colon$colon!61 e!41713 (ite c!8639 (h!2008 (toList!691 lt!26048)) (tuple2!2033 (_1!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))))))

(declare-fun c!8641 () Bool)

(assert (=> bm!5045 (= c!8641 c!8639)))

(declare-fun b!63641 () Bool)

(assert (=> b!63641 (= e!41712 call!5046)))

(declare-fun b!63642 () Bool)

(assert (=> b!63642 (= e!41713 (insertStrictlySorted!47 (t!4815 (toList!691 lt!26048)) (_1!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))) (_2!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63643 () Bool)

(assert (=> b!63643 (= e!41711 call!5047)))

(declare-fun b!63644 () Bool)

(assert (=> b!63644 (= e!41711 e!41712)))

(declare-fun c!8640 () Bool)

(assert (=> b!63644 (= c!8640 (and ((_ is Cons!1425) (toList!691 lt!26048)) (= (_1!1027 (h!2008 (toList!691 lt!26048))) (_1!1027 (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!63645 () Bool)

(assert (=> b!63645 (= e!41715 call!5048)))

(declare-fun b!63646 () Bool)

(assert (=> b!63646 (= e!41713 (ite c!8640 (t!4815 (toList!691 lt!26048)) (ite c!8638 (Cons!1425 (h!2008 (toList!691 lt!26048)) (t!4815 (toList!691 lt!26048))) Nil!1426)))))

(declare-fun b!63647 () Bool)

(assert (=> b!63647 (= e!41715 call!5048)))

(assert (= (and d!13275 c!8639) b!63643))

(assert (= (and d!13275 (not c!8639)) b!63644))

(assert (= (and b!63644 c!8640) b!63641))

(assert (= (and b!63644 (not c!8640)) b!63640))

(assert (= (and b!63640 c!8638) b!63647))

(assert (= (and b!63640 (not c!8638)) b!63645))

(assert (= (or b!63647 b!63645) bm!5043))

(assert (= (or b!63641 bm!5043) bm!5044))

(assert (= (or b!63643 bm!5044) bm!5045))

(assert (= (and bm!5045 c!8641) b!63642))

(assert (= (and bm!5045 (not c!8641)) b!63646))

(assert (= (and d!13275 res!34797) b!63639))

(assert (= (and b!63639 res!34798) b!63638))

(declare-fun m!58197 () Bool)

(assert (=> b!63639 m!58197))

(declare-fun m!58199 () Bool)

(assert (=> bm!5045 m!58199))

(declare-fun m!58201 () Bool)

(assert (=> b!63642 m!58201))

(declare-fun m!58203 () Bool)

(assert (=> b!63638 m!58203))

(declare-fun m!58205 () Bool)

(assert (=> d!13275 m!58205))

(declare-fun m!58207 () Bool)

(assert (=> d!13275 m!58207))

(assert (=> d!12689 d!13275))

(assert (=> d!12651 d!12627))

(declare-fun d!13277 () Bool)

(declare-fun e!41717 () Bool)

(assert (=> d!13277 e!41717))

(declare-fun res!34799 () Bool)

(assert (=> d!13277 (=> res!34799 e!41717)))

(declare-fun lt!26887 () Bool)

(assert (=> d!13277 (= res!34799 (not lt!26887))))

(declare-fun lt!26888 () Bool)

(assert (=> d!13277 (= lt!26887 lt!26888)))

(declare-fun lt!26886 () Unit!1680)

(declare-fun e!41716 () Unit!1680)

(assert (=> d!13277 (= lt!26886 e!41716)))

(declare-fun c!8642 () Bool)

(assert (=> d!13277 (= c!8642 lt!26888)))

(assert (=> d!13277 (= lt!26888 (containsKey!130 (toList!691 lt!26362) (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!13277 (= (contains!686 lt!26362 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)) lt!26887)))

(declare-fun b!63648 () Bool)

(declare-fun lt!26889 () Unit!1680)

(assert (=> b!63648 (= e!41716 lt!26889)))

(assert (=> b!63648 (= lt!26889 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 lt!26362) (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63648 (isDefined!79 (getValueByKey!127 (toList!691 lt!26362) (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63649 () Bool)

(declare-fun Unit!1743 () Unit!1680)

(assert (=> b!63649 (= e!41716 Unit!1743)))

(declare-fun b!63650 () Bool)

(assert (=> b!63650 (= e!41717 (isDefined!79 (getValueByKey!127 (toList!691 lt!26362) (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!13277 c!8642) b!63648))

(assert (= (and d!13277 (not c!8642)) b!63649))

(assert (= (and d!13277 (not res!34799)) b!63650))

(assert (=> d!13277 m!56033))

(declare-fun m!58209 () Bool)

(assert (=> d!13277 m!58209))

(assert (=> b!63648 m!56033))

(declare-fun m!58211 () Bool)

(assert (=> b!63648 m!58211))

(assert (=> b!63648 m!56033))

(assert (=> b!63648 m!56653))

(assert (=> b!63648 m!56653))

(declare-fun m!58213 () Bool)

(assert (=> b!63648 m!58213))

(assert (=> b!63650 m!56033))

(assert (=> b!63650 m!56653))

(assert (=> b!63650 m!56653))

(assert (=> b!63650 m!58213))

(assert (=> b!62848 d!13277))

(declare-fun d!13279 () Bool)

(assert (=> d!13279 (= (get!1091 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62510 d!13279))

(declare-fun d!13281 () Bool)

(assert (=> d!13281 (isDefined!79 (getValueByKey!127 (toList!691 call!4877) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun lt!26890 () Unit!1680)

(assert (=> d!13281 (= lt!26890 (choose!341 (toList!691 call!4877) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun e!41718 () Bool)

(assert (=> d!13281 e!41718))

(declare-fun res!34800 () Bool)

(assert (=> d!13281 (=> (not res!34800) (not e!41718))))

(assert (=> d!13281 (= res!34800 (isStrictlySorted!273 (toList!691 call!4877)))))

(assert (=> d!13281 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 call!4877) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) lt!26890)))

(declare-fun b!63651 () Bool)

(assert (=> b!63651 (= e!41718 (containsKey!130 (toList!691 call!4877) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (= (and d!13281 res!34800) b!63651))

(assert (=> d!13281 m!55703))

(assert (=> d!13281 m!56101))

(assert (=> d!13281 m!56101))

(assert (=> d!13281 m!56103))

(assert (=> d!13281 m!55703))

(declare-fun m!58215 () Bool)

(assert (=> d!13281 m!58215))

(declare-fun m!58217 () Bool)

(assert (=> d!13281 m!58217))

(assert (=> b!63651 m!55703))

(assert (=> b!63651 m!56097))

(assert (=> b!62540 d!13281))

(assert (=> b!62540 d!12969))

(assert (=> b!62540 d!12971))

(declare-fun lt!26891 () Bool)

(declare-fun d!13283 () Bool)

(assert (=> d!13283 (= lt!26891 (select (content!69 (toList!691 lt!26121)) (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun e!41720 () Bool)

(assert (=> d!13283 (= lt!26891 e!41720)))

(declare-fun res!34801 () Bool)

(assert (=> d!13283 (=> (not res!34801) (not e!41720))))

(assert (=> d!13283 (= res!34801 ((_ is Cons!1425) (toList!691 lt!26121)))))

(assert (=> d!13283 (= (contains!689 (toList!691 lt!26121) (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))) lt!26891)))

(declare-fun b!63652 () Bool)

(declare-fun e!41719 () Bool)

(assert (=> b!63652 (= e!41720 e!41719)))

(declare-fun res!34802 () Bool)

(assert (=> b!63652 (=> res!34802 e!41719)))

(assert (=> b!63652 (= res!34802 (= (h!2008 (toList!691 lt!26121)) (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun b!63653 () Bool)

(assert (=> b!63653 (= e!41719 (contains!689 (t!4815 (toList!691 lt!26121)) (tuple2!2033 lt!26041 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))))

(assert (= (and d!13283 res!34801) b!63652))

(assert (= (and b!63652 (not res!34802)) b!63653))

(declare-fun m!58219 () Bool)

(assert (=> d!13283 m!58219))

(declare-fun m!58221 () Bool)

(assert (=> d!13283 m!58221))

(declare-fun m!58223 () Bool)

(assert (=> b!63653 m!58223))

(assert (=> b!62574 d!13283))

(declare-fun d!13285 () Bool)

(declare-fun e!41721 () Bool)

(assert (=> d!13285 e!41721))

(declare-fun res!34803 () Bool)

(assert (=> d!13285 (=> (not res!34803) (not e!41721))))

(declare-fun lt!26893 () ListLongMap!1351)

(assert (=> d!13285 (= res!34803 (contains!686 lt!26893 (_1!1027 (ite (or c!8400 c!8402) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))))

(declare-fun lt!26894 () List!1429)

(assert (=> d!13285 (= lt!26893 (ListLongMap!1352 lt!26894))))

(declare-fun lt!26892 () Unit!1680)

(declare-fun lt!26895 () Unit!1680)

(assert (=> d!13285 (= lt!26892 lt!26895)))

(assert (=> d!13285 (= (getValueByKey!127 lt!26894 (_1!1027 (ite (or c!8400 c!8402) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))) (Some!132 (_2!1027 (ite (or c!8400 c!8402) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))))

(assert (=> d!13285 (= lt!26895 (lemmaContainsTupThenGetReturnValue!44 lt!26894 (_1!1027 (ite (or c!8400 c!8402) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))) (_2!1027 (ite (or c!8400 c!8402) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))))

(assert (=> d!13285 (= lt!26894 (insertStrictlySorted!47 (toList!691 (ite c!8400 call!4944 (ite c!8402 call!4940 call!4943))) (_1!1027 (ite (or c!8400 c!8402) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))) (_2!1027 (ite (or c!8400 c!8402) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))))

(assert (=> d!13285 (= (+!82 (ite c!8400 call!4944 (ite c!8402 call!4940 call!4943)) (ite (or c!8400 c!8402) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))) lt!26893)))

(declare-fun b!63654 () Bool)

(declare-fun res!34804 () Bool)

(assert (=> b!63654 (=> (not res!34804) (not e!41721))))

(assert (=> b!63654 (= res!34804 (= (getValueByKey!127 (toList!691 lt!26893) (_1!1027 (ite (or c!8400 c!8402) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))) (Some!132 (_2!1027 (ite (or c!8400 c!8402) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))))

(declare-fun b!63655 () Bool)

(assert (=> b!63655 (= e!41721 (contains!689 (toList!691 lt!26893) (ite (or c!8400 c!8402) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(assert (= (and d!13285 res!34803) b!63654))

(assert (= (and b!63654 res!34804) b!63655))

(declare-fun m!58225 () Bool)

(assert (=> d!13285 m!58225))

(declare-fun m!58227 () Bool)

(assert (=> d!13285 m!58227))

(declare-fun m!58229 () Bool)

(assert (=> d!13285 m!58229))

(declare-fun m!58231 () Bool)

(assert (=> d!13285 m!58231))

(declare-fun m!58233 () Bool)

(assert (=> b!63654 m!58233))

(declare-fun m!58235 () Bool)

(assert (=> b!63655 m!58235))

(assert (=> bm!4937 d!13285))

(assert (=> d!12733 d!12729))

(assert (=> d!12733 d!12731))

(declare-fun d!13287 () Bool)

(assert (=> d!13287 (isDefined!79 (getValueByKey!127 (toList!691 lt!25841) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> d!13287 true))

(declare-fun _$12!311 () Unit!1680)

(assert (=> d!13287 (= (choose!341 (toList!691 lt!25841) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)) _$12!311)))

(declare-fun bs!2790 () Bool)

(assert (= bs!2790 d!13287))

(assert (=> bs!2790 m!55703))

(assert (=> bs!2790 m!55831))

(assert (=> bs!2790 m!55831))

(assert (=> bs!2790 m!55833))

(assert (=> d!12733 d!13287))

(declare-fun d!13289 () Bool)

(declare-fun res!34809 () Bool)

(declare-fun e!41726 () Bool)

(assert (=> d!13289 (=> res!34809 e!41726)))

(assert (=> d!13289 (= res!34809 (or ((_ is Nil!1426) (toList!691 lt!25841)) ((_ is Nil!1426) (t!4815 (toList!691 lt!25841)))))))

(assert (=> d!13289 (= (isStrictlySorted!273 (toList!691 lt!25841)) e!41726)))

(declare-fun b!63660 () Bool)

(declare-fun e!41727 () Bool)

(assert (=> b!63660 (= e!41726 e!41727)))

(declare-fun res!34810 () Bool)

(assert (=> b!63660 (=> (not res!34810) (not e!41727))))

(assert (=> b!63660 (= res!34810 (bvslt (_1!1027 (h!2008 (toList!691 lt!25841))) (_1!1027 (h!2008 (t!4815 (toList!691 lt!25841))))))))

(declare-fun b!63661 () Bool)

(assert (=> b!63661 (= e!41727 (isStrictlySorted!273 (t!4815 (toList!691 lt!25841))))))

(assert (= (and d!13289 (not res!34809)) b!63660))

(assert (= (and b!63660 res!34810) b!63661))

(declare-fun m!58237 () Bool)

(assert (=> b!63661 m!58237))

(assert (=> d!12733 d!13289))

(declare-fun b!63662 () Bool)

(declare-fun e!41729 () (_ BitVec 32))

(declare-fun call!5049 () (_ BitVec 32))

(assert (=> b!63662 (= e!41729 call!5049)))

(declare-fun b!63663 () Bool)

(assert (=> b!63663 (= e!41729 (bvadd #b00000000000000000000000000000001 call!5049))))

(declare-fun b!63664 () Bool)

(declare-fun e!41728 () (_ BitVec 32))

(assert (=> b!63664 (= e!41728 e!41729)))

(declare-fun c!8643 () Bool)

(assert (=> b!63664 (= c!8643 (validKeyInArray!0 (select (arr!1790 (_keys!3719 (_2!1026 lt!25975))) #b00000000000000000000000000000000)))))

(declare-fun d!13291 () Bool)

(declare-fun lt!26896 () (_ BitVec 32))

(assert (=> d!13291 (and (bvsge lt!26896 #b00000000000000000000000000000000) (bvsle lt!26896 (bvsub (size!2022 (_keys!3719 (_2!1026 lt!25975))) #b00000000000000000000000000000000)))))

(assert (=> d!13291 (= lt!26896 e!41728)))

(declare-fun c!8644 () Bool)

(assert (=> d!13291 (= c!8644 (bvsge #b00000000000000000000000000000000 (size!2022 (_keys!3719 (_2!1026 lt!25975)))))))

(assert (=> d!13291 (and (bvsle #b00000000000000000000000000000000 (size!2022 (_keys!3719 (_2!1026 lt!25975)))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2022 (_keys!3719 (_2!1026 lt!25975))) (size!2022 (_keys!3719 (_2!1026 lt!25975)))))))

(assert (=> d!13291 (= (arrayCountValidKeys!0 (_keys!3719 (_2!1026 lt!25975)) #b00000000000000000000000000000000 (size!2022 (_keys!3719 (_2!1026 lt!25975)))) lt!26896)))

(declare-fun bm!5046 () Bool)

(assert (=> bm!5046 (= call!5049 (arrayCountValidKeys!0 (_keys!3719 (_2!1026 lt!25975)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2022 (_keys!3719 (_2!1026 lt!25975)))))))

(declare-fun b!63665 () Bool)

(assert (=> b!63665 (= e!41728 #b00000000000000000000000000000000)))

(assert (= (and d!13291 c!8644) b!63665))

(assert (= (and d!13291 (not c!8644)) b!63664))

(assert (= (and b!63664 c!8643) b!63663))

(assert (= (and b!63664 (not c!8643)) b!63662))

(assert (= (or b!63663 b!63662) bm!5046))

(assert (=> b!63664 m!57097))

(assert (=> b!63664 m!57097))

(assert (=> b!63664 m!57101))

(declare-fun m!58239 () Bool)

(assert (=> bm!5046 m!58239))

(assert (=> b!62570 d!13291))

(assert (=> b!62658 d!13055))

(declare-fun d!13293 () Bool)

(assert (=> d!13293 (= (inRange!0 (ite c!8410 (index!3017 lt!26360) (index!3020 lt!26360)) (mask!5993 newMap!16)) (and (bvsge (ite c!8410 (index!3017 lt!26360) (index!3020 lt!26360)) #b00000000000000000000000000000000) (bvslt (ite c!8410 (index!3017 lt!26360) (index!3020 lt!26360)) (bvadd (mask!5993 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4948 d!13293))

(declare-fun d!13295 () Bool)

(assert (=> d!13295 (= (apply!68 lt!26077 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1092 (getValueByKey!127 (toList!691 lt!26077) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2791 () Bool)

(assert (= bs!2791 d!13295))

(assert (=> bs!2791 m!58073))

(assert (=> bs!2791 m!58073))

(declare-fun m!58241 () Bool)

(assert (=> bs!2791 m!58241))

(assert (=> b!62518 d!13295))

(assert (=> b!62612 d!13227))

(declare-fun d!13297 () Bool)

(declare-fun res!34811 () Bool)

(declare-fun e!41730 () Bool)

(assert (=> d!13297 (=> res!34811 e!41730)))

(assert (=> d!13297 (= res!34811 (and ((_ is Cons!1425) (toList!691 lt!26027)) (= (_1!1027 (h!2008 (toList!691 lt!26027))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!13297 (= (containsKey!130 (toList!691 lt!26027) #b1000000000000000000000000000000000000000000000000000000000000000) e!41730)))

(declare-fun b!63666 () Bool)

(declare-fun e!41731 () Bool)

(assert (=> b!63666 (= e!41730 e!41731)))

(declare-fun res!34812 () Bool)

(assert (=> b!63666 (=> (not res!34812) (not e!41731))))

(assert (=> b!63666 (= res!34812 (and (or (not ((_ is Cons!1425) (toList!691 lt!26027))) (bvsle (_1!1027 (h!2008 (toList!691 lt!26027))) #b1000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1425) (toList!691 lt!26027)) (bvslt (_1!1027 (h!2008 (toList!691 lt!26027))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!63667 () Bool)

(assert (=> b!63667 (= e!41731 (containsKey!130 (t!4815 (toList!691 lt!26027)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!13297 (not res!34811)) b!63666))

(assert (= (and b!63666 res!34812) b!63667))

(declare-fun m!58243 () Bool)

(assert (=> b!63667 m!58243))

(assert (=> d!12761 d!13297))

(assert (=> b!62838 d!12831))

(declare-fun b!63668 () Bool)

(declare-fun e!41732 () Option!133)

(assert (=> b!63668 (= e!41732 (Some!132 (_2!1027 (h!2008 (toList!691 lt!26100)))))))

(declare-fun c!8645 () Bool)

(declare-fun d!13299 () Bool)

(assert (=> d!13299 (= c!8645 (and ((_ is Cons!1425) (toList!691 lt!26100)) (= (_1!1027 (h!2008 (toList!691 lt!26100))) (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!13299 (= (getValueByKey!127 (toList!691 lt!26100) (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!41732)))

(declare-fun b!63669 () Bool)

(declare-fun e!41733 () Option!133)

(assert (=> b!63669 (= e!41732 e!41733)))

(declare-fun c!8646 () Bool)

(assert (=> b!63669 (= c!8646 (and ((_ is Cons!1425) (toList!691 lt!26100)) (not (= (_1!1027 (h!2008 (toList!691 lt!26100))) (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!63670 () Bool)

(assert (=> b!63670 (= e!41733 (getValueByKey!127 (t!4815 (toList!691 lt!26100)) (_1!1027 (tuple2!2033 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!63671 () Bool)

(assert (=> b!63671 (= e!41733 None!131)))

(assert (= (and d!13299 c!8645) b!63668))

(assert (= (and d!13299 (not c!8645)) b!63669))

(assert (= (and b!63669 c!8646) b!63670))

(assert (= (and b!63669 (not c!8646)) b!63671))

(declare-fun m!58245 () Bool)

(assert (=> b!63670 m!58245))

(assert (=> b!62532 d!13299))

(declare-fun d!13301 () Bool)

(declare-fun e!41735 () Bool)

(assert (=> d!13301 e!41735))

(declare-fun res!34813 () Bool)

(assert (=> d!13301 (=> res!34813 e!41735)))

(declare-fun lt!26898 () Bool)

(assert (=> d!13301 (= res!34813 (not lt!26898))))

(declare-fun lt!26899 () Bool)

(assert (=> d!13301 (= lt!26898 lt!26899)))

(declare-fun lt!26897 () Unit!1680)

(declare-fun e!41734 () Unit!1680)

(assert (=> d!13301 (= lt!26897 e!41734)))

(declare-fun c!8647 () Bool)

(assert (=> d!13301 (= c!8647 lt!26899)))

(assert (=> d!13301 (= lt!26899 (containsKey!130 (toList!691 lt!26362) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!13301 (= (contains!686 lt!26362 #b1000000000000000000000000000000000000000000000000000000000000000) lt!26898)))

(declare-fun b!63672 () Bool)

(declare-fun lt!26900 () Unit!1680)

(assert (=> b!63672 (= e!41734 lt!26900)))

(assert (=> b!63672 (= lt!26900 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 lt!26362) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63672 (isDefined!79 (getValueByKey!127 (toList!691 lt!26362) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63673 () Bool)

(declare-fun Unit!1744 () Unit!1680)

(assert (=> b!63673 (= e!41734 Unit!1744)))

(declare-fun b!63674 () Bool)

(assert (=> b!63674 (= e!41735 (isDefined!79 (getValueByKey!127 (toList!691 lt!26362) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!13301 c!8647) b!63672))

(assert (= (and d!13301 (not c!8647)) b!63673))

(assert (= (and d!13301 (not res!34813)) b!63674))

(declare-fun m!58247 () Bool)

(assert (=> d!13301 m!58247))

(declare-fun m!58249 () Bool)

(assert (=> b!63672 m!58249))

(assert (=> b!63672 m!57959))

(assert (=> b!63672 m!57959))

(declare-fun m!58251 () Bool)

(assert (=> b!63672 m!58251))

(assert (=> b!63674 m!57959))

(assert (=> b!63674 m!57959))

(assert (=> b!63674 m!58251))

(assert (=> bm!4955 d!13301))

(declare-fun lt!26901 () Bool)

(declare-fun d!13303 () Bool)

(assert (=> d!13303 (= lt!26901 (select (content!69 (toList!691 lt!26067)) (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun e!41737 () Bool)

(assert (=> d!13303 (= lt!26901 e!41737)))

(declare-fun res!34814 () Bool)

(assert (=> d!13303 (=> (not res!34814) (not e!41737))))

(assert (=> d!13303 (= res!34814 ((_ is Cons!1425) (toList!691 lt!26067)))))

(assert (=> d!13303 (= (contains!689 (toList!691 lt!26067) (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) lt!26901)))

(declare-fun b!63675 () Bool)

(declare-fun e!41736 () Bool)

(assert (=> b!63675 (= e!41737 e!41736)))

(declare-fun res!34815 () Bool)

(assert (=> b!63675 (=> res!34815 e!41736)))

(assert (=> b!63675 (= res!34815 (= (h!2008 (toList!691 lt!26067)) (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63676 () Bool)

(assert (=> b!63676 (= e!41736 (contains!689 (t!4815 (toList!691 lt!26067)) (ite (or c!8317 c!8319) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2419 (underlying!233 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(assert (= (and d!13303 res!34814) b!63675))

(assert (= (and b!63675 (not res!34815)) b!63676))

(declare-fun m!58253 () Bool)

(assert (=> d!13303 m!58253))

(declare-fun m!58255 () Bool)

(assert (=> d!13303 m!58255))

(declare-fun m!58257 () Bool)

(assert (=> b!63676 m!58257))

(assert (=> b!62497 d!13303))

(assert (=> b!62834 d!12831))

(assert (=> bm!4938 d!12999))

(assert (=> b!62743 d!12763))

(assert (=> b!62622 d!12811))

(assert (=> b!62622 d!12813))

(declare-fun d!13305 () Bool)

(assert (=> d!13305 (= (apply!68 lt!26362 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1092 (getValueByKey!127 (toList!691 lt!26362) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2792 () Bool)

(assert (= bs!2792 d!13305))

(assert (=> bs!2792 m!57943))

(assert (=> bs!2792 m!57943))

(declare-fun m!58259 () Bool)

(assert (=> bs!2792 m!58259))

(assert (=> b!62841 d!13305))

(assert (=> bm!4932 d!12749))

(declare-fun d!13307 () Bool)

(declare-fun res!34816 () Bool)

(declare-fun e!41738 () Bool)

(assert (=> d!13307 (=> res!34816 e!41738)))

(assert (=> d!13307 (= res!34816 (and ((_ is Cons!1425) (toList!691 lt!26027)) (= (_1!1027 (h!2008 (toList!691 lt!26027))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!13307 (= (containsKey!130 (toList!691 lt!26027) #b0000000000000000000000000000000000000000000000000000000000000000) e!41738)))

(declare-fun b!63677 () Bool)

(declare-fun e!41739 () Bool)

(assert (=> b!63677 (= e!41738 e!41739)))

(declare-fun res!34817 () Bool)

(assert (=> b!63677 (=> (not res!34817) (not e!41739))))

(assert (=> b!63677 (= res!34817 (and (or (not ((_ is Cons!1425) (toList!691 lt!26027))) (bvsle (_1!1027 (h!2008 (toList!691 lt!26027))) #b0000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1425) (toList!691 lt!26027)) (bvslt (_1!1027 (h!2008 (toList!691 lt!26027))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!63678 () Bool)

(assert (=> b!63678 (= e!41739 (containsKey!130 (t!4815 (toList!691 lt!26027)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!13307 (not res!34816)) b!63677))

(assert (= (and b!63677 res!34817) b!63678))

(declare-fun m!58261 () Bool)

(assert (=> b!63678 m!58261))

(assert (=> d!12647 d!13307))

(assert (=> d!12693 d!12691))

(assert (=> d!12693 d!12697))

(declare-fun d!13309 () Bool)

(declare-fun e!41741 () Bool)

(assert (=> d!13309 e!41741))

(declare-fun res!34818 () Bool)

(assert (=> d!13309 (=> res!34818 e!41741)))

(declare-fun lt!26903 () Bool)

(assert (=> d!13309 (= res!34818 (not lt!26903))))

(declare-fun lt!26904 () Bool)

(assert (=> d!13309 (= lt!26903 lt!26904)))

(declare-fun lt!26902 () Unit!1680)

(declare-fun e!41740 () Unit!1680)

(assert (=> d!13309 (= lt!26902 e!41740)))

(declare-fun c!8648 () Bool)

(assert (=> d!13309 (= c!8648 lt!26904)))

(assert (=> d!13309 (= lt!26904 (containsKey!130 (toList!691 lt!26034) lt!26033))))

(assert (=> d!13309 (= (contains!686 lt!26034 lt!26033) lt!26903)))

(declare-fun b!63679 () Bool)

(declare-fun lt!26905 () Unit!1680)

(assert (=> b!63679 (= e!41740 lt!26905)))

(assert (=> b!63679 (= lt!26905 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 lt!26034) lt!26033))))

(assert (=> b!63679 (isDefined!79 (getValueByKey!127 (toList!691 lt!26034) lt!26033))))

(declare-fun b!63680 () Bool)

(declare-fun Unit!1745 () Unit!1680)

(assert (=> b!63680 (= e!41740 Unit!1745)))

(declare-fun b!63681 () Bool)

(assert (=> b!63681 (= e!41741 (isDefined!79 (getValueByKey!127 (toList!691 lt!26034) lt!26033)))))

(assert (= (and d!13309 c!8648) b!63679))

(assert (= (and d!13309 (not c!8648)) b!63680))

(assert (= (and d!13309 (not res!34818)) b!63681))

(declare-fun m!58263 () Bool)

(assert (=> d!13309 m!58263))

(declare-fun m!58265 () Bool)

(assert (=> b!63679 m!58265))

(assert (=> b!63679 m!56185))

(assert (=> b!63679 m!56185))

(declare-fun m!58267 () Bool)

(assert (=> b!63679 m!58267))

(assert (=> b!63681 m!56185))

(assert (=> b!63681 m!56185))

(assert (=> b!63681 m!58267))

(assert (=> d!12693 d!13309))

(declare-fun d!13311 () Bool)

(assert (=> d!13311 (= (apply!68 (+!82 lt!26034 (tuple2!2033 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) lt!26033) (apply!68 lt!26034 lt!26033))))

(assert (=> d!13311 true))

(declare-fun _$34!779 () Unit!1680)

(assert (=> d!13311 (= (choose!339 lt!26034 lt!26042 (minValue!1999 (v!2419 (underlying!233 thiss!992))) lt!26033) _$34!779)))

(declare-fun bs!2793 () Bool)

(assert (= bs!2793 d!13311))

(assert (=> bs!2793 m!55897))

(assert (=> bs!2793 m!55897))

(assert (=> bs!2793 m!55901))

(assert (=> bs!2793 m!55915))

(assert (=> d!12693 d!13311))

(assert (=> d!12693 d!12705))

(declare-fun d!13313 () Bool)

(declare-fun lt!26906 () Bool)

(assert (=> d!13313 (= lt!26906 (select (content!69 (toList!691 lt!26152)) (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun e!41743 () Bool)

(assert (=> d!13313 (= lt!26906 e!41743)))

(declare-fun res!34819 () Bool)

(assert (=> d!13313 (=> (not res!34819) (not e!41743))))

(assert (=> d!13313 (= res!34819 ((_ is Cons!1425) (toList!691 lt!26152)))))

(assert (=> d!13313 (= (contains!689 (toList!691 lt!26152) (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))) lt!26906)))

(declare-fun b!63682 () Bool)

(declare-fun e!41742 () Bool)

(assert (=> b!63682 (= e!41743 e!41742)))

(declare-fun res!34820 () Bool)

(assert (=> b!63682 (=> res!34820 e!41742)))

(assert (=> b!63682 (= res!34820 (= (h!2008 (toList!691 lt!26152)) (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun b!63683 () Bool)

(assert (=> b!63683 (= e!41742 (contains!689 (t!4815 (toList!691 lt!26152)) (tuple2!2033 lt!26044 (zeroValue!1999 (v!2419 (underlying!233 thiss!992))))))))

(assert (= (and d!13313 res!34819) b!63682))

(assert (= (and b!63682 (not res!34820)) b!63683))

(declare-fun m!58269 () Bool)

(assert (=> d!13313 m!58269))

(declare-fun m!58271 () Bool)

(assert (=> d!13313 m!58271))

(declare-fun m!58273 () Bool)

(assert (=> b!63683 m!58273))

(assert (=> b!62617 d!13313))

(declare-fun d!13315 () Bool)

(declare-fun e!41744 () Bool)

(assert (=> d!13315 e!41744))

(declare-fun res!34821 () Bool)

(assert (=> d!13315 (=> (not res!34821) (not e!41744))))

(declare-fun lt!26908 () ListLongMap!1351)

(assert (=> d!13315 (= res!34821 (contains!686 lt!26908 (_1!1027 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!26909 () List!1429)

(assert (=> d!13315 (= lt!26908 (ListLongMap!1352 lt!26909))))

(declare-fun lt!26907 () Unit!1680)

(declare-fun lt!26910 () Unit!1680)

(assert (=> d!13315 (= lt!26907 lt!26910)))

(assert (=> d!13315 (= (getValueByKey!127 lt!26909 (_1!1027 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!132 (_2!1027 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!13315 (= lt!26910 (lemmaContainsTupThenGetReturnValue!44 lt!26909 (_1!1027 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!13315 (= lt!26909 (insertStrictlySorted!47 (toList!691 (getCurrentListMap!391 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (_1!1027 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!13315 (= (+!82 (getCurrentListMap!391 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26908)))

(declare-fun b!63684 () Bool)

(declare-fun res!34822 () Bool)

(assert (=> b!63684 (=> (not res!34822) (not e!41744))))

(assert (=> b!63684 (= res!34822 (= (getValueByKey!127 (toList!691 lt!26908) (_1!1027 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!132 (_2!1027 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!63685 () Bool)

(assert (=> b!63685 (= e!41744 (contains!689 (toList!691 lt!26908) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!13315 res!34821) b!63684))

(assert (= (and b!63684 res!34822) b!63685))

(declare-fun m!58275 () Bool)

(assert (=> d!13315 m!58275))

(declare-fun m!58277 () Bool)

(assert (=> d!13315 m!58277))

(declare-fun m!58279 () Bool)

(assert (=> d!13315 m!58279))

(declare-fun m!58281 () Bool)

(assert (=> d!13315 m!58281))

(declare-fun m!58283 () Bool)

(assert (=> b!63684 m!58283))

(declare-fun m!58285 () Bool)

(assert (=> b!63685 m!58285))

(assert (=> d!12645 d!13315))

(assert (=> d!12645 d!12793))

(declare-fun d!13317 () Bool)

(assert (=> d!13317 (= (+!82 (getCurrentListMap!391 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!391 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) lt!25962 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(assert (=> d!13317 true))

(declare-fun _$7!50 () Unit!1680)

(assert (=> d!13317 (= (choose!337 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) (extraKeys!1966 newMap!16) lt!25962 (zeroValue!1999 newMap!16) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1999 newMap!16) (defaultEntry!2087 newMap!16)) _$7!50)))

(declare-fun bs!2794 () Bool)

(assert (= bs!2794 d!13317))

(assert (=> bs!2794 m!55895))

(assert (=> bs!2794 m!55895))

(assert (=> bs!2794 m!55999))

(assert (=> bs!2794 m!55701))

(assert (=> bs!2794 m!55993))

(assert (=> d!12645 d!13317))

(assert (=> d!12645 d!12661))

(declare-fun b!63686 () Bool)

(declare-fun e!41752 () ListLongMap!1351)

(declare-fun call!5056 () ListLongMap!1351)

(assert (=> b!63686 (= e!41752 call!5056)))

(declare-fun b!63688 () Bool)

(declare-fun e!41755 () Bool)

(declare-fun e!41753 () Bool)

(assert (=> b!63688 (= e!41755 e!41753)))

(declare-fun res!34826 () Bool)

(declare-fun call!5051 () Bool)

(assert (=> b!63688 (= res!34826 call!5051)))

(assert (=> b!63688 (=> (not res!34826) (not e!41753))))

(declare-fun b!63689 () Bool)

(declare-fun e!41749 () Bool)

(assert (=> b!63689 (= e!41749 (validKeyInArray!0 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun c!8651 () Bool)

(declare-fun call!5054 () ListLongMap!1351)

(declare-fun call!5052 () ListLongMap!1351)

(declare-fun c!8653 () Bool)

(declare-fun call!5050 () ListLongMap!1351)

(declare-fun call!5053 () ListLongMap!1351)

(declare-fun bm!5047 () Bool)

(assert (=> bm!5047 (= call!5052 (+!82 (ite c!8651 call!5054 (ite c!8653 call!5050 call!5053)) (ite (or c!8651 c!8653) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(declare-fun b!63690 () Bool)

(assert (=> b!63690 (= e!41755 (not call!5051))))

(declare-fun b!63691 () Bool)

(declare-fun e!41746 () ListLongMap!1351)

(assert (=> b!63691 (= e!41746 call!5056)))

(declare-fun b!63692 () Bool)

(declare-fun e!41745 () Bool)

(declare-fun lt!26911 () ListLongMap!1351)

(assert (=> b!63692 (= e!41745 (= (apply!68 lt!26911 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!63693 () Bool)

(assert (=> b!63693 (= e!41753 (= (apply!68 lt!26911 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1999 newMap!16)))))

(declare-fun bm!5048 () Bool)

(assert (=> bm!5048 (= call!5054 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) lt!25962 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun b!63694 () Bool)

(declare-fun e!41751 () Bool)

(assert (=> b!63694 (= e!41751 (= (apply!68 lt!26911 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)) (get!1088 (select (arr!1791 (_values!2070 newMap!16)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!63694 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2023 (_values!2070 newMap!16))))))

(assert (=> b!63694 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun b!63695 () Bool)

(declare-fun e!41748 () Unit!1680)

(declare-fun lt!26922 () Unit!1680)

(assert (=> b!63695 (= e!41748 lt!26922)))

(declare-fun lt!26929 () ListLongMap!1351)

(assert (=> b!63695 (= lt!26929 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) lt!25962 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26925 () (_ BitVec 64))

(assert (=> b!63695 (= lt!26925 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26919 () (_ BitVec 64))

(assert (=> b!63695 (= lt!26919 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26931 () Unit!1680)

(assert (=> b!63695 (= lt!26931 (addStillContains!44 lt!26929 lt!26925 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!26919))))

(assert (=> b!63695 (contains!686 (+!82 lt!26929 (tuple2!2033 lt!26925 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26919)))

(declare-fun lt!26912 () Unit!1680)

(assert (=> b!63695 (= lt!26912 lt!26931)))

(declare-fun lt!26918 () ListLongMap!1351)

(assert (=> b!63695 (= lt!26918 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) lt!25962 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26926 () (_ BitVec 64))

(assert (=> b!63695 (= lt!26926 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26917 () (_ BitVec 64))

(assert (=> b!63695 (= lt!26917 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26920 () Unit!1680)

(assert (=> b!63695 (= lt!26920 (addApplyDifferent!44 lt!26918 lt!26926 (minValue!1999 newMap!16) lt!26917))))

(assert (=> b!63695 (= (apply!68 (+!82 lt!26918 (tuple2!2033 lt!26926 (minValue!1999 newMap!16))) lt!26917) (apply!68 lt!26918 lt!26917))))

(declare-fun lt!26914 () Unit!1680)

(assert (=> b!63695 (= lt!26914 lt!26920)))

(declare-fun lt!26932 () ListLongMap!1351)

(assert (=> b!63695 (= lt!26932 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) lt!25962 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26928 () (_ BitVec 64))

(assert (=> b!63695 (= lt!26928 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26915 () (_ BitVec 64))

(assert (=> b!63695 (= lt!26915 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26924 () Unit!1680)

(assert (=> b!63695 (= lt!26924 (addApplyDifferent!44 lt!26932 lt!26928 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!26915))))

(assert (=> b!63695 (= (apply!68 (+!82 lt!26932 (tuple2!2033 lt!26928 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26915) (apply!68 lt!26932 lt!26915))))

(declare-fun lt!26921 () Unit!1680)

(assert (=> b!63695 (= lt!26921 lt!26924)))

(declare-fun lt!26927 () ListLongMap!1351)

(assert (=> b!63695 (= lt!26927 (getCurrentListMapNoExtraKeys!46 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) lt!25962 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26916 () (_ BitVec 64))

(assert (=> b!63695 (= lt!26916 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26930 () (_ BitVec 64))

(assert (=> b!63695 (= lt!26930 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!63695 (= lt!26922 (addApplyDifferent!44 lt!26927 lt!26916 (minValue!1999 newMap!16) lt!26930))))

(assert (=> b!63695 (= (apply!68 (+!82 lt!26927 (tuple2!2033 lt!26916 (minValue!1999 newMap!16))) lt!26930) (apply!68 lt!26927 lt!26930))))

(declare-fun b!63696 () Bool)

(declare-fun e!41754 () Bool)

(assert (=> b!63696 (= e!41754 (validKeyInArray!0 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63697 () Bool)

(declare-fun e!41756 () Bool)

(assert (=> b!63697 (= e!41756 e!41755)))

(declare-fun c!8652 () Bool)

(assert (=> b!63697 (= c!8652 (not (= (bvand lt!25962 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!63698 () Bool)

(declare-fun e!41747 () Bool)

(declare-fun call!5055 () Bool)

(assert (=> b!63698 (= e!41747 (not call!5055))))

(declare-fun b!63699 () Bool)

(declare-fun e!41757 () Bool)

(assert (=> b!63699 (= e!41757 e!41751)))

(declare-fun res!34825 () Bool)

(assert (=> b!63699 (=> (not res!34825) (not e!41751))))

(assert (=> b!63699 (= res!34825 (contains!686 lt!26911 (select (arr!1790 (_keys!3719 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63699 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun d!13319 () Bool)

(assert (=> d!13319 e!41756))

(declare-fun res!34830 () Bool)

(assert (=> d!13319 (=> (not res!34830) (not e!41756))))

(assert (=> d!13319 (= res!34830 (or (bvsge #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))))

(declare-fun lt!26913 () ListLongMap!1351)

(assert (=> d!13319 (= lt!26911 lt!26913)))

(declare-fun lt!26923 () Unit!1680)

(assert (=> d!13319 (= lt!26923 e!41748)))

(declare-fun c!8654 () Bool)

(assert (=> d!13319 (= c!8654 e!41749)))

(declare-fun res!34827 () Bool)

(assert (=> d!13319 (=> (not res!34827) (not e!41749))))

(assert (=> d!13319 (= res!34827 (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun e!41750 () ListLongMap!1351)

(assert (=> d!13319 (= lt!26913 e!41750)))

(assert (=> d!13319 (= c!8651 (and (not (= (bvand lt!25962 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!25962 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!13319 (validMask!0 (mask!5993 newMap!16))))

(assert (=> d!13319 (= (getCurrentListMap!391 (_keys!3719 newMap!16) (_values!2070 newMap!16) (mask!5993 newMap!16) lt!25962 (get!1088 (select (arr!1791 (_values!2070 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) lt!26911)))

(declare-fun b!63687 () Bool)

(assert (=> b!63687 (= e!41750 (+!82 call!5052 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))

(declare-fun bm!5049 () Bool)

(assert (=> bm!5049 (= call!5050 call!5054)))

(declare-fun b!63700 () Bool)

(assert (=> b!63700 (= e!41747 e!41745)))

(declare-fun res!34823 () Bool)

(assert (=> b!63700 (= res!34823 call!5055)))

(assert (=> b!63700 (=> (not res!34823) (not e!41745))))

(declare-fun b!63701 () Bool)

(declare-fun c!8650 () Bool)

(assert (=> b!63701 (= c!8650 (and (not (= (bvand lt!25962 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!25962 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!63701 (= e!41746 e!41752)))

(declare-fun bm!5050 () Bool)

(assert (=> bm!5050 (= call!5053 call!5050)))

(declare-fun bm!5051 () Bool)

(assert (=> bm!5051 (= call!5051 (contains!686 lt!26911 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!5052 () Bool)

(assert (=> bm!5052 (= call!5055 (contains!686 lt!26911 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63702 () Bool)

(declare-fun res!34828 () Bool)

(assert (=> b!63702 (=> (not res!34828) (not e!41756))))

(assert (=> b!63702 (= res!34828 e!41757)))

(declare-fun res!34831 () Bool)

(assert (=> b!63702 (=> res!34831 e!41757)))

(assert (=> b!63702 (= res!34831 (not e!41754))))

(declare-fun res!34829 () Bool)

(assert (=> b!63702 (=> (not res!34829) (not e!41754))))

(assert (=> b!63702 (= res!34829 (bvslt #b00000000000000000000000000000000 (size!2022 (_keys!3719 newMap!16))))))

(declare-fun b!63703 () Bool)

(declare-fun Unit!1746 () Unit!1680)

(assert (=> b!63703 (= e!41748 Unit!1746)))

(declare-fun b!63704 () Bool)

(assert (=> b!63704 (= e!41752 call!5053)))

(declare-fun bm!5053 () Bool)

(assert (=> bm!5053 (= call!5056 call!5052)))

(declare-fun b!63705 () Bool)

(declare-fun res!34824 () Bool)

(assert (=> b!63705 (=> (not res!34824) (not e!41756))))

(assert (=> b!63705 (= res!34824 e!41747)))

(declare-fun c!8649 () Bool)

(assert (=> b!63705 (= c!8649 (not (= (bvand lt!25962 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!63706 () Bool)

(assert (=> b!63706 (= e!41750 e!41746)))

(assert (=> b!63706 (= c!8653 (and (not (= (bvand lt!25962 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!25962 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!13319 c!8651) b!63687))

(assert (= (and d!13319 (not c!8651)) b!63706))

(assert (= (and b!63706 c!8653) b!63691))

(assert (= (and b!63706 (not c!8653)) b!63701))

(assert (= (and b!63701 c!8650) b!63686))

(assert (= (and b!63701 (not c!8650)) b!63704))

(assert (= (or b!63686 b!63704) bm!5050))

(assert (= (or b!63691 bm!5050) bm!5049))

(assert (= (or b!63691 b!63686) bm!5053))

(assert (= (or b!63687 bm!5049) bm!5048))

(assert (= (or b!63687 bm!5053) bm!5047))

(assert (= (and d!13319 res!34827) b!63689))

(assert (= (and d!13319 c!8654) b!63695))

(assert (= (and d!13319 (not c!8654)) b!63703))

(assert (= (and d!13319 res!34830) b!63702))

(assert (= (and b!63702 res!34829) b!63696))

(assert (= (and b!63702 (not res!34831)) b!63699))

(assert (= (and b!63699 res!34825) b!63694))

(assert (= (and b!63702 res!34828) b!63705))

(assert (= (and b!63705 c!8649) b!63700))

(assert (= (and b!63705 (not c!8649)) b!63698))

(assert (= (and b!63700 res!34823) b!63692))

(assert (= (or b!63700 b!63698) bm!5052))

(assert (= (and b!63705 res!34824) b!63697))

(assert (= (and b!63697 c!8652) b!63688))

(assert (= (and b!63697 (not c!8652)) b!63690))

(assert (= (and b!63688 res!34826) b!63693))

(assert (= (or b!63688 b!63690) bm!5051))

(declare-fun b_lambda!2843 () Bool)

(assert (=> (not b_lambda!2843) (not b!63694)))

(assert (=> b!63694 t!4828))

(declare-fun b_and!3905 () Bool)

(assert (= b_and!3901 (and (=> t!4828 result!2455) b_and!3905)))

(assert (=> b!63694 t!4830))

(declare-fun b_and!3907 () Bool)

(assert (= b_and!3903 (and (=> t!4830 result!2457) b_and!3907)))

(declare-fun m!58287 () Bool)

(assert (=> b!63695 m!58287))

(assert (=> b!63695 m!55701))

(declare-fun m!58289 () Bool)

(assert (=> b!63695 m!58289))

(assert (=> b!63695 m!58287))

(declare-fun m!58291 () Bool)

(assert (=> b!63695 m!58291))

(assert (=> b!63695 m!56033))

(assert (=> b!63695 m!55701))

(declare-fun m!58293 () Bool)

(assert (=> b!63695 m!58293))

(declare-fun m!58295 () Bool)

(assert (=> b!63695 m!58295))

(declare-fun m!58297 () Bool)

(assert (=> b!63695 m!58297))

(declare-fun m!58299 () Bool)

(assert (=> b!63695 m!58299))

(declare-fun m!58301 () Bool)

(assert (=> b!63695 m!58301))

(declare-fun m!58303 () Bool)

(assert (=> b!63695 m!58303))

(declare-fun m!58305 () Bool)

(assert (=> b!63695 m!58305))

(declare-fun m!58307 () Bool)

(assert (=> b!63695 m!58307))

(assert (=> b!63695 m!55701))

(declare-fun m!58309 () Bool)

(assert (=> b!63695 m!58309))

(assert (=> b!63695 m!58297))

(declare-fun m!58311 () Bool)

(assert (=> b!63695 m!58311))

(declare-fun m!58313 () Bool)

(assert (=> b!63695 m!58313))

(declare-fun m!58315 () Bool)

(assert (=> b!63695 m!58315))

(assert (=> b!63695 m!58311))

(assert (=> b!63695 m!58301))

(declare-fun m!58317 () Bool)

(assert (=> b!63695 m!58317))

(declare-fun m!58319 () Bool)

(assert (=> b!63692 m!58319))

(assert (=> b!63699 m!56033))

(assert (=> b!63699 m!56033))

(declare-fun m!58321 () Bool)

(assert (=> b!63699 m!58321))

(assert (=> b!63696 m!56033))

(assert (=> b!63696 m!56033))

(assert (=> b!63696 m!56065))

(declare-fun m!58323 () Bool)

(assert (=> bm!5052 m!58323))

(declare-fun m!58325 () Bool)

(assert (=> b!63687 m!58325))

(assert (=> d!13319 m!55995))

(declare-fun m!58327 () Bool)

(assert (=> bm!5047 m!58327))

(assert (=> b!63694 m!56073))

(assert (=> b!63694 m!56075))

(assert (=> b!63694 m!56033))

(assert (=> b!63694 m!56075))

(assert (=> b!63694 m!56073))

(assert (=> b!63694 m!56077))

(assert (=> b!63694 m!56033))

(declare-fun m!58329 () Bool)

(assert (=> b!63694 m!58329))

(declare-fun m!58331 () Bool)

(assert (=> b!63693 m!58331))

(assert (=> bm!5048 m!55701))

(assert (=> bm!5048 m!58309))

(assert (=> b!63689 m!56033))

(assert (=> b!63689 m!56033))

(assert (=> b!63689 m!56065))

(declare-fun m!58333 () Bool)

(assert (=> bm!5051 m!58333))

(assert (=> d!12645 d!13319))

(declare-fun bm!5054 () Bool)

(declare-fun call!5057 () Bool)

(assert (=> bm!5054 (= call!5057 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3719 (v!2419 (underlying!233 thiss!992))) (mask!5993 (v!2419 (underlying!233 thiss!992)))))))

(declare-fun b!63707 () Bool)

(declare-fun e!41760 () Bool)

(assert (=> b!63707 (= e!41760 call!5057)))

(declare-fun b!63708 () Bool)

(declare-fun e!41759 () Bool)

(assert (=> b!63708 (= e!41759 call!5057)))

(declare-fun b!63709 () Bool)

(declare-fun e!41758 () Bool)

(assert (=> b!63709 (= e!41758 e!41759)))

(declare-fun c!8655 () Bool)

(assert (=> b!63709 (= c!8655 (validKeyInArray!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!63710 () Bool)

(assert (=> b!63710 (= e!41759 e!41760)))

(declare-fun lt!26934 () (_ BitVec 64))

(assert (=> b!63710 (= lt!26934 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) #b00000000000000000000000000000000))))

(declare-fun lt!26935 () Unit!1680)

(assert (=> b!63710 (= lt!26935 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3719 (v!2419 (underlying!233 thiss!992))) lt!26934 #b00000000000000000000000000000000))))

(assert (=> b!63710 (arrayContainsKey!0 (_keys!3719 (v!2419 (underlying!233 thiss!992))) lt!26934 #b00000000000000000000000000000000)))

(declare-fun lt!26933 () Unit!1680)

(assert (=> b!63710 (= lt!26933 lt!26935)))

(declare-fun res!34832 () Bool)

(assert (=> b!63710 (= res!34832 (= (seekEntryOrOpen!0 (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) #b00000000000000000000000000000000) (_keys!3719 (v!2419 (underlying!233 thiss!992))) (mask!5993 (v!2419 (underlying!233 thiss!992)))) (Found!223 #b00000000000000000000000000000000)))))

(assert (=> b!63710 (=> (not res!34832) (not e!41760))))

(declare-fun d!13321 () Bool)

(declare-fun res!34833 () Bool)

(assert (=> d!13321 (=> res!34833 e!41758)))

(assert (=> d!13321 (= res!34833 (bvsge #b00000000000000000000000000000000 (size!2022 (_keys!3719 (v!2419 (underlying!233 thiss!992))))))))

(assert (=> d!13321 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3719 (v!2419 (underlying!233 thiss!992))) (mask!5993 (v!2419 (underlying!233 thiss!992)))) e!41758)))

(assert (= (and d!13321 (not res!34833)) b!63709))

(assert (= (and b!63709 c!8655) b!63710))

(assert (= (and b!63709 (not c!8655)) b!63708))

(assert (= (and b!63710 res!34832) b!63707))

(assert (= (or b!63707 b!63708) bm!5054))

(declare-fun m!58335 () Bool)

(assert (=> bm!5054 m!58335))

(assert (=> b!63709 m!56823))

(assert (=> b!63709 m!56823))

(assert (=> b!63709 m!56825))

(assert (=> b!63710 m!56823))

(declare-fun m!58337 () Bool)

(assert (=> b!63710 m!58337))

(declare-fun m!58339 () Bool)

(assert (=> b!63710 m!58339))

(assert (=> b!63710 m!56823))

(declare-fun m!58341 () Bool)

(assert (=> b!63710 m!58341))

(assert (=> b!62704 d!13321))

(declare-fun d!13323 () Bool)

(declare-fun e!41762 () Bool)

(assert (=> d!13323 e!41762))

(declare-fun res!34834 () Bool)

(assert (=> d!13323 (=> res!34834 e!41762)))

(declare-fun lt!26937 () Bool)

(assert (=> d!13323 (= res!34834 (not lt!26937))))

(declare-fun lt!26938 () Bool)

(assert (=> d!13323 (= lt!26937 lt!26938)))

(declare-fun lt!26936 () Unit!1680)

(declare-fun e!41761 () Unit!1680)

(assert (=> d!13323 (= lt!26936 e!41761)))

(declare-fun c!8656 () Bool)

(assert (=> d!13323 (= c!8656 lt!26938)))

(assert (=> d!13323 (= lt!26938 (containsKey!130 (toList!691 lt!26043) lt!26046))))

(assert (=> d!13323 (= (contains!686 lt!26043 lt!26046) lt!26937)))

(declare-fun b!63711 () Bool)

(declare-fun lt!26939 () Unit!1680)

(assert (=> b!63711 (= e!41761 lt!26939)))

(assert (=> b!63711 (= lt!26939 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!691 lt!26043) lt!26046))))

(assert (=> b!63711 (isDefined!79 (getValueByKey!127 (toList!691 lt!26043) lt!26046))))

(declare-fun b!63712 () Bool)

(declare-fun Unit!1747 () Unit!1680)

(assert (=> b!63712 (= e!41761 Unit!1747)))

(declare-fun b!63713 () Bool)

(assert (=> b!63713 (= e!41762 (isDefined!79 (getValueByKey!127 (toList!691 lt!26043) lt!26046)))))

(assert (= (and d!13323 c!8656) b!63711))

(assert (= (and d!13323 (not c!8656)) b!63712))

(assert (= (and d!13323 (not res!34834)) b!63713))

(declare-fun m!58343 () Bool)

(assert (=> d!13323 m!58343))

(declare-fun m!58345 () Bool)

(assert (=> b!63711 m!58345))

(assert (=> b!63711 m!56209))

(assert (=> b!63711 m!56209))

(declare-fun m!58347 () Bool)

(assert (=> b!63711 m!58347))

(assert (=> b!63713 m!56209))

(assert (=> b!63713 m!56209))

(assert (=> b!63713 m!58347))

(assert (=> d!12683 d!13323))

(declare-fun d!13325 () Bool)

(assert (=> d!13325 (= (apply!68 (+!82 lt!26043 (tuple2!2033 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992))))) lt!26046) (apply!68 lt!26043 lt!26046))))

(assert (=> d!13325 true))

(declare-fun _$34!780 () Unit!1680)

(assert (=> d!13325 (= (choose!339 lt!26043 lt!26032 (minValue!1999 (v!2419 (underlying!233 thiss!992))) lt!26046) _$34!780)))

(declare-fun bs!2795 () Bool)

(assert (= bs!2795 d!13325))

(assert (=> bs!2795 m!55909))

(assert (=> bs!2795 m!55909))

(assert (=> bs!2795 m!55911))

(assert (=> bs!2795 m!55907))

(assert (=> d!12683 d!13325))

(assert (=> d!12683 d!12701))

(assert (=> d!12683 d!12707))

(assert (=> d!12683 d!12709))

(declare-fun b!63714 () Bool)

(declare-fun e!41763 () Option!133)

(assert (=> b!63714 (= e!41763 (Some!132 (_2!1027 (h!2008 (toList!691 lt!26217)))))))

(declare-fun d!13327 () Bool)

(declare-fun c!8657 () Bool)

(assert (=> d!13327 (= c!8657 (and ((_ is Cons!1425) (toList!691 lt!26217)) (= (_1!1027 (h!2008 (toList!691 lt!26217))) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> d!13327 (= (getValueByKey!127 (toList!691 lt!26217) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))) e!41763)))

(declare-fun b!63715 () Bool)

(declare-fun e!41764 () Option!133)

(assert (=> b!63715 (= e!41763 e!41764)))

(declare-fun c!8658 () Bool)

(assert (=> b!63715 (= c!8658 (and ((_ is Cons!1425) (toList!691 lt!26217)) (not (= (_1!1027 (h!2008 (toList!691 lt!26217))) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))))

(declare-fun b!63716 () Bool)

(assert (=> b!63716 (= e!41764 (getValueByKey!127 (t!4815 (toList!691 lt!26217)) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63717 () Bool)

(assert (=> b!63717 (= e!41764 None!131)))

(assert (= (and d!13327 c!8657) b!63714))

(assert (= (and d!13327 (not c!8657)) b!63715))

(assert (= (and b!63715 c!8658) b!63716))

(assert (= (and b!63715 (not c!8658)) b!63717))

(declare-fun m!58349 () Bool)

(assert (=> b!63716 m!58349))

(assert (=> b!62701 d!13327))

(assert (=> b!62521 d!12831))

(declare-fun d!13329 () Bool)

(declare-fun res!34835 () Bool)

(declare-fun e!41765 () Bool)

(assert (=> d!13329 (=> res!34835 e!41765)))

(assert (=> d!13329 (= res!34835 (= (select (arr!1790 (_keys!3719 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> d!13329 (= (arrayContainsKey!0 (_keys!3719 newMap!16) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) e!41765)))

(declare-fun b!63718 () Bool)

(declare-fun e!41766 () Bool)

(assert (=> b!63718 (= e!41765 e!41766)))

(declare-fun res!34836 () Bool)

(assert (=> b!63718 (=> (not res!34836) (not e!41766))))

(assert (=> b!63718 (= res!34836 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2022 (_keys!3719 newMap!16))))))

(declare-fun b!63719 () Bool)

(assert (=> b!63719 (= e!41766 (arrayContainsKey!0 (_keys!3719 newMap!16) (select (arr!1790 (_keys!3719 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!13329 (not res!34835)) b!63718))

(assert (= (and b!63718 res!34836) b!63719))

(assert (=> d!13329 m!56697))

(assert (=> b!63719 m!55703))

(declare-fun m!58351 () Bool)

(assert (=> b!63719 m!58351))

(assert (=> b!62770 d!13329))

(declare-fun mapNonEmpty!2957 () Bool)

(declare-fun mapRes!2957 () Bool)

(declare-fun tp!8141 () Bool)

(declare-fun e!41768 () Bool)

(assert (=> mapNonEmpty!2957 (= mapRes!2957 (and tp!8141 e!41768))))

(declare-fun mapRest!2957 () (Array (_ BitVec 32) ValueCell!863))

(declare-fun mapValue!2957 () ValueCell!863)

(declare-fun mapKey!2957 () (_ BitVec 32))

(assert (=> mapNonEmpty!2957 (= mapRest!2956 (store mapRest!2957 mapKey!2957 mapValue!2957))))

(declare-fun condMapEmpty!2957 () Bool)

(declare-fun mapDefault!2957 () ValueCell!863)

(assert (=> mapNonEmpty!2956 (= condMapEmpty!2957 (= mapRest!2956 ((as const (Array (_ BitVec 32) ValueCell!863)) mapDefault!2957)))))

(declare-fun e!41767 () Bool)

(assert (=> mapNonEmpty!2956 (= tp!8140 (and e!41767 mapRes!2957))))

(declare-fun b!63721 () Bool)

(assert (=> b!63721 (= e!41767 tp_is_empty!2413)))

(declare-fun b!63720 () Bool)

(assert (=> b!63720 (= e!41768 tp_is_empty!2413)))

(declare-fun mapIsEmpty!2957 () Bool)

(assert (=> mapIsEmpty!2957 mapRes!2957))

(assert (= (and mapNonEmpty!2956 condMapEmpty!2957) mapIsEmpty!2957))

(assert (= (and mapNonEmpty!2956 (not condMapEmpty!2957)) mapNonEmpty!2957))

(assert (= (and mapNonEmpty!2957 ((_ is ValueCellFull!863) mapValue!2957)) b!63720))

(assert (= (and mapNonEmpty!2956 ((_ is ValueCellFull!863) mapDefault!2957)) b!63721))

(declare-fun m!58353 () Bool)

(assert (=> mapNonEmpty!2957 m!58353))

(declare-fun mapNonEmpty!2958 () Bool)

(declare-fun mapRes!2958 () Bool)

(declare-fun tp!8142 () Bool)

(declare-fun e!41770 () Bool)

(assert (=> mapNonEmpty!2958 (= mapRes!2958 (and tp!8142 e!41770))))

(declare-fun mapKey!2958 () (_ BitVec 32))

(declare-fun mapValue!2958 () ValueCell!863)

(declare-fun mapRest!2958 () (Array (_ BitVec 32) ValueCell!863))

(assert (=> mapNonEmpty!2958 (= mapRest!2955 (store mapRest!2958 mapKey!2958 mapValue!2958))))

(declare-fun condMapEmpty!2958 () Bool)

(declare-fun mapDefault!2958 () ValueCell!863)

(assert (=> mapNonEmpty!2955 (= condMapEmpty!2958 (= mapRest!2955 ((as const (Array (_ BitVec 32) ValueCell!863)) mapDefault!2958)))))

(declare-fun e!41769 () Bool)

(assert (=> mapNonEmpty!2955 (= tp!8139 (and e!41769 mapRes!2958))))

(declare-fun b!63723 () Bool)

(assert (=> b!63723 (= e!41769 tp_is_empty!2413)))

(declare-fun b!63722 () Bool)

(assert (=> b!63722 (= e!41770 tp_is_empty!2413)))

(declare-fun mapIsEmpty!2958 () Bool)

(assert (=> mapIsEmpty!2958 mapRes!2958))

(assert (= (and mapNonEmpty!2955 condMapEmpty!2958) mapIsEmpty!2958))

(assert (= (and mapNonEmpty!2955 (not condMapEmpty!2958)) mapNonEmpty!2958))

(assert (= (and mapNonEmpty!2958 ((_ is ValueCellFull!863) mapValue!2958)) b!63722))

(assert (= (and mapNonEmpty!2955 ((_ is ValueCellFull!863) mapDefault!2958)) b!63723))

(declare-fun m!58355 () Bool)

(assert (=> mapNonEmpty!2958 m!58355))

(declare-fun b_lambda!2845 () Bool)

(assert (= b_lambda!2817 (or (and b!62113 b_free!1993 (= (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2087 newMap!16))) (and b!62120 b_free!1995) b_lambda!2845)))

(declare-fun b_lambda!2847 () Bool)

(assert (= b_lambda!2843 (or (and b!62113 b_free!1993 (= (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2087 newMap!16))) (and b!62120 b_free!1995) b_lambda!2847)))

(declare-fun b_lambda!2849 () Bool)

(assert (= b_lambda!2839 (or (and b!62113 b_free!1993) (and b!62120 b_free!1995 (= (defaultEntry!2087 newMap!16) (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))))) b_lambda!2849)))

(declare-fun b_lambda!2851 () Bool)

(assert (= b_lambda!2825 (or (and b!62113 b_free!1993 (= (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2087 newMap!16))) (and b!62120 b_free!1995) b_lambda!2851)))

(declare-fun b_lambda!2853 () Bool)

(assert (= b_lambda!2831 (or (and b!62113 b_free!1993 (= (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2087 newMap!16))) (and b!62120 b_free!1995) b_lambda!2853)))

(declare-fun b_lambda!2855 () Bool)

(assert (= b_lambda!2833 (or (and b!62113 b_free!1993 (= (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2087 newMap!16))) (and b!62120 b_free!1995) b_lambda!2855)))

(declare-fun b_lambda!2857 () Bool)

(assert (= b_lambda!2829 (or (and b!62113 b_free!1993 (= (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2087 newMap!16))) (and b!62120 b_free!1995) b_lambda!2857)))

(declare-fun b_lambda!2859 () Bool)

(assert (= b_lambda!2841 (or (and b!62113 b_free!1993) (and b!62120 b_free!1995 (= (defaultEntry!2087 newMap!16) (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))))) b_lambda!2859)))

(declare-fun b_lambda!2861 () Bool)

(assert (= b_lambda!2837 (or (and b!62113 b_free!1993 (= (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2087 newMap!16))) (and b!62120 b_free!1995) b_lambda!2861)))

(declare-fun b_lambda!2863 () Bool)

(assert (= b_lambda!2827 (or (and b!62113 b_free!1993 (= (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2087 newMap!16))) (and b!62120 b_free!1995) b_lambda!2863)))

(declare-fun b_lambda!2865 () Bool)

(assert (= b_lambda!2815 (or (and b!62113 b_free!1993 (= (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2087 newMap!16))) (and b!62120 b_free!1995) b_lambda!2865)))

(declare-fun b_lambda!2867 () Bool)

(assert (= b_lambda!2835 (or (and b!62113 b_free!1993 (= (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2087 newMap!16))) (and b!62120 b_free!1995) b_lambda!2867)))

(declare-fun b_lambda!2869 () Bool)

(assert (= b_lambda!2819 (or (and b!62113 b_free!1993 (= (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2087 newMap!16))) (and b!62120 b_free!1995) b_lambda!2869)))

(declare-fun b_lambda!2871 () Bool)

(assert (= b_lambda!2813 (or (and b!62113 b_free!1993 (= (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2087 newMap!16))) (and b!62120 b_free!1995) b_lambda!2871)))

(declare-fun b_lambda!2873 () Bool)

(assert (= b_lambda!2821 (or (and b!62113 b_free!1993 (= (defaultEntry!2087 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2087 newMap!16))) (and b!62120 b_free!1995) b_lambda!2873)))

(check-sat (not b!63134) (not d!13165) (not d!13241) (not b!62865) (not d!13189) (not d!13237) (not b!63337) (not b!63598) (not d!12985) (not b!62917) (not b_lambda!2811) (not b!63081) (not b!63694) (not b!63348) (not b!63674) (not b!63369) (not b!63514) (not d!13113) (not b!63574) (not b!63531) (not b!63122) (not b!63031) (not d!13257) (not b!63347) (not bm!4979) (not mapNonEmpty!2957) (not d!13053) (not d!13263) (not d!12949) (not b!63252) (not bm!5034) (not d!12977) (not b!62893) (not b!63128) (not b!63421) (not bm!5019) (not b!63575) (not b!62951) (not b!62934) (not bm!5046) (not d!13041) (not b!62976) (not b!63160) (not b_lambda!2857) (not b!63613) (not b!63271) (not d!12859) (not b!63419) (not b!63693) (not d!12809) (not b!63676) (not b!63034) (not b!63146) (not b!63243) (not bm!4973) (not b!63580) (not b!63607) (not b!63567) (not b!63442) (not d!12849) (not b!63362) (not d!13057) (not b!63198) (not b!63181) (not b!63464) (not b!63477) (not d!12829) (not b!63360) (not b!63145) (not b!63092) (not b!63681) (not b!63189) (not b_next!1995) (not d!13281) (not b!63683) (not b!63412) (not d!12825) (not b!63305) (not bm!5026) (not b!63284) (not d!12981) (not b!63667) (not bm!5008) (not b!63143) (not d!13155) (not d!13251) (not d!12909) (not d!13261) (not d!13127) (not d!13001) (not d!12901) (not b!62996) (not b!63028) (not d!13301) (not bm!5020) (not b!63173) (not b!63116) (not d!13323) (not b!63596) (not bm!4970) (not d!13221) (not d!13131) (not b_lambda!2869) (not d!13129) (not d!13175) (not b!63628) (not b!63429) (not b!62981) (not b!63719) (not b!63566) (not d!13033) (not b!63619) (not b!62964) (not b_lambda!2865) (not d!12905) (not b!63289) (not b!63385) (not d!13067) (not b!63188) (not b!63208) (not b!63278) (not b!63711) (not d!13191) (not b!63253) (not b_lambda!2849) (not b!63133) (not b!63291) (not d!13311) (not b!63621) (not b!63353) (not b!63050) (not b!63201) (not b!62908) (not b!63420) (not b!63525) (not b!63393) (not b!63038) (not bm!4985) (not bm!5041) (not d!12965) (not b_lambda!2867) (not b!63390) (not b_lambda!2809) (not d!12961) (not d!12903) (not b!63267) (not d!13315) (not bm!5000) (not d!13265) (not d!13283) (not d!12839) (not b!63182) (not d!13249) (not b!63131) (not d!13085) (not d!13245) (not b!63093) (not d!13087) (not b!63287) (not d!12983) (not b!63268) (not bm!4978) (not b!63510) (not d!13173) (not b!63374) (not b!62997) (not d!13011) (not d!12975) (not b!63709) (not bm!5037) (not b!62872) (not b!63057) (not b!62926) (not d!12785) (not b!63490) (not d!13031) (not b_lambda!2851) (not b!63440) (not d!12897) (not b!62959) (not b!62862) (not d!12893) (not b!63418) tp_is_empty!2413 (not d!12989) (not b!62942) (not b!63300) (not b!63153) (not b!63685) (not b!63250) (not b!63428) (not d!13013) (not d!12883) (not b!63199) (not b!63351) (not bm!4966) (not b!63299) (not b!63572) (not b!62860) (not d!13091) (not b!63642) (not b!63371) (not d!13043) (not b!62913) (not b!62967) (not b!63441) (not d!13137) (not b!63137) (not bm!4994) (not d!13199) (not b!63435) (not d!13215) (not d!12869) (not d!13063) (not d!13161) (not b!63265) (not d!12987) (not b!63401) (not b!63629) (not b!62945) (not d!12801) (not b!63185) (not d!13089) (not b!62905) (not d!13081) (not b!63187) (not b!63039) (not b!63576) (not b!63587) (not bm!5027) (not b!62966) (not b!63695) (not d!12899) (not b!62948) (not d!13287) (not b!63650) (not b!63530) (not b!63577) (not d!13325) (not b!62969) (not d!13093) (not b!63254) (not d!13275) (not b!62909) (not b!63037) (not b!63617) (not b!63132) (not b_lambda!2801) (not d!12931) (not d!12879) (not b!63382) (not bm!5023) (not b!63275) (not b!63192) (not d!13269) (not d!13219) (not b!63521) (not bm!5029) (not b!62955) (not b!63476) (not b!63590) (not bm!4986) (not b_lambda!2859) (not d!13223) (not b!63277) (not b!63569) (not b!63710) (not d!12995) (not b!63664) (not b!63661) (not b!62937) (not b!63593) (not d!12919) (not d!12811) (not b!63340) (not b!63104) (not d!13095) (not b!63346) (not b!63606) (not d!13171) (not b!62916) (not b!63052) (not b!62943) (not b!63624) (not bm!4992) (not d!13049) (not d!13247) (not b!63003) (not b!63515) (not b!63461) (not b!63200) (not d!13017) (not b!63186) (not b!63158) (not b!63203) (not d!12991) (not b!63444) (not b!63364) (not b!62958) (not b!63692) (not b!63358) (not b!63466) (not b!63288) (not d!12997) (not d!12827) (not d!13083) (not d!12855) (not b!63159) (not b!63069) (not b!63699) (not b!63620) (not b!63207) (not b_lambda!2853) (not d!12937) (not b!63098) (not d!13267) (not bm!5021) (not b!63023) (not b!63205) (not d!13159) (not d!12875) (not d!13259) (not b!63588) (not d!12913) (not b!62971) (not b!63614) (not d!13239) (not b_lambda!2823) (not d!12769) (not d!13071) (not b_lambda!2783) (not d!13097) (not b!63175) (not d!13207) (not b!63443) (not d!13285) (not b!63512) (not b!63140) (not b!63610) (not d!12781) (not b!63639) (not bm!5013) (not b!62977) (not b!63055) (not d!12895) (not b!63301) (not d!12841) (not bm!5052) (not d!13111) (not b!63528) (not b!63112) (not b!63389) (not b!63264) (not b!63349) (not b!63072) (not b!63473) (not d!13317) (not b!63074) (not d!13227) (not b!63597) (not bm!5016) (not b!62923) (not b!63608) (not b!62978) (not d!12833) (not b!63080) (not bm!5007) (not b!62975) (not b!63156) (not bm!4974) (not b!63398) (not b_lambda!2803) (not b!63474) (not d!12867) (not d!13025) (not d!13193) (not b!63282) (not b!63716) (not b!63615) (not d!12847) (not b!63601) (not b!63163) (not b!63655) (not d!12939) (not b!63564) b_and!3905 (not d!13003) (not b!62871) (not b!63090) (not bm!5003) (not b!63266) (not b!63054) (not d!13243) (not b!63179) (not b!63209) (not d!12821) (not b!63458) (not b!63653) (not b!63195) (not b!63247) (not b!63123) (not b!63029) (not b!63494) (not bm!4991) (not b!62925) (not b!62897) (not d!13005) (not b!63368) (not d!12881) (not b!63526) (not d!13233) (not b!62991) (not d!13109) (not mapNonEmpty!2958) (not bm!4999) (not d!13169) (not d!13101) (not d!13077) (not b!63518) (not d!12979) (not b!63562) (not b!63042) (not d!12791) (not b!63437) (not b!62961) (not b!63333) (not b!63523) (not d!13229) (not b!63082) (not b!63604) (not d!13313) (not b!63455) (not b!63279) (not d!13195) (not d!13009) (not bm!4967) (not b!63073) (not bm!4984) (not b!63636) (not b!63070) (not bm!5030) (not bm!5033) (not b!63612) (not d!12963) (not b!63355) (not d!13305) (not b!63679) (not d!13135) (not bm!4983) (not b!63342) (not d!12917) (not b!63067) (not d!13273) (not b!63367) (not d!12889) (not bm!5036) (not b!63294) (not b!63499) (not b!63075) (not bm!4988) (not b_lambda!2861) (not b!63338) (not b!63651) (not d!13015) (not d!13141) (not b!63399) (not b!63687) (not bm!5015) (not bm!5038) (not b!63285) (not b_lambda!2855) (not d!12969) (not b!63331) (not d!13231) (not b!63151) (not d!12773) (not d!13079) (not b!63424) (not b!62989) (not b!63255) (not b_lambda!2807) (not d!13303) (not b!63370) (not bm!5048) (not b!63008) b_and!3907 (not d!13073) (not b!63447) (not d!12891) (not b!62946) (not d!12863) (not b!63197) (not b!62932) (not b!63565) (not d!12999) (not d!13099) (not d!12797) (not d!13123) (not b!62933) (not d!12907) (not b!63407) (not d!12815) (not d!12885) (not b!63107) (not b!63696) (not d!13157) (not d!13277) (not b_lambda!2805) (not b!63391) (not b!62922) (not b!63064) (not d!12973) (not b!63060) (not b!63670) (not bm!5022) (not b!63470) (not b!62998) (not b!63638) (not d!12967) (not d!13181) (not bm!5045) (not d!13117) (not b!63011) (not b!62894) (not b!63637) (not b!63654) (not b!62994) (not b!63352) (not b!63396) (not d!13153) (not b!63006) (not b!63027) (not b!63509) (not bm!5004) (not d!13075) (not d!12807) (not d!12775) (not d!13021) (not b!63019) (not d!13061) (not b!63125) (not b!63297) (not b!63595) (not b!63555) (not bm!4980) (not b!63036) (not b_lambda!2871) (not b!63406) (not b!63177) (not d!13029) (not b!63475) (not b!63216) (not d!13039) (not d!12887) (not d!13201) (not b!63561) (not b!63258) (not bm!5042) (not b!62920) (not bm!5047) (not b!63339) (not b!62940) (not d!12857) (not d!13125) (not d!12923) (not b!63409) (not d!13217) (not b!63404) (not d!13255) (not d!13115) (not d!13139) (not b!63591) (not b!63157) (not d!13225) (not d!13295) (not bm!4969) (not d!13179) (not d!13143) (not b_lambda!2845) (not bm!4968) (not b!63115) (not b!63689) (not b!63357) (not b!63335) (not b!63532) (not b!63648) (not bm!5012) (not d!12877) (not b!63713) (not d!13319) (not b!63062) (not d!12779) (not b!63079) (not d!12951) (not b_lambda!2863) (not b!62915) (not bm!5009) (not b!63292) (not b!63005) (not b!63344) (not b!63634) (not b_next!1993) (not b!62935) (not b!63623) (not b!63432) (not b!63141) (not b!63468) (not b!63672) (not b!63202) (not b!63206) (not b!63086) (not b_lambda!2873) (not d!12843) (not b_lambda!2787) (not d!12795) (not b!63678) (not d!13253) (not b!63603) (not bm!5054) (not b!63000) (not b!63395) (not d!13105) (not b!63302) (not b!63007) (not b!63684) (not d!13107) (not b!63327) (not bm!4987) (not b!63194) (not b!63214) (not b!63517) (not b!63618) (not d!13019) (not b!63063) (not b!63520) (not bm!5051) (not b!63144) (not b!63095) (not b!63480) (not b!62974) (not b!63408) (not d!13309) (not b!63083) (not b!63118) (not d!12993) (not d!12805) (not b!63180) (not b!63120) (not b!63245) (not b!63077) (not b!63459) (not b!63061) (not b_lambda!2847) (not b!63148) (not b!63631) (not d!13211))
(check-sat b_and!3905 b_and!3907 (not b_next!1993) (not b_next!1995))
