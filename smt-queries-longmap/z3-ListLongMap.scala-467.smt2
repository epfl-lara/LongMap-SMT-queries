; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!8872 () Bool)

(assert start!8872)

(declare-fun b!62272 () Bool)

(declare-fun b_free!1997 () Bool)

(declare-fun b_next!1997 () Bool)

(assert (=> b!62272 (= b_free!1997 (not b_next!1997))))

(declare-fun tp!8121 () Bool)

(declare-fun b_and!3811 () Bool)

(assert (=> b!62272 (= tp!8121 b_and!3811)))

(declare-fun b!62266 () Bool)

(declare-fun b_free!1999 () Bool)

(declare-fun b_next!1999 () Bool)

(assert (=> b!62266 (= b_free!1999 (not b_next!1999))))

(declare-fun tp!8120 () Bool)

(declare-fun b_and!3813 () Bool)

(assert (=> b!62266 (= tp!8120 b_and!3813)))

(declare-fun b!62258 () Bool)

(declare-fun e!40887 () Bool)

(declare-datatypes ((V!2867 0))(
  ( (V!2868 (val!1252 Int)) )
))
(declare-datatypes ((array!3761 0))(
  ( (array!3762 (arr!1799 (Array (_ BitVec 32) (_ BitVec 64))) (size!2031 (_ BitVec 32))) )
))
(declare-datatypes ((ValueCell!864 0))(
  ( (ValueCellFull!864 (v!2418 V!2867)) (EmptyCell!864) )
))
(declare-datatypes ((array!3763 0))(
  ( (array!3764 (arr!1800 (Array (_ BitVec 32) ValueCell!864)) (size!2032 (_ BitVec 32))) )
))
(declare-datatypes ((LongMapFixedSize!636 0))(
  ( (LongMapFixedSize!637 (defaultEntry!2088 Int) (mask!5994 (_ BitVec 32)) (extraKeys!1967 (_ BitVec 32)) (zeroValue!2000 V!2867) (minValue!2000 V!2867) (_size!367 (_ BitVec 32)) (_keys!3720 array!3761) (_values!2071 array!3763) (_vacant!367 (_ BitVec 32))) )
))
(declare-datatypes ((Cell!444 0))(
  ( (Cell!445 (v!2419 LongMapFixedSize!636)) )
))
(declare-datatypes ((LongMap!444 0))(
  ( (LongMap!445 (underlying!233 Cell!444)) )
))
(declare-fun thiss!992 () LongMap!444)

(assert (=> b!62258 (= e!40887 (and (= (size!2032 (_values!2071 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 (mask!5994 (v!2419 (underlying!233 thiss!992))))) (= (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (size!2032 (_values!2071 (v!2419 (underlying!233 thiss!992))))) (bvsge (mask!5994 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000000) (bvsge (extraKeys!1967 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000000) (bvsgt (extraKeys!1967 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000011)))))

(declare-fun b!62259 () Bool)

(declare-fun e!40890 () Bool)

(declare-fun tp_is_empty!2415 () Bool)

(assert (=> b!62259 (= e!40890 tp_is_empty!2415)))

(declare-fun mapNonEmpty!2943 () Bool)

(declare-fun mapRes!2943 () Bool)

(declare-fun tp!8122 () Bool)

(declare-fun e!40893 () Bool)

(assert (=> mapNonEmpty!2943 (= mapRes!2943 (and tp!8122 e!40893))))

(declare-fun mapValue!2944 () ValueCell!864)

(declare-fun mapKey!2943 () (_ BitVec 32))

(declare-fun mapRest!2943 () (Array (_ BitVec 32) ValueCell!864))

(declare-fun newMap!16 () LongMapFixedSize!636)

(assert (=> mapNonEmpty!2943 (= (arr!1800 (_values!2071 newMap!16)) (store mapRest!2943 mapKey!2943 mapValue!2944))))

(declare-fun b!62261 () Bool)

(declare-fun e!40891 () Bool)

(assert (=> b!62261 (= e!40891 tp_is_empty!2415)))

(declare-fun b!62262 () Bool)

(declare-fun res!34206 () Bool)

(assert (=> b!62262 (=> (not res!34206) (not e!40887))))

(declare-fun validMask!0 ((_ BitVec 32)) Bool)

(assert (=> b!62262 (= res!34206 (validMask!0 (mask!5994 (v!2419 (underlying!233 thiss!992)))))))

(declare-fun b!62263 () Bool)

(declare-fun e!40895 () Bool)

(assert (=> b!62263 (= e!40895 (and e!40890 mapRes!2943))))

(declare-fun condMapEmpty!2944 () Bool)

(declare-fun mapDefault!2943 () ValueCell!864)

(assert (=> b!62263 (= condMapEmpty!2944 (= (arr!1800 (_values!2071 newMap!16)) ((as const (Array (_ BitVec 32) ValueCell!864)) mapDefault!2943)))))

(declare-fun b!62264 () Bool)

(declare-datatypes ((Unit!1693 0))(
  ( (Unit!1694) )
))
(declare-fun e!40896 () Unit!1693)

(declare-fun Unit!1695 () Unit!1693)

(assert (=> b!62264 (= e!40896 Unit!1695)))

(declare-fun mapIsEmpty!2943 () Bool)

(declare-fun mapRes!2944 () Bool)

(assert (=> mapIsEmpty!2943 mapRes!2944))

(declare-fun mapIsEmpty!2944 () Bool)

(assert (=> mapIsEmpty!2944 mapRes!2943))

(declare-fun b!62265 () Bool)

(declare-fun e!40884 () Bool)

(assert (=> b!62265 (= e!40884 tp_is_empty!2415)))

(declare-fun mapNonEmpty!2944 () Bool)

(declare-fun tp!8119 () Bool)

(assert (=> mapNonEmpty!2944 (= mapRes!2944 (and tp!8119 e!40891))))

(declare-fun mapValue!2943 () ValueCell!864)

(declare-fun mapKey!2944 () (_ BitVec 32))

(declare-fun mapRest!2944 () (Array (_ BitVec 32) ValueCell!864))

(assert (=> mapNonEmpty!2944 (= (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) (store mapRest!2944 mapKey!2944 mapValue!2943))))

(declare-fun e!40883 () Bool)

(declare-fun array_inv!1111 (array!3761) Bool)

(declare-fun array_inv!1112 (array!3763) Bool)

(assert (=> b!62266 (= e!40883 (and tp!8120 tp_is_empty!2415 (array_inv!1111 (_keys!3720 newMap!16)) (array_inv!1112 (_values!2071 newMap!16)) e!40895))))

(declare-fun b!62267 () Bool)

(declare-fun e!40886 () Bool)

(declare-fun e!40894 () Bool)

(assert (=> b!62267 (= e!40886 e!40894)))

(declare-fun b!62268 () Bool)

(declare-fun res!34210 () Bool)

(declare-fun e!40881 () Bool)

(assert (=> b!62268 (=> (not res!34210) (not e!40881))))

(declare-fun valid!262 (LongMapFixedSize!636) Bool)

(assert (=> b!62268 (= res!34210 (valid!262 newMap!16))))

(declare-fun b!62269 () Bool)

(declare-fun e!40885 () Bool)

(assert (=> b!62269 (= e!40885 (and e!40884 mapRes!2944))))

(declare-fun condMapEmpty!2943 () Bool)

(declare-fun mapDefault!2944 () ValueCell!864)

(assert (=> b!62269 (= condMapEmpty!2943 (= (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) ((as const (Array (_ BitVec 32) ValueCell!864)) mapDefault!2944)))))

(declare-fun b!62270 () Bool)

(declare-fun e!40882 () Bool)

(assert (=> b!62270 (= e!40881 e!40882)))

(declare-fun res!34208 () Bool)

(assert (=> b!62270 (=> (not res!34208) (not e!40882))))

(declare-datatypes ((tuple2!2038 0))(
  ( (tuple2!2039 (_1!1030 (_ BitVec 64)) (_2!1030 V!2867)) )
))
(declare-datatypes ((List!1439 0))(
  ( (Nil!1436) (Cons!1435 (h!2018 tuple2!2038) (t!4833 List!1439)) )
))
(declare-datatypes ((ListLongMap!1373 0))(
  ( (ListLongMap!1374 (toList!702 List!1439)) )
))
(declare-fun lt!25957 () ListLongMap!1373)

(declare-fun lt!25956 () ListLongMap!1373)

(declare-fun from!355 () (_ BitVec 32))

(assert (=> b!62270 (= res!34208 (and (= lt!25957 lt!25956) (not (= (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun map!1115 (LongMapFixedSize!636) ListLongMap!1373)

(assert (=> b!62270 (= lt!25956 (map!1115 newMap!16))))

(declare-fun getCurrentListMap!406 (array!3761 array!3763 (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 (_ BitVec 32) Int) ListLongMap!1373)

(assert (=> b!62270 (= lt!25957 (getCurrentListMap!406 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (_values!2071 (v!2419 (underlying!233 thiss!992))) (mask!5994 (v!2419 (underlying!233 thiss!992))) (extraKeys!1967 (v!2419 (underlying!233 thiss!992))) (zeroValue!2000 (v!2419 (underlying!233 thiss!992))) (minValue!2000 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2088 (v!2419 (underlying!233 thiss!992)))))))

(declare-fun b!62260 () Bool)

(assert (=> b!62260 (= e!40893 tp_is_empty!2415)))

(declare-fun res!34207 () Bool)

(assert (=> start!8872 (=> (not res!34207) (not e!40881))))

(declare-fun valid!263 (LongMap!444) Bool)

(assert (=> start!8872 (= res!34207 (valid!263 thiss!992))))

(assert (=> start!8872 e!40881))

(declare-fun e!40889 () Bool)

(assert (=> start!8872 e!40889))

(assert (=> start!8872 true))

(assert (=> start!8872 e!40883))

(declare-fun b!62271 () Bool)

(declare-fun res!34205 () Bool)

(assert (=> b!62271 (=> (not res!34205) (not e!40881))))

(assert (=> b!62271 (= res!34205 (and (bvsge from!355 #b00000000000000000000000000000000) (bvslt from!355 (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> b!62272 (= e!40894 (and tp!8121 tp_is_empty!2415 (array_inv!1111 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (array_inv!1112 (_values!2071 (v!2419 (underlying!233 thiss!992)))) e!40885))))

(declare-fun b!62273 () Bool)

(declare-fun Unit!1696 () Unit!1693)

(assert (=> b!62273 (= e!40896 Unit!1696)))

(declare-fun lt!25961 () Unit!1693)

(declare-fun lemmaListMapContainsThenArrayContainsFrom!34 (array!3761 array!3763 (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 (_ BitVec 64) (_ BitVec 32) Int) Unit!1693)

(assert (=> b!62273 (= lt!25961 (lemmaListMapContainsThenArrayContainsFrom!34 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (_values!2071 (v!2419 (underlying!233 thiss!992))) (mask!5994 (v!2419 (underlying!233 thiss!992))) (extraKeys!1967 (v!2419 (underlying!233 thiss!992))) (zeroValue!2000 (v!2419 (underlying!233 thiss!992))) (minValue!2000 (v!2419 (underlying!233 thiss!992))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2088 (v!2419 (underlying!233 thiss!992)))))))

(declare-fun arrayContainsKey!0 (array!3761 (_ BitVec 64) (_ BitVec 32)) Bool)

(assert (=> b!62273 (arrayContainsKey!0 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355))))

(declare-fun lt!25960 () Unit!1693)

(declare-fun lemmaNoDuplicateFromThenFromBigger!0 (array!3761 (_ BitVec 32) (_ BitVec 32)) Unit!1693)

(assert (=> b!62273 (= lt!25960 (lemmaNoDuplicateFromThenFromBigger!0 (_keys!3720 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000000 from!355))))

(declare-datatypes ((List!1440 0))(
  ( (Nil!1437) (Cons!1436 (h!2019 (_ BitVec 64)) (t!4834 List!1440)) )
))
(declare-fun arrayNoDuplicates!0 (array!3761 (_ BitVec 32) List!1440) Bool)

(assert (=> b!62273 (arrayNoDuplicates!0 (_keys!3720 (v!2419 (underlying!233 thiss!992))) from!355 Nil!1437)))

(declare-fun lt!25962 () Unit!1693)

(declare-fun lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (array!3761 (_ BitVec 32) (_ BitVec 64) List!1440) Unit!1693)

(assert (=> b!62273 (= lt!25962 (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (Cons!1436 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1437)))))

(assert (=> b!62273 false))

(declare-fun b!62274 () Bool)

(assert (=> b!62274 (= e!40882 e!40887)))

(declare-fun res!34209 () Bool)

(assert (=> b!62274 (=> (not res!34209) (not e!40887))))

(declare-datatypes ((tuple2!2040 0))(
  ( (tuple2!2041 (_1!1031 Bool) (_2!1031 LongMapFixedSize!636)) )
))
(declare-fun lt!25958 () tuple2!2040)

(assert (=> b!62274 (= res!34209 (and (_1!1031 lt!25958) (bvsgt from!355 #b00000000000000000000000000000000)))))

(declare-fun lt!25959 () Unit!1693)

(assert (=> b!62274 (= lt!25959 e!40896)))

(declare-fun c!8275 () Bool)

(declare-fun contains!690 (ListLongMap!1373 (_ BitVec 64)) Bool)

(assert (=> b!62274 (= c!8275 (contains!690 lt!25956 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun update!77 (LongMapFixedSize!636 (_ BitVec 64) V!2867) tuple2!2040)

(declare-fun get!1082 (ValueCell!864 V!2867) V!2867)

(declare-fun dynLambda!308 (Int (_ BitVec 64)) V!2867)

(assert (=> b!62274 (= lt!25958 (update!77 newMap!16 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!62275 () Bool)

(declare-fun res!34211 () Bool)

(assert (=> b!62275 (=> (not res!34211) (not e!40881))))

(assert (=> b!62275 (= res!34211 (bvsge (bvadd #b00000000000000000000000000000001 (mask!5994 newMap!16)) (_size!367 (v!2419 (underlying!233 thiss!992)))))))

(declare-fun b!62276 () Bool)

(assert (=> b!62276 (= e!40889 e!40886)))

(assert (= (and start!8872 res!34207) b!62271))

(assert (= (and b!62271 res!34205) b!62268))

(assert (= (and b!62268 res!34210) b!62275))

(assert (= (and b!62275 res!34211) b!62270))

(assert (= (and b!62270 res!34208) b!62274))

(assert (= (and b!62274 c!8275) b!62273))

(assert (= (and b!62274 (not c!8275)) b!62264))

(assert (= (and b!62274 res!34209) b!62262))

(assert (= (and b!62262 res!34206) b!62258))

(assert (= (and b!62269 condMapEmpty!2943) mapIsEmpty!2943))

(assert (= (and b!62269 (not condMapEmpty!2943)) mapNonEmpty!2944))

(get-info :version)

(assert (= (and mapNonEmpty!2944 ((_ is ValueCellFull!864) mapValue!2943)) b!62261))

(assert (= (and b!62269 ((_ is ValueCellFull!864) mapDefault!2944)) b!62265))

(assert (= b!62272 b!62269))

(assert (= b!62267 b!62272))

(assert (= b!62276 b!62267))

(assert (= start!8872 b!62276))

(assert (= (and b!62263 condMapEmpty!2944) mapIsEmpty!2944))

(assert (= (and b!62263 (not condMapEmpty!2944)) mapNonEmpty!2943))

(assert (= (and mapNonEmpty!2943 ((_ is ValueCellFull!864) mapValue!2944)) b!62260))

(assert (= (and b!62263 ((_ is ValueCellFull!864) mapDefault!2943)) b!62259))

(assert (= b!62266 b!62263))

(assert (= start!8872 b!62266))

(declare-fun b_lambda!2785 () Bool)

(assert (=> (not b_lambda!2785) (not b!62274)))

(declare-fun t!4830 () Bool)

(declare-fun tb!1369 () Bool)

(assert (=> (and b!62272 (= (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2088 (v!2419 (underlying!233 thiss!992)))) t!4830) tb!1369))

(declare-fun result!2445 () Bool)

(assert (=> tb!1369 (= result!2445 tp_is_empty!2415)))

(assert (=> b!62274 t!4830))

(declare-fun b_and!3815 () Bool)

(assert (= b_and!3811 (and (=> t!4830 result!2445) b_and!3815)))

(declare-fun t!4832 () Bool)

(declare-fun tb!1371 () Bool)

(assert (=> (and b!62266 (= (defaultEntry!2088 newMap!16) (defaultEntry!2088 (v!2419 (underlying!233 thiss!992)))) t!4832) tb!1371))

(declare-fun result!2449 () Bool)

(assert (= result!2449 result!2445))

(assert (=> b!62274 t!4832))

(declare-fun b_and!3817 () Bool)

(assert (= b_and!3813 (and (=> t!4832 result!2449) b_and!3817)))

(declare-fun m!56045 () Bool)

(assert (=> start!8872 m!56045))

(declare-fun m!56047 () Bool)

(assert (=> b!62273 m!56047))

(declare-fun m!56049 () Bool)

(assert (=> b!62273 m!56049))

(declare-fun m!56051 () Bool)

(assert (=> b!62273 m!56051))

(declare-fun m!56053 () Bool)

(assert (=> b!62273 m!56053))

(assert (=> b!62273 m!56051))

(assert (=> b!62273 m!56051))

(declare-fun m!56055 () Bool)

(assert (=> b!62273 m!56055))

(assert (=> b!62273 m!56051))

(declare-fun m!56057 () Bool)

(assert (=> b!62273 m!56057))

(declare-fun m!56059 () Bool)

(assert (=> b!62274 m!56059))

(declare-fun m!56061 () Bool)

(assert (=> b!62274 m!56061))

(declare-fun m!56063 () Bool)

(assert (=> b!62274 m!56063))

(assert (=> b!62274 m!56051))

(declare-fun m!56065 () Bool)

(assert (=> b!62274 m!56065))

(assert (=> b!62274 m!56051))

(assert (=> b!62274 m!56061))

(assert (=> b!62274 m!56051))

(assert (=> b!62274 m!56063))

(declare-fun m!56067 () Bool)

(assert (=> b!62274 m!56067))

(assert (=> b!62274 m!56059))

(declare-fun m!56069 () Bool)

(assert (=> mapNonEmpty!2944 m!56069))

(declare-fun m!56071 () Bool)

(assert (=> mapNonEmpty!2943 m!56071))

(declare-fun m!56073 () Bool)

(assert (=> b!62266 m!56073))

(declare-fun m!56075 () Bool)

(assert (=> b!62266 m!56075))

(declare-fun m!56077 () Bool)

(assert (=> b!62272 m!56077))

(declare-fun m!56079 () Bool)

(assert (=> b!62272 m!56079))

(assert (=> b!62270 m!56051))

(declare-fun m!56081 () Bool)

(assert (=> b!62270 m!56081))

(declare-fun m!56083 () Bool)

(assert (=> b!62270 m!56083))

(declare-fun m!56085 () Bool)

(assert (=> b!62268 m!56085))

(declare-fun m!56087 () Bool)

(assert (=> b!62262 m!56087))

(check-sat tp_is_empty!2415 b_and!3817 (not b!62273) b_and!3815 (not b!62262) (not b_next!1999) (not b_next!1997) (not b_lambda!2785) (not mapNonEmpty!2943) (not b!62266) (not b!62272) (not mapNonEmpty!2944) (not b!62270) (not b!62274) (not b!62268) (not start!8872))
(check-sat b_and!3815 b_and!3817 (not b_next!1997) (not b_next!1999))
(get-model)

(declare-fun b_lambda!2789 () Bool)

(assert (= b_lambda!2785 (or (and b!62272 b_free!1997) (and b!62266 b_free!1999 (= (defaultEntry!2088 newMap!16) (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))))) b_lambda!2789)))

(check-sat tp_is_empty!2415 b_and!3817 (not b!62273) b_and!3815 (not b_lambda!2789) (not b!62262) (not b_next!1999) (not b_next!1997) (not mapNonEmpty!2943) (not b!62266) (not b!62272) (not mapNonEmpty!2944) (not b!62270) (not b!62274) (not b!62268) (not start!8872))
(check-sat b_and!3815 b_and!3817 (not b_next!1997) (not b_next!1999))
(get-model)

(declare-fun d!12669 () Bool)

(assert (=> d!12669 (= (array_inv!1111 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvsge (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!62272 d!12669))

(declare-fun d!12671 () Bool)

(assert (=> d!12671 (= (array_inv!1112 (_values!2071 (v!2419 (underlying!233 thiss!992)))) (bvsge (size!2032 (_values!2071 (v!2419 (underlying!233 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!62272 d!12671))

(declare-fun d!12673 () Bool)

(assert (=> d!12673 (= (valid!263 thiss!992) (valid!262 (v!2419 (underlying!233 thiss!992))))))

(declare-fun bs!2725 () Bool)

(assert (= bs!2725 d!12673))

(declare-fun m!56133 () Bool)

(assert (=> bs!2725 m!56133))

(assert (=> start!8872 d!12673))

(declare-fun d!12675 () Bool)

(assert (=> d!12675 (not (arrayContainsKey!0 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!25986 () Unit!1693)

(declare-fun choose!68 (array!3761 (_ BitVec 32) (_ BitVec 64) List!1440) Unit!1693)

(assert (=> d!12675 (= lt!25986 (choose!68 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (Cons!1436 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1437)))))

(assert (=> d!12675 (bvslt (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!12675 (= (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (Cons!1436 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1437)) lt!25986)))

(declare-fun bs!2726 () Bool)

(assert (= bs!2726 d!12675))

(assert (=> bs!2726 m!56051))

(assert (=> bs!2726 m!56055))

(assert (=> bs!2726 m!56051))

(declare-fun m!56135 () Bool)

(assert (=> bs!2726 m!56135))

(assert (=> b!62273 d!12675))

(declare-fun d!12677 () Bool)

(assert (=> d!12677 (arrayNoDuplicates!0 (_keys!3720 (v!2419 (underlying!233 thiss!992))) from!355 Nil!1437)))

(declare-fun lt!25989 () Unit!1693)

(declare-fun choose!39 (array!3761 (_ BitVec 32) (_ BitVec 32)) Unit!1693)

(assert (=> d!12677 (= lt!25989 (choose!39 (_keys!3720 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000000 from!355))))

(assert (=> d!12677 (bvslt (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!12677 (= (lemmaNoDuplicateFromThenFromBigger!0 (_keys!3720 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000000 from!355) lt!25989)))

(declare-fun bs!2727 () Bool)

(assert (= bs!2727 d!12677))

(assert (=> bs!2727 m!56049))

(declare-fun m!56137 () Bool)

(assert (=> bs!2727 m!56137))

(assert (=> b!62273 d!12677))

(declare-fun d!12679 () Bool)

(declare-fun res!34237 () Bool)

(declare-fun e!40949 () Bool)

(assert (=> d!12679 (=> res!34237 e!40949)))

(assert (=> d!12679 (= res!34237 (= (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> d!12679 (= (arrayContainsKey!0 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)) e!40949)))

(declare-fun b!62342 () Bool)

(declare-fun e!40950 () Bool)

(assert (=> b!62342 (= e!40949 e!40950)))

(declare-fun res!34238 () Bool)

(assert (=> b!62342 (=> (not res!34238) (not e!40950))))

(assert (=> b!62342 (= res!34238 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun b!62343 () Bool)

(assert (=> b!62343 (= e!40950 (arrayContainsKey!0 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (= (and d!12679 (not res!34237)) b!62342))

(assert (= (and b!62342 res!34238) b!62343))

(declare-fun m!56139 () Bool)

(assert (=> d!12679 m!56139))

(assert (=> b!62343 m!56051))

(declare-fun m!56141 () Bool)

(assert (=> b!62343 m!56141))

(assert (=> b!62273 d!12679))

(declare-fun d!12681 () Bool)

(declare-fun e!40953 () Bool)

(assert (=> d!12681 e!40953))

(declare-fun c!8281 () Bool)

(assert (=> d!12681 (= c!8281 (and (not (= (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun lt!25992 () Unit!1693)

(declare-fun choose!329 (array!3761 array!3763 (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 (_ BitVec 64) (_ BitVec 32) Int) Unit!1693)

(assert (=> d!12681 (= lt!25992 (choose!329 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (_values!2071 (v!2419 (underlying!233 thiss!992))) (mask!5994 (v!2419 (underlying!233 thiss!992))) (extraKeys!1967 (v!2419 (underlying!233 thiss!992))) (zeroValue!2000 (v!2419 (underlying!233 thiss!992))) (minValue!2000 (v!2419 (underlying!233 thiss!992))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2088 (v!2419 (underlying!233 thiss!992)))))))

(assert (=> d!12681 (validMask!0 (mask!5994 (v!2419 (underlying!233 thiss!992))))))

(assert (=> d!12681 (= (lemmaListMapContainsThenArrayContainsFrom!34 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (_values!2071 (v!2419 (underlying!233 thiss!992))) (mask!5994 (v!2419 (underlying!233 thiss!992))) (extraKeys!1967 (v!2419 (underlying!233 thiss!992))) (zeroValue!2000 (v!2419 (underlying!233 thiss!992))) (minValue!2000 (v!2419 (underlying!233 thiss!992))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2088 (v!2419 (underlying!233 thiss!992)))) lt!25992)))

(declare-fun b!62348 () Bool)

(assert (=> b!62348 (= e!40953 (arrayContainsKey!0 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!62349 () Bool)

(assert (=> b!62349 (= e!40953 (ite (= (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!1967 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1967 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!12681 c!8281) b!62348))

(assert (= (and d!12681 (not c!8281)) b!62349))

(assert (=> d!12681 m!56051))

(declare-fun m!56143 () Bool)

(assert (=> d!12681 m!56143))

(assert (=> d!12681 m!56087))

(assert (=> b!62348 m!56051))

(assert (=> b!62348 m!56055))

(assert (=> b!62273 d!12681))

(declare-fun d!12683 () Bool)

(declare-fun res!34245 () Bool)

(declare-fun e!40964 () Bool)

(assert (=> d!12683 (=> res!34245 e!40964)))

(assert (=> d!12683 (= res!34245 (bvsge from!355 (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992))))))))

(assert (=> d!12683 (= (arrayNoDuplicates!0 (_keys!3720 (v!2419 (underlying!233 thiss!992))) from!355 Nil!1437) e!40964)))

(declare-fun b!62360 () Bool)

(declare-fun e!40962 () Bool)

(declare-fun call!4825 () Bool)

(assert (=> b!62360 (= e!40962 call!4825)))

(declare-fun b!62361 () Bool)

(declare-fun e!40965 () Bool)

(assert (=> b!62361 (= e!40964 e!40965)))

(declare-fun res!34246 () Bool)

(assert (=> b!62361 (=> (not res!34246) (not e!40965))))

(declare-fun e!40963 () Bool)

(assert (=> b!62361 (= res!34246 (not e!40963))))

(declare-fun res!34247 () Bool)

(assert (=> b!62361 (=> (not res!34247) (not e!40963))))

(declare-fun validKeyInArray!0 ((_ BitVec 64)) Bool)

(assert (=> b!62361 (= res!34247 (validKeyInArray!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun b!62362 () Bool)

(assert (=> b!62362 (= e!40965 e!40962)))

(declare-fun c!8284 () Bool)

(assert (=> b!62362 (= c!8284 (validKeyInArray!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun b!62363 () Bool)

(declare-fun contains!692 (List!1440 (_ BitVec 64)) Bool)

(assert (=> b!62363 (= e!40963 (contains!692 Nil!1437 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun bm!4822 () Bool)

(assert (=> bm!4822 (= call!4825 (arrayNoDuplicates!0 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!8284 (Cons!1436 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1437) Nil!1437)))))

(declare-fun b!62364 () Bool)

(assert (=> b!62364 (= e!40962 call!4825)))

(assert (= (and d!12683 (not res!34245)) b!62361))

(assert (= (and b!62361 res!34247) b!62363))

(assert (= (and b!62361 res!34246) b!62362))

(assert (= (and b!62362 c!8284) b!62360))

(assert (= (and b!62362 (not c!8284)) b!62364))

(assert (= (or b!62360 b!62364) bm!4822))

(assert (=> b!62361 m!56051))

(assert (=> b!62361 m!56051))

(declare-fun m!56145 () Bool)

(assert (=> b!62361 m!56145))

(assert (=> b!62362 m!56051))

(assert (=> b!62362 m!56051))

(assert (=> b!62362 m!56145))

(assert (=> b!62363 m!56051))

(assert (=> b!62363 m!56051))

(declare-fun m!56147 () Bool)

(assert (=> b!62363 m!56147))

(assert (=> bm!4822 m!56051))

(declare-fun m!56149 () Bool)

(assert (=> bm!4822 m!56149))

(assert (=> b!62273 d!12683))

(declare-fun d!12685 () Bool)

(assert (=> d!12685 (= (array_inv!1111 (_keys!3720 newMap!16)) (bvsge (size!2031 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!62266 d!12685))

(declare-fun d!12687 () Bool)

(assert (=> d!12687 (= (array_inv!1112 (_values!2071 newMap!16)) (bvsge (size!2032 (_values!2071 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!62266 d!12687))

(declare-fun d!12689 () Bool)

(assert (=> d!12689 (= (validMask!0 (mask!5994 (v!2419 (underlying!233 thiss!992)))) (and (or (= (mask!5994 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000111) (= (mask!5994 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000001111) (= (mask!5994 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000011111) (= (mask!5994 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000111111) (= (mask!5994 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000001111111) (= (mask!5994 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000011111111) (= (mask!5994 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000111111111) (= (mask!5994 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000001111111111) (= (mask!5994 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000011111111111) (= (mask!5994 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000111111111111) (= (mask!5994 (v!2419 (underlying!233 thiss!992))) #b00000000000000000001111111111111) (= (mask!5994 (v!2419 (underlying!233 thiss!992))) #b00000000000000000011111111111111) (= (mask!5994 (v!2419 (underlying!233 thiss!992))) #b00000000000000000111111111111111) (= (mask!5994 (v!2419 (underlying!233 thiss!992))) #b00000000000000001111111111111111) (= (mask!5994 (v!2419 (underlying!233 thiss!992))) #b00000000000000011111111111111111) (= (mask!5994 (v!2419 (underlying!233 thiss!992))) #b00000000000000111111111111111111) (= (mask!5994 (v!2419 (underlying!233 thiss!992))) #b00000000000001111111111111111111) (= (mask!5994 (v!2419 (underlying!233 thiss!992))) #b00000000000011111111111111111111) (= (mask!5994 (v!2419 (underlying!233 thiss!992))) #b00000000000111111111111111111111) (= (mask!5994 (v!2419 (underlying!233 thiss!992))) #b00000000001111111111111111111111) (= (mask!5994 (v!2419 (underlying!233 thiss!992))) #b00000000011111111111111111111111) (= (mask!5994 (v!2419 (underlying!233 thiss!992))) #b00000000111111111111111111111111) (= (mask!5994 (v!2419 (underlying!233 thiss!992))) #b00000001111111111111111111111111) (= (mask!5994 (v!2419 (underlying!233 thiss!992))) #b00000011111111111111111111111111) (= (mask!5994 (v!2419 (underlying!233 thiss!992))) #b00000111111111111111111111111111) (= (mask!5994 (v!2419 (underlying!233 thiss!992))) #b00001111111111111111111111111111) (= (mask!5994 (v!2419 (underlying!233 thiss!992))) #b00011111111111111111111111111111) (= (mask!5994 (v!2419 (underlying!233 thiss!992))) #b00111111111111111111111111111111)) (bvsle (mask!5994 (v!2419 (underlying!233 thiss!992))) #b00111111111111111111111111111111)))))

(assert (=> b!62262 d!12689))

(declare-fun d!12691 () Bool)

(assert (=> d!12691 (= (map!1115 newMap!16) (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun bs!2728 () Bool)

(assert (= bs!2728 d!12691))

(declare-fun m!56151 () Bool)

(assert (=> bs!2728 m!56151))

(assert (=> b!62270 d!12691))

(declare-fun b!62407 () Bool)

(declare-fun e!41001 () Bool)

(declare-fun e!41004 () Bool)

(assert (=> b!62407 (= e!41001 e!41004)))

(declare-fun res!34271 () Bool)

(declare-fun call!4845 () Bool)

(assert (=> b!62407 (= res!34271 call!4845)))

(assert (=> b!62407 (=> (not res!34271) (not e!41004))))

(declare-fun b!62408 () Bool)

(declare-fun res!34272 () Bool)

(declare-fun e!41002 () Bool)

(assert (=> b!62408 (=> (not res!34272) (not e!41002))))

(assert (=> b!62408 (= res!34272 e!41001)))

(declare-fun c!8299 () Bool)

(assert (=> b!62408 (= c!8299 (not (= (bvand (extraKeys!1967 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!62409 () Bool)

(declare-fun e!40996 () Unit!1693)

(declare-fun lt!26040 () Unit!1693)

(assert (=> b!62409 (= e!40996 lt!26040)))

(declare-fun lt!26044 () ListLongMap!1373)

(declare-fun getCurrentListMapNoExtraKeys!46 (array!3761 array!3763 (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 (_ BitVec 32) Int) ListLongMap!1373)

(assert (=> b!62409 (= lt!26044 (getCurrentListMapNoExtraKeys!46 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (_values!2071 (v!2419 (underlying!233 thiss!992))) (mask!5994 (v!2419 (underlying!233 thiss!992))) (extraKeys!1967 (v!2419 (underlying!233 thiss!992))) (zeroValue!2000 (v!2419 (underlying!233 thiss!992))) (minValue!2000 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2088 (v!2419 (underlying!233 thiss!992)))))))

(declare-fun lt!26041 () (_ BitVec 64))

(assert (=> b!62409 (= lt!26041 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26050 () (_ BitVec 64))

(assert (=> b!62409 (= lt!26050 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!26054 () Unit!1693)

(declare-fun addStillContains!44 (ListLongMap!1373 (_ BitVec 64) V!2867 (_ BitVec 64)) Unit!1693)

(assert (=> b!62409 (= lt!26054 (addStillContains!44 lt!26044 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))) lt!26050))))

(declare-fun +!83 (ListLongMap!1373 tuple2!2038) ListLongMap!1373)

(assert (=> b!62409 (contains!690 (+!83 lt!26044 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))) lt!26050)))

(declare-fun lt!26052 () Unit!1693)

(assert (=> b!62409 (= lt!26052 lt!26054)))

(declare-fun lt!26047 () ListLongMap!1373)

(assert (=> b!62409 (= lt!26047 (getCurrentListMapNoExtraKeys!46 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (_values!2071 (v!2419 (underlying!233 thiss!992))) (mask!5994 (v!2419 (underlying!233 thiss!992))) (extraKeys!1967 (v!2419 (underlying!233 thiss!992))) (zeroValue!2000 (v!2419 (underlying!233 thiss!992))) (minValue!2000 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2088 (v!2419 (underlying!233 thiss!992)))))))

(declare-fun lt!26039 () (_ BitVec 64))

(assert (=> b!62409 (= lt!26039 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26051 () (_ BitVec 64))

(assert (=> b!62409 (= lt!26051 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!26043 () Unit!1693)

(declare-fun addApplyDifferent!44 (ListLongMap!1373 (_ BitVec 64) V!2867 (_ BitVec 64)) Unit!1693)

(assert (=> b!62409 (= lt!26043 (addApplyDifferent!44 lt!26047 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992))) lt!26051))))

(declare-fun apply!68 (ListLongMap!1373 (_ BitVec 64)) V!2867)

(assert (=> b!62409 (= (apply!68 (+!83 lt!26047 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) lt!26051) (apply!68 lt!26047 lt!26051))))

(declare-fun lt!26053 () Unit!1693)

(assert (=> b!62409 (= lt!26053 lt!26043)))

(declare-fun lt!26048 () ListLongMap!1373)

(assert (=> b!62409 (= lt!26048 (getCurrentListMapNoExtraKeys!46 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (_values!2071 (v!2419 (underlying!233 thiss!992))) (mask!5994 (v!2419 (underlying!233 thiss!992))) (extraKeys!1967 (v!2419 (underlying!233 thiss!992))) (zeroValue!2000 (v!2419 (underlying!233 thiss!992))) (minValue!2000 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2088 (v!2419 (underlying!233 thiss!992)))))))

(declare-fun lt!26058 () (_ BitVec 64))

(assert (=> b!62409 (= lt!26058 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26055 () (_ BitVec 64))

(assert (=> b!62409 (= lt!26055 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!26038 () Unit!1693)

(assert (=> b!62409 (= lt!26038 (addApplyDifferent!44 lt!26048 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))) lt!26055))))

(assert (=> b!62409 (= (apply!68 (+!83 lt!26048 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))) lt!26055) (apply!68 lt!26048 lt!26055))))

(declare-fun lt!26037 () Unit!1693)

(assert (=> b!62409 (= lt!26037 lt!26038)))

(declare-fun lt!26042 () ListLongMap!1373)

(assert (=> b!62409 (= lt!26042 (getCurrentListMapNoExtraKeys!46 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (_values!2071 (v!2419 (underlying!233 thiss!992))) (mask!5994 (v!2419 (underlying!233 thiss!992))) (extraKeys!1967 (v!2419 (underlying!233 thiss!992))) (zeroValue!2000 (v!2419 (underlying!233 thiss!992))) (minValue!2000 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2088 (v!2419 (underlying!233 thiss!992)))))))

(declare-fun lt!26057 () (_ BitVec 64))

(assert (=> b!62409 (= lt!26057 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26045 () (_ BitVec 64))

(assert (=> b!62409 (= lt!26045 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!62409 (= lt!26040 (addApplyDifferent!44 lt!26042 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992))) lt!26045))))

(assert (=> b!62409 (= (apply!68 (+!83 lt!26042 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) lt!26045) (apply!68 lt!26042 lt!26045))))

(declare-fun b!62410 () Bool)

(assert (=> b!62410 (= e!41001 (not call!4845))))

(declare-fun c!8302 () Bool)

(declare-fun call!4843 () ListLongMap!1373)

(declare-fun call!4840 () ListLongMap!1373)

(declare-fun call!4841 () ListLongMap!1373)

(declare-fun bm!4838 () Bool)

(declare-fun call!4846 () ListLongMap!1373)

(declare-fun c!8300 () Bool)

(assert (=> bm!4838 (= call!4841 (+!83 (ite c!8300 call!4843 (ite c!8302 call!4840 call!4846)) (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun bm!4839 () Bool)

(assert (=> bm!4839 (= call!4846 call!4840)))

(declare-fun b!62411 () Bool)

(declare-fun e!41000 () Bool)

(declare-fun e!40993 () Bool)

(assert (=> b!62411 (= e!41000 e!40993)))

(declare-fun res!34266 () Bool)

(assert (=> b!62411 (=> (not res!34266) (not e!40993))))

(declare-fun lt!26046 () ListLongMap!1373)

(assert (=> b!62411 (= res!34266 (contains!690 lt!26046 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!62411 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun bm!4840 () Bool)

(declare-fun call!4844 () Bool)

(assert (=> bm!4840 (= call!4844 (contains!690 lt!26046 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62412 () Bool)

(declare-fun e!40994 () Bool)

(assert (=> b!62412 (= e!40994 (not call!4844))))

(declare-fun bm!4841 () Bool)

(assert (=> bm!4841 (= call!4845 (contains!690 lt!26046 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4842 () Bool)

(declare-fun call!4842 () ListLongMap!1373)

(assert (=> bm!4842 (= call!4842 call!4841)))

(declare-fun b!62413 () Bool)

(declare-fun e!40997 () ListLongMap!1373)

(assert (=> b!62413 (= e!40997 (+!83 call!4841 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun b!62414 () Bool)

(declare-fun res!34270 () Bool)

(assert (=> b!62414 (=> (not res!34270) (not e!41002))))

(assert (=> b!62414 (= res!34270 e!41000)))

(declare-fun res!34269 () Bool)

(assert (=> b!62414 (=> res!34269 e!41000)))

(declare-fun e!40999 () Bool)

(assert (=> b!62414 (= res!34269 (not e!40999))))

(declare-fun res!34267 () Bool)

(assert (=> b!62414 (=> (not res!34267) (not e!40999))))

(assert (=> b!62414 (= res!34267 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun d!12693 () Bool)

(assert (=> d!12693 e!41002))

(declare-fun res!34268 () Bool)

(assert (=> d!12693 (=> (not res!34268) (not e!41002))))

(assert (=> d!12693 (= res!34268 (or (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992))))) (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun lt!26056 () ListLongMap!1373)

(assert (=> d!12693 (= lt!26046 lt!26056)))

(declare-fun lt!26049 () Unit!1693)

(assert (=> d!12693 (= lt!26049 e!40996)))

(declare-fun c!8298 () Bool)

(declare-fun e!41003 () Bool)

(assert (=> d!12693 (= c!8298 e!41003)))

(declare-fun res!34273 () Bool)

(assert (=> d!12693 (=> (not res!34273) (not e!41003))))

(assert (=> d!12693 (= res!34273 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992))))))))

(assert (=> d!12693 (= lt!26056 e!40997)))

(assert (=> d!12693 (= c!8300 (and (not (= (bvand (extraKeys!1967 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1967 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12693 (validMask!0 (mask!5994 (v!2419 (underlying!233 thiss!992))))))

(assert (=> d!12693 (= (getCurrentListMap!406 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (_values!2071 (v!2419 (underlying!233 thiss!992))) (mask!5994 (v!2419 (underlying!233 thiss!992))) (extraKeys!1967 (v!2419 (underlying!233 thiss!992))) (zeroValue!2000 (v!2419 (underlying!233 thiss!992))) (minValue!2000 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2088 (v!2419 (underlying!233 thiss!992)))) lt!26046)))

(declare-fun bm!4837 () Bool)

(assert (=> bm!4837 (= call!4840 call!4843)))

(declare-fun b!62415 () Bool)

(assert (=> b!62415 (= e!41004 (= (apply!68 lt!26046 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))

(declare-fun b!62416 () Bool)

(declare-fun e!40998 () Bool)

(assert (=> b!62416 (= e!40998 (= (apply!68 lt!26046 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))

(declare-fun b!62417 () Bool)

(assert (=> b!62417 (= e!40994 e!40998)))

(declare-fun res!34274 () Bool)

(assert (=> b!62417 (= res!34274 call!4844)))

(assert (=> b!62417 (=> (not res!34274) (not e!40998))))

(declare-fun b!62418 () Bool)

(assert (=> b!62418 (= e!40999 (validKeyInArray!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!62419 () Bool)

(assert (=> b!62419 (= e!41003 (validKeyInArray!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!62420 () Bool)

(declare-fun Unit!1699 () Unit!1693)

(assert (=> b!62420 (= e!40996 Unit!1699)))

(declare-fun b!62421 () Bool)

(declare-fun e!40995 () ListLongMap!1373)

(assert (=> b!62421 (= e!40995 call!4842)))

(declare-fun bm!4843 () Bool)

(assert (=> bm!4843 (= call!4843 (getCurrentListMapNoExtraKeys!46 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (_values!2071 (v!2419 (underlying!233 thiss!992))) (mask!5994 (v!2419 (underlying!233 thiss!992))) (extraKeys!1967 (v!2419 (underlying!233 thiss!992))) (zeroValue!2000 (v!2419 (underlying!233 thiss!992))) (minValue!2000 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2088 (v!2419 (underlying!233 thiss!992)))))))

(declare-fun b!62422 () Bool)

(declare-fun e!40992 () ListLongMap!1373)

(assert (=> b!62422 (= e!40992 call!4846)))

(declare-fun b!62423 () Bool)

(assert (=> b!62423 (= e!41002 e!40994)))

(declare-fun c!8301 () Bool)

(assert (=> b!62423 (= c!8301 (not (= (bvand (extraKeys!1967 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!62424 () Bool)

(declare-fun c!8297 () Bool)

(assert (=> b!62424 (= c!8297 (and (not (= (bvand (extraKeys!1967 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1967 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!62424 (= e!40995 e!40992)))

(declare-fun b!62425 () Bool)

(assert (=> b!62425 (= e!40992 call!4842)))

(declare-fun b!62426 () Bool)

(assert (=> b!62426 (= e!40993 (= (apply!68 lt!26046 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62426 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2032 (_values!2071 (v!2419 (underlying!233 thiss!992))))))))

(assert (=> b!62426 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun b!62427 () Bool)

(assert (=> b!62427 (= e!40997 e!40995)))

(assert (=> b!62427 (= c!8302 (and (not (= (bvand (extraKeys!1967 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1967 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!12693 c!8300) b!62413))

(assert (= (and d!12693 (not c!8300)) b!62427))

(assert (= (and b!62427 c!8302) b!62421))

(assert (= (and b!62427 (not c!8302)) b!62424))

(assert (= (and b!62424 c!8297) b!62425))

(assert (= (and b!62424 (not c!8297)) b!62422))

(assert (= (or b!62425 b!62422) bm!4839))

(assert (= (or b!62421 bm!4839) bm!4837))

(assert (= (or b!62421 b!62425) bm!4842))

(assert (= (or b!62413 bm!4837) bm!4843))

(assert (= (or b!62413 bm!4842) bm!4838))

(assert (= (and d!12693 res!34273) b!62419))

(assert (= (and d!12693 c!8298) b!62409))

(assert (= (and d!12693 (not c!8298)) b!62420))

(assert (= (and d!12693 res!34268) b!62414))

(assert (= (and b!62414 res!34267) b!62418))

(assert (= (and b!62414 (not res!34269)) b!62411))

(assert (= (and b!62411 res!34266) b!62426))

(assert (= (and b!62414 res!34270) b!62408))

(assert (= (and b!62408 c!8299) b!62407))

(assert (= (and b!62408 (not c!8299)) b!62410))

(assert (= (and b!62407 res!34271) b!62415))

(assert (= (or b!62407 b!62410) bm!4841))

(assert (= (and b!62408 res!34272) b!62423))

(assert (= (and b!62423 c!8301) b!62417))

(assert (= (and b!62423 (not c!8301)) b!62412))

(assert (= (and b!62417 res!34274) b!62416))

(assert (= (or b!62417 b!62412) bm!4840))

(declare-fun b_lambda!2791 () Bool)

(assert (=> (not b_lambda!2791) (not b!62426)))

(assert (=> b!62426 t!4830))

(declare-fun b_and!3827 () Bool)

(assert (= b_and!3815 (and (=> t!4830 result!2445) b_and!3827)))

(assert (=> b!62426 t!4832))

(declare-fun b_and!3829 () Bool)

(assert (= b_and!3817 (and (=> t!4832 result!2449) b_and!3829)))

(assert (=> b!62419 m!56139))

(assert (=> b!62419 m!56139))

(declare-fun m!56153 () Bool)

(assert (=> b!62419 m!56153))

(declare-fun m!56155 () Bool)

(assert (=> b!62409 m!56155))

(declare-fun m!56157 () Bool)

(assert (=> b!62409 m!56157))

(declare-fun m!56159 () Bool)

(assert (=> b!62409 m!56159))

(declare-fun m!56161 () Bool)

(assert (=> b!62409 m!56161))

(declare-fun m!56163 () Bool)

(assert (=> b!62409 m!56163))

(declare-fun m!56165 () Bool)

(assert (=> b!62409 m!56165))

(declare-fun m!56167 () Bool)

(assert (=> b!62409 m!56167))

(declare-fun m!56169 () Bool)

(assert (=> b!62409 m!56169))

(declare-fun m!56171 () Bool)

(assert (=> b!62409 m!56171))

(declare-fun m!56173 () Bool)

(assert (=> b!62409 m!56173))

(declare-fun m!56175 () Bool)

(assert (=> b!62409 m!56175))

(declare-fun m!56177 () Bool)

(assert (=> b!62409 m!56177))

(declare-fun m!56179 () Bool)

(assert (=> b!62409 m!56179))

(declare-fun m!56181 () Bool)

(assert (=> b!62409 m!56181))

(assert (=> b!62409 m!56139))

(assert (=> b!62409 m!56179))

(declare-fun m!56183 () Bool)

(assert (=> b!62409 m!56183))

(assert (=> b!62409 m!56175))

(assert (=> b!62409 m!56161))

(declare-fun m!56185 () Bool)

(assert (=> b!62409 m!56185))

(assert (=> b!62409 m!56169))

(declare-fun m!56187 () Bool)

(assert (=> b!62415 m!56187))

(assert (=> bm!4843 m!56181))

(assert (=> b!62418 m!56139))

(assert (=> b!62418 m!56139))

(assert (=> b!62418 m!56153))

(assert (=> d!12693 m!56087))

(assert (=> b!62426 m!56139))

(declare-fun m!56189 () Bool)

(assert (=> b!62426 m!56189))

(assert (=> b!62426 m!56061))

(declare-fun m!56191 () Bool)

(assert (=> b!62426 m!56191))

(assert (=> b!62426 m!56139))

(assert (=> b!62426 m!56191))

(assert (=> b!62426 m!56061))

(declare-fun m!56193 () Bool)

(assert (=> b!62426 m!56193))

(assert (=> b!62411 m!56139))

(assert (=> b!62411 m!56139))

(declare-fun m!56195 () Bool)

(assert (=> b!62411 m!56195))

(declare-fun m!56197 () Bool)

(assert (=> b!62416 m!56197))

(declare-fun m!56199 () Bool)

(assert (=> bm!4838 m!56199))

(declare-fun m!56201 () Bool)

(assert (=> b!62413 m!56201))

(declare-fun m!56203 () Bool)

(assert (=> bm!4841 m!56203))

(declare-fun m!56205 () Bool)

(assert (=> bm!4840 m!56205))

(assert (=> b!62270 d!12693))

(declare-fun d!12695 () Bool)

(declare-fun res!34281 () Bool)

(declare-fun e!41007 () Bool)

(assert (=> d!12695 (=> (not res!34281) (not e!41007))))

(declare-fun simpleValid!44 (LongMapFixedSize!636) Bool)

(assert (=> d!12695 (= res!34281 (simpleValid!44 newMap!16))))

(assert (=> d!12695 (= (valid!262 newMap!16) e!41007)))

(declare-fun b!62434 () Bool)

(declare-fun res!34282 () Bool)

(assert (=> b!62434 (=> (not res!34282) (not e!41007))))

(declare-fun arrayCountValidKeys!0 (array!3761 (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!62434 (= res!34282 (= (arrayCountValidKeys!0 (_keys!3720 newMap!16) #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))) (_size!367 newMap!16)))))

(declare-fun b!62435 () Bool)

(declare-fun res!34283 () Bool)

(assert (=> b!62435 (=> (not res!34283) (not e!41007))))

(declare-fun arrayForallSeekEntryOrOpenFound!0 ((_ BitVec 32) array!3761 (_ BitVec 32)) Bool)

(assert (=> b!62435 (= res!34283 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3720 newMap!16) (mask!5994 newMap!16)))))

(declare-fun b!62436 () Bool)

(assert (=> b!62436 (= e!41007 (arrayNoDuplicates!0 (_keys!3720 newMap!16) #b00000000000000000000000000000000 Nil!1437))))

(assert (= (and d!12695 res!34281) b!62434))

(assert (= (and b!62434 res!34282) b!62435))

(assert (= (and b!62435 res!34283) b!62436))

(declare-fun m!56207 () Bool)

(assert (=> d!12695 m!56207))

(declare-fun m!56209 () Bool)

(assert (=> b!62434 m!56209))

(declare-fun m!56211 () Bool)

(assert (=> b!62435 m!56211))

(declare-fun m!56213 () Bool)

(assert (=> b!62436 m!56213))

(assert (=> b!62268 d!12695))

(declare-fun d!12697 () Bool)

(declare-fun e!41013 () Bool)

(assert (=> d!12697 e!41013))

(declare-fun res!34286 () Bool)

(assert (=> d!12697 (=> res!34286 e!41013)))

(declare-fun lt!26070 () Bool)

(assert (=> d!12697 (= res!34286 (not lt!26070))))

(declare-fun lt!26069 () Bool)

(assert (=> d!12697 (= lt!26070 lt!26069)))

(declare-fun lt!26067 () Unit!1693)

(declare-fun e!41012 () Unit!1693)

(assert (=> d!12697 (= lt!26067 e!41012)))

(declare-fun c!8305 () Bool)

(assert (=> d!12697 (= c!8305 lt!26069)))

(declare-fun containsKey!130 (List!1439 (_ BitVec 64)) Bool)

(assert (=> d!12697 (= lt!26069 (containsKey!130 (toList!702 lt!25956) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> d!12697 (= (contains!690 lt!25956 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) lt!26070)))

(declare-fun b!62443 () Bool)

(declare-fun lt!26068 () Unit!1693)

(assert (=> b!62443 (= e!41012 lt!26068)))

(declare-fun lemmaContainsKeyImpliesGetValueByKeyDefined!78 (List!1439 (_ BitVec 64)) Unit!1693)

(assert (=> b!62443 (= lt!26068 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 lt!25956) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-datatypes ((Option!132 0))(
  ( (Some!131 (v!2423 V!2867)) (None!130) )
))
(declare-fun isDefined!79 (Option!132) Bool)

(declare-fun getValueByKey!126 (List!1439 (_ BitVec 64)) Option!132)

(assert (=> b!62443 (isDefined!79 (getValueByKey!126 (toList!702 lt!25956) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun b!62444 () Bool)

(declare-fun Unit!1700 () Unit!1693)

(assert (=> b!62444 (= e!41012 Unit!1700)))

(declare-fun b!62445 () Bool)

(assert (=> b!62445 (= e!41013 (isDefined!79 (getValueByKey!126 (toList!702 lt!25956) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355))))))

(assert (= (and d!12697 c!8305) b!62443))

(assert (= (and d!12697 (not c!8305)) b!62444))

(assert (= (and d!12697 (not res!34286)) b!62445))

(assert (=> d!12697 m!56051))

(declare-fun m!56215 () Bool)

(assert (=> d!12697 m!56215))

(assert (=> b!62443 m!56051))

(declare-fun m!56217 () Bool)

(assert (=> b!62443 m!56217))

(assert (=> b!62443 m!56051))

(declare-fun m!56219 () Bool)

(assert (=> b!62443 m!56219))

(assert (=> b!62443 m!56219))

(declare-fun m!56221 () Bool)

(assert (=> b!62443 m!56221))

(assert (=> b!62445 m!56051))

(assert (=> b!62445 m!56219))

(assert (=> b!62445 m!56219))

(assert (=> b!62445 m!56221))

(assert (=> b!62274 d!12697))

(declare-fun bm!4892 () Bool)

(declare-fun call!4913 () Bool)

(declare-fun call!4905 () Bool)

(assert (=> bm!4892 (= call!4913 call!4905)))

(declare-fun b!62526 () Bool)

(declare-fun e!41075 () tuple2!2040)

(declare-fun lt!26128 () tuple2!2040)

(assert (=> b!62526 (= e!41075 (tuple2!2041 (_1!1031 lt!26128) (_2!1031 lt!26128)))))

(declare-fun call!4902 () tuple2!2040)

(assert (=> b!62526 (= lt!26128 call!4902)))

(declare-fun b!62527 () Bool)

(declare-fun e!41061 () Bool)

(declare-fun e!41062 () Bool)

(assert (=> b!62527 (= e!41061 e!41062)))

(declare-fun res!34321 () Bool)

(declare-fun call!4918 () Bool)

(assert (=> b!62527 (= res!34321 call!4918)))

(assert (=> b!62527 (=> (not res!34321) (not e!41062))))

(declare-fun bm!4893 () Bool)

(declare-fun call!4909 () Bool)

(assert (=> bm!4893 (= call!4918 call!4909)))

(declare-fun b!62528 () Bool)

(declare-fun res!34323 () Bool)

(declare-datatypes ((SeekEntryResult!229 0))(
  ( (MissingZero!229 (index!3041 (_ BitVec 32))) (Found!229 (index!3042 (_ BitVec 32))) (Intermediate!229 (undefined!1041 Bool) (index!3043 (_ BitVec 32)) (x!10307 (_ BitVec 32))) (Undefined!229) (MissingVacant!229 (index!3044 (_ BitVec 32))) )
))
(declare-fun lt!26136 () SeekEntryResult!229)

(assert (=> b!62528 (= res!34323 (= (select (arr!1799 (_keys!3720 newMap!16)) (index!3044 lt!26136)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62528 (=> (not res!34323) (not e!41062))))

(declare-fun b!62529 () Bool)

(declare-fun res!34315 () Bool)

(declare-fun e!41066 () Bool)

(assert (=> b!62529 (=> (not res!34315) (not e!41066))))

(assert (=> b!62529 (= res!34315 call!4918)))

(declare-fun e!41060 () Bool)

(assert (=> b!62529 (= e!41060 e!41066)))

(declare-fun b!62530 () Bool)

(declare-fun e!41065 () Bool)

(declare-fun e!41070 () Bool)

(assert (=> b!62530 (= e!41065 e!41070)))

(declare-fun c!8337 () Bool)

(declare-fun lt!26150 () tuple2!2040)

(assert (=> b!62530 (= c!8337 (_1!1031 lt!26150))))

(declare-fun lt!26141 () SeekEntryResult!229)

(declare-fun b!62531 () Bool)

(declare-fun e!41073 () Bool)

(assert (=> b!62531 (= e!41073 (= (select (arr!1799 (_keys!3720 newMap!16)) (index!3042 lt!26141)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun b!62532 () Bool)

(declare-fun res!34318 () Bool)

(assert (=> b!62532 (=> (not res!34318) (not e!41066))))

(assert (=> b!62532 (= res!34318 (= (select (arr!1799 (_keys!3720 newMap!16)) (index!3041 lt!26136)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62533 () Bool)

(declare-fun c!8342 () Bool)

(declare-fun lt!26133 () SeekEntryResult!229)

(assert (=> b!62533 (= c!8342 ((_ is MissingVacant!229) lt!26133))))

(declare-fun e!41074 () Bool)

(declare-fun e!41056 () Bool)

(assert (=> b!62533 (= e!41074 e!41056)))

(declare-fun bm!4894 () Bool)

(declare-fun call!4898 () ListLongMap!1373)

(assert (=> bm!4894 (= call!4898 (map!1115 newMap!16))))

(declare-fun b!62534 () Bool)

(declare-fun e!41071 () Unit!1693)

(declare-fun lt!26138 () Unit!1693)

(assert (=> b!62534 (= e!41071 lt!26138)))

(declare-fun call!4917 () Unit!1693)

(assert (=> b!62534 (= lt!26138 call!4917)))

(declare-fun call!4895 () SeekEntryResult!229)

(assert (=> b!62534 (= lt!26136 call!4895)))

(declare-fun c!8341 () Bool)

(assert (=> b!62534 (= c!8341 ((_ is MissingZero!229) lt!26136))))

(assert (=> b!62534 e!41060))

(declare-fun b!62535 () Bool)

(declare-fun call!4899 () ListLongMap!1373)

(assert (=> b!62535 (= e!41070 (= call!4899 call!4898))))

(declare-fun bm!4895 () Bool)

(assert (=> bm!4895 (= call!4905 (arrayContainsKey!0 (_keys!3720 newMap!16) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun bm!4896 () Bool)

(declare-fun call!4915 () Bool)

(declare-fun call!4900 () Bool)

(assert (=> bm!4896 (= call!4915 call!4900)))

(declare-fun b!62536 () Bool)

(declare-fun e!41057 () tuple2!2040)

(assert (=> b!62536 (= e!41075 e!41057)))

(declare-fun c!8336 () Bool)

(declare-fun lt!26125 () SeekEntryResult!229)

(assert (=> b!62536 (= c!8336 ((_ is MissingZero!229) lt!26125))))

(declare-fun bm!4897 () Bool)

(declare-fun call!4896 () SeekEntryResult!229)

(assert (=> bm!4897 (= call!4895 call!4896)))

(declare-fun bm!4898 () Bool)

(declare-fun call!4897 () Unit!1693)

(declare-fun lemmaInListMapThenSeekEntryOrOpenFindsIt!17 (array!3761 array!3763 (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 (_ BitVec 64) Int) Unit!1693)

(assert (=> bm!4898 (= call!4897 (lemmaInListMapThenSeekEntryOrOpenFindsIt!17 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (defaultEntry!2088 newMap!16)))))

(declare-fun b!62537 () Bool)

(declare-fun res!34328 () Bool)

(assert (=> b!62537 (= res!34328 (= (select (arr!1799 (_keys!3720 newMap!16)) (index!3044 lt!26133)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!41059 () Bool)

(assert (=> b!62537 (=> (not res!34328) (not e!41059))))

(declare-fun bm!4899 () Bool)

(declare-fun c!8335 () Bool)

(declare-fun updateHelperNewKey!17 (LongMapFixedSize!636 (_ BitVec 64) V!2867 (_ BitVec 32)) tuple2!2040)

(assert (=> bm!4899 (= call!4902 (updateHelperNewKey!17 newMap!16 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125))))))

(declare-fun b!62538 () Bool)

(declare-fun lt!26149 () Unit!1693)

(declare-fun lt!26127 () Unit!1693)

(assert (=> b!62538 (= lt!26149 lt!26127)))

(declare-fun call!4906 () ListLongMap!1373)

(declare-fun call!4904 () ListLongMap!1373)

(assert (=> b!62538 (= call!4906 call!4904)))

(declare-fun lt!26140 () (_ BitVec 32))

(declare-fun lemmaChangeLongMinValueKeyThenAddPairToListMap!17 (array!3761 array!3763 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 V!2867 Int) Unit!1693)

(assert (=> b!62538 (= lt!26127 (lemmaChangeLongMinValueKeyThenAddPairToListMap!17 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) lt!26140 (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2088 newMap!16)))))

(assert (=> b!62538 (= lt!26140 (bvor (extraKeys!1967 newMap!16) #b00000000000000000000000000000010))))

(declare-fun e!41058 () tuple2!2040)

(assert (=> b!62538 (= e!41058 (tuple2!2041 true (LongMapFixedSize!637 (defaultEntry!2088 newMap!16) (mask!5994 newMap!16) (bvor (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) (zeroValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (_size!367 newMap!16) (_keys!3720 newMap!16) (_values!2071 newMap!16) (_vacant!367 newMap!16))))))

(declare-fun b!62539 () Bool)

(assert (=> b!62539 (= e!41056 ((_ is Undefined!229) lt!26133))))

(declare-fun bm!4900 () Bool)

(declare-fun seekEntryOrOpen!0 ((_ BitVec 64) array!3761 (_ BitVec 32)) SeekEntryResult!229)

(assert (=> bm!4900 (= call!4896 (seekEntryOrOpen!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (_keys!3720 newMap!16) (mask!5994 newMap!16)))))

(declare-fun b!62540 () Bool)

(declare-fun call!4910 () Bool)

(assert (=> b!62540 (= e!41066 (not call!4910))))

(declare-fun b!62541 () Bool)

(declare-fun lt!26143 () tuple2!2040)

(assert (=> b!62541 (= lt!26143 call!4902)))

(assert (=> b!62541 (= e!41057 (tuple2!2041 (_1!1031 lt!26143) (_2!1031 lt!26143)))))

(declare-fun b!62542 () Bool)

(declare-fun e!41072 () tuple2!2040)

(assert (=> b!62542 (= e!41072 e!41058)))

(declare-fun c!8332 () Bool)

(assert (=> b!62542 (= c!8332 (= (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62543 () Bool)

(assert (=> b!62543 (= e!41059 (not call!4913))))

(declare-fun b!62544 () Bool)

(declare-fun res!34326 () Bool)

(assert (=> b!62544 (= res!34326 call!4909)))

(assert (=> b!62544 (=> (not res!34326) (not e!41073))))

(declare-fun bm!4901 () Bool)

(assert (=> bm!4901 (= call!4909 call!4900)))

(declare-fun b!62545 () Bool)

(declare-fun lt!26147 () Unit!1693)

(declare-fun lt!26137 () Unit!1693)

(assert (=> b!62545 (= lt!26147 lt!26137)))

(declare-fun call!4916 () ListLongMap!1373)

(assert (=> b!62545 (= call!4906 call!4916)))

(declare-fun lt!26145 () (_ BitVec 32))

(declare-fun lemmaChangeZeroKeyThenAddPairToListMap!17 (array!3761 array!3763 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 V!2867 Int) Unit!1693)

(assert (=> b!62545 (= lt!26137 (lemmaChangeZeroKeyThenAddPairToListMap!17 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) lt!26145 (zeroValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2000 newMap!16) (defaultEntry!2088 newMap!16)))))

(assert (=> b!62545 (= lt!26145 (bvor (extraKeys!1967 newMap!16) #b00000000000000000000000000000001))))

(assert (=> b!62545 (= e!41058 (tuple2!2041 true (LongMapFixedSize!637 (defaultEntry!2088 newMap!16) (mask!5994 newMap!16) (bvor (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2000 newMap!16) (_size!367 newMap!16) (_keys!3720 newMap!16) (_values!2071 newMap!16) (_vacant!367 newMap!16))))))

(declare-fun call!4908 () ListLongMap!1373)

(declare-fun lt!26151 () array!3763)

(declare-fun bm!4902 () Bool)

(declare-fun c!8334 () Bool)

(declare-fun c!8338 () Bool)

(assert (=> bm!4902 (= call!4908 (getCurrentListMap!406 (_keys!3720 newMap!16) (ite (or c!8338 c!8334) (_values!2071 newMap!16) lt!26151) (mask!5994 newMap!16) (ite c!8338 (ite c!8332 (extraKeys!1967 newMap!16) lt!26140) (extraKeys!1967 newMap!16)) (zeroValue!2000 newMap!16) (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun bm!4903 () Bool)

(declare-fun call!4901 () ListLongMap!1373)

(assert (=> bm!4903 (= call!4906 call!4901)))

(declare-fun bm!4904 () Bool)

(assert (=> bm!4904 (= call!4904 call!4908)))

(declare-fun b!62546 () Bool)

(declare-fun res!34324 () Bool)

(assert (=> b!62546 (= res!34324 call!4915)))

(declare-fun e!41064 () Bool)

(assert (=> b!62546 (=> (not res!34324) (not e!41064))))

(declare-fun b!62547 () Bool)

(declare-fun e!41076 () Bool)

(assert (=> b!62547 (= e!41070 e!41076)))

(declare-fun res!34317 () Bool)

(assert (=> b!62547 (= res!34317 (contains!690 call!4899 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> b!62547 (=> (not res!34317) (not e!41076))))

(declare-fun e!41069 () ListLongMap!1373)

(declare-fun b!62548 () Bool)

(assert (=> b!62548 (= e!41069 (ite c!8332 call!4904 call!4916))))

(declare-fun bm!4905 () Bool)

(declare-fun call!4911 () SeekEntryResult!229)

(assert (=> bm!4905 (= call!4911 call!4896)))

(declare-fun d!12699 () Bool)

(assert (=> d!12699 e!41065))

(declare-fun res!34327 () Bool)

(assert (=> d!12699 (=> (not res!34327) (not e!41065))))

(assert (=> d!12699 (= res!34327 (valid!262 (_2!1031 lt!26150)))))

(assert (=> d!12699 (= lt!26150 e!41072)))

(assert (=> d!12699 (= c!8338 (= (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (bvneg (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355))))))

(assert (=> d!12699 (valid!262 newMap!16)))

(assert (=> d!12699 (= (update!77 newMap!16 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) lt!26150)))

(declare-fun b!62549 () Bool)

(declare-fun res!34319 () Bool)

(declare-fun e!41068 () Bool)

(assert (=> b!62549 (=> (not res!34319) (not e!41068))))

(assert (=> b!62549 (= res!34319 (= (select (arr!1799 (_keys!3720 newMap!16)) (index!3041 lt!26133)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4906 () Bool)

(declare-fun call!4912 () ListLongMap!1373)

(assert (=> bm!4906 (= call!4912 call!4908)))

(declare-fun b!62550 () Bool)

(assert (=> b!62550 (= e!41076 (= call!4899 (+!83 call!4898 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!62551 () Bool)

(assert (=> b!62551 (= e!41068 (not call!4913))))

(declare-fun b!62552 () Bool)

(declare-fun e!41067 () Unit!1693)

(declare-fun Unit!1701 () Unit!1693)

(assert (=> b!62552 (= e!41067 Unit!1701)))

(declare-fun lt!26126 () Unit!1693)

(assert (=> b!62552 (= lt!26126 call!4917)))

(assert (=> b!62552 (= lt!26133 call!4911)))

(declare-fun c!8340 () Bool)

(assert (=> b!62552 (= c!8340 ((_ is MissingZero!229) lt!26133))))

(assert (=> b!62552 e!41074))

(declare-fun lt!26131 () Unit!1693)

(assert (=> b!62552 (= lt!26131 lt!26126)))

(assert (=> b!62552 false))

(declare-fun b!62553 () Bool)

(declare-fun lt!26146 () Unit!1693)

(assert (=> b!62553 (= lt!26146 e!41071)))

(declare-fun c!8333 () Bool)

(declare-fun call!4907 () Bool)

(assert (=> b!62553 (= c!8333 call!4907)))

(declare-fun e!41063 () tuple2!2040)

(assert (=> b!62553 (= e!41063 (tuple2!2041 false newMap!16))))

(declare-fun bm!4907 () Bool)

(declare-fun call!4914 () Bool)

(assert (=> bm!4907 (= call!4914 call!4915)))

(declare-fun bm!4908 () Bool)

(declare-fun lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!17 (array!3761 array!3763 (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 (_ BitVec 64) Int) Unit!1693)

(assert (=> bm!4908 (= call!4917 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!17 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (defaultEntry!2088 newMap!16)))))

(declare-fun b!62554 () Bool)

(declare-fun lt!26144 () Unit!1693)

(assert (=> b!62554 (= e!41067 lt!26144)))

(assert (=> b!62554 (= lt!26144 call!4897)))

(declare-fun lt!26139 () SeekEntryResult!229)

(assert (=> b!62554 (= lt!26139 call!4911)))

(declare-fun res!34320 () Bool)

(assert (=> b!62554 (= res!34320 ((_ is Found!229) lt!26139))))

(assert (=> b!62554 (=> (not res!34320) (not e!41064))))

(assert (=> b!62554 e!41064))

(declare-fun bm!4909 () Bool)

(assert (=> bm!4909 (= call!4907 (contains!690 call!4912 (ite c!8334 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (select (arr!1799 (_keys!3720 newMap!16)) (index!3042 lt!26125)))))))

(declare-fun b!62555 () Bool)

(assert (=> b!62555 (= e!41069 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun b!62556 () Bool)

(declare-fun res!34325 () Bool)

(assert (=> b!62556 (=> (not res!34325) (not e!41068))))

(assert (=> b!62556 (= res!34325 call!4914)))

(assert (=> b!62556 (= e!41074 e!41068)))

(declare-fun c!8343 () Bool)

(declare-fun bm!4910 () Bool)

(declare-fun inRange!0 ((_ BitVec 32) (_ BitVec 32)) Bool)

(assert (=> bm!4910 (= call!4900 (inRange!0 (ite c!8334 (ite c!8333 (index!3042 lt!26141) (ite c!8341 (index!3041 lt!26136) (index!3044 lt!26136))) (ite c!8343 (index!3042 lt!26139) (ite c!8340 (index!3041 lt!26133) (index!3044 lt!26133)))) (mask!5994 newMap!16)))))

(declare-fun b!62557 () Bool)

(declare-fun lt!26132 () Unit!1693)

(declare-fun lt!26148 () Unit!1693)

(assert (=> b!62557 (= lt!26132 lt!26148)))

(assert (=> b!62557 call!4907))

(declare-fun lemmaValidKeyInArrayIsInListMap!78 (array!3761 array!3763 (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 (_ BitVec 32) Int) Unit!1693)

(assert (=> b!62557 (= lt!26148 (lemmaValidKeyInArrayIsInListMap!78 (_keys!3720 newMap!16) lt!26151 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (index!3042 lt!26125) (defaultEntry!2088 newMap!16)))))

(assert (=> b!62557 (= lt!26151 (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (index!3042 lt!26125) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16))))))

(declare-fun lt!26142 () Unit!1693)

(declare-fun lt!26130 () Unit!1693)

(assert (=> b!62557 (= lt!26142 lt!26130)))

(declare-fun call!4903 () ListLongMap!1373)

(assert (=> b!62557 (= call!4901 call!4903)))

(declare-fun lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!17 (array!3761 array!3763 (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 (_ BitVec 32) (_ BitVec 64) V!2867 Int) Unit!1693)

(assert (=> b!62557 (= lt!26130 (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!17 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (index!3042 lt!26125) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26134 () Unit!1693)

(assert (=> b!62557 (= lt!26134 e!41067)))

(assert (=> b!62557 (= c!8343 (contains!690 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> b!62557 (= e!41057 (tuple2!2041 true (LongMapFixedSize!637 (defaultEntry!2088 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (_size!367 newMap!16) (_keys!3720 newMap!16) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (index!3042 lt!26125) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16))) (_vacant!367 newMap!16))))))

(declare-fun b!62558 () Bool)

(assert (=> b!62558 (= e!41062 (not call!4910))))

(declare-fun b!62559 () Bool)

(assert (=> b!62559 (= c!8335 ((_ is MissingVacant!229) lt!26125))))

(assert (=> b!62559 (= e!41063 e!41075)))

(declare-fun bm!4911 () Bool)

(assert (=> bm!4911 (= call!4901 (+!83 e!41069 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun c!8344 () Bool)

(assert (=> bm!4911 (= c!8344 c!8338)))

(declare-fun bm!4912 () Bool)

(assert (=> bm!4912 (= call!4903 (getCurrentListMap!406 (_keys!3720 newMap!16) (ite c!8338 (_values!2071 newMap!16) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (index!3042 lt!26125) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16)))) (mask!5994 newMap!16) (ite (and c!8338 c!8332) lt!26145 (extraKeys!1967 newMap!16)) (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun b!62560 () Bool)

(declare-fun Unit!1702 () Unit!1693)

(assert (=> b!62560 (= e!41071 Unit!1702)))

(declare-fun lt!26135 () Unit!1693)

(assert (=> b!62560 (= lt!26135 call!4897)))

(assert (=> b!62560 (= lt!26141 call!4895)))

(declare-fun res!34316 () Bool)

(assert (=> b!62560 (= res!34316 ((_ is Found!229) lt!26141))))

(assert (=> b!62560 (=> (not res!34316) (not e!41073))))

(assert (=> b!62560 e!41073))

(declare-fun lt!26129 () Unit!1693)

(assert (=> b!62560 (= lt!26129 lt!26135)))

(assert (=> b!62560 false))

(declare-fun b!62561 () Bool)

(assert (=> b!62561 (= e!41061 ((_ is Undefined!229) lt!26136))))

(declare-fun b!62562 () Bool)

(assert (=> b!62562 (= e!41064 (= (select (arr!1799 (_keys!3720 newMap!16)) (index!3042 lt!26139)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun b!62563 () Bool)

(declare-fun c!8339 () Bool)

(assert (=> b!62563 (= c!8339 ((_ is MissingVacant!229) lt!26136))))

(assert (=> b!62563 (= e!41060 e!41061)))

(declare-fun b!62564 () Bool)

(assert (=> b!62564 (= e!41072 e!41063)))

(assert (=> b!62564 (= lt!26125 (seekEntryOrOpen!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (_keys!3720 newMap!16) (mask!5994 newMap!16)))))

(assert (=> b!62564 (= c!8334 ((_ is Undefined!229) lt!26125))))

(declare-fun bm!4913 () Bool)

(assert (=> bm!4913 (= call!4910 call!4905)))

(declare-fun bm!4914 () Bool)

(assert (=> bm!4914 (= call!4899 (map!1115 (_2!1031 lt!26150)))))

(declare-fun b!62565 () Bool)

(assert (=> b!62565 (= e!41056 e!41059)))

(declare-fun res!34322 () Bool)

(assert (=> b!62565 (= res!34322 call!4914)))

(assert (=> b!62565 (=> (not res!34322) (not e!41059))))

(declare-fun bm!4915 () Bool)

(assert (=> bm!4915 (= call!4916 call!4903)))

(assert (= (and d!12699 c!8338) b!62542))

(assert (= (and d!12699 (not c!8338)) b!62564))

(assert (= (and b!62542 c!8332) b!62545))

(assert (= (and b!62542 (not c!8332)) b!62538))

(assert (= (or b!62545 b!62538) bm!4904))

(assert (= (or b!62545 b!62538) bm!4915))

(assert (= (or b!62545 b!62538) bm!4903))

(assert (= (and b!62564 c!8334) b!62553))

(assert (= (and b!62564 (not c!8334)) b!62559))

(assert (= (and b!62553 c!8333) b!62560))

(assert (= (and b!62553 (not c!8333)) b!62534))

(assert (= (and b!62560 res!34316) b!62544))

(assert (= (and b!62544 res!34326) b!62531))

(assert (= (and b!62534 c!8341) b!62529))

(assert (= (and b!62534 (not c!8341)) b!62563))

(assert (= (and b!62529 res!34315) b!62532))

(assert (= (and b!62532 res!34318) b!62540))

(assert (= (and b!62563 c!8339) b!62527))

(assert (= (and b!62563 (not c!8339)) b!62561))

(assert (= (and b!62527 res!34321) b!62528))

(assert (= (and b!62528 res!34323) b!62558))

(assert (= (or b!62529 b!62527) bm!4893))

(assert (= (or b!62540 b!62558) bm!4913))

(assert (= (or b!62544 bm!4893) bm!4901))

(assert (= (or b!62560 b!62534) bm!4897))

(assert (= (and b!62559 c!8335) b!62526))

(assert (= (and b!62559 (not c!8335)) b!62536))

(assert (= (and b!62536 c!8336) b!62541))

(assert (= (and b!62536 (not c!8336)) b!62557))

(assert (= (and b!62557 c!8343) b!62554))

(assert (= (and b!62557 (not c!8343)) b!62552))

(assert (= (and b!62554 res!34320) b!62546))

(assert (= (and b!62546 res!34324) b!62562))

(assert (= (and b!62552 c!8340) b!62556))

(assert (= (and b!62552 (not c!8340)) b!62533))

(assert (= (and b!62556 res!34325) b!62549))

(assert (= (and b!62549 res!34319) b!62551))

(assert (= (and b!62533 c!8342) b!62565))

(assert (= (and b!62533 (not c!8342)) b!62539))

(assert (= (and b!62565 res!34322) b!62537))

(assert (= (and b!62537 res!34328) b!62543))

(assert (= (or b!62556 b!62565) bm!4907))

(assert (= (or b!62551 b!62543) bm!4892))

(assert (= (or b!62546 bm!4907) bm!4896))

(assert (= (or b!62554 b!62552) bm!4905))

(assert (= (or b!62526 b!62541) bm!4899))

(assert (= (or b!62560 b!62554) bm!4898))

(assert (= (or bm!4901 bm!4896) bm!4910))

(assert (= (or bm!4913 bm!4892) bm!4895))

(assert (= (or bm!4897 bm!4905) bm!4900))

(assert (= (or b!62553 b!62557) bm!4906))

(assert (= (or b!62534 b!62552) bm!4908))

(assert (= (or b!62553 b!62557) bm!4909))

(assert (= (or bm!4904 bm!4906) bm!4902))

(assert (= (or bm!4915 b!62557) bm!4912))

(assert (= (or bm!4903 b!62557) bm!4911))

(assert (= (and bm!4911 c!8344) b!62548))

(assert (= (and bm!4911 (not c!8344)) b!62555))

(assert (= (and d!12699 res!34327) b!62530))

(assert (= (and b!62530 c!8337) b!62547))

(assert (= (and b!62530 (not c!8337)) b!62535))

(assert (= (and b!62547 res!34317) b!62550))

(assert (= (or b!62550 b!62535) bm!4894))

(assert (= (or b!62547 b!62550 b!62535) bm!4914))

(assert (=> bm!4899 m!56051))

(assert (=> bm!4899 m!56063))

(declare-fun m!56223 () Bool)

(assert (=> bm!4899 m!56223))

(declare-fun m!56225 () Bool)

(assert (=> bm!4902 m!56225))

(declare-fun m!56227 () Bool)

(assert (=> bm!4911 m!56227))

(declare-fun m!56229 () Bool)

(assert (=> d!12699 m!56229))

(assert (=> d!12699 m!56085))

(assert (=> b!62564 m!56051))

(declare-fun m!56231 () Bool)

(assert (=> b!62564 m!56231))

(assert (=> b!62545 m!56063))

(declare-fun m!56233 () Bool)

(assert (=> b!62545 m!56233))

(declare-fun m!56235 () Bool)

(assert (=> bm!4912 m!56235))

(declare-fun m!56237 () Bool)

(assert (=> bm!4912 m!56237))

(assert (=> b!62557 m!56151))

(assert (=> b!62557 m!56151))

(assert (=> b!62557 m!56051))

(declare-fun m!56239 () Bool)

(assert (=> b!62557 m!56239))

(declare-fun m!56241 () Bool)

(assert (=> b!62557 m!56241))

(assert (=> b!62557 m!56235))

(assert (=> b!62557 m!56051))

(assert (=> b!62557 m!56063))

(declare-fun m!56243 () Bool)

(assert (=> b!62557 m!56243))

(declare-fun m!56245 () Bool)

(assert (=> b!62562 m!56245))

(declare-fun m!56247 () Bool)

(assert (=> b!62537 m!56247))

(declare-fun m!56249 () Bool)

(assert (=> b!62532 m!56249))

(assert (=> bm!4894 m!56081))

(declare-fun m!56251 () Bool)

(assert (=> b!62550 m!56251))

(declare-fun m!56253 () Bool)

(assert (=> bm!4910 m!56253))

(assert (=> bm!4908 m!56051))

(declare-fun m!56255 () Bool)

(assert (=> bm!4908 m!56255))

(assert (=> b!62555 m!56151))

(declare-fun m!56257 () Bool)

(assert (=> bm!4909 m!56257))

(declare-fun m!56259 () Bool)

(assert (=> bm!4909 m!56259))

(assert (=> bm!4898 m!56051))

(declare-fun m!56261 () Bool)

(assert (=> bm!4898 m!56261))

(assert (=> b!62547 m!56051))

(declare-fun m!56263 () Bool)

(assert (=> b!62547 m!56263))

(declare-fun m!56265 () Bool)

(assert (=> bm!4914 m!56265))

(assert (=> bm!4895 m!56051))

(declare-fun m!56267 () Bool)

(assert (=> bm!4895 m!56267))

(declare-fun m!56269 () Bool)

(assert (=> b!62531 m!56269))

(declare-fun m!56271 () Bool)

(assert (=> b!62549 m!56271))

(assert (=> b!62538 m!56063))

(declare-fun m!56273 () Bool)

(assert (=> b!62538 m!56273))

(assert (=> bm!4900 m!56051))

(assert (=> bm!4900 m!56231))

(declare-fun m!56275 () Bool)

(assert (=> b!62528 m!56275))

(assert (=> b!62274 d!12699))

(declare-fun d!12701 () Bool)

(declare-fun c!8347 () Bool)

(assert (=> d!12701 (= c!8347 ((_ is ValueCellFull!864) (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun e!41079 () V!2867)

(assert (=> d!12701 (= (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!41079)))

(declare-fun b!62570 () Bool)

(declare-fun get!1084 (ValueCell!864 V!2867) V!2867)

(assert (=> b!62570 (= e!41079 (get!1084 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!62571 () Bool)

(declare-fun get!1085 (ValueCell!864 V!2867) V!2867)

(assert (=> b!62571 (= e!41079 (get!1085 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12701 c!8347) b!62570))

(assert (= (and d!12701 (not c!8347)) b!62571))

(assert (=> b!62570 m!56059))

(assert (=> b!62570 m!56061))

(declare-fun m!56277 () Bool)

(assert (=> b!62570 m!56277))

(assert (=> b!62571 m!56059))

(assert (=> b!62571 m!56061))

(declare-fun m!56279 () Bool)

(assert (=> b!62571 m!56279))

(assert (=> b!62274 d!12701))

(declare-fun mapNonEmpty!2953 () Bool)

(declare-fun mapRes!2953 () Bool)

(declare-fun tp!8137 () Bool)

(declare-fun e!41085 () Bool)

(assert (=> mapNonEmpty!2953 (= mapRes!2953 (and tp!8137 e!41085))))

(declare-fun mapRest!2953 () (Array (_ BitVec 32) ValueCell!864))

(declare-fun mapKey!2953 () (_ BitVec 32))

(declare-fun mapValue!2953 () ValueCell!864)

(assert (=> mapNonEmpty!2953 (= mapRest!2943 (store mapRest!2953 mapKey!2953 mapValue!2953))))

(declare-fun b!62578 () Bool)

(assert (=> b!62578 (= e!41085 tp_is_empty!2415)))

(declare-fun b!62579 () Bool)

(declare-fun e!41084 () Bool)

(assert (=> b!62579 (= e!41084 tp_is_empty!2415)))

(declare-fun mapIsEmpty!2953 () Bool)

(assert (=> mapIsEmpty!2953 mapRes!2953))

(declare-fun condMapEmpty!2953 () Bool)

(declare-fun mapDefault!2953 () ValueCell!864)

(assert (=> mapNonEmpty!2943 (= condMapEmpty!2953 (= mapRest!2943 ((as const (Array (_ BitVec 32) ValueCell!864)) mapDefault!2953)))))

(assert (=> mapNonEmpty!2943 (= tp!8122 (and e!41084 mapRes!2953))))

(assert (= (and mapNonEmpty!2943 condMapEmpty!2953) mapIsEmpty!2953))

(assert (= (and mapNonEmpty!2943 (not condMapEmpty!2953)) mapNonEmpty!2953))

(assert (= (and mapNonEmpty!2953 ((_ is ValueCellFull!864) mapValue!2953)) b!62578))

(assert (= (and mapNonEmpty!2943 ((_ is ValueCellFull!864) mapDefault!2953)) b!62579))

(declare-fun m!56281 () Bool)

(assert (=> mapNonEmpty!2953 m!56281))

(declare-fun mapNonEmpty!2954 () Bool)

(declare-fun mapRes!2954 () Bool)

(declare-fun tp!8138 () Bool)

(declare-fun e!41087 () Bool)

(assert (=> mapNonEmpty!2954 (= mapRes!2954 (and tp!8138 e!41087))))

(declare-fun mapRest!2954 () (Array (_ BitVec 32) ValueCell!864))

(declare-fun mapValue!2954 () ValueCell!864)

(declare-fun mapKey!2954 () (_ BitVec 32))

(assert (=> mapNonEmpty!2954 (= mapRest!2944 (store mapRest!2954 mapKey!2954 mapValue!2954))))

(declare-fun b!62580 () Bool)

(assert (=> b!62580 (= e!41087 tp_is_empty!2415)))

(declare-fun b!62581 () Bool)

(declare-fun e!41086 () Bool)

(assert (=> b!62581 (= e!41086 tp_is_empty!2415)))

(declare-fun mapIsEmpty!2954 () Bool)

(assert (=> mapIsEmpty!2954 mapRes!2954))

(declare-fun condMapEmpty!2954 () Bool)

(declare-fun mapDefault!2954 () ValueCell!864)

(assert (=> mapNonEmpty!2944 (= condMapEmpty!2954 (= mapRest!2944 ((as const (Array (_ BitVec 32) ValueCell!864)) mapDefault!2954)))))

(assert (=> mapNonEmpty!2944 (= tp!8119 (and e!41086 mapRes!2954))))

(assert (= (and mapNonEmpty!2944 condMapEmpty!2954) mapIsEmpty!2954))

(assert (= (and mapNonEmpty!2944 (not condMapEmpty!2954)) mapNonEmpty!2954))

(assert (= (and mapNonEmpty!2954 ((_ is ValueCellFull!864) mapValue!2954)) b!62580))

(assert (= (and mapNonEmpty!2944 ((_ is ValueCellFull!864) mapDefault!2954)) b!62581))

(declare-fun m!56283 () Bool)

(assert (=> mapNonEmpty!2954 m!56283))

(declare-fun b_lambda!2793 () Bool)

(assert (= b_lambda!2791 (or (and b!62272 b_free!1997) (and b!62266 b_free!1999 (= (defaultEntry!2088 newMap!16) (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))))) b_lambda!2793)))

(check-sat (not b!62418) (not b!62409) (not bm!4822) (not b!62426) (not bm!4838) (not bm!4899) (not d!12673) (not b!62413) (not b!62571) (not bm!4908) tp_is_empty!2415 (not b!62545) (not d!12677) (not b!62555) (not d!12695) (not b!62434) (not bm!4900) (not bm!4898) (not b!62435) (not b!62564) (not b_lambda!2789) (not bm!4843) (not b!62445) (not d!12697) (not b!62343) (not bm!4911) (not b!62363) (not d!12693) (not bm!4840) (not b_next!1999) (not bm!4909) (not b_next!1997) (not b!62411) (not b!62361) (not bm!4910) (not mapNonEmpty!2953) (not b!62348) (not bm!4912) (not b!62550) (not b!62436) (not b!62416) b_and!3829 (not b!62443) (not d!12691) b_and!3827 (not b!62547) (not bm!4894) (not b_lambda!2793) (not bm!4841) (not bm!4902) (not d!12681) (not d!12699) (not mapNonEmpty!2954) (not b!62538) (not b!62415) (not b!62419) (not d!12675) (not b!62557) (not b!62570) (not bm!4895) (not bm!4914) (not b!62362))
(check-sat b_and!3827 b_and!3829 (not b_next!1997) (not b_next!1999))
(get-model)

(declare-fun d!12703 () Bool)

(declare-fun res!34334 () Bool)

(declare-fun e!41094 () Bool)

(assert (=> d!12703 (=> res!34334 e!41094)))

(assert (=> d!12703 (= res!34334 (bvsge #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(assert (=> d!12703 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3720 newMap!16) (mask!5994 newMap!16)) e!41094)))

(declare-fun b!62590 () Bool)

(declare-fun e!41096 () Bool)

(assert (=> b!62590 (= e!41094 e!41096)))

(declare-fun c!8350 () Bool)

(assert (=> b!62590 (= c!8350 (validKeyInArray!0 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!4918 () Bool)

(declare-fun call!4921 () Bool)

(assert (=> bm!4918 (= call!4921 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3720 newMap!16) (mask!5994 newMap!16)))))

(declare-fun b!62591 () Bool)

(declare-fun e!41095 () Bool)

(assert (=> b!62591 (= e!41095 call!4921)))

(declare-fun b!62592 () Bool)

(assert (=> b!62592 (= e!41096 call!4921)))

(declare-fun b!62593 () Bool)

(assert (=> b!62593 (= e!41096 e!41095)))

(declare-fun lt!26159 () (_ BitVec 64))

(assert (=> b!62593 (= lt!26159 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26160 () Unit!1693)

(declare-fun lemmaArrayContainsFromImpliesContainsFromZero!0 (array!3761 (_ BitVec 64) (_ BitVec 32)) Unit!1693)

(assert (=> b!62593 (= lt!26160 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3720 newMap!16) lt!26159 #b00000000000000000000000000000000))))

(assert (=> b!62593 (arrayContainsKey!0 (_keys!3720 newMap!16) lt!26159 #b00000000000000000000000000000000)))

(declare-fun lt!26158 () Unit!1693)

(assert (=> b!62593 (= lt!26158 lt!26160)))

(declare-fun res!34333 () Bool)

(assert (=> b!62593 (= res!34333 (= (seekEntryOrOpen!0 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000) (_keys!3720 newMap!16) (mask!5994 newMap!16)) (Found!229 #b00000000000000000000000000000000)))))

(assert (=> b!62593 (=> (not res!34333) (not e!41095))))

(assert (= (and d!12703 (not res!34334)) b!62590))

(assert (= (and b!62590 c!8350) b!62593))

(assert (= (and b!62590 (not c!8350)) b!62592))

(assert (= (and b!62593 res!34333) b!62591))

(assert (= (or b!62591 b!62592) bm!4918))

(declare-fun m!56285 () Bool)

(assert (=> b!62590 m!56285))

(assert (=> b!62590 m!56285))

(declare-fun m!56287 () Bool)

(assert (=> b!62590 m!56287))

(declare-fun m!56289 () Bool)

(assert (=> bm!4918 m!56289))

(assert (=> b!62593 m!56285))

(declare-fun m!56291 () Bool)

(assert (=> b!62593 m!56291))

(declare-fun m!56293 () Bool)

(assert (=> b!62593 m!56293))

(assert (=> b!62593 m!56285))

(declare-fun m!56295 () Bool)

(assert (=> b!62593 m!56295))

(assert (=> b!62435 d!12703))

(declare-fun b!62610 () Bool)

(declare-fun e!41105 () Bool)

(declare-fun lt!26166 () SeekEntryResult!229)

(assert (=> b!62610 (= e!41105 ((_ is Undefined!229) lt!26166))))

(declare-fun b!62611 () Bool)

(declare-fun e!41106 () Bool)

(assert (=> b!62611 (= e!41106 e!41105)))

(declare-fun c!8355 () Bool)

(assert (=> b!62611 (= c!8355 ((_ is MissingVacant!229) lt!26166))))

(declare-fun b!62612 () Bool)

(declare-fun res!34343 () Bool)

(declare-fun e!41108 () Bool)

(assert (=> b!62612 (=> (not res!34343) (not e!41108))))

(declare-fun call!4926 () Bool)

(assert (=> b!62612 (= res!34343 call!4926)))

(assert (=> b!62612 (= e!41105 e!41108)))

(declare-fun b!62613 () Bool)

(declare-fun e!41107 () Bool)

(assert (=> b!62613 (= e!41106 e!41107)))

(declare-fun res!34346 () Bool)

(assert (=> b!62613 (= res!34346 call!4926)))

(assert (=> b!62613 (=> (not res!34346) (not e!41107))))

(declare-fun bm!4923 () Bool)

(declare-fun call!4927 () Bool)

(assert (=> bm!4923 (= call!4927 (arrayContainsKey!0 (_keys!3720 newMap!16) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun d!12705 () Bool)

(assert (=> d!12705 e!41106))

(declare-fun c!8356 () Bool)

(assert (=> d!12705 (= c!8356 ((_ is MissingZero!229) lt!26166))))

(assert (=> d!12705 (= lt!26166 (seekEntryOrOpen!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (_keys!3720 newMap!16) (mask!5994 newMap!16)))))

(declare-fun lt!26165 () Unit!1693)

(declare-fun choose!330 (array!3761 array!3763 (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 (_ BitVec 64) Int) Unit!1693)

(assert (=> d!12705 (= lt!26165 (choose!330 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (defaultEntry!2088 newMap!16)))))

(assert (=> d!12705 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!12705 (= (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!17 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (defaultEntry!2088 newMap!16)) lt!26165)))

(declare-fun b!62614 () Bool)

(assert (=> b!62614 (= e!41108 (not call!4927))))

(declare-fun b!62615 () Bool)

(declare-fun res!34344 () Bool)

(assert (=> b!62615 (=> (not res!34344) (not e!41108))))

(assert (=> b!62615 (= res!34344 (= (select (arr!1799 (_keys!3720 newMap!16)) (index!3044 lt!26166)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62615 (and (bvsge (index!3044 lt!26166) #b00000000000000000000000000000000) (bvslt (index!3044 lt!26166) (size!2031 (_keys!3720 newMap!16))))))

(declare-fun b!62616 () Bool)

(assert (=> b!62616 (= e!41107 (not call!4927))))

(declare-fun bm!4924 () Bool)

(assert (=> bm!4924 (= call!4926 (inRange!0 (ite c!8356 (index!3041 lt!26166) (index!3044 lt!26166)) (mask!5994 newMap!16)))))

(declare-fun b!62617 () Bool)

(assert (=> b!62617 (and (bvsge (index!3041 lt!26166) #b00000000000000000000000000000000) (bvslt (index!3041 lt!26166) (size!2031 (_keys!3720 newMap!16))))))

(declare-fun res!34345 () Bool)

(assert (=> b!62617 (= res!34345 (= (select (arr!1799 (_keys!3720 newMap!16)) (index!3041 lt!26166)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62617 (=> (not res!34345) (not e!41107))))

(assert (= (and d!12705 c!8356) b!62613))

(assert (= (and d!12705 (not c!8356)) b!62611))

(assert (= (and b!62613 res!34346) b!62617))

(assert (= (and b!62617 res!34345) b!62616))

(assert (= (and b!62611 c!8355) b!62612))

(assert (= (and b!62611 (not c!8355)) b!62610))

(assert (= (and b!62612 res!34343) b!62615))

(assert (= (and b!62615 res!34344) b!62614))

(assert (= (or b!62613 b!62612) bm!4924))

(assert (= (or b!62616 b!62614) bm!4923))

(assert (=> d!12705 m!56051))

(assert (=> d!12705 m!56231))

(assert (=> d!12705 m!56051))

(declare-fun m!56297 () Bool)

(assert (=> d!12705 m!56297))

(declare-fun m!56299 () Bool)

(assert (=> d!12705 m!56299))

(declare-fun m!56301 () Bool)

(assert (=> b!62615 m!56301))

(declare-fun m!56303 () Bool)

(assert (=> bm!4924 m!56303))

(assert (=> bm!4923 m!56051))

(assert (=> bm!4923 m!56267))

(declare-fun m!56305 () Bool)

(assert (=> b!62617 m!56305))

(assert (=> bm!4908 d!12705))

(declare-fun d!12707 () Bool)

(declare-fun e!41111 () Bool)

(assert (=> d!12707 e!41111))

(declare-fun res!34351 () Bool)

(assert (=> d!12707 (=> (not res!34351) (not e!41111))))

(declare-fun lt!26178 () ListLongMap!1373)

(assert (=> d!12707 (= res!34351 (contains!690 lt!26178 (_1!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun lt!26177 () List!1439)

(assert (=> d!12707 (= lt!26178 (ListLongMap!1374 lt!26177))))

(declare-fun lt!26176 () Unit!1693)

(declare-fun lt!26175 () Unit!1693)

(assert (=> d!12707 (= lt!26176 lt!26175)))

(assert (=> d!12707 (= (getValueByKey!126 lt!26177 (_1!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))) (Some!131 (_2!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun lemmaContainsTupThenGetReturnValue!43 (List!1439 (_ BitVec 64) V!2867) Unit!1693)

(assert (=> d!12707 (= lt!26175 (lemmaContainsTupThenGetReturnValue!43 lt!26177 (_1!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) (_2!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun insertStrictlySorted!46 (List!1439 (_ BitVec 64) V!2867) List!1439)

(assert (=> d!12707 (= lt!26177 (insertStrictlySorted!46 (toList!702 (ite c!8300 call!4843 (ite c!8302 call!4840 call!4846))) (_1!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) (_2!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> d!12707 (= (+!83 (ite c!8300 call!4843 (ite c!8302 call!4840 call!4846)) (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26178)))

(declare-fun b!62622 () Bool)

(declare-fun res!34352 () Bool)

(assert (=> b!62622 (=> (not res!34352) (not e!41111))))

(assert (=> b!62622 (= res!34352 (= (getValueByKey!126 (toList!702 lt!26178) (_1!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))) (Some!131 (_2!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))))

(declare-fun b!62623 () Bool)

(declare-fun contains!693 (List!1439 tuple2!2038) Bool)

(assert (=> b!62623 (= e!41111 (contains!693 (toList!702 lt!26178) (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(assert (= (and d!12707 res!34351) b!62622))

(assert (= (and b!62622 res!34352) b!62623))

(declare-fun m!56307 () Bool)

(assert (=> d!12707 m!56307))

(declare-fun m!56309 () Bool)

(assert (=> d!12707 m!56309))

(declare-fun m!56311 () Bool)

(assert (=> d!12707 m!56311))

(declare-fun m!56313 () Bool)

(assert (=> d!12707 m!56313))

(declare-fun m!56315 () Bool)

(assert (=> b!62622 m!56315))

(declare-fun m!56317 () Bool)

(assert (=> b!62623 m!56317))

(assert (=> bm!4838 d!12707))

(declare-fun d!12709 () Bool)

(declare-fun e!41113 () Bool)

(assert (=> d!12709 e!41113))

(declare-fun res!34353 () Bool)

(assert (=> d!12709 (=> res!34353 e!41113)))

(declare-fun lt!26182 () Bool)

(assert (=> d!12709 (= res!34353 (not lt!26182))))

(declare-fun lt!26181 () Bool)

(assert (=> d!12709 (= lt!26182 lt!26181)))

(declare-fun lt!26179 () Unit!1693)

(declare-fun e!41112 () Unit!1693)

(assert (=> d!12709 (= lt!26179 e!41112)))

(declare-fun c!8357 () Bool)

(assert (=> d!12709 (= c!8357 lt!26181)))

(assert (=> d!12709 (= lt!26181 (containsKey!130 (toList!702 call!4912) (ite c!8334 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (select (arr!1799 (_keys!3720 newMap!16)) (index!3042 lt!26125)))))))

(assert (=> d!12709 (= (contains!690 call!4912 (ite c!8334 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (select (arr!1799 (_keys!3720 newMap!16)) (index!3042 lt!26125)))) lt!26182)))

(declare-fun b!62624 () Bool)

(declare-fun lt!26180 () Unit!1693)

(assert (=> b!62624 (= e!41112 lt!26180)))

(assert (=> b!62624 (= lt!26180 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 call!4912) (ite c!8334 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (select (arr!1799 (_keys!3720 newMap!16)) (index!3042 lt!26125)))))))

(assert (=> b!62624 (isDefined!79 (getValueByKey!126 (toList!702 call!4912) (ite c!8334 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (select (arr!1799 (_keys!3720 newMap!16)) (index!3042 lt!26125)))))))

(declare-fun b!62625 () Bool)

(declare-fun Unit!1703 () Unit!1693)

(assert (=> b!62625 (= e!41112 Unit!1703)))

(declare-fun b!62626 () Bool)

(assert (=> b!62626 (= e!41113 (isDefined!79 (getValueByKey!126 (toList!702 call!4912) (ite c!8334 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (select (arr!1799 (_keys!3720 newMap!16)) (index!3042 lt!26125))))))))

(assert (= (and d!12709 c!8357) b!62624))

(assert (= (and d!12709 (not c!8357)) b!62625))

(assert (= (and d!12709 (not res!34353)) b!62626))

(declare-fun m!56319 () Bool)

(assert (=> d!12709 m!56319))

(declare-fun m!56321 () Bool)

(assert (=> b!62624 m!56321))

(declare-fun m!56323 () Bool)

(assert (=> b!62624 m!56323))

(assert (=> b!62624 m!56323))

(declare-fun m!56325 () Bool)

(assert (=> b!62624 m!56325))

(assert (=> b!62626 m!56323))

(assert (=> b!62626 m!56323))

(assert (=> b!62626 m!56325))

(assert (=> bm!4909 d!12709))

(declare-fun d!12711 () Bool)

(declare-fun e!41115 () Bool)

(assert (=> d!12711 e!41115))

(declare-fun res!34354 () Bool)

(assert (=> d!12711 (=> res!34354 e!41115)))

(declare-fun lt!26186 () Bool)

(assert (=> d!12711 (= res!34354 (not lt!26186))))

(declare-fun lt!26185 () Bool)

(assert (=> d!12711 (= lt!26186 lt!26185)))

(declare-fun lt!26183 () Unit!1693)

(declare-fun e!41114 () Unit!1693)

(assert (=> d!12711 (= lt!26183 e!41114)))

(declare-fun c!8358 () Bool)

(assert (=> d!12711 (= c!8358 lt!26185)))

(assert (=> d!12711 (= lt!26185 (containsKey!130 (toList!702 lt!26046) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!12711 (= (contains!690 lt!26046 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!26186)))

(declare-fun b!62627 () Bool)

(declare-fun lt!26184 () Unit!1693)

(assert (=> b!62627 (= e!41114 lt!26184)))

(assert (=> b!62627 (= lt!26184 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 lt!26046) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!62627 (isDefined!79 (getValueByKey!126 (toList!702 lt!26046) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!62628 () Bool)

(declare-fun Unit!1704 () Unit!1693)

(assert (=> b!62628 (= e!41114 Unit!1704)))

(declare-fun b!62629 () Bool)

(assert (=> b!62629 (= e!41115 (isDefined!79 (getValueByKey!126 (toList!702 lt!26046) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!12711 c!8358) b!62627))

(assert (= (and d!12711 (not c!8358)) b!62628))

(assert (= (and d!12711 (not res!34354)) b!62629))

(assert (=> d!12711 m!56139))

(declare-fun m!56327 () Bool)

(assert (=> d!12711 m!56327))

(assert (=> b!62627 m!56139))

(declare-fun m!56329 () Bool)

(assert (=> b!62627 m!56329))

(assert (=> b!62627 m!56139))

(declare-fun m!56331 () Bool)

(assert (=> b!62627 m!56331))

(assert (=> b!62627 m!56331))

(declare-fun m!56333 () Bool)

(assert (=> b!62627 m!56333))

(assert (=> b!62629 m!56139))

(assert (=> b!62629 m!56331))

(assert (=> b!62629 m!56331))

(assert (=> b!62629 m!56333))

(assert (=> b!62411 d!12711))

(declare-fun d!12713 () Bool)

(declare-fun e!41116 () Bool)

(assert (=> d!12713 e!41116))

(declare-fun res!34355 () Bool)

(assert (=> d!12713 (=> (not res!34355) (not e!41116))))

(declare-fun lt!26190 () ListLongMap!1373)

(assert (=> d!12713 (= res!34355 (contains!690 lt!26190 (_1!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun lt!26189 () List!1439)

(assert (=> d!12713 (= lt!26190 (ListLongMap!1374 lt!26189))))

(declare-fun lt!26188 () Unit!1693)

(declare-fun lt!26187 () Unit!1693)

(assert (=> d!12713 (= lt!26188 lt!26187)))

(assert (=> d!12713 (= (getValueByKey!126 lt!26189 (_1!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) (Some!131 (_2!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!12713 (= lt!26187 (lemmaContainsTupThenGetReturnValue!43 lt!26189 (_1!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!12713 (= lt!26189 (insertStrictlySorted!46 (toList!702 lt!26042) (_1!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!12713 (= (+!83 lt!26042 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) lt!26190)))

(declare-fun b!62630 () Bool)

(declare-fun res!34356 () Bool)

(assert (=> b!62630 (=> (not res!34356) (not e!41116))))

(assert (=> b!62630 (= res!34356 (= (getValueByKey!126 (toList!702 lt!26190) (_1!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) (Some!131 (_2!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!62631 () Bool)

(assert (=> b!62631 (= e!41116 (contains!693 (toList!702 lt!26190) (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))

(assert (= (and d!12713 res!34355) b!62630))

(assert (= (and b!62630 res!34356) b!62631))

(declare-fun m!56335 () Bool)

(assert (=> d!12713 m!56335))

(declare-fun m!56337 () Bool)

(assert (=> d!12713 m!56337))

(declare-fun m!56339 () Bool)

(assert (=> d!12713 m!56339))

(declare-fun m!56341 () Bool)

(assert (=> d!12713 m!56341))

(declare-fun m!56343 () Bool)

(assert (=> b!62630 m!56343))

(declare-fun m!56345 () Bool)

(assert (=> b!62631 m!56345))

(assert (=> b!62409 d!12713))

(declare-fun d!12715 () Bool)

(declare-fun get!1086 (Option!132) V!2867)

(assert (=> d!12715 (= (apply!68 lt!26047 lt!26051) (get!1086 (getValueByKey!126 (toList!702 lt!26047) lt!26051)))))

(declare-fun bs!2729 () Bool)

(assert (= bs!2729 d!12715))

(declare-fun m!56347 () Bool)

(assert (=> bs!2729 m!56347))

(assert (=> bs!2729 m!56347))

(declare-fun m!56349 () Bool)

(assert (=> bs!2729 m!56349))

(assert (=> b!62409 d!12715))

(declare-fun d!12717 () Bool)

(declare-fun e!41118 () Bool)

(assert (=> d!12717 e!41118))

(declare-fun res!34357 () Bool)

(assert (=> d!12717 (=> res!34357 e!41118)))

(declare-fun lt!26194 () Bool)

(assert (=> d!12717 (= res!34357 (not lt!26194))))

(declare-fun lt!26193 () Bool)

(assert (=> d!12717 (= lt!26194 lt!26193)))

(declare-fun lt!26191 () Unit!1693)

(declare-fun e!41117 () Unit!1693)

(assert (=> d!12717 (= lt!26191 e!41117)))

(declare-fun c!8359 () Bool)

(assert (=> d!12717 (= c!8359 lt!26193)))

(assert (=> d!12717 (= lt!26193 (containsKey!130 (toList!702 (+!83 lt!26044 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26050))))

(assert (=> d!12717 (= (contains!690 (+!83 lt!26044 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))) lt!26050) lt!26194)))

(declare-fun b!62632 () Bool)

(declare-fun lt!26192 () Unit!1693)

(assert (=> b!62632 (= e!41117 lt!26192)))

(assert (=> b!62632 (= lt!26192 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 (+!83 lt!26044 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26050))))

(assert (=> b!62632 (isDefined!79 (getValueByKey!126 (toList!702 (+!83 lt!26044 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26050))))

(declare-fun b!62633 () Bool)

(declare-fun Unit!1705 () Unit!1693)

(assert (=> b!62633 (= e!41117 Unit!1705)))

(declare-fun b!62634 () Bool)

(assert (=> b!62634 (= e!41118 (isDefined!79 (getValueByKey!126 (toList!702 (+!83 lt!26044 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26050)))))

(assert (= (and d!12717 c!8359) b!62632))

(assert (= (and d!12717 (not c!8359)) b!62633))

(assert (= (and d!12717 (not res!34357)) b!62634))

(declare-fun m!56351 () Bool)

(assert (=> d!12717 m!56351))

(declare-fun m!56353 () Bool)

(assert (=> b!62632 m!56353))

(declare-fun m!56355 () Bool)

(assert (=> b!62632 m!56355))

(assert (=> b!62632 m!56355))

(declare-fun m!56357 () Bool)

(assert (=> b!62632 m!56357))

(assert (=> b!62634 m!56355))

(assert (=> b!62634 m!56355))

(assert (=> b!62634 m!56357))

(assert (=> b!62409 d!12717))

(declare-fun d!12719 () Bool)

(assert (=> d!12719 (= (apply!68 (+!83 lt!26048 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))) lt!26055) (apply!68 lt!26048 lt!26055))))

(declare-fun lt!26197 () Unit!1693)

(declare-fun choose!331 (ListLongMap!1373 (_ BitVec 64) V!2867 (_ BitVec 64)) Unit!1693)

(assert (=> d!12719 (= lt!26197 (choose!331 lt!26048 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))) lt!26055))))

(declare-fun e!41121 () Bool)

(assert (=> d!12719 e!41121))

(declare-fun res!34360 () Bool)

(assert (=> d!12719 (=> (not res!34360) (not e!41121))))

(assert (=> d!12719 (= res!34360 (contains!690 lt!26048 lt!26055))))

(assert (=> d!12719 (= (addApplyDifferent!44 lt!26048 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))) lt!26055) lt!26197)))

(declare-fun b!62638 () Bool)

(assert (=> b!62638 (= e!41121 (not (= lt!26055 lt!26058)))))

(assert (= (and d!12719 res!34360) b!62638))

(declare-fun m!56359 () Bool)

(assert (=> d!12719 m!56359))

(assert (=> d!12719 m!56161))

(assert (=> d!12719 m!56163))

(assert (=> d!12719 m!56173))

(assert (=> d!12719 m!56161))

(declare-fun m!56361 () Bool)

(assert (=> d!12719 m!56361))

(assert (=> b!62409 d!12719))

(declare-fun d!12721 () Bool)

(assert (=> d!12721 (= (apply!68 lt!26042 lt!26045) (get!1086 (getValueByKey!126 (toList!702 lt!26042) lt!26045)))))

(declare-fun bs!2730 () Bool)

(assert (= bs!2730 d!12721))

(declare-fun m!56363 () Bool)

(assert (=> bs!2730 m!56363))

(assert (=> bs!2730 m!56363))

(declare-fun m!56365 () Bool)

(assert (=> bs!2730 m!56365))

(assert (=> b!62409 d!12721))

(declare-fun d!12723 () Bool)

(declare-fun e!41122 () Bool)

(assert (=> d!12723 e!41122))

(declare-fun res!34361 () Bool)

(assert (=> d!12723 (=> (not res!34361) (not e!41122))))

(declare-fun lt!26201 () ListLongMap!1373)

(assert (=> d!12723 (= res!34361 (contains!690 lt!26201 (_1!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun lt!26200 () List!1439)

(assert (=> d!12723 (= lt!26201 (ListLongMap!1374 lt!26200))))

(declare-fun lt!26199 () Unit!1693)

(declare-fun lt!26198 () Unit!1693)

(assert (=> d!12723 (= lt!26199 lt!26198)))

(assert (=> d!12723 (= (getValueByKey!126 lt!26200 (_1!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))) (Some!131 (_2!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!12723 (= lt!26198 (lemmaContainsTupThenGetReturnValue!43 lt!26200 (_1!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!12723 (= lt!26200 (insertStrictlySorted!46 (toList!702 lt!26044) (_1!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!12723 (= (+!83 lt!26044 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))) lt!26201)))

(declare-fun b!62639 () Bool)

(declare-fun res!34362 () Bool)

(assert (=> b!62639 (=> (not res!34362) (not e!41122))))

(assert (=> b!62639 (= res!34362 (= (getValueByKey!126 (toList!702 lt!26201) (_1!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))) (Some!131 (_2!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!62640 () Bool)

(assert (=> b!62640 (= e!41122 (contains!693 (toList!702 lt!26201) (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))))

(assert (= (and d!12723 res!34361) b!62639))

(assert (= (and b!62639 res!34362) b!62640))

(declare-fun m!56367 () Bool)

(assert (=> d!12723 m!56367))

(declare-fun m!56369 () Bool)

(assert (=> d!12723 m!56369))

(declare-fun m!56371 () Bool)

(assert (=> d!12723 m!56371))

(declare-fun m!56373 () Bool)

(assert (=> d!12723 m!56373))

(declare-fun m!56375 () Bool)

(assert (=> b!62639 m!56375))

(declare-fun m!56377 () Bool)

(assert (=> b!62640 m!56377))

(assert (=> b!62409 d!12723))

(declare-fun d!12725 () Bool)

(assert (=> d!12725 (= (apply!68 (+!83 lt!26042 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) lt!26045) (get!1086 (getValueByKey!126 (toList!702 (+!83 lt!26042 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26045)))))

(declare-fun bs!2731 () Bool)

(assert (= bs!2731 d!12725))

(declare-fun m!56379 () Bool)

(assert (=> bs!2731 m!56379))

(assert (=> bs!2731 m!56379))

(declare-fun m!56381 () Bool)

(assert (=> bs!2731 m!56381))

(assert (=> b!62409 d!12725))

(declare-fun d!12727 () Bool)

(assert (=> d!12727 (= (apply!68 (+!83 lt!26042 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) lt!26045) (apply!68 lt!26042 lt!26045))))

(declare-fun lt!26202 () Unit!1693)

(assert (=> d!12727 (= lt!26202 (choose!331 lt!26042 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992))) lt!26045))))

(declare-fun e!41123 () Bool)

(assert (=> d!12727 e!41123))

(declare-fun res!34363 () Bool)

(assert (=> d!12727 (=> (not res!34363) (not e!41123))))

(assert (=> d!12727 (= res!34363 (contains!690 lt!26042 lt!26045))))

(assert (=> d!12727 (= (addApplyDifferent!44 lt!26042 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992))) lt!26045) lt!26202)))

(declare-fun b!62641 () Bool)

(assert (=> b!62641 (= e!41123 (not (= lt!26045 lt!26057)))))

(assert (= (and d!12727 res!34363) b!62641))

(declare-fun m!56383 () Bool)

(assert (=> d!12727 m!56383))

(assert (=> d!12727 m!56179))

(assert (=> d!12727 m!56183))

(assert (=> d!12727 m!56159))

(assert (=> d!12727 m!56179))

(declare-fun m!56385 () Bool)

(assert (=> d!12727 m!56385))

(assert (=> b!62409 d!12727))

(declare-fun b!62666 () Bool)

(declare-fun lt!26223 () Unit!1693)

(declare-fun lt!26217 () Unit!1693)

(assert (=> b!62666 (= lt!26223 lt!26217)))

(declare-fun lt!26220 () (_ BitVec 64))

(declare-fun lt!26221 () V!2867)

(declare-fun lt!26222 () (_ BitVec 64))

(declare-fun lt!26218 () ListLongMap!1373)

(assert (=> b!62666 (not (contains!690 (+!83 lt!26218 (tuple2!2039 lt!26222 lt!26221)) lt!26220))))

(declare-fun addStillNotContains!17 (ListLongMap!1373 (_ BitVec 64) V!2867 (_ BitVec 64)) Unit!1693)

(assert (=> b!62666 (= lt!26217 (addStillNotContains!17 lt!26218 lt!26222 lt!26221 lt!26220))))

(assert (=> b!62666 (= lt!26220 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!62666 (= lt!26221 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!62666 (= lt!26222 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun call!4930 () ListLongMap!1373)

(assert (=> b!62666 (= lt!26218 call!4930)))

(declare-fun e!41138 () ListLongMap!1373)

(assert (=> b!62666 (= e!41138 (+!83 call!4930 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!62667 () Bool)

(declare-fun e!41142 () Bool)

(declare-fun e!41143 () Bool)

(assert (=> b!62667 (= e!41142 e!41143)))

(assert (=> b!62667 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun lt!26219 () ListLongMap!1373)

(declare-fun res!34373 () Bool)

(assert (=> b!62667 (= res!34373 (contains!690 lt!26219 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!62667 (=> (not res!34373) (not e!41143))))

(declare-fun b!62668 () Bool)

(declare-fun e!41141 () Bool)

(assert (=> b!62668 (= e!41142 e!41141)))

(declare-fun c!8368 () Bool)

(assert (=> b!62668 (= c!8368 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun b!62669 () Bool)

(declare-fun res!34372 () Bool)

(declare-fun e!41144 () Bool)

(assert (=> b!62669 (=> (not res!34372) (not e!41144))))

(assert (=> b!62669 (= res!34372 (not (contains!690 lt!26219 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!62670 () Bool)

(declare-fun e!41140 () ListLongMap!1373)

(assert (=> b!62670 (= e!41140 (ListLongMap!1374 Nil!1436))))

(declare-fun b!62671 () Bool)

(assert (=> b!62671 (= e!41144 e!41142)))

(declare-fun c!8370 () Bool)

(declare-fun e!41139 () Bool)

(assert (=> b!62671 (= c!8370 e!41139)))

(declare-fun res!34375 () Bool)

(assert (=> b!62671 (=> (not res!34375) (not e!41139))))

(assert (=> b!62671 (= res!34375 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun d!12729 () Bool)

(assert (=> d!12729 e!41144))

(declare-fun res!34374 () Bool)

(assert (=> d!12729 (=> (not res!34374) (not e!41144))))

(assert (=> d!12729 (= res!34374 (not (contains!690 lt!26219 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12729 (= lt!26219 e!41140)))

(declare-fun c!8369 () Bool)

(assert (=> d!12729 (= c!8369 (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992))))))))

(assert (=> d!12729 (validMask!0 (mask!5994 (v!2419 (underlying!233 thiss!992))))))

(assert (=> d!12729 (= (getCurrentListMapNoExtraKeys!46 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (_values!2071 (v!2419 (underlying!233 thiss!992))) (mask!5994 (v!2419 (underlying!233 thiss!992))) (extraKeys!1967 (v!2419 (underlying!233 thiss!992))) (zeroValue!2000 (v!2419 (underlying!233 thiss!992))) (minValue!2000 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2088 (v!2419 (underlying!233 thiss!992)))) lt!26219)))

(declare-fun b!62672 () Bool)

(assert (=> b!62672 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992))))))))

(assert (=> b!62672 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2032 (_values!2071 (v!2419 (underlying!233 thiss!992))))))))

(assert (=> b!62672 (= e!41143 (= (apply!68 lt!26219 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!62673 () Bool)

(assert (=> b!62673 (= e!41141 (= lt!26219 (getCurrentListMapNoExtraKeys!46 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (_values!2071 (v!2419 (underlying!233 thiss!992))) (mask!5994 (v!2419 (underlying!233 thiss!992))) (extraKeys!1967 (v!2419 (underlying!233 thiss!992))) (zeroValue!2000 (v!2419 (underlying!233 thiss!992))) (minValue!2000 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun b!62674 () Bool)

(declare-fun isEmpty!299 (ListLongMap!1373) Bool)

(assert (=> b!62674 (= e!41141 (isEmpty!299 lt!26219))))

(declare-fun b!62675 () Bool)

(assert (=> b!62675 (= e!41140 e!41138)))

(declare-fun c!8371 () Bool)

(assert (=> b!62675 (= c!8371 (validKeyInArray!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!62676 () Bool)

(assert (=> b!62676 (= e!41138 call!4930)))

(declare-fun bm!4927 () Bool)

(assert (=> bm!4927 (= call!4930 (getCurrentListMapNoExtraKeys!46 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (_values!2071 (v!2419 (underlying!233 thiss!992))) (mask!5994 (v!2419 (underlying!233 thiss!992))) (extraKeys!1967 (v!2419 (underlying!233 thiss!992))) (zeroValue!2000 (v!2419 (underlying!233 thiss!992))) (minValue!2000 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2088 (v!2419 (underlying!233 thiss!992)))))))

(declare-fun b!62677 () Bool)

(assert (=> b!62677 (= e!41139 (validKeyInArray!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!62677 (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000)))

(assert (= (and d!12729 c!8369) b!62670))

(assert (= (and d!12729 (not c!8369)) b!62675))

(assert (= (and b!62675 c!8371) b!62666))

(assert (= (and b!62675 (not c!8371)) b!62676))

(assert (= (or b!62666 b!62676) bm!4927))

(assert (= (and d!12729 res!34374) b!62669))

(assert (= (and b!62669 res!34372) b!62671))

(assert (= (and b!62671 res!34375) b!62677))

(assert (= (and b!62671 c!8370) b!62667))

(assert (= (and b!62671 (not c!8370)) b!62668))

(assert (= (and b!62667 res!34373) b!62672))

(assert (= (and b!62668 c!8368) b!62673))

(assert (= (and b!62668 (not c!8368)) b!62674))

(declare-fun b_lambda!2795 () Bool)

(assert (=> (not b_lambda!2795) (not b!62666)))

(assert (=> b!62666 t!4830))

(declare-fun b_and!3831 () Bool)

(assert (= b_and!3827 (and (=> t!4830 result!2445) b_and!3831)))

(assert (=> b!62666 t!4832))

(declare-fun b_and!3833 () Bool)

(assert (= b_and!3829 (and (=> t!4832 result!2449) b_and!3833)))

(declare-fun b_lambda!2797 () Bool)

(assert (=> (not b_lambda!2797) (not b!62672)))

(assert (=> b!62672 t!4830))

(declare-fun b_and!3835 () Bool)

(assert (= b_and!3831 (and (=> t!4830 result!2445) b_and!3835)))

(assert (=> b!62672 t!4832))

(declare-fun b_and!3837 () Bool)

(assert (= b_and!3833 (and (=> t!4832 result!2449) b_and!3837)))

(declare-fun m!56387 () Bool)

(assert (=> b!62674 m!56387))

(assert (=> b!62672 m!56191))

(assert (=> b!62672 m!56061))

(assert (=> b!62672 m!56193))

(assert (=> b!62672 m!56139))

(assert (=> b!62672 m!56191))

(assert (=> b!62672 m!56061))

(assert (=> b!62672 m!56139))

(declare-fun m!56389 () Bool)

(assert (=> b!62672 m!56389))

(assert (=> b!62667 m!56139))

(assert (=> b!62667 m!56139))

(declare-fun m!56391 () Bool)

(assert (=> b!62667 m!56391))

(declare-fun m!56393 () Bool)

(assert (=> b!62673 m!56393))

(assert (=> b!62677 m!56139))

(assert (=> b!62677 m!56139))

(assert (=> b!62677 m!56153))

(assert (=> bm!4927 m!56393))

(declare-fun m!56395 () Bool)

(assert (=> d!12729 m!56395))

(assert (=> d!12729 m!56087))

(declare-fun m!56397 () Bool)

(assert (=> b!62669 m!56397))

(declare-fun m!56399 () Bool)

(assert (=> b!62666 m!56399))

(assert (=> b!62666 m!56399))

(declare-fun m!56401 () Bool)

(assert (=> b!62666 m!56401))

(assert (=> b!62666 m!56191))

(assert (=> b!62666 m!56061))

(assert (=> b!62666 m!56193))

(declare-fun m!56403 () Bool)

(assert (=> b!62666 m!56403))

(assert (=> b!62666 m!56139))

(assert (=> b!62666 m!56191))

(declare-fun m!56405 () Bool)

(assert (=> b!62666 m!56405))

(assert (=> b!62666 m!56061))

(assert (=> b!62675 m!56139))

(assert (=> b!62675 m!56139))

(assert (=> b!62675 m!56153))

(assert (=> b!62409 d!12729))

(declare-fun d!12731 () Bool)

(assert (=> d!12731 (= (apply!68 (+!83 lt!26047 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) lt!26051) (apply!68 lt!26047 lt!26051))))

(declare-fun lt!26224 () Unit!1693)

(assert (=> d!12731 (= lt!26224 (choose!331 lt!26047 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992))) lt!26051))))

(declare-fun e!41145 () Bool)

(assert (=> d!12731 e!41145))

(declare-fun res!34376 () Bool)

(assert (=> d!12731 (=> (not res!34376) (not e!41145))))

(assert (=> d!12731 (= res!34376 (contains!690 lt!26047 lt!26051))))

(assert (=> d!12731 (= (addApplyDifferent!44 lt!26047 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992))) lt!26051) lt!26224)))

(declare-fun b!62678 () Bool)

(assert (=> b!62678 (= e!41145 (not (= lt!26051 lt!26039)))))

(assert (= (and d!12731 res!34376) b!62678))

(declare-fun m!56407 () Bool)

(assert (=> d!12731 m!56407))

(assert (=> d!12731 m!56175))

(assert (=> d!12731 m!56177))

(assert (=> d!12731 m!56165))

(assert (=> d!12731 m!56175))

(declare-fun m!56409 () Bool)

(assert (=> d!12731 m!56409))

(assert (=> b!62409 d!12731))

(declare-fun d!12733 () Bool)

(assert (=> d!12733 (= (apply!68 lt!26048 lt!26055) (get!1086 (getValueByKey!126 (toList!702 lt!26048) lt!26055)))))

(declare-fun bs!2732 () Bool)

(assert (= bs!2732 d!12733))

(declare-fun m!56411 () Bool)

(assert (=> bs!2732 m!56411))

(assert (=> bs!2732 m!56411))

(declare-fun m!56413 () Bool)

(assert (=> bs!2732 m!56413))

(assert (=> b!62409 d!12733))

(declare-fun d!12735 () Bool)

(assert (=> d!12735 (= (apply!68 (+!83 lt!26047 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) lt!26051) (get!1086 (getValueByKey!126 (toList!702 (+!83 lt!26047 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26051)))))

(declare-fun bs!2733 () Bool)

(assert (= bs!2733 d!12735))

(declare-fun m!56415 () Bool)

(assert (=> bs!2733 m!56415))

(assert (=> bs!2733 m!56415))

(declare-fun m!56417 () Bool)

(assert (=> bs!2733 m!56417))

(assert (=> b!62409 d!12735))

(declare-fun d!12737 () Bool)

(declare-fun e!41146 () Bool)

(assert (=> d!12737 e!41146))

(declare-fun res!34377 () Bool)

(assert (=> d!12737 (=> (not res!34377) (not e!41146))))

(declare-fun lt!26228 () ListLongMap!1373)

(assert (=> d!12737 (= res!34377 (contains!690 lt!26228 (_1!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun lt!26227 () List!1439)

(assert (=> d!12737 (= lt!26228 (ListLongMap!1374 lt!26227))))

(declare-fun lt!26226 () Unit!1693)

(declare-fun lt!26225 () Unit!1693)

(assert (=> d!12737 (= lt!26226 lt!26225)))

(assert (=> d!12737 (= (getValueByKey!126 lt!26227 (_1!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) (Some!131 (_2!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!12737 (= lt!26225 (lemmaContainsTupThenGetReturnValue!43 lt!26227 (_1!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!12737 (= lt!26227 (insertStrictlySorted!46 (toList!702 lt!26047) (_1!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!12737 (= (+!83 lt!26047 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) lt!26228)))

(declare-fun b!62679 () Bool)

(declare-fun res!34378 () Bool)

(assert (=> b!62679 (=> (not res!34378) (not e!41146))))

(assert (=> b!62679 (= res!34378 (= (getValueByKey!126 (toList!702 lt!26228) (_1!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) (Some!131 (_2!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!62680 () Bool)

(assert (=> b!62680 (= e!41146 (contains!693 (toList!702 lt!26228) (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))

(assert (= (and d!12737 res!34377) b!62679))

(assert (= (and b!62679 res!34378) b!62680))

(declare-fun m!56419 () Bool)

(assert (=> d!12737 m!56419))

(declare-fun m!56421 () Bool)

(assert (=> d!12737 m!56421))

(declare-fun m!56423 () Bool)

(assert (=> d!12737 m!56423))

(declare-fun m!56425 () Bool)

(assert (=> d!12737 m!56425))

(declare-fun m!56427 () Bool)

(assert (=> b!62679 m!56427))

(declare-fun m!56429 () Bool)

(assert (=> b!62680 m!56429))

(assert (=> b!62409 d!12737))

(declare-fun d!12739 () Bool)

(assert (=> d!12739 (contains!690 (+!83 lt!26044 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))) lt!26050)))

(declare-fun lt!26231 () Unit!1693)

(declare-fun choose!332 (ListLongMap!1373 (_ BitVec 64) V!2867 (_ BitVec 64)) Unit!1693)

(assert (=> d!12739 (= lt!26231 (choose!332 lt!26044 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))) lt!26050))))

(assert (=> d!12739 (contains!690 lt!26044 lt!26050)))

(assert (=> d!12739 (= (addStillContains!44 lt!26044 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))) lt!26050) lt!26231)))

(declare-fun bs!2734 () Bool)

(assert (= bs!2734 d!12739))

(assert (=> bs!2734 m!56169))

(assert (=> bs!2734 m!56169))

(assert (=> bs!2734 m!56171))

(declare-fun m!56431 () Bool)

(assert (=> bs!2734 m!56431))

(declare-fun m!56433 () Bool)

(assert (=> bs!2734 m!56433))

(assert (=> b!62409 d!12739))

(declare-fun d!12741 () Bool)

(declare-fun e!41147 () Bool)

(assert (=> d!12741 e!41147))

(declare-fun res!34379 () Bool)

(assert (=> d!12741 (=> (not res!34379) (not e!41147))))

(declare-fun lt!26235 () ListLongMap!1373)

(assert (=> d!12741 (= res!34379 (contains!690 lt!26235 (_1!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun lt!26234 () List!1439)

(assert (=> d!12741 (= lt!26235 (ListLongMap!1374 lt!26234))))

(declare-fun lt!26233 () Unit!1693)

(declare-fun lt!26232 () Unit!1693)

(assert (=> d!12741 (= lt!26233 lt!26232)))

(assert (=> d!12741 (= (getValueByKey!126 lt!26234 (_1!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))) (Some!131 (_2!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!12741 (= lt!26232 (lemmaContainsTupThenGetReturnValue!43 lt!26234 (_1!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!12741 (= lt!26234 (insertStrictlySorted!46 (toList!702 lt!26048) (_1!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!12741 (= (+!83 lt!26048 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))) lt!26235)))

(declare-fun b!62682 () Bool)

(declare-fun res!34380 () Bool)

(assert (=> b!62682 (=> (not res!34380) (not e!41147))))

(assert (=> b!62682 (= res!34380 (= (getValueByKey!126 (toList!702 lt!26235) (_1!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))) (Some!131 (_2!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!62683 () Bool)

(assert (=> b!62683 (= e!41147 (contains!693 (toList!702 lt!26235) (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))))

(assert (= (and d!12741 res!34379) b!62682))

(assert (= (and b!62682 res!34380) b!62683))

(declare-fun m!56435 () Bool)

(assert (=> d!12741 m!56435))

(declare-fun m!56437 () Bool)

(assert (=> d!12741 m!56437))

(declare-fun m!56439 () Bool)

(assert (=> d!12741 m!56439))

(declare-fun m!56441 () Bool)

(assert (=> d!12741 m!56441))

(declare-fun m!56443 () Bool)

(assert (=> b!62682 m!56443))

(declare-fun m!56445 () Bool)

(assert (=> b!62683 m!56445))

(assert (=> b!62409 d!12741))

(declare-fun d!12743 () Bool)

(assert (=> d!12743 (= (apply!68 (+!83 lt!26048 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))) lt!26055) (get!1086 (getValueByKey!126 (toList!702 (+!83 lt!26048 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26055)))))

(declare-fun bs!2735 () Bool)

(assert (= bs!2735 d!12743))

(declare-fun m!56447 () Bool)

(assert (=> bs!2735 m!56447))

(assert (=> bs!2735 m!56447))

(declare-fun m!56449 () Bool)

(assert (=> bs!2735 m!56449))

(assert (=> b!62409 d!12743))

(declare-fun d!12745 () Bool)

(assert (=> d!12745 (= (apply!68 lt!26046 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1086 (getValueByKey!126 (toList!702 lt!26046) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!2736 () Bool)

(assert (= bs!2736 d!12745))

(assert (=> bs!2736 m!56139))

(assert (=> bs!2736 m!56331))

(assert (=> bs!2736 m!56331))

(declare-fun m!56451 () Bool)

(assert (=> bs!2736 m!56451))

(assert (=> b!62426 d!12745))

(declare-fun d!12747 () Bool)

(declare-fun c!8372 () Bool)

(assert (=> d!12747 (= c!8372 ((_ is ValueCellFull!864) (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!41148 () V!2867)

(assert (=> d!12747 (= (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!41148)))

(declare-fun b!62684 () Bool)

(assert (=> b!62684 (= e!41148 (get!1084 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!62685 () Bool)

(assert (=> b!62685 (= e!41148 (get!1085 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12747 c!8372) b!62684))

(assert (= (and d!12747 (not c!8372)) b!62685))

(assert (=> b!62684 m!56191))

(assert (=> b!62684 m!56061))

(declare-fun m!56453 () Bool)

(assert (=> b!62684 m!56453))

(assert (=> b!62685 m!56191))

(assert (=> b!62685 m!56061))

(declare-fun m!56455 () Bool)

(assert (=> b!62685 m!56455))

(assert (=> b!62426 d!12747))

(declare-fun b!62696 () Bool)

(declare-fun res!34392 () Bool)

(declare-fun e!41151 () Bool)

(assert (=> b!62696 (=> (not res!34392) (not e!41151))))

(declare-fun size!2035 (LongMapFixedSize!636) (_ BitVec 32))

(assert (=> b!62696 (= res!34392 (= (size!2035 newMap!16) (bvadd (_size!367 newMap!16) (bvsdiv (bvadd (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!62694 () Bool)

(declare-fun res!34389 () Bool)

(assert (=> b!62694 (=> (not res!34389) (not e!41151))))

(assert (=> b!62694 (= res!34389 (and (= (size!2032 (_values!2071 newMap!16)) (bvadd (mask!5994 newMap!16) #b00000000000000000000000000000001)) (= (size!2031 (_keys!3720 newMap!16)) (size!2032 (_values!2071 newMap!16))) (bvsge (_size!367 newMap!16) #b00000000000000000000000000000000) (bvsle (_size!367 newMap!16) (bvadd (mask!5994 newMap!16) #b00000000000000000000000000000001))))))

(declare-fun d!12749 () Bool)

(declare-fun res!34390 () Bool)

(assert (=> d!12749 (=> (not res!34390) (not e!41151))))

(assert (=> d!12749 (= res!34390 (validMask!0 (mask!5994 newMap!16)))))

(assert (=> d!12749 (= (simpleValid!44 newMap!16) e!41151)))

(declare-fun b!62697 () Bool)

(assert (=> b!62697 (= e!41151 (and (bvsge (extraKeys!1967 newMap!16) #b00000000000000000000000000000000) (bvsle (extraKeys!1967 newMap!16) #b00000000000000000000000000000011) (bvsge (_vacant!367 newMap!16) #b00000000000000000000000000000000)))))

(declare-fun b!62695 () Bool)

(declare-fun res!34391 () Bool)

(assert (=> b!62695 (=> (not res!34391) (not e!41151))))

(assert (=> b!62695 (= res!34391 (bvsge (size!2035 newMap!16) (_size!367 newMap!16)))))

(assert (= (and d!12749 res!34390) b!62694))

(assert (= (and b!62694 res!34389) b!62695))

(assert (= (and b!62695 res!34391) b!62696))

(assert (= (and b!62696 res!34392) b!62697))

(declare-fun m!56457 () Bool)

(assert (=> b!62696 m!56457))

(assert (=> d!12749 m!56299))

(assert (=> b!62695 m!56457))

(assert (=> d!12695 d!12749))

(declare-fun d!12751 () Bool)

(assert (=> d!12751 (= (validKeyInArray!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (and (not (= (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62362 d!12751))

(declare-fun d!12753 () Bool)

(declare-fun e!41154 () Bool)

(assert (=> d!12753 e!41154))

(declare-fun res!34395 () Bool)

(assert (=> d!12753 (=> (not res!34395) (not e!41154))))

(assert (=> d!12753 (= res!34395 (and (bvsge (index!3042 lt!26125) #b00000000000000000000000000000000) (bvslt (index!3042 lt!26125) (size!2031 (_keys!3720 newMap!16)))))))

(declare-fun lt!26238 () Unit!1693)

(declare-fun choose!333 (array!3761 array!3763 (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 (_ BitVec 32) Int) Unit!1693)

(assert (=> d!12753 (= lt!26238 (choose!333 (_keys!3720 newMap!16) lt!26151 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (index!3042 lt!26125) (defaultEntry!2088 newMap!16)))))

(assert (=> d!12753 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!12753 (= (lemmaValidKeyInArrayIsInListMap!78 (_keys!3720 newMap!16) lt!26151 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (index!3042 lt!26125) (defaultEntry!2088 newMap!16)) lt!26238)))

(declare-fun b!62700 () Bool)

(assert (=> b!62700 (= e!41154 (contains!690 (getCurrentListMap!406 (_keys!3720 newMap!16) lt!26151 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (select (arr!1799 (_keys!3720 newMap!16)) (index!3042 lt!26125))))))

(assert (= (and d!12753 res!34395) b!62700))

(declare-fun m!56459 () Bool)

(assert (=> d!12753 m!56459))

(assert (=> d!12753 m!56299))

(declare-fun m!56461 () Bool)

(assert (=> b!62700 m!56461))

(assert (=> b!62700 m!56257))

(assert (=> b!62700 m!56461))

(assert (=> b!62700 m!56257))

(declare-fun m!56463 () Bool)

(assert (=> b!62700 m!56463))

(assert (=> b!62557 d!12753))

(declare-fun d!12755 () Bool)

(declare-fun e!41157 () Bool)

(assert (=> d!12755 e!41157))

(declare-fun res!34398 () Bool)

(assert (=> d!12755 (=> (not res!34398) (not e!41157))))

(assert (=> d!12755 (= res!34398 (and (bvsge (index!3042 lt!26125) #b00000000000000000000000000000000) (bvslt (index!3042 lt!26125) (size!2032 (_values!2071 newMap!16)))))))

(declare-fun lt!26241 () Unit!1693)

(declare-fun choose!334 (array!3761 array!3763 (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 (_ BitVec 32) (_ BitVec 64) V!2867 Int) Unit!1693)

(assert (=> d!12755 (= lt!26241 (choose!334 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (index!3042 lt!26125) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2088 newMap!16)))))

(assert (=> d!12755 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!12755 (= (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!17 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (index!3042 lt!26125) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2088 newMap!16)) lt!26241)))

(declare-fun b!62703 () Bool)

(assert (=> b!62703 (= e!41157 (= (+!83 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!406 (_keys!3720 newMap!16) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (index!3042 lt!26125) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))))))

(assert (= (and d!12755 res!34398) b!62703))

(assert (=> d!12755 m!56051))

(assert (=> d!12755 m!56063))

(declare-fun m!56465 () Bool)

(assert (=> d!12755 m!56465))

(assert (=> d!12755 m!56299))

(assert (=> b!62703 m!56151))

(assert (=> b!62703 m!56151))

(declare-fun m!56467 () Bool)

(assert (=> b!62703 m!56467))

(assert (=> b!62703 m!56235))

(declare-fun m!56469 () Bool)

(assert (=> b!62703 m!56469))

(assert (=> b!62557 d!12755))

(declare-fun d!12757 () Bool)

(declare-fun e!41159 () Bool)

(assert (=> d!12757 e!41159))

(declare-fun res!34399 () Bool)

(assert (=> d!12757 (=> res!34399 e!41159)))

(declare-fun lt!26245 () Bool)

(assert (=> d!12757 (= res!34399 (not lt!26245))))

(declare-fun lt!26244 () Bool)

(assert (=> d!12757 (= lt!26245 lt!26244)))

(declare-fun lt!26242 () Unit!1693)

(declare-fun e!41158 () Unit!1693)

(assert (=> d!12757 (= lt!26242 e!41158)))

(declare-fun c!8373 () Bool)

(assert (=> d!12757 (= c!8373 lt!26244)))

(assert (=> d!12757 (= lt!26244 (containsKey!130 (toList!702 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> d!12757 (= (contains!690 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) lt!26245)))

(declare-fun b!62704 () Bool)

(declare-fun lt!26243 () Unit!1693)

(assert (=> b!62704 (= e!41158 lt!26243)))

(assert (=> b!62704 (= lt!26243 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> b!62704 (isDefined!79 (getValueByKey!126 (toList!702 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun b!62705 () Bool)

(declare-fun Unit!1706 () Unit!1693)

(assert (=> b!62705 (= e!41158 Unit!1706)))

(declare-fun b!62706 () Bool)

(assert (=> b!62706 (= e!41159 (isDefined!79 (getValueByKey!126 (toList!702 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355))))))

(assert (= (and d!12757 c!8373) b!62704))

(assert (= (and d!12757 (not c!8373)) b!62705))

(assert (= (and d!12757 (not res!34399)) b!62706))

(assert (=> d!12757 m!56051))

(declare-fun m!56471 () Bool)

(assert (=> d!12757 m!56471))

(assert (=> b!62704 m!56051))

(declare-fun m!56473 () Bool)

(assert (=> b!62704 m!56473))

(assert (=> b!62704 m!56051))

(declare-fun m!56475 () Bool)

(assert (=> b!62704 m!56475))

(assert (=> b!62704 m!56475))

(declare-fun m!56477 () Bool)

(assert (=> b!62704 m!56477))

(assert (=> b!62706 m!56051))

(assert (=> b!62706 m!56475))

(assert (=> b!62706 m!56475))

(assert (=> b!62706 m!56477))

(assert (=> b!62557 d!12757))

(declare-fun b!62707 () Bool)

(declare-fun e!41169 () Bool)

(declare-fun e!41172 () Bool)

(assert (=> b!62707 (= e!41169 e!41172)))

(declare-fun res!34405 () Bool)

(declare-fun call!4936 () Bool)

(assert (=> b!62707 (= res!34405 call!4936)))

(assert (=> b!62707 (=> (not res!34405) (not e!41172))))

(declare-fun b!62708 () Bool)

(declare-fun res!34406 () Bool)

(declare-fun e!41170 () Bool)

(assert (=> b!62708 (=> (not res!34406) (not e!41170))))

(assert (=> b!62708 (= res!34406 e!41169)))

(declare-fun c!8376 () Bool)

(assert (=> b!62708 (= c!8376 (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!62709 () Bool)

(declare-fun e!41164 () Unit!1693)

(declare-fun lt!26249 () Unit!1693)

(assert (=> b!62709 (= e!41164 lt!26249)))

(declare-fun lt!26253 () ListLongMap!1373)

(assert (=> b!62709 (= lt!26253 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26250 () (_ BitVec 64))

(assert (=> b!62709 (= lt!26250 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26259 () (_ BitVec 64))

(assert (=> b!62709 (= lt!26259 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26263 () Unit!1693)

(assert (=> b!62709 (= lt!26263 (addStillContains!44 lt!26253 lt!26250 (zeroValue!2000 newMap!16) lt!26259))))

(assert (=> b!62709 (contains!690 (+!83 lt!26253 (tuple2!2039 lt!26250 (zeroValue!2000 newMap!16))) lt!26259)))

(declare-fun lt!26261 () Unit!1693)

(assert (=> b!62709 (= lt!26261 lt!26263)))

(declare-fun lt!26256 () ListLongMap!1373)

(assert (=> b!62709 (= lt!26256 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26248 () (_ BitVec 64))

(assert (=> b!62709 (= lt!26248 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26260 () (_ BitVec 64))

(assert (=> b!62709 (= lt!26260 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26252 () Unit!1693)

(assert (=> b!62709 (= lt!26252 (addApplyDifferent!44 lt!26256 lt!26248 (minValue!2000 newMap!16) lt!26260))))

(assert (=> b!62709 (= (apply!68 (+!83 lt!26256 (tuple2!2039 lt!26248 (minValue!2000 newMap!16))) lt!26260) (apply!68 lt!26256 lt!26260))))

(declare-fun lt!26262 () Unit!1693)

(assert (=> b!62709 (= lt!26262 lt!26252)))

(declare-fun lt!26257 () ListLongMap!1373)

(assert (=> b!62709 (= lt!26257 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26267 () (_ BitVec 64))

(assert (=> b!62709 (= lt!26267 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26264 () (_ BitVec 64))

(assert (=> b!62709 (= lt!26264 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26247 () Unit!1693)

(assert (=> b!62709 (= lt!26247 (addApplyDifferent!44 lt!26257 lt!26267 (zeroValue!2000 newMap!16) lt!26264))))

(assert (=> b!62709 (= (apply!68 (+!83 lt!26257 (tuple2!2039 lt!26267 (zeroValue!2000 newMap!16))) lt!26264) (apply!68 lt!26257 lt!26264))))

(declare-fun lt!26246 () Unit!1693)

(assert (=> b!62709 (= lt!26246 lt!26247)))

(declare-fun lt!26251 () ListLongMap!1373)

(assert (=> b!62709 (= lt!26251 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26266 () (_ BitVec 64))

(assert (=> b!62709 (= lt!26266 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26254 () (_ BitVec 64))

(assert (=> b!62709 (= lt!26254 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!62709 (= lt!26249 (addApplyDifferent!44 lt!26251 lt!26266 (minValue!2000 newMap!16) lt!26254))))

(assert (=> b!62709 (= (apply!68 (+!83 lt!26251 (tuple2!2039 lt!26266 (minValue!2000 newMap!16))) lt!26254) (apply!68 lt!26251 lt!26254))))

(declare-fun b!62710 () Bool)

(assert (=> b!62710 (= e!41169 (not call!4936))))

(declare-fun c!8379 () Bool)

(declare-fun call!4937 () ListLongMap!1373)

(declare-fun c!8377 () Bool)

(declare-fun call!4932 () ListLongMap!1373)

(declare-fun bm!4929 () Bool)

(declare-fun call!4931 () ListLongMap!1373)

(declare-fun call!4934 () ListLongMap!1373)

(assert (=> bm!4929 (= call!4932 (+!83 (ite c!8377 call!4934 (ite c!8379 call!4931 call!4937)) (ite (or c!8377 c!8379) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))

(declare-fun bm!4930 () Bool)

(assert (=> bm!4930 (= call!4937 call!4931)))

(declare-fun b!62711 () Bool)

(declare-fun e!41168 () Bool)

(declare-fun e!41161 () Bool)

(assert (=> b!62711 (= e!41168 e!41161)))

(declare-fun res!34400 () Bool)

(assert (=> b!62711 (=> (not res!34400) (not e!41161))))

(declare-fun lt!26255 () ListLongMap!1373)

(assert (=> b!62711 (= res!34400 (contains!690 lt!26255 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!62711 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(declare-fun bm!4931 () Bool)

(declare-fun call!4935 () Bool)

(assert (=> bm!4931 (= call!4935 (contains!690 lt!26255 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62712 () Bool)

(declare-fun e!41162 () Bool)

(assert (=> b!62712 (= e!41162 (not call!4935))))

(declare-fun bm!4932 () Bool)

(assert (=> bm!4932 (= call!4936 (contains!690 lt!26255 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4933 () Bool)

(declare-fun call!4933 () ListLongMap!1373)

(assert (=> bm!4933 (= call!4933 call!4932)))

(declare-fun b!62713 () Bool)

(declare-fun e!41165 () ListLongMap!1373)

(assert (=> b!62713 (= e!41165 (+!83 call!4932 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))

(declare-fun b!62714 () Bool)

(declare-fun res!34404 () Bool)

(assert (=> b!62714 (=> (not res!34404) (not e!41170))))

(assert (=> b!62714 (= res!34404 e!41168)))

(declare-fun res!34403 () Bool)

(assert (=> b!62714 (=> res!34403 e!41168)))

(declare-fun e!41167 () Bool)

(assert (=> b!62714 (= res!34403 (not e!41167))))

(declare-fun res!34401 () Bool)

(assert (=> b!62714 (=> (not res!34401) (not e!41167))))

(assert (=> b!62714 (= res!34401 (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(declare-fun d!12759 () Bool)

(assert (=> d!12759 e!41170))

(declare-fun res!34402 () Bool)

(assert (=> d!12759 (=> (not res!34402) (not e!41170))))

(assert (=> d!12759 (= res!34402 (or (bvsge #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))))

(declare-fun lt!26265 () ListLongMap!1373)

(assert (=> d!12759 (= lt!26255 lt!26265)))

(declare-fun lt!26258 () Unit!1693)

(assert (=> d!12759 (= lt!26258 e!41164)))

(declare-fun c!8375 () Bool)

(declare-fun e!41171 () Bool)

(assert (=> d!12759 (= c!8375 e!41171)))

(declare-fun res!34407 () Bool)

(assert (=> d!12759 (=> (not res!34407) (not e!41171))))

(assert (=> d!12759 (= res!34407 (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(assert (=> d!12759 (= lt!26265 e!41165)))

(assert (=> d!12759 (= c!8377 (and (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12759 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!12759 (= (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) lt!26255)))

(declare-fun bm!4928 () Bool)

(assert (=> bm!4928 (= call!4931 call!4934)))

(declare-fun b!62715 () Bool)

(assert (=> b!62715 (= e!41172 (= (apply!68 lt!26255 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2000 newMap!16)))))

(declare-fun b!62716 () Bool)

(declare-fun e!41166 () Bool)

(assert (=> b!62716 (= e!41166 (= (apply!68 lt!26255 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2000 newMap!16)))))

(declare-fun b!62717 () Bool)

(assert (=> b!62717 (= e!41162 e!41166)))

(declare-fun res!34408 () Bool)

(assert (=> b!62717 (= res!34408 call!4935)))

(assert (=> b!62717 (=> (not res!34408) (not e!41166))))

(declare-fun b!62718 () Bool)

(assert (=> b!62718 (= e!41167 (validKeyInArray!0 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62719 () Bool)

(assert (=> b!62719 (= e!41171 (validKeyInArray!0 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62720 () Bool)

(declare-fun Unit!1707 () Unit!1693)

(assert (=> b!62720 (= e!41164 Unit!1707)))

(declare-fun b!62721 () Bool)

(declare-fun e!41163 () ListLongMap!1373)

(assert (=> b!62721 (= e!41163 call!4933)))

(declare-fun bm!4934 () Bool)

(assert (=> bm!4934 (= call!4934 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun b!62722 () Bool)

(declare-fun e!41160 () ListLongMap!1373)

(assert (=> b!62722 (= e!41160 call!4937)))

(declare-fun b!62723 () Bool)

(assert (=> b!62723 (= e!41170 e!41162)))

(declare-fun c!8378 () Bool)

(assert (=> b!62723 (= c!8378 (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!62724 () Bool)

(declare-fun c!8374 () Bool)

(assert (=> b!62724 (= c!8374 (and (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!62724 (= e!41163 e!41160)))

(declare-fun b!62725 () Bool)

(assert (=> b!62725 (= e!41160 call!4933)))

(declare-fun b!62726 () Bool)

(assert (=> b!62726 (= e!41161 (= (apply!68 lt!26255 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) (get!1082 (select (arr!1800 (_values!2071 newMap!16)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62726 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2032 (_values!2071 newMap!16))))))

(assert (=> b!62726 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(declare-fun b!62727 () Bool)

(assert (=> b!62727 (= e!41165 e!41163)))

(assert (=> b!62727 (= c!8379 (and (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!12759 c!8377) b!62713))

(assert (= (and d!12759 (not c!8377)) b!62727))

(assert (= (and b!62727 c!8379) b!62721))

(assert (= (and b!62727 (not c!8379)) b!62724))

(assert (= (and b!62724 c!8374) b!62725))

(assert (= (and b!62724 (not c!8374)) b!62722))

(assert (= (or b!62725 b!62722) bm!4930))

(assert (= (or b!62721 bm!4930) bm!4928))

(assert (= (or b!62721 b!62725) bm!4933))

(assert (= (or b!62713 bm!4928) bm!4934))

(assert (= (or b!62713 bm!4933) bm!4929))

(assert (= (and d!12759 res!34407) b!62719))

(assert (= (and d!12759 c!8375) b!62709))

(assert (= (and d!12759 (not c!8375)) b!62720))

(assert (= (and d!12759 res!34402) b!62714))

(assert (= (and b!62714 res!34401) b!62718))

(assert (= (and b!62714 (not res!34403)) b!62711))

(assert (= (and b!62711 res!34400) b!62726))

(assert (= (and b!62714 res!34404) b!62708))

(assert (= (and b!62708 c!8376) b!62707))

(assert (= (and b!62708 (not c!8376)) b!62710))

(assert (= (and b!62707 res!34405) b!62715))

(assert (= (or b!62707 b!62710) bm!4932))

(assert (= (and b!62708 res!34406) b!62723))

(assert (= (and b!62723 c!8378) b!62717))

(assert (= (and b!62723 (not c!8378)) b!62712))

(assert (= (and b!62717 res!34408) b!62716))

(assert (= (or b!62717 b!62712) bm!4931))

(declare-fun b_lambda!2799 () Bool)

(assert (=> (not b_lambda!2799) (not b!62726)))

(declare-fun t!4841 () Bool)

(declare-fun tb!1377 () Bool)

(assert (=> (and b!62272 (= (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2088 newMap!16)) t!4841) tb!1377))

(declare-fun result!2459 () Bool)

(assert (=> tb!1377 (= result!2459 tp_is_empty!2415)))

(assert (=> b!62726 t!4841))

(declare-fun b_and!3839 () Bool)

(assert (= b_and!3835 (and (=> t!4841 result!2459) b_and!3839)))

(declare-fun t!4843 () Bool)

(declare-fun tb!1379 () Bool)

(assert (=> (and b!62266 (= (defaultEntry!2088 newMap!16) (defaultEntry!2088 newMap!16)) t!4843) tb!1379))

(declare-fun result!2461 () Bool)

(assert (= result!2461 result!2459))

(assert (=> b!62726 t!4843))

(declare-fun b_and!3841 () Bool)

(assert (= b_and!3837 (and (=> t!4843 result!2461) b_and!3841)))

(assert (=> b!62719 m!56285))

(assert (=> b!62719 m!56285))

(assert (=> b!62719 m!56287))

(declare-fun m!56479 () Bool)

(assert (=> b!62709 m!56479))

(declare-fun m!56481 () Bool)

(assert (=> b!62709 m!56481))

(declare-fun m!56483 () Bool)

(assert (=> b!62709 m!56483))

(declare-fun m!56485 () Bool)

(assert (=> b!62709 m!56485))

(declare-fun m!56487 () Bool)

(assert (=> b!62709 m!56487))

(declare-fun m!56489 () Bool)

(assert (=> b!62709 m!56489))

(declare-fun m!56491 () Bool)

(assert (=> b!62709 m!56491))

(declare-fun m!56493 () Bool)

(assert (=> b!62709 m!56493))

(declare-fun m!56495 () Bool)

(assert (=> b!62709 m!56495))

(declare-fun m!56497 () Bool)

(assert (=> b!62709 m!56497))

(declare-fun m!56499 () Bool)

(assert (=> b!62709 m!56499))

(declare-fun m!56501 () Bool)

(assert (=> b!62709 m!56501))

(declare-fun m!56503 () Bool)

(assert (=> b!62709 m!56503))

(declare-fun m!56505 () Bool)

(assert (=> b!62709 m!56505))

(assert (=> b!62709 m!56285))

(assert (=> b!62709 m!56503))

(declare-fun m!56507 () Bool)

(assert (=> b!62709 m!56507))

(assert (=> b!62709 m!56499))

(assert (=> b!62709 m!56485))

(declare-fun m!56509 () Bool)

(assert (=> b!62709 m!56509))

(assert (=> b!62709 m!56493))

(declare-fun m!56511 () Bool)

(assert (=> b!62715 m!56511))

(assert (=> bm!4934 m!56505))

(assert (=> b!62718 m!56285))

(assert (=> b!62718 m!56285))

(assert (=> b!62718 m!56287))

(assert (=> d!12759 m!56299))

(assert (=> b!62726 m!56285))

(declare-fun m!56513 () Bool)

(assert (=> b!62726 m!56513))

(declare-fun m!56515 () Bool)

(assert (=> b!62726 m!56515))

(declare-fun m!56517 () Bool)

(assert (=> b!62726 m!56517))

(assert (=> b!62726 m!56285))

(assert (=> b!62726 m!56517))

(assert (=> b!62726 m!56515))

(declare-fun m!56519 () Bool)

(assert (=> b!62726 m!56519))

(assert (=> b!62711 m!56285))

(assert (=> b!62711 m!56285))

(declare-fun m!56521 () Bool)

(assert (=> b!62711 m!56521))

(declare-fun m!56523 () Bool)

(assert (=> b!62716 m!56523))

(declare-fun m!56525 () Bool)

(assert (=> bm!4929 m!56525))

(declare-fun m!56527 () Bool)

(assert (=> b!62713 m!56527))

(declare-fun m!56529 () Bool)

(assert (=> bm!4932 m!56529))

(declare-fun m!56531 () Bool)

(assert (=> bm!4931 m!56531))

(assert (=> b!62557 d!12759))

(declare-fun d!12761 () Bool)

(assert (=> d!12761 (= (+!83 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) lt!26145 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26270 () Unit!1693)

(declare-fun choose!335 (array!3761 array!3763 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 V!2867 Int) Unit!1693)

(assert (=> d!12761 (= lt!26270 (choose!335 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) lt!26145 (zeroValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2000 newMap!16) (defaultEntry!2088 newMap!16)))))

(assert (=> d!12761 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!12761 (= (lemmaChangeZeroKeyThenAddPairToListMap!17 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) lt!26145 (zeroValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2000 newMap!16) (defaultEntry!2088 newMap!16)) lt!26270)))

(declare-fun bs!2737 () Bool)

(assert (= bs!2737 d!12761))

(assert (=> bs!2737 m!56063))

(declare-fun m!56533 () Bool)

(assert (=> bs!2737 m!56533))

(assert (=> bs!2737 m!56151))

(declare-fun m!56535 () Bool)

(assert (=> bs!2737 m!56535))

(assert (=> bs!2737 m!56151))

(assert (=> bs!2737 m!56063))

(declare-fun m!56537 () Bool)

(assert (=> bs!2737 m!56537))

(assert (=> bs!2737 m!56299))

(assert (=> b!62545 d!12761))

(declare-fun d!12763 () Bool)

(declare-fun isEmpty!300 (Option!132) Bool)

(assert (=> d!12763 (= (isDefined!79 (getValueByKey!126 (toList!702 lt!25956) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355))) (not (isEmpty!300 (getValueByKey!126 (toList!702 lt!25956) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))))

(declare-fun bs!2738 () Bool)

(assert (= bs!2738 d!12763))

(assert (=> bs!2738 m!56219))

(declare-fun m!56539 () Bool)

(assert (=> bs!2738 m!56539))

(assert (=> b!62445 d!12763))

(declare-fun b!62737 () Bool)

(declare-fun e!41177 () Option!132)

(declare-fun e!41178 () Option!132)

(assert (=> b!62737 (= e!41177 e!41178)))

(declare-fun c!8385 () Bool)

(assert (=> b!62737 (= c!8385 (and ((_ is Cons!1435) (toList!702 lt!25956)) (not (= (_1!1030 (h!2018 (toList!702 lt!25956))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))))

(declare-fun b!62736 () Bool)

(assert (=> b!62736 (= e!41177 (Some!131 (_2!1030 (h!2018 (toList!702 lt!25956)))))))

(declare-fun c!8384 () Bool)

(declare-fun d!12765 () Bool)

(assert (=> d!12765 (= c!8384 (and ((_ is Cons!1435) (toList!702 lt!25956)) (= (_1!1030 (h!2018 (toList!702 lt!25956))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355))))))

(assert (=> d!12765 (= (getValueByKey!126 (toList!702 lt!25956) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) e!41177)))

(declare-fun b!62738 () Bool)

(assert (=> b!62738 (= e!41178 (getValueByKey!126 (t!4833 (toList!702 lt!25956)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun b!62739 () Bool)

(assert (=> b!62739 (= e!41178 None!130)))

(assert (= (and d!12765 c!8384) b!62736))

(assert (= (and d!12765 (not c!8384)) b!62737))

(assert (= (and b!62737 c!8385) b!62738))

(assert (= (and b!62737 (not c!8385)) b!62739))

(assert (=> b!62738 m!56051))

(declare-fun m!56541 () Bool)

(assert (=> b!62738 m!56541))

(assert (=> b!62445 d!12765))

(declare-fun d!12767 () Bool)

(assert (=> d!12767 (isDefined!79 (getValueByKey!126 (toList!702 lt!25956) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun lt!26273 () Unit!1693)

(declare-fun choose!336 (List!1439 (_ BitVec 64)) Unit!1693)

(assert (=> d!12767 (= lt!26273 (choose!336 (toList!702 lt!25956) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun e!41181 () Bool)

(assert (=> d!12767 e!41181))

(declare-fun res!34411 () Bool)

(assert (=> d!12767 (=> (not res!34411) (not e!41181))))

(declare-fun isStrictlySorted!286 (List!1439) Bool)

(assert (=> d!12767 (= res!34411 (isStrictlySorted!286 (toList!702 lt!25956)))))

(assert (=> d!12767 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 lt!25956) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) lt!26273)))

(declare-fun b!62742 () Bool)

(assert (=> b!62742 (= e!41181 (containsKey!130 (toList!702 lt!25956) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (= (and d!12767 res!34411) b!62742))

(assert (=> d!12767 m!56051))

(assert (=> d!12767 m!56219))

(assert (=> d!12767 m!56219))

(assert (=> d!12767 m!56221))

(assert (=> d!12767 m!56051))

(declare-fun m!56543 () Bool)

(assert (=> d!12767 m!56543))

(declare-fun m!56545 () Bool)

(assert (=> d!12767 m!56545))

(assert (=> b!62742 m!56051))

(assert (=> b!62742 m!56215))

(assert (=> b!62443 d!12767))

(assert (=> b!62443 d!12763))

(assert (=> b!62443 d!12765))

(declare-fun d!12769 () Bool)

(assert (=> d!12769 (= (get!1084 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2418 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> b!62570 d!12769))

(declare-fun d!12771 () Bool)

(declare-fun e!41183 () Bool)

(assert (=> d!12771 e!41183))

(declare-fun res!34412 () Bool)

(assert (=> d!12771 (=> res!34412 e!41183)))

(declare-fun lt!26277 () Bool)

(assert (=> d!12771 (= res!34412 (not lt!26277))))

(declare-fun lt!26276 () Bool)

(assert (=> d!12771 (= lt!26277 lt!26276)))

(declare-fun lt!26274 () Unit!1693)

(declare-fun e!41182 () Unit!1693)

(assert (=> d!12771 (= lt!26274 e!41182)))

(declare-fun c!8386 () Bool)

(assert (=> d!12771 (= c!8386 lt!26276)))

(assert (=> d!12771 (= lt!26276 (containsKey!130 (toList!702 call!4899) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> d!12771 (= (contains!690 call!4899 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) lt!26277)))

(declare-fun b!62743 () Bool)

(declare-fun lt!26275 () Unit!1693)

(assert (=> b!62743 (= e!41182 lt!26275)))

(assert (=> b!62743 (= lt!26275 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 call!4899) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> b!62743 (isDefined!79 (getValueByKey!126 (toList!702 call!4899) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun b!62744 () Bool)

(declare-fun Unit!1708 () Unit!1693)

(assert (=> b!62744 (= e!41182 Unit!1708)))

(declare-fun b!62745 () Bool)

(assert (=> b!62745 (= e!41183 (isDefined!79 (getValueByKey!126 (toList!702 call!4899) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355))))))

(assert (= (and d!12771 c!8386) b!62743))

(assert (= (and d!12771 (not c!8386)) b!62744))

(assert (= (and d!12771 (not res!34412)) b!62745))

(assert (=> d!12771 m!56051))

(declare-fun m!56547 () Bool)

(assert (=> d!12771 m!56547))

(assert (=> b!62743 m!56051))

(declare-fun m!56549 () Bool)

(assert (=> b!62743 m!56549))

(assert (=> b!62743 m!56051))

(declare-fun m!56551 () Bool)

(assert (=> b!62743 m!56551))

(assert (=> b!62743 m!56551))

(declare-fun m!56553 () Bool)

(assert (=> b!62743 m!56553))

(assert (=> b!62745 m!56051))

(assert (=> b!62745 m!56551))

(assert (=> b!62745 m!56551))

(assert (=> b!62745 m!56553))

(assert (=> b!62547 d!12771))

(declare-fun d!12773 () Bool)

(declare-fun res!34417 () Bool)

(declare-fun e!41188 () Bool)

(assert (=> d!12773 (=> res!34417 e!41188)))

(assert (=> d!12773 (= res!34417 (and ((_ is Cons!1435) (toList!702 lt!25956)) (= (_1!1030 (h!2018 (toList!702 lt!25956))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355))))))

(assert (=> d!12773 (= (containsKey!130 (toList!702 lt!25956) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) e!41188)))

(declare-fun b!62750 () Bool)

(declare-fun e!41189 () Bool)

(assert (=> b!62750 (= e!41188 e!41189)))

(declare-fun res!34418 () Bool)

(assert (=> b!62750 (=> (not res!34418) (not e!41189))))

(assert (=> b!62750 (= res!34418 (and (or (not ((_ is Cons!1435) (toList!702 lt!25956))) (bvsle (_1!1030 (h!2018 (toList!702 lt!25956))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355))) ((_ is Cons!1435) (toList!702 lt!25956)) (bvslt (_1!1030 (h!2018 (toList!702 lt!25956))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355))))))

(declare-fun b!62751 () Bool)

(assert (=> b!62751 (= e!41189 (containsKey!130 (t!4833 (toList!702 lt!25956)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (= (and d!12773 (not res!34417)) b!62750))

(assert (= (and b!62750 res!34418) b!62751))

(assert (=> b!62751 m!56051))

(declare-fun m!56555 () Bool)

(assert (=> b!62751 m!56555))

(assert (=> d!12697 d!12773))

(declare-fun d!12775 () Bool)

(declare-fun res!34419 () Bool)

(declare-fun e!41190 () Bool)

(assert (=> d!12775 (=> res!34419 e!41190)))

(assert (=> d!12775 (= res!34419 (= (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> d!12775 (= (arrayContainsKey!0 (_keys!3720 newMap!16) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) #b00000000000000000000000000000000) e!41190)))

(declare-fun b!62752 () Bool)

(declare-fun e!41191 () Bool)

(assert (=> b!62752 (= e!41190 e!41191)))

(declare-fun res!34420 () Bool)

(assert (=> b!62752 (=> (not res!34420) (not e!41191))))

(assert (=> b!62752 (= res!34420 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2031 (_keys!3720 newMap!16))))))

(declare-fun b!62753 () Bool)

(assert (=> b!62753 (= e!41191 (arrayContainsKey!0 (_keys!3720 newMap!16) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!12775 (not res!34419)) b!62752))

(assert (= (and b!62752 res!34420) b!62753))

(assert (=> d!12775 m!56285))

(assert (=> b!62753 m!56051))

(declare-fun m!56557 () Bool)

(assert (=> b!62753 m!56557))

(assert (=> bm!4895 d!12775))

(declare-fun d!12777 () Bool)

(assert (=> d!12777 (= (validKeyInArray!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (and (not (= (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62419 d!12777))

(assert (=> d!12693 d!12689))

(declare-fun d!12779 () Bool)

(assert (=> d!12779 (= (apply!68 lt!26046 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1086 (getValueByKey!126 (toList!702 lt!26046) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2739 () Bool)

(assert (= bs!2739 d!12779))

(declare-fun m!56559 () Bool)

(assert (=> bs!2739 m!56559))

(assert (=> bs!2739 m!56559))

(declare-fun m!56561 () Bool)

(assert (=> bs!2739 m!56561))

(assert (=> b!62415 d!12779))

(declare-fun d!12781 () Bool)

(declare-fun res!34421 () Bool)

(declare-fun e!41192 () Bool)

(assert (=> d!12781 (=> res!34421 e!41192)))

(assert (=> d!12781 (= res!34421 (= (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> d!12781 (= (arrayContainsKey!0 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) e!41192)))

(declare-fun b!62754 () Bool)

(declare-fun e!41193 () Bool)

(assert (=> b!62754 (= e!41192 e!41193)))

(declare-fun res!34422 () Bool)

(assert (=> b!62754 (=> (not res!34422) (not e!41193))))

(assert (=> b!62754 (= res!34422 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun b!62755 () Bool)

(assert (=> b!62755 (= e!41193 (arrayContainsKey!0 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!12781 (not res!34421)) b!62754))

(assert (= (and b!62754 res!34422) b!62755))

(declare-fun m!56563 () Bool)

(assert (=> d!12781 m!56563))

(assert (=> b!62755 m!56051))

(declare-fun m!56565 () Bool)

(assert (=> b!62755 m!56565))

(assert (=> b!62343 d!12781))

(declare-fun d!12783 () Bool)

(declare-fun e!41194 () Bool)

(assert (=> d!12783 e!41194))

(declare-fun res!34423 () Bool)

(assert (=> d!12783 (=> (not res!34423) (not e!41194))))

(declare-fun lt!26281 () ListLongMap!1373)

(assert (=> d!12783 (= res!34423 (contains!690 lt!26281 (_1!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!26280 () List!1439)

(assert (=> d!12783 (= lt!26281 (ListLongMap!1374 lt!26280))))

(declare-fun lt!26279 () Unit!1693)

(declare-fun lt!26278 () Unit!1693)

(assert (=> d!12783 (= lt!26279 lt!26278)))

(assert (=> d!12783 (= (getValueByKey!126 lt!26280 (_1!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!131 (_2!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!12783 (= lt!26278 (lemmaContainsTupThenGetReturnValue!43 lt!26280 (_1!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!12783 (= lt!26280 (insertStrictlySorted!46 (toList!702 e!41069) (_1!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!12783 (= (+!83 e!41069 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!26281)))

(declare-fun b!62756 () Bool)

(declare-fun res!34424 () Bool)

(assert (=> b!62756 (=> (not res!34424) (not e!41194))))

(assert (=> b!62756 (= res!34424 (= (getValueByKey!126 (toList!702 lt!26281) (_1!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!131 (_2!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!62757 () Bool)

(assert (=> b!62757 (= e!41194 (contains!693 (toList!702 lt!26281) (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!12783 res!34423) b!62756))

(assert (= (and b!62756 res!34424) b!62757))

(declare-fun m!56567 () Bool)

(assert (=> d!12783 m!56567))

(declare-fun m!56569 () Bool)

(assert (=> d!12783 m!56569))

(declare-fun m!56571 () Bool)

(assert (=> d!12783 m!56571))

(declare-fun m!56573 () Bool)

(assert (=> d!12783 m!56573))

(declare-fun m!56575 () Bool)

(assert (=> b!62756 m!56575))

(declare-fun m!56577 () Bool)

(assert (=> b!62757 m!56577))

(assert (=> bm!4911 d!12783))

(declare-fun d!12785 () Bool)

(assert (=> d!12785 (= (map!1115 (_2!1031 lt!26150)) (getCurrentListMap!406 (_keys!3720 (_2!1031 lt!26150)) (_values!2071 (_2!1031 lt!26150)) (mask!5994 (_2!1031 lt!26150)) (extraKeys!1967 (_2!1031 lt!26150)) (zeroValue!2000 (_2!1031 lt!26150)) (minValue!2000 (_2!1031 lt!26150)) #b00000000000000000000000000000000 (defaultEntry!2088 (_2!1031 lt!26150))))))

(declare-fun bs!2740 () Bool)

(assert (= bs!2740 d!12785))

(declare-fun m!56579 () Bool)

(assert (=> bs!2740 m!56579))

(assert (=> bm!4914 d!12785))

(assert (=> b!62348 d!12679))

(declare-fun b!62792 () Bool)

(declare-fun res!34448 () Bool)

(declare-fun e!41211 () Bool)

(assert (=> b!62792 (=> (not res!34448) (not e!41211))))

(declare-fun call!4949 () Bool)

(assert (=> b!62792 (= res!34448 call!4949)))

(declare-fun e!41216 () Bool)

(assert (=> b!62792 (= e!41216 e!41211)))

(declare-fun b!62793 () Bool)

(declare-fun call!4946 () Bool)

(assert (=> b!62793 (= e!41211 (not call!4946))))

(declare-fun b!62794 () Bool)

(declare-fun e!41217 () Unit!1693)

(declare-fun Unit!1709 () Unit!1693)

(assert (=> b!62794 (= e!41217 Unit!1709)))

(declare-fun lt!26350 () Unit!1693)

(declare-fun lemmaArrayContainsKeyThenInListMap!7 (array!3761 array!3763 (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 (_ BitVec 64) (_ BitVec 32) Int) Unit!1693)

(assert (=> b!62794 (= lt!26350 (lemmaArrayContainsKeyThenInListMap!7 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(assert (=> b!62794 (contains!690 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355))))

(declare-fun lt!26354 () Unit!1693)

(assert (=> b!62794 (= lt!26354 lt!26350)))

(assert (=> b!62794 false))

(declare-fun b!62795 () Bool)

(declare-fun res!34444 () Bool)

(declare-fun e!41214 () Bool)

(assert (=> b!62795 (=> (not res!34444) (not e!41214))))

(declare-fun lt!26366 () tuple2!2040)

(assert (=> b!62795 (= res!34444 (valid!262 (_2!1031 lt!26366)))))

(declare-fun b!62796 () Bool)

(declare-fun e!41213 () Bool)

(declare-fun lt!26351 () SeekEntryResult!229)

(assert (=> b!62796 (= e!41213 (= (select (arr!1799 (_keys!3720 newMap!16)) (index!3042 lt!26351)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun d!12787 () Bool)

(assert (=> d!12787 e!41214))

(declare-fun res!34450 () Bool)

(assert (=> d!12787 (=> (not res!34450) (not e!41214))))

(assert (=> d!12787 (= res!34450 (_1!1031 lt!26366))))

(assert (=> d!12787 (= lt!26366 (tuple2!2041 true (LongMapFixedSize!637 (defaultEntry!2088 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (bvadd (_size!367 newMap!16) #b00000000000000000000000000000001) (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16))) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16))) (_vacant!367 newMap!16))))))

(declare-fun lt!26357 () Unit!1693)

(declare-fun lt!26365 () Unit!1693)

(assert (=> d!12787 (= lt!26357 lt!26365)))

(declare-fun lt!26369 () array!3761)

(declare-fun lt!26360 () array!3763)

(assert (=> d!12787 (contains!690 (getCurrentListMap!406 lt!26369 lt!26360 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (select (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125))))))

(assert (=> d!12787 (= lt!26365 (lemmaValidKeyInArrayIsInListMap!78 lt!26369 lt!26360 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (defaultEntry!2088 newMap!16)))))

(assert (=> d!12787 (= lt!26360 (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16))))))

(assert (=> d!12787 (= lt!26369 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16))))))

(declare-fun lt!26368 () Unit!1693)

(declare-fun lt!26344 () Unit!1693)

(assert (=> d!12787 (= lt!26368 lt!26344)))

(declare-fun lt!26370 () array!3761)

(assert (=> d!12787 (= (arrayCountValidKeys!0 lt!26370 (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (bvadd (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lemmaValidKeyAtIImpliesCountKeysIsOne!0 (array!3761 (_ BitVec 32)) Unit!1693)

(assert (=> d!12787 (= lt!26344 (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!26370 (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125))))))

(assert (=> d!12787 (= lt!26370 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16))))))

(declare-fun lt!26348 () Unit!1693)

(declare-fun lt!26355 () Unit!1693)

(assert (=> d!12787 (= lt!26348 lt!26355)))

(declare-fun lt!26361 () array!3761)

(assert (=> d!12787 (arrayContainsKey!0 lt!26361 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(assert (=> d!12787 (= lt!26355 (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!26361 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125))))))

(assert (=> d!12787 (= lt!26361 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16))))))

(declare-fun lt!26356 () Unit!1693)

(declare-fun lt!26371 () Unit!1693)

(assert (=> d!12787 (= lt!26356 lt!26371)))

(assert (=> d!12787 (= (+!83 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!406 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16))) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lemmaAddValidKeyToArrayThenAddPairToListMap!7 (array!3761 array!3763 (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 (_ BitVec 32) (_ BitVec 64) V!2867 Int) Unit!1693)

(assert (=> d!12787 (= lt!26371 (lemmaAddValidKeyToArrayThenAddPairToListMap!7 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26352 () Unit!1693)

(declare-fun lt!26363 () Unit!1693)

(assert (=> d!12787 (= lt!26352 lt!26363)))

(assert (=> d!12787 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16))) (mask!5994 newMap!16))))

(declare-fun lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 ((_ BitVec 64) array!3761 (_ BitVec 32) (_ BitVec 32)) Unit!1693)

(assert (=> d!12787 (= lt!26363 (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (_keys!3720 newMap!16) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (mask!5994 newMap!16)))))

(declare-fun lt!26346 () Unit!1693)

(declare-fun lt!26358 () Unit!1693)

(assert (=> d!12787 (= lt!26346 lt!26358)))

(assert (=> d!12787 (= (arrayCountValidKeys!0 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16))) #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!3720 newMap!16) #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))) #b00000000000000000000000000000001))))

(declare-fun lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (array!3761 (_ BitVec 32) (_ BitVec 64)) Unit!1693)

(assert (=> d!12787 (= lt!26358 (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!3720 newMap!16) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun lt!26342 () Unit!1693)

(declare-fun lt!26362 () Unit!1693)

(assert (=> d!12787 (= lt!26342 lt!26362)))

(declare-fun lt!26367 () List!1440)

(declare-fun lt!26349 () (_ BitVec 32))

(assert (=> d!12787 (arrayNoDuplicates!0 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16))) lt!26349 lt!26367)))

(declare-fun lemmaPutNewValidKeyPreservesNoDuplicate!0 (array!3761 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1440) Unit!1693)

(assert (=> d!12787 (= lt!26362 (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!3720 newMap!16) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) lt!26349 lt!26367))))

(assert (=> d!12787 (= lt!26367 Nil!1437)))

(assert (=> d!12787 (= lt!26349 #b00000000000000000000000000000000)))

(declare-fun lt!26359 () Unit!1693)

(assert (=> d!12787 (= lt!26359 e!41217)))

(declare-fun c!8398 () Bool)

(assert (=> d!12787 (= c!8398 (arrayContainsKey!0 (_keys!3720 newMap!16) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun lt!26353 () Unit!1693)

(declare-fun e!41212 () Unit!1693)

(assert (=> d!12787 (= lt!26353 e!41212)))

(declare-fun c!8395 () Bool)

(assert (=> d!12787 (= c!8395 (contains!690 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> d!12787 (valid!262 newMap!16)))

(assert (=> d!12787 (= (updateHelperNewKey!17 newMap!16 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125))) lt!26366)))

(declare-fun bm!4943 () Bool)

(assert (=> bm!4943 (= call!4946 (arrayContainsKey!0 (_keys!3720 newMap!16) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!62797 () Bool)

(declare-fun res!34449 () Bool)

(declare-fun lt!26364 () SeekEntryResult!229)

(assert (=> b!62797 (= res!34449 (= (select (arr!1799 (_keys!3720 newMap!16)) (index!3044 lt!26364)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!41218 () Bool)

(assert (=> b!62797 (=> (not res!34449) (not e!41218))))

(declare-fun b!62798 () Bool)

(assert (=> b!62798 (= e!41218 (not call!4946))))

(declare-fun call!4947 () SeekEntryResult!229)

(declare-fun bm!4944 () Bool)

(assert (=> bm!4944 (= call!4947 (seekEntryOrOpen!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (_keys!3720 newMap!16) (mask!5994 newMap!16)))))

(declare-fun b!62799 () Bool)

(declare-fun e!41215 () Bool)

(assert (=> b!62799 (= e!41215 e!41218)))

(declare-fun res!34451 () Bool)

(assert (=> b!62799 (= res!34451 call!4949)))

(assert (=> b!62799 (=> (not res!34451) (not e!41218))))

(declare-fun b!62800 () Bool)

(assert (=> b!62800 (= e!41215 ((_ is Undefined!229) lt!26364))))

(declare-fun b!62801 () Bool)

(declare-fun c!8397 () Bool)

(assert (=> b!62801 (= c!8397 ((_ is MissingVacant!229) lt!26364))))

(assert (=> b!62801 (= e!41216 e!41215)))

(declare-fun b!62802 () Bool)

(declare-fun lt!26347 () Unit!1693)

(assert (=> b!62802 (= e!41212 lt!26347)))

(assert (=> b!62802 (= lt!26347 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!17 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (defaultEntry!2088 newMap!16)))))

(assert (=> b!62802 (= lt!26364 call!4947)))

(declare-fun c!8396 () Bool)

(assert (=> b!62802 (= c!8396 ((_ is MissingZero!229) lt!26364))))

(assert (=> b!62802 e!41216))

(declare-fun b!62803 () Bool)

(declare-fun res!34443 () Bool)

(assert (=> b!62803 (=> (not res!34443) (not e!41214))))

(assert (=> b!62803 (= res!34443 (contains!690 (map!1115 (_2!1031 lt!26366)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun bm!4945 () Bool)

(declare-fun call!4948 () Bool)

(assert (=> bm!4945 (= call!4949 call!4948)))

(declare-fun b!62804 () Bool)

(assert (=> b!62804 (= e!41214 (= (map!1115 (_2!1031 lt!26366)) (+!83 (map!1115 newMap!16) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!62805 () Bool)

(declare-fun Unit!1710 () Unit!1693)

(assert (=> b!62805 (= e!41212 Unit!1710)))

(declare-fun lt!26345 () Unit!1693)

(assert (=> b!62805 (= lt!26345 (lemmaInListMapThenSeekEntryOrOpenFindsIt!17 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (defaultEntry!2088 newMap!16)))))

(assert (=> b!62805 (= lt!26351 call!4947)))

(declare-fun res!34445 () Bool)

(assert (=> b!62805 (= res!34445 ((_ is Found!229) lt!26351))))

(assert (=> b!62805 (=> (not res!34445) (not e!41213))))

(assert (=> b!62805 e!41213))

(declare-fun lt!26343 () Unit!1693)

(assert (=> b!62805 (= lt!26343 lt!26345)))

(assert (=> b!62805 false))

(declare-fun b!62806 () Bool)

(declare-fun res!34447 () Bool)

(assert (=> b!62806 (=> (not res!34447) (not e!41211))))

(assert (=> b!62806 (= res!34447 (= (select (arr!1799 (_keys!3720 newMap!16)) (index!3041 lt!26364)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62807 () Bool)

(declare-fun Unit!1711 () Unit!1693)

(assert (=> b!62807 (= e!41217 Unit!1711)))

(declare-fun b!62808 () Bool)

(declare-fun res!34446 () Bool)

(assert (=> b!62808 (= res!34446 call!4948)))

(assert (=> b!62808 (=> (not res!34446) (not e!41213))))

(declare-fun bm!4946 () Bool)

(assert (=> bm!4946 (= call!4948 (inRange!0 (ite c!8395 (index!3042 lt!26351) (ite c!8396 (index!3041 lt!26364) (index!3044 lt!26364))) (mask!5994 newMap!16)))))

(assert (= (and d!12787 c!8395) b!62805))

(assert (= (and d!12787 (not c!8395)) b!62802))

(assert (= (and b!62805 res!34445) b!62808))

(assert (= (and b!62808 res!34446) b!62796))

(assert (= (and b!62802 c!8396) b!62792))

(assert (= (and b!62802 (not c!8396)) b!62801))

(assert (= (and b!62792 res!34448) b!62806))

(assert (= (and b!62806 res!34447) b!62793))

(assert (= (and b!62801 c!8397) b!62799))

(assert (= (and b!62801 (not c!8397)) b!62800))

(assert (= (and b!62799 res!34451) b!62797))

(assert (= (and b!62797 res!34449) b!62798))

(assert (= (or b!62792 b!62799) bm!4945))

(assert (= (or b!62793 b!62798) bm!4943))

(assert (= (or b!62808 bm!4945) bm!4946))

(assert (= (or b!62805 b!62802) bm!4944))

(assert (= (and d!12787 c!8398) b!62794))

(assert (= (and d!12787 (not c!8398)) b!62807))

(assert (= (and d!12787 res!34450) b!62795))

(assert (= (and b!62795 res!34444) b!62803))

(assert (= (and b!62803 res!34443) b!62804))

(declare-fun m!56581 () Bool)

(assert (=> b!62803 m!56581))

(assert (=> b!62803 m!56581))

(assert (=> b!62803 m!56051))

(declare-fun m!56583 () Bool)

(assert (=> b!62803 m!56583))

(assert (=> b!62804 m!56581))

(assert (=> b!62804 m!56081))

(assert (=> b!62804 m!56081))

(declare-fun m!56585 () Bool)

(assert (=> b!62804 m!56585))

(assert (=> b!62802 m!56051))

(assert (=> b!62802 m!56255))

(declare-fun m!56587 () Bool)

(assert (=> b!62795 m!56587))

(declare-fun m!56589 () Bool)

(assert (=> bm!4946 m!56589))

(assert (=> b!62805 m!56051))

(assert (=> b!62805 m!56261))

(assert (=> b!62794 m!56051))

(declare-fun m!56591 () Bool)

(assert (=> b!62794 m!56591))

(assert (=> b!62794 m!56151))

(assert (=> b!62794 m!56151))

(assert (=> b!62794 m!56051))

(assert (=> b!62794 m!56239))

(declare-fun m!56593 () Bool)

(assert (=> b!62806 m!56593))

(declare-fun m!56595 () Bool)

(assert (=> b!62796 m!56595))

(assert (=> bm!4944 m!56051))

(assert (=> bm!4944 m!56231))

(declare-fun m!56597 () Bool)

(assert (=> d!12787 m!56597))

(assert (=> d!12787 m!56151))

(assert (=> d!12787 m!56051))

(assert (=> d!12787 m!56267))

(declare-fun m!56599 () Bool)

(assert (=> d!12787 m!56599))

(declare-fun m!56601 () Bool)

(assert (=> d!12787 m!56601))

(assert (=> d!12787 m!56151))

(assert (=> d!12787 m!56051))

(assert (=> d!12787 m!56239))

(assert (=> d!12787 m!56051))

(declare-fun m!56603 () Bool)

(assert (=> d!12787 m!56603))

(declare-fun m!56605 () Bool)

(assert (=> d!12787 m!56605))

(declare-fun m!56607 () Bool)

(assert (=> d!12787 m!56607))

(declare-fun m!56609 () Bool)

(assert (=> d!12787 m!56609))

(assert (=> d!12787 m!56051))

(declare-fun m!56611 () Bool)

(assert (=> d!12787 m!56611))

(assert (=> d!12787 m!56085))

(assert (=> d!12787 m!56051))

(declare-fun m!56613 () Bool)

(assert (=> d!12787 m!56613))

(declare-fun m!56615 () Bool)

(assert (=> d!12787 m!56615))

(declare-fun m!56617 () Bool)

(assert (=> d!12787 m!56617))

(declare-fun m!56619 () Bool)

(assert (=> d!12787 m!56619))

(assert (=> d!12787 m!56209))

(assert (=> d!12787 m!56051))

(declare-fun m!56621 () Bool)

(assert (=> d!12787 m!56621))

(assert (=> d!12787 m!56051))

(declare-fun m!56623 () Bool)

(assert (=> d!12787 m!56623))

(assert (=> d!12787 m!56151))

(assert (=> d!12787 m!56467))

(assert (=> d!12787 m!56597))

(assert (=> d!12787 m!56607))

(declare-fun m!56625 () Bool)

(assert (=> d!12787 m!56625))

(declare-fun m!56627 () Bool)

(assert (=> d!12787 m!56627))

(declare-fun m!56629 () Bool)

(assert (=> d!12787 m!56629))

(assert (=> d!12787 m!56051))

(assert (=> d!12787 m!56063))

(declare-fun m!56631 () Bool)

(assert (=> d!12787 m!56631))

(declare-fun m!56633 () Bool)

(assert (=> b!62797 m!56633))

(assert (=> bm!4943 m!56051))

(assert (=> bm!4943 m!56267))

(assert (=> bm!4899 d!12787))

(assert (=> d!12677 d!12683))

(declare-fun d!12789 () Bool)

(assert (=> d!12789 (arrayNoDuplicates!0 (_keys!3720 (v!2419 (underlying!233 thiss!992))) from!355 Nil!1437)))

(assert (=> d!12789 true))

(declare-fun _$71!78 () Unit!1693)

(assert (=> d!12789 (= (choose!39 (_keys!3720 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000000 from!355) _$71!78)))

(declare-fun bs!2741 () Bool)

(assert (= bs!2741 d!12789))

(assert (=> bs!2741 m!56049))

(assert (=> d!12677 d!12789))

(declare-fun d!12791 () Bool)

(declare-fun e!41221 () Bool)

(assert (=> d!12791 e!41221))

(declare-fun res!34457 () Bool)

(assert (=> d!12791 (=> (not res!34457) (not e!41221))))

(declare-fun lt!26376 () SeekEntryResult!229)

(assert (=> d!12791 (= res!34457 ((_ is Found!229) lt!26376))))

(assert (=> d!12791 (= lt!26376 (seekEntryOrOpen!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (_keys!3720 newMap!16) (mask!5994 newMap!16)))))

(declare-fun lt!26377 () Unit!1693)

(declare-fun choose!337 (array!3761 array!3763 (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 (_ BitVec 64) Int) Unit!1693)

(assert (=> d!12791 (= lt!26377 (choose!337 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (defaultEntry!2088 newMap!16)))))

(assert (=> d!12791 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!12791 (= (lemmaInListMapThenSeekEntryOrOpenFindsIt!17 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (defaultEntry!2088 newMap!16)) lt!26377)))

(declare-fun b!62813 () Bool)

(declare-fun res!34456 () Bool)

(assert (=> b!62813 (=> (not res!34456) (not e!41221))))

(assert (=> b!62813 (= res!34456 (inRange!0 (index!3042 lt!26376) (mask!5994 newMap!16)))))

(declare-fun b!62814 () Bool)

(assert (=> b!62814 (= e!41221 (= (select (arr!1799 (_keys!3720 newMap!16)) (index!3042 lt!26376)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> b!62814 (and (bvsge (index!3042 lt!26376) #b00000000000000000000000000000000) (bvslt (index!3042 lt!26376) (size!2031 (_keys!3720 newMap!16))))))

(assert (= (and d!12791 res!34457) b!62813))

(assert (= (and b!62813 res!34456) b!62814))

(assert (=> d!12791 m!56051))

(assert (=> d!12791 m!56231))

(assert (=> d!12791 m!56051))

(declare-fun m!56635 () Bool)

(assert (=> d!12791 m!56635))

(assert (=> d!12791 m!56299))

(declare-fun m!56637 () Bool)

(assert (=> b!62813 m!56637))

(declare-fun m!56639 () Bool)

(assert (=> b!62814 m!56639))

(assert (=> bm!4898 d!12791))

(declare-fun d!12793 () Bool)

(declare-fun e!41224 () Bool)

(assert (=> d!12793 e!41224))

(declare-fun c!8401 () Bool)

(assert (=> d!12793 (= c!8401 (and (not (= (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> d!12793 true))

(declare-fun _$29!72 () Unit!1693)

(assert (=> d!12793 (= (choose!329 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (_values!2071 (v!2419 (underlying!233 thiss!992))) (mask!5994 (v!2419 (underlying!233 thiss!992))) (extraKeys!1967 (v!2419 (underlying!233 thiss!992))) (zeroValue!2000 (v!2419 (underlying!233 thiss!992))) (minValue!2000 (v!2419 (underlying!233 thiss!992))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2088 (v!2419 (underlying!233 thiss!992)))) _$29!72)))

(declare-fun b!62819 () Bool)

(assert (=> b!62819 (= e!41224 (arrayContainsKey!0 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!62820 () Bool)

(assert (=> b!62820 (= e!41224 (ite (= (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!1967 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1967 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!12793 c!8401) b!62819))

(assert (= (and d!12793 (not c!8401)) b!62820))

(assert (=> b!62819 m!56051))

(assert (=> b!62819 m!56055))

(assert (=> d!12681 d!12793))

(assert (=> d!12681 d!12689))

(declare-fun b!62833 () Bool)

(declare-fun e!41231 () SeekEntryResult!229)

(declare-fun lt!26386 () SeekEntryResult!229)

(assert (=> b!62833 (= e!41231 (MissingZero!229 (index!3043 lt!26386)))))

(declare-fun d!12795 () Bool)

(declare-fun lt!26384 () SeekEntryResult!229)

(assert (=> d!12795 (and (or ((_ is Undefined!229) lt!26384) (not ((_ is Found!229) lt!26384)) (and (bvsge (index!3042 lt!26384) #b00000000000000000000000000000000) (bvslt (index!3042 lt!26384) (size!2031 (_keys!3720 newMap!16))))) (or ((_ is Undefined!229) lt!26384) ((_ is Found!229) lt!26384) (not ((_ is MissingZero!229) lt!26384)) (and (bvsge (index!3041 lt!26384) #b00000000000000000000000000000000) (bvslt (index!3041 lt!26384) (size!2031 (_keys!3720 newMap!16))))) (or ((_ is Undefined!229) lt!26384) ((_ is Found!229) lt!26384) ((_ is MissingZero!229) lt!26384) (not ((_ is MissingVacant!229) lt!26384)) (and (bvsge (index!3044 lt!26384) #b00000000000000000000000000000000) (bvslt (index!3044 lt!26384) (size!2031 (_keys!3720 newMap!16))))) (or ((_ is Undefined!229) lt!26384) (ite ((_ is Found!229) lt!26384) (= (select (arr!1799 (_keys!3720 newMap!16)) (index!3042 lt!26384)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (ite ((_ is MissingZero!229) lt!26384) (= (select (arr!1799 (_keys!3720 newMap!16)) (index!3041 lt!26384)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!229) lt!26384) (= (select (arr!1799 (_keys!3720 newMap!16)) (index!3044 lt!26384)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!41233 () SeekEntryResult!229)

(assert (=> d!12795 (= lt!26384 e!41233)))

(declare-fun c!8409 () Bool)

(assert (=> d!12795 (= c!8409 (and ((_ is Intermediate!229) lt!26386) (undefined!1041 lt!26386)))))

(declare-fun seekKeyOrZeroOrLongMinValue!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!3761 (_ BitVec 32)) SeekEntryResult!229)

(declare-fun toIndex!0 ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))

(assert (=> d!12795 (= lt!26386 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (mask!5994 newMap!16)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (_keys!3720 newMap!16) (mask!5994 newMap!16)))))

(assert (=> d!12795 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!12795 (= (seekEntryOrOpen!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (_keys!3720 newMap!16) (mask!5994 newMap!16)) lt!26384)))

(declare-fun b!62834 () Bool)

(declare-fun e!41232 () SeekEntryResult!229)

(assert (=> b!62834 (= e!41233 e!41232)))

(declare-fun lt!26385 () (_ BitVec 64))

(assert (=> b!62834 (= lt!26385 (select (arr!1799 (_keys!3720 newMap!16)) (index!3043 lt!26386)))))

(declare-fun c!8410 () Bool)

(assert (=> b!62834 (= c!8410 (= lt!26385 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun b!62835 () Bool)

(assert (=> b!62835 (= e!41232 (Found!229 (index!3043 lt!26386)))))

(declare-fun b!62836 () Bool)

(assert (=> b!62836 (= e!41233 Undefined!229)))

(declare-fun b!62837 () Bool)

(declare-fun c!8408 () Bool)

(assert (=> b!62837 (= c!8408 (= lt!26385 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62837 (= e!41232 e!41231)))

(declare-fun b!62838 () Bool)

(declare-fun seekKeyOrZeroReturnVacant!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!3761 (_ BitVec 32)) SeekEntryResult!229)

(assert (=> b!62838 (= e!41231 (seekKeyOrZeroReturnVacant!0 (x!10307 lt!26386) (index!3043 lt!26386) (index!3043 lt!26386) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (_keys!3720 newMap!16) (mask!5994 newMap!16)))))

(assert (= (and d!12795 c!8409) b!62836))

(assert (= (and d!12795 (not c!8409)) b!62834))

(assert (= (and b!62834 c!8410) b!62835))

(assert (= (and b!62834 (not c!8410)) b!62837))

(assert (= (and b!62837 c!8408) b!62833))

(assert (= (and b!62837 (not c!8408)) b!62838))

(declare-fun m!56641 () Bool)

(assert (=> d!12795 m!56641))

(declare-fun m!56643 () Bool)

(assert (=> d!12795 m!56643))

(assert (=> d!12795 m!56299))

(declare-fun m!56645 () Bool)

(assert (=> d!12795 m!56645))

(assert (=> d!12795 m!56051))

(declare-fun m!56647 () Bool)

(assert (=> d!12795 m!56647))

(assert (=> d!12795 m!56051))

(assert (=> d!12795 m!56645))

(declare-fun m!56649 () Bool)

(assert (=> d!12795 m!56649))

(declare-fun m!56651 () Bool)

(assert (=> b!62834 m!56651))

(assert (=> b!62838 m!56051))

(declare-fun m!56653 () Bool)

(assert (=> b!62838 m!56653))

(assert (=> b!62564 d!12795))

(declare-fun d!12797 () Bool)

(declare-fun res!34458 () Bool)

(declare-fun e!41236 () Bool)

(assert (=> d!12797 (=> res!34458 e!41236)))

(assert (=> d!12797 (= res!34458 (bvsge #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(assert (=> d!12797 (= (arrayNoDuplicates!0 (_keys!3720 newMap!16) #b00000000000000000000000000000000 Nil!1437) e!41236)))

(declare-fun b!62839 () Bool)

(declare-fun e!41234 () Bool)

(declare-fun call!4950 () Bool)

(assert (=> b!62839 (= e!41234 call!4950)))

(declare-fun b!62840 () Bool)

(declare-fun e!41237 () Bool)

(assert (=> b!62840 (= e!41236 e!41237)))

(declare-fun res!34459 () Bool)

(assert (=> b!62840 (=> (not res!34459) (not e!41237))))

(declare-fun e!41235 () Bool)

(assert (=> b!62840 (= res!34459 (not e!41235))))

(declare-fun res!34460 () Bool)

(assert (=> b!62840 (=> (not res!34460) (not e!41235))))

(assert (=> b!62840 (= res!34460 (validKeyInArray!0 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62841 () Bool)

(assert (=> b!62841 (= e!41237 e!41234)))

(declare-fun c!8411 () Bool)

(assert (=> b!62841 (= c!8411 (validKeyInArray!0 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62842 () Bool)

(assert (=> b!62842 (= e!41235 (contains!692 Nil!1437 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!4947 () Bool)

(assert (=> bm!4947 (= call!4950 (arrayNoDuplicates!0 (_keys!3720 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!8411 (Cons!1436 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000) Nil!1437) Nil!1437)))))

(declare-fun b!62843 () Bool)

(assert (=> b!62843 (= e!41234 call!4950)))

(assert (= (and d!12797 (not res!34458)) b!62840))

(assert (= (and b!62840 res!34460) b!62842))

(assert (= (and b!62840 res!34459) b!62841))

(assert (= (and b!62841 c!8411) b!62839))

(assert (= (and b!62841 (not c!8411)) b!62843))

(assert (= (or b!62839 b!62843) bm!4947))

(assert (=> b!62840 m!56285))

(assert (=> b!62840 m!56285))

(assert (=> b!62840 m!56287))

(assert (=> b!62841 m!56285))

(assert (=> b!62841 m!56285))

(assert (=> b!62841 m!56287))

(assert (=> b!62842 m!56285))

(assert (=> b!62842 m!56285))

(declare-fun m!56655 () Bool)

(assert (=> b!62842 m!56655))

(assert (=> bm!4947 m!56285))

(declare-fun m!56657 () Bool)

(assert (=> bm!4947 m!56657))

(assert (=> b!62436 d!12797))

(assert (=> d!12675 d!12679))

(declare-fun d!12799 () Bool)

(assert (=> d!12799 (not (arrayContainsKey!0 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> d!12799 true))

(declare-fun _$68!37 () Unit!1693)

(assert (=> d!12799 (= (choose!68 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (Cons!1436 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1437)) _$68!37)))

(declare-fun bs!2742 () Bool)

(assert (= bs!2742 d!12799))

(assert (=> bs!2742 m!56051))

(assert (=> bs!2742 m!56055))

(assert (=> d!12675 d!12799))

(declare-fun d!12801 () Bool)

(assert (=> d!12801 (= (+!83 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) lt!26140 (zeroValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26389 () Unit!1693)

(declare-fun choose!338 (array!3761 array!3763 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 V!2867 Int) Unit!1693)

(assert (=> d!12801 (= lt!26389 (choose!338 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) lt!26140 (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2088 newMap!16)))))

(assert (=> d!12801 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!12801 (= (lemmaChangeLongMinValueKeyThenAddPairToListMap!17 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) lt!26140 (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2088 newMap!16)) lt!26389)))

(declare-fun bs!2743 () Bool)

(assert (= bs!2743 d!12801))

(assert (=> bs!2743 m!56063))

(declare-fun m!56659 () Bool)

(assert (=> bs!2743 m!56659))

(assert (=> bs!2743 m!56063))

(declare-fun m!56661 () Bool)

(assert (=> bs!2743 m!56661))

(assert (=> bs!2743 m!56299))

(assert (=> bs!2743 m!56151))

(assert (=> bs!2743 m!56151))

(declare-fun m!56663 () Bool)

(assert (=> bs!2743 m!56663))

(assert (=> b!62538 d!12801))

(assert (=> bm!4900 d!12795))

(declare-fun b!62852 () Bool)

(declare-fun e!41243 () (_ BitVec 32))

(declare-fun call!4953 () (_ BitVec 32))

(assert (=> b!62852 (= e!41243 (bvadd #b00000000000000000000000000000001 call!4953))))

(declare-fun d!12803 () Bool)

(declare-fun lt!26392 () (_ BitVec 32))

(assert (=> d!12803 (and (bvsge lt!26392 #b00000000000000000000000000000000) (bvsle lt!26392 (bvsub (size!2031 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!41242 () (_ BitVec 32))

(assert (=> d!12803 (= lt!26392 e!41242)))

(declare-fun c!8416 () Bool)

(assert (=> d!12803 (= c!8416 (bvsge #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(assert (=> d!12803 (and (bvsle #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2031 (_keys!3720 newMap!16)) (size!2031 (_keys!3720 newMap!16))))))

(assert (=> d!12803 (= (arrayCountValidKeys!0 (_keys!3720 newMap!16) #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))) lt!26392)))

(declare-fun b!62853 () Bool)

(assert (=> b!62853 (= e!41243 call!4953)))

(declare-fun bm!4950 () Bool)

(assert (=> bm!4950 (= call!4953 (arrayCountValidKeys!0 (_keys!3720 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2031 (_keys!3720 newMap!16))))))

(declare-fun b!62854 () Bool)

(assert (=> b!62854 (= e!41242 #b00000000000000000000000000000000)))

(declare-fun b!62855 () Bool)

(assert (=> b!62855 (= e!41242 e!41243)))

(declare-fun c!8417 () Bool)

(assert (=> b!62855 (= c!8417 (validKeyInArray!0 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!12803 c!8416) b!62854))

(assert (= (and d!12803 (not c!8416)) b!62855))

(assert (= (and b!62855 c!8417) b!62852))

(assert (= (and b!62855 (not c!8417)) b!62853))

(assert (= (or b!62852 b!62853) bm!4950))

(declare-fun m!56665 () Bool)

(assert (=> bm!4950 m!56665))

(assert (=> b!62855 m!56285))

(assert (=> b!62855 m!56285))

(assert (=> b!62855 m!56287))

(assert (=> b!62434 d!12803))

(assert (=> b!62361 d!12751))

(declare-fun d!12805 () Bool)

(assert (=> d!12805 (= (get!1085 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62571 d!12805))

(declare-fun b!62856 () Bool)

(declare-fun e!41253 () Bool)

(declare-fun e!41256 () Bool)

(assert (=> b!62856 (= e!41253 e!41256)))

(declare-fun res!34466 () Bool)

(declare-fun call!4959 () Bool)

(assert (=> b!62856 (= res!34466 call!4959)))

(assert (=> b!62856 (=> (not res!34466) (not e!41256))))

(declare-fun b!62857 () Bool)

(declare-fun res!34467 () Bool)

(declare-fun e!41254 () Bool)

(assert (=> b!62857 (=> (not res!34467) (not e!41254))))

(assert (=> b!62857 (= res!34467 e!41253)))

(declare-fun c!8420 () Bool)

(assert (=> b!62857 (= c!8420 (not (= (bvand (ite c!8338 (ite c!8332 (extraKeys!1967 newMap!16) lt!26140) (extraKeys!1967 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!62858 () Bool)

(declare-fun e!41248 () Unit!1693)

(declare-fun lt!26396 () Unit!1693)

(assert (=> b!62858 (= e!41248 lt!26396)))

(declare-fun lt!26400 () ListLongMap!1373)

(assert (=> b!62858 (= lt!26400 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (ite (or c!8338 c!8334) (_values!2071 newMap!16) lt!26151) (mask!5994 newMap!16) (ite c!8338 (ite c!8332 (extraKeys!1967 newMap!16) lt!26140) (extraKeys!1967 newMap!16)) (zeroValue!2000 newMap!16) (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26397 () (_ BitVec 64))

(assert (=> b!62858 (= lt!26397 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26406 () (_ BitVec 64))

(assert (=> b!62858 (= lt!26406 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26410 () Unit!1693)

(assert (=> b!62858 (= lt!26410 (addStillContains!44 lt!26400 lt!26397 (zeroValue!2000 newMap!16) lt!26406))))

(assert (=> b!62858 (contains!690 (+!83 lt!26400 (tuple2!2039 lt!26397 (zeroValue!2000 newMap!16))) lt!26406)))

(declare-fun lt!26408 () Unit!1693)

(assert (=> b!62858 (= lt!26408 lt!26410)))

(declare-fun lt!26403 () ListLongMap!1373)

(assert (=> b!62858 (= lt!26403 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (ite (or c!8338 c!8334) (_values!2071 newMap!16) lt!26151) (mask!5994 newMap!16) (ite c!8338 (ite c!8332 (extraKeys!1967 newMap!16) lt!26140) (extraKeys!1967 newMap!16)) (zeroValue!2000 newMap!16) (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26395 () (_ BitVec 64))

(assert (=> b!62858 (= lt!26395 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26407 () (_ BitVec 64))

(assert (=> b!62858 (= lt!26407 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26399 () Unit!1693)

(assert (=> b!62858 (= lt!26399 (addApplyDifferent!44 lt!26403 lt!26395 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)) lt!26407))))

(assert (=> b!62858 (= (apply!68 (+!83 lt!26403 (tuple2!2039 lt!26395 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))) lt!26407) (apply!68 lt!26403 lt!26407))))

(declare-fun lt!26409 () Unit!1693)

(assert (=> b!62858 (= lt!26409 lt!26399)))

(declare-fun lt!26404 () ListLongMap!1373)

(assert (=> b!62858 (= lt!26404 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (ite (or c!8338 c!8334) (_values!2071 newMap!16) lt!26151) (mask!5994 newMap!16) (ite c!8338 (ite c!8332 (extraKeys!1967 newMap!16) lt!26140) (extraKeys!1967 newMap!16)) (zeroValue!2000 newMap!16) (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26414 () (_ BitVec 64))

(assert (=> b!62858 (= lt!26414 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26411 () (_ BitVec 64))

(assert (=> b!62858 (= lt!26411 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26394 () Unit!1693)

(assert (=> b!62858 (= lt!26394 (addApplyDifferent!44 lt!26404 lt!26414 (zeroValue!2000 newMap!16) lt!26411))))

(assert (=> b!62858 (= (apply!68 (+!83 lt!26404 (tuple2!2039 lt!26414 (zeroValue!2000 newMap!16))) lt!26411) (apply!68 lt!26404 lt!26411))))

(declare-fun lt!26393 () Unit!1693)

(assert (=> b!62858 (= lt!26393 lt!26394)))

(declare-fun lt!26398 () ListLongMap!1373)

(assert (=> b!62858 (= lt!26398 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (ite (or c!8338 c!8334) (_values!2071 newMap!16) lt!26151) (mask!5994 newMap!16) (ite c!8338 (ite c!8332 (extraKeys!1967 newMap!16) lt!26140) (extraKeys!1967 newMap!16)) (zeroValue!2000 newMap!16) (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26413 () (_ BitVec 64))

(assert (=> b!62858 (= lt!26413 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26401 () (_ BitVec 64))

(assert (=> b!62858 (= lt!26401 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!62858 (= lt!26396 (addApplyDifferent!44 lt!26398 lt!26413 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)) lt!26401))))

(assert (=> b!62858 (= (apply!68 (+!83 lt!26398 (tuple2!2039 lt!26413 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))) lt!26401) (apply!68 lt!26398 lt!26401))))

(declare-fun b!62859 () Bool)

(assert (=> b!62859 (= e!41253 (not call!4959))))

(declare-fun bm!4952 () Bool)

(declare-fun call!4960 () ListLongMap!1373)

(declare-fun c!8421 () Bool)

(declare-fun call!4957 () ListLongMap!1373)

(declare-fun call!4954 () ListLongMap!1373)

(declare-fun c!8423 () Bool)

(declare-fun call!4955 () ListLongMap!1373)

(assert (=> bm!4952 (= call!4955 (+!83 (ite c!8421 call!4957 (ite c!8423 call!4954 call!4960)) (ite (or c!8421 c!8423) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))))))

(declare-fun bm!4953 () Bool)

(assert (=> bm!4953 (= call!4960 call!4954)))

(declare-fun b!62860 () Bool)

(declare-fun e!41252 () Bool)

(declare-fun e!41245 () Bool)

(assert (=> b!62860 (= e!41252 e!41245)))

(declare-fun res!34461 () Bool)

(assert (=> b!62860 (=> (not res!34461) (not e!41245))))

(declare-fun lt!26402 () ListLongMap!1373)

(assert (=> b!62860 (= res!34461 (contains!690 lt!26402 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!62860 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(declare-fun bm!4954 () Bool)

(declare-fun call!4958 () Bool)

(assert (=> bm!4954 (= call!4958 (contains!690 lt!26402 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62861 () Bool)

(declare-fun e!41246 () Bool)

(assert (=> b!62861 (= e!41246 (not call!4958))))

(declare-fun bm!4955 () Bool)

(assert (=> bm!4955 (= call!4959 (contains!690 lt!26402 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4956 () Bool)

(declare-fun call!4956 () ListLongMap!1373)

(assert (=> bm!4956 (= call!4956 call!4955)))

(declare-fun e!41249 () ListLongMap!1373)

(declare-fun b!62862 () Bool)

(assert (=> b!62862 (= e!41249 (+!83 call!4955 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))))))

(declare-fun b!62863 () Bool)

(declare-fun res!34465 () Bool)

(assert (=> b!62863 (=> (not res!34465) (not e!41254))))

(assert (=> b!62863 (= res!34465 e!41252)))

(declare-fun res!34464 () Bool)

(assert (=> b!62863 (=> res!34464 e!41252)))

(declare-fun e!41251 () Bool)

(assert (=> b!62863 (= res!34464 (not e!41251))))

(declare-fun res!34462 () Bool)

(assert (=> b!62863 (=> (not res!34462) (not e!41251))))

(assert (=> b!62863 (= res!34462 (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(declare-fun d!12807 () Bool)

(assert (=> d!12807 e!41254))

(declare-fun res!34463 () Bool)

(assert (=> d!12807 (=> (not res!34463) (not e!41254))))

(assert (=> d!12807 (= res!34463 (or (bvsge #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))))

(declare-fun lt!26412 () ListLongMap!1373)

(assert (=> d!12807 (= lt!26402 lt!26412)))

(declare-fun lt!26405 () Unit!1693)

(assert (=> d!12807 (= lt!26405 e!41248)))

(declare-fun c!8419 () Bool)

(declare-fun e!41255 () Bool)

(assert (=> d!12807 (= c!8419 e!41255)))

(declare-fun res!34468 () Bool)

(assert (=> d!12807 (=> (not res!34468) (not e!41255))))

(assert (=> d!12807 (= res!34468 (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(assert (=> d!12807 (= lt!26412 e!41249)))

(assert (=> d!12807 (= c!8421 (and (not (= (bvand (ite c!8338 (ite c!8332 (extraKeys!1967 newMap!16) lt!26140) (extraKeys!1967 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite c!8338 (ite c!8332 (extraKeys!1967 newMap!16) lt!26140) (extraKeys!1967 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12807 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!12807 (= (getCurrentListMap!406 (_keys!3720 newMap!16) (ite (or c!8338 c!8334) (_values!2071 newMap!16) lt!26151) (mask!5994 newMap!16) (ite c!8338 (ite c!8332 (extraKeys!1967 newMap!16) lt!26140) (extraKeys!1967 newMap!16)) (zeroValue!2000 newMap!16) (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) lt!26402)))

(declare-fun bm!4951 () Bool)

(assert (=> bm!4951 (= call!4954 call!4957)))

(declare-fun b!62864 () Bool)

(assert (=> b!62864 (= e!41256 (= (apply!68 lt!26402 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2000 newMap!16)))))

(declare-fun e!41250 () Bool)

(declare-fun b!62865 () Bool)

(assert (=> b!62865 (= e!41250 (= (apply!68 lt!26402 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))))

(declare-fun b!62866 () Bool)

(assert (=> b!62866 (= e!41246 e!41250)))

(declare-fun res!34469 () Bool)

(assert (=> b!62866 (= res!34469 call!4958)))

(assert (=> b!62866 (=> (not res!34469) (not e!41250))))

(declare-fun b!62867 () Bool)

(assert (=> b!62867 (= e!41251 (validKeyInArray!0 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62868 () Bool)

(assert (=> b!62868 (= e!41255 (validKeyInArray!0 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62869 () Bool)

(declare-fun Unit!1712 () Unit!1693)

(assert (=> b!62869 (= e!41248 Unit!1712)))

(declare-fun b!62870 () Bool)

(declare-fun e!41247 () ListLongMap!1373)

(assert (=> b!62870 (= e!41247 call!4956)))

(declare-fun bm!4957 () Bool)

(assert (=> bm!4957 (= call!4957 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (ite (or c!8338 c!8334) (_values!2071 newMap!16) lt!26151) (mask!5994 newMap!16) (ite c!8338 (ite c!8332 (extraKeys!1967 newMap!16) lt!26140) (extraKeys!1967 newMap!16)) (zeroValue!2000 newMap!16) (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun b!62871 () Bool)

(declare-fun e!41244 () ListLongMap!1373)

(assert (=> b!62871 (= e!41244 call!4960)))

(declare-fun b!62872 () Bool)

(assert (=> b!62872 (= e!41254 e!41246)))

(declare-fun c!8422 () Bool)

(assert (=> b!62872 (= c!8422 (not (= (bvand (ite c!8338 (ite c!8332 (extraKeys!1967 newMap!16) lt!26140) (extraKeys!1967 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun c!8418 () Bool)

(declare-fun b!62873 () Bool)

(assert (=> b!62873 (= c!8418 (and (not (= (bvand (ite c!8338 (ite c!8332 (extraKeys!1967 newMap!16) lt!26140) (extraKeys!1967 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite c!8338 (ite c!8332 (extraKeys!1967 newMap!16) lt!26140) (extraKeys!1967 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!62873 (= e!41247 e!41244)))

(declare-fun b!62874 () Bool)

(assert (=> b!62874 (= e!41244 call!4956)))

(declare-fun b!62875 () Bool)

(assert (=> b!62875 (= e!41245 (= (apply!68 lt!26402 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) (get!1082 (select (arr!1800 (ite (or c!8338 c!8334) (_values!2071 newMap!16) lt!26151)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62875 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2032 (ite (or c!8338 c!8334) (_values!2071 newMap!16) lt!26151))))))

(assert (=> b!62875 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(declare-fun b!62876 () Bool)

(assert (=> b!62876 (= e!41249 e!41247)))

(assert (=> b!62876 (= c!8423 (and (not (= (bvand (ite c!8338 (ite c!8332 (extraKeys!1967 newMap!16) lt!26140) (extraKeys!1967 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite c!8338 (ite c!8332 (extraKeys!1967 newMap!16) lt!26140) (extraKeys!1967 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!12807 c!8421) b!62862))

(assert (= (and d!12807 (not c!8421)) b!62876))

(assert (= (and b!62876 c!8423) b!62870))

(assert (= (and b!62876 (not c!8423)) b!62873))

(assert (= (and b!62873 c!8418) b!62874))

(assert (= (and b!62873 (not c!8418)) b!62871))

(assert (= (or b!62874 b!62871) bm!4953))

(assert (= (or b!62870 bm!4953) bm!4951))

(assert (= (or b!62870 b!62874) bm!4956))

(assert (= (or b!62862 bm!4951) bm!4957))

(assert (= (or b!62862 bm!4956) bm!4952))

(assert (= (and d!12807 res!34468) b!62868))

(assert (= (and d!12807 c!8419) b!62858))

(assert (= (and d!12807 (not c!8419)) b!62869))

(assert (= (and d!12807 res!34463) b!62863))

(assert (= (and b!62863 res!34462) b!62867))

(assert (= (and b!62863 (not res!34464)) b!62860))

(assert (= (and b!62860 res!34461) b!62875))

(assert (= (and b!62863 res!34465) b!62857))

(assert (= (and b!62857 c!8420) b!62856))

(assert (= (and b!62857 (not c!8420)) b!62859))

(assert (= (and b!62856 res!34466) b!62864))

(assert (= (or b!62856 b!62859) bm!4955))

(assert (= (and b!62857 res!34467) b!62872))

(assert (= (and b!62872 c!8422) b!62866))

(assert (= (and b!62872 (not c!8422)) b!62861))

(assert (= (and b!62866 res!34469) b!62865))

(assert (= (or b!62866 b!62861) bm!4954))

(declare-fun b_lambda!2801 () Bool)

(assert (=> (not b_lambda!2801) (not b!62875)))

(assert (=> b!62875 t!4841))

(declare-fun b_and!3843 () Bool)

(assert (= b_and!3839 (and (=> t!4841 result!2459) b_and!3843)))

(assert (=> b!62875 t!4843))

(declare-fun b_and!3845 () Bool)

(assert (= b_and!3841 (and (=> t!4843 result!2461) b_and!3845)))

(assert (=> b!62868 m!56285))

(assert (=> b!62868 m!56285))

(assert (=> b!62868 m!56287))

(declare-fun m!56667 () Bool)

(assert (=> b!62858 m!56667))

(declare-fun m!56669 () Bool)

(assert (=> b!62858 m!56669))

(declare-fun m!56671 () Bool)

(assert (=> b!62858 m!56671))

(declare-fun m!56673 () Bool)

(assert (=> b!62858 m!56673))

(declare-fun m!56675 () Bool)

(assert (=> b!62858 m!56675))

(declare-fun m!56677 () Bool)

(assert (=> b!62858 m!56677))

(declare-fun m!56679 () Bool)

(assert (=> b!62858 m!56679))

(declare-fun m!56681 () Bool)

(assert (=> b!62858 m!56681))

(declare-fun m!56683 () Bool)

(assert (=> b!62858 m!56683))

(declare-fun m!56685 () Bool)

(assert (=> b!62858 m!56685))

(declare-fun m!56687 () Bool)

(assert (=> b!62858 m!56687))

(declare-fun m!56689 () Bool)

(assert (=> b!62858 m!56689))

(declare-fun m!56691 () Bool)

(assert (=> b!62858 m!56691))

(declare-fun m!56693 () Bool)

(assert (=> b!62858 m!56693))

(assert (=> b!62858 m!56285))

(assert (=> b!62858 m!56691))

(declare-fun m!56695 () Bool)

(assert (=> b!62858 m!56695))

(assert (=> b!62858 m!56687))

(assert (=> b!62858 m!56673))

(declare-fun m!56697 () Bool)

(assert (=> b!62858 m!56697))

(assert (=> b!62858 m!56681))

(declare-fun m!56699 () Bool)

(assert (=> b!62864 m!56699))

(assert (=> bm!4957 m!56693))

(assert (=> b!62867 m!56285))

(assert (=> b!62867 m!56285))

(assert (=> b!62867 m!56287))

(assert (=> d!12807 m!56299))

(assert (=> b!62875 m!56285))

(declare-fun m!56701 () Bool)

(assert (=> b!62875 m!56701))

(assert (=> b!62875 m!56515))

(declare-fun m!56703 () Bool)

(assert (=> b!62875 m!56703))

(assert (=> b!62875 m!56285))

(assert (=> b!62875 m!56703))

(assert (=> b!62875 m!56515))

(declare-fun m!56705 () Bool)

(assert (=> b!62875 m!56705))

(assert (=> b!62860 m!56285))

(assert (=> b!62860 m!56285))

(declare-fun m!56707 () Bool)

(assert (=> b!62860 m!56707))

(declare-fun m!56709 () Bool)

(assert (=> b!62865 m!56709))

(declare-fun m!56711 () Bool)

(assert (=> bm!4952 m!56711))

(declare-fun m!56713 () Bool)

(assert (=> b!62862 m!56713))

(declare-fun m!56715 () Bool)

(assert (=> bm!4955 m!56715))

(declare-fun m!56717 () Bool)

(assert (=> bm!4954 m!56717))

(assert (=> bm!4902 d!12807))

(declare-fun d!12809 () Bool)

(declare-fun lt!26417 () Bool)

(define-sort InoxSet (T) (Array T Bool))

(declare-fun content!67 (List!1440) (InoxSet (_ BitVec 64)))

(assert (=> d!12809 (= lt!26417 (select (content!67 Nil!1437) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun e!41262 () Bool)

(assert (=> d!12809 (= lt!26417 e!41262)))

(declare-fun res!34475 () Bool)

(assert (=> d!12809 (=> (not res!34475) (not e!41262))))

(assert (=> d!12809 (= res!34475 ((_ is Cons!1436) Nil!1437))))

(assert (=> d!12809 (= (contains!692 Nil!1437 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) lt!26417)))

(declare-fun b!62881 () Bool)

(declare-fun e!41261 () Bool)

(assert (=> b!62881 (= e!41262 e!41261)))

(declare-fun res!34474 () Bool)

(assert (=> b!62881 (=> res!34474 e!41261)))

(assert (=> b!62881 (= res!34474 (= (h!2019 Nil!1437) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun b!62882 () Bool)

(assert (=> b!62882 (= e!41261 (contains!692 (t!4834 Nil!1437) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (= (and d!12809 res!34475) b!62881))

(assert (= (and b!62881 (not res!34474)) b!62882))

(declare-fun m!56719 () Bool)

(assert (=> d!12809 m!56719))

(assert (=> d!12809 m!56051))

(declare-fun m!56721 () Bool)

(assert (=> d!12809 m!56721))

(assert (=> b!62882 m!56051))

(declare-fun m!56723 () Bool)

(assert (=> b!62882 m!56723))

(assert (=> b!62363 d!12809))

(declare-fun d!12811 () Bool)

(declare-fun e!41263 () Bool)

(assert (=> d!12811 e!41263))

(declare-fun res!34476 () Bool)

(assert (=> d!12811 (=> (not res!34476) (not e!41263))))

(declare-fun lt!26421 () ListLongMap!1373)

(assert (=> d!12811 (= res!34476 (contains!690 lt!26421 (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun lt!26420 () List!1439)

(assert (=> d!12811 (= lt!26421 (ListLongMap!1374 lt!26420))))

(declare-fun lt!26419 () Unit!1693)

(declare-fun lt!26418 () Unit!1693)

(assert (=> d!12811 (= lt!26419 lt!26418)))

(assert (=> d!12811 (= (getValueByKey!126 lt!26420 (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) (Some!131 (_2!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!12811 (= lt!26418 (lemmaContainsTupThenGetReturnValue!43 lt!26420 (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!12811 (= lt!26420 (insertStrictlySorted!46 (toList!702 call!4841) (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!12811 (= (+!83 call!4841 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) lt!26421)))

(declare-fun b!62883 () Bool)

(declare-fun res!34477 () Bool)

(assert (=> b!62883 (=> (not res!34477) (not e!41263))))

(assert (=> b!62883 (= res!34477 (= (getValueByKey!126 (toList!702 lt!26421) (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) (Some!131 (_2!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!62884 () Bool)

(assert (=> b!62884 (= e!41263 (contains!693 (toList!702 lt!26421) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))

(assert (= (and d!12811 res!34476) b!62883))

(assert (= (and b!62883 res!34477) b!62884))

(declare-fun m!56725 () Bool)

(assert (=> d!12811 m!56725))

(declare-fun m!56727 () Bool)

(assert (=> d!12811 m!56727))

(declare-fun m!56729 () Bool)

(assert (=> d!12811 m!56729))

(declare-fun m!56731 () Bool)

(assert (=> d!12811 m!56731))

(declare-fun m!56733 () Bool)

(assert (=> b!62883 m!56733))

(declare-fun m!56735 () Bool)

(assert (=> b!62884 m!56735))

(assert (=> b!62413 d!12811))

(declare-fun d!12813 () Bool)

(declare-fun e!41265 () Bool)

(assert (=> d!12813 e!41265))

(declare-fun res!34478 () Bool)

(assert (=> d!12813 (=> res!34478 e!41265)))

(declare-fun lt!26425 () Bool)

(assert (=> d!12813 (= res!34478 (not lt!26425))))

(declare-fun lt!26424 () Bool)

(assert (=> d!12813 (= lt!26425 lt!26424)))

(declare-fun lt!26422 () Unit!1693)

(declare-fun e!41264 () Unit!1693)

(assert (=> d!12813 (= lt!26422 e!41264)))

(declare-fun c!8424 () Bool)

(assert (=> d!12813 (= c!8424 lt!26424)))

(assert (=> d!12813 (= lt!26424 (containsKey!130 (toList!702 lt!26046) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12813 (= (contains!690 lt!26046 #b1000000000000000000000000000000000000000000000000000000000000000) lt!26425)))

(declare-fun b!62885 () Bool)

(declare-fun lt!26423 () Unit!1693)

(assert (=> b!62885 (= e!41264 lt!26423)))

(assert (=> b!62885 (= lt!26423 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 lt!26046) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62885 (isDefined!79 (getValueByKey!126 (toList!702 lt!26046) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62886 () Bool)

(declare-fun Unit!1713 () Unit!1693)

(assert (=> b!62886 (= e!41264 Unit!1713)))

(declare-fun b!62887 () Bool)

(assert (=> b!62887 (= e!41265 (isDefined!79 (getValueByKey!126 (toList!702 lt!26046) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12813 c!8424) b!62885))

(assert (= (and d!12813 (not c!8424)) b!62886))

(assert (= (and d!12813 (not res!34478)) b!62887))

(declare-fun m!56737 () Bool)

(assert (=> d!12813 m!56737))

(declare-fun m!56739 () Bool)

(assert (=> b!62885 m!56739))

(declare-fun m!56741 () Bool)

(assert (=> b!62885 m!56741))

(assert (=> b!62885 m!56741))

(declare-fun m!56743 () Bool)

(assert (=> b!62885 m!56743))

(assert (=> b!62887 m!56741))

(assert (=> b!62887 m!56741))

(assert (=> b!62887 m!56743))

(assert (=> bm!4840 d!12813))

(assert (=> b!62555 d!12759))

(declare-fun d!12815 () Bool)

(declare-fun e!41267 () Bool)

(assert (=> d!12815 e!41267))

(declare-fun res!34479 () Bool)

(assert (=> d!12815 (=> res!34479 e!41267)))

(declare-fun lt!26429 () Bool)

(assert (=> d!12815 (= res!34479 (not lt!26429))))

(declare-fun lt!26428 () Bool)

(assert (=> d!12815 (= lt!26429 lt!26428)))

(declare-fun lt!26426 () Unit!1693)

(declare-fun e!41266 () Unit!1693)

(assert (=> d!12815 (= lt!26426 e!41266)))

(declare-fun c!8425 () Bool)

(assert (=> d!12815 (= c!8425 lt!26428)))

(assert (=> d!12815 (= lt!26428 (containsKey!130 (toList!702 lt!26046) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12815 (= (contains!690 lt!26046 #b0000000000000000000000000000000000000000000000000000000000000000) lt!26429)))

(declare-fun b!62888 () Bool)

(declare-fun lt!26427 () Unit!1693)

(assert (=> b!62888 (= e!41266 lt!26427)))

(assert (=> b!62888 (= lt!26427 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 lt!26046) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62888 (isDefined!79 (getValueByKey!126 (toList!702 lt!26046) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62889 () Bool)

(declare-fun Unit!1714 () Unit!1693)

(assert (=> b!62889 (= e!41266 Unit!1714)))

(declare-fun b!62890 () Bool)

(assert (=> b!62890 (= e!41267 (isDefined!79 (getValueByKey!126 (toList!702 lt!26046) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12815 c!8425) b!62888))

(assert (= (and d!12815 (not c!8425)) b!62889))

(assert (= (and d!12815 (not res!34479)) b!62890))

(declare-fun m!56745 () Bool)

(assert (=> d!12815 m!56745))

(declare-fun m!56747 () Bool)

(assert (=> b!62888 m!56747))

(assert (=> b!62888 m!56559))

(assert (=> b!62888 m!56559))

(declare-fun m!56749 () Bool)

(assert (=> b!62888 m!56749))

(assert (=> b!62890 m!56559))

(assert (=> b!62890 m!56559))

(assert (=> b!62890 m!56749))

(assert (=> bm!4841 d!12815))

(assert (=> d!12691 d!12759))

(declare-fun d!12817 () Bool)

(assert (=> d!12817 (= (inRange!0 (ite c!8334 (ite c!8333 (index!3042 lt!26141) (ite c!8341 (index!3041 lt!26136) (index!3044 lt!26136))) (ite c!8343 (index!3042 lt!26139) (ite c!8340 (index!3041 lt!26133) (index!3044 lt!26133)))) (mask!5994 newMap!16)) (and (bvsge (ite c!8334 (ite c!8333 (index!3042 lt!26141) (ite c!8341 (index!3041 lt!26136) (index!3044 lt!26136))) (ite c!8343 (index!3042 lt!26139) (ite c!8340 (index!3041 lt!26133) (index!3044 lt!26133)))) #b00000000000000000000000000000000) (bvslt (ite c!8334 (ite c!8333 (index!3042 lt!26141) (ite c!8341 (index!3041 lt!26136) (index!3044 lt!26136))) (ite c!8343 (index!3042 lt!26139) (ite c!8340 (index!3041 lt!26133) (index!3044 lt!26133)))) (bvadd (mask!5994 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4910 d!12817))

(assert (=> b!62418 d!12777))

(assert (=> bm!4894 d!12691))

(declare-fun d!12819 () Bool)

(declare-fun res!34480 () Bool)

(declare-fun e!41270 () Bool)

(assert (=> d!12819 (=> res!34480 e!41270)))

(assert (=> d!12819 (= res!34480 (bvsge (bvadd from!355 #b00000000000000000000000000000001) (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992))))))))

(assert (=> d!12819 (= (arrayNoDuplicates!0 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!8284 (Cons!1436 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1437) Nil!1437)) e!41270)))

(declare-fun b!62891 () Bool)

(declare-fun e!41268 () Bool)

(declare-fun call!4961 () Bool)

(assert (=> b!62891 (= e!41268 call!4961)))

(declare-fun b!62892 () Bool)

(declare-fun e!41271 () Bool)

(assert (=> b!62892 (= e!41270 e!41271)))

(declare-fun res!34481 () Bool)

(assert (=> b!62892 (=> (not res!34481) (not e!41271))))

(declare-fun e!41269 () Bool)

(assert (=> b!62892 (= res!34481 (not e!41269))))

(declare-fun res!34482 () Bool)

(assert (=> b!62892 (=> (not res!34482) (not e!41269))))

(assert (=> b!62892 (= res!34482 (validKeyInArray!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!62893 () Bool)

(assert (=> b!62893 (= e!41271 e!41268)))

(declare-fun c!8426 () Bool)

(assert (=> b!62893 (= c!8426 (validKeyInArray!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!62894 () Bool)

(assert (=> b!62894 (= e!41269 (contains!692 (ite c!8284 (Cons!1436 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1437) Nil!1437) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun bm!4958 () Bool)

(assert (=> bm!4958 (= call!4961 (arrayNoDuplicates!0 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!8426 (Cons!1436 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!8284 (Cons!1436 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1437) Nil!1437)) (ite c!8284 (Cons!1436 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1437) Nil!1437))))))

(declare-fun b!62895 () Bool)

(assert (=> b!62895 (= e!41268 call!4961)))

(assert (= (and d!12819 (not res!34480)) b!62892))

(assert (= (and b!62892 res!34482) b!62894))

(assert (= (and b!62892 res!34481) b!62893))

(assert (= (and b!62893 c!8426) b!62891))

(assert (= (and b!62893 (not c!8426)) b!62895))

(assert (= (or b!62891 b!62895) bm!4958))

(declare-fun m!56751 () Bool)

(assert (=> b!62892 m!56751))

(assert (=> b!62892 m!56751))

(declare-fun m!56753 () Bool)

(assert (=> b!62892 m!56753))

(assert (=> b!62893 m!56751))

(assert (=> b!62893 m!56751))

(assert (=> b!62893 m!56753))

(assert (=> b!62894 m!56751))

(assert (=> b!62894 m!56751))

(declare-fun m!56755 () Bool)

(assert (=> b!62894 m!56755))

(assert (=> bm!4958 m!56751))

(declare-fun m!56757 () Bool)

(assert (=> bm!4958 m!56757))

(assert (=> bm!4822 d!12819))

(declare-fun b!62896 () Bool)

(declare-fun e!41281 () Bool)

(declare-fun e!41284 () Bool)

(assert (=> b!62896 (= e!41281 e!41284)))

(declare-fun res!34488 () Bool)

(declare-fun call!4967 () Bool)

(assert (=> b!62896 (= res!34488 call!4967)))

(assert (=> b!62896 (=> (not res!34488) (not e!41284))))

(declare-fun b!62897 () Bool)

(declare-fun res!34489 () Bool)

(declare-fun e!41282 () Bool)

(assert (=> b!62897 (=> (not res!34489) (not e!41282))))

(assert (=> b!62897 (= res!34489 e!41281)))

(declare-fun c!8429 () Bool)

(assert (=> b!62897 (= c!8429 (not (= (bvand (ite (and c!8338 c!8332) lt!26145 (extraKeys!1967 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!62898 () Bool)

(declare-fun e!41276 () Unit!1693)

(declare-fun lt!26433 () Unit!1693)

(assert (=> b!62898 (= e!41276 lt!26433)))

(declare-fun lt!26437 () ListLongMap!1373)

(assert (=> b!62898 (= lt!26437 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (ite c!8338 (_values!2071 newMap!16) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (index!3042 lt!26125) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16)))) (mask!5994 newMap!16) (ite (and c!8338 c!8332) lt!26145 (extraKeys!1967 newMap!16)) (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26434 () (_ BitVec 64))

(assert (=> b!62898 (= lt!26434 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26443 () (_ BitVec 64))

(assert (=> b!62898 (= lt!26443 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26447 () Unit!1693)

(assert (=> b!62898 (= lt!26447 (addStillContains!44 lt!26437 lt!26434 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)) lt!26443))))

(assert (=> b!62898 (contains!690 (+!83 lt!26437 (tuple2!2039 lt!26434 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)))) lt!26443)))

(declare-fun lt!26445 () Unit!1693)

(assert (=> b!62898 (= lt!26445 lt!26447)))

(declare-fun lt!26440 () ListLongMap!1373)

(assert (=> b!62898 (= lt!26440 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (ite c!8338 (_values!2071 newMap!16) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (index!3042 lt!26125) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16)))) (mask!5994 newMap!16) (ite (and c!8338 c!8332) lt!26145 (extraKeys!1967 newMap!16)) (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26432 () (_ BitVec 64))

(assert (=> b!62898 (= lt!26432 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26444 () (_ BitVec 64))

(assert (=> b!62898 (= lt!26444 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26436 () Unit!1693)

(assert (=> b!62898 (= lt!26436 (addApplyDifferent!44 lt!26440 lt!26432 (minValue!2000 newMap!16) lt!26444))))

(assert (=> b!62898 (= (apply!68 (+!83 lt!26440 (tuple2!2039 lt!26432 (minValue!2000 newMap!16))) lt!26444) (apply!68 lt!26440 lt!26444))))

(declare-fun lt!26446 () Unit!1693)

(assert (=> b!62898 (= lt!26446 lt!26436)))

(declare-fun lt!26441 () ListLongMap!1373)

(assert (=> b!62898 (= lt!26441 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (ite c!8338 (_values!2071 newMap!16) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (index!3042 lt!26125) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16)))) (mask!5994 newMap!16) (ite (and c!8338 c!8332) lt!26145 (extraKeys!1967 newMap!16)) (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26451 () (_ BitVec 64))

(assert (=> b!62898 (= lt!26451 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26448 () (_ BitVec 64))

(assert (=> b!62898 (= lt!26448 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26431 () Unit!1693)

(assert (=> b!62898 (= lt!26431 (addApplyDifferent!44 lt!26441 lt!26451 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)) lt!26448))))

(assert (=> b!62898 (= (apply!68 (+!83 lt!26441 (tuple2!2039 lt!26451 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)))) lt!26448) (apply!68 lt!26441 lt!26448))))

(declare-fun lt!26430 () Unit!1693)

(assert (=> b!62898 (= lt!26430 lt!26431)))

(declare-fun lt!26435 () ListLongMap!1373)

(assert (=> b!62898 (= lt!26435 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (ite c!8338 (_values!2071 newMap!16) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (index!3042 lt!26125) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16)))) (mask!5994 newMap!16) (ite (and c!8338 c!8332) lt!26145 (extraKeys!1967 newMap!16)) (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26450 () (_ BitVec 64))

(assert (=> b!62898 (= lt!26450 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26438 () (_ BitVec 64))

(assert (=> b!62898 (= lt!26438 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!62898 (= lt!26433 (addApplyDifferent!44 lt!26435 lt!26450 (minValue!2000 newMap!16) lt!26438))))

(assert (=> b!62898 (= (apply!68 (+!83 lt!26435 (tuple2!2039 lt!26450 (minValue!2000 newMap!16))) lt!26438) (apply!68 lt!26435 lt!26438))))

(declare-fun b!62899 () Bool)

(assert (=> b!62899 (= e!41281 (not call!4967))))

(declare-fun call!4968 () ListLongMap!1373)

(declare-fun c!8430 () Bool)

(declare-fun c!8432 () Bool)

(declare-fun call!4962 () ListLongMap!1373)

(declare-fun call!4965 () ListLongMap!1373)

(declare-fun bm!4960 () Bool)

(declare-fun call!4963 () ListLongMap!1373)

(assert (=> bm!4960 (= call!4963 (+!83 (ite c!8430 call!4965 (ite c!8432 call!4962 call!4968)) (ite (or c!8430 c!8432) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))

(declare-fun bm!4961 () Bool)

(assert (=> bm!4961 (= call!4968 call!4962)))

(declare-fun b!62900 () Bool)

(declare-fun e!41280 () Bool)

(declare-fun e!41273 () Bool)

(assert (=> b!62900 (= e!41280 e!41273)))

(declare-fun res!34483 () Bool)

(assert (=> b!62900 (=> (not res!34483) (not e!41273))))

(declare-fun lt!26439 () ListLongMap!1373)

(assert (=> b!62900 (= res!34483 (contains!690 lt!26439 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!62900 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(declare-fun bm!4962 () Bool)

(declare-fun call!4966 () Bool)

(assert (=> bm!4962 (= call!4966 (contains!690 lt!26439 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62901 () Bool)

(declare-fun e!41274 () Bool)

(assert (=> b!62901 (= e!41274 (not call!4966))))

(declare-fun bm!4963 () Bool)

(assert (=> bm!4963 (= call!4967 (contains!690 lt!26439 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4964 () Bool)

(declare-fun call!4964 () ListLongMap!1373)

(assert (=> bm!4964 (= call!4964 call!4963)))

(declare-fun b!62902 () Bool)

(declare-fun e!41277 () ListLongMap!1373)

(assert (=> b!62902 (= e!41277 (+!83 call!4963 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))

(declare-fun b!62903 () Bool)

(declare-fun res!34487 () Bool)

(assert (=> b!62903 (=> (not res!34487) (not e!41282))))

(assert (=> b!62903 (= res!34487 e!41280)))

(declare-fun res!34486 () Bool)

(assert (=> b!62903 (=> res!34486 e!41280)))

(declare-fun e!41279 () Bool)

(assert (=> b!62903 (= res!34486 (not e!41279))))

(declare-fun res!34484 () Bool)

(assert (=> b!62903 (=> (not res!34484) (not e!41279))))

(assert (=> b!62903 (= res!34484 (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(declare-fun d!12821 () Bool)

(assert (=> d!12821 e!41282))

(declare-fun res!34485 () Bool)

(assert (=> d!12821 (=> (not res!34485) (not e!41282))))

(assert (=> d!12821 (= res!34485 (or (bvsge #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))))

(declare-fun lt!26449 () ListLongMap!1373)

(assert (=> d!12821 (= lt!26439 lt!26449)))

(declare-fun lt!26442 () Unit!1693)

(assert (=> d!12821 (= lt!26442 e!41276)))

(declare-fun c!8428 () Bool)

(declare-fun e!41283 () Bool)

(assert (=> d!12821 (= c!8428 e!41283)))

(declare-fun res!34490 () Bool)

(assert (=> d!12821 (=> (not res!34490) (not e!41283))))

(assert (=> d!12821 (= res!34490 (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(assert (=> d!12821 (= lt!26449 e!41277)))

(assert (=> d!12821 (= c!8430 (and (not (= (bvand (ite (and c!8338 c!8332) lt!26145 (extraKeys!1967 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite (and c!8338 c!8332) lt!26145 (extraKeys!1967 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12821 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!12821 (= (getCurrentListMap!406 (_keys!3720 newMap!16) (ite c!8338 (_values!2071 newMap!16) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (index!3042 lt!26125) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16)))) (mask!5994 newMap!16) (ite (and c!8338 c!8332) lt!26145 (extraKeys!1967 newMap!16)) (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) lt!26439)))

(declare-fun bm!4959 () Bool)

(assert (=> bm!4959 (= call!4962 call!4965)))

(declare-fun b!62904 () Bool)

(assert (=> b!62904 (= e!41284 (= (apply!68 lt!26439 #b0000000000000000000000000000000000000000000000000000000000000000) (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))))))

(declare-fun b!62905 () Bool)

(declare-fun e!41278 () Bool)

(assert (=> b!62905 (= e!41278 (= (apply!68 lt!26439 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2000 newMap!16)))))

(declare-fun b!62906 () Bool)

(assert (=> b!62906 (= e!41274 e!41278)))

(declare-fun res!34491 () Bool)

(assert (=> b!62906 (= res!34491 call!4966)))

(assert (=> b!62906 (=> (not res!34491) (not e!41278))))

(declare-fun b!62907 () Bool)

(assert (=> b!62907 (= e!41279 (validKeyInArray!0 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62908 () Bool)

(assert (=> b!62908 (= e!41283 (validKeyInArray!0 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62909 () Bool)

(declare-fun Unit!1715 () Unit!1693)

(assert (=> b!62909 (= e!41276 Unit!1715)))

(declare-fun b!62910 () Bool)

(declare-fun e!41275 () ListLongMap!1373)

(assert (=> b!62910 (= e!41275 call!4964)))

(declare-fun bm!4965 () Bool)

(assert (=> bm!4965 (= call!4965 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (ite c!8338 (_values!2071 newMap!16) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (index!3042 lt!26125) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16)))) (mask!5994 newMap!16) (ite (and c!8338 c!8332) lt!26145 (extraKeys!1967 newMap!16)) (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun b!62911 () Bool)

(declare-fun e!41272 () ListLongMap!1373)

(assert (=> b!62911 (= e!41272 call!4968)))

(declare-fun b!62912 () Bool)

(assert (=> b!62912 (= e!41282 e!41274)))

(declare-fun c!8431 () Bool)

(assert (=> b!62912 (= c!8431 (not (= (bvand (ite (and c!8338 c!8332) lt!26145 (extraKeys!1967 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!62913 () Bool)

(declare-fun c!8427 () Bool)

(assert (=> b!62913 (= c!8427 (and (not (= (bvand (ite (and c!8338 c!8332) lt!26145 (extraKeys!1967 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite (and c!8338 c!8332) lt!26145 (extraKeys!1967 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!62913 (= e!41275 e!41272)))

(declare-fun b!62914 () Bool)

(assert (=> b!62914 (= e!41272 call!4964)))

(declare-fun b!62915 () Bool)

(assert (=> b!62915 (= e!41273 (= (apply!68 lt!26439 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) (get!1082 (select (arr!1800 (ite c!8338 (_values!2071 newMap!16) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (index!3042 lt!26125) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62915 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2032 (ite c!8338 (_values!2071 newMap!16) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (index!3042 lt!26125) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16)))))))))

(assert (=> b!62915 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(declare-fun b!62916 () Bool)

(assert (=> b!62916 (= e!41277 e!41275)))

(assert (=> b!62916 (= c!8432 (and (not (= (bvand (ite (and c!8338 c!8332) lt!26145 (extraKeys!1967 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite (and c!8338 c!8332) lt!26145 (extraKeys!1967 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!12821 c!8430) b!62902))

(assert (= (and d!12821 (not c!8430)) b!62916))

(assert (= (and b!62916 c!8432) b!62910))

(assert (= (and b!62916 (not c!8432)) b!62913))

(assert (= (and b!62913 c!8427) b!62914))

(assert (= (and b!62913 (not c!8427)) b!62911))

(assert (= (or b!62914 b!62911) bm!4961))

(assert (= (or b!62910 bm!4961) bm!4959))

(assert (= (or b!62910 b!62914) bm!4964))

(assert (= (or b!62902 bm!4959) bm!4965))

(assert (= (or b!62902 bm!4964) bm!4960))

(assert (= (and d!12821 res!34490) b!62908))

(assert (= (and d!12821 c!8428) b!62898))

(assert (= (and d!12821 (not c!8428)) b!62909))

(assert (= (and d!12821 res!34485) b!62903))

(assert (= (and b!62903 res!34484) b!62907))

(assert (= (and b!62903 (not res!34486)) b!62900))

(assert (= (and b!62900 res!34483) b!62915))

(assert (= (and b!62903 res!34487) b!62897))

(assert (= (and b!62897 c!8429) b!62896))

(assert (= (and b!62897 (not c!8429)) b!62899))

(assert (= (and b!62896 res!34488) b!62904))

(assert (= (or b!62896 b!62899) bm!4963))

(assert (= (and b!62897 res!34489) b!62912))

(assert (= (and b!62912 c!8431) b!62906))

(assert (= (and b!62912 (not c!8431)) b!62901))

(assert (= (and b!62906 res!34491) b!62905))

(assert (= (or b!62906 b!62901) bm!4962))

(declare-fun b_lambda!2803 () Bool)

(assert (=> (not b_lambda!2803) (not b!62915)))

(assert (=> b!62915 t!4841))

(declare-fun b_and!3847 () Bool)

(assert (= b_and!3843 (and (=> t!4841 result!2459) b_and!3847)))

(assert (=> b!62915 t!4843))

(declare-fun b_and!3849 () Bool)

(assert (= b_and!3845 (and (=> t!4843 result!2461) b_and!3849)))

(assert (=> b!62908 m!56285))

(assert (=> b!62908 m!56285))

(assert (=> b!62908 m!56287))

(declare-fun m!56759 () Bool)

(assert (=> b!62898 m!56759))

(declare-fun m!56761 () Bool)

(assert (=> b!62898 m!56761))

(declare-fun m!56763 () Bool)

(assert (=> b!62898 m!56763))

(declare-fun m!56765 () Bool)

(assert (=> b!62898 m!56765))

(declare-fun m!56767 () Bool)

(assert (=> b!62898 m!56767))

(declare-fun m!56769 () Bool)

(assert (=> b!62898 m!56769))

(declare-fun m!56771 () Bool)

(assert (=> b!62898 m!56771))

(declare-fun m!56773 () Bool)

(assert (=> b!62898 m!56773))

(declare-fun m!56775 () Bool)

(assert (=> b!62898 m!56775))

(declare-fun m!56777 () Bool)

(assert (=> b!62898 m!56777))

(declare-fun m!56779 () Bool)

(assert (=> b!62898 m!56779))

(declare-fun m!56781 () Bool)

(assert (=> b!62898 m!56781))

(declare-fun m!56783 () Bool)

(assert (=> b!62898 m!56783))

(declare-fun m!56785 () Bool)

(assert (=> b!62898 m!56785))

(assert (=> b!62898 m!56285))

(assert (=> b!62898 m!56783))

(declare-fun m!56787 () Bool)

(assert (=> b!62898 m!56787))

(assert (=> b!62898 m!56779))

(assert (=> b!62898 m!56765))

(declare-fun m!56789 () Bool)

(assert (=> b!62898 m!56789))

(assert (=> b!62898 m!56773))

(declare-fun m!56791 () Bool)

(assert (=> b!62904 m!56791))

(assert (=> bm!4965 m!56785))

(assert (=> b!62907 m!56285))

(assert (=> b!62907 m!56285))

(assert (=> b!62907 m!56287))

(assert (=> d!12821 m!56299))

(assert (=> b!62915 m!56285))

(declare-fun m!56793 () Bool)

(assert (=> b!62915 m!56793))

(assert (=> b!62915 m!56515))

(declare-fun m!56795 () Bool)

(assert (=> b!62915 m!56795))

(assert (=> b!62915 m!56285))

(assert (=> b!62915 m!56795))

(assert (=> b!62915 m!56515))

(declare-fun m!56797 () Bool)

(assert (=> b!62915 m!56797))

(assert (=> b!62900 m!56285))

(assert (=> b!62900 m!56285))

(declare-fun m!56799 () Bool)

(assert (=> b!62900 m!56799))

(declare-fun m!56801 () Bool)

(assert (=> b!62905 m!56801))

(declare-fun m!56803 () Bool)

(assert (=> bm!4960 m!56803))

(declare-fun m!56805 () Bool)

(assert (=> b!62902 m!56805))

(declare-fun m!56807 () Bool)

(assert (=> bm!4963 m!56807))

(declare-fun m!56809 () Bool)

(assert (=> bm!4962 m!56809))

(assert (=> bm!4912 d!12821))

(declare-fun d!12823 () Bool)

(assert (=> d!12823 (= (apply!68 lt!26046 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1086 (getValueByKey!126 (toList!702 lt!26046) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2744 () Bool)

(assert (= bs!2744 d!12823))

(assert (=> bs!2744 m!56741))

(assert (=> bs!2744 m!56741))

(declare-fun m!56811 () Bool)

(assert (=> bs!2744 m!56811))

(assert (=> b!62416 d!12823))

(assert (=> bm!4843 d!12729))

(declare-fun d!12825 () Bool)

(declare-fun e!41285 () Bool)

(assert (=> d!12825 e!41285))

(declare-fun res!34492 () Bool)

(assert (=> d!12825 (=> (not res!34492) (not e!41285))))

(declare-fun lt!26455 () ListLongMap!1373)

(assert (=> d!12825 (= res!34492 (contains!690 lt!26455 (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!26454 () List!1439)

(assert (=> d!12825 (= lt!26455 (ListLongMap!1374 lt!26454))))

(declare-fun lt!26453 () Unit!1693)

(declare-fun lt!26452 () Unit!1693)

(assert (=> d!12825 (= lt!26453 lt!26452)))

(assert (=> d!12825 (= (getValueByKey!126 lt!26454 (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!131 (_2!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12825 (= lt!26452 (lemmaContainsTupThenGetReturnValue!43 lt!26454 (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12825 (= lt!26454 (insertStrictlySorted!46 (toList!702 call!4898) (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12825 (= (+!83 call!4898 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26455)))

(declare-fun b!62917 () Bool)

(declare-fun res!34493 () Bool)

(assert (=> b!62917 (=> (not res!34493) (not e!41285))))

(assert (=> b!62917 (= res!34493 (= (getValueByKey!126 (toList!702 lt!26455) (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!131 (_2!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!62918 () Bool)

(assert (=> b!62918 (= e!41285 (contains!693 (toList!702 lt!26455) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12825 res!34492) b!62917))

(assert (= (and b!62917 res!34493) b!62918))

(declare-fun m!56813 () Bool)

(assert (=> d!12825 m!56813))

(declare-fun m!56815 () Bool)

(assert (=> d!12825 m!56815))

(declare-fun m!56817 () Bool)

(assert (=> d!12825 m!56817))

(declare-fun m!56819 () Bool)

(assert (=> d!12825 m!56819))

(declare-fun m!56821 () Bool)

(assert (=> b!62917 m!56821))

(declare-fun m!56823 () Bool)

(assert (=> b!62918 m!56823))

(assert (=> b!62550 d!12825))

(declare-fun d!12827 () Bool)

(declare-fun res!34494 () Bool)

(declare-fun e!41286 () Bool)

(assert (=> d!12827 (=> (not res!34494) (not e!41286))))

(assert (=> d!12827 (= res!34494 (simpleValid!44 (_2!1031 lt!26150)))))

(assert (=> d!12827 (= (valid!262 (_2!1031 lt!26150)) e!41286)))

(declare-fun b!62919 () Bool)

(declare-fun res!34495 () Bool)

(assert (=> b!62919 (=> (not res!34495) (not e!41286))))

(assert (=> b!62919 (= res!34495 (= (arrayCountValidKeys!0 (_keys!3720 (_2!1031 lt!26150)) #b00000000000000000000000000000000 (size!2031 (_keys!3720 (_2!1031 lt!26150)))) (_size!367 (_2!1031 lt!26150))))))

(declare-fun b!62920 () Bool)

(declare-fun res!34496 () Bool)

(assert (=> b!62920 (=> (not res!34496) (not e!41286))))

(assert (=> b!62920 (= res!34496 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3720 (_2!1031 lt!26150)) (mask!5994 (_2!1031 lt!26150))))))

(declare-fun b!62921 () Bool)

(assert (=> b!62921 (= e!41286 (arrayNoDuplicates!0 (_keys!3720 (_2!1031 lt!26150)) #b00000000000000000000000000000000 Nil!1437))))

(assert (= (and d!12827 res!34494) b!62919))

(assert (= (and b!62919 res!34495) b!62920))

(assert (= (and b!62920 res!34496) b!62921))

(declare-fun m!56825 () Bool)

(assert (=> d!12827 m!56825))

(declare-fun m!56827 () Bool)

(assert (=> b!62919 m!56827))

(declare-fun m!56829 () Bool)

(assert (=> b!62920 m!56829))

(declare-fun m!56831 () Bool)

(assert (=> b!62921 m!56831))

(assert (=> d!12699 d!12827))

(assert (=> d!12699 d!12695))

(declare-fun d!12829 () Bool)

(declare-fun res!34497 () Bool)

(declare-fun e!41287 () Bool)

(assert (=> d!12829 (=> (not res!34497) (not e!41287))))

(assert (=> d!12829 (= res!34497 (simpleValid!44 (v!2419 (underlying!233 thiss!992))))))

(assert (=> d!12829 (= (valid!262 (v!2419 (underlying!233 thiss!992))) e!41287)))

(declare-fun b!62922 () Bool)

(declare-fun res!34498 () Bool)

(assert (=> b!62922 (=> (not res!34498) (not e!41287))))

(assert (=> b!62922 (= res!34498 (= (arrayCountValidKeys!0 (_keys!3720 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000000 (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992))))) (_size!367 (v!2419 (underlying!233 thiss!992)))))))

(declare-fun b!62923 () Bool)

(declare-fun res!34499 () Bool)

(assert (=> b!62923 (=> (not res!34499) (not e!41287))))

(assert (=> b!62923 (= res!34499 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (mask!5994 (v!2419 (underlying!233 thiss!992)))))))

(declare-fun b!62924 () Bool)

(assert (=> b!62924 (= e!41287 (arrayNoDuplicates!0 (_keys!3720 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000000 Nil!1437))))

(assert (= (and d!12829 res!34497) b!62922))

(assert (= (and b!62922 res!34498) b!62923))

(assert (= (and b!62923 res!34499) b!62924))

(declare-fun m!56833 () Bool)

(assert (=> d!12829 m!56833))

(declare-fun m!56835 () Bool)

(assert (=> b!62922 m!56835))

(declare-fun m!56837 () Bool)

(assert (=> b!62923 m!56837))

(declare-fun m!56839 () Bool)

(assert (=> b!62924 m!56839))

(assert (=> d!12673 d!12829))

(declare-fun mapNonEmpty!2955 () Bool)

(declare-fun mapRes!2955 () Bool)

(declare-fun tp!8139 () Bool)

(declare-fun e!41289 () Bool)

(assert (=> mapNonEmpty!2955 (= mapRes!2955 (and tp!8139 e!41289))))

(declare-fun mapValue!2955 () ValueCell!864)

(declare-fun mapRest!2955 () (Array (_ BitVec 32) ValueCell!864))

(declare-fun mapKey!2955 () (_ BitVec 32))

(assert (=> mapNonEmpty!2955 (= mapRest!2954 (store mapRest!2955 mapKey!2955 mapValue!2955))))

(declare-fun b!62925 () Bool)

(assert (=> b!62925 (= e!41289 tp_is_empty!2415)))

(declare-fun b!62926 () Bool)

(declare-fun e!41288 () Bool)

(assert (=> b!62926 (= e!41288 tp_is_empty!2415)))

(declare-fun mapIsEmpty!2955 () Bool)

(assert (=> mapIsEmpty!2955 mapRes!2955))

(declare-fun condMapEmpty!2955 () Bool)

(declare-fun mapDefault!2955 () ValueCell!864)

(assert (=> mapNonEmpty!2954 (= condMapEmpty!2955 (= mapRest!2954 ((as const (Array (_ BitVec 32) ValueCell!864)) mapDefault!2955)))))

(assert (=> mapNonEmpty!2954 (= tp!8138 (and e!41288 mapRes!2955))))

(assert (= (and mapNonEmpty!2954 condMapEmpty!2955) mapIsEmpty!2955))

(assert (= (and mapNonEmpty!2954 (not condMapEmpty!2955)) mapNonEmpty!2955))

(assert (= (and mapNonEmpty!2955 ((_ is ValueCellFull!864) mapValue!2955)) b!62925))

(assert (= (and mapNonEmpty!2954 ((_ is ValueCellFull!864) mapDefault!2955)) b!62926))

(declare-fun m!56841 () Bool)

(assert (=> mapNonEmpty!2955 m!56841))

(declare-fun mapNonEmpty!2956 () Bool)

(declare-fun mapRes!2956 () Bool)

(declare-fun tp!8140 () Bool)

(declare-fun e!41291 () Bool)

(assert (=> mapNonEmpty!2956 (= mapRes!2956 (and tp!8140 e!41291))))

(declare-fun mapValue!2956 () ValueCell!864)

(declare-fun mapKey!2956 () (_ BitVec 32))

(declare-fun mapRest!2956 () (Array (_ BitVec 32) ValueCell!864))

(assert (=> mapNonEmpty!2956 (= mapRest!2953 (store mapRest!2956 mapKey!2956 mapValue!2956))))

(declare-fun b!62927 () Bool)

(assert (=> b!62927 (= e!41291 tp_is_empty!2415)))

(declare-fun b!62928 () Bool)

(declare-fun e!41290 () Bool)

(assert (=> b!62928 (= e!41290 tp_is_empty!2415)))

(declare-fun mapIsEmpty!2956 () Bool)

(assert (=> mapIsEmpty!2956 mapRes!2956))

(declare-fun condMapEmpty!2956 () Bool)

(declare-fun mapDefault!2956 () ValueCell!864)

(assert (=> mapNonEmpty!2953 (= condMapEmpty!2956 (= mapRest!2953 ((as const (Array (_ BitVec 32) ValueCell!864)) mapDefault!2956)))))

(assert (=> mapNonEmpty!2953 (= tp!8137 (and e!41290 mapRes!2956))))

(assert (= (and mapNonEmpty!2953 condMapEmpty!2956) mapIsEmpty!2956))

(assert (= (and mapNonEmpty!2953 (not condMapEmpty!2956)) mapNonEmpty!2956))

(assert (= (and mapNonEmpty!2956 ((_ is ValueCellFull!864) mapValue!2956)) b!62927))

(assert (= (and mapNonEmpty!2953 ((_ is ValueCellFull!864) mapDefault!2956)) b!62928))

(declare-fun m!56843 () Bool)

(assert (=> mapNonEmpty!2956 m!56843))

(declare-fun b_lambda!2805 () Bool)

(assert (= b_lambda!2799 (or (and b!62272 b_free!1997 (= (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2088 newMap!16))) (and b!62266 b_free!1999) b_lambda!2805)))

(declare-fun b_lambda!2807 () Bool)

(assert (= b_lambda!2801 (or (and b!62272 b_free!1997 (= (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2088 newMap!16))) (and b!62266 b_free!1999) b_lambda!2807)))

(declare-fun b_lambda!2809 () Bool)

(assert (= b_lambda!2795 (or (and b!62272 b_free!1997) (and b!62266 b_free!1999 (= (defaultEntry!2088 newMap!16) (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))))) b_lambda!2809)))

(declare-fun b_lambda!2811 () Bool)

(assert (= b_lambda!2803 (or (and b!62272 b_free!1997 (= (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2088 newMap!16))) (and b!62266 b_free!1999) b_lambda!2811)))

(declare-fun b_lambda!2813 () Bool)

(assert (= b_lambda!2797 (or (and b!62272 b_free!1997) (and b!62266 b_free!1999 (= (defaultEntry!2088 newMap!16) (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))))) b_lambda!2813)))

(check-sat (not b!62679) (not b!62898) (not b!62738) (not bm!4963) (not b!62666) (not b!62855) (not bm!4952) b_and!3849 (not d!12743) (not d!12715) (not b!62794) tp_is_empty!2415 (not b!62695) (not d!12707) (not b!62672) (not b!62624) (not b!62894) (not b!62865) (not d!12821) (not b!62908) (not bm!4944) (not b!62593) (not d!12719) (not b!62703) (not b!62887) (not bm!4924) (not b!62804) (not b!62795) (not bm!4962) (not d!12733) (not b!62753) (not d!12791) (not b!62813) (not b!62904) (not b_lambda!2805) (not bm!4918) (not bm!4943) (not b!62924) (not b!62842) (not b!62704) (not d!12721) (not bm!4923) (not b!62918) (not b!62905) (not b!62674) (not b!62900) (not b!62719) (not mapNonEmpty!2956) (not d!12761) (not d!12785) (not b!62920) (not b_lambda!2807) (not b!62677) (not d!12705) (not b!62883) (not d!12795) (not b_lambda!2789) (not b!62590) (not d!12771) (not d!12809) b_and!3847 (not bm!4929) (not b!62917) (not b!62673) (not b!62700) (not d!12729) (not d!12711) (not b!62915) (not b!62757) (not b!62669) (not b!62711) (not b!62875) (not b!62885) (not b_next!1999) (not b!62862) (not b!62803) (not b!62890) (not d!12823) (not b!62640) (not d!12787) (not d!12783) (not b!62718) (not bm!4965) (not b_next!1997) (not bm!4931) (not b!62684) (not b!62888) (not bm!4932) (not d!12713) (not d!12779) (not b!62630) (not b!62685) (not b!62639) (not d!12731) (not d!12725) (not b!62819) (not b!62706) (not b_lambda!2809) (not b!62742) (not b!62919) (not b!62680) (not bm!4950) (not b!62860) (not b!62922) (not b!62805) (not b!62716) (not b!62713) (not b!62629) (not bm!4957) (not d!12807) (not d!12739) (not b_lambda!2793) (not b!62755) (not d!12709) (not d!12741) (not b!62884) (not b!62893) (not b!62634) (not bm!4955) (not b!62858) (not d!12825) (not d!12717) (not bm!4960) (not b!62631) (not b_lambda!2811) (not d!12763) (not d!12799) (not d!12757) (not b!62726) (not b!62622) (not b!62907) (not d!12767) (not b!62751) (not b!62921) (not d!12811) (not bm!4954) (not b!62868) (not b!62892) (not d!12759) (not b!62623) (not d!12753) (not b!62667) (not b!62743) (not b!62632) (not d!12827) (not d!12815) (not b!62745) (not bm!4947) (not d!12813) (not mapNonEmpty!2955) (not b!62864) (not b!62682) (not b!62882) (not b!62841) (not b!62923) (not d!12735) (not b!62902) (not b!62715) (not d!12723) (not bm!4927) (not b!62709) (not b!62683) (not d!12737) (not b!62696) (not d!12745) (not b!62756) (not b!62675) (not d!12755) (not bm!4958) (not bm!4934) (not b_lambda!2813) (not d!12727) (not b!62627) (not d!12829) (not d!12801) (not b!62867) (not d!12749) (not b!62838) (not b!62626) (not b!62802) (not d!12789) (not bm!4946) (not b!62840))
(check-sat b_and!3847 b_and!3849 (not b_next!1997) (not b_next!1999))
(get-model)

(declare-fun d!12831 () Bool)

(assert (=> d!12831 (= (validKeyInArray!0 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) (and (not (= (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62590 d!12831))

(declare-fun b!62930 () Bool)

(declare-fun e!41292 () Option!132)

(declare-fun e!41293 () Option!132)

(assert (=> b!62930 (= e!41292 e!41293)))

(declare-fun c!8434 () Bool)

(assert (=> b!62930 (= c!8434 (and ((_ is Cons!1435) (toList!702 lt!26281)) (not (= (_1!1030 (h!2018 (toList!702 lt!26281))) (_1!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun b!62929 () Bool)

(assert (=> b!62929 (= e!41292 (Some!131 (_2!1030 (h!2018 (toList!702 lt!26281)))))))

(declare-fun d!12833 () Bool)

(declare-fun c!8433 () Bool)

(assert (=> d!12833 (= c!8433 (and ((_ is Cons!1435) (toList!702 lt!26281)) (= (_1!1030 (h!2018 (toList!702 lt!26281))) (_1!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!12833 (= (getValueByKey!126 (toList!702 lt!26281) (_1!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!41292)))

(declare-fun b!62931 () Bool)

(assert (=> b!62931 (= e!41293 (getValueByKey!126 (t!4833 (toList!702 lt!26281)) (_1!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!62932 () Bool)

(assert (=> b!62932 (= e!41293 None!130)))

(assert (= (and d!12833 c!8433) b!62929))

(assert (= (and d!12833 (not c!8433)) b!62930))

(assert (= (and b!62930 c!8434) b!62931))

(assert (= (and b!62930 (not c!8434)) b!62932))

(declare-fun m!56845 () Bool)

(assert (=> b!62931 m!56845))

(assert (=> b!62756 d!12833))

(declare-fun b!62934 () Bool)

(declare-fun e!41294 () Option!132)

(declare-fun e!41295 () Option!132)

(assert (=> b!62934 (= e!41294 e!41295)))

(declare-fun c!8436 () Bool)

(assert (=> b!62934 (= c!8436 (and ((_ is Cons!1435) (toList!702 lt!26421)) (not (= (_1!1030 (h!2018 (toList!702 lt!26421))) (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))))

(declare-fun b!62933 () Bool)

(assert (=> b!62933 (= e!41294 (Some!131 (_2!1030 (h!2018 (toList!702 lt!26421)))))))

(declare-fun d!12835 () Bool)

(declare-fun c!8435 () Bool)

(assert (=> d!12835 (= c!8435 (and ((_ is Cons!1435) (toList!702 lt!26421)) (= (_1!1030 (h!2018 (toList!702 lt!26421))) (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> d!12835 (= (getValueByKey!126 (toList!702 lt!26421) (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) e!41294)))

(declare-fun b!62935 () Bool)

(assert (=> b!62935 (= e!41295 (getValueByKey!126 (t!4833 (toList!702 lt!26421)) (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!62936 () Bool)

(assert (=> b!62936 (= e!41295 None!130)))

(assert (= (and d!12835 c!8435) b!62933))

(assert (= (and d!12835 (not c!8435)) b!62934))

(assert (= (and b!62934 c!8436) b!62935))

(assert (= (and b!62934 (not c!8436)) b!62936))

(declare-fun m!56847 () Bool)

(assert (=> b!62935 m!56847))

(assert (=> b!62883 d!12835))

(declare-fun d!12837 () Bool)

(declare-fun lt!26456 () Bool)

(assert (=> d!12837 (= lt!26456 (select (content!67 Nil!1437) (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!41297 () Bool)

(assert (=> d!12837 (= lt!26456 e!41297)))

(declare-fun res!34501 () Bool)

(assert (=> d!12837 (=> (not res!34501) (not e!41297))))

(assert (=> d!12837 (= res!34501 ((_ is Cons!1436) Nil!1437))))

(assert (=> d!12837 (= (contains!692 Nil!1437 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) lt!26456)))

(declare-fun b!62937 () Bool)

(declare-fun e!41296 () Bool)

(assert (=> b!62937 (= e!41297 e!41296)))

(declare-fun res!34500 () Bool)

(assert (=> b!62937 (=> res!34500 e!41296)))

(assert (=> b!62937 (= res!34500 (= (h!2019 Nil!1437) (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62938 () Bool)

(assert (=> b!62938 (= e!41296 (contains!692 (t!4834 Nil!1437) (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!12837 res!34501) b!62937))

(assert (= (and b!62937 (not res!34500)) b!62938))

(assert (=> d!12837 m!56719))

(assert (=> d!12837 m!56285))

(declare-fun m!56849 () Bool)

(assert (=> d!12837 m!56849))

(assert (=> b!62938 m!56285))

(declare-fun m!56851 () Bool)

(assert (=> b!62938 m!56851))

(assert (=> b!62842 d!12837))

(declare-fun d!12839 () Bool)

(assert (=> d!12839 (= (isDefined!79 (getValueByKey!126 (toList!702 lt!26046) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (not (isEmpty!300 (getValueByKey!126 (toList!702 lt!26046) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun bs!2745 () Bool)

(assert (= bs!2745 d!12839))

(assert (=> bs!2745 m!56331))

(declare-fun m!56853 () Bool)

(assert (=> bs!2745 m!56853))

(assert (=> b!62629 d!12839))

(declare-fun b!62940 () Bool)

(declare-fun e!41298 () Option!132)

(declare-fun e!41299 () Option!132)

(assert (=> b!62940 (= e!41298 e!41299)))

(declare-fun c!8438 () Bool)

(assert (=> b!62940 (= c!8438 (and ((_ is Cons!1435) (toList!702 lt!26046)) (not (= (_1!1030 (h!2018 (toList!702 lt!26046))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun b!62939 () Bool)

(assert (=> b!62939 (= e!41298 (Some!131 (_2!1030 (h!2018 (toList!702 lt!26046)))))))

(declare-fun c!8437 () Bool)

(declare-fun d!12841 () Bool)

(assert (=> d!12841 (= c!8437 (and ((_ is Cons!1435) (toList!702 lt!26046)) (= (_1!1030 (h!2018 (toList!702 lt!26046))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!12841 (= (getValueByKey!126 (toList!702 lt!26046) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!41298)))

(declare-fun b!62941 () Bool)

(assert (=> b!62941 (= e!41299 (getValueByKey!126 (t!4833 (toList!702 lt!26046)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!62942 () Bool)

(assert (=> b!62942 (= e!41299 None!130)))

(assert (= (and d!12841 c!8437) b!62939))

(assert (= (and d!12841 (not c!8437)) b!62940))

(assert (= (and b!62940 c!8438) b!62941))

(assert (= (and b!62940 (not c!8438)) b!62942))

(assert (=> b!62941 m!56139))

(declare-fun m!56855 () Bool)

(assert (=> b!62941 m!56855))

(assert (=> b!62629 d!12841))

(declare-fun d!12843 () Bool)

(assert (=> d!12843 (= (get!1086 (getValueByKey!126 (toList!702 lt!26046) #b1000000000000000000000000000000000000000000000000000000000000000)) (v!2423 (getValueByKey!126 (toList!702 lt!26046) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12823 d!12843))

(declare-fun b!62944 () Bool)

(declare-fun e!41300 () Option!132)

(declare-fun e!41301 () Option!132)

(assert (=> b!62944 (= e!41300 e!41301)))

(declare-fun c!8440 () Bool)

(assert (=> b!62944 (= c!8440 (and ((_ is Cons!1435) (toList!702 lt!26046)) (not (= (_1!1030 (h!2018 (toList!702 lt!26046))) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!62943 () Bool)

(assert (=> b!62943 (= e!41300 (Some!131 (_2!1030 (h!2018 (toList!702 lt!26046)))))))

(declare-fun d!12845 () Bool)

(declare-fun c!8439 () Bool)

(assert (=> d!12845 (= c!8439 (and ((_ is Cons!1435) (toList!702 lt!26046)) (= (_1!1030 (h!2018 (toList!702 lt!26046))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12845 (= (getValueByKey!126 (toList!702 lt!26046) #b1000000000000000000000000000000000000000000000000000000000000000) e!41300)))

(declare-fun b!62945 () Bool)

(assert (=> b!62945 (= e!41301 (getValueByKey!126 (t!4833 (toList!702 lt!26046)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62946 () Bool)

(assert (=> b!62946 (= e!41301 None!130)))

(assert (= (and d!12845 c!8439) b!62943))

(assert (= (and d!12845 (not c!8439)) b!62944))

(assert (= (and b!62944 c!8440) b!62945))

(assert (= (and b!62944 (not c!8440)) b!62946))

(declare-fun m!56857 () Bool)

(assert (=> b!62945 m!56857))

(assert (=> d!12823 d!12845))

(declare-fun d!12847 () Bool)

(assert (=> d!12847 (= (isDefined!79 (getValueByKey!126 (toList!702 call!4912) (ite c!8334 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (select (arr!1799 (_keys!3720 newMap!16)) (index!3042 lt!26125))))) (not (isEmpty!300 (getValueByKey!126 (toList!702 call!4912) (ite c!8334 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (select (arr!1799 (_keys!3720 newMap!16)) (index!3042 lt!26125)))))))))

(declare-fun bs!2746 () Bool)

(assert (= bs!2746 d!12847))

(assert (=> bs!2746 m!56323))

(declare-fun m!56859 () Bool)

(assert (=> bs!2746 m!56859))

(assert (=> b!62626 d!12847))

(declare-fun b!62948 () Bool)

(declare-fun e!41302 () Option!132)

(declare-fun e!41303 () Option!132)

(assert (=> b!62948 (= e!41302 e!41303)))

(declare-fun c!8442 () Bool)

(assert (=> b!62948 (= c!8442 (and ((_ is Cons!1435) (toList!702 call!4912)) (not (= (_1!1030 (h!2018 (toList!702 call!4912))) (ite c!8334 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (select (arr!1799 (_keys!3720 newMap!16)) (index!3042 lt!26125)))))))))

(declare-fun b!62947 () Bool)

(assert (=> b!62947 (= e!41302 (Some!131 (_2!1030 (h!2018 (toList!702 call!4912)))))))

(declare-fun d!12849 () Bool)

(declare-fun c!8441 () Bool)

(assert (=> d!12849 (= c!8441 (and ((_ is Cons!1435) (toList!702 call!4912)) (= (_1!1030 (h!2018 (toList!702 call!4912))) (ite c!8334 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (select (arr!1799 (_keys!3720 newMap!16)) (index!3042 lt!26125))))))))

(assert (=> d!12849 (= (getValueByKey!126 (toList!702 call!4912) (ite c!8334 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (select (arr!1799 (_keys!3720 newMap!16)) (index!3042 lt!26125)))) e!41302)))

(declare-fun b!62949 () Bool)

(assert (=> b!62949 (= e!41303 (getValueByKey!126 (t!4833 (toList!702 call!4912)) (ite c!8334 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (select (arr!1799 (_keys!3720 newMap!16)) (index!3042 lt!26125)))))))

(declare-fun b!62950 () Bool)

(assert (=> b!62950 (= e!41303 None!130)))

(assert (= (and d!12849 c!8441) b!62947))

(assert (= (and d!12849 (not c!8441)) b!62948))

(assert (= (and b!62948 c!8442) b!62949))

(assert (= (and b!62948 (not c!8442)) b!62950))

(declare-fun m!56861 () Bool)

(assert (=> b!62949 m!56861))

(assert (=> b!62626 d!12849))

(declare-fun d!12851 () Bool)

(declare-fun e!41304 () Bool)

(assert (=> d!12851 e!41304))

(declare-fun res!34502 () Bool)

(assert (=> d!12851 (=> (not res!34502) (not e!41304))))

(declare-fun lt!26460 () ListLongMap!1373)

(assert (=> d!12851 (= res!34502 (contains!690 lt!26460 (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!26459 () List!1439)

(assert (=> d!12851 (= lt!26460 (ListLongMap!1374 lt!26459))))

(declare-fun lt!26458 () Unit!1693)

(declare-fun lt!26457 () Unit!1693)

(assert (=> d!12851 (= lt!26458 lt!26457)))

(assert (=> d!12851 (= (getValueByKey!126 lt!26459 (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!131 (_2!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12851 (= lt!26457 (lemmaContainsTupThenGetReturnValue!43 lt!26459 (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12851 (= lt!26459 (insertStrictlySorted!46 (toList!702 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12851 (= (+!83 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26460)))

(declare-fun b!62951 () Bool)

(declare-fun res!34503 () Bool)

(assert (=> b!62951 (=> (not res!34503) (not e!41304))))

(assert (=> b!62951 (= res!34503 (= (getValueByKey!126 (toList!702 lt!26460) (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!131 (_2!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!62952 () Bool)

(assert (=> b!62952 (= e!41304 (contains!693 (toList!702 lt!26460) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12851 res!34502) b!62951))

(assert (= (and b!62951 res!34503) b!62952))

(declare-fun m!56863 () Bool)

(assert (=> d!12851 m!56863))

(declare-fun m!56865 () Bool)

(assert (=> d!12851 m!56865))

(declare-fun m!56867 () Bool)

(assert (=> d!12851 m!56867))

(declare-fun m!56869 () Bool)

(assert (=> d!12851 m!56869))

(declare-fun m!56871 () Bool)

(assert (=> b!62951 m!56871))

(declare-fun m!56873 () Bool)

(assert (=> b!62952 m!56873))

(assert (=> b!62703 d!12851))

(assert (=> b!62703 d!12759))

(declare-fun b!62953 () Bool)

(declare-fun e!41314 () Bool)

(declare-fun e!41317 () Bool)

(assert (=> b!62953 (= e!41314 e!41317)))

(declare-fun res!34509 () Bool)

(declare-fun call!4974 () Bool)

(assert (=> b!62953 (= res!34509 call!4974)))

(assert (=> b!62953 (=> (not res!34509) (not e!41317))))

(declare-fun b!62954 () Bool)

(declare-fun res!34510 () Bool)

(declare-fun e!41315 () Bool)

(assert (=> b!62954 (=> (not res!34510) (not e!41315))))

(assert (=> b!62954 (= res!34510 e!41314)))

(declare-fun c!8445 () Bool)

(assert (=> b!62954 (= c!8445 (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!62955 () Bool)

(declare-fun e!41309 () Unit!1693)

(declare-fun lt!26464 () Unit!1693)

(assert (=> b!62955 (= e!41309 lt!26464)))

(declare-fun lt!26468 () ListLongMap!1373)

(assert (=> b!62955 (= lt!26468 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (index!3042 lt!26125) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26465 () (_ BitVec 64))

(assert (=> b!62955 (= lt!26465 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26474 () (_ BitVec 64))

(assert (=> b!62955 (= lt!26474 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26478 () Unit!1693)

(assert (=> b!62955 (= lt!26478 (addStillContains!44 lt!26468 lt!26465 (zeroValue!2000 newMap!16) lt!26474))))

(assert (=> b!62955 (contains!690 (+!83 lt!26468 (tuple2!2039 lt!26465 (zeroValue!2000 newMap!16))) lt!26474)))

(declare-fun lt!26476 () Unit!1693)

(assert (=> b!62955 (= lt!26476 lt!26478)))

(declare-fun lt!26471 () ListLongMap!1373)

(assert (=> b!62955 (= lt!26471 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (index!3042 lt!26125) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26463 () (_ BitVec 64))

(assert (=> b!62955 (= lt!26463 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26475 () (_ BitVec 64))

(assert (=> b!62955 (= lt!26475 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26467 () Unit!1693)

(assert (=> b!62955 (= lt!26467 (addApplyDifferent!44 lt!26471 lt!26463 (minValue!2000 newMap!16) lt!26475))))

(assert (=> b!62955 (= (apply!68 (+!83 lt!26471 (tuple2!2039 lt!26463 (minValue!2000 newMap!16))) lt!26475) (apply!68 lt!26471 lt!26475))))

(declare-fun lt!26477 () Unit!1693)

(assert (=> b!62955 (= lt!26477 lt!26467)))

(declare-fun lt!26472 () ListLongMap!1373)

(assert (=> b!62955 (= lt!26472 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (index!3042 lt!26125) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26482 () (_ BitVec 64))

(assert (=> b!62955 (= lt!26482 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26479 () (_ BitVec 64))

(assert (=> b!62955 (= lt!26479 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26462 () Unit!1693)

(assert (=> b!62955 (= lt!26462 (addApplyDifferent!44 lt!26472 lt!26482 (zeroValue!2000 newMap!16) lt!26479))))

(assert (=> b!62955 (= (apply!68 (+!83 lt!26472 (tuple2!2039 lt!26482 (zeroValue!2000 newMap!16))) lt!26479) (apply!68 lt!26472 lt!26479))))

(declare-fun lt!26461 () Unit!1693)

(assert (=> b!62955 (= lt!26461 lt!26462)))

(declare-fun lt!26466 () ListLongMap!1373)

(assert (=> b!62955 (= lt!26466 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (index!3042 lt!26125) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26481 () (_ BitVec 64))

(assert (=> b!62955 (= lt!26481 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26469 () (_ BitVec 64))

(assert (=> b!62955 (= lt!26469 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!62955 (= lt!26464 (addApplyDifferent!44 lt!26466 lt!26481 (minValue!2000 newMap!16) lt!26469))))

(assert (=> b!62955 (= (apply!68 (+!83 lt!26466 (tuple2!2039 lt!26481 (minValue!2000 newMap!16))) lt!26469) (apply!68 lt!26466 lt!26469))))

(declare-fun b!62956 () Bool)

(assert (=> b!62956 (= e!41314 (not call!4974))))

(declare-fun c!8448 () Bool)

(declare-fun c!8446 () Bool)

(declare-fun call!4969 () ListLongMap!1373)

(declare-fun call!4972 () ListLongMap!1373)

(declare-fun call!4975 () ListLongMap!1373)

(declare-fun bm!4967 () Bool)

(declare-fun call!4970 () ListLongMap!1373)

(assert (=> bm!4967 (= call!4970 (+!83 (ite c!8446 call!4972 (ite c!8448 call!4969 call!4975)) (ite (or c!8446 c!8448) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))

(declare-fun bm!4968 () Bool)

(assert (=> bm!4968 (= call!4975 call!4969)))

(declare-fun b!62957 () Bool)

(declare-fun e!41313 () Bool)

(declare-fun e!41306 () Bool)

(assert (=> b!62957 (= e!41313 e!41306)))

(declare-fun res!34504 () Bool)

(assert (=> b!62957 (=> (not res!34504) (not e!41306))))

(declare-fun lt!26470 () ListLongMap!1373)

(assert (=> b!62957 (= res!34504 (contains!690 lt!26470 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!62957 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(declare-fun bm!4969 () Bool)

(declare-fun call!4973 () Bool)

(assert (=> bm!4969 (= call!4973 (contains!690 lt!26470 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62958 () Bool)

(declare-fun e!41307 () Bool)

(assert (=> b!62958 (= e!41307 (not call!4973))))

(declare-fun bm!4970 () Bool)

(assert (=> bm!4970 (= call!4974 (contains!690 lt!26470 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4971 () Bool)

(declare-fun call!4971 () ListLongMap!1373)

(assert (=> bm!4971 (= call!4971 call!4970)))

(declare-fun b!62959 () Bool)

(declare-fun e!41310 () ListLongMap!1373)

(assert (=> b!62959 (= e!41310 (+!83 call!4970 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))

(declare-fun b!62960 () Bool)

(declare-fun res!34508 () Bool)

(assert (=> b!62960 (=> (not res!34508) (not e!41315))))

(assert (=> b!62960 (= res!34508 e!41313)))

(declare-fun res!34507 () Bool)

(assert (=> b!62960 (=> res!34507 e!41313)))

(declare-fun e!41312 () Bool)

(assert (=> b!62960 (= res!34507 (not e!41312))))

(declare-fun res!34505 () Bool)

(assert (=> b!62960 (=> (not res!34505) (not e!41312))))

(assert (=> b!62960 (= res!34505 (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(declare-fun d!12853 () Bool)

(assert (=> d!12853 e!41315))

(declare-fun res!34506 () Bool)

(assert (=> d!12853 (=> (not res!34506) (not e!41315))))

(assert (=> d!12853 (= res!34506 (or (bvsge #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))))

(declare-fun lt!26480 () ListLongMap!1373)

(assert (=> d!12853 (= lt!26470 lt!26480)))

(declare-fun lt!26473 () Unit!1693)

(assert (=> d!12853 (= lt!26473 e!41309)))

(declare-fun c!8444 () Bool)

(declare-fun e!41316 () Bool)

(assert (=> d!12853 (= c!8444 e!41316)))

(declare-fun res!34511 () Bool)

(assert (=> d!12853 (=> (not res!34511) (not e!41316))))

(assert (=> d!12853 (= res!34511 (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(assert (=> d!12853 (= lt!26480 e!41310)))

(assert (=> d!12853 (= c!8446 (and (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12853 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!12853 (= (getCurrentListMap!406 (_keys!3720 newMap!16) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (index!3042 lt!26125) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) lt!26470)))

(declare-fun bm!4966 () Bool)

(assert (=> bm!4966 (= call!4969 call!4972)))

(declare-fun b!62961 () Bool)

(assert (=> b!62961 (= e!41317 (= (apply!68 lt!26470 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2000 newMap!16)))))

(declare-fun b!62962 () Bool)

(declare-fun e!41311 () Bool)

(assert (=> b!62962 (= e!41311 (= (apply!68 lt!26470 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2000 newMap!16)))))

(declare-fun b!62963 () Bool)

(assert (=> b!62963 (= e!41307 e!41311)))

(declare-fun res!34512 () Bool)

(assert (=> b!62963 (= res!34512 call!4973)))

(assert (=> b!62963 (=> (not res!34512) (not e!41311))))

(declare-fun b!62964 () Bool)

(assert (=> b!62964 (= e!41312 (validKeyInArray!0 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62965 () Bool)

(assert (=> b!62965 (= e!41316 (validKeyInArray!0 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62966 () Bool)

(declare-fun Unit!1716 () Unit!1693)

(assert (=> b!62966 (= e!41309 Unit!1716)))

(declare-fun b!62967 () Bool)

(declare-fun e!41308 () ListLongMap!1373)

(assert (=> b!62967 (= e!41308 call!4971)))

(declare-fun bm!4972 () Bool)

(assert (=> bm!4972 (= call!4972 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (index!3042 lt!26125) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun b!62968 () Bool)

(declare-fun e!41305 () ListLongMap!1373)

(assert (=> b!62968 (= e!41305 call!4975)))

(declare-fun b!62969 () Bool)

(assert (=> b!62969 (= e!41315 e!41307)))

(declare-fun c!8447 () Bool)

(assert (=> b!62969 (= c!8447 (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!62970 () Bool)

(declare-fun c!8443 () Bool)

(assert (=> b!62970 (= c!8443 (and (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!62970 (= e!41308 e!41305)))

(declare-fun b!62971 () Bool)

(assert (=> b!62971 (= e!41305 call!4971)))

(declare-fun b!62972 () Bool)

(assert (=> b!62972 (= e!41306 (= (apply!68 lt!26470 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) (get!1082 (select (arr!1800 (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (index!3042 lt!26125) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62972 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2032 (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (index!3042 lt!26125) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16))))))))

(assert (=> b!62972 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(declare-fun b!62973 () Bool)

(assert (=> b!62973 (= e!41310 e!41308)))

(assert (=> b!62973 (= c!8448 (and (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!12853 c!8446) b!62959))

(assert (= (and d!12853 (not c!8446)) b!62973))

(assert (= (and b!62973 c!8448) b!62967))

(assert (= (and b!62973 (not c!8448)) b!62970))

(assert (= (and b!62970 c!8443) b!62971))

(assert (= (and b!62970 (not c!8443)) b!62968))

(assert (= (or b!62971 b!62968) bm!4968))

(assert (= (or b!62967 bm!4968) bm!4966))

(assert (= (or b!62967 b!62971) bm!4971))

(assert (= (or b!62959 bm!4966) bm!4972))

(assert (= (or b!62959 bm!4971) bm!4967))

(assert (= (and d!12853 res!34511) b!62965))

(assert (= (and d!12853 c!8444) b!62955))

(assert (= (and d!12853 (not c!8444)) b!62966))

(assert (= (and d!12853 res!34506) b!62960))

(assert (= (and b!62960 res!34505) b!62964))

(assert (= (and b!62960 (not res!34507)) b!62957))

(assert (= (and b!62957 res!34504) b!62972))

(assert (= (and b!62960 res!34508) b!62954))

(assert (= (and b!62954 c!8445) b!62953))

(assert (= (and b!62954 (not c!8445)) b!62956))

(assert (= (and b!62953 res!34509) b!62961))

(assert (= (or b!62953 b!62956) bm!4970))

(assert (= (and b!62954 res!34510) b!62969))

(assert (= (and b!62969 c!8447) b!62963))

(assert (= (and b!62969 (not c!8447)) b!62958))

(assert (= (and b!62963 res!34512) b!62962))

(assert (= (or b!62963 b!62958) bm!4969))

(declare-fun b_lambda!2815 () Bool)

(assert (=> (not b_lambda!2815) (not b!62972)))

(assert (=> b!62972 t!4841))

(declare-fun b_and!3851 () Bool)

(assert (= b_and!3847 (and (=> t!4841 result!2459) b_and!3851)))

(assert (=> b!62972 t!4843))

(declare-fun b_and!3853 () Bool)

(assert (= b_and!3849 (and (=> t!4843 result!2461) b_and!3853)))

(assert (=> b!62965 m!56285))

(assert (=> b!62965 m!56285))

(assert (=> b!62965 m!56287))

(declare-fun m!56875 () Bool)

(assert (=> b!62955 m!56875))

(declare-fun m!56877 () Bool)

(assert (=> b!62955 m!56877))

(declare-fun m!56879 () Bool)

(assert (=> b!62955 m!56879))

(declare-fun m!56881 () Bool)

(assert (=> b!62955 m!56881))

(declare-fun m!56883 () Bool)

(assert (=> b!62955 m!56883))

(declare-fun m!56885 () Bool)

(assert (=> b!62955 m!56885))

(declare-fun m!56887 () Bool)

(assert (=> b!62955 m!56887))

(declare-fun m!56889 () Bool)

(assert (=> b!62955 m!56889))

(declare-fun m!56891 () Bool)

(assert (=> b!62955 m!56891))

(declare-fun m!56893 () Bool)

(assert (=> b!62955 m!56893))

(declare-fun m!56895 () Bool)

(assert (=> b!62955 m!56895))

(declare-fun m!56897 () Bool)

(assert (=> b!62955 m!56897))

(declare-fun m!56899 () Bool)

(assert (=> b!62955 m!56899))

(declare-fun m!56901 () Bool)

(assert (=> b!62955 m!56901))

(assert (=> b!62955 m!56285))

(assert (=> b!62955 m!56899))

(declare-fun m!56903 () Bool)

(assert (=> b!62955 m!56903))

(assert (=> b!62955 m!56895))

(assert (=> b!62955 m!56881))

(declare-fun m!56905 () Bool)

(assert (=> b!62955 m!56905))

(assert (=> b!62955 m!56889))

(declare-fun m!56907 () Bool)

(assert (=> b!62961 m!56907))

(assert (=> bm!4972 m!56901))

(assert (=> b!62964 m!56285))

(assert (=> b!62964 m!56285))

(assert (=> b!62964 m!56287))

(assert (=> d!12853 m!56299))

(assert (=> b!62972 m!56285))

(declare-fun m!56909 () Bool)

(assert (=> b!62972 m!56909))

(assert (=> b!62972 m!56515))

(declare-fun m!56911 () Bool)

(assert (=> b!62972 m!56911))

(assert (=> b!62972 m!56285))

(assert (=> b!62972 m!56911))

(assert (=> b!62972 m!56515))

(declare-fun m!56913 () Bool)

(assert (=> b!62972 m!56913))

(assert (=> b!62957 m!56285))

(assert (=> b!62957 m!56285))

(declare-fun m!56915 () Bool)

(assert (=> b!62957 m!56915))

(declare-fun m!56917 () Bool)

(assert (=> b!62962 m!56917))

(declare-fun m!56919 () Bool)

(assert (=> bm!4967 m!56919))

(declare-fun m!56921 () Bool)

(assert (=> b!62959 m!56921))

(declare-fun m!56923 () Bool)

(assert (=> bm!4970 m!56923))

(declare-fun m!56925 () Bool)

(assert (=> bm!4969 m!56925))

(assert (=> b!62703 d!12853))

(declare-fun d!12855 () Bool)

(assert (=> d!12855 (= (apply!68 (+!83 lt!26440 (tuple2!2039 lt!26432 (minValue!2000 newMap!16))) lt!26444) (get!1086 (getValueByKey!126 (toList!702 (+!83 lt!26440 (tuple2!2039 lt!26432 (minValue!2000 newMap!16)))) lt!26444)))))

(declare-fun bs!2747 () Bool)

(assert (= bs!2747 d!12855))

(declare-fun m!56927 () Bool)

(assert (=> bs!2747 m!56927))

(assert (=> bs!2747 m!56927))

(declare-fun m!56929 () Bool)

(assert (=> bs!2747 m!56929))

(assert (=> b!62898 d!12855))

(declare-fun d!12857 () Bool)

(assert (=> d!12857 (= (apply!68 (+!83 lt!26441 (tuple2!2039 lt!26451 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)))) lt!26448) (get!1086 (getValueByKey!126 (toList!702 (+!83 lt!26441 (tuple2!2039 lt!26451 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))))) lt!26448)))))

(declare-fun bs!2748 () Bool)

(assert (= bs!2748 d!12857))

(declare-fun m!56931 () Bool)

(assert (=> bs!2748 m!56931))

(assert (=> bs!2748 m!56931))

(declare-fun m!56933 () Bool)

(assert (=> bs!2748 m!56933))

(assert (=> b!62898 d!12857))

(declare-fun d!12859 () Bool)

(assert (=> d!12859 (= (apply!68 lt!26435 lt!26438) (get!1086 (getValueByKey!126 (toList!702 lt!26435) lt!26438)))))

(declare-fun bs!2749 () Bool)

(assert (= bs!2749 d!12859))

(declare-fun m!56935 () Bool)

(assert (=> bs!2749 m!56935))

(assert (=> bs!2749 m!56935))

(declare-fun m!56937 () Bool)

(assert (=> bs!2749 m!56937))

(assert (=> b!62898 d!12859))

(declare-fun d!12861 () Bool)

(declare-fun e!41318 () Bool)

(assert (=> d!12861 e!41318))

(declare-fun res!34513 () Bool)

(assert (=> d!12861 (=> (not res!34513) (not e!41318))))

(declare-fun lt!26486 () ListLongMap!1373)

(assert (=> d!12861 (= res!34513 (contains!690 lt!26486 (_1!1030 (tuple2!2039 lt!26451 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))))))))

(declare-fun lt!26485 () List!1439)

(assert (=> d!12861 (= lt!26486 (ListLongMap!1374 lt!26485))))

(declare-fun lt!26484 () Unit!1693)

(declare-fun lt!26483 () Unit!1693)

(assert (=> d!12861 (= lt!26484 lt!26483)))

(assert (=> d!12861 (= (getValueByKey!126 lt!26485 (_1!1030 (tuple2!2039 lt!26451 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))))) (Some!131 (_2!1030 (tuple2!2039 lt!26451 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))))))))

(assert (=> d!12861 (= lt!26483 (lemmaContainsTupThenGetReturnValue!43 lt!26485 (_1!1030 (tuple2!2039 lt!26451 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)))) (_2!1030 (tuple2!2039 lt!26451 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))))))))

(assert (=> d!12861 (= lt!26485 (insertStrictlySorted!46 (toList!702 lt!26441) (_1!1030 (tuple2!2039 lt!26451 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)))) (_2!1030 (tuple2!2039 lt!26451 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))))))))

(assert (=> d!12861 (= (+!83 lt!26441 (tuple2!2039 lt!26451 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)))) lt!26486)))

(declare-fun b!62974 () Bool)

(declare-fun res!34514 () Bool)

(assert (=> b!62974 (=> (not res!34514) (not e!41318))))

(assert (=> b!62974 (= res!34514 (= (getValueByKey!126 (toList!702 lt!26486) (_1!1030 (tuple2!2039 lt!26451 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))))) (Some!131 (_2!1030 (tuple2!2039 lt!26451 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)))))))))

(declare-fun b!62975 () Bool)

(assert (=> b!62975 (= e!41318 (contains!693 (toList!702 lt!26486) (tuple2!2039 lt!26451 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)))))))

(assert (= (and d!12861 res!34513) b!62974))

(assert (= (and b!62974 res!34514) b!62975))

(declare-fun m!56939 () Bool)

(assert (=> d!12861 m!56939))

(declare-fun m!56941 () Bool)

(assert (=> d!12861 m!56941))

(declare-fun m!56943 () Bool)

(assert (=> d!12861 m!56943))

(declare-fun m!56945 () Bool)

(assert (=> d!12861 m!56945))

(declare-fun m!56947 () Bool)

(assert (=> b!62974 m!56947))

(declare-fun m!56949 () Bool)

(assert (=> b!62975 m!56949))

(assert (=> b!62898 d!12861))

(declare-fun d!12863 () Bool)

(declare-fun e!41320 () Bool)

(assert (=> d!12863 e!41320))

(declare-fun res!34515 () Bool)

(assert (=> d!12863 (=> res!34515 e!41320)))

(declare-fun lt!26490 () Bool)

(assert (=> d!12863 (= res!34515 (not lt!26490))))

(declare-fun lt!26489 () Bool)

(assert (=> d!12863 (= lt!26490 lt!26489)))

(declare-fun lt!26487 () Unit!1693)

(declare-fun e!41319 () Unit!1693)

(assert (=> d!12863 (= lt!26487 e!41319)))

(declare-fun c!8449 () Bool)

(assert (=> d!12863 (= c!8449 lt!26489)))

(assert (=> d!12863 (= lt!26489 (containsKey!130 (toList!702 (+!83 lt!26437 (tuple2!2039 lt!26434 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))))) lt!26443))))

(assert (=> d!12863 (= (contains!690 (+!83 lt!26437 (tuple2!2039 lt!26434 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)))) lt!26443) lt!26490)))

(declare-fun b!62976 () Bool)

(declare-fun lt!26488 () Unit!1693)

(assert (=> b!62976 (= e!41319 lt!26488)))

(assert (=> b!62976 (= lt!26488 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 (+!83 lt!26437 (tuple2!2039 lt!26434 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))))) lt!26443))))

(assert (=> b!62976 (isDefined!79 (getValueByKey!126 (toList!702 (+!83 lt!26437 (tuple2!2039 lt!26434 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))))) lt!26443))))

(declare-fun b!62977 () Bool)

(declare-fun Unit!1717 () Unit!1693)

(assert (=> b!62977 (= e!41319 Unit!1717)))

(declare-fun b!62978 () Bool)

(assert (=> b!62978 (= e!41320 (isDefined!79 (getValueByKey!126 (toList!702 (+!83 lt!26437 (tuple2!2039 lt!26434 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))))) lt!26443)))))

(assert (= (and d!12863 c!8449) b!62976))

(assert (= (and d!12863 (not c!8449)) b!62977))

(assert (= (and d!12863 (not res!34515)) b!62978))

(declare-fun m!56951 () Bool)

(assert (=> d!12863 m!56951))

(declare-fun m!56953 () Bool)

(assert (=> b!62976 m!56953))

(declare-fun m!56955 () Bool)

(assert (=> b!62976 m!56955))

(assert (=> b!62976 m!56955))

(declare-fun m!56957 () Bool)

(assert (=> b!62976 m!56957))

(assert (=> b!62978 m!56955))

(assert (=> b!62978 m!56955))

(assert (=> b!62978 m!56957))

(assert (=> b!62898 d!12863))

(declare-fun b!62979 () Bool)

(declare-fun lt!26497 () Unit!1693)

(declare-fun lt!26491 () Unit!1693)

(assert (=> b!62979 (= lt!26497 lt!26491)))

(declare-fun lt!26496 () (_ BitVec 64))

(declare-fun lt!26492 () ListLongMap!1373)

(declare-fun lt!26494 () (_ BitVec 64))

(declare-fun lt!26495 () V!2867)

(assert (=> b!62979 (not (contains!690 (+!83 lt!26492 (tuple2!2039 lt!26496 lt!26495)) lt!26494))))

(assert (=> b!62979 (= lt!26491 (addStillNotContains!17 lt!26492 lt!26496 lt!26495 lt!26494))))

(assert (=> b!62979 (= lt!26494 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!62979 (= lt!26495 (get!1082 (select (arr!1800 (ite c!8338 (_values!2071 newMap!16) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (index!3042 lt!26125) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!62979 (= lt!26496 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun call!4976 () ListLongMap!1373)

(assert (=> b!62979 (= lt!26492 call!4976)))

(declare-fun e!41321 () ListLongMap!1373)

(assert (=> b!62979 (= e!41321 (+!83 call!4976 (tuple2!2039 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000) (get!1082 (select (arr!1800 (ite c!8338 (_values!2071 newMap!16) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (index!3042 lt!26125) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!62980 () Bool)

(declare-fun e!41325 () Bool)

(declare-fun e!41326 () Bool)

(assert (=> b!62980 (= e!41325 e!41326)))

(assert (=> b!62980 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(declare-fun res!34517 () Bool)

(declare-fun lt!26493 () ListLongMap!1373)

(assert (=> b!62980 (= res!34517 (contains!690 lt!26493 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!62980 (=> (not res!34517) (not e!41326))))

(declare-fun b!62981 () Bool)

(declare-fun e!41324 () Bool)

(assert (=> b!62981 (= e!41325 e!41324)))

(declare-fun c!8450 () Bool)

(assert (=> b!62981 (= c!8450 (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(declare-fun b!62982 () Bool)

(declare-fun res!34516 () Bool)

(declare-fun e!41327 () Bool)

(assert (=> b!62982 (=> (not res!34516) (not e!41327))))

(assert (=> b!62982 (= res!34516 (not (contains!690 lt!26493 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!62983 () Bool)

(declare-fun e!41323 () ListLongMap!1373)

(assert (=> b!62983 (= e!41323 (ListLongMap!1374 Nil!1436))))

(declare-fun b!62984 () Bool)

(assert (=> b!62984 (= e!41327 e!41325)))

(declare-fun c!8452 () Bool)

(declare-fun e!41322 () Bool)

(assert (=> b!62984 (= c!8452 e!41322)))

(declare-fun res!34519 () Bool)

(assert (=> b!62984 (=> (not res!34519) (not e!41322))))

(assert (=> b!62984 (= res!34519 (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(declare-fun d!12865 () Bool)

(assert (=> d!12865 e!41327))

(declare-fun res!34518 () Bool)

(assert (=> d!12865 (=> (not res!34518) (not e!41327))))

(assert (=> d!12865 (= res!34518 (not (contains!690 lt!26493 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12865 (= lt!26493 e!41323)))

(declare-fun c!8451 () Bool)

(assert (=> d!12865 (= c!8451 (bvsge #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(assert (=> d!12865 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!12865 (= (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (ite c!8338 (_values!2071 newMap!16) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (index!3042 lt!26125) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16)))) (mask!5994 newMap!16) (ite (and c!8338 c!8332) lt!26145 (extraKeys!1967 newMap!16)) (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) lt!26493)))

(declare-fun b!62985 () Bool)

(assert (=> b!62985 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(assert (=> b!62985 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2032 (ite c!8338 (_values!2071 newMap!16) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (index!3042 lt!26125) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16)))))))))

(assert (=> b!62985 (= e!41326 (= (apply!68 lt!26493 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) (get!1082 (select (arr!1800 (ite c!8338 (_values!2071 newMap!16) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (index!3042 lt!26125) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!62986 () Bool)

(assert (=> b!62986 (= e!41324 (= lt!26493 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (ite c!8338 (_values!2071 newMap!16) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (index!3042 lt!26125) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16)))) (mask!5994 newMap!16) (ite (and c!8338 c!8332) lt!26145 (extraKeys!1967 newMap!16)) (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)) (minValue!2000 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2088 newMap!16))))))

(declare-fun b!62987 () Bool)

(assert (=> b!62987 (= e!41324 (isEmpty!299 lt!26493))))

(declare-fun b!62988 () Bool)

(assert (=> b!62988 (= e!41323 e!41321)))

(declare-fun c!8453 () Bool)

(assert (=> b!62988 (= c!8453 (validKeyInArray!0 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62989 () Bool)

(assert (=> b!62989 (= e!41321 call!4976)))

(declare-fun bm!4973 () Bool)

(assert (=> bm!4973 (= call!4976 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (ite c!8338 (_values!2071 newMap!16) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (index!3042 lt!26125) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16)))) (mask!5994 newMap!16) (ite (and c!8338 c!8332) lt!26145 (extraKeys!1967 newMap!16)) (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)) (minValue!2000 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2088 newMap!16)))))

(declare-fun b!62990 () Bool)

(assert (=> b!62990 (= e!41322 (validKeyInArray!0 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!62990 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (= (and d!12865 c!8451) b!62983))

(assert (= (and d!12865 (not c!8451)) b!62988))

(assert (= (and b!62988 c!8453) b!62979))

(assert (= (and b!62988 (not c!8453)) b!62989))

(assert (= (or b!62979 b!62989) bm!4973))

(assert (= (and d!12865 res!34518) b!62982))

(assert (= (and b!62982 res!34516) b!62984))

(assert (= (and b!62984 res!34519) b!62990))

(assert (= (and b!62984 c!8452) b!62980))

(assert (= (and b!62984 (not c!8452)) b!62981))

(assert (= (and b!62980 res!34517) b!62985))

(assert (= (and b!62981 c!8450) b!62986))

(assert (= (and b!62981 (not c!8450)) b!62987))

(declare-fun b_lambda!2817 () Bool)

(assert (=> (not b_lambda!2817) (not b!62979)))

(assert (=> b!62979 t!4841))

(declare-fun b_and!3855 () Bool)

(assert (= b_and!3851 (and (=> t!4841 result!2459) b_and!3855)))

(assert (=> b!62979 t!4843))

(declare-fun b_and!3857 () Bool)

(assert (= b_and!3853 (and (=> t!4843 result!2461) b_and!3857)))

(declare-fun b_lambda!2819 () Bool)

(assert (=> (not b_lambda!2819) (not b!62985)))

(assert (=> b!62985 t!4841))

(declare-fun b_and!3859 () Bool)

(assert (= b_and!3855 (and (=> t!4841 result!2459) b_and!3859)))

(assert (=> b!62985 t!4843))

(declare-fun b_and!3861 () Bool)

(assert (= b_and!3857 (and (=> t!4843 result!2461) b_and!3861)))

(declare-fun m!56959 () Bool)

(assert (=> b!62987 m!56959))

(assert (=> b!62985 m!56795))

(assert (=> b!62985 m!56515))

(assert (=> b!62985 m!56797))

(assert (=> b!62985 m!56285))

(assert (=> b!62985 m!56795))

(assert (=> b!62985 m!56515))

(assert (=> b!62985 m!56285))

(declare-fun m!56961 () Bool)

(assert (=> b!62985 m!56961))

(assert (=> b!62980 m!56285))

(assert (=> b!62980 m!56285))

(declare-fun m!56963 () Bool)

(assert (=> b!62980 m!56963))

(declare-fun m!56965 () Bool)

(assert (=> b!62986 m!56965))

(assert (=> b!62990 m!56285))

(assert (=> b!62990 m!56285))

(assert (=> b!62990 m!56287))

(assert (=> bm!4973 m!56965))

(declare-fun m!56967 () Bool)

(assert (=> d!12865 m!56967))

(assert (=> d!12865 m!56299))

(declare-fun m!56969 () Bool)

(assert (=> b!62982 m!56969))

(declare-fun m!56971 () Bool)

(assert (=> b!62979 m!56971))

(assert (=> b!62979 m!56971))

(declare-fun m!56973 () Bool)

(assert (=> b!62979 m!56973))

(assert (=> b!62979 m!56795))

(assert (=> b!62979 m!56515))

(assert (=> b!62979 m!56797))

(declare-fun m!56975 () Bool)

(assert (=> b!62979 m!56975))

(assert (=> b!62979 m!56285))

(assert (=> b!62979 m!56795))

(declare-fun m!56977 () Bool)

(assert (=> b!62979 m!56977))

(assert (=> b!62979 m!56515))

(assert (=> b!62988 m!56285))

(assert (=> b!62988 m!56285))

(assert (=> b!62988 m!56287))

(assert (=> b!62898 d!12865))

(declare-fun d!12867 () Bool)

(assert (=> d!12867 (= (apply!68 lt!26441 lt!26448) (get!1086 (getValueByKey!126 (toList!702 lt!26441) lt!26448)))))

(declare-fun bs!2750 () Bool)

(assert (= bs!2750 d!12867))

(declare-fun m!56979 () Bool)

(assert (=> bs!2750 m!56979))

(assert (=> bs!2750 m!56979))

(declare-fun m!56981 () Bool)

(assert (=> bs!2750 m!56981))

(assert (=> b!62898 d!12867))

(declare-fun d!12869 () Bool)

(declare-fun e!41328 () Bool)

(assert (=> d!12869 e!41328))

(declare-fun res!34520 () Bool)

(assert (=> d!12869 (=> (not res!34520) (not e!41328))))

(declare-fun lt!26501 () ListLongMap!1373)

(assert (=> d!12869 (= res!34520 (contains!690 lt!26501 (_1!1030 (tuple2!2039 lt!26432 (minValue!2000 newMap!16)))))))

(declare-fun lt!26500 () List!1439)

(assert (=> d!12869 (= lt!26501 (ListLongMap!1374 lt!26500))))

(declare-fun lt!26499 () Unit!1693)

(declare-fun lt!26498 () Unit!1693)

(assert (=> d!12869 (= lt!26499 lt!26498)))

(assert (=> d!12869 (= (getValueByKey!126 lt!26500 (_1!1030 (tuple2!2039 lt!26432 (minValue!2000 newMap!16)))) (Some!131 (_2!1030 (tuple2!2039 lt!26432 (minValue!2000 newMap!16)))))))

(assert (=> d!12869 (= lt!26498 (lemmaContainsTupThenGetReturnValue!43 lt!26500 (_1!1030 (tuple2!2039 lt!26432 (minValue!2000 newMap!16))) (_2!1030 (tuple2!2039 lt!26432 (minValue!2000 newMap!16)))))))

(assert (=> d!12869 (= lt!26500 (insertStrictlySorted!46 (toList!702 lt!26440) (_1!1030 (tuple2!2039 lt!26432 (minValue!2000 newMap!16))) (_2!1030 (tuple2!2039 lt!26432 (minValue!2000 newMap!16)))))))

(assert (=> d!12869 (= (+!83 lt!26440 (tuple2!2039 lt!26432 (minValue!2000 newMap!16))) lt!26501)))

(declare-fun b!62991 () Bool)

(declare-fun res!34521 () Bool)

(assert (=> b!62991 (=> (not res!34521) (not e!41328))))

(assert (=> b!62991 (= res!34521 (= (getValueByKey!126 (toList!702 lt!26501) (_1!1030 (tuple2!2039 lt!26432 (minValue!2000 newMap!16)))) (Some!131 (_2!1030 (tuple2!2039 lt!26432 (minValue!2000 newMap!16))))))))

(declare-fun b!62992 () Bool)

(assert (=> b!62992 (= e!41328 (contains!693 (toList!702 lt!26501) (tuple2!2039 lt!26432 (minValue!2000 newMap!16))))))

(assert (= (and d!12869 res!34520) b!62991))

(assert (= (and b!62991 res!34521) b!62992))

(declare-fun m!56983 () Bool)

(assert (=> d!12869 m!56983))

(declare-fun m!56985 () Bool)

(assert (=> d!12869 m!56985))

(declare-fun m!56987 () Bool)

(assert (=> d!12869 m!56987))

(declare-fun m!56989 () Bool)

(assert (=> d!12869 m!56989))

(declare-fun m!56991 () Bool)

(assert (=> b!62991 m!56991))

(declare-fun m!56993 () Bool)

(assert (=> b!62992 m!56993))

(assert (=> b!62898 d!12869))

(declare-fun d!12871 () Bool)

(declare-fun e!41329 () Bool)

(assert (=> d!12871 e!41329))

(declare-fun res!34522 () Bool)

(assert (=> d!12871 (=> (not res!34522) (not e!41329))))

(declare-fun lt!26505 () ListLongMap!1373)

(assert (=> d!12871 (= res!34522 (contains!690 lt!26505 (_1!1030 (tuple2!2039 lt!26434 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))))))))

(declare-fun lt!26504 () List!1439)

(assert (=> d!12871 (= lt!26505 (ListLongMap!1374 lt!26504))))

(declare-fun lt!26503 () Unit!1693)

(declare-fun lt!26502 () Unit!1693)

(assert (=> d!12871 (= lt!26503 lt!26502)))

(assert (=> d!12871 (= (getValueByKey!126 lt!26504 (_1!1030 (tuple2!2039 lt!26434 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))))) (Some!131 (_2!1030 (tuple2!2039 lt!26434 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))))))))

(assert (=> d!12871 (= lt!26502 (lemmaContainsTupThenGetReturnValue!43 lt!26504 (_1!1030 (tuple2!2039 lt!26434 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)))) (_2!1030 (tuple2!2039 lt!26434 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))))))))

(assert (=> d!12871 (= lt!26504 (insertStrictlySorted!46 (toList!702 lt!26437) (_1!1030 (tuple2!2039 lt!26434 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)))) (_2!1030 (tuple2!2039 lt!26434 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))))))))

(assert (=> d!12871 (= (+!83 lt!26437 (tuple2!2039 lt!26434 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)))) lt!26505)))

(declare-fun b!62993 () Bool)

(declare-fun res!34523 () Bool)

(assert (=> b!62993 (=> (not res!34523) (not e!41329))))

(assert (=> b!62993 (= res!34523 (= (getValueByKey!126 (toList!702 lt!26505) (_1!1030 (tuple2!2039 lt!26434 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))))) (Some!131 (_2!1030 (tuple2!2039 lt!26434 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)))))))))

(declare-fun b!62994 () Bool)

(assert (=> b!62994 (= e!41329 (contains!693 (toList!702 lt!26505) (tuple2!2039 lt!26434 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)))))))

(assert (= (and d!12871 res!34522) b!62993))

(assert (= (and b!62993 res!34523) b!62994))

(declare-fun m!56995 () Bool)

(assert (=> d!12871 m!56995))

(declare-fun m!56997 () Bool)

(assert (=> d!12871 m!56997))

(declare-fun m!56999 () Bool)

(assert (=> d!12871 m!56999))

(declare-fun m!57001 () Bool)

(assert (=> d!12871 m!57001))

(declare-fun m!57003 () Bool)

(assert (=> b!62993 m!57003))

(declare-fun m!57005 () Bool)

(assert (=> b!62994 m!57005))

(assert (=> b!62898 d!12871))

(declare-fun d!12873 () Bool)

(assert (=> d!12873 (contains!690 (+!83 lt!26437 (tuple2!2039 lt!26434 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)))) lt!26443)))

(declare-fun lt!26506 () Unit!1693)

(assert (=> d!12873 (= lt!26506 (choose!332 lt!26437 lt!26434 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)) lt!26443))))

(assert (=> d!12873 (contains!690 lt!26437 lt!26443)))

(assert (=> d!12873 (= (addStillContains!44 lt!26437 lt!26434 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)) lt!26443) lt!26506)))

(declare-fun bs!2751 () Bool)

(assert (= bs!2751 d!12873))

(assert (=> bs!2751 m!56773))

(assert (=> bs!2751 m!56773))

(assert (=> bs!2751 m!56775))

(declare-fun m!57007 () Bool)

(assert (=> bs!2751 m!57007))

(declare-fun m!57009 () Bool)

(assert (=> bs!2751 m!57009))

(assert (=> b!62898 d!12873))

(declare-fun d!12875 () Bool)

(assert (=> d!12875 (= (apply!68 (+!83 lt!26435 (tuple2!2039 lt!26450 (minValue!2000 newMap!16))) lt!26438) (apply!68 lt!26435 lt!26438))))

(declare-fun lt!26507 () Unit!1693)

(assert (=> d!12875 (= lt!26507 (choose!331 lt!26435 lt!26450 (minValue!2000 newMap!16) lt!26438))))

(declare-fun e!41330 () Bool)

(assert (=> d!12875 e!41330))

(declare-fun res!34524 () Bool)

(assert (=> d!12875 (=> (not res!34524) (not e!41330))))

(assert (=> d!12875 (= res!34524 (contains!690 lt!26435 lt!26438))))

(assert (=> d!12875 (= (addApplyDifferent!44 lt!26435 lt!26450 (minValue!2000 newMap!16) lt!26438) lt!26507)))

(declare-fun b!62995 () Bool)

(assert (=> b!62995 (= e!41330 (not (= lt!26438 lt!26450)))))

(assert (= (and d!12875 res!34524) b!62995))

(declare-fun m!57011 () Bool)

(assert (=> d!12875 m!57011))

(assert (=> d!12875 m!56783))

(assert (=> d!12875 m!56787))

(assert (=> d!12875 m!56763))

(assert (=> d!12875 m!56783))

(declare-fun m!57013 () Bool)

(assert (=> d!12875 m!57013))

(assert (=> b!62898 d!12875))

(declare-fun d!12877 () Bool)

(declare-fun e!41331 () Bool)

(assert (=> d!12877 e!41331))

(declare-fun res!34525 () Bool)

(assert (=> d!12877 (=> (not res!34525) (not e!41331))))

(declare-fun lt!26511 () ListLongMap!1373)

(assert (=> d!12877 (= res!34525 (contains!690 lt!26511 (_1!1030 (tuple2!2039 lt!26450 (minValue!2000 newMap!16)))))))

(declare-fun lt!26510 () List!1439)

(assert (=> d!12877 (= lt!26511 (ListLongMap!1374 lt!26510))))

(declare-fun lt!26509 () Unit!1693)

(declare-fun lt!26508 () Unit!1693)

(assert (=> d!12877 (= lt!26509 lt!26508)))

(assert (=> d!12877 (= (getValueByKey!126 lt!26510 (_1!1030 (tuple2!2039 lt!26450 (minValue!2000 newMap!16)))) (Some!131 (_2!1030 (tuple2!2039 lt!26450 (minValue!2000 newMap!16)))))))

(assert (=> d!12877 (= lt!26508 (lemmaContainsTupThenGetReturnValue!43 lt!26510 (_1!1030 (tuple2!2039 lt!26450 (minValue!2000 newMap!16))) (_2!1030 (tuple2!2039 lt!26450 (minValue!2000 newMap!16)))))))

(assert (=> d!12877 (= lt!26510 (insertStrictlySorted!46 (toList!702 lt!26435) (_1!1030 (tuple2!2039 lt!26450 (minValue!2000 newMap!16))) (_2!1030 (tuple2!2039 lt!26450 (minValue!2000 newMap!16)))))))

(assert (=> d!12877 (= (+!83 lt!26435 (tuple2!2039 lt!26450 (minValue!2000 newMap!16))) lt!26511)))

(declare-fun b!62996 () Bool)

(declare-fun res!34526 () Bool)

(assert (=> b!62996 (=> (not res!34526) (not e!41331))))

(assert (=> b!62996 (= res!34526 (= (getValueByKey!126 (toList!702 lt!26511) (_1!1030 (tuple2!2039 lt!26450 (minValue!2000 newMap!16)))) (Some!131 (_2!1030 (tuple2!2039 lt!26450 (minValue!2000 newMap!16))))))))

(declare-fun b!62997 () Bool)

(assert (=> b!62997 (= e!41331 (contains!693 (toList!702 lt!26511) (tuple2!2039 lt!26450 (minValue!2000 newMap!16))))))

(assert (= (and d!12877 res!34525) b!62996))

(assert (= (and b!62996 res!34526) b!62997))

(declare-fun m!57015 () Bool)

(assert (=> d!12877 m!57015))

(declare-fun m!57017 () Bool)

(assert (=> d!12877 m!57017))

(declare-fun m!57019 () Bool)

(assert (=> d!12877 m!57019))

(declare-fun m!57021 () Bool)

(assert (=> d!12877 m!57021))

(declare-fun m!57023 () Bool)

(assert (=> b!62996 m!57023))

(declare-fun m!57025 () Bool)

(assert (=> b!62997 m!57025))

(assert (=> b!62898 d!12877))

(declare-fun d!12879 () Bool)

(assert (=> d!12879 (= (apply!68 lt!26440 lt!26444) (get!1086 (getValueByKey!126 (toList!702 lt!26440) lt!26444)))))

(declare-fun bs!2752 () Bool)

(assert (= bs!2752 d!12879))

(declare-fun m!57027 () Bool)

(assert (=> bs!2752 m!57027))

(assert (=> bs!2752 m!57027))

(declare-fun m!57029 () Bool)

(assert (=> bs!2752 m!57029))

(assert (=> b!62898 d!12879))

(declare-fun d!12881 () Bool)

(assert (=> d!12881 (= (apply!68 (+!83 lt!26440 (tuple2!2039 lt!26432 (minValue!2000 newMap!16))) lt!26444) (apply!68 lt!26440 lt!26444))))

(declare-fun lt!26512 () Unit!1693)

(assert (=> d!12881 (= lt!26512 (choose!331 lt!26440 lt!26432 (minValue!2000 newMap!16) lt!26444))))

(declare-fun e!41332 () Bool)

(assert (=> d!12881 e!41332))

(declare-fun res!34527 () Bool)

(assert (=> d!12881 (=> (not res!34527) (not e!41332))))

(assert (=> d!12881 (= res!34527 (contains!690 lt!26440 lt!26444))))

(assert (=> d!12881 (= (addApplyDifferent!44 lt!26440 lt!26432 (minValue!2000 newMap!16) lt!26444) lt!26512)))

(declare-fun b!62998 () Bool)

(assert (=> b!62998 (= e!41332 (not (= lt!26444 lt!26432)))))

(assert (= (and d!12881 res!34527) b!62998))

(declare-fun m!57031 () Bool)

(assert (=> d!12881 m!57031))

(assert (=> d!12881 m!56779))

(assert (=> d!12881 m!56781))

(assert (=> d!12881 m!56769))

(assert (=> d!12881 m!56779))

(declare-fun m!57033 () Bool)

(assert (=> d!12881 m!57033))

(assert (=> b!62898 d!12881))

(declare-fun d!12883 () Bool)

(assert (=> d!12883 (= (apply!68 (+!83 lt!26441 (tuple2!2039 lt!26451 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)))) lt!26448) (apply!68 lt!26441 lt!26448))))

(declare-fun lt!26513 () Unit!1693)

(assert (=> d!12883 (= lt!26513 (choose!331 lt!26441 lt!26451 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)) lt!26448))))

(declare-fun e!41333 () Bool)

(assert (=> d!12883 e!41333))

(declare-fun res!34528 () Bool)

(assert (=> d!12883 (=> (not res!34528) (not e!41333))))

(assert (=> d!12883 (= res!34528 (contains!690 lt!26441 lt!26448))))

(assert (=> d!12883 (= (addApplyDifferent!44 lt!26441 lt!26451 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16)) lt!26448) lt!26513)))

(declare-fun b!62999 () Bool)

(assert (=> b!62999 (= e!41333 (not (= lt!26448 lt!26451)))))

(assert (= (and d!12883 res!34528) b!62999))

(declare-fun m!57035 () Bool)

(assert (=> d!12883 m!57035))

(assert (=> d!12883 m!56765))

(assert (=> d!12883 m!56767))

(assert (=> d!12883 m!56777))

(assert (=> d!12883 m!56765))

(declare-fun m!57037 () Bool)

(assert (=> d!12883 m!57037))

(assert (=> b!62898 d!12883))

(declare-fun d!12885 () Bool)

(assert (=> d!12885 (= (apply!68 (+!83 lt!26435 (tuple2!2039 lt!26450 (minValue!2000 newMap!16))) lt!26438) (get!1086 (getValueByKey!126 (toList!702 (+!83 lt!26435 (tuple2!2039 lt!26450 (minValue!2000 newMap!16)))) lt!26438)))))

(declare-fun bs!2753 () Bool)

(assert (= bs!2753 d!12885))

(declare-fun m!57039 () Bool)

(assert (=> bs!2753 m!57039))

(assert (=> bs!2753 m!57039))

(declare-fun m!57041 () Bool)

(assert (=> bs!2753 m!57041))

(assert (=> b!62898 d!12885))

(declare-fun d!12887 () Bool)

(assert (=> d!12887 (= (get!1086 (getValueByKey!126 (toList!702 (+!83 lt!26047 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26051)) (v!2423 (getValueByKey!126 (toList!702 (+!83 lt!26047 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26051)))))

(assert (=> d!12735 d!12887))

(declare-fun b!63001 () Bool)

(declare-fun e!41334 () Option!132)

(declare-fun e!41335 () Option!132)

(assert (=> b!63001 (= e!41334 e!41335)))

(declare-fun c!8455 () Bool)

(assert (=> b!63001 (= c!8455 (and ((_ is Cons!1435) (toList!702 (+!83 lt!26047 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))) (not (= (_1!1030 (h!2018 (toList!702 (+!83 lt!26047 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))) lt!26051))))))

(declare-fun b!63000 () Bool)

(assert (=> b!63000 (= e!41334 (Some!131 (_2!1030 (h!2018 (toList!702 (+!83 lt!26047 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))))

(declare-fun c!8454 () Bool)

(declare-fun d!12889 () Bool)

(assert (=> d!12889 (= c!8454 (and ((_ is Cons!1435) (toList!702 (+!83 lt!26047 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))) (= (_1!1030 (h!2018 (toList!702 (+!83 lt!26047 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))) lt!26051)))))

(assert (=> d!12889 (= (getValueByKey!126 (toList!702 (+!83 lt!26047 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26051) e!41334)))

(declare-fun b!63002 () Bool)

(assert (=> b!63002 (= e!41335 (getValueByKey!126 (t!4833 (toList!702 (+!83 lt!26047 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))) lt!26051))))

(declare-fun b!63003 () Bool)

(assert (=> b!63003 (= e!41335 None!130)))

(assert (= (and d!12889 c!8454) b!63000))

(assert (= (and d!12889 (not c!8454)) b!63001))

(assert (= (and b!63001 c!8455) b!63002))

(assert (= (and b!63001 (not c!8455)) b!63003))

(declare-fun m!57043 () Bool)

(assert (=> b!63002 m!57043))

(assert (=> d!12735 d!12889))

(declare-fun d!12891 () Bool)

(declare-fun res!34529 () Bool)

(declare-fun e!41336 () Bool)

(assert (=> d!12891 (=> res!34529 e!41336)))

(assert (=> d!12891 (= res!34529 (and ((_ is Cons!1435) (toList!702 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))) (= (_1!1030 (h!2018 (toList!702 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355))))))

(assert (=> d!12891 (= (containsKey!130 (toList!702 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) e!41336)))

(declare-fun b!63004 () Bool)

(declare-fun e!41337 () Bool)

(assert (=> b!63004 (= e!41336 e!41337)))

(declare-fun res!34530 () Bool)

(assert (=> b!63004 (=> (not res!34530) (not e!41337))))

(assert (=> b!63004 (= res!34530 (and (or (not ((_ is Cons!1435) (toList!702 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))))) (bvsle (_1!1030 (h!2018 (toList!702 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355))) ((_ is Cons!1435) (toList!702 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))) (bvslt (_1!1030 (h!2018 (toList!702 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355))))))

(declare-fun b!63005 () Bool)

(assert (=> b!63005 (= e!41337 (containsKey!130 (t!4833 (toList!702 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (= (and d!12891 (not res!34529)) b!63004))

(assert (= (and b!63004 res!34530) b!63005))

(assert (=> b!63005 m!56051))

(declare-fun m!57045 () Bool)

(assert (=> b!63005 m!57045))

(assert (=> d!12757 d!12891))

(assert (=> b!62666 d!12747))

(declare-fun d!12893 () Bool)

(declare-fun e!41338 () Bool)

(assert (=> d!12893 e!41338))

(declare-fun res!34531 () Bool)

(assert (=> d!12893 (=> (not res!34531) (not e!41338))))

(declare-fun lt!26517 () ListLongMap!1373)

(assert (=> d!12893 (= res!34531 (contains!690 lt!26517 (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!26516 () List!1439)

(assert (=> d!12893 (= lt!26517 (ListLongMap!1374 lt!26516))))

(declare-fun lt!26515 () Unit!1693)

(declare-fun lt!26514 () Unit!1693)

(assert (=> d!12893 (= lt!26515 lt!26514)))

(assert (=> d!12893 (= (getValueByKey!126 lt!26516 (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!131 (_2!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12893 (= lt!26514 (lemmaContainsTupThenGetReturnValue!43 lt!26516 (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12893 (= lt!26516 (insertStrictlySorted!46 (toList!702 call!4930) (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12893 (= (+!83 call!4930 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26517)))

(declare-fun b!63006 () Bool)

(declare-fun res!34532 () Bool)

(assert (=> b!63006 (=> (not res!34532) (not e!41338))))

(assert (=> b!63006 (= res!34532 (= (getValueByKey!126 (toList!702 lt!26517) (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!131 (_2!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!63007 () Bool)

(assert (=> b!63007 (= e!41338 (contains!693 (toList!702 lt!26517) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12893 res!34531) b!63006))

(assert (= (and b!63006 res!34532) b!63007))

(declare-fun m!57047 () Bool)

(assert (=> d!12893 m!57047))

(declare-fun m!57049 () Bool)

(assert (=> d!12893 m!57049))

(declare-fun m!57051 () Bool)

(assert (=> d!12893 m!57051))

(declare-fun m!57053 () Bool)

(assert (=> d!12893 m!57053))

(declare-fun m!57055 () Bool)

(assert (=> b!63006 m!57055))

(declare-fun m!57057 () Bool)

(assert (=> b!63007 m!57057))

(assert (=> b!62666 d!12893))

(declare-fun d!12895 () Bool)

(declare-fun e!41339 () Bool)

(assert (=> d!12895 e!41339))

(declare-fun res!34533 () Bool)

(assert (=> d!12895 (=> (not res!34533) (not e!41339))))

(declare-fun lt!26521 () ListLongMap!1373)

(assert (=> d!12895 (= res!34533 (contains!690 lt!26521 (_1!1030 (tuple2!2039 lt!26222 lt!26221))))))

(declare-fun lt!26520 () List!1439)

(assert (=> d!12895 (= lt!26521 (ListLongMap!1374 lt!26520))))

(declare-fun lt!26519 () Unit!1693)

(declare-fun lt!26518 () Unit!1693)

(assert (=> d!12895 (= lt!26519 lt!26518)))

(assert (=> d!12895 (= (getValueByKey!126 lt!26520 (_1!1030 (tuple2!2039 lt!26222 lt!26221))) (Some!131 (_2!1030 (tuple2!2039 lt!26222 lt!26221))))))

(assert (=> d!12895 (= lt!26518 (lemmaContainsTupThenGetReturnValue!43 lt!26520 (_1!1030 (tuple2!2039 lt!26222 lt!26221)) (_2!1030 (tuple2!2039 lt!26222 lt!26221))))))

(assert (=> d!12895 (= lt!26520 (insertStrictlySorted!46 (toList!702 lt!26218) (_1!1030 (tuple2!2039 lt!26222 lt!26221)) (_2!1030 (tuple2!2039 lt!26222 lt!26221))))))

(assert (=> d!12895 (= (+!83 lt!26218 (tuple2!2039 lt!26222 lt!26221)) lt!26521)))

(declare-fun b!63008 () Bool)

(declare-fun res!34534 () Bool)

(assert (=> b!63008 (=> (not res!34534) (not e!41339))))

(assert (=> b!63008 (= res!34534 (= (getValueByKey!126 (toList!702 lt!26521) (_1!1030 (tuple2!2039 lt!26222 lt!26221))) (Some!131 (_2!1030 (tuple2!2039 lt!26222 lt!26221)))))))

(declare-fun b!63009 () Bool)

(assert (=> b!63009 (= e!41339 (contains!693 (toList!702 lt!26521) (tuple2!2039 lt!26222 lt!26221)))))

(assert (= (and d!12895 res!34533) b!63008))

(assert (= (and b!63008 res!34534) b!63009))

(declare-fun m!57059 () Bool)

(assert (=> d!12895 m!57059))

(declare-fun m!57061 () Bool)

(assert (=> d!12895 m!57061))

(declare-fun m!57063 () Bool)

(assert (=> d!12895 m!57063))

(declare-fun m!57065 () Bool)

(assert (=> d!12895 m!57065))

(declare-fun m!57067 () Bool)

(assert (=> b!63008 m!57067))

(declare-fun m!57069 () Bool)

(assert (=> b!63009 m!57069))

(assert (=> b!62666 d!12895))

(declare-fun d!12897 () Bool)

(assert (=> d!12897 (not (contains!690 (+!83 lt!26218 (tuple2!2039 lt!26222 lt!26221)) lt!26220))))

(declare-fun lt!26524 () Unit!1693)

(declare-fun choose!339 (ListLongMap!1373 (_ BitVec 64) V!2867 (_ BitVec 64)) Unit!1693)

(assert (=> d!12897 (= lt!26524 (choose!339 lt!26218 lt!26222 lt!26221 lt!26220))))

(declare-fun e!41342 () Bool)

(assert (=> d!12897 e!41342))

(declare-fun res!34537 () Bool)

(assert (=> d!12897 (=> (not res!34537) (not e!41342))))

(assert (=> d!12897 (= res!34537 (not (contains!690 lt!26218 lt!26220)))))

(assert (=> d!12897 (= (addStillNotContains!17 lt!26218 lt!26222 lt!26221 lt!26220) lt!26524)))

(declare-fun b!63013 () Bool)

(assert (=> b!63013 (= e!41342 (not (= lt!26222 lt!26220)))))

(assert (= (and d!12897 res!34537) b!63013))

(assert (=> d!12897 m!56399))

(assert (=> d!12897 m!56399))

(assert (=> d!12897 m!56401))

(declare-fun m!57071 () Bool)

(assert (=> d!12897 m!57071))

(declare-fun m!57073 () Bool)

(assert (=> d!12897 m!57073))

(assert (=> b!62666 d!12897))

(declare-fun d!12899 () Bool)

(declare-fun e!41344 () Bool)

(assert (=> d!12899 e!41344))

(declare-fun res!34538 () Bool)

(assert (=> d!12899 (=> res!34538 e!41344)))

(declare-fun lt!26528 () Bool)

(assert (=> d!12899 (= res!34538 (not lt!26528))))

(declare-fun lt!26527 () Bool)

(assert (=> d!12899 (= lt!26528 lt!26527)))

(declare-fun lt!26525 () Unit!1693)

(declare-fun e!41343 () Unit!1693)

(assert (=> d!12899 (= lt!26525 e!41343)))

(declare-fun c!8456 () Bool)

(assert (=> d!12899 (= c!8456 lt!26527)))

(assert (=> d!12899 (= lt!26527 (containsKey!130 (toList!702 (+!83 lt!26218 (tuple2!2039 lt!26222 lt!26221))) lt!26220))))

(assert (=> d!12899 (= (contains!690 (+!83 lt!26218 (tuple2!2039 lt!26222 lt!26221)) lt!26220) lt!26528)))

(declare-fun b!63014 () Bool)

(declare-fun lt!26526 () Unit!1693)

(assert (=> b!63014 (= e!41343 lt!26526)))

(assert (=> b!63014 (= lt!26526 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 (+!83 lt!26218 (tuple2!2039 lt!26222 lt!26221))) lt!26220))))

(assert (=> b!63014 (isDefined!79 (getValueByKey!126 (toList!702 (+!83 lt!26218 (tuple2!2039 lt!26222 lt!26221))) lt!26220))))

(declare-fun b!63015 () Bool)

(declare-fun Unit!1718 () Unit!1693)

(assert (=> b!63015 (= e!41343 Unit!1718)))

(declare-fun b!63016 () Bool)

(assert (=> b!63016 (= e!41344 (isDefined!79 (getValueByKey!126 (toList!702 (+!83 lt!26218 (tuple2!2039 lt!26222 lt!26221))) lt!26220)))))

(assert (= (and d!12899 c!8456) b!63014))

(assert (= (and d!12899 (not c!8456)) b!63015))

(assert (= (and d!12899 (not res!34538)) b!63016))

(declare-fun m!57075 () Bool)

(assert (=> d!12899 m!57075))

(declare-fun m!57077 () Bool)

(assert (=> b!63014 m!57077))

(declare-fun m!57079 () Bool)

(assert (=> b!63014 m!57079))

(assert (=> b!63014 m!57079))

(declare-fun m!57081 () Bool)

(assert (=> b!63014 m!57081))

(assert (=> b!63016 m!57079))

(assert (=> b!63016 m!57079))

(assert (=> b!63016 m!57081))

(assert (=> b!62666 d!12899))

(declare-fun d!12901 () Bool)

(assert (=> d!12901 (= (validMask!0 (mask!5994 newMap!16)) (and (or (= (mask!5994 newMap!16) #b00000000000000000000000000000111) (= (mask!5994 newMap!16) #b00000000000000000000000000001111) (= (mask!5994 newMap!16) #b00000000000000000000000000011111) (= (mask!5994 newMap!16) #b00000000000000000000000000111111) (= (mask!5994 newMap!16) #b00000000000000000000000001111111) (= (mask!5994 newMap!16) #b00000000000000000000000011111111) (= (mask!5994 newMap!16) #b00000000000000000000000111111111) (= (mask!5994 newMap!16) #b00000000000000000000001111111111) (= (mask!5994 newMap!16) #b00000000000000000000011111111111) (= (mask!5994 newMap!16) #b00000000000000000000111111111111) (= (mask!5994 newMap!16) #b00000000000000000001111111111111) (= (mask!5994 newMap!16) #b00000000000000000011111111111111) (= (mask!5994 newMap!16) #b00000000000000000111111111111111) (= (mask!5994 newMap!16) #b00000000000000001111111111111111) (= (mask!5994 newMap!16) #b00000000000000011111111111111111) (= (mask!5994 newMap!16) #b00000000000000111111111111111111) (= (mask!5994 newMap!16) #b00000000000001111111111111111111) (= (mask!5994 newMap!16) #b00000000000011111111111111111111) (= (mask!5994 newMap!16) #b00000000000111111111111111111111) (= (mask!5994 newMap!16) #b00000000001111111111111111111111) (= (mask!5994 newMap!16) #b00000000011111111111111111111111) (= (mask!5994 newMap!16) #b00000000111111111111111111111111) (= (mask!5994 newMap!16) #b00000001111111111111111111111111) (= (mask!5994 newMap!16) #b00000011111111111111111111111111) (= (mask!5994 newMap!16) #b00000111111111111111111111111111) (= (mask!5994 newMap!16) #b00001111111111111111111111111111) (= (mask!5994 newMap!16) #b00011111111111111111111111111111) (= (mask!5994 newMap!16) #b00111111111111111111111111111111)) (bvsle (mask!5994 newMap!16) #b00111111111111111111111111111111)))))

(assert (=> d!12759 d!12901))

(declare-fun d!12903 () Bool)

(assert (=> d!12903 (contains!690 (getCurrentListMap!406 (_keys!3720 newMap!16) lt!26151 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (select (arr!1799 (_keys!3720 newMap!16)) (index!3042 lt!26125)))))

(assert (=> d!12903 true))

(declare-fun _$16!84 () Unit!1693)

(assert (=> d!12903 (= (choose!333 (_keys!3720 newMap!16) lt!26151 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (index!3042 lt!26125) (defaultEntry!2088 newMap!16)) _$16!84)))

(declare-fun bs!2754 () Bool)

(assert (= bs!2754 d!12903))

(assert (=> bs!2754 m!56461))

(assert (=> bs!2754 m!56257))

(assert (=> bs!2754 m!56461))

(assert (=> bs!2754 m!56257))

(assert (=> bs!2754 m!56463))

(assert (=> d!12753 d!12903))

(assert (=> d!12753 d!12901))

(declare-fun d!12905 () Bool)

(declare-fun e!41346 () Bool)

(assert (=> d!12905 e!41346))

(declare-fun res!34539 () Bool)

(assert (=> d!12905 (=> res!34539 e!41346)))

(declare-fun lt!26532 () Bool)

(assert (=> d!12905 (= res!34539 (not lt!26532))))

(declare-fun lt!26531 () Bool)

(assert (=> d!12905 (= lt!26532 lt!26531)))

(declare-fun lt!26529 () Unit!1693)

(declare-fun e!41345 () Unit!1693)

(assert (=> d!12905 (= lt!26529 e!41345)))

(declare-fun c!8457 () Bool)

(assert (=> d!12905 (= c!8457 lt!26531)))

(assert (=> d!12905 (= lt!26531 (containsKey!130 (toList!702 lt!26439) (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!12905 (= (contains!690 lt!26439 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) lt!26532)))

(declare-fun b!63017 () Bool)

(declare-fun lt!26530 () Unit!1693)

(assert (=> b!63017 (= e!41345 lt!26530)))

(assert (=> b!63017 (= lt!26530 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 lt!26439) (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63017 (isDefined!79 (getValueByKey!126 (toList!702 lt!26439) (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63018 () Bool)

(declare-fun Unit!1719 () Unit!1693)

(assert (=> b!63018 (= e!41345 Unit!1719)))

(declare-fun b!63019 () Bool)

(assert (=> b!63019 (= e!41346 (isDefined!79 (getValueByKey!126 (toList!702 lt!26439) (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!12905 c!8457) b!63017))

(assert (= (and d!12905 (not c!8457)) b!63018))

(assert (= (and d!12905 (not res!34539)) b!63019))

(assert (=> d!12905 m!56285))

(declare-fun m!57083 () Bool)

(assert (=> d!12905 m!57083))

(assert (=> b!63017 m!56285))

(declare-fun m!57085 () Bool)

(assert (=> b!63017 m!57085))

(assert (=> b!63017 m!56285))

(declare-fun m!57087 () Bool)

(assert (=> b!63017 m!57087))

(assert (=> b!63017 m!57087))

(declare-fun m!57089 () Bool)

(assert (=> b!63017 m!57089))

(assert (=> b!63019 m!56285))

(assert (=> b!63019 m!57087))

(assert (=> b!63019 m!57087))

(assert (=> b!63019 m!57089))

(assert (=> b!62900 d!12905))

(declare-fun d!12907 () Bool)

(assert (=> d!12907 (arrayContainsKey!0 (_keys!3720 newMap!16) lt!26159 #b00000000000000000000000000000000)))

(declare-fun lt!26535 () Unit!1693)

(declare-fun choose!13 (array!3761 (_ BitVec 64) (_ BitVec 32)) Unit!1693)

(assert (=> d!12907 (= lt!26535 (choose!13 (_keys!3720 newMap!16) lt!26159 #b00000000000000000000000000000000))))

(assert (=> d!12907 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (=> d!12907 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3720 newMap!16) lt!26159 #b00000000000000000000000000000000) lt!26535)))

(declare-fun bs!2755 () Bool)

(assert (= bs!2755 d!12907))

(assert (=> bs!2755 m!56293))

(declare-fun m!57091 () Bool)

(assert (=> bs!2755 m!57091))

(assert (=> b!62593 d!12907))

(declare-fun d!12909 () Bool)

(declare-fun res!34540 () Bool)

(declare-fun e!41347 () Bool)

(assert (=> d!12909 (=> res!34540 e!41347)))

(assert (=> d!12909 (= res!34540 (= (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000) lt!26159))))

(assert (=> d!12909 (= (arrayContainsKey!0 (_keys!3720 newMap!16) lt!26159 #b00000000000000000000000000000000) e!41347)))

(declare-fun b!63020 () Bool)

(declare-fun e!41348 () Bool)

(assert (=> b!63020 (= e!41347 e!41348)))

(declare-fun res!34541 () Bool)

(assert (=> b!63020 (=> (not res!34541) (not e!41348))))

(assert (=> b!63020 (= res!34541 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2031 (_keys!3720 newMap!16))))))

(declare-fun b!63021 () Bool)

(assert (=> b!63021 (= e!41348 (arrayContainsKey!0 (_keys!3720 newMap!16) lt!26159 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!12909 (not res!34540)) b!63020))

(assert (= (and b!63020 res!34541) b!63021))

(assert (=> d!12909 m!56285))

(declare-fun m!57093 () Bool)

(assert (=> b!63021 m!57093))

(assert (=> b!62593 d!12909))

(declare-fun b!63022 () Bool)

(declare-fun e!41349 () SeekEntryResult!229)

(declare-fun lt!26538 () SeekEntryResult!229)

(assert (=> b!63022 (= e!41349 (MissingZero!229 (index!3043 lt!26538)))))

(declare-fun d!12911 () Bool)

(declare-fun lt!26536 () SeekEntryResult!229)

(assert (=> d!12911 (and (or ((_ is Undefined!229) lt!26536) (not ((_ is Found!229) lt!26536)) (and (bvsge (index!3042 lt!26536) #b00000000000000000000000000000000) (bvslt (index!3042 lt!26536) (size!2031 (_keys!3720 newMap!16))))) (or ((_ is Undefined!229) lt!26536) ((_ is Found!229) lt!26536) (not ((_ is MissingZero!229) lt!26536)) (and (bvsge (index!3041 lt!26536) #b00000000000000000000000000000000) (bvslt (index!3041 lt!26536) (size!2031 (_keys!3720 newMap!16))))) (or ((_ is Undefined!229) lt!26536) ((_ is Found!229) lt!26536) ((_ is MissingZero!229) lt!26536) (not ((_ is MissingVacant!229) lt!26536)) (and (bvsge (index!3044 lt!26536) #b00000000000000000000000000000000) (bvslt (index!3044 lt!26536) (size!2031 (_keys!3720 newMap!16))))) (or ((_ is Undefined!229) lt!26536) (ite ((_ is Found!229) lt!26536) (= (select (arr!1799 (_keys!3720 newMap!16)) (index!3042 lt!26536)) (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) (ite ((_ is MissingZero!229) lt!26536) (= (select (arr!1799 (_keys!3720 newMap!16)) (index!3041 lt!26536)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!229) lt!26536) (= (select (arr!1799 (_keys!3720 newMap!16)) (index!3044 lt!26536)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!41351 () SeekEntryResult!229)

(assert (=> d!12911 (= lt!26536 e!41351)))

(declare-fun c!8459 () Bool)

(assert (=> d!12911 (= c!8459 (and ((_ is Intermediate!229) lt!26538) (undefined!1041 lt!26538)))))

(assert (=> d!12911 (= lt!26538 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000) (mask!5994 newMap!16)) (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000) (_keys!3720 newMap!16) (mask!5994 newMap!16)))))

(assert (=> d!12911 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!12911 (= (seekEntryOrOpen!0 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000) (_keys!3720 newMap!16) (mask!5994 newMap!16)) lt!26536)))

(declare-fun b!63023 () Bool)

(declare-fun e!41350 () SeekEntryResult!229)

(assert (=> b!63023 (= e!41351 e!41350)))

(declare-fun lt!26537 () (_ BitVec 64))

(assert (=> b!63023 (= lt!26537 (select (arr!1799 (_keys!3720 newMap!16)) (index!3043 lt!26538)))))

(declare-fun c!8460 () Bool)

(assert (=> b!63023 (= c!8460 (= lt!26537 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63024 () Bool)

(assert (=> b!63024 (= e!41350 (Found!229 (index!3043 lt!26538)))))

(declare-fun b!63025 () Bool)

(assert (=> b!63025 (= e!41351 Undefined!229)))

(declare-fun b!63026 () Bool)

(declare-fun c!8458 () Bool)

(assert (=> b!63026 (= c!8458 (= lt!26537 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63026 (= e!41350 e!41349)))

(declare-fun b!63027 () Bool)

(assert (=> b!63027 (= e!41349 (seekKeyOrZeroReturnVacant!0 (x!10307 lt!26538) (index!3043 lt!26538) (index!3043 lt!26538) (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000) (_keys!3720 newMap!16) (mask!5994 newMap!16)))))

(assert (= (and d!12911 c!8459) b!63025))

(assert (= (and d!12911 (not c!8459)) b!63023))

(assert (= (and b!63023 c!8460) b!63024))

(assert (= (and b!63023 (not c!8460)) b!63026))

(assert (= (and b!63026 c!8458) b!63022))

(assert (= (and b!63026 (not c!8458)) b!63027))

(declare-fun m!57095 () Bool)

(assert (=> d!12911 m!57095))

(declare-fun m!57097 () Bool)

(assert (=> d!12911 m!57097))

(assert (=> d!12911 m!56299))

(declare-fun m!57099 () Bool)

(assert (=> d!12911 m!57099))

(assert (=> d!12911 m!56285))

(declare-fun m!57101 () Bool)

(assert (=> d!12911 m!57101))

(assert (=> d!12911 m!56285))

(assert (=> d!12911 m!57099))

(declare-fun m!57103 () Bool)

(assert (=> d!12911 m!57103))

(declare-fun m!57105 () Bool)

(assert (=> b!63023 m!57105))

(assert (=> b!63027 m!56285))

(declare-fun m!57107 () Bool)

(assert (=> b!63027 m!57107))

(assert (=> b!62593 d!12911))

(declare-fun d!12913 () Bool)

(assert (=> d!12913 (= (get!1084 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2418 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!62684 d!12913))

(assert (=> bm!4943 d!12775))

(declare-fun d!12915 () Bool)

(declare-fun e!41352 () Bool)

(assert (=> d!12915 e!41352))

(declare-fun res!34542 () Bool)

(assert (=> d!12915 (=> (not res!34542) (not e!41352))))

(declare-fun lt!26542 () ListLongMap!1373)

(assert (=> d!12915 (= res!34542 (contains!690 lt!26542 (_1!1030 (ite (or c!8377 c!8379) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))))

(declare-fun lt!26541 () List!1439)

(assert (=> d!12915 (= lt!26542 (ListLongMap!1374 lt!26541))))

(declare-fun lt!26540 () Unit!1693)

(declare-fun lt!26539 () Unit!1693)

(assert (=> d!12915 (= lt!26540 lt!26539)))

(assert (=> d!12915 (= (getValueByKey!126 lt!26541 (_1!1030 (ite (or c!8377 c!8379) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))) (Some!131 (_2!1030 (ite (or c!8377 c!8379) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))))

(assert (=> d!12915 (= lt!26539 (lemmaContainsTupThenGetReturnValue!43 lt!26541 (_1!1030 (ite (or c!8377 c!8379) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))) (_2!1030 (ite (or c!8377 c!8379) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))))

(assert (=> d!12915 (= lt!26541 (insertStrictlySorted!46 (toList!702 (ite c!8377 call!4934 (ite c!8379 call!4931 call!4937))) (_1!1030 (ite (or c!8377 c!8379) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))) (_2!1030 (ite (or c!8377 c!8379) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))))

(assert (=> d!12915 (= (+!83 (ite c!8377 call!4934 (ite c!8379 call!4931 call!4937)) (ite (or c!8377 c!8379) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))) lt!26542)))

(declare-fun b!63028 () Bool)

(declare-fun res!34543 () Bool)

(assert (=> b!63028 (=> (not res!34543) (not e!41352))))

(assert (=> b!63028 (= res!34543 (= (getValueByKey!126 (toList!702 lt!26542) (_1!1030 (ite (or c!8377 c!8379) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))) (Some!131 (_2!1030 (ite (or c!8377 c!8379) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))))

(declare-fun b!63029 () Bool)

(assert (=> b!63029 (= e!41352 (contains!693 (toList!702 lt!26542) (ite (or c!8377 c!8379) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))

(assert (= (and d!12915 res!34542) b!63028))

(assert (= (and b!63028 res!34543) b!63029))

(declare-fun m!57109 () Bool)

(assert (=> d!12915 m!57109))

(declare-fun m!57111 () Bool)

(assert (=> d!12915 m!57111))

(declare-fun m!57113 () Bool)

(assert (=> d!12915 m!57113))

(declare-fun m!57115 () Bool)

(assert (=> d!12915 m!57115))

(declare-fun m!57117 () Bool)

(assert (=> b!63028 m!57117))

(declare-fun m!57119 () Bool)

(assert (=> b!63029 m!57119))

(assert (=> bm!4929 d!12915))

(declare-fun b!63030 () Bool)

(declare-fun e!41354 () (_ BitVec 32))

(declare-fun call!4977 () (_ BitVec 32))

(assert (=> b!63030 (= e!41354 (bvadd #b00000000000000000000000000000001 call!4977))))

(declare-fun d!12917 () Bool)

(declare-fun lt!26543 () (_ BitVec 32))

(assert (=> d!12917 (and (bvsge lt!26543 #b00000000000000000000000000000000) (bvsle lt!26543 (bvsub (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun e!41353 () (_ BitVec 32))

(assert (=> d!12917 (= lt!26543 e!41353)))

(declare-fun c!8461 () Bool)

(assert (=> d!12917 (= c!8461 (bvsge #b00000000000000000000000000000000 (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992))))))))

(assert (=> d!12917 (and (bvsle #b00000000000000000000000000000000 (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992))))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992))))))))

(assert (=> d!12917 (= (arrayCountValidKeys!0 (_keys!3720 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000000 (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992))))) lt!26543)))

(declare-fun b!63031 () Bool)

(assert (=> b!63031 (= e!41354 call!4977)))

(declare-fun bm!4974 () Bool)

(assert (=> bm!4974 (= call!4977 (arrayCountValidKeys!0 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun b!63032 () Bool)

(assert (=> b!63032 (= e!41353 #b00000000000000000000000000000000)))

(declare-fun b!63033 () Bool)

(assert (=> b!63033 (= e!41353 e!41354)))

(declare-fun c!8462 () Bool)

(assert (=> b!63033 (= c!8462 (validKeyInArray!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) #b00000000000000000000000000000000)))))

(assert (= (and d!12917 c!8461) b!63032))

(assert (= (and d!12917 (not c!8461)) b!63033))

(assert (= (and b!63033 c!8462) b!63030))

(assert (= (and b!63033 (not c!8462)) b!63031))

(assert (= (or b!63030 b!63031) bm!4974))

(declare-fun m!57121 () Bool)

(assert (=> bm!4974 m!57121))

(declare-fun m!57123 () Bool)

(assert (=> b!63033 m!57123))

(assert (=> b!63033 m!57123))

(declare-fun m!57125 () Bool)

(assert (=> b!63033 m!57125))

(assert (=> b!62922 d!12917))

(declare-fun d!12919 () Bool)

(assert (=> d!12919 (= (apply!68 lt!26255 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) (get!1086 (getValueByKey!126 (toList!702 lt!26255) (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2756 () Bool)

(assert (= bs!2756 d!12919))

(assert (=> bs!2756 m!56285))

(declare-fun m!57127 () Bool)

(assert (=> bs!2756 m!57127))

(assert (=> bs!2756 m!57127))

(declare-fun m!57129 () Bool)

(assert (=> bs!2756 m!57129))

(assert (=> b!62726 d!12919))

(declare-fun d!12921 () Bool)

(declare-fun c!8463 () Bool)

(assert (=> d!12921 (= c!8463 ((_ is ValueCellFull!864) (select (arr!1800 (_values!2071 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!41355 () V!2867)

(assert (=> d!12921 (= (get!1082 (select (arr!1800 (_values!2071 newMap!16)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!41355)))

(declare-fun b!63034 () Bool)

(assert (=> b!63034 (= e!41355 (get!1084 (select (arr!1800 (_values!2071 newMap!16)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!63035 () Bool)

(assert (=> b!63035 (= e!41355 (get!1085 (select (arr!1800 (_values!2071 newMap!16)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12921 c!8463) b!63034))

(assert (= (and d!12921 (not c!8463)) b!63035))

(assert (=> b!63034 m!56517))

(assert (=> b!63034 m!56515))

(declare-fun m!57131 () Bool)

(assert (=> b!63034 m!57131))

(assert (=> b!63035 m!56517))

(assert (=> b!63035 m!56515))

(declare-fun m!57133 () Bool)

(assert (=> b!63035 m!57133))

(assert (=> b!62726 d!12921))

(declare-fun d!12923 () Bool)

(assert (=> d!12923 (= (isDefined!79 (getValueByKey!126 (toList!702 call!4899) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355))) (not (isEmpty!300 (getValueByKey!126 (toList!702 call!4899) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))))

(declare-fun bs!2757 () Bool)

(assert (= bs!2757 d!12923))

(assert (=> bs!2757 m!56551))

(declare-fun m!57135 () Bool)

(assert (=> bs!2757 m!57135))

(assert (=> b!62745 d!12923))

(declare-fun b!63037 () Bool)

(declare-fun e!41356 () Option!132)

(declare-fun e!41357 () Option!132)

(assert (=> b!63037 (= e!41356 e!41357)))

(declare-fun c!8465 () Bool)

(assert (=> b!63037 (= c!8465 (and ((_ is Cons!1435) (toList!702 call!4899)) (not (= (_1!1030 (h!2018 (toList!702 call!4899))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))))

(declare-fun b!63036 () Bool)

(assert (=> b!63036 (= e!41356 (Some!131 (_2!1030 (h!2018 (toList!702 call!4899)))))))

(declare-fun c!8464 () Bool)

(declare-fun d!12925 () Bool)

(assert (=> d!12925 (= c!8464 (and ((_ is Cons!1435) (toList!702 call!4899)) (= (_1!1030 (h!2018 (toList!702 call!4899))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355))))))

(assert (=> d!12925 (= (getValueByKey!126 (toList!702 call!4899) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) e!41356)))

(declare-fun b!63038 () Bool)

(assert (=> b!63038 (= e!41357 (getValueByKey!126 (t!4833 (toList!702 call!4899)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun b!63039 () Bool)

(assert (=> b!63039 (= e!41357 None!130)))

(assert (= (and d!12925 c!8464) b!63036))

(assert (= (and d!12925 (not c!8464)) b!63037))

(assert (= (and b!63037 c!8465) b!63038))

(assert (= (and b!63037 (not c!8465)) b!63039))

(assert (=> b!63038 m!56051))

(declare-fun m!57137 () Bool)

(assert (=> b!63038 m!57137))

(assert (=> b!62745 d!12925))

(declare-fun d!12927 () Bool)

(declare-fun e!41359 () Bool)

(assert (=> d!12927 e!41359))

(declare-fun res!34544 () Bool)

(assert (=> d!12927 (=> res!34544 e!41359)))

(declare-fun lt!26547 () Bool)

(assert (=> d!12927 (= res!34544 (not lt!26547))))

(declare-fun lt!26546 () Bool)

(assert (=> d!12927 (= lt!26547 lt!26546)))

(declare-fun lt!26544 () Unit!1693)

(declare-fun e!41358 () Unit!1693)

(assert (=> d!12927 (= lt!26544 e!41358)))

(declare-fun c!8466 () Bool)

(assert (=> d!12927 (= c!8466 lt!26546)))

(assert (=> d!12927 (= lt!26546 (containsKey!130 (toList!702 lt!26402) (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!12927 (= (contains!690 lt!26402 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) lt!26547)))

(declare-fun b!63040 () Bool)

(declare-fun lt!26545 () Unit!1693)

(assert (=> b!63040 (= e!41358 lt!26545)))

(assert (=> b!63040 (= lt!26545 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 lt!26402) (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63040 (isDefined!79 (getValueByKey!126 (toList!702 lt!26402) (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63041 () Bool)

(declare-fun Unit!1720 () Unit!1693)

(assert (=> b!63041 (= e!41358 Unit!1720)))

(declare-fun b!63042 () Bool)

(assert (=> b!63042 (= e!41359 (isDefined!79 (getValueByKey!126 (toList!702 lt!26402) (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!12927 c!8466) b!63040))

(assert (= (and d!12927 (not c!8466)) b!63041))

(assert (= (and d!12927 (not res!34544)) b!63042))

(assert (=> d!12927 m!56285))

(declare-fun m!57139 () Bool)

(assert (=> d!12927 m!57139))

(assert (=> b!63040 m!56285))

(declare-fun m!57141 () Bool)

(assert (=> b!63040 m!57141))

(assert (=> b!63040 m!56285))

(declare-fun m!57143 () Bool)

(assert (=> b!63040 m!57143))

(assert (=> b!63040 m!57143))

(declare-fun m!57145 () Bool)

(assert (=> b!63040 m!57145))

(assert (=> b!63042 m!56285))

(assert (=> b!63042 m!57143))

(assert (=> b!63042 m!57143))

(assert (=> b!63042 m!57145))

(assert (=> b!62860 d!12927))

(declare-fun d!12929 () Bool)

(declare-fun e!41361 () Bool)

(assert (=> d!12929 e!41361))

(declare-fun res!34545 () Bool)

(assert (=> d!12929 (=> res!34545 e!41361)))

(declare-fun lt!26551 () Bool)

(assert (=> d!12929 (= res!34545 (not lt!26551))))

(declare-fun lt!26550 () Bool)

(assert (=> d!12929 (= lt!26551 lt!26550)))

(declare-fun lt!26548 () Unit!1693)

(declare-fun e!41360 () Unit!1693)

(assert (=> d!12929 (= lt!26548 e!41360)))

(declare-fun c!8467 () Bool)

(assert (=> d!12929 (= c!8467 lt!26550)))

(assert (=> d!12929 (= lt!26550 (containsKey!130 (toList!702 (getCurrentListMap!406 (_keys!3720 newMap!16) lt!26151 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (arr!1799 (_keys!3720 newMap!16)) (index!3042 lt!26125))))))

(assert (=> d!12929 (= (contains!690 (getCurrentListMap!406 (_keys!3720 newMap!16) lt!26151 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (select (arr!1799 (_keys!3720 newMap!16)) (index!3042 lt!26125))) lt!26551)))

(declare-fun b!63043 () Bool)

(declare-fun lt!26549 () Unit!1693)

(assert (=> b!63043 (= e!41360 lt!26549)))

(assert (=> b!63043 (= lt!26549 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 (getCurrentListMap!406 (_keys!3720 newMap!16) lt!26151 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (arr!1799 (_keys!3720 newMap!16)) (index!3042 lt!26125))))))

(assert (=> b!63043 (isDefined!79 (getValueByKey!126 (toList!702 (getCurrentListMap!406 (_keys!3720 newMap!16) lt!26151 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (arr!1799 (_keys!3720 newMap!16)) (index!3042 lt!26125))))))

(declare-fun b!63044 () Bool)

(declare-fun Unit!1721 () Unit!1693)

(assert (=> b!63044 (= e!41360 Unit!1721)))

(declare-fun b!63045 () Bool)

(assert (=> b!63045 (= e!41361 (isDefined!79 (getValueByKey!126 (toList!702 (getCurrentListMap!406 (_keys!3720 newMap!16) lt!26151 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (arr!1799 (_keys!3720 newMap!16)) (index!3042 lt!26125)))))))

(assert (= (and d!12929 c!8467) b!63043))

(assert (= (and d!12929 (not c!8467)) b!63044))

(assert (= (and d!12929 (not res!34545)) b!63045))

(assert (=> d!12929 m!56257))

(declare-fun m!57147 () Bool)

(assert (=> d!12929 m!57147))

(assert (=> b!63043 m!56257))

(declare-fun m!57149 () Bool)

(assert (=> b!63043 m!57149))

(assert (=> b!63043 m!56257))

(declare-fun m!57151 () Bool)

(assert (=> b!63043 m!57151))

(assert (=> b!63043 m!57151))

(declare-fun m!57153 () Bool)

(assert (=> b!63043 m!57153))

(assert (=> b!63045 m!56257))

(assert (=> b!63045 m!57151))

(assert (=> b!63045 m!57151))

(assert (=> b!63045 m!57153))

(assert (=> b!62700 d!12929))

(declare-fun b!63046 () Bool)

(declare-fun e!41371 () Bool)

(declare-fun e!41374 () Bool)

(assert (=> b!63046 (= e!41371 e!41374)))

(declare-fun res!34551 () Bool)

(declare-fun call!4983 () Bool)

(assert (=> b!63046 (= res!34551 call!4983)))

(assert (=> b!63046 (=> (not res!34551) (not e!41374))))

(declare-fun b!63047 () Bool)

(declare-fun res!34552 () Bool)

(declare-fun e!41372 () Bool)

(assert (=> b!63047 (=> (not res!34552) (not e!41372))))

(assert (=> b!63047 (= res!34552 e!41371)))

(declare-fun c!8470 () Bool)

(assert (=> b!63047 (= c!8470 (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!63048 () Bool)

(declare-fun e!41366 () Unit!1693)

(declare-fun lt!26555 () Unit!1693)

(assert (=> b!63048 (= e!41366 lt!26555)))

(declare-fun lt!26559 () ListLongMap!1373)

(assert (=> b!63048 (= lt!26559 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) lt!26151 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26556 () (_ BitVec 64))

(assert (=> b!63048 (= lt!26556 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26565 () (_ BitVec 64))

(assert (=> b!63048 (= lt!26565 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26569 () Unit!1693)

(assert (=> b!63048 (= lt!26569 (addStillContains!44 lt!26559 lt!26556 (zeroValue!2000 newMap!16) lt!26565))))

(assert (=> b!63048 (contains!690 (+!83 lt!26559 (tuple2!2039 lt!26556 (zeroValue!2000 newMap!16))) lt!26565)))

(declare-fun lt!26567 () Unit!1693)

(assert (=> b!63048 (= lt!26567 lt!26569)))

(declare-fun lt!26562 () ListLongMap!1373)

(assert (=> b!63048 (= lt!26562 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) lt!26151 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26554 () (_ BitVec 64))

(assert (=> b!63048 (= lt!26554 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26566 () (_ BitVec 64))

(assert (=> b!63048 (= lt!26566 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26558 () Unit!1693)

(assert (=> b!63048 (= lt!26558 (addApplyDifferent!44 lt!26562 lt!26554 (minValue!2000 newMap!16) lt!26566))))

(assert (=> b!63048 (= (apply!68 (+!83 lt!26562 (tuple2!2039 lt!26554 (minValue!2000 newMap!16))) lt!26566) (apply!68 lt!26562 lt!26566))))

(declare-fun lt!26568 () Unit!1693)

(assert (=> b!63048 (= lt!26568 lt!26558)))

(declare-fun lt!26563 () ListLongMap!1373)

(assert (=> b!63048 (= lt!26563 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) lt!26151 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26573 () (_ BitVec 64))

(assert (=> b!63048 (= lt!26573 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26570 () (_ BitVec 64))

(assert (=> b!63048 (= lt!26570 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26553 () Unit!1693)

(assert (=> b!63048 (= lt!26553 (addApplyDifferent!44 lt!26563 lt!26573 (zeroValue!2000 newMap!16) lt!26570))))

(assert (=> b!63048 (= (apply!68 (+!83 lt!26563 (tuple2!2039 lt!26573 (zeroValue!2000 newMap!16))) lt!26570) (apply!68 lt!26563 lt!26570))))

(declare-fun lt!26552 () Unit!1693)

(assert (=> b!63048 (= lt!26552 lt!26553)))

(declare-fun lt!26557 () ListLongMap!1373)

(assert (=> b!63048 (= lt!26557 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) lt!26151 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26572 () (_ BitVec 64))

(assert (=> b!63048 (= lt!26572 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26560 () (_ BitVec 64))

(assert (=> b!63048 (= lt!26560 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!63048 (= lt!26555 (addApplyDifferent!44 lt!26557 lt!26572 (minValue!2000 newMap!16) lt!26560))))

(assert (=> b!63048 (= (apply!68 (+!83 lt!26557 (tuple2!2039 lt!26572 (minValue!2000 newMap!16))) lt!26560) (apply!68 lt!26557 lt!26560))))

(declare-fun b!63049 () Bool)

(assert (=> b!63049 (= e!41371 (not call!4983))))

(declare-fun call!4979 () ListLongMap!1373)

(declare-fun c!8473 () Bool)

(declare-fun call!4984 () ListLongMap!1373)

(declare-fun call!4981 () ListLongMap!1373)

(declare-fun bm!4976 () Bool)

(declare-fun c!8471 () Bool)

(declare-fun call!4978 () ListLongMap!1373)

(assert (=> bm!4976 (= call!4979 (+!83 (ite c!8471 call!4981 (ite c!8473 call!4978 call!4984)) (ite (or c!8471 c!8473) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))

(declare-fun bm!4977 () Bool)

(assert (=> bm!4977 (= call!4984 call!4978)))

(declare-fun b!63050 () Bool)

(declare-fun e!41370 () Bool)

(declare-fun e!41363 () Bool)

(assert (=> b!63050 (= e!41370 e!41363)))

(declare-fun res!34546 () Bool)

(assert (=> b!63050 (=> (not res!34546) (not e!41363))))

(declare-fun lt!26561 () ListLongMap!1373)

(assert (=> b!63050 (= res!34546 (contains!690 lt!26561 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63050 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(declare-fun bm!4978 () Bool)

(declare-fun call!4982 () Bool)

(assert (=> bm!4978 (= call!4982 (contains!690 lt!26561 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63051 () Bool)

(declare-fun e!41364 () Bool)

(assert (=> b!63051 (= e!41364 (not call!4982))))

(declare-fun bm!4979 () Bool)

(assert (=> bm!4979 (= call!4983 (contains!690 lt!26561 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4980 () Bool)

(declare-fun call!4980 () ListLongMap!1373)

(assert (=> bm!4980 (= call!4980 call!4979)))

(declare-fun b!63052 () Bool)

(declare-fun e!41367 () ListLongMap!1373)

(assert (=> b!63052 (= e!41367 (+!83 call!4979 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))

(declare-fun b!63053 () Bool)

(declare-fun res!34550 () Bool)

(assert (=> b!63053 (=> (not res!34550) (not e!41372))))

(assert (=> b!63053 (= res!34550 e!41370)))

(declare-fun res!34549 () Bool)

(assert (=> b!63053 (=> res!34549 e!41370)))

(declare-fun e!41369 () Bool)

(assert (=> b!63053 (= res!34549 (not e!41369))))

(declare-fun res!34547 () Bool)

(assert (=> b!63053 (=> (not res!34547) (not e!41369))))

(assert (=> b!63053 (= res!34547 (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(declare-fun d!12931 () Bool)

(assert (=> d!12931 e!41372))

(declare-fun res!34548 () Bool)

(assert (=> d!12931 (=> (not res!34548) (not e!41372))))

(assert (=> d!12931 (= res!34548 (or (bvsge #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))))

(declare-fun lt!26571 () ListLongMap!1373)

(assert (=> d!12931 (= lt!26561 lt!26571)))

(declare-fun lt!26564 () Unit!1693)

(assert (=> d!12931 (= lt!26564 e!41366)))

(declare-fun c!8469 () Bool)

(declare-fun e!41373 () Bool)

(assert (=> d!12931 (= c!8469 e!41373)))

(declare-fun res!34553 () Bool)

(assert (=> d!12931 (=> (not res!34553) (not e!41373))))

(assert (=> d!12931 (= res!34553 (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(assert (=> d!12931 (= lt!26571 e!41367)))

(assert (=> d!12931 (= c!8471 (and (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12931 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!12931 (= (getCurrentListMap!406 (_keys!3720 newMap!16) lt!26151 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) lt!26561)))

(declare-fun bm!4975 () Bool)

(assert (=> bm!4975 (= call!4978 call!4981)))

(declare-fun b!63054 () Bool)

(assert (=> b!63054 (= e!41374 (= (apply!68 lt!26561 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2000 newMap!16)))))

(declare-fun b!63055 () Bool)

(declare-fun e!41368 () Bool)

(assert (=> b!63055 (= e!41368 (= (apply!68 lt!26561 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2000 newMap!16)))))

(declare-fun b!63056 () Bool)

(assert (=> b!63056 (= e!41364 e!41368)))

(declare-fun res!34554 () Bool)

(assert (=> b!63056 (= res!34554 call!4982)))

(assert (=> b!63056 (=> (not res!34554) (not e!41368))))

(declare-fun b!63057 () Bool)

(assert (=> b!63057 (= e!41369 (validKeyInArray!0 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63058 () Bool)

(assert (=> b!63058 (= e!41373 (validKeyInArray!0 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63059 () Bool)

(declare-fun Unit!1722 () Unit!1693)

(assert (=> b!63059 (= e!41366 Unit!1722)))

(declare-fun b!63060 () Bool)

(declare-fun e!41365 () ListLongMap!1373)

(assert (=> b!63060 (= e!41365 call!4980)))

(declare-fun bm!4981 () Bool)

(assert (=> bm!4981 (= call!4981 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) lt!26151 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun b!63061 () Bool)

(declare-fun e!41362 () ListLongMap!1373)

(assert (=> b!63061 (= e!41362 call!4984)))

(declare-fun b!63062 () Bool)

(assert (=> b!63062 (= e!41372 e!41364)))

(declare-fun c!8472 () Bool)

(assert (=> b!63062 (= c!8472 (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!63063 () Bool)

(declare-fun c!8468 () Bool)

(assert (=> b!63063 (= c!8468 (and (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!63063 (= e!41365 e!41362)))

(declare-fun b!63064 () Bool)

(assert (=> b!63064 (= e!41362 call!4980)))

(declare-fun b!63065 () Bool)

(assert (=> b!63065 (= e!41363 (= (apply!68 lt!26561 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) (get!1082 (select (arr!1800 lt!26151) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!63065 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2032 lt!26151)))))

(assert (=> b!63065 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(declare-fun b!63066 () Bool)

(assert (=> b!63066 (= e!41367 e!41365)))

(assert (=> b!63066 (= c!8473 (and (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!12931 c!8471) b!63052))

(assert (= (and d!12931 (not c!8471)) b!63066))

(assert (= (and b!63066 c!8473) b!63060))

(assert (= (and b!63066 (not c!8473)) b!63063))

(assert (= (and b!63063 c!8468) b!63064))

(assert (= (and b!63063 (not c!8468)) b!63061))

(assert (= (or b!63064 b!63061) bm!4977))

(assert (= (or b!63060 bm!4977) bm!4975))

(assert (= (or b!63060 b!63064) bm!4980))

(assert (= (or b!63052 bm!4975) bm!4981))

(assert (= (or b!63052 bm!4980) bm!4976))

(assert (= (and d!12931 res!34553) b!63058))

(assert (= (and d!12931 c!8469) b!63048))

(assert (= (and d!12931 (not c!8469)) b!63059))

(assert (= (and d!12931 res!34548) b!63053))

(assert (= (and b!63053 res!34547) b!63057))

(assert (= (and b!63053 (not res!34549)) b!63050))

(assert (= (and b!63050 res!34546) b!63065))

(assert (= (and b!63053 res!34550) b!63047))

(assert (= (and b!63047 c!8470) b!63046))

(assert (= (and b!63047 (not c!8470)) b!63049))

(assert (= (and b!63046 res!34551) b!63054))

(assert (= (or b!63046 b!63049) bm!4979))

(assert (= (and b!63047 res!34552) b!63062))

(assert (= (and b!63062 c!8472) b!63056))

(assert (= (and b!63062 (not c!8472)) b!63051))

(assert (= (and b!63056 res!34554) b!63055))

(assert (= (or b!63056 b!63051) bm!4978))

(declare-fun b_lambda!2821 () Bool)

(assert (=> (not b_lambda!2821) (not b!63065)))

(assert (=> b!63065 t!4841))

(declare-fun b_and!3863 () Bool)

(assert (= b_and!3859 (and (=> t!4841 result!2459) b_and!3863)))

(assert (=> b!63065 t!4843))

(declare-fun b_and!3865 () Bool)

(assert (= b_and!3861 (and (=> t!4843 result!2461) b_and!3865)))

(assert (=> b!63058 m!56285))

(assert (=> b!63058 m!56285))

(assert (=> b!63058 m!56287))

(declare-fun m!57155 () Bool)

(assert (=> b!63048 m!57155))

(declare-fun m!57157 () Bool)

(assert (=> b!63048 m!57157))

(declare-fun m!57159 () Bool)

(assert (=> b!63048 m!57159))

(declare-fun m!57161 () Bool)

(assert (=> b!63048 m!57161))

(declare-fun m!57163 () Bool)

(assert (=> b!63048 m!57163))

(declare-fun m!57165 () Bool)

(assert (=> b!63048 m!57165))

(declare-fun m!57167 () Bool)

(assert (=> b!63048 m!57167))

(declare-fun m!57169 () Bool)

(assert (=> b!63048 m!57169))

(declare-fun m!57171 () Bool)

(assert (=> b!63048 m!57171))

(declare-fun m!57173 () Bool)

(assert (=> b!63048 m!57173))

(declare-fun m!57175 () Bool)

(assert (=> b!63048 m!57175))

(declare-fun m!57177 () Bool)

(assert (=> b!63048 m!57177))

(declare-fun m!57179 () Bool)

(assert (=> b!63048 m!57179))

(declare-fun m!57181 () Bool)

(assert (=> b!63048 m!57181))

(assert (=> b!63048 m!56285))

(assert (=> b!63048 m!57179))

(declare-fun m!57183 () Bool)

(assert (=> b!63048 m!57183))

(assert (=> b!63048 m!57175))

(assert (=> b!63048 m!57161))

(declare-fun m!57185 () Bool)

(assert (=> b!63048 m!57185))

(assert (=> b!63048 m!57169))

(declare-fun m!57187 () Bool)

(assert (=> b!63054 m!57187))

(assert (=> bm!4981 m!57181))

(assert (=> b!63057 m!56285))

(assert (=> b!63057 m!56285))

(assert (=> b!63057 m!56287))

(assert (=> d!12931 m!56299))

(assert (=> b!63065 m!56285))

(declare-fun m!57189 () Bool)

(assert (=> b!63065 m!57189))

(assert (=> b!63065 m!56515))

(declare-fun m!57191 () Bool)

(assert (=> b!63065 m!57191))

(assert (=> b!63065 m!56285))

(assert (=> b!63065 m!57191))

(assert (=> b!63065 m!56515))

(declare-fun m!57193 () Bool)

(assert (=> b!63065 m!57193))

(assert (=> b!63050 m!56285))

(assert (=> b!63050 m!56285))

(declare-fun m!57195 () Bool)

(assert (=> b!63050 m!57195))

(declare-fun m!57197 () Bool)

(assert (=> b!63055 m!57197))

(declare-fun m!57199 () Bool)

(assert (=> bm!4976 m!57199))

(declare-fun m!57201 () Bool)

(assert (=> b!63052 m!57201))

(declare-fun m!57203 () Bool)

(assert (=> bm!4979 m!57203))

(declare-fun m!57205 () Bool)

(assert (=> bm!4978 m!57205))

(assert (=> b!62700 d!12931))

(declare-fun d!12933 () Bool)

(assert (=> d!12933 (= (validKeyInArray!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) (and (not (= (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62892 d!12933))

(declare-fun d!12935 () Bool)

(assert (=> d!12935 (= (isDefined!79 (getValueByKey!126 (toList!702 (+!83 lt!26044 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26050)) (not (isEmpty!300 (getValueByKey!126 (toList!702 (+!83 lt!26044 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26050))))))

(declare-fun bs!2758 () Bool)

(assert (= bs!2758 d!12935))

(assert (=> bs!2758 m!56355))

(declare-fun m!57207 () Bool)

(assert (=> bs!2758 m!57207))

(assert (=> b!62634 d!12935))

(declare-fun b!63068 () Bool)

(declare-fun e!41375 () Option!132)

(declare-fun e!41376 () Option!132)

(assert (=> b!63068 (= e!41375 e!41376)))

(declare-fun c!8475 () Bool)

(assert (=> b!63068 (= c!8475 (and ((_ is Cons!1435) (toList!702 (+!83 lt!26044 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))) (not (= (_1!1030 (h!2018 (toList!702 (+!83 lt!26044 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))) lt!26050))))))

(declare-fun b!63067 () Bool)

(assert (=> b!63067 (= e!41375 (Some!131 (_2!1030 (h!2018 (toList!702 (+!83 lt!26044 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))))))))

(declare-fun c!8474 () Bool)

(declare-fun d!12937 () Bool)

(assert (=> d!12937 (= c!8474 (and ((_ is Cons!1435) (toList!702 (+!83 lt!26044 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))) (= (_1!1030 (h!2018 (toList!702 (+!83 lt!26044 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))) lt!26050)))))

(assert (=> d!12937 (= (getValueByKey!126 (toList!702 (+!83 lt!26044 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26050) e!41375)))

(declare-fun b!63069 () Bool)

(assert (=> b!63069 (= e!41376 (getValueByKey!126 (t!4833 (toList!702 (+!83 lt!26044 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))) lt!26050))))

(declare-fun b!63070 () Bool)

(assert (=> b!63070 (= e!41376 None!130)))

(assert (= (and d!12937 c!8474) b!63067))

(assert (= (and d!12937 (not c!8474)) b!63068))

(assert (= (and b!63068 c!8475) b!63069))

(assert (= (and b!63068 (not c!8475)) b!63070))

(declare-fun m!57209 () Bool)

(assert (=> b!63069 m!57209))

(assert (=> b!62634 d!12937))

(declare-fun d!12939 () Bool)

(declare-fun res!34555 () Bool)

(declare-fun e!41377 () Bool)

(assert (=> d!12939 (=> res!34555 e!41377)))

(assert (=> d!12939 (= res!34555 (= (select (arr!1799 (_keys!3720 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> d!12939 (= (arrayContainsKey!0 (_keys!3720 newMap!16) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) e!41377)))

(declare-fun b!63071 () Bool)

(declare-fun e!41378 () Bool)

(assert (=> b!63071 (= e!41377 e!41378)))

(declare-fun res!34556 () Bool)

(assert (=> b!63071 (=> (not res!34556) (not e!41378))))

(assert (=> b!63071 (= res!34556 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2031 (_keys!3720 newMap!16))))))

(declare-fun b!63072 () Bool)

(assert (=> b!63072 (= e!41378 (arrayContainsKey!0 (_keys!3720 newMap!16) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!12939 (not res!34555)) b!63071))

(assert (= (and b!63071 res!34556) b!63072))

(declare-fun m!57211 () Bool)

(assert (=> d!12939 m!57211))

(assert (=> b!63072 m!56051))

(declare-fun m!57213 () Bool)

(assert (=> b!63072 m!57213))

(assert (=> b!62753 d!12939))

(declare-fun d!12941 () Bool)

(declare-fun res!34558 () Bool)

(declare-fun e!41379 () Bool)

(assert (=> d!12941 (=> res!34558 e!41379)))

(assert (=> d!12941 (= res!34558 (bvsge #b00000000000000000000000000000000 (size!2031 (_keys!3720 (_2!1031 lt!26150)))))))

(assert (=> d!12941 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3720 (_2!1031 lt!26150)) (mask!5994 (_2!1031 lt!26150))) e!41379)))

(declare-fun b!63073 () Bool)

(declare-fun e!41381 () Bool)

(assert (=> b!63073 (= e!41379 e!41381)))

(declare-fun c!8476 () Bool)

(assert (=> b!63073 (= c!8476 (validKeyInArray!0 (select (arr!1799 (_keys!3720 (_2!1031 lt!26150))) #b00000000000000000000000000000000)))))

(declare-fun bm!4982 () Bool)

(declare-fun call!4985 () Bool)

(assert (=> bm!4982 (= call!4985 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3720 (_2!1031 lt!26150)) (mask!5994 (_2!1031 lt!26150))))))

(declare-fun b!63074 () Bool)

(declare-fun e!41380 () Bool)

(assert (=> b!63074 (= e!41380 call!4985)))

(declare-fun b!63075 () Bool)

(assert (=> b!63075 (= e!41381 call!4985)))

(declare-fun b!63076 () Bool)

(assert (=> b!63076 (= e!41381 e!41380)))

(declare-fun lt!26575 () (_ BitVec 64))

(assert (=> b!63076 (= lt!26575 (select (arr!1799 (_keys!3720 (_2!1031 lt!26150))) #b00000000000000000000000000000000))))

(declare-fun lt!26576 () Unit!1693)

(assert (=> b!63076 (= lt!26576 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3720 (_2!1031 lt!26150)) lt!26575 #b00000000000000000000000000000000))))

(assert (=> b!63076 (arrayContainsKey!0 (_keys!3720 (_2!1031 lt!26150)) lt!26575 #b00000000000000000000000000000000)))

(declare-fun lt!26574 () Unit!1693)

(assert (=> b!63076 (= lt!26574 lt!26576)))

(declare-fun res!34557 () Bool)

(assert (=> b!63076 (= res!34557 (= (seekEntryOrOpen!0 (select (arr!1799 (_keys!3720 (_2!1031 lt!26150))) #b00000000000000000000000000000000) (_keys!3720 (_2!1031 lt!26150)) (mask!5994 (_2!1031 lt!26150))) (Found!229 #b00000000000000000000000000000000)))))

(assert (=> b!63076 (=> (not res!34557) (not e!41380))))

(assert (= (and d!12941 (not res!34558)) b!63073))

(assert (= (and b!63073 c!8476) b!63076))

(assert (= (and b!63073 (not c!8476)) b!63075))

(assert (= (and b!63076 res!34557) b!63074))

(assert (= (or b!63074 b!63075) bm!4982))

(declare-fun m!57215 () Bool)

(assert (=> b!63073 m!57215))

(assert (=> b!63073 m!57215))

(declare-fun m!57217 () Bool)

(assert (=> b!63073 m!57217))

(declare-fun m!57219 () Bool)

(assert (=> bm!4982 m!57219))

(assert (=> b!63076 m!57215))

(declare-fun m!57221 () Bool)

(assert (=> b!63076 m!57221))

(declare-fun m!57223 () Bool)

(assert (=> b!63076 m!57223))

(assert (=> b!63076 m!57215))

(declare-fun m!57225 () Bool)

(assert (=> b!63076 m!57225))

(assert (=> b!62920 d!12941))

(declare-fun d!12943 () Bool)

(declare-fun e!41383 () Bool)

(assert (=> d!12943 e!41383))

(declare-fun res!34559 () Bool)

(assert (=> d!12943 (=> res!34559 e!41383)))

(declare-fun lt!26580 () Bool)

(assert (=> d!12943 (= res!34559 (not lt!26580))))

(declare-fun lt!26579 () Bool)

(assert (=> d!12943 (= lt!26580 lt!26579)))

(declare-fun lt!26577 () Unit!1693)

(declare-fun e!41382 () Unit!1693)

(assert (=> d!12943 (= lt!26577 e!41382)))

(declare-fun c!8477 () Bool)

(assert (=> d!12943 (= c!8477 lt!26579)))

(assert (=> d!12943 (= lt!26579 (containsKey!130 (toList!702 lt!26255) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12943 (= (contains!690 lt!26255 #b0000000000000000000000000000000000000000000000000000000000000000) lt!26580)))

(declare-fun b!63077 () Bool)

(declare-fun lt!26578 () Unit!1693)

(assert (=> b!63077 (= e!41382 lt!26578)))

(assert (=> b!63077 (= lt!26578 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 lt!26255) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63077 (isDefined!79 (getValueByKey!126 (toList!702 lt!26255) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63078 () Bool)

(declare-fun Unit!1723 () Unit!1693)

(assert (=> b!63078 (= e!41382 Unit!1723)))

(declare-fun b!63079 () Bool)

(assert (=> b!63079 (= e!41383 (isDefined!79 (getValueByKey!126 (toList!702 lt!26255) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12943 c!8477) b!63077))

(assert (= (and d!12943 (not c!8477)) b!63078))

(assert (= (and d!12943 (not res!34559)) b!63079))

(declare-fun m!57227 () Bool)

(assert (=> d!12943 m!57227))

(declare-fun m!57229 () Bool)

(assert (=> b!63077 m!57229))

(declare-fun m!57231 () Bool)

(assert (=> b!63077 m!57231))

(assert (=> b!63077 m!57231))

(declare-fun m!57233 () Bool)

(assert (=> b!63077 m!57233))

(assert (=> b!63079 m!57231))

(assert (=> b!63079 m!57231))

(assert (=> b!63079 m!57233))

(assert (=> bm!4932 d!12943))

(declare-fun b!63081 () Bool)

(declare-fun e!41384 () Option!132)

(declare-fun e!41385 () Option!132)

(assert (=> b!63081 (= e!41384 e!41385)))

(declare-fun c!8479 () Bool)

(assert (=> b!63081 (= c!8479 (and ((_ is Cons!1435) (toList!702 lt!26455)) (not (= (_1!1030 (h!2018 (toList!702 lt!26455))) (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!63080 () Bool)

(assert (=> b!63080 (= e!41384 (Some!131 (_2!1030 (h!2018 (toList!702 lt!26455)))))))

(declare-fun c!8478 () Bool)

(declare-fun d!12945 () Bool)

(assert (=> d!12945 (= c!8478 (and ((_ is Cons!1435) (toList!702 lt!26455)) (= (_1!1030 (h!2018 (toList!702 lt!26455))) (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!12945 (= (getValueByKey!126 (toList!702 lt!26455) (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!41384)))

(declare-fun b!63082 () Bool)

(assert (=> b!63082 (= e!41385 (getValueByKey!126 (t!4833 (toList!702 lt!26455)) (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!63083 () Bool)

(assert (=> b!63083 (= e!41385 None!130)))

(assert (= (and d!12945 c!8478) b!63080))

(assert (= (and d!12945 (not c!8478)) b!63081))

(assert (= (and b!63081 c!8479) b!63082))

(assert (= (and b!63081 (not c!8479)) b!63083))

(declare-fun m!57235 () Bool)

(assert (=> b!63082 m!57235))

(assert (=> b!62917 d!12945))

(declare-fun d!12947 () Bool)

(assert (=> d!12947 (= (apply!68 lt!26402 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1086 (getValueByKey!126 (toList!702 lt!26402) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2759 () Bool)

(assert (= bs!2759 d!12947))

(declare-fun m!57237 () Bool)

(assert (=> bs!2759 m!57237))

(assert (=> bs!2759 m!57237))

(declare-fun m!57239 () Bool)

(assert (=> bs!2759 m!57239))

(assert (=> b!62865 d!12947))

(declare-fun d!12949 () Bool)

(assert (=> d!12949 (= (+!83 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!406 (_keys!3720 newMap!16) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (index!3042 lt!26125) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(assert (=> d!12949 true))

(declare-fun _$5!68 () Unit!1693)

(assert (=> d!12949 (= (choose!334 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (index!3042 lt!26125) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2088 newMap!16)) _$5!68)))

(declare-fun bs!2760 () Bool)

(assert (= bs!2760 d!12949))

(assert (=> bs!2760 m!56151))

(assert (=> bs!2760 m!56151))

(assert (=> bs!2760 m!56467))

(assert (=> bs!2760 m!56235))

(assert (=> bs!2760 m!56469))

(assert (=> d!12755 d!12949))

(assert (=> d!12755 d!12901))

(declare-fun lt!26583 () Bool)

(declare-fun d!12951 () Bool)

(declare-fun content!68 (List!1439) (InoxSet tuple2!2038))

(assert (=> d!12951 (= lt!26583 (select (content!68 (toList!702 lt!26178)) (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun e!41390 () Bool)

(assert (=> d!12951 (= lt!26583 e!41390)))

(declare-fun res!34564 () Bool)

(assert (=> d!12951 (=> (not res!34564) (not e!41390))))

(assert (=> d!12951 (= res!34564 ((_ is Cons!1435) (toList!702 lt!26178)))))

(assert (=> d!12951 (= (contains!693 (toList!702 lt!26178) (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26583)))

(declare-fun b!63088 () Bool)

(declare-fun e!41391 () Bool)

(assert (=> b!63088 (= e!41390 e!41391)))

(declare-fun res!34565 () Bool)

(assert (=> b!63088 (=> res!34565 e!41391)))

(assert (=> b!63088 (= res!34565 (= (h!2018 (toList!702 lt!26178)) (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63089 () Bool)

(assert (=> b!63089 (= e!41391 (contains!693 (t!4833 (toList!702 lt!26178)) (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(assert (= (and d!12951 res!34564) b!63088))

(assert (= (and b!63088 (not res!34565)) b!63089))

(declare-fun m!57241 () Bool)

(assert (=> d!12951 m!57241))

(declare-fun m!57243 () Bool)

(assert (=> d!12951 m!57243))

(declare-fun m!57245 () Bool)

(assert (=> b!63089 m!57245))

(assert (=> b!62623 d!12951))

(declare-fun lt!26584 () Bool)

(declare-fun d!12953 () Bool)

(assert (=> d!12953 (= lt!26584 (select (content!68 (toList!702 lt!26235)) (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun e!41392 () Bool)

(assert (=> d!12953 (= lt!26584 e!41392)))

(declare-fun res!34566 () Bool)

(assert (=> d!12953 (=> (not res!34566) (not e!41392))))

(assert (=> d!12953 (= res!34566 ((_ is Cons!1435) (toList!702 lt!26235)))))

(assert (=> d!12953 (= (contains!693 (toList!702 lt!26235) (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))) lt!26584)))

(declare-fun b!63090 () Bool)

(declare-fun e!41393 () Bool)

(assert (=> b!63090 (= e!41392 e!41393)))

(declare-fun res!34567 () Bool)

(assert (=> b!63090 (=> res!34567 e!41393)))

(assert (=> b!63090 (= res!34567 (= (h!2018 (toList!702 lt!26235)) (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun b!63091 () Bool)

(assert (=> b!63091 (= e!41393 (contains!693 (t!4833 (toList!702 lt!26235)) (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))))

(assert (= (and d!12953 res!34566) b!63090))

(assert (= (and b!63090 (not res!34567)) b!63091))

(declare-fun m!57247 () Bool)

(assert (=> d!12953 m!57247))

(declare-fun m!57249 () Bool)

(assert (=> d!12953 m!57249))

(declare-fun m!57251 () Bool)

(assert (=> b!63091 m!57251))

(assert (=> b!62683 d!12953))

(declare-fun d!12955 () Bool)

(assert (=> d!12955 (= (get!1086 (getValueByKey!126 (toList!702 lt!26046) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (v!2423 (getValueByKey!126 (toList!702 lt!26046) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!12745 d!12955))

(assert (=> d!12745 d!12841))

(assert (=> d!12727 d!12713))

(declare-fun d!12957 () Bool)

(assert (=> d!12957 (= (apply!68 (+!83 lt!26042 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) lt!26045) (apply!68 lt!26042 lt!26045))))

(assert (=> d!12957 true))

(declare-fun _$34!775 () Unit!1693)

(assert (=> d!12957 (= (choose!331 lt!26042 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992))) lt!26045) _$34!775)))

(declare-fun bs!2761 () Bool)

(assert (= bs!2761 d!12957))

(assert (=> bs!2761 m!56179))

(assert (=> bs!2761 m!56179))

(assert (=> bs!2761 m!56183))

(assert (=> bs!2761 m!56159))

(assert (=> d!12727 d!12957))

(assert (=> d!12727 d!12725))

(declare-fun d!12959 () Bool)

(declare-fun e!41395 () Bool)

(assert (=> d!12959 e!41395))

(declare-fun res!34568 () Bool)

(assert (=> d!12959 (=> res!34568 e!41395)))

(declare-fun lt!26588 () Bool)

(assert (=> d!12959 (= res!34568 (not lt!26588))))

(declare-fun lt!26587 () Bool)

(assert (=> d!12959 (= lt!26588 lt!26587)))

(declare-fun lt!26585 () Unit!1693)

(declare-fun e!41394 () Unit!1693)

(assert (=> d!12959 (= lt!26585 e!41394)))

(declare-fun c!8480 () Bool)

(assert (=> d!12959 (= c!8480 lt!26587)))

(assert (=> d!12959 (= lt!26587 (containsKey!130 (toList!702 lt!26042) lt!26045))))

(assert (=> d!12959 (= (contains!690 lt!26042 lt!26045) lt!26588)))

(declare-fun b!63093 () Bool)

(declare-fun lt!26586 () Unit!1693)

(assert (=> b!63093 (= e!41394 lt!26586)))

(assert (=> b!63093 (= lt!26586 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 lt!26042) lt!26045))))

(assert (=> b!63093 (isDefined!79 (getValueByKey!126 (toList!702 lt!26042) lt!26045))))

(declare-fun b!63094 () Bool)

(declare-fun Unit!1724 () Unit!1693)

(assert (=> b!63094 (= e!41394 Unit!1724)))

(declare-fun b!63095 () Bool)

(assert (=> b!63095 (= e!41395 (isDefined!79 (getValueByKey!126 (toList!702 lt!26042) lt!26045)))))

(assert (= (and d!12959 c!8480) b!63093))

(assert (= (and d!12959 (not c!8480)) b!63094))

(assert (= (and d!12959 (not res!34568)) b!63095))

(declare-fun m!57253 () Bool)

(assert (=> d!12959 m!57253))

(declare-fun m!57255 () Bool)

(assert (=> b!63093 m!57255))

(assert (=> b!63093 m!56363))

(assert (=> b!63093 m!56363))

(declare-fun m!57257 () Bool)

(assert (=> b!63093 m!57257))

(assert (=> b!63095 m!56363))

(assert (=> b!63095 m!56363))

(assert (=> b!63095 m!57257))

(assert (=> d!12727 d!12959))

(assert (=> d!12727 d!12721))

(declare-fun d!12961 () Bool)

(declare-fun lt!26589 () Bool)

(assert (=> d!12961 (= lt!26589 (select (content!68 (toList!702 lt!26201)) (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun e!41396 () Bool)

(assert (=> d!12961 (= lt!26589 e!41396)))

(declare-fun res!34569 () Bool)

(assert (=> d!12961 (=> (not res!34569) (not e!41396))))

(assert (=> d!12961 (= res!34569 ((_ is Cons!1435) (toList!702 lt!26201)))))

(assert (=> d!12961 (= (contains!693 (toList!702 lt!26201) (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))) lt!26589)))

(declare-fun b!63096 () Bool)

(declare-fun e!41397 () Bool)

(assert (=> b!63096 (= e!41396 e!41397)))

(declare-fun res!34570 () Bool)

(assert (=> b!63096 (=> res!34570 e!41397)))

(assert (=> b!63096 (= res!34570 (= (h!2018 (toList!702 lt!26201)) (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun b!63097 () Bool)

(assert (=> b!63097 (= e!41397 (contains!693 (t!4833 (toList!702 lt!26201)) (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))))

(assert (= (and d!12961 res!34569) b!63096))

(assert (= (and b!63096 (not res!34570)) b!63097))

(declare-fun m!57259 () Bool)

(assert (=> d!12961 m!57259))

(declare-fun m!57261 () Bool)

(assert (=> d!12961 m!57261))

(declare-fun m!57263 () Bool)

(assert (=> b!63097 m!57263))

(assert (=> b!62640 d!12961))

(assert (=> b!62719 d!12831))

(declare-fun d!12963 () Bool)

(declare-fun e!41399 () Bool)

(assert (=> d!12963 e!41399))

(declare-fun res!34571 () Bool)

(assert (=> d!12963 (=> res!34571 e!41399)))

(declare-fun lt!26593 () Bool)

(assert (=> d!12963 (= res!34571 (not lt!26593))))

(declare-fun lt!26592 () Bool)

(assert (=> d!12963 (= lt!26593 lt!26592)))

(declare-fun lt!26590 () Unit!1693)

(declare-fun e!41398 () Unit!1693)

(assert (=> d!12963 (= lt!26590 e!41398)))

(declare-fun c!8481 () Bool)

(assert (=> d!12963 (= c!8481 lt!26592)))

(assert (=> d!12963 (= lt!26592 (containsKey!130 (toList!702 lt!26281) (_1!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!12963 (= (contains!690 lt!26281 (_1!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!26593)))

(declare-fun b!63098 () Bool)

(declare-fun lt!26591 () Unit!1693)

(assert (=> b!63098 (= e!41398 lt!26591)))

(assert (=> b!63098 (= lt!26591 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 lt!26281) (_1!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!63098 (isDefined!79 (getValueByKey!126 (toList!702 lt!26281) (_1!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!63099 () Bool)

(declare-fun Unit!1725 () Unit!1693)

(assert (=> b!63099 (= e!41398 Unit!1725)))

(declare-fun b!63100 () Bool)

(assert (=> b!63100 (= e!41399 (isDefined!79 (getValueByKey!126 (toList!702 lt!26281) (_1!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!12963 c!8481) b!63098))

(assert (= (and d!12963 (not c!8481)) b!63099))

(assert (= (and d!12963 (not res!34571)) b!63100))

(declare-fun m!57265 () Bool)

(assert (=> d!12963 m!57265))

(declare-fun m!57267 () Bool)

(assert (=> b!63098 m!57267))

(assert (=> b!63098 m!56575))

(assert (=> b!63098 m!56575))

(declare-fun m!57269 () Bool)

(assert (=> b!63098 m!57269))

(assert (=> b!63100 m!56575))

(assert (=> b!63100 m!56575))

(assert (=> b!63100 m!57269))

(assert (=> d!12783 d!12963))

(declare-fun b!63102 () Bool)

(declare-fun e!41400 () Option!132)

(declare-fun e!41401 () Option!132)

(assert (=> b!63102 (= e!41400 e!41401)))

(declare-fun c!8483 () Bool)

(assert (=> b!63102 (= c!8483 (and ((_ is Cons!1435) lt!26280) (not (= (_1!1030 (h!2018 lt!26280)) (_1!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun b!63101 () Bool)

(assert (=> b!63101 (= e!41400 (Some!131 (_2!1030 (h!2018 lt!26280))))))

(declare-fun c!8482 () Bool)

(declare-fun d!12965 () Bool)

(assert (=> d!12965 (= c!8482 (and ((_ is Cons!1435) lt!26280) (= (_1!1030 (h!2018 lt!26280)) (_1!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!12965 (= (getValueByKey!126 lt!26280 (_1!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!41400)))

(declare-fun b!63103 () Bool)

(assert (=> b!63103 (= e!41401 (getValueByKey!126 (t!4833 lt!26280) (_1!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!63104 () Bool)

(assert (=> b!63104 (= e!41401 None!130)))

(assert (= (and d!12965 c!8482) b!63101))

(assert (= (and d!12965 (not c!8482)) b!63102))

(assert (= (and b!63102 c!8483) b!63103))

(assert (= (and b!63102 (not c!8483)) b!63104))

(declare-fun m!57271 () Bool)

(assert (=> b!63103 m!57271))

(assert (=> d!12783 d!12965))

(declare-fun d!12967 () Bool)

(assert (=> d!12967 (= (getValueByKey!126 lt!26280 (_1!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!131 (_2!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!26596 () Unit!1693)

(declare-fun choose!340 (List!1439 (_ BitVec 64) V!2867) Unit!1693)

(assert (=> d!12967 (= lt!26596 (choose!340 lt!26280 (_1!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!41404 () Bool)

(assert (=> d!12967 e!41404))

(declare-fun res!34576 () Bool)

(assert (=> d!12967 (=> (not res!34576) (not e!41404))))

(assert (=> d!12967 (= res!34576 (isStrictlySorted!286 lt!26280))))

(assert (=> d!12967 (= (lemmaContainsTupThenGetReturnValue!43 lt!26280 (_1!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!26596)))

(declare-fun b!63109 () Bool)

(declare-fun res!34577 () Bool)

(assert (=> b!63109 (=> (not res!34577) (not e!41404))))

(assert (=> b!63109 (= res!34577 (containsKey!130 lt!26280 (_1!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!63110 () Bool)

(assert (=> b!63110 (= e!41404 (contains!693 lt!26280 (tuple2!2039 (_1!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!12967 res!34576) b!63109))

(assert (= (and b!63109 res!34577) b!63110))

(assert (=> d!12967 m!56569))

(declare-fun m!57273 () Bool)

(assert (=> d!12967 m!57273))

(declare-fun m!57275 () Bool)

(assert (=> d!12967 m!57275))

(declare-fun m!57277 () Bool)

(assert (=> b!63109 m!57277))

(declare-fun m!57279 () Bool)

(assert (=> b!63110 m!57279))

(assert (=> d!12783 d!12967))

(declare-fun b!63131 () Bool)

(declare-fun e!41418 () List!1439)

(declare-fun call!4994 () List!1439)

(assert (=> b!63131 (= e!41418 call!4994)))

(declare-fun c!8492 () Bool)

(declare-fun c!8493 () Bool)

(declare-fun b!63132 () Bool)

(declare-fun e!41415 () List!1439)

(assert (=> b!63132 (= e!41415 (ite c!8492 (t!4833 (toList!702 e!41069)) (ite c!8493 (Cons!1435 (h!2018 (toList!702 e!41069)) (t!4833 (toList!702 e!41069))) Nil!1436)))))

(declare-fun bm!4989 () Bool)

(declare-fun call!4993 () List!1439)

(declare-fun call!4992 () List!1439)

(assert (=> bm!4989 (= call!4993 call!4992)))

(declare-fun b!63133 () Bool)

(declare-fun e!41416 () List!1439)

(assert (=> b!63133 (= e!41416 call!4992)))

(declare-fun b!63134 () Bool)

(assert (=> b!63134 (= e!41415 (insertStrictlySorted!46 (t!4833 (toList!702 e!41069)) (_1!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!63135 () Bool)

(declare-fun res!34583 () Bool)

(declare-fun e!41419 () Bool)

(assert (=> b!63135 (=> (not res!34583) (not e!41419))))

(declare-fun lt!26599 () List!1439)

(assert (=> b!63135 (= res!34583 (containsKey!130 lt!26599 (_1!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!63136 () Bool)

(assert (=> b!63136 (= e!41419 (contains!693 lt!26599 (tuple2!2039 (_1!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!63137 () Bool)

(assert (=> b!63137 (= e!41418 call!4994)))

(declare-fun d!12969 () Bool)

(assert (=> d!12969 e!41419))

(declare-fun res!34582 () Bool)

(assert (=> d!12969 (=> (not res!34582) (not e!41419))))

(assert (=> d!12969 (= res!34582 (isStrictlySorted!286 lt!26599))))

(assert (=> d!12969 (= lt!26599 e!41416)))

(declare-fun c!8494 () Bool)

(assert (=> d!12969 (= c!8494 (and ((_ is Cons!1435) (toList!702 e!41069)) (bvslt (_1!1030 (h!2018 (toList!702 e!41069))) (_1!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!12969 (isStrictlySorted!286 (toList!702 e!41069))))

(assert (=> d!12969 (= (insertStrictlySorted!46 (toList!702 e!41069) (_1!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!26599)))

(declare-fun bm!4990 () Bool)

(declare-fun $colon$colon!62 (List!1439 tuple2!2038) List!1439)

(assert (=> bm!4990 (= call!4992 ($colon$colon!62 e!41415 (ite c!8494 (h!2018 (toList!702 e!41069)) (tuple2!2039 (_1!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun c!8495 () Bool)

(assert (=> bm!4990 (= c!8495 c!8494)))

(declare-fun b!63138 () Bool)

(declare-fun e!41417 () List!1439)

(assert (=> b!63138 (= e!41416 e!41417)))

(assert (=> b!63138 (= c!8492 (and ((_ is Cons!1435) (toList!702 e!41069)) (= (_1!1030 (h!2018 (toList!702 e!41069))) (_1!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!63139 () Bool)

(assert (=> b!63139 (= c!8493 (and ((_ is Cons!1435) (toList!702 e!41069)) (bvsgt (_1!1030 (h!2018 (toList!702 e!41069))) (_1!1030 (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> b!63139 (= e!41417 e!41418)))

(declare-fun bm!4991 () Bool)

(assert (=> bm!4991 (= call!4994 call!4993)))

(declare-fun b!63140 () Bool)

(assert (=> b!63140 (= e!41417 call!4993)))

(assert (= (and d!12969 c!8494) b!63133))

(assert (= (and d!12969 (not c!8494)) b!63138))

(assert (= (and b!63138 c!8492) b!63140))

(assert (= (and b!63138 (not c!8492)) b!63139))

(assert (= (and b!63139 c!8493) b!63137))

(assert (= (and b!63139 (not c!8493)) b!63131))

(assert (= (or b!63137 b!63131) bm!4991))

(assert (= (or b!63140 bm!4991) bm!4989))

(assert (= (or b!63133 bm!4989) bm!4990))

(assert (= (and bm!4990 c!8495) b!63134))

(assert (= (and bm!4990 (not c!8495)) b!63132))

(assert (= (and d!12969 res!34582) b!63135))

(assert (= (and b!63135 res!34583) b!63136))

(declare-fun m!57281 () Bool)

(assert (=> b!63134 m!57281))

(declare-fun m!57283 () Bool)

(assert (=> bm!4990 m!57283))

(declare-fun m!57285 () Bool)

(assert (=> b!63135 m!57285))

(declare-fun m!57287 () Bool)

(assert (=> b!63136 m!57287))

(declare-fun m!57289 () Bool)

(assert (=> d!12969 m!57289))

(declare-fun m!57291 () Bool)

(assert (=> d!12969 m!57291))

(assert (=> d!12783 d!12969))

(declare-fun d!12971 () Bool)

(assert (=> d!12971 (= (apply!68 lt!26255 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1086 (getValueByKey!126 (toList!702 lt!26255) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2762 () Bool)

(assert (= bs!2762 d!12971))

(assert (=> bs!2762 m!57231))

(assert (=> bs!2762 m!57231))

(declare-fun m!57293 () Bool)

(assert (=> bs!2762 m!57293))

(assert (=> b!62715 d!12971))

(assert (=> d!12739 d!12717))

(assert (=> d!12739 d!12723))

(declare-fun d!12973 () Bool)

(assert (=> d!12973 (contains!690 (+!83 lt!26044 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))) lt!26050)))

(assert (=> d!12973 true))

(declare-fun _$35!306 () Unit!1693)

(assert (=> d!12973 (= (choose!332 lt!26044 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))) lt!26050) _$35!306)))

(declare-fun bs!2763 () Bool)

(assert (= bs!2763 d!12973))

(assert (=> bs!2763 m!56169))

(assert (=> bs!2763 m!56169))

(assert (=> bs!2763 m!56171))

(assert (=> d!12739 d!12973))

(declare-fun d!12975 () Bool)

(declare-fun e!41421 () Bool)

(assert (=> d!12975 e!41421))

(declare-fun res!34584 () Bool)

(assert (=> d!12975 (=> res!34584 e!41421)))

(declare-fun lt!26603 () Bool)

(assert (=> d!12975 (= res!34584 (not lt!26603))))

(declare-fun lt!26602 () Bool)

(assert (=> d!12975 (= lt!26603 lt!26602)))

(declare-fun lt!26600 () Unit!1693)

(declare-fun e!41420 () Unit!1693)

(assert (=> d!12975 (= lt!26600 e!41420)))

(declare-fun c!8496 () Bool)

(assert (=> d!12975 (= c!8496 lt!26602)))

(assert (=> d!12975 (= lt!26602 (containsKey!130 (toList!702 lt!26044) lt!26050))))

(assert (=> d!12975 (= (contains!690 lt!26044 lt!26050) lt!26603)))

(declare-fun b!63142 () Bool)

(declare-fun lt!26601 () Unit!1693)

(assert (=> b!63142 (= e!41420 lt!26601)))

(assert (=> b!63142 (= lt!26601 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 lt!26044) lt!26050))))

(assert (=> b!63142 (isDefined!79 (getValueByKey!126 (toList!702 lt!26044) lt!26050))))

(declare-fun b!63143 () Bool)

(declare-fun Unit!1726 () Unit!1693)

(assert (=> b!63143 (= e!41420 Unit!1726)))

(declare-fun b!63144 () Bool)

(assert (=> b!63144 (= e!41421 (isDefined!79 (getValueByKey!126 (toList!702 lt!26044) lt!26050)))))

(assert (= (and d!12975 c!8496) b!63142))

(assert (= (and d!12975 (not c!8496)) b!63143))

(assert (= (and d!12975 (not res!34584)) b!63144))

(declare-fun m!57295 () Bool)

(assert (=> d!12975 m!57295))

(declare-fun m!57297 () Bool)

(assert (=> b!63142 m!57297))

(declare-fun m!57299 () Bool)

(assert (=> b!63142 m!57299))

(assert (=> b!63142 m!57299))

(declare-fun m!57301 () Bool)

(assert (=> b!63142 m!57301))

(assert (=> b!63144 m!57299))

(assert (=> b!63144 m!57299))

(assert (=> b!63144 m!57301))

(assert (=> d!12739 d!12975))

(declare-fun d!12977 () Bool)

(declare-fun e!41423 () Bool)

(assert (=> d!12977 e!41423))

(declare-fun res!34585 () Bool)

(assert (=> d!12977 (=> res!34585 e!41423)))

(declare-fun lt!26607 () Bool)

(assert (=> d!12977 (= res!34585 (not lt!26607))))

(declare-fun lt!26606 () Bool)

(assert (=> d!12977 (= lt!26607 lt!26606)))

(declare-fun lt!26604 () Unit!1693)

(declare-fun e!41422 () Unit!1693)

(assert (=> d!12977 (= lt!26604 e!41422)))

(declare-fun c!8497 () Bool)

(assert (=> d!12977 (= c!8497 lt!26606)))

(assert (=> d!12977 (= lt!26606 (containsKey!130 (toList!702 lt!26421) (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!12977 (= (contains!690 lt!26421 (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26607)))

(declare-fun b!63145 () Bool)

(declare-fun lt!26605 () Unit!1693)

(assert (=> b!63145 (= e!41422 lt!26605)))

(assert (=> b!63145 (= lt!26605 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 lt!26421) (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> b!63145 (isDefined!79 (getValueByKey!126 (toList!702 lt!26421) (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63146 () Bool)

(declare-fun Unit!1727 () Unit!1693)

(assert (=> b!63146 (= e!41422 Unit!1727)))

(declare-fun b!63147 () Bool)

(assert (=> b!63147 (= e!41423 (isDefined!79 (getValueByKey!126 (toList!702 lt!26421) (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(assert (= (and d!12977 c!8497) b!63145))

(assert (= (and d!12977 (not c!8497)) b!63146))

(assert (= (and d!12977 (not res!34585)) b!63147))

(declare-fun m!57303 () Bool)

(assert (=> d!12977 m!57303))

(declare-fun m!57305 () Bool)

(assert (=> b!63145 m!57305))

(assert (=> b!63145 m!56733))

(assert (=> b!63145 m!56733))

(declare-fun m!57307 () Bool)

(assert (=> b!63145 m!57307))

(assert (=> b!63147 m!56733))

(assert (=> b!63147 m!56733))

(assert (=> b!63147 m!57307))

(assert (=> d!12811 d!12977))

(declare-fun b!63149 () Bool)

(declare-fun e!41424 () Option!132)

(declare-fun e!41425 () Option!132)

(assert (=> b!63149 (= e!41424 e!41425)))

(declare-fun c!8499 () Bool)

(assert (=> b!63149 (= c!8499 (and ((_ is Cons!1435) lt!26420) (not (= (_1!1030 (h!2018 lt!26420)) (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))))

(declare-fun b!63148 () Bool)

(assert (=> b!63148 (= e!41424 (Some!131 (_2!1030 (h!2018 lt!26420))))))

(declare-fun d!12979 () Bool)

(declare-fun c!8498 () Bool)

(assert (=> d!12979 (= c!8498 (and ((_ is Cons!1435) lt!26420) (= (_1!1030 (h!2018 lt!26420)) (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> d!12979 (= (getValueByKey!126 lt!26420 (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) e!41424)))

(declare-fun b!63150 () Bool)

(assert (=> b!63150 (= e!41425 (getValueByKey!126 (t!4833 lt!26420) (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63151 () Bool)

(assert (=> b!63151 (= e!41425 None!130)))

(assert (= (and d!12979 c!8498) b!63148))

(assert (= (and d!12979 (not c!8498)) b!63149))

(assert (= (and b!63149 c!8499) b!63150))

(assert (= (and b!63149 (not c!8499)) b!63151))

(declare-fun m!57309 () Bool)

(assert (=> b!63150 m!57309))

(assert (=> d!12811 d!12979))

(declare-fun d!12981 () Bool)

(assert (=> d!12981 (= (getValueByKey!126 lt!26420 (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) (Some!131 (_2!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun lt!26608 () Unit!1693)

(assert (=> d!12981 (= lt!26608 (choose!340 lt!26420 (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun e!41426 () Bool)

(assert (=> d!12981 e!41426))

(declare-fun res!34586 () Bool)

(assert (=> d!12981 (=> (not res!34586) (not e!41426))))

(assert (=> d!12981 (= res!34586 (isStrictlySorted!286 lt!26420))))

(assert (=> d!12981 (= (lemmaContainsTupThenGetReturnValue!43 lt!26420 (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26608)))

(declare-fun b!63152 () Bool)

(declare-fun res!34587 () Bool)

(assert (=> b!63152 (=> (not res!34587) (not e!41426))))

(assert (=> b!63152 (= res!34587 (containsKey!130 lt!26420 (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63153 () Bool)

(assert (=> b!63153 (= e!41426 (contains!693 lt!26420 (tuple2!2039 (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(assert (= (and d!12981 res!34586) b!63152))

(assert (= (and b!63152 res!34587) b!63153))

(assert (=> d!12981 m!56727))

(declare-fun m!57311 () Bool)

(assert (=> d!12981 m!57311))

(declare-fun m!57313 () Bool)

(assert (=> d!12981 m!57313))

(declare-fun m!57315 () Bool)

(assert (=> b!63152 m!57315))

(declare-fun m!57317 () Bool)

(assert (=> b!63153 m!57317))

(assert (=> d!12811 d!12981))

(declare-fun b!63154 () Bool)

(declare-fun e!41430 () List!1439)

(declare-fun call!4997 () List!1439)

(assert (=> b!63154 (= e!41430 call!4997)))

(declare-fun e!41427 () List!1439)

(declare-fun c!8500 () Bool)

(declare-fun b!63155 () Bool)

(declare-fun c!8501 () Bool)

(assert (=> b!63155 (= e!41427 (ite c!8500 (t!4833 (toList!702 call!4841)) (ite c!8501 (Cons!1435 (h!2018 (toList!702 call!4841)) (t!4833 (toList!702 call!4841))) Nil!1436)))))

(declare-fun bm!4992 () Bool)

(declare-fun call!4996 () List!1439)

(declare-fun call!4995 () List!1439)

(assert (=> bm!4992 (= call!4996 call!4995)))

(declare-fun b!63156 () Bool)

(declare-fun e!41428 () List!1439)

(assert (=> b!63156 (= e!41428 call!4995)))

(declare-fun b!63157 () Bool)

(assert (=> b!63157 (= e!41427 (insertStrictlySorted!46 (t!4833 (toList!702 call!4841)) (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63158 () Bool)

(declare-fun res!34589 () Bool)

(declare-fun e!41431 () Bool)

(assert (=> b!63158 (=> (not res!34589) (not e!41431))))

(declare-fun lt!26609 () List!1439)

(assert (=> b!63158 (= res!34589 (containsKey!130 lt!26609 (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63159 () Bool)

(assert (=> b!63159 (= e!41431 (contains!693 lt!26609 (tuple2!2039 (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!63160 () Bool)

(assert (=> b!63160 (= e!41430 call!4997)))

(declare-fun d!12983 () Bool)

(assert (=> d!12983 e!41431))

(declare-fun res!34588 () Bool)

(assert (=> d!12983 (=> (not res!34588) (not e!41431))))

(assert (=> d!12983 (= res!34588 (isStrictlySorted!286 lt!26609))))

(assert (=> d!12983 (= lt!26609 e!41428)))

(declare-fun c!8502 () Bool)

(assert (=> d!12983 (= c!8502 (and ((_ is Cons!1435) (toList!702 call!4841)) (bvslt (_1!1030 (h!2018 (toList!702 call!4841))) (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> d!12983 (isStrictlySorted!286 (toList!702 call!4841))))

(assert (=> d!12983 (= (insertStrictlySorted!46 (toList!702 call!4841) (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26609)))

(declare-fun bm!4993 () Bool)

(assert (=> bm!4993 (= call!4995 ($colon$colon!62 e!41427 (ite c!8502 (h!2018 (toList!702 call!4841)) (tuple2!2039 (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))))

(declare-fun c!8503 () Bool)

(assert (=> bm!4993 (= c!8503 c!8502)))

(declare-fun b!63161 () Bool)

(declare-fun e!41429 () List!1439)

(assert (=> b!63161 (= e!41428 e!41429)))

(assert (=> b!63161 (= c!8500 (and ((_ is Cons!1435) (toList!702 call!4841)) (= (_1!1030 (h!2018 (toList!702 call!4841))) (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!63162 () Bool)

(assert (=> b!63162 (= c!8501 (and ((_ is Cons!1435) (toList!702 call!4841)) (bvsgt (_1!1030 (h!2018 (toList!702 call!4841))) (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> b!63162 (= e!41429 e!41430)))

(declare-fun bm!4994 () Bool)

(assert (=> bm!4994 (= call!4997 call!4996)))

(declare-fun b!63163 () Bool)

(assert (=> b!63163 (= e!41429 call!4996)))

(assert (= (and d!12983 c!8502) b!63156))

(assert (= (and d!12983 (not c!8502)) b!63161))

(assert (= (and b!63161 c!8500) b!63163))

(assert (= (and b!63161 (not c!8500)) b!63162))

(assert (= (and b!63162 c!8501) b!63160))

(assert (= (and b!63162 (not c!8501)) b!63154))

(assert (= (or b!63160 b!63154) bm!4994))

(assert (= (or b!63163 bm!4994) bm!4992))

(assert (= (or b!63156 bm!4992) bm!4993))

(assert (= (and bm!4993 c!8503) b!63157))

(assert (= (and bm!4993 (not c!8503)) b!63155))

(assert (= (and d!12983 res!34588) b!63158))

(assert (= (and b!63158 res!34589) b!63159))

(declare-fun m!57319 () Bool)

(assert (=> b!63157 m!57319))

(declare-fun m!57321 () Bool)

(assert (=> bm!4993 m!57321))

(declare-fun m!57323 () Bool)

(assert (=> b!63158 m!57323))

(declare-fun m!57325 () Bool)

(assert (=> b!63159 m!57325))

(declare-fun m!57327 () Bool)

(assert (=> d!12983 m!57327))

(declare-fun m!57329 () Bool)

(assert (=> d!12983 m!57329))

(assert (=> d!12811 d!12983))

(declare-fun b!63176 () Bool)

(declare-fun e!41438 () SeekEntryResult!229)

(assert (=> b!63176 (= e!41438 (MissingVacant!229 (index!3043 lt!26386)))))

(declare-fun b!63177 () Bool)

(declare-fun nextIndex!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!63177 (= e!41438 (seekKeyOrZeroReturnVacant!0 (bvadd (x!10307 lt!26386) #b00000000000000000000000000000001) (nextIndex!0 (index!3043 lt!26386) (x!10307 lt!26386) (mask!5994 newMap!16)) (index!3043 lt!26386) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (_keys!3720 newMap!16) (mask!5994 newMap!16)))))

(declare-fun lt!26615 () SeekEntryResult!229)

(declare-fun d!12985 () Bool)

(assert (=> d!12985 (and (or ((_ is Undefined!229) lt!26615) (not ((_ is Found!229) lt!26615)) (and (bvsge (index!3042 lt!26615) #b00000000000000000000000000000000) (bvslt (index!3042 lt!26615) (size!2031 (_keys!3720 newMap!16))))) (or ((_ is Undefined!229) lt!26615) ((_ is Found!229) lt!26615) (not ((_ is MissingVacant!229) lt!26615)) (not (= (index!3044 lt!26615) (index!3043 lt!26386))) (and (bvsge (index!3044 lt!26615) #b00000000000000000000000000000000) (bvslt (index!3044 lt!26615) (size!2031 (_keys!3720 newMap!16))))) (or ((_ is Undefined!229) lt!26615) (ite ((_ is Found!229) lt!26615) (= (select (arr!1799 (_keys!3720 newMap!16)) (index!3042 lt!26615)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (and ((_ is MissingVacant!229) lt!26615) (= (index!3044 lt!26615) (index!3043 lt!26386)) (= (select (arr!1799 (_keys!3720 newMap!16)) (index!3044 lt!26615)) #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!41439 () SeekEntryResult!229)

(assert (=> d!12985 (= lt!26615 e!41439)))

(declare-fun c!8512 () Bool)

(assert (=> d!12985 (= c!8512 (bvsge (x!10307 lt!26386) #b01111111111111111111111111111110))))

(declare-fun lt!26614 () (_ BitVec 64))

(assert (=> d!12985 (= lt!26614 (select (arr!1799 (_keys!3720 newMap!16)) (index!3043 lt!26386)))))

(assert (=> d!12985 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!12985 (= (seekKeyOrZeroReturnVacant!0 (x!10307 lt!26386) (index!3043 lt!26386) (index!3043 lt!26386) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (_keys!3720 newMap!16) (mask!5994 newMap!16)) lt!26615)))

(declare-fun b!63178 () Bool)

(declare-fun e!41440 () SeekEntryResult!229)

(assert (=> b!63178 (= e!41440 (Found!229 (index!3043 lt!26386)))))

(declare-fun b!63179 () Bool)

(assert (=> b!63179 (= e!41439 e!41440)))

(declare-fun c!8511 () Bool)

(assert (=> b!63179 (= c!8511 (= lt!26614 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun b!63180 () Bool)

(declare-fun c!8510 () Bool)

(assert (=> b!63180 (= c!8510 (= lt!26614 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63180 (= e!41440 e!41438)))

(declare-fun b!63181 () Bool)

(assert (=> b!63181 (= e!41439 Undefined!229)))

(assert (= (and d!12985 c!8512) b!63181))

(assert (= (and d!12985 (not c!8512)) b!63179))

(assert (= (and b!63179 c!8511) b!63178))

(assert (= (and b!63179 (not c!8511)) b!63180))

(assert (= (and b!63180 c!8510) b!63176))

(assert (= (and b!63180 (not c!8510)) b!63177))

(declare-fun m!57331 () Bool)

(assert (=> b!63177 m!57331))

(assert (=> b!63177 m!57331))

(assert (=> b!63177 m!56051))

(declare-fun m!57333 () Bool)

(assert (=> b!63177 m!57333))

(declare-fun m!57335 () Bool)

(assert (=> d!12985 m!57335))

(declare-fun m!57337 () Bool)

(assert (=> d!12985 m!57337))

(assert (=> d!12985 m!56651))

(assert (=> d!12985 m!56299))

(assert (=> b!62838 d!12985))

(declare-fun d!12987 () Bool)

(assert (=> d!12987 (isDefined!79 (getValueByKey!126 (toList!702 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun lt!26616 () Unit!1693)

(assert (=> d!12987 (= lt!26616 (choose!336 (toList!702 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun e!41441 () Bool)

(assert (=> d!12987 e!41441))

(declare-fun res!34590 () Bool)

(assert (=> d!12987 (=> (not res!34590) (not e!41441))))

(assert (=> d!12987 (= res!34590 (isStrictlySorted!286 (toList!702 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))))

(assert (=> d!12987 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) lt!26616)))

(declare-fun b!63182 () Bool)

(assert (=> b!63182 (= e!41441 (containsKey!130 (toList!702 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (= (and d!12987 res!34590) b!63182))

(assert (=> d!12987 m!56051))

(assert (=> d!12987 m!56475))

(assert (=> d!12987 m!56475))

(assert (=> d!12987 m!56477))

(assert (=> d!12987 m!56051))

(declare-fun m!57339 () Bool)

(assert (=> d!12987 m!57339))

(declare-fun m!57341 () Bool)

(assert (=> d!12987 m!57341))

(assert (=> b!63182 m!56051))

(assert (=> b!63182 m!56471))

(assert (=> b!62704 d!12987))

(declare-fun d!12989 () Bool)

(assert (=> d!12989 (= (isDefined!79 (getValueByKey!126 (toList!702 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355))) (not (isEmpty!300 (getValueByKey!126 (toList!702 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))))

(declare-fun bs!2764 () Bool)

(assert (= bs!2764 d!12989))

(assert (=> bs!2764 m!56475))

(declare-fun m!57343 () Bool)

(assert (=> bs!2764 m!57343))

(assert (=> b!62704 d!12989))

(declare-fun b!63184 () Bool)

(declare-fun e!41442 () Option!132)

(declare-fun e!41443 () Option!132)

(assert (=> b!63184 (= e!41442 e!41443)))

(declare-fun c!8514 () Bool)

(assert (=> b!63184 (= c!8514 (and ((_ is Cons!1435) (toList!702 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))) (not (= (_1!1030 (h!2018 (toList!702 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))))

(declare-fun b!63183 () Bool)

(assert (=> b!63183 (= e!41442 (Some!131 (_2!1030 (h!2018 (toList!702 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))))))

(declare-fun c!8513 () Bool)

(declare-fun d!12991 () Bool)

(assert (=> d!12991 (= c!8513 (and ((_ is Cons!1435) (toList!702 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))) (= (_1!1030 (h!2018 (toList!702 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355))))))

(assert (=> d!12991 (= (getValueByKey!126 (toList!702 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) e!41442)))

(declare-fun b!63185 () Bool)

(assert (=> b!63185 (= e!41443 (getValueByKey!126 (t!4833 (toList!702 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun b!63186 () Bool)

(assert (=> b!63186 (= e!41443 None!130)))

(assert (= (and d!12991 c!8513) b!63183))

(assert (= (and d!12991 (not c!8513)) b!63184))

(assert (= (and b!63184 c!8514) b!63185))

(assert (= (and b!63184 (not c!8514)) b!63186))

(assert (=> b!63185 m!56051))

(declare-fun m!57345 () Bool)

(assert (=> b!63185 m!57345))

(assert (=> b!62704 d!12991))

(assert (=> b!62675 d!12777))

(declare-fun d!12993 () Bool)

(declare-fun res!34591 () Bool)

(declare-fun e!41444 () Bool)

(assert (=> d!12993 (=> res!34591 e!41444)))

(assert (=> d!12993 (= res!34591 (and ((_ is Cons!1435) (t!4833 (toList!702 lt!25956))) (= (_1!1030 (h!2018 (t!4833 (toList!702 lt!25956)))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355))))))

(assert (=> d!12993 (= (containsKey!130 (t!4833 (toList!702 lt!25956)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) e!41444)))

(declare-fun b!63187 () Bool)

(declare-fun e!41445 () Bool)

(assert (=> b!63187 (= e!41444 e!41445)))

(declare-fun res!34592 () Bool)

(assert (=> b!63187 (=> (not res!34592) (not e!41445))))

(assert (=> b!63187 (= res!34592 (and (or (not ((_ is Cons!1435) (t!4833 (toList!702 lt!25956)))) (bvsle (_1!1030 (h!2018 (t!4833 (toList!702 lt!25956)))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355))) ((_ is Cons!1435) (t!4833 (toList!702 lt!25956))) (bvslt (_1!1030 (h!2018 (t!4833 (toList!702 lt!25956)))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355))))))

(declare-fun b!63188 () Bool)

(assert (=> b!63188 (= e!41445 (containsKey!130 (t!4833 (t!4833 (toList!702 lt!25956))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (= (and d!12993 (not res!34591)) b!63187))

(assert (= (and b!63187 res!34592) b!63188))

(assert (=> b!63188 m!56051))

(declare-fun m!57347 () Bool)

(assert (=> b!63188 m!57347))

(assert (=> b!62751 d!12993))

(declare-fun d!12995 () Bool)

(declare-fun e!41446 () Bool)

(assert (=> d!12995 e!41446))

(declare-fun res!34593 () Bool)

(assert (=> d!12995 (=> (not res!34593) (not e!41446))))

(declare-fun lt!26620 () ListLongMap!1373)

(assert (=> d!12995 (= res!34593 (contains!690 lt!26620 (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!26619 () List!1439)

(assert (=> d!12995 (= lt!26620 (ListLongMap!1374 lt!26619))))

(declare-fun lt!26618 () Unit!1693)

(declare-fun lt!26617 () Unit!1693)

(assert (=> d!12995 (= lt!26618 lt!26617)))

(assert (=> d!12995 (= (getValueByKey!126 lt!26619 (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!131 (_2!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12995 (= lt!26617 (lemmaContainsTupThenGetReturnValue!43 lt!26619 (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12995 (= lt!26619 (insertStrictlySorted!46 (toList!702 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12995 (= (+!83 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26620)))

(declare-fun b!63189 () Bool)

(declare-fun res!34594 () Bool)

(assert (=> b!63189 (=> (not res!34594) (not e!41446))))

(assert (=> b!63189 (= res!34594 (= (getValueByKey!126 (toList!702 lt!26620) (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!131 (_2!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!63190 () Bool)

(assert (=> b!63190 (= e!41446 (contains!693 (toList!702 lt!26620) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12995 res!34593) b!63189))

(assert (= (and b!63189 res!34594) b!63190))

(declare-fun m!57349 () Bool)

(assert (=> d!12995 m!57349))

(declare-fun m!57351 () Bool)

(assert (=> d!12995 m!57351))

(declare-fun m!57353 () Bool)

(assert (=> d!12995 m!57353))

(declare-fun m!57355 () Bool)

(assert (=> d!12995 m!57355))

(declare-fun m!57357 () Bool)

(assert (=> b!63189 m!57357))

(declare-fun m!57359 () Bool)

(assert (=> b!63190 m!57359))

(assert (=> d!12801 d!12995))

(declare-fun b!63191 () Bool)

(declare-fun e!41456 () Bool)

(declare-fun e!41459 () Bool)

(assert (=> b!63191 (= e!41456 e!41459)))

(declare-fun res!34600 () Bool)

(declare-fun call!5003 () Bool)

(assert (=> b!63191 (= res!34600 call!5003)))

(assert (=> b!63191 (=> (not res!34600) (not e!41459))))

(declare-fun b!63192 () Bool)

(declare-fun res!34601 () Bool)

(declare-fun e!41457 () Bool)

(assert (=> b!63192 (=> (not res!34601) (not e!41457))))

(assert (=> b!63192 (= res!34601 e!41456)))

(declare-fun c!8517 () Bool)

(assert (=> b!63192 (= c!8517 (not (= (bvand lt!26140 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!63193 () Bool)

(declare-fun e!41451 () Unit!1693)

(declare-fun lt!26624 () Unit!1693)

(assert (=> b!63193 (= e!41451 lt!26624)))

(declare-fun lt!26628 () ListLongMap!1373)

(assert (=> b!63193 (= lt!26628 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) lt!26140 (zeroValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26625 () (_ BitVec 64))

(assert (=> b!63193 (= lt!26625 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26634 () (_ BitVec 64))

(assert (=> b!63193 (= lt!26634 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26638 () Unit!1693)

(assert (=> b!63193 (= lt!26638 (addStillContains!44 lt!26628 lt!26625 (zeroValue!2000 newMap!16) lt!26634))))

(assert (=> b!63193 (contains!690 (+!83 lt!26628 (tuple2!2039 lt!26625 (zeroValue!2000 newMap!16))) lt!26634)))

(declare-fun lt!26636 () Unit!1693)

(assert (=> b!63193 (= lt!26636 lt!26638)))

(declare-fun lt!26631 () ListLongMap!1373)

(assert (=> b!63193 (= lt!26631 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) lt!26140 (zeroValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26623 () (_ BitVec 64))

(assert (=> b!63193 (= lt!26623 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26635 () (_ BitVec 64))

(assert (=> b!63193 (= lt!26635 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26627 () Unit!1693)

(assert (=> b!63193 (= lt!26627 (addApplyDifferent!44 lt!26631 lt!26623 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!26635))))

(assert (=> b!63193 (= (apply!68 (+!83 lt!26631 (tuple2!2039 lt!26623 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26635) (apply!68 lt!26631 lt!26635))))

(declare-fun lt!26637 () Unit!1693)

(assert (=> b!63193 (= lt!26637 lt!26627)))

(declare-fun lt!26632 () ListLongMap!1373)

(assert (=> b!63193 (= lt!26632 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) lt!26140 (zeroValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26642 () (_ BitVec 64))

(assert (=> b!63193 (= lt!26642 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26639 () (_ BitVec 64))

(assert (=> b!63193 (= lt!26639 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26622 () Unit!1693)

(assert (=> b!63193 (= lt!26622 (addApplyDifferent!44 lt!26632 lt!26642 (zeroValue!2000 newMap!16) lt!26639))))

(assert (=> b!63193 (= (apply!68 (+!83 lt!26632 (tuple2!2039 lt!26642 (zeroValue!2000 newMap!16))) lt!26639) (apply!68 lt!26632 lt!26639))))

(declare-fun lt!26621 () Unit!1693)

(assert (=> b!63193 (= lt!26621 lt!26622)))

(declare-fun lt!26626 () ListLongMap!1373)

(assert (=> b!63193 (= lt!26626 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) lt!26140 (zeroValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26641 () (_ BitVec 64))

(assert (=> b!63193 (= lt!26641 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26629 () (_ BitVec 64))

(assert (=> b!63193 (= lt!26629 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!63193 (= lt!26624 (addApplyDifferent!44 lt!26626 lt!26641 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!26629))))

(assert (=> b!63193 (= (apply!68 (+!83 lt!26626 (tuple2!2039 lt!26641 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26629) (apply!68 lt!26626 lt!26629))))

(declare-fun b!63194 () Bool)

(assert (=> b!63194 (= e!41456 (not call!5003))))

(declare-fun call!5001 () ListLongMap!1373)

(declare-fun c!8520 () Bool)

(declare-fun call!4999 () ListLongMap!1373)

(declare-fun bm!4996 () Bool)

(declare-fun call!4998 () ListLongMap!1373)

(declare-fun c!8518 () Bool)

(declare-fun call!5004 () ListLongMap!1373)

(assert (=> bm!4996 (= call!4999 (+!83 (ite c!8518 call!5001 (ite c!8520 call!4998 call!5004)) (ite (or c!8518 c!8520) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun bm!4997 () Bool)

(assert (=> bm!4997 (= call!5004 call!4998)))

(declare-fun b!63195 () Bool)

(declare-fun e!41455 () Bool)

(declare-fun e!41448 () Bool)

(assert (=> b!63195 (= e!41455 e!41448)))

(declare-fun res!34595 () Bool)

(assert (=> b!63195 (=> (not res!34595) (not e!41448))))

(declare-fun lt!26630 () ListLongMap!1373)

(assert (=> b!63195 (= res!34595 (contains!690 lt!26630 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63195 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(declare-fun bm!4998 () Bool)

(declare-fun call!5002 () Bool)

(assert (=> bm!4998 (= call!5002 (contains!690 lt!26630 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63196 () Bool)

(declare-fun e!41449 () Bool)

(assert (=> b!63196 (= e!41449 (not call!5002))))

(declare-fun bm!4999 () Bool)

(assert (=> bm!4999 (= call!5003 (contains!690 lt!26630 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!5000 () Bool)

(declare-fun call!5000 () ListLongMap!1373)

(assert (=> bm!5000 (= call!5000 call!4999)))

(declare-fun b!63197 () Bool)

(declare-fun e!41452 () ListLongMap!1373)

(assert (=> b!63197 (= e!41452 (+!83 call!4999 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!63198 () Bool)

(declare-fun res!34599 () Bool)

(assert (=> b!63198 (=> (not res!34599) (not e!41457))))

(assert (=> b!63198 (= res!34599 e!41455)))

(declare-fun res!34598 () Bool)

(assert (=> b!63198 (=> res!34598 e!41455)))

(declare-fun e!41454 () Bool)

(assert (=> b!63198 (= res!34598 (not e!41454))))

(declare-fun res!34596 () Bool)

(assert (=> b!63198 (=> (not res!34596) (not e!41454))))

(assert (=> b!63198 (= res!34596 (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(declare-fun d!12997 () Bool)

(assert (=> d!12997 e!41457))

(declare-fun res!34597 () Bool)

(assert (=> d!12997 (=> (not res!34597) (not e!41457))))

(assert (=> d!12997 (= res!34597 (or (bvsge #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))))

(declare-fun lt!26640 () ListLongMap!1373)

(assert (=> d!12997 (= lt!26630 lt!26640)))

(declare-fun lt!26633 () Unit!1693)

(assert (=> d!12997 (= lt!26633 e!41451)))

(declare-fun c!8516 () Bool)

(declare-fun e!41458 () Bool)

(assert (=> d!12997 (= c!8516 e!41458)))

(declare-fun res!34602 () Bool)

(assert (=> d!12997 (=> (not res!34602) (not e!41458))))

(assert (=> d!12997 (= res!34602 (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(assert (=> d!12997 (= lt!26640 e!41452)))

(assert (=> d!12997 (= c!8518 (and (not (= (bvand lt!26140 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!26140 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12997 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!12997 (= (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) lt!26140 (zeroValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) lt!26630)))

(declare-fun bm!4995 () Bool)

(assert (=> bm!4995 (= call!4998 call!5001)))

(declare-fun b!63199 () Bool)

(assert (=> b!63199 (= e!41459 (= (apply!68 lt!26630 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2000 newMap!16)))))

(declare-fun b!63200 () Bool)

(declare-fun e!41453 () Bool)

(assert (=> b!63200 (= e!41453 (= (apply!68 lt!26630 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!63201 () Bool)

(assert (=> b!63201 (= e!41449 e!41453)))

(declare-fun res!34603 () Bool)

(assert (=> b!63201 (= res!34603 call!5002)))

(assert (=> b!63201 (=> (not res!34603) (not e!41453))))

(declare-fun b!63202 () Bool)

(assert (=> b!63202 (= e!41454 (validKeyInArray!0 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63203 () Bool)

(assert (=> b!63203 (= e!41458 (validKeyInArray!0 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63204 () Bool)

(declare-fun Unit!1728 () Unit!1693)

(assert (=> b!63204 (= e!41451 Unit!1728)))

(declare-fun b!63205 () Bool)

(declare-fun e!41450 () ListLongMap!1373)

(assert (=> b!63205 (= e!41450 call!5000)))

(declare-fun bm!5001 () Bool)

(assert (=> bm!5001 (= call!5001 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) lt!26140 (zeroValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun b!63206 () Bool)

(declare-fun e!41447 () ListLongMap!1373)

(assert (=> b!63206 (= e!41447 call!5004)))

(declare-fun b!63207 () Bool)

(assert (=> b!63207 (= e!41457 e!41449)))

(declare-fun c!8519 () Bool)

(assert (=> b!63207 (= c!8519 (not (= (bvand lt!26140 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!63208 () Bool)

(declare-fun c!8515 () Bool)

(assert (=> b!63208 (= c!8515 (and (not (= (bvand lt!26140 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!26140 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!63208 (= e!41450 e!41447)))

(declare-fun b!63209 () Bool)

(assert (=> b!63209 (= e!41447 call!5000)))

(declare-fun b!63210 () Bool)

(assert (=> b!63210 (= e!41448 (= (apply!68 lt!26630 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) (get!1082 (select (arr!1800 (_values!2071 newMap!16)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!63210 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2032 (_values!2071 newMap!16))))))

(assert (=> b!63210 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(declare-fun b!63211 () Bool)

(assert (=> b!63211 (= e!41452 e!41450)))

(assert (=> b!63211 (= c!8520 (and (not (= (bvand lt!26140 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!26140 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!12997 c!8518) b!63197))

(assert (= (and d!12997 (not c!8518)) b!63211))

(assert (= (and b!63211 c!8520) b!63205))

(assert (= (and b!63211 (not c!8520)) b!63208))

(assert (= (and b!63208 c!8515) b!63209))

(assert (= (and b!63208 (not c!8515)) b!63206))

(assert (= (or b!63209 b!63206) bm!4997))

(assert (= (or b!63205 bm!4997) bm!4995))

(assert (= (or b!63205 b!63209) bm!5000))

(assert (= (or b!63197 bm!4995) bm!5001))

(assert (= (or b!63197 bm!5000) bm!4996))

(assert (= (and d!12997 res!34602) b!63203))

(assert (= (and d!12997 c!8516) b!63193))

(assert (= (and d!12997 (not c!8516)) b!63204))

(assert (= (and d!12997 res!34597) b!63198))

(assert (= (and b!63198 res!34596) b!63202))

(assert (= (and b!63198 (not res!34598)) b!63195))

(assert (= (and b!63195 res!34595) b!63210))

(assert (= (and b!63198 res!34599) b!63192))

(assert (= (and b!63192 c!8517) b!63191))

(assert (= (and b!63192 (not c!8517)) b!63194))

(assert (= (and b!63191 res!34600) b!63199))

(assert (= (or b!63191 b!63194) bm!4999))

(assert (= (and b!63192 res!34601) b!63207))

(assert (= (and b!63207 c!8519) b!63201))

(assert (= (and b!63207 (not c!8519)) b!63196))

(assert (= (and b!63201 res!34603) b!63200))

(assert (= (or b!63201 b!63196) bm!4998))

(declare-fun b_lambda!2823 () Bool)

(assert (=> (not b_lambda!2823) (not b!63210)))

(assert (=> b!63210 t!4841))

(declare-fun b_and!3867 () Bool)

(assert (= b_and!3863 (and (=> t!4841 result!2459) b_and!3867)))

(assert (=> b!63210 t!4843))

(declare-fun b_and!3869 () Bool)

(assert (= b_and!3865 (and (=> t!4843 result!2461) b_and!3869)))

(assert (=> b!63203 m!56285))

(assert (=> b!63203 m!56285))

(assert (=> b!63203 m!56287))

(assert (=> b!63193 m!56063))

(declare-fun m!57361 () Bool)

(assert (=> b!63193 m!57361))

(declare-fun m!57363 () Bool)

(assert (=> b!63193 m!57363))

(declare-fun m!57365 () Bool)

(assert (=> b!63193 m!57365))

(declare-fun m!57367 () Bool)

(assert (=> b!63193 m!57367))

(declare-fun m!57369 () Bool)

(assert (=> b!63193 m!57369))

(declare-fun m!57371 () Bool)

(assert (=> b!63193 m!57371))

(assert (=> b!63193 m!56063))

(declare-fun m!57373 () Bool)

(assert (=> b!63193 m!57373))

(declare-fun m!57375 () Bool)

(assert (=> b!63193 m!57375))

(declare-fun m!57377 () Bool)

(assert (=> b!63193 m!57377))

(declare-fun m!57379 () Bool)

(assert (=> b!63193 m!57379))

(declare-fun m!57381 () Bool)

(assert (=> b!63193 m!57381))

(declare-fun m!57383 () Bool)

(assert (=> b!63193 m!57383))

(declare-fun m!57385 () Bool)

(assert (=> b!63193 m!57385))

(assert (=> b!63193 m!56063))

(declare-fun m!57387 () Bool)

(assert (=> b!63193 m!57387))

(assert (=> b!63193 m!56285))

(assert (=> b!63193 m!57385))

(declare-fun m!57389 () Bool)

(assert (=> b!63193 m!57389))

(assert (=> b!63193 m!57381))

(assert (=> b!63193 m!57367))

(declare-fun m!57391 () Bool)

(assert (=> b!63193 m!57391))

(assert (=> b!63193 m!57375))

(declare-fun m!57393 () Bool)

(assert (=> b!63199 m!57393))

(assert (=> bm!5001 m!56063))

(assert (=> bm!5001 m!57387))

(assert (=> b!63202 m!56285))

(assert (=> b!63202 m!56285))

(assert (=> b!63202 m!56287))

(assert (=> d!12997 m!56299))

(assert (=> b!63210 m!56285))

(declare-fun m!57395 () Bool)

(assert (=> b!63210 m!57395))

(assert (=> b!63210 m!56515))

(assert (=> b!63210 m!56517))

(assert (=> b!63210 m!56285))

(assert (=> b!63210 m!56517))

(assert (=> b!63210 m!56515))

(assert (=> b!63210 m!56519))

(assert (=> b!63195 m!56285))

(assert (=> b!63195 m!56285))

(declare-fun m!57397 () Bool)

(assert (=> b!63195 m!57397))

(declare-fun m!57399 () Bool)

(assert (=> b!63200 m!57399))

(declare-fun m!57401 () Bool)

(assert (=> bm!4996 m!57401))

(declare-fun m!57403 () Bool)

(assert (=> b!63197 m!57403))

(declare-fun m!57405 () Bool)

(assert (=> bm!4999 m!57405))

(declare-fun m!57407 () Bool)

(assert (=> bm!4998 m!57407))

(assert (=> d!12801 d!12997))

(declare-fun d!12999 () Bool)

(assert (=> d!12999 (= (+!83 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) lt!26140 (zeroValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(assert (=> d!12999 true))

(declare-fun _$8!52 () Unit!1693)

(assert (=> d!12999 (= (choose!338 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) lt!26140 (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2088 newMap!16)) _$8!52)))

(declare-fun bs!2765 () Bool)

(assert (= bs!2765 d!12999))

(assert (=> bs!2765 m!56151))

(assert (=> bs!2765 m!56151))

(assert (=> bs!2765 m!56663))

(assert (=> bs!2765 m!56063))

(assert (=> bs!2765 m!56661))

(assert (=> d!12801 d!12999))

(assert (=> d!12801 d!12759))

(assert (=> d!12801 d!12901))

(declare-fun d!13001 () Bool)

(declare-fun lt!26643 () Bool)

(assert (=> d!13001 (= lt!26643 (select (content!68 (toList!702 lt!26228)) (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun e!41460 () Bool)

(assert (=> d!13001 (= lt!26643 e!41460)))

(declare-fun res!34604 () Bool)

(assert (=> d!13001 (=> (not res!34604) (not e!41460))))

(assert (=> d!13001 (= res!34604 ((_ is Cons!1435) (toList!702 lt!26228)))))

(assert (=> d!13001 (= (contains!693 (toList!702 lt!26228) (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) lt!26643)))

(declare-fun b!63212 () Bool)

(declare-fun e!41461 () Bool)

(assert (=> b!63212 (= e!41460 e!41461)))

(declare-fun res!34605 () Bool)

(assert (=> b!63212 (=> res!34605 e!41461)))

(assert (=> b!63212 (= res!34605 (= (h!2018 (toList!702 lt!26228)) (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun b!63213 () Bool)

(assert (=> b!63213 (= e!41461 (contains!693 (t!4833 (toList!702 lt!26228)) (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))

(assert (= (and d!13001 res!34604) b!63212))

(assert (= (and b!63212 (not res!34605)) b!63213))

(declare-fun m!57409 () Bool)

(assert (=> d!13001 m!57409))

(declare-fun m!57411 () Bool)

(assert (=> d!13001 m!57411))

(declare-fun m!57413 () Bool)

(assert (=> b!63213 m!57413))

(assert (=> b!62680 d!13001))

(assert (=> b!62841 d!12831))

(assert (=> b!62819 d!12679))

(assert (=> b!62868 d!12831))

(declare-fun b!63214 () Bool)

(declare-fun lt!26650 () Unit!1693)

(declare-fun lt!26644 () Unit!1693)

(assert (=> b!63214 (= lt!26650 lt!26644)))

(declare-fun lt!26649 () (_ BitVec 64))

(declare-fun lt!26648 () V!2867)

(declare-fun lt!26647 () (_ BitVec 64))

(declare-fun lt!26645 () ListLongMap!1373)

(assert (=> b!63214 (not (contains!690 (+!83 lt!26645 (tuple2!2039 lt!26649 lt!26648)) lt!26647))))

(assert (=> b!63214 (= lt!26644 (addStillNotContains!17 lt!26645 lt!26649 lt!26648 lt!26647))))

(assert (=> b!63214 (= lt!26647 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!63214 (= lt!26648 (get!1082 (select (arr!1800 (_values!2071 newMap!16)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!63214 (= lt!26649 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun call!5005 () ListLongMap!1373)

(assert (=> b!63214 (= lt!26645 call!5005)))

(declare-fun e!41462 () ListLongMap!1373)

(assert (=> b!63214 (= e!41462 (+!83 call!5005 (tuple2!2039 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000) (get!1082 (select (arr!1800 (_values!2071 newMap!16)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!63215 () Bool)

(declare-fun e!41466 () Bool)

(declare-fun e!41467 () Bool)

(assert (=> b!63215 (= e!41466 e!41467)))

(assert (=> b!63215 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(declare-fun res!34607 () Bool)

(declare-fun lt!26646 () ListLongMap!1373)

(assert (=> b!63215 (= res!34607 (contains!690 lt!26646 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63215 (=> (not res!34607) (not e!41467))))

(declare-fun b!63216 () Bool)

(declare-fun e!41465 () Bool)

(assert (=> b!63216 (= e!41466 e!41465)))

(declare-fun c!8521 () Bool)

(assert (=> b!63216 (= c!8521 (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(declare-fun b!63217 () Bool)

(declare-fun res!34606 () Bool)

(declare-fun e!41468 () Bool)

(assert (=> b!63217 (=> (not res!34606) (not e!41468))))

(assert (=> b!63217 (= res!34606 (not (contains!690 lt!26646 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!63218 () Bool)

(declare-fun e!41464 () ListLongMap!1373)

(assert (=> b!63218 (= e!41464 (ListLongMap!1374 Nil!1436))))

(declare-fun b!63219 () Bool)

(assert (=> b!63219 (= e!41468 e!41466)))

(declare-fun c!8523 () Bool)

(declare-fun e!41463 () Bool)

(assert (=> b!63219 (= c!8523 e!41463)))

(declare-fun res!34609 () Bool)

(assert (=> b!63219 (=> (not res!34609) (not e!41463))))

(assert (=> b!63219 (= res!34609 (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(declare-fun d!13003 () Bool)

(assert (=> d!13003 e!41468))

(declare-fun res!34608 () Bool)

(assert (=> d!13003 (=> (not res!34608) (not e!41468))))

(assert (=> d!13003 (= res!34608 (not (contains!690 lt!26646 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!13003 (= lt!26646 e!41464)))

(declare-fun c!8522 () Bool)

(assert (=> d!13003 (= c!8522 (bvsge #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(assert (=> d!13003 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!13003 (= (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) lt!26646)))

(declare-fun b!63220 () Bool)

(assert (=> b!63220 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(assert (=> b!63220 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2032 (_values!2071 newMap!16))))))

(assert (=> b!63220 (= e!41467 (= (apply!68 lt!26646 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) (get!1082 (select (arr!1800 (_values!2071 newMap!16)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!63221 () Bool)

(assert (=> b!63221 (= e!41465 (= lt!26646 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2088 newMap!16))))))

(declare-fun b!63222 () Bool)

(assert (=> b!63222 (= e!41465 (isEmpty!299 lt!26646))))

(declare-fun b!63223 () Bool)

(assert (=> b!63223 (= e!41464 e!41462)))

(declare-fun c!8524 () Bool)

(assert (=> b!63223 (= c!8524 (validKeyInArray!0 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63224 () Bool)

(assert (=> b!63224 (= e!41462 call!5005)))

(declare-fun bm!5002 () Bool)

(assert (=> bm!5002 (= call!5005 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2088 newMap!16)))))

(declare-fun b!63225 () Bool)

(assert (=> b!63225 (= e!41463 (validKeyInArray!0 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63225 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (= (and d!13003 c!8522) b!63218))

(assert (= (and d!13003 (not c!8522)) b!63223))

(assert (= (and b!63223 c!8524) b!63214))

(assert (= (and b!63223 (not c!8524)) b!63224))

(assert (= (or b!63214 b!63224) bm!5002))

(assert (= (and d!13003 res!34608) b!63217))

(assert (= (and b!63217 res!34606) b!63219))

(assert (= (and b!63219 res!34609) b!63225))

(assert (= (and b!63219 c!8523) b!63215))

(assert (= (and b!63219 (not c!8523)) b!63216))

(assert (= (and b!63215 res!34607) b!63220))

(assert (= (and b!63216 c!8521) b!63221))

(assert (= (and b!63216 (not c!8521)) b!63222))

(declare-fun b_lambda!2825 () Bool)

(assert (=> (not b_lambda!2825) (not b!63214)))

(assert (=> b!63214 t!4841))

(declare-fun b_and!3871 () Bool)

(assert (= b_and!3867 (and (=> t!4841 result!2459) b_and!3871)))

(assert (=> b!63214 t!4843))

(declare-fun b_and!3873 () Bool)

(assert (= b_and!3869 (and (=> t!4843 result!2461) b_and!3873)))

(declare-fun b_lambda!2827 () Bool)

(assert (=> (not b_lambda!2827) (not b!63220)))

(assert (=> b!63220 t!4841))

(declare-fun b_and!3875 () Bool)

(assert (= b_and!3871 (and (=> t!4841 result!2459) b_and!3875)))

(assert (=> b!63220 t!4843))

(declare-fun b_and!3877 () Bool)

(assert (= b_and!3873 (and (=> t!4843 result!2461) b_and!3877)))

(declare-fun m!57415 () Bool)

(assert (=> b!63222 m!57415))

(assert (=> b!63220 m!56517))

(assert (=> b!63220 m!56515))

(assert (=> b!63220 m!56519))

(assert (=> b!63220 m!56285))

(assert (=> b!63220 m!56517))

(assert (=> b!63220 m!56515))

(assert (=> b!63220 m!56285))

(declare-fun m!57417 () Bool)

(assert (=> b!63220 m!57417))

(assert (=> b!63215 m!56285))

(assert (=> b!63215 m!56285))

(declare-fun m!57419 () Bool)

(assert (=> b!63215 m!57419))

(declare-fun m!57421 () Bool)

(assert (=> b!63221 m!57421))

(assert (=> b!63225 m!56285))

(assert (=> b!63225 m!56285))

(assert (=> b!63225 m!56287))

(assert (=> bm!5002 m!57421))

(declare-fun m!57423 () Bool)

(assert (=> d!13003 m!57423))

(assert (=> d!13003 m!56299))

(declare-fun m!57425 () Bool)

(assert (=> b!63217 m!57425))

(declare-fun m!57427 () Bool)

(assert (=> b!63214 m!57427))

(assert (=> b!63214 m!57427))

(declare-fun m!57429 () Bool)

(assert (=> b!63214 m!57429))

(assert (=> b!63214 m!56517))

(assert (=> b!63214 m!56515))

(assert (=> b!63214 m!56519))

(declare-fun m!57431 () Bool)

(assert (=> b!63214 m!57431))

(assert (=> b!63214 m!56285))

(assert (=> b!63214 m!56517))

(declare-fun m!57433 () Bool)

(assert (=> b!63214 m!57433))

(assert (=> b!63214 m!56515))

(assert (=> b!63223 m!56285))

(assert (=> b!63223 m!56285))

(assert (=> b!63223 m!56287))

(assert (=> bm!4934 d!13003))

(declare-fun d!13005 () Bool)

(declare-fun e!41469 () Bool)

(assert (=> d!13005 e!41469))

(declare-fun res!34610 () Bool)

(assert (=> d!13005 (=> (not res!34610) (not e!41469))))

(assert (=> d!13005 (= res!34610 (and (bvsge (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) #b00000000000000000000000000000000) (bvslt (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (size!2031 lt!26369))))))

(declare-fun lt!26651 () Unit!1693)

(assert (=> d!13005 (= lt!26651 (choose!333 lt!26369 lt!26360 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (defaultEntry!2088 newMap!16)))))

(assert (=> d!13005 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!13005 (= (lemmaValidKeyInArrayIsInListMap!78 lt!26369 lt!26360 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (defaultEntry!2088 newMap!16)) lt!26651)))

(declare-fun b!63226 () Bool)

(assert (=> b!63226 (= e!41469 (contains!690 (getCurrentListMap!406 lt!26369 lt!26360 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (select (arr!1799 lt!26369) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)))))))

(assert (= (and d!13005 res!34610) b!63226))

(declare-fun m!57435 () Bool)

(assert (=> d!13005 m!57435))

(assert (=> d!13005 m!56299))

(assert (=> b!63226 m!56597))

(declare-fun m!57437 () Bool)

(assert (=> b!63226 m!57437))

(assert (=> b!63226 m!56597))

(assert (=> b!63226 m!57437))

(declare-fun m!57439 () Bool)

(assert (=> b!63226 m!57439))

(assert (=> d!12787 d!13005))

(declare-fun b!63227 () Bool)

(declare-fun e!41471 () (_ BitVec 32))

(declare-fun call!5006 () (_ BitVec 32))

(assert (=> b!63227 (= e!41471 (bvadd #b00000000000000000000000000000001 call!5006))))

(declare-fun d!13007 () Bool)

(declare-fun lt!26652 () (_ BitVec 32))

(assert (=> d!13007 (and (bvsge lt!26652 #b00000000000000000000000000000000) (bvsle lt!26652 (bvsub (size!2031 lt!26370) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)))))))

(declare-fun e!41470 () (_ BitVec 32))

(assert (=> d!13007 (= lt!26652 e!41470)))

(declare-fun c!8525 () Bool)

(assert (=> d!13007 (= c!8525 (bvsge (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (bvadd (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) #b00000000000000000000000000000001)))))

(assert (=> d!13007 (and (bvsle (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (bvadd (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) #b00000000000000000000000000000001)) (bvsge (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) #b00000000000000000000000000000000) (bvsle (bvadd (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) #b00000000000000000000000000000001) (size!2031 lt!26370)))))

(assert (=> d!13007 (= (arrayCountValidKeys!0 lt!26370 (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (bvadd (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) #b00000000000000000000000000000001)) lt!26652)))

(declare-fun b!63228 () Bool)

(assert (=> b!63228 (= e!41471 call!5006)))

(declare-fun bm!5003 () Bool)

(assert (=> bm!5003 (= call!5006 (arrayCountValidKeys!0 lt!26370 (bvadd (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) #b00000000000000000000000000000001) (bvadd (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) #b00000000000000000000000000000001)))))

(declare-fun b!63229 () Bool)

(assert (=> b!63229 (= e!41470 #b00000000000000000000000000000000)))

(declare-fun b!63230 () Bool)

(assert (=> b!63230 (= e!41470 e!41471)))

(declare-fun c!8526 () Bool)

(assert (=> b!63230 (= c!8526 (validKeyInArray!0 (select (arr!1799 lt!26370) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)))))))

(assert (= (and d!13007 c!8525) b!63229))

(assert (= (and d!13007 (not c!8525)) b!63230))

(assert (= (and b!63230 c!8526) b!63227))

(assert (= (and b!63230 (not c!8526)) b!63228))

(assert (= (or b!63227 b!63228) bm!5003))

(declare-fun m!57441 () Bool)

(assert (=> bm!5003 m!57441))

(declare-fun m!57443 () Bool)

(assert (=> b!63230 m!57443))

(assert (=> b!63230 m!57443))

(declare-fun m!57445 () Bool)

(assert (=> b!63230 m!57445))

(assert (=> d!12787 d!13007))

(assert (=> d!12787 d!12757))

(assert (=> d!12787 d!12695))

(declare-fun d!13009 () Bool)

(declare-fun res!34611 () Bool)

(declare-fun e!41474 () Bool)

(assert (=> d!13009 (=> res!34611 e!41474)))

(assert (=> d!13009 (= res!34611 (bvsge lt!26349 (size!2031 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16))))))))

(assert (=> d!13009 (= (arrayNoDuplicates!0 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16))) lt!26349 lt!26367) e!41474)))

(declare-fun b!63231 () Bool)

(declare-fun e!41472 () Bool)

(declare-fun call!5007 () Bool)

(assert (=> b!63231 (= e!41472 call!5007)))

(declare-fun b!63232 () Bool)

(declare-fun e!41475 () Bool)

(assert (=> b!63232 (= e!41474 e!41475)))

(declare-fun res!34612 () Bool)

(assert (=> b!63232 (=> (not res!34612) (not e!41475))))

(declare-fun e!41473 () Bool)

(assert (=> b!63232 (= res!34612 (not e!41473))))

(declare-fun res!34613 () Bool)

(assert (=> b!63232 (=> (not res!34613) (not e!41473))))

(assert (=> b!63232 (= res!34613 (validKeyInArray!0 (select (arr!1799 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16)))) lt!26349)))))

(declare-fun b!63233 () Bool)

(assert (=> b!63233 (= e!41475 e!41472)))

(declare-fun c!8527 () Bool)

(assert (=> b!63233 (= c!8527 (validKeyInArray!0 (select (arr!1799 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16)))) lt!26349)))))

(declare-fun b!63234 () Bool)

(assert (=> b!63234 (= e!41473 (contains!692 lt!26367 (select (arr!1799 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16)))) lt!26349)))))

(declare-fun bm!5004 () Bool)

(assert (=> bm!5004 (= call!5007 (arrayNoDuplicates!0 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16))) (bvadd lt!26349 #b00000000000000000000000000000001) (ite c!8527 (Cons!1436 (select (arr!1799 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16)))) lt!26349) lt!26367) lt!26367)))))

(declare-fun b!63235 () Bool)

(assert (=> b!63235 (= e!41472 call!5007)))

(assert (= (and d!13009 (not res!34611)) b!63232))

(assert (= (and b!63232 res!34613) b!63234))

(assert (= (and b!63232 res!34612) b!63233))

(assert (= (and b!63233 c!8527) b!63231))

(assert (= (and b!63233 (not c!8527)) b!63235))

(assert (= (or b!63231 b!63235) bm!5004))

(declare-fun m!57447 () Bool)

(assert (=> b!63232 m!57447))

(assert (=> b!63232 m!57447))

(declare-fun m!57449 () Bool)

(assert (=> b!63232 m!57449))

(assert (=> b!63233 m!57447))

(assert (=> b!63233 m!57447))

(assert (=> b!63233 m!57449))

(assert (=> b!63234 m!57447))

(assert (=> b!63234 m!57447))

(declare-fun m!57451 () Bool)

(assert (=> b!63234 m!57451))

(assert (=> bm!5004 m!57447))

(declare-fun m!57453 () Bool)

(assert (=> bm!5004 m!57453))

(assert (=> d!12787 d!13009))

(assert (=> d!12787 d!12775))

(declare-fun d!13011 () Bool)

(declare-fun e!41478 () Bool)

(assert (=> d!13011 e!41478))

(declare-fun res!34616 () Bool)

(assert (=> d!13011 (=> (not res!34616) (not e!41478))))

(assert (=> d!13011 (= res!34616 (and (bvsge (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) #b00000000000000000000000000000000) (bvslt (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (size!2031 (_keys!3720 newMap!16)))))))

(declare-fun lt!26655 () Unit!1693)

(declare-fun choose!41 (array!3761 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1440) Unit!1693)

(assert (=> d!13011 (= lt!26655 (choose!41 (_keys!3720 newMap!16) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) lt!26349 lt!26367))))

(assert (=> d!13011 (bvslt (size!2031 (_keys!3720 newMap!16)) #b01111111111111111111111111111111)))

(assert (=> d!13011 (= (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!3720 newMap!16) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) lt!26349 lt!26367) lt!26655)))

(declare-fun b!63238 () Bool)

(assert (=> b!63238 (= e!41478 (arrayNoDuplicates!0 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16))) lt!26349 lt!26367))))

(assert (= (and d!13011 res!34616) b!63238))

(assert (=> d!13011 m!56051))

(declare-fun m!57455 () Bool)

(assert (=> d!13011 m!57455))

(assert (=> b!63238 m!56629))

(assert (=> b!63238 m!56609))

(assert (=> d!12787 d!13011))

(declare-fun d!13013 () Bool)

(declare-fun e!41484 () Bool)

(assert (=> d!13013 e!41484))

(declare-fun res!34627 () Bool)

(assert (=> d!13013 (=> (not res!34627) (not e!41484))))

(assert (=> d!13013 (= res!34627 (and (bvsge (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) #b00000000000000000000000000000000) (bvslt (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (size!2031 (_keys!3720 newMap!16)))))))

(declare-fun lt!26658 () Unit!1693)

(declare-fun choose!1 (array!3761 (_ BitVec 32) (_ BitVec 64)) Unit!1693)

(assert (=> d!13013 (= lt!26658 (choose!1 (_keys!3720 newMap!16) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun e!41483 () Bool)

(assert (=> d!13013 e!41483))

(declare-fun res!34626 () Bool)

(assert (=> d!13013 (=> (not res!34626) (not e!41483))))

(assert (=> d!13013 (= res!34626 (and (bvsge (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) #b00000000000000000000000000000000) (bvslt (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (size!2031 (_keys!3720 newMap!16)))))))

(assert (=> d!13013 (= (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!3720 newMap!16) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) lt!26658)))

(declare-fun b!63249 () Bool)

(assert (=> b!63249 (= e!41483 (bvslt (size!2031 (_keys!3720 newMap!16)) #b01111111111111111111111111111111))))

(declare-fun b!63247 () Bool)

(declare-fun res!34625 () Bool)

(assert (=> b!63247 (=> (not res!34625) (not e!41483))))

(assert (=> b!63247 (= res!34625 (not (validKeyInArray!0 (select (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125))))))))

(declare-fun b!63248 () Bool)

(declare-fun res!34628 () Bool)

(assert (=> b!63248 (=> (not res!34628) (not e!41483))))

(assert (=> b!63248 (= res!34628 (validKeyInArray!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun b!63250 () Bool)

(assert (=> b!63250 (= e!41484 (= (arrayCountValidKeys!0 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16))) #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!3720 newMap!16) #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))) #b00000000000000000000000000000001)))))

(assert (= (and d!13013 res!34626) b!63247))

(assert (= (and b!63247 res!34625) b!63248))

(assert (= (and b!63248 res!34628) b!63249))

(assert (= (and d!13013 res!34627) b!63250))

(assert (=> d!13013 m!56051))

(declare-fun m!57457 () Bool)

(assert (=> d!13013 m!57457))

(declare-fun m!57459 () Bool)

(assert (=> b!63247 m!57459))

(assert (=> b!63247 m!57459))

(declare-fun m!57461 () Bool)

(assert (=> b!63247 m!57461))

(assert (=> b!63248 m!56051))

(assert (=> b!63248 m!56145))

(assert (=> b!63250 m!56629))

(assert (=> b!63250 m!56627))

(assert (=> b!63250 m!56209))

(assert (=> d!12787 d!13013))

(declare-fun d!13015 () Bool)

(declare-fun e!41487 () Bool)

(assert (=> d!13015 e!41487))

(declare-fun res!34631 () Bool)

(assert (=> d!13015 (=> (not res!34631) (not e!41487))))

(assert (=> d!13015 (= res!34631 (and (bvsge (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) #b00000000000000000000000000000000) (bvslt (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (size!2031 (_keys!3720 newMap!16))) (bvslt (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (size!2032 (_values!2071 newMap!16)))))))

(declare-fun lt!26661 () Unit!1693)

(declare-fun choose!341 (array!3761 array!3763 (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 (_ BitVec 32) (_ BitVec 64) V!2867 Int) Unit!1693)

(assert (=> d!13015 (= lt!26661 (choose!341 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2088 newMap!16)))))

(assert (=> d!13015 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!13015 (= (lemmaAddValidKeyToArrayThenAddPairToListMap!7 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2088 newMap!16)) lt!26661)))

(declare-fun b!63253 () Bool)

(assert (=> b!63253 (= e!41487 (= (+!83 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!406 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16))) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))))))

(assert (= (and d!13015 res!34631) b!63253))

(assert (=> d!13015 m!56051))

(assert (=> d!13015 m!56063))

(declare-fun m!57463 () Bool)

(assert (=> d!13015 m!57463))

(assert (=> d!13015 m!56299))

(assert (=> b!63253 m!56151))

(assert (=> b!63253 m!56467))

(assert (=> b!63253 m!56619))

(assert (=> b!63253 m!56629))

(assert (=> b!63253 m!56151))

(assert (=> b!63253 m!56617))

(assert (=> d!12787 d!13015))

(declare-fun b!63254 () Bool)

(declare-fun e!41497 () Bool)

(declare-fun e!41500 () Bool)

(assert (=> b!63254 (= e!41497 e!41500)))

(declare-fun res!34637 () Bool)

(declare-fun call!5013 () Bool)

(assert (=> b!63254 (= res!34637 call!5013)))

(assert (=> b!63254 (=> (not res!34637) (not e!41500))))

(declare-fun b!63255 () Bool)

(declare-fun res!34638 () Bool)

(declare-fun e!41498 () Bool)

(assert (=> b!63255 (=> (not res!34638) (not e!41498))))

(assert (=> b!63255 (= res!34638 e!41497)))

(declare-fun c!8530 () Bool)

(assert (=> b!63255 (= c!8530 (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!63256 () Bool)

(declare-fun e!41492 () Unit!1693)

(declare-fun lt!26665 () Unit!1693)

(assert (=> b!63256 (= e!41492 lt!26665)))

(declare-fun lt!26669 () ListLongMap!1373)

(assert (=> b!63256 (= lt!26669 (getCurrentListMapNoExtraKeys!46 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16))) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26666 () (_ BitVec 64))

(assert (=> b!63256 (= lt!26666 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26675 () (_ BitVec 64))

(assert (=> b!63256 (= lt!26675 (select (arr!1799 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!26679 () Unit!1693)

(assert (=> b!63256 (= lt!26679 (addStillContains!44 lt!26669 lt!26666 (zeroValue!2000 newMap!16) lt!26675))))

(assert (=> b!63256 (contains!690 (+!83 lt!26669 (tuple2!2039 lt!26666 (zeroValue!2000 newMap!16))) lt!26675)))

(declare-fun lt!26677 () Unit!1693)

(assert (=> b!63256 (= lt!26677 lt!26679)))

(declare-fun lt!26672 () ListLongMap!1373)

(assert (=> b!63256 (= lt!26672 (getCurrentListMapNoExtraKeys!46 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16))) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26664 () (_ BitVec 64))

(assert (=> b!63256 (= lt!26664 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26676 () (_ BitVec 64))

(assert (=> b!63256 (= lt!26676 (select (arr!1799 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!26668 () Unit!1693)

(assert (=> b!63256 (= lt!26668 (addApplyDifferent!44 lt!26672 lt!26664 (minValue!2000 newMap!16) lt!26676))))

(assert (=> b!63256 (= (apply!68 (+!83 lt!26672 (tuple2!2039 lt!26664 (minValue!2000 newMap!16))) lt!26676) (apply!68 lt!26672 lt!26676))))

(declare-fun lt!26678 () Unit!1693)

(assert (=> b!63256 (= lt!26678 lt!26668)))

(declare-fun lt!26673 () ListLongMap!1373)

(assert (=> b!63256 (= lt!26673 (getCurrentListMapNoExtraKeys!46 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16))) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26683 () (_ BitVec 64))

(assert (=> b!63256 (= lt!26683 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26680 () (_ BitVec 64))

(assert (=> b!63256 (= lt!26680 (select (arr!1799 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!26663 () Unit!1693)

(assert (=> b!63256 (= lt!26663 (addApplyDifferent!44 lt!26673 lt!26683 (zeroValue!2000 newMap!16) lt!26680))))

(assert (=> b!63256 (= (apply!68 (+!83 lt!26673 (tuple2!2039 lt!26683 (zeroValue!2000 newMap!16))) lt!26680) (apply!68 lt!26673 lt!26680))))

(declare-fun lt!26662 () Unit!1693)

(assert (=> b!63256 (= lt!26662 lt!26663)))

(declare-fun lt!26667 () ListLongMap!1373)

(assert (=> b!63256 (= lt!26667 (getCurrentListMapNoExtraKeys!46 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16))) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26682 () (_ BitVec 64))

(assert (=> b!63256 (= lt!26682 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26670 () (_ BitVec 64))

(assert (=> b!63256 (= lt!26670 (select (arr!1799 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16)))) #b00000000000000000000000000000000))))

(assert (=> b!63256 (= lt!26665 (addApplyDifferent!44 lt!26667 lt!26682 (minValue!2000 newMap!16) lt!26670))))

(assert (=> b!63256 (= (apply!68 (+!83 lt!26667 (tuple2!2039 lt!26682 (minValue!2000 newMap!16))) lt!26670) (apply!68 lt!26667 lt!26670))))

(declare-fun b!63257 () Bool)

(assert (=> b!63257 (= e!41497 (not call!5013))))

(declare-fun call!5011 () ListLongMap!1373)

(declare-fun call!5009 () ListLongMap!1373)

(declare-fun call!5008 () ListLongMap!1373)

(declare-fun c!8531 () Bool)

(declare-fun bm!5006 () Bool)

(declare-fun c!8533 () Bool)

(declare-fun call!5014 () ListLongMap!1373)

(assert (=> bm!5006 (= call!5009 (+!83 (ite c!8531 call!5011 (ite c!8533 call!5008 call!5014)) (ite (or c!8531 c!8533) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))

(declare-fun bm!5007 () Bool)

(assert (=> bm!5007 (= call!5014 call!5008)))

(declare-fun b!63258 () Bool)

(declare-fun e!41496 () Bool)

(declare-fun e!41489 () Bool)

(assert (=> b!63258 (= e!41496 e!41489)))

(declare-fun res!34632 () Bool)

(assert (=> b!63258 (=> (not res!34632) (not e!41489))))

(declare-fun lt!26671 () ListLongMap!1373)

(assert (=> b!63258 (= res!34632 (contains!690 lt!26671 (select (arr!1799 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> b!63258 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16))))))))

(declare-fun bm!5008 () Bool)

(declare-fun call!5012 () Bool)

(assert (=> bm!5008 (= call!5012 (contains!690 lt!26671 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63259 () Bool)

(declare-fun e!41490 () Bool)

(assert (=> b!63259 (= e!41490 (not call!5012))))

(declare-fun bm!5009 () Bool)

(assert (=> bm!5009 (= call!5013 (contains!690 lt!26671 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!5010 () Bool)

(declare-fun call!5010 () ListLongMap!1373)

(assert (=> bm!5010 (= call!5010 call!5009)))

(declare-fun b!63260 () Bool)

(declare-fun e!41493 () ListLongMap!1373)

(assert (=> b!63260 (= e!41493 (+!83 call!5009 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))

(declare-fun b!63261 () Bool)

(declare-fun res!34636 () Bool)

(assert (=> b!63261 (=> (not res!34636) (not e!41498))))

(assert (=> b!63261 (= res!34636 e!41496)))

(declare-fun res!34635 () Bool)

(assert (=> b!63261 (=> res!34635 e!41496)))

(declare-fun e!41495 () Bool)

(assert (=> b!63261 (= res!34635 (not e!41495))))

(declare-fun res!34633 () Bool)

(assert (=> b!63261 (=> (not res!34633) (not e!41495))))

(assert (=> b!63261 (= res!34633 (bvslt #b00000000000000000000000000000000 (size!2031 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16))))))))

(declare-fun d!13017 () Bool)

(assert (=> d!13017 e!41498))

(declare-fun res!34634 () Bool)

(assert (=> d!13017 (=> (not res!34634) (not e!41498))))

(assert (=> d!13017 (= res!34634 (or (bvsge #b00000000000000000000000000000000 (size!2031 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16))))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16))))))))))

(declare-fun lt!26681 () ListLongMap!1373)

(assert (=> d!13017 (= lt!26671 lt!26681)))

(declare-fun lt!26674 () Unit!1693)

(assert (=> d!13017 (= lt!26674 e!41492)))

(declare-fun c!8529 () Bool)

(declare-fun e!41499 () Bool)

(assert (=> d!13017 (= c!8529 e!41499)))

(declare-fun res!34639 () Bool)

(assert (=> d!13017 (=> (not res!34639) (not e!41499))))

(assert (=> d!13017 (= res!34639 (bvslt #b00000000000000000000000000000000 (size!2031 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16))))))))

(assert (=> d!13017 (= lt!26681 e!41493)))

(assert (=> d!13017 (= c!8531 (and (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!13017 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!13017 (= (getCurrentListMap!406 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16))) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) lt!26671)))

(declare-fun bm!5005 () Bool)

(assert (=> bm!5005 (= call!5008 call!5011)))

(declare-fun b!63262 () Bool)

(assert (=> b!63262 (= e!41500 (= (apply!68 lt!26671 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2000 newMap!16)))))

(declare-fun b!63263 () Bool)

(declare-fun e!41494 () Bool)

(assert (=> b!63263 (= e!41494 (= (apply!68 lt!26671 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2000 newMap!16)))))

(declare-fun b!63264 () Bool)

(assert (=> b!63264 (= e!41490 e!41494)))

(declare-fun res!34640 () Bool)

(assert (=> b!63264 (= res!34640 call!5012)))

(assert (=> b!63264 (=> (not res!34640) (not e!41494))))

(declare-fun b!63265 () Bool)

(assert (=> b!63265 (= e!41495 (validKeyInArray!0 (select (arr!1799 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!63266 () Bool)

(assert (=> b!63266 (= e!41499 (validKeyInArray!0 (select (arr!1799 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!63267 () Bool)

(declare-fun Unit!1729 () Unit!1693)

(assert (=> b!63267 (= e!41492 Unit!1729)))

(declare-fun b!63268 () Bool)

(declare-fun e!41491 () ListLongMap!1373)

(assert (=> b!63268 (= e!41491 call!5010)))

(declare-fun bm!5011 () Bool)

(assert (=> bm!5011 (= call!5011 (getCurrentListMapNoExtraKeys!46 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16))) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16))) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun b!63269 () Bool)

(declare-fun e!41488 () ListLongMap!1373)

(assert (=> b!63269 (= e!41488 call!5014)))

(declare-fun b!63270 () Bool)

(assert (=> b!63270 (= e!41498 e!41490)))

(declare-fun c!8532 () Bool)

(assert (=> b!63270 (= c!8532 (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!63271 () Bool)

(declare-fun c!8528 () Bool)

(assert (=> b!63271 (= c!8528 (and (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!63271 (= e!41491 e!41488)))

(declare-fun b!63272 () Bool)

(assert (=> b!63272 (= e!41488 call!5010)))

(declare-fun b!63273 () Bool)

(assert (=> b!63273 (= e!41489 (= (apply!68 lt!26671 (select (arr!1799 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16)))) #b00000000000000000000000000000000)) (get!1082 (select (arr!1800 (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!63273 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2032 (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16))))))))

(assert (=> b!63273 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16))))))))

(declare-fun b!63274 () Bool)

(assert (=> b!63274 (= e!41493 e!41491)))

(assert (=> b!63274 (= c!8533 (and (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!13017 c!8531) b!63260))

(assert (= (and d!13017 (not c!8531)) b!63274))

(assert (= (and b!63274 c!8533) b!63268))

(assert (= (and b!63274 (not c!8533)) b!63271))

(assert (= (and b!63271 c!8528) b!63272))

(assert (= (and b!63271 (not c!8528)) b!63269))

(assert (= (or b!63272 b!63269) bm!5007))

(assert (= (or b!63268 bm!5007) bm!5005))

(assert (= (or b!63268 b!63272) bm!5010))

(assert (= (or b!63260 bm!5005) bm!5011))

(assert (= (or b!63260 bm!5010) bm!5006))

(assert (= (and d!13017 res!34639) b!63266))

(assert (= (and d!13017 c!8529) b!63256))

(assert (= (and d!13017 (not c!8529)) b!63267))

(assert (= (and d!13017 res!34634) b!63261))

(assert (= (and b!63261 res!34633) b!63265))

(assert (= (and b!63261 (not res!34635)) b!63258))

(assert (= (and b!63258 res!34632) b!63273))

(assert (= (and b!63261 res!34636) b!63255))

(assert (= (and b!63255 c!8530) b!63254))

(assert (= (and b!63255 (not c!8530)) b!63257))

(assert (= (and b!63254 res!34637) b!63262))

(assert (= (or b!63254 b!63257) bm!5009))

(assert (= (and b!63255 res!34638) b!63270))

(assert (= (and b!63270 c!8532) b!63264))

(assert (= (and b!63270 (not c!8532)) b!63259))

(assert (= (and b!63264 res!34640) b!63263))

(assert (= (or b!63264 b!63259) bm!5008))

(declare-fun b_lambda!2829 () Bool)

(assert (=> (not b_lambda!2829) (not b!63273)))

(assert (=> b!63273 t!4841))

(declare-fun b_and!3879 () Bool)

(assert (= b_and!3875 (and (=> t!4841 result!2459) b_and!3879)))

(assert (=> b!63273 t!4843))

(declare-fun b_and!3881 () Bool)

(assert (= b_and!3877 (and (=> t!4843 result!2461) b_and!3881)))

(declare-fun m!57465 () Bool)

(assert (=> b!63266 m!57465))

(assert (=> b!63266 m!57465))

(declare-fun m!57467 () Bool)

(assert (=> b!63266 m!57467))

(declare-fun m!57469 () Bool)

(assert (=> b!63256 m!57469))

(declare-fun m!57471 () Bool)

(assert (=> b!63256 m!57471))

(declare-fun m!57473 () Bool)

(assert (=> b!63256 m!57473))

(declare-fun m!57475 () Bool)

(assert (=> b!63256 m!57475))

(declare-fun m!57477 () Bool)

(assert (=> b!63256 m!57477))

(declare-fun m!57479 () Bool)

(assert (=> b!63256 m!57479))

(declare-fun m!57481 () Bool)

(assert (=> b!63256 m!57481))

(declare-fun m!57483 () Bool)

(assert (=> b!63256 m!57483))

(declare-fun m!57485 () Bool)

(assert (=> b!63256 m!57485))

(declare-fun m!57487 () Bool)

(assert (=> b!63256 m!57487))

(declare-fun m!57489 () Bool)

(assert (=> b!63256 m!57489))

(declare-fun m!57491 () Bool)

(assert (=> b!63256 m!57491))

(declare-fun m!57493 () Bool)

(assert (=> b!63256 m!57493))

(declare-fun m!57495 () Bool)

(assert (=> b!63256 m!57495))

(assert (=> b!63256 m!57465))

(assert (=> b!63256 m!57493))

(declare-fun m!57497 () Bool)

(assert (=> b!63256 m!57497))

(assert (=> b!63256 m!57489))

(assert (=> b!63256 m!57475))

(declare-fun m!57499 () Bool)

(assert (=> b!63256 m!57499))

(assert (=> b!63256 m!57483))

(declare-fun m!57501 () Bool)

(assert (=> b!63262 m!57501))

(assert (=> bm!5011 m!57495))

(assert (=> b!63265 m!57465))

(assert (=> b!63265 m!57465))

(assert (=> b!63265 m!57467))

(assert (=> d!13017 m!56299))

(assert (=> b!63273 m!57465))

(declare-fun m!57503 () Bool)

(assert (=> b!63273 m!57503))

(assert (=> b!63273 m!56515))

(declare-fun m!57505 () Bool)

(assert (=> b!63273 m!57505))

(assert (=> b!63273 m!57465))

(assert (=> b!63273 m!57505))

(assert (=> b!63273 m!56515))

(declare-fun m!57507 () Bool)

(assert (=> b!63273 m!57507))

(assert (=> b!63258 m!57465))

(assert (=> b!63258 m!57465))

(declare-fun m!57509 () Bool)

(assert (=> b!63258 m!57509))

(declare-fun m!57511 () Bool)

(assert (=> b!63263 m!57511))

(declare-fun m!57513 () Bool)

(assert (=> bm!5006 m!57513))

(declare-fun m!57515 () Bool)

(assert (=> b!63260 m!57515))

(declare-fun m!57517 () Bool)

(assert (=> bm!5009 m!57517))

(declare-fun m!57519 () Bool)

(assert (=> bm!5008 m!57519))

(assert (=> d!12787 d!13017))

(declare-fun b!63275 () Bool)

(declare-fun e!41510 () Bool)

(declare-fun e!41513 () Bool)

(assert (=> b!63275 (= e!41510 e!41513)))

(declare-fun res!34646 () Bool)

(declare-fun call!5020 () Bool)

(assert (=> b!63275 (= res!34646 call!5020)))

(assert (=> b!63275 (=> (not res!34646) (not e!41513))))

(declare-fun b!63276 () Bool)

(declare-fun res!34647 () Bool)

(declare-fun e!41511 () Bool)

(assert (=> b!63276 (=> (not res!34647) (not e!41511))))

(assert (=> b!63276 (= res!34647 e!41510)))

(declare-fun c!8536 () Bool)

(assert (=> b!63276 (= c!8536 (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!63277 () Bool)

(declare-fun e!41505 () Unit!1693)

(declare-fun lt!26687 () Unit!1693)

(assert (=> b!63277 (= e!41505 lt!26687)))

(declare-fun lt!26691 () ListLongMap!1373)

(assert (=> b!63277 (= lt!26691 (getCurrentListMapNoExtraKeys!46 lt!26369 lt!26360 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26688 () (_ BitVec 64))

(assert (=> b!63277 (= lt!26688 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26697 () (_ BitVec 64))

(assert (=> b!63277 (= lt!26697 (select (arr!1799 lt!26369) #b00000000000000000000000000000000))))

(declare-fun lt!26701 () Unit!1693)

(assert (=> b!63277 (= lt!26701 (addStillContains!44 lt!26691 lt!26688 (zeroValue!2000 newMap!16) lt!26697))))

(assert (=> b!63277 (contains!690 (+!83 lt!26691 (tuple2!2039 lt!26688 (zeroValue!2000 newMap!16))) lt!26697)))

(declare-fun lt!26699 () Unit!1693)

(assert (=> b!63277 (= lt!26699 lt!26701)))

(declare-fun lt!26694 () ListLongMap!1373)

(assert (=> b!63277 (= lt!26694 (getCurrentListMapNoExtraKeys!46 lt!26369 lt!26360 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26686 () (_ BitVec 64))

(assert (=> b!63277 (= lt!26686 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26698 () (_ BitVec 64))

(assert (=> b!63277 (= lt!26698 (select (arr!1799 lt!26369) #b00000000000000000000000000000000))))

(declare-fun lt!26690 () Unit!1693)

(assert (=> b!63277 (= lt!26690 (addApplyDifferent!44 lt!26694 lt!26686 (minValue!2000 newMap!16) lt!26698))))

(assert (=> b!63277 (= (apply!68 (+!83 lt!26694 (tuple2!2039 lt!26686 (minValue!2000 newMap!16))) lt!26698) (apply!68 lt!26694 lt!26698))))

(declare-fun lt!26700 () Unit!1693)

(assert (=> b!63277 (= lt!26700 lt!26690)))

(declare-fun lt!26695 () ListLongMap!1373)

(assert (=> b!63277 (= lt!26695 (getCurrentListMapNoExtraKeys!46 lt!26369 lt!26360 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26705 () (_ BitVec 64))

(assert (=> b!63277 (= lt!26705 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26702 () (_ BitVec 64))

(assert (=> b!63277 (= lt!26702 (select (arr!1799 lt!26369) #b00000000000000000000000000000000))))

(declare-fun lt!26685 () Unit!1693)

(assert (=> b!63277 (= lt!26685 (addApplyDifferent!44 lt!26695 lt!26705 (zeroValue!2000 newMap!16) lt!26702))))

(assert (=> b!63277 (= (apply!68 (+!83 lt!26695 (tuple2!2039 lt!26705 (zeroValue!2000 newMap!16))) lt!26702) (apply!68 lt!26695 lt!26702))))

(declare-fun lt!26684 () Unit!1693)

(assert (=> b!63277 (= lt!26684 lt!26685)))

(declare-fun lt!26689 () ListLongMap!1373)

(assert (=> b!63277 (= lt!26689 (getCurrentListMapNoExtraKeys!46 lt!26369 lt!26360 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26704 () (_ BitVec 64))

(assert (=> b!63277 (= lt!26704 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26692 () (_ BitVec 64))

(assert (=> b!63277 (= lt!26692 (select (arr!1799 lt!26369) #b00000000000000000000000000000000))))

(assert (=> b!63277 (= lt!26687 (addApplyDifferent!44 lt!26689 lt!26704 (minValue!2000 newMap!16) lt!26692))))

(assert (=> b!63277 (= (apply!68 (+!83 lt!26689 (tuple2!2039 lt!26704 (minValue!2000 newMap!16))) lt!26692) (apply!68 lt!26689 lt!26692))))

(declare-fun b!63278 () Bool)

(assert (=> b!63278 (= e!41510 (not call!5020))))

(declare-fun call!5015 () ListLongMap!1373)

(declare-fun c!8537 () Bool)

(declare-fun bm!5013 () Bool)

(declare-fun call!5021 () ListLongMap!1373)

(declare-fun c!8539 () Bool)

(declare-fun call!5018 () ListLongMap!1373)

(declare-fun call!5016 () ListLongMap!1373)

(assert (=> bm!5013 (= call!5016 (+!83 (ite c!8537 call!5018 (ite c!8539 call!5015 call!5021)) (ite (or c!8537 c!8539) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))

(declare-fun bm!5014 () Bool)

(assert (=> bm!5014 (= call!5021 call!5015)))

(declare-fun b!63279 () Bool)

(declare-fun e!41509 () Bool)

(declare-fun e!41502 () Bool)

(assert (=> b!63279 (= e!41509 e!41502)))

(declare-fun res!34641 () Bool)

(assert (=> b!63279 (=> (not res!34641) (not e!41502))))

(declare-fun lt!26693 () ListLongMap!1373)

(assert (=> b!63279 (= res!34641 (contains!690 lt!26693 (select (arr!1799 lt!26369) #b00000000000000000000000000000000)))))

(assert (=> b!63279 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 lt!26369)))))

(declare-fun bm!5015 () Bool)

(declare-fun call!5019 () Bool)

(assert (=> bm!5015 (= call!5019 (contains!690 lt!26693 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63280 () Bool)

(declare-fun e!41503 () Bool)

(assert (=> b!63280 (= e!41503 (not call!5019))))

(declare-fun bm!5016 () Bool)

(assert (=> bm!5016 (= call!5020 (contains!690 lt!26693 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!5017 () Bool)

(declare-fun call!5017 () ListLongMap!1373)

(assert (=> bm!5017 (= call!5017 call!5016)))

(declare-fun b!63281 () Bool)

(declare-fun e!41506 () ListLongMap!1373)

(assert (=> b!63281 (= e!41506 (+!83 call!5016 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))

(declare-fun b!63282 () Bool)

(declare-fun res!34645 () Bool)

(assert (=> b!63282 (=> (not res!34645) (not e!41511))))

(assert (=> b!63282 (= res!34645 e!41509)))

(declare-fun res!34644 () Bool)

(assert (=> b!63282 (=> res!34644 e!41509)))

(declare-fun e!41508 () Bool)

(assert (=> b!63282 (= res!34644 (not e!41508))))

(declare-fun res!34642 () Bool)

(assert (=> b!63282 (=> (not res!34642) (not e!41508))))

(assert (=> b!63282 (= res!34642 (bvslt #b00000000000000000000000000000000 (size!2031 lt!26369)))))

(declare-fun d!13019 () Bool)

(assert (=> d!13019 e!41511))

(declare-fun res!34643 () Bool)

(assert (=> d!13019 (=> (not res!34643) (not e!41511))))

(assert (=> d!13019 (= res!34643 (or (bvsge #b00000000000000000000000000000000 (size!2031 lt!26369)) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 lt!26369)))))))

(declare-fun lt!26703 () ListLongMap!1373)

(assert (=> d!13019 (= lt!26693 lt!26703)))

(declare-fun lt!26696 () Unit!1693)

(assert (=> d!13019 (= lt!26696 e!41505)))

(declare-fun c!8535 () Bool)

(declare-fun e!41512 () Bool)

(assert (=> d!13019 (= c!8535 e!41512)))

(declare-fun res!34648 () Bool)

(assert (=> d!13019 (=> (not res!34648) (not e!41512))))

(assert (=> d!13019 (= res!34648 (bvslt #b00000000000000000000000000000000 (size!2031 lt!26369)))))

(assert (=> d!13019 (= lt!26703 e!41506)))

(assert (=> d!13019 (= c!8537 (and (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!13019 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!13019 (= (getCurrentListMap!406 lt!26369 lt!26360 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) lt!26693)))

(declare-fun bm!5012 () Bool)

(assert (=> bm!5012 (= call!5015 call!5018)))

(declare-fun b!63283 () Bool)

(assert (=> b!63283 (= e!41513 (= (apply!68 lt!26693 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2000 newMap!16)))))

(declare-fun b!63284 () Bool)

(declare-fun e!41507 () Bool)

(assert (=> b!63284 (= e!41507 (= (apply!68 lt!26693 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2000 newMap!16)))))

(declare-fun b!63285 () Bool)

(assert (=> b!63285 (= e!41503 e!41507)))

(declare-fun res!34649 () Bool)

(assert (=> b!63285 (= res!34649 call!5019)))

(assert (=> b!63285 (=> (not res!34649) (not e!41507))))

(declare-fun b!63286 () Bool)

(assert (=> b!63286 (= e!41508 (validKeyInArray!0 (select (arr!1799 lt!26369) #b00000000000000000000000000000000)))))

(declare-fun b!63287 () Bool)

(assert (=> b!63287 (= e!41512 (validKeyInArray!0 (select (arr!1799 lt!26369) #b00000000000000000000000000000000)))))

(declare-fun b!63288 () Bool)

(declare-fun Unit!1730 () Unit!1693)

(assert (=> b!63288 (= e!41505 Unit!1730)))

(declare-fun b!63289 () Bool)

(declare-fun e!41504 () ListLongMap!1373)

(assert (=> b!63289 (= e!41504 call!5017)))

(declare-fun bm!5018 () Bool)

(assert (=> bm!5018 (= call!5018 (getCurrentListMapNoExtraKeys!46 lt!26369 lt!26360 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun b!63290 () Bool)

(declare-fun e!41501 () ListLongMap!1373)

(assert (=> b!63290 (= e!41501 call!5021)))

(declare-fun b!63291 () Bool)

(assert (=> b!63291 (= e!41511 e!41503)))

(declare-fun c!8538 () Bool)

(assert (=> b!63291 (= c!8538 (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!63292 () Bool)

(declare-fun c!8534 () Bool)

(assert (=> b!63292 (= c!8534 (and (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!63292 (= e!41504 e!41501)))

(declare-fun b!63293 () Bool)

(assert (=> b!63293 (= e!41501 call!5017)))

(declare-fun b!63294 () Bool)

(assert (=> b!63294 (= e!41502 (= (apply!68 lt!26693 (select (arr!1799 lt!26369) #b00000000000000000000000000000000)) (get!1082 (select (arr!1800 lt!26360) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!63294 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2032 lt!26360)))))

(assert (=> b!63294 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 lt!26369)))))

(declare-fun b!63295 () Bool)

(assert (=> b!63295 (= e!41506 e!41504)))

(assert (=> b!63295 (= c!8539 (and (not (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1967 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!13019 c!8537) b!63281))

(assert (= (and d!13019 (not c!8537)) b!63295))

(assert (= (and b!63295 c!8539) b!63289))

(assert (= (and b!63295 (not c!8539)) b!63292))

(assert (= (and b!63292 c!8534) b!63293))

(assert (= (and b!63292 (not c!8534)) b!63290))

(assert (= (or b!63293 b!63290) bm!5014))

(assert (= (or b!63289 bm!5014) bm!5012))

(assert (= (or b!63289 b!63293) bm!5017))

(assert (= (or b!63281 bm!5012) bm!5018))

(assert (= (or b!63281 bm!5017) bm!5013))

(assert (= (and d!13019 res!34648) b!63287))

(assert (= (and d!13019 c!8535) b!63277))

(assert (= (and d!13019 (not c!8535)) b!63288))

(assert (= (and d!13019 res!34643) b!63282))

(assert (= (and b!63282 res!34642) b!63286))

(assert (= (and b!63282 (not res!34644)) b!63279))

(assert (= (and b!63279 res!34641) b!63294))

(assert (= (and b!63282 res!34645) b!63276))

(assert (= (and b!63276 c!8536) b!63275))

(assert (= (and b!63276 (not c!8536)) b!63278))

(assert (= (and b!63275 res!34646) b!63283))

(assert (= (or b!63275 b!63278) bm!5016))

(assert (= (and b!63276 res!34647) b!63291))

(assert (= (and b!63291 c!8538) b!63285))

(assert (= (and b!63291 (not c!8538)) b!63280))

(assert (= (and b!63285 res!34649) b!63284))

(assert (= (or b!63285 b!63280) bm!5015))

(declare-fun b_lambda!2831 () Bool)

(assert (=> (not b_lambda!2831) (not b!63294)))

(assert (=> b!63294 t!4841))

(declare-fun b_and!3883 () Bool)

(assert (= b_and!3879 (and (=> t!4841 result!2459) b_and!3883)))

(assert (=> b!63294 t!4843))

(declare-fun b_and!3885 () Bool)

(assert (= b_and!3881 (and (=> t!4843 result!2461) b_and!3885)))

(declare-fun m!57521 () Bool)

(assert (=> b!63287 m!57521))

(assert (=> b!63287 m!57521))

(declare-fun m!57523 () Bool)

(assert (=> b!63287 m!57523))

(declare-fun m!57525 () Bool)

(assert (=> b!63277 m!57525))

(declare-fun m!57527 () Bool)

(assert (=> b!63277 m!57527))

(declare-fun m!57529 () Bool)

(assert (=> b!63277 m!57529))

(declare-fun m!57531 () Bool)

(assert (=> b!63277 m!57531))

(declare-fun m!57533 () Bool)

(assert (=> b!63277 m!57533))

(declare-fun m!57535 () Bool)

(assert (=> b!63277 m!57535))

(declare-fun m!57537 () Bool)

(assert (=> b!63277 m!57537))

(declare-fun m!57539 () Bool)

(assert (=> b!63277 m!57539))

(declare-fun m!57541 () Bool)

(assert (=> b!63277 m!57541))

(declare-fun m!57543 () Bool)

(assert (=> b!63277 m!57543))

(declare-fun m!57545 () Bool)

(assert (=> b!63277 m!57545))

(declare-fun m!57547 () Bool)

(assert (=> b!63277 m!57547))

(declare-fun m!57549 () Bool)

(assert (=> b!63277 m!57549))

(declare-fun m!57551 () Bool)

(assert (=> b!63277 m!57551))

(assert (=> b!63277 m!57521))

(assert (=> b!63277 m!57549))

(declare-fun m!57553 () Bool)

(assert (=> b!63277 m!57553))

(assert (=> b!63277 m!57545))

(assert (=> b!63277 m!57531))

(declare-fun m!57555 () Bool)

(assert (=> b!63277 m!57555))

(assert (=> b!63277 m!57539))

(declare-fun m!57557 () Bool)

(assert (=> b!63283 m!57557))

(assert (=> bm!5018 m!57551))

(assert (=> b!63286 m!57521))

(assert (=> b!63286 m!57521))

(assert (=> b!63286 m!57523))

(assert (=> d!13019 m!56299))

(assert (=> b!63294 m!57521))

(declare-fun m!57559 () Bool)

(assert (=> b!63294 m!57559))

(assert (=> b!63294 m!56515))

(declare-fun m!57561 () Bool)

(assert (=> b!63294 m!57561))

(assert (=> b!63294 m!57521))

(assert (=> b!63294 m!57561))

(assert (=> b!63294 m!56515))

(declare-fun m!57563 () Bool)

(assert (=> b!63294 m!57563))

(assert (=> b!63279 m!57521))

(assert (=> b!63279 m!57521))

(declare-fun m!57565 () Bool)

(assert (=> b!63279 m!57565))

(declare-fun m!57567 () Bool)

(assert (=> b!63284 m!57567))

(declare-fun m!57569 () Bool)

(assert (=> bm!5013 m!57569))

(declare-fun m!57571 () Bool)

(assert (=> b!63281 m!57571))

(declare-fun m!57573 () Bool)

(assert (=> bm!5016 m!57573))

(declare-fun m!57575 () Bool)

(assert (=> bm!5015 m!57575))

(assert (=> d!12787 d!13019))

(declare-fun d!13021 () Bool)

(declare-fun res!34651 () Bool)

(declare-fun e!41514 () Bool)

(assert (=> d!13021 (=> res!34651 e!41514)))

(assert (=> d!13021 (= res!34651 (bvsge #b00000000000000000000000000000000 (size!2031 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16))))))))

(assert (=> d!13021 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16))) (mask!5994 newMap!16)) e!41514)))

(declare-fun b!63296 () Bool)

(declare-fun e!41516 () Bool)

(assert (=> b!63296 (= e!41514 e!41516)))

(declare-fun c!8540 () Bool)

(assert (=> b!63296 (= c!8540 (validKeyInArray!0 (select (arr!1799 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun bm!5019 () Bool)

(declare-fun call!5022 () Bool)

(assert (=> bm!5019 (= call!5022 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16))) (mask!5994 newMap!16)))))

(declare-fun b!63297 () Bool)

(declare-fun e!41515 () Bool)

(assert (=> b!63297 (= e!41515 call!5022)))

(declare-fun b!63298 () Bool)

(assert (=> b!63298 (= e!41516 call!5022)))

(declare-fun b!63299 () Bool)

(assert (=> b!63299 (= e!41516 e!41515)))

(declare-fun lt!26707 () (_ BitVec 64))

(assert (=> b!63299 (= lt!26707 (select (arr!1799 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!26708 () Unit!1693)

(assert (=> b!63299 (= lt!26708 (lemmaArrayContainsFromImpliesContainsFromZero!0 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16))) lt!26707 #b00000000000000000000000000000000))))

(assert (=> b!63299 (arrayContainsKey!0 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16))) lt!26707 #b00000000000000000000000000000000)))

(declare-fun lt!26706 () Unit!1693)

(assert (=> b!63299 (= lt!26706 lt!26708)))

(declare-fun res!34650 () Bool)

(assert (=> b!63299 (= res!34650 (= (seekEntryOrOpen!0 (select (arr!1799 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16)))) #b00000000000000000000000000000000) (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16))) (mask!5994 newMap!16)) (Found!229 #b00000000000000000000000000000000)))))

(assert (=> b!63299 (=> (not res!34650) (not e!41515))))

(assert (= (and d!13021 (not res!34651)) b!63296))

(assert (= (and b!63296 c!8540) b!63299))

(assert (= (and b!63296 (not c!8540)) b!63298))

(assert (= (and b!63299 res!34650) b!63297))

(assert (= (or b!63297 b!63298) bm!5019))

(assert (=> b!63296 m!57465))

(assert (=> b!63296 m!57465))

(assert (=> b!63296 m!57467))

(declare-fun m!57577 () Bool)

(assert (=> bm!5019 m!57577))

(assert (=> b!63299 m!57465))

(declare-fun m!57579 () Bool)

(assert (=> b!63299 m!57579))

(declare-fun m!57581 () Bool)

(assert (=> b!63299 m!57581))

(assert (=> b!63299 m!57465))

(declare-fun m!57583 () Bool)

(assert (=> b!63299 m!57583))

(assert (=> d!12787 d!13021))

(assert (=> d!12787 d!12851))

(declare-fun d!13023 () Bool)

(assert (=> d!13023 (= (arrayCountValidKeys!0 lt!26370 (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (bvadd (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lt!26711 () Unit!1693)

(declare-fun choose!2 (array!3761 (_ BitVec 32)) Unit!1693)

(assert (=> d!13023 (= lt!26711 (choose!2 lt!26370 (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125))))))

(declare-fun e!41519 () Bool)

(assert (=> d!13023 e!41519))

(declare-fun res!34656 () Bool)

(assert (=> d!13023 (=> (not res!34656) (not e!41519))))

(assert (=> d!13023 (= res!34656 (and (bvsge (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) #b00000000000000000000000000000000) (bvslt (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (size!2031 lt!26370))))))

(assert (=> d!13023 (= (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!26370 (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125))) lt!26711)))

(declare-fun b!63304 () Bool)

(declare-fun res!34657 () Bool)

(assert (=> b!63304 (=> (not res!34657) (not e!41519))))

(assert (=> b!63304 (= res!34657 (validKeyInArray!0 (select (arr!1799 lt!26370) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)))))))

(declare-fun b!63305 () Bool)

(assert (=> b!63305 (= e!41519 (bvslt (size!2031 lt!26370) #b01111111111111111111111111111111))))

(assert (= (and d!13023 res!34656) b!63304))

(assert (= (and b!63304 res!34657) b!63305))

(assert (=> d!13023 m!56615))

(declare-fun m!57585 () Bool)

(assert (=> d!13023 m!57585))

(assert (=> b!63304 m!57443))

(assert (=> b!63304 m!57443))

(assert (=> b!63304 m!57445))

(assert (=> d!12787 d!13023))

(declare-fun d!13025 () Bool)

(declare-fun res!34658 () Bool)

(declare-fun e!41520 () Bool)

(assert (=> d!13025 (=> res!34658 e!41520)))

(assert (=> d!13025 (= res!34658 (= (select (arr!1799 lt!26361) #b00000000000000000000000000000000) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> d!13025 (= (arrayContainsKey!0 lt!26361 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) #b00000000000000000000000000000000) e!41520)))

(declare-fun b!63306 () Bool)

(declare-fun e!41521 () Bool)

(assert (=> b!63306 (= e!41520 e!41521)))

(declare-fun res!34659 () Bool)

(assert (=> b!63306 (=> (not res!34659) (not e!41521))))

(assert (=> b!63306 (= res!34659 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2031 lt!26361)))))

(declare-fun b!63307 () Bool)

(assert (=> b!63307 (= e!41521 (arrayContainsKey!0 lt!26361 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!13025 (not res!34658)) b!63306))

(assert (= (and b!63306 res!34659) b!63307))

(declare-fun m!57587 () Bool)

(assert (=> d!13025 m!57587))

(assert (=> b!63307 m!56051))

(declare-fun m!57589 () Bool)

(assert (=> b!63307 m!57589))

(assert (=> d!12787 d!13025))

(declare-fun d!13027 () Bool)

(declare-fun e!41523 () Bool)

(assert (=> d!13027 e!41523))

(declare-fun res!34660 () Bool)

(assert (=> d!13027 (=> res!34660 e!41523)))

(declare-fun lt!26715 () Bool)

(assert (=> d!13027 (= res!34660 (not lt!26715))))

(declare-fun lt!26714 () Bool)

(assert (=> d!13027 (= lt!26715 lt!26714)))

(declare-fun lt!26712 () Unit!1693)

(declare-fun e!41522 () Unit!1693)

(assert (=> d!13027 (= lt!26712 e!41522)))

(declare-fun c!8541 () Bool)

(assert (=> d!13027 (= c!8541 lt!26714)))

(assert (=> d!13027 (= lt!26714 (containsKey!130 (toList!702 (getCurrentListMap!406 lt!26369 lt!26360 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)))))))

(assert (=> d!13027 (= (contains!690 (getCurrentListMap!406 lt!26369 lt!26360 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (select (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)))) lt!26715)))

(declare-fun b!63308 () Bool)

(declare-fun lt!26713 () Unit!1693)

(assert (=> b!63308 (= e!41522 lt!26713)))

(assert (=> b!63308 (= lt!26713 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 (getCurrentListMap!406 lt!26369 lt!26360 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)))))))

(assert (=> b!63308 (isDefined!79 (getValueByKey!126 (toList!702 (getCurrentListMap!406 lt!26369 lt!26360 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)))))))

(declare-fun b!63309 () Bool)

(declare-fun Unit!1731 () Unit!1693)

(assert (=> b!63309 (= e!41522 Unit!1731)))

(declare-fun b!63310 () Bool)

(assert (=> b!63310 (= e!41523 (isDefined!79 (getValueByKey!126 (toList!702 (getCurrentListMap!406 lt!26369 lt!26360 (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (select (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125))))))))

(assert (= (and d!13027 c!8541) b!63308))

(assert (= (and d!13027 (not c!8541)) b!63309))

(assert (= (and d!13027 (not res!34660)) b!63310))

(assert (=> d!13027 m!56607))

(declare-fun m!57591 () Bool)

(assert (=> d!13027 m!57591))

(assert (=> b!63308 m!56607))

(declare-fun m!57593 () Bool)

(assert (=> b!63308 m!57593))

(assert (=> b!63308 m!56607))

(declare-fun m!57595 () Bool)

(assert (=> b!63308 m!57595))

(assert (=> b!63308 m!57595))

(declare-fun m!57597 () Bool)

(assert (=> b!63308 m!57597))

(assert (=> b!63310 m!56607))

(assert (=> b!63310 m!57595))

(assert (=> b!63310 m!57595))

(assert (=> b!63310 m!57597))

(assert (=> d!12787 d!13027))

(declare-fun b!63311 () Bool)

(declare-fun e!41525 () (_ BitVec 32))

(declare-fun call!5023 () (_ BitVec 32))

(assert (=> b!63311 (= e!41525 (bvadd #b00000000000000000000000000000001 call!5023))))

(declare-fun lt!26716 () (_ BitVec 32))

(declare-fun d!13029 () Bool)

(assert (=> d!13029 (and (bvsge lt!26716 #b00000000000000000000000000000000) (bvsle lt!26716 (bvsub (size!2031 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun e!41524 () (_ BitVec 32))

(assert (=> d!13029 (= lt!26716 e!41524)))

(declare-fun c!8542 () Bool)

(assert (=> d!13029 (= c!8542 (bvsge #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(assert (=> d!13029 (and (bvsle #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2031 (_keys!3720 newMap!16)) (size!2031 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16))))))))

(assert (=> d!13029 (= (arrayCountValidKeys!0 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16))) #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))) lt!26716)))

(declare-fun b!63312 () Bool)

(assert (=> b!63312 (= e!41525 call!5023)))

(declare-fun bm!5020 () Bool)

(assert (=> bm!5020 (= call!5023 (arrayCountValidKeys!0 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2031 (_keys!3720 newMap!16))))))

(declare-fun b!63313 () Bool)

(assert (=> b!63313 (= e!41524 #b00000000000000000000000000000000)))

(declare-fun b!63314 () Bool)

(assert (=> b!63314 (= e!41524 e!41525)))

(declare-fun c!8543 () Bool)

(assert (=> b!63314 (= c!8543 (validKeyInArray!0 (select (arr!1799 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (= (and d!13029 c!8542) b!63313))

(assert (= (and d!13029 (not c!8542)) b!63314))

(assert (= (and b!63314 c!8543) b!63311))

(assert (= (and b!63314 (not c!8543)) b!63312))

(assert (= (or b!63311 b!63312) bm!5020))

(declare-fun m!57599 () Bool)

(assert (=> bm!5020 m!57599))

(assert (=> b!63314 m!57465))

(assert (=> b!63314 m!57465))

(assert (=> b!63314 m!57467))

(assert (=> d!12787 d!13029))

(assert (=> d!12787 d!12759))

(declare-fun d!13031 () Bool)

(declare-fun e!41528 () Bool)

(assert (=> d!13031 e!41528))

(declare-fun res!34663 () Bool)

(assert (=> d!13031 (=> (not res!34663) (not e!41528))))

(assert (=> d!13031 (= res!34663 (and (bvsge (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) #b00000000000000000000000000000000) (bvslt (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (size!2031 (_keys!3720 newMap!16)))))))

(declare-fun lt!26719 () Unit!1693)

(declare-fun choose!102 ((_ BitVec 64) array!3761 (_ BitVec 32) (_ BitVec 32)) Unit!1693)

(assert (=> d!13031 (= lt!26719 (choose!102 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (_keys!3720 newMap!16) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (mask!5994 newMap!16)))))

(assert (=> d!13031 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!13031 (= (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (_keys!3720 newMap!16) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (mask!5994 newMap!16)) lt!26719)))

(declare-fun b!63317 () Bool)

(assert (=> b!63317 (= e!41528 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3762 (store (arr!1799 (_keys!3720 newMap!16)) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (size!2031 (_keys!3720 newMap!16))) (mask!5994 newMap!16)))))

(assert (= (and d!13031 res!34663) b!63317))

(assert (=> d!13031 m!56051))

(declare-fun m!57601 () Bool)

(assert (=> d!13031 m!57601))

(assert (=> d!13031 m!56299))

(assert (=> b!63317 m!56629))

(assert (=> b!63317 m!56601))

(assert (=> d!12787 d!13031))

(declare-fun d!13033 () Bool)

(assert (=> d!13033 (arrayContainsKey!0 lt!26361 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(declare-fun lt!26720 () Unit!1693)

(assert (=> d!13033 (= lt!26720 (choose!13 lt!26361 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125))))))

(assert (=> d!13033 (bvsge (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125)) #b00000000000000000000000000000000)))

(assert (=> d!13033 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!26361 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (ite c!8335 (index!3044 lt!26125) (index!3041 lt!26125))) lt!26720)))

(declare-fun bs!2766 () Bool)

(assert (= bs!2766 d!13033))

(assert (=> bs!2766 m!56051))

(assert (=> bs!2766 m!56611))

(assert (=> bs!2766 m!56051))

(declare-fun m!57603 () Bool)

(assert (=> bs!2766 m!57603))

(assert (=> d!12787 d!13033))

(assert (=> d!12787 d!12803))

(declare-fun b!63320 () Bool)

(declare-fun res!34667 () Bool)

(declare-fun e!41529 () Bool)

(assert (=> b!63320 (=> (not res!34667) (not e!41529))))

(assert (=> b!63320 (= res!34667 (= (size!2035 (v!2419 (underlying!233 thiss!992))) (bvadd (_size!367 (v!2419 (underlying!233 thiss!992))) (bvsdiv (bvadd (extraKeys!1967 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!63318 () Bool)

(declare-fun res!34664 () Bool)

(assert (=> b!63318 (=> (not res!34664) (not e!41529))))

(assert (=> b!63318 (= res!34664 (and (= (size!2032 (_values!2071 (v!2419 (underlying!233 thiss!992)))) (bvadd (mask!5994 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000001)) (= (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (size!2032 (_values!2071 (v!2419 (underlying!233 thiss!992))))) (bvsge (_size!367 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000000) (bvsle (_size!367 (v!2419 (underlying!233 thiss!992))) (bvadd (mask!5994 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000001))))))

(declare-fun d!13035 () Bool)

(declare-fun res!34665 () Bool)

(assert (=> d!13035 (=> (not res!34665) (not e!41529))))

(assert (=> d!13035 (= res!34665 (validMask!0 (mask!5994 (v!2419 (underlying!233 thiss!992)))))))

(assert (=> d!13035 (= (simpleValid!44 (v!2419 (underlying!233 thiss!992))) e!41529)))

(declare-fun b!63321 () Bool)

(assert (=> b!63321 (= e!41529 (and (bvsge (extraKeys!1967 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000000) (bvsle (extraKeys!1967 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000011) (bvsge (_vacant!367 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000000)))))

(declare-fun b!63319 () Bool)

(declare-fun res!34666 () Bool)

(assert (=> b!63319 (=> (not res!34666) (not e!41529))))

(assert (=> b!63319 (= res!34666 (bvsge (size!2035 (v!2419 (underlying!233 thiss!992))) (_size!367 (v!2419 (underlying!233 thiss!992)))))))

(assert (= (and d!13035 res!34665) b!63318))

(assert (= (and b!63318 res!34664) b!63319))

(assert (= (and b!63319 res!34666) b!63320))

(assert (= (and b!63320 res!34667) b!63321))

(declare-fun m!57605 () Bool)

(assert (=> b!63320 m!57605))

(assert (=> d!13035 m!56087))

(assert (=> b!63319 m!57605))

(assert (=> d!12829 d!13035))

(declare-fun d!13037 () Bool)

(declare-fun e!41531 () Bool)

(assert (=> d!13037 e!41531))

(declare-fun res!34668 () Bool)

(assert (=> d!13037 (=> res!34668 e!41531)))

(declare-fun lt!26724 () Bool)

(assert (=> d!13037 (= res!34668 (not lt!26724))))

(declare-fun lt!26723 () Bool)

(assert (=> d!13037 (= lt!26724 lt!26723)))

(declare-fun lt!26721 () Unit!1693)

(declare-fun e!41530 () Unit!1693)

(assert (=> d!13037 (= lt!26721 e!41530)))

(declare-fun c!8544 () Bool)

(assert (=> d!13037 (= c!8544 lt!26723)))

(assert (=> d!13037 (= lt!26723 (containsKey!130 (toList!702 lt!26178) (_1!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> d!13037 (= (contains!690 lt!26178 (_1!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))) lt!26724)))

(declare-fun b!63322 () Bool)

(declare-fun lt!26722 () Unit!1693)

(assert (=> b!63322 (= e!41530 lt!26722)))

(assert (=> b!63322 (= lt!26722 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 lt!26178) (_1!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> b!63322 (isDefined!79 (getValueByKey!126 (toList!702 lt!26178) (_1!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!63323 () Bool)

(declare-fun Unit!1732 () Unit!1693)

(assert (=> b!63323 (= e!41530 Unit!1732)))

(declare-fun b!63324 () Bool)

(assert (=> b!63324 (= e!41531 (isDefined!79 (getValueByKey!126 (toList!702 lt!26178) (_1!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))))

(assert (= (and d!13037 c!8544) b!63322))

(assert (= (and d!13037 (not c!8544)) b!63323))

(assert (= (and d!13037 (not res!34668)) b!63324))

(declare-fun m!57607 () Bool)

(assert (=> d!13037 m!57607))

(declare-fun m!57609 () Bool)

(assert (=> b!63322 m!57609))

(assert (=> b!63322 m!56315))

(assert (=> b!63322 m!56315))

(declare-fun m!57611 () Bool)

(assert (=> b!63322 m!57611))

(assert (=> b!63324 m!56315))

(assert (=> b!63324 m!56315))

(assert (=> b!63324 m!57611))

(assert (=> d!12707 d!13037))

(declare-fun b!63326 () Bool)

(declare-fun e!41532 () Option!132)

(declare-fun e!41533 () Option!132)

(assert (=> b!63326 (= e!41532 e!41533)))

(declare-fun c!8546 () Bool)

(assert (=> b!63326 (= c!8546 (and ((_ is Cons!1435) lt!26177) (not (= (_1!1030 (h!2018 lt!26177)) (_1!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))))

(declare-fun b!63325 () Bool)

(assert (=> b!63325 (= e!41532 (Some!131 (_2!1030 (h!2018 lt!26177))))))

(declare-fun c!8545 () Bool)

(declare-fun d!13039 () Bool)

(assert (=> d!13039 (= c!8545 (and ((_ is Cons!1435) lt!26177) (= (_1!1030 (h!2018 lt!26177)) (_1!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))))

(assert (=> d!13039 (= (getValueByKey!126 lt!26177 (_1!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))) e!41532)))

(declare-fun b!63327 () Bool)

(assert (=> b!63327 (= e!41533 (getValueByKey!126 (t!4833 lt!26177) (_1!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!63328 () Bool)

(assert (=> b!63328 (= e!41533 None!130)))

(assert (= (and d!13039 c!8545) b!63325))

(assert (= (and d!13039 (not c!8545)) b!63326))

(assert (= (and b!63326 c!8546) b!63327))

(assert (= (and b!63326 (not c!8546)) b!63328))

(declare-fun m!57613 () Bool)

(assert (=> b!63327 m!57613))

(assert (=> d!12707 d!13039))

(declare-fun d!13041 () Bool)

(assert (=> d!13041 (= (getValueByKey!126 lt!26177 (_1!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))) (Some!131 (_2!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun lt!26725 () Unit!1693)

(assert (=> d!13041 (= lt!26725 (choose!340 lt!26177 (_1!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) (_2!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun e!41534 () Bool)

(assert (=> d!13041 e!41534))

(declare-fun res!34669 () Bool)

(assert (=> d!13041 (=> (not res!34669) (not e!41534))))

(assert (=> d!13041 (= res!34669 (isStrictlySorted!286 lt!26177))))

(assert (=> d!13041 (= (lemmaContainsTupThenGetReturnValue!43 lt!26177 (_1!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) (_2!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))) lt!26725)))

(declare-fun b!63329 () Bool)

(declare-fun res!34670 () Bool)

(assert (=> b!63329 (=> (not res!34670) (not e!41534))))

(assert (=> b!63329 (= res!34670 (containsKey!130 lt!26177 (_1!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!63330 () Bool)

(assert (=> b!63330 (= e!41534 (contains!693 lt!26177 (tuple2!2039 (_1!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) (_2!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))))

(assert (= (and d!13041 res!34669) b!63329))

(assert (= (and b!63329 res!34670) b!63330))

(assert (=> d!13041 m!56309))

(declare-fun m!57615 () Bool)

(assert (=> d!13041 m!57615))

(declare-fun m!57617 () Bool)

(assert (=> d!13041 m!57617))

(declare-fun m!57619 () Bool)

(assert (=> b!63329 m!57619))

(declare-fun m!57621 () Bool)

(assert (=> b!63330 m!57621))

(assert (=> d!12707 d!13041))

(declare-fun b!63331 () Bool)

(declare-fun e!41538 () List!1439)

(declare-fun call!5026 () List!1439)

(assert (=> b!63331 (= e!41538 call!5026)))

(declare-fun c!8547 () Bool)

(declare-fun e!41535 () List!1439)

(declare-fun b!63332 () Bool)

(declare-fun c!8548 () Bool)

(assert (=> b!63332 (= e!41535 (ite c!8547 (t!4833 (toList!702 (ite c!8300 call!4843 (ite c!8302 call!4840 call!4846)))) (ite c!8548 (Cons!1435 (h!2018 (toList!702 (ite c!8300 call!4843 (ite c!8302 call!4840 call!4846)))) (t!4833 (toList!702 (ite c!8300 call!4843 (ite c!8302 call!4840 call!4846))))) Nil!1436)))))

(declare-fun bm!5021 () Bool)

(declare-fun call!5025 () List!1439)

(declare-fun call!5024 () List!1439)

(assert (=> bm!5021 (= call!5025 call!5024)))

(declare-fun b!63333 () Bool)

(declare-fun e!41536 () List!1439)

(assert (=> b!63333 (= e!41536 call!5024)))

(declare-fun b!63334 () Bool)

(assert (=> b!63334 (= e!41535 (insertStrictlySorted!46 (t!4833 (toList!702 (ite c!8300 call!4843 (ite c!8302 call!4840 call!4846)))) (_1!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) (_2!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!63335 () Bool)

(declare-fun res!34672 () Bool)

(declare-fun e!41539 () Bool)

(assert (=> b!63335 (=> (not res!34672) (not e!41539))))

(declare-fun lt!26726 () List!1439)

(assert (=> b!63335 (= res!34672 (containsKey!130 lt!26726 (_1!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!63336 () Bool)

(assert (=> b!63336 (= e!41539 (contains!693 lt!26726 (tuple2!2039 (_1!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) (_2!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))))

(declare-fun b!63337 () Bool)

(assert (=> b!63337 (= e!41538 call!5026)))

(declare-fun d!13043 () Bool)

(assert (=> d!13043 e!41539))

(declare-fun res!34671 () Bool)

(assert (=> d!13043 (=> (not res!34671) (not e!41539))))

(assert (=> d!13043 (= res!34671 (isStrictlySorted!286 lt!26726))))

(assert (=> d!13043 (= lt!26726 e!41536)))

(declare-fun c!8549 () Bool)

(assert (=> d!13043 (= c!8549 (and ((_ is Cons!1435) (toList!702 (ite c!8300 call!4843 (ite c!8302 call!4840 call!4846)))) (bvslt (_1!1030 (h!2018 (toList!702 (ite c!8300 call!4843 (ite c!8302 call!4840 call!4846))))) (_1!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))))

(assert (=> d!13043 (isStrictlySorted!286 (toList!702 (ite c!8300 call!4843 (ite c!8302 call!4840 call!4846))))))

(assert (=> d!13043 (= (insertStrictlySorted!46 (toList!702 (ite c!8300 call!4843 (ite c!8302 call!4840 call!4846))) (_1!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) (_2!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))) lt!26726)))

(declare-fun bm!5022 () Bool)

(assert (=> bm!5022 (= call!5024 ($colon$colon!62 e!41535 (ite c!8549 (h!2018 (toList!702 (ite c!8300 call!4843 (ite c!8302 call!4840 call!4846)))) (tuple2!2039 (_1!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) (_2!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))))

(declare-fun c!8550 () Bool)

(assert (=> bm!5022 (= c!8550 c!8549)))

(declare-fun b!63338 () Bool)

(declare-fun e!41537 () List!1439)

(assert (=> b!63338 (= e!41536 e!41537)))

(assert (=> b!63338 (= c!8547 (and ((_ is Cons!1435) (toList!702 (ite c!8300 call!4843 (ite c!8302 call!4840 call!4846)))) (= (_1!1030 (h!2018 (toList!702 (ite c!8300 call!4843 (ite c!8302 call!4840 call!4846))))) (_1!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))))

(declare-fun b!63339 () Bool)

(assert (=> b!63339 (= c!8548 (and ((_ is Cons!1435) (toList!702 (ite c!8300 call!4843 (ite c!8302 call!4840 call!4846)))) (bvsgt (_1!1030 (h!2018 (toList!702 (ite c!8300 call!4843 (ite c!8302 call!4840 call!4846))))) (_1!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))))

(assert (=> b!63339 (= e!41537 e!41538)))

(declare-fun bm!5023 () Bool)

(assert (=> bm!5023 (= call!5026 call!5025)))

(declare-fun b!63340 () Bool)

(assert (=> b!63340 (= e!41537 call!5025)))

(assert (= (and d!13043 c!8549) b!63333))

(assert (= (and d!13043 (not c!8549)) b!63338))

(assert (= (and b!63338 c!8547) b!63340))

(assert (= (and b!63338 (not c!8547)) b!63339))

(assert (= (and b!63339 c!8548) b!63337))

(assert (= (and b!63339 (not c!8548)) b!63331))

(assert (= (or b!63337 b!63331) bm!5023))

(assert (= (or b!63340 bm!5023) bm!5021))

(assert (= (or b!63333 bm!5021) bm!5022))

(assert (= (and bm!5022 c!8550) b!63334))

(assert (= (and bm!5022 (not c!8550)) b!63332))

(assert (= (and d!13043 res!34671) b!63335))

(assert (= (and b!63335 res!34672) b!63336))

(declare-fun m!57623 () Bool)

(assert (=> b!63334 m!57623))

(declare-fun m!57625 () Bool)

(assert (=> bm!5022 m!57625))

(declare-fun m!57627 () Bool)

(assert (=> b!63335 m!57627))

(declare-fun m!57629 () Bool)

(assert (=> b!63336 m!57629))

(declare-fun m!57631 () Bool)

(assert (=> d!13043 m!57631))

(declare-fun m!57633 () Bool)

(assert (=> d!13043 m!57633))

(assert (=> d!12707 d!13043))

(declare-fun d!13045 () Bool)

(declare-fun e!41541 () Bool)

(assert (=> d!13045 e!41541))

(declare-fun res!34673 () Bool)

(assert (=> d!13045 (=> res!34673 e!41541)))

(declare-fun lt!26730 () Bool)

(assert (=> d!13045 (= res!34673 (not lt!26730))))

(declare-fun lt!26729 () Bool)

(assert (=> d!13045 (= lt!26730 lt!26729)))

(declare-fun lt!26727 () Unit!1693)

(declare-fun e!41540 () Unit!1693)

(assert (=> d!13045 (= lt!26727 e!41540)))

(declare-fun c!8551 () Bool)

(assert (=> d!13045 (= c!8551 lt!26729)))

(assert (=> d!13045 (= lt!26729 (containsKey!130 (toList!702 lt!26439) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!13045 (= (contains!690 lt!26439 #b0000000000000000000000000000000000000000000000000000000000000000) lt!26730)))

(declare-fun b!63341 () Bool)

(declare-fun lt!26728 () Unit!1693)

(assert (=> b!63341 (= e!41540 lt!26728)))

(assert (=> b!63341 (= lt!26728 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 lt!26439) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63341 (isDefined!79 (getValueByKey!126 (toList!702 lt!26439) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63342 () Bool)

(declare-fun Unit!1733 () Unit!1693)

(assert (=> b!63342 (= e!41540 Unit!1733)))

(declare-fun b!63343 () Bool)

(assert (=> b!63343 (= e!41541 (isDefined!79 (getValueByKey!126 (toList!702 lt!26439) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!13045 c!8551) b!63341))

(assert (= (and d!13045 (not c!8551)) b!63342))

(assert (= (and d!13045 (not res!34673)) b!63343))

(declare-fun m!57635 () Bool)

(assert (=> d!13045 m!57635))

(declare-fun m!57637 () Bool)

(assert (=> b!63341 m!57637))

(declare-fun m!57639 () Bool)

(assert (=> b!63341 m!57639))

(assert (=> b!63341 m!57639))

(declare-fun m!57641 () Bool)

(assert (=> b!63341 m!57641))

(assert (=> b!63343 m!57639))

(assert (=> b!63343 m!57639))

(assert (=> b!63343 m!57641))

(assert (=> bm!4963 d!13045))

(declare-fun d!13047 () Bool)

(assert (=> d!13047 (= (apply!68 lt!26402 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) (get!1086 (getValueByKey!126 (toList!702 lt!26402) (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2767 () Bool)

(assert (= bs!2767 d!13047))

(assert (=> bs!2767 m!56285))

(assert (=> bs!2767 m!57143))

(assert (=> bs!2767 m!57143))

(declare-fun m!57643 () Bool)

(assert (=> bs!2767 m!57643))

(assert (=> b!62875 d!13047))

(declare-fun c!8552 () Bool)

(declare-fun d!13049 () Bool)

(assert (=> d!13049 (= c!8552 ((_ is ValueCellFull!864) (select (arr!1800 (ite (or c!8338 c!8334) (_values!2071 newMap!16) lt!26151)) #b00000000000000000000000000000000)))))

(declare-fun e!41542 () V!2867)

(assert (=> d!13049 (= (get!1082 (select (arr!1800 (ite (or c!8338 c!8334) (_values!2071 newMap!16) lt!26151)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!41542)))

(declare-fun b!63344 () Bool)

(assert (=> b!63344 (= e!41542 (get!1084 (select (arr!1800 (ite (or c!8338 c!8334) (_values!2071 newMap!16) lt!26151)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!63345 () Bool)

(assert (=> b!63345 (= e!41542 (get!1085 (select (arr!1800 (ite (or c!8338 c!8334) (_values!2071 newMap!16) lt!26151)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!13049 c!8552) b!63344))

(assert (= (and d!13049 (not c!8552)) b!63345))

(assert (=> b!63344 m!56703))

(assert (=> b!63344 m!56515))

(declare-fun m!57645 () Bool)

(assert (=> b!63344 m!57645))

(assert (=> b!63345 m!56703))

(assert (=> b!63345 m!56515))

(declare-fun m!57647 () Bool)

(assert (=> b!63345 m!57647))

(assert (=> b!62875 d!13049))

(declare-fun d!13051 () Bool)

(declare-fun e!41543 () Bool)

(assert (=> d!13051 e!41543))

(declare-fun res!34674 () Bool)

(assert (=> d!13051 (=> (not res!34674) (not e!41543))))

(declare-fun lt!26734 () ListLongMap!1373)

(assert (=> d!13051 (= res!34674 (contains!690 lt!26734 (_1!1030 (ite (or c!8421 c!8423) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))))))))

(declare-fun lt!26733 () List!1439)

(assert (=> d!13051 (= lt!26734 (ListLongMap!1374 lt!26733))))

(declare-fun lt!26732 () Unit!1693)

(declare-fun lt!26731 () Unit!1693)

(assert (=> d!13051 (= lt!26732 lt!26731)))

(assert (=> d!13051 (= (getValueByKey!126 lt!26733 (_1!1030 (ite (or c!8421 c!8423) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))))) (Some!131 (_2!1030 (ite (or c!8421 c!8423) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))))))))

(assert (=> d!13051 (= lt!26731 (lemmaContainsTupThenGetReturnValue!43 lt!26733 (_1!1030 (ite (or c!8421 c!8423) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))) (_2!1030 (ite (or c!8421 c!8423) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))))))))

(assert (=> d!13051 (= lt!26733 (insertStrictlySorted!46 (toList!702 (ite c!8421 call!4957 (ite c!8423 call!4954 call!4960))) (_1!1030 (ite (or c!8421 c!8423) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))) (_2!1030 (ite (or c!8421 c!8423) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))))))))

(assert (=> d!13051 (= (+!83 (ite c!8421 call!4957 (ite c!8423 call!4954 call!4960)) (ite (or c!8421 c!8423) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))) lt!26734)))

(declare-fun b!63346 () Bool)

(declare-fun res!34675 () Bool)

(assert (=> b!63346 (=> (not res!34675) (not e!41543))))

(assert (=> b!63346 (= res!34675 (= (getValueByKey!126 (toList!702 lt!26734) (_1!1030 (ite (or c!8421 c!8423) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))))) (Some!131 (_2!1030 (ite (or c!8421 c!8423) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))))))))

(declare-fun b!63347 () Bool)

(assert (=> b!63347 (= e!41543 (contains!693 (toList!702 lt!26734) (ite (or c!8421 c!8423) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 newMap!16)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))))))

(assert (= (and d!13051 res!34674) b!63346))

(assert (= (and b!63346 res!34675) b!63347))

(declare-fun m!57649 () Bool)

(assert (=> d!13051 m!57649))

(declare-fun m!57651 () Bool)

(assert (=> d!13051 m!57651))

(declare-fun m!57653 () Bool)

(assert (=> d!13051 m!57653))

(declare-fun m!57655 () Bool)

(assert (=> d!13051 m!57655))

(declare-fun m!57657 () Bool)

(assert (=> b!63346 m!57657))

(declare-fun m!57659 () Bool)

(assert (=> b!63347 m!57659))

(assert (=> bm!4952 d!13051))

(assert (=> d!12807 d!12901))

(declare-fun d!13053 () Bool)

(assert (=> d!13053 (isDefined!79 (getValueByKey!126 (toList!702 lt!26046) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!26735 () Unit!1693)

(assert (=> d!13053 (= lt!26735 (choose!336 (toList!702 lt!26046) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!41544 () Bool)

(assert (=> d!13053 e!41544))

(declare-fun res!34676 () Bool)

(assert (=> d!13053 (=> (not res!34676) (not e!41544))))

(assert (=> d!13053 (= res!34676 (isStrictlySorted!286 (toList!702 lt!26046)))))

(assert (=> d!13053 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 lt!26046) #b0000000000000000000000000000000000000000000000000000000000000000) lt!26735)))

(declare-fun b!63348 () Bool)

(assert (=> b!63348 (= e!41544 (containsKey!130 (toList!702 lt!26046) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!13053 res!34676) b!63348))

(assert (=> d!13053 m!56559))

(assert (=> d!13053 m!56559))

(assert (=> d!13053 m!56749))

(declare-fun m!57661 () Bool)

(assert (=> d!13053 m!57661))

(declare-fun m!57663 () Bool)

(assert (=> d!13053 m!57663))

(assert (=> b!63348 m!56745))

(assert (=> b!62888 d!13053))

(declare-fun d!13055 () Bool)

(assert (=> d!13055 (= (isDefined!79 (getValueByKey!126 (toList!702 lt!26046) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!300 (getValueByKey!126 (toList!702 lt!26046) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!2768 () Bool)

(assert (= bs!2768 d!13055))

(assert (=> bs!2768 m!56559))

(declare-fun m!57665 () Bool)

(assert (=> bs!2768 m!57665))

(assert (=> b!62888 d!13055))

(declare-fun b!63350 () Bool)

(declare-fun e!41545 () Option!132)

(declare-fun e!41546 () Option!132)

(assert (=> b!63350 (= e!41545 e!41546)))

(declare-fun c!8554 () Bool)

(assert (=> b!63350 (= c!8554 (and ((_ is Cons!1435) (toList!702 lt!26046)) (not (= (_1!1030 (h!2018 (toList!702 lt!26046))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!63349 () Bool)

(assert (=> b!63349 (= e!41545 (Some!131 (_2!1030 (h!2018 (toList!702 lt!26046)))))))

(declare-fun d!13057 () Bool)

(declare-fun c!8553 () Bool)

(assert (=> d!13057 (= c!8553 (and ((_ is Cons!1435) (toList!702 lt!26046)) (= (_1!1030 (h!2018 (toList!702 lt!26046))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!13057 (= (getValueByKey!126 (toList!702 lt!26046) #b0000000000000000000000000000000000000000000000000000000000000000) e!41545)))

(declare-fun b!63351 () Bool)

(assert (=> b!63351 (= e!41546 (getValueByKey!126 (t!4833 (toList!702 lt!26046)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63352 () Bool)

(assert (=> b!63352 (= e!41546 None!130)))

(assert (= (and d!13057 c!8553) b!63349))

(assert (= (and d!13057 (not c!8553)) b!63350))

(assert (= (and b!63350 c!8554) b!63351))

(assert (= (and b!63350 (not c!8554)) b!63352))

(declare-fun m!57667 () Bool)

(assert (=> b!63351 m!57667))

(assert (=> b!62888 d!13057))

(declare-fun d!13059 () Bool)

(assert (=> d!13059 (isDefined!79 (getValueByKey!126 (toList!702 lt!26046) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!26736 () Unit!1693)

(assert (=> d!13059 (= lt!26736 (choose!336 (toList!702 lt!26046) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!41547 () Bool)

(assert (=> d!13059 e!41547))

(declare-fun res!34677 () Bool)

(assert (=> d!13059 (=> (not res!34677) (not e!41547))))

(assert (=> d!13059 (= res!34677 (isStrictlySorted!286 (toList!702 lt!26046)))))

(assert (=> d!13059 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 lt!26046) #b1000000000000000000000000000000000000000000000000000000000000000) lt!26736)))

(declare-fun b!63353 () Bool)

(assert (=> b!63353 (= e!41547 (containsKey!130 (toList!702 lt!26046) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!13059 res!34677) b!63353))

(assert (=> d!13059 m!56741))

(assert (=> d!13059 m!56741))

(assert (=> d!13059 m!56743))

(declare-fun m!57669 () Bool)

(assert (=> d!13059 m!57669))

(assert (=> d!13059 m!57663))

(assert (=> b!63353 m!56737))

(assert (=> b!62885 d!13059))

(declare-fun d!13061 () Bool)

(assert (=> d!13061 (= (isDefined!79 (getValueByKey!126 (toList!702 lt!26046) #b1000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!300 (getValueByKey!126 (toList!702 lt!26046) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!2769 () Bool)

(assert (= bs!2769 d!13061))

(assert (=> bs!2769 m!56741))

(declare-fun m!57671 () Bool)

(assert (=> bs!2769 m!57671))

(assert (=> b!62885 d!13061))

(assert (=> b!62885 d!12845))

(declare-fun b!63356 () Bool)

(declare-fun res!34681 () Bool)

(declare-fun e!41548 () Bool)

(assert (=> b!63356 (=> (not res!34681) (not e!41548))))

(assert (=> b!63356 (= res!34681 (= (size!2035 (_2!1031 lt!26150)) (bvadd (_size!367 (_2!1031 lt!26150)) (bvsdiv (bvadd (extraKeys!1967 (_2!1031 lt!26150)) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!63354 () Bool)

(declare-fun res!34678 () Bool)

(assert (=> b!63354 (=> (not res!34678) (not e!41548))))

(assert (=> b!63354 (= res!34678 (and (= (size!2032 (_values!2071 (_2!1031 lt!26150))) (bvadd (mask!5994 (_2!1031 lt!26150)) #b00000000000000000000000000000001)) (= (size!2031 (_keys!3720 (_2!1031 lt!26150))) (size!2032 (_values!2071 (_2!1031 lt!26150)))) (bvsge (_size!367 (_2!1031 lt!26150)) #b00000000000000000000000000000000) (bvsle (_size!367 (_2!1031 lt!26150)) (bvadd (mask!5994 (_2!1031 lt!26150)) #b00000000000000000000000000000001))))))

(declare-fun d!13063 () Bool)

(declare-fun res!34679 () Bool)

(assert (=> d!13063 (=> (not res!34679) (not e!41548))))

(assert (=> d!13063 (= res!34679 (validMask!0 (mask!5994 (_2!1031 lt!26150))))))

(assert (=> d!13063 (= (simpleValid!44 (_2!1031 lt!26150)) e!41548)))

(declare-fun b!63357 () Bool)

(assert (=> b!63357 (= e!41548 (and (bvsge (extraKeys!1967 (_2!1031 lt!26150)) #b00000000000000000000000000000000) (bvsle (extraKeys!1967 (_2!1031 lt!26150)) #b00000000000000000000000000000011) (bvsge (_vacant!367 (_2!1031 lt!26150)) #b00000000000000000000000000000000)))))

(declare-fun b!63355 () Bool)

(declare-fun res!34680 () Bool)

(assert (=> b!63355 (=> (not res!34680) (not e!41548))))

(assert (=> b!63355 (= res!34680 (bvsge (size!2035 (_2!1031 lt!26150)) (_size!367 (_2!1031 lt!26150))))))

(assert (= (and d!13063 res!34679) b!63354))

(assert (= (and b!63354 res!34678) b!63355))

(assert (= (and b!63355 res!34680) b!63356))

(assert (= (and b!63356 res!34681) b!63357))

(declare-fun m!57673 () Bool)

(assert (=> b!63356 m!57673))

(declare-fun m!57675 () Bool)

(assert (=> d!13063 m!57675))

(assert (=> b!63355 m!57673))

(assert (=> d!12827 d!13063))

(declare-fun d!13065 () Bool)

(assert (=> d!13065 (= (apply!68 lt!26439 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1086 (getValueByKey!126 (toList!702 lt!26439) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2770 () Bool)

(assert (= bs!2770 d!13065))

(declare-fun m!57677 () Bool)

(assert (=> bs!2770 m!57677))

(assert (=> bs!2770 m!57677))

(declare-fun m!57679 () Bool)

(assert (=> bs!2770 m!57679))

(assert (=> b!62905 d!13065))

(declare-fun d!13067 () Bool)

(declare-fun e!41550 () Bool)

(assert (=> d!13067 e!41550))

(declare-fun res!34682 () Bool)

(assert (=> d!13067 (=> res!34682 e!41550)))

(declare-fun lt!26740 () Bool)

(assert (=> d!13067 (= res!34682 (not lt!26740))))

(declare-fun lt!26739 () Bool)

(assert (=> d!13067 (= lt!26740 lt!26739)))

(declare-fun lt!26737 () Unit!1693)

(declare-fun e!41549 () Unit!1693)

(assert (=> d!13067 (= lt!26737 e!41549)))

(declare-fun c!8555 () Bool)

(assert (=> d!13067 (= c!8555 lt!26739)))

(assert (=> d!13067 (= lt!26739 (containsKey!130 (toList!702 lt!26402) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!13067 (= (contains!690 lt!26402 #b0000000000000000000000000000000000000000000000000000000000000000) lt!26740)))

(declare-fun b!63358 () Bool)

(declare-fun lt!26738 () Unit!1693)

(assert (=> b!63358 (= e!41549 lt!26738)))

(assert (=> b!63358 (= lt!26738 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 lt!26402) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63358 (isDefined!79 (getValueByKey!126 (toList!702 lt!26402) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63359 () Bool)

(declare-fun Unit!1734 () Unit!1693)

(assert (=> b!63359 (= e!41549 Unit!1734)))

(declare-fun b!63360 () Bool)

(assert (=> b!63360 (= e!41550 (isDefined!79 (getValueByKey!126 (toList!702 lt!26402) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!13067 c!8555) b!63358))

(assert (= (and d!13067 (not c!8555)) b!63359))

(assert (= (and d!13067 (not res!34682)) b!63360))

(declare-fun m!57681 () Bool)

(assert (=> d!13067 m!57681))

(declare-fun m!57683 () Bool)

(assert (=> b!63358 m!57683))

(declare-fun m!57685 () Bool)

(assert (=> b!63358 m!57685))

(assert (=> b!63358 m!57685))

(declare-fun m!57687 () Bool)

(assert (=> b!63358 m!57687))

(assert (=> b!63360 m!57685))

(assert (=> b!63360 m!57685))

(assert (=> b!63360 m!57687))

(assert (=> bm!4955 d!13067))

(declare-fun d!13069 () Bool)

(declare-fun res!34683 () Bool)

(declare-fun e!41553 () Bool)

(assert (=> d!13069 (=> res!34683 e!41553)))

(assert (=> d!13069 (= res!34683 (bvsge (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992))))))))

(assert (=> d!13069 (= (arrayNoDuplicates!0 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!8426 (Cons!1436 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!8284 (Cons!1436 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1437) Nil!1437)) (ite c!8284 (Cons!1436 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1437) Nil!1437))) e!41553)))

(declare-fun b!63361 () Bool)

(declare-fun e!41551 () Bool)

(declare-fun call!5027 () Bool)

(assert (=> b!63361 (= e!41551 call!5027)))

(declare-fun b!63362 () Bool)

(declare-fun e!41554 () Bool)

(assert (=> b!63362 (= e!41553 e!41554)))

(declare-fun res!34684 () Bool)

(assert (=> b!63362 (=> (not res!34684) (not e!41554))))

(declare-fun e!41552 () Bool)

(assert (=> b!63362 (= res!34684 (not e!41552))))

(declare-fun res!34685 () Bool)

(assert (=> b!63362 (=> (not res!34685) (not e!41552))))

(assert (=> b!63362 (= res!34685 (validKeyInArray!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun b!63363 () Bool)

(assert (=> b!63363 (= e!41554 e!41551)))

(declare-fun c!8556 () Bool)

(assert (=> b!63363 (= c!8556 (validKeyInArray!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun b!63364 () Bool)

(assert (=> b!63364 (= e!41552 (contains!692 (ite c!8426 (Cons!1436 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!8284 (Cons!1436 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1437) Nil!1437)) (ite c!8284 (Cons!1436 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1437) Nil!1437)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun bm!5024 () Bool)

(assert (=> bm!5024 (= call!5027 (arrayNoDuplicates!0 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!8556 (Cons!1436 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (ite c!8426 (Cons!1436 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!8284 (Cons!1436 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1437) Nil!1437)) (ite c!8284 (Cons!1436 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1437) Nil!1437))) (ite c!8426 (Cons!1436 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!8284 (Cons!1436 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1437) Nil!1437)) (ite c!8284 (Cons!1436 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1437) Nil!1437)))))))

(declare-fun b!63365 () Bool)

(assert (=> b!63365 (= e!41551 call!5027)))

(assert (= (and d!13069 (not res!34683)) b!63362))

(assert (= (and b!63362 res!34685) b!63364))

(assert (= (and b!63362 res!34684) b!63363))

(assert (= (and b!63363 c!8556) b!63361))

(assert (= (and b!63363 (not c!8556)) b!63365))

(assert (= (or b!63361 b!63365) bm!5024))

(declare-fun m!57689 () Bool)

(assert (=> b!63362 m!57689))

(assert (=> b!63362 m!57689))

(declare-fun m!57691 () Bool)

(assert (=> b!63362 m!57691))

(assert (=> b!63363 m!57689))

(assert (=> b!63363 m!57689))

(assert (=> b!63363 m!57691))

(assert (=> b!63364 m!57689))

(assert (=> b!63364 m!57689))

(declare-fun m!57693 () Bool)

(assert (=> b!63364 m!57693))

(assert (=> bm!5024 m!57689))

(declare-fun m!57695 () Bool)

(assert (=> bm!5024 m!57695))

(assert (=> bm!4958 d!13069))

(assert (=> d!12789 d!12683))

(declare-fun d!13071 () Bool)

(declare-fun e!41556 () Bool)

(assert (=> d!13071 e!41556))

(declare-fun res!34686 () Bool)

(assert (=> d!13071 (=> res!34686 e!41556)))

(declare-fun lt!26744 () Bool)

(assert (=> d!13071 (= res!34686 (not lt!26744))))

(declare-fun lt!26743 () Bool)

(assert (=> d!13071 (= lt!26744 lt!26743)))

(declare-fun lt!26741 () Unit!1693)

(declare-fun e!41555 () Unit!1693)

(assert (=> d!13071 (= lt!26741 e!41555)))

(declare-fun c!8557 () Bool)

(assert (=> d!13071 (= c!8557 lt!26743)))

(assert (=> d!13071 (= lt!26743 (containsKey!130 (toList!702 (map!1115 (_2!1031 lt!26366))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> d!13071 (= (contains!690 (map!1115 (_2!1031 lt!26366)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) lt!26744)))

(declare-fun b!63366 () Bool)

(declare-fun lt!26742 () Unit!1693)

(assert (=> b!63366 (= e!41555 lt!26742)))

(assert (=> b!63366 (= lt!26742 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 (map!1115 (_2!1031 lt!26366))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> b!63366 (isDefined!79 (getValueByKey!126 (toList!702 (map!1115 (_2!1031 lt!26366))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun b!63367 () Bool)

(declare-fun Unit!1735 () Unit!1693)

(assert (=> b!63367 (= e!41555 Unit!1735)))

(declare-fun b!63368 () Bool)

(assert (=> b!63368 (= e!41556 (isDefined!79 (getValueByKey!126 (toList!702 (map!1115 (_2!1031 lt!26366))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355))))))

(assert (= (and d!13071 c!8557) b!63366))

(assert (= (and d!13071 (not c!8557)) b!63367))

(assert (= (and d!13071 (not res!34686)) b!63368))

(assert (=> d!13071 m!56051))

(declare-fun m!57697 () Bool)

(assert (=> d!13071 m!57697))

(assert (=> b!63366 m!56051))

(declare-fun m!57699 () Bool)

(assert (=> b!63366 m!57699))

(assert (=> b!63366 m!56051))

(declare-fun m!57701 () Bool)

(assert (=> b!63366 m!57701))

(assert (=> b!63366 m!57701))

(declare-fun m!57703 () Bool)

(assert (=> b!63366 m!57703))

(assert (=> b!63368 m!56051))

(assert (=> b!63368 m!57701))

(assert (=> b!63368 m!57701))

(assert (=> b!63368 m!57703))

(assert (=> b!62803 d!13071))

(declare-fun d!13073 () Bool)

(assert (=> d!13073 (= (map!1115 (_2!1031 lt!26366)) (getCurrentListMap!406 (_keys!3720 (_2!1031 lt!26366)) (_values!2071 (_2!1031 lt!26366)) (mask!5994 (_2!1031 lt!26366)) (extraKeys!1967 (_2!1031 lt!26366)) (zeroValue!2000 (_2!1031 lt!26366)) (minValue!2000 (_2!1031 lt!26366)) #b00000000000000000000000000000000 (defaultEntry!2088 (_2!1031 lt!26366))))))

(declare-fun bs!2771 () Bool)

(assert (= bs!2771 d!13073))

(declare-fun m!57705 () Bool)

(assert (=> bs!2771 m!57705))

(assert (=> b!62803 d!13073))

(declare-fun d!13075 () Bool)

(declare-fun e!41558 () Bool)

(assert (=> d!13075 e!41558))

(declare-fun res!34687 () Bool)

(assert (=> d!13075 (=> res!34687 e!41558)))

(declare-fun lt!26748 () Bool)

(assert (=> d!13075 (= res!34687 (not lt!26748))))

(declare-fun lt!26747 () Bool)

(assert (=> d!13075 (= lt!26748 lt!26747)))

(declare-fun lt!26745 () Unit!1693)

(declare-fun e!41557 () Unit!1693)

(assert (=> d!13075 (= lt!26745 e!41557)))

(declare-fun c!8558 () Bool)

(assert (=> d!13075 (= c!8558 lt!26747)))

(assert (=> d!13075 (= lt!26747 (containsKey!130 (toList!702 lt!26201) (_1!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!13075 (= (contains!690 lt!26201 (_1!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26748)))

(declare-fun b!63369 () Bool)

(declare-fun lt!26746 () Unit!1693)

(assert (=> b!63369 (= e!41557 lt!26746)))

(assert (=> b!63369 (= lt!26746 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 lt!26201) (_1!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> b!63369 (isDefined!79 (getValueByKey!126 (toList!702 lt!26201) (_1!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63370 () Bool)

(declare-fun Unit!1736 () Unit!1693)

(assert (=> b!63370 (= e!41557 Unit!1736)))

(declare-fun b!63371 () Bool)

(assert (=> b!63371 (= e!41558 (isDefined!79 (getValueByKey!126 (toList!702 lt!26201) (_1!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(assert (= (and d!13075 c!8558) b!63369))

(assert (= (and d!13075 (not c!8558)) b!63370))

(assert (= (and d!13075 (not res!34687)) b!63371))

(declare-fun m!57707 () Bool)

(assert (=> d!13075 m!57707))

(declare-fun m!57709 () Bool)

(assert (=> b!63369 m!57709))

(assert (=> b!63369 m!56375))

(assert (=> b!63369 m!56375))

(declare-fun m!57711 () Bool)

(assert (=> b!63369 m!57711))

(assert (=> b!63371 m!56375))

(assert (=> b!63371 m!56375))

(assert (=> b!63371 m!57711))

(assert (=> d!12723 d!13075))

(declare-fun b!63373 () Bool)

(declare-fun e!41559 () Option!132)

(declare-fun e!41560 () Option!132)

(assert (=> b!63373 (= e!41559 e!41560)))

(declare-fun c!8560 () Bool)

(assert (=> b!63373 (= c!8560 (and ((_ is Cons!1435) lt!26200) (not (= (_1!1030 (h!2018 lt!26200)) (_1!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))))))

(declare-fun b!63372 () Bool)

(assert (=> b!63372 (= e!41559 (Some!131 (_2!1030 (h!2018 lt!26200))))))

(declare-fun d!13077 () Bool)

(declare-fun c!8559 () Bool)

(assert (=> d!13077 (= c!8559 (and ((_ is Cons!1435) lt!26200) (= (_1!1030 (h!2018 lt!26200)) (_1!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> d!13077 (= (getValueByKey!126 lt!26200 (_1!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))) e!41559)))

(declare-fun b!63374 () Bool)

(assert (=> b!63374 (= e!41560 (getValueByKey!126 (t!4833 lt!26200) (_1!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63375 () Bool)

(assert (=> b!63375 (= e!41560 None!130)))

(assert (= (and d!13077 c!8559) b!63372))

(assert (= (and d!13077 (not c!8559)) b!63373))

(assert (= (and b!63373 c!8560) b!63374))

(assert (= (and b!63373 (not c!8560)) b!63375))

(declare-fun m!57713 () Bool)

(assert (=> b!63374 m!57713))

(assert (=> d!12723 d!13077))

(declare-fun d!13079 () Bool)

(assert (=> d!13079 (= (getValueByKey!126 lt!26200 (_1!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))) (Some!131 (_2!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun lt!26749 () Unit!1693)

(assert (=> d!13079 (= lt!26749 (choose!340 lt!26200 (_1!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun e!41561 () Bool)

(assert (=> d!13079 e!41561))

(declare-fun res!34688 () Bool)

(assert (=> d!13079 (=> (not res!34688) (not e!41561))))

(assert (=> d!13079 (= res!34688 (isStrictlySorted!286 lt!26200))))

(assert (=> d!13079 (= (lemmaContainsTupThenGetReturnValue!43 lt!26200 (_1!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26749)))

(declare-fun b!63376 () Bool)

(declare-fun res!34689 () Bool)

(assert (=> b!63376 (=> (not res!34689) (not e!41561))))

(assert (=> b!63376 (= res!34689 (containsKey!130 lt!26200 (_1!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63377 () Bool)

(assert (=> b!63377 (= e!41561 (contains!693 lt!26200 (tuple2!2039 (_1!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(assert (= (and d!13079 res!34688) b!63376))

(assert (= (and b!63376 res!34689) b!63377))

(assert (=> d!13079 m!56369))

(declare-fun m!57715 () Bool)

(assert (=> d!13079 m!57715))

(declare-fun m!57717 () Bool)

(assert (=> d!13079 m!57717))

(declare-fun m!57719 () Bool)

(assert (=> b!63376 m!57719))

(declare-fun m!57721 () Bool)

(assert (=> b!63377 m!57721))

(assert (=> d!12723 d!13079))

(declare-fun b!63378 () Bool)

(declare-fun e!41565 () List!1439)

(declare-fun call!5030 () List!1439)

(assert (=> b!63378 (= e!41565 call!5030)))

(declare-fun c!8562 () Bool)

(declare-fun e!41562 () List!1439)

(declare-fun b!63379 () Bool)

(declare-fun c!8561 () Bool)

(assert (=> b!63379 (= e!41562 (ite c!8561 (t!4833 (toList!702 lt!26044)) (ite c!8562 (Cons!1435 (h!2018 (toList!702 lt!26044)) (t!4833 (toList!702 lt!26044))) Nil!1436)))))

(declare-fun bm!5025 () Bool)

(declare-fun call!5029 () List!1439)

(declare-fun call!5028 () List!1439)

(assert (=> bm!5025 (= call!5029 call!5028)))

(declare-fun b!63380 () Bool)

(declare-fun e!41563 () List!1439)

(assert (=> b!63380 (= e!41563 call!5028)))

(declare-fun b!63381 () Bool)

(assert (=> b!63381 (= e!41562 (insertStrictlySorted!46 (t!4833 (toList!702 lt!26044)) (_1!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63382 () Bool)

(declare-fun res!34691 () Bool)

(declare-fun e!41566 () Bool)

(assert (=> b!63382 (=> (not res!34691) (not e!41566))))

(declare-fun lt!26750 () List!1439)

(assert (=> b!63382 (= res!34691 (containsKey!130 lt!26750 (_1!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63383 () Bool)

(assert (=> b!63383 (= e!41566 (contains!693 lt!26750 (tuple2!2039 (_1!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!63384 () Bool)

(assert (=> b!63384 (= e!41565 call!5030)))

(declare-fun d!13081 () Bool)

(assert (=> d!13081 e!41566))

(declare-fun res!34690 () Bool)

(assert (=> d!13081 (=> (not res!34690) (not e!41566))))

(assert (=> d!13081 (= res!34690 (isStrictlySorted!286 lt!26750))))

(assert (=> d!13081 (= lt!26750 e!41563)))

(declare-fun c!8563 () Bool)

(assert (=> d!13081 (= c!8563 (and ((_ is Cons!1435) (toList!702 lt!26044)) (bvslt (_1!1030 (h!2018 (toList!702 lt!26044))) (_1!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> d!13081 (isStrictlySorted!286 (toList!702 lt!26044))))

(assert (=> d!13081 (= (insertStrictlySorted!46 (toList!702 lt!26044) (_1!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26750)))

(declare-fun bm!5026 () Bool)

(assert (=> bm!5026 (= call!5028 ($colon$colon!62 e!41562 (ite c!8563 (h!2018 (toList!702 lt!26044)) (tuple2!2039 (_1!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))))))

(declare-fun c!8564 () Bool)

(assert (=> bm!5026 (= c!8564 c!8563)))

(declare-fun b!63385 () Bool)

(declare-fun e!41564 () List!1439)

(assert (=> b!63385 (= e!41563 e!41564)))

(assert (=> b!63385 (= c!8561 (and ((_ is Cons!1435) (toList!702 lt!26044)) (= (_1!1030 (h!2018 (toList!702 lt!26044))) (_1!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!63386 () Bool)

(assert (=> b!63386 (= c!8562 (and ((_ is Cons!1435) (toList!702 lt!26044)) (bvsgt (_1!1030 (h!2018 (toList!702 lt!26044))) (_1!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> b!63386 (= e!41564 e!41565)))

(declare-fun bm!5027 () Bool)

(assert (=> bm!5027 (= call!5030 call!5029)))

(declare-fun b!63387 () Bool)

(assert (=> b!63387 (= e!41564 call!5029)))

(assert (= (and d!13081 c!8563) b!63380))

(assert (= (and d!13081 (not c!8563)) b!63385))

(assert (= (and b!63385 c!8561) b!63387))

(assert (= (and b!63385 (not c!8561)) b!63386))

(assert (= (and b!63386 c!8562) b!63384))

(assert (= (and b!63386 (not c!8562)) b!63378))

(assert (= (or b!63384 b!63378) bm!5027))

(assert (= (or b!63387 bm!5027) bm!5025))

(assert (= (or b!63380 bm!5025) bm!5026))

(assert (= (and bm!5026 c!8564) b!63381))

(assert (= (and bm!5026 (not c!8564)) b!63379))

(assert (= (and d!13081 res!34690) b!63382))

(assert (= (and b!63382 res!34691) b!63383))

(declare-fun m!57723 () Bool)

(assert (=> b!63381 m!57723))

(declare-fun m!57725 () Bool)

(assert (=> bm!5026 m!57725))

(declare-fun m!57727 () Bool)

(assert (=> b!63382 m!57727))

(declare-fun m!57729 () Bool)

(assert (=> b!63383 m!57729))

(declare-fun m!57731 () Bool)

(assert (=> d!13081 m!57731))

(declare-fun m!57733 () Bool)

(assert (=> d!13081 m!57733))

(assert (=> d!12723 d!13081))

(declare-fun d!13083 () Bool)

(declare-fun e!41568 () Bool)

(assert (=> d!13083 e!41568))

(declare-fun res!34692 () Bool)

(assert (=> d!13083 (=> res!34692 e!41568)))

(declare-fun lt!26754 () Bool)

(assert (=> d!13083 (= res!34692 (not lt!26754))))

(declare-fun lt!26753 () Bool)

(assert (=> d!13083 (= lt!26754 lt!26753)))

(declare-fun lt!26751 () Unit!1693)

(declare-fun e!41567 () Unit!1693)

(assert (=> d!13083 (= lt!26751 e!41567)))

(declare-fun c!8565 () Bool)

(assert (=> d!13083 (= c!8565 lt!26753)))

(assert (=> d!13083 (= lt!26753 (containsKey!130 (toList!702 lt!26235) (_1!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!13083 (= (contains!690 lt!26235 (_1!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26754)))

(declare-fun b!63388 () Bool)

(declare-fun lt!26752 () Unit!1693)

(assert (=> b!63388 (= e!41567 lt!26752)))

(assert (=> b!63388 (= lt!26752 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 lt!26235) (_1!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> b!63388 (isDefined!79 (getValueByKey!126 (toList!702 lt!26235) (_1!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63389 () Bool)

(declare-fun Unit!1737 () Unit!1693)

(assert (=> b!63389 (= e!41567 Unit!1737)))

(declare-fun b!63390 () Bool)

(assert (=> b!63390 (= e!41568 (isDefined!79 (getValueByKey!126 (toList!702 lt!26235) (_1!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(assert (= (and d!13083 c!8565) b!63388))

(assert (= (and d!13083 (not c!8565)) b!63389))

(assert (= (and d!13083 (not res!34692)) b!63390))

(declare-fun m!57735 () Bool)

(assert (=> d!13083 m!57735))

(declare-fun m!57737 () Bool)

(assert (=> b!63388 m!57737))

(assert (=> b!63388 m!56443))

(assert (=> b!63388 m!56443))

(declare-fun m!57739 () Bool)

(assert (=> b!63388 m!57739))

(assert (=> b!63390 m!56443))

(assert (=> b!63390 m!56443))

(assert (=> b!63390 m!57739))

(assert (=> d!12741 d!13083))

(declare-fun b!63392 () Bool)

(declare-fun e!41569 () Option!132)

(declare-fun e!41570 () Option!132)

(assert (=> b!63392 (= e!41569 e!41570)))

(declare-fun c!8567 () Bool)

(assert (=> b!63392 (= c!8567 (and ((_ is Cons!1435) lt!26234) (not (= (_1!1030 (h!2018 lt!26234)) (_1!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))))))

(declare-fun b!63391 () Bool)

(assert (=> b!63391 (= e!41569 (Some!131 (_2!1030 (h!2018 lt!26234))))))

(declare-fun d!13085 () Bool)

(declare-fun c!8566 () Bool)

(assert (=> d!13085 (= c!8566 (and ((_ is Cons!1435) lt!26234) (= (_1!1030 (h!2018 lt!26234)) (_1!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> d!13085 (= (getValueByKey!126 lt!26234 (_1!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))) e!41569)))

(declare-fun b!63393 () Bool)

(assert (=> b!63393 (= e!41570 (getValueByKey!126 (t!4833 lt!26234) (_1!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63394 () Bool)

(assert (=> b!63394 (= e!41570 None!130)))

(assert (= (and d!13085 c!8566) b!63391))

(assert (= (and d!13085 (not c!8566)) b!63392))

(assert (= (and b!63392 c!8567) b!63393))

(assert (= (and b!63392 (not c!8567)) b!63394))

(declare-fun m!57741 () Bool)

(assert (=> b!63393 m!57741))

(assert (=> d!12741 d!13085))

(declare-fun d!13087 () Bool)

(assert (=> d!13087 (= (getValueByKey!126 lt!26234 (_1!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))) (Some!131 (_2!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun lt!26755 () Unit!1693)

(assert (=> d!13087 (= lt!26755 (choose!340 lt!26234 (_1!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun e!41571 () Bool)

(assert (=> d!13087 e!41571))

(declare-fun res!34693 () Bool)

(assert (=> d!13087 (=> (not res!34693) (not e!41571))))

(assert (=> d!13087 (= res!34693 (isStrictlySorted!286 lt!26234))))

(assert (=> d!13087 (= (lemmaContainsTupThenGetReturnValue!43 lt!26234 (_1!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26755)))

(declare-fun b!63395 () Bool)

(declare-fun res!34694 () Bool)

(assert (=> b!63395 (=> (not res!34694) (not e!41571))))

(assert (=> b!63395 (= res!34694 (containsKey!130 lt!26234 (_1!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63396 () Bool)

(assert (=> b!63396 (= e!41571 (contains!693 lt!26234 (tuple2!2039 (_1!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(assert (= (and d!13087 res!34693) b!63395))

(assert (= (and b!63395 res!34694) b!63396))

(assert (=> d!13087 m!56437))

(declare-fun m!57743 () Bool)

(assert (=> d!13087 m!57743))

(declare-fun m!57745 () Bool)

(assert (=> d!13087 m!57745))

(declare-fun m!57747 () Bool)

(assert (=> b!63395 m!57747))

(declare-fun m!57749 () Bool)

(assert (=> b!63396 m!57749))

(assert (=> d!12741 d!13087))

(declare-fun b!63397 () Bool)

(declare-fun e!41575 () List!1439)

(declare-fun call!5033 () List!1439)

(assert (=> b!63397 (= e!41575 call!5033)))

(declare-fun e!41572 () List!1439)

(declare-fun c!8569 () Bool)

(declare-fun c!8568 () Bool)

(declare-fun b!63398 () Bool)

(assert (=> b!63398 (= e!41572 (ite c!8568 (t!4833 (toList!702 lt!26048)) (ite c!8569 (Cons!1435 (h!2018 (toList!702 lt!26048)) (t!4833 (toList!702 lt!26048))) Nil!1436)))))

(declare-fun bm!5028 () Bool)

(declare-fun call!5032 () List!1439)

(declare-fun call!5031 () List!1439)

(assert (=> bm!5028 (= call!5032 call!5031)))

(declare-fun b!63399 () Bool)

(declare-fun e!41573 () List!1439)

(assert (=> b!63399 (= e!41573 call!5031)))

(declare-fun b!63400 () Bool)

(assert (=> b!63400 (= e!41572 (insertStrictlySorted!46 (t!4833 (toList!702 lt!26048)) (_1!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63401 () Bool)

(declare-fun res!34696 () Bool)

(declare-fun e!41576 () Bool)

(assert (=> b!63401 (=> (not res!34696) (not e!41576))))

(declare-fun lt!26756 () List!1439)

(assert (=> b!63401 (= res!34696 (containsKey!130 lt!26756 (_1!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63402 () Bool)

(assert (=> b!63402 (= e!41576 (contains!693 lt!26756 (tuple2!2039 (_1!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!63403 () Bool)

(assert (=> b!63403 (= e!41575 call!5033)))

(declare-fun d!13089 () Bool)

(assert (=> d!13089 e!41576))

(declare-fun res!34695 () Bool)

(assert (=> d!13089 (=> (not res!34695) (not e!41576))))

(assert (=> d!13089 (= res!34695 (isStrictlySorted!286 lt!26756))))

(assert (=> d!13089 (= lt!26756 e!41573)))

(declare-fun c!8570 () Bool)

(assert (=> d!13089 (= c!8570 (and ((_ is Cons!1435) (toList!702 lt!26048)) (bvslt (_1!1030 (h!2018 (toList!702 lt!26048))) (_1!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> d!13089 (isStrictlySorted!286 (toList!702 lt!26048))))

(assert (=> d!13089 (= (insertStrictlySorted!46 (toList!702 lt!26048) (_1!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26756)))

(declare-fun bm!5029 () Bool)

(assert (=> bm!5029 (= call!5031 ($colon$colon!62 e!41572 (ite c!8570 (h!2018 (toList!702 lt!26048)) (tuple2!2039 (_1!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))))))

(declare-fun c!8571 () Bool)

(assert (=> bm!5029 (= c!8571 c!8570)))

(declare-fun b!63404 () Bool)

(declare-fun e!41574 () List!1439)

(assert (=> b!63404 (= e!41573 e!41574)))

(assert (=> b!63404 (= c!8568 (and ((_ is Cons!1435) (toList!702 lt!26048)) (= (_1!1030 (h!2018 (toList!702 lt!26048))) (_1!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!63405 () Bool)

(assert (=> b!63405 (= c!8569 (and ((_ is Cons!1435) (toList!702 lt!26048)) (bvsgt (_1!1030 (h!2018 (toList!702 lt!26048))) (_1!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> b!63405 (= e!41574 e!41575)))

(declare-fun bm!5030 () Bool)

(assert (=> bm!5030 (= call!5033 call!5032)))

(declare-fun b!63406 () Bool)

(assert (=> b!63406 (= e!41574 call!5032)))

(assert (= (and d!13089 c!8570) b!63399))

(assert (= (and d!13089 (not c!8570)) b!63404))

(assert (= (and b!63404 c!8568) b!63406))

(assert (= (and b!63404 (not c!8568)) b!63405))

(assert (= (and b!63405 c!8569) b!63403))

(assert (= (and b!63405 (not c!8569)) b!63397))

(assert (= (or b!63403 b!63397) bm!5030))

(assert (= (or b!63406 bm!5030) bm!5028))

(assert (= (or b!63399 bm!5028) bm!5029))

(assert (= (and bm!5029 c!8571) b!63400))

(assert (= (and bm!5029 (not c!8571)) b!63398))

(assert (= (and d!13089 res!34695) b!63401))

(assert (= (and b!63401 res!34696) b!63402))

(declare-fun m!57751 () Bool)

(assert (=> b!63400 m!57751))

(declare-fun m!57753 () Bool)

(assert (=> bm!5029 m!57753))

(declare-fun m!57755 () Bool)

(assert (=> b!63401 m!57755))

(declare-fun m!57757 () Bool)

(assert (=> b!63402 m!57757))

(declare-fun m!57759 () Bool)

(assert (=> d!13089 m!57759))

(declare-fun m!57761 () Bool)

(assert (=> d!13089 m!57761))

(assert (=> d!12741 d!13089))

(declare-fun b!63407 () Bool)

(declare-fun e!41578 () (_ BitVec 32))

(declare-fun call!5034 () (_ BitVec 32))

(assert (=> b!63407 (= e!41578 (bvadd #b00000000000000000000000000000001 call!5034))))

(declare-fun d!13091 () Bool)

(declare-fun lt!26757 () (_ BitVec 32))

(assert (=> d!13091 (and (bvsge lt!26757 #b00000000000000000000000000000000) (bvsle lt!26757 (bvsub (size!2031 (_keys!3720 (_2!1031 lt!26150))) #b00000000000000000000000000000000)))))

(declare-fun e!41577 () (_ BitVec 32))

(assert (=> d!13091 (= lt!26757 e!41577)))

(declare-fun c!8572 () Bool)

(assert (=> d!13091 (= c!8572 (bvsge #b00000000000000000000000000000000 (size!2031 (_keys!3720 (_2!1031 lt!26150)))))))

(assert (=> d!13091 (and (bvsle #b00000000000000000000000000000000 (size!2031 (_keys!3720 (_2!1031 lt!26150)))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2031 (_keys!3720 (_2!1031 lt!26150))) (size!2031 (_keys!3720 (_2!1031 lt!26150)))))))

(assert (=> d!13091 (= (arrayCountValidKeys!0 (_keys!3720 (_2!1031 lt!26150)) #b00000000000000000000000000000000 (size!2031 (_keys!3720 (_2!1031 lt!26150)))) lt!26757)))

(declare-fun b!63408 () Bool)

(assert (=> b!63408 (= e!41578 call!5034)))

(declare-fun bm!5031 () Bool)

(assert (=> bm!5031 (= call!5034 (arrayCountValidKeys!0 (_keys!3720 (_2!1031 lt!26150)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2031 (_keys!3720 (_2!1031 lt!26150)))))))

(declare-fun b!63409 () Bool)

(assert (=> b!63409 (= e!41577 #b00000000000000000000000000000000)))

(declare-fun b!63410 () Bool)

(assert (=> b!63410 (= e!41577 e!41578)))

(declare-fun c!8573 () Bool)

(assert (=> b!63410 (= c!8573 (validKeyInArray!0 (select (arr!1799 (_keys!3720 (_2!1031 lt!26150))) #b00000000000000000000000000000000)))))

(assert (= (and d!13091 c!8572) b!63409))

(assert (= (and d!13091 (not c!8572)) b!63410))

(assert (= (and b!63410 c!8573) b!63407))

(assert (= (and b!63410 (not c!8573)) b!63408))

(assert (= (or b!63407 b!63408) bm!5031))

(declare-fun m!57763 () Bool)

(assert (=> bm!5031 m!57763))

(assert (=> b!63410 m!57215))

(assert (=> b!63410 m!57215))

(assert (=> b!63410 m!57217))

(assert (=> b!62919 d!13091))

(assert (=> d!12731 d!12715))

(declare-fun d!13093 () Bool)

(declare-fun e!41580 () Bool)

(assert (=> d!13093 e!41580))

(declare-fun res!34697 () Bool)

(assert (=> d!13093 (=> res!34697 e!41580)))

(declare-fun lt!26761 () Bool)

(assert (=> d!13093 (= res!34697 (not lt!26761))))

(declare-fun lt!26760 () Bool)

(assert (=> d!13093 (= lt!26761 lt!26760)))

(declare-fun lt!26758 () Unit!1693)

(declare-fun e!41579 () Unit!1693)

(assert (=> d!13093 (= lt!26758 e!41579)))

(declare-fun c!8574 () Bool)

(assert (=> d!13093 (= c!8574 lt!26760)))

(assert (=> d!13093 (= lt!26760 (containsKey!130 (toList!702 lt!26047) lt!26051))))

(assert (=> d!13093 (= (contains!690 lt!26047 lt!26051) lt!26761)))

(declare-fun b!63411 () Bool)

(declare-fun lt!26759 () Unit!1693)

(assert (=> b!63411 (= e!41579 lt!26759)))

(assert (=> b!63411 (= lt!26759 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 lt!26047) lt!26051))))

(assert (=> b!63411 (isDefined!79 (getValueByKey!126 (toList!702 lt!26047) lt!26051))))

(declare-fun b!63412 () Bool)

(declare-fun Unit!1738 () Unit!1693)

(assert (=> b!63412 (= e!41579 Unit!1738)))

(declare-fun b!63413 () Bool)

(assert (=> b!63413 (= e!41580 (isDefined!79 (getValueByKey!126 (toList!702 lt!26047) lt!26051)))))

(assert (= (and d!13093 c!8574) b!63411))

(assert (= (and d!13093 (not c!8574)) b!63412))

(assert (= (and d!13093 (not res!34697)) b!63413))

(declare-fun m!57765 () Bool)

(assert (=> d!13093 m!57765))

(declare-fun m!57767 () Bool)

(assert (=> b!63411 m!57767))

(assert (=> b!63411 m!56347))

(assert (=> b!63411 m!56347))

(declare-fun m!57769 () Bool)

(assert (=> b!63411 m!57769))

(assert (=> b!63413 m!56347))

(assert (=> b!63413 m!56347))

(assert (=> b!63413 m!57769))

(assert (=> d!12731 d!13093))

(declare-fun d!13095 () Bool)

(assert (=> d!13095 (= (apply!68 (+!83 lt!26047 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) lt!26051) (apply!68 lt!26047 lt!26051))))

(assert (=> d!13095 true))

(declare-fun _$34!776 () Unit!1693)

(assert (=> d!13095 (= (choose!331 lt!26047 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992))) lt!26051) _$34!776)))

(declare-fun bs!2772 () Bool)

(assert (= bs!2772 d!13095))

(assert (=> bs!2772 m!56175))

(assert (=> bs!2772 m!56175))

(assert (=> bs!2772 m!56177))

(assert (=> bs!2772 m!56165))

(assert (=> d!12731 d!13095))

(assert (=> d!12731 d!12735))

(assert (=> d!12731 d!12737))

(assert (=> d!12799 d!12679))

(declare-fun d!13097 () Bool)

(assert (=> d!13097 (= (get!1086 (getValueByKey!126 (toList!702 lt!26047) lt!26051)) (v!2423 (getValueByKey!126 (toList!702 lt!26047) lt!26051)))))

(assert (=> d!12715 d!13097))

(declare-fun b!63415 () Bool)

(declare-fun e!41581 () Option!132)

(declare-fun e!41582 () Option!132)

(assert (=> b!63415 (= e!41581 e!41582)))

(declare-fun c!8576 () Bool)

(assert (=> b!63415 (= c!8576 (and ((_ is Cons!1435) (toList!702 lt!26047)) (not (= (_1!1030 (h!2018 (toList!702 lt!26047))) lt!26051))))))

(declare-fun b!63414 () Bool)

(assert (=> b!63414 (= e!41581 (Some!131 (_2!1030 (h!2018 (toList!702 lt!26047)))))))

(declare-fun d!13099 () Bool)

(declare-fun c!8575 () Bool)

(assert (=> d!13099 (= c!8575 (and ((_ is Cons!1435) (toList!702 lt!26047)) (= (_1!1030 (h!2018 (toList!702 lt!26047))) lt!26051)))))

(assert (=> d!13099 (= (getValueByKey!126 (toList!702 lt!26047) lt!26051) e!41581)))

(declare-fun b!63416 () Bool)

(assert (=> b!63416 (= e!41582 (getValueByKey!126 (t!4833 (toList!702 lt!26047)) lt!26051))))

(declare-fun b!63417 () Bool)

(assert (=> b!63417 (= e!41582 None!130)))

(assert (= (and d!13099 c!8575) b!63414))

(assert (= (and d!13099 (not c!8575)) b!63415))

(assert (= (and b!63415 c!8576) b!63416))

(assert (= (and b!63415 (not c!8576)) b!63417))

(declare-fun m!57771 () Bool)

(assert (=> b!63416 m!57771))

(assert (=> d!12715 d!13099))

(declare-fun b!63419 () Bool)

(declare-fun e!41583 () Option!132)

(declare-fun e!41584 () Option!132)

(assert (=> b!63419 (= e!41583 e!41584)))

(declare-fun c!8578 () Bool)

(assert (=> b!63419 (= c!8578 (and ((_ is Cons!1435) (toList!702 lt!26201)) (not (= (_1!1030 (h!2018 (toList!702 lt!26201))) (_1!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))))))

(declare-fun b!63418 () Bool)

(assert (=> b!63418 (= e!41583 (Some!131 (_2!1030 (h!2018 (toList!702 lt!26201)))))))

(declare-fun c!8577 () Bool)

(declare-fun d!13101 () Bool)

(assert (=> d!13101 (= c!8577 (and ((_ is Cons!1435) (toList!702 lt!26201)) (= (_1!1030 (h!2018 (toList!702 lt!26201))) (_1!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> d!13101 (= (getValueByKey!126 (toList!702 lt!26201) (_1!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))) e!41583)))

(declare-fun b!63420 () Bool)

(assert (=> b!63420 (= e!41584 (getValueByKey!126 (t!4833 (toList!702 lt!26201)) (_1!1030 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63421 () Bool)

(assert (=> b!63421 (= e!41584 None!130)))

(assert (= (and d!13101 c!8577) b!63418))

(assert (= (and d!13101 (not c!8577)) b!63419))

(assert (= (and b!63419 c!8578) b!63420))

(assert (= (and b!63419 (not c!8578)) b!63421))

(declare-fun m!57773 () Bool)

(assert (=> b!63420 m!57773))

(assert (=> b!62639 d!13101))

(declare-fun b!63422 () Bool)

(declare-fun e!41586 () (_ BitVec 32))

(declare-fun call!5035 () (_ BitVec 32))

(assert (=> b!63422 (= e!41586 (bvadd #b00000000000000000000000000000001 call!5035))))

(declare-fun d!13103 () Bool)

(declare-fun lt!26762 () (_ BitVec 32))

(assert (=> d!13103 (and (bvsge lt!26762 #b00000000000000000000000000000000) (bvsle lt!26762 (bvsub (size!2031 (_keys!3720 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun e!41585 () (_ BitVec 32))

(assert (=> d!13103 (= lt!26762 e!41585)))

(declare-fun c!8579 () Bool)

(assert (=> d!13103 (= c!8579 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2031 (_keys!3720 newMap!16))))))

(assert (=> d!13103 (and (bvsle (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2031 (_keys!3720 newMap!16))) (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvsle (size!2031 (_keys!3720 newMap!16)) (size!2031 (_keys!3720 newMap!16))))))

(assert (=> d!13103 (= (arrayCountValidKeys!0 (_keys!3720 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2031 (_keys!3720 newMap!16))) lt!26762)))

(declare-fun b!63423 () Bool)

(assert (=> b!63423 (= e!41586 call!5035)))

(declare-fun bm!5032 () Bool)

(assert (=> bm!5032 (= call!5035 (arrayCountValidKeys!0 (_keys!3720 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2031 (_keys!3720 newMap!16))))))

(declare-fun b!63424 () Bool)

(assert (=> b!63424 (= e!41585 #b00000000000000000000000000000000)))

(declare-fun b!63425 () Bool)

(assert (=> b!63425 (= e!41585 e!41586)))

(declare-fun c!8580 () Bool)

(assert (=> b!63425 (= c!8580 (validKeyInArray!0 (select (arr!1799 (_keys!3720 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (= (and d!13103 c!8579) b!63424))

(assert (= (and d!13103 (not c!8579)) b!63425))

(assert (= (and b!63425 c!8580) b!63422))

(assert (= (and b!63425 (not c!8580)) b!63423))

(assert (= (or b!63422 b!63423) bm!5032))

(declare-fun m!57775 () Bool)

(assert (=> bm!5032 m!57775))

(assert (=> b!63425 m!57211))

(assert (=> b!63425 m!57211))

(declare-fun m!57777 () Bool)

(assert (=> b!63425 m!57777))

(assert (=> bm!4950 d!13103))

(assert (=> b!62718 d!12831))

(declare-fun b!63427 () Bool)

(declare-fun e!41587 () Option!132)

(declare-fun e!41588 () Option!132)

(assert (=> b!63427 (= e!41587 e!41588)))

(declare-fun c!8582 () Bool)

(assert (=> b!63427 (= c!8582 (and ((_ is Cons!1435) (toList!702 lt!26235)) (not (= (_1!1030 (h!2018 (toList!702 lt!26235))) (_1!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))))))

(declare-fun b!63426 () Bool)

(assert (=> b!63426 (= e!41587 (Some!131 (_2!1030 (h!2018 (toList!702 lt!26235)))))))

(declare-fun c!8581 () Bool)

(declare-fun d!13105 () Bool)

(assert (=> d!13105 (= c!8581 (and ((_ is Cons!1435) (toList!702 lt!26235)) (= (_1!1030 (h!2018 (toList!702 lt!26235))) (_1!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> d!13105 (= (getValueByKey!126 (toList!702 lt!26235) (_1!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))) e!41587)))

(declare-fun b!63428 () Bool)

(assert (=> b!63428 (= e!41588 (getValueByKey!126 (t!4833 (toList!702 lt!26235)) (_1!1030 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63429 () Bool)

(assert (=> b!63429 (= e!41588 None!130)))

(assert (= (and d!13105 c!8581) b!63426))

(assert (= (and d!13105 (not c!8581)) b!63427))

(assert (= (and b!63427 c!8582) b!63428))

(assert (= (and b!63427 (not c!8582)) b!63429))

(declare-fun m!57779 () Bool)

(assert (=> b!63428 m!57779))

(assert (=> b!62682 d!13105))

(assert (=> b!62677 d!12777))

(declare-fun d!13107 () Bool)

(declare-fun isEmpty!301 (List!1439) Bool)

(assert (=> d!13107 (= (isEmpty!299 lt!26219) (isEmpty!301 (toList!702 lt!26219)))))

(declare-fun bs!2773 () Bool)

(assert (= bs!2773 d!13107))

(declare-fun m!57781 () Bool)

(assert (=> bs!2773 m!57781))

(assert (=> b!62674 d!13107))

(assert (=> d!12767 d!12763))

(assert (=> d!12767 d!12765))

(declare-fun d!13109 () Bool)

(assert (=> d!13109 (isDefined!79 (getValueByKey!126 (toList!702 lt!25956) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> d!13109 true))

(declare-fun _$12!311 () Unit!1693)

(assert (=> d!13109 (= (choose!336 (toList!702 lt!25956) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) _$12!311)))

(declare-fun bs!2774 () Bool)

(assert (= bs!2774 d!13109))

(assert (=> bs!2774 m!56051))

(assert (=> bs!2774 m!56219))

(assert (=> bs!2774 m!56219))

(assert (=> bs!2774 m!56221))

(assert (=> d!12767 d!13109))

(declare-fun d!13111 () Bool)

(declare-fun res!34702 () Bool)

(declare-fun e!41593 () Bool)

(assert (=> d!13111 (=> res!34702 e!41593)))

(assert (=> d!13111 (= res!34702 (or ((_ is Nil!1436) (toList!702 lt!25956)) ((_ is Nil!1436) (t!4833 (toList!702 lt!25956)))))))

(assert (=> d!13111 (= (isStrictlySorted!286 (toList!702 lt!25956)) e!41593)))

(declare-fun b!63434 () Bool)

(declare-fun e!41594 () Bool)

(assert (=> b!63434 (= e!41593 e!41594)))

(declare-fun res!34703 () Bool)

(assert (=> b!63434 (=> (not res!34703) (not e!41594))))

(assert (=> b!63434 (= res!34703 (bvslt (_1!1030 (h!2018 (toList!702 lt!25956))) (_1!1030 (h!2018 (t!4833 (toList!702 lt!25956))))))))

(declare-fun b!63435 () Bool)

(assert (=> b!63435 (= e!41594 (isStrictlySorted!286 (t!4833 (toList!702 lt!25956))))))

(assert (= (and d!13111 (not res!34702)) b!63434))

(assert (= (and b!63434 res!34703) b!63435))

(declare-fun m!57783 () Bool)

(assert (=> b!63435 m!57783))

(assert (=> d!12767 d!13111))

(declare-fun d!13113 () Bool)

(assert (=> d!13113 (= (apply!68 lt!26402 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1086 (getValueByKey!126 (toList!702 lt!26402) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2775 () Bool)

(assert (= bs!2775 d!13113))

(assert (=> bs!2775 m!57685))

(assert (=> bs!2775 m!57685))

(declare-fun m!57785 () Bool)

(assert (=> bs!2775 m!57785))

(assert (=> b!62864 d!13113))

(declare-fun d!13115 () Bool)

(declare-fun e!41595 () Bool)

(assert (=> d!13115 e!41595))

(declare-fun res!34704 () Bool)

(assert (=> d!13115 (=> (not res!34704) (not e!41595))))

(declare-fun lt!26766 () ListLongMap!1373)

(assert (=> d!13115 (= res!34704 (contains!690 lt!26766 (_1!1030 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!26765 () List!1439)

(assert (=> d!13115 (= lt!26766 (ListLongMap!1374 lt!26765))))

(declare-fun lt!26764 () Unit!1693)

(declare-fun lt!26763 () Unit!1693)

(assert (=> d!13115 (= lt!26764 lt!26763)))

(assert (=> d!13115 (= (getValueByKey!126 lt!26765 (_1!1030 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!131 (_2!1030 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!13115 (= lt!26763 (lemmaContainsTupThenGetReturnValue!43 lt!26765 (_1!1030 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1030 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!13115 (= lt!26765 (insertStrictlySorted!46 (toList!702 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16))) (_1!1030 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1030 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!13115 (= (+!83 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26766)))

(declare-fun b!63436 () Bool)

(declare-fun res!34705 () Bool)

(assert (=> b!63436 (=> (not res!34705) (not e!41595))))

(assert (=> b!63436 (= res!34705 (= (getValueByKey!126 (toList!702 lt!26766) (_1!1030 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!131 (_2!1030 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!63437 () Bool)

(assert (=> b!63437 (= e!41595 (contains!693 (toList!702 lt!26766) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!13115 res!34704) b!63436))

(assert (= (and b!63436 res!34705) b!63437))

(declare-fun m!57787 () Bool)

(assert (=> d!13115 m!57787))

(declare-fun m!57789 () Bool)

(assert (=> d!13115 m!57789))

(declare-fun m!57791 () Bool)

(assert (=> d!13115 m!57791))

(declare-fun m!57793 () Bool)

(assert (=> d!13115 m!57793))

(declare-fun m!57795 () Bool)

(assert (=> b!63436 m!57795))

(declare-fun m!57797 () Bool)

(assert (=> b!63437 m!57797))

(assert (=> d!12761 d!13115))

(declare-fun b!63438 () Bool)

(declare-fun e!41605 () Bool)

(declare-fun e!41608 () Bool)

(assert (=> b!63438 (= e!41605 e!41608)))

(declare-fun res!34711 () Bool)

(declare-fun call!5041 () Bool)

(assert (=> b!63438 (= res!34711 call!5041)))

(assert (=> b!63438 (=> (not res!34711) (not e!41608))))

(declare-fun b!63439 () Bool)

(declare-fun res!34712 () Bool)

(declare-fun e!41606 () Bool)

(assert (=> b!63439 (=> (not res!34712) (not e!41606))))

(assert (=> b!63439 (= res!34712 e!41605)))

(declare-fun c!8585 () Bool)

(assert (=> b!63439 (= c!8585 (not (= (bvand lt!26145 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!63440 () Bool)

(declare-fun e!41600 () Unit!1693)

(declare-fun lt!26770 () Unit!1693)

(assert (=> b!63440 (= e!41600 lt!26770)))

(declare-fun lt!26774 () ListLongMap!1373)

(assert (=> b!63440 (= lt!26774 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) lt!26145 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26771 () (_ BitVec 64))

(assert (=> b!63440 (= lt!26771 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26780 () (_ BitVec 64))

(assert (=> b!63440 (= lt!26780 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26784 () Unit!1693)

(assert (=> b!63440 (= lt!26784 (addStillContains!44 lt!26774 lt!26771 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!26780))))

(assert (=> b!63440 (contains!690 (+!83 lt!26774 (tuple2!2039 lt!26771 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26780)))

(declare-fun lt!26782 () Unit!1693)

(assert (=> b!63440 (= lt!26782 lt!26784)))

(declare-fun lt!26777 () ListLongMap!1373)

(assert (=> b!63440 (= lt!26777 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) lt!26145 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26769 () (_ BitVec 64))

(assert (=> b!63440 (= lt!26769 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26781 () (_ BitVec 64))

(assert (=> b!63440 (= lt!26781 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26773 () Unit!1693)

(assert (=> b!63440 (= lt!26773 (addApplyDifferent!44 lt!26777 lt!26769 (minValue!2000 newMap!16) lt!26781))))

(assert (=> b!63440 (= (apply!68 (+!83 lt!26777 (tuple2!2039 lt!26769 (minValue!2000 newMap!16))) lt!26781) (apply!68 lt!26777 lt!26781))))

(declare-fun lt!26783 () Unit!1693)

(assert (=> b!63440 (= lt!26783 lt!26773)))

(declare-fun lt!26778 () ListLongMap!1373)

(assert (=> b!63440 (= lt!26778 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) lt!26145 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26788 () (_ BitVec 64))

(assert (=> b!63440 (= lt!26788 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26785 () (_ BitVec 64))

(assert (=> b!63440 (= lt!26785 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26768 () Unit!1693)

(assert (=> b!63440 (= lt!26768 (addApplyDifferent!44 lt!26778 lt!26788 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!26785))))

(assert (=> b!63440 (= (apply!68 (+!83 lt!26778 (tuple2!2039 lt!26788 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26785) (apply!68 lt!26778 lt!26785))))

(declare-fun lt!26767 () Unit!1693)

(assert (=> b!63440 (= lt!26767 lt!26768)))

(declare-fun lt!26772 () ListLongMap!1373)

(assert (=> b!63440 (= lt!26772 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) lt!26145 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun lt!26787 () (_ BitVec 64))

(assert (=> b!63440 (= lt!26787 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26775 () (_ BitVec 64))

(assert (=> b!63440 (= lt!26775 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!63440 (= lt!26770 (addApplyDifferent!44 lt!26772 lt!26787 (minValue!2000 newMap!16) lt!26775))))

(assert (=> b!63440 (= (apply!68 (+!83 lt!26772 (tuple2!2039 lt!26787 (minValue!2000 newMap!16))) lt!26775) (apply!68 lt!26772 lt!26775))))

(declare-fun b!63441 () Bool)

(assert (=> b!63441 (= e!41605 (not call!5041))))

(declare-fun call!5036 () ListLongMap!1373)

(declare-fun call!5039 () ListLongMap!1373)

(declare-fun call!5042 () ListLongMap!1373)

(declare-fun bm!5034 () Bool)

(declare-fun c!8586 () Bool)

(declare-fun c!8588 () Bool)

(declare-fun call!5037 () ListLongMap!1373)

(assert (=> bm!5034 (= call!5037 (+!83 (ite c!8586 call!5039 (ite c!8588 call!5036 call!5042)) (ite (or c!8586 c!8588) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))

(declare-fun bm!5035 () Bool)

(assert (=> bm!5035 (= call!5042 call!5036)))

(declare-fun b!63442 () Bool)

(declare-fun e!41604 () Bool)

(declare-fun e!41597 () Bool)

(assert (=> b!63442 (= e!41604 e!41597)))

(declare-fun res!34706 () Bool)

(assert (=> b!63442 (=> (not res!34706) (not e!41597))))

(declare-fun lt!26776 () ListLongMap!1373)

(assert (=> b!63442 (= res!34706 (contains!690 lt!26776 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63442 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(declare-fun bm!5036 () Bool)

(declare-fun call!5040 () Bool)

(assert (=> bm!5036 (= call!5040 (contains!690 lt!26776 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63443 () Bool)

(declare-fun e!41598 () Bool)

(assert (=> b!63443 (= e!41598 (not call!5040))))

(declare-fun bm!5037 () Bool)

(assert (=> bm!5037 (= call!5041 (contains!690 lt!26776 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!5038 () Bool)

(declare-fun call!5038 () ListLongMap!1373)

(assert (=> bm!5038 (= call!5038 call!5037)))

(declare-fun b!63444 () Bool)

(declare-fun e!41601 () ListLongMap!1373)

(assert (=> b!63444 (= e!41601 (+!83 call!5037 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))

(declare-fun b!63445 () Bool)

(declare-fun res!34710 () Bool)

(assert (=> b!63445 (=> (not res!34710) (not e!41606))))

(assert (=> b!63445 (= res!34710 e!41604)))

(declare-fun res!34709 () Bool)

(assert (=> b!63445 (=> res!34709 e!41604)))

(declare-fun e!41603 () Bool)

(assert (=> b!63445 (= res!34709 (not e!41603))))

(declare-fun res!34707 () Bool)

(assert (=> b!63445 (=> (not res!34707) (not e!41603))))

(assert (=> b!63445 (= res!34707 (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(declare-fun d!13117 () Bool)

(assert (=> d!13117 e!41606))

(declare-fun res!34708 () Bool)

(assert (=> d!13117 (=> (not res!34708) (not e!41606))))

(assert (=> d!13117 (= res!34708 (or (bvsge #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))))

(declare-fun lt!26786 () ListLongMap!1373)

(assert (=> d!13117 (= lt!26776 lt!26786)))

(declare-fun lt!26779 () Unit!1693)

(assert (=> d!13117 (= lt!26779 e!41600)))

(declare-fun c!8584 () Bool)

(declare-fun e!41607 () Bool)

(assert (=> d!13117 (= c!8584 e!41607)))

(declare-fun res!34713 () Bool)

(assert (=> d!13117 (=> (not res!34713) (not e!41607))))

(assert (=> d!13117 (= res!34713 (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(assert (=> d!13117 (= lt!26786 e!41601)))

(assert (=> d!13117 (= c!8586 (and (not (= (bvand lt!26145 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!26145 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!13117 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!13117 (= (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) lt!26145 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) lt!26776)))

(declare-fun bm!5033 () Bool)

(assert (=> bm!5033 (= call!5036 call!5039)))

(declare-fun b!63446 () Bool)

(assert (=> b!63446 (= e!41608 (= (apply!68 lt!26776 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!63447 () Bool)

(declare-fun e!41602 () Bool)

(assert (=> b!63447 (= e!41602 (= (apply!68 lt!26776 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2000 newMap!16)))))

(declare-fun b!63448 () Bool)

(assert (=> b!63448 (= e!41598 e!41602)))

(declare-fun res!34714 () Bool)

(assert (=> b!63448 (= res!34714 call!5040)))

(assert (=> b!63448 (=> (not res!34714) (not e!41602))))

(declare-fun b!63449 () Bool)

(assert (=> b!63449 (= e!41603 (validKeyInArray!0 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63450 () Bool)

(assert (=> b!63450 (= e!41607 (validKeyInArray!0 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63451 () Bool)

(declare-fun Unit!1739 () Unit!1693)

(assert (=> b!63451 (= e!41600 Unit!1739)))

(declare-fun b!63452 () Bool)

(declare-fun e!41599 () ListLongMap!1373)

(assert (=> b!63452 (= e!41599 call!5038)))

(declare-fun bm!5039 () Bool)

(assert (=> bm!5039 (= call!5039 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) lt!26145 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(declare-fun b!63453 () Bool)

(declare-fun e!41596 () ListLongMap!1373)

(assert (=> b!63453 (= e!41596 call!5042)))

(declare-fun b!63454 () Bool)

(assert (=> b!63454 (= e!41606 e!41598)))

(declare-fun c!8587 () Bool)

(assert (=> b!63454 (= c!8587 (not (= (bvand lt!26145 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!63455 () Bool)

(declare-fun c!8583 () Bool)

(assert (=> b!63455 (= c!8583 (and (not (= (bvand lt!26145 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!26145 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!63455 (= e!41599 e!41596)))

(declare-fun b!63456 () Bool)

(assert (=> b!63456 (= e!41596 call!5038)))

(declare-fun b!63457 () Bool)

(assert (=> b!63457 (= e!41597 (= (apply!68 lt!26776 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) (get!1082 (select (arr!1800 (_values!2071 newMap!16)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!63457 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2032 (_values!2071 newMap!16))))))

(assert (=> b!63457 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(declare-fun b!63458 () Bool)

(assert (=> b!63458 (= e!41601 e!41599)))

(assert (=> b!63458 (= c!8588 (and (not (= (bvand lt!26145 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!26145 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!13117 c!8586) b!63444))

(assert (= (and d!13117 (not c!8586)) b!63458))

(assert (= (and b!63458 c!8588) b!63452))

(assert (= (and b!63458 (not c!8588)) b!63455))

(assert (= (and b!63455 c!8583) b!63456))

(assert (= (and b!63455 (not c!8583)) b!63453))

(assert (= (or b!63456 b!63453) bm!5035))

(assert (= (or b!63452 bm!5035) bm!5033))

(assert (= (or b!63452 b!63456) bm!5038))

(assert (= (or b!63444 bm!5033) bm!5039))

(assert (= (or b!63444 bm!5038) bm!5034))

(assert (= (and d!13117 res!34713) b!63450))

(assert (= (and d!13117 c!8584) b!63440))

(assert (= (and d!13117 (not c!8584)) b!63451))

(assert (= (and d!13117 res!34708) b!63445))

(assert (= (and b!63445 res!34707) b!63449))

(assert (= (and b!63445 (not res!34709)) b!63442))

(assert (= (and b!63442 res!34706) b!63457))

(assert (= (and b!63445 res!34710) b!63439))

(assert (= (and b!63439 c!8585) b!63438))

(assert (= (and b!63439 (not c!8585)) b!63441))

(assert (= (and b!63438 res!34711) b!63446))

(assert (= (or b!63438 b!63441) bm!5037))

(assert (= (and b!63439 res!34712) b!63454))

(assert (= (and b!63454 c!8587) b!63448))

(assert (= (and b!63454 (not c!8587)) b!63443))

(assert (= (and b!63448 res!34714) b!63447))

(assert (= (or b!63448 b!63443) bm!5036))

(declare-fun b_lambda!2833 () Bool)

(assert (=> (not b_lambda!2833) (not b!63457)))

(assert (=> b!63457 t!4841))

(declare-fun b_and!3887 () Bool)

(assert (= b_and!3883 (and (=> t!4841 result!2459) b_and!3887)))

(assert (=> b!63457 t!4843))

(declare-fun b_and!3889 () Bool)

(assert (= b_and!3885 (and (=> t!4843 result!2461) b_and!3889)))

(assert (=> b!63450 m!56285))

(assert (=> b!63450 m!56285))

(assert (=> b!63450 m!56287))

(declare-fun m!57799 () Bool)

(assert (=> b!63440 m!57799))

(assert (=> b!63440 m!56063))

(declare-fun m!57801 () Bool)

(assert (=> b!63440 m!57801))

(declare-fun m!57803 () Bool)

(assert (=> b!63440 m!57803))

(declare-fun m!57805 () Bool)

(assert (=> b!63440 m!57805))

(declare-fun m!57807 () Bool)

(assert (=> b!63440 m!57807))

(declare-fun m!57809 () Bool)

(assert (=> b!63440 m!57809))

(declare-fun m!57811 () Bool)

(assert (=> b!63440 m!57811))

(declare-fun m!57813 () Bool)

(assert (=> b!63440 m!57813))

(declare-fun m!57815 () Bool)

(assert (=> b!63440 m!57815))

(declare-fun m!57817 () Bool)

(assert (=> b!63440 m!57817))

(declare-fun m!57819 () Bool)

(assert (=> b!63440 m!57819))

(declare-fun m!57821 () Bool)

(assert (=> b!63440 m!57821))

(declare-fun m!57823 () Bool)

(assert (=> b!63440 m!57823))

(assert (=> b!63440 m!56063))

(declare-fun m!57825 () Bool)

(assert (=> b!63440 m!57825))

(assert (=> b!63440 m!56285))

(assert (=> b!63440 m!57823))

(declare-fun m!57827 () Bool)

(assert (=> b!63440 m!57827))

(assert (=> b!63440 m!57819))

(assert (=> b!63440 m!57805))

(assert (=> b!63440 m!56063))

(declare-fun m!57829 () Bool)

(assert (=> b!63440 m!57829))

(assert (=> b!63440 m!57813))

(declare-fun m!57831 () Bool)

(assert (=> b!63446 m!57831))

(assert (=> bm!5039 m!56063))

(assert (=> bm!5039 m!57825))

(assert (=> b!63449 m!56285))

(assert (=> b!63449 m!56285))

(assert (=> b!63449 m!56287))

(assert (=> d!13117 m!56299))

(assert (=> b!63457 m!56285))

(declare-fun m!57833 () Bool)

(assert (=> b!63457 m!57833))

(assert (=> b!63457 m!56515))

(assert (=> b!63457 m!56517))

(assert (=> b!63457 m!56285))

(assert (=> b!63457 m!56517))

(assert (=> b!63457 m!56515))

(assert (=> b!63457 m!56519))

(assert (=> b!63442 m!56285))

(assert (=> b!63442 m!56285))

(declare-fun m!57835 () Bool)

(assert (=> b!63442 m!57835))

(declare-fun m!57837 () Bool)

(assert (=> b!63447 m!57837))

(declare-fun m!57839 () Bool)

(assert (=> bm!5034 m!57839))

(declare-fun m!57841 () Bool)

(assert (=> b!63444 m!57841))

(declare-fun m!57843 () Bool)

(assert (=> bm!5037 m!57843))

(declare-fun m!57845 () Bool)

(assert (=> bm!5036 m!57845))

(assert (=> d!12761 d!13117))

(declare-fun d!13119 () Bool)

(assert (=> d!13119 (= (+!83 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) lt!26145 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(assert (=> d!13119 true))

(declare-fun _$7!50 () Unit!1693)

(assert (=> d!13119 (= (choose!335 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) lt!26145 (zeroValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2000 newMap!16) (defaultEntry!2088 newMap!16)) _$7!50)))

(declare-fun bs!2776 () Bool)

(assert (= bs!2776 d!13119))

(assert (=> bs!2776 m!56151))

(assert (=> bs!2776 m!56151))

(assert (=> bs!2776 m!56535))

(assert (=> bs!2776 m!56063))

(assert (=> bs!2776 m!56537))

(assert (=> d!12761 d!13119))

(assert (=> d!12761 d!12759))

(assert (=> d!12761 d!12901))

(declare-fun b!63460 () Bool)

(declare-fun e!41609 () Option!132)

(declare-fun e!41610 () Option!132)

(assert (=> b!63460 (= e!41609 e!41610)))

(declare-fun c!8590 () Bool)

(assert (=> b!63460 (= c!8590 (and ((_ is Cons!1435) (toList!702 lt!26178)) (not (= (_1!1030 (h!2018 (toList!702 lt!26178))) (_1!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))))

(declare-fun b!63459 () Bool)

(assert (=> b!63459 (= e!41609 (Some!131 (_2!1030 (h!2018 (toList!702 lt!26178)))))))

(declare-fun c!8589 () Bool)

(declare-fun d!13121 () Bool)

(assert (=> d!13121 (= c!8589 (and ((_ is Cons!1435) (toList!702 lt!26178)) (= (_1!1030 (h!2018 (toList!702 lt!26178))) (_1!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))))

(assert (=> d!13121 (= (getValueByKey!126 (toList!702 lt!26178) (_1!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))) e!41609)))

(declare-fun b!63461 () Bool)

(assert (=> b!63461 (= e!41610 (getValueByKey!126 (t!4833 (toList!702 lt!26178)) (_1!1030 (ite (or c!8300 c!8302) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!63462 () Bool)

(assert (=> b!63462 (= e!41610 None!130)))

(assert (= (and d!13121 c!8589) b!63459))

(assert (= (and d!13121 (not c!8589)) b!63460))

(assert (= (and b!63460 c!8590) b!63461))

(assert (= (and b!63460 (not c!8590)) b!63462))

(declare-fun m!57847 () Bool)

(assert (=> b!63461 m!57847))

(assert (=> b!62622 d!13121))

(declare-fun d!13123 () Bool)

(declare-fun res!34715 () Bool)

(declare-fun e!41611 () Bool)

(assert (=> d!13123 (=> res!34715 e!41611)))

(assert (=> d!13123 (= res!34715 (and ((_ is Cons!1435) (toList!702 call!4899)) (= (_1!1030 (h!2018 (toList!702 call!4899))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355))))))

(assert (=> d!13123 (= (containsKey!130 (toList!702 call!4899) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) e!41611)))

(declare-fun b!63463 () Bool)

(declare-fun e!41612 () Bool)

(assert (=> b!63463 (= e!41611 e!41612)))

(declare-fun res!34716 () Bool)

(assert (=> b!63463 (=> (not res!34716) (not e!41612))))

(assert (=> b!63463 (= res!34716 (and (or (not ((_ is Cons!1435) (toList!702 call!4899))) (bvsle (_1!1030 (h!2018 (toList!702 call!4899))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355))) ((_ is Cons!1435) (toList!702 call!4899)) (bvslt (_1!1030 (h!2018 (toList!702 call!4899))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355))))))

(declare-fun b!63464 () Bool)

(assert (=> b!63464 (= e!41612 (containsKey!130 (t!4833 (toList!702 call!4899)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (= (and d!13123 (not res!34715)) b!63463))

(assert (= (and b!63463 res!34716) b!63464))

(assert (=> b!63464 m!56051))

(declare-fun m!57849 () Bool)

(assert (=> b!63464 m!57849))

(assert (=> d!12771 d!13123))

(declare-fun d!13125 () Bool)

(assert (=> d!13125 (= (apply!68 lt!26439 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) (get!1086 (getValueByKey!126 (toList!702 lt!26439) (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2777 () Bool)

(assert (= bs!2777 d!13125))

(assert (=> bs!2777 m!56285))

(assert (=> bs!2777 m!57087))

(assert (=> bs!2777 m!57087))

(declare-fun m!57851 () Bool)

(assert (=> bs!2777 m!57851))

(assert (=> b!62915 d!13125))

(declare-fun d!13127 () Bool)

(declare-fun c!8591 () Bool)

(assert (=> d!13127 (= c!8591 ((_ is ValueCellFull!864) (select (arr!1800 (ite c!8338 (_values!2071 newMap!16) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (index!3042 lt!26125) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16))))) #b00000000000000000000000000000000)))))

(declare-fun e!41613 () V!2867)

(assert (=> d!13127 (= (get!1082 (select (arr!1800 (ite c!8338 (_values!2071 newMap!16) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (index!3042 lt!26125) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!41613)))

(declare-fun b!63465 () Bool)

(assert (=> b!63465 (= e!41613 (get!1084 (select (arr!1800 (ite c!8338 (_values!2071 newMap!16) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (index!3042 lt!26125) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!63466 () Bool)

(assert (=> b!63466 (= e!41613 (get!1085 (select (arr!1800 (ite c!8338 (_values!2071 newMap!16) (array!3764 (store (arr!1800 (_values!2071 newMap!16)) (index!3042 lt!26125) (ValueCellFull!864 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2032 (_values!2071 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!13127 c!8591) b!63465))

(assert (= (and d!13127 (not c!8591)) b!63466))

(assert (=> b!63465 m!56795))

(assert (=> b!63465 m!56515))

(declare-fun m!57853 () Bool)

(assert (=> b!63465 m!57853))

(assert (=> b!63466 m!56795))

(assert (=> b!63466 m!56515))

(declare-fun m!57855 () Bool)

(assert (=> b!63466 m!57855))

(assert (=> b!62915 d!13127))

(declare-fun d!13129 () Bool)

(declare-fun e!41614 () Bool)

(assert (=> d!13129 e!41614))

(declare-fun res!34717 () Bool)

(assert (=> d!13129 (=> (not res!34717) (not e!41614))))

(declare-fun lt!26792 () ListLongMap!1373)

(assert (=> d!13129 (= res!34717 (contains!690 lt!26792 (_1!1030 (ite (or c!8430 c!8432) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))))

(declare-fun lt!26791 () List!1439)

(assert (=> d!13129 (= lt!26792 (ListLongMap!1374 lt!26791))))

(declare-fun lt!26790 () Unit!1693)

(declare-fun lt!26789 () Unit!1693)

(assert (=> d!13129 (= lt!26790 lt!26789)))

(assert (=> d!13129 (= (getValueByKey!126 lt!26791 (_1!1030 (ite (or c!8430 c!8432) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))) (Some!131 (_2!1030 (ite (or c!8430 c!8432) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))))

(assert (=> d!13129 (= lt!26789 (lemmaContainsTupThenGetReturnValue!43 lt!26791 (_1!1030 (ite (or c!8430 c!8432) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))) (_2!1030 (ite (or c!8430 c!8432) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))))

(assert (=> d!13129 (= lt!26791 (insertStrictlySorted!46 (toList!702 (ite c!8430 call!4965 (ite c!8432 call!4962 call!4968))) (_1!1030 (ite (or c!8430 c!8432) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))) (_2!1030 (ite (or c!8430 c!8432) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))))

(assert (=> d!13129 (= (+!83 (ite c!8430 call!4965 (ite c!8432 call!4962 call!4968)) (ite (or c!8430 c!8432) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))) lt!26792)))

(declare-fun b!63467 () Bool)

(declare-fun res!34718 () Bool)

(assert (=> b!63467 (=> (not res!34718) (not e!41614))))

(assert (=> b!63467 (= res!34718 (= (getValueByKey!126 (toList!702 lt!26792) (_1!1030 (ite (or c!8430 c!8432) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))) (Some!131 (_2!1030 (ite (or c!8430 c!8432) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))))

(declare-fun b!63468 () Bool)

(assert (=> b!63468 (= e!41614 (contains!693 (toList!702 lt!26792) (ite (or c!8430 c!8432) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8338 c!8332) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2000 newMap!16))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))

(assert (= (and d!13129 res!34717) b!63467))

(assert (= (and b!63467 res!34718) b!63468))

(declare-fun m!57857 () Bool)

(assert (=> d!13129 m!57857))

(declare-fun m!57859 () Bool)

(assert (=> d!13129 m!57859))

(declare-fun m!57861 () Bool)

(assert (=> d!13129 m!57861))

(declare-fun m!57863 () Bool)

(assert (=> d!13129 m!57863))

(declare-fun m!57865 () Bool)

(assert (=> b!63467 m!57865))

(declare-fun m!57867 () Bool)

(assert (=> b!63468 m!57867))

(assert (=> bm!4960 d!13129))

(declare-fun b!63469 () Bool)

(declare-fun lt!26799 () Unit!1693)

(declare-fun lt!26793 () Unit!1693)

(assert (=> b!63469 (= lt!26799 lt!26793)))

(declare-fun lt!26798 () (_ BitVec 64))

(declare-fun lt!26797 () V!2867)

(declare-fun lt!26796 () (_ BitVec 64))

(declare-fun lt!26794 () ListLongMap!1373)

(assert (=> b!63469 (not (contains!690 (+!83 lt!26794 (tuple2!2039 lt!26798 lt!26797)) lt!26796))))

(assert (=> b!63469 (= lt!26793 (addStillNotContains!17 lt!26794 lt!26798 lt!26797 lt!26796))))

(assert (=> b!63469 (= lt!26796 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!63469 (= lt!26797 (get!1082 (select (arr!1800 (ite (or c!8338 c!8334) (_values!2071 newMap!16) lt!26151)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!63469 (= lt!26798 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun call!5043 () ListLongMap!1373)

(assert (=> b!63469 (= lt!26794 call!5043)))

(declare-fun e!41615 () ListLongMap!1373)

(assert (=> b!63469 (= e!41615 (+!83 call!5043 (tuple2!2039 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000) (get!1082 (select (arr!1800 (ite (or c!8338 c!8334) (_values!2071 newMap!16) lt!26151)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!63470 () Bool)

(declare-fun e!41619 () Bool)

(declare-fun e!41620 () Bool)

(assert (=> b!63470 (= e!41619 e!41620)))

(assert (=> b!63470 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(declare-fun res!34720 () Bool)

(declare-fun lt!26795 () ListLongMap!1373)

(assert (=> b!63470 (= res!34720 (contains!690 lt!26795 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63470 (=> (not res!34720) (not e!41620))))

(declare-fun b!63471 () Bool)

(declare-fun e!41618 () Bool)

(assert (=> b!63471 (= e!41619 e!41618)))

(declare-fun c!8592 () Bool)

(assert (=> b!63471 (= c!8592 (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(declare-fun b!63472 () Bool)

(declare-fun res!34719 () Bool)

(declare-fun e!41621 () Bool)

(assert (=> b!63472 (=> (not res!34719) (not e!41621))))

(assert (=> b!63472 (= res!34719 (not (contains!690 lt!26795 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!63473 () Bool)

(declare-fun e!41617 () ListLongMap!1373)

(assert (=> b!63473 (= e!41617 (ListLongMap!1374 Nil!1436))))

(declare-fun b!63474 () Bool)

(assert (=> b!63474 (= e!41621 e!41619)))

(declare-fun c!8594 () Bool)

(declare-fun e!41616 () Bool)

(assert (=> b!63474 (= c!8594 e!41616)))

(declare-fun res!34722 () Bool)

(assert (=> b!63474 (=> (not res!34722) (not e!41616))))

(assert (=> b!63474 (= res!34722 (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(declare-fun d!13131 () Bool)

(assert (=> d!13131 e!41621))

(declare-fun res!34721 () Bool)

(assert (=> d!13131 (=> (not res!34721) (not e!41621))))

(assert (=> d!13131 (= res!34721 (not (contains!690 lt!26795 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!13131 (= lt!26795 e!41617)))

(declare-fun c!8593 () Bool)

(assert (=> d!13131 (= c!8593 (bvsge #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(assert (=> d!13131 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!13131 (= (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (ite (or c!8338 c!8334) (_values!2071 newMap!16) lt!26151) (mask!5994 newMap!16) (ite c!8338 (ite c!8332 (extraKeys!1967 newMap!16) lt!26140) (extraKeys!1967 newMap!16)) (zeroValue!2000 newMap!16) (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) lt!26795)))

(declare-fun b!63475 () Bool)

(assert (=> b!63475 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 newMap!16))))))

(assert (=> b!63475 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2032 (ite (or c!8338 c!8334) (_values!2071 newMap!16) lt!26151))))))

(assert (=> b!63475 (= e!41620 (= (apply!68 lt!26795 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) (get!1082 (select (arr!1800 (ite (or c!8338 c!8334) (_values!2071 newMap!16) lt!26151)) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2088 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!63476 () Bool)

(assert (=> b!63476 (= e!41618 (= lt!26795 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (ite (or c!8338 c!8334) (_values!2071 newMap!16) lt!26151) (mask!5994 newMap!16) (ite c!8338 (ite c!8332 (extraKeys!1967 newMap!16) lt!26140) (extraKeys!1967 newMap!16)) (zeroValue!2000 newMap!16) (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2088 newMap!16))))))

(declare-fun b!63477 () Bool)

(assert (=> b!63477 (= e!41618 (isEmpty!299 lt!26795))))

(declare-fun b!63478 () Bool)

(assert (=> b!63478 (= e!41617 e!41615)))

(declare-fun c!8595 () Bool)

(assert (=> b!63478 (= c!8595 (validKeyInArray!0 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63479 () Bool)

(assert (=> b!63479 (= e!41615 call!5043)))

(declare-fun bm!5040 () Bool)

(assert (=> bm!5040 (= call!5043 (getCurrentListMapNoExtraKeys!46 (_keys!3720 newMap!16) (ite (or c!8338 c!8334) (_values!2071 newMap!16) lt!26151) (mask!5994 newMap!16) (ite c!8338 (ite c!8332 (extraKeys!1967 newMap!16) lt!26140) (extraKeys!1967 newMap!16)) (zeroValue!2000 newMap!16) (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2088 newMap!16)))))

(declare-fun b!63480 () Bool)

(assert (=> b!63480 (= e!41616 (validKeyInArray!0 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63480 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (= (and d!13131 c!8593) b!63473))

(assert (= (and d!13131 (not c!8593)) b!63478))

(assert (= (and b!63478 c!8595) b!63469))

(assert (= (and b!63478 (not c!8595)) b!63479))

(assert (= (or b!63469 b!63479) bm!5040))

(assert (= (and d!13131 res!34721) b!63472))

(assert (= (and b!63472 res!34719) b!63474))

(assert (= (and b!63474 res!34722) b!63480))

(assert (= (and b!63474 c!8594) b!63470))

(assert (= (and b!63474 (not c!8594)) b!63471))

(assert (= (and b!63470 res!34720) b!63475))

(assert (= (and b!63471 c!8592) b!63476))

(assert (= (and b!63471 (not c!8592)) b!63477))

(declare-fun b_lambda!2835 () Bool)

(assert (=> (not b_lambda!2835) (not b!63469)))

(assert (=> b!63469 t!4841))

(declare-fun b_and!3891 () Bool)

(assert (= b_and!3887 (and (=> t!4841 result!2459) b_and!3891)))

(assert (=> b!63469 t!4843))

(declare-fun b_and!3893 () Bool)

(assert (= b_and!3889 (and (=> t!4843 result!2461) b_and!3893)))

(declare-fun b_lambda!2837 () Bool)

(assert (=> (not b_lambda!2837) (not b!63475)))

(assert (=> b!63475 t!4841))

(declare-fun b_and!3895 () Bool)

(assert (= b_and!3891 (and (=> t!4841 result!2459) b_and!3895)))

(assert (=> b!63475 t!4843))

(declare-fun b_and!3897 () Bool)

(assert (= b_and!3893 (and (=> t!4843 result!2461) b_and!3897)))

(declare-fun m!57869 () Bool)

(assert (=> b!63477 m!57869))

(assert (=> b!63475 m!56703))

(assert (=> b!63475 m!56515))

(assert (=> b!63475 m!56705))

(assert (=> b!63475 m!56285))

(assert (=> b!63475 m!56703))

(assert (=> b!63475 m!56515))

(assert (=> b!63475 m!56285))

(declare-fun m!57871 () Bool)

(assert (=> b!63475 m!57871))

(assert (=> b!63470 m!56285))

(assert (=> b!63470 m!56285))

(declare-fun m!57873 () Bool)

(assert (=> b!63470 m!57873))

(declare-fun m!57875 () Bool)

(assert (=> b!63476 m!57875))

(assert (=> b!63480 m!56285))

(assert (=> b!63480 m!56285))

(assert (=> b!63480 m!56287))

(assert (=> bm!5040 m!57875))

(declare-fun m!57877 () Bool)

(assert (=> d!13131 m!57877))

(assert (=> d!13131 m!56299))

(declare-fun m!57879 () Bool)

(assert (=> b!63472 m!57879))

(declare-fun m!57881 () Bool)

(assert (=> b!63469 m!57881))

(assert (=> b!63469 m!57881))

(declare-fun m!57883 () Bool)

(assert (=> b!63469 m!57883))

(assert (=> b!63469 m!56703))

(assert (=> b!63469 m!56515))

(assert (=> b!63469 m!56705))

(declare-fun m!57885 () Bool)

(assert (=> b!63469 m!57885))

(assert (=> b!63469 m!56285))

(assert (=> b!63469 m!56703))

(declare-fun m!57887 () Bool)

(assert (=> b!63469 m!57887))

(assert (=> b!63469 m!56515))

(assert (=> b!63478 m!56285))

(assert (=> b!63478 m!56285))

(assert (=> b!63478 m!56287))

(assert (=> bm!4957 d!13131))

(assert (=> d!12791 d!12795))

(declare-fun d!13133 () Bool)

(declare-fun e!41624 () Bool)

(assert (=> d!13133 e!41624))

(declare-fun res!34728 () Bool)

(assert (=> d!13133 (=> (not res!34728) (not e!41624))))

(declare-fun lt!26802 () SeekEntryResult!229)

(assert (=> d!13133 (= res!34728 ((_ is Found!229) lt!26802))))

(assert (=> d!13133 (= lt!26802 (seekEntryOrOpen!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (_keys!3720 newMap!16) (mask!5994 newMap!16)))))

(assert (=> d!13133 true))

(declare-fun _$33!48 () Unit!1693)

(assert (=> d!13133 (= (choose!337 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (defaultEntry!2088 newMap!16)) _$33!48)))

(declare-fun b!63485 () Bool)

(declare-fun res!34727 () Bool)

(assert (=> b!63485 (=> (not res!34727) (not e!41624))))

(assert (=> b!63485 (= res!34727 (inRange!0 (index!3042 lt!26802) (mask!5994 newMap!16)))))

(declare-fun b!63486 () Bool)

(assert (=> b!63486 (= e!41624 (= (select (arr!1799 (_keys!3720 newMap!16)) (index!3042 lt!26802)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (= (and d!13133 res!34728) b!63485))

(assert (= (and b!63485 res!34727) b!63486))

(assert (=> d!13133 m!56051))

(assert (=> d!13133 m!56231))

(declare-fun m!57889 () Bool)

(assert (=> b!63485 m!57889))

(declare-fun m!57891 () Bool)

(assert (=> b!63486 m!57891))

(assert (=> d!12791 d!13133))

(assert (=> d!12791 d!12901))

(assert (=> d!12821 d!12901))

(declare-fun d!13135 () Bool)

(assert (=> d!13135 (= (size!2035 newMap!16) (bvadd (_size!367 newMap!16) (bvsdiv (bvadd (extraKeys!1967 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010)))))

(assert (=> b!62696 d!13135))

(declare-fun d!13137 () Bool)

(declare-fun res!34729 () Bool)

(declare-fun e!41625 () Bool)

(assert (=> d!13137 (=> res!34729 e!41625)))

(assert (=> d!13137 (= res!34729 (and ((_ is Cons!1435) (toList!702 (+!83 lt!26044 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))) (= (_1!1030 (h!2018 (toList!702 (+!83 lt!26044 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))) lt!26050)))))

(assert (=> d!13137 (= (containsKey!130 (toList!702 (+!83 lt!26044 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26050) e!41625)))

(declare-fun b!63487 () Bool)

(declare-fun e!41626 () Bool)

(assert (=> b!63487 (= e!41625 e!41626)))

(declare-fun res!34730 () Bool)

(assert (=> b!63487 (=> (not res!34730) (not e!41626))))

(assert (=> b!63487 (= res!34730 (and (or (not ((_ is Cons!1435) (toList!702 (+!83 lt!26044 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))) (bvsle (_1!1030 (h!2018 (toList!702 (+!83 lt!26044 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))) lt!26050)) ((_ is Cons!1435) (toList!702 (+!83 lt!26044 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))) (bvslt (_1!1030 (h!2018 (toList!702 (+!83 lt!26044 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))) lt!26050)))))

(declare-fun b!63488 () Bool)

(assert (=> b!63488 (= e!41626 (containsKey!130 (t!4833 (toList!702 (+!83 lt!26044 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))) lt!26050))))

(assert (= (and d!13137 (not res!34729)) b!63487))

(assert (= (and b!63487 res!34730) b!63488))

(declare-fun m!57893 () Bool)

(assert (=> b!63488 m!57893))

(assert (=> d!12717 d!13137))

(declare-fun b!63490 () Bool)

(declare-fun e!41627 () Option!132)

(declare-fun e!41628 () Option!132)

(assert (=> b!63490 (= e!41627 e!41628)))

(declare-fun c!8597 () Bool)

(assert (=> b!63490 (= c!8597 (and ((_ is Cons!1435) (toList!702 lt!26228)) (not (= (_1!1030 (h!2018 (toList!702 lt!26228))) (_1!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))))

(declare-fun b!63489 () Bool)

(assert (=> b!63489 (= e!41627 (Some!131 (_2!1030 (h!2018 (toList!702 lt!26228)))))))

(declare-fun c!8596 () Bool)

(declare-fun d!13139 () Bool)

(assert (=> d!13139 (= c!8596 (and ((_ is Cons!1435) (toList!702 lt!26228)) (= (_1!1030 (h!2018 (toList!702 lt!26228))) (_1!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> d!13139 (= (getValueByKey!126 (toList!702 lt!26228) (_1!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) e!41627)))

(declare-fun b!63491 () Bool)

(assert (=> b!63491 (= e!41628 (getValueByKey!126 (t!4833 (toList!702 lt!26228)) (_1!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63492 () Bool)

(assert (=> b!63492 (= e!41628 None!130)))

(assert (= (and d!13139 c!8596) b!63489))

(assert (= (and d!13139 (not c!8596)) b!63490))

(assert (= (and b!63490 c!8597) b!63491))

(assert (= (and b!63490 (not c!8597)) b!63492))

(declare-fun m!57895 () Bool)

(assert (=> b!63491 m!57895))

(assert (=> b!62679 d!13139))

(declare-fun d!13141 () Bool)

(assert (=> d!13141 (= (inRange!0 (ite c!8395 (index!3042 lt!26351) (ite c!8396 (index!3041 lt!26364) (index!3044 lt!26364))) (mask!5994 newMap!16)) (and (bvsge (ite c!8395 (index!3042 lt!26351) (ite c!8396 (index!3041 lt!26364) (index!3044 lt!26364))) #b00000000000000000000000000000000) (bvslt (ite c!8395 (index!3042 lt!26351) (ite c!8396 (index!3041 lt!26364) (index!3044 lt!26364))) (bvadd (mask!5994 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4946 d!13141))

(assert (=> b!62840 d!12831))

(declare-fun d!13143 () Bool)

(declare-fun e!41630 () Bool)

(assert (=> d!13143 e!41630))

(declare-fun res!34731 () Bool)

(assert (=> d!13143 (=> res!34731 e!41630)))

(declare-fun lt!26806 () Bool)

(assert (=> d!13143 (= res!34731 (not lt!26806))))

(declare-fun lt!26805 () Bool)

(assert (=> d!13143 (= lt!26806 lt!26805)))

(declare-fun lt!26803 () Unit!1693)

(declare-fun e!41629 () Unit!1693)

(assert (=> d!13143 (= lt!26803 e!41629)))

(declare-fun c!8598 () Bool)

(assert (=> d!13143 (= c!8598 lt!26805)))

(assert (=> d!13143 (= lt!26805 (containsKey!130 (toList!702 lt!26048) lt!26055))))

(assert (=> d!13143 (= (contains!690 lt!26048 lt!26055) lt!26806)))

(declare-fun b!63493 () Bool)

(declare-fun lt!26804 () Unit!1693)

(assert (=> b!63493 (= e!41629 lt!26804)))

(assert (=> b!63493 (= lt!26804 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 lt!26048) lt!26055))))

(assert (=> b!63493 (isDefined!79 (getValueByKey!126 (toList!702 lt!26048) lt!26055))))

(declare-fun b!63494 () Bool)

(declare-fun Unit!1740 () Unit!1693)

(assert (=> b!63494 (= e!41629 Unit!1740)))

(declare-fun b!63495 () Bool)

(assert (=> b!63495 (= e!41630 (isDefined!79 (getValueByKey!126 (toList!702 lt!26048) lt!26055)))))

(assert (= (and d!13143 c!8598) b!63493))

(assert (= (and d!13143 (not c!8598)) b!63494))

(assert (= (and d!13143 (not res!34731)) b!63495))

(declare-fun m!57897 () Bool)

(assert (=> d!13143 m!57897))

(declare-fun m!57899 () Bool)

(assert (=> b!63493 m!57899))

(assert (=> b!63493 m!56411))

(assert (=> b!63493 m!56411))

(declare-fun m!57901 () Bool)

(assert (=> b!63493 m!57901))

(assert (=> b!63495 m!56411))

(assert (=> b!63495 m!56411))

(assert (=> b!63495 m!57901))

(assert (=> d!12719 d!13143))

(declare-fun d!13145 () Bool)

(assert (=> d!13145 (= (apply!68 (+!83 lt!26048 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))) lt!26055) (apply!68 lt!26048 lt!26055))))

(assert (=> d!13145 true))

(declare-fun _$34!777 () Unit!1693)

(assert (=> d!13145 (= (choose!331 lt!26048 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))) lt!26055) _$34!777)))

(declare-fun bs!2778 () Bool)

(assert (= bs!2778 d!13145))

(assert (=> bs!2778 m!56161))

(assert (=> bs!2778 m!56161))

(assert (=> bs!2778 m!56163))

(assert (=> bs!2778 m!56173))

(assert (=> d!12719 d!13145))

(assert (=> d!12719 d!12733))

(assert (=> d!12719 d!12741))

(assert (=> d!12719 d!12743))

(declare-fun d!13147 () Bool)

(declare-fun e!41632 () Bool)

(assert (=> d!13147 e!41632))

(declare-fun res!34732 () Bool)

(assert (=> d!13147 (=> res!34732 e!41632)))

(declare-fun lt!26810 () Bool)

(assert (=> d!13147 (= res!34732 (not lt!26810))))

(declare-fun lt!26809 () Bool)

(assert (=> d!13147 (= lt!26810 lt!26809)))

(declare-fun lt!26807 () Unit!1693)

(declare-fun e!41631 () Unit!1693)

(assert (=> d!13147 (= lt!26807 e!41631)))

(declare-fun c!8599 () Bool)

(assert (=> d!13147 (= c!8599 lt!26809)))

(assert (=> d!13147 (= lt!26809 (containsKey!130 (toList!702 lt!26219) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!13147 (= (contains!690 lt!26219 #b0000000000000000000000000000000000000000000000000000000000000000) lt!26810)))

(declare-fun b!63496 () Bool)

(declare-fun lt!26808 () Unit!1693)

(assert (=> b!63496 (= e!41631 lt!26808)))

(assert (=> b!63496 (= lt!26808 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 lt!26219) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63496 (isDefined!79 (getValueByKey!126 (toList!702 lt!26219) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63497 () Bool)

(declare-fun Unit!1741 () Unit!1693)

(assert (=> b!63497 (= e!41631 Unit!1741)))

(declare-fun b!63498 () Bool)

(assert (=> b!63498 (= e!41632 (isDefined!79 (getValueByKey!126 (toList!702 lt!26219) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!13147 c!8599) b!63496))

(assert (= (and d!13147 (not c!8599)) b!63497))

(assert (= (and d!13147 (not res!34732)) b!63498))

(declare-fun m!57903 () Bool)

(assert (=> d!13147 m!57903))

(declare-fun m!57905 () Bool)

(assert (=> b!63496 m!57905))

(declare-fun m!57907 () Bool)

(assert (=> b!63496 m!57907))

(assert (=> b!63496 m!57907))

(declare-fun m!57909 () Bool)

(assert (=> b!63496 m!57909))

(assert (=> b!63498 m!57907))

(assert (=> b!63498 m!57907))

(assert (=> b!63498 m!57909))

(assert (=> d!12729 d!13147))

(assert (=> d!12729 d!12689))

(declare-fun d!13149 () Bool)

(declare-fun e!41634 () Bool)

(assert (=> d!13149 e!41634))

(declare-fun res!34733 () Bool)

(assert (=> d!13149 (=> res!34733 e!41634)))

(declare-fun lt!26814 () Bool)

(assert (=> d!13149 (= res!34733 (not lt!26814))))

(declare-fun lt!26813 () Bool)

(assert (=> d!13149 (= lt!26814 lt!26813)))

(declare-fun lt!26811 () Unit!1693)

(declare-fun e!41633 () Unit!1693)

(assert (=> d!13149 (= lt!26811 e!41633)))

(declare-fun c!8600 () Bool)

(assert (=> d!13149 (= c!8600 lt!26813)))

(assert (=> d!13149 (= lt!26813 (containsKey!130 (toList!702 lt!26255) (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!13149 (= (contains!690 lt!26255 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)) lt!26814)))

(declare-fun b!63499 () Bool)

(declare-fun lt!26812 () Unit!1693)

(assert (=> b!63499 (= e!41633 lt!26812)))

(assert (=> b!63499 (= lt!26812 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 lt!26255) (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63499 (isDefined!79 (getValueByKey!126 (toList!702 lt!26255) (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63500 () Bool)

(declare-fun Unit!1742 () Unit!1693)

(assert (=> b!63500 (= e!41633 Unit!1742)))

(declare-fun b!63501 () Bool)

(assert (=> b!63501 (= e!41634 (isDefined!79 (getValueByKey!126 (toList!702 lt!26255) (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!13149 c!8600) b!63499))

(assert (= (and d!13149 (not c!8600)) b!63500))

(assert (= (and d!13149 (not res!34733)) b!63501))

(assert (=> d!13149 m!56285))

(declare-fun m!57911 () Bool)

(assert (=> d!13149 m!57911))

(assert (=> b!63499 m!56285))

(declare-fun m!57913 () Bool)

(assert (=> b!63499 m!57913))

(assert (=> b!63499 m!56285))

(assert (=> b!63499 m!57127))

(assert (=> b!63499 m!57127))

(declare-fun m!57915 () Bool)

(assert (=> b!63499 m!57915))

(assert (=> b!63501 m!56285))

(assert (=> b!63501 m!57127))

(assert (=> b!63501 m!57127))

(assert (=> b!63501 m!57915))

(assert (=> b!62711 d!13149))

(declare-fun d!13151 () Bool)

(declare-fun res!34734 () Bool)

(declare-fun e!41637 () Bool)

(assert (=> d!13151 (=> res!34734 e!41637)))

(assert (=> d!13151 (= res!34734 (bvsge #b00000000000000000000000000000000 (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992))))))))

(assert (=> d!13151 (= (arrayNoDuplicates!0 (_keys!3720 (v!2419 (underlying!233 thiss!992))) #b00000000000000000000000000000000 Nil!1437) e!41637)))

(declare-fun b!63502 () Bool)

(declare-fun e!41635 () Bool)

(declare-fun call!5044 () Bool)

(assert (=> b!63502 (= e!41635 call!5044)))

(declare-fun b!63503 () Bool)

(declare-fun e!41638 () Bool)

(assert (=> b!63503 (= e!41637 e!41638)))

(declare-fun res!34735 () Bool)

(assert (=> b!63503 (=> (not res!34735) (not e!41638))))

(declare-fun e!41636 () Bool)

(assert (=> b!63503 (= res!34735 (not e!41636))))

(declare-fun res!34736 () Bool)

(assert (=> b!63503 (=> (not res!34736) (not e!41636))))

(assert (=> b!63503 (= res!34736 (validKeyInArray!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!63504 () Bool)

(assert (=> b!63504 (= e!41638 e!41635)))

(declare-fun c!8601 () Bool)

(assert (=> b!63504 (= c!8601 (validKeyInArray!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!63505 () Bool)

(assert (=> b!63505 (= e!41636 (contains!692 Nil!1437 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun bm!5041 () Bool)

(assert (=> bm!5041 (= call!5044 (arrayNoDuplicates!0 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!8601 (Cons!1436 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) #b00000000000000000000000000000000) Nil!1437) Nil!1437)))))

(declare-fun b!63506 () Bool)

(assert (=> b!63506 (= e!41635 call!5044)))

(assert (= (and d!13151 (not res!34734)) b!63503))

(assert (= (and b!63503 res!34736) b!63505))

(assert (= (and b!63503 res!34735) b!63504))

(assert (= (and b!63504 c!8601) b!63502))

(assert (= (and b!63504 (not c!8601)) b!63506))

(assert (= (or b!63502 b!63506) bm!5041))

(assert (=> b!63503 m!57123))

(assert (=> b!63503 m!57123))

(assert (=> b!63503 m!57125))

(assert (=> b!63504 m!57123))

(assert (=> b!63504 m!57123))

(assert (=> b!63504 m!57125))

(assert (=> b!63505 m!57123))

(assert (=> b!63505 m!57123))

(declare-fun m!57917 () Bool)

(assert (=> b!63505 m!57917))

(assert (=> bm!5041 m!57123))

(declare-fun m!57919 () Bool)

(assert (=> bm!5041 m!57919))

(assert (=> b!62924 d!13151))

(declare-fun d!13153 () Bool)

(declare-fun res!34737 () Bool)

(declare-fun e!41639 () Bool)

(assert (=> d!13153 (=> (not res!34737) (not e!41639))))

(assert (=> d!13153 (= res!34737 (simpleValid!44 (_2!1031 lt!26366)))))

(assert (=> d!13153 (= (valid!262 (_2!1031 lt!26366)) e!41639)))

(declare-fun b!63507 () Bool)

(declare-fun res!34738 () Bool)

(assert (=> b!63507 (=> (not res!34738) (not e!41639))))

(assert (=> b!63507 (= res!34738 (= (arrayCountValidKeys!0 (_keys!3720 (_2!1031 lt!26366)) #b00000000000000000000000000000000 (size!2031 (_keys!3720 (_2!1031 lt!26366)))) (_size!367 (_2!1031 lt!26366))))))

(declare-fun b!63508 () Bool)

(declare-fun res!34739 () Bool)

(assert (=> b!63508 (=> (not res!34739) (not e!41639))))

(assert (=> b!63508 (= res!34739 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3720 (_2!1031 lt!26366)) (mask!5994 (_2!1031 lt!26366))))))

(declare-fun b!63509 () Bool)

(assert (=> b!63509 (= e!41639 (arrayNoDuplicates!0 (_keys!3720 (_2!1031 lt!26366)) #b00000000000000000000000000000000 Nil!1437))))

(assert (= (and d!13153 res!34737) b!63507))

(assert (= (and b!63507 res!34738) b!63508))

(assert (= (and b!63508 res!34739) b!63509))

(declare-fun m!57921 () Bool)

(assert (=> d!13153 m!57921))

(declare-fun m!57923 () Bool)

(assert (=> b!63507 m!57923))

(declare-fun m!57925 () Bool)

(assert (=> b!63508 m!57925))

(declare-fun m!57927 () Bool)

(assert (=> b!63509 m!57927))

(assert (=> b!62795 d!13153))

(declare-fun d!13155 () Bool)

(assert (=> d!13155 (= (apply!68 (+!83 lt!26257 (tuple2!2039 lt!26267 (zeroValue!2000 newMap!16))) lt!26264) (get!1086 (getValueByKey!126 (toList!702 (+!83 lt!26257 (tuple2!2039 lt!26267 (zeroValue!2000 newMap!16)))) lt!26264)))))

(declare-fun bs!2779 () Bool)

(assert (= bs!2779 d!13155))

(declare-fun m!57929 () Bool)

(assert (=> bs!2779 m!57929))

(assert (=> bs!2779 m!57929))

(declare-fun m!57931 () Bool)

(assert (=> bs!2779 m!57931))

(assert (=> b!62709 d!13155))

(declare-fun d!13157 () Bool)

(declare-fun e!41640 () Bool)

(assert (=> d!13157 e!41640))

(declare-fun res!34740 () Bool)

(assert (=> d!13157 (=> (not res!34740) (not e!41640))))

(declare-fun lt!26818 () ListLongMap!1373)

(assert (=> d!13157 (= res!34740 (contains!690 lt!26818 (_1!1030 (tuple2!2039 lt!26266 (minValue!2000 newMap!16)))))))

(declare-fun lt!26817 () List!1439)

(assert (=> d!13157 (= lt!26818 (ListLongMap!1374 lt!26817))))

(declare-fun lt!26816 () Unit!1693)

(declare-fun lt!26815 () Unit!1693)

(assert (=> d!13157 (= lt!26816 lt!26815)))

(assert (=> d!13157 (= (getValueByKey!126 lt!26817 (_1!1030 (tuple2!2039 lt!26266 (minValue!2000 newMap!16)))) (Some!131 (_2!1030 (tuple2!2039 lt!26266 (minValue!2000 newMap!16)))))))

(assert (=> d!13157 (= lt!26815 (lemmaContainsTupThenGetReturnValue!43 lt!26817 (_1!1030 (tuple2!2039 lt!26266 (minValue!2000 newMap!16))) (_2!1030 (tuple2!2039 lt!26266 (minValue!2000 newMap!16)))))))

(assert (=> d!13157 (= lt!26817 (insertStrictlySorted!46 (toList!702 lt!26251) (_1!1030 (tuple2!2039 lt!26266 (minValue!2000 newMap!16))) (_2!1030 (tuple2!2039 lt!26266 (minValue!2000 newMap!16)))))))

(assert (=> d!13157 (= (+!83 lt!26251 (tuple2!2039 lt!26266 (minValue!2000 newMap!16))) lt!26818)))

(declare-fun b!63510 () Bool)

(declare-fun res!34741 () Bool)

(assert (=> b!63510 (=> (not res!34741) (not e!41640))))

(assert (=> b!63510 (= res!34741 (= (getValueByKey!126 (toList!702 lt!26818) (_1!1030 (tuple2!2039 lt!26266 (minValue!2000 newMap!16)))) (Some!131 (_2!1030 (tuple2!2039 lt!26266 (minValue!2000 newMap!16))))))))

(declare-fun b!63511 () Bool)

(assert (=> b!63511 (= e!41640 (contains!693 (toList!702 lt!26818) (tuple2!2039 lt!26266 (minValue!2000 newMap!16))))))

(assert (= (and d!13157 res!34740) b!63510))

(assert (= (and b!63510 res!34741) b!63511))

(declare-fun m!57933 () Bool)

(assert (=> d!13157 m!57933))

(declare-fun m!57935 () Bool)

(assert (=> d!13157 m!57935))

(declare-fun m!57937 () Bool)

(assert (=> d!13157 m!57937))

(declare-fun m!57939 () Bool)

(assert (=> d!13157 m!57939))

(declare-fun m!57941 () Bool)

(assert (=> b!63510 m!57941))

(declare-fun m!57943 () Bool)

(assert (=> b!63511 m!57943))

(assert (=> b!62709 d!13157))

(declare-fun d!13159 () Bool)

(assert (=> d!13159 (= (apply!68 (+!83 lt!26256 (tuple2!2039 lt!26248 (minValue!2000 newMap!16))) lt!26260) (get!1086 (getValueByKey!126 (toList!702 (+!83 lt!26256 (tuple2!2039 lt!26248 (minValue!2000 newMap!16)))) lt!26260)))))

(declare-fun bs!2780 () Bool)

(assert (= bs!2780 d!13159))

(declare-fun m!57945 () Bool)

(assert (=> bs!2780 m!57945))

(assert (=> bs!2780 m!57945))

(declare-fun m!57947 () Bool)

(assert (=> bs!2780 m!57947))

(assert (=> b!62709 d!13159))

(declare-fun d!13161 () Bool)

(assert (=> d!13161 (= (apply!68 (+!83 lt!26251 (tuple2!2039 lt!26266 (minValue!2000 newMap!16))) lt!26254) (apply!68 lt!26251 lt!26254))))

(declare-fun lt!26819 () Unit!1693)

(assert (=> d!13161 (= lt!26819 (choose!331 lt!26251 lt!26266 (minValue!2000 newMap!16) lt!26254))))

(declare-fun e!41641 () Bool)

(assert (=> d!13161 e!41641))

(declare-fun res!34742 () Bool)

(assert (=> d!13161 (=> (not res!34742) (not e!41641))))

(assert (=> d!13161 (= res!34742 (contains!690 lt!26251 lt!26254))))

(assert (=> d!13161 (= (addApplyDifferent!44 lt!26251 lt!26266 (minValue!2000 newMap!16) lt!26254) lt!26819)))

(declare-fun b!63512 () Bool)

(assert (=> b!63512 (= e!41641 (not (= lt!26254 lt!26266)))))

(assert (= (and d!13161 res!34742) b!63512))

(declare-fun m!57949 () Bool)

(assert (=> d!13161 m!57949))

(assert (=> d!13161 m!56503))

(assert (=> d!13161 m!56507))

(assert (=> d!13161 m!56483))

(assert (=> d!13161 m!56503))

(declare-fun m!57951 () Bool)

(assert (=> d!13161 m!57951))

(assert (=> b!62709 d!13161))

(declare-fun d!13163 () Bool)

(assert (=> d!13163 (contains!690 (+!83 lt!26253 (tuple2!2039 lt!26250 (zeroValue!2000 newMap!16))) lt!26259)))

(declare-fun lt!26820 () Unit!1693)

(assert (=> d!13163 (= lt!26820 (choose!332 lt!26253 lt!26250 (zeroValue!2000 newMap!16) lt!26259))))

(assert (=> d!13163 (contains!690 lt!26253 lt!26259)))

(assert (=> d!13163 (= (addStillContains!44 lt!26253 lt!26250 (zeroValue!2000 newMap!16) lt!26259) lt!26820)))

(declare-fun bs!2781 () Bool)

(assert (= bs!2781 d!13163))

(assert (=> bs!2781 m!56493))

(assert (=> bs!2781 m!56493))

(assert (=> bs!2781 m!56495))

(declare-fun m!57953 () Bool)

(assert (=> bs!2781 m!57953))

(declare-fun m!57955 () Bool)

(assert (=> bs!2781 m!57955))

(assert (=> b!62709 d!13163))

(declare-fun d!13165 () Bool)

(assert (=> d!13165 (= (apply!68 (+!83 lt!26251 (tuple2!2039 lt!26266 (minValue!2000 newMap!16))) lt!26254) (get!1086 (getValueByKey!126 (toList!702 (+!83 lt!26251 (tuple2!2039 lt!26266 (minValue!2000 newMap!16)))) lt!26254)))))

(declare-fun bs!2782 () Bool)

(assert (= bs!2782 d!13165))

(declare-fun m!57957 () Bool)

(assert (=> bs!2782 m!57957))

(assert (=> bs!2782 m!57957))

(declare-fun m!57959 () Bool)

(assert (=> bs!2782 m!57959))

(assert (=> b!62709 d!13165))

(declare-fun d!13167 () Bool)

(declare-fun e!41642 () Bool)

(assert (=> d!13167 e!41642))

(declare-fun res!34743 () Bool)

(assert (=> d!13167 (=> (not res!34743) (not e!41642))))

(declare-fun lt!26824 () ListLongMap!1373)

(assert (=> d!13167 (= res!34743 (contains!690 lt!26824 (_1!1030 (tuple2!2039 lt!26248 (minValue!2000 newMap!16)))))))

(declare-fun lt!26823 () List!1439)

(assert (=> d!13167 (= lt!26824 (ListLongMap!1374 lt!26823))))

(declare-fun lt!26822 () Unit!1693)

(declare-fun lt!26821 () Unit!1693)

(assert (=> d!13167 (= lt!26822 lt!26821)))

(assert (=> d!13167 (= (getValueByKey!126 lt!26823 (_1!1030 (tuple2!2039 lt!26248 (minValue!2000 newMap!16)))) (Some!131 (_2!1030 (tuple2!2039 lt!26248 (minValue!2000 newMap!16)))))))

(assert (=> d!13167 (= lt!26821 (lemmaContainsTupThenGetReturnValue!43 lt!26823 (_1!1030 (tuple2!2039 lt!26248 (minValue!2000 newMap!16))) (_2!1030 (tuple2!2039 lt!26248 (minValue!2000 newMap!16)))))))

(assert (=> d!13167 (= lt!26823 (insertStrictlySorted!46 (toList!702 lt!26256) (_1!1030 (tuple2!2039 lt!26248 (minValue!2000 newMap!16))) (_2!1030 (tuple2!2039 lt!26248 (minValue!2000 newMap!16)))))))

(assert (=> d!13167 (= (+!83 lt!26256 (tuple2!2039 lt!26248 (minValue!2000 newMap!16))) lt!26824)))

(declare-fun b!63513 () Bool)

(declare-fun res!34744 () Bool)

(assert (=> b!63513 (=> (not res!34744) (not e!41642))))

(assert (=> b!63513 (= res!34744 (= (getValueByKey!126 (toList!702 lt!26824) (_1!1030 (tuple2!2039 lt!26248 (minValue!2000 newMap!16)))) (Some!131 (_2!1030 (tuple2!2039 lt!26248 (minValue!2000 newMap!16))))))))

(declare-fun b!63514 () Bool)

(assert (=> b!63514 (= e!41642 (contains!693 (toList!702 lt!26824) (tuple2!2039 lt!26248 (minValue!2000 newMap!16))))))

(assert (= (and d!13167 res!34743) b!63513))

(assert (= (and b!63513 res!34744) b!63514))

(declare-fun m!57961 () Bool)

(assert (=> d!13167 m!57961))

(declare-fun m!57963 () Bool)

(assert (=> d!13167 m!57963))

(declare-fun m!57965 () Bool)

(assert (=> d!13167 m!57965))

(declare-fun m!57967 () Bool)

(assert (=> d!13167 m!57967))

(declare-fun m!57969 () Bool)

(assert (=> b!63513 m!57969))

(declare-fun m!57971 () Bool)

(assert (=> b!63514 m!57971))

(assert (=> b!62709 d!13167))

(declare-fun d!13169 () Bool)

(declare-fun e!41644 () Bool)

(assert (=> d!13169 e!41644))

(declare-fun res!34745 () Bool)

(assert (=> d!13169 (=> res!34745 e!41644)))

(declare-fun lt!26828 () Bool)

(assert (=> d!13169 (= res!34745 (not lt!26828))))

(declare-fun lt!26827 () Bool)

(assert (=> d!13169 (= lt!26828 lt!26827)))

(declare-fun lt!26825 () Unit!1693)

(declare-fun e!41643 () Unit!1693)

(assert (=> d!13169 (= lt!26825 e!41643)))

(declare-fun c!8602 () Bool)

(assert (=> d!13169 (= c!8602 lt!26827)))

(assert (=> d!13169 (= lt!26827 (containsKey!130 (toList!702 (+!83 lt!26253 (tuple2!2039 lt!26250 (zeroValue!2000 newMap!16)))) lt!26259))))

(assert (=> d!13169 (= (contains!690 (+!83 lt!26253 (tuple2!2039 lt!26250 (zeroValue!2000 newMap!16))) lt!26259) lt!26828)))

(declare-fun b!63515 () Bool)

(declare-fun lt!26826 () Unit!1693)

(assert (=> b!63515 (= e!41643 lt!26826)))

(assert (=> b!63515 (= lt!26826 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 (+!83 lt!26253 (tuple2!2039 lt!26250 (zeroValue!2000 newMap!16)))) lt!26259))))

(assert (=> b!63515 (isDefined!79 (getValueByKey!126 (toList!702 (+!83 lt!26253 (tuple2!2039 lt!26250 (zeroValue!2000 newMap!16)))) lt!26259))))

(declare-fun b!63516 () Bool)

(declare-fun Unit!1743 () Unit!1693)

(assert (=> b!63516 (= e!41643 Unit!1743)))

(declare-fun b!63517 () Bool)

(assert (=> b!63517 (= e!41644 (isDefined!79 (getValueByKey!126 (toList!702 (+!83 lt!26253 (tuple2!2039 lt!26250 (zeroValue!2000 newMap!16)))) lt!26259)))))

(assert (= (and d!13169 c!8602) b!63515))

(assert (= (and d!13169 (not c!8602)) b!63516))

(assert (= (and d!13169 (not res!34745)) b!63517))

(declare-fun m!57973 () Bool)

(assert (=> d!13169 m!57973))

(declare-fun m!57975 () Bool)

(assert (=> b!63515 m!57975))

(declare-fun m!57977 () Bool)

(assert (=> b!63515 m!57977))

(assert (=> b!63515 m!57977))

(declare-fun m!57979 () Bool)

(assert (=> b!63515 m!57979))

(assert (=> b!63517 m!57977))

(assert (=> b!63517 m!57977))

(assert (=> b!63517 m!57979))

(assert (=> b!62709 d!13169))

(declare-fun d!13171 () Bool)

(declare-fun e!41645 () Bool)

(assert (=> d!13171 e!41645))

(declare-fun res!34746 () Bool)

(assert (=> d!13171 (=> (not res!34746) (not e!41645))))

(declare-fun lt!26832 () ListLongMap!1373)

(assert (=> d!13171 (= res!34746 (contains!690 lt!26832 (_1!1030 (tuple2!2039 lt!26250 (zeroValue!2000 newMap!16)))))))

(declare-fun lt!26831 () List!1439)

(assert (=> d!13171 (= lt!26832 (ListLongMap!1374 lt!26831))))

(declare-fun lt!26830 () Unit!1693)

(declare-fun lt!26829 () Unit!1693)

(assert (=> d!13171 (= lt!26830 lt!26829)))

(assert (=> d!13171 (= (getValueByKey!126 lt!26831 (_1!1030 (tuple2!2039 lt!26250 (zeroValue!2000 newMap!16)))) (Some!131 (_2!1030 (tuple2!2039 lt!26250 (zeroValue!2000 newMap!16)))))))

(assert (=> d!13171 (= lt!26829 (lemmaContainsTupThenGetReturnValue!43 lt!26831 (_1!1030 (tuple2!2039 lt!26250 (zeroValue!2000 newMap!16))) (_2!1030 (tuple2!2039 lt!26250 (zeroValue!2000 newMap!16)))))))

(assert (=> d!13171 (= lt!26831 (insertStrictlySorted!46 (toList!702 lt!26253) (_1!1030 (tuple2!2039 lt!26250 (zeroValue!2000 newMap!16))) (_2!1030 (tuple2!2039 lt!26250 (zeroValue!2000 newMap!16)))))))

(assert (=> d!13171 (= (+!83 lt!26253 (tuple2!2039 lt!26250 (zeroValue!2000 newMap!16))) lt!26832)))

(declare-fun b!63518 () Bool)

(declare-fun res!34747 () Bool)

(assert (=> b!63518 (=> (not res!34747) (not e!41645))))

(assert (=> b!63518 (= res!34747 (= (getValueByKey!126 (toList!702 lt!26832) (_1!1030 (tuple2!2039 lt!26250 (zeroValue!2000 newMap!16)))) (Some!131 (_2!1030 (tuple2!2039 lt!26250 (zeroValue!2000 newMap!16))))))))

(declare-fun b!63519 () Bool)

(assert (=> b!63519 (= e!41645 (contains!693 (toList!702 lt!26832) (tuple2!2039 lt!26250 (zeroValue!2000 newMap!16))))))

(assert (= (and d!13171 res!34746) b!63518))

(assert (= (and b!63518 res!34747) b!63519))

(declare-fun m!57981 () Bool)

(assert (=> d!13171 m!57981))

(declare-fun m!57983 () Bool)

(assert (=> d!13171 m!57983))

(declare-fun m!57985 () Bool)

(assert (=> d!13171 m!57985))

(declare-fun m!57987 () Bool)

(assert (=> d!13171 m!57987))

(declare-fun m!57989 () Bool)

(assert (=> b!63518 m!57989))

(declare-fun m!57991 () Bool)

(assert (=> b!63519 m!57991))

(assert (=> b!62709 d!13171))

(declare-fun d!13173 () Bool)

(declare-fun e!41646 () Bool)

(assert (=> d!13173 e!41646))

(declare-fun res!34748 () Bool)

(assert (=> d!13173 (=> (not res!34748) (not e!41646))))

(declare-fun lt!26836 () ListLongMap!1373)

(assert (=> d!13173 (= res!34748 (contains!690 lt!26836 (_1!1030 (tuple2!2039 lt!26267 (zeroValue!2000 newMap!16)))))))

(declare-fun lt!26835 () List!1439)

(assert (=> d!13173 (= lt!26836 (ListLongMap!1374 lt!26835))))

(declare-fun lt!26834 () Unit!1693)

(declare-fun lt!26833 () Unit!1693)

(assert (=> d!13173 (= lt!26834 lt!26833)))

(assert (=> d!13173 (= (getValueByKey!126 lt!26835 (_1!1030 (tuple2!2039 lt!26267 (zeroValue!2000 newMap!16)))) (Some!131 (_2!1030 (tuple2!2039 lt!26267 (zeroValue!2000 newMap!16)))))))

(assert (=> d!13173 (= lt!26833 (lemmaContainsTupThenGetReturnValue!43 lt!26835 (_1!1030 (tuple2!2039 lt!26267 (zeroValue!2000 newMap!16))) (_2!1030 (tuple2!2039 lt!26267 (zeroValue!2000 newMap!16)))))))

(assert (=> d!13173 (= lt!26835 (insertStrictlySorted!46 (toList!702 lt!26257) (_1!1030 (tuple2!2039 lt!26267 (zeroValue!2000 newMap!16))) (_2!1030 (tuple2!2039 lt!26267 (zeroValue!2000 newMap!16)))))))

(assert (=> d!13173 (= (+!83 lt!26257 (tuple2!2039 lt!26267 (zeroValue!2000 newMap!16))) lt!26836)))

(declare-fun b!63520 () Bool)

(declare-fun res!34749 () Bool)

(assert (=> b!63520 (=> (not res!34749) (not e!41646))))

(assert (=> b!63520 (= res!34749 (= (getValueByKey!126 (toList!702 lt!26836) (_1!1030 (tuple2!2039 lt!26267 (zeroValue!2000 newMap!16)))) (Some!131 (_2!1030 (tuple2!2039 lt!26267 (zeroValue!2000 newMap!16))))))))

(declare-fun b!63521 () Bool)

(assert (=> b!63521 (= e!41646 (contains!693 (toList!702 lt!26836) (tuple2!2039 lt!26267 (zeroValue!2000 newMap!16))))))

(assert (= (and d!13173 res!34748) b!63520))

(assert (= (and b!63520 res!34749) b!63521))

(declare-fun m!57993 () Bool)

(assert (=> d!13173 m!57993))

(declare-fun m!57995 () Bool)

(assert (=> d!13173 m!57995))

(declare-fun m!57997 () Bool)

(assert (=> d!13173 m!57997))

(declare-fun m!57999 () Bool)

(assert (=> d!13173 m!57999))

(declare-fun m!58001 () Bool)

(assert (=> b!63520 m!58001))

(declare-fun m!58003 () Bool)

(assert (=> b!63521 m!58003))

(assert (=> b!62709 d!13173))

(assert (=> b!62709 d!13003))

(declare-fun d!13175 () Bool)

(assert (=> d!13175 (= (apply!68 (+!83 lt!26257 (tuple2!2039 lt!26267 (zeroValue!2000 newMap!16))) lt!26264) (apply!68 lt!26257 lt!26264))))

(declare-fun lt!26837 () Unit!1693)

(assert (=> d!13175 (= lt!26837 (choose!331 lt!26257 lt!26267 (zeroValue!2000 newMap!16) lt!26264))))

(declare-fun e!41647 () Bool)

(assert (=> d!13175 e!41647))

(declare-fun res!34750 () Bool)

(assert (=> d!13175 (=> (not res!34750) (not e!41647))))

(assert (=> d!13175 (= res!34750 (contains!690 lt!26257 lt!26264))))

(assert (=> d!13175 (= (addApplyDifferent!44 lt!26257 lt!26267 (zeroValue!2000 newMap!16) lt!26264) lt!26837)))

(declare-fun b!63522 () Bool)

(assert (=> b!63522 (= e!41647 (not (= lt!26264 lt!26267)))))

(assert (= (and d!13175 res!34750) b!63522))

(declare-fun m!58005 () Bool)

(assert (=> d!13175 m!58005))

(assert (=> d!13175 m!56485))

(assert (=> d!13175 m!56487))

(assert (=> d!13175 m!56497))

(assert (=> d!13175 m!56485))

(declare-fun m!58007 () Bool)

(assert (=> d!13175 m!58007))

(assert (=> b!62709 d!13175))

(declare-fun d!13177 () Bool)

(assert (=> d!13177 (= (apply!68 lt!26256 lt!26260) (get!1086 (getValueByKey!126 (toList!702 lt!26256) lt!26260)))))

(declare-fun bs!2783 () Bool)

(assert (= bs!2783 d!13177))

(declare-fun m!58009 () Bool)

(assert (=> bs!2783 m!58009))

(assert (=> bs!2783 m!58009))

(declare-fun m!58011 () Bool)

(assert (=> bs!2783 m!58011))

(assert (=> b!62709 d!13177))

(declare-fun d!13179 () Bool)

(assert (=> d!13179 (= (apply!68 lt!26251 lt!26254) (get!1086 (getValueByKey!126 (toList!702 lt!26251) lt!26254)))))

(declare-fun bs!2784 () Bool)

(assert (= bs!2784 d!13179))

(declare-fun m!58013 () Bool)

(assert (=> bs!2784 m!58013))

(assert (=> bs!2784 m!58013))

(declare-fun m!58015 () Bool)

(assert (=> bs!2784 m!58015))

(assert (=> b!62709 d!13179))

(declare-fun d!13181 () Bool)

(assert (=> d!13181 (= (apply!68 (+!83 lt!26256 (tuple2!2039 lt!26248 (minValue!2000 newMap!16))) lt!26260) (apply!68 lt!26256 lt!26260))))

(declare-fun lt!26838 () Unit!1693)

(assert (=> d!13181 (= lt!26838 (choose!331 lt!26256 lt!26248 (minValue!2000 newMap!16) lt!26260))))

(declare-fun e!41648 () Bool)

(assert (=> d!13181 e!41648))

(declare-fun res!34751 () Bool)

(assert (=> d!13181 (=> (not res!34751) (not e!41648))))

(assert (=> d!13181 (= res!34751 (contains!690 lt!26256 lt!26260))))

(assert (=> d!13181 (= (addApplyDifferent!44 lt!26256 lt!26248 (minValue!2000 newMap!16) lt!26260) lt!26838)))

(declare-fun b!63523 () Bool)

(assert (=> b!63523 (= e!41648 (not (= lt!26260 lt!26248)))))

(assert (= (and d!13181 res!34751) b!63523))

(declare-fun m!58017 () Bool)

(assert (=> d!13181 m!58017))

(assert (=> d!13181 m!56499))

(assert (=> d!13181 m!56501))

(assert (=> d!13181 m!56489))

(assert (=> d!13181 m!56499))

(declare-fun m!58019 () Bool)

(assert (=> d!13181 m!58019))

(assert (=> b!62709 d!13181))

(declare-fun d!13183 () Bool)

(assert (=> d!13183 (= (apply!68 lt!26257 lt!26264) (get!1086 (getValueByKey!126 (toList!702 lt!26257) lt!26264)))))

(declare-fun bs!2785 () Bool)

(assert (= bs!2785 d!13183))

(declare-fun m!58021 () Bool)

(assert (=> bs!2785 m!58021))

(assert (=> bs!2785 m!58021))

(declare-fun m!58023 () Bool)

(assert (=> bs!2785 m!58023))

(assert (=> b!62709 d!13183))

(declare-fun d!13185 () Bool)

(declare-fun e!41659 () Bool)

(assert (=> d!13185 e!41659))

(declare-fun c!8609 () Bool)

(declare-fun lt!26844 () SeekEntryResult!229)

(assert (=> d!13185 (= c!8609 (and ((_ is Intermediate!229) lt!26844) (undefined!1041 lt!26844)))))

(declare-fun e!41660 () SeekEntryResult!229)

(assert (=> d!13185 (= lt!26844 e!41660)))

(declare-fun c!8610 () Bool)

(assert (=> d!13185 (= c!8610 (bvsge #b00000000000000000000000000000000 #b01111111111111111111111111111110))))

(declare-fun lt!26843 () (_ BitVec 64))

(assert (=> d!13185 (= lt!26843 (select (arr!1799 (_keys!3720 newMap!16)) (toIndex!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (mask!5994 newMap!16))))))

(assert (=> d!13185 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!13185 (= (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (mask!5994 newMap!16)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (_keys!3720 newMap!16) (mask!5994 newMap!16)) lt!26844)))

(declare-fun b!63542 () Bool)

(declare-fun e!41661 () SeekEntryResult!229)

(assert (=> b!63542 (= e!41661 (Intermediate!229 false (toIndex!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (mask!5994 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!63543 () Bool)

(assert (=> b!63543 (= e!41660 e!41661)))

(declare-fun c!8611 () Bool)

(assert (=> b!63543 (= c!8611 (or (= lt!26843 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) (= (bvadd lt!26843 lt!26843) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!63544 () Bool)

(assert (=> b!63544 (= e!41659 (bvsge (x!10307 lt!26844) #b01111111111111111111111111111110))))

(declare-fun b!63545 () Bool)

(assert (=> b!63545 (= e!41661 (seekKeyOrZeroOrLongMinValue!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (nextIndex!0 (toIndex!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (mask!5994 newMap!16)) #b00000000000000000000000000000000 (mask!5994 newMap!16)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (_keys!3720 newMap!16) (mask!5994 newMap!16)))))

(declare-fun b!63546 () Bool)

(declare-fun e!41662 () Bool)

(assert (=> b!63546 (= e!41659 e!41662)))

(declare-fun res!34758 () Bool)

(assert (=> b!63546 (= res!34758 (and ((_ is Intermediate!229) lt!26844) (not (undefined!1041 lt!26844)) (bvslt (x!10307 lt!26844) #b01111111111111111111111111111110) (bvsge (x!10307 lt!26844) #b00000000000000000000000000000000) (bvsge (x!10307 lt!26844) #b00000000000000000000000000000000)))))

(assert (=> b!63546 (=> (not res!34758) (not e!41662))))

(declare-fun b!63547 () Bool)

(assert (=> b!63547 (and (bvsge (index!3043 lt!26844) #b00000000000000000000000000000000) (bvslt (index!3043 lt!26844) (size!2031 (_keys!3720 newMap!16))))))

(declare-fun e!41663 () Bool)

(assert (=> b!63547 (= e!41663 (= (select (arr!1799 (_keys!3720 newMap!16)) (index!3043 lt!26844)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63548 () Bool)

(assert (=> b!63548 (= e!41660 (Intermediate!229 true (toIndex!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (mask!5994 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!63549 () Bool)

(assert (=> b!63549 (and (bvsge (index!3043 lt!26844) #b00000000000000000000000000000000) (bvslt (index!3043 lt!26844) (size!2031 (_keys!3720 newMap!16))))))

(declare-fun res!34759 () Bool)

(assert (=> b!63549 (= res!34759 (= (select (arr!1799 (_keys!3720 newMap!16)) (index!3043 lt!26844)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> b!63549 (=> res!34759 e!41663)))

(assert (=> b!63549 (= e!41662 e!41663)))

(declare-fun b!63550 () Bool)

(assert (=> b!63550 (and (bvsge (index!3043 lt!26844) #b00000000000000000000000000000000) (bvslt (index!3043 lt!26844) (size!2031 (_keys!3720 newMap!16))))))

(declare-fun res!34760 () Bool)

(assert (=> b!63550 (= res!34760 (= (select (arr!1799 (_keys!3720 newMap!16)) (index!3043 lt!26844)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63550 (=> res!34760 e!41663)))

(assert (= (and d!13185 c!8610) b!63548))

(assert (= (and d!13185 (not c!8610)) b!63543))

(assert (= (and b!63543 c!8611) b!63542))

(assert (= (and b!63543 (not c!8611)) b!63545))

(assert (= (and d!13185 c!8609) b!63544))

(assert (= (and d!13185 (not c!8609)) b!63546))

(assert (= (and b!63546 res!34758) b!63549))

(assert (= (and b!63549 (not res!34759)) b!63550))

(assert (= (and b!63550 (not res!34760)) b!63547))

(declare-fun m!58025 () Bool)

(assert (=> b!63547 m!58025))

(assert (=> b!63545 m!56645))

(declare-fun m!58027 () Bool)

(assert (=> b!63545 m!58027))

(assert (=> b!63545 m!58027))

(assert (=> b!63545 m!56051))

(declare-fun m!58029 () Bool)

(assert (=> b!63545 m!58029))

(assert (=> b!63550 m!58025))

(assert (=> b!63549 m!58025))

(assert (=> d!13185 m!56645))

(declare-fun m!58031 () Bool)

(assert (=> d!13185 m!58031))

(assert (=> d!13185 m!56299))

(assert (=> d!12795 d!13185))

(declare-fun d!13187 () Bool)

(declare-fun lt!26850 () (_ BitVec 32))

(declare-fun lt!26849 () (_ BitVec 32))

(assert (=> d!13187 (= lt!26850 (bvmul (bvxor lt!26849 (bvlshr lt!26849 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))))

(assert (=> d!13187 (= lt!26849 ((_ extract 31 0) (bvand (bvxor (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (bvlshr (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))))

(assert (=> d!13187 (and (bvsge (mask!5994 newMap!16) #b00000000000000000000000000000000) (let ((res!34761 (let ((h!2021 ((_ extract 31 0) (bvand (bvxor (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (bvlshr (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))) (let ((x!10411 (bvmul (bvxor h!2021 (bvlshr h!2021 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))) (bvand (bvxor x!10411 (bvlshr x!10411 #b00000000000000000000000000001101)) (mask!5994 newMap!16)))))) (and (bvslt res!34761 (bvadd (mask!5994 newMap!16) #b00000000000000000000000000000001)) (bvsge res!34761 #b00000000000000000000000000000000))))))

(assert (=> d!13187 (= (toIndex!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (mask!5994 newMap!16)) (bvand (bvxor lt!26850 (bvlshr lt!26850 #b00000000000000000000000000001101)) (mask!5994 newMap!16)))))

(assert (=> d!12795 d!13187))

(assert (=> d!12795 d!12901))

(assert (=> d!12749 d!12901))

(declare-fun lt!26851 () Bool)

(declare-fun d!13189 () Bool)

(assert (=> d!13189 (= lt!26851 (select (content!67 (ite c!8284 (Cons!1436 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1437) Nil!1437)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun e!41665 () Bool)

(assert (=> d!13189 (= lt!26851 e!41665)))

(declare-fun res!34763 () Bool)

(assert (=> d!13189 (=> (not res!34763) (not e!41665))))

(assert (=> d!13189 (= res!34763 ((_ is Cons!1436) (ite c!8284 (Cons!1436 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1437) Nil!1437)))))

(assert (=> d!13189 (= (contains!692 (ite c!8284 (Cons!1436 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1437) Nil!1437) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) lt!26851)))

(declare-fun b!63551 () Bool)

(declare-fun e!41664 () Bool)

(assert (=> b!63551 (= e!41665 e!41664)))

(declare-fun res!34762 () Bool)

(assert (=> b!63551 (=> res!34762 e!41664)))

(assert (=> b!63551 (= res!34762 (= (h!2019 (ite c!8284 (Cons!1436 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1437) Nil!1437)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!63552 () Bool)

(assert (=> b!63552 (= e!41664 (contains!692 (t!4834 (ite c!8284 (Cons!1436 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) Nil!1437) Nil!1437)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(assert (= (and d!13189 res!34763) b!63551))

(assert (= (and b!63551 (not res!34762)) b!63552))

(declare-fun m!58033 () Bool)

(assert (=> d!13189 m!58033))

(assert (=> d!13189 m!56751))

(declare-fun m!58035 () Bool)

(assert (=> d!13189 m!58035))

(assert (=> b!63552 m!56751))

(declare-fun m!58037 () Bool)

(assert (=> b!63552 m!58037))

(assert (=> b!62894 d!13189))

(assert (=> bm!4923 d!12775))

(declare-fun d!13191 () Bool)

(declare-fun e!41667 () Bool)

(assert (=> d!13191 e!41667))

(declare-fun res!34764 () Bool)

(assert (=> d!13191 (=> res!34764 e!41667)))

(declare-fun lt!26855 () Bool)

(assert (=> d!13191 (= res!34764 (not lt!26855))))

(declare-fun lt!26854 () Bool)

(assert (=> d!13191 (= lt!26855 lt!26854)))

(declare-fun lt!26852 () Unit!1693)

(declare-fun e!41666 () Unit!1693)

(assert (=> d!13191 (= lt!26852 e!41666)))

(declare-fun c!8612 () Bool)

(assert (=> d!13191 (= c!8612 lt!26854)))

(assert (=> d!13191 (= lt!26854 (containsKey!130 (toList!702 lt!26228) (_1!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!13191 (= (contains!690 lt!26228 (_1!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26855)))

(declare-fun b!63553 () Bool)

(declare-fun lt!26853 () Unit!1693)

(assert (=> b!63553 (= e!41666 lt!26853)))

(assert (=> b!63553 (= lt!26853 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 lt!26228) (_1!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> b!63553 (isDefined!79 (getValueByKey!126 (toList!702 lt!26228) (_1!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63554 () Bool)

(declare-fun Unit!1744 () Unit!1693)

(assert (=> b!63554 (= e!41666 Unit!1744)))

(declare-fun b!63555 () Bool)

(assert (=> b!63555 (= e!41667 (isDefined!79 (getValueByKey!126 (toList!702 lt!26228) (_1!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(assert (= (and d!13191 c!8612) b!63553))

(assert (= (and d!13191 (not c!8612)) b!63554))

(assert (= (and d!13191 (not res!34764)) b!63555))

(declare-fun m!58039 () Bool)

(assert (=> d!13191 m!58039))

(declare-fun m!58041 () Bool)

(assert (=> b!63553 m!58041))

(assert (=> b!63553 m!56427))

(assert (=> b!63553 m!56427))

(declare-fun m!58043 () Bool)

(assert (=> b!63553 m!58043))

(assert (=> b!63555 m!56427))

(assert (=> b!63555 m!56427))

(assert (=> b!63555 m!58043))

(assert (=> d!12737 d!13191))

(declare-fun b!63557 () Bool)

(declare-fun e!41668 () Option!132)

(declare-fun e!41669 () Option!132)

(assert (=> b!63557 (= e!41668 e!41669)))

(declare-fun c!8614 () Bool)

(assert (=> b!63557 (= c!8614 (and ((_ is Cons!1435) lt!26227) (not (= (_1!1030 (h!2018 lt!26227)) (_1!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))))

(declare-fun b!63556 () Bool)

(assert (=> b!63556 (= e!41668 (Some!131 (_2!1030 (h!2018 lt!26227))))))

(declare-fun d!13193 () Bool)

(declare-fun c!8613 () Bool)

(assert (=> d!13193 (= c!8613 (and ((_ is Cons!1435) lt!26227) (= (_1!1030 (h!2018 lt!26227)) (_1!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> d!13193 (= (getValueByKey!126 lt!26227 (_1!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) e!41668)))

(declare-fun b!63558 () Bool)

(assert (=> b!63558 (= e!41669 (getValueByKey!126 (t!4833 lt!26227) (_1!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63559 () Bool)

(assert (=> b!63559 (= e!41669 None!130)))

(assert (= (and d!13193 c!8613) b!63556))

(assert (= (and d!13193 (not c!8613)) b!63557))

(assert (= (and b!63557 c!8614) b!63558))

(assert (= (and b!63557 (not c!8614)) b!63559))

(declare-fun m!58045 () Bool)

(assert (=> b!63558 m!58045))

(assert (=> d!12737 d!13193))

(declare-fun d!13195 () Bool)

(assert (=> d!13195 (= (getValueByKey!126 lt!26227 (_1!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) (Some!131 (_2!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun lt!26856 () Unit!1693)

(assert (=> d!13195 (= lt!26856 (choose!340 lt!26227 (_1!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun e!41670 () Bool)

(assert (=> d!13195 e!41670))

(declare-fun res!34765 () Bool)

(assert (=> d!13195 (=> (not res!34765) (not e!41670))))

(assert (=> d!13195 (= res!34765 (isStrictlySorted!286 lt!26227))))

(assert (=> d!13195 (= (lemmaContainsTupThenGetReturnValue!43 lt!26227 (_1!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26856)))

(declare-fun b!63560 () Bool)

(declare-fun res!34766 () Bool)

(assert (=> b!63560 (=> (not res!34766) (not e!41670))))

(assert (=> b!63560 (= res!34766 (containsKey!130 lt!26227 (_1!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63561 () Bool)

(assert (=> b!63561 (= e!41670 (contains!693 lt!26227 (tuple2!2039 (_1!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(assert (= (and d!13195 res!34765) b!63560))

(assert (= (and b!63560 res!34766) b!63561))

(assert (=> d!13195 m!56421))

(declare-fun m!58047 () Bool)

(assert (=> d!13195 m!58047))

(declare-fun m!58049 () Bool)

(assert (=> d!13195 m!58049))

(declare-fun m!58051 () Bool)

(assert (=> b!63560 m!58051))

(declare-fun m!58053 () Bool)

(assert (=> b!63561 m!58053))

(assert (=> d!12737 d!13195))

(declare-fun b!63562 () Bool)

(declare-fun e!41674 () List!1439)

(declare-fun call!5047 () List!1439)

(assert (=> b!63562 (= e!41674 call!5047)))

(declare-fun c!8616 () Bool)

(declare-fun b!63563 () Bool)

(declare-fun c!8615 () Bool)

(declare-fun e!41671 () List!1439)

(assert (=> b!63563 (= e!41671 (ite c!8615 (t!4833 (toList!702 lt!26047)) (ite c!8616 (Cons!1435 (h!2018 (toList!702 lt!26047)) (t!4833 (toList!702 lt!26047))) Nil!1436)))))

(declare-fun bm!5042 () Bool)

(declare-fun call!5046 () List!1439)

(declare-fun call!5045 () List!1439)

(assert (=> bm!5042 (= call!5046 call!5045)))

(declare-fun b!63564 () Bool)

(declare-fun e!41672 () List!1439)

(assert (=> b!63564 (= e!41672 call!5045)))

(declare-fun b!63565 () Bool)

(assert (=> b!63565 (= e!41671 (insertStrictlySorted!46 (t!4833 (toList!702 lt!26047)) (_1!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63566 () Bool)

(declare-fun res!34768 () Bool)

(declare-fun e!41675 () Bool)

(assert (=> b!63566 (=> (not res!34768) (not e!41675))))

(declare-fun lt!26857 () List!1439)

(assert (=> b!63566 (= res!34768 (containsKey!130 lt!26857 (_1!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63567 () Bool)

(assert (=> b!63567 (= e!41675 (contains!693 lt!26857 (tuple2!2039 (_1!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!63568 () Bool)

(assert (=> b!63568 (= e!41674 call!5047)))

(declare-fun d!13197 () Bool)

(assert (=> d!13197 e!41675))

(declare-fun res!34767 () Bool)

(assert (=> d!13197 (=> (not res!34767) (not e!41675))))

(assert (=> d!13197 (= res!34767 (isStrictlySorted!286 lt!26857))))

(assert (=> d!13197 (= lt!26857 e!41672)))

(declare-fun c!8617 () Bool)

(assert (=> d!13197 (= c!8617 (and ((_ is Cons!1435) (toList!702 lt!26047)) (bvslt (_1!1030 (h!2018 (toList!702 lt!26047))) (_1!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> d!13197 (isStrictlySorted!286 (toList!702 lt!26047))))

(assert (=> d!13197 (= (insertStrictlySorted!46 (toList!702 lt!26047) (_1!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26857)))

(declare-fun bm!5043 () Bool)

(assert (=> bm!5043 (= call!5045 ($colon$colon!62 e!41671 (ite c!8617 (h!2018 (toList!702 lt!26047)) (tuple2!2039 (_1!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))))

(declare-fun c!8618 () Bool)

(assert (=> bm!5043 (= c!8618 c!8617)))

(declare-fun b!63569 () Bool)

(declare-fun e!41673 () List!1439)

(assert (=> b!63569 (= e!41672 e!41673)))

(assert (=> b!63569 (= c!8615 (and ((_ is Cons!1435) (toList!702 lt!26047)) (= (_1!1030 (h!2018 (toList!702 lt!26047))) (_1!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!63570 () Bool)

(assert (=> b!63570 (= c!8616 (and ((_ is Cons!1435) (toList!702 lt!26047)) (bvsgt (_1!1030 (h!2018 (toList!702 lt!26047))) (_1!1030 (tuple2!2039 lt!26039 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> b!63570 (= e!41673 e!41674)))

(declare-fun bm!5044 () Bool)

(assert (=> bm!5044 (= call!5047 call!5046)))

(declare-fun b!63571 () Bool)

(assert (=> b!63571 (= e!41673 call!5046)))

(assert (= (and d!13197 c!8617) b!63564))

(assert (= (and d!13197 (not c!8617)) b!63569))

(assert (= (and b!63569 c!8615) b!63571))

(assert (= (and b!63569 (not c!8615)) b!63570))

(assert (= (and b!63570 c!8616) b!63568))

(assert (= (and b!63570 (not c!8616)) b!63562))

(assert (= (or b!63568 b!63562) bm!5044))

(assert (= (or b!63571 bm!5044) bm!5042))

(assert (= (or b!63564 bm!5042) bm!5043))

(assert (= (and bm!5043 c!8618) b!63565))

(assert (= (and bm!5043 (not c!8618)) b!63563))

(assert (= (and d!13197 res!34767) b!63566))

(assert (= (and b!63566 res!34768) b!63567))

(declare-fun m!58055 () Bool)

(assert (=> b!63565 m!58055))

(declare-fun m!58057 () Bool)

(assert (=> bm!5043 m!58057))

(declare-fun m!58059 () Bool)

(assert (=> b!63566 m!58059))

(declare-fun m!58061 () Bool)

(assert (=> b!63567 m!58061))

(declare-fun m!58063 () Bool)

(assert (=> d!13197 m!58063))

(declare-fun m!58065 () Bool)

(assert (=> d!13197 m!58065))

(assert (=> d!12737 d!13197))

(assert (=> b!62802 d!12705))

(declare-fun d!13199 () Bool)

(declare-fun e!41676 () Bool)

(assert (=> d!13199 e!41676))

(declare-fun res!34769 () Bool)

(assert (=> d!13199 (=> (not res!34769) (not e!41676))))

(declare-fun lt!26861 () ListLongMap!1373)

(assert (=> d!13199 (= res!34769 (contains!690 lt!26861 (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))

(declare-fun lt!26860 () List!1439)

(assert (=> d!13199 (= lt!26861 (ListLongMap!1374 lt!26860))))

(declare-fun lt!26859 () Unit!1693)

(declare-fun lt!26858 () Unit!1693)

(assert (=> d!13199 (= lt!26859 lt!26858)))

(assert (=> d!13199 (= (getValueByKey!126 lt!26860 (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))) (Some!131 (_2!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))

(assert (=> d!13199 (= lt!26858 (lemmaContainsTupThenGetReturnValue!43 lt!26860 (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))) (_2!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))

(assert (=> d!13199 (= lt!26860 (insertStrictlySorted!46 (toList!702 call!4932) (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))) (_2!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))

(assert (=> d!13199 (= (+!83 call!4932 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))) lt!26861)))

(declare-fun b!63572 () Bool)

(declare-fun res!34770 () Bool)

(assert (=> b!63572 (=> (not res!34770) (not e!41676))))

(assert (=> b!63572 (= res!34770 (= (getValueByKey!126 (toList!702 lt!26861) (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))) (Some!131 (_2!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))))

(declare-fun b!63573 () Bool)

(assert (=> b!63573 (= e!41676 (contains!693 (toList!702 lt!26861) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))

(assert (= (and d!13199 res!34769) b!63572))

(assert (= (and b!63572 res!34770) b!63573))

(declare-fun m!58067 () Bool)

(assert (=> d!13199 m!58067))

(declare-fun m!58069 () Bool)

(assert (=> d!13199 m!58069))

(declare-fun m!58071 () Bool)

(assert (=> d!13199 m!58071))

(declare-fun m!58073 () Bool)

(assert (=> d!13199 m!58073))

(declare-fun m!58075 () Bool)

(assert (=> b!63572 m!58075))

(declare-fun m!58077 () Bool)

(assert (=> b!63573 m!58077))

(assert (=> b!62713 d!13199))

(assert (=> bm!4944 d!12795))

(declare-fun d!13201 () Bool)

(declare-fun res!34771 () Bool)

(declare-fun e!41677 () Bool)

(assert (=> d!13201 (=> res!34771 e!41677)))

(assert (=> d!13201 (= res!34771 (= (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (=> d!13201 (= (arrayContainsKey!0 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) e!41677)))

(declare-fun b!63574 () Bool)

(declare-fun e!41678 () Bool)

(assert (=> b!63574 (= e!41677 e!41678)))

(declare-fun res!34772 () Bool)

(assert (=> b!63574 (=> (not res!34772) (not e!41678))))

(assert (=> b!63574 (= res!34772 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun b!63575 () Bool)

(assert (=> b!63575 (= e!41678 (arrayContainsKey!0 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!13201 (not res!34771)) b!63574))

(assert (= (and b!63574 res!34772) b!63575))

(declare-fun m!58079 () Bool)

(assert (=> d!13201 m!58079))

(assert (=> b!63575 m!56051))

(declare-fun m!58081 () Bool)

(assert (=> b!63575 m!58081))

(assert (=> b!62755 d!13201))

(declare-fun d!13203 () Bool)

(declare-fun e!41680 () Bool)

(assert (=> d!13203 e!41680))

(declare-fun res!34773 () Bool)

(assert (=> d!13203 (=> res!34773 e!41680)))

(declare-fun lt!26865 () Bool)

(assert (=> d!13203 (= res!34773 (not lt!26865))))

(declare-fun lt!26864 () Bool)

(assert (=> d!13203 (= lt!26865 lt!26864)))

(declare-fun lt!26862 () Unit!1693)

(declare-fun e!41679 () Unit!1693)

(assert (=> d!13203 (= lt!26862 e!41679)))

(declare-fun c!8619 () Bool)

(assert (=> d!13203 (= c!8619 lt!26864)))

(assert (=> d!13203 (= lt!26864 (containsKey!130 (toList!702 lt!26255) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!13203 (= (contains!690 lt!26255 #b1000000000000000000000000000000000000000000000000000000000000000) lt!26865)))

(declare-fun b!63576 () Bool)

(declare-fun lt!26863 () Unit!1693)

(assert (=> b!63576 (= e!41679 lt!26863)))

(assert (=> b!63576 (= lt!26863 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 lt!26255) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63576 (isDefined!79 (getValueByKey!126 (toList!702 lt!26255) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63577 () Bool)

(declare-fun Unit!1745 () Unit!1693)

(assert (=> b!63577 (= e!41679 Unit!1745)))

(declare-fun b!63578 () Bool)

(assert (=> b!63578 (= e!41680 (isDefined!79 (getValueByKey!126 (toList!702 lt!26255) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!13203 c!8619) b!63576))

(assert (= (and d!13203 (not c!8619)) b!63577))

(assert (= (and d!13203 (not res!34773)) b!63578))

(declare-fun m!58083 () Bool)

(assert (=> d!13203 m!58083))

(declare-fun m!58085 () Bool)

(assert (=> b!63576 m!58085))

(declare-fun m!58087 () Bool)

(assert (=> b!63576 m!58087))

(assert (=> b!63576 m!58087))

(declare-fun m!58089 () Bool)

(assert (=> b!63576 m!58089))

(assert (=> b!63578 m!58087))

(assert (=> b!63578 m!58087))

(assert (=> b!63578 m!58089))

(assert (=> bm!4931 d!13203))

(declare-fun d!13205 () Bool)

(assert (=> d!13205 (isDefined!79 (getValueByKey!126 (toList!702 call!4899) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun lt!26866 () Unit!1693)

(assert (=> d!13205 (= lt!26866 (choose!336 (toList!702 call!4899) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun e!41681 () Bool)

(assert (=> d!13205 e!41681))

(declare-fun res!34774 () Bool)

(assert (=> d!13205 (=> (not res!34774) (not e!41681))))

(assert (=> d!13205 (= res!34774 (isStrictlySorted!286 (toList!702 call!4899)))))

(assert (=> d!13205 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 call!4899) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) lt!26866)))

(declare-fun b!63579 () Bool)

(assert (=> b!63579 (= e!41681 (containsKey!130 (toList!702 call!4899) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(assert (= (and d!13205 res!34774) b!63579))

(assert (=> d!13205 m!56051))

(assert (=> d!13205 m!56551))

(assert (=> d!13205 m!56551))

(assert (=> d!13205 m!56553))

(assert (=> d!13205 m!56051))

(declare-fun m!58091 () Bool)

(assert (=> d!13205 m!58091))

(declare-fun m!58093 () Bool)

(assert (=> d!13205 m!58093))

(assert (=> b!63579 m!56051))

(assert (=> b!63579 m!56547))

(assert (=> b!62743 d!13205))

(assert (=> b!62743 d!12923))

(assert (=> b!62743 d!12925))

(declare-fun d!13207 () Bool)

(assert (=> d!13207 (isDefined!79 (getValueByKey!126 (toList!702 (+!83 lt!26044 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26050))))

(declare-fun lt!26867 () Unit!1693)

(assert (=> d!13207 (= lt!26867 (choose!336 (toList!702 (+!83 lt!26044 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26050))))

(declare-fun e!41682 () Bool)

(assert (=> d!13207 e!41682))

(declare-fun res!34775 () Bool)

(assert (=> d!13207 (=> (not res!34775) (not e!41682))))

(assert (=> d!13207 (= res!34775 (isStrictlySorted!286 (toList!702 (+!83 lt!26044 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> d!13207 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 (+!83 lt!26044 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26050) lt!26867)))

(declare-fun b!63580 () Bool)

(assert (=> b!63580 (= e!41682 (containsKey!130 (toList!702 (+!83 lt!26044 (tuple2!2039 lt!26041 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26050))))

(assert (= (and d!13207 res!34775) b!63580))

(assert (=> d!13207 m!56355))

(assert (=> d!13207 m!56355))

(assert (=> d!13207 m!56357))

(declare-fun m!58095 () Bool)

(assert (=> d!13207 m!58095))

(declare-fun m!58097 () Bool)

(assert (=> d!13207 m!58097))

(assert (=> b!63580 m!56351))

(assert (=> b!62632 d!13207))

(assert (=> b!62632 d!12935))

(assert (=> b!62632 d!12937))

(declare-fun b!63582 () Bool)

(declare-fun e!41683 () Option!132)

(declare-fun e!41684 () Option!132)

(assert (=> b!63582 (= e!41683 e!41684)))

(declare-fun c!8621 () Bool)

(assert (=> b!63582 (= c!8621 (and ((_ is Cons!1435) (t!4833 (toList!702 lt!25956))) (not (= (_1!1030 (h!2018 (t!4833 (toList!702 lt!25956)))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))))

(declare-fun b!63581 () Bool)

(assert (=> b!63581 (= e!41683 (Some!131 (_2!1030 (h!2018 (t!4833 (toList!702 lt!25956))))))))

(declare-fun c!8620 () Bool)

(declare-fun d!13209 () Bool)

(assert (=> d!13209 (= c!8620 (and ((_ is Cons!1435) (t!4833 (toList!702 lt!25956))) (= (_1!1030 (h!2018 (t!4833 (toList!702 lt!25956)))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355))))))

(assert (=> d!13209 (= (getValueByKey!126 (t!4833 (toList!702 lt!25956)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)) e!41683)))

(declare-fun b!63583 () Bool)

(assert (=> b!63583 (= e!41684 (getValueByKey!126 (t!4833 (t!4833 (toList!702 lt!25956))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))

(declare-fun b!63584 () Bool)

(assert (=> b!63584 (= e!41684 None!130)))

(assert (= (and d!13209 c!8620) b!63581))

(assert (= (and d!13209 (not c!8620)) b!63582))

(assert (= (and b!63582 c!8621) b!63583))

(assert (= (and b!63582 (not c!8621)) b!63584))

(assert (=> b!63583 m!56051))

(declare-fun m!58099 () Bool)

(assert (=> b!63583 m!58099))

(assert (=> b!62738 d!13209))

(assert (=> b!62742 d!12773))

(declare-fun d!13211 () Bool)

(declare-fun e!41686 () Bool)

(assert (=> d!13211 e!41686))

(declare-fun res!34776 () Bool)

(assert (=> d!13211 (=> res!34776 e!41686)))

(declare-fun lt!26871 () Bool)

(assert (=> d!13211 (= res!34776 (not lt!26871))))

(declare-fun lt!26870 () Bool)

(assert (=> d!13211 (= lt!26871 lt!26870)))

(declare-fun lt!26868 () Unit!1693)

(declare-fun e!41685 () Unit!1693)

(assert (=> d!13211 (= lt!26868 e!41685)))

(declare-fun c!8622 () Bool)

(assert (=> d!13211 (= c!8622 lt!26870)))

(assert (=> d!13211 (= lt!26870 (containsKey!130 (toList!702 lt!26219) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!13211 (= (contains!690 lt!26219 #b1000000000000000000000000000000000000000000000000000000000000000) lt!26871)))

(declare-fun b!63585 () Bool)

(declare-fun lt!26869 () Unit!1693)

(assert (=> b!63585 (= e!41685 lt!26869)))

(assert (=> b!63585 (= lt!26869 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 lt!26219) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63585 (isDefined!79 (getValueByKey!126 (toList!702 lt!26219) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63586 () Bool)

(declare-fun Unit!1746 () Unit!1693)

(assert (=> b!63586 (= e!41685 Unit!1746)))

(declare-fun b!63587 () Bool)

(assert (=> b!63587 (= e!41686 (isDefined!79 (getValueByKey!126 (toList!702 lt!26219) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!13211 c!8622) b!63585))

(assert (= (and d!13211 (not c!8622)) b!63586))

(assert (= (and d!13211 (not res!34776)) b!63587))

(declare-fun m!58101 () Bool)

(assert (=> d!13211 m!58101))

(declare-fun m!58103 () Bool)

(assert (=> b!63585 m!58103))

(declare-fun m!58105 () Bool)

(assert (=> b!63585 m!58105))

(assert (=> b!63585 m!58105))

(declare-fun m!58107 () Bool)

(assert (=> b!63585 m!58107))

(assert (=> b!63587 m!58105))

(assert (=> b!63587 m!58105))

(assert (=> b!63587 m!58107))

(assert (=> b!62669 d!13211))

(declare-fun d!13213 () Bool)

(assert (=> d!13213 (= (apply!68 lt!26439 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1086 (getValueByKey!126 (toList!702 lt!26439) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2786 () Bool)

(assert (= bs!2786 d!13213))

(assert (=> bs!2786 m!57639))

(assert (=> bs!2786 m!57639))

(declare-fun m!58109 () Bool)

(assert (=> bs!2786 m!58109))

(assert (=> b!62904 d!13213))

(declare-fun d!13215 () Bool)

(assert (=> d!13215 (= (inRange!0 (index!3042 lt!26376) (mask!5994 newMap!16)) (and (bvsge (index!3042 lt!26376) #b00000000000000000000000000000000) (bvslt (index!3042 lt!26376) (bvadd (mask!5994 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> b!62813 d!13215))

(declare-fun d!13217 () Bool)

(assert (=> d!13217 (= (get!1086 (getValueByKey!126 (toList!702 lt!26046) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2423 (getValueByKey!126 (toList!702 lt!26046) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12779 d!13217))

(assert (=> d!12779 d!13057))

(declare-fun d!13219 () Bool)

(declare-fun res!34777 () Bool)

(declare-fun e!41687 () Bool)

(assert (=> d!13219 (=> res!34777 e!41687)))

(assert (=> d!13219 (= res!34777 (and ((_ is Cons!1435) (toList!702 lt!26046)) (= (_1!1030 (h!2018 (toList!702 lt!26046))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!13219 (= (containsKey!130 (toList!702 lt!26046) #b1000000000000000000000000000000000000000000000000000000000000000) e!41687)))

(declare-fun b!63588 () Bool)

(declare-fun e!41688 () Bool)

(assert (=> b!63588 (= e!41687 e!41688)))

(declare-fun res!34778 () Bool)

(assert (=> b!63588 (=> (not res!34778) (not e!41688))))

(assert (=> b!63588 (= res!34778 (and (or (not ((_ is Cons!1435) (toList!702 lt!26046))) (bvsle (_1!1030 (h!2018 (toList!702 lt!26046))) #b1000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1435) (toList!702 lt!26046)) (bvslt (_1!1030 (h!2018 (toList!702 lt!26046))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!63589 () Bool)

(assert (=> b!63589 (= e!41688 (containsKey!130 (t!4833 (toList!702 lt!26046)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!13219 (not res!34777)) b!63588))

(assert (= (and b!63588 res!34778) b!63589))

(declare-fun m!58111 () Bool)

(assert (=> b!63589 m!58111))

(assert (=> d!12813 d!13219))

(declare-fun lt!26872 () Bool)

(declare-fun d!13221 () Bool)

(assert (=> d!13221 (= lt!26872 (select (content!68 (toList!702 lt!26190)) (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun e!41689 () Bool)

(assert (=> d!13221 (= lt!26872 e!41689)))

(declare-fun res!34779 () Bool)

(assert (=> d!13221 (=> (not res!34779) (not e!41689))))

(assert (=> d!13221 (= res!34779 ((_ is Cons!1435) (toList!702 lt!26190)))))

(assert (=> d!13221 (= (contains!693 (toList!702 lt!26190) (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) lt!26872)))

(declare-fun b!63590 () Bool)

(declare-fun e!41690 () Bool)

(assert (=> b!63590 (= e!41689 e!41690)))

(declare-fun res!34780 () Bool)

(assert (=> b!63590 (=> res!34780 e!41690)))

(assert (=> b!63590 (= res!34780 (= (h!2018 (toList!702 lt!26190)) (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun b!63591 () Bool)

(assert (=> b!63591 (= e!41690 (contains!693 (t!4833 (toList!702 lt!26190)) (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))

(assert (= (and d!13221 res!34779) b!63590))

(assert (= (and b!63590 (not res!34780)) b!63591))

(declare-fun m!58113 () Bool)

(assert (=> d!13221 m!58113))

(declare-fun m!58115 () Bool)

(assert (=> d!13221 m!58115))

(declare-fun m!58117 () Bool)

(assert (=> b!63591 m!58117))

(assert (=> b!62631 d!13221))

(assert (=> b!62805 d!12791))

(assert (=> b!62706 d!12989))

(assert (=> b!62706 d!12991))

(declare-fun b!63592 () Bool)

(declare-fun lt!26879 () Unit!1693)

(declare-fun lt!26873 () Unit!1693)

(assert (=> b!63592 (= lt!26879 lt!26873)))

(declare-fun lt!26874 () ListLongMap!1373)

(declare-fun lt!26876 () (_ BitVec 64))

(declare-fun lt!26878 () (_ BitVec 64))

(declare-fun lt!26877 () V!2867)

(assert (=> b!63592 (not (contains!690 (+!83 lt!26874 (tuple2!2039 lt!26878 lt!26877)) lt!26876))))

(assert (=> b!63592 (= lt!26873 (addStillNotContains!17 lt!26874 lt!26878 lt!26877 lt!26876))))

(assert (=> b!63592 (= lt!26876 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!63592 (= lt!26877 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!63592 (= lt!26878 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(declare-fun call!5048 () ListLongMap!1373)

(assert (=> b!63592 (= lt!26874 call!5048)))

(declare-fun e!41691 () ListLongMap!1373)

(assert (=> b!63592 (= e!41691 (+!83 call!5048 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!63593 () Bool)

(declare-fun e!41695 () Bool)

(declare-fun e!41696 () Bool)

(assert (=> b!63593 (= e!41695 e!41696)))

(assert (=> b!63593 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun res!34782 () Bool)

(declare-fun lt!26875 () ListLongMap!1373)

(assert (=> b!63593 (= res!34782 (contains!690 lt!26875 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!63593 (=> (not res!34782) (not e!41696))))

(declare-fun b!63594 () Bool)

(declare-fun e!41694 () Bool)

(assert (=> b!63594 (= e!41695 e!41694)))

(declare-fun c!8623 () Bool)

(assert (=> b!63594 (= c!8623 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun b!63595 () Bool)

(declare-fun res!34781 () Bool)

(declare-fun e!41697 () Bool)

(assert (=> b!63595 (=> (not res!34781) (not e!41697))))

(assert (=> b!63595 (= res!34781 (not (contains!690 lt!26875 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!63596 () Bool)

(declare-fun e!41693 () ListLongMap!1373)

(assert (=> b!63596 (= e!41693 (ListLongMap!1374 Nil!1436))))

(declare-fun b!63597 () Bool)

(assert (=> b!63597 (= e!41697 e!41695)))

(declare-fun c!8625 () Bool)

(declare-fun e!41692 () Bool)

(assert (=> b!63597 (= c!8625 e!41692)))

(declare-fun res!34784 () Bool)

(assert (=> b!63597 (=> (not res!34784) (not e!41692))))

(assert (=> b!63597 (= res!34784 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun d!13223 () Bool)

(assert (=> d!13223 e!41697))

(declare-fun res!34783 () Bool)

(assert (=> d!13223 (=> (not res!34783) (not e!41697))))

(assert (=> d!13223 (= res!34783 (not (contains!690 lt!26875 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!13223 (= lt!26875 e!41693)))

(declare-fun c!8624 () Bool)

(assert (=> d!13223 (= c!8624 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992))))))))

(assert (=> d!13223 (validMask!0 (mask!5994 (v!2419 (underlying!233 thiss!992))))))

(assert (=> d!13223 (= (getCurrentListMapNoExtraKeys!46 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (_values!2071 (v!2419 (underlying!233 thiss!992))) (mask!5994 (v!2419 (underlying!233 thiss!992))) (extraKeys!1967 (v!2419 (underlying!233 thiss!992))) (zeroValue!2000 (v!2419 (underlying!233 thiss!992))) (minValue!2000 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2088 (v!2419 (underlying!233 thiss!992)))) lt!26875)))

(declare-fun b!63598 () Bool)

(assert (=> b!63598 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992))))))))

(assert (=> b!63598 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2032 (_values!2071 (v!2419 (underlying!233 thiss!992))))))))

(assert (=> b!63598 (= e!41696 (= (apply!68 lt!26875 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!63599 () Bool)

(assert (=> b!63599 (= e!41694 (= lt!26875 (getCurrentListMapNoExtraKeys!46 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (_values!2071 (v!2419 (underlying!233 thiss!992))) (mask!5994 (v!2419 (underlying!233 thiss!992))) (extraKeys!1967 (v!2419 (underlying!233 thiss!992))) (zeroValue!2000 (v!2419 (underlying!233 thiss!992))) (minValue!2000 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun b!63600 () Bool)

(assert (=> b!63600 (= e!41694 (isEmpty!299 lt!26875))))

(declare-fun b!63601 () Bool)

(assert (=> b!63601 (= e!41693 e!41691)))

(declare-fun c!8626 () Bool)

(assert (=> b!63601 (= c!8626 (validKeyInArray!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(declare-fun b!63602 () Bool)

(assert (=> b!63602 (= e!41691 call!5048)))

(declare-fun bm!5045 () Bool)

(assert (=> bm!5045 (= call!5048 (getCurrentListMapNoExtraKeys!46 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (_values!2071 (v!2419 (underlying!233 thiss!992))) (mask!5994 (v!2419 (underlying!233 thiss!992))) (extraKeys!1967 (v!2419 (underlying!233 thiss!992))) (zeroValue!2000 (v!2419 (underlying!233 thiss!992))) (minValue!2000 (v!2419 (underlying!233 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2088 (v!2419 (underlying!233 thiss!992)))))))

(declare-fun b!63603 () Bool)

(assert (=> b!63603 (= e!41692 (validKeyInArray!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!63603 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))

(assert (= (and d!13223 c!8624) b!63596))

(assert (= (and d!13223 (not c!8624)) b!63601))

(assert (= (and b!63601 c!8626) b!63592))

(assert (= (and b!63601 (not c!8626)) b!63602))

(assert (= (or b!63592 b!63602) bm!5045))

(assert (= (and d!13223 res!34783) b!63595))

(assert (= (and b!63595 res!34781) b!63597))

(assert (= (and b!63597 res!34784) b!63603))

(assert (= (and b!63597 c!8625) b!63593))

(assert (= (and b!63597 (not c!8625)) b!63594))

(assert (= (and b!63593 res!34782) b!63598))

(assert (= (and b!63594 c!8623) b!63599))

(assert (= (and b!63594 (not c!8623)) b!63600))

(declare-fun b_lambda!2839 () Bool)

(assert (=> (not b_lambda!2839) (not b!63592)))

(assert (=> b!63592 t!4830))

(declare-fun b_and!3899 () Bool)

(assert (= b_and!3895 (and (=> t!4830 result!2445) b_and!3899)))

(assert (=> b!63592 t!4832))

(declare-fun b_and!3901 () Bool)

(assert (= b_and!3897 (and (=> t!4832 result!2449) b_and!3901)))

(declare-fun b_lambda!2841 () Bool)

(assert (=> (not b_lambda!2841) (not b!63598)))

(assert (=> b!63598 t!4830))

(declare-fun b_and!3903 () Bool)

(assert (= b_and!3899 (and (=> t!4830 result!2445) b_and!3903)))

(assert (=> b!63598 t!4832))

(declare-fun b_and!3905 () Bool)

(assert (= b_and!3901 (and (=> t!4832 result!2449) b_and!3905)))

(declare-fun m!58119 () Bool)

(assert (=> b!63600 m!58119))

(declare-fun m!58121 () Bool)

(assert (=> b!63598 m!58121))

(assert (=> b!63598 m!56061))

(declare-fun m!58123 () Bool)

(assert (=> b!63598 m!58123))

(assert (=> b!63598 m!56563))

(assert (=> b!63598 m!58121))

(assert (=> b!63598 m!56061))

(assert (=> b!63598 m!56563))

(declare-fun m!58125 () Bool)

(assert (=> b!63598 m!58125))

(assert (=> b!63593 m!56563))

(assert (=> b!63593 m!56563))

(declare-fun m!58127 () Bool)

(assert (=> b!63593 m!58127))

(declare-fun m!58129 () Bool)

(assert (=> b!63599 m!58129))

(assert (=> b!63603 m!56563))

(assert (=> b!63603 m!56563))

(declare-fun m!58131 () Bool)

(assert (=> b!63603 m!58131))

(assert (=> bm!5045 m!58129))

(declare-fun m!58133 () Bool)

(assert (=> d!13223 m!58133))

(assert (=> d!13223 m!56087))

(declare-fun m!58135 () Bool)

(assert (=> b!63595 m!58135))

(declare-fun m!58137 () Bool)

(assert (=> b!63592 m!58137))

(assert (=> b!63592 m!58137))

(declare-fun m!58139 () Bool)

(assert (=> b!63592 m!58139))

(assert (=> b!63592 m!58121))

(assert (=> b!63592 m!56061))

(assert (=> b!63592 m!58123))

(declare-fun m!58141 () Bool)

(assert (=> b!63592 m!58141))

(assert (=> b!63592 m!56563))

(assert (=> b!63592 m!58121))

(declare-fun m!58143 () Bool)

(assert (=> b!63592 m!58143))

(assert (=> b!63592 m!56061))

(assert (=> b!63601 m!56563))

(assert (=> b!63601 m!56563))

(assert (=> b!63601 m!58131))

(assert (=> bm!4927 d!13223))

(declare-fun d!13225 () Bool)

(assert (=> d!13225 (isDefined!79 (getValueByKey!126 (toList!702 lt!26046) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun lt!26880 () Unit!1693)

(assert (=> d!13225 (= lt!26880 (choose!336 (toList!702 lt!26046) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!41698 () Bool)

(assert (=> d!13225 e!41698))

(declare-fun res!34785 () Bool)

(assert (=> d!13225 (=> (not res!34785) (not e!41698))))

(assert (=> d!13225 (= res!34785 (isStrictlySorted!286 (toList!702 lt!26046)))))

(assert (=> d!13225 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 lt!26046) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!26880)))

(declare-fun b!63604 () Bool)

(assert (=> b!63604 (= e!41698 (containsKey!130 (toList!702 lt!26046) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!13225 res!34785) b!63604))

(assert (=> d!13225 m!56139))

(assert (=> d!13225 m!56331))

(assert (=> d!13225 m!56331))

(assert (=> d!13225 m!56333))

(assert (=> d!13225 m!56139))

(declare-fun m!58145 () Bool)

(assert (=> d!13225 m!58145))

(assert (=> d!13225 m!57663))

(assert (=> b!63604 m!56139))

(assert (=> b!63604 m!56327))

(assert (=> b!62627 d!13225))

(assert (=> b!62627 d!12839))

(assert (=> b!62627 d!12841))

(assert (=> b!62867 d!12831))

(declare-fun d!13227 () Bool)

(assert (=> d!13227 (isDefined!79 (getValueByKey!126 (toList!702 call!4912) (ite c!8334 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (select (arr!1799 (_keys!3720 newMap!16)) (index!3042 lt!26125)))))))

(declare-fun lt!26881 () Unit!1693)

(assert (=> d!13227 (= lt!26881 (choose!336 (toList!702 call!4912) (ite c!8334 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (select (arr!1799 (_keys!3720 newMap!16)) (index!3042 lt!26125)))))))

(declare-fun e!41699 () Bool)

(assert (=> d!13227 e!41699))

(declare-fun res!34786 () Bool)

(assert (=> d!13227 (=> (not res!34786) (not e!41699))))

(assert (=> d!13227 (= res!34786 (isStrictlySorted!286 (toList!702 call!4912)))))

(assert (=> d!13227 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 call!4912) (ite c!8334 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (select (arr!1799 (_keys!3720 newMap!16)) (index!3042 lt!26125)))) lt!26881)))

(declare-fun b!63605 () Bool)

(assert (=> b!63605 (= e!41699 (containsKey!130 (toList!702 call!4912) (ite c!8334 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (select (arr!1799 (_keys!3720 newMap!16)) (index!3042 lt!26125)))))))

(assert (= (and d!13227 res!34786) b!63605))

(assert (=> d!13227 m!56323))

(assert (=> d!13227 m!56323))

(assert (=> d!13227 m!56325))

(declare-fun m!58147 () Bool)

(assert (=> d!13227 m!58147))

(declare-fun m!58149 () Bool)

(assert (=> d!13227 m!58149))

(assert (=> b!63605 m!56319))

(assert (=> b!62624 d!13227))

(assert (=> b!62624 d!12847))

(assert (=> b!62624 d!12849))

(assert (=> b!62673 d!13223))

(assert (=> b!62908 d!12831))

(declare-fun d!13229 () Bool)

(assert (=> d!13229 (= (inRange!0 (ite c!8356 (index!3041 lt!26166) (index!3044 lt!26166)) (mask!5994 newMap!16)) (and (bvsge (ite c!8356 (index!3041 lt!26166) (index!3044 lt!26166)) #b00000000000000000000000000000000) (bvslt (ite c!8356 (index!3041 lt!26166) (index!3044 lt!26166)) (bvadd (mask!5994 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4924 d!13229))

(declare-fun b!63606 () Bool)

(declare-fun e!41709 () Bool)

(declare-fun e!41712 () Bool)

(assert (=> b!63606 (= e!41709 e!41712)))

(declare-fun res!34792 () Bool)

(declare-fun call!5054 () Bool)

(assert (=> b!63606 (= res!34792 call!5054)))

(assert (=> b!63606 (=> (not res!34792) (not e!41712))))

(declare-fun b!63607 () Bool)

(declare-fun res!34793 () Bool)

(declare-fun e!41710 () Bool)

(assert (=> b!63607 (=> (not res!34793) (not e!41710))))

(assert (=> b!63607 (= res!34793 e!41709)))

(declare-fun c!8629 () Bool)

(assert (=> b!63607 (= c!8629 (not (= (bvand (extraKeys!1967 (_2!1031 lt!26150)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!63608 () Bool)

(declare-fun e!41704 () Unit!1693)

(declare-fun lt!26885 () Unit!1693)

(assert (=> b!63608 (= e!41704 lt!26885)))

(declare-fun lt!26889 () ListLongMap!1373)

(assert (=> b!63608 (= lt!26889 (getCurrentListMapNoExtraKeys!46 (_keys!3720 (_2!1031 lt!26150)) (_values!2071 (_2!1031 lt!26150)) (mask!5994 (_2!1031 lt!26150)) (extraKeys!1967 (_2!1031 lt!26150)) (zeroValue!2000 (_2!1031 lt!26150)) (minValue!2000 (_2!1031 lt!26150)) #b00000000000000000000000000000000 (defaultEntry!2088 (_2!1031 lt!26150))))))

(declare-fun lt!26886 () (_ BitVec 64))

(assert (=> b!63608 (= lt!26886 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26895 () (_ BitVec 64))

(assert (=> b!63608 (= lt!26895 (select (arr!1799 (_keys!3720 (_2!1031 lt!26150))) #b00000000000000000000000000000000))))

(declare-fun lt!26899 () Unit!1693)

(assert (=> b!63608 (= lt!26899 (addStillContains!44 lt!26889 lt!26886 (zeroValue!2000 (_2!1031 lt!26150)) lt!26895))))

(assert (=> b!63608 (contains!690 (+!83 lt!26889 (tuple2!2039 lt!26886 (zeroValue!2000 (_2!1031 lt!26150)))) lt!26895)))

(declare-fun lt!26897 () Unit!1693)

(assert (=> b!63608 (= lt!26897 lt!26899)))

(declare-fun lt!26892 () ListLongMap!1373)

(assert (=> b!63608 (= lt!26892 (getCurrentListMapNoExtraKeys!46 (_keys!3720 (_2!1031 lt!26150)) (_values!2071 (_2!1031 lt!26150)) (mask!5994 (_2!1031 lt!26150)) (extraKeys!1967 (_2!1031 lt!26150)) (zeroValue!2000 (_2!1031 lt!26150)) (minValue!2000 (_2!1031 lt!26150)) #b00000000000000000000000000000000 (defaultEntry!2088 (_2!1031 lt!26150))))))

(declare-fun lt!26884 () (_ BitVec 64))

(assert (=> b!63608 (= lt!26884 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26896 () (_ BitVec 64))

(assert (=> b!63608 (= lt!26896 (select (arr!1799 (_keys!3720 (_2!1031 lt!26150))) #b00000000000000000000000000000000))))

(declare-fun lt!26888 () Unit!1693)

(assert (=> b!63608 (= lt!26888 (addApplyDifferent!44 lt!26892 lt!26884 (minValue!2000 (_2!1031 lt!26150)) lt!26896))))

(assert (=> b!63608 (= (apply!68 (+!83 lt!26892 (tuple2!2039 lt!26884 (minValue!2000 (_2!1031 lt!26150)))) lt!26896) (apply!68 lt!26892 lt!26896))))

(declare-fun lt!26898 () Unit!1693)

(assert (=> b!63608 (= lt!26898 lt!26888)))

(declare-fun lt!26893 () ListLongMap!1373)

(assert (=> b!63608 (= lt!26893 (getCurrentListMapNoExtraKeys!46 (_keys!3720 (_2!1031 lt!26150)) (_values!2071 (_2!1031 lt!26150)) (mask!5994 (_2!1031 lt!26150)) (extraKeys!1967 (_2!1031 lt!26150)) (zeroValue!2000 (_2!1031 lt!26150)) (minValue!2000 (_2!1031 lt!26150)) #b00000000000000000000000000000000 (defaultEntry!2088 (_2!1031 lt!26150))))))

(declare-fun lt!26903 () (_ BitVec 64))

(assert (=> b!63608 (= lt!26903 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26900 () (_ BitVec 64))

(assert (=> b!63608 (= lt!26900 (select (arr!1799 (_keys!3720 (_2!1031 lt!26150))) #b00000000000000000000000000000000))))

(declare-fun lt!26883 () Unit!1693)

(assert (=> b!63608 (= lt!26883 (addApplyDifferent!44 lt!26893 lt!26903 (zeroValue!2000 (_2!1031 lt!26150)) lt!26900))))

(assert (=> b!63608 (= (apply!68 (+!83 lt!26893 (tuple2!2039 lt!26903 (zeroValue!2000 (_2!1031 lt!26150)))) lt!26900) (apply!68 lt!26893 lt!26900))))

(declare-fun lt!26882 () Unit!1693)

(assert (=> b!63608 (= lt!26882 lt!26883)))

(declare-fun lt!26887 () ListLongMap!1373)

(assert (=> b!63608 (= lt!26887 (getCurrentListMapNoExtraKeys!46 (_keys!3720 (_2!1031 lt!26150)) (_values!2071 (_2!1031 lt!26150)) (mask!5994 (_2!1031 lt!26150)) (extraKeys!1967 (_2!1031 lt!26150)) (zeroValue!2000 (_2!1031 lt!26150)) (minValue!2000 (_2!1031 lt!26150)) #b00000000000000000000000000000000 (defaultEntry!2088 (_2!1031 lt!26150))))))

(declare-fun lt!26902 () (_ BitVec 64))

(assert (=> b!63608 (= lt!26902 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26890 () (_ BitVec 64))

(assert (=> b!63608 (= lt!26890 (select (arr!1799 (_keys!3720 (_2!1031 lt!26150))) #b00000000000000000000000000000000))))

(assert (=> b!63608 (= lt!26885 (addApplyDifferent!44 lt!26887 lt!26902 (minValue!2000 (_2!1031 lt!26150)) lt!26890))))

(assert (=> b!63608 (= (apply!68 (+!83 lt!26887 (tuple2!2039 lt!26902 (minValue!2000 (_2!1031 lt!26150)))) lt!26890) (apply!68 lt!26887 lt!26890))))

(declare-fun b!63609 () Bool)

(assert (=> b!63609 (= e!41709 (not call!5054))))

(declare-fun call!5055 () ListLongMap!1373)

(declare-fun c!8630 () Bool)

(declare-fun bm!5047 () Bool)

(declare-fun c!8632 () Bool)

(declare-fun call!5052 () ListLongMap!1373)

(declare-fun call!5049 () ListLongMap!1373)

(declare-fun call!5050 () ListLongMap!1373)

(assert (=> bm!5047 (= call!5050 (+!83 (ite c!8630 call!5052 (ite c!8632 call!5049 call!5055)) (ite (or c!8630 c!8632) (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2000 (_2!1031 lt!26150))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (_2!1031 lt!26150))))))))

(declare-fun bm!5048 () Bool)

(assert (=> bm!5048 (= call!5055 call!5049)))

(declare-fun b!63610 () Bool)

(declare-fun e!41708 () Bool)

(declare-fun e!41701 () Bool)

(assert (=> b!63610 (= e!41708 e!41701)))

(declare-fun res!34787 () Bool)

(assert (=> b!63610 (=> (not res!34787) (not e!41701))))

(declare-fun lt!26891 () ListLongMap!1373)

(assert (=> b!63610 (= res!34787 (contains!690 lt!26891 (select (arr!1799 (_keys!3720 (_2!1031 lt!26150))) #b00000000000000000000000000000000)))))

(assert (=> b!63610 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 (_2!1031 lt!26150)))))))

(declare-fun bm!5049 () Bool)

(declare-fun call!5053 () Bool)

(assert (=> bm!5049 (= call!5053 (contains!690 lt!26891 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63611 () Bool)

(declare-fun e!41702 () Bool)

(assert (=> b!63611 (= e!41702 (not call!5053))))

(declare-fun bm!5050 () Bool)

(assert (=> bm!5050 (= call!5054 (contains!690 lt!26891 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!5051 () Bool)

(declare-fun call!5051 () ListLongMap!1373)

(assert (=> bm!5051 (= call!5051 call!5050)))

(declare-fun b!63612 () Bool)

(declare-fun e!41705 () ListLongMap!1373)

(assert (=> b!63612 (= e!41705 (+!83 call!5050 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (_2!1031 lt!26150)))))))

(declare-fun b!63613 () Bool)

(declare-fun res!34791 () Bool)

(assert (=> b!63613 (=> (not res!34791) (not e!41710))))

(assert (=> b!63613 (= res!34791 e!41708)))

(declare-fun res!34790 () Bool)

(assert (=> b!63613 (=> res!34790 e!41708)))

(declare-fun e!41707 () Bool)

(assert (=> b!63613 (= res!34790 (not e!41707))))

(declare-fun res!34788 () Bool)

(assert (=> b!63613 (=> (not res!34788) (not e!41707))))

(assert (=> b!63613 (= res!34788 (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 (_2!1031 lt!26150)))))))

(declare-fun d!13231 () Bool)

(assert (=> d!13231 e!41710))

(declare-fun res!34789 () Bool)

(assert (=> d!13231 (=> (not res!34789) (not e!41710))))

(assert (=> d!13231 (= res!34789 (or (bvsge #b00000000000000000000000000000000 (size!2031 (_keys!3720 (_2!1031 lt!26150)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 (_2!1031 lt!26150)))))))))

(declare-fun lt!26901 () ListLongMap!1373)

(assert (=> d!13231 (= lt!26891 lt!26901)))

(declare-fun lt!26894 () Unit!1693)

(assert (=> d!13231 (= lt!26894 e!41704)))

(declare-fun c!8628 () Bool)

(declare-fun e!41711 () Bool)

(assert (=> d!13231 (= c!8628 e!41711)))

(declare-fun res!34794 () Bool)

(assert (=> d!13231 (=> (not res!34794) (not e!41711))))

(assert (=> d!13231 (= res!34794 (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 (_2!1031 lt!26150)))))))

(assert (=> d!13231 (= lt!26901 e!41705)))

(assert (=> d!13231 (= c!8630 (and (not (= (bvand (extraKeys!1967 (_2!1031 lt!26150)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1967 (_2!1031 lt!26150)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!13231 (validMask!0 (mask!5994 (_2!1031 lt!26150)))))

(assert (=> d!13231 (= (getCurrentListMap!406 (_keys!3720 (_2!1031 lt!26150)) (_values!2071 (_2!1031 lt!26150)) (mask!5994 (_2!1031 lt!26150)) (extraKeys!1967 (_2!1031 lt!26150)) (zeroValue!2000 (_2!1031 lt!26150)) (minValue!2000 (_2!1031 lt!26150)) #b00000000000000000000000000000000 (defaultEntry!2088 (_2!1031 lt!26150))) lt!26891)))

(declare-fun bm!5046 () Bool)

(assert (=> bm!5046 (= call!5049 call!5052)))

(declare-fun b!63614 () Bool)

(assert (=> b!63614 (= e!41712 (= (apply!68 lt!26891 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2000 (_2!1031 lt!26150))))))

(declare-fun b!63615 () Bool)

(declare-fun e!41706 () Bool)

(assert (=> b!63615 (= e!41706 (= (apply!68 lt!26891 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2000 (_2!1031 lt!26150))))))

(declare-fun b!63616 () Bool)

(assert (=> b!63616 (= e!41702 e!41706)))

(declare-fun res!34795 () Bool)

(assert (=> b!63616 (= res!34795 call!5053)))

(assert (=> b!63616 (=> (not res!34795) (not e!41706))))

(declare-fun b!63617 () Bool)

(assert (=> b!63617 (= e!41707 (validKeyInArray!0 (select (arr!1799 (_keys!3720 (_2!1031 lt!26150))) #b00000000000000000000000000000000)))))

(declare-fun b!63618 () Bool)

(assert (=> b!63618 (= e!41711 (validKeyInArray!0 (select (arr!1799 (_keys!3720 (_2!1031 lt!26150))) #b00000000000000000000000000000000)))))

(declare-fun b!63619 () Bool)

(declare-fun Unit!1747 () Unit!1693)

(assert (=> b!63619 (= e!41704 Unit!1747)))

(declare-fun b!63620 () Bool)

(declare-fun e!41703 () ListLongMap!1373)

(assert (=> b!63620 (= e!41703 call!5051)))

(declare-fun bm!5052 () Bool)

(assert (=> bm!5052 (= call!5052 (getCurrentListMapNoExtraKeys!46 (_keys!3720 (_2!1031 lt!26150)) (_values!2071 (_2!1031 lt!26150)) (mask!5994 (_2!1031 lt!26150)) (extraKeys!1967 (_2!1031 lt!26150)) (zeroValue!2000 (_2!1031 lt!26150)) (minValue!2000 (_2!1031 lt!26150)) #b00000000000000000000000000000000 (defaultEntry!2088 (_2!1031 lt!26150))))))

(declare-fun b!63621 () Bool)

(declare-fun e!41700 () ListLongMap!1373)

(assert (=> b!63621 (= e!41700 call!5055)))

(declare-fun b!63622 () Bool)

(assert (=> b!63622 (= e!41710 e!41702)))

(declare-fun c!8631 () Bool)

(assert (=> b!63622 (= c!8631 (not (= (bvand (extraKeys!1967 (_2!1031 lt!26150)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!63623 () Bool)

(declare-fun c!8627 () Bool)

(assert (=> b!63623 (= c!8627 (and (not (= (bvand (extraKeys!1967 (_2!1031 lt!26150)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1967 (_2!1031 lt!26150)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!63623 (= e!41703 e!41700)))

(declare-fun b!63624 () Bool)

(assert (=> b!63624 (= e!41700 call!5051)))

(declare-fun b!63625 () Bool)

(assert (=> b!63625 (= e!41701 (= (apply!68 lt!26891 (select (arr!1799 (_keys!3720 (_2!1031 lt!26150))) #b00000000000000000000000000000000)) (get!1082 (select (arr!1800 (_values!2071 (_2!1031 lt!26150))) #b00000000000000000000000000000000) (dynLambda!308 (defaultEntry!2088 (_2!1031 lt!26150)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!63625 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2032 (_values!2071 (_2!1031 lt!26150)))))))

(assert (=> b!63625 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2031 (_keys!3720 (_2!1031 lt!26150)))))))

(declare-fun b!63626 () Bool)

(assert (=> b!63626 (= e!41705 e!41703)))

(assert (=> b!63626 (= c!8632 (and (not (= (bvand (extraKeys!1967 (_2!1031 lt!26150)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1967 (_2!1031 lt!26150)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!13231 c!8630) b!63612))

(assert (= (and d!13231 (not c!8630)) b!63626))

(assert (= (and b!63626 c!8632) b!63620))

(assert (= (and b!63626 (not c!8632)) b!63623))

(assert (= (and b!63623 c!8627) b!63624))

(assert (= (and b!63623 (not c!8627)) b!63621))

(assert (= (or b!63624 b!63621) bm!5048))

(assert (= (or b!63620 bm!5048) bm!5046))

(assert (= (or b!63620 b!63624) bm!5051))

(assert (= (or b!63612 bm!5046) bm!5052))

(assert (= (or b!63612 bm!5051) bm!5047))

(assert (= (and d!13231 res!34794) b!63618))

(assert (= (and d!13231 c!8628) b!63608))

(assert (= (and d!13231 (not c!8628)) b!63619))

(assert (= (and d!13231 res!34789) b!63613))

(assert (= (and b!63613 res!34788) b!63617))

(assert (= (and b!63613 (not res!34790)) b!63610))

(assert (= (and b!63610 res!34787) b!63625))

(assert (= (and b!63613 res!34791) b!63607))

(assert (= (and b!63607 c!8629) b!63606))

(assert (= (and b!63607 (not c!8629)) b!63609))

(assert (= (and b!63606 res!34792) b!63614))

(assert (= (or b!63606 b!63609) bm!5050))

(assert (= (and b!63607 res!34793) b!63622))

(assert (= (and b!63622 c!8631) b!63616))

(assert (= (and b!63622 (not c!8631)) b!63611))

(assert (= (and b!63616 res!34795) b!63615))

(assert (= (or b!63616 b!63611) bm!5049))

(declare-fun b_lambda!2843 () Bool)

(assert (=> (not b_lambda!2843) (not b!63625)))

(declare-fun tb!1381 () Bool)

(declare-fun t!4845 () Bool)

(assert (=> (and b!62272 (= (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2088 (_2!1031 lt!26150))) t!4845) tb!1381))

(declare-fun result!2463 () Bool)

(assert (=> tb!1381 (= result!2463 tp_is_empty!2415)))

(assert (=> b!63625 t!4845))

(declare-fun b_and!3907 () Bool)

(assert (= b_and!3903 (and (=> t!4845 result!2463) b_and!3907)))

(declare-fun tb!1383 () Bool)

(declare-fun t!4847 () Bool)

(assert (=> (and b!62266 (= (defaultEntry!2088 newMap!16) (defaultEntry!2088 (_2!1031 lt!26150))) t!4847) tb!1383))

(declare-fun result!2465 () Bool)

(assert (= result!2465 result!2463))

(assert (=> b!63625 t!4847))

(declare-fun b_and!3909 () Bool)

(assert (= b_and!3905 (and (=> t!4847 result!2465) b_and!3909)))

(assert (=> b!63618 m!57215))

(assert (=> b!63618 m!57215))

(assert (=> b!63618 m!57217))

(declare-fun m!58151 () Bool)

(assert (=> b!63608 m!58151))

(declare-fun m!58153 () Bool)

(assert (=> b!63608 m!58153))

(declare-fun m!58155 () Bool)

(assert (=> b!63608 m!58155))

(declare-fun m!58157 () Bool)

(assert (=> b!63608 m!58157))

(declare-fun m!58159 () Bool)

(assert (=> b!63608 m!58159))

(declare-fun m!58161 () Bool)

(assert (=> b!63608 m!58161))

(declare-fun m!58163 () Bool)

(assert (=> b!63608 m!58163))

(declare-fun m!58165 () Bool)

(assert (=> b!63608 m!58165))

(declare-fun m!58167 () Bool)

(assert (=> b!63608 m!58167))

(declare-fun m!58169 () Bool)

(assert (=> b!63608 m!58169))

(declare-fun m!58171 () Bool)

(assert (=> b!63608 m!58171))

(declare-fun m!58173 () Bool)

(assert (=> b!63608 m!58173))

(declare-fun m!58175 () Bool)

(assert (=> b!63608 m!58175))

(declare-fun m!58177 () Bool)

(assert (=> b!63608 m!58177))

(assert (=> b!63608 m!57215))

(assert (=> b!63608 m!58175))

(declare-fun m!58179 () Bool)

(assert (=> b!63608 m!58179))

(assert (=> b!63608 m!58171))

(assert (=> b!63608 m!58157))

(declare-fun m!58181 () Bool)

(assert (=> b!63608 m!58181))

(assert (=> b!63608 m!58165))

(declare-fun m!58183 () Bool)

(assert (=> b!63614 m!58183))

(assert (=> bm!5052 m!58177))

(assert (=> b!63617 m!57215))

(assert (=> b!63617 m!57215))

(assert (=> b!63617 m!57217))

(assert (=> d!13231 m!57675))

(assert (=> b!63625 m!57215))

(declare-fun m!58185 () Bool)

(assert (=> b!63625 m!58185))

(declare-fun m!58187 () Bool)

(assert (=> b!63625 m!58187))

(declare-fun m!58189 () Bool)

(assert (=> b!63625 m!58189))

(assert (=> b!63625 m!57215))

(assert (=> b!63625 m!58189))

(assert (=> b!63625 m!58187))

(declare-fun m!58191 () Bool)

(assert (=> b!63625 m!58191))

(assert (=> b!63610 m!57215))

(assert (=> b!63610 m!57215))

(declare-fun m!58193 () Bool)

(assert (=> b!63610 m!58193))

(declare-fun m!58195 () Bool)

(assert (=> b!63615 m!58195))

(declare-fun m!58197 () Bool)

(assert (=> bm!5047 m!58197))

(declare-fun m!58199 () Bool)

(assert (=> b!63612 m!58199))

(declare-fun m!58201 () Bool)

(assert (=> bm!5050 m!58201))

(declare-fun m!58203 () Bool)

(assert (=> bm!5049 m!58203))

(assert (=> d!12785 d!13231))

(declare-fun d!13233 () Bool)

(declare-fun res!34796 () Bool)

(declare-fun e!41713 () Bool)

(assert (=> d!13233 (=> res!34796 e!41713)))

(assert (=> d!13233 (= res!34796 (and ((_ is Cons!1435) (toList!702 lt!26046)) (= (_1!1030 (h!2018 (toList!702 lt!26046))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!13233 (= (containsKey!130 (toList!702 lt!26046) #b0000000000000000000000000000000000000000000000000000000000000000) e!41713)))

(declare-fun b!63627 () Bool)

(declare-fun e!41714 () Bool)

(assert (=> b!63627 (= e!41713 e!41714)))

(declare-fun res!34797 () Bool)

(assert (=> b!63627 (=> (not res!34797) (not e!41714))))

(assert (=> b!63627 (= res!34797 (and (or (not ((_ is Cons!1435) (toList!702 lt!26046))) (bvsle (_1!1030 (h!2018 (toList!702 lt!26046))) #b0000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1435) (toList!702 lt!26046)) (bvslt (_1!1030 (h!2018 (toList!702 lt!26046))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!63628 () Bool)

(assert (=> b!63628 (= e!41714 (containsKey!130 (t!4833 (toList!702 lt!26046)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!13233 (not res!34796)) b!63627))

(assert (= (and b!63627 res!34797) b!63628))

(declare-fun m!58205 () Bool)

(assert (=> b!63628 m!58205))

(assert (=> d!12815 d!13233))

(declare-fun d!13235 () Bool)

(declare-fun res!34799 () Bool)

(declare-fun e!41715 () Bool)

(assert (=> d!13235 (=> res!34799 e!41715)))

(assert (=> d!13235 (= res!34799 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2031 (_keys!3720 newMap!16))))))

(assert (=> d!13235 (= (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3720 newMap!16) (mask!5994 newMap!16)) e!41715)))

(declare-fun b!63629 () Bool)

(declare-fun e!41717 () Bool)

(assert (=> b!63629 (= e!41715 e!41717)))

(declare-fun c!8633 () Bool)

(assert (=> b!63629 (= c!8633 (validKeyInArray!0 (select (arr!1799 (_keys!3720 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun bm!5053 () Bool)

(declare-fun call!5056 () Bool)

(assert (=> bm!5053 (= call!5056 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (_keys!3720 newMap!16) (mask!5994 newMap!16)))))

(declare-fun b!63630 () Bool)

(declare-fun e!41716 () Bool)

(assert (=> b!63630 (= e!41716 call!5056)))

(declare-fun b!63631 () Bool)

(assert (=> b!63631 (= e!41717 call!5056)))

(declare-fun b!63632 () Bool)

(assert (=> b!63632 (= e!41717 e!41716)))

(declare-fun lt!26905 () (_ BitVec 64))

(assert (=> b!63632 (= lt!26905 (select (arr!1799 (_keys!3720 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(declare-fun lt!26906 () Unit!1693)

(assert (=> b!63632 (= lt!26906 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3720 newMap!16) lt!26905 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (=> b!63632 (arrayContainsKey!0 (_keys!3720 newMap!16) lt!26905 #b00000000000000000000000000000000)))

(declare-fun lt!26904 () Unit!1693)

(assert (=> b!63632 (= lt!26904 lt!26906)))

(declare-fun res!34798 () Bool)

(assert (=> b!63632 (= res!34798 (= (seekEntryOrOpen!0 (select (arr!1799 (_keys!3720 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (_keys!3720 newMap!16) (mask!5994 newMap!16)) (Found!229 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> b!63632 (=> (not res!34798) (not e!41716))))

(assert (= (and d!13235 (not res!34799)) b!63629))

(assert (= (and b!63629 c!8633) b!63632))

(assert (= (and b!63629 (not c!8633)) b!63631))

(assert (= (and b!63632 res!34798) b!63630))

(assert (= (or b!63630 b!63631) bm!5053))

(assert (=> b!63629 m!57211))

(assert (=> b!63629 m!57211))

(assert (=> b!63629 m!57777))

(declare-fun m!58207 () Bool)

(assert (=> bm!5053 m!58207))

(assert (=> b!63632 m!57211))

(declare-fun m!58209 () Bool)

(assert (=> b!63632 m!58209))

(declare-fun m!58211 () Bool)

(assert (=> b!63632 m!58211))

(assert (=> b!63632 m!57211))

(declare-fun m!58213 () Bool)

(assert (=> b!63632 m!58213))

(assert (=> bm!4918 d!13235))

(declare-fun lt!26907 () Bool)

(declare-fun d!13237 () Bool)

(assert (=> d!13237 (= lt!26907 (select (content!68 (toList!702 lt!26281)) (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!41718 () Bool)

(assert (=> d!13237 (= lt!26907 e!41718)))

(declare-fun res!34800 () Bool)

(assert (=> d!13237 (=> (not res!34800) (not e!41718))))

(assert (=> d!13237 (= res!34800 ((_ is Cons!1435) (toList!702 lt!26281)))))

(assert (=> d!13237 (= (contains!693 (toList!702 lt!26281) (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!26907)))

(declare-fun b!63633 () Bool)

(declare-fun e!41719 () Bool)

(assert (=> b!63633 (= e!41718 e!41719)))

(declare-fun res!34801 () Bool)

(assert (=> b!63633 (=> res!34801 e!41719)))

(assert (=> b!63633 (= res!34801 (= (h!2018 (toList!702 lt!26281)) (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!63634 () Bool)

(assert (=> b!63634 (= e!41719 (contains!693 (t!4833 (toList!702 lt!26281)) (ite c!8338 (ite c!8332 (tuple2!2039 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!13237 res!34800) b!63633))

(assert (= (and b!63633 (not res!34801)) b!63634))

(declare-fun m!58215 () Bool)

(assert (=> d!13237 m!58215))

(declare-fun m!58217 () Bool)

(assert (=> d!13237 m!58217))

(declare-fun m!58219 () Bool)

(assert (=> b!63634 m!58219))

(assert (=> b!62757 d!13237))

(declare-fun d!13239 () Bool)

(declare-fun lt!26908 () Bool)

(assert (=> d!13239 (= lt!26908 (select (content!68 (toList!702 lt!26421)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun e!41720 () Bool)

(assert (=> d!13239 (= lt!26908 e!41720)))

(declare-fun res!34802 () Bool)

(assert (=> d!13239 (=> (not res!34802) (not e!41720))))

(assert (=> d!13239 (= res!34802 ((_ is Cons!1435) (toList!702 lt!26421)))))

(assert (=> d!13239 (= (contains!693 (toList!702 lt!26421) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) lt!26908)))

(declare-fun b!63635 () Bool)

(declare-fun e!41721 () Bool)

(assert (=> b!63635 (= e!41720 e!41721)))

(declare-fun res!34803 () Bool)

(assert (=> b!63635 (=> res!34803 e!41721)))

(assert (=> b!63635 (= res!34803 (= (h!2018 (toList!702 lt!26421)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))

(declare-fun b!63636 () Bool)

(assert (=> b!63636 (= e!41721 (contains!693 (t!4833 (toList!702 lt!26421)) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))

(assert (= (and d!13239 res!34802) b!63635))

(assert (= (and b!63635 (not res!34803)) b!63636))

(declare-fun m!58221 () Bool)

(assert (=> d!13239 m!58221))

(declare-fun m!58223 () Bool)

(assert (=> d!13239 m!58223))

(declare-fun m!58225 () Bool)

(assert (=> b!63636 m!58225))

(assert (=> b!62884 d!13239))

(declare-fun d!13241 () Bool)

(assert (=> d!13241 (= (get!1086 (getValueByKey!126 (toList!702 lt!26042) lt!26045)) (v!2423 (getValueByKey!126 (toList!702 lt!26042) lt!26045)))))

(assert (=> d!12721 d!13241))

(declare-fun b!63638 () Bool)

(declare-fun e!41722 () Option!132)

(declare-fun e!41723 () Option!132)

(assert (=> b!63638 (= e!41722 e!41723)))

(declare-fun c!8635 () Bool)

(assert (=> b!63638 (= c!8635 (and ((_ is Cons!1435) (toList!702 lt!26042)) (not (= (_1!1030 (h!2018 (toList!702 lt!26042))) lt!26045))))))

(declare-fun b!63637 () Bool)

(assert (=> b!63637 (= e!41722 (Some!131 (_2!1030 (h!2018 (toList!702 lt!26042)))))))

(declare-fun d!13243 () Bool)

(declare-fun c!8634 () Bool)

(assert (=> d!13243 (= c!8634 (and ((_ is Cons!1435) (toList!702 lt!26042)) (= (_1!1030 (h!2018 (toList!702 lt!26042))) lt!26045)))))

(assert (=> d!13243 (= (getValueByKey!126 (toList!702 lt!26042) lt!26045) e!41722)))

(declare-fun b!63639 () Bool)

(assert (=> b!63639 (= e!41723 (getValueByKey!126 (t!4833 (toList!702 lt!26042)) lt!26045))))

(declare-fun b!63640 () Bool)

(assert (=> b!63640 (= e!41723 None!130)))

(assert (= (and d!13243 c!8634) b!63637))

(assert (= (and d!13243 (not c!8634)) b!63638))

(assert (= (and b!63638 c!8635) b!63639))

(assert (= (and b!63638 (not c!8635)) b!63640))

(declare-fun m!58227 () Bool)

(assert (=> b!63639 m!58227))

(assert (=> d!12721 d!13243))

(declare-fun d!13245 () Bool)

(assert (=> d!13245 (contains!690 (getCurrentListMap!406 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355))))

(declare-fun lt!26911 () Unit!1693)

(declare-fun choose!342 (array!3761 array!3763 (_ BitVec 32) (_ BitVec 32) V!2867 V!2867 (_ BitVec 64) (_ BitVec 32) Int) Unit!1693)

(assert (=> d!13245 (= lt!26911 (choose!342 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)))))

(assert (=> d!13245 (validMask!0 (mask!5994 newMap!16))))

(assert (=> d!13245 (= (lemmaArrayContainsKeyThenInListMap!7 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2088 newMap!16)) lt!26911)))

(declare-fun bs!2787 () Bool)

(assert (= bs!2787 d!13245))

(assert (=> bs!2787 m!56151))

(assert (=> bs!2787 m!56151))

(assert (=> bs!2787 m!56051))

(assert (=> bs!2787 m!56239))

(assert (=> bs!2787 m!56051))

(declare-fun m!58229 () Bool)

(assert (=> bs!2787 m!58229))

(assert (=> bs!2787 m!56299))

(assert (=> b!62794 d!13245))

(assert (=> b!62794 d!12757))

(assert (=> b!62794 d!12759))

(declare-fun d!13247 () Bool)

(declare-fun e!41725 () Bool)

(assert (=> d!13247 e!41725))

(declare-fun res!34804 () Bool)

(assert (=> d!13247 (=> res!34804 e!41725)))

(declare-fun lt!26915 () Bool)

(assert (=> d!13247 (= res!34804 (not lt!26915))))

(declare-fun lt!26914 () Bool)

(assert (=> d!13247 (= lt!26915 lt!26914)))

(declare-fun lt!26912 () Unit!1693)

(declare-fun e!41724 () Unit!1693)

(assert (=> d!13247 (= lt!26912 e!41724)))

(declare-fun c!8636 () Bool)

(assert (=> d!13247 (= c!8636 lt!26914)))

(assert (=> d!13247 (= lt!26914 (containsKey!130 (toList!702 lt!26455) (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!13247 (= (contains!690 lt!26455 (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!26915)))

(declare-fun b!63641 () Bool)

(declare-fun lt!26913 () Unit!1693)

(assert (=> b!63641 (= e!41724 lt!26913)))

(assert (=> b!63641 (= lt!26913 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 lt!26455) (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> b!63641 (isDefined!79 (getValueByKey!126 (toList!702 lt!26455) (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!63642 () Bool)

(declare-fun Unit!1748 () Unit!1693)

(assert (=> b!63642 (= e!41724 Unit!1748)))

(declare-fun b!63643 () Bool)

(assert (=> b!63643 (= e!41725 (isDefined!79 (getValueByKey!126 (toList!702 lt!26455) (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!13247 c!8636) b!63641))

(assert (= (and d!13247 (not c!8636)) b!63642))

(assert (= (and d!13247 (not res!34804)) b!63643))

(declare-fun m!58231 () Bool)

(assert (=> d!13247 m!58231))

(declare-fun m!58233 () Bool)

(assert (=> b!63641 m!58233))

(assert (=> b!63641 m!56821))

(assert (=> b!63641 m!56821))

(declare-fun m!58235 () Bool)

(assert (=> b!63641 m!58235))

(assert (=> b!63643 m!56821))

(assert (=> b!63643 m!56821))

(assert (=> b!63643 m!58235))

(assert (=> d!12825 d!13247))

(declare-fun b!63645 () Bool)

(declare-fun e!41726 () Option!132)

(declare-fun e!41727 () Option!132)

(assert (=> b!63645 (= e!41726 e!41727)))

(declare-fun c!8638 () Bool)

(assert (=> b!63645 (= c!8638 (and ((_ is Cons!1435) lt!26454) (not (= (_1!1030 (h!2018 lt!26454)) (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!63644 () Bool)

(assert (=> b!63644 (= e!41726 (Some!131 (_2!1030 (h!2018 lt!26454))))))

(declare-fun c!8637 () Bool)

(declare-fun d!13249 () Bool)

(assert (=> d!13249 (= c!8637 (and ((_ is Cons!1435) lt!26454) (= (_1!1030 (h!2018 lt!26454)) (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!13249 (= (getValueByKey!126 lt!26454 (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!41726)))

(declare-fun b!63646 () Bool)

(assert (=> b!63646 (= e!41727 (getValueByKey!126 (t!4833 lt!26454) (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!63647 () Bool)

(assert (=> b!63647 (= e!41727 None!130)))

(assert (= (and d!13249 c!8637) b!63644))

(assert (= (and d!13249 (not c!8637)) b!63645))

(assert (= (and b!63645 c!8638) b!63646))

(assert (= (and b!63645 (not c!8638)) b!63647))

(declare-fun m!58237 () Bool)

(assert (=> b!63646 m!58237))

(assert (=> d!12825 d!13249))

(declare-fun d!13251 () Bool)

(assert (=> d!13251 (= (getValueByKey!126 lt!26454 (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!131 (_2!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!26916 () Unit!1693)

(assert (=> d!13251 (= lt!26916 (choose!340 lt!26454 (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!41728 () Bool)

(assert (=> d!13251 e!41728))

(declare-fun res!34805 () Bool)

(assert (=> d!13251 (=> (not res!34805) (not e!41728))))

(assert (=> d!13251 (= res!34805 (isStrictlySorted!286 lt!26454))))

(assert (=> d!13251 (= (lemmaContainsTupThenGetReturnValue!43 lt!26454 (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!26916)))

(declare-fun b!63648 () Bool)

(declare-fun res!34806 () Bool)

(assert (=> b!63648 (=> (not res!34806) (not e!41728))))

(assert (=> b!63648 (= res!34806 (containsKey!130 lt!26454 (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!63649 () Bool)

(assert (=> b!63649 (= e!41728 (contains!693 lt!26454 (tuple2!2039 (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!13251 res!34805) b!63648))

(assert (= (and b!63648 res!34806) b!63649))

(assert (=> d!13251 m!56815))

(declare-fun m!58239 () Bool)

(assert (=> d!13251 m!58239))

(declare-fun m!58241 () Bool)

(assert (=> d!13251 m!58241))

(declare-fun m!58243 () Bool)

(assert (=> b!63648 m!58243))

(declare-fun m!58245 () Bool)

(assert (=> b!63649 m!58245))

(assert (=> d!12825 d!13251))

(declare-fun b!63650 () Bool)

(declare-fun e!41732 () List!1439)

(declare-fun call!5059 () List!1439)

(assert (=> b!63650 (= e!41732 call!5059)))

(declare-fun c!8639 () Bool)

(declare-fun e!41729 () List!1439)

(declare-fun c!8640 () Bool)

(declare-fun b!63651 () Bool)

(assert (=> b!63651 (= e!41729 (ite c!8639 (t!4833 (toList!702 call!4898)) (ite c!8640 (Cons!1435 (h!2018 (toList!702 call!4898)) (t!4833 (toList!702 call!4898))) Nil!1436)))))

(declare-fun bm!5054 () Bool)

(declare-fun call!5058 () List!1439)

(declare-fun call!5057 () List!1439)

(assert (=> bm!5054 (= call!5058 call!5057)))

(declare-fun b!63652 () Bool)

(declare-fun e!41730 () List!1439)

(assert (=> b!63652 (= e!41730 call!5057)))

(declare-fun b!63653 () Bool)

(assert (=> b!63653 (= e!41729 (insertStrictlySorted!46 (t!4833 (toList!702 call!4898)) (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!63654 () Bool)

(declare-fun res!34808 () Bool)

(declare-fun e!41733 () Bool)

(assert (=> b!63654 (=> (not res!34808) (not e!41733))))

(declare-fun lt!26917 () List!1439)

(assert (=> b!63654 (= res!34808 (containsKey!130 lt!26917 (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!63655 () Bool)

(assert (=> b!63655 (= e!41733 (contains!693 lt!26917 (tuple2!2039 (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!63656 () Bool)

(assert (=> b!63656 (= e!41732 call!5059)))

(declare-fun d!13253 () Bool)

(assert (=> d!13253 e!41733))

(declare-fun res!34807 () Bool)

(assert (=> d!13253 (=> (not res!34807) (not e!41733))))

(assert (=> d!13253 (= res!34807 (isStrictlySorted!286 lt!26917))))

(assert (=> d!13253 (= lt!26917 e!41730)))

(declare-fun c!8641 () Bool)

(assert (=> d!13253 (= c!8641 (and ((_ is Cons!1435) (toList!702 call!4898)) (bvslt (_1!1030 (h!2018 (toList!702 call!4898))) (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!13253 (isStrictlySorted!286 (toList!702 call!4898))))

(assert (=> d!13253 (= (insertStrictlySorted!46 (toList!702 call!4898) (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!26917)))

(declare-fun bm!5055 () Bool)

(assert (=> bm!5055 (= call!5057 ($colon$colon!62 e!41729 (ite c!8641 (h!2018 (toList!702 call!4898)) (tuple2!2039 (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun c!8642 () Bool)

(assert (=> bm!5055 (= c!8642 c!8641)))

(declare-fun b!63657 () Bool)

(declare-fun e!41731 () List!1439)

(assert (=> b!63657 (= e!41730 e!41731)))

(assert (=> b!63657 (= c!8639 (and ((_ is Cons!1435) (toList!702 call!4898)) (= (_1!1030 (h!2018 (toList!702 call!4898))) (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!63658 () Bool)

(assert (=> b!63658 (= c!8640 (and ((_ is Cons!1435) (toList!702 call!4898)) (bvsgt (_1!1030 (h!2018 (toList!702 call!4898))) (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!63658 (= e!41731 e!41732)))

(declare-fun bm!5056 () Bool)

(assert (=> bm!5056 (= call!5059 call!5058)))

(declare-fun b!63659 () Bool)

(assert (=> b!63659 (= e!41731 call!5058)))

(assert (= (and d!13253 c!8641) b!63652))

(assert (= (and d!13253 (not c!8641)) b!63657))

(assert (= (and b!63657 c!8639) b!63659))

(assert (= (and b!63657 (not c!8639)) b!63658))

(assert (= (and b!63658 c!8640) b!63656))

(assert (= (and b!63658 (not c!8640)) b!63650))

(assert (= (or b!63656 b!63650) bm!5056))

(assert (= (or b!63659 bm!5056) bm!5054))

(assert (= (or b!63652 bm!5054) bm!5055))

(assert (= (and bm!5055 c!8642) b!63653))

(assert (= (and bm!5055 (not c!8642)) b!63651))

(assert (= (and d!13253 res!34807) b!63654))

(assert (= (and b!63654 res!34808) b!63655))

(declare-fun m!58247 () Bool)

(assert (=> b!63653 m!58247))

(declare-fun m!58249 () Bool)

(assert (=> bm!5055 m!58249))

(declare-fun m!58251 () Bool)

(assert (=> b!63654 m!58251))

(declare-fun m!58253 () Bool)

(assert (=> b!63655 m!58253))

(declare-fun m!58255 () Bool)

(assert (=> d!13253 m!58255))

(declare-fun m!58257 () Bool)

(assert (=> d!13253 m!58257))

(assert (=> d!12825 d!13253))

(declare-fun d!13255 () Bool)

(declare-fun res!34809 () Bool)

(declare-fun e!41736 () Bool)

(assert (=> d!13255 (=> res!34809 e!41736)))

(assert (=> d!13255 (= res!34809 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2031 (_keys!3720 newMap!16))))))

(assert (=> d!13255 (= (arrayNoDuplicates!0 (_keys!3720 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!8411 (Cons!1436 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000) Nil!1437) Nil!1437)) e!41736)))

(declare-fun b!63660 () Bool)

(declare-fun e!41734 () Bool)

(declare-fun call!5060 () Bool)

(assert (=> b!63660 (= e!41734 call!5060)))

(declare-fun b!63661 () Bool)

(declare-fun e!41737 () Bool)

(assert (=> b!63661 (= e!41736 e!41737)))

(declare-fun res!34810 () Bool)

(assert (=> b!63661 (=> (not res!34810) (not e!41737))))

(declare-fun e!41735 () Bool)

(assert (=> b!63661 (= res!34810 (not e!41735))))

(declare-fun res!34811 () Bool)

(assert (=> b!63661 (=> (not res!34811) (not e!41735))))

(assert (=> b!63661 (= res!34811 (validKeyInArray!0 (select (arr!1799 (_keys!3720 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!63662 () Bool)

(assert (=> b!63662 (= e!41737 e!41734)))

(declare-fun c!8643 () Bool)

(assert (=> b!63662 (= c!8643 (validKeyInArray!0 (select (arr!1799 (_keys!3720 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!63663 () Bool)

(assert (=> b!63663 (= e!41735 (contains!692 (ite c!8411 (Cons!1436 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000) Nil!1437) Nil!1437) (select (arr!1799 (_keys!3720 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun bm!5057 () Bool)

(assert (=> bm!5057 (= call!5060 (arrayNoDuplicates!0 (_keys!3720 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!8643 (Cons!1436 (select (arr!1799 (_keys!3720 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (ite c!8411 (Cons!1436 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000) Nil!1437) Nil!1437)) (ite c!8411 (Cons!1436 (select (arr!1799 (_keys!3720 newMap!16)) #b00000000000000000000000000000000) Nil!1437) Nil!1437))))))

(declare-fun b!63664 () Bool)

(assert (=> b!63664 (= e!41734 call!5060)))

(assert (= (and d!13255 (not res!34809)) b!63661))

(assert (= (and b!63661 res!34811) b!63663))

(assert (= (and b!63661 res!34810) b!63662))

(assert (= (and b!63662 c!8643) b!63660))

(assert (= (and b!63662 (not c!8643)) b!63664))

(assert (= (or b!63660 b!63664) bm!5057))

(assert (=> b!63661 m!57211))

(assert (=> b!63661 m!57211))

(assert (=> b!63661 m!57777))

(assert (=> b!63662 m!57211))

(assert (=> b!63662 m!57211))

(assert (=> b!63662 m!57777))

(assert (=> b!63663 m!57211))

(assert (=> b!63663 m!57211))

(declare-fun m!58259 () Bool)

(assert (=> b!63663 m!58259))

(assert (=> bm!5057 m!57211))

(declare-fun m!58261 () Bool)

(assert (=> bm!5057 m!58261))

(assert (=> bm!4947 d!13255))

(declare-fun d!13257 () Bool)

(assert (=> d!13257 (= (get!1086 (getValueByKey!126 (toList!702 lt!26048) lt!26055)) (v!2423 (getValueByKey!126 (toList!702 lt!26048) lt!26055)))))

(assert (=> d!12733 d!13257))

(declare-fun b!63666 () Bool)

(declare-fun e!41738 () Option!132)

(declare-fun e!41739 () Option!132)

(assert (=> b!63666 (= e!41738 e!41739)))

(declare-fun c!8645 () Bool)

(assert (=> b!63666 (= c!8645 (and ((_ is Cons!1435) (toList!702 lt!26048)) (not (= (_1!1030 (h!2018 (toList!702 lt!26048))) lt!26055))))))

(declare-fun b!63665 () Bool)

(assert (=> b!63665 (= e!41738 (Some!131 (_2!1030 (h!2018 (toList!702 lt!26048)))))))

(declare-fun d!13259 () Bool)

(declare-fun c!8644 () Bool)

(assert (=> d!13259 (= c!8644 (and ((_ is Cons!1435) (toList!702 lt!26048)) (= (_1!1030 (h!2018 (toList!702 lt!26048))) lt!26055)))))

(assert (=> d!13259 (= (getValueByKey!126 (toList!702 lt!26048) lt!26055) e!41738)))

(declare-fun b!63667 () Bool)

(assert (=> b!63667 (= e!41739 (getValueByKey!126 (t!4833 (toList!702 lt!26048)) lt!26055))))

(declare-fun b!63668 () Bool)

(assert (=> b!63668 (= e!41739 None!130)))

(assert (= (and d!13259 c!8644) b!63665))

(assert (= (and d!13259 (not c!8644)) b!63666))

(assert (= (and b!63666 c!8645) b!63667))

(assert (= (and b!63666 (not c!8645)) b!63668))

(declare-fun m!58263 () Bool)

(assert (=> b!63667 m!58263))

(assert (=> d!12733 d!13259))

(assert (=> d!12705 d!12795))

(declare-fun b!63685 () Bool)

(declare-fun e!41749 () Bool)

(declare-fun e!41751 () Bool)

(assert (=> b!63685 (= e!41749 e!41751)))

(declare-fun c!8651 () Bool)

(declare-fun lt!26920 () SeekEntryResult!229)

(assert (=> b!63685 (= c!8651 ((_ is MissingVacant!229) lt!26920))))

(declare-fun b!63686 () Bool)

(declare-fun res!34823 () Bool)

(declare-fun e!41750 () Bool)

(assert (=> b!63686 (=> (not res!34823) (not e!41750))))

(declare-fun call!5066 () Bool)

(assert (=> b!63686 (= res!34823 call!5066)))

(assert (=> b!63686 (= e!41751 e!41750)))

(declare-fun d!13261 () Bool)

(assert (=> d!13261 e!41749))

(declare-fun c!8650 () Bool)

(assert (=> d!13261 (= c!8650 ((_ is MissingZero!229) lt!26920))))

(assert (=> d!13261 (= lt!26920 (seekEntryOrOpen!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (_keys!3720 newMap!16) (mask!5994 newMap!16)))))

(assert (=> d!13261 true))

(declare-fun _$34!780 () Unit!1693)

(assert (=> d!13261 (= (choose!330 (_keys!3720 newMap!16) (_values!2071 newMap!16) (mask!5994 newMap!16) (extraKeys!1967 newMap!16) (zeroValue!2000 newMap!16) (minValue!2000 newMap!16) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (defaultEntry!2088 newMap!16)) _$34!780)))

(declare-fun b!63687 () Bool)

(declare-fun e!41748 () Bool)

(assert (=> b!63687 (= e!41749 e!41748)))

(declare-fun res!34822 () Bool)

(assert (=> b!63687 (= res!34822 call!5066)))

(assert (=> b!63687 (=> (not res!34822) (not e!41748))))

(declare-fun b!63688 () Bool)

(declare-fun res!34820 () Bool)

(assert (=> b!63688 (= res!34820 (= (select (arr!1799 (_keys!3720 newMap!16)) (index!3041 lt!26920)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63688 (=> (not res!34820) (not e!41748))))

(declare-fun b!63689 () Bool)

(declare-fun call!5065 () Bool)

(assert (=> b!63689 (= e!41750 (not call!5065))))

(declare-fun b!63690 () Bool)

(assert (=> b!63690 (= e!41748 (not call!5065))))

(declare-fun bm!5062 () Bool)

(assert (=> bm!5062 (= call!5065 (arrayContainsKey!0 (_keys!3720 newMap!16) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!63691 () Bool)

(declare-fun res!34821 () Bool)

(assert (=> b!63691 (=> (not res!34821) (not e!41750))))

(assert (=> b!63691 (= res!34821 (= (select (arr!1799 (_keys!3720 newMap!16)) (index!3044 lt!26920)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!5063 () Bool)

(assert (=> bm!5063 (= call!5066 (inRange!0 (ite c!8650 (index!3041 lt!26920) (index!3044 lt!26920)) (mask!5994 newMap!16)))))

(declare-fun b!63692 () Bool)

(assert (=> b!63692 (= e!41751 ((_ is Undefined!229) lt!26920))))

(assert (= (and d!13261 c!8650) b!63687))

(assert (= (and d!13261 (not c!8650)) b!63685))

(assert (= (and b!63687 res!34822) b!63688))

(assert (= (and b!63688 res!34820) b!63690))

(assert (= (and b!63685 c!8651) b!63686))

(assert (= (and b!63685 (not c!8651)) b!63692))

(assert (= (and b!63686 res!34823) b!63691))

(assert (= (and b!63691 res!34821) b!63689))

(assert (= (or b!63687 b!63686) bm!5063))

(assert (= (or b!63690 b!63689) bm!5062))

(declare-fun m!58265 () Bool)

(assert (=> b!63688 m!58265))

(assert (=> d!13261 m!56051))

(assert (=> d!13261 m!56231))

(declare-fun m!58267 () Bool)

(assert (=> b!63691 m!58267))

(declare-fun m!58269 () Bool)

(assert (=> bm!5063 m!58269))

(assert (=> bm!5062 m!56051))

(assert (=> bm!5062 m!56267))

(assert (=> d!12705 d!13261))

(assert (=> d!12705 d!12901))

(assert (=> b!62890 d!13055))

(assert (=> b!62890 d!13057))

(declare-fun d!13263 () Bool)

(declare-fun res!34825 () Bool)

(declare-fun e!41752 () Bool)

(assert (=> d!13263 (=> res!34825 e!41752)))

(assert (=> d!13263 (= res!34825 (bvsge #b00000000000000000000000000000000 (size!2031 (_keys!3720 (v!2419 (underlying!233 thiss!992))))))))

(assert (=> d!13263 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3720 (v!2419 (underlying!233 thiss!992))) (mask!5994 (v!2419 (underlying!233 thiss!992)))) e!41752)))

(declare-fun b!63693 () Bool)

(declare-fun e!41754 () Bool)

(assert (=> b!63693 (= e!41752 e!41754)))

(declare-fun c!8652 () Bool)

(assert (=> b!63693 (= c!8652 (validKeyInArray!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun bm!5064 () Bool)

(declare-fun call!5067 () Bool)

(assert (=> bm!5064 (= call!5067 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3720 (v!2419 (underlying!233 thiss!992))) (mask!5994 (v!2419 (underlying!233 thiss!992)))))))

(declare-fun b!63694 () Bool)

(declare-fun e!41753 () Bool)

(assert (=> b!63694 (= e!41753 call!5067)))

(declare-fun b!63695 () Bool)

(assert (=> b!63695 (= e!41754 call!5067)))

(declare-fun b!63696 () Bool)

(assert (=> b!63696 (= e!41754 e!41753)))

(declare-fun lt!26922 () (_ BitVec 64))

(assert (=> b!63696 (= lt!26922 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) #b00000000000000000000000000000000))))

(declare-fun lt!26923 () Unit!1693)

(assert (=> b!63696 (= lt!26923 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3720 (v!2419 (underlying!233 thiss!992))) lt!26922 #b00000000000000000000000000000000))))

(assert (=> b!63696 (arrayContainsKey!0 (_keys!3720 (v!2419 (underlying!233 thiss!992))) lt!26922 #b00000000000000000000000000000000)))

(declare-fun lt!26921 () Unit!1693)

(assert (=> b!63696 (= lt!26921 lt!26923)))

(declare-fun res!34824 () Bool)

(assert (=> b!63696 (= res!34824 (= (seekEntryOrOpen!0 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) #b00000000000000000000000000000000) (_keys!3720 (v!2419 (underlying!233 thiss!992))) (mask!5994 (v!2419 (underlying!233 thiss!992)))) (Found!229 #b00000000000000000000000000000000)))))

(assert (=> b!63696 (=> (not res!34824) (not e!41753))))

(assert (= (and d!13263 (not res!34825)) b!63693))

(assert (= (and b!63693 c!8652) b!63696))

(assert (= (and b!63693 (not c!8652)) b!63695))

(assert (= (and b!63696 res!34824) b!63694))

(assert (= (or b!63694 b!63695) bm!5064))

(assert (=> b!63693 m!57123))

(assert (=> b!63693 m!57123))

(assert (=> b!63693 m!57125))

(declare-fun m!58271 () Bool)

(assert (=> bm!5064 m!58271))

(assert (=> b!63696 m!57123))

(declare-fun m!58273 () Bool)

(assert (=> b!63696 m!58273))

(declare-fun m!58275 () Bool)

(assert (=> b!63696 m!58275))

(assert (=> b!63696 m!57123))

(declare-fun m!58277 () Bool)

(assert (=> b!63696 m!58277))

(assert (=> b!62923 d!13263))

(assert (=> b!62887 d!13061))

(assert (=> b!62887 d!12845))

(declare-fun d!13265 () Bool)

(assert (not d!13265))

(assert (=> b!62882 d!13265))

(declare-fun d!13267 () Bool)

(declare-fun e!41756 () Bool)

(assert (=> d!13267 e!41756))

(declare-fun res!34826 () Bool)

(assert (=> d!13267 (=> res!34826 e!41756)))

(declare-fun lt!26927 () Bool)

(assert (=> d!13267 (= res!34826 (not lt!26927))))

(declare-fun lt!26926 () Bool)

(assert (=> d!13267 (= lt!26927 lt!26926)))

(declare-fun lt!26924 () Unit!1693)

(declare-fun e!41755 () Unit!1693)

(assert (=> d!13267 (= lt!26924 e!41755)))

(declare-fun c!8653 () Bool)

(assert (=> d!13267 (= c!8653 lt!26926)))

(assert (=> d!13267 (= lt!26926 (containsKey!130 (toList!702 lt!26219) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!13267 (= (contains!690 lt!26219 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!26927)))

(declare-fun b!63697 () Bool)

(declare-fun lt!26925 () Unit!1693)

(assert (=> b!63697 (= e!41755 lt!26925)))

(assert (=> b!63697 (= lt!26925 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 lt!26219) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!63697 (isDefined!79 (getValueByKey!126 (toList!702 lt!26219) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!63698 () Bool)

(declare-fun Unit!1749 () Unit!1693)

(assert (=> b!63698 (= e!41755 Unit!1749)))

(declare-fun b!63699 () Bool)

(assert (=> b!63699 (= e!41756 (isDefined!79 (getValueByKey!126 (toList!702 lt!26219) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!13267 c!8653) b!63697))

(assert (= (and d!13267 (not c!8653)) b!63698))

(assert (= (and d!13267 (not res!34826)) b!63699))

(assert (=> d!13267 m!56139))

(declare-fun m!58279 () Bool)

(assert (=> d!13267 m!58279))

(assert (=> b!63697 m!56139))

(declare-fun m!58281 () Bool)

(assert (=> b!63697 m!58281))

(assert (=> b!63697 m!56139))

(declare-fun m!58283 () Bool)

(assert (=> b!63697 m!58283))

(assert (=> b!63697 m!58283))

(declare-fun m!58285 () Bool)

(assert (=> b!63697 m!58285))

(assert (=> b!63699 m!56139))

(assert (=> b!63699 m!58283))

(assert (=> b!63699 m!58283))

(assert (=> b!63699 m!58285))

(assert (=> b!62667 d!13267))

(declare-fun d!13269 () Bool)

(declare-fun e!41757 () Bool)

(assert (=> d!13269 e!41757))

(declare-fun res!34827 () Bool)

(assert (=> d!13269 (=> (not res!34827) (not e!41757))))

(declare-fun lt!26931 () ListLongMap!1373)

(assert (=> d!13269 (= res!34827 (contains!690 lt!26931 (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))

(declare-fun lt!26930 () List!1439)

(assert (=> d!13269 (= lt!26931 (ListLongMap!1374 lt!26930))))

(declare-fun lt!26929 () Unit!1693)

(declare-fun lt!26928 () Unit!1693)

(assert (=> d!13269 (= lt!26929 lt!26928)))

(assert (=> d!13269 (= (getValueByKey!126 lt!26930 (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))) (Some!131 (_2!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))

(assert (=> d!13269 (= lt!26928 (lemmaContainsTupThenGetReturnValue!43 lt!26930 (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))) (_2!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))

(assert (=> d!13269 (= lt!26930 (insertStrictlySorted!46 (toList!702 call!4963) (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))) (_2!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))))))

(assert (=> d!13269 (= (+!83 call!4963 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))) lt!26931)))

(declare-fun b!63700 () Bool)

(declare-fun res!34828 () Bool)

(assert (=> b!63700 (=> (not res!34828) (not e!41757))))

(assert (=> b!63700 (= res!34828 (= (getValueByKey!126 (toList!702 lt!26931) (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16)))) (Some!131 (_2!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))))

(declare-fun b!63701 () Bool)

(assert (=> b!63701 (= e!41757 (contains!693 (toList!702 lt!26931) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2000 newMap!16))))))

(assert (= (and d!13269 res!34827) b!63700))

(assert (= (and b!63700 res!34828) b!63701))

(declare-fun m!58287 () Bool)

(assert (=> d!13269 m!58287))

(declare-fun m!58289 () Bool)

(assert (=> d!13269 m!58289))

(declare-fun m!58291 () Bool)

(assert (=> d!13269 m!58291))

(declare-fun m!58293 () Bool)

(assert (=> d!13269 m!58293))

(declare-fun m!58295 () Bool)

(assert (=> b!63700 m!58295))

(declare-fun m!58297 () Bool)

(assert (=> b!63701 m!58297))

(assert (=> b!62902 d!13269))

(declare-fun d!13271 () Bool)

(assert (=> d!13271 (= (content!67 Nil!1437) ((as const (Array (_ BitVec 64) Bool)) false))))

(assert (=> d!12809 d!13271))

(declare-fun d!13273 () Bool)

(declare-fun e!41759 () Bool)

(assert (=> d!13273 e!41759))

(declare-fun res!34829 () Bool)

(assert (=> d!13273 (=> res!34829 e!41759)))

(declare-fun lt!26935 () Bool)

(assert (=> d!13273 (= res!34829 (not lt!26935))))

(declare-fun lt!26934 () Bool)

(assert (=> d!13273 (= lt!26935 lt!26934)))

(declare-fun lt!26932 () Unit!1693)

(declare-fun e!41758 () Unit!1693)

(assert (=> d!13273 (= lt!26932 e!41758)))

(declare-fun c!8654 () Bool)

(assert (=> d!13273 (= c!8654 lt!26934)))

(assert (=> d!13273 (= lt!26934 (containsKey!130 (toList!702 lt!26439) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!13273 (= (contains!690 lt!26439 #b1000000000000000000000000000000000000000000000000000000000000000) lt!26935)))

(declare-fun b!63702 () Bool)

(declare-fun lt!26933 () Unit!1693)

(assert (=> b!63702 (= e!41758 lt!26933)))

(assert (=> b!63702 (= lt!26933 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 lt!26439) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63702 (isDefined!79 (getValueByKey!126 (toList!702 lt!26439) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63703 () Bool)

(declare-fun Unit!1750 () Unit!1693)

(assert (=> b!63703 (= e!41758 Unit!1750)))

(declare-fun b!63704 () Bool)

(assert (=> b!63704 (= e!41759 (isDefined!79 (getValueByKey!126 (toList!702 lt!26439) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!13273 c!8654) b!63702))

(assert (= (and d!13273 (not c!8654)) b!63703))

(assert (= (and d!13273 (not res!34829)) b!63704))

(declare-fun m!58299 () Bool)

(assert (=> d!13273 m!58299))

(declare-fun m!58301 () Bool)

(assert (=> b!63702 m!58301))

(assert (=> b!63702 m!57677))

(assert (=> b!63702 m!57677))

(declare-fun m!58303 () Bool)

(assert (=> b!63702 m!58303))

(assert (=> b!63704 m!57677))

(assert (=> b!63704 m!57677))

(assert (=> b!63704 m!58303))

(assert (=> bm!4962 d!13273))

(declare-fun d!13275 () Bool)

(assert (=> d!13275 (= (apply!68 (+!83 lt!26398 (tuple2!2039 lt!26413 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))) lt!26401) (get!1086 (getValueByKey!126 (toList!702 (+!83 lt!26398 (tuple2!2039 lt!26413 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))) lt!26401)))))

(declare-fun bs!2788 () Bool)

(assert (= bs!2788 d!13275))

(declare-fun m!58305 () Bool)

(assert (=> bs!2788 m!58305))

(assert (=> bs!2788 m!58305))

(declare-fun m!58307 () Bool)

(assert (=> bs!2788 m!58307))

(assert (=> b!62858 d!13275))

(declare-fun d!13277 () Bool)

(declare-fun e!41760 () Bool)

(assert (=> d!13277 e!41760))

(declare-fun res!34830 () Bool)

(assert (=> d!13277 (=> (not res!34830) (not e!41760))))

(declare-fun lt!26939 () ListLongMap!1373)

(assert (=> d!13277 (= res!34830 (contains!690 lt!26939 (_1!1030 (tuple2!2039 lt!26413 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))))))

(declare-fun lt!26938 () List!1439)

(assert (=> d!13277 (= lt!26939 (ListLongMap!1374 lt!26938))))

(declare-fun lt!26937 () Unit!1693)

(declare-fun lt!26936 () Unit!1693)

(assert (=> d!13277 (= lt!26937 lt!26936)))

(assert (=> d!13277 (= (getValueByKey!126 lt!26938 (_1!1030 (tuple2!2039 lt!26413 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))) (Some!131 (_2!1030 (tuple2!2039 lt!26413 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))))))

(assert (=> d!13277 (= lt!26936 (lemmaContainsTupThenGetReturnValue!43 lt!26938 (_1!1030 (tuple2!2039 lt!26413 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))) (_2!1030 (tuple2!2039 lt!26413 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))))))

(assert (=> d!13277 (= lt!26938 (insertStrictlySorted!46 (toList!702 lt!26398) (_1!1030 (tuple2!2039 lt!26413 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))) (_2!1030 (tuple2!2039 lt!26413 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))))))

(assert (=> d!13277 (= (+!83 lt!26398 (tuple2!2039 lt!26413 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))) lt!26939)))

(declare-fun b!63705 () Bool)

(declare-fun res!34831 () Bool)

(assert (=> b!63705 (=> (not res!34831) (not e!41760))))

(assert (=> b!63705 (= res!34831 (= (getValueByKey!126 (toList!702 lt!26939) (_1!1030 (tuple2!2039 lt!26413 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))) (Some!131 (_2!1030 (tuple2!2039 lt!26413 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))))))))

(declare-fun b!63706 () Bool)

(assert (=> b!63706 (= e!41760 (contains!693 (toList!702 lt!26939) (tuple2!2039 lt!26413 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))))))

(assert (= (and d!13277 res!34830) b!63705))

(assert (= (and b!63705 res!34831) b!63706))

(declare-fun m!58309 () Bool)

(assert (=> d!13277 m!58309))

(declare-fun m!58311 () Bool)

(assert (=> d!13277 m!58311))

(declare-fun m!58313 () Bool)

(assert (=> d!13277 m!58313))

(declare-fun m!58315 () Bool)

(assert (=> d!13277 m!58315))

(declare-fun m!58317 () Bool)

(assert (=> b!63705 m!58317))

(declare-fun m!58319 () Bool)

(assert (=> b!63706 m!58319))

(assert (=> b!62858 d!13277))

(declare-fun d!13279 () Bool)

(assert (=> d!13279 (= (apply!68 (+!83 lt!26398 (tuple2!2039 lt!26413 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))) lt!26401) (apply!68 lt!26398 lt!26401))))

(declare-fun lt!26940 () Unit!1693)

(assert (=> d!13279 (= lt!26940 (choose!331 lt!26398 lt!26413 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)) lt!26401))))

(declare-fun e!41761 () Bool)

(assert (=> d!13279 e!41761))

(declare-fun res!34832 () Bool)

(assert (=> d!13279 (=> (not res!34832) (not e!41761))))

(assert (=> d!13279 (= res!34832 (contains!690 lt!26398 lt!26401))))

(assert (=> d!13279 (= (addApplyDifferent!44 lt!26398 lt!26413 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)) lt!26401) lt!26940)))

(declare-fun b!63707 () Bool)

(assert (=> b!63707 (= e!41761 (not (= lt!26401 lt!26413)))))

(assert (= (and d!13279 res!34832) b!63707))

(declare-fun m!58321 () Bool)

(assert (=> d!13279 m!58321))

(assert (=> d!13279 m!56691))

(assert (=> d!13279 m!56695))

(assert (=> d!13279 m!56671))

(assert (=> d!13279 m!56691))

(declare-fun m!58323 () Bool)

(assert (=> d!13279 m!58323))

(assert (=> b!62858 d!13279))

(declare-fun d!13281 () Bool)

(assert (=> d!13281 (= (apply!68 (+!83 lt!26404 (tuple2!2039 lt!26414 (zeroValue!2000 newMap!16))) lt!26411) (get!1086 (getValueByKey!126 (toList!702 (+!83 lt!26404 (tuple2!2039 lt!26414 (zeroValue!2000 newMap!16)))) lt!26411)))))

(declare-fun bs!2789 () Bool)

(assert (= bs!2789 d!13281))

(declare-fun m!58325 () Bool)

(assert (=> bs!2789 m!58325))

(assert (=> bs!2789 m!58325))

(declare-fun m!58327 () Bool)

(assert (=> bs!2789 m!58327))

(assert (=> b!62858 d!13281))

(declare-fun d!13283 () Bool)

(assert (=> d!13283 (= (apply!68 lt!26403 lt!26407) (get!1086 (getValueByKey!126 (toList!702 lt!26403) lt!26407)))))

(declare-fun bs!2790 () Bool)

(assert (= bs!2790 d!13283))

(declare-fun m!58329 () Bool)

(assert (=> bs!2790 m!58329))

(assert (=> bs!2790 m!58329))

(declare-fun m!58331 () Bool)

(assert (=> bs!2790 m!58331))

(assert (=> b!62858 d!13283))

(declare-fun d!13285 () Bool)

(declare-fun e!41763 () Bool)

(assert (=> d!13285 e!41763))

(declare-fun res!34833 () Bool)

(assert (=> d!13285 (=> res!34833 e!41763)))

(declare-fun lt!26944 () Bool)

(assert (=> d!13285 (= res!34833 (not lt!26944))))

(declare-fun lt!26943 () Bool)

(assert (=> d!13285 (= lt!26944 lt!26943)))

(declare-fun lt!26941 () Unit!1693)

(declare-fun e!41762 () Unit!1693)

(assert (=> d!13285 (= lt!26941 e!41762)))

(declare-fun c!8655 () Bool)

(assert (=> d!13285 (= c!8655 lt!26943)))

(assert (=> d!13285 (= lt!26943 (containsKey!130 (toList!702 (+!83 lt!26400 (tuple2!2039 lt!26397 (zeroValue!2000 newMap!16)))) lt!26406))))

(assert (=> d!13285 (= (contains!690 (+!83 lt!26400 (tuple2!2039 lt!26397 (zeroValue!2000 newMap!16))) lt!26406) lt!26944)))

(declare-fun b!63708 () Bool)

(declare-fun lt!26942 () Unit!1693)

(assert (=> b!63708 (= e!41762 lt!26942)))

(assert (=> b!63708 (= lt!26942 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 (+!83 lt!26400 (tuple2!2039 lt!26397 (zeroValue!2000 newMap!16)))) lt!26406))))

(assert (=> b!63708 (isDefined!79 (getValueByKey!126 (toList!702 (+!83 lt!26400 (tuple2!2039 lt!26397 (zeroValue!2000 newMap!16)))) lt!26406))))

(declare-fun b!63709 () Bool)

(declare-fun Unit!1751 () Unit!1693)

(assert (=> b!63709 (= e!41762 Unit!1751)))

(declare-fun b!63710 () Bool)

(assert (=> b!63710 (= e!41763 (isDefined!79 (getValueByKey!126 (toList!702 (+!83 lt!26400 (tuple2!2039 lt!26397 (zeroValue!2000 newMap!16)))) lt!26406)))))

(assert (= (and d!13285 c!8655) b!63708))

(assert (= (and d!13285 (not c!8655)) b!63709))

(assert (= (and d!13285 (not res!34833)) b!63710))

(declare-fun m!58333 () Bool)

(assert (=> d!13285 m!58333))

(declare-fun m!58335 () Bool)

(assert (=> b!63708 m!58335))

(declare-fun m!58337 () Bool)

(assert (=> b!63708 m!58337))

(assert (=> b!63708 m!58337))

(declare-fun m!58339 () Bool)

(assert (=> b!63708 m!58339))

(assert (=> b!63710 m!58337))

(assert (=> b!63710 m!58337))

(assert (=> b!63710 m!58339))

(assert (=> b!62858 d!13285))

(declare-fun d!13287 () Bool)

(declare-fun e!41764 () Bool)

(assert (=> d!13287 e!41764))

(declare-fun res!34834 () Bool)

(assert (=> d!13287 (=> (not res!34834) (not e!41764))))

(declare-fun lt!26948 () ListLongMap!1373)

(assert (=> d!13287 (= res!34834 (contains!690 lt!26948 (_1!1030 (tuple2!2039 lt!26414 (zeroValue!2000 newMap!16)))))))

(declare-fun lt!26947 () List!1439)

(assert (=> d!13287 (= lt!26948 (ListLongMap!1374 lt!26947))))

(declare-fun lt!26946 () Unit!1693)

(declare-fun lt!26945 () Unit!1693)

(assert (=> d!13287 (= lt!26946 lt!26945)))

(assert (=> d!13287 (= (getValueByKey!126 lt!26947 (_1!1030 (tuple2!2039 lt!26414 (zeroValue!2000 newMap!16)))) (Some!131 (_2!1030 (tuple2!2039 lt!26414 (zeroValue!2000 newMap!16)))))))

(assert (=> d!13287 (= lt!26945 (lemmaContainsTupThenGetReturnValue!43 lt!26947 (_1!1030 (tuple2!2039 lt!26414 (zeroValue!2000 newMap!16))) (_2!1030 (tuple2!2039 lt!26414 (zeroValue!2000 newMap!16)))))))

(assert (=> d!13287 (= lt!26947 (insertStrictlySorted!46 (toList!702 lt!26404) (_1!1030 (tuple2!2039 lt!26414 (zeroValue!2000 newMap!16))) (_2!1030 (tuple2!2039 lt!26414 (zeroValue!2000 newMap!16)))))))

(assert (=> d!13287 (= (+!83 lt!26404 (tuple2!2039 lt!26414 (zeroValue!2000 newMap!16))) lt!26948)))

(declare-fun b!63711 () Bool)

(declare-fun res!34835 () Bool)

(assert (=> b!63711 (=> (not res!34835) (not e!41764))))

(assert (=> b!63711 (= res!34835 (= (getValueByKey!126 (toList!702 lt!26948) (_1!1030 (tuple2!2039 lt!26414 (zeroValue!2000 newMap!16)))) (Some!131 (_2!1030 (tuple2!2039 lt!26414 (zeroValue!2000 newMap!16))))))))

(declare-fun b!63712 () Bool)

(assert (=> b!63712 (= e!41764 (contains!693 (toList!702 lt!26948) (tuple2!2039 lt!26414 (zeroValue!2000 newMap!16))))))

(assert (= (and d!13287 res!34834) b!63711))

(assert (= (and b!63711 res!34835) b!63712))

(declare-fun m!58341 () Bool)

(assert (=> d!13287 m!58341))

(declare-fun m!58343 () Bool)

(assert (=> d!13287 m!58343))

(declare-fun m!58345 () Bool)

(assert (=> d!13287 m!58345))

(declare-fun m!58347 () Bool)

(assert (=> d!13287 m!58347))

(declare-fun m!58349 () Bool)

(assert (=> b!63711 m!58349))

(declare-fun m!58351 () Bool)

(assert (=> b!63712 m!58351))

(assert (=> b!62858 d!13287))

(declare-fun d!13289 () Bool)

(assert (=> d!13289 (= (apply!68 (+!83 lt!26404 (tuple2!2039 lt!26414 (zeroValue!2000 newMap!16))) lt!26411) (apply!68 lt!26404 lt!26411))))

(declare-fun lt!26949 () Unit!1693)

(assert (=> d!13289 (= lt!26949 (choose!331 lt!26404 lt!26414 (zeroValue!2000 newMap!16) lt!26411))))

(declare-fun e!41765 () Bool)

(assert (=> d!13289 e!41765))

(declare-fun res!34836 () Bool)

(assert (=> d!13289 (=> (not res!34836) (not e!41765))))

(assert (=> d!13289 (= res!34836 (contains!690 lt!26404 lt!26411))))

(assert (=> d!13289 (= (addApplyDifferent!44 lt!26404 lt!26414 (zeroValue!2000 newMap!16) lt!26411) lt!26949)))

(declare-fun b!63713 () Bool)

(assert (=> b!63713 (= e!41765 (not (= lt!26411 lt!26414)))))

(assert (= (and d!13289 res!34836) b!63713))

(declare-fun m!58353 () Bool)

(assert (=> d!13289 m!58353))

(assert (=> d!13289 m!56673))

(assert (=> d!13289 m!56675))

(assert (=> d!13289 m!56685))

(assert (=> d!13289 m!56673))

(declare-fun m!58355 () Bool)

(assert (=> d!13289 m!58355))

(assert (=> b!62858 d!13289))

(declare-fun d!13291 () Bool)

(assert (=> d!13291 (= (apply!68 lt!26398 lt!26401) (get!1086 (getValueByKey!126 (toList!702 lt!26398) lt!26401)))))

(declare-fun bs!2791 () Bool)

(assert (= bs!2791 d!13291))

(declare-fun m!58357 () Bool)

(assert (=> bs!2791 m!58357))

(assert (=> bs!2791 m!58357))

(declare-fun m!58359 () Bool)

(assert (=> bs!2791 m!58359))

(assert (=> b!62858 d!13291))

(declare-fun d!13293 () Bool)

(declare-fun e!41766 () Bool)

(assert (=> d!13293 e!41766))

(declare-fun res!34837 () Bool)

(assert (=> d!13293 (=> (not res!34837) (not e!41766))))

(declare-fun lt!26953 () ListLongMap!1373)

(assert (=> d!13293 (= res!34837 (contains!690 lt!26953 (_1!1030 (tuple2!2039 lt!26395 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))))))

(declare-fun lt!26952 () List!1439)

(assert (=> d!13293 (= lt!26953 (ListLongMap!1374 lt!26952))))

(declare-fun lt!26951 () Unit!1693)

(declare-fun lt!26950 () Unit!1693)

(assert (=> d!13293 (= lt!26951 lt!26950)))

(assert (=> d!13293 (= (getValueByKey!126 lt!26952 (_1!1030 (tuple2!2039 lt!26395 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))) (Some!131 (_2!1030 (tuple2!2039 lt!26395 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))))))

(assert (=> d!13293 (= lt!26950 (lemmaContainsTupThenGetReturnValue!43 lt!26952 (_1!1030 (tuple2!2039 lt!26395 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))) (_2!1030 (tuple2!2039 lt!26395 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))))))

(assert (=> d!13293 (= lt!26952 (insertStrictlySorted!46 (toList!702 lt!26403) (_1!1030 (tuple2!2039 lt!26395 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))) (_2!1030 (tuple2!2039 lt!26395 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))))))

(assert (=> d!13293 (= (+!83 lt!26403 (tuple2!2039 lt!26395 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))) lt!26953)))

(declare-fun b!63714 () Bool)

(declare-fun res!34838 () Bool)

(assert (=> b!63714 (=> (not res!34838) (not e!41766))))

(assert (=> b!63714 (= res!34838 (= (getValueByKey!126 (toList!702 lt!26953) (_1!1030 (tuple2!2039 lt!26395 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))) (Some!131 (_2!1030 (tuple2!2039 lt!26395 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))))))))

(declare-fun b!63715 () Bool)

(assert (=> b!63715 (= e!41766 (contains!693 (toList!702 lt!26953) (tuple2!2039 lt!26395 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))))))

(assert (= (and d!13293 res!34837) b!63714))

(assert (= (and b!63714 res!34838) b!63715))

(declare-fun m!58361 () Bool)

(assert (=> d!13293 m!58361))

(declare-fun m!58363 () Bool)

(assert (=> d!13293 m!58363))

(declare-fun m!58365 () Bool)

(assert (=> d!13293 m!58365))

(declare-fun m!58367 () Bool)

(assert (=> d!13293 m!58367))

(declare-fun m!58369 () Bool)

(assert (=> b!63714 m!58369))

(declare-fun m!58371 () Bool)

(assert (=> b!63715 m!58371))

(assert (=> b!62858 d!13293))

(assert (=> b!62858 d!13131))

(declare-fun d!13295 () Bool)

(assert (=> d!13295 (= (apply!68 lt!26404 lt!26411) (get!1086 (getValueByKey!126 (toList!702 lt!26404) lt!26411)))))

(declare-fun bs!2792 () Bool)

(assert (= bs!2792 d!13295))

(declare-fun m!58373 () Bool)

(assert (=> bs!2792 m!58373))

(assert (=> bs!2792 m!58373))

(declare-fun m!58375 () Bool)

(assert (=> bs!2792 m!58375))

(assert (=> b!62858 d!13295))

(declare-fun d!13297 () Bool)

(assert (=> d!13297 (= (apply!68 (+!83 lt!26403 (tuple2!2039 lt!26395 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))) lt!26407) (apply!68 lt!26403 lt!26407))))

(declare-fun lt!26954 () Unit!1693)

(assert (=> d!13297 (= lt!26954 (choose!331 lt!26403 lt!26395 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)) lt!26407))))

(declare-fun e!41767 () Bool)

(assert (=> d!13297 e!41767))

(declare-fun res!34839 () Bool)

(assert (=> d!13297 (=> (not res!34839) (not e!41767))))

(assert (=> d!13297 (= res!34839 (contains!690 lt!26403 lt!26407))))

(assert (=> d!13297 (= (addApplyDifferent!44 lt!26403 lt!26395 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)) lt!26407) lt!26954)))

(declare-fun b!63716 () Bool)

(assert (=> b!63716 (= e!41767 (not (= lt!26407 lt!26395)))))

(assert (= (and d!13297 res!34839) b!63716))

(declare-fun m!58377 () Bool)

(assert (=> d!13297 m!58377))

(assert (=> d!13297 m!56687))

(assert (=> d!13297 m!56689))

(assert (=> d!13297 m!56677))

(assert (=> d!13297 m!56687))

(declare-fun m!58379 () Bool)

(assert (=> d!13297 m!58379))

(assert (=> b!62858 d!13297))

(declare-fun d!13299 () Bool)

(assert (=> d!13299 (contains!690 (+!83 lt!26400 (tuple2!2039 lt!26397 (zeroValue!2000 newMap!16))) lt!26406)))

(declare-fun lt!26955 () Unit!1693)

(assert (=> d!13299 (= lt!26955 (choose!332 lt!26400 lt!26397 (zeroValue!2000 newMap!16) lt!26406))))

(assert (=> d!13299 (contains!690 lt!26400 lt!26406)))

(assert (=> d!13299 (= (addStillContains!44 lt!26400 lt!26397 (zeroValue!2000 newMap!16) lt!26406) lt!26955)))

(declare-fun bs!2793 () Bool)

(assert (= bs!2793 d!13299))

(assert (=> bs!2793 m!56681))

(assert (=> bs!2793 m!56681))

(assert (=> bs!2793 m!56683))

(declare-fun m!58381 () Bool)

(assert (=> bs!2793 m!58381))

(declare-fun m!58383 () Bool)

(assert (=> bs!2793 m!58383))

(assert (=> b!62858 d!13299))

(declare-fun d!13301 () Bool)

(declare-fun e!41768 () Bool)

(assert (=> d!13301 e!41768))

(declare-fun res!34840 () Bool)

(assert (=> d!13301 (=> (not res!34840) (not e!41768))))

(declare-fun lt!26959 () ListLongMap!1373)

(assert (=> d!13301 (= res!34840 (contains!690 lt!26959 (_1!1030 (tuple2!2039 lt!26397 (zeroValue!2000 newMap!16)))))))

(declare-fun lt!26958 () List!1439)

(assert (=> d!13301 (= lt!26959 (ListLongMap!1374 lt!26958))))

(declare-fun lt!26957 () Unit!1693)

(declare-fun lt!26956 () Unit!1693)

(assert (=> d!13301 (= lt!26957 lt!26956)))

(assert (=> d!13301 (= (getValueByKey!126 lt!26958 (_1!1030 (tuple2!2039 lt!26397 (zeroValue!2000 newMap!16)))) (Some!131 (_2!1030 (tuple2!2039 lt!26397 (zeroValue!2000 newMap!16)))))))

(assert (=> d!13301 (= lt!26956 (lemmaContainsTupThenGetReturnValue!43 lt!26958 (_1!1030 (tuple2!2039 lt!26397 (zeroValue!2000 newMap!16))) (_2!1030 (tuple2!2039 lt!26397 (zeroValue!2000 newMap!16)))))))

(assert (=> d!13301 (= lt!26958 (insertStrictlySorted!46 (toList!702 lt!26400) (_1!1030 (tuple2!2039 lt!26397 (zeroValue!2000 newMap!16))) (_2!1030 (tuple2!2039 lt!26397 (zeroValue!2000 newMap!16)))))))

(assert (=> d!13301 (= (+!83 lt!26400 (tuple2!2039 lt!26397 (zeroValue!2000 newMap!16))) lt!26959)))

(declare-fun b!63717 () Bool)

(declare-fun res!34841 () Bool)

(assert (=> b!63717 (=> (not res!34841) (not e!41768))))

(assert (=> b!63717 (= res!34841 (= (getValueByKey!126 (toList!702 lt!26959) (_1!1030 (tuple2!2039 lt!26397 (zeroValue!2000 newMap!16)))) (Some!131 (_2!1030 (tuple2!2039 lt!26397 (zeroValue!2000 newMap!16))))))))

(declare-fun b!63718 () Bool)

(assert (=> b!63718 (= e!41768 (contains!693 (toList!702 lt!26959) (tuple2!2039 lt!26397 (zeroValue!2000 newMap!16))))))

(assert (= (and d!13301 res!34840) b!63717))

(assert (= (and b!63717 res!34841) b!63718))

(declare-fun m!58385 () Bool)

(assert (=> d!13301 m!58385))

(declare-fun m!58387 () Bool)

(assert (=> d!13301 m!58387))

(declare-fun m!58389 () Bool)

(assert (=> d!13301 m!58389))

(declare-fun m!58391 () Bool)

(assert (=> d!13301 m!58391))

(declare-fun m!58393 () Bool)

(assert (=> b!63717 m!58393))

(declare-fun m!58395 () Bool)

(assert (=> b!63718 m!58395))

(assert (=> b!62858 d!13301))

(declare-fun d!13303 () Bool)

(assert (=> d!13303 (= (apply!68 (+!83 lt!26403 (tuple2!2039 lt!26395 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))) lt!26407) (get!1086 (getValueByKey!126 (toList!702 (+!83 lt!26403 (tuple2!2039 lt!26395 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))) lt!26407)))))

(declare-fun bs!2794 () Bool)

(assert (= bs!2794 d!13303))

(declare-fun m!58397 () Bool)

(assert (=> bs!2794 m!58397))

(assert (=> bs!2794 m!58397))

(declare-fun m!58399 () Bool)

(assert (=> bs!2794 m!58399))

(assert (=> b!62858 d!13303))

(declare-fun d!13305 () Bool)

(assert (=> d!13305 (= (get!1085 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62685 d!13305))

(declare-fun d!13307 () Bool)

(declare-fun res!34842 () Bool)

(declare-fun e!41771 () Bool)

(assert (=> d!13307 (=> res!34842 e!41771)))

(assert (=> d!13307 (= res!34842 (bvsge #b00000000000000000000000000000000 (size!2031 (_keys!3720 (_2!1031 lt!26150)))))))

(assert (=> d!13307 (= (arrayNoDuplicates!0 (_keys!3720 (_2!1031 lt!26150)) #b00000000000000000000000000000000 Nil!1437) e!41771)))

(declare-fun b!63719 () Bool)

(declare-fun e!41769 () Bool)

(declare-fun call!5068 () Bool)

(assert (=> b!63719 (= e!41769 call!5068)))

(declare-fun b!63720 () Bool)

(declare-fun e!41772 () Bool)

(assert (=> b!63720 (= e!41771 e!41772)))

(declare-fun res!34843 () Bool)

(assert (=> b!63720 (=> (not res!34843) (not e!41772))))

(declare-fun e!41770 () Bool)

(assert (=> b!63720 (= res!34843 (not e!41770))))

(declare-fun res!34844 () Bool)

(assert (=> b!63720 (=> (not res!34844) (not e!41770))))

(assert (=> b!63720 (= res!34844 (validKeyInArray!0 (select (arr!1799 (_keys!3720 (_2!1031 lt!26150))) #b00000000000000000000000000000000)))))

(declare-fun b!63721 () Bool)

(assert (=> b!63721 (= e!41772 e!41769)))

(declare-fun c!8656 () Bool)

(assert (=> b!63721 (= c!8656 (validKeyInArray!0 (select (arr!1799 (_keys!3720 (_2!1031 lt!26150))) #b00000000000000000000000000000000)))))

(declare-fun b!63722 () Bool)

(assert (=> b!63722 (= e!41770 (contains!692 Nil!1437 (select (arr!1799 (_keys!3720 (_2!1031 lt!26150))) #b00000000000000000000000000000000)))))

(declare-fun bm!5065 () Bool)

(assert (=> bm!5065 (= call!5068 (arrayNoDuplicates!0 (_keys!3720 (_2!1031 lt!26150)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!8656 (Cons!1436 (select (arr!1799 (_keys!3720 (_2!1031 lt!26150))) #b00000000000000000000000000000000) Nil!1437) Nil!1437)))))

(declare-fun b!63723 () Bool)

(assert (=> b!63723 (= e!41769 call!5068)))

(assert (= (and d!13307 (not res!34842)) b!63720))

(assert (= (and b!63720 res!34844) b!63722))

(assert (= (and b!63720 res!34843) b!63721))

(assert (= (and b!63721 c!8656) b!63719))

(assert (= (and b!63721 (not c!8656)) b!63723))

(assert (= (or b!63719 b!63723) bm!5065))

(assert (=> b!63720 m!57215))

(assert (=> b!63720 m!57215))

(assert (=> b!63720 m!57217))

(assert (=> b!63721 m!57215))

(assert (=> b!63721 m!57215))

(assert (=> b!63721 m!57217))

(assert (=> b!63722 m!57215))

(assert (=> b!63722 m!57215))

(declare-fun m!58401 () Bool)

(assert (=> b!63722 m!58401))

(assert (=> bm!5065 m!57215))

(declare-fun m!58403 () Bool)

(assert (=> bm!5065 m!58403))

(assert (=> b!62921 d!13307))

(declare-fun lt!26960 () Bool)

(declare-fun d!13309 () Bool)

(assert (=> d!13309 (= lt!26960 (select (content!68 (toList!702 lt!26455)) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!41773 () Bool)

(assert (=> d!13309 (= lt!26960 e!41773)))

(declare-fun res!34845 () Bool)

(assert (=> d!13309 (=> (not res!34845) (not e!41773))))

(assert (=> d!13309 (= res!34845 ((_ is Cons!1435) (toList!702 lt!26455)))))

(assert (=> d!13309 (= (contains!693 (toList!702 lt!26455) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26960)))

(declare-fun b!63724 () Bool)

(declare-fun e!41774 () Bool)

(assert (=> b!63724 (= e!41773 e!41774)))

(declare-fun res!34846 () Bool)

(assert (=> b!63724 (=> res!34846 e!41774)))

(assert (=> b!63724 (= res!34846 (= (h!2018 (toList!702 lt!26455)) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!63725 () Bool)

(assert (=> b!63725 (= e!41774 (contains!693 (t!4833 (toList!702 lt!26455)) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!13309 res!34845) b!63724))

(assert (= (and b!63724 (not res!34846)) b!63725))

(declare-fun m!58405 () Bool)

(assert (=> d!13309 m!58405))

(declare-fun m!58407 () Bool)

(assert (=> d!13309 m!58407))

(declare-fun m!58409 () Bool)

(assert (=> b!63725 m!58409))

(assert (=> b!62918 d!13309))

(declare-fun d!13311 () Bool)

(assert (=> d!13311 (= (apply!68 lt!26219 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1086 (getValueByKey!126 (toList!702 lt!26219) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!2795 () Bool)

(assert (= bs!2795 d!13311))

(assert (=> bs!2795 m!56139))

(assert (=> bs!2795 m!58283))

(assert (=> bs!2795 m!58283))

(declare-fun m!58411 () Bool)

(assert (=> bs!2795 m!58411))

(assert (=> b!62672 d!13311))

(assert (=> b!62672 d!12747))

(assert (=> b!62907 d!12831))

(declare-fun d!13313 () Bool)

(declare-fun e!41775 () Bool)

(assert (=> d!13313 e!41775))

(declare-fun res!34847 () Bool)

(assert (=> d!13313 (=> (not res!34847) (not e!41775))))

(declare-fun lt!26964 () ListLongMap!1373)

(assert (=> d!13313 (= res!34847 (contains!690 lt!26964 (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))))))

(declare-fun lt!26963 () List!1439)

(assert (=> d!13313 (= lt!26964 (ListLongMap!1374 lt!26963))))

(declare-fun lt!26962 () Unit!1693)

(declare-fun lt!26961 () Unit!1693)

(assert (=> d!13313 (= lt!26962 lt!26961)))

(assert (=> d!13313 (= (getValueByKey!126 lt!26963 (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))) (Some!131 (_2!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))))))

(assert (=> d!13313 (= lt!26961 (lemmaContainsTupThenGetReturnValue!43 lt!26963 (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))) (_2!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))))))

(assert (=> d!13313 (= lt!26963 (insertStrictlySorted!46 (toList!702 call!4955) (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))) (_2!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))))))

(assert (=> d!13313 (= (+!83 call!4955 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))) lt!26964)))

(declare-fun b!63726 () Bool)

(declare-fun res!34848 () Bool)

(assert (=> b!63726 (=> (not res!34848) (not e!41775))))

(assert (=> b!63726 (= res!34848 (= (getValueByKey!126 (toList!702 lt!26964) (_1!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16))))) (Some!131 (_2!1030 (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))))))))

(declare-fun b!63727 () Bool)

(assert (=> b!63727 (= e!41775 (contains!693 (toList!702 lt!26964) (tuple2!2039 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8338 (ite c!8332 (minValue!2000 newMap!16) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2000 newMap!16)))))))

(assert (= (and d!13313 res!34847) b!63726))

(assert (= (and b!63726 res!34848) b!63727))

(declare-fun m!58413 () Bool)

(assert (=> d!13313 m!58413))

(declare-fun m!58415 () Bool)

(assert (=> d!13313 m!58415))

(declare-fun m!58417 () Bool)

(assert (=> d!13313 m!58417))

(declare-fun m!58419 () Bool)

(assert (=> d!13313 m!58419))

(declare-fun m!58421 () Bool)

(assert (=> b!63726 m!58421))

(declare-fun m!58423 () Bool)

(assert (=> b!63727 m!58423))

(assert (=> b!62862 d!13313))

(declare-fun d!13315 () Bool)

(declare-fun res!34849 () Bool)

(declare-fun e!41776 () Bool)

(assert (=> d!13315 (=> res!34849 e!41776)))

(assert (=> d!13315 (= res!34849 (and ((_ is Cons!1435) (toList!702 call!4912)) (= (_1!1030 (h!2018 (toList!702 call!4912))) (ite c!8334 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (select (arr!1799 (_keys!3720 newMap!16)) (index!3042 lt!26125))))))))

(assert (=> d!13315 (= (containsKey!130 (toList!702 call!4912) (ite c!8334 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (select (arr!1799 (_keys!3720 newMap!16)) (index!3042 lt!26125)))) e!41776)))

(declare-fun b!63728 () Bool)

(declare-fun e!41777 () Bool)

(assert (=> b!63728 (= e!41776 e!41777)))

(declare-fun res!34850 () Bool)

(assert (=> b!63728 (=> (not res!34850) (not e!41777))))

(assert (=> b!63728 (= res!34850 (and (or (not ((_ is Cons!1435) (toList!702 call!4912))) (bvsle (_1!1030 (h!2018 (toList!702 call!4912))) (ite c!8334 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (select (arr!1799 (_keys!3720 newMap!16)) (index!3042 lt!26125))))) ((_ is Cons!1435) (toList!702 call!4912)) (bvslt (_1!1030 (h!2018 (toList!702 call!4912))) (ite c!8334 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (select (arr!1799 (_keys!3720 newMap!16)) (index!3042 lt!26125))))))))

(declare-fun b!63729 () Bool)

(assert (=> b!63729 (= e!41777 (containsKey!130 (t!4833 (toList!702 call!4912)) (ite c!8334 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (select (arr!1799 (_keys!3720 newMap!16)) (index!3042 lt!26125)))))))

(assert (= (and d!13315 (not res!34849)) b!63728))

(assert (= (and b!63728 res!34850) b!63729))

(declare-fun m!58425 () Bool)

(assert (=> b!63729 m!58425))

(assert (=> d!12709 d!13315))

(declare-fun d!13317 () Bool)

(declare-fun e!41779 () Bool)

(assert (=> d!13317 e!41779))

(declare-fun res!34851 () Bool)

(assert (=> d!13317 (=> res!34851 e!41779)))

(declare-fun lt!26968 () Bool)

(assert (=> d!13317 (= res!34851 (not lt!26968))))

(declare-fun lt!26967 () Bool)

(assert (=> d!13317 (= lt!26968 lt!26967)))

(declare-fun lt!26965 () Unit!1693)

(declare-fun e!41778 () Unit!1693)

(assert (=> d!13317 (= lt!26965 e!41778)))

(declare-fun c!8657 () Bool)

(assert (=> d!13317 (= c!8657 lt!26967)))

(assert (=> d!13317 (= lt!26967 (containsKey!130 (toList!702 lt!26190) (_1!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> d!13317 (= (contains!690 lt!26190 (_1!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26968)))

(declare-fun b!63730 () Bool)

(declare-fun lt!26966 () Unit!1693)

(assert (=> b!63730 (= e!41778 lt!26966)))

(assert (=> b!63730 (= lt!26966 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 lt!26190) (_1!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(assert (=> b!63730 (isDefined!79 (getValueByKey!126 (toList!702 lt!26190) (_1!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63731 () Bool)

(declare-fun Unit!1752 () Unit!1693)

(assert (=> b!63731 (= e!41778 Unit!1752)))

(declare-fun b!63732 () Bool)

(assert (=> b!63732 (= e!41779 (isDefined!79 (getValueByKey!126 (toList!702 lt!26190) (_1!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(assert (= (and d!13317 c!8657) b!63730))

(assert (= (and d!13317 (not c!8657)) b!63731))

(assert (= (and d!13317 (not res!34851)) b!63732))

(declare-fun m!58427 () Bool)

(assert (=> d!13317 m!58427))

(declare-fun m!58429 () Bool)

(assert (=> b!63730 m!58429))

(assert (=> b!63730 m!56343))

(assert (=> b!63730 m!56343))

(declare-fun m!58431 () Bool)

(assert (=> b!63730 m!58431))

(assert (=> b!63732 m!56343))

(assert (=> b!63732 m!56343))

(assert (=> b!63732 m!58431))

(assert (=> d!12713 d!13317))

(declare-fun b!63734 () Bool)

(declare-fun e!41780 () Option!132)

(declare-fun e!41781 () Option!132)

(assert (=> b!63734 (= e!41780 e!41781)))

(declare-fun c!8659 () Bool)

(assert (=> b!63734 (= c!8659 (and ((_ is Cons!1435) lt!26189) (not (= (_1!1030 (h!2018 lt!26189)) (_1!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))))

(declare-fun b!63733 () Bool)

(assert (=> b!63733 (= e!41780 (Some!131 (_2!1030 (h!2018 lt!26189))))))

(declare-fun d!13319 () Bool)

(declare-fun c!8658 () Bool)

(assert (=> d!13319 (= c!8658 (and ((_ is Cons!1435) lt!26189) (= (_1!1030 (h!2018 lt!26189)) (_1!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> d!13319 (= (getValueByKey!126 lt!26189 (_1!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) e!41780)))

(declare-fun b!63735 () Bool)

(assert (=> b!63735 (= e!41781 (getValueByKey!126 (t!4833 lt!26189) (_1!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63736 () Bool)

(assert (=> b!63736 (= e!41781 None!130)))

(assert (= (and d!13319 c!8658) b!63733))

(assert (= (and d!13319 (not c!8658)) b!63734))

(assert (= (and b!63734 c!8659) b!63735))

(assert (= (and b!63734 (not c!8659)) b!63736))

(declare-fun m!58433 () Bool)

(assert (=> b!63735 m!58433))

(assert (=> d!12713 d!13319))

(declare-fun d!13321 () Bool)

(assert (=> d!13321 (= (getValueByKey!126 lt!26189 (_1!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) (Some!131 (_2!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun lt!26969 () Unit!1693)

(assert (=> d!13321 (= lt!26969 (choose!340 lt!26189 (_1!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun e!41782 () Bool)

(assert (=> d!13321 e!41782))

(declare-fun res!34852 () Bool)

(assert (=> d!13321 (=> (not res!34852) (not e!41782))))

(assert (=> d!13321 (= res!34852 (isStrictlySorted!286 lt!26189))))

(assert (=> d!13321 (= (lemmaContainsTupThenGetReturnValue!43 lt!26189 (_1!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26969)))

(declare-fun b!63737 () Bool)

(declare-fun res!34853 () Bool)

(assert (=> b!63737 (=> (not res!34853) (not e!41782))))

(assert (=> b!63737 (= res!34853 (containsKey!130 lt!26189 (_1!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63738 () Bool)

(assert (=> b!63738 (= e!41782 (contains!693 lt!26189 (tuple2!2039 (_1!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(assert (= (and d!13321 res!34852) b!63737))

(assert (= (and b!63737 res!34853) b!63738))

(assert (=> d!13321 m!56337))

(declare-fun m!58435 () Bool)

(assert (=> d!13321 m!58435))

(declare-fun m!58437 () Bool)

(assert (=> d!13321 m!58437))

(declare-fun m!58439 () Bool)

(assert (=> b!63737 m!58439))

(declare-fun m!58441 () Bool)

(assert (=> b!63738 m!58441))

(assert (=> d!12713 d!13321))

(declare-fun b!63739 () Bool)

(declare-fun e!41786 () List!1439)

(declare-fun call!5071 () List!1439)

(assert (=> b!63739 (= e!41786 call!5071)))

(declare-fun e!41783 () List!1439)

(declare-fun b!63740 () Bool)

(declare-fun c!8661 () Bool)

(declare-fun c!8660 () Bool)

(assert (=> b!63740 (= e!41783 (ite c!8660 (t!4833 (toList!702 lt!26042)) (ite c!8661 (Cons!1435 (h!2018 (toList!702 lt!26042)) (t!4833 (toList!702 lt!26042))) Nil!1436)))))

(declare-fun bm!5066 () Bool)

(declare-fun call!5070 () List!1439)

(declare-fun call!5069 () List!1439)

(assert (=> bm!5066 (= call!5070 call!5069)))

(declare-fun b!63741 () Bool)

(declare-fun e!41784 () List!1439)

(assert (=> b!63741 (= e!41784 call!5069)))

(declare-fun b!63742 () Bool)

(assert (=> b!63742 (= e!41783 (insertStrictlySorted!46 (t!4833 (toList!702 lt!26042)) (_1!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63743 () Bool)

(declare-fun res!34855 () Bool)

(declare-fun e!41787 () Bool)

(assert (=> b!63743 (=> (not res!34855) (not e!41787))))

(declare-fun lt!26970 () List!1439)

(assert (=> b!63743 (= res!34855 (containsKey!130 lt!26970 (_1!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63744 () Bool)

(assert (=> b!63744 (= e!41787 (contains!693 lt!26970 (tuple2!2039 (_1!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!63745 () Bool)

(assert (=> b!63745 (= e!41786 call!5071)))

(declare-fun d!13323 () Bool)

(assert (=> d!13323 e!41787))

(declare-fun res!34854 () Bool)

(assert (=> d!13323 (=> (not res!34854) (not e!41787))))

(assert (=> d!13323 (= res!34854 (isStrictlySorted!286 lt!26970))))

(assert (=> d!13323 (= lt!26970 e!41784)))

(declare-fun c!8662 () Bool)

(assert (=> d!13323 (= c!8662 (and ((_ is Cons!1435) (toList!702 lt!26042)) (bvslt (_1!1030 (h!2018 (toList!702 lt!26042))) (_1!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> d!13323 (isStrictlySorted!286 (toList!702 lt!26042))))

(assert (=> d!13323 (= (insertStrictlySorted!46 (toList!702 lt!26042) (_1!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26970)))

(declare-fun bm!5067 () Bool)

(assert (=> bm!5067 (= call!5069 ($colon$colon!62 e!41783 (ite c!8662 (h!2018 (toList!702 lt!26042)) (tuple2!2039 (_1!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992))))) (_2!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))))

(declare-fun c!8663 () Bool)

(assert (=> bm!5067 (= c!8663 c!8662)))

(declare-fun b!63746 () Bool)

(declare-fun e!41785 () List!1439)

(assert (=> b!63746 (= e!41784 e!41785)))

(assert (=> b!63746 (= c!8660 (and ((_ is Cons!1435) (toList!702 lt!26042)) (= (_1!1030 (h!2018 (toList!702 lt!26042))) (_1!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(declare-fun b!63747 () Bool)

(assert (=> b!63747 (= c!8661 (and ((_ is Cons!1435) (toList!702 lt!26042)) (bvsgt (_1!1030 (h!2018 (toList!702 lt!26042))) (_1!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> b!63747 (= e!41785 e!41786)))

(declare-fun bm!5068 () Bool)

(assert (=> bm!5068 (= call!5071 call!5070)))

(declare-fun b!63748 () Bool)

(assert (=> b!63748 (= e!41785 call!5070)))

(assert (= (and d!13323 c!8662) b!63741))

(assert (= (and d!13323 (not c!8662)) b!63746))

(assert (= (and b!63746 c!8660) b!63748))

(assert (= (and b!63746 (not c!8660)) b!63747))

(assert (= (and b!63747 c!8661) b!63745))

(assert (= (and b!63747 (not c!8661)) b!63739))

(assert (= (or b!63745 b!63739) bm!5068))

(assert (= (or b!63748 bm!5068) bm!5066))

(assert (= (or b!63741 bm!5066) bm!5067))

(assert (= (and bm!5067 c!8663) b!63742))

(assert (= (and bm!5067 (not c!8663)) b!63740))

(assert (= (and d!13323 res!34854) b!63743))

(assert (= (and b!63743 res!34855) b!63744))

(declare-fun m!58443 () Bool)

(assert (=> b!63742 m!58443))

(declare-fun m!58445 () Bool)

(assert (=> bm!5067 m!58445))

(declare-fun m!58447 () Bool)

(assert (=> b!63743 m!58447))

(declare-fun m!58449 () Bool)

(assert (=> b!63744 m!58449))

(declare-fun m!58451 () Bool)

(assert (=> d!13323 m!58451))

(declare-fun m!58453 () Bool)

(assert (=> d!13323 m!58453))

(assert (=> d!12713 d!13323))

(declare-fun d!13325 () Bool)

(declare-fun res!34856 () Bool)

(declare-fun e!41788 () Bool)

(assert (=> d!13325 (=> res!34856 e!41788)))

(assert (=> d!13325 (= res!34856 (and ((_ is Cons!1435) (toList!702 lt!26046)) (= (_1!1030 (h!2018 (toList!702 lt!26046))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!13325 (= (containsKey!130 (toList!702 lt!26046) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!41788)))

(declare-fun b!63749 () Bool)

(declare-fun e!41789 () Bool)

(assert (=> b!63749 (= e!41788 e!41789)))

(declare-fun res!34857 () Bool)

(assert (=> b!63749 (=> (not res!34857) (not e!41789))))

(assert (=> b!63749 (= res!34857 (and (or (not ((_ is Cons!1435) (toList!702 lt!26046))) (bvsle (_1!1030 (h!2018 (toList!702 lt!26046))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) ((_ is Cons!1435) (toList!702 lt!26046)) (bvslt (_1!1030 (h!2018 (toList!702 lt!26046))) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun b!63750 () Bool)

(assert (=> b!63750 (= e!41789 (containsKey!130 (t!4833 (toList!702 lt!26046)) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!13325 (not res!34856)) b!63749))

(assert (= (and b!63749 res!34857) b!63750))

(assert (=> b!63750 m!56139))

(declare-fun m!58455 () Bool)

(assert (=> b!63750 m!58455))

(assert (=> d!12711 d!13325))

(declare-fun d!13327 () Bool)

(declare-fun e!41791 () Bool)

(assert (=> d!13327 e!41791))

(declare-fun res!34858 () Bool)

(assert (=> d!13327 (=> res!34858 e!41791)))

(declare-fun lt!26974 () Bool)

(assert (=> d!13327 (= res!34858 (not lt!26974))))

(declare-fun lt!26973 () Bool)

(assert (=> d!13327 (= lt!26974 lt!26973)))

(declare-fun lt!26971 () Unit!1693)

(declare-fun e!41790 () Unit!1693)

(assert (=> d!13327 (= lt!26971 e!41790)))

(declare-fun c!8664 () Bool)

(assert (=> d!13327 (= c!8664 lt!26973)))

(assert (=> d!13327 (= lt!26973 (containsKey!130 (toList!702 lt!26402) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!13327 (= (contains!690 lt!26402 #b1000000000000000000000000000000000000000000000000000000000000000) lt!26974)))

(declare-fun b!63751 () Bool)

(declare-fun lt!26972 () Unit!1693)

(assert (=> b!63751 (= e!41790 lt!26972)))

(assert (=> b!63751 (= lt!26972 (lemmaContainsKeyImpliesGetValueByKeyDefined!78 (toList!702 lt!26402) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63751 (isDefined!79 (getValueByKey!126 (toList!702 lt!26402) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63752 () Bool)

(declare-fun Unit!1753 () Unit!1693)

(assert (=> b!63752 (= e!41790 Unit!1753)))

(declare-fun b!63753 () Bool)

(assert (=> b!63753 (= e!41791 (isDefined!79 (getValueByKey!126 (toList!702 lt!26402) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!13327 c!8664) b!63751))

(assert (= (and d!13327 (not c!8664)) b!63752))

(assert (= (and d!13327 (not res!34858)) b!63753))

(declare-fun m!58457 () Bool)

(assert (=> d!13327 m!58457))

(declare-fun m!58459 () Bool)

(assert (=> b!63751 m!58459))

(assert (=> b!63751 m!57237))

(assert (=> b!63751 m!57237))

(declare-fun m!58461 () Bool)

(assert (=> b!63751 m!58461))

(assert (=> b!63753 m!57237))

(assert (=> b!63753 m!57237))

(assert (=> b!63753 m!58461))

(assert (=> bm!4954 d!13327))

(declare-fun d!13329 () Bool)

(assert (=> d!13329 (= (get!1086 (getValueByKey!126 (toList!702 (+!83 lt!26042 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26045)) (v!2423 (getValueByKey!126 (toList!702 (+!83 lt!26042 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26045)))))

(assert (=> d!12725 d!13329))

(declare-fun b!63755 () Bool)

(declare-fun e!41792 () Option!132)

(declare-fun e!41793 () Option!132)

(assert (=> b!63755 (= e!41792 e!41793)))

(declare-fun c!8666 () Bool)

(assert (=> b!63755 (= c!8666 (and ((_ is Cons!1435) (toList!702 (+!83 lt!26042 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))) (not (= (_1!1030 (h!2018 (toList!702 (+!83 lt!26042 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))) lt!26045))))))

(declare-fun b!63754 () Bool)

(assert (=> b!63754 (= e!41792 (Some!131 (_2!1030 (h!2018 (toList!702 (+!83 lt!26042 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))))

(declare-fun d!13331 () Bool)

(declare-fun c!8665 () Bool)

(assert (=> d!13331 (= c!8665 (and ((_ is Cons!1435) (toList!702 (+!83 lt!26042 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))) (= (_1!1030 (h!2018 (toList!702 (+!83 lt!26042 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))) lt!26045)))))

(assert (=> d!13331 (= (getValueByKey!126 (toList!702 (+!83 lt!26042 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26045) e!41792)))

(declare-fun b!63756 () Bool)

(assert (=> b!63756 (= e!41793 (getValueByKey!126 (t!4833 (toList!702 (+!83 lt!26042 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))) lt!26045))))

(declare-fun b!63757 () Bool)

(assert (=> b!63757 (= e!41793 None!130)))

(assert (= (and d!13331 c!8665) b!63754))

(assert (= (and d!13331 (not c!8665)) b!63755))

(assert (= (and b!63755 c!8666) b!63756))

(assert (= (and b!63755 (not c!8666)) b!63757))

(declare-fun m!58463 () Bool)

(assert (=> b!63756 m!58463))

(assert (=> d!12725 d!13331))

(declare-fun d!13333 () Bool)

(assert (=> d!13333 (= (get!1086 (getValueByKey!126 (toList!702 (+!83 lt!26048 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26055)) (v!2423 (getValueByKey!126 (toList!702 (+!83 lt!26048 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26055)))))

(assert (=> d!12743 d!13333))

(declare-fun b!63759 () Bool)

(declare-fun e!41794 () Option!132)

(declare-fun e!41795 () Option!132)

(assert (=> b!63759 (= e!41794 e!41795)))

(declare-fun c!8668 () Bool)

(assert (=> b!63759 (= c!8668 (and ((_ is Cons!1435) (toList!702 (+!83 lt!26048 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))) (not (= (_1!1030 (h!2018 (toList!702 (+!83 lt!26048 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))) lt!26055))))))

(declare-fun b!63758 () Bool)

(assert (=> b!63758 (= e!41794 (Some!131 (_2!1030 (h!2018 (toList!702 (+!83 lt!26048 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))))))))

(declare-fun c!8667 () Bool)

(declare-fun d!13335 () Bool)

(assert (=> d!13335 (= c!8667 (and ((_ is Cons!1435) (toList!702 (+!83 lt!26048 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))) (= (_1!1030 (h!2018 (toList!702 (+!83 lt!26048 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))))) lt!26055)))))

(assert (=> d!13335 (= (getValueByKey!126 (toList!702 (+!83 lt!26048 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992)))))) lt!26055) e!41794)))

(declare-fun b!63760 () Bool)

(assert (=> b!63760 (= e!41795 (getValueByKey!126 (t!4833 (toList!702 (+!83 lt!26048 (tuple2!2039 lt!26058 (zeroValue!2000 (v!2419 (underlying!233 thiss!992))))))) lt!26055))))

(declare-fun b!63761 () Bool)

(assert (=> b!63761 (= e!41795 None!130)))

(assert (= (and d!13335 c!8667) b!63758))

(assert (= (and d!13335 (not c!8667)) b!63759))

(assert (= (and b!63759 c!8668) b!63760))

(assert (= (and b!63759 (not c!8668)) b!63761))

(declare-fun m!58465 () Bool)

(assert (=> b!63760 m!58465))

(assert (=> d!12743 d!13335))

(assert (=> b!62893 d!12933))

(declare-fun b!63763 () Bool)

(declare-fun e!41796 () Option!132)

(declare-fun e!41797 () Option!132)

(assert (=> b!63763 (= e!41796 e!41797)))

(declare-fun c!8670 () Bool)

(assert (=> b!63763 (= c!8670 (and ((_ is Cons!1435) (toList!702 lt!26190)) (not (= (_1!1030 (h!2018 (toList!702 lt!26190))) (_1!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))))

(declare-fun b!63762 () Bool)

(assert (=> b!63762 (= e!41796 (Some!131 (_2!1030 (h!2018 (toList!702 lt!26190)))))))

(declare-fun d!13337 () Bool)

(declare-fun c!8669 () Bool)

(assert (=> d!13337 (= c!8669 (and ((_ is Cons!1435) (toList!702 lt!26190)) (= (_1!1030 (h!2018 (toList!702 lt!26190))) (_1!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992))))))))))

(assert (=> d!13337 (= (getValueByKey!126 (toList!702 lt!26190) (_1!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))) e!41796)))

(declare-fun b!63764 () Bool)

(assert (=> b!63764 (= e!41797 (getValueByKey!126 (t!4833 (toList!702 lt!26190)) (_1!1030 (tuple2!2039 lt!26057 (minValue!2000 (v!2419 (underlying!233 thiss!992)))))))))

(declare-fun b!63765 () Bool)

(assert (=> b!63765 (= e!41797 None!130)))

(assert (= (and d!13337 c!8669) b!63762))

(assert (= (and d!13337 (not c!8669)) b!63763))

(assert (= (and b!63763 c!8670) b!63764))

(assert (= (and b!63763 (not c!8670)) b!63765))

(declare-fun m!58467 () Bool)

(assert (=> b!63764 m!58467))

(assert (=> b!62630 d!13337))

(assert (=> bm!4965 d!12865))

(assert (=> b!62695 d!13135))

(declare-fun d!13339 () Bool)

(assert (=> d!13339 (= (isEmpty!300 (getValueByKey!126 (toList!702 lt!25956) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355))) (not ((_ is Some!131) (getValueByKey!126 (toList!702 lt!25956) (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355)))))))

(assert (=> d!12763 d!13339))

(assert (=> b!62855 d!12831))

(assert (=> b!62804 d!13073))

(declare-fun d!13341 () Bool)

(declare-fun e!41798 () Bool)

(assert (=> d!13341 e!41798))

(declare-fun res!34859 () Bool)

(assert (=> d!13341 (=> (not res!34859) (not e!41798))))

(declare-fun lt!26978 () ListLongMap!1373)

(assert (=> d!13341 (= res!34859 (contains!690 lt!26978 (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!26977 () List!1439)

(assert (=> d!13341 (= lt!26978 (ListLongMap!1374 lt!26977))))

(declare-fun lt!26976 () Unit!1693)

(declare-fun lt!26975 () Unit!1693)

(assert (=> d!13341 (= lt!26976 lt!26975)))

(assert (=> d!13341 (= (getValueByKey!126 lt!26977 (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!131 (_2!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!13341 (= lt!26975 (lemmaContainsTupThenGetReturnValue!43 lt!26977 (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!13341 (= lt!26977 (insertStrictlySorted!46 (toList!702 (map!1115 newMap!16)) (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!13341 (= (+!83 (map!1115 newMap!16) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26978)))

(declare-fun b!63766 () Bool)

(declare-fun res!34860 () Bool)

(assert (=> b!63766 (=> (not res!34860) (not e!41798))))

(assert (=> b!63766 (= res!34860 (= (getValueByKey!126 (toList!702 lt!26978) (_1!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!131 (_2!1030 (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!63767 () Bool)

(assert (=> b!63767 (= e!41798 (contains!693 (toList!702 lt!26978) (tuple2!2039 (select (arr!1799 (_keys!3720 (v!2419 (underlying!233 thiss!992)))) from!355) (get!1082 (select (arr!1800 (_values!2071 (v!2419 (underlying!233 thiss!992)))) from!355) (dynLambda!308 (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!13341 res!34859) b!63766))

(assert (= (and b!63766 res!34860) b!63767))

(declare-fun m!58469 () Bool)

(assert (=> d!13341 m!58469))

(declare-fun m!58471 () Bool)

(assert (=> d!13341 m!58471))

(declare-fun m!58473 () Bool)

(assert (=> d!13341 m!58473))

(declare-fun m!58475 () Bool)

(assert (=> d!13341 m!58475))

(declare-fun m!58477 () Bool)

(assert (=> b!63766 m!58477))

(declare-fun m!58479 () Bool)

(assert (=> b!63767 m!58479))

(assert (=> b!62804 d!13341))

(assert (=> b!62804 d!12691))

(declare-fun d!13343 () Bool)

(assert (=> d!13343 (= (apply!68 lt!26255 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1086 (getValueByKey!126 (toList!702 lt!26255) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2796 () Bool)

(assert (= bs!2796 d!13343))

(assert (=> bs!2796 m!58087))

(assert (=> bs!2796 m!58087))

(declare-fun m!58481 () Bool)

(assert (=> bs!2796 m!58481))

(assert (=> b!62716 d!13343))

(declare-fun mapNonEmpty!2957 () Bool)

(declare-fun mapRes!2957 () Bool)

(declare-fun tp!8141 () Bool)

(declare-fun e!41800 () Bool)

(assert (=> mapNonEmpty!2957 (= mapRes!2957 (and tp!8141 e!41800))))

(declare-fun mapRest!2957 () (Array (_ BitVec 32) ValueCell!864))

(declare-fun mapKey!2957 () (_ BitVec 32))

(declare-fun mapValue!2957 () ValueCell!864)

(assert (=> mapNonEmpty!2957 (= mapRest!2956 (store mapRest!2957 mapKey!2957 mapValue!2957))))

(declare-fun b!63768 () Bool)

(assert (=> b!63768 (= e!41800 tp_is_empty!2415)))

(declare-fun b!63769 () Bool)

(declare-fun e!41799 () Bool)

(assert (=> b!63769 (= e!41799 tp_is_empty!2415)))

(declare-fun mapIsEmpty!2957 () Bool)

(assert (=> mapIsEmpty!2957 mapRes!2957))

(declare-fun condMapEmpty!2957 () Bool)

(declare-fun mapDefault!2957 () ValueCell!864)

(assert (=> mapNonEmpty!2956 (= condMapEmpty!2957 (= mapRest!2956 ((as const (Array (_ BitVec 32) ValueCell!864)) mapDefault!2957)))))

(assert (=> mapNonEmpty!2956 (= tp!8140 (and e!41799 mapRes!2957))))

(assert (= (and mapNonEmpty!2956 condMapEmpty!2957) mapIsEmpty!2957))

(assert (= (and mapNonEmpty!2956 (not condMapEmpty!2957)) mapNonEmpty!2957))

(assert (= (and mapNonEmpty!2957 ((_ is ValueCellFull!864) mapValue!2957)) b!63768))

(assert (= (and mapNonEmpty!2956 ((_ is ValueCellFull!864) mapDefault!2957)) b!63769))

(declare-fun m!58483 () Bool)

(assert (=> mapNonEmpty!2957 m!58483))

(declare-fun mapNonEmpty!2958 () Bool)

(declare-fun mapRes!2958 () Bool)

(declare-fun tp!8142 () Bool)

(declare-fun e!41802 () Bool)

(assert (=> mapNonEmpty!2958 (= mapRes!2958 (and tp!8142 e!41802))))

(declare-fun mapRest!2958 () (Array (_ BitVec 32) ValueCell!864))

(declare-fun mapKey!2958 () (_ BitVec 32))

(declare-fun mapValue!2958 () ValueCell!864)

(assert (=> mapNonEmpty!2958 (= mapRest!2955 (store mapRest!2958 mapKey!2958 mapValue!2958))))

(declare-fun b!63770 () Bool)

(assert (=> b!63770 (= e!41802 tp_is_empty!2415)))

(declare-fun b!63771 () Bool)

(declare-fun e!41801 () Bool)

(assert (=> b!63771 (= e!41801 tp_is_empty!2415)))

(declare-fun mapIsEmpty!2958 () Bool)

(assert (=> mapIsEmpty!2958 mapRes!2958))

(declare-fun condMapEmpty!2958 () Bool)

(declare-fun mapDefault!2958 () ValueCell!864)

(assert (=> mapNonEmpty!2955 (= condMapEmpty!2958 (= mapRest!2955 ((as const (Array (_ BitVec 32) ValueCell!864)) mapDefault!2958)))))

(assert (=> mapNonEmpty!2955 (= tp!8139 (and e!41801 mapRes!2958))))

(assert (= (and mapNonEmpty!2955 condMapEmpty!2958) mapIsEmpty!2958))

(assert (= (and mapNonEmpty!2955 (not condMapEmpty!2958)) mapNonEmpty!2958))

(assert (= (and mapNonEmpty!2958 ((_ is ValueCellFull!864) mapValue!2958)) b!63770))

(assert (= (and mapNonEmpty!2955 ((_ is ValueCellFull!864) mapDefault!2958)) b!63771))

(declare-fun m!58485 () Bool)

(assert (=> mapNonEmpty!2958 m!58485))

(declare-fun b_lambda!2845 () Bool)

(assert (= b_lambda!2833 (or (and b!62272 b_free!1997 (= (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2088 newMap!16))) (and b!62266 b_free!1999) b_lambda!2845)))

(declare-fun b_lambda!2847 () Bool)

(assert (= b_lambda!2839 (or (and b!62272 b_free!1997) (and b!62266 b_free!1999 (= (defaultEntry!2088 newMap!16) (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))))) b_lambda!2847)))

(declare-fun b_lambda!2849 () Bool)

(assert (= b_lambda!2829 (or (and b!62272 b_free!1997 (= (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2088 newMap!16))) (and b!62266 b_free!1999) b_lambda!2849)))

(declare-fun b_lambda!2851 () Bool)

(assert (= b_lambda!2841 (or (and b!62272 b_free!1997) (and b!62266 b_free!1999 (= (defaultEntry!2088 newMap!16) (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))))) b_lambda!2851)))

(declare-fun b_lambda!2853 () Bool)

(assert (= b_lambda!2837 (or (and b!62272 b_free!1997 (= (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2088 newMap!16))) (and b!62266 b_free!1999) b_lambda!2853)))

(declare-fun b_lambda!2855 () Bool)

(assert (= b_lambda!2817 (or (and b!62272 b_free!1997 (= (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2088 newMap!16))) (and b!62266 b_free!1999) b_lambda!2855)))

(declare-fun b_lambda!2857 () Bool)

(assert (= b_lambda!2821 (or (and b!62272 b_free!1997 (= (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2088 newMap!16))) (and b!62266 b_free!1999) b_lambda!2857)))

(declare-fun b_lambda!2859 () Bool)

(assert (= b_lambda!2827 (or (and b!62272 b_free!1997 (= (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2088 newMap!16))) (and b!62266 b_free!1999) b_lambda!2859)))

(declare-fun b_lambda!2861 () Bool)

(assert (= b_lambda!2835 (or (and b!62272 b_free!1997 (= (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2088 newMap!16))) (and b!62266 b_free!1999) b_lambda!2861)))

(declare-fun b_lambda!2863 () Bool)

(assert (= b_lambda!2825 (or (and b!62272 b_free!1997 (= (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2088 newMap!16))) (and b!62266 b_free!1999) b_lambda!2863)))

(declare-fun b_lambda!2865 () Bool)

(assert (= b_lambda!2831 (or (and b!62272 b_free!1997 (= (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2088 newMap!16))) (and b!62266 b_free!1999) b_lambda!2865)))

(declare-fun b_lambda!2867 () Bool)

(assert (= b_lambda!2819 (or (and b!62272 b_free!1997 (= (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2088 newMap!16))) (and b!62266 b_free!1999) b_lambda!2867)))

(declare-fun b_lambda!2869 () Bool)

(assert (= b_lambda!2823 (or (and b!62272 b_free!1997 (= (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2088 newMap!16))) (and b!62266 b_free!1999) b_lambda!2869)))

(declare-fun b_lambda!2871 () Bool)

(assert (= b_lambda!2815 (or (and b!62272 b_free!1997 (= (defaultEntry!2088 (v!2419 (underlying!233 thiss!992))) (defaultEntry!2088 newMap!16))) (and b!62266 b_free!1999) b_lambda!2871)))

(check-sat (not b!63567) (not bm!5022) (not b!63319) (not b!63284) (not b!62986) (not bm!5008) (not b!63136) (not bm!5043) (not b!63158) (not b!62935) (not b!63215) (not d!12929) (not bm!4990) (not b!63428) (not bm!5024) (not b!63021) (not bm!5019) (not b!63234) (not d!12903) (not d!12881) (not bm!5036) (not bm!5013) (not b!63469) (not d!13047) (not b!63253) (not d!13167) (not b!63715) (not d!13143) (not d!13145) (not b!63515) (not d!13173) (not b!63493) (not b!63604) (not b!63383) tp_is_empty!2415 (not bm!4974) (not d!12969) (not b!63420) (not b!63592) (not b!62985) (not d!13313) (not b_lambda!2847) (not b!63294) (not b!63654) (not bm!5052) (not d!13277) (not b!63495) (not bm!5016) (not b!63585) (not b!63513) (not bm!5053) (not b!63093) (not d!12915) (not b!63329) (not b!63435) (not d!13093) (not d!13175) (not b!63103) (not b!63491) (not b!63364) (not d!13161) (not b!63663) (not d!13165) (not b!63705) (not bm!5034) (not d!12885) (not b!63144) (not d!13115) (not b!62951) (not d!12897) (not bm!5055) (not d!13177) (not d!13087) (not d!13155) (not d!13323) (not b_lambda!2871) (not b_lambda!2869) (not b!63038) (not d!13225) (not d!12907) (not d!13239) (not d!12953) (not b!63317) (not d!12899) (not b!63737) (not b!63193) (not d!13189) (not b!63662) (not b!63027) (not b!63504) (not b!63307) (not b!63612) (not d!13297) (not bm!5039) (not b!63016) (not b_lambda!2867) (not d!12947) (not d!12877) (not bm!4973) (not d!13301) (not b!63017) (not b!63600) (not b!63721) (not b!63508) (not d!13037) (not b!62965) (not d!13291) (not d!13343) (not b!63381) (not b!63511) (not b!63200) (not b!63518) (not b!63098) (not b!63225) (not d!12869) (not d!13041) (not bm!4967) (not b!63700) (not d!13275) (not d!13213) (not b!63661) (not bm!5009) (not b!63712) (not b!63277) (not b!62975) (not d!13181) (not b!63058) (not b!63100) (not b!63197) (not b!62962) (not b!63366) (not b!63029) (not b!63159) (not b!63643) (not b_lambda!2805) (not b!63145) (not b!63377) (not b!63052) (not d!13273) (not d!13179) (not b!63667) (not b!63706) (not d!12905) (not b!63362) (not bm!5015) (not d!13083) (not b!63073) (not bm!4999) (not b!63764) (not d!12837) (not d!13035) (not bm!5041) (not b_lambda!2845) (not b!63217) (not b!63382) (not b!63057) (not b!63572) (not d!13245) (not bm!5003) (not b!63472) (not b!63488) (not b!63050) (not bm!5064) (not bm!4982) (not d!13279) (not d!13027) (not b!63351) (not b!63730) (not d!12857) (not b!62988) (not b!63510) (not d!13185) (not b!63019) (not b!63425) (not d!12999) (not b!63202) (not b!63450) (not b!63634) (not b!63766) (not d!12985) (not b!63355) (not d!13227) (not b!63400) (not b!63304) (not b!63457) (not d!13015) (not d!13081) (not b!63033) (not b_lambda!2807) (not b!62994) (not d!13149) (not d!12931) (not b!63509) (not b!63247) (not d!13129) (not d!13171) (not bm!4972) (not b!63410) (not b!63308) (not b!63028) (not bm!4969) (not d!13157) (not d!12927) (not d!12963) (not d!13231) (not b!63583) (not b!63649) (not d!13003) (not b!62957) (not b!63566) (not b_lambda!2789) (not d!13019) (not b!63437) (not b!63589) (not d!12987) (not b!63618) (not b!63449) (not mapNonEmpty!2958) (not d!12995) (not b!63442) (not b_lambda!2849) (not b!63517) (not d!13295) (not b!63628) (not b!62959) (not b!63751) (not d!13195) (not b!63496) (not bm!5040) (not d!12883) (not b!63005) (not d!12951) (not b!63330) (not d!12859) (not d!12923) (not b!62993) (not b!63055) (not d!13125) (not d!13317) (not d!13023) (not b!63233) (not b!63767) (not d!13059) (not b_next!1999) (not b!62979) (not b!63334) b_and!3909 (not b!63082) (not b!63150) (not b!63470) (not b!63735) (not d!13119) (not b!63503) (not b!62978) (not d!13109) (not d!13133) (not bm!5006) (not b!63565) (not d!13223) (not b!63646) (not d!13341) (not b!63287) (not d!12973) (not b_next!1997) (not b_lambda!2855) (not b!63641) (not b!63248) (not b!63221) (not b!63035) (not b!63210) (not b_lambda!2861) (not d!13159) (not b!63478) (not b!63258) (not b!63714) (not d!12851) (not b!63263) (not b!63089) (not d!13017) (not b!63579) (not b!63726) (not b!62949) (not b!63552) (not b!63636) (not b!63069) (not b!63725) (not b!63461) (not b!63464) (not d!12959) (not b!63519) (not b!63632) (not b!63091) (not bm!5001) (not b!63250) (not b!63732) (not bm!4970) (not bm!5063) (not b!63576) (not bm!5049) (not b!62931) (not b!63480) (not d!13199) (not b!63560) (not b!63750) (not b!63625) (not b!63639) (not d!13043) (not b!63499) (not b!62952) (not b_lambda!2809) (not b!63045) (not b!63347) (not d!13055) (not bm!5062) (not bm!5032) (not d!13013) (not d!12935) (not d!13073) (not b!63580) (not b!63710) (not b!63336) (not d!13191) (not b!63553) (not b!63286) (not b!63416) (not b!63320) (not d!12871) (not d!13031) (not bm!5065) (not b!63369) (not d!13147) (not bm!5037) (not d!12957) (not b!63281) (not b!63595) (not b!63182) (not b!63043) (not b!63711) (not b!63260) (not b!63708) (not d!13153) (not bm!4998) (not b!63720) (not d!12861) (not b_lambda!2865) (not d!13205) (not b!63729) (not b!63065) (not d!12839) (not b!62992) (not d!13303) (not d!13131) (not b!63648) (not b!63299) (not b!63346) (not b!63273) (not b!63402) (not b!63717) (not b!62996) (not d!12983) (not b!63655) (not b!63310) (not d!12873) (not b!62990) (not bm!5029) (not b!63614) (not d!13267) (not b!63002) (not d!12997) (not d!12971) (not d!13075) (not b!62974) (not b_lambda!2843) (not b!63466) (not b!63262) (not d!12853) (not b!63185) (not bm!5011) (not b!63555) (not bm!5045) (not d!13289) (not b!63401) (not b!63446) (not d!12989) (not d!12975) (not mapNonEmpty!2957) (not b!63109) (not b_lambda!2793) (not b!62980) (not b!63344) (not b!63195) (not bm!5050) (not b!63743) (not d!12855) (not b!63199) (not d!13293) (not bm!4979) (not b!63704) (not d!13237) (not d!13253) (not b!63095) (not b!63561) (not d!13095) (not d!13285) (not d!13063) (not b!63157) (not b!63396) (not b!63322) (not b!63007) (not b!63599) (not b!62987) (not b!62955) (not b!63505) (not b!63265) (not b!63476) (not b!63727) (not bm!4993) (not b!63738) (not bm!5020) (not b!63324) (not b!63077) (not b_lambda!2851) (not b!63444) (not b!63447) (not b!63048) (not d!13071) (not b!63327) (not b!63283) (not b!63521) (not d!13079) (not b!63256) (not d!12949) (not b_lambda!2811) (not b!63279) (not b!63220) (not d!13203) (not d!13251) (not b!63485) (not b!63693) (not d!12977) (not d!13309) (not b!63411) (not b!63520) (not b!63110) (not b!63214) (not b!63009) (not b!63142) (not b!63615) (not b!63467) (not b!63575) (not bm!4978) (not bm!5026) (not d!12863) (not b!63697) (not d!12865) (not b!63371) (not d!13327) (not bm!4976) (not b!63465) (not b!62976) (not d!13089) (not b_lambda!2863) (not b!63054) (not b!63653) (not b!63358) (not d!12895) (not b!63076) (not b!63152) (not b!63345) (not b!63343) (not d!13067) (not d!13113) (not b!63395) (not b!63376) (not b!63722) (not b!63608) (not d!12867) (not b!63718) (not d!13269) (not d!12879) (not b!63601) (not d!13107) (not b!63153) (not bm!4996) (not b!63226) (not d!13005) (not b!63610) (not b!63501) (not b!63296) (not d!13261) (not d!13065) (not b!63374) (not b!62945) (not d!13311) (not b!63468) (not b!63034) (not b!62961) (not b!63545) (not b!63341) (not bm!5047) (not b!63578) (not b!63232) (not b!63629) (not b!63388) (not bm!5031) (not d!12919) (not d!12847) (not bm!4981) (not b!63190) (not b!63573) (not d!13283) (not d!13299) (not bm!5067) (not b!63360) (not d!13061) (not b!63134) (not b!63390) (not d!13221) (not b!63475) (not d!12943) (not d!13197) (not b!63702) (not b!63605) (not d!13169) (not b!63617) (not b!63507) (not b!63699) (not b!63363) (not b!63014) (not d!13045) (not b!63356) (not b!63177) (not b!63413) (not b!63368) (not b!63097) (not b!63189) (not b!62941) (not b!63042) (not b!63348) (not b!63222) (not d!13211) (not b!63558) (not b!63742) (not d!13051) (not b!63203) (not d!13001) (not b!62997) (not d!13163) (not b!63079) (not d!13053) (not b!63760) (not d!12893) (not b!63006) (not b!63696) b_and!3907 (not bm!5002) (not b!63477) (not b!63040) (not b!62972) (not d!13033) (not b!63514) (not b!63314) (not b!63603) (not b!62982) (not b_lambda!2859) (not b_lambda!2813) (not d!13117) (not b!63756) (not b!63072) (not b!63230) (not d!13247) (not b!63436) (not d!13321) (not d!12875) (not b!62991) (not d!13281) (not b!63188) (not d!13207) (not d!13011) (not b!63266) (not b!63238) (not b!63440) (not b!62938) (not bm!5057) (not b_lambda!2857) (not b!63353) (not d!12961) (not b!63587) (not b!63753) (not b!63593) (not b!63744) (not b!63335) (not b!63213) (not bm!5004) (not d!13287) (not b!62964) (not b!63498) (not b!63147) (not bm!5018) (not b!63135) (not d!12967) (not b!63591) (not b!63701) (not b!63008) (not b_lambda!2853) (not d!12911) (not b!63393) (not b!63223) (not d!13183) (not b!63598) (not d!12981))
(check-sat b_and!3907 b_and!3909 (not b_next!1997) (not b_next!1999))
