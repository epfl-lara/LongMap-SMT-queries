; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!8874 () Bool)

(assert start!8874)

(declare-fun b!62032 () Bool)

(declare-fun b_free!1993 () Bool)

(declare-fun b_next!1993 () Bool)

(assert (=> b!62032 (= b_free!1993 (not b_next!1993))))

(declare-fun tp!8108 () Bool)

(declare-fun b_and!3781 () Bool)

(assert (=> b!62032 (= tp!8108 b_and!3781)))

(declare-fun b!62029 () Bool)

(declare-fun b_free!1995 () Bool)

(declare-fun b_next!1995 () Bool)

(assert (=> b!62029 (= b_free!1995 (not b_next!1995))))

(declare-fun tp!8109 () Bool)

(declare-fun b_and!3783 () Bool)

(assert (=> b!62029 (= tp!8109 b_and!3783)))

(declare-fun b!62022 () Bool)

(declare-fun res!34101 () Bool)

(declare-fun e!40721 () Bool)

(assert (=> b!62022 (=> (not res!34101) (not e!40721))))

(declare-datatypes ((V!2865 0))(
  ( (V!2866 (val!1251 Int)) )
))
(declare-datatypes ((array!3737 0))(
  ( (array!3738 (arr!1786 (Array (_ BitVec 32) (_ BitVec 64))) (size!2019 (_ BitVec 32))) )
))
(declare-datatypes ((ValueCell!863 0))(
  ( (ValueCellFull!863 (v!2411 V!2865)) (EmptyCell!863) )
))
(declare-datatypes ((array!3739 0))(
  ( (array!3740 (arr!1787 (Array (_ BitVec 32) ValueCell!863)) (size!2020 (_ BitVec 32))) )
))
(declare-datatypes ((LongMapFixedSize!634 0))(
  ( (LongMapFixedSize!635 (defaultEntry!2087 Int) (mask!5992 (_ BitVec 32)) (extraKeys!1966 (_ BitVec 32)) (zeroValue!1999 V!2865) (minValue!1999 V!2865) (_size!366 (_ BitVec 32)) (_keys!3718 array!3737) (_values!2070 array!3739) (_vacant!366 (_ BitVec 32))) )
))
(declare-fun newMap!16 () LongMapFixedSize!634)

(declare-datatypes ((Cell!436 0))(
  ( (Cell!437 (v!2412 LongMapFixedSize!634)) )
))
(declare-datatypes ((LongMap!436 0))(
  ( (LongMap!437 (underlying!229 Cell!436)) )
))
(declare-fun thiss!992 () LongMap!436)

(assert (=> b!62022 (= res!34101 (bvsge (bvadd #b00000000000000000000000000000001 (mask!5992 newMap!16)) (_size!366 (v!2412 (underlying!229 thiss!992)))))))

(declare-fun res!34102 () Bool)

(assert (=> start!8874 (=> (not res!34102) (not e!40721))))

(declare-fun valid!266 (LongMap!436) Bool)

(assert (=> start!8874 (= res!34102 (valid!266 thiss!992))))

(assert (=> start!8874 e!40721))

(declare-fun e!40732 () Bool)

(assert (=> start!8874 e!40732))

(assert (=> start!8874 true))

(declare-fun e!40733 () Bool)

(assert (=> start!8874 e!40733))

(declare-fun b!62023 () Bool)

(declare-fun e!40729 () Bool)

(declare-fun tp_is_empty!2413 () Bool)

(assert (=> b!62023 (= e!40729 tp_is_empty!2413)))

(declare-fun b!62024 () Bool)

(declare-datatypes ((Unit!1685 0))(
  ( (Unit!1686) )
))
(declare-fun e!40723 () Unit!1685)

(declare-fun Unit!1687 () Unit!1685)

(assert (=> b!62024 (= e!40723 Unit!1687)))

(declare-fun lt!25782 () Unit!1685)

(declare-fun from!355 () (_ BitVec 32))

(declare-fun lemmaListMapContainsThenArrayContainsFrom!34 (array!3737 array!3739 (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 (_ BitVec 64) (_ BitVec 32) Int) Unit!1685)

(assert (=> b!62024 (= lt!25782 (lemmaListMapContainsThenArrayContainsFrom!34 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (_values!2070 (v!2412 (underlying!229 thiss!992))) (mask!5992 (v!2412 (underlying!229 thiss!992))) (extraKeys!1966 (v!2412 (underlying!229 thiss!992))) (zeroValue!1999 (v!2412 (underlying!229 thiss!992))) (minValue!1999 (v!2412 (underlying!229 thiss!992))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2087 (v!2412 (underlying!229 thiss!992)))))))

(declare-fun arrayContainsKey!0 (array!3737 (_ BitVec 64) (_ BitVec 32)) Bool)

(assert (=> b!62024 (arrayContainsKey!0 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355))))

(declare-fun lt!25783 () Unit!1685)

(declare-fun lemmaNoDuplicateFromThenFromBigger!0 (array!3737 (_ BitVec 32) (_ BitVec 32)) Unit!1685)

(assert (=> b!62024 (= lt!25783 (lemmaNoDuplicateFromThenFromBigger!0 (_keys!3718 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000000000000000 from!355))))

(declare-datatypes ((List!1446 0))(
  ( (Nil!1443) (Cons!1442 (h!2025 (_ BitVec 64)) (t!4831 List!1446)) )
))
(declare-fun arrayNoDuplicates!0 (array!3737 (_ BitVec 32) List!1446) Bool)

(assert (=> b!62024 (arrayNoDuplicates!0 (_keys!3718 (v!2412 (underlying!229 thiss!992))) from!355 Nil!1443)))

(declare-fun lt!25778 () Unit!1685)

(declare-fun lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (array!3737 (_ BitVec 32) (_ BitVec 64) List!1446) Unit!1685)

(assert (=> b!62024 (= lt!25778 (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (Cons!1442 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) Nil!1443)))))

(assert (=> b!62024 false))

(declare-fun mapNonEmpty!2937 () Bool)

(declare-fun mapRes!2937 () Bool)

(declare-fun tp!8110 () Bool)

(declare-fun e!40734 () Bool)

(assert (=> mapNonEmpty!2937 (= mapRes!2937 (and tp!8110 e!40734))))

(declare-fun mapKey!2938 () (_ BitVec 32))

(declare-fun mapRest!2937 () (Array (_ BitVec 32) ValueCell!863))

(declare-fun mapValue!2938 () ValueCell!863)

(assert (=> mapNonEmpty!2937 (= (arr!1787 (_values!2070 newMap!16)) (store mapRest!2937 mapKey!2938 mapValue!2938))))

(declare-fun b!62025 () Bool)

(declare-fun e!40725 () Bool)

(declare-fun e!40736 () Bool)

(assert (=> b!62025 (= e!40725 e!40736)))

(declare-fun res!34104 () Bool)

(assert (=> b!62025 (=> (not res!34104) (not e!40736))))

(declare-datatypes ((tuple2!2050 0))(
  ( (tuple2!2051 (_1!1036 Bool) (_2!1036 LongMapFixedSize!634)) )
))
(declare-fun lt!25779 () tuple2!2050)

(assert (=> b!62025 (= res!34104 (and (_1!1036 lt!25779) (bvsgt from!355 #b00000000000000000000000000000000)))))

(declare-fun lt!25777 () Unit!1685)

(assert (=> b!62025 (= lt!25777 e!40723)))

(declare-datatypes ((tuple2!2052 0))(
  ( (tuple2!2053 (_1!1037 (_ BitVec 64)) (_2!1037 V!2865)) )
))
(declare-datatypes ((List!1447 0))(
  ( (Nil!1444) (Cons!1443 (h!2026 tuple2!2052) (t!4832 List!1447)) )
))
(declare-datatypes ((ListLongMap!1363 0))(
  ( (ListLongMap!1364 (toList!697 List!1447)) )
))
(declare-fun lt!25781 () ListLongMap!1363)

(declare-fun c!8225 () Bool)

(declare-fun contains!690 (ListLongMap!1363 (_ BitVec 64)) Bool)

(assert (=> b!62025 (= c!8225 (contains!690 lt!25781 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(declare-fun update!88 (LongMapFixedSize!634 (_ BitVec 64) V!2865) tuple2!2050)

(declare-fun get!1089 (ValueCell!863 V!2865) V!2865)

(declare-fun dynLambda!312 (Int (_ BitVec 64)) V!2865)

(assert (=> b!62025 (= lt!25779 (update!88 newMap!16 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!62026 () Bool)

(declare-fun e!40724 () Bool)

(declare-fun e!40735 () Bool)

(assert (=> b!62026 (= e!40724 (and e!40735 mapRes!2937))))

(declare-fun condMapEmpty!2938 () Bool)

(declare-fun mapDefault!2938 () ValueCell!863)

(assert (=> b!62026 (= condMapEmpty!2938 (= (arr!1787 (_values!2070 newMap!16)) ((as const (Array (_ BitVec 32) ValueCell!863)) mapDefault!2938)))))

(declare-fun mapNonEmpty!2938 () Bool)

(declare-fun mapRes!2938 () Bool)

(declare-fun tp!8107 () Bool)

(assert (=> mapNonEmpty!2938 (= mapRes!2938 (and tp!8107 e!40729))))

(declare-fun mapRest!2938 () (Array (_ BitVec 32) ValueCell!863))

(declare-fun mapValue!2937 () ValueCell!863)

(declare-fun mapKey!2937 () (_ BitVec 32))

(assert (=> mapNonEmpty!2938 (= (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) (store mapRest!2938 mapKey!2937 mapValue!2937))))

(declare-fun b!62027 () Bool)

(declare-fun res!34105 () Bool)

(assert (=> b!62027 (=> (not res!34105) (not e!40736))))

(declare-fun validMask!0 ((_ BitVec 32)) Bool)

(assert (=> b!62027 (= res!34105 (validMask!0 (mask!5992 (v!2412 (underlying!229 thiss!992)))))))

(declare-fun mapIsEmpty!2937 () Bool)

(assert (=> mapIsEmpty!2937 mapRes!2938))

(declare-fun mapIsEmpty!2938 () Bool)

(assert (=> mapIsEmpty!2938 mapRes!2937))

(declare-fun b!62028 () Bool)

(declare-fun res!34106 () Bool)

(assert (=> b!62028 (=> (not res!34106) (not e!40721))))

(declare-fun valid!267 (LongMapFixedSize!634) Bool)

(assert (=> b!62028 (= res!34106 (valid!267 newMap!16))))

(declare-fun array_inv!1109 (array!3737) Bool)

(declare-fun array_inv!1110 (array!3739) Bool)

(assert (=> b!62029 (= e!40733 (and tp!8109 tp_is_empty!2413 (array_inv!1109 (_keys!3718 newMap!16)) (array_inv!1110 (_values!2070 newMap!16)) e!40724))))

(declare-fun b!62030 () Bool)

(assert (=> b!62030 (= e!40735 tp_is_empty!2413)))

(declare-fun b!62031 () Bool)

(declare-fun Unit!1688 () Unit!1685)

(assert (=> b!62031 (= e!40723 Unit!1688)))

(declare-fun e!40722 () Bool)

(declare-fun e!40727 () Bool)

(assert (=> b!62032 (= e!40727 (and tp!8108 tp_is_empty!2413 (array_inv!1109 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (array_inv!1110 (_values!2070 (v!2412 (underlying!229 thiss!992)))) e!40722))))

(declare-fun b!62033 () Bool)

(declare-fun e!40726 () Bool)

(assert (=> b!62033 (= e!40722 (and e!40726 mapRes!2938))))

(declare-fun condMapEmpty!2937 () Bool)

(declare-fun mapDefault!2937 () ValueCell!863)

(assert (=> b!62033 (= condMapEmpty!2937 (= (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) ((as const (Array (_ BitVec 32) ValueCell!863)) mapDefault!2937)))))

(declare-fun b!62034 () Bool)

(declare-fun e!40730 () Bool)

(assert (=> b!62034 (= e!40732 e!40730)))

(declare-fun b!62035 () Bool)

(assert (=> b!62035 (= e!40736 (and (= (size!2020 (_values!2070 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 (mask!5992 (v!2412 (underlying!229 thiss!992))))) (= (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (size!2020 (_values!2070 (v!2412 (underlying!229 thiss!992))))) (bvsge (mask!5992 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000000000000000) (bvsge (extraKeys!1966 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000000000000000) (bvsgt (extraKeys!1966 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000000000000011)))))

(declare-fun b!62036 () Bool)

(assert (=> b!62036 (= e!40721 e!40725)))

(declare-fun res!34103 () Bool)

(assert (=> b!62036 (=> (not res!34103) (not e!40725))))

(declare-fun lt!25780 () ListLongMap!1363)

(assert (=> b!62036 (= res!34103 (and (= lt!25780 lt!25781) (not (= (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun map!1113 (LongMapFixedSize!634) ListLongMap!1363)

(assert (=> b!62036 (= lt!25781 (map!1113 newMap!16))))

(declare-fun getCurrentListMap!393 (array!3737 array!3739 (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 (_ BitVec 32) Int) ListLongMap!1363)

(assert (=> b!62036 (= lt!25780 (getCurrentListMap!393 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (_values!2070 (v!2412 (underlying!229 thiss!992))) (mask!5992 (v!2412 (underlying!229 thiss!992))) (extraKeys!1966 (v!2412 (underlying!229 thiss!992))) (zeroValue!1999 (v!2412 (underlying!229 thiss!992))) (minValue!1999 (v!2412 (underlying!229 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2087 (v!2412 (underlying!229 thiss!992)))))))

(declare-fun b!62037 () Bool)

(assert (=> b!62037 (= e!40726 tp_is_empty!2413)))

(declare-fun b!62038 () Bool)

(assert (=> b!62038 (= e!40734 tp_is_empty!2413)))

(declare-fun b!62039 () Bool)

(assert (=> b!62039 (= e!40730 e!40727)))

(declare-fun b!62040 () Bool)

(declare-fun res!34107 () Bool)

(assert (=> b!62040 (=> (not res!34107) (not e!40721))))

(assert (=> b!62040 (= res!34107 (and (bvsge from!355 #b00000000000000000000000000000000) (bvslt from!355 (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992)))))))))

(assert (= (and start!8874 res!34102) b!62040))

(assert (= (and b!62040 res!34107) b!62028))

(assert (= (and b!62028 res!34106) b!62022))

(assert (= (and b!62022 res!34101) b!62036))

(assert (= (and b!62036 res!34103) b!62025))

(assert (= (and b!62025 c!8225) b!62024))

(assert (= (and b!62025 (not c!8225)) b!62031))

(assert (= (and b!62025 res!34104) b!62027))

(assert (= (and b!62027 res!34105) b!62035))

(assert (= (and b!62033 condMapEmpty!2937) mapIsEmpty!2937))

(assert (= (and b!62033 (not condMapEmpty!2937)) mapNonEmpty!2938))

(get-info :version)

(assert (= (and mapNonEmpty!2938 ((_ is ValueCellFull!863) mapValue!2937)) b!62023))

(assert (= (and b!62033 ((_ is ValueCellFull!863) mapDefault!2937)) b!62037))

(assert (= b!62032 b!62033))

(assert (= b!62039 b!62032))

(assert (= b!62034 b!62039))

(assert (= start!8874 b!62034))

(assert (= (and b!62026 condMapEmpty!2938) mapIsEmpty!2938))

(assert (= (and b!62026 (not condMapEmpty!2938)) mapNonEmpty!2937))

(assert (= (and mapNonEmpty!2937 ((_ is ValueCellFull!863) mapValue!2938)) b!62038))

(assert (= (and b!62026 ((_ is ValueCellFull!863) mapDefault!2938)) b!62030))

(assert (= b!62029 b!62026))

(assert (= start!8874 b!62029))

(declare-fun b_lambda!2765 () Bool)

(assert (=> (not b_lambda!2765) (not b!62025)))

(declare-fun t!4828 () Bool)

(declare-fun tb!1361 () Bool)

(assert (=> (and b!62032 (= (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) (defaultEntry!2087 (v!2412 (underlying!229 thiss!992)))) t!4828) tb!1361))

(declare-fun result!2435 () Bool)

(assert (=> tb!1361 (= result!2435 tp_is_empty!2413)))

(assert (=> b!62025 t!4828))

(declare-fun b_and!3785 () Bool)

(assert (= b_and!3781 (and (=> t!4828 result!2435) b_and!3785)))

(declare-fun tb!1363 () Bool)

(declare-fun t!4830 () Bool)

(assert (=> (and b!62029 (= (defaultEntry!2087 newMap!16) (defaultEntry!2087 (v!2412 (underlying!229 thiss!992)))) t!4830) tb!1363))

(declare-fun result!2439 () Bool)

(assert (= result!2439 result!2435))

(assert (=> b!62025 t!4830))

(declare-fun b_and!3787 () Bool)

(assert (= b_and!3783 (and (=> t!4830 result!2439) b_and!3787)))

(declare-fun m!55473 () Bool)

(assert (=> b!62032 m!55473))

(declare-fun m!55475 () Bool)

(assert (=> b!62032 m!55475))

(declare-fun m!55477 () Bool)

(assert (=> b!62028 m!55477))

(declare-fun m!55479 () Bool)

(assert (=> start!8874 m!55479))

(declare-fun m!55481 () Bool)

(assert (=> b!62036 m!55481))

(declare-fun m!55483 () Bool)

(assert (=> b!62036 m!55483))

(declare-fun m!55485 () Bool)

(assert (=> b!62036 m!55485))

(declare-fun m!55487 () Bool)

(assert (=> b!62029 m!55487))

(declare-fun m!55489 () Bool)

(assert (=> b!62029 m!55489))

(declare-fun m!55491 () Bool)

(assert (=> mapNonEmpty!2938 m!55491))

(declare-fun m!55493 () Bool)

(assert (=> b!62024 m!55493))

(declare-fun m!55495 () Bool)

(assert (=> b!62024 m!55495))

(assert (=> b!62024 m!55481))

(declare-fun m!55497 () Bool)

(assert (=> b!62024 m!55497))

(assert (=> b!62024 m!55481))

(assert (=> b!62024 m!55481))

(declare-fun m!55499 () Bool)

(assert (=> b!62024 m!55499))

(assert (=> b!62024 m!55481))

(declare-fun m!55501 () Bool)

(assert (=> b!62024 m!55501))

(declare-fun m!55503 () Bool)

(assert (=> b!62025 m!55503))

(declare-fun m!55505 () Bool)

(assert (=> b!62025 m!55505))

(declare-fun m!55507 () Bool)

(assert (=> b!62025 m!55507))

(assert (=> b!62025 m!55481))

(declare-fun m!55509 () Bool)

(assert (=> b!62025 m!55509))

(assert (=> b!62025 m!55481))

(assert (=> b!62025 m!55505))

(assert (=> b!62025 m!55481))

(assert (=> b!62025 m!55507))

(declare-fun m!55511 () Bool)

(assert (=> b!62025 m!55511))

(assert (=> b!62025 m!55503))

(declare-fun m!55513 () Bool)

(assert (=> b!62027 m!55513))

(declare-fun m!55515 () Bool)

(assert (=> mapNonEmpty!2937 m!55515))

(check-sat (not b!62032) (not b!62029) (not b_lambda!2765) (not b_next!1995) b_and!3785 (not b!62024) (not mapNonEmpty!2938) (not b!62027) b_and!3787 tp_is_empty!2413 (not start!8874) (not b!62025) (not mapNonEmpty!2937) (not b!62036) (not b_next!1993) (not b!62028))
(check-sat b_and!3785 b_and!3787 (not b_next!1993) (not b_next!1995))
(get-model)

(declare-fun b_lambda!2771 () Bool)

(assert (= b_lambda!2765 (or (and b!62032 b_free!1993) (and b!62029 b_free!1995 (= (defaultEntry!2087 newMap!16) (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))))) b_lambda!2771)))

(check-sat (not b!62032) (not b!62029) (not b_lambda!2771) (not b_next!1995) b_and!3785 (not b!62024) (not mapNonEmpty!2938) (not b!62027) b_and!3787 tp_is_empty!2413 (not start!8874) (not b!62025) (not mapNonEmpty!2937) (not b!62036) (not b_next!1993) (not b!62028))
(check-sat b_and!3785 b_and!3787 (not b_next!1993) (not b_next!1995))
(get-model)

(declare-fun d!12545 () Bool)

(declare-fun res!34156 () Bool)

(declare-fun e!40835 () Bool)

(assert (=> d!12545 (=> (not res!34156) (not e!40835))))

(declare-fun simpleValid!44 (LongMapFixedSize!634) Bool)

(assert (=> d!12545 (= res!34156 (simpleValid!44 newMap!16))))

(assert (=> d!12545 (= (valid!267 newMap!16) e!40835)))

(declare-fun b!62167 () Bool)

(declare-fun res!34157 () Bool)

(assert (=> b!62167 (=> (not res!34157) (not e!40835))))

(declare-fun arrayCountValidKeys!0 (array!3737 (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!62167 (= res!34157 (= (arrayCountValidKeys!0 (_keys!3718 newMap!16) #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))) (_size!366 newMap!16)))))

(declare-fun b!62168 () Bool)

(declare-fun res!34158 () Bool)

(assert (=> b!62168 (=> (not res!34158) (not e!40835))))

(declare-fun arrayForallSeekEntryOrOpenFound!0 ((_ BitVec 32) array!3737 (_ BitVec 32)) Bool)

(assert (=> b!62168 (= res!34158 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3718 newMap!16) (mask!5992 newMap!16)))))

(declare-fun b!62169 () Bool)

(assert (=> b!62169 (= e!40835 (arrayNoDuplicates!0 (_keys!3718 newMap!16) #b00000000000000000000000000000000 Nil!1443))))

(assert (= (and d!12545 res!34156) b!62167))

(assert (= (and b!62167 res!34157) b!62168))

(assert (= (and b!62168 res!34158) b!62169))

(declare-fun m!55605 () Bool)

(assert (=> d!12545 m!55605))

(declare-fun m!55607 () Bool)

(assert (=> b!62167 m!55607))

(declare-fun m!55609 () Bool)

(assert (=> b!62168 m!55609))

(declare-fun m!55611 () Bool)

(assert (=> b!62169 m!55611))

(assert (=> b!62028 d!12545))

(declare-fun d!12547 () Bool)

(assert (=> d!12547 (= (array_inv!1109 (_keys!3718 newMap!16)) (bvsge (size!2019 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!62029 d!12547))

(declare-fun d!12549 () Bool)

(assert (=> d!12549 (= (array_inv!1110 (_values!2070 newMap!16)) (bvsge (size!2020 (_values!2070 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!62029 d!12549))

(declare-fun d!12551 () Bool)

(assert (=> d!12551 (= (array_inv!1109 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvsge (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!62032 d!12551))

(declare-fun d!12553 () Bool)

(assert (=> d!12553 (= (array_inv!1110 (_values!2070 (v!2412 (underlying!229 thiss!992)))) (bvsge (size!2020 (_values!2070 (v!2412 (underlying!229 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!62032 d!12553))

(declare-fun d!12555 () Bool)

(declare-fun e!40840 () Bool)

(assert (=> d!12555 e!40840))

(declare-fun res!34161 () Bool)

(assert (=> d!12555 (=> res!34161 e!40840)))

(declare-fun lt!25837 () Bool)

(assert (=> d!12555 (= res!34161 (not lt!25837))))

(declare-fun lt!25835 () Bool)

(assert (=> d!12555 (= lt!25837 lt!25835)))

(declare-fun lt!25836 () Unit!1685)

(declare-fun e!40841 () Unit!1685)

(assert (=> d!12555 (= lt!25836 e!40841)))

(declare-fun c!8234 () Bool)

(assert (=> d!12555 (= c!8234 lt!25835)))

(declare-fun containsKey!128 (List!1447 (_ BitVec 64)) Bool)

(assert (=> d!12555 (= lt!25835 (containsKey!128 (toList!697 lt!25781) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(assert (=> d!12555 (= (contains!690 lt!25781 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) lt!25837)))

(declare-fun b!62176 () Bool)

(declare-fun lt!25834 () Unit!1685)

(assert (=> b!62176 (= e!40841 lt!25834)))

(declare-fun lemmaContainsKeyImpliesGetValueByKeyDefined!77 (List!1447 (_ BitVec 64)) Unit!1685)

(assert (=> b!62176 (= lt!25834 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 lt!25781) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(declare-datatypes ((Option!130 0))(
  ( (Some!129 (v!2418 V!2865)) (None!128) )
))
(declare-fun isDefined!78 (Option!130) Bool)

(declare-fun getValueByKey!124 (List!1447 (_ BitVec 64)) Option!130)

(assert (=> b!62176 (isDefined!78 (getValueByKey!124 (toList!697 lt!25781) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(declare-fun b!62177 () Bool)

(declare-fun Unit!1696 () Unit!1685)

(assert (=> b!62177 (= e!40841 Unit!1696)))

(declare-fun b!62178 () Bool)

(assert (=> b!62178 (= e!40840 (isDefined!78 (getValueByKey!124 (toList!697 lt!25781) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355))))))

(assert (= (and d!12555 c!8234) b!62176))

(assert (= (and d!12555 (not c!8234)) b!62177))

(assert (= (and d!12555 (not res!34161)) b!62178))

(assert (=> d!12555 m!55481))

(declare-fun m!55613 () Bool)

(assert (=> d!12555 m!55613))

(assert (=> b!62176 m!55481))

(declare-fun m!55615 () Bool)

(assert (=> b!62176 m!55615))

(assert (=> b!62176 m!55481))

(declare-fun m!55617 () Bool)

(assert (=> b!62176 m!55617))

(assert (=> b!62176 m!55617))

(declare-fun m!55619 () Bool)

(assert (=> b!62176 m!55619))

(assert (=> b!62178 m!55481))

(assert (=> b!62178 m!55617))

(assert (=> b!62178 m!55617))

(assert (=> b!62178 m!55619))

(assert (=> b!62025 d!12555))

(declare-fun b!62259 () Bool)

(declare-fun e!40895 () tuple2!2050)

(declare-fun lt!25894 () tuple2!2050)

(assert (=> b!62259 (= e!40895 (tuple2!2051 (_1!1036 lt!25894) (_2!1036 lt!25894)))))

(declare-fun call!4876 () tuple2!2050)

(assert (=> b!62259 (= lt!25894 call!4876)))

(declare-fun call!4875 () Unit!1685)

(declare-fun bm!4851 () Bool)

(declare-fun lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!17 (array!3737 array!3739 (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 (_ BitVec 64) Int) Unit!1685)

(assert (=> bm!4851 (= call!4875 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!17 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (defaultEntry!2087 newMap!16)))))

(declare-fun call!4860 () ListLongMap!1363)

(declare-fun b!62260 () Bool)

(declare-fun e!40897 () Bool)

(declare-fun call!4874 () ListLongMap!1363)

(declare-fun +!83 (ListLongMap!1363 tuple2!2052) ListLongMap!1363)

(assert (=> b!62260 (= e!40897 (= call!4874 (+!83 call!4860 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!62261 () Bool)

(declare-fun res!34190 () Bool)

(declare-fun e!40904 () Bool)

(assert (=> b!62261 (=> (not res!34190) (not e!40904))))

(declare-datatypes ((SeekEntryResult!232 0))(
  ( (MissingZero!232 (index!3053 (_ BitVec 32))) (Found!232 (index!3054 (_ BitVec 32))) (Intermediate!232 (undefined!1044 Bool) (index!3055 (_ BitVec 32)) (x!10309 (_ BitVec 32))) (Undefined!232) (MissingVacant!232 (index!3056 (_ BitVec 32))) )
))
(declare-fun lt!25896 () SeekEntryResult!232)

(assert (=> b!62261 (= res!34190 (= (select (arr!1786 (_keys!3718 newMap!16)) (index!3053 lt!25896)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun c!8271 () Bool)

(declare-fun call!4866 () ListLongMap!1363)

(declare-fun e!40887 () ListLongMap!1363)

(declare-fun c!8266 () Bool)

(declare-fun bm!4852 () Bool)

(assert (=> bm!4852 (= call!4866 (+!83 e!40887 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun c!8268 () Bool)

(assert (=> bm!4852 (= c!8268 c!8266)))

(declare-fun e!40889 () Bool)

(declare-fun lt!25916 () SeekEntryResult!232)

(declare-fun b!62262 () Bool)

(assert (=> b!62262 (= e!40889 (= (select (arr!1786 (_keys!3718 newMap!16)) (index!3054 lt!25916)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(declare-fun lt!25902 () SeekEntryResult!232)

(declare-fun call!4864 () ListLongMap!1363)

(declare-fun bm!4853 () Bool)

(assert (=> bm!4853 (= call!4864 (getCurrentListMap!393 (_keys!3718 newMap!16) (ite c!8266 (_values!2070 newMap!16) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (index!3054 lt!25902) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16)))) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun bm!4854 () Bool)

(declare-fun c!8270 () Bool)

(declare-fun call!4870 () Bool)

(declare-fun lt!25892 () SeekEntryResult!232)

(declare-fun c!8265 () Bool)

(declare-fun c!8272 () Bool)

(declare-fun lt!25906 () SeekEntryResult!232)

(declare-fun c!8262 () Bool)

(declare-fun c!8263 () Bool)

(declare-fun inRange!0 ((_ BitVec 32) (_ BitVec 32)) Bool)

(assert (=> bm!4854 (= call!4870 (inRange!0 (ite c!8262 (ite c!8272 (index!3054 lt!25892) (ite c!8263 (index!3053 lt!25896) (index!3056 lt!25896))) (ite c!8270 (index!3054 lt!25916) (ite c!8265 (index!3053 lt!25906) (index!3056 lt!25906)))) (mask!5992 newMap!16)))))

(declare-fun bm!4855 () Bool)

(declare-fun call!4862 () Bool)

(declare-fun call!4873 () Bool)

(assert (=> bm!4855 (= call!4862 call!4873)))

(declare-fun b!62263 () Bool)

(declare-fun e!40901 () Bool)

(declare-fun call!4877 () Bool)

(assert (=> b!62263 (= e!40901 (not call!4877))))

(declare-fun b!62264 () Bool)

(declare-fun lt!25903 () Unit!1685)

(declare-fun e!40892 () Unit!1685)

(assert (=> b!62264 (= lt!25903 e!40892)))

(declare-fun call!4872 () Bool)

(assert (=> b!62264 (= c!8272 call!4872)))

(declare-fun e!40896 () tuple2!2050)

(assert (=> b!62264 (= e!40896 (tuple2!2051 false newMap!16))))

(declare-fun bm!4856 () Bool)

(declare-fun call!4869 () SeekEntryResult!232)

(declare-fun call!4857 () SeekEntryResult!232)

(assert (=> bm!4856 (= call!4869 call!4857)))

(declare-fun b!62265 () Bool)

(declare-fun e!40884 () tuple2!2050)

(assert (=> b!62265 (= e!40895 e!40884)))

(declare-fun c!8261 () Bool)

(assert (=> b!62265 (= c!8261 ((_ is MissingZero!232) lt!25902))))

(declare-fun b!62266 () Bool)

(declare-fun c!8269 () Bool)

(assert (=> b!62266 (= c!8269 ((_ is MissingVacant!232) lt!25906))))

(declare-fun e!40891 () Bool)

(declare-fun e!40900 () Bool)

(assert (=> b!62266 (= e!40891 e!40900)))

(declare-fun bm!4857 () Bool)

(declare-fun call!4863 () Bool)

(assert (=> bm!4857 (= call!4863 call!4870)))

(declare-fun b!62267 () Bool)

(declare-fun e!40893 () Bool)

(assert (=> b!62267 (= e!40893 (= call!4874 call!4860))))

(declare-fun b!62268 () Bool)

(declare-fun lt!25899 () tuple2!2050)

(assert (=> b!62268 (= lt!25899 call!4876)))

(assert (=> b!62268 (= e!40884 (tuple2!2051 (_1!1036 lt!25899) (_2!1036 lt!25899)))))

(declare-fun b!62269 () Bool)

(assert (=> b!62269 (= e!40887 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun bm!4858 () Bool)

(assert (=> bm!4858 (= call!4860 (map!1113 newMap!16))))

(declare-fun bm!4859 () Bool)

(declare-fun seekEntryOrOpen!0 ((_ BitVec 64) array!3737 (_ BitVec 32)) SeekEntryResult!232)

(assert (=> bm!4859 (= call!4857 (seekEntryOrOpen!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (_keys!3718 newMap!16) (mask!5992 newMap!16)))))

(declare-fun b!62270 () Bool)

(declare-fun c!8264 () Bool)

(assert (=> b!62270 (= c!8264 ((_ is MissingVacant!232) lt!25896))))

(declare-fun e!40888 () Bool)

(declare-fun e!40886 () Bool)

(assert (=> b!62270 (= e!40888 e!40886)))

(declare-fun b!62271 () Bool)

(declare-fun lt!25908 () Unit!1685)

(declare-fun lt!25900 () Unit!1685)

(assert (=> b!62271 (= lt!25908 lt!25900)))

(assert (=> b!62271 call!4872))

(declare-fun lt!25918 () array!3739)

(declare-fun lemmaValidKeyInArrayIsInListMap!76 (array!3737 array!3739 (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 (_ BitVec 32) Int) Unit!1685)

(assert (=> b!62271 (= lt!25900 (lemmaValidKeyInArrayIsInListMap!76 (_keys!3718 newMap!16) lt!25918 (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (index!3054 lt!25902) (defaultEntry!2087 newMap!16)))))

(assert (=> b!62271 (= lt!25918 (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (index!3054 lt!25902) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16))))))

(declare-fun lt!25913 () Unit!1685)

(declare-fun lt!25914 () Unit!1685)

(assert (=> b!62271 (= lt!25913 lt!25914)))

(assert (=> b!62271 (= call!4866 call!4864)))

(declare-fun lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!17 (array!3737 array!3739 (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 (_ BitVec 32) (_ BitVec 64) V!2865 Int) Unit!1685)

(assert (=> b!62271 (= lt!25914 (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!17 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (index!3054 lt!25902) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2087 newMap!16)))))

(declare-fun lt!25904 () Unit!1685)

(declare-fun e!40890 () Unit!1685)

(assert (=> b!62271 (= lt!25904 e!40890)))

(assert (=> b!62271 (= c!8270 (contains!690 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(assert (=> b!62271 (= e!40884 (tuple2!2051 true (LongMapFixedSize!635 (defaultEntry!2087 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (_size!366 newMap!16) (_keys!3718 newMap!16) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (index!3054 lt!25902) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16))) (_vacant!366 newMap!16))))))

(declare-fun d!12557 () Bool)

(declare-fun e!40898 () Bool)

(assert (=> d!12557 e!40898))

(declare-fun res!34195 () Bool)

(assert (=> d!12557 (=> (not res!34195) (not e!40898))))

(declare-fun lt!25898 () tuple2!2050)

(assert (=> d!12557 (= res!34195 (valid!267 (_2!1036 lt!25898)))))

(declare-fun e!40894 () tuple2!2050)

(assert (=> d!12557 (= lt!25898 e!40894)))

(assert (=> d!12557 (= c!8266 (= (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (bvneg (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355))))))

(assert (=> d!12557 (valid!267 newMap!16)))

(assert (=> d!12557 (= (update!88 newMap!16 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) lt!25898)))

(declare-fun bm!4860 () Bool)

(declare-fun call!4856 () Bool)

(assert (=> bm!4860 (= call!4856 (arrayContainsKey!0 (_keys!3718 newMap!16) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!62272 () Bool)

(assert (=> b!62272 (= e!40893 e!40897)))

(declare-fun res!34191 () Bool)

(assert (=> b!62272 (= res!34191 (contains!690 call!4874 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(assert (=> b!62272 (=> (not res!34191) (not e!40897))))

(declare-fun b!62273 () Bool)

(declare-fun c!8267 () Bool)

(assert (=> b!62273 (= c!8267 ((_ is MissingVacant!232) lt!25902))))

(assert (=> b!62273 (= e!40896 e!40895)))

(declare-fun call!4868 () ListLongMap!1363)

(declare-fun bm!4861 () Bool)

(assert (=> bm!4861 (= call!4872 (contains!690 call!4868 (ite c!8262 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (select (arr!1786 (_keys!3718 newMap!16)) (index!3054 lt!25902)))))))

(declare-fun b!62274 () Bool)

(assert (=> b!62274 (= e!40894 e!40896)))

(assert (=> b!62274 (= lt!25902 (seekEntryOrOpen!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (_keys!3718 newMap!16) (mask!5992 newMap!16)))))

(assert (=> b!62274 (= c!8262 ((_ is Undefined!232) lt!25902))))

(declare-fun b!62275 () Bool)

(assert (=> b!62275 (= e!40900 e!40901)))

(declare-fun res!34202 () Bool)

(assert (=> b!62275 (= res!34202 call!4862)))

(assert (=> b!62275 (=> (not res!34202) (not e!40901))))

(declare-fun b!62276 () Bool)

(declare-fun e!40903 () Bool)

(assert (=> b!62276 (= e!40886 e!40903)))

(declare-fun res!34199 () Bool)

(declare-fun call!4859 () Bool)

(assert (=> b!62276 (= res!34199 call!4859)))

(assert (=> b!62276 (=> (not res!34199) (not e!40903))))

(declare-fun b!62277 () Bool)

(declare-fun lt!25911 () Unit!1685)

(declare-fun lt!25907 () Unit!1685)

(assert (=> b!62277 (= lt!25911 lt!25907)))

(declare-fun call!4854 () ListLongMap!1363)

(declare-fun call!4871 () ListLongMap!1363)

(assert (=> b!62277 (= call!4854 call!4871)))

(declare-fun lt!25915 () (_ BitVec 32))

(declare-fun lemmaChangeLongMinValueKeyThenAddPairToListMap!17 (array!3737 array!3739 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 V!2865 Int) Unit!1685)

(assert (=> b!62277 (= lt!25907 (lemmaChangeLongMinValueKeyThenAddPairToListMap!17 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) lt!25915 (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2087 newMap!16)))))

(assert (=> b!62277 (= lt!25915 (bvor (extraKeys!1966 newMap!16) #b00000000000000000000000000000010))))

(declare-fun e!40885 () tuple2!2050)

(assert (=> b!62277 (= e!40885 (tuple2!2051 true (LongMapFixedSize!635 (defaultEntry!2087 newMap!16) (mask!5992 newMap!16) (bvor (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) (zeroValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (_size!366 newMap!16) (_keys!3718 newMap!16) (_values!2070 newMap!16) (_vacant!366 newMap!16))))))

(declare-fun bm!4862 () Bool)

(declare-fun call!4861 () SeekEntryResult!232)

(assert (=> bm!4862 (= call!4861 call!4857)))

(declare-fun b!62278 () Bool)

(declare-fun call!4858 () Bool)

(assert (=> b!62278 (= e!40904 (not call!4858))))

(declare-fun b!62279 () Bool)

(assert (=> b!62279 (= e!40886 ((_ is Undefined!232) lt!25896))))

(declare-fun bm!4863 () Bool)

(assert (=> bm!4863 (= call!4874 (map!1113 (_2!1036 lt!25898)))))

(declare-fun b!62280 () Bool)

(declare-fun res!34203 () Bool)

(declare-fun e!40902 () Bool)

(assert (=> b!62280 (=> (not res!34203) (not e!40902))))

(assert (=> b!62280 (= res!34203 (= (select (arr!1786 (_keys!3718 newMap!16)) (index!3053 lt!25906)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62281 () Bool)

(declare-fun call!4867 () ListLongMap!1363)

(assert (=> b!62281 (= e!40887 call!4867)))

(declare-fun bm!4864 () Bool)

(assert (=> bm!4864 (= call!4859 call!4863)))

(declare-fun bm!4865 () Bool)

(assert (=> bm!4865 (= call!4873 call!4870)))

(declare-fun b!62282 () Bool)

(declare-fun res!34200 () Bool)

(assert (=> b!62282 (= res!34200 call!4863)))

(declare-fun e!40899 () Bool)

(assert (=> b!62282 (=> (not res!34200) (not e!40899))))

(declare-fun b!62283 () Bool)

(assert (=> b!62283 (= e!40899 (= (select (arr!1786 (_keys!3718 newMap!16)) (index!3054 lt!25892)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(declare-fun b!62284 () Bool)

(declare-fun res!34194 () Bool)

(assert (=> b!62284 (=> (not res!34194) (not e!40902))))

(assert (=> b!62284 (= res!34194 call!4862)))

(assert (=> b!62284 (= e!40891 e!40902)))

(declare-fun b!62285 () Bool)

(assert (=> b!62285 (= e!40900 ((_ is Undefined!232) lt!25906))))

(declare-fun bm!4866 () Bool)

(declare-fun call!4855 () ListLongMap!1363)

(assert (=> bm!4866 (= call!4868 call!4855)))

(declare-fun b!62286 () Bool)

(declare-fun lt!25910 () Unit!1685)

(assert (=> b!62286 (= e!40890 lt!25910)))

(declare-fun call!4865 () Unit!1685)

(assert (=> b!62286 (= lt!25910 call!4865)))

(assert (=> b!62286 (= lt!25916 call!4861)))

(declare-fun res!34201 () Bool)

(assert (=> b!62286 (= res!34201 ((_ is Found!232) lt!25916))))

(assert (=> b!62286 (=> (not res!34201) (not e!40889))))

(assert (=> b!62286 e!40889))

(declare-fun b!62287 () Bool)

(declare-fun res!34193 () Bool)

(assert (=> b!62287 (= res!34193 (= (select (arr!1786 (_keys!3718 newMap!16)) (index!3056 lt!25906)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62287 (=> (not res!34193) (not e!40901))))

(declare-fun b!62288 () Bool)

(assert (=> b!62288 (= e!40898 e!40893)))

(declare-fun c!8273 () Bool)

(assert (=> b!62288 (= c!8273 (_1!1036 lt!25898))))

(declare-fun b!62289 () Bool)

(declare-fun Unit!1697 () Unit!1685)

(assert (=> b!62289 (= e!40892 Unit!1697)))

(declare-fun lt!25909 () Unit!1685)

(assert (=> b!62289 (= lt!25909 call!4865)))

(assert (=> b!62289 (= lt!25892 call!4869)))

(declare-fun res!34198 () Bool)

(assert (=> b!62289 (= res!34198 ((_ is Found!232) lt!25892))))

(assert (=> b!62289 (=> (not res!34198) (not e!40899))))

(assert (=> b!62289 e!40899))

(declare-fun lt!25912 () Unit!1685)

(assert (=> b!62289 (= lt!25912 lt!25909)))

(assert (=> b!62289 false))

(declare-fun bm!4867 () Bool)

(assert (=> bm!4867 (= call!4858 call!4856)))

(declare-fun b!62290 () Bool)

(assert (=> b!62290 (= e!40903 (not call!4858))))

(declare-fun bm!4868 () Bool)

(assert (=> bm!4868 (= call!4871 call!4855)))

(declare-fun bm!4869 () Bool)

(assert (=> bm!4869 (= call!4877 call!4856)))

(declare-fun bm!4870 () Bool)

(declare-fun updateHelperNewKey!17 (LongMapFixedSize!634 (_ BitVec 64) V!2865 (_ BitVec 32)) tuple2!2050)

(assert (=> bm!4870 (= call!4876 (updateHelperNewKey!17 newMap!16 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902))))))

(declare-fun b!62291 () Bool)

(declare-fun res!34197 () Bool)

(assert (=> b!62291 (= res!34197 (= (select (arr!1786 (_keys!3718 newMap!16)) (index!3056 lt!25896)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62291 (=> (not res!34197) (not e!40903))))

(declare-fun bm!4871 () Bool)

(assert (=> bm!4871 (= call!4854 call!4866)))

(declare-fun b!62292 () Bool)

(assert (=> b!62292 (= e!40894 e!40885)))

(assert (=> b!62292 (= c!8271 (= (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62293 () Bool)

(declare-fun res!34192 () Bool)

(assert (=> b!62293 (=> (not res!34192) (not e!40904))))

(assert (=> b!62293 (= res!34192 call!4859)))

(assert (=> b!62293 (= e!40888 e!40904)))

(declare-fun b!62294 () Bool)

(declare-fun lt!25901 () Unit!1685)

(assert (=> b!62294 (= e!40892 lt!25901)))

(assert (=> b!62294 (= lt!25901 call!4875)))

(assert (=> b!62294 (= lt!25896 call!4869)))

(assert (=> b!62294 (= c!8263 ((_ is MissingZero!232) lt!25896))))

(assert (=> b!62294 e!40888))

(declare-fun bm!4872 () Bool)

(declare-fun lemmaInListMapThenSeekEntryOrOpenFindsIt!17 (array!3737 array!3739 (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 (_ BitVec 64) Int) Unit!1685)

(assert (=> bm!4872 (= call!4865 (lemmaInListMapThenSeekEntryOrOpenFindsIt!17 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (defaultEntry!2087 newMap!16)))))

(declare-fun b!62295 () Bool)

(declare-fun lt!25917 () Unit!1685)

(declare-fun lt!25893 () Unit!1685)

(assert (=> b!62295 (= lt!25917 lt!25893)))

(assert (=> b!62295 (= call!4854 call!4871)))

(declare-fun lt!25897 () (_ BitVec 32))

(declare-fun lemmaChangeZeroKeyThenAddPairToListMap!17 (array!3737 array!3739 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 V!2865 Int) Unit!1685)

(assert (=> b!62295 (= lt!25893 (lemmaChangeZeroKeyThenAddPairToListMap!17 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) lt!25897 (zeroValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1999 newMap!16) (defaultEntry!2087 newMap!16)))))

(assert (=> b!62295 (= lt!25897 (bvor (extraKeys!1966 newMap!16) #b00000000000000000000000000000001))))

(assert (=> b!62295 (= e!40885 (tuple2!2051 true (LongMapFixedSize!635 (defaultEntry!2087 newMap!16) (mask!5992 newMap!16) (bvor (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1999 newMap!16) (_size!366 newMap!16) (_keys!3718 newMap!16) (_values!2070 newMap!16) (_vacant!366 newMap!16))))))

(declare-fun b!62296 () Bool)

(declare-fun Unit!1698 () Unit!1685)

(assert (=> b!62296 (= e!40890 Unit!1698)))

(declare-fun lt!25905 () Unit!1685)

(assert (=> b!62296 (= lt!25905 call!4875)))

(assert (=> b!62296 (= lt!25906 call!4861)))

(assert (=> b!62296 (= c!8265 ((_ is MissingZero!232) lt!25906))))

(assert (=> b!62296 e!40891))

(declare-fun lt!25895 () Unit!1685)

(assert (=> b!62296 (= lt!25895 lt!25905)))

(assert (=> b!62296 false))

(declare-fun b!62297 () Bool)

(assert (=> b!62297 (= e!40902 (not call!4877))))

(declare-fun bm!4873 () Bool)

(assert (=> bm!4873 (= call!4855 (getCurrentListMap!393 (_keys!3718 newMap!16) (ite (or c!8266 c!8262) (_values!2070 newMap!16) lt!25918) (mask!5992 newMap!16) (ite c!8266 (ite c!8271 lt!25897 lt!25915) (extraKeys!1966 newMap!16)) (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)) (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun bm!4874 () Bool)

(assert (=> bm!4874 (= call!4867 call!4864)))

(declare-fun b!62298 () Bool)

(declare-fun res!34196 () Bool)

(assert (=> b!62298 (= res!34196 call!4873)))

(assert (=> b!62298 (=> (not res!34196) (not e!40889))))

(assert (= (and d!12557 c!8266) b!62292))

(assert (= (and d!12557 (not c!8266)) b!62274))

(assert (= (and b!62292 c!8271) b!62295))

(assert (= (and b!62292 (not c!8271)) b!62277))

(assert (= (or b!62295 b!62277) bm!4874))

(assert (= (or b!62295 b!62277) bm!4868))

(assert (= (or b!62295 b!62277) bm!4871))

(assert (= (and b!62274 c!8262) b!62264))

(assert (= (and b!62274 (not c!8262)) b!62273))

(assert (= (and b!62264 c!8272) b!62289))

(assert (= (and b!62264 (not c!8272)) b!62294))

(assert (= (and b!62289 res!34198) b!62282))

(assert (= (and b!62282 res!34200) b!62283))

(assert (= (and b!62294 c!8263) b!62293))

(assert (= (and b!62294 (not c!8263)) b!62270))

(assert (= (and b!62293 res!34192) b!62261))

(assert (= (and b!62261 res!34190) b!62278))

(assert (= (and b!62270 c!8264) b!62276))

(assert (= (and b!62270 (not c!8264)) b!62279))

(assert (= (and b!62276 res!34199) b!62291))

(assert (= (and b!62291 res!34197) b!62290))

(assert (= (or b!62293 b!62276) bm!4864))

(assert (= (or b!62278 b!62290) bm!4867))

(assert (= (or b!62282 bm!4864) bm!4857))

(assert (= (or b!62289 b!62294) bm!4856))

(assert (= (and b!62273 c!8267) b!62259))

(assert (= (and b!62273 (not c!8267)) b!62265))

(assert (= (and b!62265 c!8261) b!62268))

(assert (= (and b!62265 (not c!8261)) b!62271))

(assert (= (and b!62271 c!8270) b!62286))

(assert (= (and b!62271 (not c!8270)) b!62296))

(assert (= (and b!62286 res!34201) b!62298))

(assert (= (and b!62298 res!34196) b!62262))

(assert (= (and b!62296 c!8265) b!62284))

(assert (= (and b!62296 (not c!8265)) b!62266))

(assert (= (and b!62284 res!34194) b!62280))

(assert (= (and b!62280 res!34203) b!62297))

(assert (= (and b!62266 c!8269) b!62275))

(assert (= (and b!62266 (not c!8269)) b!62285))

(assert (= (and b!62275 res!34202) b!62287))

(assert (= (and b!62287 res!34193) b!62263))

(assert (= (or b!62284 b!62275) bm!4855))

(assert (= (or b!62297 b!62263) bm!4869))

(assert (= (or b!62298 bm!4855) bm!4865))

(assert (= (or b!62286 b!62296) bm!4862))

(assert (= (or b!62259 b!62268) bm!4870))

(assert (= (or bm!4867 bm!4869) bm!4860))

(assert (= (or b!62264 b!62271) bm!4866))

(assert (= (or b!62289 b!62286) bm!4872))

(assert (= (or b!62294 b!62296) bm!4851))

(assert (= (or bm!4856 bm!4862) bm!4859))

(assert (= (or bm!4857 bm!4865) bm!4854))

(assert (= (or b!62264 b!62271) bm!4861))

(assert (= (or bm!4868 bm!4866) bm!4873))

(assert (= (or bm!4874 b!62271) bm!4853))

(assert (= (or bm!4871 b!62271) bm!4852))

(assert (= (and bm!4852 c!8268) b!62281))

(assert (= (and bm!4852 (not c!8268)) b!62269))

(assert (= (and d!12557 res!34195) b!62288))

(assert (= (and b!62288 c!8273) b!62272))

(assert (= (and b!62288 (not c!8273)) b!62267))

(assert (= (and b!62272 res!34191) b!62260))

(assert (= (or b!62260 b!62267) bm!4858))

(assert (= (or b!62272 b!62260 b!62267) bm!4863))

(declare-fun m!55621 () Bool)

(assert (=> b!62280 m!55621))

(assert (=> bm!4851 m!55481))

(declare-fun m!55623 () Bool)

(assert (=> bm!4851 m!55623))

(declare-fun m!55625 () Bool)

(assert (=> b!62261 m!55625))

(declare-fun m!55627 () Bool)

(assert (=> b!62260 m!55627))

(declare-fun m!55629 () Bool)

(assert (=> b!62287 m!55629))

(assert (=> b!62274 m!55481))

(declare-fun m!55631 () Bool)

(assert (=> b!62274 m!55631))

(assert (=> bm!4859 m!55481))

(assert (=> bm!4859 m!55631))

(assert (=> bm!4870 m!55481))

(assert (=> bm!4870 m!55507))

(declare-fun m!55633 () Bool)

(assert (=> bm!4870 m!55633))

(declare-fun m!55635 () Bool)

(assert (=> bm!4853 m!55635))

(declare-fun m!55637 () Bool)

(assert (=> bm!4853 m!55637))

(declare-fun m!55639 () Bool)

(assert (=> bm!4854 m!55639))

(assert (=> bm!4860 m!55481))

(declare-fun m!55641 () Bool)

(assert (=> bm!4860 m!55641))

(assert (=> b!62271 m!55481))

(assert (=> b!62271 m!55507))

(declare-fun m!55643 () Bool)

(assert (=> b!62271 m!55643))

(declare-fun m!55645 () Bool)

(assert (=> b!62271 m!55645))

(declare-fun m!55647 () Bool)

(assert (=> b!62271 m!55647))

(assert (=> b!62271 m!55481))

(declare-fun m!55649 () Bool)

(assert (=> b!62271 m!55649))

(assert (=> b!62271 m!55635))

(assert (=> b!62271 m!55647))

(assert (=> b!62272 m!55481))

(declare-fun m!55651 () Bool)

(assert (=> b!62272 m!55651))

(declare-fun m!55653 () Bool)

(assert (=> bm!4852 m!55653))

(assert (=> bm!4872 m!55481))

(declare-fun m!55655 () Bool)

(assert (=> bm!4872 m!55655))

(assert (=> b!62277 m!55507))

(declare-fun m!55657 () Bool)

(assert (=> b!62277 m!55657))

(declare-fun m!55659 () Bool)

(assert (=> bm!4873 m!55659))

(declare-fun m!55661 () Bool)

(assert (=> b!62283 m!55661))

(declare-fun m!55663 () Bool)

(assert (=> b!62262 m!55663))

(declare-fun m!55665 () Bool)

(assert (=> bm!4861 m!55665))

(declare-fun m!55667 () Bool)

(assert (=> bm!4861 m!55667))

(declare-fun m!55669 () Bool)

(assert (=> bm!4863 m!55669))

(assert (=> bm!4858 m!55483))

(declare-fun m!55671 () Bool)

(assert (=> b!62291 m!55671))

(assert (=> b!62295 m!55507))

(declare-fun m!55673 () Bool)

(assert (=> b!62295 m!55673))

(assert (=> b!62269 m!55647))

(declare-fun m!55675 () Bool)

(assert (=> d!12557 m!55675))

(assert (=> d!12557 m!55477))

(assert (=> b!62025 d!12557))

(declare-fun d!12559 () Bool)

(declare-fun c!8276 () Bool)

(assert (=> d!12559 (= c!8276 ((_ is ValueCellFull!863) (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(declare-fun e!40907 () V!2865)

(assert (=> d!12559 (= (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!40907)))

(declare-fun b!62303 () Bool)

(declare-fun get!1090 (ValueCell!863 V!2865) V!2865)

(assert (=> b!62303 (= e!40907 (get!1090 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!62304 () Bool)

(declare-fun get!1091 (ValueCell!863 V!2865) V!2865)

(assert (=> b!62304 (= e!40907 (get!1091 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12559 c!8276) b!62303))

(assert (= (and d!12559 (not c!8276)) b!62304))

(assert (=> b!62303 m!55503))

(assert (=> b!62303 m!55505))

(declare-fun m!55677 () Bool)

(assert (=> b!62303 m!55677))

(assert (=> b!62304 m!55503))

(assert (=> b!62304 m!55505))

(declare-fun m!55679 () Bool)

(assert (=> b!62304 m!55679))

(assert (=> b!62025 d!12559))

(declare-fun d!12561 () Bool)

(assert (=> d!12561 (not (arrayContainsKey!0 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!25921 () Unit!1685)

(declare-fun choose!68 (array!3737 (_ BitVec 32) (_ BitVec 64) List!1446) Unit!1685)

(assert (=> d!12561 (= lt!25921 (choose!68 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (Cons!1442 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) Nil!1443)))))

(assert (=> d!12561 (bvslt (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!12561 (= (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (Cons!1442 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) Nil!1443)) lt!25921)))

(declare-fun bs!2703 () Bool)

(assert (= bs!2703 d!12561))

(assert (=> bs!2703 m!55481))

(assert (=> bs!2703 m!55499))

(assert (=> bs!2703 m!55481))

(declare-fun m!55681 () Bool)

(assert (=> bs!2703 m!55681))

(assert (=> b!62024 d!12561))

(declare-fun d!12563 () Bool)

(assert (=> d!12563 (arrayNoDuplicates!0 (_keys!3718 (v!2412 (underlying!229 thiss!992))) from!355 Nil!1443)))

(declare-fun lt!25924 () Unit!1685)

(declare-fun choose!39 (array!3737 (_ BitVec 32) (_ BitVec 32)) Unit!1685)

(assert (=> d!12563 (= lt!25924 (choose!39 (_keys!3718 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000000000000000 from!355))))

(assert (=> d!12563 (bvslt (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!12563 (= (lemmaNoDuplicateFromThenFromBigger!0 (_keys!3718 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000000000000000 from!355) lt!25924)))

(declare-fun bs!2704 () Bool)

(assert (= bs!2704 d!12563))

(assert (=> bs!2704 m!55495))

(declare-fun m!55683 () Bool)

(assert (=> bs!2704 m!55683))

(assert (=> b!62024 d!12563))

(declare-fun d!12565 () Bool)

(declare-fun res!34208 () Bool)

(declare-fun e!40912 () Bool)

(assert (=> d!12565 (=> res!34208 e!40912)))

(assert (=> d!12565 (= res!34208 (= (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(assert (=> d!12565 (= (arrayContainsKey!0 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)) e!40912)))

(declare-fun b!62309 () Bool)

(declare-fun e!40913 () Bool)

(assert (=> b!62309 (= e!40912 e!40913)))

(declare-fun res!34209 () Bool)

(assert (=> b!62309 (=> (not res!34209) (not e!40913))))

(assert (=> b!62309 (= res!34209 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992))))))))

(declare-fun b!62310 () Bool)

(assert (=> b!62310 (= e!40913 (arrayContainsKey!0 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (= (and d!12565 (not res!34208)) b!62309))

(assert (= (and b!62309 res!34209) b!62310))

(declare-fun m!55685 () Bool)

(assert (=> d!12565 m!55685))

(assert (=> b!62310 m!55481))

(declare-fun m!55687 () Bool)

(assert (=> b!62310 m!55687))

(assert (=> b!62024 d!12565))

(declare-fun d!12567 () Bool)

(declare-fun e!40916 () Bool)

(assert (=> d!12567 e!40916))

(declare-fun c!8279 () Bool)

(assert (=> d!12567 (= c!8279 (and (not (= (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun lt!25927 () Unit!1685)

(declare-fun choose!336 (array!3737 array!3739 (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 (_ BitVec 64) (_ BitVec 32) Int) Unit!1685)

(assert (=> d!12567 (= lt!25927 (choose!336 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (_values!2070 (v!2412 (underlying!229 thiss!992))) (mask!5992 (v!2412 (underlying!229 thiss!992))) (extraKeys!1966 (v!2412 (underlying!229 thiss!992))) (zeroValue!1999 (v!2412 (underlying!229 thiss!992))) (minValue!1999 (v!2412 (underlying!229 thiss!992))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2087 (v!2412 (underlying!229 thiss!992)))))))

(assert (=> d!12567 (validMask!0 (mask!5992 (v!2412 (underlying!229 thiss!992))))))

(assert (=> d!12567 (= (lemmaListMapContainsThenArrayContainsFrom!34 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (_values!2070 (v!2412 (underlying!229 thiss!992))) (mask!5992 (v!2412 (underlying!229 thiss!992))) (extraKeys!1966 (v!2412 (underlying!229 thiss!992))) (zeroValue!1999 (v!2412 (underlying!229 thiss!992))) (minValue!1999 (v!2412 (underlying!229 thiss!992))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2087 (v!2412 (underlying!229 thiss!992)))) lt!25927)))

(declare-fun b!62315 () Bool)

(assert (=> b!62315 (= e!40916 (arrayContainsKey!0 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!62316 () Bool)

(assert (=> b!62316 (= e!40916 (ite (= (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!1966 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1966 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!12567 c!8279) b!62315))

(assert (= (and d!12567 (not c!8279)) b!62316))

(assert (=> d!12567 m!55481))

(declare-fun m!55689 () Bool)

(assert (=> d!12567 m!55689))

(assert (=> d!12567 m!55513))

(assert (=> b!62315 m!55481))

(assert (=> b!62315 m!55499))

(assert (=> b!62024 d!12567))

(declare-fun b!62327 () Bool)

(declare-fun e!40925 () Bool)

(declare-fun contains!691 (List!1446 (_ BitVec 64)) Bool)

(assert (=> b!62327 (= e!40925 (contains!691 Nil!1443 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(declare-fun b!62329 () Bool)

(declare-fun e!40928 () Bool)

(declare-fun e!40926 () Bool)

(assert (=> b!62329 (= e!40928 e!40926)))

(declare-fun res!34218 () Bool)

(assert (=> b!62329 (=> (not res!34218) (not e!40926))))

(assert (=> b!62329 (= res!34218 (not e!40925))))

(declare-fun res!34216 () Bool)

(assert (=> b!62329 (=> (not res!34216) (not e!40925))))

(declare-fun validKeyInArray!0 ((_ BitVec 64)) Bool)

(assert (=> b!62329 (= res!34216 (validKeyInArray!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(declare-fun c!8282 () Bool)

(declare-fun call!4880 () Bool)

(declare-fun bm!4877 () Bool)

(assert (=> bm!4877 (= call!4880 (arrayNoDuplicates!0 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!8282 (Cons!1442 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) Nil!1443) Nil!1443)))))

(declare-fun b!62330 () Bool)

(declare-fun e!40927 () Bool)

(assert (=> b!62330 (= e!40927 call!4880)))

(declare-fun b!62331 () Bool)

(assert (=> b!62331 (= e!40927 call!4880)))

(declare-fun b!62328 () Bool)

(assert (=> b!62328 (= e!40926 e!40927)))

(assert (=> b!62328 (= c!8282 (validKeyInArray!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(declare-fun d!12569 () Bool)

(declare-fun res!34217 () Bool)

(assert (=> d!12569 (=> res!34217 e!40928)))

(assert (=> d!12569 (= res!34217 (bvsge from!355 (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992))))))))

(assert (=> d!12569 (= (arrayNoDuplicates!0 (_keys!3718 (v!2412 (underlying!229 thiss!992))) from!355 Nil!1443) e!40928)))

(assert (= (and d!12569 (not res!34217)) b!62329))

(assert (= (and b!62329 res!34216) b!62327))

(assert (= (and b!62329 res!34218) b!62328))

(assert (= (and b!62328 c!8282) b!62330))

(assert (= (and b!62328 (not c!8282)) b!62331))

(assert (= (or b!62330 b!62331) bm!4877))

(assert (=> b!62327 m!55481))

(assert (=> b!62327 m!55481))

(declare-fun m!55691 () Bool)

(assert (=> b!62327 m!55691))

(assert (=> b!62329 m!55481))

(assert (=> b!62329 m!55481))

(declare-fun m!55693 () Bool)

(assert (=> b!62329 m!55693))

(assert (=> bm!4877 m!55481))

(declare-fun m!55695 () Bool)

(assert (=> bm!4877 m!55695))

(assert (=> b!62328 m!55481))

(assert (=> b!62328 m!55481))

(assert (=> b!62328 m!55693))

(assert (=> b!62024 d!12569))

(declare-fun d!12571 () Bool)

(assert (=> d!12571 (= (map!1113 newMap!16) (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun bs!2705 () Bool)

(assert (= bs!2705 d!12571))

(assert (=> bs!2705 m!55647))

(assert (=> b!62036 d!12571))

(declare-fun b!62374 () Bool)

(declare-fun res!34239 () Bool)

(declare-fun e!40956 () Bool)

(assert (=> b!62374 (=> (not res!34239) (not e!40956))))

(declare-fun e!40967 () Bool)

(assert (=> b!62374 (= res!34239 e!40967)))

(declare-fun c!8300 () Bool)

(assert (=> b!62374 (= c!8300 (not (= (bvand (extraKeys!1966 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!62375 () Bool)

(declare-fun e!40961 () Bool)

(declare-fun lt!25977 () ListLongMap!1363)

(declare-fun apply!68 (ListLongMap!1363 (_ BitVec 64)) V!2865)

(assert (=> b!62375 (= e!40961 (= (apply!68 lt!25977 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))

(declare-fun b!62376 () Bool)

(declare-fun e!40965 () Bool)

(assert (=> b!62376 (= e!40965 (= (apply!68 lt!25977 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))

(declare-fun d!12573 () Bool)

(assert (=> d!12573 e!40956))

(declare-fun res!34238 () Bool)

(assert (=> d!12573 (=> (not res!34238) (not e!40956))))

(assert (=> d!12573 (= res!34238 (or (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992))))) (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992))))))))))

(declare-fun lt!25979 () ListLongMap!1363)

(assert (=> d!12573 (= lt!25977 lt!25979)))

(declare-fun lt!25985 () Unit!1685)

(declare-fun e!40963 () Unit!1685)

(assert (=> d!12573 (= lt!25985 e!40963)))

(declare-fun c!8297 () Bool)

(declare-fun e!40955 () Bool)

(assert (=> d!12573 (= c!8297 e!40955)))

(declare-fun res!34244 () Bool)

(assert (=> d!12573 (=> (not res!34244) (not e!40955))))

(assert (=> d!12573 (= res!34244 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992))))))))

(declare-fun e!40964 () ListLongMap!1363)

(assert (=> d!12573 (= lt!25979 e!40964)))

(declare-fun c!8298 () Bool)

(assert (=> d!12573 (= c!8298 (and (not (= (bvand (extraKeys!1966 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1966 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12573 (validMask!0 (mask!5992 (v!2412 (underlying!229 thiss!992))))))

(assert (=> d!12573 (= (getCurrentListMap!393 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (_values!2070 (v!2412 (underlying!229 thiss!992))) (mask!5992 (v!2412 (underlying!229 thiss!992))) (extraKeys!1966 (v!2412 (underlying!229 thiss!992))) (zeroValue!1999 (v!2412 (underlying!229 thiss!992))) (minValue!1999 (v!2412 (underlying!229 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2087 (v!2412 (underlying!229 thiss!992)))) lt!25977)))

(declare-fun b!62377 () Bool)

(declare-fun res!34243 () Bool)

(assert (=> b!62377 (=> (not res!34243) (not e!40956))))

(declare-fun e!40962 () Bool)

(assert (=> b!62377 (= res!34243 e!40962)))

(declare-fun res!34240 () Bool)

(assert (=> b!62377 (=> res!34240 e!40962)))

(declare-fun e!40960 () Bool)

(assert (=> b!62377 (= res!34240 (not e!40960))))

(declare-fun res!34241 () Bool)

(assert (=> b!62377 (=> (not res!34241) (not e!40960))))

(assert (=> b!62377 (= res!34241 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992))))))))

(declare-fun bm!4892 () Bool)

(declare-fun call!4898 () ListLongMap!1363)

(declare-fun call!4899 () ListLongMap!1363)

(assert (=> bm!4892 (= call!4898 call!4899)))

(declare-fun b!62378 () Bool)

(declare-fun e!40959 () ListLongMap!1363)

(declare-fun call!4900 () ListLongMap!1363)

(assert (=> b!62378 (= e!40959 call!4900)))

(declare-fun bm!4893 () Bool)

(declare-fun call!4897 () Bool)

(assert (=> bm!4893 (= call!4897 (contains!690 lt!25977 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62379 () Bool)

(assert (=> b!62379 (= e!40967 (not call!4897))))

(declare-fun bm!4894 () Bool)

(declare-fun call!4901 () ListLongMap!1363)

(declare-fun call!4896 () ListLongMap!1363)

(assert (=> bm!4894 (= call!4901 call!4896)))

(declare-fun c!8299 () Bool)

(declare-fun bm!4895 () Bool)

(assert (=> bm!4895 (= call!4896 (+!83 (ite c!8298 call!4899 (ite c!8299 call!4898 call!4900)) (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun b!62380 () Bool)

(assert (=> b!62380 (= e!40955 (validKeyInArray!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!62381 () Bool)

(assert (=> b!62381 (= e!40964 (+!83 call!4896 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))

(declare-fun bm!4896 () Bool)

(declare-fun call!4895 () Bool)

(assert (=> bm!4896 (= call!4895 (contains!690 lt!25977 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62382 () Bool)

(declare-fun Unit!1699 () Unit!1685)

(assert (=> b!62382 (= e!40963 Unit!1699)))

(declare-fun b!62383 () Bool)

(assert (=> b!62383 (= e!40960 (validKeyInArray!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!62384 () Bool)

(declare-fun c!8295 () Bool)

(assert (=> b!62384 (= c!8295 (and (not (= (bvand (extraKeys!1966 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1966 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!40966 () ListLongMap!1363)

(assert (=> b!62384 (= e!40966 e!40959)))

(declare-fun b!62385 () Bool)

(declare-fun e!40957 () Bool)

(assert (=> b!62385 (= e!40956 e!40957)))

(declare-fun c!8296 () Bool)

(assert (=> b!62385 (= c!8296 (not (= (bvand (extraKeys!1966 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!62386 () Bool)

(assert (=> b!62386 (= e!40964 e!40966)))

(assert (=> b!62386 (= c!8299 (and (not (= (bvand (extraKeys!1966 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1966 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!62387 () Bool)

(declare-fun e!40958 () Bool)

(assert (=> b!62387 (= e!40962 e!40958)))

(declare-fun res!34242 () Bool)

(assert (=> b!62387 (=> (not res!34242) (not e!40958))))

(assert (=> b!62387 (= res!34242 (contains!690 lt!25977 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!62387 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992))))))))

(declare-fun b!62388 () Bool)

(assert (=> b!62388 (= e!40957 (not call!4895))))

(declare-fun bm!4897 () Bool)

(assert (=> bm!4897 (= call!4900 call!4898)))

(declare-fun b!62389 () Bool)

(assert (=> b!62389 (= e!40967 e!40965)))

(declare-fun res!34245 () Bool)

(assert (=> b!62389 (= res!34245 call!4897)))

(assert (=> b!62389 (=> (not res!34245) (not e!40965))))

(declare-fun bm!4898 () Bool)

(declare-fun getCurrentListMapNoExtraKeys!46 (array!3737 array!3739 (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 (_ BitVec 32) Int) ListLongMap!1363)

(assert (=> bm!4898 (= call!4899 (getCurrentListMapNoExtraKeys!46 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (_values!2070 (v!2412 (underlying!229 thiss!992))) (mask!5992 (v!2412 (underlying!229 thiss!992))) (extraKeys!1966 (v!2412 (underlying!229 thiss!992))) (zeroValue!1999 (v!2412 (underlying!229 thiss!992))) (minValue!1999 (v!2412 (underlying!229 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2087 (v!2412 (underlying!229 thiss!992)))))))

(declare-fun b!62390 () Bool)

(assert (=> b!62390 (= e!40958 (= (apply!68 lt!25977 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62390 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2020 (_values!2070 (v!2412 (underlying!229 thiss!992))))))))

(assert (=> b!62390 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992))))))))

(declare-fun b!62391 () Bool)

(assert (=> b!62391 (= e!40959 call!4901)))

(declare-fun b!62392 () Bool)

(declare-fun lt!25991 () Unit!1685)

(assert (=> b!62392 (= e!40963 lt!25991)))

(declare-fun lt!25976 () ListLongMap!1363)

(assert (=> b!62392 (= lt!25976 (getCurrentListMapNoExtraKeys!46 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (_values!2070 (v!2412 (underlying!229 thiss!992))) (mask!5992 (v!2412 (underlying!229 thiss!992))) (extraKeys!1966 (v!2412 (underlying!229 thiss!992))) (zeroValue!1999 (v!2412 (underlying!229 thiss!992))) (minValue!1999 (v!2412 (underlying!229 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2087 (v!2412 (underlying!229 thiss!992)))))))

(declare-fun lt!25982 () (_ BitVec 64))

(assert (=> b!62392 (= lt!25982 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25989 () (_ BitVec 64))

(assert (=> b!62392 (= lt!25989 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!25983 () Unit!1685)

(declare-fun addStillContains!44 (ListLongMap!1363 (_ BitVec 64) V!2865 (_ BitVec 64)) Unit!1685)

(assert (=> b!62392 (= lt!25983 (addStillContains!44 lt!25976 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))) lt!25989))))

(assert (=> b!62392 (contains!690 (+!83 lt!25976 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))) lt!25989)))

(declare-fun lt!25975 () Unit!1685)

(assert (=> b!62392 (= lt!25975 lt!25983)))

(declare-fun lt!25973 () ListLongMap!1363)

(assert (=> b!62392 (= lt!25973 (getCurrentListMapNoExtraKeys!46 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (_values!2070 (v!2412 (underlying!229 thiss!992))) (mask!5992 (v!2412 (underlying!229 thiss!992))) (extraKeys!1966 (v!2412 (underlying!229 thiss!992))) (zeroValue!1999 (v!2412 (underlying!229 thiss!992))) (minValue!1999 (v!2412 (underlying!229 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2087 (v!2412 (underlying!229 thiss!992)))))))

(declare-fun lt!25984 () (_ BitVec 64))

(assert (=> b!62392 (= lt!25984 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25988 () (_ BitVec 64))

(assert (=> b!62392 (= lt!25988 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!25980 () Unit!1685)

(declare-fun addApplyDifferent!44 (ListLongMap!1363 (_ BitVec 64) V!2865 (_ BitVec 64)) Unit!1685)

(assert (=> b!62392 (= lt!25980 (addApplyDifferent!44 lt!25973 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992))) lt!25988))))

(assert (=> b!62392 (= (apply!68 (+!83 lt!25973 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) lt!25988) (apply!68 lt!25973 lt!25988))))

(declare-fun lt!25972 () Unit!1685)

(assert (=> b!62392 (= lt!25972 lt!25980)))

(declare-fun lt!25981 () ListLongMap!1363)

(assert (=> b!62392 (= lt!25981 (getCurrentListMapNoExtraKeys!46 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (_values!2070 (v!2412 (underlying!229 thiss!992))) (mask!5992 (v!2412 (underlying!229 thiss!992))) (extraKeys!1966 (v!2412 (underlying!229 thiss!992))) (zeroValue!1999 (v!2412 (underlying!229 thiss!992))) (minValue!1999 (v!2412 (underlying!229 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2087 (v!2412 (underlying!229 thiss!992)))))))

(declare-fun lt!25986 () (_ BitVec 64))

(assert (=> b!62392 (= lt!25986 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25974 () (_ BitVec 64))

(assert (=> b!62392 (= lt!25974 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!25993 () Unit!1685)

(assert (=> b!62392 (= lt!25993 (addApplyDifferent!44 lt!25981 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))) lt!25974))))

(assert (=> b!62392 (= (apply!68 (+!83 lt!25981 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))) lt!25974) (apply!68 lt!25981 lt!25974))))

(declare-fun lt!25987 () Unit!1685)

(assert (=> b!62392 (= lt!25987 lt!25993)))

(declare-fun lt!25978 () ListLongMap!1363)

(assert (=> b!62392 (= lt!25978 (getCurrentListMapNoExtraKeys!46 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (_values!2070 (v!2412 (underlying!229 thiss!992))) (mask!5992 (v!2412 (underlying!229 thiss!992))) (extraKeys!1966 (v!2412 (underlying!229 thiss!992))) (zeroValue!1999 (v!2412 (underlying!229 thiss!992))) (minValue!1999 (v!2412 (underlying!229 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2087 (v!2412 (underlying!229 thiss!992)))))))

(declare-fun lt!25990 () (_ BitVec 64))

(assert (=> b!62392 (= lt!25990 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25992 () (_ BitVec 64))

(assert (=> b!62392 (= lt!25992 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!62392 (= lt!25991 (addApplyDifferent!44 lt!25978 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992))) lt!25992))))

(assert (=> b!62392 (= (apply!68 (+!83 lt!25978 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) lt!25992) (apply!68 lt!25978 lt!25992))))

(declare-fun b!62393 () Bool)

(assert (=> b!62393 (= e!40957 e!40961)))

(declare-fun res!34237 () Bool)

(assert (=> b!62393 (= res!34237 call!4895)))

(assert (=> b!62393 (=> (not res!34237) (not e!40961))))

(declare-fun b!62394 () Bool)

(assert (=> b!62394 (= e!40966 call!4901)))

(assert (= (and d!12573 c!8298) b!62381))

(assert (= (and d!12573 (not c!8298)) b!62386))

(assert (= (and b!62386 c!8299) b!62394))

(assert (= (and b!62386 (not c!8299)) b!62384))

(assert (= (and b!62384 c!8295) b!62391))

(assert (= (and b!62384 (not c!8295)) b!62378))

(assert (= (or b!62391 b!62378) bm!4897))

(assert (= (or b!62394 bm!4897) bm!4892))

(assert (= (or b!62394 b!62391) bm!4894))

(assert (= (or b!62381 bm!4892) bm!4898))

(assert (= (or b!62381 bm!4894) bm!4895))

(assert (= (and d!12573 res!34244) b!62380))

(assert (= (and d!12573 c!8297) b!62392))

(assert (= (and d!12573 (not c!8297)) b!62382))

(assert (= (and d!12573 res!34238) b!62377))

(assert (= (and b!62377 res!34241) b!62383))

(assert (= (and b!62377 (not res!34240)) b!62387))

(assert (= (and b!62387 res!34242) b!62390))

(assert (= (and b!62377 res!34243) b!62374))

(assert (= (and b!62374 c!8300) b!62389))

(assert (= (and b!62374 (not c!8300)) b!62379))

(assert (= (and b!62389 res!34245) b!62376))

(assert (= (or b!62389 b!62379) bm!4893))

(assert (= (and b!62374 res!34239) b!62385))

(assert (= (and b!62385 c!8296) b!62393))

(assert (= (and b!62385 (not c!8296)) b!62388))

(assert (= (and b!62393 res!34237) b!62375))

(assert (= (or b!62393 b!62388) bm!4896))

(declare-fun b_lambda!2773 () Bool)

(assert (=> (not b_lambda!2773) (not b!62390)))

(assert (=> b!62390 t!4828))

(declare-fun b_and!3805 () Bool)

(assert (= b_and!3785 (and (=> t!4828 result!2435) b_and!3805)))

(assert (=> b!62390 t!4830))

(declare-fun b_and!3807 () Bool)

(assert (= b_and!3787 (and (=> t!4830 result!2439) b_and!3807)))

(declare-fun m!55697 () Bool)

(assert (=> bm!4898 m!55697))

(declare-fun m!55699 () Bool)

(assert (=> b!62381 m!55699))

(assert (=> b!62383 m!55685))

(assert (=> b!62383 m!55685))

(declare-fun m!55701 () Bool)

(assert (=> b!62383 m!55701))

(declare-fun m!55703 () Bool)

(assert (=> bm!4896 m!55703))

(assert (=> b!62387 m!55685))

(assert (=> b!62387 m!55685))

(declare-fun m!55705 () Bool)

(assert (=> b!62387 m!55705))

(declare-fun m!55707 () Bool)

(assert (=> b!62375 m!55707))

(declare-fun m!55709 () Bool)

(assert (=> bm!4895 m!55709))

(assert (=> b!62380 m!55685))

(assert (=> b!62380 m!55685))

(assert (=> b!62380 m!55701))

(declare-fun m!55711 () Bool)

(assert (=> bm!4893 m!55711))

(assert (=> b!62390 m!55685))

(declare-fun m!55713 () Bool)

(assert (=> b!62390 m!55713))

(assert (=> b!62390 m!55505))

(declare-fun m!55715 () Bool)

(assert (=> b!62390 m!55715))

(assert (=> b!62390 m!55685))

(assert (=> b!62390 m!55715))

(assert (=> b!62390 m!55505))

(declare-fun m!55717 () Bool)

(assert (=> b!62390 m!55717))

(declare-fun m!55719 () Bool)

(assert (=> b!62376 m!55719))

(declare-fun m!55721 () Bool)

(assert (=> b!62392 m!55721))

(assert (=> b!62392 m!55697))

(declare-fun m!55723 () Bool)

(assert (=> b!62392 m!55723))

(assert (=> b!62392 m!55723))

(declare-fun m!55725 () Bool)

(assert (=> b!62392 m!55725))

(declare-fun m!55727 () Bool)

(assert (=> b!62392 m!55727))

(declare-fun m!55729 () Bool)

(assert (=> b!62392 m!55729))

(declare-fun m!55731 () Bool)

(assert (=> b!62392 m!55731))

(declare-fun m!55733 () Bool)

(assert (=> b!62392 m!55733))

(declare-fun m!55735 () Bool)

(assert (=> b!62392 m!55735))

(declare-fun m!55737 () Bool)

(assert (=> b!62392 m!55737))

(assert (=> b!62392 m!55685))

(declare-fun m!55739 () Bool)

(assert (=> b!62392 m!55739))

(declare-fun m!55741 () Bool)

(assert (=> b!62392 m!55741))

(declare-fun m!55743 () Bool)

(assert (=> b!62392 m!55743))

(assert (=> b!62392 m!55741))

(declare-fun m!55745 () Bool)

(assert (=> b!62392 m!55745))

(assert (=> b!62392 m!55729))

(declare-fun m!55747 () Bool)

(assert (=> b!62392 m!55747))

(assert (=> b!62392 m!55735))

(declare-fun m!55749 () Bool)

(assert (=> b!62392 m!55749))

(assert (=> d!12573 m!55513))

(assert (=> b!62036 d!12573))

(declare-fun d!12575 () Bool)

(assert (=> d!12575 (= (valid!266 thiss!992) (valid!267 (v!2412 (underlying!229 thiss!992))))))

(declare-fun bs!2706 () Bool)

(assert (= bs!2706 d!12575))

(declare-fun m!55751 () Bool)

(assert (=> bs!2706 m!55751))

(assert (=> start!8874 d!12575))

(declare-fun d!12577 () Bool)

(assert (=> d!12577 (= (validMask!0 (mask!5992 (v!2412 (underlying!229 thiss!992)))) (and (or (= (mask!5992 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000000000000111) (= (mask!5992 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000000000001111) (= (mask!5992 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000000000011111) (= (mask!5992 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000000000111111) (= (mask!5992 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000000001111111) (= (mask!5992 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000000011111111) (= (mask!5992 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000000111111111) (= (mask!5992 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000001111111111) (= (mask!5992 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000011111111111) (= (mask!5992 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000111111111111) (= (mask!5992 (v!2412 (underlying!229 thiss!992))) #b00000000000000000001111111111111) (= (mask!5992 (v!2412 (underlying!229 thiss!992))) #b00000000000000000011111111111111) (= (mask!5992 (v!2412 (underlying!229 thiss!992))) #b00000000000000000111111111111111) (= (mask!5992 (v!2412 (underlying!229 thiss!992))) #b00000000000000001111111111111111) (= (mask!5992 (v!2412 (underlying!229 thiss!992))) #b00000000000000011111111111111111) (= (mask!5992 (v!2412 (underlying!229 thiss!992))) #b00000000000000111111111111111111) (= (mask!5992 (v!2412 (underlying!229 thiss!992))) #b00000000000001111111111111111111) (= (mask!5992 (v!2412 (underlying!229 thiss!992))) #b00000000000011111111111111111111) (= (mask!5992 (v!2412 (underlying!229 thiss!992))) #b00000000000111111111111111111111) (= (mask!5992 (v!2412 (underlying!229 thiss!992))) #b00000000001111111111111111111111) (= (mask!5992 (v!2412 (underlying!229 thiss!992))) #b00000000011111111111111111111111) (= (mask!5992 (v!2412 (underlying!229 thiss!992))) #b00000000111111111111111111111111) (= (mask!5992 (v!2412 (underlying!229 thiss!992))) #b00000001111111111111111111111111) (= (mask!5992 (v!2412 (underlying!229 thiss!992))) #b00000011111111111111111111111111) (= (mask!5992 (v!2412 (underlying!229 thiss!992))) #b00000111111111111111111111111111) (= (mask!5992 (v!2412 (underlying!229 thiss!992))) #b00001111111111111111111111111111) (= (mask!5992 (v!2412 (underlying!229 thiss!992))) #b00011111111111111111111111111111) (= (mask!5992 (v!2412 (underlying!229 thiss!992))) #b00111111111111111111111111111111)) (bvsle (mask!5992 (v!2412 (underlying!229 thiss!992))) #b00111111111111111111111111111111)))))

(assert (=> b!62027 d!12577))

(declare-fun condMapEmpty!2953 () Bool)

(declare-fun mapDefault!2953 () ValueCell!863)

(assert (=> mapNonEmpty!2937 (= condMapEmpty!2953 (= mapRest!2937 ((as const (Array (_ BitVec 32) ValueCell!863)) mapDefault!2953)))))

(declare-fun e!40973 () Bool)

(declare-fun mapRes!2953 () Bool)

(assert (=> mapNonEmpty!2937 (= tp!8110 (and e!40973 mapRes!2953))))

(declare-fun b!62401 () Bool)

(declare-fun e!40972 () Bool)

(assert (=> b!62401 (= e!40972 tp_is_empty!2413)))

(declare-fun b!62402 () Bool)

(assert (=> b!62402 (= e!40973 tp_is_empty!2413)))

(declare-fun mapIsEmpty!2953 () Bool)

(assert (=> mapIsEmpty!2953 mapRes!2953))

(declare-fun mapNonEmpty!2953 () Bool)

(declare-fun tp!8137 () Bool)

(assert (=> mapNonEmpty!2953 (= mapRes!2953 (and tp!8137 e!40972))))

(declare-fun mapRest!2953 () (Array (_ BitVec 32) ValueCell!863))

(declare-fun mapKey!2953 () (_ BitVec 32))

(declare-fun mapValue!2953 () ValueCell!863)

(assert (=> mapNonEmpty!2953 (= mapRest!2937 (store mapRest!2953 mapKey!2953 mapValue!2953))))

(assert (= (and mapNonEmpty!2937 condMapEmpty!2953) mapIsEmpty!2953))

(assert (= (and mapNonEmpty!2937 (not condMapEmpty!2953)) mapNonEmpty!2953))

(assert (= (and mapNonEmpty!2953 ((_ is ValueCellFull!863) mapValue!2953)) b!62401))

(assert (= (and mapNonEmpty!2937 ((_ is ValueCellFull!863) mapDefault!2953)) b!62402))

(declare-fun m!55753 () Bool)

(assert (=> mapNonEmpty!2953 m!55753))

(declare-fun condMapEmpty!2954 () Bool)

(declare-fun mapDefault!2954 () ValueCell!863)

(assert (=> mapNonEmpty!2938 (= condMapEmpty!2954 (= mapRest!2938 ((as const (Array (_ BitVec 32) ValueCell!863)) mapDefault!2954)))))

(declare-fun e!40975 () Bool)

(declare-fun mapRes!2954 () Bool)

(assert (=> mapNonEmpty!2938 (= tp!8107 (and e!40975 mapRes!2954))))

(declare-fun b!62403 () Bool)

(declare-fun e!40974 () Bool)

(assert (=> b!62403 (= e!40974 tp_is_empty!2413)))

(declare-fun b!62404 () Bool)

(assert (=> b!62404 (= e!40975 tp_is_empty!2413)))

(declare-fun mapIsEmpty!2954 () Bool)

(assert (=> mapIsEmpty!2954 mapRes!2954))

(declare-fun mapNonEmpty!2954 () Bool)

(declare-fun tp!8138 () Bool)

(assert (=> mapNonEmpty!2954 (= mapRes!2954 (and tp!8138 e!40974))))

(declare-fun mapRest!2954 () (Array (_ BitVec 32) ValueCell!863))

(declare-fun mapKey!2954 () (_ BitVec 32))

(declare-fun mapValue!2954 () ValueCell!863)

(assert (=> mapNonEmpty!2954 (= mapRest!2938 (store mapRest!2954 mapKey!2954 mapValue!2954))))

(assert (= (and mapNonEmpty!2938 condMapEmpty!2954) mapIsEmpty!2954))

(assert (= (and mapNonEmpty!2938 (not condMapEmpty!2954)) mapNonEmpty!2954))

(assert (= (and mapNonEmpty!2954 ((_ is ValueCellFull!863) mapValue!2954)) b!62403))

(assert (= (and mapNonEmpty!2938 ((_ is ValueCellFull!863) mapDefault!2954)) b!62404))

(declare-fun m!55755 () Bool)

(assert (=> mapNonEmpty!2954 m!55755))

(declare-fun b_lambda!2775 () Bool)

(assert (= b_lambda!2773 (or (and b!62032 b_free!1993) (and b!62029 b_free!1995 (= (defaultEntry!2087 newMap!16) (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))))) b_lambda!2775)))

(check-sat (not d!12555) (not b!62329) (not b!62169) (not b!62381) (not d!12561) (not d!12557) (not bm!4872) (not d!12571) (not b!62390) (not b!62303) (not d!12563) (not bm!4860) (not b!62167) (not b!62272) (not bm!4893) tp_is_empty!2413 (not b!62328) (not bm!4854) (not bm!4863) (not b!62260) (not d!12567) (not mapNonEmpty!2953) (not b!62277) (not b!62383) (not d!12575) (not b!62176) (not bm!4853) (not b!62168) (not b!62392) (not bm!4896) (not b!62387) (not d!12573) (not b!62295) b_and!3807 (not bm!4858) (not bm!4852) (not bm!4898) (not b!62178) (not b!62304) (not b!62315) (not bm!4861) (not b!62269) (not b!62310) (not b_lambda!2771) (not bm!4895) (not b_next!1995) (not b!62380) (not bm!4851) (not bm!4859) (not bm!4870) (not b_next!1993) (not b!62375) (not b_lambda!2775) (not bm!4877) (not b!62271) (not mapNonEmpty!2954) b_and!3805 (not bm!4873) (not d!12545) (not b!62327) (not b!62274) (not b!62376))
(check-sat b_and!3805 b_and!3807 (not b_next!1993) (not b_next!1995))
(get-model)

(declare-fun d!12579 () Bool)

(declare-fun res!34246 () Bool)

(declare-fun e!40976 () Bool)

(assert (=> d!12579 (=> (not res!34246) (not e!40976))))

(assert (=> d!12579 (= res!34246 (simpleValid!44 (_2!1036 lt!25898)))))

(assert (=> d!12579 (= (valid!267 (_2!1036 lt!25898)) e!40976)))

(declare-fun b!62405 () Bool)

(declare-fun res!34247 () Bool)

(assert (=> b!62405 (=> (not res!34247) (not e!40976))))

(assert (=> b!62405 (= res!34247 (= (arrayCountValidKeys!0 (_keys!3718 (_2!1036 lt!25898)) #b00000000000000000000000000000000 (size!2019 (_keys!3718 (_2!1036 lt!25898)))) (_size!366 (_2!1036 lt!25898))))))

(declare-fun b!62406 () Bool)

(declare-fun res!34248 () Bool)

(assert (=> b!62406 (=> (not res!34248) (not e!40976))))

(assert (=> b!62406 (= res!34248 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3718 (_2!1036 lt!25898)) (mask!5992 (_2!1036 lt!25898))))))

(declare-fun b!62407 () Bool)

(assert (=> b!62407 (= e!40976 (arrayNoDuplicates!0 (_keys!3718 (_2!1036 lt!25898)) #b00000000000000000000000000000000 Nil!1443))))

(assert (= (and d!12579 res!34246) b!62405))

(assert (= (and b!62405 res!34247) b!62406))

(assert (= (and b!62406 res!34248) b!62407))

(declare-fun m!55757 () Bool)

(assert (=> d!12579 m!55757))

(declare-fun m!55759 () Bool)

(assert (=> b!62405 m!55759))

(declare-fun m!55761 () Bool)

(assert (=> b!62406 m!55761))

(declare-fun m!55763 () Bool)

(assert (=> b!62407 m!55763))

(assert (=> d!12557 d!12579))

(assert (=> d!12557 d!12545))

(declare-fun d!12581 () Bool)

(declare-fun lt!25996 () Bool)

(define-sort InoxSet (T) (Array T Bool))

(declare-fun content!67 (List!1446) (InoxSet (_ BitVec 64)))

(assert (=> d!12581 (= lt!25996 (select (content!67 Nil!1443) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(declare-fun e!40982 () Bool)

(assert (=> d!12581 (= lt!25996 e!40982)))

(declare-fun res!34253 () Bool)

(assert (=> d!12581 (=> (not res!34253) (not e!40982))))

(assert (=> d!12581 (= res!34253 ((_ is Cons!1442) Nil!1443))))

(assert (=> d!12581 (= (contains!691 Nil!1443 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) lt!25996)))

(declare-fun b!62412 () Bool)

(declare-fun e!40981 () Bool)

(assert (=> b!62412 (= e!40982 e!40981)))

(declare-fun res!34254 () Bool)

(assert (=> b!62412 (=> res!34254 e!40981)))

(assert (=> b!62412 (= res!34254 (= (h!2025 Nil!1443) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(declare-fun b!62413 () Bool)

(assert (=> b!62413 (= e!40981 (contains!691 (t!4831 Nil!1443) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(assert (= (and d!12581 res!34253) b!62412))

(assert (= (and b!62412 (not res!34254)) b!62413))

(declare-fun m!55765 () Bool)

(assert (=> d!12581 m!55765))

(assert (=> d!12581 m!55481))

(declare-fun m!55767 () Bool)

(assert (=> d!12581 m!55767))

(assert (=> b!62413 m!55481))

(declare-fun m!55769 () Bool)

(assert (=> b!62413 m!55769))

(assert (=> b!62327 d!12581))

(assert (=> bm!4858 d!12571))

(declare-fun d!12583 () Bool)

(declare-fun e!40983 () Bool)

(assert (=> d!12583 e!40983))

(declare-fun res!34255 () Bool)

(assert (=> d!12583 (=> res!34255 e!40983)))

(declare-fun lt!26000 () Bool)

(assert (=> d!12583 (= res!34255 (not lt!26000))))

(declare-fun lt!25998 () Bool)

(assert (=> d!12583 (= lt!26000 lt!25998)))

(declare-fun lt!25999 () Unit!1685)

(declare-fun e!40984 () Unit!1685)

(assert (=> d!12583 (= lt!25999 e!40984)))

(declare-fun c!8301 () Bool)

(assert (=> d!12583 (= c!8301 lt!25998)))

(assert (=> d!12583 (= lt!25998 (containsKey!128 (toList!697 lt!25977) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!12583 (= (contains!690 lt!25977 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!26000)))

(declare-fun b!62414 () Bool)

(declare-fun lt!25997 () Unit!1685)

(assert (=> b!62414 (= e!40984 lt!25997)))

(assert (=> b!62414 (= lt!25997 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 lt!25977) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!62414 (isDefined!78 (getValueByKey!124 (toList!697 lt!25977) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!62415 () Bool)

(declare-fun Unit!1700 () Unit!1685)

(assert (=> b!62415 (= e!40984 Unit!1700)))

(declare-fun b!62416 () Bool)

(assert (=> b!62416 (= e!40983 (isDefined!78 (getValueByKey!124 (toList!697 lt!25977) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!12583 c!8301) b!62414))

(assert (= (and d!12583 (not c!8301)) b!62415))

(assert (= (and d!12583 (not res!34255)) b!62416))

(assert (=> d!12583 m!55685))

(declare-fun m!55771 () Bool)

(assert (=> d!12583 m!55771))

(assert (=> b!62414 m!55685))

(declare-fun m!55773 () Bool)

(assert (=> b!62414 m!55773))

(assert (=> b!62414 m!55685))

(declare-fun m!55775 () Bool)

(assert (=> b!62414 m!55775))

(assert (=> b!62414 m!55775))

(declare-fun m!55777 () Bool)

(assert (=> b!62414 m!55777))

(assert (=> b!62416 m!55685))

(assert (=> b!62416 m!55775))

(assert (=> b!62416 m!55775))

(assert (=> b!62416 m!55777))

(assert (=> b!62387 d!12583))

(assert (=> d!12573 d!12577))

(declare-fun d!12585 () Bool)

(assert (=> d!12585 (= (+!83 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) lt!25897 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26003 () Unit!1685)

(declare-fun choose!337 (array!3737 array!3739 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 V!2865 Int) Unit!1685)

(assert (=> d!12585 (= lt!26003 (choose!337 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) lt!25897 (zeroValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1999 newMap!16) (defaultEntry!2087 newMap!16)))))

(assert (=> d!12585 (validMask!0 (mask!5992 newMap!16))))

(assert (=> d!12585 (= (lemmaChangeZeroKeyThenAddPairToListMap!17 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) lt!25897 (zeroValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1999 newMap!16) (defaultEntry!2087 newMap!16)) lt!26003)))

(declare-fun bs!2707 () Bool)

(assert (= bs!2707 d!12585))

(assert (=> bs!2707 m!55647))

(declare-fun m!55779 () Bool)

(assert (=> bs!2707 m!55779))

(assert (=> bs!2707 m!55507))

(declare-fun m!55781 () Bool)

(assert (=> bs!2707 m!55781))

(assert (=> bs!2707 m!55647))

(declare-fun m!55783 () Bool)

(assert (=> bs!2707 m!55783))

(assert (=> bs!2707 m!55507))

(declare-fun m!55785 () Bool)

(assert (=> bs!2707 m!55785))

(assert (=> b!62295 d!12585))

(declare-fun b!62433 () Bool)

(declare-fun e!40995 () Bool)

(declare-fun call!4906 () Bool)

(assert (=> b!62433 (= e!40995 (not call!4906))))

(declare-fun bm!4903 () Bool)

(assert (=> bm!4903 (= call!4906 (arrayContainsKey!0 (_keys!3718 newMap!16) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!62434 () Bool)

(declare-fun e!40993 () Bool)

(declare-fun e!40996 () Bool)

(assert (=> b!62434 (= e!40993 e!40996)))

(declare-fun res!34266 () Bool)

(declare-fun call!4907 () Bool)

(assert (=> b!62434 (= res!34266 call!4907)))

(assert (=> b!62434 (=> (not res!34266) (not e!40996))))

(declare-fun b!62435 () Bool)

(declare-fun e!40994 () Bool)

(declare-fun lt!26008 () SeekEntryResult!232)

(assert (=> b!62435 (= e!40994 ((_ is Undefined!232) lt!26008))))

(declare-fun b!62436 () Bool)

(declare-fun res!34267 () Bool)

(assert (=> b!62436 (=> (not res!34267) (not e!40995))))

(assert (=> b!62436 (= res!34267 (= (select (arr!1786 (_keys!3718 newMap!16)) (index!3056 lt!26008)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62436 (and (bvsge (index!3056 lt!26008) #b00000000000000000000000000000000) (bvslt (index!3056 lt!26008) (size!2019 (_keys!3718 newMap!16))))))

(declare-fun b!62437 () Bool)

(assert (=> b!62437 (and (bvsge (index!3053 lt!26008) #b00000000000000000000000000000000) (bvslt (index!3053 lt!26008) (size!2019 (_keys!3718 newMap!16))))))

(declare-fun res!34265 () Bool)

(assert (=> b!62437 (= res!34265 (= (select (arr!1786 (_keys!3718 newMap!16)) (index!3053 lt!26008)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62437 (=> (not res!34265) (not e!40996))))

(declare-fun b!62438 () Bool)

(assert (=> b!62438 (= e!40996 (not call!4906))))

(declare-fun b!62440 () Bool)

(assert (=> b!62440 (= e!40993 e!40994)))

(declare-fun c!8306 () Bool)

(assert (=> b!62440 (= c!8306 ((_ is MissingVacant!232) lt!26008))))

(declare-fun bm!4904 () Bool)

(declare-fun c!8307 () Bool)

(assert (=> bm!4904 (= call!4907 (inRange!0 (ite c!8307 (index!3053 lt!26008) (index!3056 lt!26008)) (mask!5992 newMap!16)))))

(declare-fun b!62439 () Bool)

(declare-fun res!34264 () Bool)

(assert (=> b!62439 (=> (not res!34264) (not e!40995))))

(assert (=> b!62439 (= res!34264 call!4907)))

(assert (=> b!62439 (= e!40994 e!40995)))

(declare-fun d!12587 () Bool)

(assert (=> d!12587 e!40993))

(assert (=> d!12587 (= c!8307 ((_ is MissingZero!232) lt!26008))))

(assert (=> d!12587 (= lt!26008 (seekEntryOrOpen!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (_keys!3718 newMap!16) (mask!5992 newMap!16)))))

(declare-fun lt!26009 () Unit!1685)

(declare-fun choose!338 (array!3737 array!3739 (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 (_ BitVec 64) Int) Unit!1685)

(assert (=> d!12587 (= lt!26009 (choose!338 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (defaultEntry!2087 newMap!16)))))

(assert (=> d!12587 (validMask!0 (mask!5992 newMap!16))))

(assert (=> d!12587 (= (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!17 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (defaultEntry!2087 newMap!16)) lt!26009)))

(assert (= (and d!12587 c!8307) b!62434))

(assert (= (and d!12587 (not c!8307)) b!62440))

(assert (= (and b!62434 res!34266) b!62437))

(assert (= (and b!62437 res!34265) b!62438))

(assert (= (and b!62440 c!8306) b!62439))

(assert (= (and b!62440 (not c!8306)) b!62435))

(assert (= (and b!62439 res!34264) b!62436))

(assert (= (and b!62436 res!34267) b!62433))

(assert (= (or b!62434 b!62439) bm!4904))

(assert (= (or b!62438 b!62433) bm!4903))

(declare-fun m!55787 () Bool)

(assert (=> bm!4904 m!55787))

(assert (=> bm!4903 m!55481))

(assert (=> bm!4903 m!55641))

(assert (=> d!12587 m!55481))

(assert (=> d!12587 m!55631))

(assert (=> d!12587 m!55481))

(declare-fun m!55789 () Bool)

(assert (=> d!12587 m!55789))

(assert (=> d!12587 m!55783))

(declare-fun m!55791 () Bool)

(assert (=> b!62437 m!55791))

(declare-fun m!55793 () Bool)

(assert (=> b!62436 m!55793))

(assert (=> bm!4851 d!12587))

(declare-fun d!12589 () Bool)

(declare-fun res!34268 () Bool)

(declare-fun e!40997 () Bool)

(assert (=> d!12589 (=> (not res!34268) (not e!40997))))

(assert (=> d!12589 (= res!34268 (simpleValid!44 (v!2412 (underlying!229 thiss!992))))))

(assert (=> d!12589 (= (valid!267 (v!2412 (underlying!229 thiss!992))) e!40997)))

(declare-fun b!62441 () Bool)

(declare-fun res!34269 () Bool)

(assert (=> b!62441 (=> (not res!34269) (not e!40997))))

(assert (=> b!62441 (= res!34269 (= (arrayCountValidKeys!0 (_keys!3718 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000000000000000 (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992))))) (_size!366 (v!2412 (underlying!229 thiss!992)))))))

(declare-fun b!62442 () Bool)

(declare-fun res!34270 () Bool)

(assert (=> b!62442 (=> (not res!34270) (not e!40997))))

(assert (=> b!62442 (= res!34270 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (mask!5992 (v!2412 (underlying!229 thiss!992)))))))

(declare-fun b!62443 () Bool)

(assert (=> b!62443 (= e!40997 (arrayNoDuplicates!0 (_keys!3718 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000000000000000 Nil!1443))))

(assert (= (and d!12589 res!34268) b!62441))

(assert (= (and b!62441 res!34269) b!62442))

(assert (= (and b!62442 res!34270) b!62443))

(declare-fun m!55795 () Bool)

(assert (=> d!12589 m!55795))

(declare-fun m!55797 () Bool)

(assert (=> b!62441 m!55797))

(declare-fun m!55799 () Bool)

(assert (=> b!62442 m!55799))

(declare-fun m!55801 () Bool)

(assert (=> b!62443 m!55801))

(assert (=> d!12575 d!12589))

(declare-fun d!12591 () Bool)

(declare-fun res!34271 () Bool)

(declare-fun e!40998 () Bool)

(assert (=> d!12591 (=> res!34271 e!40998)))

(assert (=> d!12591 (= res!34271 (= (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(assert (=> d!12591 (= (arrayContainsKey!0 (_keys!3718 newMap!16) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) #b00000000000000000000000000000000) e!40998)))

(declare-fun b!62444 () Bool)

(declare-fun e!40999 () Bool)

(assert (=> b!62444 (= e!40998 e!40999)))

(declare-fun res!34272 () Bool)

(assert (=> b!62444 (=> (not res!34272) (not e!40999))))

(assert (=> b!62444 (= res!34272 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2019 (_keys!3718 newMap!16))))))

(declare-fun b!62445 () Bool)

(assert (=> b!62445 (= e!40999 (arrayContainsKey!0 (_keys!3718 newMap!16) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!12591 (not res!34271)) b!62444))

(assert (= (and b!62444 res!34272) b!62445))

(declare-fun m!55803 () Bool)

(assert (=> d!12591 m!55803))

(assert (=> b!62445 m!55481))

(declare-fun m!55805 () Bool)

(assert (=> b!62445 m!55805))

(assert (=> bm!4860 d!12591))

(declare-fun d!12593 () Bool)

(assert (=> d!12593 (= (validKeyInArray!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (and (not (= (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62329 d!12593))

(declare-fun d!12595 () Bool)

(declare-fun get!1092 (Option!130) V!2865)

(assert (=> d!12595 (= (apply!68 lt!25977 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1092 (getValueByKey!124 (toList!697 lt!25977) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2708 () Bool)

(assert (= bs!2708 d!12595))

(declare-fun m!55807 () Bool)

(assert (=> bs!2708 m!55807))

(assert (=> bs!2708 m!55807))

(declare-fun m!55809 () Bool)

(assert (=> bs!2708 m!55809))

(assert (=> b!62375 d!12595))

(declare-fun b!62470 () Bool)

(assert (=> b!62470 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992))))))))

(assert (=> b!62470 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2020 (_values!2070 (v!2412 (underlying!229 thiss!992))))))))

(declare-fun lt!26029 () ListLongMap!1363)

(declare-fun e!41016 () Bool)

(assert (=> b!62470 (= e!41016 (= (apply!68 lt!26029 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!62471 () Bool)

(declare-fun lt!26024 () Unit!1685)

(declare-fun lt!26027 () Unit!1685)

(assert (=> b!62471 (= lt!26024 lt!26027)))

(declare-fun lt!26030 () (_ BitVec 64))

(declare-fun lt!26026 () ListLongMap!1363)

(declare-fun lt!26025 () (_ BitVec 64))

(declare-fun lt!26028 () V!2865)

(assert (=> b!62471 (not (contains!690 (+!83 lt!26026 (tuple2!2053 lt!26030 lt!26028)) lt!26025))))

(declare-fun addStillNotContains!18 (ListLongMap!1363 (_ BitVec 64) V!2865 (_ BitVec 64)) Unit!1685)

(assert (=> b!62471 (= lt!26027 (addStillNotContains!18 lt!26026 lt!26030 lt!26028 lt!26025))))

(assert (=> b!62471 (= lt!26025 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!62471 (= lt!26028 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!62471 (= lt!26030 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun call!4910 () ListLongMap!1363)

(assert (=> b!62471 (= lt!26026 call!4910)))

(declare-fun e!41017 () ListLongMap!1363)

(assert (=> b!62471 (= e!41017 (+!83 call!4910 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!62472 () Bool)

(declare-fun res!34283 () Bool)

(declare-fun e!41018 () Bool)

(assert (=> b!62472 (=> (not res!34283) (not e!41018))))

(assert (=> b!62472 (= res!34283 (not (contains!690 lt!26029 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!62473 () Bool)

(declare-fun e!41014 () Bool)

(assert (=> b!62473 (= e!41014 (validKeyInArray!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!62473 (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000)))

(declare-fun bm!4907 () Bool)

(assert (=> bm!4907 (= call!4910 (getCurrentListMapNoExtraKeys!46 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (_values!2070 (v!2412 (underlying!229 thiss!992))) (mask!5992 (v!2412 (underlying!229 thiss!992))) (extraKeys!1966 (v!2412 (underlying!229 thiss!992))) (zeroValue!1999 (v!2412 (underlying!229 thiss!992))) (minValue!1999 (v!2412 (underlying!229 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2087 (v!2412 (underlying!229 thiss!992)))))))

(declare-fun b!62474 () Bool)

(declare-fun e!41015 () ListLongMap!1363)

(assert (=> b!62474 (= e!41015 e!41017)))

(declare-fun c!8319 () Bool)

(assert (=> b!62474 (= c!8319 (validKeyInArray!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!41020 () Bool)

(declare-fun b!62475 () Bool)

(assert (=> b!62475 (= e!41020 (= lt!26029 (getCurrentListMapNoExtraKeys!46 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (_values!2070 (v!2412 (underlying!229 thiss!992))) (mask!5992 (v!2412 (underlying!229 thiss!992))) (extraKeys!1966 (v!2412 (underlying!229 thiss!992))) (zeroValue!1999 (v!2412 (underlying!229 thiss!992))) (minValue!1999 (v!2412 (underlying!229 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))))))))

(declare-fun d!12597 () Bool)

(assert (=> d!12597 e!41018))

(declare-fun res!34284 () Bool)

(assert (=> d!12597 (=> (not res!34284) (not e!41018))))

(assert (=> d!12597 (= res!34284 (not (contains!690 lt!26029 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12597 (= lt!26029 e!41015)))

(declare-fun c!8318 () Bool)

(assert (=> d!12597 (= c!8318 (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992))))))))

(assert (=> d!12597 (validMask!0 (mask!5992 (v!2412 (underlying!229 thiss!992))))))

(assert (=> d!12597 (= (getCurrentListMapNoExtraKeys!46 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (_values!2070 (v!2412 (underlying!229 thiss!992))) (mask!5992 (v!2412 (underlying!229 thiss!992))) (extraKeys!1966 (v!2412 (underlying!229 thiss!992))) (zeroValue!1999 (v!2412 (underlying!229 thiss!992))) (minValue!1999 (v!2412 (underlying!229 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2087 (v!2412 (underlying!229 thiss!992)))) lt!26029)))

(declare-fun b!62476 () Bool)

(declare-fun isEmpty!303 (ListLongMap!1363) Bool)

(assert (=> b!62476 (= e!41020 (isEmpty!303 lt!26029))))

(declare-fun b!62477 () Bool)

(declare-fun e!41019 () Bool)

(assert (=> b!62477 (= e!41019 e!41020)))

(declare-fun c!8317 () Bool)

(assert (=> b!62477 (= c!8317 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992))))))))

(declare-fun b!62478 () Bool)

(assert (=> b!62478 (= e!41017 call!4910)))

(declare-fun b!62479 () Bool)

(assert (=> b!62479 (= e!41019 e!41016)))

(assert (=> b!62479 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992))))))))

(declare-fun res!34282 () Bool)

(assert (=> b!62479 (= res!34282 (contains!690 lt!26029 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!62479 (=> (not res!34282) (not e!41016))))

(declare-fun b!62480 () Bool)

(assert (=> b!62480 (= e!41018 e!41019)))

(declare-fun c!8316 () Bool)

(assert (=> b!62480 (= c!8316 e!41014)))

(declare-fun res!34281 () Bool)

(assert (=> b!62480 (=> (not res!34281) (not e!41014))))

(assert (=> b!62480 (= res!34281 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992))))))))

(declare-fun b!62481 () Bool)

(assert (=> b!62481 (= e!41015 (ListLongMap!1364 Nil!1444))))

(assert (= (and d!12597 c!8318) b!62481))

(assert (= (and d!12597 (not c!8318)) b!62474))

(assert (= (and b!62474 c!8319) b!62471))

(assert (= (and b!62474 (not c!8319)) b!62478))

(assert (= (or b!62471 b!62478) bm!4907))

(assert (= (and d!12597 res!34284) b!62472))

(assert (= (and b!62472 res!34283) b!62480))

(assert (= (and b!62480 res!34281) b!62473))

(assert (= (and b!62480 c!8316) b!62479))

(assert (= (and b!62480 (not c!8316)) b!62477))

(assert (= (and b!62479 res!34282) b!62470))

(assert (= (and b!62477 c!8317) b!62475))

(assert (= (and b!62477 (not c!8317)) b!62476))

(declare-fun b_lambda!2777 () Bool)

(assert (=> (not b_lambda!2777) (not b!62470)))

(assert (=> b!62470 t!4828))

(declare-fun b_and!3809 () Bool)

(assert (= b_and!3805 (and (=> t!4828 result!2435) b_and!3809)))

(assert (=> b!62470 t!4830))

(declare-fun b_and!3811 () Bool)

(assert (= b_and!3807 (and (=> t!4830 result!2439) b_and!3811)))

(declare-fun b_lambda!2779 () Bool)

(assert (=> (not b_lambda!2779) (not b!62471)))

(assert (=> b!62471 t!4828))

(declare-fun b_and!3813 () Bool)

(assert (= b_and!3809 (and (=> t!4828 result!2435) b_and!3813)))

(assert (=> b!62471 t!4830))

(declare-fun b_and!3815 () Bool)

(assert (= b_and!3811 (and (=> t!4830 result!2439) b_and!3815)))

(assert (=> b!62479 m!55685))

(assert (=> b!62479 m!55685))

(declare-fun m!55811 () Bool)

(assert (=> b!62479 m!55811))

(declare-fun m!55813 () Bool)

(assert (=> b!62475 m!55813))

(assert (=> b!62470 m!55685))

(declare-fun m!55815 () Bool)

(assert (=> b!62470 m!55815))

(assert (=> b!62470 m!55685))

(assert (=> b!62470 m!55505))

(assert (=> b!62470 m!55715))

(assert (=> b!62470 m!55505))

(assert (=> b!62470 m!55717))

(assert (=> b!62470 m!55715))

(declare-fun m!55817 () Bool)

(assert (=> b!62472 m!55817))

(declare-fun m!55819 () Bool)

(assert (=> b!62476 m!55819))

(declare-fun m!55821 () Bool)

(assert (=> d!12597 m!55821))

(assert (=> d!12597 m!55513))

(declare-fun m!55823 () Bool)

(assert (=> b!62471 m!55823))

(assert (=> b!62471 m!55685))

(declare-fun m!55825 () Bool)

(assert (=> b!62471 m!55825))

(assert (=> b!62471 m!55715))

(assert (=> b!62471 m!55505))

(assert (=> b!62471 m!55717))

(assert (=> b!62471 m!55715))

(declare-fun m!55827 () Bool)

(assert (=> b!62471 m!55827))

(assert (=> b!62471 m!55505))

(assert (=> b!62471 m!55823))

(declare-fun m!55829 () Bool)

(assert (=> b!62471 m!55829))

(assert (=> bm!4907 m!55813))

(assert (=> b!62474 m!55685))

(assert (=> b!62474 m!55685))

(assert (=> b!62474 m!55701))

(assert (=> b!62473 m!55685))

(assert (=> b!62473 m!55685))

(assert (=> b!62473 m!55701))

(assert (=> bm!4898 d!12597))

(declare-fun d!12599 () Bool)

(declare-fun e!41023 () Bool)

(assert (=> d!12599 e!41023))

(declare-fun c!8322 () Bool)

(assert (=> d!12599 (= c!8322 (and (not (= (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> d!12599 true))

(declare-fun _$29!72 () Unit!1685)

(assert (=> d!12599 (= (choose!336 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (_values!2070 (v!2412 (underlying!229 thiss!992))) (mask!5992 (v!2412 (underlying!229 thiss!992))) (extraKeys!1966 (v!2412 (underlying!229 thiss!992))) (zeroValue!1999 (v!2412 (underlying!229 thiss!992))) (minValue!1999 (v!2412 (underlying!229 thiss!992))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2087 (v!2412 (underlying!229 thiss!992)))) _$29!72)))

(declare-fun b!62486 () Bool)

(assert (=> b!62486 (= e!41023 (arrayContainsKey!0 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!62487 () Bool)

(assert (=> b!62487 (= e!41023 (ite (= (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!1966 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1966 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!12599 c!8322) b!62486))

(assert (= (and d!12599 (not c!8322)) b!62487))

(assert (=> b!62486 m!55481))

(assert (=> b!62486 m!55499))

(assert (=> d!12567 d!12599))

(assert (=> d!12567 d!12577))

(declare-fun d!12601 () Bool)

(declare-fun isEmpty!304 (Option!130) Bool)

(assert (=> d!12601 (= (isDefined!78 (getValueByKey!124 (toList!697 lt!25781) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355))) (not (isEmpty!304 (getValueByKey!124 (toList!697 lt!25781) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))))

(declare-fun bs!2709 () Bool)

(assert (= bs!2709 d!12601))

(assert (=> bs!2709 m!55617))

(declare-fun m!55831 () Bool)

(assert (=> bs!2709 m!55831))

(assert (=> b!62178 d!12601))

(declare-fun d!12603 () Bool)

(declare-fun c!8327 () Bool)

(assert (=> d!12603 (= c!8327 (and ((_ is Cons!1443) (toList!697 lt!25781)) (= (_1!1037 (h!2026 (toList!697 lt!25781))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355))))))

(declare-fun e!41028 () Option!130)

(assert (=> d!12603 (= (getValueByKey!124 (toList!697 lt!25781) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) e!41028)))

(declare-fun b!62496 () Bool)

(assert (=> b!62496 (= e!41028 (Some!129 (_2!1037 (h!2026 (toList!697 lt!25781)))))))

(declare-fun b!62499 () Bool)

(declare-fun e!41029 () Option!130)

(assert (=> b!62499 (= e!41029 None!128)))

(declare-fun b!62497 () Bool)

(assert (=> b!62497 (= e!41028 e!41029)))

(declare-fun c!8328 () Bool)

(assert (=> b!62497 (= c!8328 (and ((_ is Cons!1443) (toList!697 lt!25781)) (not (= (_1!1037 (h!2026 (toList!697 lt!25781))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))))

(declare-fun b!62498 () Bool)

(assert (=> b!62498 (= e!41029 (getValueByKey!124 (t!4832 (toList!697 lt!25781)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(assert (= (and d!12603 c!8327) b!62496))

(assert (= (and d!12603 (not c!8327)) b!62497))

(assert (= (and b!62497 c!8328) b!62498))

(assert (= (and b!62497 (not c!8328)) b!62499))

(assert (=> b!62498 m!55481))

(declare-fun m!55833 () Bool)

(assert (=> b!62498 m!55833))

(assert (=> b!62178 d!12603))

(declare-fun d!12605 () Bool)

(assert (=> d!12605 (isDefined!78 (getValueByKey!124 (toList!697 lt!25781) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(declare-fun lt!26033 () Unit!1685)

(declare-fun choose!339 (List!1447 (_ BitVec 64)) Unit!1685)

(assert (=> d!12605 (= lt!26033 (choose!339 (toList!697 lt!25781) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(declare-fun e!41032 () Bool)

(assert (=> d!12605 e!41032))

(declare-fun res!34287 () Bool)

(assert (=> d!12605 (=> (not res!34287) (not e!41032))))

(declare-fun isStrictlySorted!281 (List!1447) Bool)

(assert (=> d!12605 (= res!34287 (isStrictlySorted!281 (toList!697 lt!25781)))))

(assert (=> d!12605 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 lt!25781) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) lt!26033)))

(declare-fun b!62502 () Bool)

(assert (=> b!62502 (= e!41032 (containsKey!128 (toList!697 lt!25781) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(assert (= (and d!12605 res!34287) b!62502))

(assert (=> d!12605 m!55481))

(assert (=> d!12605 m!55617))

(assert (=> d!12605 m!55617))

(assert (=> d!12605 m!55619))

(assert (=> d!12605 m!55481))

(declare-fun m!55835 () Bool)

(assert (=> d!12605 m!55835))

(declare-fun m!55837 () Bool)

(assert (=> d!12605 m!55837))

(assert (=> b!62502 m!55481))

(assert (=> b!62502 m!55613))

(assert (=> b!62176 d!12605))

(assert (=> b!62176 d!12601))

(assert (=> b!62176 d!12603))

(declare-fun b!62503 () Bool)

(declare-fun res!34290 () Bool)

(declare-fun e!41034 () Bool)

(assert (=> b!62503 (=> (not res!34290) (not e!41034))))

(declare-fun e!41045 () Bool)

(assert (=> b!62503 (= res!34290 e!41045)))

(declare-fun c!8334 () Bool)

(assert (=> b!62503 (= c!8334 (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!62504 () Bool)

(declare-fun e!41039 () Bool)

(declare-fun lt!26039 () ListLongMap!1363)

(assert (=> b!62504 (= e!41039 (= (apply!68 lt!26039 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1999 newMap!16)))))

(declare-fun b!62505 () Bool)

(declare-fun e!41043 () Bool)

(assert (=> b!62505 (= e!41043 (= (apply!68 lt!26039 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1999 newMap!16)))))

(declare-fun d!12607 () Bool)

(assert (=> d!12607 e!41034))

(declare-fun res!34289 () Bool)

(assert (=> d!12607 (=> (not res!34289) (not e!41034))))

(assert (=> d!12607 (= res!34289 (or (bvsge #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))))

(declare-fun lt!26041 () ListLongMap!1363)

(assert (=> d!12607 (= lt!26039 lt!26041)))

(declare-fun lt!26047 () Unit!1685)

(declare-fun e!41041 () Unit!1685)

(assert (=> d!12607 (= lt!26047 e!41041)))

(declare-fun c!8331 () Bool)

(declare-fun e!41033 () Bool)

(assert (=> d!12607 (= c!8331 e!41033)))

(declare-fun res!34295 () Bool)

(assert (=> d!12607 (=> (not res!34295) (not e!41033))))

(assert (=> d!12607 (= res!34295 (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(declare-fun e!41042 () ListLongMap!1363)

(assert (=> d!12607 (= lt!26041 e!41042)))

(declare-fun c!8332 () Bool)

(assert (=> d!12607 (= c!8332 (and (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12607 (validMask!0 (mask!5992 newMap!16))))

(assert (=> d!12607 (= (getCurrentListMap!393 (_keys!3718 newMap!16) (ite c!8266 (_values!2070 newMap!16) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (index!3054 lt!25902) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16)))) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) lt!26039)))

(declare-fun b!62506 () Bool)

(declare-fun res!34294 () Bool)

(assert (=> b!62506 (=> (not res!34294) (not e!41034))))

(declare-fun e!41040 () Bool)

(assert (=> b!62506 (= res!34294 e!41040)))

(declare-fun res!34291 () Bool)

(assert (=> b!62506 (=> res!34291 e!41040)))

(declare-fun e!41038 () Bool)

(assert (=> b!62506 (= res!34291 (not e!41038))))

(declare-fun res!34292 () Bool)

(assert (=> b!62506 (=> (not res!34292) (not e!41038))))

(assert (=> b!62506 (= res!34292 (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(declare-fun bm!4908 () Bool)

(declare-fun call!4914 () ListLongMap!1363)

(declare-fun call!4915 () ListLongMap!1363)

(assert (=> bm!4908 (= call!4914 call!4915)))

(declare-fun b!62507 () Bool)

(declare-fun e!41037 () ListLongMap!1363)

(declare-fun call!4916 () ListLongMap!1363)

(assert (=> b!62507 (= e!41037 call!4916)))

(declare-fun bm!4909 () Bool)

(declare-fun call!4913 () Bool)

(assert (=> bm!4909 (= call!4913 (contains!690 lt!26039 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62508 () Bool)

(assert (=> b!62508 (= e!41045 (not call!4913))))

(declare-fun bm!4910 () Bool)

(declare-fun call!4917 () ListLongMap!1363)

(declare-fun call!4912 () ListLongMap!1363)

(assert (=> bm!4910 (= call!4917 call!4912)))

(declare-fun c!8333 () Bool)

(declare-fun bm!4911 () Bool)

(assert (=> bm!4911 (= call!4912 (+!83 (ite c!8332 call!4915 (ite c!8333 call!4914 call!4916)) (ite (or c!8332 c!8333) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(declare-fun b!62509 () Bool)

(assert (=> b!62509 (= e!41033 (validKeyInArray!0 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62510 () Bool)

(assert (=> b!62510 (= e!41042 (+!83 call!4912 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))

(declare-fun bm!4912 () Bool)

(declare-fun call!4911 () Bool)

(assert (=> bm!4912 (= call!4911 (contains!690 lt!26039 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62511 () Bool)

(declare-fun Unit!1701 () Unit!1685)

(assert (=> b!62511 (= e!41041 Unit!1701)))

(declare-fun b!62512 () Bool)

(assert (=> b!62512 (= e!41038 (validKeyInArray!0 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62513 () Bool)

(declare-fun c!8329 () Bool)

(assert (=> b!62513 (= c!8329 (and (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!41044 () ListLongMap!1363)

(assert (=> b!62513 (= e!41044 e!41037)))

(declare-fun b!62514 () Bool)

(declare-fun e!41035 () Bool)

(assert (=> b!62514 (= e!41034 e!41035)))

(declare-fun c!8330 () Bool)

(assert (=> b!62514 (= c!8330 (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!62515 () Bool)

(assert (=> b!62515 (= e!41042 e!41044)))

(assert (=> b!62515 (= c!8333 (and (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!62516 () Bool)

(declare-fun e!41036 () Bool)

(assert (=> b!62516 (= e!41040 e!41036)))

(declare-fun res!34293 () Bool)

(assert (=> b!62516 (=> (not res!34293) (not e!41036))))

(assert (=> b!62516 (= res!34293 (contains!690 lt!26039 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!62516 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(declare-fun b!62517 () Bool)

(assert (=> b!62517 (= e!41035 (not call!4911))))

(declare-fun bm!4913 () Bool)

(assert (=> bm!4913 (= call!4916 call!4914)))

(declare-fun b!62518 () Bool)

(assert (=> b!62518 (= e!41045 e!41043)))

(declare-fun res!34296 () Bool)

(assert (=> b!62518 (= res!34296 call!4913)))

(assert (=> b!62518 (=> (not res!34296) (not e!41043))))

(declare-fun bm!4914 () Bool)

(assert (=> bm!4914 (= call!4915 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (ite c!8266 (_values!2070 newMap!16) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (index!3054 lt!25902) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16)))) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun b!62519 () Bool)

(assert (=> b!62519 (= e!41036 (= (apply!68 lt!26039 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)) (get!1089 (select (arr!1787 (ite c!8266 (_values!2070 newMap!16) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (index!3054 lt!25902) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!312 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62519 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2020 (ite c!8266 (_values!2070 newMap!16) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (index!3054 lt!25902) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16)))))))))

(assert (=> b!62519 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(declare-fun b!62520 () Bool)

(assert (=> b!62520 (= e!41037 call!4917)))

(declare-fun b!62521 () Bool)

(declare-fun lt!26053 () Unit!1685)

(assert (=> b!62521 (= e!41041 lt!26053)))

(declare-fun lt!26038 () ListLongMap!1363)

(assert (=> b!62521 (= lt!26038 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (ite c!8266 (_values!2070 newMap!16) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (index!3054 lt!25902) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16)))) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26044 () (_ BitVec 64))

(assert (=> b!62521 (= lt!26044 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26051 () (_ BitVec 64))

(assert (=> b!62521 (= lt!26051 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26045 () Unit!1685)

(assert (=> b!62521 (= lt!26045 (addStillContains!44 lt!26038 lt!26044 (zeroValue!1999 newMap!16) lt!26051))))

(assert (=> b!62521 (contains!690 (+!83 lt!26038 (tuple2!2053 lt!26044 (zeroValue!1999 newMap!16))) lt!26051)))

(declare-fun lt!26037 () Unit!1685)

(assert (=> b!62521 (= lt!26037 lt!26045)))

(declare-fun lt!26035 () ListLongMap!1363)

(assert (=> b!62521 (= lt!26035 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (ite c!8266 (_values!2070 newMap!16) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (index!3054 lt!25902) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16)))) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26046 () (_ BitVec 64))

(assert (=> b!62521 (= lt!26046 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26050 () (_ BitVec 64))

(assert (=> b!62521 (= lt!26050 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26042 () Unit!1685)

(assert (=> b!62521 (= lt!26042 (addApplyDifferent!44 lt!26035 lt!26046 (minValue!1999 newMap!16) lt!26050))))

(assert (=> b!62521 (= (apply!68 (+!83 lt!26035 (tuple2!2053 lt!26046 (minValue!1999 newMap!16))) lt!26050) (apply!68 lt!26035 lt!26050))))

(declare-fun lt!26034 () Unit!1685)

(assert (=> b!62521 (= lt!26034 lt!26042)))

(declare-fun lt!26043 () ListLongMap!1363)

(assert (=> b!62521 (= lt!26043 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (ite c!8266 (_values!2070 newMap!16) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (index!3054 lt!25902) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16)))) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26048 () (_ BitVec 64))

(assert (=> b!62521 (= lt!26048 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26036 () (_ BitVec 64))

(assert (=> b!62521 (= lt!26036 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26055 () Unit!1685)

(assert (=> b!62521 (= lt!26055 (addApplyDifferent!44 lt!26043 lt!26048 (zeroValue!1999 newMap!16) lt!26036))))

(assert (=> b!62521 (= (apply!68 (+!83 lt!26043 (tuple2!2053 lt!26048 (zeroValue!1999 newMap!16))) lt!26036) (apply!68 lt!26043 lt!26036))))

(declare-fun lt!26049 () Unit!1685)

(assert (=> b!62521 (= lt!26049 lt!26055)))

(declare-fun lt!26040 () ListLongMap!1363)

(assert (=> b!62521 (= lt!26040 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (ite c!8266 (_values!2070 newMap!16) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (index!3054 lt!25902) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16)))) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26052 () (_ BitVec 64))

(assert (=> b!62521 (= lt!26052 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26054 () (_ BitVec 64))

(assert (=> b!62521 (= lt!26054 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!62521 (= lt!26053 (addApplyDifferent!44 lt!26040 lt!26052 (minValue!1999 newMap!16) lt!26054))))

(assert (=> b!62521 (= (apply!68 (+!83 lt!26040 (tuple2!2053 lt!26052 (minValue!1999 newMap!16))) lt!26054) (apply!68 lt!26040 lt!26054))))

(declare-fun b!62522 () Bool)

(assert (=> b!62522 (= e!41035 e!41039)))

(declare-fun res!34288 () Bool)

(assert (=> b!62522 (= res!34288 call!4911)))

(assert (=> b!62522 (=> (not res!34288) (not e!41039))))

(declare-fun b!62523 () Bool)

(assert (=> b!62523 (= e!41044 call!4917)))

(assert (= (and d!12607 c!8332) b!62510))

(assert (= (and d!12607 (not c!8332)) b!62515))

(assert (= (and b!62515 c!8333) b!62523))

(assert (= (and b!62515 (not c!8333)) b!62513))

(assert (= (and b!62513 c!8329) b!62520))

(assert (= (and b!62513 (not c!8329)) b!62507))

(assert (= (or b!62520 b!62507) bm!4913))

(assert (= (or b!62523 bm!4913) bm!4908))

(assert (= (or b!62523 b!62520) bm!4910))

(assert (= (or b!62510 bm!4908) bm!4914))

(assert (= (or b!62510 bm!4910) bm!4911))

(assert (= (and d!12607 res!34295) b!62509))

(assert (= (and d!12607 c!8331) b!62521))

(assert (= (and d!12607 (not c!8331)) b!62511))

(assert (= (and d!12607 res!34289) b!62506))

(assert (= (and b!62506 res!34292) b!62512))

(assert (= (and b!62506 (not res!34291)) b!62516))

(assert (= (and b!62516 res!34293) b!62519))

(assert (= (and b!62506 res!34294) b!62503))

(assert (= (and b!62503 c!8334) b!62518))

(assert (= (and b!62503 (not c!8334)) b!62508))

(assert (= (and b!62518 res!34296) b!62505))

(assert (= (or b!62518 b!62508) bm!4909))

(assert (= (and b!62503 res!34290) b!62514))

(assert (= (and b!62514 c!8330) b!62522))

(assert (= (and b!62514 (not c!8330)) b!62517))

(assert (= (and b!62522 res!34288) b!62504))

(assert (= (or b!62522 b!62517) bm!4912))

(declare-fun b_lambda!2781 () Bool)

(assert (=> (not b_lambda!2781) (not b!62519)))

(declare-fun t!4844 () Bool)

(declare-fun tb!1373 () Bool)

(assert (=> (and b!62032 (= (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) (defaultEntry!2087 newMap!16)) t!4844) tb!1373))

(declare-fun result!2455 () Bool)

(assert (=> tb!1373 (= result!2455 tp_is_empty!2413)))

(assert (=> b!62519 t!4844))

(declare-fun b_and!3817 () Bool)

(assert (= b_and!3813 (and (=> t!4844 result!2455) b_and!3817)))

(declare-fun t!4846 () Bool)

(declare-fun tb!1375 () Bool)

(assert (=> (and b!62029 (= (defaultEntry!2087 newMap!16) (defaultEntry!2087 newMap!16)) t!4846) tb!1375))

(declare-fun result!2457 () Bool)

(assert (= result!2457 result!2455))

(assert (=> b!62519 t!4846))

(declare-fun b_and!3819 () Bool)

(assert (= b_and!3815 (and (=> t!4846 result!2457) b_and!3819)))

(declare-fun m!55839 () Bool)

(assert (=> bm!4914 m!55839))

(declare-fun m!55841 () Bool)

(assert (=> b!62510 m!55841))

(assert (=> b!62512 m!55803))

(assert (=> b!62512 m!55803))

(declare-fun m!55843 () Bool)

(assert (=> b!62512 m!55843))

(declare-fun m!55845 () Bool)

(assert (=> bm!4912 m!55845))

(assert (=> b!62516 m!55803))

(assert (=> b!62516 m!55803))

(declare-fun m!55847 () Bool)

(assert (=> b!62516 m!55847))

(declare-fun m!55849 () Bool)

(assert (=> b!62504 m!55849))

(declare-fun m!55851 () Bool)

(assert (=> bm!4911 m!55851))

(assert (=> b!62509 m!55803))

(assert (=> b!62509 m!55803))

(assert (=> b!62509 m!55843))

(declare-fun m!55853 () Bool)

(assert (=> bm!4909 m!55853))

(assert (=> b!62519 m!55803))

(declare-fun m!55855 () Bool)

(assert (=> b!62519 m!55855))

(declare-fun m!55857 () Bool)

(assert (=> b!62519 m!55857))

(declare-fun m!55859 () Bool)

(assert (=> b!62519 m!55859))

(assert (=> b!62519 m!55803))

(assert (=> b!62519 m!55859))

(assert (=> b!62519 m!55857))

(declare-fun m!55861 () Bool)

(assert (=> b!62519 m!55861))

(declare-fun m!55863 () Bool)

(assert (=> b!62505 m!55863))

(declare-fun m!55865 () Bool)

(assert (=> b!62521 m!55865))

(assert (=> b!62521 m!55839))

(declare-fun m!55867 () Bool)

(assert (=> b!62521 m!55867))

(assert (=> b!62521 m!55867))

(declare-fun m!55869 () Bool)

(assert (=> b!62521 m!55869))

(declare-fun m!55871 () Bool)

(assert (=> b!62521 m!55871))

(declare-fun m!55873 () Bool)

(assert (=> b!62521 m!55873))

(declare-fun m!55875 () Bool)

(assert (=> b!62521 m!55875))

(declare-fun m!55877 () Bool)

(assert (=> b!62521 m!55877))

(declare-fun m!55879 () Bool)

(assert (=> b!62521 m!55879))

(declare-fun m!55881 () Bool)

(assert (=> b!62521 m!55881))

(assert (=> b!62521 m!55803))

(declare-fun m!55883 () Bool)

(assert (=> b!62521 m!55883))

(declare-fun m!55885 () Bool)

(assert (=> b!62521 m!55885))

(declare-fun m!55887 () Bool)

(assert (=> b!62521 m!55887))

(assert (=> b!62521 m!55885))

(declare-fun m!55889 () Bool)

(assert (=> b!62521 m!55889))

(assert (=> b!62521 m!55873))

(declare-fun m!55891 () Bool)

(assert (=> b!62521 m!55891))

(assert (=> b!62521 m!55879))

(declare-fun m!55893 () Bool)

(assert (=> b!62521 m!55893))

(assert (=> d!12607 m!55783))

(assert (=> bm!4853 d!12607))

(declare-fun d!12609 () Bool)

(declare-fun e!41046 () Bool)

(assert (=> d!12609 e!41046))

(declare-fun res!34297 () Bool)

(assert (=> d!12609 (=> res!34297 e!41046)))

(declare-fun lt!26059 () Bool)

(assert (=> d!12609 (= res!34297 (not lt!26059))))

(declare-fun lt!26057 () Bool)

(assert (=> d!12609 (= lt!26059 lt!26057)))

(declare-fun lt!26058 () Unit!1685)

(declare-fun e!41047 () Unit!1685)

(assert (=> d!12609 (= lt!26058 e!41047)))

(declare-fun c!8335 () Bool)

(assert (=> d!12609 (= c!8335 lt!26057)))

(assert (=> d!12609 (= lt!26057 (containsKey!128 (toList!697 call!4868) (ite c!8262 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (select (arr!1786 (_keys!3718 newMap!16)) (index!3054 lt!25902)))))))

(assert (=> d!12609 (= (contains!690 call!4868 (ite c!8262 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (select (arr!1786 (_keys!3718 newMap!16)) (index!3054 lt!25902)))) lt!26059)))

(declare-fun b!62524 () Bool)

(declare-fun lt!26056 () Unit!1685)

(assert (=> b!62524 (= e!41047 lt!26056)))

(assert (=> b!62524 (= lt!26056 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 call!4868) (ite c!8262 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (select (arr!1786 (_keys!3718 newMap!16)) (index!3054 lt!25902)))))))

(assert (=> b!62524 (isDefined!78 (getValueByKey!124 (toList!697 call!4868) (ite c!8262 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (select (arr!1786 (_keys!3718 newMap!16)) (index!3054 lt!25902)))))))

(declare-fun b!62525 () Bool)

(declare-fun Unit!1702 () Unit!1685)

(assert (=> b!62525 (= e!41047 Unit!1702)))

(declare-fun b!62526 () Bool)

(assert (=> b!62526 (= e!41046 (isDefined!78 (getValueByKey!124 (toList!697 call!4868) (ite c!8262 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (select (arr!1786 (_keys!3718 newMap!16)) (index!3054 lt!25902))))))))

(assert (= (and d!12609 c!8335) b!62524))

(assert (= (and d!12609 (not c!8335)) b!62525))

(assert (= (and d!12609 (not res!34297)) b!62526))

(declare-fun m!55895 () Bool)

(assert (=> d!12609 m!55895))

(declare-fun m!55897 () Bool)

(assert (=> b!62524 m!55897))

(declare-fun m!55899 () Bool)

(assert (=> b!62524 m!55899))

(assert (=> b!62524 m!55899))

(declare-fun m!55901 () Bool)

(assert (=> b!62524 m!55901))

(assert (=> b!62526 m!55899))

(assert (=> b!62526 m!55899))

(assert (=> b!62526 m!55901))

(assert (=> bm!4861 d!12609))

(declare-fun d!12611 () Bool)

(declare-fun e!41050 () Bool)

(assert (=> d!12611 e!41050))

(declare-fun res!34303 () Bool)

(assert (=> d!12611 (=> (not res!34303) (not e!41050))))

(declare-fun lt!26070 () ListLongMap!1363)

(assert (=> d!12611 (= res!34303 (contains!690 lt!26070 (_1!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!26068 () List!1447)

(assert (=> d!12611 (= lt!26070 (ListLongMap!1364 lt!26068))))

(declare-fun lt!26069 () Unit!1685)

(declare-fun lt!26071 () Unit!1685)

(assert (=> d!12611 (= lt!26069 lt!26071)))

(assert (=> d!12611 (= (getValueByKey!124 lt!26068 (_1!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!129 (_2!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lemmaContainsTupThenGetReturnValue!44 (List!1447 (_ BitVec 64) V!2865) Unit!1685)

(assert (=> d!12611 (= lt!26071 (lemmaContainsTupThenGetReturnValue!44 lt!26068 (_1!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun insertStrictlySorted!47 (List!1447 (_ BitVec 64) V!2865) List!1447)

(assert (=> d!12611 (= lt!26068 (insertStrictlySorted!47 (toList!697 e!40887) (_1!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!12611 (= (+!83 e!40887 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!26070)))

(declare-fun b!62531 () Bool)

(declare-fun res!34302 () Bool)

(assert (=> b!62531 (=> (not res!34302) (not e!41050))))

(assert (=> b!62531 (= res!34302 (= (getValueByKey!124 (toList!697 lt!26070) (_1!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!129 (_2!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!62532 () Bool)

(declare-fun contains!692 (List!1447 tuple2!2052) Bool)

(assert (=> b!62532 (= e!41050 (contains!692 (toList!697 lt!26070) (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!12611 res!34303) b!62531))

(assert (= (and b!62531 res!34302) b!62532))

(declare-fun m!55903 () Bool)

(assert (=> d!12611 m!55903))

(declare-fun m!55905 () Bool)

(assert (=> d!12611 m!55905))

(declare-fun m!55907 () Bool)

(assert (=> d!12611 m!55907))

(declare-fun m!55909 () Bool)

(assert (=> d!12611 m!55909))

(declare-fun m!55911 () Bool)

(assert (=> b!62531 m!55911))

(declare-fun m!55913 () Bool)

(assert (=> b!62532 m!55913))

(assert (=> bm!4852 d!12611))

(declare-fun d!12613 () Bool)

(declare-fun e!41051 () Bool)

(assert (=> d!12613 e!41051))

(declare-fun res!34304 () Bool)

(assert (=> d!12613 (=> res!34304 e!41051)))

(declare-fun lt!26075 () Bool)

(assert (=> d!12613 (= res!34304 (not lt!26075))))

(declare-fun lt!26073 () Bool)

(assert (=> d!12613 (= lt!26075 lt!26073)))

(declare-fun lt!26074 () Unit!1685)

(declare-fun e!41052 () Unit!1685)

(assert (=> d!12613 (= lt!26074 e!41052)))

(declare-fun c!8336 () Bool)

(assert (=> d!12613 (= c!8336 lt!26073)))

(assert (=> d!12613 (= lt!26073 (containsKey!128 (toList!697 lt!25977) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12613 (= (contains!690 lt!25977 #b0000000000000000000000000000000000000000000000000000000000000000) lt!26075)))

(declare-fun b!62533 () Bool)

(declare-fun lt!26072 () Unit!1685)

(assert (=> b!62533 (= e!41052 lt!26072)))

(assert (=> b!62533 (= lt!26072 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 lt!25977) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62533 (isDefined!78 (getValueByKey!124 (toList!697 lt!25977) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62534 () Bool)

(declare-fun Unit!1703 () Unit!1685)

(assert (=> b!62534 (= e!41052 Unit!1703)))

(declare-fun b!62535 () Bool)

(assert (=> b!62535 (= e!41051 (isDefined!78 (getValueByKey!124 (toList!697 lt!25977) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12613 c!8336) b!62533))

(assert (= (and d!12613 (not c!8336)) b!62534))

(assert (= (and d!12613 (not res!34304)) b!62535))

(declare-fun m!55915 () Bool)

(assert (=> d!12613 m!55915))

(declare-fun m!55917 () Bool)

(assert (=> b!62533 m!55917))

(declare-fun m!55919 () Bool)

(assert (=> b!62533 m!55919))

(assert (=> b!62533 m!55919))

(declare-fun m!55921 () Bool)

(assert (=> b!62533 m!55921))

(assert (=> b!62535 m!55919))

(assert (=> b!62535 m!55919))

(assert (=> b!62535 m!55921))

(assert (=> bm!4893 d!12613))

(declare-fun d!12615 () Bool)

(assert (=> d!12615 (= (map!1113 (_2!1036 lt!25898)) (getCurrentListMap!393 (_keys!3718 (_2!1036 lt!25898)) (_values!2070 (_2!1036 lt!25898)) (mask!5992 (_2!1036 lt!25898)) (extraKeys!1966 (_2!1036 lt!25898)) (zeroValue!1999 (_2!1036 lt!25898)) (minValue!1999 (_2!1036 lt!25898)) #b00000000000000000000000000000000 (defaultEntry!2087 (_2!1036 lt!25898))))))

(declare-fun bs!2710 () Bool)

(assert (= bs!2710 d!12615))

(declare-fun m!55923 () Bool)

(assert (=> bs!2710 m!55923))

(assert (=> bm!4863 d!12615))

(assert (=> b!62315 d!12565))

(declare-fun d!12617 () Bool)

(assert (=> d!12617 (= (validKeyInArray!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (and (not (= (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62383 d!12617))

(declare-fun b!62536 () Bool)

(declare-fun res!34307 () Bool)

(declare-fun e!41054 () Bool)

(assert (=> b!62536 (=> (not res!34307) (not e!41054))))

(declare-fun e!41065 () Bool)

(assert (=> b!62536 (= res!34307 e!41065)))

(declare-fun c!8342 () Bool)

(assert (=> b!62536 (= c!8342 (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!62537 () Bool)

(declare-fun e!41059 () Bool)

(declare-fun lt!26081 () ListLongMap!1363)

(assert (=> b!62537 (= e!41059 (= (apply!68 lt!26081 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1999 newMap!16)))))

(declare-fun b!62538 () Bool)

(declare-fun e!41063 () Bool)

(assert (=> b!62538 (= e!41063 (= (apply!68 lt!26081 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1999 newMap!16)))))

(declare-fun d!12619 () Bool)

(assert (=> d!12619 e!41054))

(declare-fun res!34306 () Bool)

(assert (=> d!12619 (=> (not res!34306) (not e!41054))))

(assert (=> d!12619 (= res!34306 (or (bvsge #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))))

(declare-fun lt!26083 () ListLongMap!1363)

(assert (=> d!12619 (= lt!26081 lt!26083)))

(declare-fun lt!26089 () Unit!1685)

(declare-fun e!41061 () Unit!1685)

(assert (=> d!12619 (= lt!26089 e!41061)))

(declare-fun c!8339 () Bool)

(declare-fun e!41053 () Bool)

(assert (=> d!12619 (= c!8339 e!41053)))

(declare-fun res!34312 () Bool)

(assert (=> d!12619 (=> (not res!34312) (not e!41053))))

(assert (=> d!12619 (= res!34312 (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(declare-fun e!41062 () ListLongMap!1363)

(assert (=> d!12619 (= lt!26083 e!41062)))

(declare-fun c!8340 () Bool)

(assert (=> d!12619 (= c!8340 (and (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12619 (validMask!0 (mask!5992 newMap!16))))

(assert (=> d!12619 (= (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) lt!26081)))

(declare-fun b!62539 () Bool)

(declare-fun res!34311 () Bool)

(assert (=> b!62539 (=> (not res!34311) (not e!41054))))

(declare-fun e!41060 () Bool)

(assert (=> b!62539 (= res!34311 e!41060)))

(declare-fun res!34308 () Bool)

(assert (=> b!62539 (=> res!34308 e!41060)))

(declare-fun e!41058 () Bool)

(assert (=> b!62539 (= res!34308 (not e!41058))))

(declare-fun res!34309 () Bool)

(assert (=> b!62539 (=> (not res!34309) (not e!41058))))

(assert (=> b!62539 (= res!34309 (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(declare-fun bm!4915 () Bool)

(declare-fun call!4921 () ListLongMap!1363)

(declare-fun call!4922 () ListLongMap!1363)

(assert (=> bm!4915 (= call!4921 call!4922)))

(declare-fun b!62540 () Bool)

(declare-fun e!41057 () ListLongMap!1363)

(declare-fun call!4923 () ListLongMap!1363)

(assert (=> b!62540 (= e!41057 call!4923)))

(declare-fun bm!4916 () Bool)

(declare-fun call!4920 () Bool)

(assert (=> bm!4916 (= call!4920 (contains!690 lt!26081 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62541 () Bool)

(assert (=> b!62541 (= e!41065 (not call!4920))))

(declare-fun bm!4917 () Bool)

(declare-fun call!4924 () ListLongMap!1363)

(declare-fun call!4919 () ListLongMap!1363)

(assert (=> bm!4917 (= call!4924 call!4919)))

(declare-fun c!8341 () Bool)

(declare-fun bm!4918 () Bool)

(assert (=> bm!4918 (= call!4919 (+!83 (ite c!8340 call!4922 (ite c!8341 call!4921 call!4923)) (ite (or c!8340 c!8341) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(declare-fun b!62542 () Bool)

(assert (=> b!62542 (= e!41053 (validKeyInArray!0 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62543 () Bool)

(assert (=> b!62543 (= e!41062 (+!83 call!4919 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))

(declare-fun bm!4919 () Bool)

(declare-fun call!4918 () Bool)

(assert (=> bm!4919 (= call!4918 (contains!690 lt!26081 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62544 () Bool)

(declare-fun Unit!1704 () Unit!1685)

(assert (=> b!62544 (= e!41061 Unit!1704)))

(declare-fun b!62545 () Bool)

(assert (=> b!62545 (= e!41058 (validKeyInArray!0 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62546 () Bool)

(declare-fun c!8337 () Bool)

(assert (=> b!62546 (= c!8337 (and (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!41064 () ListLongMap!1363)

(assert (=> b!62546 (= e!41064 e!41057)))

(declare-fun b!62547 () Bool)

(declare-fun e!41055 () Bool)

(assert (=> b!62547 (= e!41054 e!41055)))

(declare-fun c!8338 () Bool)

(assert (=> b!62547 (= c!8338 (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!62548 () Bool)

(assert (=> b!62548 (= e!41062 e!41064)))

(assert (=> b!62548 (= c!8341 (and (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!62549 () Bool)

(declare-fun e!41056 () Bool)

(assert (=> b!62549 (= e!41060 e!41056)))

(declare-fun res!34310 () Bool)

(assert (=> b!62549 (=> (not res!34310) (not e!41056))))

(assert (=> b!62549 (= res!34310 (contains!690 lt!26081 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!62549 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(declare-fun b!62550 () Bool)

(assert (=> b!62550 (= e!41055 (not call!4918))))

(declare-fun bm!4920 () Bool)

(assert (=> bm!4920 (= call!4923 call!4921)))

(declare-fun b!62551 () Bool)

(assert (=> b!62551 (= e!41065 e!41063)))

(declare-fun res!34313 () Bool)

(assert (=> b!62551 (= res!34313 call!4920)))

(assert (=> b!62551 (=> (not res!34313) (not e!41063))))

(declare-fun bm!4921 () Bool)

(assert (=> bm!4921 (= call!4922 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun b!62552 () Bool)

(assert (=> b!62552 (= e!41056 (= (apply!68 lt!26081 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)) (get!1089 (select (arr!1787 (_values!2070 newMap!16)) #b00000000000000000000000000000000) (dynLambda!312 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62552 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2020 (_values!2070 newMap!16))))))

(assert (=> b!62552 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(declare-fun b!62553 () Bool)

(assert (=> b!62553 (= e!41057 call!4924)))

(declare-fun b!62554 () Bool)

(declare-fun lt!26095 () Unit!1685)

(assert (=> b!62554 (= e!41061 lt!26095)))

(declare-fun lt!26080 () ListLongMap!1363)

(assert (=> b!62554 (= lt!26080 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26086 () (_ BitVec 64))

(assert (=> b!62554 (= lt!26086 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26093 () (_ BitVec 64))

(assert (=> b!62554 (= lt!26093 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26087 () Unit!1685)

(assert (=> b!62554 (= lt!26087 (addStillContains!44 lt!26080 lt!26086 (zeroValue!1999 newMap!16) lt!26093))))

(assert (=> b!62554 (contains!690 (+!83 lt!26080 (tuple2!2053 lt!26086 (zeroValue!1999 newMap!16))) lt!26093)))

(declare-fun lt!26079 () Unit!1685)

(assert (=> b!62554 (= lt!26079 lt!26087)))

(declare-fun lt!26077 () ListLongMap!1363)

(assert (=> b!62554 (= lt!26077 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26088 () (_ BitVec 64))

(assert (=> b!62554 (= lt!26088 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26092 () (_ BitVec 64))

(assert (=> b!62554 (= lt!26092 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26084 () Unit!1685)

(assert (=> b!62554 (= lt!26084 (addApplyDifferent!44 lt!26077 lt!26088 (minValue!1999 newMap!16) lt!26092))))

(assert (=> b!62554 (= (apply!68 (+!83 lt!26077 (tuple2!2053 lt!26088 (minValue!1999 newMap!16))) lt!26092) (apply!68 lt!26077 lt!26092))))

(declare-fun lt!26076 () Unit!1685)

(assert (=> b!62554 (= lt!26076 lt!26084)))

(declare-fun lt!26085 () ListLongMap!1363)

(assert (=> b!62554 (= lt!26085 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26090 () (_ BitVec 64))

(assert (=> b!62554 (= lt!26090 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26078 () (_ BitVec 64))

(assert (=> b!62554 (= lt!26078 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26097 () Unit!1685)

(assert (=> b!62554 (= lt!26097 (addApplyDifferent!44 lt!26085 lt!26090 (zeroValue!1999 newMap!16) lt!26078))))

(assert (=> b!62554 (= (apply!68 (+!83 lt!26085 (tuple2!2053 lt!26090 (zeroValue!1999 newMap!16))) lt!26078) (apply!68 lt!26085 lt!26078))))

(declare-fun lt!26091 () Unit!1685)

(assert (=> b!62554 (= lt!26091 lt!26097)))

(declare-fun lt!26082 () ListLongMap!1363)

(assert (=> b!62554 (= lt!26082 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26094 () (_ BitVec 64))

(assert (=> b!62554 (= lt!26094 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26096 () (_ BitVec 64))

(assert (=> b!62554 (= lt!26096 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!62554 (= lt!26095 (addApplyDifferent!44 lt!26082 lt!26094 (minValue!1999 newMap!16) lt!26096))))

(assert (=> b!62554 (= (apply!68 (+!83 lt!26082 (tuple2!2053 lt!26094 (minValue!1999 newMap!16))) lt!26096) (apply!68 lt!26082 lt!26096))))

(declare-fun b!62555 () Bool)

(assert (=> b!62555 (= e!41055 e!41059)))

(declare-fun res!34305 () Bool)

(assert (=> b!62555 (= res!34305 call!4918)))

(assert (=> b!62555 (=> (not res!34305) (not e!41059))))

(declare-fun b!62556 () Bool)

(assert (=> b!62556 (= e!41064 call!4924)))

(assert (= (and d!12619 c!8340) b!62543))

(assert (= (and d!12619 (not c!8340)) b!62548))

(assert (= (and b!62548 c!8341) b!62556))

(assert (= (and b!62548 (not c!8341)) b!62546))

(assert (= (and b!62546 c!8337) b!62553))

(assert (= (and b!62546 (not c!8337)) b!62540))

(assert (= (or b!62553 b!62540) bm!4920))

(assert (= (or b!62556 bm!4920) bm!4915))

(assert (= (or b!62556 b!62553) bm!4917))

(assert (= (or b!62543 bm!4915) bm!4921))

(assert (= (or b!62543 bm!4917) bm!4918))

(assert (= (and d!12619 res!34312) b!62542))

(assert (= (and d!12619 c!8339) b!62554))

(assert (= (and d!12619 (not c!8339)) b!62544))

(assert (= (and d!12619 res!34306) b!62539))

(assert (= (and b!62539 res!34309) b!62545))

(assert (= (and b!62539 (not res!34308)) b!62549))

(assert (= (and b!62549 res!34310) b!62552))

(assert (= (and b!62539 res!34311) b!62536))

(assert (= (and b!62536 c!8342) b!62551))

(assert (= (and b!62536 (not c!8342)) b!62541))

(assert (= (and b!62551 res!34313) b!62538))

(assert (= (or b!62551 b!62541) bm!4916))

(assert (= (and b!62536 res!34307) b!62547))

(assert (= (and b!62547 c!8338) b!62555))

(assert (= (and b!62547 (not c!8338)) b!62550))

(assert (= (and b!62555 res!34305) b!62537))

(assert (= (or b!62555 b!62550) bm!4919))

(declare-fun b_lambda!2783 () Bool)

(assert (=> (not b_lambda!2783) (not b!62552)))

(assert (=> b!62552 t!4844))

(declare-fun b_and!3821 () Bool)

(assert (= b_and!3817 (and (=> t!4844 result!2455) b_and!3821)))

(assert (=> b!62552 t!4846))

(declare-fun b_and!3823 () Bool)

(assert (= b_and!3819 (and (=> t!4846 result!2457) b_and!3823)))

(declare-fun m!55925 () Bool)

(assert (=> bm!4921 m!55925))

(declare-fun m!55927 () Bool)

(assert (=> b!62543 m!55927))

(assert (=> b!62545 m!55803))

(assert (=> b!62545 m!55803))

(assert (=> b!62545 m!55843))

(declare-fun m!55929 () Bool)

(assert (=> bm!4919 m!55929))

(assert (=> b!62549 m!55803))

(assert (=> b!62549 m!55803))

(declare-fun m!55931 () Bool)

(assert (=> b!62549 m!55931))

(declare-fun m!55933 () Bool)

(assert (=> b!62537 m!55933))

(declare-fun m!55935 () Bool)

(assert (=> bm!4918 m!55935))

(assert (=> b!62542 m!55803))

(assert (=> b!62542 m!55803))

(assert (=> b!62542 m!55843))

(declare-fun m!55937 () Bool)

(assert (=> bm!4916 m!55937))

(assert (=> b!62552 m!55803))

(declare-fun m!55939 () Bool)

(assert (=> b!62552 m!55939))

(assert (=> b!62552 m!55857))

(declare-fun m!55941 () Bool)

(assert (=> b!62552 m!55941))

(assert (=> b!62552 m!55803))

(assert (=> b!62552 m!55941))

(assert (=> b!62552 m!55857))

(declare-fun m!55943 () Bool)

(assert (=> b!62552 m!55943))

(declare-fun m!55945 () Bool)

(assert (=> b!62538 m!55945))

(declare-fun m!55947 () Bool)

(assert (=> b!62554 m!55947))

(assert (=> b!62554 m!55925))

(declare-fun m!55949 () Bool)

(assert (=> b!62554 m!55949))

(assert (=> b!62554 m!55949))

(declare-fun m!55951 () Bool)

(assert (=> b!62554 m!55951))

(declare-fun m!55953 () Bool)

(assert (=> b!62554 m!55953))

(declare-fun m!55955 () Bool)

(assert (=> b!62554 m!55955))

(declare-fun m!55957 () Bool)

(assert (=> b!62554 m!55957))

(declare-fun m!55959 () Bool)

(assert (=> b!62554 m!55959))

(declare-fun m!55961 () Bool)

(assert (=> b!62554 m!55961))

(declare-fun m!55963 () Bool)

(assert (=> b!62554 m!55963))

(assert (=> b!62554 m!55803))

(declare-fun m!55965 () Bool)

(assert (=> b!62554 m!55965))

(declare-fun m!55967 () Bool)

(assert (=> b!62554 m!55967))

(declare-fun m!55969 () Bool)

(assert (=> b!62554 m!55969))

(assert (=> b!62554 m!55967))

(declare-fun m!55971 () Bool)

(assert (=> b!62554 m!55971))

(assert (=> b!62554 m!55955))

(declare-fun m!55973 () Bool)

(assert (=> b!62554 m!55973))

(assert (=> b!62554 m!55961))

(declare-fun m!55975 () Bool)

(assert (=> b!62554 m!55975))

(assert (=> d!12619 m!55783))

(assert (=> d!12571 d!12619))

(declare-fun b!62557 () Bool)

(declare-fun e!41066 () Bool)

(assert (=> b!62557 (= e!41066 (contains!691 Nil!1443 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62559 () Bool)

(declare-fun e!41069 () Bool)

(declare-fun e!41067 () Bool)

(assert (=> b!62559 (= e!41069 e!41067)))

(declare-fun res!34316 () Bool)

(assert (=> b!62559 (=> (not res!34316) (not e!41067))))

(assert (=> b!62559 (= res!34316 (not e!41066))))

(declare-fun res!34314 () Bool)

(assert (=> b!62559 (=> (not res!34314) (not e!41066))))

(assert (=> b!62559 (= res!34314 (validKeyInArray!0 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!4922 () Bool)

(declare-fun call!4925 () Bool)

(declare-fun c!8343 () Bool)

(assert (=> bm!4922 (= call!4925 (arrayNoDuplicates!0 (_keys!3718 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!8343 (Cons!1442 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000) Nil!1443) Nil!1443)))))

(declare-fun b!62560 () Bool)

(declare-fun e!41068 () Bool)

(assert (=> b!62560 (= e!41068 call!4925)))

(declare-fun b!62561 () Bool)

(assert (=> b!62561 (= e!41068 call!4925)))

(declare-fun b!62558 () Bool)

(assert (=> b!62558 (= e!41067 e!41068)))

(assert (=> b!62558 (= c!8343 (validKeyInArray!0 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun d!12621 () Bool)

(declare-fun res!34315 () Bool)

(assert (=> d!12621 (=> res!34315 e!41069)))

(assert (=> d!12621 (= res!34315 (bvsge #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(assert (=> d!12621 (= (arrayNoDuplicates!0 (_keys!3718 newMap!16) #b00000000000000000000000000000000 Nil!1443) e!41069)))

(assert (= (and d!12621 (not res!34315)) b!62559))

(assert (= (and b!62559 res!34314) b!62557))

(assert (= (and b!62559 res!34316) b!62558))

(assert (= (and b!62558 c!8343) b!62560))

(assert (= (and b!62558 (not c!8343)) b!62561))

(assert (= (or b!62560 b!62561) bm!4922))

(assert (=> b!62557 m!55803))

(assert (=> b!62557 m!55803))

(declare-fun m!55977 () Bool)

(assert (=> b!62557 m!55977))

(assert (=> b!62559 m!55803))

(assert (=> b!62559 m!55803))

(assert (=> b!62559 m!55843))

(assert (=> bm!4922 m!55803))

(declare-fun m!55979 () Bool)

(assert (=> bm!4922 m!55979))

(assert (=> b!62558 m!55803))

(assert (=> b!62558 m!55803))

(assert (=> b!62558 m!55843))

(assert (=> b!62169 d!12621))

(assert (=> b!62380 d!12617))

(assert (=> d!12563 d!12569))

(declare-fun d!12623 () Bool)

(assert (=> d!12623 (arrayNoDuplicates!0 (_keys!3718 (v!2412 (underlying!229 thiss!992))) from!355 Nil!1443)))

(assert (=> d!12623 true))

(declare-fun _$71!78 () Unit!1685)

(assert (=> d!12623 (= (choose!39 (_keys!3718 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000000000000000 from!355) _$71!78)))

(declare-fun bs!2711 () Bool)

(assert (= bs!2711 d!12623))

(assert (=> bs!2711 m!55495))

(assert (=> d!12563 d!12623))

(declare-fun d!12625 () Bool)

(assert (=> d!12625 (= (+!83 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) lt!25915 (zeroValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26100 () Unit!1685)

(declare-fun choose!340 (array!3737 array!3739 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 V!2865 Int) Unit!1685)

(assert (=> d!12625 (= lt!26100 (choose!340 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) lt!25915 (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2087 newMap!16)))))

(assert (=> d!12625 (validMask!0 (mask!5992 newMap!16))))

(assert (=> d!12625 (= (lemmaChangeLongMinValueKeyThenAddPairToListMap!17 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) lt!25915 (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2087 newMap!16)) lt!26100)))

(declare-fun bs!2712 () Bool)

(assert (= bs!2712 d!12625))

(assert (=> bs!2712 m!55647))

(assert (=> bs!2712 m!55507))

(declare-fun m!55981 () Bool)

(assert (=> bs!2712 m!55981))

(assert (=> bs!2712 m!55507))

(declare-fun m!55983 () Bool)

(assert (=> bs!2712 m!55983))

(assert (=> bs!2712 m!55647))

(declare-fun m!55985 () Bool)

(assert (=> bs!2712 m!55985))

(assert (=> bs!2712 m!55783))

(assert (=> b!62277 d!12625))

(declare-fun d!12627 () Bool)

(assert (=> d!12627 (= (get!1090 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2411 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(assert (=> b!62303 d!12627))

(declare-fun b!62570 () Bool)

(declare-fun e!41074 () (_ BitVec 32))

(declare-fun call!4928 () (_ BitVec 32))

(assert (=> b!62570 (= e!41074 call!4928)))

(declare-fun b!62571 () Bool)

(declare-fun e!41075 () (_ BitVec 32))

(assert (=> b!62571 (= e!41075 #b00000000000000000000000000000000)))

(declare-fun b!62572 () Bool)

(assert (=> b!62572 (= e!41075 e!41074)))

(declare-fun c!8348 () Bool)

(assert (=> b!62572 (= c!8348 (validKeyInArray!0 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62573 () Bool)

(assert (=> b!62573 (= e!41074 (bvadd #b00000000000000000000000000000001 call!4928))))

(declare-fun bm!4925 () Bool)

(assert (=> bm!4925 (= call!4928 (arrayCountValidKeys!0 (_keys!3718 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2019 (_keys!3718 newMap!16))))))

(declare-fun d!12629 () Bool)

(declare-fun lt!26103 () (_ BitVec 32))

(assert (=> d!12629 (and (bvsge lt!26103 #b00000000000000000000000000000000) (bvsle lt!26103 (bvsub (size!2019 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!12629 (= lt!26103 e!41075)))

(declare-fun c!8349 () Bool)

(assert (=> d!12629 (= c!8349 (bvsge #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(assert (=> d!12629 (and (bvsle #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2019 (_keys!3718 newMap!16)) (size!2019 (_keys!3718 newMap!16))))))

(assert (=> d!12629 (= (arrayCountValidKeys!0 (_keys!3718 newMap!16) #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))) lt!26103)))

(assert (= (and d!12629 c!8349) b!62571))

(assert (= (and d!12629 (not c!8349)) b!62572))

(assert (= (and b!62572 c!8348) b!62573))

(assert (= (and b!62572 (not c!8348)) b!62570))

(assert (= (or b!62573 b!62570) bm!4925))

(assert (=> b!62572 m!55803))

(assert (=> b!62572 m!55803))

(assert (=> b!62572 m!55843))

(declare-fun m!55987 () Bool)

(assert (=> bm!4925 m!55987))

(assert (=> b!62167 d!12629))

(declare-fun d!12631 () Bool)

(declare-fun e!41076 () Bool)

(assert (=> d!12631 e!41076))

(declare-fun res!34317 () Bool)

(assert (=> d!12631 (=> res!34317 e!41076)))

(declare-fun lt!26107 () Bool)

(assert (=> d!12631 (= res!34317 (not lt!26107))))

(declare-fun lt!26105 () Bool)

(assert (=> d!12631 (= lt!26107 lt!26105)))

(declare-fun lt!26106 () Unit!1685)

(declare-fun e!41077 () Unit!1685)

(assert (=> d!12631 (= lt!26106 e!41077)))

(declare-fun c!8350 () Bool)

(assert (=> d!12631 (= c!8350 lt!26105)))

(assert (=> d!12631 (= lt!26105 (containsKey!128 (toList!697 lt!25977) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12631 (= (contains!690 lt!25977 #b1000000000000000000000000000000000000000000000000000000000000000) lt!26107)))

(declare-fun b!62574 () Bool)

(declare-fun lt!26104 () Unit!1685)

(assert (=> b!62574 (= e!41077 lt!26104)))

(assert (=> b!62574 (= lt!26104 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 lt!25977) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62574 (isDefined!78 (getValueByKey!124 (toList!697 lt!25977) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62575 () Bool)

(declare-fun Unit!1705 () Unit!1685)

(assert (=> b!62575 (= e!41077 Unit!1705)))

(declare-fun b!62576 () Bool)

(assert (=> b!62576 (= e!41076 (isDefined!78 (getValueByKey!124 (toList!697 lt!25977) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12631 c!8350) b!62574))

(assert (= (and d!12631 (not c!8350)) b!62575))

(assert (= (and d!12631 (not res!34317)) b!62576))

(declare-fun m!55989 () Bool)

(assert (=> d!12631 m!55989))

(declare-fun m!55991 () Bool)

(assert (=> b!62574 m!55991))

(assert (=> b!62574 m!55807))

(assert (=> b!62574 m!55807))

(declare-fun m!55993 () Bool)

(assert (=> b!62574 m!55993))

(assert (=> b!62576 m!55807))

(assert (=> b!62576 m!55807))

(assert (=> b!62576 m!55993))

(assert (=> bm!4896 d!12631))

(assert (=> b!62269 d!12619))

(declare-fun d!12633 () Bool)

(declare-fun e!41080 () Bool)

(assert (=> d!12633 e!41080))

(declare-fun res!34323 () Bool)

(assert (=> d!12633 (=> (not res!34323) (not e!41080))))

(declare-fun lt!26112 () SeekEntryResult!232)

(assert (=> d!12633 (= res!34323 ((_ is Found!232) lt!26112))))

(assert (=> d!12633 (= lt!26112 (seekEntryOrOpen!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (_keys!3718 newMap!16) (mask!5992 newMap!16)))))

(declare-fun lt!26113 () Unit!1685)

(declare-fun choose!341 (array!3737 array!3739 (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 (_ BitVec 64) Int) Unit!1685)

(assert (=> d!12633 (= lt!26113 (choose!341 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (defaultEntry!2087 newMap!16)))))

(assert (=> d!12633 (validMask!0 (mask!5992 newMap!16))))

(assert (=> d!12633 (= (lemmaInListMapThenSeekEntryOrOpenFindsIt!17 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (defaultEntry!2087 newMap!16)) lt!26113)))

(declare-fun b!62581 () Bool)

(declare-fun res!34322 () Bool)

(assert (=> b!62581 (=> (not res!34322) (not e!41080))))

(assert (=> b!62581 (= res!34322 (inRange!0 (index!3054 lt!26112) (mask!5992 newMap!16)))))

(declare-fun b!62582 () Bool)

(assert (=> b!62582 (= e!41080 (= (select (arr!1786 (_keys!3718 newMap!16)) (index!3054 lt!26112)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(assert (=> b!62582 (and (bvsge (index!3054 lt!26112) #b00000000000000000000000000000000) (bvslt (index!3054 lt!26112) (size!2019 (_keys!3718 newMap!16))))))

(assert (= (and d!12633 res!34323) b!62581))

(assert (= (and b!62581 res!34322) b!62582))

(assert (=> d!12633 m!55481))

(assert (=> d!12633 m!55631))

(assert (=> d!12633 m!55481))

(declare-fun m!55995 () Bool)

(assert (=> d!12633 m!55995))

(assert (=> d!12633 m!55783))

(declare-fun m!55997 () Bool)

(assert (=> b!62581 m!55997))

(declare-fun m!55999 () Bool)

(assert (=> b!62582 m!55999))

(assert (=> bm!4872 d!12633))

(assert (=> d!12561 d!12565))

(declare-fun d!12635 () Bool)

(assert (=> d!12635 (not (arrayContainsKey!0 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> d!12635 true))

(declare-fun _$68!37 () Unit!1685)

(assert (=> d!12635 (= (choose!68 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (Cons!1442 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) Nil!1443)) _$68!37)))

(declare-fun bs!2713 () Bool)

(assert (= bs!2713 d!12635))

(assert (=> bs!2713 m!55481))

(assert (=> bs!2713 m!55499))

(assert (=> d!12561 d!12635))

(declare-fun d!12637 () Bool)

(declare-fun res!34324 () Bool)

(declare-fun e!41081 () Bool)

(assert (=> d!12637 (=> res!34324 e!41081)))

(assert (=> d!12637 (= res!34324 (= (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(assert (=> d!12637 (= (arrayContainsKey!0 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) e!41081)))

(declare-fun b!62583 () Bool)

(declare-fun e!41082 () Bool)

(assert (=> b!62583 (= e!41081 e!41082)))

(declare-fun res!34325 () Bool)

(assert (=> b!62583 (=> (not res!34325) (not e!41082))))

(assert (=> b!62583 (= res!34325 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992))))))))

(declare-fun b!62584 () Bool)

(assert (=> b!62584 (= e!41082 (arrayContainsKey!0 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!12637 (not res!34324)) b!62583))

(assert (= (and b!62583 res!34325) b!62584))

(declare-fun m!56001 () Bool)

(assert (=> d!12637 m!56001))

(assert (=> b!62584 m!55481))

(declare-fun m!56003 () Bool)

(assert (=> b!62584 m!56003))

(assert (=> b!62310 d!12637))

(declare-fun d!12639 () Bool)

(declare-fun e!41083 () Bool)

(assert (=> d!12639 e!41083))

(declare-fun res!34326 () Bool)

(assert (=> d!12639 (=> res!34326 e!41083)))

(declare-fun lt!26117 () Bool)

(assert (=> d!12639 (= res!34326 (not lt!26117))))

(declare-fun lt!26115 () Bool)

(assert (=> d!12639 (= lt!26117 lt!26115)))

(declare-fun lt!26116 () Unit!1685)

(declare-fun e!41084 () Unit!1685)

(assert (=> d!12639 (= lt!26116 e!41084)))

(declare-fun c!8351 () Bool)

(assert (=> d!12639 (= c!8351 lt!26115)))

(assert (=> d!12639 (= lt!26115 (containsKey!128 (toList!697 call!4874) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(assert (=> d!12639 (= (contains!690 call!4874 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) lt!26117)))

(declare-fun b!62585 () Bool)

(declare-fun lt!26114 () Unit!1685)

(assert (=> b!62585 (= e!41084 lt!26114)))

(assert (=> b!62585 (= lt!26114 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 call!4874) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(assert (=> b!62585 (isDefined!78 (getValueByKey!124 (toList!697 call!4874) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(declare-fun b!62586 () Bool)

(declare-fun Unit!1706 () Unit!1685)

(assert (=> b!62586 (= e!41084 Unit!1706)))

(declare-fun b!62587 () Bool)

(assert (=> b!62587 (= e!41083 (isDefined!78 (getValueByKey!124 (toList!697 call!4874) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355))))))

(assert (= (and d!12639 c!8351) b!62585))

(assert (= (and d!12639 (not c!8351)) b!62586))

(assert (= (and d!12639 (not res!34326)) b!62587))

(assert (=> d!12639 m!55481))

(declare-fun m!56005 () Bool)

(assert (=> d!12639 m!56005))

(assert (=> b!62585 m!55481))

(declare-fun m!56007 () Bool)

(assert (=> b!62585 m!56007))

(assert (=> b!62585 m!55481))

(declare-fun m!56009 () Bool)

(assert (=> b!62585 m!56009))

(assert (=> b!62585 m!56009))

(declare-fun m!56011 () Bool)

(assert (=> b!62585 m!56011))

(assert (=> b!62587 m!55481))

(assert (=> b!62587 m!56009))

(assert (=> b!62587 m!56009))

(assert (=> b!62587 m!56011))

(assert (=> b!62272 d!12639))

(declare-fun d!12641 () Bool)

(declare-fun e!41085 () Bool)

(assert (=> d!12641 e!41085))

(declare-fun res!34328 () Bool)

(assert (=> d!12641 (=> (not res!34328) (not e!41085))))

(declare-fun lt!26120 () ListLongMap!1363)

(assert (=> d!12641 (= res!34328 (contains!690 lt!26120 (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!26118 () List!1447)

(assert (=> d!12641 (= lt!26120 (ListLongMap!1364 lt!26118))))

(declare-fun lt!26119 () Unit!1685)

(declare-fun lt!26121 () Unit!1685)

(assert (=> d!12641 (= lt!26119 lt!26121)))

(assert (=> d!12641 (= (getValueByKey!124 lt!26118 (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12641 (= lt!26121 (lemmaContainsTupThenGetReturnValue!44 lt!26118 (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12641 (= lt!26118 (insertStrictlySorted!47 (toList!697 call!4860) (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12641 (= (+!83 call!4860 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26120)))

(declare-fun b!62588 () Bool)

(declare-fun res!34327 () Bool)

(assert (=> b!62588 (=> (not res!34327) (not e!41085))))

(assert (=> b!62588 (= res!34327 (= (getValueByKey!124 (toList!697 lt!26120) (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!62589 () Bool)

(assert (=> b!62589 (= e!41085 (contains!692 (toList!697 lt!26120) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12641 res!34328) b!62588))

(assert (= (and b!62588 res!34327) b!62589))

(declare-fun m!56013 () Bool)

(assert (=> d!12641 m!56013))

(declare-fun m!56015 () Bool)

(assert (=> d!12641 m!56015))

(declare-fun m!56017 () Bool)

(assert (=> d!12641 m!56017))

(declare-fun m!56019 () Bool)

(assert (=> d!12641 m!56019))

(declare-fun m!56021 () Bool)

(assert (=> b!62588 m!56021))

(declare-fun m!56023 () Bool)

(assert (=> b!62589 m!56023))

(assert (=> b!62260 d!12641))

(declare-fun d!12643 () Bool)

(assert (=> d!12643 (= (apply!68 lt!25977 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1092 (getValueByKey!124 (toList!697 lt!25977) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2714 () Bool)

(assert (= bs!2714 d!12643))

(assert (=> bs!2714 m!55919))

(assert (=> bs!2714 m!55919))

(declare-fun m!56025 () Bool)

(assert (=> bs!2714 m!56025))

(assert (=> b!62376 d!12643))

(declare-fun e!41086 () Bool)

(declare-fun b!62590 () Bool)

(assert (=> b!62590 (= e!41086 (contains!691 (ite c!8282 (Cons!1442 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) Nil!1443) Nil!1443) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!62592 () Bool)

(declare-fun e!41089 () Bool)

(declare-fun e!41087 () Bool)

(assert (=> b!62592 (= e!41089 e!41087)))

(declare-fun res!34331 () Bool)

(assert (=> b!62592 (=> (not res!34331) (not e!41087))))

(assert (=> b!62592 (= res!34331 (not e!41086))))

(declare-fun res!34329 () Bool)

(assert (=> b!62592 (=> (not res!34329) (not e!41086))))

(assert (=> b!62592 (= res!34329 (validKeyInArray!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun bm!4926 () Bool)

(declare-fun c!8352 () Bool)

(declare-fun call!4929 () Bool)

(assert (=> bm!4926 (= call!4929 (arrayNoDuplicates!0 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!8352 (Cons!1442 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!8282 (Cons!1442 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) Nil!1443) Nil!1443)) (ite c!8282 (Cons!1442 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) Nil!1443) Nil!1443))))))

(declare-fun b!62593 () Bool)

(declare-fun e!41088 () Bool)

(assert (=> b!62593 (= e!41088 call!4929)))

(declare-fun b!62594 () Bool)

(assert (=> b!62594 (= e!41088 call!4929)))

(declare-fun b!62591 () Bool)

(assert (=> b!62591 (= e!41087 e!41088)))

(assert (=> b!62591 (= c!8352 (validKeyInArray!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun d!12645 () Bool)

(declare-fun res!34330 () Bool)

(assert (=> d!12645 (=> res!34330 e!41089)))

(assert (=> d!12645 (= res!34330 (bvsge (bvadd from!355 #b00000000000000000000000000000001) (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992))))))))

(assert (=> d!12645 (= (arrayNoDuplicates!0 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!8282 (Cons!1442 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) Nil!1443) Nil!1443)) e!41089)))

(assert (= (and d!12645 (not res!34330)) b!62592))

(assert (= (and b!62592 res!34329) b!62590))

(assert (= (and b!62592 res!34331) b!62591))

(assert (= (and b!62591 c!8352) b!62593))

(assert (= (and b!62591 (not c!8352)) b!62594))

(assert (= (or b!62593 b!62594) bm!4926))

(declare-fun m!56027 () Bool)

(assert (=> b!62590 m!56027))

(assert (=> b!62590 m!56027))

(declare-fun m!56029 () Bool)

(assert (=> b!62590 m!56029))

(assert (=> b!62592 m!56027))

(assert (=> b!62592 m!56027))

(declare-fun m!56031 () Bool)

(assert (=> b!62592 m!56031))

(assert (=> bm!4926 m!56027))

(declare-fun m!56033 () Bool)

(assert (=> bm!4926 m!56033))

(assert (=> b!62591 m!56027))

(assert (=> b!62591 m!56027))

(assert (=> b!62591 m!56031))

(assert (=> bm!4877 d!12645))

(declare-fun d!12647 () Bool)

(declare-fun e!41092 () Bool)

(assert (=> d!12647 e!41092))

(declare-fun res!34334 () Bool)

(assert (=> d!12647 (=> (not res!34334) (not e!41092))))

(assert (=> d!12647 (= res!34334 (and (bvsge (index!3054 lt!25902) #b00000000000000000000000000000000) (bvslt (index!3054 lt!25902) (size!2019 (_keys!3718 newMap!16)))))))

(declare-fun lt!26124 () Unit!1685)

(declare-fun choose!342 (array!3737 array!3739 (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 (_ BitVec 32) Int) Unit!1685)

(assert (=> d!12647 (= lt!26124 (choose!342 (_keys!3718 newMap!16) lt!25918 (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (index!3054 lt!25902) (defaultEntry!2087 newMap!16)))))

(assert (=> d!12647 (validMask!0 (mask!5992 newMap!16))))

(assert (=> d!12647 (= (lemmaValidKeyInArrayIsInListMap!76 (_keys!3718 newMap!16) lt!25918 (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (index!3054 lt!25902) (defaultEntry!2087 newMap!16)) lt!26124)))

(declare-fun b!62597 () Bool)

(assert (=> b!62597 (= e!41092 (contains!690 (getCurrentListMap!393 (_keys!3718 newMap!16) lt!25918 (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (select (arr!1786 (_keys!3718 newMap!16)) (index!3054 lt!25902))))))

(assert (= (and d!12647 res!34334) b!62597))

(declare-fun m!56035 () Bool)

(assert (=> d!12647 m!56035))

(assert (=> d!12647 m!55783))

(declare-fun m!56037 () Bool)

(assert (=> b!62597 m!56037))

(assert (=> b!62597 m!55665))

(assert (=> b!62597 m!56037))

(assert (=> b!62597 m!55665))

(declare-fun m!56039 () Bool)

(assert (=> b!62597 m!56039))

(assert (=> b!62271 d!12647))

(declare-fun d!12649 () Bool)

(declare-fun e!41095 () Bool)

(assert (=> d!12649 e!41095))

(declare-fun res!34337 () Bool)

(assert (=> d!12649 (=> (not res!34337) (not e!41095))))

(assert (=> d!12649 (= res!34337 (and (bvsge (index!3054 lt!25902) #b00000000000000000000000000000000) (bvslt (index!3054 lt!25902) (size!2020 (_values!2070 newMap!16)))))))

(declare-fun lt!26127 () Unit!1685)

(declare-fun choose!343 (array!3737 array!3739 (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 (_ BitVec 32) (_ BitVec 64) V!2865 Int) Unit!1685)

(assert (=> d!12649 (= lt!26127 (choose!343 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (index!3054 lt!25902) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2087 newMap!16)))))

(assert (=> d!12649 (validMask!0 (mask!5992 newMap!16))))

(assert (=> d!12649 (= (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!17 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (index!3054 lt!25902) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2087 newMap!16)) lt!26127)))

(declare-fun b!62600 () Bool)

(assert (=> b!62600 (= e!41095 (= (+!83 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!393 (_keys!3718 newMap!16) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (index!3054 lt!25902) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16))) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))))))

(assert (= (and d!12649 res!34337) b!62600))

(assert (=> d!12649 m!55481))

(assert (=> d!12649 m!55507))

(declare-fun m!56041 () Bool)

(assert (=> d!12649 m!56041))

(assert (=> d!12649 m!55783))

(assert (=> b!62600 m!55647))

(assert (=> b!62600 m!55647))

(declare-fun m!56043 () Bool)

(assert (=> b!62600 m!56043))

(assert (=> b!62600 m!55635))

(declare-fun m!56045 () Bool)

(assert (=> b!62600 m!56045))

(assert (=> b!62271 d!12649))

(declare-fun d!12651 () Bool)

(declare-fun e!41096 () Bool)

(assert (=> d!12651 e!41096))

(declare-fun res!34338 () Bool)

(assert (=> d!12651 (=> res!34338 e!41096)))

(declare-fun lt!26131 () Bool)

(assert (=> d!12651 (= res!34338 (not lt!26131))))

(declare-fun lt!26129 () Bool)

(assert (=> d!12651 (= lt!26131 lt!26129)))

(declare-fun lt!26130 () Unit!1685)

(declare-fun e!41097 () Unit!1685)

(assert (=> d!12651 (= lt!26130 e!41097)))

(declare-fun c!8353 () Bool)

(assert (=> d!12651 (= c!8353 lt!26129)))

(assert (=> d!12651 (= lt!26129 (containsKey!128 (toList!697 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(assert (=> d!12651 (= (contains!690 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) lt!26131)))

(declare-fun b!62601 () Bool)

(declare-fun lt!26128 () Unit!1685)

(assert (=> b!62601 (= e!41097 lt!26128)))

(assert (=> b!62601 (= lt!26128 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(assert (=> b!62601 (isDefined!78 (getValueByKey!124 (toList!697 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(declare-fun b!62602 () Bool)

(declare-fun Unit!1707 () Unit!1685)

(assert (=> b!62602 (= e!41097 Unit!1707)))

(declare-fun b!62603 () Bool)

(assert (=> b!62603 (= e!41096 (isDefined!78 (getValueByKey!124 (toList!697 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355))))))

(assert (= (and d!12651 c!8353) b!62601))

(assert (= (and d!12651 (not c!8353)) b!62602))

(assert (= (and d!12651 (not res!34338)) b!62603))

(assert (=> d!12651 m!55481))

(declare-fun m!56047 () Bool)

(assert (=> d!12651 m!56047))

(assert (=> b!62601 m!55481))

(declare-fun m!56049 () Bool)

(assert (=> b!62601 m!56049))

(assert (=> b!62601 m!55481))

(declare-fun m!56051 () Bool)

(assert (=> b!62601 m!56051))

(assert (=> b!62601 m!56051))

(declare-fun m!56053 () Bool)

(assert (=> b!62601 m!56053))

(assert (=> b!62603 m!55481))

(assert (=> b!62603 m!56051))

(assert (=> b!62603 m!56051))

(assert (=> b!62603 m!56053))

(assert (=> b!62271 d!12651))

(assert (=> b!62271 d!12619))

(declare-fun d!12653 () Bool)

(assert (=> d!12653 (= (apply!68 (+!83 lt!25973 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) lt!25988) (get!1092 (getValueByKey!124 (toList!697 (+!83 lt!25973 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!25988)))))

(declare-fun bs!2715 () Bool)

(assert (= bs!2715 d!12653))

(declare-fun m!56055 () Bool)

(assert (=> bs!2715 m!56055))

(assert (=> bs!2715 m!56055))

(declare-fun m!56057 () Bool)

(assert (=> bs!2715 m!56057))

(assert (=> b!62392 d!12653))

(declare-fun d!12655 () Bool)

(declare-fun e!41098 () Bool)

(assert (=> d!12655 e!41098))

(declare-fun res!34340 () Bool)

(assert (=> d!12655 (=> (not res!34340) (not e!41098))))

(declare-fun lt!26134 () ListLongMap!1363)

(assert (=> d!12655 (= res!34340 (contains!690 lt!26134 (_1!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun lt!26132 () List!1447)

(assert (=> d!12655 (= lt!26134 (ListLongMap!1364 lt!26132))))

(declare-fun lt!26133 () Unit!1685)

(declare-fun lt!26135 () Unit!1685)

(assert (=> d!12655 (= lt!26133 lt!26135)))

(assert (=> d!12655 (= (getValueByKey!124 lt!26132 (_1!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) (Some!129 (_2!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(assert (=> d!12655 (= lt!26135 (lemmaContainsTupThenGetReturnValue!44 lt!26132 (_1!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(assert (=> d!12655 (= lt!26132 (insertStrictlySorted!47 (toList!697 lt!25973) (_1!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(assert (=> d!12655 (= (+!83 lt!25973 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) lt!26134)))

(declare-fun b!62604 () Bool)

(declare-fun res!34339 () Bool)

(assert (=> b!62604 (=> (not res!34339) (not e!41098))))

(assert (=> b!62604 (= res!34339 (= (getValueByKey!124 (toList!697 lt!26134) (_1!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) (Some!129 (_2!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(declare-fun b!62605 () Bool)

(assert (=> b!62605 (= e!41098 (contains!692 (toList!697 lt!26134) (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))

(assert (= (and d!12655 res!34340) b!62604))

(assert (= (and b!62604 res!34339) b!62605))

(declare-fun m!56059 () Bool)

(assert (=> d!12655 m!56059))

(declare-fun m!56061 () Bool)

(assert (=> d!12655 m!56061))

(declare-fun m!56063 () Bool)

(assert (=> d!12655 m!56063))

(declare-fun m!56065 () Bool)

(assert (=> d!12655 m!56065))

(declare-fun m!56067 () Bool)

(assert (=> b!62604 m!56067))

(declare-fun m!56069 () Bool)

(assert (=> b!62605 m!56069))

(assert (=> b!62392 d!12655))

(declare-fun d!12657 () Bool)

(declare-fun e!41099 () Bool)

(assert (=> d!12657 e!41099))

(declare-fun res!34342 () Bool)

(assert (=> d!12657 (=> (not res!34342) (not e!41099))))

(declare-fun lt!26138 () ListLongMap!1363)

(assert (=> d!12657 (= res!34342 (contains!690 lt!26138 (_1!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun lt!26136 () List!1447)

(assert (=> d!12657 (= lt!26138 (ListLongMap!1364 lt!26136))))

(declare-fun lt!26137 () Unit!1685)

(declare-fun lt!26139 () Unit!1685)

(assert (=> d!12657 (= lt!26137 lt!26139)))

(assert (=> d!12657 (= (getValueByKey!124 lt!26136 (_1!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) (Some!129 (_2!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(assert (=> d!12657 (= lt!26139 (lemmaContainsTupThenGetReturnValue!44 lt!26136 (_1!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(assert (=> d!12657 (= lt!26136 (insertStrictlySorted!47 (toList!697 lt!25978) (_1!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(assert (=> d!12657 (= (+!83 lt!25978 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) lt!26138)))

(declare-fun b!62606 () Bool)

(declare-fun res!34341 () Bool)

(assert (=> b!62606 (=> (not res!34341) (not e!41099))))

(assert (=> b!62606 (= res!34341 (= (getValueByKey!124 (toList!697 lt!26138) (_1!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) (Some!129 (_2!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(declare-fun b!62607 () Bool)

(assert (=> b!62607 (= e!41099 (contains!692 (toList!697 lt!26138) (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))

(assert (= (and d!12657 res!34342) b!62606))

(assert (= (and b!62606 res!34341) b!62607))

(declare-fun m!56071 () Bool)

(assert (=> d!12657 m!56071))

(declare-fun m!56073 () Bool)

(assert (=> d!12657 m!56073))

(declare-fun m!56075 () Bool)

(assert (=> d!12657 m!56075))

(declare-fun m!56077 () Bool)

(assert (=> d!12657 m!56077))

(declare-fun m!56079 () Bool)

(assert (=> b!62606 m!56079))

(declare-fun m!56081 () Bool)

(assert (=> b!62607 m!56081))

(assert (=> b!62392 d!12657))

(declare-fun d!12659 () Bool)

(assert (=> d!12659 (= (apply!68 (+!83 lt!25981 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))) lt!25974) (apply!68 lt!25981 lt!25974))))

(declare-fun lt!26142 () Unit!1685)

(declare-fun choose!344 (ListLongMap!1363 (_ BitVec 64) V!2865 (_ BitVec 64)) Unit!1685)

(assert (=> d!12659 (= lt!26142 (choose!344 lt!25981 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))) lt!25974))))

(declare-fun e!41102 () Bool)

(assert (=> d!12659 e!41102))

(declare-fun res!34345 () Bool)

(assert (=> d!12659 (=> (not res!34345) (not e!41102))))

(assert (=> d!12659 (= res!34345 (contains!690 lt!25981 lt!25974))))

(assert (=> d!12659 (= (addApplyDifferent!44 lt!25981 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))) lt!25974) lt!26142)))

(declare-fun b!62611 () Bool)

(assert (=> b!62611 (= e!41102 (not (= lt!25974 lt!25986)))))

(assert (= (and d!12659 res!34345) b!62611))

(declare-fun m!56083 () Bool)

(assert (=> d!12659 m!56083))

(assert (=> d!12659 m!55727))

(assert (=> d!12659 m!55735))

(assert (=> d!12659 m!55749))

(declare-fun m!56085 () Bool)

(assert (=> d!12659 m!56085))

(assert (=> d!12659 m!55735))

(assert (=> b!62392 d!12659))

(assert (=> b!62392 d!12597))

(declare-fun d!12661 () Bool)

(declare-fun e!41103 () Bool)

(assert (=> d!12661 e!41103))

(declare-fun res!34347 () Bool)

(assert (=> d!12661 (=> (not res!34347) (not e!41103))))

(declare-fun lt!26145 () ListLongMap!1363)

(assert (=> d!12661 (= res!34347 (contains!690 lt!26145 (_1!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun lt!26143 () List!1447)

(assert (=> d!12661 (= lt!26145 (ListLongMap!1364 lt!26143))))

(declare-fun lt!26144 () Unit!1685)

(declare-fun lt!26146 () Unit!1685)

(assert (=> d!12661 (= lt!26144 lt!26146)))

(assert (=> d!12661 (= (getValueByKey!124 lt!26143 (_1!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))) (Some!129 (_2!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(assert (=> d!12661 (= lt!26146 (lemmaContainsTupThenGetReturnValue!44 lt!26143 (_1!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(assert (=> d!12661 (= lt!26143 (insertStrictlySorted!47 (toList!697 lt!25976) (_1!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(assert (=> d!12661 (= (+!83 lt!25976 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))) lt!26145)))

(declare-fun b!62612 () Bool)

(declare-fun res!34346 () Bool)

(assert (=> b!62612 (=> (not res!34346) (not e!41103))))

(assert (=> b!62612 (= res!34346 (= (getValueByKey!124 (toList!697 lt!26145) (_1!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))) (Some!129 (_2!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(declare-fun b!62613 () Bool)

(assert (=> b!62613 (= e!41103 (contains!692 (toList!697 lt!26145) (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))))

(assert (= (and d!12661 res!34347) b!62612))

(assert (= (and b!62612 res!34346) b!62613))

(declare-fun m!56087 () Bool)

(assert (=> d!12661 m!56087))

(declare-fun m!56089 () Bool)

(assert (=> d!12661 m!56089))

(declare-fun m!56091 () Bool)

(assert (=> d!12661 m!56091))

(declare-fun m!56093 () Bool)

(assert (=> d!12661 m!56093))

(declare-fun m!56095 () Bool)

(assert (=> b!62612 m!56095))

(declare-fun m!56097 () Bool)

(assert (=> b!62613 m!56097))

(assert (=> b!62392 d!12661))

(declare-fun d!12663 () Bool)

(assert (=> d!12663 (= (apply!68 (+!83 lt!25973 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) lt!25988) (apply!68 lt!25973 lt!25988))))

(declare-fun lt!26147 () Unit!1685)

(assert (=> d!12663 (= lt!26147 (choose!344 lt!25973 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992))) lt!25988))))

(declare-fun e!41104 () Bool)

(assert (=> d!12663 e!41104))

(declare-fun res!34348 () Bool)

(assert (=> d!12663 (=> (not res!34348) (not e!41104))))

(assert (=> d!12663 (= res!34348 (contains!690 lt!25973 lt!25988))))

(assert (=> d!12663 (= (addApplyDifferent!44 lt!25973 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992))) lt!25988) lt!26147)))

(declare-fun b!62614 () Bool)

(assert (=> b!62614 (= e!41104 (not (= lt!25988 lt!25984)))))

(assert (= (and d!12663 res!34348) b!62614))

(declare-fun m!56099 () Bool)

(assert (=> d!12663 m!56099))

(assert (=> d!12663 m!55743))

(assert (=> d!12663 m!55741))

(assert (=> d!12663 m!55745))

(declare-fun m!56101 () Bool)

(assert (=> d!12663 m!56101))

(assert (=> d!12663 m!55741))

(assert (=> b!62392 d!12663))

(declare-fun d!12665 () Bool)

(assert (=> d!12665 (= (apply!68 lt!25973 lt!25988) (get!1092 (getValueByKey!124 (toList!697 lt!25973) lt!25988)))))

(declare-fun bs!2716 () Bool)

(assert (= bs!2716 d!12665))

(declare-fun m!56103 () Bool)

(assert (=> bs!2716 m!56103))

(assert (=> bs!2716 m!56103))

(declare-fun m!56105 () Bool)

(assert (=> bs!2716 m!56105))

(assert (=> b!62392 d!12665))

(declare-fun d!12667 () Bool)

(assert (=> d!12667 (= (apply!68 (+!83 lt!25978 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) lt!25992) (apply!68 lt!25978 lt!25992))))

(declare-fun lt!26148 () Unit!1685)

(assert (=> d!12667 (= lt!26148 (choose!344 lt!25978 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992))) lt!25992))))

(declare-fun e!41105 () Bool)

(assert (=> d!12667 e!41105))

(declare-fun res!34349 () Bool)

(assert (=> d!12667 (=> (not res!34349) (not e!41105))))

(assert (=> d!12667 (= res!34349 (contains!690 lt!25978 lt!25992))))

(assert (=> d!12667 (= (addApplyDifferent!44 lt!25978 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992))) lt!25992) lt!26148)))

(declare-fun b!62615 () Bool)

(assert (=> b!62615 (= e!41105 (not (= lt!25992 lt!25990)))))

(assert (= (and d!12667 res!34349) b!62615))

(declare-fun m!56107 () Bool)

(assert (=> d!12667 m!56107))

(assert (=> d!12667 m!55733))

(assert (=> d!12667 m!55729))

(assert (=> d!12667 m!55731))

(declare-fun m!56109 () Bool)

(assert (=> d!12667 m!56109))

(assert (=> d!12667 m!55729))

(assert (=> b!62392 d!12667))

(declare-fun d!12669 () Bool)

(declare-fun e!41106 () Bool)

(assert (=> d!12669 e!41106))

(declare-fun res!34351 () Bool)

(assert (=> d!12669 (=> (not res!34351) (not e!41106))))

(declare-fun lt!26151 () ListLongMap!1363)

(assert (=> d!12669 (= res!34351 (contains!690 lt!26151 (_1!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun lt!26149 () List!1447)

(assert (=> d!12669 (= lt!26151 (ListLongMap!1364 lt!26149))))

(declare-fun lt!26150 () Unit!1685)

(declare-fun lt!26152 () Unit!1685)

(assert (=> d!12669 (= lt!26150 lt!26152)))

(assert (=> d!12669 (= (getValueByKey!124 lt!26149 (_1!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))) (Some!129 (_2!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(assert (=> d!12669 (= lt!26152 (lemmaContainsTupThenGetReturnValue!44 lt!26149 (_1!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(assert (=> d!12669 (= lt!26149 (insertStrictlySorted!47 (toList!697 lt!25981) (_1!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(assert (=> d!12669 (= (+!83 lt!25981 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))) lt!26151)))

(declare-fun b!62616 () Bool)

(declare-fun res!34350 () Bool)

(assert (=> b!62616 (=> (not res!34350) (not e!41106))))

(assert (=> b!62616 (= res!34350 (= (getValueByKey!124 (toList!697 lt!26151) (_1!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))) (Some!129 (_2!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(declare-fun b!62617 () Bool)

(assert (=> b!62617 (= e!41106 (contains!692 (toList!697 lt!26151) (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))))

(assert (= (and d!12669 res!34351) b!62616))

(assert (= (and b!62616 res!34350) b!62617))

(declare-fun m!56111 () Bool)

(assert (=> d!12669 m!56111))

(declare-fun m!56113 () Bool)

(assert (=> d!12669 m!56113))

(declare-fun m!56115 () Bool)

(assert (=> d!12669 m!56115))

(declare-fun m!56117 () Bool)

(assert (=> d!12669 m!56117))

(declare-fun m!56119 () Bool)

(assert (=> b!62616 m!56119))

(declare-fun m!56121 () Bool)

(assert (=> b!62617 m!56121))

(assert (=> b!62392 d!12669))

(declare-fun d!12671 () Bool)

(assert (=> d!12671 (= (apply!68 (+!83 lt!25978 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) lt!25992) (get!1092 (getValueByKey!124 (toList!697 (+!83 lt!25978 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!25992)))))

(declare-fun bs!2717 () Bool)

(assert (= bs!2717 d!12671))

(declare-fun m!56123 () Bool)

(assert (=> bs!2717 m!56123))

(assert (=> bs!2717 m!56123))

(declare-fun m!56125 () Bool)

(assert (=> bs!2717 m!56125))

(assert (=> b!62392 d!12671))

(declare-fun d!12673 () Bool)

(assert (=> d!12673 (= (apply!68 lt!25981 lt!25974) (get!1092 (getValueByKey!124 (toList!697 lt!25981) lt!25974)))))

(declare-fun bs!2718 () Bool)

(assert (= bs!2718 d!12673))

(declare-fun m!56127 () Bool)

(assert (=> bs!2718 m!56127))

(assert (=> bs!2718 m!56127))

(declare-fun m!56129 () Bool)

(assert (=> bs!2718 m!56129))

(assert (=> b!62392 d!12673))

(declare-fun d!12675 () Bool)

(assert (=> d!12675 (= (apply!68 (+!83 lt!25981 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))) lt!25974) (get!1092 (getValueByKey!124 (toList!697 (+!83 lt!25981 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!25974)))))

(declare-fun bs!2719 () Bool)

(assert (= bs!2719 d!12675))

(declare-fun m!56131 () Bool)

(assert (=> bs!2719 m!56131))

(assert (=> bs!2719 m!56131))

(declare-fun m!56133 () Bool)

(assert (=> bs!2719 m!56133))

(assert (=> b!62392 d!12675))

(declare-fun d!12677 () Bool)

(assert (=> d!12677 (= (apply!68 lt!25978 lt!25992) (get!1092 (getValueByKey!124 (toList!697 lt!25978) lt!25992)))))

(declare-fun bs!2720 () Bool)

(assert (= bs!2720 d!12677))

(declare-fun m!56135 () Bool)

(assert (=> bs!2720 m!56135))

(assert (=> bs!2720 m!56135))

(declare-fun m!56137 () Bool)

(assert (=> bs!2720 m!56137))

(assert (=> b!62392 d!12677))

(declare-fun d!12679 () Bool)

(declare-fun e!41107 () Bool)

(assert (=> d!12679 e!41107))

(declare-fun res!34352 () Bool)

(assert (=> d!12679 (=> res!34352 e!41107)))

(declare-fun lt!26156 () Bool)

(assert (=> d!12679 (= res!34352 (not lt!26156))))

(declare-fun lt!26154 () Bool)

(assert (=> d!12679 (= lt!26156 lt!26154)))

(declare-fun lt!26155 () Unit!1685)

(declare-fun e!41108 () Unit!1685)

(assert (=> d!12679 (= lt!26155 e!41108)))

(declare-fun c!8354 () Bool)

(assert (=> d!12679 (= c!8354 lt!26154)))

(assert (=> d!12679 (= lt!26154 (containsKey!128 (toList!697 (+!83 lt!25976 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!25989))))

(assert (=> d!12679 (= (contains!690 (+!83 lt!25976 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))) lt!25989) lt!26156)))

(declare-fun b!62618 () Bool)

(declare-fun lt!26153 () Unit!1685)

(assert (=> b!62618 (= e!41108 lt!26153)))

(assert (=> b!62618 (= lt!26153 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 (+!83 lt!25976 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!25989))))

(assert (=> b!62618 (isDefined!78 (getValueByKey!124 (toList!697 (+!83 lt!25976 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!25989))))

(declare-fun b!62619 () Bool)

(declare-fun Unit!1708 () Unit!1685)

(assert (=> b!62619 (= e!41108 Unit!1708)))

(declare-fun b!62620 () Bool)

(assert (=> b!62620 (= e!41107 (isDefined!78 (getValueByKey!124 (toList!697 (+!83 lt!25976 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!25989)))))

(assert (= (and d!12679 c!8354) b!62618))

(assert (= (and d!12679 (not c!8354)) b!62619))

(assert (= (and d!12679 (not res!34352)) b!62620))

(declare-fun m!56139 () Bool)

(assert (=> d!12679 m!56139))

(declare-fun m!56141 () Bool)

(assert (=> b!62618 m!56141))

(declare-fun m!56143 () Bool)

(assert (=> b!62618 m!56143))

(assert (=> b!62618 m!56143))

(declare-fun m!56145 () Bool)

(assert (=> b!62618 m!56145))

(assert (=> b!62620 m!56143))

(assert (=> b!62620 m!56143))

(assert (=> b!62620 m!56145))

(assert (=> b!62392 d!12679))

(declare-fun d!12681 () Bool)

(assert (=> d!12681 (contains!690 (+!83 lt!25976 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))) lt!25989)))

(declare-fun lt!26159 () Unit!1685)

(declare-fun choose!345 (ListLongMap!1363 (_ BitVec 64) V!2865 (_ BitVec 64)) Unit!1685)

(assert (=> d!12681 (= lt!26159 (choose!345 lt!25976 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))) lt!25989))))

(assert (=> d!12681 (contains!690 lt!25976 lt!25989)))

(assert (=> d!12681 (= (addStillContains!44 lt!25976 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))) lt!25989) lt!26159)))

(declare-fun bs!2721 () Bool)

(assert (= bs!2721 d!12681))

(assert (=> bs!2721 m!55723))

(assert (=> bs!2721 m!55723))

(assert (=> bs!2721 m!55725))

(declare-fun m!56147 () Bool)

(assert (=> bs!2721 m!56147))

(declare-fun m!56149 () Bool)

(assert (=> bs!2721 m!56149))

(assert (=> b!62392 d!12681))

(declare-fun b!62622 () Bool)

(declare-fun res!34355 () Bool)

(declare-fun e!41110 () Bool)

(assert (=> b!62622 (=> (not res!34355) (not e!41110))))

(declare-fun e!41121 () Bool)

(assert (=> b!62622 (= res!34355 e!41121)))

(declare-fun c!8360 () Bool)

(assert (=> b!62622 (= c!8360 (not (= (bvand (ite c!8266 (ite c!8271 lt!25897 lt!25915) (extraKeys!1966 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!62623 () Bool)

(declare-fun e!41115 () Bool)

(declare-fun lt!26165 () ListLongMap!1363)

(assert (=> b!62623 (= e!41115 (= (apply!68 lt!26165 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))))

(declare-fun e!41119 () Bool)

(declare-fun b!62624 () Bool)

(assert (=> b!62624 (= e!41119 (= (apply!68 lt!26165 #b0000000000000000000000000000000000000000000000000000000000000000) (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))))))

(declare-fun d!12683 () Bool)

(assert (=> d!12683 e!41110))

(declare-fun res!34354 () Bool)

(assert (=> d!12683 (=> (not res!34354) (not e!41110))))

(assert (=> d!12683 (= res!34354 (or (bvsge #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))))

(declare-fun lt!26167 () ListLongMap!1363)

(assert (=> d!12683 (= lt!26165 lt!26167)))

(declare-fun lt!26173 () Unit!1685)

(declare-fun e!41117 () Unit!1685)

(assert (=> d!12683 (= lt!26173 e!41117)))

(declare-fun c!8357 () Bool)

(declare-fun e!41109 () Bool)

(assert (=> d!12683 (= c!8357 e!41109)))

(declare-fun res!34360 () Bool)

(assert (=> d!12683 (=> (not res!34360) (not e!41109))))

(assert (=> d!12683 (= res!34360 (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(declare-fun e!41118 () ListLongMap!1363)

(assert (=> d!12683 (= lt!26167 e!41118)))

(declare-fun c!8358 () Bool)

(assert (=> d!12683 (= c!8358 (and (not (= (bvand (ite c!8266 (ite c!8271 lt!25897 lt!25915) (extraKeys!1966 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite c!8266 (ite c!8271 lt!25897 lt!25915) (extraKeys!1966 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12683 (validMask!0 (mask!5992 newMap!16))))

(assert (=> d!12683 (= (getCurrentListMap!393 (_keys!3718 newMap!16) (ite (or c!8266 c!8262) (_values!2070 newMap!16) lt!25918) (mask!5992 newMap!16) (ite c!8266 (ite c!8271 lt!25897 lt!25915) (extraKeys!1966 newMap!16)) (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)) (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) lt!26165)))

(declare-fun b!62625 () Bool)

(declare-fun res!34359 () Bool)

(assert (=> b!62625 (=> (not res!34359) (not e!41110))))

(declare-fun e!41116 () Bool)

(assert (=> b!62625 (= res!34359 e!41116)))

(declare-fun res!34356 () Bool)

(assert (=> b!62625 (=> res!34356 e!41116)))

(declare-fun e!41114 () Bool)

(assert (=> b!62625 (= res!34356 (not e!41114))))

(declare-fun res!34357 () Bool)

(assert (=> b!62625 (=> (not res!34357) (not e!41114))))

(assert (=> b!62625 (= res!34357 (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(declare-fun bm!4927 () Bool)

(declare-fun call!4933 () ListLongMap!1363)

(declare-fun call!4934 () ListLongMap!1363)

(assert (=> bm!4927 (= call!4933 call!4934)))

(declare-fun b!62626 () Bool)

(declare-fun e!41113 () ListLongMap!1363)

(declare-fun call!4935 () ListLongMap!1363)

(assert (=> b!62626 (= e!41113 call!4935)))

(declare-fun bm!4928 () Bool)

(declare-fun call!4932 () Bool)

(assert (=> bm!4928 (= call!4932 (contains!690 lt!26165 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62627 () Bool)

(assert (=> b!62627 (= e!41121 (not call!4932))))

(declare-fun bm!4929 () Bool)

(declare-fun call!4936 () ListLongMap!1363)

(declare-fun call!4931 () ListLongMap!1363)

(assert (=> bm!4929 (= call!4936 call!4931)))

(declare-fun bm!4930 () Bool)

(declare-fun c!8359 () Bool)

(assert (=> bm!4930 (= call!4931 (+!83 (ite c!8358 call!4934 (ite c!8359 call!4933 call!4935)) (ite (or c!8358 c!8359) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))))))

(declare-fun b!62628 () Bool)

(assert (=> b!62628 (= e!41109 (validKeyInArray!0 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62629 () Bool)

(assert (=> b!62629 (= e!41118 (+!83 call!4931 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))))))

(declare-fun bm!4931 () Bool)

(declare-fun call!4930 () Bool)

(assert (=> bm!4931 (= call!4930 (contains!690 lt!26165 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62630 () Bool)

(declare-fun Unit!1709 () Unit!1685)

(assert (=> b!62630 (= e!41117 Unit!1709)))

(declare-fun b!62631 () Bool)

(assert (=> b!62631 (= e!41114 (validKeyInArray!0 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62632 () Bool)

(declare-fun c!8355 () Bool)

(assert (=> b!62632 (= c!8355 (and (not (= (bvand (ite c!8266 (ite c!8271 lt!25897 lt!25915) (extraKeys!1966 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite c!8266 (ite c!8271 lt!25897 lt!25915) (extraKeys!1966 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!41120 () ListLongMap!1363)

(assert (=> b!62632 (= e!41120 e!41113)))

(declare-fun b!62633 () Bool)

(declare-fun e!41111 () Bool)

(assert (=> b!62633 (= e!41110 e!41111)))

(declare-fun c!8356 () Bool)

(assert (=> b!62633 (= c!8356 (not (= (bvand (ite c!8266 (ite c!8271 lt!25897 lt!25915) (extraKeys!1966 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!62634 () Bool)

(assert (=> b!62634 (= e!41118 e!41120)))

(assert (=> b!62634 (= c!8359 (and (not (= (bvand (ite c!8266 (ite c!8271 lt!25897 lt!25915) (extraKeys!1966 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite c!8266 (ite c!8271 lt!25897 lt!25915) (extraKeys!1966 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!62635 () Bool)

(declare-fun e!41112 () Bool)

(assert (=> b!62635 (= e!41116 e!41112)))

(declare-fun res!34358 () Bool)

(assert (=> b!62635 (=> (not res!34358) (not e!41112))))

(assert (=> b!62635 (= res!34358 (contains!690 lt!26165 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!62635 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(declare-fun b!62636 () Bool)

(assert (=> b!62636 (= e!41111 (not call!4930))))

(declare-fun bm!4932 () Bool)

(assert (=> bm!4932 (= call!4935 call!4933)))

(declare-fun b!62637 () Bool)

(assert (=> b!62637 (= e!41121 e!41119)))

(declare-fun res!34361 () Bool)

(assert (=> b!62637 (= res!34361 call!4932)))

(assert (=> b!62637 (=> (not res!34361) (not e!41119))))

(declare-fun bm!4933 () Bool)

(assert (=> bm!4933 (= call!4934 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (ite (or c!8266 c!8262) (_values!2070 newMap!16) lt!25918) (mask!5992 newMap!16) (ite c!8266 (ite c!8271 lt!25897 lt!25915) (extraKeys!1966 newMap!16)) (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)) (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun b!62638 () Bool)

(assert (=> b!62638 (= e!41112 (= (apply!68 lt!26165 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)) (get!1089 (select (arr!1787 (ite (or c!8266 c!8262) (_values!2070 newMap!16) lt!25918)) #b00000000000000000000000000000000) (dynLambda!312 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62638 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2020 (ite (or c!8266 c!8262) (_values!2070 newMap!16) lt!25918))))))

(assert (=> b!62638 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(declare-fun b!62639 () Bool)

(assert (=> b!62639 (= e!41113 call!4936)))

(declare-fun b!62640 () Bool)

(declare-fun lt!26179 () Unit!1685)

(assert (=> b!62640 (= e!41117 lt!26179)))

(declare-fun lt!26164 () ListLongMap!1363)

(assert (=> b!62640 (= lt!26164 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (ite (or c!8266 c!8262) (_values!2070 newMap!16) lt!25918) (mask!5992 newMap!16) (ite c!8266 (ite c!8271 lt!25897 lt!25915) (extraKeys!1966 newMap!16)) (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)) (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26170 () (_ BitVec 64))

(assert (=> b!62640 (= lt!26170 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26177 () (_ BitVec 64))

(assert (=> b!62640 (= lt!26177 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26171 () Unit!1685)

(assert (=> b!62640 (= lt!26171 (addStillContains!44 lt!26164 lt!26170 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)) lt!26177))))

(assert (=> b!62640 (contains!690 (+!83 lt!26164 (tuple2!2053 lt!26170 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)))) lt!26177)))

(declare-fun lt!26163 () Unit!1685)

(assert (=> b!62640 (= lt!26163 lt!26171)))

(declare-fun lt!26161 () ListLongMap!1363)

(assert (=> b!62640 (= lt!26161 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (ite (or c!8266 c!8262) (_values!2070 newMap!16) lt!25918) (mask!5992 newMap!16) (ite c!8266 (ite c!8271 lt!25897 lt!25915) (extraKeys!1966 newMap!16)) (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)) (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26172 () (_ BitVec 64))

(assert (=> b!62640 (= lt!26172 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26176 () (_ BitVec 64))

(assert (=> b!62640 (= lt!26176 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26168 () Unit!1685)

(assert (=> b!62640 (= lt!26168 (addApplyDifferent!44 lt!26161 lt!26172 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)) lt!26176))))

(assert (=> b!62640 (= (apply!68 (+!83 lt!26161 (tuple2!2053 lt!26172 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))) lt!26176) (apply!68 lt!26161 lt!26176))))

(declare-fun lt!26160 () Unit!1685)

(assert (=> b!62640 (= lt!26160 lt!26168)))

(declare-fun lt!26169 () ListLongMap!1363)

(assert (=> b!62640 (= lt!26169 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (ite (or c!8266 c!8262) (_values!2070 newMap!16) lt!25918) (mask!5992 newMap!16) (ite c!8266 (ite c!8271 lt!25897 lt!25915) (extraKeys!1966 newMap!16)) (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)) (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26174 () (_ BitVec 64))

(assert (=> b!62640 (= lt!26174 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26162 () (_ BitVec 64))

(assert (=> b!62640 (= lt!26162 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26181 () Unit!1685)

(assert (=> b!62640 (= lt!26181 (addApplyDifferent!44 lt!26169 lt!26174 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)) lt!26162))))

(assert (=> b!62640 (= (apply!68 (+!83 lt!26169 (tuple2!2053 lt!26174 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)))) lt!26162) (apply!68 lt!26169 lt!26162))))

(declare-fun lt!26175 () Unit!1685)

(assert (=> b!62640 (= lt!26175 lt!26181)))

(declare-fun lt!26166 () ListLongMap!1363)

(assert (=> b!62640 (= lt!26166 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (ite (or c!8266 c!8262) (_values!2070 newMap!16) lt!25918) (mask!5992 newMap!16) (ite c!8266 (ite c!8271 lt!25897 lt!25915) (extraKeys!1966 newMap!16)) (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)) (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26178 () (_ BitVec 64))

(assert (=> b!62640 (= lt!26178 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26180 () (_ BitVec 64))

(assert (=> b!62640 (= lt!26180 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!62640 (= lt!26179 (addApplyDifferent!44 lt!26166 lt!26178 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)) lt!26180))))

(assert (=> b!62640 (= (apply!68 (+!83 lt!26166 (tuple2!2053 lt!26178 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))) lt!26180) (apply!68 lt!26166 lt!26180))))

(declare-fun b!62641 () Bool)

(assert (=> b!62641 (= e!41111 e!41115)))

(declare-fun res!34353 () Bool)

(assert (=> b!62641 (= res!34353 call!4930)))

(assert (=> b!62641 (=> (not res!34353) (not e!41115))))

(declare-fun b!62642 () Bool)

(assert (=> b!62642 (= e!41120 call!4936)))

(assert (= (and d!12683 c!8358) b!62629))

(assert (= (and d!12683 (not c!8358)) b!62634))

(assert (= (and b!62634 c!8359) b!62642))

(assert (= (and b!62634 (not c!8359)) b!62632))

(assert (= (and b!62632 c!8355) b!62639))

(assert (= (and b!62632 (not c!8355)) b!62626))

(assert (= (or b!62639 b!62626) bm!4932))

(assert (= (or b!62642 bm!4932) bm!4927))

(assert (= (or b!62642 b!62639) bm!4929))

(assert (= (or b!62629 bm!4927) bm!4933))

(assert (= (or b!62629 bm!4929) bm!4930))

(assert (= (and d!12683 res!34360) b!62628))

(assert (= (and d!12683 c!8357) b!62640))

(assert (= (and d!12683 (not c!8357)) b!62630))

(assert (= (and d!12683 res!34354) b!62625))

(assert (= (and b!62625 res!34357) b!62631))

(assert (= (and b!62625 (not res!34356)) b!62635))

(assert (= (and b!62635 res!34358) b!62638))

(assert (= (and b!62625 res!34359) b!62622))

(assert (= (and b!62622 c!8360) b!62637))

(assert (= (and b!62622 (not c!8360)) b!62627))

(assert (= (and b!62637 res!34361) b!62624))

(assert (= (or b!62637 b!62627) bm!4928))

(assert (= (and b!62622 res!34355) b!62633))

(assert (= (and b!62633 c!8356) b!62641))

(assert (= (and b!62633 (not c!8356)) b!62636))

(assert (= (and b!62641 res!34353) b!62623))

(assert (= (or b!62641 b!62636) bm!4931))

(declare-fun b_lambda!2785 () Bool)

(assert (=> (not b_lambda!2785) (not b!62638)))

(assert (=> b!62638 t!4844))

(declare-fun b_and!3825 () Bool)

(assert (= b_and!3821 (and (=> t!4844 result!2455) b_and!3825)))

(assert (=> b!62638 t!4846))

(declare-fun b_and!3827 () Bool)

(assert (= b_and!3823 (and (=> t!4846 result!2457) b_and!3827)))

(declare-fun m!56151 () Bool)

(assert (=> bm!4933 m!56151))

(declare-fun m!56153 () Bool)

(assert (=> b!62629 m!56153))

(assert (=> b!62631 m!55803))

(assert (=> b!62631 m!55803))

(assert (=> b!62631 m!55843))

(declare-fun m!56155 () Bool)

(assert (=> bm!4931 m!56155))

(assert (=> b!62635 m!55803))

(assert (=> b!62635 m!55803))

(declare-fun m!56157 () Bool)

(assert (=> b!62635 m!56157))

(declare-fun m!56159 () Bool)

(assert (=> b!62623 m!56159))

(declare-fun m!56161 () Bool)

(assert (=> bm!4930 m!56161))

(assert (=> b!62628 m!55803))

(assert (=> b!62628 m!55803))

(assert (=> b!62628 m!55843))

(declare-fun m!56163 () Bool)

(assert (=> bm!4928 m!56163))

(assert (=> b!62638 m!55803))

(declare-fun m!56165 () Bool)

(assert (=> b!62638 m!56165))

(assert (=> b!62638 m!55857))

(declare-fun m!56167 () Bool)

(assert (=> b!62638 m!56167))

(assert (=> b!62638 m!55803))

(assert (=> b!62638 m!56167))

(assert (=> b!62638 m!55857))

(declare-fun m!56169 () Bool)

(assert (=> b!62638 m!56169))

(declare-fun m!56171 () Bool)

(assert (=> b!62624 m!56171))

(declare-fun m!56173 () Bool)

(assert (=> b!62640 m!56173))

(assert (=> b!62640 m!56151))

(declare-fun m!56175 () Bool)

(assert (=> b!62640 m!56175))

(assert (=> b!62640 m!56175))

(declare-fun m!56177 () Bool)

(assert (=> b!62640 m!56177))

(declare-fun m!56179 () Bool)

(assert (=> b!62640 m!56179))

(declare-fun m!56181 () Bool)

(assert (=> b!62640 m!56181))

(declare-fun m!56183 () Bool)

(assert (=> b!62640 m!56183))

(declare-fun m!56185 () Bool)

(assert (=> b!62640 m!56185))

(declare-fun m!56187 () Bool)

(assert (=> b!62640 m!56187))

(declare-fun m!56189 () Bool)

(assert (=> b!62640 m!56189))

(assert (=> b!62640 m!55803))

(declare-fun m!56191 () Bool)

(assert (=> b!62640 m!56191))

(declare-fun m!56193 () Bool)

(assert (=> b!62640 m!56193))

(declare-fun m!56195 () Bool)

(assert (=> b!62640 m!56195))

(assert (=> b!62640 m!56193))

(declare-fun m!56197 () Bool)

(assert (=> b!62640 m!56197))

(assert (=> b!62640 m!56181))

(declare-fun m!56199 () Bool)

(assert (=> b!62640 m!56199))

(assert (=> b!62640 m!56187))

(declare-fun m!56201 () Bool)

(assert (=> b!62640 m!56201))

(assert (=> d!12683 m!55783))

(assert (=> bm!4873 d!12683))

(declare-fun d!12685 () Bool)

(assert (=> d!12685 (= (apply!68 lt!25977 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1092 (getValueByKey!124 (toList!697 lt!25977) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!2722 () Bool)

(assert (= bs!2722 d!12685))

(assert (=> bs!2722 m!55685))

(assert (=> bs!2722 m!55775))

(assert (=> bs!2722 m!55775))

(declare-fun m!56203 () Bool)

(assert (=> bs!2722 m!56203))

(assert (=> b!62390 d!12685))

(declare-fun d!12687 () Bool)

(declare-fun c!8361 () Bool)

(assert (=> d!12687 (= c!8361 ((_ is ValueCellFull!863) (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!41122 () V!2865)

(assert (=> d!12687 (= (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!41122)))

(declare-fun b!62643 () Bool)

(assert (=> b!62643 (= e!41122 (get!1090 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!62644 () Bool)

(assert (=> b!62644 (= e!41122 (get!1091 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12687 c!8361) b!62643))

(assert (= (and d!12687 (not c!8361)) b!62644))

(assert (=> b!62643 m!55715))

(assert (=> b!62643 m!55505))

(declare-fun m!56205 () Bool)

(assert (=> b!62643 m!56205))

(assert (=> b!62644 m!55715))

(assert (=> b!62644 m!55505))

(declare-fun m!56207 () Bool)

(assert (=> b!62644 m!56207))

(assert (=> b!62390 d!12687))

(assert (=> b!62328 d!12593))

(declare-fun d!12689 () Bool)

(declare-fun lt!26188 () SeekEntryResult!232)

(assert (=> d!12689 (and (or ((_ is Undefined!232) lt!26188) (not ((_ is Found!232) lt!26188)) (and (bvsge (index!3054 lt!26188) #b00000000000000000000000000000000) (bvslt (index!3054 lt!26188) (size!2019 (_keys!3718 newMap!16))))) (or ((_ is Undefined!232) lt!26188) ((_ is Found!232) lt!26188) (not ((_ is MissingZero!232) lt!26188)) (and (bvsge (index!3053 lt!26188) #b00000000000000000000000000000000) (bvslt (index!3053 lt!26188) (size!2019 (_keys!3718 newMap!16))))) (or ((_ is Undefined!232) lt!26188) ((_ is Found!232) lt!26188) ((_ is MissingZero!232) lt!26188) (not ((_ is MissingVacant!232) lt!26188)) (and (bvsge (index!3056 lt!26188) #b00000000000000000000000000000000) (bvslt (index!3056 lt!26188) (size!2019 (_keys!3718 newMap!16))))) (or ((_ is Undefined!232) lt!26188) (ite ((_ is Found!232) lt!26188) (= (select (arr!1786 (_keys!3718 newMap!16)) (index!3054 lt!26188)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (ite ((_ is MissingZero!232) lt!26188) (= (select (arr!1786 (_keys!3718 newMap!16)) (index!3053 lt!26188)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!232) lt!26188) (= (select (arr!1786 (_keys!3718 newMap!16)) (index!3056 lt!26188)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!41129 () SeekEntryResult!232)

(assert (=> d!12689 (= lt!26188 e!41129)))

(declare-fun c!8368 () Bool)

(declare-fun lt!26189 () SeekEntryResult!232)

(assert (=> d!12689 (= c!8368 (and ((_ is Intermediate!232) lt!26189) (undefined!1044 lt!26189)))))

(declare-fun seekKeyOrZeroOrLongMinValue!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!3737 (_ BitVec 32)) SeekEntryResult!232)

(declare-fun toIndex!0 ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))

(assert (=> d!12689 (= lt!26189 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (mask!5992 newMap!16)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (_keys!3718 newMap!16) (mask!5992 newMap!16)))))

(assert (=> d!12689 (validMask!0 (mask!5992 newMap!16))))

(assert (=> d!12689 (= (seekEntryOrOpen!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (_keys!3718 newMap!16) (mask!5992 newMap!16)) lt!26188)))

(declare-fun b!62657 () Bool)

(declare-fun e!41131 () SeekEntryResult!232)

(assert (=> b!62657 (= e!41131 (MissingZero!232 (index!3055 lt!26189)))))

(declare-fun b!62658 () Bool)

(declare-fun seekKeyOrZeroReturnVacant!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!3737 (_ BitVec 32)) SeekEntryResult!232)

(assert (=> b!62658 (= e!41131 (seekKeyOrZeroReturnVacant!0 (x!10309 lt!26189) (index!3055 lt!26189) (index!3055 lt!26189) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (_keys!3718 newMap!16) (mask!5992 newMap!16)))))

(declare-fun b!62659 () Bool)

(assert (=> b!62659 (= e!41129 Undefined!232)))

(declare-fun b!62660 () Bool)

(declare-fun e!41130 () SeekEntryResult!232)

(assert (=> b!62660 (= e!41129 e!41130)))

(declare-fun lt!26190 () (_ BitVec 64))

(assert (=> b!62660 (= lt!26190 (select (arr!1786 (_keys!3718 newMap!16)) (index!3055 lt!26189)))))

(declare-fun c!8370 () Bool)

(assert (=> b!62660 (= c!8370 (= lt!26190 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(declare-fun b!62661 () Bool)

(declare-fun c!8369 () Bool)

(assert (=> b!62661 (= c!8369 (= lt!26190 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62661 (= e!41130 e!41131)))

(declare-fun b!62662 () Bool)

(assert (=> b!62662 (= e!41130 (Found!232 (index!3055 lt!26189)))))

(assert (= (and d!12689 c!8368) b!62659))

(assert (= (and d!12689 (not c!8368)) b!62660))

(assert (= (and b!62660 c!8370) b!62662))

(assert (= (and b!62660 (not c!8370)) b!62661))

(assert (= (and b!62661 c!8369) b!62657))

(assert (= (and b!62661 (not c!8369)) b!62658))

(declare-fun m!56209 () Bool)

(assert (=> d!12689 m!56209))

(assert (=> d!12689 m!55481))

(declare-fun m!56211 () Bool)

(assert (=> d!12689 m!56211))

(assert (=> d!12689 m!55481))

(assert (=> d!12689 m!56209))

(assert (=> d!12689 m!55783))

(declare-fun m!56213 () Bool)

(assert (=> d!12689 m!56213))

(declare-fun m!56215 () Bool)

(assert (=> d!12689 m!56215))

(declare-fun m!56217 () Bool)

(assert (=> d!12689 m!56217))

(assert (=> b!62658 m!55481))

(declare-fun m!56219 () Bool)

(assert (=> b!62658 m!56219))

(declare-fun m!56221 () Bool)

(assert (=> b!62660 m!56221))

(assert (=> bm!4859 d!12689))

(declare-fun d!12691 () Bool)

(assert (=> d!12691 (= (inRange!0 (ite c!8262 (ite c!8272 (index!3054 lt!25892) (ite c!8263 (index!3053 lt!25896) (index!3056 lt!25896))) (ite c!8270 (index!3054 lt!25916) (ite c!8265 (index!3053 lt!25906) (index!3056 lt!25906)))) (mask!5992 newMap!16)) (and (bvsge (ite c!8262 (ite c!8272 (index!3054 lt!25892) (ite c!8263 (index!3053 lt!25896) (index!3056 lt!25896))) (ite c!8270 (index!3054 lt!25916) (ite c!8265 (index!3053 lt!25906) (index!3056 lt!25906)))) #b00000000000000000000000000000000) (bvslt (ite c!8262 (ite c!8272 (index!3054 lt!25892) (ite c!8263 (index!3053 lt!25896) (index!3056 lt!25896))) (ite c!8270 (index!3054 lt!25916) (ite c!8265 (index!3053 lt!25906) (index!3056 lt!25906)))) (bvadd (mask!5992 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4854 d!12691))

(declare-fun d!12693 () Bool)

(declare-fun res!34370 () Bool)

(declare-fun e!41134 () Bool)

(assert (=> d!12693 (=> (not res!34370) (not e!41134))))

(assert (=> d!12693 (= res!34370 (validMask!0 (mask!5992 newMap!16)))))

(assert (=> d!12693 (= (simpleValid!44 newMap!16) e!41134)))

(declare-fun b!62673 () Bool)

(declare-fun res!34373 () Bool)

(assert (=> b!62673 (=> (not res!34373) (not e!41134))))

(declare-fun size!2025 (LongMapFixedSize!634) (_ BitVec 32))

(assert (=> b!62673 (= res!34373 (= (size!2025 newMap!16) (bvadd (_size!366 newMap!16) (bvsdiv (bvadd (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!62671 () Bool)

(declare-fun res!34372 () Bool)

(assert (=> b!62671 (=> (not res!34372) (not e!41134))))

(assert (=> b!62671 (= res!34372 (and (= (size!2020 (_values!2070 newMap!16)) (bvadd (mask!5992 newMap!16) #b00000000000000000000000000000001)) (= (size!2019 (_keys!3718 newMap!16)) (size!2020 (_values!2070 newMap!16))) (bvsge (_size!366 newMap!16) #b00000000000000000000000000000000) (bvsle (_size!366 newMap!16) (bvadd (mask!5992 newMap!16) #b00000000000000000000000000000001))))))

(declare-fun b!62674 () Bool)

(assert (=> b!62674 (= e!41134 (and (bvsge (extraKeys!1966 newMap!16) #b00000000000000000000000000000000) (bvsle (extraKeys!1966 newMap!16) #b00000000000000000000000000000011) (bvsge (_vacant!366 newMap!16) #b00000000000000000000000000000000)))))

(declare-fun b!62672 () Bool)

(declare-fun res!34371 () Bool)

(assert (=> b!62672 (=> (not res!34371) (not e!41134))))

(assert (=> b!62672 (= res!34371 (bvsge (size!2025 newMap!16) (_size!366 newMap!16)))))

(assert (= (and d!12693 res!34370) b!62671))

(assert (= (and b!62671 res!34372) b!62672))

(assert (= (and b!62672 res!34371) b!62673))

(assert (= (and b!62673 res!34373) b!62674))

(assert (=> d!12693 m!55783))

(declare-fun m!56223 () Bool)

(assert (=> b!62673 m!56223))

(assert (=> b!62672 m!56223))

(assert (=> d!12545 d!12693))

(declare-fun d!12695 () Bool)

(declare-fun e!41135 () Bool)

(assert (=> d!12695 e!41135))

(declare-fun res!34375 () Bool)

(assert (=> d!12695 (=> (not res!34375) (not e!41135))))

(declare-fun lt!26193 () ListLongMap!1363)

(assert (=> d!12695 (= res!34375 (contains!690 lt!26193 (_1!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(declare-fun lt!26191 () List!1447)

(assert (=> d!12695 (= lt!26193 (ListLongMap!1364 lt!26191))))

(declare-fun lt!26192 () Unit!1685)

(declare-fun lt!26194 () Unit!1685)

(assert (=> d!12695 (= lt!26192 lt!26194)))

(assert (=> d!12695 (= (getValueByKey!124 lt!26191 (_1!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))) (Some!129 (_2!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(assert (=> d!12695 (= lt!26194 (lemmaContainsTupThenGetReturnValue!44 lt!26191 (_1!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) (_2!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(assert (=> d!12695 (= lt!26191 (insertStrictlySorted!47 (toList!697 (ite c!8298 call!4899 (ite c!8299 call!4898 call!4900))) (_1!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) (_2!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(assert (=> d!12695 (= (+!83 (ite c!8298 call!4899 (ite c!8299 call!4898 call!4900)) (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!26193)))

(declare-fun b!62675 () Bool)

(declare-fun res!34374 () Bool)

(assert (=> b!62675 (=> (not res!34374) (not e!41135))))

(assert (=> b!62675 (= res!34374 (= (getValueByKey!124 (toList!697 lt!26193) (_1!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))) (Some!129 (_2!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))))

(declare-fun b!62676 () Bool)

(assert (=> b!62676 (= e!41135 (contains!692 (toList!697 lt!26193) (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(assert (= (and d!12695 res!34375) b!62675))

(assert (= (and b!62675 res!34374) b!62676))

(declare-fun m!56225 () Bool)

(assert (=> d!12695 m!56225))

(declare-fun m!56227 () Bool)

(assert (=> d!12695 m!56227))

(declare-fun m!56229 () Bool)

(assert (=> d!12695 m!56229))

(declare-fun m!56231 () Bool)

(assert (=> d!12695 m!56231))

(declare-fun m!56233 () Bool)

(assert (=> b!62675 m!56233))

(declare-fun m!56235 () Bool)

(assert (=> b!62676 m!56235))

(assert (=> bm!4895 d!12695))

(assert (=> b!62274 d!12689))

(declare-fun d!12697 () Bool)

(declare-fun res!34380 () Bool)

(declare-fun e!41140 () Bool)

(assert (=> d!12697 (=> res!34380 e!41140)))

(assert (=> d!12697 (= res!34380 (and ((_ is Cons!1443) (toList!697 lt!25781)) (= (_1!1037 (h!2026 (toList!697 lt!25781))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355))))))

(assert (=> d!12697 (= (containsKey!128 (toList!697 lt!25781) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) e!41140)))

(declare-fun b!62681 () Bool)

(declare-fun e!41141 () Bool)

(assert (=> b!62681 (= e!41140 e!41141)))

(declare-fun res!34381 () Bool)

(assert (=> b!62681 (=> (not res!34381) (not e!41141))))

(assert (=> b!62681 (= res!34381 (and (or (not ((_ is Cons!1443) (toList!697 lt!25781))) (bvsle (_1!1037 (h!2026 (toList!697 lt!25781))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355))) ((_ is Cons!1443) (toList!697 lt!25781)) (bvslt (_1!1037 (h!2026 (toList!697 lt!25781))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355))))))

(declare-fun b!62682 () Bool)

(assert (=> b!62682 (= e!41141 (containsKey!128 (t!4832 (toList!697 lt!25781)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(assert (= (and d!12697 (not res!34380)) b!62681))

(assert (= (and b!62681 res!34381) b!62682))

(assert (=> b!62682 m!55481))

(declare-fun m!56237 () Bool)

(assert (=> b!62682 m!56237))

(assert (=> d!12555 d!12697))

(declare-fun d!12699 () Bool)

(assert (=> d!12699 (= (get!1091 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62304 d!12699))

(declare-fun b!62691 () Bool)

(declare-fun e!41148 () Bool)

(declare-fun call!4939 () Bool)

(assert (=> b!62691 (= e!41148 call!4939)))

(declare-fun bm!4936 () Bool)

(assert (=> bm!4936 (= call!4939 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3718 newMap!16) (mask!5992 newMap!16)))))

(declare-fun b!62693 () Bool)

(declare-fun e!41149 () Bool)

(assert (=> b!62693 (= e!41149 call!4939)))

(declare-fun b!62694 () Bool)

(declare-fun e!41150 () Bool)

(assert (=> b!62694 (= e!41150 e!41149)))

(declare-fun c!8373 () Bool)

(assert (=> b!62694 (= c!8373 (validKeyInArray!0 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62692 () Bool)

(assert (=> b!62692 (= e!41149 e!41148)))

(declare-fun lt!26202 () (_ BitVec 64))

(assert (=> b!62692 (= lt!26202 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26203 () Unit!1685)

(declare-fun lemmaArrayContainsFromImpliesContainsFromZero!0 (array!3737 (_ BitVec 64) (_ BitVec 32)) Unit!1685)

(assert (=> b!62692 (= lt!26203 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3718 newMap!16) lt!26202 #b00000000000000000000000000000000))))

(assert (=> b!62692 (arrayContainsKey!0 (_keys!3718 newMap!16) lt!26202 #b00000000000000000000000000000000)))

(declare-fun lt!26201 () Unit!1685)

(assert (=> b!62692 (= lt!26201 lt!26203)))

(declare-fun res!34387 () Bool)

(assert (=> b!62692 (= res!34387 (= (seekEntryOrOpen!0 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000) (_keys!3718 newMap!16) (mask!5992 newMap!16)) (Found!232 #b00000000000000000000000000000000)))))

(assert (=> b!62692 (=> (not res!34387) (not e!41148))))

(declare-fun d!12701 () Bool)

(declare-fun res!34386 () Bool)

(assert (=> d!12701 (=> res!34386 e!41150)))

(assert (=> d!12701 (= res!34386 (bvsge #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(assert (=> d!12701 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3718 newMap!16) (mask!5992 newMap!16)) e!41150)))

(assert (= (and d!12701 (not res!34386)) b!62694))

(assert (= (and b!62694 c!8373) b!62692))

(assert (= (and b!62694 (not c!8373)) b!62693))

(assert (= (and b!62692 res!34387) b!62691))

(assert (= (or b!62691 b!62693) bm!4936))

(declare-fun m!56239 () Bool)

(assert (=> bm!4936 m!56239))

(assert (=> b!62694 m!55803))

(assert (=> b!62694 m!55803))

(assert (=> b!62694 m!55843))

(assert (=> b!62692 m!55803))

(declare-fun m!56241 () Bool)

(assert (=> b!62692 m!56241))

(declare-fun m!56243 () Bool)

(assert (=> b!62692 m!56243))

(assert (=> b!62692 m!55803))

(declare-fun m!56245 () Bool)

(assert (=> b!62692 m!56245))

(assert (=> b!62168 d!12701))

(declare-fun d!12703 () Bool)

(declare-fun e!41151 () Bool)

(assert (=> d!12703 e!41151))

(declare-fun res!34389 () Bool)

(assert (=> d!12703 (=> (not res!34389) (not e!41151))))

(declare-fun lt!26206 () ListLongMap!1363)

(assert (=> d!12703 (= res!34389 (contains!690 lt!26206 (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun lt!26204 () List!1447)

(assert (=> d!12703 (= lt!26206 (ListLongMap!1364 lt!26204))))

(declare-fun lt!26205 () Unit!1685)

(declare-fun lt!26207 () Unit!1685)

(assert (=> d!12703 (= lt!26205 lt!26207)))

(assert (=> d!12703 (= (getValueByKey!124 lt!26204 (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) (Some!129 (_2!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(assert (=> d!12703 (= lt!26207 (lemmaContainsTupThenGetReturnValue!44 lt!26204 (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(assert (=> d!12703 (= lt!26204 (insertStrictlySorted!47 (toList!697 call!4896) (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(assert (=> d!12703 (= (+!83 call!4896 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) lt!26206)))

(declare-fun b!62695 () Bool)

(declare-fun res!34388 () Bool)

(assert (=> b!62695 (=> (not res!34388) (not e!41151))))

(assert (=> b!62695 (= res!34388 (= (getValueByKey!124 (toList!697 lt!26206) (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) (Some!129 (_2!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(declare-fun b!62696 () Bool)

(assert (=> b!62696 (= e!41151 (contains!692 (toList!697 lt!26206) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))

(assert (= (and d!12703 res!34389) b!62695))

(assert (= (and b!62695 res!34388) b!62696))

(declare-fun m!56247 () Bool)

(assert (=> d!12703 m!56247))

(declare-fun m!56249 () Bool)

(assert (=> d!12703 m!56249))

(declare-fun m!56251 () Bool)

(assert (=> d!12703 m!56251))

(declare-fun m!56253 () Bool)

(assert (=> d!12703 m!56253))

(declare-fun m!56255 () Bool)

(assert (=> b!62695 m!56255))

(declare-fun m!56257 () Bool)

(assert (=> b!62696 m!56257))

(assert (=> b!62381 d!12703))

(declare-fun b!62731 () Bool)

(declare-fun e!41169 () Unit!1685)

(declare-fun Unit!1710 () Unit!1685)

(assert (=> b!62731 (= e!41169 Unit!1710)))

(declare-fun b!62732 () Bool)

(declare-fun e!41174 () Bool)

(declare-fun lt!26293 () SeekEntryResult!232)

(assert (=> b!62732 (= e!41174 ((_ is Undefined!232) lt!26293))))

(declare-fun b!62733 () Bool)

(declare-fun res!34412 () Bool)

(declare-fun e!41173 () Bool)

(assert (=> b!62733 (=> (not res!34412) (not e!41173))))

(declare-fun call!4951 () Bool)

(assert (=> b!62733 (= res!34412 call!4951)))

(declare-fun e!41170 () Bool)

(assert (=> b!62733 (= e!41170 e!41173)))

(declare-fun call!4948 () SeekEntryResult!232)

(declare-fun bm!4945 () Bool)

(assert (=> bm!4945 (= call!4948 (seekEntryOrOpen!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (_keys!3718 newMap!16) (mask!5992 newMap!16)))))

(declare-fun b!62735 () Bool)

(declare-fun res!34411 () Bool)

(declare-fun e!41175 () Bool)

(assert (=> b!62735 (=> (not res!34411) (not e!41175))))

(declare-fun lt!26297 () tuple2!2050)

(assert (=> b!62735 (= res!34411 (valid!267 (_2!1036 lt!26297)))))

(declare-fun b!62736 () Bool)

(declare-fun e!41171 () Unit!1685)

(declare-fun Unit!1711 () Unit!1685)

(assert (=> b!62736 (= e!41171 Unit!1711)))

(declare-fun lt!26270 () Unit!1685)

(assert (=> b!62736 (= lt!26270 (lemmaInListMapThenSeekEntryOrOpenFindsIt!17 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26276 () SeekEntryResult!232)

(assert (=> b!62736 (= lt!26276 call!4948)))

(declare-fun res!34409 () Bool)

(assert (=> b!62736 (= res!34409 ((_ is Found!232) lt!26276))))

(declare-fun e!41168 () Bool)

(assert (=> b!62736 (=> (not res!34409) (not e!41168))))

(assert (=> b!62736 e!41168))

(declare-fun lt!26291 () Unit!1685)

(assert (=> b!62736 (= lt!26291 lt!26270)))

(assert (=> b!62736 false))

(declare-fun b!62737 () Bool)

(declare-fun lt!26285 () Unit!1685)

(assert (=> b!62737 (= e!41171 lt!26285)))

(assert (=> b!62737 (= lt!26285 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!17 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (defaultEntry!2087 newMap!16)))))

(assert (=> b!62737 (= lt!26293 call!4948)))

(declare-fun c!8384 () Bool)

(assert (=> b!62737 (= c!8384 ((_ is MissingZero!232) lt!26293))))

(assert (=> b!62737 e!41170))

(declare-fun b!62738 () Bool)

(declare-fun res!34410 () Bool)

(assert (=> b!62738 (= res!34410 (= (select (arr!1786 (_keys!3718 newMap!16)) (index!3056 lt!26293)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!41172 () Bool)

(assert (=> b!62738 (=> (not res!34410) (not e!41172))))

(declare-fun bm!4946 () Bool)

(declare-fun call!4949 () Bool)

(assert (=> bm!4946 (= call!4951 call!4949)))

(declare-fun b!62739 () Bool)

(declare-fun Unit!1712 () Unit!1685)

(assert (=> b!62739 (= e!41169 Unit!1712)))

(declare-fun lt!26277 () Unit!1685)

(declare-fun lemmaArrayContainsKeyThenInListMap!7 (array!3737 array!3739 (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 (_ BitVec 64) (_ BitVec 32) Int) Unit!1685)

(assert (=> b!62739 (= lt!26277 (lemmaArrayContainsKeyThenInListMap!7 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(assert (=> b!62739 (contains!690 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355))))

(declare-fun lt!26288 () Unit!1685)

(assert (=> b!62739 (= lt!26288 lt!26277)))

(assert (=> b!62739 false))

(declare-fun bm!4947 () Bool)

(declare-fun call!4950 () Bool)

(assert (=> bm!4947 (= call!4950 (arrayContainsKey!0 (_keys!3718 newMap!16) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun d!12705 () Bool)

(assert (=> d!12705 e!41175))

(declare-fun res!34415 () Bool)

(assert (=> d!12705 (=> (not res!34415) (not e!41175))))

(assert (=> d!12705 (= res!34415 (_1!1036 lt!26297))))

(assert (=> d!12705 (= lt!26297 (tuple2!2051 true (LongMapFixedSize!635 (defaultEntry!2087 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (bvadd (_size!366 newMap!16) #b00000000000000000000000000000001) (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16))) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16))) (_vacant!366 newMap!16))))))

(declare-fun lt!26284 () Unit!1685)

(declare-fun lt!26281 () Unit!1685)

(assert (=> d!12705 (= lt!26284 lt!26281)))

(declare-fun lt!26279 () array!3739)

(declare-fun lt!26269 () array!3737)

(assert (=> d!12705 (contains!690 (getCurrentListMap!393 lt!26269 lt!26279 (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (select (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902))))))

(assert (=> d!12705 (= lt!26281 (lemmaValidKeyInArrayIsInListMap!76 lt!26269 lt!26279 (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (defaultEntry!2087 newMap!16)))))

(assert (=> d!12705 (= lt!26279 (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16))))))

(assert (=> d!12705 (= lt!26269 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16))))))

(declare-fun lt!26271 () Unit!1685)

(declare-fun lt!26286 () Unit!1685)

(assert (=> d!12705 (= lt!26271 lt!26286)))

(declare-fun lt!26283 () array!3737)

(assert (=> d!12705 (= (arrayCountValidKeys!0 lt!26283 (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (bvadd (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lemmaValidKeyAtIImpliesCountKeysIsOne!0 (array!3737 (_ BitVec 32)) Unit!1685)

(assert (=> d!12705 (= lt!26286 (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!26283 (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902))))))

(assert (=> d!12705 (= lt!26283 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16))))))

(declare-fun lt!26268 () Unit!1685)

(declare-fun lt!26295 () Unit!1685)

(assert (=> d!12705 (= lt!26268 lt!26295)))

(declare-fun lt!26290 () array!3737)

(assert (=> d!12705 (arrayContainsKey!0 lt!26290 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(assert (=> d!12705 (= lt!26295 (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!26290 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902))))))

(assert (=> d!12705 (= lt!26290 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16))))))

(declare-fun lt!26292 () Unit!1685)

(declare-fun lt!26287 () Unit!1685)

(assert (=> d!12705 (= lt!26292 lt!26287)))

(assert (=> d!12705 (= (+!83 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!393 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16))) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16))) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lemmaAddValidKeyToArrayThenAddPairToListMap!7 (array!3737 array!3739 (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 (_ BitVec 32) (_ BitVec 64) V!2865 Int) Unit!1685)

(assert (=> d!12705 (= lt!26287 (lemmaAddValidKeyToArrayThenAddPairToListMap!7 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26294 () Unit!1685)

(declare-fun lt!26273 () Unit!1685)

(assert (=> d!12705 (= lt!26294 lt!26273)))

(assert (=> d!12705 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16))) (mask!5992 newMap!16))))

(declare-fun lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 ((_ BitVec 64) array!3737 (_ BitVec 32) (_ BitVec 32)) Unit!1685)

(assert (=> d!12705 (= lt!26273 (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (_keys!3718 newMap!16) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (mask!5992 newMap!16)))))

(declare-fun lt!26289 () Unit!1685)

(declare-fun lt!26275 () Unit!1685)

(assert (=> d!12705 (= lt!26289 lt!26275)))

(assert (=> d!12705 (= (arrayCountValidKeys!0 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16))) #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!3718 newMap!16) #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))) #b00000000000000000000000000000001))))

(declare-fun lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (array!3737 (_ BitVec 32) (_ BitVec 64)) Unit!1685)

(assert (=> d!12705 (= lt!26275 (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!3718 newMap!16) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(declare-fun lt!26280 () Unit!1685)

(declare-fun lt!26278 () Unit!1685)

(assert (=> d!12705 (= lt!26280 lt!26278)))

(declare-fun lt!26272 () (_ BitVec 32))

(declare-fun lt!26274 () List!1446)

(assert (=> d!12705 (arrayNoDuplicates!0 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16))) lt!26272 lt!26274)))

(declare-fun lemmaPutNewValidKeyPreservesNoDuplicate!0 (array!3737 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1446) Unit!1685)

(assert (=> d!12705 (= lt!26278 (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!3718 newMap!16) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) lt!26272 lt!26274))))

(assert (=> d!12705 (= lt!26274 Nil!1443)))

(assert (=> d!12705 (= lt!26272 #b00000000000000000000000000000000)))

(declare-fun lt!26296 () Unit!1685)

(assert (=> d!12705 (= lt!26296 e!41169)))

(declare-fun c!8385 () Bool)

(assert (=> d!12705 (= c!8385 (arrayContainsKey!0 (_keys!3718 newMap!16) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun lt!26282 () Unit!1685)

(assert (=> d!12705 (= lt!26282 e!41171)))

(declare-fun c!8383 () Bool)

(assert (=> d!12705 (= c!8383 (contains!690 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(assert (=> d!12705 (valid!267 newMap!16)))

(assert (=> d!12705 (= (updateHelperNewKey!17 newMap!16 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902))) lt!26297)))

(declare-fun b!62734 () Bool)

(assert (=> b!62734 (= e!41174 e!41172)))

(declare-fun res!34408 () Bool)

(assert (=> b!62734 (= res!34408 call!4951)))

(assert (=> b!62734 (=> (not res!34408) (not e!41172))))

(declare-fun b!62740 () Bool)

(assert (=> b!62740 (= e!41173 (not call!4950))))

(declare-fun b!62741 () Bool)

(declare-fun res!34414 () Bool)

(assert (=> b!62741 (= res!34414 call!4949)))

(assert (=> b!62741 (=> (not res!34414) (not e!41168))))

(declare-fun b!62742 () Bool)

(declare-fun res!34413 () Bool)

(assert (=> b!62742 (=> (not res!34413) (not e!41173))))

(assert (=> b!62742 (= res!34413 (= (select (arr!1786 (_keys!3718 newMap!16)) (index!3053 lt!26293)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4948 () Bool)

(assert (=> bm!4948 (= call!4949 (inRange!0 (ite c!8383 (index!3054 lt!26276) (ite c!8384 (index!3053 lt!26293) (index!3056 lt!26293))) (mask!5992 newMap!16)))))

(declare-fun b!62743 () Bool)

(declare-fun res!34416 () Bool)

(assert (=> b!62743 (=> (not res!34416) (not e!41175))))

(assert (=> b!62743 (= res!34416 (contains!690 (map!1113 (_2!1036 lt!26297)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(declare-fun b!62744 () Bool)

(declare-fun c!8382 () Bool)

(assert (=> b!62744 (= c!8382 ((_ is MissingVacant!232) lt!26293))))

(assert (=> b!62744 (= e!41170 e!41174)))

(declare-fun b!62745 () Bool)

(assert (=> b!62745 (= e!41172 (not call!4950))))

(declare-fun b!62746 () Bool)

(assert (=> b!62746 (= e!41168 (= (select (arr!1786 (_keys!3718 newMap!16)) (index!3054 lt!26276)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(declare-fun b!62747 () Bool)

(assert (=> b!62747 (= e!41175 (= (map!1113 (_2!1036 lt!26297)) (+!83 (map!1113 newMap!16) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!12705 c!8383) b!62736))

(assert (= (and d!12705 (not c!8383)) b!62737))

(assert (= (and b!62736 res!34409) b!62741))

(assert (= (and b!62741 res!34414) b!62746))

(assert (= (and b!62737 c!8384) b!62733))

(assert (= (and b!62737 (not c!8384)) b!62744))

(assert (= (and b!62733 res!34412) b!62742))

(assert (= (and b!62742 res!34413) b!62740))

(assert (= (and b!62744 c!8382) b!62734))

(assert (= (and b!62744 (not c!8382)) b!62732))

(assert (= (and b!62734 res!34408) b!62738))

(assert (= (and b!62738 res!34410) b!62745))

(assert (= (or b!62733 b!62734) bm!4946))

(assert (= (or b!62740 b!62745) bm!4947))

(assert (= (or b!62741 bm!4946) bm!4948))

(assert (= (or b!62736 b!62737) bm!4945))

(assert (= (and d!12705 c!8385) b!62739))

(assert (= (and d!12705 (not c!8385)) b!62731))

(assert (= (and d!12705 res!34415) b!62735))

(assert (= (and b!62735 res!34411) b!62743))

(assert (= (and b!62743 res!34416) b!62747))

(assert (=> bm!4945 m!55481))

(assert (=> bm!4945 m!55631))

(assert (=> bm!4947 m!55481))

(assert (=> bm!4947 m!55641))

(declare-fun m!56259 () Bool)

(assert (=> b!62738 m!56259))

(assert (=> d!12705 m!55481))

(declare-fun m!56261 () Bool)

(assert (=> d!12705 m!56261))

(assert (=> d!12705 m!55647))

(assert (=> d!12705 m!56043))

(assert (=> d!12705 m!55481))

(declare-fun m!56263 () Bool)

(assert (=> d!12705 m!56263))

(assert (=> d!12705 m!55647))

(assert (=> d!12705 m!55481))

(assert (=> d!12705 m!55649))

(assert (=> d!12705 m!55481))

(declare-fun m!56265 () Bool)

(assert (=> d!12705 m!56265))

(assert (=> d!12705 m!55477))

(declare-fun m!56267 () Bool)

(assert (=> d!12705 m!56267))

(declare-fun m!56269 () Bool)

(assert (=> d!12705 m!56269))

(declare-fun m!56271 () Bool)

(assert (=> d!12705 m!56271))

(assert (=> d!12705 m!55607))

(declare-fun m!56273 () Bool)

(assert (=> d!12705 m!56273))

(declare-fun m!56275 () Bool)

(assert (=> d!12705 m!56275))

(assert (=> d!12705 m!55481))

(declare-fun m!56277 () Bool)

(assert (=> d!12705 m!56277))

(declare-fun m!56279 () Bool)

(assert (=> d!12705 m!56279))

(assert (=> d!12705 m!55481))

(assert (=> d!12705 m!55641))

(declare-fun m!56281 () Bool)

(assert (=> d!12705 m!56281))

(declare-fun m!56283 () Bool)

(assert (=> d!12705 m!56283))

(declare-fun m!56285 () Bool)

(assert (=> d!12705 m!56285))

(declare-fun m!56287 () Bool)

(assert (=> d!12705 m!56287))

(assert (=> d!12705 m!55481))

(declare-fun m!56289 () Bool)

(assert (=> d!12705 m!56289))

(assert (=> d!12705 m!56287))

(assert (=> d!12705 m!56283))

(declare-fun m!56291 () Bool)

(assert (=> d!12705 m!56291))

(assert (=> d!12705 m!55481))

(assert (=> d!12705 m!55507))

(declare-fun m!56293 () Bool)

(assert (=> d!12705 m!56293))

(assert (=> d!12705 m!55647))

(declare-fun m!56295 () Bool)

(assert (=> d!12705 m!56295))

(declare-fun m!56297 () Bool)

(assert (=> b!62747 m!56297))

(assert (=> b!62747 m!55483))

(assert (=> b!62747 m!55483))

(declare-fun m!56299 () Bool)

(assert (=> b!62747 m!56299))

(declare-fun m!56301 () Bool)

(assert (=> b!62735 m!56301))

(assert (=> b!62737 m!55481))

(assert (=> b!62737 m!55623))

(assert (=> b!62743 m!56297))

(assert (=> b!62743 m!56297))

(assert (=> b!62743 m!55481))

(declare-fun m!56303 () Bool)

(assert (=> b!62743 m!56303))

(declare-fun m!56305 () Bool)

(assert (=> b!62746 m!56305))

(assert (=> b!62736 m!55481))

(assert (=> b!62736 m!55655))

(assert (=> b!62739 m!55481))

(declare-fun m!56307 () Bool)

(assert (=> b!62739 m!56307))

(assert (=> b!62739 m!55647))

(assert (=> b!62739 m!55647))

(assert (=> b!62739 m!55481))

(assert (=> b!62739 m!55649))

(declare-fun m!56309 () Bool)

(assert (=> bm!4948 m!56309))

(declare-fun m!56311 () Bool)

(assert (=> b!62742 m!56311))

(assert (=> bm!4870 d!12705))

(declare-fun condMapEmpty!2955 () Bool)

(declare-fun mapDefault!2955 () ValueCell!863)

(assert (=> mapNonEmpty!2953 (= condMapEmpty!2955 (= mapRest!2953 ((as const (Array (_ BitVec 32) ValueCell!863)) mapDefault!2955)))))

(declare-fun e!41177 () Bool)

(declare-fun mapRes!2955 () Bool)

(assert (=> mapNonEmpty!2953 (= tp!8137 (and e!41177 mapRes!2955))))

(declare-fun b!62748 () Bool)

(declare-fun e!41176 () Bool)

(assert (=> b!62748 (= e!41176 tp_is_empty!2413)))

(declare-fun b!62749 () Bool)

(assert (=> b!62749 (= e!41177 tp_is_empty!2413)))

(declare-fun mapIsEmpty!2955 () Bool)

(assert (=> mapIsEmpty!2955 mapRes!2955))

(declare-fun mapNonEmpty!2955 () Bool)

(declare-fun tp!8139 () Bool)

(assert (=> mapNonEmpty!2955 (= mapRes!2955 (and tp!8139 e!41176))))

(declare-fun mapKey!2955 () (_ BitVec 32))

(declare-fun mapRest!2955 () (Array (_ BitVec 32) ValueCell!863))

(declare-fun mapValue!2955 () ValueCell!863)

(assert (=> mapNonEmpty!2955 (= mapRest!2953 (store mapRest!2955 mapKey!2955 mapValue!2955))))

(assert (= (and mapNonEmpty!2953 condMapEmpty!2955) mapIsEmpty!2955))

(assert (= (and mapNonEmpty!2953 (not condMapEmpty!2955)) mapNonEmpty!2955))

(assert (= (and mapNonEmpty!2955 ((_ is ValueCellFull!863) mapValue!2955)) b!62748))

(assert (= (and mapNonEmpty!2953 ((_ is ValueCellFull!863) mapDefault!2955)) b!62749))

(declare-fun m!56313 () Bool)

(assert (=> mapNonEmpty!2955 m!56313))

(declare-fun condMapEmpty!2956 () Bool)

(declare-fun mapDefault!2956 () ValueCell!863)

(assert (=> mapNonEmpty!2954 (= condMapEmpty!2956 (= mapRest!2954 ((as const (Array (_ BitVec 32) ValueCell!863)) mapDefault!2956)))))

(declare-fun e!41179 () Bool)

(declare-fun mapRes!2956 () Bool)

(assert (=> mapNonEmpty!2954 (= tp!8138 (and e!41179 mapRes!2956))))

(declare-fun b!62750 () Bool)

(declare-fun e!41178 () Bool)

(assert (=> b!62750 (= e!41178 tp_is_empty!2413)))

(declare-fun b!62751 () Bool)

(assert (=> b!62751 (= e!41179 tp_is_empty!2413)))

(declare-fun mapIsEmpty!2956 () Bool)

(assert (=> mapIsEmpty!2956 mapRes!2956))

(declare-fun mapNonEmpty!2956 () Bool)

(declare-fun tp!8140 () Bool)

(assert (=> mapNonEmpty!2956 (= mapRes!2956 (and tp!8140 e!41178))))

(declare-fun mapKey!2956 () (_ BitVec 32))

(declare-fun mapRest!2956 () (Array (_ BitVec 32) ValueCell!863))

(declare-fun mapValue!2956 () ValueCell!863)

(assert (=> mapNonEmpty!2956 (= mapRest!2954 (store mapRest!2956 mapKey!2956 mapValue!2956))))

(assert (= (and mapNonEmpty!2954 condMapEmpty!2956) mapIsEmpty!2956))

(assert (= (and mapNonEmpty!2954 (not condMapEmpty!2956)) mapNonEmpty!2956))

(assert (= (and mapNonEmpty!2956 ((_ is ValueCellFull!863) mapValue!2956)) b!62750))

(assert (= (and mapNonEmpty!2954 ((_ is ValueCellFull!863) mapDefault!2956)) b!62751))

(declare-fun m!56315 () Bool)

(assert (=> mapNonEmpty!2956 m!56315))

(declare-fun b_lambda!2787 () Bool)

(assert (= b_lambda!2777 (or (and b!62032 b_free!1993) (and b!62029 b_free!1995 (= (defaultEntry!2087 newMap!16) (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))))) b_lambda!2787)))

(declare-fun b_lambda!2789 () Bool)

(assert (= b_lambda!2779 (or (and b!62032 b_free!1993) (and b!62029 b_free!1995 (= (defaultEntry!2087 newMap!16) (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))))) b_lambda!2789)))

(declare-fun b_lambda!2791 () Bool)

(assert (= b_lambda!2785 (or (and b!62032 b_free!1993 (= (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) (defaultEntry!2087 newMap!16))) (and b!62029 b_free!1995) b_lambda!2791)))

(declare-fun b_lambda!2793 () Bool)

(assert (= b_lambda!2781 (or (and b!62032 b_free!1993 (= (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) (defaultEntry!2087 newMap!16))) (and b!62029 b_free!1995) b_lambda!2793)))

(declare-fun b_lambda!2795 () Bool)

(assert (= b_lambda!2783 (or (and b!62032 b_free!1993 (= (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) (defaultEntry!2087 newMap!16))) (and b!62029 b_free!1995) b_lambda!2795)))

(check-sat (not b!62631) (not b!62516) (not d!12675) (not d!12619) (not b!62479) (not b!62572) (not b!62588) (not d!12661) (not b!62576) (not d!12681) (not bm!4928) (not d!12703) (not b!62474) (not bm!4945) (not d!12655) (not mapNonEmpty!2955) (not bm!4925) (not b!62559) tp_is_empty!2413 (not d!12641) (not d!12685) (not b!62628) (not b!62509) (not bm!4947) (not b!62538) (not b!62405) (not b!62597) (not b!62676) (not b!62600) (not b!62407) (not b!62543) (not b!62696) (not d!12589) (not b!62535) (not b!62524) (not d!12665) (not b!62441) (not d!12663) (not b_lambda!2795) (not d!12587) (not b!62486) (not bm!4933) (not b!62473) (not d!12683) (not bm!4916) (not b!62673) (not d!12581) (not b!62416) (not d!12649) (not d!12651) (not bm!4914) (not d!12639) (not b!62739) (not d!12673) (not b!62472) (not bm!4921) (not b!62635) (not d!12677) (not b!62510) (not b!62445) (not b!62640) (not b!62552) (not b!62542) (not b!62735) (not b!62695) (not d!12611) (not b!62601) (not b!62413) (not d!12601) (not b!62606) (not b!62747) (not b!62591) (not d!12689) (not b!62616) (not mapNonEmpty!2956) (not b!62743) (not b!62617) (not b!62476) (not bm!4907) (not d!12693) (not d!12607) (not d!12623) (not b!62624) (not b!62545) (not d!12669) (not b!62644) (not b!62505) (not bm!4931) (not b!62549) (not b!62581) (not d!12659) (not b_lambda!2793) (not bm!4936) (not d!12695) (not d!12605) (not bm!4926) (not d!12671) (not b!62531) (not d!12633) (not b!62470) (not b!62629) (not b!62658) (not b_lambda!2789) (not b!62603) (not bm!4912) (not b!62638) (not b!62519) (not d!12647) (not d!12631) (not bm!4909) (not b!62574) (not b!62475) (not b_lambda!2771) (not b!62443) (not b!62584) (not d!12597) (not d!12635) (not d!12667) (not b!62587) (not b!62558) (not bm!4918) (not d!12583) (not b_next!1995) (not b!62736) (not b!62504) (not d!12609) (not b!62592) (not b!62533) (not bm!4930) (not b!62605) (not d!12579) (not bm!4904) (not d!12615) (not b!62675) (not b!62502) (not b!62604) (not b!62618) (not b!62532) (not b!62526) (not b!62589) b_and!3827 (not bm!4903) (not b!62406) (not d!12679) (not d!12585) (not b_next!1993) (not b!62620) (not b_lambda!2775) (not b!62694) (not d!12625) (not b!62585) (not b!62612) (not bm!4911) (not b!62414) (not bm!4919) b_and!3825 (not b!62471) (not b!62442) (not b!62554) (not b!62498) (not d!12705) (not b!62737) (not b!62557) (not d!12595) (not b!62537) (not b!62643) (not d!12643) (not b!62672) (not d!12657) (not b!62623) (not b_lambda!2791) (not bm!4922) (not b!62692) (not b!62521) (not d!12653) (not b_lambda!2787) (not b!62607) (not bm!4948) (not b!62682) (not d!12613) (not b!62613) (not b!62512) (not b!62590))
(check-sat b_and!3825 b_and!3827 (not b_next!1993) (not b_next!1995))
(get-model)

(declare-fun d!12707 () Bool)

(assert (=> d!12707 (isDefined!78 (getValueByKey!124 (toList!697 lt!25977) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun lt!26298 () Unit!1685)

(assert (=> d!12707 (= lt!26298 (choose!339 (toList!697 lt!25977) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!41180 () Bool)

(assert (=> d!12707 e!41180))

(declare-fun res!34417 () Bool)

(assert (=> d!12707 (=> (not res!34417) (not e!41180))))

(assert (=> d!12707 (= res!34417 (isStrictlySorted!281 (toList!697 lt!25977)))))

(assert (=> d!12707 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 lt!25977) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!26298)))

(declare-fun b!62752 () Bool)

(assert (=> b!62752 (= e!41180 (containsKey!128 (toList!697 lt!25977) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!12707 res!34417) b!62752))

(assert (=> d!12707 m!55685))

(assert (=> d!12707 m!55775))

(assert (=> d!12707 m!55775))

(assert (=> d!12707 m!55777))

(assert (=> d!12707 m!55685))

(declare-fun m!56317 () Bool)

(assert (=> d!12707 m!56317))

(declare-fun m!56319 () Bool)

(assert (=> d!12707 m!56319))

(assert (=> b!62752 m!55685))

(assert (=> b!62752 m!55771))

(assert (=> b!62414 d!12707))

(declare-fun d!12709 () Bool)

(assert (=> d!12709 (= (isDefined!78 (getValueByKey!124 (toList!697 lt!25977) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (not (isEmpty!304 (getValueByKey!124 (toList!697 lt!25977) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun bs!2723 () Bool)

(assert (= bs!2723 d!12709))

(assert (=> bs!2723 m!55775))

(declare-fun m!56321 () Bool)

(assert (=> bs!2723 m!56321))

(assert (=> b!62414 d!12709))

(declare-fun d!12711 () Bool)

(declare-fun c!8386 () Bool)

(assert (=> d!12711 (= c!8386 (and ((_ is Cons!1443) (toList!697 lt!25977)) (= (_1!1037 (h!2026 (toList!697 lt!25977))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun e!41181 () Option!130)

(assert (=> d!12711 (= (getValueByKey!124 (toList!697 lt!25977) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!41181)))

(declare-fun b!62753 () Bool)

(assert (=> b!62753 (= e!41181 (Some!129 (_2!1037 (h!2026 (toList!697 lt!25977)))))))

(declare-fun b!62756 () Bool)

(declare-fun e!41182 () Option!130)

(assert (=> b!62756 (= e!41182 None!128)))

(declare-fun b!62754 () Bool)

(assert (=> b!62754 (= e!41181 e!41182)))

(declare-fun c!8387 () Bool)

(assert (=> b!62754 (= c!8387 (and ((_ is Cons!1443) (toList!697 lt!25977)) (not (= (_1!1037 (h!2026 (toList!697 lt!25977))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun b!62755 () Bool)

(assert (=> b!62755 (= e!41182 (getValueByKey!124 (t!4832 (toList!697 lt!25977)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!12711 c!8386) b!62753))

(assert (= (and d!12711 (not c!8386)) b!62754))

(assert (= (and b!62754 c!8387) b!62755))

(assert (= (and b!62754 (not c!8387)) b!62756))

(assert (=> b!62755 m!55685))

(declare-fun m!56323 () Bool)

(assert (=> b!62755 m!56323))

(assert (=> b!62414 d!12711))

(declare-fun d!12713 () Bool)

(assert (=> d!12713 (contains!690 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355))))

(declare-fun lt!26301 () Unit!1685)

(declare-fun choose!346 (array!3737 array!3739 (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 (_ BitVec 64) (_ BitVec 32) Int) Unit!1685)

(assert (=> d!12713 (= lt!26301 (choose!346 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(assert (=> d!12713 (validMask!0 (mask!5992 newMap!16))))

(assert (=> d!12713 (= (lemmaArrayContainsKeyThenInListMap!7 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) lt!26301)))

(declare-fun bs!2724 () Bool)

(assert (= bs!2724 d!12713))

(assert (=> bs!2724 m!55647))

(assert (=> bs!2724 m!55647))

(assert (=> bs!2724 m!55481))

(assert (=> bs!2724 m!55649))

(assert (=> bs!2724 m!55481))

(declare-fun m!56325 () Bool)

(assert (=> bs!2724 m!56325))

(assert (=> bs!2724 m!55783))

(assert (=> b!62739 d!12713))

(assert (=> b!62739 d!12651))

(assert (=> b!62739 d!12619))

(declare-fun d!12715 () Bool)

(assert (=> d!12715 (= (content!67 Nil!1443) ((as const (Array (_ BitVec 64) Bool)) false))))

(assert (=> d!12581 d!12715))

(declare-fun d!12717 () Bool)

(assert (=> d!12717 (= (apply!68 (+!83 lt!25981 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))) lt!25974) (apply!68 lt!25981 lt!25974))))

(assert (=> d!12717 true))

(declare-fun _$34!775 () Unit!1685)

(assert (=> d!12717 (= (choose!344 lt!25981 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))) lt!25974) _$34!775)))

(declare-fun bs!2725 () Bool)

(assert (= bs!2725 d!12717))

(assert (=> bs!2725 m!55735))

(assert (=> bs!2725 m!55735))

(assert (=> bs!2725 m!55749))

(assert (=> bs!2725 m!55727))

(assert (=> d!12659 d!12717))

(declare-fun d!12719 () Bool)

(declare-fun e!41183 () Bool)

(assert (=> d!12719 e!41183))

(declare-fun res!34418 () Bool)

(assert (=> d!12719 (=> res!34418 e!41183)))

(declare-fun lt!26305 () Bool)

(assert (=> d!12719 (= res!34418 (not lt!26305))))

(declare-fun lt!26303 () Bool)

(assert (=> d!12719 (= lt!26305 lt!26303)))

(declare-fun lt!26304 () Unit!1685)

(declare-fun e!41184 () Unit!1685)

(assert (=> d!12719 (= lt!26304 e!41184)))

(declare-fun c!8388 () Bool)

(assert (=> d!12719 (= c!8388 lt!26303)))

(assert (=> d!12719 (= lt!26303 (containsKey!128 (toList!697 lt!25981) lt!25974))))

(assert (=> d!12719 (= (contains!690 lt!25981 lt!25974) lt!26305)))

(declare-fun b!62758 () Bool)

(declare-fun lt!26302 () Unit!1685)

(assert (=> b!62758 (= e!41184 lt!26302)))

(assert (=> b!62758 (= lt!26302 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 lt!25981) lt!25974))))

(assert (=> b!62758 (isDefined!78 (getValueByKey!124 (toList!697 lt!25981) lt!25974))))

(declare-fun b!62759 () Bool)

(declare-fun Unit!1713 () Unit!1685)

(assert (=> b!62759 (= e!41184 Unit!1713)))

(declare-fun b!62760 () Bool)

(assert (=> b!62760 (= e!41183 (isDefined!78 (getValueByKey!124 (toList!697 lt!25981) lt!25974)))))

(assert (= (and d!12719 c!8388) b!62758))

(assert (= (and d!12719 (not c!8388)) b!62759))

(assert (= (and d!12719 (not res!34418)) b!62760))

(declare-fun m!56327 () Bool)

(assert (=> d!12719 m!56327))

(declare-fun m!56329 () Bool)

(assert (=> b!62758 m!56329))

(assert (=> b!62758 m!56127))

(assert (=> b!62758 m!56127))

(declare-fun m!56331 () Bool)

(assert (=> b!62758 m!56331))

(assert (=> b!62760 m!56127))

(assert (=> b!62760 m!56127))

(assert (=> b!62760 m!56331))

(assert (=> d!12659 d!12719))

(assert (=> d!12659 d!12675))

(assert (=> d!12659 d!12669))

(assert (=> d!12659 d!12673))

(assert (=> b!62736 d!12633))

(declare-fun b!62761 () Bool)

(declare-fun e!41185 () Bool)

(declare-fun call!4952 () Bool)

(assert (=> b!62761 (= e!41185 call!4952)))

(declare-fun bm!4949 () Bool)

(assert (=> bm!4949 (= call!4952 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (_keys!3718 newMap!16) (mask!5992 newMap!16)))))

(declare-fun b!62763 () Bool)

(declare-fun e!41186 () Bool)

(assert (=> b!62763 (= e!41186 call!4952)))

(declare-fun b!62764 () Bool)

(declare-fun e!41187 () Bool)

(assert (=> b!62764 (= e!41187 e!41186)))

(declare-fun c!8389 () Bool)

(assert (=> b!62764 (= c!8389 (validKeyInArray!0 (select (arr!1786 (_keys!3718 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!62762 () Bool)

(assert (=> b!62762 (= e!41186 e!41185)))

(declare-fun lt!26307 () (_ BitVec 64))

(assert (=> b!62762 (= lt!26307 (select (arr!1786 (_keys!3718 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(declare-fun lt!26308 () Unit!1685)

(assert (=> b!62762 (= lt!26308 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3718 newMap!16) lt!26307 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (=> b!62762 (arrayContainsKey!0 (_keys!3718 newMap!16) lt!26307 #b00000000000000000000000000000000)))

(declare-fun lt!26306 () Unit!1685)

(assert (=> b!62762 (= lt!26306 lt!26308)))

(declare-fun res!34420 () Bool)

(assert (=> b!62762 (= res!34420 (= (seekEntryOrOpen!0 (select (arr!1786 (_keys!3718 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (_keys!3718 newMap!16) (mask!5992 newMap!16)) (Found!232 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> b!62762 (=> (not res!34420) (not e!41185))))

(declare-fun d!12721 () Bool)

(declare-fun res!34419 () Bool)

(assert (=> d!12721 (=> res!34419 e!41187)))

(assert (=> d!12721 (= res!34419 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2019 (_keys!3718 newMap!16))))))

(assert (=> d!12721 (= (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3718 newMap!16) (mask!5992 newMap!16)) e!41187)))

(assert (= (and d!12721 (not res!34419)) b!62764))

(assert (= (and b!62764 c!8389) b!62762))

(assert (= (and b!62764 (not c!8389)) b!62763))

(assert (= (and b!62762 res!34420) b!62761))

(assert (= (or b!62761 b!62763) bm!4949))

(declare-fun m!56333 () Bool)

(assert (=> bm!4949 m!56333))

(declare-fun m!56335 () Bool)

(assert (=> b!62764 m!56335))

(assert (=> b!62764 m!56335))

(declare-fun m!56337 () Bool)

(assert (=> b!62764 m!56337))

(assert (=> b!62762 m!56335))

(declare-fun m!56339 () Bool)

(assert (=> b!62762 m!56339))

(declare-fun m!56341 () Bool)

(assert (=> b!62762 m!56341))

(assert (=> b!62762 m!56335))

(declare-fun m!56343 () Bool)

(assert (=> b!62762 m!56343))

(assert (=> bm!4936 d!12721))

(declare-fun d!12723 () Bool)

(declare-fun c!8390 () Bool)

(assert (=> d!12723 (= c!8390 (and ((_ is Cons!1443) (toList!697 lt!26206)) (= (_1!1037 (h!2026 (toList!697 lt!26206))) (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(declare-fun e!41188 () Option!130)

(assert (=> d!12723 (= (getValueByKey!124 (toList!697 lt!26206) (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) e!41188)))

(declare-fun b!62765 () Bool)

(assert (=> b!62765 (= e!41188 (Some!129 (_2!1037 (h!2026 (toList!697 lt!26206)))))))

(declare-fun b!62768 () Bool)

(declare-fun e!41189 () Option!130)

(assert (=> b!62768 (= e!41189 None!128)))

(declare-fun b!62766 () Bool)

(assert (=> b!62766 (= e!41188 e!41189)))

(declare-fun c!8391 () Bool)

(assert (=> b!62766 (= c!8391 (and ((_ is Cons!1443) (toList!697 lt!26206)) (not (= (_1!1037 (h!2026 (toList!697 lt!26206))) (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))))

(declare-fun b!62767 () Bool)

(assert (=> b!62767 (= e!41189 (getValueByKey!124 (t!4832 (toList!697 lt!26206)) (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(assert (= (and d!12723 c!8390) b!62765))

(assert (= (and d!12723 (not c!8390)) b!62766))

(assert (= (and b!62766 c!8391) b!62767))

(assert (= (and b!62766 (not c!8391)) b!62768))

(declare-fun m!56345 () Bool)

(assert (=> b!62767 m!56345))

(assert (=> b!62695 d!12723))

(declare-fun d!12725 () Bool)

(declare-fun e!41190 () Bool)

(assert (=> d!12725 e!41190))

(declare-fun res!34421 () Bool)

(assert (=> d!12725 (=> res!34421 e!41190)))

(declare-fun lt!26312 () Bool)

(assert (=> d!12725 (= res!34421 (not lt!26312))))

(declare-fun lt!26310 () Bool)

(assert (=> d!12725 (= lt!26312 lt!26310)))

(declare-fun lt!26311 () Unit!1685)

(declare-fun e!41191 () Unit!1685)

(assert (=> d!12725 (= lt!26311 e!41191)))

(declare-fun c!8392 () Bool)

(assert (=> d!12725 (= c!8392 lt!26310)))

(assert (=> d!12725 (= lt!26310 (containsKey!128 (toList!697 lt!26039) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12725 (= (contains!690 lt!26039 #b1000000000000000000000000000000000000000000000000000000000000000) lt!26312)))

(declare-fun b!62769 () Bool)

(declare-fun lt!26309 () Unit!1685)

(assert (=> b!62769 (= e!41191 lt!26309)))

(assert (=> b!62769 (= lt!26309 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 lt!26039) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62769 (isDefined!78 (getValueByKey!124 (toList!697 lt!26039) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62770 () Bool)

(declare-fun Unit!1714 () Unit!1685)

(assert (=> b!62770 (= e!41191 Unit!1714)))

(declare-fun b!62771 () Bool)

(assert (=> b!62771 (= e!41190 (isDefined!78 (getValueByKey!124 (toList!697 lt!26039) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12725 c!8392) b!62769))

(assert (= (and d!12725 (not c!8392)) b!62770))

(assert (= (and d!12725 (not res!34421)) b!62771))

(declare-fun m!56347 () Bool)

(assert (=> d!12725 m!56347))

(declare-fun m!56349 () Bool)

(assert (=> b!62769 m!56349))

(declare-fun m!56351 () Bool)

(assert (=> b!62769 m!56351))

(assert (=> b!62769 m!56351))

(declare-fun m!56353 () Bool)

(assert (=> b!62769 m!56353))

(assert (=> b!62771 m!56351))

(assert (=> b!62771 m!56351))

(assert (=> b!62771 m!56353))

(assert (=> bm!4912 d!12725))

(assert (=> d!12635 d!12565))

(declare-fun d!12727 () Bool)

(assert (=> d!12727 (= (isDefined!78 (getValueByKey!124 (toList!697 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355))) (not (isEmpty!304 (getValueByKey!124 (toList!697 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))))

(declare-fun bs!2726 () Bool)

(assert (= bs!2726 d!12727))

(assert (=> bs!2726 m!56051))

(declare-fun m!56355 () Bool)

(assert (=> bs!2726 m!56355))

(assert (=> b!62603 d!12727))

(declare-fun c!8393 () Bool)

(declare-fun d!12729 () Bool)

(assert (=> d!12729 (= c!8393 (and ((_ is Cons!1443) (toList!697 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))) (= (_1!1037 (h!2026 (toList!697 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355))))))

(declare-fun e!41192 () Option!130)

(assert (=> d!12729 (= (getValueByKey!124 (toList!697 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) e!41192)))

(declare-fun b!62772 () Bool)

(assert (=> b!62772 (= e!41192 (Some!129 (_2!1037 (h!2026 (toList!697 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))))))

(declare-fun b!62775 () Bool)

(declare-fun e!41193 () Option!130)

(assert (=> b!62775 (= e!41193 None!128)))

(declare-fun b!62773 () Bool)

(assert (=> b!62773 (= e!41192 e!41193)))

(declare-fun c!8394 () Bool)

(assert (=> b!62773 (= c!8394 (and ((_ is Cons!1443) (toList!697 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))) (not (= (_1!1037 (h!2026 (toList!697 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))))

(declare-fun b!62774 () Bool)

(assert (=> b!62774 (= e!41193 (getValueByKey!124 (t!4832 (toList!697 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(assert (= (and d!12729 c!8393) b!62772))

(assert (= (and d!12729 (not c!8393)) b!62773))

(assert (= (and b!62773 c!8394) b!62774))

(assert (= (and b!62773 (not c!8394)) b!62775))

(assert (=> b!62774 m!55481))

(declare-fun m!56357 () Bool)

(assert (=> b!62774 m!56357))

(assert (=> b!62603 d!12729))

(declare-fun d!12731 () Bool)

(declare-fun res!34422 () Bool)

(declare-fun e!41194 () Bool)

(assert (=> d!12731 (=> (not res!34422) (not e!41194))))

(assert (=> d!12731 (= res!34422 (validMask!0 (mask!5992 (_2!1036 lt!25898))))))

(assert (=> d!12731 (= (simpleValid!44 (_2!1036 lt!25898)) e!41194)))

(declare-fun b!62778 () Bool)

(declare-fun res!34425 () Bool)

(assert (=> b!62778 (=> (not res!34425) (not e!41194))))

(assert (=> b!62778 (= res!34425 (= (size!2025 (_2!1036 lt!25898)) (bvadd (_size!366 (_2!1036 lt!25898)) (bvsdiv (bvadd (extraKeys!1966 (_2!1036 lt!25898)) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!62776 () Bool)

(declare-fun res!34424 () Bool)

(assert (=> b!62776 (=> (not res!34424) (not e!41194))))

(assert (=> b!62776 (= res!34424 (and (= (size!2020 (_values!2070 (_2!1036 lt!25898))) (bvadd (mask!5992 (_2!1036 lt!25898)) #b00000000000000000000000000000001)) (= (size!2019 (_keys!3718 (_2!1036 lt!25898))) (size!2020 (_values!2070 (_2!1036 lt!25898)))) (bvsge (_size!366 (_2!1036 lt!25898)) #b00000000000000000000000000000000) (bvsle (_size!366 (_2!1036 lt!25898)) (bvadd (mask!5992 (_2!1036 lt!25898)) #b00000000000000000000000000000001))))))

(declare-fun b!62779 () Bool)

(assert (=> b!62779 (= e!41194 (and (bvsge (extraKeys!1966 (_2!1036 lt!25898)) #b00000000000000000000000000000000) (bvsle (extraKeys!1966 (_2!1036 lt!25898)) #b00000000000000000000000000000011) (bvsge (_vacant!366 (_2!1036 lt!25898)) #b00000000000000000000000000000000)))))

(declare-fun b!62777 () Bool)

(declare-fun res!34423 () Bool)

(assert (=> b!62777 (=> (not res!34423) (not e!41194))))

(assert (=> b!62777 (= res!34423 (bvsge (size!2025 (_2!1036 lt!25898)) (_size!366 (_2!1036 lt!25898))))))

(assert (= (and d!12731 res!34422) b!62776))

(assert (= (and b!62776 res!34424) b!62777))

(assert (= (and b!62777 res!34423) b!62778))

(assert (= (and b!62778 res!34425) b!62779))

(declare-fun m!56359 () Bool)

(assert (=> d!12731 m!56359))

(declare-fun m!56361 () Bool)

(assert (=> b!62778 m!56361))

(assert (=> b!62777 m!56361))

(assert (=> d!12579 d!12731))

(declare-fun d!12733 () Bool)

(assert (=> d!12733 (= (apply!68 lt!26165 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)) (get!1092 (getValueByKey!124 (toList!697 lt!26165) (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2727 () Bool)

(assert (= bs!2727 d!12733))

(assert (=> bs!2727 m!55803))

(declare-fun m!56363 () Bool)

(assert (=> bs!2727 m!56363))

(assert (=> bs!2727 m!56363))

(declare-fun m!56365 () Bool)

(assert (=> bs!2727 m!56365))

(assert (=> b!62638 d!12733))

(declare-fun d!12735 () Bool)

(declare-fun c!8395 () Bool)

(assert (=> d!12735 (= c!8395 ((_ is ValueCellFull!863) (select (arr!1787 (ite (or c!8266 c!8262) (_values!2070 newMap!16) lt!25918)) #b00000000000000000000000000000000)))))

(declare-fun e!41195 () V!2865)

(assert (=> d!12735 (= (get!1089 (select (arr!1787 (ite (or c!8266 c!8262) (_values!2070 newMap!16) lt!25918)) #b00000000000000000000000000000000) (dynLambda!312 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!41195)))

(declare-fun b!62780 () Bool)

(assert (=> b!62780 (= e!41195 (get!1090 (select (arr!1787 (ite (or c!8266 c!8262) (_values!2070 newMap!16) lt!25918)) #b00000000000000000000000000000000) (dynLambda!312 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!62781 () Bool)

(assert (=> b!62781 (= e!41195 (get!1091 (select (arr!1787 (ite (or c!8266 c!8262) (_values!2070 newMap!16) lt!25918)) #b00000000000000000000000000000000) (dynLambda!312 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12735 c!8395) b!62780))

(assert (= (and d!12735 (not c!8395)) b!62781))

(assert (=> b!62780 m!56167))

(assert (=> b!62780 m!55857))

(declare-fun m!56367 () Bool)

(assert (=> b!62780 m!56367))

(assert (=> b!62781 m!56167))

(assert (=> b!62781 m!55857))

(declare-fun m!56369 () Bool)

(assert (=> b!62781 m!56369))

(assert (=> b!62638 d!12735))

(declare-fun d!12737 () Bool)

(assert (not d!12737))

(assert (=> b!62413 d!12737))

(declare-fun d!12739 () Bool)

(declare-fun c!8396 () Bool)

(assert (=> d!12739 (= c!8396 (and ((_ is Cons!1443) (t!4832 (toList!697 lt!25781))) (= (_1!1037 (h!2026 (t!4832 (toList!697 lt!25781)))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355))))))

(declare-fun e!41196 () Option!130)

(assert (=> d!12739 (= (getValueByKey!124 (t!4832 (toList!697 lt!25781)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) e!41196)))

(declare-fun b!62782 () Bool)

(assert (=> b!62782 (= e!41196 (Some!129 (_2!1037 (h!2026 (t!4832 (toList!697 lt!25781))))))))

(declare-fun b!62785 () Bool)

(declare-fun e!41197 () Option!130)

(assert (=> b!62785 (= e!41197 None!128)))

(declare-fun b!62783 () Bool)

(assert (=> b!62783 (= e!41196 e!41197)))

(declare-fun c!8397 () Bool)

(assert (=> b!62783 (= c!8397 (and ((_ is Cons!1443) (t!4832 (toList!697 lt!25781))) (not (= (_1!1037 (h!2026 (t!4832 (toList!697 lt!25781)))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))))

(declare-fun b!62784 () Bool)

(assert (=> b!62784 (= e!41197 (getValueByKey!124 (t!4832 (t!4832 (toList!697 lt!25781))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(assert (= (and d!12739 c!8396) b!62782))

(assert (= (and d!12739 (not c!8396)) b!62783))

(assert (= (and b!62783 c!8397) b!62784))

(assert (= (and b!62783 (not c!8397)) b!62785))

(assert (=> b!62784 m!55481))

(declare-fun m!56371 () Bool)

(assert (=> b!62784 m!56371))

(assert (=> b!62498 d!12739))

(declare-fun b!62786 () Bool)

(declare-fun e!41198 () (_ BitVec 32))

(declare-fun call!4953 () (_ BitVec 32))

(assert (=> b!62786 (= e!41198 call!4953)))

(declare-fun b!62787 () Bool)

(declare-fun e!41199 () (_ BitVec 32))

(assert (=> b!62787 (= e!41199 #b00000000000000000000000000000000)))

(declare-fun b!62788 () Bool)

(assert (=> b!62788 (= e!41199 e!41198)))

(declare-fun c!8398 () Bool)

(assert (=> b!62788 (= c!8398 (validKeyInArray!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!62789 () Bool)

(assert (=> b!62789 (= e!41198 (bvadd #b00000000000000000000000000000001 call!4953))))

(declare-fun bm!4950 () Bool)

(assert (=> bm!4950 (= call!4953 (arrayCountValidKeys!0 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992))))))))

(declare-fun d!12741 () Bool)

(declare-fun lt!26313 () (_ BitVec 32))

(assert (=> d!12741 (and (bvsge lt!26313 #b00000000000000000000000000000000) (bvsle lt!26313 (bvsub (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) #b00000000000000000000000000000000)))))

(assert (=> d!12741 (= lt!26313 e!41199)))

(declare-fun c!8399 () Bool)

(assert (=> d!12741 (= c!8399 (bvsge #b00000000000000000000000000000000 (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992))))))))

(assert (=> d!12741 (and (bvsle #b00000000000000000000000000000000 (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992))))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992))))))))

(assert (=> d!12741 (= (arrayCountValidKeys!0 (_keys!3718 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000000000000000 (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992))))) lt!26313)))

(assert (= (and d!12741 c!8399) b!62787))

(assert (= (and d!12741 (not c!8399)) b!62788))

(assert (= (and b!62788 c!8398) b!62789))

(assert (= (and b!62788 (not c!8398)) b!62786))

(assert (= (or b!62789 b!62786) bm!4950))

(declare-fun m!56373 () Bool)

(assert (=> b!62788 m!56373))

(assert (=> b!62788 m!56373))

(declare-fun m!56375 () Bool)

(assert (=> b!62788 m!56375))

(declare-fun m!56377 () Bool)

(assert (=> bm!4950 m!56377))

(assert (=> b!62441 d!12741))

(declare-fun d!12743 () Bool)

(assert (=> d!12743 (= (apply!68 lt!26165 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1092 (getValueByKey!124 (toList!697 lt!26165) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2728 () Bool)

(assert (= bs!2728 d!12743))

(declare-fun m!56379 () Bool)

(assert (=> bs!2728 m!56379))

(assert (=> bs!2728 m!56379))

(declare-fun m!56381 () Bool)

(assert (=> bs!2728 m!56381))

(assert (=> b!62624 d!12743))

(assert (=> b!62502 d!12697))

(declare-fun d!12745 () Bool)

(declare-fun c!8400 () Bool)

(assert (=> d!12745 (= c!8400 (and ((_ is Cons!1443) (toList!697 lt!26134)) (= (_1!1037 (h!2026 (toList!697 lt!26134))) (_1!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(declare-fun e!41200 () Option!130)

(assert (=> d!12745 (= (getValueByKey!124 (toList!697 lt!26134) (_1!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) e!41200)))

(declare-fun b!62790 () Bool)

(assert (=> b!62790 (= e!41200 (Some!129 (_2!1037 (h!2026 (toList!697 lt!26134)))))))

(declare-fun b!62793 () Bool)

(declare-fun e!41201 () Option!130)

(assert (=> b!62793 (= e!41201 None!128)))

(declare-fun b!62791 () Bool)

(assert (=> b!62791 (= e!41200 e!41201)))

(declare-fun c!8401 () Bool)

(assert (=> b!62791 (= c!8401 (and ((_ is Cons!1443) (toList!697 lt!26134)) (not (= (_1!1037 (h!2026 (toList!697 lt!26134))) (_1!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))))

(declare-fun b!62792 () Bool)

(assert (=> b!62792 (= e!41201 (getValueByKey!124 (t!4832 (toList!697 lt!26134)) (_1!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(assert (= (and d!12745 c!8400) b!62790))

(assert (= (and d!12745 (not c!8400)) b!62791))

(assert (= (and b!62791 c!8401) b!62792))

(assert (= (and b!62791 (not c!8401)) b!62793))

(declare-fun m!56383 () Bool)

(assert (=> b!62792 m!56383))

(assert (=> b!62604 d!12745))

(declare-fun d!12747 () Bool)

(assert (=> d!12747 (= (apply!68 lt!26029 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1092 (getValueByKey!124 (toList!697 lt!26029) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!2729 () Bool)

(assert (= bs!2729 d!12747))

(assert (=> bs!2729 m!55685))

(declare-fun m!56385 () Bool)

(assert (=> bs!2729 m!56385))

(assert (=> bs!2729 m!56385))

(declare-fun m!56387 () Bool)

(assert (=> bs!2729 m!56387))

(assert (=> b!62470 d!12747))

(assert (=> b!62470 d!12687))

(declare-fun d!12749 () Bool)

(assert (=> d!12749 (isDefined!78 (getValueByKey!124 (toList!697 (+!83 lt!25976 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!25989))))

(declare-fun lt!26314 () Unit!1685)

(assert (=> d!12749 (= lt!26314 (choose!339 (toList!697 (+!83 lt!25976 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!25989))))

(declare-fun e!41202 () Bool)

(assert (=> d!12749 e!41202))

(declare-fun res!34426 () Bool)

(assert (=> d!12749 (=> (not res!34426) (not e!41202))))

(assert (=> d!12749 (= res!34426 (isStrictlySorted!281 (toList!697 (+!83 lt!25976 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(assert (=> d!12749 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 (+!83 lt!25976 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!25989) lt!26314)))

(declare-fun b!62794 () Bool)

(assert (=> b!62794 (= e!41202 (containsKey!128 (toList!697 (+!83 lt!25976 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!25989))))

(assert (= (and d!12749 res!34426) b!62794))

(assert (=> d!12749 m!56143))

(assert (=> d!12749 m!56143))

(assert (=> d!12749 m!56145))

(declare-fun m!56389 () Bool)

(assert (=> d!12749 m!56389))

(declare-fun m!56391 () Bool)

(assert (=> d!12749 m!56391))

(assert (=> b!62794 m!56139))

(assert (=> b!62618 d!12749))

(declare-fun d!12751 () Bool)

(assert (=> d!12751 (= (isDefined!78 (getValueByKey!124 (toList!697 (+!83 lt!25976 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!25989)) (not (isEmpty!304 (getValueByKey!124 (toList!697 (+!83 lt!25976 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!25989))))))

(declare-fun bs!2730 () Bool)

(assert (= bs!2730 d!12751))

(assert (=> bs!2730 m!56143))

(declare-fun m!56393 () Bool)

(assert (=> bs!2730 m!56393))

(assert (=> b!62618 d!12751))

(declare-fun d!12753 () Bool)

(declare-fun c!8402 () Bool)

(assert (=> d!12753 (= c!8402 (and ((_ is Cons!1443) (toList!697 (+!83 lt!25976 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))) (= (_1!1037 (h!2026 (toList!697 (+!83 lt!25976 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))) lt!25989)))))

(declare-fun e!41203 () Option!130)

(assert (=> d!12753 (= (getValueByKey!124 (toList!697 (+!83 lt!25976 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!25989) e!41203)))

(declare-fun b!62795 () Bool)

(assert (=> b!62795 (= e!41203 (Some!129 (_2!1037 (h!2026 (toList!697 (+!83 lt!25976 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))))))))

(declare-fun b!62798 () Bool)

(declare-fun e!41204 () Option!130)

(assert (=> b!62798 (= e!41204 None!128)))

(declare-fun b!62796 () Bool)

(assert (=> b!62796 (= e!41203 e!41204)))

(declare-fun c!8403 () Bool)

(assert (=> b!62796 (= c!8403 (and ((_ is Cons!1443) (toList!697 (+!83 lt!25976 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))) (not (= (_1!1037 (h!2026 (toList!697 (+!83 lt!25976 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))) lt!25989))))))

(declare-fun b!62797 () Bool)

(assert (=> b!62797 (= e!41204 (getValueByKey!124 (t!4832 (toList!697 (+!83 lt!25976 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))) lt!25989))))

(assert (= (and d!12753 c!8402) b!62795))

(assert (= (and d!12753 (not c!8402)) b!62796))

(assert (= (and b!62796 c!8403) b!62797))

(assert (= (and b!62796 (not c!8403)) b!62798))

(declare-fun m!56395 () Bool)

(assert (=> b!62797 m!56395))

(assert (=> b!62618 d!12753))

(declare-fun d!12755 () Bool)

(assert (=> d!12755 (= (validMask!0 (mask!5992 newMap!16)) (and (or (= (mask!5992 newMap!16) #b00000000000000000000000000000111) (= (mask!5992 newMap!16) #b00000000000000000000000000001111) (= (mask!5992 newMap!16) #b00000000000000000000000000011111) (= (mask!5992 newMap!16) #b00000000000000000000000000111111) (= (mask!5992 newMap!16) #b00000000000000000000000001111111) (= (mask!5992 newMap!16) #b00000000000000000000000011111111) (= (mask!5992 newMap!16) #b00000000000000000000000111111111) (= (mask!5992 newMap!16) #b00000000000000000000001111111111) (= (mask!5992 newMap!16) #b00000000000000000000011111111111) (= (mask!5992 newMap!16) #b00000000000000000000111111111111) (= (mask!5992 newMap!16) #b00000000000000000001111111111111) (= (mask!5992 newMap!16) #b00000000000000000011111111111111) (= (mask!5992 newMap!16) #b00000000000000000111111111111111) (= (mask!5992 newMap!16) #b00000000000000001111111111111111) (= (mask!5992 newMap!16) #b00000000000000011111111111111111) (= (mask!5992 newMap!16) #b00000000000000111111111111111111) (= (mask!5992 newMap!16) #b00000000000001111111111111111111) (= (mask!5992 newMap!16) #b00000000000011111111111111111111) (= (mask!5992 newMap!16) #b00000000000111111111111111111111) (= (mask!5992 newMap!16) #b00000000001111111111111111111111) (= (mask!5992 newMap!16) #b00000000011111111111111111111111) (= (mask!5992 newMap!16) #b00000000111111111111111111111111) (= (mask!5992 newMap!16) #b00000001111111111111111111111111) (= (mask!5992 newMap!16) #b00000011111111111111111111111111) (= (mask!5992 newMap!16) #b00000111111111111111111111111111) (= (mask!5992 newMap!16) #b00001111111111111111111111111111) (= (mask!5992 newMap!16) #b00011111111111111111111111111111) (= (mask!5992 newMap!16) #b00111111111111111111111111111111)) (bvsle (mask!5992 newMap!16) #b00111111111111111111111111111111)))))

(assert (=> d!12619 d!12755))

(declare-fun d!12757 () Bool)

(declare-fun e!41205 () Bool)

(assert (=> d!12757 e!41205))

(declare-fun res!34427 () Bool)

(assert (=> d!12757 (=> res!34427 e!41205)))

(declare-fun lt!26318 () Bool)

(assert (=> d!12757 (= res!34427 (not lt!26318))))

(declare-fun lt!26316 () Bool)

(assert (=> d!12757 (= lt!26318 lt!26316)))

(declare-fun lt!26317 () Unit!1685)

(declare-fun e!41206 () Unit!1685)

(assert (=> d!12757 (= lt!26317 e!41206)))

(declare-fun c!8404 () Bool)

(assert (=> d!12757 (= c!8404 lt!26316)))

(assert (=> d!12757 (= lt!26316 (containsKey!128 (toList!697 lt!26206) (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(assert (=> d!12757 (= (contains!690 lt!26206 (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!26318)))

(declare-fun b!62799 () Bool)

(declare-fun lt!26315 () Unit!1685)

(assert (=> b!62799 (= e!41206 lt!26315)))

(assert (=> b!62799 (= lt!26315 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 lt!26206) (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(assert (=> b!62799 (isDefined!78 (getValueByKey!124 (toList!697 lt!26206) (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun b!62800 () Bool)

(declare-fun Unit!1715 () Unit!1685)

(assert (=> b!62800 (= e!41206 Unit!1715)))

(declare-fun b!62801 () Bool)

(assert (=> b!62801 (= e!41205 (isDefined!78 (getValueByKey!124 (toList!697 lt!26206) (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(assert (= (and d!12757 c!8404) b!62799))

(assert (= (and d!12757 (not c!8404)) b!62800))

(assert (= (and d!12757 (not res!34427)) b!62801))

(declare-fun m!56397 () Bool)

(assert (=> d!12757 m!56397))

(declare-fun m!56399 () Bool)

(assert (=> b!62799 m!56399))

(assert (=> b!62799 m!56255))

(assert (=> b!62799 m!56255))

(declare-fun m!56401 () Bool)

(assert (=> b!62799 m!56401))

(assert (=> b!62801 m!56255))

(assert (=> b!62801 m!56255))

(assert (=> b!62801 m!56401))

(assert (=> d!12703 d!12757))

(declare-fun d!12759 () Bool)

(declare-fun c!8405 () Bool)

(assert (=> d!12759 (= c!8405 (and ((_ is Cons!1443) lt!26204) (= (_1!1037 (h!2026 lt!26204)) (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(declare-fun e!41207 () Option!130)

(assert (=> d!12759 (= (getValueByKey!124 lt!26204 (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) e!41207)))

(declare-fun b!62802 () Bool)

(assert (=> b!62802 (= e!41207 (Some!129 (_2!1037 (h!2026 lt!26204))))))

(declare-fun b!62805 () Bool)

(declare-fun e!41208 () Option!130)

(assert (=> b!62805 (= e!41208 None!128)))

(declare-fun b!62803 () Bool)

(assert (=> b!62803 (= e!41207 e!41208)))

(declare-fun c!8406 () Bool)

(assert (=> b!62803 (= c!8406 (and ((_ is Cons!1443) lt!26204) (not (= (_1!1037 (h!2026 lt!26204)) (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))))

(declare-fun b!62804 () Bool)

(assert (=> b!62804 (= e!41208 (getValueByKey!124 (t!4832 lt!26204) (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(assert (= (and d!12759 c!8405) b!62802))

(assert (= (and d!12759 (not c!8405)) b!62803))

(assert (= (and b!62803 c!8406) b!62804))

(assert (= (and b!62803 (not c!8406)) b!62805))

(declare-fun m!56403 () Bool)

(assert (=> b!62804 m!56403))

(assert (=> d!12703 d!12759))

(declare-fun d!12761 () Bool)

(assert (=> d!12761 (= (getValueByKey!124 lt!26204 (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) (Some!129 (_2!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun lt!26321 () Unit!1685)

(declare-fun choose!347 (List!1447 (_ BitVec 64) V!2865) Unit!1685)

(assert (=> d!12761 (= lt!26321 (choose!347 lt!26204 (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun e!41211 () Bool)

(assert (=> d!12761 e!41211))

(declare-fun res!34432 () Bool)

(assert (=> d!12761 (=> (not res!34432) (not e!41211))))

(assert (=> d!12761 (= res!34432 (isStrictlySorted!281 lt!26204))))

(assert (=> d!12761 (= (lemmaContainsTupThenGetReturnValue!44 lt!26204 (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!26321)))

(declare-fun b!62810 () Bool)

(declare-fun res!34433 () Bool)

(assert (=> b!62810 (=> (not res!34433) (not e!41211))))

(assert (=> b!62810 (= res!34433 (containsKey!128 lt!26204 (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun b!62811 () Bool)

(assert (=> b!62811 (= e!41211 (contains!692 lt!26204 (tuple2!2053 (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(assert (= (and d!12761 res!34432) b!62810))

(assert (= (and b!62810 res!34433) b!62811))

(assert (=> d!12761 m!56249))

(declare-fun m!56405 () Bool)

(assert (=> d!12761 m!56405))

(declare-fun m!56407 () Bool)

(assert (=> d!12761 m!56407))

(declare-fun m!56409 () Bool)

(assert (=> b!62810 m!56409))

(declare-fun m!56411 () Bool)

(assert (=> b!62811 m!56411))

(assert (=> d!12703 d!12761))

(declare-fun b!62832 () Bool)

(declare-fun e!41222 () List!1447)

(declare-fun call!4962 () List!1447)

(assert (=> b!62832 (= e!41222 call!4962)))

(declare-fun bm!4957 () Bool)

(declare-fun call!4960 () List!1447)

(assert (=> bm!4957 (= call!4962 call!4960)))

(declare-fun d!12763 () Bool)

(declare-fun e!41224 () Bool)

(assert (=> d!12763 e!41224))

(declare-fun res!34439 () Bool)

(assert (=> d!12763 (=> (not res!34439) (not e!41224))))

(declare-fun lt!26324 () List!1447)

(assert (=> d!12763 (= res!34439 (isStrictlySorted!281 lt!26324))))

(declare-fun e!41226 () List!1447)

(assert (=> d!12763 (= lt!26324 e!41226)))

(declare-fun c!8415 () Bool)

(assert (=> d!12763 (= c!8415 (and ((_ is Cons!1443) (toList!697 call!4896)) (bvslt (_1!1037 (h!2026 (toList!697 call!4896))) (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(assert (=> d!12763 (isStrictlySorted!281 (toList!697 call!4896))))

(assert (=> d!12763 (= (insertStrictlySorted!47 (toList!697 call!4896) (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!26324)))

(declare-fun c!8418 () Bool)

(declare-fun b!62833 () Bool)

(declare-fun e!41225 () List!1447)

(declare-fun c!8416 () Bool)

(assert (=> b!62833 (= e!41225 (ite c!8416 (t!4832 (toList!697 call!4896)) (ite c!8418 (Cons!1443 (h!2026 (toList!697 call!4896)) (t!4832 (toList!697 call!4896))) Nil!1444)))))

(declare-fun b!62834 () Bool)

(declare-fun e!41223 () List!1447)

(declare-fun call!4961 () List!1447)

(assert (=> b!62834 (= e!41223 call!4961)))

(declare-fun b!62835 () Bool)

(assert (=> b!62835 (= e!41224 (contains!692 lt!26324 (tuple2!2053 (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(declare-fun b!62836 () Bool)

(declare-fun res!34438 () Bool)

(assert (=> b!62836 (=> (not res!34438) (not e!41224))))

(assert (=> b!62836 (= res!34438 (containsKey!128 lt!26324 (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun bm!4958 () Bool)

(declare-fun $colon$colon!61 (List!1447 tuple2!2052) List!1447)

(assert (=> bm!4958 (= call!4960 ($colon$colon!61 e!41225 (ite c!8415 (h!2026 (toList!697 call!4896)) (tuple2!2053 (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))))

(declare-fun c!8417 () Bool)

(assert (=> bm!4958 (= c!8417 c!8415)))

(declare-fun b!62837 () Bool)

(assert (=> b!62837 (= e!41226 e!41222)))

(assert (=> b!62837 (= c!8416 (and ((_ is Cons!1443) (toList!697 call!4896)) (= (_1!1037 (h!2026 (toList!697 call!4896))) (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(declare-fun b!62838 () Bool)

(assert (=> b!62838 (= c!8418 (and ((_ is Cons!1443) (toList!697 call!4896)) (bvsgt (_1!1037 (h!2026 (toList!697 call!4896))) (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(assert (=> b!62838 (= e!41222 e!41223)))

(declare-fun b!62839 () Bool)

(assert (=> b!62839 (= e!41226 call!4960)))

(declare-fun b!62840 () Bool)

(assert (=> b!62840 (= e!41225 (insertStrictlySorted!47 (t!4832 (toList!697 call!4896)) (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun bm!4959 () Bool)

(assert (=> bm!4959 (= call!4961 call!4962)))

(declare-fun b!62841 () Bool)

(assert (=> b!62841 (= e!41223 call!4961)))

(assert (= (and d!12763 c!8415) b!62839))

(assert (= (and d!12763 (not c!8415)) b!62837))

(assert (= (and b!62837 c!8416) b!62832))

(assert (= (and b!62837 (not c!8416)) b!62838))

(assert (= (and b!62838 c!8418) b!62834))

(assert (= (and b!62838 (not c!8418)) b!62841))

(assert (= (or b!62834 b!62841) bm!4959))

(assert (= (or b!62832 bm!4959) bm!4957))

(assert (= (or b!62839 bm!4957) bm!4958))

(assert (= (and bm!4958 c!8417) b!62840))

(assert (= (and bm!4958 (not c!8417)) b!62833))

(assert (= (and d!12763 res!34439) b!62836))

(assert (= (and b!62836 res!34438) b!62835))

(declare-fun m!56413 () Bool)

(assert (=> b!62836 m!56413))

(declare-fun m!56415 () Bool)

(assert (=> bm!4958 m!56415))

(declare-fun m!56417 () Bool)

(assert (=> b!62835 m!56417))

(declare-fun m!56419 () Bool)

(assert (=> d!12763 m!56419))

(declare-fun m!56421 () Bool)

(assert (=> d!12763 m!56421))

(declare-fun m!56423 () Bool)

(assert (=> b!62840 m!56423))

(assert (=> d!12703 d!12763))

(declare-fun b!62842 () Bool)

(declare-fun e!41227 () (_ BitVec 32))

(declare-fun call!4963 () (_ BitVec 32))

(assert (=> b!62842 (= e!41227 call!4963)))

(declare-fun b!62843 () Bool)

(declare-fun e!41228 () (_ BitVec 32))

(assert (=> b!62843 (= e!41228 #b00000000000000000000000000000000)))

(declare-fun b!62844 () Bool)

(assert (=> b!62844 (= e!41228 e!41227)))

(declare-fun c!8419 () Bool)

(assert (=> b!62844 (= c!8419 (validKeyInArray!0 (select (arr!1786 (_keys!3718 (_2!1036 lt!25898))) #b00000000000000000000000000000000)))))

(declare-fun b!62845 () Bool)

(assert (=> b!62845 (= e!41227 (bvadd #b00000000000000000000000000000001 call!4963))))

(declare-fun bm!4960 () Bool)

(assert (=> bm!4960 (= call!4963 (arrayCountValidKeys!0 (_keys!3718 (_2!1036 lt!25898)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2019 (_keys!3718 (_2!1036 lt!25898)))))))

(declare-fun d!12765 () Bool)

(declare-fun lt!26325 () (_ BitVec 32))

(assert (=> d!12765 (and (bvsge lt!26325 #b00000000000000000000000000000000) (bvsle lt!26325 (bvsub (size!2019 (_keys!3718 (_2!1036 lt!25898))) #b00000000000000000000000000000000)))))

(assert (=> d!12765 (= lt!26325 e!41228)))

(declare-fun c!8420 () Bool)

(assert (=> d!12765 (= c!8420 (bvsge #b00000000000000000000000000000000 (size!2019 (_keys!3718 (_2!1036 lt!25898)))))))

(assert (=> d!12765 (and (bvsle #b00000000000000000000000000000000 (size!2019 (_keys!3718 (_2!1036 lt!25898)))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2019 (_keys!3718 (_2!1036 lt!25898))) (size!2019 (_keys!3718 (_2!1036 lt!25898)))))))

(assert (=> d!12765 (= (arrayCountValidKeys!0 (_keys!3718 (_2!1036 lt!25898)) #b00000000000000000000000000000000 (size!2019 (_keys!3718 (_2!1036 lt!25898)))) lt!26325)))

(assert (= (and d!12765 c!8420) b!62843))

(assert (= (and d!12765 (not c!8420)) b!62844))

(assert (= (and b!62844 c!8419) b!62845))

(assert (= (and b!62844 (not c!8419)) b!62842))

(assert (= (or b!62845 b!62842) bm!4960))

(declare-fun m!56425 () Bool)

(assert (=> b!62844 m!56425))

(assert (=> b!62844 m!56425))

(declare-fun m!56427 () Bool)

(assert (=> b!62844 m!56427))

(declare-fun m!56429 () Bool)

(assert (=> bm!4960 m!56429))

(assert (=> b!62405 d!12765))

(assert (=> d!12605 d!12601))

(assert (=> d!12605 d!12603))

(declare-fun d!12767 () Bool)

(assert (=> d!12767 (isDefined!78 (getValueByKey!124 (toList!697 lt!25781) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(assert (=> d!12767 true))

(declare-fun _$12!311 () Unit!1685)

(assert (=> d!12767 (= (choose!339 (toList!697 lt!25781) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) _$12!311)))

(declare-fun bs!2731 () Bool)

(assert (= bs!2731 d!12767))

(assert (=> bs!2731 m!55481))

(assert (=> bs!2731 m!55617))

(assert (=> bs!2731 m!55617))

(assert (=> bs!2731 m!55619))

(assert (=> d!12605 d!12767))

(declare-fun d!12769 () Bool)

(declare-fun res!34444 () Bool)

(declare-fun e!41233 () Bool)

(assert (=> d!12769 (=> res!34444 e!41233)))

(assert (=> d!12769 (= res!34444 (or ((_ is Nil!1444) (toList!697 lt!25781)) ((_ is Nil!1444) (t!4832 (toList!697 lt!25781)))))))

(assert (=> d!12769 (= (isStrictlySorted!281 (toList!697 lt!25781)) e!41233)))

(declare-fun b!62850 () Bool)

(declare-fun e!41234 () Bool)

(assert (=> b!62850 (= e!41233 e!41234)))

(declare-fun res!34445 () Bool)

(assert (=> b!62850 (=> (not res!34445) (not e!41234))))

(assert (=> b!62850 (= res!34445 (bvslt (_1!1037 (h!2026 (toList!697 lt!25781))) (_1!1037 (h!2026 (t!4832 (toList!697 lt!25781))))))))

(declare-fun b!62851 () Bool)

(assert (=> b!62851 (= e!41234 (isStrictlySorted!281 (t!4832 (toList!697 lt!25781))))))

(assert (= (and d!12769 (not res!34444)) b!62850))

(assert (= (and b!62850 res!34445) b!62851))

(declare-fun m!56431 () Bool)

(assert (=> b!62851 m!56431))

(assert (=> d!12605 d!12769))

(declare-fun d!12771 () Bool)

(declare-fun lt!26328 () Bool)

(declare-fun content!68 (List!1447) (InoxSet tuple2!2052))

(assert (=> d!12771 (= lt!26328 (select (content!68 (toList!697 lt!26070)) (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!41240 () Bool)

(assert (=> d!12771 (= lt!26328 e!41240)))

(declare-fun res!34451 () Bool)

(assert (=> d!12771 (=> (not res!34451) (not e!41240))))

(assert (=> d!12771 (= res!34451 ((_ is Cons!1443) (toList!697 lt!26070)))))

(assert (=> d!12771 (= (contains!692 (toList!697 lt!26070) (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!26328)))

(declare-fun b!62856 () Bool)

(declare-fun e!41239 () Bool)

(assert (=> b!62856 (= e!41240 e!41239)))

(declare-fun res!34450 () Bool)

(assert (=> b!62856 (=> res!34450 e!41239)))

(assert (=> b!62856 (= res!34450 (= (h!2026 (toList!697 lt!26070)) (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!62857 () Bool)

(assert (=> b!62857 (= e!41239 (contains!692 (t!4832 (toList!697 lt!26070)) (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!12771 res!34451) b!62856))

(assert (= (and b!62856 (not res!34450)) b!62857))

(declare-fun m!56433 () Bool)

(assert (=> d!12771 m!56433))

(declare-fun m!56435 () Bool)

(assert (=> d!12771 m!56435))

(declare-fun m!56437 () Bool)

(assert (=> b!62857 m!56437))

(assert (=> b!62532 d!12771))

(declare-fun b!62858 () Bool)

(declare-fun e!41241 () Bool)

(declare-fun call!4964 () Bool)

(assert (=> b!62858 (= e!41241 call!4964)))

(declare-fun bm!4961 () Bool)

(assert (=> bm!4961 (= call!4964 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3718 (v!2412 (underlying!229 thiss!992))) (mask!5992 (v!2412 (underlying!229 thiss!992)))))))

(declare-fun b!62860 () Bool)

(declare-fun e!41242 () Bool)

(assert (=> b!62860 (= e!41242 call!4964)))

(declare-fun b!62861 () Bool)

(declare-fun e!41243 () Bool)

(assert (=> b!62861 (= e!41243 e!41242)))

(declare-fun c!8421 () Bool)

(assert (=> b!62861 (= c!8421 (validKeyInArray!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!62859 () Bool)

(assert (=> b!62859 (= e!41242 e!41241)))

(declare-fun lt!26330 () (_ BitVec 64))

(assert (=> b!62859 (= lt!26330 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) #b00000000000000000000000000000000))))

(declare-fun lt!26331 () Unit!1685)

(assert (=> b!62859 (= lt!26331 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3718 (v!2412 (underlying!229 thiss!992))) lt!26330 #b00000000000000000000000000000000))))

(assert (=> b!62859 (arrayContainsKey!0 (_keys!3718 (v!2412 (underlying!229 thiss!992))) lt!26330 #b00000000000000000000000000000000)))

(declare-fun lt!26329 () Unit!1685)

(assert (=> b!62859 (= lt!26329 lt!26331)))

(declare-fun res!34453 () Bool)

(assert (=> b!62859 (= res!34453 (= (seekEntryOrOpen!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) #b00000000000000000000000000000000) (_keys!3718 (v!2412 (underlying!229 thiss!992))) (mask!5992 (v!2412 (underlying!229 thiss!992)))) (Found!232 #b00000000000000000000000000000000)))))

(assert (=> b!62859 (=> (not res!34453) (not e!41241))))

(declare-fun d!12773 () Bool)

(declare-fun res!34452 () Bool)

(assert (=> d!12773 (=> res!34452 e!41243)))

(assert (=> d!12773 (= res!34452 (bvsge #b00000000000000000000000000000000 (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992))))))))

(assert (=> d!12773 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (mask!5992 (v!2412 (underlying!229 thiss!992)))) e!41243)))

(assert (= (and d!12773 (not res!34452)) b!62861))

(assert (= (and b!62861 c!8421) b!62859))

(assert (= (and b!62861 (not c!8421)) b!62860))

(assert (= (and b!62859 res!34453) b!62858))

(assert (= (or b!62858 b!62860) bm!4961))

(declare-fun m!56439 () Bool)

(assert (=> bm!4961 m!56439))

(assert (=> b!62861 m!56373))

(assert (=> b!62861 m!56373))

(assert (=> b!62861 m!56375))

(assert (=> b!62859 m!56373))

(declare-fun m!56441 () Bool)

(assert (=> b!62859 m!56441))

(declare-fun m!56443 () Bool)

(assert (=> b!62859 m!56443))

(assert (=> b!62859 m!56373))

(declare-fun m!56445 () Bool)

(assert (=> b!62859 m!56445))

(assert (=> b!62442 d!12773))

(declare-fun d!12775 () Bool)

(declare-fun e!41244 () Bool)

(assert (=> d!12775 e!41244))

(declare-fun res!34455 () Bool)

(assert (=> d!12775 (=> (not res!34455) (not e!41244))))

(declare-fun lt!26334 () ListLongMap!1363)

(assert (=> d!12775 (= res!34455 (contains!690 lt!26334 (_1!1037 (tuple2!2053 lt!26048 (zeroValue!1999 newMap!16)))))))

(declare-fun lt!26332 () List!1447)

(assert (=> d!12775 (= lt!26334 (ListLongMap!1364 lt!26332))))

(declare-fun lt!26333 () Unit!1685)

(declare-fun lt!26335 () Unit!1685)

(assert (=> d!12775 (= lt!26333 lt!26335)))

(assert (=> d!12775 (= (getValueByKey!124 lt!26332 (_1!1037 (tuple2!2053 lt!26048 (zeroValue!1999 newMap!16)))) (Some!129 (_2!1037 (tuple2!2053 lt!26048 (zeroValue!1999 newMap!16)))))))

(assert (=> d!12775 (= lt!26335 (lemmaContainsTupThenGetReturnValue!44 lt!26332 (_1!1037 (tuple2!2053 lt!26048 (zeroValue!1999 newMap!16))) (_2!1037 (tuple2!2053 lt!26048 (zeroValue!1999 newMap!16)))))))

(assert (=> d!12775 (= lt!26332 (insertStrictlySorted!47 (toList!697 lt!26043) (_1!1037 (tuple2!2053 lt!26048 (zeroValue!1999 newMap!16))) (_2!1037 (tuple2!2053 lt!26048 (zeroValue!1999 newMap!16)))))))

(assert (=> d!12775 (= (+!83 lt!26043 (tuple2!2053 lt!26048 (zeroValue!1999 newMap!16))) lt!26334)))

(declare-fun b!62862 () Bool)

(declare-fun res!34454 () Bool)

(assert (=> b!62862 (=> (not res!34454) (not e!41244))))

(assert (=> b!62862 (= res!34454 (= (getValueByKey!124 (toList!697 lt!26334) (_1!1037 (tuple2!2053 lt!26048 (zeroValue!1999 newMap!16)))) (Some!129 (_2!1037 (tuple2!2053 lt!26048 (zeroValue!1999 newMap!16))))))))

(declare-fun b!62863 () Bool)

(assert (=> b!62863 (= e!41244 (contains!692 (toList!697 lt!26334) (tuple2!2053 lt!26048 (zeroValue!1999 newMap!16))))))

(assert (= (and d!12775 res!34455) b!62862))

(assert (= (and b!62862 res!34454) b!62863))

(declare-fun m!56447 () Bool)

(assert (=> d!12775 m!56447))

(declare-fun m!56449 () Bool)

(assert (=> d!12775 m!56449))

(declare-fun m!56451 () Bool)

(assert (=> d!12775 m!56451))

(declare-fun m!56453 () Bool)

(assert (=> d!12775 m!56453))

(declare-fun m!56455 () Bool)

(assert (=> b!62862 m!56455))

(declare-fun m!56457 () Bool)

(assert (=> b!62863 m!56457))

(assert (=> b!62521 d!12775))

(declare-fun d!12777 () Bool)

(assert (=> d!12777 (= (apply!68 (+!83 lt!26035 (tuple2!2053 lt!26046 (minValue!1999 newMap!16))) lt!26050) (apply!68 lt!26035 lt!26050))))

(declare-fun lt!26336 () Unit!1685)

(assert (=> d!12777 (= lt!26336 (choose!344 lt!26035 lt!26046 (minValue!1999 newMap!16) lt!26050))))

(declare-fun e!41245 () Bool)

(assert (=> d!12777 e!41245))

(declare-fun res!34456 () Bool)

(assert (=> d!12777 (=> (not res!34456) (not e!41245))))

(assert (=> d!12777 (= res!34456 (contains!690 lt!26035 lt!26050))))

(assert (=> d!12777 (= (addApplyDifferent!44 lt!26035 lt!26046 (minValue!1999 newMap!16) lt!26050) lt!26336)))

(declare-fun b!62864 () Bool)

(assert (=> b!62864 (= e!41245 (not (= lt!26050 lt!26046)))))

(assert (= (and d!12777 res!34456) b!62864))

(declare-fun m!56459 () Bool)

(assert (=> d!12777 m!56459))

(assert (=> d!12777 m!55887))

(assert (=> d!12777 m!55885))

(assert (=> d!12777 m!55889))

(declare-fun m!56461 () Bool)

(assert (=> d!12777 m!56461))

(assert (=> d!12777 m!55885))

(assert (=> b!62521 d!12777))

(declare-fun d!12779 () Bool)

(declare-fun e!41246 () Bool)

(assert (=> d!12779 e!41246))

(declare-fun res!34457 () Bool)

(assert (=> d!12779 (=> res!34457 e!41246)))

(declare-fun lt!26340 () Bool)

(assert (=> d!12779 (= res!34457 (not lt!26340))))

(declare-fun lt!26338 () Bool)

(assert (=> d!12779 (= lt!26340 lt!26338)))

(declare-fun lt!26339 () Unit!1685)

(declare-fun e!41247 () Unit!1685)

(assert (=> d!12779 (= lt!26339 e!41247)))

(declare-fun c!8422 () Bool)

(assert (=> d!12779 (= c!8422 lt!26338)))

(assert (=> d!12779 (= lt!26338 (containsKey!128 (toList!697 (+!83 lt!26038 (tuple2!2053 lt!26044 (zeroValue!1999 newMap!16)))) lt!26051))))

(assert (=> d!12779 (= (contains!690 (+!83 lt!26038 (tuple2!2053 lt!26044 (zeroValue!1999 newMap!16))) lt!26051) lt!26340)))

(declare-fun b!62865 () Bool)

(declare-fun lt!26337 () Unit!1685)

(assert (=> b!62865 (= e!41247 lt!26337)))

(assert (=> b!62865 (= lt!26337 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 (+!83 lt!26038 (tuple2!2053 lt!26044 (zeroValue!1999 newMap!16)))) lt!26051))))

(assert (=> b!62865 (isDefined!78 (getValueByKey!124 (toList!697 (+!83 lt!26038 (tuple2!2053 lt!26044 (zeroValue!1999 newMap!16)))) lt!26051))))

(declare-fun b!62866 () Bool)

(declare-fun Unit!1716 () Unit!1685)

(assert (=> b!62866 (= e!41247 Unit!1716)))

(declare-fun b!62867 () Bool)

(assert (=> b!62867 (= e!41246 (isDefined!78 (getValueByKey!124 (toList!697 (+!83 lt!26038 (tuple2!2053 lt!26044 (zeroValue!1999 newMap!16)))) lt!26051)))))

(assert (= (and d!12779 c!8422) b!62865))

(assert (= (and d!12779 (not c!8422)) b!62866))

(assert (= (and d!12779 (not res!34457)) b!62867))

(declare-fun m!56463 () Bool)

(assert (=> d!12779 m!56463))

(declare-fun m!56465 () Bool)

(assert (=> b!62865 m!56465))

(declare-fun m!56467 () Bool)

(assert (=> b!62865 m!56467))

(assert (=> b!62865 m!56467))

(declare-fun m!56469 () Bool)

(assert (=> b!62865 m!56469))

(assert (=> b!62867 m!56467))

(assert (=> b!62867 m!56467))

(assert (=> b!62867 m!56469))

(assert (=> b!62521 d!12779))

(declare-fun d!12781 () Bool)

(assert (=> d!12781 (= (apply!68 (+!83 lt!26035 (tuple2!2053 lt!26046 (minValue!1999 newMap!16))) lt!26050) (get!1092 (getValueByKey!124 (toList!697 (+!83 lt!26035 (tuple2!2053 lt!26046 (minValue!1999 newMap!16)))) lt!26050)))))

(declare-fun bs!2732 () Bool)

(assert (= bs!2732 d!12781))

(declare-fun m!56471 () Bool)

(assert (=> bs!2732 m!56471))

(assert (=> bs!2732 m!56471))

(declare-fun m!56473 () Bool)

(assert (=> bs!2732 m!56473))

(assert (=> b!62521 d!12781))

(declare-fun d!12783 () Bool)

(assert (=> d!12783 (= (apply!68 lt!26043 lt!26036) (get!1092 (getValueByKey!124 (toList!697 lt!26043) lt!26036)))))

(declare-fun bs!2733 () Bool)

(assert (= bs!2733 d!12783))

(declare-fun m!56475 () Bool)

(assert (=> bs!2733 m!56475))

(assert (=> bs!2733 m!56475))

(declare-fun m!56477 () Bool)

(assert (=> bs!2733 m!56477))

(assert (=> b!62521 d!12783))

(declare-fun d!12785 () Bool)

(assert (=> d!12785 (= (apply!68 lt!26035 lt!26050) (get!1092 (getValueByKey!124 (toList!697 lt!26035) lt!26050)))))

(declare-fun bs!2734 () Bool)

(assert (= bs!2734 d!12785))

(declare-fun m!56479 () Bool)

(assert (=> bs!2734 m!56479))

(assert (=> bs!2734 m!56479))

(declare-fun m!56481 () Bool)

(assert (=> bs!2734 m!56481))

(assert (=> b!62521 d!12785))

(declare-fun b!62868 () Bool)

(assert (=> b!62868 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(assert (=> b!62868 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2020 (ite c!8266 (_values!2070 newMap!16) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (index!3054 lt!25902) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16)))))))))

(declare-fun e!41250 () Bool)

(declare-fun lt!26346 () ListLongMap!1363)

(assert (=> b!62868 (= e!41250 (= (apply!68 lt!26346 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)) (get!1089 (select (arr!1787 (ite c!8266 (_values!2070 newMap!16) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (index!3054 lt!25902) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!312 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!62869 () Bool)

(declare-fun lt!26341 () Unit!1685)

(declare-fun lt!26344 () Unit!1685)

(assert (=> b!62869 (= lt!26341 lt!26344)))

(declare-fun lt!26345 () V!2865)

(declare-fun lt!26342 () (_ BitVec 64))

(declare-fun lt!26343 () ListLongMap!1363)

(declare-fun lt!26347 () (_ BitVec 64))

(assert (=> b!62869 (not (contains!690 (+!83 lt!26343 (tuple2!2053 lt!26347 lt!26345)) lt!26342))))

(assert (=> b!62869 (= lt!26344 (addStillNotContains!18 lt!26343 lt!26347 lt!26345 lt!26342))))

(assert (=> b!62869 (= lt!26342 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!62869 (= lt!26345 (get!1089 (select (arr!1787 (ite c!8266 (_values!2070 newMap!16) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (index!3054 lt!25902) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!312 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!62869 (= lt!26347 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun call!4965 () ListLongMap!1363)

(assert (=> b!62869 (= lt!26343 call!4965)))

(declare-fun e!41251 () ListLongMap!1363)

(assert (=> b!62869 (= e!41251 (+!83 call!4965 (tuple2!2053 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000) (get!1089 (select (arr!1787 (ite c!8266 (_values!2070 newMap!16) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (index!3054 lt!25902) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!312 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!62870 () Bool)

(declare-fun res!34460 () Bool)

(declare-fun e!41252 () Bool)

(assert (=> b!62870 (=> (not res!34460) (not e!41252))))

(assert (=> b!62870 (= res!34460 (not (contains!690 lt!26346 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!62871 () Bool)

(declare-fun e!41248 () Bool)

(assert (=> b!62871 (= e!41248 (validKeyInArray!0 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!62871 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun bm!4962 () Bool)

(assert (=> bm!4962 (= call!4965 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (ite c!8266 (_values!2070 newMap!16) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (index!3054 lt!25902) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16)))) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2087 newMap!16)))))

(declare-fun b!62872 () Bool)

(declare-fun e!41249 () ListLongMap!1363)

(assert (=> b!62872 (= e!41249 e!41251)))

(declare-fun c!8426 () Bool)

(assert (=> b!62872 (= c!8426 (validKeyInArray!0 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62873 () Bool)

(declare-fun e!41254 () Bool)

(assert (=> b!62873 (= e!41254 (= lt!26346 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (ite c!8266 (_values!2070 newMap!16) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (index!3054 lt!25902) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16)))) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2087 newMap!16))))))

(declare-fun d!12787 () Bool)

(assert (=> d!12787 e!41252))

(declare-fun res!34461 () Bool)

(assert (=> d!12787 (=> (not res!34461) (not e!41252))))

(assert (=> d!12787 (= res!34461 (not (contains!690 lt!26346 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12787 (= lt!26346 e!41249)))

(declare-fun c!8425 () Bool)

(assert (=> d!12787 (= c!8425 (bvsge #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(assert (=> d!12787 (validMask!0 (mask!5992 newMap!16))))

(assert (=> d!12787 (= (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (ite c!8266 (_values!2070 newMap!16) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (index!3054 lt!25902) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16)))) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) lt!26346)))

(declare-fun b!62874 () Bool)

(assert (=> b!62874 (= e!41254 (isEmpty!303 lt!26346))))

(declare-fun b!62875 () Bool)

(declare-fun e!41253 () Bool)

(assert (=> b!62875 (= e!41253 e!41254)))

(declare-fun c!8424 () Bool)

(assert (=> b!62875 (= c!8424 (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(declare-fun b!62876 () Bool)

(assert (=> b!62876 (= e!41251 call!4965)))

(declare-fun b!62877 () Bool)

(assert (=> b!62877 (= e!41253 e!41250)))

(assert (=> b!62877 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(declare-fun res!34459 () Bool)

(assert (=> b!62877 (= res!34459 (contains!690 lt!26346 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!62877 (=> (not res!34459) (not e!41250))))

(declare-fun b!62878 () Bool)

(assert (=> b!62878 (= e!41252 e!41253)))

(declare-fun c!8423 () Bool)

(assert (=> b!62878 (= c!8423 e!41248)))

(declare-fun res!34458 () Bool)

(assert (=> b!62878 (=> (not res!34458) (not e!41248))))

(assert (=> b!62878 (= res!34458 (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(declare-fun b!62879 () Bool)

(assert (=> b!62879 (= e!41249 (ListLongMap!1364 Nil!1444))))

(assert (= (and d!12787 c!8425) b!62879))

(assert (= (and d!12787 (not c!8425)) b!62872))

(assert (= (and b!62872 c!8426) b!62869))

(assert (= (and b!62872 (not c!8426)) b!62876))

(assert (= (or b!62869 b!62876) bm!4962))

(assert (= (and d!12787 res!34461) b!62870))

(assert (= (and b!62870 res!34460) b!62878))

(assert (= (and b!62878 res!34458) b!62871))

(assert (= (and b!62878 c!8423) b!62877))

(assert (= (and b!62878 (not c!8423)) b!62875))

(assert (= (and b!62877 res!34459) b!62868))

(assert (= (and b!62875 c!8424) b!62873))

(assert (= (and b!62875 (not c!8424)) b!62874))

(declare-fun b_lambda!2797 () Bool)

(assert (=> (not b_lambda!2797) (not b!62868)))

(assert (=> b!62868 t!4844))

(declare-fun b_and!3829 () Bool)

(assert (= b_and!3825 (and (=> t!4844 result!2455) b_and!3829)))

(assert (=> b!62868 t!4846))

(declare-fun b_and!3831 () Bool)

(assert (= b_and!3827 (and (=> t!4846 result!2457) b_and!3831)))

(declare-fun b_lambda!2799 () Bool)

(assert (=> (not b_lambda!2799) (not b!62869)))

(assert (=> b!62869 t!4844))

(declare-fun b_and!3833 () Bool)

(assert (= b_and!3829 (and (=> t!4844 result!2455) b_and!3833)))

(assert (=> b!62869 t!4846))

(declare-fun b_and!3835 () Bool)

(assert (= b_and!3831 (and (=> t!4846 result!2457) b_and!3835)))

(assert (=> b!62877 m!55803))

(assert (=> b!62877 m!55803))

(declare-fun m!56483 () Bool)

(assert (=> b!62877 m!56483))

(declare-fun m!56485 () Bool)

(assert (=> b!62873 m!56485))

(assert (=> b!62868 m!55803))

(declare-fun m!56487 () Bool)

(assert (=> b!62868 m!56487))

(assert (=> b!62868 m!55803))

(assert (=> b!62868 m!55857))

(assert (=> b!62868 m!55859))

(assert (=> b!62868 m!55857))

(assert (=> b!62868 m!55861))

(assert (=> b!62868 m!55859))

(declare-fun m!56489 () Bool)

(assert (=> b!62870 m!56489))

(declare-fun m!56491 () Bool)

(assert (=> b!62874 m!56491))

(declare-fun m!56493 () Bool)

(assert (=> d!12787 m!56493))

(assert (=> d!12787 m!55783))

(declare-fun m!56495 () Bool)

(assert (=> b!62869 m!56495))

(assert (=> b!62869 m!55803))

(declare-fun m!56497 () Bool)

(assert (=> b!62869 m!56497))

(assert (=> b!62869 m!55859))

(assert (=> b!62869 m!55857))

(assert (=> b!62869 m!55861))

(assert (=> b!62869 m!55859))

(declare-fun m!56499 () Bool)

(assert (=> b!62869 m!56499))

(assert (=> b!62869 m!55857))

(assert (=> b!62869 m!56495))

(declare-fun m!56501 () Bool)

(assert (=> b!62869 m!56501))

(assert (=> bm!4962 m!56485))

(assert (=> b!62872 m!55803))

(assert (=> b!62872 m!55803))

(assert (=> b!62872 m!55843))

(assert (=> b!62871 m!55803))

(assert (=> b!62871 m!55803))

(assert (=> b!62871 m!55843))

(assert (=> b!62521 d!12787))

(declare-fun d!12789 () Bool)

(assert (=> d!12789 (contains!690 (+!83 lt!26038 (tuple2!2053 lt!26044 (zeroValue!1999 newMap!16))) lt!26051)))

(declare-fun lt!26348 () Unit!1685)

(assert (=> d!12789 (= lt!26348 (choose!345 lt!26038 lt!26044 (zeroValue!1999 newMap!16) lt!26051))))

(assert (=> d!12789 (contains!690 lt!26038 lt!26051)))

(assert (=> d!12789 (= (addStillContains!44 lt!26038 lt!26044 (zeroValue!1999 newMap!16) lt!26051) lt!26348)))

(declare-fun bs!2735 () Bool)

(assert (= bs!2735 d!12789))

(assert (=> bs!2735 m!55867))

(assert (=> bs!2735 m!55867))

(assert (=> bs!2735 m!55869))

(declare-fun m!56503 () Bool)

(assert (=> bs!2735 m!56503))

(declare-fun m!56505 () Bool)

(assert (=> bs!2735 m!56505))

(assert (=> b!62521 d!12789))

(declare-fun d!12791 () Bool)

(declare-fun e!41255 () Bool)

(assert (=> d!12791 e!41255))

(declare-fun res!34463 () Bool)

(assert (=> d!12791 (=> (not res!34463) (not e!41255))))

(declare-fun lt!26351 () ListLongMap!1363)

(assert (=> d!12791 (= res!34463 (contains!690 lt!26351 (_1!1037 (tuple2!2053 lt!26044 (zeroValue!1999 newMap!16)))))))

(declare-fun lt!26349 () List!1447)

(assert (=> d!12791 (= lt!26351 (ListLongMap!1364 lt!26349))))

(declare-fun lt!26350 () Unit!1685)

(declare-fun lt!26352 () Unit!1685)

(assert (=> d!12791 (= lt!26350 lt!26352)))

(assert (=> d!12791 (= (getValueByKey!124 lt!26349 (_1!1037 (tuple2!2053 lt!26044 (zeroValue!1999 newMap!16)))) (Some!129 (_2!1037 (tuple2!2053 lt!26044 (zeroValue!1999 newMap!16)))))))

(assert (=> d!12791 (= lt!26352 (lemmaContainsTupThenGetReturnValue!44 lt!26349 (_1!1037 (tuple2!2053 lt!26044 (zeroValue!1999 newMap!16))) (_2!1037 (tuple2!2053 lt!26044 (zeroValue!1999 newMap!16)))))))

(assert (=> d!12791 (= lt!26349 (insertStrictlySorted!47 (toList!697 lt!26038) (_1!1037 (tuple2!2053 lt!26044 (zeroValue!1999 newMap!16))) (_2!1037 (tuple2!2053 lt!26044 (zeroValue!1999 newMap!16)))))))

(assert (=> d!12791 (= (+!83 lt!26038 (tuple2!2053 lt!26044 (zeroValue!1999 newMap!16))) lt!26351)))

(declare-fun b!62880 () Bool)

(declare-fun res!34462 () Bool)

(assert (=> b!62880 (=> (not res!34462) (not e!41255))))

(assert (=> b!62880 (= res!34462 (= (getValueByKey!124 (toList!697 lt!26351) (_1!1037 (tuple2!2053 lt!26044 (zeroValue!1999 newMap!16)))) (Some!129 (_2!1037 (tuple2!2053 lt!26044 (zeroValue!1999 newMap!16))))))))

(declare-fun b!62881 () Bool)

(assert (=> b!62881 (= e!41255 (contains!692 (toList!697 lt!26351) (tuple2!2053 lt!26044 (zeroValue!1999 newMap!16))))))

(assert (= (and d!12791 res!34463) b!62880))

(assert (= (and b!62880 res!34462) b!62881))

(declare-fun m!56507 () Bool)

(assert (=> d!12791 m!56507))

(declare-fun m!56509 () Bool)

(assert (=> d!12791 m!56509))

(declare-fun m!56511 () Bool)

(assert (=> d!12791 m!56511))

(declare-fun m!56513 () Bool)

(assert (=> d!12791 m!56513))

(declare-fun m!56515 () Bool)

(assert (=> b!62880 m!56515))

(declare-fun m!56517 () Bool)

(assert (=> b!62881 m!56517))

(assert (=> b!62521 d!12791))

(declare-fun d!12793 () Bool)

(declare-fun e!41256 () Bool)

(assert (=> d!12793 e!41256))

(declare-fun res!34465 () Bool)

(assert (=> d!12793 (=> (not res!34465) (not e!41256))))

(declare-fun lt!26355 () ListLongMap!1363)

(assert (=> d!12793 (= res!34465 (contains!690 lt!26355 (_1!1037 (tuple2!2053 lt!26046 (minValue!1999 newMap!16)))))))

(declare-fun lt!26353 () List!1447)

(assert (=> d!12793 (= lt!26355 (ListLongMap!1364 lt!26353))))

(declare-fun lt!26354 () Unit!1685)

(declare-fun lt!26356 () Unit!1685)

(assert (=> d!12793 (= lt!26354 lt!26356)))

(assert (=> d!12793 (= (getValueByKey!124 lt!26353 (_1!1037 (tuple2!2053 lt!26046 (minValue!1999 newMap!16)))) (Some!129 (_2!1037 (tuple2!2053 lt!26046 (minValue!1999 newMap!16)))))))

(assert (=> d!12793 (= lt!26356 (lemmaContainsTupThenGetReturnValue!44 lt!26353 (_1!1037 (tuple2!2053 lt!26046 (minValue!1999 newMap!16))) (_2!1037 (tuple2!2053 lt!26046 (minValue!1999 newMap!16)))))))

(assert (=> d!12793 (= lt!26353 (insertStrictlySorted!47 (toList!697 lt!26035) (_1!1037 (tuple2!2053 lt!26046 (minValue!1999 newMap!16))) (_2!1037 (tuple2!2053 lt!26046 (minValue!1999 newMap!16)))))))

(assert (=> d!12793 (= (+!83 lt!26035 (tuple2!2053 lt!26046 (minValue!1999 newMap!16))) lt!26355)))

(declare-fun b!62882 () Bool)

(declare-fun res!34464 () Bool)

(assert (=> b!62882 (=> (not res!34464) (not e!41256))))

(assert (=> b!62882 (= res!34464 (= (getValueByKey!124 (toList!697 lt!26355) (_1!1037 (tuple2!2053 lt!26046 (minValue!1999 newMap!16)))) (Some!129 (_2!1037 (tuple2!2053 lt!26046 (minValue!1999 newMap!16))))))))

(declare-fun b!62883 () Bool)

(assert (=> b!62883 (= e!41256 (contains!692 (toList!697 lt!26355) (tuple2!2053 lt!26046 (minValue!1999 newMap!16))))))

(assert (= (and d!12793 res!34465) b!62882))

(assert (= (and b!62882 res!34464) b!62883))

(declare-fun m!56519 () Bool)

(assert (=> d!12793 m!56519))

(declare-fun m!56521 () Bool)

(assert (=> d!12793 m!56521))

(declare-fun m!56523 () Bool)

(assert (=> d!12793 m!56523))

(declare-fun m!56525 () Bool)

(assert (=> d!12793 m!56525))

(declare-fun m!56527 () Bool)

(assert (=> b!62882 m!56527))

(declare-fun m!56529 () Bool)

(assert (=> b!62883 m!56529))

(assert (=> b!62521 d!12793))

(declare-fun d!12795 () Bool)

(assert (=> d!12795 (= (apply!68 (+!83 lt!26043 (tuple2!2053 lt!26048 (zeroValue!1999 newMap!16))) lt!26036) (apply!68 lt!26043 lt!26036))))

(declare-fun lt!26357 () Unit!1685)

(assert (=> d!12795 (= lt!26357 (choose!344 lt!26043 lt!26048 (zeroValue!1999 newMap!16) lt!26036))))

(declare-fun e!41257 () Bool)

(assert (=> d!12795 e!41257))

(declare-fun res!34466 () Bool)

(assert (=> d!12795 (=> (not res!34466) (not e!41257))))

(assert (=> d!12795 (= res!34466 (contains!690 lt!26043 lt!26036))))

(assert (=> d!12795 (= (addApplyDifferent!44 lt!26043 lt!26048 (zeroValue!1999 newMap!16) lt!26036) lt!26357)))

(declare-fun b!62884 () Bool)

(assert (=> b!62884 (= e!41257 (not (= lt!26036 lt!26048)))))

(assert (= (and d!12795 res!34466) b!62884))

(declare-fun m!56531 () Bool)

(assert (=> d!12795 m!56531))

(assert (=> d!12795 m!55871))

(assert (=> d!12795 m!55879))

(assert (=> d!12795 m!55893))

(declare-fun m!56533 () Bool)

(assert (=> d!12795 m!56533))

(assert (=> d!12795 m!55879))

(assert (=> b!62521 d!12795))

(declare-fun d!12797 () Bool)

(assert (=> d!12797 (= (apply!68 lt!26040 lt!26054) (get!1092 (getValueByKey!124 (toList!697 lt!26040) lt!26054)))))

(declare-fun bs!2736 () Bool)

(assert (= bs!2736 d!12797))

(declare-fun m!56535 () Bool)

(assert (=> bs!2736 m!56535))

(assert (=> bs!2736 m!56535))

(declare-fun m!56537 () Bool)

(assert (=> bs!2736 m!56537))

(assert (=> b!62521 d!12797))

(declare-fun d!12799 () Bool)

(assert (=> d!12799 (= (apply!68 (+!83 lt!26040 (tuple2!2053 lt!26052 (minValue!1999 newMap!16))) lt!26054) (get!1092 (getValueByKey!124 (toList!697 (+!83 lt!26040 (tuple2!2053 lt!26052 (minValue!1999 newMap!16)))) lt!26054)))))

(declare-fun bs!2737 () Bool)

(assert (= bs!2737 d!12799))

(declare-fun m!56539 () Bool)

(assert (=> bs!2737 m!56539))

(assert (=> bs!2737 m!56539))

(declare-fun m!56541 () Bool)

(assert (=> bs!2737 m!56541))

(assert (=> b!62521 d!12799))

(declare-fun d!12801 () Bool)

(assert (=> d!12801 (= (apply!68 (+!83 lt!26043 (tuple2!2053 lt!26048 (zeroValue!1999 newMap!16))) lt!26036) (get!1092 (getValueByKey!124 (toList!697 (+!83 lt!26043 (tuple2!2053 lt!26048 (zeroValue!1999 newMap!16)))) lt!26036)))))

(declare-fun bs!2738 () Bool)

(assert (= bs!2738 d!12801))

(declare-fun m!56543 () Bool)

(assert (=> bs!2738 m!56543))

(assert (=> bs!2738 m!56543))

(declare-fun m!56545 () Bool)

(assert (=> bs!2738 m!56545))

(assert (=> b!62521 d!12801))

(declare-fun d!12803 () Bool)

(declare-fun e!41258 () Bool)

(assert (=> d!12803 e!41258))

(declare-fun res!34468 () Bool)

(assert (=> d!12803 (=> (not res!34468) (not e!41258))))

(declare-fun lt!26360 () ListLongMap!1363)

(assert (=> d!12803 (= res!34468 (contains!690 lt!26360 (_1!1037 (tuple2!2053 lt!26052 (minValue!1999 newMap!16)))))))

(declare-fun lt!26358 () List!1447)

(assert (=> d!12803 (= lt!26360 (ListLongMap!1364 lt!26358))))

(declare-fun lt!26359 () Unit!1685)

(declare-fun lt!26361 () Unit!1685)

(assert (=> d!12803 (= lt!26359 lt!26361)))

(assert (=> d!12803 (= (getValueByKey!124 lt!26358 (_1!1037 (tuple2!2053 lt!26052 (minValue!1999 newMap!16)))) (Some!129 (_2!1037 (tuple2!2053 lt!26052 (minValue!1999 newMap!16)))))))

(assert (=> d!12803 (= lt!26361 (lemmaContainsTupThenGetReturnValue!44 lt!26358 (_1!1037 (tuple2!2053 lt!26052 (minValue!1999 newMap!16))) (_2!1037 (tuple2!2053 lt!26052 (minValue!1999 newMap!16)))))))

(assert (=> d!12803 (= lt!26358 (insertStrictlySorted!47 (toList!697 lt!26040) (_1!1037 (tuple2!2053 lt!26052 (minValue!1999 newMap!16))) (_2!1037 (tuple2!2053 lt!26052 (minValue!1999 newMap!16)))))))

(assert (=> d!12803 (= (+!83 lt!26040 (tuple2!2053 lt!26052 (minValue!1999 newMap!16))) lt!26360)))

(declare-fun b!62885 () Bool)

(declare-fun res!34467 () Bool)

(assert (=> b!62885 (=> (not res!34467) (not e!41258))))

(assert (=> b!62885 (= res!34467 (= (getValueByKey!124 (toList!697 lt!26360) (_1!1037 (tuple2!2053 lt!26052 (minValue!1999 newMap!16)))) (Some!129 (_2!1037 (tuple2!2053 lt!26052 (minValue!1999 newMap!16))))))))

(declare-fun b!62886 () Bool)

(assert (=> b!62886 (= e!41258 (contains!692 (toList!697 lt!26360) (tuple2!2053 lt!26052 (minValue!1999 newMap!16))))))

(assert (= (and d!12803 res!34468) b!62885))

(assert (= (and b!62885 res!34467) b!62886))

(declare-fun m!56547 () Bool)

(assert (=> d!12803 m!56547))

(declare-fun m!56549 () Bool)

(assert (=> d!12803 m!56549))

(declare-fun m!56551 () Bool)

(assert (=> d!12803 m!56551))

(declare-fun m!56553 () Bool)

(assert (=> d!12803 m!56553))

(declare-fun m!56555 () Bool)

(assert (=> b!62885 m!56555))

(declare-fun m!56557 () Bool)

(assert (=> b!62886 m!56557))

(assert (=> b!62521 d!12803))

(declare-fun d!12805 () Bool)

(assert (=> d!12805 (= (apply!68 (+!83 lt!26040 (tuple2!2053 lt!26052 (minValue!1999 newMap!16))) lt!26054) (apply!68 lt!26040 lt!26054))))

(declare-fun lt!26362 () Unit!1685)

(assert (=> d!12805 (= lt!26362 (choose!344 lt!26040 lt!26052 (minValue!1999 newMap!16) lt!26054))))

(declare-fun e!41259 () Bool)

(assert (=> d!12805 e!41259))

(declare-fun res!34469 () Bool)

(assert (=> d!12805 (=> (not res!34469) (not e!41259))))

(assert (=> d!12805 (= res!34469 (contains!690 lt!26040 lt!26054))))

(assert (=> d!12805 (= (addApplyDifferent!44 lt!26040 lt!26052 (minValue!1999 newMap!16) lt!26054) lt!26362)))

(declare-fun b!62887 () Bool)

(assert (=> b!62887 (= e!41259 (not (= lt!26054 lt!26052)))))

(assert (= (and d!12805 res!34469) b!62887))

(declare-fun m!56559 () Bool)

(assert (=> d!12805 m!56559))

(assert (=> d!12805 m!55877))

(assert (=> d!12805 m!55873))

(assert (=> d!12805 m!55875))

(declare-fun m!56561 () Bool)

(assert (=> d!12805 m!56561))

(assert (=> d!12805 m!55873))

(assert (=> b!62521 d!12805))

(assert (=> b!62474 d!12617))

(declare-fun d!12807 () Bool)

(assert (=> d!12807 (= (get!1092 (getValueByKey!124 (toList!697 lt!25978) lt!25992)) (v!2418 (getValueByKey!124 (toList!697 lt!25978) lt!25992)))))

(assert (=> d!12677 d!12807))

(declare-fun d!12809 () Bool)

(declare-fun c!8427 () Bool)

(assert (=> d!12809 (= c!8427 (and ((_ is Cons!1443) (toList!697 lt!25978)) (= (_1!1037 (h!2026 (toList!697 lt!25978))) lt!25992)))))

(declare-fun e!41260 () Option!130)

(assert (=> d!12809 (= (getValueByKey!124 (toList!697 lt!25978) lt!25992) e!41260)))

(declare-fun b!62888 () Bool)

(assert (=> b!62888 (= e!41260 (Some!129 (_2!1037 (h!2026 (toList!697 lt!25978)))))))

(declare-fun b!62891 () Bool)

(declare-fun e!41261 () Option!130)

(assert (=> b!62891 (= e!41261 None!128)))

(declare-fun b!62889 () Bool)

(assert (=> b!62889 (= e!41260 e!41261)))

(declare-fun c!8428 () Bool)

(assert (=> b!62889 (= c!8428 (and ((_ is Cons!1443) (toList!697 lt!25978)) (not (= (_1!1037 (h!2026 (toList!697 lt!25978))) lt!25992))))))

(declare-fun b!62890 () Bool)

(assert (=> b!62890 (= e!41261 (getValueByKey!124 (t!4832 (toList!697 lt!25978)) lt!25992))))

(assert (= (and d!12809 c!8427) b!62888))

(assert (= (and d!12809 (not c!8427)) b!62889))

(assert (= (and b!62889 c!8428) b!62890))

(assert (= (and b!62889 (not c!8428)) b!62891))

(declare-fun m!56563 () Bool)

(assert (=> b!62890 m!56563))

(assert (=> d!12677 d!12809))

(declare-fun d!12811 () Bool)

(assert (=> d!12811 (= (get!1092 (getValueByKey!124 (toList!697 (+!83 lt!25978 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!25992)) (v!2418 (getValueByKey!124 (toList!697 (+!83 lt!25978 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!25992)))))

(assert (=> d!12671 d!12811))

(declare-fun c!8429 () Bool)

(declare-fun d!12813 () Bool)

(assert (=> d!12813 (= c!8429 (and ((_ is Cons!1443) (toList!697 (+!83 lt!25978 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))) (= (_1!1037 (h!2026 (toList!697 (+!83 lt!25978 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))) lt!25992)))))

(declare-fun e!41262 () Option!130)

(assert (=> d!12813 (= (getValueByKey!124 (toList!697 (+!83 lt!25978 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!25992) e!41262)))

(declare-fun b!62892 () Bool)

(assert (=> b!62892 (= e!41262 (Some!129 (_2!1037 (h!2026 (toList!697 (+!83 lt!25978 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))))

(declare-fun b!62895 () Bool)

(declare-fun e!41263 () Option!130)

(assert (=> b!62895 (= e!41263 None!128)))

(declare-fun b!62893 () Bool)

(assert (=> b!62893 (= e!41262 e!41263)))

(declare-fun c!8430 () Bool)

(assert (=> b!62893 (= c!8430 (and ((_ is Cons!1443) (toList!697 (+!83 lt!25978 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))) (not (= (_1!1037 (h!2026 (toList!697 (+!83 lt!25978 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))) lt!25992))))))

(declare-fun b!62894 () Bool)

(assert (=> b!62894 (= e!41263 (getValueByKey!124 (t!4832 (toList!697 (+!83 lt!25978 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))) lt!25992))))

(assert (= (and d!12813 c!8429) b!62892))

(assert (= (and d!12813 (not c!8429)) b!62893))

(assert (= (and b!62893 c!8430) b!62894))

(assert (= (and b!62893 (not c!8430)) b!62895))

(declare-fun m!56565 () Bool)

(assert (=> b!62894 m!56565))

(assert (=> d!12671 d!12813))

(declare-fun d!12815 () Bool)

(declare-fun e!41264 () Bool)

(assert (=> d!12815 e!41264))

(declare-fun res!34470 () Bool)

(assert (=> d!12815 (=> res!34470 e!41264)))

(declare-fun lt!26366 () Bool)

(assert (=> d!12815 (= res!34470 (not lt!26366))))

(declare-fun lt!26364 () Bool)

(assert (=> d!12815 (= lt!26366 lt!26364)))

(declare-fun lt!26365 () Unit!1685)

(declare-fun e!41265 () Unit!1685)

(assert (=> d!12815 (= lt!26365 e!41265)))

(declare-fun c!8431 () Bool)

(assert (=> d!12815 (= c!8431 lt!26364)))

(assert (=> d!12815 (= lt!26364 (containsKey!128 (toList!697 lt!26134) (_1!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(assert (=> d!12815 (= (contains!690 lt!26134 (_1!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!26366)))

(declare-fun b!62896 () Bool)

(declare-fun lt!26363 () Unit!1685)

(assert (=> b!62896 (= e!41265 lt!26363)))

(assert (=> b!62896 (= lt!26363 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 lt!26134) (_1!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(assert (=> b!62896 (isDefined!78 (getValueByKey!124 (toList!697 lt!26134) (_1!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun b!62897 () Bool)

(declare-fun Unit!1717 () Unit!1685)

(assert (=> b!62897 (= e!41265 Unit!1717)))

(declare-fun b!62898 () Bool)

(assert (=> b!62898 (= e!41264 (isDefined!78 (getValueByKey!124 (toList!697 lt!26134) (_1!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(assert (= (and d!12815 c!8431) b!62896))

(assert (= (and d!12815 (not c!8431)) b!62897))

(assert (= (and d!12815 (not res!34470)) b!62898))

(declare-fun m!56567 () Bool)

(assert (=> d!12815 m!56567))

(declare-fun m!56569 () Bool)

(assert (=> b!62896 m!56569))

(assert (=> b!62896 m!56067))

(assert (=> b!62896 m!56067))

(declare-fun m!56571 () Bool)

(assert (=> b!62896 m!56571))

(assert (=> b!62898 m!56067))

(assert (=> b!62898 m!56067))

(assert (=> b!62898 m!56571))

(assert (=> d!12655 d!12815))

(declare-fun d!12817 () Bool)

(declare-fun c!8432 () Bool)

(assert (=> d!12817 (= c!8432 (and ((_ is Cons!1443) lt!26132) (= (_1!1037 (h!2026 lt!26132)) (_1!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(declare-fun e!41266 () Option!130)

(assert (=> d!12817 (= (getValueByKey!124 lt!26132 (_1!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) e!41266)))

(declare-fun b!62899 () Bool)

(assert (=> b!62899 (= e!41266 (Some!129 (_2!1037 (h!2026 lt!26132))))))

(declare-fun b!62902 () Bool)

(declare-fun e!41267 () Option!130)

(assert (=> b!62902 (= e!41267 None!128)))

(declare-fun b!62900 () Bool)

(assert (=> b!62900 (= e!41266 e!41267)))

(declare-fun c!8433 () Bool)

(assert (=> b!62900 (= c!8433 (and ((_ is Cons!1443) lt!26132) (not (= (_1!1037 (h!2026 lt!26132)) (_1!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))))

(declare-fun b!62901 () Bool)

(assert (=> b!62901 (= e!41267 (getValueByKey!124 (t!4832 lt!26132) (_1!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(assert (= (and d!12817 c!8432) b!62899))

(assert (= (and d!12817 (not c!8432)) b!62900))

(assert (= (and b!62900 c!8433) b!62901))

(assert (= (and b!62900 (not c!8433)) b!62902))

(declare-fun m!56573 () Bool)

(assert (=> b!62901 m!56573))

(assert (=> d!12655 d!12817))

(declare-fun d!12819 () Bool)

(assert (=> d!12819 (= (getValueByKey!124 lt!26132 (_1!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) (Some!129 (_2!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun lt!26367 () Unit!1685)

(assert (=> d!12819 (= lt!26367 (choose!347 lt!26132 (_1!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun e!41268 () Bool)

(assert (=> d!12819 e!41268))

(declare-fun res!34471 () Bool)

(assert (=> d!12819 (=> (not res!34471) (not e!41268))))

(assert (=> d!12819 (= res!34471 (isStrictlySorted!281 lt!26132))))

(assert (=> d!12819 (= (lemmaContainsTupThenGetReturnValue!44 lt!26132 (_1!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!26367)))

(declare-fun b!62903 () Bool)

(declare-fun res!34472 () Bool)

(assert (=> b!62903 (=> (not res!34472) (not e!41268))))

(assert (=> b!62903 (= res!34472 (containsKey!128 lt!26132 (_1!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun b!62904 () Bool)

(assert (=> b!62904 (= e!41268 (contains!692 lt!26132 (tuple2!2053 (_1!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(assert (= (and d!12819 res!34471) b!62903))

(assert (= (and b!62903 res!34472) b!62904))

(assert (=> d!12819 m!56061))

(declare-fun m!56575 () Bool)

(assert (=> d!12819 m!56575))

(declare-fun m!56577 () Bool)

(assert (=> d!12819 m!56577))

(declare-fun m!56579 () Bool)

(assert (=> b!62903 m!56579))

(declare-fun m!56581 () Bool)

(assert (=> b!62904 m!56581))

(assert (=> d!12655 d!12819))

(declare-fun b!62905 () Bool)

(declare-fun e!41269 () List!1447)

(declare-fun call!4968 () List!1447)

(assert (=> b!62905 (= e!41269 call!4968)))

(declare-fun bm!4963 () Bool)

(declare-fun call!4966 () List!1447)

(assert (=> bm!4963 (= call!4968 call!4966)))

(declare-fun d!12821 () Bool)

(declare-fun e!41271 () Bool)

(assert (=> d!12821 e!41271))

(declare-fun res!34474 () Bool)

(assert (=> d!12821 (=> (not res!34474) (not e!41271))))

(declare-fun lt!26368 () List!1447)

(assert (=> d!12821 (= res!34474 (isStrictlySorted!281 lt!26368))))

(declare-fun e!41273 () List!1447)

(assert (=> d!12821 (= lt!26368 e!41273)))

(declare-fun c!8434 () Bool)

(assert (=> d!12821 (= c!8434 (and ((_ is Cons!1443) (toList!697 lt!25973)) (bvslt (_1!1037 (h!2026 (toList!697 lt!25973))) (_1!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(assert (=> d!12821 (isStrictlySorted!281 (toList!697 lt!25973))))

(assert (=> d!12821 (= (insertStrictlySorted!47 (toList!697 lt!25973) (_1!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!26368)))

(declare-fun c!8437 () Bool)

(declare-fun b!62906 () Bool)

(declare-fun c!8435 () Bool)

(declare-fun e!41272 () List!1447)

(assert (=> b!62906 (= e!41272 (ite c!8435 (t!4832 (toList!697 lt!25973)) (ite c!8437 (Cons!1443 (h!2026 (toList!697 lt!25973)) (t!4832 (toList!697 lt!25973))) Nil!1444)))))

(declare-fun b!62907 () Bool)

(declare-fun e!41270 () List!1447)

(declare-fun call!4967 () List!1447)

(assert (=> b!62907 (= e!41270 call!4967)))

(declare-fun b!62908 () Bool)

(assert (=> b!62908 (= e!41271 (contains!692 lt!26368 (tuple2!2053 (_1!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(declare-fun b!62909 () Bool)

(declare-fun res!34473 () Bool)

(assert (=> b!62909 (=> (not res!34473) (not e!41271))))

(assert (=> b!62909 (= res!34473 (containsKey!128 lt!26368 (_1!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun bm!4964 () Bool)

(assert (=> bm!4964 (= call!4966 ($colon$colon!61 e!41272 (ite c!8434 (h!2026 (toList!697 lt!25973)) (tuple2!2053 (_1!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))))

(declare-fun c!8436 () Bool)

(assert (=> bm!4964 (= c!8436 c!8434)))

(declare-fun b!62910 () Bool)

(assert (=> b!62910 (= e!41273 e!41269)))

(assert (=> b!62910 (= c!8435 (and ((_ is Cons!1443) (toList!697 lt!25973)) (= (_1!1037 (h!2026 (toList!697 lt!25973))) (_1!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(declare-fun b!62911 () Bool)

(assert (=> b!62911 (= c!8437 (and ((_ is Cons!1443) (toList!697 lt!25973)) (bvsgt (_1!1037 (h!2026 (toList!697 lt!25973))) (_1!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(assert (=> b!62911 (= e!41269 e!41270)))

(declare-fun b!62912 () Bool)

(assert (=> b!62912 (= e!41273 call!4966)))

(declare-fun b!62913 () Bool)

(assert (=> b!62913 (= e!41272 (insertStrictlySorted!47 (t!4832 (toList!697 lt!25973)) (_1!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun bm!4965 () Bool)

(assert (=> bm!4965 (= call!4967 call!4968)))

(declare-fun b!62914 () Bool)

(assert (=> b!62914 (= e!41270 call!4967)))

(assert (= (and d!12821 c!8434) b!62912))

(assert (= (and d!12821 (not c!8434)) b!62910))

(assert (= (and b!62910 c!8435) b!62905))

(assert (= (and b!62910 (not c!8435)) b!62911))

(assert (= (and b!62911 c!8437) b!62907))

(assert (= (and b!62911 (not c!8437)) b!62914))

(assert (= (or b!62907 b!62914) bm!4965))

(assert (= (or b!62905 bm!4965) bm!4963))

(assert (= (or b!62912 bm!4963) bm!4964))

(assert (= (and bm!4964 c!8436) b!62913))

(assert (= (and bm!4964 (not c!8436)) b!62906))

(assert (= (and d!12821 res!34474) b!62909))

(assert (= (and b!62909 res!34473) b!62908))

(declare-fun m!56583 () Bool)

(assert (=> b!62909 m!56583))

(declare-fun m!56585 () Bool)

(assert (=> bm!4964 m!56585))

(declare-fun m!56587 () Bool)

(assert (=> b!62908 m!56587))

(declare-fun m!56589 () Bool)

(assert (=> d!12821 m!56589))

(declare-fun m!56591 () Bool)

(assert (=> d!12821 m!56591))

(declare-fun m!56593 () Bool)

(assert (=> b!62913 m!56593))

(assert (=> d!12655 d!12821))

(declare-fun d!12823 () Bool)

(assert (=> d!12823 (= (isDefined!78 (getValueByKey!124 (toList!697 lt!25977) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!304 (getValueByKey!124 (toList!697 lt!25977) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!2739 () Bool)

(assert (= bs!2739 d!12823))

(assert (=> bs!2739 m!55919))

(declare-fun m!56595 () Bool)

(assert (=> bs!2739 m!56595))

(assert (=> b!62535 d!12823))

(declare-fun d!12825 () Bool)

(declare-fun c!8438 () Bool)

(assert (=> d!12825 (= c!8438 (and ((_ is Cons!1443) (toList!697 lt!25977)) (= (_1!1037 (h!2026 (toList!697 lt!25977))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!41274 () Option!130)

(assert (=> d!12825 (= (getValueByKey!124 (toList!697 lt!25977) #b0000000000000000000000000000000000000000000000000000000000000000) e!41274)))

(declare-fun b!62915 () Bool)

(assert (=> b!62915 (= e!41274 (Some!129 (_2!1037 (h!2026 (toList!697 lt!25977)))))))

(declare-fun b!62918 () Bool)

(declare-fun e!41275 () Option!130)

(assert (=> b!62918 (= e!41275 None!128)))

(declare-fun b!62916 () Bool)

(assert (=> b!62916 (= e!41274 e!41275)))

(declare-fun c!8439 () Bool)

(assert (=> b!62916 (= c!8439 (and ((_ is Cons!1443) (toList!697 lt!25977)) (not (= (_1!1037 (h!2026 (toList!697 lt!25977))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!62917 () Bool)

(assert (=> b!62917 (= e!41275 (getValueByKey!124 (t!4832 (toList!697 lt!25977)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!12825 c!8438) b!62915))

(assert (= (and d!12825 (not c!8438)) b!62916))

(assert (= (and b!62916 c!8439) b!62917))

(assert (= (and b!62916 (not c!8439)) b!62918))

(declare-fun m!56597 () Bool)

(assert (=> b!62917 m!56597))

(assert (=> b!62535 d!12825))

(declare-fun d!12827 () Bool)

(declare-fun lt!26369 () Bool)

(assert (=> d!12827 (= lt!26369 (select (content!67 Nil!1443) (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!41277 () Bool)

(assert (=> d!12827 (= lt!26369 e!41277)))

(declare-fun res!34475 () Bool)

(assert (=> d!12827 (=> (not res!34475) (not e!41277))))

(assert (=> d!12827 (= res!34475 ((_ is Cons!1442) Nil!1443))))

(assert (=> d!12827 (= (contains!691 Nil!1443 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)) lt!26369)))

(declare-fun b!62919 () Bool)

(declare-fun e!41276 () Bool)

(assert (=> b!62919 (= e!41277 e!41276)))

(declare-fun res!34476 () Bool)

(assert (=> b!62919 (=> res!34476 e!41276)))

(assert (=> b!62919 (= res!34476 (= (h!2025 Nil!1443) (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62920 () Bool)

(assert (=> b!62920 (= e!41276 (contains!691 (t!4831 Nil!1443) (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!12827 res!34475) b!62919))

(assert (= (and b!62919 (not res!34476)) b!62920))

(assert (=> d!12827 m!55765))

(assert (=> d!12827 m!55803))

(declare-fun m!56599 () Bool)

(assert (=> d!12827 m!56599))

(assert (=> b!62920 m!55803))

(declare-fun m!56601 () Bool)

(assert (=> b!62920 m!56601))

(assert (=> b!62557 d!12827))

(declare-fun d!12829 () Bool)

(assert (=> d!12829 (= (validKeyInArray!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) (and (not (= (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62591 d!12829))

(declare-fun d!12831 () Bool)

(assert (=> d!12831 (= (get!1090 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2411 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!62643 d!12831))

(declare-fun d!12833 () Bool)

(declare-fun e!41278 () Bool)

(assert (=> d!12833 e!41278))

(declare-fun res!34478 () Bool)

(assert (=> d!12833 (=> (not res!34478) (not e!41278))))

(declare-fun lt!26372 () ListLongMap!1363)

(assert (=> d!12833 (= res!34478 (contains!690 lt!26372 (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))))))

(declare-fun lt!26370 () List!1447)

(assert (=> d!12833 (= lt!26372 (ListLongMap!1364 lt!26370))))

(declare-fun lt!26371 () Unit!1685)

(declare-fun lt!26373 () Unit!1685)

(assert (=> d!12833 (= lt!26371 lt!26373)))

(assert (=> d!12833 (= (getValueByKey!124 lt!26370 (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))) (Some!129 (_2!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))))))

(assert (=> d!12833 (= lt!26373 (lemmaContainsTupThenGetReturnValue!44 lt!26370 (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))) (_2!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))))))

(assert (=> d!12833 (= lt!26370 (insertStrictlySorted!47 (toList!697 call!4931) (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))) (_2!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))))))

(assert (=> d!12833 (= (+!83 call!4931 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))) lt!26372)))

(declare-fun b!62921 () Bool)

(declare-fun res!34477 () Bool)

(assert (=> b!62921 (=> (not res!34477) (not e!41278))))

(assert (=> b!62921 (= res!34477 (= (getValueByKey!124 (toList!697 lt!26372) (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))) (Some!129 (_2!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))))))))

(declare-fun b!62922 () Bool)

(assert (=> b!62922 (= e!41278 (contains!692 (toList!697 lt!26372) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))))))

(assert (= (and d!12833 res!34478) b!62921))

(assert (= (and b!62921 res!34477) b!62922))

(declare-fun m!56603 () Bool)

(assert (=> d!12833 m!56603))

(declare-fun m!56605 () Bool)

(assert (=> d!12833 m!56605))

(declare-fun m!56607 () Bool)

(assert (=> d!12833 m!56607))

(declare-fun m!56609 () Bool)

(assert (=> d!12833 m!56609))

(declare-fun m!56611 () Bool)

(assert (=> b!62921 m!56611))

(declare-fun m!56613 () Bool)

(assert (=> b!62922 m!56613))

(assert (=> b!62629 d!12833))

(declare-fun d!12835 () Bool)

(declare-fun e!41279 () Bool)

(assert (=> d!12835 e!41279))

(declare-fun res!34480 () Bool)

(assert (=> d!12835 (=> (not res!34480) (not e!41279))))

(declare-fun lt!26376 () ListLongMap!1363)

(assert (=> d!12835 (= res!34480 (contains!690 lt!26376 (_1!1037 (ite (or c!8340 c!8341) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))))

(declare-fun lt!26374 () List!1447)

(assert (=> d!12835 (= lt!26376 (ListLongMap!1364 lt!26374))))

(declare-fun lt!26375 () Unit!1685)

(declare-fun lt!26377 () Unit!1685)

(assert (=> d!12835 (= lt!26375 lt!26377)))

(assert (=> d!12835 (= (getValueByKey!124 lt!26374 (_1!1037 (ite (or c!8340 c!8341) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))) (Some!129 (_2!1037 (ite (or c!8340 c!8341) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))))

(assert (=> d!12835 (= lt!26377 (lemmaContainsTupThenGetReturnValue!44 lt!26374 (_1!1037 (ite (or c!8340 c!8341) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))) (_2!1037 (ite (or c!8340 c!8341) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))))

(assert (=> d!12835 (= lt!26374 (insertStrictlySorted!47 (toList!697 (ite c!8340 call!4922 (ite c!8341 call!4921 call!4923))) (_1!1037 (ite (or c!8340 c!8341) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))) (_2!1037 (ite (or c!8340 c!8341) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))))

(assert (=> d!12835 (= (+!83 (ite c!8340 call!4922 (ite c!8341 call!4921 call!4923)) (ite (or c!8340 c!8341) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))) lt!26376)))

(declare-fun b!62923 () Bool)

(declare-fun res!34479 () Bool)

(assert (=> b!62923 (=> (not res!34479) (not e!41279))))

(assert (=> b!62923 (= res!34479 (= (getValueByKey!124 (toList!697 lt!26376) (_1!1037 (ite (or c!8340 c!8341) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))) (Some!129 (_2!1037 (ite (or c!8340 c!8341) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))))

(declare-fun b!62924 () Bool)

(assert (=> b!62924 (= e!41279 (contains!692 (toList!697 lt!26376) (ite (or c!8340 c!8341) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(assert (= (and d!12835 res!34480) b!62923))

(assert (= (and b!62923 res!34479) b!62924))

(declare-fun m!56615 () Bool)

(assert (=> d!12835 m!56615))

(declare-fun m!56617 () Bool)

(assert (=> d!12835 m!56617))

(declare-fun m!56619 () Bool)

(assert (=> d!12835 m!56619))

(declare-fun m!56621 () Bool)

(assert (=> d!12835 m!56621))

(declare-fun m!56623 () Bool)

(assert (=> b!62923 m!56623))

(declare-fun m!56625 () Bool)

(assert (=> b!62924 m!56625))

(assert (=> bm!4918 d!12835))

(declare-fun d!12837 () Bool)

(declare-fun e!41280 () Bool)

(assert (=> d!12837 e!41280))

(declare-fun res!34481 () Bool)

(assert (=> d!12837 (=> res!34481 e!41280)))

(declare-fun lt!26381 () Bool)

(assert (=> d!12837 (= res!34481 (not lt!26381))))

(declare-fun lt!26379 () Bool)

(assert (=> d!12837 (= lt!26381 lt!26379)))

(declare-fun lt!26380 () Unit!1685)

(declare-fun e!41281 () Unit!1685)

(assert (=> d!12837 (= lt!26380 e!41281)))

(declare-fun c!8440 () Bool)

(assert (=> d!12837 (= c!8440 lt!26379)))

(assert (=> d!12837 (= lt!26379 (containsKey!128 (toList!697 lt!26145) (_1!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(assert (=> d!12837 (= (contains!690 lt!26145 (_1!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!26381)))

(declare-fun b!62925 () Bool)

(declare-fun lt!26378 () Unit!1685)

(assert (=> b!62925 (= e!41281 lt!26378)))

(assert (=> b!62925 (= lt!26378 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 lt!26145) (_1!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(assert (=> b!62925 (isDefined!78 (getValueByKey!124 (toList!697 lt!26145) (_1!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun b!62926 () Bool)

(declare-fun Unit!1718 () Unit!1685)

(assert (=> b!62926 (= e!41281 Unit!1718)))

(declare-fun b!62927 () Bool)

(assert (=> b!62927 (= e!41280 (isDefined!78 (getValueByKey!124 (toList!697 lt!26145) (_1!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(assert (= (and d!12837 c!8440) b!62925))

(assert (= (and d!12837 (not c!8440)) b!62926))

(assert (= (and d!12837 (not res!34481)) b!62927))

(declare-fun m!56627 () Bool)

(assert (=> d!12837 m!56627))

(declare-fun m!56629 () Bool)

(assert (=> b!62925 m!56629))

(assert (=> b!62925 m!56095))

(assert (=> b!62925 m!56095))

(declare-fun m!56631 () Bool)

(assert (=> b!62925 m!56631))

(assert (=> b!62927 m!56095))

(assert (=> b!62927 m!56095))

(assert (=> b!62927 m!56631))

(assert (=> d!12661 d!12837))

(declare-fun c!8441 () Bool)

(declare-fun d!12839 () Bool)

(assert (=> d!12839 (= c!8441 (and ((_ is Cons!1443) lt!26143) (= (_1!1037 (h!2026 lt!26143)) (_1!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(declare-fun e!41282 () Option!130)

(assert (=> d!12839 (= (getValueByKey!124 lt!26143 (_1!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))) e!41282)))

(declare-fun b!62928 () Bool)

(assert (=> b!62928 (= e!41282 (Some!129 (_2!1037 (h!2026 lt!26143))))))

(declare-fun b!62931 () Bool)

(declare-fun e!41283 () Option!130)

(assert (=> b!62931 (= e!41283 None!128)))

(declare-fun b!62929 () Bool)

(assert (=> b!62929 (= e!41282 e!41283)))

(declare-fun c!8442 () Bool)

(assert (=> b!62929 (= c!8442 (and ((_ is Cons!1443) lt!26143) (not (= (_1!1037 (h!2026 lt!26143)) (_1!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))))))

(declare-fun b!62930 () Bool)

(assert (=> b!62930 (= e!41283 (getValueByKey!124 (t!4832 lt!26143) (_1!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(assert (= (and d!12839 c!8441) b!62928))

(assert (= (and d!12839 (not c!8441)) b!62929))

(assert (= (and b!62929 c!8442) b!62930))

(assert (= (and b!62929 (not c!8442)) b!62931))

(declare-fun m!56633 () Bool)

(assert (=> b!62930 m!56633))

(assert (=> d!12661 d!12839))

(declare-fun d!12841 () Bool)

(assert (=> d!12841 (= (getValueByKey!124 lt!26143 (_1!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))) (Some!129 (_2!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun lt!26382 () Unit!1685)

(assert (=> d!12841 (= lt!26382 (choose!347 lt!26143 (_1!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun e!41284 () Bool)

(assert (=> d!12841 e!41284))

(declare-fun res!34482 () Bool)

(assert (=> d!12841 (=> (not res!34482) (not e!41284))))

(assert (=> d!12841 (= res!34482 (isStrictlySorted!281 lt!26143))))

(assert (=> d!12841 (= (lemmaContainsTupThenGetReturnValue!44 lt!26143 (_1!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!26382)))

(declare-fun b!62932 () Bool)

(declare-fun res!34483 () Bool)

(assert (=> b!62932 (=> (not res!34483) (not e!41284))))

(assert (=> b!62932 (= res!34483 (containsKey!128 lt!26143 (_1!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun b!62933 () Bool)

(assert (=> b!62933 (= e!41284 (contains!692 lt!26143 (tuple2!2053 (_1!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(assert (= (and d!12841 res!34482) b!62932))

(assert (= (and b!62932 res!34483) b!62933))

(assert (=> d!12841 m!56089))

(declare-fun m!56635 () Bool)

(assert (=> d!12841 m!56635))

(declare-fun m!56637 () Bool)

(assert (=> d!12841 m!56637))

(declare-fun m!56639 () Bool)

(assert (=> b!62932 m!56639))

(declare-fun m!56641 () Bool)

(assert (=> b!62933 m!56641))

(assert (=> d!12661 d!12841))

(declare-fun b!62934 () Bool)

(declare-fun e!41285 () List!1447)

(declare-fun call!4971 () List!1447)

(assert (=> b!62934 (= e!41285 call!4971)))

(declare-fun bm!4966 () Bool)

(declare-fun call!4969 () List!1447)

(assert (=> bm!4966 (= call!4971 call!4969)))

(declare-fun d!12843 () Bool)

(declare-fun e!41287 () Bool)

(assert (=> d!12843 e!41287))

(declare-fun res!34485 () Bool)

(assert (=> d!12843 (=> (not res!34485) (not e!41287))))

(declare-fun lt!26383 () List!1447)

(assert (=> d!12843 (= res!34485 (isStrictlySorted!281 lt!26383))))

(declare-fun e!41289 () List!1447)

(assert (=> d!12843 (= lt!26383 e!41289)))

(declare-fun c!8443 () Bool)

(assert (=> d!12843 (= c!8443 (and ((_ is Cons!1443) (toList!697 lt!25976)) (bvslt (_1!1037 (h!2026 (toList!697 lt!25976))) (_1!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(assert (=> d!12843 (isStrictlySorted!281 (toList!697 lt!25976))))

(assert (=> d!12843 (= (insertStrictlySorted!47 (toList!697 lt!25976) (_1!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!26383)))

(declare-fun c!8444 () Bool)

(declare-fun b!62935 () Bool)

(declare-fun e!41288 () List!1447)

(declare-fun c!8446 () Bool)

(assert (=> b!62935 (= e!41288 (ite c!8444 (t!4832 (toList!697 lt!25976)) (ite c!8446 (Cons!1443 (h!2026 (toList!697 lt!25976)) (t!4832 (toList!697 lt!25976))) Nil!1444)))))

(declare-fun b!62936 () Bool)

(declare-fun e!41286 () List!1447)

(declare-fun call!4970 () List!1447)

(assert (=> b!62936 (= e!41286 call!4970)))

(declare-fun b!62937 () Bool)

(assert (=> b!62937 (= e!41287 (contains!692 lt!26383 (tuple2!2053 (_1!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(declare-fun b!62938 () Bool)

(declare-fun res!34484 () Bool)

(assert (=> b!62938 (=> (not res!34484) (not e!41287))))

(assert (=> b!62938 (= res!34484 (containsKey!128 lt!26383 (_1!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun bm!4967 () Bool)

(assert (=> bm!4967 (= call!4969 ($colon$colon!61 e!41288 (ite c!8443 (h!2026 (toList!697 lt!25976)) (tuple2!2053 (_1!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))))))

(declare-fun c!8445 () Bool)

(assert (=> bm!4967 (= c!8445 c!8443)))

(declare-fun b!62939 () Bool)

(assert (=> b!62939 (= e!41289 e!41285)))

(assert (=> b!62939 (= c!8444 (and ((_ is Cons!1443) (toList!697 lt!25976)) (= (_1!1037 (h!2026 (toList!697 lt!25976))) (_1!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(declare-fun b!62940 () Bool)

(assert (=> b!62940 (= c!8446 (and ((_ is Cons!1443) (toList!697 lt!25976)) (bvsgt (_1!1037 (h!2026 (toList!697 lt!25976))) (_1!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(assert (=> b!62940 (= e!41285 e!41286)))

(declare-fun b!62941 () Bool)

(assert (=> b!62941 (= e!41289 call!4969)))

(declare-fun b!62942 () Bool)

(assert (=> b!62942 (= e!41288 (insertStrictlySorted!47 (t!4832 (toList!697 lt!25976)) (_1!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun bm!4968 () Bool)

(assert (=> bm!4968 (= call!4970 call!4971)))

(declare-fun b!62943 () Bool)

(assert (=> b!62943 (= e!41286 call!4970)))

(assert (= (and d!12843 c!8443) b!62941))

(assert (= (and d!12843 (not c!8443)) b!62939))

(assert (= (and b!62939 c!8444) b!62934))

(assert (= (and b!62939 (not c!8444)) b!62940))

(assert (= (and b!62940 c!8446) b!62936))

(assert (= (and b!62940 (not c!8446)) b!62943))

(assert (= (or b!62936 b!62943) bm!4968))

(assert (= (or b!62934 bm!4968) bm!4966))

(assert (= (or b!62941 bm!4966) bm!4967))

(assert (= (and bm!4967 c!8445) b!62942))

(assert (= (and bm!4967 (not c!8445)) b!62935))

(assert (= (and d!12843 res!34485) b!62938))

(assert (= (and b!62938 res!34484) b!62937))

(declare-fun m!56643 () Bool)

(assert (=> b!62938 m!56643))

(declare-fun m!56645 () Bool)

(assert (=> bm!4967 m!56645))

(declare-fun m!56647 () Bool)

(assert (=> b!62937 m!56647))

(declare-fun m!56649 () Bool)

(assert (=> d!12843 m!56649))

(declare-fun m!56651 () Bool)

(assert (=> d!12843 m!56651))

(declare-fun m!56653 () Bool)

(assert (=> b!62942 m!56653))

(assert (=> d!12661 d!12843))

(declare-fun b!62962 () Bool)

(declare-fun e!41301 () Bool)

(declare-fun lt!26388 () SeekEntryResult!232)

(assert (=> b!62962 (= e!41301 (bvsge (x!10309 lt!26388) #b01111111111111111111111111111110))))

(declare-fun b!62963 () Bool)

(declare-fun e!41303 () SeekEntryResult!232)

(declare-fun e!41300 () SeekEntryResult!232)

(assert (=> b!62963 (= e!41303 e!41300)))

(declare-fun c!8454 () Bool)

(declare-fun lt!26389 () (_ BitVec 64))

(assert (=> b!62963 (= c!8454 (or (= lt!26389 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (= (bvadd lt!26389 lt!26389) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!62964 () Bool)

(assert (=> b!62964 (and (bvsge (index!3055 lt!26388) #b00000000000000000000000000000000) (bvslt (index!3055 lt!26388) (size!2019 (_keys!3718 newMap!16))))))

(declare-fun res!34492 () Bool)

(assert (=> b!62964 (= res!34492 (= (select (arr!1786 (_keys!3718 newMap!16)) (index!3055 lt!26388)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!41302 () Bool)

(assert (=> b!62964 (=> res!34492 e!41302)))

(declare-fun b!62965 () Bool)

(declare-fun e!41304 () Bool)

(assert (=> b!62965 (= e!41301 e!41304)))

(declare-fun res!34494 () Bool)

(assert (=> b!62965 (= res!34494 (and ((_ is Intermediate!232) lt!26388) (not (undefined!1044 lt!26388)) (bvslt (x!10309 lt!26388) #b01111111111111111111111111111110) (bvsge (x!10309 lt!26388) #b00000000000000000000000000000000) (bvsge (x!10309 lt!26388) #b00000000000000000000000000000000)))))

(assert (=> b!62965 (=> (not res!34494) (not e!41304))))

(declare-fun b!62966 () Bool)

(assert (=> b!62966 (and (bvsge (index!3055 lt!26388) #b00000000000000000000000000000000) (bvslt (index!3055 lt!26388) (size!2019 (_keys!3718 newMap!16))))))

(assert (=> b!62966 (= e!41302 (= (select (arr!1786 (_keys!3718 newMap!16)) (index!3055 lt!26388)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62967 () Bool)

(assert (=> b!62967 (and (bvsge (index!3055 lt!26388) #b00000000000000000000000000000000) (bvslt (index!3055 lt!26388) (size!2019 (_keys!3718 newMap!16))))))

(declare-fun res!34493 () Bool)

(assert (=> b!62967 (= res!34493 (= (select (arr!1786 (_keys!3718 newMap!16)) (index!3055 lt!26388)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(assert (=> b!62967 (=> res!34493 e!41302)))

(assert (=> b!62967 (= e!41304 e!41302)))

(declare-fun b!62968 () Bool)

(assert (=> b!62968 (= e!41300 (Intermediate!232 false (toIndex!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (mask!5992 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun d!12845 () Bool)

(assert (=> d!12845 e!41301))

(declare-fun c!8453 () Bool)

(assert (=> d!12845 (= c!8453 (and ((_ is Intermediate!232) lt!26388) (undefined!1044 lt!26388)))))

(assert (=> d!12845 (= lt!26388 e!41303)))

(declare-fun c!8455 () Bool)

(assert (=> d!12845 (= c!8455 (bvsge #b00000000000000000000000000000000 #b01111111111111111111111111111110))))

(assert (=> d!12845 (= lt!26389 (select (arr!1786 (_keys!3718 newMap!16)) (toIndex!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (mask!5992 newMap!16))))))

(assert (=> d!12845 (validMask!0 (mask!5992 newMap!16))))

(assert (=> d!12845 (= (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (mask!5992 newMap!16)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (_keys!3718 newMap!16) (mask!5992 newMap!16)) lt!26388)))

(declare-fun b!62969 () Bool)

(declare-fun nextIndex!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!62969 (= e!41300 (seekKeyOrZeroOrLongMinValue!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (nextIndex!0 (toIndex!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (mask!5992 newMap!16)) #b00000000000000000000000000000000 (mask!5992 newMap!16)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (_keys!3718 newMap!16) (mask!5992 newMap!16)))))

(declare-fun b!62970 () Bool)

(assert (=> b!62970 (= e!41303 (Intermediate!232 true (toIndex!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (mask!5992 newMap!16)) #b00000000000000000000000000000000))))

(assert (= (and d!12845 c!8455) b!62970))

(assert (= (and d!12845 (not c!8455)) b!62963))

(assert (= (and b!62963 c!8454) b!62968))

(assert (= (and b!62963 (not c!8454)) b!62969))

(assert (= (and d!12845 c!8453) b!62962))

(assert (= (and d!12845 (not c!8453)) b!62965))

(assert (= (and b!62965 res!34494) b!62967))

(assert (= (and b!62967 (not res!34493)) b!62964))

(assert (= (and b!62964 (not res!34492)) b!62966))

(declare-fun m!56655 () Bool)

(assert (=> b!62966 m!56655))

(assert (=> b!62964 m!56655))

(assert (=> d!12845 m!56209))

(declare-fun m!56657 () Bool)

(assert (=> d!12845 m!56657))

(assert (=> d!12845 m!55783))

(assert (=> b!62969 m!56209))

(declare-fun m!56659 () Bool)

(assert (=> b!62969 m!56659))

(assert (=> b!62969 m!56659))

(assert (=> b!62969 m!55481))

(declare-fun m!56661 () Bool)

(assert (=> b!62969 m!56661))

(assert (=> b!62967 m!56655))

(assert (=> d!12689 d!12845))

(declare-fun d!12847 () Bool)

(declare-fun lt!26395 () (_ BitVec 32))

(declare-fun lt!26394 () (_ BitVec 32))

(assert (=> d!12847 (= lt!26395 (bvmul (bvxor lt!26394 (bvlshr lt!26394 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))))

(assert (=> d!12847 (= lt!26394 ((_ extract 31 0) (bvand (bvxor (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (bvlshr (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))))

(assert (=> d!12847 (and (bvsge (mask!5992 newMap!16) #b00000000000000000000000000000000) (let ((res!34495 (let ((h!2029 ((_ extract 31 0) (bvand (bvxor (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (bvlshr (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))) (let ((x!10412 (bvmul (bvxor h!2029 (bvlshr h!2029 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))) (bvand (bvxor x!10412 (bvlshr x!10412 #b00000000000000000000000000001101)) (mask!5992 newMap!16)))))) (and (bvslt res!34495 (bvadd (mask!5992 newMap!16) #b00000000000000000000000000000001)) (bvsge res!34495 #b00000000000000000000000000000000))))))

(assert (=> d!12847 (= (toIndex!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (mask!5992 newMap!16)) (bvand (bvxor lt!26395 (bvlshr lt!26395 #b00000000000000000000000000001101)) (mask!5992 newMap!16)))))

(assert (=> d!12689 d!12847))

(assert (=> d!12689 d!12755))

(declare-fun d!12849 () Bool)

(declare-fun e!41305 () Bool)

(assert (=> d!12849 e!41305))

(declare-fun res!34496 () Bool)

(assert (=> d!12849 (=> res!34496 e!41305)))

(declare-fun lt!26399 () Bool)

(assert (=> d!12849 (= res!34496 (not lt!26399))))

(declare-fun lt!26397 () Bool)

(assert (=> d!12849 (= lt!26399 lt!26397)))

(declare-fun lt!26398 () Unit!1685)

(declare-fun e!41306 () Unit!1685)

(assert (=> d!12849 (= lt!26398 e!41306)))

(declare-fun c!8456 () Bool)

(assert (=> d!12849 (= c!8456 lt!26397)))

(assert (=> d!12849 (= lt!26397 (containsKey!128 (toList!697 lt!26120) (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12849 (= (contains!690 lt!26120 (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!26399)))

(declare-fun b!62971 () Bool)

(declare-fun lt!26396 () Unit!1685)

(assert (=> b!62971 (= e!41306 lt!26396)))

(assert (=> b!62971 (= lt!26396 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 lt!26120) (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> b!62971 (isDefined!78 (getValueByKey!124 (toList!697 lt!26120) (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!62972 () Bool)

(declare-fun Unit!1719 () Unit!1685)

(assert (=> b!62972 (= e!41306 Unit!1719)))

(declare-fun b!62973 () Bool)

(assert (=> b!62973 (= e!41305 (isDefined!78 (getValueByKey!124 (toList!697 lt!26120) (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!12849 c!8456) b!62971))

(assert (= (and d!12849 (not c!8456)) b!62972))

(assert (= (and d!12849 (not res!34496)) b!62973))

(declare-fun m!56663 () Bool)

(assert (=> d!12849 m!56663))

(declare-fun m!56665 () Bool)

(assert (=> b!62971 m!56665))

(assert (=> b!62971 m!56021))

(assert (=> b!62971 m!56021))

(declare-fun m!56667 () Bool)

(assert (=> b!62971 m!56667))

(assert (=> b!62973 m!56021))

(assert (=> b!62973 m!56021))

(assert (=> b!62973 m!56667))

(assert (=> d!12641 d!12849))

(declare-fun c!8457 () Bool)

(declare-fun d!12851 () Bool)

(assert (=> d!12851 (= c!8457 (and ((_ is Cons!1443) lt!26118) (= (_1!1037 (h!2026 lt!26118)) (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!41307 () Option!130)

(assert (=> d!12851 (= (getValueByKey!124 lt!26118 (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!41307)))

(declare-fun b!62974 () Bool)

(assert (=> b!62974 (= e!41307 (Some!129 (_2!1037 (h!2026 lt!26118))))))

(declare-fun b!62977 () Bool)

(declare-fun e!41308 () Option!130)

(assert (=> b!62977 (= e!41308 None!128)))

(declare-fun b!62975 () Bool)

(assert (=> b!62975 (= e!41307 e!41308)))

(declare-fun c!8458 () Bool)

(assert (=> b!62975 (= c!8458 (and ((_ is Cons!1443) lt!26118) (not (= (_1!1037 (h!2026 lt!26118)) (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!62976 () Bool)

(assert (=> b!62976 (= e!41308 (getValueByKey!124 (t!4832 lt!26118) (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!12851 c!8457) b!62974))

(assert (= (and d!12851 (not c!8457)) b!62975))

(assert (= (and b!62975 c!8458) b!62976))

(assert (= (and b!62975 (not c!8458)) b!62977))

(declare-fun m!56669 () Bool)

(assert (=> b!62976 m!56669))

(assert (=> d!12641 d!12851))

(declare-fun d!12853 () Bool)

(assert (=> d!12853 (= (getValueByKey!124 lt!26118 (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!26400 () Unit!1685)

(assert (=> d!12853 (= lt!26400 (choose!347 lt!26118 (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!41309 () Bool)

(assert (=> d!12853 e!41309))

(declare-fun res!34497 () Bool)

(assert (=> d!12853 (=> (not res!34497) (not e!41309))))

(assert (=> d!12853 (= res!34497 (isStrictlySorted!281 lt!26118))))

(assert (=> d!12853 (= (lemmaContainsTupThenGetReturnValue!44 lt!26118 (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!26400)))

(declare-fun b!62978 () Bool)

(declare-fun res!34498 () Bool)

(assert (=> b!62978 (=> (not res!34498) (not e!41309))))

(assert (=> b!62978 (= res!34498 (containsKey!128 lt!26118 (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!62979 () Bool)

(assert (=> b!62979 (= e!41309 (contains!692 lt!26118 (tuple2!2053 (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!12853 res!34497) b!62978))

(assert (= (and b!62978 res!34498) b!62979))

(assert (=> d!12853 m!56015))

(declare-fun m!56671 () Bool)

(assert (=> d!12853 m!56671))

(declare-fun m!56673 () Bool)

(assert (=> d!12853 m!56673))

(declare-fun m!56675 () Bool)

(assert (=> b!62978 m!56675))

(declare-fun m!56677 () Bool)

(assert (=> b!62979 m!56677))

(assert (=> d!12641 d!12853))

(declare-fun b!62980 () Bool)

(declare-fun e!41310 () List!1447)

(declare-fun call!4974 () List!1447)

(assert (=> b!62980 (= e!41310 call!4974)))

(declare-fun bm!4969 () Bool)

(declare-fun call!4972 () List!1447)

(assert (=> bm!4969 (= call!4974 call!4972)))

(declare-fun d!12855 () Bool)

(declare-fun e!41312 () Bool)

(assert (=> d!12855 e!41312))

(declare-fun res!34500 () Bool)

(assert (=> d!12855 (=> (not res!34500) (not e!41312))))

(declare-fun lt!26401 () List!1447)

(assert (=> d!12855 (= res!34500 (isStrictlySorted!281 lt!26401))))

(declare-fun e!41314 () List!1447)

(assert (=> d!12855 (= lt!26401 e!41314)))

(declare-fun c!8459 () Bool)

(assert (=> d!12855 (= c!8459 (and ((_ is Cons!1443) (toList!697 call!4860)) (bvslt (_1!1037 (h!2026 (toList!697 call!4860))) (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!12855 (isStrictlySorted!281 (toList!697 call!4860))))

(assert (=> d!12855 (= (insertStrictlySorted!47 (toList!697 call!4860) (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!26401)))

(declare-fun b!62981 () Bool)

(declare-fun c!8462 () Bool)

(declare-fun c!8460 () Bool)

(declare-fun e!41313 () List!1447)

(assert (=> b!62981 (= e!41313 (ite c!8460 (t!4832 (toList!697 call!4860)) (ite c!8462 (Cons!1443 (h!2026 (toList!697 call!4860)) (t!4832 (toList!697 call!4860))) Nil!1444)))))

(declare-fun b!62982 () Bool)

(declare-fun e!41311 () List!1447)

(declare-fun call!4973 () List!1447)

(assert (=> b!62982 (= e!41311 call!4973)))

(declare-fun b!62983 () Bool)

(assert (=> b!62983 (= e!41312 (contains!692 lt!26401 (tuple2!2053 (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!62984 () Bool)

(declare-fun res!34499 () Bool)

(assert (=> b!62984 (=> (not res!34499) (not e!41312))))

(assert (=> b!62984 (= res!34499 (containsKey!128 lt!26401 (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun bm!4970 () Bool)

(assert (=> bm!4970 (= call!4972 ($colon$colon!61 e!41313 (ite c!8459 (h!2026 (toList!697 call!4860)) (tuple2!2053 (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun c!8461 () Bool)

(assert (=> bm!4970 (= c!8461 c!8459)))

(declare-fun b!62985 () Bool)

(assert (=> b!62985 (= e!41314 e!41310)))

(assert (=> b!62985 (= c!8460 (and ((_ is Cons!1443) (toList!697 call!4860)) (= (_1!1037 (h!2026 (toList!697 call!4860))) (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!62986 () Bool)

(assert (=> b!62986 (= c!8462 (and ((_ is Cons!1443) (toList!697 call!4860)) (bvsgt (_1!1037 (h!2026 (toList!697 call!4860))) (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!62986 (= e!41310 e!41311)))

(declare-fun b!62987 () Bool)

(assert (=> b!62987 (= e!41314 call!4972)))

(declare-fun b!62988 () Bool)

(assert (=> b!62988 (= e!41313 (insertStrictlySorted!47 (t!4832 (toList!697 call!4860)) (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun bm!4971 () Bool)

(assert (=> bm!4971 (= call!4973 call!4974)))

(declare-fun b!62989 () Bool)

(assert (=> b!62989 (= e!41311 call!4973)))

(assert (= (and d!12855 c!8459) b!62987))

(assert (= (and d!12855 (not c!8459)) b!62985))

(assert (= (and b!62985 c!8460) b!62980))

(assert (= (and b!62985 (not c!8460)) b!62986))

(assert (= (and b!62986 c!8462) b!62982))

(assert (= (and b!62986 (not c!8462)) b!62989))

(assert (= (or b!62982 b!62989) bm!4971))

(assert (= (or b!62980 bm!4971) bm!4969))

(assert (= (or b!62987 bm!4969) bm!4970))

(assert (= (and bm!4970 c!8461) b!62988))

(assert (= (and bm!4970 (not c!8461)) b!62981))

(assert (= (and d!12855 res!34500) b!62984))

(assert (= (and b!62984 res!34499) b!62983))

(declare-fun m!56679 () Bool)

(assert (=> b!62984 m!56679))

(declare-fun m!56681 () Bool)

(assert (=> bm!4970 m!56681))

(declare-fun m!56683 () Bool)

(assert (=> b!62983 m!56683))

(declare-fun m!56685 () Bool)

(assert (=> d!12855 m!56685))

(declare-fun m!56687 () Bool)

(assert (=> d!12855 m!56687))

(declare-fun m!56689 () Bool)

(assert (=> b!62988 m!56689))

(assert (=> d!12641 d!12855))

(declare-fun d!12857 () Bool)

(declare-fun res!34501 () Bool)

(declare-fun e!41315 () Bool)

(assert (=> d!12857 (=> res!34501 e!41315)))

(assert (=> d!12857 (= res!34501 (and ((_ is Cons!1443) (toList!697 call!4874)) (= (_1!1037 (h!2026 (toList!697 call!4874))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355))))))

(assert (=> d!12857 (= (containsKey!128 (toList!697 call!4874) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) e!41315)))

(declare-fun b!62990 () Bool)

(declare-fun e!41316 () Bool)

(assert (=> b!62990 (= e!41315 e!41316)))

(declare-fun res!34502 () Bool)

(assert (=> b!62990 (=> (not res!34502) (not e!41316))))

(assert (=> b!62990 (= res!34502 (and (or (not ((_ is Cons!1443) (toList!697 call!4874))) (bvsle (_1!1037 (h!2026 (toList!697 call!4874))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355))) ((_ is Cons!1443) (toList!697 call!4874)) (bvslt (_1!1037 (h!2026 (toList!697 call!4874))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355))))))

(declare-fun b!62991 () Bool)

(assert (=> b!62991 (= e!41316 (containsKey!128 (t!4832 (toList!697 call!4874)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(assert (= (and d!12857 (not res!34501)) b!62990))

(assert (= (and b!62990 res!34502) b!62991))

(assert (=> b!62991 m!55481))

(declare-fun m!56691 () Bool)

(assert (=> b!62991 m!56691))

(assert (=> d!12639 d!12857))

(declare-fun d!12859 () Bool)

(assert (=> d!12859 (= (validKeyInArray!0 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)) (and (not (= (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62694 d!12859))

(declare-fun d!12861 () Bool)

(declare-fun res!34503 () Bool)

(declare-fun e!41317 () Bool)

(assert (=> d!12861 (=> (not res!34503) (not e!41317))))

(assert (=> d!12861 (= res!34503 (validMask!0 (mask!5992 (v!2412 (underlying!229 thiss!992)))))))

(assert (=> d!12861 (= (simpleValid!44 (v!2412 (underlying!229 thiss!992))) e!41317)))

(declare-fun b!62994 () Bool)

(declare-fun res!34506 () Bool)

(assert (=> b!62994 (=> (not res!34506) (not e!41317))))

(assert (=> b!62994 (= res!34506 (= (size!2025 (v!2412 (underlying!229 thiss!992))) (bvadd (_size!366 (v!2412 (underlying!229 thiss!992))) (bvsdiv (bvadd (extraKeys!1966 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!62992 () Bool)

(declare-fun res!34505 () Bool)

(assert (=> b!62992 (=> (not res!34505) (not e!41317))))

(assert (=> b!62992 (= res!34505 (and (= (size!2020 (_values!2070 (v!2412 (underlying!229 thiss!992)))) (bvadd (mask!5992 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000000000000001)) (= (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (size!2020 (_values!2070 (v!2412 (underlying!229 thiss!992))))) (bvsge (_size!366 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000000000000000) (bvsle (_size!366 (v!2412 (underlying!229 thiss!992))) (bvadd (mask!5992 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000000000000001))))))

(declare-fun b!62995 () Bool)

(assert (=> b!62995 (= e!41317 (and (bvsge (extraKeys!1966 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000000000000000) (bvsle (extraKeys!1966 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000000000000011) (bvsge (_vacant!366 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000000000000000)))))

(declare-fun b!62993 () Bool)

(declare-fun res!34504 () Bool)

(assert (=> b!62993 (=> (not res!34504) (not e!41317))))

(assert (=> b!62993 (= res!34504 (bvsge (size!2025 (v!2412 (underlying!229 thiss!992))) (_size!366 (v!2412 (underlying!229 thiss!992)))))))

(assert (= (and d!12861 res!34503) b!62992))

(assert (= (and b!62992 res!34505) b!62993))

(assert (= (and b!62993 res!34504) b!62994))

(assert (= (and b!62994 res!34506) b!62995))

(assert (=> d!12861 m!55513))

(declare-fun m!56693 () Bool)

(assert (=> b!62994 m!56693))

(assert (=> b!62993 m!56693))

(assert (=> d!12589 d!12861))

(declare-fun d!12863 () Bool)

(declare-fun e!41318 () Bool)

(assert (=> d!12863 e!41318))

(declare-fun res!34507 () Bool)

(assert (=> d!12863 (=> res!34507 e!41318)))

(declare-fun lt!26405 () Bool)

(assert (=> d!12863 (= res!34507 (not lt!26405))))

(declare-fun lt!26403 () Bool)

(assert (=> d!12863 (= lt!26405 lt!26403)))

(declare-fun lt!26404 () Unit!1685)

(declare-fun e!41319 () Unit!1685)

(assert (=> d!12863 (= lt!26404 e!41319)))

(declare-fun c!8463 () Bool)

(assert (=> d!12863 (= c!8463 lt!26403)))

(assert (=> d!12863 (= lt!26403 (containsKey!128 (toList!697 lt!26193) (_1!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(assert (=> d!12863 (= (contains!690 lt!26193 (_1!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))) lt!26405)))

(declare-fun b!62996 () Bool)

(declare-fun lt!26402 () Unit!1685)

(assert (=> b!62996 (= e!41319 lt!26402)))

(assert (=> b!62996 (= lt!26402 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 lt!26193) (_1!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(assert (=> b!62996 (isDefined!78 (getValueByKey!124 (toList!697 lt!26193) (_1!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(declare-fun b!62997 () Bool)

(declare-fun Unit!1720 () Unit!1685)

(assert (=> b!62997 (= e!41319 Unit!1720)))

(declare-fun b!62998 () Bool)

(assert (=> b!62998 (= e!41318 (isDefined!78 (getValueByKey!124 (toList!697 lt!26193) (_1!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))))

(assert (= (and d!12863 c!8463) b!62996))

(assert (= (and d!12863 (not c!8463)) b!62997))

(assert (= (and d!12863 (not res!34507)) b!62998))

(declare-fun m!56695 () Bool)

(assert (=> d!12863 m!56695))

(declare-fun m!56697 () Bool)

(assert (=> b!62996 m!56697))

(assert (=> b!62996 m!56233))

(assert (=> b!62996 m!56233))

(declare-fun m!56699 () Bool)

(assert (=> b!62996 m!56699))

(assert (=> b!62998 m!56233))

(assert (=> b!62998 m!56233))

(assert (=> b!62998 m!56699))

(assert (=> d!12695 d!12863))

(declare-fun d!12865 () Bool)

(declare-fun c!8464 () Bool)

(assert (=> d!12865 (= c!8464 (and ((_ is Cons!1443) lt!26191) (= (_1!1037 (h!2026 lt!26191)) (_1!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))))

(declare-fun e!41320 () Option!130)

(assert (=> d!12865 (= (getValueByKey!124 lt!26191 (_1!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))) e!41320)))

(declare-fun b!62999 () Bool)

(assert (=> b!62999 (= e!41320 (Some!129 (_2!1037 (h!2026 lt!26191))))))

(declare-fun b!63002 () Bool)

(declare-fun e!41321 () Option!130)

(assert (=> b!63002 (= e!41321 None!128)))

(declare-fun b!63000 () Bool)

(assert (=> b!63000 (= e!41320 e!41321)))

(declare-fun c!8465 () Bool)

(assert (=> b!63000 (= c!8465 (and ((_ is Cons!1443) lt!26191) (not (= (_1!1037 (h!2026 lt!26191)) (_1!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))))

(declare-fun b!63001 () Bool)

(assert (=> b!63001 (= e!41321 (getValueByKey!124 (t!4832 lt!26191) (_1!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(assert (= (and d!12865 c!8464) b!62999))

(assert (= (and d!12865 (not c!8464)) b!63000))

(assert (= (and b!63000 c!8465) b!63001))

(assert (= (and b!63000 (not c!8465)) b!63002))

(declare-fun m!56701 () Bool)

(assert (=> b!63001 m!56701))

(assert (=> d!12695 d!12865))

(declare-fun d!12867 () Bool)

(assert (=> d!12867 (= (getValueByKey!124 lt!26191 (_1!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))) (Some!129 (_2!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(declare-fun lt!26406 () Unit!1685)

(assert (=> d!12867 (= lt!26406 (choose!347 lt!26191 (_1!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) (_2!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(declare-fun e!41322 () Bool)

(assert (=> d!12867 e!41322))

(declare-fun res!34508 () Bool)

(assert (=> d!12867 (=> (not res!34508) (not e!41322))))

(assert (=> d!12867 (= res!34508 (isStrictlySorted!281 lt!26191))))

(assert (=> d!12867 (= (lemmaContainsTupThenGetReturnValue!44 lt!26191 (_1!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) (_2!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))) lt!26406)))

(declare-fun b!63003 () Bool)

(declare-fun res!34509 () Bool)

(assert (=> b!63003 (=> (not res!34509) (not e!41322))))

(assert (=> b!63003 (= res!34509 (containsKey!128 lt!26191 (_1!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(declare-fun b!63004 () Bool)

(assert (=> b!63004 (= e!41322 (contains!692 lt!26191 (tuple2!2053 (_1!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) (_2!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))))

(assert (= (and d!12867 res!34508) b!63003))

(assert (= (and b!63003 res!34509) b!63004))

(assert (=> d!12867 m!56227))

(declare-fun m!56703 () Bool)

(assert (=> d!12867 m!56703))

(declare-fun m!56705 () Bool)

(assert (=> d!12867 m!56705))

(declare-fun m!56707 () Bool)

(assert (=> b!63003 m!56707))

(declare-fun m!56709 () Bool)

(assert (=> b!63004 m!56709))

(assert (=> d!12695 d!12867))

(declare-fun b!63005 () Bool)

(declare-fun e!41323 () List!1447)

(declare-fun call!4977 () List!1447)

(assert (=> b!63005 (= e!41323 call!4977)))

(declare-fun bm!4972 () Bool)

(declare-fun call!4975 () List!1447)

(assert (=> bm!4972 (= call!4977 call!4975)))

(declare-fun d!12869 () Bool)

(declare-fun e!41325 () Bool)

(assert (=> d!12869 e!41325))

(declare-fun res!34511 () Bool)

(assert (=> d!12869 (=> (not res!34511) (not e!41325))))

(declare-fun lt!26407 () List!1447)

(assert (=> d!12869 (= res!34511 (isStrictlySorted!281 lt!26407))))

(declare-fun e!41327 () List!1447)

(assert (=> d!12869 (= lt!26407 e!41327)))

(declare-fun c!8466 () Bool)

(assert (=> d!12869 (= c!8466 (and ((_ is Cons!1443) (toList!697 (ite c!8298 call!4899 (ite c!8299 call!4898 call!4900)))) (bvslt (_1!1037 (h!2026 (toList!697 (ite c!8298 call!4899 (ite c!8299 call!4898 call!4900))))) (_1!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))))

(assert (=> d!12869 (isStrictlySorted!281 (toList!697 (ite c!8298 call!4899 (ite c!8299 call!4898 call!4900))))))

(assert (=> d!12869 (= (insertStrictlySorted!47 (toList!697 (ite c!8298 call!4899 (ite c!8299 call!4898 call!4900))) (_1!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) (_2!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))) lt!26407)))

(declare-fun c!8469 () Bool)

(declare-fun e!41326 () List!1447)

(declare-fun c!8467 () Bool)

(declare-fun b!63006 () Bool)

(assert (=> b!63006 (= e!41326 (ite c!8467 (t!4832 (toList!697 (ite c!8298 call!4899 (ite c!8299 call!4898 call!4900)))) (ite c!8469 (Cons!1443 (h!2026 (toList!697 (ite c!8298 call!4899 (ite c!8299 call!4898 call!4900)))) (t!4832 (toList!697 (ite c!8298 call!4899 (ite c!8299 call!4898 call!4900))))) Nil!1444)))))

(declare-fun b!63007 () Bool)

(declare-fun e!41324 () List!1447)

(declare-fun call!4976 () List!1447)

(assert (=> b!63007 (= e!41324 call!4976)))

(declare-fun b!63008 () Bool)

(assert (=> b!63008 (= e!41325 (contains!692 lt!26407 (tuple2!2053 (_1!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) (_2!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))))

(declare-fun b!63009 () Bool)

(declare-fun res!34510 () Bool)

(assert (=> b!63009 (=> (not res!34510) (not e!41325))))

(assert (=> b!63009 (= res!34510 (containsKey!128 lt!26407 (_1!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(declare-fun bm!4973 () Bool)

(assert (=> bm!4973 (= call!4975 ($colon$colon!61 e!41326 (ite c!8466 (h!2026 (toList!697 (ite c!8298 call!4899 (ite c!8299 call!4898 call!4900)))) (tuple2!2053 (_1!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) (_2!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))))

(declare-fun c!8468 () Bool)

(assert (=> bm!4973 (= c!8468 c!8466)))

(declare-fun b!63010 () Bool)

(assert (=> b!63010 (= e!41327 e!41323)))

(assert (=> b!63010 (= c!8467 (and ((_ is Cons!1443) (toList!697 (ite c!8298 call!4899 (ite c!8299 call!4898 call!4900)))) (= (_1!1037 (h!2026 (toList!697 (ite c!8298 call!4899 (ite c!8299 call!4898 call!4900))))) (_1!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))))

(declare-fun b!63011 () Bool)

(assert (=> b!63011 (= c!8469 (and ((_ is Cons!1443) (toList!697 (ite c!8298 call!4899 (ite c!8299 call!4898 call!4900)))) (bvsgt (_1!1037 (h!2026 (toList!697 (ite c!8298 call!4899 (ite c!8299 call!4898 call!4900))))) (_1!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))))

(assert (=> b!63011 (= e!41323 e!41324)))

(declare-fun b!63012 () Bool)

(assert (=> b!63012 (= e!41327 call!4975)))

(declare-fun b!63013 () Bool)

(assert (=> b!63013 (= e!41326 (insertStrictlySorted!47 (t!4832 (toList!697 (ite c!8298 call!4899 (ite c!8299 call!4898 call!4900)))) (_1!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) (_2!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(declare-fun bm!4974 () Bool)

(assert (=> bm!4974 (= call!4976 call!4977)))

(declare-fun b!63014 () Bool)

(assert (=> b!63014 (= e!41324 call!4976)))

(assert (= (and d!12869 c!8466) b!63012))

(assert (= (and d!12869 (not c!8466)) b!63010))

(assert (= (and b!63010 c!8467) b!63005))

(assert (= (and b!63010 (not c!8467)) b!63011))

(assert (= (and b!63011 c!8469) b!63007))

(assert (= (and b!63011 (not c!8469)) b!63014))

(assert (= (or b!63007 b!63014) bm!4974))

(assert (= (or b!63005 bm!4974) bm!4972))

(assert (= (or b!63012 bm!4972) bm!4973))

(assert (= (and bm!4973 c!8468) b!63013))

(assert (= (and bm!4973 (not c!8468)) b!63006))

(assert (= (and d!12869 res!34511) b!63009))

(assert (= (and b!63009 res!34510) b!63008))

(declare-fun m!56711 () Bool)

(assert (=> b!63009 m!56711))

(declare-fun m!56713 () Bool)

(assert (=> bm!4973 m!56713))

(declare-fun m!56715 () Bool)

(assert (=> b!63008 m!56715))

(declare-fun m!56717 () Bool)

(assert (=> d!12869 m!56717))

(declare-fun m!56719 () Bool)

(assert (=> d!12869 m!56719))

(declare-fun m!56721 () Bool)

(assert (=> b!63013 m!56721))

(assert (=> d!12695 d!12869))

(declare-fun d!12871 () Bool)

(declare-fun e!41328 () Bool)

(assert (=> d!12871 e!41328))

(declare-fun res!34512 () Bool)

(assert (=> d!12871 (=> res!34512 e!41328)))

(declare-fun lt!26411 () Bool)

(assert (=> d!12871 (= res!34512 (not lt!26411))))

(declare-fun lt!26409 () Bool)

(assert (=> d!12871 (= lt!26411 lt!26409)))

(declare-fun lt!26410 () Unit!1685)

(declare-fun e!41329 () Unit!1685)

(assert (=> d!12871 (= lt!26410 e!41329)))

(declare-fun c!8470 () Bool)

(assert (=> d!12871 (= c!8470 lt!26409)))

(assert (=> d!12871 (= lt!26409 (containsKey!128 (toList!697 lt!26165) (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!12871 (= (contains!690 lt!26165 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)) lt!26411)))

(declare-fun b!63015 () Bool)

(declare-fun lt!26408 () Unit!1685)

(assert (=> b!63015 (= e!41329 lt!26408)))

(assert (=> b!63015 (= lt!26408 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 lt!26165) (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63015 (isDefined!78 (getValueByKey!124 (toList!697 lt!26165) (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63016 () Bool)

(declare-fun Unit!1721 () Unit!1685)

(assert (=> b!63016 (= e!41329 Unit!1721)))

(declare-fun b!63017 () Bool)

(assert (=> b!63017 (= e!41328 (isDefined!78 (getValueByKey!124 (toList!697 lt!26165) (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!12871 c!8470) b!63015))

(assert (= (and d!12871 (not c!8470)) b!63016))

(assert (= (and d!12871 (not res!34512)) b!63017))

(assert (=> d!12871 m!55803))

(declare-fun m!56723 () Bool)

(assert (=> d!12871 m!56723))

(assert (=> b!63015 m!55803))

(declare-fun m!56725 () Bool)

(assert (=> b!63015 m!56725))

(assert (=> b!63015 m!55803))

(assert (=> b!63015 m!56363))

(assert (=> b!63015 m!56363))

(declare-fun m!56727 () Bool)

(assert (=> b!63015 m!56727))

(assert (=> b!63017 m!55803))

(assert (=> b!63017 m!56363))

(assert (=> b!63017 m!56363))

(assert (=> b!63017 m!56727))

(assert (=> b!62635 d!12871))

(assert (=> d!12633 d!12689))

(declare-fun d!12873 () Bool)

(declare-fun e!41332 () Bool)

(assert (=> d!12873 e!41332))

(declare-fun res!34517 () Bool)

(assert (=> d!12873 (=> (not res!34517) (not e!41332))))

(declare-fun lt!26414 () SeekEntryResult!232)

(assert (=> d!12873 (= res!34517 ((_ is Found!232) lt!26414))))

(assert (=> d!12873 (= lt!26414 (seekEntryOrOpen!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (_keys!3718 newMap!16) (mask!5992 newMap!16)))))

(assert (=> d!12873 true))

(declare-fun _$33!48 () Unit!1685)

(assert (=> d!12873 (= (choose!341 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (defaultEntry!2087 newMap!16)) _$33!48)))

(declare-fun b!63022 () Bool)

(declare-fun res!34518 () Bool)

(assert (=> b!63022 (=> (not res!34518) (not e!41332))))

(assert (=> b!63022 (= res!34518 (inRange!0 (index!3054 lt!26414) (mask!5992 newMap!16)))))

(declare-fun b!63023 () Bool)

(assert (=> b!63023 (= e!41332 (= (select (arr!1786 (_keys!3718 newMap!16)) (index!3054 lt!26414)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(assert (= (and d!12873 res!34517) b!63022))

(assert (= (and b!63022 res!34518) b!63023))

(assert (=> d!12873 m!55481))

(assert (=> d!12873 m!55631))

(declare-fun m!56729 () Bool)

(assert (=> b!63022 m!56729))

(declare-fun m!56731 () Bool)

(assert (=> b!63023 m!56731))

(assert (=> d!12633 d!12873))

(assert (=> d!12633 d!12755))

(assert (=> b!62631 d!12859))

(assert (=> b!62572 d!12859))

(declare-fun b!63024 () Bool)

(declare-fun e!41333 () Bool)

(assert (=> b!63024 (= e!41333 (contains!691 (ite c!8343 (Cons!1442 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000) Nil!1443) Nil!1443) (select (arr!1786 (_keys!3718 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!63026 () Bool)

(declare-fun e!41336 () Bool)

(declare-fun e!41334 () Bool)

(assert (=> b!63026 (= e!41336 e!41334)))

(declare-fun res!34521 () Bool)

(assert (=> b!63026 (=> (not res!34521) (not e!41334))))

(assert (=> b!63026 (= res!34521 (not e!41333))))

(declare-fun res!34519 () Bool)

(assert (=> b!63026 (=> (not res!34519) (not e!41333))))

(assert (=> b!63026 (= res!34519 (validKeyInArray!0 (select (arr!1786 (_keys!3718 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun call!4978 () Bool)

(declare-fun c!8471 () Bool)

(declare-fun bm!4975 () Bool)

(assert (=> bm!4975 (= call!4978 (arrayNoDuplicates!0 (_keys!3718 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!8471 (Cons!1442 (select (arr!1786 (_keys!3718 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (ite c!8343 (Cons!1442 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000) Nil!1443) Nil!1443)) (ite c!8343 (Cons!1442 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000) Nil!1443) Nil!1443))))))

(declare-fun b!63027 () Bool)

(declare-fun e!41335 () Bool)

(assert (=> b!63027 (= e!41335 call!4978)))

(declare-fun b!63028 () Bool)

(assert (=> b!63028 (= e!41335 call!4978)))

(declare-fun b!63025 () Bool)

(assert (=> b!63025 (= e!41334 e!41335)))

(assert (=> b!63025 (= c!8471 (validKeyInArray!0 (select (arr!1786 (_keys!3718 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun d!12875 () Bool)

(declare-fun res!34520 () Bool)

(assert (=> d!12875 (=> res!34520 e!41336)))

(assert (=> d!12875 (= res!34520 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2019 (_keys!3718 newMap!16))))))

(assert (=> d!12875 (= (arrayNoDuplicates!0 (_keys!3718 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!8343 (Cons!1442 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000) Nil!1443) Nil!1443)) e!41336)))

(assert (= (and d!12875 (not res!34520)) b!63026))

(assert (= (and b!63026 res!34519) b!63024))

(assert (= (and b!63026 res!34521) b!63025))

(assert (= (and b!63025 c!8471) b!63027))

(assert (= (and b!63025 (not c!8471)) b!63028))

(assert (= (or b!63027 b!63028) bm!4975))

(assert (=> b!63024 m!56335))

(assert (=> b!63024 m!56335))

(declare-fun m!56733 () Bool)

(assert (=> b!63024 m!56733))

(assert (=> b!63026 m!56335))

(assert (=> b!63026 m!56335))

(assert (=> b!63026 m!56337))

(assert (=> bm!4975 m!56335))

(declare-fun m!56735 () Bool)

(assert (=> bm!4975 m!56735))

(assert (=> b!63025 m!56335))

(assert (=> b!63025 m!56335))

(assert (=> b!63025 m!56337))

(assert (=> bm!4922 d!12875))

(declare-fun b!63029 () Bool)

(assert (=> b!63029 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(assert (=> b!63029 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2020 (ite (or c!8266 c!8262) (_values!2070 newMap!16) lt!25918))))))

(declare-fun e!41339 () Bool)

(declare-fun lt!26420 () ListLongMap!1363)

(assert (=> b!63029 (= e!41339 (= (apply!68 lt!26420 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)) (get!1089 (select (arr!1787 (ite (or c!8266 c!8262) (_values!2070 newMap!16) lt!25918)) #b00000000000000000000000000000000) (dynLambda!312 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!63030 () Bool)

(declare-fun lt!26415 () Unit!1685)

(declare-fun lt!26418 () Unit!1685)

(assert (=> b!63030 (= lt!26415 lt!26418)))

(declare-fun lt!26421 () (_ BitVec 64))

(declare-fun lt!26417 () ListLongMap!1363)

(declare-fun lt!26419 () V!2865)

(declare-fun lt!26416 () (_ BitVec 64))

(assert (=> b!63030 (not (contains!690 (+!83 lt!26417 (tuple2!2053 lt!26421 lt!26419)) lt!26416))))

(assert (=> b!63030 (= lt!26418 (addStillNotContains!18 lt!26417 lt!26421 lt!26419 lt!26416))))

(assert (=> b!63030 (= lt!26416 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!63030 (= lt!26419 (get!1089 (select (arr!1787 (ite (or c!8266 c!8262) (_values!2070 newMap!16) lt!25918)) #b00000000000000000000000000000000) (dynLambda!312 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!63030 (= lt!26421 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun call!4979 () ListLongMap!1363)

(assert (=> b!63030 (= lt!26417 call!4979)))

(declare-fun e!41340 () ListLongMap!1363)

(assert (=> b!63030 (= e!41340 (+!83 call!4979 (tuple2!2053 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000) (get!1089 (select (arr!1787 (ite (or c!8266 c!8262) (_values!2070 newMap!16) lt!25918)) #b00000000000000000000000000000000) (dynLambda!312 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!63031 () Bool)

(declare-fun res!34524 () Bool)

(declare-fun e!41341 () Bool)

(assert (=> b!63031 (=> (not res!34524) (not e!41341))))

(assert (=> b!63031 (= res!34524 (not (contains!690 lt!26420 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!63032 () Bool)

(declare-fun e!41337 () Bool)

(assert (=> b!63032 (= e!41337 (validKeyInArray!0 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63032 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun bm!4976 () Bool)

(assert (=> bm!4976 (= call!4979 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (ite (or c!8266 c!8262) (_values!2070 newMap!16) lt!25918) (mask!5992 newMap!16) (ite c!8266 (ite c!8271 lt!25897 lt!25915) (extraKeys!1966 newMap!16)) (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)) (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2087 newMap!16)))))

(declare-fun b!63033 () Bool)

(declare-fun e!41338 () ListLongMap!1363)

(assert (=> b!63033 (= e!41338 e!41340)))

(declare-fun c!8475 () Bool)

(assert (=> b!63033 (= c!8475 (validKeyInArray!0 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!41343 () Bool)

(declare-fun b!63034 () Bool)

(assert (=> b!63034 (= e!41343 (= lt!26420 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (ite (or c!8266 c!8262) (_values!2070 newMap!16) lt!25918) (mask!5992 newMap!16) (ite c!8266 (ite c!8271 lt!25897 lt!25915) (extraKeys!1966 newMap!16)) (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)) (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2087 newMap!16))))))

(declare-fun d!12877 () Bool)

(assert (=> d!12877 e!41341))

(declare-fun res!34525 () Bool)

(assert (=> d!12877 (=> (not res!34525) (not e!41341))))

(assert (=> d!12877 (= res!34525 (not (contains!690 lt!26420 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12877 (= lt!26420 e!41338)))

(declare-fun c!8474 () Bool)

(assert (=> d!12877 (= c!8474 (bvsge #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(assert (=> d!12877 (validMask!0 (mask!5992 newMap!16))))

(assert (=> d!12877 (= (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (ite (or c!8266 c!8262) (_values!2070 newMap!16) lt!25918) (mask!5992 newMap!16) (ite c!8266 (ite c!8271 lt!25897 lt!25915) (extraKeys!1966 newMap!16)) (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)) (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) lt!26420)))

(declare-fun b!63035 () Bool)

(assert (=> b!63035 (= e!41343 (isEmpty!303 lt!26420))))

(declare-fun b!63036 () Bool)

(declare-fun e!41342 () Bool)

(assert (=> b!63036 (= e!41342 e!41343)))

(declare-fun c!8473 () Bool)

(assert (=> b!63036 (= c!8473 (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(declare-fun b!63037 () Bool)

(assert (=> b!63037 (= e!41340 call!4979)))

(declare-fun b!63038 () Bool)

(assert (=> b!63038 (= e!41342 e!41339)))

(assert (=> b!63038 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(declare-fun res!34523 () Bool)

(assert (=> b!63038 (= res!34523 (contains!690 lt!26420 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63038 (=> (not res!34523) (not e!41339))))

(declare-fun b!63039 () Bool)

(assert (=> b!63039 (= e!41341 e!41342)))

(declare-fun c!8472 () Bool)

(assert (=> b!63039 (= c!8472 e!41337)))

(declare-fun res!34522 () Bool)

(assert (=> b!63039 (=> (not res!34522) (not e!41337))))

(assert (=> b!63039 (= res!34522 (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(declare-fun b!63040 () Bool)

(assert (=> b!63040 (= e!41338 (ListLongMap!1364 Nil!1444))))

(assert (= (and d!12877 c!8474) b!63040))

(assert (= (and d!12877 (not c!8474)) b!63033))

(assert (= (and b!63033 c!8475) b!63030))

(assert (= (and b!63033 (not c!8475)) b!63037))

(assert (= (or b!63030 b!63037) bm!4976))

(assert (= (and d!12877 res!34525) b!63031))

(assert (= (and b!63031 res!34524) b!63039))

(assert (= (and b!63039 res!34522) b!63032))

(assert (= (and b!63039 c!8472) b!63038))

(assert (= (and b!63039 (not c!8472)) b!63036))

(assert (= (and b!63038 res!34523) b!63029))

(assert (= (and b!63036 c!8473) b!63034))

(assert (= (and b!63036 (not c!8473)) b!63035))

(declare-fun b_lambda!2801 () Bool)

(assert (=> (not b_lambda!2801) (not b!63029)))

(assert (=> b!63029 t!4844))

(declare-fun b_and!3837 () Bool)

(assert (= b_and!3833 (and (=> t!4844 result!2455) b_and!3837)))

(assert (=> b!63029 t!4846))

(declare-fun b_and!3839 () Bool)

(assert (= b_and!3835 (and (=> t!4846 result!2457) b_and!3839)))

(declare-fun b_lambda!2803 () Bool)

(assert (=> (not b_lambda!2803) (not b!63030)))

(assert (=> b!63030 t!4844))

(declare-fun b_and!3841 () Bool)

(assert (= b_and!3837 (and (=> t!4844 result!2455) b_and!3841)))

(assert (=> b!63030 t!4846))

(declare-fun b_and!3843 () Bool)

(assert (= b_and!3839 (and (=> t!4846 result!2457) b_and!3843)))

(assert (=> b!63038 m!55803))

(assert (=> b!63038 m!55803))

(declare-fun m!56737 () Bool)

(assert (=> b!63038 m!56737))

(declare-fun m!56739 () Bool)

(assert (=> b!63034 m!56739))

(assert (=> b!63029 m!55803))

(declare-fun m!56741 () Bool)

(assert (=> b!63029 m!56741))

(assert (=> b!63029 m!55803))

(assert (=> b!63029 m!55857))

(assert (=> b!63029 m!56167))

(assert (=> b!63029 m!55857))

(assert (=> b!63029 m!56169))

(assert (=> b!63029 m!56167))

(declare-fun m!56743 () Bool)

(assert (=> b!63031 m!56743))

(declare-fun m!56745 () Bool)

(assert (=> b!63035 m!56745))

(declare-fun m!56747 () Bool)

(assert (=> d!12877 m!56747))

(assert (=> d!12877 m!55783))

(declare-fun m!56749 () Bool)

(assert (=> b!63030 m!56749))

(assert (=> b!63030 m!55803))

(declare-fun m!56751 () Bool)

(assert (=> b!63030 m!56751))

(assert (=> b!63030 m!56167))

(assert (=> b!63030 m!55857))

(assert (=> b!63030 m!56169))

(assert (=> b!63030 m!56167))

(declare-fun m!56753 () Bool)

(assert (=> b!63030 m!56753))

(assert (=> b!63030 m!55857))

(assert (=> b!63030 m!56749))

(declare-fun m!56755 () Bool)

(assert (=> b!63030 m!56755))

(assert (=> bm!4976 m!56739))

(assert (=> b!63033 m!55803))

(assert (=> b!63033 m!55803))

(assert (=> b!63033 m!55843))

(assert (=> b!63032 m!55803))

(assert (=> b!63032 m!55803))

(assert (=> b!63032 m!55843))

(assert (=> bm!4933 d!12877))

(declare-fun lt!26422 () Bool)

(declare-fun d!12879 () Bool)

(assert (=> d!12879 (= lt!26422 (select (content!68 (toList!697 lt!26138)) (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))

(declare-fun e!41345 () Bool)

(assert (=> d!12879 (= lt!26422 e!41345)))

(declare-fun res!34527 () Bool)

(assert (=> d!12879 (=> (not res!34527) (not e!41345))))

(assert (=> d!12879 (= res!34527 ((_ is Cons!1443) (toList!697 lt!26138)))))

(assert (=> d!12879 (= (contains!692 (toList!697 lt!26138) (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) lt!26422)))

(declare-fun b!63041 () Bool)

(declare-fun e!41344 () Bool)

(assert (=> b!63041 (= e!41345 e!41344)))

(declare-fun res!34526 () Bool)

(assert (=> b!63041 (=> res!34526 e!41344)))

(assert (=> b!63041 (= res!34526 (= (h!2026 (toList!697 lt!26138)) (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))

(declare-fun b!63042 () Bool)

(assert (=> b!63042 (= e!41344 (contains!692 (t!4832 (toList!697 lt!26138)) (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))

(assert (= (and d!12879 res!34527) b!63041))

(assert (= (and b!63041 (not res!34526)) b!63042))

(declare-fun m!56757 () Bool)

(assert (=> d!12879 m!56757))

(declare-fun m!56759 () Bool)

(assert (=> d!12879 m!56759))

(declare-fun m!56761 () Bool)

(assert (=> b!63042 m!56761))

(assert (=> b!62607 d!12879))

(declare-fun d!12881 () Bool)

(assert (=> d!12881 (= (apply!68 lt!26165 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1092 (getValueByKey!124 (toList!697 lt!26165) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2740 () Bool)

(assert (= bs!2740 d!12881))

(declare-fun m!56763 () Bool)

(assert (=> bs!2740 m!56763))

(assert (=> bs!2740 m!56763))

(declare-fun m!56765 () Bool)

(assert (=> bs!2740 m!56765))

(assert (=> b!62623 d!12881))

(assert (=> b!62473 d!12617))

(assert (=> d!12623 d!12569))

(declare-fun d!12883 () Bool)

(declare-fun res!34528 () Bool)

(declare-fun e!41346 () Bool)

(assert (=> d!12883 (=> res!34528 e!41346)))

(assert (=> d!12883 (= res!34528 (and ((_ is Cons!1443) (toList!697 call!4868)) (= (_1!1037 (h!2026 (toList!697 call!4868))) (ite c!8262 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (select (arr!1786 (_keys!3718 newMap!16)) (index!3054 lt!25902))))))))

(assert (=> d!12883 (= (containsKey!128 (toList!697 call!4868) (ite c!8262 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (select (arr!1786 (_keys!3718 newMap!16)) (index!3054 lt!25902)))) e!41346)))

(declare-fun b!63043 () Bool)

(declare-fun e!41347 () Bool)

(assert (=> b!63043 (= e!41346 e!41347)))

(declare-fun res!34529 () Bool)

(assert (=> b!63043 (=> (not res!34529) (not e!41347))))

(assert (=> b!63043 (= res!34529 (and (or (not ((_ is Cons!1443) (toList!697 call!4868))) (bvsle (_1!1037 (h!2026 (toList!697 call!4868))) (ite c!8262 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (select (arr!1786 (_keys!3718 newMap!16)) (index!3054 lt!25902))))) ((_ is Cons!1443) (toList!697 call!4868)) (bvslt (_1!1037 (h!2026 (toList!697 call!4868))) (ite c!8262 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (select (arr!1786 (_keys!3718 newMap!16)) (index!3054 lt!25902))))))))

(declare-fun b!63044 () Bool)

(assert (=> b!63044 (= e!41347 (containsKey!128 (t!4832 (toList!697 call!4868)) (ite c!8262 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (select (arr!1786 (_keys!3718 newMap!16)) (index!3054 lt!25902)))))))

(assert (= (and d!12883 (not res!34528)) b!63043))

(assert (= (and b!63043 res!34529) b!63044))

(declare-fun m!56767 () Bool)

(assert (=> b!63044 m!56767))

(assert (=> d!12609 d!12883))

(declare-fun d!12885 () Bool)

(declare-fun e!41348 () Bool)

(assert (=> d!12885 e!41348))

(declare-fun res!34530 () Bool)

(assert (=> d!12885 (=> res!34530 e!41348)))

(declare-fun lt!26426 () Bool)

(assert (=> d!12885 (= res!34530 (not lt!26426))))

(declare-fun lt!26424 () Bool)

(assert (=> d!12885 (= lt!26426 lt!26424)))

(declare-fun lt!26425 () Unit!1685)

(declare-fun e!41349 () Unit!1685)

(assert (=> d!12885 (= lt!26425 e!41349)))

(declare-fun c!8476 () Bool)

(assert (=> d!12885 (= c!8476 lt!26424)))

(assert (=> d!12885 (= lt!26424 (containsKey!128 (toList!697 lt!26070) (_1!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!12885 (= (contains!690 lt!26070 (_1!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!26426)))

(declare-fun b!63045 () Bool)

(declare-fun lt!26423 () Unit!1685)

(assert (=> b!63045 (= e!41349 lt!26423)))

(assert (=> b!63045 (= lt!26423 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 lt!26070) (_1!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!63045 (isDefined!78 (getValueByKey!124 (toList!697 lt!26070) (_1!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!63046 () Bool)

(declare-fun Unit!1722 () Unit!1685)

(assert (=> b!63046 (= e!41349 Unit!1722)))

(declare-fun b!63047 () Bool)

(assert (=> b!63047 (= e!41348 (isDefined!78 (getValueByKey!124 (toList!697 lt!26070) (_1!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!12885 c!8476) b!63045))

(assert (= (and d!12885 (not c!8476)) b!63046))

(assert (= (and d!12885 (not res!34530)) b!63047))

(declare-fun m!56769 () Bool)

(assert (=> d!12885 m!56769))

(declare-fun m!56771 () Bool)

(assert (=> b!63045 m!56771))

(assert (=> b!63045 m!55911))

(assert (=> b!63045 m!55911))

(declare-fun m!56773 () Bool)

(assert (=> b!63045 m!56773))

(assert (=> b!63047 m!55911))

(assert (=> b!63047 m!55911))

(assert (=> b!63047 m!56773))

(assert (=> d!12611 d!12885))

(declare-fun c!8477 () Bool)

(declare-fun d!12887 () Bool)

(assert (=> d!12887 (= c!8477 (and ((_ is Cons!1443) lt!26068) (= (_1!1037 (h!2026 lt!26068)) (_1!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun e!41350 () Option!130)

(assert (=> d!12887 (= (getValueByKey!124 lt!26068 (_1!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!41350)))

(declare-fun b!63048 () Bool)

(assert (=> b!63048 (= e!41350 (Some!129 (_2!1037 (h!2026 lt!26068))))))

(declare-fun b!63051 () Bool)

(declare-fun e!41351 () Option!130)

(assert (=> b!63051 (= e!41351 None!128)))

(declare-fun b!63049 () Bool)

(assert (=> b!63049 (= e!41350 e!41351)))

(declare-fun c!8478 () Bool)

(assert (=> b!63049 (= c!8478 (and ((_ is Cons!1443) lt!26068) (not (= (_1!1037 (h!2026 lt!26068)) (_1!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun b!63050 () Bool)

(assert (=> b!63050 (= e!41351 (getValueByKey!124 (t!4832 lt!26068) (_1!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!12887 c!8477) b!63048))

(assert (= (and d!12887 (not c!8477)) b!63049))

(assert (= (and b!63049 c!8478) b!63050))

(assert (= (and b!63049 (not c!8478)) b!63051))

(declare-fun m!56775 () Bool)

(assert (=> b!63050 m!56775))

(assert (=> d!12611 d!12887))

(declare-fun d!12889 () Bool)

(assert (=> d!12889 (= (getValueByKey!124 lt!26068 (_1!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!129 (_2!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!26427 () Unit!1685)

(assert (=> d!12889 (= lt!26427 (choose!347 lt!26068 (_1!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!41352 () Bool)

(assert (=> d!12889 e!41352))

(declare-fun res!34531 () Bool)

(assert (=> d!12889 (=> (not res!34531) (not e!41352))))

(assert (=> d!12889 (= res!34531 (isStrictlySorted!281 lt!26068))))

(assert (=> d!12889 (= (lemmaContainsTupThenGetReturnValue!44 lt!26068 (_1!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!26427)))

(declare-fun b!63052 () Bool)

(declare-fun res!34532 () Bool)

(assert (=> b!63052 (=> (not res!34532) (not e!41352))))

(assert (=> b!63052 (= res!34532 (containsKey!128 lt!26068 (_1!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!63053 () Bool)

(assert (=> b!63053 (= e!41352 (contains!692 lt!26068 (tuple2!2053 (_1!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!12889 res!34531) b!63052))

(assert (= (and b!63052 res!34532) b!63053))

(assert (=> d!12889 m!55905))

(declare-fun m!56777 () Bool)

(assert (=> d!12889 m!56777))

(declare-fun m!56779 () Bool)

(assert (=> d!12889 m!56779))

(declare-fun m!56781 () Bool)

(assert (=> b!63052 m!56781))

(declare-fun m!56783 () Bool)

(assert (=> b!63053 m!56783))

(assert (=> d!12611 d!12889))

(declare-fun b!63054 () Bool)

(declare-fun e!41353 () List!1447)

(declare-fun call!4982 () List!1447)

(assert (=> b!63054 (= e!41353 call!4982)))

(declare-fun bm!4977 () Bool)

(declare-fun call!4980 () List!1447)

(assert (=> bm!4977 (= call!4982 call!4980)))

(declare-fun d!12891 () Bool)

(declare-fun e!41355 () Bool)

(assert (=> d!12891 e!41355))

(declare-fun res!34534 () Bool)

(assert (=> d!12891 (=> (not res!34534) (not e!41355))))

(declare-fun lt!26428 () List!1447)

(assert (=> d!12891 (= res!34534 (isStrictlySorted!281 lt!26428))))

(declare-fun e!41357 () List!1447)

(assert (=> d!12891 (= lt!26428 e!41357)))

(declare-fun c!8479 () Bool)

(assert (=> d!12891 (= c!8479 (and ((_ is Cons!1443) (toList!697 e!40887)) (bvslt (_1!1037 (h!2026 (toList!697 e!40887))) (_1!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!12891 (isStrictlySorted!281 (toList!697 e!40887))))

(assert (=> d!12891 (= (insertStrictlySorted!47 (toList!697 e!40887) (_1!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!26428)))

(declare-fun c!8482 () Bool)

(declare-fun c!8480 () Bool)

(declare-fun e!41356 () List!1447)

(declare-fun b!63055 () Bool)

(assert (=> b!63055 (= e!41356 (ite c!8480 (t!4832 (toList!697 e!40887)) (ite c!8482 (Cons!1443 (h!2026 (toList!697 e!40887)) (t!4832 (toList!697 e!40887))) Nil!1444)))))

(declare-fun b!63056 () Bool)

(declare-fun e!41354 () List!1447)

(declare-fun call!4981 () List!1447)

(assert (=> b!63056 (= e!41354 call!4981)))

(declare-fun b!63057 () Bool)

(assert (=> b!63057 (= e!41355 (contains!692 lt!26428 (tuple2!2053 (_1!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!63058 () Bool)

(declare-fun res!34533 () Bool)

(assert (=> b!63058 (=> (not res!34533) (not e!41355))))

(assert (=> b!63058 (= res!34533 (containsKey!128 lt!26428 (_1!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun bm!4978 () Bool)

(assert (=> bm!4978 (= call!4980 ($colon$colon!61 e!41356 (ite c!8479 (h!2026 (toList!697 e!40887)) (tuple2!2053 (_1!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun c!8481 () Bool)

(assert (=> bm!4978 (= c!8481 c!8479)))

(declare-fun b!63059 () Bool)

(assert (=> b!63059 (= e!41357 e!41353)))

(assert (=> b!63059 (= c!8480 (and ((_ is Cons!1443) (toList!697 e!40887)) (= (_1!1037 (h!2026 (toList!697 e!40887))) (_1!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!63060 () Bool)

(assert (=> b!63060 (= c!8482 (and ((_ is Cons!1443) (toList!697 e!40887)) (bvsgt (_1!1037 (h!2026 (toList!697 e!40887))) (_1!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> b!63060 (= e!41353 e!41354)))

(declare-fun b!63061 () Bool)

(assert (=> b!63061 (= e!41357 call!4980)))

(declare-fun b!63062 () Bool)

(assert (=> b!63062 (= e!41356 (insertStrictlySorted!47 (t!4832 (toList!697 e!40887)) (_1!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun bm!4979 () Bool)

(assert (=> bm!4979 (= call!4981 call!4982)))

(declare-fun b!63063 () Bool)

(assert (=> b!63063 (= e!41354 call!4981)))

(assert (= (and d!12891 c!8479) b!63061))

(assert (= (and d!12891 (not c!8479)) b!63059))

(assert (= (and b!63059 c!8480) b!63054))

(assert (= (and b!63059 (not c!8480)) b!63060))

(assert (= (and b!63060 c!8482) b!63056))

(assert (= (and b!63060 (not c!8482)) b!63063))

(assert (= (or b!63056 b!63063) bm!4979))

(assert (= (or b!63054 bm!4979) bm!4977))

(assert (= (or b!63061 bm!4977) bm!4978))

(assert (= (and bm!4978 c!8481) b!63062))

(assert (= (and bm!4978 (not c!8481)) b!63055))

(assert (= (and d!12891 res!34534) b!63058))

(assert (= (and b!63058 res!34533) b!63057))

(declare-fun m!56785 () Bool)

(assert (=> b!63058 m!56785))

(declare-fun m!56787 () Bool)

(assert (=> bm!4978 m!56787))

(declare-fun m!56789 () Bool)

(assert (=> b!63057 m!56789))

(declare-fun m!56791 () Bool)

(assert (=> d!12891 m!56791))

(declare-fun m!56793 () Bool)

(assert (=> d!12891 m!56793))

(declare-fun m!56795 () Bool)

(assert (=> b!63062 m!56795))

(assert (=> d!12611 d!12891))

(assert (=> b!62486 d!12565))

(declare-fun lt!26429 () Bool)

(declare-fun d!12893 () Bool)

(assert (=> d!12893 (= lt!26429 (select (content!68 (toList!697 lt!26193)) (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun e!41359 () Bool)

(assert (=> d!12893 (= lt!26429 e!41359)))

(declare-fun res!34536 () Bool)

(assert (=> d!12893 (=> (not res!34536) (not e!41359))))

(assert (=> d!12893 (= res!34536 ((_ is Cons!1443) (toList!697 lt!26193)))))

(assert (=> d!12893 (= (contains!692 (toList!697 lt!26193) (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!26429)))

(declare-fun b!63064 () Bool)

(declare-fun e!41358 () Bool)

(assert (=> b!63064 (= e!41359 e!41358)))

(declare-fun res!34535 () Bool)

(assert (=> b!63064 (=> res!34535 e!41358)))

(assert (=> b!63064 (= res!34535 (= (h!2026 (toList!697 lt!26193)) (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun b!63065 () Bool)

(assert (=> b!63065 (= e!41358 (contains!692 (t!4832 (toList!697 lt!26193)) (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(assert (= (and d!12893 res!34536) b!63064))

(assert (= (and b!63064 (not res!34535)) b!63065))

(declare-fun m!56797 () Bool)

(assert (=> d!12893 m!56797))

(declare-fun m!56799 () Bool)

(assert (=> d!12893 m!56799))

(declare-fun m!56801 () Bool)

(assert (=> b!63065 m!56801))

(assert (=> b!62676 d!12893))

(declare-fun d!12895 () Bool)

(declare-fun c!8483 () Bool)

(assert (=> d!12895 (= c!8483 (and ((_ is Cons!1443) (toList!697 lt!26070)) (= (_1!1037 (h!2026 (toList!697 lt!26070))) (_1!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun e!41360 () Option!130)

(assert (=> d!12895 (= (getValueByKey!124 (toList!697 lt!26070) (_1!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!41360)))

(declare-fun b!63066 () Bool)

(assert (=> b!63066 (= e!41360 (Some!129 (_2!1037 (h!2026 (toList!697 lt!26070)))))))

(declare-fun b!63069 () Bool)

(declare-fun e!41361 () Option!130)

(assert (=> b!63069 (= e!41361 None!128)))

(declare-fun b!63067 () Bool)

(assert (=> b!63067 (= e!41360 e!41361)))

(declare-fun c!8484 () Bool)

(assert (=> b!63067 (= c!8484 (and ((_ is Cons!1443) (toList!697 lt!26070)) (not (= (_1!1037 (h!2026 (toList!697 lt!26070))) (_1!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun b!63068 () Bool)

(assert (=> b!63068 (= e!41361 (getValueByKey!124 (t!4832 (toList!697 lt!26070)) (_1!1037 (ite c!8266 (ite c!8271 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!12895 c!8483) b!63066))

(assert (= (and d!12895 (not c!8483)) b!63067))

(assert (= (and b!63067 c!8484) b!63068))

(assert (= (and b!63067 (not c!8484)) b!63069))

(declare-fun m!56803 () Bool)

(assert (=> b!63068 m!56803))

(assert (=> b!62531 d!12895))

(declare-fun d!12897 () Bool)

(declare-fun e!41362 () Bool)

(assert (=> d!12897 e!41362))

(declare-fun res!34537 () Bool)

(assert (=> d!12897 (=> res!34537 e!41362)))

(declare-fun lt!26433 () Bool)

(assert (=> d!12897 (= res!34537 (not lt!26433))))

(declare-fun lt!26431 () Bool)

(assert (=> d!12897 (= lt!26433 lt!26431)))

(declare-fun lt!26432 () Unit!1685)

(declare-fun e!41363 () Unit!1685)

(assert (=> d!12897 (= lt!26432 e!41363)))

(declare-fun c!8485 () Bool)

(assert (=> d!12897 (= c!8485 lt!26431)))

(assert (=> d!12897 (= lt!26431 (containsKey!128 (toList!697 lt!26165) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12897 (= (contains!690 lt!26165 #b0000000000000000000000000000000000000000000000000000000000000000) lt!26433)))

(declare-fun b!63070 () Bool)

(declare-fun lt!26430 () Unit!1685)

(assert (=> b!63070 (= e!41363 lt!26430)))

(assert (=> b!63070 (= lt!26430 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 lt!26165) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63070 (isDefined!78 (getValueByKey!124 (toList!697 lt!26165) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63071 () Bool)

(declare-fun Unit!1723 () Unit!1685)

(assert (=> b!63071 (= e!41363 Unit!1723)))

(declare-fun b!63072 () Bool)

(assert (=> b!63072 (= e!41362 (isDefined!78 (getValueByKey!124 (toList!697 lt!26165) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12897 c!8485) b!63070))

(assert (= (and d!12897 (not c!8485)) b!63071))

(assert (= (and d!12897 (not res!34537)) b!63072))

(declare-fun m!56805 () Bool)

(assert (=> d!12897 m!56805))

(declare-fun m!56807 () Bool)

(assert (=> b!63070 m!56807))

(assert (=> b!63070 m!56379))

(assert (=> b!63070 m!56379))

(declare-fun m!56809 () Bool)

(assert (=> b!63070 m!56809))

(assert (=> b!63072 m!56379))

(assert (=> b!63072 m!56379))

(assert (=> b!63072 m!56809))

(assert (=> bm!4928 d!12897))

(declare-fun d!12899 () Bool)

(declare-fun e!41364 () Bool)

(assert (=> d!12899 e!41364))

(declare-fun res!34539 () Bool)

(assert (=> d!12899 (=> (not res!34539) (not e!41364))))

(declare-fun lt!26436 () ListLongMap!1363)

(assert (=> d!12899 (= res!34539 (contains!690 lt!26436 (_1!1037 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!26434 () List!1447)

(assert (=> d!12899 (= lt!26436 (ListLongMap!1364 lt!26434))))

(declare-fun lt!26435 () Unit!1685)

(declare-fun lt!26437 () Unit!1685)

(assert (=> d!12899 (= lt!26435 lt!26437)))

(assert (=> d!12899 (= (getValueByKey!124 lt!26434 (_1!1037 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1037 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12899 (= lt!26437 (lemmaContainsTupThenGetReturnValue!44 lt!26434 (_1!1037 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1037 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12899 (= lt!26434 (insertStrictlySorted!47 (toList!697 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (_1!1037 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1037 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12899 (= (+!83 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26436)))

(declare-fun b!63073 () Bool)

(declare-fun res!34538 () Bool)

(assert (=> b!63073 (=> (not res!34538) (not e!41364))))

(assert (=> b!63073 (= res!34538 (= (getValueByKey!124 (toList!697 lt!26436) (_1!1037 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1037 (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!63074 () Bool)

(assert (=> b!63074 (= e!41364 (contains!692 (toList!697 lt!26436) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12899 res!34539) b!63073))

(assert (= (and b!63073 res!34538) b!63074))

(declare-fun m!56811 () Bool)

(assert (=> d!12899 m!56811))

(declare-fun m!56813 () Bool)

(assert (=> d!12899 m!56813))

(declare-fun m!56815 () Bool)

(assert (=> d!12899 m!56815))

(declare-fun m!56817 () Bool)

(assert (=> d!12899 m!56817))

(declare-fun m!56819 () Bool)

(assert (=> b!63073 m!56819))

(declare-fun m!56821 () Bool)

(assert (=> b!63074 m!56821))

(assert (=> d!12585 d!12899))

(assert (=> d!12585 d!12619))

(declare-fun b!63075 () Bool)

(declare-fun res!34542 () Bool)

(declare-fun e!41366 () Bool)

(assert (=> b!63075 (=> (not res!34542) (not e!41366))))

(declare-fun e!41377 () Bool)

(assert (=> b!63075 (= res!34542 e!41377)))

(declare-fun c!8491 () Bool)

(assert (=> b!63075 (= c!8491 (not (= (bvand lt!25897 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!63076 () Bool)

(declare-fun e!41371 () Bool)

(declare-fun lt!26443 () ListLongMap!1363)

(assert (=> b!63076 (= e!41371 (= (apply!68 lt!26443 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1999 newMap!16)))))

(declare-fun e!41375 () Bool)

(declare-fun b!63077 () Bool)

(assert (=> b!63077 (= e!41375 (= (apply!68 lt!26443 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!12901 () Bool)

(assert (=> d!12901 e!41366))

(declare-fun res!34541 () Bool)

(assert (=> d!12901 (=> (not res!34541) (not e!41366))))

(assert (=> d!12901 (= res!34541 (or (bvsge #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))))

(declare-fun lt!26445 () ListLongMap!1363)

(assert (=> d!12901 (= lt!26443 lt!26445)))

(declare-fun lt!26451 () Unit!1685)

(declare-fun e!41373 () Unit!1685)

(assert (=> d!12901 (= lt!26451 e!41373)))

(declare-fun c!8488 () Bool)

(declare-fun e!41365 () Bool)

(assert (=> d!12901 (= c!8488 e!41365)))

(declare-fun res!34547 () Bool)

(assert (=> d!12901 (=> (not res!34547) (not e!41365))))

(assert (=> d!12901 (= res!34547 (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(declare-fun e!41374 () ListLongMap!1363)

(assert (=> d!12901 (= lt!26445 e!41374)))

(declare-fun c!8489 () Bool)

(assert (=> d!12901 (= c!8489 (and (not (= (bvand lt!25897 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!25897 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12901 (validMask!0 (mask!5992 newMap!16))))

(assert (=> d!12901 (= (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) lt!25897 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) lt!26443)))

(declare-fun b!63078 () Bool)

(declare-fun res!34546 () Bool)

(assert (=> b!63078 (=> (not res!34546) (not e!41366))))

(declare-fun e!41372 () Bool)

(assert (=> b!63078 (= res!34546 e!41372)))

(declare-fun res!34543 () Bool)

(assert (=> b!63078 (=> res!34543 e!41372)))

(declare-fun e!41370 () Bool)

(assert (=> b!63078 (= res!34543 (not e!41370))))

(declare-fun res!34544 () Bool)

(assert (=> b!63078 (=> (not res!34544) (not e!41370))))

(assert (=> b!63078 (= res!34544 (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(declare-fun bm!4980 () Bool)

(declare-fun call!4986 () ListLongMap!1363)

(declare-fun call!4987 () ListLongMap!1363)

(assert (=> bm!4980 (= call!4986 call!4987)))

(declare-fun b!63079 () Bool)

(declare-fun e!41369 () ListLongMap!1363)

(declare-fun call!4988 () ListLongMap!1363)

(assert (=> b!63079 (= e!41369 call!4988)))

(declare-fun bm!4981 () Bool)

(declare-fun call!4985 () Bool)

(assert (=> bm!4981 (= call!4985 (contains!690 lt!26443 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63080 () Bool)

(assert (=> b!63080 (= e!41377 (not call!4985))))

(declare-fun bm!4982 () Bool)

(declare-fun call!4989 () ListLongMap!1363)

(declare-fun call!4984 () ListLongMap!1363)

(assert (=> bm!4982 (= call!4989 call!4984)))

(declare-fun bm!4983 () Bool)

(declare-fun c!8490 () Bool)

(assert (=> bm!4983 (= call!4984 (+!83 (ite c!8489 call!4987 (ite c!8490 call!4986 call!4988)) (ite (or c!8489 c!8490) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(declare-fun b!63081 () Bool)

(assert (=> b!63081 (= e!41365 (validKeyInArray!0 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63082 () Bool)

(assert (=> b!63082 (= e!41374 (+!83 call!4984 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))

(declare-fun bm!4984 () Bool)

(declare-fun call!4983 () Bool)

(assert (=> bm!4984 (= call!4983 (contains!690 lt!26443 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63083 () Bool)

(declare-fun Unit!1724 () Unit!1685)

(assert (=> b!63083 (= e!41373 Unit!1724)))

(declare-fun b!63084 () Bool)

(assert (=> b!63084 (= e!41370 (validKeyInArray!0 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63085 () Bool)

(declare-fun c!8486 () Bool)

(assert (=> b!63085 (= c!8486 (and (not (= (bvand lt!25897 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!25897 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!41376 () ListLongMap!1363)

(assert (=> b!63085 (= e!41376 e!41369)))

(declare-fun b!63086 () Bool)

(declare-fun e!41367 () Bool)

(assert (=> b!63086 (= e!41366 e!41367)))

(declare-fun c!8487 () Bool)

(assert (=> b!63086 (= c!8487 (not (= (bvand lt!25897 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!63087 () Bool)

(assert (=> b!63087 (= e!41374 e!41376)))

(assert (=> b!63087 (= c!8490 (and (not (= (bvand lt!25897 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!25897 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!63088 () Bool)

(declare-fun e!41368 () Bool)

(assert (=> b!63088 (= e!41372 e!41368)))

(declare-fun res!34545 () Bool)

(assert (=> b!63088 (=> (not res!34545) (not e!41368))))

(assert (=> b!63088 (= res!34545 (contains!690 lt!26443 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63088 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(declare-fun b!63089 () Bool)

(assert (=> b!63089 (= e!41367 (not call!4983))))

(declare-fun bm!4985 () Bool)

(assert (=> bm!4985 (= call!4988 call!4986)))

(declare-fun b!63090 () Bool)

(assert (=> b!63090 (= e!41377 e!41375)))

(declare-fun res!34548 () Bool)

(assert (=> b!63090 (= res!34548 call!4985)))

(assert (=> b!63090 (=> (not res!34548) (not e!41375))))

(declare-fun bm!4986 () Bool)

(assert (=> bm!4986 (= call!4987 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) lt!25897 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun b!63091 () Bool)

(assert (=> b!63091 (= e!41368 (= (apply!68 lt!26443 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)) (get!1089 (select (arr!1787 (_values!2070 newMap!16)) #b00000000000000000000000000000000) (dynLambda!312 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!63091 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2020 (_values!2070 newMap!16))))))

(assert (=> b!63091 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(declare-fun b!63092 () Bool)

(assert (=> b!63092 (= e!41369 call!4989)))

(declare-fun b!63093 () Bool)

(declare-fun lt!26457 () Unit!1685)

(assert (=> b!63093 (= e!41373 lt!26457)))

(declare-fun lt!26442 () ListLongMap!1363)

(assert (=> b!63093 (= lt!26442 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) lt!25897 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26448 () (_ BitVec 64))

(assert (=> b!63093 (= lt!26448 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26455 () (_ BitVec 64))

(assert (=> b!63093 (= lt!26455 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26449 () Unit!1685)

(assert (=> b!63093 (= lt!26449 (addStillContains!44 lt!26442 lt!26448 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!26455))))

(assert (=> b!63093 (contains!690 (+!83 lt!26442 (tuple2!2053 lt!26448 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26455)))

(declare-fun lt!26441 () Unit!1685)

(assert (=> b!63093 (= lt!26441 lt!26449)))

(declare-fun lt!26439 () ListLongMap!1363)

(assert (=> b!63093 (= lt!26439 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) lt!25897 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26450 () (_ BitVec 64))

(assert (=> b!63093 (= lt!26450 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26454 () (_ BitVec 64))

(assert (=> b!63093 (= lt!26454 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26446 () Unit!1685)

(assert (=> b!63093 (= lt!26446 (addApplyDifferent!44 lt!26439 lt!26450 (minValue!1999 newMap!16) lt!26454))))

(assert (=> b!63093 (= (apply!68 (+!83 lt!26439 (tuple2!2053 lt!26450 (minValue!1999 newMap!16))) lt!26454) (apply!68 lt!26439 lt!26454))))

(declare-fun lt!26438 () Unit!1685)

(assert (=> b!63093 (= lt!26438 lt!26446)))

(declare-fun lt!26447 () ListLongMap!1363)

(assert (=> b!63093 (= lt!26447 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) lt!25897 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26452 () (_ BitVec 64))

(assert (=> b!63093 (= lt!26452 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26440 () (_ BitVec 64))

(assert (=> b!63093 (= lt!26440 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26459 () Unit!1685)

(assert (=> b!63093 (= lt!26459 (addApplyDifferent!44 lt!26447 lt!26452 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!26440))))

(assert (=> b!63093 (= (apply!68 (+!83 lt!26447 (tuple2!2053 lt!26452 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26440) (apply!68 lt!26447 lt!26440))))

(declare-fun lt!26453 () Unit!1685)

(assert (=> b!63093 (= lt!26453 lt!26459)))

(declare-fun lt!26444 () ListLongMap!1363)

(assert (=> b!63093 (= lt!26444 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) lt!25897 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26456 () (_ BitVec 64))

(assert (=> b!63093 (= lt!26456 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26458 () (_ BitVec 64))

(assert (=> b!63093 (= lt!26458 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!63093 (= lt!26457 (addApplyDifferent!44 lt!26444 lt!26456 (minValue!1999 newMap!16) lt!26458))))

(assert (=> b!63093 (= (apply!68 (+!83 lt!26444 (tuple2!2053 lt!26456 (minValue!1999 newMap!16))) lt!26458) (apply!68 lt!26444 lt!26458))))

(declare-fun b!63094 () Bool)

(assert (=> b!63094 (= e!41367 e!41371)))

(declare-fun res!34540 () Bool)

(assert (=> b!63094 (= res!34540 call!4983)))

(assert (=> b!63094 (=> (not res!34540) (not e!41371))))

(declare-fun b!63095 () Bool)

(assert (=> b!63095 (= e!41376 call!4989)))

(assert (= (and d!12901 c!8489) b!63082))

(assert (= (and d!12901 (not c!8489)) b!63087))

(assert (= (and b!63087 c!8490) b!63095))

(assert (= (and b!63087 (not c!8490)) b!63085))

(assert (= (and b!63085 c!8486) b!63092))

(assert (= (and b!63085 (not c!8486)) b!63079))

(assert (= (or b!63092 b!63079) bm!4985))

(assert (= (or b!63095 bm!4985) bm!4980))

(assert (= (or b!63095 b!63092) bm!4982))

(assert (= (or b!63082 bm!4980) bm!4986))

(assert (= (or b!63082 bm!4982) bm!4983))

(assert (= (and d!12901 res!34547) b!63081))

(assert (= (and d!12901 c!8488) b!63093))

(assert (= (and d!12901 (not c!8488)) b!63083))

(assert (= (and d!12901 res!34541) b!63078))

(assert (= (and b!63078 res!34544) b!63084))

(assert (= (and b!63078 (not res!34543)) b!63088))

(assert (= (and b!63088 res!34545) b!63091))

(assert (= (and b!63078 res!34546) b!63075))

(assert (= (and b!63075 c!8491) b!63090))

(assert (= (and b!63075 (not c!8491)) b!63080))

(assert (= (and b!63090 res!34548) b!63077))

(assert (= (or b!63090 b!63080) bm!4981))

(assert (= (and b!63075 res!34542) b!63086))

(assert (= (and b!63086 c!8487) b!63094))

(assert (= (and b!63086 (not c!8487)) b!63089))

(assert (= (and b!63094 res!34540) b!63076))

(assert (= (or b!63094 b!63089) bm!4984))

(declare-fun b_lambda!2805 () Bool)

(assert (=> (not b_lambda!2805) (not b!63091)))

(assert (=> b!63091 t!4844))

(declare-fun b_and!3845 () Bool)

(assert (= b_and!3841 (and (=> t!4844 result!2455) b_and!3845)))

(assert (=> b!63091 t!4846))

(declare-fun b_and!3847 () Bool)

(assert (= b_and!3843 (and (=> t!4846 result!2457) b_and!3847)))

(assert (=> bm!4986 m!55507))

(declare-fun m!56823 () Bool)

(assert (=> bm!4986 m!56823))

(declare-fun m!56825 () Bool)

(assert (=> b!63082 m!56825))

(assert (=> b!63084 m!55803))

(assert (=> b!63084 m!55803))

(assert (=> b!63084 m!55843))

(declare-fun m!56827 () Bool)

(assert (=> bm!4984 m!56827))

(assert (=> b!63088 m!55803))

(assert (=> b!63088 m!55803))

(declare-fun m!56829 () Bool)

(assert (=> b!63088 m!56829))

(declare-fun m!56831 () Bool)

(assert (=> b!63076 m!56831))

(declare-fun m!56833 () Bool)

(assert (=> bm!4983 m!56833))

(assert (=> b!63081 m!55803))

(assert (=> b!63081 m!55803))

(assert (=> b!63081 m!55843))

(declare-fun m!56835 () Bool)

(assert (=> bm!4981 m!56835))

(assert (=> b!63091 m!55803))

(declare-fun m!56837 () Bool)

(assert (=> b!63091 m!56837))

(assert (=> b!63091 m!55857))

(assert (=> b!63091 m!55941))

(assert (=> b!63091 m!55803))

(assert (=> b!63091 m!55941))

(assert (=> b!63091 m!55857))

(assert (=> b!63091 m!55943))

(declare-fun m!56839 () Bool)

(assert (=> b!63077 m!56839))

(declare-fun m!56841 () Bool)

(assert (=> b!63093 m!56841))

(assert (=> b!63093 m!55507))

(assert (=> b!63093 m!56823))

(declare-fun m!56843 () Bool)

(assert (=> b!63093 m!56843))

(assert (=> b!63093 m!56843))

(declare-fun m!56845 () Bool)

(assert (=> b!63093 m!56845))

(declare-fun m!56847 () Bool)

(assert (=> b!63093 m!56847))

(declare-fun m!56849 () Bool)

(assert (=> b!63093 m!56849))

(declare-fun m!56851 () Bool)

(assert (=> b!63093 m!56851))

(declare-fun m!56853 () Bool)

(assert (=> b!63093 m!56853))

(declare-fun m!56855 () Bool)

(assert (=> b!63093 m!56855))

(assert (=> b!63093 m!55507))

(declare-fun m!56857 () Bool)

(assert (=> b!63093 m!56857))

(assert (=> b!63093 m!55803))

(assert (=> b!63093 m!55507))

(declare-fun m!56859 () Bool)

(assert (=> b!63093 m!56859))

(declare-fun m!56861 () Bool)

(assert (=> b!63093 m!56861))

(declare-fun m!56863 () Bool)

(assert (=> b!63093 m!56863))

(assert (=> b!63093 m!56861))

(declare-fun m!56865 () Bool)

(assert (=> b!63093 m!56865))

(assert (=> b!63093 m!56849))

(declare-fun m!56867 () Bool)

(assert (=> b!63093 m!56867))

(assert (=> b!63093 m!56855))

(declare-fun m!56869 () Bool)

(assert (=> b!63093 m!56869))

(assert (=> d!12901 m!55783))

(assert (=> d!12585 d!12901))

(declare-fun d!12903 () Bool)

(assert (=> d!12903 (= (+!83 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) lt!25897 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(assert (=> d!12903 true))

(declare-fun _$7!50 () Unit!1685)

(assert (=> d!12903 (= (choose!337 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) lt!25897 (zeroValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1999 newMap!16) (defaultEntry!2087 newMap!16)) _$7!50)))

(declare-fun bs!2741 () Bool)

(assert (= bs!2741 d!12903))

(assert (=> bs!2741 m!55647))

(assert (=> bs!2741 m!55647))

(assert (=> bs!2741 m!55779))

(assert (=> bs!2741 m!55507))

(assert (=> bs!2741 m!55785))

(assert (=> d!12585 d!12903))

(assert (=> d!12585 d!12755))

(declare-fun d!12905 () Bool)

(assert (=> d!12905 (isDefined!78 (getValueByKey!124 (toList!697 call!4868) (ite c!8262 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (select (arr!1786 (_keys!3718 newMap!16)) (index!3054 lt!25902)))))))

(declare-fun lt!26460 () Unit!1685)

(assert (=> d!12905 (= lt!26460 (choose!339 (toList!697 call!4868) (ite c!8262 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (select (arr!1786 (_keys!3718 newMap!16)) (index!3054 lt!25902)))))))

(declare-fun e!41378 () Bool)

(assert (=> d!12905 e!41378))

(declare-fun res!34549 () Bool)

(assert (=> d!12905 (=> (not res!34549) (not e!41378))))

(assert (=> d!12905 (= res!34549 (isStrictlySorted!281 (toList!697 call!4868)))))

(assert (=> d!12905 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 call!4868) (ite c!8262 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (select (arr!1786 (_keys!3718 newMap!16)) (index!3054 lt!25902)))) lt!26460)))

(declare-fun b!63096 () Bool)

(assert (=> b!63096 (= e!41378 (containsKey!128 (toList!697 call!4868) (ite c!8262 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (select (arr!1786 (_keys!3718 newMap!16)) (index!3054 lt!25902)))))))

(assert (= (and d!12905 res!34549) b!63096))

(assert (=> d!12905 m!55899))

(assert (=> d!12905 m!55899))

(assert (=> d!12905 m!55901))

(declare-fun m!56871 () Bool)

(assert (=> d!12905 m!56871))

(declare-fun m!56873 () Bool)

(assert (=> d!12905 m!56873))

(assert (=> b!63096 m!55895))

(assert (=> b!62524 d!12905))

(declare-fun d!12907 () Bool)

(assert (=> d!12907 (= (isDefined!78 (getValueByKey!124 (toList!697 call!4868) (ite c!8262 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (select (arr!1786 (_keys!3718 newMap!16)) (index!3054 lt!25902))))) (not (isEmpty!304 (getValueByKey!124 (toList!697 call!4868) (ite c!8262 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (select (arr!1786 (_keys!3718 newMap!16)) (index!3054 lt!25902)))))))))

(declare-fun bs!2742 () Bool)

(assert (= bs!2742 d!12907))

(assert (=> bs!2742 m!55899))

(declare-fun m!56875 () Bool)

(assert (=> bs!2742 m!56875))

(assert (=> b!62524 d!12907))

(declare-fun c!8492 () Bool)

(declare-fun d!12909 () Bool)

(assert (=> d!12909 (= c!8492 (and ((_ is Cons!1443) (toList!697 call!4868)) (= (_1!1037 (h!2026 (toList!697 call!4868))) (ite c!8262 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (select (arr!1786 (_keys!3718 newMap!16)) (index!3054 lt!25902))))))))

(declare-fun e!41379 () Option!130)

(assert (=> d!12909 (= (getValueByKey!124 (toList!697 call!4868) (ite c!8262 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (select (arr!1786 (_keys!3718 newMap!16)) (index!3054 lt!25902)))) e!41379)))

(declare-fun b!63097 () Bool)

(assert (=> b!63097 (= e!41379 (Some!129 (_2!1037 (h!2026 (toList!697 call!4868)))))))

(declare-fun b!63100 () Bool)

(declare-fun e!41380 () Option!130)

(assert (=> b!63100 (= e!41380 None!128)))

(declare-fun b!63098 () Bool)

(assert (=> b!63098 (= e!41379 e!41380)))

(declare-fun c!8493 () Bool)

(assert (=> b!63098 (= c!8493 (and ((_ is Cons!1443) (toList!697 call!4868)) (not (= (_1!1037 (h!2026 (toList!697 call!4868))) (ite c!8262 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (select (arr!1786 (_keys!3718 newMap!16)) (index!3054 lt!25902)))))))))

(declare-fun b!63099 () Bool)

(assert (=> b!63099 (= e!41380 (getValueByKey!124 (t!4832 (toList!697 call!4868)) (ite c!8262 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (select (arr!1786 (_keys!3718 newMap!16)) (index!3054 lt!25902)))))))

(assert (= (and d!12909 c!8492) b!63097))

(assert (= (and d!12909 (not c!8492)) b!63098))

(assert (= (and b!63098 c!8493) b!63099))

(assert (= (and b!63098 (not c!8493)) b!63100))

(declare-fun m!56877 () Bool)

(assert (=> b!63099 m!56877))

(assert (=> b!62524 d!12909))

(declare-fun b!63101 () Bool)

(assert (=> b!63101 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992))))))))

(assert (=> b!63101 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2020 (_values!2070 (v!2412 (underlying!229 thiss!992))))))))

(declare-fun e!41383 () Bool)

(declare-fun lt!26466 () ListLongMap!1363)

(assert (=> b!63101 (= e!41383 (= (apply!68 lt!26466 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!63102 () Bool)

(declare-fun lt!26461 () Unit!1685)

(declare-fun lt!26464 () Unit!1685)

(assert (=> b!63102 (= lt!26461 lt!26464)))

(declare-fun lt!26465 () V!2865)

(declare-fun lt!26463 () ListLongMap!1363)

(declare-fun lt!26462 () (_ BitVec 64))

(declare-fun lt!26467 () (_ BitVec 64))

(assert (=> b!63102 (not (contains!690 (+!83 lt!26463 (tuple2!2053 lt!26467 lt!26465)) lt!26462))))

(assert (=> b!63102 (= lt!26464 (addStillNotContains!18 lt!26463 lt!26467 lt!26465 lt!26462))))

(assert (=> b!63102 (= lt!26462 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!63102 (= lt!26465 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!63102 (= lt!26467 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(declare-fun call!4990 () ListLongMap!1363)

(assert (=> b!63102 (= lt!26463 call!4990)))

(declare-fun e!41384 () ListLongMap!1363)

(assert (=> b!63102 (= e!41384 (+!83 call!4990 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!63103 () Bool)

(declare-fun res!34552 () Bool)

(declare-fun e!41385 () Bool)

(assert (=> b!63103 (=> (not res!34552) (not e!41385))))

(assert (=> b!63103 (= res!34552 (not (contains!690 lt!26466 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!63104 () Bool)

(declare-fun e!41381 () Bool)

(assert (=> b!63104 (= e!41381 (validKeyInArray!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!63104 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))

(declare-fun bm!4987 () Bool)

(assert (=> bm!4987 (= call!4990 (getCurrentListMapNoExtraKeys!46 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (_values!2070 (v!2412 (underlying!229 thiss!992))) (mask!5992 (v!2412 (underlying!229 thiss!992))) (extraKeys!1966 (v!2412 (underlying!229 thiss!992))) (zeroValue!1999 (v!2412 (underlying!229 thiss!992))) (minValue!1999 (v!2412 (underlying!229 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2087 (v!2412 (underlying!229 thiss!992)))))))

(declare-fun b!63105 () Bool)

(declare-fun e!41382 () ListLongMap!1363)

(assert (=> b!63105 (= e!41382 e!41384)))

(declare-fun c!8497 () Bool)

(assert (=> b!63105 (= c!8497 (validKeyInArray!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(declare-fun b!63106 () Bool)

(declare-fun e!41387 () Bool)

(assert (=> b!63106 (= e!41387 (= lt!26466 (getCurrentListMapNoExtraKeys!46 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (_values!2070 (v!2412 (underlying!229 thiss!992))) (mask!5992 (v!2412 (underlying!229 thiss!992))) (extraKeys!1966 (v!2412 (underlying!229 thiss!992))) (zeroValue!1999 (v!2412 (underlying!229 thiss!992))) (minValue!1999 (v!2412 (underlying!229 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))))))))

(declare-fun d!12911 () Bool)

(assert (=> d!12911 e!41385))

(declare-fun res!34553 () Bool)

(assert (=> d!12911 (=> (not res!34553) (not e!41385))))

(assert (=> d!12911 (= res!34553 (not (contains!690 lt!26466 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12911 (= lt!26466 e!41382)))

(declare-fun c!8496 () Bool)

(assert (=> d!12911 (= c!8496 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992))))))))

(assert (=> d!12911 (validMask!0 (mask!5992 (v!2412 (underlying!229 thiss!992))))))

(assert (=> d!12911 (= (getCurrentListMapNoExtraKeys!46 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (_values!2070 (v!2412 (underlying!229 thiss!992))) (mask!5992 (v!2412 (underlying!229 thiss!992))) (extraKeys!1966 (v!2412 (underlying!229 thiss!992))) (zeroValue!1999 (v!2412 (underlying!229 thiss!992))) (minValue!1999 (v!2412 (underlying!229 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2087 (v!2412 (underlying!229 thiss!992)))) lt!26466)))

(declare-fun b!63107 () Bool)

(assert (=> b!63107 (= e!41387 (isEmpty!303 lt!26466))))

(declare-fun b!63108 () Bool)

(declare-fun e!41386 () Bool)

(assert (=> b!63108 (= e!41386 e!41387)))

(declare-fun c!8495 () Bool)

(assert (=> b!63108 (= c!8495 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992))))))))

(declare-fun b!63109 () Bool)

(assert (=> b!63109 (= e!41384 call!4990)))

(declare-fun b!63110 () Bool)

(assert (=> b!63110 (= e!41386 e!41383)))

(assert (=> b!63110 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992))))))))

(declare-fun res!34551 () Bool)

(assert (=> b!63110 (= res!34551 (contains!690 lt!26466 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!63110 (=> (not res!34551) (not e!41383))))

(declare-fun b!63111 () Bool)

(assert (=> b!63111 (= e!41385 e!41386)))

(declare-fun c!8494 () Bool)

(assert (=> b!63111 (= c!8494 e!41381)))

(declare-fun res!34550 () Bool)

(assert (=> b!63111 (=> (not res!34550) (not e!41381))))

(assert (=> b!63111 (= res!34550 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992))))))))

(declare-fun b!63112 () Bool)

(assert (=> b!63112 (= e!41382 (ListLongMap!1364 Nil!1444))))

(assert (= (and d!12911 c!8496) b!63112))

(assert (= (and d!12911 (not c!8496)) b!63105))

(assert (= (and b!63105 c!8497) b!63102))

(assert (= (and b!63105 (not c!8497)) b!63109))

(assert (= (or b!63102 b!63109) bm!4987))

(assert (= (and d!12911 res!34553) b!63103))

(assert (= (and b!63103 res!34552) b!63111))

(assert (= (and b!63111 res!34550) b!63104))

(assert (= (and b!63111 c!8494) b!63110))

(assert (= (and b!63111 (not c!8494)) b!63108))

(assert (= (and b!63110 res!34551) b!63101))

(assert (= (and b!63108 c!8495) b!63106))

(assert (= (and b!63108 (not c!8495)) b!63107))

(declare-fun b_lambda!2807 () Bool)

(assert (=> (not b_lambda!2807) (not b!63101)))

(assert (=> b!63101 t!4828))

(declare-fun b_and!3849 () Bool)

(assert (= b_and!3845 (and (=> t!4828 result!2435) b_and!3849)))

(assert (=> b!63101 t!4830))

(declare-fun b_and!3851 () Bool)

(assert (= b_and!3847 (and (=> t!4830 result!2439) b_and!3851)))

(declare-fun b_lambda!2809 () Bool)

(assert (=> (not b_lambda!2809) (not b!63102)))

(assert (=> b!63102 t!4828))

(declare-fun b_and!3853 () Bool)

(assert (= b_and!3849 (and (=> t!4828 result!2435) b_and!3853)))

(assert (=> b!63102 t!4830))

(declare-fun b_and!3855 () Bool)

(assert (= b_and!3851 (and (=> t!4830 result!2439) b_and!3855)))

(assert (=> b!63110 m!56001))

(assert (=> b!63110 m!56001))

(declare-fun m!56879 () Bool)

(assert (=> b!63110 m!56879))

(declare-fun m!56881 () Bool)

(assert (=> b!63106 m!56881))

(assert (=> b!63101 m!56001))

(declare-fun m!56883 () Bool)

(assert (=> b!63101 m!56883))

(assert (=> b!63101 m!56001))

(assert (=> b!63101 m!55505))

(declare-fun m!56885 () Bool)

(assert (=> b!63101 m!56885))

(assert (=> b!63101 m!55505))

(declare-fun m!56887 () Bool)

(assert (=> b!63101 m!56887))

(assert (=> b!63101 m!56885))

(declare-fun m!56889 () Bool)

(assert (=> b!63103 m!56889))

(declare-fun m!56891 () Bool)

(assert (=> b!63107 m!56891))

(declare-fun m!56893 () Bool)

(assert (=> d!12911 m!56893))

(assert (=> d!12911 m!55513))

(declare-fun m!56895 () Bool)

(assert (=> b!63102 m!56895))

(assert (=> b!63102 m!56001))

(declare-fun m!56897 () Bool)

(assert (=> b!63102 m!56897))

(assert (=> b!63102 m!56885))

(assert (=> b!63102 m!55505))

(assert (=> b!63102 m!56887))

(assert (=> b!63102 m!56885))

(declare-fun m!56899 () Bool)

(assert (=> b!63102 m!56899))

(assert (=> b!63102 m!55505))

(assert (=> b!63102 m!56895))

(declare-fun m!56901 () Bool)

(assert (=> b!63102 m!56901))

(assert (=> bm!4987 m!56881))

(assert (=> b!63105 m!56001))

(assert (=> b!63105 m!56001))

(declare-fun m!56903 () Bool)

(assert (=> b!63105 m!56903))

(assert (=> b!63104 m!56001))

(assert (=> b!63104 m!56001))

(assert (=> b!63104 m!56903))

(assert (=> bm!4907 d!12911))

(declare-fun lt!26468 () Bool)

(declare-fun d!12913 () Bool)

(assert (=> d!12913 (= lt!26468 (select (content!68 (toList!697 lt!26120)) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!41389 () Bool)

(assert (=> d!12913 (= lt!26468 e!41389)))

(declare-fun res!34555 () Bool)

(assert (=> d!12913 (=> (not res!34555) (not e!41389))))

(assert (=> d!12913 (= res!34555 ((_ is Cons!1443) (toList!697 lt!26120)))))

(assert (=> d!12913 (= (contains!692 (toList!697 lt!26120) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26468)))

(declare-fun b!63113 () Bool)

(declare-fun e!41388 () Bool)

(assert (=> b!63113 (= e!41389 e!41388)))

(declare-fun res!34554 () Bool)

(assert (=> b!63113 (=> res!34554 e!41388)))

(assert (=> b!63113 (= res!34554 (= (h!2026 (toList!697 lt!26120)) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!63114 () Bool)

(assert (=> b!63114 (= e!41388 (contains!692 (t!4832 (toList!697 lt!26120)) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12913 res!34555) b!63113))

(assert (= (and b!63113 (not res!34554)) b!63114))

(declare-fun m!56905 () Bool)

(assert (=> d!12913 m!56905))

(declare-fun m!56907 () Bool)

(assert (=> d!12913 m!56907))

(declare-fun m!56909 () Bool)

(assert (=> b!63114 m!56909))

(assert (=> b!62589 d!12913))

(declare-fun d!12915 () Bool)

(assert (=> d!12915 (= (inRange!0 (index!3054 lt!26112) (mask!5992 newMap!16)) (and (bvsge (index!3054 lt!26112) #b00000000000000000000000000000000) (bvslt (index!3054 lt!26112) (bvadd (mask!5992 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> b!62581 d!12915))

(declare-fun d!12917 () Bool)

(assert (=> d!12917 (isDefined!78 (getValueByKey!124 (toList!697 call!4874) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(declare-fun lt!26469 () Unit!1685)

(assert (=> d!12917 (= lt!26469 (choose!339 (toList!697 call!4874) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(declare-fun e!41390 () Bool)

(assert (=> d!12917 e!41390))

(declare-fun res!34556 () Bool)

(assert (=> d!12917 (=> (not res!34556) (not e!41390))))

(assert (=> d!12917 (= res!34556 (isStrictlySorted!281 (toList!697 call!4874)))))

(assert (=> d!12917 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 call!4874) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) lt!26469)))

(declare-fun b!63115 () Bool)

(assert (=> b!63115 (= e!41390 (containsKey!128 (toList!697 call!4874) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(assert (= (and d!12917 res!34556) b!63115))

(assert (=> d!12917 m!55481))

(assert (=> d!12917 m!56009))

(assert (=> d!12917 m!56009))

(assert (=> d!12917 m!56011))

(assert (=> d!12917 m!55481))

(declare-fun m!56911 () Bool)

(assert (=> d!12917 m!56911))

(declare-fun m!56913 () Bool)

(assert (=> d!12917 m!56913))

(assert (=> b!63115 m!55481))

(assert (=> b!63115 m!56005))

(assert (=> b!62585 d!12917))

(declare-fun d!12919 () Bool)

(assert (=> d!12919 (= (isDefined!78 (getValueByKey!124 (toList!697 call!4874) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355))) (not (isEmpty!304 (getValueByKey!124 (toList!697 call!4874) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))))

(declare-fun bs!2743 () Bool)

(assert (= bs!2743 d!12919))

(assert (=> bs!2743 m!56009))

(declare-fun m!56915 () Bool)

(assert (=> bs!2743 m!56915))

(assert (=> b!62585 d!12919))

(declare-fun c!8498 () Bool)

(declare-fun d!12921 () Bool)

(assert (=> d!12921 (= c!8498 (and ((_ is Cons!1443) (toList!697 call!4874)) (= (_1!1037 (h!2026 (toList!697 call!4874))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355))))))

(declare-fun e!41391 () Option!130)

(assert (=> d!12921 (= (getValueByKey!124 (toList!697 call!4874) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) e!41391)))

(declare-fun b!63116 () Bool)

(assert (=> b!63116 (= e!41391 (Some!129 (_2!1037 (h!2026 (toList!697 call!4874)))))))

(declare-fun b!63119 () Bool)

(declare-fun e!41392 () Option!130)

(assert (=> b!63119 (= e!41392 None!128)))

(declare-fun b!63117 () Bool)

(assert (=> b!63117 (= e!41391 e!41392)))

(declare-fun c!8499 () Bool)

(assert (=> b!63117 (= c!8499 (and ((_ is Cons!1443) (toList!697 call!4874)) (not (= (_1!1037 (h!2026 (toList!697 call!4874))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))))

(declare-fun b!63118 () Bool)

(assert (=> b!63118 (= e!41392 (getValueByKey!124 (t!4832 (toList!697 call!4874)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(assert (= (and d!12921 c!8498) b!63116))

(assert (= (and d!12921 (not c!8498)) b!63117))

(assert (= (and b!63117 c!8499) b!63118))

(assert (= (and b!63117 (not c!8499)) b!63119))

(assert (=> b!63118 m!55481))

(declare-fun m!56917 () Bool)

(assert (=> b!63118 m!56917))

(assert (=> b!62585 d!12921))

(declare-fun d!12923 () Bool)

(assert (=> d!12923 (contains!690 (+!83 lt!26080 (tuple2!2053 lt!26086 (zeroValue!1999 newMap!16))) lt!26093)))

(declare-fun lt!26470 () Unit!1685)

(assert (=> d!12923 (= lt!26470 (choose!345 lt!26080 lt!26086 (zeroValue!1999 newMap!16) lt!26093))))

(assert (=> d!12923 (contains!690 lt!26080 lt!26093)))

(assert (=> d!12923 (= (addStillContains!44 lt!26080 lt!26086 (zeroValue!1999 newMap!16) lt!26093) lt!26470)))

(declare-fun bs!2744 () Bool)

(assert (= bs!2744 d!12923))

(assert (=> bs!2744 m!55949))

(assert (=> bs!2744 m!55949))

(assert (=> bs!2744 m!55951))

(declare-fun m!56919 () Bool)

(assert (=> bs!2744 m!56919))

(declare-fun m!56921 () Bool)

(assert (=> bs!2744 m!56921))

(assert (=> b!62554 d!12923))

(declare-fun d!12925 () Bool)

(assert (=> d!12925 (= (apply!68 lt!26085 lt!26078) (get!1092 (getValueByKey!124 (toList!697 lt!26085) lt!26078)))))

(declare-fun bs!2745 () Bool)

(assert (= bs!2745 d!12925))

(declare-fun m!56923 () Bool)

(assert (=> bs!2745 m!56923))

(assert (=> bs!2745 m!56923))

(declare-fun m!56925 () Bool)

(assert (=> bs!2745 m!56925))

(assert (=> b!62554 d!12925))

(declare-fun d!12927 () Bool)

(assert (=> d!12927 (= (apply!68 lt!26077 lt!26092) (get!1092 (getValueByKey!124 (toList!697 lt!26077) lt!26092)))))

(declare-fun bs!2746 () Bool)

(assert (= bs!2746 d!12927))

(declare-fun m!56927 () Bool)

(assert (=> bs!2746 m!56927))

(assert (=> bs!2746 m!56927))

(declare-fun m!56929 () Bool)

(assert (=> bs!2746 m!56929))

(assert (=> b!62554 d!12927))

(declare-fun d!12929 () Bool)

(declare-fun e!41393 () Bool)

(assert (=> d!12929 e!41393))

(declare-fun res!34558 () Bool)

(assert (=> d!12929 (=> (not res!34558) (not e!41393))))

(declare-fun lt!26473 () ListLongMap!1363)

(assert (=> d!12929 (= res!34558 (contains!690 lt!26473 (_1!1037 (tuple2!2053 lt!26088 (minValue!1999 newMap!16)))))))

(declare-fun lt!26471 () List!1447)

(assert (=> d!12929 (= lt!26473 (ListLongMap!1364 lt!26471))))

(declare-fun lt!26472 () Unit!1685)

(declare-fun lt!26474 () Unit!1685)

(assert (=> d!12929 (= lt!26472 lt!26474)))

(assert (=> d!12929 (= (getValueByKey!124 lt!26471 (_1!1037 (tuple2!2053 lt!26088 (minValue!1999 newMap!16)))) (Some!129 (_2!1037 (tuple2!2053 lt!26088 (minValue!1999 newMap!16)))))))

(assert (=> d!12929 (= lt!26474 (lemmaContainsTupThenGetReturnValue!44 lt!26471 (_1!1037 (tuple2!2053 lt!26088 (minValue!1999 newMap!16))) (_2!1037 (tuple2!2053 lt!26088 (minValue!1999 newMap!16)))))))

(assert (=> d!12929 (= lt!26471 (insertStrictlySorted!47 (toList!697 lt!26077) (_1!1037 (tuple2!2053 lt!26088 (minValue!1999 newMap!16))) (_2!1037 (tuple2!2053 lt!26088 (minValue!1999 newMap!16)))))))

(assert (=> d!12929 (= (+!83 lt!26077 (tuple2!2053 lt!26088 (minValue!1999 newMap!16))) lt!26473)))

(declare-fun b!63120 () Bool)

(declare-fun res!34557 () Bool)

(assert (=> b!63120 (=> (not res!34557) (not e!41393))))

(assert (=> b!63120 (= res!34557 (= (getValueByKey!124 (toList!697 lt!26473) (_1!1037 (tuple2!2053 lt!26088 (minValue!1999 newMap!16)))) (Some!129 (_2!1037 (tuple2!2053 lt!26088 (minValue!1999 newMap!16))))))))

(declare-fun b!63121 () Bool)

(assert (=> b!63121 (= e!41393 (contains!692 (toList!697 lt!26473) (tuple2!2053 lt!26088 (minValue!1999 newMap!16))))))

(assert (= (and d!12929 res!34558) b!63120))

(assert (= (and b!63120 res!34557) b!63121))

(declare-fun m!56931 () Bool)

(assert (=> d!12929 m!56931))

(declare-fun m!56933 () Bool)

(assert (=> d!12929 m!56933))

(declare-fun m!56935 () Bool)

(assert (=> d!12929 m!56935))

(declare-fun m!56937 () Bool)

(assert (=> d!12929 m!56937))

(declare-fun m!56939 () Bool)

(assert (=> b!63120 m!56939))

(declare-fun m!56941 () Bool)

(assert (=> b!63121 m!56941))

(assert (=> b!62554 d!12929))

(declare-fun d!12931 () Bool)

(assert (=> d!12931 (= (apply!68 (+!83 lt!26082 (tuple2!2053 lt!26094 (minValue!1999 newMap!16))) lt!26096) (apply!68 lt!26082 lt!26096))))

(declare-fun lt!26475 () Unit!1685)

(assert (=> d!12931 (= lt!26475 (choose!344 lt!26082 lt!26094 (minValue!1999 newMap!16) lt!26096))))

(declare-fun e!41394 () Bool)

(assert (=> d!12931 e!41394))

(declare-fun res!34559 () Bool)

(assert (=> d!12931 (=> (not res!34559) (not e!41394))))

(assert (=> d!12931 (= res!34559 (contains!690 lt!26082 lt!26096))))

(assert (=> d!12931 (= (addApplyDifferent!44 lt!26082 lt!26094 (minValue!1999 newMap!16) lt!26096) lt!26475)))

(declare-fun b!63122 () Bool)

(assert (=> b!63122 (= e!41394 (not (= lt!26096 lt!26094)))))

(assert (= (and d!12931 res!34559) b!63122))

(declare-fun m!56943 () Bool)

(assert (=> d!12931 m!56943))

(assert (=> d!12931 m!55959))

(assert (=> d!12931 m!55955))

(assert (=> d!12931 m!55957))

(declare-fun m!56945 () Bool)

(assert (=> d!12931 m!56945))

(assert (=> d!12931 m!55955))

(assert (=> b!62554 d!12931))

(declare-fun d!12933 () Bool)

(declare-fun e!41395 () Bool)

(assert (=> d!12933 e!41395))

(declare-fun res!34561 () Bool)

(assert (=> d!12933 (=> (not res!34561) (not e!41395))))

(declare-fun lt!26478 () ListLongMap!1363)

(assert (=> d!12933 (= res!34561 (contains!690 lt!26478 (_1!1037 (tuple2!2053 lt!26094 (minValue!1999 newMap!16)))))))

(declare-fun lt!26476 () List!1447)

(assert (=> d!12933 (= lt!26478 (ListLongMap!1364 lt!26476))))

(declare-fun lt!26477 () Unit!1685)

(declare-fun lt!26479 () Unit!1685)

(assert (=> d!12933 (= lt!26477 lt!26479)))

(assert (=> d!12933 (= (getValueByKey!124 lt!26476 (_1!1037 (tuple2!2053 lt!26094 (minValue!1999 newMap!16)))) (Some!129 (_2!1037 (tuple2!2053 lt!26094 (minValue!1999 newMap!16)))))))

(assert (=> d!12933 (= lt!26479 (lemmaContainsTupThenGetReturnValue!44 lt!26476 (_1!1037 (tuple2!2053 lt!26094 (minValue!1999 newMap!16))) (_2!1037 (tuple2!2053 lt!26094 (minValue!1999 newMap!16)))))))

(assert (=> d!12933 (= lt!26476 (insertStrictlySorted!47 (toList!697 lt!26082) (_1!1037 (tuple2!2053 lt!26094 (minValue!1999 newMap!16))) (_2!1037 (tuple2!2053 lt!26094 (minValue!1999 newMap!16)))))))

(assert (=> d!12933 (= (+!83 lt!26082 (tuple2!2053 lt!26094 (minValue!1999 newMap!16))) lt!26478)))

(declare-fun b!63123 () Bool)

(declare-fun res!34560 () Bool)

(assert (=> b!63123 (=> (not res!34560) (not e!41395))))

(assert (=> b!63123 (= res!34560 (= (getValueByKey!124 (toList!697 lt!26478) (_1!1037 (tuple2!2053 lt!26094 (minValue!1999 newMap!16)))) (Some!129 (_2!1037 (tuple2!2053 lt!26094 (minValue!1999 newMap!16))))))))

(declare-fun b!63124 () Bool)

(assert (=> b!63124 (= e!41395 (contains!692 (toList!697 lt!26478) (tuple2!2053 lt!26094 (minValue!1999 newMap!16))))))

(assert (= (and d!12933 res!34561) b!63123))

(assert (= (and b!63123 res!34560) b!63124))

(declare-fun m!56947 () Bool)

(assert (=> d!12933 m!56947))

(declare-fun m!56949 () Bool)

(assert (=> d!12933 m!56949))

(declare-fun m!56951 () Bool)

(assert (=> d!12933 m!56951))

(declare-fun m!56953 () Bool)

(assert (=> d!12933 m!56953))

(declare-fun m!56955 () Bool)

(assert (=> b!63123 m!56955))

(declare-fun m!56957 () Bool)

(assert (=> b!63124 m!56957))

(assert (=> b!62554 d!12933))

(declare-fun d!12935 () Bool)

(assert (=> d!12935 (= (apply!68 lt!26082 lt!26096) (get!1092 (getValueByKey!124 (toList!697 lt!26082) lt!26096)))))

(declare-fun bs!2747 () Bool)

(assert (= bs!2747 d!12935))

(declare-fun m!56959 () Bool)

(assert (=> bs!2747 m!56959))

(assert (=> bs!2747 m!56959))

(declare-fun m!56961 () Bool)

(assert (=> bs!2747 m!56961))

(assert (=> b!62554 d!12935))

(declare-fun d!12937 () Bool)

(declare-fun e!41396 () Bool)

(assert (=> d!12937 e!41396))

(declare-fun res!34562 () Bool)

(assert (=> d!12937 (=> res!34562 e!41396)))

(declare-fun lt!26483 () Bool)

(assert (=> d!12937 (= res!34562 (not lt!26483))))

(declare-fun lt!26481 () Bool)

(assert (=> d!12937 (= lt!26483 lt!26481)))

(declare-fun lt!26482 () Unit!1685)

(declare-fun e!41397 () Unit!1685)

(assert (=> d!12937 (= lt!26482 e!41397)))

(declare-fun c!8500 () Bool)

(assert (=> d!12937 (= c!8500 lt!26481)))

(assert (=> d!12937 (= lt!26481 (containsKey!128 (toList!697 (+!83 lt!26080 (tuple2!2053 lt!26086 (zeroValue!1999 newMap!16)))) lt!26093))))

(assert (=> d!12937 (= (contains!690 (+!83 lt!26080 (tuple2!2053 lt!26086 (zeroValue!1999 newMap!16))) lt!26093) lt!26483)))

(declare-fun b!63125 () Bool)

(declare-fun lt!26480 () Unit!1685)

(assert (=> b!63125 (= e!41397 lt!26480)))

(assert (=> b!63125 (= lt!26480 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 (+!83 lt!26080 (tuple2!2053 lt!26086 (zeroValue!1999 newMap!16)))) lt!26093))))

(assert (=> b!63125 (isDefined!78 (getValueByKey!124 (toList!697 (+!83 lt!26080 (tuple2!2053 lt!26086 (zeroValue!1999 newMap!16)))) lt!26093))))

(declare-fun b!63126 () Bool)

(declare-fun Unit!1725 () Unit!1685)

(assert (=> b!63126 (= e!41397 Unit!1725)))

(declare-fun b!63127 () Bool)

(assert (=> b!63127 (= e!41396 (isDefined!78 (getValueByKey!124 (toList!697 (+!83 lt!26080 (tuple2!2053 lt!26086 (zeroValue!1999 newMap!16)))) lt!26093)))))

(assert (= (and d!12937 c!8500) b!63125))

(assert (= (and d!12937 (not c!8500)) b!63126))

(assert (= (and d!12937 (not res!34562)) b!63127))

(declare-fun m!56963 () Bool)

(assert (=> d!12937 m!56963))

(declare-fun m!56965 () Bool)

(assert (=> b!63125 m!56965))

(declare-fun m!56967 () Bool)

(assert (=> b!63125 m!56967))

(assert (=> b!63125 m!56967))

(declare-fun m!56969 () Bool)

(assert (=> b!63125 m!56969))

(assert (=> b!63127 m!56967))

(assert (=> b!63127 m!56967))

(assert (=> b!63127 m!56969))

(assert (=> b!62554 d!12937))

(declare-fun d!12939 () Bool)

(declare-fun e!41398 () Bool)

(assert (=> d!12939 e!41398))

(declare-fun res!34564 () Bool)

(assert (=> d!12939 (=> (not res!34564) (not e!41398))))

(declare-fun lt!26486 () ListLongMap!1363)

(assert (=> d!12939 (= res!34564 (contains!690 lt!26486 (_1!1037 (tuple2!2053 lt!26090 (zeroValue!1999 newMap!16)))))))

(declare-fun lt!26484 () List!1447)

(assert (=> d!12939 (= lt!26486 (ListLongMap!1364 lt!26484))))

(declare-fun lt!26485 () Unit!1685)

(declare-fun lt!26487 () Unit!1685)

(assert (=> d!12939 (= lt!26485 lt!26487)))

(assert (=> d!12939 (= (getValueByKey!124 lt!26484 (_1!1037 (tuple2!2053 lt!26090 (zeroValue!1999 newMap!16)))) (Some!129 (_2!1037 (tuple2!2053 lt!26090 (zeroValue!1999 newMap!16)))))))

(assert (=> d!12939 (= lt!26487 (lemmaContainsTupThenGetReturnValue!44 lt!26484 (_1!1037 (tuple2!2053 lt!26090 (zeroValue!1999 newMap!16))) (_2!1037 (tuple2!2053 lt!26090 (zeroValue!1999 newMap!16)))))))

(assert (=> d!12939 (= lt!26484 (insertStrictlySorted!47 (toList!697 lt!26085) (_1!1037 (tuple2!2053 lt!26090 (zeroValue!1999 newMap!16))) (_2!1037 (tuple2!2053 lt!26090 (zeroValue!1999 newMap!16)))))))

(assert (=> d!12939 (= (+!83 lt!26085 (tuple2!2053 lt!26090 (zeroValue!1999 newMap!16))) lt!26486)))

(declare-fun b!63128 () Bool)

(declare-fun res!34563 () Bool)

(assert (=> b!63128 (=> (not res!34563) (not e!41398))))

(assert (=> b!63128 (= res!34563 (= (getValueByKey!124 (toList!697 lt!26486) (_1!1037 (tuple2!2053 lt!26090 (zeroValue!1999 newMap!16)))) (Some!129 (_2!1037 (tuple2!2053 lt!26090 (zeroValue!1999 newMap!16))))))))

(declare-fun b!63129 () Bool)

(assert (=> b!63129 (= e!41398 (contains!692 (toList!697 lt!26486) (tuple2!2053 lt!26090 (zeroValue!1999 newMap!16))))))

(assert (= (and d!12939 res!34564) b!63128))

(assert (= (and b!63128 res!34563) b!63129))

(declare-fun m!56971 () Bool)

(assert (=> d!12939 m!56971))

(declare-fun m!56973 () Bool)

(assert (=> d!12939 m!56973))

(declare-fun m!56975 () Bool)

(assert (=> d!12939 m!56975))

(declare-fun m!56977 () Bool)

(assert (=> d!12939 m!56977))

(declare-fun m!56979 () Bool)

(assert (=> b!63128 m!56979))

(declare-fun m!56981 () Bool)

(assert (=> b!63129 m!56981))

(assert (=> b!62554 d!12939))

(declare-fun d!12941 () Bool)

(declare-fun e!41399 () Bool)

(assert (=> d!12941 e!41399))

(declare-fun res!34566 () Bool)

(assert (=> d!12941 (=> (not res!34566) (not e!41399))))

(declare-fun lt!26490 () ListLongMap!1363)

(assert (=> d!12941 (= res!34566 (contains!690 lt!26490 (_1!1037 (tuple2!2053 lt!26086 (zeroValue!1999 newMap!16)))))))

(declare-fun lt!26488 () List!1447)

(assert (=> d!12941 (= lt!26490 (ListLongMap!1364 lt!26488))))

(declare-fun lt!26489 () Unit!1685)

(declare-fun lt!26491 () Unit!1685)

(assert (=> d!12941 (= lt!26489 lt!26491)))

(assert (=> d!12941 (= (getValueByKey!124 lt!26488 (_1!1037 (tuple2!2053 lt!26086 (zeroValue!1999 newMap!16)))) (Some!129 (_2!1037 (tuple2!2053 lt!26086 (zeroValue!1999 newMap!16)))))))

(assert (=> d!12941 (= lt!26491 (lemmaContainsTupThenGetReturnValue!44 lt!26488 (_1!1037 (tuple2!2053 lt!26086 (zeroValue!1999 newMap!16))) (_2!1037 (tuple2!2053 lt!26086 (zeroValue!1999 newMap!16)))))))

(assert (=> d!12941 (= lt!26488 (insertStrictlySorted!47 (toList!697 lt!26080) (_1!1037 (tuple2!2053 lt!26086 (zeroValue!1999 newMap!16))) (_2!1037 (tuple2!2053 lt!26086 (zeroValue!1999 newMap!16)))))))

(assert (=> d!12941 (= (+!83 lt!26080 (tuple2!2053 lt!26086 (zeroValue!1999 newMap!16))) lt!26490)))

(declare-fun b!63130 () Bool)

(declare-fun res!34565 () Bool)

(assert (=> b!63130 (=> (not res!34565) (not e!41399))))

(assert (=> b!63130 (= res!34565 (= (getValueByKey!124 (toList!697 lt!26490) (_1!1037 (tuple2!2053 lt!26086 (zeroValue!1999 newMap!16)))) (Some!129 (_2!1037 (tuple2!2053 lt!26086 (zeroValue!1999 newMap!16))))))))

(declare-fun b!63131 () Bool)

(assert (=> b!63131 (= e!41399 (contains!692 (toList!697 lt!26490) (tuple2!2053 lt!26086 (zeroValue!1999 newMap!16))))))

(assert (= (and d!12941 res!34566) b!63130))

(assert (= (and b!63130 res!34565) b!63131))

(declare-fun m!56983 () Bool)

(assert (=> d!12941 m!56983))

(declare-fun m!56985 () Bool)

(assert (=> d!12941 m!56985))

(declare-fun m!56987 () Bool)

(assert (=> d!12941 m!56987))

(declare-fun m!56989 () Bool)

(assert (=> d!12941 m!56989))

(declare-fun m!56991 () Bool)

(assert (=> b!63130 m!56991))

(declare-fun m!56993 () Bool)

(assert (=> b!63131 m!56993))

(assert (=> b!62554 d!12941))

(declare-fun d!12943 () Bool)

(assert (=> d!12943 (= (apply!68 (+!83 lt!26082 (tuple2!2053 lt!26094 (minValue!1999 newMap!16))) lt!26096) (get!1092 (getValueByKey!124 (toList!697 (+!83 lt!26082 (tuple2!2053 lt!26094 (minValue!1999 newMap!16)))) lt!26096)))))

(declare-fun bs!2748 () Bool)

(assert (= bs!2748 d!12943))

(declare-fun m!56995 () Bool)

(assert (=> bs!2748 m!56995))

(assert (=> bs!2748 m!56995))

(declare-fun m!56997 () Bool)

(assert (=> bs!2748 m!56997))

(assert (=> b!62554 d!12943))

(declare-fun d!12945 () Bool)

(assert (=> d!12945 (= (apply!68 (+!83 lt!26077 (tuple2!2053 lt!26088 (minValue!1999 newMap!16))) lt!26092) (get!1092 (getValueByKey!124 (toList!697 (+!83 lt!26077 (tuple2!2053 lt!26088 (minValue!1999 newMap!16)))) lt!26092)))))

(declare-fun bs!2749 () Bool)

(assert (= bs!2749 d!12945))

(declare-fun m!56999 () Bool)

(assert (=> bs!2749 m!56999))

(assert (=> bs!2749 m!56999))

(declare-fun m!57001 () Bool)

(assert (=> bs!2749 m!57001))

(assert (=> b!62554 d!12945))

(declare-fun d!12947 () Bool)

(assert (=> d!12947 (= (apply!68 (+!83 lt!26085 (tuple2!2053 lt!26090 (zeroValue!1999 newMap!16))) lt!26078) (apply!68 lt!26085 lt!26078))))

(declare-fun lt!26492 () Unit!1685)

(assert (=> d!12947 (= lt!26492 (choose!344 lt!26085 lt!26090 (zeroValue!1999 newMap!16) lt!26078))))

(declare-fun e!41400 () Bool)

(assert (=> d!12947 e!41400))

(declare-fun res!34567 () Bool)

(assert (=> d!12947 (=> (not res!34567) (not e!41400))))

(assert (=> d!12947 (= res!34567 (contains!690 lt!26085 lt!26078))))

(assert (=> d!12947 (= (addApplyDifferent!44 lt!26085 lt!26090 (zeroValue!1999 newMap!16) lt!26078) lt!26492)))

(declare-fun b!63132 () Bool)

(assert (=> b!63132 (= e!41400 (not (= lt!26078 lt!26090)))))

(assert (= (and d!12947 res!34567) b!63132))

(declare-fun m!57003 () Bool)

(assert (=> d!12947 m!57003))

(assert (=> d!12947 m!55953))

(assert (=> d!12947 m!55961))

(assert (=> d!12947 m!55975))

(declare-fun m!57005 () Bool)

(assert (=> d!12947 m!57005))

(assert (=> d!12947 m!55961))

(assert (=> b!62554 d!12947))

(declare-fun d!12949 () Bool)

(assert (=> d!12949 (= (apply!68 (+!83 lt!26077 (tuple2!2053 lt!26088 (minValue!1999 newMap!16))) lt!26092) (apply!68 lt!26077 lt!26092))))

(declare-fun lt!26493 () Unit!1685)

(assert (=> d!12949 (= lt!26493 (choose!344 lt!26077 lt!26088 (minValue!1999 newMap!16) lt!26092))))

(declare-fun e!41401 () Bool)

(assert (=> d!12949 e!41401))

(declare-fun res!34568 () Bool)

(assert (=> d!12949 (=> (not res!34568) (not e!41401))))

(assert (=> d!12949 (= res!34568 (contains!690 lt!26077 lt!26092))))

(assert (=> d!12949 (= (addApplyDifferent!44 lt!26077 lt!26088 (minValue!1999 newMap!16) lt!26092) lt!26493)))

(declare-fun b!63133 () Bool)

(assert (=> b!63133 (= e!41401 (not (= lt!26092 lt!26088)))))

(assert (= (and d!12949 res!34568) b!63133))

(declare-fun m!57007 () Bool)

(assert (=> d!12949 m!57007))

(assert (=> d!12949 m!55969))

(assert (=> d!12949 m!55967))

(assert (=> d!12949 m!55971))

(declare-fun m!57009 () Bool)

(assert (=> d!12949 m!57009))

(assert (=> d!12949 m!55967))

(assert (=> b!62554 d!12949))

(declare-fun d!12951 () Bool)

(assert (=> d!12951 (= (apply!68 (+!83 lt!26085 (tuple2!2053 lt!26090 (zeroValue!1999 newMap!16))) lt!26078) (get!1092 (getValueByKey!124 (toList!697 (+!83 lt!26085 (tuple2!2053 lt!26090 (zeroValue!1999 newMap!16)))) lt!26078)))))

(declare-fun bs!2750 () Bool)

(assert (= bs!2750 d!12951))

(declare-fun m!57011 () Bool)

(assert (=> bs!2750 m!57011))

(assert (=> bs!2750 m!57011))

(declare-fun m!57013 () Bool)

(assert (=> bs!2750 m!57013))

(assert (=> b!62554 d!12951))

(declare-fun b!63134 () Bool)

(assert (=> b!63134 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(assert (=> b!63134 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2020 (_values!2070 newMap!16))))))

(declare-fun e!41404 () Bool)

(declare-fun lt!26499 () ListLongMap!1363)

(assert (=> b!63134 (= e!41404 (= (apply!68 lt!26499 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)) (get!1089 (select (arr!1787 (_values!2070 newMap!16)) #b00000000000000000000000000000000) (dynLambda!312 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!63135 () Bool)

(declare-fun lt!26494 () Unit!1685)

(declare-fun lt!26497 () Unit!1685)

(assert (=> b!63135 (= lt!26494 lt!26497)))

(declare-fun lt!26500 () (_ BitVec 64))

(declare-fun lt!26495 () (_ BitVec 64))

(declare-fun lt!26496 () ListLongMap!1363)

(declare-fun lt!26498 () V!2865)

(assert (=> b!63135 (not (contains!690 (+!83 lt!26496 (tuple2!2053 lt!26500 lt!26498)) lt!26495))))

(assert (=> b!63135 (= lt!26497 (addStillNotContains!18 lt!26496 lt!26500 lt!26498 lt!26495))))

(assert (=> b!63135 (= lt!26495 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!63135 (= lt!26498 (get!1089 (select (arr!1787 (_values!2070 newMap!16)) #b00000000000000000000000000000000) (dynLambda!312 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!63135 (= lt!26500 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun call!4991 () ListLongMap!1363)

(assert (=> b!63135 (= lt!26496 call!4991)))

(declare-fun e!41405 () ListLongMap!1363)

(assert (=> b!63135 (= e!41405 (+!83 call!4991 (tuple2!2053 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000) (get!1089 (select (arr!1787 (_values!2070 newMap!16)) #b00000000000000000000000000000000) (dynLambda!312 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!63136 () Bool)

(declare-fun res!34571 () Bool)

(declare-fun e!41406 () Bool)

(assert (=> b!63136 (=> (not res!34571) (not e!41406))))

(assert (=> b!63136 (= res!34571 (not (contains!690 lt!26499 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!63137 () Bool)

(declare-fun e!41402 () Bool)

(assert (=> b!63137 (= e!41402 (validKeyInArray!0 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63137 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun bm!4988 () Bool)

(assert (=> bm!4988 (= call!4991 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2087 newMap!16)))))

(declare-fun b!63138 () Bool)

(declare-fun e!41403 () ListLongMap!1363)

(assert (=> b!63138 (= e!41403 e!41405)))

(declare-fun c!8504 () Bool)

(assert (=> b!63138 (= c!8504 (validKeyInArray!0 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63139 () Bool)

(declare-fun e!41408 () Bool)

(assert (=> b!63139 (= e!41408 (= lt!26499 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2087 newMap!16))))))

(declare-fun d!12953 () Bool)

(assert (=> d!12953 e!41406))

(declare-fun res!34572 () Bool)

(assert (=> d!12953 (=> (not res!34572) (not e!41406))))

(assert (=> d!12953 (= res!34572 (not (contains!690 lt!26499 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12953 (= lt!26499 e!41403)))

(declare-fun c!8503 () Bool)

(assert (=> d!12953 (= c!8503 (bvsge #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(assert (=> d!12953 (validMask!0 (mask!5992 newMap!16))))

(assert (=> d!12953 (= (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) lt!26499)))

(declare-fun b!63140 () Bool)

(assert (=> b!63140 (= e!41408 (isEmpty!303 lt!26499))))

(declare-fun b!63141 () Bool)

(declare-fun e!41407 () Bool)

(assert (=> b!63141 (= e!41407 e!41408)))

(declare-fun c!8502 () Bool)

(assert (=> b!63141 (= c!8502 (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(declare-fun b!63142 () Bool)

(assert (=> b!63142 (= e!41405 call!4991)))

(declare-fun b!63143 () Bool)

(assert (=> b!63143 (= e!41407 e!41404)))

(assert (=> b!63143 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(declare-fun res!34570 () Bool)

(assert (=> b!63143 (= res!34570 (contains!690 lt!26499 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63143 (=> (not res!34570) (not e!41404))))

(declare-fun b!63144 () Bool)

(assert (=> b!63144 (= e!41406 e!41407)))

(declare-fun c!8501 () Bool)

(assert (=> b!63144 (= c!8501 e!41402)))

(declare-fun res!34569 () Bool)

(assert (=> b!63144 (=> (not res!34569) (not e!41402))))

(assert (=> b!63144 (= res!34569 (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(declare-fun b!63145 () Bool)

(assert (=> b!63145 (= e!41403 (ListLongMap!1364 Nil!1444))))

(assert (= (and d!12953 c!8503) b!63145))

(assert (= (and d!12953 (not c!8503)) b!63138))

(assert (= (and b!63138 c!8504) b!63135))

(assert (= (and b!63138 (not c!8504)) b!63142))

(assert (= (or b!63135 b!63142) bm!4988))

(assert (= (and d!12953 res!34572) b!63136))

(assert (= (and b!63136 res!34571) b!63144))

(assert (= (and b!63144 res!34569) b!63137))

(assert (= (and b!63144 c!8501) b!63143))

(assert (= (and b!63144 (not c!8501)) b!63141))

(assert (= (and b!63143 res!34570) b!63134))

(assert (= (and b!63141 c!8502) b!63139))

(assert (= (and b!63141 (not c!8502)) b!63140))

(declare-fun b_lambda!2811 () Bool)

(assert (=> (not b_lambda!2811) (not b!63134)))

(assert (=> b!63134 t!4844))

(declare-fun b_and!3857 () Bool)

(assert (= b_and!3853 (and (=> t!4844 result!2455) b_and!3857)))

(assert (=> b!63134 t!4846))

(declare-fun b_and!3859 () Bool)

(assert (= b_and!3855 (and (=> t!4846 result!2457) b_and!3859)))

(declare-fun b_lambda!2813 () Bool)

(assert (=> (not b_lambda!2813) (not b!63135)))

(assert (=> b!63135 t!4844))

(declare-fun b_and!3861 () Bool)

(assert (= b_and!3857 (and (=> t!4844 result!2455) b_and!3861)))

(assert (=> b!63135 t!4846))

(declare-fun b_and!3863 () Bool)

(assert (= b_and!3859 (and (=> t!4846 result!2457) b_and!3863)))

(assert (=> b!63143 m!55803))

(assert (=> b!63143 m!55803))

(declare-fun m!57015 () Bool)

(assert (=> b!63143 m!57015))

(declare-fun m!57017 () Bool)

(assert (=> b!63139 m!57017))

(assert (=> b!63134 m!55803))

(declare-fun m!57019 () Bool)

(assert (=> b!63134 m!57019))

(assert (=> b!63134 m!55803))

(assert (=> b!63134 m!55857))

(assert (=> b!63134 m!55941))

(assert (=> b!63134 m!55857))

(assert (=> b!63134 m!55943))

(assert (=> b!63134 m!55941))

(declare-fun m!57021 () Bool)

(assert (=> b!63136 m!57021))

(declare-fun m!57023 () Bool)

(assert (=> b!63140 m!57023))

(declare-fun m!57025 () Bool)

(assert (=> d!12953 m!57025))

(assert (=> d!12953 m!55783))

(declare-fun m!57027 () Bool)

(assert (=> b!63135 m!57027))

(assert (=> b!63135 m!55803))

(declare-fun m!57029 () Bool)

(assert (=> b!63135 m!57029))

(assert (=> b!63135 m!55941))

(assert (=> b!63135 m!55857))

(assert (=> b!63135 m!55943))

(assert (=> b!63135 m!55941))

(declare-fun m!57031 () Bool)

(assert (=> b!63135 m!57031))

(assert (=> b!63135 m!55857))

(assert (=> b!63135 m!57027))

(declare-fun m!57033 () Bool)

(assert (=> b!63135 m!57033))

(assert (=> bm!4988 m!57017))

(assert (=> b!63138 m!55803))

(assert (=> b!63138 m!55803))

(assert (=> b!63138 m!55843))

(assert (=> b!63137 m!55803))

(assert (=> b!63137 m!55803))

(assert (=> b!63137 m!55843))

(assert (=> b!62554 d!12953))

(declare-fun d!12955 () Bool)

(declare-fun lt!26501 () Bool)

(assert (=> d!12955 (= lt!26501 (select (content!68 (toList!697 lt!26145)) (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))))

(declare-fun e!41410 () Bool)

(assert (=> d!12955 (= lt!26501 e!41410)))

(declare-fun res!34574 () Bool)

(assert (=> d!12955 (=> (not res!34574) (not e!41410))))

(assert (=> d!12955 (= res!34574 ((_ is Cons!1443) (toList!697 lt!26145)))))

(assert (=> d!12955 (= (contains!692 (toList!697 lt!26145) (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))) lt!26501)))

(declare-fun b!63146 () Bool)

(declare-fun e!41409 () Bool)

(assert (=> b!63146 (= e!41410 e!41409)))

(declare-fun res!34573 () Bool)

(assert (=> b!63146 (=> res!34573 e!41409)))

(assert (=> b!63146 (= res!34573 (= (h!2026 (toList!697 lt!26145)) (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))))

(declare-fun b!63147 () Bool)

(assert (=> b!63147 (= e!41409 (contains!692 (t!4832 (toList!697 lt!26145)) (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))))

(assert (= (and d!12955 res!34574) b!63146))

(assert (= (and b!63146 (not res!34573)) b!63147))

(declare-fun m!57035 () Bool)

(assert (=> d!12955 m!57035))

(declare-fun m!57037 () Bool)

(assert (=> d!12955 m!57037))

(declare-fun m!57039 () Bool)

(assert (=> b!63147 m!57039))

(assert (=> b!62613 d!12955))

(declare-fun d!12957 () Bool)

(assert (=> d!12957 (= (get!1092 (getValueByKey!124 (toList!697 lt!25981) lt!25974)) (v!2418 (getValueByKey!124 (toList!697 lt!25981) lt!25974)))))

(assert (=> d!12673 d!12957))

(declare-fun d!12959 () Bool)

(declare-fun c!8505 () Bool)

(assert (=> d!12959 (= c!8505 (and ((_ is Cons!1443) (toList!697 lt!25981)) (= (_1!1037 (h!2026 (toList!697 lt!25981))) lt!25974)))))

(declare-fun e!41411 () Option!130)

(assert (=> d!12959 (= (getValueByKey!124 (toList!697 lt!25981) lt!25974) e!41411)))

(declare-fun b!63148 () Bool)

(assert (=> b!63148 (= e!41411 (Some!129 (_2!1037 (h!2026 (toList!697 lt!25981)))))))

(declare-fun b!63151 () Bool)

(declare-fun e!41412 () Option!130)

(assert (=> b!63151 (= e!41412 None!128)))

(declare-fun b!63149 () Bool)

(assert (=> b!63149 (= e!41411 e!41412)))

(declare-fun c!8506 () Bool)

(assert (=> b!63149 (= c!8506 (and ((_ is Cons!1443) (toList!697 lt!25981)) (not (= (_1!1037 (h!2026 (toList!697 lt!25981))) lt!25974))))))

(declare-fun b!63150 () Bool)

(assert (=> b!63150 (= e!41412 (getValueByKey!124 (t!4832 (toList!697 lt!25981)) lt!25974))))

(assert (= (and d!12959 c!8505) b!63148))

(assert (= (and d!12959 (not c!8505)) b!63149))

(assert (= (and b!63149 c!8506) b!63150))

(assert (= (and b!63149 (not c!8506)) b!63151))

(declare-fun m!57041 () Bool)

(assert (=> b!63150 m!57041))

(assert (=> d!12673 d!12959))

(declare-fun d!12961 () Bool)

(declare-fun lt!26502 () Bool)

(assert (=> d!12961 (= lt!26502 (select (content!67 (ite c!8282 (Cons!1442 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) Nil!1443) Nil!1443)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun e!41414 () Bool)

(assert (=> d!12961 (= lt!26502 e!41414)))

(declare-fun res!34575 () Bool)

(assert (=> d!12961 (=> (not res!34575) (not e!41414))))

(assert (=> d!12961 (= res!34575 ((_ is Cons!1442) (ite c!8282 (Cons!1442 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) Nil!1443) Nil!1443)))))

(assert (=> d!12961 (= (contains!691 (ite c!8282 (Cons!1442 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) Nil!1443) Nil!1443) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) lt!26502)))

(declare-fun b!63152 () Bool)

(declare-fun e!41413 () Bool)

(assert (=> b!63152 (= e!41414 e!41413)))

(declare-fun res!34576 () Bool)

(assert (=> b!63152 (=> res!34576 e!41413)))

(assert (=> b!63152 (= res!34576 (= (h!2025 (ite c!8282 (Cons!1442 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) Nil!1443) Nil!1443)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!63153 () Bool)

(assert (=> b!63153 (= e!41413 (contains!691 (t!4831 (ite c!8282 (Cons!1442 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) Nil!1443) Nil!1443)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(assert (= (and d!12961 res!34575) b!63152))

(assert (= (and b!63152 (not res!34576)) b!63153))

(declare-fun m!57043 () Bool)

(assert (=> d!12961 m!57043))

(assert (=> d!12961 m!56027))

(declare-fun m!57045 () Bool)

(assert (=> d!12961 m!57045))

(assert (=> b!63153 m!56027))

(declare-fun m!57047 () Bool)

(assert (=> b!63153 m!57047))

(assert (=> b!62590 d!12961))

(assert (=> d!12587 d!12689))

(declare-fun b!63170 () Bool)

(declare-fun e!41425 () Bool)

(declare-fun e!41426 () Bool)

(assert (=> b!63170 (= e!41425 e!41426)))

(declare-fun res!34587 () Bool)

(declare-fun call!4996 () Bool)

(assert (=> b!63170 (= res!34587 call!4996)))

(assert (=> b!63170 (=> (not res!34587) (not e!41426))))

(declare-fun b!63171 () Bool)

(declare-fun e!41423 () Bool)

(declare-fun call!4997 () Bool)

(assert (=> b!63171 (= e!41423 (not call!4997))))

(declare-fun b!63172 () Bool)

(declare-fun res!34586 () Bool)

(assert (=> b!63172 (=> (not res!34586) (not e!41423))))

(declare-fun lt!26505 () SeekEntryResult!232)

(assert (=> b!63172 (= res!34586 (= (select (arr!1786 (_keys!3718 newMap!16)) (index!3056 lt!26505)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun d!12963 () Bool)

(assert (=> d!12963 e!41425))

(declare-fun c!8512 () Bool)

(assert (=> d!12963 (= c!8512 ((_ is MissingZero!232) lt!26505))))

(assert (=> d!12963 (= lt!26505 (seekEntryOrOpen!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (_keys!3718 newMap!16) (mask!5992 newMap!16)))))

(assert (=> d!12963 true))

(declare-fun _$34!778 () Unit!1685)

(assert (=> d!12963 (= (choose!338 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (defaultEntry!2087 newMap!16)) _$34!778)))

(declare-fun b!63173 () Bool)

(declare-fun e!41424 () Bool)

(assert (=> b!63173 (= e!41424 ((_ is Undefined!232) lt!26505))))

(declare-fun b!63174 () Bool)

(declare-fun res!34585 () Bool)

(assert (=> b!63174 (= res!34585 (= (select (arr!1786 (_keys!3718 newMap!16)) (index!3053 lt!26505)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63174 (=> (not res!34585) (not e!41426))))

(declare-fun b!63175 () Bool)

(declare-fun res!34588 () Bool)

(assert (=> b!63175 (=> (not res!34588) (not e!41423))))

(assert (=> b!63175 (= res!34588 call!4996)))

(assert (=> b!63175 (= e!41424 e!41423)))

(declare-fun bm!4993 () Bool)

(assert (=> bm!4993 (= call!4997 (arrayContainsKey!0 (_keys!3718 newMap!16) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!63176 () Bool)

(assert (=> b!63176 (= e!41425 e!41424)))

(declare-fun c!8511 () Bool)

(assert (=> b!63176 (= c!8511 ((_ is MissingVacant!232) lt!26505))))

(declare-fun b!63177 () Bool)

(assert (=> b!63177 (= e!41426 (not call!4997))))

(declare-fun bm!4994 () Bool)

(assert (=> bm!4994 (= call!4996 (inRange!0 (ite c!8512 (index!3053 lt!26505) (index!3056 lt!26505)) (mask!5992 newMap!16)))))

(assert (= (and d!12963 c!8512) b!63170))

(assert (= (and d!12963 (not c!8512)) b!63176))

(assert (= (and b!63170 res!34587) b!63174))

(assert (= (and b!63174 res!34585) b!63177))

(assert (= (and b!63176 c!8511) b!63175))

(assert (= (and b!63176 (not c!8511)) b!63173))

(assert (= (and b!63175 res!34588) b!63172))

(assert (= (and b!63172 res!34586) b!63171))

(assert (= (or b!63170 b!63175) bm!4994))

(assert (= (or b!63177 b!63171) bm!4993))

(declare-fun m!57049 () Bool)

(assert (=> b!63174 m!57049))

(declare-fun m!57051 () Bool)

(assert (=> b!63172 m!57051))

(assert (=> d!12963 m!55481))

(assert (=> d!12963 m!55631))

(declare-fun m!57053 () Bool)

(assert (=> bm!4994 m!57053))

(assert (=> bm!4993 m!55481))

(assert (=> bm!4993 m!55641))

(assert (=> d!12587 d!12963))

(assert (=> d!12587 d!12755))

(declare-fun d!12965 () Bool)

(declare-fun lt!26506 () Bool)

(assert (=> d!12965 (= lt!26506 (select (content!68 (toList!697 lt!26151)) (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))))

(declare-fun e!41428 () Bool)

(assert (=> d!12965 (= lt!26506 e!41428)))

(declare-fun res!34590 () Bool)

(assert (=> d!12965 (=> (not res!34590) (not e!41428))))

(assert (=> d!12965 (= res!34590 ((_ is Cons!1443) (toList!697 lt!26151)))))

(assert (=> d!12965 (= (contains!692 (toList!697 lt!26151) (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))) lt!26506)))

(declare-fun b!63178 () Bool)

(declare-fun e!41427 () Bool)

(assert (=> b!63178 (= e!41428 e!41427)))

(declare-fun res!34589 () Bool)

(assert (=> b!63178 (=> res!34589 e!41427)))

(assert (=> b!63178 (= res!34589 (= (h!2026 (toList!697 lt!26151)) (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))))

(declare-fun b!63179 () Bool)

(assert (=> b!63179 (= e!41427 (contains!692 (t!4832 (toList!697 lt!26151)) (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))))

(assert (= (and d!12965 res!34590) b!63178))

(assert (= (and b!63178 (not res!34589)) b!63179))

(declare-fun m!57055 () Bool)

(assert (=> d!12965 m!57055))

(declare-fun m!57057 () Bool)

(assert (=> d!12965 m!57057))

(declare-fun m!57059 () Bool)

(assert (=> b!63179 m!57059))

(assert (=> b!62617 d!12965))

(assert (=> d!12681 d!12679))

(assert (=> d!12681 d!12661))

(declare-fun d!12967 () Bool)

(assert (=> d!12967 (contains!690 (+!83 lt!25976 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))) lt!25989)))

(assert (=> d!12967 true))

(declare-fun _$35!306 () Unit!1685)

(assert (=> d!12967 (= (choose!345 lt!25976 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))) lt!25989) _$35!306)))

(declare-fun bs!2751 () Bool)

(assert (= bs!2751 d!12967))

(assert (=> bs!2751 m!55723))

(assert (=> bs!2751 m!55723))

(assert (=> bs!2751 m!55725))

(assert (=> d!12681 d!12967))

(declare-fun d!12969 () Bool)

(declare-fun e!41429 () Bool)

(assert (=> d!12969 e!41429))

(declare-fun res!34591 () Bool)

(assert (=> d!12969 (=> res!34591 e!41429)))

(declare-fun lt!26510 () Bool)

(assert (=> d!12969 (= res!34591 (not lt!26510))))

(declare-fun lt!26508 () Bool)

(assert (=> d!12969 (= lt!26510 lt!26508)))

(declare-fun lt!26509 () Unit!1685)

(declare-fun e!41430 () Unit!1685)

(assert (=> d!12969 (= lt!26509 e!41430)))

(declare-fun c!8513 () Bool)

(assert (=> d!12969 (= c!8513 lt!26508)))

(assert (=> d!12969 (= lt!26508 (containsKey!128 (toList!697 lt!25976) lt!25989))))

(assert (=> d!12969 (= (contains!690 lt!25976 lt!25989) lt!26510)))

(declare-fun b!63181 () Bool)

(declare-fun lt!26507 () Unit!1685)

(assert (=> b!63181 (= e!41430 lt!26507)))

(assert (=> b!63181 (= lt!26507 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 lt!25976) lt!25989))))

(assert (=> b!63181 (isDefined!78 (getValueByKey!124 (toList!697 lt!25976) lt!25989))))

(declare-fun b!63182 () Bool)

(declare-fun Unit!1726 () Unit!1685)

(assert (=> b!63182 (= e!41430 Unit!1726)))

(declare-fun b!63183 () Bool)

(assert (=> b!63183 (= e!41429 (isDefined!78 (getValueByKey!124 (toList!697 lt!25976) lt!25989)))))

(assert (= (and d!12969 c!8513) b!63181))

(assert (= (and d!12969 (not c!8513)) b!63182))

(assert (= (and d!12969 (not res!34591)) b!63183))

(declare-fun m!57061 () Bool)

(assert (=> d!12969 m!57061))

(declare-fun m!57063 () Bool)

(assert (=> b!63181 m!57063))

(declare-fun m!57065 () Bool)

(assert (=> b!63181 m!57065))

(assert (=> b!63181 m!57065))

(declare-fun m!57067 () Bool)

(assert (=> b!63181 m!57067))

(assert (=> b!63183 m!57065))

(assert (=> b!63183 m!57065))

(assert (=> b!63183 m!57067))

(assert (=> d!12681 d!12969))

(declare-fun d!12971 () Bool)

(declare-fun res!34592 () Bool)

(declare-fun e!41431 () Bool)

(assert (=> d!12971 (=> res!34592 e!41431)))

(assert (=> d!12971 (= res!34592 (and ((_ is Cons!1443) (toList!697 (+!83 lt!25976 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))) (= (_1!1037 (h!2026 (toList!697 (+!83 lt!25976 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))) lt!25989)))))

(assert (=> d!12971 (= (containsKey!128 (toList!697 (+!83 lt!25976 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!25989) e!41431)))

(declare-fun b!63184 () Bool)

(declare-fun e!41432 () Bool)

(assert (=> b!63184 (= e!41431 e!41432)))

(declare-fun res!34593 () Bool)

(assert (=> b!63184 (=> (not res!34593) (not e!41432))))

(assert (=> b!63184 (= res!34593 (and (or (not ((_ is Cons!1443) (toList!697 (+!83 lt!25976 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))) (bvsle (_1!1037 (h!2026 (toList!697 (+!83 lt!25976 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))) lt!25989)) ((_ is Cons!1443) (toList!697 (+!83 lt!25976 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))) (bvslt (_1!1037 (h!2026 (toList!697 (+!83 lt!25976 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))) lt!25989)))))

(declare-fun b!63185 () Bool)

(assert (=> b!63185 (= e!41432 (containsKey!128 (t!4832 (toList!697 (+!83 lt!25976 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))) lt!25989))))

(assert (= (and d!12971 (not res!34592)) b!63184))

(assert (= (and b!63184 res!34593) b!63185))

(declare-fun m!57069 () Bool)

(assert (=> b!63185 m!57069))

(assert (=> d!12679 d!12971))

(declare-fun d!12973 () Bool)

(declare-fun e!41433 () Bool)

(assert (=> d!12973 e!41433))

(declare-fun res!34595 () Bool)

(assert (=> d!12973 (=> (not res!34595) (not e!41433))))

(declare-fun lt!26513 () ListLongMap!1363)

(assert (=> d!12973 (= res!34595 (contains!690 lt!26513 (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(declare-fun lt!26511 () List!1447)

(assert (=> d!12973 (= lt!26513 (ListLongMap!1364 lt!26511))))

(declare-fun lt!26512 () Unit!1685)

(declare-fun lt!26514 () Unit!1685)

(assert (=> d!12973 (= lt!26512 lt!26514)))

(assert (=> d!12973 (= (getValueByKey!124 lt!26511 (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))) (Some!129 (_2!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(assert (=> d!12973 (= lt!26514 (lemmaContainsTupThenGetReturnValue!44 lt!26511 (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))) (_2!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(assert (=> d!12973 (= lt!26511 (insertStrictlySorted!47 (toList!697 call!4912) (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))) (_2!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(assert (=> d!12973 (= (+!83 call!4912 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))) lt!26513)))

(declare-fun b!63186 () Bool)

(declare-fun res!34594 () Bool)

(assert (=> b!63186 (=> (not res!34594) (not e!41433))))

(assert (=> b!63186 (= res!34594 (= (getValueByKey!124 (toList!697 lt!26513) (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))) (Some!129 (_2!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))))

(declare-fun b!63187 () Bool)

(assert (=> b!63187 (= e!41433 (contains!692 (toList!697 lt!26513) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))

(assert (= (and d!12973 res!34595) b!63186))

(assert (= (and b!63186 res!34594) b!63187))

(declare-fun m!57071 () Bool)

(assert (=> d!12973 m!57071))

(declare-fun m!57073 () Bool)

(assert (=> d!12973 m!57073))

(declare-fun m!57075 () Bool)

(assert (=> d!12973 m!57075))

(declare-fun m!57077 () Bool)

(assert (=> d!12973 m!57077))

(declare-fun m!57079 () Bool)

(assert (=> b!63186 m!57079))

(declare-fun m!57081 () Bool)

(assert (=> b!63187 m!57081))

(assert (=> b!62510 d!12973))

(declare-fun d!12975 () Bool)

(declare-fun e!41434 () Bool)

(assert (=> d!12975 e!41434))

(declare-fun res!34596 () Bool)

(assert (=> d!12975 (=> res!34596 e!41434)))

(declare-fun lt!26518 () Bool)

(assert (=> d!12975 (= res!34596 (not lt!26518))))

(declare-fun lt!26516 () Bool)

(assert (=> d!12975 (= lt!26518 lt!26516)))

(declare-fun lt!26517 () Unit!1685)

(declare-fun e!41435 () Unit!1685)

(assert (=> d!12975 (= lt!26517 e!41435)))

(declare-fun c!8514 () Bool)

(assert (=> d!12975 (= c!8514 lt!26516)))

(assert (=> d!12975 (= lt!26516 (containsKey!128 (toList!697 lt!26081) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12975 (= (contains!690 lt!26081 #b1000000000000000000000000000000000000000000000000000000000000000) lt!26518)))

(declare-fun b!63188 () Bool)

(declare-fun lt!26515 () Unit!1685)

(assert (=> b!63188 (= e!41435 lt!26515)))

(assert (=> b!63188 (= lt!26515 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 lt!26081) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63188 (isDefined!78 (getValueByKey!124 (toList!697 lt!26081) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63189 () Bool)

(declare-fun Unit!1727 () Unit!1685)

(assert (=> b!63189 (= e!41435 Unit!1727)))

(declare-fun b!63190 () Bool)

(assert (=> b!63190 (= e!41434 (isDefined!78 (getValueByKey!124 (toList!697 lt!26081) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12975 c!8514) b!63188))

(assert (= (and d!12975 (not c!8514)) b!63189))

(assert (= (and d!12975 (not res!34596)) b!63190))

(declare-fun m!57083 () Bool)

(assert (=> d!12975 m!57083))

(declare-fun m!57085 () Bool)

(assert (=> b!63188 m!57085))

(declare-fun m!57087 () Bool)

(assert (=> b!63188 m!57087))

(assert (=> b!63188 m!57087))

(declare-fun m!57089 () Bool)

(assert (=> b!63188 m!57089))

(assert (=> b!63190 m!57087))

(assert (=> b!63190 m!57087))

(assert (=> b!63190 m!57089))

(assert (=> bm!4919 d!12975))

(declare-fun d!12977 () Bool)

(declare-fun res!34597 () Bool)

(declare-fun e!41436 () Bool)

(assert (=> d!12977 (=> (not res!34597) (not e!41436))))

(assert (=> d!12977 (= res!34597 (simpleValid!44 (_2!1036 lt!26297)))))

(assert (=> d!12977 (= (valid!267 (_2!1036 lt!26297)) e!41436)))

(declare-fun b!63191 () Bool)

(declare-fun res!34598 () Bool)

(assert (=> b!63191 (=> (not res!34598) (not e!41436))))

(assert (=> b!63191 (= res!34598 (= (arrayCountValidKeys!0 (_keys!3718 (_2!1036 lt!26297)) #b00000000000000000000000000000000 (size!2019 (_keys!3718 (_2!1036 lt!26297)))) (_size!366 (_2!1036 lt!26297))))))

(declare-fun b!63192 () Bool)

(declare-fun res!34599 () Bool)

(assert (=> b!63192 (=> (not res!34599) (not e!41436))))

(assert (=> b!63192 (= res!34599 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3718 (_2!1036 lt!26297)) (mask!5992 (_2!1036 lt!26297))))))

(declare-fun b!63193 () Bool)

(assert (=> b!63193 (= e!41436 (arrayNoDuplicates!0 (_keys!3718 (_2!1036 lt!26297)) #b00000000000000000000000000000000 Nil!1443))))

(assert (= (and d!12977 res!34597) b!63191))

(assert (= (and b!63191 res!34598) b!63192))

(assert (= (and b!63192 res!34599) b!63193))

(declare-fun m!57091 () Bool)

(assert (=> d!12977 m!57091))

(declare-fun m!57093 () Bool)

(assert (=> b!63191 m!57093))

(declare-fun m!57095 () Bool)

(assert (=> b!63192 m!57095))

(declare-fun m!57097 () Bool)

(assert (=> b!63193 m!57097))

(assert (=> b!62735 d!12977))

(declare-fun d!12979 () Bool)

(declare-fun res!34600 () Bool)

(declare-fun e!41437 () Bool)

(assert (=> d!12979 (=> res!34600 e!41437)))

(assert (=> d!12979 (= res!34600 (and ((_ is Cons!1443) (toList!697 lt!25977)) (= (_1!1037 (h!2026 (toList!697 lt!25977))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!12979 (= (containsKey!128 (toList!697 lt!25977) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!41437)))

(declare-fun b!63194 () Bool)

(declare-fun e!41438 () Bool)

(assert (=> b!63194 (= e!41437 e!41438)))

(declare-fun res!34601 () Bool)

(assert (=> b!63194 (=> (not res!34601) (not e!41438))))

(assert (=> b!63194 (= res!34601 (and (or (not ((_ is Cons!1443) (toList!697 lt!25977))) (bvsle (_1!1037 (h!2026 (toList!697 lt!25977))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) ((_ is Cons!1443) (toList!697 lt!25977)) (bvslt (_1!1037 (h!2026 (toList!697 lt!25977))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun b!63195 () Bool)

(assert (=> b!63195 (= e!41438 (containsKey!128 (t!4832 (toList!697 lt!25977)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!12979 (not res!34600)) b!63194))

(assert (= (and b!63194 res!34601) b!63195))

(assert (=> b!63195 m!55685))

(declare-fun m!57099 () Bool)

(assert (=> b!63195 m!57099))

(assert (=> d!12583 d!12979))

(assert (=> b!62628 d!12859))

(declare-fun d!12981 () Bool)

(assert (=> d!12981 (= (isDefined!78 (getValueByKey!124 (toList!697 lt!25977) #b1000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!304 (getValueByKey!124 (toList!697 lt!25977) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!2752 () Bool)

(assert (= bs!2752 d!12981))

(assert (=> bs!2752 m!55807))

(declare-fun m!57101 () Bool)

(assert (=> bs!2752 m!57101))

(assert (=> b!62576 d!12981))

(declare-fun d!12983 () Bool)

(declare-fun c!8515 () Bool)

(assert (=> d!12983 (= c!8515 (and ((_ is Cons!1443) (toList!697 lt!25977)) (= (_1!1037 (h!2026 (toList!697 lt!25977))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!41439 () Option!130)

(assert (=> d!12983 (= (getValueByKey!124 (toList!697 lt!25977) #b1000000000000000000000000000000000000000000000000000000000000000) e!41439)))

(declare-fun b!63196 () Bool)

(assert (=> b!63196 (= e!41439 (Some!129 (_2!1037 (h!2026 (toList!697 lt!25977)))))))

(declare-fun b!63199 () Bool)

(declare-fun e!41440 () Option!130)

(assert (=> b!63199 (= e!41440 None!128)))

(declare-fun b!63197 () Bool)

(assert (=> b!63197 (= e!41439 e!41440)))

(declare-fun c!8516 () Bool)

(assert (=> b!63197 (= c!8516 (and ((_ is Cons!1443) (toList!697 lt!25977)) (not (= (_1!1037 (h!2026 (toList!697 lt!25977))) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!63198 () Bool)

(assert (=> b!63198 (= e!41440 (getValueByKey!124 (t!4832 (toList!697 lt!25977)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!12983 c!8515) b!63196))

(assert (= (and d!12983 (not c!8515)) b!63197))

(assert (= (and b!63197 c!8516) b!63198))

(assert (= (and b!63197 (not c!8516)) b!63199))

(declare-fun m!57103 () Bool)

(assert (=> b!63198 m!57103))

(assert (=> b!62576 d!12983))

(declare-fun d!12985 () Bool)

(assert (=> d!12985 (= (get!1092 (getValueByKey!124 (toList!697 lt!25977) #b1000000000000000000000000000000000000000000000000000000000000000)) (v!2418 (getValueByKey!124 (toList!697 lt!25977) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12595 d!12985))

(assert (=> d!12595 d!12983))

(declare-fun d!12987 () Bool)

(assert (=> d!12987 (= (get!1092 (getValueByKey!124 (toList!697 (+!83 lt!25981 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!25974)) (v!2418 (getValueByKey!124 (toList!697 (+!83 lt!25981 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!25974)))))

(assert (=> d!12675 d!12987))

(declare-fun c!8517 () Bool)

(declare-fun d!12989 () Bool)

(assert (=> d!12989 (= c!8517 (and ((_ is Cons!1443) (toList!697 (+!83 lt!25981 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))) (= (_1!1037 (h!2026 (toList!697 (+!83 lt!25981 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))) lt!25974)))))

(declare-fun e!41441 () Option!130)

(assert (=> d!12989 (= (getValueByKey!124 (toList!697 (+!83 lt!25981 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!25974) e!41441)))

(declare-fun b!63200 () Bool)

(assert (=> b!63200 (= e!41441 (Some!129 (_2!1037 (h!2026 (toList!697 (+!83 lt!25981 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))))))))

(declare-fun b!63203 () Bool)

(declare-fun e!41442 () Option!130)

(assert (=> b!63203 (= e!41442 None!128)))

(declare-fun b!63201 () Bool)

(assert (=> b!63201 (= e!41441 e!41442)))

(declare-fun c!8518 () Bool)

(assert (=> b!63201 (= c!8518 (and ((_ is Cons!1443) (toList!697 (+!83 lt!25981 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))) (not (= (_1!1037 (h!2026 (toList!697 (+!83 lt!25981 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))) lt!25974))))))

(declare-fun b!63202 () Bool)

(assert (=> b!63202 (= e!41442 (getValueByKey!124 (t!4832 (toList!697 (+!83 lt!25981 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))) lt!25974))))

(assert (= (and d!12989 c!8517) b!63200))

(assert (= (and d!12989 (not c!8517)) b!63201))

(assert (= (and b!63201 c!8518) b!63202))

(assert (= (and b!63201 (not c!8518)) b!63203))

(declare-fun m!57105 () Bool)

(assert (=> b!63202 m!57105))

(assert (=> d!12675 d!12989))

(declare-fun d!12991 () Bool)

(declare-fun e!41443 () Bool)

(assert (=> d!12991 e!41443))

(declare-fun res!34603 () Bool)

(assert (=> d!12991 (=> (not res!34603) (not e!41443))))

(declare-fun lt!26521 () ListLongMap!1363)

(assert (=> d!12991 (= res!34603 (contains!690 lt!26521 (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!26519 () List!1447)

(assert (=> d!12991 (= lt!26521 (ListLongMap!1364 lt!26519))))

(declare-fun lt!26520 () Unit!1685)

(declare-fun lt!26522 () Unit!1685)

(assert (=> d!12991 (= lt!26520 lt!26522)))

(assert (=> d!12991 (= (getValueByKey!124 lt!26519 (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12991 (= lt!26522 (lemmaContainsTupThenGetReturnValue!44 lt!26519 (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12991 (= lt!26519 (insertStrictlySorted!47 (toList!697 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12991 (= (+!83 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26521)))

(declare-fun b!63204 () Bool)

(declare-fun res!34602 () Bool)

(assert (=> b!63204 (=> (not res!34602) (not e!41443))))

(assert (=> b!63204 (= res!34602 (= (getValueByKey!124 (toList!697 lt!26521) (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!63205 () Bool)

(assert (=> b!63205 (= e!41443 (contains!692 (toList!697 lt!26521) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12991 res!34603) b!63204))

(assert (= (and b!63204 res!34602) b!63205))

(declare-fun m!57107 () Bool)

(assert (=> d!12991 m!57107))

(declare-fun m!57109 () Bool)

(assert (=> d!12991 m!57109))

(declare-fun m!57111 () Bool)

(assert (=> d!12991 m!57111))

(declare-fun m!57113 () Bool)

(assert (=> d!12991 m!57113))

(declare-fun m!57115 () Bool)

(assert (=> b!63204 m!57115))

(declare-fun m!57117 () Bool)

(assert (=> b!63205 m!57117))

(assert (=> b!62600 d!12991))

(assert (=> b!62600 d!12619))

(declare-fun b!63206 () Bool)

(declare-fun res!34606 () Bool)

(declare-fun e!41445 () Bool)

(assert (=> b!63206 (=> (not res!34606) (not e!41445))))

(declare-fun e!41456 () Bool)

(assert (=> b!63206 (= res!34606 e!41456)))

(declare-fun c!8524 () Bool)

(assert (=> b!63206 (= c!8524 (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!63207 () Bool)

(declare-fun e!41450 () Bool)

(declare-fun lt!26528 () ListLongMap!1363)

(assert (=> b!63207 (= e!41450 (= (apply!68 lt!26528 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1999 newMap!16)))))

(declare-fun b!63208 () Bool)

(declare-fun e!41454 () Bool)

(assert (=> b!63208 (= e!41454 (= (apply!68 lt!26528 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1999 newMap!16)))))

(declare-fun d!12993 () Bool)

(assert (=> d!12993 e!41445))

(declare-fun res!34605 () Bool)

(assert (=> d!12993 (=> (not res!34605) (not e!41445))))

(assert (=> d!12993 (= res!34605 (or (bvsge #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))))

(declare-fun lt!26530 () ListLongMap!1363)

(assert (=> d!12993 (= lt!26528 lt!26530)))

(declare-fun lt!26536 () Unit!1685)

(declare-fun e!41452 () Unit!1685)

(assert (=> d!12993 (= lt!26536 e!41452)))

(declare-fun c!8521 () Bool)

(declare-fun e!41444 () Bool)

(assert (=> d!12993 (= c!8521 e!41444)))

(declare-fun res!34611 () Bool)

(assert (=> d!12993 (=> (not res!34611) (not e!41444))))

(assert (=> d!12993 (= res!34611 (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(declare-fun e!41453 () ListLongMap!1363)

(assert (=> d!12993 (= lt!26530 e!41453)))

(declare-fun c!8522 () Bool)

(assert (=> d!12993 (= c!8522 (and (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12993 (validMask!0 (mask!5992 newMap!16))))

(assert (=> d!12993 (= (getCurrentListMap!393 (_keys!3718 newMap!16) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (index!3054 lt!25902) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16))) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) lt!26528)))

(declare-fun b!63209 () Bool)

(declare-fun res!34610 () Bool)

(assert (=> b!63209 (=> (not res!34610) (not e!41445))))

(declare-fun e!41451 () Bool)

(assert (=> b!63209 (= res!34610 e!41451)))

(declare-fun res!34607 () Bool)

(assert (=> b!63209 (=> res!34607 e!41451)))

(declare-fun e!41449 () Bool)

(assert (=> b!63209 (= res!34607 (not e!41449))))

(declare-fun res!34608 () Bool)

(assert (=> b!63209 (=> (not res!34608) (not e!41449))))

(assert (=> b!63209 (= res!34608 (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(declare-fun bm!4995 () Bool)

(declare-fun call!5001 () ListLongMap!1363)

(declare-fun call!5002 () ListLongMap!1363)

(assert (=> bm!4995 (= call!5001 call!5002)))

(declare-fun b!63210 () Bool)

(declare-fun e!41448 () ListLongMap!1363)

(declare-fun call!5003 () ListLongMap!1363)

(assert (=> b!63210 (= e!41448 call!5003)))

(declare-fun bm!4996 () Bool)

(declare-fun call!5000 () Bool)

(assert (=> bm!4996 (= call!5000 (contains!690 lt!26528 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63211 () Bool)

(assert (=> b!63211 (= e!41456 (not call!5000))))

(declare-fun bm!4997 () Bool)

(declare-fun call!5004 () ListLongMap!1363)

(declare-fun call!4999 () ListLongMap!1363)

(assert (=> bm!4997 (= call!5004 call!4999)))

(declare-fun bm!4998 () Bool)

(declare-fun c!8523 () Bool)

(assert (=> bm!4998 (= call!4999 (+!83 (ite c!8522 call!5002 (ite c!8523 call!5001 call!5003)) (ite (or c!8522 c!8523) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(declare-fun b!63212 () Bool)

(assert (=> b!63212 (= e!41444 (validKeyInArray!0 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63213 () Bool)

(assert (=> b!63213 (= e!41453 (+!83 call!4999 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))

(declare-fun bm!4999 () Bool)

(declare-fun call!4998 () Bool)

(assert (=> bm!4999 (= call!4998 (contains!690 lt!26528 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63214 () Bool)

(declare-fun Unit!1728 () Unit!1685)

(assert (=> b!63214 (= e!41452 Unit!1728)))

(declare-fun b!63215 () Bool)

(assert (=> b!63215 (= e!41449 (validKeyInArray!0 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63216 () Bool)

(declare-fun c!8519 () Bool)

(assert (=> b!63216 (= c!8519 (and (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!41455 () ListLongMap!1363)

(assert (=> b!63216 (= e!41455 e!41448)))

(declare-fun b!63217 () Bool)

(declare-fun e!41446 () Bool)

(assert (=> b!63217 (= e!41445 e!41446)))

(declare-fun c!8520 () Bool)

(assert (=> b!63217 (= c!8520 (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!63218 () Bool)

(assert (=> b!63218 (= e!41453 e!41455)))

(assert (=> b!63218 (= c!8523 (and (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!63219 () Bool)

(declare-fun e!41447 () Bool)

(assert (=> b!63219 (= e!41451 e!41447)))

(declare-fun res!34609 () Bool)

(assert (=> b!63219 (=> (not res!34609) (not e!41447))))

(assert (=> b!63219 (= res!34609 (contains!690 lt!26528 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63219 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(declare-fun b!63220 () Bool)

(assert (=> b!63220 (= e!41446 (not call!4998))))

(declare-fun bm!5000 () Bool)

(assert (=> bm!5000 (= call!5003 call!5001)))

(declare-fun b!63221 () Bool)

(assert (=> b!63221 (= e!41456 e!41454)))

(declare-fun res!34612 () Bool)

(assert (=> b!63221 (= res!34612 call!5000)))

(assert (=> b!63221 (=> (not res!34612) (not e!41454))))

(declare-fun bm!5001 () Bool)

(assert (=> bm!5001 (= call!5002 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (index!3054 lt!25902) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16))) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun b!63222 () Bool)

(assert (=> b!63222 (= e!41447 (= (apply!68 lt!26528 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)) (get!1089 (select (arr!1787 (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (index!3054 lt!25902) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!312 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!63222 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2020 (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (index!3054 lt!25902) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16))))))))

(assert (=> b!63222 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(declare-fun b!63223 () Bool)

(assert (=> b!63223 (= e!41448 call!5004)))

(declare-fun b!63224 () Bool)

(declare-fun lt!26542 () Unit!1685)

(assert (=> b!63224 (= e!41452 lt!26542)))

(declare-fun lt!26527 () ListLongMap!1363)

(assert (=> b!63224 (= lt!26527 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (index!3054 lt!25902) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16))) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26533 () (_ BitVec 64))

(assert (=> b!63224 (= lt!26533 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26540 () (_ BitVec 64))

(assert (=> b!63224 (= lt!26540 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26534 () Unit!1685)

(assert (=> b!63224 (= lt!26534 (addStillContains!44 lt!26527 lt!26533 (zeroValue!1999 newMap!16) lt!26540))))

(assert (=> b!63224 (contains!690 (+!83 lt!26527 (tuple2!2053 lt!26533 (zeroValue!1999 newMap!16))) lt!26540)))

(declare-fun lt!26526 () Unit!1685)

(assert (=> b!63224 (= lt!26526 lt!26534)))

(declare-fun lt!26524 () ListLongMap!1363)

(assert (=> b!63224 (= lt!26524 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (index!3054 lt!25902) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16))) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26535 () (_ BitVec 64))

(assert (=> b!63224 (= lt!26535 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26539 () (_ BitVec 64))

(assert (=> b!63224 (= lt!26539 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26531 () Unit!1685)

(assert (=> b!63224 (= lt!26531 (addApplyDifferent!44 lt!26524 lt!26535 (minValue!1999 newMap!16) lt!26539))))

(assert (=> b!63224 (= (apply!68 (+!83 lt!26524 (tuple2!2053 lt!26535 (minValue!1999 newMap!16))) lt!26539) (apply!68 lt!26524 lt!26539))))

(declare-fun lt!26523 () Unit!1685)

(assert (=> b!63224 (= lt!26523 lt!26531)))

(declare-fun lt!26532 () ListLongMap!1363)

(assert (=> b!63224 (= lt!26532 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (index!3054 lt!25902) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16))) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26537 () (_ BitVec 64))

(assert (=> b!63224 (= lt!26537 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26525 () (_ BitVec 64))

(assert (=> b!63224 (= lt!26525 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26544 () Unit!1685)

(assert (=> b!63224 (= lt!26544 (addApplyDifferent!44 lt!26532 lt!26537 (zeroValue!1999 newMap!16) lt!26525))))

(assert (=> b!63224 (= (apply!68 (+!83 lt!26532 (tuple2!2053 lt!26537 (zeroValue!1999 newMap!16))) lt!26525) (apply!68 lt!26532 lt!26525))))

(declare-fun lt!26538 () Unit!1685)

(assert (=> b!63224 (= lt!26538 lt!26544)))

(declare-fun lt!26529 () ListLongMap!1363)

(assert (=> b!63224 (= lt!26529 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (index!3054 lt!25902) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16))) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26541 () (_ BitVec 64))

(assert (=> b!63224 (= lt!26541 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26543 () (_ BitVec 64))

(assert (=> b!63224 (= lt!26543 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!63224 (= lt!26542 (addApplyDifferent!44 lt!26529 lt!26541 (minValue!1999 newMap!16) lt!26543))))

(assert (=> b!63224 (= (apply!68 (+!83 lt!26529 (tuple2!2053 lt!26541 (minValue!1999 newMap!16))) lt!26543) (apply!68 lt!26529 lt!26543))))

(declare-fun b!63225 () Bool)

(assert (=> b!63225 (= e!41446 e!41450)))

(declare-fun res!34604 () Bool)

(assert (=> b!63225 (= res!34604 call!4998)))

(assert (=> b!63225 (=> (not res!34604) (not e!41450))))

(declare-fun b!63226 () Bool)

(assert (=> b!63226 (= e!41455 call!5004)))

(assert (= (and d!12993 c!8522) b!63213))

(assert (= (and d!12993 (not c!8522)) b!63218))

(assert (= (and b!63218 c!8523) b!63226))

(assert (= (and b!63218 (not c!8523)) b!63216))

(assert (= (and b!63216 c!8519) b!63223))

(assert (= (and b!63216 (not c!8519)) b!63210))

(assert (= (or b!63223 b!63210) bm!5000))

(assert (= (or b!63226 bm!5000) bm!4995))

(assert (= (or b!63226 b!63223) bm!4997))

(assert (= (or b!63213 bm!4995) bm!5001))

(assert (= (or b!63213 bm!4997) bm!4998))

(assert (= (and d!12993 res!34611) b!63212))

(assert (= (and d!12993 c!8521) b!63224))

(assert (= (and d!12993 (not c!8521)) b!63214))

(assert (= (and d!12993 res!34605) b!63209))

(assert (= (and b!63209 res!34608) b!63215))

(assert (= (and b!63209 (not res!34607)) b!63219))

(assert (= (and b!63219 res!34609) b!63222))

(assert (= (and b!63209 res!34610) b!63206))

(assert (= (and b!63206 c!8524) b!63221))

(assert (= (and b!63206 (not c!8524)) b!63211))

(assert (= (and b!63221 res!34612) b!63208))

(assert (= (or b!63221 b!63211) bm!4996))

(assert (= (and b!63206 res!34606) b!63217))

(assert (= (and b!63217 c!8520) b!63225))

(assert (= (and b!63217 (not c!8520)) b!63220))

(assert (= (and b!63225 res!34604) b!63207))

(assert (= (or b!63225 b!63220) bm!4999))

(declare-fun b_lambda!2815 () Bool)

(assert (=> (not b_lambda!2815) (not b!63222)))

(assert (=> b!63222 t!4844))

(declare-fun b_and!3865 () Bool)

(assert (= b_and!3861 (and (=> t!4844 result!2455) b_and!3865)))

(assert (=> b!63222 t!4846))

(declare-fun b_and!3867 () Bool)

(assert (= b_and!3863 (and (=> t!4846 result!2457) b_and!3867)))

(declare-fun m!57119 () Bool)

(assert (=> bm!5001 m!57119))

(declare-fun m!57121 () Bool)

(assert (=> b!63213 m!57121))

(assert (=> b!63215 m!55803))

(assert (=> b!63215 m!55803))

(assert (=> b!63215 m!55843))

(declare-fun m!57123 () Bool)

(assert (=> bm!4999 m!57123))

(assert (=> b!63219 m!55803))

(assert (=> b!63219 m!55803))

(declare-fun m!57125 () Bool)

(assert (=> b!63219 m!57125))

(declare-fun m!57127 () Bool)

(assert (=> b!63207 m!57127))

(declare-fun m!57129 () Bool)

(assert (=> bm!4998 m!57129))

(assert (=> b!63212 m!55803))

(assert (=> b!63212 m!55803))

(assert (=> b!63212 m!55843))

(declare-fun m!57131 () Bool)

(assert (=> bm!4996 m!57131))

(assert (=> b!63222 m!55803))

(declare-fun m!57133 () Bool)

(assert (=> b!63222 m!57133))

(assert (=> b!63222 m!55857))

(declare-fun m!57135 () Bool)

(assert (=> b!63222 m!57135))

(assert (=> b!63222 m!55803))

(assert (=> b!63222 m!57135))

(assert (=> b!63222 m!55857))

(declare-fun m!57137 () Bool)

(assert (=> b!63222 m!57137))

(declare-fun m!57139 () Bool)

(assert (=> b!63208 m!57139))

(declare-fun m!57141 () Bool)

(assert (=> b!63224 m!57141))

(assert (=> b!63224 m!57119))

(declare-fun m!57143 () Bool)

(assert (=> b!63224 m!57143))

(assert (=> b!63224 m!57143))

(declare-fun m!57145 () Bool)

(assert (=> b!63224 m!57145))

(declare-fun m!57147 () Bool)

(assert (=> b!63224 m!57147))

(declare-fun m!57149 () Bool)

(assert (=> b!63224 m!57149))

(declare-fun m!57151 () Bool)

(assert (=> b!63224 m!57151))

(declare-fun m!57153 () Bool)

(assert (=> b!63224 m!57153))

(declare-fun m!57155 () Bool)

(assert (=> b!63224 m!57155))

(declare-fun m!57157 () Bool)

(assert (=> b!63224 m!57157))

(assert (=> b!63224 m!55803))

(declare-fun m!57159 () Bool)

(assert (=> b!63224 m!57159))

(declare-fun m!57161 () Bool)

(assert (=> b!63224 m!57161))

(declare-fun m!57163 () Bool)

(assert (=> b!63224 m!57163))

(assert (=> b!63224 m!57161))

(declare-fun m!57165 () Bool)

(assert (=> b!63224 m!57165))

(assert (=> b!63224 m!57149))

(declare-fun m!57167 () Bool)

(assert (=> b!63224 m!57167))

(assert (=> b!63224 m!57155))

(declare-fun m!57169 () Bool)

(assert (=> b!63224 m!57169))

(assert (=> d!12993 m!55783))

(assert (=> b!62600 d!12993))

(assert (=> b!62559 d!12859))

(declare-fun b!63227 () Bool)

(declare-fun e!41457 () Bool)

(assert (=> b!63227 (= e!41457 (contains!691 (ite c!8352 (Cons!1442 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!8282 (Cons!1442 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) Nil!1443) Nil!1443)) (ite c!8282 (Cons!1442 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) Nil!1443) Nil!1443)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun b!63229 () Bool)

(declare-fun e!41460 () Bool)

(declare-fun e!41458 () Bool)

(assert (=> b!63229 (= e!41460 e!41458)))

(declare-fun res!34615 () Bool)

(assert (=> b!63229 (=> (not res!34615) (not e!41458))))

(assert (=> b!63229 (= res!34615 (not e!41457))))

(declare-fun res!34613 () Bool)

(assert (=> b!63229 (=> (not res!34613) (not e!41457))))

(assert (=> b!63229 (= res!34613 (validKeyInArray!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun bm!5002 () Bool)

(declare-fun c!8525 () Bool)

(declare-fun call!5005 () Bool)

(assert (=> bm!5002 (= call!5005 (arrayNoDuplicates!0 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!8525 (Cons!1442 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (ite c!8352 (Cons!1442 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!8282 (Cons!1442 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) Nil!1443) Nil!1443)) (ite c!8282 (Cons!1442 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) Nil!1443) Nil!1443))) (ite c!8352 (Cons!1442 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!8282 (Cons!1442 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) Nil!1443) Nil!1443)) (ite c!8282 (Cons!1442 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) Nil!1443) Nil!1443)))))))

(declare-fun b!63230 () Bool)

(declare-fun e!41459 () Bool)

(assert (=> b!63230 (= e!41459 call!5005)))

(declare-fun b!63231 () Bool)

(assert (=> b!63231 (= e!41459 call!5005)))

(declare-fun b!63228 () Bool)

(assert (=> b!63228 (= e!41458 e!41459)))

(assert (=> b!63228 (= c!8525 (validKeyInArray!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun d!12995 () Bool)

(declare-fun res!34614 () Bool)

(assert (=> d!12995 (=> res!34614 e!41460)))

(assert (=> d!12995 (= res!34614 (bvsge (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992))))))))

(assert (=> d!12995 (= (arrayNoDuplicates!0 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!8352 (Cons!1442 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!8282 (Cons!1442 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) Nil!1443) Nil!1443)) (ite c!8282 (Cons!1442 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) Nil!1443) Nil!1443))) e!41460)))

(assert (= (and d!12995 (not res!34614)) b!63229))

(assert (= (and b!63229 res!34613) b!63227))

(assert (= (and b!63229 res!34615) b!63228))

(assert (= (and b!63228 c!8525) b!63230))

(assert (= (and b!63228 (not c!8525)) b!63231))

(assert (= (or b!63230 b!63231) bm!5002))

(declare-fun m!57171 () Bool)

(assert (=> b!63227 m!57171))

(assert (=> b!63227 m!57171))

(declare-fun m!57173 () Bool)

(assert (=> b!63227 m!57173))

(assert (=> b!63229 m!57171))

(assert (=> b!63229 m!57171))

(declare-fun m!57175 () Bool)

(assert (=> b!63229 m!57175))

(assert (=> bm!5002 m!57171))

(declare-fun m!57177 () Bool)

(assert (=> bm!5002 m!57177))

(assert (=> b!63228 m!57171))

(assert (=> b!63228 m!57171))

(assert (=> b!63228 m!57175))

(assert (=> bm!4926 d!12995))

(declare-fun d!12997 () Bool)

(assert (=> d!12997 (= (size!2025 newMap!16) (bvadd (_size!366 newMap!16) (bvsdiv (bvadd (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010)))))

(assert (=> b!62673 d!12997))

(declare-fun d!12999 () Bool)

(assert (=> d!12999 (= (+!83 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!393 (_keys!3718 newMap!16) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (index!3054 lt!25902) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16))) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(assert (=> d!12999 true))

(declare-fun _$5!68 () Unit!1685)

(assert (=> d!12999 (= (choose!343 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (index!3054 lt!25902) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2087 newMap!16)) _$5!68)))

(declare-fun bs!2753 () Bool)

(assert (= bs!2753 d!12999))

(assert (=> bs!2753 m!55647))

(assert (=> bs!2753 m!55647))

(assert (=> bs!2753 m!56043))

(assert (=> bs!2753 m!55635))

(assert (=> bs!2753 m!56045))

(assert (=> d!12649 d!12999))

(assert (=> d!12649 d!12755))

(assert (=> b!62512 d!12859))

(assert (=> b!62620 d!12751))

(assert (=> b!62620 d!12753))

(declare-fun d!13001 () Bool)

(declare-fun lt!26549 () SeekEntryResult!232)

(assert (=> d!13001 (and (or ((_ is Undefined!232) lt!26549) (not ((_ is Found!232) lt!26549)) (and (bvsge (index!3054 lt!26549) #b00000000000000000000000000000000) (bvslt (index!3054 lt!26549) (size!2019 (_keys!3718 newMap!16))))) (or ((_ is Undefined!232) lt!26549) ((_ is Found!232) lt!26549) (not ((_ is MissingVacant!232) lt!26549)) (not (= (index!3056 lt!26549) (index!3055 lt!26189))) (and (bvsge (index!3056 lt!26549) #b00000000000000000000000000000000) (bvslt (index!3056 lt!26549) (size!2019 (_keys!3718 newMap!16))))) (or ((_ is Undefined!232) lt!26549) (ite ((_ is Found!232) lt!26549) (= (select (arr!1786 (_keys!3718 newMap!16)) (index!3054 lt!26549)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (and ((_ is MissingVacant!232) lt!26549) (= (index!3056 lt!26549) (index!3055 lt!26189)) (= (select (arr!1786 (_keys!3718 newMap!16)) (index!3056 lt!26549)) #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!41468 () SeekEntryResult!232)

(assert (=> d!13001 (= lt!26549 e!41468)))

(declare-fun c!8532 () Bool)

(assert (=> d!13001 (= c!8532 (bvsge (x!10309 lt!26189) #b01111111111111111111111111111110))))

(declare-fun lt!26550 () (_ BitVec 64))

(assert (=> d!13001 (= lt!26550 (select (arr!1786 (_keys!3718 newMap!16)) (index!3055 lt!26189)))))

(assert (=> d!13001 (validMask!0 (mask!5992 newMap!16))))

(assert (=> d!13001 (= (seekKeyOrZeroReturnVacant!0 (x!10309 lt!26189) (index!3055 lt!26189) (index!3055 lt!26189) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (_keys!3718 newMap!16) (mask!5992 newMap!16)) lt!26549)))

(declare-fun b!63244 () Bool)

(declare-fun e!41469 () SeekEntryResult!232)

(assert (=> b!63244 (= e!41469 (seekKeyOrZeroReturnVacant!0 (bvadd (x!10309 lt!26189) #b00000000000000000000000000000001) (nextIndex!0 (index!3055 lt!26189) (x!10309 lt!26189) (mask!5992 newMap!16)) (index!3055 lt!26189) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (_keys!3718 newMap!16) (mask!5992 newMap!16)))))

(declare-fun b!63245 () Bool)

(declare-fun e!41467 () SeekEntryResult!232)

(assert (=> b!63245 (= e!41467 (Found!232 (index!3055 lt!26189)))))

(declare-fun b!63246 () Bool)

(assert (=> b!63246 (= e!41469 (MissingVacant!232 (index!3055 lt!26189)))))

(declare-fun b!63247 () Bool)

(declare-fun c!8534 () Bool)

(assert (=> b!63247 (= c!8534 (= lt!26550 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63247 (= e!41467 e!41469)))

(declare-fun b!63248 () Bool)

(assert (=> b!63248 (= e!41468 Undefined!232)))

(declare-fun b!63249 () Bool)

(assert (=> b!63249 (= e!41468 e!41467)))

(declare-fun c!8533 () Bool)

(assert (=> b!63249 (= c!8533 (= lt!26550 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(assert (= (and d!13001 c!8532) b!63248))

(assert (= (and d!13001 (not c!8532)) b!63249))

(assert (= (and b!63249 c!8533) b!63245))

(assert (= (and b!63249 (not c!8533)) b!63247))

(assert (= (and b!63247 c!8534) b!63246))

(assert (= (and b!63247 (not c!8534)) b!63244))

(declare-fun m!57179 () Bool)

(assert (=> d!13001 m!57179))

(declare-fun m!57181 () Bool)

(assert (=> d!13001 m!57181))

(assert (=> d!13001 m!56221))

(assert (=> d!13001 m!55783))

(declare-fun m!57183 () Bool)

(assert (=> b!63244 m!57183))

(assert (=> b!63244 m!57183))

(assert (=> b!63244 m!55481))

(declare-fun m!57185 () Bool)

(assert (=> b!63244 m!57185))

(assert (=> b!62658 d!13001))

(assert (=> bm!4903 d!12591))

(declare-fun d!13003 () Bool)

(assert (=> d!13003 (= (apply!68 lt!26039 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1092 (getValueByKey!124 (toList!697 lt!26039) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2754 () Bool)

(assert (= bs!2754 d!13003))

(assert (=> bs!2754 m!56351))

(assert (=> bs!2754 m!56351))

(declare-fun m!57187 () Bool)

(assert (=> bs!2754 m!57187))

(assert (=> b!62504 d!13003))

(declare-fun d!13005 () Bool)

(assert (=> d!13005 (= (apply!68 lt!26081 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)) (get!1092 (getValueByKey!124 (toList!697 lt!26081) (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2755 () Bool)

(assert (= bs!2755 d!13005))

(assert (=> bs!2755 m!55803))

(declare-fun m!57189 () Bool)

(assert (=> bs!2755 m!57189))

(assert (=> bs!2755 m!57189))

(declare-fun m!57191 () Bool)

(assert (=> bs!2755 m!57191))

(assert (=> b!62552 d!13005))

(declare-fun d!13007 () Bool)

(declare-fun c!8535 () Bool)

(assert (=> d!13007 (= c!8535 ((_ is ValueCellFull!863) (select (arr!1787 (_values!2070 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!41470 () V!2865)

(assert (=> d!13007 (= (get!1089 (select (arr!1787 (_values!2070 newMap!16)) #b00000000000000000000000000000000) (dynLambda!312 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!41470)))

(declare-fun b!63250 () Bool)

(assert (=> b!63250 (= e!41470 (get!1090 (select (arr!1787 (_values!2070 newMap!16)) #b00000000000000000000000000000000) (dynLambda!312 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!63251 () Bool)

(assert (=> b!63251 (= e!41470 (get!1091 (select (arr!1787 (_values!2070 newMap!16)) #b00000000000000000000000000000000) (dynLambda!312 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!13007 c!8535) b!63250))

(assert (= (and d!13007 (not c!8535)) b!63251))

(assert (=> b!63250 m!55941))

(assert (=> b!63250 m!55857))

(declare-fun m!57193 () Bool)

(assert (=> b!63250 m!57193))

(assert (=> b!63251 m!55941))

(assert (=> b!63251 m!55857))

(declare-fun m!57195 () Bool)

(assert (=> b!63251 m!57195))

(assert (=> b!62552 d!13007))

(assert (=> bm!4914 d!12787))

(declare-fun d!13009 () Bool)

(assert (=> d!13009 (= (apply!68 lt!26081 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1092 (getValueByKey!124 (toList!697 lt!26081) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2756 () Bool)

(assert (= bs!2756 d!13009))

(declare-fun m!57197 () Bool)

(assert (=> bs!2756 m!57197))

(assert (=> bs!2756 m!57197))

(declare-fun m!57199 () Bool)

(assert (=> bs!2756 m!57199))

(assert (=> b!62538 d!13009))

(declare-fun d!13011 () Bool)

(declare-fun e!41471 () Bool)

(assert (=> d!13011 e!41471))

(declare-fun res!34616 () Bool)

(assert (=> d!13011 (=> res!34616 e!41471)))

(declare-fun lt!26554 () Bool)

(assert (=> d!13011 (= res!34616 (not lt!26554))))

(declare-fun lt!26552 () Bool)

(assert (=> d!13011 (= lt!26554 lt!26552)))

(declare-fun lt!26553 () Unit!1685)

(declare-fun e!41472 () Unit!1685)

(assert (=> d!13011 (= lt!26553 e!41472)))

(declare-fun c!8536 () Bool)

(assert (=> d!13011 (= c!8536 lt!26552)))

(assert (=> d!13011 (= lt!26552 (containsKey!128 (toList!697 (map!1113 (_2!1036 lt!26297))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(assert (=> d!13011 (= (contains!690 (map!1113 (_2!1036 lt!26297)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) lt!26554)))

(declare-fun b!63252 () Bool)

(declare-fun lt!26551 () Unit!1685)

(assert (=> b!63252 (= e!41472 lt!26551)))

(assert (=> b!63252 (= lt!26551 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 (map!1113 (_2!1036 lt!26297))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(assert (=> b!63252 (isDefined!78 (getValueByKey!124 (toList!697 (map!1113 (_2!1036 lt!26297))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(declare-fun b!63253 () Bool)

(declare-fun Unit!1729 () Unit!1685)

(assert (=> b!63253 (= e!41472 Unit!1729)))

(declare-fun b!63254 () Bool)

(assert (=> b!63254 (= e!41471 (isDefined!78 (getValueByKey!124 (toList!697 (map!1113 (_2!1036 lt!26297))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355))))))

(assert (= (and d!13011 c!8536) b!63252))

(assert (= (and d!13011 (not c!8536)) b!63253))

(assert (= (and d!13011 (not res!34616)) b!63254))

(assert (=> d!13011 m!55481))

(declare-fun m!57201 () Bool)

(assert (=> d!13011 m!57201))

(assert (=> b!63252 m!55481))

(declare-fun m!57203 () Bool)

(assert (=> b!63252 m!57203))

(assert (=> b!63252 m!55481))

(declare-fun m!57205 () Bool)

(assert (=> b!63252 m!57205))

(assert (=> b!63252 m!57205))

(declare-fun m!57207 () Bool)

(assert (=> b!63252 m!57207))

(assert (=> b!63254 m!55481))

(assert (=> b!63254 m!57205))

(assert (=> b!63254 m!57205))

(assert (=> b!63254 m!57207))

(assert (=> b!62743 d!13011))

(declare-fun d!13013 () Bool)

(assert (=> d!13013 (= (map!1113 (_2!1036 lt!26297)) (getCurrentListMap!393 (_keys!3718 (_2!1036 lt!26297)) (_values!2070 (_2!1036 lt!26297)) (mask!5992 (_2!1036 lt!26297)) (extraKeys!1966 (_2!1036 lt!26297)) (zeroValue!1999 (_2!1036 lt!26297)) (minValue!1999 (_2!1036 lt!26297)) #b00000000000000000000000000000000 (defaultEntry!2087 (_2!1036 lt!26297))))))

(declare-fun bs!2757 () Bool)

(assert (= bs!2757 d!13013))

(declare-fun m!57209 () Bool)

(assert (=> bs!2757 m!57209))

(assert (=> b!62743 d!13013))

(declare-fun d!13015 () Bool)

(declare-fun e!41473 () Bool)

(assert (=> d!13015 e!41473))

(declare-fun res!34617 () Bool)

(assert (=> d!13015 (=> res!34617 e!41473)))

(declare-fun lt!26558 () Bool)

(assert (=> d!13015 (= res!34617 (not lt!26558))))

(declare-fun lt!26556 () Bool)

(assert (=> d!13015 (= lt!26558 lt!26556)))

(declare-fun lt!26557 () Unit!1685)

(declare-fun e!41474 () Unit!1685)

(assert (=> d!13015 (= lt!26557 e!41474)))

(declare-fun c!8537 () Bool)

(assert (=> d!13015 (= c!8537 lt!26556)))

(assert (=> d!13015 (= lt!26556 (containsKey!128 (toList!697 lt!26029) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!13015 (= (contains!690 lt!26029 #b1000000000000000000000000000000000000000000000000000000000000000) lt!26558)))

(declare-fun b!63255 () Bool)

(declare-fun lt!26555 () Unit!1685)

(assert (=> b!63255 (= e!41474 lt!26555)))

(assert (=> b!63255 (= lt!26555 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 lt!26029) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63255 (isDefined!78 (getValueByKey!124 (toList!697 lt!26029) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63256 () Bool)

(declare-fun Unit!1730 () Unit!1685)

(assert (=> b!63256 (= e!41474 Unit!1730)))

(declare-fun b!63257 () Bool)

(assert (=> b!63257 (= e!41473 (isDefined!78 (getValueByKey!124 (toList!697 lt!26029) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!13015 c!8537) b!63255))

(assert (= (and d!13015 (not c!8537)) b!63256))

(assert (= (and d!13015 (not res!34617)) b!63257))

(declare-fun m!57211 () Bool)

(assert (=> d!13015 m!57211))

(declare-fun m!57213 () Bool)

(assert (=> b!63255 m!57213))

(declare-fun m!57215 () Bool)

(assert (=> b!63255 m!57215))

(assert (=> b!63255 m!57215))

(declare-fun m!57217 () Bool)

(assert (=> b!63255 m!57217))

(assert (=> b!63257 m!57215))

(assert (=> b!63257 m!57215))

(assert (=> b!63257 m!57217))

(assert (=> b!62472 d!13015))

(declare-fun d!13017 () Bool)

(declare-fun e!41475 () Bool)

(assert (=> d!13017 e!41475))

(declare-fun res!34618 () Bool)

(assert (=> d!13017 (=> res!34618 e!41475)))

(declare-fun lt!26562 () Bool)

(assert (=> d!13017 (= res!34618 (not lt!26562))))

(declare-fun lt!26560 () Bool)

(assert (=> d!13017 (= lt!26562 lt!26560)))

(declare-fun lt!26561 () Unit!1685)

(declare-fun e!41476 () Unit!1685)

(assert (=> d!13017 (= lt!26561 e!41476)))

(declare-fun c!8538 () Bool)

(assert (=> d!13017 (= c!8538 lt!26560)))

(assert (=> d!13017 (= lt!26560 (containsKey!128 (toList!697 lt!26039) (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!13017 (= (contains!690 lt!26039 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)) lt!26562)))

(declare-fun b!63258 () Bool)

(declare-fun lt!26559 () Unit!1685)

(assert (=> b!63258 (= e!41476 lt!26559)))

(assert (=> b!63258 (= lt!26559 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 lt!26039) (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63258 (isDefined!78 (getValueByKey!124 (toList!697 lt!26039) (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63259 () Bool)

(declare-fun Unit!1731 () Unit!1685)

(assert (=> b!63259 (= e!41476 Unit!1731)))

(declare-fun b!63260 () Bool)

(assert (=> b!63260 (= e!41475 (isDefined!78 (getValueByKey!124 (toList!697 lt!26039) (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!13017 c!8538) b!63258))

(assert (= (and d!13017 (not c!8538)) b!63259))

(assert (= (and d!13017 (not res!34618)) b!63260))

(assert (=> d!13017 m!55803))

(declare-fun m!57219 () Bool)

(assert (=> d!13017 m!57219))

(assert (=> b!63258 m!55803))

(declare-fun m!57221 () Bool)

(assert (=> b!63258 m!57221))

(assert (=> b!63258 m!55803))

(declare-fun m!57223 () Bool)

(assert (=> b!63258 m!57223))

(assert (=> b!63258 m!57223))

(declare-fun m!57225 () Bool)

(assert (=> b!63258 m!57225))

(assert (=> b!63260 m!55803))

(assert (=> b!63260 m!57223))

(assert (=> b!63260 m!57223))

(assert (=> b!63260 m!57225))

(assert (=> b!62516 d!13017))

(assert (=> b!62416 d!12709))

(assert (=> b!62416 d!12711))

(declare-fun b!63261 () Bool)

(declare-fun res!34621 () Bool)

(declare-fun e!41478 () Bool)

(assert (=> b!63261 (=> (not res!34621) (not e!41478))))

(declare-fun e!41489 () Bool)

(assert (=> b!63261 (= res!34621 e!41489)))

(declare-fun c!8544 () Bool)

(assert (=> b!63261 (= c!8544 (not (= (bvand (extraKeys!1966 (_2!1036 lt!25898)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!63262 () Bool)

(declare-fun e!41483 () Bool)

(declare-fun lt!26568 () ListLongMap!1363)

(assert (=> b!63262 (= e!41483 (= (apply!68 lt!26568 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1999 (_2!1036 lt!25898))))))

(declare-fun b!63263 () Bool)

(declare-fun e!41487 () Bool)

(assert (=> b!63263 (= e!41487 (= (apply!68 lt!26568 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1999 (_2!1036 lt!25898))))))

(declare-fun d!13019 () Bool)

(assert (=> d!13019 e!41478))

(declare-fun res!34620 () Bool)

(assert (=> d!13019 (=> (not res!34620) (not e!41478))))

(assert (=> d!13019 (= res!34620 (or (bvsge #b00000000000000000000000000000000 (size!2019 (_keys!3718 (_2!1036 lt!25898)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 (_2!1036 lt!25898)))))))))

(declare-fun lt!26570 () ListLongMap!1363)

(assert (=> d!13019 (= lt!26568 lt!26570)))

(declare-fun lt!26576 () Unit!1685)

(declare-fun e!41485 () Unit!1685)

(assert (=> d!13019 (= lt!26576 e!41485)))

(declare-fun c!8541 () Bool)

(declare-fun e!41477 () Bool)

(assert (=> d!13019 (= c!8541 e!41477)))

(declare-fun res!34626 () Bool)

(assert (=> d!13019 (=> (not res!34626) (not e!41477))))

(assert (=> d!13019 (= res!34626 (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 (_2!1036 lt!25898)))))))

(declare-fun e!41486 () ListLongMap!1363)

(assert (=> d!13019 (= lt!26570 e!41486)))

(declare-fun c!8542 () Bool)

(assert (=> d!13019 (= c!8542 (and (not (= (bvand (extraKeys!1966 (_2!1036 lt!25898)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1966 (_2!1036 lt!25898)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!13019 (validMask!0 (mask!5992 (_2!1036 lt!25898)))))

(assert (=> d!13019 (= (getCurrentListMap!393 (_keys!3718 (_2!1036 lt!25898)) (_values!2070 (_2!1036 lt!25898)) (mask!5992 (_2!1036 lt!25898)) (extraKeys!1966 (_2!1036 lt!25898)) (zeroValue!1999 (_2!1036 lt!25898)) (minValue!1999 (_2!1036 lt!25898)) #b00000000000000000000000000000000 (defaultEntry!2087 (_2!1036 lt!25898))) lt!26568)))

(declare-fun b!63264 () Bool)

(declare-fun res!34625 () Bool)

(assert (=> b!63264 (=> (not res!34625) (not e!41478))))

(declare-fun e!41484 () Bool)

(assert (=> b!63264 (= res!34625 e!41484)))

(declare-fun res!34622 () Bool)

(assert (=> b!63264 (=> res!34622 e!41484)))

(declare-fun e!41482 () Bool)

(assert (=> b!63264 (= res!34622 (not e!41482))))

(declare-fun res!34623 () Bool)

(assert (=> b!63264 (=> (not res!34623) (not e!41482))))

(assert (=> b!63264 (= res!34623 (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 (_2!1036 lt!25898)))))))

(declare-fun bm!5003 () Bool)

(declare-fun call!5009 () ListLongMap!1363)

(declare-fun call!5010 () ListLongMap!1363)

(assert (=> bm!5003 (= call!5009 call!5010)))

(declare-fun b!63265 () Bool)

(declare-fun e!41481 () ListLongMap!1363)

(declare-fun call!5011 () ListLongMap!1363)

(assert (=> b!63265 (= e!41481 call!5011)))

(declare-fun bm!5004 () Bool)

(declare-fun call!5008 () Bool)

(assert (=> bm!5004 (= call!5008 (contains!690 lt!26568 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63266 () Bool)

(assert (=> b!63266 (= e!41489 (not call!5008))))

(declare-fun bm!5005 () Bool)

(declare-fun call!5012 () ListLongMap!1363)

(declare-fun call!5007 () ListLongMap!1363)

(assert (=> bm!5005 (= call!5012 call!5007)))

(declare-fun bm!5006 () Bool)

(declare-fun c!8543 () Bool)

(assert (=> bm!5006 (= call!5007 (+!83 (ite c!8542 call!5010 (ite c!8543 call!5009 call!5011)) (ite (or c!8542 c!8543) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (_2!1036 lt!25898))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (_2!1036 lt!25898))))))))

(declare-fun b!63267 () Bool)

(assert (=> b!63267 (= e!41477 (validKeyInArray!0 (select (arr!1786 (_keys!3718 (_2!1036 lt!25898))) #b00000000000000000000000000000000)))))

(declare-fun b!63268 () Bool)

(assert (=> b!63268 (= e!41486 (+!83 call!5007 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (_2!1036 lt!25898)))))))

(declare-fun bm!5007 () Bool)

(declare-fun call!5006 () Bool)

(assert (=> bm!5007 (= call!5006 (contains!690 lt!26568 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63269 () Bool)

(declare-fun Unit!1732 () Unit!1685)

(assert (=> b!63269 (= e!41485 Unit!1732)))

(declare-fun b!63270 () Bool)

(assert (=> b!63270 (= e!41482 (validKeyInArray!0 (select (arr!1786 (_keys!3718 (_2!1036 lt!25898))) #b00000000000000000000000000000000)))))

(declare-fun b!63271 () Bool)

(declare-fun c!8539 () Bool)

(assert (=> b!63271 (= c!8539 (and (not (= (bvand (extraKeys!1966 (_2!1036 lt!25898)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1966 (_2!1036 lt!25898)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!41488 () ListLongMap!1363)

(assert (=> b!63271 (= e!41488 e!41481)))

(declare-fun b!63272 () Bool)

(declare-fun e!41479 () Bool)

(assert (=> b!63272 (= e!41478 e!41479)))

(declare-fun c!8540 () Bool)

(assert (=> b!63272 (= c!8540 (not (= (bvand (extraKeys!1966 (_2!1036 lt!25898)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!63273 () Bool)

(assert (=> b!63273 (= e!41486 e!41488)))

(assert (=> b!63273 (= c!8543 (and (not (= (bvand (extraKeys!1966 (_2!1036 lt!25898)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1966 (_2!1036 lt!25898)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!63274 () Bool)

(declare-fun e!41480 () Bool)

(assert (=> b!63274 (= e!41484 e!41480)))

(declare-fun res!34624 () Bool)

(assert (=> b!63274 (=> (not res!34624) (not e!41480))))

(assert (=> b!63274 (= res!34624 (contains!690 lt!26568 (select (arr!1786 (_keys!3718 (_2!1036 lt!25898))) #b00000000000000000000000000000000)))))

(assert (=> b!63274 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 (_2!1036 lt!25898)))))))

(declare-fun b!63275 () Bool)

(assert (=> b!63275 (= e!41479 (not call!5006))))

(declare-fun bm!5008 () Bool)

(assert (=> bm!5008 (= call!5011 call!5009)))

(declare-fun b!63276 () Bool)

(assert (=> b!63276 (= e!41489 e!41487)))

(declare-fun res!34627 () Bool)

(assert (=> b!63276 (= res!34627 call!5008)))

(assert (=> b!63276 (=> (not res!34627) (not e!41487))))

(declare-fun bm!5009 () Bool)

(assert (=> bm!5009 (= call!5010 (getCurrentListMapNoExtraKeys!46 (_keys!3718 (_2!1036 lt!25898)) (_values!2070 (_2!1036 lt!25898)) (mask!5992 (_2!1036 lt!25898)) (extraKeys!1966 (_2!1036 lt!25898)) (zeroValue!1999 (_2!1036 lt!25898)) (minValue!1999 (_2!1036 lt!25898)) #b00000000000000000000000000000000 (defaultEntry!2087 (_2!1036 lt!25898))))))

(declare-fun b!63277 () Bool)

(assert (=> b!63277 (= e!41480 (= (apply!68 lt!26568 (select (arr!1786 (_keys!3718 (_2!1036 lt!25898))) #b00000000000000000000000000000000)) (get!1089 (select (arr!1787 (_values!2070 (_2!1036 lt!25898))) #b00000000000000000000000000000000) (dynLambda!312 (defaultEntry!2087 (_2!1036 lt!25898)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!63277 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2020 (_values!2070 (_2!1036 lt!25898)))))))

(assert (=> b!63277 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 (_2!1036 lt!25898)))))))

(declare-fun b!63278 () Bool)

(assert (=> b!63278 (= e!41481 call!5012)))

(declare-fun b!63279 () Bool)

(declare-fun lt!26582 () Unit!1685)

(assert (=> b!63279 (= e!41485 lt!26582)))

(declare-fun lt!26567 () ListLongMap!1363)

(assert (=> b!63279 (= lt!26567 (getCurrentListMapNoExtraKeys!46 (_keys!3718 (_2!1036 lt!25898)) (_values!2070 (_2!1036 lt!25898)) (mask!5992 (_2!1036 lt!25898)) (extraKeys!1966 (_2!1036 lt!25898)) (zeroValue!1999 (_2!1036 lt!25898)) (minValue!1999 (_2!1036 lt!25898)) #b00000000000000000000000000000000 (defaultEntry!2087 (_2!1036 lt!25898))))))

(declare-fun lt!26573 () (_ BitVec 64))

(assert (=> b!63279 (= lt!26573 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26580 () (_ BitVec 64))

(assert (=> b!63279 (= lt!26580 (select (arr!1786 (_keys!3718 (_2!1036 lt!25898))) #b00000000000000000000000000000000))))

(declare-fun lt!26574 () Unit!1685)

(assert (=> b!63279 (= lt!26574 (addStillContains!44 lt!26567 lt!26573 (zeroValue!1999 (_2!1036 lt!25898)) lt!26580))))

(assert (=> b!63279 (contains!690 (+!83 lt!26567 (tuple2!2053 lt!26573 (zeroValue!1999 (_2!1036 lt!25898)))) lt!26580)))

(declare-fun lt!26566 () Unit!1685)

(assert (=> b!63279 (= lt!26566 lt!26574)))

(declare-fun lt!26564 () ListLongMap!1363)

(assert (=> b!63279 (= lt!26564 (getCurrentListMapNoExtraKeys!46 (_keys!3718 (_2!1036 lt!25898)) (_values!2070 (_2!1036 lt!25898)) (mask!5992 (_2!1036 lt!25898)) (extraKeys!1966 (_2!1036 lt!25898)) (zeroValue!1999 (_2!1036 lt!25898)) (minValue!1999 (_2!1036 lt!25898)) #b00000000000000000000000000000000 (defaultEntry!2087 (_2!1036 lt!25898))))))

(declare-fun lt!26575 () (_ BitVec 64))

(assert (=> b!63279 (= lt!26575 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26579 () (_ BitVec 64))

(assert (=> b!63279 (= lt!26579 (select (arr!1786 (_keys!3718 (_2!1036 lt!25898))) #b00000000000000000000000000000000))))

(declare-fun lt!26571 () Unit!1685)

(assert (=> b!63279 (= lt!26571 (addApplyDifferent!44 lt!26564 lt!26575 (minValue!1999 (_2!1036 lt!25898)) lt!26579))))

(assert (=> b!63279 (= (apply!68 (+!83 lt!26564 (tuple2!2053 lt!26575 (minValue!1999 (_2!1036 lt!25898)))) lt!26579) (apply!68 lt!26564 lt!26579))))

(declare-fun lt!26563 () Unit!1685)

(assert (=> b!63279 (= lt!26563 lt!26571)))

(declare-fun lt!26572 () ListLongMap!1363)

(assert (=> b!63279 (= lt!26572 (getCurrentListMapNoExtraKeys!46 (_keys!3718 (_2!1036 lt!25898)) (_values!2070 (_2!1036 lt!25898)) (mask!5992 (_2!1036 lt!25898)) (extraKeys!1966 (_2!1036 lt!25898)) (zeroValue!1999 (_2!1036 lt!25898)) (minValue!1999 (_2!1036 lt!25898)) #b00000000000000000000000000000000 (defaultEntry!2087 (_2!1036 lt!25898))))))

(declare-fun lt!26577 () (_ BitVec 64))

(assert (=> b!63279 (= lt!26577 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26565 () (_ BitVec 64))

(assert (=> b!63279 (= lt!26565 (select (arr!1786 (_keys!3718 (_2!1036 lt!25898))) #b00000000000000000000000000000000))))

(declare-fun lt!26584 () Unit!1685)

(assert (=> b!63279 (= lt!26584 (addApplyDifferent!44 lt!26572 lt!26577 (zeroValue!1999 (_2!1036 lt!25898)) lt!26565))))

(assert (=> b!63279 (= (apply!68 (+!83 lt!26572 (tuple2!2053 lt!26577 (zeroValue!1999 (_2!1036 lt!25898)))) lt!26565) (apply!68 lt!26572 lt!26565))))

(declare-fun lt!26578 () Unit!1685)

(assert (=> b!63279 (= lt!26578 lt!26584)))

(declare-fun lt!26569 () ListLongMap!1363)

(assert (=> b!63279 (= lt!26569 (getCurrentListMapNoExtraKeys!46 (_keys!3718 (_2!1036 lt!25898)) (_values!2070 (_2!1036 lt!25898)) (mask!5992 (_2!1036 lt!25898)) (extraKeys!1966 (_2!1036 lt!25898)) (zeroValue!1999 (_2!1036 lt!25898)) (minValue!1999 (_2!1036 lt!25898)) #b00000000000000000000000000000000 (defaultEntry!2087 (_2!1036 lt!25898))))))

(declare-fun lt!26581 () (_ BitVec 64))

(assert (=> b!63279 (= lt!26581 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26583 () (_ BitVec 64))

(assert (=> b!63279 (= lt!26583 (select (arr!1786 (_keys!3718 (_2!1036 lt!25898))) #b00000000000000000000000000000000))))

(assert (=> b!63279 (= lt!26582 (addApplyDifferent!44 lt!26569 lt!26581 (minValue!1999 (_2!1036 lt!25898)) lt!26583))))

(assert (=> b!63279 (= (apply!68 (+!83 lt!26569 (tuple2!2053 lt!26581 (minValue!1999 (_2!1036 lt!25898)))) lt!26583) (apply!68 lt!26569 lt!26583))))

(declare-fun b!63280 () Bool)

(assert (=> b!63280 (= e!41479 e!41483)))

(declare-fun res!34619 () Bool)

(assert (=> b!63280 (= res!34619 call!5006)))

(assert (=> b!63280 (=> (not res!34619) (not e!41483))))

(declare-fun b!63281 () Bool)

(assert (=> b!63281 (= e!41488 call!5012)))

(assert (= (and d!13019 c!8542) b!63268))

(assert (= (and d!13019 (not c!8542)) b!63273))

(assert (= (and b!63273 c!8543) b!63281))

(assert (= (and b!63273 (not c!8543)) b!63271))

(assert (= (and b!63271 c!8539) b!63278))

(assert (= (and b!63271 (not c!8539)) b!63265))

(assert (= (or b!63278 b!63265) bm!5008))

(assert (= (or b!63281 bm!5008) bm!5003))

(assert (= (or b!63281 b!63278) bm!5005))

(assert (= (or b!63268 bm!5003) bm!5009))

(assert (= (or b!63268 bm!5005) bm!5006))

(assert (= (and d!13019 res!34626) b!63267))

(assert (= (and d!13019 c!8541) b!63279))

(assert (= (and d!13019 (not c!8541)) b!63269))

(assert (= (and d!13019 res!34620) b!63264))

(assert (= (and b!63264 res!34623) b!63270))

(assert (= (and b!63264 (not res!34622)) b!63274))

(assert (= (and b!63274 res!34624) b!63277))

(assert (= (and b!63264 res!34625) b!63261))

(assert (= (and b!63261 c!8544) b!63276))

(assert (= (and b!63261 (not c!8544)) b!63266))

(assert (= (and b!63276 res!34627) b!63263))

(assert (= (or b!63276 b!63266) bm!5004))

(assert (= (and b!63261 res!34621) b!63272))

(assert (= (and b!63272 c!8540) b!63280))

(assert (= (and b!63272 (not c!8540)) b!63275))

(assert (= (and b!63280 res!34619) b!63262))

(assert (= (or b!63280 b!63275) bm!5007))

(declare-fun b_lambda!2817 () Bool)

(assert (=> (not b_lambda!2817) (not b!63277)))

(declare-fun tb!1377 () Bool)

(declare-fun t!4848 () Bool)

(assert (=> (and b!62032 (= (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) (defaultEntry!2087 (_2!1036 lt!25898))) t!4848) tb!1377))

(declare-fun result!2459 () Bool)

(assert (=> tb!1377 (= result!2459 tp_is_empty!2413)))

(assert (=> b!63277 t!4848))

(declare-fun b_and!3869 () Bool)

(assert (= b_and!3865 (and (=> t!4848 result!2459) b_and!3869)))

(declare-fun tb!1379 () Bool)

(declare-fun t!4850 () Bool)

(assert (=> (and b!62029 (= (defaultEntry!2087 newMap!16) (defaultEntry!2087 (_2!1036 lt!25898))) t!4850) tb!1379))

(declare-fun result!2461 () Bool)

(assert (= result!2461 result!2459))

(assert (=> b!63277 t!4850))

(declare-fun b_and!3871 () Bool)

(assert (= b_and!3867 (and (=> t!4850 result!2461) b_and!3871)))

(declare-fun m!57227 () Bool)

(assert (=> bm!5009 m!57227))

(declare-fun m!57229 () Bool)

(assert (=> b!63268 m!57229))

(assert (=> b!63270 m!56425))

(assert (=> b!63270 m!56425))

(assert (=> b!63270 m!56427))

(declare-fun m!57231 () Bool)

(assert (=> bm!5007 m!57231))

(assert (=> b!63274 m!56425))

(assert (=> b!63274 m!56425))

(declare-fun m!57233 () Bool)

(assert (=> b!63274 m!57233))

(declare-fun m!57235 () Bool)

(assert (=> b!63262 m!57235))

(declare-fun m!57237 () Bool)

(assert (=> bm!5006 m!57237))

(assert (=> b!63267 m!56425))

(assert (=> b!63267 m!56425))

(assert (=> b!63267 m!56427))

(declare-fun m!57239 () Bool)

(assert (=> bm!5004 m!57239))

(assert (=> b!63277 m!56425))

(declare-fun m!57241 () Bool)

(assert (=> b!63277 m!57241))

(declare-fun m!57243 () Bool)

(assert (=> b!63277 m!57243))

(declare-fun m!57245 () Bool)

(assert (=> b!63277 m!57245))

(assert (=> b!63277 m!56425))

(assert (=> b!63277 m!57245))

(assert (=> b!63277 m!57243))

(declare-fun m!57247 () Bool)

(assert (=> b!63277 m!57247))

(declare-fun m!57249 () Bool)

(assert (=> b!63263 m!57249))

(declare-fun m!57251 () Bool)

(assert (=> b!63279 m!57251))

(assert (=> b!63279 m!57227))

(declare-fun m!57253 () Bool)

(assert (=> b!63279 m!57253))

(assert (=> b!63279 m!57253))

(declare-fun m!57255 () Bool)

(assert (=> b!63279 m!57255))

(declare-fun m!57257 () Bool)

(assert (=> b!63279 m!57257))

(declare-fun m!57259 () Bool)

(assert (=> b!63279 m!57259))

(declare-fun m!57261 () Bool)

(assert (=> b!63279 m!57261))

(declare-fun m!57263 () Bool)

(assert (=> b!63279 m!57263))

(declare-fun m!57265 () Bool)

(assert (=> b!63279 m!57265))

(declare-fun m!57267 () Bool)

(assert (=> b!63279 m!57267))

(assert (=> b!63279 m!56425))

(declare-fun m!57269 () Bool)

(assert (=> b!63279 m!57269))

(declare-fun m!57271 () Bool)

(assert (=> b!63279 m!57271))

(declare-fun m!57273 () Bool)

(assert (=> b!63279 m!57273))

(assert (=> b!63279 m!57271))

(declare-fun m!57275 () Bool)

(assert (=> b!63279 m!57275))

(assert (=> b!63279 m!57259))

(declare-fun m!57277 () Bool)

(assert (=> b!63279 m!57277))

(assert (=> b!63279 m!57265))

(declare-fun m!57279 () Bool)

(assert (=> b!63279 m!57279))

(assert (=> d!13019 m!56359))

(assert (=> d!12615 d!13019))

(declare-fun d!13021 () Bool)

(declare-fun res!34628 () Bool)

(declare-fun e!41490 () Bool)

(assert (=> d!13021 (=> res!34628 e!41490)))

(assert (=> d!13021 (= res!34628 (and ((_ is Cons!1443) (toList!697 lt!25977)) (= (_1!1037 (h!2026 (toList!697 lt!25977))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!13021 (= (containsKey!128 (toList!697 lt!25977) #b0000000000000000000000000000000000000000000000000000000000000000) e!41490)))

(declare-fun b!63282 () Bool)

(declare-fun e!41491 () Bool)

(assert (=> b!63282 (= e!41490 e!41491)))

(declare-fun res!34629 () Bool)

(assert (=> b!63282 (=> (not res!34629) (not e!41491))))

(assert (=> b!63282 (= res!34629 (and (or (not ((_ is Cons!1443) (toList!697 lt!25977))) (bvsle (_1!1037 (h!2026 (toList!697 lt!25977))) #b0000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1443) (toList!697 lt!25977)) (bvslt (_1!1037 (h!2026 (toList!697 lt!25977))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!63283 () Bool)

(assert (=> b!63283 (= e!41491 (containsKey!128 (t!4832 (toList!697 lt!25977)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!13021 (not res!34628)) b!63282))

(assert (= (and b!63282 res!34629) b!63283))

(declare-fun m!57281 () Bool)

(assert (=> b!63283 m!57281))

(assert (=> d!12613 d!13021))

(declare-fun d!13023 () Bool)

(declare-fun e!41492 () Bool)

(assert (=> d!13023 e!41492))

(declare-fun res!34630 () Bool)

(assert (=> d!13023 (=> res!34630 e!41492)))

(declare-fun lt!26588 () Bool)

(assert (=> d!13023 (= res!34630 (not lt!26588))))

(declare-fun lt!26586 () Bool)

(assert (=> d!13023 (= lt!26588 lt!26586)))

(declare-fun lt!26587 () Unit!1685)

(declare-fun e!41493 () Unit!1685)

(assert (=> d!13023 (= lt!26587 e!41493)))

(declare-fun c!8545 () Bool)

(assert (=> d!13023 (= c!8545 lt!26586)))

(assert (=> d!13023 (= lt!26586 (containsKey!128 (toList!697 lt!26029) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!13023 (= (contains!690 lt!26029 #b0000000000000000000000000000000000000000000000000000000000000000) lt!26588)))

(declare-fun b!63284 () Bool)

(declare-fun lt!26585 () Unit!1685)

(assert (=> b!63284 (= e!41493 lt!26585)))

(assert (=> b!63284 (= lt!26585 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 lt!26029) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63284 (isDefined!78 (getValueByKey!124 (toList!697 lt!26029) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63285 () Bool)

(declare-fun Unit!1733 () Unit!1685)

(assert (=> b!63285 (= e!41493 Unit!1733)))

(declare-fun b!63286 () Bool)

(assert (=> b!63286 (= e!41492 (isDefined!78 (getValueByKey!124 (toList!697 lt!26029) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!13023 c!8545) b!63284))

(assert (= (and d!13023 (not c!8545)) b!63285))

(assert (= (and d!13023 (not res!34630)) b!63286))

(declare-fun m!57283 () Bool)

(assert (=> d!13023 m!57283))

(declare-fun m!57285 () Bool)

(assert (=> b!63284 m!57285))

(declare-fun m!57287 () Bool)

(assert (=> b!63284 m!57287))

(assert (=> b!63284 m!57287))

(declare-fun m!57289 () Bool)

(assert (=> b!63284 m!57289))

(assert (=> b!63286 m!57287))

(assert (=> b!63286 m!57287))

(assert (=> b!63286 m!57289))

(assert (=> d!12597 d!13023))

(assert (=> d!12597 d!12577))

(declare-fun d!13025 () Bool)

(declare-fun c!8546 () Bool)

(assert (=> d!13025 (= c!8546 (and ((_ is Cons!1443) (toList!697 lt!26138)) (= (_1!1037 (h!2026 (toList!697 lt!26138))) (_1!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(declare-fun e!41494 () Option!130)

(assert (=> d!13025 (= (getValueByKey!124 (toList!697 lt!26138) (_1!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) e!41494)))

(declare-fun b!63287 () Bool)

(assert (=> b!63287 (= e!41494 (Some!129 (_2!1037 (h!2026 (toList!697 lt!26138)))))))

(declare-fun b!63290 () Bool)

(declare-fun e!41495 () Option!130)

(assert (=> b!63290 (= e!41495 None!128)))

(declare-fun b!63288 () Bool)

(assert (=> b!63288 (= e!41494 e!41495)))

(declare-fun c!8547 () Bool)

(assert (=> b!63288 (= c!8547 (and ((_ is Cons!1443) (toList!697 lt!26138)) (not (= (_1!1037 (h!2026 (toList!697 lt!26138))) (_1!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))))

(declare-fun b!63289 () Bool)

(assert (=> b!63289 (= e!41495 (getValueByKey!124 (t!4832 (toList!697 lt!26138)) (_1!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(assert (= (and d!13025 c!8546) b!63287))

(assert (= (and d!13025 (not c!8546)) b!63288))

(assert (= (and b!63288 c!8547) b!63289))

(assert (= (and b!63288 (not c!8547)) b!63290))

(declare-fun m!57291 () Bool)

(assert (=> b!63289 m!57291))

(assert (=> b!62606 d!13025))

(declare-fun d!13027 () Bool)

(declare-fun res!34631 () Bool)

(declare-fun e!41496 () Bool)

(assert (=> d!13027 (=> res!34631 e!41496)))

(assert (=> d!13027 (= res!34631 (and ((_ is Cons!1443) (t!4832 (toList!697 lt!25781))) (= (_1!1037 (h!2026 (t!4832 (toList!697 lt!25781)))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355))))))

(assert (=> d!13027 (= (containsKey!128 (t!4832 (toList!697 lt!25781)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) e!41496)))

(declare-fun b!63291 () Bool)

(declare-fun e!41497 () Bool)

(assert (=> b!63291 (= e!41496 e!41497)))

(declare-fun res!34632 () Bool)

(assert (=> b!63291 (=> (not res!34632) (not e!41497))))

(assert (=> b!63291 (= res!34632 (and (or (not ((_ is Cons!1443) (t!4832 (toList!697 lt!25781)))) (bvsle (_1!1037 (h!2026 (t!4832 (toList!697 lt!25781)))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355))) ((_ is Cons!1443) (t!4832 (toList!697 lt!25781))) (bvslt (_1!1037 (h!2026 (t!4832 (toList!697 lt!25781)))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355))))))

(declare-fun b!63292 () Bool)

(assert (=> b!63292 (= e!41497 (containsKey!128 (t!4832 (t!4832 (toList!697 lt!25781))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(assert (= (and d!13027 (not res!34631)) b!63291))

(assert (= (and b!63291 res!34632) b!63292))

(assert (=> b!63292 m!55481))

(declare-fun m!57293 () Bool)

(assert (=> b!63292 m!57293))

(assert (=> b!62682 d!13027))

(declare-fun d!13029 () Bool)

(declare-fun isEmpty!305 (List!1447) Bool)

(assert (=> d!13029 (= (isEmpty!303 lt!26029) (isEmpty!305 (toList!697 lt!26029)))))

(declare-fun bs!2758 () Bool)

(assert (= bs!2758 d!13029))

(declare-fun m!57295 () Bool)

(assert (=> bs!2758 m!57295))

(assert (=> b!62476 d!13029))

(assert (=> d!12683 d!12755))

(assert (=> d!12693 d!12755))

(declare-fun d!13031 () Bool)

(declare-fun e!41498 () Bool)

(assert (=> d!13031 e!41498))

(declare-fun res!34633 () Bool)

(assert (=> d!13031 (=> res!34633 e!41498)))

(declare-fun lt!26592 () Bool)

(assert (=> d!13031 (= res!34633 (not lt!26592))))

(declare-fun lt!26590 () Bool)

(assert (=> d!13031 (= lt!26592 lt!26590)))

(declare-fun lt!26591 () Unit!1685)

(declare-fun e!41499 () Unit!1685)

(assert (=> d!13031 (= lt!26591 e!41499)))

(declare-fun c!8548 () Bool)

(assert (=> d!13031 (= c!8548 lt!26590)))

(assert (=> d!13031 (= lt!26590 (containsKey!128 (toList!697 (getCurrentListMap!393 (_keys!3718 newMap!16) lt!25918 (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (select (arr!1786 (_keys!3718 newMap!16)) (index!3054 lt!25902))))))

(assert (=> d!13031 (= (contains!690 (getCurrentListMap!393 (_keys!3718 newMap!16) lt!25918 (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (select (arr!1786 (_keys!3718 newMap!16)) (index!3054 lt!25902))) lt!26592)))

(declare-fun b!63293 () Bool)

(declare-fun lt!26589 () Unit!1685)

(assert (=> b!63293 (= e!41499 lt!26589)))

(assert (=> b!63293 (= lt!26589 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 (getCurrentListMap!393 (_keys!3718 newMap!16) lt!25918 (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (select (arr!1786 (_keys!3718 newMap!16)) (index!3054 lt!25902))))))

(assert (=> b!63293 (isDefined!78 (getValueByKey!124 (toList!697 (getCurrentListMap!393 (_keys!3718 newMap!16) lt!25918 (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (select (arr!1786 (_keys!3718 newMap!16)) (index!3054 lt!25902))))))

(declare-fun b!63294 () Bool)

(declare-fun Unit!1734 () Unit!1685)

(assert (=> b!63294 (= e!41499 Unit!1734)))

(declare-fun b!63295 () Bool)

(assert (=> b!63295 (= e!41498 (isDefined!78 (getValueByKey!124 (toList!697 (getCurrentListMap!393 (_keys!3718 newMap!16) lt!25918 (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (select (arr!1786 (_keys!3718 newMap!16)) (index!3054 lt!25902)))))))

(assert (= (and d!13031 c!8548) b!63293))

(assert (= (and d!13031 (not c!8548)) b!63294))

(assert (= (and d!13031 (not res!34633)) b!63295))

(assert (=> d!13031 m!55665))

(declare-fun m!57297 () Bool)

(assert (=> d!13031 m!57297))

(assert (=> b!63293 m!55665))

(declare-fun m!57299 () Bool)

(assert (=> b!63293 m!57299))

(assert (=> b!63293 m!55665))

(declare-fun m!57301 () Bool)

(assert (=> b!63293 m!57301))

(assert (=> b!63293 m!57301))

(declare-fun m!57303 () Bool)

(assert (=> b!63293 m!57303))

(assert (=> b!63295 m!55665))

(assert (=> b!63295 m!57301))

(assert (=> b!63295 m!57301))

(assert (=> b!63295 m!57303))

(assert (=> b!62597 d!13031))

(declare-fun b!63296 () Bool)

(declare-fun res!34636 () Bool)

(declare-fun e!41501 () Bool)

(assert (=> b!63296 (=> (not res!34636) (not e!41501))))

(declare-fun e!41512 () Bool)

(assert (=> b!63296 (= res!34636 e!41512)))

(declare-fun c!8554 () Bool)

(assert (=> b!63296 (= c!8554 (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!63297 () Bool)

(declare-fun e!41506 () Bool)

(declare-fun lt!26598 () ListLongMap!1363)

(assert (=> b!63297 (= e!41506 (= (apply!68 lt!26598 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1999 newMap!16)))))

(declare-fun b!63298 () Bool)

(declare-fun e!41510 () Bool)

(assert (=> b!63298 (= e!41510 (= (apply!68 lt!26598 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1999 newMap!16)))))

(declare-fun d!13033 () Bool)

(assert (=> d!13033 e!41501))

(declare-fun res!34635 () Bool)

(assert (=> d!13033 (=> (not res!34635) (not e!41501))))

(assert (=> d!13033 (= res!34635 (or (bvsge #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))))

(declare-fun lt!26600 () ListLongMap!1363)

(assert (=> d!13033 (= lt!26598 lt!26600)))

(declare-fun lt!26606 () Unit!1685)

(declare-fun e!41508 () Unit!1685)

(assert (=> d!13033 (= lt!26606 e!41508)))

(declare-fun c!8551 () Bool)

(declare-fun e!41500 () Bool)

(assert (=> d!13033 (= c!8551 e!41500)))

(declare-fun res!34641 () Bool)

(assert (=> d!13033 (=> (not res!34641) (not e!41500))))

(assert (=> d!13033 (= res!34641 (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(declare-fun e!41509 () ListLongMap!1363)

(assert (=> d!13033 (= lt!26600 e!41509)))

(declare-fun c!8552 () Bool)

(assert (=> d!13033 (= c!8552 (and (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!13033 (validMask!0 (mask!5992 newMap!16))))

(assert (=> d!13033 (= (getCurrentListMap!393 (_keys!3718 newMap!16) lt!25918 (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) lt!26598)))

(declare-fun b!63299 () Bool)

(declare-fun res!34640 () Bool)

(assert (=> b!63299 (=> (not res!34640) (not e!41501))))

(declare-fun e!41507 () Bool)

(assert (=> b!63299 (= res!34640 e!41507)))

(declare-fun res!34637 () Bool)

(assert (=> b!63299 (=> res!34637 e!41507)))

(declare-fun e!41505 () Bool)

(assert (=> b!63299 (= res!34637 (not e!41505))))

(declare-fun res!34638 () Bool)

(assert (=> b!63299 (=> (not res!34638) (not e!41505))))

(assert (=> b!63299 (= res!34638 (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(declare-fun bm!5010 () Bool)

(declare-fun call!5016 () ListLongMap!1363)

(declare-fun call!5017 () ListLongMap!1363)

(assert (=> bm!5010 (= call!5016 call!5017)))

(declare-fun b!63300 () Bool)

(declare-fun e!41504 () ListLongMap!1363)

(declare-fun call!5018 () ListLongMap!1363)

(assert (=> b!63300 (= e!41504 call!5018)))

(declare-fun bm!5011 () Bool)

(declare-fun call!5015 () Bool)

(assert (=> bm!5011 (= call!5015 (contains!690 lt!26598 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63301 () Bool)

(assert (=> b!63301 (= e!41512 (not call!5015))))

(declare-fun bm!5012 () Bool)

(declare-fun call!5019 () ListLongMap!1363)

(declare-fun call!5014 () ListLongMap!1363)

(assert (=> bm!5012 (= call!5019 call!5014)))

(declare-fun bm!5013 () Bool)

(declare-fun c!8553 () Bool)

(assert (=> bm!5013 (= call!5014 (+!83 (ite c!8552 call!5017 (ite c!8553 call!5016 call!5018)) (ite (or c!8552 c!8553) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(declare-fun b!63302 () Bool)

(assert (=> b!63302 (= e!41500 (validKeyInArray!0 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63303 () Bool)

(assert (=> b!63303 (= e!41509 (+!83 call!5014 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))

(declare-fun bm!5014 () Bool)

(declare-fun call!5013 () Bool)

(assert (=> bm!5014 (= call!5013 (contains!690 lt!26598 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63304 () Bool)

(declare-fun Unit!1735 () Unit!1685)

(assert (=> b!63304 (= e!41508 Unit!1735)))

(declare-fun b!63305 () Bool)

(assert (=> b!63305 (= e!41505 (validKeyInArray!0 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63306 () Bool)

(declare-fun c!8549 () Bool)

(assert (=> b!63306 (= c!8549 (and (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!41511 () ListLongMap!1363)

(assert (=> b!63306 (= e!41511 e!41504)))

(declare-fun b!63307 () Bool)

(declare-fun e!41502 () Bool)

(assert (=> b!63307 (= e!41501 e!41502)))

(declare-fun c!8550 () Bool)

(assert (=> b!63307 (= c!8550 (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!63308 () Bool)

(assert (=> b!63308 (= e!41509 e!41511)))

(assert (=> b!63308 (= c!8553 (and (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!63309 () Bool)

(declare-fun e!41503 () Bool)

(assert (=> b!63309 (= e!41507 e!41503)))

(declare-fun res!34639 () Bool)

(assert (=> b!63309 (=> (not res!34639) (not e!41503))))

(assert (=> b!63309 (= res!34639 (contains!690 lt!26598 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63309 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(declare-fun b!63310 () Bool)

(assert (=> b!63310 (= e!41502 (not call!5013))))

(declare-fun bm!5015 () Bool)

(assert (=> bm!5015 (= call!5018 call!5016)))

(declare-fun b!63311 () Bool)

(assert (=> b!63311 (= e!41512 e!41510)))

(declare-fun res!34642 () Bool)

(assert (=> b!63311 (= res!34642 call!5015)))

(assert (=> b!63311 (=> (not res!34642) (not e!41510))))

(declare-fun bm!5016 () Bool)

(assert (=> bm!5016 (= call!5017 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) lt!25918 (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun b!63312 () Bool)

(assert (=> b!63312 (= e!41503 (= (apply!68 lt!26598 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)) (get!1089 (select (arr!1787 lt!25918) #b00000000000000000000000000000000) (dynLambda!312 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!63312 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2020 lt!25918)))))

(assert (=> b!63312 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(declare-fun b!63313 () Bool)

(assert (=> b!63313 (= e!41504 call!5019)))

(declare-fun b!63314 () Bool)

(declare-fun lt!26612 () Unit!1685)

(assert (=> b!63314 (= e!41508 lt!26612)))

(declare-fun lt!26597 () ListLongMap!1363)

(assert (=> b!63314 (= lt!26597 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) lt!25918 (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26603 () (_ BitVec 64))

(assert (=> b!63314 (= lt!26603 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26610 () (_ BitVec 64))

(assert (=> b!63314 (= lt!26610 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26604 () Unit!1685)

(assert (=> b!63314 (= lt!26604 (addStillContains!44 lt!26597 lt!26603 (zeroValue!1999 newMap!16) lt!26610))))

(assert (=> b!63314 (contains!690 (+!83 lt!26597 (tuple2!2053 lt!26603 (zeroValue!1999 newMap!16))) lt!26610)))

(declare-fun lt!26596 () Unit!1685)

(assert (=> b!63314 (= lt!26596 lt!26604)))

(declare-fun lt!26594 () ListLongMap!1363)

(assert (=> b!63314 (= lt!26594 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) lt!25918 (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26605 () (_ BitVec 64))

(assert (=> b!63314 (= lt!26605 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26609 () (_ BitVec 64))

(assert (=> b!63314 (= lt!26609 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26601 () Unit!1685)

(assert (=> b!63314 (= lt!26601 (addApplyDifferent!44 lt!26594 lt!26605 (minValue!1999 newMap!16) lt!26609))))

(assert (=> b!63314 (= (apply!68 (+!83 lt!26594 (tuple2!2053 lt!26605 (minValue!1999 newMap!16))) lt!26609) (apply!68 lt!26594 lt!26609))))

(declare-fun lt!26593 () Unit!1685)

(assert (=> b!63314 (= lt!26593 lt!26601)))

(declare-fun lt!26602 () ListLongMap!1363)

(assert (=> b!63314 (= lt!26602 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) lt!25918 (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26607 () (_ BitVec 64))

(assert (=> b!63314 (= lt!26607 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26595 () (_ BitVec 64))

(assert (=> b!63314 (= lt!26595 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26614 () Unit!1685)

(assert (=> b!63314 (= lt!26614 (addApplyDifferent!44 lt!26602 lt!26607 (zeroValue!1999 newMap!16) lt!26595))))

(assert (=> b!63314 (= (apply!68 (+!83 lt!26602 (tuple2!2053 lt!26607 (zeroValue!1999 newMap!16))) lt!26595) (apply!68 lt!26602 lt!26595))))

(declare-fun lt!26608 () Unit!1685)

(assert (=> b!63314 (= lt!26608 lt!26614)))

(declare-fun lt!26599 () ListLongMap!1363)

(assert (=> b!63314 (= lt!26599 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) lt!25918 (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26611 () (_ BitVec 64))

(assert (=> b!63314 (= lt!26611 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26613 () (_ BitVec 64))

(assert (=> b!63314 (= lt!26613 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!63314 (= lt!26612 (addApplyDifferent!44 lt!26599 lt!26611 (minValue!1999 newMap!16) lt!26613))))

(assert (=> b!63314 (= (apply!68 (+!83 lt!26599 (tuple2!2053 lt!26611 (minValue!1999 newMap!16))) lt!26613) (apply!68 lt!26599 lt!26613))))

(declare-fun b!63315 () Bool)

(assert (=> b!63315 (= e!41502 e!41506)))

(declare-fun res!34634 () Bool)

(assert (=> b!63315 (= res!34634 call!5013)))

(assert (=> b!63315 (=> (not res!34634) (not e!41506))))

(declare-fun b!63316 () Bool)

(assert (=> b!63316 (= e!41511 call!5019)))

(assert (= (and d!13033 c!8552) b!63303))

(assert (= (and d!13033 (not c!8552)) b!63308))

(assert (= (and b!63308 c!8553) b!63316))

(assert (= (and b!63308 (not c!8553)) b!63306))

(assert (= (and b!63306 c!8549) b!63313))

(assert (= (and b!63306 (not c!8549)) b!63300))

(assert (= (or b!63313 b!63300) bm!5015))

(assert (= (or b!63316 bm!5015) bm!5010))

(assert (= (or b!63316 b!63313) bm!5012))

(assert (= (or b!63303 bm!5010) bm!5016))

(assert (= (or b!63303 bm!5012) bm!5013))

(assert (= (and d!13033 res!34641) b!63302))

(assert (= (and d!13033 c!8551) b!63314))

(assert (= (and d!13033 (not c!8551)) b!63304))

(assert (= (and d!13033 res!34635) b!63299))

(assert (= (and b!63299 res!34638) b!63305))

(assert (= (and b!63299 (not res!34637)) b!63309))

(assert (= (and b!63309 res!34639) b!63312))

(assert (= (and b!63299 res!34640) b!63296))

(assert (= (and b!63296 c!8554) b!63311))

(assert (= (and b!63296 (not c!8554)) b!63301))

(assert (= (and b!63311 res!34642) b!63298))

(assert (= (or b!63311 b!63301) bm!5011))

(assert (= (and b!63296 res!34636) b!63307))

(assert (= (and b!63307 c!8550) b!63315))

(assert (= (and b!63307 (not c!8550)) b!63310))

(assert (= (and b!63315 res!34634) b!63297))

(assert (= (or b!63315 b!63310) bm!5014))

(declare-fun b_lambda!2819 () Bool)

(assert (=> (not b_lambda!2819) (not b!63312)))

(assert (=> b!63312 t!4844))

(declare-fun b_and!3873 () Bool)

(assert (= b_and!3869 (and (=> t!4844 result!2455) b_and!3873)))

(assert (=> b!63312 t!4846))

(declare-fun b_and!3875 () Bool)

(assert (= b_and!3871 (and (=> t!4846 result!2457) b_and!3875)))

(declare-fun m!57305 () Bool)

(assert (=> bm!5016 m!57305))

(declare-fun m!57307 () Bool)

(assert (=> b!63303 m!57307))

(assert (=> b!63305 m!55803))

(assert (=> b!63305 m!55803))

(assert (=> b!63305 m!55843))

(declare-fun m!57309 () Bool)

(assert (=> bm!5014 m!57309))

(assert (=> b!63309 m!55803))

(assert (=> b!63309 m!55803))

(declare-fun m!57311 () Bool)

(assert (=> b!63309 m!57311))

(declare-fun m!57313 () Bool)

(assert (=> b!63297 m!57313))

(declare-fun m!57315 () Bool)

(assert (=> bm!5013 m!57315))

(assert (=> b!63302 m!55803))

(assert (=> b!63302 m!55803))

(assert (=> b!63302 m!55843))

(declare-fun m!57317 () Bool)

(assert (=> bm!5011 m!57317))

(assert (=> b!63312 m!55803))

(declare-fun m!57319 () Bool)

(assert (=> b!63312 m!57319))

(assert (=> b!63312 m!55857))

(declare-fun m!57321 () Bool)

(assert (=> b!63312 m!57321))

(assert (=> b!63312 m!55803))

(assert (=> b!63312 m!57321))

(assert (=> b!63312 m!55857))

(declare-fun m!57323 () Bool)

(assert (=> b!63312 m!57323))

(declare-fun m!57325 () Bool)

(assert (=> b!63298 m!57325))

(declare-fun m!57327 () Bool)

(assert (=> b!63314 m!57327))

(assert (=> b!63314 m!57305))

(declare-fun m!57329 () Bool)

(assert (=> b!63314 m!57329))

(assert (=> b!63314 m!57329))

(declare-fun m!57331 () Bool)

(assert (=> b!63314 m!57331))

(declare-fun m!57333 () Bool)

(assert (=> b!63314 m!57333))

(declare-fun m!57335 () Bool)

(assert (=> b!63314 m!57335))

(declare-fun m!57337 () Bool)

(assert (=> b!63314 m!57337))

(declare-fun m!57339 () Bool)

(assert (=> b!63314 m!57339))

(declare-fun m!57341 () Bool)

(assert (=> b!63314 m!57341))

(declare-fun m!57343 () Bool)

(assert (=> b!63314 m!57343))

(assert (=> b!63314 m!55803))

(declare-fun m!57345 () Bool)

(assert (=> b!63314 m!57345))

(declare-fun m!57347 () Bool)

(assert (=> b!63314 m!57347))

(declare-fun m!57349 () Bool)

(assert (=> b!63314 m!57349))

(assert (=> b!63314 m!57347))

(declare-fun m!57351 () Bool)

(assert (=> b!63314 m!57351))

(assert (=> b!63314 m!57335))

(declare-fun m!57353 () Bool)

(assert (=> b!63314 m!57353))

(assert (=> b!63314 m!57341))

(declare-fun m!57355 () Bool)

(assert (=> b!63314 m!57355))

(assert (=> d!13033 m!55783))

(assert (=> b!62597 d!13033))

(declare-fun b!63317 () Bool)

(declare-fun e!41513 () Bool)

(assert (=> b!63317 (= e!41513 (contains!691 Nil!1443 (select (arr!1786 (_keys!3718 (_2!1036 lt!25898))) #b00000000000000000000000000000000)))))

(declare-fun b!63319 () Bool)

(declare-fun e!41516 () Bool)

(declare-fun e!41514 () Bool)

(assert (=> b!63319 (= e!41516 e!41514)))

(declare-fun res!34645 () Bool)

(assert (=> b!63319 (=> (not res!34645) (not e!41514))))

(assert (=> b!63319 (= res!34645 (not e!41513))))

(declare-fun res!34643 () Bool)

(assert (=> b!63319 (=> (not res!34643) (not e!41513))))

(assert (=> b!63319 (= res!34643 (validKeyInArray!0 (select (arr!1786 (_keys!3718 (_2!1036 lt!25898))) #b00000000000000000000000000000000)))))

(declare-fun bm!5017 () Bool)

(declare-fun call!5020 () Bool)

(declare-fun c!8555 () Bool)

(assert (=> bm!5017 (= call!5020 (arrayNoDuplicates!0 (_keys!3718 (_2!1036 lt!25898)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!8555 (Cons!1442 (select (arr!1786 (_keys!3718 (_2!1036 lt!25898))) #b00000000000000000000000000000000) Nil!1443) Nil!1443)))))

(declare-fun b!63320 () Bool)

(declare-fun e!41515 () Bool)

(assert (=> b!63320 (= e!41515 call!5020)))

(declare-fun b!63321 () Bool)

(assert (=> b!63321 (= e!41515 call!5020)))

(declare-fun b!63318 () Bool)

(assert (=> b!63318 (= e!41514 e!41515)))

(assert (=> b!63318 (= c!8555 (validKeyInArray!0 (select (arr!1786 (_keys!3718 (_2!1036 lt!25898))) #b00000000000000000000000000000000)))))

(declare-fun d!13035 () Bool)

(declare-fun res!34644 () Bool)

(assert (=> d!13035 (=> res!34644 e!41516)))

(assert (=> d!13035 (= res!34644 (bvsge #b00000000000000000000000000000000 (size!2019 (_keys!3718 (_2!1036 lt!25898)))))))

(assert (=> d!13035 (= (arrayNoDuplicates!0 (_keys!3718 (_2!1036 lt!25898)) #b00000000000000000000000000000000 Nil!1443) e!41516)))

(assert (= (and d!13035 (not res!34644)) b!63319))

(assert (= (and b!63319 res!34643) b!63317))

(assert (= (and b!63319 res!34645) b!63318))

(assert (= (and b!63318 c!8555) b!63320))

(assert (= (and b!63318 (not c!8555)) b!63321))

(assert (= (or b!63320 b!63321) bm!5017))

(assert (=> b!63317 m!56425))

(assert (=> b!63317 m!56425))

(declare-fun m!57357 () Bool)

(assert (=> b!63317 m!57357))

(assert (=> b!63319 m!56425))

(assert (=> b!63319 m!56425))

(assert (=> b!63319 m!56427))

(assert (=> bm!5017 m!56425))

(declare-fun m!57359 () Bool)

(assert (=> bm!5017 m!57359))

(assert (=> b!63318 m!56425))

(assert (=> b!63318 m!56425))

(assert (=> b!63318 m!56427))

(assert (=> b!62407 d!13035))

(assert (=> d!12705 d!12991))

(declare-fun d!13037 () Bool)

(assert (=> d!13037 (arrayContainsKey!0 lt!26290 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(declare-fun lt!26617 () Unit!1685)

(declare-fun choose!13 (array!3737 (_ BitVec 64) (_ BitVec 32)) Unit!1685)

(assert (=> d!13037 (= lt!26617 (choose!13 lt!26290 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902))))))

(assert (=> d!13037 (bvsge (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) #b00000000000000000000000000000000)))

(assert (=> d!13037 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!26290 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902))) lt!26617)))

(declare-fun bs!2759 () Bool)

(assert (= bs!2759 d!13037))

(assert (=> bs!2759 m!55481))

(assert (=> bs!2759 m!56263))

(assert (=> bs!2759 m!55481))

(declare-fun m!57361 () Bool)

(assert (=> bs!2759 m!57361))

(assert (=> d!12705 d!13037))

(declare-fun b!63322 () Bool)

(declare-fun res!34648 () Bool)

(declare-fun e!41518 () Bool)

(assert (=> b!63322 (=> (not res!34648) (not e!41518))))

(declare-fun e!41529 () Bool)

(assert (=> b!63322 (= res!34648 e!41529)))

(declare-fun c!8561 () Bool)

(assert (=> b!63322 (= c!8561 (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!63323 () Bool)

(declare-fun e!41523 () Bool)

(declare-fun lt!26623 () ListLongMap!1363)

(assert (=> b!63323 (= e!41523 (= (apply!68 lt!26623 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1999 newMap!16)))))

(declare-fun b!63324 () Bool)

(declare-fun e!41527 () Bool)

(assert (=> b!63324 (= e!41527 (= (apply!68 lt!26623 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1999 newMap!16)))))

(declare-fun d!13039 () Bool)

(assert (=> d!13039 e!41518))

(declare-fun res!34647 () Bool)

(assert (=> d!13039 (=> (not res!34647) (not e!41518))))

(assert (=> d!13039 (= res!34647 (or (bvsge #b00000000000000000000000000000000 (size!2019 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16))))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2019 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16))))))))))

(declare-fun lt!26625 () ListLongMap!1363)

(assert (=> d!13039 (= lt!26623 lt!26625)))

(declare-fun lt!26631 () Unit!1685)

(declare-fun e!41525 () Unit!1685)

(assert (=> d!13039 (= lt!26631 e!41525)))

(declare-fun c!8558 () Bool)

(declare-fun e!41517 () Bool)

(assert (=> d!13039 (= c!8558 e!41517)))

(declare-fun res!34653 () Bool)

(assert (=> d!13039 (=> (not res!34653) (not e!41517))))

(assert (=> d!13039 (= res!34653 (bvslt #b00000000000000000000000000000000 (size!2019 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16))))))))

(declare-fun e!41526 () ListLongMap!1363)

(assert (=> d!13039 (= lt!26625 e!41526)))

(declare-fun c!8559 () Bool)

(assert (=> d!13039 (= c!8559 (and (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!13039 (validMask!0 (mask!5992 newMap!16))))

(assert (=> d!13039 (= (getCurrentListMap!393 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16))) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16))) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) lt!26623)))

(declare-fun b!63325 () Bool)

(declare-fun res!34652 () Bool)

(assert (=> b!63325 (=> (not res!34652) (not e!41518))))

(declare-fun e!41524 () Bool)

(assert (=> b!63325 (= res!34652 e!41524)))

(declare-fun res!34649 () Bool)

(assert (=> b!63325 (=> res!34649 e!41524)))

(declare-fun e!41522 () Bool)

(assert (=> b!63325 (= res!34649 (not e!41522))))

(declare-fun res!34650 () Bool)

(assert (=> b!63325 (=> (not res!34650) (not e!41522))))

(assert (=> b!63325 (= res!34650 (bvslt #b00000000000000000000000000000000 (size!2019 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16))))))))

(declare-fun bm!5018 () Bool)

(declare-fun call!5024 () ListLongMap!1363)

(declare-fun call!5025 () ListLongMap!1363)

(assert (=> bm!5018 (= call!5024 call!5025)))

(declare-fun b!63326 () Bool)

(declare-fun e!41521 () ListLongMap!1363)

(declare-fun call!5026 () ListLongMap!1363)

(assert (=> b!63326 (= e!41521 call!5026)))

(declare-fun bm!5019 () Bool)

(declare-fun call!5023 () Bool)

(assert (=> bm!5019 (= call!5023 (contains!690 lt!26623 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63327 () Bool)

(assert (=> b!63327 (= e!41529 (not call!5023))))

(declare-fun bm!5020 () Bool)

(declare-fun call!5027 () ListLongMap!1363)

(declare-fun call!5022 () ListLongMap!1363)

(assert (=> bm!5020 (= call!5027 call!5022)))

(declare-fun c!8560 () Bool)

(declare-fun bm!5021 () Bool)

(assert (=> bm!5021 (= call!5022 (+!83 (ite c!8559 call!5025 (ite c!8560 call!5024 call!5026)) (ite (or c!8559 c!8560) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(declare-fun b!63328 () Bool)

(assert (=> b!63328 (= e!41517 (validKeyInArray!0 (select (arr!1786 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!63329 () Bool)

(assert (=> b!63329 (= e!41526 (+!83 call!5022 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))

(declare-fun bm!5022 () Bool)

(declare-fun call!5021 () Bool)

(assert (=> bm!5022 (= call!5021 (contains!690 lt!26623 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63330 () Bool)

(declare-fun Unit!1736 () Unit!1685)

(assert (=> b!63330 (= e!41525 Unit!1736)))

(declare-fun b!63331 () Bool)

(assert (=> b!63331 (= e!41522 (validKeyInArray!0 (select (arr!1786 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!63332 () Bool)

(declare-fun c!8556 () Bool)

(assert (=> b!63332 (= c!8556 (and (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!41528 () ListLongMap!1363)

(assert (=> b!63332 (= e!41528 e!41521)))

(declare-fun b!63333 () Bool)

(declare-fun e!41519 () Bool)

(assert (=> b!63333 (= e!41518 e!41519)))

(declare-fun c!8557 () Bool)

(assert (=> b!63333 (= c!8557 (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!63334 () Bool)

(assert (=> b!63334 (= e!41526 e!41528)))

(assert (=> b!63334 (= c!8560 (and (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!63335 () Bool)

(declare-fun e!41520 () Bool)

(assert (=> b!63335 (= e!41524 e!41520)))

(declare-fun res!34651 () Bool)

(assert (=> b!63335 (=> (not res!34651) (not e!41520))))

(assert (=> b!63335 (= res!34651 (contains!690 lt!26623 (select (arr!1786 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> b!63335 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2019 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16))))))))

(declare-fun b!63336 () Bool)

(assert (=> b!63336 (= e!41519 (not call!5021))))

(declare-fun bm!5023 () Bool)

(assert (=> bm!5023 (= call!5026 call!5024)))

(declare-fun b!63337 () Bool)

(assert (=> b!63337 (= e!41529 e!41527)))

(declare-fun res!34654 () Bool)

(assert (=> b!63337 (= res!34654 call!5023)))

(assert (=> b!63337 (=> (not res!34654) (not e!41527))))

(declare-fun bm!5024 () Bool)

(assert (=> bm!5024 (= call!5025 (getCurrentListMapNoExtraKeys!46 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16))) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16))) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun b!63338 () Bool)

(assert (=> b!63338 (= e!41520 (= (apply!68 lt!26623 (select (arr!1786 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16)))) #b00000000000000000000000000000000)) (get!1089 (select (arr!1787 (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!312 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!63338 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2020 (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16))))))))

(assert (=> b!63338 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2019 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16))))))))

(declare-fun b!63339 () Bool)

(assert (=> b!63339 (= e!41521 call!5027)))

(declare-fun b!63340 () Bool)

(declare-fun lt!26637 () Unit!1685)

(assert (=> b!63340 (= e!41525 lt!26637)))

(declare-fun lt!26622 () ListLongMap!1363)

(assert (=> b!63340 (= lt!26622 (getCurrentListMapNoExtraKeys!46 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16))) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16))) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26628 () (_ BitVec 64))

(assert (=> b!63340 (= lt!26628 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26635 () (_ BitVec 64))

(assert (=> b!63340 (= lt!26635 (select (arr!1786 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!26629 () Unit!1685)

(assert (=> b!63340 (= lt!26629 (addStillContains!44 lt!26622 lt!26628 (zeroValue!1999 newMap!16) lt!26635))))

(assert (=> b!63340 (contains!690 (+!83 lt!26622 (tuple2!2053 lt!26628 (zeroValue!1999 newMap!16))) lt!26635)))

(declare-fun lt!26621 () Unit!1685)

(assert (=> b!63340 (= lt!26621 lt!26629)))

(declare-fun lt!26619 () ListLongMap!1363)

(assert (=> b!63340 (= lt!26619 (getCurrentListMapNoExtraKeys!46 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16))) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16))) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26630 () (_ BitVec 64))

(assert (=> b!63340 (= lt!26630 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26634 () (_ BitVec 64))

(assert (=> b!63340 (= lt!26634 (select (arr!1786 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!26626 () Unit!1685)

(assert (=> b!63340 (= lt!26626 (addApplyDifferent!44 lt!26619 lt!26630 (minValue!1999 newMap!16) lt!26634))))

(assert (=> b!63340 (= (apply!68 (+!83 lt!26619 (tuple2!2053 lt!26630 (minValue!1999 newMap!16))) lt!26634) (apply!68 lt!26619 lt!26634))))

(declare-fun lt!26618 () Unit!1685)

(assert (=> b!63340 (= lt!26618 lt!26626)))

(declare-fun lt!26627 () ListLongMap!1363)

(assert (=> b!63340 (= lt!26627 (getCurrentListMapNoExtraKeys!46 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16))) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16))) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26632 () (_ BitVec 64))

(assert (=> b!63340 (= lt!26632 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26620 () (_ BitVec 64))

(assert (=> b!63340 (= lt!26620 (select (arr!1786 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!26639 () Unit!1685)

(assert (=> b!63340 (= lt!26639 (addApplyDifferent!44 lt!26627 lt!26632 (zeroValue!1999 newMap!16) lt!26620))))

(assert (=> b!63340 (= (apply!68 (+!83 lt!26627 (tuple2!2053 lt!26632 (zeroValue!1999 newMap!16))) lt!26620) (apply!68 lt!26627 lt!26620))))

(declare-fun lt!26633 () Unit!1685)

(assert (=> b!63340 (= lt!26633 lt!26639)))

(declare-fun lt!26624 () ListLongMap!1363)

(assert (=> b!63340 (= lt!26624 (getCurrentListMapNoExtraKeys!46 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16))) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16))) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26636 () (_ BitVec 64))

(assert (=> b!63340 (= lt!26636 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26638 () (_ BitVec 64))

(assert (=> b!63340 (= lt!26638 (select (arr!1786 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16)))) #b00000000000000000000000000000000))))

(assert (=> b!63340 (= lt!26637 (addApplyDifferent!44 lt!26624 lt!26636 (minValue!1999 newMap!16) lt!26638))))

(assert (=> b!63340 (= (apply!68 (+!83 lt!26624 (tuple2!2053 lt!26636 (minValue!1999 newMap!16))) lt!26638) (apply!68 lt!26624 lt!26638))))

(declare-fun b!63341 () Bool)

(assert (=> b!63341 (= e!41519 e!41523)))

(declare-fun res!34646 () Bool)

(assert (=> b!63341 (= res!34646 call!5021)))

(assert (=> b!63341 (=> (not res!34646) (not e!41523))))

(declare-fun b!63342 () Bool)

(assert (=> b!63342 (= e!41528 call!5027)))

(assert (= (and d!13039 c!8559) b!63329))

(assert (= (and d!13039 (not c!8559)) b!63334))

(assert (= (and b!63334 c!8560) b!63342))

(assert (= (and b!63334 (not c!8560)) b!63332))

(assert (= (and b!63332 c!8556) b!63339))

(assert (= (and b!63332 (not c!8556)) b!63326))

(assert (= (or b!63339 b!63326) bm!5023))

(assert (= (or b!63342 bm!5023) bm!5018))

(assert (= (or b!63342 b!63339) bm!5020))

(assert (= (or b!63329 bm!5018) bm!5024))

(assert (= (or b!63329 bm!5020) bm!5021))

(assert (= (and d!13039 res!34653) b!63328))

(assert (= (and d!13039 c!8558) b!63340))

(assert (= (and d!13039 (not c!8558)) b!63330))

(assert (= (and d!13039 res!34647) b!63325))

(assert (= (and b!63325 res!34650) b!63331))

(assert (= (and b!63325 (not res!34649)) b!63335))

(assert (= (and b!63335 res!34651) b!63338))

(assert (= (and b!63325 res!34652) b!63322))

(assert (= (and b!63322 c!8561) b!63337))

(assert (= (and b!63322 (not c!8561)) b!63327))

(assert (= (and b!63337 res!34654) b!63324))

(assert (= (or b!63337 b!63327) bm!5019))

(assert (= (and b!63322 res!34648) b!63333))

(assert (= (and b!63333 c!8557) b!63341))

(assert (= (and b!63333 (not c!8557)) b!63336))

(assert (= (and b!63341 res!34646) b!63323))

(assert (= (or b!63341 b!63336) bm!5022))

(declare-fun b_lambda!2821 () Bool)

(assert (=> (not b_lambda!2821) (not b!63338)))

(assert (=> b!63338 t!4844))

(declare-fun b_and!3877 () Bool)

(assert (= b_and!3873 (and (=> t!4844 result!2455) b_and!3877)))

(assert (=> b!63338 t!4846))

(declare-fun b_and!3879 () Bool)

(assert (= b_and!3875 (and (=> t!4846 result!2457) b_and!3879)))

(declare-fun m!57363 () Bool)

(assert (=> bm!5024 m!57363))

(declare-fun m!57365 () Bool)

(assert (=> b!63329 m!57365))

(declare-fun m!57367 () Bool)

(assert (=> b!63331 m!57367))

(assert (=> b!63331 m!57367))

(declare-fun m!57369 () Bool)

(assert (=> b!63331 m!57369))

(declare-fun m!57371 () Bool)

(assert (=> bm!5022 m!57371))

(assert (=> b!63335 m!57367))

(assert (=> b!63335 m!57367))

(declare-fun m!57373 () Bool)

(assert (=> b!63335 m!57373))

(declare-fun m!57375 () Bool)

(assert (=> b!63323 m!57375))

(declare-fun m!57377 () Bool)

(assert (=> bm!5021 m!57377))

(assert (=> b!63328 m!57367))

(assert (=> b!63328 m!57367))

(assert (=> b!63328 m!57369))

(declare-fun m!57379 () Bool)

(assert (=> bm!5019 m!57379))

(assert (=> b!63338 m!57367))

(declare-fun m!57381 () Bool)

(assert (=> b!63338 m!57381))

(assert (=> b!63338 m!55857))

(declare-fun m!57383 () Bool)

(assert (=> b!63338 m!57383))

(assert (=> b!63338 m!57367))

(assert (=> b!63338 m!57383))

(assert (=> b!63338 m!55857))

(declare-fun m!57385 () Bool)

(assert (=> b!63338 m!57385))

(declare-fun m!57387 () Bool)

(assert (=> b!63324 m!57387))

(declare-fun m!57389 () Bool)

(assert (=> b!63340 m!57389))

(assert (=> b!63340 m!57363))

(declare-fun m!57391 () Bool)

(assert (=> b!63340 m!57391))

(assert (=> b!63340 m!57391))

(declare-fun m!57393 () Bool)

(assert (=> b!63340 m!57393))

(declare-fun m!57395 () Bool)

(assert (=> b!63340 m!57395))

(declare-fun m!57397 () Bool)

(assert (=> b!63340 m!57397))

(declare-fun m!57399 () Bool)

(assert (=> b!63340 m!57399))

(declare-fun m!57401 () Bool)

(assert (=> b!63340 m!57401))

(declare-fun m!57403 () Bool)

(assert (=> b!63340 m!57403))

(declare-fun m!57405 () Bool)

(assert (=> b!63340 m!57405))

(assert (=> b!63340 m!57367))

(declare-fun m!57407 () Bool)

(assert (=> b!63340 m!57407))

(declare-fun m!57409 () Bool)

(assert (=> b!63340 m!57409))

(declare-fun m!57411 () Bool)

(assert (=> b!63340 m!57411))

(assert (=> b!63340 m!57409))

(declare-fun m!57413 () Bool)

(assert (=> b!63340 m!57413))

(assert (=> b!63340 m!57397))

(declare-fun m!57415 () Bool)

(assert (=> b!63340 m!57415))

(assert (=> b!63340 m!57403))

(declare-fun m!57417 () Bool)

(assert (=> b!63340 m!57417))

(assert (=> d!13039 m!55783))

(assert (=> d!12705 d!13039))

(declare-fun b!63343 () Bool)

(declare-fun e!41530 () (_ BitVec 32))

(declare-fun call!5028 () (_ BitVec 32))

(assert (=> b!63343 (= e!41530 call!5028)))

(declare-fun b!63344 () Bool)

(declare-fun e!41531 () (_ BitVec 32))

(assert (=> b!63344 (= e!41531 #b00000000000000000000000000000000)))

(declare-fun b!63345 () Bool)

(assert (=> b!63345 (= e!41531 e!41530)))

(declare-fun c!8562 () Bool)

(assert (=> b!63345 (= c!8562 (validKeyInArray!0 (select (arr!1786 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!63346 () Bool)

(assert (=> b!63346 (= e!41530 (bvadd #b00000000000000000000000000000001 call!5028))))

(declare-fun bm!5025 () Bool)

(assert (=> bm!5025 (= call!5028 (arrayCountValidKeys!0 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2019 (_keys!3718 newMap!16))))))

(declare-fun lt!26640 () (_ BitVec 32))

(declare-fun d!13041 () Bool)

(assert (=> d!13041 (and (bvsge lt!26640 #b00000000000000000000000000000000) (bvsle lt!26640 (bvsub (size!2019 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> d!13041 (= lt!26640 e!41531)))

(declare-fun c!8563 () Bool)

(assert (=> d!13041 (= c!8563 (bvsge #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(assert (=> d!13041 (and (bvsle #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2019 (_keys!3718 newMap!16)) (size!2019 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16))))))))

(assert (=> d!13041 (= (arrayCountValidKeys!0 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16))) #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))) lt!26640)))

(assert (= (and d!13041 c!8563) b!63344))

(assert (= (and d!13041 (not c!8563)) b!63345))

(assert (= (and b!63345 c!8562) b!63346))

(assert (= (and b!63345 (not c!8562)) b!63343))

(assert (= (or b!63346 b!63343) bm!5025))

(assert (=> b!63345 m!57367))

(assert (=> b!63345 m!57367))

(assert (=> b!63345 m!57369))

(declare-fun m!57419 () Bool)

(assert (=> bm!5025 m!57419))

(assert (=> d!12705 d!13041))

(declare-fun b!63356 () Bool)

(declare-fun res!34666 () Bool)

(declare-fun e!41537 () Bool)

(assert (=> b!63356 (=> (not res!34666) (not e!41537))))

(assert (=> b!63356 (= res!34666 (validKeyInArray!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(declare-fun b!63357 () Bool)

(assert (=> b!63357 (= e!41537 (bvslt (size!2019 (_keys!3718 newMap!16)) #b01111111111111111111111111111111))))

(declare-fun d!13043 () Bool)

(declare-fun e!41536 () Bool)

(assert (=> d!13043 e!41536))

(declare-fun res!34665 () Bool)

(assert (=> d!13043 (=> (not res!34665) (not e!41536))))

(assert (=> d!13043 (= res!34665 (and (bvsge (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) #b00000000000000000000000000000000) (bvslt (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (size!2019 (_keys!3718 newMap!16)))))))

(declare-fun lt!26643 () Unit!1685)

(declare-fun choose!1 (array!3737 (_ BitVec 32) (_ BitVec 64)) Unit!1685)

(assert (=> d!13043 (= lt!26643 (choose!1 (_keys!3718 newMap!16) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(assert (=> d!13043 e!41537))

(declare-fun res!34664 () Bool)

(assert (=> d!13043 (=> (not res!34664) (not e!41537))))

(assert (=> d!13043 (= res!34664 (and (bvsge (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) #b00000000000000000000000000000000) (bvslt (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (size!2019 (_keys!3718 newMap!16)))))))

(assert (=> d!13043 (= (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!3718 newMap!16) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) lt!26643)))

(declare-fun b!63358 () Bool)

(assert (=> b!63358 (= e!41536 (= (arrayCountValidKeys!0 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16))) #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!3718 newMap!16) #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))) #b00000000000000000000000000000001)))))

(declare-fun b!63355 () Bool)

(declare-fun res!34663 () Bool)

(assert (=> b!63355 (=> (not res!34663) (not e!41537))))

(assert (=> b!63355 (= res!34663 (not (validKeyInArray!0 (select (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902))))))))

(assert (= (and d!13043 res!34664) b!63355))

(assert (= (and b!63355 res!34663) b!63356))

(assert (= (and b!63356 res!34666) b!63357))

(assert (= (and d!13043 res!34665) b!63358))

(assert (=> b!63356 m!55481))

(assert (=> b!63356 m!55693))

(assert (=> d!13043 m!55481))

(declare-fun m!57421 () Bool)

(assert (=> d!13043 m!57421))

(assert (=> b!63358 m!56281))

(assert (=> b!63358 m!56271))

(assert (=> b!63358 m!55607))

(declare-fun m!57423 () Bool)

(assert (=> b!63355 m!57423))

(assert (=> b!63355 m!57423))

(declare-fun m!57425 () Bool)

(assert (=> b!63355 m!57425))

(assert (=> d!12705 d!13043))

(assert (=> d!12705 d!12619))

(assert (=> d!12705 d!12545))

(declare-fun d!13045 () Bool)

(declare-fun e!41540 () Bool)

(assert (=> d!13045 e!41540))

(declare-fun res!34669 () Bool)

(assert (=> d!13045 (=> (not res!34669) (not e!41540))))

(assert (=> d!13045 (= res!34669 (and (bvsge (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) #b00000000000000000000000000000000) (bvslt (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (size!2019 (_keys!3718 newMap!16))) (bvslt (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (size!2020 (_values!2070 newMap!16)))))))

(declare-fun lt!26646 () Unit!1685)

(declare-fun choose!348 (array!3737 array!3739 (_ BitVec 32) (_ BitVec 32) V!2865 V!2865 (_ BitVec 32) (_ BitVec 64) V!2865 Int) Unit!1685)

(assert (=> d!13045 (= lt!26646 (choose!348 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2087 newMap!16)))))

(assert (=> d!13045 (validMask!0 (mask!5992 newMap!16))))

(assert (=> d!13045 (= (lemmaAddValidKeyToArrayThenAddPairToListMap!7 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2087 newMap!16)) lt!26646)))

(declare-fun b!63361 () Bool)

(assert (=> b!63361 (= e!41540 (= (+!83 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!393 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16))) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16))) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))))))

(assert (= (and d!13045 res!34669) b!63361))

(assert (=> d!13045 m!55481))

(assert (=> d!13045 m!55507))

(declare-fun m!57427 () Bool)

(assert (=> d!13045 m!57427))

(assert (=> d!13045 m!55783))

(assert (=> b!63361 m!56275))

(assert (=> b!63361 m!55647))

(assert (=> b!63361 m!56043))

(assert (=> b!63361 m!56267))

(assert (=> b!63361 m!56281))

(assert (=> b!63361 m!55647))

(assert (=> d!12705 d!13045))

(assert (=> d!12705 d!12591))

(declare-fun b!63362 () Bool)

(declare-fun e!41541 () (_ BitVec 32))

(declare-fun call!5029 () (_ BitVec 32))

(assert (=> b!63362 (= e!41541 call!5029)))

(declare-fun b!63363 () Bool)

(declare-fun e!41542 () (_ BitVec 32))

(assert (=> b!63363 (= e!41542 #b00000000000000000000000000000000)))

(declare-fun b!63364 () Bool)

(assert (=> b!63364 (= e!41542 e!41541)))

(declare-fun c!8564 () Bool)

(assert (=> b!63364 (= c!8564 (validKeyInArray!0 (select (arr!1786 lt!26283) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)))))))

(declare-fun b!63365 () Bool)

(assert (=> b!63365 (= e!41541 (bvadd #b00000000000000000000000000000001 call!5029))))

(declare-fun bm!5026 () Bool)

(assert (=> bm!5026 (= call!5029 (arrayCountValidKeys!0 lt!26283 (bvadd (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) #b00000000000000000000000000000001) (bvadd (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) #b00000000000000000000000000000001)))))

(declare-fun lt!26647 () (_ BitVec 32))

(declare-fun d!13047 () Bool)

(assert (=> d!13047 (and (bvsge lt!26647 #b00000000000000000000000000000000) (bvsle lt!26647 (bvsub (size!2019 lt!26283) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)))))))

(assert (=> d!13047 (= lt!26647 e!41542)))

(declare-fun c!8565 () Bool)

(assert (=> d!13047 (= c!8565 (bvsge (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (bvadd (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) #b00000000000000000000000000000001)))))

(assert (=> d!13047 (and (bvsle (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (bvadd (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) #b00000000000000000000000000000001)) (bvsge (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) #b00000000000000000000000000000000) (bvsle (bvadd (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) #b00000000000000000000000000000001) (size!2019 lt!26283)))))

(assert (=> d!13047 (= (arrayCountValidKeys!0 lt!26283 (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (bvadd (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) #b00000000000000000000000000000001)) lt!26647)))

(assert (= (and d!13047 c!8565) b!63363))

(assert (= (and d!13047 (not c!8565)) b!63364))

(assert (= (and b!63364 c!8564) b!63365))

(assert (= (and b!63364 (not c!8564)) b!63362))

(assert (= (or b!63365 b!63362) bm!5026))

(declare-fun m!57429 () Bool)

(assert (=> b!63364 m!57429))

(assert (=> b!63364 m!57429))

(declare-fun m!57431 () Bool)

(assert (=> b!63364 m!57431))

(declare-fun m!57433 () Bool)

(assert (=> bm!5026 m!57433))

(assert (=> d!12705 d!13047))

(assert (=> d!12705 d!12629))

(declare-fun d!13049 () Bool)

(declare-fun e!41543 () Bool)

(assert (=> d!13049 e!41543))

(declare-fun res!34670 () Bool)

(assert (=> d!13049 (=> (not res!34670) (not e!41543))))

(assert (=> d!13049 (= res!34670 (and (bvsge (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) #b00000000000000000000000000000000) (bvslt (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (size!2019 lt!26269))))))

(declare-fun lt!26648 () Unit!1685)

(assert (=> d!13049 (= lt!26648 (choose!342 lt!26269 lt!26279 (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (defaultEntry!2087 newMap!16)))))

(assert (=> d!13049 (validMask!0 (mask!5992 newMap!16))))

(assert (=> d!13049 (= (lemmaValidKeyInArrayIsInListMap!76 lt!26269 lt!26279 (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (defaultEntry!2087 newMap!16)) lt!26648)))

(declare-fun b!63366 () Bool)

(assert (=> b!63366 (= e!41543 (contains!690 (getCurrentListMap!393 lt!26269 lt!26279 (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (select (arr!1786 lt!26269) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)))))))

(assert (= (and d!13049 res!34670) b!63366))

(declare-fun m!57435 () Bool)

(assert (=> d!13049 m!57435))

(assert (=> d!13049 m!55783))

(assert (=> b!63366 m!56287))

(declare-fun m!57437 () Bool)

(assert (=> b!63366 m!57437))

(assert (=> b!63366 m!56287))

(assert (=> b!63366 m!57437))

(declare-fun m!57439 () Bool)

(assert (=> b!63366 m!57439))

(assert (=> d!12705 d!13049))

(declare-fun d!13051 () Bool)

(declare-fun e!41544 () Bool)

(assert (=> d!13051 e!41544))

(declare-fun res!34671 () Bool)

(assert (=> d!13051 (=> res!34671 e!41544)))

(declare-fun lt!26652 () Bool)

(assert (=> d!13051 (= res!34671 (not lt!26652))))

(declare-fun lt!26650 () Bool)

(assert (=> d!13051 (= lt!26652 lt!26650)))

(declare-fun lt!26651 () Unit!1685)

(declare-fun e!41545 () Unit!1685)

(assert (=> d!13051 (= lt!26651 e!41545)))

(declare-fun c!8566 () Bool)

(assert (=> d!13051 (= c!8566 lt!26650)))

(assert (=> d!13051 (= lt!26650 (containsKey!128 (toList!697 (getCurrentListMap!393 lt!26269 lt!26279 (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (select (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)))))))

(assert (=> d!13051 (= (contains!690 (getCurrentListMap!393 lt!26269 lt!26279 (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (select (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)))) lt!26652)))

(declare-fun b!63367 () Bool)

(declare-fun lt!26649 () Unit!1685)

(assert (=> b!63367 (= e!41545 lt!26649)))

(assert (=> b!63367 (= lt!26649 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 (getCurrentListMap!393 lt!26269 lt!26279 (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (select (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)))))))

(assert (=> b!63367 (isDefined!78 (getValueByKey!124 (toList!697 (getCurrentListMap!393 lt!26269 lt!26279 (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (select (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)))))))

(declare-fun b!63368 () Bool)

(declare-fun Unit!1737 () Unit!1685)

(assert (=> b!63368 (= e!41545 Unit!1737)))

(declare-fun b!63369 () Bool)

(assert (=> b!63369 (= e!41544 (isDefined!78 (getValueByKey!124 (toList!697 (getCurrentListMap!393 lt!26269 lt!26279 (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (select (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902))))))))

(assert (= (and d!13051 c!8566) b!63367))

(assert (= (and d!13051 (not c!8566)) b!63368))

(assert (= (and d!13051 (not res!34671)) b!63369))

(assert (=> d!13051 m!56283))

(declare-fun m!57441 () Bool)

(assert (=> d!13051 m!57441))

(assert (=> b!63367 m!56283))

(declare-fun m!57443 () Bool)

(assert (=> b!63367 m!57443))

(assert (=> b!63367 m!56283))

(declare-fun m!57445 () Bool)

(assert (=> b!63367 m!57445))

(assert (=> b!63367 m!57445))

(declare-fun m!57447 () Bool)

(assert (=> b!63367 m!57447))

(assert (=> b!63369 m!56283))

(assert (=> b!63369 m!57445))

(assert (=> b!63369 m!57445))

(assert (=> b!63369 m!57447))

(assert (=> d!12705 d!13051))

(declare-fun b!63370 () Bool)

(declare-fun e!41546 () Bool)

(declare-fun call!5030 () Bool)

(assert (=> b!63370 (= e!41546 call!5030)))

(declare-fun bm!5027 () Bool)

(assert (=> bm!5027 (= call!5030 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16))) (mask!5992 newMap!16)))))

(declare-fun b!63372 () Bool)

(declare-fun e!41547 () Bool)

(assert (=> b!63372 (= e!41547 call!5030)))

(declare-fun b!63373 () Bool)

(declare-fun e!41548 () Bool)

(assert (=> b!63373 (= e!41548 e!41547)))

(declare-fun c!8567 () Bool)

(assert (=> b!63373 (= c!8567 (validKeyInArray!0 (select (arr!1786 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!63371 () Bool)

(assert (=> b!63371 (= e!41547 e!41546)))

(declare-fun lt!26654 () (_ BitVec 64))

(assert (=> b!63371 (= lt!26654 (select (arr!1786 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!26655 () Unit!1685)

(assert (=> b!63371 (= lt!26655 (lemmaArrayContainsFromImpliesContainsFromZero!0 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16))) lt!26654 #b00000000000000000000000000000000))))

(assert (=> b!63371 (arrayContainsKey!0 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16))) lt!26654 #b00000000000000000000000000000000)))

(declare-fun lt!26653 () Unit!1685)

(assert (=> b!63371 (= lt!26653 lt!26655)))

(declare-fun res!34673 () Bool)

(assert (=> b!63371 (= res!34673 (= (seekEntryOrOpen!0 (select (arr!1786 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16)))) #b00000000000000000000000000000000) (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16))) (mask!5992 newMap!16)) (Found!232 #b00000000000000000000000000000000)))))

(assert (=> b!63371 (=> (not res!34673) (not e!41546))))

(declare-fun d!13053 () Bool)

(declare-fun res!34672 () Bool)

(assert (=> d!13053 (=> res!34672 e!41548)))

(assert (=> d!13053 (= res!34672 (bvsge #b00000000000000000000000000000000 (size!2019 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16))))))))

(assert (=> d!13053 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16))) (mask!5992 newMap!16)) e!41548)))

(assert (= (and d!13053 (not res!34672)) b!63373))

(assert (= (and b!63373 c!8567) b!63371))

(assert (= (and b!63373 (not c!8567)) b!63372))

(assert (= (and b!63371 res!34673) b!63370))

(assert (= (or b!63370 b!63372) bm!5027))

(declare-fun m!57449 () Bool)

(assert (=> bm!5027 m!57449))

(assert (=> b!63373 m!57367))

(assert (=> b!63373 m!57367))

(assert (=> b!63373 m!57369))

(assert (=> b!63371 m!57367))

(declare-fun m!57451 () Bool)

(assert (=> b!63371 m!57451))

(declare-fun m!57453 () Bool)

(assert (=> b!63371 m!57453))

(assert (=> b!63371 m!57367))

(declare-fun m!57455 () Bool)

(assert (=> b!63371 m!57455))

(assert (=> d!12705 d!13053))

(declare-fun d!13055 () Bool)

(assert (=> d!13055 (= (arrayCountValidKeys!0 lt!26283 (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (bvadd (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lt!26658 () Unit!1685)

(declare-fun choose!2 (array!3737 (_ BitVec 32)) Unit!1685)

(assert (=> d!13055 (= lt!26658 (choose!2 lt!26283 (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902))))))

(declare-fun e!41551 () Bool)

(assert (=> d!13055 e!41551))

(declare-fun res!34678 () Bool)

(assert (=> d!13055 (=> (not res!34678) (not e!41551))))

(assert (=> d!13055 (= res!34678 (and (bvsge (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) #b00000000000000000000000000000000) (bvslt (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (size!2019 lt!26283))))))

(assert (=> d!13055 (= (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!26283 (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902))) lt!26658)))

(declare-fun b!63378 () Bool)

(declare-fun res!34679 () Bool)

(assert (=> b!63378 (=> (not res!34679) (not e!41551))))

(assert (=> b!63378 (= res!34679 (validKeyInArray!0 (select (arr!1786 lt!26283) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)))))))

(declare-fun b!63379 () Bool)

(assert (=> b!63379 (= e!41551 (bvslt (size!2019 lt!26283) #b01111111111111111111111111111111))))

(assert (= (and d!13055 res!34678) b!63378))

(assert (= (and b!63378 res!34679) b!63379))

(assert (=> d!13055 m!56273))

(declare-fun m!57457 () Bool)

(assert (=> d!13055 m!57457))

(assert (=> b!63378 m!57429))

(assert (=> b!63378 m!57429))

(assert (=> b!63378 m!57431))

(assert (=> d!12705 d!13055))

(declare-fun d!13057 () Bool)

(declare-fun e!41554 () Bool)

(assert (=> d!13057 e!41554))

(declare-fun res!34682 () Bool)

(assert (=> d!13057 (=> (not res!34682) (not e!41554))))

(assert (=> d!13057 (= res!34682 (and (bvsge (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) #b00000000000000000000000000000000) (bvslt (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (size!2019 (_keys!3718 newMap!16)))))))

(declare-fun lt!26661 () Unit!1685)

(declare-fun choose!41 (array!3737 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1446) Unit!1685)

(assert (=> d!13057 (= lt!26661 (choose!41 (_keys!3718 newMap!16) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) lt!26272 lt!26274))))

(assert (=> d!13057 (bvslt (size!2019 (_keys!3718 newMap!16)) #b01111111111111111111111111111111)))

(assert (=> d!13057 (= (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!3718 newMap!16) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) lt!26272 lt!26274) lt!26661)))

(declare-fun b!63382 () Bool)

(assert (=> b!63382 (= e!41554 (arrayNoDuplicates!0 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16))) lt!26272 lt!26274))))

(assert (= (and d!13057 res!34682) b!63382))

(assert (=> d!13057 m!55481))

(declare-fun m!57459 () Bool)

(assert (=> d!13057 m!57459))

(assert (=> b!63382 m!56281))

(assert (=> b!63382 m!56279))

(assert (=> d!12705 d!13057))

(assert (=> d!12705 d!12651))

(declare-fun d!13059 () Bool)

(declare-fun res!34683 () Bool)

(declare-fun e!41555 () Bool)

(assert (=> d!13059 (=> res!34683 e!41555)))

(assert (=> d!13059 (= res!34683 (= (select (arr!1786 lt!26290) #b00000000000000000000000000000000) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(assert (=> d!13059 (= (arrayContainsKey!0 lt!26290 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) #b00000000000000000000000000000000) e!41555)))

(declare-fun b!63383 () Bool)

(declare-fun e!41556 () Bool)

(assert (=> b!63383 (= e!41555 e!41556)))

(declare-fun res!34684 () Bool)

(assert (=> b!63383 (=> (not res!34684) (not e!41556))))

(assert (=> b!63383 (= res!34684 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2019 lt!26290)))))

(declare-fun b!63384 () Bool)

(assert (=> b!63384 (= e!41556 (arrayContainsKey!0 lt!26290 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!13059 (not res!34683)) b!63383))

(assert (= (and b!63383 res!34684) b!63384))

(declare-fun m!57461 () Bool)

(assert (=> d!13059 m!57461))

(assert (=> b!63384 m!55481))

(declare-fun m!57463 () Bool)

(assert (=> b!63384 m!57463))

(assert (=> d!12705 d!13059))

(declare-fun b!63385 () Bool)

(declare-fun e!41557 () Bool)

(assert (=> b!63385 (= e!41557 (contains!691 lt!26274 (select (arr!1786 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16)))) lt!26272)))))

(declare-fun b!63387 () Bool)

(declare-fun e!41560 () Bool)

(declare-fun e!41558 () Bool)

(assert (=> b!63387 (= e!41560 e!41558)))

(declare-fun res!34687 () Bool)

(assert (=> b!63387 (=> (not res!34687) (not e!41558))))

(assert (=> b!63387 (= res!34687 (not e!41557))))

(declare-fun res!34685 () Bool)

(assert (=> b!63387 (=> (not res!34685) (not e!41557))))

(assert (=> b!63387 (= res!34685 (validKeyInArray!0 (select (arr!1786 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16)))) lt!26272)))))

(declare-fun bm!5028 () Bool)

(declare-fun c!8568 () Bool)

(declare-fun call!5031 () Bool)

(assert (=> bm!5028 (= call!5031 (arrayNoDuplicates!0 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16))) (bvadd lt!26272 #b00000000000000000000000000000001) (ite c!8568 (Cons!1442 (select (arr!1786 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16)))) lt!26272) lt!26274) lt!26274)))))

(declare-fun b!63388 () Bool)

(declare-fun e!41559 () Bool)

(assert (=> b!63388 (= e!41559 call!5031)))

(declare-fun b!63389 () Bool)

(assert (=> b!63389 (= e!41559 call!5031)))

(declare-fun b!63386 () Bool)

(assert (=> b!63386 (= e!41558 e!41559)))

(assert (=> b!63386 (= c!8568 (validKeyInArray!0 (select (arr!1786 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16)))) lt!26272)))))

(declare-fun d!13061 () Bool)

(declare-fun res!34686 () Bool)

(assert (=> d!13061 (=> res!34686 e!41560)))

(assert (=> d!13061 (= res!34686 (bvsge lt!26272 (size!2019 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16))))))))

(assert (=> d!13061 (= (arrayNoDuplicates!0 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16))) lt!26272 lt!26274) e!41560)))

(assert (= (and d!13061 (not res!34686)) b!63387))

(assert (= (and b!63387 res!34685) b!63385))

(assert (= (and b!63387 res!34687) b!63386))

(assert (= (and b!63386 c!8568) b!63388))

(assert (= (and b!63386 (not c!8568)) b!63389))

(assert (= (or b!63388 b!63389) bm!5028))

(declare-fun m!57465 () Bool)

(assert (=> b!63385 m!57465))

(assert (=> b!63385 m!57465))

(declare-fun m!57467 () Bool)

(assert (=> b!63385 m!57467))

(assert (=> b!63387 m!57465))

(assert (=> b!63387 m!57465))

(declare-fun m!57469 () Bool)

(assert (=> b!63387 m!57469))

(assert (=> bm!5028 m!57465))

(declare-fun m!57471 () Bool)

(assert (=> bm!5028 m!57471))

(assert (=> b!63386 m!57465))

(assert (=> b!63386 m!57465))

(assert (=> b!63386 m!57469))

(assert (=> d!12705 d!13061))

(declare-fun b!63390 () Bool)

(declare-fun res!34690 () Bool)

(declare-fun e!41562 () Bool)

(assert (=> b!63390 (=> (not res!34690) (not e!41562))))

(declare-fun e!41573 () Bool)

(assert (=> b!63390 (= res!34690 e!41573)))

(declare-fun c!8574 () Bool)

(assert (=> b!63390 (= c!8574 (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!63391 () Bool)

(declare-fun e!41567 () Bool)

(declare-fun lt!26667 () ListLongMap!1363)

(assert (=> b!63391 (= e!41567 (= (apply!68 lt!26667 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1999 newMap!16)))))

(declare-fun b!63392 () Bool)

(declare-fun e!41571 () Bool)

(assert (=> b!63392 (= e!41571 (= (apply!68 lt!26667 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1999 newMap!16)))))

(declare-fun d!13063 () Bool)

(assert (=> d!13063 e!41562))

(declare-fun res!34689 () Bool)

(assert (=> d!13063 (=> (not res!34689) (not e!41562))))

(assert (=> d!13063 (= res!34689 (or (bvsge #b00000000000000000000000000000000 (size!2019 lt!26269)) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2019 lt!26269)))))))

(declare-fun lt!26669 () ListLongMap!1363)

(assert (=> d!13063 (= lt!26667 lt!26669)))

(declare-fun lt!26675 () Unit!1685)

(declare-fun e!41569 () Unit!1685)

(assert (=> d!13063 (= lt!26675 e!41569)))

(declare-fun c!8571 () Bool)

(declare-fun e!41561 () Bool)

(assert (=> d!13063 (= c!8571 e!41561)))

(declare-fun res!34695 () Bool)

(assert (=> d!13063 (=> (not res!34695) (not e!41561))))

(assert (=> d!13063 (= res!34695 (bvslt #b00000000000000000000000000000000 (size!2019 lt!26269)))))

(declare-fun e!41570 () ListLongMap!1363)

(assert (=> d!13063 (= lt!26669 e!41570)))

(declare-fun c!8572 () Bool)

(assert (=> d!13063 (= c!8572 (and (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!13063 (validMask!0 (mask!5992 newMap!16))))

(assert (=> d!13063 (= (getCurrentListMap!393 lt!26269 lt!26279 (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) lt!26667)))

(declare-fun b!63393 () Bool)

(declare-fun res!34694 () Bool)

(assert (=> b!63393 (=> (not res!34694) (not e!41562))))

(declare-fun e!41568 () Bool)

(assert (=> b!63393 (= res!34694 e!41568)))

(declare-fun res!34691 () Bool)

(assert (=> b!63393 (=> res!34691 e!41568)))

(declare-fun e!41566 () Bool)

(assert (=> b!63393 (= res!34691 (not e!41566))))

(declare-fun res!34692 () Bool)

(assert (=> b!63393 (=> (not res!34692) (not e!41566))))

(assert (=> b!63393 (= res!34692 (bvslt #b00000000000000000000000000000000 (size!2019 lt!26269)))))

(declare-fun bm!5029 () Bool)

(declare-fun call!5035 () ListLongMap!1363)

(declare-fun call!5036 () ListLongMap!1363)

(assert (=> bm!5029 (= call!5035 call!5036)))

(declare-fun b!63394 () Bool)

(declare-fun e!41565 () ListLongMap!1363)

(declare-fun call!5037 () ListLongMap!1363)

(assert (=> b!63394 (= e!41565 call!5037)))

(declare-fun bm!5030 () Bool)

(declare-fun call!5034 () Bool)

(assert (=> bm!5030 (= call!5034 (contains!690 lt!26667 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63395 () Bool)

(assert (=> b!63395 (= e!41573 (not call!5034))))

(declare-fun bm!5031 () Bool)

(declare-fun call!5038 () ListLongMap!1363)

(declare-fun call!5033 () ListLongMap!1363)

(assert (=> bm!5031 (= call!5038 call!5033)))

(declare-fun bm!5032 () Bool)

(declare-fun c!8573 () Bool)

(assert (=> bm!5032 (= call!5033 (+!83 (ite c!8572 call!5036 (ite c!8573 call!5035 call!5037)) (ite (or c!8572 c!8573) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(declare-fun b!63396 () Bool)

(assert (=> b!63396 (= e!41561 (validKeyInArray!0 (select (arr!1786 lt!26269) #b00000000000000000000000000000000)))))

(declare-fun b!63397 () Bool)

(assert (=> b!63397 (= e!41570 (+!83 call!5033 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))

(declare-fun bm!5033 () Bool)

(declare-fun call!5032 () Bool)

(assert (=> bm!5033 (= call!5032 (contains!690 lt!26667 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63398 () Bool)

(declare-fun Unit!1738 () Unit!1685)

(assert (=> b!63398 (= e!41569 Unit!1738)))

(declare-fun b!63399 () Bool)

(assert (=> b!63399 (= e!41566 (validKeyInArray!0 (select (arr!1786 lt!26269) #b00000000000000000000000000000000)))))

(declare-fun b!63400 () Bool)

(declare-fun c!8569 () Bool)

(assert (=> b!63400 (= c!8569 (and (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!41572 () ListLongMap!1363)

(assert (=> b!63400 (= e!41572 e!41565)))

(declare-fun b!63401 () Bool)

(declare-fun e!41563 () Bool)

(assert (=> b!63401 (= e!41562 e!41563)))

(declare-fun c!8570 () Bool)

(assert (=> b!63401 (= c!8570 (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!63402 () Bool)

(assert (=> b!63402 (= e!41570 e!41572)))

(assert (=> b!63402 (= c!8573 (and (not (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1966 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!63403 () Bool)

(declare-fun e!41564 () Bool)

(assert (=> b!63403 (= e!41568 e!41564)))

(declare-fun res!34693 () Bool)

(assert (=> b!63403 (=> (not res!34693) (not e!41564))))

(assert (=> b!63403 (= res!34693 (contains!690 lt!26667 (select (arr!1786 lt!26269) #b00000000000000000000000000000000)))))

(assert (=> b!63403 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2019 lt!26269)))))

(declare-fun b!63404 () Bool)

(assert (=> b!63404 (= e!41563 (not call!5032))))

(declare-fun bm!5034 () Bool)

(assert (=> bm!5034 (= call!5037 call!5035)))

(declare-fun b!63405 () Bool)

(assert (=> b!63405 (= e!41573 e!41571)))

(declare-fun res!34696 () Bool)

(assert (=> b!63405 (= res!34696 call!5034)))

(assert (=> b!63405 (=> (not res!34696) (not e!41571))))

(declare-fun bm!5035 () Bool)

(assert (=> bm!5035 (= call!5036 (getCurrentListMapNoExtraKeys!46 lt!26269 lt!26279 (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun b!63406 () Bool)

(assert (=> b!63406 (= e!41564 (= (apply!68 lt!26667 (select (arr!1786 lt!26269) #b00000000000000000000000000000000)) (get!1089 (select (arr!1787 lt!26279) #b00000000000000000000000000000000) (dynLambda!312 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!63406 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2020 lt!26279)))))

(assert (=> b!63406 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2019 lt!26269)))))

(declare-fun b!63407 () Bool)

(assert (=> b!63407 (= e!41565 call!5038)))

(declare-fun b!63408 () Bool)

(declare-fun lt!26681 () Unit!1685)

(assert (=> b!63408 (= e!41569 lt!26681)))

(declare-fun lt!26666 () ListLongMap!1363)

(assert (=> b!63408 (= lt!26666 (getCurrentListMapNoExtraKeys!46 lt!26269 lt!26279 (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26672 () (_ BitVec 64))

(assert (=> b!63408 (= lt!26672 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26679 () (_ BitVec 64))

(assert (=> b!63408 (= lt!26679 (select (arr!1786 lt!26269) #b00000000000000000000000000000000))))

(declare-fun lt!26673 () Unit!1685)

(assert (=> b!63408 (= lt!26673 (addStillContains!44 lt!26666 lt!26672 (zeroValue!1999 newMap!16) lt!26679))))

(assert (=> b!63408 (contains!690 (+!83 lt!26666 (tuple2!2053 lt!26672 (zeroValue!1999 newMap!16))) lt!26679)))

(declare-fun lt!26665 () Unit!1685)

(assert (=> b!63408 (= lt!26665 lt!26673)))

(declare-fun lt!26663 () ListLongMap!1363)

(assert (=> b!63408 (= lt!26663 (getCurrentListMapNoExtraKeys!46 lt!26269 lt!26279 (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26674 () (_ BitVec 64))

(assert (=> b!63408 (= lt!26674 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26678 () (_ BitVec 64))

(assert (=> b!63408 (= lt!26678 (select (arr!1786 lt!26269) #b00000000000000000000000000000000))))

(declare-fun lt!26670 () Unit!1685)

(assert (=> b!63408 (= lt!26670 (addApplyDifferent!44 lt!26663 lt!26674 (minValue!1999 newMap!16) lt!26678))))

(assert (=> b!63408 (= (apply!68 (+!83 lt!26663 (tuple2!2053 lt!26674 (minValue!1999 newMap!16))) lt!26678) (apply!68 lt!26663 lt!26678))))

(declare-fun lt!26662 () Unit!1685)

(assert (=> b!63408 (= lt!26662 lt!26670)))

(declare-fun lt!26671 () ListLongMap!1363)

(assert (=> b!63408 (= lt!26671 (getCurrentListMapNoExtraKeys!46 lt!26269 lt!26279 (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26676 () (_ BitVec 64))

(assert (=> b!63408 (= lt!26676 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26664 () (_ BitVec 64))

(assert (=> b!63408 (= lt!26664 (select (arr!1786 lt!26269) #b00000000000000000000000000000000))))

(declare-fun lt!26683 () Unit!1685)

(assert (=> b!63408 (= lt!26683 (addApplyDifferent!44 lt!26671 lt!26676 (zeroValue!1999 newMap!16) lt!26664))))

(assert (=> b!63408 (= (apply!68 (+!83 lt!26671 (tuple2!2053 lt!26676 (zeroValue!1999 newMap!16))) lt!26664) (apply!68 lt!26671 lt!26664))))

(declare-fun lt!26677 () Unit!1685)

(assert (=> b!63408 (= lt!26677 lt!26683)))

(declare-fun lt!26668 () ListLongMap!1363)

(assert (=> b!63408 (= lt!26668 (getCurrentListMapNoExtraKeys!46 lt!26269 lt!26279 (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26680 () (_ BitVec 64))

(assert (=> b!63408 (= lt!26680 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26682 () (_ BitVec 64))

(assert (=> b!63408 (= lt!26682 (select (arr!1786 lt!26269) #b00000000000000000000000000000000))))

(assert (=> b!63408 (= lt!26681 (addApplyDifferent!44 lt!26668 lt!26680 (minValue!1999 newMap!16) lt!26682))))

(assert (=> b!63408 (= (apply!68 (+!83 lt!26668 (tuple2!2053 lt!26680 (minValue!1999 newMap!16))) lt!26682) (apply!68 lt!26668 lt!26682))))

(declare-fun b!63409 () Bool)

(assert (=> b!63409 (= e!41563 e!41567)))

(declare-fun res!34688 () Bool)

(assert (=> b!63409 (= res!34688 call!5032)))

(assert (=> b!63409 (=> (not res!34688) (not e!41567))))

(declare-fun b!63410 () Bool)

(assert (=> b!63410 (= e!41572 call!5038)))

(assert (= (and d!13063 c!8572) b!63397))

(assert (= (and d!13063 (not c!8572)) b!63402))

(assert (= (and b!63402 c!8573) b!63410))

(assert (= (and b!63402 (not c!8573)) b!63400))

(assert (= (and b!63400 c!8569) b!63407))

(assert (= (and b!63400 (not c!8569)) b!63394))

(assert (= (or b!63407 b!63394) bm!5034))

(assert (= (or b!63410 bm!5034) bm!5029))

(assert (= (or b!63410 b!63407) bm!5031))

(assert (= (or b!63397 bm!5029) bm!5035))

(assert (= (or b!63397 bm!5031) bm!5032))

(assert (= (and d!13063 res!34695) b!63396))

(assert (= (and d!13063 c!8571) b!63408))

(assert (= (and d!13063 (not c!8571)) b!63398))

(assert (= (and d!13063 res!34689) b!63393))

(assert (= (and b!63393 res!34692) b!63399))

(assert (= (and b!63393 (not res!34691)) b!63403))

(assert (= (and b!63403 res!34693) b!63406))

(assert (= (and b!63393 res!34694) b!63390))

(assert (= (and b!63390 c!8574) b!63405))

(assert (= (and b!63390 (not c!8574)) b!63395))

(assert (= (and b!63405 res!34696) b!63392))

(assert (= (or b!63405 b!63395) bm!5030))

(assert (= (and b!63390 res!34690) b!63401))

(assert (= (and b!63401 c!8570) b!63409))

(assert (= (and b!63401 (not c!8570)) b!63404))

(assert (= (and b!63409 res!34688) b!63391))

(assert (= (or b!63409 b!63404) bm!5033))

(declare-fun b_lambda!2823 () Bool)

(assert (=> (not b_lambda!2823) (not b!63406)))

(assert (=> b!63406 t!4844))

(declare-fun b_and!3881 () Bool)

(assert (= b_and!3877 (and (=> t!4844 result!2455) b_and!3881)))

(assert (=> b!63406 t!4846))

(declare-fun b_and!3883 () Bool)

(assert (= b_and!3879 (and (=> t!4846 result!2457) b_and!3883)))

(declare-fun m!57473 () Bool)

(assert (=> bm!5035 m!57473))

(declare-fun m!57475 () Bool)

(assert (=> b!63397 m!57475))

(declare-fun m!57477 () Bool)

(assert (=> b!63399 m!57477))

(assert (=> b!63399 m!57477))

(declare-fun m!57479 () Bool)

(assert (=> b!63399 m!57479))

(declare-fun m!57481 () Bool)

(assert (=> bm!5033 m!57481))

(assert (=> b!63403 m!57477))

(assert (=> b!63403 m!57477))

(declare-fun m!57483 () Bool)

(assert (=> b!63403 m!57483))

(declare-fun m!57485 () Bool)

(assert (=> b!63391 m!57485))

(declare-fun m!57487 () Bool)

(assert (=> bm!5032 m!57487))

(assert (=> b!63396 m!57477))

(assert (=> b!63396 m!57477))

(assert (=> b!63396 m!57479))

(declare-fun m!57489 () Bool)

(assert (=> bm!5030 m!57489))

(assert (=> b!63406 m!57477))

(declare-fun m!57491 () Bool)

(assert (=> b!63406 m!57491))

(assert (=> b!63406 m!55857))

(declare-fun m!57493 () Bool)

(assert (=> b!63406 m!57493))

(assert (=> b!63406 m!57477))

(assert (=> b!63406 m!57493))

(assert (=> b!63406 m!55857))

(declare-fun m!57495 () Bool)

(assert (=> b!63406 m!57495))

(declare-fun m!57497 () Bool)

(assert (=> b!63392 m!57497))

(declare-fun m!57499 () Bool)

(assert (=> b!63408 m!57499))

(assert (=> b!63408 m!57473))

(declare-fun m!57501 () Bool)

(assert (=> b!63408 m!57501))

(assert (=> b!63408 m!57501))

(declare-fun m!57503 () Bool)

(assert (=> b!63408 m!57503))

(declare-fun m!57505 () Bool)

(assert (=> b!63408 m!57505))

(declare-fun m!57507 () Bool)

(assert (=> b!63408 m!57507))

(declare-fun m!57509 () Bool)

(assert (=> b!63408 m!57509))

(declare-fun m!57511 () Bool)

(assert (=> b!63408 m!57511))

(declare-fun m!57513 () Bool)

(assert (=> b!63408 m!57513))

(declare-fun m!57515 () Bool)

(assert (=> b!63408 m!57515))

(assert (=> b!63408 m!57477))

(declare-fun m!57517 () Bool)

(assert (=> b!63408 m!57517))

(declare-fun m!57519 () Bool)

(assert (=> b!63408 m!57519))

(declare-fun m!57521 () Bool)

(assert (=> b!63408 m!57521))

(assert (=> b!63408 m!57519))

(declare-fun m!57523 () Bool)

(assert (=> b!63408 m!57523))

(assert (=> b!63408 m!57507))

(declare-fun m!57525 () Bool)

(assert (=> b!63408 m!57525))

(assert (=> b!63408 m!57513))

(declare-fun m!57527 () Bool)

(assert (=> b!63408 m!57527))

(assert (=> d!13063 m!55783))

(assert (=> d!12705 d!13063))

(declare-fun d!13065 () Bool)

(declare-fun e!41576 () Bool)

(assert (=> d!13065 e!41576))

(declare-fun res!34699 () Bool)

(assert (=> d!13065 (=> (not res!34699) (not e!41576))))

(assert (=> d!13065 (= res!34699 (and (bvsge (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) #b00000000000000000000000000000000) (bvslt (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (size!2019 (_keys!3718 newMap!16)))))))

(declare-fun lt!26686 () Unit!1685)

(declare-fun choose!102 ((_ BitVec 64) array!3737 (_ BitVec 32) (_ BitVec 32)) Unit!1685)

(assert (=> d!13065 (= lt!26686 (choose!102 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (_keys!3718 newMap!16) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (mask!5992 newMap!16)))))

(assert (=> d!13065 (validMask!0 (mask!5992 newMap!16))))

(assert (=> d!13065 (= (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (_keys!3718 newMap!16) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (mask!5992 newMap!16)) lt!26686)))

(declare-fun b!63413 () Bool)

(assert (=> b!63413 (= e!41576 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3738 (store (arr!1786 (_keys!3718 newMap!16)) (ite c!8267 (index!3056 lt!25902) (index!3053 lt!25902)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) (size!2019 (_keys!3718 newMap!16))) (mask!5992 newMap!16)))))

(assert (= (and d!13065 res!34699) b!63413))

(assert (=> d!13065 m!55481))

(declare-fun m!57529 () Bool)

(assert (=> d!13065 m!57529))

(assert (=> d!13065 m!55783))

(assert (=> b!63413 m!56281))

(assert (=> b!63413 m!56285))

(assert (=> d!12705 d!13065))

(declare-fun d!13067 () Bool)

(declare-fun e!41577 () Bool)

(assert (=> d!13067 e!41577))

(declare-fun res!34700 () Bool)

(assert (=> d!13067 (=> res!34700 e!41577)))

(declare-fun lt!26690 () Bool)

(assert (=> d!13067 (= res!34700 (not lt!26690))))

(declare-fun lt!26688 () Bool)

(assert (=> d!13067 (= lt!26690 lt!26688)))

(declare-fun lt!26689 () Unit!1685)

(declare-fun e!41578 () Unit!1685)

(assert (=> d!13067 (= lt!26689 e!41578)))

(declare-fun c!8575 () Bool)

(assert (=> d!13067 (= c!8575 lt!26688)))

(assert (=> d!13067 (= lt!26688 (containsKey!128 (toList!697 lt!26039) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!13067 (= (contains!690 lt!26039 #b0000000000000000000000000000000000000000000000000000000000000000) lt!26690)))

(declare-fun b!63414 () Bool)

(declare-fun lt!26687 () Unit!1685)

(assert (=> b!63414 (= e!41578 lt!26687)))

(assert (=> b!63414 (= lt!26687 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 lt!26039) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63414 (isDefined!78 (getValueByKey!124 (toList!697 lt!26039) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63415 () Bool)

(declare-fun Unit!1739 () Unit!1685)

(assert (=> b!63415 (= e!41578 Unit!1739)))

(declare-fun b!63416 () Bool)

(assert (=> b!63416 (= e!41577 (isDefined!78 (getValueByKey!124 (toList!697 lt!26039) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!13067 c!8575) b!63414))

(assert (= (and d!13067 (not c!8575)) b!63415))

(assert (= (and d!13067 (not res!34700)) b!63416))

(declare-fun m!57531 () Bool)

(assert (=> d!13067 m!57531))

(declare-fun m!57533 () Bool)

(assert (=> b!63414 m!57533))

(declare-fun m!57535 () Bool)

(assert (=> b!63414 m!57535))

(assert (=> b!63414 m!57535))

(declare-fun m!57537 () Bool)

(assert (=> b!63414 m!57537))

(assert (=> b!63416 m!57535))

(assert (=> b!63416 m!57535))

(assert (=> b!63416 m!57537))

(assert (=> bm!4909 d!13067))

(declare-fun d!13069 () Bool)

(assert (=> d!13069 (= (get!1092 (getValueByKey!124 (toList!697 lt!25973) lt!25988)) (v!2418 (getValueByKey!124 (toList!697 lt!25973) lt!25988)))))

(assert (=> d!12665 d!13069))

(declare-fun d!13071 () Bool)

(declare-fun c!8576 () Bool)

(assert (=> d!13071 (= c!8576 (and ((_ is Cons!1443) (toList!697 lt!25973)) (= (_1!1037 (h!2026 (toList!697 lt!25973))) lt!25988)))))

(declare-fun e!41579 () Option!130)

(assert (=> d!13071 (= (getValueByKey!124 (toList!697 lt!25973) lt!25988) e!41579)))

(declare-fun b!63417 () Bool)

(assert (=> b!63417 (= e!41579 (Some!129 (_2!1037 (h!2026 (toList!697 lt!25973)))))))

(declare-fun b!63420 () Bool)

(declare-fun e!41580 () Option!130)

(assert (=> b!63420 (= e!41580 None!128)))

(declare-fun b!63418 () Bool)

(assert (=> b!63418 (= e!41579 e!41580)))

(declare-fun c!8577 () Bool)

(assert (=> b!63418 (= c!8577 (and ((_ is Cons!1443) (toList!697 lt!25973)) (not (= (_1!1037 (h!2026 (toList!697 lt!25973))) lt!25988))))))

(declare-fun b!63419 () Bool)

(assert (=> b!63419 (= e!41580 (getValueByKey!124 (t!4832 (toList!697 lt!25973)) lt!25988))))

(assert (= (and d!13071 c!8576) b!63417))

(assert (= (and d!13071 (not c!8576)) b!63418))

(assert (= (and b!63418 c!8577) b!63419))

(assert (= (and b!63418 (not c!8577)) b!63420))

(declare-fun m!57539 () Bool)

(assert (=> b!63419 m!57539))

(assert (=> d!12665 d!13071))

(declare-fun d!13073 () Bool)

(declare-fun c!8578 () Bool)

(assert (=> d!13073 (= c!8578 (and ((_ is Cons!1443) (toList!697 lt!26145)) (= (_1!1037 (h!2026 (toList!697 lt!26145))) (_1!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(declare-fun e!41581 () Option!130)

(assert (=> d!13073 (= (getValueByKey!124 (toList!697 lt!26145) (_1!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))) e!41581)))

(declare-fun b!63421 () Bool)

(assert (=> b!63421 (= e!41581 (Some!129 (_2!1037 (h!2026 (toList!697 lt!26145)))))))

(declare-fun b!63424 () Bool)

(declare-fun e!41582 () Option!130)

(assert (=> b!63424 (= e!41582 None!128)))

(declare-fun b!63422 () Bool)

(assert (=> b!63422 (= e!41581 e!41582)))

(declare-fun c!8579 () Bool)

(assert (=> b!63422 (= c!8579 (and ((_ is Cons!1443) (toList!697 lt!26145)) (not (= (_1!1037 (h!2026 (toList!697 lt!26145))) (_1!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))))))

(declare-fun b!63423 () Bool)

(assert (=> b!63423 (= e!41582 (getValueByKey!124 (t!4832 (toList!697 lt!26145)) (_1!1037 (tuple2!2053 lt!25982 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(assert (= (and d!13073 c!8578) b!63421))

(assert (= (and d!13073 (not c!8578)) b!63422))

(assert (= (and b!63422 c!8579) b!63423))

(assert (= (and b!63422 (not c!8579)) b!63424))

(declare-fun m!57541 () Bool)

(assert (=> b!63423 m!57541))

(assert (=> b!62612 d!13073))

(declare-fun d!13075 () Bool)

(assert (=> d!13075 (= (apply!68 lt!26039 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1092 (getValueByKey!124 (toList!697 lt!26039) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2760 () Bool)

(assert (= bs!2760 d!13075))

(assert (=> bs!2760 m!57535))

(assert (=> bs!2760 m!57535))

(declare-fun m!57543 () Bool)

(assert (=> bs!2760 m!57543))

(assert (=> b!62505 d!13075))

(declare-fun d!13077 () Bool)

(assert (=> d!13077 (= (apply!68 lt!26039 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)) (get!1092 (getValueByKey!124 (toList!697 lt!26039) (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2761 () Bool)

(assert (= bs!2761 d!13077))

(assert (=> bs!2761 m!55803))

(assert (=> bs!2761 m!57223))

(assert (=> bs!2761 m!57223))

(declare-fun m!57545 () Bool)

(assert (=> bs!2761 m!57545))

(assert (=> b!62519 d!13077))

(declare-fun c!8580 () Bool)

(declare-fun d!13079 () Bool)

(assert (=> d!13079 (= c!8580 ((_ is ValueCellFull!863) (select (arr!1787 (ite c!8266 (_values!2070 newMap!16) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (index!3054 lt!25902) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16))))) #b00000000000000000000000000000000)))))

(declare-fun e!41583 () V!2865)

(assert (=> d!13079 (= (get!1089 (select (arr!1787 (ite c!8266 (_values!2070 newMap!16) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (index!3054 lt!25902) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!312 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!41583)))

(declare-fun b!63425 () Bool)

(assert (=> b!63425 (= e!41583 (get!1090 (select (arr!1787 (ite c!8266 (_values!2070 newMap!16) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (index!3054 lt!25902) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!312 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!63426 () Bool)

(assert (=> b!63426 (= e!41583 (get!1091 (select (arr!1787 (ite c!8266 (_values!2070 newMap!16) (array!3740 (store (arr!1787 (_values!2070 newMap!16)) (index!3054 lt!25902) (ValueCellFull!863 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2020 (_values!2070 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!312 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!13079 c!8580) b!63425))

(assert (= (and d!13079 (not c!8580)) b!63426))

(assert (=> b!63425 m!55859))

(assert (=> b!63425 m!55857))

(declare-fun m!57547 () Bool)

(assert (=> b!63425 m!57547))

(assert (=> b!63426 m!55859))

(assert (=> b!63426 m!55857))

(declare-fun m!57549 () Bool)

(assert (=> b!63426 m!57549))

(assert (=> b!62519 d!13079))

(declare-fun d!13081 () Bool)

(declare-fun e!41584 () Bool)

(assert (=> d!13081 e!41584))

(declare-fun res!34701 () Bool)

(assert (=> d!13081 (=> res!34701 e!41584)))

(declare-fun lt!26694 () Bool)

(assert (=> d!13081 (= res!34701 (not lt!26694))))

(declare-fun lt!26692 () Bool)

(assert (=> d!13081 (= lt!26694 lt!26692)))

(declare-fun lt!26693 () Unit!1685)

(declare-fun e!41585 () Unit!1685)

(assert (=> d!13081 (= lt!26693 e!41585)))

(declare-fun c!8581 () Bool)

(assert (=> d!13081 (= c!8581 lt!26692)))

(assert (=> d!13081 (= lt!26692 (containsKey!128 (toList!697 lt!26151) (_1!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(assert (=> d!13081 (= (contains!690 lt!26151 (_1!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!26694)))

(declare-fun b!63427 () Bool)

(declare-fun lt!26691 () Unit!1685)

(assert (=> b!63427 (= e!41585 lt!26691)))

(assert (=> b!63427 (= lt!26691 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 lt!26151) (_1!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(assert (=> b!63427 (isDefined!78 (getValueByKey!124 (toList!697 lt!26151) (_1!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun b!63428 () Bool)

(declare-fun Unit!1740 () Unit!1685)

(assert (=> b!63428 (= e!41585 Unit!1740)))

(declare-fun b!63429 () Bool)

(assert (=> b!63429 (= e!41584 (isDefined!78 (getValueByKey!124 (toList!697 lt!26151) (_1!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(assert (= (and d!13081 c!8581) b!63427))

(assert (= (and d!13081 (not c!8581)) b!63428))

(assert (= (and d!13081 (not res!34701)) b!63429))

(declare-fun m!57551 () Bool)

(assert (=> d!13081 m!57551))

(declare-fun m!57553 () Bool)

(assert (=> b!63427 m!57553))

(assert (=> b!63427 m!56119))

(assert (=> b!63427 m!56119))

(declare-fun m!57555 () Bool)

(assert (=> b!63427 m!57555))

(assert (=> b!63429 m!56119))

(assert (=> b!63429 m!56119))

(assert (=> b!63429 m!57555))

(assert (=> d!12669 d!13081))

(declare-fun c!8582 () Bool)

(declare-fun d!13083 () Bool)

(assert (=> d!13083 (= c!8582 (and ((_ is Cons!1443) lt!26149) (= (_1!1037 (h!2026 lt!26149)) (_1!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(declare-fun e!41586 () Option!130)

(assert (=> d!13083 (= (getValueByKey!124 lt!26149 (_1!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))) e!41586)))

(declare-fun b!63430 () Bool)

(assert (=> b!63430 (= e!41586 (Some!129 (_2!1037 (h!2026 lt!26149))))))

(declare-fun b!63433 () Bool)

(declare-fun e!41587 () Option!130)

(assert (=> b!63433 (= e!41587 None!128)))

(declare-fun b!63431 () Bool)

(assert (=> b!63431 (= e!41586 e!41587)))

(declare-fun c!8583 () Bool)

(assert (=> b!63431 (= c!8583 (and ((_ is Cons!1443) lt!26149) (not (= (_1!1037 (h!2026 lt!26149)) (_1!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))))))

(declare-fun b!63432 () Bool)

(assert (=> b!63432 (= e!41587 (getValueByKey!124 (t!4832 lt!26149) (_1!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(assert (= (and d!13083 c!8582) b!63430))

(assert (= (and d!13083 (not c!8582)) b!63431))

(assert (= (and b!63431 c!8583) b!63432))

(assert (= (and b!63431 (not c!8583)) b!63433))

(declare-fun m!57557 () Bool)

(assert (=> b!63432 m!57557))

(assert (=> d!12669 d!13083))

(declare-fun d!13085 () Bool)

(assert (=> d!13085 (= (getValueByKey!124 lt!26149 (_1!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))) (Some!129 (_2!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun lt!26695 () Unit!1685)

(assert (=> d!13085 (= lt!26695 (choose!347 lt!26149 (_1!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun e!41588 () Bool)

(assert (=> d!13085 e!41588))

(declare-fun res!34702 () Bool)

(assert (=> d!13085 (=> (not res!34702) (not e!41588))))

(assert (=> d!13085 (= res!34702 (isStrictlySorted!281 lt!26149))))

(assert (=> d!13085 (= (lemmaContainsTupThenGetReturnValue!44 lt!26149 (_1!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!26695)))

(declare-fun b!63434 () Bool)

(declare-fun res!34703 () Bool)

(assert (=> b!63434 (=> (not res!34703) (not e!41588))))

(assert (=> b!63434 (= res!34703 (containsKey!128 lt!26149 (_1!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun b!63435 () Bool)

(assert (=> b!63435 (= e!41588 (contains!692 lt!26149 (tuple2!2053 (_1!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(assert (= (and d!13085 res!34702) b!63434))

(assert (= (and b!63434 res!34703) b!63435))

(assert (=> d!13085 m!56113))

(declare-fun m!57559 () Bool)

(assert (=> d!13085 m!57559))

(declare-fun m!57561 () Bool)

(assert (=> d!13085 m!57561))

(declare-fun m!57563 () Bool)

(assert (=> b!63434 m!57563))

(declare-fun m!57565 () Bool)

(assert (=> b!63435 m!57565))

(assert (=> d!12669 d!13085))

(declare-fun b!63436 () Bool)

(declare-fun e!41589 () List!1447)

(declare-fun call!5041 () List!1447)

(assert (=> b!63436 (= e!41589 call!5041)))

(declare-fun bm!5036 () Bool)

(declare-fun call!5039 () List!1447)

(assert (=> bm!5036 (= call!5041 call!5039)))

(declare-fun d!13087 () Bool)

(declare-fun e!41591 () Bool)

(assert (=> d!13087 e!41591))

(declare-fun res!34705 () Bool)

(assert (=> d!13087 (=> (not res!34705) (not e!41591))))

(declare-fun lt!26696 () List!1447)

(assert (=> d!13087 (= res!34705 (isStrictlySorted!281 lt!26696))))

(declare-fun e!41593 () List!1447)

(assert (=> d!13087 (= lt!26696 e!41593)))

(declare-fun c!8584 () Bool)

(assert (=> d!13087 (= c!8584 (and ((_ is Cons!1443) (toList!697 lt!25981)) (bvslt (_1!1037 (h!2026 (toList!697 lt!25981))) (_1!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(assert (=> d!13087 (isStrictlySorted!281 (toList!697 lt!25981))))

(assert (=> d!13087 (= (insertStrictlySorted!47 (toList!697 lt!25981) (_1!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!26696)))

(declare-fun c!8587 () Bool)

(declare-fun b!63437 () Bool)

(declare-fun e!41592 () List!1447)

(declare-fun c!8585 () Bool)

(assert (=> b!63437 (= e!41592 (ite c!8585 (t!4832 (toList!697 lt!25981)) (ite c!8587 (Cons!1443 (h!2026 (toList!697 lt!25981)) (t!4832 (toList!697 lt!25981))) Nil!1444)))))

(declare-fun b!63438 () Bool)

(declare-fun e!41590 () List!1447)

(declare-fun call!5040 () List!1447)

(assert (=> b!63438 (= e!41590 call!5040)))

(declare-fun b!63439 () Bool)

(assert (=> b!63439 (= e!41591 (contains!692 lt!26696 (tuple2!2053 (_1!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(declare-fun b!63440 () Bool)

(declare-fun res!34704 () Bool)

(assert (=> b!63440 (=> (not res!34704) (not e!41591))))

(assert (=> b!63440 (= res!34704 (containsKey!128 lt!26696 (_1!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun bm!5037 () Bool)

(assert (=> bm!5037 (= call!5039 ($colon$colon!61 e!41592 (ite c!8584 (h!2026 (toList!697 lt!25981)) (tuple2!2053 (_1!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))))))

(declare-fun c!8586 () Bool)

(assert (=> bm!5037 (= c!8586 c!8584)))

(declare-fun b!63441 () Bool)

(assert (=> b!63441 (= e!41593 e!41589)))

(assert (=> b!63441 (= c!8585 (and ((_ is Cons!1443) (toList!697 lt!25981)) (= (_1!1037 (h!2026 (toList!697 lt!25981))) (_1!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(declare-fun b!63442 () Bool)

(assert (=> b!63442 (= c!8587 (and ((_ is Cons!1443) (toList!697 lt!25981)) (bvsgt (_1!1037 (h!2026 (toList!697 lt!25981))) (_1!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(assert (=> b!63442 (= e!41589 e!41590)))

(declare-fun b!63443 () Bool)

(assert (=> b!63443 (= e!41593 call!5039)))

(declare-fun b!63444 () Bool)

(assert (=> b!63444 (= e!41592 (insertStrictlySorted!47 (t!4832 (toList!697 lt!25981)) (_1!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun bm!5038 () Bool)

(assert (=> bm!5038 (= call!5040 call!5041)))

(declare-fun b!63445 () Bool)

(assert (=> b!63445 (= e!41590 call!5040)))

(assert (= (and d!13087 c!8584) b!63443))

(assert (= (and d!13087 (not c!8584)) b!63441))

(assert (= (and b!63441 c!8585) b!63436))

(assert (= (and b!63441 (not c!8585)) b!63442))

(assert (= (and b!63442 c!8587) b!63438))

(assert (= (and b!63442 (not c!8587)) b!63445))

(assert (= (or b!63438 b!63445) bm!5038))

(assert (= (or b!63436 bm!5038) bm!5036))

(assert (= (or b!63443 bm!5036) bm!5037))

(assert (= (and bm!5037 c!8586) b!63444))

(assert (= (and bm!5037 (not c!8586)) b!63437))

(assert (= (and d!13087 res!34705) b!63440))

(assert (= (and b!63440 res!34704) b!63439))

(declare-fun m!57567 () Bool)

(assert (=> b!63440 m!57567))

(declare-fun m!57569 () Bool)

(assert (=> bm!5037 m!57569))

(declare-fun m!57571 () Bool)

(assert (=> b!63439 m!57571))

(declare-fun m!57573 () Bool)

(assert (=> d!13087 m!57573))

(declare-fun m!57575 () Bool)

(assert (=> d!13087 m!57575))

(declare-fun m!57577 () Bool)

(assert (=> b!63444 m!57577))

(assert (=> d!12669 d!13087))

(declare-fun c!8588 () Bool)

(declare-fun d!13089 () Bool)

(assert (=> d!13089 (= c!8588 (and ((_ is Cons!1443) (toList!697 lt!26120)) (= (_1!1037 (h!2026 (toList!697 lt!26120))) (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!41594 () Option!130)

(assert (=> d!13089 (= (getValueByKey!124 (toList!697 lt!26120) (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!41594)))

(declare-fun b!63446 () Bool)

(assert (=> b!63446 (= e!41594 (Some!129 (_2!1037 (h!2026 (toList!697 lt!26120)))))))

(declare-fun b!63449 () Bool)

(declare-fun e!41595 () Option!130)

(assert (=> b!63449 (= e!41595 None!128)))

(declare-fun b!63447 () Bool)

(assert (=> b!63447 (= e!41594 e!41595)))

(declare-fun c!8589 () Bool)

(assert (=> b!63447 (= c!8589 (and ((_ is Cons!1443) (toList!697 lt!26120)) (not (= (_1!1037 (h!2026 (toList!697 lt!26120))) (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!63448 () Bool)

(assert (=> b!63448 (= e!41595 (getValueByKey!124 (t!4832 (toList!697 lt!26120)) (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!13089 c!8588) b!63446))

(assert (= (and d!13089 (not c!8588)) b!63447))

(assert (= (and b!63447 c!8589) b!63448))

(assert (= (and b!63447 (not c!8589)) b!63449))

(declare-fun m!57579 () Bool)

(assert (=> b!63448 m!57579))

(assert (=> b!62588 d!13089))

(declare-fun c!8590 () Bool)

(declare-fun d!13091 () Bool)

(assert (=> d!13091 (= c!8590 (and ((_ is Cons!1443) (toList!697 lt!26193)) (= (_1!1037 (h!2026 (toList!697 lt!26193))) (_1!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))))

(declare-fun e!41596 () Option!130)

(assert (=> d!13091 (= (getValueByKey!124 (toList!697 lt!26193) (_1!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))) e!41596)))

(declare-fun b!63450 () Bool)

(assert (=> b!63450 (= e!41596 (Some!129 (_2!1037 (h!2026 (toList!697 lt!26193)))))))

(declare-fun b!63453 () Bool)

(declare-fun e!41597 () Option!130)

(assert (=> b!63453 (= e!41597 None!128)))

(declare-fun b!63451 () Bool)

(assert (=> b!63451 (= e!41596 e!41597)))

(declare-fun c!8591 () Bool)

(assert (=> b!63451 (= c!8591 (and ((_ is Cons!1443) (toList!697 lt!26193)) (not (= (_1!1037 (h!2026 (toList!697 lt!26193))) (_1!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))))

(declare-fun b!63452 () Bool)

(assert (=> b!63452 (= e!41597 (getValueByKey!124 (t!4832 (toList!697 lt!26193)) (_1!1037 (ite (or c!8298 c!8299) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(assert (= (and d!13091 c!8590) b!63450))

(assert (= (and d!13091 (not c!8590)) b!63451))

(assert (= (and b!63451 c!8591) b!63452))

(assert (= (and b!63451 (not c!8591)) b!63453))

(declare-fun m!57581 () Bool)

(assert (=> b!63452 m!57581))

(assert (=> b!62675 d!13091))

(declare-fun d!13093 () Bool)

(declare-fun e!41598 () Bool)

(assert (=> d!13093 e!41598))

(declare-fun res!34707 () Bool)

(assert (=> d!13093 (=> (not res!34707) (not e!41598))))

(declare-fun lt!26699 () ListLongMap!1363)

(assert (=> d!13093 (= res!34707 (contains!690 lt!26699 (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(declare-fun lt!26697 () List!1447)

(assert (=> d!13093 (= lt!26699 (ListLongMap!1364 lt!26697))))

(declare-fun lt!26698 () Unit!1685)

(declare-fun lt!26700 () Unit!1685)

(assert (=> d!13093 (= lt!26698 lt!26700)))

(assert (=> d!13093 (= (getValueByKey!124 lt!26697 (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))) (Some!129 (_2!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(assert (=> d!13093 (= lt!26700 (lemmaContainsTupThenGetReturnValue!44 lt!26697 (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))) (_2!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(assert (=> d!13093 (= lt!26697 (insertStrictlySorted!47 (toList!697 call!4919) (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))) (_2!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(assert (=> d!13093 (= (+!83 call!4919 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))) lt!26699)))

(declare-fun b!63454 () Bool)

(declare-fun res!34706 () Bool)

(assert (=> b!63454 (=> (not res!34706) (not e!41598))))

(assert (=> b!63454 (= res!34706 (= (getValueByKey!124 (toList!697 lt!26699) (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))) (Some!129 (_2!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))))

(declare-fun b!63455 () Bool)

(assert (=> b!63455 (= e!41598 (contains!692 (toList!697 lt!26699) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))

(assert (= (and d!13093 res!34707) b!63454))

(assert (= (and b!63454 res!34706) b!63455))

(declare-fun m!57583 () Bool)

(assert (=> d!13093 m!57583))

(declare-fun m!57585 () Bool)

(assert (=> d!13093 m!57585))

(declare-fun m!57587 () Bool)

(assert (=> d!13093 m!57587))

(declare-fun m!57589 () Bool)

(assert (=> d!13093 m!57589))

(declare-fun m!57591 () Bool)

(assert (=> b!63454 m!57591))

(declare-fun m!57593 () Bool)

(assert (=> b!63455 m!57593))

(assert (=> b!62543 d!13093))

(assert (=> b!62509 d!12859))

(declare-fun d!13095 () Bool)

(declare-fun c!8592 () Bool)

(assert (=> d!13095 (= c!8592 (and ((_ is Cons!1443) (toList!697 lt!26151)) (= (_1!1037 (h!2026 (toList!697 lt!26151))) (_1!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(declare-fun e!41599 () Option!130)

(assert (=> d!13095 (= (getValueByKey!124 (toList!697 lt!26151) (_1!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))) e!41599)))

(declare-fun b!63456 () Bool)

(assert (=> b!63456 (= e!41599 (Some!129 (_2!1037 (h!2026 (toList!697 lt!26151)))))))

(declare-fun b!63459 () Bool)

(declare-fun e!41600 () Option!130)

(assert (=> b!63459 (= e!41600 None!128)))

(declare-fun b!63457 () Bool)

(assert (=> b!63457 (= e!41599 e!41600)))

(declare-fun c!8593 () Bool)

(assert (=> b!63457 (= c!8593 (and ((_ is Cons!1443) (toList!697 lt!26151)) (not (= (_1!1037 (h!2026 (toList!697 lt!26151))) (_1!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))))))

(declare-fun b!63458 () Bool)

(assert (=> b!63458 (= e!41600 (getValueByKey!124 (t!4832 (toList!697 lt!26151)) (_1!1037 (tuple2!2053 lt!25986 (zeroValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(assert (= (and d!13095 c!8592) b!63456))

(assert (= (and d!13095 (not c!8592)) b!63457))

(assert (= (and b!63457 c!8593) b!63458))

(assert (= (and b!63457 (not c!8593)) b!63459))

(declare-fun m!57595 () Bool)

(assert (=> b!63458 m!57595))

(assert (=> b!62616 d!13095))

(declare-fun d!13097 () Bool)

(assert (=> d!13097 (isDefined!78 (getValueByKey!124 (toList!697 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(declare-fun lt!26701 () Unit!1685)

(assert (=> d!13097 (= lt!26701 (choose!339 (toList!697 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(declare-fun e!41601 () Bool)

(assert (=> d!13097 e!41601))

(declare-fun res!34708 () Bool)

(assert (=> d!13097 (=> (not res!34708) (not e!41601))))

(assert (=> d!13097 (= res!34708 (isStrictlySorted!281 (toList!697 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))))

(assert (=> d!13097 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) lt!26701)))

(declare-fun b!63460 () Bool)

(assert (=> b!63460 (= e!41601 (containsKey!128 (toList!697 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(assert (= (and d!13097 res!34708) b!63460))

(assert (=> d!13097 m!55481))

(assert (=> d!13097 m!56051))

(assert (=> d!13097 m!56051))

(assert (=> d!13097 m!56053))

(assert (=> d!13097 m!55481))

(declare-fun m!57597 () Bool)

(assert (=> d!13097 m!57597))

(declare-fun m!57599 () Bool)

(assert (=> d!13097 m!57599))

(assert (=> b!63460 m!55481))

(assert (=> b!63460 m!56047))

(assert (=> b!62601 d!13097))

(assert (=> b!62601 d!12727))

(assert (=> b!62601 d!12729))

(declare-fun d!13099 () Bool)

(declare-fun e!41602 () Bool)

(assert (=> d!13099 e!41602))

(declare-fun res!34709 () Bool)

(assert (=> d!13099 (=> res!34709 e!41602)))

(declare-fun lt!26705 () Bool)

(assert (=> d!13099 (= res!34709 (not lt!26705))))

(declare-fun lt!26703 () Bool)

(assert (=> d!13099 (= lt!26705 lt!26703)))

(declare-fun lt!26704 () Unit!1685)

(declare-fun e!41603 () Unit!1685)

(assert (=> d!13099 (= lt!26704 e!41603)))

(declare-fun c!8594 () Bool)

(assert (=> d!13099 (= c!8594 lt!26703)))

(assert (=> d!13099 (= lt!26703 (containsKey!128 (toList!697 lt!26138) (_1!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(assert (=> d!13099 (= (contains!690 lt!26138 (_1!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!26705)))

(declare-fun b!63461 () Bool)

(declare-fun lt!26702 () Unit!1685)

(assert (=> b!63461 (= e!41603 lt!26702)))

(assert (=> b!63461 (= lt!26702 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 lt!26138) (_1!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(assert (=> b!63461 (isDefined!78 (getValueByKey!124 (toList!697 lt!26138) (_1!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun b!63462 () Bool)

(declare-fun Unit!1741 () Unit!1685)

(assert (=> b!63462 (= e!41603 Unit!1741)))

(declare-fun b!63463 () Bool)

(assert (=> b!63463 (= e!41602 (isDefined!78 (getValueByKey!124 (toList!697 lt!26138) (_1!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(assert (= (and d!13099 c!8594) b!63461))

(assert (= (and d!13099 (not c!8594)) b!63462))

(assert (= (and d!13099 (not res!34709)) b!63463))

(declare-fun m!57601 () Bool)

(assert (=> d!13099 m!57601))

(declare-fun m!57603 () Bool)

(assert (=> b!63461 m!57603))

(assert (=> b!63461 m!56079))

(assert (=> b!63461 m!56079))

(declare-fun m!57605 () Bool)

(assert (=> b!63461 m!57605))

(assert (=> b!63463 m!56079))

(assert (=> b!63463 m!56079))

(assert (=> b!63463 m!57605))

(assert (=> d!12657 d!13099))

(declare-fun d!13101 () Bool)

(declare-fun c!8595 () Bool)

(assert (=> d!13101 (= c!8595 (and ((_ is Cons!1443) lt!26136) (= (_1!1037 (h!2026 lt!26136)) (_1!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(declare-fun e!41604 () Option!130)

(assert (=> d!13101 (= (getValueByKey!124 lt!26136 (_1!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) e!41604)))

(declare-fun b!63464 () Bool)

(assert (=> b!63464 (= e!41604 (Some!129 (_2!1037 (h!2026 lt!26136))))))

(declare-fun b!63467 () Bool)

(declare-fun e!41605 () Option!130)

(assert (=> b!63467 (= e!41605 None!128)))

(declare-fun b!63465 () Bool)

(assert (=> b!63465 (= e!41604 e!41605)))

(declare-fun c!8596 () Bool)

(assert (=> b!63465 (= c!8596 (and ((_ is Cons!1443) lt!26136) (not (= (_1!1037 (h!2026 lt!26136)) (_1!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))))

(declare-fun b!63466 () Bool)

(assert (=> b!63466 (= e!41605 (getValueByKey!124 (t!4832 lt!26136) (_1!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(assert (= (and d!13101 c!8595) b!63464))

(assert (= (and d!13101 (not c!8595)) b!63465))

(assert (= (and b!63465 c!8596) b!63466))

(assert (= (and b!63465 (not c!8596)) b!63467))

(declare-fun m!57607 () Bool)

(assert (=> b!63466 m!57607))

(assert (=> d!12657 d!13101))

(declare-fun d!13103 () Bool)

(assert (=> d!13103 (= (getValueByKey!124 lt!26136 (_1!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) (Some!129 (_2!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun lt!26706 () Unit!1685)

(assert (=> d!13103 (= lt!26706 (choose!347 lt!26136 (_1!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun e!41606 () Bool)

(assert (=> d!13103 e!41606))

(declare-fun res!34710 () Bool)

(assert (=> d!13103 (=> (not res!34710) (not e!41606))))

(assert (=> d!13103 (= res!34710 (isStrictlySorted!281 lt!26136))))

(assert (=> d!13103 (= (lemmaContainsTupThenGetReturnValue!44 lt!26136 (_1!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!26706)))

(declare-fun b!63468 () Bool)

(declare-fun res!34711 () Bool)

(assert (=> b!63468 (=> (not res!34711) (not e!41606))))

(assert (=> b!63468 (= res!34711 (containsKey!128 lt!26136 (_1!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun b!63469 () Bool)

(assert (=> b!63469 (= e!41606 (contains!692 lt!26136 (tuple2!2053 (_1!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(assert (= (and d!13103 res!34710) b!63468))

(assert (= (and b!63468 res!34711) b!63469))

(assert (=> d!13103 m!56073))

(declare-fun m!57609 () Bool)

(assert (=> d!13103 m!57609))

(declare-fun m!57611 () Bool)

(assert (=> d!13103 m!57611))

(declare-fun m!57613 () Bool)

(assert (=> b!63468 m!57613))

(declare-fun m!57615 () Bool)

(assert (=> b!63469 m!57615))

(assert (=> d!12657 d!13103))

(declare-fun b!63470 () Bool)

(declare-fun e!41607 () List!1447)

(declare-fun call!5044 () List!1447)

(assert (=> b!63470 (= e!41607 call!5044)))

(declare-fun bm!5039 () Bool)

(declare-fun call!5042 () List!1447)

(assert (=> bm!5039 (= call!5044 call!5042)))

(declare-fun d!13105 () Bool)

(declare-fun e!41609 () Bool)

(assert (=> d!13105 e!41609))

(declare-fun res!34713 () Bool)

(assert (=> d!13105 (=> (not res!34713) (not e!41609))))

(declare-fun lt!26707 () List!1447)

(assert (=> d!13105 (= res!34713 (isStrictlySorted!281 lt!26707))))

(declare-fun e!41611 () List!1447)

(assert (=> d!13105 (= lt!26707 e!41611)))

(declare-fun c!8597 () Bool)

(assert (=> d!13105 (= c!8597 (and ((_ is Cons!1443) (toList!697 lt!25978)) (bvslt (_1!1037 (h!2026 (toList!697 lt!25978))) (_1!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(assert (=> d!13105 (isStrictlySorted!281 (toList!697 lt!25978))))

(assert (=> d!13105 (= (insertStrictlySorted!47 (toList!697 lt!25978) (_1!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!26707)))

(declare-fun b!63471 () Bool)

(declare-fun c!8600 () Bool)

(declare-fun e!41610 () List!1447)

(declare-fun c!8598 () Bool)

(assert (=> b!63471 (= e!41610 (ite c!8598 (t!4832 (toList!697 lt!25978)) (ite c!8600 (Cons!1443 (h!2026 (toList!697 lt!25978)) (t!4832 (toList!697 lt!25978))) Nil!1444)))))

(declare-fun b!63472 () Bool)

(declare-fun e!41608 () List!1447)

(declare-fun call!5043 () List!1447)

(assert (=> b!63472 (= e!41608 call!5043)))

(declare-fun b!63473 () Bool)

(assert (=> b!63473 (= e!41609 (contains!692 lt!26707 (tuple2!2053 (_1!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(declare-fun b!63474 () Bool)

(declare-fun res!34712 () Bool)

(assert (=> b!63474 (=> (not res!34712) (not e!41609))))

(assert (=> b!63474 (= res!34712 (containsKey!128 lt!26707 (_1!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun bm!5040 () Bool)

(assert (=> bm!5040 (= call!5042 ($colon$colon!61 e!41610 (ite c!8597 (h!2026 (toList!697 lt!25978)) (tuple2!2053 (_1!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))))

(declare-fun c!8599 () Bool)

(assert (=> bm!5040 (= c!8599 c!8597)))

(declare-fun b!63475 () Bool)

(assert (=> b!63475 (= e!41611 e!41607)))

(assert (=> b!63475 (= c!8598 (and ((_ is Cons!1443) (toList!697 lt!25978)) (= (_1!1037 (h!2026 (toList!697 lt!25978))) (_1!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(declare-fun b!63476 () Bool)

(assert (=> b!63476 (= c!8600 (and ((_ is Cons!1443) (toList!697 lt!25978)) (bvsgt (_1!1037 (h!2026 (toList!697 lt!25978))) (_1!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))

(assert (=> b!63476 (= e!41607 e!41608)))

(declare-fun b!63477 () Bool)

(assert (=> b!63477 (= e!41611 call!5042)))

(declare-fun b!63478 () Bool)

(assert (=> b!63478 (= e!41610 (insertStrictlySorted!47 (t!4832 (toList!697 lt!25978)) (_1!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) (_2!1037 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))))

(declare-fun bm!5041 () Bool)

(assert (=> bm!5041 (= call!5043 call!5044)))

(declare-fun b!63479 () Bool)

(assert (=> b!63479 (= e!41608 call!5043)))

(assert (= (and d!13105 c!8597) b!63477))

(assert (= (and d!13105 (not c!8597)) b!63475))

(assert (= (and b!63475 c!8598) b!63470))

(assert (= (and b!63475 (not c!8598)) b!63476))

(assert (= (and b!63476 c!8600) b!63472))

(assert (= (and b!63476 (not c!8600)) b!63479))

(assert (= (or b!63472 b!63479) bm!5041))

(assert (= (or b!63470 bm!5041) bm!5039))

(assert (= (or b!63477 bm!5039) bm!5040))

(assert (= (and bm!5040 c!8599) b!63478))

(assert (= (and bm!5040 (not c!8599)) b!63471))

(assert (= (and d!13105 res!34713) b!63474))

(assert (= (and b!63474 res!34712) b!63473))

(declare-fun m!57617 () Bool)

(assert (=> b!63474 m!57617))

(declare-fun m!57619 () Bool)

(assert (=> bm!5040 m!57619))

(declare-fun m!57621 () Bool)

(assert (=> b!63473 m!57621))

(declare-fun m!57623 () Bool)

(assert (=> d!13105 m!57623))

(declare-fun m!57625 () Bool)

(assert (=> d!13105 m!57625))

(declare-fun m!57627 () Bool)

(assert (=> b!63478 m!57627))

(assert (=> d!12657 d!13105))

(declare-fun d!13107 () Bool)

(assert (=> d!13107 (isDefined!78 (getValueByKey!124 (toList!697 lt!25977) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!26708 () Unit!1685)

(assert (=> d!13107 (= lt!26708 (choose!339 (toList!697 lt!25977) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!41612 () Bool)

(assert (=> d!13107 e!41612))

(declare-fun res!34714 () Bool)

(assert (=> d!13107 (=> (not res!34714) (not e!41612))))

(assert (=> d!13107 (= res!34714 (isStrictlySorted!281 (toList!697 lt!25977)))))

(assert (=> d!13107 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 lt!25977) #b0000000000000000000000000000000000000000000000000000000000000000) lt!26708)))

(declare-fun b!63480 () Bool)

(assert (=> b!63480 (= e!41612 (containsKey!128 (toList!697 lt!25977) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!13107 res!34714) b!63480))

(assert (=> d!13107 m!55919))

(assert (=> d!13107 m!55919))

(assert (=> d!13107 m!55921))

(declare-fun m!57629 () Bool)

(assert (=> d!13107 m!57629))

(assert (=> d!13107 m!56319))

(assert (=> b!63480 m!55915))

(assert (=> b!62533 d!13107))

(assert (=> b!62533 d!12823))

(assert (=> b!62533 d!12825))

(declare-fun d!13109 () Bool)

(declare-fun e!41613 () Bool)

(assert (=> d!13109 e!41613))

(declare-fun res!34716 () Bool)

(assert (=> d!13109 (=> (not res!34716) (not e!41613))))

(declare-fun lt!26711 () ListLongMap!1363)

(assert (=> d!13109 (= res!34716 (contains!690 lt!26711 (_1!1037 (ite (or c!8358 c!8359) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))))))))

(declare-fun lt!26709 () List!1447)

(assert (=> d!13109 (= lt!26711 (ListLongMap!1364 lt!26709))))

(declare-fun lt!26710 () Unit!1685)

(declare-fun lt!26712 () Unit!1685)

(assert (=> d!13109 (= lt!26710 lt!26712)))

(assert (=> d!13109 (= (getValueByKey!124 lt!26709 (_1!1037 (ite (or c!8358 c!8359) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))))) (Some!129 (_2!1037 (ite (or c!8358 c!8359) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))))))))

(assert (=> d!13109 (= lt!26712 (lemmaContainsTupThenGetReturnValue!44 lt!26709 (_1!1037 (ite (or c!8358 c!8359) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))) (_2!1037 (ite (or c!8358 c!8359) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))))))))

(assert (=> d!13109 (= lt!26709 (insertStrictlySorted!47 (toList!697 (ite c!8358 call!4934 (ite c!8359 call!4933 call!4935))) (_1!1037 (ite (or c!8358 c!8359) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))) (_2!1037 (ite (or c!8358 c!8359) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))))))))

(assert (=> d!13109 (= (+!83 (ite c!8358 call!4934 (ite c!8359 call!4933 call!4935)) (ite (or c!8358 c!8359) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))) lt!26711)))

(declare-fun b!63481 () Bool)

(declare-fun res!34715 () Bool)

(assert (=> b!63481 (=> (not res!34715) (not e!41613))))

(assert (=> b!63481 (= res!34715 (= (getValueByKey!124 (toList!697 lt!26711) (_1!1037 (ite (or c!8358 c!8359) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))))) (Some!129 (_2!1037 (ite (or c!8358 c!8359) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))))))))

(declare-fun b!63482 () Bool)

(assert (=> b!63482 (= e!41613 (contains!692 (toList!697 lt!26711) (ite (or c!8358 c!8359) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))))))

(assert (= (and d!13109 res!34716) b!63481))

(assert (= (and b!63481 res!34715) b!63482))

(declare-fun m!57631 () Bool)

(assert (=> d!13109 m!57631))

(declare-fun m!57633 () Bool)

(assert (=> d!13109 m!57633))

(declare-fun m!57635 () Bool)

(assert (=> d!13109 m!57635))

(declare-fun m!57637 () Bool)

(assert (=> d!13109 m!57637))

(declare-fun m!57639 () Bool)

(assert (=> b!63481 m!57639))

(declare-fun m!57641 () Bool)

(assert (=> b!63482 m!57641))

(assert (=> bm!4930 d!13109))

(declare-fun d!13111 () Bool)

(assert (=> d!13111 (= (isEmpty!304 (getValueByKey!124 (toList!697 lt!25781) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355))) (not ((_ is Some!129) (getValueByKey!124 (toList!697 lt!25781) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))))

(assert (=> d!12601 d!13111))

(assert (=> d!12663 d!12653))

(assert (=> d!12663 d!12655))

(assert (=> d!12663 d!12665))

(declare-fun d!13113 () Bool)

(declare-fun e!41614 () Bool)

(assert (=> d!13113 e!41614))

(declare-fun res!34717 () Bool)

(assert (=> d!13113 (=> res!34717 e!41614)))

(declare-fun lt!26716 () Bool)

(assert (=> d!13113 (= res!34717 (not lt!26716))))

(declare-fun lt!26714 () Bool)

(assert (=> d!13113 (= lt!26716 lt!26714)))

(declare-fun lt!26715 () Unit!1685)

(declare-fun e!41615 () Unit!1685)

(assert (=> d!13113 (= lt!26715 e!41615)))

(declare-fun c!8601 () Bool)

(assert (=> d!13113 (= c!8601 lt!26714)))

(assert (=> d!13113 (= lt!26714 (containsKey!128 (toList!697 lt!25973) lt!25988))))

(assert (=> d!13113 (= (contains!690 lt!25973 lt!25988) lt!26716)))

(declare-fun b!63483 () Bool)

(declare-fun lt!26713 () Unit!1685)

(assert (=> b!63483 (= e!41615 lt!26713)))

(assert (=> b!63483 (= lt!26713 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 lt!25973) lt!25988))))

(assert (=> b!63483 (isDefined!78 (getValueByKey!124 (toList!697 lt!25973) lt!25988))))

(declare-fun b!63484 () Bool)

(declare-fun Unit!1742 () Unit!1685)

(assert (=> b!63484 (= e!41615 Unit!1742)))

(declare-fun b!63485 () Bool)

(assert (=> b!63485 (= e!41614 (isDefined!78 (getValueByKey!124 (toList!697 lt!25973) lt!25988)))))

(assert (= (and d!13113 c!8601) b!63483))

(assert (= (and d!13113 (not c!8601)) b!63484))

(assert (= (and d!13113 (not res!34717)) b!63485))

(declare-fun m!57643 () Bool)

(assert (=> d!13113 m!57643))

(declare-fun m!57645 () Bool)

(assert (=> b!63483 m!57645))

(assert (=> b!63483 m!56103))

(assert (=> b!63483 m!56103))

(declare-fun m!57647 () Bool)

(assert (=> b!63483 m!57647))

(assert (=> b!63485 m!56103))

(assert (=> b!63485 m!56103))

(assert (=> b!63485 m!57647))

(assert (=> d!12663 d!13113))

(declare-fun d!13115 () Bool)

(assert (=> d!13115 (= (apply!68 (+!83 lt!25973 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) lt!25988) (apply!68 lt!25973 lt!25988))))

(assert (=> d!13115 true))

(declare-fun _$34!779 () Unit!1685)

(assert (=> d!13115 (= (choose!344 lt!25973 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992))) lt!25988) _$34!779)))

(declare-fun bs!2762 () Bool)

(assert (= bs!2762 d!13115))

(assert (=> bs!2762 m!55741))

(assert (=> bs!2762 m!55741))

(assert (=> bs!2762 m!55745))

(assert (=> bs!2762 m!55743))

(assert (=> d!12663 d!13115))

(declare-fun d!13117 () Bool)

(declare-fun e!41616 () Bool)

(assert (=> d!13117 e!41616))

(declare-fun res!34718 () Bool)

(assert (=> d!13117 (=> res!34718 e!41616)))

(declare-fun lt!26720 () Bool)

(assert (=> d!13117 (= res!34718 (not lt!26720))))

(declare-fun lt!26718 () Bool)

(assert (=> d!13117 (= lt!26720 lt!26718)))

(declare-fun lt!26719 () Unit!1685)

(declare-fun e!41617 () Unit!1685)

(assert (=> d!13117 (= lt!26719 e!41617)))

(declare-fun c!8602 () Bool)

(assert (=> d!13117 (= c!8602 lt!26718)))

(assert (=> d!13117 (= lt!26718 (containsKey!128 (toList!697 lt!26081) (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!13117 (= (contains!690 lt!26081 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)) lt!26720)))

(declare-fun b!63486 () Bool)

(declare-fun lt!26717 () Unit!1685)

(assert (=> b!63486 (= e!41617 lt!26717)))

(assert (=> b!63486 (= lt!26717 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 lt!26081) (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63486 (isDefined!78 (getValueByKey!124 (toList!697 lt!26081) (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63487 () Bool)

(declare-fun Unit!1743 () Unit!1685)

(assert (=> b!63487 (= e!41617 Unit!1743)))

(declare-fun b!63488 () Bool)

(assert (=> b!63488 (= e!41616 (isDefined!78 (getValueByKey!124 (toList!697 lt!26081) (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!13117 c!8602) b!63486))

(assert (= (and d!13117 (not c!8602)) b!63487))

(assert (= (and d!13117 (not res!34718)) b!63488))

(assert (=> d!13117 m!55803))

(declare-fun m!57649 () Bool)

(assert (=> d!13117 m!57649))

(assert (=> b!63486 m!55803))

(declare-fun m!57651 () Bool)

(assert (=> b!63486 m!57651))

(assert (=> b!63486 m!55803))

(assert (=> b!63486 m!57189))

(assert (=> b!63486 m!57189))

(declare-fun m!57653 () Bool)

(assert (=> b!63486 m!57653))

(assert (=> b!63488 m!55803))

(assert (=> b!63488 m!57189))

(assert (=> b!63488 m!57189))

(assert (=> b!63488 m!57653))

(assert (=> b!62549 d!13117))

(declare-fun d!13119 () Bool)

(assert (=> d!13119 (= (get!1092 (getValueByKey!124 (toList!697 lt!25977) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2418 (getValueByKey!124 (toList!697 lt!25977) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12643 d!13119))

(assert (=> d!12643 d!12825))

(assert (=> d!12667 d!12657))

(declare-fun d!13121 () Bool)

(assert (=> d!13121 (= (apply!68 (+!83 lt!25978 (tuple2!2053 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) lt!25992) (apply!68 lt!25978 lt!25992))))

(assert (=> d!13121 true))

(declare-fun _$34!780 () Unit!1685)

(assert (=> d!13121 (= (choose!344 lt!25978 lt!25990 (minValue!1999 (v!2412 (underlying!229 thiss!992))) lt!25992) _$34!780)))

(declare-fun bs!2763 () Bool)

(assert (= bs!2763 d!13121))

(assert (=> bs!2763 m!55729))

(assert (=> bs!2763 m!55729))

(assert (=> bs!2763 m!55731))

(assert (=> bs!2763 m!55733))

(assert (=> d!12667 d!13121))

(declare-fun d!13123 () Bool)

(declare-fun e!41618 () Bool)

(assert (=> d!13123 e!41618))

(declare-fun res!34719 () Bool)

(assert (=> d!13123 (=> res!34719 e!41618)))

(declare-fun lt!26724 () Bool)

(assert (=> d!13123 (= res!34719 (not lt!26724))))

(declare-fun lt!26722 () Bool)

(assert (=> d!13123 (= lt!26724 lt!26722)))

(declare-fun lt!26723 () Unit!1685)

(declare-fun e!41619 () Unit!1685)

(assert (=> d!13123 (= lt!26723 e!41619)))

(declare-fun c!8603 () Bool)

(assert (=> d!13123 (= c!8603 lt!26722)))

(assert (=> d!13123 (= lt!26722 (containsKey!128 (toList!697 lt!25978) lt!25992))))

(assert (=> d!13123 (= (contains!690 lt!25978 lt!25992) lt!26724)))

(declare-fun b!63489 () Bool)

(declare-fun lt!26721 () Unit!1685)

(assert (=> b!63489 (= e!41619 lt!26721)))

(assert (=> b!63489 (= lt!26721 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 lt!25978) lt!25992))))

(assert (=> b!63489 (isDefined!78 (getValueByKey!124 (toList!697 lt!25978) lt!25992))))

(declare-fun b!63490 () Bool)

(declare-fun Unit!1744 () Unit!1685)

(assert (=> b!63490 (= e!41619 Unit!1744)))

(declare-fun b!63491 () Bool)

(assert (=> b!63491 (= e!41618 (isDefined!78 (getValueByKey!124 (toList!697 lt!25978) lt!25992)))))

(assert (= (and d!13123 c!8603) b!63489))

(assert (= (and d!13123 (not c!8603)) b!63490))

(assert (= (and d!13123 (not res!34719)) b!63491))

(declare-fun m!57655 () Bool)

(assert (=> d!13123 m!57655))

(declare-fun m!57657 () Bool)

(assert (=> b!63489 m!57657))

(assert (=> b!63489 m!56135))

(assert (=> b!63489 m!56135))

(declare-fun m!57659 () Bool)

(assert (=> b!63489 m!57659))

(assert (=> b!63491 m!56135))

(assert (=> b!63491 m!56135))

(assert (=> b!63491 m!57659))

(assert (=> d!12667 d!13123))

(assert (=> d!12667 d!12677))

(assert (=> d!12667 d!12671))

(assert (=> b!62545 d!12859))

(assert (=> b!62592 d!12829))

(declare-fun d!13125 () Bool)

(declare-fun lt!26725 () Bool)

(assert (=> d!13125 (= lt!26725 (select (content!68 (toList!697 lt!26206)) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))

(declare-fun e!41621 () Bool)

(assert (=> d!13125 (= lt!26725 e!41621)))

(declare-fun res!34721 () Bool)

(assert (=> d!13125 (=> (not res!34721) (not e!41621))))

(assert (=> d!13125 (= res!34721 ((_ is Cons!1443) (toList!697 lt!26206)))))

(assert (=> d!13125 (= (contains!692 (toList!697 lt!26206) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) lt!26725)))

(declare-fun b!63492 () Bool)

(declare-fun e!41620 () Bool)

(assert (=> b!63492 (= e!41621 e!41620)))

(declare-fun res!34720 () Bool)

(assert (=> b!63492 (=> res!34720 e!41620)))

(assert (=> b!63492 (= res!34720 (= (h!2026 (toList!697 lt!26206)) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))

(declare-fun b!63493 () Bool)

(assert (=> b!63493 (= e!41620 (contains!692 (t!4832 (toList!697 lt!26206)) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))

(assert (= (and d!13125 res!34721) b!63492))

(assert (= (and b!63492 (not res!34720)) b!63493))

(declare-fun m!57661 () Bool)

(assert (=> d!13125 m!57661))

(declare-fun m!57663 () Bool)

(assert (=> d!13125 m!57663))

(declare-fun m!57665 () Bool)

(assert (=> b!63493 m!57665))

(assert (=> b!62696 d!13125))

(declare-fun b!63494 () Bool)

(declare-fun e!41622 () (_ BitVec 32))

(declare-fun call!5045 () (_ BitVec 32))

(assert (=> b!63494 (= e!41622 call!5045)))

(declare-fun b!63495 () Bool)

(declare-fun e!41623 () (_ BitVec 32))

(assert (=> b!63495 (= e!41623 #b00000000000000000000000000000000)))

(declare-fun b!63496 () Bool)

(assert (=> b!63496 (= e!41623 e!41622)))

(declare-fun c!8604 () Bool)

(assert (=> b!63496 (= c!8604 (validKeyInArray!0 (select (arr!1786 (_keys!3718 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!63497 () Bool)

(assert (=> b!63497 (= e!41622 (bvadd #b00000000000000000000000000000001 call!5045))))

(declare-fun bm!5042 () Bool)

(assert (=> bm!5042 (= call!5045 (arrayCountValidKeys!0 (_keys!3718 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2019 (_keys!3718 newMap!16))))))

(declare-fun d!13127 () Bool)

(declare-fun lt!26726 () (_ BitVec 32))

(assert (=> d!13127 (and (bvsge lt!26726 #b00000000000000000000000000000000) (bvsle lt!26726 (bvsub (size!2019 (_keys!3718 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> d!13127 (= lt!26726 e!41623)))

(declare-fun c!8605 () Bool)

(assert (=> d!13127 (= c!8605 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2019 (_keys!3718 newMap!16))))))

(assert (=> d!13127 (and (bvsle (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2019 (_keys!3718 newMap!16))) (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvsle (size!2019 (_keys!3718 newMap!16)) (size!2019 (_keys!3718 newMap!16))))))

(assert (=> d!13127 (= (arrayCountValidKeys!0 (_keys!3718 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2019 (_keys!3718 newMap!16))) lt!26726)))

(assert (= (and d!13127 c!8605) b!63495))

(assert (= (and d!13127 (not c!8605)) b!63496))

(assert (= (and b!63496 c!8604) b!63497))

(assert (= (and b!63496 (not c!8604)) b!63494))

(assert (= (or b!63497 b!63494) bm!5042))

(assert (=> b!63496 m!56335))

(assert (=> b!63496 m!56335))

(assert (=> b!63496 m!56337))

(declare-fun m!57667 () Bool)

(assert (=> bm!5042 m!57667))

(assert (=> bm!4925 d!13127))

(assert (=> b!62737 d!12587))

(declare-fun d!13129 () Bool)

(assert (=> d!13129 (arrayContainsKey!0 (_keys!3718 newMap!16) lt!26202 #b00000000000000000000000000000000)))

(declare-fun lt!26727 () Unit!1685)

(assert (=> d!13129 (= lt!26727 (choose!13 (_keys!3718 newMap!16) lt!26202 #b00000000000000000000000000000000))))

(assert (=> d!13129 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (=> d!13129 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3718 newMap!16) lt!26202 #b00000000000000000000000000000000) lt!26727)))

(declare-fun bs!2764 () Bool)

(assert (= bs!2764 d!13129))

(assert (=> bs!2764 m!56243))

(declare-fun m!57669 () Bool)

(assert (=> bs!2764 m!57669))

(assert (=> b!62692 d!13129))

(declare-fun d!13131 () Bool)

(declare-fun res!34722 () Bool)

(declare-fun e!41624 () Bool)

(assert (=> d!13131 (=> res!34722 e!41624)))

(assert (=> d!13131 (= res!34722 (= (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000) lt!26202))))

(assert (=> d!13131 (= (arrayContainsKey!0 (_keys!3718 newMap!16) lt!26202 #b00000000000000000000000000000000) e!41624)))

(declare-fun b!63498 () Bool)

(declare-fun e!41625 () Bool)

(assert (=> b!63498 (= e!41624 e!41625)))

(declare-fun res!34723 () Bool)

(assert (=> b!63498 (=> (not res!34723) (not e!41625))))

(assert (=> b!63498 (= res!34723 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2019 (_keys!3718 newMap!16))))))

(declare-fun b!63499 () Bool)

(assert (=> b!63499 (= e!41625 (arrayContainsKey!0 (_keys!3718 newMap!16) lt!26202 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!13131 (not res!34722)) b!63498))

(assert (= (and b!63498 res!34723) b!63499))

(assert (=> d!13131 m!55803))

(declare-fun m!57671 () Bool)

(assert (=> b!63499 m!57671))

(assert (=> b!62692 d!13131))

(declare-fun d!13133 () Bool)

(declare-fun lt!26728 () SeekEntryResult!232)

(assert (=> d!13133 (and (or ((_ is Undefined!232) lt!26728) (not ((_ is Found!232) lt!26728)) (and (bvsge (index!3054 lt!26728) #b00000000000000000000000000000000) (bvslt (index!3054 lt!26728) (size!2019 (_keys!3718 newMap!16))))) (or ((_ is Undefined!232) lt!26728) ((_ is Found!232) lt!26728) (not ((_ is MissingZero!232) lt!26728)) (and (bvsge (index!3053 lt!26728) #b00000000000000000000000000000000) (bvslt (index!3053 lt!26728) (size!2019 (_keys!3718 newMap!16))))) (or ((_ is Undefined!232) lt!26728) ((_ is Found!232) lt!26728) ((_ is MissingZero!232) lt!26728) (not ((_ is MissingVacant!232) lt!26728)) (and (bvsge (index!3056 lt!26728) #b00000000000000000000000000000000) (bvslt (index!3056 lt!26728) (size!2019 (_keys!3718 newMap!16))))) (or ((_ is Undefined!232) lt!26728) (ite ((_ is Found!232) lt!26728) (= (select (arr!1786 (_keys!3718 newMap!16)) (index!3054 lt!26728)) (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)) (ite ((_ is MissingZero!232) lt!26728) (= (select (arr!1786 (_keys!3718 newMap!16)) (index!3053 lt!26728)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!232) lt!26728) (= (select (arr!1786 (_keys!3718 newMap!16)) (index!3056 lt!26728)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!41626 () SeekEntryResult!232)

(assert (=> d!13133 (= lt!26728 e!41626)))

(declare-fun c!8606 () Bool)

(declare-fun lt!26729 () SeekEntryResult!232)

(assert (=> d!13133 (= c!8606 (and ((_ is Intermediate!232) lt!26729) (undefined!1044 lt!26729)))))

(assert (=> d!13133 (= lt!26729 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000) (mask!5992 newMap!16)) (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000) (_keys!3718 newMap!16) (mask!5992 newMap!16)))))

(assert (=> d!13133 (validMask!0 (mask!5992 newMap!16))))

(assert (=> d!13133 (= (seekEntryOrOpen!0 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000) (_keys!3718 newMap!16) (mask!5992 newMap!16)) lt!26728)))

(declare-fun b!63500 () Bool)

(declare-fun e!41628 () SeekEntryResult!232)

(assert (=> b!63500 (= e!41628 (MissingZero!232 (index!3055 lt!26729)))))

(declare-fun b!63501 () Bool)

(assert (=> b!63501 (= e!41628 (seekKeyOrZeroReturnVacant!0 (x!10309 lt!26729) (index!3055 lt!26729) (index!3055 lt!26729) (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000) (_keys!3718 newMap!16) (mask!5992 newMap!16)))))

(declare-fun b!63502 () Bool)

(assert (=> b!63502 (= e!41626 Undefined!232)))

(declare-fun b!63503 () Bool)

(declare-fun e!41627 () SeekEntryResult!232)

(assert (=> b!63503 (= e!41626 e!41627)))

(declare-fun lt!26730 () (_ BitVec 64))

(assert (=> b!63503 (= lt!26730 (select (arr!1786 (_keys!3718 newMap!16)) (index!3055 lt!26729)))))

(declare-fun c!8608 () Bool)

(assert (=> b!63503 (= c!8608 (= lt!26730 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63504 () Bool)

(declare-fun c!8607 () Bool)

(assert (=> b!63504 (= c!8607 (= lt!26730 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63504 (= e!41627 e!41628)))

(declare-fun b!63505 () Bool)

(assert (=> b!63505 (= e!41627 (Found!232 (index!3055 lt!26729)))))

(assert (= (and d!13133 c!8606) b!63502))

(assert (= (and d!13133 (not c!8606)) b!63503))

(assert (= (and b!63503 c!8608) b!63505))

(assert (= (and b!63503 (not c!8608)) b!63504))

(assert (= (and b!63504 c!8607) b!63500))

(assert (= (and b!63504 (not c!8607)) b!63501))

(declare-fun m!57673 () Bool)

(assert (=> d!13133 m!57673))

(assert (=> d!13133 m!55803))

(declare-fun m!57675 () Bool)

(assert (=> d!13133 m!57675))

(assert (=> d!13133 m!55803))

(assert (=> d!13133 m!57673))

(assert (=> d!13133 m!55783))

(declare-fun m!57677 () Bool)

(assert (=> d!13133 m!57677))

(declare-fun m!57679 () Bool)

(assert (=> d!13133 m!57679))

(declare-fun m!57681 () Bool)

(assert (=> d!13133 m!57681))

(assert (=> b!63501 m!55803))

(declare-fun m!57683 () Bool)

(assert (=> b!63501 m!57683))

(declare-fun m!57685 () Bool)

(assert (=> b!63503 m!57685))

(assert (=> b!62692 d!13133))

(declare-fun d!13135 () Bool)

(assert (=> d!13135 (= (get!1092 (getValueByKey!124 (toList!697 lt!25977) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (v!2418 (getValueByKey!124 (toList!697 lt!25977) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!12685 d!13135))

(assert (=> d!12685 d!12711))

(assert (=> bm!4921 d!12953))

(declare-fun d!13137 () Bool)

(assert (=> d!13137 (not (contains!690 (+!83 lt!26026 (tuple2!2053 lt!26030 lt!26028)) lt!26025))))

(declare-fun lt!26733 () Unit!1685)

(declare-fun choose!349 (ListLongMap!1363 (_ BitVec 64) V!2865 (_ BitVec 64)) Unit!1685)

(assert (=> d!13137 (= lt!26733 (choose!349 lt!26026 lt!26030 lt!26028 lt!26025))))

(declare-fun e!41631 () Bool)

(assert (=> d!13137 e!41631))

(declare-fun res!34726 () Bool)

(assert (=> d!13137 (=> (not res!34726) (not e!41631))))

(assert (=> d!13137 (= res!34726 (not (contains!690 lt!26026 lt!26025)))))

(assert (=> d!13137 (= (addStillNotContains!18 lt!26026 lt!26030 lt!26028 lt!26025) lt!26733)))

(declare-fun b!63509 () Bool)

(assert (=> b!63509 (= e!41631 (not (= lt!26030 lt!26025)))))

(assert (= (and d!13137 res!34726) b!63509))

(assert (=> d!13137 m!55823))

(assert (=> d!13137 m!55823))

(assert (=> d!13137 m!55829))

(declare-fun m!57687 () Bool)

(assert (=> d!13137 m!57687))

(declare-fun m!57689 () Bool)

(assert (=> d!13137 m!57689))

(assert (=> b!62471 d!13137))

(declare-fun d!13139 () Bool)

(declare-fun e!41632 () Bool)

(assert (=> d!13139 e!41632))

(declare-fun res!34728 () Bool)

(assert (=> d!13139 (=> (not res!34728) (not e!41632))))

(declare-fun lt!26736 () ListLongMap!1363)

(assert (=> d!13139 (= res!34728 (contains!690 lt!26736 (_1!1037 (tuple2!2053 lt!26030 lt!26028))))))

(declare-fun lt!26734 () List!1447)

(assert (=> d!13139 (= lt!26736 (ListLongMap!1364 lt!26734))))

(declare-fun lt!26735 () Unit!1685)

(declare-fun lt!26737 () Unit!1685)

(assert (=> d!13139 (= lt!26735 lt!26737)))

(assert (=> d!13139 (= (getValueByKey!124 lt!26734 (_1!1037 (tuple2!2053 lt!26030 lt!26028))) (Some!129 (_2!1037 (tuple2!2053 lt!26030 lt!26028))))))

(assert (=> d!13139 (= lt!26737 (lemmaContainsTupThenGetReturnValue!44 lt!26734 (_1!1037 (tuple2!2053 lt!26030 lt!26028)) (_2!1037 (tuple2!2053 lt!26030 lt!26028))))))

(assert (=> d!13139 (= lt!26734 (insertStrictlySorted!47 (toList!697 lt!26026) (_1!1037 (tuple2!2053 lt!26030 lt!26028)) (_2!1037 (tuple2!2053 lt!26030 lt!26028))))))

(assert (=> d!13139 (= (+!83 lt!26026 (tuple2!2053 lt!26030 lt!26028)) lt!26736)))

(declare-fun b!63510 () Bool)

(declare-fun res!34727 () Bool)

(assert (=> b!63510 (=> (not res!34727) (not e!41632))))

(assert (=> b!63510 (= res!34727 (= (getValueByKey!124 (toList!697 lt!26736) (_1!1037 (tuple2!2053 lt!26030 lt!26028))) (Some!129 (_2!1037 (tuple2!2053 lt!26030 lt!26028)))))))

(declare-fun b!63511 () Bool)

(assert (=> b!63511 (= e!41632 (contains!692 (toList!697 lt!26736) (tuple2!2053 lt!26030 lt!26028)))))

(assert (= (and d!13139 res!34728) b!63510))

(assert (= (and b!63510 res!34727) b!63511))

(declare-fun m!57691 () Bool)

(assert (=> d!13139 m!57691))

(declare-fun m!57693 () Bool)

(assert (=> d!13139 m!57693))

(declare-fun m!57695 () Bool)

(assert (=> d!13139 m!57695))

(declare-fun m!57697 () Bool)

(assert (=> d!13139 m!57697))

(declare-fun m!57699 () Bool)

(assert (=> b!63510 m!57699))

(declare-fun m!57701 () Bool)

(assert (=> b!63511 m!57701))

(assert (=> b!62471 d!13139))

(declare-fun d!13141 () Bool)

(declare-fun e!41633 () Bool)

(assert (=> d!13141 e!41633))

(declare-fun res!34730 () Bool)

(assert (=> d!13141 (=> (not res!34730) (not e!41633))))

(declare-fun lt!26740 () ListLongMap!1363)

(assert (=> d!13141 (= res!34730 (contains!690 lt!26740 (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!26738 () List!1447)

(assert (=> d!13141 (= lt!26740 (ListLongMap!1364 lt!26738))))

(declare-fun lt!26739 () Unit!1685)

(declare-fun lt!26741 () Unit!1685)

(assert (=> d!13141 (= lt!26739 lt!26741)))

(assert (=> d!13141 (= (getValueByKey!124 lt!26738 (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!13141 (= lt!26741 (lemmaContainsTupThenGetReturnValue!44 lt!26738 (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!13141 (= lt!26738 (insertStrictlySorted!47 (toList!697 call!4910) (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!13141 (= (+!83 call!4910 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26740)))

(declare-fun b!63512 () Bool)

(declare-fun res!34729 () Bool)

(assert (=> b!63512 (=> (not res!34729) (not e!41633))))

(assert (=> b!63512 (= res!34729 (= (getValueByKey!124 (toList!697 lt!26740) (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!63513 () Bool)

(assert (=> b!63513 (= e!41633 (contains!692 (toList!697 lt!26740) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!13141 res!34730) b!63512))

(assert (= (and b!63512 res!34729) b!63513))

(declare-fun m!57703 () Bool)

(assert (=> d!13141 m!57703))

(declare-fun m!57705 () Bool)

(assert (=> d!13141 m!57705))

(declare-fun m!57707 () Bool)

(assert (=> d!13141 m!57707))

(declare-fun m!57709 () Bool)

(assert (=> d!13141 m!57709))

(declare-fun m!57711 () Bool)

(assert (=> b!63512 m!57711))

(declare-fun m!57713 () Bool)

(assert (=> b!63513 m!57713))

(assert (=> b!62471 d!13141))

(declare-fun d!13143 () Bool)

(declare-fun e!41634 () Bool)

(assert (=> d!13143 e!41634))

(declare-fun res!34731 () Bool)

(assert (=> d!13143 (=> res!34731 e!41634)))

(declare-fun lt!26745 () Bool)

(assert (=> d!13143 (= res!34731 (not lt!26745))))

(declare-fun lt!26743 () Bool)

(assert (=> d!13143 (= lt!26745 lt!26743)))

(declare-fun lt!26744 () Unit!1685)

(declare-fun e!41635 () Unit!1685)

(assert (=> d!13143 (= lt!26744 e!41635)))

(declare-fun c!8609 () Bool)

(assert (=> d!13143 (= c!8609 lt!26743)))

(assert (=> d!13143 (= lt!26743 (containsKey!128 (toList!697 (+!83 lt!26026 (tuple2!2053 lt!26030 lt!26028))) lt!26025))))

(assert (=> d!13143 (= (contains!690 (+!83 lt!26026 (tuple2!2053 lt!26030 lt!26028)) lt!26025) lt!26745)))

(declare-fun b!63514 () Bool)

(declare-fun lt!26742 () Unit!1685)

(assert (=> b!63514 (= e!41635 lt!26742)))

(assert (=> b!63514 (= lt!26742 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 (+!83 lt!26026 (tuple2!2053 lt!26030 lt!26028))) lt!26025))))

(assert (=> b!63514 (isDefined!78 (getValueByKey!124 (toList!697 (+!83 lt!26026 (tuple2!2053 lt!26030 lt!26028))) lt!26025))))

(declare-fun b!63515 () Bool)

(declare-fun Unit!1745 () Unit!1685)

(assert (=> b!63515 (= e!41635 Unit!1745)))

(declare-fun b!63516 () Bool)

(assert (=> b!63516 (= e!41634 (isDefined!78 (getValueByKey!124 (toList!697 (+!83 lt!26026 (tuple2!2053 lt!26030 lt!26028))) lt!26025)))))

(assert (= (and d!13143 c!8609) b!63514))

(assert (= (and d!13143 (not c!8609)) b!63515))

(assert (= (and d!13143 (not res!34731)) b!63516))

(declare-fun m!57715 () Bool)

(assert (=> d!13143 m!57715))

(declare-fun m!57717 () Bool)

(assert (=> b!63514 m!57717))

(declare-fun m!57719 () Bool)

(assert (=> b!63514 m!57719))

(assert (=> b!63514 m!57719))

(declare-fun m!57721 () Bool)

(assert (=> b!63514 m!57721))

(assert (=> b!63516 m!57719))

(assert (=> b!63516 m!57719))

(assert (=> b!63516 m!57721))

(assert (=> b!62471 d!13143))

(assert (=> b!62471 d!12687))

(declare-fun d!13145 () Bool)

(assert (=> d!13145 (= (inRange!0 (ite c!8383 (index!3054 lt!26276) (ite c!8384 (index!3053 lt!26293) (index!3056 lt!26293))) (mask!5992 newMap!16)) (and (bvsge (ite c!8383 (index!3054 lt!26276) (ite c!8384 (index!3053 lt!26293) (index!3056 lt!26293))) #b00000000000000000000000000000000) (bvslt (ite c!8383 (index!3054 lt!26276) (ite c!8384 (index!3053 lt!26293) (index!3056 lt!26293))) (bvadd (mask!5992 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4948 d!13145))

(declare-fun d!13147 () Bool)

(assert (=> d!13147 (= (apply!68 lt!26081 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1092 (getValueByKey!124 (toList!697 lt!26081) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2765 () Bool)

(assert (= bs!2765 d!13147))

(assert (=> bs!2765 m!57087))

(assert (=> bs!2765 m!57087))

(declare-fun m!57723 () Bool)

(assert (=> bs!2765 m!57723))

(assert (=> b!62537 d!13147))

(declare-fun d!13149 () Bool)

(declare-fun res!34732 () Bool)

(declare-fun e!41636 () Bool)

(assert (=> d!13149 (=> res!34732 e!41636)))

(assert (=> d!13149 (= res!34732 (= (select (arr!1786 (_keys!3718 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(assert (=> d!13149 (= (arrayContainsKey!0 (_keys!3718 newMap!16) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) e!41636)))

(declare-fun b!63517 () Bool)

(declare-fun e!41637 () Bool)

(assert (=> b!63517 (= e!41636 e!41637)))

(declare-fun res!34733 () Bool)

(assert (=> b!63517 (=> (not res!34733) (not e!41637))))

(assert (=> b!63517 (= res!34733 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2019 (_keys!3718 newMap!16))))))

(declare-fun b!63518 () Bool)

(assert (=> b!63518 (= e!41637 (arrayContainsKey!0 (_keys!3718 newMap!16) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!13149 (not res!34732)) b!63517))

(assert (= (and b!63517 res!34733) b!63518))

(assert (=> d!13149 m!56335))

(assert (=> b!63518 m!55481))

(declare-fun m!57725 () Bool)

(assert (=> b!63518 m!57725))

(assert (=> b!62445 d!13149))

(declare-fun lt!26746 () Bool)

(declare-fun d!13151 () Bool)

(assert (=> d!13151 (= lt!26746 (select (content!68 (toList!697 lt!26134)) (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))

(declare-fun e!41639 () Bool)

(assert (=> d!13151 (= lt!26746 e!41639)))

(declare-fun res!34735 () Bool)

(assert (=> d!13151 (=> (not res!34735) (not e!41639))))

(assert (=> d!13151 (= res!34735 ((_ is Cons!1443) (toList!697 lt!26134)))))

(assert (=> d!13151 (= (contains!692 (toList!697 lt!26134) (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992))))) lt!26746)))

(declare-fun b!63519 () Bool)

(declare-fun e!41638 () Bool)

(assert (=> b!63519 (= e!41639 e!41638)))

(declare-fun res!34734 () Bool)

(assert (=> b!63519 (=> res!34734 e!41638)))

(assert (=> b!63519 (= res!34734 (= (h!2026 (toList!697 lt!26134)) (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))

(declare-fun b!63520 () Bool)

(assert (=> b!63520 (= e!41638 (contains!692 (t!4832 (toList!697 lt!26134)) (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))

(assert (= (and d!13151 res!34735) b!63519))

(assert (= (and b!63519 (not res!34734)) b!63520))

(declare-fun m!57727 () Bool)

(assert (=> d!13151 m!57727))

(declare-fun m!57729 () Bool)

(assert (=> d!13151 m!57729))

(declare-fun m!57731 () Bool)

(assert (=> b!63520 m!57731))

(assert (=> b!62605 d!13151))

(declare-fun d!13153 () Bool)

(declare-fun res!34736 () Bool)

(declare-fun e!41640 () Bool)

(assert (=> d!13153 (=> res!34736 e!41640)))

(assert (=> d!13153 (= res!34736 (and ((_ is Cons!1443) (toList!697 lt!25977)) (= (_1!1037 (h!2026 (toList!697 lt!25977))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!13153 (= (containsKey!128 (toList!697 lt!25977) #b1000000000000000000000000000000000000000000000000000000000000000) e!41640)))

(declare-fun b!63521 () Bool)

(declare-fun e!41641 () Bool)

(assert (=> b!63521 (= e!41640 e!41641)))

(declare-fun res!34737 () Bool)

(assert (=> b!63521 (=> (not res!34737) (not e!41641))))

(assert (=> b!63521 (= res!34737 (and (or (not ((_ is Cons!1443) (toList!697 lt!25977))) (bvsle (_1!1037 (h!2026 (toList!697 lt!25977))) #b1000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1443) (toList!697 lt!25977)) (bvslt (_1!1037 (h!2026 (toList!697 lt!25977))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!63522 () Bool)

(assert (=> b!63522 (= e!41641 (containsKey!128 (t!4832 (toList!697 lt!25977)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!13153 (not res!34736)) b!63521))

(assert (= (and b!63521 res!34737) b!63522))

(declare-fun m!57733 () Bool)

(assert (=> b!63522 m!57733))

(assert (=> d!12631 d!13153))

(assert (=> bm!4947 d!12591))

(assert (=> b!62587 d!12919))

(assert (=> b!62587 d!12921))

(declare-fun d!13155 () Bool)

(declare-fun e!41642 () Bool)

(assert (=> d!13155 e!41642))

(declare-fun res!34738 () Bool)

(assert (=> d!13155 (=> res!34738 e!41642)))

(declare-fun lt!26750 () Bool)

(assert (=> d!13155 (= res!34738 (not lt!26750))))

(declare-fun lt!26748 () Bool)

(assert (=> d!13155 (= lt!26750 lt!26748)))

(declare-fun lt!26749 () Unit!1685)

(declare-fun e!41643 () Unit!1685)

(assert (=> d!13155 (= lt!26749 e!41643)))

(declare-fun c!8610 () Bool)

(assert (=> d!13155 (= c!8610 lt!26748)))

(assert (=> d!13155 (= lt!26748 (containsKey!128 (toList!697 lt!26081) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!13155 (= (contains!690 lt!26081 #b0000000000000000000000000000000000000000000000000000000000000000) lt!26750)))

(declare-fun b!63523 () Bool)

(declare-fun lt!26747 () Unit!1685)

(assert (=> b!63523 (= e!41643 lt!26747)))

(assert (=> b!63523 (= lt!26747 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 lt!26081) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63523 (isDefined!78 (getValueByKey!124 (toList!697 lt!26081) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63524 () Bool)

(declare-fun Unit!1746 () Unit!1685)

(assert (=> b!63524 (= e!41643 Unit!1746)))

(declare-fun b!63525 () Bool)

(assert (=> b!63525 (= e!41642 (isDefined!78 (getValueByKey!124 (toList!697 lt!26081) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!13155 c!8610) b!63523))

(assert (= (and d!13155 (not c!8610)) b!63524))

(assert (= (and d!13155 (not res!34738)) b!63525))

(declare-fun m!57735 () Bool)

(assert (=> d!13155 m!57735))

(declare-fun m!57737 () Bool)

(assert (=> b!63523 m!57737))

(assert (=> b!63523 m!57197))

(assert (=> b!63523 m!57197))

(declare-fun m!57739 () Bool)

(assert (=> b!63523 m!57739))

(assert (=> b!63525 m!57197))

(assert (=> b!63525 m!57197))

(assert (=> b!63525 m!57739))

(assert (=> bm!4916 d!13155))

(assert (=> b!62747 d!13013))

(declare-fun d!13157 () Bool)

(declare-fun e!41644 () Bool)

(assert (=> d!13157 e!41644))

(declare-fun res!34740 () Bool)

(assert (=> d!13157 (=> (not res!34740) (not e!41644))))

(declare-fun lt!26753 () ListLongMap!1363)

(assert (=> d!13157 (= res!34740 (contains!690 lt!26753 (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!26751 () List!1447)

(assert (=> d!13157 (= lt!26753 (ListLongMap!1364 lt!26751))))

(declare-fun lt!26752 () Unit!1685)

(declare-fun lt!26754 () Unit!1685)

(assert (=> d!13157 (= lt!26752 lt!26754)))

(assert (=> d!13157 (= (getValueByKey!124 lt!26751 (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!13157 (= lt!26754 (lemmaContainsTupThenGetReturnValue!44 lt!26751 (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!13157 (= lt!26751 (insertStrictlySorted!47 (toList!697 (map!1113 newMap!16)) (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!13157 (= (+!83 (map!1113 newMap!16) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26753)))

(declare-fun b!63526 () Bool)

(declare-fun res!34739 () Bool)

(assert (=> b!63526 (=> (not res!34739) (not e!41644))))

(assert (=> b!63526 (= res!34739 (= (getValueByKey!124 (toList!697 lt!26753) (_1!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1037 (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!63527 () Bool)

(assert (=> b!63527 (= e!41644 (contains!692 (toList!697 lt!26753) (tuple2!2053 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!13157 res!34740) b!63526))

(assert (= (and b!63526 res!34739) b!63527))

(declare-fun m!57741 () Bool)

(assert (=> d!13157 m!57741))

(declare-fun m!57743 () Bool)

(assert (=> d!13157 m!57743))

(declare-fun m!57745 () Bool)

(assert (=> d!13157 m!57745))

(declare-fun m!57747 () Bool)

(assert (=> d!13157 m!57747))

(declare-fun m!57749 () Bool)

(assert (=> b!63526 m!57749))

(declare-fun m!57751 () Bool)

(assert (=> b!63527 m!57751))

(assert (=> b!62747 d!13157))

(assert (=> b!62747 d!12571))

(assert (=> b!62475 d!12911))

(declare-fun d!13159 () Bool)

(assert (=> d!13159 (isDefined!78 (getValueByKey!124 (toList!697 lt!25977) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!26755 () Unit!1685)

(assert (=> d!13159 (= lt!26755 (choose!339 (toList!697 lt!25977) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!41645 () Bool)

(assert (=> d!13159 e!41645))

(declare-fun res!34741 () Bool)

(assert (=> d!13159 (=> (not res!34741) (not e!41645))))

(assert (=> d!13159 (= res!34741 (isStrictlySorted!281 (toList!697 lt!25977)))))

(assert (=> d!13159 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 lt!25977) #b1000000000000000000000000000000000000000000000000000000000000000) lt!26755)))

(declare-fun b!63528 () Bool)

(assert (=> b!63528 (= e!41645 (containsKey!128 (toList!697 lt!25977) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!13159 res!34741) b!63528))

(assert (=> d!13159 m!55807))

(assert (=> d!13159 m!55807))

(assert (=> d!13159 m!55993))

(declare-fun m!57753 () Bool)

(assert (=> d!13159 m!57753))

(assert (=> d!13159 m!56319))

(assert (=> b!63528 m!55989))

(assert (=> b!62574 d!13159))

(assert (=> b!62574 d!12981))

(assert (=> b!62574 d!12983))

(assert (=> d!12607 d!12755))

(declare-fun b!63529 () Bool)

(declare-fun e!41646 () Bool)

(declare-fun call!5046 () Bool)

(assert (=> b!63529 (= e!41646 call!5046)))

(declare-fun bm!5043 () Bool)

(assert (=> bm!5043 (= call!5046 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3718 (_2!1036 lt!25898)) (mask!5992 (_2!1036 lt!25898))))))

(declare-fun b!63531 () Bool)

(declare-fun e!41647 () Bool)

(assert (=> b!63531 (= e!41647 call!5046)))

(declare-fun b!63532 () Bool)

(declare-fun e!41648 () Bool)

(assert (=> b!63532 (= e!41648 e!41647)))

(declare-fun c!8611 () Bool)

(assert (=> b!63532 (= c!8611 (validKeyInArray!0 (select (arr!1786 (_keys!3718 (_2!1036 lt!25898))) #b00000000000000000000000000000000)))))

(declare-fun b!63530 () Bool)

(assert (=> b!63530 (= e!41647 e!41646)))

(declare-fun lt!26757 () (_ BitVec 64))

(assert (=> b!63530 (= lt!26757 (select (arr!1786 (_keys!3718 (_2!1036 lt!25898))) #b00000000000000000000000000000000))))

(declare-fun lt!26758 () Unit!1685)

(assert (=> b!63530 (= lt!26758 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3718 (_2!1036 lt!25898)) lt!26757 #b00000000000000000000000000000000))))

(assert (=> b!63530 (arrayContainsKey!0 (_keys!3718 (_2!1036 lt!25898)) lt!26757 #b00000000000000000000000000000000)))

(declare-fun lt!26756 () Unit!1685)

(assert (=> b!63530 (= lt!26756 lt!26758)))

(declare-fun res!34743 () Bool)

(assert (=> b!63530 (= res!34743 (= (seekEntryOrOpen!0 (select (arr!1786 (_keys!3718 (_2!1036 lt!25898))) #b00000000000000000000000000000000) (_keys!3718 (_2!1036 lt!25898)) (mask!5992 (_2!1036 lt!25898))) (Found!232 #b00000000000000000000000000000000)))))

(assert (=> b!63530 (=> (not res!34743) (not e!41646))))

(declare-fun d!13161 () Bool)

(declare-fun res!34742 () Bool)

(assert (=> d!13161 (=> res!34742 e!41648)))

(assert (=> d!13161 (= res!34742 (bvsge #b00000000000000000000000000000000 (size!2019 (_keys!3718 (_2!1036 lt!25898)))))))

(assert (=> d!13161 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3718 (_2!1036 lt!25898)) (mask!5992 (_2!1036 lt!25898))) e!41648)))

(assert (= (and d!13161 (not res!34742)) b!63532))

(assert (= (and b!63532 c!8611) b!63530))

(assert (= (and b!63532 (not c!8611)) b!63531))

(assert (= (and b!63530 res!34743) b!63529))

(assert (= (or b!63529 b!63531) bm!5043))

(declare-fun m!57755 () Bool)

(assert (=> bm!5043 m!57755))

(assert (=> b!63532 m!56425))

(assert (=> b!63532 m!56425))

(assert (=> b!63532 m!56427))

(assert (=> b!63530 m!56425))

(declare-fun m!57757 () Bool)

(assert (=> b!63530 m!57757))

(declare-fun m!57759 () Bool)

(assert (=> b!63530 m!57759))

(assert (=> b!63530 m!56425))

(declare-fun m!57761 () Bool)

(assert (=> b!63530 m!57761))

(assert (=> b!62406 d!13161))

(declare-fun b!63533 () Bool)

(declare-fun e!41649 () Bool)

(assert (=> b!63533 (= e!41649 (contains!691 Nil!1443 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!63535 () Bool)

(declare-fun e!41652 () Bool)

(declare-fun e!41650 () Bool)

(assert (=> b!63535 (= e!41652 e!41650)))

(declare-fun res!34746 () Bool)

(assert (=> b!63535 (=> (not res!34746) (not e!41650))))

(assert (=> b!63535 (= res!34746 (not e!41649))))

(declare-fun res!34744 () Bool)

(assert (=> b!63535 (=> (not res!34744) (not e!41649))))

(assert (=> b!63535 (= res!34744 (validKeyInArray!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun bm!5044 () Bool)

(declare-fun call!5047 () Bool)

(declare-fun c!8612 () Bool)

(assert (=> bm!5044 (= call!5047 (arrayNoDuplicates!0 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!8612 (Cons!1442 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) #b00000000000000000000000000000000) Nil!1443) Nil!1443)))))

(declare-fun b!63536 () Bool)

(declare-fun e!41651 () Bool)

(assert (=> b!63536 (= e!41651 call!5047)))

(declare-fun b!63537 () Bool)

(assert (=> b!63537 (= e!41651 call!5047)))

(declare-fun b!63534 () Bool)

(assert (=> b!63534 (= e!41650 e!41651)))

(assert (=> b!63534 (= c!8612 (validKeyInArray!0 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun d!13163 () Bool)

(declare-fun res!34745 () Bool)

(assert (=> d!13163 (=> res!34745 e!41652)))

(assert (=> d!13163 (= res!34745 (bvsge #b00000000000000000000000000000000 (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992))))))))

(assert (=> d!13163 (= (arrayNoDuplicates!0 (_keys!3718 (v!2412 (underlying!229 thiss!992))) #b00000000000000000000000000000000 Nil!1443) e!41652)))

(assert (= (and d!13163 (not res!34745)) b!63535))

(assert (= (and b!63535 res!34744) b!63533))

(assert (= (and b!63535 res!34746) b!63534))

(assert (= (and b!63534 c!8612) b!63536))

(assert (= (and b!63534 (not c!8612)) b!63537))

(assert (= (or b!63536 b!63537) bm!5044))

(assert (=> b!63533 m!56373))

(assert (=> b!63533 m!56373))

(declare-fun m!57763 () Bool)

(assert (=> b!63533 m!57763))

(assert (=> b!63535 m!56373))

(assert (=> b!63535 m!56373))

(assert (=> b!63535 m!56375))

(assert (=> bm!5044 m!56373))

(declare-fun m!57765 () Bool)

(assert (=> bm!5044 m!57765))

(assert (=> b!63534 m!56373))

(assert (=> b!63534 m!56373))

(assert (=> b!63534 m!56375))

(assert (=> b!62443 d!13163))

(declare-fun d!13165 () Bool)

(assert (=> d!13165 (= (get!1092 (getValueByKey!124 (toList!697 (+!83 lt!25973 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!25988)) (v!2418 (getValueByKey!124 (toList!697 (+!83 lt!25973 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!25988)))))

(assert (=> d!12653 d!13165))

(declare-fun d!13167 () Bool)

(declare-fun c!8613 () Bool)

(assert (=> d!13167 (= c!8613 (and ((_ is Cons!1443) (toList!697 (+!83 lt!25973 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))) (= (_1!1037 (h!2026 (toList!697 (+!83 lt!25973 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))) lt!25988)))))

(declare-fun e!41653 () Option!130)

(assert (=> d!13167 (= (getValueByKey!124 (toList!697 (+!83 lt!25973 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))) lt!25988) e!41653)))

(declare-fun b!63538 () Bool)

(assert (=> b!63538 (= e!41653 (Some!129 (_2!1037 (h!2026 (toList!697 (+!83 lt!25973 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))))))))

(declare-fun b!63541 () Bool)

(declare-fun e!41654 () Option!130)

(assert (=> b!63541 (= e!41654 None!128)))

(declare-fun b!63539 () Bool)

(assert (=> b!63539 (= e!41653 e!41654)))

(declare-fun c!8614 () Bool)

(assert (=> b!63539 (= c!8614 (and ((_ is Cons!1443) (toList!697 (+!83 lt!25973 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))) (not (= (_1!1037 (h!2026 (toList!697 (+!83 lt!25973 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992)))))))) lt!25988))))))

(declare-fun b!63540 () Bool)

(assert (=> b!63540 (= e!41654 (getValueByKey!124 (t!4832 (toList!697 (+!83 lt!25973 (tuple2!2053 lt!25984 (minValue!1999 (v!2412 (underlying!229 thiss!992))))))) lt!25988))))

(assert (= (and d!13167 c!8613) b!63538))

(assert (= (and d!13167 (not c!8613)) b!63539))

(assert (= (and b!63539 c!8614) b!63540))

(assert (= (and b!63539 (not c!8614)) b!63541))

(declare-fun m!57767 () Bool)

(assert (=> b!63540 m!57767))

(assert (=> d!12653 d!13167))

(declare-fun d!13169 () Bool)

(assert (=> d!13169 (= (apply!68 lt!26161 lt!26176) (get!1092 (getValueByKey!124 (toList!697 lt!26161) lt!26176)))))

(declare-fun bs!2766 () Bool)

(assert (= bs!2766 d!13169))

(declare-fun m!57769 () Bool)

(assert (=> bs!2766 m!57769))

(assert (=> bs!2766 m!57769))

(declare-fun m!57771 () Bool)

(assert (=> bs!2766 m!57771))

(assert (=> b!62640 d!13169))

(declare-fun d!13171 () Bool)

(assert (=> d!13171 (contains!690 (+!83 lt!26164 (tuple2!2053 lt!26170 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)))) lt!26177)))

(declare-fun lt!26759 () Unit!1685)

(assert (=> d!13171 (= lt!26759 (choose!345 lt!26164 lt!26170 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)) lt!26177))))

(assert (=> d!13171 (contains!690 lt!26164 lt!26177)))

(assert (=> d!13171 (= (addStillContains!44 lt!26164 lt!26170 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)) lt!26177) lt!26759)))

(declare-fun bs!2767 () Bool)

(assert (= bs!2767 d!13171))

(assert (=> bs!2767 m!56175))

(assert (=> bs!2767 m!56175))

(assert (=> bs!2767 m!56177))

(declare-fun m!57773 () Bool)

(assert (=> bs!2767 m!57773))

(declare-fun m!57775 () Bool)

(assert (=> bs!2767 m!57775))

(assert (=> b!62640 d!13171))

(declare-fun d!13173 () Bool)

(declare-fun e!41655 () Bool)

(assert (=> d!13173 e!41655))

(declare-fun res!34748 () Bool)

(assert (=> d!13173 (=> (not res!34748) (not e!41655))))

(declare-fun lt!26762 () ListLongMap!1363)

(assert (=> d!13173 (= res!34748 (contains!690 lt!26762 (_1!1037 (tuple2!2053 lt!26170 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))))))))

(declare-fun lt!26760 () List!1447)

(assert (=> d!13173 (= lt!26762 (ListLongMap!1364 lt!26760))))

(declare-fun lt!26761 () Unit!1685)

(declare-fun lt!26763 () Unit!1685)

(assert (=> d!13173 (= lt!26761 lt!26763)))

(assert (=> d!13173 (= (getValueByKey!124 lt!26760 (_1!1037 (tuple2!2053 lt!26170 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))))) (Some!129 (_2!1037 (tuple2!2053 lt!26170 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))))))))

(assert (=> d!13173 (= lt!26763 (lemmaContainsTupThenGetReturnValue!44 lt!26760 (_1!1037 (tuple2!2053 lt!26170 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)))) (_2!1037 (tuple2!2053 lt!26170 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))))))))

(assert (=> d!13173 (= lt!26760 (insertStrictlySorted!47 (toList!697 lt!26164) (_1!1037 (tuple2!2053 lt!26170 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)))) (_2!1037 (tuple2!2053 lt!26170 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))))))))

(assert (=> d!13173 (= (+!83 lt!26164 (tuple2!2053 lt!26170 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)))) lt!26762)))

(declare-fun b!63542 () Bool)

(declare-fun res!34747 () Bool)

(assert (=> b!63542 (=> (not res!34747) (not e!41655))))

(assert (=> b!63542 (= res!34747 (= (getValueByKey!124 (toList!697 lt!26762) (_1!1037 (tuple2!2053 lt!26170 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))))) (Some!129 (_2!1037 (tuple2!2053 lt!26170 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)))))))))

(declare-fun b!63543 () Bool)

(assert (=> b!63543 (= e!41655 (contains!692 (toList!697 lt!26762) (tuple2!2053 lt!26170 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)))))))

(assert (= (and d!13173 res!34748) b!63542))

(assert (= (and b!63542 res!34747) b!63543))

(declare-fun m!57777 () Bool)

(assert (=> d!13173 m!57777))

(declare-fun m!57779 () Bool)

(assert (=> d!13173 m!57779))

(declare-fun m!57781 () Bool)

(assert (=> d!13173 m!57781))

(declare-fun m!57783 () Bool)

(assert (=> d!13173 m!57783))

(declare-fun m!57785 () Bool)

(assert (=> b!63542 m!57785))

(declare-fun m!57787 () Bool)

(assert (=> b!63543 m!57787))

(assert (=> b!62640 d!13173))

(declare-fun d!13175 () Bool)

(declare-fun e!41656 () Bool)

(assert (=> d!13175 e!41656))

(declare-fun res!34750 () Bool)

(assert (=> d!13175 (=> (not res!34750) (not e!41656))))

(declare-fun lt!26766 () ListLongMap!1363)

(assert (=> d!13175 (= res!34750 (contains!690 lt!26766 (_1!1037 (tuple2!2053 lt!26174 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))))))))

(declare-fun lt!26764 () List!1447)

(assert (=> d!13175 (= lt!26766 (ListLongMap!1364 lt!26764))))

(declare-fun lt!26765 () Unit!1685)

(declare-fun lt!26767 () Unit!1685)

(assert (=> d!13175 (= lt!26765 lt!26767)))

(assert (=> d!13175 (= (getValueByKey!124 lt!26764 (_1!1037 (tuple2!2053 lt!26174 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))))) (Some!129 (_2!1037 (tuple2!2053 lt!26174 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))))))))

(assert (=> d!13175 (= lt!26767 (lemmaContainsTupThenGetReturnValue!44 lt!26764 (_1!1037 (tuple2!2053 lt!26174 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)))) (_2!1037 (tuple2!2053 lt!26174 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))))))))

(assert (=> d!13175 (= lt!26764 (insertStrictlySorted!47 (toList!697 lt!26169) (_1!1037 (tuple2!2053 lt!26174 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)))) (_2!1037 (tuple2!2053 lt!26174 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))))))))

(assert (=> d!13175 (= (+!83 lt!26169 (tuple2!2053 lt!26174 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)))) lt!26766)))

(declare-fun b!63544 () Bool)

(declare-fun res!34749 () Bool)

(assert (=> b!63544 (=> (not res!34749) (not e!41656))))

(assert (=> b!63544 (= res!34749 (= (getValueByKey!124 (toList!697 lt!26766) (_1!1037 (tuple2!2053 lt!26174 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))))) (Some!129 (_2!1037 (tuple2!2053 lt!26174 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)))))))))

(declare-fun b!63545 () Bool)

(assert (=> b!63545 (= e!41656 (contains!692 (toList!697 lt!26766) (tuple2!2053 lt!26174 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)))))))

(assert (= (and d!13175 res!34750) b!63544))

(assert (= (and b!63544 res!34749) b!63545))

(declare-fun m!57789 () Bool)

(assert (=> d!13175 m!57789))

(declare-fun m!57791 () Bool)

(assert (=> d!13175 m!57791))

(declare-fun m!57793 () Bool)

(assert (=> d!13175 m!57793))

(declare-fun m!57795 () Bool)

(assert (=> d!13175 m!57795))

(declare-fun m!57797 () Bool)

(assert (=> b!63544 m!57797))

(declare-fun m!57799 () Bool)

(assert (=> b!63545 m!57799))

(assert (=> b!62640 d!13175))

(declare-fun d!13177 () Bool)

(assert (=> d!13177 (= (apply!68 (+!83 lt!26161 (tuple2!2053 lt!26172 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))) lt!26176) (apply!68 lt!26161 lt!26176))))

(declare-fun lt!26768 () Unit!1685)

(assert (=> d!13177 (= lt!26768 (choose!344 lt!26161 lt!26172 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)) lt!26176))))

(declare-fun e!41657 () Bool)

(assert (=> d!13177 e!41657))

(declare-fun res!34751 () Bool)

(assert (=> d!13177 (=> (not res!34751) (not e!41657))))

(assert (=> d!13177 (= res!34751 (contains!690 lt!26161 lt!26176))))

(assert (=> d!13177 (= (addApplyDifferent!44 lt!26161 lt!26172 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)) lt!26176) lt!26768)))

(declare-fun b!63546 () Bool)

(assert (=> b!63546 (= e!41657 (not (= lt!26176 lt!26172)))))

(assert (= (and d!13177 res!34751) b!63546))

(declare-fun m!57801 () Bool)

(assert (=> d!13177 m!57801))

(assert (=> d!13177 m!56195))

(assert (=> d!13177 m!56193))

(assert (=> d!13177 m!56197))

(declare-fun m!57803 () Bool)

(assert (=> d!13177 m!57803))

(assert (=> d!13177 m!56193))

(assert (=> b!62640 d!13177))

(declare-fun d!13179 () Bool)

(assert (=> d!13179 (= (apply!68 (+!83 lt!26166 (tuple2!2053 lt!26178 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))) lt!26180) (get!1092 (getValueByKey!124 (toList!697 (+!83 lt!26166 (tuple2!2053 lt!26178 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))) lt!26180)))))

(declare-fun bs!2768 () Bool)

(assert (= bs!2768 d!13179))

(declare-fun m!57805 () Bool)

(assert (=> bs!2768 m!57805))

(assert (=> bs!2768 m!57805))

(declare-fun m!57807 () Bool)

(assert (=> bs!2768 m!57807))

(assert (=> b!62640 d!13179))

(assert (=> b!62640 d!12877))

(declare-fun d!13181 () Bool)

(declare-fun e!41658 () Bool)

(assert (=> d!13181 e!41658))

(declare-fun res!34753 () Bool)

(assert (=> d!13181 (=> (not res!34753) (not e!41658))))

(declare-fun lt!26771 () ListLongMap!1363)

(assert (=> d!13181 (= res!34753 (contains!690 lt!26771 (_1!1037 (tuple2!2053 lt!26178 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))))))

(declare-fun lt!26769 () List!1447)

(assert (=> d!13181 (= lt!26771 (ListLongMap!1364 lt!26769))))

(declare-fun lt!26770 () Unit!1685)

(declare-fun lt!26772 () Unit!1685)

(assert (=> d!13181 (= lt!26770 lt!26772)))

(assert (=> d!13181 (= (getValueByKey!124 lt!26769 (_1!1037 (tuple2!2053 lt!26178 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))) (Some!129 (_2!1037 (tuple2!2053 lt!26178 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))))))

(assert (=> d!13181 (= lt!26772 (lemmaContainsTupThenGetReturnValue!44 lt!26769 (_1!1037 (tuple2!2053 lt!26178 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))) (_2!1037 (tuple2!2053 lt!26178 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))))))

(assert (=> d!13181 (= lt!26769 (insertStrictlySorted!47 (toList!697 lt!26166) (_1!1037 (tuple2!2053 lt!26178 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))) (_2!1037 (tuple2!2053 lt!26178 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))))))

(assert (=> d!13181 (= (+!83 lt!26166 (tuple2!2053 lt!26178 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))) lt!26771)))

(declare-fun b!63547 () Bool)

(declare-fun res!34752 () Bool)

(assert (=> b!63547 (=> (not res!34752) (not e!41658))))

(assert (=> b!63547 (= res!34752 (= (getValueByKey!124 (toList!697 lt!26771) (_1!1037 (tuple2!2053 lt!26178 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))) (Some!129 (_2!1037 (tuple2!2053 lt!26178 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))))))))

(declare-fun b!63548 () Bool)

(assert (=> b!63548 (= e!41658 (contains!692 (toList!697 lt!26771) (tuple2!2053 lt!26178 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))))))

(assert (= (and d!13181 res!34753) b!63547))

(assert (= (and b!63547 res!34752) b!63548))

(declare-fun m!57809 () Bool)

(assert (=> d!13181 m!57809))

(declare-fun m!57811 () Bool)

(assert (=> d!13181 m!57811))

(declare-fun m!57813 () Bool)

(assert (=> d!13181 m!57813))

(declare-fun m!57815 () Bool)

(assert (=> d!13181 m!57815))

(declare-fun m!57817 () Bool)

(assert (=> b!63547 m!57817))

(declare-fun m!57819 () Bool)

(assert (=> b!63548 m!57819))

(assert (=> b!62640 d!13181))

(declare-fun d!13183 () Bool)

(assert (=> d!13183 (= (apply!68 (+!83 lt!26169 (tuple2!2053 lt!26174 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)))) lt!26162) (get!1092 (getValueByKey!124 (toList!697 (+!83 lt!26169 (tuple2!2053 lt!26174 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))))) lt!26162)))))

(declare-fun bs!2769 () Bool)

(assert (= bs!2769 d!13183))

(declare-fun m!57821 () Bool)

(assert (=> bs!2769 m!57821))

(assert (=> bs!2769 m!57821))

(declare-fun m!57823 () Bool)

(assert (=> bs!2769 m!57823))

(assert (=> b!62640 d!13183))

(declare-fun d!13185 () Bool)

(assert (=> d!13185 (= (apply!68 (+!83 lt!26161 (tuple2!2053 lt!26172 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))) lt!26176) (get!1092 (getValueByKey!124 (toList!697 (+!83 lt!26161 (tuple2!2053 lt!26172 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))) lt!26176)))))

(declare-fun bs!2770 () Bool)

(assert (= bs!2770 d!13185))

(declare-fun m!57825 () Bool)

(assert (=> bs!2770 m!57825))

(assert (=> bs!2770 m!57825))

(declare-fun m!57827 () Bool)

(assert (=> bs!2770 m!57827))

(assert (=> b!62640 d!13185))

(declare-fun d!13187 () Bool)

(declare-fun e!41659 () Bool)

(assert (=> d!13187 e!41659))

(declare-fun res!34754 () Bool)

(assert (=> d!13187 (=> res!34754 e!41659)))

(declare-fun lt!26776 () Bool)

(assert (=> d!13187 (= res!34754 (not lt!26776))))

(declare-fun lt!26774 () Bool)

(assert (=> d!13187 (= lt!26776 lt!26774)))

(declare-fun lt!26775 () Unit!1685)

(declare-fun e!41660 () Unit!1685)

(assert (=> d!13187 (= lt!26775 e!41660)))

(declare-fun c!8615 () Bool)

(assert (=> d!13187 (= c!8615 lt!26774)))

(assert (=> d!13187 (= lt!26774 (containsKey!128 (toList!697 (+!83 lt!26164 (tuple2!2053 lt!26170 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))))) lt!26177))))

(assert (=> d!13187 (= (contains!690 (+!83 lt!26164 (tuple2!2053 lt!26170 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)))) lt!26177) lt!26776)))

(declare-fun b!63549 () Bool)

(declare-fun lt!26773 () Unit!1685)

(assert (=> b!63549 (= e!41660 lt!26773)))

(assert (=> b!63549 (= lt!26773 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 (+!83 lt!26164 (tuple2!2053 lt!26170 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))))) lt!26177))))

(assert (=> b!63549 (isDefined!78 (getValueByKey!124 (toList!697 (+!83 lt!26164 (tuple2!2053 lt!26170 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))))) lt!26177))))

(declare-fun b!63550 () Bool)

(declare-fun Unit!1747 () Unit!1685)

(assert (=> b!63550 (= e!41660 Unit!1747)))

(declare-fun b!63551 () Bool)

(assert (=> b!63551 (= e!41659 (isDefined!78 (getValueByKey!124 (toList!697 (+!83 lt!26164 (tuple2!2053 lt!26170 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16))))) lt!26177)))))

(assert (= (and d!13187 c!8615) b!63549))

(assert (= (and d!13187 (not c!8615)) b!63550))

(assert (= (and d!13187 (not res!34754)) b!63551))

(declare-fun m!57829 () Bool)

(assert (=> d!13187 m!57829))

(declare-fun m!57831 () Bool)

(assert (=> b!63549 m!57831))

(declare-fun m!57833 () Bool)

(assert (=> b!63549 m!57833))

(assert (=> b!63549 m!57833))

(declare-fun m!57835 () Bool)

(assert (=> b!63549 m!57835))

(assert (=> b!63551 m!57833))

(assert (=> b!63551 m!57833))

(assert (=> b!63551 m!57835))

(assert (=> b!62640 d!13187))

(declare-fun d!13189 () Bool)

(assert (=> d!13189 (= (apply!68 (+!83 lt!26166 (tuple2!2053 lt!26178 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))) lt!26180) (apply!68 lt!26166 lt!26180))))

(declare-fun lt!26777 () Unit!1685)

(assert (=> d!13189 (= lt!26777 (choose!344 lt!26166 lt!26178 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)) lt!26180))))

(declare-fun e!41661 () Bool)

(assert (=> d!13189 e!41661))

(declare-fun res!34755 () Bool)

(assert (=> d!13189 (=> (not res!34755) (not e!41661))))

(assert (=> d!13189 (= res!34755 (contains!690 lt!26166 lt!26180))))

(assert (=> d!13189 (= (addApplyDifferent!44 lt!26166 lt!26178 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)) lt!26180) lt!26777)))

(declare-fun b!63552 () Bool)

(assert (=> b!63552 (= e!41661 (not (= lt!26180 lt!26178)))))

(assert (= (and d!13189 res!34755) b!63552))

(declare-fun m!57837 () Bool)

(assert (=> d!13189 m!57837))

(assert (=> d!13189 m!56185))

(assert (=> d!13189 m!56181))

(assert (=> d!13189 m!56183))

(declare-fun m!57839 () Bool)

(assert (=> d!13189 m!57839))

(assert (=> d!13189 m!56181))

(assert (=> b!62640 d!13189))

(declare-fun d!13191 () Bool)

(assert (=> d!13191 (= (apply!68 lt!26166 lt!26180) (get!1092 (getValueByKey!124 (toList!697 lt!26166) lt!26180)))))

(declare-fun bs!2771 () Bool)

(assert (= bs!2771 d!13191))

(declare-fun m!57841 () Bool)

(assert (=> bs!2771 m!57841))

(assert (=> bs!2771 m!57841))

(declare-fun m!57843 () Bool)

(assert (=> bs!2771 m!57843))

(assert (=> b!62640 d!13191))

(declare-fun d!13193 () Bool)

(assert (=> d!13193 (= (apply!68 lt!26169 lt!26162) (get!1092 (getValueByKey!124 (toList!697 lt!26169) lt!26162)))))

(declare-fun bs!2772 () Bool)

(assert (= bs!2772 d!13193))

(declare-fun m!57845 () Bool)

(assert (=> bs!2772 m!57845))

(assert (=> bs!2772 m!57845))

(declare-fun m!57847 () Bool)

(assert (=> bs!2772 m!57847))

(assert (=> b!62640 d!13193))

(declare-fun d!13195 () Bool)

(assert (=> d!13195 (= (apply!68 (+!83 lt!26169 (tuple2!2053 lt!26174 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)))) lt!26162) (apply!68 lt!26169 lt!26162))))

(declare-fun lt!26778 () Unit!1685)

(assert (=> d!13195 (= lt!26778 (choose!344 lt!26169 lt!26174 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)) lt!26162))))

(declare-fun e!41662 () Bool)

(assert (=> d!13195 e!41662))

(declare-fun res!34756 () Bool)

(assert (=> d!13195 (=> (not res!34756) (not e!41662))))

(assert (=> d!13195 (= res!34756 (contains!690 lt!26169 lt!26162))))

(assert (=> d!13195 (= (addApplyDifferent!44 lt!26169 lt!26174 (ite (and c!8266 c!8271) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1999 newMap!16)) lt!26162) lt!26778)))

(declare-fun b!63553 () Bool)

(assert (=> b!63553 (= e!41662 (not (= lt!26162 lt!26174)))))

(assert (= (and d!13195 res!34756) b!63553))

(declare-fun m!57849 () Bool)

(assert (=> d!13195 m!57849))

(assert (=> d!13195 m!56179))

(assert (=> d!13195 m!56187))

(assert (=> d!13195 m!56201))

(declare-fun m!57851 () Bool)

(assert (=> d!13195 m!57851))

(assert (=> d!13195 m!56187))

(assert (=> b!62640 d!13195))

(declare-fun d!13197 () Bool)

(declare-fun e!41663 () Bool)

(assert (=> d!13197 e!41663))

(declare-fun res!34758 () Bool)

(assert (=> d!13197 (=> (not res!34758) (not e!41663))))

(declare-fun lt!26781 () ListLongMap!1363)

(assert (=> d!13197 (= res!34758 (contains!690 lt!26781 (_1!1037 (tuple2!2053 lt!26172 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))))))

(declare-fun lt!26779 () List!1447)

(assert (=> d!13197 (= lt!26781 (ListLongMap!1364 lt!26779))))

(declare-fun lt!26780 () Unit!1685)

(declare-fun lt!26782 () Unit!1685)

(assert (=> d!13197 (= lt!26780 lt!26782)))

(assert (=> d!13197 (= (getValueByKey!124 lt!26779 (_1!1037 (tuple2!2053 lt!26172 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))) (Some!129 (_2!1037 (tuple2!2053 lt!26172 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))))))

(assert (=> d!13197 (= lt!26782 (lemmaContainsTupThenGetReturnValue!44 lt!26779 (_1!1037 (tuple2!2053 lt!26172 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))) (_2!1037 (tuple2!2053 lt!26172 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))))))

(assert (=> d!13197 (= lt!26779 (insertStrictlySorted!47 (toList!697 lt!26161) (_1!1037 (tuple2!2053 lt!26172 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))) (_2!1037 (tuple2!2053 lt!26172 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))))))

(assert (=> d!13197 (= (+!83 lt!26161 (tuple2!2053 lt!26172 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))) lt!26781)))

(declare-fun b!63554 () Bool)

(declare-fun res!34757 () Bool)

(assert (=> b!63554 (=> (not res!34757) (not e!41663))))

(assert (=> b!63554 (= res!34757 (= (getValueByKey!124 (toList!697 lt!26781) (_1!1037 (tuple2!2053 lt!26172 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16))))) (Some!129 (_2!1037 (tuple2!2053 lt!26172 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))))))))

(declare-fun b!63555 () Bool)

(assert (=> b!63555 (= e!41663 (contains!692 (toList!697 lt!26781) (tuple2!2053 lt!26172 (ite c!8266 (ite c!8271 (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1999 newMap!16)))))))

(assert (= (and d!13197 res!34758) b!63554))

(assert (= (and b!63554 res!34757) b!63555))

(declare-fun m!57853 () Bool)

(assert (=> d!13197 m!57853))

(declare-fun m!57855 () Bool)

(assert (=> d!13197 m!57855))

(declare-fun m!57857 () Bool)

(assert (=> d!13197 m!57857))

(declare-fun m!57859 () Bool)

(assert (=> d!13197 m!57859))

(declare-fun m!57861 () Bool)

(assert (=> b!63554 m!57861))

(declare-fun m!57863 () Bool)

(assert (=> b!63555 m!57863))

(assert (=> b!62640 d!13197))

(declare-fun d!13199 () Bool)

(assert (=> d!13199 (contains!690 (getCurrentListMap!393 (_keys!3718 newMap!16) lt!25918 (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (select (arr!1786 (_keys!3718 newMap!16)) (index!3054 lt!25902)))))

(assert (=> d!13199 true))

(declare-fun _$16!84 () Unit!1685)

(assert (=> d!13199 (= (choose!342 (_keys!3718 newMap!16) lt!25918 (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (index!3054 lt!25902) (defaultEntry!2087 newMap!16)) _$16!84)))

(declare-fun bs!2773 () Bool)

(assert (= bs!2773 d!13199))

(assert (=> bs!2773 m!56037))

(assert (=> bs!2773 m!55665))

(assert (=> bs!2773 m!56037))

(assert (=> bs!2773 m!55665))

(assert (=> bs!2773 m!56039))

(assert (=> d!12647 d!13199))

(assert (=> d!12647 d!12755))

(declare-fun d!13201 () Bool)

(declare-fun res!34759 () Bool)

(declare-fun e!41664 () Bool)

(assert (=> d!13201 (=> res!34759 e!41664)))

(assert (=> d!13201 (= res!34759 (and ((_ is Cons!1443) (toList!697 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))) (= (_1!1037 (h!2026 (toList!697 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355))))))

(assert (=> d!13201 (= (containsKey!128 (toList!697 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)) e!41664)))

(declare-fun b!63556 () Bool)

(declare-fun e!41665 () Bool)

(assert (=> b!63556 (= e!41664 e!41665)))

(declare-fun res!34760 () Bool)

(assert (=> b!63556 (=> (not res!34760) (not e!41665))))

(assert (=> b!63556 (= res!34760 (and (or (not ((_ is Cons!1443) (toList!697 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))))) (bvsle (_1!1037 (h!2026 (toList!697 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355))) ((_ is Cons!1443) (toList!697 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))) (bvslt (_1!1037 (h!2026 (toList!697 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355))))))

(declare-fun b!63557 () Bool)

(assert (=> b!63557 (= e!41665 (containsKey!128 (t!4832 (toList!697 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(assert (= (and d!13201 (not res!34759)) b!63556))

(assert (= (and b!63556 res!34760) b!63557))

(assert (=> b!63557 m!55481))

(declare-fun m!57865 () Bool)

(assert (=> b!63557 m!57865))

(assert (=> d!12651 d!13201))

(declare-fun d!13203 () Bool)

(declare-fun e!41666 () Bool)

(assert (=> d!13203 e!41666))

(declare-fun res!34761 () Bool)

(assert (=> d!13203 (=> res!34761 e!41666)))

(declare-fun lt!26786 () Bool)

(assert (=> d!13203 (= res!34761 (not lt!26786))))

(declare-fun lt!26784 () Bool)

(assert (=> d!13203 (= lt!26786 lt!26784)))

(declare-fun lt!26785 () Unit!1685)

(declare-fun e!41667 () Unit!1685)

(assert (=> d!13203 (= lt!26785 e!41667)))

(declare-fun c!8616 () Bool)

(assert (=> d!13203 (= c!8616 lt!26784)))

(assert (=> d!13203 (= lt!26784 (containsKey!128 (toList!697 lt!26165) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!13203 (= (contains!690 lt!26165 #b1000000000000000000000000000000000000000000000000000000000000000) lt!26786)))

(declare-fun b!63558 () Bool)

(declare-fun lt!26783 () Unit!1685)

(assert (=> b!63558 (= e!41667 lt!26783)))

(assert (=> b!63558 (= lt!26783 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 lt!26165) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!63558 (isDefined!78 (getValueByKey!124 (toList!697 lt!26165) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63559 () Bool)

(declare-fun Unit!1748 () Unit!1685)

(assert (=> b!63559 (= e!41667 Unit!1748)))

(declare-fun b!63560 () Bool)

(assert (=> b!63560 (= e!41666 (isDefined!78 (getValueByKey!124 (toList!697 lt!26165) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!13203 c!8616) b!63558))

(assert (= (and d!13203 (not c!8616)) b!63559))

(assert (= (and d!13203 (not res!34761)) b!63560))

(declare-fun m!57867 () Bool)

(assert (=> d!13203 m!57867))

(declare-fun m!57869 () Bool)

(assert (=> b!63558 m!57869))

(assert (=> b!63558 m!56763))

(assert (=> b!63558 m!56763))

(declare-fun m!57871 () Bool)

(assert (=> b!63558 m!57871))

(assert (=> b!63560 m!56763))

(assert (=> b!63560 m!56763))

(assert (=> b!63560 m!57871))

(assert (=> bm!4931 d!13203))

(assert (=> bm!4945 d!12689))

(declare-fun d!13205 () Bool)

(declare-fun e!41668 () Bool)

(assert (=> d!13205 e!41668))

(declare-fun res!34763 () Bool)

(assert (=> d!13205 (=> (not res!34763) (not e!41668))))

(declare-fun lt!26789 () ListLongMap!1363)

(assert (=> d!13205 (= res!34763 (contains!690 lt!26789 (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!26787 () List!1447)

(assert (=> d!13205 (= lt!26789 (ListLongMap!1364 lt!26787))))

(declare-fun lt!26788 () Unit!1685)

(declare-fun lt!26790 () Unit!1685)

(assert (=> d!13205 (= lt!26788 lt!26790)))

(assert (=> d!13205 (= (getValueByKey!124 lt!26787 (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!13205 (= lt!26790 (lemmaContainsTupThenGetReturnValue!44 lt!26787 (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!13205 (= lt!26787 (insertStrictlySorted!47 (toList!697 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16))) (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!13205 (= (+!83 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26789)))

(declare-fun b!63561 () Bool)

(declare-fun res!34762 () Bool)

(assert (=> b!63561 (=> (not res!34762) (not e!41668))))

(assert (=> b!63561 (= res!34762 (= (getValueByKey!124 (toList!697 lt!26789) (_1!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!129 (_2!1037 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!63562 () Bool)

(assert (=> b!63562 (= e!41668 (contains!692 (toList!697 lt!26789) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!13205 res!34763) b!63561))

(assert (= (and b!63561 res!34762) b!63562))

(declare-fun m!57873 () Bool)

(assert (=> d!13205 m!57873))

(declare-fun m!57875 () Bool)

(assert (=> d!13205 m!57875))

(declare-fun m!57877 () Bool)

(assert (=> d!13205 m!57877))

(declare-fun m!57879 () Bool)

(assert (=> d!13205 m!57879))

(declare-fun m!57881 () Bool)

(assert (=> b!63561 m!57881))

(declare-fun m!57883 () Bool)

(assert (=> b!63562 m!57883))

(assert (=> d!12625 d!13205))

(assert (=> d!12625 d!12619))

(declare-fun d!13207 () Bool)

(assert (=> d!13207 (= (+!83 (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) lt!25915 (zeroValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(assert (=> d!13207 true))

(declare-fun _$8!52 () Unit!1685)

(assert (=> d!13207 (= (choose!340 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) (extraKeys!1966 newMap!16) lt!25915 (zeroValue!1999 newMap!16) (minValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2087 newMap!16)) _$8!52)))

(declare-fun bs!2774 () Bool)

(assert (= bs!2774 d!13207))

(assert (=> bs!2774 m!55647))

(assert (=> bs!2774 m!55647))

(assert (=> bs!2774 m!55985))

(assert (=> bs!2774 m!55507))

(assert (=> bs!2774 m!55981))

(assert (=> d!12625 d!13207))

(declare-fun b!63563 () Bool)

(declare-fun res!34766 () Bool)

(declare-fun e!41670 () Bool)

(assert (=> b!63563 (=> (not res!34766) (not e!41670))))

(declare-fun e!41681 () Bool)

(assert (=> b!63563 (= res!34766 e!41681)))

(declare-fun c!8622 () Bool)

(assert (=> b!63563 (= c!8622 (not (= (bvand lt!25915 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun lt!26796 () ListLongMap!1363)

(declare-fun b!63564 () Bool)

(declare-fun e!41675 () Bool)

(assert (=> b!63564 (= e!41675 (= (apply!68 lt!26796 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!63565 () Bool)

(declare-fun e!41679 () Bool)

(assert (=> b!63565 (= e!41679 (= (apply!68 lt!26796 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1999 newMap!16)))))

(declare-fun d!13209 () Bool)

(assert (=> d!13209 e!41670))

(declare-fun res!34765 () Bool)

(assert (=> d!13209 (=> (not res!34765) (not e!41670))))

(assert (=> d!13209 (= res!34765 (or (bvsge #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))))

(declare-fun lt!26798 () ListLongMap!1363)

(assert (=> d!13209 (= lt!26796 lt!26798)))

(declare-fun lt!26804 () Unit!1685)

(declare-fun e!41677 () Unit!1685)

(assert (=> d!13209 (= lt!26804 e!41677)))

(declare-fun c!8619 () Bool)

(declare-fun e!41669 () Bool)

(assert (=> d!13209 (= c!8619 e!41669)))

(declare-fun res!34771 () Bool)

(assert (=> d!13209 (=> (not res!34771) (not e!41669))))

(assert (=> d!13209 (= res!34771 (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(declare-fun e!41678 () ListLongMap!1363)

(assert (=> d!13209 (= lt!26798 e!41678)))

(declare-fun c!8620 () Bool)

(assert (=> d!13209 (= c!8620 (and (not (= (bvand lt!25915 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!25915 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!13209 (validMask!0 (mask!5992 newMap!16))))

(assert (=> d!13209 (= (getCurrentListMap!393 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) lt!25915 (zeroValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)) lt!26796)))

(declare-fun b!63566 () Bool)

(declare-fun res!34770 () Bool)

(assert (=> b!63566 (=> (not res!34770) (not e!41670))))

(declare-fun e!41676 () Bool)

(assert (=> b!63566 (= res!34770 e!41676)))

(declare-fun res!34767 () Bool)

(assert (=> b!63566 (=> res!34767 e!41676)))

(declare-fun e!41674 () Bool)

(assert (=> b!63566 (= res!34767 (not e!41674))))

(declare-fun res!34768 () Bool)

(assert (=> b!63566 (=> (not res!34768) (not e!41674))))

(assert (=> b!63566 (= res!34768 (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(declare-fun bm!5045 () Bool)

(declare-fun call!5051 () ListLongMap!1363)

(declare-fun call!5052 () ListLongMap!1363)

(assert (=> bm!5045 (= call!5051 call!5052)))

(declare-fun b!63567 () Bool)

(declare-fun e!41673 () ListLongMap!1363)

(declare-fun call!5053 () ListLongMap!1363)

(assert (=> b!63567 (= e!41673 call!5053)))

(declare-fun bm!5046 () Bool)

(declare-fun call!5050 () Bool)

(assert (=> bm!5046 (= call!5050 (contains!690 lt!26796 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63568 () Bool)

(assert (=> b!63568 (= e!41681 (not call!5050))))

(declare-fun bm!5047 () Bool)

(declare-fun call!5054 () ListLongMap!1363)

(declare-fun call!5049 () ListLongMap!1363)

(assert (=> bm!5047 (= call!5054 call!5049)))

(declare-fun c!8621 () Bool)

(declare-fun bm!5048 () Bool)

(assert (=> bm!5048 (= call!5049 (+!83 (ite c!8620 call!5052 (ite c!8621 call!5051 call!5053)) (ite (or c!8620 c!8621) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!63569 () Bool)

(assert (=> b!63569 (= e!41669 (validKeyInArray!0 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63570 () Bool)

(assert (=> b!63570 (= e!41678 (+!83 call!5049 (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun bm!5049 () Bool)

(declare-fun call!5048 () Bool)

(assert (=> bm!5049 (= call!5048 (contains!690 lt!26796 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!63571 () Bool)

(declare-fun Unit!1749 () Unit!1685)

(assert (=> b!63571 (= e!41677 Unit!1749)))

(declare-fun b!63572 () Bool)

(assert (=> b!63572 (= e!41674 (validKeyInArray!0 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!63573 () Bool)

(declare-fun c!8617 () Bool)

(assert (=> b!63573 (= c!8617 (and (not (= (bvand lt!25915 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!25915 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!41680 () ListLongMap!1363)

(assert (=> b!63573 (= e!41680 e!41673)))

(declare-fun b!63574 () Bool)

(declare-fun e!41671 () Bool)

(assert (=> b!63574 (= e!41670 e!41671)))

(declare-fun c!8618 () Bool)

(assert (=> b!63574 (= c!8618 (not (= (bvand lt!25915 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!63575 () Bool)

(assert (=> b!63575 (= e!41678 e!41680)))

(assert (=> b!63575 (= c!8621 (and (not (= (bvand lt!25915 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!25915 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!63576 () Bool)

(declare-fun e!41672 () Bool)

(assert (=> b!63576 (= e!41676 e!41672)))

(declare-fun res!34769 () Bool)

(assert (=> b!63576 (=> (not res!34769) (not e!41672))))

(assert (=> b!63576 (= res!34769 (contains!690 lt!26796 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!63576 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(declare-fun b!63577 () Bool)

(assert (=> b!63577 (= e!41671 (not call!5048))))

(declare-fun bm!5050 () Bool)

(assert (=> bm!5050 (= call!5053 call!5051)))

(declare-fun b!63578 () Bool)

(assert (=> b!63578 (= e!41681 e!41679)))

(declare-fun res!34772 () Bool)

(assert (=> b!63578 (= res!34772 call!5050)))

(assert (=> b!63578 (=> (not res!34772) (not e!41679))))

(declare-fun bm!5051 () Bool)

(assert (=> bm!5051 (= call!5052 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) lt!25915 (zeroValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun b!63579 () Bool)

(assert (=> b!63579 (= e!41672 (= (apply!68 lt!26796 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000)) (get!1089 (select (arr!1787 (_values!2070 newMap!16)) #b00000000000000000000000000000000) (dynLambda!312 (defaultEntry!2087 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!63579 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2020 (_values!2070 newMap!16))))))

(assert (=> b!63579 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2019 (_keys!3718 newMap!16))))))

(declare-fun b!63580 () Bool)

(assert (=> b!63580 (= e!41673 call!5054)))

(declare-fun b!63581 () Bool)

(declare-fun lt!26810 () Unit!1685)

(assert (=> b!63581 (= e!41677 lt!26810)))

(declare-fun lt!26795 () ListLongMap!1363)

(assert (=> b!63581 (= lt!26795 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) lt!25915 (zeroValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26801 () (_ BitVec 64))

(assert (=> b!63581 (= lt!26801 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26808 () (_ BitVec 64))

(assert (=> b!63581 (= lt!26808 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26802 () Unit!1685)

(assert (=> b!63581 (= lt!26802 (addStillContains!44 lt!26795 lt!26801 (zeroValue!1999 newMap!16) lt!26808))))

(assert (=> b!63581 (contains!690 (+!83 lt!26795 (tuple2!2053 lt!26801 (zeroValue!1999 newMap!16))) lt!26808)))

(declare-fun lt!26794 () Unit!1685)

(assert (=> b!63581 (= lt!26794 lt!26802)))

(declare-fun lt!26792 () ListLongMap!1363)

(assert (=> b!63581 (= lt!26792 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) lt!25915 (zeroValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26803 () (_ BitVec 64))

(assert (=> b!63581 (= lt!26803 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26807 () (_ BitVec 64))

(assert (=> b!63581 (= lt!26807 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26799 () Unit!1685)

(assert (=> b!63581 (= lt!26799 (addApplyDifferent!44 lt!26792 lt!26803 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!26807))))

(assert (=> b!63581 (= (apply!68 (+!83 lt!26792 (tuple2!2053 lt!26803 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26807) (apply!68 lt!26792 lt!26807))))

(declare-fun lt!26791 () Unit!1685)

(assert (=> b!63581 (= lt!26791 lt!26799)))

(declare-fun lt!26800 () ListLongMap!1363)

(assert (=> b!63581 (= lt!26800 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) lt!25915 (zeroValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26805 () (_ BitVec 64))

(assert (=> b!63581 (= lt!26805 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26793 () (_ BitVec 64))

(assert (=> b!63581 (= lt!26793 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!26812 () Unit!1685)

(assert (=> b!63581 (= lt!26812 (addApplyDifferent!44 lt!26800 lt!26805 (zeroValue!1999 newMap!16) lt!26793))))

(assert (=> b!63581 (= (apply!68 (+!83 lt!26800 (tuple2!2053 lt!26805 (zeroValue!1999 newMap!16))) lt!26793) (apply!68 lt!26800 lt!26793))))

(declare-fun lt!26806 () Unit!1685)

(assert (=> b!63581 (= lt!26806 lt!26812)))

(declare-fun lt!26797 () ListLongMap!1363)

(assert (=> b!63581 (= lt!26797 (getCurrentListMapNoExtraKeys!46 (_keys!3718 newMap!16) (_values!2070 newMap!16) (mask!5992 newMap!16) lt!25915 (zeroValue!1999 newMap!16) (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2087 newMap!16)))))

(declare-fun lt!26809 () (_ BitVec 64))

(assert (=> b!63581 (= lt!26809 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!26811 () (_ BitVec 64))

(assert (=> b!63581 (= lt!26811 (select (arr!1786 (_keys!3718 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!63581 (= lt!26810 (addApplyDifferent!44 lt!26797 lt!26809 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!26811))))

(assert (=> b!63581 (= (apply!68 (+!83 lt!26797 (tuple2!2053 lt!26809 (get!1089 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) from!355) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!26811) (apply!68 lt!26797 lt!26811))))

(declare-fun b!63582 () Bool)

(assert (=> b!63582 (= e!41671 e!41675)))

(declare-fun res!34764 () Bool)

(assert (=> b!63582 (= res!34764 call!5048)))

(assert (=> b!63582 (=> (not res!34764) (not e!41675))))

(declare-fun b!63583 () Bool)

(assert (=> b!63583 (= e!41680 call!5054)))

(assert (= (and d!13209 c!8620) b!63570))

(assert (= (and d!13209 (not c!8620)) b!63575))

(assert (= (and b!63575 c!8621) b!63583))

(assert (= (and b!63575 (not c!8621)) b!63573))

(assert (= (and b!63573 c!8617) b!63580))

(assert (= (and b!63573 (not c!8617)) b!63567))

(assert (= (or b!63580 b!63567) bm!5050))

(assert (= (or b!63583 bm!5050) bm!5045))

(assert (= (or b!63583 b!63580) bm!5047))

(assert (= (or b!63570 bm!5045) bm!5051))

(assert (= (or b!63570 bm!5047) bm!5048))

(assert (= (and d!13209 res!34771) b!63569))

(assert (= (and d!13209 c!8619) b!63581))

(assert (= (and d!13209 (not c!8619)) b!63571))

(assert (= (and d!13209 res!34765) b!63566))

(assert (= (and b!63566 res!34768) b!63572))

(assert (= (and b!63566 (not res!34767)) b!63576))

(assert (= (and b!63576 res!34769) b!63579))

(assert (= (and b!63566 res!34770) b!63563))

(assert (= (and b!63563 c!8622) b!63578))

(assert (= (and b!63563 (not c!8622)) b!63568))

(assert (= (and b!63578 res!34772) b!63565))

(assert (= (or b!63578 b!63568) bm!5046))

(assert (= (and b!63563 res!34766) b!63574))

(assert (= (and b!63574 c!8618) b!63582))

(assert (= (and b!63574 (not c!8618)) b!63577))

(assert (= (and b!63582 res!34764) b!63564))

(assert (= (or b!63582 b!63577) bm!5049))

(declare-fun b_lambda!2825 () Bool)

(assert (=> (not b_lambda!2825) (not b!63579)))

(assert (=> b!63579 t!4844))

(declare-fun b_and!3885 () Bool)

(assert (= b_and!3881 (and (=> t!4844 result!2455) b_and!3885)))

(assert (=> b!63579 t!4846))

(declare-fun b_and!3887 () Bool)

(assert (= b_and!3883 (and (=> t!4846 result!2457) b_and!3887)))

(assert (=> bm!5051 m!55507))

(declare-fun m!57885 () Bool)

(assert (=> bm!5051 m!57885))

(declare-fun m!57887 () Bool)

(assert (=> b!63570 m!57887))

(assert (=> b!63572 m!55803))

(assert (=> b!63572 m!55803))

(assert (=> b!63572 m!55843))

(declare-fun m!57889 () Bool)

(assert (=> bm!5049 m!57889))

(assert (=> b!63576 m!55803))

(assert (=> b!63576 m!55803))

(declare-fun m!57891 () Bool)

(assert (=> b!63576 m!57891))

(declare-fun m!57893 () Bool)

(assert (=> b!63564 m!57893))

(declare-fun m!57895 () Bool)

(assert (=> bm!5048 m!57895))

(assert (=> b!63569 m!55803))

(assert (=> b!63569 m!55803))

(assert (=> b!63569 m!55843))

(declare-fun m!57897 () Bool)

(assert (=> bm!5046 m!57897))

(assert (=> b!63579 m!55803))

(declare-fun m!57899 () Bool)

(assert (=> b!63579 m!57899))

(assert (=> b!63579 m!55857))

(assert (=> b!63579 m!55941))

(assert (=> b!63579 m!55803))

(assert (=> b!63579 m!55941))

(assert (=> b!63579 m!55857))

(assert (=> b!63579 m!55943))

(declare-fun m!57901 () Bool)

(assert (=> b!63565 m!57901))

(assert (=> b!63581 m!55507))

(declare-fun m!57903 () Bool)

(assert (=> b!63581 m!57903))

(assert (=> b!63581 m!55507))

(assert (=> b!63581 m!57885))

(declare-fun m!57905 () Bool)

(assert (=> b!63581 m!57905))

(assert (=> b!63581 m!57905))

(declare-fun m!57907 () Bool)

(assert (=> b!63581 m!57907))

(declare-fun m!57909 () Bool)

(assert (=> b!63581 m!57909))

(declare-fun m!57911 () Bool)

(assert (=> b!63581 m!57911))

(declare-fun m!57913 () Bool)

(assert (=> b!63581 m!57913))

(declare-fun m!57915 () Bool)

(assert (=> b!63581 m!57915))

(declare-fun m!57917 () Bool)

(assert (=> b!63581 m!57917))

(declare-fun m!57919 () Bool)

(assert (=> b!63581 m!57919))

(assert (=> b!63581 m!55803))

(declare-fun m!57921 () Bool)

(assert (=> b!63581 m!57921))

(declare-fun m!57923 () Bool)

(assert (=> b!63581 m!57923))

(declare-fun m!57925 () Bool)

(assert (=> b!63581 m!57925))

(assert (=> b!63581 m!57923))

(declare-fun m!57927 () Bool)

(assert (=> b!63581 m!57927))

(assert (=> b!63581 m!57911))

(assert (=> b!63581 m!55507))

(declare-fun m!57929 () Bool)

(assert (=> b!63581 m!57929))

(assert (=> b!63581 m!57917))

(declare-fun m!57931 () Bool)

(assert (=> b!63581 m!57931))

(assert (=> d!13209 m!55783))

(assert (=> d!12625 d!13209))

(assert (=> d!12625 d!12755))

(assert (=> b!62558 d!12859))

(assert (=> b!62672 d!12997))

(assert (=> b!62526 d!12907))

(assert (=> b!62526 d!12909))

(declare-fun d!13211 () Bool)

(assert (=> d!13211 (= (inRange!0 (ite c!8307 (index!3053 lt!26008) (index!3056 lt!26008)) (mask!5992 newMap!16)) (and (bvsge (ite c!8307 (index!3053 lt!26008) (index!3056 lt!26008)) #b00000000000000000000000000000000) (bvslt (ite c!8307 (index!3053 lt!26008) (index!3056 lt!26008)) (bvadd (mask!5992 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4904 d!13211))

(declare-fun d!13213 () Bool)

(declare-fun e!41682 () Bool)

(assert (=> d!13213 e!41682))

(declare-fun res!34774 () Bool)

(assert (=> d!13213 (=> (not res!34774) (not e!41682))))

(declare-fun lt!26815 () ListLongMap!1363)

(assert (=> d!13213 (= res!34774 (contains!690 lt!26815 (_1!1037 (ite (or c!8332 c!8333) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))))

(declare-fun lt!26813 () List!1447)

(assert (=> d!13213 (= lt!26815 (ListLongMap!1364 lt!26813))))

(declare-fun lt!26814 () Unit!1685)

(declare-fun lt!26816 () Unit!1685)

(assert (=> d!13213 (= lt!26814 lt!26816)))

(assert (=> d!13213 (= (getValueByKey!124 lt!26813 (_1!1037 (ite (or c!8332 c!8333) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))) (Some!129 (_2!1037 (ite (or c!8332 c!8333) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))))

(assert (=> d!13213 (= lt!26816 (lemmaContainsTupThenGetReturnValue!44 lt!26813 (_1!1037 (ite (or c!8332 c!8333) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))) (_2!1037 (ite (or c!8332 c!8333) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))))

(assert (=> d!13213 (= lt!26813 (insertStrictlySorted!47 (toList!697 (ite c!8332 call!4915 (ite c!8333 call!4914 call!4916))) (_1!1037 (ite (or c!8332 c!8333) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))) (_2!1037 (ite (or c!8332 c!8333) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))))))

(assert (=> d!13213 (= (+!83 (ite c!8332 call!4915 (ite c!8333 call!4914 call!4916)) (ite (or c!8332 c!8333) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))) lt!26815)))

(declare-fun b!63584 () Bool)

(declare-fun res!34773 () Bool)

(assert (=> b!63584 (=> (not res!34773) (not e!41682))))

(assert (=> b!63584 (= res!34773 (= (getValueByKey!124 (toList!697 lt!26815) (_1!1037 (ite (or c!8332 c!8333) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16))))) (Some!129 (_2!1037 (ite (or c!8332 c!8333) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))))

(declare-fun b!63585 () Bool)

(assert (=> b!63585 (= e!41682 (contains!692 (toList!697 lt!26815) (ite (or c!8332 c!8333) (tuple2!2053 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1999 newMap!16)) (tuple2!2053 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1999 newMap!16)))))))

(assert (= (and d!13213 res!34774) b!63584))

(assert (= (and b!63584 res!34773) b!63585))

(declare-fun m!57933 () Bool)

(assert (=> d!13213 m!57933))

(declare-fun m!57935 () Bool)

(assert (=> d!13213 m!57935))

(declare-fun m!57937 () Bool)

(assert (=> d!13213 m!57937))

(declare-fun m!57939 () Bool)

(assert (=> d!13213 m!57939))

(declare-fun m!57941 () Bool)

(assert (=> b!63584 m!57941))

(declare-fun m!57943 () Bool)

(assert (=> b!63585 m!57943))

(assert (=> bm!4911 d!13213))

(declare-fun d!13215 () Bool)

(assert (=> d!13215 (= (get!1091 (select (arr!1787 (_values!2070 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!312 (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62644 d!13215))

(declare-fun d!13217 () Bool)

(declare-fun res!34775 () Bool)

(declare-fun e!41683 () Bool)

(assert (=> d!13217 (=> res!34775 e!41683)))

(assert (=> d!13217 (= res!34775 (= (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355)))))

(assert (=> d!13217 (= (arrayContainsKey!0 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) e!41683)))

(declare-fun b!63586 () Bool)

(declare-fun e!41684 () Bool)

(assert (=> b!63586 (= e!41683 e!41684)))

(declare-fun res!34776 () Bool)

(assert (=> b!63586 (=> (not res!34776) (not e!41684))))

(assert (=> b!63586 (= res!34776 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2019 (_keys!3718 (v!2412 (underlying!229 thiss!992))))))))

(declare-fun b!63587 () Bool)

(assert (=> b!63587 (= e!41684 (arrayContainsKey!0 (_keys!3718 (v!2412 (underlying!229 thiss!992))) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!13217 (not res!34775)) b!63586))

(assert (= (and b!63586 res!34776) b!63587))

(declare-fun m!57945 () Bool)

(assert (=> d!13217 m!57945))

(assert (=> b!63587 m!55481))

(declare-fun m!57947 () Bool)

(assert (=> b!63587 m!57947))

(assert (=> b!62584 d!13217))

(assert (=> b!62542 d!12859))

(declare-fun d!13219 () Bool)

(declare-fun e!41685 () Bool)

(assert (=> d!13219 e!41685))

(declare-fun res!34777 () Bool)

(assert (=> d!13219 (=> res!34777 e!41685)))

(declare-fun lt!26820 () Bool)

(assert (=> d!13219 (= res!34777 (not lt!26820))))

(declare-fun lt!26818 () Bool)

(assert (=> d!13219 (= lt!26820 lt!26818)))

(declare-fun lt!26819 () Unit!1685)

(declare-fun e!41686 () Unit!1685)

(assert (=> d!13219 (= lt!26819 e!41686)))

(declare-fun c!8623 () Bool)

(assert (=> d!13219 (= c!8623 lt!26818)))

(assert (=> d!13219 (= lt!26818 (containsKey!128 (toList!697 lt!26029) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!13219 (= (contains!690 lt!26029 (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!26820)))

(declare-fun b!63588 () Bool)

(declare-fun lt!26817 () Unit!1685)

(assert (=> b!63588 (= e!41686 lt!26817)))

(assert (=> b!63588 (= lt!26817 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!697 lt!26029) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!63588 (isDefined!78 (getValueByKey!124 (toList!697 lt!26029) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!63589 () Bool)

(declare-fun Unit!1750 () Unit!1685)

(assert (=> b!63589 (= e!41686 Unit!1750)))

(declare-fun b!63590 () Bool)

(assert (=> b!63590 (= e!41685 (isDefined!78 (getValueByKey!124 (toList!697 lt!26029) (select (arr!1786 (_keys!3718 (v!2412 (underlying!229 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!13219 c!8623) b!63588))

(assert (= (and d!13219 (not c!8623)) b!63589))

(assert (= (and d!13219 (not res!34777)) b!63590))

(assert (=> d!13219 m!55685))

(declare-fun m!57949 () Bool)

(assert (=> d!13219 m!57949))

(assert (=> b!63588 m!55685))

(declare-fun m!57951 () Bool)

(assert (=> b!63588 m!57951))

(assert (=> b!63588 m!55685))

(assert (=> b!63588 m!56385))

(assert (=> b!63588 m!56385))

(declare-fun m!57953 () Bool)

(assert (=> b!63588 m!57953))

(assert (=> b!63590 m!55685))

(assert (=> b!63590 m!56385))

(assert (=> b!63590 m!56385))

(assert (=> b!63590 m!57953))

(assert (=> b!62479 d!13219))

(declare-fun condMapEmpty!2957 () Bool)

(declare-fun mapDefault!2957 () ValueCell!863)

(assert (=> mapNonEmpty!2956 (= condMapEmpty!2957 (= mapRest!2956 ((as const (Array (_ BitVec 32) ValueCell!863)) mapDefault!2957)))))

(declare-fun e!41688 () Bool)

(declare-fun mapRes!2957 () Bool)

(assert (=> mapNonEmpty!2956 (= tp!8140 (and e!41688 mapRes!2957))))

(declare-fun b!63591 () Bool)

(declare-fun e!41687 () Bool)

(assert (=> b!63591 (= e!41687 tp_is_empty!2413)))

(declare-fun b!63592 () Bool)

(assert (=> b!63592 (= e!41688 tp_is_empty!2413)))

(declare-fun mapIsEmpty!2957 () Bool)

(assert (=> mapIsEmpty!2957 mapRes!2957))

(declare-fun mapNonEmpty!2957 () Bool)

(declare-fun tp!8141 () Bool)

(assert (=> mapNonEmpty!2957 (= mapRes!2957 (and tp!8141 e!41687))))

(declare-fun mapValue!2957 () ValueCell!863)

(declare-fun mapKey!2957 () (_ BitVec 32))

(declare-fun mapRest!2957 () (Array (_ BitVec 32) ValueCell!863))

(assert (=> mapNonEmpty!2957 (= mapRest!2956 (store mapRest!2957 mapKey!2957 mapValue!2957))))

(assert (= (and mapNonEmpty!2956 condMapEmpty!2957) mapIsEmpty!2957))

(assert (= (and mapNonEmpty!2956 (not condMapEmpty!2957)) mapNonEmpty!2957))

(assert (= (and mapNonEmpty!2957 ((_ is ValueCellFull!863) mapValue!2957)) b!63591))

(assert (= (and mapNonEmpty!2956 ((_ is ValueCellFull!863) mapDefault!2957)) b!63592))

(declare-fun m!57955 () Bool)

(assert (=> mapNonEmpty!2957 m!57955))

(declare-fun condMapEmpty!2958 () Bool)

(declare-fun mapDefault!2958 () ValueCell!863)

(assert (=> mapNonEmpty!2955 (= condMapEmpty!2958 (= mapRest!2955 ((as const (Array (_ BitVec 32) ValueCell!863)) mapDefault!2958)))))

(declare-fun e!41690 () Bool)

(declare-fun mapRes!2958 () Bool)

(assert (=> mapNonEmpty!2955 (= tp!8139 (and e!41690 mapRes!2958))))

(declare-fun b!63593 () Bool)

(declare-fun e!41689 () Bool)

(assert (=> b!63593 (= e!41689 tp_is_empty!2413)))

(declare-fun b!63594 () Bool)

(assert (=> b!63594 (= e!41690 tp_is_empty!2413)))

(declare-fun mapIsEmpty!2958 () Bool)

(assert (=> mapIsEmpty!2958 mapRes!2958))

(declare-fun mapNonEmpty!2958 () Bool)

(declare-fun tp!8142 () Bool)

(assert (=> mapNonEmpty!2958 (= mapRes!2958 (and tp!8142 e!41689))))

(declare-fun mapRest!2958 () (Array (_ BitVec 32) ValueCell!863))

(declare-fun mapValue!2958 () ValueCell!863)

(declare-fun mapKey!2958 () (_ BitVec 32))

(assert (=> mapNonEmpty!2958 (= mapRest!2955 (store mapRest!2958 mapKey!2958 mapValue!2958))))

(assert (= (and mapNonEmpty!2955 condMapEmpty!2958) mapIsEmpty!2958))

(assert (= (and mapNonEmpty!2955 (not condMapEmpty!2958)) mapNonEmpty!2958))

(assert (= (and mapNonEmpty!2958 ((_ is ValueCellFull!863) mapValue!2958)) b!63593))

(assert (= (and mapNonEmpty!2955 ((_ is ValueCellFull!863) mapDefault!2958)) b!63594))

(declare-fun m!57957 () Bool)

(assert (=> mapNonEmpty!2958 m!57957))

(declare-fun b_lambda!2827 () Bool)

(assert (= b_lambda!2815 (or (and b!62032 b_free!1993 (= (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) (defaultEntry!2087 newMap!16))) (and b!62029 b_free!1995) b_lambda!2827)))

(declare-fun b_lambda!2829 () Bool)

(assert (= b_lambda!2805 (or (and b!62032 b_free!1993 (= (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) (defaultEntry!2087 newMap!16))) (and b!62029 b_free!1995) b_lambda!2829)))

(declare-fun b_lambda!2831 () Bool)

(assert (= b_lambda!2807 (or (and b!62032 b_free!1993) (and b!62029 b_free!1995 (= (defaultEntry!2087 newMap!16) (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))))) b_lambda!2831)))

(declare-fun b_lambda!2833 () Bool)

(assert (= b_lambda!2825 (or (and b!62032 b_free!1993 (= (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) (defaultEntry!2087 newMap!16))) (and b!62029 b_free!1995) b_lambda!2833)))

(declare-fun b_lambda!2835 () Bool)

(assert (= b_lambda!2821 (or (and b!62032 b_free!1993 (= (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) (defaultEntry!2087 newMap!16))) (and b!62029 b_free!1995) b_lambda!2835)))

(declare-fun b_lambda!2837 () Bool)

(assert (= b_lambda!2819 (or (and b!62032 b_free!1993 (= (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) (defaultEntry!2087 newMap!16))) (and b!62029 b_free!1995) b_lambda!2837)))

(declare-fun b_lambda!2839 () Bool)

(assert (= b_lambda!2799 (or (and b!62032 b_free!1993 (= (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) (defaultEntry!2087 newMap!16))) (and b!62029 b_free!1995) b_lambda!2839)))

(declare-fun b_lambda!2841 () Bool)

(assert (= b_lambda!2801 (or (and b!62032 b_free!1993 (= (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) (defaultEntry!2087 newMap!16))) (and b!62029 b_free!1995) b_lambda!2841)))

(declare-fun b_lambda!2843 () Bool)

(assert (= b_lambda!2809 (or (and b!62032 b_free!1993) (and b!62029 b_free!1995 (= (defaultEntry!2087 newMap!16) (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))))) b_lambda!2843)))

(declare-fun b_lambda!2845 () Bool)

(assert (= b_lambda!2813 (or (and b!62032 b_free!1993 (= (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) (defaultEntry!2087 newMap!16))) (and b!62029 b_free!1995) b_lambda!2845)))

(declare-fun b_lambda!2847 () Bool)

(assert (= b_lambda!2803 (or (and b!62032 b_free!1993 (= (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) (defaultEntry!2087 newMap!16))) (and b!62029 b_free!1995) b_lambda!2847)))

(declare-fun b_lambda!2849 () Bool)

(assert (= b_lambda!2811 (or (and b!62032 b_free!1993 (= (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) (defaultEntry!2087 newMap!16))) (and b!62029 b_free!1995) b_lambda!2849)))

(declare-fun b_lambda!2851 () Bool)

(assert (= b_lambda!2797 (or (and b!62032 b_free!1993 (= (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) (defaultEntry!2087 newMap!16))) (and b!62029 b_free!1995) b_lambda!2851)))

(declare-fun b_lambda!2853 () Bool)

(assert (= b_lambda!2823 (or (and b!62032 b_free!1993 (= (defaultEntry!2087 (v!2412 (underlying!229 thiss!992))) (defaultEntry!2087 newMap!16))) (and b!62029 b_free!1995) b_lambda!2853)))

(check-sat (not d!13109) (not d!13219) (not b!63120) (not b!63466) (not bm!4998) (not bm!4962) (not b!62869) (not bm!5027) (not b!62925) (not d!13125) (not bm!5046) (not b!63485) (not b!63213) (not d!13169) (not b!63003) (not b!63570) (not b!63103) (not b_lambda!2835) (not b!62993) (not b!62908) (not d!13183) (not d!12911) (not b!63530) (not d!12725) (not b!63525) (not b!63463) (not b!63270) (not bm!5035) (not b!62971) (not b!63493) (not b_lambda!2827) (not b!62844) (not b_lambda!2841) (not d!12783) (not b!63469) (not d!12795) (not b!62996) (not d!12933) (not b!63260) (not b!63474) (not d!12801) (not b!62794) (not d!13063) (not d!12763) (not d!13171) (not b!63262) (not b!63399) b_and!3885 (not d!12905) (not d!12917) (not b!62836) (not b!62788) (not b!63480) (not d!13009) (not b!62909) (not d!12869) (not b!63543) (not b!63072) (not b!63127) (not d!13049) (not b!63034) (not bm!5009) tp_is_empty!2413 (not d!13137) (not d!12833) (not d!13193) (not d!13213) (not b!62767) (not b!62865) (not b!63057) (not b!63356) (not b!63208) (not b!63131) (not b!63135) (not b_lambda!2851) (not bm!5016) (not b!63070) (not b!63099) (not b!63413) (not b!63193) (not b!63093) (not d!13199) (not b!63555) (not b!63088) (not b!63292) (not d!12993) (not d!12749) (not b!63015) (not b!63001) (not b!63257) (not b!63128) (not b!63544) (not bm!4986) (not b!63096) (not b!63534) (not b!63406) (not b!63102) (not b!63143) (not bm!5042) (not b!63004) (not b!62923) (not bm!4993) (not d!13037) (not bm!4987) (not bm!4988) (not b!62880) (not b_lambda!2853) (not b!62780) (not bm!5011) (not bm!4999) (not d!13117) (not b!63198) (not b!63312) (not b!63364) (not b!63558) (not d!12925) (not d!13141) (not b!63124) (not b!63385) (not b!62991) (not d!13177) (not d!12923) (not b!63136) (not b!63044) (not b!62937) (not b!63031) (not b!63318) (not b!63432) (not b!62810) (not b!63074) (not b!63187) (not b_lambda!2795) (not d!12819) (not b!63268) (not b!62755) (not b!63134) (not d!13017) (not b!63549) (not b!63062) (not d!12931) (not b!63520) (not b!63205) (not d!13019) (not b!63305) (not b!63186) (not b!62867) (not d!12791) (not d!13173) (not b!63224) (not b!63585) (not bm!4996) (not d!12981) (not d!12947) (not b_lambda!2837) (not b!62872) (not b!63366) (not b!62998) (not b!63516) (not b!62799) (not b!62859) (not d!12837) (not b!63557) (not b!63042) (not d!12719) (not b!63013) (not d!13051) (not b!62922) (not d!12891) (not b!62868) (not b!63540) (not b!63328) (not b!63115) (not b!63104) (not bm!5019) (not d!12751) (not b!63331) (not mapNonEmpty!2958) (not b!63434) (not b!62973) (not b!63298) (not b!63501) (not b!63024) (not b!62760) (not b!63303) (not b!63297) (not bm!4961) (not b!63068) (not d!13065) (not b!63277) (not b!63033) (not b!62811) (not b!63564) (not b!62917) (not d!12907) (not b!63526) (not d!12951) (not b!62801) (not d!12743) (not b!63518) (not b!63106) (not d!12967) (not b!63367) (not b!63382) (not b!63488) (not b!63279) (not b!62752) (not b!63452) (not bm!5032) (not b!63408) (not b_lambda!2845) (not b!63533) (not b!63137) (not b!63283) (not d!13001) (not b!63065) (not b!62898) (not bm!5051) (not bm!4964) (not d!13133) (not b!63219) (not b!63139) (not b!63386) (not b!63284) (not b!62988) (not d!12999) (not b!63025) (not b!62983) (not b!63123) (not b!63244) (not d!13129) (not b!63551) (not d!13003) (not d!12779) (not d!13067) (not b!63222) (not b!63129) (not b!62885) (not b!63532) (not b!62804) (not d!13039) (not d!13113) (not bm!4983) (not d!13203) (not b!63251) (not b!63391) (not b!63212) (not b!63429) (not d!13159) (not b!63481) (not b!63032) (not bm!5048) (not d!12785) (not b!63473) (not d!13155) (not b!63427) (not d!12935) (not b!63153) (not d!12731) (not d!12787) (not d!13115) (not bm!4950) (not d!13013) (not bm!5026) (not b!63548) (not d!13197) (not b!63512) (not d!12761) (not b!62901) (not b!62777) (not b!63130) (not d!12777) (not b!63560) (not d!13121) (not b!63340) (not d!12733) (not d!12903) (not b!62979) (not b!63455) (not bm!4984) (not d!13187) (not b!63392) (not d!12885) (not d!13075) (not b!63121) (not d!12717) (not b_lambda!2839) (not b!63101) (not b!63192) (not d!12889) (not b!63547) (not bm!5024) (not b!63565) (not b!63091) (not b!63542) (not b!62921) (not b!63140) (not b!63267) (not b!63440) (not d!12877) (not d!12707) (not b!62903) (not d!13087) (not b_lambda!2831) (not b!63561) (not b!63510) (not d!13195) b_and!3887 (not d!12821) (not b!63569) (not mapNonEmpty!2957) (not b!62913) (not b!63387) (not b!63035) (not b_lambda!2793) (not b!63448) (not b!62924) (not b!63053) (not bm!4973) (not b!63073) (not b!62781) (not b!63491) (not b!63439) (not b!63324) (not b!62978) (not d!13191) (not b_lambda!2829) (not b!63523) (not b!63454) (not d!13175) (not bm!4976) (not b!63584) (not d!12775) (not bm!5006) (not d!13107) (not d!13057) (not b!63373) (not d!12929) (not b!63572) (not b!63414) (not b!63179) (not d!12881) (not bm!5025) (not d!12969) (not bm!4970) (not b_lambda!2789) (not b!62890) (not b!62797) (not b!62894) (not d!12941) (not d!12949) (not d!12827) (not d!12727) (not b!63138) (not b!62877) (not b!63426) (not bm!5013) (not d!12823) (not d!13033) (not b!63030) (not b!63496) (not d!12991) (not d!12961) (not d!13015) (not d!13105) (not b!63416) (not b!63195) (not d!12757) (not bm!5017) (not b!62778) (not d!13055) (not b!63369) (not b!62851) (not b!63314) (not b!63038) (not d!12937) (not d!12863) (not b!63513) (not d!13151) (not b!63329) (not b!63435) (not b!62932) (not d!13011) (not d!12855) (not b!63228) (not bm!5044) (not b!63147) (not b!62758) (not b!62762) (not b!63486) (not b_lambda!2843) (not bm!5043) (not b_lambda!2847) (not d!13045) (not b!63425) (not d!12771) (not b!63081) (not d!13143) (not b_lambda!2771) (not d!12871) (not d!13077) (not d!13093) (not b!63202) (not b!63050) (not b!63319) (not bm!4958) (not bm!5021) (not b!63511) (not b!62874) (not d!12789) (not b!63338) (not b!63358) (not b!62857) (not b!62784) (not b!63022) (not b!62994) (not b!62863) (not b_next!1995) (not bm!4978) (not b!63105) (not d!12945) (not b!63397) (not b!63478) (not b!63514) (not d!13181) (not b!63317) (not b!63207) (not b!62870) (not b!62969) (not d!13139) (not b!63289) (not b!63045) (not b!63444) (not d!12955) (not b!63188) (not bm!5028) (not bm!5002) (not b!62886) (not d!12867) (not d!12943) (not b!63419) (not bm!4967) (not b!63125) (not d!12845) (not d!12709) (not d!12805) (not b!62920) (not b!63252) (not b!63258) (not bm!4960) (not d!12747) (not b!63191) (not d!12767) (not b!63371) (not b!62840) (not b!63026) (not b!63286) (not b!62774) (not b!63562) (not b!62873) (not d!12849) (not b!63468) (not b!63535) (not d!13147) (not bm!5004) (not b!63554) (not bm!5007) (not b!62896) (not d!12953) (not d!12873) (not d!12977) (not b!63107) (not d!13103) (not d!12897) (not d!13081) (not d!12815) (not b!63077) (not d!13023) (not bm!5049) (not b!63227) (not bm!5030) (not d!12975) (not b!62927) (not bm!5022) (not b!63076) (not d!12835) (not b!63029) (not b!63396) (not d!13097) (not d!12793) (not b!63461) (not d!13043) (not b_next!1993) (not d!13029) (not b!62976) (not bm!4975) (not d!12913) (not bm!4949) (not d!12927) (not b_lambda!2775) (not b!63587) (not bm!5001) (not d!13099) (not b!63254) (not b!63215) (not b!62942) (not d!12799) (not b!63482) (not b!63302) (not b!63581) (not d!13005) (not b!63204) (not b!63250) (not bm!5037) (not d!12965) (not b!63528) (not b!63118) (not d!12781) (not b_lambda!2849) (not d!12797) (not b!63576) (not b!62882) (not d!12899) (not d!13207) (not b!63590) (not b!63293) (not d!13189) (not b!62769) (not b!62871) (not b!63403) (not b!63361) (not b!62862) (not b!63522) (not b!62930) (not b!63588) (not b!63255) (not b!63084) (not b!63009) (not b!63458) (not d!12843) (not b!63378) (not b!63460) (not bm!5014) (not b!62764) (not d!13179) (not bm!5033) (not b!63150) (not b!63114) (not b!63323) (not b!63309) (not d!13209) (not b!63110) (not b!63263) (not b!62933) (not bm!5040) (not b!62835) (not b!63384) (not d!12973) (not d!12963) (not b!63017) (not b!63527) (not b!62881) (not d!12901) (not b!63489) (not d!12939) (not b!63579) (not b!63274) (not b!63008) (not b!62904) (not d!12803) (not b_lambda!2817) (not d!12841) (not b!63185) (not b!63345) (not d!13123) (not b!62771) (not d!13157) (not b_lambda!2791) (not b!62938) (not b!63190) (not d!12713) (not d!13085) (not b!63229) (not b!62984) (not d!12861) (not b!63295) (not b!62792) (not b_lambda!2787) (not d!12853) (not b!62883) (not b!63499) (not d!13205) (not b_lambda!2833) (not b!63183) (not b!63052) (not b!62861) (not b!63545) (not b!63047) (not d!12893) (not d!13185) (not b!63058) (not bm!4981) (not d!13031) (not b!63181) (not bm!4994) (not b!63483) (not d!12919) (not b!63423) (not b!63355) (not b!63082) (not d!12879) (not b!63335))
(check-sat b_and!3885 b_and!3887 (not b_next!1993) (not b_next!1995))
