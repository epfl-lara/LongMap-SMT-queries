; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!8724 () Bool)

(assert start!8724)

(declare-fun b!60606 () Bool)

(declare-fun b_free!1985 () Bool)

(declare-fun b_next!1985 () Bool)

(assert (=> b!60606 (= b_free!1985 (not b_next!1985))))

(declare-fun tp!8075 () Bool)

(declare-fun b_and!3691 () Bool)

(assert (=> b!60606 (= tp!8075 b_and!3691)))

(declare-fun b!60590 () Bool)

(declare-fun b_free!1987 () Bool)

(declare-fun b_next!1987 () Bool)

(assert (=> b!60590 (= b_free!1987 (not b_next!1987))))

(declare-fun tp!8076 () Bool)

(declare-fun b_and!3693 () Bool)

(assert (=> b!60590 (= tp!8076 b_and!3693)))

(declare-fun e!39850 () Bool)

(declare-fun tp_is_empty!2409 () Bool)

(declare-datatypes ((V!2859 0))(
  ( (V!2860 (val!1249 Int)) )
))
(declare-datatypes ((array!3747 0))(
  ( (array!3748 (arr!1793 (Array (_ BitVec 32) (_ BitVec 64))) (size!2024 (_ BitVec 32))) )
))
(declare-datatypes ((ValueCell!861 0))(
  ( (ValueCellFull!861 (v!2403 V!2859)) (EmptyCell!861) )
))
(declare-datatypes ((array!3749 0))(
  ( (array!3750 (arr!1794 (Array (_ BitVec 32) ValueCell!861)) (size!2025 (_ BitVec 32))) )
))
(declare-datatypes ((LongMapFixedSize!630 0))(
  ( (LongMapFixedSize!631 (defaultEntry!2067 Int) (mask!5963 (_ BitVec 32)) (extraKeys!1950 (_ BitVec 32)) (zeroValue!1981 V!2859) (minValue!1981 V!2859) (_size!364 (_ BitVec 32)) (_keys!3695 array!3747) (_values!2050 array!3749) (_vacant!364 (_ BitVec 32))) )
))
(declare-fun newMap!16 () LongMapFixedSize!630)

(declare-fun e!39853 () Bool)

(declare-fun array_inv!1109 (array!3747) Bool)

(declare-fun array_inv!1110 (array!3749) Bool)

(assert (=> b!60590 (= e!39850 (and tp!8076 tp_is_empty!2409 (array_inv!1109 (_keys!3695 newMap!16)) (array_inv!1110 (_values!2050 newMap!16)) e!39853))))

(declare-fun b!60591 () Bool)

(declare-datatypes ((Unit!1625 0))(
  ( (Unit!1626) )
))
(declare-fun e!39849 () Unit!1625)

(declare-fun Unit!1627 () Unit!1625)

(assert (=> b!60591 (= e!39849 Unit!1627)))

(declare-fun b!60592 () Bool)

(declare-fun e!39848 () Bool)

(declare-fun e!39855 () Bool)

(assert (=> b!60592 (= e!39848 e!39855)))

(declare-fun mapIsEmpty!2917 () Bool)

(declare-fun mapRes!2918 () Bool)

(assert (=> mapIsEmpty!2917 mapRes!2918))

(declare-fun b!60593 () Bool)

(declare-fun e!39852 () Bool)

(declare-fun e!39851 () Bool)

(assert (=> b!60593 (= e!39852 e!39851)))

(declare-fun res!33481 () Bool)

(assert (=> b!60593 (=> (not res!33481) (not e!39851))))

(declare-datatypes ((tuple2!2030 0))(
  ( (tuple2!2031 (_1!1026 Bool) (_2!1026 LongMapFixedSize!630)) )
))
(declare-fun lt!24822 () tuple2!2030)

(declare-fun from!355 () (_ BitVec 32))

(assert (=> b!60593 (= res!33481 (and (_1!1026 lt!24822) (bvsgt from!355 #b00000000000000000000000000000000)))))

(declare-fun lt!24823 () Unit!1625)

(assert (=> b!60593 (= lt!24823 e!39849)))

(declare-datatypes ((Cell!440 0))(
  ( (Cell!441 (v!2404 LongMapFixedSize!630)) )
))
(declare-datatypes ((LongMap!440 0))(
  ( (LongMap!441 (underlying!231 Cell!440)) )
))
(declare-fun thiss!992 () LongMap!440)

(declare-fun c!7862 () Bool)

(declare-datatypes ((tuple2!2032 0))(
  ( (tuple2!2033 (_1!1027 (_ BitVec 64)) (_2!1027 V!2859)) )
))
(declare-datatypes ((List!1436 0))(
  ( (Nil!1433) (Cons!1432 (h!2014 tuple2!2032) (t!4806 List!1436)) )
))
(declare-datatypes ((ListLongMap!1369 0))(
  ( (ListLongMap!1370 (toList!700 List!1436)) )
))
(declare-fun lt!24826 () ListLongMap!1369)

(declare-fun contains!686 (ListLongMap!1369 (_ BitVec 64)) Bool)

(assert (=> b!60593 (= c!7862 (contains!686 lt!24826 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(declare-fun update!75 (LongMapFixedSize!630 (_ BitVec 64) V!2859) tuple2!2030)

(declare-fun get!1075 (ValueCell!861 V!2859) V!2859)

(declare-fun dynLambda!306 (Int (_ BitVec 64)) V!2859)

(assert (=> b!60593 (= lt!24822 (update!75 newMap!16 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!60594 () Bool)

(assert (=> b!60594 (= e!39851 (and (= (size!2025 (_values!2050 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 (mask!5963 (v!2404 (underlying!231 thiss!992))))) (= (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (size!2025 (_values!2050 (v!2404 (underlying!231 thiss!992))))) (bvsge (mask!5963 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000000000000000) (bvslt (extraKeys!1950 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000000000000000)))))

(declare-fun b!60595 () Bool)

(declare-fun res!33483 () Bool)

(declare-fun e!39858 () Bool)

(assert (=> b!60595 (=> (not res!33483) (not e!39858))))

(assert (=> b!60595 (= res!33483 (and (bvsge from!355 #b00000000000000000000000000000000) (bvslt from!355 (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun b!60596 () Bool)

(declare-fun res!33486 () Bool)

(assert (=> b!60596 (=> (not res!33486) (not e!39851))))

(declare-fun validMask!0 ((_ BitVec 32)) Bool)

(assert (=> b!60596 (= res!33486 (validMask!0 (mask!5963 (v!2404 (underlying!231 thiss!992)))))))

(declare-fun b!60597 () Bool)

(declare-fun e!39854 () Bool)

(assert (=> b!60597 (= e!39854 tp_is_empty!2409)))

(declare-fun b!60599 () Bool)

(declare-fun e!39844 () Bool)

(assert (=> b!60599 (= e!39844 tp_is_empty!2409)))

(declare-fun b!60600 () Bool)

(declare-fun e!39843 () Bool)

(assert (=> b!60600 (= e!39843 tp_is_empty!2409)))

(declare-fun b!60601 () Bool)

(declare-fun e!39856 () Bool)

(assert (=> b!60601 (= e!39856 e!39848)))

(declare-fun b!60602 () Bool)

(declare-fun res!33485 () Bool)

(assert (=> b!60602 (=> (not res!33485) (not e!39858))))

(declare-fun valid!260 (LongMapFixedSize!630) Bool)

(assert (=> b!60602 (= res!33485 (valid!260 newMap!16))))

(declare-fun b!60603 () Bool)

(assert (=> b!60603 (= e!39858 e!39852)))

(declare-fun res!33487 () Bool)

(assert (=> b!60603 (=> (not res!33487) (not e!39852))))

(declare-fun lt!24821 () ListLongMap!1369)

(assert (=> b!60603 (= res!33487 (and (= lt!24821 lt!24826) (not (= (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun map!1112 (LongMapFixedSize!630) ListLongMap!1369)

(assert (=> b!60603 (= lt!24826 (map!1112 newMap!16))))

(declare-fun getCurrentListMap!405 (array!3747 array!3749 (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 (_ BitVec 32) Int) ListLongMap!1369)

(assert (=> b!60603 (= lt!24821 (getCurrentListMap!405 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (_values!2050 (v!2404 (underlying!231 thiss!992))) (mask!5963 (v!2404 (underlying!231 thiss!992))) (extraKeys!1950 (v!2404 (underlying!231 thiss!992))) (zeroValue!1981 (v!2404 (underlying!231 thiss!992))) (minValue!1981 (v!2404 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2067 (v!2404 (underlying!231 thiss!992)))))))

(declare-fun b!60604 () Bool)

(assert (=> b!60604 (= e!39853 (and e!39854 mapRes!2918))))

(declare-fun condMapEmpty!2917 () Bool)

(declare-fun mapDefault!2918 () ValueCell!861)

(assert (=> b!60604 (= condMapEmpty!2917 (= (arr!1794 (_values!2050 newMap!16)) ((as const (Array (_ BitVec 32) ValueCell!861)) mapDefault!2918)))))

(declare-fun b!60605 () Bool)

(declare-fun e!39846 () Bool)

(declare-fun mapRes!2917 () Bool)

(assert (=> b!60605 (= e!39846 (and e!39843 mapRes!2917))))

(declare-fun condMapEmpty!2918 () Bool)

(declare-fun mapDefault!2917 () ValueCell!861)

(assert (=> b!60605 (= condMapEmpty!2918 (= (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) ((as const (Array (_ BitVec 32) ValueCell!861)) mapDefault!2917)))))

(assert (=> b!60606 (= e!39855 (and tp!8075 tp_is_empty!2409 (array_inv!1109 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (array_inv!1110 (_values!2050 (v!2404 (underlying!231 thiss!992)))) e!39846))))

(declare-fun b!60607 () Bool)

(declare-fun res!33482 () Bool)

(assert (=> b!60607 (=> (not res!33482) (not e!39858))))

(assert (=> b!60607 (= res!33482 (bvsge (bvadd #b00000000000000000000000000000001 (mask!5963 newMap!16)) (_size!364 (v!2404 (underlying!231 thiss!992)))))))

(declare-fun mapNonEmpty!2917 () Bool)

(declare-fun tp!8078 () Bool)

(assert (=> mapNonEmpty!2917 (= mapRes!2918 (and tp!8078 e!39844))))

(declare-fun mapKey!2918 () (_ BitVec 32))

(declare-fun mapRest!2918 () (Array (_ BitVec 32) ValueCell!861))

(declare-fun mapValue!2917 () ValueCell!861)

(assert (=> mapNonEmpty!2917 (= (arr!1794 (_values!2050 newMap!16)) (store mapRest!2918 mapKey!2918 mapValue!2917))))

(declare-fun mapIsEmpty!2918 () Bool)

(assert (=> mapIsEmpty!2918 mapRes!2917))

(declare-fun b!60608 () Bool)

(declare-fun Unit!1628 () Unit!1625)

(assert (=> b!60608 (= e!39849 Unit!1628)))

(declare-fun lt!24824 () Unit!1625)

(declare-fun lemmaListMapContainsThenArrayContainsFrom!33 (array!3747 array!3749 (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 (_ BitVec 64) (_ BitVec 32) Int) Unit!1625)

(assert (=> b!60608 (= lt!24824 (lemmaListMapContainsThenArrayContainsFrom!33 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (_values!2050 (v!2404 (underlying!231 thiss!992))) (mask!5963 (v!2404 (underlying!231 thiss!992))) (extraKeys!1950 (v!2404 (underlying!231 thiss!992))) (zeroValue!1981 (v!2404 (underlying!231 thiss!992))) (minValue!1981 (v!2404 (underlying!231 thiss!992))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2067 (v!2404 (underlying!231 thiss!992)))))))

(declare-fun arrayContainsKey!0 (array!3747 (_ BitVec 64) (_ BitVec 32)) Bool)

(assert (=> b!60608 (arrayContainsKey!0 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355))))

(declare-fun lt!24825 () Unit!1625)

(declare-fun lemmaNoDuplicateFromThenFromBigger!0 (array!3747 (_ BitVec 32) (_ BitVec 32)) Unit!1625)

(assert (=> b!60608 (= lt!24825 (lemmaNoDuplicateFromThenFromBigger!0 (_keys!3695 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000000000000000 from!355))))

(declare-datatypes ((List!1437 0))(
  ( (Nil!1434) (Cons!1433 (h!2015 (_ BitVec 64)) (t!4807 List!1437)) )
))
(declare-fun arrayNoDuplicates!0 (array!3747 (_ BitVec 32) List!1437) Bool)

(assert (=> b!60608 (arrayNoDuplicates!0 (_keys!3695 (v!2404 (underlying!231 thiss!992))) from!355 Nil!1434)))

(declare-fun lt!24827 () Unit!1625)

(declare-fun lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (array!3747 (_ BitVec 32) (_ BitVec 64) List!1437) Unit!1625)

(assert (=> b!60608 (= lt!24827 (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (Cons!1433 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) Nil!1434)))))

(assert (=> b!60608 false))

(declare-fun mapNonEmpty!2918 () Bool)

(declare-fun tp!8077 () Bool)

(declare-fun e!39847 () Bool)

(assert (=> mapNonEmpty!2918 (= mapRes!2917 (and tp!8077 e!39847))))

(declare-fun mapKey!2917 () (_ BitVec 32))

(declare-fun mapRest!2917 () (Array (_ BitVec 32) ValueCell!861))

(declare-fun mapValue!2918 () ValueCell!861)

(assert (=> mapNonEmpty!2918 (= (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) (store mapRest!2917 mapKey!2917 mapValue!2918))))

(declare-fun b!60598 () Bool)

(assert (=> b!60598 (= e!39847 tp_is_empty!2409)))

(declare-fun res!33484 () Bool)

(assert (=> start!8724 (=> (not res!33484) (not e!39858))))

(declare-fun valid!261 (LongMap!440) Bool)

(assert (=> start!8724 (= res!33484 (valid!261 thiss!992))))

(assert (=> start!8724 e!39858))

(assert (=> start!8724 e!39856))

(assert (=> start!8724 true))

(assert (=> start!8724 e!39850))

(assert (= (and start!8724 res!33484) b!60595))

(assert (= (and b!60595 res!33483) b!60602))

(assert (= (and b!60602 res!33485) b!60607))

(assert (= (and b!60607 res!33482) b!60603))

(assert (= (and b!60603 res!33487) b!60593))

(assert (= (and b!60593 c!7862) b!60608))

(assert (= (and b!60593 (not c!7862)) b!60591))

(assert (= (and b!60593 res!33481) b!60596))

(assert (= (and b!60596 res!33486) b!60594))

(assert (= (and b!60605 condMapEmpty!2918) mapIsEmpty!2918))

(assert (= (and b!60605 (not condMapEmpty!2918)) mapNonEmpty!2918))

(get-info :version)

(assert (= (and mapNonEmpty!2918 ((_ is ValueCellFull!861) mapValue!2918)) b!60598))

(assert (= (and b!60605 ((_ is ValueCellFull!861) mapDefault!2917)) b!60600))

(assert (= b!60606 b!60605))

(assert (= b!60592 b!60606))

(assert (= b!60601 b!60592))

(assert (= start!8724 b!60601))

(assert (= (and b!60604 condMapEmpty!2917) mapIsEmpty!2917))

(assert (= (and b!60604 (not condMapEmpty!2917)) mapNonEmpty!2917))

(assert (= (and mapNonEmpty!2917 ((_ is ValueCellFull!861) mapValue!2917)) b!60599))

(assert (= (and b!60604 ((_ is ValueCellFull!861) mapDefault!2918)) b!60597))

(assert (= b!60590 b!60604))

(assert (= start!8724 b!60590))

(declare-fun b_lambda!2685 () Bool)

(assert (=> (not b_lambda!2685) (not b!60593)))

(declare-fun t!4803 () Bool)

(declare-fun tb!1345 () Bool)

(assert (=> (and b!60606 (= (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) (defaultEntry!2067 (v!2404 (underlying!231 thiss!992)))) t!4803) tb!1345))

(declare-fun result!2413 () Bool)

(assert (=> tb!1345 (= result!2413 tp_is_empty!2409)))

(assert (=> b!60593 t!4803))

(declare-fun b_and!3695 () Bool)

(assert (= b_and!3691 (and (=> t!4803 result!2413) b_and!3695)))

(declare-fun t!4805 () Bool)

(declare-fun tb!1347 () Bool)

(assert (=> (and b!60590 (= (defaultEntry!2067 newMap!16) (defaultEntry!2067 (v!2404 (underlying!231 thiss!992)))) t!4805) tb!1347))

(declare-fun result!2417 () Bool)

(assert (= result!2417 result!2413))

(assert (=> b!60593 t!4805))

(declare-fun b_and!3697 () Bool)

(assert (= b_and!3693 (and (=> t!4805 result!2417) b_and!3697)))

(declare-fun m!53313 () Bool)

(assert (=> b!60603 m!53313))

(declare-fun m!53315 () Bool)

(assert (=> b!60603 m!53315))

(declare-fun m!53317 () Bool)

(assert (=> b!60603 m!53317))

(declare-fun m!53319 () Bool)

(assert (=> b!60596 m!53319))

(declare-fun m!53321 () Bool)

(assert (=> mapNonEmpty!2918 m!53321))

(declare-fun m!53323 () Bool)

(assert (=> b!60606 m!53323))

(declare-fun m!53325 () Bool)

(assert (=> b!60606 m!53325))

(declare-fun m!53327 () Bool)

(assert (=> mapNonEmpty!2917 m!53327))

(declare-fun m!53329 () Bool)

(assert (=> b!60590 m!53329))

(declare-fun m!53331 () Bool)

(assert (=> b!60590 m!53331))

(declare-fun m!53333 () Bool)

(assert (=> b!60593 m!53333))

(declare-fun m!53335 () Bool)

(assert (=> b!60593 m!53335))

(declare-fun m!53337 () Bool)

(assert (=> b!60593 m!53337))

(assert (=> b!60593 m!53313))

(assert (=> b!60593 m!53313))

(declare-fun m!53339 () Bool)

(assert (=> b!60593 m!53339))

(assert (=> b!60593 m!53335))

(assert (=> b!60593 m!53313))

(assert (=> b!60593 m!53337))

(declare-fun m!53341 () Bool)

(assert (=> b!60593 m!53341))

(assert (=> b!60593 m!53333))

(declare-fun m!53343 () Bool)

(assert (=> start!8724 m!53343))

(declare-fun m!53345 () Bool)

(assert (=> b!60608 m!53345))

(declare-fun m!53347 () Bool)

(assert (=> b!60608 m!53347))

(assert (=> b!60608 m!53313))

(declare-fun m!53349 () Bool)

(assert (=> b!60608 m!53349))

(assert (=> b!60608 m!53313))

(assert (=> b!60608 m!53313))

(declare-fun m!53351 () Bool)

(assert (=> b!60608 m!53351))

(assert (=> b!60608 m!53313))

(declare-fun m!53353 () Bool)

(assert (=> b!60608 m!53353))

(declare-fun m!53355 () Bool)

(assert (=> b!60602 m!53355))

(check-sat (not mapNonEmpty!2918) (not b!60606) (not b!60590) (not start!8724) tp_is_empty!2409 (not b!60608) (not b_next!1987) (not b_next!1985) (not mapNonEmpty!2917) b_and!3697 (not b!60602) b_and!3695 (not b_lambda!2685) (not b!60596) (not b!60593) (not b!60603))
(check-sat b_and!3695 b_and!3697 (not b_next!1985) (not b_next!1987))
(get-model)

(declare-fun b_lambda!2689 () Bool)

(assert (= b_lambda!2685 (or (and b!60606 b_free!1985) (and b!60590 b_free!1987 (= (defaultEntry!2067 newMap!16) (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))))) b_lambda!2689)))

(check-sat (not mapNonEmpty!2918) (not b_lambda!2689) (not b!60606) (not b!60590) (not start!8724) tp_is_empty!2409 (not b!60608) (not b_next!1987) (not b_next!1985) (not mapNonEmpty!2917) b_and!3697 (not b!60602) b_and!3695 (not b!60596) (not b!60593) (not b!60603))
(check-sat b_and!3695 b_and!3697 (not b_next!1985) (not b_next!1987))
(get-model)

(declare-fun d!11937 () Bool)

(assert (=> d!11937 (= (validMask!0 (mask!5963 (v!2404 (underlying!231 thiss!992)))) (and (or (= (mask!5963 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000000000000111) (= (mask!5963 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000000000001111) (= (mask!5963 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000000000011111) (= (mask!5963 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000000000111111) (= (mask!5963 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000000001111111) (= (mask!5963 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000000011111111) (= (mask!5963 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000000111111111) (= (mask!5963 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000001111111111) (= (mask!5963 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000011111111111) (= (mask!5963 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000111111111111) (= (mask!5963 (v!2404 (underlying!231 thiss!992))) #b00000000000000000001111111111111) (= (mask!5963 (v!2404 (underlying!231 thiss!992))) #b00000000000000000011111111111111) (= (mask!5963 (v!2404 (underlying!231 thiss!992))) #b00000000000000000111111111111111) (= (mask!5963 (v!2404 (underlying!231 thiss!992))) #b00000000000000001111111111111111) (= (mask!5963 (v!2404 (underlying!231 thiss!992))) #b00000000000000011111111111111111) (= (mask!5963 (v!2404 (underlying!231 thiss!992))) #b00000000000000111111111111111111) (= (mask!5963 (v!2404 (underlying!231 thiss!992))) #b00000000000001111111111111111111) (= (mask!5963 (v!2404 (underlying!231 thiss!992))) #b00000000000011111111111111111111) (= (mask!5963 (v!2404 (underlying!231 thiss!992))) #b00000000000111111111111111111111) (= (mask!5963 (v!2404 (underlying!231 thiss!992))) #b00000000001111111111111111111111) (= (mask!5963 (v!2404 (underlying!231 thiss!992))) #b00000000011111111111111111111111) (= (mask!5963 (v!2404 (underlying!231 thiss!992))) #b00000000111111111111111111111111) (= (mask!5963 (v!2404 (underlying!231 thiss!992))) #b00000001111111111111111111111111) (= (mask!5963 (v!2404 (underlying!231 thiss!992))) #b00000011111111111111111111111111) (= (mask!5963 (v!2404 (underlying!231 thiss!992))) #b00000111111111111111111111111111) (= (mask!5963 (v!2404 (underlying!231 thiss!992))) #b00001111111111111111111111111111) (= (mask!5963 (v!2404 (underlying!231 thiss!992))) #b00011111111111111111111111111111) (= (mask!5963 (v!2404 (underlying!231 thiss!992))) #b00111111111111111111111111111111)) (bvsle (mask!5963 (v!2404 (underlying!231 thiss!992))) #b00111111111111111111111111111111)))))

(assert (=> b!60596 d!11937))

(declare-fun d!11939 () Bool)

(assert (=> d!11939 (= (valid!261 thiss!992) (valid!260 (v!2404 (underlying!231 thiss!992))))))

(declare-fun bs!2639 () Bool)

(assert (= bs!2639 d!11939))

(declare-fun m!53401 () Bool)

(assert (=> bs!2639 m!53401))

(assert (=> start!8724 d!11939))

(declare-fun d!11941 () Bool)

(assert (=> d!11941 (= (array_inv!1109 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvsge (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!60606 d!11941))

(declare-fun d!11943 () Bool)

(assert (=> d!11943 (= (array_inv!1110 (_values!2050 (v!2404 (underlying!231 thiss!992)))) (bvsge (size!2025 (_values!2050 (v!2404 (underlying!231 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!60606 d!11943))

(declare-fun d!11945 () Bool)

(assert (=> d!11945 (not (arrayContainsKey!0 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!24851 () Unit!1625)

(declare-fun choose!68 (array!3747 (_ BitVec 32) (_ BitVec 64) List!1437) Unit!1625)

(assert (=> d!11945 (= lt!24851 (choose!68 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (Cons!1433 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) Nil!1434)))))

(assert (=> d!11945 (bvslt (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!11945 (= (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (Cons!1433 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) Nil!1434)) lt!24851)))

(declare-fun bs!2640 () Bool)

(assert (= bs!2640 d!11945))

(assert (=> bs!2640 m!53313))

(assert (=> bs!2640 m!53351))

(assert (=> bs!2640 m!53313))

(declare-fun m!53403 () Bool)

(assert (=> bs!2640 m!53403))

(assert (=> b!60608 d!11945))

(declare-fun d!11947 () Bool)

(assert (=> d!11947 (arrayNoDuplicates!0 (_keys!3695 (v!2404 (underlying!231 thiss!992))) from!355 Nil!1434)))

(declare-fun lt!24854 () Unit!1625)

(declare-fun choose!39 (array!3747 (_ BitVec 32) (_ BitVec 32)) Unit!1625)

(assert (=> d!11947 (= lt!24854 (choose!39 (_keys!3695 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000000000000000 from!355))))

(assert (=> d!11947 (bvslt (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!11947 (= (lemmaNoDuplicateFromThenFromBigger!0 (_keys!3695 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000000000000000 from!355) lt!24854)))

(declare-fun bs!2641 () Bool)

(assert (= bs!2641 d!11947))

(assert (=> bs!2641 m!53347))

(declare-fun m!53405 () Bool)

(assert (=> bs!2641 m!53405))

(assert (=> b!60608 d!11947))

(declare-fun d!11949 () Bool)

(declare-fun res!33513 () Bool)

(declare-fun e!39911 () Bool)

(assert (=> d!11949 (=> res!33513 e!39911)))

(assert (=> d!11949 (= res!33513 (= (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(assert (=> d!11949 (= (arrayContainsKey!0 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)) e!39911)))

(declare-fun b!60674 () Bool)

(declare-fun e!39912 () Bool)

(assert (=> b!60674 (= e!39911 e!39912)))

(declare-fun res!33514 () Bool)

(assert (=> b!60674 (=> (not res!33514) (not e!39912))))

(assert (=> b!60674 (= res!33514 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992))))))))

(declare-fun b!60675 () Bool)

(assert (=> b!60675 (= e!39912 (arrayContainsKey!0 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (= (and d!11949 (not res!33513)) b!60674))

(assert (= (and b!60674 res!33514) b!60675))

(declare-fun m!53407 () Bool)

(assert (=> d!11949 m!53407))

(assert (=> b!60675 m!53313))

(declare-fun m!53409 () Bool)

(assert (=> b!60675 m!53409))

(assert (=> b!60608 d!11949))

(declare-fun d!11951 () Bool)

(declare-fun e!39915 () Bool)

(assert (=> d!11951 e!39915))

(declare-fun c!7868 () Bool)

(assert (=> d!11951 (= c!7868 (and (not (= (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun lt!24857 () Unit!1625)

(declare-fun choose!315 (array!3747 array!3749 (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 (_ BitVec 64) (_ BitVec 32) Int) Unit!1625)

(assert (=> d!11951 (= lt!24857 (choose!315 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (_values!2050 (v!2404 (underlying!231 thiss!992))) (mask!5963 (v!2404 (underlying!231 thiss!992))) (extraKeys!1950 (v!2404 (underlying!231 thiss!992))) (zeroValue!1981 (v!2404 (underlying!231 thiss!992))) (minValue!1981 (v!2404 (underlying!231 thiss!992))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2067 (v!2404 (underlying!231 thiss!992)))))))

(assert (=> d!11951 (validMask!0 (mask!5963 (v!2404 (underlying!231 thiss!992))))))

(assert (=> d!11951 (= (lemmaListMapContainsThenArrayContainsFrom!33 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (_values!2050 (v!2404 (underlying!231 thiss!992))) (mask!5963 (v!2404 (underlying!231 thiss!992))) (extraKeys!1950 (v!2404 (underlying!231 thiss!992))) (zeroValue!1981 (v!2404 (underlying!231 thiss!992))) (minValue!1981 (v!2404 (underlying!231 thiss!992))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2067 (v!2404 (underlying!231 thiss!992)))) lt!24857)))

(declare-fun b!60680 () Bool)

(assert (=> b!60680 (= e!39915 (arrayContainsKey!0 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!60681 () Bool)

(assert (=> b!60681 (= e!39915 (ite (= (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!1950 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1950 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!11951 c!7868) b!60680))

(assert (= (and d!11951 (not c!7868)) b!60681))

(assert (=> d!11951 m!53313))

(declare-fun m!53411 () Bool)

(assert (=> d!11951 m!53411))

(assert (=> d!11951 m!53319))

(assert (=> b!60680 m!53313))

(assert (=> b!60680 m!53351))

(assert (=> b!60608 d!11951))

(declare-fun b!60692 () Bool)

(declare-fun e!39927 () Bool)

(declare-fun call!4568 () Bool)

(assert (=> b!60692 (= e!39927 call!4568)))

(declare-fun b!60693 () Bool)

(declare-fun e!39925 () Bool)

(declare-fun e!39924 () Bool)

(assert (=> b!60693 (= e!39925 e!39924)))

(declare-fun res!33522 () Bool)

(assert (=> b!60693 (=> (not res!33522) (not e!39924))))

(declare-fun e!39926 () Bool)

(assert (=> b!60693 (= res!33522 (not e!39926))))

(declare-fun res!33523 () Bool)

(assert (=> b!60693 (=> (not res!33523) (not e!39926))))

(declare-fun validKeyInArray!0 ((_ BitVec 64)) Bool)

(assert (=> b!60693 (= res!33523 (validKeyInArray!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(declare-fun b!60694 () Bool)

(assert (=> b!60694 (= e!39924 e!39927)))

(declare-fun c!7871 () Bool)

(assert (=> b!60694 (= c!7871 (validKeyInArray!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(declare-fun b!60695 () Bool)

(assert (=> b!60695 (= e!39927 call!4568)))

(declare-fun d!11953 () Bool)

(declare-fun res!33521 () Bool)

(assert (=> d!11953 (=> res!33521 e!39925)))

(assert (=> d!11953 (= res!33521 (bvsge from!355 (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992))))))))

(assert (=> d!11953 (= (arrayNoDuplicates!0 (_keys!3695 (v!2404 (underlying!231 thiss!992))) from!355 Nil!1434) e!39925)))

(declare-fun bm!4565 () Bool)

(assert (=> bm!4565 (= call!4568 (arrayNoDuplicates!0 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!7871 (Cons!1433 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) Nil!1434) Nil!1434)))))

(declare-fun b!60696 () Bool)

(declare-fun contains!687 (List!1437 (_ BitVec 64)) Bool)

(assert (=> b!60696 (= e!39926 (contains!687 Nil!1434 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(assert (= (and d!11953 (not res!33521)) b!60693))

(assert (= (and b!60693 res!33523) b!60696))

(assert (= (and b!60693 res!33522) b!60694))

(assert (= (and b!60694 c!7871) b!60692))

(assert (= (and b!60694 (not c!7871)) b!60695))

(assert (= (or b!60692 b!60695) bm!4565))

(assert (=> b!60693 m!53313))

(assert (=> b!60693 m!53313))

(declare-fun m!53413 () Bool)

(assert (=> b!60693 m!53413))

(assert (=> b!60694 m!53313))

(assert (=> b!60694 m!53313))

(assert (=> b!60694 m!53413))

(assert (=> bm!4565 m!53313))

(declare-fun m!53415 () Bool)

(assert (=> bm!4565 m!53415))

(assert (=> b!60696 m!53313))

(assert (=> b!60696 m!53313))

(declare-fun m!53417 () Bool)

(assert (=> b!60696 m!53417))

(assert (=> b!60608 d!11953))

(declare-fun d!11955 () Bool)

(assert (=> d!11955 (= (array_inv!1109 (_keys!3695 newMap!16)) (bvsge (size!2024 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!60590 d!11955))

(declare-fun d!11957 () Bool)

(assert (=> d!11957 (= (array_inv!1110 (_values!2050 newMap!16)) (bvsge (size!2025 (_values!2050 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!60590 d!11957))

(declare-fun d!11959 () Bool)

(declare-fun e!39932 () Bool)

(assert (=> d!11959 e!39932))

(declare-fun res!33526 () Bool)

(assert (=> d!11959 (=> res!33526 e!39932)))

(declare-fun lt!24869 () Bool)

(assert (=> d!11959 (= res!33526 (not lt!24869))))

(declare-fun lt!24868 () Bool)

(assert (=> d!11959 (= lt!24869 lt!24868)))

(declare-fun lt!24867 () Unit!1625)

(declare-fun e!39933 () Unit!1625)

(assert (=> d!11959 (= lt!24867 e!39933)))

(declare-fun c!7874 () Bool)

(assert (=> d!11959 (= c!7874 lt!24868)))

(declare-fun containsKey!129 (List!1436 (_ BitVec 64)) Bool)

(assert (=> d!11959 (= lt!24868 (containsKey!129 (toList!700 lt!24826) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(assert (=> d!11959 (= (contains!686 lt!24826 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) lt!24869)))

(declare-fun b!60703 () Bool)

(declare-fun lt!24866 () Unit!1625)

(assert (=> b!60703 (= e!39933 lt!24866)))

(declare-fun lemmaContainsKeyImpliesGetValueByKeyDefined!77 (List!1436 (_ BitVec 64)) Unit!1625)

(assert (=> b!60703 (= lt!24866 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 lt!24826) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(declare-datatypes ((Option!131 0))(
  ( (Some!130 (v!2407 V!2859)) (None!129) )
))
(declare-fun isDefined!78 (Option!131) Bool)

(declare-fun getValueByKey!125 (List!1436 (_ BitVec 64)) Option!131)

(assert (=> b!60703 (isDefined!78 (getValueByKey!125 (toList!700 lt!24826) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(declare-fun b!60704 () Bool)

(declare-fun Unit!1629 () Unit!1625)

(assert (=> b!60704 (= e!39933 Unit!1629)))

(declare-fun b!60705 () Bool)

(assert (=> b!60705 (= e!39932 (isDefined!78 (getValueByKey!125 (toList!700 lt!24826) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355))))))

(assert (= (and d!11959 c!7874) b!60703))

(assert (= (and d!11959 (not c!7874)) b!60704))

(assert (= (and d!11959 (not res!33526)) b!60705))

(assert (=> d!11959 m!53313))

(declare-fun m!53419 () Bool)

(assert (=> d!11959 m!53419))

(assert (=> b!60703 m!53313))

(declare-fun m!53421 () Bool)

(assert (=> b!60703 m!53421))

(assert (=> b!60703 m!53313))

(declare-fun m!53423 () Bool)

(assert (=> b!60703 m!53423))

(assert (=> b!60703 m!53423))

(declare-fun m!53425 () Bool)

(assert (=> b!60703 m!53425))

(assert (=> b!60705 m!53313))

(assert (=> b!60705 m!53423))

(assert (=> b!60705 m!53423))

(assert (=> b!60705 m!53425))

(assert (=> b!60593 d!11959))

(declare-fun b!60782 () Bool)

(declare-fun e!39981 () Bool)

(declare-fun e!39987 () Bool)

(assert (=> b!60782 (= e!39981 e!39987)))

(declare-fun res!33568 () Bool)

(declare-fun call!4625 () ListLongMap!1369)

(assert (=> b!60782 (= res!33568 (contains!686 call!4625 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(assert (=> b!60782 (=> (not res!33568) (not e!39987))))

(declare-fun bm!4614 () Bool)

(declare-fun call!4633 () Bool)

(declare-fun call!4629 () Bool)

(assert (=> bm!4614 (= call!4633 call!4629)))

(declare-datatypes ((SeekEntryResult!228 0))(
  ( (MissingZero!228 (index!3036 (_ BitVec 32))) (Found!228 (index!3037 (_ BitVec 32))) (Intermediate!228 (undefined!1040 Bool) (index!3038 (_ BitVec 32)) (x!10162 (_ BitVec 32))) (Undefined!228) (MissingVacant!228 (index!3039 (_ BitVec 32))) )
))
(declare-fun lt!24944 () SeekEntryResult!228)

(declare-fun e!39976 () Bool)

(declare-fun b!60783 () Bool)

(assert (=> b!60783 (= e!39976 (= (select (arr!1793 (_keys!3695 newMap!16)) (index!3037 lt!24944)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(declare-fun lt!24941 () tuple2!2030)

(declare-fun c!7904 () Bool)

(declare-fun bm!4615 () Bool)

(assert (=> bm!4615 (= call!4625 (map!1112 (ite c!7904 (_2!1026 lt!24941) newMap!16)))))

(declare-fun bm!4616 () Bool)

(declare-fun call!4636 () ListLongMap!1369)

(declare-fun call!4640 () ListLongMap!1369)

(assert (=> bm!4616 (= call!4636 call!4640)))

(declare-fun bm!4617 () Bool)

(declare-fun call!4618 () ListLongMap!1369)

(assert (=> bm!4617 (= call!4618 call!4640)))

(declare-fun b!60784 () Bool)

(declare-fun e!39988 () tuple2!2030)

(declare-fun lt!24950 () tuple2!2030)

(assert (=> b!60784 (= e!39988 (tuple2!2031 (_1!1026 lt!24950) (_2!1026 lt!24950)))))

(declare-fun call!4623 () tuple2!2030)

(assert (=> b!60784 (= lt!24950 call!4623)))

(declare-fun bm!4618 () Bool)

(declare-fun call!4622 () Bool)

(assert (=> bm!4618 (= call!4629 call!4622)))

(declare-fun b!60785 () Bool)

(declare-fun lt!24930 () tuple2!2030)

(assert (=> b!60785 (= lt!24930 call!4623)))

(declare-fun e!39986 () tuple2!2030)

(assert (=> b!60785 (= e!39986 (tuple2!2031 (_1!1026 lt!24930) (_2!1026 lt!24930)))))

(declare-fun b!60786 () Bool)

(declare-fun res!33561 () Bool)

(declare-fun e!39984 () Bool)

(assert (=> b!60786 (=> (not res!33561) (not e!39984))))

(declare-fun call!4637 () Bool)

(assert (=> b!60786 (= res!33561 call!4637)))

(declare-fun e!39983 () Bool)

(assert (=> b!60786 (= e!39983 e!39984)))

(declare-fun lt!24947 () SeekEntryResult!228)

(declare-fun c!7910 () Bool)

(declare-fun bm!4619 () Bool)

(declare-fun updateHelperNewKey!16 (LongMapFixedSize!630 (_ BitVec 64) V!2859 (_ BitVec 32)) tuple2!2030)

(assert (=> bm!4619 (= call!4623 (updateHelperNewKey!16 newMap!16 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947))))))

(declare-fun bm!4620 () Bool)

(declare-fun call!4620 () ListLongMap!1369)

(declare-fun call!4621 () ListLongMap!1369)

(assert (=> bm!4620 (= call!4620 call!4621)))

(declare-fun b!60787 () Bool)

(declare-fun lt!24948 () Unit!1625)

(declare-fun lt!24939 () Unit!1625)

(assert (=> b!60787 (= lt!24948 lt!24939)))

(declare-fun call!4638 () Bool)

(assert (=> b!60787 call!4638))

(declare-fun lt!24925 () array!3749)

(declare-fun lemmaValidKeyInArrayIsInListMap!77 (array!3747 array!3749 (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 (_ BitVec 32) Int) Unit!1625)

(assert (=> b!60787 (= lt!24939 (lemmaValidKeyInArrayIsInListMap!77 (_keys!3695 newMap!16) lt!24925 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (index!3037 lt!24947) (defaultEntry!2067 newMap!16)))))

(assert (=> b!60787 (= lt!24925 (array!3750 (store (arr!1794 (_values!2050 newMap!16)) (index!3037 lt!24947) (ValueCellFull!861 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2025 (_values!2050 newMap!16))))))

(declare-fun lt!24932 () Unit!1625)

(declare-fun lt!24924 () Unit!1625)

(assert (=> b!60787 (= lt!24932 lt!24924)))

(declare-fun call!4635 () ListLongMap!1369)

(assert (=> b!60787 (= call!4635 (getCurrentListMap!405 (_keys!3695 newMap!16) (array!3750 (store (arr!1794 (_values!2050 newMap!16)) (index!3037 lt!24947) (ValueCellFull!861 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2025 (_values!2050 newMap!16))) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!16 (array!3747 array!3749 (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 (_ BitVec 32) (_ BitVec 64) V!2859 Int) Unit!1625)

(assert (=> b!60787 (= lt!24924 (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!16 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (index!3037 lt!24947) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2067 newMap!16)))))

(declare-fun lt!24946 () Unit!1625)

(declare-fun e!39993 () Unit!1625)

(assert (=> b!60787 (= lt!24946 e!39993)))

(declare-fun c!7908 () Bool)

(assert (=> b!60787 (= c!7908 (contains!686 call!4621 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(assert (=> b!60787 (= e!39986 (tuple2!2031 true (LongMapFixedSize!631 (defaultEntry!2067 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (_size!364 newMap!16) (_keys!3695 newMap!16) (array!3750 (store (arr!1794 (_values!2050 newMap!16)) (index!3037 lt!24947) (ValueCellFull!861 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2025 (_values!2050 newMap!16))) (_vacant!364 newMap!16))))))

(declare-fun b!60788 () Bool)

(declare-fun res!33560 () Bool)

(declare-fun e!39979 () Bool)

(assert (=> b!60788 (=> (not res!33560) (not e!39979))))

(declare-fun lt!24934 () SeekEntryResult!228)

(assert (=> b!60788 (= res!33560 (= (select (arr!1793 (_keys!3695 newMap!16)) (index!3036 lt!24934)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60789 () Bool)

(declare-fun call!4639 () Bool)

(assert (=> b!60789 (= e!39979 (not call!4639))))

(declare-fun bm!4621 () Bool)

(declare-fun call!4624 () Bool)

(assert (=> bm!4621 (= call!4624 call!4622)))

(declare-fun b!60790 () Bool)

(declare-fun res!33565 () Bool)

(assert (=> b!60790 (= res!33565 (= (select (arr!1793 (_keys!3695 newMap!16)) (index!3039 lt!24934)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!39989 () Bool)

(assert (=> b!60790 (=> (not res!33565) (not e!39989))))

(declare-fun b!60791 () Bool)

(declare-fun e!39980 () Bool)

(assert (=> b!60791 (= e!39980 e!39989)))

(declare-fun res!33555 () Bool)

(assert (=> b!60791 (= res!33555 call!4633)))

(assert (=> b!60791 (=> (not res!33555) (not e!39989))))

(declare-fun bm!4622 () Bool)

(declare-fun call!4634 () SeekEntryResult!228)

(declare-fun call!4628 () SeekEntryResult!228)

(assert (=> bm!4622 (= call!4634 call!4628)))

(declare-fun b!60792 () Bool)

(declare-fun lt!24927 () Unit!1625)

(declare-fun lt!24943 () Unit!1625)

(assert (=> b!60792 (= lt!24927 lt!24943)))

(declare-fun call!4631 () ListLongMap!1369)

(assert (=> b!60792 (= call!4631 call!4636)))

(declare-fun lt!24937 () (_ BitVec 32))

(declare-fun lemmaChangeLongMinValueKeyThenAddPairToListMap!16 (array!3747 array!3749 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 V!2859 Int) Unit!1625)

(assert (=> b!60792 (= lt!24943 (lemmaChangeLongMinValueKeyThenAddPairToListMap!16 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) lt!24937 (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2067 newMap!16)))))

(assert (=> b!60792 (= lt!24937 (bvor (extraKeys!1950 newMap!16) #b00000000000000000000000000000010))))

(declare-fun e!39991 () tuple2!2030)

(assert (=> b!60792 (= e!39991 (tuple2!2031 true (LongMapFixedSize!631 (defaultEntry!2067 newMap!16) (mask!5963 newMap!16) (bvor (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) (zeroValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (_size!364 newMap!16) (_keys!3695 newMap!16) (_values!2050 newMap!16) (_vacant!364 newMap!16))))))

(declare-fun b!60793 () Bool)

(declare-fun res!33567 () Bool)

(assert (=> b!60793 (=> (not res!33567) (not e!39979))))

(assert (=> b!60793 (= res!33567 call!4633)))

(declare-fun e!39990 () Bool)

(assert (=> b!60793 (= e!39990 e!39979)))

(declare-fun call!4617 () Unit!1625)

(declare-fun bm!4623 () Bool)

(declare-fun lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!16 (array!3747 array!3749 (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 (_ BitVec 64) Int) Unit!1625)

(assert (=> bm!4623 (= call!4617 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!16 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (defaultEntry!2067 newMap!16)))))

(declare-fun bm!4624 () Bool)

(assert (=> bm!4624 (= call!4631 call!4635)))

(declare-fun b!60794 () Bool)

(declare-fun lt!24945 () Unit!1625)

(declare-fun e!39974 () Unit!1625)

(assert (=> b!60794 (= lt!24945 e!39974)))

(declare-fun c!7907 () Bool)

(assert (=> b!60794 (= c!7907 call!4638)))

(declare-fun e!39978 () tuple2!2030)

(assert (=> b!60794 (= e!39978 (tuple2!2031 false newMap!16))))

(declare-fun lt!24931 () SeekEntryResult!228)

(declare-fun c!7900 () Bool)

(declare-fun lt!24928 () SeekEntryResult!228)

(declare-fun bm!4625 () Bool)

(declare-fun c!7903 () Bool)

(declare-fun c!7902 () Bool)

(declare-fun inRange!0 ((_ BitVec 32) (_ BitVec 32)) Bool)

(assert (=> bm!4625 (= call!4622 (inRange!0 (ite c!7902 (ite c!7907 (index!3037 lt!24944) (ite c!7903 (index!3036 lt!24934) (index!3039 lt!24934))) (ite c!7908 (index!3037 lt!24931) (ite c!7900 (index!3036 lt!24928) (index!3039 lt!24928)))) (mask!5963 newMap!16)))))

(declare-fun b!60795 () Bool)

(declare-fun e!39992 () tuple2!2030)

(assert (=> b!60795 (= e!39992 e!39978)))

(declare-fun seekEntryOrOpen!0 ((_ BitVec 64) array!3747 (_ BitVec 32)) SeekEntryResult!228)

(assert (=> b!60795 (= lt!24947 (seekEntryOrOpen!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (_keys!3695 newMap!16) (mask!5963 newMap!16)))))

(assert (=> b!60795 (= c!7902 ((_ is Undefined!228) lt!24947))))

(declare-fun bm!4626 () Bool)

(declare-fun call!4630 () SeekEntryResult!228)

(assert (=> bm!4626 (= call!4630 call!4628)))

(declare-fun b!60796 () Bool)

(declare-fun call!4627 () Bool)

(assert (=> b!60796 (= e!39984 (not call!4627))))

(declare-fun b!60797 () Bool)

(assert (=> b!60797 (= e!39989 (not call!4639))))

(declare-fun b!60798 () Bool)

(assert (=> b!60798 (= e!39988 e!39986)))

(declare-fun c!7905 () Bool)

(assert (=> b!60798 (= c!7905 ((_ is MissingZero!228) lt!24947))))

(declare-fun b!60799 () Bool)

(assert (=> b!60799 (= c!7910 ((_ is MissingVacant!228) lt!24947))))

(assert (=> b!60799 (= e!39978 e!39988)))

(declare-fun b!60800 () Bool)

(declare-fun lt!24929 () Unit!1625)

(declare-fun lt!24936 () Unit!1625)

(assert (=> b!60800 (= lt!24929 lt!24936)))

(assert (=> b!60800 (= call!4631 call!4620)))

(declare-fun lt!24940 () (_ BitVec 32))

(declare-fun lemmaChangeZeroKeyThenAddPairToListMap!16 (array!3747 array!3749 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 V!2859 Int) Unit!1625)

(assert (=> b!60800 (= lt!24936 (lemmaChangeZeroKeyThenAddPairToListMap!16 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) lt!24940 (zeroValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1981 newMap!16) (defaultEntry!2067 newMap!16)))))

(assert (=> b!60800 (= lt!24940 (bvor (extraKeys!1950 newMap!16) #b00000000000000000000000000000001))))

(assert (=> b!60800 (= e!39991 (tuple2!2031 true (LongMapFixedSize!631 (defaultEntry!2067 newMap!16) (mask!5963 newMap!16) (bvor (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1981 newMap!16) (_size!364 newMap!16) (_keys!3695 newMap!16) (_values!2050 newMap!16) (_vacant!364 newMap!16))))))

(declare-fun b!60801 () Bool)

(declare-fun res!33556 () Bool)

(assert (=> b!60801 (= res!33556 (= (select (arr!1793 (_keys!3695 newMap!16)) (index!3039 lt!24928)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!39982 () Bool)

(assert (=> b!60801 (=> (not res!33556) (not e!39982))))

(declare-fun b!60802 () Bool)

(declare-fun lt!24935 () Unit!1625)

(assert (=> b!60802 (= e!39974 lt!24935)))

(assert (=> b!60802 (= lt!24935 call!4617)))

(assert (=> b!60802 (= lt!24934 call!4630)))

(assert (=> b!60802 (= c!7903 ((_ is MissingZero!228) lt!24934))))

(assert (=> b!60802 e!39990))

(declare-fun b!60803 () Bool)

(declare-fun Unit!1630 () Unit!1625)

(assert (=> b!60803 (= e!39974 Unit!1630)))

(declare-fun lt!24938 () Unit!1625)

(declare-fun call!4632 () Unit!1625)

(assert (=> b!60803 (= lt!24938 call!4632)))

(assert (=> b!60803 (= lt!24944 call!4630)))

(declare-fun res!33563 () Bool)

(assert (=> b!60803 (= res!33563 ((_ is Found!228) lt!24944))))

(assert (=> b!60803 (=> (not res!33563) (not e!39976))))

(assert (=> b!60803 e!39976))

(declare-fun lt!24926 () Unit!1625)

(assert (=> b!60803 (= lt!24926 lt!24938)))

(assert (=> b!60803 false))

(declare-fun b!60804 () Bool)

(declare-fun res!33559 () Bool)

(assert (=> b!60804 (=> (not res!33559) (not e!39984))))

(assert (=> b!60804 (= res!33559 (= (select (arr!1793 (_keys!3695 newMap!16)) (index!3036 lt!24928)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4627 () Bool)

(assert (=> bm!4627 (= call!4637 call!4624)))

(declare-fun bm!4628 () Bool)

(declare-fun lemmaInListMapThenSeekEntryOrOpenFindsIt!16 (array!3747 array!3749 (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 (_ BitVec 64) Int) Unit!1625)

(assert (=> bm!4628 (= call!4632 (lemmaInListMapThenSeekEntryOrOpenFindsIt!16 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (defaultEntry!2067 newMap!16)))))

(declare-fun b!60805 () Bool)

(declare-fun c!7901 () Bool)

(assert (=> b!60805 (= c!7901 ((_ is MissingVacant!228) lt!24928))))

(declare-fun e!39985 () Bool)

(assert (=> b!60805 (= e!39983 e!39985)))

(declare-fun b!60806 () Bool)

(declare-fun call!4626 () ListLongMap!1369)

(declare-fun +!82 (ListLongMap!1369 tuple2!2032) ListLongMap!1369)

(assert (=> b!60806 (= e!39987 (= call!4625 (+!82 call!4626 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun bm!4629 () Bool)

(assert (=> bm!4629 (= call!4638 (contains!686 call!4618 (ite c!7902 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (select (arr!1793 (_keys!3695 newMap!16)) (index!3037 lt!24947)))))))

(declare-fun b!60807 () Bool)

(declare-fun Unit!1631 () Unit!1625)

(assert (=> b!60807 (= e!39993 Unit!1631)))

(declare-fun lt!24933 () Unit!1625)

(assert (=> b!60807 (= lt!24933 call!4617)))

(assert (=> b!60807 (= lt!24928 call!4634)))

(assert (=> b!60807 (= c!7900 ((_ is MissingZero!228) lt!24928))))

(assert (=> b!60807 e!39983))

(declare-fun lt!24942 () Unit!1625)

(assert (=> b!60807 (= lt!24942 lt!24933)))

(assert (=> b!60807 false))

(declare-fun b!60808 () Bool)

(declare-fun res!33564 () Bool)

(assert (=> b!60808 (= res!33564 call!4629)))

(assert (=> b!60808 (=> (not res!33564) (not e!39976))))

(declare-fun bm!4630 () Bool)

(declare-fun call!4619 () Bool)

(assert (=> bm!4630 (= call!4639 call!4619)))

(declare-fun c!7909 () Bool)

(declare-fun c!7899 () Bool)

(declare-fun bm!4631 () Bool)

(assert (=> bm!4631 (= call!4621 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (ite (and c!7909 c!7899) lt!24940 (extraKeys!1950 newMap!16)) (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun bm!4632 () Bool)

(assert (=> bm!4632 (= call!4627 call!4619)))

(declare-fun b!60809 () Bool)

(assert (=> b!60809 (= e!39985 ((_ is Undefined!228) lt!24928))))

(declare-fun bm!4633 () Bool)

(assert (=> bm!4633 (= call!4626 (map!1112 (ite c!7904 newMap!16 (_2!1026 lt!24941))))))

(declare-fun bm!4634 () Bool)

(assert (=> bm!4634 (= call!4628 (seekEntryOrOpen!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (_keys!3695 newMap!16) (mask!5963 newMap!16)))))

(declare-fun b!60810 () Bool)

(declare-fun lt!24949 () Unit!1625)

(assert (=> b!60810 (= e!39993 lt!24949)))

(assert (=> b!60810 (= lt!24949 call!4632)))

(assert (=> b!60810 (= lt!24931 call!4634)))

(declare-fun res!33566 () Bool)

(assert (=> b!60810 (= res!33566 ((_ is Found!228) lt!24931))))

(declare-fun e!39977 () Bool)

(assert (=> b!60810 (=> (not res!33566) (not e!39977))))

(assert (=> b!60810 e!39977))

(declare-fun bm!4635 () Bool)

(assert (=> bm!4635 (= call!4635 (+!82 (ite c!7909 (ite c!7899 call!4636 call!4620) call!4621) (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!60811 () Bool)

(declare-fun res!33558 () Bool)

(assert (=> b!60811 (= res!33558 call!4624)))

(assert (=> b!60811 (=> (not res!33558) (not e!39977))))

(declare-fun b!60812 () Bool)

(declare-fun e!39975 () Bool)

(assert (=> b!60812 (= e!39975 e!39981)))

(assert (=> b!60812 (= c!7904 (_1!1026 lt!24941))))

(declare-fun b!60813 () Bool)

(assert (=> b!60813 (= e!39980 ((_ is Undefined!228) lt!24934))))

(declare-fun d!11961 () Bool)

(assert (=> d!11961 e!39975))

(declare-fun res!33562 () Bool)

(assert (=> d!11961 (=> (not res!33562) (not e!39975))))

(assert (=> d!11961 (= res!33562 (valid!260 (_2!1026 lt!24941)))))

(assert (=> d!11961 (= lt!24941 e!39992)))

(assert (=> d!11961 (= c!7909 (= (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (bvneg (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355))))))

(assert (=> d!11961 (valid!260 newMap!16)))

(assert (=> d!11961 (= (update!75 newMap!16 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) lt!24941)))

(declare-fun bm!4636 () Bool)

(assert (=> bm!4636 (= call!4619 (arrayContainsKey!0 (_keys!3695 newMap!16) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!60814 () Bool)

(declare-fun c!7906 () Bool)

(assert (=> b!60814 (= c!7906 ((_ is MissingVacant!228) lt!24934))))

(assert (=> b!60814 (= e!39990 e!39980)))

(declare-fun b!60815 () Bool)

(assert (=> b!60815 (= e!39977 (= (select (arr!1793 (_keys!3695 newMap!16)) (index!3037 lt!24931)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(declare-fun b!60816 () Bool)

(assert (=> b!60816 (= e!39982 (not call!4627))))

(declare-fun b!60817 () Bool)

(assert (=> b!60817 (= e!39985 e!39982)))

(declare-fun res!33557 () Bool)

(assert (=> b!60817 (= res!33557 call!4637)))

(assert (=> b!60817 (=> (not res!33557) (not e!39982))))

(declare-fun b!60818 () Bool)

(assert (=> b!60818 (= e!39992 e!39991)))

(assert (=> b!60818 (= c!7899 (= (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4637 () Bool)

(assert (=> bm!4637 (= call!4640 (getCurrentListMap!405 (_keys!3695 newMap!16) (ite (or c!7909 c!7902) (_values!2050 newMap!16) lt!24925) (mask!5963 newMap!16) (ite c!7909 (ite c!7899 (extraKeys!1950 newMap!16) lt!24937) (extraKeys!1950 newMap!16)) (zeroValue!1981 newMap!16) (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun b!60819 () Bool)

(assert (=> b!60819 (= e!39981 (= call!4626 call!4625))))

(assert (= (and d!11961 c!7909) b!60818))

(assert (= (and d!11961 (not c!7909)) b!60795))

(assert (= (and b!60818 c!7899) b!60800))

(assert (= (and b!60818 (not c!7899)) b!60792))

(assert (= (or b!60800 b!60792) bm!4616))

(assert (= (or b!60800 b!60792) bm!4620))

(assert (= (or b!60800 b!60792) bm!4624))

(assert (= (and b!60795 c!7902) b!60794))

(assert (= (and b!60795 (not c!7902)) b!60799))

(assert (= (and b!60794 c!7907) b!60803))

(assert (= (and b!60794 (not c!7907)) b!60802))

(assert (= (and b!60803 res!33563) b!60808))

(assert (= (and b!60808 res!33564) b!60783))

(assert (= (and b!60802 c!7903) b!60793))

(assert (= (and b!60802 (not c!7903)) b!60814))

(assert (= (and b!60793 res!33567) b!60788))

(assert (= (and b!60788 res!33560) b!60789))

(assert (= (and b!60814 c!7906) b!60791))

(assert (= (and b!60814 (not c!7906)) b!60813))

(assert (= (and b!60791 res!33555) b!60790))

(assert (= (and b!60790 res!33565) b!60797))

(assert (= (or b!60793 b!60791) bm!4614))

(assert (= (or b!60789 b!60797) bm!4630))

(assert (= (or b!60808 bm!4614) bm!4618))

(assert (= (or b!60803 b!60802) bm!4626))

(assert (= (and b!60799 c!7910) b!60784))

(assert (= (and b!60799 (not c!7910)) b!60798))

(assert (= (and b!60798 c!7905) b!60785))

(assert (= (and b!60798 (not c!7905)) b!60787))

(assert (= (and b!60787 c!7908) b!60810))

(assert (= (and b!60787 (not c!7908)) b!60807))

(assert (= (and b!60810 res!33566) b!60811))

(assert (= (and b!60811 res!33558) b!60815))

(assert (= (and b!60807 c!7900) b!60786))

(assert (= (and b!60807 (not c!7900)) b!60805))

(assert (= (and b!60786 res!33561) b!60804))

(assert (= (and b!60804 res!33559) b!60796))

(assert (= (and b!60805 c!7901) b!60817))

(assert (= (and b!60805 (not c!7901)) b!60809))

(assert (= (and b!60817 res!33557) b!60801))

(assert (= (and b!60801 res!33556) b!60816))

(assert (= (or b!60786 b!60817) bm!4627))

(assert (= (or b!60796 b!60816) bm!4632))

(assert (= (or b!60811 bm!4627) bm!4621))

(assert (= (or b!60810 b!60807) bm!4622))

(assert (= (or b!60784 b!60785) bm!4619))

(assert (= (or bm!4626 bm!4622) bm!4634))

(assert (= (or bm!4618 bm!4621) bm!4625))

(assert (= (or b!60803 b!60810) bm!4628))

(assert (= (or b!60802 b!60807) bm!4623))

(assert (= (or bm!4630 bm!4632) bm!4636))

(assert (= (or b!60794 b!60787) bm!4617))

(assert (= (or b!60794 b!60787) bm!4629))

(assert (= (or bm!4616 bm!4617) bm!4637))

(assert (= (or bm!4620 b!60787) bm!4631))

(assert (= (or bm!4624 b!60787) bm!4635))

(assert (= (and d!11961 res!33562) b!60812))

(assert (= (and b!60812 c!7904) b!60782))

(assert (= (and b!60812 (not c!7904)) b!60819))

(assert (= (and b!60782 res!33568) b!60806))

(assert (= (or b!60806 b!60819) bm!4633))

(assert (= (or b!60782 b!60806 b!60819) bm!4615))

(assert (=> b!60792 m!53337))

(declare-fun m!53427 () Bool)

(assert (=> b!60792 m!53427))

(assert (=> b!60795 m!53313))

(declare-fun m!53429 () Bool)

(assert (=> b!60795 m!53429))

(declare-fun m!53431 () Bool)

(assert (=> b!60806 m!53431))

(assert (=> b!60782 m!53313))

(declare-fun m!53433 () Bool)

(assert (=> b!60782 m!53433))

(declare-fun m!53435 () Bool)

(assert (=> b!60804 m!53435))

(declare-fun m!53437 () Bool)

(assert (=> b!60815 m!53437))

(declare-fun m!53439 () Bool)

(assert (=> bm!4635 m!53439))

(assert (=> bm!4634 m!53313))

(assert (=> bm!4634 m!53429))

(declare-fun m!53441 () Bool)

(assert (=> b!60788 m!53441))

(declare-fun m!53443 () Bool)

(assert (=> bm!4625 m!53443))

(declare-fun m!53445 () Bool)

(assert (=> bm!4633 m!53445))

(declare-fun m!53447 () Bool)

(assert (=> bm!4615 m!53447))

(declare-fun m!53449 () Bool)

(assert (=> bm!4631 m!53449))

(assert (=> bm!4623 m!53313))

(declare-fun m!53451 () Bool)

(assert (=> bm!4623 m!53451))

(declare-fun m!53453 () Bool)

(assert (=> bm!4629 m!53453))

(declare-fun m!53455 () Bool)

(assert (=> bm!4629 m!53455))

(assert (=> b!60800 m!53337))

(declare-fun m!53457 () Bool)

(assert (=> b!60800 m!53457))

(declare-fun m!53459 () Bool)

(assert (=> b!60801 m!53459))

(assert (=> bm!4619 m!53313))

(assert (=> bm!4619 m!53337))

(declare-fun m!53461 () Bool)

(assert (=> bm!4619 m!53461))

(declare-fun m!53463 () Bool)

(assert (=> b!60783 m!53463))

(assert (=> bm!4628 m!53313))

(declare-fun m!53465 () Bool)

(assert (=> bm!4628 m!53465))

(assert (=> bm!4636 m!53313))

(declare-fun m!53467 () Bool)

(assert (=> bm!4636 m!53467))

(declare-fun m!53469 () Bool)

(assert (=> d!11961 m!53469))

(assert (=> d!11961 m!53355))

(declare-fun m!53471 () Bool)

(assert (=> b!60787 m!53471))

(assert (=> b!60787 m!53313))

(assert (=> b!60787 m!53337))

(declare-fun m!53473 () Bool)

(assert (=> b!60787 m!53473))

(declare-fun m!53475 () Bool)

(assert (=> b!60787 m!53475))

(assert (=> b!60787 m!53313))

(declare-fun m!53477 () Bool)

(assert (=> b!60787 m!53477))

(declare-fun m!53479 () Bool)

(assert (=> b!60787 m!53479))

(declare-fun m!53481 () Bool)

(assert (=> bm!4637 m!53481))

(declare-fun m!53483 () Bool)

(assert (=> b!60790 m!53483))

(assert (=> b!60593 d!11961))

(declare-fun d!11963 () Bool)

(declare-fun c!7913 () Bool)

(assert (=> d!11963 (= c!7913 ((_ is ValueCellFull!861) (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(declare-fun e!39996 () V!2859)

(assert (=> d!11963 (= (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!39996)))

(declare-fun b!60824 () Bool)

(declare-fun get!1076 (ValueCell!861 V!2859) V!2859)

(assert (=> b!60824 (= e!39996 (get!1076 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!60825 () Bool)

(declare-fun get!1077 (ValueCell!861 V!2859) V!2859)

(assert (=> b!60825 (= e!39996 (get!1077 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11963 c!7913) b!60824))

(assert (= (and d!11963 (not c!7913)) b!60825))

(assert (=> b!60824 m!53333))

(assert (=> b!60824 m!53335))

(declare-fun m!53485 () Bool)

(assert (=> b!60824 m!53485))

(assert (=> b!60825 m!53333))

(assert (=> b!60825 m!53335))

(declare-fun m!53487 () Bool)

(assert (=> b!60825 m!53487))

(assert (=> b!60593 d!11963))

(declare-fun d!11965 () Bool)

(assert (=> d!11965 (= (map!1112 newMap!16) (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun bs!2642 () Bool)

(assert (= bs!2642 d!11965))

(declare-fun m!53489 () Bool)

(assert (=> bs!2642 m!53489))

(assert (=> b!60603 d!11965))

(declare-fun b!60868 () Bool)

(declare-fun e!40029 () Bool)

(assert (=> b!60868 (= e!40029 (validKeyInArray!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!60869 () Bool)

(declare-fun res!33587 () Bool)

(declare-fun e!40024 () Bool)

(assert (=> b!60869 (=> (not res!33587) (not e!40024))))

(declare-fun e!40027 () Bool)

(assert (=> b!60869 (= res!33587 e!40027)))

(declare-fun res!33595 () Bool)

(assert (=> b!60869 (=> res!33595 e!40027)))

(declare-fun e!40023 () Bool)

(assert (=> b!60869 (= res!33595 (not e!40023))))

(declare-fun res!33591 () Bool)

(assert (=> b!60869 (=> (not res!33591) (not e!40023))))

(assert (=> b!60869 (= res!33591 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992))))))))

(declare-fun b!60870 () Bool)

(declare-fun e!40031 () Unit!1625)

(declare-fun Unit!1632 () Unit!1625)

(assert (=> b!60870 (= e!40031 Unit!1632)))

(declare-fun b!60871 () Bool)

(declare-fun c!7929 () Bool)

(assert (=> b!60871 (= c!7929 (and (not (= (bvand (extraKeys!1950 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1950 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!40028 () ListLongMap!1369)

(declare-fun e!40030 () ListLongMap!1369)

(assert (=> b!60871 (= e!40028 e!40030)))

(declare-fun b!60872 () Bool)

(declare-fun e!40035 () ListLongMap!1369)

(declare-fun call!4661 () ListLongMap!1369)

(assert (=> b!60872 (= e!40035 (+!82 call!4661 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))

(declare-fun call!4655 () ListLongMap!1369)

(declare-fun c!7927 () Bool)

(declare-fun c!7928 () Bool)

(declare-fun bm!4652 () Bool)

(declare-fun call!4660 () ListLongMap!1369)

(declare-fun call!4659 () ListLongMap!1369)

(assert (=> bm!4652 (= call!4661 (+!82 (ite c!7927 call!4655 (ite c!7928 call!4660 call!4659)) (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun b!60873 () Bool)

(declare-fun res!33590 () Bool)

(assert (=> b!60873 (=> (not res!33590) (not e!40024))))

(declare-fun e!40033 () Bool)

(assert (=> b!60873 (= res!33590 e!40033)))

(declare-fun c!7930 () Bool)

(assert (=> b!60873 (= c!7930 (not (= (bvand (extraKeys!1950 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!60874 () Bool)

(declare-fun e!40026 () Bool)

(declare-fun lt!24995 () ListLongMap!1369)

(declare-fun apply!67 (ListLongMap!1369 (_ BitVec 64)) V!2859)

(assert (=> b!60874 (= e!40026 (= (apply!67 lt!24995 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))

(declare-fun bm!4653 () Bool)

(assert (=> bm!4653 (= call!4659 call!4660)))

(declare-fun b!60875 () Bool)

(assert (=> b!60875 (= e!40033 e!40026)))

(declare-fun res!33588 () Bool)

(declare-fun call!4657 () Bool)

(assert (=> b!60875 (= res!33588 call!4657)))

(assert (=> b!60875 (=> (not res!33588) (not e!40026))))

(declare-fun b!60876 () Bool)

(declare-fun e!40032 () Bool)

(assert (=> b!60876 (= e!40032 (= (apply!67 lt!24995 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))

(declare-fun b!60877 () Bool)

(assert (=> b!60877 (= e!40030 call!4659)))

(declare-fun bm!4655 () Bool)

(declare-fun getCurrentListMapNoExtraKeys!45 (array!3747 array!3749 (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 (_ BitVec 32) Int) ListLongMap!1369)

(assert (=> bm!4655 (= call!4655 (getCurrentListMapNoExtraKeys!45 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (_values!2050 (v!2404 (underlying!231 thiss!992))) (mask!5963 (v!2404 (underlying!231 thiss!992))) (extraKeys!1950 (v!2404 (underlying!231 thiss!992))) (zeroValue!1981 (v!2404 (underlying!231 thiss!992))) (minValue!1981 (v!2404 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2067 (v!2404 (underlying!231 thiss!992)))))))

(declare-fun b!60878 () Bool)

(declare-fun e!40025 () Bool)

(assert (=> b!60878 (= e!40027 e!40025)))

(declare-fun res!33589 () Bool)

(assert (=> b!60878 (=> (not res!33589) (not e!40025))))

(assert (=> b!60878 (= res!33589 (contains!686 lt!24995 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!60878 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992))))))))

(declare-fun bm!4656 () Bool)

(assert (=> bm!4656 (= call!4657 (contains!686 lt!24995 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60879 () Bool)

(declare-fun call!4658 () ListLongMap!1369)

(assert (=> b!60879 (= e!40030 call!4658)))

(declare-fun b!60880 () Bool)

(assert (=> b!60880 (= e!40025 (= (apply!67 lt!24995 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!60880 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2025 (_values!2050 (v!2404 (underlying!231 thiss!992))))))))

(assert (=> b!60880 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992))))))))

(declare-fun bm!4657 () Bool)

(assert (=> bm!4657 (= call!4658 call!4661)))

(declare-fun d!11967 () Bool)

(assert (=> d!11967 e!40024))

(declare-fun res!33592 () Bool)

(assert (=> d!11967 (=> (not res!33592) (not e!40024))))

(assert (=> d!11967 (= res!33592 (or (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992))))) (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992))))))))))

(declare-fun lt!25011 () ListLongMap!1369)

(assert (=> d!11967 (= lt!24995 lt!25011)))

(declare-fun lt!25004 () Unit!1625)

(assert (=> d!11967 (= lt!25004 e!40031)))

(declare-fun c!7931 () Bool)

(assert (=> d!11967 (= c!7931 e!40029)))

(declare-fun res!33594 () Bool)

(assert (=> d!11967 (=> (not res!33594) (not e!40029))))

(assert (=> d!11967 (= res!33594 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992))))))))

(assert (=> d!11967 (= lt!25011 e!40035)))

(assert (=> d!11967 (= c!7927 (and (not (= (bvand (extraKeys!1950 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1950 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11967 (validMask!0 (mask!5963 (v!2404 (underlying!231 thiss!992))))))

(assert (=> d!11967 (= (getCurrentListMap!405 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (_values!2050 (v!2404 (underlying!231 thiss!992))) (mask!5963 (v!2404 (underlying!231 thiss!992))) (extraKeys!1950 (v!2404 (underlying!231 thiss!992))) (zeroValue!1981 (v!2404 (underlying!231 thiss!992))) (minValue!1981 (v!2404 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2067 (v!2404 (underlying!231 thiss!992)))) lt!24995)))

(declare-fun bm!4654 () Bool)

(assert (=> bm!4654 (= call!4660 call!4655)))

(declare-fun b!60881 () Bool)

(declare-fun lt!25014 () Unit!1625)

(assert (=> b!60881 (= e!40031 lt!25014)))

(declare-fun lt!25006 () ListLongMap!1369)

(assert (=> b!60881 (= lt!25006 (getCurrentListMapNoExtraKeys!45 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (_values!2050 (v!2404 (underlying!231 thiss!992))) (mask!5963 (v!2404 (underlying!231 thiss!992))) (extraKeys!1950 (v!2404 (underlying!231 thiss!992))) (zeroValue!1981 (v!2404 (underlying!231 thiss!992))) (minValue!1981 (v!2404 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2067 (v!2404 (underlying!231 thiss!992)))))))

(declare-fun lt!24996 () (_ BitVec 64))

(assert (=> b!60881 (= lt!24996 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25009 () (_ BitVec 64))

(assert (=> b!60881 (= lt!25009 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!25016 () Unit!1625)

(declare-fun addStillContains!43 (ListLongMap!1369 (_ BitVec 64) V!2859 (_ BitVec 64)) Unit!1625)

(assert (=> b!60881 (= lt!25016 (addStillContains!43 lt!25006 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))) lt!25009))))

(assert (=> b!60881 (contains!686 (+!82 lt!25006 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))) lt!25009)))

(declare-fun lt!25002 () Unit!1625)

(assert (=> b!60881 (= lt!25002 lt!25016)))

(declare-fun lt!25003 () ListLongMap!1369)

(assert (=> b!60881 (= lt!25003 (getCurrentListMapNoExtraKeys!45 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (_values!2050 (v!2404 (underlying!231 thiss!992))) (mask!5963 (v!2404 (underlying!231 thiss!992))) (extraKeys!1950 (v!2404 (underlying!231 thiss!992))) (zeroValue!1981 (v!2404 (underlying!231 thiss!992))) (minValue!1981 (v!2404 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2067 (v!2404 (underlying!231 thiss!992)))))))

(declare-fun lt!25001 () (_ BitVec 64))

(assert (=> b!60881 (= lt!25001 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25015 () (_ BitVec 64))

(assert (=> b!60881 (= lt!25015 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!25000 () Unit!1625)

(declare-fun addApplyDifferent!43 (ListLongMap!1369 (_ BitVec 64) V!2859 (_ BitVec 64)) Unit!1625)

(assert (=> b!60881 (= lt!25000 (addApplyDifferent!43 lt!25003 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992))) lt!25015))))

(assert (=> b!60881 (= (apply!67 (+!82 lt!25003 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) lt!25015) (apply!67 lt!25003 lt!25015))))

(declare-fun lt!24999 () Unit!1625)

(assert (=> b!60881 (= lt!24999 lt!25000)))

(declare-fun lt!25010 () ListLongMap!1369)

(assert (=> b!60881 (= lt!25010 (getCurrentListMapNoExtraKeys!45 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (_values!2050 (v!2404 (underlying!231 thiss!992))) (mask!5963 (v!2404 (underlying!231 thiss!992))) (extraKeys!1950 (v!2404 (underlying!231 thiss!992))) (zeroValue!1981 (v!2404 (underlying!231 thiss!992))) (minValue!1981 (v!2404 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2067 (v!2404 (underlying!231 thiss!992)))))))

(declare-fun lt!24997 () (_ BitVec 64))

(assert (=> b!60881 (= lt!24997 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25005 () (_ BitVec 64))

(assert (=> b!60881 (= lt!25005 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!25012 () Unit!1625)

(assert (=> b!60881 (= lt!25012 (addApplyDifferent!43 lt!25010 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))) lt!25005))))

(assert (=> b!60881 (= (apply!67 (+!82 lt!25010 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))) lt!25005) (apply!67 lt!25010 lt!25005))))

(declare-fun lt!25013 () Unit!1625)

(assert (=> b!60881 (= lt!25013 lt!25012)))

(declare-fun lt!24998 () ListLongMap!1369)

(assert (=> b!60881 (= lt!24998 (getCurrentListMapNoExtraKeys!45 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (_values!2050 (v!2404 (underlying!231 thiss!992))) (mask!5963 (v!2404 (underlying!231 thiss!992))) (extraKeys!1950 (v!2404 (underlying!231 thiss!992))) (zeroValue!1981 (v!2404 (underlying!231 thiss!992))) (minValue!1981 (v!2404 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2067 (v!2404 (underlying!231 thiss!992)))))))

(declare-fun lt!25008 () (_ BitVec 64))

(assert (=> b!60881 (= lt!25008 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25007 () (_ BitVec 64))

(assert (=> b!60881 (= lt!25007 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!60881 (= lt!25014 (addApplyDifferent!43 lt!24998 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992))) lt!25007))))

(assert (=> b!60881 (= (apply!67 (+!82 lt!24998 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) lt!25007) (apply!67 lt!24998 lt!25007))))

(declare-fun b!60882 () Bool)

(declare-fun e!40034 () Bool)

(declare-fun call!4656 () Bool)

(assert (=> b!60882 (= e!40034 (not call!4656))))

(declare-fun b!60883 () Bool)

(assert (=> b!60883 (= e!40028 call!4658)))

(declare-fun b!60884 () Bool)

(assert (=> b!60884 (= e!40023 (validKeyInArray!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!60885 () Bool)

(assert (=> b!60885 (= e!40033 (not call!4657))))

(declare-fun bm!4658 () Bool)

(assert (=> bm!4658 (= call!4656 (contains!686 lt!24995 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60886 () Bool)

(assert (=> b!60886 (= e!40034 e!40032)))

(declare-fun res!33593 () Bool)

(assert (=> b!60886 (= res!33593 call!4656)))

(assert (=> b!60886 (=> (not res!33593) (not e!40032))))

(declare-fun b!60887 () Bool)

(assert (=> b!60887 (= e!40035 e!40028)))

(assert (=> b!60887 (= c!7928 (and (not (= (bvand (extraKeys!1950 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1950 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!60888 () Bool)

(assert (=> b!60888 (= e!40024 e!40034)))

(declare-fun c!7926 () Bool)

(assert (=> b!60888 (= c!7926 (not (= (bvand (extraKeys!1950 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!11967 c!7927) b!60872))

(assert (= (and d!11967 (not c!7927)) b!60887))

(assert (= (and b!60887 c!7928) b!60883))

(assert (= (and b!60887 (not c!7928)) b!60871))

(assert (= (and b!60871 c!7929) b!60879))

(assert (= (and b!60871 (not c!7929)) b!60877))

(assert (= (or b!60879 b!60877) bm!4653))

(assert (= (or b!60883 bm!4653) bm!4654))

(assert (= (or b!60883 b!60879) bm!4657))

(assert (= (or b!60872 bm!4654) bm!4655))

(assert (= (or b!60872 bm!4657) bm!4652))

(assert (= (and d!11967 res!33594) b!60868))

(assert (= (and d!11967 c!7931) b!60881))

(assert (= (and d!11967 (not c!7931)) b!60870))

(assert (= (and d!11967 res!33592) b!60869))

(assert (= (and b!60869 res!33591) b!60884))

(assert (= (and b!60869 (not res!33595)) b!60878))

(assert (= (and b!60878 res!33589) b!60880))

(assert (= (and b!60869 res!33587) b!60873))

(assert (= (and b!60873 c!7930) b!60875))

(assert (= (and b!60873 (not c!7930)) b!60885))

(assert (= (and b!60875 res!33588) b!60874))

(assert (= (or b!60875 b!60885) bm!4656))

(assert (= (and b!60873 res!33590) b!60888))

(assert (= (and b!60888 c!7926) b!60886))

(assert (= (and b!60888 (not c!7926)) b!60882))

(assert (= (and b!60886 res!33593) b!60876))

(assert (= (or b!60886 b!60882) bm!4658))

(declare-fun b_lambda!2691 () Bool)

(assert (=> (not b_lambda!2691) (not b!60880)))

(assert (=> b!60880 t!4803))

(declare-fun b_and!3707 () Bool)

(assert (= b_and!3695 (and (=> t!4803 result!2413) b_and!3707)))

(assert (=> b!60880 t!4805))

(declare-fun b_and!3709 () Bool)

(assert (= b_and!3697 (and (=> t!4805 result!2417) b_and!3709)))

(declare-fun m!53491 () Bool)

(assert (=> bm!4652 m!53491))

(declare-fun m!53493 () Bool)

(assert (=> bm!4655 m!53493))

(declare-fun m!53495 () Bool)

(assert (=> b!60881 m!53495))

(declare-fun m!53497 () Bool)

(assert (=> b!60881 m!53497))

(declare-fun m!53499 () Bool)

(assert (=> b!60881 m!53499))

(declare-fun m!53501 () Bool)

(assert (=> b!60881 m!53501))

(declare-fun m!53503 () Bool)

(assert (=> b!60881 m!53503))

(assert (=> b!60881 m!53407))

(declare-fun m!53505 () Bool)

(assert (=> b!60881 m!53505))

(declare-fun m!53507 () Bool)

(assert (=> b!60881 m!53507))

(declare-fun m!53509 () Bool)

(assert (=> b!60881 m!53509))

(assert (=> b!60881 m!53493))

(assert (=> b!60881 m!53495))

(declare-fun m!53511 () Bool)

(assert (=> b!60881 m!53511))

(assert (=> b!60881 m!53499))

(declare-fun m!53513 () Bool)

(assert (=> b!60881 m!53513))

(assert (=> b!60881 m!53507))

(declare-fun m!53515 () Bool)

(assert (=> b!60881 m!53515))

(declare-fun m!53517 () Bool)

(assert (=> b!60881 m!53517))

(declare-fun m!53519 () Bool)

(assert (=> b!60881 m!53519))

(declare-fun m!53521 () Bool)

(assert (=> b!60881 m!53521))

(assert (=> b!60881 m!53511))

(declare-fun m!53523 () Bool)

(assert (=> b!60881 m!53523))

(declare-fun m!53525 () Bool)

(assert (=> b!60874 m!53525))

(assert (=> b!60884 m!53407))

(assert (=> b!60884 m!53407))

(declare-fun m!53527 () Bool)

(assert (=> b!60884 m!53527))

(assert (=> b!60880 m!53407))

(declare-fun m!53529 () Bool)

(assert (=> b!60880 m!53529))

(declare-fun m!53531 () Bool)

(assert (=> b!60880 m!53531))

(assert (=> b!60880 m!53531))

(assert (=> b!60880 m!53335))

(declare-fun m!53533 () Bool)

(assert (=> b!60880 m!53533))

(assert (=> b!60880 m!53407))

(assert (=> b!60880 m!53335))

(assert (=> b!60878 m!53407))

(assert (=> b!60878 m!53407))

(declare-fun m!53535 () Bool)

(assert (=> b!60878 m!53535))

(declare-fun m!53537 () Bool)

(assert (=> b!60876 m!53537))

(assert (=> b!60868 m!53407))

(assert (=> b!60868 m!53407))

(assert (=> b!60868 m!53527))

(declare-fun m!53539 () Bool)

(assert (=> b!60872 m!53539))

(declare-fun m!53541 () Bool)

(assert (=> bm!4656 m!53541))

(assert (=> d!11967 m!53319))

(declare-fun m!53543 () Bool)

(assert (=> bm!4658 m!53543))

(assert (=> b!60603 d!11967))

(declare-fun d!11969 () Bool)

(declare-fun res!33602 () Bool)

(declare-fun e!40038 () Bool)

(assert (=> d!11969 (=> (not res!33602) (not e!40038))))

(declare-fun simpleValid!43 (LongMapFixedSize!630) Bool)

(assert (=> d!11969 (= res!33602 (simpleValid!43 newMap!16))))

(assert (=> d!11969 (= (valid!260 newMap!16) e!40038)))

(declare-fun b!60895 () Bool)

(declare-fun res!33603 () Bool)

(assert (=> b!60895 (=> (not res!33603) (not e!40038))))

(declare-fun arrayCountValidKeys!0 (array!3747 (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!60895 (= res!33603 (= (arrayCountValidKeys!0 (_keys!3695 newMap!16) #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))) (_size!364 newMap!16)))))

(declare-fun b!60896 () Bool)

(declare-fun res!33604 () Bool)

(assert (=> b!60896 (=> (not res!33604) (not e!40038))))

(declare-fun arrayForallSeekEntryOrOpenFound!0 ((_ BitVec 32) array!3747 (_ BitVec 32)) Bool)

(assert (=> b!60896 (= res!33604 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3695 newMap!16) (mask!5963 newMap!16)))))

(declare-fun b!60897 () Bool)

(assert (=> b!60897 (= e!40038 (arrayNoDuplicates!0 (_keys!3695 newMap!16) #b00000000000000000000000000000000 Nil!1434))))

(assert (= (and d!11969 res!33602) b!60895))

(assert (= (and b!60895 res!33603) b!60896))

(assert (= (and b!60896 res!33604) b!60897))

(declare-fun m!53545 () Bool)

(assert (=> d!11969 m!53545))

(declare-fun m!53547 () Bool)

(assert (=> b!60895 m!53547))

(declare-fun m!53549 () Bool)

(assert (=> b!60896 m!53549))

(declare-fun m!53551 () Bool)

(assert (=> b!60897 m!53551))

(assert (=> b!60602 d!11969))

(declare-fun b!60904 () Bool)

(declare-fun e!40043 () Bool)

(assert (=> b!60904 (= e!40043 tp_is_empty!2409)))

(declare-fun b!60905 () Bool)

(declare-fun e!40044 () Bool)

(assert (=> b!60905 (= e!40044 tp_is_empty!2409)))

(declare-fun condMapEmpty!2927 () Bool)

(declare-fun mapDefault!2927 () ValueCell!861)

(assert (=> mapNonEmpty!2918 (= condMapEmpty!2927 (= mapRest!2917 ((as const (Array (_ BitVec 32) ValueCell!861)) mapDefault!2927)))))

(declare-fun mapRes!2927 () Bool)

(assert (=> mapNonEmpty!2918 (= tp!8077 (and e!40044 mapRes!2927))))

(declare-fun mapNonEmpty!2927 () Bool)

(declare-fun tp!8093 () Bool)

(assert (=> mapNonEmpty!2927 (= mapRes!2927 (and tp!8093 e!40043))))

(declare-fun mapValue!2927 () ValueCell!861)

(declare-fun mapKey!2927 () (_ BitVec 32))

(declare-fun mapRest!2927 () (Array (_ BitVec 32) ValueCell!861))

(assert (=> mapNonEmpty!2927 (= mapRest!2917 (store mapRest!2927 mapKey!2927 mapValue!2927))))

(declare-fun mapIsEmpty!2927 () Bool)

(assert (=> mapIsEmpty!2927 mapRes!2927))

(assert (= (and mapNonEmpty!2918 condMapEmpty!2927) mapIsEmpty!2927))

(assert (= (and mapNonEmpty!2918 (not condMapEmpty!2927)) mapNonEmpty!2927))

(assert (= (and mapNonEmpty!2927 ((_ is ValueCellFull!861) mapValue!2927)) b!60904))

(assert (= (and mapNonEmpty!2918 ((_ is ValueCellFull!861) mapDefault!2927)) b!60905))

(declare-fun m!53553 () Bool)

(assert (=> mapNonEmpty!2927 m!53553))

(declare-fun b!60906 () Bool)

(declare-fun e!40045 () Bool)

(assert (=> b!60906 (= e!40045 tp_is_empty!2409)))

(declare-fun b!60907 () Bool)

(declare-fun e!40046 () Bool)

(assert (=> b!60907 (= e!40046 tp_is_empty!2409)))

(declare-fun condMapEmpty!2928 () Bool)

(declare-fun mapDefault!2928 () ValueCell!861)

(assert (=> mapNonEmpty!2917 (= condMapEmpty!2928 (= mapRest!2918 ((as const (Array (_ BitVec 32) ValueCell!861)) mapDefault!2928)))))

(declare-fun mapRes!2928 () Bool)

(assert (=> mapNonEmpty!2917 (= tp!8078 (and e!40046 mapRes!2928))))

(declare-fun mapNonEmpty!2928 () Bool)

(declare-fun tp!8094 () Bool)

(assert (=> mapNonEmpty!2928 (= mapRes!2928 (and tp!8094 e!40045))))

(declare-fun mapRest!2928 () (Array (_ BitVec 32) ValueCell!861))

(declare-fun mapValue!2928 () ValueCell!861)

(declare-fun mapKey!2928 () (_ BitVec 32))

(assert (=> mapNonEmpty!2928 (= mapRest!2918 (store mapRest!2928 mapKey!2928 mapValue!2928))))

(declare-fun mapIsEmpty!2928 () Bool)

(assert (=> mapIsEmpty!2928 mapRes!2928))

(assert (= (and mapNonEmpty!2917 condMapEmpty!2928) mapIsEmpty!2928))

(assert (= (and mapNonEmpty!2917 (not condMapEmpty!2928)) mapNonEmpty!2928))

(assert (= (and mapNonEmpty!2928 ((_ is ValueCellFull!861) mapValue!2928)) b!60906))

(assert (= (and mapNonEmpty!2917 ((_ is ValueCellFull!861) mapDefault!2928)) b!60907))

(declare-fun m!53555 () Bool)

(assert (=> mapNonEmpty!2928 m!53555))

(declare-fun b_lambda!2693 () Bool)

(assert (= b_lambda!2691 (or (and b!60606 b_free!1985) (and b!60590 b_free!1987 (= (defaultEntry!2067 newMap!16) (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))))) b_lambda!2693)))

(check-sat (not b!60792) (not bm!4636) (not b_lambda!2689) (not bm!4625) (not b!60878) (not b!60703) (not bm!4615) (not d!11939) (not b!60896) (not d!11945) (not bm!4656) (not d!11947) b_and!3707 (not bm!4637) (not b!60696) (not b!60881) (not d!11965) (not d!11969) (not mapNonEmpty!2928) (not b!60806) (not bm!4628) (not d!11951) (not bm!4623) (not d!11959) (not b!60897) (not bm!4658) (not d!11967) (not b!60680) (not b!60795) (not b!60872) (not bm!4634) tp_is_empty!2409 (not b!60895) (not b_next!1987) (not bm!4635) (not d!11961) (not b!60782) (not b_lambda!2693) (not mapNonEmpty!2927) (not b!60880) (not b!60787) (not bm!4631) (not b_next!1985) (not b!60824) (not b!60800) (not b!60825) (not b!60705) (not b!60694) (not b!60884) b_and!3709 (not b!60675) (not bm!4629) (not b!60876) (not bm!4652) (not bm!4565) (not b!60868) (not bm!4633) (not bm!4619) (not bm!4655) (not b!60693) (not b!60874))
(check-sat b_and!3707 b_and!3709 (not b_next!1985) (not b_next!1987))
(get-model)

(declare-fun b!60920 () Bool)

(declare-fun e!40055 () SeekEntryResult!228)

(assert (=> b!60920 (= e!40055 Undefined!228)))

(declare-fun b!60921 () Bool)

(declare-fun e!40053 () SeekEntryResult!228)

(declare-fun lt!25023 () SeekEntryResult!228)

(assert (=> b!60921 (= e!40053 (Found!228 (index!3038 lt!25023)))))

(declare-fun d!11971 () Bool)

(declare-fun lt!25025 () SeekEntryResult!228)

(assert (=> d!11971 (and (or ((_ is Undefined!228) lt!25025) (not ((_ is Found!228) lt!25025)) (and (bvsge (index!3037 lt!25025) #b00000000000000000000000000000000) (bvslt (index!3037 lt!25025) (size!2024 (_keys!3695 newMap!16))))) (or ((_ is Undefined!228) lt!25025) ((_ is Found!228) lt!25025) (not ((_ is MissingZero!228) lt!25025)) (and (bvsge (index!3036 lt!25025) #b00000000000000000000000000000000) (bvslt (index!3036 lt!25025) (size!2024 (_keys!3695 newMap!16))))) (or ((_ is Undefined!228) lt!25025) ((_ is Found!228) lt!25025) ((_ is MissingZero!228) lt!25025) (not ((_ is MissingVacant!228) lt!25025)) (and (bvsge (index!3039 lt!25025) #b00000000000000000000000000000000) (bvslt (index!3039 lt!25025) (size!2024 (_keys!3695 newMap!16))))) (or ((_ is Undefined!228) lt!25025) (ite ((_ is Found!228) lt!25025) (= (select (arr!1793 (_keys!3695 newMap!16)) (index!3037 lt!25025)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (ite ((_ is MissingZero!228) lt!25025) (= (select (arr!1793 (_keys!3695 newMap!16)) (index!3036 lt!25025)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!228) lt!25025) (= (select (arr!1793 (_keys!3695 newMap!16)) (index!3039 lt!25025)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11971 (= lt!25025 e!40055)))

(declare-fun c!7938 () Bool)

(assert (=> d!11971 (= c!7938 (and ((_ is Intermediate!228) lt!25023) (undefined!1040 lt!25023)))))

(declare-fun seekKeyOrZeroOrLongMinValue!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!3747 (_ BitVec 32)) SeekEntryResult!228)

(declare-fun toIndex!0 ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))

(assert (=> d!11971 (= lt!25023 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (mask!5963 newMap!16)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (_keys!3695 newMap!16) (mask!5963 newMap!16)))))

(assert (=> d!11971 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!11971 (= (seekEntryOrOpen!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (_keys!3695 newMap!16) (mask!5963 newMap!16)) lt!25025)))

(declare-fun b!60922 () Bool)

(assert (=> b!60922 (= e!40055 e!40053)))

(declare-fun lt!25024 () (_ BitVec 64))

(assert (=> b!60922 (= lt!25024 (select (arr!1793 (_keys!3695 newMap!16)) (index!3038 lt!25023)))))

(declare-fun c!7939 () Bool)

(assert (=> b!60922 (= c!7939 (= lt!25024 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(declare-fun b!60923 () Bool)

(declare-fun e!40054 () SeekEntryResult!228)

(assert (=> b!60923 (= e!40054 (MissingZero!228 (index!3038 lt!25023)))))

(declare-fun b!60924 () Bool)

(declare-fun seekKeyOrZeroReturnVacant!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!3747 (_ BitVec 32)) SeekEntryResult!228)

(assert (=> b!60924 (= e!40054 (seekKeyOrZeroReturnVacant!0 (x!10162 lt!25023) (index!3038 lt!25023) (index!3038 lt!25023) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (_keys!3695 newMap!16) (mask!5963 newMap!16)))))

(declare-fun b!60925 () Bool)

(declare-fun c!7940 () Bool)

(assert (=> b!60925 (= c!7940 (= lt!25024 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!60925 (= e!40053 e!40054)))

(assert (= (and d!11971 c!7938) b!60920))

(assert (= (and d!11971 (not c!7938)) b!60922))

(assert (= (and b!60922 c!7939) b!60921))

(assert (= (and b!60922 (not c!7939)) b!60925))

(assert (= (and b!60925 c!7940) b!60923))

(assert (= (and b!60925 (not c!7940)) b!60924))

(assert (=> d!11971 m!53313))

(declare-fun m!53557 () Bool)

(assert (=> d!11971 m!53557))

(declare-fun m!53559 () Bool)

(assert (=> d!11971 m!53559))

(declare-fun m!53561 () Bool)

(assert (=> d!11971 m!53561))

(declare-fun m!53563 () Bool)

(assert (=> d!11971 m!53563))

(declare-fun m!53565 () Bool)

(assert (=> d!11971 m!53565))

(assert (=> d!11971 m!53557))

(assert (=> d!11971 m!53313))

(declare-fun m!53567 () Bool)

(assert (=> d!11971 m!53567))

(declare-fun m!53569 () Bool)

(assert (=> b!60922 m!53569))

(assert (=> b!60924 m!53313))

(declare-fun m!53571 () Bool)

(assert (=> b!60924 m!53571))

(assert (=> b!60795 d!11971))

(declare-fun d!11973 () Bool)

(declare-fun res!33605 () Bool)

(declare-fun e!40056 () Bool)

(assert (=> d!11973 (=> (not res!33605) (not e!40056))))

(assert (=> d!11973 (= res!33605 (simpleValid!43 (v!2404 (underlying!231 thiss!992))))))

(assert (=> d!11973 (= (valid!260 (v!2404 (underlying!231 thiss!992))) e!40056)))

(declare-fun b!60926 () Bool)

(declare-fun res!33606 () Bool)

(assert (=> b!60926 (=> (not res!33606) (not e!40056))))

(assert (=> b!60926 (= res!33606 (= (arrayCountValidKeys!0 (_keys!3695 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000000000000000 (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992))))) (_size!364 (v!2404 (underlying!231 thiss!992)))))))

(declare-fun b!60927 () Bool)

(declare-fun res!33607 () Bool)

(assert (=> b!60927 (=> (not res!33607) (not e!40056))))

(assert (=> b!60927 (= res!33607 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (mask!5963 (v!2404 (underlying!231 thiss!992)))))))

(declare-fun b!60928 () Bool)

(assert (=> b!60928 (= e!40056 (arrayNoDuplicates!0 (_keys!3695 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000000000000000 Nil!1434))))

(assert (= (and d!11973 res!33605) b!60926))

(assert (= (and b!60926 res!33606) b!60927))

(assert (= (and b!60927 res!33607) b!60928))

(declare-fun m!53573 () Bool)

(assert (=> d!11973 m!53573))

(declare-fun m!53575 () Bool)

(assert (=> b!60926 m!53575))

(declare-fun m!53577 () Bool)

(assert (=> b!60927 m!53577))

(declare-fun m!53579 () Bool)

(assert (=> b!60928 m!53579))

(assert (=> d!11939 d!11973))

(assert (=> bm!4634 d!11971))

(declare-fun d!11975 () Bool)

(assert (=> d!11975 (= (validKeyInArray!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (and (not (= (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!60884 d!11975))

(assert (=> b!60680 d!11949))

(declare-fun d!11977 () Bool)

(assert (=> d!11977 (= (+!82 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) lt!24937 (zeroValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25028 () Unit!1625)

(declare-fun choose!316 (array!3747 array!3749 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 V!2859 Int) Unit!1625)

(assert (=> d!11977 (= lt!25028 (choose!316 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) lt!24937 (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2067 newMap!16)))))

(assert (=> d!11977 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!11977 (= (lemmaChangeLongMinValueKeyThenAddPairToListMap!16 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) lt!24937 (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2067 newMap!16)) lt!25028)))

(declare-fun bs!2643 () Bool)

(assert (= bs!2643 d!11977))

(assert (=> bs!2643 m!53559))

(assert (=> bs!2643 m!53337))

(declare-fun m!53581 () Bool)

(assert (=> bs!2643 m!53581))

(assert (=> bs!2643 m!53489))

(declare-fun m!53583 () Bool)

(assert (=> bs!2643 m!53583))

(assert (=> bs!2643 m!53337))

(declare-fun m!53585 () Bool)

(assert (=> bs!2643 m!53585))

(assert (=> bs!2643 m!53489))

(assert (=> b!60792 d!11977))

(declare-fun d!11979 () Bool)

(declare-fun e!40057 () Bool)

(assert (=> d!11979 e!40057))

(declare-fun res!33608 () Bool)

(assert (=> d!11979 (=> res!33608 e!40057)))

(declare-fun lt!25032 () Bool)

(assert (=> d!11979 (= res!33608 (not lt!25032))))

(declare-fun lt!25031 () Bool)

(assert (=> d!11979 (= lt!25032 lt!25031)))

(declare-fun lt!25030 () Unit!1625)

(declare-fun e!40058 () Unit!1625)

(assert (=> d!11979 (= lt!25030 e!40058)))

(declare-fun c!7941 () Bool)

(assert (=> d!11979 (= c!7941 lt!25031)))

(assert (=> d!11979 (= lt!25031 (containsKey!129 (toList!700 call!4618) (ite c!7902 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (select (arr!1793 (_keys!3695 newMap!16)) (index!3037 lt!24947)))))))

(assert (=> d!11979 (= (contains!686 call!4618 (ite c!7902 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (select (arr!1793 (_keys!3695 newMap!16)) (index!3037 lt!24947)))) lt!25032)))

(declare-fun b!60929 () Bool)

(declare-fun lt!25029 () Unit!1625)

(assert (=> b!60929 (= e!40058 lt!25029)))

(assert (=> b!60929 (= lt!25029 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 call!4618) (ite c!7902 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (select (arr!1793 (_keys!3695 newMap!16)) (index!3037 lt!24947)))))))

(assert (=> b!60929 (isDefined!78 (getValueByKey!125 (toList!700 call!4618) (ite c!7902 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (select (arr!1793 (_keys!3695 newMap!16)) (index!3037 lt!24947)))))))

(declare-fun b!60930 () Bool)

(declare-fun Unit!1633 () Unit!1625)

(assert (=> b!60930 (= e!40058 Unit!1633)))

(declare-fun b!60931 () Bool)

(assert (=> b!60931 (= e!40057 (isDefined!78 (getValueByKey!125 (toList!700 call!4618) (ite c!7902 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (select (arr!1793 (_keys!3695 newMap!16)) (index!3037 lt!24947))))))))

(assert (= (and d!11979 c!7941) b!60929))

(assert (= (and d!11979 (not c!7941)) b!60930))

(assert (= (and d!11979 (not res!33608)) b!60931))

(declare-fun m!53587 () Bool)

(assert (=> d!11979 m!53587))

(declare-fun m!53589 () Bool)

(assert (=> b!60929 m!53589))

(declare-fun m!53591 () Bool)

(assert (=> b!60929 m!53591))

(assert (=> b!60929 m!53591))

(declare-fun m!53593 () Bool)

(assert (=> b!60929 m!53593))

(assert (=> b!60931 m!53591))

(assert (=> b!60931 m!53591))

(assert (=> b!60931 m!53593))

(assert (=> bm!4629 d!11979))

(declare-fun d!11981 () Bool)

(declare-fun e!40059 () Bool)

(assert (=> d!11981 e!40059))

(declare-fun res!33609 () Bool)

(assert (=> d!11981 (=> res!33609 e!40059)))

(declare-fun lt!25036 () Bool)

(assert (=> d!11981 (= res!33609 (not lt!25036))))

(declare-fun lt!25035 () Bool)

(assert (=> d!11981 (= lt!25036 lt!25035)))

(declare-fun lt!25034 () Unit!1625)

(declare-fun e!40060 () Unit!1625)

(assert (=> d!11981 (= lt!25034 e!40060)))

(declare-fun c!7942 () Bool)

(assert (=> d!11981 (= c!7942 lt!25035)))

(assert (=> d!11981 (= lt!25035 (containsKey!129 (toList!700 lt!24995) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!11981 (= (contains!686 lt!24995 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!25036)))

(declare-fun b!60932 () Bool)

(declare-fun lt!25033 () Unit!1625)

(assert (=> b!60932 (= e!40060 lt!25033)))

(assert (=> b!60932 (= lt!25033 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 lt!24995) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!60932 (isDefined!78 (getValueByKey!125 (toList!700 lt!24995) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!60933 () Bool)

(declare-fun Unit!1634 () Unit!1625)

(assert (=> b!60933 (= e!40060 Unit!1634)))

(declare-fun b!60934 () Bool)

(assert (=> b!60934 (= e!40059 (isDefined!78 (getValueByKey!125 (toList!700 lt!24995) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!11981 c!7942) b!60932))

(assert (= (and d!11981 (not c!7942)) b!60933))

(assert (= (and d!11981 (not res!33609)) b!60934))

(assert (=> d!11981 m!53407))

(declare-fun m!53595 () Bool)

(assert (=> d!11981 m!53595))

(assert (=> b!60932 m!53407))

(declare-fun m!53597 () Bool)

(assert (=> b!60932 m!53597))

(assert (=> b!60932 m!53407))

(declare-fun m!53599 () Bool)

(assert (=> b!60932 m!53599))

(assert (=> b!60932 m!53599))

(declare-fun m!53601 () Bool)

(assert (=> b!60932 m!53601))

(assert (=> b!60934 m!53407))

(assert (=> b!60934 m!53599))

(assert (=> b!60934 m!53599))

(assert (=> b!60934 m!53601))

(assert (=> b!60878 d!11981))

(declare-fun b!60935 () Bool)

(declare-fun e!40067 () Bool)

(assert (=> b!60935 (= e!40067 (validKeyInArray!0 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!60936 () Bool)

(declare-fun res!33610 () Bool)

(declare-fun e!40062 () Bool)

(assert (=> b!60936 (=> (not res!33610) (not e!40062))))

(declare-fun e!40065 () Bool)

(assert (=> b!60936 (= res!33610 e!40065)))

(declare-fun res!33618 () Bool)

(assert (=> b!60936 (=> res!33618 e!40065)))

(declare-fun e!40061 () Bool)

(assert (=> b!60936 (= res!33618 (not e!40061))))

(declare-fun res!33614 () Bool)

(assert (=> b!60936 (=> (not res!33614) (not e!40061))))

(assert (=> b!60936 (= res!33614 (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(declare-fun b!60937 () Bool)

(declare-fun e!40069 () Unit!1625)

(declare-fun Unit!1635 () Unit!1625)

(assert (=> b!60937 (= e!40069 Unit!1635)))

(declare-fun c!7946 () Bool)

(declare-fun b!60938 () Bool)

(assert (=> b!60938 (= c!7946 (and (not (= (bvand (ite (and c!7909 c!7899) lt!24940 (extraKeys!1950 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite (and c!7909 c!7899) lt!24940 (extraKeys!1950 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!40066 () ListLongMap!1369)

(declare-fun e!40068 () ListLongMap!1369)

(assert (=> b!60938 (= e!40066 e!40068)))

(declare-fun b!60939 () Bool)

(declare-fun e!40073 () ListLongMap!1369)

(declare-fun call!4668 () ListLongMap!1369)

(assert (=> b!60939 (= e!40073 (+!82 call!4668 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))

(declare-fun c!7945 () Bool)

(declare-fun call!4662 () ListLongMap!1369)

(declare-fun c!7944 () Bool)

(declare-fun call!4667 () ListLongMap!1369)

(declare-fun bm!4659 () Bool)

(declare-fun call!4666 () ListLongMap!1369)

(assert (=> bm!4659 (= call!4668 (+!82 (ite c!7944 call!4662 (ite c!7945 call!4667 call!4666)) (ite (or c!7944 c!7945) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(declare-fun b!60940 () Bool)

(declare-fun res!33613 () Bool)

(assert (=> b!60940 (=> (not res!33613) (not e!40062))))

(declare-fun e!40071 () Bool)

(assert (=> b!60940 (= res!33613 e!40071)))

(declare-fun c!7947 () Bool)

(assert (=> b!60940 (= c!7947 (not (= (bvand (ite (and c!7909 c!7899) lt!24940 (extraKeys!1950 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!40064 () Bool)

(declare-fun b!60941 () Bool)

(declare-fun lt!25037 () ListLongMap!1369)

(assert (=> b!60941 (= e!40064 (= (apply!67 lt!25037 #b0000000000000000000000000000000000000000000000000000000000000000) (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))))))

(declare-fun bm!4660 () Bool)

(assert (=> bm!4660 (= call!4666 call!4667)))

(declare-fun b!60942 () Bool)

(assert (=> b!60942 (= e!40071 e!40064)))

(declare-fun res!33611 () Bool)

(declare-fun call!4664 () Bool)

(assert (=> b!60942 (= res!33611 call!4664)))

(assert (=> b!60942 (=> (not res!33611) (not e!40064))))

(declare-fun b!60943 () Bool)

(declare-fun e!40070 () Bool)

(assert (=> b!60943 (= e!40070 (= (apply!67 lt!25037 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1981 newMap!16)))))

(declare-fun b!60944 () Bool)

(assert (=> b!60944 (= e!40068 call!4666)))

(declare-fun bm!4662 () Bool)

(assert (=> bm!4662 (= call!4662 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (ite (and c!7909 c!7899) lt!24940 (extraKeys!1950 newMap!16)) (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun b!60945 () Bool)

(declare-fun e!40063 () Bool)

(assert (=> b!60945 (= e!40065 e!40063)))

(declare-fun res!33612 () Bool)

(assert (=> b!60945 (=> (not res!33612) (not e!40063))))

(assert (=> b!60945 (= res!33612 (contains!686 lt!25037 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!60945 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(declare-fun bm!4663 () Bool)

(assert (=> bm!4663 (= call!4664 (contains!686 lt!25037 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60946 () Bool)

(declare-fun call!4665 () ListLongMap!1369)

(assert (=> b!60946 (= e!40068 call!4665)))

(declare-fun b!60947 () Bool)

(assert (=> b!60947 (= e!40063 (= (apply!67 lt!25037 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) (get!1075 (select (arr!1794 (_values!2050 newMap!16)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!60947 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2025 (_values!2050 newMap!16))))))

(assert (=> b!60947 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(declare-fun bm!4664 () Bool)

(assert (=> bm!4664 (= call!4665 call!4668)))

(declare-fun d!11983 () Bool)

(assert (=> d!11983 e!40062))

(declare-fun res!33615 () Bool)

(assert (=> d!11983 (=> (not res!33615) (not e!40062))))

(assert (=> d!11983 (= res!33615 (or (bvsge #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))))

(declare-fun lt!25053 () ListLongMap!1369)

(assert (=> d!11983 (= lt!25037 lt!25053)))

(declare-fun lt!25046 () Unit!1625)

(assert (=> d!11983 (= lt!25046 e!40069)))

(declare-fun c!7948 () Bool)

(assert (=> d!11983 (= c!7948 e!40067)))

(declare-fun res!33617 () Bool)

(assert (=> d!11983 (=> (not res!33617) (not e!40067))))

(assert (=> d!11983 (= res!33617 (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(assert (=> d!11983 (= lt!25053 e!40073)))

(assert (=> d!11983 (= c!7944 (and (not (= (bvand (ite (and c!7909 c!7899) lt!24940 (extraKeys!1950 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite (and c!7909 c!7899) lt!24940 (extraKeys!1950 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11983 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!11983 (= (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (ite (and c!7909 c!7899) lt!24940 (extraKeys!1950 newMap!16)) (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) lt!25037)))

(declare-fun bm!4661 () Bool)

(assert (=> bm!4661 (= call!4667 call!4662)))

(declare-fun b!60948 () Bool)

(declare-fun lt!25056 () Unit!1625)

(assert (=> b!60948 (= e!40069 lt!25056)))

(declare-fun lt!25048 () ListLongMap!1369)

(assert (=> b!60948 (= lt!25048 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (ite (and c!7909 c!7899) lt!24940 (extraKeys!1950 newMap!16)) (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25038 () (_ BitVec 64))

(assert (=> b!60948 (= lt!25038 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25051 () (_ BitVec 64))

(assert (=> b!60948 (= lt!25051 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25058 () Unit!1625)

(assert (=> b!60948 (= lt!25058 (addStillContains!43 lt!25048 lt!25038 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)) lt!25051))))

(assert (=> b!60948 (contains!686 (+!82 lt!25048 (tuple2!2033 lt!25038 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)))) lt!25051)))

(declare-fun lt!25044 () Unit!1625)

(assert (=> b!60948 (= lt!25044 lt!25058)))

(declare-fun lt!25045 () ListLongMap!1369)

(assert (=> b!60948 (= lt!25045 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (ite (and c!7909 c!7899) lt!24940 (extraKeys!1950 newMap!16)) (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25043 () (_ BitVec 64))

(assert (=> b!60948 (= lt!25043 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25057 () (_ BitVec 64))

(assert (=> b!60948 (= lt!25057 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25042 () Unit!1625)

(assert (=> b!60948 (= lt!25042 (addApplyDifferent!43 lt!25045 lt!25043 (minValue!1981 newMap!16) lt!25057))))

(assert (=> b!60948 (= (apply!67 (+!82 lt!25045 (tuple2!2033 lt!25043 (minValue!1981 newMap!16))) lt!25057) (apply!67 lt!25045 lt!25057))))

(declare-fun lt!25041 () Unit!1625)

(assert (=> b!60948 (= lt!25041 lt!25042)))

(declare-fun lt!25052 () ListLongMap!1369)

(assert (=> b!60948 (= lt!25052 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (ite (and c!7909 c!7899) lt!24940 (extraKeys!1950 newMap!16)) (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25039 () (_ BitVec 64))

(assert (=> b!60948 (= lt!25039 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25047 () (_ BitVec 64))

(assert (=> b!60948 (= lt!25047 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25054 () Unit!1625)

(assert (=> b!60948 (= lt!25054 (addApplyDifferent!43 lt!25052 lt!25039 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)) lt!25047))))

(assert (=> b!60948 (= (apply!67 (+!82 lt!25052 (tuple2!2033 lt!25039 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)))) lt!25047) (apply!67 lt!25052 lt!25047))))

(declare-fun lt!25055 () Unit!1625)

(assert (=> b!60948 (= lt!25055 lt!25054)))

(declare-fun lt!25040 () ListLongMap!1369)

(assert (=> b!60948 (= lt!25040 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (ite (and c!7909 c!7899) lt!24940 (extraKeys!1950 newMap!16)) (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25050 () (_ BitVec 64))

(assert (=> b!60948 (= lt!25050 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25049 () (_ BitVec 64))

(assert (=> b!60948 (= lt!25049 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!60948 (= lt!25056 (addApplyDifferent!43 lt!25040 lt!25050 (minValue!1981 newMap!16) lt!25049))))

(assert (=> b!60948 (= (apply!67 (+!82 lt!25040 (tuple2!2033 lt!25050 (minValue!1981 newMap!16))) lt!25049) (apply!67 lt!25040 lt!25049))))

(declare-fun b!60949 () Bool)

(declare-fun e!40072 () Bool)

(declare-fun call!4663 () Bool)

(assert (=> b!60949 (= e!40072 (not call!4663))))

(declare-fun b!60950 () Bool)

(assert (=> b!60950 (= e!40066 call!4665)))

(declare-fun b!60951 () Bool)

(assert (=> b!60951 (= e!40061 (validKeyInArray!0 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!60952 () Bool)

(assert (=> b!60952 (= e!40071 (not call!4664))))

(declare-fun bm!4665 () Bool)

(assert (=> bm!4665 (= call!4663 (contains!686 lt!25037 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60953 () Bool)

(assert (=> b!60953 (= e!40072 e!40070)))

(declare-fun res!33616 () Bool)

(assert (=> b!60953 (= res!33616 call!4663)))

(assert (=> b!60953 (=> (not res!33616) (not e!40070))))

(declare-fun b!60954 () Bool)

(assert (=> b!60954 (= e!40073 e!40066)))

(assert (=> b!60954 (= c!7945 (and (not (= (bvand (ite (and c!7909 c!7899) lt!24940 (extraKeys!1950 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite (and c!7909 c!7899) lt!24940 (extraKeys!1950 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!60955 () Bool)

(assert (=> b!60955 (= e!40062 e!40072)))

(declare-fun c!7943 () Bool)

(assert (=> b!60955 (= c!7943 (not (= (bvand (ite (and c!7909 c!7899) lt!24940 (extraKeys!1950 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!11983 c!7944) b!60939))

(assert (= (and d!11983 (not c!7944)) b!60954))

(assert (= (and b!60954 c!7945) b!60950))

(assert (= (and b!60954 (not c!7945)) b!60938))

(assert (= (and b!60938 c!7946) b!60946))

(assert (= (and b!60938 (not c!7946)) b!60944))

(assert (= (or b!60946 b!60944) bm!4660))

(assert (= (or b!60950 bm!4660) bm!4661))

(assert (= (or b!60950 b!60946) bm!4664))

(assert (= (or b!60939 bm!4661) bm!4662))

(assert (= (or b!60939 bm!4664) bm!4659))

(assert (= (and d!11983 res!33617) b!60935))

(assert (= (and d!11983 c!7948) b!60948))

(assert (= (and d!11983 (not c!7948)) b!60937))

(assert (= (and d!11983 res!33615) b!60936))

(assert (= (and b!60936 res!33614) b!60951))

(assert (= (and b!60936 (not res!33618)) b!60945))

(assert (= (and b!60945 res!33612) b!60947))

(assert (= (and b!60936 res!33610) b!60940))

(assert (= (and b!60940 c!7947) b!60942))

(assert (= (and b!60940 (not c!7947)) b!60952))

(assert (= (and b!60942 res!33611) b!60941))

(assert (= (or b!60942 b!60952) bm!4663))

(assert (= (and b!60940 res!33613) b!60955))

(assert (= (and b!60955 c!7943) b!60953))

(assert (= (and b!60955 (not c!7943)) b!60949))

(assert (= (and b!60953 res!33616) b!60943))

(assert (= (or b!60953 b!60949) bm!4665))

(declare-fun b_lambda!2695 () Bool)

(assert (=> (not b_lambda!2695) (not b!60947)))

(declare-fun t!4813 () Bool)

(declare-fun tb!1353 () Bool)

(assert (=> (and b!60606 (= (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) (defaultEntry!2067 newMap!16)) t!4813) tb!1353))

(declare-fun result!2427 () Bool)

(assert (=> tb!1353 (= result!2427 tp_is_empty!2409)))

(assert (=> b!60947 t!4813))

(declare-fun b_and!3711 () Bool)

(assert (= b_and!3707 (and (=> t!4813 result!2427) b_and!3711)))

(declare-fun t!4815 () Bool)

(declare-fun tb!1355 () Bool)

(assert (=> (and b!60590 (= (defaultEntry!2067 newMap!16) (defaultEntry!2067 newMap!16)) t!4815) tb!1355))

(declare-fun result!2429 () Bool)

(assert (= result!2429 result!2427))

(assert (=> b!60947 t!4815))

(declare-fun b_and!3713 () Bool)

(assert (= b_and!3709 (and (=> t!4815 result!2429) b_and!3713)))

(declare-fun m!53603 () Bool)

(assert (=> bm!4659 m!53603))

(declare-fun m!53605 () Bool)

(assert (=> bm!4662 m!53605))

(declare-fun m!53607 () Bool)

(assert (=> b!60948 m!53607))

(declare-fun m!53609 () Bool)

(assert (=> b!60948 m!53609))

(declare-fun m!53611 () Bool)

(assert (=> b!60948 m!53611))

(declare-fun m!53613 () Bool)

(assert (=> b!60948 m!53613))

(declare-fun m!53615 () Bool)

(assert (=> b!60948 m!53615))

(declare-fun m!53617 () Bool)

(assert (=> b!60948 m!53617))

(declare-fun m!53619 () Bool)

(assert (=> b!60948 m!53619))

(declare-fun m!53621 () Bool)

(assert (=> b!60948 m!53621))

(declare-fun m!53623 () Bool)

(assert (=> b!60948 m!53623))

(assert (=> b!60948 m!53605))

(assert (=> b!60948 m!53607))

(declare-fun m!53625 () Bool)

(assert (=> b!60948 m!53625))

(assert (=> b!60948 m!53611))

(declare-fun m!53627 () Bool)

(assert (=> b!60948 m!53627))

(assert (=> b!60948 m!53621))

(declare-fun m!53629 () Bool)

(assert (=> b!60948 m!53629))

(declare-fun m!53631 () Bool)

(assert (=> b!60948 m!53631))

(declare-fun m!53633 () Bool)

(assert (=> b!60948 m!53633))

(declare-fun m!53635 () Bool)

(assert (=> b!60948 m!53635))

(assert (=> b!60948 m!53625))

(declare-fun m!53637 () Bool)

(assert (=> b!60948 m!53637))

(declare-fun m!53639 () Bool)

(assert (=> b!60941 m!53639))

(assert (=> b!60951 m!53617))

(assert (=> b!60951 m!53617))

(declare-fun m!53641 () Bool)

(assert (=> b!60951 m!53641))

(assert (=> b!60947 m!53617))

(declare-fun m!53643 () Bool)

(assert (=> b!60947 m!53643))

(declare-fun m!53645 () Bool)

(assert (=> b!60947 m!53645))

(assert (=> b!60947 m!53645))

(declare-fun m!53647 () Bool)

(assert (=> b!60947 m!53647))

(declare-fun m!53649 () Bool)

(assert (=> b!60947 m!53649))

(assert (=> b!60947 m!53617))

(assert (=> b!60947 m!53647))

(assert (=> b!60945 m!53617))

(assert (=> b!60945 m!53617))

(declare-fun m!53651 () Bool)

(assert (=> b!60945 m!53651))

(declare-fun m!53653 () Bool)

(assert (=> b!60943 m!53653))

(assert (=> b!60935 m!53617))

(assert (=> b!60935 m!53617))

(assert (=> b!60935 m!53641))

(declare-fun m!53655 () Bool)

(assert (=> b!60939 m!53655))

(declare-fun m!53657 () Bool)

(assert (=> bm!4663 m!53657))

(assert (=> d!11983 m!53559))

(declare-fun m!53659 () Bool)

(assert (=> bm!4665 m!53659))

(assert (=> bm!4631 d!11983))

(declare-fun d!11985 () Bool)

(declare-fun res!33623 () Bool)

(declare-fun e!40078 () Bool)

(assert (=> d!11985 (=> res!33623 e!40078)))

(assert (=> d!11985 (= res!33623 (and ((_ is Cons!1432) (toList!700 lt!24826)) (= (_1!1027 (h!2014 (toList!700 lt!24826))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355))))))

(assert (=> d!11985 (= (containsKey!129 (toList!700 lt!24826) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) e!40078)))

(declare-fun b!60960 () Bool)

(declare-fun e!40079 () Bool)

(assert (=> b!60960 (= e!40078 e!40079)))

(declare-fun res!33624 () Bool)

(assert (=> b!60960 (=> (not res!33624) (not e!40079))))

(assert (=> b!60960 (= res!33624 (and (or (not ((_ is Cons!1432) (toList!700 lt!24826))) (bvsle (_1!1027 (h!2014 (toList!700 lt!24826))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355))) ((_ is Cons!1432) (toList!700 lt!24826)) (bvslt (_1!1027 (h!2014 (toList!700 lt!24826))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355))))))

(declare-fun b!60961 () Bool)

(assert (=> b!60961 (= e!40079 (containsKey!129 (t!4806 (toList!700 lt!24826)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(assert (= (and d!11985 (not res!33623)) b!60960))

(assert (= (and b!60960 res!33624) b!60961))

(assert (=> b!60961 m!53313))

(declare-fun m!53661 () Bool)

(assert (=> b!60961 m!53661))

(assert (=> d!11959 d!11985))

(assert (=> d!11967 d!11937))

(declare-fun c!7954 () Bool)

(declare-fun call!4673 () Bool)

(declare-fun bm!4670 () Bool)

(declare-fun lt!25063 () SeekEntryResult!228)

(assert (=> bm!4670 (= call!4673 (inRange!0 (ite c!7954 (index!3036 lt!25063) (index!3039 lt!25063)) (mask!5963 newMap!16)))))

(declare-fun b!60978 () Bool)

(declare-fun e!40090 () Bool)

(declare-fun e!40091 () Bool)

(assert (=> b!60978 (= e!40090 e!40091)))

(declare-fun res!33636 () Bool)

(assert (=> b!60978 (= res!33636 call!4673)))

(assert (=> b!60978 (=> (not res!33636) (not e!40091))))

(declare-fun b!60979 () Bool)

(declare-fun res!33635 () Bool)

(declare-fun e!40089 () Bool)

(assert (=> b!60979 (=> (not res!33635) (not e!40089))))

(assert (=> b!60979 (= res!33635 call!4673)))

(declare-fun e!40088 () Bool)

(assert (=> b!60979 (= e!40088 e!40089)))

(declare-fun b!60980 () Bool)

(declare-fun res!33633 () Bool)

(assert (=> b!60980 (=> (not res!33633) (not e!40089))))

(assert (=> b!60980 (= res!33633 (= (select (arr!1793 (_keys!3695 newMap!16)) (index!3039 lt!25063)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!60980 (and (bvsge (index!3039 lt!25063) #b00000000000000000000000000000000) (bvslt (index!3039 lt!25063) (size!2024 (_keys!3695 newMap!16))))))

(declare-fun b!60981 () Bool)

(assert (=> b!60981 (and (bvsge (index!3036 lt!25063) #b00000000000000000000000000000000) (bvslt (index!3036 lt!25063) (size!2024 (_keys!3695 newMap!16))))))

(declare-fun res!33634 () Bool)

(assert (=> b!60981 (= res!33634 (= (select (arr!1793 (_keys!3695 newMap!16)) (index!3036 lt!25063)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!60981 (=> (not res!33634) (not e!40091))))

(declare-fun b!60982 () Bool)

(assert (=> b!60982 (= e!40090 e!40088)))

(declare-fun c!7953 () Bool)

(assert (=> b!60982 (= c!7953 ((_ is MissingVacant!228) lt!25063))))

(declare-fun d!11987 () Bool)

(assert (=> d!11987 e!40090))

(assert (=> d!11987 (= c!7954 ((_ is MissingZero!228) lt!25063))))

(assert (=> d!11987 (= lt!25063 (seekEntryOrOpen!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (_keys!3695 newMap!16) (mask!5963 newMap!16)))))

(declare-fun lt!25064 () Unit!1625)

(declare-fun choose!317 (array!3747 array!3749 (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 (_ BitVec 64) Int) Unit!1625)

(assert (=> d!11987 (= lt!25064 (choose!317 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (defaultEntry!2067 newMap!16)))))

(assert (=> d!11987 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!11987 (= (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!16 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (defaultEntry!2067 newMap!16)) lt!25064)))

(declare-fun b!60983 () Bool)

(declare-fun call!4674 () Bool)

(assert (=> b!60983 (= e!40089 (not call!4674))))

(declare-fun bm!4671 () Bool)

(assert (=> bm!4671 (= call!4674 (arrayContainsKey!0 (_keys!3695 newMap!16) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!60984 () Bool)

(assert (=> b!60984 (= e!40091 (not call!4674))))

(declare-fun b!60985 () Bool)

(assert (=> b!60985 (= e!40088 ((_ is Undefined!228) lt!25063))))

(assert (= (and d!11987 c!7954) b!60978))

(assert (= (and d!11987 (not c!7954)) b!60982))

(assert (= (and b!60978 res!33636) b!60981))

(assert (= (and b!60981 res!33634) b!60984))

(assert (= (and b!60982 c!7953) b!60979))

(assert (= (and b!60982 (not c!7953)) b!60985))

(assert (= (and b!60979 res!33635) b!60980))

(assert (= (and b!60980 res!33633) b!60983))

(assert (= (or b!60978 b!60979) bm!4670))

(assert (= (or b!60984 b!60983) bm!4671))

(declare-fun m!53663 () Bool)

(assert (=> b!60981 m!53663))

(assert (=> bm!4671 m!53313))

(assert (=> bm!4671 m!53467))

(assert (=> d!11987 m!53313))

(assert (=> d!11987 m!53429))

(assert (=> d!11987 m!53313))

(declare-fun m!53665 () Bool)

(assert (=> d!11987 m!53665))

(assert (=> d!11987 m!53559))

(declare-fun m!53667 () Bool)

(assert (=> b!60980 m!53667))

(declare-fun m!53669 () Bool)

(assert (=> bm!4670 m!53669))

(assert (=> bm!4623 d!11987))

(declare-fun d!11989 () Bool)

(declare-fun e!40092 () Bool)

(assert (=> d!11989 e!40092))

(declare-fun res!33637 () Bool)

(assert (=> d!11989 (=> res!33637 e!40092)))

(declare-fun lt!25068 () Bool)

(assert (=> d!11989 (= res!33637 (not lt!25068))))

(declare-fun lt!25067 () Bool)

(assert (=> d!11989 (= lt!25068 lt!25067)))

(declare-fun lt!25066 () Unit!1625)

(declare-fun e!40093 () Unit!1625)

(assert (=> d!11989 (= lt!25066 e!40093)))

(declare-fun c!7955 () Bool)

(assert (=> d!11989 (= c!7955 lt!25067)))

(assert (=> d!11989 (= lt!25067 (containsKey!129 (toList!700 call!4625) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(assert (=> d!11989 (= (contains!686 call!4625 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) lt!25068)))

(declare-fun b!60986 () Bool)

(declare-fun lt!25065 () Unit!1625)

(assert (=> b!60986 (= e!40093 lt!25065)))

(assert (=> b!60986 (= lt!25065 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 call!4625) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(assert (=> b!60986 (isDefined!78 (getValueByKey!125 (toList!700 call!4625) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(declare-fun b!60987 () Bool)

(declare-fun Unit!1636 () Unit!1625)

(assert (=> b!60987 (= e!40093 Unit!1636)))

(declare-fun b!60988 () Bool)

(assert (=> b!60988 (= e!40092 (isDefined!78 (getValueByKey!125 (toList!700 call!4625) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355))))))

(assert (= (and d!11989 c!7955) b!60986))

(assert (= (and d!11989 (not c!7955)) b!60987))

(assert (= (and d!11989 (not res!33637)) b!60988))

(assert (=> d!11989 m!53313))

(declare-fun m!53671 () Bool)

(assert (=> d!11989 m!53671))

(assert (=> b!60986 m!53313))

(declare-fun m!53673 () Bool)

(assert (=> b!60986 m!53673))

(assert (=> b!60986 m!53313))

(declare-fun m!53675 () Bool)

(assert (=> b!60986 m!53675))

(assert (=> b!60986 m!53675))

(declare-fun m!53677 () Bool)

(assert (=> b!60986 m!53677))

(assert (=> b!60988 m!53313))

(assert (=> b!60988 m!53675))

(assert (=> b!60988 m!53675))

(assert (=> b!60988 m!53677))

(assert (=> b!60782 d!11989))

(declare-fun b!60989 () Bool)

(declare-fun e!40100 () Bool)

(assert (=> b!60989 (= e!40100 (validKeyInArray!0 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!60990 () Bool)

(declare-fun res!33638 () Bool)

(declare-fun e!40095 () Bool)

(assert (=> b!60990 (=> (not res!33638) (not e!40095))))

(declare-fun e!40098 () Bool)

(assert (=> b!60990 (= res!33638 e!40098)))

(declare-fun res!33646 () Bool)

(assert (=> b!60990 (=> res!33646 e!40098)))

(declare-fun e!40094 () Bool)

(assert (=> b!60990 (= res!33646 (not e!40094))))

(declare-fun res!33642 () Bool)

(assert (=> b!60990 (=> (not res!33642) (not e!40094))))

(assert (=> b!60990 (= res!33642 (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(declare-fun b!60991 () Bool)

(declare-fun e!40102 () Unit!1625)

(declare-fun Unit!1637 () Unit!1625)

(assert (=> b!60991 (= e!40102 Unit!1637)))

(declare-fun b!60992 () Bool)

(declare-fun c!7959 () Bool)

(assert (=> b!60992 (= c!7959 (and (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!40099 () ListLongMap!1369)

(declare-fun e!40101 () ListLongMap!1369)

(assert (=> b!60992 (= e!40099 e!40101)))

(declare-fun b!60993 () Bool)

(declare-fun e!40106 () ListLongMap!1369)

(declare-fun call!4681 () ListLongMap!1369)

(assert (=> b!60993 (= e!40106 (+!82 call!4681 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))

(declare-fun bm!4672 () Bool)

(declare-fun c!7958 () Bool)

(declare-fun call!4680 () ListLongMap!1369)

(declare-fun call!4675 () ListLongMap!1369)

(declare-fun c!7957 () Bool)

(declare-fun call!4679 () ListLongMap!1369)

(assert (=> bm!4672 (= call!4681 (+!82 (ite c!7957 call!4675 (ite c!7958 call!4680 call!4679)) (ite (or c!7957 c!7958) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(declare-fun b!60994 () Bool)

(declare-fun res!33641 () Bool)

(assert (=> b!60994 (=> (not res!33641) (not e!40095))))

(declare-fun e!40104 () Bool)

(assert (=> b!60994 (= res!33641 e!40104)))

(declare-fun c!7960 () Bool)

(assert (=> b!60994 (= c!7960 (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!60995 () Bool)

(declare-fun e!40097 () Bool)

(declare-fun lt!25069 () ListLongMap!1369)

(assert (=> b!60995 (= e!40097 (= (apply!67 lt!25069 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1981 newMap!16)))))

(declare-fun bm!4673 () Bool)

(assert (=> bm!4673 (= call!4679 call!4680)))

(declare-fun b!60996 () Bool)

(assert (=> b!60996 (= e!40104 e!40097)))

(declare-fun res!33639 () Bool)

(declare-fun call!4677 () Bool)

(assert (=> b!60996 (= res!33639 call!4677)))

(assert (=> b!60996 (=> (not res!33639) (not e!40097))))

(declare-fun b!60997 () Bool)

(declare-fun e!40103 () Bool)

(assert (=> b!60997 (= e!40103 (= (apply!67 lt!25069 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1981 newMap!16)))))

(declare-fun b!60998 () Bool)

(assert (=> b!60998 (= e!40101 call!4679)))

(declare-fun bm!4675 () Bool)

(assert (=> bm!4675 (= call!4675 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun b!60999 () Bool)

(declare-fun e!40096 () Bool)

(assert (=> b!60999 (= e!40098 e!40096)))

(declare-fun res!33640 () Bool)

(assert (=> b!60999 (=> (not res!33640) (not e!40096))))

(assert (=> b!60999 (= res!33640 (contains!686 lt!25069 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!60999 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(declare-fun bm!4676 () Bool)

(assert (=> bm!4676 (= call!4677 (contains!686 lt!25069 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61000 () Bool)

(declare-fun call!4678 () ListLongMap!1369)

(assert (=> b!61000 (= e!40101 call!4678)))

(declare-fun b!61001 () Bool)

(assert (=> b!61001 (= e!40096 (= (apply!67 lt!25069 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) (get!1075 (select (arr!1794 (_values!2050 newMap!16)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!61001 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2025 (_values!2050 newMap!16))))))

(assert (=> b!61001 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(declare-fun bm!4677 () Bool)

(assert (=> bm!4677 (= call!4678 call!4681)))

(declare-fun d!11991 () Bool)

(assert (=> d!11991 e!40095))

(declare-fun res!33643 () Bool)

(assert (=> d!11991 (=> (not res!33643) (not e!40095))))

(assert (=> d!11991 (= res!33643 (or (bvsge #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))))

(declare-fun lt!25085 () ListLongMap!1369)

(assert (=> d!11991 (= lt!25069 lt!25085)))

(declare-fun lt!25078 () Unit!1625)

(assert (=> d!11991 (= lt!25078 e!40102)))

(declare-fun c!7961 () Bool)

(assert (=> d!11991 (= c!7961 e!40100)))

(declare-fun res!33645 () Bool)

(assert (=> d!11991 (=> (not res!33645) (not e!40100))))

(assert (=> d!11991 (= res!33645 (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(assert (=> d!11991 (= lt!25085 e!40106)))

(assert (=> d!11991 (= c!7957 (and (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11991 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!11991 (= (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) lt!25069)))

(declare-fun bm!4674 () Bool)

(assert (=> bm!4674 (= call!4680 call!4675)))

(declare-fun b!61002 () Bool)

(declare-fun lt!25088 () Unit!1625)

(assert (=> b!61002 (= e!40102 lt!25088)))

(declare-fun lt!25080 () ListLongMap!1369)

(assert (=> b!61002 (= lt!25080 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25070 () (_ BitVec 64))

(assert (=> b!61002 (= lt!25070 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25083 () (_ BitVec 64))

(assert (=> b!61002 (= lt!25083 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25090 () Unit!1625)

(assert (=> b!61002 (= lt!25090 (addStillContains!43 lt!25080 lt!25070 (zeroValue!1981 newMap!16) lt!25083))))

(assert (=> b!61002 (contains!686 (+!82 lt!25080 (tuple2!2033 lt!25070 (zeroValue!1981 newMap!16))) lt!25083)))

(declare-fun lt!25076 () Unit!1625)

(assert (=> b!61002 (= lt!25076 lt!25090)))

(declare-fun lt!25077 () ListLongMap!1369)

(assert (=> b!61002 (= lt!25077 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25075 () (_ BitVec 64))

(assert (=> b!61002 (= lt!25075 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25089 () (_ BitVec 64))

(assert (=> b!61002 (= lt!25089 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25074 () Unit!1625)

(assert (=> b!61002 (= lt!25074 (addApplyDifferent!43 lt!25077 lt!25075 (minValue!1981 newMap!16) lt!25089))))

(assert (=> b!61002 (= (apply!67 (+!82 lt!25077 (tuple2!2033 lt!25075 (minValue!1981 newMap!16))) lt!25089) (apply!67 lt!25077 lt!25089))))

(declare-fun lt!25073 () Unit!1625)

(assert (=> b!61002 (= lt!25073 lt!25074)))

(declare-fun lt!25084 () ListLongMap!1369)

(assert (=> b!61002 (= lt!25084 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25071 () (_ BitVec 64))

(assert (=> b!61002 (= lt!25071 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25079 () (_ BitVec 64))

(assert (=> b!61002 (= lt!25079 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25086 () Unit!1625)

(assert (=> b!61002 (= lt!25086 (addApplyDifferent!43 lt!25084 lt!25071 (zeroValue!1981 newMap!16) lt!25079))))

(assert (=> b!61002 (= (apply!67 (+!82 lt!25084 (tuple2!2033 lt!25071 (zeroValue!1981 newMap!16))) lt!25079) (apply!67 lt!25084 lt!25079))))

(declare-fun lt!25087 () Unit!1625)

(assert (=> b!61002 (= lt!25087 lt!25086)))

(declare-fun lt!25072 () ListLongMap!1369)

(assert (=> b!61002 (= lt!25072 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25082 () (_ BitVec 64))

(assert (=> b!61002 (= lt!25082 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25081 () (_ BitVec 64))

(assert (=> b!61002 (= lt!25081 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!61002 (= lt!25088 (addApplyDifferent!43 lt!25072 lt!25082 (minValue!1981 newMap!16) lt!25081))))

(assert (=> b!61002 (= (apply!67 (+!82 lt!25072 (tuple2!2033 lt!25082 (minValue!1981 newMap!16))) lt!25081) (apply!67 lt!25072 lt!25081))))

(declare-fun b!61003 () Bool)

(declare-fun e!40105 () Bool)

(declare-fun call!4676 () Bool)

(assert (=> b!61003 (= e!40105 (not call!4676))))

(declare-fun b!61004 () Bool)

(assert (=> b!61004 (= e!40099 call!4678)))

(declare-fun b!61005 () Bool)

(assert (=> b!61005 (= e!40094 (validKeyInArray!0 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61006 () Bool)

(assert (=> b!61006 (= e!40104 (not call!4677))))

(declare-fun bm!4678 () Bool)

(assert (=> bm!4678 (= call!4676 (contains!686 lt!25069 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61007 () Bool)

(assert (=> b!61007 (= e!40105 e!40103)))

(declare-fun res!33644 () Bool)

(assert (=> b!61007 (= res!33644 call!4676)))

(assert (=> b!61007 (=> (not res!33644) (not e!40103))))

(declare-fun b!61008 () Bool)

(assert (=> b!61008 (= e!40106 e!40099)))

(assert (=> b!61008 (= c!7958 (and (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!61009 () Bool)

(assert (=> b!61009 (= e!40095 e!40105)))

(declare-fun c!7956 () Bool)

(assert (=> b!61009 (= c!7956 (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!11991 c!7957) b!60993))

(assert (= (and d!11991 (not c!7957)) b!61008))

(assert (= (and b!61008 c!7958) b!61004))

(assert (= (and b!61008 (not c!7958)) b!60992))

(assert (= (and b!60992 c!7959) b!61000))

(assert (= (and b!60992 (not c!7959)) b!60998))

(assert (= (or b!61000 b!60998) bm!4673))

(assert (= (or b!61004 bm!4673) bm!4674))

(assert (= (or b!61004 b!61000) bm!4677))

(assert (= (or b!60993 bm!4674) bm!4675))

(assert (= (or b!60993 bm!4677) bm!4672))

(assert (= (and d!11991 res!33645) b!60989))

(assert (= (and d!11991 c!7961) b!61002))

(assert (= (and d!11991 (not c!7961)) b!60991))

(assert (= (and d!11991 res!33643) b!60990))

(assert (= (and b!60990 res!33642) b!61005))

(assert (= (and b!60990 (not res!33646)) b!60999))

(assert (= (and b!60999 res!33640) b!61001))

(assert (= (and b!60990 res!33638) b!60994))

(assert (= (and b!60994 c!7960) b!60996))

(assert (= (and b!60994 (not c!7960)) b!61006))

(assert (= (and b!60996 res!33639) b!60995))

(assert (= (or b!60996 b!61006) bm!4676))

(assert (= (and b!60994 res!33641) b!61009))

(assert (= (and b!61009 c!7956) b!61007))

(assert (= (and b!61009 (not c!7956)) b!61003))

(assert (= (and b!61007 res!33644) b!60997))

(assert (= (or b!61007 b!61003) bm!4678))

(declare-fun b_lambda!2697 () Bool)

(assert (=> (not b_lambda!2697) (not b!61001)))

(assert (=> b!61001 t!4813))

(declare-fun b_and!3715 () Bool)

(assert (= b_and!3711 (and (=> t!4813 result!2427) b_and!3715)))

(assert (=> b!61001 t!4815))

(declare-fun b_and!3717 () Bool)

(assert (= b_and!3713 (and (=> t!4815 result!2429) b_and!3717)))

(declare-fun m!53679 () Bool)

(assert (=> bm!4672 m!53679))

(declare-fun m!53681 () Bool)

(assert (=> bm!4675 m!53681))

(declare-fun m!53683 () Bool)

(assert (=> b!61002 m!53683))

(declare-fun m!53685 () Bool)

(assert (=> b!61002 m!53685))

(declare-fun m!53687 () Bool)

(assert (=> b!61002 m!53687))

(declare-fun m!53689 () Bool)

(assert (=> b!61002 m!53689))

(declare-fun m!53691 () Bool)

(assert (=> b!61002 m!53691))

(assert (=> b!61002 m!53617))

(declare-fun m!53693 () Bool)

(assert (=> b!61002 m!53693))

(declare-fun m!53695 () Bool)

(assert (=> b!61002 m!53695))

(declare-fun m!53697 () Bool)

(assert (=> b!61002 m!53697))

(assert (=> b!61002 m!53681))

(assert (=> b!61002 m!53683))

(declare-fun m!53699 () Bool)

(assert (=> b!61002 m!53699))

(assert (=> b!61002 m!53687))

(declare-fun m!53701 () Bool)

(assert (=> b!61002 m!53701))

(assert (=> b!61002 m!53695))

(declare-fun m!53703 () Bool)

(assert (=> b!61002 m!53703))

(declare-fun m!53705 () Bool)

(assert (=> b!61002 m!53705))

(declare-fun m!53707 () Bool)

(assert (=> b!61002 m!53707))

(declare-fun m!53709 () Bool)

(assert (=> b!61002 m!53709))

(assert (=> b!61002 m!53699))

(declare-fun m!53711 () Bool)

(assert (=> b!61002 m!53711))

(declare-fun m!53713 () Bool)

(assert (=> b!60995 m!53713))

(assert (=> b!61005 m!53617))

(assert (=> b!61005 m!53617))

(assert (=> b!61005 m!53641))

(assert (=> b!61001 m!53617))

(declare-fun m!53715 () Bool)

(assert (=> b!61001 m!53715))

(assert (=> b!61001 m!53645))

(assert (=> b!61001 m!53645))

(assert (=> b!61001 m!53647))

(assert (=> b!61001 m!53649))

(assert (=> b!61001 m!53617))

(assert (=> b!61001 m!53647))

(assert (=> b!60999 m!53617))

(assert (=> b!60999 m!53617))

(declare-fun m!53717 () Bool)

(assert (=> b!60999 m!53717))

(declare-fun m!53719 () Bool)

(assert (=> b!60997 m!53719))

(assert (=> b!60989 m!53617))

(assert (=> b!60989 m!53617))

(assert (=> b!60989 m!53641))

(declare-fun m!53721 () Bool)

(assert (=> b!60993 m!53721))

(declare-fun m!53723 () Bool)

(assert (=> bm!4676 m!53723))

(assert (=> d!11991 m!53559))

(declare-fun m!53725 () Bool)

(assert (=> bm!4678 m!53725))

(assert (=> d!11965 d!11991))

(assert (=> d!11947 d!11953))

(declare-fun d!11993 () Bool)

(assert (=> d!11993 (arrayNoDuplicates!0 (_keys!3695 (v!2404 (underlying!231 thiss!992))) from!355 Nil!1434)))

(assert (=> d!11993 true))

(declare-fun _$71!75 () Unit!1625)

(assert (=> d!11993 (= (choose!39 (_keys!3695 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000000000000000 from!355) _$71!75)))

(declare-fun bs!2644 () Bool)

(assert (= bs!2644 d!11993))

(assert (=> bs!2644 m!53347))

(assert (=> d!11947 d!11993))

(declare-fun d!11995 () Bool)

(declare-fun e!40109 () Bool)

(assert (=> d!11995 e!40109))

(declare-fun c!7964 () Bool)

(assert (=> d!11995 (= c!7964 (and (not (= (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> d!11995 true))

(declare-fun _$29!69 () Unit!1625)

(assert (=> d!11995 (= (choose!315 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (_values!2050 (v!2404 (underlying!231 thiss!992))) (mask!5963 (v!2404 (underlying!231 thiss!992))) (extraKeys!1950 (v!2404 (underlying!231 thiss!992))) (zeroValue!1981 (v!2404 (underlying!231 thiss!992))) (minValue!1981 (v!2404 (underlying!231 thiss!992))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2067 (v!2404 (underlying!231 thiss!992)))) _$29!69)))

(declare-fun b!61014 () Bool)

(assert (=> b!61014 (= e!40109 (arrayContainsKey!0 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!61015 () Bool)

(assert (=> b!61015 (= e!40109 (ite (= (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!1950 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1950 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!11995 c!7964) b!61014))

(assert (= (and d!11995 (not c!7964)) b!61015))

(assert (=> b!61014 m!53313))

(assert (=> b!61014 m!53351))

(assert (=> d!11951 d!11995))

(assert (=> d!11951 d!11937))

(declare-fun d!11997 () Bool)

(declare-fun e!40112 () Bool)

(assert (=> d!11997 e!40112))

(declare-fun res!33651 () Bool)

(assert (=> d!11997 (=> (not res!33651) (not e!40112))))

(declare-fun lt!25100 () ListLongMap!1369)

(assert (=> d!11997 (= res!33651 (contains!686 lt!25100 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun lt!25101 () List!1436)

(assert (=> d!11997 (= lt!25100 (ListLongMap!1370 lt!25101))))

(declare-fun lt!25099 () Unit!1625)

(declare-fun lt!25102 () Unit!1625)

(assert (=> d!11997 (= lt!25099 lt!25102)))

(assert (=> d!11997 (= (getValueByKey!125 lt!25101 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) (Some!130 (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun lemmaContainsTupThenGetReturnValue!42 (List!1436 (_ BitVec 64) V!2859) Unit!1625)

(assert (=> d!11997 (= lt!25102 (lemmaContainsTupThenGetReturnValue!42 lt!25101 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun insertStrictlySorted!45 (List!1436 (_ BitVec 64) V!2859) List!1436)

(assert (=> d!11997 (= lt!25101 (insertStrictlySorted!45 (toList!700 call!4661) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(assert (=> d!11997 (= (+!82 call!4661 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) lt!25100)))

(declare-fun b!61020 () Bool)

(declare-fun res!33652 () Bool)

(assert (=> b!61020 (=> (not res!33652) (not e!40112))))

(assert (=> b!61020 (= res!33652 (= (getValueByKey!125 (toList!700 lt!25100) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) (Some!130 (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(declare-fun b!61021 () Bool)

(declare-fun contains!688 (List!1436 tuple2!2032) Bool)

(assert (=> b!61021 (= e!40112 (contains!688 (toList!700 lt!25100) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))

(assert (= (and d!11997 res!33651) b!61020))

(assert (= (and b!61020 res!33652) b!61021))

(declare-fun m!53727 () Bool)

(assert (=> d!11997 m!53727))

(declare-fun m!53729 () Bool)

(assert (=> d!11997 m!53729))

(declare-fun m!53731 () Bool)

(assert (=> d!11997 m!53731))

(declare-fun m!53733 () Bool)

(assert (=> d!11997 m!53733))

(declare-fun m!53735 () Bool)

(assert (=> b!61020 m!53735))

(declare-fun m!53737 () Bool)

(assert (=> b!61021 m!53737))

(assert (=> b!60872 d!11997))

(declare-fun d!11999 () Bool)

(assert (=> d!11999 (= (get!1077 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!60825 d!11999))

(declare-fun b!61031 () Bool)

(declare-fun e!40118 () (_ BitVec 32))

(declare-fun e!40117 () (_ BitVec 32))

(assert (=> b!61031 (= e!40118 e!40117)))

(declare-fun c!7969 () Bool)

(assert (=> b!61031 (= c!7969 (validKeyInArray!0 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!4681 () Bool)

(declare-fun call!4684 () (_ BitVec 32))

(assert (=> bm!4681 (= call!4684 (arrayCountValidKeys!0 (_keys!3695 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2024 (_keys!3695 newMap!16))))))

(declare-fun b!61032 () Bool)

(assert (=> b!61032 (= e!40118 #b00000000000000000000000000000000)))

(declare-fun b!61033 () Bool)

(assert (=> b!61033 (= e!40117 (bvadd #b00000000000000000000000000000001 call!4684))))

(declare-fun d!12001 () Bool)

(declare-fun lt!25105 () (_ BitVec 32))

(assert (=> d!12001 (and (bvsge lt!25105 #b00000000000000000000000000000000) (bvsle lt!25105 (bvsub (size!2024 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!12001 (= lt!25105 e!40118)))

(declare-fun c!7970 () Bool)

(assert (=> d!12001 (= c!7970 (bvsge #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(assert (=> d!12001 (and (bvsle #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2024 (_keys!3695 newMap!16)) (size!2024 (_keys!3695 newMap!16))))))

(assert (=> d!12001 (= (arrayCountValidKeys!0 (_keys!3695 newMap!16) #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))) lt!25105)))

(declare-fun b!61030 () Bool)

(assert (=> b!61030 (= e!40117 call!4684)))

(assert (= (and d!12001 c!7970) b!61032))

(assert (= (and d!12001 (not c!7970)) b!61031))

(assert (= (and b!61031 c!7969) b!61033))

(assert (= (and b!61031 (not c!7969)) b!61030))

(assert (= (or b!61033 b!61030) bm!4681))

(assert (=> b!61031 m!53617))

(assert (=> b!61031 m!53617))

(assert (=> b!61031 m!53641))

(declare-fun m!53739 () Bool)

(assert (=> bm!4681 m!53739))

(assert (=> b!60895 d!12001))

(declare-fun b!61034 () Bool)

(declare-fun e!40122 () Bool)

(declare-fun call!4685 () Bool)

(assert (=> b!61034 (= e!40122 call!4685)))

(declare-fun b!61035 () Bool)

(declare-fun e!40120 () Bool)

(declare-fun e!40119 () Bool)

(assert (=> b!61035 (= e!40120 e!40119)))

(declare-fun res!33654 () Bool)

(assert (=> b!61035 (=> (not res!33654) (not e!40119))))

(declare-fun e!40121 () Bool)

(assert (=> b!61035 (= res!33654 (not e!40121))))

(declare-fun res!33655 () Bool)

(assert (=> b!61035 (=> (not res!33655) (not e!40121))))

(assert (=> b!61035 (= res!33655 (validKeyInArray!0 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61036 () Bool)

(assert (=> b!61036 (= e!40119 e!40122)))

(declare-fun c!7971 () Bool)

(assert (=> b!61036 (= c!7971 (validKeyInArray!0 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61037 () Bool)

(assert (=> b!61037 (= e!40122 call!4685)))

(declare-fun d!12003 () Bool)

(declare-fun res!33653 () Bool)

(assert (=> d!12003 (=> res!33653 e!40120)))

(assert (=> d!12003 (= res!33653 (bvsge #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(assert (=> d!12003 (= (arrayNoDuplicates!0 (_keys!3695 newMap!16) #b00000000000000000000000000000000 Nil!1434) e!40120)))

(declare-fun bm!4682 () Bool)

(assert (=> bm!4682 (= call!4685 (arrayNoDuplicates!0 (_keys!3695 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!7971 (Cons!1433 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000) Nil!1434) Nil!1434)))))

(declare-fun b!61038 () Bool)

(assert (=> b!61038 (= e!40121 (contains!687 Nil!1434 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!12003 (not res!33653)) b!61035))

(assert (= (and b!61035 res!33655) b!61038))

(assert (= (and b!61035 res!33654) b!61036))

(assert (= (and b!61036 c!7971) b!61034))

(assert (= (and b!61036 (not c!7971)) b!61037))

(assert (= (or b!61034 b!61037) bm!4682))

(assert (=> b!61035 m!53617))

(assert (=> b!61035 m!53617))

(assert (=> b!61035 m!53641))

(assert (=> b!61036 m!53617))

(assert (=> b!61036 m!53617))

(assert (=> b!61036 m!53641))

(assert (=> bm!4682 m!53617))

(declare-fun m!53741 () Bool)

(assert (=> bm!4682 m!53741))

(assert (=> b!61038 m!53617))

(assert (=> b!61038 m!53617))

(declare-fun m!53743 () Bool)

(assert (=> b!61038 m!53743))

(assert (=> b!60897 d!12003))

(declare-fun d!12005 () Bool)

(declare-fun res!33656 () Bool)

(declare-fun e!40123 () Bool)

(assert (=> d!12005 (=> res!33656 e!40123)))

(assert (=> d!12005 (= res!33656 (= (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(assert (=> d!12005 (= (arrayContainsKey!0 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) e!40123)))

(declare-fun b!61039 () Bool)

(declare-fun e!40124 () Bool)

(assert (=> b!61039 (= e!40123 e!40124)))

(declare-fun res!33657 () Bool)

(assert (=> b!61039 (=> (not res!33657) (not e!40124))))

(assert (=> b!61039 (= res!33657 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992))))))))

(declare-fun b!61040 () Bool)

(assert (=> b!61040 (= e!40124 (arrayContainsKey!0 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!12005 (not res!33656)) b!61039))

(assert (= (and b!61039 res!33657) b!61040))

(declare-fun m!53745 () Bool)

(assert (=> d!12005 m!53745))

(assert (=> b!61040 m!53313))

(declare-fun m!53747 () Bool)

(assert (=> b!61040 m!53747))

(assert (=> b!60675 d!12005))

(declare-fun d!12007 () Bool)

(declare-fun lt!25108 () Bool)

(define-sort InoxSet (T) (Array T Bool))

(declare-fun content!65 (List!1437) (InoxSet (_ BitVec 64)))

(assert (=> d!12007 (= lt!25108 (select (content!65 Nil!1434) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(declare-fun e!40129 () Bool)

(assert (=> d!12007 (= lt!25108 e!40129)))

(declare-fun res!33663 () Bool)

(assert (=> d!12007 (=> (not res!33663) (not e!40129))))

(assert (=> d!12007 (= res!33663 ((_ is Cons!1433) Nil!1434))))

(assert (=> d!12007 (= (contains!687 Nil!1434 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) lt!25108)))

(declare-fun b!61045 () Bool)

(declare-fun e!40130 () Bool)

(assert (=> b!61045 (= e!40129 e!40130)))

(declare-fun res!33662 () Bool)

(assert (=> b!61045 (=> res!33662 e!40130)))

(assert (=> b!61045 (= res!33662 (= (h!2015 Nil!1434) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(declare-fun b!61046 () Bool)

(assert (=> b!61046 (= e!40130 (contains!687 (t!4807 Nil!1434) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(assert (= (and d!12007 res!33663) b!61045))

(assert (= (and b!61045 (not res!33662)) b!61046))

(declare-fun m!53749 () Bool)

(assert (=> d!12007 m!53749))

(assert (=> d!12007 m!53313))

(declare-fun m!53751 () Bool)

(assert (=> d!12007 m!53751))

(assert (=> b!61046 m!53313))

(declare-fun m!53753 () Bool)

(assert (=> b!61046 m!53753))

(assert (=> b!60696 d!12007))

(declare-fun d!12009 () Bool)

(assert (=> d!12009 (= (map!1112 (ite c!7904 newMap!16 (_2!1026 lt!24941))) (getCurrentListMap!405 (_keys!3695 (ite c!7904 newMap!16 (_2!1026 lt!24941))) (_values!2050 (ite c!7904 newMap!16 (_2!1026 lt!24941))) (mask!5963 (ite c!7904 newMap!16 (_2!1026 lt!24941))) (extraKeys!1950 (ite c!7904 newMap!16 (_2!1026 lt!24941))) (zeroValue!1981 (ite c!7904 newMap!16 (_2!1026 lt!24941))) (minValue!1981 (ite c!7904 newMap!16 (_2!1026 lt!24941))) #b00000000000000000000000000000000 (defaultEntry!2067 (ite c!7904 newMap!16 (_2!1026 lt!24941)))))))

(declare-fun bs!2645 () Bool)

(assert (= bs!2645 d!12009))

(declare-fun m!53755 () Bool)

(assert (=> bs!2645 m!53755))

(assert (=> bm!4633 d!12009))

(declare-fun d!12011 () Bool)

(assert (=> d!12011 (= (map!1112 (ite c!7904 (_2!1026 lt!24941) newMap!16)) (getCurrentListMap!405 (_keys!3695 (ite c!7904 (_2!1026 lt!24941) newMap!16)) (_values!2050 (ite c!7904 (_2!1026 lt!24941) newMap!16)) (mask!5963 (ite c!7904 (_2!1026 lt!24941) newMap!16)) (extraKeys!1950 (ite c!7904 (_2!1026 lt!24941) newMap!16)) (zeroValue!1981 (ite c!7904 (_2!1026 lt!24941) newMap!16)) (minValue!1981 (ite c!7904 (_2!1026 lt!24941) newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2067 (ite c!7904 (_2!1026 lt!24941) newMap!16))))))

(declare-fun bs!2646 () Bool)

(assert (= bs!2646 d!12011))

(declare-fun m!53757 () Bool)

(assert (=> bs!2646 m!53757))

(assert (=> bm!4615 d!12011))

(declare-fun d!12013 () Bool)

(assert (=> d!12013 (= (apply!67 (+!82 lt!24998 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) lt!25007) (apply!67 lt!24998 lt!25007))))

(declare-fun lt!25111 () Unit!1625)

(declare-fun choose!318 (ListLongMap!1369 (_ BitVec 64) V!2859 (_ BitVec 64)) Unit!1625)

(assert (=> d!12013 (= lt!25111 (choose!318 lt!24998 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992))) lt!25007))))

(declare-fun e!40133 () Bool)

(assert (=> d!12013 e!40133))

(declare-fun res!33666 () Bool)

(assert (=> d!12013 (=> (not res!33666) (not e!40133))))

(assert (=> d!12013 (= res!33666 (contains!686 lt!24998 lt!25007))))

(assert (=> d!12013 (= (addApplyDifferent!43 lt!24998 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992))) lt!25007) lt!25111)))

(declare-fun b!61050 () Bool)

(assert (=> b!61050 (= e!40133 (not (= lt!25007 lt!25008)))))

(assert (= (and d!12013 res!33666) b!61050))

(assert (=> d!12013 m!53517))

(assert (=> d!12013 m!53507))

(declare-fun m!53759 () Bool)

(assert (=> d!12013 m!53759))

(assert (=> d!12013 m!53507))

(assert (=> d!12013 m!53515))

(declare-fun m!53761 () Bool)

(assert (=> d!12013 m!53761))

(assert (=> b!60881 d!12013))

(declare-fun b!61075 () Bool)

(declare-fun e!40149 () Bool)

(declare-fun e!40154 () Bool)

(assert (=> b!61075 (= e!40149 e!40154)))

(assert (=> b!61075 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992))))))))

(declare-fun res!33675 () Bool)

(declare-fun lt!25126 () ListLongMap!1369)

(assert (=> b!61075 (= res!33675 (contains!686 lt!25126 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!61075 (=> (not res!33675) (not e!40154))))

(declare-fun b!61076 () Bool)

(declare-fun e!40151 () Bool)

(assert (=> b!61076 (= e!40149 e!40151)))

(declare-fun c!7983 () Bool)

(assert (=> b!61076 (= c!7983 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992))))))))

(declare-fun b!61077 () Bool)

(assert (=> b!61077 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992))))))))

(assert (=> b!61077 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2025 (_values!2050 (v!2404 (underlying!231 thiss!992))))))))

(assert (=> b!61077 (= e!40154 (= (apply!67 lt!25126 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!12015 () Bool)

(declare-fun e!40153 () Bool)

(assert (=> d!12015 e!40153))

(declare-fun res!33677 () Bool)

(assert (=> d!12015 (=> (not res!33677) (not e!40153))))

(assert (=> d!12015 (= res!33677 (not (contains!686 lt!25126 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!40148 () ListLongMap!1369)

(assert (=> d!12015 (= lt!25126 e!40148)))

(declare-fun c!7982 () Bool)

(assert (=> d!12015 (= c!7982 (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992))))))))

(assert (=> d!12015 (validMask!0 (mask!5963 (v!2404 (underlying!231 thiss!992))))))

(assert (=> d!12015 (= (getCurrentListMapNoExtraKeys!45 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (_values!2050 (v!2404 (underlying!231 thiss!992))) (mask!5963 (v!2404 (underlying!231 thiss!992))) (extraKeys!1950 (v!2404 (underlying!231 thiss!992))) (zeroValue!1981 (v!2404 (underlying!231 thiss!992))) (minValue!1981 (v!2404 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2067 (v!2404 (underlying!231 thiss!992)))) lt!25126)))

(declare-fun b!61078 () Bool)

(assert (=> b!61078 (= e!40153 e!40149)))

(declare-fun c!7980 () Bool)

(declare-fun e!40150 () Bool)

(assert (=> b!61078 (= c!7980 e!40150)))

(declare-fun res!33676 () Bool)

(assert (=> b!61078 (=> (not res!33676) (not e!40150))))

(assert (=> b!61078 (= res!33676 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992))))))))

(declare-fun b!61079 () Bool)

(declare-fun e!40152 () ListLongMap!1369)

(assert (=> b!61079 (= e!40148 e!40152)))

(declare-fun c!7981 () Bool)

(assert (=> b!61079 (= c!7981 (validKeyInArray!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!61080 () Bool)

(assert (=> b!61080 (= e!40151 (= lt!25126 (getCurrentListMapNoExtraKeys!45 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (_values!2050 (v!2404 (underlying!231 thiss!992))) (mask!5963 (v!2404 (underlying!231 thiss!992))) (extraKeys!1950 (v!2404 (underlying!231 thiss!992))) (zeroValue!1981 (v!2404 (underlying!231 thiss!992))) (minValue!1981 (v!2404 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))))))))

(declare-fun b!61081 () Bool)

(declare-fun call!4688 () ListLongMap!1369)

(assert (=> b!61081 (= e!40152 call!4688)))

(declare-fun bm!4685 () Bool)

(assert (=> bm!4685 (= call!4688 (getCurrentListMapNoExtraKeys!45 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (_values!2050 (v!2404 (underlying!231 thiss!992))) (mask!5963 (v!2404 (underlying!231 thiss!992))) (extraKeys!1950 (v!2404 (underlying!231 thiss!992))) (zeroValue!1981 (v!2404 (underlying!231 thiss!992))) (minValue!1981 (v!2404 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2067 (v!2404 (underlying!231 thiss!992)))))))

(declare-fun b!61082 () Bool)

(assert (=> b!61082 (= e!40150 (validKeyInArray!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!61082 (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000)))

(declare-fun b!61083 () Bool)

(assert (=> b!61083 (= e!40148 (ListLongMap!1370 Nil!1433))))

(declare-fun b!61084 () Bool)

(declare-fun res!33678 () Bool)

(assert (=> b!61084 (=> (not res!33678) (not e!40153))))

(assert (=> b!61084 (= res!33678 (not (contains!686 lt!25126 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!61085 () Bool)

(declare-fun isEmpty!296 (ListLongMap!1369) Bool)

(assert (=> b!61085 (= e!40151 (isEmpty!296 lt!25126))))

(declare-fun b!61086 () Bool)

(declare-fun lt!25132 () Unit!1625)

(declare-fun lt!25128 () Unit!1625)

(assert (=> b!61086 (= lt!25132 lt!25128)))

(declare-fun lt!25130 () V!2859)

(declare-fun lt!25131 () (_ BitVec 64))

(declare-fun lt!25129 () ListLongMap!1369)

(declare-fun lt!25127 () (_ BitVec 64))

(assert (=> b!61086 (not (contains!686 (+!82 lt!25129 (tuple2!2033 lt!25127 lt!25130)) lt!25131))))

(declare-fun addStillNotContains!16 (ListLongMap!1369 (_ BitVec 64) V!2859 (_ BitVec 64)) Unit!1625)

(assert (=> b!61086 (= lt!25128 (addStillNotContains!16 lt!25129 lt!25127 lt!25130 lt!25131))))

(assert (=> b!61086 (= lt!25131 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!61086 (= lt!25130 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!61086 (= lt!25127 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!61086 (= lt!25129 call!4688)))

(assert (=> b!61086 (= e!40152 (+!82 call!4688 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12015 c!7982) b!61083))

(assert (= (and d!12015 (not c!7982)) b!61079))

(assert (= (and b!61079 c!7981) b!61086))

(assert (= (and b!61079 (not c!7981)) b!61081))

(assert (= (or b!61086 b!61081) bm!4685))

(assert (= (and d!12015 res!33677) b!61084))

(assert (= (and b!61084 res!33678) b!61078))

(assert (= (and b!61078 res!33676) b!61082))

(assert (= (and b!61078 c!7980) b!61075))

(assert (= (and b!61078 (not c!7980)) b!61076))

(assert (= (and b!61075 res!33675) b!61077))

(assert (= (and b!61076 c!7983) b!61080))

(assert (= (and b!61076 (not c!7983)) b!61085))

(declare-fun b_lambda!2699 () Bool)

(assert (=> (not b_lambda!2699) (not b!61077)))

(assert (=> b!61077 t!4803))

(declare-fun b_and!3719 () Bool)

(assert (= b_and!3715 (and (=> t!4803 result!2413) b_and!3719)))

(assert (=> b!61077 t!4805))

(declare-fun b_and!3721 () Bool)

(assert (= b_and!3717 (and (=> t!4805 result!2417) b_and!3721)))

(declare-fun b_lambda!2701 () Bool)

(assert (=> (not b_lambda!2701) (not b!61086)))

(assert (=> b!61086 t!4803))

(declare-fun b_and!3723 () Bool)

(assert (= b_and!3719 (and (=> t!4803 result!2413) b_and!3723)))

(assert (=> b!61086 t!4805))

(declare-fun b_and!3725 () Bool)

(assert (= b_and!3721 (and (=> t!4805 result!2417) b_and!3725)))

(assert (=> b!61079 m!53407))

(assert (=> b!61079 m!53407))

(assert (=> b!61079 m!53527))

(declare-fun m!53763 () Bool)

(assert (=> b!61086 m!53763))

(declare-fun m!53765 () Bool)

(assert (=> b!61086 m!53765))

(declare-fun m!53767 () Bool)

(assert (=> b!61086 m!53767))

(assert (=> b!61086 m!53335))

(assert (=> b!61086 m!53407))

(assert (=> b!61086 m!53531))

(assert (=> b!61086 m!53765))

(declare-fun m!53769 () Bool)

(assert (=> b!61086 m!53769))

(assert (=> b!61086 m!53531))

(assert (=> b!61086 m!53335))

(assert (=> b!61086 m!53533))

(declare-fun m!53771 () Bool)

(assert (=> b!61084 m!53771))

(declare-fun m!53773 () Bool)

(assert (=> d!12015 m!53773))

(assert (=> d!12015 m!53319))

(assert (=> b!61075 m!53407))

(assert (=> b!61075 m!53407))

(declare-fun m!53775 () Bool)

(assert (=> b!61075 m!53775))

(declare-fun m!53777 () Bool)

(assert (=> b!61085 m!53777))

(declare-fun m!53779 () Bool)

(assert (=> b!61080 m!53779))

(assert (=> bm!4685 m!53779))

(assert (=> b!61082 m!53407))

(assert (=> b!61082 m!53407))

(assert (=> b!61082 m!53527))

(assert (=> b!61077 m!53335))

(assert (=> b!61077 m!53407))

(assert (=> b!61077 m!53531))

(assert (=> b!61077 m!53531))

(assert (=> b!61077 m!53335))

(assert (=> b!61077 m!53533))

(assert (=> b!61077 m!53407))

(declare-fun m!53781 () Bool)

(assert (=> b!61077 m!53781))

(assert (=> b!60881 d!12015))

(declare-fun d!12017 () Bool)

(declare-fun e!40155 () Bool)

(assert (=> d!12017 e!40155))

(declare-fun res!33679 () Bool)

(assert (=> d!12017 (=> (not res!33679) (not e!40155))))

(declare-fun lt!25134 () ListLongMap!1369)

(assert (=> d!12017 (= res!33679 (contains!686 lt!25134 (_1!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun lt!25135 () List!1436)

(assert (=> d!12017 (= lt!25134 (ListLongMap!1370 lt!25135))))

(declare-fun lt!25133 () Unit!1625)

(declare-fun lt!25136 () Unit!1625)

(assert (=> d!12017 (= lt!25133 lt!25136)))

(assert (=> d!12017 (= (getValueByKey!125 lt!25135 (_1!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) (Some!130 (_2!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(assert (=> d!12017 (= lt!25136 (lemmaContainsTupThenGetReturnValue!42 lt!25135 (_1!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(assert (=> d!12017 (= lt!25135 (insertStrictlySorted!45 (toList!700 lt!24998) (_1!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(assert (=> d!12017 (= (+!82 lt!24998 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) lt!25134)))

(declare-fun b!61087 () Bool)

(declare-fun res!33680 () Bool)

(assert (=> b!61087 (=> (not res!33680) (not e!40155))))

(assert (=> b!61087 (= res!33680 (= (getValueByKey!125 (toList!700 lt!25134) (_1!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) (Some!130 (_2!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(declare-fun b!61088 () Bool)

(assert (=> b!61088 (= e!40155 (contains!688 (toList!700 lt!25134) (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))

(assert (= (and d!12017 res!33679) b!61087))

(assert (= (and b!61087 res!33680) b!61088))

(declare-fun m!53783 () Bool)

(assert (=> d!12017 m!53783))

(declare-fun m!53785 () Bool)

(assert (=> d!12017 m!53785))

(declare-fun m!53787 () Bool)

(assert (=> d!12017 m!53787))

(declare-fun m!53789 () Bool)

(assert (=> d!12017 m!53789))

(declare-fun m!53791 () Bool)

(assert (=> b!61087 m!53791))

(declare-fun m!53793 () Bool)

(assert (=> b!61088 m!53793))

(assert (=> b!60881 d!12017))

(declare-fun d!12019 () Bool)

(declare-fun e!40156 () Bool)

(assert (=> d!12019 e!40156))

(declare-fun res!33681 () Bool)

(assert (=> d!12019 (=> (not res!33681) (not e!40156))))

(declare-fun lt!25138 () ListLongMap!1369)

(assert (=> d!12019 (= res!33681 (contains!686 lt!25138 (_1!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun lt!25139 () List!1436)

(assert (=> d!12019 (= lt!25138 (ListLongMap!1370 lt!25139))))

(declare-fun lt!25137 () Unit!1625)

(declare-fun lt!25140 () Unit!1625)

(assert (=> d!12019 (= lt!25137 lt!25140)))

(assert (=> d!12019 (= (getValueByKey!125 lt!25139 (_1!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) (Some!130 (_2!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(assert (=> d!12019 (= lt!25140 (lemmaContainsTupThenGetReturnValue!42 lt!25139 (_1!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(assert (=> d!12019 (= lt!25139 (insertStrictlySorted!45 (toList!700 lt!25003) (_1!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(assert (=> d!12019 (= (+!82 lt!25003 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) lt!25138)))

(declare-fun b!61089 () Bool)

(declare-fun res!33682 () Bool)

(assert (=> b!61089 (=> (not res!33682) (not e!40156))))

(assert (=> b!61089 (= res!33682 (= (getValueByKey!125 (toList!700 lt!25138) (_1!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) (Some!130 (_2!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(declare-fun b!61090 () Bool)

(assert (=> b!61090 (= e!40156 (contains!688 (toList!700 lt!25138) (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))

(assert (= (and d!12019 res!33681) b!61089))

(assert (= (and b!61089 res!33682) b!61090))

(declare-fun m!53795 () Bool)

(assert (=> d!12019 m!53795))

(declare-fun m!53797 () Bool)

(assert (=> d!12019 m!53797))

(declare-fun m!53799 () Bool)

(assert (=> d!12019 m!53799))

(declare-fun m!53801 () Bool)

(assert (=> d!12019 m!53801))

(declare-fun m!53803 () Bool)

(assert (=> b!61089 m!53803))

(declare-fun m!53805 () Bool)

(assert (=> b!61090 m!53805))

(assert (=> b!60881 d!12019))

(declare-fun d!12021 () Bool)

(declare-fun e!40157 () Bool)

(assert (=> d!12021 e!40157))

(declare-fun res!33683 () Bool)

(assert (=> d!12021 (=> res!33683 e!40157)))

(declare-fun lt!25144 () Bool)

(assert (=> d!12021 (= res!33683 (not lt!25144))))

(declare-fun lt!25143 () Bool)

(assert (=> d!12021 (= lt!25144 lt!25143)))

(declare-fun lt!25142 () Unit!1625)

(declare-fun e!40158 () Unit!1625)

(assert (=> d!12021 (= lt!25142 e!40158)))

(declare-fun c!7984 () Bool)

(assert (=> d!12021 (= c!7984 lt!25143)))

(assert (=> d!12021 (= lt!25143 (containsKey!129 (toList!700 (+!82 lt!25006 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25009))))

(assert (=> d!12021 (= (contains!686 (+!82 lt!25006 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))) lt!25009) lt!25144)))

(declare-fun b!61091 () Bool)

(declare-fun lt!25141 () Unit!1625)

(assert (=> b!61091 (= e!40158 lt!25141)))

(assert (=> b!61091 (= lt!25141 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 (+!82 lt!25006 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25009))))

(assert (=> b!61091 (isDefined!78 (getValueByKey!125 (toList!700 (+!82 lt!25006 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25009))))

(declare-fun b!61092 () Bool)

(declare-fun Unit!1638 () Unit!1625)

(assert (=> b!61092 (= e!40158 Unit!1638)))

(declare-fun b!61093 () Bool)

(assert (=> b!61093 (= e!40157 (isDefined!78 (getValueByKey!125 (toList!700 (+!82 lt!25006 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25009)))))

(assert (= (and d!12021 c!7984) b!61091))

(assert (= (and d!12021 (not c!7984)) b!61092))

(assert (= (and d!12021 (not res!33683)) b!61093))

(declare-fun m!53807 () Bool)

(assert (=> d!12021 m!53807))

(declare-fun m!53809 () Bool)

(assert (=> b!61091 m!53809))

(declare-fun m!53811 () Bool)

(assert (=> b!61091 m!53811))

(assert (=> b!61091 m!53811))

(declare-fun m!53813 () Bool)

(assert (=> b!61091 m!53813))

(assert (=> b!61093 m!53811))

(assert (=> b!61093 m!53811))

(assert (=> b!61093 m!53813))

(assert (=> b!60881 d!12021))

(declare-fun d!12023 () Bool)

(assert (=> d!12023 (= (apply!67 (+!82 lt!25010 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))) lt!25005) (apply!67 lt!25010 lt!25005))))

(declare-fun lt!25145 () Unit!1625)

(assert (=> d!12023 (= lt!25145 (choose!318 lt!25010 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))) lt!25005))))

(declare-fun e!40159 () Bool)

(assert (=> d!12023 e!40159))

(declare-fun res!33684 () Bool)

(assert (=> d!12023 (=> (not res!33684) (not e!40159))))

(assert (=> d!12023 (= res!33684 (contains!686 lt!25010 lt!25005))))

(assert (=> d!12023 (= (addApplyDifferent!43 lt!25010 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))) lt!25005) lt!25145)))

(declare-fun b!61094 () Bool)

(assert (=> b!61094 (= e!40159 (not (= lt!25005 lt!24997)))))

(assert (= (and d!12023 res!33684) b!61094))

(assert (=> d!12023 m!53505))

(assert (=> d!12023 m!53499))

(declare-fun m!53815 () Bool)

(assert (=> d!12023 m!53815))

(assert (=> d!12023 m!53499))

(assert (=> d!12023 m!53501))

(declare-fun m!53817 () Bool)

(assert (=> d!12023 m!53817))

(assert (=> b!60881 d!12023))

(declare-fun d!12025 () Bool)

(declare-fun get!1078 (Option!131) V!2859)

(assert (=> d!12025 (= (apply!67 (+!82 lt!24998 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) lt!25007) (get!1078 (getValueByKey!125 (toList!700 (+!82 lt!24998 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25007)))))

(declare-fun bs!2647 () Bool)

(assert (= bs!2647 d!12025))

(declare-fun m!53819 () Bool)

(assert (=> bs!2647 m!53819))

(assert (=> bs!2647 m!53819))

(declare-fun m!53821 () Bool)

(assert (=> bs!2647 m!53821))

(assert (=> b!60881 d!12025))

(declare-fun d!12027 () Bool)

(assert (=> d!12027 (= (apply!67 (+!82 lt!25003 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) lt!25015) (get!1078 (getValueByKey!125 (toList!700 (+!82 lt!25003 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25015)))))

(declare-fun bs!2648 () Bool)

(assert (= bs!2648 d!12027))

(declare-fun m!53823 () Bool)

(assert (=> bs!2648 m!53823))

(assert (=> bs!2648 m!53823))

(declare-fun m!53825 () Bool)

(assert (=> bs!2648 m!53825))

(assert (=> b!60881 d!12027))

(declare-fun d!12029 () Bool)

(assert (=> d!12029 (= (apply!67 lt!25003 lt!25015) (get!1078 (getValueByKey!125 (toList!700 lt!25003) lt!25015)))))

(declare-fun bs!2649 () Bool)

(assert (= bs!2649 d!12029))

(declare-fun m!53827 () Bool)

(assert (=> bs!2649 m!53827))

(assert (=> bs!2649 m!53827))

(declare-fun m!53829 () Bool)

(assert (=> bs!2649 m!53829))

(assert (=> b!60881 d!12029))

(declare-fun d!12031 () Bool)

(assert (=> d!12031 (contains!686 (+!82 lt!25006 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))) lt!25009)))

(declare-fun lt!25148 () Unit!1625)

(declare-fun choose!319 (ListLongMap!1369 (_ BitVec 64) V!2859 (_ BitVec 64)) Unit!1625)

(assert (=> d!12031 (= lt!25148 (choose!319 lt!25006 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))) lt!25009))))

(assert (=> d!12031 (contains!686 lt!25006 lt!25009)))

(assert (=> d!12031 (= (addStillContains!43 lt!25006 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))) lt!25009) lt!25148)))

(declare-fun bs!2650 () Bool)

(assert (= bs!2650 d!12031))

(assert (=> bs!2650 m!53495))

(assert (=> bs!2650 m!53495))

(assert (=> bs!2650 m!53497))

(declare-fun m!53831 () Bool)

(assert (=> bs!2650 m!53831))

(declare-fun m!53833 () Bool)

(assert (=> bs!2650 m!53833))

(assert (=> b!60881 d!12031))

(declare-fun d!12033 () Bool)

(assert (=> d!12033 (= (apply!67 lt!25010 lt!25005) (get!1078 (getValueByKey!125 (toList!700 lt!25010) lt!25005)))))

(declare-fun bs!2651 () Bool)

(assert (= bs!2651 d!12033))

(declare-fun m!53835 () Bool)

(assert (=> bs!2651 m!53835))

(assert (=> bs!2651 m!53835))

(declare-fun m!53837 () Bool)

(assert (=> bs!2651 m!53837))

(assert (=> b!60881 d!12033))

(declare-fun d!12035 () Bool)

(declare-fun e!40160 () Bool)

(assert (=> d!12035 e!40160))

(declare-fun res!33685 () Bool)

(assert (=> d!12035 (=> (not res!33685) (not e!40160))))

(declare-fun lt!25150 () ListLongMap!1369)

(assert (=> d!12035 (= res!33685 (contains!686 lt!25150 (_1!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun lt!25151 () List!1436)

(assert (=> d!12035 (= lt!25150 (ListLongMap!1370 lt!25151))))

(declare-fun lt!25149 () Unit!1625)

(declare-fun lt!25152 () Unit!1625)

(assert (=> d!12035 (= lt!25149 lt!25152)))

(assert (=> d!12035 (= (getValueByKey!125 lt!25151 (_1!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))) (Some!130 (_2!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(assert (=> d!12035 (= lt!25152 (lemmaContainsTupThenGetReturnValue!42 lt!25151 (_1!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(assert (=> d!12035 (= lt!25151 (insertStrictlySorted!45 (toList!700 lt!25010) (_1!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(assert (=> d!12035 (= (+!82 lt!25010 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))) lt!25150)))

(declare-fun b!61096 () Bool)

(declare-fun res!33686 () Bool)

(assert (=> b!61096 (=> (not res!33686) (not e!40160))))

(assert (=> b!61096 (= res!33686 (= (getValueByKey!125 (toList!700 lt!25150) (_1!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))) (Some!130 (_2!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(declare-fun b!61097 () Bool)

(assert (=> b!61097 (= e!40160 (contains!688 (toList!700 lt!25150) (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))))

(assert (= (and d!12035 res!33685) b!61096))

(assert (= (and b!61096 res!33686) b!61097))

(declare-fun m!53839 () Bool)

(assert (=> d!12035 m!53839))

(declare-fun m!53841 () Bool)

(assert (=> d!12035 m!53841))

(declare-fun m!53843 () Bool)

(assert (=> d!12035 m!53843))

(declare-fun m!53845 () Bool)

(assert (=> d!12035 m!53845))

(declare-fun m!53847 () Bool)

(assert (=> b!61096 m!53847))

(declare-fun m!53849 () Bool)

(assert (=> b!61097 m!53849))

(assert (=> b!60881 d!12035))

(declare-fun d!12037 () Bool)

(assert (=> d!12037 (= (apply!67 (+!82 lt!25003 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) lt!25015) (apply!67 lt!25003 lt!25015))))

(declare-fun lt!25153 () Unit!1625)

(assert (=> d!12037 (= lt!25153 (choose!318 lt!25003 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992))) lt!25015))))

(declare-fun e!40161 () Bool)

(assert (=> d!12037 e!40161))

(declare-fun res!33687 () Bool)

(assert (=> d!12037 (=> (not res!33687) (not e!40161))))

(assert (=> d!12037 (= res!33687 (contains!686 lt!25003 lt!25015))))

(assert (=> d!12037 (= (addApplyDifferent!43 lt!25003 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992))) lt!25015) lt!25153)))

(declare-fun b!61098 () Bool)

(assert (=> b!61098 (= e!40161 (not (= lt!25015 lt!25001)))))

(assert (= (and d!12037 res!33687) b!61098))

(assert (=> d!12037 m!53519))

(assert (=> d!12037 m!53511))

(declare-fun m!53851 () Bool)

(assert (=> d!12037 m!53851))

(assert (=> d!12037 m!53511))

(assert (=> d!12037 m!53523))

(declare-fun m!53853 () Bool)

(assert (=> d!12037 m!53853))

(assert (=> b!60881 d!12037))

(declare-fun d!12039 () Bool)

(assert (=> d!12039 (= (apply!67 (+!82 lt!25010 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))) lt!25005) (get!1078 (getValueByKey!125 (toList!700 (+!82 lt!25010 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25005)))))

(declare-fun bs!2652 () Bool)

(assert (= bs!2652 d!12039))

(declare-fun m!53855 () Bool)

(assert (=> bs!2652 m!53855))

(assert (=> bs!2652 m!53855))

(declare-fun m!53857 () Bool)

(assert (=> bs!2652 m!53857))

(assert (=> b!60881 d!12039))

(declare-fun d!12041 () Bool)

(assert (=> d!12041 (= (apply!67 lt!24998 lt!25007) (get!1078 (getValueByKey!125 (toList!700 lt!24998) lt!25007)))))

(declare-fun bs!2653 () Bool)

(assert (= bs!2653 d!12041))

(declare-fun m!53859 () Bool)

(assert (=> bs!2653 m!53859))

(assert (=> bs!2653 m!53859))

(declare-fun m!53861 () Bool)

(assert (=> bs!2653 m!53861))

(assert (=> b!60881 d!12041))

(declare-fun d!12043 () Bool)

(declare-fun e!40162 () Bool)

(assert (=> d!12043 e!40162))

(declare-fun res!33688 () Bool)

(assert (=> d!12043 (=> (not res!33688) (not e!40162))))

(declare-fun lt!25155 () ListLongMap!1369)

(assert (=> d!12043 (= res!33688 (contains!686 lt!25155 (_1!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun lt!25156 () List!1436)

(assert (=> d!12043 (= lt!25155 (ListLongMap!1370 lt!25156))))

(declare-fun lt!25154 () Unit!1625)

(declare-fun lt!25157 () Unit!1625)

(assert (=> d!12043 (= lt!25154 lt!25157)))

(assert (=> d!12043 (= (getValueByKey!125 lt!25156 (_1!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))) (Some!130 (_2!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(assert (=> d!12043 (= lt!25157 (lemmaContainsTupThenGetReturnValue!42 lt!25156 (_1!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(assert (=> d!12043 (= lt!25156 (insertStrictlySorted!45 (toList!700 lt!25006) (_1!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(assert (=> d!12043 (= (+!82 lt!25006 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))) lt!25155)))

(declare-fun b!61099 () Bool)

(declare-fun res!33689 () Bool)

(assert (=> b!61099 (=> (not res!33689) (not e!40162))))

(assert (=> b!61099 (= res!33689 (= (getValueByKey!125 (toList!700 lt!25155) (_1!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))) (Some!130 (_2!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(declare-fun b!61100 () Bool)

(assert (=> b!61100 (= e!40162 (contains!688 (toList!700 lt!25155) (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))))

(assert (= (and d!12043 res!33688) b!61099))

(assert (= (and b!61099 res!33689) b!61100))

(declare-fun m!53863 () Bool)

(assert (=> d!12043 m!53863))

(declare-fun m!53865 () Bool)

(assert (=> d!12043 m!53865))

(declare-fun m!53867 () Bool)

(assert (=> d!12043 m!53867))

(declare-fun m!53869 () Bool)

(assert (=> d!12043 m!53869))

(declare-fun m!53871 () Bool)

(assert (=> b!61099 m!53871))

(declare-fun m!53873 () Bool)

(assert (=> b!61100 m!53873))

(assert (=> b!60881 d!12043))

(declare-fun d!12045 () Bool)

(assert (=> d!12045 (= (inRange!0 (ite c!7902 (ite c!7907 (index!3037 lt!24944) (ite c!7903 (index!3036 lt!24934) (index!3039 lt!24934))) (ite c!7908 (index!3037 lt!24931) (ite c!7900 (index!3036 lt!24928) (index!3039 lt!24928)))) (mask!5963 newMap!16)) (and (bvsge (ite c!7902 (ite c!7907 (index!3037 lt!24944) (ite c!7903 (index!3036 lt!24934) (index!3039 lt!24934))) (ite c!7908 (index!3037 lt!24931) (ite c!7900 (index!3036 lt!24928) (index!3039 lt!24928)))) #b00000000000000000000000000000000) (bvslt (ite c!7902 (ite c!7907 (index!3037 lt!24944) (ite c!7903 (index!3036 lt!24934) (index!3039 lt!24934))) (ite c!7908 (index!3037 lt!24931) (ite c!7900 (index!3036 lt!24928) (index!3039 lt!24928)))) (bvadd (mask!5963 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4625 d!12045))

(assert (=> d!11945 d!11949))

(declare-fun d!12047 () Bool)

(assert (=> d!12047 (not (arrayContainsKey!0 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> d!12047 true))

(declare-fun _$68!34 () Unit!1625)

(assert (=> d!12047 (= (choose!68 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (Cons!1433 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) Nil!1434)) _$68!34)))

(declare-fun bs!2654 () Bool)

(assert (= bs!2654 d!12047))

(assert (=> bs!2654 m!53313))

(assert (=> bs!2654 m!53351))

(assert (=> d!11945 d!12047))

(declare-fun d!12049 () Bool)

(assert (=> d!12049 (= (validKeyInArray!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (and (not (= (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!60693 d!12049))

(assert (=> b!60868 d!11975))

(declare-fun d!12051 () Bool)

(declare-fun res!33690 () Bool)

(declare-fun e!40163 () Bool)

(assert (=> d!12051 (=> (not res!33690) (not e!40163))))

(assert (=> d!12051 (= res!33690 (simpleValid!43 (_2!1026 lt!24941)))))

(assert (=> d!12051 (= (valid!260 (_2!1026 lt!24941)) e!40163)))

(declare-fun b!61101 () Bool)

(declare-fun res!33691 () Bool)

(assert (=> b!61101 (=> (not res!33691) (not e!40163))))

(assert (=> b!61101 (= res!33691 (= (arrayCountValidKeys!0 (_keys!3695 (_2!1026 lt!24941)) #b00000000000000000000000000000000 (size!2024 (_keys!3695 (_2!1026 lt!24941)))) (_size!364 (_2!1026 lt!24941))))))

(declare-fun b!61102 () Bool)

(declare-fun res!33692 () Bool)

(assert (=> b!61102 (=> (not res!33692) (not e!40163))))

(assert (=> b!61102 (= res!33692 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3695 (_2!1026 lt!24941)) (mask!5963 (_2!1026 lt!24941))))))

(declare-fun b!61103 () Bool)

(assert (=> b!61103 (= e!40163 (arrayNoDuplicates!0 (_keys!3695 (_2!1026 lt!24941)) #b00000000000000000000000000000000 Nil!1434))))

(assert (= (and d!12051 res!33690) b!61101))

(assert (= (and b!61101 res!33691) b!61102))

(assert (= (and b!61102 res!33692) b!61103))

(declare-fun m!53875 () Bool)

(assert (=> d!12051 m!53875))

(declare-fun m!53877 () Bool)

(assert (=> b!61101 m!53877))

(declare-fun m!53879 () Bool)

(assert (=> b!61102 m!53879))

(declare-fun m!53881 () Bool)

(assert (=> b!61103 m!53881))

(assert (=> d!11961 d!12051))

(assert (=> d!11961 d!11969))

(declare-fun d!12053 () Bool)

(declare-fun e!40164 () Bool)

(assert (=> d!12053 e!40164))

(declare-fun res!33693 () Bool)

(assert (=> d!12053 (=> res!33693 e!40164)))

(declare-fun lt!25161 () Bool)

(assert (=> d!12053 (= res!33693 (not lt!25161))))

(declare-fun lt!25160 () Bool)

(assert (=> d!12053 (= lt!25161 lt!25160)))

(declare-fun lt!25159 () Unit!1625)

(declare-fun e!40165 () Unit!1625)

(assert (=> d!12053 (= lt!25159 e!40165)))

(declare-fun c!7985 () Bool)

(assert (=> d!12053 (= c!7985 lt!25160)))

(assert (=> d!12053 (= lt!25160 (containsKey!129 (toList!700 lt!24995) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12053 (= (contains!686 lt!24995 #b0000000000000000000000000000000000000000000000000000000000000000) lt!25161)))

(declare-fun b!61104 () Bool)

(declare-fun lt!25158 () Unit!1625)

(assert (=> b!61104 (= e!40165 lt!25158)))

(assert (=> b!61104 (= lt!25158 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 lt!24995) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61104 (isDefined!78 (getValueByKey!125 (toList!700 lt!24995) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61105 () Bool)

(declare-fun Unit!1639 () Unit!1625)

(assert (=> b!61105 (= e!40165 Unit!1639)))

(declare-fun b!61106 () Bool)

(assert (=> b!61106 (= e!40164 (isDefined!78 (getValueByKey!125 (toList!700 lt!24995) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12053 c!7985) b!61104))

(assert (= (and d!12053 (not c!7985)) b!61105))

(assert (= (and d!12053 (not res!33693)) b!61106))

(declare-fun m!53883 () Bool)

(assert (=> d!12053 m!53883))

(declare-fun m!53885 () Bool)

(assert (=> b!61104 m!53885))

(declare-fun m!53887 () Bool)

(assert (=> b!61104 m!53887))

(assert (=> b!61104 m!53887))

(declare-fun m!53889 () Bool)

(assert (=> b!61104 m!53889))

(assert (=> b!61106 m!53887))

(assert (=> b!61106 m!53887))

(assert (=> b!61106 m!53889))

(assert (=> bm!4656 d!12053))

(assert (=> bm!4655 d!12015))

(declare-fun d!12055 () Bool)

(assert (=> d!12055 (= (apply!67 lt!24995 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1078 (getValueByKey!125 (toList!700 lt!24995) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!2655 () Bool)

(assert (= bs!2655 d!12055))

(assert (=> bs!2655 m!53407))

(assert (=> bs!2655 m!53599))

(assert (=> bs!2655 m!53599))

(declare-fun m!53891 () Bool)

(assert (=> bs!2655 m!53891))

(assert (=> b!60880 d!12055))

(declare-fun d!12057 () Bool)

(declare-fun c!7986 () Bool)

(assert (=> d!12057 (= c!7986 ((_ is ValueCellFull!861) (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!40166 () V!2859)

(assert (=> d!12057 (= (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!40166)))

(declare-fun b!61107 () Bool)

(assert (=> b!61107 (= e!40166 (get!1076 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!61108 () Bool)

(assert (=> b!61108 (= e!40166 (get!1077 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12057 c!7986) b!61107))

(assert (= (and d!12057 (not c!7986)) b!61108))

(assert (=> b!61107 m!53531))

(assert (=> b!61107 m!53335))

(declare-fun m!53893 () Bool)

(assert (=> b!61107 m!53893))

(assert (=> b!61108 m!53531))

(assert (=> b!61108 m!53335))

(declare-fun m!53895 () Bool)

(assert (=> b!61108 m!53895))

(assert (=> b!60880 d!12057))

(declare-fun d!12059 () Bool)

(assert (=> d!12059 (isDefined!78 (getValueByKey!125 (toList!700 lt!24826) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(declare-fun lt!25164 () Unit!1625)

(declare-fun choose!320 (List!1436 (_ BitVec 64)) Unit!1625)

(assert (=> d!12059 (= lt!25164 (choose!320 (toList!700 lt!24826) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(declare-fun e!40169 () Bool)

(assert (=> d!12059 e!40169))

(declare-fun res!33696 () Bool)

(assert (=> d!12059 (=> (not res!33696) (not e!40169))))

(declare-fun isStrictlySorted!285 (List!1436) Bool)

(assert (=> d!12059 (= res!33696 (isStrictlySorted!285 (toList!700 lt!24826)))))

(assert (=> d!12059 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 lt!24826) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) lt!25164)))

(declare-fun b!61111 () Bool)

(assert (=> b!61111 (= e!40169 (containsKey!129 (toList!700 lt!24826) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(assert (= (and d!12059 res!33696) b!61111))

(assert (=> d!12059 m!53313))

(assert (=> d!12059 m!53423))

(assert (=> d!12059 m!53423))

(assert (=> d!12059 m!53425))

(assert (=> d!12059 m!53313))

(declare-fun m!53897 () Bool)

(assert (=> d!12059 m!53897))

(declare-fun m!53899 () Bool)

(assert (=> d!12059 m!53899))

(assert (=> b!61111 m!53313))

(assert (=> b!61111 m!53419))

(assert (=> b!60703 d!12059))

(declare-fun d!12061 () Bool)

(declare-fun isEmpty!297 (Option!131) Bool)

(assert (=> d!12061 (= (isDefined!78 (getValueByKey!125 (toList!700 lt!24826) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355))) (not (isEmpty!297 (getValueByKey!125 (toList!700 lt!24826) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))))

(declare-fun bs!2656 () Bool)

(assert (= bs!2656 d!12061))

(assert (=> bs!2656 m!53423))

(declare-fun m!53901 () Bool)

(assert (=> bs!2656 m!53901))

(assert (=> b!60703 d!12061))

(declare-fun b!61120 () Bool)

(declare-fun e!40174 () Option!131)

(assert (=> b!61120 (= e!40174 (Some!130 (_2!1027 (h!2014 (toList!700 lt!24826)))))))

(declare-fun d!12063 () Bool)

(declare-fun c!7991 () Bool)

(assert (=> d!12063 (= c!7991 (and ((_ is Cons!1432) (toList!700 lt!24826)) (= (_1!1027 (h!2014 (toList!700 lt!24826))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355))))))

(assert (=> d!12063 (= (getValueByKey!125 (toList!700 lt!24826) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) e!40174)))

(declare-fun b!61121 () Bool)

(declare-fun e!40175 () Option!131)

(assert (=> b!61121 (= e!40174 e!40175)))

(declare-fun c!7992 () Bool)

(assert (=> b!61121 (= c!7992 (and ((_ is Cons!1432) (toList!700 lt!24826)) (not (= (_1!1027 (h!2014 (toList!700 lt!24826))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))))

(declare-fun b!61123 () Bool)

(assert (=> b!61123 (= e!40175 None!129)))

(declare-fun b!61122 () Bool)

(assert (=> b!61122 (= e!40175 (getValueByKey!125 (t!4806 (toList!700 lt!24826)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(assert (= (and d!12063 c!7991) b!61120))

(assert (= (and d!12063 (not c!7991)) b!61121))

(assert (= (and b!61121 c!7992) b!61122))

(assert (= (and b!61121 (not c!7992)) b!61123))

(assert (=> b!61122 m!53313))

(declare-fun m!53903 () Bool)

(assert (=> b!61122 m!53903))

(assert (=> b!60703 d!12063))

(assert (=> b!60705 d!12061))

(assert (=> b!60705 d!12063))

(declare-fun d!12065 () Bool)

(declare-fun e!40176 () Bool)

(assert (=> d!12065 e!40176))

(declare-fun res!33697 () Bool)

(assert (=> d!12065 (=> (not res!33697) (not e!40176))))

(declare-fun lt!25166 () ListLongMap!1369)

(assert (=> d!12065 (= res!33697 (contains!686 lt!25166 (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!25167 () List!1436)

(assert (=> d!12065 (= lt!25166 (ListLongMap!1370 lt!25167))))

(declare-fun lt!25165 () Unit!1625)

(declare-fun lt!25168 () Unit!1625)

(assert (=> d!12065 (= lt!25165 lt!25168)))

(assert (=> d!12065 (= (getValueByKey!125 lt!25167 (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12065 (= lt!25168 (lemmaContainsTupThenGetReturnValue!42 lt!25167 (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12065 (= lt!25167 (insertStrictlySorted!45 (toList!700 call!4626) (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12065 (= (+!82 call!4626 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!25166)))

(declare-fun b!61124 () Bool)

(declare-fun res!33698 () Bool)

(assert (=> b!61124 (=> (not res!33698) (not e!40176))))

(assert (=> b!61124 (= res!33698 (= (getValueByKey!125 (toList!700 lt!25166) (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!61125 () Bool)

(assert (=> b!61125 (= e!40176 (contains!688 (toList!700 lt!25166) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12065 res!33697) b!61124))

(assert (= (and b!61124 res!33698) b!61125))

(declare-fun m!53905 () Bool)

(assert (=> d!12065 m!53905))

(declare-fun m!53907 () Bool)

(assert (=> d!12065 m!53907))

(declare-fun m!53909 () Bool)

(assert (=> d!12065 m!53909))

(declare-fun m!53911 () Bool)

(assert (=> d!12065 m!53911))

(declare-fun m!53913 () Bool)

(assert (=> b!61124 m!53913))

(declare-fun m!53915 () Bool)

(assert (=> b!61125 m!53915))

(assert (=> b!60806 d!12065))

(declare-fun b!61126 () Bool)

(declare-fun e!40183 () Bool)

(assert (=> b!61126 (= e!40183 (validKeyInArray!0 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61127 () Bool)

(declare-fun res!33699 () Bool)

(declare-fun e!40178 () Bool)

(assert (=> b!61127 (=> (not res!33699) (not e!40178))))

(declare-fun e!40181 () Bool)

(assert (=> b!61127 (= res!33699 e!40181)))

(declare-fun res!33707 () Bool)

(assert (=> b!61127 (=> res!33707 e!40181)))

(declare-fun e!40177 () Bool)

(assert (=> b!61127 (= res!33707 (not e!40177))))

(declare-fun res!33703 () Bool)

(assert (=> b!61127 (=> (not res!33703) (not e!40177))))

(assert (=> b!61127 (= res!33703 (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(declare-fun b!61128 () Bool)

(declare-fun e!40185 () Unit!1625)

(declare-fun Unit!1640 () Unit!1625)

(assert (=> b!61128 (= e!40185 Unit!1640)))

(declare-fun b!61129 () Bool)

(declare-fun c!7996 () Bool)

(assert (=> b!61129 (= c!7996 (and (not (= (bvand (ite c!7909 (ite c!7899 (extraKeys!1950 newMap!16) lt!24937) (extraKeys!1950 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite c!7909 (ite c!7899 (extraKeys!1950 newMap!16) lt!24937) (extraKeys!1950 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!40182 () ListLongMap!1369)

(declare-fun e!40184 () ListLongMap!1369)

(assert (=> b!61129 (= e!40182 e!40184)))

(declare-fun call!4695 () ListLongMap!1369)

(declare-fun b!61130 () Bool)

(declare-fun e!40189 () ListLongMap!1369)

(assert (=> b!61130 (= e!40189 (+!82 call!4695 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))))))

(declare-fun c!7995 () Bool)

(declare-fun call!4689 () ListLongMap!1369)

(declare-fun call!4694 () ListLongMap!1369)

(declare-fun c!7994 () Bool)

(declare-fun bm!4686 () Bool)

(declare-fun call!4693 () ListLongMap!1369)

(assert (=> bm!4686 (= call!4695 (+!82 (ite c!7994 call!4689 (ite c!7995 call!4694 call!4693)) (ite (or c!7994 c!7995) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))))))

(declare-fun b!61131 () Bool)

(declare-fun res!33702 () Bool)

(assert (=> b!61131 (=> (not res!33702) (not e!40178))))

(declare-fun e!40187 () Bool)

(assert (=> b!61131 (= res!33702 e!40187)))

(declare-fun c!7997 () Bool)

(assert (=> b!61131 (= c!7997 (not (= (bvand (ite c!7909 (ite c!7899 (extraKeys!1950 newMap!16) lt!24937) (extraKeys!1950 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!61132 () Bool)

(declare-fun e!40180 () Bool)

(declare-fun lt!25169 () ListLongMap!1369)

(assert (=> b!61132 (= e!40180 (= (apply!67 lt!25169 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1981 newMap!16)))))

(declare-fun bm!4687 () Bool)

(assert (=> bm!4687 (= call!4693 call!4694)))

(declare-fun b!61133 () Bool)

(assert (=> b!61133 (= e!40187 e!40180)))

(declare-fun res!33700 () Bool)

(declare-fun call!4691 () Bool)

(assert (=> b!61133 (= res!33700 call!4691)))

(assert (=> b!61133 (=> (not res!33700) (not e!40180))))

(declare-fun e!40186 () Bool)

(declare-fun b!61134 () Bool)

(assert (=> b!61134 (= e!40186 (= (apply!67 lt!25169 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))))

(declare-fun b!61135 () Bool)

(assert (=> b!61135 (= e!40184 call!4693)))

(declare-fun bm!4689 () Bool)

(assert (=> bm!4689 (= call!4689 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (ite (or c!7909 c!7902) (_values!2050 newMap!16) lt!24925) (mask!5963 newMap!16) (ite c!7909 (ite c!7899 (extraKeys!1950 newMap!16) lt!24937) (extraKeys!1950 newMap!16)) (zeroValue!1981 newMap!16) (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun b!61136 () Bool)

(declare-fun e!40179 () Bool)

(assert (=> b!61136 (= e!40181 e!40179)))

(declare-fun res!33701 () Bool)

(assert (=> b!61136 (=> (not res!33701) (not e!40179))))

(assert (=> b!61136 (= res!33701 (contains!686 lt!25169 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61136 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(declare-fun bm!4690 () Bool)

(assert (=> bm!4690 (= call!4691 (contains!686 lt!25169 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61137 () Bool)

(declare-fun call!4692 () ListLongMap!1369)

(assert (=> b!61137 (= e!40184 call!4692)))

(declare-fun b!61138 () Bool)

(assert (=> b!61138 (= e!40179 (= (apply!67 lt!25169 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) (get!1075 (select (arr!1794 (ite (or c!7909 c!7902) (_values!2050 newMap!16) lt!24925)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!61138 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2025 (ite (or c!7909 c!7902) (_values!2050 newMap!16) lt!24925))))))

(assert (=> b!61138 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(declare-fun bm!4691 () Bool)

(assert (=> bm!4691 (= call!4692 call!4695)))

(declare-fun d!12067 () Bool)

(assert (=> d!12067 e!40178))

(declare-fun res!33704 () Bool)

(assert (=> d!12067 (=> (not res!33704) (not e!40178))))

(assert (=> d!12067 (= res!33704 (or (bvsge #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))))

(declare-fun lt!25185 () ListLongMap!1369)

(assert (=> d!12067 (= lt!25169 lt!25185)))

(declare-fun lt!25178 () Unit!1625)

(assert (=> d!12067 (= lt!25178 e!40185)))

(declare-fun c!7998 () Bool)

(assert (=> d!12067 (= c!7998 e!40183)))

(declare-fun res!33706 () Bool)

(assert (=> d!12067 (=> (not res!33706) (not e!40183))))

(assert (=> d!12067 (= res!33706 (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(assert (=> d!12067 (= lt!25185 e!40189)))

(assert (=> d!12067 (= c!7994 (and (not (= (bvand (ite c!7909 (ite c!7899 (extraKeys!1950 newMap!16) lt!24937) (extraKeys!1950 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite c!7909 (ite c!7899 (extraKeys!1950 newMap!16) lt!24937) (extraKeys!1950 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12067 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12067 (= (getCurrentListMap!405 (_keys!3695 newMap!16) (ite (or c!7909 c!7902) (_values!2050 newMap!16) lt!24925) (mask!5963 newMap!16) (ite c!7909 (ite c!7899 (extraKeys!1950 newMap!16) lt!24937) (extraKeys!1950 newMap!16)) (zeroValue!1981 newMap!16) (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) lt!25169)))

(declare-fun bm!4688 () Bool)

(assert (=> bm!4688 (= call!4694 call!4689)))

(declare-fun b!61139 () Bool)

(declare-fun lt!25188 () Unit!1625)

(assert (=> b!61139 (= e!40185 lt!25188)))

(declare-fun lt!25180 () ListLongMap!1369)

(assert (=> b!61139 (= lt!25180 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (ite (or c!7909 c!7902) (_values!2050 newMap!16) lt!24925) (mask!5963 newMap!16) (ite c!7909 (ite c!7899 (extraKeys!1950 newMap!16) lt!24937) (extraKeys!1950 newMap!16)) (zeroValue!1981 newMap!16) (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25170 () (_ BitVec 64))

(assert (=> b!61139 (= lt!25170 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25183 () (_ BitVec 64))

(assert (=> b!61139 (= lt!25183 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25190 () Unit!1625)

(assert (=> b!61139 (= lt!25190 (addStillContains!43 lt!25180 lt!25170 (zeroValue!1981 newMap!16) lt!25183))))

(assert (=> b!61139 (contains!686 (+!82 lt!25180 (tuple2!2033 lt!25170 (zeroValue!1981 newMap!16))) lt!25183)))

(declare-fun lt!25176 () Unit!1625)

(assert (=> b!61139 (= lt!25176 lt!25190)))

(declare-fun lt!25177 () ListLongMap!1369)

(assert (=> b!61139 (= lt!25177 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (ite (or c!7909 c!7902) (_values!2050 newMap!16) lt!24925) (mask!5963 newMap!16) (ite c!7909 (ite c!7899 (extraKeys!1950 newMap!16) lt!24937) (extraKeys!1950 newMap!16)) (zeroValue!1981 newMap!16) (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25175 () (_ BitVec 64))

(assert (=> b!61139 (= lt!25175 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25189 () (_ BitVec 64))

(assert (=> b!61139 (= lt!25189 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25174 () Unit!1625)

(assert (=> b!61139 (= lt!25174 (addApplyDifferent!43 lt!25177 lt!25175 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)) lt!25189))))

(assert (=> b!61139 (= (apply!67 (+!82 lt!25177 (tuple2!2033 lt!25175 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))) lt!25189) (apply!67 lt!25177 lt!25189))))

(declare-fun lt!25173 () Unit!1625)

(assert (=> b!61139 (= lt!25173 lt!25174)))

(declare-fun lt!25184 () ListLongMap!1369)

(assert (=> b!61139 (= lt!25184 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (ite (or c!7909 c!7902) (_values!2050 newMap!16) lt!24925) (mask!5963 newMap!16) (ite c!7909 (ite c!7899 (extraKeys!1950 newMap!16) lt!24937) (extraKeys!1950 newMap!16)) (zeroValue!1981 newMap!16) (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25171 () (_ BitVec 64))

(assert (=> b!61139 (= lt!25171 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25179 () (_ BitVec 64))

(assert (=> b!61139 (= lt!25179 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25186 () Unit!1625)

(assert (=> b!61139 (= lt!25186 (addApplyDifferent!43 lt!25184 lt!25171 (zeroValue!1981 newMap!16) lt!25179))))

(assert (=> b!61139 (= (apply!67 (+!82 lt!25184 (tuple2!2033 lt!25171 (zeroValue!1981 newMap!16))) lt!25179) (apply!67 lt!25184 lt!25179))))

(declare-fun lt!25187 () Unit!1625)

(assert (=> b!61139 (= lt!25187 lt!25186)))

(declare-fun lt!25172 () ListLongMap!1369)

(assert (=> b!61139 (= lt!25172 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (ite (or c!7909 c!7902) (_values!2050 newMap!16) lt!24925) (mask!5963 newMap!16) (ite c!7909 (ite c!7899 (extraKeys!1950 newMap!16) lt!24937) (extraKeys!1950 newMap!16)) (zeroValue!1981 newMap!16) (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25182 () (_ BitVec 64))

(assert (=> b!61139 (= lt!25182 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25181 () (_ BitVec 64))

(assert (=> b!61139 (= lt!25181 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!61139 (= lt!25188 (addApplyDifferent!43 lt!25172 lt!25182 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)) lt!25181))))

(assert (=> b!61139 (= (apply!67 (+!82 lt!25172 (tuple2!2033 lt!25182 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))) lt!25181) (apply!67 lt!25172 lt!25181))))

(declare-fun b!61140 () Bool)

(declare-fun e!40188 () Bool)

(declare-fun call!4690 () Bool)

(assert (=> b!61140 (= e!40188 (not call!4690))))

(declare-fun b!61141 () Bool)

(assert (=> b!61141 (= e!40182 call!4692)))

(declare-fun b!61142 () Bool)

(assert (=> b!61142 (= e!40177 (validKeyInArray!0 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61143 () Bool)

(assert (=> b!61143 (= e!40187 (not call!4691))))

(declare-fun bm!4692 () Bool)

(assert (=> bm!4692 (= call!4690 (contains!686 lt!25169 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61144 () Bool)

(assert (=> b!61144 (= e!40188 e!40186)))

(declare-fun res!33705 () Bool)

(assert (=> b!61144 (= res!33705 call!4690)))

(assert (=> b!61144 (=> (not res!33705) (not e!40186))))

(declare-fun b!61145 () Bool)

(assert (=> b!61145 (= e!40189 e!40182)))

(assert (=> b!61145 (= c!7995 (and (not (= (bvand (ite c!7909 (ite c!7899 (extraKeys!1950 newMap!16) lt!24937) (extraKeys!1950 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite c!7909 (ite c!7899 (extraKeys!1950 newMap!16) lt!24937) (extraKeys!1950 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!61146 () Bool)

(assert (=> b!61146 (= e!40178 e!40188)))

(declare-fun c!7993 () Bool)

(assert (=> b!61146 (= c!7993 (not (= (bvand (ite c!7909 (ite c!7899 (extraKeys!1950 newMap!16) lt!24937) (extraKeys!1950 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!12067 c!7994) b!61130))

(assert (= (and d!12067 (not c!7994)) b!61145))

(assert (= (and b!61145 c!7995) b!61141))

(assert (= (and b!61145 (not c!7995)) b!61129))

(assert (= (and b!61129 c!7996) b!61137))

(assert (= (and b!61129 (not c!7996)) b!61135))

(assert (= (or b!61137 b!61135) bm!4687))

(assert (= (or b!61141 bm!4687) bm!4688))

(assert (= (or b!61141 b!61137) bm!4691))

(assert (= (or b!61130 bm!4688) bm!4689))

(assert (= (or b!61130 bm!4691) bm!4686))

(assert (= (and d!12067 res!33706) b!61126))

(assert (= (and d!12067 c!7998) b!61139))

(assert (= (and d!12067 (not c!7998)) b!61128))

(assert (= (and d!12067 res!33704) b!61127))

(assert (= (and b!61127 res!33703) b!61142))

(assert (= (and b!61127 (not res!33707)) b!61136))

(assert (= (and b!61136 res!33701) b!61138))

(assert (= (and b!61127 res!33699) b!61131))

(assert (= (and b!61131 c!7997) b!61133))

(assert (= (and b!61131 (not c!7997)) b!61143))

(assert (= (and b!61133 res!33700) b!61132))

(assert (= (or b!61133 b!61143) bm!4690))

(assert (= (and b!61131 res!33702) b!61146))

(assert (= (and b!61146 c!7993) b!61144))

(assert (= (and b!61146 (not c!7993)) b!61140))

(assert (= (and b!61144 res!33705) b!61134))

(assert (= (or b!61144 b!61140) bm!4692))

(declare-fun b_lambda!2703 () Bool)

(assert (=> (not b_lambda!2703) (not b!61138)))

(assert (=> b!61138 t!4813))

(declare-fun b_and!3727 () Bool)

(assert (= b_and!3723 (and (=> t!4813 result!2427) b_and!3727)))

(assert (=> b!61138 t!4815))

(declare-fun b_and!3729 () Bool)

(assert (= b_and!3725 (and (=> t!4815 result!2429) b_and!3729)))

(declare-fun m!53917 () Bool)

(assert (=> bm!4686 m!53917))

(declare-fun m!53919 () Bool)

(assert (=> bm!4689 m!53919))

(declare-fun m!53921 () Bool)

(assert (=> b!61139 m!53921))

(declare-fun m!53923 () Bool)

(assert (=> b!61139 m!53923))

(declare-fun m!53925 () Bool)

(assert (=> b!61139 m!53925))

(declare-fun m!53927 () Bool)

(assert (=> b!61139 m!53927))

(declare-fun m!53929 () Bool)

(assert (=> b!61139 m!53929))

(assert (=> b!61139 m!53617))

(declare-fun m!53931 () Bool)

(assert (=> b!61139 m!53931))

(declare-fun m!53933 () Bool)

(assert (=> b!61139 m!53933))

(declare-fun m!53935 () Bool)

(assert (=> b!61139 m!53935))

(assert (=> b!61139 m!53919))

(assert (=> b!61139 m!53921))

(declare-fun m!53937 () Bool)

(assert (=> b!61139 m!53937))

(assert (=> b!61139 m!53925))

(declare-fun m!53939 () Bool)

(assert (=> b!61139 m!53939))

(assert (=> b!61139 m!53933))

(declare-fun m!53941 () Bool)

(assert (=> b!61139 m!53941))

(declare-fun m!53943 () Bool)

(assert (=> b!61139 m!53943))

(declare-fun m!53945 () Bool)

(assert (=> b!61139 m!53945))

(declare-fun m!53947 () Bool)

(assert (=> b!61139 m!53947))

(assert (=> b!61139 m!53937))

(declare-fun m!53949 () Bool)

(assert (=> b!61139 m!53949))

(declare-fun m!53951 () Bool)

(assert (=> b!61132 m!53951))

(assert (=> b!61142 m!53617))

(assert (=> b!61142 m!53617))

(assert (=> b!61142 m!53641))

(assert (=> b!61138 m!53617))

(declare-fun m!53953 () Bool)

(assert (=> b!61138 m!53953))

(declare-fun m!53955 () Bool)

(assert (=> b!61138 m!53955))

(assert (=> b!61138 m!53955))

(assert (=> b!61138 m!53647))

(declare-fun m!53957 () Bool)

(assert (=> b!61138 m!53957))

(assert (=> b!61138 m!53617))

(assert (=> b!61138 m!53647))

(assert (=> b!61136 m!53617))

(assert (=> b!61136 m!53617))

(declare-fun m!53959 () Bool)

(assert (=> b!61136 m!53959))

(declare-fun m!53961 () Bool)

(assert (=> b!61134 m!53961))

(assert (=> b!61126 m!53617))

(assert (=> b!61126 m!53617))

(assert (=> b!61126 m!53641))

(declare-fun m!53963 () Bool)

(assert (=> b!61130 m!53963))

(declare-fun m!53965 () Bool)

(assert (=> bm!4690 m!53965))

(assert (=> d!12067 m!53559))

(declare-fun m!53967 () Bool)

(assert (=> bm!4692 m!53967))

(assert (=> bm!4637 d!12067))

(declare-fun d!12069 () Bool)

(declare-fun e!40192 () Bool)

(assert (=> d!12069 e!40192))

(declare-fun res!33713 () Bool)

(assert (=> d!12069 (=> (not res!33713) (not e!40192))))

(declare-fun lt!25195 () SeekEntryResult!228)

(assert (=> d!12069 (= res!33713 ((_ is Found!228) lt!25195))))

(assert (=> d!12069 (= lt!25195 (seekEntryOrOpen!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (_keys!3695 newMap!16) (mask!5963 newMap!16)))))

(declare-fun lt!25196 () Unit!1625)

(declare-fun choose!321 (array!3747 array!3749 (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 (_ BitVec 64) Int) Unit!1625)

(assert (=> d!12069 (= lt!25196 (choose!321 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (defaultEntry!2067 newMap!16)))))

(assert (=> d!12069 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12069 (= (lemmaInListMapThenSeekEntryOrOpenFindsIt!16 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (defaultEntry!2067 newMap!16)) lt!25196)))

(declare-fun b!61151 () Bool)

(declare-fun res!33712 () Bool)

(assert (=> b!61151 (=> (not res!33712) (not e!40192))))

(assert (=> b!61151 (= res!33712 (inRange!0 (index!3037 lt!25195) (mask!5963 newMap!16)))))

(declare-fun b!61152 () Bool)

(assert (=> b!61152 (= e!40192 (= (select (arr!1793 (_keys!3695 newMap!16)) (index!3037 lt!25195)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(assert (=> b!61152 (and (bvsge (index!3037 lt!25195) #b00000000000000000000000000000000) (bvslt (index!3037 lt!25195) (size!2024 (_keys!3695 newMap!16))))))

(assert (= (and d!12069 res!33713) b!61151))

(assert (= (and b!61151 res!33712) b!61152))

(assert (=> d!12069 m!53313))

(assert (=> d!12069 m!53429))

(assert (=> d!12069 m!53313))

(declare-fun m!53969 () Bool)

(assert (=> d!12069 m!53969))

(assert (=> d!12069 m!53559))

(declare-fun m!53971 () Bool)

(assert (=> b!61151 m!53971))

(declare-fun m!53973 () Bool)

(assert (=> b!61152 m!53973))

(assert (=> bm!4628 d!12069))

(declare-fun d!12071 () Bool)

(assert (=> d!12071 (= (apply!67 lt!24995 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1078 (getValueByKey!125 (toList!700 lt!24995) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2657 () Bool)

(assert (= bs!2657 d!12071))

(declare-fun m!53975 () Bool)

(assert (=> bs!2657 m!53975))

(assert (=> bs!2657 m!53975))

(declare-fun m!53977 () Bool)

(assert (=> bs!2657 m!53977))

(assert (=> b!60876 d!12071))

(declare-fun b!61162 () Bool)

(declare-fun res!33722 () Bool)

(declare-fun e!40195 () Bool)

(assert (=> b!61162 (=> (not res!33722) (not e!40195))))

(declare-fun size!2028 (LongMapFixedSize!630) (_ BitVec 32))

(assert (=> b!61162 (= res!33722 (bvsge (size!2028 newMap!16) (_size!364 newMap!16)))))

(declare-fun b!61164 () Bool)

(assert (=> b!61164 (= e!40195 (and (bvsge (extraKeys!1950 newMap!16) #b00000000000000000000000000000000) (bvsle (extraKeys!1950 newMap!16) #b00000000000000000000000000000011) (bvsge (_vacant!364 newMap!16) #b00000000000000000000000000000000)))))

(declare-fun d!12073 () Bool)

(declare-fun res!33724 () Bool)

(assert (=> d!12073 (=> (not res!33724) (not e!40195))))

(assert (=> d!12073 (= res!33724 (validMask!0 (mask!5963 newMap!16)))))

(assert (=> d!12073 (= (simpleValid!43 newMap!16) e!40195)))

(declare-fun b!61163 () Bool)

(declare-fun res!33723 () Bool)

(assert (=> b!61163 (=> (not res!33723) (not e!40195))))

(assert (=> b!61163 (= res!33723 (= (size!2028 newMap!16) (bvadd (_size!364 newMap!16) (bvsdiv (bvadd (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!61161 () Bool)

(declare-fun res!33725 () Bool)

(assert (=> b!61161 (=> (not res!33725) (not e!40195))))

(assert (=> b!61161 (= res!33725 (and (= (size!2025 (_values!2050 newMap!16)) (bvadd (mask!5963 newMap!16) #b00000000000000000000000000000001)) (= (size!2024 (_keys!3695 newMap!16)) (size!2025 (_values!2050 newMap!16))) (bvsge (_size!364 newMap!16) #b00000000000000000000000000000000) (bvsle (_size!364 newMap!16) (bvadd (mask!5963 newMap!16) #b00000000000000000000000000000001))))))

(assert (= (and d!12073 res!33724) b!61161))

(assert (= (and b!61161 res!33725) b!61162))

(assert (= (and b!61162 res!33722) b!61163))

(assert (= (and b!61163 res!33723) b!61164))

(declare-fun m!53979 () Bool)

(assert (=> b!61162 m!53979))

(assert (=> d!12073 m!53559))

(assert (=> b!61163 m!53979))

(assert (=> d!11969 d!12073))

(declare-fun d!12075 () Bool)

(assert (=> d!12075 (= (+!82 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) lt!24940 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25199 () Unit!1625)

(declare-fun choose!322 (array!3747 array!3749 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 V!2859 Int) Unit!1625)

(assert (=> d!12075 (= lt!25199 (choose!322 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) lt!24940 (zeroValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1981 newMap!16) (defaultEntry!2067 newMap!16)))))

(assert (=> d!12075 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12075 (= (lemmaChangeZeroKeyThenAddPairToListMap!16 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) lt!24940 (zeroValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1981 newMap!16) (defaultEntry!2067 newMap!16)) lt!25199)))

(declare-fun bs!2658 () Bool)

(assert (= bs!2658 d!12075))

(assert (=> bs!2658 m!53489))

(assert (=> bs!2658 m!53559))

(assert (=> bs!2658 m!53489))

(declare-fun m!53981 () Bool)

(assert (=> bs!2658 m!53981))

(assert (=> bs!2658 m!53337))

(declare-fun m!53983 () Bool)

(assert (=> bs!2658 m!53983))

(assert (=> bs!2658 m!53337))

(declare-fun m!53985 () Bool)

(assert (=> bs!2658 m!53985))

(assert (=> b!60800 d!12075))

(declare-fun b!61165 () Bool)

(declare-fun e!40199 () Bool)

(declare-fun call!4696 () Bool)

(assert (=> b!61165 (= e!40199 call!4696)))

(declare-fun b!61166 () Bool)

(declare-fun e!40197 () Bool)

(declare-fun e!40196 () Bool)

(assert (=> b!61166 (= e!40197 e!40196)))

(declare-fun res!33727 () Bool)

(assert (=> b!61166 (=> (not res!33727) (not e!40196))))

(declare-fun e!40198 () Bool)

(assert (=> b!61166 (= res!33727 (not e!40198))))

(declare-fun res!33728 () Bool)

(assert (=> b!61166 (=> (not res!33728) (not e!40198))))

(assert (=> b!61166 (= res!33728 (validKeyInArray!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!61167 () Bool)

(assert (=> b!61167 (= e!40196 e!40199)))

(declare-fun c!7999 () Bool)

(assert (=> b!61167 (= c!7999 (validKeyInArray!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!61168 () Bool)

(assert (=> b!61168 (= e!40199 call!4696)))

(declare-fun d!12077 () Bool)

(declare-fun res!33726 () Bool)

(assert (=> d!12077 (=> res!33726 e!40197)))

(assert (=> d!12077 (= res!33726 (bvsge (bvadd from!355 #b00000000000000000000000000000001) (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992))))))))

(assert (=> d!12077 (= (arrayNoDuplicates!0 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!7871 (Cons!1433 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) Nil!1434) Nil!1434)) e!40197)))

(declare-fun bm!4693 () Bool)

(assert (=> bm!4693 (= call!4696 (arrayNoDuplicates!0 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!7999 (Cons!1433 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7871 (Cons!1433 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) Nil!1434) Nil!1434)) (ite c!7871 (Cons!1433 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) Nil!1434) Nil!1434))))))

(declare-fun b!61169 () Bool)

(assert (=> b!61169 (= e!40198 (contains!687 (ite c!7871 (Cons!1433 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) Nil!1434) Nil!1434) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(assert (= (and d!12077 (not res!33726)) b!61166))

(assert (= (and b!61166 res!33728) b!61169))

(assert (= (and b!61166 res!33727) b!61167))

(assert (= (and b!61167 c!7999) b!61165))

(assert (= (and b!61167 (not c!7999)) b!61168))

(assert (= (or b!61165 b!61168) bm!4693))

(declare-fun m!53987 () Bool)

(assert (=> b!61166 m!53987))

(assert (=> b!61166 m!53987))

(declare-fun m!53989 () Bool)

(assert (=> b!61166 m!53989))

(assert (=> b!61167 m!53987))

(assert (=> b!61167 m!53987))

(assert (=> b!61167 m!53989))

(assert (=> bm!4693 m!53987))

(declare-fun m!53991 () Bool)

(assert (=> bm!4693 m!53991))

(assert (=> b!61169 m!53987))

(assert (=> b!61169 m!53987))

(declare-fun m!53993 () Bool)

(assert (=> b!61169 m!53993))

(assert (=> bm!4565 d!12077))

(assert (=> b!60694 d!12049))

(declare-fun d!12079 () Bool)

(declare-fun e!40200 () Bool)

(assert (=> d!12079 e!40200))

(declare-fun res!33729 () Bool)

(assert (=> d!12079 (=> (not res!33729) (not e!40200))))

(declare-fun lt!25201 () ListLongMap!1369)

(assert (=> d!12079 (= res!33729 (contains!686 lt!25201 (_1!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!25202 () List!1436)

(assert (=> d!12079 (= lt!25201 (ListLongMap!1370 lt!25202))))

(declare-fun lt!25200 () Unit!1625)

(declare-fun lt!25203 () Unit!1625)

(assert (=> d!12079 (= lt!25200 lt!25203)))

(assert (=> d!12079 (= (getValueByKey!125 lt!25202 (_1!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!130 (_2!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!12079 (= lt!25203 (lemmaContainsTupThenGetReturnValue!42 lt!25202 (_1!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!12079 (= lt!25202 (insertStrictlySorted!45 (toList!700 (ite c!7909 (ite c!7899 call!4636 call!4620) call!4621)) (_1!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!12079 (= (+!82 (ite c!7909 (ite c!7899 call!4636 call!4620) call!4621) (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!25201)))

(declare-fun b!61170 () Bool)

(declare-fun res!33730 () Bool)

(assert (=> b!61170 (=> (not res!33730) (not e!40200))))

(assert (=> b!61170 (= res!33730 (= (getValueByKey!125 (toList!700 lt!25201) (_1!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!130 (_2!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!61171 () Bool)

(assert (=> b!61171 (= e!40200 (contains!688 (toList!700 lt!25201) (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!12079 res!33729) b!61170))

(assert (= (and b!61170 res!33730) b!61171))

(declare-fun m!53995 () Bool)

(assert (=> d!12079 m!53995))

(declare-fun m!53997 () Bool)

(assert (=> d!12079 m!53997))

(declare-fun m!53999 () Bool)

(assert (=> d!12079 m!53999))

(declare-fun m!54001 () Bool)

(assert (=> d!12079 m!54001))

(declare-fun m!54003 () Bool)

(assert (=> b!61170 m!54003))

(declare-fun m!54005 () Bool)

(assert (=> b!61171 m!54005))

(assert (=> bm!4635 d!12079))

(declare-fun d!12081 () Bool)

(declare-fun e!40201 () Bool)

(assert (=> d!12081 e!40201))

(declare-fun res!33731 () Bool)

(assert (=> d!12081 (=> res!33731 e!40201)))

(declare-fun lt!25207 () Bool)

(assert (=> d!12081 (= res!33731 (not lt!25207))))

(declare-fun lt!25206 () Bool)

(assert (=> d!12081 (= lt!25207 lt!25206)))

(declare-fun lt!25205 () Unit!1625)

(declare-fun e!40202 () Unit!1625)

(assert (=> d!12081 (= lt!25205 e!40202)))

(declare-fun c!8000 () Bool)

(assert (=> d!12081 (= c!8000 lt!25206)))

(assert (=> d!12081 (= lt!25206 (containsKey!129 (toList!700 lt!24995) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12081 (= (contains!686 lt!24995 #b1000000000000000000000000000000000000000000000000000000000000000) lt!25207)))

(declare-fun b!61172 () Bool)

(declare-fun lt!25204 () Unit!1625)

(assert (=> b!61172 (= e!40202 lt!25204)))

(assert (=> b!61172 (= lt!25204 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 lt!24995) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61172 (isDefined!78 (getValueByKey!125 (toList!700 lt!24995) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61173 () Bool)

(declare-fun Unit!1641 () Unit!1625)

(assert (=> b!61173 (= e!40202 Unit!1641)))

(declare-fun b!61174 () Bool)

(assert (=> b!61174 (= e!40201 (isDefined!78 (getValueByKey!125 (toList!700 lt!24995) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12081 c!8000) b!61172))

(assert (= (and d!12081 (not c!8000)) b!61173))

(assert (= (and d!12081 (not res!33731)) b!61174))

(declare-fun m!54007 () Bool)

(assert (=> d!12081 m!54007))

(declare-fun m!54009 () Bool)

(assert (=> b!61172 m!54009))

(assert (=> b!61172 m!53975))

(assert (=> b!61172 m!53975))

(declare-fun m!54011 () Bool)

(assert (=> b!61172 m!54011))

(assert (=> b!61174 m!53975))

(assert (=> b!61174 m!53975))

(assert (=> b!61174 m!54011))

(assert (=> bm!4658 d!12081))

(declare-fun d!12083 () Bool)

(assert (=> d!12083 (= (get!1076 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2403 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(assert (=> b!60824 d!12083))

(declare-fun d!12085 () Bool)

(declare-fun res!33732 () Bool)

(declare-fun e!40203 () Bool)

(assert (=> d!12085 (=> res!33732 e!40203)))

(assert (=> d!12085 (= res!33732 (= (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(assert (=> d!12085 (= (arrayContainsKey!0 (_keys!3695 newMap!16) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) #b00000000000000000000000000000000) e!40203)))

(declare-fun b!61175 () Bool)

(declare-fun e!40204 () Bool)

(assert (=> b!61175 (= e!40203 e!40204)))

(declare-fun res!33733 () Bool)

(assert (=> b!61175 (=> (not res!33733) (not e!40204))))

(assert (=> b!61175 (= res!33733 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2024 (_keys!3695 newMap!16))))))

(declare-fun b!61176 () Bool)

(assert (=> b!61176 (= e!40204 (arrayContainsKey!0 (_keys!3695 newMap!16) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!12085 (not res!33732)) b!61175))

(assert (= (and b!61175 res!33733) b!61176))

(assert (=> d!12085 m!53617))

(assert (=> b!61176 m!53313))

(declare-fun m!54013 () Bool)

(assert (=> b!61176 m!54013))

(assert (=> bm!4636 d!12085))

(declare-fun d!12087 () Bool)

(assert (=> d!12087 (= (apply!67 lt!24995 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1078 (getValueByKey!125 (toList!700 lt!24995) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2659 () Bool)

(assert (= bs!2659 d!12087))

(assert (=> bs!2659 m!53887))

(assert (=> bs!2659 m!53887))

(declare-fun m!54015 () Bool)

(assert (=> bs!2659 m!54015))

(assert (=> b!60874 d!12087))

(declare-fun d!12089 () Bool)

(declare-fun e!40207 () Bool)

(assert (=> d!12089 e!40207))

(declare-fun res!33736 () Bool)

(assert (=> d!12089 (=> (not res!33736) (not e!40207))))

(assert (=> d!12089 (= res!33736 (and (bvsge (index!3037 lt!24947) #b00000000000000000000000000000000) (bvslt (index!3037 lt!24947) (size!2024 (_keys!3695 newMap!16)))))))

(declare-fun lt!25210 () Unit!1625)

(declare-fun choose!323 (array!3747 array!3749 (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 (_ BitVec 32) Int) Unit!1625)

(assert (=> d!12089 (= lt!25210 (choose!323 (_keys!3695 newMap!16) lt!24925 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (index!3037 lt!24947) (defaultEntry!2067 newMap!16)))))

(assert (=> d!12089 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12089 (= (lemmaValidKeyInArrayIsInListMap!77 (_keys!3695 newMap!16) lt!24925 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (index!3037 lt!24947) (defaultEntry!2067 newMap!16)) lt!25210)))

(declare-fun b!61179 () Bool)

(assert (=> b!61179 (= e!40207 (contains!686 (getCurrentListMap!405 (_keys!3695 newMap!16) lt!24925 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (select (arr!1793 (_keys!3695 newMap!16)) (index!3037 lt!24947))))))

(assert (= (and d!12089 res!33736) b!61179))

(declare-fun m!54017 () Bool)

(assert (=> d!12089 m!54017))

(assert (=> d!12089 m!53559))

(declare-fun m!54019 () Bool)

(assert (=> b!61179 m!54019))

(assert (=> b!61179 m!53453))

(assert (=> b!61179 m!54019))

(assert (=> b!61179 m!53453))

(declare-fun m!54021 () Bool)

(assert (=> b!61179 m!54021))

(assert (=> b!60787 d!12089))

(declare-fun b!61180 () Bool)

(declare-fun e!40214 () Bool)

(assert (=> b!61180 (= e!40214 (validKeyInArray!0 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61181 () Bool)

(declare-fun res!33737 () Bool)

(declare-fun e!40209 () Bool)

(assert (=> b!61181 (=> (not res!33737) (not e!40209))))

(declare-fun e!40212 () Bool)

(assert (=> b!61181 (= res!33737 e!40212)))

(declare-fun res!33745 () Bool)

(assert (=> b!61181 (=> res!33745 e!40212)))

(declare-fun e!40208 () Bool)

(assert (=> b!61181 (= res!33745 (not e!40208))))

(declare-fun res!33741 () Bool)

(assert (=> b!61181 (=> (not res!33741) (not e!40208))))

(assert (=> b!61181 (= res!33741 (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(declare-fun b!61182 () Bool)

(declare-fun e!40216 () Unit!1625)

(declare-fun Unit!1642 () Unit!1625)

(assert (=> b!61182 (= e!40216 Unit!1642)))

(declare-fun b!61183 () Bool)

(declare-fun c!8004 () Bool)

(assert (=> b!61183 (= c!8004 (and (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!40213 () ListLongMap!1369)

(declare-fun e!40215 () ListLongMap!1369)

(assert (=> b!61183 (= e!40213 e!40215)))

(declare-fun b!61184 () Bool)

(declare-fun e!40220 () ListLongMap!1369)

(declare-fun call!4703 () ListLongMap!1369)

(assert (=> b!61184 (= e!40220 (+!82 call!4703 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))

(declare-fun c!8003 () Bool)

(declare-fun bm!4694 () Bool)

(declare-fun call!4701 () ListLongMap!1369)

(declare-fun call!4702 () ListLongMap!1369)

(declare-fun call!4697 () ListLongMap!1369)

(declare-fun c!8002 () Bool)

(assert (=> bm!4694 (= call!4703 (+!82 (ite c!8002 call!4697 (ite c!8003 call!4702 call!4701)) (ite (or c!8002 c!8003) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(declare-fun b!61185 () Bool)

(declare-fun res!33740 () Bool)

(assert (=> b!61185 (=> (not res!33740) (not e!40209))))

(declare-fun e!40218 () Bool)

(assert (=> b!61185 (= res!33740 e!40218)))

(declare-fun c!8005 () Bool)

(assert (=> b!61185 (= c!8005 (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!61186 () Bool)

(declare-fun e!40211 () Bool)

(declare-fun lt!25211 () ListLongMap!1369)

(assert (=> b!61186 (= e!40211 (= (apply!67 lt!25211 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1981 newMap!16)))))

(declare-fun bm!4695 () Bool)

(assert (=> bm!4695 (= call!4701 call!4702)))

(declare-fun b!61187 () Bool)

(assert (=> b!61187 (= e!40218 e!40211)))

(declare-fun res!33738 () Bool)

(declare-fun call!4699 () Bool)

(assert (=> b!61187 (= res!33738 call!4699)))

(assert (=> b!61187 (=> (not res!33738) (not e!40211))))

(declare-fun b!61188 () Bool)

(declare-fun e!40217 () Bool)

(assert (=> b!61188 (= e!40217 (= (apply!67 lt!25211 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1981 newMap!16)))))

(declare-fun b!61189 () Bool)

(assert (=> b!61189 (= e!40215 call!4701)))

(declare-fun bm!4697 () Bool)

(assert (=> bm!4697 (= call!4697 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (array!3750 (store (arr!1794 (_values!2050 newMap!16)) (index!3037 lt!24947) (ValueCellFull!861 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2025 (_values!2050 newMap!16))) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun b!61190 () Bool)

(declare-fun e!40210 () Bool)

(assert (=> b!61190 (= e!40212 e!40210)))

(declare-fun res!33739 () Bool)

(assert (=> b!61190 (=> (not res!33739) (not e!40210))))

(assert (=> b!61190 (= res!33739 (contains!686 lt!25211 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61190 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(declare-fun bm!4698 () Bool)

(assert (=> bm!4698 (= call!4699 (contains!686 lt!25211 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61191 () Bool)

(declare-fun call!4700 () ListLongMap!1369)

(assert (=> b!61191 (= e!40215 call!4700)))

(declare-fun b!61192 () Bool)

(assert (=> b!61192 (= e!40210 (= (apply!67 lt!25211 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) (get!1075 (select (arr!1794 (array!3750 (store (arr!1794 (_values!2050 newMap!16)) (index!3037 lt!24947) (ValueCellFull!861 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2025 (_values!2050 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!61192 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2025 (array!3750 (store (arr!1794 (_values!2050 newMap!16)) (index!3037 lt!24947) (ValueCellFull!861 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2025 (_values!2050 newMap!16))))))))

(assert (=> b!61192 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(declare-fun bm!4699 () Bool)

(assert (=> bm!4699 (= call!4700 call!4703)))

(declare-fun d!12091 () Bool)

(assert (=> d!12091 e!40209))

(declare-fun res!33742 () Bool)

(assert (=> d!12091 (=> (not res!33742) (not e!40209))))

(assert (=> d!12091 (= res!33742 (or (bvsge #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))))

(declare-fun lt!25227 () ListLongMap!1369)

(assert (=> d!12091 (= lt!25211 lt!25227)))

(declare-fun lt!25220 () Unit!1625)

(assert (=> d!12091 (= lt!25220 e!40216)))

(declare-fun c!8006 () Bool)

(assert (=> d!12091 (= c!8006 e!40214)))

(declare-fun res!33744 () Bool)

(assert (=> d!12091 (=> (not res!33744) (not e!40214))))

(assert (=> d!12091 (= res!33744 (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(assert (=> d!12091 (= lt!25227 e!40220)))

(assert (=> d!12091 (= c!8002 (and (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12091 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12091 (= (getCurrentListMap!405 (_keys!3695 newMap!16) (array!3750 (store (arr!1794 (_values!2050 newMap!16)) (index!3037 lt!24947) (ValueCellFull!861 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2025 (_values!2050 newMap!16))) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) lt!25211)))

(declare-fun bm!4696 () Bool)

(assert (=> bm!4696 (= call!4702 call!4697)))

(declare-fun b!61193 () Bool)

(declare-fun lt!25230 () Unit!1625)

(assert (=> b!61193 (= e!40216 lt!25230)))

(declare-fun lt!25222 () ListLongMap!1369)

(assert (=> b!61193 (= lt!25222 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (array!3750 (store (arr!1794 (_values!2050 newMap!16)) (index!3037 lt!24947) (ValueCellFull!861 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2025 (_values!2050 newMap!16))) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25212 () (_ BitVec 64))

(assert (=> b!61193 (= lt!25212 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25225 () (_ BitVec 64))

(assert (=> b!61193 (= lt!25225 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25232 () Unit!1625)

(assert (=> b!61193 (= lt!25232 (addStillContains!43 lt!25222 lt!25212 (zeroValue!1981 newMap!16) lt!25225))))

(assert (=> b!61193 (contains!686 (+!82 lt!25222 (tuple2!2033 lt!25212 (zeroValue!1981 newMap!16))) lt!25225)))

(declare-fun lt!25218 () Unit!1625)

(assert (=> b!61193 (= lt!25218 lt!25232)))

(declare-fun lt!25219 () ListLongMap!1369)

(assert (=> b!61193 (= lt!25219 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (array!3750 (store (arr!1794 (_values!2050 newMap!16)) (index!3037 lt!24947) (ValueCellFull!861 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2025 (_values!2050 newMap!16))) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25217 () (_ BitVec 64))

(assert (=> b!61193 (= lt!25217 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25231 () (_ BitVec 64))

(assert (=> b!61193 (= lt!25231 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25216 () Unit!1625)

(assert (=> b!61193 (= lt!25216 (addApplyDifferent!43 lt!25219 lt!25217 (minValue!1981 newMap!16) lt!25231))))

(assert (=> b!61193 (= (apply!67 (+!82 lt!25219 (tuple2!2033 lt!25217 (minValue!1981 newMap!16))) lt!25231) (apply!67 lt!25219 lt!25231))))

(declare-fun lt!25215 () Unit!1625)

(assert (=> b!61193 (= lt!25215 lt!25216)))

(declare-fun lt!25226 () ListLongMap!1369)

(assert (=> b!61193 (= lt!25226 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (array!3750 (store (arr!1794 (_values!2050 newMap!16)) (index!3037 lt!24947) (ValueCellFull!861 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2025 (_values!2050 newMap!16))) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25213 () (_ BitVec 64))

(assert (=> b!61193 (= lt!25213 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25221 () (_ BitVec 64))

(assert (=> b!61193 (= lt!25221 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25228 () Unit!1625)

(assert (=> b!61193 (= lt!25228 (addApplyDifferent!43 lt!25226 lt!25213 (zeroValue!1981 newMap!16) lt!25221))))

(assert (=> b!61193 (= (apply!67 (+!82 lt!25226 (tuple2!2033 lt!25213 (zeroValue!1981 newMap!16))) lt!25221) (apply!67 lt!25226 lt!25221))))

(declare-fun lt!25229 () Unit!1625)

(assert (=> b!61193 (= lt!25229 lt!25228)))

(declare-fun lt!25214 () ListLongMap!1369)

(assert (=> b!61193 (= lt!25214 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (array!3750 (store (arr!1794 (_values!2050 newMap!16)) (index!3037 lt!24947) (ValueCellFull!861 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2025 (_values!2050 newMap!16))) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25224 () (_ BitVec 64))

(assert (=> b!61193 (= lt!25224 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25223 () (_ BitVec 64))

(assert (=> b!61193 (= lt!25223 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!61193 (= lt!25230 (addApplyDifferent!43 lt!25214 lt!25224 (minValue!1981 newMap!16) lt!25223))))

(assert (=> b!61193 (= (apply!67 (+!82 lt!25214 (tuple2!2033 lt!25224 (minValue!1981 newMap!16))) lt!25223) (apply!67 lt!25214 lt!25223))))

(declare-fun b!61194 () Bool)

(declare-fun e!40219 () Bool)

(declare-fun call!4698 () Bool)

(assert (=> b!61194 (= e!40219 (not call!4698))))

(declare-fun b!61195 () Bool)

(assert (=> b!61195 (= e!40213 call!4700)))

(declare-fun b!61196 () Bool)

(assert (=> b!61196 (= e!40208 (validKeyInArray!0 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61197 () Bool)

(assert (=> b!61197 (= e!40218 (not call!4699))))

(declare-fun bm!4700 () Bool)

(assert (=> bm!4700 (= call!4698 (contains!686 lt!25211 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61198 () Bool)

(assert (=> b!61198 (= e!40219 e!40217)))

(declare-fun res!33743 () Bool)

(assert (=> b!61198 (= res!33743 call!4698)))

(assert (=> b!61198 (=> (not res!33743) (not e!40217))))

(declare-fun b!61199 () Bool)

(assert (=> b!61199 (= e!40220 e!40213)))

(assert (=> b!61199 (= c!8003 (and (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!61200 () Bool)

(assert (=> b!61200 (= e!40209 e!40219)))

(declare-fun c!8001 () Bool)

(assert (=> b!61200 (= c!8001 (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!12091 c!8002) b!61184))

(assert (= (and d!12091 (not c!8002)) b!61199))

(assert (= (and b!61199 c!8003) b!61195))

(assert (= (and b!61199 (not c!8003)) b!61183))

(assert (= (and b!61183 c!8004) b!61191))

(assert (= (and b!61183 (not c!8004)) b!61189))

(assert (= (or b!61191 b!61189) bm!4695))

(assert (= (or b!61195 bm!4695) bm!4696))

(assert (= (or b!61195 b!61191) bm!4699))

(assert (= (or b!61184 bm!4696) bm!4697))

(assert (= (or b!61184 bm!4699) bm!4694))

(assert (= (and d!12091 res!33744) b!61180))

(assert (= (and d!12091 c!8006) b!61193))

(assert (= (and d!12091 (not c!8006)) b!61182))

(assert (= (and d!12091 res!33742) b!61181))

(assert (= (and b!61181 res!33741) b!61196))

(assert (= (and b!61181 (not res!33745)) b!61190))

(assert (= (and b!61190 res!33739) b!61192))

(assert (= (and b!61181 res!33737) b!61185))

(assert (= (and b!61185 c!8005) b!61187))

(assert (= (and b!61185 (not c!8005)) b!61197))

(assert (= (and b!61187 res!33738) b!61186))

(assert (= (or b!61187 b!61197) bm!4698))

(assert (= (and b!61185 res!33740) b!61200))

(assert (= (and b!61200 c!8001) b!61198))

(assert (= (and b!61200 (not c!8001)) b!61194))

(assert (= (and b!61198 res!33743) b!61188))

(assert (= (or b!61198 b!61194) bm!4700))

(declare-fun b_lambda!2705 () Bool)

(assert (=> (not b_lambda!2705) (not b!61192)))

(assert (=> b!61192 t!4813))

(declare-fun b_and!3731 () Bool)

(assert (= b_and!3727 (and (=> t!4813 result!2427) b_and!3731)))

(assert (=> b!61192 t!4815))

(declare-fun b_and!3733 () Bool)

(assert (= b_and!3729 (and (=> t!4815 result!2429) b_and!3733)))

(declare-fun m!54023 () Bool)

(assert (=> bm!4694 m!54023))

(declare-fun m!54025 () Bool)

(assert (=> bm!4697 m!54025))

(declare-fun m!54027 () Bool)

(assert (=> b!61193 m!54027))

(declare-fun m!54029 () Bool)

(assert (=> b!61193 m!54029))

(declare-fun m!54031 () Bool)

(assert (=> b!61193 m!54031))

(declare-fun m!54033 () Bool)

(assert (=> b!61193 m!54033))

(declare-fun m!54035 () Bool)

(assert (=> b!61193 m!54035))

(assert (=> b!61193 m!53617))

(declare-fun m!54037 () Bool)

(assert (=> b!61193 m!54037))

(declare-fun m!54039 () Bool)

(assert (=> b!61193 m!54039))

(declare-fun m!54041 () Bool)

(assert (=> b!61193 m!54041))

(assert (=> b!61193 m!54025))

(assert (=> b!61193 m!54027))

(declare-fun m!54043 () Bool)

(assert (=> b!61193 m!54043))

(assert (=> b!61193 m!54031))

(declare-fun m!54045 () Bool)

(assert (=> b!61193 m!54045))

(assert (=> b!61193 m!54039))

(declare-fun m!54047 () Bool)

(assert (=> b!61193 m!54047))

(declare-fun m!54049 () Bool)

(assert (=> b!61193 m!54049))

(declare-fun m!54051 () Bool)

(assert (=> b!61193 m!54051))

(declare-fun m!54053 () Bool)

(assert (=> b!61193 m!54053))

(assert (=> b!61193 m!54043))

(declare-fun m!54055 () Bool)

(assert (=> b!61193 m!54055))

(declare-fun m!54057 () Bool)

(assert (=> b!61186 m!54057))

(assert (=> b!61196 m!53617))

(assert (=> b!61196 m!53617))

(assert (=> b!61196 m!53641))

(assert (=> b!61192 m!53617))

(declare-fun m!54059 () Bool)

(assert (=> b!61192 m!54059))

(declare-fun m!54061 () Bool)

(assert (=> b!61192 m!54061))

(assert (=> b!61192 m!54061))

(assert (=> b!61192 m!53647))

(declare-fun m!54063 () Bool)

(assert (=> b!61192 m!54063))

(assert (=> b!61192 m!53617))

(assert (=> b!61192 m!53647))

(assert (=> b!61190 m!53617))

(assert (=> b!61190 m!53617))

(declare-fun m!54065 () Bool)

(assert (=> b!61190 m!54065))

(declare-fun m!54067 () Bool)

(assert (=> b!61188 m!54067))

(assert (=> b!61180 m!53617))

(assert (=> b!61180 m!53617))

(assert (=> b!61180 m!53641))

(declare-fun m!54069 () Bool)

(assert (=> b!61184 m!54069))

(declare-fun m!54071 () Bool)

(assert (=> bm!4698 m!54071))

(assert (=> d!12091 m!53559))

(declare-fun m!54073 () Bool)

(assert (=> bm!4700 m!54073))

(assert (=> b!60787 d!12091))

(declare-fun d!12093 () Bool)

(declare-fun e!40223 () Bool)

(assert (=> d!12093 e!40223))

(declare-fun res!33748 () Bool)

(assert (=> d!12093 (=> (not res!33748) (not e!40223))))

(assert (=> d!12093 (= res!33748 (and (bvsge (index!3037 lt!24947) #b00000000000000000000000000000000) (bvslt (index!3037 lt!24947) (size!2025 (_values!2050 newMap!16)))))))

(declare-fun lt!25235 () Unit!1625)

(declare-fun choose!324 (array!3747 array!3749 (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 (_ BitVec 32) (_ BitVec 64) V!2859 Int) Unit!1625)

(assert (=> d!12093 (= lt!25235 (choose!324 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (index!3037 lt!24947) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2067 newMap!16)))))

(assert (=> d!12093 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12093 (= (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!16 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (index!3037 lt!24947) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2067 newMap!16)) lt!25235)))

(declare-fun b!61203 () Bool)

(assert (=> b!61203 (= e!40223 (= (+!82 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!405 (_keys!3695 newMap!16) (array!3750 (store (arr!1794 (_values!2050 newMap!16)) (index!3037 lt!24947) (ValueCellFull!861 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2025 (_values!2050 newMap!16))) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16))))))

(assert (= (and d!12093 res!33748) b!61203))

(assert (=> d!12093 m!53313))

(assert (=> d!12093 m!53337))

(declare-fun m!54075 () Bool)

(assert (=> d!12093 m!54075))

(assert (=> d!12093 m!53559))

(assert (=> b!61203 m!53489))

(assert (=> b!61203 m!53489))

(declare-fun m!54077 () Bool)

(assert (=> b!61203 m!54077))

(assert (=> b!61203 m!53475))

(assert (=> b!61203 m!53471))

(assert (=> b!60787 d!12093))

(declare-fun d!12095 () Bool)

(declare-fun e!40224 () Bool)

(assert (=> d!12095 e!40224))

(declare-fun res!33749 () Bool)

(assert (=> d!12095 (=> res!33749 e!40224)))

(declare-fun lt!25239 () Bool)

(assert (=> d!12095 (= res!33749 (not lt!25239))))

(declare-fun lt!25238 () Bool)

(assert (=> d!12095 (= lt!25239 lt!25238)))

(declare-fun lt!25237 () Unit!1625)

(declare-fun e!40225 () Unit!1625)

(assert (=> d!12095 (= lt!25237 e!40225)))

(declare-fun c!8007 () Bool)

(assert (=> d!12095 (= c!8007 lt!25238)))

(assert (=> d!12095 (= lt!25238 (containsKey!129 (toList!700 call!4621) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(assert (=> d!12095 (= (contains!686 call!4621 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) lt!25239)))

(declare-fun b!61204 () Bool)

(declare-fun lt!25236 () Unit!1625)

(assert (=> b!61204 (= e!40225 lt!25236)))

(assert (=> b!61204 (= lt!25236 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 call!4621) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(assert (=> b!61204 (isDefined!78 (getValueByKey!125 (toList!700 call!4621) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(declare-fun b!61205 () Bool)

(declare-fun Unit!1643 () Unit!1625)

(assert (=> b!61205 (= e!40225 Unit!1643)))

(declare-fun b!61206 () Bool)

(assert (=> b!61206 (= e!40224 (isDefined!78 (getValueByKey!125 (toList!700 call!4621) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355))))))

(assert (= (and d!12095 c!8007) b!61204))

(assert (= (and d!12095 (not c!8007)) b!61205))

(assert (= (and d!12095 (not res!33749)) b!61206))

(assert (=> d!12095 m!53313))

(declare-fun m!54079 () Bool)

(assert (=> d!12095 m!54079))

(assert (=> b!61204 m!53313))

(declare-fun m!54081 () Bool)

(assert (=> b!61204 m!54081))

(assert (=> b!61204 m!53313))

(declare-fun m!54083 () Bool)

(assert (=> b!61204 m!54083))

(assert (=> b!61204 m!54083))

(declare-fun m!54085 () Bool)

(assert (=> b!61204 m!54085))

(assert (=> b!61206 m!53313))

(assert (=> b!61206 m!54083))

(assert (=> b!61206 m!54083))

(assert (=> b!61206 m!54085))

(assert (=> b!60787 d!12095))

(declare-fun d!12097 () Bool)

(declare-fun e!40226 () Bool)

(assert (=> d!12097 e!40226))

(declare-fun res!33750 () Bool)

(assert (=> d!12097 (=> (not res!33750) (not e!40226))))

(declare-fun lt!25241 () ListLongMap!1369)

(assert (=> d!12097 (= res!33750 (contains!686 lt!25241 (_1!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(declare-fun lt!25242 () List!1436)

(assert (=> d!12097 (= lt!25241 (ListLongMap!1370 lt!25242))))

(declare-fun lt!25240 () Unit!1625)

(declare-fun lt!25243 () Unit!1625)

(assert (=> d!12097 (= lt!25240 lt!25243)))

(assert (=> d!12097 (= (getValueByKey!125 lt!25242 (_1!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))) (Some!130 (_2!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (=> d!12097 (= lt!25243 (lemmaContainsTupThenGetReturnValue!42 lt!25242 (_1!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) (_2!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (=> d!12097 (= lt!25242 (insertStrictlySorted!45 (toList!700 (ite c!7927 call!4655 (ite c!7928 call!4660 call!4659))) (_1!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) (_2!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (=> d!12097 (= (+!82 (ite c!7927 call!4655 (ite c!7928 call!4660 call!4659)) (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25241)))

(declare-fun b!61207 () Bool)

(declare-fun res!33751 () Bool)

(assert (=> b!61207 (=> (not res!33751) (not e!40226))))

(assert (=> b!61207 (= res!33751 (= (getValueByKey!125 (toList!700 lt!25241) (_1!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))) (Some!130 (_2!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))))

(declare-fun b!61208 () Bool)

(assert (=> b!61208 (= e!40226 (contains!688 (toList!700 lt!25241) (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(assert (= (and d!12097 res!33750) b!61207))

(assert (= (and b!61207 res!33751) b!61208))

(declare-fun m!54087 () Bool)

(assert (=> d!12097 m!54087))

(declare-fun m!54089 () Bool)

(assert (=> d!12097 m!54089))

(declare-fun m!54091 () Bool)

(assert (=> d!12097 m!54091))

(declare-fun m!54093 () Bool)

(assert (=> d!12097 m!54093))

(declare-fun m!54095 () Bool)

(assert (=> b!61207 m!54095))

(declare-fun m!54097 () Bool)

(assert (=> b!61208 m!54097))

(assert (=> bm!4652 d!12097))

(declare-fun b!61243 () Bool)

(declare-fun e!40247 () Bool)

(declare-fun lt!25325 () SeekEntryResult!228)

(assert (=> b!61243 (= e!40247 ((_ is Undefined!228) lt!25325))))

(declare-fun b!61244 () Bool)

(declare-fun e!40249 () Bool)

(declare-fun call!4714 () Bool)

(assert (=> b!61244 (= e!40249 (not call!4714))))

(declare-fun b!61245 () Bool)

(declare-fun res!33771 () Bool)

(assert (=> b!61245 (=> (not res!33771) (not e!40249))))

(assert (=> b!61245 (= res!33771 (= (select (arr!1793 (_keys!3695 newMap!16)) (index!3036 lt!25325)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun d!12099 () Bool)

(declare-fun e!40250 () Bool)

(assert (=> d!12099 e!40250))

(declare-fun res!33777 () Bool)

(assert (=> d!12099 (=> (not res!33777) (not e!40250))))

(declare-fun lt!25311 () tuple2!2030)

(assert (=> d!12099 (= res!33777 (_1!1026 lt!25311))))

(assert (=> d!12099 (= lt!25311 (tuple2!2031 true (LongMapFixedSize!631 (defaultEntry!2067 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (bvadd (_size!364 newMap!16) #b00000000000000000000000000000001) (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16))) (array!3750 (store (arr!1794 (_values!2050 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (ValueCellFull!861 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2025 (_values!2050 newMap!16))) (_vacant!364 newMap!16))))))

(declare-fun lt!25323 () Unit!1625)

(declare-fun lt!25312 () Unit!1625)

(assert (=> d!12099 (= lt!25323 lt!25312)))

(declare-fun lt!25329 () array!3749)

(declare-fun lt!25320 () array!3747)

(assert (=> d!12099 (contains!686 (getCurrentListMap!405 lt!25320 lt!25329 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (select (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947))))))

(assert (=> d!12099 (= lt!25312 (lemmaValidKeyInArrayIsInListMap!77 lt!25320 lt!25329 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (defaultEntry!2067 newMap!16)))))

(assert (=> d!12099 (= lt!25329 (array!3750 (store (arr!1794 (_values!2050 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (ValueCellFull!861 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2025 (_values!2050 newMap!16))))))

(assert (=> d!12099 (= lt!25320 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16))))))

(declare-fun lt!25321 () Unit!1625)

(declare-fun lt!25305 () Unit!1625)

(assert (=> d!12099 (= lt!25321 lt!25305)))

(declare-fun lt!25309 () array!3747)

(assert (=> d!12099 (= (arrayCountValidKeys!0 lt!25309 (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (bvadd (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lemmaValidKeyAtIImpliesCountKeysIsOne!0 (array!3747 (_ BitVec 32)) Unit!1625)

(assert (=> d!12099 (= lt!25305 (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!25309 (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947))))))

(assert (=> d!12099 (= lt!25309 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16))))))

(declare-fun lt!25316 () Unit!1625)

(declare-fun lt!25313 () Unit!1625)

(assert (=> d!12099 (= lt!25316 lt!25313)))

(declare-fun lt!25324 () array!3747)

(assert (=> d!12099 (arrayContainsKey!0 lt!25324 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(declare-fun lemmaArrayContainsFromImpliesContainsFromZero!0 (array!3747 (_ BitVec 64) (_ BitVec 32)) Unit!1625)

(assert (=> d!12099 (= lt!25313 (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!25324 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947))))))

(assert (=> d!12099 (= lt!25324 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16))))))

(declare-fun lt!25318 () Unit!1625)

(declare-fun lt!25333 () Unit!1625)

(assert (=> d!12099 (= lt!25318 lt!25333)))

(assert (=> d!12099 (= (+!82 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!405 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16))) (array!3750 (store (arr!1794 (_values!2050 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (ValueCellFull!861 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2025 (_values!2050 newMap!16))) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lemmaAddValidKeyToArrayThenAddPairToListMap!6 (array!3747 array!3749 (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 (_ BitVec 32) (_ BitVec 64) V!2859 Int) Unit!1625)

(assert (=> d!12099 (= lt!25333 (lemmaAddValidKeyToArrayThenAddPairToListMap!6 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25322 () Unit!1625)

(declare-fun lt!25306 () Unit!1625)

(assert (=> d!12099 (= lt!25322 lt!25306)))

(assert (=> d!12099 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16))) (mask!5963 newMap!16))))

(declare-fun lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 ((_ BitVec 64) array!3747 (_ BitVec 32) (_ BitVec 32)) Unit!1625)

(assert (=> d!12099 (= lt!25306 (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (_keys!3695 newMap!16) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (mask!5963 newMap!16)))))

(declare-fun lt!25310 () Unit!1625)

(declare-fun lt!25304 () Unit!1625)

(assert (=> d!12099 (= lt!25310 lt!25304)))

(assert (=> d!12099 (= (arrayCountValidKeys!0 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16))) #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!3695 newMap!16) #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))) #b00000000000000000000000000000001))))

(declare-fun lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (array!3747 (_ BitVec 32) (_ BitVec 64)) Unit!1625)

(assert (=> d!12099 (= lt!25304 (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!3695 newMap!16) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(declare-fun lt!25327 () Unit!1625)

(declare-fun lt!25315 () Unit!1625)

(assert (=> d!12099 (= lt!25327 lt!25315)))

(declare-fun lt!25330 () (_ BitVec 32))

(declare-fun lt!25319 () List!1437)

(assert (=> d!12099 (arrayNoDuplicates!0 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16))) lt!25330 lt!25319)))

(declare-fun lemmaPutNewValidKeyPreservesNoDuplicate!0 (array!3747 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1437) Unit!1625)

(assert (=> d!12099 (= lt!25315 (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!3695 newMap!16) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) lt!25330 lt!25319))))

(assert (=> d!12099 (= lt!25319 Nil!1434)))

(assert (=> d!12099 (= lt!25330 #b00000000000000000000000000000000)))

(declare-fun lt!25307 () Unit!1625)

(declare-fun e!40243 () Unit!1625)

(assert (=> d!12099 (= lt!25307 e!40243)))

(declare-fun c!8018 () Bool)

(assert (=> d!12099 (= c!8018 (arrayContainsKey!0 (_keys!3695 newMap!16) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun lt!25326 () Unit!1625)

(declare-fun e!40245 () Unit!1625)

(assert (=> d!12099 (= lt!25326 e!40245)))

(declare-fun c!8016 () Bool)

(assert (=> d!12099 (= c!8016 (contains!686 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(assert (=> d!12099 (valid!260 newMap!16)))

(assert (=> d!12099 (= (updateHelperNewKey!16 newMap!16 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947))) lt!25311)))

(declare-fun b!61246 () Bool)

(declare-fun res!33770 () Bool)

(assert (=> b!61246 (=> (not res!33770) (not e!40249))))

(declare-fun call!4715 () Bool)

(assert (=> b!61246 (= res!33770 call!4715)))

(declare-fun e!40248 () Bool)

(assert (=> b!61246 (= e!40248 e!40249)))

(declare-fun b!61247 () Bool)

(declare-fun res!33776 () Bool)

(assert (=> b!61247 (= res!33776 (= (select (arr!1793 (_keys!3695 newMap!16)) (index!3039 lt!25325)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!40244 () Bool)

(assert (=> b!61247 (=> (not res!33776) (not e!40244))))

(declare-fun bm!4709 () Bool)

(assert (=> bm!4709 (= call!4714 (arrayContainsKey!0 (_keys!3695 newMap!16) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!61248 () Bool)

(declare-fun Unit!1644 () Unit!1625)

(assert (=> b!61248 (= e!40243 Unit!1644)))

(declare-fun lt!25331 () Unit!1625)

(declare-fun lemmaArrayContainsKeyThenInListMap!6 (array!3747 array!3749 (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 (_ BitVec 64) (_ BitVec 32) Int) Unit!1625)

(assert (=> b!61248 (= lt!25331 (lemmaArrayContainsKeyThenInListMap!6 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(assert (=> b!61248 (contains!686 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355))))

(declare-fun lt!25328 () Unit!1625)

(assert (=> b!61248 (= lt!25328 lt!25331)))

(assert (=> b!61248 false))

(declare-fun b!61249 () Bool)

(assert (=> b!61249 (= e!40244 (not call!4714))))

(declare-fun call!4713 () SeekEntryResult!228)

(declare-fun bm!4710 () Bool)

(assert (=> bm!4710 (= call!4713 (seekEntryOrOpen!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (_keys!3695 newMap!16) (mask!5963 newMap!16)))))

(declare-fun b!61250 () Bool)

(assert (=> b!61250 (= e!40247 e!40244)))

(declare-fun res!33773 () Bool)

(assert (=> b!61250 (= res!33773 call!4715)))

(assert (=> b!61250 (=> (not res!33773) (not e!40244))))

(declare-fun b!61251 () Bool)

(declare-fun c!8019 () Bool)

(assert (=> b!61251 (= c!8019 ((_ is MissingVacant!228) lt!25325))))

(assert (=> b!61251 (= e!40248 e!40247)))

(declare-fun b!61252 () Bool)

(declare-fun lt!25317 () Unit!1625)

(assert (=> b!61252 (= e!40245 lt!25317)))

(assert (=> b!61252 (= lt!25317 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!16 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (defaultEntry!2067 newMap!16)))))

(assert (=> b!61252 (= lt!25325 call!4713)))

(declare-fun c!8017 () Bool)

(assert (=> b!61252 (= c!8017 ((_ is MissingZero!228) lt!25325))))

(assert (=> b!61252 e!40248))

(declare-fun b!61253 () Bool)

(assert (=> b!61253 (= e!40250 (= (map!1112 (_2!1026 lt!25311)) (+!82 (map!1112 newMap!16) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!61254 () Bool)

(declare-fun res!33772 () Bool)

(declare-fun call!4712 () Bool)

(assert (=> b!61254 (= res!33772 call!4712)))

(declare-fun e!40246 () Bool)

(assert (=> b!61254 (=> (not res!33772) (not e!40246))))

(declare-fun b!61255 () Bool)

(declare-fun res!33778 () Bool)

(assert (=> b!61255 (=> (not res!33778) (not e!40250))))

(assert (=> b!61255 (= res!33778 (contains!686 (map!1112 (_2!1026 lt!25311)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(declare-fun b!61256 () Bool)

(declare-fun res!33775 () Bool)

(assert (=> b!61256 (=> (not res!33775) (not e!40250))))

(assert (=> b!61256 (= res!33775 (valid!260 (_2!1026 lt!25311)))))

(declare-fun b!61257 () Bool)

(declare-fun Unit!1645 () Unit!1625)

(assert (=> b!61257 (= e!40245 Unit!1645)))

(declare-fun lt!25332 () Unit!1625)

(assert (=> b!61257 (= lt!25332 (lemmaInListMapThenSeekEntryOrOpenFindsIt!16 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25308 () SeekEntryResult!228)

(assert (=> b!61257 (= lt!25308 call!4713)))

(declare-fun res!33774 () Bool)

(assert (=> b!61257 (= res!33774 ((_ is Found!228) lt!25308))))

(assert (=> b!61257 (=> (not res!33774) (not e!40246))))

(assert (=> b!61257 e!40246))

(declare-fun lt!25314 () Unit!1625)

(assert (=> b!61257 (= lt!25314 lt!25332)))

(assert (=> b!61257 false))

(declare-fun b!61258 () Bool)

(assert (=> b!61258 (= e!40246 (= (select (arr!1793 (_keys!3695 newMap!16)) (index!3037 lt!25308)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(declare-fun bm!4711 () Bool)

(assert (=> bm!4711 (= call!4715 call!4712)))

(declare-fun b!61259 () Bool)

(declare-fun Unit!1646 () Unit!1625)

(assert (=> b!61259 (= e!40243 Unit!1646)))

(declare-fun bm!4712 () Bool)

(assert (=> bm!4712 (= call!4712 (inRange!0 (ite c!8016 (index!3037 lt!25308) (ite c!8017 (index!3036 lt!25325) (index!3039 lt!25325))) (mask!5963 newMap!16)))))

(assert (= (and d!12099 c!8016) b!61257))

(assert (= (and d!12099 (not c!8016)) b!61252))

(assert (= (and b!61257 res!33774) b!61254))

(assert (= (and b!61254 res!33772) b!61258))

(assert (= (and b!61252 c!8017) b!61246))

(assert (= (and b!61252 (not c!8017)) b!61251))

(assert (= (and b!61246 res!33770) b!61245))

(assert (= (and b!61245 res!33771) b!61244))

(assert (= (and b!61251 c!8019) b!61250))

(assert (= (and b!61251 (not c!8019)) b!61243))

(assert (= (and b!61250 res!33773) b!61247))

(assert (= (and b!61247 res!33776) b!61249))

(assert (= (or b!61246 b!61250) bm!4711))

(assert (= (or b!61244 b!61249) bm!4709))

(assert (= (or b!61254 bm!4711) bm!4712))

(assert (= (or b!61257 b!61252) bm!4710))

(assert (= (and d!12099 c!8018) b!61248))

(assert (= (and d!12099 (not c!8018)) b!61259))

(assert (= (and d!12099 res!33777) b!61256))

(assert (= (and b!61256 res!33775) b!61255))

(assert (= (and b!61255 res!33778) b!61253))

(assert (=> d!12099 m!53313))

(declare-fun m!54099 () Bool)

(assert (=> d!12099 m!54099))

(declare-fun m!54101 () Bool)

(assert (=> d!12099 m!54101))

(assert (=> d!12099 m!53355))

(declare-fun m!54103 () Bool)

(assert (=> d!12099 m!54103))

(declare-fun m!54105 () Bool)

(assert (=> d!12099 m!54105))

(declare-fun m!54107 () Bool)

(assert (=> d!12099 m!54107))

(assert (=> d!12099 m!53489))

(assert (=> d!12099 m!53313))

(declare-fun m!54109 () Bool)

(assert (=> d!12099 m!54109))

(assert (=> d!12099 m!53313))

(declare-fun m!54111 () Bool)

(assert (=> d!12099 m!54111))

(assert (=> d!12099 m!53313))

(assert (=> d!12099 m!53467))

(assert (=> d!12099 m!53547))

(assert (=> d!12099 m!54105))

(declare-fun m!54113 () Bool)

(assert (=> d!12099 m!54113))

(assert (=> d!12099 m!53313))

(declare-fun m!54115 () Bool)

(assert (=> d!12099 m!54115))

(declare-fun m!54117 () Bool)

(assert (=> d!12099 m!54117))

(assert (=> d!12099 m!53313))

(declare-fun m!54119 () Bool)

(assert (=> d!12099 m!54119))

(assert (=> d!12099 m!53489))

(assert (=> d!12099 m!54077))

(declare-fun m!54121 () Bool)

(assert (=> d!12099 m!54121))

(assert (=> d!12099 m!53313))

(declare-fun m!54123 () Bool)

(assert (=> d!12099 m!54123))

(declare-fun m!54125 () Bool)

(assert (=> d!12099 m!54125))

(assert (=> d!12099 m!54103))

(assert (=> d!12099 m!53313))

(assert (=> d!12099 m!53337))

(declare-fun m!54127 () Bool)

(assert (=> d!12099 m!54127))

(declare-fun m!54129 () Bool)

(assert (=> d!12099 m!54129))

(declare-fun m!54131 () Bool)

(assert (=> d!12099 m!54131))

(assert (=> d!12099 m!53489))

(declare-fun m!54133 () Bool)

(assert (=> d!12099 m!54133))

(declare-fun m!54135 () Bool)

(assert (=> d!12099 m!54135))

(assert (=> bm!4710 m!53313))

(assert (=> bm!4710 m!53429))

(declare-fun m!54137 () Bool)

(assert (=> b!61255 m!54137))

(assert (=> b!61255 m!54137))

(assert (=> b!61255 m!53313))

(declare-fun m!54139 () Bool)

(assert (=> b!61255 m!54139))

(declare-fun m!54141 () Bool)

(assert (=> b!61247 m!54141))

(declare-fun m!54143 () Bool)

(assert (=> bm!4712 m!54143))

(assert (=> b!61252 m!53313))

(assert (=> b!61252 m!53451))

(declare-fun m!54145 () Bool)

(assert (=> b!61258 m!54145))

(declare-fun m!54147 () Bool)

(assert (=> b!61245 m!54147))

(assert (=> b!61253 m!54137))

(assert (=> b!61253 m!53315))

(assert (=> b!61253 m!53315))

(declare-fun m!54149 () Bool)

(assert (=> b!61253 m!54149))

(assert (=> b!61248 m!53313))

(declare-fun m!54151 () Bool)

(assert (=> b!61248 m!54151))

(assert (=> b!61248 m!53489))

(assert (=> b!61248 m!53489))

(assert (=> b!61248 m!53313))

(assert (=> b!61248 m!54109))

(declare-fun m!54153 () Bool)

(assert (=> b!61256 m!54153))

(assert (=> bm!4709 m!53313))

(assert (=> bm!4709 m!53467))

(assert (=> b!61257 m!53313))

(assert (=> b!61257 m!53465))

(assert (=> bm!4619 d!12099))

(declare-fun b!61268 () Bool)

(declare-fun e!40258 () Bool)

(declare-fun e!40257 () Bool)

(assert (=> b!61268 (= e!40258 e!40257)))

(declare-fun lt!25341 () (_ BitVec 64))

(assert (=> b!61268 (= lt!25341 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25342 () Unit!1625)

(assert (=> b!61268 (= lt!25342 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3695 newMap!16) lt!25341 #b00000000000000000000000000000000))))

(assert (=> b!61268 (arrayContainsKey!0 (_keys!3695 newMap!16) lt!25341 #b00000000000000000000000000000000)))

(declare-fun lt!25340 () Unit!1625)

(assert (=> b!61268 (= lt!25340 lt!25342)))

(declare-fun res!33783 () Bool)

(assert (=> b!61268 (= res!33783 (= (seekEntryOrOpen!0 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000) (_keys!3695 newMap!16) (mask!5963 newMap!16)) (Found!228 #b00000000000000000000000000000000)))))

(assert (=> b!61268 (=> (not res!33783) (not e!40257))))

(declare-fun d!12101 () Bool)

(declare-fun res!33784 () Bool)

(declare-fun e!40259 () Bool)

(assert (=> d!12101 (=> res!33784 e!40259)))

(assert (=> d!12101 (= res!33784 (bvsge #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(assert (=> d!12101 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3695 newMap!16) (mask!5963 newMap!16)) e!40259)))

(declare-fun b!61269 () Bool)

(declare-fun call!4718 () Bool)

(assert (=> b!61269 (= e!40258 call!4718)))

(declare-fun b!61270 () Bool)

(assert (=> b!61270 (= e!40257 call!4718)))

(declare-fun b!61271 () Bool)

(assert (=> b!61271 (= e!40259 e!40258)))

(declare-fun c!8022 () Bool)

(assert (=> b!61271 (= c!8022 (validKeyInArray!0 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!4715 () Bool)

(assert (=> bm!4715 (= call!4718 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3695 newMap!16) (mask!5963 newMap!16)))))

(assert (= (and d!12101 (not res!33784)) b!61271))

(assert (= (and b!61271 c!8022) b!61268))

(assert (= (and b!61271 (not c!8022)) b!61269))

(assert (= (and b!61268 res!33783) b!61270))

(assert (= (or b!61270 b!61269) bm!4715))

(assert (=> b!61268 m!53617))

(declare-fun m!54155 () Bool)

(assert (=> b!61268 m!54155))

(declare-fun m!54157 () Bool)

(assert (=> b!61268 m!54157))

(assert (=> b!61268 m!53617))

(declare-fun m!54159 () Bool)

(assert (=> b!61268 m!54159))

(assert (=> b!61271 m!53617))

(assert (=> b!61271 m!53617))

(assert (=> b!61271 m!53641))

(declare-fun m!54161 () Bool)

(assert (=> bm!4715 m!54161))

(assert (=> b!60896 d!12101))

(declare-fun b!61272 () Bool)

(declare-fun e!40260 () Bool)

(assert (=> b!61272 (= e!40260 tp_is_empty!2409)))

(declare-fun b!61273 () Bool)

(declare-fun e!40261 () Bool)

(assert (=> b!61273 (= e!40261 tp_is_empty!2409)))

(declare-fun condMapEmpty!2929 () Bool)

(declare-fun mapDefault!2929 () ValueCell!861)

(assert (=> mapNonEmpty!2927 (= condMapEmpty!2929 (= mapRest!2927 ((as const (Array (_ BitVec 32) ValueCell!861)) mapDefault!2929)))))

(declare-fun mapRes!2929 () Bool)

(assert (=> mapNonEmpty!2927 (= tp!8093 (and e!40261 mapRes!2929))))

(declare-fun mapNonEmpty!2929 () Bool)

(declare-fun tp!8095 () Bool)

(assert (=> mapNonEmpty!2929 (= mapRes!2929 (and tp!8095 e!40260))))

(declare-fun mapKey!2929 () (_ BitVec 32))

(declare-fun mapValue!2929 () ValueCell!861)

(declare-fun mapRest!2929 () (Array (_ BitVec 32) ValueCell!861))

(assert (=> mapNonEmpty!2929 (= mapRest!2927 (store mapRest!2929 mapKey!2929 mapValue!2929))))

(declare-fun mapIsEmpty!2929 () Bool)

(assert (=> mapIsEmpty!2929 mapRes!2929))

(assert (= (and mapNonEmpty!2927 condMapEmpty!2929) mapIsEmpty!2929))

(assert (= (and mapNonEmpty!2927 (not condMapEmpty!2929)) mapNonEmpty!2929))

(assert (= (and mapNonEmpty!2929 ((_ is ValueCellFull!861) mapValue!2929)) b!61272))

(assert (= (and mapNonEmpty!2927 ((_ is ValueCellFull!861) mapDefault!2929)) b!61273))

(declare-fun m!54163 () Bool)

(assert (=> mapNonEmpty!2929 m!54163))

(declare-fun b!61274 () Bool)

(declare-fun e!40262 () Bool)

(assert (=> b!61274 (= e!40262 tp_is_empty!2409)))

(declare-fun b!61275 () Bool)

(declare-fun e!40263 () Bool)

(assert (=> b!61275 (= e!40263 tp_is_empty!2409)))

(declare-fun condMapEmpty!2930 () Bool)

(declare-fun mapDefault!2930 () ValueCell!861)

(assert (=> mapNonEmpty!2928 (= condMapEmpty!2930 (= mapRest!2928 ((as const (Array (_ BitVec 32) ValueCell!861)) mapDefault!2930)))))

(declare-fun mapRes!2930 () Bool)

(assert (=> mapNonEmpty!2928 (= tp!8094 (and e!40263 mapRes!2930))))

(declare-fun mapNonEmpty!2930 () Bool)

(declare-fun tp!8096 () Bool)

(assert (=> mapNonEmpty!2930 (= mapRes!2930 (and tp!8096 e!40262))))

(declare-fun mapKey!2930 () (_ BitVec 32))

(declare-fun mapRest!2930 () (Array (_ BitVec 32) ValueCell!861))

(declare-fun mapValue!2930 () ValueCell!861)

(assert (=> mapNonEmpty!2930 (= mapRest!2928 (store mapRest!2930 mapKey!2930 mapValue!2930))))

(declare-fun mapIsEmpty!2930 () Bool)

(assert (=> mapIsEmpty!2930 mapRes!2930))

(assert (= (and mapNonEmpty!2928 condMapEmpty!2930) mapIsEmpty!2930))

(assert (= (and mapNonEmpty!2928 (not condMapEmpty!2930)) mapNonEmpty!2930))

(assert (= (and mapNonEmpty!2930 ((_ is ValueCellFull!861) mapValue!2930)) b!61274))

(assert (= (and mapNonEmpty!2928 ((_ is ValueCellFull!861) mapDefault!2930)) b!61275))

(declare-fun m!54165 () Bool)

(assert (=> mapNonEmpty!2930 m!54165))

(declare-fun b_lambda!2707 () Bool)

(assert (= b_lambda!2697 (or (and b!60606 b_free!1985 (= (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) (defaultEntry!2067 newMap!16))) (and b!60590 b_free!1987) b_lambda!2707)))

(declare-fun b_lambda!2709 () Bool)

(assert (= b_lambda!2701 (or (and b!60606 b_free!1985) (and b!60590 b_free!1987 (= (defaultEntry!2067 newMap!16) (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))))) b_lambda!2709)))

(declare-fun b_lambda!2711 () Bool)

(assert (= b_lambda!2705 (or (and b!60606 b_free!1985 (= (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) (defaultEntry!2067 newMap!16))) (and b!60590 b_free!1987) b_lambda!2711)))

(declare-fun b_lambda!2713 () Bool)

(assert (= b_lambda!2699 (or (and b!60606 b_free!1985) (and b!60590 b_free!1987 (= (defaultEntry!2067 newMap!16) (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))))) b_lambda!2713)))

(declare-fun b_lambda!2715 () Bool)

(assert (= b_lambda!2695 (or (and b!60606 b_free!1985 (= (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) (defaultEntry!2067 newMap!16))) (and b!60590 b_free!1987) b_lambda!2715)))

(declare-fun b_lambda!2717 () Bool)

(assert (= b_lambda!2703 (or (and b!60606 b_free!1985 (= (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) (defaultEntry!2067 newMap!16))) (and b!60590 b_free!1987) b_lambda!2717)))

(check-sat (not b!61139) (not b!61186) (not b!61096) (not d!12017) (not b!61104) (not b!61142) (not b!60934) (not b!60989) (not d!11997) (not d!12091) (not b!60928) (not d!12093) (not bm!4698) b_and!3733 b_and!3731 (not bm!4686) (not d!12079) (not b!60961) (not bm!4692) (not bm!4670) (not d!12075) (not bm!4671) (not b!60945) (not b_lambda!2689) (not b!61099) (not b!61208) (not b!61255) (not b!60986) (not b!61193) (not b!61125) (not b!61169) (not b!61134) (not b!61174) (not b!61130) (not d!12071) (not b!61001) (not bm!4690) (not d!12059) (not d!12043) (not d!12039) (not b!60939) (not b!61100) (not bm!4675) (not d!12033) (not d!12095) (not b!61036) (not b!60935) (not b!61136) (not b!61179) (not b!61038) (not b!61020) (not bm!4710) (not b_lambda!2711) (not b!61093) (not b!60951) (not bm!4709) (not b!60995) (not b!61035) (not b!61124) (not b!61256) (not b_lambda!2709) (not b!61172) (not b!61107) tp_is_empty!2409 (not b!61151) (not b!61167) (not bm!4712) (not b!61204) (not d!12097) (not b!61087) (not b!60947) (not bm!4693) (not b!60988) (not d!12023) (not b!61271) (not b!60997) (not d!11987) (not b!61171) (not b_next!1987) (not bm!4665) (not bm!4689) (not d!12073) (not b!61188) (not bm!4662) (not d!12067) (not b!61106) (not d!11983) (not d!11993) (not bm!4694) (not b!61080) (not bm!4715) (not b!61122) (not b!61248) (not b!61079) (not b_lambda!2693) (not b_lambda!2713) (not d!12051) (not b!61111) (not b!61206) (not bm!4678) (not b!61075) (not b!61184) (not d!12055) (not d!11979) (not d!12037) (not d!12069) (not b!60941) (not b!61108) (not b_next!1985) (not b!61126) (not b!61190) (not b!61040) (not b!61207) (not d!12027) (not b!61138) (not d!12047) (not b!61082) (not bm!4682) (not bm!4681) (not bm!4700) (not b!61084) (not b!61180) (not b!60993) (not b!60924) (not d!12021) (not b!61176) (not b!61021) (not b!61090) (not b!60927) (not bm!4697) (not b!61170) (not b_lambda!2707) (not d!11977) (not d!11973) (not d!11989) (not b!61086) (not b!61031) (not d!12053) (not d!12081) (not b_lambda!2715) (not d!12029) (not b!60931) (not d!12019) (not b_lambda!2717) (not b!61166) (not b!61103) (not b!61046) (not b!61257) (not d!12007) (not b!60948) (not b!61097) (not d!11981) (not b!61101) (not b!61163) (not b!61192) (not bm!4676) (not b!61089) (not b!61014) (not b!61268) (not b!61196) (not d!12061) (not bm!4672) (not b!61253) (not b!61085) (not mapNonEmpty!2930) (not b!60943) (not b!61005) (not b!60929) (not b!61077) (not d!12089) (not b!61088) (not b!61162) (not d!12099) (not b!61102) (not b!61002) (not b!61203) (not mapNonEmpty!2929) (not b!61132) (not d!12011) (not b!61091) (not b!60999) (not b!60926) (not bm!4663) (not d!12035) (not d!11971) (not d!11991) (not d!12015) (not d!12025) (not d!12009) (not bm!4659) (not b!60932) (not d!12065) (not bm!4685) (not d!12031) (not d!12041) (not d!12087) (not b!61252) (not d!12013))
(check-sat b_and!3731 b_and!3733 (not b_next!1985) (not b_next!1987))
(get-model)

(declare-fun d!12103 () Bool)

(assert (=> d!12103 (= (apply!67 lt!25169 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1078 (getValueByKey!125 (toList!700 lt!25169) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2660 () Bool)

(assert (= bs!2660 d!12103))

(declare-fun m!54167 () Bool)

(assert (=> bs!2660 m!54167))

(assert (=> bs!2660 m!54167))

(declare-fun m!54169 () Bool)

(assert (=> bs!2660 m!54169))

(assert (=> b!61132 d!12103))

(declare-fun d!12105 () Bool)

(assert (=> d!12105 (= (map!1112 (_2!1026 lt!25311)) (getCurrentListMap!405 (_keys!3695 (_2!1026 lt!25311)) (_values!2050 (_2!1026 lt!25311)) (mask!5963 (_2!1026 lt!25311)) (extraKeys!1950 (_2!1026 lt!25311)) (zeroValue!1981 (_2!1026 lt!25311)) (minValue!1981 (_2!1026 lt!25311)) #b00000000000000000000000000000000 (defaultEntry!2067 (_2!1026 lt!25311))))))

(declare-fun bs!2661 () Bool)

(assert (= bs!2661 d!12105))

(declare-fun m!54171 () Bool)

(assert (=> bs!2661 m!54171))

(assert (=> b!61253 d!12105))

(declare-fun d!12107 () Bool)

(declare-fun e!40264 () Bool)

(assert (=> d!12107 e!40264))

(declare-fun res!33785 () Bool)

(assert (=> d!12107 (=> (not res!33785) (not e!40264))))

(declare-fun lt!25344 () ListLongMap!1369)

(assert (=> d!12107 (= res!33785 (contains!686 lt!25344 (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!25345 () List!1436)

(assert (=> d!12107 (= lt!25344 (ListLongMap!1370 lt!25345))))

(declare-fun lt!25343 () Unit!1625)

(declare-fun lt!25346 () Unit!1625)

(assert (=> d!12107 (= lt!25343 lt!25346)))

(assert (=> d!12107 (= (getValueByKey!125 lt!25345 (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12107 (= lt!25346 (lemmaContainsTupThenGetReturnValue!42 lt!25345 (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12107 (= lt!25345 (insertStrictlySorted!45 (toList!700 (map!1112 newMap!16)) (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12107 (= (+!82 (map!1112 newMap!16) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!25344)))

(declare-fun b!61276 () Bool)

(declare-fun res!33786 () Bool)

(assert (=> b!61276 (=> (not res!33786) (not e!40264))))

(assert (=> b!61276 (= res!33786 (= (getValueByKey!125 (toList!700 lt!25344) (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!61277 () Bool)

(assert (=> b!61277 (= e!40264 (contains!688 (toList!700 lt!25344) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12107 res!33785) b!61276))

(assert (= (and b!61276 res!33786) b!61277))

(declare-fun m!54173 () Bool)

(assert (=> d!12107 m!54173))

(declare-fun m!54175 () Bool)

(assert (=> d!12107 m!54175))

(declare-fun m!54177 () Bool)

(assert (=> d!12107 m!54177))

(declare-fun m!54179 () Bool)

(assert (=> d!12107 m!54179))

(declare-fun m!54181 () Bool)

(assert (=> b!61276 m!54181))

(declare-fun m!54183 () Bool)

(assert (=> b!61277 m!54183))

(assert (=> b!61253 d!12107))

(assert (=> b!61253 d!11965))

(declare-fun d!12109 () Bool)

(assert (=> d!12109 (= (validKeyInArray!0 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) (and (not (= (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!61036 d!12109))

(declare-fun d!12111 () Bool)

(assert (=> d!12111 (= (content!65 Nil!1434) ((as const (Array (_ BitVec 64) Bool)) false))))

(assert (=> d!12007 d!12111))

(declare-fun d!12113 () Bool)

(assert (=> d!12113 (= (isDefined!78 (getValueByKey!125 (toList!700 (+!82 lt!25006 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25009)) (not (isEmpty!297 (getValueByKey!125 (toList!700 (+!82 lt!25006 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25009))))))

(declare-fun bs!2662 () Bool)

(assert (= bs!2662 d!12113))

(assert (=> bs!2662 m!53811))

(declare-fun m!54185 () Bool)

(assert (=> bs!2662 m!54185))

(assert (=> b!61093 d!12113))

(declare-fun b!61278 () Bool)

(declare-fun e!40265 () Option!131)

(assert (=> b!61278 (= e!40265 (Some!130 (_2!1027 (h!2014 (toList!700 (+!82 lt!25006 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))))))))

(declare-fun d!12115 () Bool)

(declare-fun c!8023 () Bool)

(assert (=> d!12115 (= c!8023 (and ((_ is Cons!1432) (toList!700 (+!82 lt!25006 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))) (= (_1!1027 (h!2014 (toList!700 (+!82 lt!25006 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))) lt!25009)))))

(assert (=> d!12115 (= (getValueByKey!125 (toList!700 (+!82 lt!25006 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25009) e!40265)))

(declare-fun b!61279 () Bool)

(declare-fun e!40266 () Option!131)

(assert (=> b!61279 (= e!40265 e!40266)))

(declare-fun c!8024 () Bool)

(assert (=> b!61279 (= c!8024 (and ((_ is Cons!1432) (toList!700 (+!82 lt!25006 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))) (not (= (_1!1027 (h!2014 (toList!700 (+!82 lt!25006 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))) lt!25009))))))

(declare-fun b!61281 () Bool)

(assert (=> b!61281 (= e!40266 None!129)))

(declare-fun b!61280 () Bool)

(assert (=> b!61280 (= e!40266 (getValueByKey!125 (t!4806 (toList!700 (+!82 lt!25006 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))) lt!25009))))

(assert (= (and d!12115 c!8023) b!61278))

(assert (= (and d!12115 (not c!8023)) b!61279))

(assert (= (and b!61279 c!8024) b!61280))

(assert (= (and b!61279 (not c!8024)) b!61281))

(declare-fun m!54187 () Bool)

(assert (=> b!61280 m!54187))

(assert (=> b!61093 d!12115))

(declare-fun b!61282 () Bool)

(declare-fun e!40268 () Bool)

(declare-fun e!40273 () Bool)

(assert (=> b!61282 (= e!40268 e!40273)))

(assert (=> b!61282 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(declare-fun res!33787 () Bool)

(declare-fun lt!25347 () ListLongMap!1369)

(assert (=> b!61282 (= res!33787 (contains!686 lt!25347 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61282 (=> (not res!33787) (not e!40273))))

(declare-fun b!61283 () Bool)

(declare-fun e!40270 () Bool)

(assert (=> b!61283 (= e!40268 e!40270)))

(declare-fun c!8028 () Bool)

(assert (=> b!61283 (= c!8028 (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(declare-fun b!61284 () Bool)

(assert (=> b!61284 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(assert (=> b!61284 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2025 (_values!2050 newMap!16))))))

(assert (=> b!61284 (= e!40273 (= (apply!67 lt!25347 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) (get!1075 (select (arr!1794 (_values!2050 newMap!16)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!12117 () Bool)

(declare-fun e!40272 () Bool)

(assert (=> d!12117 e!40272))

(declare-fun res!33789 () Bool)

(assert (=> d!12117 (=> (not res!33789) (not e!40272))))

(assert (=> d!12117 (= res!33789 (not (contains!686 lt!25347 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!40267 () ListLongMap!1369)

(assert (=> d!12117 (= lt!25347 e!40267)))

(declare-fun c!8027 () Bool)

(assert (=> d!12117 (= c!8027 (bvsge #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(assert (=> d!12117 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12117 (= (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) lt!25347)))

(declare-fun b!61285 () Bool)

(assert (=> b!61285 (= e!40272 e!40268)))

(declare-fun c!8025 () Bool)

(declare-fun e!40269 () Bool)

(assert (=> b!61285 (= c!8025 e!40269)))

(declare-fun res!33788 () Bool)

(assert (=> b!61285 (=> (not res!33788) (not e!40269))))

(assert (=> b!61285 (= res!33788 (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(declare-fun b!61286 () Bool)

(declare-fun e!40271 () ListLongMap!1369)

(assert (=> b!61286 (= e!40267 e!40271)))

(declare-fun c!8026 () Bool)

(assert (=> b!61286 (= c!8026 (validKeyInArray!0 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61287 () Bool)

(assert (=> b!61287 (= e!40270 (= lt!25347 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2067 newMap!16))))))

(declare-fun b!61288 () Bool)

(declare-fun call!4719 () ListLongMap!1369)

(assert (=> b!61288 (= e!40271 call!4719)))

(declare-fun bm!4716 () Bool)

(assert (=> bm!4716 (= call!4719 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2067 newMap!16)))))

(declare-fun b!61289 () Bool)

(assert (=> b!61289 (= e!40269 (validKeyInArray!0 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61289 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!61290 () Bool)

(assert (=> b!61290 (= e!40267 (ListLongMap!1370 Nil!1433))))

(declare-fun b!61291 () Bool)

(declare-fun res!33790 () Bool)

(assert (=> b!61291 (=> (not res!33790) (not e!40272))))

(assert (=> b!61291 (= res!33790 (not (contains!686 lt!25347 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!61292 () Bool)

(assert (=> b!61292 (= e!40270 (isEmpty!296 lt!25347))))

(declare-fun b!61293 () Bool)

(declare-fun lt!25353 () Unit!1625)

(declare-fun lt!25349 () Unit!1625)

(assert (=> b!61293 (= lt!25353 lt!25349)))

(declare-fun lt!25351 () V!2859)

(declare-fun lt!25352 () (_ BitVec 64))

(declare-fun lt!25348 () (_ BitVec 64))

(declare-fun lt!25350 () ListLongMap!1369)

(assert (=> b!61293 (not (contains!686 (+!82 lt!25350 (tuple2!2033 lt!25348 lt!25351)) lt!25352))))

(assert (=> b!61293 (= lt!25349 (addStillNotContains!16 lt!25350 lt!25348 lt!25351 lt!25352))))

(assert (=> b!61293 (= lt!25352 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!61293 (= lt!25351 (get!1075 (select (arr!1794 (_values!2050 newMap!16)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!61293 (= lt!25348 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!61293 (= lt!25350 call!4719)))

(assert (=> b!61293 (= e!40271 (+!82 call!4719 (tuple2!2033 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000) (get!1075 (select (arr!1794 (_values!2050 newMap!16)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12117 c!8027) b!61290))

(assert (= (and d!12117 (not c!8027)) b!61286))

(assert (= (and b!61286 c!8026) b!61293))

(assert (= (and b!61286 (not c!8026)) b!61288))

(assert (= (or b!61293 b!61288) bm!4716))

(assert (= (and d!12117 res!33789) b!61291))

(assert (= (and b!61291 res!33790) b!61285))

(assert (= (and b!61285 res!33788) b!61289))

(assert (= (and b!61285 c!8025) b!61282))

(assert (= (and b!61285 (not c!8025)) b!61283))

(assert (= (and b!61282 res!33787) b!61284))

(assert (= (and b!61283 c!8028) b!61287))

(assert (= (and b!61283 (not c!8028)) b!61292))

(declare-fun b_lambda!2719 () Bool)

(assert (=> (not b_lambda!2719) (not b!61284)))

(assert (=> b!61284 t!4813))

(declare-fun b_and!3735 () Bool)

(assert (= b_and!3731 (and (=> t!4813 result!2427) b_and!3735)))

(assert (=> b!61284 t!4815))

(declare-fun b_and!3737 () Bool)

(assert (= b_and!3733 (and (=> t!4815 result!2429) b_and!3737)))

(declare-fun b_lambda!2721 () Bool)

(assert (=> (not b_lambda!2721) (not b!61293)))

(assert (=> b!61293 t!4813))

(declare-fun b_and!3739 () Bool)

(assert (= b_and!3735 (and (=> t!4813 result!2427) b_and!3739)))

(assert (=> b!61293 t!4815))

(declare-fun b_and!3741 () Bool)

(assert (= b_and!3737 (and (=> t!4815 result!2429) b_and!3741)))

(assert (=> b!61286 m!53617))

(assert (=> b!61286 m!53617))

(assert (=> b!61286 m!53641))

(declare-fun m!54189 () Bool)

(assert (=> b!61293 m!54189))

(declare-fun m!54191 () Bool)

(assert (=> b!61293 m!54191))

(declare-fun m!54193 () Bool)

(assert (=> b!61293 m!54193))

(assert (=> b!61293 m!53647))

(assert (=> b!61293 m!53617))

(assert (=> b!61293 m!53645))

(assert (=> b!61293 m!54191))

(declare-fun m!54195 () Bool)

(assert (=> b!61293 m!54195))

(assert (=> b!61293 m!53645))

(assert (=> b!61293 m!53647))

(assert (=> b!61293 m!53649))

(declare-fun m!54197 () Bool)

(assert (=> b!61291 m!54197))

(declare-fun m!54199 () Bool)

(assert (=> d!12117 m!54199))

(assert (=> d!12117 m!53559))

(assert (=> b!61282 m!53617))

(assert (=> b!61282 m!53617))

(declare-fun m!54201 () Bool)

(assert (=> b!61282 m!54201))

(declare-fun m!54203 () Bool)

(assert (=> b!61292 m!54203))

(declare-fun m!54205 () Bool)

(assert (=> b!61287 m!54205))

(assert (=> bm!4716 m!54205))

(assert (=> b!61289 m!53617))

(assert (=> b!61289 m!53617))

(assert (=> b!61289 m!53641))

(assert (=> b!61284 m!53647))

(assert (=> b!61284 m!53617))

(assert (=> b!61284 m!53645))

(assert (=> b!61284 m!53645))

(assert (=> b!61284 m!53647))

(assert (=> b!61284 m!53649))

(assert (=> b!61284 m!53617))

(declare-fun m!54207 () Bool)

(assert (=> b!61284 m!54207))

(assert (=> bm!4675 d!12117))

(declare-fun d!12119 () Bool)

(assert (=> d!12119 (= (apply!67 lt!25037 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) (get!1078 (getValueByKey!125 (toList!700 lt!25037) (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2663 () Bool)

(assert (= bs!2663 d!12119))

(assert (=> bs!2663 m!53617))

(declare-fun m!54209 () Bool)

(assert (=> bs!2663 m!54209))

(assert (=> bs!2663 m!54209))

(declare-fun m!54211 () Bool)

(assert (=> bs!2663 m!54211))

(assert (=> b!60947 d!12119))

(declare-fun d!12121 () Bool)

(declare-fun c!8029 () Bool)

(assert (=> d!12121 (= c!8029 ((_ is ValueCellFull!861) (select (arr!1794 (_values!2050 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!40274 () V!2859)

(assert (=> d!12121 (= (get!1075 (select (arr!1794 (_values!2050 newMap!16)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!40274)))

(declare-fun b!61294 () Bool)

(assert (=> b!61294 (= e!40274 (get!1076 (select (arr!1794 (_values!2050 newMap!16)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!61295 () Bool)

(assert (=> b!61295 (= e!40274 (get!1077 (select (arr!1794 (_values!2050 newMap!16)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12121 c!8029) b!61294))

(assert (= (and d!12121 (not c!8029)) b!61295))

(assert (=> b!61294 m!53645))

(assert (=> b!61294 m!53647))

(declare-fun m!54213 () Bool)

(assert (=> b!61294 m!54213))

(assert (=> b!61295 m!53645))

(assert (=> b!61295 m!53647))

(declare-fun m!54215 () Bool)

(assert (=> b!61295 m!54215))

(assert (=> b!60947 d!12121))

(declare-fun d!12123 () Bool)

(assert (=> d!12123 (= (validMask!0 (mask!5963 newMap!16)) (and (or (= (mask!5963 newMap!16) #b00000000000000000000000000000111) (= (mask!5963 newMap!16) #b00000000000000000000000000001111) (= (mask!5963 newMap!16) #b00000000000000000000000000011111) (= (mask!5963 newMap!16) #b00000000000000000000000000111111) (= (mask!5963 newMap!16) #b00000000000000000000000001111111) (= (mask!5963 newMap!16) #b00000000000000000000000011111111) (= (mask!5963 newMap!16) #b00000000000000000000000111111111) (= (mask!5963 newMap!16) #b00000000000000000000001111111111) (= (mask!5963 newMap!16) #b00000000000000000000011111111111) (= (mask!5963 newMap!16) #b00000000000000000000111111111111) (= (mask!5963 newMap!16) #b00000000000000000001111111111111) (= (mask!5963 newMap!16) #b00000000000000000011111111111111) (= (mask!5963 newMap!16) #b00000000000000000111111111111111) (= (mask!5963 newMap!16) #b00000000000000001111111111111111) (= (mask!5963 newMap!16) #b00000000000000011111111111111111) (= (mask!5963 newMap!16) #b00000000000000111111111111111111) (= (mask!5963 newMap!16) #b00000000000001111111111111111111) (= (mask!5963 newMap!16) #b00000000000011111111111111111111) (= (mask!5963 newMap!16) #b00000000000111111111111111111111) (= (mask!5963 newMap!16) #b00000000001111111111111111111111) (= (mask!5963 newMap!16) #b00000000011111111111111111111111) (= (mask!5963 newMap!16) #b00000000111111111111111111111111) (= (mask!5963 newMap!16) #b00000001111111111111111111111111) (= (mask!5963 newMap!16) #b00000011111111111111111111111111) (= (mask!5963 newMap!16) #b00000111111111111111111111111111) (= (mask!5963 newMap!16) #b00001111111111111111111111111111) (= (mask!5963 newMap!16) #b00011111111111111111111111111111) (= (mask!5963 newMap!16) #b00111111111111111111111111111111)) (bvsle (mask!5963 newMap!16) #b00111111111111111111111111111111)))))

(assert (=> d!11991 d!12123))

(declare-fun d!12125 () Bool)

(assert (=> d!12125 (= (apply!67 (+!82 lt!25226 (tuple2!2033 lt!25213 (zeroValue!1981 newMap!16))) lt!25221) (get!1078 (getValueByKey!125 (toList!700 (+!82 lt!25226 (tuple2!2033 lt!25213 (zeroValue!1981 newMap!16)))) lt!25221)))))

(declare-fun bs!2664 () Bool)

(assert (= bs!2664 d!12125))

(declare-fun m!54217 () Bool)

(assert (=> bs!2664 m!54217))

(assert (=> bs!2664 m!54217))

(declare-fun m!54219 () Bool)

(assert (=> bs!2664 m!54219))

(assert (=> b!61193 d!12125))

(declare-fun d!12127 () Bool)

(assert (=> d!12127 (contains!686 (+!82 lt!25222 (tuple2!2033 lt!25212 (zeroValue!1981 newMap!16))) lt!25225)))

(declare-fun lt!25354 () Unit!1625)

(assert (=> d!12127 (= lt!25354 (choose!319 lt!25222 lt!25212 (zeroValue!1981 newMap!16) lt!25225))))

(assert (=> d!12127 (contains!686 lt!25222 lt!25225)))

(assert (=> d!12127 (= (addStillContains!43 lt!25222 lt!25212 (zeroValue!1981 newMap!16) lt!25225) lt!25354)))

(declare-fun bs!2665 () Bool)

(assert (= bs!2665 d!12127))

(assert (=> bs!2665 m!54027))

(assert (=> bs!2665 m!54027))

(assert (=> bs!2665 m!54029))

(declare-fun m!54221 () Bool)

(assert (=> bs!2665 m!54221))

(declare-fun m!54223 () Bool)

(assert (=> bs!2665 m!54223))

(assert (=> b!61193 d!12127))

(declare-fun d!12129 () Bool)

(assert (=> d!12129 (= (apply!67 (+!82 lt!25214 (tuple2!2033 lt!25224 (minValue!1981 newMap!16))) lt!25223) (get!1078 (getValueByKey!125 (toList!700 (+!82 lt!25214 (tuple2!2033 lt!25224 (minValue!1981 newMap!16)))) lt!25223)))))

(declare-fun bs!2666 () Bool)

(assert (= bs!2666 d!12129))

(declare-fun m!54225 () Bool)

(assert (=> bs!2666 m!54225))

(assert (=> bs!2666 m!54225))

(declare-fun m!54227 () Bool)

(assert (=> bs!2666 m!54227))

(assert (=> b!61193 d!12129))

(declare-fun d!12131 () Bool)

(assert (=> d!12131 (= (apply!67 lt!25214 lt!25223) (get!1078 (getValueByKey!125 (toList!700 lt!25214) lt!25223)))))

(declare-fun bs!2667 () Bool)

(assert (= bs!2667 d!12131))

(declare-fun m!54229 () Bool)

(assert (=> bs!2667 m!54229))

(assert (=> bs!2667 m!54229))

(declare-fun m!54231 () Bool)

(assert (=> bs!2667 m!54231))

(assert (=> b!61193 d!12131))

(declare-fun d!12133 () Bool)

(assert (=> d!12133 (= (apply!67 lt!25226 lt!25221) (get!1078 (getValueByKey!125 (toList!700 lt!25226) lt!25221)))))

(declare-fun bs!2668 () Bool)

(assert (= bs!2668 d!12133))

(declare-fun m!54233 () Bool)

(assert (=> bs!2668 m!54233))

(assert (=> bs!2668 m!54233))

(declare-fun m!54235 () Bool)

(assert (=> bs!2668 m!54235))

(assert (=> b!61193 d!12133))

(declare-fun d!12135 () Bool)

(declare-fun e!40275 () Bool)

(assert (=> d!12135 e!40275))

(declare-fun res!33791 () Bool)

(assert (=> d!12135 (=> (not res!33791) (not e!40275))))

(declare-fun lt!25356 () ListLongMap!1369)

(assert (=> d!12135 (= res!33791 (contains!686 lt!25356 (_1!1027 (tuple2!2033 lt!25217 (minValue!1981 newMap!16)))))))

(declare-fun lt!25357 () List!1436)

(assert (=> d!12135 (= lt!25356 (ListLongMap!1370 lt!25357))))

(declare-fun lt!25355 () Unit!1625)

(declare-fun lt!25358 () Unit!1625)

(assert (=> d!12135 (= lt!25355 lt!25358)))

(assert (=> d!12135 (= (getValueByKey!125 lt!25357 (_1!1027 (tuple2!2033 lt!25217 (minValue!1981 newMap!16)))) (Some!130 (_2!1027 (tuple2!2033 lt!25217 (minValue!1981 newMap!16)))))))

(assert (=> d!12135 (= lt!25358 (lemmaContainsTupThenGetReturnValue!42 lt!25357 (_1!1027 (tuple2!2033 lt!25217 (minValue!1981 newMap!16))) (_2!1027 (tuple2!2033 lt!25217 (minValue!1981 newMap!16)))))))

(assert (=> d!12135 (= lt!25357 (insertStrictlySorted!45 (toList!700 lt!25219) (_1!1027 (tuple2!2033 lt!25217 (minValue!1981 newMap!16))) (_2!1027 (tuple2!2033 lt!25217 (minValue!1981 newMap!16)))))))

(assert (=> d!12135 (= (+!82 lt!25219 (tuple2!2033 lt!25217 (minValue!1981 newMap!16))) lt!25356)))

(declare-fun b!61296 () Bool)

(declare-fun res!33792 () Bool)

(assert (=> b!61296 (=> (not res!33792) (not e!40275))))

(assert (=> b!61296 (= res!33792 (= (getValueByKey!125 (toList!700 lt!25356) (_1!1027 (tuple2!2033 lt!25217 (minValue!1981 newMap!16)))) (Some!130 (_2!1027 (tuple2!2033 lt!25217 (minValue!1981 newMap!16))))))))

(declare-fun b!61297 () Bool)

(assert (=> b!61297 (= e!40275 (contains!688 (toList!700 lt!25356) (tuple2!2033 lt!25217 (minValue!1981 newMap!16))))))

(assert (= (and d!12135 res!33791) b!61296))

(assert (= (and b!61296 res!33792) b!61297))

(declare-fun m!54237 () Bool)

(assert (=> d!12135 m!54237))

(declare-fun m!54239 () Bool)

(assert (=> d!12135 m!54239))

(declare-fun m!54241 () Bool)

(assert (=> d!12135 m!54241))

(declare-fun m!54243 () Bool)

(assert (=> d!12135 m!54243))

(declare-fun m!54245 () Bool)

(assert (=> b!61296 m!54245))

(declare-fun m!54247 () Bool)

(assert (=> b!61297 m!54247))

(assert (=> b!61193 d!12135))

(declare-fun b!61298 () Bool)

(declare-fun e!40277 () Bool)

(declare-fun e!40282 () Bool)

(assert (=> b!61298 (= e!40277 e!40282)))

(assert (=> b!61298 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(declare-fun res!33793 () Bool)

(declare-fun lt!25359 () ListLongMap!1369)

(assert (=> b!61298 (= res!33793 (contains!686 lt!25359 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61298 (=> (not res!33793) (not e!40282))))

(declare-fun b!61299 () Bool)

(declare-fun e!40279 () Bool)

(assert (=> b!61299 (= e!40277 e!40279)))

(declare-fun c!8033 () Bool)

(assert (=> b!61299 (= c!8033 (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(declare-fun b!61300 () Bool)

(assert (=> b!61300 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(assert (=> b!61300 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2025 (array!3750 (store (arr!1794 (_values!2050 newMap!16)) (index!3037 lt!24947) (ValueCellFull!861 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2025 (_values!2050 newMap!16))))))))

(assert (=> b!61300 (= e!40282 (= (apply!67 lt!25359 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) (get!1075 (select (arr!1794 (array!3750 (store (arr!1794 (_values!2050 newMap!16)) (index!3037 lt!24947) (ValueCellFull!861 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2025 (_values!2050 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!12137 () Bool)

(declare-fun e!40281 () Bool)

(assert (=> d!12137 e!40281))

(declare-fun res!33795 () Bool)

(assert (=> d!12137 (=> (not res!33795) (not e!40281))))

(assert (=> d!12137 (= res!33795 (not (contains!686 lt!25359 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!40276 () ListLongMap!1369)

(assert (=> d!12137 (= lt!25359 e!40276)))

(declare-fun c!8032 () Bool)

(assert (=> d!12137 (= c!8032 (bvsge #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(assert (=> d!12137 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12137 (= (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (array!3750 (store (arr!1794 (_values!2050 newMap!16)) (index!3037 lt!24947) (ValueCellFull!861 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2025 (_values!2050 newMap!16))) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) lt!25359)))

(declare-fun b!61301 () Bool)

(assert (=> b!61301 (= e!40281 e!40277)))

(declare-fun c!8030 () Bool)

(declare-fun e!40278 () Bool)

(assert (=> b!61301 (= c!8030 e!40278)))

(declare-fun res!33794 () Bool)

(assert (=> b!61301 (=> (not res!33794) (not e!40278))))

(assert (=> b!61301 (= res!33794 (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(declare-fun b!61302 () Bool)

(declare-fun e!40280 () ListLongMap!1369)

(assert (=> b!61302 (= e!40276 e!40280)))

(declare-fun c!8031 () Bool)

(assert (=> b!61302 (= c!8031 (validKeyInArray!0 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61303 () Bool)

(assert (=> b!61303 (= e!40279 (= lt!25359 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (array!3750 (store (arr!1794 (_values!2050 newMap!16)) (index!3037 lt!24947) (ValueCellFull!861 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2025 (_values!2050 newMap!16))) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2067 newMap!16))))))

(declare-fun b!61304 () Bool)

(declare-fun call!4720 () ListLongMap!1369)

(assert (=> b!61304 (= e!40280 call!4720)))

(declare-fun bm!4717 () Bool)

(assert (=> bm!4717 (= call!4720 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (array!3750 (store (arr!1794 (_values!2050 newMap!16)) (index!3037 lt!24947) (ValueCellFull!861 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2025 (_values!2050 newMap!16))) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2067 newMap!16)))))

(declare-fun b!61305 () Bool)

(assert (=> b!61305 (= e!40278 (validKeyInArray!0 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61305 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!61306 () Bool)

(assert (=> b!61306 (= e!40276 (ListLongMap!1370 Nil!1433))))

(declare-fun b!61307 () Bool)

(declare-fun res!33796 () Bool)

(assert (=> b!61307 (=> (not res!33796) (not e!40281))))

(assert (=> b!61307 (= res!33796 (not (contains!686 lt!25359 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!61308 () Bool)

(assert (=> b!61308 (= e!40279 (isEmpty!296 lt!25359))))

(declare-fun b!61309 () Bool)

(declare-fun lt!25365 () Unit!1625)

(declare-fun lt!25361 () Unit!1625)

(assert (=> b!61309 (= lt!25365 lt!25361)))

(declare-fun lt!25364 () (_ BitVec 64))

(declare-fun lt!25360 () (_ BitVec 64))

(declare-fun lt!25362 () ListLongMap!1369)

(declare-fun lt!25363 () V!2859)

(assert (=> b!61309 (not (contains!686 (+!82 lt!25362 (tuple2!2033 lt!25360 lt!25363)) lt!25364))))

(assert (=> b!61309 (= lt!25361 (addStillNotContains!16 lt!25362 lt!25360 lt!25363 lt!25364))))

(assert (=> b!61309 (= lt!25364 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!61309 (= lt!25363 (get!1075 (select (arr!1794 (array!3750 (store (arr!1794 (_values!2050 newMap!16)) (index!3037 lt!24947) (ValueCellFull!861 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2025 (_values!2050 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!61309 (= lt!25360 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!61309 (= lt!25362 call!4720)))

(assert (=> b!61309 (= e!40280 (+!82 call!4720 (tuple2!2033 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000) (get!1075 (select (arr!1794 (array!3750 (store (arr!1794 (_values!2050 newMap!16)) (index!3037 lt!24947) (ValueCellFull!861 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2025 (_values!2050 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12137 c!8032) b!61306))

(assert (= (and d!12137 (not c!8032)) b!61302))

(assert (= (and b!61302 c!8031) b!61309))

(assert (= (and b!61302 (not c!8031)) b!61304))

(assert (= (or b!61309 b!61304) bm!4717))

(assert (= (and d!12137 res!33795) b!61307))

(assert (= (and b!61307 res!33796) b!61301))

(assert (= (and b!61301 res!33794) b!61305))

(assert (= (and b!61301 c!8030) b!61298))

(assert (= (and b!61301 (not c!8030)) b!61299))

(assert (= (and b!61298 res!33793) b!61300))

(assert (= (and b!61299 c!8033) b!61303))

(assert (= (and b!61299 (not c!8033)) b!61308))

(declare-fun b_lambda!2723 () Bool)

(assert (=> (not b_lambda!2723) (not b!61300)))

(assert (=> b!61300 t!4813))

(declare-fun b_and!3743 () Bool)

(assert (= b_and!3739 (and (=> t!4813 result!2427) b_and!3743)))

(assert (=> b!61300 t!4815))

(declare-fun b_and!3745 () Bool)

(assert (= b_and!3741 (and (=> t!4815 result!2429) b_and!3745)))

(declare-fun b_lambda!2725 () Bool)

(assert (=> (not b_lambda!2725) (not b!61309)))

(assert (=> b!61309 t!4813))

(declare-fun b_and!3747 () Bool)

(assert (= b_and!3743 (and (=> t!4813 result!2427) b_and!3747)))

(assert (=> b!61309 t!4815))

(declare-fun b_and!3749 () Bool)

(assert (= b_and!3745 (and (=> t!4815 result!2429) b_and!3749)))

(assert (=> b!61302 m!53617))

(assert (=> b!61302 m!53617))

(assert (=> b!61302 m!53641))

(declare-fun m!54249 () Bool)

(assert (=> b!61309 m!54249))

(declare-fun m!54251 () Bool)

(assert (=> b!61309 m!54251))

(declare-fun m!54253 () Bool)

(assert (=> b!61309 m!54253))

(assert (=> b!61309 m!53647))

(assert (=> b!61309 m!53617))

(assert (=> b!61309 m!54061))

(assert (=> b!61309 m!54251))

(declare-fun m!54255 () Bool)

(assert (=> b!61309 m!54255))

(assert (=> b!61309 m!54061))

(assert (=> b!61309 m!53647))

(assert (=> b!61309 m!54063))

(declare-fun m!54257 () Bool)

(assert (=> b!61307 m!54257))

(declare-fun m!54259 () Bool)

(assert (=> d!12137 m!54259))

(assert (=> d!12137 m!53559))

(assert (=> b!61298 m!53617))

(assert (=> b!61298 m!53617))

(declare-fun m!54261 () Bool)

(assert (=> b!61298 m!54261))

(declare-fun m!54263 () Bool)

(assert (=> b!61308 m!54263))

(declare-fun m!54265 () Bool)

(assert (=> b!61303 m!54265))

(assert (=> bm!4717 m!54265))

(assert (=> b!61305 m!53617))

(assert (=> b!61305 m!53617))

(assert (=> b!61305 m!53641))

(assert (=> b!61300 m!53647))

(assert (=> b!61300 m!53617))

(assert (=> b!61300 m!54061))

(assert (=> b!61300 m!54061))

(assert (=> b!61300 m!53647))

(assert (=> b!61300 m!54063))

(assert (=> b!61300 m!53617))

(declare-fun m!54267 () Bool)

(assert (=> b!61300 m!54267))

(assert (=> b!61193 d!12137))

(declare-fun d!12139 () Bool)

(assert (=> d!12139 (= (apply!67 lt!25219 lt!25231) (get!1078 (getValueByKey!125 (toList!700 lt!25219) lt!25231)))))

(declare-fun bs!2669 () Bool)

(assert (= bs!2669 d!12139))

(declare-fun m!54269 () Bool)

(assert (=> bs!2669 m!54269))

(assert (=> bs!2669 m!54269))

(declare-fun m!54271 () Bool)

(assert (=> bs!2669 m!54271))

(assert (=> b!61193 d!12139))

(declare-fun d!12141 () Bool)

(assert (=> d!12141 (= (apply!67 (+!82 lt!25214 (tuple2!2033 lt!25224 (minValue!1981 newMap!16))) lt!25223) (apply!67 lt!25214 lt!25223))))

(declare-fun lt!25366 () Unit!1625)

(assert (=> d!12141 (= lt!25366 (choose!318 lt!25214 lt!25224 (minValue!1981 newMap!16) lt!25223))))

(declare-fun e!40283 () Bool)

(assert (=> d!12141 e!40283))

(declare-fun res!33797 () Bool)

(assert (=> d!12141 (=> (not res!33797) (not e!40283))))

(assert (=> d!12141 (= res!33797 (contains!686 lt!25214 lt!25223))))

(assert (=> d!12141 (= (addApplyDifferent!43 lt!25214 lt!25224 (minValue!1981 newMap!16) lt!25223) lt!25366)))

(declare-fun b!61310 () Bool)

(assert (=> b!61310 (= e!40283 (not (= lt!25223 lt!25224)))))

(assert (= (and d!12141 res!33797) b!61310))

(assert (=> d!12141 m!54049))

(assert (=> d!12141 m!54039))

(declare-fun m!54273 () Bool)

(assert (=> d!12141 m!54273))

(assert (=> d!12141 m!54039))

(assert (=> d!12141 m!54047))

(declare-fun m!54275 () Bool)

(assert (=> d!12141 m!54275))

(assert (=> b!61193 d!12141))

(declare-fun d!12143 () Bool)

(assert (=> d!12143 (= (apply!67 (+!82 lt!25219 (tuple2!2033 lt!25217 (minValue!1981 newMap!16))) lt!25231) (get!1078 (getValueByKey!125 (toList!700 (+!82 lt!25219 (tuple2!2033 lt!25217 (minValue!1981 newMap!16)))) lt!25231)))))

(declare-fun bs!2670 () Bool)

(assert (= bs!2670 d!12143))

(declare-fun m!54277 () Bool)

(assert (=> bs!2670 m!54277))

(assert (=> bs!2670 m!54277))

(declare-fun m!54279 () Bool)

(assert (=> bs!2670 m!54279))

(assert (=> b!61193 d!12143))

(declare-fun d!12145 () Bool)

(declare-fun e!40284 () Bool)

(assert (=> d!12145 e!40284))

(declare-fun res!33798 () Bool)

(assert (=> d!12145 (=> (not res!33798) (not e!40284))))

(declare-fun lt!25368 () ListLongMap!1369)

(assert (=> d!12145 (= res!33798 (contains!686 lt!25368 (_1!1027 (tuple2!2033 lt!25224 (minValue!1981 newMap!16)))))))

(declare-fun lt!25369 () List!1436)

(assert (=> d!12145 (= lt!25368 (ListLongMap!1370 lt!25369))))

(declare-fun lt!25367 () Unit!1625)

(declare-fun lt!25370 () Unit!1625)

(assert (=> d!12145 (= lt!25367 lt!25370)))

(assert (=> d!12145 (= (getValueByKey!125 lt!25369 (_1!1027 (tuple2!2033 lt!25224 (minValue!1981 newMap!16)))) (Some!130 (_2!1027 (tuple2!2033 lt!25224 (minValue!1981 newMap!16)))))))

(assert (=> d!12145 (= lt!25370 (lemmaContainsTupThenGetReturnValue!42 lt!25369 (_1!1027 (tuple2!2033 lt!25224 (minValue!1981 newMap!16))) (_2!1027 (tuple2!2033 lt!25224 (minValue!1981 newMap!16)))))))

(assert (=> d!12145 (= lt!25369 (insertStrictlySorted!45 (toList!700 lt!25214) (_1!1027 (tuple2!2033 lt!25224 (minValue!1981 newMap!16))) (_2!1027 (tuple2!2033 lt!25224 (minValue!1981 newMap!16)))))))

(assert (=> d!12145 (= (+!82 lt!25214 (tuple2!2033 lt!25224 (minValue!1981 newMap!16))) lt!25368)))

(declare-fun b!61311 () Bool)

(declare-fun res!33799 () Bool)

(assert (=> b!61311 (=> (not res!33799) (not e!40284))))

(assert (=> b!61311 (= res!33799 (= (getValueByKey!125 (toList!700 lt!25368) (_1!1027 (tuple2!2033 lt!25224 (minValue!1981 newMap!16)))) (Some!130 (_2!1027 (tuple2!2033 lt!25224 (minValue!1981 newMap!16))))))))

(declare-fun b!61312 () Bool)

(assert (=> b!61312 (= e!40284 (contains!688 (toList!700 lt!25368) (tuple2!2033 lt!25224 (minValue!1981 newMap!16))))))

(assert (= (and d!12145 res!33798) b!61311))

(assert (= (and b!61311 res!33799) b!61312))

(declare-fun m!54281 () Bool)

(assert (=> d!12145 m!54281))

(declare-fun m!54283 () Bool)

(assert (=> d!12145 m!54283))

(declare-fun m!54285 () Bool)

(assert (=> d!12145 m!54285))

(declare-fun m!54287 () Bool)

(assert (=> d!12145 m!54287))

(declare-fun m!54289 () Bool)

(assert (=> b!61311 m!54289))

(declare-fun m!54291 () Bool)

(assert (=> b!61312 m!54291))

(assert (=> b!61193 d!12145))

(declare-fun d!12147 () Bool)

(assert (=> d!12147 (= (apply!67 (+!82 lt!25226 (tuple2!2033 lt!25213 (zeroValue!1981 newMap!16))) lt!25221) (apply!67 lt!25226 lt!25221))))

(declare-fun lt!25371 () Unit!1625)

(assert (=> d!12147 (= lt!25371 (choose!318 lt!25226 lt!25213 (zeroValue!1981 newMap!16) lt!25221))))

(declare-fun e!40285 () Bool)

(assert (=> d!12147 e!40285))

(declare-fun res!33800 () Bool)

(assert (=> d!12147 (=> (not res!33800) (not e!40285))))

(assert (=> d!12147 (= res!33800 (contains!686 lt!25226 lt!25221))))

(assert (=> d!12147 (= (addApplyDifferent!43 lt!25226 lt!25213 (zeroValue!1981 newMap!16) lt!25221) lt!25371)))

(declare-fun b!61313 () Bool)

(assert (=> b!61313 (= e!40285 (not (= lt!25221 lt!25213)))))

(assert (= (and d!12147 res!33800) b!61313))

(assert (=> d!12147 m!54037))

(assert (=> d!12147 m!54031))

(declare-fun m!54293 () Bool)

(assert (=> d!12147 m!54293))

(assert (=> d!12147 m!54031))

(assert (=> d!12147 m!54033))

(declare-fun m!54295 () Bool)

(assert (=> d!12147 m!54295))

(assert (=> b!61193 d!12147))

(declare-fun d!12149 () Bool)

(declare-fun e!40286 () Bool)

(assert (=> d!12149 e!40286))

(declare-fun res!33801 () Bool)

(assert (=> d!12149 (=> res!33801 e!40286)))

(declare-fun lt!25375 () Bool)

(assert (=> d!12149 (= res!33801 (not lt!25375))))

(declare-fun lt!25374 () Bool)

(assert (=> d!12149 (= lt!25375 lt!25374)))

(declare-fun lt!25373 () Unit!1625)

(declare-fun e!40287 () Unit!1625)

(assert (=> d!12149 (= lt!25373 e!40287)))

(declare-fun c!8034 () Bool)

(assert (=> d!12149 (= c!8034 lt!25374)))

(assert (=> d!12149 (= lt!25374 (containsKey!129 (toList!700 (+!82 lt!25222 (tuple2!2033 lt!25212 (zeroValue!1981 newMap!16)))) lt!25225))))

(assert (=> d!12149 (= (contains!686 (+!82 lt!25222 (tuple2!2033 lt!25212 (zeroValue!1981 newMap!16))) lt!25225) lt!25375)))

(declare-fun b!61314 () Bool)

(declare-fun lt!25372 () Unit!1625)

(assert (=> b!61314 (= e!40287 lt!25372)))

(assert (=> b!61314 (= lt!25372 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 (+!82 lt!25222 (tuple2!2033 lt!25212 (zeroValue!1981 newMap!16)))) lt!25225))))

(assert (=> b!61314 (isDefined!78 (getValueByKey!125 (toList!700 (+!82 lt!25222 (tuple2!2033 lt!25212 (zeroValue!1981 newMap!16)))) lt!25225))))

(declare-fun b!61315 () Bool)

(declare-fun Unit!1647 () Unit!1625)

(assert (=> b!61315 (= e!40287 Unit!1647)))

(declare-fun b!61316 () Bool)

(assert (=> b!61316 (= e!40286 (isDefined!78 (getValueByKey!125 (toList!700 (+!82 lt!25222 (tuple2!2033 lt!25212 (zeroValue!1981 newMap!16)))) lt!25225)))))

(assert (= (and d!12149 c!8034) b!61314))

(assert (= (and d!12149 (not c!8034)) b!61315))

(assert (= (and d!12149 (not res!33801)) b!61316))

(declare-fun m!54297 () Bool)

(assert (=> d!12149 m!54297))

(declare-fun m!54299 () Bool)

(assert (=> b!61314 m!54299))

(declare-fun m!54301 () Bool)

(assert (=> b!61314 m!54301))

(assert (=> b!61314 m!54301))

(declare-fun m!54303 () Bool)

(assert (=> b!61314 m!54303))

(assert (=> b!61316 m!54301))

(assert (=> b!61316 m!54301))

(assert (=> b!61316 m!54303))

(assert (=> b!61193 d!12149))

(declare-fun d!12151 () Bool)

(declare-fun e!40288 () Bool)

(assert (=> d!12151 e!40288))

(declare-fun res!33802 () Bool)

(assert (=> d!12151 (=> (not res!33802) (not e!40288))))

(declare-fun lt!25377 () ListLongMap!1369)

(assert (=> d!12151 (= res!33802 (contains!686 lt!25377 (_1!1027 (tuple2!2033 lt!25213 (zeroValue!1981 newMap!16)))))))

(declare-fun lt!25378 () List!1436)

(assert (=> d!12151 (= lt!25377 (ListLongMap!1370 lt!25378))))

(declare-fun lt!25376 () Unit!1625)

(declare-fun lt!25379 () Unit!1625)

(assert (=> d!12151 (= lt!25376 lt!25379)))

(assert (=> d!12151 (= (getValueByKey!125 lt!25378 (_1!1027 (tuple2!2033 lt!25213 (zeroValue!1981 newMap!16)))) (Some!130 (_2!1027 (tuple2!2033 lt!25213 (zeroValue!1981 newMap!16)))))))

(assert (=> d!12151 (= lt!25379 (lemmaContainsTupThenGetReturnValue!42 lt!25378 (_1!1027 (tuple2!2033 lt!25213 (zeroValue!1981 newMap!16))) (_2!1027 (tuple2!2033 lt!25213 (zeroValue!1981 newMap!16)))))))

(assert (=> d!12151 (= lt!25378 (insertStrictlySorted!45 (toList!700 lt!25226) (_1!1027 (tuple2!2033 lt!25213 (zeroValue!1981 newMap!16))) (_2!1027 (tuple2!2033 lt!25213 (zeroValue!1981 newMap!16)))))))

(assert (=> d!12151 (= (+!82 lt!25226 (tuple2!2033 lt!25213 (zeroValue!1981 newMap!16))) lt!25377)))

(declare-fun b!61317 () Bool)

(declare-fun res!33803 () Bool)

(assert (=> b!61317 (=> (not res!33803) (not e!40288))))

(assert (=> b!61317 (= res!33803 (= (getValueByKey!125 (toList!700 lt!25377) (_1!1027 (tuple2!2033 lt!25213 (zeroValue!1981 newMap!16)))) (Some!130 (_2!1027 (tuple2!2033 lt!25213 (zeroValue!1981 newMap!16))))))))

(declare-fun b!61318 () Bool)

(assert (=> b!61318 (= e!40288 (contains!688 (toList!700 lt!25377) (tuple2!2033 lt!25213 (zeroValue!1981 newMap!16))))))

(assert (= (and d!12151 res!33802) b!61317))

(assert (= (and b!61317 res!33803) b!61318))

(declare-fun m!54305 () Bool)

(assert (=> d!12151 m!54305))

(declare-fun m!54307 () Bool)

(assert (=> d!12151 m!54307))

(declare-fun m!54309 () Bool)

(assert (=> d!12151 m!54309))

(declare-fun m!54311 () Bool)

(assert (=> d!12151 m!54311))

(declare-fun m!54313 () Bool)

(assert (=> b!61317 m!54313))

(declare-fun m!54315 () Bool)

(assert (=> b!61318 m!54315))

(assert (=> b!61193 d!12151))

(declare-fun d!12153 () Bool)

(assert (=> d!12153 (= (apply!67 (+!82 lt!25219 (tuple2!2033 lt!25217 (minValue!1981 newMap!16))) lt!25231) (apply!67 lt!25219 lt!25231))))

(declare-fun lt!25380 () Unit!1625)

(assert (=> d!12153 (= lt!25380 (choose!318 lt!25219 lt!25217 (minValue!1981 newMap!16) lt!25231))))

(declare-fun e!40289 () Bool)

(assert (=> d!12153 e!40289))

(declare-fun res!33804 () Bool)

(assert (=> d!12153 (=> (not res!33804) (not e!40289))))

(assert (=> d!12153 (= res!33804 (contains!686 lt!25219 lt!25231))))

(assert (=> d!12153 (= (addApplyDifferent!43 lt!25219 lt!25217 (minValue!1981 newMap!16) lt!25231) lt!25380)))

(declare-fun b!61319 () Bool)

(assert (=> b!61319 (= e!40289 (not (= lt!25231 lt!25217)))))

(assert (= (and d!12153 res!33804) b!61319))

(assert (=> d!12153 m!54051))

(assert (=> d!12153 m!54043))

(declare-fun m!54317 () Bool)

(assert (=> d!12153 m!54317))

(assert (=> d!12153 m!54043))

(assert (=> d!12153 m!54055))

(declare-fun m!54319 () Bool)

(assert (=> d!12153 m!54319))

(assert (=> b!61193 d!12153))

(declare-fun d!12155 () Bool)

(declare-fun e!40290 () Bool)

(assert (=> d!12155 e!40290))

(declare-fun res!33805 () Bool)

(assert (=> d!12155 (=> (not res!33805) (not e!40290))))

(declare-fun lt!25382 () ListLongMap!1369)

(assert (=> d!12155 (= res!33805 (contains!686 lt!25382 (_1!1027 (tuple2!2033 lt!25212 (zeroValue!1981 newMap!16)))))))

(declare-fun lt!25383 () List!1436)

(assert (=> d!12155 (= lt!25382 (ListLongMap!1370 lt!25383))))

(declare-fun lt!25381 () Unit!1625)

(declare-fun lt!25384 () Unit!1625)

(assert (=> d!12155 (= lt!25381 lt!25384)))

(assert (=> d!12155 (= (getValueByKey!125 lt!25383 (_1!1027 (tuple2!2033 lt!25212 (zeroValue!1981 newMap!16)))) (Some!130 (_2!1027 (tuple2!2033 lt!25212 (zeroValue!1981 newMap!16)))))))

(assert (=> d!12155 (= lt!25384 (lemmaContainsTupThenGetReturnValue!42 lt!25383 (_1!1027 (tuple2!2033 lt!25212 (zeroValue!1981 newMap!16))) (_2!1027 (tuple2!2033 lt!25212 (zeroValue!1981 newMap!16)))))))

(assert (=> d!12155 (= lt!25383 (insertStrictlySorted!45 (toList!700 lt!25222) (_1!1027 (tuple2!2033 lt!25212 (zeroValue!1981 newMap!16))) (_2!1027 (tuple2!2033 lt!25212 (zeroValue!1981 newMap!16)))))))

(assert (=> d!12155 (= (+!82 lt!25222 (tuple2!2033 lt!25212 (zeroValue!1981 newMap!16))) lt!25382)))

(declare-fun b!61320 () Bool)

(declare-fun res!33806 () Bool)

(assert (=> b!61320 (=> (not res!33806) (not e!40290))))

(assert (=> b!61320 (= res!33806 (= (getValueByKey!125 (toList!700 lt!25382) (_1!1027 (tuple2!2033 lt!25212 (zeroValue!1981 newMap!16)))) (Some!130 (_2!1027 (tuple2!2033 lt!25212 (zeroValue!1981 newMap!16))))))))

(declare-fun b!61321 () Bool)

(assert (=> b!61321 (= e!40290 (contains!688 (toList!700 lt!25382) (tuple2!2033 lt!25212 (zeroValue!1981 newMap!16))))))

(assert (= (and d!12155 res!33805) b!61320))

(assert (= (and b!61320 res!33806) b!61321))

(declare-fun m!54321 () Bool)

(assert (=> d!12155 m!54321))

(declare-fun m!54323 () Bool)

(assert (=> d!12155 m!54323))

(declare-fun m!54325 () Bool)

(assert (=> d!12155 m!54325))

(declare-fun m!54327 () Bool)

(assert (=> d!12155 m!54327))

(declare-fun m!54329 () Bool)

(assert (=> b!61320 m!54329))

(declare-fun m!54331 () Bool)

(assert (=> b!61321 m!54331))

(assert (=> b!61193 d!12155))

(declare-fun d!12157 () Bool)

(declare-fun res!33807 () Bool)

(declare-fun e!40291 () Bool)

(assert (=> d!12157 (=> res!33807 e!40291)))

(assert (=> d!12157 (= res!33807 (and ((_ is Cons!1432) (toList!700 call!4625)) (= (_1!1027 (h!2014 (toList!700 call!4625))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355))))))

(assert (=> d!12157 (= (containsKey!129 (toList!700 call!4625) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) e!40291)))

(declare-fun b!61322 () Bool)

(declare-fun e!40292 () Bool)

(assert (=> b!61322 (= e!40291 e!40292)))

(declare-fun res!33808 () Bool)

(assert (=> b!61322 (=> (not res!33808) (not e!40292))))

(assert (=> b!61322 (= res!33808 (and (or (not ((_ is Cons!1432) (toList!700 call!4625))) (bvsle (_1!1027 (h!2014 (toList!700 call!4625))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355))) ((_ is Cons!1432) (toList!700 call!4625)) (bvslt (_1!1027 (h!2014 (toList!700 call!4625))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355))))))

(declare-fun b!61323 () Bool)

(assert (=> b!61323 (= e!40292 (containsKey!129 (t!4806 (toList!700 call!4625)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(assert (= (and d!12157 (not res!33807)) b!61322))

(assert (= (and b!61322 res!33808) b!61323))

(assert (=> b!61323 m!53313))

(declare-fun m!54333 () Bool)

(assert (=> b!61323 m!54333))

(assert (=> d!11989 d!12157))

(assert (=> b!61111 d!11985))

(declare-fun d!12159 () Bool)

(declare-fun e!40293 () Bool)

(assert (=> d!12159 e!40293))

(declare-fun res!33809 () Bool)

(assert (=> d!12159 (=> (not res!33809) (not e!40293))))

(declare-fun lt!25386 () ListLongMap!1369)

(assert (=> d!12159 (= res!33809 (contains!686 lt!25386 (_1!1027 (ite (or c!7957 c!7958) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))))

(declare-fun lt!25387 () List!1436)

(assert (=> d!12159 (= lt!25386 (ListLongMap!1370 lt!25387))))

(declare-fun lt!25385 () Unit!1625)

(declare-fun lt!25388 () Unit!1625)

(assert (=> d!12159 (= lt!25385 lt!25388)))

(assert (=> d!12159 (= (getValueByKey!125 lt!25387 (_1!1027 (ite (or c!7957 c!7958) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))) (Some!130 (_2!1027 (ite (or c!7957 c!7958) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))))

(assert (=> d!12159 (= lt!25388 (lemmaContainsTupThenGetReturnValue!42 lt!25387 (_1!1027 (ite (or c!7957 c!7958) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))) (_2!1027 (ite (or c!7957 c!7958) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))))

(assert (=> d!12159 (= lt!25387 (insertStrictlySorted!45 (toList!700 (ite c!7957 call!4675 (ite c!7958 call!4680 call!4679))) (_1!1027 (ite (or c!7957 c!7958) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))) (_2!1027 (ite (or c!7957 c!7958) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))))

(assert (=> d!12159 (= (+!82 (ite c!7957 call!4675 (ite c!7958 call!4680 call!4679)) (ite (or c!7957 c!7958) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))) lt!25386)))

(declare-fun b!61324 () Bool)

(declare-fun res!33810 () Bool)

(assert (=> b!61324 (=> (not res!33810) (not e!40293))))

(assert (=> b!61324 (= res!33810 (= (getValueByKey!125 (toList!700 lt!25386) (_1!1027 (ite (or c!7957 c!7958) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))) (Some!130 (_2!1027 (ite (or c!7957 c!7958) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))))

(declare-fun b!61325 () Bool)

(assert (=> b!61325 (= e!40293 (contains!688 (toList!700 lt!25386) (ite (or c!7957 c!7958) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(assert (= (and d!12159 res!33809) b!61324))

(assert (= (and b!61324 res!33810) b!61325))

(declare-fun m!54335 () Bool)

(assert (=> d!12159 m!54335))

(declare-fun m!54337 () Bool)

(assert (=> d!12159 m!54337))

(declare-fun m!54339 () Bool)

(assert (=> d!12159 m!54339))

(declare-fun m!54341 () Bool)

(assert (=> d!12159 m!54341))

(declare-fun m!54343 () Bool)

(assert (=> b!61324 m!54343))

(declare-fun m!54345 () Bool)

(assert (=> b!61325 m!54345))

(assert (=> bm!4672 d!12159))

(declare-fun d!12161 () Bool)

(declare-fun e!40294 () Bool)

(assert (=> d!12161 e!40294))

(declare-fun res!33811 () Bool)

(assert (=> d!12161 (=> res!33811 e!40294)))

(declare-fun lt!25392 () Bool)

(assert (=> d!12161 (= res!33811 (not lt!25392))))

(declare-fun lt!25391 () Bool)

(assert (=> d!12161 (= lt!25392 lt!25391)))

(declare-fun lt!25390 () Unit!1625)

(declare-fun e!40295 () Unit!1625)

(assert (=> d!12161 (= lt!25390 e!40295)))

(declare-fun c!8035 () Bool)

(assert (=> d!12161 (= c!8035 lt!25391)))

(assert (=> d!12161 (= lt!25391 (containsKey!129 (toList!700 lt!25169) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12161 (= (contains!686 lt!25169 #b1000000000000000000000000000000000000000000000000000000000000000) lt!25392)))

(declare-fun b!61326 () Bool)

(declare-fun lt!25389 () Unit!1625)

(assert (=> b!61326 (= e!40295 lt!25389)))

(assert (=> b!61326 (= lt!25389 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 lt!25169) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61326 (isDefined!78 (getValueByKey!125 (toList!700 lt!25169) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61327 () Bool)

(declare-fun Unit!1648 () Unit!1625)

(assert (=> b!61327 (= e!40295 Unit!1648)))

(declare-fun b!61328 () Bool)

(assert (=> b!61328 (= e!40294 (isDefined!78 (getValueByKey!125 (toList!700 lt!25169) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12161 c!8035) b!61326))

(assert (= (and d!12161 (not c!8035)) b!61327))

(assert (= (and d!12161 (not res!33811)) b!61328))

(declare-fun m!54347 () Bool)

(assert (=> d!12161 m!54347))

(declare-fun m!54349 () Bool)

(assert (=> b!61326 m!54349))

(declare-fun m!54351 () Bool)

(assert (=> b!61326 m!54351))

(assert (=> b!61326 m!54351))

(declare-fun m!54353 () Bool)

(assert (=> b!61326 m!54353))

(assert (=> b!61328 m!54351))

(assert (=> b!61328 m!54351))

(assert (=> b!61328 m!54353))

(assert (=> bm!4692 d!12161))

(declare-fun b!61329 () Bool)

(declare-fun e!40297 () Bool)

(declare-fun e!40296 () Bool)

(assert (=> b!61329 (= e!40297 e!40296)))

(declare-fun lt!25394 () (_ BitVec 64))

(assert (=> b!61329 (= lt!25394 (select (arr!1793 (_keys!3695 (_2!1026 lt!24941))) #b00000000000000000000000000000000))))

(declare-fun lt!25395 () Unit!1625)

(assert (=> b!61329 (= lt!25395 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3695 (_2!1026 lt!24941)) lt!25394 #b00000000000000000000000000000000))))

(assert (=> b!61329 (arrayContainsKey!0 (_keys!3695 (_2!1026 lt!24941)) lt!25394 #b00000000000000000000000000000000)))

(declare-fun lt!25393 () Unit!1625)

(assert (=> b!61329 (= lt!25393 lt!25395)))

(declare-fun res!33812 () Bool)

(assert (=> b!61329 (= res!33812 (= (seekEntryOrOpen!0 (select (arr!1793 (_keys!3695 (_2!1026 lt!24941))) #b00000000000000000000000000000000) (_keys!3695 (_2!1026 lt!24941)) (mask!5963 (_2!1026 lt!24941))) (Found!228 #b00000000000000000000000000000000)))))

(assert (=> b!61329 (=> (not res!33812) (not e!40296))))

(declare-fun d!12163 () Bool)

(declare-fun res!33813 () Bool)

(declare-fun e!40298 () Bool)

(assert (=> d!12163 (=> res!33813 e!40298)))

(assert (=> d!12163 (= res!33813 (bvsge #b00000000000000000000000000000000 (size!2024 (_keys!3695 (_2!1026 lt!24941)))))))

(assert (=> d!12163 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3695 (_2!1026 lt!24941)) (mask!5963 (_2!1026 lt!24941))) e!40298)))

(declare-fun b!61330 () Bool)

(declare-fun call!4721 () Bool)

(assert (=> b!61330 (= e!40297 call!4721)))

(declare-fun b!61331 () Bool)

(assert (=> b!61331 (= e!40296 call!4721)))

(declare-fun b!61332 () Bool)

(assert (=> b!61332 (= e!40298 e!40297)))

(declare-fun c!8036 () Bool)

(assert (=> b!61332 (= c!8036 (validKeyInArray!0 (select (arr!1793 (_keys!3695 (_2!1026 lt!24941))) #b00000000000000000000000000000000)))))

(declare-fun bm!4718 () Bool)

(assert (=> bm!4718 (= call!4721 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3695 (_2!1026 lt!24941)) (mask!5963 (_2!1026 lt!24941))))))

(assert (= (and d!12163 (not res!33813)) b!61332))

(assert (= (and b!61332 c!8036) b!61329))

(assert (= (and b!61332 (not c!8036)) b!61330))

(assert (= (and b!61329 res!33812) b!61331))

(assert (= (or b!61331 b!61330) bm!4718))

(declare-fun m!54355 () Bool)

(assert (=> b!61329 m!54355))

(declare-fun m!54357 () Bool)

(assert (=> b!61329 m!54357))

(declare-fun m!54359 () Bool)

(assert (=> b!61329 m!54359))

(assert (=> b!61329 m!54355))

(declare-fun m!54361 () Bool)

(assert (=> b!61329 m!54361))

(assert (=> b!61332 m!54355))

(assert (=> b!61332 m!54355))

(declare-fun m!54363 () Bool)

(assert (=> b!61332 m!54363))

(declare-fun m!54365 () Bool)

(assert (=> bm!4718 m!54365))

(assert (=> b!61102 d!12163))

(declare-fun d!12165 () Bool)

(declare-fun isEmpty!298 (List!1436) Bool)

(assert (=> d!12165 (= (isEmpty!296 lt!25126) (isEmpty!298 (toList!700 lt!25126)))))

(declare-fun bs!2671 () Bool)

(assert (= bs!2671 d!12165))

(declare-fun m!54367 () Bool)

(assert (=> bs!2671 m!54367))

(assert (=> b!61085 d!12165))

(assert (=> d!12069 d!11971))

(declare-fun d!12167 () Bool)

(declare-fun e!40301 () Bool)

(assert (=> d!12167 e!40301))

(declare-fun res!33818 () Bool)

(assert (=> d!12167 (=> (not res!33818) (not e!40301))))

(declare-fun lt!25398 () SeekEntryResult!228)

(assert (=> d!12167 (= res!33818 ((_ is Found!228) lt!25398))))

(assert (=> d!12167 (= lt!25398 (seekEntryOrOpen!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (_keys!3695 newMap!16) (mask!5963 newMap!16)))))

(assert (=> d!12167 true))

(declare-fun _$33!45 () Unit!1625)

(assert (=> d!12167 (= (choose!321 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (defaultEntry!2067 newMap!16)) _$33!45)))

(declare-fun b!61337 () Bool)

(declare-fun res!33819 () Bool)

(assert (=> b!61337 (=> (not res!33819) (not e!40301))))

(assert (=> b!61337 (= res!33819 (inRange!0 (index!3037 lt!25398) (mask!5963 newMap!16)))))

(declare-fun b!61338 () Bool)

(assert (=> b!61338 (= e!40301 (= (select (arr!1793 (_keys!3695 newMap!16)) (index!3037 lt!25398)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(assert (= (and d!12167 res!33818) b!61337))

(assert (= (and b!61337 res!33819) b!61338))

(assert (=> d!12167 m!53313))

(assert (=> d!12167 m!53429))

(declare-fun m!54369 () Bool)

(assert (=> b!61337 m!54369))

(declare-fun m!54371 () Bool)

(assert (=> b!61338 m!54371))

(assert (=> d!12069 d!12167))

(assert (=> d!12069 d!12123))

(declare-fun d!12169 () Bool)

(assert (=> d!12169 (= (get!1078 (getValueByKey!125 (toList!700 lt!25003) lt!25015)) (v!2407 (getValueByKey!125 (toList!700 lt!25003) lt!25015)))))

(assert (=> d!12029 d!12169))

(declare-fun b!61339 () Bool)

(declare-fun e!40302 () Option!131)

(assert (=> b!61339 (= e!40302 (Some!130 (_2!1027 (h!2014 (toList!700 lt!25003)))))))

(declare-fun d!12171 () Bool)

(declare-fun c!8037 () Bool)

(assert (=> d!12171 (= c!8037 (and ((_ is Cons!1432) (toList!700 lt!25003)) (= (_1!1027 (h!2014 (toList!700 lt!25003))) lt!25015)))))

(assert (=> d!12171 (= (getValueByKey!125 (toList!700 lt!25003) lt!25015) e!40302)))

(declare-fun b!61340 () Bool)

(declare-fun e!40303 () Option!131)

(assert (=> b!61340 (= e!40302 e!40303)))

(declare-fun c!8038 () Bool)

(assert (=> b!61340 (= c!8038 (and ((_ is Cons!1432) (toList!700 lt!25003)) (not (= (_1!1027 (h!2014 (toList!700 lt!25003))) lt!25015))))))

(declare-fun b!61342 () Bool)

(assert (=> b!61342 (= e!40303 None!129)))

(declare-fun b!61341 () Bool)

(assert (=> b!61341 (= e!40303 (getValueByKey!125 (t!4806 (toList!700 lt!25003)) lt!25015))))

(assert (= (and d!12171 c!8037) b!61339))

(assert (= (and d!12171 (not c!8037)) b!61340))

(assert (= (and b!61340 c!8038) b!61341))

(assert (= (and b!61340 (not c!8038)) b!61342))

(declare-fun m!54373 () Bool)

(assert (=> b!61341 m!54373))

(assert (=> d!12029 d!12171))

(declare-fun b!61343 () Bool)

(declare-fun e!40305 () Bool)

(declare-fun e!40310 () Bool)

(assert (=> b!61343 (= e!40305 e!40310)))

(assert (=> b!61343 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(declare-fun res!33820 () Bool)

(declare-fun lt!25399 () ListLongMap!1369)

(assert (=> b!61343 (= res!33820 (contains!686 lt!25399 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61343 (=> (not res!33820) (not e!40310))))

(declare-fun b!61344 () Bool)

(declare-fun e!40307 () Bool)

(assert (=> b!61344 (= e!40305 e!40307)))

(declare-fun c!8042 () Bool)

(assert (=> b!61344 (= c!8042 (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(declare-fun b!61345 () Bool)

(assert (=> b!61345 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(assert (=> b!61345 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2025 (_values!2050 newMap!16))))))

(assert (=> b!61345 (= e!40310 (= (apply!67 lt!25399 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) (get!1075 (select (arr!1794 (_values!2050 newMap!16)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!12173 () Bool)

(declare-fun e!40309 () Bool)

(assert (=> d!12173 e!40309))

(declare-fun res!33822 () Bool)

(assert (=> d!12173 (=> (not res!33822) (not e!40309))))

(assert (=> d!12173 (= res!33822 (not (contains!686 lt!25399 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!40304 () ListLongMap!1369)

(assert (=> d!12173 (= lt!25399 e!40304)))

(declare-fun c!8041 () Bool)

(assert (=> d!12173 (= c!8041 (bvsge #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(assert (=> d!12173 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12173 (= (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (ite (and c!7909 c!7899) lt!24940 (extraKeys!1950 newMap!16)) (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) lt!25399)))

(declare-fun b!61346 () Bool)

(assert (=> b!61346 (= e!40309 e!40305)))

(declare-fun c!8039 () Bool)

(declare-fun e!40306 () Bool)

(assert (=> b!61346 (= c!8039 e!40306)))

(declare-fun res!33821 () Bool)

(assert (=> b!61346 (=> (not res!33821) (not e!40306))))

(assert (=> b!61346 (= res!33821 (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(declare-fun b!61347 () Bool)

(declare-fun e!40308 () ListLongMap!1369)

(assert (=> b!61347 (= e!40304 e!40308)))

(declare-fun c!8040 () Bool)

(assert (=> b!61347 (= c!8040 (validKeyInArray!0 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61348 () Bool)

(assert (=> b!61348 (= e!40307 (= lt!25399 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (ite (and c!7909 c!7899) lt!24940 (extraKeys!1950 newMap!16)) (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)) (minValue!1981 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2067 newMap!16))))))

(declare-fun b!61349 () Bool)

(declare-fun call!4722 () ListLongMap!1369)

(assert (=> b!61349 (= e!40308 call!4722)))

(declare-fun bm!4719 () Bool)

(assert (=> bm!4719 (= call!4722 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (ite (and c!7909 c!7899) lt!24940 (extraKeys!1950 newMap!16)) (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)) (minValue!1981 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2067 newMap!16)))))

(declare-fun b!61350 () Bool)

(assert (=> b!61350 (= e!40306 (validKeyInArray!0 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61350 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!61351 () Bool)

(assert (=> b!61351 (= e!40304 (ListLongMap!1370 Nil!1433))))

(declare-fun b!61352 () Bool)

(declare-fun res!33823 () Bool)

(assert (=> b!61352 (=> (not res!33823) (not e!40309))))

(assert (=> b!61352 (= res!33823 (not (contains!686 lt!25399 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!61353 () Bool)

(assert (=> b!61353 (= e!40307 (isEmpty!296 lt!25399))))

(declare-fun b!61354 () Bool)

(declare-fun lt!25405 () Unit!1625)

(declare-fun lt!25401 () Unit!1625)

(assert (=> b!61354 (= lt!25405 lt!25401)))

(declare-fun lt!25404 () (_ BitVec 64))

(declare-fun lt!25400 () (_ BitVec 64))

(declare-fun lt!25403 () V!2859)

(declare-fun lt!25402 () ListLongMap!1369)

(assert (=> b!61354 (not (contains!686 (+!82 lt!25402 (tuple2!2033 lt!25400 lt!25403)) lt!25404))))

(assert (=> b!61354 (= lt!25401 (addStillNotContains!16 lt!25402 lt!25400 lt!25403 lt!25404))))

(assert (=> b!61354 (= lt!25404 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!61354 (= lt!25403 (get!1075 (select (arr!1794 (_values!2050 newMap!16)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!61354 (= lt!25400 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!61354 (= lt!25402 call!4722)))

(assert (=> b!61354 (= e!40308 (+!82 call!4722 (tuple2!2033 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000) (get!1075 (select (arr!1794 (_values!2050 newMap!16)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12173 c!8041) b!61351))

(assert (= (and d!12173 (not c!8041)) b!61347))

(assert (= (and b!61347 c!8040) b!61354))

(assert (= (and b!61347 (not c!8040)) b!61349))

(assert (= (or b!61354 b!61349) bm!4719))

(assert (= (and d!12173 res!33822) b!61352))

(assert (= (and b!61352 res!33823) b!61346))

(assert (= (and b!61346 res!33821) b!61350))

(assert (= (and b!61346 c!8039) b!61343))

(assert (= (and b!61346 (not c!8039)) b!61344))

(assert (= (and b!61343 res!33820) b!61345))

(assert (= (and b!61344 c!8042) b!61348))

(assert (= (and b!61344 (not c!8042)) b!61353))

(declare-fun b_lambda!2727 () Bool)

(assert (=> (not b_lambda!2727) (not b!61345)))

(assert (=> b!61345 t!4813))

(declare-fun b_and!3751 () Bool)

(assert (= b_and!3747 (and (=> t!4813 result!2427) b_and!3751)))

(assert (=> b!61345 t!4815))

(declare-fun b_and!3753 () Bool)

(assert (= b_and!3749 (and (=> t!4815 result!2429) b_and!3753)))

(declare-fun b_lambda!2729 () Bool)

(assert (=> (not b_lambda!2729) (not b!61354)))

(assert (=> b!61354 t!4813))

(declare-fun b_and!3755 () Bool)

(assert (= b_and!3751 (and (=> t!4813 result!2427) b_and!3755)))

(assert (=> b!61354 t!4815))

(declare-fun b_and!3757 () Bool)

(assert (= b_and!3753 (and (=> t!4815 result!2429) b_and!3757)))

(assert (=> b!61347 m!53617))

(assert (=> b!61347 m!53617))

(assert (=> b!61347 m!53641))

(declare-fun m!54375 () Bool)

(assert (=> b!61354 m!54375))

(declare-fun m!54377 () Bool)

(assert (=> b!61354 m!54377))

(declare-fun m!54379 () Bool)

(assert (=> b!61354 m!54379))

(assert (=> b!61354 m!53647))

(assert (=> b!61354 m!53617))

(assert (=> b!61354 m!53645))

(assert (=> b!61354 m!54377))

(declare-fun m!54381 () Bool)

(assert (=> b!61354 m!54381))

(assert (=> b!61354 m!53645))

(assert (=> b!61354 m!53647))

(assert (=> b!61354 m!53649))

(declare-fun m!54383 () Bool)

(assert (=> b!61352 m!54383))

(declare-fun m!54385 () Bool)

(assert (=> d!12173 m!54385))

(assert (=> d!12173 m!53559))

(assert (=> b!61343 m!53617))

(assert (=> b!61343 m!53617))

(declare-fun m!54387 () Bool)

(assert (=> b!61343 m!54387))

(declare-fun m!54389 () Bool)

(assert (=> b!61353 m!54389))

(declare-fun m!54391 () Bool)

(assert (=> b!61348 m!54391))

(assert (=> bm!4719 m!54391))

(assert (=> b!61350 m!53617))

(assert (=> b!61350 m!53617))

(assert (=> b!61350 m!53641))

(assert (=> b!61345 m!53647))

(assert (=> b!61345 m!53617))

(assert (=> b!61345 m!53645))

(assert (=> b!61345 m!53645))

(assert (=> b!61345 m!53647))

(assert (=> b!61345 m!53649))

(assert (=> b!61345 m!53617))

(declare-fun m!54393 () Bool)

(assert (=> b!61345 m!54393))

(assert (=> bm!4662 d!12173))

(declare-fun d!12175 () Bool)

(assert (=> d!12175 (= (get!1078 (getValueByKey!125 (toList!700 (+!82 lt!25010 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25005)) (v!2407 (getValueByKey!125 (toList!700 (+!82 lt!25010 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25005)))))

(assert (=> d!12039 d!12175))

(declare-fun b!61355 () Bool)

(declare-fun e!40311 () Option!131)

(assert (=> b!61355 (= e!40311 (Some!130 (_2!1027 (h!2014 (toList!700 (+!82 lt!25010 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))))))))

(declare-fun d!12177 () Bool)

(declare-fun c!8043 () Bool)

(assert (=> d!12177 (= c!8043 (and ((_ is Cons!1432) (toList!700 (+!82 lt!25010 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))) (= (_1!1027 (h!2014 (toList!700 (+!82 lt!25010 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))) lt!25005)))))

(assert (=> d!12177 (= (getValueByKey!125 (toList!700 (+!82 lt!25010 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25005) e!40311)))

(declare-fun b!61356 () Bool)

(declare-fun e!40312 () Option!131)

(assert (=> b!61356 (= e!40311 e!40312)))

(declare-fun c!8044 () Bool)

(assert (=> b!61356 (= c!8044 (and ((_ is Cons!1432) (toList!700 (+!82 lt!25010 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))) (not (= (_1!1027 (h!2014 (toList!700 (+!82 lt!25010 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))) lt!25005))))))

(declare-fun b!61358 () Bool)

(assert (=> b!61358 (= e!40312 None!129)))

(declare-fun b!61357 () Bool)

(assert (=> b!61357 (= e!40312 (getValueByKey!125 (t!4806 (toList!700 (+!82 lt!25010 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))) lt!25005))))

(assert (= (and d!12177 c!8043) b!61355))

(assert (= (and d!12177 (not c!8043)) b!61356))

(assert (= (and b!61356 c!8044) b!61357))

(assert (= (and b!61356 (not c!8044)) b!61358))

(declare-fun m!54395 () Bool)

(assert (=> b!61357 m!54395))

(assert (=> d!12039 d!12177))

(assert (=> bm!4710 d!11971))

(declare-fun d!12179 () Bool)

(declare-fun res!33824 () Bool)

(declare-fun e!40313 () Bool)

(assert (=> d!12179 (=> res!33824 e!40313)))

(assert (=> d!12179 (= res!33824 (and ((_ is Cons!1432) (toList!700 lt!24995)) (= (_1!1027 (h!2014 (toList!700 lt!24995))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12179 (= (containsKey!129 (toList!700 lt!24995) #b1000000000000000000000000000000000000000000000000000000000000000) e!40313)))

(declare-fun b!61359 () Bool)

(declare-fun e!40314 () Bool)

(assert (=> b!61359 (= e!40313 e!40314)))

(declare-fun res!33825 () Bool)

(assert (=> b!61359 (=> (not res!33825) (not e!40314))))

(assert (=> b!61359 (= res!33825 (and (or (not ((_ is Cons!1432) (toList!700 lt!24995))) (bvsle (_1!1027 (h!2014 (toList!700 lt!24995))) #b1000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1432) (toList!700 lt!24995)) (bvslt (_1!1027 (h!2014 (toList!700 lt!24995))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!61360 () Bool)

(assert (=> b!61360 (= e!40314 (containsKey!129 (t!4806 (toList!700 lt!24995)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!12179 (not res!33824)) b!61359))

(assert (= (and b!61359 res!33825) b!61360))

(declare-fun m!54397 () Bool)

(assert (=> b!61360 m!54397))

(assert (=> d!12081 d!12179))

(assert (=> d!12073 d!12123))

(declare-fun d!12181 () Bool)

(declare-fun lt!25408 () Bool)

(declare-fun content!66 (List!1436) (InoxSet tuple2!2032))

(assert (=> d!12181 (= lt!25408 (select (content!66 (toList!700 lt!25138)) (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))

(declare-fun e!40320 () Bool)

(assert (=> d!12181 (= lt!25408 e!40320)))

(declare-fun res!33830 () Bool)

(assert (=> d!12181 (=> (not res!33830) (not e!40320))))

(assert (=> d!12181 (= res!33830 ((_ is Cons!1432) (toList!700 lt!25138)))))

(assert (=> d!12181 (= (contains!688 (toList!700 lt!25138) (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) lt!25408)))

(declare-fun b!61365 () Bool)

(declare-fun e!40319 () Bool)

(assert (=> b!61365 (= e!40320 e!40319)))

(declare-fun res!33831 () Bool)

(assert (=> b!61365 (=> res!33831 e!40319)))

(assert (=> b!61365 (= res!33831 (= (h!2014 (toList!700 lt!25138)) (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))

(declare-fun b!61366 () Bool)

(assert (=> b!61366 (= e!40319 (contains!688 (t!4806 (toList!700 lt!25138)) (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))

(assert (= (and d!12181 res!33830) b!61365))

(assert (= (and b!61365 (not res!33831)) b!61366))

(declare-fun m!54399 () Bool)

(assert (=> d!12181 m!54399))

(declare-fun m!54401 () Bool)

(assert (=> d!12181 m!54401))

(declare-fun m!54403 () Bool)

(assert (=> b!61366 m!54403))

(assert (=> b!61090 d!12181))

(declare-fun b!61367 () Bool)

(declare-fun e!40324 () Bool)

(declare-fun call!4723 () Bool)

(assert (=> b!61367 (= e!40324 call!4723)))

(declare-fun b!61368 () Bool)

(declare-fun e!40322 () Bool)

(declare-fun e!40321 () Bool)

(assert (=> b!61368 (= e!40322 e!40321)))

(declare-fun res!33833 () Bool)

(assert (=> b!61368 (=> (not res!33833) (not e!40321))))

(declare-fun e!40323 () Bool)

(assert (=> b!61368 (= res!33833 (not e!40323))))

(declare-fun res!33834 () Bool)

(assert (=> b!61368 (=> (not res!33834) (not e!40323))))

(assert (=> b!61368 (= res!33834 (validKeyInArray!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!61369 () Bool)

(assert (=> b!61369 (= e!40321 e!40324)))

(declare-fun c!8045 () Bool)

(assert (=> b!61369 (= c!8045 (validKeyInArray!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!61370 () Bool)

(assert (=> b!61370 (= e!40324 call!4723)))

(declare-fun d!12183 () Bool)

(declare-fun res!33832 () Bool)

(assert (=> d!12183 (=> res!33832 e!40322)))

(assert (=> d!12183 (= res!33832 (bvsge #b00000000000000000000000000000000 (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992))))))))

(assert (=> d!12183 (= (arrayNoDuplicates!0 (_keys!3695 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000000000000000 Nil!1434) e!40322)))

(declare-fun bm!4720 () Bool)

(assert (=> bm!4720 (= call!4723 (arrayNoDuplicates!0 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!8045 (Cons!1433 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) #b00000000000000000000000000000000) Nil!1434) Nil!1434)))))

(declare-fun b!61371 () Bool)

(assert (=> b!61371 (= e!40323 (contains!687 Nil!1434 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) #b00000000000000000000000000000000)))))

(assert (= (and d!12183 (not res!33832)) b!61368))

(assert (= (and b!61368 res!33834) b!61371))

(assert (= (and b!61368 res!33833) b!61369))

(assert (= (and b!61369 c!8045) b!61367))

(assert (= (and b!61369 (not c!8045)) b!61370))

(assert (= (or b!61367 b!61370) bm!4720))

(declare-fun m!54405 () Bool)

(assert (=> b!61368 m!54405))

(assert (=> b!61368 m!54405))

(declare-fun m!54407 () Bool)

(assert (=> b!61368 m!54407))

(assert (=> b!61369 m!54405))

(assert (=> b!61369 m!54405))

(assert (=> b!61369 m!54407))

(assert (=> bm!4720 m!54405))

(declare-fun m!54409 () Bool)

(assert (=> bm!4720 m!54409))

(assert (=> b!61371 m!54405))

(assert (=> b!61371 m!54405))

(declare-fun m!54411 () Bool)

(assert (=> b!61371 m!54411))

(assert (=> b!60928 d!12183))

(declare-fun d!12185 () Bool)

(declare-fun e!40325 () Bool)

(assert (=> d!12185 e!40325))

(declare-fun res!33835 () Bool)

(assert (=> d!12185 (=> res!33835 e!40325)))

(declare-fun lt!25412 () Bool)

(assert (=> d!12185 (= res!33835 (not lt!25412))))

(declare-fun lt!25411 () Bool)

(assert (=> d!12185 (= lt!25412 lt!25411)))

(declare-fun lt!25410 () Unit!1625)

(declare-fun e!40326 () Unit!1625)

(assert (=> d!12185 (= lt!25410 e!40326)))

(declare-fun c!8046 () Bool)

(assert (=> d!12185 (= c!8046 lt!25411)))

(assert (=> d!12185 (= lt!25411 (containsKey!129 (toList!700 lt!25166) (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12185 (= (contains!686 lt!25166 (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!25412)))

(declare-fun b!61372 () Bool)

(declare-fun lt!25409 () Unit!1625)

(assert (=> b!61372 (= e!40326 lt!25409)))

(assert (=> b!61372 (= lt!25409 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 lt!25166) (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> b!61372 (isDefined!78 (getValueByKey!125 (toList!700 lt!25166) (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!61373 () Bool)

(declare-fun Unit!1649 () Unit!1625)

(assert (=> b!61373 (= e!40326 Unit!1649)))

(declare-fun b!61374 () Bool)

(assert (=> b!61374 (= e!40325 (isDefined!78 (getValueByKey!125 (toList!700 lt!25166) (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!12185 c!8046) b!61372))

(assert (= (and d!12185 (not c!8046)) b!61373))

(assert (= (and d!12185 (not res!33835)) b!61374))

(declare-fun m!54413 () Bool)

(assert (=> d!12185 m!54413))

(declare-fun m!54415 () Bool)

(assert (=> b!61372 m!54415))

(assert (=> b!61372 m!53913))

(assert (=> b!61372 m!53913))

(declare-fun m!54417 () Bool)

(assert (=> b!61372 m!54417))

(assert (=> b!61374 m!53913))

(assert (=> b!61374 m!53913))

(assert (=> b!61374 m!54417))

(assert (=> d!12065 d!12185))

(declare-fun b!61375 () Bool)

(declare-fun e!40327 () Option!131)

(assert (=> b!61375 (= e!40327 (Some!130 (_2!1027 (h!2014 lt!25167))))))

(declare-fun c!8047 () Bool)

(declare-fun d!12187 () Bool)

(assert (=> d!12187 (= c!8047 (and ((_ is Cons!1432) lt!25167) (= (_1!1027 (h!2014 lt!25167)) (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!12187 (= (getValueByKey!125 lt!25167 (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!40327)))

(declare-fun b!61376 () Bool)

(declare-fun e!40328 () Option!131)

(assert (=> b!61376 (= e!40327 e!40328)))

(declare-fun c!8048 () Bool)

(assert (=> b!61376 (= c!8048 (and ((_ is Cons!1432) lt!25167) (not (= (_1!1027 (h!2014 lt!25167)) (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!61378 () Bool)

(assert (=> b!61378 (= e!40328 None!129)))

(declare-fun b!61377 () Bool)

(assert (=> b!61377 (= e!40328 (getValueByKey!125 (t!4806 lt!25167) (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!12187 c!8047) b!61375))

(assert (= (and d!12187 (not c!8047)) b!61376))

(assert (= (and b!61376 c!8048) b!61377))

(assert (= (and b!61376 (not c!8048)) b!61378))

(declare-fun m!54419 () Bool)

(assert (=> b!61377 m!54419))

(assert (=> d!12065 d!12187))

(declare-fun d!12189 () Bool)

(assert (=> d!12189 (= (getValueByKey!125 lt!25167 (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!25415 () Unit!1625)

(declare-fun choose!325 (List!1436 (_ BitVec 64) V!2859) Unit!1625)

(assert (=> d!12189 (= lt!25415 (choose!325 lt!25167 (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!40331 () Bool)

(assert (=> d!12189 e!40331))

(declare-fun res!33840 () Bool)

(assert (=> d!12189 (=> (not res!33840) (not e!40331))))

(assert (=> d!12189 (= res!33840 (isStrictlySorted!285 lt!25167))))

(assert (=> d!12189 (= (lemmaContainsTupThenGetReturnValue!42 lt!25167 (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!25415)))

(declare-fun b!61383 () Bool)

(declare-fun res!33841 () Bool)

(assert (=> b!61383 (=> (not res!33841) (not e!40331))))

(assert (=> b!61383 (= res!33841 (containsKey!129 lt!25167 (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!61384 () Bool)

(assert (=> b!61384 (= e!40331 (contains!688 lt!25167 (tuple2!2033 (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!12189 res!33840) b!61383))

(assert (= (and b!61383 res!33841) b!61384))

(assert (=> d!12189 m!53907))

(declare-fun m!54421 () Bool)

(assert (=> d!12189 m!54421))

(declare-fun m!54423 () Bool)

(assert (=> d!12189 m!54423))

(declare-fun m!54425 () Bool)

(assert (=> b!61383 m!54425))

(declare-fun m!54427 () Bool)

(assert (=> b!61384 m!54427))

(assert (=> d!12065 d!12189))

(declare-fun lt!25418 () List!1436)

(declare-fun e!40344 () Bool)

(declare-fun b!61405 () Bool)

(assert (=> b!61405 (= e!40344 (contains!688 lt!25418 (tuple2!2033 (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun bm!4727 () Bool)

(declare-fun call!4730 () List!1436)

(declare-fun c!8058 () Bool)

(declare-fun e!40342 () List!1436)

(declare-fun $colon$colon!61 (List!1436 tuple2!2032) List!1436)

(assert (=> bm!4727 (= call!4730 ($colon$colon!61 e!40342 (ite c!8058 (h!2014 (toList!700 call!4626)) (tuple2!2033 (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun c!8057 () Bool)

(assert (=> bm!4727 (= c!8057 c!8058)))

(declare-fun b!61406 () Bool)

(declare-fun e!40346 () List!1436)

(assert (=> b!61406 (= e!40346 call!4730)))

(declare-fun bm!4728 () Bool)

(declare-fun call!4732 () List!1436)

(declare-fun call!4731 () List!1436)

(assert (=> bm!4728 (= call!4732 call!4731)))

(declare-fun b!61407 () Bool)

(declare-fun e!40343 () List!1436)

(assert (=> b!61407 (= e!40343 call!4732)))

(declare-fun b!61408 () Bool)

(assert (=> b!61408 (= e!40342 (insertStrictlySorted!45 (t!4806 (toList!700 call!4626)) (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun bm!4729 () Bool)

(assert (=> bm!4729 (= call!4731 call!4730)))

(declare-fun b!61409 () Bool)

(assert (=> b!61409 (= e!40343 call!4732)))

(declare-fun d!12191 () Bool)

(assert (=> d!12191 e!40344))

(declare-fun res!33846 () Bool)

(assert (=> d!12191 (=> (not res!33846) (not e!40344))))

(assert (=> d!12191 (= res!33846 (isStrictlySorted!285 lt!25418))))

(assert (=> d!12191 (= lt!25418 e!40346)))

(assert (=> d!12191 (= c!8058 (and ((_ is Cons!1432) (toList!700 call!4626)) (bvslt (_1!1027 (h!2014 (toList!700 call!4626))) (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!12191 (isStrictlySorted!285 (toList!700 call!4626))))

(assert (=> d!12191 (= (insertStrictlySorted!45 (toList!700 call!4626) (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!25418)))

(declare-fun b!61410 () Bool)

(declare-fun e!40345 () List!1436)

(assert (=> b!61410 (= e!40345 call!4731)))

(declare-fun b!61411 () Bool)

(declare-fun c!8060 () Bool)

(assert (=> b!61411 (= c!8060 (and ((_ is Cons!1432) (toList!700 call!4626)) (bvsgt (_1!1027 (h!2014 (toList!700 call!4626))) (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!61411 (= e!40345 e!40343)))

(declare-fun b!61412 () Bool)

(declare-fun res!33847 () Bool)

(assert (=> b!61412 (=> (not res!33847) (not e!40344))))

(assert (=> b!61412 (= res!33847 (containsKey!129 lt!25418 (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!61413 () Bool)

(assert (=> b!61413 (= e!40346 e!40345)))

(declare-fun c!8059 () Bool)

(assert (=> b!61413 (= c!8059 (and ((_ is Cons!1432) (toList!700 call!4626)) (= (_1!1027 (h!2014 (toList!700 call!4626))) (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!61414 () Bool)

(assert (=> b!61414 (= e!40342 (ite c!8059 (t!4806 (toList!700 call!4626)) (ite c!8060 (Cons!1432 (h!2014 (toList!700 call!4626)) (t!4806 (toList!700 call!4626))) Nil!1433)))))

(assert (= (and d!12191 c!8058) b!61406))

(assert (= (and d!12191 (not c!8058)) b!61413))

(assert (= (and b!61413 c!8059) b!61410))

(assert (= (and b!61413 (not c!8059)) b!61411))

(assert (= (and b!61411 c!8060) b!61409))

(assert (= (and b!61411 (not c!8060)) b!61407))

(assert (= (or b!61409 b!61407) bm!4728))

(assert (= (or b!61410 bm!4728) bm!4729))

(assert (= (or b!61406 bm!4729) bm!4727))

(assert (= (and bm!4727 c!8057) b!61408))

(assert (= (and bm!4727 (not c!8057)) b!61414))

(assert (= (and d!12191 res!33846) b!61412))

(assert (= (and b!61412 res!33847) b!61405))

(declare-fun m!54429 () Bool)

(assert (=> bm!4727 m!54429))

(declare-fun m!54431 () Bool)

(assert (=> b!61412 m!54431))

(declare-fun m!54433 () Bool)

(assert (=> d!12191 m!54433))

(declare-fun m!54435 () Bool)

(assert (=> d!12191 m!54435))

(declare-fun m!54437 () Bool)

(assert (=> b!61408 m!54437))

(declare-fun m!54439 () Bool)

(assert (=> b!61405 m!54439))

(assert (=> d!12065 d!12191))

(declare-fun b!61415 () Bool)

(declare-fun e!40353 () Bool)

(assert (=> b!61415 (= e!40353 (validKeyInArray!0 (select (arr!1793 (_keys!3695 (ite c!7904 (_2!1026 lt!24941) newMap!16))) #b00000000000000000000000000000000)))))

(declare-fun b!61416 () Bool)

(declare-fun res!33848 () Bool)

(declare-fun e!40348 () Bool)

(assert (=> b!61416 (=> (not res!33848) (not e!40348))))

(declare-fun e!40351 () Bool)

(assert (=> b!61416 (= res!33848 e!40351)))

(declare-fun res!33856 () Bool)

(assert (=> b!61416 (=> res!33856 e!40351)))

(declare-fun e!40347 () Bool)

(assert (=> b!61416 (= res!33856 (not e!40347))))

(declare-fun res!33852 () Bool)

(assert (=> b!61416 (=> (not res!33852) (not e!40347))))

(assert (=> b!61416 (= res!33852 (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 (ite c!7904 (_2!1026 lt!24941) newMap!16)))))))

(declare-fun b!61417 () Bool)

(declare-fun e!40355 () Unit!1625)

(declare-fun Unit!1650 () Unit!1625)

(assert (=> b!61417 (= e!40355 Unit!1650)))

(declare-fun b!61418 () Bool)

(declare-fun c!8064 () Bool)

(assert (=> b!61418 (= c!8064 (and (not (= (bvand (extraKeys!1950 (ite c!7904 (_2!1026 lt!24941) newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1950 (ite c!7904 (_2!1026 lt!24941) newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!40352 () ListLongMap!1369)

(declare-fun e!40354 () ListLongMap!1369)

(assert (=> b!61418 (= e!40352 e!40354)))

(declare-fun e!40359 () ListLongMap!1369)

(declare-fun call!4739 () ListLongMap!1369)

(declare-fun b!61419 () Bool)

(assert (=> b!61419 (= e!40359 (+!82 call!4739 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (ite c!7904 (_2!1026 lt!24941) newMap!16)))))))

(declare-fun call!4733 () ListLongMap!1369)

(declare-fun bm!4730 () Bool)

(declare-fun c!8063 () Bool)

(declare-fun call!4738 () ListLongMap!1369)

(declare-fun call!4737 () ListLongMap!1369)

(declare-fun c!8062 () Bool)

(assert (=> bm!4730 (= call!4739 (+!82 (ite c!8062 call!4733 (ite c!8063 call!4738 call!4737)) (ite (or c!8062 c!8063) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (ite c!7904 (_2!1026 lt!24941) newMap!16))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (ite c!7904 (_2!1026 lt!24941) newMap!16))))))))

(declare-fun b!61420 () Bool)

(declare-fun res!33851 () Bool)

(assert (=> b!61420 (=> (not res!33851) (not e!40348))))

(declare-fun e!40357 () Bool)

(assert (=> b!61420 (= res!33851 e!40357)))

(declare-fun c!8065 () Bool)

(assert (=> b!61420 (= c!8065 (not (= (bvand (extraKeys!1950 (ite c!7904 (_2!1026 lt!24941) newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun lt!25419 () ListLongMap!1369)

(declare-fun b!61421 () Bool)

(declare-fun e!40350 () Bool)

(assert (=> b!61421 (= e!40350 (= (apply!67 lt!25419 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1981 (ite c!7904 (_2!1026 lt!24941) newMap!16))))))

(declare-fun bm!4731 () Bool)

(assert (=> bm!4731 (= call!4737 call!4738)))

(declare-fun b!61422 () Bool)

(assert (=> b!61422 (= e!40357 e!40350)))

(declare-fun res!33849 () Bool)

(declare-fun call!4735 () Bool)

(assert (=> b!61422 (= res!33849 call!4735)))

(assert (=> b!61422 (=> (not res!33849) (not e!40350))))

(declare-fun b!61423 () Bool)

(declare-fun e!40356 () Bool)

(assert (=> b!61423 (= e!40356 (= (apply!67 lt!25419 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1981 (ite c!7904 (_2!1026 lt!24941) newMap!16))))))

(declare-fun b!61424 () Bool)

(assert (=> b!61424 (= e!40354 call!4737)))

(declare-fun bm!4733 () Bool)

(assert (=> bm!4733 (= call!4733 (getCurrentListMapNoExtraKeys!45 (_keys!3695 (ite c!7904 (_2!1026 lt!24941) newMap!16)) (_values!2050 (ite c!7904 (_2!1026 lt!24941) newMap!16)) (mask!5963 (ite c!7904 (_2!1026 lt!24941) newMap!16)) (extraKeys!1950 (ite c!7904 (_2!1026 lt!24941) newMap!16)) (zeroValue!1981 (ite c!7904 (_2!1026 lt!24941) newMap!16)) (minValue!1981 (ite c!7904 (_2!1026 lt!24941) newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2067 (ite c!7904 (_2!1026 lt!24941) newMap!16))))))

(declare-fun b!61425 () Bool)

(declare-fun e!40349 () Bool)

(assert (=> b!61425 (= e!40351 e!40349)))

(declare-fun res!33850 () Bool)

(assert (=> b!61425 (=> (not res!33850) (not e!40349))))

(assert (=> b!61425 (= res!33850 (contains!686 lt!25419 (select (arr!1793 (_keys!3695 (ite c!7904 (_2!1026 lt!24941) newMap!16))) #b00000000000000000000000000000000)))))

(assert (=> b!61425 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 (ite c!7904 (_2!1026 lt!24941) newMap!16)))))))

(declare-fun bm!4734 () Bool)

(assert (=> bm!4734 (= call!4735 (contains!686 lt!25419 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61426 () Bool)

(declare-fun call!4736 () ListLongMap!1369)

(assert (=> b!61426 (= e!40354 call!4736)))

(declare-fun b!61427 () Bool)

(assert (=> b!61427 (= e!40349 (= (apply!67 lt!25419 (select (arr!1793 (_keys!3695 (ite c!7904 (_2!1026 lt!24941) newMap!16))) #b00000000000000000000000000000000)) (get!1075 (select (arr!1794 (_values!2050 (ite c!7904 (_2!1026 lt!24941) newMap!16))) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2067 (ite c!7904 (_2!1026 lt!24941) newMap!16)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!61427 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2025 (_values!2050 (ite c!7904 (_2!1026 lt!24941) newMap!16)))))))

(assert (=> b!61427 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 (ite c!7904 (_2!1026 lt!24941) newMap!16)))))))

(declare-fun bm!4735 () Bool)

(assert (=> bm!4735 (= call!4736 call!4739)))

(declare-fun d!12193 () Bool)

(assert (=> d!12193 e!40348))

(declare-fun res!33853 () Bool)

(assert (=> d!12193 (=> (not res!33853) (not e!40348))))

(assert (=> d!12193 (= res!33853 (or (bvsge #b00000000000000000000000000000000 (size!2024 (_keys!3695 (ite c!7904 (_2!1026 lt!24941) newMap!16)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 (ite c!7904 (_2!1026 lt!24941) newMap!16)))))))))

(declare-fun lt!25435 () ListLongMap!1369)

(assert (=> d!12193 (= lt!25419 lt!25435)))

(declare-fun lt!25428 () Unit!1625)

(assert (=> d!12193 (= lt!25428 e!40355)))

(declare-fun c!8066 () Bool)

(assert (=> d!12193 (= c!8066 e!40353)))

(declare-fun res!33855 () Bool)

(assert (=> d!12193 (=> (not res!33855) (not e!40353))))

(assert (=> d!12193 (= res!33855 (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 (ite c!7904 (_2!1026 lt!24941) newMap!16)))))))

(assert (=> d!12193 (= lt!25435 e!40359)))

(assert (=> d!12193 (= c!8062 (and (not (= (bvand (extraKeys!1950 (ite c!7904 (_2!1026 lt!24941) newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1950 (ite c!7904 (_2!1026 lt!24941) newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12193 (validMask!0 (mask!5963 (ite c!7904 (_2!1026 lt!24941) newMap!16)))))

(assert (=> d!12193 (= (getCurrentListMap!405 (_keys!3695 (ite c!7904 (_2!1026 lt!24941) newMap!16)) (_values!2050 (ite c!7904 (_2!1026 lt!24941) newMap!16)) (mask!5963 (ite c!7904 (_2!1026 lt!24941) newMap!16)) (extraKeys!1950 (ite c!7904 (_2!1026 lt!24941) newMap!16)) (zeroValue!1981 (ite c!7904 (_2!1026 lt!24941) newMap!16)) (minValue!1981 (ite c!7904 (_2!1026 lt!24941) newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2067 (ite c!7904 (_2!1026 lt!24941) newMap!16))) lt!25419)))

(declare-fun bm!4732 () Bool)

(assert (=> bm!4732 (= call!4738 call!4733)))

(declare-fun b!61428 () Bool)

(declare-fun lt!25438 () Unit!1625)

(assert (=> b!61428 (= e!40355 lt!25438)))

(declare-fun lt!25430 () ListLongMap!1369)

(assert (=> b!61428 (= lt!25430 (getCurrentListMapNoExtraKeys!45 (_keys!3695 (ite c!7904 (_2!1026 lt!24941) newMap!16)) (_values!2050 (ite c!7904 (_2!1026 lt!24941) newMap!16)) (mask!5963 (ite c!7904 (_2!1026 lt!24941) newMap!16)) (extraKeys!1950 (ite c!7904 (_2!1026 lt!24941) newMap!16)) (zeroValue!1981 (ite c!7904 (_2!1026 lt!24941) newMap!16)) (minValue!1981 (ite c!7904 (_2!1026 lt!24941) newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2067 (ite c!7904 (_2!1026 lt!24941) newMap!16))))))

(declare-fun lt!25420 () (_ BitVec 64))

(assert (=> b!61428 (= lt!25420 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25433 () (_ BitVec 64))

(assert (=> b!61428 (= lt!25433 (select (arr!1793 (_keys!3695 (ite c!7904 (_2!1026 lt!24941) newMap!16))) #b00000000000000000000000000000000))))

(declare-fun lt!25440 () Unit!1625)

(assert (=> b!61428 (= lt!25440 (addStillContains!43 lt!25430 lt!25420 (zeroValue!1981 (ite c!7904 (_2!1026 lt!24941) newMap!16)) lt!25433))))

(assert (=> b!61428 (contains!686 (+!82 lt!25430 (tuple2!2033 lt!25420 (zeroValue!1981 (ite c!7904 (_2!1026 lt!24941) newMap!16)))) lt!25433)))

(declare-fun lt!25426 () Unit!1625)

(assert (=> b!61428 (= lt!25426 lt!25440)))

(declare-fun lt!25427 () ListLongMap!1369)

(assert (=> b!61428 (= lt!25427 (getCurrentListMapNoExtraKeys!45 (_keys!3695 (ite c!7904 (_2!1026 lt!24941) newMap!16)) (_values!2050 (ite c!7904 (_2!1026 lt!24941) newMap!16)) (mask!5963 (ite c!7904 (_2!1026 lt!24941) newMap!16)) (extraKeys!1950 (ite c!7904 (_2!1026 lt!24941) newMap!16)) (zeroValue!1981 (ite c!7904 (_2!1026 lt!24941) newMap!16)) (minValue!1981 (ite c!7904 (_2!1026 lt!24941) newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2067 (ite c!7904 (_2!1026 lt!24941) newMap!16))))))

(declare-fun lt!25425 () (_ BitVec 64))

(assert (=> b!61428 (= lt!25425 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25439 () (_ BitVec 64))

(assert (=> b!61428 (= lt!25439 (select (arr!1793 (_keys!3695 (ite c!7904 (_2!1026 lt!24941) newMap!16))) #b00000000000000000000000000000000))))

(declare-fun lt!25424 () Unit!1625)

(assert (=> b!61428 (= lt!25424 (addApplyDifferent!43 lt!25427 lt!25425 (minValue!1981 (ite c!7904 (_2!1026 lt!24941) newMap!16)) lt!25439))))

(assert (=> b!61428 (= (apply!67 (+!82 lt!25427 (tuple2!2033 lt!25425 (minValue!1981 (ite c!7904 (_2!1026 lt!24941) newMap!16)))) lt!25439) (apply!67 lt!25427 lt!25439))))

(declare-fun lt!25423 () Unit!1625)

(assert (=> b!61428 (= lt!25423 lt!25424)))

(declare-fun lt!25434 () ListLongMap!1369)

(assert (=> b!61428 (= lt!25434 (getCurrentListMapNoExtraKeys!45 (_keys!3695 (ite c!7904 (_2!1026 lt!24941) newMap!16)) (_values!2050 (ite c!7904 (_2!1026 lt!24941) newMap!16)) (mask!5963 (ite c!7904 (_2!1026 lt!24941) newMap!16)) (extraKeys!1950 (ite c!7904 (_2!1026 lt!24941) newMap!16)) (zeroValue!1981 (ite c!7904 (_2!1026 lt!24941) newMap!16)) (minValue!1981 (ite c!7904 (_2!1026 lt!24941) newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2067 (ite c!7904 (_2!1026 lt!24941) newMap!16))))))

(declare-fun lt!25421 () (_ BitVec 64))

(assert (=> b!61428 (= lt!25421 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25429 () (_ BitVec 64))

(assert (=> b!61428 (= lt!25429 (select (arr!1793 (_keys!3695 (ite c!7904 (_2!1026 lt!24941) newMap!16))) #b00000000000000000000000000000000))))

(declare-fun lt!25436 () Unit!1625)

(assert (=> b!61428 (= lt!25436 (addApplyDifferent!43 lt!25434 lt!25421 (zeroValue!1981 (ite c!7904 (_2!1026 lt!24941) newMap!16)) lt!25429))))

(assert (=> b!61428 (= (apply!67 (+!82 lt!25434 (tuple2!2033 lt!25421 (zeroValue!1981 (ite c!7904 (_2!1026 lt!24941) newMap!16)))) lt!25429) (apply!67 lt!25434 lt!25429))))

(declare-fun lt!25437 () Unit!1625)

(assert (=> b!61428 (= lt!25437 lt!25436)))

(declare-fun lt!25422 () ListLongMap!1369)

(assert (=> b!61428 (= lt!25422 (getCurrentListMapNoExtraKeys!45 (_keys!3695 (ite c!7904 (_2!1026 lt!24941) newMap!16)) (_values!2050 (ite c!7904 (_2!1026 lt!24941) newMap!16)) (mask!5963 (ite c!7904 (_2!1026 lt!24941) newMap!16)) (extraKeys!1950 (ite c!7904 (_2!1026 lt!24941) newMap!16)) (zeroValue!1981 (ite c!7904 (_2!1026 lt!24941) newMap!16)) (minValue!1981 (ite c!7904 (_2!1026 lt!24941) newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2067 (ite c!7904 (_2!1026 lt!24941) newMap!16))))))

(declare-fun lt!25432 () (_ BitVec 64))

(assert (=> b!61428 (= lt!25432 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25431 () (_ BitVec 64))

(assert (=> b!61428 (= lt!25431 (select (arr!1793 (_keys!3695 (ite c!7904 (_2!1026 lt!24941) newMap!16))) #b00000000000000000000000000000000))))

(assert (=> b!61428 (= lt!25438 (addApplyDifferent!43 lt!25422 lt!25432 (minValue!1981 (ite c!7904 (_2!1026 lt!24941) newMap!16)) lt!25431))))

(assert (=> b!61428 (= (apply!67 (+!82 lt!25422 (tuple2!2033 lt!25432 (minValue!1981 (ite c!7904 (_2!1026 lt!24941) newMap!16)))) lt!25431) (apply!67 lt!25422 lt!25431))))

(declare-fun b!61429 () Bool)

(declare-fun e!40358 () Bool)

(declare-fun call!4734 () Bool)

(assert (=> b!61429 (= e!40358 (not call!4734))))

(declare-fun b!61430 () Bool)

(assert (=> b!61430 (= e!40352 call!4736)))

(declare-fun b!61431 () Bool)

(assert (=> b!61431 (= e!40347 (validKeyInArray!0 (select (arr!1793 (_keys!3695 (ite c!7904 (_2!1026 lt!24941) newMap!16))) #b00000000000000000000000000000000)))))

(declare-fun b!61432 () Bool)

(assert (=> b!61432 (= e!40357 (not call!4735))))

(declare-fun bm!4736 () Bool)

(assert (=> bm!4736 (= call!4734 (contains!686 lt!25419 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61433 () Bool)

(assert (=> b!61433 (= e!40358 e!40356)))

(declare-fun res!33854 () Bool)

(assert (=> b!61433 (= res!33854 call!4734)))

(assert (=> b!61433 (=> (not res!33854) (not e!40356))))

(declare-fun b!61434 () Bool)

(assert (=> b!61434 (= e!40359 e!40352)))

(assert (=> b!61434 (= c!8063 (and (not (= (bvand (extraKeys!1950 (ite c!7904 (_2!1026 lt!24941) newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1950 (ite c!7904 (_2!1026 lt!24941) newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!61435 () Bool)

(assert (=> b!61435 (= e!40348 e!40358)))

(declare-fun c!8061 () Bool)

(assert (=> b!61435 (= c!8061 (not (= (bvand (extraKeys!1950 (ite c!7904 (_2!1026 lt!24941) newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!12193 c!8062) b!61419))

(assert (= (and d!12193 (not c!8062)) b!61434))

(assert (= (and b!61434 c!8063) b!61430))

(assert (= (and b!61434 (not c!8063)) b!61418))

(assert (= (and b!61418 c!8064) b!61426))

(assert (= (and b!61418 (not c!8064)) b!61424))

(assert (= (or b!61426 b!61424) bm!4731))

(assert (= (or b!61430 bm!4731) bm!4732))

(assert (= (or b!61430 b!61426) bm!4735))

(assert (= (or b!61419 bm!4732) bm!4733))

(assert (= (or b!61419 bm!4735) bm!4730))

(assert (= (and d!12193 res!33855) b!61415))

(assert (= (and d!12193 c!8066) b!61428))

(assert (= (and d!12193 (not c!8066)) b!61417))

(assert (= (and d!12193 res!33853) b!61416))

(assert (= (and b!61416 res!33852) b!61431))

(assert (= (and b!61416 (not res!33856)) b!61425))

(assert (= (and b!61425 res!33850) b!61427))

(assert (= (and b!61416 res!33848) b!61420))

(assert (= (and b!61420 c!8065) b!61422))

(assert (= (and b!61420 (not c!8065)) b!61432))

(assert (= (and b!61422 res!33849) b!61421))

(assert (= (or b!61422 b!61432) bm!4734))

(assert (= (and b!61420 res!33851) b!61435))

(assert (= (and b!61435 c!8061) b!61433))

(assert (= (and b!61435 (not c!8061)) b!61429))

(assert (= (and b!61433 res!33854) b!61423))

(assert (= (or b!61433 b!61429) bm!4736))

(declare-fun b_lambda!2731 () Bool)

(assert (=> (not b_lambda!2731) (not b!61427)))

(declare-fun t!4817 () Bool)

(declare-fun tb!1357 () Bool)

(assert (=> (and b!60606 (= (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) (defaultEntry!2067 (ite c!7904 (_2!1026 lt!24941) newMap!16))) t!4817) tb!1357))

(declare-fun result!2431 () Bool)

(assert (=> tb!1357 (= result!2431 tp_is_empty!2409)))

(assert (=> b!61427 t!4817))

(declare-fun b_and!3759 () Bool)

(assert (= b_and!3755 (and (=> t!4817 result!2431) b_and!3759)))

(declare-fun t!4819 () Bool)

(declare-fun tb!1359 () Bool)

(assert (=> (and b!60590 (= (defaultEntry!2067 newMap!16) (defaultEntry!2067 (ite c!7904 (_2!1026 lt!24941) newMap!16))) t!4819) tb!1359))

(declare-fun result!2433 () Bool)

(assert (= result!2433 result!2431))

(assert (=> b!61427 t!4819))

(declare-fun b_and!3761 () Bool)

(assert (= b_and!3757 (and (=> t!4819 result!2433) b_and!3761)))

(declare-fun m!54441 () Bool)

(assert (=> bm!4730 m!54441))

(declare-fun m!54443 () Bool)

(assert (=> bm!4733 m!54443))

(declare-fun m!54445 () Bool)

(assert (=> b!61428 m!54445))

(declare-fun m!54447 () Bool)

(assert (=> b!61428 m!54447))

(declare-fun m!54449 () Bool)

(assert (=> b!61428 m!54449))

(declare-fun m!54451 () Bool)

(assert (=> b!61428 m!54451))

(declare-fun m!54453 () Bool)

(assert (=> b!61428 m!54453))

(declare-fun m!54455 () Bool)

(assert (=> b!61428 m!54455))

(declare-fun m!54457 () Bool)

(assert (=> b!61428 m!54457))

(declare-fun m!54459 () Bool)

(assert (=> b!61428 m!54459))

(declare-fun m!54461 () Bool)

(assert (=> b!61428 m!54461))

(assert (=> b!61428 m!54443))

(assert (=> b!61428 m!54445))

(declare-fun m!54463 () Bool)

(assert (=> b!61428 m!54463))

(assert (=> b!61428 m!54449))

(declare-fun m!54465 () Bool)

(assert (=> b!61428 m!54465))

(assert (=> b!61428 m!54459))

(declare-fun m!54467 () Bool)

(assert (=> b!61428 m!54467))

(declare-fun m!54469 () Bool)

(assert (=> b!61428 m!54469))

(declare-fun m!54471 () Bool)

(assert (=> b!61428 m!54471))

(declare-fun m!54473 () Bool)

(assert (=> b!61428 m!54473))

(assert (=> b!61428 m!54463))

(declare-fun m!54475 () Bool)

(assert (=> b!61428 m!54475))

(declare-fun m!54477 () Bool)

(assert (=> b!61421 m!54477))

(assert (=> b!61431 m!54455))

(assert (=> b!61431 m!54455))

(declare-fun m!54479 () Bool)

(assert (=> b!61431 m!54479))

(assert (=> b!61427 m!54455))

(declare-fun m!54481 () Bool)

(assert (=> b!61427 m!54481))

(declare-fun m!54483 () Bool)

(assert (=> b!61427 m!54483))

(assert (=> b!61427 m!54483))

(declare-fun m!54485 () Bool)

(assert (=> b!61427 m!54485))

(declare-fun m!54487 () Bool)

(assert (=> b!61427 m!54487))

(assert (=> b!61427 m!54455))

(assert (=> b!61427 m!54485))

(assert (=> b!61425 m!54455))

(assert (=> b!61425 m!54455))

(declare-fun m!54489 () Bool)

(assert (=> b!61425 m!54489))

(declare-fun m!54491 () Bool)

(assert (=> b!61423 m!54491))

(assert (=> b!61415 m!54455))

(assert (=> b!61415 m!54455))

(assert (=> b!61415 m!54479))

(declare-fun m!54493 () Bool)

(assert (=> b!61419 m!54493))

(declare-fun m!54495 () Bool)

(assert (=> bm!4734 m!54495))

(declare-fun m!54497 () Bool)

(assert (=> d!12193 m!54497))

(declare-fun m!54499 () Bool)

(assert (=> bm!4736 m!54499))

(assert (=> d!12011 d!12193))

(declare-fun d!12195 () Bool)

(declare-fun e!40360 () Bool)

(assert (=> d!12195 e!40360))

(declare-fun res!33857 () Bool)

(assert (=> d!12195 (=> (not res!33857) (not e!40360))))

(declare-fun lt!25442 () ListLongMap!1369)

(assert (=> d!12195 (= res!33857 (contains!686 lt!25442 (_1!1027 (ite (or c!7944 c!7945) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))))

(declare-fun lt!25443 () List!1436)

(assert (=> d!12195 (= lt!25442 (ListLongMap!1370 lt!25443))))

(declare-fun lt!25441 () Unit!1625)

(declare-fun lt!25444 () Unit!1625)

(assert (=> d!12195 (= lt!25441 lt!25444)))

(assert (=> d!12195 (= (getValueByKey!125 lt!25443 (_1!1027 (ite (or c!7944 c!7945) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))) (Some!130 (_2!1027 (ite (or c!7944 c!7945) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))))

(assert (=> d!12195 (= lt!25444 (lemmaContainsTupThenGetReturnValue!42 lt!25443 (_1!1027 (ite (or c!7944 c!7945) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))) (_2!1027 (ite (or c!7944 c!7945) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))))

(assert (=> d!12195 (= lt!25443 (insertStrictlySorted!45 (toList!700 (ite c!7944 call!4662 (ite c!7945 call!4667 call!4666))) (_1!1027 (ite (or c!7944 c!7945) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))) (_2!1027 (ite (or c!7944 c!7945) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))))

(assert (=> d!12195 (= (+!82 (ite c!7944 call!4662 (ite c!7945 call!4667 call!4666)) (ite (or c!7944 c!7945) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))) lt!25442)))

(declare-fun b!61436 () Bool)

(declare-fun res!33858 () Bool)

(assert (=> b!61436 (=> (not res!33858) (not e!40360))))

(assert (=> b!61436 (= res!33858 (= (getValueByKey!125 (toList!700 lt!25442) (_1!1027 (ite (or c!7944 c!7945) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))) (Some!130 (_2!1027 (ite (or c!7944 c!7945) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))))

(declare-fun b!61437 () Bool)

(assert (=> b!61437 (= e!40360 (contains!688 (toList!700 lt!25442) (ite (or c!7944 c!7945) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(assert (= (and d!12195 res!33857) b!61436))

(assert (= (and b!61436 res!33858) b!61437))

(declare-fun m!54501 () Bool)

(assert (=> d!12195 m!54501))

(declare-fun m!54503 () Bool)

(assert (=> d!12195 m!54503))

(declare-fun m!54505 () Bool)

(assert (=> d!12195 m!54505))

(declare-fun m!54507 () Bool)

(assert (=> d!12195 m!54507))

(declare-fun m!54509 () Bool)

(assert (=> b!61436 m!54509))

(declare-fun m!54511 () Bool)

(assert (=> b!61437 m!54511))

(assert (=> bm!4659 d!12195))

(declare-fun d!12197 () Bool)

(declare-fun e!40361 () Bool)

(assert (=> d!12197 e!40361))

(declare-fun res!33859 () Bool)

(assert (=> d!12197 (=> res!33859 e!40361)))

(declare-fun lt!25448 () Bool)

(assert (=> d!12197 (= res!33859 (not lt!25448))))

(declare-fun lt!25447 () Bool)

(assert (=> d!12197 (= lt!25448 lt!25447)))

(declare-fun lt!25446 () Unit!1625)

(declare-fun e!40362 () Unit!1625)

(assert (=> d!12197 (= lt!25446 e!40362)))

(declare-fun c!8067 () Bool)

(assert (=> d!12197 (= c!8067 lt!25447)))

(assert (=> d!12197 (= lt!25447 (containsKey!129 (toList!700 lt!25211) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12197 (= (contains!686 lt!25211 #b0000000000000000000000000000000000000000000000000000000000000000) lt!25448)))

(declare-fun b!61438 () Bool)

(declare-fun lt!25445 () Unit!1625)

(assert (=> b!61438 (= e!40362 lt!25445)))

(assert (=> b!61438 (= lt!25445 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 lt!25211) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61438 (isDefined!78 (getValueByKey!125 (toList!700 lt!25211) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61439 () Bool)

(declare-fun Unit!1651 () Unit!1625)

(assert (=> b!61439 (= e!40362 Unit!1651)))

(declare-fun b!61440 () Bool)

(assert (=> b!61440 (= e!40361 (isDefined!78 (getValueByKey!125 (toList!700 lt!25211) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12197 c!8067) b!61438))

(assert (= (and d!12197 (not c!8067)) b!61439))

(assert (= (and d!12197 (not res!33859)) b!61440))

(declare-fun m!54513 () Bool)

(assert (=> d!12197 m!54513))

(declare-fun m!54515 () Bool)

(assert (=> b!61438 m!54515))

(declare-fun m!54517 () Bool)

(assert (=> b!61438 m!54517))

(assert (=> b!61438 m!54517))

(declare-fun m!54519 () Bool)

(assert (=> b!61438 m!54519))

(assert (=> b!61440 m!54517))

(assert (=> b!61440 m!54517))

(assert (=> b!61440 m!54519))

(assert (=> bm!4698 d!12197))

(assert (=> d!11987 d!11971))

(declare-fun b!61457 () Bool)

(declare-fun e!40371 () Bool)

(declare-fun call!4744 () Bool)

(assert (=> b!61457 (= e!40371 (not call!4744))))

(declare-fun lt!25451 () SeekEntryResult!228)

(declare-fun call!4745 () Bool)

(declare-fun bm!4741 () Bool)

(declare-fun c!8072 () Bool)

(assert (=> bm!4741 (= call!4745 (inRange!0 (ite c!8072 (index!3036 lt!25451) (index!3039 lt!25451)) (mask!5963 newMap!16)))))

(declare-fun b!61458 () Bool)

(declare-fun e!40374 () Bool)

(declare-fun e!40372 () Bool)

(assert (=> b!61458 (= e!40374 e!40372)))

(declare-fun res!33871 () Bool)

(assert (=> b!61458 (= res!33871 call!4745)))

(assert (=> b!61458 (=> (not res!33871) (not e!40372))))

(declare-fun b!61459 () Bool)

(declare-fun e!40373 () Bool)

(assert (=> b!61459 (= e!40373 ((_ is Undefined!228) lt!25451))))

(declare-fun b!61460 () Bool)

(declare-fun res!33868 () Bool)

(assert (=> b!61460 (= res!33868 (= (select (arr!1793 (_keys!3695 newMap!16)) (index!3036 lt!25451)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61460 (=> (not res!33868) (not e!40372))))

(declare-fun d!12199 () Bool)

(assert (=> d!12199 e!40374))

(assert (=> d!12199 (= c!8072 ((_ is MissingZero!228) lt!25451))))

(assert (=> d!12199 (= lt!25451 (seekEntryOrOpen!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (_keys!3695 newMap!16) (mask!5963 newMap!16)))))

(assert (=> d!12199 true))

(declare-fun _$34!767 () Unit!1625)

(assert (=> d!12199 (= (choose!317 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (defaultEntry!2067 newMap!16)) _$34!767)))

(declare-fun b!61461 () Bool)

(declare-fun res!33869 () Bool)

(assert (=> b!61461 (=> (not res!33869) (not e!40371))))

(assert (=> b!61461 (= res!33869 (= (select (arr!1793 (_keys!3695 newMap!16)) (index!3039 lt!25451)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4742 () Bool)

(assert (=> bm!4742 (= call!4744 (arrayContainsKey!0 (_keys!3695 newMap!16) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!61462 () Bool)

(assert (=> b!61462 (= e!40374 e!40373)))

(declare-fun c!8073 () Bool)

(assert (=> b!61462 (= c!8073 ((_ is MissingVacant!228) lt!25451))))

(declare-fun b!61463 () Bool)

(declare-fun res!33870 () Bool)

(assert (=> b!61463 (=> (not res!33870) (not e!40371))))

(assert (=> b!61463 (= res!33870 call!4745)))

(assert (=> b!61463 (= e!40373 e!40371)))

(declare-fun b!61464 () Bool)

(assert (=> b!61464 (= e!40372 (not call!4744))))

(assert (= (and d!12199 c!8072) b!61458))

(assert (= (and d!12199 (not c!8072)) b!61462))

(assert (= (and b!61458 res!33871) b!61460))

(assert (= (and b!61460 res!33868) b!61464))

(assert (= (and b!61462 c!8073) b!61463))

(assert (= (and b!61462 (not c!8073)) b!61459))

(assert (= (and b!61463 res!33870) b!61461))

(assert (= (and b!61461 res!33869) b!61457))

(assert (= (or b!61458 b!61463) bm!4741))

(assert (= (or b!61464 b!61457) bm!4742))

(assert (=> bm!4742 m!53313))

(assert (=> bm!4742 m!53467))

(declare-fun m!54521 () Bool)

(assert (=> b!61460 m!54521))

(declare-fun m!54523 () Bool)

(assert (=> bm!4741 m!54523))

(assert (=> d!12199 m!53313))

(assert (=> d!12199 m!53429))

(declare-fun m!54525 () Bool)

(assert (=> b!61461 m!54525))

(assert (=> d!11987 d!12199))

(assert (=> d!11987 d!12123))

(declare-fun d!12201 () Bool)

(declare-fun e!40375 () Bool)

(assert (=> d!12201 e!40375))

(declare-fun res!33872 () Bool)

(assert (=> d!12201 (=> (not res!33872) (not e!40375))))

(declare-fun lt!25453 () ListLongMap!1369)

(assert (=> d!12201 (= res!33872 (contains!686 lt!25453 (_1!1027 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!25454 () List!1436)

(assert (=> d!12201 (= lt!25453 (ListLongMap!1370 lt!25454))))

(declare-fun lt!25452 () Unit!1625)

(declare-fun lt!25455 () Unit!1625)

(assert (=> d!12201 (= lt!25452 lt!25455)))

(assert (=> d!12201 (= (getValueByKey!125 lt!25454 (_1!1027 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1027 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12201 (= lt!25455 (lemmaContainsTupThenGetReturnValue!42 lt!25454 (_1!1027 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12201 (= lt!25454 (insertStrictlySorted!45 (toList!700 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16))) (_1!1027 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12201 (= (+!82 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!25453)))

(declare-fun b!61465 () Bool)

(declare-fun res!33873 () Bool)

(assert (=> b!61465 (=> (not res!33873) (not e!40375))))

(assert (=> b!61465 (= res!33873 (= (getValueByKey!125 (toList!700 lt!25453) (_1!1027 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1027 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!61466 () Bool)

(assert (=> b!61466 (= e!40375 (contains!688 (toList!700 lt!25453) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12201 res!33872) b!61465))

(assert (= (and b!61465 res!33873) b!61466))

(declare-fun m!54527 () Bool)

(assert (=> d!12201 m!54527))

(declare-fun m!54529 () Bool)

(assert (=> d!12201 m!54529))

(declare-fun m!54531 () Bool)

(assert (=> d!12201 m!54531))

(declare-fun m!54533 () Bool)

(assert (=> d!12201 m!54533))

(declare-fun m!54535 () Bool)

(assert (=> b!61465 m!54535))

(declare-fun m!54537 () Bool)

(assert (=> b!61466 m!54537))

(assert (=> d!12075 d!12201))

(assert (=> d!12075 d!11991))

(declare-fun b!61467 () Bool)

(declare-fun e!40382 () Bool)

(assert (=> b!61467 (= e!40382 (validKeyInArray!0 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61468 () Bool)

(declare-fun res!33874 () Bool)

(declare-fun e!40377 () Bool)

(assert (=> b!61468 (=> (not res!33874) (not e!40377))))

(declare-fun e!40380 () Bool)

(assert (=> b!61468 (= res!33874 e!40380)))

(declare-fun res!33882 () Bool)

(assert (=> b!61468 (=> res!33882 e!40380)))

(declare-fun e!40376 () Bool)

(assert (=> b!61468 (= res!33882 (not e!40376))))

(declare-fun res!33878 () Bool)

(assert (=> b!61468 (=> (not res!33878) (not e!40376))))

(assert (=> b!61468 (= res!33878 (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(declare-fun b!61469 () Bool)

(declare-fun e!40384 () Unit!1625)

(declare-fun Unit!1652 () Unit!1625)

(assert (=> b!61469 (= e!40384 Unit!1652)))

(declare-fun b!61470 () Bool)

(declare-fun c!8077 () Bool)

(assert (=> b!61470 (= c!8077 (and (not (= (bvand lt!24940 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!24940 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!40381 () ListLongMap!1369)

(declare-fun e!40383 () ListLongMap!1369)

(assert (=> b!61470 (= e!40381 e!40383)))

(declare-fun b!61471 () Bool)

(declare-fun e!40388 () ListLongMap!1369)

(declare-fun call!4752 () ListLongMap!1369)

(assert (=> b!61471 (= e!40388 (+!82 call!4752 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))

(declare-fun c!8075 () Bool)

(declare-fun bm!4743 () Bool)

(declare-fun call!4751 () ListLongMap!1369)

(declare-fun c!8076 () Bool)

(declare-fun call!4746 () ListLongMap!1369)

(declare-fun call!4750 () ListLongMap!1369)

(assert (=> bm!4743 (= call!4752 (+!82 (ite c!8075 call!4746 (ite c!8076 call!4751 call!4750)) (ite (or c!8075 c!8076) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(declare-fun b!61472 () Bool)

(declare-fun res!33877 () Bool)

(assert (=> b!61472 (=> (not res!33877) (not e!40377))))

(declare-fun e!40386 () Bool)

(assert (=> b!61472 (= res!33877 e!40386)))

(declare-fun c!8078 () Bool)

(assert (=> b!61472 (= c!8078 (not (= (bvand lt!24940 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!40379 () Bool)

(declare-fun lt!25456 () ListLongMap!1369)

(declare-fun b!61473 () Bool)

(assert (=> b!61473 (= e!40379 (= (apply!67 lt!25456 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bm!4744 () Bool)

(assert (=> bm!4744 (= call!4750 call!4751)))

(declare-fun b!61474 () Bool)

(assert (=> b!61474 (= e!40386 e!40379)))

(declare-fun res!33875 () Bool)

(declare-fun call!4748 () Bool)

(assert (=> b!61474 (= res!33875 call!4748)))

(assert (=> b!61474 (=> (not res!33875) (not e!40379))))

(declare-fun b!61475 () Bool)

(declare-fun e!40385 () Bool)

(assert (=> b!61475 (= e!40385 (= (apply!67 lt!25456 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1981 newMap!16)))))

(declare-fun b!61476 () Bool)

(assert (=> b!61476 (= e!40383 call!4750)))

(declare-fun bm!4746 () Bool)

(assert (=> bm!4746 (= call!4746 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) lt!24940 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun b!61477 () Bool)

(declare-fun e!40378 () Bool)

(assert (=> b!61477 (= e!40380 e!40378)))

(declare-fun res!33876 () Bool)

(assert (=> b!61477 (=> (not res!33876) (not e!40378))))

(assert (=> b!61477 (= res!33876 (contains!686 lt!25456 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61477 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(declare-fun bm!4747 () Bool)

(assert (=> bm!4747 (= call!4748 (contains!686 lt!25456 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61478 () Bool)

(declare-fun call!4749 () ListLongMap!1369)

(assert (=> b!61478 (= e!40383 call!4749)))

(declare-fun b!61479 () Bool)

(assert (=> b!61479 (= e!40378 (= (apply!67 lt!25456 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) (get!1075 (select (arr!1794 (_values!2050 newMap!16)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!61479 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2025 (_values!2050 newMap!16))))))

(assert (=> b!61479 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(declare-fun bm!4748 () Bool)

(assert (=> bm!4748 (= call!4749 call!4752)))

(declare-fun d!12203 () Bool)

(assert (=> d!12203 e!40377))

(declare-fun res!33879 () Bool)

(assert (=> d!12203 (=> (not res!33879) (not e!40377))))

(assert (=> d!12203 (= res!33879 (or (bvsge #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))))

(declare-fun lt!25472 () ListLongMap!1369)

(assert (=> d!12203 (= lt!25456 lt!25472)))

(declare-fun lt!25465 () Unit!1625)

(assert (=> d!12203 (= lt!25465 e!40384)))

(declare-fun c!8079 () Bool)

(assert (=> d!12203 (= c!8079 e!40382)))

(declare-fun res!33881 () Bool)

(assert (=> d!12203 (=> (not res!33881) (not e!40382))))

(assert (=> d!12203 (= res!33881 (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(assert (=> d!12203 (= lt!25472 e!40388)))

(assert (=> d!12203 (= c!8075 (and (not (= (bvand lt!24940 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!24940 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12203 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12203 (= (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) lt!24940 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) lt!25456)))

(declare-fun bm!4745 () Bool)

(assert (=> bm!4745 (= call!4751 call!4746)))

(declare-fun b!61480 () Bool)

(declare-fun lt!25475 () Unit!1625)

(assert (=> b!61480 (= e!40384 lt!25475)))

(declare-fun lt!25467 () ListLongMap!1369)

(assert (=> b!61480 (= lt!25467 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) lt!24940 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25457 () (_ BitVec 64))

(assert (=> b!61480 (= lt!25457 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25470 () (_ BitVec 64))

(assert (=> b!61480 (= lt!25470 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25477 () Unit!1625)

(assert (=> b!61480 (= lt!25477 (addStillContains!43 lt!25467 lt!25457 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!25470))))

(assert (=> b!61480 (contains!686 (+!82 lt!25467 (tuple2!2033 lt!25457 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!25470)))

(declare-fun lt!25463 () Unit!1625)

(assert (=> b!61480 (= lt!25463 lt!25477)))

(declare-fun lt!25464 () ListLongMap!1369)

(assert (=> b!61480 (= lt!25464 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) lt!24940 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25462 () (_ BitVec 64))

(assert (=> b!61480 (= lt!25462 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25476 () (_ BitVec 64))

(assert (=> b!61480 (= lt!25476 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25461 () Unit!1625)

(assert (=> b!61480 (= lt!25461 (addApplyDifferent!43 lt!25464 lt!25462 (minValue!1981 newMap!16) lt!25476))))

(assert (=> b!61480 (= (apply!67 (+!82 lt!25464 (tuple2!2033 lt!25462 (minValue!1981 newMap!16))) lt!25476) (apply!67 lt!25464 lt!25476))))

(declare-fun lt!25460 () Unit!1625)

(assert (=> b!61480 (= lt!25460 lt!25461)))

(declare-fun lt!25471 () ListLongMap!1369)

(assert (=> b!61480 (= lt!25471 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) lt!24940 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25458 () (_ BitVec 64))

(assert (=> b!61480 (= lt!25458 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25466 () (_ BitVec 64))

(assert (=> b!61480 (= lt!25466 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25473 () Unit!1625)

(assert (=> b!61480 (= lt!25473 (addApplyDifferent!43 lt!25471 lt!25458 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!25466))))

(assert (=> b!61480 (= (apply!67 (+!82 lt!25471 (tuple2!2033 lt!25458 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!25466) (apply!67 lt!25471 lt!25466))))

(declare-fun lt!25474 () Unit!1625)

(assert (=> b!61480 (= lt!25474 lt!25473)))

(declare-fun lt!25459 () ListLongMap!1369)

(assert (=> b!61480 (= lt!25459 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) lt!24940 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25469 () (_ BitVec 64))

(assert (=> b!61480 (= lt!25469 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25468 () (_ BitVec 64))

(assert (=> b!61480 (= lt!25468 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!61480 (= lt!25475 (addApplyDifferent!43 lt!25459 lt!25469 (minValue!1981 newMap!16) lt!25468))))

(assert (=> b!61480 (= (apply!67 (+!82 lt!25459 (tuple2!2033 lt!25469 (minValue!1981 newMap!16))) lt!25468) (apply!67 lt!25459 lt!25468))))

(declare-fun b!61481 () Bool)

(declare-fun e!40387 () Bool)

(declare-fun call!4747 () Bool)

(assert (=> b!61481 (= e!40387 (not call!4747))))

(declare-fun b!61482 () Bool)

(assert (=> b!61482 (= e!40381 call!4749)))

(declare-fun b!61483 () Bool)

(assert (=> b!61483 (= e!40376 (validKeyInArray!0 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61484 () Bool)

(assert (=> b!61484 (= e!40386 (not call!4748))))

(declare-fun bm!4749 () Bool)

(assert (=> bm!4749 (= call!4747 (contains!686 lt!25456 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61485 () Bool)

(assert (=> b!61485 (= e!40387 e!40385)))

(declare-fun res!33880 () Bool)

(assert (=> b!61485 (= res!33880 call!4747)))

(assert (=> b!61485 (=> (not res!33880) (not e!40385))))

(declare-fun b!61486 () Bool)

(assert (=> b!61486 (= e!40388 e!40381)))

(assert (=> b!61486 (= c!8076 (and (not (= (bvand lt!24940 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!24940 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!61487 () Bool)

(assert (=> b!61487 (= e!40377 e!40387)))

(declare-fun c!8074 () Bool)

(assert (=> b!61487 (= c!8074 (not (= (bvand lt!24940 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!12203 c!8075) b!61471))

(assert (= (and d!12203 (not c!8075)) b!61486))

(assert (= (and b!61486 c!8076) b!61482))

(assert (= (and b!61486 (not c!8076)) b!61470))

(assert (= (and b!61470 c!8077) b!61478))

(assert (= (and b!61470 (not c!8077)) b!61476))

(assert (= (or b!61478 b!61476) bm!4744))

(assert (= (or b!61482 bm!4744) bm!4745))

(assert (= (or b!61482 b!61478) bm!4748))

(assert (= (or b!61471 bm!4745) bm!4746))

(assert (= (or b!61471 bm!4748) bm!4743))

(assert (= (and d!12203 res!33881) b!61467))

(assert (= (and d!12203 c!8079) b!61480))

(assert (= (and d!12203 (not c!8079)) b!61469))

(assert (= (and d!12203 res!33879) b!61468))

(assert (= (and b!61468 res!33878) b!61483))

(assert (= (and b!61468 (not res!33882)) b!61477))

(assert (= (and b!61477 res!33876) b!61479))

(assert (= (and b!61468 res!33874) b!61472))

(assert (= (and b!61472 c!8078) b!61474))

(assert (= (and b!61472 (not c!8078)) b!61484))

(assert (= (and b!61474 res!33875) b!61473))

(assert (= (or b!61474 b!61484) bm!4747))

(assert (= (and b!61472 res!33877) b!61487))

(assert (= (and b!61487 c!8074) b!61485))

(assert (= (and b!61487 (not c!8074)) b!61481))

(assert (= (and b!61485 res!33880) b!61475))

(assert (= (or b!61485 b!61481) bm!4749))

(declare-fun b_lambda!2733 () Bool)

(assert (=> (not b_lambda!2733) (not b!61479)))

(assert (=> b!61479 t!4813))

(declare-fun b_and!3763 () Bool)

(assert (= b_and!3759 (and (=> t!4813 result!2427) b_and!3763)))

(assert (=> b!61479 t!4815))

(declare-fun b_and!3765 () Bool)

(assert (= b_and!3761 (and (=> t!4815 result!2429) b_and!3765)))

(declare-fun m!54539 () Bool)

(assert (=> bm!4743 m!54539))

(assert (=> bm!4746 m!53337))

(declare-fun m!54541 () Bool)

(assert (=> bm!4746 m!54541))

(declare-fun m!54543 () Bool)

(assert (=> b!61480 m!54543))

(declare-fun m!54545 () Bool)

(assert (=> b!61480 m!54545))

(declare-fun m!54547 () Bool)

(assert (=> b!61480 m!54547))

(declare-fun m!54549 () Bool)

(assert (=> b!61480 m!54549))

(declare-fun m!54551 () Bool)

(assert (=> b!61480 m!54551))

(assert (=> b!61480 m!53617))

(declare-fun m!54553 () Bool)

(assert (=> b!61480 m!54553))

(declare-fun m!54555 () Bool)

(assert (=> b!61480 m!54555))

(assert (=> b!61480 m!53337))

(declare-fun m!54557 () Bool)

(assert (=> b!61480 m!54557))

(assert (=> b!61480 m!53337))

(assert (=> b!61480 m!54541))

(assert (=> b!61480 m!54543))

(declare-fun m!54559 () Bool)

(assert (=> b!61480 m!54559))

(assert (=> b!61480 m!54547))

(declare-fun m!54561 () Bool)

(assert (=> b!61480 m!54561))

(assert (=> b!61480 m!54555))

(declare-fun m!54563 () Bool)

(assert (=> b!61480 m!54563))

(declare-fun m!54565 () Bool)

(assert (=> b!61480 m!54565))

(declare-fun m!54567 () Bool)

(assert (=> b!61480 m!54567))

(assert (=> b!61480 m!53337))

(declare-fun m!54569 () Bool)

(assert (=> b!61480 m!54569))

(assert (=> b!61480 m!54559))

(declare-fun m!54571 () Bool)

(assert (=> b!61480 m!54571))

(declare-fun m!54573 () Bool)

(assert (=> b!61473 m!54573))

(assert (=> b!61483 m!53617))

(assert (=> b!61483 m!53617))

(assert (=> b!61483 m!53641))

(assert (=> b!61479 m!53617))

(declare-fun m!54575 () Bool)

(assert (=> b!61479 m!54575))

(assert (=> b!61479 m!53645))

(assert (=> b!61479 m!53645))

(assert (=> b!61479 m!53647))

(assert (=> b!61479 m!53649))

(assert (=> b!61479 m!53617))

(assert (=> b!61479 m!53647))

(assert (=> b!61477 m!53617))

(assert (=> b!61477 m!53617))

(declare-fun m!54577 () Bool)

(assert (=> b!61477 m!54577))

(declare-fun m!54579 () Bool)

(assert (=> b!61475 m!54579))

(assert (=> b!61467 m!53617))

(assert (=> b!61467 m!53617))

(assert (=> b!61467 m!53641))

(declare-fun m!54581 () Bool)

(assert (=> b!61471 m!54581))

(declare-fun m!54583 () Bool)

(assert (=> bm!4747 m!54583))

(assert (=> d!12203 m!53559))

(declare-fun m!54585 () Bool)

(assert (=> bm!4749 m!54585))

(assert (=> d!12075 d!12203))

(declare-fun d!12205 () Bool)

(assert (=> d!12205 (= (+!82 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) lt!24940 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(assert (=> d!12205 true))

(declare-fun _$7!47 () Unit!1625)

(assert (=> d!12205 (= (choose!322 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) lt!24940 (zeroValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1981 newMap!16) (defaultEntry!2067 newMap!16)) _$7!47)))

(declare-fun bs!2672 () Bool)

(assert (= bs!2672 d!12205))

(assert (=> bs!2672 m!53489))

(assert (=> bs!2672 m!53489))

(assert (=> bs!2672 m!53981))

(assert (=> bs!2672 m!53337))

(assert (=> bs!2672 m!53983))

(assert (=> d!12075 d!12205))

(assert (=> d!12075 d!12123))

(assert (=> b!61005 d!12109))

(declare-fun d!12207 () Bool)

(declare-fun res!33883 () Bool)

(declare-fun e!40389 () Bool)

(assert (=> d!12207 (=> res!33883 e!40389)))

(assert (=> d!12207 (= res!33883 (and ((_ is Cons!1432) (toList!700 call!4618)) (= (_1!1027 (h!2014 (toList!700 call!4618))) (ite c!7902 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (select (arr!1793 (_keys!3695 newMap!16)) (index!3037 lt!24947))))))))

(assert (=> d!12207 (= (containsKey!129 (toList!700 call!4618) (ite c!7902 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (select (arr!1793 (_keys!3695 newMap!16)) (index!3037 lt!24947)))) e!40389)))

(declare-fun b!61488 () Bool)

(declare-fun e!40390 () Bool)

(assert (=> b!61488 (= e!40389 e!40390)))

(declare-fun res!33884 () Bool)

(assert (=> b!61488 (=> (not res!33884) (not e!40390))))

(assert (=> b!61488 (= res!33884 (and (or (not ((_ is Cons!1432) (toList!700 call!4618))) (bvsle (_1!1027 (h!2014 (toList!700 call!4618))) (ite c!7902 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (select (arr!1793 (_keys!3695 newMap!16)) (index!3037 lt!24947))))) ((_ is Cons!1432) (toList!700 call!4618)) (bvslt (_1!1027 (h!2014 (toList!700 call!4618))) (ite c!7902 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (select (arr!1793 (_keys!3695 newMap!16)) (index!3037 lt!24947))))))))

(declare-fun b!61489 () Bool)

(assert (=> b!61489 (= e!40390 (containsKey!129 (t!4806 (toList!700 call!4618)) (ite c!7902 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (select (arr!1793 (_keys!3695 newMap!16)) (index!3037 lt!24947)))))))

(assert (= (and d!12207 (not res!33883)) b!61488))

(assert (= (and b!61488 res!33884) b!61489))

(declare-fun m!54587 () Bool)

(assert (=> b!61489 m!54587))

(assert (=> d!11979 d!12207))

(declare-fun b!61490 () Bool)

(declare-fun e!40391 () Option!131)

(assert (=> b!61490 (= e!40391 (Some!130 (_2!1027 (h!2014 (toList!700 lt!25100)))))))

(declare-fun d!12209 () Bool)

(declare-fun c!8080 () Bool)

(assert (=> d!12209 (= c!8080 (and ((_ is Cons!1432) (toList!700 lt!25100)) (= (_1!1027 (h!2014 (toList!700 lt!25100))) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (=> d!12209 (= (getValueByKey!125 (toList!700 lt!25100) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) e!40391)))

(declare-fun b!61491 () Bool)

(declare-fun e!40392 () Option!131)

(assert (=> b!61491 (= e!40391 e!40392)))

(declare-fun c!8081 () Bool)

(assert (=> b!61491 (= c!8081 (and ((_ is Cons!1432) (toList!700 lt!25100)) (not (= (_1!1027 (h!2014 (toList!700 lt!25100))) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))))

(declare-fun b!61493 () Bool)

(assert (=> b!61493 (= e!40392 None!129)))

(declare-fun b!61492 () Bool)

(assert (=> b!61492 (= e!40392 (getValueByKey!125 (t!4806 (toList!700 lt!25100)) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(assert (= (and d!12209 c!8080) b!61490))

(assert (= (and d!12209 (not c!8080)) b!61491))

(assert (= (and b!61491 c!8081) b!61492))

(assert (= (and b!61491 (not c!8081)) b!61493))

(declare-fun m!54589 () Bool)

(assert (=> b!61492 m!54589))

(assert (=> b!61020 d!12209))

(declare-fun b!61494 () Bool)

(declare-fun e!40394 () Bool)

(declare-fun e!40399 () Bool)

(assert (=> b!61494 (= e!40394 e!40399)))

(assert (=> b!61494 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992))))))))

(declare-fun res!33885 () Bool)

(declare-fun lt!25478 () ListLongMap!1369)

(assert (=> b!61494 (= res!33885 (contains!686 lt!25478 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!61494 (=> (not res!33885) (not e!40399))))

(declare-fun b!61495 () Bool)

(declare-fun e!40396 () Bool)

(assert (=> b!61495 (= e!40394 e!40396)))

(declare-fun c!8085 () Bool)

(assert (=> b!61495 (= c!8085 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992))))))))

(declare-fun b!61496 () Bool)

(assert (=> b!61496 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992))))))))

(assert (=> b!61496 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2025 (_values!2050 (v!2404 (underlying!231 thiss!992))))))))

(assert (=> b!61496 (= e!40399 (= (apply!67 lt!25478 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!12211 () Bool)

(declare-fun e!40398 () Bool)

(assert (=> d!12211 e!40398))

(declare-fun res!33887 () Bool)

(assert (=> d!12211 (=> (not res!33887) (not e!40398))))

(assert (=> d!12211 (= res!33887 (not (contains!686 lt!25478 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!40393 () ListLongMap!1369)

(assert (=> d!12211 (= lt!25478 e!40393)))

(declare-fun c!8084 () Bool)

(assert (=> d!12211 (= c!8084 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992))))))))

(assert (=> d!12211 (validMask!0 (mask!5963 (v!2404 (underlying!231 thiss!992))))))

(assert (=> d!12211 (= (getCurrentListMapNoExtraKeys!45 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (_values!2050 (v!2404 (underlying!231 thiss!992))) (mask!5963 (v!2404 (underlying!231 thiss!992))) (extraKeys!1950 (v!2404 (underlying!231 thiss!992))) (zeroValue!1981 (v!2404 (underlying!231 thiss!992))) (minValue!1981 (v!2404 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2067 (v!2404 (underlying!231 thiss!992)))) lt!25478)))

(declare-fun b!61497 () Bool)

(assert (=> b!61497 (= e!40398 e!40394)))

(declare-fun c!8082 () Bool)

(declare-fun e!40395 () Bool)

(assert (=> b!61497 (= c!8082 e!40395)))

(declare-fun res!33886 () Bool)

(assert (=> b!61497 (=> (not res!33886) (not e!40395))))

(assert (=> b!61497 (= res!33886 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992))))))))

(declare-fun b!61498 () Bool)

(declare-fun e!40397 () ListLongMap!1369)

(assert (=> b!61498 (= e!40393 e!40397)))

(declare-fun c!8083 () Bool)

(assert (=> b!61498 (= c!8083 (validKeyInArray!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(declare-fun b!61499 () Bool)

(assert (=> b!61499 (= e!40396 (= lt!25478 (getCurrentListMapNoExtraKeys!45 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (_values!2050 (v!2404 (underlying!231 thiss!992))) (mask!5963 (v!2404 (underlying!231 thiss!992))) (extraKeys!1950 (v!2404 (underlying!231 thiss!992))) (zeroValue!1981 (v!2404 (underlying!231 thiss!992))) (minValue!1981 (v!2404 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))))))))

(declare-fun b!61500 () Bool)

(declare-fun call!4753 () ListLongMap!1369)

(assert (=> b!61500 (= e!40397 call!4753)))

(declare-fun bm!4750 () Bool)

(assert (=> bm!4750 (= call!4753 (getCurrentListMapNoExtraKeys!45 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (_values!2050 (v!2404 (underlying!231 thiss!992))) (mask!5963 (v!2404 (underlying!231 thiss!992))) (extraKeys!1950 (v!2404 (underlying!231 thiss!992))) (zeroValue!1981 (v!2404 (underlying!231 thiss!992))) (minValue!1981 (v!2404 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2067 (v!2404 (underlying!231 thiss!992)))))))

(declare-fun b!61501 () Bool)

(assert (=> b!61501 (= e!40395 (validKeyInArray!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!61501 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))

(declare-fun b!61502 () Bool)

(assert (=> b!61502 (= e!40393 (ListLongMap!1370 Nil!1433))))

(declare-fun b!61503 () Bool)

(declare-fun res!33888 () Bool)

(assert (=> b!61503 (=> (not res!33888) (not e!40398))))

(assert (=> b!61503 (= res!33888 (not (contains!686 lt!25478 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!61504 () Bool)

(assert (=> b!61504 (= e!40396 (isEmpty!296 lt!25478))))

(declare-fun b!61505 () Bool)

(declare-fun lt!25484 () Unit!1625)

(declare-fun lt!25480 () Unit!1625)

(assert (=> b!61505 (= lt!25484 lt!25480)))

(declare-fun lt!25481 () ListLongMap!1369)

(declare-fun lt!25479 () (_ BitVec 64))

(declare-fun lt!25482 () V!2859)

(declare-fun lt!25483 () (_ BitVec 64))

(assert (=> b!61505 (not (contains!686 (+!82 lt!25481 (tuple2!2033 lt!25479 lt!25482)) lt!25483))))

(assert (=> b!61505 (= lt!25480 (addStillNotContains!16 lt!25481 lt!25479 lt!25482 lt!25483))))

(assert (=> b!61505 (= lt!25483 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!61505 (= lt!25482 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!61505 (= lt!25479 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (=> b!61505 (= lt!25481 call!4753)))

(assert (=> b!61505 (= e!40397 (+!82 call!4753 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12211 c!8084) b!61502))

(assert (= (and d!12211 (not c!8084)) b!61498))

(assert (= (and b!61498 c!8083) b!61505))

(assert (= (and b!61498 (not c!8083)) b!61500))

(assert (= (or b!61505 b!61500) bm!4750))

(assert (= (and d!12211 res!33887) b!61503))

(assert (= (and b!61503 res!33888) b!61497))

(assert (= (and b!61497 res!33886) b!61501))

(assert (= (and b!61497 c!8082) b!61494))

(assert (= (and b!61497 (not c!8082)) b!61495))

(assert (= (and b!61494 res!33885) b!61496))

(assert (= (and b!61495 c!8085) b!61499))

(assert (= (and b!61495 (not c!8085)) b!61504))

(declare-fun b_lambda!2735 () Bool)

(assert (=> (not b_lambda!2735) (not b!61496)))

(assert (=> b!61496 t!4803))

(declare-fun b_and!3767 () Bool)

(assert (= b_and!3763 (and (=> t!4803 result!2413) b_and!3767)))

(assert (=> b!61496 t!4805))

(declare-fun b_and!3769 () Bool)

(assert (= b_and!3765 (and (=> t!4805 result!2417) b_and!3769)))

(declare-fun b_lambda!2737 () Bool)

(assert (=> (not b_lambda!2737) (not b!61505)))

(assert (=> b!61505 t!4803))

(declare-fun b_and!3771 () Bool)

(assert (= b_and!3767 (and (=> t!4803 result!2413) b_and!3771)))

(assert (=> b!61505 t!4805))

(declare-fun b_and!3773 () Bool)

(assert (= b_and!3769 (and (=> t!4805 result!2417) b_and!3773)))

(assert (=> b!61498 m!53745))

(assert (=> b!61498 m!53745))

(declare-fun m!54591 () Bool)

(assert (=> b!61498 m!54591))

(declare-fun m!54593 () Bool)

(assert (=> b!61505 m!54593))

(declare-fun m!54595 () Bool)

(assert (=> b!61505 m!54595))

(declare-fun m!54597 () Bool)

(assert (=> b!61505 m!54597))

(assert (=> b!61505 m!53335))

(assert (=> b!61505 m!53745))

(declare-fun m!54599 () Bool)

(assert (=> b!61505 m!54599))

(assert (=> b!61505 m!54595))

(declare-fun m!54601 () Bool)

(assert (=> b!61505 m!54601))

(assert (=> b!61505 m!54599))

(assert (=> b!61505 m!53335))

(declare-fun m!54603 () Bool)

(assert (=> b!61505 m!54603))

(declare-fun m!54605 () Bool)

(assert (=> b!61503 m!54605))

(declare-fun m!54607 () Bool)

(assert (=> d!12211 m!54607))

(assert (=> d!12211 m!53319))

(assert (=> b!61494 m!53745))

(assert (=> b!61494 m!53745))

(declare-fun m!54609 () Bool)

(assert (=> b!61494 m!54609))

(declare-fun m!54611 () Bool)

(assert (=> b!61504 m!54611))

(declare-fun m!54613 () Bool)

(assert (=> b!61499 m!54613))

(assert (=> bm!4750 m!54613))

(assert (=> b!61501 m!53745))

(assert (=> b!61501 m!53745))

(assert (=> b!61501 m!54591))

(assert (=> b!61496 m!53335))

(assert (=> b!61496 m!53745))

(assert (=> b!61496 m!54599))

(assert (=> b!61496 m!54599))

(assert (=> b!61496 m!53335))

(assert (=> b!61496 m!54603))

(assert (=> b!61496 m!53745))

(declare-fun m!54615 () Bool)

(assert (=> b!61496 m!54615))

(assert (=> bm!4685 d!12211))

(assert (=> d!11983 d!12123))

(declare-fun b!61506 () Bool)

(declare-fun e!40400 () Option!131)

(assert (=> b!61506 (= e!40400 (Some!130 (_2!1027 (h!2014 (toList!700 lt!25150)))))))

(declare-fun c!8086 () Bool)

(declare-fun d!12213 () Bool)

(assert (=> d!12213 (= c!8086 (and ((_ is Cons!1432) (toList!700 lt!25150)) (= (_1!1027 (h!2014 (toList!700 lt!25150))) (_1!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (=> d!12213 (= (getValueByKey!125 (toList!700 lt!25150) (_1!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))) e!40400)))

(declare-fun b!61507 () Bool)

(declare-fun e!40401 () Option!131)

(assert (=> b!61507 (= e!40400 e!40401)))

(declare-fun c!8087 () Bool)

(assert (=> b!61507 (= c!8087 (and ((_ is Cons!1432) (toList!700 lt!25150)) (not (= (_1!1027 (h!2014 (toList!700 lt!25150))) (_1!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))))))

(declare-fun b!61509 () Bool)

(assert (=> b!61509 (= e!40401 None!129)))

(declare-fun b!61508 () Bool)

(assert (=> b!61508 (= e!40401 (getValueByKey!125 (t!4806 (toList!700 lt!25150)) (_1!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(assert (= (and d!12213 c!8086) b!61506))

(assert (= (and d!12213 (not c!8086)) b!61507))

(assert (= (and b!61507 c!8087) b!61508))

(assert (= (and b!61507 (not c!8087)) b!61509))

(declare-fun m!54617 () Bool)

(assert (=> b!61508 m!54617))

(assert (=> b!61096 d!12213))

(declare-fun d!12215 () Bool)

(declare-fun res!33889 () Bool)

(declare-fun e!40402 () Bool)

(assert (=> d!12215 (=> res!33889 e!40402)))

(assert (=> d!12215 (= res!33889 (and ((_ is Cons!1432) (toList!700 lt!24995)) (= (_1!1027 (h!2014 (toList!700 lt!24995))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!12215 (= (containsKey!129 (toList!700 lt!24995) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!40402)))

(declare-fun b!61510 () Bool)

(declare-fun e!40403 () Bool)

(assert (=> b!61510 (= e!40402 e!40403)))

(declare-fun res!33890 () Bool)

(assert (=> b!61510 (=> (not res!33890) (not e!40403))))

(assert (=> b!61510 (= res!33890 (and (or (not ((_ is Cons!1432) (toList!700 lt!24995))) (bvsle (_1!1027 (h!2014 (toList!700 lt!24995))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) ((_ is Cons!1432) (toList!700 lt!24995)) (bvslt (_1!1027 (h!2014 (toList!700 lt!24995))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun b!61511 () Bool)

(assert (=> b!61511 (= e!40403 (containsKey!129 (t!4806 (toList!700 lt!24995)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!12215 (not res!33889)) b!61510))

(assert (= (and b!61510 res!33890) b!61511))

(assert (=> b!61511 m!53407))

(declare-fun m!54619 () Bool)

(assert (=> b!61511 m!54619))

(assert (=> d!11981 d!12215))

(declare-fun d!12217 () Bool)

(declare-fun res!33891 () Bool)

(declare-fun e!40404 () Bool)

(assert (=> d!12217 (=> res!33891 e!40404)))

(assert (=> d!12217 (= res!33891 (and ((_ is Cons!1432) (t!4806 (toList!700 lt!24826))) (= (_1!1027 (h!2014 (t!4806 (toList!700 lt!24826)))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355))))))

(assert (=> d!12217 (= (containsKey!129 (t!4806 (toList!700 lt!24826)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) e!40404)))

(declare-fun b!61512 () Bool)

(declare-fun e!40405 () Bool)

(assert (=> b!61512 (= e!40404 e!40405)))

(declare-fun res!33892 () Bool)

(assert (=> b!61512 (=> (not res!33892) (not e!40405))))

(assert (=> b!61512 (= res!33892 (and (or (not ((_ is Cons!1432) (t!4806 (toList!700 lt!24826)))) (bvsle (_1!1027 (h!2014 (t!4806 (toList!700 lt!24826)))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355))) ((_ is Cons!1432) (t!4806 (toList!700 lt!24826))) (bvslt (_1!1027 (h!2014 (t!4806 (toList!700 lt!24826)))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355))))))

(declare-fun b!61513 () Bool)

(assert (=> b!61513 (= e!40405 (containsKey!129 (t!4806 (t!4806 (toList!700 lt!24826))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(assert (= (and d!12217 (not res!33891)) b!61512))

(assert (= (and b!61512 res!33892) b!61513))

(assert (=> b!61513 m!53313))

(declare-fun m!54621 () Bool)

(assert (=> b!61513 m!54621))

(assert (=> b!60961 d!12217))

(declare-fun d!12219 () Bool)

(assert (=> d!12219 (isDefined!78 (getValueByKey!125 (toList!700 call!4625) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(declare-fun lt!25485 () Unit!1625)

(assert (=> d!12219 (= lt!25485 (choose!320 (toList!700 call!4625) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(declare-fun e!40406 () Bool)

(assert (=> d!12219 e!40406))

(declare-fun res!33893 () Bool)

(assert (=> d!12219 (=> (not res!33893) (not e!40406))))

(assert (=> d!12219 (= res!33893 (isStrictlySorted!285 (toList!700 call!4625)))))

(assert (=> d!12219 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 call!4625) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) lt!25485)))

(declare-fun b!61514 () Bool)

(assert (=> b!61514 (= e!40406 (containsKey!129 (toList!700 call!4625) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(assert (= (and d!12219 res!33893) b!61514))

(assert (=> d!12219 m!53313))

(assert (=> d!12219 m!53675))

(assert (=> d!12219 m!53675))

(assert (=> d!12219 m!53677))

(assert (=> d!12219 m!53313))

(declare-fun m!54623 () Bool)

(assert (=> d!12219 m!54623))

(declare-fun m!54625 () Bool)

(assert (=> d!12219 m!54625))

(assert (=> b!61514 m!53313))

(assert (=> b!61514 m!53671))

(assert (=> b!60986 d!12219))

(declare-fun d!12221 () Bool)

(assert (=> d!12221 (= (isDefined!78 (getValueByKey!125 (toList!700 call!4625) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355))) (not (isEmpty!297 (getValueByKey!125 (toList!700 call!4625) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))))

(declare-fun bs!2673 () Bool)

(assert (= bs!2673 d!12221))

(assert (=> bs!2673 m!53675))

(declare-fun m!54627 () Bool)

(assert (=> bs!2673 m!54627))

(assert (=> b!60986 d!12221))

(declare-fun b!61515 () Bool)

(declare-fun e!40407 () Option!131)

(assert (=> b!61515 (= e!40407 (Some!130 (_2!1027 (h!2014 (toList!700 call!4625)))))))

(declare-fun c!8088 () Bool)

(declare-fun d!12223 () Bool)

(assert (=> d!12223 (= c!8088 (and ((_ is Cons!1432) (toList!700 call!4625)) (= (_1!1027 (h!2014 (toList!700 call!4625))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355))))))

(assert (=> d!12223 (= (getValueByKey!125 (toList!700 call!4625) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) e!40407)))

(declare-fun b!61516 () Bool)

(declare-fun e!40408 () Option!131)

(assert (=> b!61516 (= e!40407 e!40408)))

(declare-fun c!8089 () Bool)

(assert (=> b!61516 (= c!8089 (and ((_ is Cons!1432) (toList!700 call!4625)) (not (= (_1!1027 (h!2014 (toList!700 call!4625))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))))

(declare-fun b!61518 () Bool)

(assert (=> b!61518 (= e!40408 None!129)))

(declare-fun b!61517 () Bool)

(assert (=> b!61517 (= e!40408 (getValueByKey!125 (t!4806 (toList!700 call!4625)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(assert (= (and d!12223 c!8088) b!61515))

(assert (= (and d!12223 (not c!8088)) b!61516))

(assert (= (and b!61516 c!8089) b!61517))

(assert (= (and b!61516 (not c!8089)) b!61518))

(assert (=> b!61517 m!53313))

(declare-fun m!54629 () Bool)

(assert (=> b!61517 m!54629))

(assert (=> b!60986 d!12223))

(declare-fun lt!25486 () Bool)

(declare-fun d!12225 () Bool)

(assert (=> d!12225 (= lt!25486 (select (content!66 (toList!700 lt!25166)) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!40410 () Bool)

(assert (=> d!12225 (= lt!25486 e!40410)))

(declare-fun res!33894 () Bool)

(assert (=> d!12225 (=> (not res!33894) (not e!40410))))

(assert (=> d!12225 (= res!33894 ((_ is Cons!1432) (toList!700 lt!25166)))))

(assert (=> d!12225 (= (contains!688 (toList!700 lt!25166) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!25486)))

(declare-fun b!61519 () Bool)

(declare-fun e!40409 () Bool)

(assert (=> b!61519 (= e!40410 e!40409)))

(declare-fun res!33895 () Bool)

(assert (=> b!61519 (=> res!33895 e!40409)))

(assert (=> b!61519 (= res!33895 (= (h!2014 (toList!700 lt!25166)) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!61520 () Bool)

(assert (=> b!61520 (= e!40409 (contains!688 (t!4806 (toList!700 lt!25166)) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12225 res!33894) b!61519))

(assert (= (and b!61519 (not res!33895)) b!61520))

(declare-fun m!54631 () Bool)

(assert (=> d!12225 m!54631))

(declare-fun m!54633 () Bool)

(assert (=> d!12225 m!54633))

(declare-fun m!54635 () Bool)

(assert (=> b!61520 m!54635))

(assert (=> b!61125 d!12225))

(declare-fun lt!25487 () Bool)

(declare-fun d!12227 () Bool)

(assert (=> d!12227 (= lt!25487 (select (content!65 (ite c!7871 (Cons!1433 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) Nil!1434) Nil!1434)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun e!40411 () Bool)

(assert (=> d!12227 (= lt!25487 e!40411)))

(declare-fun res!33897 () Bool)

(assert (=> d!12227 (=> (not res!33897) (not e!40411))))

(assert (=> d!12227 (= res!33897 ((_ is Cons!1433) (ite c!7871 (Cons!1433 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) Nil!1434) Nil!1434)))))

(assert (=> d!12227 (= (contains!687 (ite c!7871 (Cons!1433 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) Nil!1434) Nil!1434) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) lt!25487)))

(declare-fun b!61521 () Bool)

(declare-fun e!40412 () Bool)

(assert (=> b!61521 (= e!40411 e!40412)))

(declare-fun res!33896 () Bool)

(assert (=> b!61521 (=> res!33896 e!40412)))

(assert (=> b!61521 (= res!33896 (= (h!2015 (ite c!7871 (Cons!1433 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) Nil!1434) Nil!1434)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!61522 () Bool)

(assert (=> b!61522 (= e!40412 (contains!687 (t!4807 (ite c!7871 (Cons!1433 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) Nil!1434) Nil!1434)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(assert (= (and d!12227 res!33897) b!61521))

(assert (= (and b!61521 (not res!33896)) b!61522))

(declare-fun m!54637 () Bool)

(assert (=> d!12227 m!54637))

(assert (=> d!12227 m!53987))

(declare-fun m!54639 () Bool)

(assert (=> d!12227 m!54639))

(assert (=> b!61522 m!53987))

(declare-fun m!54641 () Bool)

(assert (=> b!61522 m!54641))

(assert (=> b!61169 d!12227))

(assert (=> bm!4671 d!12085))

(declare-fun d!12229 () Bool)

(declare-fun e!40413 () Bool)

(assert (=> d!12229 e!40413))

(declare-fun res!33898 () Bool)

(assert (=> d!12229 (=> res!33898 e!40413)))

(declare-fun lt!25491 () Bool)

(assert (=> d!12229 (= res!33898 (not lt!25491))))

(declare-fun lt!25490 () Bool)

(assert (=> d!12229 (= lt!25491 lt!25490)))

(declare-fun lt!25489 () Unit!1625)

(declare-fun e!40414 () Unit!1625)

(assert (=> d!12229 (= lt!25489 e!40414)))

(declare-fun c!8090 () Bool)

(assert (=> d!12229 (= c!8090 lt!25490)))

(assert (=> d!12229 (= lt!25490 (containsKey!129 (toList!700 lt!25150) (_1!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(assert (=> d!12229 (= (contains!686 lt!25150 (_1!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25491)))

(declare-fun b!61523 () Bool)

(declare-fun lt!25488 () Unit!1625)

(assert (=> b!61523 (= e!40414 lt!25488)))

(assert (=> b!61523 (= lt!25488 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 lt!25150) (_1!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(assert (=> b!61523 (isDefined!78 (getValueByKey!125 (toList!700 lt!25150) (_1!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun b!61524 () Bool)

(declare-fun Unit!1653 () Unit!1625)

(assert (=> b!61524 (= e!40414 Unit!1653)))

(declare-fun b!61525 () Bool)

(assert (=> b!61525 (= e!40413 (isDefined!78 (getValueByKey!125 (toList!700 lt!25150) (_1!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (= (and d!12229 c!8090) b!61523))

(assert (= (and d!12229 (not c!8090)) b!61524))

(assert (= (and d!12229 (not res!33898)) b!61525))

(declare-fun m!54643 () Bool)

(assert (=> d!12229 m!54643))

(declare-fun m!54645 () Bool)

(assert (=> b!61523 m!54645))

(assert (=> b!61523 m!53847))

(assert (=> b!61523 m!53847))

(declare-fun m!54647 () Bool)

(assert (=> b!61523 m!54647))

(assert (=> b!61525 m!53847))

(assert (=> b!61525 m!53847))

(assert (=> b!61525 m!54647))

(assert (=> d!12035 d!12229))

(declare-fun b!61526 () Bool)

(declare-fun e!40415 () Option!131)

(assert (=> b!61526 (= e!40415 (Some!130 (_2!1027 (h!2014 lt!25151))))))

(declare-fun d!12231 () Bool)

(declare-fun c!8091 () Bool)

(assert (=> d!12231 (= c!8091 (and ((_ is Cons!1432) lt!25151) (= (_1!1027 (h!2014 lt!25151)) (_1!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (=> d!12231 (= (getValueByKey!125 lt!25151 (_1!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))) e!40415)))

(declare-fun b!61527 () Bool)

(declare-fun e!40416 () Option!131)

(assert (=> b!61527 (= e!40415 e!40416)))

(declare-fun c!8092 () Bool)

(assert (=> b!61527 (= c!8092 (and ((_ is Cons!1432) lt!25151) (not (= (_1!1027 (h!2014 lt!25151)) (_1!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))))))

(declare-fun b!61529 () Bool)

(assert (=> b!61529 (= e!40416 None!129)))

(declare-fun b!61528 () Bool)

(assert (=> b!61528 (= e!40416 (getValueByKey!125 (t!4806 lt!25151) (_1!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(assert (= (and d!12231 c!8091) b!61526))

(assert (= (and d!12231 (not c!8091)) b!61527))

(assert (= (and b!61527 c!8092) b!61528))

(assert (= (and b!61527 (not c!8092)) b!61529))

(declare-fun m!54649 () Bool)

(assert (=> b!61528 m!54649))

(assert (=> d!12035 d!12231))

(declare-fun d!12233 () Bool)

(assert (=> d!12233 (= (getValueByKey!125 lt!25151 (_1!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))) (Some!130 (_2!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun lt!25492 () Unit!1625)

(assert (=> d!12233 (= lt!25492 (choose!325 lt!25151 (_1!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun e!40417 () Bool)

(assert (=> d!12233 e!40417))

(declare-fun res!33899 () Bool)

(assert (=> d!12233 (=> (not res!33899) (not e!40417))))

(assert (=> d!12233 (= res!33899 (isStrictlySorted!285 lt!25151))))

(assert (=> d!12233 (= (lemmaContainsTupThenGetReturnValue!42 lt!25151 (_1!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25492)))

(declare-fun b!61530 () Bool)

(declare-fun res!33900 () Bool)

(assert (=> b!61530 (=> (not res!33900) (not e!40417))))

(assert (=> b!61530 (= res!33900 (containsKey!129 lt!25151 (_1!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun b!61531 () Bool)

(assert (=> b!61531 (= e!40417 (contains!688 lt!25151 (tuple2!2033 (_1!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (= (and d!12233 res!33899) b!61530))

(assert (= (and b!61530 res!33900) b!61531))

(assert (=> d!12233 m!53841))

(declare-fun m!54651 () Bool)

(assert (=> d!12233 m!54651))

(declare-fun m!54653 () Bool)

(assert (=> d!12233 m!54653))

(declare-fun m!54655 () Bool)

(assert (=> b!61530 m!54655))

(declare-fun m!54657 () Bool)

(assert (=> b!61531 m!54657))

(assert (=> d!12035 d!12233))

(declare-fun b!61532 () Bool)

(declare-fun e!40420 () Bool)

(declare-fun lt!25493 () List!1436)

(assert (=> b!61532 (= e!40420 (contains!688 lt!25493 (tuple2!2033 (_1!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(declare-fun bm!4751 () Bool)

(declare-fun c!8094 () Bool)

(declare-fun call!4754 () List!1436)

(declare-fun e!40418 () List!1436)

(assert (=> bm!4751 (= call!4754 ($colon$colon!61 e!40418 (ite c!8094 (h!2014 (toList!700 lt!25010)) (tuple2!2033 (_1!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))))))

(declare-fun c!8093 () Bool)

(assert (=> bm!4751 (= c!8093 c!8094)))

(declare-fun b!61533 () Bool)

(declare-fun e!40422 () List!1436)

(assert (=> b!61533 (= e!40422 call!4754)))

(declare-fun bm!4752 () Bool)

(declare-fun call!4756 () List!1436)

(declare-fun call!4755 () List!1436)

(assert (=> bm!4752 (= call!4756 call!4755)))

(declare-fun b!61534 () Bool)

(declare-fun e!40419 () List!1436)

(assert (=> b!61534 (= e!40419 call!4756)))

(declare-fun b!61535 () Bool)

(assert (=> b!61535 (= e!40418 (insertStrictlySorted!45 (t!4806 (toList!700 lt!25010)) (_1!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun bm!4753 () Bool)

(assert (=> bm!4753 (= call!4755 call!4754)))

(declare-fun b!61536 () Bool)

(assert (=> b!61536 (= e!40419 call!4756)))

(declare-fun d!12235 () Bool)

(assert (=> d!12235 e!40420))

(declare-fun res!33901 () Bool)

(assert (=> d!12235 (=> (not res!33901) (not e!40420))))

(assert (=> d!12235 (= res!33901 (isStrictlySorted!285 lt!25493))))

(assert (=> d!12235 (= lt!25493 e!40422)))

(assert (=> d!12235 (= c!8094 (and ((_ is Cons!1432) (toList!700 lt!25010)) (bvslt (_1!1027 (h!2014 (toList!700 lt!25010))) (_1!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (=> d!12235 (isStrictlySorted!285 (toList!700 lt!25010))))

(assert (=> d!12235 (= (insertStrictlySorted!45 (toList!700 lt!25010) (_1!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25493)))

(declare-fun b!61537 () Bool)

(declare-fun e!40421 () List!1436)

(assert (=> b!61537 (= e!40421 call!4755)))

(declare-fun b!61538 () Bool)

(declare-fun c!8096 () Bool)

(assert (=> b!61538 (= c!8096 (and ((_ is Cons!1432) (toList!700 lt!25010)) (bvsgt (_1!1027 (h!2014 (toList!700 lt!25010))) (_1!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (=> b!61538 (= e!40421 e!40419)))

(declare-fun b!61539 () Bool)

(declare-fun res!33902 () Bool)

(assert (=> b!61539 (=> (not res!33902) (not e!40420))))

(assert (=> b!61539 (= res!33902 (containsKey!129 lt!25493 (_1!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun b!61540 () Bool)

(assert (=> b!61540 (= e!40422 e!40421)))

(declare-fun c!8095 () Bool)

(assert (=> b!61540 (= c!8095 (and ((_ is Cons!1432) (toList!700 lt!25010)) (= (_1!1027 (h!2014 (toList!700 lt!25010))) (_1!1027 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(declare-fun b!61541 () Bool)

(assert (=> b!61541 (= e!40418 (ite c!8095 (t!4806 (toList!700 lt!25010)) (ite c!8096 (Cons!1432 (h!2014 (toList!700 lt!25010)) (t!4806 (toList!700 lt!25010))) Nil!1433)))))

(assert (= (and d!12235 c!8094) b!61533))

(assert (= (and d!12235 (not c!8094)) b!61540))

(assert (= (and b!61540 c!8095) b!61537))

(assert (= (and b!61540 (not c!8095)) b!61538))

(assert (= (and b!61538 c!8096) b!61536))

(assert (= (and b!61538 (not c!8096)) b!61534))

(assert (= (or b!61536 b!61534) bm!4752))

(assert (= (or b!61537 bm!4752) bm!4753))

(assert (= (or b!61533 bm!4753) bm!4751))

(assert (= (and bm!4751 c!8093) b!61535))

(assert (= (and bm!4751 (not c!8093)) b!61541))

(assert (= (and d!12235 res!33901) b!61539))

(assert (= (and b!61539 res!33902) b!61532))

(declare-fun m!54659 () Bool)

(assert (=> bm!4751 m!54659))

(declare-fun m!54661 () Bool)

(assert (=> b!61539 m!54661))

(declare-fun m!54663 () Bool)

(assert (=> d!12235 m!54663))

(declare-fun m!54665 () Bool)

(assert (=> d!12235 m!54665))

(declare-fun m!54667 () Bool)

(assert (=> b!61535 m!54667))

(declare-fun m!54669 () Bool)

(assert (=> b!61532 m!54669))

(assert (=> d!12035 d!12235))

(declare-fun d!12237 () Bool)

(assert (=> d!12237 (isDefined!78 (getValueByKey!125 (toList!700 lt!24995) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!25494 () Unit!1625)

(assert (=> d!12237 (= lt!25494 (choose!320 (toList!700 lt!24995) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!40423 () Bool)

(assert (=> d!12237 e!40423))

(declare-fun res!33903 () Bool)

(assert (=> d!12237 (=> (not res!33903) (not e!40423))))

(assert (=> d!12237 (= res!33903 (isStrictlySorted!285 (toList!700 lt!24995)))))

(assert (=> d!12237 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 lt!24995) #b1000000000000000000000000000000000000000000000000000000000000000) lt!25494)))

(declare-fun b!61542 () Bool)

(assert (=> b!61542 (= e!40423 (containsKey!129 (toList!700 lt!24995) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!12237 res!33903) b!61542))

(assert (=> d!12237 m!53975))

(assert (=> d!12237 m!53975))

(assert (=> d!12237 m!54011))

(declare-fun m!54671 () Bool)

(assert (=> d!12237 m!54671))

(declare-fun m!54673 () Bool)

(assert (=> d!12237 m!54673))

(assert (=> b!61542 m!54007))

(assert (=> b!61172 d!12237))

(declare-fun d!12239 () Bool)

(assert (=> d!12239 (= (isDefined!78 (getValueByKey!125 (toList!700 lt!24995) #b1000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!297 (getValueByKey!125 (toList!700 lt!24995) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!2674 () Bool)

(assert (= bs!2674 d!12239))

(assert (=> bs!2674 m!53975))

(declare-fun m!54675 () Bool)

(assert (=> bs!2674 m!54675))

(assert (=> b!61172 d!12239))

(declare-fun b!61543 () Bool)

(declare-fun e!40424 () Option!131)

(assert (=> b!61543 (= e!40424 (Some!130 (_2!1027 (h!2014 (toList!700 lt!24995)))))))

(declare-fun d!12241 () Bool)

(declare-fun c!8097 () Bool)

(assert (=> d!12241 (= c!8097 (and ((_ is Cons!1432) (toList!700 lt!24995)) (= (_1!1027 (h!2014 (toList!700 lt!24995))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12241 (= (getValueByKey!125 (toList!700 lt!24995) #b1000000000000000000000000000000000000000000000000000000000000000) e!40424)))

(declare-fun b!61544 () Bool)

(declare-fun e!40425 () Option!131)

(assert (=> b!61544 (= e!40424 e!40425)))

(declare-fun c!8098 () Bool)

(assert (=> b!61544 (= c!8098 (and ((_ is Cons!1432) (toList!700 lt!24995)) (not (= (_1!1027 (h!2014 (toList!700 lt!24995))) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!61546 () Bool)

(assert (=> b!61546 (= e!40425 None!129)))

(declare-fun b!61545 () Bool)

(assert (=> b!61545 (= e!40425 (getValueByKey!125 (t!4806 (toList!700 lt!24995)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!12241 c!8097) b!61543))

(assert (= (and d!12241 (not c!8097)) b!61544))

(assert (= (and b!61544 c!8098) b!61545))

(assert (= (and b!61544 (not c!8098)) b!61546))

(declare-fun m!54677 () Bool)

(assert (=> b!61545 m!54677))

(assert (=> b!61172 d!12241))

(declare-fun d!12243 () Bool)

(assert (=> d!12243 (= (apply!67 lt!25211 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1078 (getValueByKey!125 (toList!700 lt!25211) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2675 () Bool)

(assert (= bs!2675 d!12243))

(declare-fun m!54679 () Bool)

(assert (=> bs!2675 m!54679))

(assert (=> bs!2675 m!54679))

(declare-fun m!54681 () Bool)

(assert (=> bs!2675 m!54681))

(assert (=> b!61188 d!12243))

(declare-fun b!61547 () Bool)

(declare-fun e!40427 () Bool)

(declare-fun e!40426 () Bool)

(assert (=> b!61547 (= e!40427 e!40426)))

(declare-fun lt!25496 () (_ BitVec 64))

(assert (=> b!61547 (= lt!25496 (select (arr!1793 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!25497 () Unit!1625)

(assert (=> b!61547 (= lt!25497 (lemmaArrayContainsFromImpliesContainsFromZero!0 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16))) lt!25496 #b00000000000000000000000000000000))))

(assert (=> b!61547 (arrayContainsKey!0 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16))) lt!25496 #b00000000000000000000000000000000)))

(declare-fun lt!25495 () Unit!1625)

(assert (=> b!61547 (= lt!25495 lt!25497)))

(declare-fun res!33904 () Bool)

(assert (=> b!61547 (= res!33904 (= (seekEntryOrOpen!0 (select (arr!1793 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16)))) #b00000000000000000000000000000000) (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16))) (mask!5963 newMap!16)) (Found!228 #b00000000000000000000000000000000)))))

(assert (=> b!61547 (=> (not res!33904) (not e!40426))))

(declare-fun d!12245 () Bool)

(declare-fun res!33905 () Bool)

(declare-fun e!40428 () Bool)

(assert (=> d!12245 (=> res!33905 e!40428)))

(assert (=> d!12245 (= res!33905 (bvsge #b00000000000000000000000000000000 (size!2024 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16))))))))

(assert (=> d!12245 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16))) (mask!5963 newMap!16)) e!40428)))

(declare-fun b!61548 () Bool)

(declare-fun call!4757 () Bool)

(assert (=> b!61548 (= e!40427 call!4757)))

(declare-fun b!61549 () Bool)

(assert (=> b!61549 (= e!40426 call!4757)))

(declare-fun b!61550 () Bool)

(assert (=> b!61550 (= e!40428 e!40427)))

(declare-fun c!8099 () Bool)

(assert (=> b!61550 (= c!8099 (validKeyInArray!0 (select (arr!1793 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun bm!4754 () Bool)

(assert (=> bm!4754 (= call!4757 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16))) (mask!5963 newMap!16)))))

(assert (= (and d!12245 (not res!33905)) b!61550))

(assert (= (and b!61550 c!8099) b!61547))

(assert (= (and b!61550 (not c!8099)) b!61548))

(assert (= (and b!61547 res!33904) b!61549))

(assert (= (or b!61549 b!61548) bm!4754))

(declare-fun m!54683 () Bool)

(assert (=> b!61547 m!54683))

(declare-fun m!54685 () Bool)

(assert (=> b!61547 m!54685))

(declare-fun m!54687 () Bool)

(assert (=> b!61547 m!54687))

(assert (=> b!61547 m!54683))

(declare-fun m!54689 () Bool)

(assert (=> b!61547 m!54689))

(assert (=> b!61550 m!54683))

(assert (=> b!61550 m!54683))

(declare-fun m!54691 () Bool)

(assert (=> b!61550 m!54691))

(declare-fun m!54693 () Bool)

(assert (=> bm!4754 m!54693))

(assert (=> d!12099 d!12245))

(declare-fun d!12247 () Bool)

(declare-fun e!40429 () Bool)

(assert (=> d!12247 e!40429))

(declare-fun res!33906 () Bool)

(assert (=> d!12247 (=> res!33906 e!40429)))

(declare-fun lt!25501 () Bool)

(assert (=> d!12247 (= res!33906 (not lt!25501))))

(declare-fun lt!25500 () Bool)

(assert (=> d!12247 (= lt!25501 lt!25500)))

(declare-fun lt!25499 () Unit!1625)

(declare-fun e!40430 () Unit!1625)

(assert (=> d!12247 (= lt!25499 e!40430)))

(declare-fun c!8100 () Bool)

(assert (=> d!12247 (= c!8100 lt!25500)))

(assert (=> d!12247 (= lt!25500 (containsKey!129 (toList!700 (getCurrentListMap!405 lt!25320 lt!25329 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16))) (select (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)))))))

(assert (=> d!12247 (= (contains!686 (getCurrentListMap!405 lt!25320 lt!25329 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (select (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)))) lt!25501)))

(declare-fun b!61551 () Bool)

(declare-fun lt!25498 () Unit!1625)

(assert (=> b!61551 (= e!40430 lt!25498)))

(assert (=> b!61551 (= lt!25498 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 (getCurrentListMap!405 lt!25320 lt!25329 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16))) (select (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)))))))

(assert (=> b!61551 (isDefined!78 (getValueByKey!125 (toList!700 (getCurrentListMap!405 lt!25320 lt!25329 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16))) (select (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)))))))

(declare-fun b!61552 () Bool)

(declare-fun Unit!1654 () Unit!1625)

(assert (=> b!61552 (= e!40430 Unit!1654)))

(declare-fun b!61553 () Bool)

(assert (=> b!61553 (= e!40429 (isDefined!78 (getValueByKey!125 (toList!700 (getCurrentListMap!405 lt!25320 lt!25329 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16))) (select (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947))))))))

(assert (= (and d!12247 c!8100) b!61551))

(assert (= (and d!12247 (not c!8100)) b!61552))

(assert (= (and d!12247 (not res!33906)) b!61553))

(assert (=> d!12247 m!54105))

(declare-fun m!54695 () Bool)

(assert (=> d!12247 m!54695))

(assert (=> b!61551 m!54105))

(declare-fun m!54697 () Bool)

(assert (=> b!61551 m!54697))

(assert (=> b!61551 m!54105))

(declare-fun m!54699 () Bool)

(assert (=> b!61551 m!54699))

(assert (=> b!61551 m!54699))

(declare-fun m!54701 () Bool)

(assert (=> b!61551 m!54701))

(assert (=> b!61553 m!54105))

(assert (=> b!61553 m!54699))

(assert (=> b!61553 m!54699))

(assert (=> b!61553 m!54701))

(assert (=> d!12099 d!12247))

(assert (=> d!12099 d!11991))

(assert (=> d!12099 d!11969))

(assert (=> d!12099 d!12085))

(assert (=> d!12099 d!12001))

(declare-fun d!12249 () Bool)

(declare-fun res!33907 () Bool)

(declare-fun e!40431 () Bool)

(assert (=> d!12249 (=> res!33907 e!40431)))

(assert (=> d!12249 (= res!33907 (= (select (arr!1793 lt!25324) #b00000000000000000000000000000000) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(assert (=> d!12249 (= (arrayContainsKey!0 lt!25324 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) #b00000000000000000000000000000000) e!40431)))

(declare-fun b!61554 () Bool)

(declare-fun e!40432 () Bool)

(assert (=> b!61554 (= e!40431 e!40432)))

(declare-fun res!33908 () Bool)

(assert (=> b!61554 (=> (not res!33908) (not e!40432))))

(assert (=> b!61554 (= res!33908 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2024 lt!25324)))))

(declare-fun b!61555 () Bool)

(assert (=> b!61555 (= e!40432 (arrayContainsKey!0 lt!25324 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!12249 (not res!33907)) b!61554))

(assert (= (and b!61554 res!33908) b!61555))

(declare-fun m!54703 () Bool)

(assert (=> d!12249 m!54703))

(assert (=> b!61555 m!53313))

(declare-fun m!54705 () Bool)

(assert (=> b!61555 m!54705))

(assert (=> d!12099 d!12249))

(declare-fun d!12251 () Bool)

(declare-fun e!40433 () Bool)

(assert (=> d!12251 e!40433))

(declare-fun res!33909 () Bool)

(assert (=> d!12251 (=> (not res!33909) (not e!40433))))

(assert (=> d!12251 (= res!33909 (and (bvsge (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) #b00000000000000000000000000000000) (bvslt (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (size!2024 lt!25320))))))

(declare-fun lt!25502 () Unit!1625)

(assert (=> d!12251 (= lt!25502 (choose!323 lt!25320 lt!25329 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (defaultEntry!2067 newMap!16)))))

(assert (=> d!12251 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12251 (= (lemmaValidKeyInArrayIsInListMap!77 lt!25320 lt!25329 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (defaultEntry!2067 newMap!16)) lt!25502)))

(declare-fun b!61556 () Bool)

(assert (=> b!61556 (= e!40433 (contains!686 (getCurrentListMap!405 lt!25320 lt!25329 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (select (arr!1793 lt!25320) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)))))))

(assert (= (and d!12251 res!33909) b!61556))

(declare-fun m!54707 () Bool)

(assert (=> d!12251 m!54707))

(assert (=> d!12251 m!53559))

(assert (=> b!61556 m!54103))

(declare-fun m!54709 () Bool)

(assert (=> b!61556 m!54709))

(assert (=> b!61556 m!54103))

(assert (=> b!61556 m!54709))

(declare-fun m!54711 () Bool)

(assert (=> b!61556 m!54711))

(assert (=> d!12099 d!12251))

(declare-fun b!61558 () Bool)

(declare-fun e!40435 () (_ BitVec 32))

(declare-fun e!40434 () (_ BitVec 32))

(assert (=> b!61558 (= e!40435 e!40434)))

(declare-fun c!8101 () Bool)

(assert (=> b!61558 (= c!8101 (validKeyInArray!0 (select (arr!1793 lt!25309) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)))))))

(declare-fun call!4758 () (_ BitVec 32))

(declare-fun bm!4755 () Bool)

(assert (=> bm!4755 (= call!4758 (arrayCountValidKeys!0 lt!25309 (bvadd (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) #b00000000000000000000000000000001) (bvadd (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) #b00000000000000000000000000000001)))))

(declare-fun b!61559 () Bool)

(assert (=> b!61559 (= e!40435 #b00000000000000000000000000000000)))

(declare-fun b!61560 () Bool)

(assert (=> b!61560 (= e!40434 (bvadd #b00000000000000000000000000000001 call!4758))))

(declare-fun lt!25503 () (_ BitVec 32))

(declare-fun d!12253 () Bool)

(assert (=> d!12253 (and (bvsge lt!25503 #b00000000000000000000000000000000) (bvsle lt!25503 (bvsub (size!2024 lt!25309) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)))))))

(assert (=> d!12253 (= lt!25503 e!40435)))

(declare-fun c!8102 () Bool)

(assert (=> d!12253 (= c!8102 (bvsge (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (bvadd (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) #b00000000000000000000000000000001)))))

(assert (=> d!12253 (and (bvsle (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (bvadd (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) #b00000000000000000000000000000001)) (bvsge (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) #b00000000000000000000000000000000) (bvsle (bvadd (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) #b00000000000000000000000000000001) (size!2024 lt!25309)))))

(assert (=> d!12253 (= (arrayCountValidKeys!0 lt!25309 (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (bvadd (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) #b00000000000000000000000000000001)) lt!25503)))

(declare-fun b!61557 () Bool)

(assert (=> b!61557 (= e!40434 call!4758)))

(assert (= (and d!12253 c!8102) b!61559))

(assert (= (and d!12253 (not c!8102)) b!61558))

(assert (= (and b!61558 c!8101) b!61560))

(assert (= (and b!61558 (not c!8101)) b!61557))

(assert (= (or b!61560 b!61557) bm!4755))

(declare-fun m!54713 () Bool)

(assert (=> b!61558 m!54713))

(assert (=> b!61558 m!54713))

(declare-fun m!54715 () Bool)

(assert (=> b!61558 m!54715))

(declare-fun m!54717 () Bool)

(assert (=> bm!4755 m!54717))

(assert (=> d!12099 d!12253))

(declare-fun b!61569 () Bool)

(declare-fun res!33920 () Bool)

(declare-fun e!40441 () Bool)

(assert (=> b!61569 (=> (not res!33920) (not e!40441))))

(assert (=> b!61569 (= res!33920 (not (validKeyInArray!0 (select (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947))))))))

(declare-fun d!12255 () Bool)

(declare-fun e!40440 () Bool)

(assert (=> d!12255 e!40440))

(declare-fun res!33921 () Bool)

(assert (=> d!12255 (=> (not res!33921) (not e!40440))))

(assert (=> d!12255 (= res!33921 (and (bvsge (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) #b00000000000000000000000000000000) (bvslt (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (size!2024 (_keys!3695 newMap!16)))))))

(declare-fun lt!25506 () Unit!1625)

(declare-fun choose!1 (array!3747 (_ BitVec 32) (_ BitVec 64)) Unit!1625)

(assert (=> d!12255 (= lt!25506 (choose!1 (_keys!3695 newMap!16) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(assert (=> d!12255 e!40441))

(declare-fun res!33919 () Bool)

(assert (=> d!12255 (=> (not res!33919) (not e!40441))))

(assert (=> d!12255 (= res!33919 (and (bvsge (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) #b00000000000000000000000000000000) (bvslt (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (size!2024 (_keys!3695 newMap!16)))))))

(assert (=> d!12255 (= (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!3695 newMap!16) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) lt!25506)))

(declare-fun b!61571 () Bool)

(assert (=> b!61571 (= e!40441 (bvslt (size!2024 (_keys!3695 newMap!16)) #b01111111111111111111111111111111))))

(declare-fun b!61572 () Bool)

(assert (=> b!61572 (= e!40440 (= (arrayCountValidKeys!0 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16))) #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!3695 newMap!16) #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))) #b00000000000000000000000000000001)))))

(declare-fun b!61570 () Bool)

(declare-fun res!33918 () Bool)

(assert (=> b!61570 (=> (not res!33918) (not e!40441))))

(assert (=> b!61570 (= res!33918 (validKeyInArray!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(assert (= (and d!12255 res!33919) b!61569))

(assert (= (and b!61569 res!33920) b!61570))

(assert (= (and b!61570 res!33918) b!61571))

(assert (= (and d!12255 res!33921) b!61572))

(declare-fun m!54719 () Bool)

(assert (=> b!61569 m!54719))

(assert (=> b!61569 m!54719))

(declare-fun m!54721 () Bool)

(assert (=> b!61569 m!54721))

(assert (=> d!12255 m!53313))

(declare-fun m!54723 () Bool)

(assert (=> d!12255 m!54723))

(assert (=> b!61572 m!54121))

(assert (=> b!61572 m!54117))

(assert (=> b!61572 m!53547))

(assert (=> b!61570 m!53313))

(assert (=> b!61570 m!53413))

(assert (=> d!12099 d!12255))

(declare-fun d!12257 () Bool)

(declare-fun e!40444 () Bool)

(assert (=> d!12257 e!40444))

(declare-fun res!33924 () Bool)

(assert (=> d!12257 (=> (not res!33924) (not e!40444))))

(assert (=> d!12257 (= res!33924 (and (bvsge (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) #b00000000000000000000000000000000) (bvslt (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (size!2024 (_keys!3695 newMap!16)))))))

(declare-fun lt!25509 () Unit!1625)

(declare-fun choose!102 ((_ BitVec 64) array!3747 (_ BitVec 32) (_ BitVec 32)) Unit!1625)

(assert (=> d!12257 (= lt!25509 (choose!102 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (_keys!3695 newMap!16) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (mask!5963 newMap!16)))))

(assert (=> d!12257 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12257 (= (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (_keys!3695 newMap!16) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (mask!5963 newMap!16)) lt!25509)))

(declare-fun b!61575 () Bool)

(assert (=> b!61575 (= e!40444 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16))) (mask!5963 newMap!16)))))

(assert (= (and d!12257 res!33924) b!61575))

(assert (=> d!12257 m!53313))

(declare-fun m!54725 () Bool)

(assert (=> d!12257 m!54725))

(assert (=> d!12257 m!53559))

(assert (=> b!61575 m!54121))

(assert (=> b!61575 m!54129))

(assert (=> d!12099 d!12257))

(declare-fun d!12259 () Bool)

(declare-fun e!40447 () Bool)

(assert (=> d!12259 e!40447))

(declare-fun res!33927 () Bool)

(assert (=> d!12259 (=> (not res!33927) (not e!40447))))

(assert (=> d!12259 (= res!33927 (and (bvsge (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) #b00000000000000000000000000000000) (bvslt (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (size!2024 (_keys!3695 newMap!16))) (bvslt (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (size!2025 (_values!2050 newMap!16)))))))

(declare-fun lt!25512 () Unit!1625)

(declare-fun choose!326 (array!3747 array!3749 (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 (_ BitVec 32) (_ BitVec 64) V!2859 Int) Unit!1625)

(assert (=> d!12259 (= lt!25512 (choose!326 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2067 newMap!16)))))

(assert (=> d!12259 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12259 (= (lemmaAddValidKeyToArrayThenAddPairToListMap!6 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2067 newMap!16)) lt!25512)))

(declare-fun b!61578 () Bool)

(assert (=> b!61578 (= e!40447 (= (+!82 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!405 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16))) (array!3750 (store (arr!1794 (_values!2050 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (ValueCellFull!861 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2025 (_values!2050 newMap!16))) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16))))))

(assert (= (and d!12259 res!33927) b!61578))

(assert (=> d!12259 m!53313))

(assert (=> d!12259 m!53337))

(declare-fun m!54727 () Bool)

(assert (=> d!12259 m!54727))

(assert (=> d!12259 m!53559))

(assert (=> b!61578 m!54135))

(assert (=> b!61578 m!54101))

(assert (=> b!61578 m!53489))

(assert (=> b!61578 m!54077))

(assert (=> b!61578 m!54121))

(assert (=> b!61578 m!53489))

(assert (=> d!12099 d!12259))

(declare-fun b!61580 () Bool)

(declare-fun e!40449 () (_ BitVec 32))

(declare-fun e!40448 () (_ BitVec 32))

(assert (=> b!61580 (= e!40449 e!40448)))

(declare-fun c!8103 () Bool)

(assert (=> b!61580 (= c!8103 (validKeyInArray!0 (select (arr!1793 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun bm!4756 () Bool)

(declare-fun call!4759 () (_ BitVec 32))

(assert (=> bm!4756 (= call!4759 (arrayCountValidKeys!0 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2024 (_keys!3695 newMap!16))))))

(declare-fun b!61581 () Bool)

(assert (=> b!61581 (= e!40449 #b00000000000000000000000000000000)))

(declare-fun b!61582 () Bool)

(assert (=> b!61582 (= e!40448 (bvadd #b00000000000000000000000000000001 call!4759))))

(declare-fun lt!25513 () (_ BitVec 32))

(declare-fun d!12261 () Bool)

(assert (=> d!12261 (and (bvsge lt!25513 #b00000000000000000000000000000000) (bvsle lt!25513 (bvsub (size!2024 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> d!12261 (= lt!25513 e!40449)))

(declare-fun c!8104 () Bool)

(assert (=> d!12261 (= c!8104 (bvsge #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(assert (=> d!12261 (and (bvsle #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2024 (_keys!3695 newMap!16)) (size!2024 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16))))))))

(assert (=> d!12261 (= (arrayCountValidKeys!0 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16))) #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))) lt!25513)))

(declare-fun b!61579 () Bool)

(assert (=> b!61579 (= e!40448 call!4759)))

(assert (= (and d!12261 c!8104) b!61581))

(assert (= (and d!12261 (not c!8104)) b!61580))

(assert (= (and b!61580 c!8103) b!61582))

(assert (= (and b!61580 (not c!8103)) b!61579))

(assert (= (or b!61582 b!61579) bm!4756))

(assert (=> b!61580 m!54683))

(assert (=> b!61580 m!54683))

(assert (=> b!61580 m!54691))

(declare-fun m!54729 () Bool)

(assert (=> bm!4756 m!54729))

(assert (=> d!12099 d!12261))

(declare-fun d!12263 () Bool)

(assert (=> d!12263 (= (arrayCountValidKeys!0 lt!25309 (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (bvadd (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lt!25516 () Unit!1625)

(declare-fun choose!2 (array!3747 (_ BitVec 32)) Unit!1625)

(assert (=> d!12263 (= lt!25516 (choose!2 lt!25309 (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947))))))

(declare-fun e!40452 () Bool)

(assert (=> d!12263 e!40452))

(declare-fun res!33932 () Bool)

(assert (=> d!12263 (=> (not res!33932) (not e!40452))))

(assert (=> d!12263 (= res!33932 (and (bvsge (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) #b00000000000000000000000000000000) (bvslt (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (size!2024 lt!25309))))))

(assert (=> d!12263 (= (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!25309 (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947))) lt!25516)))

(declare-fun b!61587 () Bool)

(declare-fun res!33933 () Bool)

(assert (=> b!61587 (=> (not res!33933) (not e!40452))))

(assert (=> b!61587 (= res!33933 (validKeyInArray!0 (select (arr!1793 lt!25309) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)))))))

(declare-fun b!61588 () Bool)

(assert (=> b!61588 (= e!40452 (bvslt (size!2024 lt!25309) #b01111111111111111111111111111111))))

(assert (= (and d!12263 res!33932) b!61587))

(assert (= (and b!61587 res!33933) b!61588))

(assert (=> d!12263 m!54131))

(declare-fun m!54731 () Bool)

(assert (=> d!12263 m!54731))

(assert (=> b!61587 m!54713))

(assert (=> b!61587 m!54713))

(assert (=> b!61587 m!54715))

(assert (=> d!12099 d!12263))

(declare-fun d!12265 () Bool)

(declare-fun e!40453 () Bool)

(assert (=> d!12265 e!40453))

(declare-fun res!33934 () Bool)

(assert (=> d!12265 (=> (not res!33934) (not e!40453))))

(declare-fun lt!25518 () ListLongMap!1369)

(assert (=> d!12265 (= res!33934 (contains!686 lt!25518 (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!25519 () List!1436)

(assert (=> d!12265 (= lt!25518 (ListLongMap!1370 lt!25519))))

(declare-fun lt!25517 () Unit!1625)

(declare-fun lt!25520 () Unit!1625)

(assert (=> d!12265 (= lt!25517 lt!25520)))

(assert (=> d!12265 (= (getValueByKey!125 lt!25519 (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12265 (= lt!25520 (lemmaContainsTupThenGetReturnValue!42 lt!25519 (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12265 (= lt!25519 (insertStrictlySorted!45 (toList!700 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16))) (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12265 (= (+!82 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!25518)))

(declare-fun b!61589 () Bool)

(declare-fun res!33935 () Bool)

(assert (=> b!61589 (=> (not res!33935) (not e!40453))))

(assert (=> b!61589 (= res!33935 (= (getValueByKey!125 (toList!700 lt!25518) (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!61590 () Bool)

(assert (=> b!61590 (= e!40453 (contains!688 (toList!700 lt!25518) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12265 res!33934) b!61589))

(assert (= (and b!61589 res!33935) b!61590))

(declare-fun m!54733 () Bool)

(assert (=> d!12265 m!54733))

(declare-fun m!54735 () Bool)

(assert (=> d!12265 m!54735))

(declare-fun m!54737 () Bool)

(assert (=> d!12265 m!54737))

(declare-fun m!54739 () Bool)

(assert (=> d!12265 m!54739))

(declare-fun m!54741 () Bool)

(assert (=> b!61589 m!54741))

(declare-fun m!54743 () Bool)

(assert (=> b!61590 m!54743))

(assert (=> d!12099 d!12265))

(declare-fun b!61591 () Bool)

(declare-fun e!40457 () Bool)

(declare-fun call!4760 () Bool)

(assert (=> b!61591 (= e!40457 call!4760)))

(declare-fun b!61592 () Bool)

(declare-fun e!40455 () Bool)

(declare-fun e!40454 () Bool)

(assert (=> b!61592 (= e!40455 e!40454)))

(declare-fun res!33937 () Bool)

(assert (=> b!61592 (=> (not res!33937) (not e!40454))))

(declare-fun e!40456 () Bool)

(assert (=> b!61592 (= res!33937 (not e!40456))))

(declare-fun res!33938 () Bool)

(assert (=> b!61592 (=> (not res!33938) (not e!40456))))

(assert (=> b!61592 (= res!33938 (validKeyInArray!0 (select (arr!1793 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16)))) lt!25330)))))

(declare-fun b!61593 () Bool)

(assert (=> b!61593 (= e!40454 e!40457)))

(declare-fun c!8105 () Bool)

(assert (=> b!61593 (= c!8105 (validKeyInArray!0 (select (arr!1793 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16)))) lt!25330)))))

(declare-fun b!61594 () Bool)

(assert (=> b!61594 (= e!40457 call!4760)))

(declare-fun d!12267 () Bool)

(declare-fun res!33936 () Bool)

(assert (=> d!12267 (=> res!33936 e!40455)))

(assert (=> d!12267 (= res!33936 (bvsge lt!25330 (size!2024 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16))))))))

(assert (=> d!12267 (= (arrayNoDuplicates!0 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16))) lt!25330 lt!25319) e!40455)))

(declare-fun bm!4757 () Bool)

(assert (=> bm!4757 (= call!4760 (arrayNoDuplicates!0 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16))) (bvadd lt!25330 #b00000000000000000000000000000001) (ite c!8105 (Cons!1433 (select (arr!1793 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16)))) lt!25330) lt!25319) lt!25319)))))

(declare-fun b!61595 () Bool)

(assert (=> b!61595 (= e!40456 (contains!687 lt!25319 (select (arr!1793 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16)))) lt!25330)))))

(assert (= (and d!12267 (not res!33936)) b!61592))

(assert (= (and b!61592 res!33938) b!61595))

(assert (= (and b!61592 res!33937) b!61593))

(assert (= (and b!61593 c!8105) b!61591))

(assert (= (and b!61593 (not c!8105)) b!61594))

(assert (= (or b!61591 b!61594) bm!4757))

(declare-fun m!54745 () Bool)

(assert (=> b!61592 m!54745))

(assert (=> b!61592 m!54745))

(declare-fun m!54747 () Bool)

(assert (=> b!61592 m!54747))

(assert (=> b!61593 m!54745))

(assert (=> b!61593 m!54745))

(assert (=> b!61593 m!54747))

(assert (=> bm!4757 m!54745))

(declare-fun m!54749 () Bool)

(assert (=> bm!4757 m!54749))

(assert (=> b!61595 m!54745))

(assert (=> b!61595 m!54745))

(declare-fun m!54751 () Bool)

(assert (=> b!61595 m!54751))

(assert (=> d!12099 d!12267))

(declare-fun d!12269 () Bool)

(declare-fun e!40460 () Bool)

(assert (=> d!12269 e!40460))

(declare-fun res!33941 () Bool)

(assert (=> d!12269 (=> (not res!33941) (not e!40460))))

(assert (=> d!12269 (= res!33941 (and (bvsge (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) #b00000000000000000000000000000000) (bvslt (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (size!2024 (_keys!3695 newMap!16)))))))

(declare-fun lt!25523 () Unit!1625)

(declare-fun choose!41 (array!3747 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1437) Unit!1625)

(assert (=> d!12269 (= lt!25523 (choose!41 (_keys!3695 newMap!16) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) lt!25330 lt!25319))))

(assert (=> d!12269 (bvslt (size!2024 (_keys!3695 newMap!16)) #b01111111111111111111111111111111)))

(assert (=> d!12269 (= (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!3695 newMap!16) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) lt!25330 lt!25319) lt!25523)))

(declare-fun b!61598 () Bool)

(assert (=> b!61598 (= e!40460 (arrayNoDuplicates!0 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16))) lt!25330 lt!25319))))

(assert (= (and d!12269 res!33941) b!61598))

(assert (=> d!12269 m!53313))

(declare-fun m!54753 () Bool)

(assert (=> d!12269 m!54753))

(assert (=> b!61598 m!54121))

(assert (=> b!61598 m!54125))

(assert (=> d!12099 d!12269))

(declare-fun e!40467 () Bool)

(declare-fun b!61599 () Bool)

(assert (=> b!61599 (= e!40467 (validKeyInArray!0 (select (arr!1793 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!61600 () Bool)

(declare-fun res!33942 () Bool)

(declare-fun e!40462 () Bool)

(assert (=> b!61600 (=> (not res!33942) (not e!40462))))

(declare-fun e!40465 () Bool)

(assert (=> b!61600 (= res!33942 e!40465)))

(declare-fun res!33950 () Bool)

(assert (=> b!61600 (=> res!33950 e!40465)))

(declare-fun e!40461 () Bool)

(assert (=> b!61600 (= res!33950 (not e!40461))))

(declare-fun res!33946 () Bool)

(assert (=> b!61600 (=> (not res!33946) (not e!40461))))

(assert (=> b!61600 (= res!33946 (bvslt #b00000000000000000000000000000000 (size!2024 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16))))))))

(declare-fun b!61601 () Bool)

(declare-fun e!40469 () Unit!1625)

(declare-fun Unit!1655 () Unit!1625)

(assert (=> b!61601 (= e!40469 Unit!1655)))

(declare-fun b!61602 () Bool)

(declare-fun c!8109 () Bool)

(assert (=> b!61602 (= c!8109 (and (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!40466 () ListLongMap!1369)

(declare-fun e!40468 () ListLongMap!1369)

(assert (=> b!61602 (= e!40466 e!40468)))

(declare-fun b!61603 () Bool)

(declare-fun e!40473 () ListLongMap!1369)

(declare-fun call!4767 () ListLongMap!1369)

(assert (=> b!61603 (= e!40473 (+!82 call!4767 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))

(declare-fun c!8108 () Bool)

(declare-fun bm!4758 () Bool)

(declare-fun call!4766 () ListLongMap!1369)

(declare-fun call!4765 () ListLongMap!1369)

(declare-fun c!8107 () Bool)

(declare-fun call!4761 () ListLongMap!1369)

(assert (=> bm!4758 (= call!4767 (+!82 (ite c!8107 call!4761 (ite c!8108 call!4766 call!4765)) (ite (or c!8107 c!8108) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(declare-fun b!61604 () Bool)

(declare-fun res!33945 () Bool)

(assert (=> b!61604 (=> (not res!33945) (not e!40462))))

(declare-fun e!40471 () Bool)

(assert (=> b!61604 (= res!33945 e!40471)))

(declare-fun c!8110 () Bool)

(assert (=> b!61604 (= c!8110 (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!61605 () Bool)

(declare-fun e!40464 () Bool)

(declare-fun lt!25524 () ListLongMap!1369)

(assert (=> b!61605 (= e!40464 (= (apply!67 lt!25524 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1981 newMap!16)))))

(declare-fun bm!4759 () Bool)

(assert (=> bm!4759 (= call!4765 call!4766)))

(declare-fun b!61606 () Bool)

(assert (=> b!61606 (= e!40471 e!40464)))

(declare-fun res!33943 () Bool)

(declare-fun call!4763 () Bool)

(assert (=> b!61606 (= res!33943 call!4763)))

(assert (=> b!61606 (=> (not res!33943) (not e!40464))))

(declare-fun b!61607 () Bool)

(declare-fun e!40470 () Bool)

(assert (=> b!61607 (= e!40470 (= (apply!67 lt!25524 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1981 newMap!16)))))

(declare-fun b!61608 () Bool)

(assert (=> b!61608 (= e!40468 call!4765)))

(declare-fun bm!4761 () Bool)

(assert (=> bm!4761 (= call!4761 (getCurrentListMapNoExtraKeys!45 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16))) (array!3750 (store (arr!1794 (_values!2050 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (ValueCellFull!861 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2025 (_values!2050 newMap!16))) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun b!61609 () Bool)

(declare-fun e!40463 () Bool)

(assert (=> b!61609 (= e!40465 e!40463)))

(declare-fun res!33944 () Bool)

(assert (=> b!61609 (=> (not res!33944) (not e!40463))))

(assert (=> b!61609 (= res!33944 (contains!686 lt!25524 (select (arr!1793 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> b!61609 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16))))))))

(declare-fun bm!4762 () Bool)

(assert (=> bm!4762 (= call!4763 (contains!686 lt!25524 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61610 () Bool)

(declare-fun call!4764 () ListLongMap!1369)

(assert (=> b!61610 (= e!40468 call!4764)))

(declare-fun b!61611 () Bool)

(assert (=> b!61611 (= e!40463 (= (apply!67 lt!25524 (select (arr!1793 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16)))) #b00000000000000000000000000000000)) (get!1075 (select (arr!1794 (array!3750 (store (arr!1794 (_values!2050 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (ValueCellFull!861 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2025 (_values!2050 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!61611 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2025 (array!3750 (store (arr!1794 (_values!2050 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (ValueCellFull!861 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2025 (_values!2050 newMap!16))))))))

(assert (=> b!61611 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16))))))))

(declare-fun bm!4763 () Bool)

(assert (=> bm!4763 (= call!4764 call!4767)))

(declare-fun d!12271 () Bool)

(assert (=> d!12271 e!40462))

(declare-fun res!33947 () Bool)

(assert (=> d!12271 (=> (not res!33947) (not e!40462))))

(assert (=> d!12271 (= res!33947 (or (bvsge #b00000000000000000000000000000000 (size!2024 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16))))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16))))))))))

(declare-fun lt!25540 () ListLongMap!1369)

(assert (=> d!12271 (= lt!25524 lt!25540)))

(declare-fun lt!25533 () Unit!1625)

(assert (=> d!12271 (= lt!25533 e!40469)))

(declare-fun c!8111 () Bool)

(assert (=> d!12271 (= c!8111 e!40467)))

(declare-fun res!33949 () Bool)

(assert (=> d!12271 (=> (not res!33949) (not e!40467))))

(assert (=> d!12271 (= res!33949 (bvslt #b00000000000000000000000000000000 (size!2024 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16))))))))

(assert (=> d!12271 (= lt!25540 e!40473)))

(assert (=> d!12271 (= c!8107 (and (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12271 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12271 (= (getCurrentListMap!405 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16))) (array!3750 (store (arr!1794 (_values!2050 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (ValueCellFull!861 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2025 (_values!2050 newMap!16))) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) lt!25524)))

(declare-fun bm!4760 () Bool)

(assert (=> bm!4760 (= call!4766 call!4761)))

(declare-fun b!61612 () Bool)

(declare-fun lt!25543 () Unit!1625)

(assert (=> b!61612 (= e!40469 lt!25543)))

(declare-fun lt!25535 () ListLongMap!1369)

(assert (=> b!61612 (= lt!25535 (getCurrentListMapNoExtraKeys!45 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16))) (array!3750 (store (arr!1794 (_values!2050 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (ValueCellFull!861 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2025 (_values!2050 newMap!16))) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25525 () (_ BitVec 64))

(assert (=> b!61612 (= lt!25525 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25538 () (_ BitVec 64))

(assert (=> b!61612 (= lt!25538 (select (arr!1793 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!25545 () Unit!1625)

(assert (=> b!61612 (= lt!25545 (addStillContains!43 lt!25535 lt!25525 (zeroValue!1981 newMap!16) lt!25538))))

(assert (=> b!61612 (contains!686 (+!82 lt!25535 (tuple2!2033 lt!25525 (zeroValue!1981 newMap!16))) lt!25538)))

(declare-fun lt!25531 () Unit!1625)

(assert (=> b!61612 (= lt!25531 lt!25545)))

(declare-fun lt!25532 () ListLongMap!1369)

(assert (=> b!61612 (= lt!25532 (getCurrentListMapNoExtraKeys!45 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16))) (array!3750 (store (arr!1794 (_values!2050 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (ValueCellFull!861 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2025 (_values!2050 newMap!16))) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25530 () (_ BitVec 64))

(assert (=> b!61612 (= lt!25530 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25544 () (_ BitVec 64))

(assert (=> b!61612 (= lt!25544 (select (arr!1793 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!25529 () Unit!1625)

(assert (=> b!61612 (= lt!25529 (addApplyDifferent!43 lt!25532 lt!25530 (minValue!1981 newMap!16) lt!25544))))

(assert (=> b!61612 (= (apply!67 (+!82 lt!25532 (tuple2!2033 lt!25530 (minValue!1981 newMap!16))) lt!25544) (apply!67 lt!25532 lt!25544))))

(declare-fun lt!25528 () Unit!1625)

(assert (=> b!61612 (= lt!25528 lt!25529)))

(declare-fun lt!25539 () ListLongMap!1369)

(assert (=> b!61612 (= lt!25539 (getCurrentListMapNoExtraKeys!45 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16))) (array!3750 (store (arr!1794 (_values!2050 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (ValueCellFull!861 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2025 (_values!2050 newMap!16))) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25526 () (_ BitVec 64))

(assert (=> b!61612 (= lt!25526 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25534 () (_ BitVec 64))

(assert (=> b!61612 (= lt!25534 (select (arr!1793 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!25541 () Unit!1625)

(assert (=> b!61612 (= lt!25541 (addApplyDifferent!43 lt!25539 lt!25526 (zeroValue!1981 newMap!16) lt!25534))))

(assert (=> b!61612 (= (apply!67 (+!82 lt!25539 (tuple2!2033 lt!25526 (zeroValue!1981 newMap!16))) lt!25534) (apply!67 lt!25539 lt!25534))))

(declare-fun lt!25542 () Unit!1625)

(assert (=> b!61612 (= lt!25542 lt!25541)))

(declare-fun lt!25527 () ListLongMap!1369)

(assert (=> b!61612 (= lt!25527 (getCurrentListMapNoExtraKeys!45 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16))) (array!3750 (store (arr!1794 (_values!2050 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (ValueCellFull!861 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2025 (_values!2050 newMap!16))) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25537 () (_ BitVec 64))

(assert (=> b!61612 (= lt!25537 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25536 () (_ BitVec 64))

(assert (=> b!61612 (= lt!25536 (select (arr!1793 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16)))) #b00000000000000000000000000000000))))

(assert (=> b!61612 (= lt!25543 (addApplyDifferent!43 lt!25527 lt!25537 (minValue!1981 newMap!16) lt!25536))))

(assert (=> b!61612 (= (apply!67 (+!82 lt!25527 (tuple2!2033 lt!25537 (minValue!1981 newMap!16))) lt!25536) (apply!67 lt!25527 lt!25536))))

(declare-fun b!61613 () Bool)

(declare-fun e!40472 () Bool)

(declare-fun call!4762 () Bool)

(assert (=> b!61613 (= e!40472 (not call!4762))))

(declare-fun b!61614 () Bool)

(assert (=> b!61614 (= e!40466 call!4764)))

(declare-fun b!61615 () Bool)

(assert (=> b!61615 (= e!40461 (validKeyInArray!0 (select (arr!1793 (array!3748 (store (arr!1793 (_keys!3695 newMap!16)) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (size!2024 (_keys!3695 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!61616 () Bool)

(assert (=> b!61616 (= e!40471 (not call!4763))))

(declare-fun bm!4764 () Bool)

(assert (=> bm!4764 (= call!4762 (contains!686 lt!25524 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61617 () Bool)

(assert (=> b!61617 (= e!40472 e!40470)))

(declare-fun res!33948 () Bool)

(assert (=> b!61617 (= res!33948 call!4762)))

(assert (=> b!61617 (=> (not res!33948) (not e!40470))))

(declare-fun b!61618 () Bool)

(assert (=> b!61618 (= e!40473 e!40466)))

(assert (=> b!61618 (= c!8108 (and (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!61619 () Bool)

(assert (=> b!61619 (= e!40462 e!40472)))

(declare-fun c!8106 () Bool)

(assert (=> b!61619 (= c!8106 (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!12271 c!8107) b!61603))

(assert (= (and d!12271 (not c!8107)) b!61618))

(assert (= (and b!61618 c!8108) b!61614))

(assert (= (and b!61618 (not c!8108)) b!61602))

(assert (= (and b!61602 c!8109) b!61610))

(assert (= (and b!61602 (not c!8109)) b!61608))

(assert (= (or b!61610 b!61608) bm!4759))

(assert (= (or b!61614 bm!4759) bm!4760))

(assert (= (or b!61614 b!61610) bm!4763))

(assert (= (or b!61603 bm!4760) bm!4761))

(assert (= (or b!61603 bm!4763) bm!4758))

(assert (= (and d!12271 res!33949) b!61599))

(assert (= (and d!12271 c!8111) b!61612))

(assert (= (and d!12271 (not c!8111)) b!61601))

(assert (= (and d!12271 res!33947) b!61600))

(assert (= (and b!61600 res!33946) b!61615))

(assert (= (and b!61600 (not res!33950)) b!61609))

(assert (= (and b!61609 res!33944) b!61611))

(assert (= (and b!61600 res!33942) b!61604))

(assert (= (and b!61604 c!8110) b!61606))

(assert (= (and b!61604 (not c!8110)) b!61616))

(assert (= (and b!61606 res!33943) b!61605))

(assert (= (or b!61606 b!61616) bm!4762))

(assert (= (and b!61604 res!33945) b!61619))

(assert (= (and b!61619 c!8106) b!61617))

(assert (= (and b!61619 (not c!8106)) b!61613))

(assert (= (and b!61617 res!33948) b!61607))

(assert (= (or b!61617 b!61613) bm!4764))

(declare-fun b_lambda!2739 () Bool)

(assert (=> (not b_lambda!2739) (not b!61611)))

(assert (=> b!61611 t!4813))

(declare-fun b_and!3775 () Bool)

(assert (= b_and!3771 (and (=> t!4813 result!2427) b_and!3775)))

(assert (=> b!61611 t!4815))

(declare-fun b_and!3777 () Bool)

(assert (= b_and!3773 (and (=> t!4815 result!2429) b_and!3777)))

(declare-fun m!54755 () Bool)

(assert (=> bm!4758 m!54755))

(declare-fun m!54757 () Bool)

(assert (=> bm!4761 m!54757))

(declare-fun m!54759 () Bool)

(assert (=> b!61612 m!54759))

(declare-fun m!54761 () Bool)

(assert (=> b!61612 m!54761))

(declare-fun m!54763 () Bool)

(assert (=> b!61612 m!54763))

(declare-fun m!54765 () Bool)

(assert (=> b!61612 m!54765))

(declare-fun m!54767 () Bool)

(assert (=> b!61612 m!54767))

(assert (=> b!61612 m!54683))

(declare-fun m!54769 () Bool)

(assert (=> b!61612 m!54769))

(declare-fun m!54771 () Bool)

(assert (=> b!61612 m!54771))

(declare-fun m!54773 () Bool)

(assert (=> b!61612 m!54773))

(assert (=> b!61612 m!54757))

(assert (=> b!61612 m!54759))

(declare-fun m!54775 () Bool)

(assert (=> b!61612 m!54775))

(assert (=> b!61612 m!54763))

(declare-fun m!54777 () Bool)

(assert (=> b!61612 m!54777))

(assert (=> b!61612 m!54771))

(declare-fun m!54779 () Bool)

(assert (=> b!61612 m!54779))

(declare-fun m!54781 () Bool)

(assert (=> b!61612 m!54781))

(declare-fun m!54783 () Bool)

(assert (=> b!61612 m!54783))

(declare-fun m!54785 () Bool)

(assert (=> b!61612 m!54785))

(assert (=> b!61612 m!54775))

(declare-fun m!54787 () Bool)

(assert (=> b!61612 m!54787))

(declare-fun m!54789 () Bool)

(assert (=> b!61605 m!54789))

(assert (=> b!61615 m!54683))

(assert (=> b!61615 m!54683))

(assert (=> b!61615 m!54691))

(assert (=> b!61611 m!54683))

(declare-fun m!54791 () Bool)

(assert (=> b!61611 m!54791))

(declare-fun m!54793 () Bool)

(assert (=> b!61611 m!54793))

(assert (=> b!61611 m!54793))

(assert (=> b!61611 m!53647))

(declare-fun m!54795 () Bool)

(assert (=> b!61611 m!54795))

(assert (=> b!61611 m!54683))

(assert (=> b!61611 m!53647))

(assert (=> b!61609 m!54683))

(assert (=> b!61609 m!54683))

(declare-fun m!54797 () Bool)

(assert (=> b!61609 m!54797))

(declare-fun m!54799 () Bool)

(assert (=> b!61607 m!54799))

(assert (=> b!61599 m!54683))

(assert (=> b!61599 m!54683))

(assert (=> b!61599 m!54691))

(declare-fun m!54801 () Bool)

(assert (=> b!61603 m!54801))

(declare-fun m!54803 () Bool)

(assert (=> bm!4762 m!54803))

(assert (=> d!12271 m!53559))

(declare-fun m!54805 () Bool)

(assert (=> bm!4764 m!54805))

(assert (=> d!12099 d!12271))

(declare-fun d!12273 () Bool)

(declare-fun e!40474 () Bool)

(assert (=> d!12273 e!40474))

(declare-fun res!33951 () Bool)

(assert (=> d!12273 (=> res!33951 e!40474)))

(declare-fun lt!25549 () Bool)

(assert (=> d!12273 (= res!33951 (not lt!25549))))

(declare-fun lt!25548 () Bool)

(assert (=> d!12273 (= lt!25549 lt!25548)))

(declare-fun lt!25547 () Unit!1625)

(declare-fun e!40475 () Unit!1625)

(assert (=> d!12273 (= lt!25547 e!40475)))

(declare-fun c!8112 () Bool)

(assert (=> d!12273 (= c!8112 lt!25548)))

(assert (=> d!12273 (= lt!25548 (containsKey!129 (toList!700 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(assert (=> d!12273 (= (contains!686 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) lt!25549)))

(declare-fun b!61620 () Bool)

(declare-fun lt!25546 () Unit!1625)

(assert (=> b!61620 (= e!40475 lt!25546)))

(assert (=> b!61620 (= lt!25546 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(assert (=> b!61620 (isDefined!78 (getValueByKey!125 (toList!700 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(declare-fun b!61621 () Bool)

(declare-fun Unit!1656 () Unit!1625)

(assert (=> b!61621 (= e!40475 Unit!1656)))

(declare-fun b!61622 () Bool)

(assert (=> b!61622 (= e!40474 (isDefined!78 (getValueByKey!125 (toList!700 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355))))))

(assert (= (and d!12273 c!8112) b!61620))

(assert (= (and d!12273 (not c!8112)) b!61621))

(assert (= (and d!12273 (not res!33951)) b!61622))

(assert (=> d!12273 m!53313))

(declare-fun m!54807 () Bool)

(assert (=> d!12273 m!54807))

(assert (=> b!61620 m!53313))

(declare-fun m!54809 () Bool)

(assert (=> b!61620 m!54809))

(assert (=> b!61620 m!53313))

(declare-fun m!54811 () Bool)

(assert (=> b!61620 m!54811))

(assert (=> b!61620 m!54811))

(declare-fun m!54813 () Bool)

(assert (=> b!61620 m!54813))

(assert (=> b!61622 m!53313))

(assert (=> b!61622 m!54811))

(assert (=> b!61622 m!54811))

(assert (=> b!61622 m!54813))

(assert (=> d!12099 d!12273))

(declare-fun b!61623 () Bool)

(declare-fun e!40482 () Bool)

(assert (=> b!61623 (= e!40482 (validKeyInArray!0 (select (arr!1793 lt!25320) #b00000000000000000000000000000000)))))

(declare-fun b!61624 () Bool)

(declare-fun res!33952 () Bool)

(declare-fun e!40477 () Bool)

(assert (=> b!61624 (=> (not res!33952) (not e!40477))))

(declare-fun e!40480 () Bool)

(assert (=> b!61624 (= res!33952 e!40480)))

(declare-fun res!33960 () Bool)

(assert (=> b!61624 (=> res!33960 e!40480)))

(declare-fun e!40476 () Bool)

(assert (=> b!61624 (= res!33960 (not e!40476))))

(declare-fun res!33956 () Bool)

(assert (=> b!61624 (=> (not res!33956) (not e!40476))))

(assert (=> b!61624 (= res!33956 (bvslt #b00000000000000000000000000000000 (size!2024 lt!25320)))))

(declare-fun b!61625 () Bool)

(declare-fun e!40484 () Unit!1625)

(declare-fun Unit!1657 () Unit!1625)

(assert (=> b!61625 (= e!40484 Unit!1657)))

(declare-fun b!61626 () Bool)

(declare-fun c!8116 () Bool)

(assert (=> b!61626 (= c!8116 (and (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!40481 () ListLongMap!1369)

(declare-fun e!40483 () ListLongMap!1369)

(assert (=> b!61626 (= e!40481 e!40483)))

(declare-fun b!61627 () Bool)

(declare-fun e!40488 () ListLongMap!1369)

(declare-fun call!4774 () ListLongMap!1369)

(assert (=> b!61627 (= e!40488 (+!82 call!4774 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))

(declare-fun c!8114 () Bool)

(declare-fun call!4772 () ListLongMap!1369)

(declare-fun bm!4765 () Bool)

(declare-fun call!4768 () ListLongMap!1369)

(declare-fun c!8115 () Bool)

(declare-fun call!4773 () ListLongMap!1369)

(assert (=> bm!4765 (= call!4774 (+!82 (ite c!8114 call!4768 (ite c!8115 call!4773 call!4772)) (ite (or c!8114 c!8115) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(declare-fun b!61628 () Bool)

(declare-fun res!33955 () Bool)

(assert (=> b!61628 (=> (not res!33955) (not e!40477))))

(declare-fun e!40486 () Bool)

(assert (=> b!61628 (= res!33955 e!40486)))

(declare-fun c!8117 () Bool)

(assert (=> b!61628 (= c!8117 (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!61629 () Bool)

(declare-fun e!40479 () Bool)

(declare-fun lt!25550 () ListLongMap!1369)

(assert (=> b!61629 (= e!40479 (= (apply!67 lt!25550 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1981 newMap!16)))))

(declare-fun bm!4766 () Bool)

(assert (=> bm!4766 (= call!4772 call!4773)))

(declare-fun b!61630 () Bool)

(assert (=> b!61630 (= e!40486 e!40479)))

(declare-fun res!33953 () Bool)

(declare-fun call!4770 () Bool)

(assert (=> b!61630 (= res!33953 call!4770)))

(assert (=> b!61630 (=> (not res!33953) (not e!40479))))

(declare-fun b!61631 () Bool)

(declare-fun e!40485 () Bool)

(assert (=> b!61631 (= e!40485 (= (apply!67 lt!25550 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1981 newMap!16)))))

(declare-fun b!61632 () Bool)

(assert (=> b!61632 (= e!40483 call!4772)))

(declare-fun bm!4768 () Bool)

(assert (=> bm!4768 (= call!4768 (getCurrentListMapNoExtraKeys!45 lt!25320 lt!25329 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun b!61633 () Bool)

(declare-fun e!40478 () Bool)

(assert (=> b!61633 (= e!40480 e!40478)))

(declare-fun res!33954 () Bool)

(assert (=> b!61633 (=> (not res!33954) (not e!40478))))

(assert (=> b!61633 (= res!33954 (contains!686 lt!25550 (select (arr!1793 lt!25320) #b00000000000000000000000000000000)))))

(assert (=> b!61633 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 lt!25320)))))

(declare-fun bm!4769 () Bool)

(assert (=> bm!4769 (= call!4770 (contains!686 lt!25550 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61634 () Bool)

(declare-fun call!4771 () ListLongMap!1369)

(assert (=> b!61634 (= e!40483 call!4771)))

(declare-fun b!61635 () Bool)

(assert (=> b!61635 (= e!40478 (= (apply!67 lt!25550 (select (arr!1793 lt!25320) #b00000000000000000000000000000000)) (get!1075 (select (arr!1794 lt!25329) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!61635 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2025 lt!25329)))))

(assert (=> b!61635 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 lt!25320)))))

(declare-fun bm!4770 () Bool)

(assert (=> bm!4770 (= call!4771 call!4774)))

(declare-fun d!12275 () Bool)

(assert (=> d!12275 e!40477))

(declare-fun res!33957 () Bool)

(assert (=> d!12275 (=> (not res!33957) (not e!40477))))

(assert (=> d!12275 (= res!33957 (or (bvsge #b00000000000000000000000000000000 (size!2024 lt!25320)) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 lt!25320)))))))

(declare-fun lt!25566 () ListLongMap!1369)

(assert (=> d!12275 (= lt!25550 lt!25566)))

(declare-fun lt!25559 () Unit!1625)

(assert (=> d!12275 (= lt!25559 e!40484)))

(declare-fun c!8118 () Bool)

(assert (=> d!12275 (= c!8118 e!40482)))

(declare-fun res!33959 () Bool)

(assert (=> d!12275 (=> (not res!33959) (not e!40482))))

(assert (=> d!12275 (= res!33959 (bvslt #b00000000000000000000000000000000 (size!2024 lt!25320)))))

(assert (=> d!12275 (= lt!25566 e!40488)))

(assert (=> d!12275 (= c!8114 (and (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12275 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12275 (= (getCurrentListMap!405 lt!25320 lt!25329 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) lt!25550)))

(declare-fun bm!4767 () Bool)

(assert (=> bm!4767 (= call!4773 call!4768)))

(declare-fun b!61636 () Bool)

(declare-fun lt!25569 () Unit!1625)

(assert (=> b!61636 (= e!40484 lt!25569)))

(declare-fun lt!25561 () ListLongMap!1369)

(assert (=> b!61636 (= lt!25561 (getCurrentListMapNoExtraKeys!45 lt!25320 lt!25329 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25551 () (_ BitVec 64))

(assert (=> b!61636 (= lt!25551 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25564 () (_ BitVec 64))

(assert (=> b!61636 (= lt!25564 (select (arr!1793 lt!25320) #b00000000000000000000000000000000))))

(declare-fun lt!25571 () Unit!1625)

(assert (=> b!61636 (= lt!25571 (addStillContains!43 lt!25561 lt!25551 (zeroValue!1981 newMap!16) lt!25564))))

(assert (=> b!61636 (contains!686 (+!82 lt!25561 (tuple2!2033 lt!25551 (zeroValue!1981 newMap!16))) lt!25564)))

(declare-fun lt!25557 () Unit!1625)

(assert (=> b!61636 (= lt!25557 lt!25571)))

(declare-fun lt!25558 () ListLongMap!1369)

(assert (=> b!61636 (= lt!25558 (getCurrentListMapNoExtraKeys!45 lt!25320 lt!25329 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25556 () (_ BitVec 64))

(assert (=> b!61636 (= lt!25556 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25570 () (_ BitVec 64))

(assert (=> b!61636 (= lt!25570 (select (arr!1793 lt!25320) #b00000000000000000000000000000000))))

(declare-fun lt!25555 () Unit!1625)

(assert (=> b!61636 (= lt!25555 (addApplyDifferent!43 lt!25558 lt!25556 (minValue!1981 newMap!16) lt!25570))))

(assert (=> b!61636 (= (apply!67 (+!82 lt!25558 (tuple2!2033 lt!25556 (minValue!1981 newMap!16))) lt!25570) (apply!67 lt!25558 lt!25570))))

(declare-fun lt!25554 () Unit!1625)

(assert (=> b!61636 (= lt!25554 lt!25555)))

(declare-fun lt!25565 () ListLongMap!1369)

(assert (=> b!61636 (= lt!25565 (getCurrentListMapNoExtraKeys!45 lt!25320 lt!25329 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25552 () (_ BitVec 64))

(assert (=> b!61636 (= lt!25552 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25560 () (_ BitVec 64))

(assert (=> b!61636 (= lt!25560 (select (arr!1793 lt!25320) #b00000000000000000000000000000000))))

(declare-fun lt!25567 () Unit!1625)

(assert (=> b!61636 (= lt!25567 (addApplyDifferent!43 lt!25565 lt!25552 (zeroValue!1981 newMap!16) lt!25560))))

(assert (=> b!61636 (= (apply!67 (+!82 lt!25565 (tuple2!2033 lt!25552 (zeroValue!1981 newMap!16))) lt!25560) (apply!67 lt!25565 lt!25560))))

(declare-fun lt!25568 () Unit!1625)

(assert (=> b!61636 (= lt!25568 lt!25567)))

(declare-fun lt!25553 () ListLongMap!1369)

(assert (=> b!61636 (= lt!25553 (getCurrentListMapNoExtraKeys!45 lt!25320 lt!25329 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25563 () (_ BitVec 64))

(assert (=> b!61636 (= lt!25563 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25562 () (_ BitVec 64))

(assert (=> b!61636 (= lt!25562 (select (arr!1793 lt!25320) #b00000000000000000000000000000000))))

(assert (=> b!61636 (= lt!25569 (addApplyDifferent!43 lt!25553 lt!25563 (minValue!1981 newMap!16) lt!25562))))

(assert (=> b!61636 (= (apply!67 (+!82 lt!25553 (tuple2!2033 lt!25563 (minValue!1981 newMap!16))) lt!25562) (apply!67 lt!25553 lt!25562))))

(declare-fun b!61637 () Bool)

(declare-fun e!40487 () Bool)

(declare-fun call!4769 () Bool)

(assert (=> b!61637 (= e!40487 (not call!4769))))

(declare-fun b!61638 () Bool)

(assert (=> b!61638 (= e!40481 call!4771)))

(declare-fun b!61639 () Bool)

(assert (=> b!61639 (= e!40476 (validKeyInArray!0 (select (arr!1793 lt!25320) #b00000000000000000000000000000000)))))

(declare-fun b!61640 () Bool)

(assert (=> b!61640 (= e!40486 (not call!4770))))

(declare-fun bm!4771 () Bool)

(assert (=> bm!4771 (= call!4769 (contains!686 lt!25550 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61641 () Bool)

(assert (=> b!61641 (= e!40487 e!40485)))

(declare-fun res!33958 () Bool)

(assert (=> b!61641 (= res!33958 call!4769)))

(assert (=> b!61641 (=> (not res!33958) (not e!40485))))

(declare-fun b!61642 () Bool)

(assert (=> b!61642 (= e!40488 e!40481)))

(assert (=> b!61642 (= c!8115 (and (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!61643 () Bool)

(assert (=> b!61643 (= e!40477 e!40487)))

(declare-fun c!8113 () Bool)

(assert (=> b!61643 (= c!8113 (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!12275 c!8114) b!61627))

(assert (= (and d!12275 (not c!8114)) b!61642))

(assert (= (and b!61642 c!8115) b!61638))

(assert (= (and b!61642 (not c!8115)) b!61626))

(assert (= (and b!61626 c!8116) b!61634))

(assert (= (and b!61626 (not c!8116)) b!61632))

(assert (= (or b!61634 b!61632) bm!4766))

(assert (= (or b!61638 bm!4766) bm!4767))

(assert (= (or b!61638 b!61634) bm!4770))

(assert (= (or b!61627 bm!4767) bm!4768))

(assert (= (or b!61627 bm!4770) bm!4765))

(assert (= (and d!12275 res!33959) b!61623))

(assert (= (and d!12275 c!8118) b!61636))

(assert (= (and d!12275 (not c!8118)) b!61625))

(assert (= (and d!12275 res!33957) b!61624))

(assert (= (and b!61624 res!33956) b!61639))

(assert (= (and b!61624 (not res!33960)) b!61633))

(assert (= (and b!61633 res!33954) b!61635))

(assert (= (and b!61624 res!33952) b!61628))

(assert (= (and b!61628 c!8117) b!61630))

(assert (= (and b!61628 (not c!8117)) b!61640))

(assert (= (and b!61630 res!33953) b!61629))

(assert (= (or b!61630 b!61640) bm!4769))

(assert (= (and b!61628 res!33955) b!61643))

(assert (= (and b!61643 c!8113) b!61641))

(assert (= (and b!61643 (not c!8113)) b!61637))

(assert (= (and b!61641 res!33958) b!61631))

(assert (= (or b!61641 b!61637) bm!4771))

(declare-fun b_lambda!2741 () Bool)

(assert (=> (not b_lambda!2741) (not b!61635)))

(assert (=> b!61635 t!4813))

(declare-fun b_and!3779 () Bool)

(assert (= b_and!3775 (and (=> t!4813 result!2427) b_and!3779)))

(assert (=> b!61635 t!4815))

(declare-fun b_and!3781 () Bool)

(assert (= b_and!3777 (and (=> t!4815 result!2429) b_and!3781)))

(declare-fun m!54815 () Bool)

(assert (=> bm!4765 m!54815))

(declare-fun m!54817 () Bool)

(assert (=> bm!4768 m!54817))

(declare-fun m!54819 () Bool)

(assert (=> b!61636 m!54819))

(declare-fun m!54821 () Bool)

(assert (=> b!61636 m!54821))

(declare-fun m!54823 () Bool)

(assert (=> b!61636 m!54823))

(declare-fun m!54825 () Bool)

(assert (=> b!61636 m!54825))

(declare-fun m!54827 () Bool)

(assert (=> b!61636 m!54827))

(declare-fun m!54829 () Bool)

(assert (=> b!61636 m!54829))

(declare-fun m!54831 () Bool)

(assert (=> b!61636 m!54831))

(declare-fun m!54833 () Bool)

(assert (=> b!61636 m!54833))

(declare-fun m!54835 () Bool)

(assert (=> b!61636 m!54835))

(assert (=> b!61636 m!54817))

(assert (=> b!61636 m!54819))

(declare-fun m!54837 () Bool)

(assert (=> b!61636 m!54837))

(assert (=> b!61636 m!54823))

(declare-fun m!54839 () Bool)

(assert (=> b!61636 m!54839))

(assert (=> b!61636 m!54833))

(declare-fun m!54841 () Bool)

(assert (=> b!61636 m!54841))

(declare-fun m!54843 () Bool)

(assert (=> b!61636 m!54843))

(declare-fun m!54845 () Bool)

(assert (=> b!61636 m!54845))

(declare-fun m!54847 () Bool)

(assert (=> b!61636 m!54847))

(assert (=> b!61636 m!54837))

(declare-fun m!54849 () Bool)

(assert (=> b!61636 m!54849))

(declare-fun m!54851 () Bool)

(assert (=> b!61629 m!54851))

(assert (=> b!61639 m!54829))

(assert (=> b!61639 m!54829))

(declare-fun m!54853 () Bool)

(assert (=> b!61639 m!54853))

(assert (=> b!61635 m!54829))

(declare-fun m!54855 () Bool)

(assert (=> b!61635 m!54855))

(declare-fun m!54857 () Bool)

(assert (=> b!61635 m!54857))

(assert (=> b!61635 m!54857))

(assert (=> b!61635 m!53647))

(declare-fun m!54859 () Bool)

(assert (=> b!61635 m!54859))

(assert (=> b!61635 m!54829))

(assert (=> b!61635 m!53647))

(assert (=> b!61633 m!54829))

(assert (=> b!61633 m!54829))

(declare-fun m!54861 () Bool)

(assert (=> b!61633 m!54861))

(declare-fun m!54863 () Bool)

(assert (=> b!61631 m!54863))

(assert (=> b!61623 m!54829))

(assert (=> b!61623 m!54829))

(assert (=> b!61623 m!54853))

(declare-fun m!54865 () Bool)

(assert (=> b!61627 m!54865))

(declare-fun m!54867 () Bool)

(assert (=> bm!4769 m!54867))

(assert (=> d!12275 m!53559))

(declare-fun m!54869 () Bool)

(assert (=> bm!4771 m!54869))

(assert (=> d!12099 d!12275))

(declare-fun d!12277 () Bool)

(assert (=> d!12277 (arrayContainsKey!0 lt!25324 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(declare-fun lt!25574 () Unit!1625)

(declare-fun choose!13 (array!3747 (_ BitVec 64) (_ BitVec 32)) Unit!1625)

(assert (=> d!12277 (= lt!25574 (choose!13 lt!25324 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947))))))

(assert (=> d!12277 (bvsge (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947)) #b00000000000000000000000000000000)))

(assert (=> d!12277 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!25324 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (ite c!7910 (index!3039 lt!24947) (index!3036 lt!24947))) lt!25574)))

(declare-fun bs!2676 () Bool)

(assert (= bs!2676 d!12277))

(assert (=> bs!2676 m!53313))

(assert (=> bs!2676 m!54111))

(assert (=> bs!2676 m!53313))

(declare-fun m!54871 () Bool)

(assert (=> bs!2676 m!54871))

(assert (=> d!12099 d!12277))

(assert (=> b!60951 d!12109))

(assert (=> b!61252 d!11987))

(declare-fun d!12279 () Bool)

(assert (=> d!12279 (= (get!1078 (getValueByKey!125 (toList!700 (+!82 lt!24998 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25007)) (v!2407 (getValueByKey!125 (toList!700 (+!82 lt!24998 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25007)))))

(assert (=> d!12025 d!12279))

(declare-fun b!61644 () Bool)

(declare-fun e!40489 () Option!131)

(assert (=> b!61644 (= e!40489 (Some!130 (_2!1027 (h!2014 (toList!700 (+!82 lt!24998 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))))

(declare-fun c!8119 () Bool)

(declare-fun d!12281 () Bool)

(assert (=> d!12281 (= c!8119 (and ((_ is Cons!1432) (toList!700 (+!82 lt!24998 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))) (= (_1!1027 (h!2014 (toList!700 (+!82 lt!24998 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))) lt!25007)))))

(assert (=> d!12281 (= (getValueByKey!125 (toList!700 (+!82 lt!24998 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25007) e!40489)))

(declare-fun b!61645 () Bool)

(declare-fun e!40490 () Option!131)

(assert (=> b!61645 (= e!40489 e!40490)))

(declare-fun c!8120 () Bool)

(assert (=> b!61645 (= c!8120 (and ((_ is Cons!1432) (toList!700 (+!82 lt!24998 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))) (not (= (_1!1027 (h!2014 (toList!700 (+!82 lt!24998 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))) lt!25007))))))

(declare-fun b!61647 () Bool)

(assert (=> b!61647 (= e!40490 None!129)))

(declare-fun b!61646 () Bool)

(assert (=> b!61646 (= e!40490 (getValueByKey!125 (t!4806 (toList!700 (+!82 lt!24998 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))) lt!25007))))

(assert (= (and d!12281 c!8119) b!61644))

(assert (= (and d!12281 (not c!8119)) b!61645))

(assert (= (and b!61645 c!8120) b!61646))

(assert (= (and b!61645 (not c!8120)) b!61647))

(declare-fun m!54873 () Bool)

(assert (=> b!61646 m!54873))

(assert (=> d!12025 d!12281))

(declare-fun d!12283 () Bool)

(assert (=> d!12283 (= (isDefined!78 (getValueByKey!125 (toList!700 lt!24995) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (not (isEmpty!297 (getValueByKey!125 (toList!700 lt!24995) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun bs!2677 () Bool)

(assert (= bs!2677 d!12283))

(assert (=> bs!2677 m!53599))

(declare-fun m!54875 () Bool)

(assert (=> bs!2677 m!54875))

(assert (=> b!60934 d!12283))

(declare-fun b!61648 () Bool)

(declare-fun e!40491 () Option!131)

(assert (=> b!61648 (= e!40491 (Some!130 (_2!1027 (h!2014 (toList!700 lt!24995)))))))

(declare-fun d!12285 () Bool)

(declare-fun c!8121 () Bool)

(assert (=> d!12285 (= c!8121 (and ((_ is Cons!1432) (toList!700 lt!24995)) (= (_1!1027 (h!2014 (toList!700 lt!24995))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!12285 (= (getValueByKey!125 (toList!700 lt!24995) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!40491)))

(declare-fun b!61649 () Bool)

(declare-fun e!40492 () Option!131)

(assert (=> b!61649 (= e!40491 e!40492)))

(declare-fun c!8122 () Bool)

(assert (=> b!61649 (= c!8122 (and ((_ is Cons!1432) (toList!700 lt!24995)) (not (= (_1!1027 (h!2014 (toList!700 lt!24995))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun b!61651 () Bool)

(assert (=> b!61651 (= e!40492 None!129)))

(declare-fun b!61650 () Bool)

(assert (=> b!61650 (= e!40492 (getValueByKey!125 (t!4806 (toList!700 lt!24995)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!12285 c!8121) b!61648))

(assert (= (and d!12285 (not c!8121)) b!61649))

(assert (= (and b!61649 c!8122) b!61650))

(assert (= (and b!61649 (not c!8122)) b!61651))

(assert (=> b!61650 m!53407))

(declare-fun m!54877 () Bool)

(assert (=> b!61650 m!54877))

(assert (=> b!60934 d!12285))

(declare-fun d!12287 () Bool)

(assert (=> d!12287 (= (isDefined!78 (getValueByKey!125 (toList!700 call!4618) (ite c!7902 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (select (arr!1793 (_keys!3695 newMap!16)) (index!3037 lt!24947))))) (not (isEmpty!297 (getValueByKey!125 (toList!700 call!4618) (ite c!7902 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (select (arr!1793 (_keys!3695 newMap!16)) (index!3037 lt!24947)))))))))

(declare-fun bs!2678 () Bool)

(assert (= bs!2678 d!12287))

(assert (=> bs!2678 m!53591))

(declare-fun m!54879 () Bool)

(assert (=> bs!2678 m!54879))

(assert (=> b!60931 d!12287))

(declare-fun b!61652 () Bool)

(declare-fun e!40493 () Option!131)

(assert (=> b!61652 (= e!40493 (Some!130 (_2!1027 (h!2014 (toList!700 call!4618)))))))

(declare-fun d!12289 () Bool)

(declare-fun c!8123 () Bool)

(assert (=> d!12289 (= c!8123 (and ((_ is Cons!1432) (toList!700 call!4618)) (= (_1!1027 (h!2014 (toList!700 call!4618))) (ite c!7902 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (select (arr!1793 (_keys!3695 newMap!16)) (index!3037 lt!24947))))))))

(assert (=> d!12289 (= (getValueByKey!125 (toList!700 call!4618) (ite c!7902 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (select (arr!1793 (_keys!3695 newMap!16)) (index!3037 lt!24947)))) e!40493)))

(declare-fun b!61653 () Bool)

(declare-fun e!40494 () Option!131)

(assert (=> b!61653 (= e!40493 e!40494)))

(declare-fun c!8124 () Bool)

(assert (=> b!61653 (= c!8124 (and ((_ is Cons!1432) (toList!700 call!4618)) (not (= (_1!1027 (h!2014 (toList!700 call!4618))) (ite c!7902 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (select (arr!1793 (_keys!3695 newMap!16)) (index!3037 lt!24947)))))))))

(declare-fun b!61655 () Bool)

(assert (=> b!61655 (= e!40494 None!129)))

(declare-fun b!61654 () Bool)

(assert (=> b!61654 (= e!40494 (getValueByKey!125 (t!4806 (toList!700 call!4618)) (ite c!7902 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (select (arr!1793 (_keys!3695 newMap!16)) (index!3037 lt!24947)))))))

(assert (= (and d!12289 c!8123) b!61652))

(assert (= (and d!12289 (not c!8123)) b!61653))

(assert (= (and b!61653 c!8124) b!61654))

(assert (= (and b!61653 (not c!8124)) b!61655))

(declare-fun m!54881 () Bool)

(assert (=> b!61654 m!54881))

(assert (=> b!60931 d!12289))

(assert (=> d!12091 d!12123))

(declare-fun d!12291 () Bool)

(declare-fun e!40495 () Bool)

(assert (=> d!12291 e!40495))

(declare-fun res!33961 () Bool)

(assert (=> d!12291 (=> (not res!33961) (not e!40495))))

(declare-fun lt!25576 () ListLongMap!1369)

(assert (=> d!12291 (= res!33961 (contains!686 lt!25576 (_1!1027 (ite (or c!8002 c!8003) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))))

(declare-fun lt!25577 () List!1436)

(assert (=> d!12291 (= lt!25576 (ListLongMap!1370 lt!25577))))

(declare-fun lt!25575 () Unit!1625)

(declare-fun lt!25578 () Unit!1625)

(assert (=> d!12291 (= lt!25575 lt!25578)))

(assert (=> d!12291 (= (getValueByKey!125 lt!25577 (_1!1027 (ite (or c!8002 c!8003) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))) (Some!130 (_2!1027 (ite (or c!8002 c!8003) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))))

(assert (=> d!12291 (= lt!25578 (lemmaContainsTupThenGetReturnValue!42 lt!25577 (_1!1027 (ite (or c!8002 c!8003) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))) (_2!1027 (ite (or c!8002 c!8003) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))))

(assert (=> d!12291 (= lt!25577 (insertStrictlySorted!45 (toList!700 (ite c!8002 call!4697 (ite c!8003 call!4702 call!4701))) (_1!1027 (ite (or c!8002 c!8003) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))) (_2!1027 (ite (or c!8002 c!8003) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))))

(assert (=> d!12291 (= (+!82 (ite c!8002 call!4697 (ite c!8003 call!4702 call!4701)) (ite (or c!8002 c!8003) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))) lt!25576)))

(declare-fun b!61656 () Bool)

(declare-fun res!33962 () Bool)

(assert (=> b!61656 (=> (not res!33962) (not e!40495))))

(assert (=> b!61656 (= res!33962 (= (getValueByKey!125 (toList!700 lt!25576) (_1!1027 (ite (or c!8002 c!8003) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))) (Some!130 (_2!1027 (ite (or c!8002 c!8003) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))))

(declare-fun b!61657 () Bool)

(assert (=> b!61657 (= e!40495 (contains!688 (toList!700 lt!25576) (ite (or c!8002 c!8003) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(assert (= (and d!12291 res!33961) b!61656))

(assert (= (and b!61656 res!33962) b!61657))

(declare-fun m!54883 () Bool)

(assert (=> d!12291 m!54883))

(declare-fun m!54885 () Bool)

(assert (=> d!12291 m!54885))

(declare-fun m!54887 () Bool)

(assert (=> d!12291 m!54887))

(declare-fun m!54889 () Bool)

(assert (=> d!12291 m!54889))

(declare-fun m!54891 () Bool)

(assert (=> b!61656 m!54891))

(declare-fun m!54893 () Bool)

(assert (=> b!61657 m!54893))

(assert (=> bm!4694 d!12291))

(assert (=> b!61035 d!12109))

(declare-fun d!12293 () Bool)

(declare-fun res!33963 () Bool)

(declare-fun e!40496 () Bool)

(assert (=> d!12293 (=> (not res!33963) (not e!40496))))

(assert (=> d!12293 (= res!33963 (simpleValid!43 (_2!1026 lt!25311)))))

(assert (=> d!12293 (= (valid!260 (_2!1026 lt!25311)) e!40496)))

(declare-fun b!61658 () Bool)

(declare-fun res!33964 () Bool)

(assert (=> b!61658 (=> (not res!33964) (not e!40496))))

(assert (=> b!61658 (= res!33964 (= (arrayCountValidKeys!0 (_keys!3695 (_2!1026 lt!25311)) #b00000000000000000000000000000000 (size!2024 (_keys!3695 (_2!1026 lt!25311)))) (_size!364 (_2!1026 lt!25311))))))

(declare-fun b!61659 () Bool)

(declare-fun res!33965 () Bool)

(assert (=> b!61659 (=> (not res!33965) (not e!40496))))

(assert (=> b!61659 (= res!33965 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3695 (_2!1026 lt!25311)) (mask!5963 (_2!1026 lt!25311))))))

(declare-fun b!61660 () Bool)

(assert (=> b!61660 (= e!40496 (arrayNoDuplicates!0 (_keys!3695 (_2!1026 lt!25311)) #b00000000000000000000000000000000 Nil!1434))))

(assert (= (and d!12293 res!33963) b!61658))

(assert (= (and b!61658 res!33964) b!61659))

(assert (= (and b!61659 res!33965) b!61660))

(declare-fun m!54895 () Bool)

(assert (=> d!12293 m!54895))

(declare-fun m!54897 () Bool)

(assert (=> b!61658 m!54897))

(declare-fun m!54899 () Bool)

(assert (=> b!61659 m!54899))

(declare-fun m!54901 () Bool)

(assert (=> b!61660 m!54901))

(assert (=> b!61256 d!12293))

(declare-fun lt!25579 () Bool)

(declare-fun d!12295 () Bool)

(assert (=> d!12295 (= lt!25579 (select (content!66 (toList!700 lt!25201)) (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!40498 () Bool)

(assert (=> d!12295 (= lt!25579 e!40498)))

(declare-fun res!33966 () Bool)

(assert (=> d!12295 (=> (not res!33966) (not e!40498))))

(assert (=> d!12295 (= res!33966 ((_ is Cons!1432) (toList!700 lt!25201)))))

(assert (=> d!12295 (= (contains!688 (toList!700 lt!25201) (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!25579)))

(declare-fun b!61661 () Bool)

(declare-fun e!40497 () Bool)

(assert (=> b!61661 (= e!40498 e!40497)))

(declare-fun res!33967 () Bool)

(assert (=> b!61661 (=> res!33967 e!40497)))

(assert (=> b!61661 (= res!33967 (= (h!2014 (toList!700 lt!25201)) (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!61662 () Bool)

(assert (=> b!61662 (= e!40497 (contains!688 (t!4806 (toList!700 lt!25201)) (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!12295 res!33966) b!61661))

(assert (= (and b!61661 (not res!33967)) b!61662))

(declare-fun m!54903 () Bool)

(assert (=> d!12295 m!54903))

(declare-fun m!54905 () Bool)

(assert (=> d!12295 m!54905))

(declare-fun m!54907 () Bool)

(assert (=> b!61662 m!54907))

(assert (=> b!61171 d!12295))

(declare-fun d!12297 () Bool)

(assert (=> d!12297 (= (get!1078 (getValueByKey!125 (toList!700 lt!24998) lt!25007)) (v!2407 (getValueByKey!125 (toList!700 lt!24998) lt!25007)))))

(assert (=> d!12041 d!12297))

(declare-fun b!61663 () Bool)

(declare-fun e!40499 () Option!131)

(assert (=> b!61663 (= e!40499 (Some!130 (_2!1027 (h!2014 (toList!700 lt!24998)))))))

(declare-fun d!12299 () Bool)

(declare-fun c!8125 () Bool)

(assert (=> d!12299 (= c!8125 (and ((_ is Cons!1432) (toList!700 lt!24998)) (= (_1!1027 (h!2014 (toList!700 lt!24998))) lt!25007)))))

(assert (=> d!12299 (= (getValueByKey!125 (toList!700 lt!24998) lt!25007) e!40499)))

(declare-fun b!61664 () Bool)

(declare-fun e!40500 () Option!131)

(assert (=> b!61664 (= e!40499 e!40500)))

(declare-fun c!8126 () Bool)

(assert (=> b!61664 (= c!8126 (and ((_ is Cons!1432) (toList!700 lt!24998)) (not (= (_1!1027 (h!2014 (toList!700 lt!24998))) lt!25007))))))

(declare-fun b!61666 () Bool)

(assert (=> b!61666 (= e!40500 None!129)))

(declare-fun b!61665 () Bool)

(assert (=> b!61665 (= e!40500 (getValueByKey!125 (t!4806 (toList!700 lt!24998)) lt!25007))))

(assert (= (and d!12299 c!8125) b!61663))

(assert (= (and d!12299 (not c!8125)) b!61664))

(assert (= (and b!61664 c!8126) b!61665))

(assert (= (and b!61664 (not c!8126)) b!61666))

(declare-fun m!54909 () Bool)

(assert (=> b!61665 m!54909))

(assert (=> d!12041 d!12299))

(declare-fun b!61668 () Bool)

(declare-fun e!40502 () (_ BitVec 32))

(declare-fun e!40501 () (_ BitVec 32))

(assert (=> b!61668 (= e!40502 e!40501)))

(declare-fun c!8127 () Bool)

(assert (=> b!61668 (= c!8127 (validKeyInArray!0 (select (arr!1793 (_keys!3695 (_2!1026 lt!24941))) #b00000000000000000000000000000000)))))

(declare-fun bm!4772 () Bool)

(declare-fun call!4775 () (_ BitVec 32))

(assert (=> bm!4772 (= call!4775 (arrayCountValidKeys!0 (_keys!3695 (_2!1026 lt!24941)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2024 (_keys!3695 (_2!1026 lt!24941)))))))

(declare-fun b!61669 () Bool)

(assert (=> b!61669 (= e!40502 #b00000000000000000000000000000000)))

(declare-fun b!61670 () Bool)

(assert (=> b!61670 (= e!40501 (bvadd #b00000000000000000000000000000001 call!4775))))

(declare-fun d!12301 () Bool)

(declare-fun lt!25580 () (_ BitVec 32))

(assert (=> d!12301 (and (bvsge lt!25580 #b00000000000000000000000000000000) (bvsle lt!25580 (bvsub (size!2024 (_keys!3695 (_2!1026 lt!24941))) #b00000000000000000000000000000000)))))

(assert (=> d!12301 (= lt!25580 e!40502)))

(declare-fun c!8128 () Bool)

(assert (=> d!12301 (= c!8128 (bvsge #b00000000000000000000000000000000 (size!2024 (_keys!3695 (_2!1026 lt!24941)))))))

(assert (=> d!12301 (and (bvsle #b00000000000000000000000000000000 (size!2024 (_keys!3695 (_2!1026 lt!24941)))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2024 (_keys!3695 (_2!1026 lt!24941))) (size!2024 (_keys!3695 (_2!1026 lt!24941)))))))

(assert (=> d!12301 (= (arrayCountValidKeys!0 (_keys!3695 (_2!1026 lt!24941)) #b00000000000000000000000000000000 (size!2024 (_keys!3695 (_2!1026 lt!24941)))) lt!25580)))

(declare-fun b!61667 () Bool)

(assert (=> b!61667 (= e!40501 call!4775)))

(assert (= (and d!12301 c!8128) b!61669))

(assert (= (and d!12301 (not c!8128)) b!61668))

(assert (= (and b!61668 c!8127) b!61670))

(assert (= (and b!61668 (not c!8127)) b!61667))

(assert (= (or b!61670 b!61667) bm!4772))

(assert (=> b!61668 m!54355))

(assert (=> b!61668 m!54355))

(assert (=> b!61668 m!54363))

(declare-fun m!54911 () Bool)

(assert (=> bm!4772 m!54911))

(assert (=> b!61101 d!12301))

(declare-fun d!12303 () Bool)

(declare-fun e!40503 () Bool)

(assert (=> d!12303 e!40503))

(declare-fun res!33968 () Bool)

(assert (=> d!12303 (=> res!33968 e!40503)))

(declare-fun lt!25584 () Bool)

(assert (=> d!12303 (= res!33968 (not lt!25584))))

(declare-fun lt!25583 () Bool)

(assert (=> d!12303 (= lt!25584 lt!25583)))

(declare-fun lt!25582 () Unit!1625)

(declare-fun e!40504 () Unit!1625)

(assert (=> d!12303 (= lt!25582 e!40504)))

(declare-fun c!8129 () Bool)

(assert (=> d!12303 (= c!8129 lt!25583)))

(assert (=> d!12303 (= lt!25583 (containsKey!129 (toList!700 lt!25126) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12303 (= (contains!686 lt!25126 #b1000000000000000000000000000000000000000000000000000000000000000) lt!25584)))

(declare-fun b!61671 () Bool)

(declare-fun lt!25581 () Unit!1625)

(assert (=> b!61671 (= e!40504 lt!25581)))

(assert (=> b!61671 (= lt!25581 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 lt!25126) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61671 (isDefined!78 (getValueByKey!125 (toList!700 lt!25126) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61672 () Bool)

(declare-fun Unit!1658 () Unit!1625)

(assert (=> b!61672 (= e!40504 Unit!1658)))

(declare-fun b!61673 () Bool)

(assert (=> b!61673 (= e!40503 (isDefined!78 (getValueByKey!125 (toList!700 lt!25126) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12303 c!8129) b!61671))

(assert (= (and d!12303 (not c!8129)) b!61672))

(assert (= (and d!12303 (not res!33968)) b!61673))

(declare-fun m!54913 () Bool)

(assert (=> d!12303 m!54913))

(declare-fun m!54915 () Bool)

(assert (=> b!61671 m!54915))

(declare-fun m!54917 () Bool)

(assert (=> b!61671 m!54917))

(assert (=> b!61671 m!54917))

(declare-fun m!54919 () Bool)

(assert (=> b!61671 m!54919))

(assert (=> b!61673 m!54917))

(assert (=> b!61673 m!54917))

(assert (=> b!61673 m!54919))

(assert (=> b!61084 d!12303))

(declare-fun d!12305 () Bool)

(declare-fun e!40505 () Bool)

(assert (=> d!12305 e!40505))

(declare-fun res!33969 () Bool)

(assert (=> d!12305 (=> res!33969 e!40505)))

(declare-fun lt!25588 () Bool)

(assert (=> d!12305 (= res!33969 (not lt!25588))))

(declare-fun lt!25587 () Bool)

(assert (=> d!12305 (= lt!25588 lt!25587)))

(declare-fun lt!25586 () Unit!1625)

(declare-fun e!40506 () Unit!1625)

(assert (=> d!12305 (= lt!25586 e!40506)))

(declare-fun c!8130 () Bool)

(assert (=> d!12305 (= c!8130 lt!25587)))

(assert (=> d!12305 (= lt!25587 (containsKey!129 (toList!700 (getCurrentListMap!405 (_keys!3695 newMap!16) lt!24925 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16))) (select (arr!1793 (_keys!3695 newMap!16)) (index!3037 lt!24947))))))

(assert (=> d!12305 (= (contains!686 (getCurrentListMap!405 (_keys!3695 newMap!16) lt!24925 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (select (arr!1793 (_keys!3695 newMap!16)) (index!3037 lt!24947))) lt!25588)))

(declare-fun b!61674 () Bool)

(declare-fun lt!25585 () Unit!1625)

(assert (=> b!61674 (= e!40506 lt!25585)))

(assert (=> b!61674 (= lt!25585 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 (getCurrentListMap!405 (_keys!3695 newMap!16) lt!24925 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16))) (select (arr!1793 (_keys!3695 newMap!16)) (index!3037 lt!24947))))))

(assert (=> b!61674 (isDefined!78 (getValueByKey!125 (toList!700 (getCurrentListMap!405 (_keys!3695 newMap!16) lt!24925 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16))) (select (arr!1793 (_keys!3695 newMap!16)) (index!3037 lt!24947))))))

(declare-fun b!61675 () Bool)

(declare-fun Unit!1659 () Unit!1625)

(assert (=> b!61675 (= e!40506 Unit!1659)))

(declare-fun b!61676 () Bool)

(assert (=> b!61676 (= e!40505 (isDefined!78 (getValueByKey!125 (toList!700 (getCurrentListMap!405 (_keys!3695 newMap!16) lt!24925 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16))) (select (arr!1793 (_keys!3695 newMap!16)) (index!3037 lt!24947)))))))

(assert (= (and d!12305 c!8130) b!61674))

(assert (= (and d!12305 (not c!8130)) b!61675))

(assert (= (and d!12305 (not res!33969)) b!61676))

(assert (=> d!12305 m!53453))

(declare-fun m!54921 () Bool)

(assert (=> d!12305 m!54921))

(assert (=> b!61674 m!53453))

(declare-fun m!54923 () Bool)

(assert (=> b!61674 m!54923))

(assert (=> b!61674 m!53453))

(declare-fun m!54925 () Bool)

(assert (=> b!61674 m!54925))

(assert (=> b!61674 m!54925))

(declare-fun m!54927 () Bool)

(assert (=> b!61674 m!54927))

(assert (=> b!61676 m!53453))

(assert (=> b!61676 m!54925))

(assert (=> b!61676 m!54925))

(assert (=> b!61676 m!54927))

(assert (=> b!61179 d!12305))

(declare-fun b!61677 () Bool)

(declare-fun e!40513 () Bool)

(assert (=> b!61677 (= e!40513 (validKeyInArray!0 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61678 () Bool)

(declare-fun res!33970 () Bool)

(declare-fun e!40508 () Bool)

(assert (=> b!61678 (=> (not res!33970) (not e!40508))))

(declare-fun e!40511 () Bool)

(assert (=> b!61678 (= res!33970 e!40511)))

(declare-fun res!33978 () Bool)

(assert (=> b!61678 (=> res!33978 e!40511)))

(declare-fun e!40507 () Bool)

(assert (=> b!61678 (= res!33978 (not e!40507))))

(declare-fun res!33974 () Bool)

(assert (=> b!61678 (=> (not res!33974) (not e!40507))))

(assert (=> b!61678 (= res!33974 (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(declare-fun b!61679 () Bool)

(declare-fun e!40515 () Unit!1625)

(declare-fun Unit!1660 () Unit!1625)

(assert (=> b!61679 (= e!40515 Unit!1660)))

(declare-fun b!61680 () Bool)

(declare-fun c!8134 () Bool)

(assert (=> b!61680 (= c!8134 (and (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!40512 () ListLongMap!1369)

(declare-fun e!40514 () ListLongMap!1369)

(assert (=> b!61680 (= e!40512 e!40514)))

(declare-fun b!61681 () Bool)

(declare-fun e!40519 () ListLongMap!1369)

(declare-fun call!4782 () ListLongMap!1369)

(assert (=> b!61681 (= e!40519 (+!82 call!4782 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))

(declare-fun call!4781 () ListLongMap!1369)

(declare-fun bm!4773 () Bool)

(declare-fun call!4776 () ListLongMap!1369)

(declare-fun call!4780 () ListLongMap!1369)

(declare-fun c!8133 () Bool)

(declare-fun c!8132 () Bool)

(assert (=> bm!4773 (= call!4782 (+!82 (ite c!8132 call!4776 (ite c!8133 call!4781 call!4780)) (ite (or c!8132 c!8133) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(declare-fun b!61682 () Bool)

(declare-fun res!33973 () Bool)

(assert (=> b!61682 (=> (not res!33973) (not e!40508))))

(declare-fun e!40517 () Bool)

(assert (=> b!61682 (= res!33973 e!40517)))

(declare-fun c!8135 () Bool)

(assert (=> b!61682 (= c!8135 (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!61683 () Bool)

(declare-fun e!40510 () Bool)

(declare-fun lt!25589 () ListLongMap!1369)

(assert (=> b!61683 (= e!40510 (= (apply!67 lt!25589 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1981 newMap!16)))))

(declare-fun bm!4774 () Bool)

(assert (=> bm!4774 (= call!4780 call!4781)))

(declare-fun b!61684 () Bool)

(assert (=> b!61684 (= e!40517 e!40510)))

(declare-fun res!33971 () Bool)

(declare-fun call!4778 () Bool)

(assert (=> b!61684 (= res!33971 call!4778)))

(assert (=> b!61684 (=> (not res!33971) (not e!40510))))

(declare-fun b!61685 () Bool)

(declare-fun e!40516 () Bool)

(assert (=> b!61685 (= e!40516 (= (apply!67 lt!25589 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1981 newMap!16)))))

(declare-fun b!61686 () Bool)

(assert (=> b!61686 (= e!40514 call!4780)))

(declare-fun bm!4776 () Bool)

(assert (=> bm!4776 (= call!4776 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) lt!24925 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun b!61687 () Bool)

(declare-fun e!40509 () Bool)

(assert (=> b!61687 (= e!40511 e!40509)))

(declare-fun res!33972 () Bool)

(assert (=> b!61687 (=> (not res!33972) (not e!40509))))

(assert (=> b!61687 (= res!33972 (contains!686 lt!25589 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61687 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(declare-fun bm!4777 () Bool)

(assert (=> bm!4777 (= call!4778 (contains!686 lt!25589 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61688 () Bool)

(declare-fun call!4779 () ListLongMap!1369)

(assert (=> b!61688 (= e!40514 call!4779)))

(declare-fun b!61689 () Bool)

(assert (=> b!61689 (= e!40509 (= (apply!67 lt!25589 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) (get!1075 (select (arr!1794 lt!24925) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!61689 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2025 lt!24925)))))

(assert (=> b!61689 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(declare-fun bm!4778 () Bool)

(assert (=> bm!4778 (= call!4779 call!4782)))

(declare-fun d!12307 () Bool)

(assert (=> d!12307 e!40508))

(declare-fun res!33975 () Bool)

(assert (=> d!12307 (=> (not res!33975) (not e!40508))))

(assert (=> d!12307 (= res!33975 (or (bvsge #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))))

(declare-fun lt!25605 () ListLongMap!1369)

(assert (=> d!12307 (= lt!25589 lt!25605)))

(declare-fun lt!25598 () Unit!1625)

(assert (=> d!12307 (= lt!25598 e!40515)))

(declare-fun c!8136 () Bool)

(assert (=> d!12307 (= c!8136 e!40513)))

(declare-fun res!33977 () Bool)

(assert (=> d!12307 (=> (not res!33977) (not e!40513))))

(assert (=> d!12307 (= res!33977 (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(assert (=> d!12307 (= lt!25605 e!40519)))

(assert (=> d!12307 (= c!8132 (and (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12307 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12307 (= (getCurrentListMap!405 (_keys!3695 newMap!16) lt!24925 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) lt!25589)))

(declare-fun bm!4775 () Bool)

(assert (=> bm!4775 (= call!4781 call!4776)))

(declare-fun b!61690 () Bool)

(declare-fun lt!25608 () Unit!1625)

(assert (=> b!61690 (= e!40515 lt!25608)))

(declare-fun lt!25600 () ListLongMap!1369)

(assert (=> b!61690 (= lt!25600 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) lt!24925 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25590 () (_ BitVec 64))

(assert (=> b!61690 (= lt!25590 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25603 () (_ BitVec 64))

(assert (=> b!61690 (= lt!25603 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25610 () Unit!1625)

(assert (=> b!61690 (= lt!25610 (addStillContains!43 lt!25600 lt!25590 (zeroValue!1981 newMap!16) lt!25603))))

(assert (=> b!61690 (contains!686 (+!82 lt!25600 (tuple2!2033 lt!25590 (zeroValue!1981 newMap!16))) lt!25603)))

(declare-fun lt!25596 () Unit!1625)

(assert (=> b!61690 (= lt!25596 lt!25610)))

(declare-fun lt!25597 () ListLongMap!1369)

(assert (=> b!61690 (= lt!25597 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) lt!24925 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25595 () (_ BitVec 64))

(assert (=> b!61690 (= lt!25595 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25609 () (_ BitVec 64))

(assert (=> b!61690 (= lt!25609 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25594 () Unit!1625)

(assert (=> b!61690 (= lt!25594 (addApplyDifferent!43 lt!25597 lt!25595 (minValue!1981 newMap!16) lt!25609))))

(assert (=> b!61690 (= (apply!67 (+!82 lt!25597 (tuple2!2033 lt!25595 (minValue!1981 newMap!16))) lt!25609) (apply!67 lt!25597 lt!25609))))

(declare-fun lt!25593 () Unit!1625)

(assert (=> b!61690 (= lt!25593 lt!25594)))

(declare-fun lt!25604 () ListLongMap!1369)

(assert (=> b!61690 (= lt!25604 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) lt!24925 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25591 () (_ BitVec 64))

(assert (=> b!61690 (= lt!25591 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25599 () (_ BitVec 64))

(assert (=> b!61690 (= lt!25599 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25606 () Unit!1625)

(assert (=> b!61690 (= lt!25606 (addApplyDifferent!43 lt!25604 lt!25591 (zeroValue!1981 newMap!16) lt!25599))))

(assert (=> b!61690 (= (apply!67 (+!82 lt!25604 (tuple2!2033 lt!25591 (zeroValue!1981 newMap!16))) lt!25599) (apply!67 lt!25604 lt!25599))))

(declare-fun lt!25607 () Unit!1625)

(assert (=> b!61690 (= lt!25607 lt!25606)))

(declare-fun lt!25592 () ListLongMap!1369)

(assert (=> b!61690 (= lt!25592 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) lt!24925 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25602 () (_ BitVec 64))

(assert (=> b!61690 (= lt!25602 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25601 () (_ BitVec 64))

(assert (=> b!61690 (= lt!25601 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!61690 (= lt!25608 (addApplyDifferent!43 lt!25592 lt!25602 (minValue!1981 newMap!16) lt!25601))))

(assert (=> b!61690 (= (apply!67 (+!82 lt!25592 (tuple2!2033 lt!25602 (minValue!1981 newMap!16))) lt!25601) (apply!67 lt!25592 lt!25601))))

(declare-fun b!61691 () Bool)

(declare-fun e!40518 () Bool)

(declare-fun call!4777 () Bool)

(assert (=> b!61691 (= e!40518 (not call!4777))))

(declare-fun b!61692 () Bool)

(assert (=> b!61692 (= e!40512 call!4779)))

(declare-fun b!61693 () Bool)

(assert (=> b!61693 (= e!40507 (validKeyInArray!0 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61694 () Bool)

(assert (=> b!61694 (= e!40517 (not call!4778))))

(declare-fun bm!4779 () Bool)

(assert (=> bm!4779 (= call!4777 (contains!686 lt!25589 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61695 () Bool)

(assert (=> b!61695 (= e!40518 e!40516)))

(declare-fun res!33976 () Bool)

(assert (=> b!61695 (= res!33976 call!4777)))

(assert (=> b!61695 (=> (not res!33976) (not e!40516))))

(declare-fun b!61696 () Bool)

(assert (=> b!61696 (= e!40519 e!40512)))

(assert (=> b!61696 (= c!8133 (and (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!61697 () Bool)

(assert (=> b!61697 (= e!40508 e!40518)))

(declare-fun c!8131 () Bool)

(assert (=> b!61697 (= c!8131 (not (= (bvand (extraKeys!1950 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!12307 c!8132) b!61681))

(assert (= (and d!12307 (not c!8132)) b!61696))

(assert (= (and b!61696 c!8133) b!61692))

(assert (= (and b!61696 (not c!8133)) b!61680))

(assert (= (and b!61680 c!8134) b!61688))

(assert (= (and b!61680 (not c!8134)) b!61686))

(assert (= (or b!61688 b!61686) bm!4774))

(assert (= (or b!61692 bm!4774) bm!4775))

(assert (= (or b!61692 b!61688) bm!4778))

(assert (= (or b!61681 bm!4775) bm!4776))

(assert (= (or b!61681 bm!4778) bm!4773))

(assert (= (and d!12307 res!33977) b!61677))

(assert (= (and d!12307 c!8136) b!61690))

(assert (= (and d!12307 (not c!8136)) b!61679))

(assert (= (and d!12307 res!33975) b!61678))

(assert (= (and b!61678 res!33974) b!61693))

(assert (= (and b!61678 (not res!33978)) b!61687))

(assert (= (and b!61687 res!33972) b!61689))

(assert (= (and b!61678 res!33970) b!61682))

(assert (= (and b!61682 c!8135) b!61684))

(assert (= (and b!61682 (not c!8135)) b!61694))

(assert (= (and b!61684 res!33971) b!61683))

(assert (= (or b!61684 b!61694) bm!4777))

(assert (= (and b!61682 res!33973) b!61697))

(assert (= (and b!61697 c!8131) b!61695))

(assert (= (and b!61697 (not c!8131)) b!61691))

(assert (= (and b!61695 res!33976) b!61685))

(assert (= (or b!61695 b!61691) bm!4779))

(declare-fun b_lambda!2743 () Bool)

(assert (=> (not b_lambda!2743) (not b!61689)))

(assert (=> b!61689 t!4813))

(declare-fun b_and!3783 () Bool)

(assert (= b_and!3779 (and (=> t!4813 result!2427) b_and!3783)))

(assert (=> b!61689 t!4815))

(declare-fun b_and!3785 () Bool)

(assert (= b_and!3781 (and (=> t!4815 result!2429) b_and!3785)))

(declare-fun m!54929 () Bool)

(assert (=> bm!4773 m!54929))

(declare-fun m!54931 () Bool)

(assert (=> bm!4776 m!54931))

(declare-fun m!54933 () Bool)

(assert (=> b!61690 m!54933))

(declare-fun m!54935 () Bool)

(assert (=> b!61690 m!54935))

(declare-fun m!54937 () Bool)

(assert (=> b!61690 m!54937))

(declare-fun m!54939 () Bool)

(assert (=> b!61690 m!54939))

(declare-fun m!54941 () Bool)

(assert (=> b!61690 m!54941))

(assert (=> b!61690 m!53617))

(declare-fun m!54943 () Bool)

(assert (=> b!61690 m!54943))

(declare-fun m!54945 () Bool)

(assert (=> b!61690 m!54945))

(declare-fun m!54947 () Bool)

(assert (=> b!61690 m!54947))

(assert (=> b!61690 m!54931))

(assert (=> b!61690 m!54933))

(declare-fun m!54949 () Bool)

(assert (=> b!61690 m!54949))

(assert (=> b!61690 m!54937))

(declare-fun m!54951 () Bool)

(assert (=> b!61690 m!54951))

(assert (=> b!61690 m!54945))

(declare-fun m!54953 () Bool)

(assert (=> b!61690 m!54953))

(declare-fun m!54955 () Bool)

(assert (=> b!61690 m!54955))

(declare-fun m!54957 () Bool)

(assert (=> b!61690 m!54957))

(declare-fun m!54959 () Bool)

(assert (=> b!61690 m!54959))

(assert (=> b!61690 m!54949))

(declare-fun m!54961 () Bool)

(assert (=> b!61690 m!54961))

(declare-fun m!54963 () Bool)

(assert (=> b!61683 m!54963))

(assert (=> b!61693 m!53617))

(assert (=> b!61693 m!53617))

(assert (=> b!61693 m!53641))

(assert (=> b!61689 m!53617))

(declare-fun m!54965 () Bool)

(assert (=> b!61689 m!54965))

(declare-fun m!54967 () Bool)

(assert (=> b!61689 m!54967))

(assert (=> b!61689 m!54967))

(assert (=> b!61689 m!53647))

(declare-fun m!54969 () Bool)

(assert (=> b!61689 m!54969))

(assert (=> b!61689 m!53617))

(assert (=> b!61689 m!53647))

(assert (=> b!61687 m!53617))

(assert (=> b!61687 m!53617))

(declare-fun m!54971 () Bool)

(assert (=> b!61687 m!54971))

(declare-fun m!54973 () Bool)

(assert (=> b!61685 m!54973))

(assert (=> b!61677 m!53617))

(assert (=> b!61677 m!53617))

(assert (=> b!61677 m!53641))

(declare-fun m!54975 () Bool)

(assert (=> b!61681 m!54975))

(declare-fun m!54977 () Bool)

(assert (=> bm!4777 m!54977))

(assert (=> d!12307 m!53559))

(declare-fun m!54979 () Bool)

(assert (=> bm!4779 m!54979))

(assert (=> b!61179 d!12307))

(declare-fun d!12309 () Bool)

(assert (=> d!12309 (isDefined!78 (getValueByKey!125 (toList!700 lt!24995) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!25611 () Unit!1625)

(assert (=> d!12309 (= lt!25611 (choose!320 (toList!700 lt!24995) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!40520 () Bool)

(assert (=> d!12309 e!40520))

(declare-fun res!33979 () Bool)

(assert (=> d!12309 (=> (not res!33979) (not e!40520))))

(assert (=> d!12309 (= res!33979 (isStrictlySorted!285 (toList!700 lt!24995)))))

(assert (=> d!12309 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 lt!24995) #b0000000000000000000000000000000000000000000000000000000000000000) lt!25611)))

(declare-fun b!61698 () Bool)

(assert (=> b!61698 (= e!40520 (containsKey!129 (toList!700 lt!24995) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!12309 res!33979) b!61698))

(assert (=> d!12309 m!53887))

(assert (=> d!12309 m!53887))

(assert (=> d!12309 m!53889))

(declare-fun m!54981 () Bool)

(assert (=> d!12309 m!54981))

(assert (=> d!12309 m!54673))

(assert (=> b!61698 m!53883))

(assert (=> b!61104 d!12309))

(declare-fun d!12311 () Bool)

(assert (=> d!12311 (= (isDefined!78 (getValueByKey!125 (toList!700 lt!24995) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!297 (getValueByKey!125 (toList!700 lt!24995) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!2679 () Bool)

(assert (= bs!2679 d!12311))

(assert (=> bs!2679 m!53887))

(declare-fun m!54983 () Bool)

(assert (=> bs!2679 m!54983))

(assert (=> b!61104 d!12311))

(declare-fun b!61699 () Bool)

(declare-fun e!40521 () Option!131)

(assert (=> b!61699 (= e!40521 (Some!130 (_2!1027 (h!2014 (toList!700 lt!24995)))))))

(declare-fun d!12313 () Bool)

(declare-fun c!8137 () Bool)

(assert (=> d!12313 (= c!8137 (and ((_ is Cons!1432) (toList!700 lt!24995)) (= (_1!1027 (h!2014 (toList!700 lt!24995))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12313 (= (getValueByKey!125 (toList!700 lt!24995) #b0000000000000000000000000000000000000000000000000000000000000000) e!40521)))

(declare-fun b!61700 () Bool)

(declare-fun e!40522 () Option!131)

(assert (=> b!61700 (= e!40521 e!40522)))

(declare-fun c!8138 () Bool)

(assert (=> b!61700 (= c!8138 (and ((_ is Cons!1432) (toList!700 lt!24995)) (not (= (_1!1027 (h!2014 (toList!700 lt!24995))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!61702 () Bool)

(assert (=> b!61702 (= e!40522 None!129)))

(declare-fun b!61701 () Bool)

(assert (=> b!61701 (= e!40522 (getValueByKey!125 (t!4806 (toList!700 lt!24995)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!12313 c!8137) b!61699))

(assert (= (and d!12313 (not c!8137)) b!61700))

(assert (= (and b!61700 c!8138) b!61701))

(assert (= (and b!61700 (not c!8138)) b!61702))

(declare-fun m!54985 () Bool)

(assert (=> b!61701 m!54985))

(assert (=> b!61104 d!12313))

(declare-fun b!61703 () Bool)

(declare-fun e!40524 () Bool)

(declare-fun e!40523 () Bool)

(assert (=> b!61703 (= e!40524 e!40523)))

(declare-fun lt!25613 () (_ BitVec 64))

(assert (=> b!61703 (= lt!25613 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) #b00000000000000000000000000000000))))

(declare-fun lt!25614 () Unit!1625)

(assert (=> b!61703 (= lt!25614 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3695 (v!2404 (underlying!231 thiss!992))) lt!25613 #b00000000000000000000000000000000))))

(assert (=> b!61703 (arrayContainsKey!0 (_keys!3695 (v!2404 (underlying!231 thiss!992))) lt!25613 #b00000000000000000000000000000000)))

(declare-fun lt!25612 () Unit!1625)

(assert (=> b!61703 (= lt!25612 lt!25614)))

(declare-fun res!33980 () Bool)

(assert (=> b!61703 (= res!33980 (= (seekEntryOrOpen!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) #b00000000000000000000000000000000) (_keys!3695 (v!2404 (underlying!231 thiss!992))) (mask!5963 (v!2404 (underlying!231 thiss!992)))) (Found!228 #b00000000000000000000000000000000)))))

(assert (=> b!61703 (=> (not res!33980) (not e!40523))))

(declare-fun d!12315 () Bool)

(declare-fun res!33981 () Bool)

(declare-fun e!40525 () Bool)

(assert (=> d!12315 (=> res!33981 e!40525)))

(assert (=> d!12315 (= res!33981 (bvsge #b00000000000000000000000000000000 (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992))))))))

(assert (=> d!12315 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (mask!5963 (v!2404 (underlying!231 thiss!992)))) e!40525)))

(declare-fun b!61704 () Bool)

(declare-fun call!4783 () Bool)

(assert (=> b!61704 (= e!40524 call!4783)))

(declare-fun b!61705 () Bool)

(assert (=> b!61705 (= e!40523 call!4783)))

(declare-fun b!61706 () Bool)

(assert (=> b!61706 (= e!40525 e!40524)))

(declare-fun c!8139 () Bool)

(assert (=> b!61706 (= c!8139 (validKeyInArray!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun bm!4780 () Bool)

(assert (=> bm!4780 (= call!4783 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3695 (v!2404 (underlying!231 thiss!992))) (mask!5963 (v!2404 (underlying!231 thiss!992)))))))

(assert (= (and d!12315 (not res!33981)) b!61706))

(assert (= (and b!61706 c!8139) b!61703))

(assert (= (and b!61706 (not c!8139)) b!61704))

(assert (= (and b!61703 res!33980) b!61705))

(assert (= (or b!61705 b!61704) bm!4780))

(assert (=> b!61703 m!54405))

(declare-fun m!54987 () Bool)

(assert (=> b!61703 m!54987))

(declare-fun m!54989 () Bool)

(assert (=> b!61703 m!54989))

(assert (=> b!61703 m!54405))

(declare-fun m!54991 () Bool)

(assert (=> b!61703 m!54991))

(assert (=> b!61706 m!54405))

(assert (=> b!61706 m!54405))

(assert (=> b!61706 m!54407))

(declare-fun m!54993 () Bool)

(assert (=> bm!4780 m!54993))

(assert (=> b!60927 d!12315))

(declare-fun d!12317 () Bool)

(assert (=> d!12317 (= (get!1077 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61108 d!12317))

(declare-fun d!12319 () Bool)

(assert (=> d!12319 (isDefined!78 (getValueByKey!125 (toList!700 call!4621) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(declare-fun lt!25615 () Unit!1625)

(assert (=> d!12319 (= lt!25615 (choose!320 (toList!700 call!4621) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(declare-fun e!40526 () Bool)

(assert (=> d!12319 e!40526))

(declare-fun res!33982 () Bool)

(assert (=> d!12319 (=> (not res!33982) (not e!40526))))

(assert (=> d!12319 (= res!33982 (isStrictlySorted!285 (toList!700 call!4621)))))

(assert (=> d!12319 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 call!4621) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) lt!25615)))

(declare-fun b!61707 () Bool)

(assert (=> b!61707 (= e!40526 (containsKey!129 (toList!700 call!4621) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(assert (= (and d!12319 res!33982) b!61707))

(assert (=> d!12319 m!53313))

(assert (=> d!12319 m!54083))

(assert (=> d!12319 m!54083))

(assert (=> d!12319 m!54085))

(assert (=> d!12319 m!53313))

(declare-fun m!54995 () Bool)

(assert (=> d!12319 m!54995))

(declare-fun m!54997 () Bool)

(assert (=> d!12319 m!54997))

(assert (=> b!61707 m!53313))

(assert (=> b!61707 m!54079))

(assert (=> b!61204 d!12319))

(declare-fun d!12321 () Bool)

(assert (=> d!12321 (= (isDefined!78 (getValueByKey!125 (toList!700 call!4621) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355))) (not (isEmpty!297 (getValueByKey!125 (toList!700 call!4621) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))))

(declare-fun bs!2680 () Bool)

(assert (= bs!2680 d!12321))

(assert (=> bs!2680 m!54083))

(declare-fun m!54999 () Bool)

(assert (=> bs!2680 m!54999))

(assert (=> b!61204 d!12321))

(declare-fun b!61708 () Bool)

(declare-fun e!40527 () Option!131)

(assert (=> b!61708 (= e!40527 (Some!130 (_2!1027 (h!2014 (toList!700 call!4621)))))))

(declare-fun d!12323 () Bool)

(declare-fun c!8140 () Bool)

(assert (=> d!12323 (= c!8140 (and ((_ is Cons!1432) (toList!700 call!4621)) (= (_1!1027 (h!2014 (toList!700 call!4621))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355))))))

(assert (=> d!12323 (= (getValueByKey!125 (toList!700 call!4621) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) e!40527)))

(declare-fun b!61709 () Bool)

(declare-fun e!40528 () Option!131)

(assert (=> b!61709 (= e!40527 e!40528)))

(declare-fun c!8141 () Bool)

(assert (=> b!61709 (= c!8141 (and ((_ is Cons!1432) (toList!700 call!4621)) (not (= (_1!1027 (h!2014 (toList!700 call!4621))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))))

(declare-fun b!61711 () Bool)

(assert (=> b!61711 (= e!40528 None!129)))

(declare-fun b!61710 () Bool)

(assert (=> b!61710 (= e!40528 (getValueByKey!125 (t!4806 (toList!700 call!4621)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(assert (= (and d!12323 c!8140) b!61708))

(assert (= (and d!12323 (not c!8140)) b!61709))

(assert (= (and b!61709 c!8141) b!61710))

(assert (= (and b!61709 (not c!8141)) b!61711))

(assert (=> b!61710 m!53313))

(declare-fun m!55001 () Bool)

(assert (=> b!61710 m!55001))

(assert (=> b!61204 d!12323))

(declare-fun lt!25616 () Bool)

(declare-fun d!12325 () Bool)

(assert (=> d!12325 (= lt!25616 (select (content!66 (toList!700 lt!25241)) (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun e!40530 () Bool)

(assert (=> d!12325 (= lt!25616 e!40530)))

(declare-fun res!33983 () Bool)

(assert (=> d!12325 (=> (not res!33983) (not e!40530))))

(assert (=> d!12325 (= res!33983 ((_ is Cons!1432) (toList!700 lt!25241)))))

(assert (=> d!12325 (= (contains!688 (toList!700 lt!25241) (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25616)))

(declare-fun b!61712 () Bool)

(declare-fun e!40529 () Bool)

(assert (=> b!61712 (= e!40530 e!40529)))

(declare-fun res!33984 () Bool)

(assert (=> b!61712 (=> res!33984 e!40529)))

(assert (=> b!61712 (= res!33984 (= (h!2014 (toList!700 lt!25241)) (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun b!61713 () Bool)

(assert (=> b!61713 (= e!40529 (contains!688 (t!4806 (toList!700 lt!25241)) (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(assert (= (and d!12325 res!33983) b!61712))

(assert (= (and b!61712 (not res!33984)) b!61713))

(declare-fun m!55003 () Bool)

(assert (=> d!12325 m!55003))

(declare-fun m!55005 () Bool)

(assert (=> d!12325 m!55005))

(declare-fun m!55007 () Bool)

(assert (=> b!61713 m!55007))

(assert (=> b!61208 d!12325))

(declare-fun b!61714 () Bool)

(declare-fun e!40531 () Option!131)

(assert (=> b!61714 (= e!40531 (Some!130 (_2!1027 (h!2014 (toList!700 lt!25138)))))))

(declare-fun d!12327 () Bool)

(declare-fun c!8142 () Bool)

(assert (=> d!12327 (= c!8142 (and ((_ is Cons!1432) (toList!700 lt!25138)) (= (_1!1027 (h!2014 (toList!700 lt!25138))) (_1!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (=> d!12327 (= (getValueByKey!125 (toList!700 lt!25138) (_1!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) e!40531)))

(declare-fun b!61715 () Bool)

(declare-fun e!40532 () Option!131)

(assert (=> b!61715 (= e!40531 e!40532)))

(declare-fun c!8143 () Bool)

(assert (=> b!61715 (= c!8143 (and ((_ is Cons!1432) (toList!700 lt!25138)) (not (= (_1!1027 (h!2014 (toList!700 lt!25138))) (_1!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))))

(declare-fun b!61717 () Bool)

(assert (=> b!61717 (= e!40532 None!129)))

(declare-fun b!61716 () Bool)

(assert (=> b!61716 (= e!40532 (getValueByKey!125 (t!4806 (toList!700 lt!25138)) (_1!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(assert (= (and d!12327 c!8142) b!61714))

(assert (= (and d!12327 (not c!8142)) b!61715))

(assert (= (and b!61715 c!8143) b!61716))

(assert (= (and b!61715 (not c!8143)) b!61717))

(declare-fun m!55009 () Bool)

(assert (=> b!61716 m!55009))

(assert (=> b!61089 d!12327))

(assert (=> b!61196 d!12109))

(declare-fun d!12329 () Bool)

(declare-fun e!40533 () Bool)

(assert (=> d!12329 e!40533))

(declare-fun res!33985 () Bool)

(assert (=> d!12329 (=> (not res!33985) (not e!40533))))

(declare-fun lt!25618 () ListLongMap!1369)

(assert (=> d!12329 (= res!33985 (contains!686 lt!25618 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(declare-fun lt!25619 () List!1436)

(assert (=> d!12329 (= lt!25618 (ListLongMap!1370 lt!25619))))

(declare-fun lt!25617 () Unit!1625)

(declare-fun lt!25620 () Unit!1625)

(assert (=> d!12329 (= lt!25617 lt!25620)))

(assert (=> d!12329 (= (getValueByKey!125 lt!25619 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))) (Some!130 (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(assert (=> d!12329 (= lt!25620 (lemmaContainsTupThenGetReturnValue!42 lt!25619 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(assert (=> d!12329 (= lt!25619 (insertStrictlySorted!45 (toList!700 call!4668) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(assert (=> d!12329 (= (+!82 call!4668 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))) lt!25618)))

(declare-fun b!61718 () Bool)

(declare-fun res!33986 () Bool)

(assert (=> b!61718 (=> (not res!33986) (not e!40533))))

(assert (=> b!61718 (= res!33986 (= (getValueByKey!125 (toList!700 lt!25618) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))) (Some!130 (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))))

(declare-fun b!61719 () Bool)

(assert (=> b!61719 (= e!40533 (contains!688 (toList!700 lt!25618) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))

(assert (= (and d!12329 res!33985) b!61718))

(assert (= (and b!61718 res!33986) b!61719))

(declare-fun m!55011 () Bool)

(assert (=> d!12329 m!55011))

(declare-fun m!55013 () Bool)

(assert (=> d!12329 m!55013))

(declare-fun m!55015 () Bool)

(assert (=> d!12329 m!55015))

(declare-fun m!55017 () Bool)

(assert (=> d!12329 m!55017))

(declare-fun m!55019 () Bool)

(assert (=> b!61718 m!55019))

(declare-fun m!55021 () Bool)

(assert (=> b!61719 m!55021))

(assert (=> b!60939 d!12329))

(declare-fun d!12331 () Bool)

(declare-fun e!40534 () Bool)

(assert (=> d!12331 e!40534))

(declare-fun res!33987 () Bool)

(assert (=> d!12331 (=> res!33987 e!40534)))

(declare-fun lt!25624 () Bool)

(assert (=> d!12331 (= res!33987 (not lt!25624))))

(declare-fun lt!25623 () Bool)

(assert (=> d!12331 (= lt!25624 lt!25623)))

(declare-fun lt!25622 () Unit!1625)

(declare-fun e!40535 () Unit!1625)

(assert (=> d!12331 (= lt!25622 e!40535)))

(declare-fun c!8144 () Bool)

(assert (=> d!12331 (= c!8144 lt!25623)))

(assert (=> d!12331 (= lt!25623 (containsKey!129 (toList!700 lt!25138) (_1!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(assert (=> d!12331 (= (contains!686 lt!25138 (_1!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25624)))

(declare-fun b!61720 () Bool)

(declare-fun lt!25621 () Unit!1625)

(assert (=> b!61720 (= e!40535 lt!25621)))

(assert (=> b!61720 (= lt!25621 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 lt!25138) (_1!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(assert (=> b!61720 (isDefined!78 (getValueByKey!125 (toList!700 lt!25138) (_1!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun b!61721 () Bool)

(declare-fun Unit!1661 () Unit!1625)

(assert (=> b!61721 (= e!40535 Unit!1661)))

(declare-fun b!61722 () Bool)

(assert (=> b!61722 (= e!40534 (isDefined!78 (getValueByKey!125 (toList!700 lt!25138) (_1!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (= (and d!12331 c!8144) b!61720))

(assert (= (and d!12331 (not c!8144)) b!61721))

(assert (= (and d!12331 (not res!33987)) b!61722))

(declare-fun m!55023 () Bool)

(assert (=> d!12331 m!55023))

(declare-fun m!55025 () Bool)

(assert (=> b!61720 m!55025))

(assert (=> b!61720 m!53803))

(assert (=> b!61720 m!53803))

(declare-fun m!55027 () Bool)

(assert (=> b!61720 m!55027))

(assert (=> b!61722 m!53803))

(assert (=> b!61722 m!53803))

(assert (=> b!61722 m!55027))

(assert (=> d!12019 d!12331))

(declare-fun b!61723 () Bool)

(declare-fun e!40536 () Option!131)

(assert (=> b!61723 (= e!40536 (Some!130 (_2!1027 (h!2014 lt!25139))))))

(declare-fun d!12333 () Bool)

(declare-fun c!8145 () Bool)

(assert (=> d!12333 (= c!8145 (and ((_ is Cons!1432) lt!25139) (= (_1!1027 (h!2014 lt!25139)) (_1!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (=> d!12333 (= (getValueByKey!125 lt!25139 (_1!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) e!40536)))

(declare-fun b!61724 () Bool)

(declare-fun e!40537 () Option!131)

(assert (=> b!61724 (= e!40536 e!40537)))

(declare-fun c!8146 () Bool)

(assert (=> b!61724 (= c!8146 (and ((_ is Cons!1432) lt!25139) (not (= (_1!1027 (h!2014 lt!25139)) (_1!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))))

(declare-fun b!61726 () Bool)

(assert (=> b!61726 (= e!40537 None!129)))

(declare-fun b!61725 () Bool)

(assert (=> b!61725 (= e!40537 (getValueByKey!125 (t!4806 lt!25139) (_1!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(assert (= (and d!12333 c!8145) b!61723))

(assert (= (and d!12333 (not c!8145)) b!61724))

(assert (= (and b!61724 c!8146) b!61725))

(assert (= (and b!61724 (not c!8146)) b!61726))

(declare-fun m!55029 () Bool)

(assert (=> b!61725 m!55029))

(assert (=> d!12019 d!12333))

(declare-fun d!12335 () Bool)

(assert (=> d!12335 (= (getValueByKey!125 lt!25139 (_1!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) (Some!130 (_2!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun lt!25625 () Unit!1625)

(assert (=> d!12335 (= lt!25625 (choose!325 lt!25139 (_1!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun e!40538 () Bool)

(assert (=> d!12335 e!40538))

(declare-fun res!33988 () Bool)

(assert (=> d!12335 (=> (not res!33988) (not e!40538))))

(assert (=> d!12335 (= res!33988 (isStrictlySorted!285 lt!25139))))

(assert (=> d!12335 (= (lemmaContainsTupThenGetReturnValue!42 lt!25139 (_1!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25625)))

(declare-fun b!61727 () Bool)

(declare-fun res!33989 () Bool)

(assert (=> b!61727 (=> (not res!33989) (not e!40538))))

(assert (=> b!61727 (= res!33989 (containsKey!129 lt!25139 (_1!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun b!61728 () Bool)

(assert (=> b!61728 (= e!40538 (contains!688 lt!25139 (tuple2!2033 (_1!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (= (and d!12335 res!33988) b!61727))

(assert (= (and b!61727 res!33989) b!61728))

(assert (=> d!12335 m!53797))

(declare-fun m!55031 () Bool)

(assert (=> d!12335 m!55031))

(declare-fun m!55033 () Bool)

(assert (=> d!12335 m!55033))

(declare-fun m!55035 () Bool)

(assert (=> b!61727 m!55035))

(declare-fun m!55037 () Bool)

(assert (=> b!61728 m!55037))

(assert (=> d!12019 d!12335))

(declare-fun e!40541 () Bool)

(declare-fun lt!25626 () List!1436)

(declare-fun b!61729 () Bool)

(assert (=> b!61729 (= e!40541 (contains!688 lt!25626 (tuple2!2033 (_1!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(declare-fun bm!4781 () Bool)

(declare-fun e!40539 () List!1436)

(declare-fun call!4784 () List!1436)

(declare-fun c!8148 () Bool)

(assert (=> bm!4781 (= call!4784 ($colon$colon!61 e!40539 (ite c!8148 (h!2014 (toList!700 lt!25003)) (tuple2!2033 (_1!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))))

(declare-fun c!8147 () Bool)

(assert (=> bm!4781 (= c!8147 c!8148)))

(declare-fun b!61730 () Bool)

(declare-fun e!40543 () List!1436)

(assert (=> b!61730 (= e!40543 call!4784)))

(declare-fun bm!4782 () Bool)

(declare-fun call!4786 () List!1436)

(declare-fun call!4785 () List!1436)

(assert (=> bm!4782 (= call!4786 call!4785)))

(declare-fun b!61731 () Bool)

(declare-fun e!40540 () List!1436)

(assert (=> b!61731 (= e!40540 call!4786)))

(declare-fun b!61732 () Bool)

(assert (=> b!61732 (= e!40539 (insertStrictlySorted!45 (t!4806 (toList!700 lt!25003)) (_1!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun bm!4783 () Bool)

(assert (=> bm!4783 (= call!4785 call!4784)))

(declare-fun b!61733 () Bool)

(assert (=> b!61733 (= e!40540 call!4786)))

(declare-fun d!12337 () Bool)

(assert (=> d!12337 e!40541))

(declare-fun res!33990 () Bool)

(assert (=> d!12337 (=> (not res!33990) (not e!40541))))

(assert (=> d!12337 (= res!33990 (isStrictlySorted!285 lt!25626))))

(assert (=> d!12337 (= lt!25626 e!40543)))

(assert (=> d!12337 (= c!8148 (and ((_ is Cons!1432) (toList!700 lt!25003)) (bvslt (_1!1027 (h!2014 (toList!700 lt!25003))) (_1!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (=> d!12337 (isStrictlySorted!285 (toList!700 lt!25003))))

(assert (=> d!12337 (= (insertStrictlySorted!45 (toList!700 lt!25003) (_1!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25626)))

(declare-fun b!61734 () Bool)

(declare-fun e!40542 () List!1436)

(assert (=> b!61734 (= e!40542 call!4785)))

(declare-fun b!61735 () Bool)

(declare-fun c!8150 () Bool)

(assert (=> b!61735 (= c!8150 (and ((_ is Cons!1432) (toList!700 lt!25003)) (bvsgt (_1!1027 (h!2014 (toList!700 lt!25003))) (_1!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (=> b!61735 (= e!40542 e!40540)))

(declare-fun b!61736 () Bool)

(declare-fun res!33991 () Bool)

(assert (=> b!61736 (=> (not res!33991) (not e!40541))))

(assert (=> b!61736 (= res!33991 (containsKey!129 lt!25626 (_1!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun b!61737 () Bool)

(assert (=> b!61737 (= e!40543 e!40542)))

(declare-fun c!8149 () Bool)

(assert (=> b!61737 (= c!8149 (and ((_ is Cons!1432) (toList!700 lt!25003)) (= (_1!1027 (h!2014 (toList!700 lt!25003))) (_1!1027 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(declare-fun b!61738 () Bool)

(assert (=> b!61738 (= e!40539 (ite c!8149 (t!4806 (toList!700 lt!25003)) (ite c!8150 (Cons!1432 (h!2014 (toList!700 lt!25003)) (t!4806 (toList!700 lt!25003))) Nil!1433)))))

(assert (= (and d!12337 c!8148) b!61730))

(assert (= (and d!12337 (not c!8148)) b!61737))

(assert (= (and b!61737 c!8149) b!61734))

(assert (= (and b!61737 (not c!8149)) b!61735))

(assert (= (and b!61735 c!8150) b!61733))

(assert (= (and b!61735 (not c!8150)) b!61731))

(assert (= (or b!61733 b!61731) bm!4782))

(assert (= (or b!61734 bm!4782) bm!4783))

(assert (= (or b!61730 bm!4783) bm!4781))

(assert (= (and bm!4781 c!8147) b!61732))

(assert (= (and bm!4781 (not c!8147)) b!61738))

(assert (= (and d!12337 res!33990) b!61736))

(assert (= (and b!61736 res!33991) b!61729))

(declare-fun m!55039 () Bool)

(assert (=> bm!4781 m!55039))

(declare-fun m!55041 () Bool)

(assert (=> b!61736 m!55041))

(declare-fun m!55043 () Bool)

(assert (=> d!12337 m!55043))

(declare-fun m!55045 () Bool)

(assert (=> d!12337 m!55045))

(declare-fun m!55047 () Bool)

(assert (=> b!61732 m!55047))

(declare-fun m!55049 () Bool)

(assert (=> b!61729 m!55049))

(assert (=> d!12019 d!12337))

(assert (=> b!60989 d!12109))

(declare-fun d!12339 () Bool)

(declare-fun e!40544 () Bool)

(assert (=> d!12339 e!40544))

(declare-fun res!33992 () Bool)

(assert (=> d!12339 (=> res!33992 e!40544)))

(declare-fun lt!25630 () Bool)

(assert (=> d!12339 (= res!33992 (not lt!25630))))

(declare-fun lt!25629 () Bool)

(assert (=> d!12339 (= lt!25630 lt!25629)))

(declare-fun lt!25628 () Unit!1625)

(declare-fun e!40545 () Unit!1625)

(assert (=> d!12339 (= lt!25628 e!40545)))

(declare-fun c!8151 () Bool)

(assert (=> d!12339 (= c!8151 lt!25629)))

(assert (=> d!12339 (= lt!25629 (containsKey!129 (toList!700 lt!25211) (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!12339 (= (contains!686 lt!25211 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) lt!25630)))

(declare-fun b!61739 () Bool)

(declare-fun lt!25627 () Unit!1625)

(assert (=> b!61739 (= e!40545 lt!25627)))

(assert (=> b!61739 (= lt!25627 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 lt!25211) (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61739 (isDefined!78 (getValueByKey!125 (toList!700 lt!25211) (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61740 () Bool)

(declare-fun Unit!1662 () Unit!1625)

(assert (=> b!61740 (= e!40545 Unit!1662)))

(declare-fun b!61741 () Bool)

(assert (=> b!61741 (= e!40544 (isDefined!78 (getValueByKey!125 (toList!700 lt!25211) (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!12339 c!8151) b!61739))

(assert (= (and d!12339 (not c!8151)) b!61740))

(assert (= (and d!12339 (not res!33992)) b!61741))

(assert (=> d!12339 m!53617))

(declare-fun m!55051 () Bool)

(assert (=> d!12339 m!55051))

(assert (=> b!61739 m!53617))

(declare-fun m!55053 () Bool)

(assert (=> b!61739 m!55053))

(assert (=> b!61739 m!53617))

(declare-fun m!55055 () Bool)

(assert (=> b!61739 m!55055))

(assert (=> b!61739 m!55055))

(declare-fun m!55057 () Bool)

(assert (=> b!61739 m!55057))

(assert (=> b!61741 m!53617))

(assert (=> b!61741 m!55055))

(assert (=> b!61741 m!55055))

(assert (=> b!61741 m!55057))

(assert (=> b!61190 d!12339))

(declare-fun b!61754 () Bool)

(declare-fun e!40554 () SeekEntryResult!228)

(assert (=> b!61754 (= e!40554 Undefined!228)))

(declare-fun b!61755 () Bool)

(declare-fun e!40552 () SeekEntryResult!228)

(assert (=> b!61755 (= e!40552 (Found!228 (index!3038 lt!25023)))))

(declare-fun b!61756 () Bool)

(declare-fun e!40553 () SeekEntryResult!228)

(assert (=> b!61756 (= e!40553 (MissingVacant!228 (index!3038 lt!25023)))))

(declare-fun lt!25636 () SeekEntryResult!228)

(declare-fun d!12341 () Bool)

(assert (=> d!12341 (and (or ((_ is Undefined!228) lt!25636) (not ((_ is Found!228) lt!25636)) (and (bvsge (index!3037 lt!25636) #b00000000000000000000000000000000) (bvslt (index!3037 lt!25636) (size!2024 (_keys!3695 newMap!16))))) (or ((_ is Undefined!228) lt!25636) ((_ is Found!228) lt!25636) (not ((_ is MissingVacant!228) lt!25636)) (not (= (index!3039 lt!25636) (index!3038 lt!25023))) (and (bvsge (index!3039 lt!25636) #b00000000000000000000000000000000) (bvslt (index!3039 lt!25636) (size!2024 (_keys!3695 newMap!16))))) (or ((_ is Undefined!228) lt!25636) (ite ((_ is Found!228) lt!25636) (= (select (arr!1793 (_keys!3695 newMap!16)) (index!3037 lt!25636)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (and ((_ is MissingVacant!228) lt!25636) (= (index!3039 lt!25636) (index!3038 lt!25023)) (= (select (arr!1793 (_keys!3695 newMap!16)) (index!3039 lt!25636)) #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (=> d!12341 (= lt!25636 e!40554)))

(declare-fun c!8158 () Bool)

(assert (=> d!12341 (= c!8158 (bvsge (x!10162 lt!25023) #b01111111111111111111111111111110))))

(declare-fun lt!25635 () (_ BitVec 64))

(assert (=> d!12341 (= lt!25635 (select (arr!1793 (_keys!3695 newMap!16)) (index!3038 lt!25023)))))

(assert (=> d!12341 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12341 (= (seekKeyOrZeroReturnVacant!0 (x!10162 lt!25023) (index!3038 lt!25023) (index!3038 lt!25023) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (_keys!3695 newMap!16) (mask!5963 newMap!16)) lt!25636)))

(declare-fun b!61757 () Bool)

(assert (=> b!61757 (= e!40554 e!40552)))

(declare-fun c!8160 () Bool)

(assert (=> b!61757 (= c!8160 (= lt!25635 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(declare-fun b!61758 () Bool)

(declare-fun c!8159 () Bool)

(assert (=> b!61758 (= c!8159 (= lt!25635 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61758 (= e!40552 e!40553)))

(declare-fun b!61759 () Bool)

(declare-fun nextIndex!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!61759 (= e!40553 (seekKeyOrZeroReturnVacant!0 (bvadd (x!10162 lt!25023) #b00000000000000000000000000000001) (nextIndex!0 (index!3038 lt!25023) (x!10162 lt!25023) (mask!5963 newMap!16)) (index!3038 lt!25023) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (_keys!3695 newMap!16) (mask!5963 newMap!16)))))

(assert (= (and d!12341 c!8158) b!61754))

(assert (= (and d!12341 (not c!8158)) b!61757))

(assert (= (and b!61757 c!8160) b!61755))

(assert (= (and b!61757 (not c!8160)) b!61758))

(assert (= (and b!61758 c!8159) b!61756))

(assert (= (and b!61758 (not c!8159)) b!61759))

(declare-fun m!55059 () Bool)

(assert (=> d!12341 m!55059))

(declare-fun m!55061 () Bool)

(assert (=> d!12341 m!55061))

(assert (=> d!12341 m!53569))

(assert (=> d!12341 m!53559))

(declare-fun m!55063 () Bool)

(assert (=> b!61759 m!55063))

(assert (=> b!61759 m!55063))

(assert (=> b!61759 m!53313))

(declare-fun m!55065 () Bool)

(assert (=> b!61759 m!55065))

(assert (=> b!60924 d!12341))

(declare-fun d!12343 () Bool)

(declare-fun e!40555 () Bool)

(assert (=> d!12343 e!40555))

(declare-fun res!33993 () Bool)

(assert (=> d!12343 (=> (not res!33993) (not e!40555))))

(declare-fun lt!25638 () ListLongMap!1369)

(assert (=> d!12343 (= res!33993 (contains!686 lt!25638 (_1!1027 (tuple2!2033 lt!25175 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))))))

(declare-fun lt!25639 () List!1436)

(assert (=> d!12343 (= lt!25638 (ListLongMap!1370 lt!25639))))

(declare-fun lt!25637 () Unit!1625)

(declare-fun lt!25640 () Unit!1625)

(assert (=> d!12343 (= lt!25637 lt!25640)))

(assert (=> d!12343 (= (getValueByKey!125 lt!25639 (_1!1027 (tuple2!2033 lt!25175 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))) (Some!130 (_2!1027 (tuple2!2033 lt!25175 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))))))

(assert (=> d!12343 (= lt!25640 (lemmaContainsTupThenGetReturnValue!42 lt!25639 (_1!1027 (tuple2!2033 lt!25175 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))) (_2!1027 (tuple2!2033 lt!25175 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))))))

(assert (=> d!12343 (= lt!25639 (insertStrictlySorted!45 (toList!700 lt!25177) (_1!1027 (tuple2!2033 lt!25175 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))) (_2!1027 (tuple2!2033 lt!25175 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))))))

(assert (=> d!12343 (= (+!82 lt!25177 (tuple2!2033 lt!25175 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))) lt!25638)))

(declare-fun b!61760 () Bool)

(declare-fun res!33994 () Bool)

(assert (=> b!61760 (=> (not res!33994) (not e!40555))))

(assert (=> b!61760 (= res!33994 (= (getValueByKey!125 (toList!700 lt!25638) (_1!1027 (tuple2!2033 lt!25175 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))) (Some!130 (_2!1027 (tuple2!2033 lt!25175 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))))))))

(declare-fun b!61761 () Bool)

(assert (=> b!61761 (= e!40555 (contains!688 (toList!700 lt!25638) (tuple2!2033 lt!25175 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))))))

(assert (= (and d!12343 res!33993) b!61760))

(assert (= (and b!61760 res!33994) b!61761))

(declare-fun m!55067 () Bool)

(assert (=> d!12343 m!55067))

(declare-fun m!55069 () Bool)

(assert (=> d!12343 m!55069))

(declare-fun m!55071 () Bool)

(assert (=> d!12343 m!55071))

(declare-fun m!55073 () Bool)

(assert (=> d!12343 m!55073))

(declare-fun m!55075 () Bool)

(assert (=> b!61760 m!55075))

(declare-fun m!55077 () Bool)

(assert (=> b!61761 m!55077))

(assert (=> b!61139 d!12343))

(declare-fun d!12345 () Bool)

(assert (=> d!12345 (= (apply!67 lt!25172 lt!25181) (get!1078 (getValueByKey!125 (toList!700 lt!25172) lt!25181)))))

(declare-fun bs!2681 () Bool)

(assert (= bs!2681 d!12345))

(declare-fun m!55079 () Bool)

(assert (=> bs!2681 m!55079))

(assert (=> bs!2681 m!55079))

(declare-fun m!55081 () Bool)

(assert (=> bs!2681 m!55081))

(assert (=> b!61139 d!12345))

(declare-fun d!12347 () Bool)

(declare-fun e!40556 () Bool)

(assert (=> d!12347 e!40556))

(declare-fun res!33995 () Bool)

(assert (=> d!12347 (=> (not res!33995) (not e!40556))))

(declare-fun lt!25642 () ListLongMap!1369)

(assert (=> d!12347 (= res!33995 (contains!686 lt!25642 (_1!1027 (tuple2!2033 lt!25182 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))))))

(declare-fun lt!25643 () List!1436)

(assert (=> d!12347 (= lt!25642 (ListLongMap!1370 lt!25643))))

(declare-fun lt!25641 () Unit!1625)

(declare-fun lt!25644 () Unit!1625)

(assert (=> d!12347 (= lt!25641 lt!25644)))

(assert (=> d!12347 (= (getValueByKey!125 lt!25643 (_1!1027 (tuple2!2033 lt!25182 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))) (Some!130 (_2!1027 (tuple2!2033 lt!25182 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))))))

(assert (=> d!12347 (= lt!25644 (lemmaContainsTupThenGetReturnValue!42 lt!25643 (_1!1027 (tuple2!2033 lt!25182 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))) (_2!1027 (tuple2!2033 lt!25182 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))))))

(assert (=> d!12347 (= lt!25643 (insertStrictlySorted!45 (toList!700 lt!25172) (_1!1027 (tuple2!2033 lt!25182 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))) (_2!1027 (tuple2!2033 lt!25182 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))))))

(assert (=> d!12347 (= (+!82 lt!25172 (tuple2!2033 lt!25182 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))) lt!25642)))

(declare-fun b!61762 () Bool)

(declare-fun res!33996 () Bool)

(assert (=> b!61762 (=> (not res!33996) (not e!40556))))

(assert (=> b!61762 (= res!33996 (= (getValueByKey!125 (toList!700 lt!25642) (_1!1027 (tuple2!2033 lt!25182 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))) (Some!130 (_2!1027 (tuple2!2033 lt!25182 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))))))))

(declare-fun b!61763 () Bool)

(assert (=> b!61763 (= e!40556 (contains!688 (toList!700 lt!25642) (tuple2!2033 lt!25182 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))))))

(assert (= (and d!12347 res!33995) b!61762))

(assert (= (and b!61762 res!33996) b!61763))

(declare-fun m!55083 () Bool)

(assert (=> d!12347 m!55083))

(declare-fun m!55085 () Bool)

(assert (=> d!12347 m!55085))

(declare-fun m!55087 () Bool)

(assert (=> d!12347 m!55087))

(declare-fun m!55089 () Bool)

(assert (=> d!12347 m!55089))

(declare-fun m!55091 () Bool)

(assert (=> b!61762 m!55091))

(declare-fun m!55093 () Bool)

(assert (=> b!61763 m!55093))

(assert (=> b!61139 d!12347))

(declare-fun b!61764 () Bool)

(declare-fun e!40558 () Bool)

(declare-fun e!40563 () Bool)

(assert (=> b!61764 (= e!40558 e!40563)))

(assert (=> b!61764 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(declare-fun res!33997 () Bool)

(declare-fun lt!25645 () ListLongMap!1369)

(assert (=> b!61764 (= res!33997 (contains!686 lt!25645 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61764 (=> (not res!33997) (not e!40563))))

(declare-fun b!61765 () Bool)

(declare-fun e!40560 () Bool)

(assert (=> b!61765 (= e!40558 e!40560)))

(declare-fun c!8164 () Bool)

(assert (=> b!61765 (= c!8164 (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(declare-fun b!61766 () Bool)

(assert (=> b!61766 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(assert (=> b!61766 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2025 (ite (or c!7909 c!7902) (_values!2050 newMap!16) lt!24925))))))

(assert (=> b!61766 (= e!40563 (= (apply!67 lt!25645 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) (get!1075 (select (arr!1794 (ite (or c!7909 c!7902) (_values!2050 newMap!16) lt!24925)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!12349 () Bool)

(declare-fun e!40562 () Bool)

(assert (=> d!12349 e!40562))

(declare-fun res!33999 () Bool)

(assert (=> d!12349 (=> (not res!33999) (not e!40562))))

(assert (=> d!12349 (= res!33999 (not (contains!686 lt!25645 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!40557 () ListLongMap!1369)

(assert (=> d!12349 (= lt!25645 e!40557)))

(declare-fun c!8163 () Bool)

(assert (=> d!12349 (= c!8163 (bvsge #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(assert (=> d!12349 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12349 (= (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (ite (or c!7909 c!7902) (_values!2050 newMap!16) lt!24925) (mask!5963 newMap!16) (ite c!7909 (ite c!7899 (extraKeys!1950 newMap!16) lt!24937) (extraKeys!1950 newMap!16)) (zeroValue!1981 newMap!16) (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) lt!25645)))

(declare-fun b!61767 () Bool)

(assert (=> b!61767 (= e!40562 e!40558)))

(declare-fun c!8161 () Bool)

(declare-fun e!40559 () Bool)

(assert (=> b!61767 (= c!8161 e!40559)))

(declare-fun res!33998 () Bool)

(assert (=> b!61767 (=> (not res!33998) (not e!40559))))

(assert (=> b!61767 (= res!33998 (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(declare-fun b!61768 () Bool)

(declare-fun e!40561 () ListLongMap!1369)

(assert (=> b!61768 (= e!40557 e!40561)))

(declare-fun c!8162 () Bool)

(assert (=> b!61768 (= c!8162 (validKeyInArray!0 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61769 () Bool)

(assert (=> b!61769 (= e!40560 (= lt!25645 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (ite (or c!7909 c!7902) (_values!2050 newMap!16) lt!24925) (mask!5963 newMap!16) (ite c!7909 (ite c!7899 (extraKeys!1950 newMap!16) lt!24937) (extraKeys!1950 newMap!16)) (zeroValue!1981 newMap!16) (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2067 newMap!16))))))

(declare-fun b!61770 () Bool)

(declare-fun call!4787 () ListLongMap!1369)

(assert (=> b!61770 (= e!40561 call!4787)))

(declare-fun bm!4784 () Bool)

(assert (=> bm!4784 (= call!4787 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (ite (or c!7909 c!7902) (_values!2050 newMap!16) lt!24925) (mask!5963 newMap!16) (ite c!7909 (ite c!7899 (extraKeys!1950 newMap!16) lt!24937) (extraKeys!1950 newMap!16)) (zeroValue!1981 newMap!16) (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2067 newMap!16)))))

(declare-fun b!61771 () Bool)

(assert (=> b!61771 (= e!40559 (validKeyInArray!0 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61771 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!61772 () Bool)

(assert (=> b!61772 (= e!40557 (ListLongMap!1370 Nil!1433))))

(declare-fun b!61773 () Bool)

(declare-fun res!34000 () Bool)

(assert (=> b!61773 (=> (not res!34000) (not e!40562))))

(assert (=> b!61773 (= res!34000 (not (contains!686 lt!25645 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!61774 () Bool)

(assert (=> b!61774 (= e!40560 (isEmpty!296 lt!25645))))

(declare-fun b!61775 () Bool)

(declare-fun lt!25651 () Unit!1625)

(declare-fun lt!25647 () Unit!1625)

(assert (=> b!61775 (= lt!25651 lt!25647)))

(declare-fun lt!25648 () ListLongMap!1369)

(declare-fun lt!25649 () V!2859)

(declare-fun lt!25646 () (_ BitVec 64))

(declare-fun lt!25650 () (_ BitVec 64))

(assert (=> b!61775 (not (contains!686 (+!82 lt!25648 (tuple2!2033 lt!25646 lt!25649)) lt!25650))))

(assert (=> b!61775 (= lt!25647 (addStillNotContains!16 lt!25648 lt!25646 lt!25649 lt!25650))))

(assert (=> b!61775 (= lt!25650 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!61775 (= lt!25649 (get!1075 (select (arr!1794 (ite (or c!7909 c!7902) (_values!2050 newMap!16) lt!24925)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!61775 (= lt!25646 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!61775 (= lt!25648 call!4787)))

(assert (=> b!61775 (= e!40561 (+!82 call!4787 (tuple2!2033 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000) (get!1075 (select (arr!1794 (ite (or c!7909 c!7902) (_values!2050 newMap!16) lt!24925)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12349 c!8163) b!61772))

(assert (= (and d!12349 (not c!8163)) b!61768))

(assert (= (and b!61768 c!8162) b!61775))

(assert (= (and b!61768 (not c!8162)) b!61770))

(assert (= (or b!61775 b!61770) bm!4784))

(assert (= (and d!12349 res!33999) b!61773))

(assert (= (and b!61773 res!34000) b!61767))

(assert (= (and b!61767 res!33998) b!61771))

(assert (= (and b!61767 c!8161) b!61764))

(assert (= (and b!61767 (not c!8161)) b!61765))

(assert (= (and b!61764 res!33997) b!61766))

(assert (= (and b!61765 c!8164) b!61769))

(assert (= (and b!61765 (not c!8164)) b!61774))

(declare-fun b_lambda!2745 () Bool)

(assert (=> (not b_lambda!2745) (not b!61766)))

(assert (=> b!61766 t!4813))

(declare-fun b_and!3787 () Bool)

(assert (= b_and!3783 (and (=> t!4813 result!2427) b_and!3787)))

(assert (=> b!61766 t!4815))

(declare-fun b_and!3789 () Bool)

(assert (= b_and!3785 (and (=> t!4815 result!2429) b_and!3789)))

(declare-fun b_lambda!2747 () Bool)

(assert (=> (not b_lambda!2747) (not b!61775)))

(assert (=> b!61775 t!4813))

(declare-fun b_and!3791 () Bool)

(assert (= b_and!3787 (and (=> t!4813 result!2427) b_and!3791)))

(assert (=> b!61775 t!4815))

(declare-fun b_and!3793 () Bool)

(assert (= b_and!3789 (and (=> t!4815 result!2429) b_and!3793)))

(assert (=> b!61768 m!53617))

(assert (=> b!61768 m!53617))

(assert (=> b!61768 m!53641))

(declare-fun m!55095 () Bool)

(assert (=> b!61775 m!55095))

(declare-fun m!55097 () Bool)

(assert (=> b!61775 m!55097))

(declare-fun m!55099 () Bool)

(assert (=> b!61775 m!55099))

(assert (=> b!61775 m!53647))

(assert (=> b!61775 m!53617))

(assert (=> b!61775 m!53955))

(assert (=> b!61775 m!55097))

(declare-fun m!55101 () Bool)

(assert (=> b!61775 m!55101))

(assert (=> b!61775 m!53955))

(assert (=> b!61775 m!53647))

(assert (=> b!61775 m!53957))

(declare-fun m!55103 () Bool)

(assert (=> b!61773 m!55103))

(declare-fun m!55105 () Bool)

(assert (=> d!12349 m!55105))

(assert (=> d!12349 m!53559))

(assert (=> b!61764 m!53617))

(assert (=> b!61764 m!53617))

(declare-fun m!55107 () Bool)

(assert (=> b!61764 m!55107))

(declare-fun m!55109 () Bool)

(assert (=> b!61774 m!55109))

(declare-fun m!55111 () Bool)

(assert (=> b!61769 m!55111))

(assert (=> bm!4784 m!55111))

(assert (=> b!61771 m!53617))

(assert (=> b!61771 m!53617))

(assert (=> b!61771 m!53641))

(assert (=> b!61766 m!53647))

(assert (=> b!61766 m!53617))

(assert (=> b!61766 m!53955))

(assert (=> b!61766 m!53955))

(assert (=> b!61766 m!53647))

(assert (=> b!61766 m!53957))

(assert (=> b!61766 m!53617))

(declare-fun m!55113 () Bool)

(assert (=> b!61766 m!55113))

(assert (=> b!61139 d!12349))

(declare-fun d!12351 () Bool)

(declare-fun e!40564 () Bool)

(assert (=> d!12351 e!40564))

(declare-fun res!34001 () Bool)

(assert (=> d!12351 (=> res!34001 e!40564)))

(declare-fun lt!25655 () Bool)

(assert (=> d!12351 (= res!34001 (not lt!25655))))

(declare-fun lt!25654 () Bool)

(assert (=> d!12351 (= lt!25655 lt!25654)))

(declare-fun lt!25653 () Unit!1625)

(declare-fun e!40565 () Unit!1625)

(assert (=> d!12351 (= lt!25653 e!40565)))

(declare-fun c!8165 () Bool)

(assert (=> d!12351 (= c!8165 lt!25654)))

(assert (=> d!12351 (= lt!25654 (containsKey!129 (toList!700 (+!82 lt!25180 (tuple2!2033 lt!25170 (zeroValue!1981 newMap!16)))) lt!25183))))

(assert (=> d!12351 (= (contains!686 (+!82 lt!25180 (tuple2!2033 lt!25170 (zeroValue!1981 newMap!16))) lt!25183) lt!25655)))

(declare-fun b!61776 () Bool)

(declare-fun lt!25652 () Unit!1625)

(assert (=> b!61776 (= e!40565 lt!25652)))

(assert (=> b!61776 (= lt!25652 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 (+!82 lt!25180 (tuple2!2033 lt!25170 (zeroValue!1981 newMap!16)))) lt!25183))))

(assert (=> b!61776 (isDefined!78 (getValueByKey!125 (toList!700 (+!82 lt!25180 (tuple2!2033 lt!25170 (zeroValue!1981 newMap!16)))) lt!25183))))

(declare-fun b!61777 () Bool)

(declare-fun Unit!1663 () Unit!1625)

(assert (=> b!61777 (= e!40565 Unit!1663)))

(declare-fun b!61778 () Bool)

(assert (=> b!61778 (= e!40564 (isDefined!78 (getValueByKey!125 (toList!700 (+!82 lt!25180 (tuple2!2033 lt!25170 (zeroValue!1981 newMap!16)))) lt!25183)))))

(assert (= (and d!12351 c!8165) b!61776))

(assert (= (and d!12351 (not c!8165)) b!61777))

(assert (= (and d!12351 (not res!34001)) b!61778))

(declare-fun m!55115 () Bool)

(assert (=> d!12351 m!55115))

(declare-fun m!55117 () Bool)

(assert (=> b!61776 m!55117))

(declare-fun m!55119 () Bool)

(assert (=> b!61776 m!55119))

(assert (=> b!61776 m!55119))

(declare-fun m!55121 () Bool)

(assert (=> b!61776 m!55121))

(assert (=> b!61778 m!55119))

(assert (=> b!61778 m!55119))

(assert (=> b!61778 m!55121))

(assert (=> b!61139 d!12351))

(declare-fun d!12353 () Bool)

(assert (=> d!12353 (= (apply!67 lt!25184 lt!25179) (get!1078 (getValueByKey!125 (toList!700 lt!25184) lt!25179)))))

(declare-fun bs!2682 () Bool)

(assert (= bs!2682 d!12353))

(declare-fun m!55123 () Bool)

(assert (=> bs!2682 m!55123))

(assert (=> bs!2682 m!55123))

(declare-fun m!55125 () Bool)

(assert (=> bs!2682 m!55125))

(assert (=> b!61139 d!12353))

(declare-fun d!12355 () Bool)

(assert (=> d!12355 (= (apply!67 (+!82 lt!25177 (tuple2!2033 lt!25175 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))) lt!25189) (get!1078 (getValueByKey!125 (toList!700 (+!82 lt!25177 (tuple2!2033 lt!25175 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))) lt!25189)))))

(declare-fun bs!2683 () Bool)

(assert (= bs!2683 d!12355))

(declare-fun m!55127 () Bool)

(assert (=> bs!2683 m!55127))

(assert (=> bs!2683 m!55127))

(declare-fun m!55129 () Bool)

(assert (=> bs!2683 m!55129))

(assert (=> b!61139 d!12355))

(declare-fun d!12357 () Bool)

(assert (=> d!12357 (= (apply!67 (+!82 lt!25184 (tuple2!2033 lt!25171 (zeroValue!1981 newMap!16))) lt!25179) (get!1078 (getValueByKey!125 (toList!700 (+!82 lt!25184 (tuple2!2033 lt!25171 (zeroValue!1981 newMap!16)))) lt!25179)))))

(declare-fun bs!2684 () Bool)

(assert (= bs!2684 d!12357))

(declare-fun m!55131 () Bool)

(assert (=> bs!2684 m!55131))

(assert (=> bs!2684 m!55131))

(declare-fun m!55133 () Bool)

(assert (=> bs!2684 m!55133))

(assert (=> b!61139 d!12357))

(declare-fun d!12359 () Bool)

(assert (=> d!12359 (= (apply!67 (+!82 lt!25177 (tuple2!2033 lt!25175 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))) lt!25189) (apply!67 lt!25177 lt!25189))))

(declare-fun lt!25656 () Unit!1625)

(assert (=> d!12359 (= lt!25656 (choose!318 lt!25177 lt!25175 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)) lt!25189))))

(declare-fun e!40566 () Bool)

(assert (=> d!12359 e!40566))

(declare-fun res!34002 () Bool)

(assert (=> d!12359 (=> (not res!34002) (not e!40566))))

(assert (=> d!12359 (= res!34002 (contains!686 lt!25177 lt!25189))))

(assert (=> d!12359 (= (addApplyDifferent!43 lt!25177 lt!25175 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)) lt!25189) lt!25656)))

(declare-fun b!61779 () Bool)

(assert (=> b!61779 (= e!40566 (not (= lt!25189 lt!25175)))))

(assert (= (and d!12359 res!34002) b!61779))

(assert (=> d!12359 m!53945))

(assert (=> d!12359 m!53937))

(declare-fun m!55135 () Bool)

(assert (=> d!12359 m!55135))

(assert (=> d!12359 m!53937))

(assert (=> d!12359 m!53949))

(declare-fun m!55137 () Bool)

(assert (=> d!12359 m!55137))

(assert (=> b!61139 d!12359))

(declare-fun d!12361 () Bool)

(assert (=> d!12361 (= (apply!67 lt!25177 lt!25189) (get!1078 (getValueByKey!125 (toList!700 lt!25177) lt!25189)))))

(declare-fun bs!2685 () Bool)

(assert (= bs!2685 d!12361))

(declare-fun m!55139 () Bool)

(assert (=> bs!2685 m!55139))

(assert (=> bs!2685 m!55139))

(declare-fun m!55141 () Bool)

(assert (=> bs!2685 m!55141))

(assert (=> b!61139 d!12361))

(declare-fun d!12363 () Bool)

(assert (=> d!12363 (= (apply!67 (+!82 lt!25172 (tuple2!2033 lt!25182 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))) lt!25181) (get!1078 (getValueByKey!125 (toList!700 (+!82 lt!25172 (tuple2!2033 lt!25182 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))) lt!25181)))))

(declare-fun bs!2686 () Bool)

(assert (= bs!2686 d!12363))

(declare-fun m!55143 () Bool)

(assert (=> bs!2686 m!55143))

(assert (=> bs!2686 m!55143))

(declare-fun m!55145 () Bool)

(assert (=> bs!2686 m!55145))

(assert (=> b!61139 d!12363))

(declare-fun d!12365 () Bool)

(declare-fun e!40567 () Bool)

(assert (=> d!12365 e!40567))

(declare-fun res!34003 () Bool)

(assert (=> d!12365 (=> (not res!34003) (not e!40567))))

(declare-fun lt!25658 () ListLongMap!1369)

(assert (=> d!12365 (= res!34003 (contains!686 lt!25658 (_1!1027 (tuple2!2033 lt!25171 (zeroValue!1981 newMap!16)))))))

(declare-fun lt!25659 () List!1436)

(assert (=> d!12365 (= lt!25658 (ListLongMap!1370 lt!25659))))

(declare-fun lt!25657 () Unit!1625)

(declare-fun lt!25660 () Unit!1625)

(assert (=> d!12365 (= lt!25657 lt!25660)))

(assert (=> d!12365 (= (getValueByKey!125 lt!25659 (_1!1027 (tuple2!2033 lt!25171 (zeroValue!1981 newMap!16)))) (Some!130 (_2!1027 (tuple2!2033 lt!25171 (zeroValue!1981 newMap!16)))))))

(assert (=> d!12365 (= lt!25660 (lemmaContainsTupThenGetReturnValue!42 lt!25659 (_1!1027 (tuple2!2033 lt!25171 (zeroValue!1981 newMap!16))) (_2!1027 (tuple2!2033 lt!25171 (zeroValue!1981 newMap!16)))))))

(assert (=> d!12365 (= lt!25659 (insertStrictlySorted!45 (toList!700 lt!25184) (_1!1027 (tuple2!2033 lt!25171 (zeroValue!1981 newMap!16))) (_2!1027 (tuple2!2033 lt!25171 (zeroValue!1981 newMap!16)))))))

(assert (=> d!12365 (= (+!82 lt!25184 (tuple2!2033 lt!25171 (zeroValue!1981 newMap!16))) lt!25658)))

(declare-fun b!61780 () Bool)

(declare-fun res!34004 () Bool)

(assert (=> b!61780 (=> (not res!34004) (not e!40567))))

(assert (=> b!61780 (= res!34004 (= (getValueByKey!125 (toList!700 lt!25658) (_1!1027 (tuple2!2033 lt!25171 (zeroValue!1981 newMap!16)))) (Some!130 (_2!1027 (tuple2!2033 lt!25171 (zeroValue!1981 newMap!16))))))))

(declare-fun b!61781 () Bool)

(assert (=> b!61781 (= e!40567 (contains!688 (toList!700 lt!25658) (tuple2!2033 lt!25171 (zeroValue!1981 newMap!16))))))

(assert (= (and d!12365 res!34003) b!61780))

(assert (= (and b!61780 res!34004) b!61781))

(declare-fun m!55147 () Bool)

(assert (=> d!12365 m!55147))

(declare-fun m!55149 () Bool)

(assert (=> d!12365 m!55149))

(declare-fun m!55151 () Bool)

(assert (=> d!12365 m!55151))

(declare-fun m!55153 () Bool)

(assert (=> d!12365 m!55153))

(declare-fun m!55155 () Bool)

(assert (=> b!61780 m!55155))

(declare-fun m!55157 () Bool)

(assert (=> b!61781 m!55157))

(assert (=> b!61139 d!12365))

(declare-fun d!12367 () Bool)

(assert (=> d!12367 (= (apply!67 (+!82 lt!25172 (tuple2!2033 lt!25182 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))) lt!25181) (apply!67 lt!25172 lt!25181))))

(declare-fun lt!25661 () Unit!1625)

(assert (=> d!12367 (= lt!25661 (choose!318 lt!25172 lt!25182 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)) lt!25181))))

(declare-fun e!40568 () Bool)

(assert (=> d!12367 e!40568))

(declare-fun res!34005 () Bool)

(assert (=> d!12367 (=> (not res!34005) (not e!40568))))

(assert (=> d!12367 (= res!34005 (contains!686 lt!25172 lt!25181))))

(assert (=> d!12367 (= (addApplyDifferent!43 lt!25172 lt!25182 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)) lt!25181) lt!25661)))

(declare-fun b!61782 () Bool)

(assert (=> b!61782 (= e!40568 (not (= lt!25181 lt!25182)))))

(assert (= (and d!12367 res!34005) b!61782))

(assert (=> d!12367 m!53943))

(assert (=> d!12367 m!53933))

(declare-fun m!55159 () Bool)

(assert (=> d!12367 m!55159))

(assert (=> d!12367 m!53933))

(assert (=> d!12367 m!53941))

(declare-fun m!55161 () Bool)

(assert (=> d!12367 m!55161))

(assert (=> b!61139 d!12367))

(declare-fun d!12369 () Bool)

(assert (=> d!12369 (contains!686 (+!82 lt!25180 (tuple2!2033 lt!25170 (zeroValue!1981 newMap!16))) lt!25183)))

(declare-fun lt!25662 () Unit!1625)

(assert (=> d!12369 (= lt!25662 (choose!319 lt!25180 lt!25170 (zeroValue!1981 newMap!16) lt!25183))))

(assert (=> d!12369 (contains!686 lt!25180 lt!25183)))

(assert (=> d!12369 (= (addStillContains!43 lt!25180 lt!25170 (zeroValue!1981 newMap!16) lt!25183) lt!25662)))

(declare-fun bs!2687 () Bool)

(assert (= bs!2687 d!12369))

(assert (=> bs!2687 m!53921))

(assert (=> bs!2687 m!53921))

(assert (=> bs!2687 m!53923))

(declare-fun m!55163 () Bool)

(assert (=> bs!2687 m!55163))

(declare-fun m!55165 () Bool)

(assert (=> bs!2687 m!55165))

(assert (=> b!61139 d!12369))

(declare-fun d!12371 () Bool)

(assert (=> d!12371 (= (apply!67 (+!82 lt!25184 (tuple2!2033 lt!25171 (zeroValue!1981 newMap!16))) lt!25179) (apply!67 lt!25184 lt!25179))))

(declare-fun lt!25663 () Unit!1625)

(assert (=> d!12371 (= lt!25663 (choose!318 lt!25184 lt!25171 (zeroValue!1981 newMap!16) lt!25179))))

(declare-fun e!40569 () Bool)

(assert (=> d!12371 e!40569))

(declare-fun res!34006 () Bool)

(assert (=> d!12371 (=> (not res!34006) (not e!40569))))

(assert (=> d!12371 (= res!34006 (contains!686 lt!25184 lt!25179))))

(assert (=> d!12371 (= (addApplyDifferent!43 lt!25184 lt!25171 (zeroValue!1981 newMap!16) lt!25179) lt!25663)))

(declare-fun b!61783 () Bool)

(assert (=> b!61783 (= e!40569 (not (= lt!25179 lt!25171)))))

(assert (= (and d!12371 res!34006) b!61783))

(assert (=> d!12371 m!53931))

(assert (=> d!12371 m!53925))

(declare-fun m!55167 () Bool)

(assert (=> d!12371 m!55167))

(assert (=> d!12371 m!53925))

(assert (=> d!12371 m!53927))

(declare-fun m!55169 () Bool)

(assert (=> d!12371 m!55169))

(assert (=> b!61139 d!12371))

(declare-fun d!12373 () Bool)

(declare-fun e!40570 () Bool)

(assert (=> d!12373 e!40570))

(declare-fun res!34007 () Bool)

(assert (=> d!12373 (=> (not res!34007) (not e!40570))))

(declare-fun lt!25665 () ListLongMap!1369)

(assert (=> d!12373 (= res!34007 (contains!686 lt!25665 (_1!1027 (tuple2!2033 lt!25170 (zeroValue!1981 newMap!16)))))))

(declare-fun lt!25666 () List!1436)

(assert (=> d!12373 (= lt!25665 (ListLongMap!1370 lt!25666))))

(declare-fun lt!25664 () Unit!1625)

(declare-fun lt!25667 () Unit!1625)

(assert (=> d!12373 (= lt!25664 lt!25667)))

(assert (=> d!12373 (= (getValueByKey!125 lt!25666 (_1!1027 (tuple2!2033 lt!25170 (zeroValue!1981 newMap!16)))) (Some!130 (_2!1027 (tuple2!2033 lt!25170 (zeroValue!1981 newMap!16)))))))

(assert (=> d!12373 (= lt!25667 (lemmaContainsTupThenGetReturnValue!42 lt!25666 (_1!1027 (tuple2!2033 lt!25170 (zeroValue!1981 newMap!16))) (_2!1027 (tuple2!2033 lt!25170 (zeroValue!1981 newMap!16)))))))

(assert (=> d!12373 (= lt!25666 (insertStrictlySorted!45 (toList!700 lt!25180) (_1!1027 (tuple2!2033 lt!25170 (zeroValue!1981 newMap!16))) (_2!1027 (tuple2!2033 lt!25170 (zeroValue!1981 newMap!16)))))))

(assert (=> d!12373 (= (+!82 lt!25180 (tuple2!2033 lt!25170 (zeroValue!1981 newMap!16))) lt!25665)))

(declare-fun b!61784 () Bool)

(declare-fun res!34008 () Bool)

(assert (=> b!61784 (=> (not res!34008) (not e!40570))))

(assert (=> b!61784 (= res!34008 (= (getValueByKey!125 (toList!700 lt!25665) (_1!1027 (tuple2!2033 lt!25170 (zeroValue!1981 newMap!16)))) (Some!130 (_2!1027 (tuple2!2033 lt!25170 (zeroValue!1981 newMap!16))))))))

(declare-fun b!61785 () Bool)

(assert (=> b!61785 (= e!40570 (contains!688 (toList!700 lt!25665) (tuple2!2033 lt!25170 (zeroValue!1981 newMap!16))))))

(assert (= (and d!12373 res!34007) b!61784))

(assert (= (and b!61784 res!34008) b!61785))

(declare-fun m!55171 () Bool)

(assert (=> d!12373 m!55171))

(declare-fun m!55173 () Bool)

(assert (=> d!12373 m!55173))

(declare-fun m!55175 () Bool)

(assert (=> d!12373 m!55175))

(declare-fun m!55177 () Bool)

(assert (=> d!12373 m!55177))

(declare-fun m!55179 () Bool)

(assert (=> b!61784 m!55179))

(declare-fun m!55181 () Bool)

(assert (=> b!61785 m!55181))

(assert (=> b!61139 d!12373))

(declare-fun d!12375 () Bool)

(declare-fun e!40571 () Bool)

(assert (=> d!12375 e!40571))

(declare-fun res!34009 () Bool)

(assert (=> d!12375 (=> (not res!34009) (not e!40571))))

(declare-fun lt!25669 () ListLongMap!1369)

(assert (=> d!12375 (= res!34009 (contains!686 lt!25669 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(declare-fun lt!25670 () List!1436)

(assert (=> d!12375 (= lt!25669 (ListLongMap!1370 lt!25670))))

(declare-fun lt!25668 () Unit!1625)

(declare-fun lt!25671 () Unit!1625)

(assert (=> d!12375 (= lt!25668 lt!25671)))

(assert (=> d!12375 (= (getValueByKey!125 lt!25670 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))) (Some!130 (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(assert (=> d!12375 (= lt!25671 (lemmaContainsTupThenGetReturnValue!42 lt!25670 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(assert (=> d!12375 (= lt!25670 (insertStrictlySorted!45 (toList!700 call!4681) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(assert (=> d!12375 (= (+!82 call!4681 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))) lt!25669)))

(declare-fun b!61786 () Bool)

(declare-fun res!34010 () Bool)

(assert (=> b!61786 (=> (not res!34010) (not e!40571))))

(assert (=> b!61786 (= res!34010 (= (getValueByKey!125 (toList!700 lt!25669) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))) (Some!130 (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))))

(declare-fun b!61787 () Bool)

(assert (=> b!61787 (= e!40571 (contains!688 (toList!700 lt!25669) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))

(assert (= (and d!12375 res!34009) b!61786))

(assert (= (and b!61786 res!34010) b!61787))

(declare-fun m!55183 () Bool)

(assert (=> d!12375 m!55183))

(declare-fun m!55185 () Bool)

(assert (=> d!12375 m!55185))

(declare-fun m!55187 () Bool)

(assert (=> d!12375 m!55187))

(declare-fun m!55189 () Bool)

(assert (=> d!12375 m!55189))

(declare-fun m!55191 () Bool)

(assert (=> b!61786 m!55191))

(declare-fun m!55193 () Bool)

(assert (=> b!61787 m!55193))

(assert (=> b!60993 d!12375))

(declare-fun b!61788 () Bool)

(declare-fun e!40572 () Option!131)

(assert (=> b!61788 (= e!40572 (Some!130 (_2!1027 (h!2014 (t!4806 (toList!700 lt!24826))))))))

(declare-fun d!12377 () Bool)

(declare-fun c!8166 () Bool)

(assert (=> d!12377 (= c!8166 (and ((_ is Cons!1432) (t!4806 (toList!700 lt!24826))) (= (_1!1027 (h!2014 (t!4806 (toList!700 lt!24826)))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355))))))

(assert (=> d!12377 (= (getValueByKey!125 (t!4806 (toList!700 lt!24826)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) e!40572)))

(declare-fun b!61789 () Bool)

(declare-fun e!40573 () Option!131)

(assert (=> b!61789 (= e!40572 e!40573)))

(declare-fun c!8167 () Bool)

(assert (=> b!61789 (= c!8167 (and ((_ is Cons!1432) (t!4806 (toList!700 lt!24826))) (not (= (_1!1027 (h!2014 (t!4806 (toList!700 lt!24826)))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))))

(declare-fun b!61791 () Bool)

(assert (=> b!61791 (= e!40573 None!129)))

(declare-fun b!61790 () Bool)

(assert (=> b!61790 (= e!40573 (getValueByKey!125 (t!4806 (t!4806 (toList!700 lt!24826))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(assert (= (and d!12377 c!8166) b!61788))

(assert (= (and d!12377 (not c!8166)) b!61789))

(assert (= (and b!61789 c!8167) b!61790))

(assert (= (and b!61789 (not c!8167)) b!61791))

(assert (=> b!61790 m!53313))

(declare-fun m!55195 () Bool)

(assert (=> b!61790 m!55195))

(assert (=> b!61122 d!12377))

(declare-fun e!40580 () Bool)

(declare-fun b!61792 () Bool)

(assert (=> b!61792 (= e!40580 (validKeyInArray!0 (select (arr!1793 (_keys!3695 (ite c!7904 newMap!16 (_2!1026 lt!24941)))) #b00000000000000000000000000000000)))))

(declare-fun b!61793 () Bool)

(declare-fun res!34011 () Bool)

(declare-fun e!40575 () Bool)

(assert (=> b!61793 (=> (not res!34011) (not e!40575))))

(declare-fun e!40578 () Bool)

(assert (=> b!61793 (= res!34011 e!40578)))

(declare-fun res!34019 () Bool)

(assert (=> b!61793 (=> res!34019 e!40578)))

(declare-fun e!40574 () Bool)

(assert (=> b!61793 (= res!34019 (not e!40574))))

(declare-fun res!34015 () Bool)

(assert (=> b!61793 (=> (not res!34015) (not e!40574))))

(assert (=> b!61793 (= res!34015 (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 (ite c!7904 newMap!16 (_2!1026 lt!24941))))))))

(declare-fun b!61794 () Bool)

(declare-fun e!40582 () Unit!1625)

(declare-fun Unit!1664 () Unit!1625)

(assert (=> b!61794 (= e!40582 Unit!1664)))

(declare-fun b!61795 () Bool)

(declare-fun c!8171 () Bool)

(assert (=> b!61795 (= c!8171 (and (not (= (bvand (extraKeys!1950 (ite c!7904 newMap!16 (_2!1026 lt!24941))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1950 (ite c!7904 newMap!16 (_2!1026 lt!24941))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!40579 () ListLongMap!1369)

(declare-fun e!40581 () ListLongMap!1369)

(assert (=> b!61795 (= e!40579 e!40581)))

(declare-fun call!4794 () ListLongMap!1369)

(declare-fun e!40586 () ListLongMap!1369)

(declare-fun b!61796 () Bool)

(assert (=> b!61796 (= e!40586 (+!82 call!4794 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (ite c!7904 newMap!16 (_2!1026 lt!24941))))))))

(declare-fun call!4788 () ListLongMap!1369)

(declare-fun c!8169 () Bool)

(declare-fun c!8170 () Bool)

(declare-fun call!4792 () ListLongMap!1369)

(declare-fun bm!4785 () Bool)

(declare-fun call!4793 () ListLongMap!1369)

(assert (=> bm!4785 (= call!4794 (+!82 (ite c!8169 call!4788 (ite c!8170 call!4793 call!4792)) (ite (or c!8169 c!8170) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (ite c!7904 newMap!16 (_2!1026 lt!24941)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (ite c!7904 newMap!16 (_2!1026 lt!24941)))))))))

(declare-fun b!61797 () Bool)

(declare-fun res!34014 () Bool)

(assert (=> b!61797 (=> (not res!34014) (not e!40575))))

(declare-fun e!40584 () Bool)

(assert (=> b!61797 (= res!34014 e!40584)))

(declare-fun c!8172 () Bool)

(assert (=> b!61797 (= c!8172 (not (= (bvand (extraKeys!1950 (ite c!7904 newMap!16 (_2!1026 lt!24941))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun lt!25672 () ListLongMap!1369)

(declare-fun e!40577 () Bool)

(declare-fun b!61798 () Bool)

(assert (=> b!61798 (= e!40577 (= (apply!67 lt!25672 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1981 (ite c!7904 newMap!16 (_2!1026 lt!24941)))))))

(declare-fun bm!4786 () Bool)

(assert (=> bm!4786 (= call!4792 call!4793)))

(declare-fun b!61799 () Bool)

(assert (=> b!61799 (= e!40584 e!40577)))

(declare-fun res!34012 () Bool)

(declare-fun call!4790 () Bool)

(assert (=> b!61799 (= res!34012 call!4790)))

(assert (=> b!61799 (=> (not res!34012) (not e!40577))))

(declare-fun b!61800 () Bool)

(declare-fun e!40583 () Bool)

(assert (=> b!61800 (= e!40583 (= (apply!67 lt!25672 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1981 (ite c!7904 newMap!16 (_2!1026 lt!24941)))))))

(declare-fun b!61801 () Bool)

(assert (=> b!61801 (= e!40581 call!4792)))

(declare-fun bm!4788 () Bool)

(assert (=> bm!4788 (= call!4788 (getCurrentListMapNoExtraKeys!45 (_keys!3695 (ite c!7904 newMap!16 (_2!1026 lt!24941))) (_values!2050 (ite c!7904 newMap!16 (_2!1026 lt!24941))) (mask!5963 (ite c!7904 newMap!16 (_2!1026 lt!24941))) (extraKeys!1950 (ite c!7904 newMap!16 (_2!1026 lt!24941))) (zeroValue!1981 (ite c!7904 newMap!16 (_2!1026 lt!24941))) (minValue!1981 (ite c!7904 newMap!16 (_2!1026 lt!24941))) #b00000000000000000000000000000000 (defaultEntry!2067 (ite c!7904 newMap!16 (_2!1026 lt!24941)))))))

(declare-fun b!61802 () Bool)

(declare-fun e!40576 () Bool)

(assert (=> b!61802 (= e!40578 e!40576)))

(declare-fun res!34013 () Bool)

(assert (=> b!61802 (=> (not res!34013) (not e!40576))))

(assert (=> b!61802 (= res!34013 (contains!686 lt!25672 (select (arr!1793 (_keys!3695 (ite c!7904 newMap!16 (_2!1026 lt!24941)))) #b00000000000000000000000000000000)))))

(assert (=> b!61802 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 (ite c!7904 newMap!16 (_2!1026 lt!24941))))))))

(declare-fun bm!4789 () Bool)

(assert (=> bm!4789 (= call!4790 (contains!686 lt!25672 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61803 () Bool)

(declare-fun call!4791 () ListLongMap!1369)

(assert (=> b!61803 (= e!40581 call!4791)))

(declare-fun b!61804 () Bool)

(assert (=> b!61804 (= e!40576 (= (apply!67 lt!25672 (select (arr!1793 (_keys!3695 (ite c!7904 newMap!16 (_2!1026 lt!24941)))) #b00000000000000000000000000000000)) (get!1075 (select (arr!1794 (_values!2050 (ite c!7904 newMap!16 (_2!1026 lt!24941)))) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2067 (ite c!7904 newMap!16 (_2!1026 lt!24941))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!61804 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2025 (_values!2050 (ite c!7904 newMap!16 (_2!1026 lt!24941))))))))

(assert (=> b!61804 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 (ite c!7904 newMap!16 (_2!1026 lt!24941))))))))

(declare-fun bm!4790 () Bool)

(assert (=> bm!4790 (= call!4791 call!4794)))

(declare-fun d!12379 () Bool)

(assert (=> d!12379 e!40575))

(declare-fun res!34016 () Bool)

(assert (=> d!12379 (=> (not res!34016) (not e!40575))))

(assert (=> d!12379 (= res!34016 (or (bvsge #b00000000000000000000000000000000 (size!2024 (_keys!3695 (ite c!7904 newMap!16 (_2!1026 lt!24941))))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 (ite c!7904 newMap!16 (_2!1026 lt!24941))))))))))

(declare-fun lt!25688 () ListLongMap!1369)

(assert (=> d!12379 (= lt!25672 lt!25688)))

(declare-fun lt!25681 () Unit!1625)

(assert (=> d!12379 (= lt!25681 e!40582)))

(declare-fun c!8173 () Bool)

(assert (=> d!12379 (= c!8173 e!40580)))

(declare-fun res!34018 () Bool)

(assert (=> d!12379 (=> (not res!34018) (not e!40580))))

(assert (=> d!12379 (= res!34018 (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 (ite c!7904 newMap!16 (_2!1026 lt!24941))))))))

(assert (=> d!12379 (= lt!25688 e!40586)))

(assert (=> d!12379 (= c!8169 (and (not (= (bvand (extraKeys!1950 (ite c!7904 newMap!16 (_2!1026 lt!24941))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1950 (ite c!7904 newMap!16 (_2!1026 lt!24941))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12379 (validMask!0 (mask!5963 (ite c!7904 newMap!16 (_2!1026 lt!24941))))))

(assert (=> d!12379 (= (getCurrentListMap!405 (_keys!3695 (ite c!7904 newMap!16 (_2!1026 lt!24941))) (_values!2050 (ite c!7904 newMap!16 (_2!1026 lt!24941))) (mask!5963 (ite c!7904 newMap!16 (_2!1026 lt!24941))) (extraKeys!1950 (ite c!7904 newMap!16 (_2!1026 lt!24941))) (zeroValue!1981 (ite c!7904 newMap!16 (_2!1026 lt!24941))) (minValue!1981 (ite c!7904 newMap!16 (_2!1026 lt!24941))) #b00000000000000000000000000000000 (defaultEntry!2067 (ite c!7904 newMap!16 (_2!1026 lt!24941)))) lt!25672)))

(declare-fun bm!4787 () Bool)

(assert (=> bm!4787 (= call!4793 call!4788)))

(declare-fun b!61805 () Bool)

(declare-fun lt!25691 () Unit!1625)

(assert (=> b!61805 (= e!40582 lt!25691)))

(declare-fun lt!25683 () ListLongMap!1369)

(assert (=> b!61805 (= lt!25683 (getCurrentListMapNoExtraKeys!45 (_keys!3695 (ite c!7904 newMap!16 (_2!1026 lt!24941))) (_values!2050 (ite c!7904 newMap!16 (_2!1026 lt!24941))) (mask!5963 (ite c!7904 newMap!16 (_2!1026 lt!24941))) (extraKeys!1950 (ite c!7904 newMap!16 (_2!1026 lt!24941))) (zeroValue!1981 (ite c!7904 newMap!16 (_2!1026 lt!24941))) (minValue!1981 (ite c!7904 newMap!16 (_2!1026 lt!24941))) #b00000000000000000000000000000000 (defaultEntry!2067 (ite c!7904 newMap!16 (_2!1026 lt!24941)))))))

(declare-fun lt!25673 () (_ BitVec 64))

(assert (=> b!61805 (= lt!25673 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25686 () (_ BitVec 64))

(assert (=> b!61805 (= lt!25686 (select (arr!1793 (_keys!3695 (ite c!7904 newMap!16 (_2!1026 lt!24941)))) #b00000000000000000000000000000000))))

(declare-fun lt!25693 () Unit!1625)

(assert (=> b!61805 (= lt!25693 (addStillContains!43 lt!25683 lt!25673 (zeroValue!1981 (ite c!7904 newMap!16 (_2!1026 lt!24941))) lt!25686))))

(assert (=> b!61805 (contains!686 (+!82 lt!25683 (tuple2!2033 lt!25673 (zeroValue!1981 (ite c!7904 newMap!16 (_2!1026 lt!24941))))) lt!25686)))

(declare-fun lt!25679 () Unit!1625)

(assert (=> b!61805 (= lt!25679 lt!25693)))

(declare-fun lt!25680 () ListLongMap!1369)

(assert (=> b!61805 (= lt!25680 (getCurrentListMapNoExtraKeys!45 (_keys!3695 (ite c!7904 newMap!16 (_2!1026 lt!24941))) (_values!2050 (ite c!7904 newMap!16 (_2!1026 lt!24941))) (mask!5963 (ite c!7904 newMap!16 (_2!1026 lt!24941))) (extraKeys!1950 (ite c!7904 newMap!16 (_2!1026 lt!24941))) (zeroValue!1981 (ite c!7904 newMap!16 (_2!1026 lt!24941))) (minValue!1981 (ite c!7904 newMap!16 (_2!1026 lt!24941))) #b00000000000000000000000000000000 (defaultEntry!2067 (ite c!7904 newMap!16 (_2!1026 lt!24941)))))))

(declare-fun lt!25678 () (_ BitVec 64))

(assert (=> b!61805 (= lt!25678 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25692 () (_ BitVec 64))

(assert (=> b!61805 (= lt!25692 (select (arr!1793 (_keys!3695 (ite c!7904 newMap!16 (_2!1026 lt!24941)))) #b00000000000000000000000000000000))))

(declare-fun lt!25677 () Unit!1625)

(assert (=> b!61805 (= lt!25677 (addApplyDifferent!43 lt!25680 lt!25678 (minValue!1981 (ite c!7904 newMap!16 (_2!1026 lt!24941))) lt!25692))))

(assert (=> b!61805 (= (apply!67 (+!82 lt!25680 (tuple2!2033 lt!25678 (minValue!1981 (ite c!7904 newMap!16 (_2!1026 lt!24941))))) lt!25692) (apply!67 lt!25680 lt!25692))))

(declare-fun lt!25676 () Unit!1625)

(assert (=> b!61805 (= lt!25676 lt!25677)))

(declare-fun lt!25687 () ListLongMap!1369)

(assert (=> b!61805 (= lt!25687 (getCurrentListMapNoExtraKeys!45 (_keys!3695 (ite c!7904 newMap!16 (_2!1026 lt!24941))) (_values!2050 (ite c!7904 newMap!16 (_2!1026 lt!24941))) (mask!5963 (ite c!7904 newMap!16 (_2!1026 lt!24941))) (extraKeys!1950 (ite c!7904 newMap!16 (_2!1026 lt!24941))) (zeroValue!1981 (ite c!7904 newMap!16 (_2!1026 lt!24941))) (minValue!1981 (ite c!7904 newMap!16 (_2!1026 lt!24941))) #b00000000000000000000000000000000 (defaultEntry!2067 (ite c!7904 newMap!16 (_2!1026 lt!24941)))))))

(declare-fun lt!25674 () (_ BitVec 64))

(assert (=> b!61805 (= lt!25674 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25682 () (_ BitVec 64))

(assert (=> b!61805 (= lt!25682 (select (arr!1793 (_keys!3695 (ite c!7904 newMap!16 (_2!1026 lt!24941)))) #b00000000000000000000000000000000))))

(declare-fun lt!25689 () Unit!1625)

(assert (=> b!61805 (= lt!25689 (addApplyDifferent!43 lt!25687 lt!25674 (zeroValue!1981 (ite c!7904 newMap!16 (_2!1026 lt!24941))) lt!25682))))

(assert (=> b!61805 (= (apply!67 (+!82 lt!25687 (tuple2!2033 lt!25674 (zeroValue!1981 (ite c!7904 newMap!16 (_2!1026 lt!24941))))) lt!25682) (apply!67 lt!25687 lt!25682))))

(declare-fun lt!25690 () Unit!1625)

(assert (=> b!61805 (= lt!25690 lt!25689)))

(declare-fun lt!25675 () ListLongMap!1369)

(assert (=> b!61805 (= lt!25675 (getCurrentListMapNoExtraKeys!45 (_keys!3695 (ite c!7904 newMap!16 (_2!1026 lt!24941))) (_values!2050 (ite c!7904 newMap!16 (_2!1026 lt!24941))) (mask!5963 (ite c!7904 newMap!16 (_2!1026 lt!24941))) (extraKeys!1950 (ite c!7904 newMap!16 (_2!1026 lt!24941))) (zeroValue!1981 (ite c!7904 newMap!16 (_2!1026 lt!24941))) (minValue!1981 (ite c!7904 newMap!16 (_2!1026 lt!24941))) #b00000000000000000000000000000000 (defaultEntry!2067 (ite c!7904 newMap!16 (_2!1026 lt!24941)))))))

(declare-fun lt!25685 () (_ BitVec 64))

(assert (=> b!61805 (= lt!25685 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25684 () (_ BitVec 64))

(assert (=> b!61805 (= lt!25684 (select (arr!1793 (_keys!3695 (ite c!7904 newMap!16 (_2!1026 lt!24941)))) #b00000000000000000000000000000000))))

(assert (=> b!61805 (= lt!25691 (addApplyDifferent!43 lt!25675 lt!25685 (minValue!1981 (ite c!7904 newMap!16 (_2!1026 lt!24941))) lt!25684))))

(assert (=> b!61805 (= (apply!67 (+!82 lt!25675 (tuple2!2033 lt!25685 (minValue!1981 (ite c!7904 newMap!16 (_2!1026 lt!24941))))) lt!25684) (apply!67 lt!25675 lt!25684))))

(declare-fun b!61806 () Bool)

(declare-fun e!40585 () Bool)

(declare-fun call!4789 () Bool)

(assert (=> b!61806 (= e!40585 (not call!4789))))

(declare-fun b!61807 () Bool)

(assert (=> b!61807 (= e!40579 call!4791)))

(declare-fun b!61808 () Bool)

(assert (=> b!61808 (= e!40574 (validKeyInArray!0 (select (arr!1793 (_keys!3695 (ite c!7904 newMap!16 (_2!1026 lt!24941)))) #b00000000000000000000000000000000)))))

(declare-fun b!61809 () Bool)

(assert (=> b!61809 (= e!40584 (not call!4790))))

(declare-fun bm!4791 () Bool)

(assert (=> bm!4791 (= call!4789 (contains!686 lt!25672 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61810 () Bool)

(assert (=> b!61810 (= e!40585 e!40583)))

(declare-fun res!34017 () Bool)

(assert (=> b!61810 (= res!34017 call!4789)))

(assert (=> b!61810 (=> (not res!34017) (not e!40583))))

(declare-fun b!61811 () Bool)

(assert (=> b!61811 (= e!40586 e!40579)))

(assert (=> b!61811 (= c!8170 (and (not (= (bvand (extraKeys!1950 (ite c!7904 newMap!16 (_2!1026 lt!24941))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1950 (ite c!7904 newMap!16 (_2!1026 lt!24941))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!61812 () Bool)

(assert (=> b!61812 (= e!40575 e!40585)))

(declare-fun c!8168 () Bool)

(assert (=> b!61812 (= c!8168 (not (= (bvand (extraKeys!1950 (ite c!7904 newMap!16 (_2!1026 lt!24941))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!12379 c!8169) b!61796))

(assert (= (and d!12379 (not c!8169)) b!61811))

(assert (= (and b!61811 c!8170) b!61807))

(assert (= (and b!61811 (not c!8170)) b!61795))

(assert (= (and b!61795 c!8171) b!61803))

(assert (= (and b!61795 (not c!8171)) b!61801))

(assert (= (or b!61803 b!61801) bm!4786))

(assert (= (or b!61807 bm!4786) bm!4787))

(assert (= (or b!61807 b!61803) bm!4790))

(assert (= (or b!61796 bm!4787) bm!4788))

(assert (= (or b!61796 bm!4790) bm!4785))

(assert (= (and d!12379 res!34018) b!61792))

(assert (= (and d!12379 c!8173) b!61805))

(assert (= (and d!12379 (not c!8173)) b!61794))

(assert (= (and d!12379 res!34016) b!61793))

(assert (= (and b!61793 res!34015) b!61808))

(assert (= (and b!61793 (not res!34019)) b!61802))

(assert (= (and b!61802 res!34013) b!61804))

(assert (= (and b!61793 res!34011) b!61797))

(assert (= (and b!61797 c!8172) b!61799))

(assert (= (and b!61797 (not c!8172)) b!61809))

(assert (= (and b!61799 res!34012) b!61798))

(assert (= (or b!61799 b!61809) bm!4789))

(assert (= (and b!61797 res!34014) b!61812))

(assert (= (and b!61812 c!8168) b!61810))

(assert (= (and b!61812 (not c!8168)) b!61806))

(assert (= (and b!61810 res!34017) b!61800))

(assert (= (or b!61810 b!61806) bm!4791))

(declare-fun b_lambda!2749 () Bool)

(assert (=> (not b_lambda!2749) (not b!61804)))

(declare-fun tb!1361 () Bool)

(declare-fun t!4821 () Bool)

(assert (=> (and b!60606 (= (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) (defaultEntry!2067 (ite c!7904 newMap!16 (_2!1026 lt!24941)))) t!4821) tb!1361))

(declare-fun result!2435 () Bool)

(assert (=> tb!1361 (= result!2435 tp_is_empty!2409)))

(assert (=> b!61804 t!4821))

(declare-fun b_and!3795 () Bool)

(assert (= b_and!3791 (and (=> t!4821 result!2435) b_and!3795)))

(declare-fun t!4823 () Bool)

(declare-fun tb!1363 () Bool)

(assert (=> (and b!60590 (= (defaultEntry!2067 newMap!16) (defaultEntry!2067 (ite c!7904 newMap!16 (_2!1026 lt!24941)))) t!4823) tb!1363))

(declare-fun result!2437 () Bool)

(assert (= result!2437 result!2435))

(assert (=> b!61804 t!4823))

(declare-fun b_and!3797 () Bool)

(assert (= b_and!3793 (and (=> t!4823 result!2437) b_and!3797)))

(declare-fun m!55197 () Bool)

(assert (=> bm!4785 m!55197))

(declare-fun m!55199 () Bool)

(assert (=> bm!4788 m!55199))

(declare-fun m!55201 () Bool)

(assert (=> b!61805 m!55201))

(declare-fun m!55203 () Bool)

(assert (=> b!61805 m!55203))

(declare-fun m!55205 () Bool)

(assert (=> b!61805 m!55205))

(declare-fun m!55207 () Bool)

(assert (=> b!61805 m!55207))

(declare-fun m!55209 () Bool)

(assert (=> b!61805 m!55209))

(declare-fun m!55211 () Bool)

(assert (=> b!61805 m!55211))

(declare-fun m!55213 () Bool)

(assert (=> b!61805 m!55213))

(declare-fun m!55215 () Bool)

(assert (=> b!61805 m!55215))

(declare-fun m!55217 () Bool)

(assert (=> b!61805 m!55217))

(assert (=> b!61805 m!55199))

(assert (=> b!61805 m!55201))

(declare-fun m!55219 () Bool)

(assert (=> b!61805 m!55219))

(assert (=> b!61805 m!55205))

(declare-fun m!55221 () Bool)

(assert (=> b!61805 m!55221))

(assert (=> b!61805 m!55215))

(declare-fun m!55223 () Bool)

(assert (=> b!61805 m!55223))

(declare-fun m!55225 () Bool)

(assert (=> b!61805 m!55225))

(declare-fun m!55227 () Bool)

(assert (=> b!61805 m!55227))

(declare-fun m!55229 () Bool)

(assert (=> b!61805 m!55229))

(assert (=> b!61805 m!55219))

(declare-fun m!55231 () Bool)

(assert (=> b!61805 m!55231))

(declare-fun m!55233 () Bool)

(assert (=> b!61798 m!55233))

(assert (=> b!61808 m!55211))

(assert (=> b!61808 m!55211))

(declare-fun m!55235 () Bool)

(assert (=> b!61808 m!55235))

(assert (=> b!61804 m!55211))

(declare-fun m!55237 () Bool)

(assert (=> b!61804 m!55237))

(declare-fun m!55239 () Bool)

(assert (=> b!61804 m!55239))

(assert (=> b!61804 m!55239))

(declare-fun m!55241 () Bool)

(assert (=> b!61804 m!55241))

(declare-fun m!55243 () Bool)

(assert (=> b!61804 m!55243))

(assert (=> b!61804 m!55211))

(assert (=> b!61804 m!55241))

(assert (=> b!61802 m!55211))

(assert (=> b!61802 m!55211))

(declare-fun m!55245 () Bool)

(assert (=> b!61802 m!55245))

(declare-fun m!55247 () Bool)

(assert (=> b!61800 m!55247))

(assert (=> b!61792 m!55211))

(assert (=> b!61792 m!55211))

(assert (=> b!61792 m!55235))

(declare-fun m!55249 () Bool)

(assert (=> b!61796 m!55249))

(declare-fun m!55251 () Bool)

(assert (=> bm!4789 m!55251))

(declare-fun m!55253 () Bool)

(assert (=> d!12379 m!55253))

(declare-fun m!55255 () Bool)

(assert (=> bm!4791 m!55255))

(assert (=> d!12009 d!12379))

(declare-fun d!12381 () Bool)

(declare-fun e!40587 () Bool)

(assert (=> d!12381 e!40587))

(declare-fun res!34020 () Bool)

(assert (=> d!12381 (=> res!34020 e!40587)))

(declare-fun lt!25697 () Bool)

(assert (=> d!12381 (= res!34020 (not lt!25697))))

(declare-fun lt!25696 () Bool)

(assert (=> d!12381 (= lt!25697 lt!25696)))

(declare-fun lt!25695 () Unit!1625)

(declare-fun e!40588 () Unit!1625)

(assert (=> d!12381 (= lt!25695 e!40588)))

(declare-fun c!8174 () Bool)

(assert (=> d!12381 (= c!8174 lt!25696)))

(assert (=> d!12381 (= lt!25696 (containsKey!129 (toList!700 lt!25126) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12381 (= (contains!686 lt!25126 #b0000000000000000000000000000000000000000000000000000000000000000) lt!25697)))

(declare-fun b!61813 () Bool)

(declare-fun lt!25694 () Unit!1625)

(assert (=> b!61813 (= e!40588 lt!25694)))

(assert (=> b!61813 (= lt!25694 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 lt!25126) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61813 (isDefined!78 (getValueByKey!125 (toList!700 lt!25126) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61814 () Bool)

(declare-fun Unit!1665 () Unit!1625)

(assert (=> b!61814 (= e!40588 Unit!1665)))

(declare-fun b!61815 () Bool)

(assert (=> b!61815 (= e!40587 (isDefined!78 (getValueByKey!125 (toList!700 lt!25126) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12381 c!8174) b!61813))

(assert (= (and d!12381 (not c!8174)) b!61814))

(assert (= (and d!12381 (not res!34020)) b!61815))

(declare-fun m!55257 () Bool)

(assert (=> d!12381 m!55257))

(declare-fun m!55259 () Bool)

(assert (=> b!61813 m!55259))

(declare-fun m!55261 () Bool)

(assert (=> b!61813 m!55261))

(assert (=> b!61813 m!55261))

(declare-fun m!55263 () Bool)

(assert (=> b!61813 m!55263))

(assert (=> b!61815 m!55261))

(assert (=> b!61815 m!55261))

(assert (=> b!61815 m!55263))

(assert (=> d!12015 d!12381))

(assert (=> d!12015 d!11937))

(declare-fun b!61816 () Bool)

(declare-fun e!40592 () Bool)

(declare-fun call!4795 () Bool)

(assert (=> b!61816 (= e!40592 call!4795)))

(declare-fun b!61817 () Bool)

(declare-fun e!40590 () Bool)

(declare-fun e!40589 () Bool)

(assert (=> b!61817 (= e!40590 e!40589)))

(declare-fun res!34022 () Bool)

(assert (=> b!61817 (=> (not res!34022) (not e!40589))))

(declare-fun e!40591 () Bool)

(assert (=> b!61817 (= res!34022 (not e!40591))))

(declare-fun res!34023 () Bool)

(assert (=> b!61817 (=> (not res!34023) (not e!40591))))

(assert (=> b!61817 (= res!34023 (validKeyInArray!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun b!61818 () Bool)

(assert (=> b!61818 (= e!40589 e!40592)))

(declare-fun c!8175 () Bool)

(assert (=> b!61818 (= c!8175 (validKeyInArray!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun b!61819 () Bool)

(assert (=> b!61819 (= e!40592 call!4795)))

(declare-fun d!12383 () Bool)

(declare-fun res!34021 () Bool)

(assert (=> d!12383 (=> res!34021 e!40590)))

(assert (=> d!12383 (= res!34021 (bvsge (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992))))))))

(assert (=> d!12383 (= (arrayNoDuplicates!0 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!7999 (Cons!1433 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7871 (Cons!1433 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) Nil!1434) Nil!1434)) (ite c!7871 (Cons!1433 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) Nil!1434) Nil!1434))) e!40590)))

(declare-fun bm!4792 () Bool)

(assert (=> bm!4792 (= call!4795 (arrayNoDuplicates!0 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!8175 (Cons!1433 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (ite c!7999 (Cons!1433 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7871 (Cons!1433 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) Nil!1434) Nil!1434)) (ite c!7871 (Cons!1433 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) Nil!1434) Nil!1434))) (ite c!7999 (Cons!1433 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7871 (Cons!1433 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) Nil!1434) Nil!1434)) (ite c!7871 (Cons!1433 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) Nil!1434) Nil!1434)))))))

(declare-fun b!61820 () Bool)

(assert (=> b!61820 (= e!40591 (contains!687 (ite c!7999 (Cons!1433 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7871 (Cons!1433 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) Nil!1434) Nil!1434)) (ite c!7871 (Cons!1433 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) Nil!1434) Nil!1434)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(assert (= (and d!12383 (not res!34021)) b!61817))

(assert (= (and b!61817 res!34023) b!61820))

(assert (= (and b!61817 res!34022) b!61818))

(assert (= (and b!61818 c!8175) b!61816))

(assert (= (and b!61818 (not c!8175)) b!61819))

(assert (= (or b!61816 b!61819) bm!4792))

(declare-fun m!55265 () Bool)

(assert (=> b!61817 m!55265))

(assert (=> b!61817 m!55265))

(declare-fun m!55267 () Bool)

(assert (=> b!61817 m!55267))

(assert (=> b!61818 m!55265))

(assert (=> b!61818 m!55265))

(assert (=> b!61818 m!55267))

(assert (=> bm!4792 m!55265))

(declare-fun m!55269 () Bool)

(assert (=> bm!4792 m!55269))

(assert (=> b!61820 m!55265))

(assert (=> b!61820 m!55265))

(declare-fun m!55271 () Bool)

(assert (=> b!61820 m!55271))

(assert (=> bm!4693 d!12383))

(declare-fun d!12385 () Bool)

(assert (=> d!12385 (= (apply!67 lt!25169 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1078 (getValueByKey!125 (toList!700 lt!25169) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2688 () Bool)

(assert (= bs!2688 d!12385))

(assert (=> bs!2688 m!54351))

(assert (=> bs!2688 m!54351))

(declare-fun m!55273 () Bool)

(assert (=> bs!2688 m!55273))

(assert (=> b!61134 d!12385))

(declare-fun d!12387 () Bool)

(declare-fun e!40593 () Bool)

(assert (=> d!12387 e!40593))

(declare-fun res!34024 () Bool)

(assert (=> d!12387 (=> res!34024 e!40593)))

(declare-fun lt!25701 () Bool)

(assert (=> d!12387 (= res!34024 (not lt!25701))))

(declare-fun lt!25700 () Bool)

(assert (=> d!12387 (= lt!25701 lt!25700)))

(declare-fun lt!25699 () Unit!1625)

(declare-fun e!40594 () Unit!1625)

(assert (=> d!12387 (= lt!25699 e!40594)))

(declare-fun c!8176 () Bool)

(assert (=> d!12387 (= c!8176 lt!25700)))

(assert (=> d!12387 (= lt!25700 (containsKey!129 (toList!700 lt!25100) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(assert (=> d!12387 (= (contains!686 lt!25100 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25701)))

(declare-fun b!61821 () Bool)

(declare-fun lt!25698 () Unit!1625)

(assert (=> b!61821 (= e!40594 lt!25698)))

(assert (=> b!61821 (= lt!25698 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 lt!25100) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(assert (=> b!61821 (isDefined!78 (getValueByKey!125 (toList!700 lt!25100) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun b!61822 () Bool)

(declare-fun Unit!1666 () Unit!1625)

(assert (=> b!61822 (= e!40594 Unit!1666)))

(declare-fun b!61823 () Bool)

(assert (=> b!61823 (= e!40593 (isDefined!78 (getValueByKey!125 (toList!700 lt!25100) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (= (and d!12387 c!8176) b!61821))

(assert (= (and d!12387 (not c!8176)) b!61822))

(assert (= (and d!12387 (not res!34024)) b!61823))

(declare-fun m!55275 () Bool)

(assert (=> d!12387 m!55275))

(declare-fun m!55277 () Bool)

(assert (=> b!61821 m!55277))

(assert (=> b!61821 m!53735))

(assert (=> b!61821 m!53735))

(declare-fun m!55279 () Bool)

(assert (=> b!61821 m!55279))

(assert (=> b!61823 m!53735))

(assert (=> b!61823 m!53735))

(assert (=> b!61823 m!55279))

(assert (=> d!11997 d!12387))

(declare-fun b!61824 () Bool)

(declare-fun e!40595 () Option!131)

(assert (=> b!61824 (= e!40595 (Some!130 (_2!1027 (h!2014 lt!25101))))))

(declare-fun d!12389 () Bool)

(declare-fun c!8177 () Bool)

(assert (=> d!12389 (= c!8177 (and ((_ is Cons!1432) lt!25101) (= (_1!1027 (h!2014 lt!25101)) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (=> d!12389 (= (getValueByKey!125 lt!25101 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) e!40595)))

(declare-fun b!61825 () Bool)

(declare-fun e!40596 () Option!131)

(assert (=> b!61825 (= e!40595 e!40596)))

(declare-fun c!8178 () Bool)

(assert (=> b!61825 (= c!8178 (and ((_ is Cons!1432) lt!25101) (not (= (_1!1027 (h!2014 lt!25101)) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))))

(declare-fun b!61827 () Bool)

(assert (=> b!61827 (= e!40596 None!129)))

(declare-fun b!61826 () Bool)

(assert (=> b!61826 (= e!40596 (getValueByKey!125 (t!4806 lt!25101) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(assert (= (and d!12389 c!8177) b!61824))

(assert (= (and d!12389 (not c!8177)) b!61825))

(assert (= (and b!61825 c!8178) b!61826))

(assert (= (and b!61825 (not c!8178)) b!61827))

(declare-fun m!55281 () Bool)

(assert (=> b!61826 m!55281))

(assert (=> d!11997 d!12389))

(declare-fun d!12391 () Bool)

(assert (=> d!12391 (= (getValueByKey!125 lt!25101 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) (Some!130 (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun lt!25702 () Unit!1625)

(assert (=> d!12391 (= lt!25702 (choose!325 lt!25101 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun e!40597 () Bool)

(assert (=> d!12391 e!40597))

(declare-fun res!34025 () Bool)

(assert (=> d!12391 (=> (not res!34025) (not e!40597))))

(assert (=> d!12391 (= res!34025 (isStrictlySorted!285 lt!25101))))

(assert (=> d!12391 (= (lemmaContainsTupThenGetReturnValue!42 lt!25101 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25702)))

(declare-fun b!61828 () Bool)

(declare-fun res!34026 () Bool)

(assert (=> b!61828 (=> (not res!34026) (not e!40597))))

(assert (=> b!61828 (= res!34026 (containsKey!129 lt!25101 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun b!61829 () Bool)

(assert (=> b!61829 (= e!40597 (contains!688 lt!25101 (tuple2!2033 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (= (and d!12391 res!34025) b!61828))

(assert (= (and b!61828 res!34026) b!61829))

(assert (=> d!12391 m!53729))

(declare-fun m!55283 () Bool)

(assert (=> d!12391 m!55283))

(declare-fun m!55285 () Bool)

(assert (=> d!12391 m!55285))

(declare-fun m!55287 () Bool)

(assert (=> b!61828 m!55287))

(declare-fun m!55289 () Bool)

(assert (=> b!61829 m!55289))

(assert (=> d!11997 d!12391))

(declare-fun b!61830 () Bool)

(declare-fun e!40600 () Bool)

(declare-fun lt!25703 () List!1436)

(assert (=> b!61830 (= e!40600 (contains!688 lt!25703 (tuple2!2033 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(declare-fun bm!4793 () Bool)

(declare-fun call!4796 () List!1436)

(declare-fun e!40598 () List!1436)

(declare-fun c!8180 () Bool)

(assert (=> bm!4793 (= call!4796 ($colon$colon!61 e!40598 (ite c!8180 (h!2014 (toList!700 call!4661)) (tuple2!2033 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))))

(declare-fun c!8179 () Bool)

(assert (=> bm!4793 (= c!8179 c!8180)))

(declare-fun b!61831 () Bool)

(declare-fun e!40602 () List!1436)

(assert (=> b!61831 (= e!40602 call!4796)))

(declare-fun bm!4794 () Bool)

(declare-fun call!4798 () List!1436)

(declare-fun call!4797 () List!1436)

(assert (=> bm!4794 (= call!4798 call!4797)))

(declare-fun b!61832 () Bool)

(declare-fun e!40599 () List!1436)

(assert (=> b!61832 (= e!40599 call!4798)))

(declare-fun b!61833 () Bool)

(assert (=> b!61833 (= e!40598 (insertStrictlySorted!45 (t!4806 (toList!700 call!4661)) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun bm!4795 () Bool)

(assert (=> bm!4795 (= call!4797 call!4796)))

(declare-fun b!61834 () Bool)

(assert (=> b!61834 (= e!40599 call!4798)))

(declare-fun d!12393 () Bool)

(assert (=> d!12393 e!40600))

(declare-fun res!34027 () Bool)

(assert (=> d!12393 (=> (not res!34027) (not e!40600))))

(assert (=> d!12393 (= res!34027 (isStrictlySorted!285 lt!25703))))

(assert (=> d!12393 (= lt!25703 e!40602)))

(assert (=> d!12393 (= c!8180 (and ((_ is Cons!1432) (toList!700 call!4661)) (bvslt (_1!1027 (h!2014 (toList!700 call!4661))) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (=> d!12393 (isStrictlySorted!285 (toList!700 call!4661))))

(assert (=> d!12393 (= (insertStrictlySorted!45 (toList!700 call!4661) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25703)))

(declare-fun b!61835 () Bool)

(declare-fun e!40601 () List!1436)

(assert (=> b!61835 (= e!40601 call!4797)))

(declare-fun b!61836 () Bool)

(declare-fun c!8182 () Bool)

(assert (=> b!61836 (= c!8182 (and ((_ is Cons!1432) (toList!700 call!4661)) (bvsgt (_1!1027 (h!2014 (toList!700 call!4661))) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (=> b!61836 (= e!40601 e!40599)))

(declare-fun b!61837 () Bool)

(declare-fun res!34028 () Bool)

(assert (=> b!61837 (=> (not res!34028) (not e!40600))))

(assert (=> b!61837 (= res!34028 (containsKey!129 lt!25703 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun b!61838 () Bool)

(assert (=> b!61838 (= e!40602 e!40601)))

(declare-fun c!8181 () Bool)

(assert (=> b!61838 (= c!8181 (and ((_ is Cons!1432) (toList!700 call!4661)) (= (_1!1027 (h!2014 (toList!700 call!4661))) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(declare-fun b!61839 () Bool)

(assert (=> b!61839 (= e!40598 (ite c!8181 (t!4806 (toList!700 call!4661)) (ite c!8182 (Cons!1432 (h!2014 (toList!700 call!4661)) (t!4806 (toList!700 call!4661))) Nil!1433)))))

(assert (= (and d!12393 c!8180) b!61831))

(assert (= (and d!12393 (not c!8180)) b!61838))

(assert (= (and b!61838 c!8181) b!61835))

(assert (= (and b!61838 (not c!8181)) b!61836))

(assert (= (and b!61836 c!8182) b!61834))

(assert (= (and b!61836 (not c!8182)) b!61832))

(assert (= (or b!61834 b!61832) bm!4794))

(assert (= (or b!61835 bm!4794) bm!4795))

(assert (= (or b!61831 bm!4795) bm!4793))

(assert (= (and bm!4793 c!8179) b!61833))

(assert (= (and bm!4793 (not c!8179)) b!61839))

(assert (= (and d!12393 res!34027) b!61837))

(assert (= (and b!61837 res!34028) b!61830))

(declare-fun m!55291 () Bool)

(assert (=> bm!4793 m!55291))

(declare-fun m!55293 () Bool)

(assert (=> b!61837 m!55293))

(declare-fun m!55295 () Bool)

(assert (=> d!12393 m!55295))

(declare-fun m!55297 () Bool)

(assert (=> d!12393 m!55297))

(declare-fun m!55299 () Bool)

(assert (=> b!61833 m!55299))

(declare-fun m!55301 () Bool)

(assert (=> b!61830 m!55301))

(assert (=> d!11997 d!12393))

(assert (=> b!61257 d!12069))

(declare-fun d!12395 () Bool)

(assert (not d!12395))

(assert (=> b!61046 d!12395))

(declare-fun d!12397 () Bool)

(assert (=> d!12397 (= (apply!67 lt!25069 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) (get!1078 (getValueByKey!125 (toList!700 lt!25069) (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2689 () Bool)

(assert (= bs!2689 d!12397))

(assert (=> bs!2689 m!53617))

(declare-fun m!55303 () Bool)

(assert (=> bs!2689 m!55303))

(assert (=> bs!2689 m!55303))

(declare-fun m!55305 () Bool)

(assert (=> bs!2689 m!55305))

(assert (=> b!61001 d!12397))

(assert (=> b!61001 d!12121))

(declare-fun b!61840 () Bool)

(declare-fun e!40603 () Option!131)

(assert (=> b!61840 (= e!40603 (Some!130 (_2!1027 (h!2014 (toList!700 lt!25166)))))))

(declare-fun c!8183 () Bool)

(declare-fun d!12399 () Bool)

(assert (=> d!12399 (= c!8183 (and ((_ is Cons!1432) (toList!700 lt!25166)) (= (_1!1027 (h!2014 (toList!700 lt!25166))) (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!12399 (= (getValueByKey!125 (toList!700 lt!25166) (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!40603)))

(declare-fun b!61841 () Bool)

(declare-fun e!40604 () Option!131)

(assert (=> b!61841 (= e!40603 e!40604)))

(declare-fun c!8184 () Bool)

(assert (=> b!61841 (= c!8184 (and ((_ is Cons!1432) (toList!700 lt!25166)) (not (= (_1!1027 (h!2014 (toList!700 lt!25166))) (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!61843 () Bool)

(assert (=> b!61843 (= e!40604 None!129)))

(declare-fun b!61842 () Bool)

(assert (=> b!61842 (= e!40604 (getValueByKey!125 (t!4806 (toList!700 lt!25166)) (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!12399 c!8183) b!61840))

(assert (= (and d!12399 (not c!8183)) b!61841))

(assert (= (and b!61841 c!8184) b!61842))

(assert (= (and b!61841 (not c!8184)) b!61843))

(declare-fun m!55307 () Bool)

(assert (=> b!61842 m!55307))

(assert (=> b!61124 d!12399))

(declare-fun d!12401 () Bool)

(assert (=> d!12401 (= (size!2028 newMap!16) (bvadd (_size!364 newMap!16) (bvsdiv (bvadd (extraKeys!1950 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010)))))

(assert (=> b!61163 d!12401))

(declare-fun d!12403 () Bool)

(assert (=> d!12403 (= (apply!67 lt!25126 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1078 (getValueByKey!125 (toList!700 lt!25126) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!2690 () Bool)

(assert (= bs!2690 d!12403))

(assert (=> bs!2690 m!53407))

(declare-fun m!55309 () Bool)

(assert (=> bs!2690 m!55309))

(assert (=> bs!2690 m!55309))

(declare-fun m!55311 () Bool)

(assert (=> bs!2690 m!55311))

(assert (=> b!61077 d!12403))

(assert (=> b!61077 d!12057))

(assert (=> b!60935 d!12109))

(declare-fun d!12405 () Bool)

(declare-fun e!40605 () Bool)

(assert (=> d!12405 e!40605))

(declare-fun res!34029 () Bool)

(assert (=> d!12405 (=> res!34029 e!40605)))

(declare-fun lt!25707 () Bool)

(assert (=> d!12405 (= res!34029 (not lt!25707))))

(declare-fun lt!25706 () Bool)

(assert (=> d!12405 (= lt!25707 lt!25706)))

(declare-fun lt!25705 () Unit!1625)

(declare-fun e!40606 () Unit!1625)

(assert (=> d!12405 (= lt!25705 e!40606)))

(declare-fun c!8185 () Bool)

(assert (=> d!12405 (= c!8185 lt!25706)))

(assert (=> d!12405 (= lt!25706 (containsKey!129 (toList!700 lt!25169) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12405 (= (contains!686 lt!25169 #b0000000000000000000000000000000000000000000000000000000000000000) lt!25707)))

(declare-fun b!61844 () Bool)

(declare-fun lt!25704 () Unit!1625)

(assert (=> b!61844 (= e!40606 lt!25704)))

(assert (=> b!61844 (= lt!25704 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 lt!25169) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61844 (isDefined!78 (getValueByKey!125 (toList!700 lt!25169) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61845 () Bool)

(declare-fun Unit!1667 () Unit!1625)

(assert (=> b!61845 (= e!40606 Unit!1667)))

(declare-fun b!61846 () Bool)

(assert (=> b!61846 (= e!40605 (isDefined!78 (getValueByKey!125 (toList!700 lt!25169) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12405 c!8185) b!61844))

(assert (= (and d!12405 (not c!8185)) b!61845))

(assert (= (and d!12405 (not res!34029)) b!61846))

(declare-fun m!55313 () Bool)

(assert (=> d!12405 m!55313))

(declare-fun m!55315 () Bool)

(assert (=> b!61844 m!55315))

(assert (=> b!61844 m!54167))

(assert (=> b!61844 m!54167))

(declare-fun m!55317 () Bool)

(assert (=> b!61844 m!55317))

(assert (=> b!61846 m!54167))

(assert (=> b!61846 m!54167))

(assert (=> b!61846 m!55317))

(assert (=> bm!4690 d!12405))

(declare-fun d!12407 () Bool)

(assert (=> d!12407 (= (inRange!0 (ite c!8016 (index!3037 lt!25308) (ite c!8017 (index!3036 lt!25325) (index!3039 lt!25325))) (mask!5963 newMap!16)) (and (bvsge (ite c!8016 (index!3037 lt!25308) (ite c!8017 (index!3036 lt!25325) (index!3039 lt!25325))) #b00000000000000000000000000000000) (bvslt (ite c!8016 (index!3037 lt!25308) (ite c!8017 (index!3036 lt!25325) (index!3039 lt!25325))) (bvadd (mask!5963 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4712 d!12407))

(declare-fun d!12409 () Bool)

(assert (=> d!12409 (isDefined!78 (getValueByKey!125 (toList!700 (+!82 lt!25006 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25009))))

(declare-fun lt!25708 () Unit!1625)

(assert (=> d!12409 (= lt!25708 (choose!320 (toList!700 (+!82 lt!25006 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25009))))

(declare-fun e!40607 () Bool)

(assert (=> d!12409 e!40607))

(declare-fun res!34030 () Bool)

(assert (=> d!12409 (=> (not res!34030) (not e!40607))))

(assert (=> d!12409 (= res!34030 (isStrictlySorted!285 (toList!700 (+!82 lt!25006 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (=> d!12409 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 (+!82 lt!25006 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25009) lt!25708)))

(declare-fun b!61847 () Bool)

(assert (=> b!61847 (= e!40607 (containsKey!129 (toList!700 (+!82 lt!25006 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25009))))

(assert (= (and d!12409 res!34030) b!61847))

(assert (=> d!12409 m!53811))

(assert (=> d!12409 m!53811))

(assert (=> d!12409 m!53813))

(declare-fun m!55319 () Bool)

(assert (=> d!12409 m!55319))

(declare-fun m!55321 () Bool)

(assert (=> d!12409 m!55321))

(assert (=> b!61847 m!53807))

(assert (=> b!61091 d!12409))

(assert (=> b!61091 d!12113))

(assert (=> b!61091 d!12115))

(declare-fun d!12411 () Bool)

(assert (=> d!12411 (= (apply!67 lt!25069 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1078 (getValueByKey!125 (toList!700 lt!25069) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2691 () Bool)

(assert (= bs!2691 d!12411))

(declare-fun m!55323 () Bool)

(assert (=> bs!2691 m!55323))

(assert (=> bs!2691 m!55323))

(declare-fun m!55325 () Bool)

(assert (=> bs!2691 m!55325))

(assert (=> b!60997 d!12411))

(declare-fun d!12413 () Bool)

(declare-fun e!40608 () Bool)

(assert (=> d!12413 e!40608))

(declare-fun res!34031 () Bool)

(assert (=> d!12413 (=> res!34031 e!40608)))

(declare-fun lt!25712 () Bool)

(assert (=> d!12413 (= res!34031 (not lt!25712))))

(declare-fun lt!25711 () Bool)

(assert (=> d!12413 (= lt!25712 lt!25711)))

(declare-fun lt!25710 () Unit!1625)

(declare-fun e!40609 () Unit!1625)

(assert (=> d!12413 (= lt!25710 e!40609)))

(declare-fun c!8186 () Bool)

(assert (=> d!12413 (= c!8186 lt!25711)))

(assert (=> d!12413 (= lt!25711 (containsKey!129 (toList!700 lt!25037) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12413 (= (contains!686 lt!25037 #b0000000000000000000000000000000000000000000000000000000000000000) lt!25712)))

(declare-fun b!61848 () Bool)

(declare-fun lt!25709 () Unit!1625)

(assert (=> b!61848 (= e!40609 lt!25709)))

(assert (=> b!61848 (= lt!25709 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 lt!25037) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61848 (isDefined!78 (getValueByKey!125 (toList!700 lt!25037) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61849 () Bool)

(declare-fun Unit!1668 () Unit!1625)

(assert (=> b!61849 (= e!40609 Unit!1668)))

(declare-fun b!61850 () Bool)

(assert (=> b!61850 (= e!40608 (isDefined!78 (getValueByKey!125 (toList!700 lt!25037) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12413 c!8186) b!61848))

(assert (= (and d!12413 (not c!8186)) b!61849))

(assert (= (and d!12413 (not res!34031)) b!61850))

(declare-fun m!55327 () Bool)

(assert (=> d!12413 m!55327))

(declare-fun m!55329 () Bool)

(assert (=> b!61848 m!55329))

(declare-fun m!55331 () Bool)

(assert (=> b!61848 m!55331))

(assert (=> b!61848 m!55331))

(declare-fun m!55333 () Bool)

(assert (=> b!61848 m!55333))

(assert (=> b!61850 m!55331))

(assert (=> b!61850 m!55331))

(assert (=> b!61850 m!55333))

(assert (=> bm!4663 d!12413))

(assert (=> d!12067 d!12123))

(declare-fun d!12415 () Bool)

(assert (=> d!12415 (= (get!1078 (getValueByKey!125 (toList!700 lt!25010) lt!25005)) (v!2407 (getValueByKey!125 (toList!700 lt!25010) lt!25005)))))

(assert (=> d!12033 d!12415))

(declare-fun b!61851 () Bool)

(declare-fun e!40610 () Option!131)

(assert (=> b!61851 (= e!40610 (Some!130 (_2!1027 (h!2014 (toList!700 lt!25010)))))))

(declare-fun d!12417 () Bool)

(declare-fun c!8187 () Bool)

(assert (=> d!12417 (= c!8187 (and ((_ is Cons!1432) (toList!700 lt!25010)) (= (_1!1027 (h!2014 (toList!700 lt!25010))) lt!25005)))))

(assert (=> d!12417 (= (getValueByKey!125 (toList!700 lt!25010) lt!25005) e!40610)))

(declare-fun b!61852 () Bool)

(declare-fun e!40611 () Option!131)

(assert (=> b!61852 (= e!40610 e!40611)))

(declare-fun c!8188 () Bool)

(assert (=> b!61852 (= c!8188 (and ((_ is Cons!1432) (toList!700 lt!25010)) (not (= (_1!1027 (h!2014 (toList!700 lt!25010))) lt!25005))))))

(declare-fun b!61854 () Bool)

(assert (=> b!61854 (= e!40611 None!129)))

(declare-fun b!61853 () Bool)

(assert (=> b!61853 (= e!40611 (getValueByKey!125 (t!4806 (toList!700 lt!25010)) lt!25005))))

(assert (= (and d!12417 c!8187) b!61851))

(assert (= (and d!12417 (not c!8187)) b!61852))

(assert (= (and b!61852 c!8188) b!61853))

(assert (= (and b!61852 (not c!8188)) b!61854))

(declare-fun m!55335 () Bool)

(assert (=> b!61853 m!55335))

(assert (=> d!12033 d!12417))

(declare-fun d!12419 () Bool)

(assert (=> d!12419 (= (isEmpty!297 (getValueByKey!125 (toList!700 lt!24826) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355))) (not ((_ is Some!130) (getValueByKey!125 (toList!700 lt!24826) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))))

(assert (=> d!12061 d!12419))

(declare-fun d!12421 () Bool)

(declare-fun e!40612 () Bool)

(assert (=> d!12421 e!40612))

(declare-fun res!34032 () Bool)

(assert (=> d!12421 (=> (not res!34032) (not e!40612))))

(declare-fun lt!25714 () ListLongMap!1369)

(assert (=> d!12421 (= res!34032 (contains!686 lt!25714 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(declare-fun lt!25715 () List!1436)

(assert (=> d!12421 (= lt!25714 (ListLongMap!1370 lt!25715))))

(declare-fun lt!25713 () Unit!1625)

(declare-fun lt!25716 () Unit!1625)

(assert (=> d!12421 (= lt!25713 lt!25716)))

(assert (=> d!12421 (= (getValueByKey!125 lt!25715 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))) (Some!130 (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(assert (=> d!12421 (= lt!25716 (lemmaContainsTupThenGetReturnValue!42 lt!25715 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(assert (=> d!12421 (= lt!25715 (insertStrictlySorted!45 (toList!700 call!4703) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))))))

(assert (=> d!12421 (= (+!82 call!4703 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))) lt!25714)))

(declare-fun b!61855 () Bool)

(declare-fun res!34033 () Bool)

(assert (=> b!61855 (=> (not res!34033) (not e!40612))))

(assert (=> b!61855 (= res!34033 (= (getValueByKey!125 (toList!700 lt!25714) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16)))) (Some!130 (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))))

(declare-fun b!61856 () Bool)

(assert (=> b!61856 (= e!40612 (contains!688 (toList!700 lt!25714) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 newMap!16))))))

(assert (= (and d!12421 res!34032) b!61855))

(assert (= (and b!61855 res!34033) b!61856))

(declare-fun m!55337 () Bool)

(assert (=> d!12421 m!55337))

(declare-fun m!55339 () Bool)

(assert (=> d!12421 m!55339))

(declare-fun m!55341 () Bool)

(assert (=> d!12421 m!55341))

(declare-fun m!55343 () Bool)

(assert (=> d!12421 m!55343))

(declare-fun m!55345 () Bool)

(assert (=> b!61855 m!55345))

(declare-fun m!55347 () Bool)

(assert (=> b!61856 m!55347))

(assert (=> b!61184 d!12421))

(declare-fun d!12423 () Bool)

(declare-fun e!40613 () Bool)

(assert (=> d!12423 e!40613))

(declare-fun res!34034 () Bool)

(assert (=> d!12423 (=> res!34034 e!40613)))

(declare-fun lt!25720 () Bool)

(assert (=> d!12423 (= res!34034 (not lt!25720))))

(declare-fun lt!25719 () Bool)

(assert (=> d!12423 (= lt!25720 lt!25719)))

(declare-fun lt!25718 () Unit!1625)

(declare-fun e!40614 () Unit!1625)

(assert (=> d!12423 (= lt!25718 e!40614)))

(declare-fun c!8189 () Bool)

(assert (=> d!12423 (= c!8189 lt!25719)))

(assert (=> d!12423 (= lt!25719 (containsKey!129 (toList!700 (map!1112 (_2!1026 lt!25311))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(assert (=> d!12423 (= (contains!686 (map!1112 (_2!1026 lt!25311)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) lt!25720)))

(declare-fun b!61857 () Bool)

(declare-fun lt!25717 () Unit!1625)

(assert (=> b!61857 (= e!40614 lt!25717)))

(assert (=> b!61857 (= lt!25717 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 (map!1112 (_2!1026 lt!25311))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(assert (=> b!61857 (isDefined!78 (getValueByKey!125 (toList!700 (map!1112 (_2!1026 lt!25311))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(declare-fun b!61858 () Bool)

(declare-fun Unit!1669 () Unit!1625)

(assert (=> b!61858 (= e!40614 Unit!1669)))

(declare-fun b!61859 () Bool)

(assert (=> b!61859 (= e!40613 (isDefined!78 (getValueByKey!125 (toList!700 (map!1112 (_2!1026 lt!25311))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355))))))

(assert (= (and d!12423 c!8189) b!61857))

(assert (= (and d!12423 (not c!8189)) b!61858))

(assert (= (and d!12423 (not res!34034)) b!61859))

(assert (=> d!12423 m!53313))

(declare-fun m!55349 () Bool)

(assert (=> d!12423 m!55349))

(assert (=> b!61857 m!53313))

(declare-fun m!55351 () Bool)

(assert (=> b!61857 m!55351))

(assert (=> b!61857 m!53313))

(declare-fun m!55353 () Bool)

(assert (=> b!61857 m!55353))

(assert (=> b!61857 m!55353))

(declare-fun m!55355 () Bool)

(assert (=> b!61857 m!55355))

(assert (=> b!61859 m!53313))

(assert (=> b!61859 m!55353))

(assert (=> b!61859 m!55353))

(assert (=> b!61859 m!55355))

(assert (=> b!61255 d!12423))

(assert (=> b!61255 d!12105))

(declare-fun d!12425 () Bool)

(declare-fun e!40615 () Bool)

(assert (=> d!12425 e!40615))

(declare-fun res!34035 () Bool)

(assert (=> d!12425 (=> res!34035 e!40615)))

(declare-fun lt!25724 () Bool)

(assert (=> d!12425 (= res!34035 (not lt!25724))))

(declare-fun lt!25723 () Bool)

(assert (=> d!12425 (= lt!25724 lt!25723)))

(declare-fun lt!25722 () Unit!1625)

(declare-fun e!40616 () Unit!1625)

(assert (=> d!12425 (= lt!25722 e!40616)))

(declare-fun c!8190 () Bool)

(assert (=> d!12425 (= c!8190 lt!25723)))

(assert (=> d!12425 (= lt!25723 (containsKey!129 (toList!700 lt!25069) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12425 (= (contains!686 lt!25069 #b0000000000000000000000000000000000000000000000000000000000000000) lt!25724)))

(declare-fun b!61860 () Bool)

(declare-fun lt!25721 () Unit!1625)

(assert (=> b!61860 (= e!40616 lt!25721)))

(assert (=> b!61860 (= lt!25721 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 lt!25069) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61860 (isDefined!78 (getValueByKey!125 (toList!700 lt!25069) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61861 () Bool)

(declare-fun Unit!1670 () Unit!1625)

(assert (=> b!61861 (= e!40616 Unit!1670)))

(declare-fun b!61862 () Bool)

(assert (=> b!61862 (= e!40615 (isDefined!78 (getValueByKey!125 (toList!700 lt!25069) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12425 c!8190) b!61860))

(assert (= (and d!12425 (not c!8190)) b!61861))

(assert (= (and d!12425 (not res!34035)) b!61862))

(declare-fun m!55357 () Bool)

(assert (=> d!12425 m!55357))

(declare-fun m!55359 () Bool)

(assert (=> b!61860 m!55359))

(declare-fun m!55361 () Bool)

(assert (=> b!61860 m!55361))

(assert (=> b!61860 m!55361))

(declare-fun m!55363 () Bool)

(assert (=> b!61860 m!55363))

(assert (=> b!61862 m!55361))

(assert (=> b!61862 m!55361))

(assert (=> b!61862 m!55363))

(assert (=> bm!4676 d!12425))

(declare-fun b!61863 () Bool)

(declare-fun e!40617 () Option!131)

(assert (=> b!61863 (= e!40617 (Some!130 (_2!1027 (h!2014 (toList!700 lt!25201)))))))

(declare-fun d!12427 () Bool)

(declare-fun c!8191 () Bool)

(assert (=> d!12427 (= c!8191 (and ((_ is Cons!1432) (toList!700 lt!25201)) (= (_1!1027 (h!2014 (toList!700 lt!25201))) (_1!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!12427 (= (getValueByKey!125 (toList!700 lt!25201) (_1!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!40617)))

(declare-fun b!61864 () Bool)

(declare-fun e!40618 () Option!131)

(assert (=> b!61864 (= e!40617 e!40618)))

(declare-fun c!8192 () Bool)

(assert (=> b!61864 (= c!8192 (and ((_ is Cons!1432) (toList!700 lt!25201)) (not (= (_1!1027 (h!2014 (toList!700 lt!25201))) (_1!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun b!61866 () Bool)

(assert (=> b!61866 (= e!40618 None!129)))

(declare-fun b!61865 () Bool)

(assert (=> b!61865 (= e!40618 (getValueByKey!125 (t!4806 (toList!700 lt!25201)) (_1!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!12427 c!8191) b!61863))

(assert (= (and d!12427 (not c!8191)) b!61864))

(assert (= (and b!61864 c!8192) b!61865))

(assert (= (and b!61864 (not c!8192)) b!61866))

(declare-fun m!55365 () Bool)

(assert (=> b!61865 m!55365))

(assert (=> b!61170 d!12427))

(declare-fun d!12429 () Bool)

(assert (=> d!12429 (= (validKeyInArray!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) (and (not (= (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!61167 d!12429))

(declare-fun b!61868 () Bool)

(declare-fun e!40620 () (_ BitVec 32))

(declare-fun e!40619 () (_ BitVec 32))

(assert (=> b!61868 (= e!40620 e!40619)))

(declare-fun c!8193 () Bool)

(assert (=> b!61868 (= c!8193 (validKeyInArray!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun bm!4796 () Bool)

(declare-fun call!4799 () (_ BitVec 32))

(assert (=> bm!4796 (= call!4799 (arrayCountValidKeys!0 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992))))))))

(declare-fun b!61869 () Bool)

(assert (=> b!61869 (= e!40620 #b00000000000000000000000000000000)))

(declare-fun b!61870 () Bool)

(assert (=> b!61870 (= e!40619 (bvadd #b00000000000000000000000000000001 call!4799))))

(declare-fun d!12431 () Bool)

(declare-fun lt!25725 () (_ BitVec 32))

(assert (=> d!12431 (and (bvsge lt!25725 #b00000000000000000000000000000000) (bvsle lt!25725 (bvsub (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) #b00000000000000000000000000000000)))))

(assert (=> d!12431 (= lt!25725 e!40620)))

(declare-fun c!8194 () Bool)

(assert (=> d!12431 (= c!8194 (bvsge #b00000000000000000000000000000000 (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992))))))))

(assert (=> d!12431 (and (bvsle #b00000000000000000000000000000000 (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992))))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992))))))))

(assert (=> d!12431 (= (arrayCountValidKeys!0 (_keys!3695 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000000000000000 (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992))))) lt!25725)))

(declare-fun b!61867 () Bool)

(assert (=> b!61867 (= e!40619 call!4799)))

(assert (= (and d!12431 c!8194) b!61869))

(assert (= (and d!12431 (not c!8194)) b!61868))

(assert (= (and b!61868 c!8193) b!61870))

(assert (= (and b!61868 (not c!8193)) b!61867))

(assert (= (or b!61870 b!61867) bm!4796))

(assert (=> b!61868 m!54405))

(assert (=> b!61868 m!54405))

(assert (=> b!61868 m!54407))

(declare-fun m!55367 () Bool)

(assert (=> bm!4796 m!55367))

(assert (=> b!60926 d!12431))

(declare-fun b!61871 () Bool)

(declare-fun e!40621 () Option!131)

(assert (=> b!61871 (= e!40621 (Some!130 (_2!1027 (h!2014 (toList!700 lt!25241)))))))

(declare-fun d!12433 () Bool)

(declare-fun c!8195 () Bool)

(assert (=> d!12433 (= c!8195 (and ((_ is Cons!1432) (toList!700 lt!25241)) (= (_1!1027 (h!2014 (toList!700 lt!25241))) (_1!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))))

(assert (=> d!12433 (= (getValueByKey!125 (toList!700 lt!25241) (_1!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))) e!40621)))

(declare-fun b!61872 () Bool)

(declare-fun e!40622 () Option!131)

(assert (=> b!61872 (= e!40621 e!40622)))

(declare-fun c!8196 () Bool)

(assert (=> b!61872 (= c!8196 (and ((_ is Cons!1432) (toList!700 lt!25241)) (not (= (_1!1027 (h!2014 (toList!700 lt!25241))) (_1!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))))

(declare-fun b!61874 () Bool)

(assert (=> b!61874 (= e!40622 None!129)))

(declare-fun b!61873 () Bool)

(assert (=> b!61873 (= e!40622 (getValueByKey!125 (t!4806 (toList!700 lt!25241)) (_1!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (= (and d!12433 c!8195) b!61871))

(assert (= (and d!12433 (not c!8195)) b!61872))

(assert (= (and b!61872 c!8196) b!61873))

(assert (= (and b!61872 (not c!8196)) b!61874))

(declare-fun m!55369 () Bool)

(assert (=> b!61873 m!55369))

(assert (=> b!61207 d!12433))

(declare-fun d!12435 () Bool)

(assert (=> d!12435 (contains!686 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355))))

(declare-fun lt!25728 () Unit!1625)

(declare-fun choose!327 (array!3747 array!3749 (_ BitVec 32) (_ BitVec 32) V!2859 V!2859 (_ BitVec 64) (_ BitVec 32) Int) Unit!1625)

(assert (=> d!12435 (= lt!25728 (choose!327 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(assert (=> d!12435 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12435 (= (lemmaArrayContainsKeyThenInListMap!6 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) lt!25728)))

(declare-fun bs!2692 () Bool)

(assert (= bs!2692 d!12435))

(assert (=> bs!2692 m!53489))

(assert (=> bs!2692 m!53489))

(assert (=> bs!2692 m!53313))

(assert (=> bs!2692 m!54109))

(assert (=> bs!2692 m!53313))

(declare-fun m!55371 () Bool)

(assert (=> bs!2692 m!55371))

(assert (=> bs!2692 m!53559))

(assert (=> b!61248 d!12435))

(assert (=> b!61248 d!12273))

(assert (=> b!61248 d!11991))

(assert (=> b!61142 d!12109))

(declare-fun d!12437 () Bool)

(assert (=> d!12437 (contains!686 (getCurrentListMap!405 (_keys!3695 newMap!16) lt!24925 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (select (arr!1793 (_keys!3695 newMap!16)) (index!3037 lt!24947)))))

(assert (=> d!12437 true))

(declare-fun _$16!81 () Unit!1625)

(assert (=> d!12437 (= (choose!323 (_keys!3695 newMap!16) lt!24925 (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (index!3037 lt!24947) (defaultEntry!2067 newMap!16)) _$16!81)))

(declare-fun bs!2693 () Bool)

(assert (= bs!2693 d!12437))

(assert (=> bs!2693 m!54019))

(assert (=> bs!2693 m!53453))

(assert (=> bs!2693 m!54019))

(assert (=> bs!2693 m!53453))

(assert (=> bs!2693 m!54021))

(assert (=> d!12089 d!12437))

(assert (=> d!12089 d!12123))

(declare-fun d!12439 () Bool)

(assert (=> d!12439 (= (apply!67 lt!25069 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1078 (getValueByKey!125 (toList!700 lt!25069) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2694 () Bool)

(assert (= bs!2694 d!12439))

(assert (=> bs!2694 m!55361))

(assert (=> bs!2694 m!55361))

(declare-fun m!55373 () Bool)

(assert (=> bs!2694 m!55373))

(assert (=> b!60995 d!12439))

(declare-fun d!12441 () Bool)

(declare-fun e!40623 () Bool)

(assert (=> d!12441 e!40623))

(declare-fun res!34036 () Bool)

(assert (=> d!12441 (=> res!34036 e!40623)))

(declare-fun lt!25732 () Bool)

(assert (=> d!12441 (= res!34036 (not lt!25732))))

(declare-fun lt!25731 () Bool)

(assert (=> d!12441 (= lt!25732 lt!25731)))

(declare-fun lt!25730 () Unit!1625)

(declare-fun e!40624 () Unit!1625)

(assert (=> d!12441 (= lt!25730 e!40624)))

(declare-fun c!8197 () Bool)

(assert (=> d!12441 (= c!8197 lt!25731)))

(assert (=> d!12441 (= lt!25731 (containsKey!129 (toList!700 lt!25201) (_1!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!12441 (= (contains!686 lt!25201 (_1!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!25732)))

(declare-fun b!61875 () Bool)

(declare-fun lt!25729 () Unit!1625)

(assert (=> b!61875 (= e!40624 lt!25729)))

(assert (=> b!61875 (= lt!25729 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 lt!25201) (_1!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!61875 (isDefined!78 (getValueByKey!125 (toList!700 lt!25201) (_1!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!61876 () Bool)

(declare-fun Unit!1671 () Unit!1625)

(assert (=> b!61876 (= e!40624 Unit!1671)))

(declare-fun b!61877 () Bool)

(assert (=> b!61877 (= e!40623 (isDefined!78 (getValueByKey!125 (toList!700 lt!25201) (_1!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!12441 c!8197) b!61875))

(assert (= (and d!12441 (not c!8197)) b!61876))

(assert (= (and d!12441 (not res!34036)) b!61877))

(declare-fun m!55375 () Bool)

(assert (=> d!12441 m!55375))

(declare-fun m!55377 () Bool)

(assert (=> b!61875 m!55377))

(assert (=> b!61875 m!54003))

(assert (=> b!61875 m!54003))

(declare-fun m!55379 () Bool)

(assert (=> b!61875 m!55379))

(assert (=> b!61877 m!54003))

(assert (=> b!61877 m!54003))

(assert (=> b!61877 m!55379))

(assert (=> d!12079 d!12441))

(declare-fun b!61878 () Bool)

(declare-fun e!40625 () Option!131)

(assert (=> b!61878 (= e!40625 (Some!130 (_2!1027 (h!2014 lt!25202))))))

(declare-fun c!8198 () Bool)

(declare-fun d!12443 () Bool)

(assert (=> d!12443 (= c!8198 (and ((_ is Cons!1432) lt!25202) (= (_1!1027 (h!2014 lt!25202)) (_1!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!12443 (= (getValueByKey!125 lt!25202 (_1!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!40625)))

(declare-fun b!61879 () Bool)

(declare-fun e!40626 () Option!131)

(assert (=> b!61879 (= e!40625 e!40626)))

(declare-fun c!8199 () Bool)

(assert (=> b!61879 (= c!8199 (and ((_ is Cons!1432) lt!25202) (not (= (_1!1027 (h!2014 lt!25202)) (_1!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun b!61881 () Bool)

(assert (=> b!61881 (= e!40626 None!129)))

(declare-fun b!61880 () Bool)

(assert (=> b!61880 (= e!40626 (getValueByKey!125 (t!4806 lt!25202) (_1!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!12443 c!8198) b!61878))

(assert (= (and d!12443 (not c!8198)) b!61879))

(assert (= (and b!61879 c!8199) b!61880))

(assert (= (and b!61879 (not c!8199)) b!61881))

(declare-fun m!55381 () Bool)

(assert (=> b!61880 m!55381))

(assert (=> d!12079 d!12443))

(declare-fun d!12445 () Bool)

(assert (=> d!12445 (= (getValueByKey!125 lt!25202 (_1!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!130 (_2!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!25733 () Unit!1625)

(assert (=> d!12445 (= lt!25733 (choose!325 lt!25202 (_1!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!40627 () Bool)

(assert (=> d!12445 e!40627))

(declare-fun res!34037 () Bool)

(assert (=> d!12445 (=> (not res!34037) (not e!40627))))

(assert (=> d!12445 (= res!34037 (isStrictlySorted!285 lt!25202))))

(assert (=> d!12445 (= (lemmaContainsTupThenGetReturnValue!42 lt!25202 (_1!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!25733)))

(declare-fun b!61882 () Bool)

(declare-fun res!34038 () Bool)

(assert (=> b!61882 (=> (not res!34038) (not e!40627))))

(assert (=> b!61882 (= res!34038 (containsKey!129 lt!25202 (_1!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!61883 () Bool)

(assert (=> b!61883 (= e!40627 (contains!688 lt!25202 (tuple2!2033 (_1!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!12445 res!34037) b!61882))

(assert (= (and b!61882 res!34038) b!61883))

(assert (=> d!12445 m!53997))

(declare-fun m!55383 () Bool)

(assert (=> d!12445 m!55383))

(declare-fun m!55385 () Bool)

(assert (=> d!12445 m!55385))

(declare-fun m!55387 () Bool)

(assert (=> b!61882 m!55387))

(declare-fun m!55389 () Bool)

(assert (=> b!61883 m!55389))

(assert (=> d!12079 d!12445))

(declare-fun e!40630 () Bool)

(declare-fun lt!25734 () List!1436)

(declare-fun b!61884 () Bool)

(assert (=> b!61884 (= e!40630 (contains!688 lt!25734 (tuple2!2033 (_1!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun call!4800 () List!1436)

(declare-fun e!40628 () List!1436)

(declare-fun c!8201 () Bool)

(declare-fun bm!4797 () Bool)

(assert (=> bm!4797 (= call!4800 ($colon$colon!61 e!40628 (ite c!8201 (h!2014 (toList!700 (ite c!7909 (ite c!7899 call!4636 call!4620) call!4621))) (tuple2!2033 (_1!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun c!8200 () Bool)

(assert (=> bm!4797 (= c!8200 c!8201)))

(declare-fun b!61885 () Bool)

(declare-fun e!40632 () List!1436)

(assert (=> b!61885 (= e!40632 call!4800)))

(declare-fun bm!4798 () Bool)

(declare-fun call!4802 () List!1436)

(declare-fun call!4801 () List!1436)

(assert (=> bm!4798 (= call!4802 call!4801)))

(declare-fun b!61886 () Bool)

(declare-fun e!40629 () List!1436)

(assert (=> b!61886 (= e!40629 call!4802)))

(declare-fun b!61887 () Bool)

(assert (=> b!61887 (= e!40628 (insertStrictlySorted!45 (t!4806 (toList!700 (ite c!7909 (ite c!7899 call!4636 call!4620) call!4621))) (_1!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun bm!4799 () Bool)

(assert (=> bm!4799 (= call!4801 call!4800)))

(declare-fun b!61888 () Bool)

(assert (=> b!61888 (= e!40629 call!4802)))

(declare-fun d!12447 () Bool)

(assert (=> d!12447 e!40630))

(declare-fun res!34039 () Bool)

(assert (=> d!12447 (=> (not res!34039) (not e!40630))))

(assert (=> d!12447 (= res!34039 (isStrictlySorted!285 lt!25734))))

(assert (=> d!12447 (= lt!25734 e!40632)))

(assert (=> d!12447 (= c!8201 (and ((_ is Cons!1432) (toList!700 (ite c!7909 (ite c!7899 call!4636 call!4620) call!4621))) (bvslt (_1!1027 (h!2014 (toList!700 (ite c!7909 (ite c!7899 call!4636 call!4620) call!4621)))) (_1!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!12447 (isStrictlySorted!285 (toList!700 (ite c!7909 (ite c!7899 call!4636 call!4620) call!4621)))))

(assert (=> d!12447 (= (insertStrictlySorted!45 (toList!700 (ite c!7909 (ite c!7899 call!4636 call!4620) call!4621)) (_1!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!25734)))

(declare-fun b!61889 () Bool)

(declare-fun e!40631 () List!1436)

(assert (=> b!61889 (= e!40631 call!4801)))

(declare-fun c!8203 () Bool)

(declare-fun b!61890 () Bool)

(assert (=> b!61890 (= c!8203 (and ((_ is Cons!1432) (toList!700 (ite c!7909 (ite c!7899 call!4636 call!4620) call!4621))) (bvsgt (_1!1027 (h!2014 (toList!700 (ite c!7909 (ite c!7899 call!4636 call!4620) call!4621)))) (_1!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> b!61890 (= e!40631 e!40629)))

(declare-fun b!61891 () Bool)

(declare-fun res!34040 () Bool)

(assert (=> b!61891 (=> (not res!34040) (not e!40630))))

(assert (=> b!61891 (= res!34040 (containsKey!129 lt!25734 (_1!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!61892 () Bool)

(assert (=> b!61892 (= e!40632 e!40631)))

(declare-fun c!8202 () Bool)

(assert (=> b!61892 (= c!8202 (and ((_ is Cons!1432) (toList!700 (ite c!7909 (ite c!7899 call!4636 call!4620) call!4621))) (= (_1!1027 (h!2014 (toList!700 (ite c!7909 (ite c!7899 call!4636 call!4620) call!4621)))) (_1!1027 (ite c!7909 (ite c!7899 (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!61893 () Bool)

(assert (=> b!61893 (= e!40628 (ite c!8202 (t!4806 (toList!700 (ite c!7909 (ite c!7899 call!4636 call!4620) call!4621))) (ite c!8203 (Cons!1432 (h!2014 (toList!700 (ite c!7909 (ite c!7899 call!4636 call!4620) call!4621))) (t!4806 (toList!700 (ite c!7909 (ite c!7899 call!4636 call!4620) call!4621)))) Nil!1433)))))

(assert (= (and d!12447 c!8201) b!61885))

(assert (= (and d!12447 (not c!8201)) b!61892))

(assert (= (and b!61892 c!8202) b!61889))

(assert (= (and b!61892 (not c!8202)) b!61890))

(assert (= (and b!61890 c!8203) b!61888))

(assert (= (and b!61890 (not c!8203)) b!61886))

(assert (= (or b!61888 b!61886) bm!4798))

(assert (= (or b!61889 bm!4798) bm!4799))

(assert (= (or b!61885 bm!4799) bm!4797))

(assert (= (and bm!4797 c!8200) b!61887))

(assert (= (and bm!4797 (not c!8200)) b!61893))

(assert (= (and d!12447 res!34039) b!61891))

(assert (= (and b!61891 res!34040) b!61884))

(declare-fun m!55391 () Bool)

(assert (=> bm!4797 m!55391))

(declare-fun m!55393 () Bool)

(assert (=> b!61891 m!55393))

(declare-fun m!55395 () Bool)

(assert (=> d!12447 m!55395))

(declare-fun m!55397 () Bool)

(assert (=> d!12447 m!55397))

(declare-fun m!55399 () Bool)

(assert (=> b!61887 m!55399))

(declare-fun m!55401 () Bool)

(assert (=> b!61884 m!55401))

(assert (=> d!12079 d!12447))

(declare-fun d!12449 () Bool)

(assert (=> d!12449 (= (inRange!0 (ite c!7954 (index!3036 lt!25063) (index!3039 lt!25063)) (mask!5963 newMap!16)) (and (bvsge (ite c!7954 (index!3036 lt!25063) (index!3039 lt!25063)) #b00000000000000000000000000000000) (bvslt (ite c!7954 (index!3036 lt!25063) (index!3039 lt!25063)) (bvadd (mask!5963 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4670 d!12449))

(declare-fun lt!25735 () Bool)

(declare-fun d!12451 () Bool)

(assert (=> d!12451 (= lt!25735 (select (content!66 (toList!700 lt!25134)) (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))

(declare-fun e!40634 () Bool)

(assert (=> d!12451 (= lt!25735 e!40634)))

(declare-fun res!34041 () Bool)

(assert (=> d!12451 (=> (not res!34041) (not e!40634))))

(assert (=> d!12451 (= res!34041 ((_ is Cons!1432) (toList!700 lt!25134)))))

(assert (=> d!12451 (= (contains!688 (toList!700 lt!25134) (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) lt!25735)))

(declare-fun b!61894 () Bool)

(declare-fun e!40633 () Bool)

(assert (=> b!61894 (= e!40634 e!40633)))

(declare-fun res!34042 () Bool)

(assert (=> b!61894 (=> res!34042 e!40633)))

(assert (=> b!61894 (= res!34042 (= (h!2014 (toList!700 lt!25134)) (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))

(declare-fun b!61895 () Bool)

(assert (=> b!61895 (= e!40633 (contains!688 (t!4806 (toList!700 lt!25134)) (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))

(assert (= (and d!12451 res!34041) b!61894))

(assert (= (and b!61894 (not res!34042)) b!61895))

(declare-fun m!55403 () Bool)

(assert (=> d!12451 m!55403))

(declare-fun m!55405 () Bool)

(assert (=> d!12451 m!55405))

(declare-fun m!55407 () Bool)

(assert (=> b!61895 m!55407))

(assert (=> b!61088 d!12451))

(declare-fun d!12453 () Bool)

(declare-fun res!34043 () Bool)

(declare-fun e!40635 () Bool)

(assert (=> d!12453 (=> res!34043 e!40635)))

(assert (=> d!12453 (= res!34043 (= (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(assert (=> d!12453 (= (arrayContainsKey!0 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) e!40635)))

(declare-fun b!61896 () Bool)

(declare-fun e!40636 () Bool)

(assert (=> b!61896 (= e!40635 e!40636)))

(declare-fun res!34044 () Bool)

(assert (=> b!61896 (=> (not res!34044) (not e!40636))))

(assert (=> b!61896 (= res!34044 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992))))))))

(declare-fun b!61897 () Bool)

(assert (=> b!61897 (= e!40636 (arrayContainsKey!0 (_keys!3695 (v!2404 (underlying!231 thiss!992))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!12453 (not res!34043)) b!61896))

(assert (= (and b!61896 res!34044) b!61897))

(declare-fun m!55409 () Bool)

(assert (=> d!12453 m!55409))

(assert (=> b!61897 m!53313))

(declare-fun m!55411 () Bool)

(assert (=> b!61897 m!55411))

(assert (=> b!61040 d!12453))

(assert (=> b!61180 d!12109))

(declare-fun d!12455 () Bool)

(assert (=> d!12455 (= (apply!67 lt!25037 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1078 (getValueByKey!125 (toList!700 lt!25037) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2695 () Bool)

(assert (= bs!2695 d!12455))

(declare-fun m!55413 () Bool)

(assert (=> bs!2695 m!55413))

(assert (=> bs!2695 m!55413))

(declare-fun m!55415 () Bool)

(assert (=> bs!2695 m!55415))

(assert (=> b!60943 d!12455))

(declare-fun d!12457 () Bool)

(declare-fun e!40637 () Bool)

(assert (=> d!12457 e!40637))

(declare-fun res!34045 () Bool)

(assert (=> d!12457 (=> (not res!34045) (not e!40637))))

(declare-fun lt!25737 () ListLongMap!1369)

(assert (=> d!12457 (= res!34045 (contains!686 lt!25737 (_1!1027 (ite (or c!7994 c!7995) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))))))))

(declare-fun lt!25738 () List!1436)

(assert (=> d!12457 (= lt!25737 (ListLongMap!1370 lt!25738))))

(declare-fun lt!25736 () Unit!1625)

(declare-fun lt!25739 () Unit!1625)

(assert (=> d!12457 (= lt!25736 lt!25739)))

(assert (=> d!12457 (= (getValueByKey!125 lt!25738 (_1!1027 (ite (or c!7994 c!7995) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))))) (Some!130 (_2!1027 (ite (or c!7994 c!7995) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))))))))

(assert (=> d!12457 (= lt!25739 (lemmaContainsTupThenGetReturnValue!42 lt!25738 (_1!1027 (ite (or c!7994 c!7995) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))) (_2!1027 (ite (or c!7994 c!7995) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))))))))

(assert (=> d!12457 (= lt!25738 (insertStrictlySorted!45 (toList!700 (ite c!7994 call!4689 (ite c!7995 call!4694 call!4693))) (_1!1027 (ite (or c!7994 c!7995) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))) (_2!1027 (ite (or c!7994 c!7995) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))))))))

(assert (=> d!12457 (= (+!82 (ite c!7994 call!4689 (ite c!7995 call!4694 call!4693)) (ite (or c!7994 c!7995) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))) lt!25737)))

(declare-fun b!61898 () Bool)

(declare-fun res!34046 () Bool)

(assert (=> b!61898 (=> (not res!34046) (not e!40637))))

(assert (=> b!61898 (= res!34046 (= (getValueByKey!125 (toList!700 lt!25737) (_1!1027 (ite (or c!7994 c!7995) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))))) (Some!130 (_2!1027 (ite (or c!7994 c!7995) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))))))))

(declare-fun b!61899 () Bool)

(assert (=> b!61899 (= e!40637 (contains!688 (toList!700 lt!25737) (ite (or c!7994 c!7995) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))))))

(assert (= (and d!12457 res!34045) b!61898))

(assert (= (and b!61898 res!34046) b!61899))

(declare-fun m!55417 () Bool)

(assert (=> d!12457 m!55417))

(declare-fun m!55419 () Bool)

(assert (=> d!12457 m!55419))

(declare-fun m!55421 () Bool)

(assert (=> d!12457 m!55421))

(declare-fun m!55423 () Bool)

(assert (=> d!12457 m!55423))

(declare-fun m!55425 () Bool)

(assert (=> b!61898 m!55425))

(declare-fun m!55427 () Bool)

(assert (=> b!61899 m!55427))

(assert (=> bm!4686 d!12457))

(declare-fun lt!25740 () Bool)

(declare-fun d!12459 () Bool)

(assert (=> d!12459 (= lt!25740 (select (content!66 (toList!700 lt!25155)) (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))))

(declare-fun e!40639 () Bool)

(assert (=> d!12459 (= lt!25740 e!40639)))

(declare-fun res!34047 () Bool)

(assert (=> d!12459 (=> (not res!34047) (not e!40639))))

(assert (=> d!12459 (= res!34047 ((_ is Cons!1432) (toList!700 lt!25155)))))

(assert (=> d!12459 (= (contains!688 (toList!700 lt!25155) (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))) lt!25740)))

(declare-fun b!61900 () Bool)

(declare-fun e!40638 () Bool)

(assert (=> b!61900 (= e!40639 e!40638)))

(declare-fun res!34048 () Bool)

(assert (=> b!61900 (=> res!34048 e!40638)))

(assert (=> b!61900 (= res!34048 (= (h!2014 (toList!700 lt!25155)) (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))))

(declare-fun b!61901 () Bool)

(assert (=> b!61901 (= e!40638 (contains!688 (t!4806 (toList!700 lt!25155)) (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))))

(assert (= (and d!12459 res!34047) b!61900))

(assert (= (and b!61900 (not res!34048)) b!61901))

(declare-fun m!55429 () Bool)

(assert (=> d!12459 m!55429))

(declare-fun m!55431 () Bool)

(assert (=> d!12459 m!55431))

(declare-fun m!55433 () Bool)

(assert (=> b!61901 m!55433))

(assert (=> b!61100 d!12459))

(declare-fun b!61903 () Bool)

(declare-fun res!34049 () Bool)

(declare-fun e!40640 () Bool)

(assert (=> b!61903 (=> (not res!34049) (not e!40640))))

(assert (=> b!61903 (= res!34049 (bvsge (size!2028 (_2!1026 lt!24941)) (_size!364 (_2!1026 lt!24941))))))

(declare-fun b!61905 () Bool)

(assert (=> b!61905 (= e!40640 (and (bvsge (extraKeys!1950 (_2!1026 lt!24941)) #b00000000000000000000000000000000) (bvsle (extraKeys!1950 (_2!1026 lt!24941)) #b00000000000000000000000000000011) (bvsge (_vacant!364 (_2!1026 lt!24941)) #b00000000000000000000000000000000)))))

(declare-fun d!12461 () Bool)

(declare-fun res!34051 () Bool)

(assert (=> d!12461 (=> (not res!34051) (not e!40640))))

(assert (=> d!12461 (= res!34051 (validMask!0 (mask!5963 (_2!1026 lt!24941))))))

(assert (=> d!12461 (= (simpleValid!43 (_2!1026 lt!24941)) e!40640)))

(declare-fun b!61904 () Bool)

(declare-fun res!34050 () Bool)

(assert (=> b!61904 (=> (not res!34050) (not e!40640))))

(assert (=> b!61904 (= res!34050 (= (size!2028 (_2!1026 lt!24941)) (bvadd (_size!364 (_2!1026 lt!24941)) (bvsdiv (bvadd (extraKeys!1950 (_2!1026 lt!24941)) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!61902 () Bool)

(declare-fun res!34052 () Bool)

(assert (=> b!61902 (=> (not res!34052) (not e!40640))))

(assert (=> b!61902 (= res!34052 (and (= (size!2025 (_values!2050 (_2!1026 lt!24941))) (bvadd (mask!5963 (_2!1026 lt!24941)) #b00000000000000000000000000000001)) (= (size!2024 (_keys!3695 (_2!1026 lt!24941))) (size!2025 (_values!2050 (_2!1026 lt!24941)))) (bvsge (_size!364 (_2!1026 lt!24941)) #b00000000000000000000000000000000) (bvsle (_size!364 (_2!1026 lt!24941)) (bvadd (mask!5963 (_2!1026 lt!24941)) #b00000000000000000000000000000001))))))

(assert (= (and d!12461 res!34051) b!61902))

(assert (= (and b!61902 res!34052) b!61903))

(assert (= (and b!61903 res!34049) b!61904))

(assert (= (and b!61904 res!34050) b!61905))

(declare-fun m!55435 () Bool)

(assert (=> b!61903 m!55435))

(declare-fun m!55437 () Bool)

(assert (=> d!12461 m!55437))

(assert (=> b!61904 m!55435))

(assert (=> d!12051 d!12461))

(assert (=> b!61080 d!12211))

(assert (=> bm!4697 d!12137))

(declare-fun d!12463 () Bool)

(declare-fun e!40641 () Bool)

(assert (=> d!12463 e!40641))

(declare-fun res!34053 () Bool)

(assert (=> d!12463 (=> (not res!34053) (not e!40641))))

(declare-fun lt!25742 () ListLongMap!1369)

(assert (=> d!12463 (= res!34053 (contains!686 lt!25742 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!25743 () List!1436)

(assert (=> d!12463 (= lt!25742 (ListLongMap!1370 lt!25743))))

(declare-fun lt!25741 () Unit!1625)

(declare-fun lt!25744 () Unit!1625)

(assert (=> d!12463 (= lt!25741 lt!25744)))

(assert (=> d!12463 (= (getValueByKey!125 lt!25743 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12463 (= lt!25744 (lemmaContainsTupThenGetReturnValue!42 lt!25743 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12463 (= lt!25743 (insertStrictlySorted!45 (toList!700 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16))) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12463 (= (+!82 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!25742)))

(declare-fun b!61906 () Bool)

(declare-fun res!34054 () Bool)

(assert (=> b!61906 (=> (not res!34054) (not e!40641))))

(assert (=> b!61906 (= res!34054 (= (getValueByKey!125 (toList!700 lt!25742) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!61907 () Bool)

(assert (=> b!61907 (= e!40641 (contains!688 (toList!700 lt!25742) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12463 res!34053) b!61906))

(assert (= (and b!61906 res!34054) b!61907))

(declare-fun m!55439 () Bool)

(assert (=> d!12463 m!55439))

(declare-fun m!55441 () Bool)

(assert (=> d!12463 m!55441))

(declare-fun m!55443 () Bool)

(assert (=> d!12463 m!55443))

(declare-fun m!55445 () Bool)

(assert (=> d!12463 m!55445))

(declare-fun m!55447 () Bool)

(assert (=> b!61906 m!55447))

(declare-fun m!55449 () Bool)

(assert (=> b!61907 m!55449))

(assert (=> d!11977 d!12463))

(assert (=> d!11977 d!11991))

(declare-fun b!61908 () Bool)

(declare-fun e!40648 () Bool)

(assert (=> b!61908 (= e!40648 (validKeyInArray!0 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61909 () Bool)

(declare-fun res!34055 () Bool)

(declare-fun e!40643 () Bool)

(assert (=> b!61909 (=> (not res!34055) (not e!40643))))

(declare-fun e!40646 () Bool)

(assert (=> b!61909 (= res!34055 e!40646)))

(declare-fun res!34063 () Bool)

(assert (=> b!61909 (=> res!34063 e!40646)))

(declare-fun e!40642 () Bool)

(assert (=> b!61909 (= res!34063 (not e!40642))))

(declare-fun res!34059 () Bool)

(assert (=> b!61909 (=> (not res!34059) (not e!40642))))

(assert (=> b!61909 (= res!34059 (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(declare-fun b!61910 () Bool)

(declare-fun e!40650 () Unit!1625)

(declare-fun Unit!1672 () Unit!1625)

(assert (=> b!61910 (= e!40650 Unit!1672)))

(declare-fun b!61911 () Bool)

(declare-fun c!8207 () Bool)

(assert (=> b!61911 (= c!8207 (and (not (= (bvand lt!24937 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!24937 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!40647 () ListLongMap!1369)

(declare-fun e!40649 () ListLongMap!1369)

(assert (=> b!61911 (= e!40647 e!40649)))

(declare-fun e!40654 () ListLongMap!1369)

(declare-fun call!4809 () ListLongMap!1369)

(declare-fun b!61912 () Bool)

(assert (=> b!61912 (= e!40654 (+!82 call!4809 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun bm!4800 () Bool)

(declare-fun call!4807 () ListLongMap!1369)

(declare-fun c!8206 () Bool)

(declare-fun call!4808 () ListLongMap!1369)

(declare-fun call!4803 () ListLongMap!1369)

(declare-fun c!8205 () Bool)

(assert (=> bm!4800 (= call!4809 (+!82 (ite c!8205 call!4803 (ite c!8206 call!4808 call!4807)) (ite (or c!8205 c!8206) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!61913 () Bool)

(declare-fun res!34058 () Bool)

(assert (=> b!61913 (=> (not res!34058) (not e!40643))))

(declare-fun e!40652 () Bool)

(assert (=> b!61913 (= res!34058 e!40652)))

(declare-fun c!8208 () Bool)

(assert (=> b!61913 (= c!8208 (not (= (bvand lt!24937 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun b!61914 () Bool)

(declare-fun e!40645 () Bool)

(declare-fun lt!25745 () ListLongMap!1369)

(assert (=> b!61914 (= e!40645 (= (apply!67 lt!25745 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1981 newMap!16)))))

(declare-fun bm!4801 () Bool)

(assert (=> bm!4801 (= call!4807 call!4808)))

(declare-fun b!61915 () Bool)

(assert (=> b!61915 (= e!40652 e!40645)))

(declare-fun res!34056 () Bool)

(declare-fun call!4805 () Bool)

(assert (=> b!61915 (= res!34056 call!4805)))

(assert (=> b!61915 (=> (not res!34056) (not e!40645))))

(declare-fun b!61916 () Bool)

(declare-fun e!40651 () Bool)

(assert (=> b!61916 (= e!40651 (= (apply!67 lt!25745 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!61917 () Bool)

(assert (=> b!61917 (= e!40649 call!4807)))

(declare-fun bm!4803 () Bool)

(assert (=> bm!4803 (= call!4803 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) lt!24937 (zeroValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun b!61918 () Bool)

(declare-fun e!40644 () Bool)

(assert (=> b!61918 (= e!40646 e!40644)))

(declare-fun res!34057 () Bool)

(assert (=> b!61918 (=> (not res!34057) (not e!40644))))

(assert (=> b!61918 (= res!34057 (contains!686 lt!25745 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61918 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(declare-fun bm!4804 () Bool)

(assert (=> bm!4804 (= call!4805 (contains!686 lt!25745 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61919 () Bool)

(declare-fun call!4806 () ListLongMap!1369)

(assert (=> b!61919 (= e!40649 call!4806)))

(declare-fun b!61920 () Bool)

(assert (=> b!61920 (= e!40644 (= (apply!67 lt!25745 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) (get!1075 (select (arr!1794 (_values!2050 newMap!16)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!61920 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2025 (_values!2050 newMap!16))))))

(assert (=> b!61920 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(declare-fun bm!4805 () Bool)

(assert (=> bm!4805 (= call!4806 call!4809)))

(declare-fun d!12465 () Bool)

(assert (=> d!12465 e!40643))

(declare-fun res!34060 () Bool)

(assert (=> d!12465 (=> (not res!34060) (not e!40643))))

(assert (=> d!12465 (= res!34060 (or (bvsge #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))))

(declare-fun lt!25761 () ListLongMap!1369)

(assert (=> d!12465 (= lt!25745 lt!25761)))

(declare-fun lt!25754 () Unit!1625)

(assert (=> d!12465 (= lt!25754 e!40650)))

(declare-fun c!8209 () Bool)

(assert (=> d!12465 (= c!8209 e!40648)))

(declare-fun res!34062 () Bool)

(assert (=> d!12465 (=> (not res!34062) (not e!40648))))

(assert (=> d!12465 (= res!34062 (bvslt #b00000000000000000000000000000000 (size!2024 (_keys!3695 newMap!16))))))

(assert (=> d!12465 (= lt!25761 e!40654)))

(assert (=> d!12465 (= c!8205 (and (not (= (bvand lt!24937 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!24937 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12465 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12465 (= (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) lt!24937 (zeroValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) lt!25745)))

(declare-fun bm!4802 () Bool)

(assert (=> bm!4802 (= call!4808 call!4803)))

(declare-fun b!61921 () Bool)

(declare-fun lt!25764 () Unit!1625)

(assert (=> b!61921 (= e!40650 lt!25764)))

(declare-fun lt!25756 () ListLongMap!1369)

(assert (=> b!61921 (= lt!25756 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) lt!24937 (zeroValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25746 () (_ BitVec 64))

(assert (=> b!61921 (= lt!25746 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25759 () (_ BitVec 64))

(assert (=> b!61921 (= lt!25759 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25766 () Unit!1625)

(assert (=> b!61921 (= lt!25766 (addStillContains!43 lt!25756 lt!25746 (zeroValue!1981 newMap!16) lt!25759))))

(assert (=> b!61921 (contains!686 (+!82 lt!25756 (tuple2!2033 lt!25746 (zeroValue!1981 newMap!16))) lt!25759)))

(declare-fun lt!25752 () Unit!1625)

(assert (=> b!61921 (= lt!25752 lt!25766)))

(declare-fun lt!25753 () ListLongMap!1369)

(assert (=> b!61921 (= lt!25753 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) lt!24937 (zeroValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25751 () (_ BitVec 64))

(assert (=> b!61921 (= lt!25751 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25765 () (_ BitVec 64))

(assert (=> b!61921 (= lt!25765 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25750 () Unit!1625)

(assert (=> b!61921 (= lt!25750 (addApplyDifferent!43 lt!25753 lt!25751 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!25765))))

(assert (=> b!61921 (= (apply!67 (+!82 lt!25753 (tuple2!2033 lt!25751 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!25765) (apply!67 lt!25753 lt!25765))))

(declare-fun lt!25749 () Unit!1625)

(assert (=> b!61921 (= lt!25749 lt!25750)))

(declare-fun lt!25760 () ListLongMap!1369)

(assert (=> b!61921 (= lt!25760 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) lt!24937 (zeroValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25747 () (_ BitVec 64))

(assert (=> b!61921 (= lt!25747 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25755 () (_ BitVec 64))

(assert (=> b!61921 (= lt!25755 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25762 () Unit!1625)

(assert (=> b!61921 (= lt!25762 (addApplyDifferent!43 lt!25760 lt!25747 (zeroValue!1981 newMap!16) lt!25755))))

(assert (=> b!61921 (= (apply!67 (+!82 lt!25760 (tuple2!2033 lt!25747 (zeroValue!1981 newMap!16))) lt!25755) (apply!67 lt!25760 lt!25755))))

(declare-fun lt!25763 () Unit!1625)

(assert (=> b!61921 (= lt!25763 lt!25762)))

(declare-fun lt!25748 () ListLongMap!1369)

(assert (=> b!61921 (= lt!25748 (getCurrentListMapNoExtraKeys!45 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) lt!24937 (zeroValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(declare-fun lt!25758 () (_ BitVec 64))

(assert (=> b!61921 (= lt!25758 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25757 () (_ BitVec 64))

(assert (=> b!61921 (= lt!25757 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!61921 (= lt!25764 (addApplyDifferent!43 lt!25748 lt!25758 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!25757))))

(assert (=> b!61921 (= (apply!67 (+!82 lt!25748 (tuple2!2033 lt!25758 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!25757) (apply!67 lt!25748 lt!25757))))

(declare-fun b!61922 () Bool)

(declare-fun e!40653 () Bool)

(declare-fun call!4804 () Bool)

(assert (=> b!61922 (= e!40653 (not call!4804))))

(declare-fun b!61923 () Bool)

(assert (=> b!61923 (= e!40647 call!4806)))

(declare-fun b!61924 () Bool)

(assert (=> b!61924 (= e!40642 (validKeyInArray!0 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61925 () Bool)

(assert (=> b!61925 (= e!40652 (not call!4805))))

(declare-fun bm!4806 () Bool)

(assert (=> bm!4806 (= call!4804 (contains!686 lt!25745 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61926 () Bool)

(assert (=> b!61926 (= e!40653 e!40651)))

(declare-fun res!34061 () Bool)

(assert (=> b!61926 (= res!34061 call!4804)))

(assert (=> b!61926 (=> (not res!34061) (not e!40651))))

(declare-fun b!61927 () Bool)

(assert (=> b!61927 (= e!40654 e!40647)))

(assert (=> b!61927 (= c!8206 (and (not (= (bvand lt!24937 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!24937 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!61928 () Bool)

(assert (=> b!61928 (= e!40643 e!40653)))

(declare-fun c!8204 () Bool)

(assert (=> b!61928 (= c!8204 (not (= (bvand lt!24937 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(assert (= (and d!12465 c!8205) b!61912))

(assert (= (and d!12465 (not c!8205)) b!61927))

(assert (= (and b!61927 c!8206) b!61923))

(assert (= (and b!61927 (not c!8206)) b!61911))

(assert (= (and b!61911 c!8207) b!61919))

(assert (= (and b!61911 (not c!8207)) b!61917))

(assert (= (or b!61919 b!61917) bm!4801))

(assert (= (or b!61923 bm!4801) bm!4802))

(assert (= (or b!61923 b!61919) bm!4805))

(assert (= (or b!61912 bm!4802) bm!4803))

(assert (= (or b!61912 bm!4805) bm!4800))

(assert (= (and d!12465 res!34062) b!61908))

(assert (= (and d!12465 c!8209) b!61921))

(assert (= (and d!12465 (not c!8209)) b!61910))

(assert (= (and d!12465 res!34060) b!61909))

(assert (= (and b!61909 res!34059) b!61924))

(assert (= (and b!61909 (not res!34063)) b!61918))

(assert (= (and b!61918 res!34057) b!61920))

(assert (= (and b!61909 res!34055) b!61913))

(assert (= (and b!61913 c!8208) b!61915))

(assert (= (and b!61913 (not c!8208)) b!61925))

(assert (= (and b!61915 res!34056) b!61914))

(assert (= (or b!61915 b!61925) bm!4804))

(assert (= (and b!61913 res!34058) b!61928))

(assert (= (and b!61928 c!8204) b!61926))

(assert (= (and b!61928 (not c!8204)) b!61922))

(assert (= (and b!61926 res!34061) b!61916))

(assert (= (or b!61926 b!61922) bm!4806))

(declare-fun b_lambda!2751 () Bool)

(assert (=> (not b_lambda!2751) (not b!61920)))

(assert (=> b!61920 t!4813))

(declare-fun b_and!3799 () Bool)

(assert (= b_and!3795 (and (=> t!4813 result!2427) b_and!3799)))

(assert (=> b!61920 t!4815))

(declare-fun b_and!3801 () Bool)

(assert (= b_and!3797 (and (=> t!4815 result!2429) b_and!3801)))

(declare-fun m!55451 () Bool)

(assert (=> bm!4800 m!55451))

(assert (=> bm!4803 m!53337))

(declare-fun m!55453 () Bool)

(assert (=> bm!4803 m!55453))

(declare-fun m!55455 () Bool)

(assert (=> b!61921 m!55455))

(declare-fun m!55457 () Bool)

(assert (=> b!61921 m!55457))

(declare-fun m!55459 () Bool)

(assert (=> b!61921 m!55459))

(declare-fun m!55461 () Bool)

(assert (=> b!61921 m!55461))

(assert (=> b!61921 m!53337))

(declare-fun m!55463 () Bool)

(assert (=> b!61921 m!55463))

(assert (=> b!61921 m!53617))

(declare-fun m!55465 () Bool)

(assert (=> b!61921 m!55465))

(declare-fun m!55467 () Bool)

(assert (=> b!61921 m!55467))

(declare-fun m!55469 () Bool)

(assert (=> b!61921 m!55469))

(assert (=> b!61921 m!53337))

(assert (=> b!61921 m!55453))

(assert (=> b!61921 m!55455))

(declare-fun m!55471 () Bool)

(assert (=> b!61921 m!55471))

(assert (=> b!61921 m!55459))

(assert (=> b!61921 m!53337))

(declare-fun m!55473 () Bool)

(assert (=> b!61921 m!55473))

(assert (=> b!61921 m!55467))

(declare-fun m!55475 () Bool)

(assert (=> b!61921 m!55475))

(declare-fun m!55477 () Bool)

(assert (=> b!61921 m!55477))

(declare-fun m!55479 () Bool)

(assert (=> b!61921 m!55479))

(declare-fun m!55481 () Bool)

(assert (=> b!61921 m!55481))

(assert (=> b!61921 m!55471))

(declare-fun m!55483 () Bool)

(assert (=> b!61921 m!55483))

(declare-fun m!55485 () Bool)

(assert (=> b!61914 m!55485))

(assert (=> b!61924 m!53617))

(assert (=> b!61924 m!53617))

(assert (=> b!61924 m!53641))

(assert (=> b!61920 m!53617))

(declare-fun m!55487 () Bool)

(assert (=> b!61920 m!55487))

(assert (=> b!61920 m!53645))

(assert (=> b!61920 m!53645))

(assert (=> b!61920 m!53647))

(assert (=> b!61920 m!53649))

(assert (=> b!61920 m!53617))

(assert (=> b!61920 m!53647))

(assert (=> b!61918 m!53617))

(assert (=> b!61918 m!53617))

(declare-fun m!55489 () Bool)

(assert (=> b!61918 m!55489))

(declare-fun m!55491 () Bool)

(assert (=> b!61916 m!55491))

(assert (=> b!61908 m!53617))

(assert (=> b!61908 m!53617))

(assert (=> b!61908 m!53641))

(declare-fun m!55493 () Bool)

(assert (=> b!61912 m!55493))

(declare-fun m!55495 () Bool)

(assert (=> bm!4804 m!55495))

(assert (=> d!12465 m!53559))

(declare-fun m!55497 () Bool)

(assert (=> bm!4806 m!55497))

(assert (=> d!11977 d!12465))

(assert (=> d!11977 d!12123))

(declare-fun d!12467 () Bool)

(assert (=> d!12467 (= (+!82 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) lt!24937 (zeroValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(assert (=> d!12467 true))

(declare-fun _$8!49 () Unit!1625)

(assert (=> d!12467 (= (choose!316 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) lt!24937 (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2067 newMap!16)) _$8!49)))

(declare-fun bs!2696 () Bool)

(assert (= bs!2696 d!12467))

(assert (=> bs!2696 m!53489))

(assert (=> bs!2696 m!53489))

(assert (=> bs!2696 m!53583))

(assert (=> bs!2696 m!53337))

(assert (=> bs!2696 m!53581))

(assert (=> d!11977 d!12467))

(declare-fun b!61929 () Bool)

(declare-fun e!40656 () Bool)

(declare-fun e!40655 () Bool)

(assert (=> b!61929 (= e!40656 e!40655)))

(declare-fun lt!25768 () (_ BitVec 64))

(assert (=> b!61929 (= lt!25768 (select (arr!1793 (_keys!3695 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(declare-fun lt!25769 () Unit!1625)

(assert (=> b!61929 (= lt!25769 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3695 newMap!16) lt!25768 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (=> b!61929 (arrayContainsKey!0 (_keys!3695 newMap!16) lt!25768 #b00000000000000000000000000000000)))

(declare-fun lt!25767 () Unit!1625)

(assert (=> b!61929 (= lt!25767 lt!25769)))

(declare-fun res!34064 () Bool)

(assert (=> b!61929 (= res!34064 (= (seekEntryOrOpen!0 (select (arr!1793 (_keys!3695 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (_keys!3695 newMap!16) (mask!5963 newMap!16)) (Found!228 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> b!61929 (=> (not res!34064) (not e!40655))))

(declare-fun d!12469 () Bool)

(declare-fun res!34065 () Bool)

(declare-fun e!40657 () Bool)

(assert (=> d!12469 (=> res!34065 e!40657)))

(assert (=> d!12469 (= res!34065 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2024 (_keys!3695 newMap!16))))))

(assert (=> d!12469 (= (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3695 newMap!16) (mask!5963 newMap!16)) e!40657)))

(declare-fun b!61930 () Bool)

(declare-fun call!4810 () Bool)

(assert (=> b!61930 (= e!40656 call!4810)))

(declare-fun b!61931 () Bool)

(assert (=> b!61931 (= e!40655 call!4810)))

(declare-fun b!61932 () Bool)

(assert (=> b!61932 (= e!40657 e!40656)))

(declare-fun c!8210 () Bool)

(assert (=> b!61932 (= c!8210 (validKeyInArray!0 (select (arr!1793 (_keys!3695 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun bm!4807 () Bool)

(assert (=> bm!4807 (= call!4810 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (_keys!3695 newMap!16) (mask!5963 newMap!16)))))

(assert (= (and d!12469 (not res!34065)) b!61932))

(assert (= (and b!61932 c!8210) b!61929))

(assert (= (and b!61932 (not c!8210)) b!61930))

(assert (= (and b!61929 res!34064) b!61931))

(assert (= (or b!61931 b!61930) bm!4807))

(declare-fun m!55499 () Bool)

(assert (=> b!61929 m!55499))

(declare-fun m!55501 () Bool)

(assert (=> b!61929 m!55501))

(declare-fun m!55503 () Bool)

(assert (=> b!61929 m!55503))

(assert (=> b!61929 m!55499))

(declare-fun m!55505 () Bool)

(assert (=> b!61929 m!55505))

(assert (=> b!61932 m!55499))

(assert (=> b!61932 m!55499))

(declare-fun m!55507 () Bool)

(assert (=> b!61932 m!55507))

(declare-fun m!55509 () Bool)

(assert (=> bm!4807 m!55509))

(assert (=> bm!4715 d!12469))

(declare-fun d!12471 () Bool)

(declare-fun e!40658 () Bool)

(assert (=> d!12471 e!40658))

(declare-fun res!34066 () Bool)

(assert (=> d!12471 (=> res!34066 e!40658)))

(declare-fun lt!25773 () Bool)

(assert (=> d!12471 (= res!34066 (not lt!25773))))

(declare-fun lt!25772 () Bool)

(assert (=> d!12471 (= lt!25773 lt!25772)))

(declare-fun lt!25771 () Unit!1625)

(declare-fun e!40659 () Unit!1625)

(assert (=> d!12471 (= lt!25771 e!40659)))

(declare-fun c!8211 () Bool)

(assert (=> d!12471 (= c!8211 lt!25772)))

(assert (=> d!12471 (= lt!25772 (containsKey!129 (toList!700 lt!25037) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12471 (= (contains!686 lt!25037 #b1000000000000000000000000000000000000000000000000000000000000000) lt!25773)))

(declare-fun b!61933 () Bool)

(declare-fun lt!25770 () Unit!1625)

(assert (=> b!61933 (= e!40659 lt!25770)))

(assert (=> b!61933 (= lt!25770 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 lt!25037) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61933 (isDefined!78 (getValueByKey!125 (toList!700 lt!25037) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61934 () Bool)

(declare-fun Unit!1673 () Unit!1625)

(assert (=> b!61934 (= e!40659 Unit!1673)))

(declare-fun b!61935 () Bool)

(assert (=> b!61935 (= e!40658 (isDefined!78 (getValueByKey!125 (toList!700 lt!25037) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12471 c!8211) b!61933))

(assert (= (and d!12471 (not c!8211)) b!61934))

(assert (= (and d!12471 (not res!34066)) b!61935))

(declare-fun m!55511 () Bool)

(assert (=> d!12471 m!55511))

(declare-fun m!55513 () Bool)

(assert (=> b!61933 m!55513))

(assert (=> b!61933 m!55413))

(assert (=> b!61933 m!55413))

(declare-fun m!55515 () Bool)

(assert (=> b!61933 m!55515))

(assert (=> b!61935 m!55413))

(assert (=> b!61935 m!55413))

(assert (=> b!61935 m!55515))

(assert (=> bm!4665 d!12471))

(declare-fun d!12473 () Bool)

(assert (=> d!12473 (= (apply!67 lt!25037 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1078 (getValueByKey!125 (toList!700 lt!25037) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2697 () Bool)

(assert (= bs!2697 d!12473))

(assert (=> bs!2697 m!55331))

(assert (=> bs!2697 m!55331))

(declare-fun m!55517 () Bool)

(assert (=> bs!2697 m!55517))

(assert (=> b!60941 d!12473))

(declare-fun d!12475 () Bool)

(declare-fun e!40660 () Bool)

(assert (=> d!12475 e!40660))

(declare-fun res!34067 () Bool)

(assert (=> d!12475 (=> res!34067 e!40660)))

(declare-fun lt!25777 () Bool)

(assert (=> d!12475 (= res!34067 (not lt!25777))))

(declare-fun lt!25776 () Bool)

(assert (=> d!12475 (= lt!25777 lt!25776)))

(declare-fun lt!25775 () Unit!1625)

(declare-fun e!40661 () Unit!1625)

(assert (=> d!12475 (= lt!25775 e!40661)))

(declare-fun c!8212 () Bool)

(assert (=> d!12475 (= c!8212 lt!25776)))

(assert (=> d!12475 (= lt!25776 (containsKey!129 (toList!700 lt!25069) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12475 (= (contains!686 lt!25069 #b1000000000000000000000000000000000000000000000000000000000000000) lt!25777)))

(declare-fun b!61936 () Bool)

(declare-fun lt!25774 () Unit!1625)

(assert (=> b!61936 (= e!40661 lt!25774)))

(assert (=> b!61936 (= lt!25774 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 lt!25069) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61936 (isDefined!78 (getValueByKey!125 (toList!700 lt!25069) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61937 () Bool)

(declare-fun Unit!1674 () Unit!1625)

(assert (=> b!61937 (= e!40661 Unit!1674)))

(declare-fun b!61938 () Bool)

(assert (=> b!61938 (= e!40660 (isDefined!78 (getValueByKey!125 (toList!700 lt!25069) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12475 c!8212) b!61936))

(assert (= (and d!12475 (not c!8212)) b!61937))

(assert (= (and d!12475 (not res!34067)) b!61938))

(declare-fun m!55519 () Bool)

(assert (=> d!12475 m!55519))

(declare-fun m!55521 () Bool)

(assert (=> b!61936 m!55521))

(assert (=> b!61936 m!55323))

(assert (=> b!61936 m!55323))

(declare-fun m!55523 () Bool)

(assert (=> b!61936 m!55523))

(assert (=> b!61938 m!55323))

(assert (=> b!61938 m!55323))

(assert (=> b!61938 m!55523))

(assert (=> bm!4678 d!12475))

(declare-fun d!12477 () Bool)

(assert (=> d!12477 (= (get!1076 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2403 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!61107 d!12477))

(declare-fun d!12479 () Bool)

(assert (=> d!12479 (= (apply!67 lt!25211 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) (get!1078 (getValueByKey!125 (toList!700 lt!25211) (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2698 () Bool)

(assert (= bs!2698 d!12479))

(assert (=> bs!2698 m!53617))

(assert (=> bs!2698 m!55055))

(assert (=> bs!2698 m!55055))

(declare-fun m!55525 () Bool)

(assert (=> bs!2698 m!55525))

(assert (=> b!61192 d!12479))

(declare-fun d!12481 () Bool)

(declare-fun c!8213 () Bool)

(assert (=> d!12481 (= c!8213 ((_ is ValueCellFull!861) (select (arr!1794 (array!3750 (store (arr!1794 (_values!2050 newMap!16)) (index!3037 lt!24947) (ValueCellFull!861 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2025 (_values!2050 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun e!40662 () V!2859)

(assert (=> d!12481 (= (get!1075 (select (arr!1794 (array!3750 (store (arr!1794 (_values!2050 newMap!16)) (index!3037 lt!24947) (ValueCellFull!861 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2025 (_values!2050 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!40662)))

(declare-fun b!61939 () Bool)

(assert (=> b!61939 (= e!40662 (get!1076 (select (arr!1794 (array!3750 (store (arr!1794 (_values!2050 newMap!16)) (index!3037 lt!24947) (ValueCellFull!861 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2025 (_values!2050 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!61940 () Bool)

(assert (=> b!61940 (= e!40662 (get!1077 (select (arr!1794 (array!3750 (store (arr!1794 (_values!2050 newMap!16)) (index!3037 lt!24947) (ValueCellFull!861 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2025 (_values!2050 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12481 c!8213) b!61939))

(assert (= (and d!12481 (not c!8213)) b!61940))

(assert (=> b!61939 m!54061))

(assert (=> b!61939 m!53647))

(declare-fun m!55527 () Bool)

(assert (=> b!61939 m!55527))

(assert (=> b!61940 m!54061))

(assert (=> b!61940 m!53647))

(declare-fun m!55529 () Bool)

(assert (=> b!61940 m!55529))

(assert (=> b!61192 d!12481))

(assert (=> b!61162 d!12401))

(assert (=> b!60988 d!12221))

(assert (=> b!60988 d!12223))

(assert (=> d!12031 d!12021))

(assert (=> d!12031 d!12043))

(declare-fun d!12483 () Bool)

(assert (=> d!12483 (contains!686 (+!82 lt!25006 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))) lt!25009)))

(assert (=> d!12483 true))

(declare-fun _$35!303 () Unit!1625)

(assert (=> d!12483 (= (choose!319 lt!25006 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))) lt!25009) _$35!303)))

(declare-fun bs!2699 () Bool)

(assert (= bs!2699 d!12483))

(assert (=> bs!2699 m!53495))

(assert (=> bs!2699 m!53495))

(assert (=> bs!2699 m!53497))

(assert (=> d!12031 d!12483))

(declare-fun d!12485 () Bool)

(declare-fun e!40663 () Bool)

(assert (=> d!12485 e!40663))

(declare-fun res!34068 () Bool)

(assert (=> d!12485 (=> res!34068 e!40663)))

(declare-fun lt!25781 () Bool)

(assert (=> d!12485 (= res!34068 (not lt!25781))))

(declare-fun lt!25780 () Bool)

(assert (=> d!12485 (= lt!25781 lt!25780)))

(declare-fun lt!25779 () Unit!1625)

(declare-fun e!40664 () Unit!1625)

(assert (=> d!12485 (= lt!25779 e!40664)))

(declare-fun c!8214 () Bool)

(assert (=> d!12485 (= c!8214 lt!25780)))

(assert (=> d!12485 (= lt!25780 (containsKey!129 (toList!700 lt!25006) lt!25009))))

(assert (=> d!12485 (= (contains!686 lt!25006 lt!25009) lt!25781)))

(declare-fun b!61942 () Bool)

(declare-fun lt!25778 () Unit!1625)

(assert (=> b!61942 (= e!40664 lt!25778)))

(assert (=> b!61942 (= lt!25778 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 lt!25006) lt!25009))))

(assert (=> b!61942 (isDefined!78 (getValueByKey!125 (toList!700 lt!25006) lt!25009))))

(declare-fun b!61943 () Bool)

(declare-fun Unit!1675 () Unit!1625)

(assert (=> b!61943 (= e!40664 Unit!1675)))

(declare-fun b!61944 () Bool)

(assert (=> b!61944 (= e!40663 (isDefined!78 (getValueByKey!125 (toList!700 lt!25006) lt!25009)))))

(assert (= (and d!12485 c!8214) b!61942))

(assert (= (and d!12485 (not c!8214)) b!61943))

(assert (= (and d!12485 (not res!34068)) b!61944))

(declare-fun m!55531 () Bool)

(assert (=> d!12485 m!55531))

(declare-fun m!55533 () Bool)

(assert (=> b!61942 m!55533))

(declare-fun m!55535 () Bool)

(assert (=> b!61942 m!55535))

(assert (=> b!61942 m!55535))

(declare-fun m!55537 () Bool)

(assert (=> b!61942 m!55537))

(assert (=> b!61944 m!55535))

(assert (=> b!61944 m!55535))

(assert (=> b!61944 m!55537))

(assert (=> d!12031 d!12485))

(declare-fun d!12487 () Bool)

(declare-fun res!34069 () Bool)

(declare-fun e!40665 () Bool)

(assert (=> d!12487 (=> res!34069 e!40665)))

(assert (=> d!12487 (= res!34069 (and ((_ is Cons!1432) (toList!700 lt!24995)) (= (_1!1027 (h!2014 (toList!700 lt!24995))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12487 (= (containsKey!129 (toList!700 lt!24995) #b0000000000000000000000000000000000000000000000000000000000000000) e!40665)))

(declare-fun b!61945 () Bool)

(declare-fun e!40666 () Bool)

(assert (=> b!61945 (= e!40665 e!40666)))

(declare-fun res!34070 () Bool)

(assert (=> b!61945 (=> (not res!34070) (not e!40666))))

(assert (=> b!61945 (= res!34070 (and (or (not ((_ is Cons!1432) (toList!700 lt!24995))) (bvsle (_1!1027 (h!2014 (toList!700 lt!24995))) #b0000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1432) (toList!700 lt!24995)) (bvslt (_1!1027 (h!2014 (toList!700 lt!24995))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!61946 () Bool)

(assert (=> b!61946 (= e!40666 (containsKey!129 (t!4806 (toList!700 lt!24995)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!12487 (not res!34069)) b!61945))

(assert (= (and b!61945 res!34070) b!61946))

(declare-fun m!55539 () Bool)

(assert (=> b!61946 m!55539))

(assert (=> d!12053 d!12487))

(declare-fun d!12489 () Bool)

(assert (=> d!12489 (= (get!1078 (getValueByKey!125 (toList!700 lt!24995) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (v!2407 (getValueByKey!125 (toList!700 lt!24995) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!12055 d!12489))

(assert (=> d!12055 d!12285))

(declare-fun b!61948 () Bool)

(declare-fun e!40668 () (_ BitVec 32))

(declare-fun e!40667 () (_ BitVec 32))

(assert (=> b!61948 (= e!40668 e!40667)))

(declare-fun c!8215 () Bool)

(assert (=> b!61948 (= c!8215 (validKeyInArray!0 (select (arr!1793 (_keys!3695 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun bm!4808 () Bool)

(declare-fun call!4811 () (_ BitVec 32))

(assert (=> bm!4808 (= call!4811 (arrayCountValidKeys!0 (_keys!3695 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2024 (_keys!3695 newMap!16))))))

(declare-fun b!61949 () Bool)

(assert (=> b!61949 (= e!40668 #b00000000000000000000000000000000)))

(declare-fun b!61950 () Bool)

(assert (=> b!61950 (= e!40667 (bvadd #b00000000000000000000000000000001 call!4811))))

(declare-fun d!12491 () Bool)

(declare-fun lt!25782 () (_ BitVec 32))

(assert (=> d!12491 (and (bvsge lt!25782 #b00000000000000000000000000000000) (bvsle lt!25782 (bvsub (size!2024 (_keys!3695 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> d!12491 (= lt!25782 e!40668)))

(declare-fun c!8216 () Bool)

(assert (=> d!12491 (= c!8216 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2024 (_keys!3695 newMap!16))))))

(assert (=> d!12491 (and (bvsle (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2024 (_keys!3695 newMap!16))) (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvsle (size!2024 (_keys!3695 newMap!16)) (size!2024 (_keys!3695 newMap!16))))))

(assert (=> d!12491 (= (arrayCountValidKeys!0 (_keys!3695 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2024 (_keys!3695 newMap!16))) lt!25782)))

(declare-fun b!61947 () Bool)

(assert (=> b!61947 (= e!40667 call!4811)))

(assert (= (and d!12491 c!8216) b!61949))

(assert (= (and d!12491 (not c!8216)) b!61948))

(assert (= (and b!61948 c!8215) b!61950))

(assert (= (and b!61948 (not c!8215)) b!61947))

(assert (= (or b!61950 b!61947) bm!4808))

(assert (=> b!61948 m!55499))

(assert (=> b!61948 m!55499))

(assert (=> b!61948 m!55507))

(declare-fun m!55541 () Bool)

(assert (=> bm!4808 m!55541))

(assert (=> bm!4681 d!12491))

(declare-fun d!12493 () Bool)

(declare-fun lt!25783 () Bool)

(assert (=> d!12493 (= lt!25783 (select (content!65 Nil!1434) (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!40669 () Bool)

(assert (=> d!12493 (= lt!25783 e!40669)))

(declare-fun res!34072 () Bool)

(assert (=> d!12493 (=> (not res!34072) (not e!40669))))

(assert (=> d!12493 (= res!34072 ((_ is Cons!1433) Nil!1434))))

(assert (=> d!12493 (= (contains!687 Nil!1434 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) lt!25783)))

(declare-fun b!61951 () Bool)

(declare-fun e!40670 () Bool)

(assert (=> b!61951 (= e!40669 e!40670)))

(declare-fun res!34071 () Bool)

(assert (=> b!61951 (=> res!34071 e!40670)))

(assert (=> b!61951 (= res!34071 (= (h!2015 Nil!1434) (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61952 () Bool)

(assert (=> b!61952 (= e!40670 (contains!687 (t!4807 Nil!1434) (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!12493 res!34072) b!61951))

(assert (= (and b!61951 (not res!34071)) b!61952))

(assert (=> d!12493 m!53749))

(assert (=> d!12493 m!53617))

(declare-fun m!55543 () Bool)

(assert (=> d!12493 m!55543))

(assert (=> b!61952 m!53617))

(declare-fun m!55545 () Bool)

(assert (=> b!61952 m!55545))

(assert (=> b!61038 d!12493))

(declare-fun d!12495 () Bool)

(assert (=> d!12495 (arrayContainsKey!0 (_keys!3695 newMap!16) lt!25341 #b00000000000000000000000000000000)))

(declare-fun lt!25784 () Unit!1625)

(assert (=> d!12495 (= lt!25784 (choose!13 (_keys!3695 newMap!16) lt!25341 #b00000000000000000000000000000000))))

(assert (=> d!12495 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (=> d!12495 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3695 newMap!16) lt!25341 #b00000000000000000000000000000000) lt!25784)))

(declare-fun bs!2700 () Bool)

(assert (= bs!2700 d!12495))

(assert (=> bs!2700 m!54157))

(declare-fun m!55547 () Bool)

(assert (=> bs!2700 m!55547))

(assert (=> b!61268 d!12495))

(declare-fun d!12497 () Bool)

(declare-fun res!34073 () Bool)

(declare-fun e!40671 () Bool)

(assert (=> d!12497 (=> res!34073 e!40671)))

(assert (=> d!12497 (= res!34073 (= (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000) lt!25341))))

(assert (=> d!12497 (= (arrayContainsKey!0 (_keys!3695 newMap!16) lt!25341 #b00000000000000000000000000000000) e!40671)))

(declare-fun b!61953 () Bool)

(declare-fun e!40672 () Bool)

(assert (=> b!61953 (= e!40671 e!40672)))

(declare-fun res!34074 () Bool)

(assert (=> b!61953 (=> (not res!34074) (not e!40672))))

(assert (=> b!61953 (= res!34074 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2024 (_keys!3695 newMap!16))))))

(declare-fun b!61954 () Bool)

(assert (=> b!61954 (= e!40672 (arrayContainsKey!0 (_keys!3695 newMap!16) lt!25341 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!12497 (not res!34073)) b!61953))

(assert (= (and b!61953 res!34074) b!61954))

(assert (=> d!12497 m!53617))

(declare-fun m!55549 () Bool)

(assert (=> b!61954 m!55549))

(assert (=> b!61268 d!12497))

(declare-fun b!61955 () Bool)

(declare-fun e!40675 () SeekEntryResult!228)

(assert (=> b!61955 (= e!40675 Undefined!228)))

(declare-fun b!61956 () Bool)

(declare-fun e!40673 () SeekEntryResult!228)

(declare-fun lt!25785 () SeekEntryResult!228)

(assert (=> b!61956 (= e!40673 (Found!228 (index!3038 lt!25785)))))

(declare-fun d!12499 () Bool)

(declare-fun lt!25787 () SeekEntryResult!228)

(assert (=> d!12499 (and (or ((_ is Undefined!228) lt!25787) (not ((_ is Found!228) lt!25787)) (and (bvsge (index!3037 lt!25787) #b00000000000000000000000000000000) (bvslt (index!3037 lt!25787) (size!2024 (_keys!3695 newMap!16))))) (or ((_ is Undefined!228) lt!25787) ((_ is Found!228) lt!25787) (not ((_ is MissingZero!228) lt!25787)) (and (bvsge (index!3036 lt!25787) #b00000000000000000000000000000000) (bvslt (index!3036 lt!25787) (size!2024 (_keys!3695 newMap!16))))) (or ((_ is Undefined!228) lt!25787) ((_ is Found!228) lt!25787) ((_ is MissingZero!228) lt!25787) (not ((_ is MissingVacant!228) lt!25787)) (and (bvsge (index!3039 lt!25787) #b00000000000000000000000000000000) (bvslt (index!3039 lt!25787) (size!2024 (_keys!3695 newMap!16))))) (or ((_ is Undefined!228) lt!25787) (ite ((_ is Found!228) lt!25787) (= (select (arr!1793 (_keys!3695 newMap!16)) (index!3037 lt!25787)) (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) (ite ((_ is MissingZero!228) lt!25787) (= (select (arr!1793 (_keys!3695 newMap!16)) (index!3036 lt!25787)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!228) lt!25787) (= (select (arr!1793 (_keys!3695 newMap!16)) (index!3039 lt!25787)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12499 (= lt!25787 e!40675)))

(declare-fun c!8217 () Bool)

(assert (=> d!12499 (= c!8217 (and ((_ is Intermediate!228) lt!25785) (undefined!1040 lt!25785)))))

(assert (=> d!12499 (= lt!25785 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000) (mask!5963 newMap!16)) (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000) (_keys!3695 newMap!16) (mask!5963 newMap!16)))))

(assert (=> d!12499 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12499 (= (seekEntryOrOpen!0 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000) (_keys!3695 newMap!16) (mask!5963 newMap!16)) lt!25787)))

(declare-fun b!61957 () Bool)

(assert (=> b!61957 (= e!40675 e!40673)))

(declare-fun lt!25786 () (_ BitVec 64))

(assert (=> b!61957 (= lt!25786 (select (arr!1793 (_keys!3695 newMap!16)) (index!3038 lt!25785)))))

(declare-fun c!8218 () Bool)

(assert (=> b!61957 (= c!8218 (= lt!25786 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61958 () Bool)

(declare-fun e!40674 () SeekEntryResult!228)

(assert (=> b!61958 (= e!40674 (MissingZero!228 (index!3038 lt!25785)))))

(declare-fun b!61959 () Bool)

(assert (=> b!61959 (= e!40674 (seekKeyOrZeroReturnVacant!0 (x!10162 lt!25785) (index!3038 lt!25785) (index!3038 lt!25785) (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000) (_keys!3695 newMap!16) (mask!5963 newMap!16)))))

(declare-fun b!61960 () Bool)

(declare-fun c!8219 () Bool)

(assert (=> b!61960 (= c!8219 (= lt!25786 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61960 (= e!40673 e!40674)))

(assert (= (and d!12499 c!8217) b!61955))

(assert (= (and d!12499 (not c!8217)) b!61957))

(assert (= (and b!61957 c!8218) b!61956))

(assert (= (and b!61957 (not c!8218)) b!61960))

(assert (= (and b!61960 c!8219) b!61958))

(assert (= (and b!61960 (not c!8219)) b!61959))

(assert (=> d!12499 m!53617))

(declare-fun m!55551 () Bool)

(assert (=> d!12499 m!55551))

(assert (=> d!12499 m!53559))

(declare-fun m!55553 () Bool)

(assert (=> d!12499 m!55553))

(declare-fun m!55555 () Bool)

(assert (=> d!12499 m!55555))

(declare-fun m!55557 () Bool)

(assert (=> d!12499 m!55557))

(assert (=> d!12499 m!55551))

(assert (=> d!12499 m!53617))

(declare-fun m!55559 () Bool)

(assert (=> d!12499 m!55559))

(declare-fun m!55561 () Bool)

(assert (=> b!61957 m!55561))

(assert (=> b!61959 m!53617))

(declare-fun m!55563 () Bool)

(assert (=> b!61959 m!55563))

(assert (=> b!61268 d!12499))

(assert (=> d!11993 d!11953))

(declare-fun d!12501 () Bool)

(declare-fun e!40676 () Bool)

(assert (=> d!12501 e!40676))

(declare-fun res!34075 () Bool)

(assert (=> d!12501 (=> res!34075 e!40676)))

(declare-fun lt!25791 () Bool)

(assert (=> d!12501 (= res!34075 (not lt!25791))))

(declare-fun lt!25790 () Bool)

(assert (=> d!12501 (= lt!25791 lt!25790)))

(declare-fun lt!25789 () Unit!1625)

(declare-fun e!40677 () Unit!1625)

(assert (=> d!12501 (= lt!25789 e!40677)))

(declare-fun c!8220 () Bool)

(assert (=> d!12501 (= c!8220 lt!25790)))

(assert (=> d!12501 (= lt!25790 (containsKey!129 (toList!700 lt!25241) (_1!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (=> d!12501 (= (contains!686 lt!25241 (_1!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))) lt!25791)))

(declare-fun b!61961 () Bool)

(declare-fun lt!25788 () Unit!1625)

(assert (=> b!61961 (= e!40677 lt!25788)))

(assert (=> b!61961 (= lt!25788 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 lt!25241) (_1!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (=> b!61961 (isDefined!78 (getValueByKey!125 (toList!700 lt!25241) (_1!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(declare-fun b!61962 () Bool)

(declare-fun Unit!1676 () Unit!1625)

(assert (=> b!61962 (= e!40677 Unit!1676)))

(declare-fun b!61963 () Bool)

(assert (=> b!61963 (= e!40676 (isDefined!78 (getValueByKey!125 (toList!700 lt!25241) (_1!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))))

(assert (= (and d!12501 c!8220) b!61961))

(assert (= (and d!12501 (not c!8220)) b!61962))

(assert (= (and d!12501 (not res!34075)) b!61963))

(declare-fun m!55565 () Bool)

(assert (=> d!12501 m!55565))

(declare-fun m!55567 () Bool)

(assert (=> b!61961 m!55567))

(assert (=> b!61961 m!54095))

(assert (=> b!61961 m!54095))

(declare-fun m!55569 () Bool)

(assert (=> b!61961 m!55569))

(assert (=> b!61963 m!54095))

(assert (=> b!61963 m!54095))

(assert (=> b!61963 m!55569))

(assert (=> d!12097 d!12501))

(declare-fun b!61964 () Bool)

(declare-fun e!40678 () Option!131)

(assert (=> b!61964 (= e!40678 (Some!130 (_2!1027 (h!2014 lt!25242))))))

(declare-fun c!8221 () Bool)

(declare-fun d!12503 () Bool)

(assert (=> d!12503 (= c!8221 (and ((_ is Cons!1432) lt!25242) (= (_1!1027 (h!2014 lt!25242)) (_1!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))))

(assert (=> d!12503 (= (getValueByKey!125 lt!25242 (_1!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))) e!40678)))

(declare-fun b!61965 () Bool)

(declare-fun e!40679 () Option!131)

(assert (=> b!61965 (= e!40678 e!40679)))

(declare-fun c!8222 () Bool)

(assert (=> b!61965 (= c!8222 (and ((_ is Cons!1432) lt!25242) (not (= (_1!1027 (h!2014 lt!25242)) (_1!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))))

(declare-fun b!61967 () Bool)

(assert (=> b!61967 (= e!40679 None!129)))

(declare-fun b!61966 () Bool)

(assert (=> b!61966 (= e!40679 (getValueByKey!125 (t!4806 lt!25242) (_1!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (= (and d!12503 c!8221) b!61964))

(assert (= (and d!12503 (not c!8221)) b!61965))

(assert (= (and b!61965 c!8222) b!61966))

(assert (= (and b!61965 (not c!8222)) b!61967))

(declare-fun m!55571 () Bool)

(assert (=> b!61966 m!55571))

(assert (=> d!12097 d!12503))

(declare-fun d!12505 () Bool)

(assert (=> d!12505 (= (getValueByKey!125 lt!25242 (_1!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))) (Some!130 (_2!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(declare-fun lt!25792 () Unit!1625)

(assert (=> d!12505 (= lt!25792 (choose!325 lt!25242 (_1!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) (_2!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(declare-fun e!40680 () Bool)

(assert (=> d!12505 e!40680))

(declare-fun res!34076 () Bool)

(assert (=> d!12505 (=> (not res!34076) (not e!40680))))

(assert (=> d!12505 (= res!34076 (isStrictlySorted!285 lt!25242))))

(assert (=> d!12505 (= (lemmaContainsTupThenGetReturnValue!42 lt!25242 (_1!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) (_2!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))) lt!25792)))

(declare-fun b!61968 () Bool)

(declare-fun res!34077 () Bool)

(assert (=> b!61968 (=> (not res!34077) (not e!40680))))

(assert (=> b!61968 (= res!34077 (containsKey!129 lt!25242 (_1!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(declare-fun b!61969 () Bool)

(assert (=> b!61969 (= e!40680 (contains!688 lt!25242 (tuple2!2033 (_1!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) (_2!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))))

(assert (= (and d!12505 res!34076) b!61968))

(assert (= (and b!61968 res!34077) b!61969))

(assert (=> d!12505 m!54089))

(declare-fun m!55573 () Bool)

(assert (=> d!12505 m!55573))

(declare-fun m!55575 () Bool)

(assert (=> d!12505 m!55575))

(declare-fun m!55577 () Bool)

(assert (=> b!61968 m!55577))

(declare-fun m!55579 () Bool)

(assert (=> b!61969 m!55579))

(assert (=> d!12097 d!12505))

(declare-fun e!40683 () Bool)

(declare-fun lt!25793 () List!1436)

(declare-fun b!61970 () Bool)

(assert (=> b!61970 (= e!40683 (contains!688 lt!25793 (tuple2!2033 (_1!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) (_2!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))))

(declare-fun e!40681 () List!1436)

(declare-fun c!8224 () Bool)

(declare-fun bm!4809 () Bool)

(declare-fun call!4812 () List!1436)

(assert (=> bm!4809 (= call!4812 ($colon$colon!61 e!40681 (ite c!8224 (h!2014 (toList!700 (ite c!7927 call!4655 (ite c!7928 call!4660 call!4659)))) (tuple2!2033 (_1!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) (_2!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))))

(declare-fun c!8223 () Bool)

(assert (=> bm!4809 (= c!8223 c!8224)))

(declare-fun b!61971 () Bool)

(declare-fun e!40685 () List!1436)

(assert (=> b!61971 (= e!40685 call!4812)))

(declare-fun bm!4810 () Bool)

(declare-fun call!4814 () List!1436)

(declare-fun call!4813 () List!1436)

(assert (=> bm!4810 (= call!4814 call!4813)))

(declare-fun b!61972 () Bool)

(declare-fun e!40682 () List!1436)

(assert (=> b!61972 (= e!40682 call!4814)))

(declare-fun b!61973 () Bool)

(assert (=> b!61973 (= e!40681 (insertStrictlySorted!45 (t!4806 (toList!700 (ite c!7927 call!4655 (ite c!7928 call!4660 call!4659)))) (_1!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) (_2!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(declare-fun bm!4811 () Bool)

(assert (=> bm!4811 (= call!4813 call!4812)))

(declare-fun b!61974 () Bool)

(assert (=> b!61974 (= e!40682 call!4814)))

(declare-fun d!12507 () Bool)

(assert (=> d!12507 e!40683))

(declare-fun res!34078 () Bool)

(assert (=> d!12507 (=> (not res!34078) (not e!40683))))

(assert (=> d!12507 (= res!34078 (isStrictlySorted!285 lt!25793))))

(assert (=> d!12507 (= lt!25793 e!40685)))

(assert (=> d!12507 (= c!8224 (and ((_ is Cons!1432) (toList!700 (ite c!7927 call!4655 (ite c!7928 call!4660 call!4659)))) (bvslt (_1!1027 (h!2014 (toList!700 (ite c!7927 call!4655 (ite c!7928 call!4660 call!4659))))) (_1!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))))

(assert (=> d!12507 (isStrictlySorted!285 (toList!700 (ite c!7927 call!4655 (ite c!7928 call!4660 call!4659))))))

(assert (=> d!12507 (= (insertStrictlySorted!45 (toList!700 (ite c!7927 call!4655 (ite c!7928 call!4660 call!4659))) (_1!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) (_2!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))) lt!25793)))

(declare-fun b!61975 () Bool)

(declare-fun e!40684 () List!1436)

(assert (=> b!61975 (= e!40684 call!4813)))

(declare-fun b!61976 () Bool)

(declare-fun c!8226 () Bool)

(assert (=> b!61976 (= c!8226 (and ((_ is Cons!1432) (toList!700 (ite c!7927 call!4655 (ite c!7928 call!4660 call!4659)))) (bvsgt (_1!1027 (h!2014 (toList!700 (ite c!7927 call!4655 (ite c!7928 call!4660 call!4659))))) (_1!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))))

(assert (=> b!61976 (= e!40684 e!40682)))

(declare-fun b!61977 () Bool)

(declare-fun res!34079 () Bool)

(assert (=> b!61977 (=> (not res!34079) (not e!40683))))

(assert (=> b!61977 (= res!34079 (containsKey!129 lt!25793 (_1!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(declare-fun b!61978 () Bool)

(assert (=> b!61978 (= e!40685 e!40684)))

(declare-fun c!8225 () Bool)

(assert (=> b!61978 (= c!8225 (and ((_ is Cons!1432) (toList!700 (ite c!7927 call!4655 (ite c!7928 call!4660 call!4659)))) (= (_1!1027 (h!2014 (toList!700 (ite c!7927 call!4655 (ite c!7928 call!4660 call!4659))))) (_1!1027 (ite (or c!7927 c!7928) (tuple2!2033 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))))

(declare-fun b!61979 () Bool)

(assert (=> b!61979 (= e!40681 (ite c!8225 (t!4806 (toList!700 (ite c!7927 call!4655 (ite c!7928 call!4660 call!4659)))) (ite c!8226 (Cons!1432 (h!2014 (toList!700 (ite c!7927 call!4655 (ite c!7928 call!4660 call!4659)))) (t!4806 (toList!700 (ite c!7927 call!4655 (ite c!7928 call!4660 call!4659))))) Nil!1433)))))

(assert (= (and d!12507 c!8224) b!61971))

(assert (= (and d!12507 (not c!8224)) b!61978))

(assert (= (and b!61978 c!8225) b!61975))

(assert (= (and b!61978 (not c!8225)) b!61976))

(assert (= (and b!61976 c!8226) b!61974))

(assert (= (and b!61976 (not c!8226)) b!61972))

(assert (= (or b!61974 b!61972) bm!4810))

(assert (= (or b!61975 bm!4810) bm!4811))

(assert (= (or b!61971 bm!4811) bm!4809))

(assert (= (and bm!4809 c!8223) b!61973))

(assert (= (and bm!4809 (not c!8223)) b!61979))

(assert (= (and d!12507 res!34078) b!61977))

(assert (= (and b!61977 res!34079) b!61970))

(declare-fun m!55581 () Bool)

(assert (=> bm!4809 m!55581))

(declare-fun m!55583 () Bool)

(assert (=> b!61977 m!55583))

(declare-fun m!55585 () Bool)

(assert (=> d!12507 m!55585))

(declare-fun m!55587 () Bool)

(assert (=> d!12507 m!55587))

(declare-fun m!55589 () Bool)

(assert (=> b!61973 m!55589))

(declare-fun m!55591 () Bool)

(assert (=> b!61970 m!55591))

(assert (=> d!12097 d!12507))

(assert (=> b!61174 d!12239))

(assert (=> b!61174 d!12241))

(declare-fun d!12509 () Bool)

(assert (=> d!12509 (= (apply!67 (+!82 lt!25003 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) lt!25015) (apply!67 lt!25003 lt!25015))))

(assert (=> d!12509 true))

(declare-fun _$34!770 () Unit!1625)

(assert (=> d!12509 (= (choose!318 lt!25003 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992))) lt!25015) _$34!770)))

(declare-fun bs!2701 () Bool)

(assert (= bs!2701 d!12509))

(assert (=> bs!2701 m!53511))

(assert (=> bs!2701 m!53511))

(assert (=> bs!2701 m!53523))

(assert (=> bs!2701 m!53519))

(assert (=> d!12037 d!12509))

(assert (=> d!12037 d!12029))

(declare-fun d!12511 () Bool)

(declare-fun e!40686 () Bool)

(assert (=> d!12511 e!40686))

(declare-fun res!34080 () Bool)

(assert (=> d!12511 (=> res!34080 e!40686)))

(declare-fun lt!25797 () Bool)

(assert (=> d!12511 (= res!34080 (not lt!25797))))

(declare-fun lt!25796 () Bool)

(assert (=> d!12511 (= lt!25797 lt!25796)))

(declare-fun lt!25795 () Unit!1625)

(declare-fun e!40687 () Unit!1625)

(assert (=> d!12511 (= lt!25795 e!40687)))

(declare-fun c!8227 () Bool)

(assert (=> d!12511 (= c!8227 lt!25796)))

(assert (=> d!12511 (= lt!25796 (containsKey!129 (toList!700 lt!25003) lt!25015))))

(assert (=> d!12511 (= (contains!686 lt!25003 lt!25015) lt!25797)))

(declare-fun b!61981 () Bool)

(declare-fun lt!25794 () Unit!1625)

(assert (=> b!61981 (= e!40687 lt!25794)))

(assert (=> b!61981 (= lt!25794 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 lt!25003) lt!25015))))

(assert (=> b!61981 (isDefined!78 (getValueByKey!125 (toList!700 lt!25003) lt!25015))))

(declare-fun b!61982 () Bool)

(declare-fun Unit!1677 () Unit!1625)

(assert (=> b!61982 (= e!40687 Unit!1677)))

(declare-fun b!61983 () Bool)

(assert (=> b!61983 (= e!40686 (isDefined!78 (getValueByKey!125 (toList!700 lt!25003) lt!25015)))))

(assert (= (and d!12511 c!8227) b!61981))

(assert (= (and d!12511 (not c!8227)) b!61982))

(assert (= (and d!12511 (not res!34080)) b!61983))

(declare-fun m!55593 () Bool)

(assert (=> d!12511 m!55593))

(declare-fun m!55595 () Bool)

(assert (=> b!61981 m!55595))

(assert (=> b!61981 m!53827))

(assert (=> b!61981 m!53827))

(declare-fun m!55597 () Bool)

(assert (=> b!61981 m!55597))

(assert (=> b!61983 m!53827))

(assert (=> b!61983 m!53827))

(assert (=> b!61983 m!55597))

(assert (=> d!12037 d!12511))

(assert (=> d!12037 d!12019))

(assert (=> d!12037 d!12027))

(declare-fun d!12513 () Bool)

(declare-fun res!34081 () Bool)

(declare-fun e!40688 () Bool)

(assert (=> d!12513 (=> res!34081 e!40688)))

(assert (=> d!12513 (= res!34081 (and ((_ is Cons!1432) (toList!700 call!4621)) (= (_1!1027 (h!2014 (toList!700 call!4621))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355))))))

(assert (=> d!12513 (= (containsKey!129 (toList!700 call!4621) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) e!40688)))

(declare-fun b!61984 () Bool)

(declare-fun e!40689 () Bool)

(assert (=> b!61984 (= e!40688 e!40689)))

(declare-fun res!34082 () Bool)

(assert (=> b!61984 (=> (not res!34082) (not e!40689))))

(assert (=> b!61984 (= res!34082 (and (or (not ((_ is Cons!1432) (toList!700 call!4621))) (bvsle (_1!1027 (h!2014 (toList!700 call!4621))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355))) ((_ is Cons!1432) (toList!700 call!4621)) (bvslt (_1!1027 (h!2014 (toList!700 call!4621))) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355))))))

(declare-fun b!61985 () Bool)

(assert (=> b!61985 (= e!40689 (containsKey!129 (t!4806 (toList!700 call!4621)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(assert (= (and d!12513 (not res!34081)) b!61984))

(assert (= (and b!61984 res!34082) b!61985))

(assert (=> b!61985 m!53313))

(declare-fun m!55599 () Bool)

(assert (=> b!61985 m!55599))

(assert (=> d!12095 d!12513))

(declare-fun d!12515 () Bool)

(declare-fun e!40690 () Bool)

(assert (=> d!12515 e!40690))

(declare-fun res!34083 () Bool)

(assert (=> d!12515 (=> res!34083 e!40690)))

(declare-fun lt!25801 () Bool)

(assert (=> d!12515 (= res!34083 (not lt!25801))))

(declare-fun lt!25800 () Bool)

(assert (=> d!12515 (= lt!25801 lt!25800)))

(declare-fun lt!25799 () Unit!1625)

(declare-fun e!40691 () Unit!1625)

(assert (=> d!12515 (= lt!25799 e!40691)))

(declare-fun c!8228 () Bool)

(assert (=> d!12515 (= c!8228 lt!25800)))

(assert (=> d!12515 (= lt!25800 (containsKey!129 (toList!700 lt!25169) (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!12515 (= (contains!686 lt!25169 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) lt!25801)))

(declare-fun b!61986 () Bool)

(declare-fun lt!25798 () Unit!1625)

(assert (=> b!61986 (= e!40691 lt!25798)))

(assert (=> b!61986 (= lt!25798 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 lt!25169) (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61986 (isDefined!78 (getValueByKey!125 (toList!700 lt!25169) (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61987 () Bool)

(declare-fun Unit!1678 () Unit!1625)

(assert (=> b!61987 (= e!40691 Unit!1678)))

(declare-fun b!61988 () Bool)

(assert (=> b!61988 (= e!40690 (isDefined!78 (getValueByKey!125 (toList!700 lt!25169) (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!12515 c!8228) b!61986))

(assert (= (and d!12515 (not c!8228)) b!61987))

(assert (= (and d!12515 (not res!34083)) b!61988))

(assert (=> d!12515 m!53617))

(declare-fun m!55601 () Bool)

(assert (=> d!12515 m!55601))

(assert (=> b!61986 m!53617))

(declare-fun m!55603 () Bool)

(assert (=> b!61986 m!55603))

(assert (=> b!61986 m!53617))

(declare-fun m!55605 () Bool)

(assert (=> b!61986 m!55605))

(assert (=> b!61986 m!55605))

(declare-fun m!55607 () Bool)

(assert (=> b!61986 m!55607))

(assert (=> b!61988 m!53617))

(assert (=> b!61988 m!55605))

(assert (=> b!61988 m!55605))

(assert (=> b!61988 m!55607))

(assert (=> b!61136 d!12515))

(assert (=> d!12059 d!12061))

(assert (=> d!12059 d!12063))

(declare-fun d!12517 () Bool)

(assert (=> d!12517 (isDefined!78 (getValueByKey!125 (toList!700 lt!24826) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(assert (=> d!12517 true))

(declare-fun _$12!308 () Unit!1625)

(assert (=> d!12517 (= (choose!320 (toList!700 lt!24826) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) _$12!308)))

(declare-fun bs!2702 () Bool)

(assert (= bs!2702 d!12517))

(assert (=> bs!2702 m!53313))

(assert (=> bs!2702 m!53423))

(assert (=> bs!2702 m!53423))

(assert (=> bs!2702 m!53425))

(assert (=> d!12059 d!12517))

(declare-fun d!12519 () Bool)

(declare-fun res!34088 () Bool)

(declare-fun e!40696 () Bool)

(assert (=> d!12519 (=> res!34088 e!40696)))

(assert (=> d!12519 (= res!34088 (or ((_ is Nil!1433) (toList!700 lt!24826)) ((_ is Nil!1433) (t!4806 (toList!700 lt!24826)))))))

(assert (=> d!12519 (= (isStrictlySorted!285 (toList!700 lt!24826)) e!40696)))

(declare-fun b!61993 () Bool)

(declare-fun e!40697 () Bool)

(assert (=> b!61993 (= e!40696 e!40697)))

(declare-fun res!34089 () Bool)

(assert (=> b!61993 (=> (not res!34089) (not e!40697))))

(assert (=> b!61993 (= res!34089 (bvslt (_1!1027 (h!2014 (toList!700 lt!24826))) (_1!1027 (h!2014 (t!4806 (toList!700 lt!24826))))))))

(declare-fun b!61994 () Bool)

(assert (=> b!61994 (= e!40697 (isStrictlySorted!285 (t!4806 (toList!700 lt!24826))))))

(assert (= (and d!12519 (not res!34088)) b!61993))

(assert (= (and b!61993 res!34089) b!61994))

(declare-fun m!55609 () Bool)

(assert (=> b!61994 m!55609))

(assert (=> d!12059 d!12519))

(declare-fun d!12521 () Bool)

(assert (=> d!12521 (isDefined!78 (getValueByKey!125 (toList!700 lt!24995) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun lt!25802 () Unit!1625)

(assert (=> d!12521 (= lt!25802 (choose!320 (toList!700 lt!24995) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!40698 () Bool)

(assert (=> d!12521 e!40698))

(declare-fun res!34090 () Bool)

(assert (=> d!12521 (=> (not res!34090) (not e!40698))))

(assert (=> d!12521 (= res!34090 (isStrictlySorted!285 (toList!700 lt!24995)))))

(assert (=> d!12521 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 lt!24995) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!25802)))

(declare-fun b!61995 () Bool)

(assert (=> b!61995 (= e!40698 (containsKey!129 (toList!700 lt!24995) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!12521 res!34090) b!61995))

(assert (=> d!12521 m!53407))

(assert (=> d!12521 m!53599))

(assert (=> d!12521 m!53599))

(assert (=> d!12521 m!53601))

(assert (=> d!12521 m!53407))

(declare-fun m!55611 () Bool)

(assert (=> d!12521 m!55611))

(assert (=> d!12521 m!54673))

(assert (=> b!61995 m!53407))

(assert (=> b!61995 m!53595))

(assert (=> b!60932 d!12521))

(assert (=> b!60932 d!12283))

(assert (=> b!60932 d!12285))

(declare-fun d!12523 () Bool)

(assert (=> d!12523 (isDefined!78 (getValueByKey!125 (toList!700 call!4618) (ite c!7902 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (select (arr!1793 (_keys!3695 newMap!16)) (index!3037 lt!24947)))))))

(declare-fun lt!25803 () Unit!1625)

(assert (=> d!12523 (= lt!25803 (choose!320 (toList!700 call!4618) (ite c!7902 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (select (arr!1793 (_keys!3695 newMap!16)) (index!3037 lt!24947)))))))

(declare-fun e!40699 () Bool)

(assert (=> d!12523 e!40699))

(declare-fun res!34091 () Bool)

(assert (=> d!12523 (=> (not res!34091) (not e!40699))))

(assert (=> d!12523 (= res!34091 (isStrictlySorted!285 (toList!700 call!4618)))))

(assert (=> d!12523 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 call!4618) (ite c!7902 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (select (arr!1793 (_keys!3695 newMap!16)) (index!3037 lt!24947)))) lt!25803)))

(declare-fun b!61996 () Bool)

(assert (=> b!61996 (= e!40699 (containsKey!129 (toList!700 call!4618) (ite c!7902 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (select (arr!1793 (_keys!3695 newMap!16)) (index!3037 lt!24947)))))))

(assert (= (and d!12523 res!34091) b!61996))

(assert (=> d!12523 m!53591))

(assert (=> d!12523 m!53591))

(assert (=> d!12523 m!53593))

(declare-fun m!55613 () Bool)

(assert (=> d!12523 m!55613))

(declare-fun m!55615 () Bool)

(assert (=> d!12523 m!55615))

(assert (=> b!61996 m!53587))

(assert (=> b!60929 d!12523))

(assert (=> b!60929 d!12287))

(assert (=> b!60929 d!12289))

(declare-fun d!12525 () Bool)

(declare-fun e!40700 () Bool)

(assert (=> d!12525 e!40700))

(declare-fun res!34092 () Bool)

(assert (=> d!12525 (=> res!34092 e!40700)))

(declare-fun lt!25807 () Bool)

(assert (=> d!12525 (= res!34092 (not lt!25807))))

(declare-fun lt!25806 () Bool)

(assert (=> d!12525 (= lt!25807 lt!25806)))

(declare-fun lt!25805 () Unit!1625)

(declare-fun e!40701 () Unit!1625)

(assert (=> d!12525 (= lt!25805 e!40701)))

(declare-fun c!8229 () Bool)

(assert (=> d!12525 (= c!8229 lt!25806)))

(assert (=> d!12525 (= lt!25806 (containsKey!129 (toList!700 lt!25211) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12525 (= (contains!686 lt!25211 #b1000000000000000000000000000000000000000000000000000000000000000) lt!25807)))

(declare-fun b!61997 () Bool)

(declare-fun lt!25804 () Unit!1625)

(assert (=> b!61997 (= e!40701 lt!25804)))

(assert (=> b!61997 (= lt!25804 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 lt!25211) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61997 (isDefined!78 (getValueByKey!125 (toList!700 lt!25211) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61998 () Bool)

(declare-fun Unit!1679 () Unit!1625)

(assert (=> b!61998 (= e!40701 Unit!1679)))

(declare-fun b!61999 () Bool)

(assert (=> b!61999 (= e!40700 (isDefined!78 (getValueByKey!125 (toList!700 lt!25211) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12525 c!8229) b!61997))

(assert (= (and d!12525 (not c!8229)) b!61998))

(assert (= (and d!12525 (not res!34092)) b!61999))

(declare-fun m!55617 () Bool)

(assert (=> d!12525 m!55617))

(declare-fun m!55619 () Bool)

(assert (=> b!61997 m!55619))

(assert (=> b!61997 m!54679))

(assert (=> b!61997 m!54679))

(declare-fun m!55621 () Bool)

(assert (=> b!61997 m!55621))

(assert (=> b!61999 m!54679))

(assert (=> b!61999 m!54679))

(assert (=> b!61999 m!55621))

(assert (=> bm!4700 d!12525))

(assert (=> b!61014 d!11949))

(declare-fun d!12527 () Bool)

(declare-fun e!40702 () Bool)

(assert (=> d!12527 e!40702))

(declare-fun res!34093 () Bool)

(assert (=> d!12527 (=> res!34093 e!40702)))

(declare-fun lt!25811 () Bool)

(assert (=> d!12527 (= res!34093 (not lt!25811))))

(declare-fun lt!25810 () Bool)

(assert (=> d!12527 (= lt!25811 lt!25810)))

(declare-fun lt!25809 () Unit!1625)

(declare-fun e!40703 () Unit!1625)

(assert (=> d!12527 (= lt!25809 e!40703)))

(declare-fun c!8230 () Bool)

(assert (=> d!12527 (= c!8230 lt!25810)))

(assert (=> d!12527 (= lt!25810 (containsKey!129 (toList!700 lt!25037) (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!12527 (= (contains!686 lt!25037 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) lt!25811)))

(declare-fun b!62000 () Bool)

(declare-fun lt!25808 () Unit!1625)

(assert (=> b!62000 (= e!40703 lt!25808)))

(assert (=> b!62000 (= lt!25808 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 lt!25037) (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!62000 (isDefined!78 (getValueByKey!125 (toList!700 lt!25037) (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62001 () Bool)

(declare-fun Unit!1680 () Unit!1625)

(assert (=> b!62001 (= e!40703 Unit!1680)))

(declare-fun b!62002 () Bool)

(assert (=> b!62002 (= e!40702 (isDefined!78 (getValueByKey!125 (toList!700 lt!25037) (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!12527 c!8230) b!62000))

(assert (= (and d!12527 (not c!8230)) b!62001))

(assert (= (and d!12527 (not res!34093)) b!62002))

(assert (=> d!12527 m!53617))

(declare-fun m!55623 () Bool)

(assert (=> d!12527 m!55623))

(assert (=> b!62000 m!53617))

(declare-fun m!55625 () Bool)

(assert (=> b!62000 m!55625))

(assert (=> b!62000 m!53617))

(assert (=> b!62000 m!54209))

(assert (=> b!62000 m!54209))

(declare-fun m!55627 () Bool)

(assert (=> b!62000 m!55627))

(assert (=> b!62002 m!53617))

(assert (=> b!62002 m!54209))

(assert (=> b!62002 m!54209))

(assert (=> b!62002 m!55627))

(assert (=> b!60945 d!12527))

(declare-fun d!12529 () Bool)

(declare-fun e!40704 () Bool)

(assert (=> d!12529 e!40704))

(declare-fun res!34094 () Bool)

(assert (=> d!12529 (=> res!34094 e!40704)))

(declare-fun lt!25815 () Bool)

(assert (=> d!12529 (= res!34094 (not lt!25815))))

(declare-fun lt!25814 () Bool)

(assert (=> d!12529 (= lt!25815 lt!25814)))

(declare-fun lt!25813 () Unit!1625)

(declare-fun e!40705 () Unit!1625)

(assert (=> d!12529 (= lt!25813 e!40705)))

(declare-fun c!8231 () Bool)

(assert (=> d!12529 (= c!8231 lt!25814)))

(assert (=> d!12529 (= lt!25814 (containsKey!129 (toList!700 lt!24998) lt!25007))))

(assert (=> d!12529 (= (contains!686 lt!24998 lt!25007) lt!25815)))

(declare-fun b!62003 () Bool)

(declare-fun lt!25812 () Unit!1625)

(assert (=> b!62003 (= e!40705 lt!25812)))

(assert (=> b!62003 (= lt!25812 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 lt!24998) lt!25007))))

(assert (=> b!62003 (isDefined!78 (getValueByKey!125 (toList!700 lt!24998) lt!25007))))

(declare-fun b!62004 () Bool)

(declare-fun Unit!1681 () Unit!1625)

(assert (=> b!62004 (= e!40705 Unit!1681)))

(declare-fun b!62005 () Bool)

(assert (=> b!62005 (= e!40704 (isDefined!78 (getValueByKey!125 (toList!700 lt!24998) lt!25007)))))

(assert (= (and d!12529 c!8231) b!62003))

(assert (= (and d!12529 (not c!8231)) b!62004))

(assert (= (and d!12529 (not res!34094)) b!62005))

(declare-fun m!55629 () Bool)

(assert (=> d!12529 m!55629))

(declare-fun m!55631 () Bool)

(assert (=> b!62003 m!55631))

(assert (=> b!62003 m!53859))

(assert (=> b!62003 m!53859))

(declare-fun m!55633 () Bool)

(assert (=> b!62003 m!55633))

(assert (=> b!62005 m!53859))

(assert (=> b!62005 m!53859))

(assert (=> b!62005 m!55633))

(assert (=> d!12013 d!12529))

(declare-fun d!12531 () Bool)

(assert (=> d!12531 (= (apply!67 (+!82 lt!24998 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) lt!25007) (apply!67 lt!24998 lt!25007))))

(assert (=> d!12531 true))

(declare-fun _$34!771 () Unit!1625)

(assert (=> d!12531 (= (choose!318 lt!24998 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992))) lt!25007) _$34!771)))

(declare-fun bs!2703 () Bool)

(assert (= bs!2703 d!12531))

(assert (=> bs!2703 m!53507))

(assert (=> bs!2703 m!53507))

(assert (=> bs!2703 m!53515))

(assert (=> bs!2703 m!53517))

(assert (=> d!12013 d!12531))

(assert (=> d!12013 d!12017))

(assert (=> d!12013 d!12041))

(assert (=> d!12013 d!12025))

(assert (=> b!61166 d!12429))

(assert (=> b!61203 d!12265))

(assert (=> b!61203 d!11991))

(assert (=> b!61203 d!12091))

(declare-fun d!12533 () Bool)

(assert (=> d!12533 (= (apply!67 lt!25211 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1078 (getValueByKey!125 (toList!700 lt!25211) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2704 () Bool)

(assert (= bs!2704 d!12533))

(assert (=> bs!2704 m!54517))

(assert (=> bs!2704 m!54517))

(declare-fun m!55635 () Bool)

(assert (=> bs!2704 m!55635))

(assert (=> b!61186 d!12533))

(declare-fun d!12535 () Bool)

(assert (=> d!12535 (= (inRange!0 (index!3037 lt!25195) (mask!5963 newMap!16)) (and (bvsge (index!3037 lt!25195) #b00000000000000000000000000000000) (bvslt (index!3037 lt!25195) (bvadd (mask!5963 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> b!61151 d!12535))

(declare-fun d!12537 () Bool)

(declare-fun e!40706 () Bool)

(assert (=> d!12537 e!40706))

(declare-fun res!34095 () Bool)

(assert (=> d!12537 (=> res!34095 e!40706)))

(declare-fun lt!25819 () Bool)

(assert (=> d!12537 (= res!34095 (not lt!25819))))

(declare-fun lt!25818 () Bool)

(assert (=> d!12537 (= lt!25819 lt!25818)))

(declare-fun lt!25817 () Unit!1625)

(declare-fun e!40707 () Unit!1625)

(assert (=> d!12537 (= lt!25817 e!40707)))

(declare-fun c!8232 () Bool)

(assert (=> d!12537 (= c!8232 lt!25818)))

(assert (=> d!12537 (= lt!25818 (containsKey!129 (toList!700 lt!25069) (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!12537 (= (contains!686 lt!25069 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) lt!25819)))

(declare-fun b!62006 () Bool)

(declare-fun lt!25816 () Unit!1625)

(assert (=> b!62006 (= e!40707 lt!25816)))

(assert (=> b!62006 (= lt!25816 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 lt!25069) (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!62006 (isDefined!78 (getValueByKey!125 (toList!700 lt!25069) (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62007 () Bool)

(declare-fun Unit!1682 () Unit!1625)

(assert (=> b!62007 (= e!40707 Unit!1682)))

(declare-fun b!62008 () Bool)

(assert (=> b!62008 (= e!40706 (isDefined!78 (getValueByKey!125 (toList!700 lt!25069) (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!12537 c!8232) b!62006))

(assert (= (and d!12537 (not c!8232)) b!62007))

(assert (= (and d!12537 (not res!34095)) b!62008))

(assert (=> d!12537 m!53617))

(declare-fun m!55637 () Bool)

(assert (=> d!12537 m!55637))

(assert (=> b!62006 m!53617))

(declare-fun m!55639 () Bool)

(assert (=> b!62006 m!55639))

(assert (=> b!62006 m!53617))

(assert (=> b!62006 m!55303))

(assert (=> b!62006 m!55303))

(declare-fun m!55641 () Bool)

(assert (=> b!62006 m!55641))

(assert (=> b!62008 m!53617))

(assert (=> b!62008 m!55303))

(assert (=> b!62008 m!55303))

(assert (=> b!62008 m!55641))

(assert (=> b!60999 d!12537))

(assert (=> bm!4709 d!12085))

(declare-fun d!12539 () Bool)

(declare-fun lt!25820 () Bool)

(assert (=> d!12539 (= lt!25820 (select (content!66 (toList!700 lt!25150)) (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))))

(declare-fun e!40709 () Bool)

(assert (=> d!12539 (= lt!25820 e!40709)))

(declare-fun res!34096 () Bool)

(assert (=> d!12539 (=> (not res!34096) (not e!40709))))

(assert (=> d!12539 (= res!34096 ((_ is Cons!1432) (toList!700 lt!25150)))))

(assert (=> d!12539 (= (contains!688 (toList!700 lt!25150) (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))) lt!25820)))

(declare-fun b!62009 () Bool)

(declare-fun e!40708 () Bool)

(assert (=> b!62009 (= e!40709 e!40708)))

(declare-fun res!34097 () Bool)

(assert (=> b!62009 (=> res!34097 e!40708)))

(assert (=> b!62009 (= res!34097 (= (h!2014 (toList!700 lt!25150)) (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))))

(declare-fun b!62010 () Bool)

(assert (=> b!62010 (= e!40708 (contains!688 (t!4806 (toList!700 lt!25150)) (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))))

(assert (= (and d!12539 res!34096) b!62009))

(assert (= (and b!62009 (not res!34097)) b!62010))

(declare-fun m!55643 () Bool)

(assert (=> d!12539 m!55643))

(declare-fun m!55645 () Bool)

(assert (=> d!12539 m!55645))

(declare-fun m!55647 () Bool)

(assert (=> b!62010 m!55647))

(assert (=> b!61097 d!12539))

(assert (=> b!61106 d!12311))

(assert (=> b!61106 d!12313))

(declare-fun b!62011 () Bool)

(declare-fun e!40710 () Option!131)

(assert (=> b!62011 (= e!40710 (Some!130 (_2!1027 (h!2014 (toList!700 lt!25134)))))))

(declare-fun d!12541 () Bool)

(declare-fun c!8233 () Bool)

(assert (=> d!12541 (= c!8233 (and ((_ is Cons!1432) (toList!700 lt!25134)) (= (_1!1027 (h!2014 (toList!700 lt!25134))) (_1!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (=> d!12541 (= (getValueByKey!125 (toList!700 lt!25134) (_1!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) e!40710)))

(declare-fun b!62012 () Bool)

(declare-fun e!40711 () Option!131)

(assert (=> b!62012 (= e!40710 e!40711)))

(declare-fun c!8234 () Bool)

(assert (=> b!62012 (= c!8234 (and ((_ is Cons!1432) (toList!700 lt!25134)) (not (= (_1!1027 (h!2014 (toList!700 lt!25134))) (_1!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))))

(declare-fun b!62014 () Bool)

(assert (=> b!62014 (= e!40711 None!129)))

(declare-fun b!62013 () Bool)

(assert (=> b!62013 (= e!40711 (getValueByKey!125 (t!4806 (toList!700 lt!25134)) (_1!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(assert (= (and d!12541 c!8233) b!62011))

(assert (= (and d!12541 (not c!8233)) b!62012))

(assert (= (and b!62012 c!8234) b!62013))

(assert (= (and b!62012 (not c!8234)) b!62014))

(declare-fun m!55649 () Bool)

(assert (=> b!62013 m!55649))

(assert (=> b!61087 d!12541))

(declare-fun d!12543 () Bool)

(declare-fun e!40712 () Bool)

(assert (=> d!12543 e!40712))

(declare-fun res!34098 () Bool)

(assert (=> d!12543 (=> (not res!34098) (not e!40712))))

(declare-fun lt!25822 () ListLongMap!1369)

(assert (=> d!12543 (= res!34098 (contains!686 lt!25822 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))))))

(declare-fun lt!25823 () List!1436)

(assert (=> d!12543 (= lt!25822 (ListLongMap!1370 lt!25823))))

(declare-fun lt!25821 () Unit!1625)

(declare-fun lt!25824 () Unit!1625)

(assert (=> d!12543 (= lt!25821 lt!25824)))

(assert (=> d!12543 (= (getValueByKey!125 lt!25823 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))) (Some!130 (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))))))

(assert (=> d!12543 (= lt!25824 (lemmaContainsTupThenGetReturnValue!42 lt!25823 (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))))))

(assert (=> d!12543 (= lt!25823 (insertStrictlySorted!45 (toList!700 call!4695) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))) (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))))))

(assert (=> d!12543 (= (+!82 call!4695 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))) lt!25822)))

(declare-fun b!62015 () Bool)

(declare-fun res!34099 () Bool)

(assert (=> b!62015 (=> (not res!34099) (not e!40712))))

(assert (=> b!62015 (= res!34099 (= (getValueByKey!125 (toList!700 lt!25822) (_1!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16))))) (Some!130 (_2!1027 (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))))))))

(declare-fun b!62016 () Bool)

(assert (=> b!62016 (= e!40712 (contains!688 (toList!700 lt!25822) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7909 (ite c!7899 (minValue!1981 newMap!16) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1981 newMap!16)))))))

(assert (= (and d!12543 res!34098) b!62015))

(assert (= (and b!62015 res!34099) b!62016))

(declare-fun m!55651 () Bool)

(assert (=> d!12543 m!55651))

(declare-fun m!55653 () Bool)

(assert (=> d!12543 m!55653))

(declare-fun m!55655 () Bool)

(assert (=> d!12543 m!55655))

(declare-fun m!55657 () Bool)

(assert (=> d!12543 m!55657))

(declare-fun m!55659 () Bool)

(assert (=> b!62015 m!55659))

(declare-fun m!55661 () Bool)

(assert (=> b!62016 m!55661))

(assert (=> b!61130 d!12543))

(declare-fun b!62017 () Bool)

(declare-fun e!40713 () Option!131)

(assert (=> b!62017 (= e!40713 (Some!130 (_2!1027 (h!2014 (toList!700 lt!25155)))))))

(declare-fun d!12545 () Bool)

(declare-fun c!8235 () Bool)

(assert (=> d!12545 (= c!8235 (and ((_ is Cons!1432) (toList!700 lt!25155)) (= (_1!1027 (h!2014 (toList!700 lt!25155))) (_1!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (=> d!12545 (= (getValueByKey!125 (toList!700 lt!25155) (_1!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))) e!40713)))

(declare-fun b!62018 () Bool)

(declare-fun e!40714 () Option!131)

(assert (=> b!62018 (= e!40713 e!40714)))

(declare-fun c!8236 () Bool)

(assert (=> b!62018 (= c!8236 (and ((_ is Cons!1432) (toList!700 lt!25155)) (not (= (_1!1027 (h!2014 (toList!700 lt!25155))) (_1!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))))))

(declare-fun b!62020 () Bool)

(assert (=> b!62020 (= e!40714 None!129)))

(declare-fun b!62019 () Bool)

(assert (=> b!62019 (= e!40714 (getValueByKey!125 (t!4806 (toList!700 lt!25155)) (_1!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(assert (= (and d!12545 c!8235) b!62017))

(assert (= (and d!12545 (not c!8235)) b!62018))

(assert (= (and b!62018 c!8236) b!62019))

(assert (= (and b!62018 (not c!8236)) b!62020))

(declare-fun m!55663 () Bool)

(assert (=> b!62019 m!55663))

(assert (=> b!61099 d!12545))

(assert (=> d!12047 d!11949))

(declare-fun b!62021 () Bool)

(declare-fun e!40718 () Bool)

(declare-fun call!4815 () Bool)

(assert (=> b!62021 (= e!40718 call!4815)))

(declare-fun b!62022 () Bool)

(declare-fun e!40716 () Bool)

(declare-fun e!40715 () Bool)

(assert (=> b!62022 (= e!40716 e!40715)))

(declare-fun res!34101 () Bool)

(assert (=> b!62022 (=> (not res!34101) (not e!40715))))

(declare-fun e!40717 () Bool)

(assert (=> b!62022 (= res!34101 (not e!40717))))

(declare-fun res!34102 () Bool)

(assert (=> b!62022 (=> (not res!34102) (not e!40717))))

(assert (=> b!62022 (= res!34102 (validKeyInArray!0 (select (arr!1793 (_keys!3695 (_2!1026 lt!24941))) #b00000000000000000000000000000000)))))

(declare-fun b!62023 () Bool)

(assert (=> b!62023 (= e!40715 e!40718)))

(declare-fun c!8237 () Bool)

(assert (=> b!62023 (= c!8237 (validKeyInArray!0 (select (arr!1793 (_keys!3695 (_2!1026 lt!24941))) #b00000000000000000000000000000000)))))

(declare-fun b!62024 () Bool)

(assert (=> b!62024 (= e!40718 call!4815)))

(declare-fun d!12547 () Bool)

(declare-fun res!34100 () Bool)

(assert (=> d!12547 (=> res!34100 e!40716)))

(assert (=> d!12547 (= res!34100 (bvsge #b00000000000000000000000000000000 (size!2024 (_keys!3695 (_2!1026 lt!24941)))))))

(assert (=> d!12547 (= (arrayNoDuplicates!0 (_keys!3695 (_2!1026 lt!24941)) #b00000000000000000000000000000000 Nil!1434) e!40716)))

(declare-fun bm!4812 () Bool)

(assert (=> bm!4812 (= call!4815 (arrayNoDuplicates!0 (_keys!3695 (_2!1026 lt!24941)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!8237 (Cons!1433 (select (arr!1793 (_keys!3695 (_2!1026 lt!24941))) #b00000000000000000000000000000000) Nil!1434) Nil!1434)))))

(declare-fun b!62025 () Bool)

(assert (=> b!62025 (= e!40717 (contains!687 Nil!1434 (select (arr!1793 (_keys!3695 (_2!1026 lt!24941))) #b00000000000000000000000000000000)))))

(assert (= (and d!12547 (not res!34100)) b!62022))

(assert (= (and b!62022 res!34102) b!62025))

(assert (= (and b!62022 res!34101) b!62023))

(assert (= (and b!62023 c!8237) b!62021))

(assert (= (and b!62023 (not c!8237)) b!62024))

(assert (= (or b!62021 b!62024) bm!4812))

(assert (=> b!62022 m!54355))

(assert (=> b!62022 m!54355))

(assert (=> b!62022 m!54363))

(assert (=> b!62023 m!54355))

(assert (=> b!62023 m!54355))

(assert (=> b!62023 m!54363))

(assert (=> bm!4812 m!54355))

(declare-fun m!55665 () Bool)

(assert (=> bm!4812 m!55665))

(assert (=> b!62025 m!54355))

(assert (=> b!62025 m!54355))

(declare-fun m!55667 () Bool)

(assert (=> b!62025 m!55667))

(assert (=> b!61103 d!12547))

(assert (=> b!61086 d!12057))

(declare-fun d!12549 () Bool)

(assert (=> d!12549 (not (contains!686 (+!82 lt!25129 (tuple2!2033 lt!25127 lt!25130)) lt!25131))))

(declare-fun lt!25827 () Unit!1625)

(declare-fun choose!328 (ListLongMap!1369 (_ BitVec 64) V!2859 (_ BitVec 64)) Unit!1625)

(assert (=> d!12549 (= lt!25827 (choose!328 lt!25129 lt!25127 lt!25130 lt!25131))))

(declare-fun e!40721 () Bool)

(assert (=> d!12549 e!40721))

(declare-fun res!34105 () Bool)

(assert (=> d!12549 (=> (not res!34105) (not e!40721))))

(assert (=> d!12549 (= res!34105 (not (contains!686 lt!25129 lt!25131)))))

(assert (=> d!12549 (= (addStillNotContains!16 lt!25129 lt!25127 lt!25130 lt!25131) lt!25827)))

(declare-fun b!62029 () Bool)

(assert (=> b!62029 (= e!40721 (not (= lt!25127 lt!25131)))))

(assert (= (and d!12549 res!34105) b!62029))

(assert (=> d!12549 m!53765))

(assert (=> d!12549 m!53765))

(assert (=> d!12549 m!53767))

(declare-fun m!55669 () Bool)

(assert (=> d!12549 m!55669))

(declare-fun m!55671 () Bool)

(assert (=> d!12549 m!55671))

(assert (=> b!61086 d!12549))

(declare-fun d!12551 () Bool)

(declare-fun e!40722 () Bool)

(assert (=> d!12551 e!40722))

(declare-fun res!34106 () Bool)

(assert (=> d!12551 (=> (not res!34106) (not e!40722))))

(declare-fun lt!25829 () ListLongMap!1369)

(assert (=> d!12551 (= res!34106 (contains!686 lt!25829 (_1!1027 (tuple2!2033 lt!25127 lt!25130))))))

(declare-fun lt!25830 () List!1436)

(assert (=> d!12551 (= lt!25829 (ListLongMap!1370 lt!25830))))

(declare-fun lt!25828 () Unit!1625)

(declare-fun lt!25831 () Unit!1625)

(assert (=> d!12551 (= lt!25828 lt!25831)))

(assert (=> d!12551 (= (getValueByKey!125 lt!25830 (_1!1027 (tuple2!2033 lt!25127 lt!25130))) (Some!130 (_2!1027 (tuple2!2033 lt!25127 lt!25130))))))

(assert (=> d!12551 (= lt!25831 (lemmaContainsTupThenGetReturnValue!42 lt!25830 (_1!1027 (tuple2!2033 lt!25127 lt!25130)) (_2!1027 (tuple2!2033 lt!25127 lt!25130))))))

(assert (=> d!12551 (= lt!25830 (insertStrictlySorted!45 (toList!700 lt!25129) (_1!1027 (tuple2!2033 lt!25127 lt!25130)) (_2!1027 (tuple2!2033 lt!25127 lt!25130))))))

(assert (=> d!12551 (= (+!82 lt!25129 (tuple2!2033 lt!25127 lt!25130)) lt!25829)))

(declare-fun b!62030 () Bool)

(declare-fun res!34107 () Bool)

(assert (=> b!62030 (=> (not res!34107) (not e!40722))))

(assert (=> b!62030 (= res!34107 (= (getValueByKey!125 (toList!700 lt!25829) (_1!1027 (tuple2!2033 lt!25127 lt!25130))) (Some!130 (_2!1027 (tuple2!2033 lt!25127 lt!25130)))))))

(declare-fun b!62031 () Bool)

(assert (=> b!62031 (= e!40722 (contains!688 (toList!700 lt!25829) (tuple2!2033 lt!25127 lt!25130)))))

(assert (= (and d!12551 res!34106) b!62030))

(assert (= (and b!62030 res!34107) b!62031))

(declare-fun m!55673 () Bool)

(assert (=> d!12551 m!55673))

(declare-fun m!55675 () Bool)

(assert (=> d!12551 m!55675))

(declare-fun m!55677 () Bool)

(assert (=> d!12551 m!55677))

(declare-fun m!55679 () Bool)

(assert (=> d!12551 m!55679))

(declare-fun m!55681 () Bool)

(assert (=> b!62030 m!55681))

(declare-fun m!55683 () Bool)

(assert (=> b!62031 m!55683))

(assert (=> b!61086 d!12551))

(declare-fun d!12553 () Bool)

(declare-fun e!40723 () Bool)

(assert (=> d!12553 e!40723))

(declare-fun res!34108 () Bool)

(assert (=> d!12553 (=> res!34108 e!40723)))

(declare-fun lt!25835 () Bool)

(assert (=> d!12553 (= res!34108 (not lt!25835))))

(declare-fun lt!25834 () Bool)

(assert (=> d!12553 (= lt!25835 lt!25834)))

(declare-fun lt!25833 () Unit!1625)

(declare-fun e!40724 () Unit!1625)

(assert (=> d!12553 (= lt!25833 e!40724)))

(declare-fun c!8238 () Bool)

(assert (=> d!12553 (= c!8238 lt!25834)))

(assert (=> d!12553 (= lt!25834 (containsKey!129 (toList!700 (+!82 lt!25129 (tuple2!2033 lt!25127 lt!25130))) lt!25131))))

(assert (=> d!12553 (= (contains!686 (+!82 lt!25129 (tuple2!2033 lt!25127 lt!25130)) lt!25131) lt!25835)))

(declare-fun b!62032 () Bool)

(declare-fun lt!25832 () Unit!1625)

(assert (=> b!62032 (= e!40724 lt!25832)))

(assert (=> b!62032 (= lt!25832 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 (+!82 lt!25129 (tuple2!2033 lt!25127 lt!25130))) lt!25131))))

(assert (=> b!62032 (isDefined!78 (getValueByKey!125 (toList!700 (+!82 lt!25129 (tuple2!2033 lt!25127 lt!25130))) lt!25131))))

(declare-fun b!62033 () Bool)

(declare-fun Unit!1683 () Unit!1625)

(assert (=> b!62033 (= e!40724 Unit!1683)))

(declare-fun b!62034 () Bool)

(assert (=> b!62034 (= e!40723 (isDefined!78 (getValueByKey!125 (toList!700 (+!82 lt!25129 (tuple2!2033 lt!25127 lt!25130))) lt!25131)))))

(assert (= (and d!12553 c!8238) b!62032))

(assert (= (and d!12553 (not c!8238)) b!62033))

(assert (= (and d!12553 (not res!34108)) b!62034))

(declare-fun m!55685 () Bool)

(assert (=> d!12553 m!55685))

(declare-fun m!55687 () Bool)

(assert (=> b!62032 m!55687))

(declare-fun m!55689 () Bool)

(assert (=> b!62032 m!55689))

(assert (=> b!62032 m!55689))

(declare-fun m!55691 () Bool)

(assert (=> b!62032 m!55691))

(assert (=> b!62034 m!55689))

(assert (=> b!62034 m!55689))

(assert (=> b!62034 m!55691))

(assert (=> b!61086 d!12553))

(declare-fun d!12555 () Bool)

(declare-fun e!40725 () Bool)

(assert (=> d!12555 e!40725))

(declare-fun res!34109 () Bool)

(assert (=> d!12555 (=> (not res!34109) (not e!40725))))

(declare-fun lt!25837 () ListLongMap!1369)

(assert (=> d!12555 (= res!34109 (contains!686 lt!25837 (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!25838 () List!1436)

(assert (=> d!12555 (= lt!25837 (ListLongMap!1370 lt!25838))))

(declare-fun lt!25836 () Unit!1625)

(declare-fun lt!25839 () Unit!1625)

(assert (=> d!12555 (= lt!25836 lt!25839)))

(assert (=> d!12555 (= (getValueByKey!125 lt!25838 (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12555 (= lt!25839 (lemmaContainsTupThenGetReturnValue!42 lt!25838 (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12555 (= lt!25838 (insertStrictlySorted!45 (toList!700 call!4688) (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12555 (= (+!82 call!4688 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!25837)))

(declare-fun b!62035 () Bool)

(declare-fun res!34110 () Bool)

(assert (=> b!62035 (=> (not res!34110) (not e!40725))))

(assert (=> b!62035 (= res!34110 (= (getValueByKey!125 (toList!700 lt!25837) (_1!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!130 (_2!1027 (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!62036 () Bool)

(assert (=> b!62036 (= e!40725 (contains!688 (toList!700 lt!25837) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12555 res!34109) b!62035))

(assert (= (and b!62035 res!34110) b!62036))

(declare-fun m!55693 () Bool)

(assert (=> d!12555 m!55693))

(declare-fun m!55695 () Bool)

(assert (=> d!12555 m!55695))

(declare-fun m!55697 () Bool)

(assert (=> d!12555 m!55697))

(declare-fun m!55699 () Bool)

(assert (=> d!12555 m!55699))

(declare-fun m!55701 () Bool)

(assert (=> b!62035 m!55701))

(declare-fun m!55703 () Bool)

(assert (=> b!62036 m!55703))

(assert (=> b!61086 d!12555))

(declare-fun d!12557 () Bool)

(assert (=> d!12557 (= (+!82 (getCurrentListMap!405 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)) (tuple2!2033 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!405 (_keys!3695 newMap!16) (array!3750 (store (arr!1794 (_values!2050 newMap!16)) (index!3037 lt!24947) (ValueCellFull!861 (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2025 (_values!2050 newMap!16))) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2067 newMap!16)))))

(assert (=> d!12557 true))

(declare-fun _$5!65 () Unit!1625)

(assert (=> d!12557 (= (choose!324 (_keys!3695 newMap!16) (_values!2050 newMap!16) (mask!5963 newMap!16) (extraKeys!1950 newMap!16) (zeroValue!1981 newMap!16) (minValue!1981 newMap!16) (index!3037 lt!24947) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2067 newMap!16)) _$5!65)))

(declare-fun bs!2705 () Bool)

(assert (= bs!2705 d!12557))

(assert (=> bs!2705 m!53489))

(assert (=> bs!2705 m!53489))

(assert (=> bs!2705 m!54077))

(assert (=> bs!2705 m!53475))

(assert (=> bs!2705 m!53471))

(assert (=> d!12093 d!12557))

(assert (=> d!12093 d!12123))

(assert (=> b!61206 d!12321))

(assert (=> b!61206 d!12323))

(declare-fun d!12559 () Bool)

(assert (=> d!12559 (= (get!1078 (getValueByKey!125 (toList!700 lt!24995) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2407 (getValueByKey!125 (toList!700 lt!24995) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12087 d!12559))

(assert (=> d!12087 d!12313))

(declare-fun b!62038 () Bool)

(declare-fun res!34111 () Bool)

(declare-fun e!40726 () Bool)

(assert (=> b!62038 (=> (not res!34111) (not e!40726))))

(assert (=> b!62038 (= res!34111 (bvsge (size!2028 (v!2404 (underlying!231 thiss!992))) (_size!364 (v!2404 (underlying!231 thiss!992)))))))

(declare-fun b!62040 () Bool)

(assert (=> b!62040 (= e!40726 (and (bvsge (extraKeys!1950 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000000000000000) (bvsle (extraKeys!1950 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000000000000011) (bvsge (_vacant!364 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000000000000000)))))

(declare-fun d!12561 () Bool)

(declare-fun res!34113 () Bool)

(assert (=> d!12561 (=> (not res!34113) (not e!40726))))

(assert (=> d!12561 (= res!34113 (validMask!0 (mask!5963 (v!2404 (underlying!231 thiss!992)))))))

(assert (=> d!12561 (= (simpleValid!43 (v!2404 (underlying!231 thiss!992))) e!40726)))

(declare-fun b!62039 () Bool)

(declare-fun res!34112 () Bool)

(assert (=> b!62039 (=> (not res!34112) (not e!40726))))

(assert (=> b!62039 (= res!34112 (= (size!2028 (v!2404 (underlying!231 thiss!992))) (bvadd (_size!364 (v!2404 (underlying!231 thiss!992))) (bvsdiv (bvadd (extraKeys!1950 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!62037 () Bool)

(declare-fun res!34114 () Bool)

(assert (=> b!62037 (=> (not res!34114) (not e!40726))))

(assert (=> b!62037 (= res!34114 (and (= (size!2025 (_values!2050 (v!2404 (underlying!231 thiss!992)))) (bvadd (mask!5963 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000000000000001)) (= (size!2024 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (size!2025 (_values!2050 (v!2404 (underlying!231 thiss!992))))) (bvsge (_size!364 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000000000000000) (bvsle (_size!364 (v!2404 (underlying!231 thiss!992))) (bvadd (mask!5963 (v!2404 (underlying!231 thiss!992))) #b00000000000000000000000000000001))))))

(assert (= (and d!12561 res!34113) b!62037))

(assert (= (and b!62037 res!34114) b!62038))

(assert (= (and b!62038 res!34111) b!62039))

(assert (= (and b!62039 res!34112) b!62040))

(declare-fun m!55705 () Bool)

(assert (=> b!62038 m!55705))

(assert (=> d!12561 m!53319))

(assert (=> b!62039 m!55705))

(assert (=> d!11973 d!12561))

(declare-fun d!12563 () Bool)

(assert (=> d!12563 (= (apply!67 lt!25169 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000)) (get!1078 (getValueByKey!125 (toList!700 lt!25169) (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2706 () Bool)

(assert (= bs!2706 d!12563))

(assert (=> bs!2706 m!53617))

(assert (=> bs!2706 m!55605))

(assert (=> bs!2706 m!55605))

(declare-fun m!55707 () Bool)

(assert (=> bs!2706 m!55707))

(assert (=> b!61138 d!12563))

(declare-fun c!8239 () Bool)

(declare-fun d!12565 () Bool)

(assert (=> d!12565 (= c!8239 ((_ is ValueCellFull!861) (select (arr!1794 (ite (or c!7909 c!7902) (_values!2050 newMap!16) lt!24925)) #b00000000000000000000000000000000)))))

(declare-fun e!40727 () V!2859)

(assert (=> d!12565 (= (get!1075 (select (arr!1794 (ite (or c!7909 c!7902) (_values!2050 newMap!16) lt!24925)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!40727)))

(declare-fun b!62041 () Bool)

(assert (=> b!62041 (= e!40727 (get!1076 (select (arr!1794 (ite (or c!7909 c!7902) (_values!2050 newMap!16) lt!24925)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!62042 () Bool)

(assert (=> b!62042 (= e!40727 (get!1077 (select (arr!1794 (ite (or c!7909 c!7902) (_values!2050 newMap!16) lt!24925)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2067 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12565 c!8239) b!62041))

(assert (= (and d!12565 (not c!8239)) b!62042))

(assert (=> b!62041 m!53955))

(assert (=> b!62041 m!53647))

(declare-fun m!55709 () Bool)

(assert (=> b!62041 m!55709))

(assert (=> b!62042 m!53955))

(assert (=> b!62042 m!53647))

(declare-fun m!55711 () Bool)

(assert (=> b!62042 m!55711))

(assert (=> b!61138 d!12565))

(declare-fun d!12567 () Bool)

(declare-fun e!40728 () Bool)

(assert (=> d!12567 e!40728))

(declare-fun res!34115 () Bool)

(assert (=> d!12567 (=> res!34115 e!40728)))

(declare-fun lt!25843 () Bool)

(assert (=> d!12567 (= res!34115 (not lt!25843))))

(declare-fun lt!25842 () Bool)

(assert (=> d!12567 (= lt!25843 lt!25842)))

(declare-fun lt!25841 () Unit!1625)

(declare-fun e!40729 () Unit!1625)

(assert (=> d!12567 (= lt!25841 e!40729)))

(declare-fun c!8240 () Bool)

(assert (=> d!12567 (= c!8240 lt!25842)))

(assert (=> d!12567 (= lt!25842 (containsKey!129 (toList!700 lt!25155) (_1!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(assert (=> d!12567 (= (contains!686 lt!25155 (_1!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25843)))

(declare-fun b!62043 () Bool)

(declare-fun lt!25840 () Unit!1625)

(assert (=> b!62043 (= e!40729 lt!25840)))

(assert (=> b!62043 (= lt!25840 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 lt!25155) (_1!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(assert (=> b!62043 (isDefined!78 (getValueByKey!125 (toList!700 lt!25155) (_1!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun b!62044 () Bool)

(declare-fun Unit!1684 () Unit!1625)

(assert (=> b!62044 (= e!40729 Unit!1684)))

(declare-fun b!62045 () Bool)

(assert (=> b!62045 (= e!40728 (isDefined!78 (getValueByKey!125 (toList!700 lt!25155) (_1!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (= (and d!12567 c!8240) b!62043))

(assert (= (and d!12567 (not c!8240)) b!62044))

(assert (= (and d!12567 (not res!34115)) b!62045))

(declare-fun m!55713 () Bool)

(assert (=> d!12567 m!55713))

(declare-fun m!55715 () Bool)

(assert (=> b!62043 m!55715))

(assert (=> b!62043 m!53871))

(assert (=> b!62043 m!53871))

(declare-fun m!55717 () Bool)

(assert (=> b!62043 m!55717))

(assert (=> b!62045 m!53871))

(assert (=> b!62045 m!53871))

(assert (=> b!62045 m!55717))

(assert (=> d!12043 d!12567))

(declare-fun b!62046 () Bool)

(declare-fun e!40730 () Option!131)

(assert (=> b!62046 (= e!40730 (Some!130 (_2!1027 (h!2014 lt!25156))))))

(declare-fun d!12569 () Bool)

(declare-fun c!8241 () Bool)

(assert (=> d!12569 (= c!8241 (and ((_ is Cons!1432) lt!25156) (= (_1!1027 (h!2014 lt!25156)) (_1!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (=> d!12569 (= (getValueByKey!125 lt!25156 (_1!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))) e!40730)))

(declare-fun b!62047 () Bool)

(declare-fun e!40731 () Option!131)

(assert (=> b!62047 (= e!40730 e!40731)))

(declare-fun c!8242 () Bool)

(assert (=> b!62047 (= c!8242 (and ((_ is Cons!1432) lt!25156) (not (= (_1!1027 (h!2014 lt!25156)) (_1!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))))))

(declare-fun b!62049 () Bool)

(assert (=> b!62049 (= e!40731 None!129)))

(declare-fun b!62048 () Bool)

(assert (=> b!62048 (= e!40731 (getValueByKey!125 (t!4806 lt!25156) (_1!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(assert (= (and d!12569 c!8241) b!62046))

(assert (= (and d!12569 (not c!8241)) b!62047))

(assert (= (and b!62047 c!8242) b!62048))

(assert (= (and b!62047 (not c!8242)) b!62049))

(declare-fun m!55719 () Bool)

(assert (=> b!62048 m!55719))

(assert (=> d!12043 d!12569))

(declare-fun d!12571 () Bool)

(assert (=> d!12571 (= (getValueByKey!125 lt!25156 (_1!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))) (Some!130 (_2!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun lt!25844 () Unit!1625)

(assert (=> d!12571 (= lt!25844 (choose!325 lt!25156 (_1!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun e!40732 () Bool)

(assert (=> d!12571 e!40732))

(declare-fun res!34116 () Bool)

(assert (=> d!12571 (=> (not res!34116) (not e!40732))))

(assert (=> d!12571 (= res!34116 (isStrictlySorted!285 lt!25156))))

(assert (=> d!12571 (= (lemmaContainsTupThenGetReturnValue!42 lt!25156 (_1!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25844)))

(declare-fun b!62050 () Bool)

(declare-fun res!34117 () Bool)

(assert (=> b!62050 (=> (not res!34117) (not e!40732))))

(assert (=> b!62050 (= res!34117 (containsKey!129 lt!25156 (_1!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun b!62051 () Bool)

(assert (=> b!62051 (= e!40732 (contains!688 lt!25156 (tuple2!2033 (_1!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (= (and d!12571 res!34116) b!62050))

(assert (= (and b!62050 res!34117) b!62051))

(assert (=> d!12571 m!53865))

(declare-fun m!55721 () Bool)

(assert (=> d!12571 m!55721))

(declare-fun m!55723 () Bool)

(assert (=> d!12571 m!55723))

(declare-fun m!55725 () Bool)

(assert (=> b!62050 m!55725))

(declare-fun m!55727 () Bool)

(assert (=> b!62051 m!55727))

(assert (=> d!12043 d!12571))

(declare-fun lt!25845 () List!1436)

(declare-fun e!40735 () Bool)

(declare-fun b!62052 () Bool)

(assert (=> b!62052 (= e!40735 (contains!688 lt!25845 (tuple2!2033 (_1!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(declare-fun call!4816 () List!1436)

(declare-fun c!8244 () Bool)

(declare-fun e!40733 () List!1436)

(declare-fun bm!4813 () Bool)

(assert (=> bm!4813 (= call!4816 ($colon$colon!61 e!40733 (ite c!8244 (h!2014 (toList!700 lt!25006)) (tuple2!2033 (_1!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))))))

(declare-fun c!8243 () Bool)

(assert (=> bm!4813 (= c!8243 c!8244)))

(declare-fun b!62053 () Bool)

(declare-fun e!40737 () List!1436)

(assert (=> b!62053 (= e!40737 call!4816)))

(declare-fun bm!4814 () Bool)

(declare-fun call!4818 () List!1436)

(declare-fun call!4817 () List!1436)

(assert (=> bm!4814 (= call!4818 call!4817)))

(declare-fun b!62054 () Bool)

(declare-fun e!40734 () List!1436)

(assert (=> b!62054 (= e!40734 call!4818)))

(declare-fun b!62055 () Bool)

(assert (=> b!62055 (= e!40733 (insertStrictlySorted!45 (t!4806 (toList!700 lt!25006)) (_1!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun bm!4815 () Bool)

(assert (=> bm!4815 (= call!4817 call!4816)))

(declare-fun b!62056 () Bool)

(assert (=> b!62056 (= e!40734 call!4818)))

(declare-fun d!12573 () Bool)

(assert (=> d!12573 e!40735))

(declare-fun res!34118 () Bool)

(assert (=> d!12573 (=> (not res!34118) (not e!40735))))

(assert (=> d!12573 (= res!34118 (isStrictlySorted!285 lt!25845))))

(assert (=> d!12573 (= lt!25845 e!40737)))

(assert (=> d!12573 (= c!8244 (and ((_ is Cons!1432) (toList!700 lt!25006)) (bvslt (_1!1027 (h!2014 (toList!700 lt!25006))) (_1!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (=> d!12573 (isStrictlySorted!285 (toList!700 lt!25006))))

(assert (=> d!12573 (= (insertStrictlySorted!45 (toList!700 lt!25006) (_1!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25845)))

(declare-fun b!62057 () Bool)

(declare-fun e!40736 () List!1436)

(assert (=> b!62057 (= e!40736 call!4817)))

(declare-fun b!62058 () Bool)

(declare-fun c!8246 () Bool)

(assert (=> b!62058 (= c!8246 (and ((_ is Cons!1432) (toList!700 lt!25006)) (bvsgt (_1!1027 (h!2014 (toList!700 lt!25006))) (_1!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (=> b!62058 (= e!40736 e!40734)))

(declare-fun b!62059 () Bool)

(declare-fun res!34119 () Bool)

(assert (=> b!62059 (=> (not res!34119) (not e!40735))))

(assert (=> b!62059 (= res!34119 (containsKey!129 lt!25845 (_1!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun b!62060 () Bool)

(assert (=> b!62060 (= e!40737 e!40736)))

(declare-fun c!8245 () Bool)

(assert (=> b!62060 (= c!8245 (and ((_ is Cons!1432) (toList!700 lt!25006)) (= (_1!1027 (h!2014 (toList!700 lt!25006))) (_1!1027 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(declare-fun b!62061 () Bool)

(assert (=> b!62061 (= e!40733 (ite c!8245 (t!4806 (toList!700 lt!25006)) (ite c!8246 (Cons!1432 (h!2014 (toList!700 lt!25006)) (t!4806 (toList!700 lt!25006))) Nil!1433)))))

(assert (= (and d!12573 c!8244) b!62053))

(assert (= (and d!12573 (not c!8244)) b!62060))

(assert (= (and b!62060 c!8245) b!62057))

(assert (= (and b!62060 (not c!8245)) b!62058))

(assert (= (and b!62058 c!8246) b!62056))

(assert (= (and b!62058 (not c!8246)) b!62054))

(assert (= (or b!62056 b!62054) bm!4814))

(assert (= (or b!62057 bm!4814) bm!4815))

(assert (= (or b!62053 bm!4815) bm!4813))

(assert (= (and bm!4813 c!8243) b!62055))

(assert (= (and bm!4813 (not c!8243)) b!62061))

(assert (= (and d!12573 res!34118) b!62059))

(assert (= (and b!62059 res!34119) b!62052))

(declare-fun m!55729 () Bool)

(assert (=> bm!4813 m!55729))

(declare-fun m!55731 () Bool)

(assert (=> b!62059 m!55731))

(declare-fun m!55733 () Bool)

(assert (=> d!12573 m!55733))

(declare-fun m!55735 () Bool)

(assert (=> d!12573 m!55735))

(declare-fun m!55737 () Bool)

(assert (=> b!62055 m!55737))

(declare-fun m!55739 () Bool)

(assert (=> b!62052 m!55739))

(assert (=> d!12043 d!12573))

(assert (=> b!61079 d!11975))

(declare-fun d!12575 () Bool)

(declare-fun e!40738 () Bool)

(assert (=> d!12575 e!40738))

(declare-fun res!34120 () Bool)

(assert (=> d!12575 (=> res!34120 e!40738)))

(declare-fun lt!25849 () Bool)

(assert (=> d!12575 (= res!34120 (not lt!25849))))

(declare-fun lt!25848 () Bool)

(assert (=> d!12575 (= lt!25849 lt!25848)))

(declare-fun lt!25847 () Unit!1625)

(declare-fun e!40739 () Unit!1625)

(assert (=> d!12575 (= lt!25847 e!40739)))

(declare-fun c!8247 () Bool)

(assert (=> d!12575 (= c!8247 lt!25848)))

(assert (=> d!12575 (= lt!25848 (containsKey!129 (toList!700 lt!25010) lt!25005))))

(assert (=> d!12575 (= (contains!686 lt!25010 lt!25005) lt!25849)))

(declare-fun b!62062 () Bool)

(declare-fun lt!25846 () Unit!1625)

(assert (=> b!62062 (= e!40739 lt!25846)))

(assert (=> b!62062 (= lt!25846 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 lt!25010) lt!25005))))

(assert (=> b!62062 (isDefined!78 (getValueByKey!125 (toList!700 lt!25010) lt!25005))))

(declare-fun b!62063 () Bool)

(declare-fun Unit!1685 () Unit!1625)

(assert (=> b!62063 (= e!40739 Unit!1685)))

(declare-fun b!62064 () Bool)

(assert (=> b!62064 (= e!40738 (isDefined!78 (getValueByKey!125 (toList!700 lt!25010) lt!25005)))))

(assert (= (and d!12575 c!8247) b!62062))

(assert (= (and d!12575 (not c!8247)) b!62063))

(assert (= (and d!12575 (not res!34120)) b!62064))

(declare-fun m!55741 () Bool)

(assert (=> d!12575 m!55741))

(declare-fun m!55743 () Bool)

(assert (=> b!62062 m!55743))

(assert (=> b!62062 m!53835))

(assert (=> b!62062 m!53835))

(declare-fun m!55745 () Bool)

(assert (=> b!62062 m!55745))

(assert (=> b!62064 m!53835))

(assert (=> b!62064 m!53835))

(assert (=> b!62064 m!55745))

(assert (=> d!12023 d!12575))

(assert (=> d!12023 d!12039))

(declare-fun d!12577 () Bool)

(assert (=> d!12577 (= (apply!67 (+!82 lt!25010 (tuple2!2033 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))) lt!25005) (apply!67 lt!25010 lt!25005))))

(assert (=> d!12577 true))

(declare-fun _$34!772 () Unit!1625)

(assert (=> d!12577 (= (choose!318 lt!25010 lt!24997 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))) lt!25005) _$34!772)))

(declare-fun bs!2707 () Bool)

(assert (= bs!2707 d!12577))

(assert (=> bs!2707 m!53499))

(assert (=> bs!2707 m!53499))

(assert (=> bs!2707 m!53501))

(assert (=> bs!2707 m!53505))

(assert (=> d!12023 d!12577))

(assert (=> d!12023 d!12033))

(assert (=> d!12023 d!12035))

(declare-fun d!12579 () Bool)

(assert (=> d!12579 (= (get!1078 (getValueByKey!125 (toList!700 (+!82 lt!25003 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25015)) (v!2407 (getValueByKey!125 (toList!700 (+!82 lt!25003 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25015)))))

(assert (=> d!12027 d!12579))

(declare-fun e!40740 () Option!131)

(declare-fun b!62065 () Bool)

(assert (=> b!62065 (= e!40740 (Some!130 (_2!1027 (h!2014 (toList!700 (+!82 lt!25003 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))))

(declare-fun d!12581 () Bool)

(declare-fun c!8248 () Bool)

(assert (=> d!12581 (= c!8248 (and ((_ is Cons!1432) (toList!700 (+!82 lt!25003 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))) (= (_1!1027 (h!2014 (toList!700 (+!82 lt!25003 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))) lt!25015)))))

(assert (=> d!12581 (= (getValueByKey!125 (toList!700 (+!82 lt!25003 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25015) e!40740)))

(declare-fun b!62066 () Bool)

(declare-fun e!40741 () Option!131)

(assert (=> b!62066 (= e!40740 e!40741)))

(declare-fun c!8249 () Bool)

(assert (=> b!62066 (= c!8249 (and ((_ is Cons!1432) (toList!700 (+!82 lt!25003 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))) (not (= (_1!1027 (h!2014 (toList!700 (+!82 lt!25003 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))) lt!25015))))))

(declare-fun b!62068 () Bool)

(assert (=> b!62068 (= e!40741 None!129)))

(declare-fun b!62067 () Bool)

(assert (=> b!62067 (= e!40741 (getValueByKey!125 (t!4806 (toList!700 (+!82 lt!25003 (tuple2!2033 lt!25001 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))) lt!25015))))

(assert (= (and d!12581 c!8248) b!62065))

(assert (= (and d!12581 (not c!8248)) b!62066))

(assert (= (and b!62066 c!8249) b!62067))

(assert (= (and b!62066 (not c!8249)) b!62068))

(declare-fun m!55747 () Bool)

(assert (=> b!62067 m!55747))

(assert (=> d!12027 d!12581))

(declare-fun d!12583 () Bool)

(assert (=> d!12583 (= (get!1078 (getValueByKey!125 (toList!700 lt!24995) #b1000000000000000000000000000000000000000000000000000000000000000)) (v!2407 (getValueByKey!125 (toList!700 lt!24995) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12071 d!12583))

(assert (=> d!12071 d!12241))

(declare-fun d!12585 () Bool)

(declare-fun res!34121 () Bool)

(declare-fun e!40742 () Bool)

(assert (=> d!12585 (=> res!34121 e!40742)))

(assert (=> d!12585 (= res!34121 (and ((_ is Cons!1432) (toList!700 (+!82 lt!25006 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))) (= (_1!1027 (h!2014 (toList!700 (+!82 lt!25006 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))) lt!25009)))))

(assert (=> d!12585 (= (containsKey!129 (toList!700 (+!82 lt!25006 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25009) e!40742)))

(declare-fun b!62069 () Bool)

(declare-fun e!40743 () Bool)

(assert (=> b!62069 (= e!40742 e!40743)))

(declare-fun res!34122 () Bool)

(assert (=> b!62069 (=> (not res!34122) (not e!40743))))

(assert (=> b!62069 (= res!34122 (and (or (not ((_ is Cons!1432) (toList!700 (+!82 lt!25006 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))) (bvsle (_1!1027 (h!2014 (toList!700 (+!82 lt!25006 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))) lt!25009)) ((_ is Cons!1432) (toList!700 (+!82 lt!25006 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))) (bvslt (_1!1027 (h!2014 (toList!700 (+!82 lt!25006 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992)))))))) lt!25009)))))

(declare-fun b!62070 () Bool)

(assert (=> b!62070 (= e!40743 (containsKey!129 (t!4806 (toList!700 (+!82 lt!25006 (tuple2!2033 lt!24996 (zeroValue!1981 (v!2404 (underlying!231 thiss!992))))))) lt!25009))))

(assert (= (and d!12585 (not res!34121)) b!62069))

(assert (= (and b!62069 res!34122) b!62070))

(declare-fun m!55749 () Bool)

(assert (=> b!62070 m!55749))

(assert (=> d!12021 d!12585))

(assert (=> b!61126 d!12109))

(declare-fun d!12587 () Bool)

(declare-fun lt!25850 () Bool)

(assert (=> d!12587 (= lt!25850 (select (content!66 (toList!700 lt!25100)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))

(declare-fun e!40745 () Bool)

(assert (=> d!12587 (= lt!25850 e!40745)))

(declare-fun res!34123 () Bool)

(assert (=> d!12587 (=> (not res!34123) (not e!40745))))

(assert (=> d!12587 (= res!34123 ((_ is Cons!1432) (toList!700 lt!25100)))))

(assert (=> d!12587 (= (contains!688 (toList!700 lt!25100) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) lt!25850)))

(declare-fun b!62071 () Bool)

(declare-fun e!40744 () Bool)

(assert (=> b!62071 (= e!40745 e!40744)))

(declare-fun res!34124 () Bool)

(assert (=> b!62071 (=> res!34124 e!40744)))

(assert (=> b!62071 (= res!34124 (= (h!2014 (toList!700 lt!25100)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))

(declare-fun b!62072 () Bool)

(assert (=> b!62072 (= e!40744 (contains!688 (t!4806 (toList!700 lt!25100)) (tuple2!2033 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))

(assert (= (and d!12587 res!34123) b!62071))

(assert (= (and b!62071 (not res!34124)) b!62072))

(declare-fun m!55751 () Bool)

(assert (=> d!12587 m!55751))

(declare-fun m!55753 () Bool)

(assert (=> d!12587 m!55753))

(declare-fun m!55755 () Bool)

(assert (=> b!62072 m!55755))

(assert (=> b!61021 d!12587))

(assert (=> b!61082 d!11975))

(assert (=> b!61031 d!12109))

(declare-fun b!62073 () Bool)

(declare-fun e!40749 () Bool)

(declare-fun call!4819 () Bool)

(assert (=> b!62073 (= e!40749 call!4819)))

(declare-fun b!62074 () Bool)

(declare-fun e!40747 () Bool)

(declare-fun e!40746 () Bool)

(assert (=> b!62074 (= e!40747 e!40746)))

(declare-fun res!34126 () Bool)

(assert (=> b!62074 (=> (not res!34126) (not e!40746))))

(declare-fun e!40748 () Bool)

(assert (=> b!62074 (= res!34126 (not e!40748))))

(declare-fun res!34127 () Bool)

(assert (=> b!62074 (=> (not res!34127) (not e!40748))))

(assert (=> b!62074 (= res!34127 (validKeyInArray!0 (select (arr!1793 (_keys!3695 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!62075 () Bool)

(assert (=> b!62075 (= e!40746 e!40749)))

(declare-fun c!8250 () Bool)

(assert (=> b!62075 (= c!8250 (validKeyInArray!0 (select (arr!1793 (_keys!3695 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!62076 () Bool)

(assert (=> b!62076 (= e!40749 call!4819)))

(declare-fun d!12589 () Bool)

(declare-fun res!34125 () Bool)

(assert (=> d!12589 (=> res!34125 e!40747)))

(assert (=> d!12589 (= res!34125 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2024 (_keys!3695 newMap!16))))))

(assert (=> d!12589 (= (arrayNoDuplicates!0 (_keys!3695 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!7971 (Cons!1433 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000) Nil!1434) Nil!1434)) e!40747)))

(declare-fun bm!4816 () Bool)

(assert (=> bm!4816 (= call!4819 (arrayNoDuplicates!0 (_keys!3695 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!8250 (Cons!1433 (select (arr!1793 (_keys!3695 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (ite c!7971 (Cons!1433 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000) Nil!1434) Nil!1434)) (ite c!7971 (Cons!1433 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000) Nil!1434) Nil!1434))))))

(declare-fun b!62077 () Bool)

(assert (=> b!62077 (= e!40748 (contains!687 (ite c!7971 (Cons!1433 (select (arr!1793 (_keys!3695 newMap!16)) #b00000000000000000000000000000000) Nil!1434) Nil!1434) (select (arr!1793 (_keys!3695 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (= (and d!12589 (not res!34125)) b!62074))

(assert (= (and b!62074 res!34127) b!62077))

(assert (= (and b!62074 res!34126) b!62075))

(assert (= (and b!62075 c!8250) b!62073))

(assert (= (and b!62075 (not c!8250)) b!62076))

(assert (= (or b!62073 b!62076) bm!4816))

(assert (=> b!62074 m!55499))

(assert (=> b!62074 m!55499))

(assert (=> b!62074 m!55507))

(assert (=> b!62075 m!55499))

(assert (=> b!62075 m!55499))

(assert (=> b!62075 m!55507))

(assert (=> bm!4816 m!55499))

(declare-fun m!55757 () Bool)

(assert (=> bm!4816 m!55757))

(assert (=> b!62077 m!55499))

(assert (=> b!62077 m!55499))

(declare-fun m!55759 () Bool)

(assert (=> b!62077 m!55759))

(assert (=> bm!4682 d!12589))

(declare-fun b!62096 () Bool)

(declare-fun e!40764 () Bool)

(declare-fun lt!25856 () SeekEntryResult!228)

(assert (=> b!62096 (= e!40764 (bvsge (x!10162 lt!25856) #b01111111111111111111111111111110))))

(declare-fun b!62097 () Bool)

(declare-fun e!40761 () SeekEntryResult!228)

(declare-fun e!40762 () SeekEntryResult!228)

(assert (=> b!62097 (= e!40761 e!40762)))

(declare-fun lt!25855 () (_ BitVec 64))

(declare-fun c!8258 () Bool)

(assert (=> b!62097 (= c!8258 (or (= lt!25855 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)) (= (bvadd lt!25855 lt!25855) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!62098 () Bool)

(assert (=> b!62098 (= e!40762 (seekKeyOrZeroOrLongMinValue!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (nextIndex!0 (toIndex!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (mask!5963 newMap!16)) #b00000000000000000000000000000000 (mask!5963 newMap!16)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (_keys!3695 newMap!16) (mask!5963 newMap!16)))))

(declare-fun b!62099 () Bool)

(assert (=> b!62099 (and (bvsge (index!3038 lt!25856) #b00000000000000000000000000000000) (bvslt (index!3038 lt!25856) (size!2024 (_keys!3695 newMap!16))))))

(declare-fun res!34134 () Bool)

(assert (=> b!62099 (= res!34134 (= (select (arr!1793 (_keys!3695 newMap!16)) (index!3038 lt!25856)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(declare-fun e!40763 () Bool)

(assert (=> b!62099 (=> res!34134 e!40763)))

(declare-fun e!40760 () Bool)

(assert (=> b!62099 (= e!40760 e!40763)))

(declare-fun b!62100 () Bool)

(assert (=> b!62100 (= e!40761 (Intermediate!228 true (toIndex!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (mask!5963 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!62101 () Bool)

(assert (=> b!62101 (= e!40762 (Intermediate!228 false (toIndex!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (mask!5963 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!62102 () Bool)

(assert (=> b!62102 (and (bvsge (index!3038 lt!25856) #b00000000000000000000000000000000) (bvslt (index!3038 lt!25856) (size!2024 (_keys!3695 newMap!16))))))

(assert (=> b!62102 (= e!40763 (= (select (arr!1793 (_keys!3695 newMap!16)) (index!3038 lt!25856)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun d!12591 () Bool)

(assert (=> d!12591 e!40764))

(declare-fun c!8257 () Bool)

(assert (=> d!12591 (= c!8257 (and ((_ is Intermediate!228) lt!25856) (undefined!1040 lt!25856)))))

(assert (=> d!12591 (= lt!25856 e!40761)))

(declare-fun c!8259 () Bool)

(assert (=> d!12591 (= c!8259 (bvsge #b00000000000000000000000000000000 #b01111111111111111111111111111110))))

(assert (=> d!12591 (= lt!25855 (select (arr!1793 (_keys!3695 newMap!16)) (toIndex!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (mask!5963 newMap!16))))))

(assert (=> d!12591 (validMask!0 (mask!5963 newMap!16))))

(assert (=> d!12591 (= (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (mask!5963 newMap!16)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (_keys!3695 newMap!16) (mask!5963 newMap!16)) lt!25856)))

(declare-fun b!62103 () Bool)

(assert (=> b!62103 (and (bvsge (index!3038 lt!25856) #b00000000000000000000000000000000) (bvslt (index!3038 lt!25856) (size!2024 (_keys!3695 newMap!16))))))

(declare-fun res!34136 () Bool)

(assert (=> b!62103 (= res!34136 (= (select (arr!1793 (_keys!3695 newMap!16)) (index!3038 lt!25856)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62103 (=> res!34136 e!40763)))

(declare-fun b!62104 () Bool)

(assert (=> b!62104 (= e!40764 e!40760)))

(declare-fun res!34135 () Bool)

(assert (=> b!62104 (= res!34135 (and ((_ is Intermediate!228) lt!25856) (not (undefined!1040 lt!25856)) (bvslt (x!10162 lt!25856) #b01111111111111111111111111111110) (bvsge (x!10162 lt!25856) #b00000000000000000000000000000000) (bvsge (x!10162 lt!25856) #b00000000000000000000000000000000)))))

(assert (=> b!62104 (=> (not res!34135) (not e!40760))))

(assert (= (and d!12591 c!8259) b!62100))

(assert (= (and d!12591 (not c!8259)) b!62097))

(assert (= (and b!62097 c!8258) b!62101))

(assert (= (and b!62097 (not c!8258)) b!62098))

(assert (= (and d!12591 c!8257) b!62096))

(assert (= (and d!12591 (not c!8257)) b!62104))

(assert (= (and b!62104 res!34135) b!62099))

(assert (= (and b!62099 (not res!34134)) b!62103))

(assert (= (and b!62103 (not res!34136)) b!62102))

(assert (=> d!12591 m!53557))

(declare-fun m!55761 () Bool)

(assert (=> d!12591 m!55761))

(assert (=> d!12591 m!53559))

(declare-fun m!55763 () Bool)

(assert (=> b!62102 m!55763))

(assert (=> b!62098 m!53557))

(declare-fun m!55765 () Bool)

(assert (=> b!62098 m!55765))

(assert (=> b!62098 m!55765))

(assert (=> b!62098 m!53313))

(declare-fun m!55767 () Bool)

(assert (=> b!62098 m!55767))

(assert (=> b!62103 m!55763))

(assert (=> b!62099 m!55763))

(assert (=> d!11971 d!12591))

(declare-fun d!12593 () Bool)

(declare-fun lt!25862 () (_ BitVec 32))

(declare-fun lt!25861 () (_ BitVec 32))

(assert (=> d!12593 (= lt!25862 (bvmul (bvxor lt!25861 (bvlshr lt!25861 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))))

(assert (=> d!12593 (= lt!25861 ((_ extract 31 0) (bvand (bvxor (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (bvlshr (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))))

(assert (=> d!12593 (and (bvsge (mask!5963 newMap!16) #b00000000000000000000000000000000) (let ((res!34137 (let ((h!2016 ((_ extract 31 0) (bvand (bvxor (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (bvlshr (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))) (let ((x!10266 (bvmul (bvxor h!2016 (bvlshr h!2016 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))) (bvand (bvxor x!10266 (bvlshr x!10266 #b00000000000000000000000000001101)) (mask!5963 newMap!16)))))) (and (bvslt res!34137 (bvadd (mask!5963 newMap!16) #b00000000000000000000000000000001)) (bvsge res!34137 #b00000000000000000000000000000000))))))

(assert (=> d!12593 (= (toIndex!0 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (mask!5963 newMap!16)) (bvand (bvxor lt!25862 (bvlshr lt!25862 #b00000000000000000000000000001101)) (mask!5963 newMap!16)))))

(assert (=> d!11971 d!12593))

(assert (=> d!11971 d!12123))

(declare-fun d!12595 () Bool)

(declare-fun res!34138 () Bool)

(declare-fun e!40765 () Bool)

(assert (=> d!12595 (=> res!34138 e!40765)))

(assert (=> d!12595 (= res!34138 (= (select (arr!1793 (_keys!3695 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355)))))

(assert (=> d!12595 (= (arrayContainsKey!0 (_keys!3695 newMap!16) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) e!40765)))

(declare-fun b!62105 () Bool)

(declare-fun e!40766 () Bool)

(assert (=> b!62105 (= e!40765 e!40766)))

(declare-fun res!34139 () Bool)

(assert (=> b!62105 (=> (not res!34139) (not e!40766))))

(assert (=> b!62105 (= res!34139 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2024 (_keys!3695 newMap!16))))))

(declare-fun b!62106 () Bool)

(assert (=> b!62106 (= e!40766 (arrayContainsKey!0 (_keys!3695 newMap!16) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!12595 (not res!34138)) b!62105))

(assert (= (and b!62105 res!34139) b!62106))

(assert (=> d!12595 m!55499))

(assert (=> b!62106 m!53313))

(declare-fun m!55769 () Bool)

(assert (=> b!62106 m!55769))

(assert (=> b!61176 d!12595))

(declare-fun d!12597 () Bool)

(assert (=> d!12597 (contains!686 (+!82 lt!25048 (tuple2!2033 lt!25038 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)))) lt!25051)))

(declare-fun lt!25863 () Unit!1625)

(assert (=> d!12597 (= lt!25863 (choose!319 lt!25048 lt!25038 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)) lt!25051))))

(assert (=> d!12597 (contains!686 lt!25048 lt!25051)))

(assert (=> d!12597 (= (addStillContains!43 lt!25048 lt!25038 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)) lt!25051) lt!25863)))

(declare-fun bs!2708 () Bool)

(assert (= bs!2708 d!12597))

(assert (=> bs!2708 m!53607))

(assert (=> bs!2708 m!53607))

(assert (=> bs!2708 m!53609))

(declare-fun m!55771 () Bool)

(assert (=> bs!2708 m!55771))

(declare-fun m!55773 () Bool)

(assert (=> bs!2708 m!55773))

(assert (=> b!60948 d!12597))

(declare-fun d!12599 () Bool)

(declare-fun e!40767 () Bool)

(assert (=> d!12599 e!40767))

(declare-fun res!34140 () Bool)

(assert (=> d!12599 (=> (not res!34140) (not e!40767))))

(declare-fun lt!25865 () ListLongMap!1369)

(assert (=> d!12599 (= res!34140 (contains!686 lt!25865 (_1!1027 (tuple2!2033 lt!25039 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))))))))

(declare-fun lt!25866 () List!1436)

(assert (=> d!12599 (= lt!25865 (ListLongMap!1370 lt!25866))))

(declare-fun lt!25864 () Unit!1625)

(declare-fun lt!25867 () Unit!1625)

(assert (=> d!12599 (= lt!25864 lt!25867)))

(assert (=> d!12599 (= (getValueByKey!125 lt!25866 (_1!1027 (tuple2!2033 lt!25039 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))))) (Some!130 (_2!1027 (tuple2!2033 lt!25039 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))))))))

(assert (=> d!12599 (= lt!25867 (lemmaContainsTupThenGetReturnValue!42 lt!25866 (_1!1027 (tuple2!2033 lt!25039 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)))) (_2!1027 (tuple2!2033 lt!25039 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))))))))

(assert (=> d!12599 (= lt!25866 (insertStrictlySorted!45 (toList!700 lt!25052) (_1!1027 (tuple2!2033 lt!25039 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)))) (_2!1027 (tuple2!2033 lt!25039 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))))))))

(assert (=> d!12599 (= (+!82 lt!25052 (tuple2!2033 lt!25039 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)))) lt!25865)))

(declare-fun b!62107 () Bool)

(declare-fun res!34141 () Bool)

(assert (=> b!62107 (=> (not res!34141) (not e!40767))))

(assert (=> b!62107 (= res!34141 (= (getValueByKey!125 (toList!700 lt!25865) (_1!1027 (tuple2!2033 lt!25039 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))))) (Some!130 (_2!1027 (tuple2!2033 lt!25039 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)))))))))

(declare-fun b!62108 () Bool)

(assert (=> b!62108 (= e!40767 (contains!688 (toList!700 lt!25865) (tuple2!2033 lt!25039 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)))))))

(assert (= (and d!12599 res!34140) b!62107))

(assert (= (and b!62107 res!34141) b!62108))

(declare-fun m!55775 () Bool)

(assert (=> d!12599 m!55775))

(declare-fun m!55777 () Bool)

(assert (=> d!12599 m!55777))

(declare-fun m!55779 () Bool)

(assert (=> d!12599 m!55779))

(declare-fun m!55781 () Bool)

(assert (=> d!12599 m!55781))

(declare-fun m!55783 () Bool)

(assert (=> b!62107 m!55783))

(declare-fun m!55785 () Bool)

(assert (=> b!62108 m!55785))

(assert (=> b!60948 d!12599))

(declare-fun d!12601 () Bool)

(assert (=> d!12601 (= (apply!67 (+!82 lt!25045 (tuple2!2033 lt!25043 (minValue!1981 newMap!16))) lt!25057) (get!1078 (getValueByKey!125 (toList!700 (+!82 lt!25045 (tuple2!2033 lt!25043 (minValue!1981 newMap!16)))) lt!25057)))))

(declare-fun bs!2709 () Bool)

(assert (= bs!2709 d!12601))

(declare-fun m!55787 () Bool)

(assert (=> bs!2709 m!55787))

(assert (=> bs!2709 m!55787))

(declare-fun m!55789 () Bool)

(assert (=> bs!2709 m!55789))

(assert (=> b!60948 d!12601))

(assert (=> b!60948 d!12173))

(declare-fun d!12603 () Bool)

(declare-fun e!40768 () Bool)

(assert (=> d!12603 e!40768))

(declare-fun res!34142 () Bool)

(assert (=> d!12603 (=> (not res!34142) (not e!40768))))

(declare-fun lt!25869 () ListLongMap!1369)

(assert (=> d!12603 (= res!34142 (contains!686 lt!25869 (_1!1027 (tuple2!2033 lt!25050 (minValue!1981 newMap!16)))))))

(declare-fun lt!25870 () List!1436)

(assert (=> d!12603 (= lt!25869 (ListLongMap!1370 lt!25870))))

(declare-fun lt!25868 () Unit!1625)

(declare-fun lt!25871 () Unit!1625)

(assert (=> d!12603 (= lt!25868 lt!25871)))

(assert (=> d!12603 (= (getValueByKey!125 lt!25870 (_1!1027 (tuple2!2033 lt!25050 (minValue!1981 newMap!16)))) (Some!130 (_2!1027 (tuple2!2033 lt!25050 (minValue!1981 newMap!16)))))))

(assert (=> d!12603 (= lt!25871 (lemmaContainsTupThenGetReturnValue!42 lt!25870 (_1!1027 (tuple2!2033 lt!25050 (minValue!1981 newMap!16))) (_2!1027 (tuple2!2033 lt!25050 (minValue!1981 newMap!16)))))))

(assert (=> d!12603 (= lt!25870 (insertStrictlySorted!45 (toList!700 lt!25040) (_1!1027 (tuple2!2033 lt!25050 (minValue!1981 newMap!16))) (_2!1027 (tuple2!2033 lt!25050 (minValue!1981 newMap!16)))))))

(assert (=> d!12603 (= (+!82 lt!25040 (tuple2!2033 lt!25050 (minValue!1981 newMap!16))) lt!25869)))

(declare-fun b!62109 () Bool)

(declare-fun res!34143 () Bool)

(assert (=> b!62109 (=> (not res!34143) (not e!40768))))

(assert (=> b!62109 (= res!34143 (= (getValueByKey!125 (toList!700 lt!25869) (_1!1027 (tuple2!2033 lt!25050 (minValue!1981 newMap!16)))) (Some!130 (_2!1027 (tuple2!2033 lt!25050 (minValue!1981 newMap!16))))))))

(declare-fun b!62110 () Bool)

(assert (=> b!62110 (= e!40768 (contains!688 (toList!700 lt!25869) (tuple2!2033 lt!25050 (minValue!1981 newMap!16))))))

(assert (= (and d!12603 res!34142) b!62109))

(assert (= (and b!62109 res!34143) b!62110))

(declare-fun m!55791 () Bool)

(assert (=> d!12603 m!55791))

(declare-fun m!55793 () Bool)

(assert (=> d!12603 m!55793))

(declare-fun m!55795 () Bool)

(assert (=> d!12603 m!55795))

(declare-fun m!55797 () Bool)

(assert (=> d!12603 m!55797))

(declare-fun m!55799 () Bool)

(assert (=> b!62109 m!55799))

(declare-fun m!55801 () Bool)

(assert (=> b!62110 m!55801))

(assert (=> b!60948 d!12603))

(declare-fun d!12605 () Bool)

(declare-fun e!40769 () Bool)

(assert (=> d!12605 e!40769))

(declare-fun res!34144 () Bool)

(assert (=> d!12605 (=> (not res!34144) (not e!40769))))

(declare-fun lt!25873 () ListLongMap!1369)

(assert (=> d!12605 (= res!34144 (contains!686 lt!25873 (_1!1027 (tuple2!2033 lt!25043 (minValue!1981 newMap!16)))))))

(declare-fun lt!25874 () List!1436)

(assert (=> d!12605 (= lt!25873 (ListLongMap!1370 lt!25874))))

(declare-fun lt!25872 () Unit!1625)

(declare-fun lt!25875 () Unit!1625)

(assert (=> d!12605 (= lt!25872 lt!25875)))

(assert (=> d!12605 (= (getValueByKey!125 lt!25874 (_1!1027 (tuple2!2033 lt!25043 (minValue!1981 newMap!16)))) (Some!130 (_2!1027 (tuple2!2033 lt!25043 (minValue!1981 newMap!16)))))))

(assert (=> d!12605 (= lt!25875 (lemmaContainsTupThenGetReturnValue!42 lt!25874 (_1!1027 (tuple2!2033 lt!25043 (minValue!1981 newMap!16))) (_2!1027 (tuple2!2033 lt!25043 (minValue!1981 newMap!16)))))))

(assert (=> d!12605 (= lt!25874 (insertStrictlySorted!45 (toList!700 lt!25045) (_1!1027 (tuple2!2033 lt!25043 (minValue!1981 newMap!16))) (_2!1027 (tuple2!2033 lt!25043 (minValue!1981 newMap!16)))))))

(assert (=> d!12605 (= (+!82 lt!25045 (tuple2!2033 lt!25043 (minValue!1981 newMap!16))) lt!25873)))

(declare-fun b!62111 () Bool)

(declare-fun res!34145 () Bool)

(assert (=> b!62111 (=> (not res!34145) (not e!40769))))

(assert (=> b!62111 (= res!34145 (= (getValueByKey!125 (toList!700 lt!25873) (_1!1027 (tuple2!2033 lt!25043 (minValue!1981 newMap!16)))) (Some!130 (_2!1027 (tuple2!2033 lt!25043 (minValue!1981 newMap!16))))))))

(declare-fun b!62112 () Bool)

(assert (=> b!62112 (= e!40769 (contains!688 (toList!700 lt!25873) (tuple2!2033 lt!25043 (minValue!1981 newMap!16))))))

(assert (= (and d!12605 res!34144) b!62111))

(assert (= (and b!62111 res!34145) b!62112))

(declare-fun m!55803 () Bool)

(assert (=> d!12605 m!55803))

(declare-fun m!55805 () Bool)

(assert (=> d!12605 m!55805))

(declare-fun m!55807 () Bool)

(assert (=> d!12605 m!55807))

(declare-fun m!55809 () Bool)

(assert (=> d!12605 m!55809))

(declare-fun m!55811 () Bool)

(assert (=> b!62111 m!55811))

(declare-fun m!55813 () Bool)

(assert (=> b!62112 m!55813))

(assert (=> b!60948 d!12605))

(declare-fun d!12607 () Bool)

(declare-fun e!40770 () Bool)

(assert (=> d!12607 e!40770))

(declare-fun res!34146 () Bool)

(assert (=> d!12607 (=> res!34146 e!40770)))

(declare-fun lt!25879 () Bool)

(assert (=> d!12607 (= res!34146 (not lt!25879))))

(declare-fun lt!25878 () Bool)

(assert (=> d!12607 (= lt!25879 lt!25878)))

(declare-fun lt!25877 () Unit!1625)

(declare-fun e!40771 () Unit!1625)

(assert (=> d!12607 (= lt!25877 e!40771)))

(declare-fun c!8260 () Bool)

(assert (=> d!12607 (= c!8260 lt!25878)))

(assert (=> d!12607 (= lt!25878 (containsKey!129 (toList!700 (+!82 lt!25048 (tuple2!2033 lt!25038 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))))) lt!25051))))

(assert (=> d!12607 (= (contains!686 (+!82 lt!25048 (tuple2!2033 lt!25038 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)))) lt!25051) lt!25879)))

(declare-fun b!62113 () Bool)

(declare-fun lt!25876 () Unit!1625)

(assert (=> b!62113 (= e!40771 lt!25876)))

(assert (=> b!62113 (= lt!25876 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 (+!82 lt!25048 (tuple2!2033 lt!25038 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))))) lt!25051))))

(assert (=> b!62113 (isDefined!78 (getValueByKey!125 (toList!700 (+!82 lt!25048 (tuple2!2033 lt!25038 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))))) lt!25051))))

(declare-fun b!62114 () Bool)

(declare-fun Unit!1686 () Unit!1625)

(assert (=> b!62114 (= e!40771 Unit!1686)))

(declare-fun b!62115 () Bool)

(assert (=> b!62115 (= e!40770 (isDefined!78 (getValueByKey!125 (toList!700 (+!82 lt!25048 (tuple2!2033 lt!25038 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))))) lt!25051)))))

(assert (= (and d!12607 c!8260) b!62113))

(assert (= (and d!12607 (not c!8260)) b!62114))

(assert (= (and d!12607 (not res!34146)) b!62115))

(declare-fun m!55815 () Bool)

(assert (=> d!12607 m!55815))

(declare-fun m!55817 () Bool)

(assert (=> b!62113 m!55817))

(declare-fun m!55819 () Bool)

(assert (=> b!62113 m!55819))

(assert (=> b!62113 m!55819))

(declare-fun m!55821 () Bool)

(assert (=> b!62113 m!55821))

(assert (=> b!62115 m!55819))

(assert (=> b!62115 m!55819))

(assert (=> b!62115 m!55821))

(assert (=> b!60948 d!12607))

(declare-fun d!12609 () Bool)

(declare-fun e!40772 () Bool)

(assert (=> d!12609 e!40772))

(declare-fun res!34147 () Bool)

(assert (=> d!12609 (=> (not res!34147) (not e!40772))))

(declare-fun lt!25881 () ListLongMap!1369)

(assert (=> d!12609 (= res!34147 (contains!686 lt!25881 (_1!1027 (tuple2!2033 lt!25038 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))))))))

(declare-fun lt!25882 () List!1436)

(assert (=> d!12609 (= lt!25881 (ListLongMap!1370 lt!25882))))

(declare-fun lt!25880 () Unit!1625)

(declare-fun lt!25883 () Unit!1625)

(assert (=> d!12609 (= lt!25880 lt!25883)))

(assert (=> d!12609 (= (getValueByKey!125 lt!25882 (_1!1027 (tuple2!2033 lt!25038 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))))) (Some!130 (_2!1027 (tuple2!2033 lt!25038 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))))))))

(assert (=> d!12609 (= lt!25883 (lemmaContainsTupThenGetReturnValue!42 lt!25882 (_1!1027 (tuple2!2033 lt!25038 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)))) (_2!1027 (tuple2!2033 lt!25038 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))))))))

(assert (=> d!12609 (= lt!25882 (insertStrictlySorted!45 (toList!700 lt!25048) (_1!1027 (tuple2!2033 lt!25038 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)))) (_2!1027 (tuple2!2033 lt!25038 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))))))))

(assert (=> d!12609 (= (+!82 lt!25048 (tuple2!2033 lt!25038 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)))) lt!25881)))

(declare-fun b!62116 () Bool)

(declare-fun res!34148 () Bool)

(assert (=> b!62116 (=> (not res!34148) (not e!40772))))

(assert (=> b!62116 (= res!34148 (= (getValueByKey!125 (toList!700 lt!25881) (_1!1027 (tuple2!2033 lt!25038 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))))) (Some!130 (_2!1027 (tuple2!2033 lt!25038 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)))))))))

(declare-fun b!62117 () Bool)

(assert (=> b!62117 (= e!40772 (contains!688 (toList!700 lt!25881) (tuple2!2033 lt!25038 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)))))))

(assert (= (and d!12609 res!34147) b!62116))

(assert (= (and b!62116 res!34148) b!62117))

(declare-fun m!55823 () Bool)

(assert (=> d!12609 m!55823))

(declare-fun m!55825 () Bool)

(assert (=> d!12609 m!55825))

(declare-fun m!55827 () Bool)

(assert (=> d!12609 m!55827))

(declare-fun m!55829 () Bool)

(assert (=> d!12609 m!55829))

(declare-fun m!55831 () Bool)

(assert (=> b!62116 m!55831))

(declare-fun m!55833 () Bool)

(assert (=> b!62117 m!55833))

(assert (=> b!60948 d!12609))

(declare-fun d!12611 () Bool)

(assert (=> d!12611 (= (apply!67 (+!82 lt!25040 (tuple2!2033 lt!25050 (minValue!1981 newMap!16))) lt!25049) (apply!67 lt!25040 lt!25049))))

(declare-fun lt!25884 () Unit!1625)

(assert (=> d!12611 (= lt!25884 (choose!318 lt!25040 lt!25050 (minValue!1981 newMap!16) lt!25049))))

(declare-fun e!40773 () Bool)

(assert (=> d!12611 e!40773))

(declare-fun res!34149 () Bool)

(assert (=> d!12611 (=> (not res!34149) (not e!40773))))

(assert (=> d!12611 (= res!34149 (contains!686 lt!25040 lt!25049))))

(assert (=> d!12611 (= (addApplyDifferent!43 lt!25040 lt!25050 (minValue!1981 newMap!16) lt!25049) lt!25884)))

(declare-fun b!62118 () Bool)

(assert (=> b!62118 (= e!40773 (not (= lt!25049 lt!25050)))))

(assert (= (and d!12611 res!34149) b!62118))

(assert (=> d!12611 m!53631))

(assert (=> d!12611 m!53621))

(declare-fun m!55835 () Bool)

(assert (=> d!12611 m!55835))

(assert (=> d!12611 m!53621))

(assert (=> d!12611 m!53629))

(declare-fun m!55837 () Bool)

(assert (=> d!12611 m!55837))

(assert (=> b!60948 d!12611))

(declare-fun d!12613 () Bool)

(assert (=> d!12613 (= (apply!67 lt!25045 lt!25057) (get!1078 (getValueByKey!125 (toList!700 lt!25045) lt!25057)))))

(declare-fun bs!2710 () Bool)

(assert (= bs!2710 d!12613))

(declare-fun m!55839 () Bool)

(assert (=> bs!2710 m!55839))

(assert (=> bs!2710 m!55839))

(declare-fun m!55841 () Bool)

(assert (=> bs!2710 m!55841))

(assert (=> b!60948 d!12613))

(declare-fun d!12615 () Bool)

(assert (=> d!12615 (= (apply!67 (+!82 lt!25045 (tuple2!2033 lt!25043 (minValue!1981 newMap!16))) lt!25057) (apply!67 lt!25045 lt!25057))))

(declare-fun lt!25885 () Unit!1625)

(assert (=> d!12615 (= lt!25885 (choose!318 lt!25045 lt!25043 (minValue!1981 newMap!16) lt!25057))))

(declare-fun e!40774 () Bool)

(assert (=> d!12615 e!40774))

(declare-fun res!34150 () Bool)

(assert (=> d!12615 (=> (not res!34150) (not e!40774))))

(assert (=> d!12615 (= res!34150 (contains!686 lt!25045 lt!25057))))

(assert (=> d!12615 (= (addApplyDifferent!43 lt!25045 lt!25043 (minValue!1981 newMap!16) lt!25057) lt!25885)))

(declare-fun b!62119 () Bool)

(assert (=> b!62119 (= e!40774 (not (= lt!25057 lt!25043)))))

(assert (= (and d!12615 res!34150) b!62119))

(assert (=> d!12615 m!53633))

(assert (=> d!12615 m!53625))

(declare-fun m!55843 () Bool)

(assert (=> d!12615 m!55843))

(assert (=> d!12615 m!53625))

(assert (=> d!12615 m!53637))

(declare-fun m!55845 () Bool)

(assert (=> d!12615 m!55845))

(assert (=> b!60948 d!12615))

(declare-fun d!12617 () Bool)

(assert (=> d!12617 (= (apply!67 lt!25040 lt!25049) (get!1078 (getValueByKey!125 (toList!700 lt!25040) lt!25049)))))

(declare-fun bs!2711 () Bool)

(assert (= bs!2711 d!12617))

(declare-fun m!55847 () Bool)

(assert (=> bs!2711 m!55847))

(assert (=> bs!2711 m!55847))

(declare-fun m!55849 () Bool)

(assert (=> bs!2711 m!55849))

(assert (=> b!60948 d!12617))

(declare-fun d!12619 () Bool)

(assert (=> d!12619 (= (apply!67 (+!82 lt!25052 (tuple2!2033 lt!25039 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)))) lt!25047) (get!1078 (getValueByKey!125 (toList!700 (+!82 lt!25052 (tuple2!2033 lt!25039 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16))))) lt!25047)))))

(declare-fun bs!2712 () Bool)

(assert (= bs!2712 d!12619))

(declare-fun m!55851 () Bool)

(assert (=> bs!2712 m!55851))

(assert (=> bs!2712 m!55851))

(declare-fun m!55853 () Bool)

(assert (=> bs!2712 m!55853))

(assert (=> b!60948 d!12619))

(declare-fun d!12621 () Bool)

(assert (=> d!12621 (= (apply!67 (+!82 lt!25052 (tuple2!2033 lt!25039 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)))) lt!25047) (apply!67 lt!25052 lt!25047))))

(declare-fun lt!25886 () Unit!1625)

(assert (=> d!12621 (= lt!25886 (choose!318 lt!25052 lt!25039 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)) lt!25047))))

(declare-fun e!40775 () Bool)

(assert (=> d!12621 e!40775))

(declare-fun res!34151 () Bool)

(assert (=> d!12621 (=> (not res!34151) (not e!40775))))

(assert (=> d!12621 (= res!34151 (contains!686 lt!25052 lt!25047))))

(assert (=> d!12621 (= (addApplyDifferent!43 lt!25052 lt!25039 (ite (and c!7909 c!7899) (get!1075 (select (arr!1794 (_values!2050 (v!2404 (underlying!231 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1981 newMap!16)) lt!25047) lt!25886)))

(declare-fun b!62120 () Bool)

(assert (=> b!62120 (= e!40775 (not (= lt!25047 lt!25039)))))

(assert (= (and d!12621 res!34151) b!62120))

(assert (=> d!12621 m!53619))

(assert (=> d!12621 m!53611))

(declare-fun m!55855 () Bool)

(assert (=> d!12621 m!55855))

(assert (=> d!12621 m!53611))

(assert (=> d!12621 m!53613))

(declare-fun m!55857 () Bool)

(assert (=> d!12621 m!55857))

(assert (=> b!60948 d!12621))

(declare-fun d!12623 () Bool)

(assert (=> d!12623 (= (apply!67 lt!25052 lt!25047) (get!1078 (getValueByKey!125 (toList!700 lt!25052) lt!25047)))))

(declare-fun bs!2713 () Bool)

(assert (= bs!2713 d!12623))

(declare-fun m!55859 () Bool)

(assert (=> bs!2713 m!55859))

(assert (=> bs!2713 m!55859))

(declare-fun m!55861 () Bool)

(assert (=> bs!2713 m!55861))

(assert (=> b!60948 d!12623))

(declare-fun d!12625 () Bool)

(assert (=> d!12625 (= (apply!67 (+!82 lt!25040 (tuple2!2033 lt!25050 (minValue!1981 newMap!16))) lt!25049) (get!1078 (getValueByKey!125 (toList!700 (+!82 lt!25040 (tuple2!2033 lt!25050 (minValue!1981 newMap!16)))) lt!25049)))))

(declare-fun bs!2714 () Bool)

(assert (= bs!2714 d!12625))

(declare-fun m!55863 () Bool)

(assert (=> bs!2714 m!55863))

(assert (=> bs!2714 m!55863))

(declare-fun m!55865 () Bool)

(assert (=> bs!2714 m!55865))

(assert (=> b!60948 d!12625))

(assert (=> bm!4689 d!12349))

(declare-fun d!12627 () Bool)

(declare-fun e!40776 () Bool)

(assert (=> d!12627 e!40776))

(declare-fun res!34152 () Bool)

(assert (=> d!12627 (=> res!34152 e!40776)))

(declare-fun lt!25890 () Bool)

(assert (=> d!12627 (= res!34152 (not lt!25890))))

(declare-fun lt!25889 () Bool)

(assert (=> d!12627 (= lt!25890 lt!25889)))

(declare-fun lt!25888 () Unit!1625)

(declare-fun e!40777 () Unit!1625)

(assert (=> d!12627 (= lt!25888 e!40777)))

(declare-fun c!8261 () Bool)

(assert (=> d!12627 (= c!8261 lt!25889)))

(assert (=> d!12627 (= lt!25889 (containsKey!129 (toList!700 lt!25126) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!12627 (= (contains!686 lt!25126 (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!25890)))

(declare-fun b!62121 () Bool)

(declare-fun lt!25887 () Unit!1625)

(assert (=> b!62121 (= e!40777 lt!25887)))

(assert (=> b!62121 (= lt!25887 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 lt!25126) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!62121 (isDefined!78 (getValueByKey!125 (toList!700 lt!25126) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!62122 () Bool)

(declare-fun Unit!1687 () Unit!1625)

(assert (=> b!62122 (= e!40777 Unit!1687)))

(declare-fun b!62123 () Bool)

(assert (=> b!62123 (= e!40776 (isDefined!78 (getValueByKey!125 (toList!700 lt!25126) (select (arr!1793 (_keys!3695 (v!2404 (underlying!231 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!12627 c!8261) b!62121))

(assert (= (and d!12627 (not c!8261)) b!62122))

(assert (= (and d!12627 (not res!34152)) b!62123))

(assert (=> d!12627 m!53407))

(declare-fun m!55867 () Bool)

(assert (=> d!12627 m!55867))

(assert (=> b!62121 m!53407))

(declare-fun m!55869 () Bool)

(assert (=> b!62121 m!55869))

(assert (=> b!62121 m!53407))

(assert (=> b!62121 m!55309))

(assert (=> b!62121 m!55309))

(declare-fun m!55871 () Bool)

(assert (=> b!62121 m!55871))

(assert (=> b!62123 m!53407))

(assert (=> b!62123 m!55309))

(assert (=> b!62123 m!55309))

(assert (=> b!62123 m!55871))

(assert (=> b!61075 d!12627))

(declare-fun d!12629 () Bool)

(assert (=> d!12629 (= (apply!67 lt!25072 lt!25081) (get!1078 (getValueByKey!125 (toList!700 lt!25072) lt!25081)))))

(declare-fun bs!2715 () Bool)

(assert (= bs!2715 d!12629))

(declare-fun m!55873 () Bool)

(assert (=> bs!2715 m!55873))

(assert (=> bs!2715 m!55873))

(declare-fun m!55875 () Bool)

(assert (=> bs!2715 m!55875))

(assert (=> b!61002 d!12629))

(declare-fun d!12631 () Bool)

(assert (=> d!12631 (= (apply!67 (+!82 lt!25084 (tuple2!2033 lt!25071 (zeroValue!1981 newMap!16))) lt!25079) (apply!67 lt!25084 lt!25079))))

(declare-fun lt!25891 () Unit!1625)

(assert (=> d!12631 (= lt!25891 (choose!318 lt!25084 lt!25071 (zeroValue!1981 newMap!16) lt!25079))))

(declare-fun e!40778 () Bool)

(assert (=> d!12631 e!40778))

(declare-fun res!34153 () Bool)

(assert (=> d!12631 (=> (not res!34153) (not e!40778))))

(assert (=> d!12631 (= res!34153 (contains!686 lt!25084 lt!25079))))

(assert (=> d!12631 (= (addApplyDifferent!43 lt!25084 lt!25071 (zeroValue!1981 newMap!16) lt!25079) lt!25891)))

(declare-fun b!62124 () Bool)

(assert (=> b!62124 (= e!40778 (not (= lt!25079 lt!25071)))))

(assert (= (and d!12631 res!34153) b!62124))

(assert (=> d!12631 m!53693))

(assert (=> d!12631 m!53687))

(declare-fun m!55877 () Bool)

(assert (=> d!12631 m!55877))

(assert (=> d!12631 m!53687))

(assert (=> d!12631 m!53689))

(declare-fun m!55879 () Bool)

(assert (=> d!12631 m!55879))

(assert (=> b!61002 d!12631))

(declare-fun d!12633 () Bool)

(declare-fun e!40779 () Bool)

(assert (=> d!12633 e!40779))

(declare-fun res!34154 () Bool)

(assert (=> d!12633 (=> (not res!34154) (not e!40779))))

(declare-fun lt!25893 () ListLongMap!1369)

(assert (=> d!12633 (= res!34154 (contains!686 lt!25893 (_1!1027 (tuple2!2033 lt!25070 (zeroValue!1981 newMap!16)))))))

(declare-fun lt!25894 () List!1436)

(assert (=> d!12633 (= lt!25893 (ListLongMap!1370 lt!25894))))

(declare-fun lt!25892 () Unit!1625)

(declare-fun lt!25895 () Unit!1625)

(assert (=> d!12633 (= lt!25892 lt!25895)))

(assert (=> d!12633 (= (getValueByKey!125 lt!25894 (_1!1027 (tuple2!2033 lt!25070 (zeroValue!1981 newMap!16)))) (Some!130 (_2!1027 (tuple2!2033 lt!25070 (zeroValue!1981 newMap!16)))))))

(assert (=> d!12633 (= lt!25895 (lemmaContainsTupThenGetReturnValue!42 lt!25894 (_1!1027 (tuple2!2033 lt!25070 (zeroValue!1981 newMap!16))) (_2!1027 (tuple2!2033 lt!25070 (zeroValue!1981 newMap!16)))))))

(assert (=> d!12633 (= lt!25894 (insertStrictlySorted!45 (toList!700 lt!25080) (_1!1027 (tuple2!2033 lt!25070 (zeroValue!1981 newMap!16))) (_2!1027 (tuple2!2033 lt!25070 (zeroValue!1981 newMap!16)))))))

(assert (=> d!12633 (= (+!82 lt!25080 (tuple2!2033 lt!25070 (zeroValue!1981 newMap!16))) lt!25893)))

(declare-fun b!62125 () Bool)

(declare-fun res!34155 () Bool)

(assert (=> b!62125 (=> (not res!34155) (not e!40779))))

(assert (=> b!62125 (= res!34155 (= (getValueByKey!125 (toList!700 lt!25893) (_1!1027 (tuple2!2033 lt!25070 (zeroValue!1981 newMap!16)))) (Some!130 (_2!1027 (tuple2!2033 lt!25070 (zeroValue!1981 newMap!16))))))))

(declare-fun b!62126 () Bool)

(assert (=> b!62126 (= e!40779 (contains!688 (toList!700 lt!25893) (tuple2!2033 lt!25070 (zeroValue!1981 newMap!16))))))

(assert (= (and d!12633 res!34154) b!62125))

(assert (= (and b!62125 res!34155) b!62126))

(declare-fun m!55881 () Bool)

(assert (=> d!12633 m!55881))

(declare-fun m!55883 () Bool)

(assert (=> d!12633 m!55883))

(declare-fun m!55885 () Bool)

(assert (=> d!12633 m!55885))

(declare-fun m!55887 () Bool)

(assert (=> d!12633 m!55887))

(declare-fun m!55889 () Bool)

(assert (=> b!62125 m!55889))

(declare-fun m!55891 () Bool)

(assert (=> b!62126 m!55891))

(assert (=> b!61002 d!12633))

(declare-fun d!12635 () Bool)

(declare-fun e!40780 () Bool)

(assert (=> d!12635 e!40780))

(declare-fun res!34156 () Bool)

(assert (=> d!12635 (=> (not res!34156) (not e!40780))))

(declare-fun lt!25897 () ListLongMap!1369)

(assert (=> d!12635 (= res!34156 (contains!686 lt!25897 (_1!1027 (tuple2!2033 lt!25075 (minValue!1981 newMap!16)))))))

(declare-fun lt!25898 () List!1436)

(assert (=> d!12635 (= lt!25897 (ListLongMap!1370 lt!25898))))

(declare-fun lt!25896 () Unit!1625)

(declare-fun lt!25899 () Unit!1625)

(assert (=> d!12635 (= lt!25896 lt!25899)))

(assert (=> d!12635 (= (getValueByKey!125 lt!25898 (_1!1027 (tuple2!2033 lt!25075 (minValue!1981 newMap!16)))) (Some!130 (_2!1027 (tuple2!2033 lt!25075 (minValue!1981 newMap!16)))))))

(assert (=> d!12635 (= lt!25899 (lemmaContainsTupThenGetReturnValue!42 lt!25898 (_1!1027 (tuple2!2033 lt!25075 (minValue!1981 newMap!16))) (_2!1027 (tuple2!2033 lt!25075 (minValue!1981 newMap!16)))))))

(assert (=> d!12635 (= lt!25898 (insertStrictlySorted!45 (toList!700 lt!25077) (_1!1027 (tuple2!2033 lt!25075 (minValue!1981 newMap!16))) (_2!1027 (tuple2!2033 lt!25075 (minValue!1981 newMap!16)))))))

(assert (=> d!12635 (= (+!82 lt!25077 (tuple2!2033 lt!25075 (minValue!1981 newMap!16))) lt!25897)))

(declare-fun b!62127 () Bool)

(declare-fun res!34157 () Bool)

(assert (=> b!62127 (=> (not res!34157) (not e!40780))))

(assert (=> b!62127 (= res!34157 (= (getValueByKey!125 (toList!700 lt!25897) (_1!1027 (tuple2!2033 lt!25075 (minValue!1981 newMap!16)))) (Some!130 (_2!1027 (tuple2!2033 lt!25075 (minValue!1981 newMap!16))))))))

(declare-fun b!62128 () Bool)

(assert (=> b!62128 (= e!40780 (contains!688 (toList!700 lt!25897) (tuple2!2033 lt!25075 (minValue!1981 newMap!16))))))

(assert (= (and d!12635 res!34156) b!62127))

(assert (= (and b!62127 res!34157) b!62128))

(declare-fun m!55893 () Bool)

(assert (=> d!12635 m!55893))

(declare-fun m!55895 () Bool)

(assert (=> d!12635 m!55895))

(declare-fun m!55897 () Bool)

(assert (=> d!12635 m!55897))

(declare-fun m!55899 () Bool)

(assert (=> d!12635 m!55899))

(declare-fun m!55901 () Bool)

(assert (=> b!62127 m!55901))

(declare-fun m!55903 () Bool)

(assert (=> b!62128 m!55903))

(assert (=> b!61002 d!12635))

(declare-fun d!12637 () Bool)

(assert (=> d!12637 (= (apply!67 (+!82 lt!25072 (tuple2!2033 lt!25082 (minValue!1981 newMap!16))) lt!25081) (apply!67 lt!25072 lt!25081))))

(declare-fun lt!25900 () Unit!1625)

(assert (=> d!12637 (= lt!25900 (choose!318 lt!25072 lt!25082 (minValue!1981 newMap!16) lt!25081))))

(declare-fun e!40781 () Bool)

(assert (=> d!12637 e!40781))

(declare-fun res!34158 () Bool)

(assert (=> d!12637 (=> (not res!34158) (not e!40781))))

(assert (=> d!12637 (= res!34158 (contains!686 lt!25072 lt!25081))))

(assert (=> d!12637 (= (addApplyDifferent!43 lt!25072 lt!25082 (minValue!1981 newMap!16) lt!25081) lt!25900)))

(declare-fun b!62129 () Bool)

(assert (=> b!62129 (= e!40781 (not (= lt!25081 lt!25082)))))

(assert (= (and d!12637 res!34158) b!62129))

(assert (=> d!12637 m!53705))

(assert (=> d!12637 m!53695))

(declare-fun m!55905 () Bool)

(assert (=> d!12637 m!55905))

(assert (=> d!12637 m!53695))

(assert (=> d!12637 m!53703))

(declare-fun m!55907 () Bool)

(assert (=> d!12637 m!55907))

(assert (=> b!61002 d!12637))

(declare-fun d!12639 () Bool)

(assert (=> d!12639 (= (apply!67 lt!25084 lt!25079) (get!1078 (getValueByKey!125 (toList!700 lt!25084) lt!25079)))))

(declare-fun bs!2716 () Bool)

(assert (= bs!2716 d!12639))

(declare-fun m!55909 () Bool)

(assert (=> bs!2716 m!55909))

(assert (=> bs!2716 m!55909))

(declare-fun m!55911 () Bool)

(assert (=> bs!2716 m!55911))

(assert (=> b!61002 d!12639))

(declare-fun d!12641 () Bool)

(assert (=> d!12641 (= (apply!67 (+!82 lt!25077 (tuple2!2033 lt!25075 (minValue!1981 newMap!16))) lt!25089) (get!1078 (getValueByKey!125 (toList!700 (+!82 lt!25077 (tuple2!2033 lt!25075 (minValue!1981 newMap!16)))) lt!25089)))))

(declare-fun bs!2717 () Bool)

(assert (= bs!2717 d!12641))

(declare-fun m!55913 () Bool)

(assert (=> bs!2717 m!55913))

(assert (=> bs!2717 m!55913))

(declare-fun m!55915 () Bool)

(assert (=> bs!2717 m!55915))

(assert (=> b!61002 d!12641))

(declare-fun d!12643 () Bool)

(declare-fun e!40782 () Bool)

(assert (=> d!12643 e!40782))

(declare-fun res!34159 () Bool)

(assert (=> d!12643 (=> (not res!34159) (not e!40782))))

(declare-fun lt!25902 () ListLongMap!1369)

(assert (=> d!12643 (= res!34159 (contains!686 lt!25902 (_1!1027 (tuple2!2033 lt!25082 (minValue!1981 newMap!16)))))))

(declare-fun lt!25903 () List!1436)

(assert (=> d!12643 (= lt!25902 (ListLongMap!1370 lt!25903))))

(declare-fun lt!25901 () Unit!1625)

(declare-fun lt!25904 () Unit!1625)

(assert (=> d!12643 (= lt!25901 lt!25904)))

(assert (=> d!12643 (= (getValueByKey!125 lt!25903 (_1!1027 (tuple2!2033 lt!25082 (minValue!1981 newMap!16)))) (Some!130 (_2!1027 (tuple2!2033 lt!25082 (minValue!1981 newMap!16)))))))

(assert (=> d!12643 (= lt!25904 (lemmaContainsTupThenGetReturnValue!42 lt!25903 (_1!1027 (tuple2!2033 lt!25082 (minValue!1981 newMap!16))) (_2!1027 (tuple2!2033 lt!25082 (minValue!1981 newMap!16)))))))

(assert (=> d!12643 (= lt!25903 (insertStrictlySorted!45 (toList!700 lt!25072) (_1!1027 (tuple2!2033 lt!25082 (minValue!1981 newMap!16))) (_2!1027 (tuple2!2033 lt!25082 (minValue!1981 newMap!16)))))))

(assert (=> d!12643 (= (+!82 lt!25072 (tuple2!2033 lt!25082 (minValue!1981 newMap!16))) lt!25902)))

(declare-fun b!62130 () Bool)

(declare-fun res!34160 () Bool)

(assert (=> b!62130 (=> (not res!34160) (not e!40782))))

(assert (=> b!62130 (= res!34160 (= (getValueByKey!125 (toList!700 lt!25902) (_1!1027 (tuple2!2033 lt!25082 (minValue!1981 newMap!16)))) (Some!130 (_2!1027 (tuple2!2033 lt!25082 (minValue!1981 newMap!16))))))))

(declare-fun b!62131 () Bool)

(assert (=> b!62131 (= e!40782 (contains!688 (toList!700 lt!25902) (tuple2!2033 lt!25082 (minValue!1981 newMap!16))))))

(assert (= (and d!12643 res!34159) b!62130))

(assert (= (and b!62130 res!34160) b!62131))

(declare-fun m!55917 () Bool)

(assert (=> d!12643 m!55917))

(declare-fun m!55919 () Bool)

(assert (=> d!12643 m!55919))

(declare-fun m!55921 () Bool)

(assert (=> d!12643 m!55921))

(declare-fun m!55923 () Bool)

(assert (=> d!12643 m!55923))

(declare-fun m!55925 () Bool)

(assert (=> b!62130 m!55925))

(declare-fun m!55927 () Bool)

(assert (=> b!62131 m!55927))

(assert (=> b!61002 d!12643))

(declare-fun d!12645 () Bool)

(declare-fun e!40783 () Bool)

(assert (=> d!12645 e!40783))

(declare-fun res!34161 () Bool)

(assert (=> d!12645 (=> (not res!34161) (not e!40783))))

(declare-fun lt!25906 () ListLongMap!1369)

(assert (=> d!12645 (= res!34161 (contains!686 lt!25906 (_1!1027 (tuple2!2033 lt!25071 (zeroValue!1981 newMap!16)))))))

(declare-fun lt!25907 () List!1436)

(assert (=> d!12645 (= lt!25906 (ListLongMap!1370 lt!25907))))

(declare-fun lt!25905 () Unit!1625)

(declare-fun lt!25908 () Unit!1625)

(assert (=> d!12645 (= lt!25905 lt!25908)))

(assert (=> d!12645 (= (getValueByKey!125 lt!25907 (_1!1027 (tuple2!2033 lt!25071 (zeroValue!1981 newMap!16)))) (Some!130 (_2!1027 (tuple2!2033 lt!25071 (zeroValue!1981 newMap!16)))))))

(assert (=> d!12645 (= lt!25908 (lemmaContainsTupThenGetReturnValue!42 lt!25907 (_1!1027 (tuple2!2033 lt!25071 (zeroValue!1981 newMap!16))) (_2!1027 (tuple2!2033 lt!25071 (zeroValue!1981 newMap!16)))))))

(assert (=> d!12645 (= lt!25907 (insertStrictlySorted!45 (toList!700 lt!25084) (_1!1027 (tuple2!2033 lt!25071 (zeroValue!1981 newMap!16))) (_2!1027 (tuple2!2033 lt!25071 (zeroValue!1981 newMap!16)))))))

(assert (=> d!12645 (= (+!82 lt!25084 (tuple2!2033 lt!25071 (zeroValue!1981 newMap!16))) lt!25906)))

(declare-fun b!62132 () Bool)

(declare-fun res!34162 () Bool)

(assert (=> b!62132 (=> (not res!34162) (not e!40783))))

(assert (=> b!62132 (= res!34162 (= (getValueByKey!125 (toList!700 lt!25906) (_1!1027 (tuple2!2033 lt!25071 (zeroValue!1981 newMap!16)))) (Some!130 (_2!1027 (tuple2!2033 lt!25071 (zeroValue!1981 newMap!16))))))))

(declare-fun b!62133 () Bool)

(assert (=> b!62133 (= e!40783 (contains!688 (toList!700 lt!25906) (tuple2!2033 lt!25071 (zeroValue!1981 newMap!16))))))

(assert (= (and d!12645 res!34161) b!62132))

(assert (= (and b!62132 res!34162) b!62133))

(declare-fun m!55929 () Bool)

(assert (=> d!12645 m!55929))

(declare-fun m!55931 () Bool)

(assert (=> d!12645 m!55931))

(declare-fun m!55933 () Bool)

(assert (=> d!12645 m!55933))

(declare-fun m!55935 () Bool)

(assert (=> d!12645 m!55935))

(declare-fun m!55937 () Bool)

(assert (=> b!62132 m!55937))

(declare-fun m!55939 () Bool)

(assert (=> b!62133 m!55939))

(assert (=> b!61002 d!12645))

(declare-fun d!12647 () Bool)

(assert (=> d!12647 (= (apply!67 (+!82 lt!25077 (tuple2!2033 lt!25075 (minValue!1981 newMap!16))) lt!25089) (apply!67 lt!25077 lt!25089))))

(declare-fun lt!25909 () Unit!1625)

(assert (=> d!12647 (= lt!25909 (choose!318 lt!25077 lt!25075 (minValue!1981 newMap!16) lt!25089))))

(declare-fun e!40784 () Bool)

(assert (=> d!12647 e!40784))

(declare-fun res!34163 () Bool)

(assert (=> d!12647 (=> (not res!34163) (not e!40784))))

(assert (=> d!12647 (= res!34163 (contains!686 lt!25077 lt!25089))))

(assert (=> d!12647 (= (addApplyDifferent!43 lt!25077 lt!25075 (minValue!1981 newMap!16) lt!25089) lt!25909)))

(declare-fun b!62134 () Bool)

(assert (=> b!62134 (= e!40784 (not (= lt!25089 lt!25075)))))

(assert (= (and d!12647 res!34163) b!62134))

(assert (=> d!12647 m!53707))

(assert (=> d!12647 m!53699))

(declare-fun m!55941 () Bool)

(assert (=> d!12647 m!55941))

(assert (=> d!12647 m!53699))

(assert (=> d!12647 m!53711))

(declare-fun m!55943 () Bool)

(assert (=> d!12647 m!55943))

(assert (=> b!61002 d!12647))

(declare-fun d!12649 () Bool)

(assert (=> d!12649 (= (apply!67 lt!25077 lt!25089) (get!1078 (getValueByKey!125 (toList!700 lt!25077) lt!25089)))))

(declare-fun bs!2718 () Bool)

(assert (= bs!2718 d!12649))

(declare-fun m!55945 () Bool)

(assert (=> bs!2718 m!55945))

(assert (=> bs!2718 m!55945))

(declare-fun m!55947 () Bool)

(assert (=> bs!2718 m!55947))

(assert (=> b!61002 d!12649))

(declare-fun d!12651 () Bool)

(assert (=> d!12651 (contains!686 (+!82 lt!25080 (tuple2!2033 lt!25070 (zeroValue!1981 newMap!16))) lt!25083)))

(declare-fun lt!25910 () Unit!1625)

(assert (=> d!12651 (= lt!25910 (choose!319 lt!25080 lt!25070 (zeroValue!1981 newMap!16) lt!25083))))

(assert (=> d!12651 (contains!686 lt!25080 lt!25083)))

(assert (=> d!12651 (= (addStillContains!43 lt!25080 lt!25070 (zeroValue!1981 newMap!16) lt!25083) lt!25910)))

(declare-fun bs!2719 () Bool)

(assert (= bs!2719 d!12651))

(assert (=> bs!2719 m!53683))

(assert (=> bs!2719 m!53683))

(assert (=> bs!2719 m!53685))

(declare-fun m!55949 () Bool)

(assert (=> bs!2719 m!55949))

(declare-fun m!55951 () Bool)

(assert (=> bs!2719 m!55951))

(assert (=> b!61002 d!12651))

(declare-fun d!12653 () Bool)

(declare-fun e!40785 () Bool)

(assert (=> d!12653 e!40785))

(declare-fun res!34164 () Bool)

(assert (=> d!12653 (=> res!34164 e!40785)))

(declare-fun lt!25914 () Bool)

(assert (=> d!12653 (= res!34164 (not lt!25914))))

(declare-fun lt!25913 () Bool)

(assert (=> d!12653 (= lt!25914 lt!25913)))

(declare-fun lt!25912 () Unit!1625)

(declare-fun e!40786 () Unit!1625)

(assert (=> d!12653 (= lt!25912 e!40786)))

(declare-fun c!8262 () Bool)

(assert (=> d!12653 (= c!8262 lt!25913)))

(assert (=> d!12653 (= lt!25913 (containsKey!129 (toList!700 (+!82 lt!25080 (tuple2!2033 lt!25070 (zeroValue!1981 newMap!16)))) lt!25083))))

(assert (=> d!12653 (= (contains!686 (+!82 lt!25080 (tuple2!2033 lt!25070 (zeroValue!1981 newMap!16))) lt!25083) lt!25914)))

(declare-fun b!62135 () Bool)

(declare-fun lt!25911 () Unit!1625)

(assert (=> b!62135 (= e!40786 lt!25911)))

(assert (=> b!62135 (= lt!25911 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 (+!82 lt!25080 (tuple2!2033 lt!25070 (zeroValue!1981 newMap!16)))) lt!25083))))

(assert (=> b!62135 (isDefined!78 (getValueByKey!125 (toList!700 (+!82 lt!25080 (tuple2!2033 lt!25070 (zeroValue!1981 newMap!16)))) lt!25083))))

(declare-fun b!62136 () Bool)

(declare-fun Unit!1688 () Unit!1625)

(assert (=> b!62136 (= e!40786 Unit!1688)))

(declare-fun b!62137 () Bool)

(assert (=> b!62137 (= e!40785 (isDefined!78 (getValueByKey!125 (toList!700 (+!82 lt!25080 (tuple2!2033 lt!25070 (zeroValue!1981 newMap!16)))) lt!25083)))))

(assert (= (and d!12653 c!8262) b!62135))

(assert (= (and d!12653 (not c!8262)) b!62136))

(assert (= (and d!12653 (not res!34164)) b!62137))

(declare-fun m!55953 () Bool)

(assert (=> d!12653 m!55953))

(declare-fun m!55955 () Bool)

(assert (=> b!62135 m!55955))

(declare-fun m!55957 () Bool)

(assert (=> b!62135 m!55957))

(assert (=> b!62135 m!55957))

(declare-fun m!55959 () Bool)

(assert (=> b!62135 m!55959))

(assert (=> b!62137 m!55957))

(assert (=> b!62137 m!55957))

(assert (=> b!62137 m!55959))

(assert (=> b!61002 d!12653))

(declare-fun d!12655 () Bool)

(assert (=> d!12655 (= (apply!67 (+!82 lt!25072 (tuple2!2033 lt!25082 (minValue!1981 newMap!16))) lt!25081) (get!1078 (getValueByKey!125 (toList!700 (+!82 lt!25072 (tuple2!2033 lt!25082 (minValue!1981 newMap!16)))) lt!25081)))))

(declare-fun bs!2720 () Bool)

(assert (= bs!2720 d!12655))

(declare-fun m!55961 () Bool)

(assert (=> bs!2720 m!55961))

(assert (=> bs!2720 m!55961))

(declare-fun m!55963 () Bool)

(assert (=> bs!2720 m!55963))

(assert (=> b!61002 d!12655))

(assert (=> b!61002 d!12117))

(declare-fun d!12657 () Bool)

(assert (=> d!12657 (= (apply!67 (+!82 lt!25084 (tuple2!2033 lt!25071 (zeroValue!1981 newMap!16))) lt!25079) (get!1078 (getValueByKey!125 (toList!700 (+!82 lt!25084 (tuple2!2033 lt!25071 (zeroValue!1981 newMap!16)))) lt!25079)))))

(declare-fun bs!2721 () Bool)

(assert (= bs!2721 d!12657))

(declare-fun m!55965 () Bool)

(assert (=> bs!2721 m!55965))

(assert (=> bs!2721 m!55965))

(declare-fun m!55967 () Bool)

(assert (=> bs!2721 m!55967))

(assert (=> b!61002 d!12657))

(assert (=> b!61271 d!12109))

(declare-fun d!12659 () Bool)

(declare-fun e!40787 () Bool)

(assert (=> d!12659 e!40787))

(declare-fun res!34165 () Bool)

(assert (=> d!12659 (=> res!34165 e!40787)))

(declare-fun lt!25918 () Bool)

(assert (=> d!12659 (= res!34165 (not lt!25918))))

(declare-fun lt!25917 () Bool)

(assert (=> d!12659 (= lt!25918 lt!25917)))

(declare-fun lt!25916 () Unit!1625)

(declare-fun e!40788 () Unit!1625)

(assert (=> d!12659 (= lt!25916 e!40788)))

(declare-fun c!8263 () Bool)

(assert (=> d!12659 (= c!8263 lt!25917)))

(assert (=> d!12659 (= lt!25917 (containsKey!129 (toList!700 lt!25134) (_1!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(assert (=> d!12659 (= (contains!686 lt!25134 (_1!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25918)))

(declare-fun b!62138 () Bool)

(declare-fun lt!25915 () Unit!1625)

(assert (=> b!62138 (= e!40788 lt!25915)))

(assert (=> b!62138 (= lt!25915 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!700 lt!25134) (_1!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(assert (=> b!62138 (isDefined!78 (getValueByKey!125 (toList!700 lt!25134) (_1!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun b!62139 () Bool)

(declare-fun Unit!1689 () Unit!1625)

(assert (=> b!62139 (= e!40788 Unit!1689)))

(declare-fun b!62140 () Bool)

(assert (=> b!62140 (= e!40787 (isDefined!78 (getValueByKey!125 (toList!700 lt!25134) (_1!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (= (and d!12659 c!8263) b!62138))

(assert (= (and d!12659 (not c!8263)) b!62139))

(assert (= (and d!12659 (not res!34165)) b!62140))

(declare-fun m!55969 () Bool)

(assert (=> d!12659 m!55969))

(declare-fun m!55971 () Bool)

(assert (=> b!62138 m!55971))

(assert (=> b!62138 m!53791))

(assert (=> b!62138 m!53791))

(declare-fun m!55973 () Bool)

(assert (=> b!62138 m!55973))

(assert (=> b!62140 m!53791))

(assert (=> b!62140 m!53791))

(assert (=> b!62140 m!55973))

(assert (=> d!12017 d!12659))

(declare-fun b!62141 () Bool)

(declare-fun e!40789 () Option!131)

(assert (=> b!62141 (= e!40789 (Some!130 (_2!1027 (h!2014 lt!25135))))))

(declare-fun c!8264 () Bool)

(declare-fun d!12661 () Bool)

(assert (=> d!12661 (= c!8264 (and ((_ is Cons!1432) lt!25135) (= (_1!1027 (h!2014 lt!25135)) (_1!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (=> d!12661 (= (getValueByKey!125 lt!25135 (_1!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) e!40789)))

(declare-fun b!62142 () Bool)

(declare-fun e!40790 () Option!131)

(assert (=> b!62142 (= e!40789 e!40790)))

(declare-fun c!8265 () Bool)

(assert (=> b!62142 (= c!8265 (and ((_ is Cons!1432) lt!25135) (not (= (_1!1027 (h!2014 lt!25135)) (_1!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))))

(declare-fun b!62144 () Bool)

(assert (=> b!62144 (= e!40790 None!129)))

(declare-fun b!62143 () Bool)

(assert (=> b!62143 (= e!40790 (getValueByKey!125 (t!4806 lt!25135) (_1!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(assert (= (and d!12661 c!8264) b!62141))

(assert (= (and d!12661 (not c!8264)) b!62142))

(assert (= (and b!62142 c!8265) b!62143))

(assert (= (and b!62142 (not c!8265)) b!62144))

(declare-fun m!55975 () Bool)

(assert (=> b!62143 m!55975))

(assert (=> d!12017 d!12661))

(declare-fun d!12663 () Bool)

(assert (=> d!12663 (= (getValueByKey!125 lt!25135 (_1!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) (Some!130 (_2!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun lt!25919 () Unit!1625)

(assert (=> d!12663 (= lt!25919 (choose!325 lt!25135 (_1!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun e!40791 () Bool)

(assert (=> d!12663 e!40791))

(declare-fun res!34166 () Bool)

(assert (=> d!12663 (=> (not res!34166) (not e!40791))))

(assert (=> d!12663 (= res!34166 (isStrictlySorted!285 lt!25135))))

(assert (=> d!12663 (= (lemmaContainsTupThenGetReturnValue!42 lt!25135 (_1!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25919)))

(declare-fun b!62145 () Bool)

(declare-fun res!34167 () Bool)

(assert (=> b!62145 (=> (not res!34167) (not e!40791))))

(assert (=> b!62145 (= res!34167 (containsKey!129 lt!25135 (_1!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun b!62146 () Bool)

(assert (=> b!62146 (= e!40791 (contains!688 lt!25135 (tuple2!2033 (_1!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (= (and d!12663 res!34166) b!62145))

(assert (= (and b!62145 res!34167) b!62146))

(assert (=> d!12663 m!53785))

(declare-fun m!55977 () Bool)

(assert (=> d!12663 m!55977))

(declare-fun m!55979 () Bool)

(assert (=> d!12663 m!55979))

(declare-fun m!55981 () Bool)

(assert (=> b!62145 m!55981))

(declare-fun m!55983 () Bool)

(assert (=> b!62146 m!55983))

(assert (=> d!12017 d!12663))

(declare-fun b!62147 () Bool)

(declare-fun lt!25920 () List!1436)

(declare-fun e!40794 () Bool)

(assert (=> b!62147 (= e!40794 (contains!688 lt!25920 (tuple2!2033 (_1!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(declare-fun call!4820 () List!1436)

(declare-fun bm!4817 () Bool)

(declare-fun e!40792 () List!1436)

(declare-fun c!8267 () Bool)

(assert (=> bm!4817 (= call!4820 ($colon$colon!61 e!40792 (ite c!8267 (h!2014 (toList!700 lt!24998)) (tuple2!2033 (_1!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))))

(declare-fun c!8266 () Bool)

(assert (=> bm!4817 (= c!8266 c!8267)))

(declare-fun b!62148 () Bool)

(declare-fun e!40796 () List!1436)

(assert (=> b!62148 (= e!40796 call!4820)))

(declare-fun bm!4818 () Bool)

(declare-fun call!4822 () List!1436)

(declare-fun call!4821 () List!1436)

(assert (=> bm!4818 (= call!4822 call!4821)))

(declare-fun b!62149 () Bool)

(declare-fun e!40793 () List!1436)

(assert (=> b!62149 (= e!40793 call!4822)))

(declare-fun b!62150 () Bool)

(assert (=> b!62150 (= e!40792 (insertStrictlySorted!45 (t!4806 (toList!700 lt!24998)) (_1!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun bm!4819 () Bool)

(assert (=> bm!4819 (= call!4821 call!4820)))

(declare-fun b!62151 () Bool)

(assert (=> b!62151 (= e!40793 call!4822)))

(declare-fun d!12665 () Bool)

(assert (=> d!12665 e!40794))

(declare-fun res!34168 () Bool)

(assert (=> d!12665 (=> (not res!34168) (not e!40794))))

(assert (=> d!12665 (= res!34168 (isStrictlySorted!285 lt!25920))))

(assert (=> d!12665 (= lt!25920 e!40796)))

(assert (=> d!12665 (= c!8267 (and ((_ is Cons!1432) (toList!700 lt!24998)) (bvslt (_1!1027 (h!2014 (toList!700 lt!24998))) (_1!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (=> d!12665 (isStrictlySorted!285 (toList!700 lt!24998))))

(assert (=> d!12665 (= (insertStrictlySorted!45 (toList!700 lt!24998) (_1!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992))))) (_2!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))) lt!25920)))

(declare-fun b!62152 () Bool)

(declare-fun e!40795 () List!1436)

(assert (=> b!62152 (= e!40795 call!4821)))

(declare-fun b!62153 () Bool)

(declare-fun c!8269 () Bool)

(assert (=> b!62153 (= c!8269 (and ((_ is Cons!1432) (toList!700 lt!24998)) (bvsgt (_1!1027 (h!2014 (toList!700 lt!24998))) (_1!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(assert (=> b!62153 (= e!40795 e!40793)))

(declare-fun b!62154 () Bool)

(declare-fun res!34169 () Bool)

(assert (=> b!62154 (=> (not res!34169) (not e!40794))))

(assert (=> b!62154 (= res!34169 (containsKey!129 lt!25920 (_1!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992)))))))))

(declare-fun b!62155 () Bool)

(assert (=> b!62155 (= e!40796 e!40795)))

(declare-fun c!8268 () Bool)

(assert (=> b!62155 (= c!8268 (and ((_ is Cons!1432) (toList!700 lt!24998)) (= (_1!1027 (h!2014 (toList!700 lt!24998))) (_1!1027 (tuple2!2033 lt!25008 (minValue!1981 (v!2404 (underlying!231 thiss!992))))))))))

(declare-fun b!62156 () Bool)

(assert (=> b!62156 (= e!40792 (ite c!8268 (t!4806 (toList!700 lt!24998)) (ite c!8269 (Cons!1432 (h!2014 (toList!700 lt!24998)) (t!4806 (toList!700 lt!24998))) Nil!1433)))))

(assert (= (and d!12665 c!8267) b!62148))

(assert (= (and d!12665 (not c!8267)) b!62155))

(assert (= (and b!62155 c!8268) b!62152))

(assert (= (and b!62155 (not c!8268)) b!62153))

(assert (= (and b!62153 c!8269) b!62151))

(assert (= (and b!62153 (not c!8269)) b!62149))

(assert (= (or b!62151 b!62149) bm!4818))

(assert (= (or b!62152 bm!4818) bm!4819))

(assert (= (or b!62148 bm!4819) bm!4817))

(assert (= (and bm!4817 c!8266) b!62150))

(assert (= (and bm!4817 (not c!8266)) b!62156))

(assert (= (and d!12665 res!34168) b!62154))

(assert (= (and b!62154 res!34169) b!62147))

(declare-fun m!55985 () Bool)

(assert (=> bm!4817 m!55985))

(declare-fun m!55987 () Bool)

(assert (=> b!62154 m!55987))

(declare-fun m!55989 () Bool)

(assert (=> d!12665 m!55989))

(declare-fun m!55991 () Bool)

(assert (=> d!12665 m!55991))

(declare-fun m!55993 () Bool)

(assert (=> b!62150 m!55993))

(declare-fun m!55995 () Bool)

(assert (=> b!62147 m!55995))

(assert (=> d!12017 d!12665))

(declare-fun b!62157 () Bool)

(declare-fun e!40797 () Bool)

(assert (=> b!62157 (= e!40797 tp_is_empty!2409)))

(declare-fun b!62158 () Bool)

(declare-fun e!40798 () Bool)

(assert (=> b!62158 (= e!40798 tp_is_empty!2409)))

(declare-fun condMapEmpty!2931 () Bool)

(declare-fun mapDefault!2931 () ValueCell!861)

(assert (=> mapNonEmpty!2930 (= condMapEmpty!2931 (= mapRest!2930 ((as const (Array (_ BitVec 32) ValueCell!861)) mapDefault!2931)))))

(declare-fun mapRes!2931 () Bool)

(assert (=> mapNonEmpty!2930 (= tp!8096 (and e!40798 mapRes!2931))))

(declare-fun mapNonEmpty!2931 () Bool)

(declare-fun tp!8097 () Bool)

(assert (=> mapNonEmpty!2931 (= mapRes!2931 (and tp!8097 e!40797))))

(declare-fun mapKey!2931 () (_ BitVec 32))

(declare-fun mapRest!2931 () (Array (_ BitVec 32) ValueCell!861))

(declare-fun mapValue!2931 () ValueCell!861)

(assert (=> mapNonEmpty!2931 (= mapRest!2930 (store mapRest!2931 mapKey!2931 mapValue!2931))))

(declare-fun mapIsEmpty!2931 () Bool)

(assert (=> mapIsEmpty!2931 mapRes!2931))

(assert (= (and mapNonEmpty!2930 condMapEmpty!2931) mapIsEmpty!2931))

(assert (= (and mapNonEmpty!2930 (not condMapEmpty!2931)) mapNonEmpty!2931))

(assert (= (and mapNonEmpty!2931 ((_ is ValueCellFull!861) mapValue!2931)) b!62157))

(assert (= (and mapNonEmpty!2930 ((_ is ValueCellFull!861) mapDefault!2931)) b!62158))

(declare-fun m!55997 () Bool)

(assert (=> mapNonEmpty!2931 m!55997))

(declare-fun b!62159 () Bool)

(declare-fun e!40799 () Bool)

(assert (=> b!62159 (= e!40799 tp_is_empty!2409)))

(declare-fun b!62160 () Bool)

(declare-fun e!40800 () Bool)

(assert (=> b!62160 (= e!40800 tp_is_empty!2409)))

(declare-fun condMapEmpty!2932 () Bool)

(declare-fun mapDefault!2932 () ValueCell!861)

(assert (=> mapNonEmpty!2929 (= condMapEmpty!2932 (= mapRest!2929 ((as const (Array (_ BitVec 32) ValueCell!861)) mapDefault!2932)))))

(declare-fun mapRes!2932 () Bool)

(assert (=> mapNonEmpty!2929 (= tp!8095 (and e!40800 mapRes!2932))))

(declare-fun mapNonEmpty!2932 () Bool)

(declare-fun tp!8098 () Bool)

(assert (=> mapNonEmpty!2932 (= mapRes!2932 (and tp!8098 e!40799))))

(declare-fun mapKey!2932 () (_ BitVec 32))

(declare-fun mapRest!2932 () (Array (_ BitVec 32) ValueCell!861))

(declare-fun mapValue!2932 () ValueCell!861)

(assert (=> mapNonEmpty!2932 (= mapRest!2929 (store mapRest!2932 mapKey!2932 mapValue!2932))))

(declare-fun mapIsEmpty!2932 () Bool)

(assert (=> mapIsEmpty!2932 mapRes!2932))

(assert (= (and mapNonEmpty!2929 condMapEmpty!2932) mapIsEmpty!2932))

(assert (= (and mapNonEmpty!2929 (not condMapEmpty!2932)) mapNonEmpty!2932))

(assert (= (and mapNonEmpty!2932 ((_ is ValueCellFull!861) mapValue!2932)) b!62159))

(assert (= (and mapNonEmpty!2929 ((_ is ValueCellFull!861) mapDefault!2932)) b!62160))

(declare-fun m!55999 () Bool)

(assert (=> mapNonEmpty!2932 m!55999))

(declare-fun b_lambda!2753 () Bool)

(assert (= b_lambda!2721 (or (and b!60606 b_free!1985 (= (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) (defaultEntry!2067 newMap!16))) (and b!60590 b_free!1987) b_lambda!2753)))

(declare-fun b_lambda!2755 () Bool)

(assert (= b_lambda!2741 (or (and b!60606 b_free!1985 (= (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) (defaultEntry!2067 newMap!16))) (and b!60590 b_free!1987) b_lambda!2755)))

(declare-fun b_lambda!2757 () Bool)

(assert (= b_lambda!2729 (or (and b!60606 b_free!1985 (= (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) (defaultEntry!2067 newMap!16))) (and b!60590 b_free!1987) b_lambda!2757)))

(declare-fun b_lambda!2759 () Bool)

(assert (= b_lambda!2723 (or (and b!60606 b_free!1985 (= (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) (defaultEntry!2067 newMap!16))) (and b!60590 b_free!1987) b_lambda!2759)))

(declare-fun b_lambda!2761 () Bool)

(assert (= b_lambda!2739 (or (and b!60606 b_free!1985 (= (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) (defaultEntry!2067 newMap!16))) (and b!60590 b_free!1987) b_lambda!2761)))

(declare-fun b_lambda!2763 () Bool)

(assert (= b_lambda!2745 (or (and b!60606 b_free!1985 (= (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) (defaultEntry!2067 newMap!16))) (and b!60590 b_free!1987) b_lambda!2763)))

(declare-fun b_lambda!2765 () Bool)

(assert (= b_lambda!2733 (or (and b!60606 b_free!1985 (= (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) (defaultEntry!2067 newMap!16))) (and b!60590 b_free!1987) b_lambda!2765)))

(declare-fun b_lambda!2767 () Bool)

(assert (= b_lambda!2751 (or (and b!60606 b_free!1985 (= (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) (defaultEntry!2067 newMap!16))) (and b!60590 b_free!1987) b_lambda!2767)))

(declare-fun b_lambda!2769 () Bool)

(assert (= b_lambda!2727 (or (and b!60606 b_free!1985 (= (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) (defaultEntry!2067 newMap!16))) (and b!60590 b_free!1987) b_lambda!2769)))

(declare-fun b_lambda!2771 () Bool)

(assert (= b_lambda!2725 (or (and b!60606 b_free!1985 (= (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) (defaultEntry!2067 newMap!16))) (and b!60590 b_free!1987) b_lambda!2771)))

(declare-fun b_lambda!2773 () Bool)

(assert (= b_lambda!2737 (or (and b!60606 b_free!1985) (and b!60590 b_free!1987 (= (defaultEntry!2067 newMap!16) (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))))) b_lambda!2773)))

(declare-fun b_lambda!2775 () Bool)

(assert (= b_lambda!2743 (or (and b!60606 b_free!1985 (= (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) (defaultEntry!2067 newMap!16))) (and b!60590 b_free!1987) b_lambda!2775)))

(declare-fun b_lambda!2777 () Bool)

(assert (= b_lambda!2719 (or (and b!60606 b_free!1985 (= (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) (defaultEntry!2067 newMap!16))) (and b!60590 b_free!1987) b_lambda!2777)))

(declare-fun b_lambda!2779 () Bool)

(assert (= b_lambda!2735 (or (and b!60606 b_free!1985) (and b!60590 b_free!1987 (= (defaultEntry!2067 newMap!16) (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))))) b_lambda!2779)))

(declare-fun b_lambda!2781 () Bool)

(assert (= b_lambda!2747 (or (and b!60606 b_free!1985 (= (defaultEntry!2067 (v!2404 (underlying!231 thiss!992))) (defaultEntry!2067 newMap!16))) (and b!60590 b_free!1987) b_lambda!2781)))

(check-sat (not d!12651) (not b!61629) (not d!12159) (not bm!4751) (not b!62062) (not b!61348) (not d!12619) (not b!61820) (not d!12607) (not b!61352) (not b!62000) (not b!61656) (not b!61760) (not b!61766) (not bm!4768) (not b!61935) (not b!61636) (not b!61473) (not b!61357) (not bm!4817) (not b_lambda!2749) (not d!12441) (not b!61903) (not d!12539) (not b!61847) (not d!12255) (not bm!4793) (not d!12635) (not d!12349) (not d!12347) (not d!12587) (not b!61855) (not bm!4812) (not b!61276) (not b!61781) (not b!61728) (not b!62041) (not b!61875) (not b!61280) (not d!12357) (not b!61995) (not b!61305) (not d!12515) (not b!61317) (not b!61350) (not b!62006) (not bm!4776) (not bm!4788) (not d!12425) (not b!61504) (not b!61771) (not d!12411) (not b!61347) (not b!61580) (not b!61383) (not b!61727) (not b!61423) (not d!12361) (not b!61899) (not b!61741) (not b!61862) (not d!12351) (not b!61665) (not b!62019) (not b!61662) (not b_lambda!2777) (not d!12637) (not b!61920) (not d!12463) (not d!12287) (not d!12577) (not d!12127) b_and!3801 (not d!12143) (not d!12165) (not b!61654) (not b!61622) (not b!61848) (not b!61405) (not b!61556) (not b_lambda!2689) (not b!61323) (not d!12339) (not b!61944) (not b!62112) (not b!61994) (not b!62013) (not b!61865) (not d!12571) (not b!61762) (not d!12185) (not b!61328) (not d!12139) (not d!12599) (not b!61428) (not d!12181) (not bm!4797) (not b!61650) (not b!61503) (not b!62098) (not b!61332) (not b!61853) (not b!61523) (not b!61337) (not d!12359) (not d!12613) (not b!61722) (not b!61292) (not b!62010) (not bm!4791) (not d!12295) (not b!61603) (not d!12151) (not d!12471) (not d!12499) (not b_lambda!2761) (not bm!4749) (not b!61494) (not bm!4730) (not d!12537) (not d!12609) (not bm!4743) (not b!61798) (not b!61431) (not b!62150) (not d!12369) (not d!12629) (not b!62147) (not d!12147) (not b!61908) (not d!12631) (not d!12219) (not b!61530) (not bm!4718) (not b!61850) (not b!62075) (not b!62025) (not bm!4769) (not b!62042) (not d!12597) (not d!12643) (not b!61605) (not d!12103) (not b!61790) (not b!61505) (not b!61769) (not b!61296) (not b!61914) (not b!61598) (not d!12365) (not b!61671) (not d!12367) (not d!12393) (not b!61883) (not bm!4765) (not d!12149) (not d!12277) (not b!61607) (not b!61341) (not b!61986) (not bm!4756) (not d!12373) (not bm!4727) (not b_lambda!2773) (not b!62127) (not b!62005) (not b!62022) (not b!62143) (not b!61981) (not bm!4742) (not d!12257) (not bm!4792) (not d!12397) (not d!12563) (not d!12517) (not b!61298) (not d!12555) (not b!62125) (not d!12641) (not b_lambda!2711) (not b!61815) (not d!12511) (not b!61857) (not b!61318) (not b!61550) (not bm!4807) (not b!61572) (not b!61898) (not bm!4746) (not b!61658) (not d!12591) (not b!61592) (not d!12205) (not d!12457) (not b!61787) (not d!12243) (not d!12225) (not b!61676) (not d!12445) (not b!62108) (not b!61479) (not b!62015) (not d!12329) (not b!62121) (not d!12495) (not bm!4784) (not d!12623) (not b!61895) (not d!12653) (not b!61817) (not b!61725) (not d!12523) (not bm!4734) (not d!12479) (not b!62039) (not d!12197) (not d!12647) (not b!61996) (not b!61969) (not b!61963) (not d!12275) (not d!12227) (not b!61466) (not bm!4777) (not b!61384) (not bm!4800) (not d!12549) (not d!12371) (not b!61615) (not b_lambda!2709) (not b!61804) (not b!61884) (not d!12617) (not bm!4781) (not b!61590) (not bm!4762) (not bm!4816) (not d!12381) (not b!62051) (not b!61940) (not d!12335) (not d!12387) (not b!61609) (not d!12665) (not b!61985) tp_is_empty!2409 (not b!62059) (not d!12191) (not b!61844) (not b!61912) (not b!61773) (not b!62072) (not b!61659) (not b!61764) (not b!61983) (not d!12659) (not b_lambda!2769) (not b!61907) (not b!62117) (not b!61513) (not b!61690) (not d!12421) (not b!61646) (not d!12153) (not b!62109) (not b!61499) (not b!61555) (not b!61467) (not b!61802) (not b!61942) (not b!61501) (not b!61716) (not b!61425) (not b_lambda!2731) (not b!61343) (not b!61918) (not b!61808) (not d!12131) (not b!61483) (not b!61517) (not b!61873) (not b!61282) (not b!62138) (not d!12529) (not b!61578) (not b!61800) (not b_next!1987) (not b!61687) (not d!12355) (not b!61830) (not b!62043) (not b!62031) (not b!61498) (not b!61532) (not b!62113) (not d!12105) (not d!12409) (not b!62137) (not d!12221) (not b!61693) (not b!61277) (not b!61311) (not b!62038) (not bm!4804) (not b!62131) (not b!61412) (not b!61833) (not d!12237) (not d!12639) (not b!62107) (not b!61813) (not d!12199) (not b!61314) (not d!12379) (not b_lambda!2763) (not b!61321) (not d!12331) (not b!61528) (not d!12657) (not bm!4720) (not b!62074) (not d!12459) (not b!62106) (not d!12235) (not d!12117) (not b!61778) b_and!3799 (not d!12663) (not b!61775) (not b!61999) (not d!12161) (not d!12527) (not d!12501) (not b!61525) (not b!62130) (not b!62050) (not d!12543) (not b!61569) (not b!61377) (not d!12233) (not b!62123) (not b!61707) (not bm!4796) (not d!12311) (not d!12485) (not b_lambda!2713) (not d!12447) (not d!12293) (not b!61286) (not b!61683) (not b!61997) (not d!12133) (not b!61921) (not b_lambda!2693) (not b!61324) (not b!61968) (not b!62036) (not b!61880) (not bm!4789) (not bm!4717) (not d!12483) (not bm!4779) (not d!12533) (not b!61547) (not b!62110) (not d!12423) (not b!61946) (not b!61371) (not b!61558) (not d!12455) (not b!61372) (not d!12239) (not b!62145) (not d!12645) (not b!62064) (not d!12363) (not d!12625) (not bm!4719) (not b_lambda!2753) (not d!12265) (not b!62111) (not b!61623) (not b!61326) (not b!61674) (not b!61329) (not b!61859) (not b!61535) (not d!12343) (not b!61952) (not b!61780) (not d!12309) (not b!61589) (not b!61415) (not d!12145) (not mapNonEmpty!2931) (not b_lambda!2779) (not d!12567) (not b!61706) (not b!61759) (not b!61973) (not b!61826) (not b_next!1985) (not b!61316) (not bm!4773) (not b!61612) (not b!61718) (not b!62132) (not b!61785) (not b!61732) (not b!61307) (not d!12553) (not b!61511) (not b!61698) (not b!61842) (not b!61345) (not b!61938) (not bm!4747) (not b_lambda!2765) (not b!61701) (not d!12505) (not b!61354) (not b!62002) (not d!12173) (not d!12551) (not b!61291) (not b!61471) (not b!61320) (not d!12655) (not b!61360) (not b!62045) (not b!61739) (not b_lambda!2771) (not b!61796) (not d!12525) (not b!61977) (not b!61882) (not bm!4761) (not b!61901) (not d!12247) (not b!62052) (not b!61595) (not b!62008) (not b!61933) (not b!61713) (not d!12321) (not b!61302) (not d!12305) (not b!62016) (not b!61465) (not b!62067) (not d!12189) (not b!61520) (not d!12113) (not b!61887) (not b!61660) (not b!61551) (not b!61689) (not d!12435) (not bm!4772) (not b!61427) (not b!61575) (not b!61522) (not b!61366) (not d!12413) (not d!12119) (not b!62030) (not d!12283) (not b!61633) (not b!61829) (not b_lambda!2759) (not b!61720) (not b!61837) (not b_lambda!2781) (not d!12473) (not bm!4754) (not b!61475) (not d!12263) (not d!12385) (not d!12319) (not b!61988) (not b_lambda!2707) (not b!61954) (not b!61961) (not b!61287) (not bm!4755) (not b!61419) (not b!62048) (not d!12603) (not d!12201) (not b!61719) (not b!62115) (not b!61308) (not b!61868) (not d!12307) (not b_lambda!2767) (not b!62055) (not d!12621) (not b!61492) (not b!62003) (not b!61774) (not d!12437) (not b!61369) (not bm!4736) (not b!61821) (not b!61639) (not d!12605) (not b!61421) (not d!12521) (not bm!4803) (not b!62023) (not d!12269) (not b_lambda!2715) (not b!61768) (not d!12125) (not b!61784) (not bm!4716) (not b_lambda!2755) (not bm!4813) (not bm!4758) (not b_lambda!2717) (not d!12107) (not b!61293) (not b!61966) (not b!61368) (not d!12353) (not b!61856) (not b!62034) (not b!61353) (not b!61437) (not b!61545) (not b!62140) (not b!61786) (not b!62146) (not b_lambda!2775) (not b!61309) (not b!61599) (not bm!4764) (not b!61508) (not b!61959) (not bm!4780) (not b!61325) (not d!12341) (not b!61408) (not d!12649) (not b!61303) (not d!12193) (not d!12467) (not d!12405) (not b!61631) (not b!61300) (not d!12573) (not b!61668) (not b!61906) (not bm!4809) (not d!12303) (not b!61611) (not d!12375) (not d!12615) (not d!12627) (not b!61514) (not b!61805) (not b!62128) (not b!61294) (not b!61312) (not b!61553) (not d!12465) (not b!61929) (not b!61289) (not b!62135) (not d!12325) (not b!61703) (not d!12561) (not d!12155) (not b!61936) (not bm!4741) (not b!62116) (not d!12229) (not b!61374) (not d!12251) (not bm!4771) (not d!12439) (not b!61496) (not b!62154) (not b!61939) (not b!61489) (not d!12509) (not d!12403) (not d!12461) (not b!61904) (not b!61916) (not d!12141) (not d!12601) (not b!61539) (not b!61818) (not d!12391) (not b!61763) (not b!61480) (not d!12633) (not b!61891) (not b!61570) (not b!61677) (not b!62070) (not b!61710) (not bm!4750) (not b!61657) (not b!61823) (not d!12271) (not d!12129) (not b!61860) (not d!12451) (not b!62032) (not b!61627) (not b!61297) (not b!61932) (not b!61436) (not d!12259) (not b!61440) (not d!12507) (not b!61685) (not b!61970) (not b!62077) (not d!12273) (not d!12557) (not b!62133) (not b!61438) (not b!61295) (not bm!4806) (not b!61729) (not d!12203) (not d!12345) (not d!12135) (not bm!4757) (not b!61924) (not b!62126) (not b!61635) (not b!61761) (not bm!4808) (not b!61284) (not b!61593) (not d!12531) (not b_lambda!2757) (not b!61681) (not b!61877) (not d!12167) (not d!12475) (not d!12611) (not d!12337) (not bm!4733) (not b!61620) (not b!62035) (not b!61846) (not bm!4785) (not d!12211) (not b!61542) (not d!12195) (not b!61828) (not b!61673) (not d!12291) (not b!61531) (not b!61776) (not d!12575) (not mapNonEmpty!2932) (not b!61587) (not b!61948) (not b!61897) (not b!61477) (not d!12137) (not b!61736) (not d!12493) (not b!61792))
(check-sat b_and!3799 b_and!3801 (not b_next!1985) (not b_next!1987))
