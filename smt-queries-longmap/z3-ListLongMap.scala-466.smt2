; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!8726 () Bool)

(assert start!8726)

(declare-fun b!60443 () Bool)

(declare-fun b_free!1981 () Bool)

(declare-fun b_next!1981 () Bool)

(assert (=> b!60443 (= b_free!1981 (not b_next!1981))))

(declare-fun tp!8063 () Bool)

(declare-fun b_and!3673 () Bool)

(assert (=> b!60443 (= tp!8063 b_and!3673)))

(declare-fun b!60445 () Bool)

(declare-fun b_free!1983 () Bool)

(declare-fun b_next!1983 () Bool)

(assert (=> b!60445 (= b_free!1983 (not b_next!1983))))

(declare-fun tp!8065 () Bool)

(declare-fun b_and!3675 () Bool)

(assert (=> b!60445 (= tp!8065 b_and!3675)))

(declare-fun b!60435 () Bool)

(declare-fun e!39749 () Bool)

(declare-fun e!39739 () Bool)

(assert (=> b!60435 (= e!39749 e!39739)))

(declare-fun mapIsEmpty!2911 () Bool)

(declare-fun mapRes!2912 () Bool)

(assert (=> mapIsEmpty!2911 mapRes!2912))

(declare-fun b!60436 () Bool)

(declare-fun e!39740 () Bool)

(declare-fun e!39741 () Bool)

(assert (=> b!60436 (= e!39740 e!39741)))

(declare-fun res!33413 () Bool)

(assert (=> b!60436 (=> (not res!33413) (not e!39741))))

(declare-datatypes ((V!2857 0))(
  ( (V!2858 (val!1248 Int)) )
))
(declare-datatypes ((array!3729 0))(
  ( (array!3730 (arr!1784 (Array (_ BitVec 32) (_ BitVec 64))) (size!2015 (_ BitVec 32))) )
))
(declare-datatypes ((ValueCell!860 0))(
  ( (ValueCellFull!860 (v!2402 V!2857)) (EmptyCell!860) )
))
(declare-datatypes ((array!3731 0))(
  ( (array!3732 (arr!1785 (Array (_ BitVec 32) ValueCell!860)) (size!2016 (_ BitVec 32))) )
))
(declare-datatypes ((LongMapFixedSize!628 0))(
  ( (LongMapFixedSize!629 (defaultEntry!2066 Int) (mask!5962 (_ BitVec 32)) (extraKeys!1949 (_ BitVec 32)) (zeroValue!1980 V!2857) (minValue!1980 V!2857) (_size!363 (_ BitVec 32)) (_keys!3694 array!3729) (_values!2049 array!3731) (_vacant!363 (_ BitVec 32))) )
))
(declare-datatypes ((Cell!438 0))(
  ( (Cell!439 (v!2403 LongMapFixedSize!628)) )
))
(declare-datatypes ((LongMap!438 0))(
  ( (LongMap!439 (underlying!230 Cell!438)) )
))
(declare-fun thiss!992 () LongMap!438)

(declare-datatypes ((tuple2!2022 0))(
  ( (tuple2!2023 (_1!1022 (_ BitVec 64)) (_2!1022 V!2857)) )
))
(declare-datatypes ((List!1426 0))(
  ( (Nil!1423) (Cons!1422 (h!2004 tuple2!2022) (t!4792 List!1426)) )
))
(declare-datatypes ((ListLongMap!1347 0))(
  ( (ListLongMap!1348 (toList!689 List!1426)) )
))
(declare-fun lt!24708 () ListLongMap!1347)

(declare-fun lt!24706 () ListLongMap!1347)

(declare-fun from!355 () (_ BitVec 32))

(assert (=> b!60436 (= res!33413 (and (= lt!24708 lt!24706) (not (= (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun newMap!16 () LongMapFixedSize!628)

(declare-fun map!1114 (LongMapFixedSize!628) ListLongMap!1347)

(assert (=> b!60436 (= lt!24706 (map!1114 newMap!16))))

(declare-fun getCurrentListMap!390 (array!3729 array!3731 (_ BitVec 32) (_ BitVec 32) V!2857 V!2857 (_ BitVec 32) Int) ListLongMap!1347)

(assert (=> b!60436 (= lt!24708 (getCurrentListMap!390 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (_values!2049 (v!2403 (underlying!230 thiss!992))) (mask!5962 (v!2403 (underlying!230 thiss!992))) (extraKeys!1949 (v!2403 (underlying!230 thiss!992))) (zeroValue!1980 (v!2403 (underlying!230 thiss!992))) (minValue!1980 (v!2403 (underlying!230 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2066 (v!2403 (underlying!230 thiss!992)))))))

(declare-fun b!60438 () Bool)

(declare-fun e!39737 () Bool)

(assert (=> b!60438 (= e!39737 e!39749)))

(declare-fun b!60439 () Bool)

(declare-fun e!39736 () Bool)

(declare-fun e!39748 () Bool)

(assert (=> b!60439 (= e!39736 (and e!39748 mapRes!2912))))

(declare-fun condMapEmpty!2912 () Bool)

(declare-fun mapDefault!2911 () ValueCell!860)

(assert (=> b!60439 (= condMapEmpty!2912 (= (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) ((as const (Array (_ BitVec 32) ValueCell!860)) mapDefault!2911)))))

(declare-fun b!60440 () Bool)

(declare-fun res!33414 () Bool)

(assert (=> b!60440 (=> (not res!33414) (not e!39740))))

(assert (=> b!60440 (= res!33414 (bvsge (bvadd #b00000000000000000000000000000001 (mask!5962 newMap!16)) (_size!363 (v!2403 (underlying!230 thiss!992)))))))

(declare-fun b!60441 () Bool)

(declare-datatypes ((Unit!1613 0))(
  ( (Unit!1614) )
))
(declare-fun e!39747 () Unit!1613)

(declare-fun Unit!1615 () Unit!1613)

(assert (=> b!60441 (= e!39747 Unit!1615)))

(declare-fun lt!24707 () Unit!1613)

(declare-fun lemmaListMapContainsThenArrayContainsFrom!26 (array!3729 array!3731 (_ BitVec 32) (_ BitVec 32) V!2857 V!2857 (_ BitVec 64) (_ BitVec 32) Int) Unit!1613)

(assert (=> b!60441 (= lt!24707 (lemmaListMapContainsThenArrayContainsFrom!26 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (_values!2049 (v!2403 (underlying!230 thiss!992))) (mask!5962 (v!2403 (underlying!230 thiss!992))) (extraKeys!1949 (v!2403 (underlying!230 thiss!992))) (zeroValue!1980 (v!2403 (underlying!230 thiss!992))) (minValue!1980 (v!2403 (underlying!230 thiss!992))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2066 (v!2403 (underlying!230 thiss!992)))))))

(declare-fun arrayContainsKey!0 (array!3729 (_ BitVec 64) (_ BitVec 32)) Bool)

(assert (=> b!60441 (arrayContainsKey!0 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355))))

(declare-fun lt!24710 () Unit!1613)

(declare-fun lemmaNoDuplicateFromThenFromBigger!0 (array!3729 (_ BitVec 32) (_ BitVec 32)) Unit!1613)

(assert (=> b!60441 (= lt!24710 (lemmaNoDuplicateFromThenFromBigger!0 (_keys!3694 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000000000000000 from!355))))

(declare-datatypes ((List!1427 0))(
  ( (Nil!1424) (Cons!1423 (h!2005 (_ BitVec 64)) (t!4793 List!1427)) )
))
(declare-fun arrayNoDuplicates!0 (array!3729 (_ BitVec 32) List!1427) Bool)

(assert (=> b!60441 (arrayNoDuplicates!0 (_keys!3694 (v!2403 (underlying!230 thiss!992))) from!355 Nil!1424)))

(declare-fun lt!24712 () Unit!1613)

(declare-fun lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (array!3729 (_ BitVec 32) (_ BitVec 64) List!1427) Unit!1613)

(assert (=> b!60441 (= lt!24712 (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (Cons!1423 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) Nil!1424)))))

(assert (=> b!60441 false))

(declare-fun b!60442 () Bool)

(declare-fun e!39745 () Bool)

(declare-fun tp_is_empty!2407 () Bool)

(assert (=> b!60442 (= e!39745 tp_is_empty!2407)))

(declare-fun mapIsEmpty!2912 () Bool)

(declare-fun mapRes!2911 () Bool)

(assert (=> mapIsEmpty!2912 mapRes!2911))

(declare-fun array_inv!1093 (array!3729) Bool)

(declare-fun array_inv!1094 (array!3731) Bool)

(assert (=> b!60443 (= e!39739 (and tp!8063 tp_is_empty!2407 (array_inv!1093 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (array_inv!1094 (_values!2049 (v!2403 (underlying!230 thiss!992)))) e!39736))))

(declare-fun b!60444 () Bool)

(declare-fun res!33416 () Bool)

(declare-fun e!39744 () Bool)

(assert (=> b!60444 (=> (not res!33416) (not e!39744))))

(declare-fun validMask!0 ((_ BitVec 32)) Bool)

(assert (=> b!60444 (= res!33416 (validMask!0 (mask!5962 (v!2403 (underlying!230 thiss!992)))))))

(declare-fun mapNonEmpty!2911 () Bool)

(declare-fun tp!8064 () Bool)

(declare-fun e!39746 () Bool)

(assert (=> mapNonEmpty!2911 (= mapRes!2912 (and tp!8064 e!39746))))

(declare-fun mapValue!2911 () ValueCell!860)

(declare-fun mapRest!2911 () (Array (_ BitVec 32) ValueCell!860))

(declare-fun mapKey!2912 () (_ BitVec 32))

(assert (=> mapNonEmpty!2911 (= (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) (store mapRest!2911 mapKey!2912 mapValue!2911))))

(declare-fun e!39735 () Bool)

(declare-fun e!39738 () Bool)

(assert (=> b!60445 (= e!39738 (and tp!8065 tp_is_empty!2407 (array_inv!1093 (_keys!3694 newMap!16)) (array_inv!1094 (_values!2049 newMap!16)) e!39735))))

(declare-fun b!60446 () Bool)

(declare-fun e!39734 () Bool)

(assert (=> b!60446 (= e!39734 tp_is_empty!2407)))

(declare-fun b!60447 () Bool)

(assert (=> b!60447 (= e!39735 (and e!39745 mapRes!2911))))

(declare-fun condMapEmpty!2911 () Bool)

(declare-fun mapDefault!2912 () ValueCell!860)

(assert (=> b!60447 (= condMapEmpty!2911 (= (arr!1785 (_values!2049 newMap!16)) ((as const (Array (_ BitVec 32) ValueCell!860)) mapDefault!2912)))))

(declare-fun b!60448 () Bool)

(assert (=> b!60448 (= e!39748 tp_is_empty!2407)))

(declare-fun b!60449 () Bool)

(declare-fun res!33415 () Bool)

(assert (=> b!60449 (=> (not res!33415) (not e!39740))))

(declare-fun valid!266 (LongMapFixedSize!628) Bool)

(assert (=> b!60449 (= res!33415 (valid!266 newMap!16))))

(declare-fun b!60450 () Bool)

(declare-fun Unit!1616 () Unit!1613)

(assert (=> b!60450 (= e!39747 Unit!1616)))

(declare-fun b!60451 () Bool)

(assert (=> b!60451 (= e!39744 (and (= (size!2016 (_values!2049 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 (mask!5962 (v!2403 (underlying!230 thiss!992))))) (= (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (size!2016 (_values!2049 (v!2403 (underlying!230 thiss!992))))) (bvsge (mask!5962 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000000000000000) (bvslt (extraKeys!1949 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000000000000000)))))

(declare-fun mapNonEmpty!2912 () Bool)

(declare-fun tp!8066 () Bool)

(assert (=> mapNonEmpty!2912 (= mapRes!2911 (and tp!8066 e!39734))))

(declare-fun mapRest!2912 () (Array (_ BitVec 32) ValueCell!860))

(declare-fun mapValue!2912 () ValueCell!860)

(declare-fun mapKey!2911 () (_ BitVec 32))

(assert (=> mapNonEmpty!2912 (= (arr!1785 (_values!2049 newMap!16)) (store mapRest!2912 mapKey!2911 mapValue!2912))))

(declare-fun b!60437 () Bool)

(declare-fun res!33418 () Bool)

(assert (=> b!60437 (=> (not res!33418) (not e!39740))))

(assert (=> b!60437 (= res!33418 (and (bvsge from!355 #b00000000000000000000000000000000) (bvslt from!355 (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun res!33412 () Bool)

(assert (=> start!8726 (=> (not res!33412) (not e!39740))))

(declare-fun valid!267 (LongMap!438) Bool)

(assert (=> start!8726 (= res!33412 (valid!267 thiss!992))))

(assert (=> start!8726 e!39740))

(assert (=> start!8726 e!39737))

(assert (=> start!8726 true))

(assert (=> start!8726 e!39738))

(declare-fun b!60452 () Bool)

(assert (=> b!60452 (= e!39741 e!39744)))

(declare-fun res!33417 () Bool)

(assert (=> b!60452 (=> (not res!33417) (not e!39744))))

(declare-datatypes ((tuple2!2024 0))(
  ( (tuple2!2025 (_1!1023 Bool) (_2!1023 LongMapFixedSize!628)) )
))
(declare-fun lt!24711 () tuple2!2024)

(assert (=> b!60452 (= res!33417 (and (_1!1023 lt!24711) (bvsgt from!355 #b00000000000000000000000000000000)))))

(declare-fun lt!24709 () Unit!1613)

(assert (=> b!60452 (= lt!24709 e!39747)))

(declare-fun c!7835 () Bool)

(declare-fun contains!682 (ListLongMap!1347 (_ BitVec 64)) Bool)

(assert (=> b!60452 (= c!7835 (contains!682 lt!24706 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(declare-fun update!88 (LongMapFixedSize!628 (_ BitVec 64) V!2857) tuple2!2024)

(declare-fun get!1081 (ValueCell!860 V!2857) V!2857)

(declare-fun dynLambda!306 (Int (_ BitVec 64)) V!2857)

(assert (=> b!60452 (= lt!24711 (update!88 newMap!16 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!60453 () Bool)

(assert (=> b!60453 (= e!39746 tp_is_empty!2407)))

(assert (= (and start!8726 res!33412) b!60437))

(assert (= (and b!60437 res!33418) b!60449))

(assert (= (and b!60449 res!33415) b!60440))

(assert (= (and b!60440 res!33414) b!60436))

(assert (= (and b!60436 res!33413) b!60452))

(assert (= (and b!60452 c!7835) b!60441))

(assert (= (and b!60452 (not c!7835)) b!60450))

(assert (= (and b!60452 res!33417) b!60444))

(assert (= (and b!60444 res!33416) b!60451))

(assert (= (and b!60439 condMapEmpty!2912) mapIsEmpty!2911))

(assert (= (and b!60439 (not condMapEmpty!2912)) mapNonEmpty!2911))

(get-info :version)

(assert (= (and mapNonEmpty!2911 ((_ is ValueCellFull!860) mapValue!2911)) b!60453))

(assert (= (and b!60439 ((_ is ValueCellFull!860) mapDefault!2911)) b!60448))

(assert (= b!60443 b!60439))

(assert (= b!60435 b!60443))

(assert (= b!60438 b!60435))

(assert (= start!8726 b!60438))

(assert (= (and b!60447 condMapEmpty!2911) mapIsEmpty!2912))

(assert (= (and b!60447 (not condMapEmpty!2911)) mapNonEmpty!2912))

(assert (= (and mapNonEmpty!2912 ((_ is ValueCellFull!860) mapValue!2912)) b!60446))

(assert (= (and b!60447 ((_ is ValueCellFull!860) mapDefault!2912)) b!60442))

(assert (= b!60445 b!60447))

(assert (= start!8726 b!60445))

(declare-fun b_lambda!2675 () Bool)

(assert (=> (not b_lambda!2675) (not b!60452)))

(declare-fun t!4789 () Bool)

(declare-fun tb!1341 () Bool)

(assert (=> (and b!60443 (= (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) (defaultEntry!2066 (v!2403 (underlying!230 thiss!992)))) t!4789) tb!1341))

(declare-fun result!2407 () Bool)

(assert (=> tb!1341 (= result!2407 tp_is_empty!2407)))

(assert (=> b!60452 t!4789))

(declare-fun b_and!3677 () Bool)

(assert (= b_and!3673 (and (=> t!4789 result!2407) b_and!3677)))

(declare-fun tb!1343 () Bool)

(declare-fun t!4791 () Bool)

(assert (=> (and b!60445 (= (defaultEntry!2066 newMap!16) (defaultEntry!2066 (v!2403 (underlying!230 thiss!992)))) t!4791) tb!1343))

(declare-fun result!2411 () Bool)

(assert (= result!2411 result!2407))

(assert (=> b!60452 t!4791))

(declare-fun b_and!3679 () Bool)

(assert (= b_and!3675 (and (=> t!4791 result!2411) b_and!3679)))

(declare-fun m!52979 () Bool)

(assert (=> b!60449 m!52979))

(declare-fun m!52981 () Bool)

(assert (=> b!60445 m!52981))

(declare-fun m!52983 () Bool)

(assert (=> b!60445 m!52983))

(declare-fun m!52985 () Bool)

(assert (=> b!60441 m!52985))

(declare-fun m!52987 () Bool)

(assert (=> b!60441 m!52987))

(declare-fun m!52989 () Bool)

(assert (=> b!60441 m!52989))

(declare-fun m!52991 () Bool)

(assert (=> b!60441 m!52991))

(assert (=> b!60441 m!52989))

(assert (=> b!60441 m!52989))

(declare-fun m!52993 () Bool)

(assert (=> b!60441 m!52993))

(assert (=> b!60441 m!52989))

(declare-fun m!52995 () Bool)

(assert (=> b!60441 m!52995))

(declare-fun m!52997 () Bool)

(assert (=> mapNonEmpty!2912 m!52997))

(declare-fun m!52999 () Bool)

(assert (=> mapNonEmpty!2911 m!52999))

(assert (=> b!60436 m!52989))

(declare-fun m!53001 () Bool)

(assert (=> b!60436 m!53001))

(declare-fun m!53003 () Bool)

(assert (=> b!60436 m!53003))

(declare-fun m!53005 () Bool)

(assert (=> b!60443 m!53005))

(declare-fun m!53007 () Bool)

(assert (=> b!60443 m!53007))

(declare-fun m!53009 () Bool)

(assert (=> b!60452 m!53009))

(declare-fun m!53011 () Bool)

(assert (=> b!60452 m!53011))

(declare-fun m!53013 () Bool)

(assert (=> b!60452 m!53013))

(assert (=> b!60452 m!52989))

(assert (=> b!60452 m!52989))

(declare-fun m!53015 () Bool)

(assert (=> b!60452 m!53015))

(assert (=> b!60452 m!53011))

(assert (=> b!60452 m!52989))

(assert (=> b!60452 m!53013))

(declare-fun m!53017 () Bool)

(assert (=> b!60452 m!53017))

(assert (=> b!60452 m!53009))

(declare-fun m!53019 () Bool)

(assert (=> start!8726 m!53019))

(declare-fun m!53021 () Bool)

(assert (=> b!60444 m!53021))

(check-sat (not mapNonEmpty!2911) (not b_lambda!2675) tp_is_empty!2407 b_and!3677 (not b!60443) (not start!8726) (not b!60452) (not b_next!1983) (not b!60445) (not b!60444) (not b!60436) (not mapNonEmpty!2912) (not b!60441) (not b!60449) b_and!3679 (not b_next!1981))
(check-sat b_and!3677 b_and!3679 (not b_next!1981) (not b_next!1983))
(get-model)

(declare-fun b_lambda!2681 () Bool)

(assert (= b_lambda!2675 (or (and b!60443 b_free!1981) (and b!60445 b_free!1983 (= (defaultEntry!2066 newMap!16) (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))))) b_lambda!2681)))

(check-sat (not mapNonEmpty!2911) tp_is_empty!2407 b_and!3677 (not b!60443) (not b_lambda!2681) (not start!8726) (not b!60452) (not b_next!1983) (not b!60445) (not b!60444) (not b!60436) (not mapNonEmpty!2912) (not b!60441) (not b!60449) b_and!3679 (not b_next!1981))
(check-sat b_and!3677 b_and!3679 (not b_next!1981) (not b_next!1983))
(get-model)

(declare-fun d!11875 () Bool)

(assert (=> d!11875 (not (arrayContainsKey!0 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!24757 () Unit!1613)

(declare-fun choose!68 (array!3729 (_ BitVec 32) (_ BitVec 64) List!1427) Unit!1613)

(assert (=> d!11875 (= lt!24757 (choose!68 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (Cons!1423 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) Nil!1424)))))

(assert (=> d!11875 (bvslt (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!11875 (= (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (Cons!1423 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) Nil!1424)) lt!24757)))

(declare-fun bs!2629 () Bool)

(assert (= bs!2629 d!11875))

(assert (=> bs!2629 m!52989))

(assert (=> bs!2629 m!52993))

(assert (=> bs!2629 m!52989))

(declare-fun m!53111 () Bool)

(assert (=> bs!2629 m!53111))

(assert (=> b!60441 d!11875))

(declare-fun d!11877 () Bool)

(assert (=> d!11877 (arrayNoDuplicates!0 (_keys!3694 (v!2403 (underlying!230 thiss!992))) from!355 Nil!1424)))

(declare-fun lt!24760 () Unit!1613)

(declare-fun choose!39 (array!3729 (_ BitVec 32) (_ BitVec 32)) Unit!1613)

(assert (=> d!11877 (= lt!24760 (choose!39 (_keys!3694 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000000000000000 from!355))))

(assert (=> d!11877 (bvslt (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!11877 (= (lemmaNoDuplicateFromThenFromBigger!0 (_keys!3694 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000000000000000 from!355) lt!24760)))

(declare-fun bs!2630 () Bool)

(assert (= bs!2630 d!11877))

(assert (=> bs!2630 m!52987))

(declare-fun m!53113 () Bool)

(assert (=> bs!2630 m!53113))

(assert (=> b!60441 d!11877))

(declare-fun d!11879 () Bool)

(declare-fun res!33465 () Bool)

(declare-fun e!39850 () Bool)

(assert (=> d!11879 (=> res!33465 e!39850)))

(assert (=> d!11879 (= res!33465 (= (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(assert (=> d!11879 (= (arrayContainsKey!0 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)) e!39850)))

(declare-fun b!60578 () Bool)

(declare-fun e!39851 () Bool)

(assert (=> b!60578 (= e!39850 e!39851)))

(declare-fun res!33466 () Bool)

(assert (=> b!60578 (=> (not res!33466) (not e!39851))))

(assert (=> b!60578 (= res!33466 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992))))))))

(declare-fun b!60579 () Bool)

(assert (=> b!60579 (= e!39851 (arrayContainsKey!0 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (= (and d!11879 (not res!33465)) b!60578))

(assert (= (and b!60578 res!33466) b!60579))

(declare-fun m!53115 () Bool)

(assert (=> d!11879 m!53115))

(assert (=> b!60579 m!52989))

(declare-fun m!53117 () Bool)

(assert (=> b!60579 m!53117))

(assert (=> b!60441 d!11879))

(declare-fun d!11881 () Bool)

(declare-fun e!39854 () Bool)

(assert (=> d!11881 e!39854))

(declare-fun c!7844 () Bool)

(assert (=> d!11881 (= c!7844 (and (not (= (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun lt!24763 () Unit!1613)

(declare-fun choose!322 (array!3729 array!3731 (_ BitVec 32) (_ BitVec 32) V!2857 V!2857 (_ BitVec 64) (_ BitVec 32) Int) Unit!1613)

(assert (=> d!11881 (= lt!24763 (choose!322 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (_values!2049 (v!2403 (underlying!230 thiss!992))) (mask!5962 (v!2403 (underlying!230 thiss!992))) (extraKeys!1949 (v!2403 (underlying!230 thiss!992))) (zeroValue!1980 (v!2403 (underlying!230 thiss!992))) (minValue!1980 (v!2403 (underlying!230 thiss!992))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2066 (v!2403 (underlying!230 thiss!992)))))))

(assert (=> d!11881 (validMask!0 (mask!5962 (v!2403 (underlying!230 thiss!992))))))

(assert (=> d!11881 (= (lemmaListMapContainsThenArrayContainsFrom!26 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (_values!2049 (v!2403 (underlying!230 thiss!992))) (mask!5962 (v!2403 (underlying!230 thiss!992))) (extraKeys!1949 (v!2403 (underlying!230 thiss!992))) (zeroValue!1980 (v!2403 (underlying!230 thiss!992))) (minValue!1980 (v!2403 (underlying!230 thiss!992))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2066 (v!2403 (underlying!230 thiss!992)))) lt!24763)))

(declare-fun b!60584 () Bool)

(assert (=> b!60584 (= e!39854 (arrayContainsKey!0 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!60585 () Bool)

(assert (=> b!60585 (= e!39854 (ite (= (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!1949 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1949 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!11881 c!7844) b!60584))

(assert (= (and d!11881 (not c!7844)) b!60585))

(assert (=> d!11881 m!52989))

(declare-fun m!53119 () Bool)

(assert (=> d!11881 m!53119))

(assert (=> d!11881 m!53021))

(assert (=> b!60584 m!52989))

(assert (=> b!60584 m!52993))

(assert (=> b!60441 d!11881))

(declare-fun b!60596 () Bool)

(declare-fun e!39865 () Bool)

(declare-fun e!39866 () Bool)

(assert (=> b!60596 (= e!39865 e!39866)))

(declare-fun c!7847 () Bool)

(declare-fun validKeyInArray!0 ((_ BitVec 64)) Bool)

(assert (=> b!60596 (= c!7847 (validKeyInArray!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(declare-fun b!60597 () Bool)

(declare-fun call!4553 () Bool)

(assert (=> b!60597 (= e!39866 call!4553)))

(declare-fun bm!4550 () Bool)

(assert (=> bm!4550 (= call!4553 (arrayNoDuplicates!0 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!7847 (Cons!1423 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) Nil!1424) Nil!1424)))))

(declare-fun b!60598 () Bool)

(declare-fun e!39864 () Bool)

(assert (=> b!60598 (= e!39864 e!39865)))

(declare-fun res!33473 () Bool)

(assert (=> b!60598 (=> (not res!33473) (not e!39865))))

(declare-fun e!39863 () Bool)

(assert (=> b!60598 (= res!33473 (not e!39863))))

(declare-fun res!33475 () Bool)

(assert (=> b!60598 (=> (not res!33475) (not e!39863))))

(assert (=> b!60598 (= res!33475 (validKeyInArray!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(declare-fun d!11883 () Bool)

(declare-fun res!33474 () Bool)

(assert (=> d!11883 (=> res!33474 e!39864)))

(assert (=> d!11883 (= res!33474 (bvsge from!355 (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992))))))))

(assert (=> d!11883 (= (arrayNoDuplicates!0 (_keys!3694 (v!2403 (underlying!230 thiss!992))) from!355 Nil!1424) e!39864)))

(declare-fun b!60599 () Bool)

(assert (=> b!60599 (= e!39866 call!4553)))

(declare-fun b!60600 () Bool)

(declare-fun contains!684 (List!1427 (_ BitVec 64)) Bool)

(assert (=> b!60600 (= e!39863 (contains!684 Nil!1424 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(assert (= (and d!11883 (not res!33474)) b!60598))

(assert (= (and b!60598 res!33475) b!60600))

(assert (= (and b!60598 res!33473) b!60596))

(assert (= (and b!60596 c!7847) b!60597))

(assert (= (and b!60596 (not c!7847)) b!60599))

(assert (= (or b!60597 b!60599) bm!4550))

(assert (=> b!60596 m!52989))

(assert (=> b!60596 m!52989))

(declare-fun m!53121 () Bool)

(assert (=> b!60596 m!53121))

(assert (=> bm!4550 m!52989))

(declare-fun m!53123 () Bool)

(assert (=> bm!4550 m!53123))

(assert (=> b!60598 m!52989))

(assert (=> b!60598 m!52989))

(assert (=> b!60598 m!53121))

(assert (=> b!60600 m!52989))

(assert (=> b!60600 m!52989))

(declare-fun m!53125 () Bool)

(assert (=> b!60600 m!53125))

(assert (=> b!60441 d!11883))

(declare-fun d!11885 () Bool)

(declare-fun res!33482 () Bool)

(declare-fun e!39869 () Bool)

(assert (=> d!11885 (=> (not res!33482) (not e!39869))))

(declare-fun simpleValid!43 (LongMapFixedSize!628) Bool)

(assert (=> d!11885 (= res!33482 (simpleValid!43 newMap!16))))

(assert (=> d!11885 (= (valid!266 newMap!16) e!39869)))

(declare-fun b!60607 () Bool)

(declare-fun res!33483 () Bool)

(assert (=> b!60607 (=> (not res!33483) (not e!39869))))

(declare-fun arrayCountValidKeys!0 (array!3729 (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!60607 (= res!33483 (= (arrayCountValidKeys!0 (_keys!3694 newMap!16) #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))) (_size!363 newMap!16)))))

(declare-fun b!60608 () Bool)

(declare-fun res!33484 () Bool)

(assert (=> b!60608 (=> (not res!33484) (not e!39869))))

(declare-fun arrayForallSeekEntryOrOpenFound!0 ((_ BitVec 32) array!3729 (_ BitVec 32)) Bool)

(assert (=> b!60608 (= res!33484 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3694 newMap!16) (mask!5962 newMap!16)))))

(declare-fun b!60609 () Bool)

(assert (=> b!60609 (= e!39869 (arrayNoDuplicates!0 (_keys!3694 newMap!16) #b00000000000000000000000000000000 Nil!1424))))

(assert (= (and d!11885 res!33482) b!60607))

(assert (= (and b!60607 res!33483) b!60608))

(assert (= (and b!60608 res!33484) b!60609))

(declare-fun m!53127 () Bool)

(assert (=> d!11885 m!53127))

(declare-fun m!53129 () Bool)

(assert (=> b!60607 m!53129))

(declare-fun m!53131 () Bool)

(assert (=> b!60608 m!53131))

(declare-fun m!53133 () Bool)

(assert (=> b!60609 m!53133))

(assert (=> b!60449 d!11885))

(declare-fun d!11887 () Bool)

(assert (=> d!11887 (= (validMask!0 (mask!5962 (v!2403 (underlying!230 thiss!992)))) (and (or (= (mask!5962 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000000000000111) (= (mask!5962 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000000000001111) (= (mask!5962 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000000000011111) (= (mask!5962 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000000000111111) (= (mask!5962 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000000001111111) (= (mask!5962 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000000011111111) (= (mask!5962 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000000111111111) (= (mask!5962 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000001111111111) (= (mask!5962 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000011111111111) (= (mask!5962 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000111111111111) (= (mask!5962 (v!2403 (underlying!230 thiss!992))) #b00000000000000000001111111111111) (= (mask!5962 (v!2403 (underlying!230 thiss!992))) #b00000000000000000011111111111111) (= (mask!5962 (v!2403 (underlying!230 thiss!992))) #b00000000000000000111111111111111) (= (mask!5962 (v!2403 (underlying!230 thiss!992))) #b00000000000000001111111111111111) (= (mask!5962 (v!2403 (underlying!230 thiss!992))) #b00000000000000011111111111111111) (= (mask!5962 (v!2403 (underlying!230 thiss!992))) #b00000000000000111111111111111111) (= (mask!5962 (v!2403 (underlying!230 thiss!992))) #b00000000000001111111111111111111) (= (mask!5962 (v!2403 (underlying!230 thiss!992))) #b00000000000011111111111111111111) (= (mask!5962 (v!2403 (underlying!230 thiss!992))) #b00000000000111111111111111111111) (= (mask!5962 (v!2403 (underlying!230 thiss!992))) #b00000000001111111111111111111111) (= (mask!5962 (v!2403 (underlying!230 thiss!992))) #b00000000011111111111111111111111) (= (mask!5962 (v!2403 (underlying!230 thiss!992))) #b00000000111111111111111111111111) (= (mask!5962 (v!2403 (underlying!230 thiss!992))) #b00000001111111111111111111111111) (= (mask!5962 (v!2403 (underlying!230 thiss!992))) #b00000011111111111111111111111111) (= (mask!5962 (v!2403 (underlying!230 thiss!992))) #b00000111111111111111111111111111) (= (mask!5962 (v!2403 (underlying!230 thiss!992))) #b00001111111111111111111111111111) (= (mask!5962 (v!2403 (underlying!230 thiss!992))) #b00011111111111111111111111111111) (= (mask!5962 (v!2403 (underlying!230 thiss!992))) #b00111111111111111111111111111111)) (bvsle (mask!5962 (v!2403 (underlying!230 thiss!992))) #b00111111111111111111111111111111)))))

(assert (=> b!60444 d!11887))

(declare-fun d!11889 () Bool)

(declare-fun e!39875 () Bool)

(assert (=> d!11889 e!39875))

(declare-fun res!33487 () Bool)

(assert (=> d!11889 (=> res!33487 e!39875)))

(declare-fun lt!24774 () Bool)

(assert (=> d!11889 (= res!33487 (not lt!24774))))

(declare-fun lt!24775 () Bool)

(assert (=> d!11889 (= lt!24774 lt!24775)))

(declare-fun lt!24772 () Unit!1613)

(declare-fun e!39874 () Unit!1613)

(assert (=> d!11889 (= lt!24772 e!39874)))

(declare-fun c!7850 () Bool)

(assert (=> d!11889 (= c!7850 lt!24775)))

(declare-fun containsKey!129 (List!1426 (_ BitVec 64)) Bool)

(assert (=> d!11889 (= lt!24775 (containsKey!129 (toList!689 lt!24706) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(assert (=> d!11889 (= (contains!682 lt!24706 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) lt!24774)))

(declare-fun b!60616 () Bool)

(declare-fun lt!24773 () Unit!1613)

(assert (=> b!60616 (= e!39874 lt!24773)))

(declare-fun lemmaContainsKeyImpliesGetValueByKeyDefined!77 (List!1426 (_ BitVec 64)) Unit!1613)

(assert (=> b!60616 (= lt!24773 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 lt!24706) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(declare-datatypes ((Option!132 0))(
  ( (Some!131 (v!2409 V!2857)) (None!130) )
))
(declare-fun isDefined!78 (Option!132) Bool)

(declare-fun getValueByKey!126 (List!1426 (_ BitVec 64)) Option!132)

(assert (=> b!60616 (isDefined!78 (getValueByKey!126 (toList!689 lt!24706) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(declare-fun b!60617 () Bool)

(declare-fun Unit!1619 () Unit!1613)

(assert (=> b!60617 (= e!39874 Unit!1619)))

(declare-fun b!60618 () Bool)

(assert (=> b!60618 (= e!39875 (isDefined!78 (getValueByKey!126 (toList!689 lt!24706) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355))))))

(assert (= (and d!11889 c!7850) b!60616))

(assert (= (and d!11889 (not c!7850)) b!60617))

(assert (= (and d!11889 (not res!33487)) b!60618))

(assert (=> d!11889 m!52989))

(declare-fun m!53135 () Bool)

(assert (=> d!11889 m!53135))

(assert (=> b!60616 m!52989))

(declare-fun m!53137 () Bool)

(assert (=> b!60616 m!53137))

(assert (=> b!60616 m!52989))

(declare-fun m!53139 () Bool)

(assert (=> b!60616 m!53139))

(assert (=> b!60616 m!53139))

(declare-fun m!53141 () Bool)

(assert (=> b!60616 m!53141))

(assert (=> b!60618 m!52989))

(assert (=> b!60618 m!53139))

(assert (=> b!60618 m!53139))

(assert (=> b!60618 m!53141))

(assert (=> b!60452 d!11889))

(declare-fun b!60699 () Bool)

(declare-fun res!33517 () Bool)

(declare-fun e!39922 () Bool)

(assert (=> b!60699 (=> (not res!33517) (not e!39922))))

(declare-datatypes ((SeekEntryResult!222 0))(
  ( (MissingZero!222 (index!3012 (_ BitVec 32))) (Found!222 (index!3013 (_ BitVec 32))) (Intermediate!222 (undefined!1034 Bool) (index!3014 (_ BitVec 32)) (x!10156 (_ BitVec 32))) (Undefined!222) (MissingVacant!222 (index!3015 (_ BitVec 32))) )
))
(declare-fun lt!24833 () SeekEntryResult!222)

(assert (=> b!60699 (= res!33517 (= (select (arr!1784 (_keys!3694 newMap!16)) (index!3012 lt!24833)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60700 () Bool)

(declare-fun res!33522 () Bool)

(declare-fun call!4612 () Bool)

(assert (=> b!60700 (= res!33522 call!4612)))

(declare-fun e!39920 () Bool)

(assert (=> b!60700 (=> (not res!33522) (not e!39920))))

(declare-fun b!60701 () Bool)

(declare-fun e!39924 () Bool)

(declare-fun call!4615 () Bool)

(assert (=> b!60701 (= e!39924 (not call!4615))))

(declare-fun b!60702 () Bool)

(declare-fun res!33528 () Bool)

(assert (=> b!60702 (= res!33528 (= (select (arr!1784 (_keys!3694 newMap!16)) (index!3015 lt!24833)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!39930 () Bool)

(assert (=> b!60702 (=> (not res!33528) (not e!39930))))

(declare-fun b!60703 () Bool)

(declare-fun e!39933 () Bool)

(assert (=> b!60703 (= e!39933 e!39930)))

(declare-fun res!33519 () Bool)

(declare-fun call!4618 () Bool)

(assert (=> b!60703 (= res!33519 call!4618)))

(assert (=> b!60703 (=> (not res!33519) (not e!39930))))

(declare-fun b!60704 () Bool)

(declare-fun lt!24846 () Unit!1613)

(declare-fun lt!24848 () Unit!1613)

(assert (=> b!60704 (= lt!24846 lt!24848)))

(declare-fun call!4613 () ListLongMap!1347)

(declare-fun call!4624 () ListLongMap!1347)

(assert (=> b!60704 (= call!4613 call!4624)))

(declare-fun lt!24853 () (_ BitVec 32))

(declare-fun lemmaChangeZeroKeyThenAddPairToListMap!16 (array!3729 array!3731 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2857 V!2857 V!2857 Int) Unit!1613)

(assert (=> b!60704 (= lt!24848 (lemmaChangeZeroKeyThenAddPairToListMap!16 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) lt!24853 (zeroValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1980 newMap!16) (defaultEntry!2066 newMap!16)))))

(assert (=> b!60704 (= lt!24853 (bvor (extraKeys!1949 newMap!16) #b00000000000000000000000000000001))))

(declare-fun e!39938 () tuple2!2024)

(assert (=> b!60704 (= e!39938 (tuple2!2025 true (LongMapFixedSize!629 (defaultEntry!2066 newMap!16) (mask!5962 newMap!16) (bvor (extraKeys!1949 newMap!16) #b00000000000000000000000000000001) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1980 newMap!16) (_size!363 newMap!16) (_keys!3694 newMap!16) (_values!2049 newMap!16) (_vacant!363 newMap!16))))))

(declare-fun e!39932 () Bool)

(declare-fun b!60705 () Bool)

(declare-fun lt!24850 () SeekEntryResult!222)

(assert (=> b!60705 (= e!39932 (= (select (arr!1784 (_keys!3694 newMap!16)) (index!3013 lt!24850)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(declare-fun b!60706 () Bool)

(declare-fun e!39923 () Bool)

(declare-fun e!39937 () Bool)

(assert (=> b!60706 (= e!39923 e!39937)))

(declare-fun res!33521 () Bool)

(declare-fun call!4607 () Bool)

(assert (=> b!60706 (= res!33521 call!4607)))

(assert (=> b!60706 (=> (not res!33521) (not e!39937))))

(declare-fun b!60707 () Bool)

(declare-fun c!7882 () Bool)

(declare-fun lt!24834 () SeekEntryResult!222)

(assert (=> b!60707 (= c!7882 ((_ is MissingVacant!222) lt!24834))))

(declare-fun e!39927 () Bool)

(assert (=> b!60707 (= e!39927 e!39923)))

(declare-fun b!60708 () Bool)

(declare-fun e!39929 () Bool)

(declare-fun call!4625 () ListLongMap!1347)

(declare-fun call!4602 () ListLongMap!1347)

(assert (=> b!60708 (= e!39929 (= call!4625 call!4602))))

(declare-fun b!60709 () Bool)

(declare-fun call!4623 () Bool)

(assert (=> b!60709 (= e!39922 (not call!4623))))

(declare-fun b!60710 () Bool)

(declare-fun lt!24847 () Unit!1613)

(declare-fun e!39919 () Unit!1613)

(assert (=> b!60710 (= lt!24847 e!39919)))

(declare-fun c!7881 () Bool)

(declare-fun call!4617 () Bool)

(assert (=> b!60710 (= c!7881 call!4617)))

(declare-fun e!39921 () tuple2!2024)

(assert (=> b!60710 (= e!39921 (tuple2!2025 false newMap!16))))

(declare-fun b!60711 () Bool)

(declare-fun e!39934 () tuple2!2024)

(declare-fun lt!24835 () tuple2!2024)

(assert (=> b!60711 (= e!39934 (tuple2!2025 (_1!1023 lt!24835) (_2!1023 lt!24835)))))

(declare-fun call!4610 () tuple2!2024)

(assert (=> b!60711 (= lt!24835 call!4610)))

(declare-fun b!60712 () Bool)

(declare-fun e!39935 () Unit!1613)

(declare-fun Unit!1620 () Unit!1613)

(assert (=> b!60712 (= e!39935 Unit!1620)))

(declare-fun lt!24851 () Unit!1613)

(declare-fun call!4603 () Unit!1613)

(assert (=> b!60712 (= lt!24851 call!4603)))

(declare-fun call!4619 () SeekEntryResult!222)

(assert (=> b!60712 (= lt!24834 call!4619)))

(declare-fun c!7889 () Bool)

(assert (=> b!60712 (= c!7889 ((_ is MissingZero!222) lt!24834))))

(assert (=> b!60712 e!39927))

(declare-fun lt!24854 () Unit!1613)

(assert (=> b!60712 (= lt!24854 lt!24851)))

(assert (=> b!60712 false))

(declare-fun lt!24843 () SeekEntryResult!222)

(declare-fun b!60713 () Bool)

(assert (=> b!60713 (= e!39920 (= (select (arr!1784 (_keys!3694 newMap!16)) (index!3013 lt!24843)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(declare-fun b!60714 () Bool)

(declare-fun c!7885 () Bool)

(declare-fun lt!24842 () SeekEntryResult!222)

(assert (=> b!60714 (= c!7885 ((_ is MissingVacant!222) lt!24842))))

(assert (=> b!60714 (= e!39921 e!39934)))

(declare-fun b!60715 () Bool)

(declare-fun res!33524 () Bool)

(assert (=> b!60715 (= res!33524 (= (select (arr!1784 (_keys!3694 newMap!16)) (index!3015 lt!24834)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!60715 (=> (not res!33524) (not e!39937))))

(declare-fun b!60716 () Bool)

(declare-fun e!39926 () Bool)

(declare-fun +!81 (ListLongMap!1347 tuple2!2022) ListLongMap!1347)

(assert (=> b!60716 (= e!39926 (= call!4625 (+!81 call!4602 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!60717 () Bool)

(declare-fun lt!24845 () Unit!1613)

(assert (=> b!60717 (= e!39919 lt!24845)))

(assert (=> b!60717 (= lt!24845 call!4603)))

(declare-fun call!4620 () SeekEntryResult!222)

(assert (=> b!60717 (= lt!24833 call!4620)))

(declare-fun c!7886 () Bool)

(assert (=> b!60717 (= c!7886 ((_ is MissingZero!222) lt!24833))))

(declare-fun e!39928 () Bool)

(assert (=> b!60717 e!39928))

(declare-fun b!60718 () Bool)

(declare-fun res!33516 () Bool)

(assert (=> b!60718 (=> (not res!33516) (not e!39924))))

(assert (=> b!60718 (= res!33516 call!4607)))

(assert (=> b!60718 (= e!39927 e!39924)))

(declare-fun b!60719 () Bool)

(declare-fun e!39918 () tuple2!2024)

(assert (=> b!60719 (= e!39934 e!39918)))

(declare-fun c!7888 () Bool)

(assert (=> b!60719 (= c!7888 ((_ is MissingZero!222) lt!24842))))

(declare-fun b!60720 () Bool)

(declare-fun e!39936 () tuple2!2024)

(assert (=> b!60720 (= e!39936 e!39938)))

(declare-fun c!7877 () Bool)

(assert (=> b!60720 (= c!7877 (= (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun call!4621 () Bool)

(declare-fun c!7884 () Bool)

(declare-fun c!7880 () Bool)

(declare-fun bm!4599 () Bool)

(declare-fun inRange!0 ((_ BitVec 32) (_ BitVec 32)) Bool)

(assert (=> bm!4599 (= call!4621 (inRange!0 (ite c!7884 (ite c!7881 (index!3013 lt!24850) (ite c!7886 (index!3012 lt!24833) (index!3015 lt!24833))) (ite c!7880 (index!3013 lt!24843) (ite c!7889 (index!3012 lt!24834) (index!3015 lt!24834)))) (mask!5962 newMap!16)))))

(declare-fun bm!4600 () Bool)

(declare-fun call!4609 () ListLongMap!1347)

(assert (=> bm!4600 (= call!4624 call!4609)))

(declare-fun b!60721 () Bool)

(declare-fun e!39931 () ListLongMap!1347)

(declare-fun call!4608 () ListLongMap!1347)

(assert (=> b!60721 (= e!39931 call!4608)))

(declare-fun b!60722 () Bool)

(declare-fun lt!24838 () Unit!1613)

(assert (=> b!60722 (= e!39935 lt!24838)))

(declare-fun call!4605 () Unit!1613)

(assert (=> b!60722 (= lt!24838 call!4605)))

(assert (=> b!60722 (= lt!24843 call!4619)))

(declare-fun res!33526 () Bool)

(assert (=> b!60722 (= res!33526 ((_ is Found!222) lt!24843))))

(assert (=> b!60722 (=> (not res!33526) (not e!39920))))

(assert (=> b!60722 e!39920))

(declare-fun bm!4601 () Bool)

(declare-fun call!4606 () SeekEntryResult!222)

(assert (=> bm!4601 (= call!4619 call!4606)))

(declare-fun bm!4602 () Bool)

(declare-fun call!4611 () Bool)

(assert (=> bm!4602 (= call!4611 call!4621)))

(declare-fun b!60723 () Bool)

(declare-fun Unit!1621 () Unit!1613)

(assert (=> b!60723 (= e!39919 Unit!1621)))

(declare-fun lt!24855 () Unit!1613)

(assert (=> b!60723 (= lt!24855 call!4605)))

(assert (=> b!60723 (= lt!24850 call!4620)))

(declare-fun res!33520 () Bool)

(assert (=> b!60723 (= res!33520 ((_ is Found!222) lt!24850))))

(assert (=> b!60723 (=> (not res!33520) (not e!39932))))

(assert (=> b!60723 e!39932))

(declare-fun lt!24836 () Unit!1613)

(assert (=> b!60723 (= lt!24836 lt!24855)))

(assert (=> b!60723 false))

(declare-fun bm!4603 () Bool)

(declare-fun lt!24831 () (_ BitVec 32))

(declare-fun call!4614 () ListLongMap!1347)

(declare-fun lt!24849 () array!3731)

(declare-fun c!7887 () Bool)

(assert (=> bm!4603 (= call!4614 (getCurrentListMap!390 (_keys!3694 newMap!16) (ite c!7887 (_values!2049 newMap!16) lt!24849) (mask!5962 newMap!16) (ite c!7887 (ite c!7877 (extraKeys!1949 newMap!16) lt!24831) (extraKeys!1949 newMap!16)) (zeroValue!1980 newMap!16) (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun bm!4604 () Bool)

(assert (=> bm!4604 (= call!4609 (getCurrentListMap!390 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (ite (and c!7887 c!7877) lt!24853 (extraKeys!1949 newMap!16)) (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16)) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun b!60724 () Bool)

(declare-fun lt!24840 () tuple2!2024)

(assert (=> b!60724 (= lt!24840 call!4610)))

(assert (=> b!60724 (= e!39918 (tuple2!2025 (_1!1023 lt!24840) (_2!1023 lt!24840)))))

(declare-fun bm!4605 () Bool)

(declare-fun call!4616 () ListLongMap!1347)

(assert (=> bm!4605 (= call!4613 call!4616)))

(declare-fun b!60725 () Bool)

(declare-fun res!33525 () Bool)

(assert (=> b!60725 (=> (not res!33525) (not e!39924))))

(assert (=> b!60725 (= res!33525 (= (select (arr!1784 (_keys!3694 newMap!16)) (index!3012 lt!24834)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun bm!4606 () Bool)

(assert (=> bm!4606 (= call!4608 (getCurrentListMap!390 (_keys!3694 newMap!16) (ite c!7884 (_values!2049 newMap!16) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (index!3013 lt!24842) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16)))) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun bm!4607 () Bool)

(declare-fun seekEntryOrOpen!0 ((_ BitVec 64) array!3729 (_ BitVec 32)) SeekEntryResult!222)

(assert (=> bm!4607 (= call!4606 (seekEntryOrOpen!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (_keys!3694 newMap!16) (mask!5962 newMap!16)))))

(declare-fun bm!4608 () Bool)

(assert (=> bm!4608 (= call!4612 call!4621)))

(declare-fun bm!4609 () Bool)

(declare-fun call!4604 () Bool)

(assert (=> bm!4609 (= call!4615 call!4604)))

(declare-fun bm!4610 () Bool)

(assert (=> bm!4610 (= call!4620 call!4606)))

(declare-fun bm!4611 () Bool)

(declare-fun lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!16 (array!3729 array!3731 (_ BitVec 32) (_ BitVec 32) V!2857 V!2857 (_ BitVec 64) Int) Unit!1613)

(assert (=> bm!4611 (= call!4603 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!16 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (defaultEntry!2066 newMap!16)))))

(declare-fun bm!4612 () Bool)

(assert (=> bm!4612 (= call!4623 call!4604)))

(declare-fun b!60726 () Bool)

(assert (=> b!60726 (= e!39930 (not call!4623))))

(declare-fun bm!4613 () Bool)

(declare-fun updateHelperNewKey!16 (LongMapFixedSize!628 (_ BitVec 64) V!2857 (_ BitVec 32)) tuple2!2024)

(assert (=> bm!4613 (= call!4610 (updateHelperNewKey!16 newMap!16 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842))))))

(declare-fun b!60727 () Bool)

(declare-fun e!39925 () Bool)

(assert (=> b!60727 (= e!39925 e!39929)))

(declare-fun c!7883 () Bool)

(declare-fun lt!24841 () tuple2!2024)

(assert (=> b!60727 (= c!7883 (_1!1023 lt!24841))))

(declare-fun b!60728 () Bool)

(assert (=> b!60728 (= e!39929 e!39926)))

(declare-fun res!33518 () Bool)

(assert (=> b!60728 (= res!33518 (contains!682 call!4625 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(assert (=> b!60728 (=> (not res!33518) (not e!39926))))

(declare-fun bm!4614 () Bool)

(assert (=> bm!4614 (= call!4602 (map!1114 newMap!16))))

(declare-fun bm!4615 () Bool)

(assert (=> bm!4615 (= call!4604 (arrayContainsKey!0 (_keys!3694 newMap!16) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun bm!4616 () Bool)

(declare-fun call!4622 () ListLongMap!1347)

(assert (=> bm!4616 (= call!4622 call!4614)))

(declare-fun b!60729 () Bool)

(declare-fun res!33527 () Bool)

(assert (=> b!60729 (=> (not res!33527) (not e!39922))))

(assert (=> b!60729 (= res!33527 call!4618)))

(assert (=> b!60729 (= e!39928 e!39922)))

(declare-fun bm!4617 () Bool)

(assert (=> bm!4617 (= call!4625 (map!1114 (_2!1023 lt!24841)))))

(declare-fun bm!4618 () Bool)

(assert (=> bm!4618 (= call!4618 call!4611)))

(declare-fun d!11891 () Bool)

(assert (=> d!11891 e!39925))

(declare-fun res!33523 () Bool)

(assert (=> d!11891 (=> (not res!33523) (not e!39925))))

(assert (=> d!11891 (= res!33523 (valid!266 (_2!1023 lt!24841)))))

(assert (=> d!11891 (= lt!24841 e!39936)))

(assert (=> d!11891 (= c!7887 (= (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (bvneg (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355))))))

(assert (=> d!11891 (valid!266 newMap!16)))

(assert (=> d!11891 (= (update!88 newMap!16 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) lt!24841)))

(declare-fun b!60730 () Bool)

(assert (=> b!60730 (= e!39936 e!39921)))

(assert (=> b!60730 (= lt!24842 (seekEntryOrOpen!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (_keys!3694 newMap!16) (mask!5962 newMap!16)))))

(assert (=> b!60730 (= c!7884 ((_ is Undefined!222) lt!24842))))

(declare-fun b!60731 () Bool)

(assert (=> b!60731 (= e!39923 ((_ is Undefined!222) lt!24834))))

(declare-fun bm!4619 () Bool)

(declare-fun c!7879 () Bool)

(assert (=> bm!4619 (= c!7879 c!7884)))

(assert (=> bm!4619 (= call!4617 (contains!682 e!39931 (ite c!7884 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (select (arr!1784 (_keys!3694 newMap!16)) (index!3013 lt!24842)))))))

(declare-fun b!60732 () Bool)

(assert (=> b!60732 (= e!39937 (not call!4615))))

(declare-fun bm!4620 () Bool)

(assert (=> bm!4620 (= call!4616 (+!81 (ite c!7887 (ite c!7877 call!4622 call!4624) call!4609) (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!60733 () Bool)

(declare-fun res!33529 () Bool)

(assert (=> b!60733 (= res!33529 call!4611)))

(assert (=> b!60733 (=> (not res!33529) (not e!39932))))

(declare-fun b!60734 () Bool)

(assert (=> b!60734 (= e!39933 ((_ is Undefined!222) lt!24833))))

(declare-fun b!60735 () Bool)

(declare-fun lt!24852 () Unit!1613)

(declare-fun lt!24830 () Unit!1613)

(assert (=> b!60735 (= lt!24852 lt!24830)))

(assert (=> b!60735 (= call!4613 call!4622)))

(declare-fun lemmaChangeLongMinValueKeyThenAddPairToListMap!16 (array!3729 array!3731 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2857 V!2857 V!2857 Int) Unit!1613)

(assert (=> b!60735 (= lt!24830 (lemmaChangeLongMinValueKeyThenAddPairToListMap!16 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) lt!24831 (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2066 newMap!16)))))

(assert (=> b!60735 (= lt!24831 (bvor (extraKeys!1949 newMap!16) #b00000000000000000000000000000010))))

(assert (=> b!60735 (= e!39938 (tuple2!2025 true (LongMapFixedSize!629 (defaultEntry!2066 newMap!16) (mask!5962 newMap!16) (bvor (extraKeys!1949 newMap!16) #b00000000000000000000000000000010) (zeroValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (_size!363 newMap!16) (_keys!3694 newMap!16) (_values!2049 newMap!16) (_vacant!363 newMap!16))))))

(declare-fun b!60736 () Bool)

(declare-fun lt!24837 () Unit!1613)

(declare-fun lt!24832 () Unit!1613)

(assert (=> b!60736 (= lt!24837 lt!24832)))

(assert (=> b!60736 call!4617))

(declare-fun lemmaValidKeyInArrayIsInListMap!76 (array!3729 array!3731 (_ BitVec 32) (_ BitVec 32) V!2857 V!2857 (_ BitVec 32) Int) Unit!1613)

(assert (=> b!60736 (= lt!24832 (lemmaValidKeyInArrayIsInListMap!76 (_keys!3694 newMap!16) lt!24849 (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) (index!3013 lt!24842) (defaultEntry!2066 newMap!16)))))

(assert (=> b!60736 (= lt!24849 (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (index!3013 lt!24842) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16))))))

(declare-fun lt!24839 () Unit!1613)

(declare-fun lt!24844 () Unit!1613)

(assert (=> b!60736 (= lt!24839 lt!24844)))

(assert (=> b!60736 (= call!4616 call!4608)))

(declare-fun lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!16 (array!3729 array!3731 (_ BitVec 32) (_ BitVec 32) V!2857 V!2857 (_ BitVec 32) (_ BitVec 64) V!2857 Int) Unit!1613)

(assert (=> b!60736 (= lt!24844 (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!16 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) (index!3013 lt!24842) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2066 newMap!16)))))

(declare-fun lt!24856 () Unit!1613)

(assert (=> b!60736 (= lt!24856 e!39935)))

(assert (=> b!60736 (= c!7880 (contains!682 call!4609 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(assert (=> b!60736 (= e!39918 (tuple2!2025 true (LongMapFixedSize!629 (defaultEntry!2066 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) (_size!363 newMap!16) (_keys!3694 newMap!16) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (index!3013 lt!24842) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16))) (_vacant!363 newMap!16))))))

(declare-fun b!60737 () Bool)

(declare-fun c!7878 () Bool)

(assert (=> b!60737 (= c!7878 ((_ is MissingVacant!222) lt!24833))))

(assert (=> b!60737 (= e!39928 e!39933)))

(declare-fun bm!4621 () Bool)

(declare-fun lemmaInListMapThenSeekEntryOrOpenFindsIt!16 (array!3729 array!3731 (_ BitVec 32) (_ BitVec 32) V!2857 V!2857 (_ BitVec 64) Int) Unit!1613)

(assert (=> bm!4621 (= call!4605 (lemmaInListMapThenSeekEntryOrOpenFindsIt!16 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (defaultEntry!2066 newMap!16)))))

(declare-fun bm!4622 () Bool)

(assert (=> bm!4622 (= call!4607 call!4612)))

(declare-fun b!60738 () Bool)

(assert (=> b!60738 (= e!39931 call!4614)))

(assert (= (and d!11891 c!7887) b!60720))

(assert (= (and d!11891 (not c!7887)) b!60730))

(assert (= (and b!60720 c!7877) b!60704))

(assert (= (and b!60720 (not c!7877)) b!60735))

(assert (= (or b!60704 b!60735) bm!4616))

(assert (= (or b!60704 b!60735) bm!4600))

(assert (= (or b!60704 b!60735) bm!4605))

(assert (= (and b!60730 c!7884) b!60710))

(assert (= (and b!60730 (not c!7884)) b!60714))

(assert (= (and b!60710 c!7881) b!60723))

(assert (= (and b!60710 (not c!7881)) b!60717))

(assert (= (and b!60723 res!33520) b!60733))

(assert (= (and b!60733 res!33529) b!60705))

(assert (= (and b!60717 c!7886) b!60729))

(assert (= (and b!60717 (not c!7886)) b!60737))

(assert (= (and b!60729 res!33527) b!60699))

(assert (= (and b!60699 res!33517) b!60709))

(assert (= (and b!60737 c!7878) b!60703))

(assert (= (and b!60737 (not c!7878)) b!60734))

(assert (= (and b!60703 res!33519) b!60702))

(assert (= (and b!60702 res!33528) b!60726))

(assert (= (or b!60729 b!60703) bm!4618))

(assert (= (or b!60709 b!60726) bm!4612))

(assert (= (or b!60733 bm!4618) bm!4602))

(assert (= (or b!60723 b!60717) bm!4610))

(assert (= (and b!60714 c!7885) b!60711))

(assert (= (and b!60714 (not c!7885)) b!60719))

(assert (= (and b!60719 c!7888) b!60724))

(assert (= (and b!60719 (not c!7888)) b!60736))

(assert (= (and b!60736 c!7880) b!60722))

(assert (= (and b!60736 (not c!7880)) b!60712))

(assert (= (and b!60722 res!33526) b!60700))

(assert (= (and b!60700 res!33522) b!60713))

(assert (= (and b!60712 c!7889) b!60718))

(assert (= (and b!60712 (not c!7889)) b!60707))

(assert (= (and b!60718 res!33516) b!60725))

(assert (= (and b!60725 res!33525) b!60701))

(assert (= (and b!60707 c!7882) b!60706))

(assert (= (and b!60707 (not c!7882)) b!60731))

(assert (= (and b!60706 res!33521) b!60715))

(assert (= (and b!60715 res!33524) b!60732))

(assert (= (or b!60718 b!60706) bm!4622))

(assert (= (or b!60701 b!60732) bm!4609))

(assert (= (or b!60700 bm!4622) bm!4608))

(assert (= (or b!60722 b!60712) bm!4601))

(assert (= (or b!60711 b!60724) bm!4613))

(assert (= (or b!60710 b!60736) bm!4606))

(assert (= (or bm!4610 bm!4601) bm!4607))

(assert (= (or bm!4602 bm!4608) bm!4599))

(assert (= (or bm!4612 bm!4609) bm!4615))

(assert (= (or b!60717 b!60712) bm!4611))

(assert (= (or b!60723 b!60722) bm!4621))

(assert (= (or b!60710 b!60736) bm!4619))

(assert (= (and bm!4619 c!7879) b!60721))

(assert (= (and bm!4619 (not c!7879)) b!60738))

(assert (= (or bm!4616 b!60738) bm!4603))

(assert (= (or bm!4600 b!60736) bm!4604))

(assert (= (or bm!4605 b!60736) bm!4620))

(assert (= (and d!11891 res!33523) b!60727))

(assert (= (and b!60727 c!7883) b!60728))

(assert (= (and b!60727 (not c!7883)) b!60708))

(assert (= (and b!60728 res!33518) b!60716))

(assert (= (or b!60716 b!60708) bm!4614))

(assert (= (or b!60728 b!60716 b!60708) bm!4617))

(declare-fun m!53143 () Bool)

(assert (=> b!60702 m!53143))

(assert (=> b!60704 m!53013))

(declare-fun m!53145 () Bool)

(assert (=> b!60704 m!53145))

(assert (=> b!60730 m!52989))

(declare-fun m!53147 () Bool)

(assert (=> b!60730 m!53147))

(assert (=> bm!4615 m!52989))

(declare-fun m!53149 () Bool)

(assert (=> bm!4615 m!53149))

(declare-fun m!53151 () Bool)

(assert (=> b!60713 m!53151))

(assert (=> b!60728 m!52989))

(declare-fun m!53153 () Bool)

(assert (=> b!60728 m!53153))

(assert (=> bm!4611 m!52989))

(declare-fun m!53155 () Bool)

(assert (=> bm!4611 m!53155))

(declare-fun m!53157 () Bool)

(assert (=> d!11891 m!53157))

(assert (=> d!11891 m!52979))

(declare-fun m!53159 () Bool)

(assert (=> b!60699 m!53159))

(declare-fun m!53161 () Bool)

(assert (=> bm!4620 m!53161))

(declare-fun m!53163 () Bool)

(assert (=> b!60736 m!53163))

(declare-fun m!53165 () Bool)

(assert (=> b!60736 m!53165))

(assert (=> b!60736 m!52989))

(assert (=> b!60736 m!53013))

(declare-fun m!53167 () Bool)

(assert (=> b!60736 m!53167))

(assert (=> b!60736 m!52989))

(declare-fun m!53169 () Bool)

(assert (=> b!60736 m!53169))

(declare-fun m!53171 () Bool)

(assert (=> b!60705 m!53171))

(assert (=> bm!4606 m!53165))

(declare-fun m!53173 () Bool)

(assert (=> bm!4606 m!53173))

(assert (=> b!60735 m!53013))

(declare-fun m!53175 () Bool)

(assert (=> b!60735 m!53175))

(declare-fun m!53177 () Bool)

(assert (=> bm!4599 m!53177))

(assert (=> bm!4613 m!52989))

(assert (=> bm!4613 m!53013))

(declare-fun m!53179 () Bool)

(assert (=> bm!4613 m!53179))

(assert (=> bm!4621 m!52989))

(declare-fun m!53181 () Bool)

(assert (=> bm!4621 m!53181))

(declare-fun m!53183 () Bool)

(assert (=> b!60715 m!53183))

(declare-fun m!53185 () Bool)

(assert (=> bm!4619 m!53185))

(declare-fun m!53187 () Bool)

(assert (=> bm!4619 m!53187))

(declare-fun m!53189 () Bool)

(assert (=> bm!4617 m!53189))

(declare-fun m!53191 () Bool)

(assert (=> b!60725 m!53191))

(declare-fun m!53193 () Bool)

(assert (=> bm!4604 m!53193))

(declare-fun m!53195 () Bool)

(assert (=> b!60716 m!53195))

(assert (=> bm!4607 m!52989))

(assert (=> bm!4607 m!53147))

(declare-fun m!53197 () Bool)

(assert (=> bm!4603 m!53197))

(assert (=> bm!4614 m!53001))

(assert (=> b!60452 d!11891))

(declare-fun d!11893 () Bool)

(declare-fun c!7892 () Bool)

(assert (=> d!11893 (= c!7892 ((_ is ValueCellFull!860) (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(declare-fun e!39941 () V!2857)

(assert (=> d!11893 (= (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!39941)))

(declare-fun b!60743 () Bool)

(declare-fun get!1083 (ValueCell!860 V!2857) V!2857)

(assert (=> b!60743 (= e!39941 (get!1083 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!60744 () Bool)

(declare-fun get!1084 (ValueCell!860 V!2857) V!2857)

(assert (=> b!60744 (= e!39941 (get!1084 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11893 c!7892) b!60743))

(assert (= (and d!11893 (not c!7892)) b!60744))

(assert (=> b!60743 m!53009))

(assert (=> b!60743 m!53011))

(declare-fun m!53199 () Bool)

(assert (=> b!60743 m!53199))

(assert (=> b!60744 m!53009))

(assert (=> b!60744 m!53011))

(declare-fun m!53201 () Bool)

(assert (=> b!60744 m!53201))

(assert (=> b!60452 d!11893))

(declare-fun d!11895 () Bool)

(assert (=> d!11895 (= (array_inv!1093 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvsge (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!60443 d!11895))

(declare-fun d!11897 () Bool)

(assert (=> d!11897 (= (array_inv!1094 (_values!2049 (v!2403 (underlying!230 thiss!992)))) (bvsge (size!2016 (_values!2049 (v!2403 (underlying!230 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!60443 d!11897))

(declare-fun d!11899 () Bool)

(assert (=> d!11899 (= (array_inv!1093 (_keys!3694 newMap!16)) (bvsge (size!2015 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!60445 d!11899))

(declare-fun d!11901 () Bool)

(assert (=> d!11901 (= (array_inv!1094 (_values!2049 newMap!16)) (bvsge (size!2016 (_values!2049 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!60445 d!11901))

(declare-fun d!11903 () Bool)

(assert (=> d!11903 (= (map!1114 newMap!16) (getCurrentListMap!390 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun bs!2631 () Bool)

(assert (= bs!2631 d!11903))

(declare-fun m!53203 () Bool)

(assert (=> bs!2631 m!53203))

(assert (=> b!60436 d!11903))

(declare-fun b!60787 () Bool)

(declare-fun res!33550 () Bool)

(declare-fun e!39971 () Bool)

(assert (=> b!60787 (=> (not res!33550) (not e!39971))))

(declare-fun e!39970 () Bool)

(assert (=> b!60787 (= res!33550 e!39970)))

(declare-fun res!33554 () Bool)

(assert (=> b!60787 (=> res!33554 e!39970)))

(declare-fun e!39975 () Bool)

(assert (=> b!60787 (= res!33554 (not e!39975))))

(declare-fun res!33548 () Bool)

(assert (=> b!60787 (=> (not res!33548) (not e!39975))))

(assert (=> b!60787 (= res!33548 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992))))))))

(declare-fun b!60788 () Bool)

(declare-fun e!39976 () Bool)

(declare-fun call!4645 () Bool)

(assert (=> b!60788 (= e!39976 (not call!4645))))

(declare-fun bm!4637 () Bool)

(declare-fun lt!24917 () ListLongMap!1347)

(assert (=> bm!4637 (= call!4645 (contains!682 lt!24917 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60789 () Bool)

(declare-fun e!39978 () Unit!1613)

(declare-fun Unit!1622 () Unit!1613)

(assert (=> b!60789 (= e!39978 Unit!1622)))

(declare-fun b!60790 () Bool)

(declare-fun e!39968 () Bool)

(assert (=> b!60790 (= e!39976 e!39968)))

(declare-fun res!33553 () Bool)

(assert (=> b!60790 (= res!33553 call!4645)))

(assert (=> b!60790 (=> (not res!33553) (not e!39968))))

(declare-fun b!60791 () Bool)

(declare-fun e!39974 () Bool)

(assert (=> b!60791 (= e!39974 (validKeyInArray!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!60792 () Bool)

(declare-fun e!39979 () ListLongMap!1347)

(declare-fun call!4642 () ListLongMap!1347)

(assert (=> b!60792 (= e!39979 call!4642)))

(declare-fun call!4641 () ListLongMap!1347)

(declare-fun c!7910 () Bool)

(declare-fun bm!4638 () Bool)

(declare-fun c!7907 () Bool)

(declare-fun call!4644 () ListLongMap!1347)

(declare-fun call!4646 () ListLongMap!1347)

(assert (=> bm!4638 (= call!4646 (+!81 (ite c!7910 call!4641 (ite c!7907 call!4644 call!4642)) (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun b!60794 () Bool)

(declare-fun call!4643 () ListLongMap!1347)

(assert (=> b!60794 (= e!39979 call!4643)))

(declare-fun b!60795 () Bool)

(declare-fun apply!67 (ListLongMap!1347 (_ BitVec 64)) V!2857)

(assert (=> b!60795 (= e!39968 (= (apply!67 lt!24917 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))

(declare-fun b!60796 () Bool)

(declare-fun e!39977 () Bool)

(assert (=> b!60796 (= e!39970 e!39977)))

(declare-fun res!33551 () Bool)

(assert (=> b!60796 (=> (not res!33551) (not e!39977))))

(assert (=> b!60796 (= res!33551 (contains!682 lt!24917 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!60796 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992))))))))

(declare-fun b!60797 () Bool)

(assert (=> b!60797 (= e!39971 e!39976)))

(declare-fun c!7908 () Bool)

(assert (=> b!60797 (= c!7908 (not (= (bvand (extraKeys!1949 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4639 () Bool)

(assert (=> bm!4639 (= call!4643 call!4646)))

(declare-fun b!60798 () Bool)

(declare-fun e!39973 () ListLongMap!1347)

(assert (=> b!60798 (= e!39973 call!4643)))

(declare-fun bm!4640 () Bool)

(declare-fun call!4640 () Bool)

(assert (=> bm!4640 (= call!4640 (contains!682 lt!24917 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60799 () Bool)

(declare-fun e!39969 () ListLongMap!1347)

(assert (=> b!60799 (= e!39969 e!39973)))

(assert (=> b!60799 (= c!7907 (and (not (= (bvand (extraKeys!1949 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1949 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!60800 () Bool)

(declare-fun e!39972 () Bool)

(assert (=> b!60800 (= e!39972 (= (apply!67 lt!24917 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))

(declare-fun b!60801 () Bool)

(declare-fun e!39980 () Bool)

(assert (=> b!60801 (= e!39980 e!39972)))

(declare-fun res!33549 () Bool)

(assert (=> b!60801 (= res!33549 call!4640)))

(assert (=> b!60801 (=> (not res!33549) (not e!39972))))

(declare-fun bm!4641 () Bool)

(assert (=> bm!4641 (= call!4642 call!4644)))

(declare-fun b!60802 () Bool)

(assert (=> b!60802 (= e!39975 (validKeyInArray!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!60803 () Bool)

(assert (=> b!60803 (= e!39969 (+!81 call!4646 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))

(declare-fun bm!4642 () Bool)

(declare-fun getCurrentListMapNoExtraKeys!45 (array!3729 array!3731 (_ BitVec 32) (_ BitVec 32) V!2857 V!2857 (_ BitVec 32) Int) ListLongMap!1347)

(assert (=> bm!4642 (= call!4641 (getCurrentListMapNoExtraKeys!45 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (_values!2049 (v!2403 (underlying!230 thiss!992))) (mask!5962 (v!2403 (underlying!230 thiss!992))) (extraKeys!1949 (v!2403 (underlying!230 thiss!992))) (zeroValue!1980 (v!2403 (underlying!230 thiss!992))) (minValue!1980 (v!2403 (underlying!230 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2066 (v!2403 (underlying!230 thiss!992)))))))

(declare-fun bm!4643 () Bool)

(assert (=> bm!4643 (= call!4644 call!4641)))

(declare-fun b!60804 () Bool)

(declare-fun c!7909 () Bool)

(assert (=> b!60804 (= c!7909 (and (not (= (bvand (extraKeys!1949 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1949 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!60804 (= e!39973 e!39979)))

(declare-fun b!60805 () Bool)

(assert (=> b!60805 (= e!39977 (= (apply!67 lt!24917 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!60805 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2016 (_values!2049 (v!2403 (underlying!230 thiss!992))))))))

(assert (=> b!60805 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992))))))))

(declare-fun d!11905 () Bool)

(assert (=> d!11905 e!39971))

(declare-fun res!33556 () Bool)

(assert (=> d!11905 (=> (not res!33556) (not e!39971))))

(assert (=> d!11905 (= res!33556 (or (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992))))) (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992))))))))))

(declare-fun lt!24903 () ListLongMap!1347)

(assert (=> d!11905 (= lt!24917 lt!24903)))

(declare-fun lt!24919 () Unit!1613)

(assert (=> d!11905 (= lt!24919 e!39978)))

(declare-fun c!7906 () Bool)

(assert (=> d!11905 (= c!7906 e!39974)))

(declare-fun res!33552 () Bool)

(assert (=> d!11905 (=> (not res!33552) (not e!39974))))

(assert (=> d!11905 (= res!33552 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992))))))))

(assert (=> d!11905 (= lt!24903 e!39969)))

(assert (=> d!11905 (= c!7910 (and (not (= (bvand (extraKeys!1949 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1949 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11905 (validMask!0 (mask!5962 (v!2403 (underlying!230 thiss!992))))))

(assert (=> d!11905 (= (getCurrentListMap!390 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (_values!2049 (v!2403 (underlying!230 thiss!992))) (mask!5962 (v!2403 (underlying!230 thiss!992))) (extraKeys!1949 (v!2403 (underlying!230 thiss!992))) (zeroValue!1980 (v!2403 (underlying!230 thiss!992))) (minValue!1980 (v!2403 (underlying!230 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2066 (v!2403 (underlying!230 thiss!992)))) lt!24917)))

(declare-fun b!60793 () Bool)

(assert (=> b!60793 (= e!39980 (not call!4640))))

(declare-fun b!60806 () Bool)

(declare-fun lt!24909 () Unit!1613)

(assert (=> b!60806 (= e!39978 lt!24909)))

(declare-fun lt!24911 () ListLongMap!1347)

(assert (=> b!60806 (= lt!24911 (getCurrentListMapNoExtraKeys!45 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (_values!2049 (v!2403 (underlying!230 thiss!992))) (mask!5962 (v!2403 (underlying!230 thiss!992))) (extraKeys!1949 (v!2403 (underlying!230 thiss!992))) (zeroValue!1980 (v!2403 (underlying!230 thiss!992))) (minValue!1980 (v!2403 (underlying!230 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2066 (v!2403 (underlying!230 thiss!992)))))))

(declare-fun lt!24914 () (_ BitVec 64))

(assert (=> b!60806 (= lt!24914 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24908 () (_ BitVec 64))

(assert (=> b!60806 (= lt!24908 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!24901 () Unit!1613)

(declare-fun addStillContains!43 (ListLongMap!1347 (_ BitVec 64) V!2857 (_ BitVec 64)) Unit!1613)

(assert (=> b!60806 (= lt!24901 (addStillContains!43 lt!24911 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))) lt!24908))))

(assert (=> b!60806 (contains!682 (+!81 lt!24911 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))) lt!24908)))

(declare-fun lt!24920 () Unit!1613)

(assert (=> b!60806 (= lt!24920 lt!24901)))

(declare-fun lt!24912 () ListLongMap!1347)

(assert (=> b!60806 (= lt!24912 (getCurrentListMapNoExtraKeys!45 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (_values!2049 (v!2403 (underlying!230 thiss!992))) (mask!5962 (v!2403 (underlying!230 thiss!992))) (extraKeys!1949 (v!2403 (underlying!230 thiss!992))) (zeroValue!1980 (v!2403 (underlying!230 thiss!992))) (minValue!1980 (v!2403 (underlying!230 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2066 (v!2403 (underlying!230 thiss!992)))))))

(declare-fun lt!24902 () (_ BitVec 64))

(assert (=> b!60806 (= lt!24902 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24922 () (_ BitVec 64))

(assert (=> b!60806 (= lt!24922 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!24913 () Unit!1613)

(declare-fun addApplyDifferent!43 (ListLongMap!1347 (_ BitVec 64) V!2857 (_ BitVec 64)) Unit!1613)

(assert (=> b!60806 (= lt!24913 (addApplyDifferent!43 lt!24912 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992))) lt!24922))))

(assert (=> b!60806 (= (apply!67 (+!81 lt!24912 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) lt!24922) (apply!67 lt!24912 lt!24922))))

(declare-fun lt!24907 () Unit!1613)

(assert (=> b!60806 (= lt!24907 lt!24913)))

(declare-fun lt!24918 () ListLongMap!1347)

(assert (=> b!60806 (= lt!24918 (getCurrentListMapNoExtraKeys!45 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (_values!2049 (v!2403 (underlying!230 thiss!992))) (mask!5962 (v!2403 (underlying!230 thiss!992))) (extraKeys!1949 (v!2403 (underlying!230 thiss!992))) (zeroValue!1980 (v!2403 (underlying!230 thiss!992))) (minValue!1980 (v!2403 (underlying!230 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2066 (v!2403 (underlying!230 thiss!992)))))))

(declare-fun lt!24905 () (_ BitVec 64))

(assert (=> b!60806 (= lt!24905 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24906 () (_ BitVec 64))

(assert (=> b!60806 (= lt!24906 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!24921 () Unit!1613)

(assert (=> b!60806 (= lt!24921 (addApplyDifferent!43 lt!24918 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))) lt!24906))))

(assert (=> b!60806 (= (apply!67 (+!81 lt!24918 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))) lt!24906) (apply!67 lt!24918 lt!24906))))

(declare-fun lt!24916 () Unit!1613)

(assert (=> b!60806 (= lt!24916 lt!24921)))

(declare-fun lt!24915 () ListLongMap!1347)

(assert (=> b!60806 (= lt!24915 (getCurrentListMapNoExtraKeys!45 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (_values!2049 (v!2403 (underlying!230 thiss!992))) (mask!5962 (v!2403 (underlying!230 thiss!992))) (extraKeys!1949 (v!2403 (underlying!230 thiss!992))) (zeroValue!1980 (v!2403 (underlying!230 thiss!992))) (minValue!1980 (v!2403 (underlying!230 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2066 (v!2403 (underlying!230 thiss!992)))))))

(declare-fun lt!24904 () (_ BitVec 64))

(assert (=> b!60806 (= lt!24904 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!24910 () (_ BitVec 64))

(assert (=> b!60806 (= lt!24910 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!60806 (= lt!24909 (addApplyDifferent!43 lt!24915 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992))) lt!24910))))

(assert (=> b!60806 (= (apply!67 (+!81 lt!24915 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) lt!24910) (apply!67 lt!24915 lt!24910))))

(declare-fun b!60807 () Bool)

(declare-fun res!33555 () Bool)

(assert (=> b!60807 (=> (not res!33555) (not e!39971))))

(assert (=> b!60807 (= res!33555 e!39980)))

(declare-fun c!7905 () Bool)

(assert (=> b!60807 (= c!7905 (not (= (bvand (extraKeys!1949 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (= (and d!11905 c!7910) b!60803))

(assert (= (and d!11905 (not c!7910)) b!60799))

(assert (= (and b!60799 c!7907) b!60798))

(assert (= (and b!60799 (not c!7907)) b!60804))

(assert (= (and b!60804 c!7909) b!60794))

(assert (= (and b!60804 (not c!7909)) b!60792))

(assert (= (or b!60794 b!60792) bm!4641))

(assert (= (or b!60798 bm!4641) bm!4643))

(assert (= (or b!60798 b!60794) bm!4639))

(assert (= (or b!60803 bm!4643) bm!4642))

(assert (= (or b!60803 bm!4639) bm!4638))

(assert (= (and d!11905 res!33552) b!60791))

(assert (= (and d!11905 c!7906) b!60806))

(assert (= (and d!11905 (not c!7906)) b!60789))

(assert (= (and d!11905 res!33556) b!60787))

(assert (= (and b!60787 res!33548) b!60802))

(assert (= (and b!60787 (not res!33554)) b!60796))

(assert (= (and b!60796 res!33551) b!60805))

(assert (= (and b!60787 res!33550) b!60807))

(assert (= (and b!60807 c!7905) b!60801))

(assert (= (and b!60807 (not c!7905)) b!60793))

(assert (= (and b!60801 res!33549) b!60800))

(assert (= (or b!60801 b!60793) bm!4640))

(assert (= (and b!60807 res!33555) b!60797))

(assert (= (and b!60797 c!7908) b!60790))

(assert (= (and b!60797 (not c!7908)) b!60788))

(assert (= (and b!60790 res!33553) b!60795))

(assert (= (or b!60790 b!60788) bm!4637))

(declare-fun b_lambda!2683 () Bool)

(assert (=> (not b_lambda!2683) (not b!60805)))

(assert (=> b!60805 t!4789))

(declare-fun b_and!3697 () Bool)

(assert (= b_and!3677 (and (=> t!4789 result!2407) b_and!3697)))

(assert (=> b!60805 t!4791))

(declare-fun b_and!3699 () Bool)

(assert (= b_and!3679 (and (=> t!4791 result!2411) b_and!3699)))

(assert (=> b!60791 m!53115))

(assert (=> b!60791 m!53115))

(declare-fun m!53205 () Bool)

(assert (=> b!60791 m!53205))

(assert (=> b!60796 m!53115))

(assert (=> b!60796 m!53115))

(declare-fun m!53207 () Bool)

(assert (=> b!60796 m!53207))

(declare-fun m!53209 () Bool)

(assert (=> bm!4637 m!53209))

(declare-fun m!53211 () Bool)

(assert (=> bm!4640 m!53211))

(declare-fun m!53213 () Bool)

(assert (=> b!60805 m!53213))

(assert (=> b!60805 m!53011))

(declare-fun m!53215 () Bool)

(assert (=> b!60805 m!53215))

(assert (=> b!60805 m!53115))

(assert (=> b!60805 m!53011))

(assert (=> b!60805 m!53115))

(declare-fun m!53217 () Bool)

(assert (=> b!60805 m!53217))

(assert (=> b!60805 m!53213))

(declare-fun m!53219 () Bool)

(assert (=> b!60800 m!53219))

(declare-fun m!53221 () Bool)

(assert (=> b!60795 m!53221))

(assert (=> d!11905 m!53021))

(declare-fun m!53223 () Bool)

(assert (=> bm!4638 m!53223))

(declare-fun m!53225 () Bool)

(assert (=> b!60803 m!53225))

(assert (=> b!60802 m!53115))

(assert (=> b!60802 m!53115))

(assert (=> b!60802 m!53205))

(declare-fun m!53227 () Bool)

(assert (=> bm!4642 m!53227))

(declare-fun m!53229 () Bool)

(assert (=> b!60806 m!53229))

(declare-fun m!53231 () Bool)

(assert (=> b!60806 m!53231))

(declare-fun m!53233 () Bool)

(assert (=> b!60806 m!53233))

(assert (=> b!60806 m!53115))

(declare-fun m!53235 () Bool)

(assert (=> b!60806 m!53235))

(declare-fun m!53237 () Bool)

(assert (=> b!60806 m!53237))

(declare-fun m!53239 () Bool)

(assert (=> b!60806 m!53239))

(declare-fun m!53241 () Bool)

(assert (=> b!60806 m!53241))

(declare-fun m!53243 () Bool)

(assert (=> b!60806 m!53243))

(declare-fun m!53245 () Bool)

(assert (=> b!60806 m!53245))

(declare-fun m!53247 () Bool)

(assert (=> b!60806 m!53247))

(assert (=> b!60806 m!53245))

(declare-fun m!53249 () Bool)

(assert (=> b!60806 m!53249))

(declare-fun m!53251 () Bool)

(assert (=> b!60806 m!53251))

(assert (=> b!60806 m!53251))

(declare-fun m!53253 () Bool)

(assert (=> b!60806 m!53253))

(declare-fun m!53255 () Bool)

(assert (=> b!60806 m!53255))

(assert (=> b!60806 m!53231))

(declare-fun m!53257 () Bool)

(assert (=> b!60806 m!53257))

(assert (=> b!60806 m!53241))

(assert (=> b!60806 m!53227))

(assert (=> b!60436 d!11905))

(declare-fun d!11907 () Bool)

(assert (=> d!11907 (= (valid!267 thiss!992) (valid!266 (v!2403 (underlying!230 thiss!992))))))

(declare-fun bs!2632 () Bool)

(assert (= bs!2632 d!11907))

(declare-fun m!53259 () Bool)

(assert (=> bs!2632 m!53259))

(assert (=> start!8726 d!11907))

(declare-fun mapNonEmpty!2927 () Bool)

(declare-fun mapRes!2927 () Bool)

(declare-fun tp!8093 () Bool)

(declare-fun e!39986 () Bool)

(assert (=> mapNonEmpty!2927 (= mapRes!2927 (and tp!8093 e!39986))))

(declare-fun mapValue!2927 () ValueCell!860)

(declare-fun mapKey!2927 () (_ BitVec 32))

(declare-fun mapRest!2927 () (Array (_ BitVec 32) ValueCell!860))

(assert (=> mapNonEmpty!2927 (= mapRest!2911 (store mapRest!2927 mapKey!2927 mapValue!2927))))

(declare-fun condMapEmpty!2927 () Bool)

(declare-fun mapDefault!2927 () ValueCell!860)

(assert (=> mapNonEmpty!2911 (= condMapEmpty!2927 (= mapRest!2911 ((as const (Array (_ BitVec 32) ValueCell!860)) mapDefault!2927)))))

(declare-fun e!39985 () Bool)

(assert (=> mapNonEmpty!2911 (= tp!8064 (and e!39985 mapRes!2927))))

(declare-fun b!60815 () Bool)

(assert (=> b!60815 (= e!39985 tp_is_empty!2407)))

(declare-fun b!60814 () Bool)

(assert (=> b!60814 (= e!39986 tp_is_empty!2407)))

(declare-fun mapIsEmpty!2927 () Bool)

(assert (=> mapIsEmpty!2927 mapRes!2927))

(assert (= (and mapNonEmpty!2911 condMapEmpty!2927) mapIsEmpty!2927))

(assert (= (and mapNonEmpty!2911 (not condMapEmpty!2927)) mapNonEmpty!2927))

(assert (= (and mapNonEmpty!2927 ((_ is ValueCellFull!860) mapValue!2927)) b!60814))

(assert (= (and mapNonEmpty!2911 ((_ is ValueCellFull!860) mapDefault!2927)) b!60815))

(declare-fun m!53261 () Bool)

(assert (=> mapNonEmpty!2927 m!53261))

(declare-fun mapNonEmpty!2928 () Bool)

(declare-fun mapRes!2928 () Bool)

(declare-fun tp!8094 () Bool)

(declare-fun e!39988 () Bool)

(assert (=> mapNonEmpty!2928 (= mapRes!2928 (and tp!8094 e!39988))))

(declare-fun mapKey!2928 () (_ BitVec 32))

(declare-fun mapRest!2928 () (Array (_ BitVec 32) ValueCell!860))

(declare-fun mapValue!2928 () ValueCell!860)

(assert (=> mapNonEmpty!2928 (= mapRest!2912 (store mapRest!2928 mapKey!2928 mapValue!2928))))

(declare-fun condMapEmpty!2928 () Bool)

(declare-fun mapDefault!2928 () ValueCell!860)

(assert (=> mapNonEmpty!2912 (= condMapEmpty!2928 (= mapRest!2912 ((as const (Array (_ BitVec 32) ValueCell!860)) mapDefault!2928)))))

(declare-fun e!39987 () Bool)

(assert (=> mapNonEmpty!2912 (= tp!8066 (and e!39987 mapRes!2928))))

(declare-fun b!60817 () Bool)

(assert (=> b!60817 (= e!39987 tp_is_empty!2407)))

(declare-fun b!60816 () Bool)

(assert (=> b!60816 (= e!39988 tp_is_empty!2407)))

(declare-fun mapIsEmpty!2928 () Bool)

(assert (=> mapIsEmpty!2928 mapRes!2928))

(assert (= (and mapNonEmpty!2912 condMapEmpty!2928) mapIsEmpty!2928))

(assert (= (and mapNonEmpty!2912 (not condMapEmpty!2928)) mapNonEmpty!2928))

(assert (= (and mapNonEmpty!2928 ((_ is ValueCellFull!860) mapValue!2928)) b!60816))

(assert (= (and mapNonEmpty!2912 ((_ is ValueCellFull!860) mapDefault!2928)) b!60817))

(declare-fun m!53263 () Bool)

(assert (=> mapNonEmpty!2928 m!53263))

(declare-fun b_lambda!2685 () Bool)

(assert (= b_lambda!2683 (or (and b!60443 b_free!1981) (and b!60445 b_free!1983 (= (defaultEntry!2066 newMap!16) (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))))) b_lambda!2685)))

(check-sat (not d!11877) (not bm!4621) (not bm!4607) (not b_lambda!2681) (not d!11881) (not b!60584) (not bm!4642) (not d!11903) (not b!60608) (not b_lambda!2685) (not b!60716) (not bm!4620) (not b!60730) (not b!60795) (not b!60616) (not bm!4640) (not b!60579) (not bm!4604) (not d!11891) (not b!60736) (not b!60806) tp_is_empty!2407 (not b!60600) (not bm!4637) (not bm!4619) (not b!60744) (not bm!4611) (not bm!4613) (not b!60596) (not bm!4603) (not b!60805) (not bm!4617) (not b!60728) b_and!3697 (not bm!4638) (not bm!4614) (not bm!4550) (not b!60609) (not bm!4606) (not bm!4615) (not b!60796) (not d!11885) (not d!11889) (not b!60800) (not b!60743) b_and!3699 (not d!11875) (not mapNonEmpty!2928) (not b!60803) (not b_next!1981) (not b!60607) (not d!11905) (not b!60735) (not b_next!1983) (not b!60598) (not mapNonEmpty!2927) (not b!60802) (not b!60618) (not b!60704) (not bm!4599) (not b!60791) (not d!11907))
(check-sat b_and!3697 b_and!3699 (not b_next!1981) (not b_next!1983))
(get-model)

(declare-fun d!11909 () Bool)

(declare-fun e!39991 () Bool)

(assert (=> d!11909 e!39991))

(declare-fun res!33562 () Bool)

(assert (=> d!11909 (=> (not res!33562) (not e!39991))))

(declare-fun lt!24932 () ListLongMap!1347)

(assert (=> d!11909 (= res!33562 (contains!682 lt!24932 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun lt!24934 () List!1426)

(assert (=> d!11909 (= lt!24932 (ListLongMap!1348 lt!24934))))

(declare-fun lt!24933 () Unit!1613)

(declare-fun lt!24931 () Unit!1613)

(assert (=> d!11909 (= lt!24933 lt!24931)))

(assert (=> d!11909 (= (getValueByKey!126 lt!24934 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) (Some!131 (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun lemmaContainsTupThenGetReturnValue!43 (List!1426 (_ BitVec 64) V!2857) Unit!1613)

(assert (=> d!11909 (= lt!24931 (lemmaContainsTupThenGetReturnValue!43 lt!24934 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun insertStrictlySorted!46 (List!1426 (_ BitVec 64) V!2857) List!1426)

(assert (=> d!11909 (= lt!24934 (insertStrictlySorted!46 (toList!689 call!4646) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(assert (=> d!11909 (= (+!81 call!4646 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) lt!24932)))

(declare-fun b!60822 () Bool)

(declare-fun res!33561 () Bool)

(assert (=> b!60822 (=> (not res!33561) (not e!39991))))

(assert (=> b!60822 (= res!33561 (= (getValueByKey!126 (toList!689 lt!24932) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) (Some!131 (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(declare-fun b!60823 () Bool)

(declare-fun contains!685 (List!1426 tuple2!2022) Bool)

(assert (=> b!60823 (= e!39991 (contains!685 (toList!689 lt!24932) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))

(assert (= (and d!11909 res!33562) b!60822))

(assert (= (and b!60822 res!33561) b!60823))

(declare-fun m!53265 () Bool)

(assert (=> d!11909 m!53265))

(declare-fun m!53267 () Bool)

(assert (=> d!11909 m!53267))

(declare-fun m!53269 () Bool)

(assert (=> d!11909 m!53269))

(declare-fun m!53271 () Bool)

(assert (=> d!11909 m!53271))

(declare-fun m!53273 () Bool)

(assert (=> b!60822 m!53273))

(declare-fun m!53275 () Bool)

(assert (=> b!60823 m!53275))

(assert (=> b!60803 d!11909))

(declare-fun b!60824 () Bool)

(declare-fun e!39994 () Bool)

(declare-fun e!39995 () Bool)

(assert (=> b!60824 (= e!39994 e!39995)))

(declare-fun c!7911 () Bool)

(assert (=> b!60824 (= c!7911 (validKeyInArray!0 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!60825 () Bool)

(declare-fun call!4647 () Bool)

(assert (=> b!60825 (= e!39995 call!4647)))

(declare-fun bm!4644 () Bool)

(assert (=> bm!4644 (= call!4647 (arrayNoDuplicates!0 (_keys!3694 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!7911 (Cons!1423 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000) Nil!1424) Nil!1424)))))

(declare-fun b!60826 () Bool)

(declare-fun e!39993 () Bool)

(assert (=> b!60826 (= e!39993 e!39994)))

(declare-fun res!33563 () Bool)

(assert (=> b!60826 (=> (not res!33563) (not e!39994))))

(declare-fun e!39992 () Bool)

(assert (=> b!60826 (= res!33563 (not e!39992))))

(declare-fun res!33565 () Bool)

(assert (=> b!60826 (=> (not res!33565) (not e!39992))))

(assert (=> b!60826 (= res!33565 (validKeyInArray!0 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun d!11911 () Bool)

(declare-fun res!33564 () Bool)

(assert (=> d!11911 (=> res!33564 e!39993)))

(assert (=> d!11911 (= res!33564 (bvsge #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(assert (=> d!11911 (= (arrayNoDuplicates!0 (_keys!3694 newMap!16) #b00000000000000000000000000000000 Nil!1424) e!39993)))

(declare-fun b!60827 () Bool)

(assert (=> b!60827 (= e!39995 call!4647)))

(declare-fun b!60828 () Bool)

(assert (=> b!60828 (= e!39992 (contains!684 Nil!1424 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!11911 (not res!33564)) b!60826))

(assert (= (and b!60826 res!33565) b!60828))

(assert (= (and b!60826 res!33563) b!60824))

(assert (= (and b!60824 c!7911) b!60825))

(assert (= (and b!60824 (not c!7911)) b!60827))

(assert (= (or b!60825 b!60827) bm!4644))

(declare-fun m!53277 () Bool)

(assert (=> b!60824 m!53277))

(assert (=> b!60824 m!53277))

(declare-fun m!53279 () Bool)

(assert (=> b!60824 m!53279))

(assert (=> bm!4644 m!53277))

(declare-fun m!53281 () Bool)

(assert (=> bm!4644 m!53281))

(assert (=> b!60826 m!53277))

(assert (=> b!60826 m!53277))

(assert (=> b!60826 m!53279))

(assert (=> b!60828 m!53277))

(assert (=> b!60828 m!53277))

(declare-fun m!53283 () Bool)

(assert (=> b!60828 m!53283))

(assert (=> b!60609 d!11911))

(declare-fun d!11913 () Bool)

(declare-fun e!39998 () Bool)

(assert (=> d!11913 e!39998))

(declare-fun res!33570 () Bool)

(assert (=> d!11913 (=> (not res!33570) (not e!39998))))

(declare-fun lt!24939 () SeekEntryResult!222)

(assert (=> d!11913 (= res!33570 ((_ is Found!222) lt!24939))))

(assert (=> d!11913 (= lt!24939 (seekEntryOrOpen!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (_keys!3694 newMap!16) (mask!5962 newMap!16)))))

(declare-fun lt!24940 () Unit!1613)

(declare-fun choose!323 (array!3729 array!3731 (_ BitVec 32) (_ BitVec 32) V!2857 V!2857 (_ BitVec 64) Int) Unit!1613)

(assert (=> d!11913 (= lt!24940 (choose!323 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (defaultEntry!2066 newMap!16)))))

(assert (=> d!11913 (validMask!0 (mask!5962 newMap!16))))

(assert (=> d!11913 (= (lemmaInListMapThenSeekEntryOrOpenFindsIt!16 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (defaultEntry!2066 newMap!16)) lt!24940)))

(declare-fun b!60833 () Bool)

(declare-fun res!33571 () Bool)

(assert (=> b!60833 (=> (not res!33571) (not e!39998))))

(assert (=> b!60833 (= res!33571 (inRange!0 (index!3013 lt!24939) (mask!5962 newMap!16)))))

(declare-fun b!60834 () Bool)

(assert (=> b!60834 (= e!39998 (= (select (arr!1784 (_keys!3694 newMap!16)) (index!3013 lt!24939)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(assert (=> b!60834 (and (bvsge (index!3013 lt!24939) #b00000000000000000000000000000000) (bvslt (index!3013 lt!24939) (size!2015 (_keys!3694 newMap!16))))))

(assert (= (and d!11913 res!33570) b!60833))

(assert (= (and b!60833 res!33571) b!60834))

(assert (=> d!11913 m!52989))

(assert (=> d!11913 m!53147))

(assert (=> d!11913 m!52989))

(declare-fun m!53285 () Bool)

(assert (=> d!11913 m!53285))

(declare-fun m!53287 () Bool)

(assert (=> d!11913 m!53287))

(declare-fun m!53289 () Bool)

(assert (=> b!60833 m!53289))

(declare-fun m!53291 () Bool)

(assert (=> b!60834 m!53291))

(assert (=> bm!4621 d!11913))

(assert (=> d!11875 d!11879))

(declare-fun d!11915 () Bool)

(assert (=> d!11915 (not (arrayContainsKey!0 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> d!11915 true))

(declare-fun _$68!34 () Unit!1613)

(assert (=> d!11915 (= (choose!68 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (Cons!1423 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) Nil!1424)) _$68!34)))

(declare-fun bs!2633 () Bool)

(assert (= bs!2633 d!11915))

(assert (=> bs!2633 m!52989))

(assert (=> bs!2633 m!52993))

(assert (=> d!11875 d!11915))

(declare-fun d!11917 () Bool)

(declare-fun e!40000 () Bool)

(assert (=> d!11917 e!40000))

(declare-fun res!33572 () Bool)

(assert (=> d!11917 (=> res!33572 e!40000)))

(declare-fun lt!24943 () Bool)

(assert (=> d!11917 (= res!33572 (not lt!24943))))

(declare-fun lt!24944 () Bool)

(assert (=> d!11917 (= lt!24943 lt!24944)))

(declare-fun lt!24941 () Unit!1613)

(declare-fun e!39999 () Unit!1613)

(assert (=> d!11917 (= lt!24941 e!39999)))

(declare-fun c!7912 () Bool)

(assert (=> d!11917 (= c!7912 lt!24944)))

(assert (=> d!11917 (= lt!24944 (containsKey!129 (toList!689 lt!24917) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11917 (= (contains!682 lt!24917 #b1000000000000000000000000000000000000000000000000000000000000000) lt!24943)))

(declare-fun b!60835 () Bool)

(declare-fun lt!24942 () Unit!1613)

(assert (=> b!60835 (= e!39999 lt!24942)))

(assert (=> b!60835 (= lt!24942 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 lt!24917) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!60835 (isDefined!78 (getValueByKey!126 (toList!689 lt!24917) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60836 () Bool)

(declare-fun Unit!1623 () Unit!1613)

(assert (=> b!60836 (= e!39999 Unit!1623)))

(declare-fun b!60837 () Bool)

(assert (=> b!60837 (= e!40000 (isDefined!78 (getValueByKey!126 (toList!689 lt!24917) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11917 c!7912) b!60835))

(assert (= (and d!11917 (not c!7912)) b!60836))

(assert (= (and d!11917 (not res!33572)) b!60837))

(declare-fun m!53293 () Bool)

(assert (=> d!11917 m!53293))

(declare-fun m!53295 () Bool)

(assert (=> b!60835 m!53295))

(declare-fun m!53297 () Bool)

(assert (=> b!60835 m!53297))

(assert (=> b!60835 m!53297))

(declare-fun m!53299 () Bool)

(assert (=> b!60835 m!53299))

(assert (=> b!60837 m!53297))

(assert (=> b!60837 m!53297))

(assert (=> b!60837 m!53299))

(assert (=> bm!4637 d!11917))

(declare-fun b!60872 () Bool)

(declare-fun e!40018 () Bool)

(declare-fun e!40021 () Bool)

(assert (=> b!60872 (= e!40018 e!40021)))

(declare-fun res!33591 () Bool)

(declare-fun call!4656 () Bool)

(assert (=> b!60872 (= res!33591 call!4656)))

(assert (=> b!60872 (=> (not res!33591) (not e!40021))))

(declare-fun b!60873 () Bool)

(declare-fun call!4659 () Bool)

(assert (=> b!60873 (= e!40021 (not call!4659))))

(declare-fun b!60874 () Bool)

(declare-fun e!40019 () Unit!1613)

(declare-fun Unit!1624 () Unit!1613)

(assert (=> b!60874 (= e!40019 Unit!1624)))

(declare-fun b!60875 () Bool)

(declare-fun e!40024 () Unit!1613)

(declare-fun lt!25027 () Unit!1613)

(assert (=> b!60875 (= e!40024 lt!25027)))

(assert (=> b!60875 (= lt!25027 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!16 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25021 () SeekEntryResult!222)

(declare-fun call!4658 () SeekEntryResult!222)

(assert (=> b!60875 (= lt!25021 call!4658)))

(declare-fun c!7922 () Bool)

(assert (=> b!60875 (= c!7922 ((_ is MissingZero!222) lt!25021))))

(declare-fun e!40017 () Bool)

(assert (=> b!60875 e!40017))

(declare-fun bm!4653 () Bool)

(assert (=> bm!4653 (= call!4658 (seekEntryOrOpen!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (_keys!3694 newMap!16) (mask!5962 newMap!16)))))

(declare-fun lt!25033 () SeekEntryResult!222)

(declare-fun b!60876 () Bool)

(declare-fun e!40020 () Bool)

(assert (=> b!60876 (= e!40020 (= (select (arr!1784 (_keys!3694 newMap!16)) (index!3013 lt!25033)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(declare-fun bm!4654 () Bool)

(declare-fun call!4657 () Bool)

(assert (=> bm!4654 (= call!4656 call!4657)))

(declare-fun b!60877 () Bool)

(assert (=> b!60877 (= e!40018 ((_ is Undefined!222) lt!25021))))

(declare-fun d!11919 () Bool)

(declare-fun e!40022 () Bool)

(assert (=> d!11919 e!40022))

(declare-fun res!33595 () Bool)

(assert (=> d!11919 (=> (not res!33595) (not e!40022))))

(declare-fun lt!25028 () tuple2!2024)

(assert (=> d!11919 (= res!33595 (_1!1023 lt!25028))))

(assert (=> d!11919 (= lt!25028 (tuple2!2025 true (LongMapFixedSize!629 (defaultEntry!2066 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) (bvadd (_size!363 newMap!16) #b00000000000000000000000000000001) (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16))) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16))) (_vacant!363 newMap!16))))))

(declare-fun lt!25025 () Unit!1613)

(declare-fun lt!25023 () Unit!1613)

(assert (=> d!11919 (= lt!25025 lt!25023)))

(declare-fun lt!25013 () array!3731)

(declare-fun lt!25006 () array!3729)

(assert (=> d!11919 (contains!682 (getCurrentListMap!390 lt!25006 lt!25013 (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)) (select (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842))))))

(assert (=> d!11919 (= lt!25023 (lemmaValidKeyInArrayIsInListMap!76 lt!25006 lt!25013 (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (defaultEntry!2066 newMap!16)))))

(assert (=> d!11919 (= lt!25013 (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16))))))

(assert (=> d!11919 (= lt!25006 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16))))))

(declare-fun lt!25026 () Unit!1613)

(declare-fun lt!25007 () Unit!1613)

(assert (=> d!11919 (= lt!25026 lt!25007)))

(declare-fun lt!25018 () array!3729)

(assert (=> d!11919 (= (arrayCountValidKeys!0 lt!25018 (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (bvadd (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lemmaValidKeyAtIImpliesCountKeysIsOne!0 (array!3729 (_ BitVec 32)) Unit!1613)

(assert (=> d!11919 (= lt!25007 (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!25018 (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842))))))

(assert (=> d!11919 (= lt!25018 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16))))))

(declare-fun lt!25020 () Unit!1613)

(declare-fun lt!25034 () Unit!1613)

(assert (=> d!11919 (= lt!25020 lt!25034)))

(declare-fun lt!25012 () array!3729)

(assert (=> d!11919 (arrayContainsKey!0 lt!25012 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(declare-fun lemmaArrayContainsFromImpliesContainsFromZero!0 (array!3729 (_ BitVec 64) (_ BitVec 32)) Unit!1613)

(assert (=> d!11919 (= lt!25034 (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!25012 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842))))))

(assert (=> d!11919 (= lt!25012 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16))))))

(declare-fun lt!25022 () Unit!1613)

(declare-fun lt!25017 () Unit!1613)

(assert (=> d!11919 (= lt!25022 lt!25017)))

(assert (=> d!11919 (= (+!81 (getCurrentListMap!390 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!390 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16))) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16))) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lemmaAddValidKeyToArrayThenAddPairToListMap!6 (array!3729 array!3731 (_ BitVec 32) (_ BitVec 32) V!2857 V!2857 (_ BitVec 32) (_ BitVec 64) V!2857 Int) Unit!1613)

(assert (=> d!11919 (= lt!25017 (lemmaAddValidKeyToArrayThenAddPairToListMap!6 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25011 () Unit!1613)

(declare-fun lt!25019 () Unit!1613)

(assert (=> d!11919 (= lt!25011 lt!25019)))

(assert (=> d!11919 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16))) (mask!5962 newMap!16))))

(declare-fun lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 ((_ BitVec 64) array!3729 (_ BitVec 32) (_ BitVec 32)) Unit!1613)

(assert (=> d!11919 (= lt!25019 (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (_keys!3694 newMap!16) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (mask!5962 newMap!16)))))

(declare-fun lt!25008 () Unit!1613)

(declare-fun lt!25032 () Unit!1613)

(assert (=> d!11919 (= lt!25008 lt!25032)))

(assert (=> d!11919 (= (arrayCountValidKeys!0 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16))) #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!3694 newMap!16) #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))) #b00000000000000000000000000000001))))

(declare-fun lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (array!3729 (_ BitVec 32) (_ BitVec 64)) Unit!1613)

(assert (=> d!11919 (= lt!25032 (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!3694 newMap!16) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(declare-fun lt!25024 () Unit!1613)

(declare-fun lt!25014 () Unit!1613)

(assert (=> d!11919 (= lt!25024 lt!25014)))

(declare-fun lt!25009 () List!1427)

(declare-fun lt!25030 () (_ BitVec 32))

(assert (=> d!11919 (arrayNoDuplicates!0 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16))) lt!25030 lt!25009)))

(declare-fun lemmaPutNewValidKeyPreservesNoDuplicate!0 (array!3729 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1427) Unit!1613)

(assert (=> d!11919 (= lt!25014 (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!3694 newMap!16) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) lt!25030 lt!25009))))

(assert (=> d!11919 (= lt!25009 Nil!1424)))

(assert (=> d!11919 (= lt!25030 #b00000000000000000000000000000000)))

(declare-fun lt!25016 () Unit!1613)

(assert (=> d!11919 (= lt!25016 e!40019)))

(declare-fun c!7921 () Bool)

(assert (=> d!11919 (= c!7921 (arrayContainsKey!0 (_keys!3694 newMap!16) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun lt!25010 () Unit!1613)

(assert (=> d!11919 (= lt!25010 e!40024)))

(declare-fun c!7923 () Bool)

(assert (=> d!11919 (= c!7923 (contains!682 (getCurrentListMap!390 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(assert (=> d!11919 (valid!266 newMap!16)))

(assert (=> d!11919 (= (updateHelperNewKey!16 newMap!16 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842))) lt!25028)))

(declare-fun b!60878 () Bool)

(assert (=> b!60878 (= e!40022 (= (map!1114 (_2!1023 lt!25028)) (+!81 (map!1114 newMap!16) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!60879 () Bool)

(declare-fun res!33597 () Bool)

(declare-fun e!40023 () Bool)

(assert (=> b!60879 (=> (not res!33597) (not e!40023))))

(assert (=> b!60879 (= res!33597 (= (select (arr!1784 (_keys!3694 newMap!16)) (index!3012 lt!25021)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60880 () Bool)

(declare-fun res!33593 () Bool)

(assert (=> b!60880 (=> (not res!33593) (not e!40022))))

(assert (=> b!60880 (= res!33593 (valid!266 (_2!1023 lt!25028)))))

(declare-fun b!60881 () Bool)

(declare-fun c!7924 () Bool)

(assert (=> b!60881 (= c!7924 ((_ is MissingVacant!222) lt!25021))))

(assert (=> b!60881 (= e!40017 e!40018)))

(declare-fun b!60882 () Bool)

(declare-fun Unit!1625 () Unit!1613)

(assert (=> b!60882 (= e!40019 Unit!1625)))

(declare-fun lt!25005 () Unit!1613)

(declare-fun lemmaArrayContainsKeyThenInListMap!6 (array!3729 array!3731 (_ BitVec 32) (_ BitVec 32) V!2857 V!2857 (_ BitVec 64) (_ BitVec 32) Int) Unit!1613)

(assert (=> b!60882 (= lt!25005 (lemmaArrayContainsKeyThenInListMap!6 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(assert (=> b!60882 (contains!682 (getCurrentListMap!390 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355))))

(declare-fun lt!25029 () Unit!1613)

(assert (=> b!60882 (= lt!25029 lt!25005)))

(assert (=> b!60882 false))

(declare-fun b!60883 () Bool)

(assert (=> b!60883 (= e!40023 (not call!4659))))

(declare-fun b!60884 () Bool)

(declare-fun Unit!1626 () Unit!1613)

(assert (=> b!60884 (= e!40024 Unit!1626)))

(declare-fun lt!25015 () Unit!1613)

(assert (=> b!60884 (= lt!25015 (lemmaInListMapThenSeekEntryOrOpenFindsIt!16 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (defaultEntry!2066 newMap!16)))))

(assert (=> b!60884 (= lt!25033 call!4658)))

(declare-fun res!33592 () Bool)

(assert (=> b!60884 (= res!33592 ((_ is Found!222) lt!25033))))

(assert (=> b!60884 (=> (not res!33592) (not e!40020))))

(assert (=> b!60884 e!40020))

(declare-fun lt!25031 () Unit!1613)

(assert (=> b!60884 (= lt!25031 lt!25015)))

(assert (=> b!60884 false))

(declare-fun b!60885 () Bool)

(declare-fun res!33599 () Bool)

(assert (=> b!60885 (= res!33599 (= (select (arr!1784 (_keys!3694 newMap!16)) (index!3015 lt!25021)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!60885 (=> (not res!33599) (not e!40021))))

(declare-fun bm!4655 () Bool)

(assert (=> bm!4655 (= call!4657 (inRange!0 (ite c!7923 (index!3013 lt!25033) (ite c!7922 (index!3012 lt!25021) (index!3015 lt!25021))) (mask!5962 newMap!16)))))

(declare-fun b!60886 () Bool)

(declare-fun res!33598 () Bool)

(assert (=> b!60886 (= res!33598 call!4657)))

(assert (=> b!60886 (=> (not res!33598) (not e!40020))))

(declare-fun b!60887 () Bool)

(declare-fun res!33596 () Bool)

(assert (=> b!60887 (=> (not res!33596) (not e!40023))))

(assert (=> b!60887 (= res!33596 call!4656)))

(assert (=> b!60887 (= e!40017 e!40023)))

(declare-fun bm!4656 () Bool)

(assert (=> bm!4656 (= call!4659 (arrayContainsKey!0 (_keys!3694 newMap!16) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!60888 () Bool)

(declare-fun res!33594 () Bool)

(assert (=> b!60888 (=> (not res!33594) (not e!40022))))

(assert (=> b!60888 (= res!33594 (contains!682 (map!1114 (_2!1023 lt!25028)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(assert (= (and d!11919 c!7923) b!60884))

(assert (= (and d!11919 (not c!7923)) b!60875))

(assert (= (and b!60884 res!33592) b!60886))

(assert (= (and b!60886 res!33598) b!60876))

(assert (= (and b!60875 c!7922) b!60887))

(assert (= (and b!60875 (not c!7922)) b!60881))

(assert (= (and b!60887 res!33596) b!60879))

(assert (= (and b!60879 res!33597) b!60883))

(assert (= (and b!60881 c!7924) b!60872))

(assert (= (and b!60881 (not c!7924)) b!60877))

(assert (= (and b!60872 res!33591) b!60885))

(assert (= (and b!60885 res!33599) b!60873))

(assert (= (or b!60887 b!60872) bm!4654))

(assert (= (or b!60883 b!60873) bm!4656))

(assert (= (or b!60886 bm!4654) bm!4655))

(assert (= (or b!60884 b!60875) bm!4653))

(assert (= (and d!11919 c!7921) b!60882))

(assert (= (and d!11919 (not c!7921)) b!60874))

(assert (= (and d!11919 res!33595) b!60880))

(assert (= (and b!60880 res!33593) b!60888))

(assert (= (and b!60888 res!33594) b!60878))

(declare-fun m!53301 () Bool)

(assert (=> b!60876 m!53301))

(assert (=> b!60882 m!52989))

(declare-fun m!53303 () Bool)

(assert (=> b!60882 m!53303))

(assert (=> b!60882 m!53203))

(assert (=> b!60882 m!53203))

(assert (=> b!60882 m!52989))

(declare-fun m!53305 () Bool)

(assert (=> b!60882 m!53305))

(assert (=> b!60884 m!52989))

(assert (=> b!60884 m!53181))

(declare-fun m!53307 () Bool)

(assert (=> b!60888 m!53307))

(assert (=> b!60888 m!53307))

(assert (=> b!60888 m!52989))

(declare-fun m!53309 () Bool)

(assert (=> b!60888 m!53309))

(assert (=> d!11919 m!52989))

(assert (=> d!11919 m!53149))

(assert (=> d!11919 m!53203))

(declare-fun m!53311 () Bool)

(assert (=> d!11919 m!53311))

(assert (=> d!11919 m!52989))

(declare-fun m!53313 () Bool)

(assert (=> d!11919 m!53313))

(assert (=> d!11919 m!53203))

(assert (=> d!11919 m!52989))

(assert (=> d!11919 m!53305))

(declare-fun m!53315 () Bool)

(assert (=> d!11919 m!53315))

(assert (=> d!11919 m!52989))

(declare-fun m!53317 () Bool)

(assert (=> d!11919 m!53317))

(declare-fun m!53319 () Bool)

(assert (=> d!11919 m!53319))

(declare-fun m!53321 () Bool)

(assert (=> d!11919 m!53321))

(declare-fun m!53323 () Bool)

(assert (=> d!11919 m!53323))

(assert (=> d!11919 m!52989))

(declare-fun m!53325 () Bool)

(assert (=> d!11919 m!53325))

(assert (=> d!11919 m!53203))

(declare-fun m!53327 () Bool)

(assert (=> d!11919 m!53327))

(declare-fun m!53329 () Bool)

(assert (=> d!11919 m!53329))

(declare-fun m!53331 () Bool)

(assert (=> d!11919 m!53331))

(declare-fun m!53333 () Bool)

(assert (=> d!11919 m!53333))

(declare-fun m!53335 () Bool)

(assert (=> d!11919 m!53335))

(assert (=> d!11919 m!52979))

(assert (=> d!11919 m!53331))

(declare-fun m!53337 () Bool)

(assert (=> d!11919 m!53337))

(assert (=> d!11919 m!53129))

(assert (=> d!11919 m!52989))

(declare-fun m!53339 () Bool)

(assert (=> d!11919 m!53339))

(declare-fun m!53341 () Bool)

(assert (=> d!11919 m!53341))

(declare-fun m!53343 () Bool)

(assert (=> d!11919 m!53343))

(assert (=> d!11919 m!52989))

(assert (=> d!11919 m!53013))

(declare-fun m!53345 () Bool)

(assert (=> d!11919 m!53345))

(assert (=> d!11919 m!52989))

(declare-fun m!53347 () Bool)

(assert (=> d!11919 m!53347))

(assert (=> d!11919 m!53329))

(assert (=> b!60875 m!52989))

(assert (=> b!60875 m!53155))

(assert (=> bm!4656 m!52989))

(assert (=> bm!4656 m!53149))

(declare-fun m!53349 () Bool)

(assert (=> bm!4655 m!53349))

(declare-fun m!53351 () Bool)

(assert (=> b!60885 m!53351))

(assert (=> bm!4653 m!52989))

(assert (=> bm!4653 m!53147))

(declare-fun m!53353 () Bool)

(assert (=> b!60879 m!53353))

(declare-fun m!53355 () Bool)

(assert (=> b!60880 m!53355))

(assert (=> b!60878 m!53307))

(assert (=> b!60878 m!53001))

(assert (=> b!60878 m!53001))

(declare-fun m!53357 () Bool)

(assert (=> b!60878 m!53357))

(assert (=> bm!4613 d!11919))

(declare-fun d!11921 () Bool)

(declare-fun res!33604 () Bool)

(declare-fun e!40029 () Bool)

(assert (=> d!11921 (=> res!33604 e!40029)))

(assert (=> d!11921 (= res!33604 (and ((_ is Cons!1422) (toList!689 lt!24706)) (= (_1!1022 (h!2004 (toList!689 lt!24706))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355))))))

(assert (=> d!11921 (= (containsKey!129 (toList!689 lt!24706) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) e!40029)))

(declare-fun b!60893 () Bool)

(declare-fun e!40030 () Bool)

(assert (=> b!60893 (= e!40029 e!40030)))

(declare-fun res!33605 () Bool)

(assert (=> b!60893 (=> (not res!33605) (not e!40030))))

(assert (=> b!60893 (= res!33605 (and (or (not ((_ is Cons!1422) (toList!689 lt!24706))) (bvsle (_1!1022 (h!2004 (toList!689 lt!24706))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355))) ((_ is Cons!1422) (toList!689 lt!24706)) (bvslt (_1!1022 (h!2004 (toList!689 lt!24706))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355))))))

(declare-fun b!60894 () Bool)

(assert (=> b!60894 (= e!40030 (containsKey!129 (t!4792 (toList!689 lt!24706)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(assert (= (and d!11921 (not res!33604)) b!60893))

(assert (= (and b!60893 res!33605) b!60894))

(assert (=> b!60894 m!52989))

(declare-fun m!53359 () Bool)

(assert (=> b!60894 m!53359))

(assert (=> d!11889 d!11921))

(declare-fun d!11923 () Bool)

(declare-fun e!40031 () Bool)

(assert (=> d!11923 e!40031))

(declare-fun res!33607 () Bool)

(assert (=> d!11923 (=> (not res!33607) (not e!40031))))

(declare-fun lt!25036 () ListLongMap!1347)

(assert (=> d!11923 (= res!33607 (contains!682 lt!25036 (_1!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!25038 () List!1426)

(assert (=> d!11923 (= lt!25036 (ListLongMap!1348 lt!25038))))

(declare-fun lt!25037 () Unit!1613)

(declare-fun lt!25035 () Unit!1613)

(assert (=> d!11923 (= lt!25037 lt!25035)))

(assert (=> d!11923 (= (getValueByKey!126 lt!25038 (_1!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!131 (_2!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!11923 (= lt!25035 (lemmaContainsTupThenGetReturnValue!43 lt!25038 (_1!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!11923 (= lt!25038 (insertStrictlySorted!46 (toList!689 (ite c!7887 (ite c!7877 call!4622 call!4624) call!4609)) (_1!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!11923 (= (+!81 (ite c!7887 (ite c!7877 call!4622 call!4624) call!4609) (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!25036)))

(declare-fun b!60895 () Bool)

(declare-fun res!33606 () Bool)

(assert (=> b!60895 (=> (not res!33606) (not e!40031))))

(assert (=> b!60895 (= res!33606 (= (getValueByKey!126 (toList!689 lt!25036) (_1!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!131 (_2!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!60896 () Bool)

(assert (=> b!60896 (= e!40031 (contains!685 (toList!689 lt!25036) (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!11923 res!33607) b!60895))

(assert (= (and b!60895 res!33606) b!60896))

(declare-fun m!53361 () Bool)

(assert (=> d!11923 m!53361))

(declare-fun m!53363 () Bool)

(assert (=> d!11923 m!53363))

(declare-fun m!53365 () Bool)

(assert (=> d!11923 m!53365))

(declare-fun m!53367 () Bool)

(assert (=> d!11923 m!53367))

(declare-fun m!53369 () Bool)

(assert (=> b!60895 m!53369))

(declare-fun m!53371 () Bool)

(assert (=> b!60896 m!53371))

(assert (=> bm!4620 d!11923))

(declare-fun d!11925 () Bool)

(declare-fun e!40033 () Bool)

(assert (=> d!11925 e!40033))

(declare-fun res!33608 () Bool)

(assert (=> d!11925 (=> res!33608 e!40033)))

(declare-fun lt!25041 () Bool)

(assert (=> d!11925 (= res!33608 (not lt!25041))))

(declare-fun lt!25042 () Bool)

(assert (=> d!11925 (= lt!25041 lt!25042)))

(declare-fun lt!25039 () Unit!1613)

(declare-fun e!40032 () Unit!1613)

(assert (=> d!11925 (= lt!25039 e!40032)))

(declare-fun c!7925 () Bool)

(assert (=> d!11925 (= c!7925 lt!25042)))

(assert (=> d!11925 (= lt!25042 (containsKey!129 (toList!689 lt!24917) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!11925 (= (contains!682 lt!24917 #b0000000000000000000000000000000000000000000000000000000000000000) lt!25041)))

(declare-fun b!60897 () Bool)

(declare-fun lt!25040 () Unit!1613)

(assert (=> b!60897 (= e!40032 lt!25040)))

(assert (=> b!60897 (= lt!25040 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 lt!24917) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!60897 (isDefined!78 (getValueByKey!126 (toList!689 lt!24917) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60898 () Bool)

(declare-fun Unit!1627 () Unit!1613)

(assert (=> b!60898 (= e!40032 Unit!1627)))

(declare-fun b!60899 () Bool)

(assert (=> b!60899 (= e!40033 (isDefined!78 (getValueByKey!126 (toList!689 lt!24917) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!11925 c!7925) b!60897))

(assert (= (and d!11925 (not c!7925)) b!60898))

(assert (= (and d!11925 (not res!33608)) b!60899))

(declare-fun m!53373 () Bool)

(assert (=> d!11925 m!53373))

(declare-fun m!53375 () Bool)

(assert (=> b!60897 m!53375))

(declare-fun m!53377 () Bool)

(assert (=> b!60897 m!53377))

(assert (=> b!60897 m!53377))

(declare-fun m!53379 () Bool)

(assert (=> b!60897 m!53379))

(assert (=> b!60899 m!53377))

(assert (=> b!60899 m!53377))

(assert (=> b!60899 m!53379))

(assert (=> bm!4640 d!11925))

(declare-fun b!60900 () Bool)

(declare-fun res!33611 () Bool)

(declare-fun e!40037 () Bool)

(assert (=> b!60900 (=> (not res!33611) (not e!40037))))

(declare-fun e!40036 () Bool)

(assert (=> b!60900 (= res!33611 e!40036)))

(declare-fun res!33615 () Bool)

(assert (=> b!60900 (=> res!33615 e!40036)))

(declare-fun e!40041 () Bool)

(assert (=> b!60900 (= res!33615 (not e!40041))))

(declare-fun res!33609 () Bool)

(assert (=> b!60900 (=> (not res!33609) (not e!40041))))

(assert (=> b!60900 (= res!33609 (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(declare-fun b!60901 () Bool)

(declare-fun e!40042 () Bool)

(declare-fun call!4665 () Bool)

(assert (=> b!60901 (= e!40042 (not call!4665))))

(declare-fun bm!4657 () Bool)

(declare-fun lt!25059 () ListLongMap!1347)

(assert (=> bm!4657 (= call!4665 (contains!682 lt!25059 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60902 () Bool)

(declare-fun e!40044 () Unit!1613)

(declare-fun Unit!1628 () Unit!1613)

(assert (=> b!60902 (= e!40044 Unit!1628)))

(declare-fun b!60903 () Bool)

(declare-fun e!40034 () Bool)

(assert (=> b!60903 (= e!40042 e!40034)))

(declare-fun res!33614 () Bool)

(assert (=> b!60903 (= res!33614 call!4665)))

(assert (=> b!60903 (=> (not res!33614) (not e!40034))))

(declare-fun b!60904 () Bool)

(declare-fun e!40040 () Bool)

(assert (=> b!60904 (= e!40040 (validKeyInArray!0 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!60905 () Bool)

(declare-fun e!40045 () ListLongMap!1347)

(declare-fun call!4662 () ListLongMap!1347)

(assert (=> b!60905 (= e!40045 call!4662)))

(declare-fun bm!4658 () Bool)

(declare-fun call!4666 () ListLongMap!1347)

(declare-fun call!4661 () ListLongMap!1347)

(declare-fun call!4664 () ListLongMap!1347)

(declare-fun c!7931 () Bool)

(declare-fun c!7928 () Bool)

(assert (=> bm!4658 (= call!4666 (+!81 (ite c!7931 call!4661 (ite c!7928 call!4664 call!4662)) (ite (or c!7931 c!7928) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))))))

(declare-fun b!60907 () Bool)

(declare-fun call!4663 () ListLongMap!1347)

(assert (=> b!60907 (= e!40045 call!4663)))

(declare-fun b!60908 () Bool)

(assert (=> b!60908 (= e!40034 (= (apply!67 lt!25059 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1980 newMap!16)))))

(declare-fun b!60909 () Bool)

(declare-fun e!40043 () Bool)

(assert (=> b!60909 (= e!40036 e!40043)))

(declare-fun res!33612 () Bool)

(assert (=> b!60909 (=> (not res!33612) (not e!40043))))

(assert (=> b!60909 (= res!33612 (contains!682 lt!25059 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!60909 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(declare-fun b!60910 () Bool)

(assert (=> b!60910 (= e!40037 e!40042)))

(declare-fun c!7929 () Bool)

(assert (=> b!60910 (= c!7929 (not (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4659 () Bool)

(assert (=> bm!4659 (= call!4663 call!4666)))

(declare-fun b!60911 () Bool)

(declare-fun e!40039 () ListLongMap!1347)

(assert (=> b!60911 (= e!40039 call!4663)))

(declare-fun bm!4660 () Bool)

(declare-fun call!4660 () Bool)

(assert (=> bm!4660 (= call!4660 (contains!682 lt!25059 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60912 () Bool)

(declare-fun e!40035 () ListLongMap!1347)

(assert (=> b!60912 (= e!40035 e!40039)))

(assert (=> b!60912 (= c!7928 (and (not (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!60913 () Bool)

(declare-fun e!40038 () Bool)

(assert (=> b!60913 (= e!40038 (= (apply!67 lt!25059 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1980 newMap!16)))))

(declare-fun b!60914 () Bool)

(declare-fun e!40046 () Bool)

(assert (=> b!60914 (= e!40046 e!40038)))

(declare-fun res!33610 () Bool)

(assert (=> b!60914 (= res!33610 call!4660)))

(assert (=> b!60914 (=> (not res!33610) (not e!40038))))

(declare-fun bm!4661 () Bool)

(assert (=> bm!4661 (= call!4662 call!4664)))

(declare-fun b!60915 () Bool)

(assert (=> b!60915 (= e!40041 (validKeyInArray!0 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!60916 () Bool)

(assert (=> b!60916 (= e!40035 (+!81 call!4666 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))))))

(declare-fun bm!4662 () Bool)

(assert (=> bm!4662 (= call!4661 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (ite c!7884 (_values!2049 newMap!16) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (index!3013 lt!24842) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16)))) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun bm!4663 () Bool)

(assert (=> bm!4663 (= call!4664 call!4661)))

(declare-fun b!60917 () Bool)

(declare-fun c!7930 () Bool)

(assert (=> b!60917 (= c!7930 (and (not (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!60917 (= e!40039 e!40045)))

(declare-fun b!60918 () Bool)

(assert (=> b!60918 (= e!40043 (= (apply!67 lt!25059 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)) (get!1081 (select (arr!1785 (ite c!7884 (_values!2049 newMap!16) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (index!3013 lt!24842) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2066 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!60918 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2016 (ite c!7884 (_values!2049 newMap!16) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (index!3013 lt!24842) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16)))))))))

(assert (=> b!60918 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(declare-fun d!11927 () Bool)

(assert (=> d!11927 e!40037))

(declare-fun res!33617 () Bool)

(assert (=> d!11927 (=> (not res!33617) (not e!40037))))

(assert (=> d!11927 (= res!33617 (or (bvsge #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))))

(declare-fun lt!25045 () ListLongMap!1347)

(assert (=> d!11927 (= lt!25059 lt!25045)))

(declare-fun lt!25061 () Unit!1613)

(assert (=> d!11927 (= lt!25061 e!40044)))

(declare-fun c!7927 () Bool)

(assert (=> d!11927 (= c!7927 e!40040)))

(declare-fun res!33613 () Bool)

(assert (=> d!11927 (=> (not res!33613) (not e!40040))))

(assert (=> d!11927 (= res!33613 (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(assert (=> d!11927 (= lt!25045 e!40035)))

(assert (=> d!11927 (= c!7931 (and (not (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11927 (validMask!0 (mask!5962 newMap!16))))

(assert (=> d!11927 (= (getCurrentListMap!390 (_keys!3694 newMap!16) (ite c!7884 (_values!2049 newMap!16) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (index!3013 lt!24842) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16)))) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)) lt!25059)))

(declare-fun b!60906 () Bool)

(assert (=> b!60906 (= e!40046 (not call!4660))))

(declare-fun b!60919 () Bool)

(declare-fun lt!25051 () Unit!1613)

(assert (=> b!60919 (= e!40044 lt!25051)))

(declare-fun lt!25053 () ListLongMap!1347)

(assert (=> b!60919 (= lt!25053 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (ite c!7884 (_values!2049 newMap!16) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (index!3013 lt!24842) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16)))) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25056 () (_ BitVec 64))

(assert (=> b!60919 (= lt!25056 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25050 () (_ BitVec 64))

(assert (=> b!60919 (= lt!25050 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25043 () Unit!1613)

(assert (=> b!60919 (= lt!25043 (addStillContains!43 lt!25053 lt!25056 (zeroValue!1980 newMap!16) lt!25050))))

(assert (=> b!60919 (contains!682 (+!81 lt!25053 (tuple2!2023 lt!25056 (zeroValue!1980 newMap!16))) lt!25050)))

(declare-fun lt!25062 () Unit!1613)

(assert (=> b!60919 (= lt!25062 lt!25043)))

(declare-fun lt!25054 () ListLongMap!1347)

(assert (=> b!60919 (= lt!25054 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (ite c!7884 (_values!2049 newMap!16) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (index!3013 lt!24842) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16)))) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25044 () (_ BitVec 64))

(assert (=> b!60919 (= lt!25044 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25064 () (_ BitVec 64))

(assert (=> b!60919 (= lt!25064 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25055 () Unit!1613)

(assert (=> b!60919 (= lt!25055 (addApplyDifferent!43 lt!25054 lt!25044 (minValue!1980 newMap!16) lt!25064))))

(assert (=> b!60919 (= (apply!67 (+!81 lt!25054 (tuple2!2023 lt!25044 (minValue!1980 newMap!16))) lt!25064) (apply!67 lt!25054 lt!25064))))

(declare-fun lt!25049 () Unit!1613)

(assert (=> b!60919 (= lt!25049 lt!25055)))

(declare-fun lt!25060 () ListLongMap!1347)

(assert (=> b!60919 (= lt!25060 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (ite c!7884 (_values!2049 newMap!16) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (index!3013 lt!24842) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16)))) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25047 () (_ BitVec 64))

(assert (=> b!60919 (= lt!25047 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25048 () (_ BitVec 64))

(assert (=> b!60919 (= lt!25048 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25063 () Unit!1613)

(assert (=> b!60919 (= lt!25063 (addApplyDifferent!43 lt!25060 lt!25047 (zeroValue!1980 newMap!16) lt!25048))))

(assert (=> b!60919 (= (apply!67 (+!81 lt!25060 (tuple2!2023 lt!25047 (zeroValue!1980 newMap!16))) lt!25048) (apply!67 lt!25060 lt!25048))))

(declare-fun lt!25058 () Unit!1613)

(assert (=> b!60919 (= lt!25058 lt!25063)))

(declare-fun lt!25057 () ListLongMap!1347)

(assert (=> b!60919 (= lt!25057 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (ite c!7884 (_values!2049 newMap!16) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (index!3013 lt!24842) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16)))) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25046 () (_ BitVec 64))

(assert (=> b!60919 (= lt!25046 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25052 () (_ BitVec 64))

(assert (=> b!60919 (= lt!25052 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!60919 (= lt!25051 (addApplyDifferent!43 lt!25057 lt!25046 (minValue!1980 newMap!16) lt!25052))))

(assert (=> b!60919 (= (apply!67 (+!81 lt!25057 (tuple2!2023 lt!25046 (minValue!1980 newMap!16))) lt!25052) (apply!67 lt!25057 lt!25052))))

(declare-fun b!60920 () Bool)

(declare-fun res!33616 () Bool)

(assert (=> b!60920 (=> (not res!33616) (not e!40037))))

(assert (=> b!60920 (= res!33616 e!40046)))

(declare-fun c!7926 () Bool)

(assert (=> b!60920 (= c!7926 (not (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (= (and d!11927 c!7931) b!60916))

(assert (= (and d!11927 (not c!7931)) b!60912))

(assert (= (and b!60912 c!7928) b!60911))

(assert (= (and b!60912 (not c!7928)) b!60917))

(assert (= (and b!60917 c!7930) b!60907))

(assert (= (and b!60917 (not c!7930)) b!60905))

(assert (= (or b!60907 b!60905) bm!4661))

(assert (= (or b!60911 bm!4661) bm!4663))

(assert (= (or b!60911 b!60907) bm!4659))

(assert (= (or b!60916 bm!4663) bm!4662))

(assert (= (or b!60916 bm!4659) bm!4658))

(assert (= (and d!11927 res!33613) b!60904))

(assert (= (and d!11927 c!7927) b!60919))

(assert (= (and d!11927 (not c!7927)) b!60902))

(assert (= (and d!11927 res!33617) b!60900))

(assert (= (and b!60900 res!33609) b!60915))

(assert (= (and b!60900 (not res!33615)) b!60909))

(assert (= (and b!60909 res!33612) b!60918))

(assert (= (and b!60900 res!33611) b!60920))

(assert (= (and b!60920 c!7926) b!60914))

(assert (= (and b!60920 (not c!7926)) b!60906))

(assert (= (and b!60914 res!33610) b!60913))

(assert (= (or b!60914 b!60906) bm!4660))

(assert (= (and b!60920 res!33616) b!60910))

(assert (= (and b!60910 c!7929) b!60903))

(assert (= (and b!60910 (not c!7929)) b!60901))

(assert (= (and b!60903 res!33614) b!60908))

(assert (= (or b!60903 b!60901) bm!4657))

(declare-fun b_lambda!2687 () Bool)

(assert (=> (not b_lambda!2687) (not b!60918)))

(declare-fun tb!1353 () Bool)

(declare-fun t!4804 () Bool)

(assert (=> (and b!60443 (= (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) (defaultEntry!2066 newMap!16)) t!4804) tb!1353))

(declare-fun result!2427 () Bool)

(assert (=> tb!1353 (= result!2427 tp_is_empty!2407)))

(assert (=> b!60918 t!4804))

(declare-fun b_and!3701 () Bool)

(assert (= b_and!3697 (and (=> t!4804 result!2427) b_and!3701)))

(declare-fun t!4806 () Bool)

(declare-fun tb!1355 () Bool)

(assert (=> (and b!60445 (= (defaultEntry!2066 newMap!16) (defaultEntry!2066 newMap!16)) t!4806) tb!1355))

(declare-fun result!2429 () Bool)

(assert (= result!2429 result!2427))

(assert (=> b!60918 t!4806))

(declare-fun b_and!3703 () Bool)

(assert (= b_and!3699 (and (=> t!4806 result!2429) b_and!3703)))

(assert (=> b!60904 m!53277))

(assert (=> b!60904 m!53277))

(assert (=> b!60904 m!53279))

(assert (=> b!60909 m!53277))

(assert (=> b!60909 m!53277))

(declare-fun m!53381 () Bool)

(assert (=> b!60909 m!53381))

(declare-fun m!53383 () Bool)

(assert (=> bm!4657 m!53383))

(declare-fun m!53385 () Bool)

(assert (=> bm!4660 m!53385))

(declare-fun m!53387 () Bool)

(assert (=> b!60918 m!53387))

(declare-fun m!53389 () Bool)

(assert (=> b!60918 m!53389))

(declare-fun m!53391 () Bool)

(assert (=> b!60918 m!53391))

(assert (=> b!60918 m!53277))

(assert (=> b!60918 m!53389))

(assert (=> b!60918 m!53277))

(declare-fun m!53393 () Bool)

(assert (=> b!60918 m!53393))

(assert (=> b!60918 m!53387))

(declare-fun m!53395 () Bool)

(assert (=> b!60913 m!53395))

(declare-fun m!53397 () Bool)

(assert (=> b!60908 m!53397))

(assert (=> d!11927 m!53287))

(declare-fun m!53399 () Bool)

(assert (=> bm!4658 m!53399))

(declare-fun m!53401 () Bool)

(assert (=> b!60916 m!53401))

(assert (=> b!60915 m!53277))

(assert (=> b!60915 m!53277))

(assert (=> b!60915 m!53279))

(declare-fun m!53403 () Bool)

(assert (=> bm!4662 m!53403))

(declare-fun m!53405 () Bool)

(assert (=> b!60919 m!53405))

(declare-fun m!53407 () Bool)

(assert (=> b!60919 m!53407))

(declare-fun m!53409 () Bool)

(assert (=> b!60919 m!53409))

(assert (=> b!60919 m!53277))

(declare-fun m!53411 () Bool)

(assert (=> b!60919 m!53411))

(declare-fun m!53413 () Bool)

(assert (=> b!60919 m!53413))

(declare-fun m!53415 () Bool)

(assert (=> b!60919 m!53415))

(declare-fun m!53417 () Bool)

(assert (=> b!60919 m!53417))

(declare-fun m!53419 () Bool)

(assert (=> b!60919 m!53419))

(declare-fun m!53421 () Bool)

(assert (=> b!60919 m!53421))

(declare-fun m!53423 () Bool)

(assert (=> b!60919 m!53423))

(assert (=> b!60919 m!53421))

(declare-fun m!53425 () Bool)

(assert (=> b!60919 m!53425))

(declare-fun m!53427 () Bool)

(assert (=> b!60919 m!53427))

(assert (=> b!60919 m!53427))

(declare-fun m!53429 () Bool)

(assert (=> b!60919 m!53429))

(declare-fun m!53431 () Bool)

(assert (=> b!60919 m!53431))

(assert (=> b!60919 m!53407))

(declare-fun m!53433 () Bool)

(assert (=> b!60919 m!53433))

(assert (=> b!60919 m!53417))

(assert (=> b!60919 m!53403))

(assert (=> bm!4606 d!11927))

(declare-fun d!11929 () Bool)

(declare-fun e!40049 () Bool)

(assert (=> d!11929 e!40049))

(declare-fun res!33620 () Bool)

(assert (=> d!11929 (=> (not res!33620) (not e!40049))))

(assert (=> d!11929 (= res!33620 (and (bvsge (index!3013 lt!24842) #b00000000000000000000000000000000) (bvslt (index!3013 lt!24842) (size!2015 (_keys!3694 newMap!16)))))))

(declare-fun lt!25067 () Unit!1613)

(declare-fun choose!324 (array!3729 array!3731 (_ BitVec 32) (_ BitVec 32) V!2857 V!2857 (_ BitVec 32) Int) Unit!1613)

(assert (=> d!11929 (= lt!25067 (choose!324 (_keys!3694 newMap!16) lt!24849 (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) (index!3013 lt!24842) (defaultEntry!2066 newMap!16)))))

(assert (=> d!11929 (validMask!0 (mask!5962 newMap!16))))

(assert (=> d!11929 (= (lemmaValidKeyInArrayIsInListMap!76 (_keys!3694 newMap!16) lt!24849 (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) (index!3013 lt!24842) (defaultEntry!2066 newMap!16)) lt!25067)))

(declare-fun b!60923 () Bool)

(assert (=> b!60923 (= e!40049 (contains!682 (getCurrentListMap!390 (_keys!3694 newMap!16) lt!24849 (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)) (select (arr!1784 (_keys!3694 newMap!16)) (index!3013 lt!24842))))))

(assert (= (and d!11929 res!33620) b!60923))

(declare-fun m!53435 () Bool)

(assert (=> d!11929 m!53435))

(assert (=> d!11929 m!53287))

(declare-fun m!53437 () Bool)

(assert (=> b!60923 m!53437))

(assert (=> b!60923 m!53185))

(assert (=> b!60923 m!53437))

(assert (=> b!60923 m!53185))

(declare-fun m!53439 () Bool)

(assert (=> b!60923 m!53439))

(assert (=> b!60736 d!11929))

(declare-fun d!11931 () Bool)

(declare-fun e!40052 () Bool)

(assert (=> d!11931 e!40052))

(declare-fun res!33623 () Bool)

(assert (=> d!11931 (=> (not res!33623) (not e!40052))))

(assert (=> d!11931 (= res!33623 (and (bvsge (index!3013 lt!24842) #b00000000000000000000000000000000) (bvslt (index!3013 lt!24842) (size!2016 (_values!2049 newMap!16)))))))

(declare-fun lt!25070 () Unit!1613)

(declare-fun choose!325 (array!3729 array!3731 (_ BitVec 32) (_ BitVec 32) V!2857 V!2857 (_ BitVec 32) (_ BitVec 64) V!2857 Int) Unit!1613)

(assert (=> d!11931 (= lt!25070 (choose!325 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) (index!3013 lt!24842) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2066 newMap!16)))))

(assert (=> d!11931 (validMask!0 (mask!5962 newMap!16))))

(assert (=> d!11931 (= (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!16 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) (index!3013 lt!24842) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2066 newMap!16)) lt!25070)))

(declare-fun b!60926 () Bool)

(assert (=> b!60926 (= e!40052 (= (+!81 (getCurrentListMap!390 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!390 (_keys!3694 newMap!16) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (index!3013 lt!24842) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16))) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16))))))

(assert (= (and d!11931 res!33623) b!60926))

(assert (=> d!11931 m!52989))

(assert (=> d!11931 m!53013))

(declare-fun m!53441 () Bool)

(assert (=> d!11931 m!53441))

(assert (=> d!11931 m!53287))

(assert (=> b!60926 m!53203))

(assert (=> b!60926 m!53203))

(assert (=> b!60926 m!53311))

(assert (=> b!60926 m!53165))

(declare-fun m!53443 () Bool)

(assert (=> b!60926 m!53443))

(assert (=> b!60736 d!11931))

(declare-fun d!11933 () Bool)

(declare-fun e!40054 () Bool)

(assert (=> d!11933 e!40054))

(declare-fun res!33624 () Bool)

(assert (=> d!11933 (=> res!33624 e!40054)))

(declare-fun lt!25073 () Bool)

(assert (=> d!11933 (= res!33624 (not lt!25073))))

(declare-fun lt!25074 () Bool)

(assert (=> d!11933 (= lt!25073 lt!25074)))

(declare-fun lt!25071 () Unit!1613)

(declare-fun e!40053 () Unit!1613)

(assert (=> d!11933 (= lt!25071 e!40053)))

(declare-fun c!7932 () Bool)

(assert (=> d!11933 (= c!7932 lt!25074)))

(assert (=> d!11933 (= lt!25074 (containsKey!129 (toList!689 call!4609) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(assert (=> d!11933 (= (contains!682 call!4609 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) lt!25073)))

(declare-fun b!60927 () Bool)

(declare-fun lt!25072 () Unit!1613)

(assert (=> b!60927 (= e!40053 lt!25072)))

(assert (=> b!60927 (= lt!25072 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 call!4609) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(assert (=> b!60927 (isDefined!78 (getValueByKey!126 (toList!689 call!4609) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(declare-fun b!60928 () Bool)

(declare-fun Unit!1629 () Unit!1613)

(assert (=> b!60928 (= e!40053 Unit!1629)))

(declare-fun b!60929 () Bool)

(assert (=> b!60929 (= e!40054 (isDefined!78 (getValueByKey!126 (toList!689 call!4609) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355))))))

(assert (= (and d!11933 c!7932) b!60927))

(assert (= (and d!11933 (not c!7932)) b!60928))

(assert (= (and d!11933 (not res!33624)) b!60929))

(assert (=> d!11933 m!52989))

(declare-fun m!53445 () Bool)

(assert (=> d!11933 m!53445))

(assert (=> b!60927 m!52989))

(declare-fun m!53447 () Bool)

(assert (=> b!60927 m!53447))

(assert (=> b!60927 m!52989))

(declare-fun m!53449 () Bool)

(assert (=> b!60927 m!53449))

(assert (=> b!60927 m!53449))

(declare-fun m!53451 () Bool)

(assert (=> b!60927 m!53451))

(assert (=> b!60929 m!52989))

(assert (=> b!60929 m!53449))

(assert (=> b!60929 m!53449))

(assert (=> b!60929 m!53451))

(assert (=> b!60736 d!11933))

(declare-fun b!60938 () Bool)

(declare-fun e!40060 () (_ BitVec 32))

(declare-fun call!4669 () (_ BitVec 32))

(assert (=> b!60938 (= e!40060 call!4669)))

(declare-fun d!11935 () Bool)

(declare-fun lt!25077 () (_ BitVec 32))

(assert (=> d!11935 (and (bvsge lt!25077 #b00000000000000000000000000000000) (bvsle lt!25077 (bvsub (size!2015 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!40059 () (_ BitVec 32))

(assert (=> d!11935 (= lt!25077 e!40059)))

(declare-fun c!7938 () Bool)

(assert (=> d!11935 (= c!7938 (bvsge #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(assert (=> d!11935 (and (bvsle #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2015 (_keys!3694 newMap!16)) (size!2015 (_keys!3694 newMap!16))))))

(assert (=> d!11935 (= (arrayCountValidKeys!0 (_keys!3694 newMap!16) #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))) lt!25077)))

(declare-fun bm!4666 () Bool)

(assert (=> bm!4666 (= call!4669 (arrayCountValidKeys!0 (_keys!3694 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2015 (_keys!3694 newMap!16))))))

(declare-fun b!60939 () Bool)

(assert (=> b!60939 (= e!40059 e!40060)))

(declare-fun c!7937 () Bool)

(assert (=> b!60939 (= c!7937 (validKeyInArray!0 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!60940 () Bool)

(assert (=> b!60940 (= e!40060 (bvadd #b00000000000000000000000000000001 call!4669))))

(declare-fun b!60941 () Bool)

(assert (=> b!60941 (= e!40059 #b00000000000000000000000000000000)))

(assert (= (and d!11935 c!7938) b!60941))

(assert (= (and d!11935 (not c!7938)) b!60939))

(assert (= (and b!60939 c!7937) b!60940))

(assert (= (and b!60939 (not c!7937)) b!60938))

(assert (= (or b!60940 b!60938) bm!4666))

(declare-fun m!53453 () Bool)

(assert (=> bm!4666 m!53453))

(assert (=> b!60939 m!53277))

(assert (=> b!60939 m!53277))

(assert (=> b!60939 m!53279))

(assert (=> b!60607 d!11935))

(declare-fun d!11937 () Bool)

(declare-fun e!40061 () Bool)

(assert (=> d!11937 e!40061))

(declare-fun res!33626 () Bool)

(assert (=> d!11937 (=> (not res!33626) (not e!40061))))

(declare-fun lt!25079 () ListLongMap!1347)

(assert (=> d!11937 (= res!33626 (contains!682 lt!25079 (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!25081 () List!1426)

(assert (=> d!11937 (= lt!25079 (ListLongMap!1348 lt!25081))))

(declare-fun lt!25080 () Unit!1613)

(declare-fun lt!25078 () Unit!1613)

(assert (=> d!11937 (= lt!25080 lt!25078)))

(assert (=> d!11937 (= (getValueByKey!126 lt!25081 (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!131 (_2!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11937 (= lt!25078 (lemmaContainsTupThenGetReturnValue!43 lt!25081 (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11937 (= lt!25081 (insertStrictlySorted!46 (toList!689 call!4602) (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11937 (= (+!81 call!4602 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!25079)))

(declare-fun b!60942 () Bool)

(declare-fun res!33625 () Bool)

(assert (=> b!60942 (=> (not res!33625) (not e!40061))))

(assert (=> b!60942 (= res!33625 (= (getValueByKey!126 (toList!689 lt!25079) (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!131 (_2!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!60943 () Bool)

(assert (=> b!60943 (= e!40061 (contains!685 (toList!689 lt!25079) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!11937 res!33626) b!60942))

(assert (= (and b!60942 res!33625) b!60943))

(declare-fun m!53455 () Bool)

(assert (=> d!11937 m!53455))

(declare-fun m!53457 () Bool)

(assert (=> d!11937 m!53457))

(declare-fun m!53459 () Bool)

(assert (=> d!11937 m!53459))

(declare-fun m!53461 () Bool)

(assert (=> d!11937 m!53461))

(declare-fun m!53463 () Bool)

(assert (=> b!60942 m!53463))

(declare-fun m!53465 () Bool)

(assert (=> b!60943 m!53465))

(assert (=> b!60716 d!11937))

(declare-fun d!11939 () Bool)

(declare-fun get!1085 (Option!132) V!2857)

(assert (=> d!11939 (= (apply!67 lt!24917 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1085 (getValueByKey!126 (toList!689 lt!24917) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2634 () Bool)

(assert (= bs!2634 d!11939))

(assert (=> bs!2634 m!53377))

(assert (=> bs!2634 m!53377))

(declare-fun m!53467 () Bool)

(assert (=> bs!2634 m!53467))

(assert (=> b!60800 d!11939))

(declare-fun b!60956 () Bool)

(declare-fun e!40068 () SeekEntryResult!222)

(declare-fun e!40069 () SeekEntryResult!222)

(assert (=> b!60956 (= e!40068 e!40069)))

(declare-fun lt!25090 () (_ BitVec 64))

(declare-fun lt!25088 () SeekEntryResult!222)

(assert (=> b!60956 (= lt!25090 (select (arr!1784 (_keys!3694 newMap!16)) (index!3014 lt!25088)))))

(declare-fun c!7947 () Bool)

(assert (=> b!60956 (= c!7947 (= lt!25090 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(declare-fun e!40070 () SeekEntryResult!222)

(declare-fun b!60957 () Bool)

(declare-fun seekKeyOrZeroReturnVacant!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!3729 (_ BitVec 32)) SeekEntryResult!222)

(assert (=> b!60957 (= e!40070 (seekKeyOrZeroReturnVacant!0 (x!10156 lt!25088) (index!3014 lt!25088) (index!3014 lt!25088) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (_keys!3694 newMap!16) (mask!5962 newMap!16)))))

(declare-fun b!60958 () Bool)

(declare-fun c!7945 () Bool)

(assert (=> b!60958 (= c!7945 (= lt!25090 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!60958 (= e!40069 e!40070)))

(declare-fun b!60959 () Bool)

(assert (=> b!60959 (= e!40068 Undefined!222)))

(declare-fun b!60960 () Bool)

(assert (=> b!60960 (= e!40070 (MissingZero!222 (index!3014 lt!25088)))))

(declare-fun d!11941 () Bool)

(declare-fun lt!25089 () SeekEntryResult!222)

(assert (=> d!11941 (and (or ((_ is Undefined!222) lt!25089) (not ((_ is Found!222) lt!25089)) (and (bvsge (index!3013 lt!25089) #b00000000000000000000000000000000) (bvslt (index!3013 lt!25089) (size!2015 (_keys!3694 newMap!16))))) (or ((_ is Undefined!222) lt!25089) ((_ is Found!222) lt!25089) (not ((_ is MissingZero!222) lt!25089)) (and (bvsge (index!3012 lt!25089) #b00000000000000000000000000000000) (bvslt (index!3012 lt!25089) (size!2015 (_keys!3694 newMap!16))))) (or ((_ is Undefined!222) lt!25089) ((_ is Found!222) lt!25089) ((_ is MissingZero!222) lt!25089) (not ((_ is MissingVacant!222) lt!25089)) (and (bvsge (index!3015 lt!25089) #b00000000000000000000000000000000) (bvslt (index!3015 lt!25089) (size!2015 (_keys!3694 newMap!16))))) (or ((_ is Undefined!222) lt!25089) (ite ((_ is Found!222) lt!25089) (= (select (arr!1784 (_keys!3694 newMap!16)) (index!3013 lt!25089)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (ite ((_ is MissingZero!222) lt!25089) (= (select (arr!1784 (_keys!3694 newMap!16)) (index!3012 lt!25089)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!222) lt!25089) (= (select (arr!1784 (_keys!3694 newMap!16)) (index!3015 lt!25089)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!11941 (= lt!25089 e!40068)))

(declare-fun c!7946 () Bool)

(assert (=> d!11941 (= c!7946 (and ((_ is Intermediate!222) lt!25088) (undefined!1034 lt!25088)))))

(declare-fun seekKeyOrZeroOrLongMinValue!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!3729 (_ BitVec 32)) SeekEntryResult!222)

(declare-fun toIndex!0 ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))

(assert (=> d!11941 (= lt!25088 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (mask!5962 newMap!16)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (_keys!3694 newMap!16) (mask!5962 newMap!16)))))

(assert (=> d!11941 (validMask!0 (mask!5962 newMap!16))))

(assert (=> d!11941 (= (seekEntryOrOpen!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (_keys!3694 newMap!16) (mask!5962 newMap!16)) lt!25089)))

(declare-fun b!60961 () Bool)

(assert (=> b!60961 (= e!40069 (Found!222 (index!3014 lt!25088)))))

(assert (= (and d!11941 c!7946) b!60959))

(assert (= (and d!11941 (not c!7946)) b!60956))

(assert (= (and b!60956 c!7947) b!60961))

(assert (= (and b!60956 (not c!7947)) b!60958))

(assert (= (and b!60958 c!7945) b!60960))

(assert (= (and b!60958 (not c!7945)) b!60957))

(declare-fun m!53469 () Bool)

(assert (=> b!60956 m!53469))

(assert (=> b!60957 m!52989))

(declare-fun m!53471 () Bool)

(assert (=> b!60957 m!53471))

(declare-fun m!53473 () Bool)

(assert (=> d!11941 m!53473))

(assert (=> d!11941 m!52989))

(declare-fun m!53475 () Bool)

(assert (=> d!11941 m!53475))

(assert (=> d!11941 m!53287))

(declare-fun m!53477 () Bool)

(assert (=> d!11941 m!53477))

(declare-fun m!53479 () Bool)

(assert (=> d!11941 m!53479))

(assert (=> d!11941 m!52989))

(assert (=> d!11941 m!53473))

(declare-fun m!53481 () Bool)

(assert (=> d!11941 m!53481))

(assert (=> b!60730 d!11941))

(declare-fun d!11943 () Bool)

(assert (=> d!11943 (= (get!1084 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!60744 d!11943))

(declare-fun d!11945 () Bool)

(declare-fun e!40072 () Bool)

(assert (=> d!11945 e!40072))

(declare-fun res!33627 () Bool)

(assert (=> d!11945 (=> res!33627 e!40072)))

(declare-fun lt!25093 () Bool)

(assert (=> d!11945 (= res!33627 (not lt!25093))))

(declare-fun lt!25094 () Bool)

(assert (=> d!11945 (= lt!25093 lt!25094)))

(declare-fun lt!25091 () Unit!1613)

(declare-fun e!40071 () Unit!1613)

(assert (=> d!11945 (= lt!25091 e!40071)))

(declare-fun c!7948 () Bool)

(assert (=> d!11945 (= c!7948 lt!25094)))

(assert (=> d!11945 (= lt!25094 (containsKey!129 (toList!689 lt!24917) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!11945 (= (contains!682 lt!24917 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!25093)))

(declare-fun b!60962 () Bool)

(declare-fun lt!25092 () Unit!1613)

(assert (=> b!60962 (= e!40071 lt!25092)))

(assert (=> b!60962 (= lt!25092 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 lt!24917) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!60962 (isDefined!78 (getValueByKey!126 (toList!689 lt!24917) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!60963 () Bool)

(declare-fun Unit!1630 () Unit!1613)

(assert (=> b!60963 (= e!40071 Unit!1630)))

(declare-fun b!60964 () Bool)

(assert (=> b!60964 (= e!40072 (isDefined!78 (getValueByKey!126 (toList!689 lt!24917) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!11945 c!7948) b!60962))

(assert (= (and d!11945 (not c!7948)) b!60963))

(assert (= (and d!11945 (not res!33627)) b!60964))

(assert (=> d!11945 m!53115))

(declare-fun m!53483 () Bool)

(assert (=> d!11945 m!53483))

(assert (=> b!60962 m!53115))

(declare-fun m!53485 () Bool)

(assert (=> b!60962 m!53485))

(assert (=> b!60962 m!53115))

(declare-fun m!53487 () Bool)

(assert (=> b!60962 m!53487))

(assert (=> b!60962 m!53487))

(declare-fun m!53489 () Bool)

(assert (=> b!60962 m!53489))

(assert (=> b!60964 m!53115))

(assert (=> b!60964 m!53487))

(assert (=> b!60964 m!53487))

(assert (=> b!60964 m!53489))

(assert (=> b!60796 d!11945))

(declare-fun b!60965 () Bool)

(declare-fun res!33630 () Bool)

(declare-fun e!40076 () Bool)

(assert (=> b!60965 (=> (not res!33630) (not e!40076))))

(declare-fun e!40075 () Bool)

(assert (=> b!60965 (= res!33630 e!40075)))

(declare-fun res!33634 () Bool)

(assert (=> b!60965 (=> res!33634 e!40075)))

(declare-fun e!40080 () Bool)

(assert (=> b!60965 (= res!33634 (not e!40080))))

(declare-fun res!33628 () Bool)

(assert (=> b!60965 (=> (not res!33628) (not e!40080))))

(assert (=> b!60965 (= res!33628 (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(declare-fun b!60966 () Bool)

(declare-fun e!40081 () Bool)

(declare-fun call!4675 () Bool)

(assert (=> b!60966 (= e!40081 (not call!4675))))

(declare-fun bm!4667 () Bool)

(declare-fun lt!25111 () ListLongMap!1347)

(assert (=> bm!4667 (= call!4675 (contains!682 lt!25111 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60967 () Bool)

(declare-fun e!40083 () Unit!1613)

(declare-fun Unit!1631 () Unit!1613)

(assert (=> b!60967 (= e!40083 Unit!1631)))

(declare-fun b!60968 () Bool)

(declare-fun e!40073 () Bool)

(assert (=> b!60968 (= e!40081 e!40073)))

(declare-fun res!33633 () Bool)

(assert (=> b!60968 (= res!33633 call!4675)))

(assert (=> b!60968 (=> (not res!33633) (not e!40073))))

(declare-fun b!60969 () Bool)

(declare-fun e!40079 () Bool)

(assert (=> b!60969 (= e!40079 (validKeyInArray!0 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!60970 () Bool)

(declare-fun e!40084 () ListLongMap!1347)

(declare-fun call!4672 () ListLongMap!1347)

(assert (=> b!60970 (= e!40084 call!4672)))

(declare-fun call!4671 () ListLongMap!1347)

(declare-fun bm!4668 () Bool)

(declare-fun call!4674 () ListLongMap!1347)

(declare-fun c!7954 () Bool)

(declare-fun call!4676 () ListLongMap!1347)

(declare-fun c!7951 () Bool)

(assert (=> bm!4668 (= call!4676 (+!81 (ite c!7954 call!4671 (ite c!7951 call!4674 call!4672)) (ite (or c!7954 c!7951) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))))))

(declare-fun b!60972 () Bool)

(declare-fun call!4673 () ListLongMap!1347)

(assert (=> b!60972 (= e!40084 call!4673)))

(declare-fun b!60973 () Bool)

(assert (=> b!60973 (= e!40073 (= (apply!67 lt!25111 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1980 newMap!16)))))

(declare-fun b!60974 () Bool)

(declare-fun e!40082 () Bool)

(assert (=> b!60974 (= e!40075 e!40082)))

(declare-fun res!33631 () Bool)

(assert (=> b!60974 (=> (not res!33631) (not e!40082))))

(assert (=> b!60974 (= res!33631 (contains!682 lt!25111 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!60974 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(declare-fun b!60975 () Bool)

(assert (=> b!60975 (= e!40076 e!40081)))

(declare-fun c!7952 () Bool)

(assert (=> b!60975 (= c!7952 (not (= (bvand (ite (and c!7887 c!7877) lt!24853 (extraKeys!1949 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4669 () Bool)

(assert (=> bm!4669 (= call!4673 call!4676)))

(declare-fun b!60976 () Bool)

(declare-fun e!40078 () ListLongMap!1347)

(assert (=> b!60976 (= e!40078 call!4673)))

(declare-fun bm!4670 () Bool)

(declare-fun call!4670 () Bool)

(assert (=> bm!4670 (= call!4670 (contains!682 lt!25111 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!60977 () Bool)

(declare-fun e!40074 () ListLongMap!1347)

(assert (=> b!60977 (= e!40074 e!40078)))

(assert (=> b!60977 (= c!7951 (and (not (= (bvand (ite (and c!7887 c!7877) lt!24853 (extraKeys!1949 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite (and c!7887 c!7877) lt!24853 (extraKeys!1949 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!60978 () Bool)

(declare-fun e!40077 () Bool)

(assert (=> b!60978 (= e!40077 (= (apply!67 lt!25111 #b0000000000000000000000000000000000000000000000000000000000000000) (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16))))))

(declare-fun b!60979 () Bool)

(declare-fun e!40085 () Bool)

(assert (=> b!60979 (= e!40085 e!40077)))

(declare-fun res!33629 () Bool)

(assert (=> b!60979 (= res!33629 call!4670)))

(assert (=> b!60979 (=> (not res!33629) (not e!40077))))

(declare-fun bm!4671 () Bool)

(assert (=> bm!4671 (= call!4672 call!4674)))

(declare-fun b!60980 () Bool)

(assert (=> b!60980 (= e!40080 (validKeyInArray!0 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!60981 () Bool)

(assert (=> b!60981 (= e!40074 (+!81 call!4676 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))))))

(declare-fun bm!4672 () Bool)

(assert (=> bm!4672 (= call!4671 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (ite (and c!7887 c!7877) lt!24853 (extraKeys!1949 newMap!16)) (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16)) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun bm!4673 () Bool)

(assert (=> bm!4673 (= call!4674 call!4671)))

(declare-fun c!7953 () Bool)

(declare-fun b!60982 () Bool)

(assert (=> b!60982 (= c!7953 (and (not (= (bvand (ite (and c!7887 c!7877) lt!24853 (extraKeys!1949 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite (and c!7887 c!7877) lt!24853 (extraKeys!1949 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!60982 (= e!40078 e!40084)))

(declare-fun b!60983 () Bool)

(assert (=> b!60983 (= e!40082 (= (apply!67 lt!25111 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)) (get!1081 (select (arr!1785 (_values!2049 newMap!16)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2066 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!60983 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2016 (_values!2049 newMap!16))))))

(assert (=> b!60983 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(declare-fun d!11947 () Bool)

(assert (=> d!11947 e!40076))

(declare-fun res!33636 () Bool)

(assert (=> d!11947 (=> (not res!33636) (not e!40076))))

(assert (=> d!11947 (= res!33636 (or (bvsge #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))))

(declare-fun lt!25097 () ListLongMap!1347)

(assert (=> d!11947 (= lt!25111 lt!25097)))

(declare-fun lt!25113 () Unit!1613)

(assert (=> d!11947 (= lt!25113 e!40083)))

(declare-fun c!7950 () Bool)

(assert (=> d!11947 (= c!7950 e!40079)))

(declare-fun res!33632 () Bool)

(assert (=> d!11947 (=> (not res!33632) (not e!40079))))

(assert (=> d!11947 (= res!33632 (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(assert (=> d!11947 (= lt!25097 e!40074)))

(assert (=> d!11947 (= c!7954 (and (not (= (bvand (ite (and c!7887 c!7877) lt!24853 (extraKeys!1949 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite (and c!7887 c!7877) lt!24853 (extraKeys!1949 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!11947 (validMask!0 (mask!5962 newMap!16))))

(assert (=> d!11947 (= (getCurrentListMap!390 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (ite (and c!7887 c!7877) lt!24853 (extraKeys!1949 newMap!16)) (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16)) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)) lt!25111)))

(declare-fun b!60971 () Bool)

(assert (=> b!60971 (= e!40085 (not call!4670))))

(declare-fun b!60984 () Bool)

(declare-fun lt!25103 () Unit!1613)

(assert (=> b!60984 (= e!40083 lt!25103)))

(declare-fun lt!25105 () ListLongMap!1347)

(assert (=> b!60984 (= lt!25105 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (ite (and c!7887 c!7877) lt!24853 (extraKeys!1949 newMap!16)) (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16)) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25108 () (_ BitVec 64))

(assert (=> b!60984 (= lt!25108 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25102 () (_ BitVec 64))

(assert (=> b!60984 (= lt!25102 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25095 () Unit!1613)

(assert (=> b!60984 (= lt!25095 (addStillContains!43 lt!25105 lt!25108 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16)) lt!25102))))

(assert (=> b!60984 (contains!682 (+!81 lt!25105 (tuple2!2023 lt!25108 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16)))) lt!25102)))

(declare-fun lt!25114 () Unit!1613)

(assert (=> b!60984 (= lt!25114 lt!25095)))

(declare-fun lt!25106 () ListLongMap!1347)

(assert (=> b!60984 (= lt!25106 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (ite (and c!7887 c!7877) lt!24853 (extraKeys!1949 newMap!16)) (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16)) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25096 () (_ BitVec 64))

(assert (=> b!60984 (= lt!25096 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25116 () (_ BitVec 64))

(assert (=> b!60984 (= lt!25116 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25107 () Unit!1613)

(assert (=> b!60984 (= lt!25107 (addApplyDifferent!43 lt!25106 lt!25096 (minValue!1980 newMap!16) lt!25116))))

(assert (=> b!60984 (= (apply!67 (+!81 lt!25106 (tuple2!2023 lt!25096 (minValue!1980 newMap!16))) lt!25116) (apply!67 lt!25106 lt!25116))))

(declare-fun lt!25101 () Unit!1613)

(assert (=> b!60984 (= lt!25101 lt!25107)))

(declare-fun lt!25112 () ListLongMap!1347)

(assert (=> b!60984 (= lt!25112 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (ite (and c!7887 c!7877) lt!24853 (extraKeys!1949 newMap!16)) (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16)) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25099 () (_ BitVec 64))

(assert (=> b!60984 (= lt!25099 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25100 () (_ BitVec 64))

(assert (=> b!60984 (= lt!25100 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25115 () Unit!1613)

(assert (=> b!60984 (= lt!25115 (addApplyDifferent!43 lt!25112 lt!25099 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16)) lt!25100))))

(assert (=> b!60984 (= (apply!67 (+!81 lt!25112 (tuple2!2023 lt!25099 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16)))) lt!25100) (apply!67 lt!25112 lt!25100))))

(declare-fun lt!25110 () Unit!1613)

(assert (=> b!60984 (= lt!25110 lt!25115)))

(declare-fun lt!25109 () ListLongMap!1347)

(assert (=> b!60984 (= lt!25109 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (ite (and c!7887 c!7877) lt!24853 (extraKeys!1949 newMap!16)) (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16)) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25098 () (_ BitVec 64))

(assert (=> b!60984 (= lt!25098 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25104 () (_ BitVec 64))

(assert (=> b!60984 (= lt!25104 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!60984 (= lt!25103 (addApplyDifferent!43 lt!25109 lt!25098 (minValue!1980 newMap!16) lt!25104))))

(assert (=> b!60984 (= (apply!67 (+!81 lt!25109 (tuple2!2023 lt!25098 (minValue!1980 newMap!16))) lt!25104) (apply!67 lt!25109 lt!25104))))

(declare-fun b!60985 () Bool)

(declare-fun res!33635 () Bool)

(assert (=> b!60985 (=> (not res!33635) (not e!40076))))

(assert (=> b!60985 (= res!33635 e!40085)))

(declare-fun c!7949 () Bool)

(assert (=> b!60985 (= c!7949 (not (= (bvand (ite (and c!7887 c!7877) lt!24853 (extraKeys!1949 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (= (and d!11947 c!7954) b!60981))

(assert (= (and d!11947 (not c!7954)) b!60977))

(assert (= (and b!60977 c!7951) b!60976))

(assert (= (and b!60977 (not c!7951)) b!60982))

(assert (= (and b!60982 c!7953) b!60972))

(assert (= (and b!60982 (not c!7953)) b!60970))

(assert (= (or b!60972 b!60970) bm!4671))

(assert (= (or b!60976 bm!4671) bm!4673))

(assert (= (or b!60976 b!60972) bm!4669))

(assert (= (or b!60981 bm!4673) bm!4672))

(assert (= (or b!60981 bm!4669) bm!4668))

(assert (= (and d!11947 res!33632) b!60969))

(assert (= (and d!11947 c!7950) b!60984))

(assert (= (and d!11947 (not c!7950)) b!60967))

(assert (= (and d!11947 res!33636) b!60965))

(assert (= (and b!60965 res!33628) b!60980))

(assert (= (and b!60965 (not res!33634)) b!60974))

(assert (= (and b!60974 res!33631) b!60983))

(assert (= (and b!60965 res!33630) b!60985))

(assert (= (and b!60985 c!7949) b!60979))

(assert (= (and b!60985 (not c!7949)) b!60971))

(assert (= (and b!60979 res!33629) b!60978))

(assert (= (or b!60979 b!60971) bm!4670))

(assert (= (and b!60985 res!33635) b!60975))

(assert (= (and b!60975 c!7952) b!60968))

(assert (= (and b!60975 (not c!7952)) b!60966))

(assert (= (and b!60968 res!33633) b!60973))

(assert (= (or b!60968 b!60966) bm!4667))

(declare-fun b_lambda!2689 () Bool)

(assert (=> (not b_lambda!2689) (not b!60983)))

(assert (=> b!60983 t!4804))

(declare-fun b_and!3705 () Bool)

(assert (= b_and!3701 (and (=> t!4804 result!2427) b_and!3705)))

(assert (=> b!60983 t!4806))

(declare-fun b_and!3707 () Bool)

(assert (= b_and!3703 (and (=> t!4806 result!2429) b_and!3707)))

(assert (=> b!60969 m!53277))

(assert (=> b!60969 m!53277))

(assert (=> b!60969 m!53279))

(assert (=> b!60974 m!53277))

(assert (=> b!60974 m!53277))

(declare-fun m!53491 () Bool)

(assert (=> b!60974 m!53491))

(declare-fun m!53493 () Bool)

(assert (=> bm!4667 m!53493))

(declare-fun m!53495 () Bool)

(assert (=> bm!4670 m!53495))

(declare-fun m!53497 () Bool)

(assert (=> b!60983 m!53497))

(assert (=> b!60983 m!53389))

(declare-fun m!53499 () Bool)

(assert (=> b!60983 m!53499))

(assert (=> b!60983 m!53277))

(assert (=> b!60983 m!53389))

(assert (=> b!60983 m!53277))

(declare-fun m!53501 () Bool)

(assert (=> b!60983 m!53501))

(assert (=> b!60983 m!53497))

(declare-fun m!53503 () Bool)

(assert (=> b!60978 m!53503))

(declare-fun m!53505 () Bool)

(assert (=> b!60973 m!53505))

(assert (=> d!11947 m!53287))

(declare-fun m!53507 () Bool)

(assert (=> bm!4668 m!53507))

(declare-fun m!53509 () Bool)

(assert (=> b!60981 m!53509))

(assert (=> b!60980 m!53277))

(assert (=> b!60980 m!53277))

(assert (=> b!60980 m!53279))

(declare-fun m!53511 () Bool)

(assert (=> bm!4672 m!53511))

(declare-fun m!53513 () Bool)

(assert (=> b!60984 m!53513))

(declare-fun m!53515 () Bool)

(assert (=> b!60984 m!53515))

(declare-fun m!53517 () Bool)

(assert (=> b!60984 m!53517))

(assert (=> b!60984 m!53277))

(declare-fun m!53519 () Bool)

(assert (=> b!60984 m!53519))

(declare-fun m!53521 () Bool)

(assert (=> b!60984 m!53521))

(declare-fun m!53523 () Bool)

(assert (=> b!60984 m!53523))

(declare-fun m!53525 () Bool)

(assert (=> b!60984 m!53525))

(declare-fun m!53527 () Bool)

(assert (=> b!60984 m!53527))

(declare-fun m!53529 () Bool)

(assert (=> b!60984 m!53529))

(declare-fun m!53531 () Bool)

(assert (=> b!60984 m!53531))

(assert (=> b!60984 m!53529))

(declare-fun m!53533 () Bool)

(assert (=> b!60984 m!53533))

(declare-fun m!53535 () Bool)

(assert (=> b!60984 m!53535))

(assert (=> b!60984 m!53535))

(declare-fun m!53537 () Bool)

(assert (=> b!60984 m!53537))

(declare-fun m!53539 () Bool)

(assert (=> b!60984 m!53539))

(assert (=> b!60984 m!53515))

(declare-fun m!53541 () Bool)

(assert (=> b!60984 m!53541))

(assert (=> b!60984 m!53525))

(assert (=> b!60984 m!53511))

(assert (=> bm!4604 d!11947))

(declare-fun d!11949 () Bool)

(declare-fun e!40087 () Bool)

(assert (=> d!11949 e!40087))

(declare-fun res!33637 () Bool)

(assert (=> d!11949 (=> res!33637 e!40087)))

(declare-fun lt!25119 () Bool)

(assert (=> d!11949 (= res!33637 (not lt!25119))))

(declare-fun lt!25120 () Bool)

(assert (=> d!11949 (= lt!25119 lt!25120)))

(declare-fun lt!25117 () Unit!1613)

(declare-fun e!40086 () Unit!1613)

(assert (=> d!11949 (= lt!25117 e!40086)))

(declare-fun c!7955 () Bool)

(assert (=> d!11949 (= c!7955 lt!25120)))

(assert (=> d!11949 (= lt!25120 (containsKey!129 (toList!689 e!39931) (ite c!7884 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (select (arr!1784 (_keys!3694 newMap!16)) (index!3013 lt!24842)))))))

(assert (=> d!11949 (= (contains!682 e!39931 (ite c!7884 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (select (arr!1784 (_keys!3694 newMap!16)) (index!3013 lt!24842)))) lt!25119)))

(declare-fun b!60986 () Bool)

(declare-fun lt!25118 () Unit!1613)

(assert (=> b!60986 (= e!40086 lt!25118)))

(assert (=> b!60986 (= lt!25118 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 e!39931) (ite c!7884 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (select (arr!1784 (_keys!3694 newMap!16)) (index!3013 lt!24842)))))))

(assert (=> b!60986 (isDefined!78 (getValueByKey!126 (toList!689 e!39931) (ite c!7884 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (select (arr!1784 (_keys!3694 newMap!16)) (index!3013 lt!24842)))))))

(declare-fun b!60987 () Bool)

(declare-fun Unit!1632 () Unit!1613)

(assert (=> b!60987 (= e!40086 Unit!1632)))

(declare-fun b!60988 () Bool)

(assert (=> b!60988 (= e!40087 (isDefined!78 (getValueByKey!126 (toList!689 e!39931) (ite c!7884 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (select (arr!1784 (_keys!3694 newMap!16)) (index!3013 lt!24842))))))))

(assert (= (and d!11949 c!7955) b!60986))

(assert (= (and d!11949 (not c!7955)) b!60987))

(assert (= (and d!11949 (not res!33637)) b!60988))

(declare-fun m!53543 () Bool)

(assert (=> d!11949 m!53543))

(declare-fun m!53545 () Bool)

(assert (=> b!60986 m!53545))

(declare-fun m!53547 () Bool)

(assert (=> b!60986 m!53547))

(assert (=> b!60986 m!53547))

(declare-fun m!53549 () Bool)

(assert (=> b!60986 m!53549))

(assert (=> b!60988 m!53547))

(assert (=> b!60988 m!53547))

(assert (=> b!60988 m!53549))

(assert (=> bm!4619 d!11949))

(declare-fun d!11951 () Bool)

(assert (=> d!11951 (= (validKeyInArray!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (and (not (= (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!60596 d!11951))

(declare-fun d!11953 () Bool)

(assert (=> d!11953 (= (validKeyInArray!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (and (not (= (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!60791 d!11953))

(declare-fun d!11955 () Bool)

(declare-fun res!33638 () Bool)

(declare-fun e!40088 () Bool)

(assert (=> d!11955 (=> (not res!33638) (not e!40088))))

(assert (=> d!11955 (= res!33638 (simpleValid!43 (v!2403 (underlying!230 thiss!992))))))

(assert (=> d!11955 (= (valid!266 (v!2403 (underlying!230 thiss!992))) e!40088)))

(declare-fun b!60989 () Bool)

(declare-fun res!33639 () Bool)

(assert (=> b!60989 (=> (not res!33639) (not e!40088))))

(assert (=> b!60989 (= res!33639 (= (arrayCountValidKeys!0 (_keys!3694 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000000000000000 (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992))))) (_size!363 (v!2403 (underlying!230 thiss!992)))))))

(declare-fun b!60990 () Bool)

(declare-fun res!33640 () Bool)

(assert (=> b!60990 (=> (not res!33640) (not e!40088))))

(assert (=> b!60990 (= res!33640 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (mask!5962 (v!2403 (underlying!230 thiss!992)))))))

(declare-fun b!60991 () Bool)

(assert (=> b!60991 (= e!40088 (arrayNoDuplicates!0 (_keys!3694 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000000000000000 Nil!1424))))

(assert (= (and d!11955 res!33638) b!60989))

(assert (= (and b!60989 res!33639) b!60990))

(assert (= (and b!60990 res!33640) b!60991))

(declare-fun m!53551 () Bool)

(assert (=> d!11955 m!53551))

(declare-fun m!53553 () Bool)

(assert (=> b!60989 m!53553))

(declare-fun m!53555 () Bool)

(assert (=> b!60990 m!53555))

(declare-fun m!53557 () Bool)

(assert (=> b!60991 m!53557))

(assert (=> d!11907 d!11955))

(declare-fun d!11957 () Bool)

(declare-fun e!40090 () Bool)

(assert (=> d!11957 e!40090))

(declare-fun res!33641 () Bool)

(assert (=> d!11957 (=> res!33641 e!40090)))

(declare-fun lt!25123 () Bool)

(assert (=> d!11957 (= res!33641 (not lt!25123))))

(declare-fun lt!25124 () Bool)

(assert (=> d!11957 (= lt!25123 lt!25124)))

(declare-fun lt!25121 () Unit!1613)

(declare-fun e!40089 () Unit!1613)

(assert (=> d!11957 (= lt!25121 e!40089)))

(declare-fun c!7956 () Bool)

(assert (=> d!11957 (= c!7956 lt!25124)))

(assert (=> d!11957 (= lt!25124 (containsKey!129 (toList!689 (+!81 lt!24911 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!24908))))

(assert (=> d!11957 (= (contains!682 (+!81 lt!24911 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))) lt!24908) lt!25123)))

(declare-fun b!60992 () Bool)

(declare-fun lt!25122 () Unit!1613)

(assert (=> b!60992 (= e!40089 lt!25122)))

(assert (=> b!60992 (= lt!25122 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 (+!81 lt!24911 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!24908))))

(assert (=> b!60992 (isDefined!78 (getValueByKey!126 (toList!689 (+!81 lt!24911 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!24908))))

(declare-fun b!60993 () Bool)

(declare-fun Unit!1633 () Unit!1613)

(assert (=> b!60993 (= e!40089 Unit!1633)))

(declare-fun b!60994 () Bool)

(assert (=> b!60994 (= e!40090 (isDefined!78 (getValueByKey!126 (toList!689 (+!81 lt!24911 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!24908)))))

(assert (= (and d!11957 c!7956) b!60992))

(assert (= (and d!11957 (not c!7956)) b!60993))

(assert (= (and d!11957 (not res!33641)) b!60994))

(declare-fun m!53559 () Bool)

(assert (=> d!11957 m!53559))

(declare-fun m!53561 () Bool)

(assert (=> b!60992 m!53561))

(declare-fun m!53563 () Bool)

(assert (=> b!60992 m!53563))

(assert (=> b!60992 m!53563))

(declare-fun m!53565 () Bool)

(assert (=> b!60992 m!53565))

(assert (=> b!60994 m!53563))

(assert (=> b!60994 m!53563))

(assert (=> b!60994 m!53565))

(assert (=> b!60806 d!11957))

(declare-fun d!11959 () Bool)

(assert (=> d!11959 (= (apply!67 lt!24912 lt!24922) (get!1085 (getValueByKey!126 (toList!689 lt!24912) lt!24922)))))

(declare-fun bs!2635 () Bool)

(assert (= bs!2635 d!11959))

(declare-fun m!53567 () Bool)

(assert (=> bs!2635 m!53567))

(assert (=> bs!2635 m!53567))

(declare-fun m!53569 () Bool)

(assert (=> bs!2635 m!53569))

(assert (=> b!60806 d!11959))

(declare-fun d!11961 () Bool)

(assert (=> d!11961 (= (apply!67 (+!81 lt!24918 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))) lt!24906) (apply!67 lt!24918 lt!24906))))

(declare-fun lt!25127 () Unit!1613)

(declare-fun choose!326 (ListLongMap!1347 (_ BitVec 64) V!2857 (_ BitVec 64)) Unit!1613)

(assert (=> d!11961 (= lt!25127 (choose!326 lt!24918 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))) lt!24906))))

(declare-fun e!40093 () Bool)

(assert (=> d!11961 e!40093))

(declare-fun res!33644 () Bool)

(assert (=> d!11961 (=> (not res!33644) (not e!40093))))

(assert (=> d!11961 (= res!33644 (contains!682 lt!24918 lt!24906))))

(assert (=> d!11961 (= (addApplyDifferent!43 lt!24918 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))) lt!24906) lt!25127)))

(declare-fun b!60998 () Bool)

(assert (=> b!60998 (= e!40093 (not (= lt!24906 lt!24905)))))

(assert (= (and d!11961 res!33644) b!60998))

(declare-fun m!53571 () Bool)

(assert (=> d!11961 m!53571))

(assert (=> d!11961 m!53247))

(declare-fun m!53573 () Bool)

(assert (=> d!11961 m!53573))

(assert (=> d!11961 m!53251))

(assert (=> d!11961 m!53253))

(assert (=> d!11961 m!53251))

(assert (=> b!60806 d!11961))

(declare-fun d!11963 () Bool)

(declare-fun e!40094 () Bool)

(assert (=> d!11963 e!40094))

(declare-fun res!33646 () Bool)

(assert (=> d!11963 (=> (not res!33646) (not e!40094))))

(declare-fun lt!25129 () ListLongMap!1347)

(assert (=> d!11963 (= res!33646 (contains!682 lt!25129 (_1!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun lt!25131 () List!1426)

(assert (=> d!11963 (= lt!25129 (ListLongMap!1348 lt!25131))))

(declare-fun lt!25130 () Unit!1613)

(declare-fun lt!25128 () Unit!1613)

(assert (=> d!11963 (= lt!25130 lt!25128)))

(assert (=> d!11963 (= (getValueByKey!126 lt!25131 (_1!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))) (Some!131 (_2!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(assert (=> d!11963 (= lt!25128 (lemmaContainsTupThenGetReturnValue!43 lt!25131 (_1!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(assert (=> d!11963 (= lt!25131 (insertStrictlySorted!46 (toList!689 lt!24918) (_1!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(assert (=> d!11963 (= (+!81 lt!24918 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))) lt!25129)))

(declare-fun b!60999 () Bool)

(declare-fun res!33645 () Bool)

(assert (=> b!60999 (=> (not res!33645) (not e!40094))))

(assert (=> b!60999 (= res!33645 (= (getValueByKey!126 (toList!689 lt!25129) (_1!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))) (Some!131 (_2!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(declare-fun b!61000 () Bool)

(assert (=> b!61000 (= e!40094 (contains!685 (toList!689 lt!25129) (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))))

(assert (= (and d!11963 res!33646) b!60999))

(assert (= (and b!60999 res!33645) b!61000))

(declare-fun m!53575 () Bool)

(assert (=> d!11963 m!53575))

(declare-fun m!53577 () Bool)

(assert (=> d!11963 m!53577))

(declare-fun m!53579 () Bool)

(assert (=> d!11963 m!53579))

(declare-fun m!53581 () Bool)

(assert (=> d!11963 m!53581))

(declare-fun m!53583 () Bool)

(assert (=> b!60999 m!53583))

(declare-fun m!53585 () Bool)

(assert (=> b!61000 m!53585))

(assert (=> b!60806 d!11963))

(declare-fun d!11965 () Bool)

(assert (=> d!11965 (= (apply!67 lt!24915 lt!24910) (get!1085 (getValueByKey!126 (toList!689 lt!24915) lt!24910)))))

(declare-fun bs!2636 () Bool)

(assert (= bs!2636 d!11965))

(declare-fun m!53587 () Bool)

(assert (=> bs!2636 m!53587))

(assert (=> bs!2636 m!53587))

(declare-fun m!53589 () Bool)

(assert (=> bs!2636 m!53589))

(assert (=> b!60806 d!11965))

(declare-fun d!11967 () Bool)

(declare-fun e!40095 () Bool)

(assert (=> d!11967 e!40095))

(declare-fun res!33648 () Bool)

(assert (=> d!11967 (=> (not res!33648) (not e!40095))))

(declare-fun lt!25133 () ListLongMap!1347)

(assert (=> d!11967 (= res!33648 (contains!682 lt!25133 (_1!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun lt!25135 () List!1426)

(assert (=> d!11967 (= lt!25133 (ListLongMap!1348 lt!25135))))

(declare-fun lt!25134 () Unit!1613)

(declare-fun lt!25132 () Unit!1613)

(assert (=> d!11967 (= lt!25134 lt!25132)))

(assert (=> d!11967 (= (getValueByKey!126 lt!25135 (_1!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))) (Some!131 (_2!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(assert (=> d!11967 (= lt!25132 (lemmaContainsTupThenGetReturnValue!43 lt!25135 (_1!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(assert (=> d!11967 (= lt!25135 (insertStrictlySorted!46 (toList!689 lt!24911) (_1!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(assert (=> d!11967 (= (+!81 lt!24911 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))) lt!25133)))

(declare-fun b!61001 () Bool)

(declare-fun res!33647 () Bool)

(assert (=> b!61001 (=> (not res!33647) (not e!40095))))

(assert (=> b!61001 (= res!33647 (= (getValueByKey!126 (toList!689 lt!25133) (_1!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))) (Some!131 (_2!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(declare-fun b!61002 () Bool)

(assert (=> b!61002 (= e!40095 (contains!685 (toList!689 lt!25133) (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))))

(assert (= (and d!11967 res!33648) b!61001))

(assert (= (and b!61001 res!33647) b!61002))

(declare-fun m!53591 () Bool)

(assert (=> d!11967 m!53591))

(declare-fun m!53593 () Bool)

(assert (=> d!11967 m!53593))

(declare-fun m!53595 () Bool)

(assert (=> d!11967 m!53595))

(declare-fun m!53597 () Bool)

(assert (=> d!11967 m!53597))

(declare-fun m!53599 () Bool)

(assert (=> b!61001 m!53599))

(declare-fun m!53601 () Bool)

(assert (=> b!61002 m!53601))

(assert (=> b!60806 d!11967))

(declare-fun d!11969 () Bool)

(assert (=> d!11969 (= (apply!67 (+!81 lt!24915 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) lt!24910) (apply!67 lt!24915 lt!24910))))

(declare-fun lt!25136 () Unit!1613)

(assert (=> d!11969 (= lt!25136 (choose!326 lt!24915 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992))) lt!24910))))

(declare-fun e!40096 () Bool)

(assert (=> d!11969 e!40096))

(declare-fun res!33649 () Bool)

(assert (=> d!11969 (=> (not res!33649) (not e!40096))))

(assert (=> d!11969 (= res!33649 (contains!682 lt!24915 lt!24910))))

(assert (=> d!11969 (= (addApplyDifferent!43 lt!24915 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992))) lt!24910) lt!25136)))

(declare-fun b!61003 () Bool)

(assert (=> b!61003 (= e!40096 (not (= lt!24910 lt!24904)))))

(assert (= (and d!11969 res!33649) b!61003))

(declare-fun m!53603 () Bool)

(assert (=> d!11969 m!53603))

(assert (=> d!11969 m!53233))

(declare-fun m!53605 () Bool)

(assert (=> d!11969 m!53605))

(assert (=> d!11969 m!53231))

(assert (=> d!11969 m!53257))

(assert (=> d!11969 m!53231))

(assert (=> b!60806 d!11969))

(declare-fun d!11971 () Bool)

(assert (=> d!11971 (= (apply!67 (+!81 lt!24915 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) lt!24910) (get!1085 (getValueByKey!126 (toList!689 (+!81 lt!24915 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!24910)))))

(declare-fun bs!2637 () Bool)

(assert (= bs!2637 d!11971))

(declare-fun m!53607 () Bool)

(assert (=> bs!2637 m!53607))

(assert (=> bs!2637 m!53607))

(declare-fun m!53609 () Bool)

(assert (=> bs!2637 m!53609))

(assert (=> b!60806 d!11971))

(declare-fun d!11973 () Bool)

(assert (=> d!11973 (= (apply!67 lt!24918 lt!24906) (get!1085 (getValueByKey!126 (toList!689 lt!24918) lt!24906)))))

(declare-fun bs!2638 () Bool)

(assert (= bs!2638 d!11973))

(declare-fun m!53611 () Bool)

(assert (=> bs!2638 m!53611))

(assert (=> bs!2638 m!53611))

(declare-fun m!53613 () Bool)

(assert (=> bs!2638 m!53613))

(assert (=> b!60806 d!11973))

(declare-fun d!11975 () Bool)

(declare-fun e!40097 () Bool)

(assert (=> d!11975 e!40097))

(declare-fun res!33651 () Bool)

(assert (=> d!11975 (=> (not res!33651) (not e!40097))))

(declare-fun lt!25138 () ListLongMap!1347)

(assert (=> d!11975 (= res!33651 (contains!682 lt!25138 (_1!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun lt!25140 () List!1426)

(assert (=> d!11975 (= lt!25138 (ListLongMap!1348 lt!25140))))

(declare-fun lt!25139 () Unit!1613)

(declare-fun lt!25137 () Unit!1613)

(assert (=> d!11975 (= lt!25139 lt!25137)))

(assert (=> d!11975 (= (getValueByKey!126 lt!25140 (_1!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) (Some!131 (_2!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(assert (=> d!11975 (= lt!25137 (lemmaContainsTupThenGetReturnValue!43 lt!25140 (_1!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(assert (=> d!11975 (= lt!25140 (insertStrictlySorted!46 (toList!689 lt!24912) (_1!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(assert (=> d!11975 (= (+!81 lt!24912 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) lt!25138)))

(declare-fun b!61004 () Bool)

(declare-fun res!33650 () Bool)

(assert (=> b!61004 (=> (not res!33650) (not e!40097))))

(assert (=> b!61004 (= res!33650 (= (getValueByKey!126 (toList!689 lt!25138) (_1!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) (Some!131 (_2!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(declare-fun b!61005 () Bool)

(assert (=> b!61005 (= e!40097 (contains!685 (toList!689 lt!25138) (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))

(assert (= (and d!11975 res!33651) b!61004))

(assert (= (and b!61004 res!33650) b!61005))

(declare-fun m!53615 () Bool)

(assert (=> d!11975 m!53615))

(declare-fun m!53617 () Bool)

(assert (=> d!11975 m!53617))

(declare-fun m!53619 () Bool)

(assert (=> d!11975 m!53619))

(declare-fun m!53621 () Bool)

(assert (=> d!11975 m!53621))

(declare-fun m!53623 () Bool)

(assert (=> b!61004 m!53623))

(declare-fun m!53625 () Bool)

(assert (=> b!61005 m!53625))

(assert (=> b!60806 d!11975))

(declare-fun b!61030 () Bool)

(declare-fun e!40117 () ListLongMap!1347)

(declare-fun call!4679 () ListLongMap!1347)

(assert (=> b!61030 (= e!40117 call!4679)))

(declare-fun b!61031 () Bool)

(declare-fun e!40114 () Bool)

(declare-fun lt!25160 () ListLongMap!1347)

(declare-fun isEmpty!302 (ListLongMap!1347) Bool)

(assert (=> b!61031 (= e!40114 (isEmpty!302 lt!25160))))

(declare-fun b!61032 () Bool)

(declare-fun e!40116 () Bool)

(declare-fun e!40113 () Bool)

(assert (=> b!61032 (= e!40116 e!40113)))

(declare-fun c!7967 () Bool)

(declare-fun e!40112 () Bool)

(assert (=> b!61032 (= c!7967 e!40112)))

(declare-fun res!33662 () Bool)

(assert (=> b!61032 (=> (not res!33662) (not e!40112))))

(assert (=> b!61032 (= res!33662 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992))))))))

(declare-fun b!61033 () Bool)

(declare-fun lt!25155 () Unit!1613)

(declare-fun lt!25158 () Unit!1613)

(assert (=> b!61033 (= lt!25155 lt!25158)))

(declare-fun lt!25157 () V!2857)

(declare-fun lt!25161 () (_ BitVec 64))

(declare-fun lt!25159 () ListLongMap!1347)

(declare-fun lt!25156 () (_ BitVec 64))

(assert (=> b!61033 (not (contains!682 (+!81 lt!25159 (tuple2!2023 lt!25156 lt!25157)) lt!25161))))

(declare-fun addStillNotContains!18 (ListLongMap!1347 (_ BitVec 64) V!2857 (_ BitVec 64)) Unit!1613)

(assert (=> b!61033 (= lt!25158 (addStillNotContains!18 lt!25159 lt!25156 lt!25157 lt!25161))))

(assert (=> b!61033 (= lt!25161 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!61033 (= lt!25157 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!61033 (= lt!25156 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!61033 (= lt!25159 call!4679)))

(assert (=> b!61033 (= e!40117 (+!81 call!4679 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!61034 () Bool)

(assert (=> b!61034 (= e!40113 e!40114)))

(declare-fun c!7966 () Bool)

(assert (=> b!61034 (= c!7966 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992))))))))

(declare-fun bm!4676 () Bool)

(assert (=> bm!4676 (= call!4679 (getCurrentListMapNoExtraKeys!45 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (_values!2049 (v!2403 (underlying!230 thiss!992))) (mask!5962 (v!2403 (underlying!230 thiss!992))) (extraKeys!1949 (v!2403 (underlying!230 thiss!992))) (zeroValue!1980 (v!2403 (underlying!230 thiss!992))) (minValue!1980 (v!2403 (underlying!230 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2066 (v!2403 (underlying!230 thiss!992)))))))

(declare-fun b!61035 () Bool)

(declare-fun e!40118 () Bool)

(assert (=> b!61035 (= e!40113 e!40118)))

(assert (=> b!61035 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992))))))))

(declare-fun res!33661 () Bool)

(assert (=> b!61035 (= res!33661 (contains!682 lt!25160 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!61035 (=> (not res!33661) (not e!40118))))

(declare-fun b!61036 () Bool)

(declare-fun e!40115 () ListLongMap!1347)

(assert (=> b!61036 (= e!40115 e!40117)))

(declare-fun c!7968 () Bool)

(assert (=> b!61036 (= c!7968 (validKeyInArray!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!61037 () Bool)

(assert (=> b!61037 (= e!40112 (validKeyInArray!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!61037 (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000)))

(declare-fun b!61038 () Bool)

(declare-fun res!33663 () Bool)

(assert (=> b!61038 (=> (not res!33663) (not e!40116))))

(assert (=> b!61038 (= res!33663 (not (contains!682 lt!25160 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!61039 () Bool)

(assert (=> b!61039 (= e!40115 (ListLongMap!1348 Nil!1423))))

(declare-fun b!61041 () Bool)

(assert (=> b!61041 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992))))))))

(assert (=> b!61041 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2016 (_values!2049 (v!2403 (underlying!230 thiss!992))))))))

(assert (=> b!61041 (= e!40118 (= (apply!67 lt!25160 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!11977 () Bool)

(assert (=> d!11977 e!40116))

(declare-fun res!33660 () Bool)

(assert (=> d!11977 (=> (not res!33660) (not e!40116))))

(assert (=> d!11977 (= res!33660 (not (contains!682 lt!25160 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!11977 (= lt!25160 e!40115)))

(declare-fun c!7965 () Bool)

(assert (=> d!11977 (= c!7965 (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992))))))))

(assert (=> d!11977 (validMask!0 (mask!5962 (v!2403 (underlying!230 thiss!992))))))

(assert (=> d!11977 (= (getCurrentListMapNoExtraKeys!45 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (_values!2049 (v!2403 (underlying!230 thiss!992))) (mask!5962 (v!2403 (underlying!230 thiss!992))) (extraKeys!1949 (v!2403 (underlying!230 thiss!992))) (zeroValue!1980 (v!2403 (underlying!230 thiss!992))) (minValue!1980 (v!2403 (underlying!230 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2066 (v!2403 (underlying!230 thiss!992)))) lt!25160)))

(declare-fun b!61040 () Bool)

(assert (=> b!61040 (= e!40114 (= lt!25160 (getCurrentListMapNoExtraKeys!45 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (_values!2049 (v!2403 (underlying!230 thiss!992))) (mask!5962 (v!2403 (underlying!230 thiss!992))) (extraKeys!1949 (v!2403 (underlying!230 thiss!992))) (zeroValue!1980 (v!2403 (underlying!230 thiss!992))) (minValue!1980 (v!2403 (underlying!230 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))))))))

(assert (= (and d!11977 c!7965) b!61039))

(assert (= (and d!11977 (not c!7965)) b!61036))

(assert (= (and b!61036 c!7968) b!61033))

(assert (= (and b!61036 (not c!7968)) b!61030))

(assert (= (or b!61033 b!61030) bm!4676))

(assert (= (and d!11977 res!33660) b!61038))

(assert (= (and b!61038 res!33663) b!61032))

(assert (= (and b!61032 res!33662) b!61037))

(assert (= (and b!61032 c!7967) b!61035))

(assert (= (and b!61032 (not c!7967)) b!61034))

(assert (= (and b!61035 res!33661) b!61041))

(assert (= (and b!61034 c!7966) b!61040))

(assert (= (and b!61034 (not c!7966)) b!61031))

(declare-fun b_lambda!2691 () Bool)

(assert (=> (not b_lambda!2691) (not b!61033)))

(assert (=> b!61033 t!4789))

(declare-fun b_and!3709 () Bool)

(assert (= b_and!3705 (and (=> t!4789 result!2407) b_and!3709)))

(assert (=> b!61033 t!4791))

(declare-fun b_and!3711 () Bool)

(assert (= b_and!3707 (and (=> t!4791 result!2411) b_and!3711)))

(declare-fun b_lambda!2693 () Bool)

(assert (=> (not b_lambda!2693) (not b!61041)))

(assert (=> b!61041 t!4789))

(declare-fun b_and!3713 () Bool)

(assert (= b_and!3709 (and (=> t!4789 result!2407) b_and!3713)))

(assert (=> b!61041 t!4791))

(declare-fun b_and!3715 () Bool)

(assert (= b_and!3711 (and (=> t!4791 result!2411) b_and!3715)))

(assert (=> b!61036 m!53115))

(assert (=> b!61036 m!53115))

(assert (=> b!61036 m!53205))

(assert (=> b!61035 m!53115))

(assert (=> b!61035 m!53115))

(declare-fun m!53627 () Bool)

(assert (=> b!61035 m!53627))

(assert (=> b!61041 m!53213))

(assert (=> b!61041 m!53011))

(assert (=> b!61041 m!53215))

(assert (=> b!61041 m!53213))

(assert (=> b!61041 m!53115))

(assert (=> b!61041 m!53011))

(assert (=> b!61041 m!53115))

(declare-fun m!53629 () Bool)

(assert (=> b!61041 m!53629))

(declare-fun m!53631 () Bool)

(assert (=> bm!4676 m!53631))

(assert (=> b!61040 m!53631))

(declare-fun m!53633 () Bool)

(assert (=> b!61038 m!53633))

(assert (=> b!61033 m!53213))

(assert (=> b!61033 m!53011))

(assert (=> b!61033 m!53215))

(assert (=> b!61033 m!53213))

(assert (=> b!61033 m!53115))

(assert (=> b!61033 m!53011))

(declare-fun m!53635 () Bool)

(assert (=> b!61033 m!53635))

(declare-fun m!53637 () Bool)

(assert (=> b!61033 m!53637))

(declare-fun m!53639 () Bool)

(assert (=> b!61033 m!53639))

(declare-fun m!53641 () Bool)

(assert (=> b!61033 m!53641))

(assert (=> b!61033 m!53635))

(assert (=> b!61037 m!53115))

(assert (=> b!61037 m!53115))

(assert (=> b!61037 m!53205))

(declare-fun m!53643 () Bool)

(assert (=> d!11977 m!53643))

(assert (=> d!11977 m!53021))

(declare-fun m!53645 () Bool)

(assert (=> b!61031 m!53645))

(assert (=> b!60806 d!11977))

(declare-fun d!11979 () Bool)

(assert (=> d!11979 (= (apply!67 (+!81 lt!24918 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))) lt!24906) (get!1085 (getValueByKey!126 (toList!689 (+!81 lt!24918 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!24906)))))

(declare-fun bs!2639 () Bool)

(assert (= bs!2639 d!11979))

(declare-fun m!53647 () Bool)

(assert (=> bs!2639 m!53647))

(assert (=> bs!2639 m!53647))

(declare-fun m!53649 () Bool)

(assert (=> bs!2639 m!53649))

(assert (=> b!60806 d!11979))

(declare-fun d!11981 () Bool)

(assert (=> d!11981 (= (apply!67 (+!81 lt!24912 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) lt!24922) (get!1085 (getValueByKey!126 (toList!689 (+!81 lt!24912 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!24922)))))

(declare-fun bs!2640 () Bool)

(assert (= bs!2640 d!11981))

(declare-fun m!53651 () Bool)

(assert (=> bs!2640 m!53651))

(assert (=> bs!2640 m!53651))

(declare-fun m!53653 () Bool)

(assert (=> bs!2640 m!53653))

(assert (=> b!60806 d!11981))

(declare-fun d!11983 () Bool)

(assert (=> d!11983 (contains!682 (+!81 lt!24911 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))) lt!24908)))

(declare-fun lt!25164 () Unit!1613)

(declare-fun choose!327 (ListLongMap!1347 (_ BitVec 64) V!2857 (_ BitVec 64)) Unit!1613)

(assert (=> d!11983 (= lt!25164 (choose!327 lt!24911 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))) lt!24908))))

(assert (=> d!11983 (contains!682 lt!24911 lt!24908)))

(assert (=> d!11983 (= (addStillContains!43 lt!24911 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))) lt!24908) lt!25164)))

(declare-fun bs!2641 () Bool)

(assert (= bs!2641 d!11983))

(assert (=> bs!2641 m!53241))

(assert (=> bs!2641 m!53241))

(assert (=> bs!2641 m!53243))

(declare-fun m!53655 () Bool)

(assert (=> bs!2641 m!53655))

(declare-fun m!53657 () Bool)

(assert (=> bs!2641 m!53657))

(assert (=> b!60806 d!11983))

(declare-fun d!11985 () Bool)

(assert (=> d!11985 (= (apply!67 (+!81 lt!24912 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) lt!24922) (apply!67 lt!24912 lt!24922))))

(declare-fun lt!25165 () Unit!1613)

(assert (=> d!11985 (= lt!25165 (choose!326 lt!24912 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992))) lt!24922))))

(declare-fun e!40119 () Bool)

(assert (=> d!11985 e!40119))

(declare-fun res!33664 () Bool)

(assert (=> d!11985 (=> (not res!33664) (not e!40119))))

(assert (=> d!11985 (= res!33664 (contains!682 lt!24912 lt!24922))))

(assert (=> d!11985 (= (addApplyDifferent!43 lt!24912 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992))) lt!24922) lt!25165)))

(declare-fun b!61043 () Bool)

(assert (=> b!61043 (= e!40119 (not (= lt!24922 lt!24902)))))

(assert (= (and d!11985 res!33664) b!61043))

(declare-fun m!53659 () Bool)

(assert (=> d!11985 m!53659))

(assert (=> d!11985 m!53229))

(declare-fun m!53661 () Bool)

(assert (=> d!11985 m!53661))

(assert (=> d!11985 m!53245))

(assert (=> d!11985 m!53249))

(assert (=> d!11985 m!53245))

(assert (=> b!60806 d!11985))

(declare-fun d!11987 () Bool)

(declare-fun e!40120 () Bool)

(assert (=> d!11987 e!40120))

(declare-fun res!33666 () Bool)

(assert (=> d!11987 (=> (not res!33666) (not e!40120))))

(declare-fun lt!25167 () ListLongMap!1347)

(assert (=> d!11987 (= res!33666 (contains!682 lt!25167 (_1!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun lt!25169 () List!1426)

(assert (=> d!11987 (= lt!25167 (ListLongMap!1348 lt!25169))))

(declare-fun lt!25168 () Unit!1613)

(declare-fun lt!25166 () Unit!1613)

(assert (=> d!11987 (= lt!25168 lt!25166)))

(assert (=> d!11987 (= (getValueByKey!126 lt!25169 (_1!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) (Some!131 (_2!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(assert (=> d!11987 (= lt!25166 (lemmaContainsTupThenGetReturnValue!43 lt!25169 (_1!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(assert (=> d!11987 (= lt!25169 (insertStrictlySorted!46 (toList!689 lt!24915) (_1!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(assert (=> d!11987 (= (+!81 lt!24915 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) lt!25167)))

(declare-fun b!61044 () Bool)

(declare-fun res!33665 () Bool)

(assert (=> b!61044 (=> (not res!33665) (not e!40120))))

(assert (=> b!61044 (= res!33665 (= (getValueByKey!126 (toList!689 lt!25167) (_1!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) (Some!131 (_2!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(declare-fun b!61045 () Bool)

(assert (=> b!61045 (= e!40120 (contains!685 (toList!689 lt!25167) (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))

(assert (= (and d!11987 res!33666) b!61044))

(assert (= (and b!61044 res!33665) b!61045))

(declare-fun m!53663 () Bool)

(assert (=> d!11987 m!53663))

(declare-fun m!53665 () Bool)

(assert (=> d!11987 m!53665))

(declare-fun m!53667 () Bool)

(assert (=> d!11987 m!53667))

(declare-fun m!53669 () Bool)

(assert (=> d!11987 m!53669))

(declare-fun m!53671 () Bool)

(assert (=> b!61044 m!53671))

(declare-fun m!53673 () Bool)

(assert (=> b!61045 m!53673))

(assert (=> b!60806 d!11987))

(assert (=> bm!4614 d!11903))

(declare-fun b!61046 () Bool)

(declare-fun e!40123 () Bool)

(declare-fun e!40124 () Bool)

(assert (=> b!61046 (= e!40123 e!40124)))

(declare-fun c!7969 () Bool)

(assert (=> b!61046 (= c!7969 (validKeyInArray!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!61047 () Bool)

(declare-fun call!4680 () Bool)

(assert (=> b!61047 (= e!40124 call!4680)))

(declare-fun bm!4677 () Bool)

(assert (=> bm!4677 (= call!4680 (arrayNoDuplicates!0 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!7969 (Cons!1423 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7847 (Cons!1423 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) Nil!1424) Nil!1424)) (ite c!7847 (Cons!1423 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) Nil!1424) Nil!1424))))))

(declare-fun b!61048 () Bool)

(declare-fun e!40122 () Bool)

(assert (=> b!61048 (= e!40122 e!40123)))

(declare-fun res!33667 () Bool)

(assert (=> b!61048 (=> (not res!33667) (not e!40123))))

(declare-fun e!40121 () Bool)

(assert (=> b!61048 (= res!33667 (not e!40121))))

(declare-fun res!33669 () Bool)

(assert (=> b!61048 (=> (not res!33669) (not e!40121))))

(assert (=> b!61048 (= res!33669 (validKeyInArray!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun d!11989 () Bool)

(declare-fun res!33668 () Bool)

(assert (=> d!11989 (=> res!33668 e!40122)))

(assert (=> d!11989 (= res!33668 (bvsge (bvadd from!355 #b00000000000000000000000000000001) (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992))))))))

(assert (=> d!11989 (= (arrayNoDuplicates!0 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!7847 (Cons!1423 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) Nil!1424) Nil!1424)) e!40122)))

(declare-fun b!61049 () Bool)

(assert (=> b!61049 (= e!40124 call!4680)))

(declare-fun b!61050 () Bool)

(assert (=> b!61050 (= e!40121 (contains!684 (ite c!7847 (Cons!1423 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) Nil!1424) Nil!1424) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(assert (= (and d!11989 (not res!33668)) b!61048))

(assert (= (and b!61048 res!33669) b!61050))

(assert (= (and b!61048 res!33667) b!61046))

(assert (= (and b!61046 c!7969) b!61047))

(assert (= (and b!61046 (not c!7969)) b!61049))

(assert (= (or b!61047 b!61049) bm!4677))

(declare-fun m!53675 () Bool)

(assert (=> b!61046 m!53675))

(assert (=> b!61046 m!53675))

(declare-fun m!53677 () Bool)

(assert (=> b!61046 m!53677))

(assert (=> bm!4677 m!53675))

(declare-fun m!53679 () Bool)

(assert (=> bm!4677 m!53679))

(assert (=> b!61048 m!53675))

(assert (=> b!61048 m!53675))

(assert (=> b!61048 m!53677))

(assert (=> b!61050 m!53675))

(assert (=> b!61050 m!53675))

(declare-fun m!53681 () Bool)

(assert (=> b!61050 m!53681))

(assert (=> bm!4550 d!11989))

(declare-fun d!11991 () Bool)

(assert (=> d!11991 (= (map!1114 (_2!1023 lt!24841)) (getCurrentListMap!390 (_keys!3694 (_2!1023 lt!24841)) (_values!2049 (_2!1023 lt!24841)) (mask!5962 (_2!1023 lt!24841)) (extraKeys!1949 (_2!1023 lt!24841)) (zeroValue!1980 (_2!1023 lt!24841)) (minValue!1980 (_2!1023 lt!24841)) #b00000000000000000000000000000000 (defaultEntry!2066 (_2!1023 lt!24841))))))

(declare-fun bs!2642 () Bool)

(assert (= bs!2642 d!11991))

(declare-fun m!53683 () Bool)

(assert (=> bs!2642 m!53683))

(assert (=> bm!4617 d!11991))

(declare-fun d!11993 () Bool)

(assert (=> d!11993 (= (+!81 (getCurrentListMap!390 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!390 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) lt!24853 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25172 () Unit!1613)

(declare-fun choose!328 (array!3729 array!3731 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2857 V!2857 V!2857 Int) Unit!1613)

(assert (=> d!11993 (= lt!25172 (choose!328 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) lt!24853 (zeroValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1980 newMap!16) (defaultEntry!2066 newMap!16)))))

(assert (=> d!11993 (validMask!0 (mask!5962 newMap!16))))

(assert (=> d!11993 (= (lemmaChangeZeroKeyThenAddPairToListMap!16 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) lt!24853 (zeroValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1980 newMap!16) (defaultEntry!2066 newMap!16)) lt!25172)))

(declare-fun bs!2643 () Bool)

(assert (= bs!2643 d!11993))

(assert (=> bs!2643 m!53287))

(assert (=> bs!2643 m!53013))

(declare-fun m!53685 () Bool)

(assert (=> bs!2643 m!53685))

(assert (=> bs!2643 m!53203))

(declare-fun m!53687 () Bool)

(assert (=> bs!2643 m!53687))

(assert (=> bs!2643 m!53013))

(declare-fun m!53689 () Bool)

(assert (=> bs!2643 m!53689))

(assert (=> bs!2643 m!53203))

(assert (=> b!60704 d!11993))

(assert (=> bm!4642 d!11977))

(declare-fun b!61059 () Bool)

(declare-fun e!40133 () Bool)

(declare-fun e!40132 () Bool)

(assert (=> b!61059 (= e!40133 e!40132)))

(declare-fun lt!25180 () (_ BitVec 64))

(assert (=> b!61059 (= lt!25180 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25179 () Unit!1613)

(assert (=> b!61059 (= lt!25179 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3694 newMap!16) lt!25180 #b00000000000000000000000000000000))))

(assert (=> b!61059 (arrayContainsKey!0 (_keys!3694 newMap!16) lt!25180 #b00000000000000000000000000000000)))

(declare-fun lt!25181 () Unit!1613)

(assert (=> b!61059 (= lt!25181 lt!25179)))

(declare-fun res!33674 () Bool)

(assert (=> b!61059 (= res!33674 (= (seekEntryOrOpen!0 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000) (_keys!3694 newMap!16) (mask!5962 newMap!16)) (Found!222 #b00000000000000000000000000000000)))))

(assert (=> b!61059 (=> (not res!33674) (not e!40132))))

(declare-fun b!61060 () Bool)

(declare-fun e!40131 () Bool)

(assert (=> b!61060 (= e!40131 e!40133)))

(declare-fun c!7972 () Bool)

(assert (=> b!61060 (= c!7972 (validKeyInArray!0 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun d!11995 () Bool)

(declare-fun res!33675 () Bool)

(assert (=> d!11995 (=> res!33675 e!40131)))

(assert (=> d!11995 (= res!33675 (bvsge #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(assert (=> d!11995 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3694 newMap!16) (mask!5962 newMap!16)) e!40131)))

(declare-fun bm!4680 () Bool)

(declare-fun call!4683 () Bool)

(assert (=> bm!4680 (= call!4683 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3694 newMap!16) (mask!5962 newMap!16)))))

(declare-fun b!61061 () Bool)

(assert (=> b!61061 (= e!40132 call!4683)))

(declare-fun b!61062 () Bool)

(assert (=> b!61062 (= e!40133 call!4683)))

(assert (= (and d!11995 (not res!33675)) b!61060))

(assert (= (and b!61060 c!7972) b!61059))

(assert (= (and b!61060 (not c!7972)) b!61062))

(assert (= (and b!61059 res!33674) b!61061))

(assert (= (or b!61061 b!61062) bm!4680))

(assert (=> b!61059 m!53277))

(declare-fun m!53691 () Bool)

(assert (=> b!61059 m!53691))

(declare-fun m!53693 () Bool)

(assert (=> b!61059 m!53693))

(assert (=> b!61059 m!53277))

(declare-fun m!53695 () Bool)

(assert (=> b!61059 m!53695))

(assert (=> b!61060 m!53277))

(assert (=> b!61060 m!53277))

(assert (=> b!61060 m!53279))

(declare-fun m!53697 () Bool)

(assert (=> bm!4680 m!53697))

(assert (=> b!60608 d!11995))

(assert (=> b!60802 d!11953))

(declare-fun b!61079 () Bool)

(declare-fun res!33685 () Bool)

(declare-fun e!40144 () Bool)

(assert (=> b!61079 (=> (not res!33685) (not e!40144))))

(declare-fun lt!25186 () SeekEntryResult!222)

(assert (=> b!61079 (= res!33685 (= (select (arr!1784 (_keys!3694 newMap!16)) (index!3015 lt!25186)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61079 (and (bvsge (index!3015 lt!25186) #b00000000000000000000000000000000) (bvslt (index!3015 lt!25186) (size!2015 (_keys!3694 newMap!16))))))

(declare-fun b!61080 () Bool)

(assert (=> b!61080 (and (bvsge (index!3012 lt!25186) #b00000000000000000000000000000000) (bvslt (index!3012 lt!25186) (size!2015 (_keys!3694 newMap!16))))))

(declare-fun res!33684 () Bool)

(assert (=> b!61080 (= res!33684 (= (select (arr!1784 (_keys!3694 newMap!16)) (index!3012 lt!25186)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!40143 () Bool)

(assert (=> b!61080 (=> (not res!33684) (not e!40143))))

(declare-fun call!4688 () Bool)

(declare-fun bm!4685 () Bool)

(assert (=> bm!4685 (= call!4688 (arrayContainsKey!0 (_keys!3694 newMap!16) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun bm!4686 () Bool)

(declare-fun c!7978 () Bool)

(declare-fun call!4689 () Bool)

(assert (=> bm!4686 (= call!4689 (inRange!0 (ite c!7978 (index!3012 lt!25186) (index!3015 lt!25186)) (mask!5962 newMap!16)))))

(declare-fun b!61081 () Bool)

(declare-fun e!40145 () Bool)

(declare-fun e!40142 () Bool)

(assert (=> b!61081 (= e!40145 e!40142)))

(declare-fun c!7977 () Bool)

(assert (=> b!61081 (= c!7977 ((_ is MissingVacant!222) lt!25186))))

(declare-fun b!61082 () Bool)

(assert (=> b!61082 (= e!40142 ((_ is Undefined!222) lt!25186))))

(declare-fun b!61083 () Bool)

(assert (=> b!61083 (= e!40145 e!40143)))

(declare-fun res!33687 () Bool)

(assert (=> b!61083 (= res!33687 call!4689)))

(assert (=> b!61083 (=> (not res!33687) (not e!40143))))

(declare-fun b!61084 () Bool)

(assert (=> b!61084 (= e!40143 (not call!4688))))

(declare-fun d!11997 () Bool)

(assert (=> d!11997 e!40145))

(assert (=> d!11997 (= c!7978 ((_ is MissingZero!222) lt!25186))))

(assert (=> d!11997 (= lt!25186 (seekEntryOrOpen!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (_keys!3694 newMap!16) (mask!5962 newMap!16)))))

(declare-fun lt!25187 () Unit!1613)

(declare-fun choose!329 (array!3729 array!3731 (_ BitVec 32) (_ BitVec 32) V!2857 V!2857 (_ BitVec 64) Int) Unit!1613)

(assert (=> d!11997 (= lt!25187 (choose!329 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (defaultEntry!2066 newMap!16)))))

(assert (=> d!11997 (validMask!0 (mask!5962 newMap!16))))

(assert (=> d!11997 (= (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!16 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (defaultEntry!2066 newMap!16)) lt!25187)))

(declare-fun b!61085 () Bool)

(declare-fun res!33686 () Bool)

(assert (=> b!61085 (=> (not res!33686) (not e!40144))))

(assert (=> b!61085 (= res!33686 call!4689)))

(assert (=> b!61085 (= e!40142 e!40144)))

(declare-fun b!61086 () Bool)

(assert (=> b!61086 (= e!40144 (not call!4688))))

(assert (= (and d!11997 c!7978) b!61083))

(assert (= (and d!11997 (not c!7978)) b!61081))

(assert (= (and b!61083 res!33687) b!61080))

(assert (= (and b!61080 res!33684) b!61084))

(assert (= (and b!61081 c!7977) b!61085))

(assert (= (and b!61081 (not c!7977)) b!61082))

(assert (= (and b!61085 res!33686) b!61079))

(assert (= (and b!61079 res!33685) b!61086))

(assert (= (or b!61083 b!61085) bm!4686))

(assert (= (or b!61084 b!61086) bm!4685))

(declare-fun m!53699 () Bool)

(assert (=> bm!4686 m!53699))

(declare-fun m!53701 () Bool)

(assert (=> b!61079 m!53701))

(assert (=> bm!4685 m!52989))

(assert (=> bm!4685 m!53149))

(declare-fun m!53703 () Bool)

(assert (=> b!61080 m!53703))

(assert (=> d!11997 m!52989))

(assert (=> d!11997 m!53147))

(assert (=> d!11997 m!52989))

(declare-fun m!53705 () Bool)

(assert (=> d!11997 m!53705))

(assert (=> d!11997 m!53287))

(assert (=> bm!4611 d!11997))

(assert (=> b!60584 d!11879))

(declare-fun d!11999 () Bool)

(assert (=> d!11999 (= (inRange!0 (ite c!7884 (ite c!7881 (index!3013 lt!24850) (ite c!7886 (index!3012 lt!24833) (index!3015 lt!24833))) (ite c!7880 (index!3013 lt!24843) (ite c!7889 (index!3012 lt!24834) (index!3015 lt!24834)))) (mask!5962 newMap!16)) (and (bvsge (ite c!7884 (ite c!7881 (index!3013 lt!24850) (ite c!7886 (index!3012 lt!24833) (index!3015 lt!24833))) (ite c!7880 (index!3013 lt!24843) (ite c!7889 (index!3012 lt!24834) (index!3015 lt!24834)))) #b00000000000000000000000000000000) (bvslt (ite c!7884 (ite c!7881 (index!3013 lt!24850) (ite c!7886 (index!3012 lt!24833) (index!3015 lt!24833))) (ite c!7880 (index!3013 lt!24843) (ite c!7889 (index!3012 lt!24834) (index!3015 lt!24834)))) (bvadd (mask!5962 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4599 d!11999))

(assert (=> bm!4607 d!11941))

(assert (=> d!11877 d!11883))

(declare-fun d!12001 () Bool)

(assert (=> d!12001 (arrayNoDuplicates!0 (_keys!3694 (v!2403 (underlying!230 thiss!992))) from!355 Nil!1424)))

(assert (=> d!12001 true))

(declare-fun _$71!75 () Unit!1613)

(assert (=> d!12001 (= (choose!39 (_keys!3694 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000000000000000 from!355) _$71!75)))

(declare-fun bs!2644 () Bool)

(assert (= bs!2644 d!12001))

(assert (=> bs!2644 m!52987))

(assert (=> d!11877 d!12001))

(declare-fun d!12003 () Bool)

(declare-fun e!40148 () Bool)

(assert (=> d!12003 e!40148))

(declare-fun c!7981 () Bool)

(assert (=> d!12003 (= c!7981 (and (not (= (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> d!12003 true))

(declare-fun _$29!69 () Unit!1613)

(assert (=> d!12003 (= (choose!322 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (_values!2049 (v!2403 (underlying!230 thiss!992))) (mask!5962 (v!2403 (underlying!230 thiss!992))) (extraKeys!1949 (v!2403 (underlying!230 thiss!992))) (zeroValue!1980 (v!2403 (underlying!230 thiss!992))) (minValue!1980 (v!2403 (underlying!230 thiss!992))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2066 (v!2403 (underlying!230 thiss!992)))) _$29!69)))

(declare-fun b!61091 () Bool)

(assert (=> b!61091 (= e!40148 (arrayContainsKey!0 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!61092 () Bool)

(assert (=> b!61092 (= e!40148 (ite (= (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!1949 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1949 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!12003 c!7981) b!61091))

(assert (= (and d!12003 (not c!7981)) b!61092))

(assert (=> b!61091 m!52989))

(assert (=> b!61091 m!52993))

(assert (=> d!11881 d!12003))

(assert (=> d!11881 d!11887))

(declare-fun d!12005 () Bool)

(declare-fun res!33688 () Bool)

(declare-fun e!40149 () Bool)

(assert (=> d!12005 (=> (not res!33688) (not e!40149))))

(assert (=> d!12005 (= res!33688 (simpleValid!43 (_2!1023 lt!24841)))))

(assert (=> d!12005 (= (valid!266 (_2!1023 lt!24841)) e!40149)))

(declare-fun b!61093 () Bool)

(declare-fun res!33689 () Bool)

(assert (=> b!61093 (=> (not res!33689) (not e!40149))))

(assert (=> b!61093 (= res!33689 (= (arrayCountValidKeys!0 (_keys!3694 (_2!1023 lt!24841)) #b00000000000000000000000000000000 (size!2015 (_keys!3694 (_2!1023 lt!24841)))) (_size!363 (_2!1023 lt!24841))))))

(declare-fun b!61094 () Bool)

(declare-fun res!33690 () Bool)

(assert (=> b!61094 (=> (not res!33690) (not e!40149))))

(assert (=> b!61094 (= res!33690 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3694 (_2!1023 lt!24841)) (mask!5962 (_2!1023 lt!24841))))))

(declare-fun b!61095 () Bool)

(assert (=> b!61095 (= e!40149 (arrayNoDuplicates!0 (_keys!3694 (_2!1023 lt!24841)) #b00000000000000000000000000000000 Nil!1424))))

(assert (= (and d!12005 res!33688) b!61093))

(assert (= (and b!61093 res!33689) b!61094))

(assert (= (and b!61094 res!33690) b!61095))

(declare-fun m!53707 () Bool)

(assert (=> d!12005 m!53707))

(declare-fun m!53709 () Bool)

(assert (=> b!61093 m!53709))

(declare-fun m!53711 () Bool)

(assert (=> b!61094 m!53711))

(declare-fun m!53713 () Bool)

(assert (=> b!61095 m!53713))

(assert (=> d!11891 d!12005))

(assert (=> d!11891 d!11885))

(declare-fun d!12007 () Bool)

(declare-fun res!33701 () Bool)

(declare-fun e!40152 () Bool)

(assert (=> d!12007 (=> (not res!33701) (not e!40152))))

(assert (=> d!12007 (= res!33701 (validMask!0 (mask!5962 newMap!16)))))

(assert (=> d!12007 (= (simpleValid!43 newMap!16) e!40152)))

(declare-fun b!61105 () Bool)

(declare-fun res!33702 () Bool)

(assert (=> b!61105 (=> (not res!33702) (not e!40152))))

(declare-fun size!2021 (LongMapFixedSize!628) (_ BitVec 32))

(assert (=> b!61105 (= res!33702 (bvsge (size!2021 newMap!16) (_size!363 newMap!16)))))

(declare-fun b!61107 () Bool)

(assert (=> b!61107 (= e!40152 (and (bvsge (extraKeys!1949 newMap!16) #b00000000000000000000000000000000) (bvsle (extraKeys!1949 newMap!16) #b00000000000000000000000000000011) (bvsge (_vacant!363 newMap!16) #b00000000000000000000000000000000)))))

(declare-fun b!61106 () Bool)

(declare-fun res!33699 () Bool)

(assert (=> b!61106 (=> (not res!33699) (not e!40152))))

(assert (=> b!61106 (= res!33699 (= (size!2021 newMap!16) (bvadd (_size!363 newMap!16) (bvsdiv (bvadd (extraKeys!1949 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!61104 () Bool)

(declare-fun res!33700 () Bool)

(assert (=> b!61104 (=> (not res!33700) (not e!40152))))

(assert (=> b!61104 (= res!33700 (and (= (size!2016 (_values!2049 newMap!16)) (bvadd (mask!5962 newMap!16) #b00000000000000000000000000000001)) (= (size!2015 (_keys!3694 newMap!16)) (size!2016 (_values!2049 newMap!16))) (bvsge (_size!363 newMap!16) #b00000000000000000000000000000000) (bvsle (_size!363 newMap!16) (bvadd (mask!5962 newMap!16) #b00000000000000000000000000000001))))))

(assert (= (and d!12007 res!33701) b!61104))

(assert (= (and b!61104 res!33700) b!61105))

(assert (= (and b!61105 res!33702) b!61106))

(assert (= (and b!61106 res!33699) b!61107))

(assert (=> d!12007 m!53287))

(declare-fun m!53715 () Bool)

(assert (=> b!61105 m!53715))

(assert (=> b!61106 m!53715))

(assert (=> d!11885 d!12007))

(assert (=> d!11905 d!11887))

(declare-fun d!12009 () Bool)

(assert (=> d!12009 (= (+!81 (getCurrentListMap!390 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!390 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) lt!24831 (zeroValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25190 () Unit!1613)

(declare-fun choose!330 (array!3729 array!3731 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!2857 V!2857 V!2857 Int) Unit!1613)

(assert (=> d!12009 (= lt!25190 (choose!330 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) lt!24831 (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2066 newMap!16)))))

(assert (=> d!12009 (validMask!0 (mask!5962 newMap!16))))

(assert (=> d!12009 (= (lemmaChangeLongMinValueKeyThenAddPairToListMap!16 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) lt!24831 (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2066 newMap!16)) lt!25190)))

(declare-fun bs!2645 () Bool)

(assert (= bs!2645 d!12009))

(assert (=> bs!2645 m!53013))

(declare-fun m!53717 () Bool)

(assert (=> bs!2645 m!53717))

(assert (=> bs!2645 m!53287))

(assert (=> bs!2645 m!53013))

(declare-fun m!53719 () Bool)

(assert (=> bs!2645 m!53719))

(assert (=> bs!2645 m!53203))

(assert (=> bs!2645 m!53203))

(declare-fun m!53721 () Bool)

(assert (=> bs!2645 m!53721))

(assert (=> b!60735 d!12009))

(declare-fun d!12011 () Bool)

(assert (=> d!12011 (= (get!1083 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2402 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(assert (=> b!60743 d!12011))

(declare-fun d!12013 () Bool)

(declare-fun lt!25193 () Bool)

(define-sort InoxSet (T) (Array T Bool))

(declare-fun content!66 (List!1427) (InoxSet (_ BitVec 64)))

(assert (=> d!12013 (= lt!25193 (select (content!66 Nil!1424) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(declare-fun e!40157 () Bool)

(assert (=> d!12013 (= lt!25193 e!40157)))

(declare-fun res!33707 () Bool)

(assert (=> d!12013 (=> (not res!33707) (not e!40157))))

(assert (=> d!12013 (= res!33707 ((_ is Cons!1423) Nil!1424))))

(assert (=> d!12013 (= (contains!684 Nil!1424 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) lt!25193)))

(declare-fun b!61112 () Bool)

(declare-fun e!40158 () Bool)

(assert (=> b!61112 (= e!40157 e!40158)))

(declare-fun res!33708 () Bool)

(assert (=> b!61112 (=> res!33708 e!40158)))

(assert (=> b!61112 (= res!33708 (= (h!2005 Nil!1424) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(declare-fun b!61113 () Bool)

(assert (=> b!61113 (= e!40158 (contains!684 (t!4793 Nil!1424) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(assert (= (and d!12013 res!33707) b!61112))

(assert (= (and b!61112 (not res!33708)) b!61113))

(declare-fun m!53723 () Bool)

(assert (=> d!12013 m!53723))

(assert (=> d!12013 m!52989))

(declare-fun m!53725 () Bool)

(assert (=> d!12013 m!53725))

(assert (=> b!61113 m!52989))

(declare-fun m!53727 () Bool)

(assert (=> b!61113 m!53727))

(assert (=> b!60600 d!12013))

(declare-fun d!12015 () Bool)

(declare-fun res!33709 () Bool)

(declare-fun e!40159 () Bool)

(assert (=> d!12015 (=> res!33709 e!40159)))

(assert (=> d!12015 (= res!33709 (= (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(assert (=> d!12015 (= (arrayContainsKey!0 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) e!40159)))

(declare-fun b!61114 () Bool)

(declare-fun e!40160 () Bool)

(assert (=> b!61114 (= e!40159 e!40160)))

(declare-fun res!33710 () Bool)

(assert (=> b!61114 (=> (not res!33710) (not e!40160))))

(assert (=> b!61114 (= res!33710 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992))))))))

(declare-fun b!61115 () Bool)

(assert (=> b!61115 (= e!40160 (arrayContainsKey!0 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!12015 (not res!33709)) b!61114))

(assert (= (and b!61114 res!33710) b!61115))

(declare-fun m!53729 () Bool)

(assert (=> d!12015 m!53729))

(assert (=> b!61115 m!52989))

(declare-fun m!53731 () Bool)

(assert (=> b!61115 m!53731))

(assert (=> b!60579 d!12015))

(declare-fun d!12017 () Bool)

(assert (=> d!12017 (= (apply!67 lt!24917 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1085 (getValueByKey!126 (toList!689 lt!24917) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2646 () Bool)

(assert (= bs!2646 d!12017))

(assert (=> bs!2646 m!53297))

(assert (=> bs!2646 m!53297))

(declare-fun m!53733 () Bool)

(assert (=> bs!2646 m!53733))

(assert (=> b!60795 d!12017))

(declare-fun b!61116 () Bool)

(declare-fun res!33713 () Bool)

(declare-fun e!40164 () Bool)

(assert (=> b!61116 (=> (not res!33713) (not e!40164))))

(declare-fun e!40163 () Bool)

(assert (=> b!61116 (= res!33713 e!40163)))

(declare-fun res!33717 () Bool)

(assert (=> b!61116 (=> res!33717 e!40163)))

(declare-fun e!40168 () Bool)

(assert (=> b!61116 (= res!33717 (not e!40168))))

(declare-fun res!33711 () Bool)

(assert (=> b!61116 (=> (not res!33711) (not e!40168))))

(assert (=> b!61116 (= res!33711 (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(declare-fun b!61117 () Bool)

(declare-fun e!40169 () Bool)

(declare-fun call!4695 () Bool)

(assert (=> b!61117 (= e!40169 (not call!4695))))

(declare-fun bm!4687 () Bool)

(declare-fun lt!25210 () ListLongMap!1347)

(assert (=> bm!4687 (= call!4695 (contains!682 lt!25210 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61118 () Bool)

(declare-fun e!40171 () Unit!1613)

(declare-fun Unit!1634 () Unit!1613)

(assert (=> b!61118 (= e!40171 Unit!1634)))

(declare-fun b!61119 () Bool)

(declare-fun e!40161 () Bool)

(assert (=> b!61119 (= e!40169 e!40161)))

(declare-fun res!33716 () Bool)

(assert (=> b!61119 (= res!33716 call!4695)))

(assert (=> b!61119 (=> (not res!33716) (not e!40161))))

(declare-fun b!61120 () Bool)

(declare-fun e!40167 () Bool)

(assert (=> b!61120 (= e!40167 (validKeyInArray!0 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61121 () Bool)

(declare-fun e!40172 () ListLongMap!1347)

(declare-fun call!4692 () ListLongMap!1347)

(assert (=> b!61121 (= e!40172 call!4692)))

(declare-fun call!4696 () ListLongMap!1347)

(declare-fun call!4694 () ListLongMap!1347)

(declare-fun c!7987 () Bool)

(declare-fun c!7984 () Bool)

(declare-fun call!4691 () ListLongMap!1347)

(declare-fun bm!4688 () Bool)

(assert (=> bm!4688 (= call!4696 (+!81 (ite c!7987 call!4691 (ite c!7984 call!4694 call!4692)) (ite (or c!7987 c!7984) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))))))

(declare-fun b!61123 () Bool)

(declare-fun call!4693 () ListLongMap!1347)

(assert (=> b!61123 (= e!40172 call!4693)))

(declare-fun b!61124 () Bool)

(assert (=> b!61124 (= e!40161 (= (apply!67 lt!25210 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1980 newMap!16)))))

(declare-fun b!61125 () Bool)

(declare-fun e!40170 () Bool)

(assert (=> b!61125 (= e!40163 e!40170)))

(declare-fun res!33714 () Bool)

(assert (=> b!61125 (=> (not res!33714) (not e!40170))))

(assert (=> b!61125 (= res!33714 (contains!682 lt!25210 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61125 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(declare-fun b!61126 () Bool)

(assert (=> b!61126 (= e!40164 e!40169)))

(declare-fun c!7985 () Bool)

(assert (=> b!61126 (= c!7985 (not (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4689 () Bool)

(assert (=> bm!4689 (= call!4693 call!4696)))

(declare-fun b!61127 () Bool)

(declare-fun e!40166 () ListLongMap!1347)

(assert (=> b!61127 (= e!40166 call!4693)))

(declare-fun bm!4690 () Bool)

(declare-fun call!4690 () Bool)

(assert (=> bm!4690 (= call!4690 (contains!682 lt!25210 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61128 () Bool)

(declare-fun e!40162 () ListLongMap!1347)

(assert (=> b!61128 (= e!40162 e!40166)))

(assert (=> b!61128 (= c!7984 (and (not (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!61129 () Bool)

(declare-fun e!40165 () Bool)

(assert (=> b!61129 (= e!40165 (= (apply!67 lt!25210 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1980 newMap!16)))))

(declare-fun b!61130 () Bool)

(declare-fun e!40173 () Bool)

(assert (=> b!61130 (= e!40173 e!40165)))

(declare-fun res!33712 () Bool)

(assert (=> b!61130 (= res!33712 call!4690)))

(assert (=> b!61130 (=> (not res!33712) (not e!40165))))

(declare-fun bm!4691 () Bool)

(assert (=> bm!4691 (= call!4692 call!4694)))

(declare-fun b!61131 () Bool)

(assert (=> b!61131 (= e!40168 (validKeyInArray!0 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61132 () Bool)

(assert (=> b!61132 (= e!40162 (+!81 call!4696 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))))))

(declare-fun bm!4692 () Bool)

(assert (=> bm!4692 (= call!4691 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun bm!4693 () Bool)

(assert (=> bm!4693 (= call!4694 call!4691)))

(declare-fun b!61133 () Bool)

(declare-fun c!7986 () Bool)

(assert (=> b!61133 (= c!7986 (and (not (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!61133 (= e!40166 e!40172)))

(declare-fun b!61134 () Bool)

(assert (=> b!61134 (= e!40170 (= (apply!67 lt!25210 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)) (get!1081 (select (arr!1785 (_values!2049 newMap!16)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2066 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!61134 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2016 (_values!2049 newMap!16))))))

(assert (=> b!61134 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(declare-fun d!12019 () Bool)

(assert (=> d!12019 e!40164))

(declare-fun res!33719 () Bool)

(assert (=> d!12019 (=> (not res!33719) (not e!40164))))

(assert (=> d!12019 (= res!33719 (or (bvsge #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))))

(declare-fun lt!25196 () ListLongMap!1347)

(assert (=> d!12019 (= lt!25210 lt!25196)))

(declare-fun lt!25212 () Unit!1613)

(assert (=> d!12019 (= lt!25212 e!40171)))

(declare-fun c!7983 () Bool)

(assert (=> d!12019 (= c!7983 e!40167)))

(declare-fun res!33715 () Bool)

(assert (=> d!12019 (=> (not res!33715) (not e!40167))))

(assert (=> d!12019 (= res!33715 (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(assert (=> d!12019 (= lt!25196 e!40162)))

(assert (=> d!12019 (= c!7987 (and (not (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12019 (validMask!0 (mask!5962 newMap!16))))

(assert (=> d!12019 (= (getCurrentListMap!390 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)) lt!25210)))

(declare-fun b!61122 () Bool)

(assert (=> b!61122 (= e!40173 (not call!4690))))

(declare-fun b!61135 () Bool)

(declare-fun lt!25202 () Unit!1613)

(assert (=> b!61135 (= e!40171 lt!25202)))

(declare-fun lt!25204 () ListLongMap!1347)

(assert (=> b!61135 (= lt!25204 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25207 () (_ BitVec 64))

(assert (=> b!61135 (= lt!25207 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25201 () (_ BitVec 64))

(assert (=> b!61135 (= lt!25201 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25194 () Unit!1613)

(assert (=> b!61135 (= lt!25194 (addStillContains!43 lt!25204 lt!25207 (zeroValue!1980 newMap!16) lt!25201))))

(assert (=> b!61135 (contains!682 (+!81 lt!25204 (tuple2!2023 lt!25207 (zeroValue!1980 newMap!16))) lt!25201)))

(declare-fun lt!25213 () Unit!1613)

(assert (=> b!61135 (= lt!25213 lt!25194)))

(declare-fun lt!25205 () ListLongMap!1347)

(assert (=> b!61135 (= lt!25205 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25195 () (_ BitVec 64))

(assert (=> b!61135 (= lt!25195 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25215 () (_ BitVec 64))

(assert (=> b!61135 (= lt!25215 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25206 () Unit!1613)

(assert (=> b!61135 (= lt!25206 (addApplyDifferent!43 lt!25205 lt!25195 (minValue!1980 newMap!16) lt!25215))))

(assert (=> b!61135 (= (apply!67 (+!81 lt!25205 (tuple2!2023 lt!25195 (minValue!1980 newMap!16))) lt!25215) (apply!67 lt!25205 lt!25215))))

(declare-fun lt!25200 () Unit!1613)

(assert (=> b!61135 (= lt!25200 lt!25206)))

(declare-fun lt!25211 () ListLongMap!1347)

(assert (=> b!61135 (= lt!25211 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25198 () (_ BitVec 64))

(assert (=> b!61135 (= lt!25198 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25199 () (_ BitVec 64))

(assert (=> b!61135 (= lt!25199 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25214 () Unit!1613)

(assert (=> b!61135 (= lt!25214 (addApplyDifferent!43 lt!25211 lt!25198 (zeroValue!1980 newMap!16) lt!25199))))

(assert (=> b!61135 (= (apply!67 (+!81 lt!25211 (tuple2!2023 lt!25198 (zeroValue!1980 newMap!16))) lt!25199) (apply!67 lt!25211 lt!25199))))

(declare-fun lt!25209 () Unit!1613)

(assert (=> b!61135 (= lt!25209 lt!25214)))

(declare-fun lt!25208 () ListLongMap!1347)

(assert (=> b!61135 (= lt!25208 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25197 () (_ BitVec 64))

(assert (=> b!61135 (= lt!25197 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25203 () (_ BitVec 64))

(assert (=> b!61135 (= lt!25203 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!61135 (= lt!25202 (addApplyDifferent!43 lt!25208 lt!25197 (minValue!1980 newMap!16) lt!25203))))

(assert (=> b!61135 (= (apply!67 (+!81 lt!25208 (tuple2!2023 lt!25197 (minValue!1980 newMap!16))) lt!25203) (apply!67 lt!25208 lt!25203))))

(declare-fun b!61136 () Bool)

(declare-fun res!33718 () Bool)

(assert (=> b!61136 (=> (not res!33718) (not e!40164))))

(assert (=> b!61136 (= res!33718 e!40173)))

(declare-fun c!7982 () Bool)

(assert (=> b!61136 (= c!7982 (not (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (= (and d!12019 c!7987) b!61132))

(assert (= (and d!12019 (not c!7987)) b!61128))

(assert (= (and b!61128 c!7984) b!61127))

(assert (= (and b!61128 (not c!7984)) b!61133))

(assert (= (and b!61133 c!7986) b!61123))

(assert (= (and b!61133 (not c!7986)) b!61121))

(assert (= (or b!61123 b!61121) bm!4691))

(assert (= (or b!61127 bm!4691) bm!4693))

(assert (= (or b!61127 b!61123) bm!4689))

(assert (= (or b!61132 bm!4693) bm!4692))

(assert (= (or b!61132 bm!4689) bm!4688))

(assert (= (and d!12019 res!33715) b!61120))

(assert (= (and d!12019 c!7983) b!61135))

(assert (= (and d!12019 (not c!7983)) b!61118))

(assert (= (and d!12019 res!33719) b!61116))

(assert (= (and b!61116 res!33711) b!61131))

(assert (= (and b!61116 (not res!33717)) b!61125))

(assert (= (and b!61125 res!33714) b!61134))

(assert (= (and b!61116 res!33713) b!61136))

(assert (= (and b!61136 c!7982) b!61130))

(assert (= (and b!61136 (not c!7982)) b!61122))

(assert (= (and b!61130 res!33712) b!61129))

(assert (= (or b!61130 b!61122) bm!4690))

(assert (= (and b!61136 res!33718) b!61126))

(assert (= (and b!61126 c!7985) b!61119))

(assert (= (and b!61126 (not c!7985)) b!61117))

(assert (= (and b!61119 res!33716) b!61124))

(assert (= (or b!61119 b!61117) bm!4687))

(declare-fun b_lambda!2695 () Bool)

(assert (=> (not b_lambda!2695) (not b!61134)))

(assert (=> b!61134 t!4804))

(declare-fun b_and!3717 () Bool)

(assert (= b_and!3713 (and (=> t!4804 result!2427) b_and!3717)))

(assert (=> b!61134 t!4806))

(declare-fun b_and!3719 () Bool)

(assert (= b_and!3715 (and (=> t!4806 result!2429) b_and!3719)))

(assert (=> b!61120 m!53277))

(assert (=> b!61120 m!53277))

(assert (=> b!61120 m!53279))

(assert (=> b!61125 m!53277))

(assert (=> b!61125 m!53277))

(declare-fun m!53735 () Bool)

(assert (=> b!61125 m!53735))

(declare-fun m!53737 () Bool)

(assert (=> bm!4687 m!53737))

(declare-fun m!53739 () Bool)

(assert (=> bm!4690 m!53739))

(assert (=> b!61134 m!53497))

(assert (=> b!61134 m!53389))

(assert (=> b!61134 m!53499))

(assert (=> b!61134 m!53277))

(assert (=> b!61134 m!53389))

(assert (=> b!61134 m!53277))

(declare-fun m!53741 () Bool)

(assert (=> b!61134 m!53741))

(assert (=> b!61134 m!53497))

(declare-fun m!53743 () Bool)

(assert (=> b!61129 m!53743))

(declare-fun m!53745 () Bool)

(assert (=> b!61124 m!53745))

(assert (=> d!12019 m!53287))

(declare-fun m!53747 () Bool)

(assert (=> bm!4688 m!53747))

(declare-fun m!53749 () Bool)

(assert (=> b!61132 m!53749))

(assert (=> b!61131 m!53277))

(assert (=> b!61131 m!53277))

(assert (=> b!61131 m!53279))

(declare-fun m!53751 () Bool)

(assert (=> bm!4692 m!53751))

(declare-fun m!53753 () Bool)

(assert (=> b!61135 m!53753))

(declare-fun m!53755 () Bool)

(assert (=> b!61135 m!53755))

(declare-fun m!53757 () Bool)

(assert (=> b!61135 m!53757))

(assert (=> b!61135 m!53277))

(declare-fun m!53759 () Bool)

(assert (=> b!61135 m!53759))

(declare-fun m!53761 () Bool)

(assert (=> b!61135 m!53761))

(declare-fun m!53763 () Bool)

(assert (=> b!61135 m!53763))

(declare-fun m!53765 () Bool)

(assert (=> b!61135 m!53765))

(declare-fun m!53767 () Bool)

(assert (=> b!61135 m!53767))

(declare-fun m!53769 () Bool)

(assert (=> b!61135 m!53769))

(declare-fun m!53771 () Bool)

(assert (=> b!61135 m!53771))

(assert (=> b!61135 m!53769))

(declare-fun m!53773 () Bool)

(assert (=> b!61135 m!53773))

(declare-fun m!53775 () Bool)

(assert (=> b!61135 m!53775))

(assert (=> b!61135 m!53775))

(declare-fun m!53777 () Bool)

(assert (=> b!61135 m!53777))

(declare-fun m!53779 () Bool)

(assert (=> b!61135 m!53779))

(assert (=> b!61135 m!53755))

(declare-fun m!53781 () Bool)

(assert (=> b!61135 m!53781))

(assert (=> b!61135 m!53765))

(assert (=> b!61135 m!53751))

(assert (=> d!11903 d!12019))

(declare-fun b!61137 () Bool)

(declare-fun res!33722 () Bool)

(declare-fun e!40177 () Bool)

(assert (=> b!61137 (=> (not res!33722) (not e!40177))))

(declare-fun e!40176 () Bool)

(assert (=> b!61137 (= res!33722 e!40176)))

(declare-fun res!33726 () Bool)

(assert (=> b!61137 (=> res!33726 e!40176)))

(declare-fun e!40181 () Bool)

(assert (=> b!61137 (= res!33726 (not e!40181))))

(declare-fun res!33720 () Bool)

(assert (=> b!61137 (=> (not res!33720) (not e!40181))))

(assert (=> b!61137 (= res!33720 (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(declare-fun b!61138 () Bool)

(declare-fun e!40182 () Bool)

(declare-fun call!4702 () Bool)

(assert (=> b!61138 (= e!40182 (not call!4702))))

(declare-fun bm!4694 () Bool)

(declare-fun lt!25232 () ListLongMap!1347)

(assert (=> bm!4694 (= call!4702 (contains!682 lt!25232 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61139 () Bool)

(declare-fun e!40184 () Unit!1613)

(declare-fun Unit!1635 () Unit!1613)

(assert (=> b!61139 (= e!40184 Unit!1635)))

(declare-fun b!61140 () Bool)

(declare-fun e!40174 () Bool)

(assert (=> b!61140 (= e!40182 e!40174)))

(declare-fun res!33725 () Bool)

(assert (=> b!61140 (= res!33725 call!4702)))

(assert (=> b!61140 (=> (not res!33725) (not e!40174))))

(declare-fun b!61141 () Bool)

(declare-fun e!40180 () Bool)

(assert (=> b!61141 (= e!40180 (validKeyInArray!0 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61142 () Bool)

(declare-fun e!40185 () ListLongMap!1347)

(declare-fun call!4699 () ListLongMap!1347)

(assert (=> b!61142 (= e!40185 call!4699)))

(declare-fun call!4698 () ListLongMap!1347)

(declare-fun call!4703 () ListLongMap!1347)

(declare-fun c!7993 () Bool)

(declare-fun call!4701 () ListLongMap!1347)

(declare-fun c!7990 () Bool)

(declare-fun bm!4695 () Bool)

(assert (=> bm!4695 (= call!4703 (+!81 (ite c!7993 call!4698 (ite c!7990 call!4701 call!4699)) (ite (or c!7993 c!7990) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16))))))))

(declare-fun b!61144 () Bool)

(declare-fun call!4700 () ListLongMap!1347)

(assert (=> b!61144 (= e!40185 call!4700)))

(declare-fun b!61145 () Bool)

(assert (=> b!61145 (= e!40174 (= (apply!67 lt!25232 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16))))))

(declare-fun b!61146 () Bool)

(declare-fun e!40183 () Bool)

(assert (=> b!61146 (= e!40176 e!40183)))

(declare-fun res!33723 () Bool)

(assert (=> b!61146 (=> (not res!33723) (not e!40183))))

(assert (=> b!61146 (= res!33723 (contains!682 lt!25232 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61146 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(declare-fun b!61147 () Bool)

(assert (=> b!61147 (= e!40177 e!40182)))

(declare-fun c!7991 () Bool)

(assert (=> b!61147 (= c!7991 (not (= (bvand (ite c!7887 (ite c!7877 (extraKeys!1949 newMap!16) lt!24831) (extraKeys!1949 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4696 () Bool)

(assert (=> bm!4696 (= call!4700 call!4703)))

(declare-fun b!61148 () Bool)

(declare-fun e!40179 () ListLongMap!1347)

(assert (=> b!61148 (= e!40179 call!4700)))

(declare-fun bm!4697 () Bool)

(declare-fun call!4697 () Bool)

(assert (=> bm!4697 (= call!4697 (contains!682 lt!25232 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61149 () Bool)

(declare-fun e!40175 () ListLongMap!1347)

(assert (=> b!61149 (= e!40175 e!40179)))

(assert (=> b!61149 (= c!7990 (and (not (= (bvand (ite c!7887 (ite c!7877 (extraKeys!1949 newMap!16) lt!24831) (extraKeys!1949 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite c!7887 (ite c!7877 (extraKeys!1949 newMap!16) lt!24831) (extraKeys!1949 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!61150 () Bool)

(declare-fun e!40178 () Bool)

(assert (=> b!61150 (= e!40178 (= (apply!67 lt!25232 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1980 newMap!16)))))

(declare-fun b!61151 () Bool)

(declare-fun e!40186 () Bool)

(assert (=> b!61151 (= e!40186 e!40178)))

(declare-fun res!33721 () Bool)

(assert (=> b!61151 (= res!33721 call!4697)))

(assert (=> b!61151 (=> (not res!33721) (not e!40178))))

(declare-fun bm!4698 () Bool)

(assert (=> bm!4698 (= call!4699 call!4701)))

(declare-fun b!61152 () Bool)

(assert (=> b!61152 (= e!40181 (validKeyInArray!0 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61153 () Bool)

(assert (=> b!61153 (= e!40175 (+!81 call!4703 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)))))))

(declare-fun bm!4699 () Bool)

(assert (=> bm!4699 (= call!4698 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (ite c!7887 (_values!2049 newMap!16) lt!24849) (mask!5962 newMap!16) (ite c!7887 (ite c!7877 (extraKeys!1949 newMap!16) lt!24831) (extraKeys!1949 newMap!16)) (zeroValue!1980 newMap!16) (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun bm!4700 () Bool)

(assert (=> bm!4700 (= call!4701 call!4698)))

(declare-fun b!61154 () Bool)

(declare-fun c!7992 () Bool)

(assert (=> b!61154 (= c!7992 (and (not (= (bvand (ite c!7887 (ite c!7877 (extraKeys!1949 newMap!16) lt!24831) (extraKeys!1949 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite c!7887 (ite c!7877 (extraKeys!1949 newMap!16) lt!24831) (extraKeys!1949 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!61154 (= e!40179 e!40185)))

(declare-fun b!61155 () Bool)

(assert (=> b!61155 (= e!40183 (= (apply!67 lt!25232 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)) (get!1081 (select (arr!1785 (ite c!7887 (_values!2049 newMap!16) lt!24849)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2066 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!61155 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2016 (ite c!7887 (_values!2049 newMap!16) lt!24849))))))

(assert (=> b!61155 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(declare-fun d!12021 () Bool)

(assert (=> d!12021 e!40177))

(declare-fun res!33728 () Bool)

(assert (=> d!12021 (=> (not res!33728) (not e!40177))))

(assert (=> d!12021 (= res!33728 (or (bvsge #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))))

(declare-fun lt!25218 () ListLongMap!1347)

(assert (=> d!12021 (= lt!25232 lt!25218)))

(declare-fun lt!25234 () Unit!1613)

(assert (=> d!12021 (= lt!25234 e!40184)))

(declare-fun c!7989 () Bool)

(assert (=> d!12021 (= c!7989 e!40180)))

(declare-fun res!33724 () Bool)

(assert (=> d!12021 (=> (not res!33724) (not e!40180))))

(assert (=> d!12021 (= res!33724 (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(assert (=> d!12021 (= lt!25218 e!40175)))

(assert (=> d!12021 (= c!7993 (and (not (= (bvand (ite c!7887 (ite c!7877 (extraKeys!1949 newMap!16) lt!24831) (extraKeys!1949 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite c!7887 (ite c!7877 (extraKeys!1949 newMap!16) lt!24831) (extraKeys!1949 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12021 (validMask!0 (mask!5962 newMap!16))))

(assert (=> d!12021 (= (getCurrentListMap!390 (_keys!3694 newMap!16) (ite c!7887 (_values!2049 newMap!16) lt!24849) (mask!5962 newMap!16) (ite c!7887 (ite c!7877 (extraKeys!1949 newMap!16) lt!24831) (extraKeys!1949 newMap!16)) (zeroValue!1980 newMap!16) (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)) lt!25232)))

(declare-fun b!61143 () Bool)

(assert (=> b!61143 (= e!40186 (not call!4697))))

(declare-fun b!61156 () Bool)

(declare-fun lt!25224 () Unit!1613)

(assert (=> b!61156 (= e!40184 lt!25224)))

(declare-fun lt!25226 () ListLongMap!1347)

(assert (=> b!61156 (= lt!25226 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (ite c!7887 (_values!2049 newMap!16) lt!24849) (mask!5962 newMap!16) (ite c!7887 (ite c!7877 (extraKeys!1949 newMap!16) lt!24831) (extraKeys!1949 newMap!16)) (zeroValue!1980 newMap!16) (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25229 () (_ BitVec 64))

(assert (=> b!61156 (= lt!25229 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25223 () (_ BitVec 64))

(assert (=> b!61156 (= lt!25223 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25216 () Unit!1613)

(assert (=> b!61156 (= lt!25216 (addStillContains!43 lt!25226 lt!25229 (zeroValue!1980 newMap!16) lt!25223))))

(assert (=> b!61156 (contains!682 (+!81 lt!25226 (tuple2!2023 lt!25229 (zeroValue!1980 newMap!16))) lt!25223)))

(declare-fun lt!25235 () Unit!1613)

(assert (=> b!61156 (= lt!25235 lt!25216)))

(declare-fun lt!25227 () ListLongMap!1347)

(assert (=> b!61156 (= lt!25227 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (ite c!7887 (_values!2049 newMap!16) lt!24849) (mask!5962 newMap!16) (ite c!7887 (ite c!7877 (extraKeys!1949 newMap!16) lt!24831) (extraKeys!1949 newMap!16)) (zeroValue!1980 newMap!16) (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25217 () (_ BitVec 64))

(assert (=> b!61156 (= lt!25217 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25237 () (_ BitVec 64))

(assert (=> b!61156 (= lt!25237 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25228 () Unit!1613)

(assert (=> b!61156 (= lt!25228 (addApplyDifferent!43 lt!25227 lt!25217 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)) lt!25237))))

(assert (=> b!61156 (= (apply!67 (+!81 lt!25227 (tuple2!2023 lt!25217 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)))) lt!25237) (apply!67 lt!25227 lt!25237))))

(declare-fun lt!25222 () Unit!1613)

(assert (=> b!61156 (= lt!25222 lt!25228)))

(declare-fun lt!25233 () ListLongMap!1347)

(assert (=> b!61156 (= lt!25233 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (ite c!7887 (_values!2049 newMap!16) lt!24849) (mask!5962 newMap!16) (ite c!7887 (ite c!7877 (extraKeys!1949 newMap!16) lt!24831) (extraKeys!1949 newMap!16)) (zeroValue!1980 newMap!16) (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25220 () (_ BitVec 64))

(assert (=> b!61156 (= lt!25220 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25221 () (_ BitVec 64))

(assert (=> b!61156 (= lt!25221 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25236 () Unit!1613)

(assert (=> b!61156 (= lt!25236 (addApplyDifferent!43 lt!25233 lt!25220 (zeroValue!1980 newMap!16) lt!25221))))

(assert (=> b!61156 (= (apply!67 (+!81 lt!25233 (tuple2!2023 lt!25220 (zeroValue!1980 newMap!16))) lt!25221) (apply!67 lt!25233 lt!25221))))

(declare-fun lt!25231 () Unit!1613)

(assert (=> b!61156 (= lt!25231 lt!25236)))

(declare-fun lt!25230 () ListLongMap!1347)

(assert (=> b!61156 (= lt!25230 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (ite c!7887 (_values!2049 newMap!16) lt!24849) (mask!5962 newMap!16) (ite c!7887 (ite c!7877 (extraKeys!1949 newMap!16) lt!24831) (extraKeys!1949 newMap!16)) (zeroValue!1980 newMap!16) (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25219 () (_ BitVec 64))

(assert (=> b!61156 (= lt!25219 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25225 () (_ BitVec 64))

(assert (=> b!61156 (= lt!25225 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!61156 (= lt!25224 (addApplyDifferent!43 lt!25230 lt!25219 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)) lt!25225))))

(assert (=> b!61156 (= (apply!67 (+!81 lt!25230 (tuple2!2023 lt!25219 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)))) lt!25225) (apply!67 lt!25230 lt!25225))))

(declare-fun b!61157 () Bool)

(declare-fun res!33727 () Bool)

(assert (=> b!61157 (=> (not res!33727) (not e!40177))))

(assert (=> b!61157 (= res!33727 e!40186)))

(declare-fun c!7988 () Bool)

(assert (=> b!61157 (= c!7988 (not (= (bvand (ite c!7887 (ite c!7877 (extraKeys!1949 newMap!16) lt!24831) (extraKeys!1949 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (= (and d!12021 c!7993) b!61153))

(assert (= (and d!12021 (not c!7993)) b!61149))

(assert (= (and b!61149 c!7990) b!61148))

(assert (= (and b!61149 (not c!7990)) b!61154))

(assert (= (and b!61154 c!7992) b!61144))

(assert (= (and b!61154 (not c!7992)) b!61142))

(assert (= (or b!61144 b!61142) bm!4698))

(assert (= (or b!61148 bm!4698) bm!4700))

(assert (= (or b!61148 b!61144) bm!4696))

(assert (= (or b!61153 bm!4700) bm!4699))

(assert (= (or b!61153 bm!4696) bm!4695))

(assert (= (and d!12021 res!33724) b!61141))

(assert (= (and d!12021 c!7989) b!61156))

(assert (= (and d!12021 (not c!7989)) b!61139))

(assert (= (and d!12021 res!33728) b!61137))

(assert (= (and b!61137 res!33720) b!61152))

(assert (= (and b!61137 (not res!33726)) b!61146))

(assert (= (and b!61146 res!33723) b!61155))

(assert (= (and b!61137 res!33722) b!61157))

(assert (= (and b!61157 c!7988) b!61151))

(assert (= (and b!61157 (not c!7988)) b!61143))

(assert (= (and b!61151 res!33721) b!61150))

(assert (= (or b!61151 b!61143) bm!4697))

(assert (= (and b!61157 res!33727) b!61147))

(assert (= (and b!61147 c!7991) b!61140))

(assert (= (and b!61147 (not c!7991)) b!61138))

(assert (= (and b!61140 res!33725) b!61145))

(assert (= (or b!61140 b!61138) bm!4694))

(declare-fun b_lambda!2697 () Bool)

(assert (=> (not b_lambda!2697) (not b!61155)))

(assert (=> b!61155 t!4804))

(declare-fun b_and!3721 () Bool)

(assert (= b_and!3717 (and (=> t!4804 result!2427) b_and!3721)))

(assert (=> b!61155 t!4806))

(declare-fun b_and!3723 () Bool)

(assert (= b_and!3719 (and (=> t!4806 result!2429) b_and!3723)))

(assert (=> b!61141 m!53277))

(assert (=> b!61141 m!53277))

(assert (=> b!61141 m!53279))

(assert (=> b!61146 m!53277))

(assert (=> b!61146 m!53277))

(declare-fun m!53783 () Bool)

(assert (=> b!61146 m!53783))

(declare-fun m!53785 () Bool)

(assert (=> bm!4694 m!53785))

(declare-fun m!53787 () Bool)

(assert (=> bm!4697 m!53787))

(declare-fun m!53789 () Bool)

(assert (=> b!61155 m!53789))

(assert (=> b!61155 m!53389))

(declare-fun m!53791 () Bool)

(assert (=> b!61155 m!53791))

(assert (=> b!61155 m!53277))

(assert (=> b!61155 m!53389))

(assert (=> b!61155 m!53277))

(declare-fun m!53793 () Bool)

(assert (=> b!61155 m!53793))

(assert (=> b!61155 m!53789))

(declare-fun m!53795 () Bool)

(assert (=> b!61150 m!53795))

(declare-fun m!53797 () Bool)

(assert (=> b!61145 m!53797))

(assert (=> d!12021 m!53287))

(declare-fun m!53799 () Bool)

(assert (=> bm!4695 m!53799))

(declare-fun m!53801 () Bool)

(assert (=> b!61153 m!53801))

(assert (=> b!61152 m!53277))

(assert (=> b!61152 m!53277))

(assert (=> b!61152 m!53279))

(declare-fun m!53803 () Bool)

(assert (=> bm!4699 m!53803))

(declare-fun m!53805 () Bool)

(assert (=> b!61156 m!53805))

(declare-fun m!53807 () Bool)

(assert (=> b!61156 m!53807))

(declare-fun m!53809 () Bool)

(assert (=> b!61156 m!53809))

(assert (=> b!61156 m!53277))

(declare-fun m!53811 () Bool)

(assert (=> b!61156 m!53811))

(declare-fun m!53813 () Bool)

(assert (=> b!61156 m!53813))

(declare-fun m!53815 () Bool)

(assert (=> b!61156 m!53815))

(declare-fun m!53817 () Bool)

(assert (=> b!61156 m!53817))

(declare-fun m!53819 () Bool)

(assert (=> b!61156 m!53819))

(declare-fun m!53821 () Bool)

(assert (=> b!61156 m!53821))

(declare-fun m!53823 () Bool)

(assert (=> b!61156 m!53823))

(assert (=> b!61156 m!53821))

(declare-fun m!53825 () Bool)

(assert (=> b!61156 m!53825))

(declare-fun m!53827 () Bool)

(assert (=> b!61156 m!53827))

(assert (=> b!61156 m!53827))

(declare-fun m!53829 () Bool)

(assert (=> b!61156 m!53829))

(declare-fun m!53831 () Bool)

(assert (=> b!61156 m!53831))

(assert (=> b!61156 m!53807))

(declare-fun m!53833 () Bool)

(assert (=> b!61156 m!53833))

(assert (=> b!61156 m!53817))

(assert (=> b!61156 m!53803))

(assert (=> bm!4603 d!12021))

(declare-fun d!12023 () Bool)

(declare-fun isEmpty!303 (Option!132) Bool)

(assert (=> d!12023 (= (isDefined!78 (getValueByKey!126 (toList!689 lt!24706) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355))) (not (isEmpty!303 (getValueByKey!126 (toList!689 lt!24706) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))))

(declare-fun bs!2647 () Bool)

(assert (= bs!2647 d!12023))

(assert (=> bs!2647 m!53139))

(declare-fun m!53835 () Bool)

(assert (=> bs!2647 m!53835))

(assert (=> b!60618 d!12023))

(declare-fun b!61169 () Bool)

(declare-fun e!40192 () Option!132)

(assert (=> b!61169 (= e!40192 None!130)))

(declare-fun b!61167 () Bool)

(declare-fun e!40191 () Option!132)

(assert (=> b!61167 (= e!40191 e!40192)))

(declare-fun c!7999 () Bool)

(assert (=> b!61167 (= c!7999 (and ((_ is Cons!1422) (toList!689 lt!24706)) (not (= (_1!1022 (h!2004 (toList!689 lt!24706))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))))

(declare-fun b!61166 () Bool)

(assert (=> b!61166 (= e!40191 (Some!131 (_2!1022 (h!2004 (toList!689 lt!24706)))))))

(declare-fun b!61168 () Bool)

(assert (=> b!61168 (= e!40192 (getValueByKey!126 (t!4792 (toList!689 lt!24706)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(declare-fun c!7998 () Bool)

(declare-fun d!12025 () Bool)

(assert (=> d!12025 (= c!7998 (and ((_ is Cons!1422) (toList!689 lt!24706)) (= (_1!1022 (h!2004 (toList!689 lt!24706))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355))))))

(assert (=> d!12025 (= (getValueByKey!126 (toList!689 lt!24706) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) e!40191)))

(assert (= (and d!12025 c!7998) b!61166))

(assert (= (and d!12025 (not c!7998)) b!61167))

(assert (= (and b!61167 c!7999) b!61168))

(assert (= (and b!61167 (not c!7999)) b!61169))

(assert (=> b!61168 m!52989))

(declare-fun m!53837 () Bool)

(assert (=> b!61168 m!53837))

(assert (=> b!60618 d!12025))

(declare-fun d!12027 () Bool)

(declare-fun res!33729 () Bool)

(declare-fun e!40193 () Bool)

(assert (=> d!12027 (=> res!33729 e!40193)))

(assert (=> d!12027 (= res!33729 (= (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(assert (=> d!12027 (= (arrayContainsKey!0 (_keys!3694 newMap!16) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) #b00000000000000000000000000000000) e!40193)))

(declare-fun b!61170 () Bool)

(declare-fun e!40194 () Bool)

(assert (=> b!61170 (= e!40193 e!40194)))

(declare-fun res!33730 () Bool)

(assert (=> b!61170 (=> (not res!33730) (not e!40194))))

(assert (=> b!61170 (= res!33730 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2015 (_keys!3694 newMap!16))))))

(declare-fun b!61171 () Bool)

(assert (=> b!61171 (= e!40194 (arrayContainsKey!0 (_keys!3694 newMap!16) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!12027 (not res!33729)) b!61170))

(assert (= (and b!61170 res!33730) b!61171))

(assert (=> d!12027 m!53277))

(assert (=> b!61171 m!52989))

(declare-fun m!53839 () Bool)

(assert (=> b!61171 m!53839))

(assert (=> bm!4615 d!12027))

(declare-fun d!12029 () Bool)

(assert (=> d!12029 (= (apply!67 lt!24917 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1085 (getValueByKey!126 (toList!689 lt!24917) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!2648 () Bool)

(assert (= bs!2648 d!12029))

(assert (=> bs!2648 m!53115))

(assert (=> bs!2648 m!53487))

(assert (=> bs!2648 m!53487))

(declare-fun m!53841 () Bool)

(assert (=> bs!2648 m!53841))

(assert (=> b!60805 d!12029))

(declare-fun d!12031 () Bool)

(declare-fun c!8000 () Bool)

(assert (=> d!12031 (= c!8000 ((_ is ValueCellFull!860) (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!40195 () V!2857)

(assert (=> d!12031 (= (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!40195)))

(declare-fun b!61172 () Bool)

(assert (=> b!61172 (= e!40195 (get!1083 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!61173 () Bool)

(assert (=> b!61173 (= e!40195 (get!1084 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12031 c!8000) b!61172))

(assert (= (and d!12031 (not c!8000)) b!61173))

(assert (=> b!61172 m!53213))

(assert (=> b!61172 m!53011))

(declare-fun m!53843 () Bool)

(assert (=> b!61172 m!53843))

(assert (=> b!61173 m!53213))

(assert (=> b!61173 m!53011))

(declare-fun m!53845 () Bool)

(assert (=> b!61173 m!53845))

(assert (=> b!60805 d!12031))

(declare-fun d!12033 () Bool)

(declare-fun e!40197 () Bool)

(assert (=> d!12033 e!40197))

(declare-fun res!33731 () Bool)

(assert (=> d!12033 (=> res!33731 e!40197)))

(declare-fun lt!25240 () Bool)

(assert (=> d!12033 (= res!33731 (not lt!25240))))

(declare-fun lt!25241 () Bool)

(assert (=> d!12033 (= lt!25240 lt!25241)))

(declare-fun lt!25238 () Unit!1613)

(declare-fun e!40196 () Unit!1613)

(assert (=> d!12033 (= lt!25238 e!40196)))

(declare-fun c!8001 () Bool)

(assert (=> d!12033 (= c!8001 lt!25241)))

(assert (=> d!12033 (= lt!25241 (containsKey!129 (toList!689 call!4625) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(assert (=> d!12033 (= (contains!682 call!4625 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) lt!25240)))

(declare-fun b!61174 () Bool)

(declare-fun lt!25239 () Unit!1613)

(assert (=> b!61174 (= e!40196 lt!25239)))

(assert (=> b!61174 (= lt!25239 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 call!4625) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(assert (=> b!61174 (isDefined!78 (getValueByKey!126 (toList!689 call!4625) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(declare-fun b!61175 () Bool)

(declare-fun Unit!1636 () Unit!1613)

(assert (=> b!61175 (= e!40196 Unit!1636)))

(declare-fun b!61176 () Bool)

(assert (=> b!61176 (= e!40197 (isDefined!78 (getValueByKey!126 (toList!689 call!4625) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355))))))

(assert (= (and d!12033 c!8001) b!61174))

(assert (= (and d!12033 (not c!8001)) b!61175))

(assert (= (and d!12033 (not res!33731)) b!61176))

(assert (=> d!12033 m!52989))

(declare-fun m!53847 () Bool)

(assert (=> d!12033 m!53847))

(assert (=> b!61174 m!52989))

(declare-fun m!53849 () Bool)

(assert (=> b!61174 m!53849))

(assert (=> b!61174 m!52989))

(declare-fun m!53851 () Bool)

(assert (=> b!61174 m!53851))

(assert (=> b!61174 m!53851))

(declare-fun m!53853 () Bool)

(assert (=> b!61174 m!53853))

(assert (=> b!61176 m!52989))

(assert (=> b!61176 m!53851))

(assert (=> b!61176 m!53851))

(assert (=> b!61176 m!53853))

(assert (=> b!60728 d!12033))

(declare-fun d!12035 () Bool)

(declare-fun e!40198 () Bool)

(assert (=> d!12035 e!40198))

(declare-fun res!33733 () Bool)

(assert (=> d!12035 (=> (not res!33733) (not e!40198))))

(declare-fun lt!25243 () ListLongMap!1347)

(assert (=> d!12035 (= res!33733 (contains!682 lt!25243 (_1!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(declare-fun lt!25245 () List!1426)

(assert (=> d!12035 (= lt!25243 (ListLongMap!1348 lt!25245))))

(declare-fun lt!25244 () Unit!1613)

(declare-fun lt!25242 () Unit!1613)

(assert (=> d!12035 (= lt!25244 lt!25242)))

(assert (=> d!12035 (= (getValueByKey!126 lt!25245 (_1!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))) (Some!131 (_2!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(assert (=> d!12035 (= lt!25242 (lemmaContainsTupThenGetReturnValue!43 lt!25245 (_1!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) (_2!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(assert (=> d!12035 (= lt!25245 (insertStrictlySorted!46 (toList!689 (ite c!7910 call!4641 (ite c!7907 call!4644 call!4642))) (_1!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) (_2!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(assert (=> d!12035 (= (+!81 (ite c!7910 call!4641 (ite c!7907 call!4644 call!4642)) (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!25243)))

(declare-fun b!61177 () Bool)

(declare-fun res!33732 () Bool)

(assert (=> b!61177 (=> (not res!33732) (not e!40198))))

(assert (=> b!61177 (= res!33732 (= (getValueByKey!126 (toList!689 lt!25243) (_1!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))) (Some!131 (_2!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))))

(declare-fun b!61178 () Bool)

(assert (=> b!61178 (= e!40198 (contains!685 (toList!689 lt!25243) (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(assert (= (and d!12035 res!33733) b!61177))

(assert (= (and b!61177 res!33732) b!61178))

(declare-fun m!53855 () Bool)

(assert (=> d!12035 m!53855))

(declare-fun m!53857 () Bool)

(assert (=> d!12035 m!53857))

(declare-fun m!53859 () Bool)

(assert (=> d!12035 m!53859))

(declare-fun m!53861 () Bool)

(assert (=> d!12035 m!53861))

(declare-fun m!53863 () Bool)

(assert (=> b!61177 m!53863))

(declare-fun m!53865 () Bool)

(assert (=> b!61178 m!53865))

(assert (=> bm!4638 d!12035))

(assert (=> b!60598 d!11951))

(declare-fun d!12037 () Bool)

(assert (=> d!12037 (isDefined!78 (getValueByKey!126 (toList!689 lt!24706) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(declare-fun lt!25248 () Unit!1613)

(declare-fun choose!331 (List!1426 (_ BitVec 64)) Unit!1613)

(assert (=> d!12037 (= lt!25248 (choose!331 (toList!689 lt!24706) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(declare-fun e!40201 () Bool)

(assert (=> d!12037 e!40201))

(declare-fun res!33736 () Bool)

(assert (=> d!12037 (=> (not res!33736) (not e!40201))))

(declare-fun isStrictlySorted!272 (List!1426) Bool)

(assert (=> d!12037 (= res!33736 (isStrictlySorted!272 (toList!689 lt!24706)))))

(assert (=> d!12037 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 lt!24706) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) lt!25248)))

(declare-fun b!61181 () Bool)

(assert (=> b!61181 (= e!40201 (containsKey!129 (toList!689 lt!24706) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(assert (= (and d!12037 res!33736) b!61181))

(assert (=> d!12037 m!52989))

(assert (=> d!12037 m!53139))

(assert (=> d!12037 m!53139))

(assert (=> d!12037 m!53141))

(assert (=> d!12037 m!52989))

(declare-fun m!53867 () Bool)

(assert (=> d!12037 m!53867))

(declare-fun m!53869 () Bool)

(assert (=> d!12037 m!53869))

(assert (=> b!61181 m!52989))

(assert (=> b!61181 m!53135))

(assert (=> b!60616 d!12037))

(assert (=> b!60616 d!12023))

(assert (=> b!60616 d!12025))

(declare-fun mapNonEmpty!2929 () Bool)

(declare-fun mapRes!2929 () Bool)

(declare-fun tp!8095 () Bool)

(declare-fun e!40203 () Bool)

(assert (=> mapNonEmpty!2929 (= mapRes!2929 (and tp!8095 e!40203))))

(declare-fun mapValue!2929 () ValueCell!860)

(declare-fun mapKey!2929 () (_ BitVec 32))

(declare-fun mapRest!2929 () (Array (_ BitVec 32) ValueCell!860))

(assert (=> mapNonEmpty!2929 (= mapRest!2928 (store mapRest!2929 mapKey!2929 mapValue!2929))))

(declare-fun condMapEmpty!2929 () Bool)

(declare-fun mapDefault!2929 () ValueCell!860)

(assert (=> mapNonEmpty!2928 (= condMapEmpty!2929 (= mapRest!2928 ((as const (Array (_ BitVec 32) ValueCell!860)) mapDefault!2929)))))

(declare-fun e!40202 () Bool)

(assert (=> mapNonEmpty!2928 (= tp!8094 (and e!40202 mapRes!2929))))

(declare-fun b!61183 () Bool)

(assert (=> b!61183 (= e!40202 tp_is_empty!2407)))

(declare-fun b!61182 () Bool)

(assert (=> b!61182 (= e!40203 tp_is_empty!2407)))

(declare-fun mapIsEmpty!2929 () Bool)

(assert (=> mapIsEmpty!2929 mapRes!2929))

(assert (= (and mapNonEmpty!2928 condMapEmpty!2929) mapIsEmpty!2929))

(assert (= (and mapNonEmpty!2928 (not condMapEmpty!2929)) mapNonEmpty!2929))

(assert (= (and mapNonEmpty!2929 ((_ is ValueCellFull!860) mapValue!2929)) b!61182))

(assert (= (and mapNonEmpty!2928 ((_ is ValueCellFull!860) mapDefault!2929)) b!61183))

(declare-fun m!53871 () Bool)

(assert (=> mapNonEmpty!2929 m!53871))

(declare-fun mapNonEmpty!2930 () Bool)

(declare-fun mapRes!2930 () Bool)

(declare-fun tp!8096 () Bool)

(declare-fun e!40205 () Bool)

(assert (=> mapNonEmpty!2930 (= mapRes!2930 (and tp!8096 e!40205))))

(declare-fun mapValue!2930 () ValueCell!860)

(declare-fun mapKey!2930 () (_ BitVec 32))

(declare-fun mapRest!2930 () (Array (_ BitVec 32) ValueCell!860))

(assert (=> mapNonEmpty!2930 (= mapRest!2927 (store mapRest!2930 mapKey!2930 mapValue!2930))))

(declare-fun condMapEmpty!2930 () Bool)

(declare-fun mapDefault!2930 () ValueCell!860)

(assert (=> mapNonEmpty!2927 (= condMapEmpty!2930 (= mapRest!2927 ((as const (Array (_ BitVec 32) ValueCell!860)) mapDefault!2930)))))

(declare-fun e!40204 () Bool)

(assert (=> mapNonEmpty!2927 (= tp!8093 (and e!40204 mapRes!2930))))

(declare-fun b!61185 () Bool)

(assert (=> b!61185 (= e!40204 tp_is_empty!2407)))

(declare-fun b!61184 () Bool)

(assert (=> b!61184 (= e!40205 tp_is_empty!2407)))

(declare-fun mapIsEmpty!2930 () Bool)

(assert (=> mapIsEmpty!2930 mapRes!2930))

(assert (= (and mapNonEmpty!2927 condMapEmpty!2930) mapIsEmpty!2930))

(assert (= (and mapNonEmpty!2927 (not condMapEmpty!2930)) mapNonEmpty!2930))

(assert (= (and mapNonEmpty!2930 ((_ is ValueCellFull!860) mapValue!2930)) b!61184))

(assert (= (and mapNonEmpty!2927 ((_ is ValueCellFull!860) mapDefault!2930)) b!61185))

(declare-fun m!53873 () Bool)

(assert (=> mapNonEmpty!2930 m!53873))

(declare-fun b_lambda!2699 () Bool)

(assert (= b_lambda!2695 (or (and b!60443 b_free!1981 (= (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) (defaultEntry!2066 newMap!16))) (and b!60445 b_free!1983) b_lambda!2699)))

(declare-fun b_lambda!2701 () Bool)

(assert (= b_lambda!2687 (or (and b!60443 b_free!1981 (= (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) (defaultEntry!2066 newMap!16))) (and b!60445 b_free!1983) b_lambda!2701)))

(declare-fun b_lambda!2703 () Bool)

(assert (= b_lambda!2691 (or (and b!60443 b_free!1981) (and b!60445 b_free!1983 (= (defaultEntry!2066 newMap!16) (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))))) b_lambda!2703)))

(declare-fun b_lambda!2705 () Bool)

(assert (= b_lambda!2697 (or (and b!60443 b_free!1981 (= (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) (defaultEntry!2066 newMap!16))) (and b!60445 b_free!1983) b_lambda!2705)))

(declare-fun b_lambda!2707 () Bool)

(assert (= b_lambda!2689 (or (and b!60443 b_free!1981 (= (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) (defaultEntry!2066 newMap!16))) (and b!60445 b_free!1983) b_lambda!2707)))

(declare-fun b_lambda!2709 () Bool)

(assert (= b_lambda!2693 (or (and b!60443 b_free!1981) (and b!60445 b_free!1983 (= (defaultEntry!2066 newMap!16) (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))))) b_lambda!2709)))

(check-sat (not b!60978) (not b!60962) (not b!60884) (not b!61113) (not b!61174) (not d!11991) (not mapNonEmpty!2930) (not b!60837) (not b!60974) (not bm!4666) (not b!61095) (not bm!4677) (not b!61125) (not d!11919) (not b!60942) (not bm!4668) (not b_lambda!2699) (not b!61000) (not b!60984) (not b_lambda!2685) (not d!11947) (not b!61037) (not d!11925) (not bm!4662) (not bm!4653) (not b!60882) (not b!60835) (not d!11971) (not d!12023) (not b!60880) (not b!60909) (not b!61060) (not b!60989) (not b!61040) (not b!61105) (not bm!4688) (not d!11913) (not b_lambda!2705) (not b!61031) (not b!60913) (not b!60919) (not mapNonEmpty!2929) (not b!61093) (not b!61171) (not bm!4686) (not b_lambda!2709) (not b!61059) (not bm!4676) (not b!60986) (not bm!4658) (not b!61153) (not d!11979) (not bm!4690) (not b!61001) (not b!60826) (not d!12029) tp_is_empty!2407 (not d!11941) (not b!60878) (not d!11909) (not b!61134) (not d!11959) (not b!60988) (not d!12013) (not b!61173) (not b!61181) (not b!60992) (not d!11915) (not b!61004) (not b!61152) (not d!11967) (not b!61002) (not d!11987) (not b!60929) (not b!61005) (not b!61045) (not d!11973) (not bm!4694) (not b!60980) (not d!11955) (not b!61106) (not d!11927) (not d!11931) (not b!61177) (not d!11945) (not b!60969) (not b!60899) (not b!60918) (not b_lambda!2681) (not b!61048) (not b_lambda!2707) (not b!61155) (not b!60896) (not b!60923) (not bm!4657) (not b!60897) (not b!61135) (not b!61150) (not b!61132) (not d!11981) (not b!61046) (not d!11969) (not b!60894) (not d!11923) b_and!3721 (not b!61041) (not b!61115) (not d!12035) (not b!60990) (not d!11993) (not d!11985) (not bm!4692) (not b!61038) (not d!12007) (not b!60916) (not b!61141) (not d!12021) (not b!61044) (not b!61178) (not bm!4656) (not d!12005) (not b!60926) (not b!60927) (not b!61156) (not bm!4660) (not d!11977) (not bm!4699) (not b!61035) (not d!11933) (not d!12017) (not b!61033) (not b!60943) (not d!12033) (not b!61146) (not b!60824) (not b!61120) (not bm!4667) (not b!61050) (not d!11949) (not bm!4672) (not b!61172) (not b!60875) (not b!60823) (not b_next!1981) (not bm!4680) (not b!60957) (not bm!4670) (not b!60828) (not b!60991) (not b!61124) (not b!60973) (not bm!4697) (not d!12001) (not d!11963) (not b!61094) (not d!11961) (not d!11983) (not bm!4687) (not b!61168) (not b!60895) (not d!11937) (not bm!4655) (not b!60915) (not d!11917) (not d!11997) (not b!61145) (not b!61129) (not b_next!1983) b_and!3723 (not d!12037) (not b!60833) (not bm!4644) (not b!60904) (not d!12009) (not d!11929) (not b_lambda!2701) (not d!11965) (not d!11975) (not b!60939) (not bm!4685) (not b!61091) (not d!11957) (not b!60888) (not b!60983) (not b!60822) (not b!60981) (not b!61036) (not b!60999) (not bm!4695) (not b!61131) (not d!12019) (not b!60964) (not b!60908) (not b_lambda!2703) (not b!61176) (not b!60994) (not d!11939))
(check-sat b_and!3721 b_and!3723 (not b_next!1981) (not b_next!1983))
(get-model)

(declare-fun d!12039 () Bool)

(declare-fun e!40207 () Bool)

(assert (=> d!12039 e!40207))

(declare-fun res!33737 () Bool)

(assert (=> d!12039 (=> res!33737 e!40207)))

(declare-fun lt!25251 () Bool)

(assert (=> d!12039 (= res!33737 (not lt!25251))))

(declare-fun lt!25252 () Bool)

(assert (=> d!12039 (= lt!25251 lt!25252)))

(declare-fun lt!25249 () Unit!1613)

(declare-fun e!40206 () Unit!1613)

(assert (=> d!12039 (= lt!25249 e!40206)))

(declare-fun c!8002 () Bool)

(assert (=> d!12039 (= c!8002 lt!25252)))

(assert (=> d!12039 (= lt!25252 (containsKey!129 (toList!689 lt!25232) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12039 (= (contains!682 lt!25232 #b0000000000000000000000000000000000000000000000000000000000000000) lt!25251)))

(declare-fun b!61186 () Bool)

(declare-fun lt!25250 () Unit!1613)

(assert (=> b!61186 (= e!40206 lt!25250)))

(assert (=> b!61186 (= lt!25250 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 lt!25232) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61186 (isDefined!78 (getValueByKey!126 (toList!689 lt!25232) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61187 () Bool)

(declare-fun Unit!1637 () Unit!1613)

(assert (=> b!61187 (= e!40206 Unit!1637)))

(declare-fun b!61188 () Bool)

(assert (=> b!61188 (= e!40207 (isDefined!78 (getValueByKey!126 (toList!689 lt!25232) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12039 c!8002) b!61186))

(assert (= (and d!12039 (not c!8002)) b!61187))

(assert (= (and d!12039 (not res!33737)) b!61188))

(declare-fun m!53875 () Bool)

(assert (=> d!12039 m!53875))

(declare-fun m!53877 () Bool)

(assert (=> b!61186 m!53877))

(declare-fun m!53879 () Bool)

(assert (=> b!61186 m!53879))

(assert (=> b!61186 m!53879))

(declare-fun m!53881 () Bool)

(assert (=> b!61186 m!53881))

(assert (=> b!61188 m!53879))

(assert (=> b!61188 m!53879))

(assert (=> b!61188 m!53881))

(assert (=> bm!4697 d!12039))

(declare-fun d!12041 () Bool)

(declare-fun e!40209 () Bool)

(assert (=> d!12041 e!40209))

(declare-fun res!33738 () Bool)

(assert (=> d!12041 (=> res!33738 e!40209)))

(declare-fun lt!25255 () Bool)

(assert (=> d!12041 (= res!33738 (not lt!25255))))

(declare-fun lt!25256 () Bool)

(assert (=> d!12041 (= lt!25255 lt!25256)))

(declare-fun lt!25253 () Unit!1613)

(declare-fun e!40208 () Unit!1613)

(assert (=> d!12041 (= lt!25253 e!40208)))

(declare-fun c!8003 () Bool)

(assert (=> d!12041 (= c!8003 lt!25256)))

(assert (=> d!12041 (= lt!25256 (containsKey!129 (toList!689 lt!25160) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12041 (= (contains!682 lt!25160 #b0000000000000000000000000000000000000000000000000000000000000000) lt!25255)))

(declare-fun b!61189 () Bool)

(declare-fun lt!25254 () Unit!1613)

(assert (=> b!61189 (= e!40208 lt!25254)))

(assert (=> b!61189 (= lt!25254 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 lt!25160) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61189 (isDefined!78 (getValueByKey!126 (toList!689 lt!25160) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61190 () Bool)

(declare-fun Unit!1638 () Unit!1613)

(assert (=> b!61190 (= e!40208 Unit!1638)))

(declare-fun b!61191 () Bool)

(assert (=> b!61191 (= e!40209 (isDefined!78 (getValueByKey!126 (toList!689 lt!25160) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12041 c!8003) b!61189))

(assert (= (and d!12041 (not c!8003)) b!61190))

(assert (= (and d!12041 (not res!33738)) b!61191))

(declare-fun m!53883 () Bool)

(assert (=> d!12041 m!53883))

(declare-fun m!53885 () Bool)

(assert (=> b!61189 m!53885))

(declare-fun m!53887 () Bool)

(assert (=> b!61189 m!53887))

(assert (=> b!61189 m!53887))

(declare-fun m!53889 () Bool)

(assert (=> b!61189 m!53889))

(assert (=> b!61191 m!53887))

(assert (=> b!61191 m!53887))

(assert (=> b!61191 m!53889))

(assert (=> d!11977 d!12041))

(assert (=> d!11977 d!11887))

(declare-fun d!12043 () Bool)

(declare-fun res!33739 () Bool)

(declare-fun e!40210 () Bool)

(assert (=> d!12043 (=> res!33739 e!40210)))

(assert (=> d!12043 (= res!33739 (and ((_ is Cons!1422) (toList!689 call!4609)) (= (_1!1022 (h!2004 (toList!689 call!4609))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355))))))

(assert (=> d!12043 (= (containsKey!129 (toList!689 call!4609) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) e!40210)))

(declare-fun b!61192 () Bool)

(declare-fun e!40211 () Bool)

(assert (=> b!61192 (= e!40210 e!40211)))

(declare-fun res!33740 () Bool)

(assert (=> b!61192 (=> (not res!33740) (not e!40211))))

(assert (=> b!61192 (= res!33740 (and (or (not ((_ is Cons!1422) (toList!689 call!4609))) (bvsle (_1!1022 (h!2004 (toList!689 call!4609))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355))) ((_ is Cons!1422) (toList!689 call!4609)) (bvslt (_1!1022 (h!2004 (toList!689 call!4609))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355))))))

(declare-fun b!61193 () Bool)

(assert (=> b!61193 (= e!40211 (containsKey!129 (t!4792 (toList!689 call!4609)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(assert (= (and d!12043 (not res!33739)) b!61192))

(assert (= (and b!61192 res!33740) b!61193))

(assert (=> b!61193 m!52989))

(declare-fun m!53891 () Bool)

(assert (=> b!61193 m!53891))

(assert (=> d!11933 d!12043))

(declare-fun b!61197 () Bool)

(declare-fun e!40213 () Option!132)

(assert (=> b!61197 (= e!40213 None!130)))

(declare-fun b!61195 () Bool)

(declare-fun e!40212 () Option!132)

(assert (=> b!61195 (= e!40212 e!40213)))

(declare-fun c!8005 () Bool)

(assert (=> b!61195 (= c!8005 (and ((_ is Cons!1422) (toList!689 lt!25036)) (not (= (_1!1022 (h!2004 (toList!689 lt!25036))) (_1!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun b!61194 () Bool)

(assert (=> b!61194 (= e!40212 (Some!131 (_2!1022 (h!2004 (toList!689 lt!25036)))))))

(declare-fun b!61196 () Bool)

(assert (=> b!61196 (= e!40213 (getValueByKey!126 (t!4792 (toList!689 lt!25036)) (_1!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun c!8004 () Bool)

(declare-fun d!12045 () Bool)

(assert (=> d!12045 (= c!8004 (and ((_ is Cons!1422) (toList!689 lt!25036)) (= (_1!1022 (h!2004 (toList!689 lt!25036))) (_1!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!12045 (= (getValueByKey!126 (toList!689 lt!25036) (_1!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!40212)))

(assert (= (and d!12045 c!8004) b!61194))

(assert (= (and d!12045 (not c!8004)) b!61195))

(assert (= (and b!61195 c!8005) b!61196))

(assert (= (and b!61195 (not c!8005)) b!61197))

(declare-fun m!53893 () Bool)

(assert (=> b!61196 m!53893))

(assert (=> b!60895 d!12045))

(declare-fun d!12047 () Bool)

(assert (=> d!12047 (= (validMask!0 (mask!5962 newMap!16)) (and (or (= (mask!5962 newMap!16) #b00000000000000000000000000000111) (= (mask!5962 newMap!16) #b00000000000000000000000000001111) (= (mask!5962 newMap!16) #b00000000000000000000000000011111) (= (mask!5962 newMap!16) #b00000000000000000000000000111111) (= (mask!5962 newMap!16) #b00000000000000000000000001111111) (= (mask!5962 newMap!16) #b00000000000000000000000011111111) (= (mask!5962 newMap!16) #b00000000000000000000000111111111) (= (mask!5962 newMap!16) #b00000000000000000000001111111111) (= (mask!5962 newMap!16) #b00000000000000000000011111111111) (= (mask!5962 newMap!16) #b00000000000000000000111111111111) (= (mask!5962 newMap!16) #b00000000000000000001111111111111) (= (mask!5962 newMap!16) #b00000000000000000011111111111111) (= (mask!5962 newMap!16) #b00000000000000000111111111111111) (= (mask!5962 newMap!16) #b00000000000000001111111111111111) (= (mask!5962 newMap!16) #b00000000000000011111111111111111) (= (mask!5962 newMap!16) #b00000000000000111111111111111111) (= (mask!5962 newMap!16) #b00000000000001111111111111111111) (= (mask!5962 newMap!16) #b00000000000011111111111111111111) (= (mask!5962 newMap!16) #b00000000000111111111111111111111) (= (mask!5962 newMap!16) #b00000000001111111111111111111111) (= (mask!5962 newMap!16) #b00000000011111111111111111111111) (= (mask!5962 newMap!16) #b00000000111111111111111111111111) (= (mask!5962 newMap!16) #b00000001111111111111111111111111) (= (mask!5962 newMap!16) #b00000011111111111111111111111111) (= (mask!5962 newMap!16) #b00000111111111111111111111111111) (= (mask!5962 newMap!16) #b00001111111111111111111111111111) (= (mask!5962 newMap!16) #b00011111111111111111111111111111) (= (mask!5962 newMap!16) #b00111111111111111111111111111111)) (bvsle (mask!5962 newMap!16) #b00111111111111111111111111111111)))))

(assert (=> d!12019 d!12047))

(declare-fun d!12049 () Bool)

(declare-fun e!40215 () Bool)

(assert (=> d!12049 e!40215))

(declare-fun res!33741 () Bool)

(assert (=> d!12049 (=> res!33741 e!40215)))

(declare-fun lt!25259 () Bool)

(assert (=> d!12049 (= res!33741 (not lt!25259))))

(declare-fun lt!25260 () Bool)

(assert (=> d!12049 (= lt!25259 lt!25260)))

(declare-fun lt!25257 () Unit!1613)

(declare-fun e!40214 () Unit!1613)

(assert (=> d!12049 (= lt!25257 e!40214)))

(declare-fun c!8006 () Bool)

(assert (=> d!12049 (= c!8006 lt!25260)))

(assert (=> d!12049 (= lt!25260 (containsKey!129 (toList!689 lt!25059) (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!12049 (= (contains!682 lt!25059 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)) lt!25259)))

(declare-fun b!61198 () Bool)

(declare-fun lt!25258 () Unit!1613)

(assert (=> b!61198 (= e!40214 lt!25258)))

(assert (=> b!61198 (= lt!25258 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 lt!25059) (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61198 (isDefined!78 (getValueByKey!126 (toList!689 lt!25059) (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61199 () Bool)

(declare-fun Unit!1639 () Unit!1613)

(assert (=> b!61199 (= e!40214 Unit!1639)))

(declare-fun b!61200 () Bool)

(assert (=> b!61200 (= e!40215 (isDefined!78 (getValueByKey!126 (toList!689 lt!25059) (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!12049 c!8006) b!61198))

(assert (= (and d!12049 (not c!8006)) b!61199))

(assert (= (and d!12049 (not res!33741)) b!61200))

(assert (=> d!12049 m!53277))

(declare-fun m!53895 () Bool)

(assert (=> d!12049 m!53895))

(assert (=> b!61198 m!53277))

(declare-fun m!53897 () Bool)

(assert (=> b!61198 m!53897))

(assert (=> b!61198 m!53277))

(declare-fun m!53899 () Bool)

(assert (=> b!61198 m!53899))

(assert (=> b!61198 m!53899))

(declare-fun m!53901 () Bool)

(assert (=> b!61198 m!53901))

(assert (=> b!61200 m!53277))

(assert (=> b!61200 m!53899))

(assert (=> b!61200 m!53899))

(assert (=> b!61200 m!53901))

(assert (=> b!60909 d!12049))

(declare-fun d!12051 () Bool)

(assert (=> d!12051 (= (size!2021 newMap!16) (bvadd (_size!363 newMap!16) (bvsdiv (bvadd (extraKeys!1949 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010)))))

(assert (=> b!61106 d!12051))

(declare-fun d!12053 () Bool)

(declare-fun e!40217 () Bool)

(assert (=> d!12053 e!40217))

(declare-fun res!33742 () Bool)

(assert (=> d!12053 (=> res!33742 e!40217)))

(declare-fun lt!25263 () Bool)

(assert (=> d!12053 (= res!33742 (not lt!25263))))

(declare-fun lt!25264 () Bool)

(assert (=> d!12053 (= lt!25263 lt!25264)))

(declare-fun lt!25261 () Unit!1613)

(declare-fun e!40216 () Unit!1613)

(assert (=> d!12053 (= lt!25261 e!40216)))

(declare-fun c!8007 () Bool)

(assert (=> d!12053 (= c!8007 lt!25264)))

(assert (=> d!12053 (= lt!25264 (containsKey!129 (toList!689 lt!25079) (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12053 (= (contains!682 lt!25079 (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!25263)))

(declare-fun b!61201 () Bool)

(declare-fun lt!25262 () Unit!1613)

(assert (=> b!61201 (= e!40216 lt!25262)))

(assert (=> b!61201 (= lt!25262 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 lt!25079) (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> b!61201 (isDefined!78 (getValueByKey!126 (toList!689 lt!25079) (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!61202 () Bool)

(declare-fun Unit!1640 () Unit!1613)

(assert (=> b!61202 (= e!40216 Unit!1640)))

(declare-fun b!61203 () Bool)

(assert (=> b!61203 (= e!40217 (isDefined!78 (getValueByKey!126 (toList!689 lt!25079) (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!12053 c!8007) b!61201))

(assert (= (and d!12053 (not c!8007)) b!61202))

(assert (= (and d!12053 (not res!33742)) b!61203))

(declare-fun m!53903 () Bool)

(assert (=> d!12053 m!53903))

(declare-fun m!53905 () Bool)

(assert (=> b!61201 m!53905))

(assert (=> b!61201 m!53463))

(assert (=> b!61201 m!53463))

(declare-fun m!53907 () Bool)

(assert (=> b!61201 m!53907))

(assert (=> b!61203 m!53463))

(assert (=> b!61203 m!53463))

(assert (=> b!61203 m!53907))

(assert (=> d!11937 d!12053))

(declare-fun b!61207 () Bool)

(declare-fun e!40219 () Option!132)

(assert (=> b!61207 (= e!40219 None!130)))

(declare-fun b!61205 () Bool)

(declare-fun e!40218 () Option!132)

(assert (=> b!61205 (= e!40218 e!40219)))

(declare-fun c!8009 () Bool)

(assert (=> b!61205 (= c!8009 (and ((_ is Cons!1422) lt!25081) (not (= (_1!1022 (h!2004 lt!25081)) (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!61204 () Bool)

(assert (=> b!61204 (= e!40218 (Some!131 (_2!1022 (h!2004 lt!25081))))))

(declare-fun b!61206 () Bool)

(assert (=> b!61206 (= e!40219 (getValueByKey!126 (t!4792 lt!25081) (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun c!8008 () Bool)

(declare-fun d!12055 () Bool)

(assert (=> d!12055 (= c!8008 (and ((_ is Cons!1422) lt!25081) (= (_1!1022 (h!2004 lt!25081)) (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!12055 (= (getValueByKey!126 lt!25081 (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!40218)))

(assert (= (and d!12055 c!8008) b!61204))

(assert (= (and d!12055 (not c!8008)) b!61205))

(assert (= (and b!61205 c!8009) b!61206))

(assert (= (and b!61205 (not c!8009)) b!61207))

(declare-fun m!53909 () Bool)

(assert (=> b!61206 m!53909))

(assert (=> d!11937 d!12055))

(declare-fun d!12057 () Bool)

(assert (=> d!12057 (= (getValueByKey!126 lt!25081 (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!131 (_2!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!25267 () Unit!1613)

(declare-fun choose!332 (List!1426 (_ BitVec 64) V!2857) Unit!1613)

(assert (=> d!12057 (= lt!25267 (choose!332 lt!25081 (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!40222 () Bool)

(assert (=> d!12057 e!40222))

(declare-fun res!33747 () Bool)

(assert (=> d!12057 (=> (not res!33747) (not e!40222))))

(assert (=> d!12057 (= res!33747 (isStrictlySorted!272 lt!25081))))

(assert (=> d!12057 (= (lemmaContainsTupThenGetReturnValue!43 lt!25081 (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!25267)))

(declare-fun b!61212 () Bool)

(declare-fun res!33748 () Bool)

(assert (=> b!61212 (=> (not res!33748) (not e!40222))))

(assert (=> b!61212 (= res!33748 (containsKey!129 lt!25081 (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!61213 () Bool)

(assert (=> b!61213 (= e!40222 (contains!685 lt!25081 (tuple2!2023 (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!12057 res!33747) b!61212))

(assert (= (and b!61212 res!33748) b!61213))

(assert (=> d!12057 m!53457))

(declare-fun m!53911 () Bool)

(assert (=> d!12057 m!53911))

(declare-fun m!53913 () Bool)

(assert (=> d!12057 m!53913))

(declare-fun m!53915 () Bool)

(assert (=> b!61212 m!53915))

(declare-fun m!53917 () Bool)

(assert (=> b!61213 m!53917))

(assert (=> d!11937 d!12057))

(declare-fun bm!4707 () Bool)

(declare-fun call!4712 () List!1426)

(declare-fun call!4710 () List!1426)

(assert (=> bm!4707 (= call!4712 call!4710)))

(declare-fun b!61234 () Bool)

(declare-fun e!40235 () List!1426)

(declare-fun call!4711 () List!1426)

(assert (=> b!61234 (= e!40235 call!4711)))

(declare-fun c!8018 () Bool)

(declare-fun e!40233 () List!1426)

(declare-fun bm!4708 () Bool)

(declare-fun $colon$colon!60 (List!1426 tuple2!2022) List!1426)

(assert (=> bm!4708 (= call!4710 ($colon$colon!60 e!40233 (ite c!8018 (h!2004 (toList!689 call!4602)) (tuple2!2023 (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun c!8020 () Bool)

(assert (=> bm!4708 (= c!8020 c!8018)))

(declare-fun b!61235 () Bool)

(assert (=> b!61235 (= e!40233 (insertStrictlySorted!46 (t!4792 (toList!689 call!4602)) (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!40234 () Bool)

(declare-fun lt!25270 () List!1426)

(declare-fun b!61236 () Bool)

(assert (=> b!61236 (= e!40234 (contains!685 lt!25270 (tuple2!2023 (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun bm!4709 () Bool)

(assert (=> bm!4709 (= call!4711 call!4712)))

(declare-fun b!61237 () Bool)

(declare-fun res!33754 () Bool)

(assert (=> b!61237 (=> (not res!33754) (not e!40234))))

(assert (=> b!61237 (= res!33754 (containsKey!129 lt!25270 (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!61238 () Bool)

(declare-fun e!40236 () List!1426)

(declare-fun e!40237 () List!1426)

(assert (=> b!61238 (= e!40236 e!40237)))

(declare-fun c!8019 () Bool)

(assert (=> b!61238 (= c!8019 (and ((_ is Cons!1422) (toList!689 call!4602)) (= (_1!1022 (h!2004 (toList!689 call!4602))) (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!61239 () Bool)

(declare-fun c!8021 () Bool)

(assert (=> b!61239 (= c!8021 (and ((_ is Cons!1422) (toList!689 call!4602)) (bvsgt (_1!1022 (h!2004 (toList!689 call!4602))) (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!61239 (= e!40237 e!40235)))

(declare-fun d!12059 () Bool)

(assert (=> d!12059 e!40234))

(declare-fun res!33753 () Bool)

(assert (=> d!12059 (=> (not res!33753) (not e!40234))))

(assert (=> d!12059 (= res!33753 (isStrictlySorted!272 lt!25270))))

(assert (=> d!12059 (= lt!25270 e!40236)))

(assert (=> d!12059 (= c!8018 (and ((_ is Cons!1422) (toList!689 call!4602)) (bvslt (_1!1022 (h!2004 (toList!689 call!4602))) (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!12059 (isStrictlySorted!272 (toList!689 call!4602))))

(assert (=> d!12059 (= (insertStrictlySorted!46 (toList!689 call!4602) (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!25270)))

(declare-fun b!61240 () Bool)

(assert (=> b!61240 (= e!40233 (ite c!8019 (t!4792 (toList!689 call!4602)) (ite c!8021 (Cons!1422 (h!2004 (toList!689 call!4602)) (t!4792 (toList!689 call!4602))) Nil!1423)))))

(declare-fun b!61241 () Bool)

(assert (=> b!61241 (= e!40236 call!4710)))

(declare-fun b!61242 () Bool)

(assert (=> b!61242 (= e!40237 call!4712)))

(declare-fun b!61243 () Bool)

(assert (=> b!61243 (= e!40235 call!4711)))

(assert (= (and d!12059 c!8018) b!61241))

(assert (= (and d!12059 (not c!8018)) b!61238))

(assert (= (and b!61238 c!8019) b!61242))

(assert (= (and b!61238 (not c!8019)) b!61239))

(assert (= (and b!61239 c!8021) b!61243))

(assert (= (and b!61239 (not c!8021)) b!61234))

(assert (= (or b!61243 b!61234) bm!4709))

(assert (= (or b!61242 bm!4709) bm!4707))

(assert (= (or b!61241 bm!4707) bm!4708))

(assert (= (and bm!4708 c!8020) b!61235))

(assert (= (and bm!4708 (not c!8020)) b!61240))

(assert (= (and d!12059 res!33753) b!61237))

(assert (= (and b!61237 res!33754) b!61236))

(declare-fun m!53919 () Bool)

(assert (=> b!61236 m!53919))

(declare-fun m!53921 () Bool)

(assert (=> bm!4708 m!53921))

(declare-fun m!53923 () Bool)

(assert (=> b!61235 m!53923))

(declare-fun m!53925 () Bool)

(assert (=> d!12059 m!53925))

(declare-fun m!53927 () Bool)

(assert (=> d!12059 m!53927))

(declare-fun m!53929 () Bool)

(assert (=> b!61237 m!53929))

(assert (=> d!11937 d!12059))

(declare-fun d!12061 () Bool)

(declare-fun e!40239 () Bool)

(assert (=> d!12061 e!40239))

(declare-fun res!33755 () Bool)

(assert (=> d!12061 (=> res!33755 e!40239)))

(declare-fun lt!25273 () Bool)

(assert (=> d!12061 (= res!33755 (not lt!25273))))

(declare-fun lt!25274 () Bool)

(assert (=> d!12061 (= lt!25273 lt!25274)))

(declare-fun lt!25271 () Unit!1613)

(declare-fun e!40238 () Unit!1613)

(assert (=> d!12061 (= lt!25271 e!40238)))

(declare-fun c!8022 () Bool)

(assert (=> d!12061 (= c!8022 lt!25274)))

(assert (=> d!12061 (= lt!25274 (containsKey!129 (toList!689 lt!25059) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12061 (= (contains!682 lt!25059 #b0000000000000000000000000000000000000000000000000000000000000000) lt!25273)))

(declare-fun b!61244 () Bool)

(declare-fun lt!25272 () Unit!1613)

(assert (=> b!61244 (= e!40238 lt!25272)))

(assert (=> b!61244 (= lt!25272 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 lt!25059) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61244 (isDefined!78 (getValueByKey!126 (toList!689 lt!25059) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61245 () Bool)

(declare-fun Unit!1641 () Unit!1613)

(assert (=> b!61245 (= e!40238 Unit!1641)))

(declare-fun b!61246 () Bool)

(assert (=> b!61246 (= e!40239 (isDefined!78 (getValueByKey!126 (toList!689 lt!25059) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12061 c!8022) b!61244))

(assert (= (and d!12061 (not c!8022)) b!61245))

(assert (= (and d!12061 (not res!33755)) b!61246))

(declare-fun m!53931 () Bool)

(assert (=> d!12061 m!53931))

(declare-fun m!53933 () Bool)

(assert (=> b!61244 m!53933))

(declare-fun m!53935 () Bool)

(assert (=> b!61244 m!53935))

(assert (=> b!61244 m!53935))

(declare-fun m!53937 () Bool)

(assert (=> b!61244 m!53937))

(assert (=> b!61246 m!53935))

(assert (=> b!61246 m!53935))

(assert (=> b!61246 m!53937))

(assert (=> bm!4660 d!12061))

(declare-fun d!12063 () Bool)

(assert (=> d!12063 (= (get!1083 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2402 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!61172 d!12063))

(declare-fun d!12065 () Bool)

(declare-fun e!40241 () Bool)

(assert (=> d!12065 e!40241))

(declare-fun res!33756 () Bool)

(assert (=> d!12065 (=> res!33756 e!40241)))

(declare-fun lt!25277 () Bool)

(assert (=> d!12065 (= res!33756 (not lt!25277))))

(declare-fun lt!25278 () Bool)

(assert (=> d!12065 (= lt!25277 lt!25278)))

(declare-fun lt!25275 () Unit!1613)

(declare-fun e!40240 () Unit!1613)

(assert (=> d!12065 (= lt!25275 e!40240)))

(declare-fun c!8023 () Bool)

(assert (=> d!12065 (= c!8023 lt!25278)))

(assert (=> d!12065 (= lt!25278 (containsKey!129 (toList!689 lt!25167) (_1!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(assert (=> d!12065 (= (contains!682 lt!25167 (_1!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!25277)))

(declare-fun b!61247 () Bool)

(declare-fun lt!25276 () Unit!1613)

(assert (=> b!61247 (= e!40240 lt!25276)))

(assert (=> b!61247 (= lt!25276 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 lt!25167) (_1!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(assert (=> b!61247 (isDefined!78 (getValueByKey!126 (toList!689 lt!25167) (_1!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun b!61248 () Bool)

(declare-fun Unit!1642 () Unit!1613)

(assert (=> b!61248 (= e!40240 Unit!1642)))

(declare-fun b!61249 () Bool)

(assert (=> b!61249 (= e!40241 (isDefined!78 (getValueByKey!126 (toList!689 lt!25167) (_1!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(assert (= (and d!12065 c!8023) b!61247))

(assert (= (and d!12065 (not c!8023)) b!61248))

(assert (= (and d!12065 (not res!33756)) b!61249))

(declare-fun m!53939 () Bool)

(assert (=> d!12065 m!53939))

(declare-fun m!53941 () Bool)

(assert (=> b!61247 m!53941))

(assert (=> b!61247 m!53671))

(assert (=> b!61247 m!53671))

(declare-fun m!53943 () Bool)

(assert (=> b!61247 m!53943))

(assert (=> b!61249 m!53671))

(assert (=> b!61249 m!53671))

(assert (=> b!61249 m!53943))

(assert (=> d!11987 d!12065))

(declare-fun b!61253 () Bool)

(declare-fun e!40243 () Option!132)

(assert (=> b!61253 (= e!40243 None!130)))

(declare-fun b!61251 () Bool)

(declare-fun e!40242 () Option!132)

(assert (=> b!61251 (= e!40242 e!40243)))

(declare-fun c!8025 () Bool)

(assert (=> b!61251 (= c!8025 (and ((_ is Cons!1422) lt!25169) (not (= (_1!1022 (h!2004 lt!25169)) (_1!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))))

(declare-fun b!61250 () Bool)

(assert (=> b!61250 (= e!40242 (Some!131 (_2!1022 (h!2004 lt!25169))))))

(declare-fun b!61252 () Bool)

(assert (=> b!61252 (= e!40243 (getValueByKey!126 (t!4792 lt!25169) (_1!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun d!12067 () Bool)

(declare-fun c!8024 () Bool)

(assert (=> d!12067 (= c!8024 (and ((_ is Cons!1422) lt!25169) (= (_1!1022 (h!2004 lt!25169)) (_1!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(assert (=> d!12067 (= (getValueByKey!126 lt!25169 (_1!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) e!40242)))

(assert (= (and d!12067 c!8024) b!61250))

(assert (= (and d!12067 (not c!8024)) b!61251))

(assert (= (and b!61251 c!8025) b!61252))

(assert (= (and b!61251 (not c!8025)) b!61253))

(declare-fun m!53945 () Bool)

(assert (=> b!61252 m!53945))

(assert (=> d!11987 d!12067))

(declare-fun d!12069 () Bool)

(assert (=> d!12069 (= (getValueByKey!126 lt!25169 (_1!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) (Some!131 (_2!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun lt!25279 () Unit!1613)

(assert (=> d!12069 (= lt!25279 (choose!332 lt!25169 (_1!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun e!40244 () Bool)

(assert (=> d!12069 e!40244))

(declare-fun res!33757 () Bool)

(assert (=> d!12069 (=> (not res!33757) (not e!40244))))

(assert (=> d!12069 (= res!33757 (isStrictlySorted!272 lt!25169))))

(assert (=> d!12069 (= (lemmaContainsTupThenGetReturnValue!43 lt!25169 (_1!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!25279)))

(declare-fun b!61254 () Bool)

(declare-fun res!33758 () Bool)

(assert (=> b!61254 (=> (not res!33758) (not e!40244))))

(assert (=> b!61254 (= res!33758 (containsKey!129 lt!25169 (_1!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun b!61255 () Bool)

(assert (=> b!61255 (= e!40244 (contains!685 lt!25169 (tuple2!2023 (_1!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(assert (= (and d!12069 res!33757) b!61254))

(assert (= (and b!61254 res!33758) b!61255))

(assert (=> d!12069 m!53665))

(declare-fun m!53947 () Bool)

(assert (=> d!12069 m!53947))

(declare-fun m!53949 () Bool)

(assert (=> d!12069 m!53949))

(declare-fun m!53951 () Bool)

(assert (=> b!61254 m!53951))

(declare-fun m!53953 () Bool)

(assert (=> b!61255 m!53953))

(assert (=> d!11987 d!12069))

(declare-fun bm!4710 () Bool)

(declare-fun call!4715 () List!1426)

(declare-fun call!4713 () List!1426)

(assert (=> bm!4710 (= call!4715 call!4713)))

(declare-fun b!61256 () Bool)

(declare-fun e!40247 () List!1426)

(declare-fun call!4714 () List!1426)

(assert (=> b!61256 (= e!40247 call!4714)))

(declare-fun c!8026 () Bool)

(declare-fun e!40245 () List!1426)

(declare-fun bm!4711 () Bool)

(assert (=> bm!4711 (= call!4713 ($colon$colon!60 e!40245 (ite c!8026 (h!2004 (toList!689 lt!24915)) (tuple2!2023 (_1!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))))

(declare-fun c!8028 () Bool)

(assert (=> bm!4711 (= c!8028 c!8026)))

(declare-fun b!61257 () Bool)

(assert (=> b!61257 (= e!40245 (insertStrictlySorted!46 (t!4792 (toList!689 lt!24915)) (_1!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun b!61258 () Bool)

(declare-fun e!40246 () Bool)

(declare-fun lt!25280 () List!1426)

(assert (=> b!61258 (= e!40246 (contains!685 lt!25280 (tuple2!2023 (_1!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(declare-fun bm!4712 () Bool)

(assert (=> bm!4712 (= call!4714 call!4715)))

(declare-fun b!61259 () Bool)

(declare-fun res!33760 () Bool)

(assert (=> b!61259 (=> (not res!33760) (not e!40246))))

(assert (=> b!61259 (= res!33760 (containsKey!129 lt!25280 (_1!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun b!61260 () Bool)

(declare-fun e!40248 () List!1426)

(declare-fun e!40249 () List!1426)

(assert (=> b!61260 (= e!40248 e!40249)))

(declare-fun c!8027 () Bool)

(assert (=> b!61260 (= c!8027 (and ((_ is Cons!1422) (toList!689 lt!24915)) (= (_1!1022 (h!2004 (toList!689 lt!24915))) (_1!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(declare-fun b!61261 () Bool)

(declare-fun c!8029 () Bool)

(assert (=> b!61261 (= c!8029 (and ((_ is Cons!1422) (toList!689 lt!24915)) (bvsgt (_1!1022 (h!2004 (toList!689 lt!24915))) (_1!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(assert (=> b!61261 (= e!40249 e!40247)))

(declare-fun d!12071 () Bool)

(assert (=> d!12071 e!40246))

(declare-fun res!33759 () Bool)

(assert (=> d!12071 (=> (not res!33759) (not e!40246))))

(assert (=> d!12071 (= res!33759 (isStrictlySorted!272 lt!25280))))

(assert (=> d!12071 (= lt!25280 e!40248)))

(assert (=> d!12071 (= c!8026 (and ((_ is Cons!1422) (toList!689 lt!24915)) (bvslt (_1!1022 (h!2004 (toList!689 lt!24915))) (_1!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(assert (=> d!12071 (isStrictlySorted!272 (toList!689 lt!24915))))

(assert (=> d!12071 (= (insertStrictlySorted!46 (toList!689 lt!24915) (_1!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!25280)))

(declare-fun b!61262 () Bool)

(assert (=> b!61262 (= e!40245 (ite c!8027 (t!4792 (toList!689 lt!24915)) (ite c!8029 (Cons!1422 (h!2004 (toList!689 lt!24915)) (t!4792 (toList!689 lt!24915))) Nil!1423)))))

(declare-fun b!61263 () Bool)

(assert (=> b!61263 (= e!40248 call!4713)))

(declare-fun b!61264 () Bool)

(assert (=> b!61264 (= e!40249 call!4715)))

(declare-fun b!61265 () Bool)

(assert (=> b!61265 (= e!40247 call!4714)))

(assert (= (and d!12071 c!8026) b!61263))

(assert (= (and d!12071 (not c!8026)) b!61260))

(assert (= (and b!61260 c!8027) b!61264))

(assert (= (and b!61260 (not c!8027)) b!61261))

(assert (= (and b!61261 c!8029) b!61265))

(assert (= (and b!61261 (not c!8029)) b!61256))

(assert (= (or b!61265 b!61256) bm!4712))

(assert (= (or b!61264 bm!4712) bm!4710))

(assert (= (or b!61263 bm!4710) bm!4711))

(assert (= (and bm!4711 c!8028) b!61257))

(assert (= (and bm!4711 (not c!8028)) b!61262))

(assert (= (and d!12071 res!33759) b!61259))

(assert (= (and b!61259 res!33760) b!61258))

(declare-fun m!53955 () Bool)

(assert (=> b!61258 m!53955))

(declare-fun m!53957 () Bool)

(assert (=> bm!4711 m!53957))

(declare-fun m!53959 () Bool)

(assert (=> b!61257 m!53959))

(declare-fun m!53961 () Bool)

(assert (=> d!12071 m!53961))

(declare-fun m!53963 () Bool)

(assert (=> d!12071 m!53963))

(declare-fun m!53965 () Bool)

(assert (=> b!61259 m!53965))

(assert (=> d!11987 d!12071))

(assert (=> d!11915 d!11879))

(declare-fun d!12073 () Bool)

(assert (=> d!12073 (isDefined!78 (getValueByKey!126 (toList!689 lt!24917) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!25281 () Unit!1613)

(assert (=> d!12073 (= lt!25281 (choose!331 (toList!689 lt!24917) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!40250 () Bool)

(assert (=> d!12073 e!40250))

(declare-fun res!33761 () Bool)

(assert (=> d!12073 (=> (not res!33761) (not e!40250))))

(assert (=> d!12073 (= res!33761 (isStrictlySorted!272 (toList!689 lt!24917)))))

(assert (=> d!12073 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 lt!24917) #b1000000000000000000000000000000000000000000000000000000000000000) lt!25281)))

(declare-fun b!61266 () Bool)

(assert (=> b!61266 (= e!40250 (containsKey!129 (toList!689 lt!24917) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!12073 res!33761) b!61266))

(assert (=> d!12073 m!53297))

(assert (=> d!12073 m!53297))

(assert (=> d!12073 m!53299))

(declare-fun m!53967 () Bool)

(assert (=> d!12073 m!53967))

(declare-fun m!53969 () Bool)

(assert (=> d!12073 m!53969))

(assert (=> b!61266 m!53293))

(assert (=> b!60835 d!12073))

(declare-fun d!12075 () Bool)

(assert (=> d!12075 (= (isDefined!78 (getValueByKey!126 (toList!689 lt!24917) #b1000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!303 (getValueByKey!126 (toList!689 lt!24917) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!2649 () Bool)

(assert (= bs!2649 d!12075))

(assert (=> bs!2649 m!53297))

(declare-fun m!53971 () Bool)

(assert (=> bs!2649 m!53971))

(assert (=> b!60835 d!12075))

(declare-fun b!61270 () Bool)

(declare-fun e!40252 () Option!132)

(assert (=> b!61270 (= e!40252 None!130)))

(declare-fun b!61268 () Bool)

(declare-fun e!40251 () Option!132)

(assert (=> b!61268 (= e!40251 e!40252)))

(declare-fun c!8031 () Bool)

(assert (=> b!61268 (= c!8031 (and ((_ is Cons!1422) (toList!689 lt!24917)) (not (= (_1!1022 (h!2004 (toList!689 lt!24917))) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!61267 () Bool)

(assert (=> b!61267 (= e!40251 (Some!131 (_2!1022 (h!2004 (toList!689 lt!24917)))))))

(declare-fun b!61269 () Bool)

(assert (=> b!61269 (= e!40252 (getValueByKey!126 (t!4792 (toList!689 lt!24917)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun d!12077 () Bool)

(declare-fun c!8030 () Bool)

(assert (=> d!12077 (= c!8030 (and ((_ is Cons!1422) (toList!689 lt!24917)) (= (_1!1022 (h!2004 (toList!689 lt!24917))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12077 (= (getValueByKey!126 (toList!689 lt!24917) #b1000000000000000000000000000000000000000000000000000000000000000) e!40251)))

(assert (= (and d!12077 c!8030) b!61267))

(assert (= (and d!12077 (not c!8030)) b!61268))

(assert (= (and b!61268 c!8031) b!61269))

(assert (= (and b!61268 (not c!8031)) b!61270))

(declare-fun m!53973 () Bool)

(assert (=> b!61269 m!53973))

(assert (=> b!60835 d!12077))

(declare-fun d!12079 () Bool)

(declare-fun res!33762 () Bool)

(declare-fun e!40253 () Bool)

(assert (=> d!12079 (=> res!33762 e!40253)))

(assert (=> d!12079 (= res!33762 (and ((_ is Cons!1422) (toList!689 e!39931)) (= (_1!1022 (h!2004 (toList!689 e!39931))) (ite c!7884 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (select (arr!1784 (_keys!3694 newMap!16)) (index!3013 lt!24842))))))))

(assert (=> d!12079 (= (containsKey!129 (toList!689 e!39931) (ite c!7884 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (select (arr!1784 (_keys!3694 newMap!16)) (index!3013 lt!24842)))) e!40253)))

(declare-fun b!61271 () Bool)

(declare-fun e!40254 () Bool)

(assert (=> b!61271 (= e!40253 e!40254)))

(declare-fun res!33763 () Bool)

(assert (=> b!61271 (=> (not res!33763) (not e!40254))))

(assert (=> b!61271 (= res!33763 (and (or (not ((_ is Cons!1422) (toList!689 e!39931))) (bvsle (_1!1022 (h!2004 (toList!689 e!39931))) (ite c!7884 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (select (arr!1784 (_keys!3694 newMap!16)) (index!3013 lt!24842))))) ((_ is Cons!1422) (toList!689 e!39931)) (bvslt (_1!1022 (h!2004 (toList!689 e!39931))) (ite c!7884 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (select (arr!1784 (_keys!3694 newMap!16)) (index!3013 lt!24842))))))))

(declare-fun b!61272 () Bool)

(assert (=> b!61272 (= e!40254 (containsKey!129 (t!4792 (toList!689 e!39931)) (ite c!7884 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (select (arr!1784 (_keys!3694 newMap!16)) (index!3013 lt!24842)))))))

(assert (= (and d!12079 (not res!33762)) b!61271))

(assert (= (and b!61271 res!33763) b!61272))

(declare-fun m!53975 () Bool)

(assert (=> b!61272 m!53975))

(assert (=> d!11949 d!12079))

(declare-fun d!12081 () Bool)

(assert (=> d!12081 (= (get!1085 (getValueByKey!126 (toList!689 lt!24917) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (v!2409 (getValueByKey!126 (toList!689 lt!24917) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!12029 d!12081))

(declare-fun b!61276 () Bool)

(declare-fun e!40256 () Option!132)

(assert (=> b!61276 (= e!40256 None!130)))

(declare-fun b!61274 () Bool)

(declare-fun e!40255 () Option!132)

(assert (=> b!61274 (= e!40255 e!40256)))

(declare-fun c!8033 () Bool)

(assert (=> b!61274 (= c!8033 (and ((_ is Cons!1422) (toList!689 lt!24917)) (not (= (_1!1022 (h!2004 (toList!689 lt!24917))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun b!61273 () Bool)

(assert (=> b!61273 (= e!40255 (Some!131 (_2!1022 (h!2004 (toList!689 lt!24917)))))))

(declare-fun b!61275 () Bool)

(assert (=> b!61275 (= e!40256 (getValueByKey!126 (t!4792 (toList!689 lt!24917)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun c!8032 () Bool)

(declare-fun d!12083 () Bool)

(assert (=> d!12083 (= c!8032 (and ((_ is Cons!1422) (toList!689 lt!24917)) (= (_1!1022 (h!2004 (toList!689 lt!24917))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!12083 (= (getValueByKey!126 (toList!689 lt!24917) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!40255)))

(assert (= (and d!12083 c!8032) b!61273))

(assert (= (and d!12083 (not c!8032)) b!61274))

(assert (= (and b!61274 c!8033) b!61275))

(assert (= (and b!61274 (not c!8033)) b!61276))

(assert (=> b!61275 m!53115))

(declare-fun m!53977 () Bool)

(assert (=> b!61275 m!53977))

(assert (=> d!12029 d!12083))

(declare-fun b!61277 () Bool)

(declare-fun e!40262 () ListLongMap!1347)

(declare-fun call!4716 () ListLongMap!1347)

(assert (=> b!61277 (= e!40262 call!4716)))

(declare-fun b!61278 () Bool)

(declare-fun e!40259 () Bool)

(declare-fun lt!25287 () ListLongMap!1347)

(assert (=> b!61278 (= e!40259 (isEmpty!302 lt!25287))))

(declare-fun b!61279 () Bool)

(declare-fun e!40261 () Bool)

(declare-fun e!40258 () Bool)

(assert (=> b!61279 (= e!40261 e!40258)))

(declare-fun c!8036 () Bool)

(declare-fun e!40257 () Bool)

(assert (=> b!61279 (= c!8036 e!40257)))

(declare-fun res!33766 () Bool)

(assert (=> b!61279 (=> (not res!33766) (not e!40257))))

(assert (=> b!61279 (= res!33766 (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(declare-fun b!61280 () Bool)

(declare-fun lt!25282 () Unit!1613)

(declare-fun lt!25285 () Unit!1613)

(assert (=> b!61280 (= lt!25282 lt!25285)))

(declare-fun lt!25286 () ListLongMap!1347)

(declare-fun lt!25283 () (_ BitVec 64))

(declare-fun lt!25288 () (_ BitVec 64))

(declare-fun lt!25284 () V!2857)

(assert (=> b!61280 (not (contains!682 (+!81 lt!25286 (tuple2!2023 lt!25283 lt!25284)) lt!25288))))

(assert (=> b!61280 (= lt!25285 (addStillNotContains!18 lt!25286 lt!25283 lt!25284 lt!25288))))

(assert (=> b!61280 (= lt!25288 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!61280 (= lt!25284 (get!1081 (select (arr!1785 (_values!2049 newMap!16)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2066 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!61280 (= lt!25283 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!61280 (= lt!25286 call!4716)))

(assert (=> b!61280 (= e!40262 (+!81 call!4716 (tuple2!2023 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000) (get!1081 (select (arr!1785 (_values!2049 newMap!16)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2066 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!61281 () Bool)

(assert (=> b!61281 (= e!40258 e!40259)))

(declare-fun c!8035 () Bool)

(assert (=> b!61281 (= c!8035 (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(declare-fun bm!4713 () Bool)

(assert (=> bm!4713 (= call!4716 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2066 newMap!16)))))

(declare-fun b!61282 () Bool)

(declare-fun e!40263 () Bool)

(assert (=> b!61282 (= e!40258 e!40263)))

(assert (=> b!61282 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(declare-fun res!33765 () Bool)

(assert (=> b!61282 (= res!33765 (contains!682 lt!25287 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61282 (=> (not res!33765) (not e!40263))))

(declare-fun b!61283 () Bool)

(declare-fun e!40260 () ListLongMap!1347)

(assert (=> b!61283 (= e!40260 e!40262)))

(declare-fun c!8037 () Bool)

(assert (=> b!61283 (= c!8037 (validKeyInArray!0 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61284 () Bool)

(assert (=> b!61284 (= e!40257 (validKeyInArray!0 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61284 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!61285 () Bool)

(declare-fun res!33767 () Bool)

(assert (=> b!61285 (=> (not res!33767) (not e!40261))))

(assert (=> b!61285 (= res!33767 (not (contains!682 lt!25287 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!61286 () Bool)

(assert (=> b!61286 (= e!40260 (ListLongMap!1348 Nil!1423))))

(declare-fun b!61288 () Bool)

(assert (=> b!61288 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(assert (=> b!61288 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2016 (_values!2049 newMap!16))))))

(assert (=> b!61288 (= e!40263 (= (apply!67 lt!25287 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)) (get!1081 (select (arr!1785 (_values!2049 newMap!16)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2066 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!12085 () Bool)

(assert (=> d!12085 e!40261))

(declare-fun res!33764 () Bool)

(assert (=> d!12085 (=> (not res!33764) (not e!40261))))

(assert (=> d!12085 (= res!33764 (not (contains!682 lt!25287 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12085 (= lt!25287 e!40260)))

(declare-fun c!8034 () Bool)

(assert (=> d!12085 (= c!8034 (bvsge #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(assert (=> d!12085 (validMask!0 (mask!5962 newMap!16))))

(assert (=> d!12085 (= (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)) lt!25287)))

(declare-fun b!61287 () Bool)

(assert (=> b!61287 (= e!40259 (= lt!25287 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2066 newMap!16))))))

(assert (= (and d!12085 c!8034) b!61286))

(assert (= (and d!12085 (not c!8034)) b!61283))

(assert (= (and b!61283 c!8037) b!61280))

(assert (= (and b!61283 (not c!8037)) b!61277))

(assert (= (or b!61280 b!61277) bm!4713))

(assert (= (and d!12085 res!33764) b!61285))

(assert (= (and b!61285 res!33767) b!61279))

(assert (= (and b!61279 res!33766) b!61284))

(assert (= (and b!61279 c!8036) b!61282))

(assert (= (and b!61279 (not c!8036)) b!61281))

(assert (= (and b!61282 res!33765) b!61288))

(assert (= (and b!61281 c!8035) b!61287))

(assert (= (and b!61281 (not c!8035)) b!61278))

(declare-fun b_lambda!2711 () Bool)

(assert (=> (not b_lambda!2711) (not b!61280)))

(assert (=> b!61280 t!4804))

(declare-fun b_and!3725 () Bool)

(assert (= b_and!3721 (and (=> t!4804 result!2427) b_and!3725)))

(assert (=> b!61280 t!4806))

(declare-fun b_and!3727 () Bool)

(assert (= b_and!3723 (and (=> t!4806 result!2429) b_and!3727)))

(declare-fun b_lambda!2713 () Bool)

(assert (=> (not b_lambda!2713) (not b!61288)))

(assert (=> b!61288 t!4804))

(declare-fun b_and!3729 () Bool)

(assert (= b_and!3725 (and (=> t!4804 result!2427) b_and!3729)))

(assert (=> b!61288 t!4806))

(declare-fun b_and!3731 () Bool)

(assert (= b_and!3727 (and (=> t!4806 result!2429) b_and!3731)))

(assert (=> b!61283 m!53277))

(assert (=> b!61283 m!53277))

(assert (=> b!61283 m!53279))

(assert (=> b!61282 m!53277))

(assert (=> b!61282 m!53277))

(declare-fun m!53979 () Bool)

(assert (=> b!61282 m!53979))

(assert (=> b!61288 m!53497))

(assert (=> b!61288 m!53389))

(assert (=> b!61288 m!53499))

(assert (=> b!61288 m!53497))

(assert (=> b!61288 m!53277))

(assert (=> b!61288 m!53389))

(assert (=> b!61288 m!53277))

(declare-fun m!53981 () Bool)

(assert (=> b!61288 m!53981))

(declare-fun m!53983 () Bool)

(assert (=> bm!4713 m!53983))

(assert (=> b!61287 m!53983))

(declare-fun m!53985 () Bool)

(assert (=> b!61285 m!53985))

(assert (=> b!61280 m!53497))

(assert (=> b!61280 m!53389))

(assert (=> b!61280 m!53499))

(assert (=> b!61280 m!53497))

(assert (=> b!61280 m!53277))

(assert (=> b!61280 m!53389))

(declare-fun m!53987 () Bool)

(assert (=> b!61280 m!53987))

(declare-fun m!53989 () Bool)

(assert (=> b!61280 m!53989))

(declare-fun m!53991 () Bool)

(assert (=> b!61280 m!53991))

(declare-fun m!53993 () Bool)

(assert (=> b!61280 m!53993))

(assert (=> b!61280 m!53987))

(assert (=> b!61284 m!53277))

(assert (=> b!61284 m!53277))

(assert (=> b!61284 m!53279))

(declare-fun m!53995 () Bool)

(assert (=> d!12085 m!53995))

(assert (=> d!12085 m!53287))

(declare-fun m!53997 () Bool)

(assert (=> b!61278 m!53997))

(assert (=> bm!4692 d!12085))

(declare-fun d!12087 () Bool)

(declare-fun e!40265 () Bool)

(assert (=> d!12087 e!40265))

(declare-fun res!33768 () Bool)

(assert (=> d!12087 (=> res!33768 e!40265)))

(declare-fun lt!25291 () Bool)

(assert (=> d!12087 (= res!33768 (not lt!25291))))

(declare-fun lt!25292 () Bool)

(assert (=> d!12087 (= lt!25291 lt!25292)))

(declare-fun lt!25289 () Unit!1613)

(declare-fun e!40264 () Unit!1613)

(assert (=> d!12087 (= lt!25289 e!40264)))

(declare-fun c!8038 () Bool)

(assert (=> d!12087 (= c!8038 lt!25292)))

(assert (=> d!12087 (= lt!25292 (containsKey!129 (toList!689 lt!25232) (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!12087 (= (contains!682 lt!25232 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)) lt!25291)))

(declare-fun b!61289 () Bool)

(declare-fun lt!25290 () Unit!1613)

(assert (=> b!61289 (= e!40264 lt!25290)))

(assert (=> b!61289 (= lt!25290 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 lt!25232) (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61289 (isDefined!78 (getValueByKey!126 (toList!689 lt!25232) (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61290 () Bool)

(declare-fun Unit!1643 () Unit!1613)

(assert (=> b!61290 (= e!40264 Unit!1643)))

(declare-fun b!61291 () Bool)

(assert (=> b!61291 (= e!40265 (isDefined!78 (getValueByKey!126 (toList!689 lt!25232) (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!12087 c!8038) b!61289))

(assert (= (and d!12087 (not c!8038)) b!61290))

(assert (= (and d!12087 (not res!33768)) b!61291))

(assert (=> d!12087 m!53277))

(declare-fun m!53999 () Bool)

(assert (=> d!12087 m!53999))

(assert (=> b!61289 m!53277))

(declare-fun m!54001 () Bool)

(assert (=> b!61289 m!54001))

(assert (=> b!61289 m!53277))

(declare-fun m!54003 () Bool)

(assert (=> b!61289 m!54003))

(assert (=> b!61289 m!54003))

(declare-fun m!54005 () Bool)

(assert (=> b!61289 m!54005))

(assert (=> b!61291 m!53277))

(assert (=> b!61291 m!54003))

(assert (=> b!61291 m!54003))

(assert (=> b!61291 m!54005))

(assert (=> b!61146 d!12087))

(declare-fun b!61295 () Bool)

(declare-fun e!40267 () Option!132)

(assert (=> b!61295 (= e!40267 None!130)))

(declare-fun b!61293 () Bool)

(declare-fun e!40266 () Option!132)

(assert (=> b!61293 (= e!40266 e!40267)))

(declare-fun c!8040 () Bool)

(assert (=> b!61293 (= c!8040 (and ((_ is Cons!1422) (toList!689 lt!25129)) (not (= (_1!1022 (h!2004 (toList!689 lt!25129))) (_1!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))))))

(declare-fun b!61292 () Bool)

(assert (=> b!61292 (= e!40266 (Some!131 (_2!1022 (h!2004 (toList!689 lt!25129)))))))

(declare-fun b!61294 () Bool)

(assert (=> b!61294 (= e!40267 (getValueByKey!126 (t!4792 (toList!689 lt!25129)) (_1!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun d!12089 () Bool)

(declare-fun c!8039 () Bool)

(assert (=> d!12089 (= c!8039 (and ((_ is Cons!1422) (toList!689 lt!25129)) (= (_1!1022 (h!2004 (toList!689 lt!25129))) (_1!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(assert (=> d!12089 (= (getValueByKey!126 (toList!689 lt!25129) (_1!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))) e!40266)))

(assert (= (and d!12089 c!8039) b!61292))

(assert (= (and d!12089 (not c!8039)) b!61293))

(assert (= (and b!61293 c!8040) b!61294))

(assert (= (and b!61293 (not c!8040)) b!61295))

(declare-fun m!54007 () Bool)

(assert (=> b!61294 m!54007))

(assert (=> b!60999 d!12089))

(declare-fun d!12091 () Bool)

(assert (not d!12091))

(assert (=> b!61113 d!12091))

(declare-fun d!12093 () Bool)

(assert (=> d!12093 (arrayContainsKey!0 (_keys!3694 newMap!16) lt!25180 #b00000000000000000000000000000000)))

(declare-fun lt!25295 () Unit!1613)

(declare-fun choose!13 (array!3729 (_ BitVec 64) (_ BitVec 32)) Unit!1613)

(assert (=> d!12093 (= lt!25295 (choose!13 (_keys!3694 newMap!16) lt!25180 #b00000000000000000000000000000000))))

(assert (=> d!12093 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (=> d!12093 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3694 newMap!16) lt!25180 #b00000000000000000000000000000000) lt!25295)))

(declare-fun bs!2650 () Bool)

(assert (= bs!2650 d!12093))

(assert (=> bs!2650 m!53693))

(declare-fun m!54009 () Bool)

(assert (=> bs!2650 m!54009))

(assert (=> b!61059 d!12093))

(declare-fun d!12095 () Bool)

(declare-fun res!33769 () Bool)

(declare-fun e!40268 () Bool)

(assert (=> d!12095 (=> res!33769 e!40268)))

(assert (=> d!12095 (= res!33769 (= (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000) lt!25180))))

(assert (=> d!12095 (= (arrayContainsKey!0 (_keys!3694 newMap!16) lt!25180 #b00000000000000000000000000000000) e!40268)))

(declare-fun b!61296 () Bool)

(declare-fun e!40269 () Bool)

(assert (=> b!61296 (= e!40268 e!40269)))

(declare-fun res!33770 () Bool)

(assert (=> b!61296 (=> (not res!33770) (not e!40269))))

(assert (=> b!61296 (= res!33770 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2015 (_keys!3694 newMap!16))))))

(declare-fun b!61297 () Bool)

(assert (=> b!61297 (= e!40269 (arrayContainsKey!0 (_keys!3694 newMap!16) lt!25180 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!12095 (not res!33769)) b!61296))

(assert (= (and b!61296 res!33770) b!61297))

(assert (=> d!12095 m!53277))

(declare-fun m!54011 () Bool)

(assert (=> b!61297 m!54011))

(assert (=> b!61059 d!12095))

(declare-fun b!61298 () Bool)

(declare-fun e!40270 () SeekEntryResult!222)

(declare-fun e!40271 () SeekEntryResult!222)

(assert (=> b!61298 (= e!40270 e!40271)))

(declare-fun lt!25298 () (_ BitVec 64))

(declare-fun lt!25296 () SeekEntryResult!222)

(assert (=> b!61298 (= lt!25298 (select (arr!1784 (_keys!3694 newMap!16)) (index!3014 lt!25296)))))

(declare-fun c!8043 () Bool)

(assert (=> b!61298 (= c!8043 (= lt!25298 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61299 () Bool)

(declare-fun e!40272 () SeekEntryResult!222)

(assert (=> b!61299 (= e!40272 (seekKeyOrZeroReturnVacant!0 (x!10156 lt!25296) (index!3014 lt!25296) (index!3014 lt!25296) (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000) (_keys!3694 newMap!16) (mask!5962 newMap!16)))))

(declare-fun b!61300 () Bool)

(declare-fun c!8041 () Bool)

(assert (=> b!61300 (= c!8041 (= lt!25298 #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61300 (= e!40271 e!40272)))

(declare-fun b!61301 () Bool)

(assert (=> b!61301 (= e!40270 Undefined!222)))

(declare-fun b!61302 () Bool)

(assert (=> b!61302 (= e!40272 (MissingZero!222 (index!3014 lt!25296)))))

(declare-fun d!12097 () Bool)

(declare-fun lt!25297 () SeekEntryResult!222)

(assert (=> d!12097 (and (or ((_ is Undefined!222) lt!25297) (not ((_ is Found!222) lt!25297)) (and (bvsge (index!3013 lt!25297) #b00000000000000000000000000000000) (bvslt (index!3013 lt!25297) (size!2015 (_keys!3694 newMap!16))))) (or ((_ is Undefined!222) lt!25297) ((_ is Found!222) lt!25297) (not ((_ is MissingZero!222) lt!25297)) (and (bvsge (index!3012 lt!25297) #b00000000000000000000000000000000) (bvslt (index!3012 lt!25297) (size!2015 (_keys!3694 newMap!16))))) (or ((_ is Undefined!222) lt!25297) ((_ is Found!222) lt!25297) ((_ is MissingZero!222) lt!25297) (not ((_ is MissingVacant!222) lt!25297)) (and (bvsge (index!3015 lt!25297) #b00000000000000000000000000000000) (bvslt (index!3015 lt!25297) (size!2015 (_keys!3694 newMap!16))))) (or ((_ is Undefined!222) lt!25297) (ite ((_ is Found!222) lt!25297) (= (select (arr!1784 (_keys!3694 newMap!16)) (index!3013 lt!25297)) (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)) (ite ((_ is MissingZero!222) lt!25297) (= (select (arr!1784 (_keys!3694 newMap!16)) (index!3012 lt!25297)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!222) lt!25297) (= (select (arr!1784 (_keys!3694 newMap!16)) (index!3015 lt!25297)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12097 (= lt!25297 e!40270)))

(declare-fun c!8042 () Bool)

(assert (=> d!12097 (= c!8042 (and ((_ is Intermediate!222) lt!25296) (undefined!1034 lt!25296)))))

(assert (=> d!12097 (= lt!25296 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000) (mask!5962 newMap!16)) (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000) (_keys!3694 newMap!16) (mask!5962 newMap!16)))))

(assert (=> d!12097 (validMask!0 (mask!5962 newMap!16))))

(assert (=> d!12097 (= (seekEntryOrOpen!0 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000) (_keys!3694 newMap!16) (mask!5962 newMap!16)) lt!25297)))

(declare-fun b!61303 () Bool)

(assert (=> b!61303 (= e!40271 (Found!222 (index!3014 lt!25296)))))

(assert (= (and d!12097 c!8042) b!61301))

(assert (= (and d!12097 (not c!8042)) b!61298))

(assert (= (and b!61298 c!8043) b!61303))

(assert (= (and b!61298 (not c!8043)) b!61300))

(assert (= (and b!61300 c!8041) b!61302))

(assert (= (and b!61300 (not c!8041)) b!61299))

(declare-fun m!54013 () Bool)

(assert (=> b!61298 m!54013))

(assert (=> b!61299 m!53277))

(declare-fun m!54015 () Bool)

(assert (=> b!61299 m!54015))

(declare-fun m!54017 () Bool)

(assert (=> d!12097 m!54017))

(assert (=> d!12097 m!53277))

(declare-fun m!54019 () Bool)

(assert (=> d!12097 m!54019))

(assert (=> d!12097 m!53287))

(declare-fun m!54021 () Bool)

(assert (=> d!12097 m!54021))

(declare-fun m!54023 () Bool)

(assert (=> d!12097 m!54023))

(assert (=> d!12097 m!53277))

(assert (=> d!12097 m!54017))

(declare-fun m!54025 () Bool)

(assert (=> d!12097 m!54025))

(assert (=> b!61059 d!12097))

(declare-fun d!12099 () Bool)

(declare-fun res!33773 () Bool)

(declare-fun e!40273 () Bool)

(assert (=> d!12099 (=> (not res!33773) (not e!40273))))

(assert (=> d!12099 (= res!33773 (validMask!0 (mask!5962 (_2!1023 lt!24841))))))

(assert (=> d!12099 (= (simpleValid!43 (_2!1023 lt!24841)) e!40273)))

(declare-fun b!61305 () Bool)

(declare-fun res!33774 () Bool)

(assert (=> b!61305 (=> (not res!33774) (not e!40273))))

(assert (=> b!61305 (= res!33774 (bvsge (size!2021 (_2!1023 lt!24841)) (_size!363 (_2!1023 lt!24841))))))

(declare-fun b!61307 () Bool)

(assert (=> b!61307 (= e!40273 (and (bvsge (extraKeys!1949 (_2!1023 lt!24841)) #b00000000000000000000000000000000) (bvsle (extraKeys!1949 (_2!1023 lt!24841)) #b00000000000000000000000000000011) (bvsge (_vacant!363 (_2!1023 lt!24841)) #b00000000000000000000000000000000)))))

(declare-fun b!61306 () Bool)

(declare-fun res!33771 () Bool)

(assert (=> b!61306 (=> (not res!33771) (not e!40273))))

(assert (=> b!61306 (= res!33771 (= (size!2021 (_2!1023 lt!24841)) (bvadd (_size!363 (_2!1023 lt!24841)) (bvsdiv (bvadd (extraKeys!1949 (_2!1023 lt!24841)) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!61304 () Bool)

(declare-fun res!33772 () Bool)

(assert (=> b!61304 (=> (not res!33772) (not e!40273))))

(assert (=> b!61304 (= res!33772 (and (= (size!2016 (_values!2049 (_2!1023 lt!24841))) (bvadd (mask!5962 (_2!1023 lt!24841)) #b00000000000000000000000000000001)) (= (size!2015 (_keys!3694 (_2!1023 lt!24841))) (size!2016 (_values!2049 (_2!1023 lt!24841)))) (bvsge (_size!363 (_2!1023 lt!24841)) #b00000000000000000000000000000000) (bvsle (_size!363 (_2!1023 lt!24841)) (bvadd (mask!5962 (_2!1023 lt!24841)) #b00000000000000000000000000000001))))))

(assert (= (and d!12099 res!33773) b!61304))

(assert (= (and b!61304 res!33772) b!61305))

(assert (= (and b!61305 res!33774) b!61306))

(assert (= (and b!61306 res!33771) b!61307))

(declare-fun m!54027 () Bool)

(assert (=> d!12099 m!54027))

(declare-fun m!54029 () Bool)

(assert (=> b!61305 m!54029))

(assert (=> b!61306 m!54029))

(assert (=> d!12005 d!12099))

(declare-fun lt!25299 () Bool)

(declare-fun d!12101 () Bool)

(assert (=> d!12101 (= lt!25299 (select (content!66 (ite c!7847 (Cons!1423 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) Nil!1424) Nil!1424)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun e!40274 () Bool)

(assert (=> d!12101 (= lt!25299 e!40274)))

(declare-fun res!33775 () Bool)

(assert (=> d!12101 (=> (not res!33775) (not e!40274))))

(assert (=> d!12101 (= res!33775 ((_ is Cons!1423) (ite c!7847 (Cons!1423 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) Nil!1424) Nil!1424)))))

(assert (=> d!12101 (= (contains!684 (ite c!7847 (Cons!1423 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) Nil!1424) Nil!1424) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) lt!25299)))

(declare-fun b!61308 () Bool)

(declare-fun e!40275 () Bool)

(assert (=> b!61308 (= e!40274 e!40275)))

(declare-fun res!33776 () Bool)

(assert (=> b!61308 (=> res!33776 e!40275)))

(assert (=> b!61308 (= res!33776 (= (h!2005 (ite c!7847 (Cons!1423 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) Nil!1424) Nil!1424)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!61309 () Bool)

(assert (=> b!61309 (= e!40275 (contains!684 (t!4793 (ite c!7847 (Cons!1423 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) Nil!1424) Nil!1424)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(assert (= (and d!12101 res!33775) b!61308))

(assert (= (and b!61308 (not res!33776)) b!61309))

(declare-fun m!54031 () Bool)

(assert (=> d!12101 m!54031))

(assert (=> d!12101 m!53675))

(declare-fun m!54033 () Bool)

(assert (=> d!12101 m!54033))

(assert (=> b!61309 m!53675))

(declare-fun m!54035 () Bool)

(assert (=> b!61309 m!54035))

(assert (=> b!61050 d!12101))

(declare-fun d!12103 () Bool)

(assert (=> d!12103 (= (validKeyInArray!0 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)) (and (not (= (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!61120 d!12103))

(declare-fun d!12105 () Bool)

(assert (=> d!12105 (= (apply!67 (+!81 lt!25211 (tuple2!2023 lt!25198 (zeroValue!1980 newMap!16))) lt!25199) (apply!67 lt!25211 lt!25199))))

(declare-fun lt!25300 () Unit!1613)

(assert (=> d!12105 (= lt!25300 (choose!326 lt!25211 lt!25198 (zeroValue!1980 newMap!16) lt!25199))))

(declare-fun e!40276 () Bool)

(assert (=> d!12105 e!40276))

(declare-fun res!33777 () Bool)

(assert (=> d!12105 (=> (not res!33777) (not e!40276))))

(assert (=> d!12105 (= res!33777 (contains!682 lt!25211 lt!25199))))

(assert (=> d!12105 (= (addApplyDifferent!43 lt!25211 lt!25198 (zeroValue!1980 newMap!16) lt!25199) lt!25300)))

(declare-fun b!61310 () Bool)

(assert (=> b!61310 (= e!40276 (not (= lt!25199 lt!25198)))))

(assert (= (and d!12105 res!33777) b!61310))

(declare-fun m!54037 () Bool)

(assert (=> d!12105 m!54037))

(assert (=> d!12105 m!53771))

(declare-fun m!54039 () Bool)

(assert (=> d!12105 m!54039))

(assert (=> d!12105 m!53775))

(assert (=> d!12105 m!53777))

(assert (=> d!12105 m!53775))

(assert (=> b!61135 d!12105))

(declare-fun d!12107 () Bool)

(assert (=> d!12107 (contains!682 (+!81 lt!25204 (tuple2!2023 lt!25207 (zeroValue!1980 newMap!16))) lt!25201)))

(declare-fun lt!25301 () Unit!1613)

(assert (=> d!12107 (= lt!25301 (choose!327 lt!25204 lt!25207 (zeroValue!1980 newMap!16) lt!25201))))

(assert (=> d!12107 (contains!682 lt!25204 lt!25201)))

(assert (=> d!12107 (= (addStillContains!43 lt!25204 lt!25207 (zeroValue!1980 newMap!16) lt!25201) lt!25301)))

(declare-fun bs!2651 () Bool)

(assert (= bs!2651 d!12107))

(assert (=> bs!2651 m!53765))

(assert (=> bs!2651 m!53765))

(assert (=> bs!2651 m!53767))

(declare-fun m!54041 () Bool)

(assert (=> bs!2651 m!54041))

(declare-fun m!54043 () Bool)

(assert (=> bs!2651 m!54043))

(assert (=> b!61135 d!12107))

(declare-fun d!12109 () Bool)

(assert (=> d!12109 (= (apply!67 (+!81 lt!25205 (tuple2!2023 lt!25195 (minValue!1980 newMap!16))) lt!25215) (get!1085 (getValueByKey!126 (toList!689 (+!81 lt!25205 (tuple2!2023 lt!25195 (minValue!1980 newMap!16)))) lt!25215)))))

(declare-fun bs!2652 () Bool)

(assert (= bs!2652 d!12109))

(declare-fun m!54045 () Bool)

(assert (=> bs!2652 m!54045))

(assert (=> bs!2652 m!54045))

(declare-fun m!54047 () Bool)

(assert (=> bs!2652 m!54047))

(assert (=> b!61135 d!12109))

(declare-fun d!12111 () Bool)

(declare-fun e!40277 () Bool)

(assert (=> d!12111 e!40277))

(declare-fun res!33779 () Bool)

(assert (=> d!12111 (=> (not res!33779) (not e!40277))))

(declare-fun lt!25303 () ListLongMap!1347)

(assert (=> d!12111 (= res!33779 (contains!682 lt!25303 (_1!1022 (tuple2!2023 lt!25207 (zeroValue!1980 newMap!16)))))))

(declare-fun lt!25305 () List!1426)

(assert (=> d!12111 (= lt!25303 (ListLongMap!1348 lt!25305))))

(declare-fun lt!25304 () Unit!1613)

(declare-fun lt!25302 () Unit!1613)

(assert (=> d!12111 (= lt!25304 lt!25302)))

(assert (=> d!12111 (= (getValueByKey!126 lt!25305 (_1!1022 (tuple2!2023 lt!25207 (zeroValue!1980 newMap!16)))) (Some!131 (_2!1022 (tuple2!2023 lt!25207 (zeroValue!1980 newMap!16)))))))

(assert (=> d!12111 (= lt!25302 (lemmaContainsTupThenGetReturnValue!43 lt!25305 (_1!1022 (tuple2!2023 lt!25207 (zeroValue!1980 newMap!16))) (_2!1022 (tuple2!2023 lt!25207 (zeroValue!1980 newMap!16)))))))

(assert (=> d!12111 (= lt!25305 (insertStrictlySorted!46 (toList!689 lt!25204) (_1!1022 (tuple2!2023 lt!25207 (zeroValue!1980 newMap!16))) (_2!1022 (tuple2!2023 lt!25207 (zeroValue!1980 newMap!16)))))))

(assert (=> d!12111 (= (+!81 lt!25204 (tuple2!2023 lt!25207 (zeroValue!1980 newMap!16))) lt!25303)))

(declare-fun b!61311 () Bool)

(declare-fun res!33778 () Bool)

(assert (=> b!61311 (=> (not res!33778) (not e!40277))))

(assert (=> b!61311 (= res!33778 (= (getValueByKey!126 (toList!689 lt!25303) (_1!1022 (tuple2!2023 lt!25207 (zeroValue!1980 newMap!16)))) (Some!131 (_2!1022 (tuple2!2023 lt!25207 (zeroValue!1980 newMap!16))))))))

(declare-fun b!61312 () Bool)

(assert (=> b!61312 (= e!40277 (contains!685 (toList!689 lt!25303) (tuple2!2023 lt!25207 (zeroValue!1980 newMap!16))))))

(assert (= (and d!12111 res!33779) b!61311))

(assert (= (and b!61311 res!33778) b!61312))

(declare-fun m!54049 () Bool)

(assert (=> d!12111 m!54049))

(declare-fun m!54051 () Bool)

(assert (=> d!12111 m!54051))

(declare-fun m!54053 () Bool)

(assert (=> d!12111 m!54053))

(declare-fun m!54055 () Bool)

(assert (=> d!12111 m!54055))

(declare-fun m!54057 () Bool)

(assert (=> b!61311 m!54057))

(declare-fun m!54059 () Bool)

(assert (=> b!61312 m!54059))

(assert (=> b!61135 d!12111))

(declare-fun d!12113 () Bool)

(assert (=> d!12113 (= (apply!67 lt!25205 lt!25215) (get!1085 (getValueByKey!126 (toList!689 lt!25205) lt!25215)))))

(declare-fun bs!2653 () Bool)

(assert (= bs!2653 d!12113))

(declare-fun m!54061 () Bool)

(assert (=> bs!2653 m!54061))

(assert (=> bs!2653 m!54061))

(declare-fun m!54063 () Bool)

(assert (=> bs!2653 m!54063))

(assert (=> b!61135 d!12113))

(declare-fun d!12115 () Bool)

(assert (=> d!12115 (= (apply!67 lt!25211 lt!25199) (get!1085 (getValueByKey!126 (toList!689 lt!25211) lt!25199)))))

(declare-fun bs!2654 () Bool)

(assert (= bs!2654 d!12115))

(declare-fun m!54065 () Bool)

(assert (=> bs!2654 m!54065))

(assert (=> bs!2654 m!54065))

(declare-fun m!54067 () Bool)

(assert (=> bs!2654 m!54067))

(assert (=> b!61135 d!12115))

(declare-fun d!12117 () Bool)

(declare-fun e!40278 () Bool)

(assert (=> d!12117 e!40278))

(declare-fun res!33781 () Bool)

(assert (=> d!12117 (=> (not res!33781) (not e!40278))))

(declare-fun lt!25307 () ListLongMap!1347)

(assert (=> d!12117 (= res!33781 (contains!682 lt!25307 (_1!1022 (tuple2!2023 lt!25197 (minValue!1980 newMap!16)))))))

(declare-fun lt!25309 () List!1426)

(assert (=> d!12117 (= lt!25307 (ListLongMap!1348 lt!25309))))

(declare-fun lt!25308 () Unit!1613)

(declare-fun lt!25306 () Unit!1613)

(assert (=> d!12117 (= lt!25308 lt!25306)))

(assert (=> d!12117 (= (getValueByKey!126 lt!25309 (_1!1022 (tuple2!2023 lt!25197 (minValue!1980 newMap!16)))) (Some!131 (_2!1022 (tuple2!2023 lt!25197 (minValue!1980 newMap!16)))))))

(assert (=> d!12117 (= lt!25306 (lemmaContainsTupThenGetReturnValue!43 lt!25309 (_1!1022 (tuple2!2023 lt!25197 (minValue!1980 newMap!16))) (_2!1022 (tuple2!2023 lt!25197 (minValue!1980 newMap!16)))))))

(assert (=> d!12117 (= lt!25309 (insertStrictlySorted!46 (toList!689 lt!25208) (_1!1022 (tuple2!2023 lt!25197 (minValue!1980 newMap!16))) (_2!1022 (tuple2!2023 lt!25197 (minValue!1980 newMap!16)))))))

(assert (=> d!12117 (= (+!81 lt!25208 (tuple2!2023 lt!25197 (minValue!1980 newMap!16))) lt!25307)))

(declare-fun b!61313 () Bool)

(declare-fun res!33780 () Bool)

(assert (=> b!61313 (=> (not res!33780) (not e!40278))))

(assert (=> b!61313 (= res!33780 (= (getValueByKey!126 (toList!689 lt!25307) (_1!1022 (tuple2!2023 lt!25197 (minValue!1980 newMap!16)))) (Some!131 (_2!1022 (tuple2!2023 lt!25197 (minValue!1980 newMap!16))))))))

(declare-fun b!61314 () Bool)

(assert (=> b!61314 (= e!40278 (contains!685 (toList!689 lt!25307) (tuple2!2023 lt!25197 (minValue!1980 newMap!16))))))

(assert (= (and d!12117 res!33781) b!61313))

(assert (= (and b!61313 res!33780) b!61314))

(declare-fun m!54069 () Bool)

(assert (=> d!12117 m!54069))

(declare-fun m!54071 () Bool)

(assert (=> d!12117 m!54071))

(declare-fun m!54073 () Bool)

(assert (=> d!12117 m!54073))

(declare-fun m!54075 () Bool)

(assert (=> d!12117 m!54075))

(declare-fun m!54077 () Bool)

(assert (=> b!61313 m!54077))

(declare-fun m!54079 () Bool)

(assert (=> b!61314 m!54079))

(assert (=> b!61135 d!12117))

(declare-fun d!12119 () Bool)

(assert (=> d!12119 (= (apply!67 (+!81 lt!25208 (tuple2!2023 lt!25197 (minValue!1980 newMap!16))) lt!25203) (get!1085 (getValueByKey!126 (toList!689 (+!81 lt!25208 (tuple2!2023 lt!25197 (minValue!1980 newMap!16)))) lt!25203)))))

(declare-fun bs!2655 () Bool)

(assert (= bs!2655 d!12119))

(declare-fun m!54081 () Bool)

(assert (=> bs!2655 m!54081))

(assert (=> bs!2655 m!54081))

(declare-fun m!54083 () Bool)

(assert (=> bs!2655 m!54083))

(assert (=> b!61135 d!12119))

(assert (=> b!61135 d!12085))

(declare-fun d!12121 () Bool)

(declare-fun e!40279 () Bool)

(assert (=> d!12121 e!40279))

(declare-fun res!33783 () Bool)

(assert (=> d!12121 (=> (not res!33783) (not e!40279))))

(declare-fun lt!25311 () ListLongMap!1347)

(assert (=> d!12121 (= res!33783 (contains!682 lt!25311 (_1!1022 (tuple2!2023 lt!25198 (zeroValue!1980 newMap!16)))))))

(declare-fun lt!25313 () List!1426)

(assert (=> d!12121 (= lt!25311 (ListLongMap!1348 lt!25313))))

(declare-fun lt!25312 () Unit!1613)

(declare-fun lt!25310 () Unit!1613)

(assert (=> d!12121 (= lt!25312 lt!25310)))

(assert (=> d!12121 (= (getValueByKey!126 lt!25313 (_1!1022 (tuple2!2023 lt!25198 (zeroValue!1980 newMap!16)))) (Some!131 (_2!1022 (tuple2!2023 lt!25198 (zeroValue!1980 newMap!16)))))))

(assert (=> d!12121 (= lt!25310 (lemmaContainsTupThenGetReturnValue!43 lt!25313 (_1!1022 (tuple2!2023 lt!25198 (zeroValue!1980 newMap!16))) (_2!1022 (tuple2!2023 lt!25198 (zeroValue!1980 newMap!16)))))))

(assert (=> d!12121 (= lt!25313 (insertStrictlySorted!46 (toList!689 lt!25211) (_1!1022 (tuple2!2023 lt!25198 (zeroValue!1980 newMap!16))) (_2!1022 (tuple2!2023 lt!25198 (zeroValue!1980 newMap!16)))))))

(assert (=> d!12121 (= (+!81 lt!25211 (tuple2!2023 lt!25198 (zeroValue!1980 newMap!16))) lt!25311)))

(declare-fun b!61315 () Bool)

(declare-fun res!33782 () Bool)

(assert (=> b!61315 (=> (not res!33782) (not e!40279))))

(assert (=> b!61315 (= res!33782 (= (getValueByKey!126 (toList!689 lt!25311) (_1!1022 (tuple2!2023 lt!25198 (zeroValue!1980 newMap!16)))) (Some!131 (_2!1022 (tuple2!2023 lt!25198 (zeroValue!1980 newMap!16))))))))

(declare-fun b!61316 () Bool)

(assert (=> b!61316 (= e!40279 (contains!685 (toList!689 lt!25311) (tuple2!2023 lt!25198 (zeroValue!1980 newMap!16))))))

(assert (= (and d!12121 res!33783) b!61315))

(assert (= (and b!61315 res!33782) b!61316))

(declare-fun m!54085 () Bool)

(assert (=> d!12121 m!54085))

(declare-fun m!54087 () Bool)

(assert (=> d!12121 m!54087))

(declare-fun m!54089 () Bool)

(assert (=> d!12121 m!54089))

(declare-fun m!54091 () Bool)

(assert (=> d!12121 m!54091))

(declare-fun m!54093 () Bool)

(assert (=> b!61315 m!54093))

(declare-fun m!54095 () Bool)

(assert (=> b!61316 m!54095))

(assert (=> b!61135 d!12121))

(declare-fun d!12123 () Bool)

(declare-fun e!40281 () Bool)

(assert (=> d!12123 e!40281))

(declare-fun res!33784 () Bool)

(assert (=> d!12123 (=> res!33784 e!40281)))

(declare-fun lt!25316 () Bool)

(assert (=> d!12123 (= res!33784 (not lt!25316))))

(declare-fun lt!25317 () Bool)

(assert (=> d!12123 (= lt!25316 lt!25317)))

(declare-fun lt!25314 () Unit!1613)

(declare-fun e!40280 () Unit!1613)

(assert (=> d!12123 (= lt!25314 e!40280)))

(declare-fun c!8044 () Bool)

(assert (=> d!12123 (= c!8044 lt!25317)))

(assert (=> d!12123 (= lt!25317 (containsKey!129 (toList!689 (+!81 lt!25204 (tuple2!2023 lt!25207 (zeroValue!1980 newMap!16)))) lt!25201))))

(assert (=> d!12123 (= (contains!682 (+!81 lt!25204 (tuple2!2023 lt!25207 (zeroValue!1980 newMap!16))) lt!25201) lt!25316)))

(declare-fun b!61317 () Bool)

(declare-fun lt!25315 () Unit!1613)

(assert (=> b!61317 (= e!40280 lt!25315)))

(assert (=> b!61317 (= lt!25315 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 (+!81 lt!25204 (tuple2!2023 lt!25207 (zeroValue!1980 newMap!16)))) lt!25201))))

(assert (=> b!61317 (isDefined!78 (getValueByKey!126 (toList!689 (+!81 lt!25204 (tuple2!2023 lt!25207 (zeroValue!1980 newMap!16)))) lt!25201))))

(declare-fun b!61318 () Bool)

(declare-fun Unit!1644 () Unit!1613)

(assert (=> b!61318 (= e!40280 Unit!1644)))

(declare-fun b!61319 () Bool)

(assert (=> b!61319 (= e!40281 (isDefined!78 (getValueByKey!126 (toList!689 (+!81 lt!25204 (tuple2!2023 lt!25207 (zeroValue!1980 newMap!16)))) lt!25201)))))

(assert (= (and d!12123 c!8044) b!61317))

(assert (= (and d!12123 (not c!8044)) b!61318))

(assert (= (and d!12123 (not res!33784)) b!61319))

(declare-fun m!54097 () Bool)

(assert (=> d!12123 m!54097))

(declare-fun m!54099 () Bool)

(assert (=> b!61317 m!54099))

(declare-fun m!54101 () Bool)

(assert (=> b!61317 m!54101))

(assert (=> b!61317 m!54101))

(declare-fun m!54103 () Bool)

(assert (=> b!61317 m!54103))

(assert (=> b!61319 m!54101))

(assert (=> b!61319 m!54101))

(assert (=> b!61319 m!54103))

(assert (=> b!61135 d!12123))

(declare-fun d!12125 () Bool)

(assert (=> d!12125 (= (apply!67 (+!81 lt!25208 (tuple2!2023 lt!25197 (minValue!1980 newMap!16))) lt!25203) (apply!67 lt!25208 lt!25203))))

(declare-fun lt!25318 () Unit!1613)

(assert (=> d!12125 (= lt!25318 (choose!326 lt!25208 lt!25197 (minValue!1980 newMap!16) lt!25203))))

(declare-fun e!40282 () Bool)

(assert (=> d!12125 e!40282))

(declare-fun res!33785 () Bool)

(assert (=> d!12125 (=> (not res!33785) (not e!40282))))

(assert (=> d!12125 (= res!33785 (contains!682 lt!25208 lt!25203))))

(assert (=> d!12125 (= (addApplyDifferent!43 lt!25208 lt!25197 (minValue!1980 newMap!16) lt!25203) lt!25318)))

(declare-fun b!61320 () Bool)

(assert (=> b!61320 (= e!40282 (not (= lt!25203 lt!25197)))))

(assert (= (and d!12125 res!33785) b!61320))

(declare-fun m!54105 () Bool)

(assert (=> d!12125 m!54105))

(assert (=> d!12125 m!53757))

(declare-fun m!54107 () Bool)

(assert (=> d!12125 m!54107))

(assert (=> d!12125 m!53755))

(assert (=> d!12125 m!53781))

(assert (=> d!12125 m!53755))

(assert (=> b!61135 d!12125))

(declare-fun d!12127 () Bool)

(assert (=> d!12127 (= (apply!67 lt!25208 lt!25203) (get!1085 (getValueByKey!126 (toList!689 lt!25208) lt!25203)))))

(declare-fun bs!2656 () Bool)

(assert (= bs!2656 d!12127))

(declare-fun m!54109 () Bool)

(assert (=> bs!2656 m!54109))

(assert (=> bs!2656 m!54109))

(declare-fun m!54111 () Bool)

(assert (=> bs!2656 m!54111))

(assert (=> b!61135 d!12127))

(declare-fun d!12129 () Bool)

(declare-fun e!40283 () Bool)

(assert (=> d!12129 e!40283))

(declare-fun res!33787 () Bool)

(assert (=> d!12129 (=> (not res!33787) (not e!40283))))

(declare-fun lt!25320 () ListLongMap!1347)

(assert (=> d!12129 (= res!33787 (contains!682 lt!25320 (_1!1022 (tuple2!2023 lt!25195 (minValue!1980 newMap!16)))))))

(declare-fun lt!25322 () List!1426)

(assert (=> d!12129 (= lt!25320 (ListLongMap!1348 lt!25322))))

(declare-fun lt!25321 () Unit!1613)

(declare-fun lt!25319 () Unit!1613)

(assert (=> d!12129 (= lt!25321 lt!25319)))

(assert (=> d!12129 (= (getValueByKey!126 lt!25322 (_1!1022 (tuple2!2023 lt!25195 (minValue!1980 newMap!16)))) (Some!131 (_2!1022 (tuple2!2023 lt!25195 (minValue!1980 newMap!16)))))))

(assert (=> d!12129 (= lt!25319 (lemmaContainsTupThenGetReturnValue!43 lt!25322 (_1!1022 (tuple2!2023 lt!25195 (minValue!1980 newMap!16))) (_2!1022 (tuple2!2023 lt!25195 (minValue!1980 newMap!16)))))))

(assert (=> d!12129 (= lt!25322 (insertStrictlySorted!46 (toList!689 lt!25205) (_1!1022 (tuple2!2023 lt!25195 (minValue!1980 newMap!16))) (_2!1022 (tuple2!2023 lt!25195 (minValue!1980 newMap!16)))))))

(assert (=> d!12129 (= (+!81 lt!25205 (tuple2!2023 lt!25195 (minValue!1980 newMap!16))) lt!25320)))

(declare-fun b!61321 () Bool)

(declare-fun res!33786 () Bool)

(assert (=> b!61321 (=> (not res!33786) (not e!40283))))

(assert (=> b!61321 (= res!33786 (= (getValueByKey!126 (toList!689 lt!25320) (_1!1022 (tuple2!2023 lt!25195 (minValue!1980 newMap!16)))) (Some!131 (_2!1022 (tuple2!2023 lt!25195 (minValue!1980 newMap!16))))))))

(declare-fun b!61322 () Bool)

(assert (=> b!61322 (= e!40283 (contains!685 (toList!689 lt!25320) (tuple2!2023 lt!25195 (minValue!1980 newMap!16))))))

(assert (= (and d!12129 res!33787) b!61321))

(assert (= (and b!61321 res!33786) b!61322))

(declare-fun m!54113 () Bool)

(assert (=> d!12129 m!54113))

(declare-fun m!54115 () Bool)

(assert (=> d!12129 m!54115))

(declare-fun m!54117 () Bool)

(assert (=> d!12129 m!54117))

(declare-fun m!54119 () Bool)

(assert (=> d!12129 m!54119))

(declare-fun m!54121 () Bool)

(assert (=> b!61321 m!54121))

(declare-fun m!54123 () Bool)

(assert (=> b!61322 m!54123))

(assert (=> b!61135 d!12129))

(declare-fun d!12131 () Bool)

(assert (=> d!12131 (= (apply!67 (+!81 lt!25211 (tuple2!2023 lt!25198 (zeroValue!1980 newMap!16))) lt!25199) (get!1085 (getValueByKey!126 (toList!689 (+!81 lt!25211 (tuple2!2023 lt!25198 (zeroValue!1980 newMap!16)))) lt!25199)))))

(declare-fun bs!2657 () Bool)

(assert (= bs!2657 d!12131))

(declare-fun m!54125 () Bool)

(assert (=> bs!2657 m!54125))

(assert (=> bs!2657 m!54125))

(declare-fun m!54127 () Bool)

(assert (=> bs!2657 m!54127))

(assert (=> b!61135 d!12131))

(declare-fun d!12133 () Bool)

(assert (=> d!12133 (= (apply!67 (+!81 lt!25205 (tuple2!2023 lt!25195 (minValue!1980 newMap!16))) lt!25215) (apply!67 lt!25205 lt!25215))))

(declare-fun lt!25323 () Unit!1613)

(assert (=> d!12133 (= lt!25323 (choose!326 lt!25205 lt!25195 (minValue!1980 newMap!16) lt!25215))))

(declare-fun e!40284 () Bool)

(assert (=> d!12133 e!40284))

(declare-fun res!33788 () Bool)

(assert (=> d!12133 (=> (not res!33788) (not e!40284))))

(assert (=> d!12133 (= res!33788 (contains!682 lt!25205 lt!25215))))

(assert (=> d!12133 (= (addApplyDifferent!43 lt!25205 lt!25195 (minValue!1980 newMap!16) lt!25215) lt!25323)))

(declare-fun b!61323 () Bool)

(assert (=> b!61323 (= e!40284 (not (= lt!25215 lt!25195)))))

(assert (= (and d!12133 res!33788) b!61323))

(declare-fun m!54129 () Bool)

(assert (=> d!12133 m!54129))

(assert (=> d!12133 m!53753))

(declare-fun m!54131 () Bool)

(assert (=> d!12133 m!54131))

(assert (=> d!12133 m!53769))

(assert (=> d!12133 m!53773))

(assert (=> d!12133 m!53769))

(assert (=> b!61135 d!12133))

(declare-fun lt!25326 () Bool)

(declare-fun d!12135 () Bool)

(declare-fun content!67 (List!1426) (InoxSet tuple2!2022))

(assert (=> d!12135 (= lt!25326 (select (content!67 (toList!689 lt!25167)) (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))

(declare-fun e!40290 () Bool)

(assert (=> d!12135 (= lt!25326 e!40290)))

(declare-fun res!33793 () Bool)

(assert (=> d!12135 (=> (not res!33793) (not e!40290))))

(assert (=> d!12135 (= res!33793 ((_ is Cons!1422) (toList!689 lt!25167)))))

(assert (=> d!12135 (= (contains!685 (toList!689 lt!25167) (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) lt!25326)))

(declare-fun b!61328 () Bool)

(declare-fun e!40289 () Bool)

(assert (=> b!61328 (= e!40290 e!40289)))

(declare-fun res!33794 () Bool)

(assert (=> b!61328 (=> res!33794 e!40289)))

(assert (=> b!61328 (= res!33794 (= (h!2004 (toList!689 lt!25167)) (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))

(declare-fun b!61329 () Bool)

(assert (=> b!61329 (= e!40289 (contains!685 (t!4792 (toList!689 lt!25167)) (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))

(assert (= (and d!12135 res!33793) b!61328))

(assert (= (and b!61328 (not res!33794)) b!61329))

(declare-fun m!54133 () Bool)

(assert (=> d!12135 m!54133))

(declare-fun m!54135 () Bool)

(assert (=> d!12135 m!54135))

(declare-fun m!54137 () Bool)

(assert (=> b!61329 m!54137))

(assert (=> b!61045 d!12135))

(declare-fun d!12137 () Bool)

(assert (=> d!12137 (= (isDefined!78 (getValueByKey!126 (toList!689 lt!24917) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (not (isEmpty!303 (getValueByKey!126 (toList!689 lt!24917) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun bs!2658 () Bool)

(assert (= bs!2658 d!12137))

(assert (=> bs!2658 m!53487))

(declare-fun m!54139 () Bool)

(assert (=> bs!2658 m!54139))

(assert (=> b!60964 d!12137))

(assert (=> b!60964 d!12083))

(assert (=> d!12037 d!12023))

(assert (=> d!12037 d!12025))

(declare-fun d!12139 () Bool)

(assert (=> d!12139 (isDefined!78 (getValueByKey!126 (toList!689 lt!24706) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(assert (=> d!12139 true))

(declare-fun _$12!308 () Unit!1613)

(assert (=> d!12139 (= (choose!331 (toList!689 lt!24706) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) _$12!308)))

(declare-fun bs!2659 () Bool)

(assert (= bs!2659 d!12139))

(assert (=> bs!2659 m!52989))

(assert (=> bs!2659 m!53139))

(assert (=> bs!2659 m!53139))

(assert (=> bs!2659 m!53141))

(assert (=> d!12037 d!12139))

(declare-fun d!12141 () Bool)

(declare-fun res!33799 () Bool)

(declare-fun e!40295 () Bool)

(assert (=> d!12141 (=> res!33799 e!40295)))

(assert (=> d!12141 (= res!33799 (or ((_ is Nil!1423) (toList!689 lt!24706)) ((_ is Nil!1423) (t!4792 (toList!689 lt!24706)))))))

(assert (=> d!12141 (= (isStrictlySorted!272 (toList!689 lt!24706)) e!40295)))

(declare-fun b!61334 () Bool)

(declare-fun e!40296 () Bool)

(assert (=> b!61334 (= e!40295 e!40296)))

(declare-fun res!33800 () Bool)

(assert (=> b!61334 (=> (not res!33800) (not e!40296))))

(assert (=> b!61334 (= res!33800 (bvslt (_1!1022 (h!2004 (toList!689 lt!24706))) (_1!1022 (h!2004 (t!4792 (toList!689 lt!24706))))))))

(declare-fun b!61335 () Bool)

(assert (=> b!61335 (= e!40296 (isStrictlySorted!272 (t!4792 (toList!689 lt!24706))))))

(assert (= (and d!12141 (not res!33799)) b!61334))

(assert (= (and b!61334 res!33800) b!61335))

(declare-fun m!54141 () Bool)

(assert (=> b!61335 m!54141))

(assert (=> d!12037 d!12141))

(declare-fun b!61336 () Bool)

(declare-fun e!40302 () ListLongMap!1347)

(declare-fun call!4717 () ListLongMap!1347)

(assert (=> b!61336 (= e!40302 call!4717)))

(declare-fun b!61337 () Bool)

(declare-fun e!40299 () Bool)

(declare-fun lt!25332 () ListLongMap!1347)

(assert (=> b!61337 (= e!40299 (isEmpty!302 lt!25332))))

(declare-fun b!61338 () Bool)

(declare-fun e!40301 () Bool)

(declare-fun e!40298 () Bool)

(assert (=> b!61338 (= e!40301 e!40298)))

(declare-fun c!8047 () Bool)

(declare-fun e!40297 () Bool)

(assert (=> b!61338 (= c!8047 e!40297)))

(declare-fun res!33803 () Bool)

(assert (=> b!61338 (=> (not res!33803) (not e!40297))))

(assert (=> b!61338 (= res!33803 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992))))))))

(declare-fun b!61339 () Bool)

(declare-fun lt!25327 () Unit!1613)

(declare-fun lt!25330 () Unit!1613)

(assert (=> b!61339 (= lt!25327 lt!25330)))

(declare-fun lt!25331 () ListLongMap!1347)

(declare-fun lt!25333 () (_ BitVec 64))

(declare-fun lt!25329 () V!2857)

(declare-fun lt!25328 () (_ BitVec 64))

(assert (=> b!61339 (not (contains!682 (+!81 lt!25331 (tuple2!2023 lt!25328 lt!25329)) lt!25333))))

(assert (=> b!61339 (= lt!25330 (addStillNotContains!18 lt!25331 lt!25328 lt!25329 lt!25333))))

(assert (=> b!61339 (= lt!25333 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!61339 (= lt!25329 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!61339 (= lt!25328 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (=> b!61339 (= lt!25331 call!4717)))

(assert (=> b!61339 (= e!40302 (+!81 call!4717 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!61340 () Bool)

(assert (=> b!61340 (= e!40298 e!40299)))

(declare-fun c!8046 () Bool)

(assert (=> b!61340 (= c!8046 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992))))))))

(declare-fun bm!4714 () Bool)

(assert (=> bm!4714 (= call!4717 (getCurrentListMapNoExtraKeys!45 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (_values!2049 (v!2403 (underlying!230 thiss!992))) (mask!5962 (v!2403 (underlying!230 thiss!992))) (extraKeys!1949 (v!2403 (underlying!230 thiss!992))) (zeroValue!1980 (v!2403 (underlying!230 thiss!992))) (minValue!1980 (v!2403 (underlying!230 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2066 (v!2403 (underlying!230 thiss!992)))))))

(declare-fun b!61341 () Bool)

(declare-fun e!40303 () Bool)

(assert (=> b!61341 (= e!40298 e!40303)))

(assert (=> b!61341 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992))))))))

(declare-fun res!33802 () Bool)

(assert (=> b!61341 (= res!33802 (contains!682 lt!25332 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!61341 (=> (not res!33802) (not e!40303))))

(declare-fun b!61342 () Bool)

(declare-fun e!40300 () ListLongMap!1347)

(assert (=> b!61342 (= e!40300 e!40302)))

(declare-fun c!8048 () Bool)

(assert (=> b!61342 (= c!8048 (validKeyInArray!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(declare-fun b!61343 () Bool)

(assert (=> b!61343 (= e!40297 (validKeyInArray!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!61343 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))

(declare-fun b!61344 () Bool)

(declare-fun res!33804 () Bool)

(assert (=> b!61344 (=> (not res!33804) (not e!40301))))

(assert (=> b!61344 (= res!33804 (not (contains!682 lt!25332 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!61345 () Bool)

(assert (=> b!61345 (= e!40300 (ListLongMap!1348 Nil!1423))))

(declare-fun b!61347 () Bool)

(assert (=> b!61347 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992))))))))

(assert (=> b!61347 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2016 (_values!2049 (v!2403 (underlying!230 thiss!992))))))))

(assert (=> b!61347 (= e!40303 (= (apply!67 lt!25332 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!12143 () Bool)

(assert (=> d!12143 e!40301))

(declare-fun res!33801 () Bool)

(assert (=> d!12143 (=> (not res!33801) (not e!40301))))

(assert (=> d!12143 (= res!33801 (not (contains!682 lt!25332 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12143 (= lt!25332 e!40300)))

(declare-fun c!8045 () Bool)

(assert (=> d!12143 (= c!8045 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992))))))))

(assert (=> d!12143 (validMask!0 (mask!5962 (v!2403 (underlying!230 thiss!992))))))

(assert (=> d!12143 (= (getCurrentListMapNoExtraKeys!45 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (_values!2049 (v!2403 (underlying!230 thiss!992))) (mask!5962 (v!2403 (underlying!230 thiss!992))) (extraKeys!1949 (v!2403 (underlying!230 thiss!992))) (zeroValue!1980 (v!2403 (underlying!230 thiss!992))) (minValue!1980 (v!2403 (underlying!230 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2066 (v!2403 (underlying!230 thiss!992)))) lt!25332)))

(declare-fun b!61346 () Bool)

(assert (=> b!61346 (= e!40299 (= lt!25332 (getCurrentListMapNoExtraKeys!45 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (_values!2049 (v!2403 (underlying!230 thiss!992))) (mask!5962 (v!2403 (underlying!230 thiss!992))) (extraKeys!1949 (v!2403 (underlying!230 thiss!992))) (zeroValue!1980 (v!2403 (underlying!230 thiss!992))) (minValue!1980 (v!2403 (underlying!230 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))))))))

(assert (= (and d!12143 c!8045) b!61345))

(assert (= (and d!12143 (not c!8045)) b!61342))

(assert (= (and b!61342 c!8048) b!61339))

(assert (= (and b!61342 (not c!8048)) b!61336))

(assert (= (or b!61339 b!61336) bm!4714))

(assert (= (and d!12143 res!33801) b!61344))

(assert (= (and b!61344 res!33804) b!61338))

(assert (= (and b!61338 res!33803) b!61343))

(assert (= (and b!61338 c!8047) b!61341))

(assert (= (and b!61338 (not c!8047)) b!61340))

(assert (= (and b!61341 res!33802) b!61347))

(assert (= (and b!61340 c!8046) b!61346))

(assert (= (and b!61340 (not c!8046)) b!61337))

(declare-fun b_lambda!2715 () Bool)

(assert (=> (not b_lambda!2715) (not b!61339)))

(assert (=> b!61339 t!4789))

(declare-fun b_and!3733 () Bool)

(assert (= b_and!3729 (and (=> t!4789 result!2407) b_and!3733)))

(assert (=> b!61339 t!4791))

(declare-fun b_and!3735 () Bool)

(assert (= b_and!3731 (and (=> t!4791 result!2411) b_and!3735)))

(declare-fun b_lambda!2717 () Bool)

(assert (=> (not b_lambda!2717) (not b!61347)))

(assert (=> b!61347 t!4789))

(declare-fun b_and!3737 () Bool)

(assert (= b_and!3733 (and (=> t!4789 result!2407) b_and!3737)))

(assert (=> b!61347 t!4791))

(declare-fun b_and!3739 () Bool)

(assert (= b_and!3735 (and (=> t!4791 result!2411) b_and!3739)))

(assert (=> b!61342 m!53729))

(assert (=> b!61342 m!53729))

(declare-fun m!54143 () Bool)

(assert (=> b!61342 m!54143))

(assert (=> b!61341 m!53729))

(assert (=> b!61341 m!53729))

(declare-fun m!54145 () Bool)

(assert (=> b!61341 m!54145))

(declare-fun m!54147 () Bool)

(assert (=> b!61347 m!54147))

(assert (=> b!61347 m!53011))

(declare-fun m!54149 () Bool)

(assert (=> b!61347 m!54149))

(assert (=> b!61347 m!54147))

(assert (=> b!61347 m!53729))

(assert (=> b!61347 m!53011))

(assert (=> b!61347 m!53729))

(declare-fun m!54151 () Bool)

(assert (=> b!61347 m!54151))

(declare-fun m!54153 () Bool)

(assert (=> bm!4714 m!54153))

(assert (=> b!61346 m!54153))

(declare-fun m!54155 () Bool)

(assert (=> b!61344 m!54155))

(assert (=> b!61339 m!54147))

(assert (=> b!61339 m!53011))

(assert (=> b!61339 m!54149))

(assert (=> b!61339 m!54147))

(assert (=> b!61339 m!53729))

(assert (=> b!61339 m!53011))

(declare-fun m!54157 () Bool)

(assert (=> b!61339 m!54157))

(declare-fun m!54159 () Bool)

(assert (=> b!61339 m!54159))

(declare-fun m!54161 () Bool)

(assert (=> b!61339 m!54161))

(declare-fun m!54163 () Bool)

(assert (=> b!61339 m!54163))

(assert (=> b!61339 m!54157))

(assert (=> b!61343 m!53729))

(assert (=> b!61343 m!53729))

(assert (=> b!61343 m!54143))

(declare-fun m!54165 () Bool)

(assert (=> d!12143 m!54165))

(assert (=> d!12143 m!53021))

(declare-fun m!54167 () Bool)

(assert (=> b!61337 m!54167))

(assert (=> b!61040 d!12143))

(declare-fun d!12145 () Bool)

(assert (=> d!12145 (isDefined!78 (getValueByKey!126 (toList!689 call!4609) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(declare-fun lt!25334 () Unit!1613)

(assert (=> d!12145 (= lt!25334 (choose!331 (toList!689 call!4609) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(declare-fun e!40304 () Bool)

(assert (=> d!12145 e!40304))

(declare-fun res!33805 () Bool)

(assert (=> d!12145 (=> (not res!33805) (not e!40304))))

(assert (=> d!12145 (= res!33805 (isStrictlySorted!272 (toList!689 call!4609)))))

(assert (=> d!12145 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 call!4609) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) lt!25334)))

(declare-fun b!61348 () Bool)

(assert (=> b!61348 (= e!40304 (containsKey!129 (toList!689 call!4609) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(assert (= (and d!12145 res!33805) b!61348))

(assert (=> d!12145 m!52989))

(assert (=> d!12145 m!53449))

(assert (=> d!12145 m!53449))

(assert (=> d!12145 m!53451))

(assert (=> d!12145 m!52989))

(declare-fun m!54169 () Bool)

(assert (=> d!12145 m!54169))

(declare-fun m!54171 () Bool)

(assert (=> d!12145 m!54171))

(assert (=> b!61348 m!52989))

(assert (=> b!61348 m!53445))

(assert (=> b!60927 d!12145))

(declare-fun d!12147 () Bool)

(assert (=> d!12147 (= (isDefined!78 (getValueByKey!126 (toList!689 call!4609) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355))) (not (isEmpty!303 (getValueByKey!126 (toList!689 call!4609) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))))

(declare-fun bs!2660 () Bool)

(assert (= bs!2660 d!12147))

(assert (=> bs!2660 m!53449))

(declare-fun m!54173 () Bool)

(assert (=> bs!2660 m!54173))

(assert (=> b!60927 d!12147))

(declare-fun b!61352 () Bool)

(declare-fun e!40306 () Option!132)

(assert (=> b!61352 (= e!40306 None!130)))

(declare-fun b!61350 () Bool)

(declare-fun e!40305 () Option!132)

(assert (=> b!61350 (= e!40305 e!40306)))

(declare-fun c!8050 () Bool)

(assert (=> b!61350 (= c!8050 (and ((_ is Cons!1422) (toList!689 call!4609)) (not (= (_1!1022 (h!2004 (toList!689 call!4609))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))))

(declare-fun b!61349 () Bool)

(assert (=> b!61349 (= e!40305 (Some!131 (_2!1022 (h!2004 (toList!689 call!4609)))))))

(declare-fun b!61351 () Bool)

(assert (=> b!61351 (= e!40306 (getValueByKey!126 (t!4792 (toList!689 call!4609)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(declare-fun d!12149 () Bool)

(declare-fun c!8049 () Bool)

(assert (=> d!12149 (= c!8049 (and ((_ is Cons!1422) (toList!689 call!4609)) (= (_1!1022 (h!2004 (toList!689 call!4609))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355))))))

(assert (=> d!12149 (= (getValueByKey!126 (toList!689 call!4609) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) e!40305)))

(assert (= (and d!12149 c!8049) b!61349))

(assert (= (and d!12149 (not c!8049)) b!61350))

(assert (= (and b!61350 c!8050) b!61351))

(assert (= (and b!61350 (not c!8050)) b!61352))

(assert (=> b!61351 m!52989))

(declare-fun m!54175 () Bool)

(assert (=> b!61351 m!54175))

(assert (=> b!60927 d!12149))

(declare-fun d!12151 () Bool)

(declare-fun res!33806 () Bool)

(declare-fun e!40307 () Bool)

(assert (=> d!12151 (=> res!33806 e!40307)))

(assert (=> d!12151 (= res!33806 (and ((_ is Cons!1422) (t!4792 (toList!689 lt!24706))) (= (_1!1022 (h!2004 (t!4792 (toList!689 lt!24706)))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355))))))

(assert (=> d!12151 (= (containsKey!129 (t!4792 (toList!689 lt!24706)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) e!40307)))

(declare-fun b!61353 () Bool)

(declare-fun e!40308 () Bool)

(assert (=> b!61353 (= e!40307 e!40308)))

(declare-fun res!33807 () Bool)

(assert (=> b!61353 (=> (not res!33807) (not e!40308))))

(assert (=> b!61353 (= res!33807 (and (or (not ((_ is Cons!1422) (t!4792 (toList!689 lt!24706)))) (bvsle (_1!1022 (h!2004 (t!4792 (toList!689 lt!24706)))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355))) ((_ is Cons!1422) (t!4792 (toList!689 lt!24706))) (bvslt (_1!1022 (h!2004 (t!4792 (toList!689 lt!24706)))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355))))))

(declare-fun b!61354 () Bool)

(assert (=> b!61354 (= e!40308 (containsKey!129 (t!4792 (t!4792 (toList!689 lt!24706))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(assert (= (and d!12151 (not res!33806)) b!61353))

(assert (= (and b!61353 res!33807) b!61354))

(assert (=> b!61354 m!52989))

(declare-fun m!54177 () Bool)

(assert (=> b!61354 m!54177))

(assert (=> b!60894 d!12151))

(declare-fun d!12153 () Bool)

(declare-fun res!33808 () Bool)

(declare-fun e!40309 () Bool)

(assert (=> d!12153 (=> res!33808 e!40309)))

(assert (=> d!12153 (= res!33808 (= (select (arr!1784 (_keys!3694 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(assert (=> d!12153 (= (arrayContainsKey!0 (_keys!3694 newMap!16) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) e!40309)))

(declare-fun b!61355 () Bool)

(declare-fun e!40310 () Bool)

(assert (=> b!61355 (= e!40309 e!40310)))

(declare-fun res!33809 () Bool)

(assert (=> b!61355 (=> (not res!33809) (not e!40310))))

(assert (=> b!61355 (= res!33809 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2015 (_keys!3694 newMap!16))))))

(declare-fun b!61356 () Bool)

(assert (=> b!61356 (= e!40310 (arrayContainsKey!0 (_keys!3694 newMap!16) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!12153 (not res!33808)) b!61355))

(assert (= (and b!61355 res!33809) b!61356))

(declare-fun m!54179 () Bool)

(assert (=> d!12153 m!54179))

(assert (=> b!61356 m!52989))

(declare-fun m!54181 () Bool)

(assert (=> b!61356 m!54181))

(assert (=> b!61171 d!12153))

(declare-fun d!12155 () Bool)

(assert (=> d!12155 (= (get!1085 (getValueByKey!126 (toList!689 (+!81 lt!24912 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!24922)) (v!2409 (getValueByKey!126 (toList!689 (+!81 lt!24912 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!24922)))))

(assert (=> d!11981 d!12155))

(declare-fun b!61360 () Bool)

(declare-fun e!40312 () Option!132)

(assert (=> b!61360 (= e!40312 None!130)))

(declare-fun b!61358 () Bool)

(declare-fun e!40311 () Option!132)

(assert (=> b!61358 (= e!40311 e!40312)))

(declare-fun c!8052 () Bool)

(assert (=> b!61358 (= c!8052 (and ((_ is Cons!1422) (toList!689 (+!81 lt!24912 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))) (not (= (_1!1022 (h!2004 (toList!689 (+!81 lt!24912 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))) lt!24922))))))

(declare-fun b!61357 () Bool)

(assert (=> b!61357 (= e!40311 (Some!131 (_2!1022 (h!2004 (toList!689 (+!81 lt!24912 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))))

(declare-fun b!61359 () Bool)

(assert (=> b!61359 (= e!40312 (getValueByKey!126 (t!4792 (toList!689 (+!81 lt!24912 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))) lt!24922))))

(declare-fun c!8051 () Bool)

(declare-fun d!12157 () Bool)

(assert (=> d!12157 (= c!8051 (and ((_ is Cons!1422) (toList!689 (+!81 lt!24912 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))) (= (_1!1022 (h!2004 (toList!689 (+!81 lt!24912 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))) lt!24922)))))

(assert (=> d!12157 (= (getValueByKey!126 (toList!689 (+!81 lt!24912 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!24922) e!40311)))

(assert (= (and d!12157 c!8051) b!61357))

(assert (= (and d!12157 (not c!8051)) b!61358))

(assert (= (and b!61358 c!8052) b!61359))

(assert (= (and b!61358 (not c!8052)) b!61360))

(declare-fun m!54183 () Bool)

(assert (=> b!61359 m!54183))

(assert (=> d!11981 d!12157))

(declare-fun d!12159 () Bool)

(assert (=> d!12159 (= (content!66 Nil!1424) ((as const (Array (_ BitVec 64) Bool)) false))))

(assert (=> d!12013 d!12159))

(assert (=> b!60980 d!12103))

(declare-fun d!12161 () Bool)

(declare-fun e!40314 () Bool)

(assert (=> d!12161 e!40314))

(declare-fun res!33810 () Bool)

(assert (=> d!12161 (=> res!33810 e!40314)))

(declare-fun lt!25337 () Bool)

(assert (=> d!12161 (= res!33810 (not lt!25337))))

(declare-fun lt!25338 () Bool)

(assert (=> d!12161 (= lt!25337 lt!25338)))

(declare-fun lt!25335 () Unit!1613)

(declare-fun e!40313 () Unit!1613)

(assert (=> d!12161 (= lt!25335 e!40313)))

(declare-fun c!8053 () Bool)

(assert (=> d!12161 (= c!8053 lt!25338)))

(assert (=> d!12161 (= lt!25338 (containsKey!129 (toList!689 lt!25036) (_1!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!12161 (= (contains!682 lt!25036 (_1!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!25337)))

(declare-fun b!61361 () Bool)

(declare-fun lt!25336 () Unit!1613)

(assert (=> b!61361 (= e!40313 lt!25336)))

(assert (=> b!61361 (= lt!25336 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 lt!25036) (_1!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!61361 (isDefined!78 (getValueByKey!126 (toList!689 lt!25036) (_1!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!61362 () Bool)

(declare-fun Unit!1645 () Unit!1613)

(assert (=> b!61362 (= e!40313 Unit!1645)))

(declare-fun b!61363 () Bool)

(assert (=> b!61363 (= e!40314 (isDefined!78 (getValueByKey!126 (toList!689 lt!25036) (_1!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!12161 c!8053) b!61361))

(assert (= (and d!12161 (not c!8053)) b!61362))

(assert (= (and d!12161 (not res!33810)) b!61363))

(declare-fun m!54185 () Bool)

(assert (=> d!12161 m!54185))

(declare-fun m!54187 () Bool)

(assert (=> b!61361 m!54187))

(assert (=> b!61361 m!53369))

(assert (=> b!61361 m!53369))

(declare-fun m!54189 () Bool)

(assert (=> b!61361 m!54189))

(assert (=> b!61363 m!53369))

(assert (=> b!61363 m!53369))

(assert (=> b!61363 m!54189))

(assert (=> d!11923 d!12161))

(declare-fun b!61367 () Bool)

(declare-fun e!40316 () Option!132)

(assert (=> b!61367 (= e!40316 None!130)))

(declare-fun b!61365 () Bool)

(declare-fun e!40315 () Option!132)

(assert (=> b!61365 (= e!40315 e!40316)))

(declare-fun c!8055 () Bool)

(assert (=> b!61365 (= c!8055 (and ((_ is Cons!1422) lt!25038) (not (= (_1!1022 (h!2004 lt!25038)) (_1!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun b!61364 () Bool)

(assert (=> b!61364 (= e!40315 (Some!131 (_2!1022 (h!2004 lt!25038))))))

(declare-fun b!61366 () Bool)

(assert (=> b!61366 (= e!40316 (getValueByKey!126 (t!4792 lt!25038) (_1!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun d!12163 () Bool)

(declare-fun c!8054 () Bool)

(assert (=> d!12163 (= c!8054 (and ((_ is Cons!1422) lt!25038) (= (_1!1022 (h!2004 lt!25038)) (_1!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!12163 (= (getValueByKey!126 lt!25038 (_1!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!40315)))

(assert (= (and d!12163 c!8054) b!61364))

(assert (= (and d!12163 (not c!8054)) b!61365))

(assert (= (and b!61365 c!8055) b!61366))

(assert (= (and b!61365 (not c!8055)) b!61367))

(declare-fun m!54191 () Bool)

(assert (=> b!61366 m!54191))

(assert (=> d!11923 d!12163))

(declare-fun d!12165 () Bool)

(assert (=> d!12165 (= (getValueByKey!126 lt!25038 (_1!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!131 (_2!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!25339 () Unit!1613)

(assert (=> d!12165 (= lt!25339 (choose!332 lt!25038 (_1!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!40317 () Bool)

(assert (=> d!12165 e!40317))

(declare-fun res!33811 () Bool)

(assert (=> d!12165 (=> (not res!33811) (not e!40317))))

(assert (=> d!12165 (= res!33811 (isStrictlySorted!272 lt!25038))))

(assert (=> d!12165 (= (lemmaContainsTupThenGetReturnValue!43 lt!25038 (_1!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!25339)))

(declare-fun b!61368 () Bool)

(declare-fun res!33812 () Bool)

(assert (=> b!61368 (=> (not res!33812) (not e!40317))))

(assert (=> b!61368 (= res!33812 (containsKey!129 lt!25038 (_1!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!61369 () Bool)

(assert (=> b!61369 (= e!40317 (contains!685 lt!25038 (tuple2!2023 (_1!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!12165 res!33811) b!61368))

(assert (= (and b!61368 res!33812) b!61369))

(assert (=> d!12165 m!53363))

(declare-fun m!54193 () Bool)

(assert (=> d!12165 m!54193))

(declare-fun m!54195 () Bool)

(assert (=> d!12165 m!54195))

(declare-fun m!54197 () Bool)

(assert (=> b!61368 m!54197))

(declare-fun m!54199 () Bool)

(assert (=> b!61369 m!54199))

(assert (=> d!11923 d!12165))

(declare-fun bm!4715 () Bool)

(declare-fun call!4720 () List!1426)

(declare-fun call!4718 () List!1426)

(assert (=> bm!4715 (= call!4720 call!4718)))

(declare-fun b!61370 () Bool)

(declare-fun e!40320 () List!1426)

(declare-fun call!4719 () List!1426)

(assert (=> b!61370 (= e!40320 call!4719)))

(declare-fun c!8056 () Bool)

(declare-fun e!40318 () List!1426)

(declare-fun bm!4716 () Bool)

(assert (=> bm!4716 (= call!4718 ($colon$colon!60 e!40318 (ite c!8056 (h!2004 (toList!689 (ite c!7887 (ite c!7877 call!4622 call!4624) call!4609))) (tuple2!2023 (_1!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun c!8058 () Bool)

(assert (=> bm!4716 (= c!8058 c!8056)))

(declare-fun b!61371 () Bool)

(assert (=> b!61371 (= e!40318 (insertStrictlySorted!46 (t!4792 (toList!689 (ite c!7887 (ite c!7877 call!4622 call!4624) call!4609))) (_1!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!40319 () Bool)

(declare-fun lt!25340 () List!1426)

(declare-fun b!61372 () Bool)

(assert (=> b!61372 (= e!40319 (contains!685 lt!25340 (tuple2!2023 (_1!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun bm!4717 () Bool)

(assert (=> bm!4717 (= call!4719 call!4720)))

(declare-fun b!61373 () Bool)

(declare-fun res!33814 () Bool)

(assert (=> b!61373 (=> (not res!33814) (not e!40319))))

(assert (=> b!61373 (= res!33814 (containsKey!129 lt!25340 (_1!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!61374 () Bool)

(declare-fun e!40321 () List!1426)

(declare-fun e!40322 () List!1426)

(assert (=> b!61374 (= e!40321 e!40322)))

(declare-fun c!8057 () Bool)

(assert (=> b!61374 (= c!8057 (and ((_ is Cons!1422) (toList!689 (ite c!7887 (ite c!7877 call!4622 call!4624) call!4609))) (= (_1!1022 (h!2004 (toList!689 (ite c!7887 (ite c!7877 call!4622 call!4624) call!4609)))) (_1!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun c!8059 () Bool)

(declare-fun b!61375 () Bool)

(assert (=> b!61375 (= c!8059 (and ((_ is Cons!1422) (toList!689 (ite c!7887 (ite c!7877 call!4622 call!4624) call!4609))) (bvsgt (_1!1022 (h!2004 (toList!689 (ite c!7887 (ite c!7877 call!4622 call!4624) call!4609)))) (_1!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> b!61375 (= e!40322 e!40320)))

(declare-fun d!12167 () Bool)

(assert (=> d!12167 e!40319))

(declare-fun res!33813 () Bool)

(assert (=> d!12167 (=> (not res!33813) (not e!40319))))

(assert (=> d!12167 (= res!33813 (isStrictlySorted!272 lt!25340))))

(assert (=> d!12167 (= lt!25340 e!40321)))

(assert (=> d!12167 (= c!8056 (and ((_ is Cons!1422) (toList!689 (ite c!7887 (ite c!7877 call!4622 call!4624) call!4609))) (bvslt (_1!1022 (h!2004 (toList!689 (ite c!7887 (ite c!7877 call!4622 call!4624) call!4609)))) (_1!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!12167 (isStrictlySorted!272 (toList!689 (ite c!7887 (ite c!7877 call!4622 call!4624) call!4609)))))

(assert (=> d!12167 (= (insertStrictlySorted!46 (toList!689 (ite c!7887 (ite c!7877 call!4622 call!4624) call!4609)) (_1!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1022 (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!25340)))

(declare-fun b!61376 () Bool)

(assert (=> b!61376 (= e!40318 (ite c!8057 (t!4792 (toList!689 (ite c!7887 (ite c!7877 call!4622 call!4624) call!4609))) (ite c!8059 (Cons!1422 (h!2004 (toList!689 (ite c!7887 (ite c!7877 call!4622 call!4624) call!4609))) (t!4792 (toList!689 (ite c!7887 (ite c!7877 call!4622 call!4624) call!4609)))) Nil!1423)))))

(declare-fun b!61377 () Bool)

(assert (=> b!61377 (= e!40321 call!4718)))

(declare-fun b!61378 () Bool)

(assert (=> b!61378 (= e!40322 call!4720)))

(declare-fun b!61379 () Bool)

(assert (=> b!61379 (= e!40320 call!4719)))

(assert (= (and d!12167 c!8056) b!61377))

(assert (= (and d!12167 (not c!8056)) b!61374))

(assert (= (and b!61374 c!8057) b!61378))

(assert (= (and b!61374 (not c!8057)) b!61375))

(assert (= (and b!61375 c!8059) b!61379))

(assert (= (and b!61375 (not c!8059)) b!61370))

(assert (= (or b!61379 b!61370) bm!4717))

(assert (= (or b!61378 bm!4717) bm!4715))

(assert (= (or b!61377 bm!4715) bm!4716))

(assert (= (and bm!4716 c!8058) b!61371))

(assert (= (and bm!4716 (not c!8058)) b!61376))

(assert (= (and d!12167 res!33813) b!61373))

(assert (= (and b!61373 res!33814) b!61372))

(declare-fun m!54201 () Bool)

(assert (=> b!61372 m!54201))

(declare-fun m!54203 () Bool)

(assert (=> bm!4716 m!54203))

(declare-fun m!54205 () Bool)

(assert (=> b!61371 m!54205))

(declare-fun m!54207 () Bool)

(assert (=> d!12167 m!54207))

(declare-fun m!54209 () Bool)

(assert (=> d!12167 m!54209))

(declare-fun m!54211 () Bool)

(assert (=> b!61373 m!54211))

(assert (=> d!11923 d!12167))

(declare-fun b!61380 () Bool)

(declare-fun e!40325 () Bool)

(declare-fun e!40326 () Bool)

(assert (=> b!61380 (= e!40325 e!40326)))

(declare-fun c!8060 () Bool)

(assert (=> b!61380 (= c!8060 (validKeyInArray!0 (select (arr!1784 (_keys!3694 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!61381 () Bool)

(declare-fun call!4721 () Bool)

(assert (=> b!61381 (= e!40326 call!4721)))

(declare-fun bm!4718 () Bool)

(assert (=> bm!4718 (= call!4721 (arrayNoDuplicates!0 (_keys!3694 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!8060 (Cons!1423 (select (arr!1784 (_keys!3694 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (ite c!7911 (Cons!1423 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000) Nil!1424) Nil!1424)) (ite c!7911 (Cons!1423 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000) Nil!1424) Nil!1424))))))

(declare-fun b!61382 () Bool)

(declare-fun e!40324 () Bool)

(assert (=> b!61382 (= e!40324 e!40325)))

(declare-fun res!33815 () Bool)

(assert (=> b!61382 (=> (not res!33815) (not e!40325))))

(declare-fun e!40323 () Bool)

(assert (=> b!61382 (= res!33815 (not e!40323))))

(declare-fun res!33817 () Bool)

(assert (=> b!61382 (=> (not res!33817) (not e!40323))))

(assert (=> b!61382 (= res!33817 (validKeyInArray!0 (select (arr!1784 (_keys!3694 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun d!12169 () Bool)

(declare-fun res!33816 () Bool)

(assert (=> d!12169 (=> res!33816 e!40324)))

(assert (=> d!12169 (= res!33816 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2015 (_keys!3694 newMap!16))))))

(assert (=> d!12169 (= (arrayNoDuplicates!0 (_keys!3694 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!7911 (Cons!1423 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000) Nil!1424) Nil!1424)) e!40324)))

(declare-fun b!61383 () Bool)

(assert (=> b!61383 (= e!40326 call!4721)))

(declare-fun b!61384 () Bool)

(assert (=> b!61384 (= e!40323 (contains!684 (ite c!7911 (Cons!1423 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000) Nil!1424) Nil!1424) (select (arr!1784 (_keys!3694 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (= (and d!12169 (not res!33816)) b!61382))

(assert (= (and b!61382 res!33817) b!61384))

(assert (= (and b!61382 res!33815) b!61380))

(assert (= (and b!61380 c!8060) b!61381))

(assert (= (and b!61380 (not c!8060)) b!61383))

(assert (= (or b!61381 b!61383) bm!4718))

(assert (=> b!61380 m!54179))

(assert (=> b!61380 m!54179))

(declare-fun m!54213 () Bool)

(assert (=> b!61380 m!54213))

(assert (=> bm!4718 m!54179))

(declare-fun m!54215 () Bool)

(assert (=> bm!4718 m!54215))

(assert (=> b!61382 m!54179))

(assert (=> b!61382 m!54179))

(assert (=> b!61382 m!54213))

(assert (=> b!61384 m!54179))

(assert (=> b!61384 m!54179))

(declare-fun m!54217 () Bool)

(assert (=> b!61384 m!54217))

(assert (=> bm!4644 d!12169))

(assert (=> d!12007 d!12047))

(declare-fun d!12171 () Bool)

(assert (=> d!12171 (= (isDefined!78 (getValueByKey!126 (toList!689 lt!24917) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!303 (getValueByKey!126 (toList!689 lt!24917) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!2661 () Bool)

(assert (= bs!2661 d!12171))

(assert (=> bs!2661 m!53377))

(declare-fun m!54219 () Bool)

(assert (=> bs!2661 m!54219))

(assert (=> b!60899 d!12171))

(declare-fun b!61388 () Bool)

(declare-fun e!40328 () Option!132)

(assert (=> b!61388 (= e!40328 None!130)))

(declare-fun b!61386 () Bool)

(declare-fun e!40327 () Option!132)

(assert (=> b!61386 (= e!40327 e!40328)))

(declare-fun c!8062 () Bool)

(assert (=> b!61386 (= c!8062 (and ((_ is Cons!1422) (toList!689 lt!24917)) (not (= (_1!1022 (h!2004 (toList!689 lt!24917))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!61385 () Bool)

(assert (=> b!61385 (= e!40327 (Some!131 (_2!1022 (h!2004 (toList!689 lt!24917)))))))

(declare-fun b!61387 () Bool)

(assert (=> b!61387 (= e!40328 (getValueByKey!126 (t!4792 (toList!689 lt!24917)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun d!12173 () Bool)

(declare-fun c!8061 () Bool)

(assert (=> d!12173 (= c!8061 (and ((_ is Cons!1422) (toList!689 lt!24917)) (= (_1!1022 (h!2004 (toList!689 lt!24917))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12173 (= (getValueByKey!126 (toList!689 lt!24917) #b0000000000000000000000000000000000000000000000000000000000000000) e!40327)))

(assert (= (and d!12173 c!8061) b!61385))

(assert (= (and d!12173 (not c!8061)) b!61386))

(assert (= (and b!61386 c!8062) b!61387))

(assert (= (and b!61386 (not c!8062)) b!61388))

(declare-fun m!54221 () Bool)

(assert (=> b!61387 m!54221))

(assert (=> b!60899 d!12173))

(assert (=> b!61152 d!12103))

(declare-fun d!12175 () Bool)

(assert (=> d!12175 (= (get!1085 (getValueByKey!126 (toList!689 (+!81 lt!24915 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!24910)) (v!2409 (getValueByKey!126 (toList!689 (+!81 lt!24915 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!24910)))))

(assert (=> d!11971 d!12175))

(declare-fun b!61392 () Bool)

(declare-fun e!40330 () Option!132)

(assert (=> b!61392 (= e!40330 None!130)))

(declare-fun b!61390 () Bool)

(declare-fun e!40329 () Option!132)

(assert (=> b!61390 (= e!40329 e!40330)))

(declare-fun c!8064 () Bool)

(assert (=> b!61390 (= c!8064 (and ((_ is Cons!1422) (toList!689 (+!81 lt!24915 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))) (not (= (_1!1022 (h!2004 (toList!689 (+!81 lt!24915 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))) lt!24910))))))

(declare-fun b!61389 () Bool)

(assert (=> b!61389 (= e!40329 (Some!131 (_2!1022 (h!2004 (toList!689 (+!81 lt!24915 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))))

(declare-fun b!61391 () Bool)

(assert (=> b!61391 (= e!40330 (getValueByKey!126 (t!4792 (toList!689 (+!81 lt!24915 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))) lt!24910))))

(declare-fun c!8063 () Bool)

(declare-fun d!12177 () Bool)

(assert (=> d!12177 (= c!8063 (and ((_ is Cons!1422) (toList!689 (+!81 lt!24915 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))) (= (_1!1022 (h!2004 (toList!689 (+!81 lt!24915 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))) lt!24910)))))

(assert (=> d!12177 (= (getValueByKey!126 (toList!689 (+!81 lt!24915 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!24910) e!40329)))

(assert (= (and d!12177 c!8063) b!61389))

(assert (= (and d!12177 (not c!8063)) b!61390))

(assert (= (and b!61390 c!8064) b!61391))

(assert (= (and b!61390 (not c!8064)) b!61392))

(declare-fun m!54223 () Bool)

(assert (=> b!61391 m!54223))

(assert (=> d!11971 d!12177))

(assert (=> d!11913 d!11941))

(declare-fun d!12179 () Bool)

(declare-fun e!40333 () Bool)

(assert (=> d!12179 e!40333))

(declare-fun res!33823 () Bool)

(assert (=> d!12179 (=> (not res!33823) (not e!40333))))

(declare-fun lt!25343 () SeekEntryResult!222)

(assert (=> d!12179 (= res!33823 ((_ is Found!222) lt!25343))))

(assert (=> d!12179 (= lt!25343 (seekEntryOrOpen!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (_keys!3694 newMap!16) (mask!5962 newMap!16)))))

(assert (=> d!12179 true))

(declare-fun _$33!45 () Unit!1613)

(assert (=> d!12179 (= (choose!323 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (defaultEntry!2066 newMap!16)) _$33!45)))

(declare-fun b!61397 () Bool)

(declare-fun res!33822 () Bool)

(assert (=> b!61397 (=> (not res!33822) (not e!40333))))

(assert (=> b!61397 (= res!33822 (inRange!0 (index!3013 lt!25343) (mask!5962 newMap!16)))))

(declare-fun b!61398 () Bool)

(assert (=> b!61398 (= e!40333 (= (select (arr!1784 (_keys!3694 newMap!16)) (index!3013 lt!25343)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(assert (= (and d!12179 res!33823) b!61397))

(assert (= (and b!61397 res!33822) b!61398))

(assert (=> d!12179 m!52989))

(assert (=> d!12179 m!53147))

(declare-fun m!54225 () Bool)

(assert (=> b!61397 m!54225))

(declare-fun m!54227 () Bool)

(assert (=> b!61398 m!54227))

(assert (=> d!11913 d!12179))

(assert (=> d!11913 d!12047))

(declare-fun d!12181 () Bool)

(assert (=> d!12181 (isDefined!78 (getValueByKey!126 (toList!689 e!39931) (ite c!7884 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (select (arr!1784 (_keys!3694 newMap!16)) (index!3013 lt!24842)))))))

(declare-fun lt!25344 () Unit!1613)

(assert (=> d!12181 (= lt!25344 (choose!331 (toList!689 e!39931) (ite c!7884 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (select (arr!1784 (_keys!3694 newMap!16)) (index!3013 lt!24842)))))))

(declare-fun e!40334 () Bool)

(assert (=> d!12181 e!40334))

(declare-fun res!33824 () Bool)

(assert (=> d!12181 (=> (not res!33824) (not e!40334))))

(assert (=> d!12181 (= res!33824 (isStrictlySorted!272 (toList!689 e!39931)))))

(assert (=> d!12181 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 e!39931) (ite c!7884 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (select (arr!1784 (_keys!3694 newMap!16)) (index!3013 lt!24842)))) lt!25344)))

(declare-fun b!61399 () Bool)

(assert (=> b!61399 (= e!40334 (containsKey!129 (toList!689 e!39931) (ite c!7884 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (select (arr!1784 (_keys!3694 newMap!16)) (index!3013 lt!24842)))))))

(assert (= (and d!12181 res!33824) b!61399))

(assert (=> d!12181 m!53547))

(assert (=> d!12181 m!53547))

(assert (=> d!12181 m!53549))

(declare-fun m!54229 () Bool)

(assert (=> d!12181 m!54229))

(declare-fun m!54231 () Bool)

(assert (=> d!12181 m!54231))

(assert (=> b!61399 m!53543))

(assert (=> b!60986 d!12181))

(declare-fun d!12183 () Bool)

(assert (=> d!12183 (= (isDefined!78 (getValueByKey!126 (toList!689 e!39931) (ite c!7884 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (select (arr!1784 (_keys!3694 newMap!16)) (index!3013 lt!24842))))) (not (isEmpty!303 (getValueByKey!126 (toList!689 e!39931) (ite c!7884 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (select (arr!1784 (_keys!3694 newMap!16)) (index!3013 lt!24842)))))))))

(declare-fun bs!2662 () Bool)

(assert (= bs!2662 d!12183))

(assert (=> bs!2662 m!53547))

(declare-fun m!54233 () Bool)

(assert (=> bs!2662 m!54233))

(assert (=> b!60986 d!12183))

(declare-fun b!61403 () Bool)

(declare-fun e!40336 () Option!132)

(assert (=> b!61403 (= e!40336 None!130)))

(declare-fun b!61401 () Bool)

(declare-fun e!40335 () Option!132)

(assert (=> b!61401 (= e!40335 e!40336)))

(declare-fun c!8066 () Bool)

(assert (=> b!61401 (= c!8066 (and ((_ is Cons!1422) (toList!689 e!39931)) (not (= (_1!1022 (h!2004 (toList!689 e!39931))) (ite c!7884 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (select (arr!1784 (_keys!3694 newMap!16)) (index!3013 lt!24842)))))))))

(declare-fun b!61400 () Bool)

(assert (=> b!61400 (= e!40335 (Some!131 (_2!1022 (h!2004 (toList!689 e!39931)))))))

(declare-fun b!61402 () Bool)

(assert (=> b!61402 (= e!40336 (getValueByKey!126 (t!4792 (toList!689 e!39931)) (ite c!7884 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (select (arr!1784 (_keys!3694 newMap!16)) (index!3013 lt!24842)))))))

(declare-fun d!12185 () Bool)

(declare-fun c!8065 () Bool)

(assert (=> d!12185 (= c!8065 (and ((_ is Cons!1422) (toList!689 e!39931)) (= (_1!1022 (h!2004 (toList!689 e!39931))) (ite c!7884 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (select (arr!1784 (_keys!3694 newMap!16)) (index!3013 lt!24842))))))))

(assert (=> d!12185 (= (getValueByKey!126 (toList!689 e!39931) (ite c!7884 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (select (arr!1784 (_keys!3694 newMap!16)) (index!3013 lt!24842)))) e!40335)))

(assert (= (and d!12185 c!8065) b!61400))

(assert (= (and d!12185 (not c!8065)) b!61401))

(assert (= (and b!61401 c!8066) b!61402))

(assert (= (and b!61401 (not c!8066)) b!61403))

(declare-fun m!54235 () Bool)

(assert (=> b!61402 m!54235))

(assert (=> b!60986 d!12185))

(declare-fun d!12187 () Bool)

(declare-fun e!40337 () Bool)

(assert (=> d!12187 e!40337))

(declare-fun res!33826 () Bool)

(assert (=> d!12187 (=> (not res!33826) (not e!40337))))

(declare-fun lt!25346 () ListLongMap!1347)

(assert (=> d!12187 (= res!33826 (contains!682 lt!25346 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!25348 () List!1426)

(assert (=> d!12187 (= lt!25346 (ListLongMap!1348 lt!25348))))

(declare-fun lt!25347 () Unit!1613)

(declare-fun lt!25345 () Unit!1613)

(assert (=> d!12187 (= lt!25347 lt!25345)))

(assert (=> d!12187 (= (getValueByKey!126 lt!25348 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!131 (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12187 (= lt!25345 (lemmaContainsTupThenGetReturnValue!43 lt!25348 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12187 (= lt!25348 (insertStrictlySorted!46 (toList!689 (getCurrentListMap!390 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16))) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12187 (= (+!81 (getCurrentListMap!390 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!25346)))

(declare-fun b!61404 () Bool)

(declare-fun res!33825 () Bool)

(assert (=> b!61404 (=> (not res!33825) (not e!40337))))

(assert (=> b!61404 (= res!33825 (= (getValueByKey!126 (toList!689 lt!25346) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!131 (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!61405 () Bool)

(assert (=> b!61405 (= e!40337 (contains!685 (toList!689 lt!25346) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12187 res!33826) b!61404))

(assert (= (and b!61404 res!33825) b!61405))

(declare-fun m!54237 () Bool)

(assert (=> d!12187 m!54237))

(declare-fun m!54239 () Bool)

(assert (=> d!12187 m!54239))

(declare-fun m!54241 () Bool)

(assert (=> d!12187 m!54241))

(declare-fun m!54243 () Bool)

(assert (=> d!12187 m!54243))

(declare-fun m!54245 () Bool)

(assert (=> b!61404 m!54245))

(declare-fun m!54247 () Bool)

(assert (=> b!61405 m!54247))

(assert (=> d!12009 d!12187))

(assert (=> d!12009 d!12019))

(declare-fun d!12189 () Bool)

(assert (=> d!12189 (= (+!81 (getCurrentListMap!390 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!390 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) lt!24831 (zeroValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(assert (=> d!12189 true))

(declare-fun _$8!49 () Unit!1613)

(assert (=> d!12189 (= (choose!330 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) lt!24831 (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2066 newMap!16)) _$8!49)))

(declare-fun bs!2663 () Bool)

(assert (= bs!2663 d!12189))

(assert (=> bs!2663 m!53203))

(assert (=> bs!2663 m!53203))

(assert (=> bs!2663 m!53721))

(assert (=> bs!2663 m!53013))

(assert (=> bs!2663 m!53717))

(assert (=> d!12009 d!12189))

(declare-fun b!61406 () Bool)

(declare-fun res!33829 () Bool)

(declare-fun e!40341 () Bool)

(assert (=> b!61406 (=> (not res!33829) (not e!40341))))

(declare-fun e!40340 () Bool)

(assert (=> b!61406 (= res!33829 e!40340)))

(declare-fun res!33833 () Bool)

(assert (=> b!61406 (=> res!33833 e!40340)))

(declare-fun e!40345 () Bool)

(assert (=> b!61406 (= res!33833 (not e!40345))))

(declare-fun res!33827 () Bool)

(assert (=> b!61406 (=> (not res!33827) (not e!40345))))

(assert (=> b!61406 (= res!33827 (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(declare-fun b!61407 () Bool)

(declare-fun e!40346 () Bool)

(declare-fun call!4727 () Bool)

(assert (=> b!61407 (= e!40346 (not call!4727))))

(declare-fun bm!4719 () Bool)

(declare-fun lt!25365 () ListLongMap!1347)

(assert (=> bm!4719 (= call!4727 (contains!682 lt!25365 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61408 () Bool)

(declare-fun e!40348 () Unit!1613)

(declare-fun Unit!1646 () Unit!1613)

(assert (=> b!61408 (= e!40348 Unit!1646)))

(declare-fun b!61409 () Bool)

(declare-fun e!40338 () Bool)

(assert (=> b!61409 (= e!40346 e!40338)))

(declare-fun res!33832 () Bool)

(assert (=> b!61409 (= res!33832 call!4727)))

(assert (=> b!61409 (=> (not res!33832) (not e!40338))))

(declare-fun b!61410 () Bool)

(declare-fun e!40344 () Bool)

(assert (=> b!61410 (= e!40344 (validKeyInArray!0 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61411 () Bool)

(declare-fun e!40349 () ListLongMap!1347)

(declare-fun call!4724 () ListLongMap!1347)

(assert (=> b!61411 (= e!40349 call!4724)))

(declare-fun c!8069 () Bool)

(declare-fun bm!4720 () Bool)

(declare-fun c!8072 () Bool)

(declare-fun call!4723 () ListLongMap!1347)

(declare-fun call!4728 () ListLongMap!1347)

(declare-fun call!4726 () ListLongMap!1347)

(assert (=> bm!4720 (= call!4728 (+!81 (ite c!8072 call!4723 (ite c!8069 call!4726 call!4724)) (ite (or c!8072 c!8069) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!61413 () Bool)

(declare-fun call!4725 () ListLongMap!1347)

(assert (=> b!61413 (= e!40349 call!4725)))

(declare-fun b!61414 () Bool)

(assert (=> b!61414 (= e!40338 (= (apply!67 lt!25365 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!61415 () Bool)

(declare-fun e!40347 () Bool)

(assert (=> b!61415 (= e!40340 e!40347)))

(declare-fun res!33830 () Bool)

(assert (=> b!61415 (=> (not res!33830) (not e!40347))))

(assert (=> b!61415 (= res!33830 (contains!682 lt!25365 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61415 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(declare-fun b!61416 () Bool)

(assert (=> b!61416 (= e!40341 e!40346)))

(declare-fun c!8070 () Bool)

(assert (=> b!61416 (= c!8070 (not (= (bvand lt!24831 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4721 () Bool)

(assert (=> bm!4721 (= call!4725 call!4728)))

(declare-fun b!61417 () Bool)

(declare-fun e!40343 () ListLongMap!1347)

(assert (=> b!61417 (= e!40343 call!4725)))

(declare-fun bm!4722 () Bool)

(declare-fun call!4722 () Bool)

(assert (=> bm!4722 (= call!4722 (contains!682 lt!25365 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61418 () Bool)

(declare-fun e!40339 () ListLongMap!1347)

(assert (=> b!61418 (= e!40339 e!40343)))

(assert (=> b!61418 (= c!8069 (and (not (= (bvand lt!24831 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!24831 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!61419 () Bool)

(declare-fun e!40342 () Bool)

(assert (=> b!61419 (= e!40342 (= (apply!67 lt!25365 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1980 newMap!16)))))

(declare-fun b!61420 () Bool)

(declare-fun e!40350 () Bool)

(assert (=> b!61420 (= e!40350 e!40342)))

(declare-fun res!33828 () Bool)

(assert (=> b!61420 (= res!33828 call!4722)))

(assert (=> b!61420 (=> (not res!33828) (not e!40342))))

(declare-fun bm!4723 () Bool)

(assert (=> bm!4723 (= call!4724 call!4726)))

(declare-fun b!61421 () Bool)

(assert (=> b!61421 (= e!40345 (validKeyInArray!0 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61422 () Bool)

(assert (=> b!61422 (= e!40339 (+!81 call!4728 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun bm!4724 () Bool)

(assert (=> bm!4724 (= call!4723 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) lt!24831 (zeroValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun bm!4725 () Bool)

(assert (=> bm!4725 (= call!4726 call!4723)))

(declare-fun b!61423 () Bool)

(declare-fun c!8071 () Bool)

(assert (=> b!61423 (= c!8071 (and (not (= (bvand lt!24831 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!24831 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!61423 (= e!40343 e!40349)))

(declare-fun b!61424 () Bool)

(assert (=> b!61424 (= e!40347 (= (apply!67 lt!25365 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)) (get!1081 (select (arr!1785 (_values!2049 newMap!16)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2066 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!61424 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2016 (_values!2049 newMap!16))))))

(assert (=> b!61424 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(declare-fun d!12191 () Bool)

(assert (=> d!12191 e!40341))

(declare-fun res!33835 () Bool)

(assert (=> d!12191 (=> (not res!33835) (not e!40341))))

(assert (=> d!12191 (= res!33835 (or (bvsge #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))))

(declare-fun lt!25351 () ListLongMap!1347)

(assert (=> d!12191 (= lt!25365 lt!25351)))

(declare-fun lt!25367 () Unit!1613)

(assert (=> d!12191 (= lt!25367 e!40348)))

(declare-fun c!8068 () Bool)

(assert (=> d!12191 (= c!8068 e!40344)))

(declare-fun res!33831 () Bool)

(assert (=> d!12191 (=> (not res!33831) (not e!40344))))

(assert (=> d!12191 (= res!33831 (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(assert (=> d!12191 (= lt!25351 e!40339)))

(assert (=> d!12191 (= c!8072 (and (not (= (bvand lt!24831 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!24831 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12191 (validMask!0 (mask!5962 newMap!16))))

(assert (=> d!12191 (= (getCurrentListMap!390 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) lt!24831 (zeroValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)) lt!25365)))

(declare-fun b!61412 () Bool)

(assert (=> b!61412 (= e!40350 (not call!4722))))

(declare-fun b!61425 () Bool)

(declare-fun lt!25357 () Unit!1613)

(assert (=> b!61425 (= e!40348 lt!25357)))

(declare-fun lt!25359 () ListLongMap!1347)

(assert (=> b!61425 (= lt!25359 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) lt!24831 (zeroValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25362 () (_ BitVec 64))

(assert (=> b!61425 (= lt!25362 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25356 () (_ BitVec 64))

(assert (=> b!61425 (= lt!25356 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25349 () Unit!1613)

(assert (=> b!61425 (= lt!25349 (addStillContains!43 lt!25359 lt!25362 (zeroValue!1980 newMap!16) lt!25356))))

(assert (=> b!61425 (contains!682 (+!81 lt!25359 (tuple2!2023 lt!25362 (zeroValue!1980 newMap!16))) lt!25356)))

(declare-fun lt!25368 () Unit!1613)

(assert (=> b!61425 (= lt!25368 lt!25349)))

(declare-fun lt!25360 () ListLongMap!1347)

(assert (=> b!61425 (= lt!25360 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) lt!24831 (zeroValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25350 () (_ BitVec 64))

(assert (=> b!61425 (= lt!25350 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25370 () (_ BitVec 64))

(assert (=> b!61425 (= lt!25370 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25361 () Unit!1613)

(assert (=> b!61425 (= lt!25361 (addApplyDifferent!43 lt!25360 lt!25350 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!25370))))

(assert (=> b!61425 (= (apply!67 (+!81 lt!25360 (tuple2!2023 lt!25350 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!25370) (apply!67 lt!25360 lt!25370))))

(declare-fun lt!25355 () Unit!1613)

(assert (=> b!61425 (= lt!25355 lt!25361)))

(declare-fun lt!25366 () ListLongMap!1347)

(assert (=> b!61425 (= lt!25366 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) lt!24831 (zeroValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25353 () (_ BitVec 64))

(assert (=> b!61425 (= lt!25353 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25354 () (_ BitVec 64))

(assert (=> b!61425 (= lt!25354 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25369 () Unit!1613)

(assert (=> b!61425 (= lt!25369 (addApplyDifferent!43 lt!25366 lt!25353 (zeroValue!1980 newMap!16) lt!25354))))

(assert (=> b!61425 (= (apply!67 (+!81 lt!25366 (tuple2!2023 lt!25353 (zeroValue!1980 newMap!16))) lt!25354) (apply!67 lt!25366 lt!25354))))

(declare-fun lt!25364 () Unit!1613)

(assert (=> b!61425 (= lt!25364 lt!25369)))

(declare-fun lt!25363 () ListLongMap!1347)

(assert (=> b!61425 (= lt!25363 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) lt!24831 (zeroValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25352 () (_ BitVec 64))

(assert (=> b!61425 (= lt!25352 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25358 () (_ BitVec 64))

(assert (=> b!61425 (= lt!25358 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!61425 (= lt!25357 (addApplyDifferent!43 lt!25363 lt!25352 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!25358))))

(assert (=> b!61425 (= (apply!67 (+!81 lt!25363 (tuple2!2023 lt!25352 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!25358) (apply!67 lt!25363 lt!25358))))

(declare-fun b!61426 () Bool)

(declare-fun res!33834 () Bool)

(assert (=> b!61426 (=> (not res!33834) (not e!40341))))

(assert (=> b!61426 (= res!33834 e!40350)))

(declare-fun c!8067 () Bool)

(assert (=> b!61426 (= c!8067 (not (= (bvand lt!24831 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (= (and d!12191 c!8072) b!61422))

(assert (= (and d!12191 (not c!8072)) b!61418))

(assert (= (and b!61418 c!8069) b!61417))

(assert (= (and b!61418 (not c!8069)) b!61423))

(assert (= (and b!61423 c!8071) b!61413))

(assert (= (and b!61423 (not c!8071)) b!61411))

(assert (= (or b!61413 b!61411) bm!4723))

(assert (= (or b!61417 bm!4723) bm!4725))

(assert (= (or b!61417 b!61413) bm!4721))

(assert (= (or b!61422 bm!4725) bm!4724))

(assert (= (or b!61422 bm!4721) bm!4720))

(assert (= (and d!12191 res!33831) b!61410))

(assert (= (and d!12191 c!8068) b!61425))

(assert (= (and d!12191 (not c!8068)) b!61408))

(assert (= (and d!12191 res!33835) b!61406))

(assert (= (and b!61406 res!33827) b!61421))

(assert (= (and b!61406 (not res!33833)) b!61415))

(assert (= (and b!61415 res!33830) b!61424))

(assert (= (and b!61406 res!33829) b!61426))

(assert (= (and b!61426 c!8067) b!61420))

(assert (= (and b!61426 (not c!8067)) b!61412))

(assert (= (and b!61420 res!33828) b!61419))

(assert (= (or b!61420 b!61412) bm!4722))

(assert (= (and b!61426 res!33834) b!61416))

(assert (= (and b!61416 c!8070) b!61409))

(assert (= (and b!61416 (not c!8070)) b!61407))

(assert (= (and b!61409 res!33832) b!61414))

(assert (= (or b!61409 b!61407) bm!4719))

(declare-fun b_lambda!2719 () Bool)

(assert (=> (not b_lambda!2719) (not b!61424)))

(assert (=> b!61424 t!4804))

(declare-fun b_and!3741 () Bool)

(assert (= b_and!3737 (and (=> t!4804 result!2427) b_and!3741)))

(assert (=> b!61424 t!4806))

(declare-fun b_and!3743 () Bool)

(assert (= b_and!3739 (and (=> t!4806 result!2429) b_and!3743)))

(assert (=> b!61410 m!53277))

(assert (=> b!61410 m!53277))

(assert (=> b!61410 m!53279))

(assert (=> b!61415 m!53277))

(assert (=> b!61415 m!53277))

(declare-fun m!54249 () Bool)

(assert (=> b!61415 m!54249))

(declare-fun m!54251 () Bool)

(assert (=> bm!4719 m!54251))

(declare-fun m!54253 () Bool)

(assert (=> bm!4722 m!54253))

(assert (=> b!61424 m!53497))

(assert (=> b!61424 m!53389))

(assert (=> b!61424 m!53499))

(assert (=> b!61424 m!53277))

(assert (=> b!61424 m!53389))

(assert (=> b!61424 m!53277))

(declare-fun m!54255 () Bool)

(assert (=> b!61424 m!54255))

(assert (=> b!61424 m!53497))

(declare-fun m!54257 () Bool)

(assert (=> b!61419 m!54257))

(declare-fun m!54259 () Bool)

(assert (=> b!61414 m!54259))

(assert (=> d!12191 m!53287))

(declare-fun m!54261 () Bool)

(assert (=> bm!4720 m!54261))

(declare-fun m!54263 () Bool)

(assert (=> b!61422 m!54263))

(assert (=> b!61421 m!53277))

(assert (=> b!61421 m!53277))

(assert (=> b!61421 m!53279))

(assert (=> bm!4724 m!53013))

(declare-fun m!54265 () Bool)

(assert (=> bm!4724 m!54265))

(declare-fun m!54267 () Bool)

(assert (=> b!61425 m!54267))

(declare-fun m!54269 () Bool)

(assert (=> b!61425 m!54269))

(declare-fun m!54271 () Bool)

(assert (=> b!61425 m!54271))

(assert (=> b!61425 m!53277))

(declare-fun m!54273 () Bool)

(assert (=> b!61425 m!54273))

(declare-fun m!54275 () Bool)

(assert (=> b!61425 m!54275))

(assert (=> b!61425 m!53013))

(declare-fun m!54277 () Bool)

(assert (=> b!61425 m!54277))

(declare-fun m!54279 () Bool)

(assert (=> b!61425 m!54279))

(declare-fun m!54281 () Bool)

(assert (=> b!61425 m!54281))

(declare-fun m!54283 () Bool)

(assert (=> b!61425 m!54283))

(declare-fun m!54285 () Bool)

(assert (=> b!61425 m!54285))

(assert (=> b!61425 m!54283))

(declare-fun m!54287 () Bool)

(assert (=> b!61425 m!54287))

(declare-fun m!54289 () Bool)

(assert (=> b!61425 m!54289))

(assert (=> b!61425 m!54289))

(declare-fun m!54291 () Bool)

(assert (=> b!61425 m!54291))

(assert (=> b!61425 m!53013))

(declare-fun m!54293 () Bool)

(assert (=> b!61425 m!54293))

(assert (=> b!61425 m!54269))

(declare-fun m!54295 () Bool)

(assert (=> b!61425 m!54295))

(assert (=> b!61425 m!54279))

(assert (=> b!61425 m!53013))

(assert (=> b!61425 m!54265))

(assert (=> d!12009 d!12191))

(assert (=> d!12009 d!12047))

(declare-fun b!61427 () Bool)

(declare-fun e!40353 () Bool)

(declare-fun e!40352 () Bool)

(assert (=> b!61427 (= e!40353 e!40352)))

(declare-fun lt!25372 () (_ BitVec 64))

(assert (=> b!61427 (= lt!25372 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) #b00000000000000000000000000000000))))

(declare-fun lt!25371 () Unit!1613)

(assert (=> b!61427 (= lt!25371 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3694 (v!2403 (underlying!230 thiss!992))) lt!25372 #b00000000000000000000000000000000))))

(assert (=> b!61427 (arrayContainsKey!0 (_keys!3694 (v!2403 (underlying!230 thiss!992))) lt!25372 #b00000000000000000000000000000000)))

(declare-fun lt!25373 () Unit!1613)

(assert (=> b!61427 (= lt!25373 lt!25371)))

(declare-fun res!33836 () Bool)

(assert (=> b!61427 (= res!33836 (= (seekEntryOrOpen!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) #b00000000000000000000000000000000) (_keys!3694 (v!2403 (underlying!230 thiss!992))) (mask!5962 (v!2403 (underlying!230 thiss!992)))) (Found!222 #b00000000000000000000000000000000)))))

(assert (=> b!61427 (=> (not res!33836) (not e!40352))))

(declare-fun b!61428 () Bool)

(declare-fun e!40351 () Bool)

(assert (=> b!61428 (= e!40351 e!40353)))

(declare-fun c!8073 () Bool)

(assert (=> b!61428 (= c!8073 (validKeyInArray!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun d!12193 () Bool)

(declare-fun res!33837 () Bool)

(assert (=> d!12193 (=> res!33837 e!40351)))

(assert (=> d!12193 (= res!33837 (bvsge #b00000000000000000000000000000000 (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992))))))))

(assert (=> d!12193 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (mask!5962 (v!2403 (underlying!230 thiss!992)))) e!40351)))

(declare-fun bm!4726 () Bool)

(declare-fun call!4729 () Bool)

(assert (=> bm!4726 (= call!4729 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3694 (v!2403 (underlying!230 thiss!992))) (mask!5962 (v!2403 (underlying!230 thiss!992)))))))

(declare-fun b!61429 () Bool)

(assert (=> b!61429 (= e!40352 call!4729)))

(declare-fun b!61430 () Bool)

(assert (=> b!61430 (= e!40353 call!4729)))

(assert (= (and d!12193 (not res!33837)) b!61428))

(assert (= (and b!61428 c!8073) b!61427))

(assert (= (and b!61428 (not c!8073)) b!61430))

(assert (= (and b!61427 res!33836) b!61429))

(assert (= (or b!61429 b!61430) bm!4726))

(declare-fun m!54297 () Bool)

(assert (=> b!61427 m!54297))

(declare-fun m!54299 () Bool)

(assert (=> b!61427 m!54299))

(declare-fun m!54301 () Bool)

(assert (=> b!61427 m!54301))

(assert (=> b!61427 m!54297))

(declare-fun m!54303 () Bool)

(assert (=> b!61427 m!54303))

(assert (=> b!61428 m!54297))

(assert (=> b!61428 m!54297))

(declare-fun m!54305 () Bool)

(assert (=> b!61428 m!54305))

(declare-fun m!54307 () Bool)

(assert (=> bm!4726 m!54307))

(assert (=> b!60990 d!12193))

(assert (=> b!60915 d!12103))

(declare-fun d!12195 () Bool)

(assert (=> d!12195 (= (isEmpty!303 (getValueByKey!126 (toList!689 lt!24706) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355))) (not ((_ is Some!131) (getValueByKey!126 (toList!689 lt!24706) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))))

(assert (=> d!12023 d!12195))

(declare-fun lt!25374 () Bool)

(declare-fun d!12197 () Bool)

(assert (=> d!12197 (= lt!25374 (select (content!67 (toList!689 lt!25079)) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!40355 () Bool)

(assert (=> d!12197 (= lt!25374 e!40355)))

(declare-fun res!33838 () Bool)

(assert (=> d!12197 (=> (not res!33838) (not e!40355))))

(assert (=> d!12197 (= res!33838 ((_ is Cons!1422) (toList!689 lt!25079)))))

(assert (=> d!12197 (= (contains!685 (toList!689 lt!25079) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!25374)))

(declare-fun b!61431 () Bool)

(declare-fun e!40354 () Bool)

(assert (=> b!61431 (= e!40355 e!40354)))

(declare-fun res!33839 () Bool)

(assert (=> b!61431 (=> res!33839 e!40354)))

(assert (=> b!61431 (= res!33839 (= (h!2004 (toList!689 lt!25079)) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!61432 () Bool)

(assert (=> b!61432 (= e!40354 (contains!685 (t!4792 (toList!689 lt!25079)) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12197 res!33838) b!61431))

(assert (= (and b!61431 (not res!33839)) b!61432))

(declare-fun m!54309 () Bool)

(assert (=> d!12197 m!54309))

(declare-fun m!54311 () Bool)

(assert (=> d!12197 m!54311))

(declare-fun m!54313 () Bool)

(assert (=> b!61432 m!54313))

(assert (=> b!60943 d!12197))

(declare-fun d!12199 () Bool)

(declare-fun e!40357 () Bool)

(assert (=> d!12199 e!40357))

(declare-fun res!33840 () Bool)

(assert (=> d!12199 (=> res!33840 e!40357)))

(declare-fun lt!25377 () Bool)

(assert (=> d!12199 (= res!33840 (not lt!25377))))

(declare-fun lt!25378 () Bool)

(assert (=> d!12199 (= lt!25377 lt!25378)))

(declare-fun lt!25375 () Unit!1613)

(declare-fun e!40356 () Unit!1613)

(assert (=> d!12199 (= lt!25375 e!40356)))

(declare-fun c!8074 () Bool)

(assert (=> d!12199 (= c!8074 lt!25378)))

(assert (=> d!12199 (= lt!25378 (containsKey!129 (toList!689 lt!25129) (_1!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(assert (=> d!12199 (= (contains!682 lt!25129 (_1!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!25377)))

(declare-fun b!61433 () Bool)

(declare-fun lt!25376 () Unit!1613)

(assert (=> b!61433 (= e!40356 lt!25376)))

(assert (=> b!61433 (= lt!25376 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 lt!25129) (_1!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(assert (=> b!61433 (isDefined!78 (getValueByKey!126 (toList!689 lt!25129) (_1!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun b!61434 () Bool)

(declare-fun Unit!1647 () Unit!1613)

(assert (=> b!61434 (= e!40356 Unit!1647)))

(declare-fun b!61435 () Bool)

(assert (=> b!61435 (= e!40357 (isDefined!78 (getValueByKey!126 (toList!689 lt!25129) (_1!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(assert (= (and d!12199 c!8074) b!61433))

(assert (= (and d!12199 (not c!8074)) b!61434))

(assert (= (and d!12199 (not res!33840)) b!61435))

(declare-fun m!54315 () Bool)

(assert (=> d!12199 m!54315))

(declare-fun m!54317 () Bool)

(assert (=> b!61433 m!54317))

(assert (=> b!61433 m!53583))

(assert (=> b!61433 m!53583))

(declare-fun m!54319 () Bool)

(assert (=> b!61433 m!54319))

(assert (=> b!61435 m!53583))

(assert (=> b!61435 m!53583))

(assert (=> b!61435 m!54319))

(assert (=> d!11963 d!12199))

(declare-fun b!61439 () Bool)

(declare-fun e!40359 () Option!132)

(assert (=> b!61439 (= e!40359 None!130)))

(declare-fun b!61437 () Bool)

(declare-fun e!40358 () Option!132)

(assert (=> b!61437 (= e!40358 e!40359)))

(declare-fun c!8076 () Bool)

(assert (=> b!61437 (= c!8076 (and ((_ is Cons!1422) lt!25131) (not (= (_1!1022 (h!2004 lt!25131)) (_1!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))))))

(declare-fun b!61436 () Bool)

(assert (=> b!61436 (= e!40358 (Some!131 (_2!1022 (h!2004 lt!25131))))))

(declare-fun b!61438 () Bool)

(assert (=> b!61438 (= e!40359 (getValueByKey!126 (t!4792 lt!25131) (_1!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun c!8075 () Bool)

(declare-fun d!12201 () Bool)

(assert (=> d!12201 (= c!8075 (and ((_ is Cons!1422) lt!25131) (= (_1!1022 (h!2004 lt!25131)) (_1!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(assert (=> d!12201 (= (getValueByKey!126 lt!25131 (_1!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))) e!40358)))

(assert (= (and d!12201 c!8075) b!61436))

(assert (= (and d!12201 (not c!8075)) b!61437))

(assert (= (and b!61437 c!8076) b!61438))

(assert (= (and b!61437 (not c!8076)) b!61439))

(declare-fun m!54321 () Bool)

(assert (=> b!61438 m!54321))

(assert (=> d!11963 d!12201))

(declare-fun d!12203 () Bool)

(assert (=> d!12203 (= (getValueByKey!126 lt!25131 (_1!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))) (Some!131 (_2!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun lt!25379 () Unit!1613)

(assert (=> d!12203 (= lt!25379 (choose!332 lt!25131 (_1!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun e!40360 () Bool)

(assert (=> d!12203 e!40360))

(declare-fun res!33841 () Bool)

(assert (=> d!12203 (=> (not res!33841) (not e!40360))))

(assert (=> d!12203 (= res!33841 (isStrictlySorted!272 lt!25131))))

(assert (=> d!12203 (= (lemmaContainsTupThenGetReturnValue!43 lt!25131 (_1!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!25379)))

(declare-fun b!61440 () Bool)

(declare-fun res!33842 () Bool)

(assert (=> b!61440 (=> (not res!33842) (not e!40360))))

(assert (=> b!61440 (= res!33842 (containsKey!129 lt!25131 (_1!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun b!61441 () Bool)

(assert (=> b!61441 (= e!40360 (contains!685 lt!25131 (tuple2!2023 (_1!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(assert (= (and d!12203 res!33841) b!61440))

(assert (= (and b!61440 res!33842) b!61441))

(assert (=> d!12203 m!53577))

(declare-fun m!54323 () Bool)

(assert (=> d!12203 m!54323))

(declare-fun m!54325 () Bool)

(assert (=> d!12203 m!54325))

(declare-fun m!54327 () Bool)

(assert (=> b!61440 m!54327))

(declare-fun m!54329 () Bool)

(assert (=> b!61441 m!54329))

(assert (=> d!11963 d!12203))

(declare-fun bm!4727 () Bool)

(declare-fun call!4732 () List!1426)

(declare-fun call!4730 () List!1426)

(assert (=> bm!4727 (= call!4732 call!4730)))

(declare-fun b!61442 () Bool)

(declare-fun e!40363 () List!1426)

(declare-fun call!4731 () List!1426)

(assert (=> b!61442 (= e!40363 call!4731)))

(declare-fun c!8077 () Bool)

(declare-fun bm!4728 () Bool)

(declare-fun e!40361 () List!1426)

(assert (=> bm!4728 (= call!4730 ($colon$colon!60 e!40361 (ite c!8077 (h!2004 (toList!689 lt!24918)) (tuple2!2023 (_1!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))))))

(declare-fun c!8079 () Bool)

(assert (=> bm!4728 (= c!8079 c!8077)))

(declare-fun b!61443 () Bool)

(assert (=> b!61443 (= e!40361 (insertStrictlySorted!46 (t!4792 (toList!689 lt!24918)) (_1!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun b!61444 () Bool)

(declare-fun lt!25380 () List!1426)

(declare-fun e!40362 () Bool)

(assert (=> b!61444 (= e!40362 (contains!685 lt!25380 (tuple2!2023 (_1!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(declare-fun bm!4729 () Bool)

(assert (=> bm!4729 (= call!4731 call!4732)))

(declare-fun b!61445 () Bool)

(declare-fun res!33844 () Bool)

(assert (=> b!61445 (=> (not res!33844) (not e!40362))))

(assert (=> b!61445 (= res!33844 (containsKey!129 lt!25380 (_1!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun b!61446 () Bool)

(declare-fun e!40364 () List!1426)

(declare-fun e!40365 () List!1426)

(assert (=> b!61446 (= e!40364 e!40365)))

(declare-fun c!8078 () Bool)

(assert (=> b!61446 (= c!8078 (and ((_ is Cons!1422) (toList!689 lt!24918)) (= (_1!1022 (h!2004 (toList!689 lt!24918))) (_1!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(declare-fun b!61447 () Bool)

(declare-fun c!8080 () Bool)

(assert (=> b!61447 (= c!8080 (and ((_ is Cons!1422) (toList!689 lt!24918)) (bvsgt (_1!1022 (h!2004 (toList!689 lt!24918))) (_1!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(assert (=> b!61447 (= e!40365 e!40363)))

(declare-fun d!12205 () Bool)

(assert (=> d!12205 e!40362))

(declare-fun res!33843 () Bool)

(assert (=> d!12205 (=> (not res!33843) (not e!40362))))

(assert (=> d!12205 (= res!33843 (isStrictlySorted!272 lt!25380))))

(assert (=> d!12205 (= lt!25380 e!40364)))

(assert (=> d!12205 (= c!8077 (and ((_ is Cons!1422) (toList!689 lt!24918)) (bvslt (_1!1022 (h!2004 (toList!689 lt!24918))) (_1!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(assert (=> d!12205 (isStrictlySorted!272 (toList!689 lt!24918))))

(assert (=> d!12205 (= (insertStrictlySorted!46 (toList!689 lt!24918) (_1!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!25380)))

(declare-fun b!61448 () Bool)

(assert (=> b!61448 (= e!40361 (ite c!8078 (t!4792 (toList!689 lt!24918)) (ite c!8080 (Cons!1422 (h!2004 (toList!689 lt!24918)) (t!4792 (toList!689 lt!24918))) Nil!1423)))))

(declare-fun b!61449 () Bool)

(assert (=> b!61449 (= e!40364 call!4730)))

(declare-fun b!61450 () Bool)

(assert (=> b!61450 (= e!40365 call!4732)))

(declare-fun b!61451 () Bool)

(assert (=> b!61451 (= e!40363 call!4731)))

(assert (= (and d!12205 c!8077) b!61449))

(assert (= (and d!12205 (not c!8077)) b!61446))

(assert (= (and b!61446 c!8078) b!61450))

(assert (= (and b!61446 (not c!8078)) b!61447))

(assert (= (and b!61447 c!8080) b!61451))

(assert (= (and b!61447 (not c!8080)) b!61442))

(assert (= (or b!61451 b!61442) bm!4729))

(assert (= (or b!61450 bm!4729) bm!4727))

(assert (= (or b!61449 bm!4727) bm!4728))

(assert (= (and bm!4728 c!8079) b!61443))

(assert (= (and bm!4728 (not c!8079)) b!61448))

(assert (= (and d!12205 res!33843) b!61445))

(assert (= (and b!61445 res!33844) b!61444))

(declare-fun m!54331 () Bool)

(assert (=> b!61444 m!54331))

(declare-fun m!54333 () Bool)

(assert (=> bm!4728 m!54333))

(declare-fun m!54335 () Bool)

(assert (=> b!61443 m!54335))

(declare-fun m!54337 () Bool)

(assert (=> d!12205 m!54337))

(declare-fun m!54339 () Bool)

(assert (=> d!12205 m!54339))

(declare-fun m!54341 () Bool)

(assert (=> b!61445 m!54341))

(assert (=> d!11963 d!12205))

(assert (=> b!60884 d!11913))

(assert (=> b!61036 d!11953))

(assert (=> b!61105 d!12051))

(declare-fun d!12207 () Bool)

(declare-fun e!40366 () Bool)

(assert (=> d!12207 e!40366))

(declare-fun res!33846 () Bool)

(assert (=> d!12207 (=> (not res!33846) (not e!40366))))

(declare-fun lt!25382 () ListLongMap!1347)

(assert (=> d!12207 (= res!33846 (contains!682 lt!25382 (_1!1022 (ite (or c!7987 c!7984) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))))))))

(declare-fun lt!25384 () List!1426)

(assert (=> d!12207 (= lt!25382 (ListLongMap!1348 lt!25384))))

(declare-fun lt!25383 () Unit!1613)

(declare-fun lt!25381 () Unit!1613)

(assert (=> d!12207 (= lt!25383 lt!25381)))

(assert (=> d!12207 (= (getValueByKey!126 lt!25384 (_1!1022 (ite (or c!7987 c!7984) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))))) (Some!131 (_2!1022 (ite (or c!7987 c!7984) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))))))))

(assert (=> d!12207 (= lt!25381 (lemmaContainsTupThenGetReturnValue!43 lt!25384 (_1!1022 (ite (or c!7987 c!7984) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))) (_2!1022 (ite (or c!7987 c!7984) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))))))))

(assert (=> d!12207 (= lt!25384 (insertStrictlySorted!46 (toList!689 (ite c!7987 call!4691 (ite c!7984 call!4694 call!4692))) (_1!1022 (ite (or c!7987 c!7984) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))) (_2!1022 (ite (or c!7987 c!7984) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))))))))

(assert (=> d!12207 (= (+!81 (ite c!7987 call!4691 (ite c!7984 call!4694 call!4692)) (ite (or c!7987 c!7984) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))) lt!25382)))

(declare-fun b!61452 () Bool)

(declare-fun res!33845 () Bool)

(assert (=> b!61452 (=> (not res!33845) (not e!40366))))

(assert (=> b!61452 (= res!33845 (= (getValueByKey!126 (toList!689 lt!25382) (_1!1022 (ite (or c!7987 c!7984) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))))) (Some!131 (_2!1022 (ite (or c!7987 c!7984) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))))))))

(declare-fun b!61453 () Bool)

(assert (=> b!61453 (= e!40366 (contains!685 (toList!689 lt!25382) (ite (or c!7987 c!7984) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))))))

(assert (= (and d!12207 res!33846) b!61452))

(assert (= (and b!61452 res!33845) b!61453))

(declare-fun m!54343 () Bool)

(assert (=> d!12207 m!54343))

(declare-fun m!54345 () Bool)

(assert (=> d!12207 m!54345))

(declare-fun m!54347 () Bool)

(assert (=> d!12207 m!54347))

(declare-fun m!54349 () Bool)

(assert (=> d!12207 m!54349))

(declare-fun m!54351 () Bool)

(assert (=> b!61452 m!54351))

(declare-fun m!54353 () Bool)

(assert (=> b!61453 m!54353))

(assert (=> bm!4688 d!12207))

(assert (=> d!12001 d!11883))

(declare-fun d!12209 () Bool)

(assert (=> d!12209 (isDefined!78 (getValueByKey!126 (toList!689 lt!24917) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!25385 () Unit!1613)

(assert (=> d!12209 (= lt!25385 (choose!331 (toList!689 lt!24917) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!40367 () Bool)

(assert (=> d!12209 e!40367))

(declare-fun res!33847 () Bool)

(assert (=> d!12209 (=> (not res!33847) (not e!40367))))

(assert (=> d!12209 (= res!33847 (isStrictlySorted!272 (toList!689 lt!24917)))))

(assert (=> d!12209 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 lt!24917) #b0000000000000000000000000000000000000000000000000000000000000000) lt!25385)))

(declare-fun b!61454 () Bool)

(assert (=> b!61454 (= e!40367 (containsKey!129 (toList!689 lt!24917) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!12209 res!33847) b!61454))

(assert (=> d!12209 m!53377))

(assert (=> d!12209 m!53377))

(assert (=> d!12209 m!53379))

(declare-fun m!54355 () Bool)

(assert (=> d!12209 m!54355))

(assert (=> d!12209 m!53969))

(assert (=> b!61454 m!53373))

(assert (=> b!60897 d!12209))

(assert (=> b!60897 d!12171))

(assert (=> b!60897 d!12173))

(declare-fun d!12211 () Bool)

(assert (=> d!12211 (= (apply!67 lt!25111 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1085 (getValueByKey!126 (toList!689 lt!25111) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2664 () Bool)

(assert (= bs!2664 d!12211))

(declare-fun m!54357 () Bool)

(assert (=> bs!2664 m!54357))

(assert (=> bs!2664 m!54357))

(declare-fun m!54359 () Bool)

(assert (=> bs!2664 m!54359))

(assert (=> b!60973 d!12211))

(declare-fun d!12213 () Bool)

(assert (=> d!12213 (= (map!1114 (_2!1023 lt!25028)) (getCurrentListMap!390 (_keys!3694 (_2!1023 lt!25028)) (_values!2049 (_2!1023 lt!25028)) (mask!5962 (_2!1023 lt!25028)) (extraKeys!1949 (_2!1023 lt!25028)) (zeroValue!1980 (_2!1023 lt!25028)) (minValue!1980 (_2!1023 lt!25028)) #b00000000000000000000000000000000 (defaultEntry!2066 (_2!1023 lt!25028))))))

(declare-fun bs!2665 () Bool)

(assert (= bs!2665 d!12213))

(declare-fun m!54361 () Bool)

(assert (=> bs!2665 m!54361))

(assert (=> b!60878 d!12213))

(declare-fun d!12215 () Bool)

(declare-fun e!40368 () Bool)

(assert (=> d!12215 e!40368))

(declare-fun res!33849 () Bool)

(assert (=> d!12215 (=> (not res!33849) (not e!40368))))

(declare-fun lt!25387 () ListLongMap!1347)

(assert (=> d!12215 (= res!33849 (contains!682 lt!25387 (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!25389 () List!1426)

(assert (=> d!12215 (= lt!25387 (ListLongMap!1348 lt!25389))))

(declare-fun lt!25388 () Unit!1613)

(declare-fun lt!25386 () Unit!1613)

(assert (=> d!12215 (= lt!25388 lt!25386)))

(assert (=> d!12215 (= (getValueByKey!126 lt!25389 (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!131 (_2!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12215 (= lt!25386 (lemmaContainsTupThenGetReturnValue!43 lt!25389 (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12215 (= lt!25389 (insertStrictlySorted!46 (toList!689 (map!1114 newMap!16)) (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12215 (= (+!81 (map!1114 newMap!16) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!25387)))

(declare-fun b!61455 () Bool)

(declare-fun res!33848 () Bool)

(assert (=> b!61455 (=> (not res!33848) (not e!40368))))

(assert (=> b!61455 (= res!33848 (= (getValueByKey!126 (toList!689 lt!25387) (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!131 (_2!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!61456 () Bool)

(assert (=> b!61456 (= e!40368 (contains!685 (toList!689 lt!25387) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12215 res!33849) b!61455))

(assert (= (and b!61455 res!33848) b!61456))

(declare-fun m!54363 () Bool)

(assert (=> d!12215 m!54363))

(declare-fun m!54365 () Bool)

(assert (=> d!12215 m!54365))

(declare-fun m!54367 () Bool)

(assert (=> d!12215 m!54367))

(declare-fun m!54369 () Bool)

(assert (=> d!12215 m!54369))

(declare-fun m!54371 () Bool)

(assert (=> b!61455 m!54371))

(declare-fun m!54373 () Bool)

(assert (=> b!61456 m!54373))

(assert (=> b!60878 d!12215))

(assert (=> b!60878 d!11903))

(declare-fun d!12217 () Bool)

(declare-fun isEmpty!304 (List!1426) Bool)

(assert (=> d!12217 (= (isEmpty!302 lt!25160) (isEmpty!304 (toList!689 lt!25160)))))

(declare-fun bs!2666 () Bool)

(assert (= bs!2666 d!12217))

(declare-fun m!54375 () Bool)

(assert (=> bs!2666 m!54375))

(assert (=> b!61031 d!12217))

(declare-fun d!12219 () Bool)

(declare-fun res!33852 () Bool)

(declare-fun e!40369 () Bool)

(assert (=> d!12219 (=> (not res!33852) (not e!40369))))

(assert (=> d!12219 (= res!33852 (validMask!0 (mask!5962 (v!2403 (underlying!230 thiss!992)))))))

(assert (=> d!12219 (= (simpleValid!43 (v!2403 (underlying!230 thiss!992))) e!40369)))

(declare-fun b!61458 () Bool)

(declare-fun res!33853 () Bool)

(assert (=> b!61458 (=> (not res!33853) (not e!40369))))

(assert (=> b!61458 (= res!33853 (bvsge (size!2021 (v!2403 (underlying!230 thiss!992))) (_size!363 (v!2403 (underlying!230 thiss!992)))))))

(declare-fun b!61460 () Bool)

(assert (=> b!61460 (= e!40369 (and (bvsge (extraKeys!1949 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000000000000000) (bvsle (extraKeys!1949 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000000000000011) (bvsge (_vacant!363 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000000000000000)))))

(declare-fun b!61459 () Bool)

(declare-fun res!33850 () Bool)

(assert (=> b!61459 (=> (not res!33850) (not e!40369))))

(assert (=> b!61459 (= res!33850 (= (size!2021 (v!2403 (underlying!230 thiss!992))) (bvadd (_size!363 (v!2403 (underlying!230 thiss!992))) (bvsdiv (bvadd (extraKeys!1949 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!61457 () Bool)

(declare-fun res!33851 () Bool)

(assert (=> b!61457 (=> (not res!33851) (not e!40369))))

(assert (=> b!61457 (= res!33851 (and (= (size!2016 (_values!2049 (v!2403 (underlying!230 thiss!992)))) (bvadd (mask!5962 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000000000000001)) (= (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (size!2016 (_values!2049 (v!2403 (underlying!230 thiss!992))))) (bvsge (_size!363 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000000000000000) (bvsle (_size!363 (v!2403 (underlying!230 thiss!992))) (bvadd (mask!5962 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000000000000001))))))

(assert (= (and d!12219 res!33852) b!61457))

(assert (= (and b!61457 res!33851) b!61458))

(assert (= (and b!61458 res!33853) b!61459))

(assert (= (and b!61459 res!33850) b!61460))

(assert (=> d!12219 m!53021))

(declare-fun m!54377 () Bool)

(assert (=> b!61458 m!54377))

(assert (=> b!61459 m!54377))

(assert (=> d!11955 d!12219))

(declare-fun d!12221 () Bool)

(assert (=> d!12221 (= (get!1085 (getValueByKey!126 (toList!689 lt!24917) #b1000000000000000000000000000000000000000000000000000000000000000)) (v!2409 (getValueByKey!126 (toList!689 lt!24917) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12017 d!12221))

(assert (=> d!12017 d!12077))

(declare-fun d!12223 () Bool)

(declare-fun e!40371 () Bool)

(assert (=> d!12223 e!40371))

(declare-fun res!33854 () Bool)

(assert (=> d!12223 (=> res!33854 e!40371)))

(declare-fun lt!25392 () Bool)

(assert (=> d!12223 (= res!33854 (not lt!25392))))

(declare-fun lt!25393 () Bool)

(assert (=> d!12223 (= lt!25392 lt!25393)))

(declare-fun lt!25390 () Unit!1613)

(declare-fun e!40370 () Unit!1613)

(assert (=> d!12223 (= lt!25390 e!40370)))

(declare-fun c!8081 () Bool)

(assert (=> d!12223 (= c!8081 lt!25393)))

(assert (=> d!12223 (= lt!25393 (containsKey!129 (toList!689 lt!25111) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12223 (= (contains!682 lt!25111 #b1000000000000000000000000000000000000000000000000000000000000000) lt!25392)))

(declare-fun b!61461 () Bool)

(declare-fun lt!25391 () Unit!1613)

(assert (=> b!61461 (= e!40370 lt!25391)))

(assert (=> b!61461 (= lt!25391 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 lt!25111) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61461 (isDefined!78 (getValueByKey!126 (toList!689 lt!25111) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61462 () Bool)

(declare-fun Unit!1648 () Unit!1613)

(assert (=> b!61462 (= e!40370 Unit!1648)))

(declare-fun b!61463 () Bool)

(assert (=> b!61463 (= e!40371 (isDefined!78 (getValueByKey!126 (toList!689 lt!25111) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12223 c!8081) b!61461))

(assert (= (and d!12223 (not c!8081)) b!61462))

(assert (= (and d!12223 (not res!33854)) b!61463))

(declare-fun m!54379 () Bool)

(assert (=> d!12223 m!54379))

(declare-fun m!54381 () Bool)

(assert (=> b!61461 m!54381))

(assert (=> b!61461 m!54357))

(assert (=> b!61461 m!54357))

(declare-fun m!54383 () Bool)

(assert (=> b!61461 m!54383))

(assert (=> b!61463 m!54357))

(assert (=> b!61463 m!54357))

(assert (=> b!61463 m!54383))

(assert (=> bm!4667 d!12223))

(declare-fun d!12225 () Bool)

(declare-fun lt!25394 () Bool)

(assert (=> d!12225 (= lt!25394 (select (content!66 Nil!1424) (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!40372 () Bool)

(assert (=> d!12225 (= lt!25394 e!40372)))

(declare-fun res!33855 () Bool)

(assert (=> d!12225 (=> (not res!33855) (not e!40372))))

(assert (=> d!12225 (= res!33855 ((_ is Cons!1423) Nil!1424))))

(assert (=> d!12225 (= (contains!684 Nil!1424 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)) lt!25394)))

(declare-fun b!61464 () Bool)

(declare-fun e!40373 () Bool)

(assert (=> b!61464 (= e!40372 e!40373)))

(declare-fun res!33856 () Bool)

(assert (=> b!61464 (=> res!33856 e!40373)))

(assert (=> b!61464 (= res!33856 (= (h!2005 Nil!1424) (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61465 () Bool)

(assert (=> b!61465 (= e!40373 (contains!684 (t!4793 Nil!1424) (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!12225 res!33855) b!61464))

(assert (= (and b!61464 (not res!33856)) b!61465))

(assert (=> d!12225 m!53723))

(assert (=> d!12225 m!53277))

(declare-fun m!54385 () Bool)

(assert (=> d!12225 m!54385))

(assert (=> b!61465 m!53277))

(declare-fun m!54387 () Bool)

(assert (=> b!61465 m!54387))

(assert (=> b!60828 d!12225))

(declare-fun d!12227 () Bool)

(assert (=> d!12227 (= (apply!67 lt!25232 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1085 (getValueByKey!126 (toList!689 lt!25232) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2667 () Bool)

(assert (= bs!2667 d!12227))

(declare-fun m!54389 () Bool)

(assert (=> bs!2667 m!54389))

(assert (=> bs!2667 m!54389))

(declare-fun m!54391 () Bool)

(assert (=> bs!2667 m!54391))

(assert (=> b!61145 d!12227))

(declare-fun d!12229 () Bool)

(assert (=> d!12229 (= (get!1085 (getValueByKey!126 (toList!689 lt!24912) lt!24922)) (v!2409 (getValueByKey!126 (toList!689 lt!24912) lt!24922)))))

(assert (=> d!11959 d!12229))

(declare-fun b!61469 () Bool)

(declare-fun e!40375 () Option!132)

(assert (=> b!61469 (= e!40375 None!130)))

(declare-fun b!61467 () Bool)

(declare-fun e!40374 () Option!132)

(assert (=> b!61467 (= e!40374 e!40375)))

(declare-fun c!8083 () Bool)

(assert (=> b!61467 (= c!8083 (and ((_ is Cons!1422) (toList!689 lt!24912)) (not (= (_1!1022 (h!2004 (toList!689 lt!24912))) lt!24922))))))

(declare-fun b!61466 () Bool)

(assert (=> b!61466 (= e!40374 (Some!131 (_2!1022 (h!2004 (toList!689 lt!24912)))))))

(declare-fun b!61468 () Bool)

(assert (=> b!61468 (= e!40375 (getValueByKey!126 (t!4792 (toList!689 lt!24912)) lt!24922))))

(declare-fun d!12231 () Bool)

(declare-fun c!8082 () Bool)

(assert (=> d!12231 (= c!8082 (and ((_ is Cons!1422) (toList!689 lt!24912)) (= (_1!1022 (h!2004 (toList!689 lt!24912))) lt!24922)))))

(assert (=> d!12231 (= (getValueByKey!126 (toList!689 lt!24912) lt!24922) e!40374)))

(assert (= (and d!12231 c!8082) b!61466))

(assert (= (and d!12231 (not c!8082)) b!61467))

(assert (= (and b!61467 c!8083) b!61468))

(assert (= (and b!61467 (not c!8083)) b!61469))

(declare-fun m!54393 () Bool)

(assert (=> b!61468 m!54393))

(assert (=> d!11959 d!12231))

(assert (=> bm!4653 d!11941))

(declare-fun d!12233 () Bool)

(declare-fun res!33857 () Bool)

(declare-fun e!40376 () Bool)

(assert (=> d!12233 (=> res!33857 e!40376)))

(assert (=> d!12233 (= res!33857 (and ((_ is Cons!1422) (toList!689 (+!81 lt!24911 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))) (= (_1!1022 (h!2004 (toList!689 (+!81 lt!24911 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))) lt!24908)))))

(assert (=> d!12233 (= (containsKey!129 (toList!689 (+!81 lt!24911 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!24908) e!40376)))

(declare-fun b!61470 () Bool)

(declare-fun e!40377 () Bool)

(assert (=> b!61470 (= e!40376 e!40377)))

(declare-fun res!33858 () Bool)

(assert (=> b!61470 (=> (not res!33858) (not e!40377))))

(assert (=> b!61470 (= res!33858 (and (or (not ((_ is Cons!1422) (toList!689 (+!81 lt!24911 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))) (bvsle (_1!1022 (h!2004 (toList!689 (+!81 lt!24911 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))) lt!24908)) ((_ is Cons!1422) (toList!689 (+!81 lt!24911 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))) (bvslt (_1!1022 (h!2004 (toList!689 (+!81 lt!24911 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))) lt!24908)))))

(declare-fun b!61471 () Bool)

(assert (=> b!61471 (= e!40377 (containsKey!129 (t!4792 (toList!689 (+!81 lt!24911 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))) lt!24908))))

(assert (= (and d!12233 (not res!33857)) b!61470))

(assert (= (and b!61470 res!33858) b!61471))

(declare-fun m!54395 () Bool)

(assert (=> b!61471 m!54395))

(assert (=> d!11957 d!12233))

(declare-fun d!12235 () Bool)

(assert (=> d!12235 (= (apply!67 lt!25210 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)) (get!1085 (getValueByKey!126 (toList!689 lt!25210) (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2668 () Bool)

(assert (= bs!2668 d!12235))

(assert (=> bs!2668 m!53277))

(declare-fun m!54397 () Bool)

(assert (=> bs!2668 m!54397))

(assert (=> bs!2668 m!54397))

(declare-fun m!54399 () Bool)

(assert (=> bs!2668 m!54399))

(assert (=> b!61134 d!12235))

(declare-fun d!12237 () Bool)

(declare-fun c!8084 () Bool)

(assert (=> d!12237 (= c!8084 ((_ is ValueCellFull!860) (select (arr!1785 (_values!2049 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!40378 () V!2857)

(assert (=> d!12237 (= (get!1081 (select (arr!1785 (_values!2049 newMap!16)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2066 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!40378)))

(declare-fun b!61472 () Bool)

(assert (=> b!61472 (= e!40378 (get!1083 (select (arr!1785 (_values!2049 newMap!16)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2066 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!61473 () Bool)

(assert (=> b!61473 (= e!40378 (get!1084 (select (arr!1785 (_values!2049 newMap!16)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2066 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12237 c!8084) b!61472))

(assert (= (and d!12237 (not c!8084)) b!61473))

(assert (=> b!61472 m!53497))

(assert (=> b!61472 m!53389))

(declare-fun m!54401 () Bool)

(assert (=> b!61472 m!54401))

(assert (=> b!61473 m!53497))

(assert (=> b!61473 m!53389))

(declare-fun m!54403 () Bool)

(assert (=> b!61473 m!54403))

(assert (=> b!61134 d!12237))

(assert (=> d!11983 d!11957))

(assert (=> d!11983 d!11967))

(declare-fun d!12239 () Bool)

(assert (=> d!12239 (contains!682 (+!81 lt!24911 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))) lt!24908)))

(assert (=> d!12239 true))

(declare-fun _$35!303 () Unit!1613)

(assert (=> d!12239 (= (choose!327 lt!24911 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))) lt!24908) _$35!303)))

(declare-fun bs!2669 () Bool)

(assert (= bs!2669 d!12239))

(assert (=> bs!2669 m!53241))

(assert (=> bs!2669 m!53241))

(assert (=> bs!2669 m!53243))

(assert (=> d!11983 d!12239))

(declare-fun d!12241 () Bool)

(declare-fun e!40380 () Bool)

(assert (=> d!12241 e!40380))

(declare-fun res!33859 () Bool)

(assert (=> d!12241 (=> res!33859 e!40380)))

(declare-fun lt!25397 () Bool)

(assert (=> d!12241 (= res!33859 (not lt!25397))))

(declare-fun lt!25398 () Bool)

(assert (=> d!12241 (= lt!25397 lt!25398)))

(declare-fun lt!25395 () Unit!1613)

(declare-fun e!40379 () Unit!1613)

(assert (=> d!12241 (= lt!25395 e!40379)))

(declare-fun c!8085 () Bool)

(assert (=> d!12241 (= c!8085 lt!25398)))

(assert (=> d!12241 (= lt!25398 (containsKey!129 (toList!689 lt!24911) lt!24908))))

(assert (=> d!12241 (= (contains!682 lt!24911 lt!24908) lt!25397)))

(declare-fun b!61475 () Bool)

(declare-fun lt!25396 () Unit!1613)

(assert (=> b!61475 (= e!40379 lt!25396)))

(assert (=> b!61475 (= lt!25396 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 lt!24911) lt!24908))))

(assert (=> b!61475 (isDefined!78 (getValueByKey!126 (toList!689 lt!24911) lt!24908))))

(declare-fun b!61476 () Bool)

(declare-fun Unit!1649 () Unit!1613)

(assert (=> b!61476 (= e!40379 Unit!1649)))

(declare-fun b!61477 () Bool)

(assert (=> b!61477 (= e!40380 (isDefined!78 (getValueByKey!126 (toList!689 lt!24911) lt!24908)))))

(assert (= (and d!12241 c!8085) b!61475))

(assert (= (and d!12241 (not c!8085)) b!61476))

(assert (= (and d!12241 (not res!33859)) b!61477))

(declare-fun m!54405 () Bool)

(assert (=> d!12241 m!54405))

(declare-fun m!54407 () Bool)

(assert (=> b!61475 m!54407))

(declare-fun m!54409 () Bool)

(assert (=> b!61475 m!54409))

(assert (=> b!61475 m!54409))

(declare-fun m!54411 () Bool)

(assert (=> b!61475 m!54411))

(assert (=> b!61477 m!54409))

(assert (=> b!61477 m!54409))

(assert (=> b!61477 m!54411))

(assert (=> d!11983 d!12241))

(declare-fun d!12243 () Bool)

(assert (=> d!12243 (= (apply!67 lt!25059 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1085 (getValueByKey!126 (toList!689 lt!25059) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2670 () Bool)

(assert (= bs!2670 d!12243))

(declare-fun m!54413 () Bool)

(assert (=> bs!2670 m!54413))

(assert (=> bs!2670 m!54413))

(declare-fun m!54415 () Bool)

(assert (=> bs!2670 m!54415))

(assert (=> b!60908 d!12243))

(declare-fun d!12245 () Bool)

(assert (=> d!12245 (isDefined!78 (getValueByKey!126 (toList!689 call!4625) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(declare-fun lt!25399 () Unit!1613)

(assert (=> d!12245 (= lt!25399 (choose!331 (toList!689 call!4625) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(declare-fun e!40381 () Bool)

(assert (=> d!12245 e!40381))

(declare-fun res!33860 () Bool)

(assert (=> d!12245 (=> (not res!33860) (not e!40381))))

(assert (=> d!12245 (= res!33860 (isStrictlySorted!272 (toList!689 call!4625)))))

(assert (=> d!12245 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 call!4625) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) lt!25399)))

(declare-fun b!61478 () Bool)

(assert (=> b!61478 (= e!40381 (containsKey!129 (toList!689 call!4625) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(assert (= (and d!12245 res!33860) b!61478))

(assert (=> d!12245 m!52989))

(assert (=> d!12245 m!53851))

(assert (=> d!12245 m!53851))

(assert (=> d!12245 m!53853))

(assert (=> d!12245 m!52989))

(declare-fun m!54417 () Bool)

(assert (=> d!12245 m!54417))

(declare-fun m!54419 () Bool)

(assert (=> d!12245 m!54419))

(assert (=> b!61478 m!52989))

(assert (=> b!61478 m!53847))

(assert (=> b!61174 d!12245))

(declare-fun d!12247 () Bool)

(assert (=> d!12247 (= (isDefined!78 (getValueByKey!126 (toList!689 call!4625) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355))) (not (isEmpty!303 (getValueByKey!126 (toList!689 call!4625) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))))

(declare-fun bs!2671 () Bool)

(assert (= bs!2671 d!12247))

(assert (=> bs!2671 m!53851))

(declare-fun m!54421 () Bool)

(assert (=> bs!2671 m!54421))

(assert (=> b!61174 d!12247))

(declare-fun b!61482 () Bool)

(declare-fun e!40383 () Option!132)

(assert (=> b!61482 (= e!40383 None!130)))

(declare-fun b!61480 () Bool)

(declare-fun e!40382 () Option!132)

(assert (=> b!61480 (= e!40382 e!40383)))

(declare-fun c!8087 () Bool)

(assert (=> b!61480 (= c!8087 (and ((_ is Cons!1422) (toList!689 call!4625)) (not (= (_1!1022 (h!2004 (toList!689 call!4625))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))))

(declare-fun b!61479 () Bool)

(assert (=> b!61479 (= e!40382 (Some!131 (_2!1022 (h!2004 (toList!689 call!4625)))))))

(declare-fun b!61481 () Bool)

(assert (=> b!61481 (= e!40383 (getValueByKey!126 (t!4792 (toList!689 call!4625)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(declare-fun d!12249 () Bool)

(declare-fun c!8086 () Bool)

(assert (=> d!12249 (= c!8086 (and ((_ is Cons!1422) (toList!689 call!4625)) (= (_1!1022 (h!2004 (toList!689 call!4625))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355))))))

(assert (=> d!12249 (= (getValueByKey!126 (toList!689 call!4625) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) e!40382)))

(assert (= (and d!12249 c!8086) b!61479))

(assert (= (and d!12249 (not c!8086)) b!61480))

(assert (= (and b!61480 c!8087) b!61481))

(assert (= (and b!61480 (not c!8087)) b!61482))

(assert (=> b!61481 m!52989))

(declare-fun m!54423 () Bool)

(assert (=> b!61481 m!54423))

(assert (=> b!61174 d!12249))

(declare-fun lt!25400 () Bool)

(declare-fun d!12251 () Bool)

(assert (=> d!12251 (= lt!25400 (select (content!67 (toList!689 lt!25243)) (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun e!40385 () Bool)

(assert (=> d!12251 (= lt!25400 e!40385)))

(declare-fun res!33861 () Bool)

(assert (=> d!12251 (=> (not res!33861) (not e!40385))))

(assert (=> d!12251 (= res!33861 ((_ is Cons!1422) (toList!689 lt!25243)))))

(assert (=> d!12251 (= (contains!685 (toList!689 lt!25243) (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!25400)))

(declare-fun b!61483 () Bool)

(declare-fun e!40384 () Bool)

(assert (=> b!61483 (= e!40385 e!40384)))

(declare-fun res!33862 () Bool)

(assert (=> b!61483 (=> res!33862 e!40384)))

(assert (=> b!61483 (= res!33862 (= (h!2004 (toList!689 lt!25243)) (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun b!61484 () Bool)

(assert (=> b!61484 (= e!40384 (contains!685 (t!4792 (toList!689 lt!25243)) (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(assert (= (and d!12251 res!33861) b!61483))

(assert (= (and b!61483 (not res!33862)) b!61484))

(declare-fun m!54425 () Bool)

(assert (=> d!12251 m!54425))

(declare-fun m!54427 () Bool)

(assert (=> d!12251 m!54427))

(declare-fun m!54429 () Bool)

(assert (=> b!61484 m!54429))

(assert (=> b!61178 d!12251))

(assert (=> d!11969 d!11971))

(assert (=> d!11969 d!11987))

(assert (=> d!11969 d!11965))

(declare-fun d!12253 () Bool)

(declare-fun e!40387 () Bool)

(assert (=> d!12253 e!40387))

(declare-fun res!33863 () Bool)

(assert (=> d!12253 (=> res!33863 e!40387)))

(declare-fun lt!25403 () Bool)

(assert (=> d!12253 (= res!33863 (not lt!25403))))

(declare-fun lt!25404 () Bool)

(assert (=> d!12253 (= lt!25403 lt!25404)))

(declare-fun lt!25401 () Unit!1613)

(declare-fun e!40386 () Unit!1613)

(assert (=> d!12253 (= lt!25401 e!40386)))

(declare-fun c!8088 () Bool)

(assert (=> d!12253 (= c!8088 lt!25404)))

(assert (=> d!12253 (= lt!25404 (containsKey!129 (toList!689 lt!24915) lt!24910))))

(assert (=> d!12253 (= (contains!682 lt!24915 lt!24910) lt!25403)))

(declare-fun b!61485 () Bool)

(declare-fun lt!25402 () Unit!1613)

(assert (=> b!61485 (= e!40386 lt!25402)))

(assert (=> b!61485 (= lt!25402 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 lt!24915) lt!24910))))

(assert (=> b!61485 (isDefined!78 (getValueByKey!126 (toList!689 lt!24915) lt!24910))))

(declare-fun b!61486 () Bool)

(declare-fun Unit!1650 () Unit!1613)

(assert (=> b!61486 (= e!40386 Unit!1650)))

(declare-fun b!61487 () Bool)

(assert (=> b!61487 (= e!40387 (isDefined!78 (getValueByKey!126 (toList!689 lt!24915) lt!24910)))))

(assert (= (and d!12253 c!8088) b!61485))

(assert (= (and d!12253 (not c!8088)) b!61486))

(assert (= (and d!12253 (not res!33863)) b!61487))

(declare-fun m!54431 () Bool)

(assert (=> d!12253 m!54431))

(declare-fun m!54433 () Bool)

(assert (=> b!61485 m!54433))

(assert (=> b!61485 m!53587))

(assert (=> b!61485 m!53587))

(declare-fun m!54435 () Bool)

(assert (=> b!61485 m!54435))

(assert (=> b!61487 m!53587))

(assert (=> b!61487 m!53587))

(assert (=> b!61487 m!54435))

(assert (=> d!11969 d!12253))

(declare-fun d!12255 () Bool)

(assert (=> d!12255 (= (apply!67 (+!81 lt!24915 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) lt!24910) (apply!67 lt!24915 lt!24910))))

(assert (=> d!12255 true))

(declare-fun _$34!767 () Unit!1613)

(assert (=> d!12255 (= (choose!326 lt!24915 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992))) lt!24910) _$34!767)))

(declare-fun bs!2672 () Bool)

(assert (= bs!2672 d!12255))

(assert (=> bs!2672 m!53231))

(assert (=> bs!2672 m!53231))

(assert (=> bs!2672 m!53257))

(assert (=> bs!2672 m!53233))

(assert (=> d!11969 d!12255))

(declare-fun d!12257 () Bool)

(assert (=> d!12257 (= (apply!67 lt!25210 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1085 (getValueByKey!126 (toList!689 lt!25210) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2673 () Bool)

(assert (= bs!2673 d!12257))

(declare-fun m!54437 () Bool)

(assert (=> bs!2673 m!54437))

(assert (=> bs!2673 m!54437))

(declare-fun m!54439 () Bool)

(assert (=> bs!2673 m!54439))

(assert (=> b!61129 d!12257))

(declare-fun d!12259 () Bool)

(declare-fun e!40389 () Bool)

(assert (=> d!12259 e!40389))

(declare-fun res!33864 () Bool)

(assert (=> d!12259 (=> res!33864 e!40389)))

(declare-fun lt!25407 () Bool)

(assert (=> d!12259 (= res!33864 (not lt!25407))))

(declare-fun lt!25408 () Bool)

(assert (=> d!12259 (= lt!25407 lt!25408)))

(declare-fun lt!25405 () Unit!1613)

(declare-fun e!40388 () Unit!1613)

(assert (=> d!12259 (= lt!25405 e!40388)))

(declare-fun c!8089 () Bool)

(assert (=> d!12259 (= c!8089 lt!25408)))

(assert (=> d!12259 (= lt!25408 (containsKey!129 (toList!689 lt!25059) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12259 (= (contains!682 lt!25059 #b1000000000000000000000000000000000000000000000000000000000000000) lt!25407)))

(declare-fun b!61489 () Bool)

(declare-fun lt!25406 () Unit!1613)

(assert (=> b!61489 (= e!40388 lt!25406)))

(assert (=> b!61489 (= lt!25406 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 lt!25059) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61489 (isDefined!78 (getValueByKey!126 (toList!689 lt!25059) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61490 () Bool)

(declare-fun Unit!1651 () Unit!1613)

(assert (=> b!61490 (= e!40388 Unit!1651)))

(declare-fun b!61491 () Bool)

(assert (=> b!61491 (= e!40389 (isDefined!78 (getValueByKey!126 (toList!689 lt!25059) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12259 c!8089) b!61489))

(assert (= (and d!12259 (not c!8089)) b!61490))

(assert (= (and d!12259 (not res!33864)) b!61491))

(declare-fun m!54441 () Bool)

(assert (=> d!12259 m!54441))

(declare-fun m!54443 () Bool)

(assert (=> b!61489 m!54443))

(assert (=> b!61489 m!54413))

(assert (=> b!61489 m!54413))

(declare-fun m!54445 () Bool)

(assert (=> b!61489 m!54445))

(assert (=> b!61491 m!54413))

(assert (=> b!61491 m!54413))

(assert (=> b!61491 m!54445))

(assert (=> bm!4657 d!12259))

(declare-fun b!61495 () Bool)

(declare-fun e!40391 () Option!132)

(assert (=> b!61495 (= e!40391 None!130)))

(declare-fun b!61493 () Bool)

(declare-fun e!40390 () Option!132)

(assert (=> b!61493 (= e!40390 e!40391)))

(declare-fun c!8091 () Bool)

(assert (=> b!61493 (= c!8091 (and ((_ is Cons!1422) (toList!689 lt!25167)) (not (= (_1!1022 (h!2004 (toList!689 lt!25167))) (_1!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))))

(declare-fun b!61492 () Bool)

(assert (=> b!61492 (= e!40390 (Some!131 (_2!1022 (h!2004 (toList!689 lt!25167)))))))

(declare-fun b!61494 () Bool)

(assert (=> b!61494 (= e!40391 (getValueByKey!126 (t!4792 (toList!689 lt!25167)) (_1!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun c!8090 () Bool)

(declare-fun d!12261 () Bool)

(assert (=> d!12261 (= c!8090 (and ((_ is Cons!1422) (toList!689 lt!25167)) (= (_1!1022 (h!2004 (toList!689 lt!25167))) (_1!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(assert (=> d!12261 (= (getValueByKey!126 (toList!689 lt!25167) (_1!1022 (tuple2!2023 lt!24904 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) e!40390)))

(assert (= (and d!12261 c!8090) b!61492))

(assert (= (and d!12261 (not c!8090)) b!61493))

(assert (= (and b!61493 c!8091) b!61494))

(assert (= (and b!61493 (not c!8091)) b!61495))

(declare-fun m!54447 () Bool)

(assert (=> b!61494 m!54447))

(assert (=> b!61044 d!12261))

(declare-fun d!12263 () Bool)

(assert (=> d!12263 (= (validKeyInArray!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) (and (not (= (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!61046 d!12263))

(declare-fun d!12265 () Bool)

(declare-fun res!33865 () Bool)

(declare-fun e!40392 () Bool)

(assert (=> d!12265 (=> res!33865 e!40392)))

(assert (=> d!12265 (= res!33865 (and ((_ is Cons!1422) (toList!689 lt!24917)) (= (_1!1022 (h!2004 (toList!689 lt!24917))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12265 (= (containsKey!129 (toList!689 lt!24917) #b1000000000000000000000000000000000000000000000000000000000000000) e!40392)))

(declare-fun b!61496 () Bool)

(declare-fun e!40393 () Bool)

(assert (=> b!61496 (= e!40392 e!40393)))

(declare-fun res!33866 () Bool)

(assert (=> b!61496 (=> (not res!33866) (not e!40393))))

(assert (=> b!61496 (= res!33866 (and (or (not ((_ is Cons!1422) (toList!689 lt!24917))) (bvsle (_1!1022 (h!2004 (toList!689 lt!24917))) #b1000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1422) (toList!689 lt!24917)) (bvslt (_1!1022 (h!2004 (toList!689 lt!24917))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!61497 () Bool)

(assert (=> b!61497 (= e!40393 (containsKey!129 (t!4792 (toList!689 lt!24917)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!12265 (not res!33865)) b!61496))

(assert (= (and b!61496 res!33866) b!61497))

(declare-fun m!54449 () Bool)

(assert (=> b!61497 m!54449))

(assert (=> d!11917 d!12265))

(declare-fun d!12267 () Bool)

(declare-fun e!40394 () Bool)

(assert (=> d!12267 e!40394))

(declare-fun res!33868 () Bool)

(assert (=> d!12267 (=> (not res!33868) (not e!40394))))

(declare-fun lt!25410 () ListLongMap!1347)

(assert (=> d!12267 (= res!33868 (contains!682 lt!25410 (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!25412 () List!1426)

(assert (=> d!12267 (= lt!25410 (ListLongMap!1348 lt!25412))))

(declare-fun lt!25411 () Unit!1613)

(declare-fun lt!25409 () Unit!1613)

(assert (=> d!12267 (= lt!25411 lt!25409)))

(assert (=> d!12267 (= (getValueByKey!126 lt!25412 (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!131 (_2!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12267 (= lt!25409 (lemmaContainsTupThenGetReturnValue!43 lt!25412 (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12267 (= lt!25412 (insertStrictlySorted!46 (toList!689 (getCurrentListMap!390 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16))) (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12267 (= (+!81 (getCurrentListMap!390 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!25410)))

(declare-fun b!61498 () Bool)

(declare-fun res!33867 () Bool)

(assert (=> b!61498 (=> (not res!33867) (not e!40394))))

(assert (=> b!61498 (= res!33867 (= (getValueByKey!126 (toList!689 lt!25410) (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!131 (_2!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!61499 () Bool)

(assert (=> b!61499 (= e!40394 (contains!685 (toList!689 lt!25410) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12267 res!33868) b!61498))

(assert (= (and b!61498 res!33867) b!61499))

(declare-fun m!54451 () Bool)

(assert (=> d!12267 m!54451))

(declare-fun m!54453 () Bool)

(assert (=> d!12267 m!54453))

(declare-fun m!54455 () Bool)

(assert (=> d!12267 m!54455))

(declare-fun m!54457 () Bool)

(assert (=> d!12267 m!54457))

(declare-fun m!54459 () Bool)

(assert (=> b!61498 m!54459))

(declare-fun m!54461 () Bool)

(assert (=> b!61499 m!54461))

(assert (=> d!11919 d!12267))

(declare-fun d!12269 () Bool)

(assert (=> d!12269 (= (arrayCountValidKeys!0 lt!25018 (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (bvadd (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lt!25415 () Unit!1613)

(declare-fun choose!2 (array!3729 (_ BitVec 32)) Unit!1613)

(assert (=> d!12269 (= lt!25415 (choose!2 lt!25018 (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842))))))

(declare-fun e!40397 () Bool)

(assert (=> d!12269 e!40397))

(declare-fun res!33873 () Bool)

(assert (=> d!12269 (=> (not res!33873) (not e!40397))))

(assert (=> d!12269 (= res!33873 (and (bvsge (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) #b00000000000000000000000000000000) (bvslt (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (size!2015 lt!25018))))))

(assert (=> d!12269 (= (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!25018 (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842))) lt!25415)))

(declare-fun b!61504 () Bool)

(declare-fun res!33874 () Bool)

(assert (=> b!61504 (=> (not res!33874) (not e!40397))))

(assert (=> b!61504 (= res!33874 (validKeyInArray!0 (select (arr!1784 lt!25018) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)))))))

(declare-fun b!61505 () Bool)

(assert (=> b!61505 (= e!40397 (bvslt (size!2015 lt!25018) #b01111111111111111111111111111111))))

(assert (= (and d!12269 res!33873) b!61504))

(assert (= (and b!61504 res!33874) b!61505))

(assert (=> d!12269 m!53335))

(declare-fun m!54463 () Bool)

(assert (=> d!12269 m!54463))

(declare-fun m!54465 () Bool)

(assert (=> b!61504 m!54465))

(assert (=> b!61504 m!54465))

(declare-fun m!54467 () Bool)

(assert (=> b!61504 m!54467))

(assert (=> d!11919 d!12269))

(declare-fun b!61506 () Bool)

(declare-fun res!33877 () Bool)

(declare-fun e!40401 () Bool)

(assert (=> b!61506 (=> (not res!33877) (not e!40401))))

(declare-fun e!40400 () Bool)

(assert (=> b!61506 (= res!33877 e!40400)))

(declare-fun res!33881 () Bool)

(assert (=> b!61506 (=> res!33881 e!40400)))

(declare-fun e!40405 () Bool)

(assert (=> b!61506 (= res!33881 (not e!40405))))

(declare-fun res!33875 () Bool)

(assert (=> b!61506 (=> (not res!33875) (not e!40405))))

(assert (=> b!61506 (= res!33875 (bvslt #b00000000000000000000000000000000 (size!2015 lt!25006)))))

(declare-fun b!61507 () Bool)

(declare-fun e!40406 () Bool)

(declare-fun call!4738 () Bool)

(assert (=> b!61507 (= e!40406 (not call!4738))))

(declare-fun bm!4730 () Bool)

(declare-fun lt!25432 () ListLongMap!1347)

(assert (=> bm!4730 (= call!4738 (contains!682 lt!25432 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61508 () Bool)

(declare-fun e!40408 () Unit!1613)

(declare-fun Unit!1652 () Unit!1613)

(assert (=> b!61508 (= e!40408 Unit!1652)))

(declare-fun b!61509 () Bool)

(declare-fun e!40398 () Bool)

(assert (=> b!61509 (= e!40406 e!40398)))

(declare-fun res!33880 () Bool)

(assert (=> b!61509 (= res!33880 call!4738)))

(assert (=> b!61509 (=> (not res!33880) (not e!40398))))

(declare-fun b!61510 () Bool)

(declare-fun e!40404 () Bool)

(assert (=> b!61510 (= e!40404 (validKeyInArray!0 (select (arr!1784 lt!25006) #b00000000000000000000000000000000)))))

(declare-fun b!61511 () Bool)

(declare-fun e!40409 () ListLongMap!1347)

(declare-fun call!4735 () ListLongMap!1347)

(assert (=> b!61511 (= e!40409 call!4735)))

(declare-fun bm!4731 () Bool)

(declare-fun call!4734 () ListLongMap!1347)

(declare-fun c!8094 () Bool)

(declare-fun c!8097 () Bool)

(declare-fun call!4739 () ListLongMap!1347)

(declare-fun call!4737 () ListLongMap!1347)

(assert (=> bm!4731 (= call!4739 (+!81 (ite c!8097 call!4734 (ite c!8094 call!4737 call!4735)) (ite (or c!8097 c!8094) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))))))

(declare-fun b!61513 () Bool)

(declare-fun call!4736 () ListLongMap!1347)

(assert (=> b!61513 (= e!40409 call!4736)))

(declare-fun b!61514 () Bool)

(assert (=> b!61514 (= e!40398 (= (apply!67 lt!25432 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1980 newMap!16)))))

(declare-fun b!61515 () Bool)

(declare-fun e!40407 () Bool)

(assert (=> b!61515 (= e!40400 e!40407)))

(declare-fun res!33878 () Bool)

(assert (=> b!61515 (=> (not res!33878) (not e!40407))))

(assert (=> b!61515 (= res!33878 (contains!682 lt!25432 (select (arr!1784 lt!25006) #b00000000000000000000000000000000)))))

(assert (=> b!61515 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 lt!25006)))))

(declare-fun b!61516 () Bool)

(assert (=> b!61516 (= e!40401 e!40406)))

(declare-fun c!8095 () Bool)

(assert (=> b!61516 (= c!8095 (not (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4732 () Bool)

(assert (=> bm!4732 (= call!4736 call!4739)))

(declare-fun b!61517 () Bool)

(declare-fun e!40403 () ListLongMap!1347)

(assert (=> b!61517 (= e!40403 call!4736)))

(declare-fun bm!4733 () Bool)

(declare-fun call!4733 () Bool)

(assert (=> bm!4733 (= call!4733 (contains!682 lt!25432 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61518 () Bool)

(declare-fun e!40399 () ListLongMap!1347)

(assert (=> b!61518 (= e!40399 e!40403)))

(assert (=> b!61518 (= c!8094 (and (not (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!61519 () Bool)

(declare-fun e!40402 () Bool)

(assert (=> b!61519 (= e!40402 (= (apply!67 lt!25432 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1980 newMap!16)))))

(declare-fun b!61520 () Bool)

(declare-fun e!40410 () Bool)

(assert (=> b!61520 (= e!40410 e!40402)))

(declare-fun res!33876 () Bool)

(assert (=> b!61520 (= res!33876 call!4733)))

(assert (=> b!61520 (=> (not res!33876) (not e!40402))))

(declare-fun bm!4734 () Bool)

(assert (=> bm!4734 (= call!4735 call!4737)))

(declare-fun b!61521 () Bool)

(assert (=> b!61521 (= e!40405 (validKeyInArray!0 (select (arr!1784 lt!25006) #b00000000000000000000000000000000)))))

(declare-fun b!61522 () Bool)

(assert (=> b!61522 (= e!40399 (+!81 call!4739 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))))))

(declare-fun bm!4735 () Bool)

(assert (=> bm!4735 (= call!4734 (getCurrentListMapNoExtraKeys!45 lt!25006 lt!25013 (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun bm!4736 () Bool)

(assert (=> bm!4736 (= call!4737 call!4734)))

(declare-fun b!61523 () Bool)

(declare-fun c!8096 () Bool)

(assert (=> b!61523 (= c!8096 (and (not (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!61523 (= e!40403 e!40409)))

(declare-fun b!61524 () Bool)

(assert (=> b!61524 (= e!40407 (= (apply!67 lt!25432 (select (arr!1784 lt!25006) #b00000000000000000000000000000000)) (get!1081 (select (arr!1785 lt!25013) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2066 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!61524 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2016 lt!25013)))))

(assert (=> b!61524 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 lt!25006)))))

(declare-fun d!12271 () Bool)

(assert (=> d!12271 e!40401))

(declare-fun res!33883 () Bool)

(assert (=> d!12271 (=> (not res!33883) (not e!40401))))

(assert (=> d!12271 (= res!33883 (or (bvsge #b00000000000000000000000000000000 (size!2015 lt!25006)) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 lt!25006)))))))

(declare-fun lt!25418 () ListLongMap!1347)

(assert (=> d!12271 (= lt!25432 lt!25418)))

(declare-fun lt!25434 () Unit!1613)

(assert (=> d!12271 (= lt!25434 e!40408)))

(declare-fun c!8093 () Bool)

(assert (=> d!12271 (= c!8093 e!40404)))

(declare-fun res!33879 () Bool)

(assert (=> d!12271 (=> (not res!33879) (not e!40404))))

(assert (=> d!12271 (= res!33879 (bvslt #b00000000000000000000000000000000 (size!2015 lt!25006)))))

(assert (=> d!12271 (= lt!25418 e!40399)))

(assert (=> d!12271 (= c!8097 (and (not (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12271 (validMask!0 (mask!5962 newMap!16))))

(assert (=> d!12271 (= (getCurrentListMap!390 lt!25006 lt!25013 (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)) lt!25432)))

(declare-fun b!61512 () Bool)

(assert (=> b!61512 (= e!40410 (not call!4733))))

(declare-fun b!61525 () Bool)

(declare-fun lt!25424 () Unit!1613)

(assert (=> b!61525 (= e!40408 lt!25424)))

(declare-fun lt!25426 () ListLongMap!1347)

(assert (=> b!61525 (= lt!25426 (getCurrentListMapNoExtraKeys!45 lt!25006 lt!25013 (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25429 () (_ BitVec 64))

(assert (=> b!61525 (= lt!25429 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25423 () (_ BitVec 64))

(assert (=> b!61525 (= lt!25423 (select (arr!1784 lt!25006) #b00000000000000000000000000000000))))

(declare-fun lt!25416 () Unit!1613)

(assert (=> b!61525 (= lt!25416 (addStillContains!43 lt!25426 lt!25429 (zeroValue!1980 newMap!16) lt!25423))))

(assert (=> b!61525 (contains!682 (+!81 lt!25426 (tuple2!2023 lt!25429 (zeroValue!1980 newMap!16))) lt!25423)))

(declare-fun lt!25435 () Unit!1613)

(assert (=> b!61525 (= lt!25435 lt!25416)))

(declare-fun lt!25427 () ListLongMap!1347)

(assert (=> b!61525 (= lt!25427 (getCurrentListMapNoExtraKeys!45 lt!25006 lt!25013 (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25417 () (_ BitVec 64))

(assert (=> b!61525 (= lt!25417 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25437 () (_ BitVec 64))

(assert (=> b!61525 (= lt!25437 (select (arr!1784 lt!25006) #b00000000000000000000000000000000))))

(declare-fun lt!25428 () Unit!1613)

(assert (=> b!61525 (= lt!25428 (addApplyDifferent!43 lt!25427 lt!25417 (minValue!1980 newMap!16) lt!25437))))

(assert (=> b!61525 (= (apply!67 (+!81 lt!25427 (tuple2!2023 lt!25417 (minValue!1980 newMap!16))) lt!25437) (apply!67 lt!25427 lt!25437))))

(declare-fun lt!25422 () Unit!1613)

(assert (=> b!61525 (= lt!25422 lt!25428)))

(declare-fun lt!25433 () ListLongMap!1347)

(assert (=> b!61525 (= lt!25433 (getCurrentListMapNoExtraKeys!45 lt!25006 lt!25013 (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25420 () (_ BitVec 64))

(assert (=> b!61525 (= lt!25420 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25421 () (_ BitVec 64))

(assert (=> b!61525 (= lt!25421 (select (arr!1784 lt!25006) #b00000000000000000000000000000000))))

(declare-fun lt!25436 () Unit!1613)

(assert (=> b!61525 (= lt!25436 (addApplyDifferent!43 lt!25433 lt!25420 (zeroValue!1980 newMap!16) lt!25421))))

(assert (=> b!61525 (= (apply!67 (+!81 lt!25433 (tuple2!2023 lt!25420 (zeroValue!1980 newMap!16))) lt!25421) (apply!67 lt!25433 lt!25421))))

(declare-fun lt!25431 () Unit!1613)

(assert (=> b!61525 (= lt!25431 lt!25436)))

(declare-fun lt!25430 () ListLongMap!1347)

(assert (=> b!61525 (= lt!25430 (getCurrentListMapNoExtraKeys!45 lt!25006 lt!25013 (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25419 () (_ BitVec 64))

(assert (=> b!61525 (= lt!25419 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25425 () (_ BitVec 64))

(assert (=> b!61525 (= lt!25425 (select (arr!1784 lt!25006) #b00000000000000000000000000000000))))

(assert (=> b!61525 (= lt!25424 (addApplyDifferent!43 lt!25430 lt!25419 (minValue!1980 newMap!16) lt!25425))))

(assert (=> b!61525 (= (apply!67 (+!81 lt!25430 (tuple2!2023 lt!25419 (minValue!1980 newMap!16))) lt!25425) (apply!67 lt!25430 lt!25425))))

(declare-fun b!61526 () Bool)

(declare-fun res!33882 () Bool)

(assert (=> b!61526 (=> (not res!33882) (not e!40401))))

(assert (=> b!61526 (= res!33882 e!40410)))

(declare-fun c!8092 () Bool)

(assert (=> b!61526 (= c!8092 (not (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (= (and d!12271 c!8097) b!61522))

(assert (= (and d!12271 (not c!8097)) b!61518))

(assert (= (and b!61518 c!8094) b!61517))

(assert (= (and b!61518 (not c!8094)) b!61523))

(assert (= (and b!61523 c!8096) b!61513))

(assert (= (and b!61523 (not c!8096)) b!61511))

(assert (= (or b!61513 b!61511) bm!4734))

(assert (= (or b!61517 bm!4734) bm!4736))

(assert (= (or b!61517 b!61513) bm!4732))

(assert (= (or b!61522 bm!4736) bm!4735))

(assert (= (or b!61522 bm!4732) bm!4731))

(assert (= (and d!12271 res!33879) b!61510))

(assert (= (and d!12271 c!8093) b!61525))

(assert (= (and d!12271 (not c!8093)) b!61508))

(assert (= (and d!12271 res!33883) b!61506))

(assert (= (and b!61506 res!33875) b!61521))

(assert (= (and b!61506 (not res!33881)) b!61515))

(assert (= (and b!61515 res!33878) b!61524))

(assert (= (and b!61506 res!33877) b!61526))

(assert (= (and b!61526 c!8092) b!61520))

(assert (= (and b!61526 (not c!8092)) b!61512))

(assert (= (and b!61520 res!33876) b!61519))

(assert (= (or b!61520 b!61512) bm!4733))

(assert (= (and b!61526 res!33882) b!61516))

(assert (= (and b!61516 c!8095) b!61509))

(assert (= (and b!61516 (not c!8095)) b!61507))

(assert (= (and b!61509 res!33880) b!61514))

(assert (= (or b!61509 b!61507) bm!4730))

(declare-fun b_lambda!2721 () Bool)

(assert (=> (not b_lambda!2721) (not b!61524)))

(assert (=> b!61524 t!4804))

(declare-fun b_and!3745 () Bool)

(assert (= b_and!3741 (and (=> t!4804 result!2427) b_and!3745)))

(assert (=> b!61524 t!4806))

(declare-fun b_and!3747 () Bool)

(assert (= b_and!3743 (and (=> t!4806 result!2429) b_and!3747)))

(declare-fun m!54469 () Bool)

(assert (=> b!61510 m!54469))

(assert (=> b!61510 m!54469))

(declare-fun m!54471 () Bool)

(assert (=> b!61510 m!54471))

(assert (=> b!61515 m!54469))

(assert (=> b!61515 m!54469))

(declare-fun m!54473 () Bool)

(assert (=> b!61515 m!54473))

(declare-fun m!54475 () Bool)

(assert (=> bm!4730 m!54475))

(declare-fun m!54477 () Bool)

(assert (=> bm!4733 m!54477))

(declare-fun m!54479 () Bool)

(assert (=> b!61524 m!54479))

(assert (=> b!61524 m!53389))

(declare-fun m!54481 () Bool)

(assert (=> b!61524 m!54481))

(assert (=> b!61524 m!54469))

(assert (=> b!61524 m!53389))

(assert (=> b!61524 m!54469))

(declare-fun m!54483 () Bool)

(assert (=> b!61524 m!54483))

(assert (=> b!61524 m!54479))

(declare-fun m!54485 () Bool)

(assert (=> b!61519 m!54485))

(declare-fun m!54487 () Bool)

(assert (=> b!61514 m!54487))

(assert (=> d!12271 m!53287))

(declare-fun m!54489 () Bool)

(assert (=> bm!4731 m!54489))

(declare-fun m!54491 () Bool)

(assert (=> b!61522 m!54491))

(assert (=> b!61521 m!54469))

(assert (=> b!61521 m!54469))

(assert (=> b!61521 m!54471))

(declare-fun m!54493 () Bool)

(assert (=> bm!4735 m!54493))

(declare-fun m!54495 () Bool)

(assert (=> b!61525 m!54495))

(declare-fun m!54497 () Bool)

(assert (=> b!61525 m!54497))

(declare-fun m!54499 () Bool)

(assert (=> b!61525 m!54499))

(assert (=> b!61525 m!54469))

(declare-fun m!54501 () Bool)

(assert (=> b!61525 m!54501))

(declare-fun m!54503 () Bool)

(assert (=> b!61525 m!54503))

(declare-fun m!54505 () Bool)

(assert (=> b!61525 m!54505))

(declare-fun m!54507 () Bool)

(assert (=> b!61525 m!54507))

(declare-fun m!54509 () Bool)

(assert (=> b!61525 m!54509))

(declare-fun m!54511 () Bool)

(assert (=> b!61525 m!54511))

(declare-fun m!54513 () Bool)

(assert (=> b!61525 m!54513))

(assert (=> b!61525 m!54511))

(declare-fun m!54515 () Bool)

(assert (=> b!61525 m!54515))

(declare-fun m!54517 () Bool)

(assert (=> b!61525 m!54517))

(assert (=> b!61525 m!54517))

(declare-fun m!54519 () Bool)

(assert (=> b!61525 m!54519))

(declare-fun m!54521 () Bool)

(assert (=> b!61525 m!54521))

(assert (=> b!61525 m!54497))

(declare-fun m!54523 () Bool)

(assert (=> b!61525 m!54523))

(assert (=> b!61525 m!54507))

(assert (=> b!61525 m!54493))

(assert (=> d!11919 d!12271))

(declare-fun d!12273 () Bool)

(declare-fun e!40413 () Bool)

(assert (=> d!12273 e!40413))

(declare-fun res!33886 () Bool)

(assert (=> d!12273 (=> (not res!33886) (not e!40413))))

(assert (=> d!12273 (= res!33886 (and (bvsge (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) #b00000000000000000000000000000000) (bvslt (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (size!2015 (_keys!3694 newMap!16)))))))

(declare-fun lt!25440 () Unit!1613)

(declare-fun choose!41 (array!3729 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1427) Unit!1613)

(assert (=> d!12273 (= lt!25440 (choose!41 (_keys!3694 newMap!16) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) lt!25030 lt!25009))))

(assert (=> d!12273 (bvslt (size!2015 (_keys!3694 newMap!16)) #b01111111111111111111111111111111)))

(assert (=> d!12273 (= (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!3694 newMap!16) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) lt!25030 lt!25009) lt!25440)))

(declare-fun b!61529 () Bool)

(assert (=> b!61529 (= e!40413 (arrayNoDuplicates!0 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16))) lt!25030 lt!25009))))

(assert (= (and d!12273 res!33886) b!61529))

(assert (=> d!12273 m!52989))

(declare-fun m!54525 () Bool)

(assert (=> d!12273 m!54525))

(assert (=> b!61529 m!53343))

(assert (=> b!61529 m!53341))

(assert (=> d!11919 d!12273))

(declare-fun b!61530 () Bool)

(declare-fun e!40415 () (_ BitVec 32))

(declare-fun call!4740 () (_ BitVec 32))

(assert (=> b!61530 (= e!40415 call!4740)))

(declare-fun lt!25441 () (_ BitVec 32))

(declare-fun d!12275 () Bool)

(assert (=> d!12275 (and (bvsge lt!25441 #b00000000000000000000000000000000) (bvsle lt!25441 (bvsub (size!2015 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun e!40414 () (_ BitVec 32))

(assert (=> d!12275 (= lt!25441 e!40414)))

(declare-fun c!8099 () Bool)

(assert (=> d!12275 (= c!8099 (bvsge #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(assert (=> d!12275 (and (bvsle #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2015 (_keys!3694 newMap!16)) (size!2015 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16))))))))

(assert (=> d!12275 (= (arrayCountValidKeys!0 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16))) #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))) lt!25441)))

(declare-fun bm!4737 () Bool)

(assert (=> bm!4737 (= call!4740 (arrayCountValidKeys!0 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2015 (_keys!3694 newMap!16))))))

(declare-fun b!61531 () Bool)

(assert (=> b!61531 (= e!40414 e!40415)))

(declare-fun c!8098 () Bool)

(assert (=> b!61531 (= c!8098 (validKeyInArray!0 (select (arr!1784 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!61532 () Bool)

(assert (=> b!61532 (= e!40415 (bvadd #b00000000000000000000000000000001 call!4740))))

(declare-fun b!61533 () Bool)

(assert (=> b!61533 (= e!40414 #b00000000000000000000000000000000)))

(assert (= (and d!12275 c!8099) b!61533))

(assert (= (and d!12275 (not c!8099)) b!61531))

(assert (= (and b!61531 c!8098) b!61532))

(assert (= (and b!61531 (not c!8098)) b!61530))

(assert (= (or b!61532 b!61530) bm!4737))

(declare-fun m!54527 () Bool)

(assert (=> bm!4737 m!54527))

(declare-fun m!54529 () Bool)

(assert (=> b!61531 m!54529))

(assert (=> b!61531 m!54529))

(declare-fun m!54531 () Bool)

(assert (=> b!61531 m!54531))

(assert (=> d!11919 d!12275))

(declare-fun b!61534 () Bool)

(declare-fun e!40418 () Bool)

(declare-fun e!40419 () Bool)

(assert (=> b!61534 (= e!40418 e!40419)))

(declare-fun c!8100 () Bool)

(assert (=> b!61534 (= c!8100 (validKeyInArray!0 (select (arr!1784 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16)))) lt!25030)))))

(declare-fun b!61535 () Bool)

(declare-fun call!4741 () Bool)

(assert (=> b!61535 (= e!40419 call!4741)))

(declare-fun bm!4738 () Bool)

(assert (=> bm!4738 (= call!4741 (arrayNoDuplicates!0 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16))) (bvadd lt!25030 #b00000000000000000000000000000001) (ite c!8100 (Cons!1423 (select (arr!1784 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16)))) lt!25030) lt!25009) lt!25009)))))

(declare-fun b!61536 () Bool)

(declare-fun e!40417 () Bool)

(assert (=> b!61536 (= e!40417 e!40418)))

(declare-fun res!33887 () Bool)

(assert (=> b!61536 (=> (not res!33887) (not e!40418))))

(declare-fun e!40416 () Bool)

(assert (=> b!61536 (= res!33887 (not e!40416))))

(declare-fun res!33889 () Bool)

(assert (=> b!61536 (=> (not res!33889) (not e!40416))))

(assert (=> b!61536 (= res!33889 (validKeyInArray!0 (select (arr!1784 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16)))) lt!25030)))))

(declare-fun d!12277 () Bool)

(declare-fun res!33888 () Bool)

(assert (=> d!12277 (=> res!33888 e!40417)))

(assert (=> d!12277 (= res!33888 (bvsge lt!25030 (size!2015 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16))))))))

(assert (=> d!12277 (= (arrayNoDuplicates!0 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16))) lt!25030 lt!25009) e!40417)))

(declare-fun b!61537 () Bool)

(assert (=> b!61537 (= e!40419 call!4741)))

(declare-fun b!61538 () Bool)

(assert (=> b!61538 (= e!40416 (contains!684 lt!25009 (select (arr!1784 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16)))) lt!25030)))))

(assert (= (and d!12277 (not res!33888)) b!61536))

(assert (= (and b!61536 res!33889) b!61538))

(assert (= (and b!61536 res!33887) b!61534))

(assert (= (and b!61534 c!8100) b!61535))

(assert (= (and b!61534 (not c!8100)) b!61537))

(assert (= (or b!61535 b!61537) bm!4738))

(declare-fun m!54533 () Bool)

(assert (=> b!61534 m!54533))

(assert (=> b!61534 m!54533))

(declare-fun m!54535 () Bool)

(assert (=> b!61534 m!54535))

(assert (=> bm!4738 m!54533))

(declare-fun m!54537 () Bool)

(assert (=> bm!4738 m!54537))

(assert (=> b!61536 m!54533))

(assert (=> b!61536 m!54533))

(assert (=> b!61536 m!54535))

(assert (=> b!61538 m!54533))

(assert (=> b!61538 m!54533))

(declare-fun m!54539 () Bool)

(assert (=> b!61538 m!54539))

(assert (=> d!11919 d!12277))

(declare-fun b!61539 () Bool)

(declare-fun e!40421 () (_ BitVec 32))

(declare-fun call!4742 () (_ BitVec 32))

(assert (=> b!61539 (= e!40421 call!4742)))

(declare-fun d!12279 () Bool)

(declare-fun lt!25442 () (_ BitVec 32))

(assert (=> d!12279 (and (bvsge lt!25442 #b00000000000000000000000000000000) (bvsle lt!25442 (bvsub (size!2015 lt!25018) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)))))))

(declare-fun e!40420 () (_ BitVec 32))

(assert (=> d!12279 (= lt!25442 e!40420)))

(declare-fun c!8102 () Bool)

(assert (=> d!12279 (= c!8102 (bvsge (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (bvadd (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) #b00000000000000000000000000000001)))))

(assert (=> d!12279 (and (bvsle (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (bvadd (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) #b00000000000000000000000000000001)) (bvsge (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) #b00000000000000000000000000000000) (bvsle (bvadd (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) #b00000000000000000000000000000001) (size!2015 lt!25018)))))

(assert (=> d!12279 (= (arrayCountValidKeys!0 lt!25018 (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (bvadd (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) #b00000000000000000000000000000001)) lt!25442)))

(declare-fun bm!4739 () Bool)

(assert (=> bm!4739 (= call!4742 (arrayCountValidKeys!0 lt!25018 (bvadd (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) #b00000000000000000000000000000001) (bvadd (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) #b00000000000000000000000000000001)))))

(declare-fun b!61540 () Bool)

(assert (=> b!61540 (= e!40420 e!40421)))

(declare-fun c!8101 () Bool)

(assert (=> b!61540 (= c!8101 (validKeyInArray!0 (select (arr!1784 lt!25018) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)))))))

(declare-fun b!61541 () Bool)

(assert (=> b!61541 (= e!40421 (bvadd #b00000000000000000000000000000001 call!4742))))

(declare-fun b!61542 () Bool)

(assert (=> b!61542 (= e!40420 #b00000000000000000000000000000000)))

(assert (= (and d!12279 c!8102) b!61542))

(assert (= (and d!12279 (not c!8102)) b!61540))

(assert (= (and b!61540 c!8101) b!61541))

(assert (= (and b!61540 (not c!8101)) b!61539))

(assert (= (or b!61541 b!61539) bm!4739))

(declare-fun m!54541 () Bool)

(assert (=> bm!4739 m!54541))

(assert (=> b!61540 m!54465))

(assert (=> b!61540 m!54465))

(assert (=> b!61540 m!54467))

(assert (=> d!11919 d!12279))

(assert (=> d!11919 d!12027))

(assert (=> d!11919 d!11935))

(declare-fun b!61543 () Bool)

(declare-fun e!40424 () Bool)

(declare-fun e!40423 () Bool)

(assert (=> b!61543 (= e!40424 e!40423)))

(declare-fun lt!25444 () (_ BitVec 64))

(assert (=> b!61543 (= lt!25444 (select (arr!1784 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!25443 () Unit!1613)

(assert (=> b!61543 (= lt!25443 (lemmaArrayContainsFromImpliesContainsFromZero!0 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16))) lt!25444 #b00000000000000000000000000000000))))

(assert (=> b!61543 (arrayContainsKey!0 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16))) lt!25444 #b00000000000000000000000000000000)))

(declare-fun lt!25445 () Unit!1613)

(assert (=> b!61543 (= lt!25445 lt!25443)))

(declare-fun res!33890 () Bool)

(assert (=> b!61543 (= res!33890 (= (seekEntryOrOpen!0 (select (arr!1784 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16)))) #b00000000000000000000000000000000) (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16))) (mask!5962 newMap!16)) (Found!222 #b00000000000000000000000000000000)))))

(assert (=> b!61543 (=> (not res!33890) (not e!40423))))

(declare-fun b!61544 () Bool)

(declare-fun e!40422 () Bool)

(assert (=> b!61544 (= e!40422 e!40424)))

(declare-fun c!8103 () Bool)

(assert (=> b!61544 (= c!8103 (validKeyInArray!0 (select (arr!1784 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun d!12281 () Bool)

(declare-fun res!33891 () Bool)

(assert (=> d!12281 (=> res!33891 e!40422)))

(assert (=> d!12281 (= res!33891 (bvsge #b00000000000000000000000000000000 (size!2015 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16))))))))

(assert (=> d!12281 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16))) (mask!5962 newMap!16)) e!40422)))

(declare-fun bm!4740 () Bool)

(declare-fun call!4743 () Bool)

(assert (=> bm!4740 (= call!4743 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16))) (mask!5962 newMap!16)))))

(declare-fun b!61545 () Bool)

(assert (=> b!61545 (= e!40423 call!4743)))

(declare-fun b!61546 () Bool)

(assert (=> b!61546 (= e!40424 call!4743)))

(assert (= (and d!12281 (not res!33891)) b!61544))

(assert (= (and b!61544 c!8103) b!61543))

(assert (= (and b!61544 (not c!8103)) b!61546))

(assert (= (and b!61543 res!33890) b!61545))

(assert (= (or b!61545 b!61546) bm!4740))

(assert (=> b!61543 m!54529))

(declare-fun m!54543 () Bool)

(assert (=> b!61543 m!54543))

(declare-fun m!54545 () Bool)

(assert (=> b!61543 m!54545))

(assert (=> b!61543 m!54529))

(declare-fun m!54547 () Bool)

(assert (=> b!61543 m!54547))

(assert (=> b!61544 m!54529))

(assert (=> b!61544 m!54529))

(assert (=> b!61544 m!54531))

(declare-fun m!54549 () Bool)

(assert (=> bm!4740 m!54549))

(assert (=> d!11919 d!12281))

(declare-fun d!12283 () Bool)

(assert (=> d!12283 (arrayContainsKey!0 lt!25012 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(declare-fun lt!25446 () Unit!1613)

(assert (=> d!12283 (= lt!25446 (choose!13 lt!25012 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842))))))

(assert (=> d!12283 (bvsge (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) #b00000000000000000000000000000000)))

(assert (=> d!12283 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!25012 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842))) lt!25446)))

(declare-fun bs!2674 () Bool)

(assert (= bs!2674 d!12283))

(assert (=> bs!2674 m!52989))

(assert (=> bs!2674 m!53313))

(assert (=> bs!2674 m!52989))

(declare-fun m!54551 () Bool)

(assert (=> bs!2674 m!54551))

(assert (=> d!11919 d!12283))

(declare-fun b!61557 () Bool)

(declare-fun e!40430 () Bool)

(assert (=> b!61557 (= e!40430 (bvslt (size!2015 (_keys!3694 newMap!16)) #b01111111111111111111111111111111))))

(declare-fun b!61556 () Bool)

(declare-fun res!33900 () Bool)

(assert (=> b!61556 (=> (not res!33900) (not e!40430))))

(assert (=> b!61556 (= res!33900 (validKeyInArray!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(declare-fun b!61555 () Bool)

(declare-fun res!33902 () Bool)

(assert (=> b!61555 (=> (not res!33902) (not e!40430))))

(assert (=> b!61555 (= res!33902 (not (validKeyInArray!0 (select (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842))))))))

(declare-fun e!40429 () Bool)

(declare-fun b!61558 () Bool)

(assert (=> b!61558 (= e!40429 (= (arrayCountValidKeys!0 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16))) #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!3694 newMap!16) #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))) #b00000000000000000000000000000001)))))

(declare-fun d!12285 () Bool)

(assert (=> d!12285 e!40429))

(declare-fun res!33901 () Bool)

(assert (=> d!12285 (=> (not res!33901) (not e!40429))))

(assert (=> d!12285 (= res!33901 (and (bvsge (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) #b00000000000000000000000000000000) (bvslt (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (size!2015 (_keys!3694 newMap!16)))))))

(declare-fun lt!25449 () Unit!1613)

(declare-fun choose!1 (array!3729 (_ BitVec 32) (_ BitVec 64)) Unit!1613)

(assert (=> d!12285 (= lt!25449 (choose!1 (_keys!3694 newMap!16) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(assert (=> d!12285 e!40430))

(declare-fun res!33903 () Bool)

(assert (=> d!12285 (=> (not res!33903) (not e!40430))))

(assert (=> d!12285 (= res!33903 (and (bvsge (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) #b00000000000000000000000000000000) (bvslt (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (size!2015 (_keys!3694 newMap!16)))))))

(assert (=> d!12285 (= (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!3694 newMap!16) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) lt!25449)))

(assert (= (and d!12285 res!33903) b!61555))

(assert (= (and b!61555 res!33902) b!61556))

(assert (= (and b!61556 res!33900) b!61557))

(assert (= (and d!12285 res!33901) b!61558))

(assert (=> b!61556 m!52989))

(assert (=> b!61556 m!53121))

(declare-fun m!54553 () Bool)

(assert (=> b!61555 m!54553))

(assert (=> b!61555 m!54553))

(declare-fun m!54555 () Bool)

(assert (=> b!61555 m!54555))

(assert (=> b!61558 m!53343))

(assert (=> b!61558 m!53319))

(assert (=> b!61558 m!53129))

(assert (=> d!12285 m!52989))

(declare-fun m!54557 () Bool)

(assert (=> d!12285 m!54557))

(assert (=> d!11919 d!12285))

(declare-fun d!12287 () Bool)

(declare-fun e!40432 () Bool)

(assert (=> d!12287 e!40432))

(declare-fun res!33904 () Bool)

(assert (=> d!12287 (=> res!33904 e!40432)))

(declare-fun lt!25452 () Bool)

(assert (=> d!12287 (= res!33904 (not lt!25452))))

(declare-fun lt!25453 () Bool)

(assert (=> d!12287 (= lt!25452 lt!25453)))

(declare-fun lt!25450 () Unit!1613)

(declare-fun e!40431 () Unit!1613)

(assert (=> d!12287 (= lt!25450 e!40431)))

(declare-fun c!8104 () Bool)

(assert (=> d!12287 (= c!8104 lt!25453)))

(assert (=> d!12287 (= lt!25453 (containsKey!129 (toList!689 (getCurrentListMap!390 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(assert (=> d!12287 (= (contains!682 (getCurrentListMap!390 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) lt!25452)))

(declare-fun b!61559 () Bool)

(declare-fun lt!25451 () Unit!1613)

(assert (=> b!61559 (= e!40431 lt!25451)))

(assert (=> b!61559 (= lt!25451 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 (getCurrentListMap!390 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(assert (=> b!61559 (isDefined!78 (getValueByKey!126 (toList!689 (getCurrentListMap!390 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(declare-fun b!61560 () Bool)

(declare-fun Unit!1653 () Unit!1613)

(assert (=> b!61560 (= e!40431 Unit!1653)))

(declare-fun b!61561 () Bool)

(assert (=> b!61561 (= e!40432 (isDefined!78 (getValueByKey!126 (toList!689 (getCurrentListMap!390 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355))))))

(assert (= (and d!12287 c!8104) b!61559))

(assert (= (and d!12287 (not c!8104)) b!61560))

(assert (= (and d!12287 (not res!33904)) b!61561))

(assert (=> d!12287 m!52989))

(declare-fun m!54559 () Bool)

(assert (=> d!12287 m!54559))

(assert (=> b!61559 m!52989))

(declare-fun m!54561 () Bool)

(assert (=> b!61559 m!54561))

(assert (=> b!61559 m!52989))

(declare-fun m!54563 () Bool)

(assert (=> b!61559 m!54563))

(assert (=> b!61559 m!54563))

(declare-fun m!54565 () Bool)

(assert (=> b!61559 m!54565))

(assert (=> b!61561 m!52989))

(assert (=> b!61561 m!54563))

(assert (=> b!61561 m!54563))

(assert (=> b!61561 m!54565))

(assert (=> d!11919 d!12287))

(declare-fun d!12289 () Bool)

(declare-fun res!33905 () Bool)

(declare-fun e!40433 () Bool)

(assert (=> d!12289 (=> res!33905 e!40433)))

(assert (=> d!12289 (= res!33905 (= (select (arr!1784 lt!25012) #b00000000000000000000000000000000) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(assert (=> d!12289 (= (arrayContainsKey!0 lt!25012 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) #b00000000000000000000000000000000) e!40433)))

(declare-fun b!61562 () Bool)

(declare-fun e!40434 () Bool)

(assert (=> b!61562 (= e!40433 e!40434)))

(declare-fun res!33906 () Bool)

(assert (=> b!61562 (=> (not res!33906) (not e!40434))))

(assert (=> b!61562 (= res!33906 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2015 lt!25012)))))

(declare-fun b!61563 () Bool)

(assert (=> b!61563 (= e!40434 (arrayContainsKey!0 lt!25012 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!12289 (not res!33905)) b!61562))

(assert (= (and b!61562 res!33906) b!61563))

(declare-fun m!54567 () Bool)

(assert (=> d!12289 m!54567))

(assert (=> b!61563 m!52989))

(declare-fun m!54569 () Bool)

(assert (=> b!61563 m!54569))

(assert (=> d!11919 d!12289))

(declare-fun b!61564 () Bool)

(declare-fun res!33909 () Bool)

(declare-fun e!40438 () Bool)

(assert (=> b!61564 (=> (not res!33909) (not e!40438))))

(declare-fun e!40437 () Bool)

(assert (=> b!61564 (= res!33909 e!40437)))

(declare-fun res!33913 () Bool)

(assert (=> b!61564 (=> res!33913 e!40437)))

(declare-fun e!40442 () Bool)

(assert (=> b!61564 (= res!33913 (not e!40442))))

(declare-fun res!33907 () Bool)

(assert (=> b!61564 (=> (not res!33907) (not e!40442))))

(assert (=> b!61564 (= res!33907 (bvslt #b00000000000000000000000000000000 (size!2015 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16))))))))

(declare-fun b!61565 () Bool)

(declare-fun e!40443 () Bool)

(declare-fun call!4749 () Bool)

(assert (=> b!61565 (= e!40443 (not call!4749))))

(declare-fun bm!4741 () Bool)

(declare-fun lt!25470 () ListLongMap!1347)

(assert (=> bm!4741 (= call!4749 (contains!682 lt!25470 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61566 () Bool)

(declare-fun e!40445 () Unit!1613)

(declare-fun Unit!1654 () Unit!1613)

(assert (=> b!61566 (= e!40445 Unit!1654)))

(declare-fun b!61567 () Bool)

(declare-fun e!40435 () Bool)

(assert (=> b!61567 (= e!40443 e!40435)))

(declare-fun res!33912 () Bool)

(assert (=> b!61567 (= res!33912 call!4749)))

(assert (=> b!61567 (=> (not res!33912) (not e!40435))))

(declare-fun b!61568 () Bool)

(declare-fun e!40441 () Bool)

(assert (=> b!61568 (= e!40441 (validKeyInArray!0 (select (arr!1784 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!61569 () Bool)

(declare-fun e!40446 () ListLongMap!1347)

(declare-fun call!4746 () ListLongMap!1347)

(assert (=> b!61569 (= e!40446 call!4746)))

(declare-fun c!8110 () Bool)

(declare-fun c!8107 () Bool)

(declare-fun call!4745 () ListLongMap!1347)

(declare-fun call!4748 () ListLongMap!1347)

(declare-fun call!4750 () ListLongMap!1347)

(declare-fun bm!4742 () Bool)

(assert (=> bm!4742 (= call!4750 (+!81 (ite c!8110 call!4745 (ite c!8107 call!4748 call!4746)) (ite (or c!8110 c!8107) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))))))

(declare-fun b!61571 () Bool)

(declare-fun call!4747 () ListLongMap!1347)

(assert (=> b!61571 (= e!40446 call!4747)))

(declare-fun b!61572 () Bool)

(assert (=> b!61572 (= e!40435 (= (apply!67 lt!25470 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1980 newMap!16)))))

(declare-fun b!61573 () Bool)

(declare-fun e!40444 () Bool)

(assert (=> b!61573 (= e!40437 e!40444)))

(declare-fun res!33910 () Bool)

(assert (=> b!61573 (=> (not res!33910) (not e!40444))))

(assert (=> b!61573 (= res!33910 (contains!682 lt!25470 (select (arr!1784 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> b!61573 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16))))))))

(declare-fun b!61574 () Bool)

(assert (=> b!61574 (= e!40438 e!40443)))

(declare-fun c!8108 () Bool)

(assert (=> b!61574 (= c!8108 (not (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4743 () Bool)

(assert (=> bm!4743 (= call!4747 call!4750)))

(declare-fun b!61575 () Bool)

(declare-fun e!40440 () ListLongMap!1347)

(assert (=> b!61575 (= e!40440 call!4747)))

(declare-fun bm!4744 () Bool)

(declare-fun call!4744 () Bool)

(assert (=> bm!4744 (= call!4744 (contains!682 lt!25470 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61576 () Bool)

(declare-fun e!40436 () ListLongMap!1347)

(assert (=> b!61576 (= e!40436 e!40440)))

(assert (=> b!61576 (= c!8107 (and (not (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!61577 () Bool)

(declare-fun e!40439 () Bool)

(assert (=> b!61577 (= e!40439 (= (apply!67 lt!25470 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1980 newMap!16)))))

(declare-fun b!61578 () Bool)

(declare-fun e!40447 () Bool)

(assert (=> b!61578 (= e!40447 e!40439)))

(declare-fun res!33908 () Bool)

(assert (=> b!61578 (= res!33908 call!4744)))

(assert (=> b!61578 (=> (not res!33908) (not e!40439))))

(declare-fun bm!4745 () Bool)

(assert (=> bm!4745 (= call!4746 call!4748)))

(declare-fun b!61579 () Bool)

(assert (=> b!61579 (= e!40442 (validKeyInArray!0 (select (arr!1784 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!61580 () Bool)

(assert (=> b!61580 (= e!40436 (+!81 call!4750 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))))))

(declare-fun bm!4746 () Bool)

(assert (=> bm!4746 (= call!4745 (getCurrentListMapNoExtraKeys!45 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16))) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16))) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun bm!4747 () Bool)

(assert (=> bm!4747 (= call!4748 call!4745)))

(declare-fun b!61581 () Bool)

(declare-fun c!8109 () Bool)

(assert (=> b!61581 (= c!8109 (and (not (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!61581 (= e!40440 e!40446)))

(declare-fun b!61582 () Bool)

(assert (=> b!61582 (= e!40444 (= (apply!67 lt!25470 (select (arr!1784 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16)))) #b00000000000000000000000000000000)) (get!1081 (select (arr!1785 (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2066 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!61582 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2016 (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16))))))))

(assert (=> b!61582 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16))))))))

(declare-fun d!12291 () Bool)

(assert (=> d!12291 e!40438))

(declare-fun res!33915 () Bool)

(assert (=> d!12291 (=> (not res!33915) (not e!40438))))

(assert (=> d!12291 (= res!33915 (or (bvsge #b00000000000000000000000000000000 (size!2015 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16))))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16))))))))))

(declare-fun lt!25456 () ListLongMap!1347)

(assert (=> d!12291 (= lt!25470 lt!25456)))

(declare-fun lt!25472 () Unit!1613)

(assert (=> d!12291 (= lt!25472 e!40445)))

(declare-fun c!8106 () Bool)

(assert (=> d!12291 (= c!8106 e!40441)))

(declare-fun res!33911 () Bool)

(assert (=> d!12291 (=> (not res!33911) (not e!40441))))

(assert (=> d!12291 (= res!33911 (bvslt #b00000000000000000000000000000000 (size!2015 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16))))))))

(assert (=> d!12291 (= lt!25456 e!40436)))

(assert (=> d!12291 (= c!8110 (and (not (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12291 (validMask!0 (mask!5962 newMap!16))))

(assert (=> d!12291 (= (getCurrentListMap!390 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16))) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16))) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)) lt!25470)))

(declare-fun b!61570 () Bool)

(assert (=> b!61570 (= e!40447 (not call!4744))))

(declare-fun b!61583 () Bool)

(declare-fun lt!25462 () Unit!1613)

(assert (=> b!61583 (= e!40445 lt!25462)))

(declare-fun lt!25464 () ListLongMap!1347)

(assert (=> b!61583 (= lt!25464 (getCurrentListMapNoExtraKeys!45 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16))) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16))) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25467 () (_ BitVec 64))

(assert (=> b!61583 (= lt!25467 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25461 () (_ BitVec 64))

(assert (=> b!61583 (= lt!25461 (select (arr!1784 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!25454 () Unit!1613)

(assert (=> b!61583 (= lt!25454 (addStillContains!43 lt!25464 lt!25467 (zeroValue!1980 newMap!16) lt!25461))))

(assert (=> b!61583 (contains!682 (+!81 lt!25464 (tuple2!2023 lt!25467 (zeroValue!1980 newMap!16))) lt!25461)))

(declare-fun lt!25473 () Unit!1613)

(assert (=> b!61583 (= lt!25473 lt!25454)))

(declare-fun lt!25465 () ListLongMap!1347)

(assert (=> b!61583 (= lt!25465 (getCurrentListMapNoExtraKeys!45 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16))) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16))) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25455 () (_ BitVec 64))

(assert (=> b!61583 (= lt!25455 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25475 () (_ BitVec 64))

(assert (=> b!61583 (= lt!25475 (select (arr!1784 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!25466 () Unit!1613)

(assert (=> b!61583 (= lt!25466 (addApplyDifferent!43 lt!25465 lt!25455 (minValue!1980 newMap!16) lt!25475))))

(assert (=> b!61583 (= (apply!67 (+!81 lt!25465 (tuple2!2023 lt!25455 (minValue!1980 newMap!16))) lt!25475) (apply!67 lt!25465 lt!25475))))

(declare-fun lt!25460 () Unit!1613)

(assert (=> b!61583 (= lt!25460 lt!25466)))

(declare-fun lt!25471 () ListLongMap!1347)

(assert (=> b!61583 (= lt!25471 (getCurrentListMapNoExtraKeys!45 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16))) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16))) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25458 () (_ BitVec 64))

(assert (=> b!61583 (= lt!25458 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25459 () (_ BitVec 64))

(assert (=> b!61583 (= lt!25459 (select (arr!1784 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!25474 () Unit!1613)

(assert (=> b!61583 (= lt!25474 (addApplyDifferent!43 lt!25471 lt!25458 (zeroValue!1980 newMap!16) lt!25459))))

(assert (=> b!61583 (= (apply!67 (+!81 lt!25471 (tuple2!2023 lt!25458 (zeroValue!1980 newMap!16))) lt!25459) (apply!67 lt!25471 lt!25459))))

(declare-fun lt!25469 () Unit!1613)

(assert (=> b!61583 (= lt!25469 lt!25474)))

(declare-fun lt!25468 () ListLongMap!1347)

(assert (=> b!61583 (= lt!25468 (getCurrentListMapNoExtraKeys!45 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16))) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16))) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25457 () (_ BitVec 64))

(assert (=> b!61583 (= lt!25457 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25463 () (_ BitVec 64))

(assert (=> b!61583 (= lt!25463 (select (arr!1784 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16)))) #b00000000000000000000000000000000))))

(assert (=> b!61583 (= lt!25462 (addApplyDifferent!43 lt!25468 lt!25457 (minValue!1980 newMap!16) lt!25463))))

(assert (=> b!61583 (= (apply!67 (+!81 lt!25468 (tuple2!2023 lt!25457 (minValue!1980 newMap!16))) lt!25463) (apply!67 lt!25468 lt!25463))))

(declare-fun b!61584 () Bool)

(declare-fun res!33914 () Bool)

(assert (=> b!61584 (=> (not res!33914) (not e!40438))))

(assert (=> b!61584 (= res!33914 e!40447)))

(declare-fun c!8105 () Bool)

(assert (=> b!61584 (= c!8105 (not (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (= (and d!12291 c!8110) b!61580))

(assert (= (and d!12291 (not c!8110)) b!61576))

(assert (= (and b!61576 c!8107) b!61575))

(assert (= (and b!61576 (not c!8107)) b!61581))

(assert (= (and b!61581 c!8109) b!61571))

(assert (= (and b!61581 (not c!8109)) b!61569))

(assert (= (or b!61571 b!61569) bm!4745))

(assert (= (or b!61575 bm!4745) bm!4747))

(assert (= (or b!61575 b!61571) bm!4743))

(assert (= (or b!61580 bm!4747) bm!4746))

(assert (= (or b!61580 bm!4743) bm!4742))

(assert (= (and d!12291 res!33911) b!61568))

(assert (= (and d!12291 c!8106) b!61583))

(assert (= (and d!12291 (not c!8106)) b!61566))

(assert (= (and d!12291 res!33915) b!61564))

(assert (= (and b!61564 res!33907) b!61579))

(assert (= (and b!61564 (not res!33913)) b!61573))

(assert (= (and b!61573 res!33910) b!61582))

(assert (= (and b!61564 res!33909) b!61584))

(assert (= (and b!61584 c!8105) b!61578))

(assert (= (and b!61584 (not c!8105)) b!61570))

(assert (= (and b!61578 res!33908) b!61577))

(assert (= (or b!61578 b!61570) bm!4744))

(assert (= (and b!61584 res!33914) b!61574))

(assert (= (and b!61574 c!8108) b!61567))

(assert (= (and b!61574 (not c!8108)) b!61565))

(assert (= (and b!61567 res!33912) b!61572))

(assert (= (or b!61567 b!61565) bm!4741))

(declare-fun b_lambda!2723 () Bool)

(assert (=> (not b_lambda!2723) (not b!61582)))

(assert (=> b!61582 t!4804))

(declare-fun b_and!3749 () Bool)

(assert (= b_and!3745 (and (=> t!4804 result!2427) b_and!3749)))

(assert (=> b!61582 t!4806))

(declare-fun b_and!3751 () Bool)

(assert (= b_and!3747 (and (=> t!4806 result!2429) b_and!3751)))

(assert (=> b!61568 m!54529))

(assert (=> b!61568 m!54529))

(assert (=> b!61568 m!54531))

(assert (=> b!61573 m!54529))

(assert (=> b!61573 m!54529))

(declare-fun m!54571 () Bool)

(assert (=> b!61573 m!54571))

(declare-fun m!54573 () Bool)

(assert (=> bm!4741 m!54573))

(declare-fun m!54575 () Bool)

(assert (=> bm!4744 m!54575))

(declare-fun m!54577 () Bool)

(assert (=> b!61582 m!54577))

(assert (=> b!61582 m!53389))

(declare-fun m!54579 () Bool)

(assert (=> b!61582 m!54579))

(assert (=> b!61582 m!54529))

(assert (=> b!61582 m!53389))

(assert (=> b!61582 m!54529))

(declare-fun m!54581 () Bool)

(assert (=> b!61582 m!54581))

(assert (=> b!61582 m!54577))

(declare-fun m!54583 () Bool)

(assert (=> b!61577 m!54583))

(declare-fun m!54585 () Bool)

(assert (=> b!61572 m!54585))

(assert (=> d!12291 m!53287))

(declare-fun m!54587 () Bool)

(assert (=> bm!4742 m!54587))

(declare-fun m!54589 () Bool)

(assert (=> b!61580 m!54589))

(assert (=> b!61579 m!54529))

(assert (=> b!61579 m!54529))

(assert (=> b!61579 m!54531))

(declare-fun m!54591 () Bool)

(assert (=> bm!4746 m!54591))

(declare-fun m!54593 () Bool)

(assert (=> b!61583 m!54593))

(declare-fun m!54595 () Bool)

(assert (=> b!61583 m!54595))

(declare-fun m!54597 () Bool)

(assert (=> b!61583 m!54597))

(assert (=> b!61583 m!54529))

(declare-fun m!54599 () Bool)

(assert (=> b!61583 m!54599))

(declare-fun m!54601 () Bool)

(assert (=> b!61583 m!54601))

(declare-fun m!54603 () Bool)

(assert (=> b!61583 m!54603))

(declare-fun m!54605 () Bool)

(assert (=> b!61583 m!54605))

(declare-fun m!54607 () Bool)

(assert (=> b!61583 m!54607))

(declare-fun m!54609 () Bool)

(assert (=> b!61583 m!54609))

(declare-fun m!54611 () Bool)

(assert (=> b!61583 m!54611))

(assert (=> b!61583 m!54609))

(declare-fun m!54613 () Bool)

(assert (=> b!61583 m!54613))

(declare-fun m!54615 () Bool)

(assert (=> b!61583 m!54615))

(assert (=> b!61583 m!54615))

(declare-fun m!54617 () Bool)

(assert (=> b!61583 m!54617))

(declare-fun m!54619 () Bool)

(assert (=> b!61583 m!54619))

(assert (=> b!61583 m!54595))

(declare-fun m!54621 () Bool)

(assert (=> b!61583 m!54621))

(assert (=> b!61583 m!54605))

(assert (=> b!61583 m!54591))

(assert (=> d!11919 d!12291))

(assert (=> d!11919 d!12019))

(declare-fun d!12293 () Bool)

(declare-fun e!40450 () Bool)

(assert (=> d!12293 e!40450))

(declare-fun res!33918 () Bool)

(assert (=> d!12293 (=> (not res!33918) (not e!40450))))

(assert (=> d!12293 (= res!33918 (and (bvsge (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) #b00000000000000000000000000000000) (bvslt (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (size!2015 (_keys!3694 newMap!16))) (bvslt (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (size!2016 (_values!2049 newMap!16)))))))

(declare-fun lt!25478 () Unit!1613)

(declare-fun choose!333 (array!3729 array!3731 (_ BitVec 32) (_ BitVec 32) V!2857 V!2857 (_ BitVec 32) (_ BitVec 64) V!2857 Int) Unit!1613)

(assert (=> d!12293 (= lt!25478 (choose!333 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2066 newMap!16)))))

(assert (=> d!12293 (validMask!0 (mask!5962 newMap!16))))

(assert (=> d!12293 (= (lemmaAddValidKeyToArrayThenAddPairToListMap!6 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2066 newMap!16)) lt!25478)))

(declare-fun b!61587 () Bool)

(assert (=> b!61587 (= e!40450 (= (+!81 (getCurrentListMap!390 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!390 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16))) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16))) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16))))))

(assert (= (and d!12293 res!33918) b!61587))

(assert (=> d!12293 m!52989))

(assert (=> d!12293 m!53013))

(declare-fun m!54623 () Bool)

(assert (=> d!12293 m!54623))

(assert (=> d!12293 m!53287))

(assert (=> b!61587 m!53327))

(assert (=> b!61587 m!53203))

(assert (=> b!61587 m!53311))

(assert (=> b!61587 m!53343))

(assert (=> b!61587 m!53323))

(assert (=> b!61587 m!53203))

(assert (=> d!11919 d!12293))

(assert (=> d!11919 d!11885))

(declare-fun d!12295 () Bool)

(declare-fun e!40451 () Bool)

(assert (=> d!12295 e!40451))

(declare-fun res!33919 () Bool)

(assert (=> d!12295 (=> (not res!33919) (not e!40451))))

(assert (=> d!12295 (= res!33919 (and (bvsge (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) #b00000000000000000000000000000000) (bvslt (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (size!2015 lt!25006))))))

(declare-fun lt!25479 () Unit!1613)

(assert (=> d!12295 (= lt!25479 (choose!324 lt!25006 lt!25013 (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (defaultEntry!2066 newMap!16)))))

(assert (=> d!12295 (validMask!0 (mask!5962 newMap!16))))

(assert (=> d!12295 (= (lemmaValidKeyInArrayIsInListMap!76 lt!25006 lt!25013 (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (defaultEntry!2066 newMap!16)) lt!25479)))

(declare-fun b!61588 () Bool)

(assert (=> b!61588 (= e!40451 (contains!682 (getCurrentListMap!390 lt!25006 lt!25013 (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)) (select (arr!1784 lt!25006) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)))))))

(assert (= (and d!12295 res!33919) b!61588))

(declare-fun m!54625 () Bool)

(assert (=> d!12295 m!54625))

(assert (=> d!12295 m!53287))

(assert (=> b!61588 m!53329))

(declare-fun m!54627 () Bool)

(assert (=> b!61588 m!54627))

(assert (=> b!61588 m!53329))

(assert (=> b!61588 m!54627))

(declare-fun m!54629 () Bool)

(assert (=> b!61588 m!54629))

(assert (=> d!11919 d!12295))

(declare-fun d!12297 () Bool)

(declare-fun e!40453 () Bool)

(assert (=> d!12297 e!40453))

(declare-fun res!33920 () Bool)

(assert (=> d!12297 (=> res!33920 e!40453)))

(declare-fun lt!25482 () Bool)

(assert (=> d!12297 (= res!33920 (not lt!25482))))

(declare-fun lt!25483 () Bool)

(assert (=> d!12297 (= lt!25482 lt!25483)))

(declare-fun lt!25480 () Unit!1613)

(declare-fun e!40452 () Unit!1613)

(assert (=> d!12297 (= lt!25480 e!40452)))

(declare-fun c!8111 () Bool)

(assert (=> d!12297 (= c!8111 lt!25483)))

(assert (=> d!12297 (= lt!25483 (containsKey!129 (toList!689 (getCurrentListMap!390 lt!25006 lt!25013 (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16))) (select (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)))))))

(assert (=> d!12297 (= (contains!682 (getCurrentListMap!390 lt!25006 lt!25013 (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)) (select (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)))) lt!25482)))

(declare-fun b!61589 () Bool)

(declare-fun lt!25481 () Unit!1613)

(assert (=> b!61589 (= e!40452 lt!25481)))

(assert (=> b!61589 (= lt!25481 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 (getCurrentListMap!390 lt!25006 lt!25013 (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16))) (select (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)))))))

(assert (=> b!61589 (isDefined!78 (getValueByKey!126 (toList!689 (getCurrentListMap!390 lt!25006 lt!25013 (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16))) (select (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)))))))

(declare-fun b!61590 () Bool)

(declare-fun Unit!1655 () Unit!1613)

(assert (=> b!61590 (= e!40452 Unit!1655)))

(declare-fun b!61591 () Bool)

(assert (=> b!61591 (= e!40453 (isDefined!78 (getValueByKey!126 (toList!689 (getCurrentListMap!390 lt!25006 lt!25013 (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16))) (select (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842))))))))

(assert (= (and d!12297 c!8111) b!61589))

(assert (= (and d!12297 (not c!8111)) b!61590))

(assert (= (and d!12297 (not res!33920)) b!61591))

(assert (=> d!12297 m!53331))

(declare-fun m!54631 () Bool)

(assert (=> d!12297 m!54631))

(assert (=> b!61589 m!53331))

(declare-fun m!54633 () Bool)

(assert (=> b!61589 m!54633))

(assert (=> b!61589 m!53331))

(declare-fun m!54635 () Bool)

(assert (=> b!61589 m!54635))

(assert (=> b!61589 m!54635))

(declare-fun m!54637 () Bool)

(assert (=> b!61589 m!54637))

(assert (=> b!61591 m!53331))

(assert (=> b!61591 m!54635))

(assert (=> b!61591 m!54635))

(assert (=> b!61591 m!54637))

(assert (=> d!11919 d!12297))

(declare-fun d!12299 () Bool)

(declare-fun e!40456 () Bool)

(assert (=> d!12299 e!40456))

(declare-fun res!33923 () Bool)

(assert (=> d!12299 (=> (not res!33923) (not e!40456))))

(assert (=> d!12299 (= res!33923 (and (bvsge (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) #b00000000000000000000000000000000) (bvslt (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (size!2015 (_keys!3694 newMap!16)))))))

(declare-fun lt!25486 () Unit!1613)

(declare-fun choose!102 ((_ BitVec 64) array!3729 (_ BitVec 32) (_ BitVec 32)) Unit!1613)

(assert (=> d!12299 (= lt!25486 (choose!102 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (_keys!3694 newMap!16) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (mask!5962 newMap!16)))))

(assert (=> d!12299 (validMask!0 (mask!5962 newMap!16))))

(assert (=> d!12299 (= (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (_keys!3694 newMap!16) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (mask!5962 newMap!16)) lt!25486)))

(declare-fun b!61594 () Bool)

(assert (=> b!61594 (= e!40456 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!3730 (store (arr!1784 (_keys!3694 newMap!16)) (ite c!7885 (index!3015 lt!24842) (index!3012 lt!24842)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (size!2015 (_keys!3694 newMap!16))) (mask!5962 newMap!16)))))

(assert (= (and d!12299 res!33923) b!61594))

(assert (=> d!12299 m!52989))

(declare-fun m!54639 () Bool)

(assert (=> d!12299 m!54639))

(assert (=> d!12299 m!53287))

(assert (=> b!61594 m!53343))

(assert (=> b!61594 m!53337))

(assert (=> d!11919 d!12299))

(declare-fun d!12301 () Bool)

(declare-fun e!40457 () Bool)

(assert (=> d!12301 e!40457))

(declare-fun res!33925 () Bool)

(assert (=> d!12301 (=> (not res!33925) (not e!40457))))

(declare-fun lt!25488 () ListLongMap!1347)

(assert (=> d!12301 (= res!33925 (contains!682 lt!25488 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))))))

(declare-fun lt!25490 () List!1426)

(assert (=> d!12301 (= lt!25488 (ListLongMap!1348 lt!25490))))

(declare-fun lt!25489 () Unit!1613)

(declare-fun lt!25487 () Unit!1613)

(assert (=> d!12301 (= lt!25489 lt!25487)))

(assert (=> d!12301 (= (getValueByKey!126 lt!25490 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))) (Some!131 (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))))))

(assert (=> d!12301 (= lt!25487 (lemmaContainsTupThenGetReturnValue!43 lt!25490 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))))))

(assert (=> d!12301 (= lt!25490 (insertStrictlySorted!46 (toList!689 call!4696) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))))))

(assert (=> d!12301 (= (+!81 call!4696 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))) lt!25488)))

(declare-fun b!61595 () Bool)

(declare-fun res!33924 () Bool)

(assert (=> b!61595 (=> (not res!33924) (not e!40457))))

(assert (=> b!61595 (= res!33924 (= (getValueByKey!126 (toList!689 lt!25488) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))) (Some!131 (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))))))))

(declare-fun b!61596 () Bool)

(assert (=> b!61596 (= e!40457 (contains!685 (toList!689 lt!25488) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))))))

(assert (= (and d!12301 res!33925) b!61595))

(assert (= (and b!61595 res!33924) b!61596))

(declare-fun m!54641 () Bool)

(assert (=> d!12301 m!54641))

(declare-fun m!54643 () Bool)

(assert (=> d!12301 m!54643))

(declare-fun m!54645 () Bool)

(assert (=> d!12301 m!54645))

(declare-fun m!54647 () Bool)

(assert (=> d!12301 m!54647))

(declare-fun m!54649 () Bool)

(assert (=> b!61595 m!54649))

(declare-fun m!54651 () Bool)

(assert (=> b!61596 m!54651))

(assert (=> b!61132 d!12301))

(declare-fun d!12303 () Bool)

(assert (=> d!12303 (= (get!1085 (getValueByKey!126 (toList!689 lt!24918) lt!24906)) (v!2409 (getValueByKey!126 (toList!689 lt!24918) lt!24906)))))

(assert (=> d!11973 d!12303))

(declare-fun b!61600 () Bool)

(declare-fun e!40459 () Option!132)

(assert (=> b!61600 (= e!40459 None!130)))

(declare-fun b!61598 () Bool)

(declare-fun e!40458 () Option!132)

(assert (=> b!61598 (= e!40458 e!40459)))

(declare-fun c!8113 () Bool)

(assert (=> b!61598 (= c!8113 (and ((_ is Cons!1422) (toList!689 lt!24918)) (not (= (_1!1022 (h!2004 (toList!689 lt!24918))) lt!24906))))))

(declare-fun b!61597 () Bool)

(assert (=> b!61597 (= e!40458 (Some!131 (_2!1022 (h!2004 (toList!689 lt!24918)))))))

(declare-fun b!61599 () Bool)

(assert (=> b!61599 (= e!40459 (getValueByKey!126 (t!4792 (toList!689 lt!24918)) lt!24906))))

(declare-fun d!12305 () Bool)

(declare-fun c!8112 () Bool)

(assert (=> d!12305 (= c!8112 (and ((_ is Cons!1422) (toList!689 lt!24918)) (= (_1!1022 (h!2004 (toList!689 lt!24918))) lt!24906)))))

(assert (=> d!12305 (= (getValueByKey!126 (toList!689 lt!24918) lt!24906) e!40458)))

(assert (= (and d!12305 c!8112) b!61597))

(assert (= (and d!12305 (not c!8112)) b!61598))

(assert (= (and b!61598 c!8113) b!61599))

(assert (= (and b!61598 (not c!8113)) b!61600))

(declare-fun m!54653 () Bool)

(assert (=> b!61599 m!54653))

(assert (=> d!11973 d!12305))

(assert (=> b!61181 d!11921))

(declare-fun d!12307 () Bool)

(declare-fun e!40461 () Bool)

(assert (=> d!12307 e!40461))

(declare-fun res!33926 () Bool)

(assert (=> d!12307 (=> res!33926 e!40461)))

(declare-fun lt!25493 () Bool)

(assert (=> d!12307 (= res!33926 (not lt!25493))))

(declare-fun lt!25494 () Bool)

(assert (=> d!12307 (= lt!25493 lt!25494)))

(declare-fun lt!25491 () Unit!1613)

(declare-fun e!40460 () Unit!1613)

(assert (=> d!12307 (= lt!25491 e!40460)))

(declare-fun c!8114 () Bool)

(assert (=> d!12307 (= c!8114 lt!25494)))

(assert (=> d!12307 (= lt!25494 (containsKey!129 (toList!689 lt!25111) (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!12307 (= (contains!682 lt!25111 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)) lt!25493)))

(declare-fun b!61601 () Bool)

(declare-fun lt!25492 () Unit!1613)

(assert (=> b!61601 (= e!40460 lt!25492)))

(assert (=> b!61601 (= lt!25492 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 lt!25111) (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61601 (isDefined!78 (getValueByKey!126 (toList!689 lt!25111) (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61602 () Bool)

(declare-fun Unit!1656 () Unit!1613)

(assert (=> b!61602 (= e!40460 Unit!1656)))

(declare-fun b!61603 () Bool)

(assert (=> b!61603 (= e!40461 (isDefined!78 (getValueByKey!126 (toList!689 lt!25111) (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!12307 c!8114) b!61601))

(assert (= (and d!12307 (not c!8114)) b!61602))

(assert (= (and d!12307 (not res!33926)) b!61603))

(assert (=> d!12307 m!53277))

(declare-fun m!54655 () Bool)

(assert (=> d!12307 m!54655))

(assert (=> b!61601 m!53277))

(declare-fun m!54657 () Bool)

(assert (=> b!61601 m!54657))

(assert (=> b!61601 m!53277))

(declare-fun m!54659 () Bool)

(assert (=> b!61601 m!54659))

(assert (=> b!61601 m!54659))

(declare-fun m!54661 () Bool)

(assert (=> b!61601 m!54661))

(assert (=> b!61603 m!53277))

(assert (=> b!61603 m!54659))

(assert (=> b!61603 m!54659))

(assert (=> b!61603 m!54661))

(assert (=> b!60974 d!12307))

(declare-fun d!12309 () Bool)

(declare-fun e!40463 () Bool)

(assert (=> d!12309 e!40463))

(declare-fun res!33927 () Bool)

(assert (=> d!12309 (=> res!33927 e!40463)))

(declare-fun lt!25497 () Bool)

(assert (=> d!12309 (= res!33927 (not lt!25497))))

(declare-fun lt!25498 () Bool)

(assert (=> d!12309 (= lt!25497 lt!25498)))

(declare-fun lt!25495 () Unit!1613)

(declare-fun e!40462 () Unit!1613)

(assert (=> d!12309 (= lt!25495 e!40462)))

(declare-fun c!8115 () Bool)

(assert (=> d!12309 (= c!8115 lt!25498)))

(assert (=> d!12309 (= lt!25498 (containsKey!129 (toList!689 lt!25111) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12309 (= (contains!682 lt!25111 #b0000000000000000000000000000000000000000000000000000000000000000) lt!25497)))

(declare-fun b!61604 () Bool)

(declare-fun lt!25496 () Unit!1613)

(assert (=> b!61604 (= e!40462 lt!25496)))

(assert (=> b!61604 (= lt!25496 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 lt!25111) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61604 (isDefined!78 (getValueByKey!126 (toList!689 lt!25111) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61605 () Bool)

(declare-fun Unit!1657 () Unit!1613)

(assert (=> b!61605 (= e!40462 Unit!1657)))

(declare-fun b!61606 () Bool)

(assert (=> b!61606 (= e!40463 (isDefined!78 (getValueByKey!126 (toList!689 lt!25111) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12309 c!8115) b!61604))

(assert (= (and d!12309 (not c!8115)) b!61605))

(assert (= (and d!12309 (not res!33927)) b!61606))

(declare-fun m!54663 () Bool)

(assert (=> d!12309 m!54663))

(declare-fun m!54665 () Bool)

(assert (=> b!61604 m!54665))

(declare-fun m!54667 () Bool)

(assert (=> b!61604 m!54667))

(assert (=> b!61604 m!54667))

(declare-fun m!54669 () Bool)

(assert (=> b!61604 m!54669))

(assert (=> b!61606 m!54667))

(assert (=> b!61606 m!54667))

(assert (=> b!61606 m!54669))

(assert (=> bm!4670 d!12309))

(declare-fun d!12311 () Bool)

(declare-fun e!40465 () Bool)

(assert (=> d!12311 e!40465))

(declare-fun res!33928 () Bool)

(assert (=> d!12311 (=> res!33928 e!40465)))

(declare-fun lt!25501 () Bool)

(assert (=> d!12311 (= res!33928 (not lt!25501))))

(declare-fun lt!25502 () Bool)

(assert (=> d!12311 (= lt!25501 lt!25502)))

(declare-fun lt!25499 () Unit!1613)

(declare-fun e!40464 () Unit!1613)

(assert (=> d!12311 (= lt!25499 e!40464)))

(declare-fun c!8116 () Bool)

(assert (=> d!12311 (= c!8116 lt!25502)))

(assert (=> d!12311 (= lt!25502 (containsKey!129 (toList!689 lt!25160) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!12311 (= (contains!682 lt!25160 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!25501)))

(declare-fun b!61607 () Bool)

(declare-fun lt!25500 () Unit!1613)

(assert (=> b!61607 (= e!40464 lt!25500)))

(assert (=> b!61607 (= lt!25500 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 lt!25160) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!61607 (isDefined!78 (getValueByKey!126 (toList!689 lt!25160) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!61608 () Bool)

(declare-fun Unit!1658 () Unit!1613)

(assert (=> b!61608 (= e!40464 Unit!1658)))

(declare-fun b!61609 () Bool)

(assert (=> b!61609 (= e!40465 (isDefined!78 (getValueByKey!126 (toList!689 lt!25160) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!12311 c!8116) b!61607))

(assert (= (and d!12311 (not c!8116)) b!61608))

(assert (= (and d!12311 (not res!33928)) b!61609))

(assert (=> d!12311 m!53115))

(declare-fun m!54671 () Bool)

(assert (=> d!12311 m!54671))

(assert (=> b!61607 m!53115))

(declare-fun m!54673 () Bool)

(assert (=> b!61607 m!54673))

(assert (=> b!61607 m!53115))

(declare-fun m!54675 () Bool)

(assert (=> b!61607 m!54675))

(assert (=> b!61607 m!54675))

(declare-fun m!54677 () Bool)

(assert (=> b!61607 m!54677))

(assert (=> b!61609 m!53115))

(assert (=> b!61609 m!54675))

(assert (=> b!61609 m!54675))

(assert (=> b!61609 m!54677))

(assert (=> b!61035 d!12311))

(declare-fun d!12313 () Bool)

(assert (=> d!12313 (isDefined!78 (getValueByKey!126 (toList!689 (+!81 lt!24911 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!24908))))

(declare-fun lt!25503 () Unit!1613)

(assert (=> d!12313 (= lt!25503 (choose!331 (toList!689 (+!81 lt!24911 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!24908))))

(declare-fun e!40466 () Bool)

(assert (=> d!12313 e!40466))

(declare-fun res!33929 () Bool)

(assert (=> d!12313 (=> (not res!33929) (not e!40466))))

(assert (=> d!12313 (= res!33929 (isStrictlySorted!272 (toList!689 (+!81 lt!24911 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(assert (=> d!12313 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 (+!81 lt!24911 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!24908) lt!25503)))

(declare-fun b!61610 () Bool)

(assert (=> b!61610 (= e!40466 (containsKey!129 (toList!689 (+!81 lt!24911 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!24908))))

(assert (= (and d!12313 res!33929) b!61610))

(assert (=> d!12313 m!53563))

(assert (=> d!12313 m!53563))

(assert (=> d!12313 m!53565))

(declare-fun m!54679 () Bool)

(assert (=> d!12313 m!54679))

(declare-fun m!54681 () Bool)

(assert (=> d!12313 m!54681))

(assert (=> b!61610 m!53559))

(assert (=> b!60992 d!12313))

(declare-fun d!12315 () Bool)

(assert (=> d!12315 (= (isDefined!78 (getValueByKey!126 (toList!689 (+!81 lt!24911 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!24908)) (not (isEmpty!303 (getValueByKey!126 (toList!689 (+!81 lt!24911 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!24908))))))

(declare-fun bs!2675 () Bool)

(assert (= bs!2675 d!12315))

(assert (=> bs!2675 m!53563))

(declare-fun m!54683 () Bool)

(assert (=> bs!2675 m!54683))

(assert (=> b!60992 d!12315))

(declare-fun b!61614 () Bool)

(declare-fun e!40468 () Option!132)

(assert (=> b!61614 (= e!40468 None!130)))

(declare-fun b!61612 () Bool)

(declare-fun e!40467 () Option!132)

(assert (=> b!61612 (= e!40467 e!40468)))

(declare-fun c!8118 () Bool)

(assert (=> b!61612 (= c!8118 (and ((_ is Cons!1422) (toList!689 (+!81 lt!24911 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))) (not (= (_1!1022 (h!2004 (toList!689 (+!81 lt!24911 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))) lt!24908))))))

(declare-fun b!61611 () Bool)

(assert (=> b!61611 (= e!40467 (Some!131 (_2!1022 (h!2004 (toList!689 (+!81 lt!24911 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))))))))

(declare-fun b!61613 () Bool)

(assert (=> b!61613 (= e!40468 (getValueByKey!126 (t!4792 (toList!689 (+!81 lt!24911 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))) lt!24908))))

(declare-fun c!8117 () Bool)

(declare-fun d!12317 () Bool)

(assert (=> d!12317 (= c!8117 (and ((_ is Cons!1422) (toList!689 (+!81 lt!24911 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))) (= (_1!1022 (h!2004 (toList!689 (+!81 lt!24911 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))) lt!24908)))))

(assert (=> d!12317 (= (getValueByKey!126 (toList!689 (+!81 lt!24911 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!24908) e!40467)))

(assert (= (and d!12317 c!8117) b!61611))

(assert (= (and d!12317 (not c!8117)) b!61612))

(assert (= (and b!61612 c!8118) b!61613))

(assert (= (and b!61612 (not c!8118)) b!61614))

(declare-fun m!54685 () Bool)

(assert (=> b!61613 m!54685))

(assert (=> b!60992 d!12317))

(declare-fun b!61615 () Bool)

(declare-fun e!40470 () (_ BitVec 32))

(declare-fun call!4751 () (_ BitVec 32))

(assert (=> b!61615 (= e!40470 call!4751)))

(declare-fun d!12319 () Bool)

(declare-fun lt!25504 () (_ BitVec 32))

(assert (=> d!12319 (and (bvsge lt!25504 #b00000000000000000000000000000000) (bvsle lt!25504 (bvsub (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun e!40469 () (_ BitVec 32))

(assert (=> d!12319 (= lt!25504 e!40469)))

(declare-fun c!8120 () Bool)

(assert (=> d!12319 (= c!8120 (bvsge #b00000000000000000000000000000000 (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992))))))))

(assert (=> d!12319 (and (bvsle #b00000000000000000000000000000000 (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992))))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992))))))))

(assert (=> d!12319 (= (arrayCountValidKeys!0 (_keys!3694 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000000000000000 (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992))))) lt!25504)))

(declare-fun bm!4748 () Bool)

(assert (=> bm!4748 (= call!4751 (arrayCountValidKeys!0 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992))))))))

(declare-fun b!61616 () Bool)

(assert (=> b!61616 (= e!40469 e!40470)))

(declare-fun c!8119 () Bool)

(assert (=> b!61616 (= c!8119 (validKeyInArray!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!61617 () Bool)

(assert (=> b!61617 (= e!40470 (bvadd #b00000000000000000000000000000001 call!4751))))

(declare-fun b!61618 () Bool)

(assert (=> b!61618 (= e!40469 #b00000000000000000000000000000000)))

(assert (= (and d!12319 c!8120) b!61618))

(assert (= (and d!12319 (not c!8120)) b!61616))

(assert (= (and b!61616 c!8119) b!61617))

(assert (= (and b!61616 (not c!8119)) b!61615))

(assert (= (or b!61617 b!61615) bm!4748))

(declare-fun m!54687 () Bool)

(assert (=> bm!4748 m!54687))

(assert (=> b!61616 m!54297))

(assert (=> b!61616 m!54297))

(assert (=> b!61616 m!54305))

(assert (=> b!60989 d!12319))

(declare-fun d!12321 () Bool)

(declare-fun lt!25505 () Bool)

(assert (=> d!12321 (= lt!25505 (select (content!67 (toList!689 lt!24932)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))

(declare-fun e!40472 () Bool)

(assert (=> d!12321 (= lt!25505 e!40472)))

(declare-fun res!33930 () Bool)

(assert (=> d!12321 (=> (not res!33930) (not e!40472))))

(assert (=> d!12321 (= res!33930 ((_ is Cons!1422) (toList!689 lt!24932)))))

(assert (=> d!12321 (= (contains!685 (toList!689 lt!24932) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) lt!25505)))

(declare-fun b!61619 () Bool)

(declare-fun e!40471 () Bool)

(assert (=> b!61619 (= e!40472 e!40471)))

(declare-fun res!33931 () Bool)

(assert (=> b!61619 (=> res!33931 e!40471)))

(assert (=> b!61619 (= res!33931 (= (h!2004 (toList!689 lt!24932)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))

(declare-fun b!61620 () Bool)

(assert (=> b!61620 (= e!40471 (contains!685 (t!4792 (toList!689 lt!24932)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))

(assert (= (and d!12321 res!33930) b!61619))

(assert (= (and b!61619 (not res!33931)) b!61620))

(declare-fun m!54689 () Bool)

(assert (=> d!12321 m!54689))

(declare-fun m!54691 () Bool)

(assert (=> d!12321 m!54691))

(declare-fun m!54693 () Bool)

(assert (=> b!61620 m!54693))

(assert (=> b!60823 d!12321))

(declare-fun b!61624 () Bool)

(declare-fun e!40474 () Option!132)

(assert (=> b!61624 (= e!40474 None!130)))

(declare-fun b!61622 () Bool)

(declare-fun e!40473 () Option!132)

(assert (=> b!61622 (= e!40473 e!40474)))

(declare-fun c!8122 () Bool)

(assert (=> b!61622 (= c!8122 (and ((_ is Cons!1422) (toList!689 lt!25079)) (not (= (_1!1022 (h!2004 (toList!689 lt!25079))) (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!61621 () Bool)

(assert (=> b!61621 (= e!40473 (Some!131 (_2!1022 (h!2004 (toList!689 lt!25079)))))))

(declare-fun b!61623 () Bool)

(assert (=> b!61623 (= e!40474 (getValueByKey!126 (t!4792 (toList!689 lt!25079)) (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun d!12323 () Bool)

(declare-fun c!8121 () Bool)

(assert (=> d!12323 (= c!8121 (and ((_ is Cons!1422) (toList!689 lt!25079)) (= (_1!1022 (h!2004 (toList!689 lt!25079))) (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!12323 (= (getValueByKey!126 (toList!689 lt!25079) (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!40473)))

(assert (= (and d!12323 c!8121) b!61621))

(assert (= (and d!12323 (not c!8121)) b!61622))

(assert (= (and b!61622 c!8122) b!61623))

(assert (= (and b!61622 (not c!8122)) b!61624))

(declare-fun m!54695 () Bool)

(assert (=> b!61623 m!54695))

(assert (=> b!60942 d!12323))

(declare-fun d!12325 () Bool)

(declare-fun e!40476 () Bool)

(assert (=> d!12325 e!40476))

(declare-fun res!33932 () Bool)

(assert (=> d!12325 (=> res!33932 e!40476)))

(declare-fun lt!25508 () Bool)

(assert (=> d!12325 (= res!33932 (not lt!25508))))

(declare-fun lt!25509 () Bool)

(assert (=> d!12325 (= lt!25508 lt!25509)))

(declare-fun lt!25506 () Unit!1613)

(declare-fun e!40475 () Unit!1613)

(assert (=> d!12325 (= lt!25506 e!40475)))

(declare-fun c!8123 () Bool)

(assert (=> d!12325 (= c!8123 lt!25509)))

(assert (=> d!12325 (= lt!25509 (containsKey!129 (toList!689 lt!25232) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12325 (= (contains!682 lt!25232 #b1000000000000000000000000000000000000000000000000000000000000000) lt!25508)))

(declare-fun b!61625 () Bool)

(declare-fun lt!25507 () Unit!1613)

(assert (=> b!61625 (= e!40475 lt!25507)))

(assert (=> b!61625 (= lt!25507 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 lt!25232) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61625 (isDefined!78 (getValueByKey!126 (toList!689 lt!25232) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61626 () Bool)

(declare-fun Unit!1659 () Unit!1613)

(assert (=> b!61626 (= e!40475 Unit!1659)))

(declare-fun b!61627 () Bool)

(assert (=> b!61627 (= e!40476 (isDefined!78 (getValueByKey!126 (toList!689 lt!25232) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12325 c!8123) b!61625))

(assert (= (and d!12325 (not c!8123)) b!61626))

(assert (= (and d!12325 (not res!33932)) b!61627))

(declare-fun m!54697 () Bool)

(assert (=> d!12325 m!54697))

(declare-fun m!54699 () Bool)

(assert (=> b!61625 m!54699))

(assert (=> b!61625 m!54389))

(assert (=> b!61625 m!54389))

(declare-fun m!54701 () Bool)

(assert (=> b!61625 m!54701))

(assert (=> b!61627 m!54389))

(assert (=> b!61627 m!54389))

(assert (=> b!61627 m!54701))

(assert (=> bm!4694 d!12325))

(declare-fun d!12327 () Bool)

(declare-fun res!33933 () Bool)

(declare-fun e!40477 () Bool)

(assert (=> d!12327 (=> res!33933 e!40477)))

(assert (=> d!12327 (= res!33933 (and ((_ is Cons!1422) (toList!689 lt!24917)) (= (_1!1022 (h!2004 (toList!689 lt!24917))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!12327 (= (containsKey!129 (toList!689 lt!24917) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!40477)))

(declare-fun b!61628 () Bool)

(declare-fun e!40478 () Bool)

(assert (=> b!61628 (= e!40477 e!40478)))

(declare-fun res!33934 () Bool)

(assert (=> b!61628 (=> (not res!33934) (not e!40478))))

(assert (=> b!61628 (= res!33934 (and (or (not ((_ is Cons!1422) (toList!689 lt!24917))) (bvsle (_1!1022 (h!2004 (toList!689 lt!24917))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) ((_ is Cons!1422) (toList!689 lt!24917)) (bvslt (_1!1022 (h!2004 (toList!689 lt!24917))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun b!61629 () Bool)

(assert (=> b!61629 (= e!40478 (containsKey!129 (t!4792 (toList!689 lt!24917)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!12327 (not res!33933)) b!61628))

(assert (= (and b!61628 res!33934) b!61629))

(assert (=> b!61629 m!53115))

(declare-fun m!54703 () Bool)

(assert (=> b!61629 m!54703))

(assert (=> d!11945 d!12327))

(declare-fun d!12329 () Bool)

(declare-fun e!40480 () Bool)

(assert (=> d!12329 e!40480))

(declare-fun res!33935 () Bool)

(assert (=> d!12329 (=> res!33935 e!40480)))

(declare-fun lt!25512 () Bool)

(assert (=> d!12329 (= res!33935 (not lt!25512))))

(declare-fun lt!25513 () Bool)

(assert (=> d!12329 (= lt!25512 lt!25513)))

(declare-fun lt!25510 () Unit!1613)

(declare-fun e!40479 () Unit!1613)

(assert (=> d!12329 (= lt!25510 e!40479)))

(declare-fun c!8124 () Bool)

(assert (=> d!12329 (= c!8124 lt!25513)))

(assert (=> d!12329 (= lt!25513 (containsKey!129 (toList!689 lt!25138) (_1!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(assert (=> d!12329 (= (contains!682 lt!25138 (_1!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!25512)))

(declare-fun b!61630 () Bool)

(declare-fun lt!25511 () Unit!1613)

(assert (=> b!61630 (= e!40479 lt!25511)))

(assert (=> b!61630 (= lt!25511 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 lt!25138) (_1!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(assert (=> b!61630 (isDefined!78 (getValueByKey!126 (toList!689 lt!25138) (_1!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun b!61631 () Bool)

(declare-fun Unit!1660 () Unit!1613)

(assert (=> b!61631 (= e!40479 Unit!1660)))

(declare-fun b!61632 () Bool)

(assert (=> b!61632 (= e!40480 (isDefined!78 (getValueByKey!126 (toList!689 lt!25138) (_1!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(assert (= (and d!12329 c!8124) b!61630))

(assert (= (and d!12329 (not c!8124)) b!61631))

(assert (= (and d!12329 (not res!33935)) b!61632))

(declare-fun m!54705 () Bool)

(assert (=> d!12329 m!54705))

(declare-fun m!54707 () Bool)

(assert (=> b!61630 m!54707))

(assert (=> b!61630 m!53623))

(assert (=> b!61630 m!53623))

(declare-fun m!54709 () Bool)

(assert (=> b!61630 m!54709))

(assert (=> b!61632 m!53623))

(assert (=> b!61632 m!53623))

(assert (=> b!61632 m!54709))

(assert (=> d!11975 d!12329))

(declare-fun b!61636 () Bool)

(declare-fun e!40482 () Option!132)

(assert (=> b!61636 (= e!40482 None!130)))

(declare-fun b!61634 () Bool)

(declare-fun e!40481 () Option!132)

(assert (=> b!61634 (= e!40481 e!40482)))

(declare-fun c!8126 () Bool)

(assert (=> b!61634 (= c!8126 (and ((_ is Cons!1422) lt!25140) (not (= (_1!1022 (h!2004 lt!25140)) (_1!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))))

(declare-fun b!61633 () Bool)

(assert (=> b!61633 (= e!40481 (Some!131 (_2!1022 (h!2004 lt!25140))))))

(declare-fun b!61635 () Bool)

(assert (=> b!61635 (= e!40482 (getValueByKey!126 (t!4792 lt!25140) (_1!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun d!12331 () Bool)

(declare-fun c!8125 () Bool)

(assert (=> d!12331 (= c!8125 (and ((_ is Cons!1422) lt!25140) (= (_1!1022 (h!2004 lt!25140)) (_1!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(assert (=> d!12331 (= (getValueByKey!126 lt!25140 (_1!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) e!40481)))

(assert (= (and d!12331 c!8125) b!61633))

(assert (= (and d!12331 (not c!8125)) b!61634))

(assert (= (and b!61634 c!8126) b!61635))

(assert (= (and b!61634 (not c!8126)) b!61636))

(declare-fun m!54711 () Bool)

(assert (=> b!61635 m!54711))

(assert (=> d!11975 d!12331))

(declare-fun d!12333 () Bool)

(assert (=> d!12333 (= (getValueByKey!126 lt!25140 (_1!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) (Some!131 (_2!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun lt!25514 () Unit!1613)

(assert (=> d!12333 (= lt!25514 (choose!332 lt!25140 (_1!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun e!40483 () Bool)

(assert (=> d!12333 e!40483))

(declare-fun res!33936 () Bool)

(assert (=> d!12333 (=> (not res!33936) (not e!40483))))

(assert (=> d!12333 (= res!33936 (isStrictlySorted!272 lt!25140))))

(assert (=> d!12333 (= (lemmaContainsTupThenGetReturnValue!43 lt!25140 (_1!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!25514)))

(declare-fun b!61637 () Bool)

(declare-fun res!33937 () Bool)

(assert (=> b!61637 (=> (not res!33937) (not e!40483))))

(assert (=> b!61637 (= res!33937 (containsKey!129 lt!25140 (_1!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun b!61638 () Bool)

(assert (=> b!61638 (= e!40483 (contains!685 lt!25140 (tuple2!2023 (_1!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(assert (= (and d!12333 res!33936) b!61637))

(assert (= (and b!61637 res!33937) b!61638))

(assert (=> d!12333 m!53617))

(declare-fun m!54713 () Bool)

(assert (=> d!12333 m!54713))

(declare-fun m!54715 () Bool)

(assert (=> d!12333 m!54715))

(declare-fun m!54717 () Bool)

(assert (=> b!61637 m!54717))

(declare-fun m!54719 () Bool)

(assert (=> b!61638 m!54719))

(assert (=> d!11975 d!12333))

(declare-fun bm!4749 () Bool)

(declare-fun call!4754 () List!1426)

(declare-fun call!4752 () List!1426)

(assert (=> bm!4749 (= call!4754 call!4752)))

(declare-fun b!61639 () Bool)

(declare-fun e!40486 () List!1426)

(declare-fun call!4753 () List!1426)

(assert (=> b!61639 (= e!40486 call!4753)))

(declare-fun e!40484 () List!1426)

(declare-fun bm!4750 () Bool)

(declare-fun c!8127 () Bool)

(assert (=> bm!4750 (= call!4752 ($colon$colon!60 e!40484 (ite c!8127 (h!2004 (toList!689 lt!24912)) (tuple2!2023 (_1!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))))

(declare-fun c!8129 () Bool)

(assert (=> bm!4750 (= c!8129 c!8127)))

(declare-fun b!61640 () Bool)

(assert (=> b!61640 (= e!40484 (insertStrictlySorted!46 (t!4792 (toList!689 lt!24912)) (_1!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun b!61641 () Bool)

(declare-fun lt!25515 () List!1426)

(declare-fun e!40485 () Bool)

(assert (=> b!61641 (= e!40485 (contains!685 lt!25515 (tuple2!2023 (_1!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(declare-fun bm!4751 () Bool)

(assert (=> bm!4751 (= call!4753 call!4754)))

(declare-fun b!61642 () Bool)

(declare-fun res!33939 () Bool)

(assert (=> b!61642 (=> (not res!33939) (not e!40485))))

(assert (=> b!61642 (= res!33939 (containsKey!129 lt!25515 (_1!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun b!61643 () Bool)

(declare-fun e!40487 () List!1426)

(declare-fun e!40488 () List!1426)

(assert (=> b!61643 (= e!40487 e!40488)))

(declare-fun c!8128 () Bool)

(assert (=> b!61643 (= c!8128 (and ((_ is Cons!1422) (toList!689 lt!24912)) (= (_1!1022 (h!2004 (toList!689 lt!24912))) (_1!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(declare-fun b!61644 () Bool)

(declare-fun c!8130 () Bool)

(assert (=> b!61644 (= c!8130 (and ((_ is Cons!1422) (toList!689 lt!24912)) (bvsgt (_1!1022 (h!2004 (toList!689 lt!24912))) (_1!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(assert (=> b!61644 (= e!40488 e!40486)))

(declare-fun d!12335 () Bool)

(assert (=> d!12335 e!40485))

(declare-fun res!33938 () Bool)

(assert (=> d!12335 (=> (not res!33938) (not e!40485))))

(assert (=> d!12335 (= res!33938 (isStrictlySorted!272 lt!25515))))

(assert (=> d!12335 (= lt!25515 e!40487)))

(assert (=> d!12335 (= c!8127 (and ((_ is Cons!1422) (toList!689 lt!24912)) (bvslt (_1!1022 (h!2004 (toList!689 lt!24912))) (_1!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(assert (=> d!12335 (isStrictlySorted!272 (toList!689 lt!24912))))

(assert (=> d!12335 (= (insertStrictlySorted!46 (toList!689 lt!24912) (_1!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!25515)))

(declare-fun b!61645 () Bool)

(assert (=> b!61645 (= e!40484 (ite c!8128 (t!4792 (toList!689 lt!24912)) (ite c!8130 (Cons!1422 (h!2004 (toList!689 lt!24912)) (t!4792 (toList!689 lt!24912))) Nil!1423)))))

(declare-fun b!61646 () Bool)

(assert (=> b!61646 (= e!40487 call!4752)))

(declare-fun b!61647 () Bool)

(assert (=> b!61647 (= e!40488 call!4754)))

(declare-fun b!61648 () Bool)

(assert (=> b!61648 (= e!40486 call!4753)))

(assert (= (and d!12335 c!8127) b!61646))

(assert (= (and d!12335 (not c!8127)) b!61643))

(assert (= (and b!61643 c!8128) b!61647))

(assert (= (and b!61643 (not c!8128)) b!61644))

(assert (= (and b!61644 c!8130) b!61648))

(assert (= (and b!61644 (not c!8130)) b!61639))

(assert (= (or b!61648 b!61639) bm!4751))

(assert (= (or b!61647 bm!4751) bm!4749))

(assert (= (or b!61646 bm!4749) bm!4750))

(assert (= (and bm!4750 c!8129) b!61640))

(assert (= (and bm!4750 (not c!8129)) b!61645))

(assert (= (and d!12335 res!33938) b!61642))

(assert (= (and b!61642 res!33939) b!61641))

(declare-fun m!54721 () Bool)

(assert (=> b!61641 m!54721))

(declare-fun m!54723 () Bool)

(assert (=> bm!4750 m!54723))

(declare-fun m!54725 () Bool)

(assert (=> b!61640 m!54725))

(declare-fun m!54727 () Bool)

(assert (=> d!12335 m!54727))

(declare-fun m!54729 () Bool)

(assert (=> d!12335 m!54729))

(declare-fun m!54731 () Bool)

(assert (=> b!61642 m!54731))

(assert (=> d!11975 d!12335))

(assert (=> b!60969 d!12103))

(assert (=> d!11947 d!12047))

(declare-fun b!61652 () Bool)

(declare-fun e!40490 () Option!132)

(assert (=> b!61652 (= e!40490 None!130)))

(declare-fun b!61650 () Bool)

(declare-fun e!40489 () Option!132)

(assert (=> b!61650 (= e!40489 e!40490)))

(declare-fun c!8132 () Bool)

(assert (=> b!61650 (= c!8132 (and ((_ is Cons!1422) (t!4792 (toList!689 lt!24706))) (not (= (_1!1022 (h!2004 (t!4792 (toList!689 lt!24706)))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))))

(declare-fun b!61649 () Bool)

(assert (=> b!61649 (= e!40489 (Some!131 (_2!1022 (h!2004 (t!4792 (toList!689 lt!24706))))))))

(declare-fun b!61651 () Bool)

(assert (=> b!61651 (= e!40490 (getValueByKey!126 (t!4792 (t!4792 (toList!689 lt!24706))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(declare-fun c!8131 () Bool)

(declare-fun d!12337 () Bool)

(assert (=> d!12337 (= c!8131 (and ((_ is Cons!1422) (t!4792 (toList!689 lt!24706))) (= (_1!1022 (h!2004 (t!4792 (toList!689 lt!24706)))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355))))))

(assert (=> d!12337 (= (getValueByKey!126 (t!4792 (toList!689 lt!24706)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) e!40489)))

(assert (= (and d!12337 c!8131) b!61649))

(assert (= (and d!12337 (not c!8131)) b!61650))

(assert (= (and b!61650 c!8132) b!61651))

(assert (= (and b!61650 (not c!8132)) b!61652))

(assert (=> b!61651 m!52989))

(declare-fun m!54733 () Bool)

(assert (=> b!61651 m!54733))

(assert (=> b!61168 d!12337))

(declare-fun d!12339 () Bool)

(assert (=> d!12339 (= (inRange!0 (ite c!7978 (index!3012 lt!25186) (index!3015 lt!25186)) (mask!5962 newMap!16)) (and (bvsge (ite c!7978 (index!3012 lt!25186) (index!3015 lt!25186)) #b00000000000000000000000000000000) (bvslt (ite c!7978 (index!3012 lt!25186) (index!3015 lt!25186)) (bvadd (mask!5962 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4686 d!12339))

(declare-fun d!12341 () Bool)

(declare-fun lt!25516 () Bool)

(assert (=> d!12341 (= lt!25516 (select (content!67 (toList!689 lt!25133)) (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))))

(declare-fun e!40492 () Bool)

(assert (=> d!12341 (= lt!25516 e!40492)))

(declare-fun res!33940 () Bool)

(assert (=> d!12341 (=> (not res!33940) (not e!40492))))

(assert (=> d!12341 (= res!33940 ((_ is Cons!1422) (toList!689 lt!25133)))))

(assert (=> d!12341 (= (contains!685 (toList!689 lt!25133) (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))) lt!25516)))

(declare-fun b!61653 () Bool)

(declare-fun e!40491 () Bool)

(assert (=> b!61653 (= e!40492 e!40491)))

(declare-fun res!33941 () Bool)

(assert (=> b!61653 (=> res!33941 e!40491)))

(assert (=> b!61653 (= res!33941 (= (h!2004 (toList!689 lt!25133)) (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))))

(declare-fun b!61654 () Bool)

(assert (=> b!61654 (= e!40491 (contains!685 (t!4792 (toList!689 lt!25133)) (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))))

(assert (= (and d!12341 res!33940) b!61653))

(assert (= (and b!61653 (not res!33941)) b!61654))

(declare-fun m!54735 () Bool)

(assert (=> d!12341 m!54735))

(declare-fun m!54737 () Bool)

(assert (=> d!12341 m!54737))

(declare-fun m!54739 () Bool)

(assert (=> b!61654 m!54739))

(assert (=> b!61002 d!12341))

(declare-fun d!12343 () Bool)

(assert (=> d!12343 (= (apply!67 lt!25232 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1085 (getValueByKey!126 (toList!689 lt!25232) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2676 () Bool)

(assert (= bs!2676 d!12343))

(assert (=> bs!2676 m!53879))

(assert (=> bs!2676 m!53879))

(declare-fun m!54741 () Bool)

(assert (=> bs!2676 m!54741))

(assert (=> b!61150 d!12343))

(declare-fun d!12345 () Bool)

(assert (=> d!12345 (contains!682 (getCurrentListMap!390 (_keys!3694 newMap!16) lt!24849 (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)) (select (arr!1784 (_keys!3694 newMap!16)) (index!3013 lt!24842)))))

(assert (=> d!12345 true))

(declare-fun _$16!81 () Unit!1613)

(assert (=> d!12345 (= (choose!324 (_keys!3694 newMap!16) lt!24849 (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) (index!3013 lt!24842) (defaultEntry!2066 newMap!16)) _$16!81)))

(declare-fun bs!2677 () Bool)

(assert (= bs!2677 d!12345))

(assert (=> bs!2677 m!53437))

(assert (=> bs!2677 m!53185))

(assert (=> bs!2677 m!53437))

(assert (=> bs!2677 m!53185))

(assert (=> bs!2677 m!53439))

(assert (=> d!11929 d!12345))

(assert (=> d!11929 d!12047))

(declare-fun d!12347 () Bool)

(assert (=> d!12347 (= (get!1085 (getValueByKey!126 (toList!689 lt!24917) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2409 (getValueByKey!126 (toList!689 lt!24917) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!11939 d!12347))

(assert (=> d!11939 d!12173))

(declare-fun b!61655 () Bool)

(declare-fun e!40495 () Bool)

(declare-fun e!40494 () Bool)

(assert (=> b!61655 (= e!40495 e!40494)))

(declare-fun lt!25518 () (_ BitVec 64))

(assert (=> b!61655 (= lt!25518 (select (arr!1784 (_keys!3694 (_2!1023 lt!24841))) #b00000000000000000000000000000000))))

(declare-fun lt!25517 () Unit!1613)

(assert (=> b!61655 (= lt!25517 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3694 (_2!1023 lt!24841)) lt!25518 #b00000000000000000000000000000000))))

(assert (=> b!61655 (arrayContainsKey!0 (_keys!3694 (_2!1023 lt!24841)) lt!25518 #b00000000000000000000000000000000)))

(declare-fun lt!25519 () Unit!1613)

(assert (=> b!61655 (= lt!25519 lt!25517)))

(declare-fun res!33942 () Bool)

(assert (=> b!61655 (= res!33942 (= (seekEntryOrOpen!0 (select (arr!1784 (_keys!3694 (_2!1023 lt!24841))) #b00000000000000000000000000000000) (_keys!3694 (_2!1023 lt!24841)) (mask!5962 (_2!1023 lt!24841))) (Found!222 #b00000000000000000000000000000000)))))

(assert (=> b!61655 (=> (not res!33942) (not e!40494))))

(declare-fun b!61656 () Bool)

(declare-fun e!40493 () Bool)

(assert (=> b!61656 (= e!40493 e!40495)))

(declare-fun c!8133 () Bool)

(assert (=> b!61656 (= c!8133 (validKeyInArray!0 (select (arr!1784 (_keys!3694 (_2!1023 lt!24841))) #b00000000000000000000000000000000)))))

(declare-fun d!12349 () Bool)

(declare-fun res!33943 () Bool)

(assert (=> d!12349 (=> res!33943 e!40493)))

(assert (=> d!12349 (= res!33943 (bvsge #b00000000000000000000000000000000 (size!2015 (_keys!3694 (_2!1023 lt!24841)))))))

(assert (=> d!12349 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3694 (_2!1023 lt!24841)) (mask!5962 (_2!1023 lt!24841))) e!40493)))

(declare-fun bm!4752 () Bool)

(declare-fun call!4755 () Bool)

(assert (=> bm!4752 (= call!4755 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3694 (_2!1023 lt!24841)) (mask!5962 (_2!1023 lt!24841))))))

(declare-fun b!61657 () Bool)

(assert (=> b!61657 (= e!40494 call!4755)))

(declare-fun b!61658 () Bool)

(assert (=> b!61658 (= e!40495 call!4755)))

(assert (= (and d!12349 (not res!33943)) b!61656))

(assert (= (and b!61656 c!8133) b!61655))

(assert (= (and b!61656 (not c!8133)) b!61658))

(assert (= (and b!61655 res!33942) b!61657))

(assert (= (or b!61657 b!61658) bm!4752))

(declare-fun m!54743 () Bool)

(assert (=> b!61655 m!54743))

(declare-fun m!54745 () Bool)

(assert (=> b!61655 m!54745))

(declare-fun m!54747 () Bool)

(assert (=> b!61655 m!54747))

(assert (=> b!61655 m!54743))

(declare-fun m!54749 () Bool)

(assert (=> b!61655 m!54749))

(assert (=> b!61656 m!54743))

(assert (=> b!61656 m!54743))

(declare-fun m!54751 () Bool)

(assert (=> b!61656 m!54751))

(declare-fun m!54753 () Bool)

(assert (=> bm!4752 m!54753))

(assert (=> b!61094 d!12349))

(assert (=> b!60926 d!12267))

(assert (=> b!60926 d!12019))

(declare-fun b!61659 () Bool)

(declare-fun res!33946 () Bool)

(declare-fun e!40499 () Bool)

(assert (=> b!61659 (=> (not res!33946) (not e!40499))))

(declare-fun e!40498 () Bool)

(assert (=> b!61659 (= res!33946 e!40498)))

(declare-fun res!33950 () Bool)

(assert (=> b!61659 (=> res!33950 e!40498)))

(declare-fun e!40503 () Bool)

(assert (=> b!61659 (= res!33950 (not e!40503))))

(declare-fun res!33944 () Bool)

(assert (=> b!61659 (=> (not res!33944) (not e!40503))))

(assert (=> b!61659 (= res!33944 (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(declare-fun b!61660 () Bool)

(declare-fun e!40504 () Bool)

(declare-fun call!4761 () Bool)

(assert (=> b!61660 (= e!40504 (not call!4761))))

(declare-fun bm!4753 () Bool)

(declare-fun lt!25536 () ListLongMap!1347)

(assert (=> bm!4753 (= call!4761 (contains!682 lt!25536 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61661 () Bool)

(declare-fun e!40506 () Unit!1613)

(declare-fun Unit!1661 () Unit!1613)

(assert (=> b!61661 (= e!40506 Unit!1661)))

(declare-fun b!61662 () Bool)

(declare-fun e!40496 () Bool)

(assert (=> b!61662 (= e!40504 e!40496)))

(declare-fun res!33949 () Bool)

(assert (=> b!61662 (= res!33949 call!4761)))

(assert (=> b!61662 (=> (not res!33949) (not e!40496))))

(declare-fun b!61663 () Bool)

(declare-fun e!40502 () Bool)

(assert (=> b!61663 (= e!40502 (validKeyInArray!0 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61664 () Bool)

(declare-fun e!40507 () ListLongMap!1347)

(declare-fun call!4758 () ListLongMap!1347)

(assert (=> b!61664 (= e!40507 call!4758)))

(declare-fun c!8139 () Bool)

(declare-fun call!4760 () ListLongMap!1347)

(declare-fun bm!4754 () Bool)

(declare-fun call!4762 () ListLongMap!1347)

(declare-fun call!4757 () ListLongMap!1347)

(declare-fun c!8136 () Bool)

(assert (=> bm!4754 (= call!4762 (+!81 (ite c!8139 call!4757 (ite c!8136 call!4760 call!4758)) (ite (or c!8139 c!8136) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))))))

(declare-fun b!61666 () Bool)

(declare-fun call!4759 () ListLongMap!1347)

(assert (=> b!61666 (= e!40507 call!4759)))

(declare-fun b!61667 () Bool)

(assert (=> b!61667 (= e!40496 (= (apply!67 lt!25536 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1980 newMap!16)))))

(declare-fun b!61668 () Bool)

(declare-fun e!40505 () Bool)

(assert (=> b!61668 (= e!40498 e!40505)))

(declare-fun res!33947 () Bool)

(assert (=> b!61668 (=> (not res!33947) (not e!40505))))

(assert (=> b!61668 (= res!33947 (contains!682 lt!25536 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61668 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(declare-fun b!61669 () Bool)

(assert (=> b!61669 (= e!40499 e!40504)))

(declare-fun c!8137 () Bool)

(assert (=> b!61669 (= c!8137 (not (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4755 () Bool)

(assert (=> bm!4755 (= call!4759 call!4762)))

(declare-fun b!61670 () Bool)

(declare-fun e!40501 () ListLongMap!1347)

(assert (=> b!61670 (= e!40501 call!4759)))

(declare-fun bm!4756 () Bool)

(declare-fun call!4756 () Bool)

(assert (=> bm!4756 (= call!4756 (contains!682 lt!25536 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61671 () Bool)

(declare-fun e!40497 () ListLongMap!1347)

(assert (=> b!61671 (= e!40497 e!40501)))

(assert (=> b!61671 (= c!8136 (and (not (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!61672 () Bool)

(declare-fun e!40500 () Bool)

(assert (=> b!61672 (= e!40500 (= (apply!67 lt!25536 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1980 newMap!16)))))

(declare-fun b!61673 () Bool)

(declare-fun e!40508 () Bool)

(assert (=> b!61673 (= e!40508 e!40500)))

(declare-fun res!33945 () Bool)

(assert (=> b!61673 (= res!33945 call!4756)))

(assert (=> b!61673 (=> (not res!33945) (not e!40500))))

(declare-fun bm!4757 () Bool)

(assert (=> bm!4757 (= call!4758 call!4760)))

(declare-fun b!61674 () Bool)

(assert (=> b!61674 (= e!40503 (validKeyInArray!0 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61675 () Bool)

(assert (=> b!61675 (= e!40497 (+!81 call!4762 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))))))

(declare-fun bm!4758 () Bool)

(assert (=> bm!4758 (= call!4757 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (index!3013 lt!24842) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16))) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun bm!4759 () Bool)

(assert (=> bm!4759 (= call!4760 call!4757)))

(declare-fun b!61676 () Bool)

(declare-fun c!8138 () Bool)

(assert (=> b!61676 (= c!8138 (and (not (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!61676 (= e!40501 e!40507)))

(declare-fun b!61677 () Bool)

(assert (=> b!61677 (= e!40505 (= (apply!67 lt!25536 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)) (get!1081 (select (arr!1785 (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (index!3013 lt!24842) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2066 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!61677 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2016 (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (index!3013 lt!24842) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16))))))))

(assert (=> b!61677 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(declare-fun d!12351 () Bool)

(assert (=> d!12351 e!40499))

(declare-fun res!33952 () Bool)

(assert (=> d!12351 (=> (not res!33952) (not e!40499))))

(assert (=> d!12351 (= res!33952 (or (bvsge #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))))

(declare-fun lt!25522 () ListLongMap!1347)

(assert (=> d!12351 (= lt!25536 lt!25522)))

(declare-fun lt!25538 () Unit!1613)

(assert (=> d!12351 (= lt!25538 e!40506)))

(declare-fun c!8135 () Bool)

(assert (=> d!12351 (= c!8135 e!40502)))

(declare-fun res!33948 () Bool)

(assert (=> d!12351 (=> (not res!33948) (not e!40502))))

(assert (=> d!12351 (= res!33948 (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(assert (=> d!12351 (= lt!25522 e!40497)))

(assert (=> d!12351 (= c!8139 (and (not (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12351 (validMask!0 (mask!5962 newMap!16))))

(assert (=> d!12351 (= (getCurrentListMap!390 (_keys!3694 newMap!16) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (index!3013 lt!24842) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16))) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)) lt!25536)))

(declare-fun b!61665 () Bool)

(assert (=> b!61665 (= e!40508 (not call!4756))))

(declare-fun b!61678 () Bool)

(declare-fun lt!25528 () Unit!1613)

(assert (=> b!61678 (= e!40506 lt!25528)))

(declare-fun lt!25530 () ListLongMap!1347)

(assert (=> b!61678 (= lt!25530 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (index!3013 lt!24842) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16))) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25533 () (_ BitVec 64))

(assert (=> b!61678 (= lt!25533 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25527 () (_ BitVec 64))

(assert (=> b!61678 (= lt!25527 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25520 () Unit!1613)

(assert (=> b!61678 (= lt!25520 (addStillContains!43 lt!25530 lt!25533 (zeroValue!1980 newMap!16) lt!25527))))

(assert (=> b!61678 (contains!682 (+!81 lt!25530 (tuple2!2023 lt!25533 (zeroValue!1980 newMap!16))) lt!25527)))

(declare-fun lt!25539 () Unit!1613)

(assert (=> b!61678 (= lt!25539 lt!25520)))

(declare-fun lt!25531 () ListLongMap!1347)

(assert (=> b!61678 (= lt!25531 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (index!3013 lt!24842) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16))) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25521 () (_ BitVec 64))

(assert (=> b!61678 (= lt!25521 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25541 () (_ BitVec 64))

(assert (=> b!61678 (= lt!25541 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25532 () Unit!1613)

(assert (=> b!61678 (= lt!25532 (addApplyDifferent!43 lt!25531 lt!25521 (minValue!1980 newMap!16) lt!25541))))

(assert (=> b!61678 (= (apply!67 (+!81 lt!25531 (tuple2!2023 lt!25521 (minValue!1980 newMap!16))) lt!25541) (apply!67 lt!25531 lt!25541))))

(declare-fun lt!25526 () Unit!1613)

(assert (=> b!61678 (= lt!25526 lt!25532)))

(declare-fun lt!25537 () ListLongMap!1347)

(assert (=> b!61678 (= lt!25537 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (index!3013 lt!24842) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16))) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25524 () (_ BitVec 64))

(assert (=> b!61678 (= lt!25524 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25525 () (_ BitVec 64))

(assert (=> b!61678 (= lt!25525 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25540 () Unit!1613)

(assert (=> b!61678 (= lt!25540 (addApplyDifferent!43 lt!25537 lt!25524 (zeroValue!1980 newMap!16) lt!25525))))

(assert (=> b!61678 (= (apply!67 (+!81 lt!25537 (tuple2!2023 lt!25524 (zeroValue!1980 newMap!16))) lt!25525) (apply!67 lt!25537 lt!25525))))

(declare-fun lt!25535 () Unit!1613)

(assert (=> b!61678 (= lt!25535 lt!25540)))

(declare-fun lt!25534 () ListLongMap!1347)

(assert (=> b!61678 (= lt!25534 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (index!3013 lt!24842) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16))) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25523 () (_ BitVec 64))

(assert (=> b!61678 (= lt!25523 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25529 () (_ BitVec 64))

(assert (=> b!61678 (= lt!25529 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!61678 (= lt!25528 (addApplyDifferent!43 lt!25534 lt!25523 (minValue!1980 newMap!16) lt!25529))))

(assert (=> b!61678 (= (apply!67 (+!81 lt!25534 (tuple2!2023 lt!25523 (minValue!1980 newMap!16))) lt!25529) (apply!67 lt!25534 lt!25529))))

(declare-fun b!61679 () Bool)

(declare-fun res!33951 () Bool)

(assert (=> b!61679 (=> (not res!33951) (not e!40499))))

(assert (=> b!61679 (= res!33951 e!40508)))

(declare-fun c!8134 () Bool)

(assert (=> b!61679 (= c!8134 (not (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (= (and d!12351 c!8139) b!61675))

(assert (= (and d!12351 (not c!8139)) b!61671))

(assert (= (and b!61671 c!8136) b!61670))

(assert (= (and b!61671 (not c!8136)) b!61676))

(assert (= (and b!61676 c!8138) b!61666))

(assert (= (and b!61676 (not c!8138)) b!61664))

(assert (= (or b!61666 b!61664) bm!4757))

(assert (= (or b!61670 bm!4757) bm!4759))

(assert (= (or b!61670 b!61666) bm!4755))

(assert (= (or b!61675 bm!4759) bm!4758))

(assert (= (or b!61675 bm!4755) bm!4754))

(assert (= (and d!12351 res!33948) b!61663))

(assert (= (and d!12351 c!8135) b!61678))

(assert (= (and d!12351 (not c!8135)) b!61661))

(assert (= (and d!12351 res!33952) b!61659))

(assert (= (and b!61659 res!33944) b!61674))

(assert (= (and b!61659 (not res!33950)) b!61668))

(assert (= (and b!61668 res!33947) b!61677))

(assert (= (and b!61659 res!33946) b!61679))

(assert (= (and b!61679 c!8134) b!61673))

(assert (= (and b!61679 (not c!8134)) b!61665))

(assert (= (and b!61673 res!33945) b!61672))

(assert (= (or b!61673 b!61665) bm!4756))

(assert (= (and b!61679 res!33951) b!61669))

(assert (= (and b!61669 c!8137) b!61662))

(assert (= (and b!61669 (not c!8137)) b!61660))

(assert (= (and b!61662 res!33949) b!61667))

(assert (= (or b!61662 b!61660) bm!4753))

(declare-fun b_lambda!2725 () Bool)

(assert (=> (not b_lambda!2725) (not b!61677)))

(assert (=> b!61677 t!4804))

(declare-fun b_and!3753 () Bool)

(assert (= b_and!3749 (and (=> t!4804 result!2427) b_and!3753)))

(assert (=> b!61677 t!4806))

(declare-fun b_and!3755 () Bool)

(assert (= b_and!3751 (and (=> t!4806 result!2429) b_and!3755)))

(assert (=> b!61663 m!53277))

(assert (=> b!61663 m!53277))

(assert (=> b!61663 m!53279))

(assert (=> b!61668 m!53277))

(assert (=> b!61668 m!53277))

(declare-fun m!54755 () Bool)

(assert (=> b!61668 m!54755))

(declare-fun m!54757 () Bool)

(assert (=> bm!4753 m!54757))

(declare-fun m!54759 () Bool)

(assert (=> bm!4756 m!54759))

(declare-fun m!54761 () Bool)

(assert (=> b!61677 m!54761))

(assert (=> b!61677 m!53389))

(declare-fun m!54763 () Bool)

(assert (=> b!61677 m!54763))

(assert (=> b!61677 m!53277))

(assert (=> b!61677 m!53389))

(assert (=> b!61677 m!53277))

(declare-fun m!54765 () Bool)

(assert (=> b!61677 m!54765))

(assert (=> b!61677 m!54761))

(declare-fun m!54767 () Bool)

(assert (=> b!61672 m!54767))

(declare-fun m!54769 () Bool)

(assert (=> b!61667 m!54769))

(assert (=> d!12351 m!53287))

(declare-fun m!54771 () Bool)

(assert (=> bm!4754 m!54771))

(declare-fun m!54773 () Bool)

(assert (=> b!61675 m!54773))

(assert (=> b!61674 m!53277))

(assert (=> b!61674 m!53277))

(assert (=> b!61674 m!53279))

(declare-fun m!54775 () Bool)

(assert (=> bm!4758 m!54775))

(declare-fun m!54777 () Bool)

(assert (=> b!61678 m!54777))

(declare-fun m!54779 () Bool)

(assert (=> b!61678 m!54779))

(declare-fun m!54781 () Bool)

(assert (=> b!61678 m!54781))

(assert (=> b!61678 m!53277))

(declare-fun m!54783 () Bool)

(assert (=> b!61678 m!54783))

(declare-fun m!54785 () Bool)

(assert (=> b!61678 m!54785))

(declare-fun m!54787 () Bool)

(assert (=> b!61678 m!54787))

(declare-fun m!54789 () Bool)

(assert (=> b!61678 m!54789))

(declare-fun m!54791 () Bool)

(assert (=> b!61678 m!54791))

(declare-fun m!54793 () Bool)

(assert (=> b!61678 m!54793))

(declare-fun m!54795 () Bool)

(assert (=> b!61678 m!54795))

(assert (=> b!61678 m!54793))

(declare-fun m!54797 () Bool)

(assert (=> b!61678 m!54797))

(declare-fun m!54799 () Bool)

(assert (=> b!61678 m!54799))

(assert (=> b!61678 m!54799))

(declare-fun m!54801 () Bool)

(assert (=> b!61678 m!54801))

(declare-fun m!54803 () Bool)

(assert (=> b!61678 m!54803))

(assert (=> b!61678 m!54779))

(declare-fun m!54805 () Bool)

(assert (=> b!61678 m!54805))

(assert (=> b!61678 m!54789))

(assert (=> b!61678 m!54775))

(assert (=> b!60926 d!12351))

(assert (=> b!60939 d!12103))

(assert (=> d!11927 d!12047))

(declare-fun b!61683 () Bool)

(declare-fun e!40510 () Option!132)

(assert (=> b!61683 (= e!40510 None!130)))

(declare-fun b!61681 () Bool)

(declare-fun e!40509 () Option!132)

(assert (=> b!61681 (= e!40509 e!40510)))

(declare-fun c!8141 () Bool)

(assert (=> b!61681 (= c!8141 (and ((_ is Cons!1422) (toList!689 lt!25243)) (not (= (_1!1022 (h!2004 (toList!689 lt!25243))) (_1!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))))

(declare-fun b!61680 () Bool)

(assert (=> b!61680 (= e!40509 (Some!131 (_2!1022 (h!2004 (toList!689 lt!25243)))))))

(declare-fun b!61682 () Bool)

(assert (=> b!61682 (= e!40510 (getValueByKey!126 (t!4792 (toList!689 lt!25243)) (_1!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(declare-fun c!8140 () Bool)

(declare-fun d!12353 () Bool)

(assert (=> d!12353 (= c!8140 (and ((_ is Cons!1422) (toList!689 lt!25243)) (= (_1!1022 (h!2004 (toList!689 lt!25243))) (_1!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))))

(assert (=> d!12353 (= (getValueByKey!126 (toList!689 lt!25243) (_1!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))) e!40509)))

(assert (= (and d!12353 c!8140) b!61680))

(assert (= (and d!12353 (not c!8140)) b!61681))

(assert (= (and b!61681 c!8141) b!61682))

(assert (= (and b!61681 (not c!8141)) b!61683))

(declare-fun m!54807 () Bool)

(assert (=> b!61682 m!54807))

(assert (=> b!61177 d!12353))

(declare-fun b!61684 () Bool)

(declare-fun e!40516 () ListLongMap!1347)

(declare-fun call!4763 () ListLongMap!1347)

(assert (=> b!61684 (= e!40516 call!4763)))

(declare-fun b!61685 () Bool)

(declare-fun e!40513 () Bool)

(declare-fun lt!25547 () ListLongMap!1347)

(assert (=> b!61685 (= e!40513 (isEmpty!302 lt!25547))))

(declare-fun b!61686 () Bool)

(declare-fun e!40515 () Bool)

(declare-fun e!40512 () Bool)

(assert (=> b!61686 (= e!40515 e!40512)))

(declare-fun c!8144 () Bool)

(declare-fun e!40511 () Bool)

(assert (=> b!61686 (= c!8144 e!40511)))

(declare-fun res!33955 () Bool)

(assert (=> b!61686 (=> (not res!33955) (not e!40511))))

(assert (=> b!61686 (= res!33955 (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(declare-fun b!61687 () Bool)

(declare-fun lt!25542 () Unit!1613)

(declare-fun lt!25545 () Unit!1613)

(assert (=> b!61687 (= lt!25542 lt!25545)))

(declare-fun lt!25548 () (_ BitVec 64))

(declare-fun lt!25543 () (_ BitVec 64))

(declare-fun lt!25546 () ListLongMap!1347)

(declare-fun lt!25544 () V!2857)

(assert (=> b!61687 (not (contains!682 (+!81 lt!25546 (tuple2!2023 lt!25543 lt!25544)) lt!25548))))

(assert (=> b!61687 (= lt!25545 (addStillNotContains!18 lt!25546 lt!25543 lt!25544 lt!25548))))

(assert (=> b!61687 (= lt!25548 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!61687 (= lt!25544 (get!1081 (select (arr!1785 (_values!2049 newMap!16)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2066 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!61687 (= lt!25543 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!61687 (= lt!25546 call!4763)))

(assert (=> b!61687 (= e!40516 (+!81 call!4763 (tuple2!2023 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000) (get!1081 (select (arr!1785 (_values!2049 newMap!16)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2066 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!61688 () Bool)

(assert (=> b!61688 (= e!40512 e!40513)))

(declare-fun c!8143 () Bool)

(assert (=> b!61688 (= c!8143 (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(declare-fun bm!4760 () Bool)

(assert (=> bm!4760 (= call!4763 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (ite (and c!7887 c!7877) lt!24853 (extraKeys!1949 newMap!16)) (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16)) (minValue!1980 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2066 newMap!16)))))

(declare-fun b!61689 () Bool)

(declare-fun e!40517 () Bool)

(assert (=> b!61689 (= e!40512 e!40517)))

(assert (=> b!61689 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(declare-fun res!33954 () Bool)

(assert (=> b!61689 (= res!33954 (contains!682 lt!25547 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61689 (=> (not res!33954) (not e!40517))))

(declare-fun b!61690 () Bool)

(declare-fun e!40514 () ListLongMap!1347)

(assert (=> b!61690 (= e!40514 e!40516)))

(declare-fun c!8145 () Bool)

(assert (=> b!61690 (= c!8145 (validKeyInArray!0 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61691 () Bool)

(assert (=> b!61691 (= e!40511 (validKeyInArray!0 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61691 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!61692 () Bool)

(declare-fun res!33956 () Bool)

(assert (=> b!61692 (=> (not res!33956) (not e!40515))))

(assert (=> b!61692 (= res!33956 (not (contains!682 lt!25547 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!61693 () Bool)

(assert (=> b!61693 (= e!40514 (ListLongMap!1348 Nil!1423))))

(declare-fun b!61695 () Bool)

(assert (=> b!61695 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(assert (=> b!61695 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2016 (_values!2049 newMap!16))))))

(assert (=> b!61695 (= e!40517 (= (apply!67 lt!25547 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)) (get!1081 (select (arr!1785 (_values!2049 newMap!16)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2066 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!12355 () Bool)

(assert (=> d!12355 e!40515))

(declare-fun res!33953 () Bool)

(assert (=> d!12355 (=> (not res!33953) (not e!40515))))

(assert (=> d!12355 (= res!33953 (not (contains!682 lt!25547 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12355 (= lt!25547 e!40514)))

(declare-fun c!8142 () Bool)

(assert (=> d!12355 (= c!8142 (bvsge #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(assert (=> d!12355 (validMask!0 (mask!5962 newMap!16))))

(assert (=> d!12355 (= (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (ite (and c!7887 c!7877) lt!24853 (extraKeys!1949 newMap!16)) (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16)) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)) lt!25547)))

(declare-fun b!61694 () Bool)

(assert (=> b!61694 (= e!40513 (= lt!25547 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (ite (and c!7887 c!7877) lt!24853 (extraKeys!1949 newMap!16)) (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16)) (minValue!1980 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2066 newMap!16))))))

(assert (= (and d!12355 c!8142) b!61693))

(assert (= (and d!12355 (not c!8142)) b!61690))

(assert (= (and b!61690 c!8145) b!61687))

(assert (= (and b!61690 (not c!8145)) b!61684))

(assert (= (or b!61687 b!61684) bm!4760))

(assert (= (and d!12355 res!33953) b!61692))

(assert (= (and b!61692 res!33956) b!61686))

(assert (= (and b!61686 res!33955) b!61691))

(assert (= (and b!61686 c!8144) b!61689))

(assert (= (and b!61686 (not c!8144)) b!61688))

(assert (= (and b!61689 res!33954) b!61695))

(assert (= (and b!61688 c!8143) b!61694))

(assert (= (and b!61688 (not c!8143)) b!61685))

(declare-fun b_lambda!2727 () Bool)

(assert (=> (not b_lambda!2727) (not b!61687)))

(assert (=> b!61687 t!4804))

(declare-fun b_and!3757 () Bool)

(assert (= b_and!3753 (and (=> t!4804 result!2427) b_and!3757)))

(assert (=> b!61687 t!4806))

(declare-fun b_and!3759 () Bool)

(assert (= b_and!3755 (and (=> t!4806 result!2429) b_and!3759)))

(declare-fun b_lambda!2729 () Bool)

(assert (=> (not b_lambda!2729) (not b!61695)))

(assert (=> b!61695 t!4804))

(declare-fun b_and!3761 () Bool)

(assert (= b_and!3757 (and (=> t!4804 result!2427) b_and!3761)))

(assert (=> b!61695 t!4806))

(declare-fun b_and!3763 () Bool)

(assert (= b_and!3759 (and (=> t!4806 result!2429) b_and!3763)))

(assert (=> b!61690 m!53277))

(assert (=> b!61690 m!53277))

(assert (=> b!61690 m!53279))

(assert (=> b!61689 m!53277))

(assert (=> b!61689 m!53277))

(declare-fun m!54809 () Bool)

(assert (=> b!61689 m!54809))

(assert (=> b!61695 m!53497))

(assert (=> b!61695 m!53389))

(assert (=> b!61695 m!53499))

(assert (=> b!61695 m!53497))

(assert (=> b!61695 m!53277))

(assert (=> b!61695 m!53389))

(assert (=> b!61695 m!53277))

(declare-fun m!54811 () Bool)

(assert (=> b!61695 m!54811))

(declare-fun m!54813 () Bool)

(assert (=> bm!4760 m!54813))

(assert (=> b!61694 m!54813))

(declare-fun m!54815 () Bool)

(assert (=> b!61692 m!54815))

(assert (=> b!61687 m!53497))

(assert (=> b!61687 m!53389))

(assert (=> b!61687 m!53499))

(assert (=> b!61687 m!53497))

(assert (=> b!61687 m!53277))

(assert (=> b!61687 m!53389))

(declare-fun m!54817 () Bool)

(assert (=> b!61687 m!54817))

(declare-fun m!54819 () Bool)

(assert (=> b!61687 m!54819))

(declare-fun m!54821 () Bool)

(assert (=> b!61687 m!54821))

(declare-fun m!54823 () Bool)

(assert (=> b!61687 m!54823))

(assert (=> b!61687 m!54817))

(assert (=> b!61691 m!53277))

(assert (=> b!61691 m!53277))

(assert (=> b!61691 m!53279))

(declare-fun m!54825 () Bool)

(assert (=> d!12355 m!54825))

(assert (=> d!12355 m!53287))

(declare-fun m!54827 () Bool)

(assert (=> b!61685 m!54827))

(assert (=> bm!4672 d!12355))

(declare-fun d!12357 () Bool)

(declare-fun res!33957 () Bool)

(declare-fun e!40518 () Bool)

(assert (=> d!12357 (=> res!33957 e!40518)))

(assert (=> d!12357 (= res!33957 (and ((_ is Cons!1422) (toList!689 lt!24917)) (= (_1!1022 (h!2004 (toList!689 lt!24917))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12357 (= (containsKey!129 (toList!689 lt!24917) #b0000000000000000000000000000000000000000000000000000000000000000) e!40518)))

(declare-fun b!61696 () Bool)

(declare-fun e!40519 () Bool)

(assert (=> b!61696 (= e!40518 e!40519)))

(declare-fun res!33958 () Bool)

(assert (=> b!61696 (=> (not res!33958) (not e!40519))))

(assert (=> b!61696 (= res!33958 (and (or (not ((_ is Cons!1422) (toList!689 lt!24917))) (bvsle (_1!1022 (h!2004 (toList!689 lt!24917))) #b0000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1422) (toList!689 lt!24917)) (bvslt (_1!1022 (h!2004 (toList!689 lt!24917))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!61697 () Bool)

(assert (=> b!61697 (= e!40519 (containsKey!129 (t!4792 (toList!689 lt!24917)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!12357 (not res!33957)) b!61696))

(assert (= (and b!61696 res!33958) b!61697))

(declare-fun m!54829 () Bool)

(assert (=> b!61697 m!54829))

(assert (=> d!11925 d!12357))

(assert (=> b!61048 d!12263))

(declare-fun d!12359 () Bool)

(declare-fun e!40521 () Bool)

(assert (=> d!12359 e!40521))

(declare-fun res!33959 () Bool)

(assert (=> d!12359 (=> res!33959 e!40521)))

(declare-fun lt!25551 () Bool)

(assert (=> d!12359 (= res!33959 (not lt!25551))))

(declare-fun lt!25552 () Bool)

(assert (=> d!12359 (= lt!25551 lt!25552)))

(declare-fun lt!25549 () Unit!1613)

(declare-fun e!40520 () Unit!1613)

(assert (=> d!12359 (= lt!25549 e!40520)))

(declare-fun c!8146 () Bool)

(assert (=> d!12359 (= c!8146 lt!25552)))

(assert (=> d!12359 (= lt!25552 (containsKey!129 (toList!689 lt!24932) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(assert (=> d!12359 (= (contains!682 lt!24932 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!25551)))

(declare-fun b!61698 () Bool)

(declare-fun lt!25550 () Unit!1613)

(assert (=> b!61698 (= e!40520 lt!25550)))

(assert (=> b!61698 (= lt!25550 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 lt!24932) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(assert (=> b!61698 (isDefined!78 (getValueByKey!126 (toList!689 lt!24932) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun b!61699 () Bool)

(declare-fun Unit!1662 () Unit!1613)

(assert (=> b!61699 (= e!40520 Unit!1662)))

(declare-fun b!61700 () Bool)

(assert (=> b!61700 (= e!40521 (isDefined!78 (getValueByKey!126 (toList!689 lt!24932) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(assert (= (and d!12359 c!8146) b!61698))

(assert (= (and d!12359 (not c!8146)) b!61699))

(assert (= (and d!12359 (not res!33959)) b!61700))

(declare-fun m!54831 () Bool)

(assert (=> d!12359 m!54831))

(declare-fun m!54833 () Bool)

(assert (=> b!61698 m!54833))

(assert (=> b!61698 m!53273))

(assert (=> b!61698 m!53273))

(declare-fun m!54835 () Bool)

(assert (=> b!61698 m!54835))

(assert (=> b!61700 m!53273))

(assert (=> b!61700 m!53273))

(assert (=> b!61700 m!54835))

(assert (=> d!11909 d!12359))

(declare-fun b!61704 () Bool)

(declare-fun e!40523 () Option!132)

(assert (=> b!61704 (= e!40523 None!130)))

(declare-fun b!61702 () Bool)

(declare-fun e!40522 () Option!132)

(assert (=> b!61702 (= e!40522 e!40523)))

(declare-fun c!8148 () Bool)

(assert (=> b!61702 (= c!8148 (and ((_ is Cons!1422) lt!24934) (not (= (_1!1022 (h!2004 lt!24934)) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))))

(declare-fun b!61701 () Bool)

(assert (=> b!61701 (= e!40522 (Some!131 (_2!1022 (h!2004 lt!24934))))))

(declare-fun b!61703 () Bool)

(assert (=> b!61703 (= e!40523 (getValueByKey!126 (t!4792 lt!24934) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun d!12361 () Bool)

(declare-fun c!8147 () Bool)

(assert (=> d!12361 (= c!8147 (and ((_ is Cons!1422) lt!24934) (= (_1!1022 (h!2004 lt!24934)) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(assert (=> d!12361 (= (getValueByKey!126 lt!24934 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) e!40522)))

(assert (= (and d!12361 c!8147) b!61701))

(assert (= (and d!12361 (not c!8147)) b!61702))

(assert (= (and b!61702 c!8148) b!61703))

(assert (= (and b!61702 (not c!8148)) b!61704))

(declare-fun m!54837 () Bool)

(assert (=> b!61703 m!54837))

(assert (=> d!11909 d!12361))

(declare-fun d!12363 () Bool)

(assert (=> d!12363 (= (getValueByKey!126 lt!24934 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) (Some!131 (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun lt!25553 () Unit!1613)

(assert (=> d!12363 (= lt!25553 (choose!332 lt!24934 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun e!40524 () Bool)

(assert (=> d!12363 e!40524))

(declare-fun res!33960 () Bool)

(assert (=> d!12363 (=> (not res!33960) (not e!40524))))

(assert (=> d!12363 (= res!33960 (isStrictlySorted!272 lt!24934))))

(assert (=> d!12363 (= (lemmaContainsTupThenGetReturnValue!43 lt!24934 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!25553)))

(declare-fun b!61705 () Bool)

(declare-fun res!33961 () Bool)

(assert (=> b!61705 (=> (not res!33961) (not e!40524))))

(assert (=> b!61705 (= res!33961 (containsKey!129 lt!24934 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun b!61706 () Bool)

(assert (=> b!61706 (= e!40524 (contains!685 lt!24934 (tuple2!2023 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(assert (= (and d!12363 res!33960) b!61705))

(assert (= (and b!61705 res!33961) b!61706))

(assert (=> d!12363 m!53267))

(declare-fun m!54839 () Bool)

(assert (=> d!12363 m!54839))

(declare-fun m!54841 () Bool)

(assert (=> d!12363 m!54841))

(declare-fun m!54843 () Bool)

(assert (=> b!61705 m!54843))

(declare-fun m!54845 () Bool)

(assert (=> b!61706 m!54845))

(assert (=> d!11909 d!12363))

(declare-fun bm!4761 () Bool)

(declare-fun call!4766 () List!1426)

(declare-fun call!4764 () List!1426)

(assert (=> bm!4761 (= call!4766 call!4764)))

(declare-fun b!61707 () Bool)

(declare-fun e!40527 () List!1426)

(declare-fun call!4765 () List!1426)

(assert (=> b!61707 (= e!40527 call!4765)))

(declare-fun bm!4762 () Bool)

(declare-fun e!40525 () List!1426)

(declare-fun c!8149 () Bool)

(assert (=> bm!4762 (= call!4764 ($colon$colon!60 e!40525 (ite c!8149 (h!2004 (toList!689 call!4646)) (tuple2!2023 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))))

(declare-fun c!8151 () Bool)

(assert (=> bm!4762 (= c!8151 c!8149)))

(declare-fun b!61708 () Bool)

(assert (=> b!61708 (= e!40525 (insertStrictlySorted!46 (t!4792 (toList!689 call!4646)) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun b!61709 () Bool)

(declare-fun e!40526 () Bool)

(declare-fun lt!25554 () List!1426)

(assert (=> b!61709 (= e!40526 (contains!685 lt!25554 (tuple2!2023 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(declare-fun bm!4763 () Bool)

(assert (=> bm!4763 (= call!4765 call!4766)))

(declare-fun b!61710 () Bool)

(declare-fun res!33963 () Bool)

(assert (=> b!61710 (=> (not res!33963) (not e!40526))))

(assert (=> b!61710 (= res!33963 (containsKey!129 lt!25554 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun b!61711 () Bool)

(declare-fun e!40528 () List!1426)

(declare-fun e!40529 () List!1426)

(assert (=> b!61711 (= e!40528 e!40529)))

(declare-fun c!8150 () Bool)

(assert (=> b!61711 (= c!8150 (and ((_ is Cons!1422) (toList!689 call!4646)) (= (_1!1022 (h!2004 (toList!689 call!4646))) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(declare-fun b!61712 () Bool)

(declare-fun c!8152 () Bool)

(assert (=> b!61712 (= c!8152 (and ((_ is Cons!1422) (toList!689 call!4646)) (bvsgt (_1!1022 (h!2004 (toList!689 call!4646))) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(assert (=> b!61712 (= e!40529 e!40527)))

(declare-fun d!12365 () Bool)

(assert (=> d!12365 e!40526))

(declare-fun res!33962 () Bool)

(assert (=> d!12365 (=> (not res!33962) (not e!40526))))

(assert (=> d!12365 (= res!33962 (isStrictlySorted!272 lt!25554))))

(assert (=> d!12365 (= lt!25554 e!40528)))

(assert (=> d!12365 (= c!8149 (and ((_ is Cons!1422) (toList!689 call!4646)) (bvslt (_1!1022 (h!2004 (toList!689 call!4646))) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(assert (=> d!12365 (isStrictlySorted!272 (toList!689 call!4646))))

(assert (=> d!12365 (= (insertStrictlySorted!46 (toList!689 call!4646) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!25554)))

(declare-fun b!61713 () Bool)

(assert (=> b!61713 (= e!40525 (ite c!8150 (t!4792 (toList!689 call!4646)) (ite c!8152 (Cons!1422 (h!2004 (toList!689 call!4646)) (t!4792 (toList!689 call!4646))) Nil!1423)))))

(declare-fun b!61714 () Bool)

(assert (=> b!61714 (= e!40528 call!4764)))

(declare-fun b!61715 () Bool)

(assert (=> b!61715 (= e!40529 call!4766)))

(declare-fun b!61716 () Bool)

(assert (=> b!61716 (= e!40527 call!4765)))

(assert (= (and d!12365 c!8149) b!61714))

(assert (= (and d!12365 (not c!8149)) b!61711))

(assert (= (and b!61711 c!8150) b!61715))

(assert (= (and b!61711 (not c!8150)) b!61712))

(assert (= (and b!61712 c!8152) b!61716))

(assert (= (and b!61712 (not c!8152)) b!61707))

(assert (= (or b!61716 b!61707) bm!4763))

(assert (= (or b!61715 bm!4763) bm!4761))

(assert (= (or b!61714 bm!4761) bm!4762))

(assert (= (and bm!4762 c!8151) b!61708))

(assert (= (and bm!4762 (not c!8151)) b!61713))

(assert (= (and d!12365 res!33962) b!61710))

(assert (= (and b!61710 res!33963) b!61709))

(declare-fun m!54847 () Bool)

(assert (=> b!61709 m!54847))

(declare-fun m!54849 () Bool)

(assert (=> bm!4762 m!54849))

(declare-fun m!54851 () Bool)

(assert (=> b!61708 m!54851))

(declare-fun m!54853 () Bool)

(assert (=> d!12365 m!54853))

(declare-fun m!54855 () Bool)

(assert (=> d!12365 m!54855))

(declare-fun m!54857 () Bool)

(assert (=> b!61710 m!54857))

(assert (=> d!11909 d!12365))

(declare-fun d!12367 () Bool)

(assert (=> d!12367 (= (apply!67 lt!25112 lt!25100) (get!1085 (getValueByKey!126 (toList!689 lt!25112) lt!25100)))))

(declare-fun bs!2678 () Bool)

(assert (= bs!2678 d!12367))

(declare-fun m!54859 () Bool)

(assert (=> bs!2678 m!54859))

(assert (=> bs!2678 m!54859))

(declare-fun m!54861 () Bool)

(assert (=> bs!2678 m!54861))

(assert (=> b!60984 d!12367))

(declare-fun d!12369 () Bool)

(assert (=> d!12369 (= (apply!67 (+!81 lt!25112 (tuple2!2023 lt!25099 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16)))) lt!25100) (apply!67 lt!25112 lt!25100))))

(declare-fun lt!25555 () Unit!1613)

(assert (=> d!12369 (= lt!25555 (choose!326 lt!25112 lt!25099 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16)) lt!25100))))

(declare-fun e!40530 () Bool)

(assert (=> d!12369 e!40530))

(declare-fun res!33964 () Bool)

(assert (=> d!12369 (=> (not res!33964) (not e!40530))))

(assert (=> d!12369 (= res!33964 (contains!682 lt!25112 lt!25100))))

(assert (=> d!12369 (= (addApplyDifferent!43 lt!25112 lt!25099 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16)) lt!25100) lt!25555)))

(declare-fun b!61717 () Bool)

(assert (=> b!61717 (= e!40530 (not (= lt!25100 lt!25099)))))

(assert (= (and d!12369 res!33964) b!61717))

(declare-fun m!54863 () Bool)

(assert (=> d!12369 m!54863))

(assert (=> d!12369 m!53531))

(declare-fun m!54865 () Bool)

(assert (=> d!12369 m!54865))

(assert (=> d!12369 m!53535))

(assert (=> d!12369 m!53537))

(assert (=> d!12369 m!53535))

(assert (=> b!60984 d!12369))

(declare-fun d!12371 () Bool)

(assert (=> d!12371 (= (apply!67 lt!25106 lt!25116) (get!1085 (getValueByKey!126 (toList!689 lt!25106) lt!25116)))))

(declare-fun bs!2679 () Bool)

(assert (= bs!2679 d!12371))

(declare-fun m!54867 () Bool)

(assert (=> bs!2679 m!54867))

(assert (=> bs!2679 m!54867))

(declare-fun m!54869 () Bool)

(assert (=> bs!2679 m!54869))

(assert (=> b!60984 d!12371))

(assert (=> b!60984 d!12355))

(declare-fun d!12373 () Bool)

(assert (=> d!12373 (= (apply!67 (+!81 lt!25109 (tuple2!2023 lt!25098 (minValue!1980 newMap!16))) lt!25104) (get!1085 (getValueByKey!126 (toList!689 (+!81 lt!25109 (tuple2!2023 lt!25098 (minValue!1980 newMap!16)))) lt!25104)))))

(declare-fun bs!2680 () Bool)

(assert (= bs!2680 d!12373))

(declare-fun m!54871 () Bool)

(assert (=> bs!2680 m!54871))

(assert (=> bs!2680 m!54871))

(declare-fun m!54873 () Bool)

(assert (=> bs!2680 m!54873))

(assert (=> b!60984 d!12373))

(declare-fun d!12375 () Bool)

(declare-fun e!40531 () Bool)

(assert (=> d!12375 e!40531))

(declare-fun res!33966 () Bool)

(assert (=> d!12375 (=> (not res!33966) (not e!40531))))

(declare-fun lt!25557 () ListLongMap!1347)

(assert (=> d!12375 (= res!33966 (contains!682 lt!25557 (_1!1022 (tuple2!2023 lt!25099 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16))))))))

(declare-fun lt!25559 () List!1426)

(assert (=> d!12375 (= lt!25557 (ListLongMap!1348 lt!25559))))

(declare-fun lt!25558 () Unit!1613)

(declare-fun lt!25556 () Unit!1613)

(assert (=> d!12375 (= lt!25558 lt!25556)))

(assert (=> d!12375 (= (getValueByKey!126 lt!25559 (_1!1022 (tuple2!2023 lt!25099 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16))))) (Some!131 (_2!1022 (tuple2!2023 lt!25099 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16))))))))

(assert (=> d!12375 (= lt!25556 (lemmaContainsTupThenGetReturnValue!43 lt!25559 (_1!1022 (tuple2!2023 lt!25099 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16)))) (_2!1022 (tuple2!2023 lt!25099 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16))))))))

(assert (=> d!12375 (= lt!25559 (insertStrictlySorted!46 (toList!689 lt!25112) (_1!1022 (tuple2!2023 lt!25099 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16)))) (_2!1022 (tuple2!2023 lt!25099 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16))))))))

(assert (=> d!12375 (= (+!81 lt!25112 (tuple2!2023 lt!25099 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16)))) lt!25557)))

(declare-fun b!61718 () Bool)

(declare-fun res!33965 () Bool)

(assert (=> b!61718 (=> (not res!33965) (not e!40531))))

(assert (=> b!61718 (= res!33965 (= (getValueByKey!126 (toList!689 lt!25557) (_1!1022 (tuple2!2023 lt!25099 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16))))) (Some!131 (_2!1022 (tuple2!2023 lt!25099 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16)))))))))

(declare-fun b!61719 () Bool)

(assert (=> b!61719 (= e!40531 (contains!685 (toList!689 lt!25557) (tuple2!2023 lt!25099 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16)))))))

(assert (= (and d!12375 res!33966) b!61718))

(assert (= (and b!61718 res!33965) b!61719))

(declare-fun m!54875 () Bool)

(assert (=> d!12375 m!54875))

(declare-fun m!54877 () Bool)

(assert (=> d!12375 m!54877))

(declare-fun m!54879 () Bool)

(assert (=> d!12375 m!54879))

(declare-fun m!54881 () Bool)

(assert (=> d!12375 m!54881))

(declare-fun m!54883 () Bool)

(assert (=> b!61718 m!54883))

(declare-fun m!54885 () Bool)

(assert (=> b!61719 m!54885))

(assert (=> b!60984 d!12375))

(declare-fun d!12377 () Bool)

(assert (=> d!12377 (= (apply!67 (+!81 lt!25106 (tuple2!2023 lt!25096 (minValue!1980 newMap!16))) lt!25116) (get!1085 (getValueByKey!126 (toList!689 (+!81 lt!25106 (tuple2!2023 lt!25096 (minValue!1980 newMap!16)))) lt!25116)))))

(declare-fun bs!2681 () Bool)

(assert (= bs!2681 d!12377))

(declare-fun m!54887 () Bool)

(assert (=> bs!2681 m!54887))

(assert (=> bs!2681 m!54887))

(declare-fun m!54889 () Bool)

(assert (=> bs!2681 m!54889))

(assert (=> b!60984 d!12377))

(declare-fun d!12379 () Bool)

(assert (=> d!12379 (contains!682 (+!81 lt!25105 (tuple2!2023 lt!25108 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16)))) lt!25102)))

(declare-fun lt!25560 () Unit!1613)

(assert (=> d!12379 (= lt!25560 (choose!327 lt!25105 lt!25108 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16)) lt!25102))))

(assert (=> d!12379 (contains!682 lt!25105 lt!25102)))

(assert (=> d!12379 (= (addStillContains!43 lt!25105 lt!25108 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16)) lt!25102) lt!25560)))

(declare-fun bs!2682 () Bool)

(assert (= bs!2682 d!12379))

(assert (=> bs!2682 m!53525))

(assert (=> bs!2682 m!53525))

(assert (=> bs!2682 m!53527))

(declare-fun m!54891 () Bool)

(assert (=> bs!2682 m!54891))

(declare-fun m!54893 () Bool)

(assert (=> bs!2682 m!54893))

(assert (=> b!60984 d!12379))

(declare-fun d!12381 () Bool)

(declare-fun e!40533 () Bool)

(assert (=> d!12381 e!40533))

(declare-fun res!33967 () Bool)

(assert (=> d!12381 (=> res!33967 e!40533)))

(declare-fun lt!25563 () Bool)

(assert (=> d!12381 (= res!33967 (not lt!25563))))

(declare-fun lt!25564 () Bool)

(assert (=> d!12381 (= lt!25563 lt!25564)))

(declare-fun lt!25561 () Unit!1613)

(declare-fun e!40532 () Unit!1613)

(assert (=> d!12381 (= lt!25561 e!40532)))

(declare-fun c!8153 () Bool)

(assert (=> d!12381 (= c!8153 lt!25564)))

(assert (=> d!12381 (= lt!25564 (containsKey!129 (toList!689 (+!81 lt!25105 (tuple2!2023 lt!25108 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16))))) lt!25102))))

(assert (=> d!12381 (= (contains!682 (+!81 lt!25105 (tuple2!2023 lt!25108 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16)))) lt!25102) lt!25563)))

(declare-fun b!61720 () Bool)

(declare-fun lt!25562 () Unit!1613)

(assert (=> b!61720 (= e!40532 lt!25562)))

(assert (=> b!61720 (= lt!25562 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 (+!81 lt!25105 (tuple2!2023 lt!25108 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16))))) lt!25102))))

(assert (=> b!61720 (isDefined!78 (getValueByKey!126 (toList!689 (+!81 lt!25105 (tuple2!2023 lt!25108 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16))))) lt!25102))))

(declare-fun b!61721 () Bool)

(declare-fun Unit!1663 () Unit!1613)

(assert (=> b!61721 (= e!40532 Unit!1663)))

(declare-fun b!61722 () Bool)

(assert (=> b!61722 (= e!40533 (isDefined!78 (getValueByKey!126 (toList!689 (+!81 lt!25105 (tuple2!2023 lt!25108 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16))))) lt!25102)))))

(assert (= (and d!12381 c!8153) b!61720))

(assert (= (and d!12381 (not c!8153)) b!61721))

(assert (= (and d!12381 (not res!33967)) b!61722))

(declare-fun m!54895 () Bool)

(assert (=> d!12381 m!54895))

(declare-fun m!54897 () Bool)

(assert (=> b!61720 m!54897))

(declare-fun m!54899 () Bool)

(assert (=> b!61720 m!54899))

(assert (=> b!61720 m!54899))

(declare-fun m!54901 () Bool)

(assert (=> b!61720 m!54901))

(assert (=> b!61722 m!54899))

(assert (=> b!61722 m!54899))

(assert (=> b!61722 m!54901))

(assert (=> b!60984 d!12381))

(declare-fun d!12383 () Bool)

(assert (=> d!12383 (= (apply!67 (+!81 lt!25109 (tuple2!2023 lt!25098 (minValue!1980 newMap!16))) lt!25104) (apply!67 lt!25109 lt!25104))))

(declare-fun lt!25565 () Unit!1613)

(assert (=> d!12383 (= lt!25565 (choose!326 lt!25109 lt!25098 (minValue!1980 newMap!16) lt!25104))))

(declare-fun e!40534 () Bool)

(assert (=> d!12383 e!40534))

(declare-fun res!33968 () Bool)

(assert (=> d!12383 (=> (not res!33968) (not e!40534))))

(assert (=> d!12383 (= res!33968 (contains!682 lt!25109 lt!25104))))

(assert (=> d!12383 (= (addApplyDifferent!43 lt!25109 lt!25098 (minValue!1980 newMap!16) lt!25104) lt!25565)))

(declare-fun b!61723 () Bool)

(assert (=> b!61723 (= e!40534 (not (= lt!25104 lt!25098)))))

(assert (= (and d!12383 res!33968) b!61723))

(declare-fun m!54903 () Bool)

(assert (=> d!12383 m!54903))

(assert (=> d!12383 m!53517))

(declare-fun m!54905 () Bool)

(assert (=> d!12383 m!54905))

(assert (=> d!12383 m!53515))

(assert (=> d!12383 m!53541))

(assert (=> d!12383 m!53515))

(assert (=> b!60984 d!12383))

(declare-fun d!12385 () Bool)

(declare-fun e!40535 () Bool)

(assert (=> d!12385 e!40535))

(declare-fun res!33970 () Bool)

(assert (=> d!12385 (=> (not res!33970) (not e!40535))))

(declare-fun lt!25567 () ListLongMap!1347)

(assert (=> d!12385 (= res!33970 (contains!682 lt!25567 (_1!1022 (tuple2!2023 lt!25108 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16))))))))

(declare-fun lt!25569 () List!1426)

(assert (=> d!12385 (= lt!25567 (ListLongMap!1348 lt!25569))))

(declare-fun lt!25568 () Unit!1613)

(declare-fun lt!25566 () Unit!1613)

(assert (=> d!12385 (= lt!25568 lt!25566)))

(assert (=> d!12385 (= (getValueByKey!126 lt!25569 (_1!1022 (tuple2!2023 lt!25108 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16))))) (Some!131 (_2!1022 (tuple2!2023 lt!25108 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16))))))))

(assert (=> d!12385 (= lt!25566 (lemmaContainsTupThenGetReturnValue!43 lt!25569 (_1!1022 (tuple2!2023 lt!25108 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16)))) (_2!1022 (tuple2!2023 lt!25108 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16))))))))

(assert (=> d!12385 (= lt!25569 (insertStrictlySorted!46 (toList!689 lt!25105) (_1!1022 (tuple2!2023 lt!25108 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16)))) (_2!1022 (tuple2!2023 lt!25108 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16))))))))

(assert (=> d!12385 (= (+!81 lt!25105 (tuple2!2023 lt!25108 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16)))) lt!25567)))

(declare-fun b!61724 () Bool)

(declare-fun res!33969 () Bool)

(assert (=> b!61724 (=> (not res!33969) (not e!40535))))

(assert (=> b!61724 (= res!33969 (= (getValueByKey!126 (toList!689 lt!25567) (_1!1022 (tuple2!2023 lt!25108 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16))))) (Some!131 (_2!1022 (tuple2!2023 lt!25108 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16)))))))))

(declare-fun b!61725 () Bool)

(assert (=> b!61725 (= e!40535 (contains!685 (toList!689 lt!25567) (tuple2!2023 lt!25108 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16)))))))

(assert (= (and d!12385 res!33970) b!61724))

(assert (= (and b!61724 res!33969) b!61725))

(declare-fun m!54907 () Bool)

(assert (=> d!12385 m!54907))

(declare-fun m!54909 () Bool)

(assert (=> d!12385 m!54909))

(declare-fun m!54911 () Bool)

(assert (=> d!12385 m!54911))

(declare-fun m!54913 () Bool)

(assert (=> d!12385 m!54913))

(declare-fun m!54915 () Bool)

(assert (=> b!61724 m!54915))

(declare-fun m!54917 () Bool)

(assert (=> b!61725 m!54917))

(assert (=> b!60984 d!12385))

(declare-fun d!12387 () Bool)

(declare-fun e!40536 () Bool)

(assert (=> d!12387 e!40536))

(declare-fun res!33972 () Bool)

(assert (=> d!12387 (=> (not res!33972) (not e!40536))))

(declare-fun lt!25571 () ListLongMap!1347)

(assert (=> d!12387 (= res!33972 (contains!682 lt!25571 (_1!1022 (tuple2!2023 lt!25098 (minValue!1980 newMap!16)))))))

(declare-fun lt!25573 () List!1426)

(assert (=> d!12387 (= lt!25571 (ListLongMap!1348 lt!25573))))

(declare-fun lt!25572 () Unit!1613)

(declare-fun lt!25570 () Unit!1613)

(assert (=> d!12387 (= lt!25572 lt!25570)))

(assert (=> d!12387 (= (getValueByKey!126 lt!25573 (_1!1022 (tuple2!2023 lt!25098 (minValue!1980 newMap!16)))) (Some!131 (_2!1022 (tuple2!2023 lt!25098 (minValue!1980 newMap!16)))))))

(assert (=> d!12387 (= lt!25570 (lemmaContainsTupThenGetReturnValue!43 lt!25573 (_1!1022 (tuple2!2023 lt!25098 (minValue!1980 newMap!16))) (_2!1022 (tuple2!2023 lt!25098 (minValue!1980 newMap!16)))))))

(assert (=> d!12387 (= lt!25573 (insertStrictlySorted!46 (toList!689 lt!25109) (_1!1022 (tuple2!2023 lt!25098 (minValue!1980 newMap!16))) (_2!1022 (tuple2!2023 lt!25098 (minValue!1980 newMap!16)))))))

(assert (=> d!12387 (= (+!81 lt!25109 (tuple2!2023 lt!25098 (minValue!1980 newMap!16))) lt!25571)))

(declare-fun b!61726 () Bool)

(declare-fun res!33971 () Bool)

(assert (=> b!61726 (=> (not res!33971) (not e!40536))))

(assert (=> b!61726 (= res!33971 (= (getValueByKey!126 (toList!689 lt!25571) (_1!1022 (tuple2!2023 lt!25098 (minValue!1980 newMap!16)))) (Some!131 (_2!1022 (tuple2!2023 lt!25098 (minValue!1980 newMap!16))))))))

(declare-fun b!61727 () Bool)

(assert (=> b!61727 (= e!40536 (contains!685 (toList!689 lt!25571) (tuple2!2023 lt!25098 (minValue!1980 newMap!16))))))

(assert (= (and d!12387 res!33972) b!61726))

(assert (= (and b!61726 res!33971) b!61727))

(declare-fun m!54919 () Bool)

(assert (=> d!12387 m!54919))

(declare-fun m!54921 () Bool)

(assert (=> d!12387 m!54921))

(declare-fun m!54923 () Bool)

(assert (=> d!12387 m!54923))

(declare-fun m!54925 () Bool)

(assert (=> d!12387 m!54925))

(declare-fun m!54927 () Bool)

(assert (=> b!61726 m!54927))

(declare-fun m!54929 () Bool)

(assert (=> b!61727 m!54929))

(assert (=> b!60984 d!12387))

(declare-fun d!12389 () Bool)

(assert (=> d!12389 (= (apply!67 (+!81 lt!25106 (tuple2!2023 lt!25096 (minValue!1980 newMap!16))) lt!25116) (apply!67 lt!25106 lt!25116))))

(declare-fun lt!25574 () Unit!1613)

(assert (=> d!12389 (= lt!25574 (choose!326 lt!25106 lt!25096 (minValue!1980 newMap!16) lt!25116))))

(declare-fun e!40537 () Bool)

(assert (=> d!12389 e!40537))

(declare-fun res!33973 () Bool)

(assert (=> d!12389 (=> (not res!33973) (not e!40537))))

(assert (=> d!12389 (= res!33973 (contains!682 lt!25106 lt!25116))))

(assert (=> d!12389 (= (addApplyDifferent!43 lt!25106 lt!25096 (minValue!1980 newMap!16) lt!25116) lt!25574)))

(declare-fun b!61728 () Bool)

(assert (=> b!61728 (= e!40537 (not (= lt!25116 lt!25096)))))

(assert (= (and d!12389 res!33973) b!61728))

(declare-fun m!54931 () Bool)

(assert (=> d!12389 m!54931))

(assert (=> d!12389 m!53513))

(declare-fun m!54933 () Bool)

(assert (=> d!12389 m!54933))

(assert (=> d!12389 m!53529))

(assert (=> d!12389 m!53533))

(assert (=> d!12389 m!53529))

(assert (=> b!60984 d!12389))

(declare-fun d!12391 () Bool)

(assert (=> d!12391 (= (apply!67 (+!81 lt!25112 (tuple2!2023 lt!25099 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16)))) lt!25100) (get!1085 (getValueByKey!126 (toList!689 (+!81 lt!25112 (tuple2!2023 lt!25099 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16))))) lt!25100)))))

(declare-fun bs!2683 () Bool)

(assert (= bs!2683 d!12391))

(declare-fun m!54935 () Bool)

(assert (=> bs!2683 m!54935))

(assert (=> bs!2683 m!54935))

(declare-fun m!54937 () Bool)

(assert (=> bs!2683 m!54937))

(assert (=> b!60984 d!12391))

(declare-fun d!12393 () Bool)

(declare-fun e!40538 () Bool)

(assert (=> d!12393 e!40538))

(declare-fun res!33975 () Bool)

(assert (=> d!12393 (=> (not res!33975) (not e!40538))))

(declare-fun lt!25576 () ListLongMap!1347)

(assert (=> d!12393 (= res!33975 (contains!682 lt!25576 (_1!1022 (tuple2!2023 lt!25096 (minValue!1980 newMap!16)))))))

(declare-fun lt!25578 () List!1426)

(assert (=> d!12393 (= lt!25576 (ListLongMap!1348 lt!25578))))

(declare-fun lt!25577 () Unit!1613)

(declare-fun lt!25575 () Unit!1613)

(assert (=> d!12393 (= lt!25577 lt!25575)))

(assert (=> d!12393 (= (getValueByKey!126 lt!25578 (_1!1022 (tuple2!2023 lt!25096 (minValue!1980 newMap!16)))) (Some!131 (_2!1022 (tuple2!2023 lt!25096 (minValue!1980 newMap!16)))))))

(assert (=> d!12393 (= lt!25575 (lemmaContainsTupThenGetReturnValue!43 lt!25578 (_1!1022 (tuple2!2023 lt!25096 (minValue!1980 newMap!16))) (_2!1022 (tuple2!2023 lt!25096 (minValue!1980 newMap!16)))))))

(assert (=> d!12393 (= lt!25578 (insertStrictlySorted!46 (toList!689 lt!25106) (_1!1022 (tuple2!2023 lt!25096 (minValue!1980 newMap!16))) (_2!1022 (tuple2!2023 lt!25096 (minValue!1980 newMap!16)))))))

(assert (=> d!12393 (= (+!81 lt!25106 (tuple2!2023 lt!25096 (minValue!1980 newMap!16))) lt!25576)))

(declare-fun b!61729 () Bool)

(declare-fun res!33974 () Bool)

(assert (=> b!61729 (=> (not res!33974) (not e!40538))))

(assert (=> b!61729 (= res!33974 (= (getValueByKey!126 (toList!689 lt!25576) (_1!1022 (tuple2!2023 lt!25096 (minValue!1980 newMap!16)))) (Some!131 (_2!1022 (tuple2!2023 lt!25096 (minValue!1980 newMap!16))))))))

(declare-fun b!61730 () Bool)

(assert (=> b!61730 (= e!40538 (contains!685 (toList!689 lt!25576) (tuple2!2023 lt!25096 (minValue!1980 newMap!16))))))

(assert (= (and d!12393 res!33975) b!61729))

(assert (= (and b!61729 res!33974) b!61730))

(declare-fun m!54939 () Bool)

(assert (=> d!12393 m!54939))

(declare-fun m!54941 () Bool)

(assert (=> d!12393 m!54941))

(declare-fun m!54943 () Bool)

(assert (=> d!12393 m!54943))

(declare-fun m!54945 () Bool)

(assert (=> d!12393 m!54945))

(declare-fun m!54947 () Bool)

(assert (=> b!61729 m!54947))

(declare-fun m!54949 () Bool)

(assert (=> b!61730 m!54949))

(assert (=> b!60984 d!12393))

(declare-fun d!12395 () Bool)

(assert (=> d!12395 (= (apply!67 lt!25109 lt!25104) (get!1085 (getValueByKey!126 (toList!689 lt!25109) lt!25104)))))

(declare-fun bs!2684 () Bool)

(assert (= bs!2684 d!12395))

(declare-fun m!54951 () Bool)

(assert (=> bs!2684 m!54951))

(assert (=> bs!2684 m!54951))

(declare-fun m!54953 () Bool)

(assert (=> bs!2684 m!54953))

(assert (=> b!60984 d!12395))

(assert (=> b!60875 d!11997))

(declare-fun b!61731 () Bool)

(declare-fun e!40541 () Bool)

(declare-fun e!40540 () Bool)

(assert (=> b!61731 (= e!40541 e!40540)))

(declare-fun lt!25580 () (_ BitVec 64))

(assert (=> b!61731 (= lt!25580 (select (arr!1784 (_keys!3694 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(declare-fun lt!25579 () Unit!1613)

(assert (=> b!61731 (= lt!25579 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!3694 newMap!16) lt!25580 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (=> b!61731 (arrayContainsKey!0 (_keys!3694 newMap!16) lt!25580 #b00000000000000000000000000000000)))

(declare-fun lt!25581 () Unit!1613)

(assert (=> b!61731 (= lt!25581 lt!25579)))

(declare-fun res!33976 () Bool)

(assert (=> b!61731 (= res!33976 (= (seekEntryOrOpen!0 (select (arr!1784 (_keys!3694 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (_keys!3694 newMap!16) (mask!5962 newMap!16)) (Found!222 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> b!61731 (=> (not res!33976) (not e!40540))))

(declare-fun b!61732 () Bool)

(declare-fun e!40539 () Bool)

(assert (=> b!61732 (= e!40539 e!40541)))

(declare-fun c!8154 () Bool)

(assert (=> b!61732 (= c!8154 (validKeyInArray!0 (select (arr!1784 (_keys!3694 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun d!12397 () Bool)

(declare-fun res!33977 () Bool)

(assert (=> d!12397 (=> res!33977 e!40539)))

(assert (=> d!12397 (= res!33977 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2015 (_keys!3694 newMap!16))))))

(assert (=> d!12397 (= (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!3694 newMap!16) (mask!5962 newMap!16)) e!40539)))

(declare-fun bm!4764 () Bool)

(declare-fun call!4767 () Bool)

(assert (=> bm!4764 (= call!4767 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (_keys!3694 newMap!16) (mask!5962 newMap!16)))))

(declare-fun b!61733 () Bool)

(assert (=> b!61733 (= e!40540 call!4767)))

(declare-fun b!61734 () Bool)

(assert (=> b!61734 (= e!40541 call!4767)))

(assert (= (and d!12397 (not res!33977)) b!61732))

(assert (= (and b!61732 c!8154) b!61731))

(assert (= (and b!61732 (not c!8154)) b!61734))

(assert (= (and b!61731 res!33976) b!61733))

(assert (= (or b!61733 b!61734) bm!4764))

(assert (=> b!61731 m!54179))

(declare-fun m!54955 () Bool)

(assert (=> b!61731 m!54955))

(declare-fun m!54957 () Bool)

(assert (=> b!61731 m!54957))

(assert (=> b!61731 m!54179))

(declare-fun m!54959 () Bool)

(assert (=> b!61731 m!54959))

(assert (=> b!61732 m!54179))

(assert (=> b!61732 m!54179))

(assert (=> b!61732 m!54213))

(declare-fun m!54961 () Bool)

(assert (=> bm!4764 m!54961))

(assert (=> bm!4680 d!12397))

(declare-fun d!12399 () Bool)

(declare-fun e!40543 () Bool)

(assert (=> d!12399 e!40543))

(declare-fun res!33978 () Bool)

(assert (=> d!12399 (=> res!33978 e!40543)))

(declare-fun lt!25584 () Bool)

(assert (=> d!12399 (= res!33978 (not lt!25584))))

(declare-fun lt!25585 () Bool)

(assert (=> d!12399 (= lt!25584 lt!25585)))

(declare-fun lt!25582 () Unit!1613)

(declare-fun e!40542 () Unit!1613)

(assert (=> d!12399 (= lt!25582 e!40542)))

(declare-fun c!8155 () Bool)

(assert (=> d!12399 (= c!8155 lt!25585)))

(assert (=> d!12399 (= lt!25585 (containsKey!129 (toList!689 lt!25160) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12399 (= (contains!682 lt!25160 #b1000000000000000000000000000000000000000000000000000000000000000) lt!25584)))

(declare-fun b!61735 () Bool)

(declare-fun lt!25583 () Unit!1613)

(assert (=> b!61735 (= e!40542 lt!25583)))

(assert (=> b!61735 (= lt!25583 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 lt!25160) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61735 (isDefined!78 (getValueByKey!126 (toList!689 lt!25160) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61736 () Bool)

(declare-fun Unit!1664 () Unit!1613)

(assert (=> b!61736 (= e!40542 Unit!1664)))

(declare-fun b!61737 () Bool)

(assert (=> b!61737 (= e!40543 (isDefined!78 (getValueByKey!126 (toList!689 lt!25160) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12399 c!8155) b!61735))

(assert (= (and d!12399 (not c!8155)) b!61736))

(assert (= (and d!12399 (not res!33978)) b!61737))

(declare-fun m!54963 () Bool)

(assert (=> d!12399 m!54963))

(declare-fun m!54965 () Bool)

(assert (=> b!61735 m!54965))

(declare-fun m!54967 () Bool)

(assert (=> b!61735 m!54967))

(assert (=> b!61735 m!54967))

(declare-fun m!54969 () Bool)

(assert (=> b!61735 m!54969))

(assert (=> b!61737 m!54967))

(assert (=> b!61737 m!54967))

(assert (=> b!61737 m!54969))

(assert (=> b!61038 d!12399))

(assert (=> b!60929 d!12147))

(assert (=> b!60929 d!12149))

(declare-fun d!12401 () Bool)

(assert (=> d!12401 (= (inRange!0 (ite c!7923 (index!3013 lt!25033) (ite c!7922 (index!3012 lt!25021) (index!3015 lt!25021))) (mask!5962 newMap!16)) (and (bvsge (ite c!7923 (index!3013 lt!25033) (ite c!7922 (index!3012 lt!25021) (index!3015 lt!25021))) #b00000000000000000000000000000000) (bvslt (ite c!7923 (index!3013 lt!25033) (ite c!7922 (index!3012 lt!25021) (index!3015 lt!25021))) (bvadd (mask!5962 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!4655 d!12401))

(declare-fun d!12403 () Bool)

(declare-fun e!40544 () Bool)

(assert (=> d!12403 e!40544))

(declare-fun res!33980 () Bool)

(assert (=> d!12403 (=> (not res!33980) (not e!40544))))

(declare-fun lt!25587 () ListLongMap!1347)

(assert (=> d!12403 (= res!33980 (contains!682 lt!25587 (_1!1022 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!25589 () List!1426)

(assert (=> d!12403 (= lt!25587 (ListLongMap!1348 lt!25589))))

(declare-fun lt!25588 () Unit!1613)

(declare-fun lt!25586 () Unit!1613)

(assert (=> d!12403 (= lt!25588 lt!25586)))

(assert (=> d!12403 (= (getValueByKey!126 lt!25589 (_1!1022 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!131 (_2!1022 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12403 (= lt!25586 (lemmaContainsTupThenGetReturnValue!43 lt!25589 (_1!1022 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12403 (= lt!25589 (insertStrictlySorted!46 (toList!689 (getCurrentListMap!390 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16))) (_1!1022 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12403 (= (+!81 (getCurrentListMap!390 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!25587)))

(declare-fun b!61738 () Bool)

(declare-fun res!33979 () Bool)

(assert (=> b!61738 (=> (not res!33979) (not e!40544))))

(assert (=> b!61738 (= res!33979 (= (getValueByKey!126 (toList!689 lt!25587) (_1!1022 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!131 (_2!1022 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!61739 () Bool)

(assert (=> b!61739 (= e!40544 (contains!685 (toList!689 lt!25587) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12403 res!33980) b!61738))

(assert (= (and b!61738 res!33979) b!61739))

(declare-fun m!54971 () Bool)

(assert (=> d!12403 m!54971))

(declare-fun m!54973 () Bool)

(assert (=> d!12403 m!54973))

(declare-fun m!54975 () Bool)

(assert (=> d!12403 m!54975))

(declare-fun m!54977 () Bool)

(assert (=> d!12403 m!54977))

(declare-fun m!54979 () Bool)

(assert (=> b!61738 m!54979))

(declare-fun m!54981 () Bool)

(assert (=> b!61739 m!54981))

(assert (=> d!11993 d!12403))

(assert (=> d!11993 d!12019))

(declare-fun b!61740 () Bool)

(declare-fun res!33983 () Bool)

(declare-fun e!40548 () Bool)

(assert (=> b!61740 (=> (not res!33983) (not e!40548))))

(declare-fun e!40547 () Bool)

(assert (=> b!61740 (= res!33983 e!40547)))

(declare-fun res!33987 () Bool)

(assert (=> b!61740 (=> res!33987 e!40547)))

(declare-fun e!40552 () Bool)

(assert (=> b!61740 (= res!33987 (not e!40552))))

(declare-fun res!33981 () Bool)

(assert (=> b!61740 (=> (not res!33981) (not e!40552))))

(assert (=> b!61740 (= res!33981 (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(declare-fun b!61741 () Bool)

(declare-fun e!40553 () Bool)

(declare-fun call!4773 () Bool)

(assert (=> b!61741 (= e!40553 (not call!4773))))

(declare-fun bm!4765 () Bool)

(declare-fun lt!25606 () ListLongMap!1347)

(assert (=> bm!4765 (= call!4773 (contains!682 lt!25606 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61742 () Bool)

(declare-fun e!40555 () Unit!1613)

(declare-fun Unit!1665 () Unit!1613)

(assert (=> b!61742 (= e!40555 Unit!1665)))

(declare-fun b!61743 () Bool)

(declare-fun e!40545 () Bool)

(assert (=> b!61743 (= e!40553 e!40545)))

(declare-fun res!33986 () Bool)

(assert (=> b!61743 (= res!33986 call!4773)))

(assert (=> b!61743 (=> (not res!33986) (not e!40545))))

(declare-fun b!61744 () Bool)

(declare-fun e!40551 () Bool)

(assert (=> b!61744 (= e!40551 (validKeyInArray!0 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61745 () Bool)

(declare-fun e!40556 () ListLongMap!1347)

(declare-fun call!4770 () ListLongMap!1347)

(assert (=> b!61745 (= e!40556 call!4770)))

(declare-fun call!4774 () ListLongMap!1347)

(declare-fun call!4772 () ListLongMap!1347)

(declare-fun c!8158 () Bool)

(declare-fun call!4769 () ListLongMap!1347)

(declare-fun c!8161 () Bool)

(declare-fun bm!4766 () Bool)

(assert (=> bm!4766 (= call!4774 (+!81 (ite c!8161 call!4769 (ite c!8158 call!4772 call!4770)) (ite (or c!8161 c!8158) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))))))

(declare-fun b!61747 () Bool)

(declare-fun call!4771 () ListLongMap!1347)

(assert (=> b!61747 (= e!40556 call!4771)))

(declare-fun b!61748 () Bool)

(assert (=> b!61748 (= e!40545 (= (apply!67 lt!25606 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1980 newMap!16)))))

(declare-fun b!61749 () Bool)

(declare-fun e!40554 () Bool)

(assert (=> b!61749 (= e!40547 e!40554)))

(declare-fun res!33984 () Bool)

(assert (=> b!61749 (=> (not res!33984) (not e!40554))))

(assert (=> b!61749 (= res!33984 (contains!682 lt!25606 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61749 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(declare-fun b!61750 () Bool)

(assert (=> b!61750 (= e!40548 e!40553)))

(declare-fun c!8159 () Bool)

(assert (=> b!61750 (= c!8159 (not (= (bvand lt!24853 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4767 () Bool)

(assert (=> bm!4767 (= call!4771 call!4774)))

(declare-fun b!61751 () Bool)

(declare-fun e!40550 () ListLongMap!1347)

(assert (=> b!61751 (= e!40550 call!4771)))

(declare-fun bm!4768 () Bool)

(declare-fun call!4768 () Bool)

(assert (=> bm!4768 (= call!4768 (contains!682 lt!25606 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61752 () Bool)

(declare-fun e!40546 () ListLongMap!1347)

(assert (=> b!61752 (= e!40546 e!40550)))

(assert (=> b!61752 (= c!8158 (and (not (= (bvand lt!24853 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!24853 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!61753 () Bool)

(declare-fun e!40549 () Bool)

(assert (=> b!61753 (= e!40549 (= (apply!67 lt!25606 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!61754 () Bool)

(declare-fun e!40557 () Bool)

(assert (=> b!61754 (= e!40557 e!40549)))

(declare-fun res!33982 () Bool)

(assert (=> b!61754 (= res!33982 call!4768)))

(assert (=> b!61754 (=> (not res!33982) (not e!40549))))

(declare-fun bm!4769 () Bool)

(assert (=> bm!4769 (= call!4770 call!4772)))

(declare-fun b!61755 () Bool)

(assert (=> b!61755 (= e!40552 (validKeyInArray!0 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61756 () Bool)

(assert (=> b!61756 (= e!40546 (+!81 call!4774 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))))))

(declare-fun bm!4770 () Bool)

(assert (=> bm!4770 (= call!4769 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) lt!24853 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun bm!4771 () Bool)

(assert (=> bm!4771 (= call!4772 call!4769)))

(declare-fun b!61757 () Bool)

(declare-fun c!8160 () Bool)

(assert (=> b!61757 (= c!8160 (and (not (= (bvand lt!24853 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!24853 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!61757 (= e!40550 e!40556)))

(declare-fun b!61758 () Bool)

(assert (=> b!61758 (= e!40554 (= (apply!67 lt!25606 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)) (get!1081 (select (arr!1785 (_values!2049 newMap!16)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2066 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!61758 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2016 (_values!2049 newMap!16))))))

(assert (=> b!61758 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(declare-fun d!12405 () Bool)

(assert (=> d!12405 e!40548))

(declare-fun res!33989 () Bool)

(assert (=> d!12405 (=> (not res!33989) (not e!40548))))

(assert (=> d!12405 (= res!33989 (or (bvsge #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))))

(declare-fun lt!25592 () ListLongMap!1347)

(assert (=> d!12405 (= lt!25606 lt!25592)))

(declare-fun lt!25608 () Unit!1613)

(assert (=> d!12405 (= lt!25608 e!40555)))

(declare-fun c!8157 () Bool)

(assert (=> d!12405 (= c!8157 e!40551)))

(declare-fun res!33985 () Bool)

(assert (=> d!12405 (=> (not res!33985) (not e!40551))))

(assert (=> d!12405 (= res!33985 (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(assert (=> d!12405 (= lt!25592 e!40546)))

(assert (=> d!12405 (= c!8161 (and (not (= (bvand lt!24853 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!24853 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12405 (validMask!0 (mask!5962 newMap!16))))

(assert (=> d!12405 (= (getCurrentListMap!390 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) lt!24853 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)) lt!25606)))

(declare-fun b!61746 () Bool)

(assert (=> b!61746 (= e!40557 (not call!4768))))

(declare-fun b!61759 () Bool)

(declare-fun lt!25598 () Unit!1613)

(assert (=> b!61759 (= e!40555 lt!25598)))

(declare-fun lt!25600 () ListLongMap!1347)

(assert (=> b!61759 (= lt!25600 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) lt!24853 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25603 () (_ BitVec 64))

(assert (=> b!61759 (= lt!25603 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25597 () (_ BitVec 64))

(assert (=> b!61759 (= lt!25597 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25590 () Unit!1613)

(assert (=> b!61759 (= lt!25590 (addStillContains!43 lt!25600 lt!25603 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!25597))))

(assert (=> b!61759 (contains!682 (+!81 lt!25600 (tuple2!2023 lt!25603 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!25597)))

(declare-fun lt!25609 () Unit!1613)

(assert (=> b!61759 (= lt!25609 lt!25590)))

(declare-fun lt!25601 () ListLongMap!1347)

(assert (=> b!61759 (= lt!25601 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) lt!24853 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25591 () (_ BitVec 64))

(assert (=> b!61759 (= lt!25591 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25611 () (_ BitVec 64))

(assert (=> b!61759 (= lt!25611 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25602 () Unit!1613)

(assert (=> b!61759 (= lt!25602 (addApplyDifferent!43 lt!25601 lt!25591 (minValue!1980 newMap!16) lt!25611))))

(assert (=> b!61759 (= (apply!67 (+!81 lt!25601 (tuple2!2023 lt!25591 (minValue!1980 newMap!16))) lt!25611) (apply!67 lt!25601 lt!25611))))

(declare-fun lt!25596 () Unit!1613)

(assert (=> b!61759 (= lt!25596 lt!25602)))

(declare-fun lt!25607 () ListLongMap!1347)

(assert (=> b!61759 (= lt!25607 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) lt!24853 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25594 () (_ BitVec 64))

(assert (=> b!61759 (= lt!25594 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25595 () (_ BitVec 64))

(assert (=> b!61759 (= lt!25595 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25610 () Unit!1613)

(assert (=> b!61759 (= lt!25610 (addApplyDifferent!43 lt!25607 lt!25594 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!25595))))

(assert (=> b!61759 (= (apply!67 (+!81 lt!25607 (tuple2!2023 lt!25594 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!25595) (apply!67 lt!25607 lt!25595))))

(declare-fun lt!25605 () Unit!1613)

(assert (=> b!61759 (= lt!25605 lt!25610)))

(declare-fun lt!25604 () ListLongMap!1347)

(assert (=> b!61759 (= lt!25604 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) lt!24853 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25593 () (_ BitVec 64))

(assert (=> b!61759 (= lt!25593 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25599 () (_ BitVec 64))

(assert (=> b!61759 (= lt!25599 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!61759 (= lt!25598 (addApplyDifferent!43 lt!25604 lt!25593 (minValue!1980 newMap!16) lt!25599))))

(assert (=> b!61759 (= (apply!67 (+!81 lt!25604 (tuple2!2023 lt!25593 (minValue!1980 newMap!16))) lt!25599) (apply!67 lt!25604 lt!25599))))

(declare-fun b!61760 () Bool)

(declare-fun res!33988 () Bool)

(assert (=> b!61760 (=> (not res!33988) (not e!40548))))

(assert (=> b!61760 (= res!33988 e!40557)))

(declare-fun c!8156 () Bool)

(assert (=> b!61760 (= c!8156 (not (= (bvand lt!24853 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (= (and d!12405 c!8161) b!61756))

(assert (= (and d!12405 (not c!8161)) b!61752))

(assert (= (and b!61752 c!8158) b!61751))

(assert (= (and b!61752 (not c!8158)) b!61757))

(assert (= (and b!61757 c!8160) b!61747))

(assert (= (and b!61757 (not c!8160)) b!61745))

(assert (= (or b!61747 b!61745) bm!4769))

(assert (= (or b!61751 bm!4769) bm!4771))

(assert (= (or b!61751 b!61747) bm!4767))

(assert (= (or b!61756 bm!4771) bm!4770))

(assert (= (or b!61756 bm!4767) bm!4766))

(assert (= (and d!12405 res!33985) b!61744))

(assert (= (and d!12405 c!8157) b!61759))

(assert (= (and d!12405 (not c!8157)) b!61742))

(assert (= (and d!12405 res!33989) b!61740))

(assert (= (and b!61740 res!33981) b!61755))

(assert (= (and b!61740 (not res!33987)) b!61749))

(assert (= (and b!61749 res!33984) b!61758))

(assert (= (and b!61740 res!33983) b!61760))

(assert (= (and b!61760 c!8156) b!61754))

(assert (= (and b!61760 (not c!8156)) b!61746))

(assert (= (and b!61754 res!33982) b!61753))

(assert (= (or b!61754 b!61746) bm!4768))

(assert (= (and b!61760 res!33988) b!61750))

(assert (= (and b!61750 c!8159) b!61743))

(assert (= (and b!61750 (not c!8159)) b!61741))

(assert (= (and b!61743 res!33986) b!61748))

(assert (= (or b!61743 b!61741) bm!4765))

(declare-fun b_lambda!2731 () Bool)

(assert (=> (not b_lambda!2731) (not b!61758)))

(assert (=> b!61758 t!4804))

(declare-fun b_and!3765 () Bool)

(assert (= b_and!3761 (and (=> t!4804 result!2427) b_and!3765)))

(assert (=> b!61758 t!4806))

(declare-fun b_and!3767 () Bool)

(assert (= b_and!3763 (and (=> t!4806 result!2429) b_and!3767)))

(assert (=> b!61744 m!53277))

(assert (=> b!61744 m!53277))

(assert (=> b!61744 m!53279))

(assert (=> b!61749 m!53277))

(assert (=> b!61749 m!53277))

(declare-fun m!54983 () Bool)

(assert (=> b!61749 m!54983))

(declare-fun m!54985 () Bool)

(assert (=> bm!4765 m!54985))

(declare-fun m!54987 () Bool)

(assert (=> bm!4768 m!54987))

(assert (=> b!61758 m!53497))

(assert (=> b!61758 m!53389))

(assert (=> b!61758 m!53499))

(assert (=> b!61758 m!53277))

(assert (=> b!61758 m!53389))

(assert (=> b!61758 m!53277))

(declare-fun m!54989 () Bool)

(assert (=> b!61758 m!54989))

(assert (=> b!61758 m!53497))

(declare-fun m!54991 () Bool)

(assert (=> b!61753 m!54991))

(declare-fun m!54993 () Bool)

(assert (=> b!61748 m!54993))

(assert (=> d!12405 m!53287))

(declare-fun m!54995 () Bool)

(assert (=> bm!4766 m!54995))

(declare-fun m!54997 () Bool)

(assert (=> b!61756 m!54997))

(assert (=> b!61755 m!53277))

(assert (=> b!61755 m!53277))

(assert (=> b!61755 m!53279))

(assert (=> bm!4770 m!53013))

(declare-fun m!54999 () Bool)

(assert (=> bm!4770 m!54999))

(declare-fun m!55001 () Bool)

(assert (=> b!61759 m!55001))

(declare-fun m!55003 () Bool)

(assert (=> b!61759 m!55003))

(declare-fun m!55005 () Bool)

(assert (=> b!61759 m!55005))

(assert (=> b!61759 m!53277))

(assert (=> b!61759 m!53013))

(declare-fun m!55007 () Bool)

(assert (=> b!61759 m!55007))

(assert (=> b!61759 m!53013))

(declare-fun m!55009 () Bool)

(assert (=> b!61759 m!55009))

(declare-fun m!55011 () Bool)

(assert (=> b!61759 m!55011))

(declare-fun m!55013 () Bool)

(assert (=> b!61759 m!55013))

(declare-fun m!55015 () Bool)

(assert (=> b!61759 m!55015))

(declare-fun m!55017 () Bool)

(assert (=> b!61759 m!55017))

(declare-fun m!55019 () Bool)

(assert (=> b!61759 m!55019))

(assert (=> b!61759 m!55017))

(declare-fun m!55021 () Bool)

(assert (=> b!61759 m!55021))

(declare-fun m!55023 () Bool)

(assert (=> b!61759 m!55023))

(assert (=> b!61759 m!55023))

(declare-fun m!55025 () Bool)

(assert (=> b!61759 m!55025))

(declare-fun m!55027 () Bool)

(assert (=> b!61759 m!55027))

(assert (=> b!61759 m!55003))

(declare-fun m!55029 () Bool)

(assert (=> b!61759 m!55029))

(assert (=> b!61759 m!55013))

(assert (=> b!61759 m!53013))

(assert (=> b!61759 m!54999))

(assert (=> d!11993 d!12405))

(assert (=> d!11993 d!12047))

(declare-fun d!12407 () Bool)

(assert (=> d!12407 (= (+!81 (getCurrentListMap!390 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!390 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) lt!24853 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(assert (=> d!12407 true))

(declare-fun _$7!47 () Unit!1613)

(assert (=> d!12407 (= (choose!328 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) lt!24853 (zeroValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!1980 newMap!16) (defaultEntry!2066 newMap!16)) _$7!47)))

(declare-fun bs!2685 () Bool)

(assert (= bs!2685 d!12407))

(assert (=> bs!2685 m!53203))

(assert (=> bs!2685 m!53203))

(assert (=> bs!2685 m!53687))

(assert (=> bs!2685 m!53013))

(assert (=> bs!2685 m!53685))

(assert (=> d!11993 d!12407))

(assert (=> b!60824 d!12103))

(declare-fun b!61761 () Bool)

(declare-fun e!40563 () ListLongMap!1347)

(declare-fun call!4775 () ListLongMap!1347)

(assert (=> b!61761 (= e!40563 call!4775)))

(declare-fun b!61762 () Bool)

(declare-fun e!40560 () Bool)

(declare-fun lt!25617 () ListLongMap!1347)

(assert (=> b!61762 (= e!40560 (isEmpty!302 lt!25617))))

(declare-fun b!61763 () Bool)

(declare-fun e!40562 () Bool)

(declare-fun e!40559 () Bool)

(assert (=> b!61763 (= e!40562 e!40559)))

(declare-fun c!8164 () Bool)

(declare-fun e!40558 () Bool)

(assert (=> b!61763 (= c!8164 e!40558)))

(declare-fun res!33992 () Bool)

(assert (=> b!61763 (=> (not res!33992) (not e!40558))))

(assert (=> b!61763 (= res!33992 (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(declare-fun b!61764 () Bool)

(declare-fun lt!25612 () Unit!1613)

(declare-fun lt!25615 () Unit!1613)

(assert (=> b!61764 (= lt!25612 lt!25615)))

(declare-fun lt!25616 () ListLongMap!1347)

(declare-fun lt!25614 () V!2857)

(declare-fun lt!25618 () (_ BitVec 64))

(declare-fun lt!25613 () (_ BitVec 64))

(assert (=> b!61764 (not (contains!682 (+!81 lt!25616 (tuple2!2023 lt!25613 lt!25614)) lt!25618))))

(assert (=> b!61764 (= lt!25615 (addStillNotContains!18 lt!25616 lt!25613 lt!25614 lt!25618))))

(assert (=> b!61764 (= lt!25618 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!61764 (= lt!25614 (get!1081 (select (arr!1785 (ite c!7884 (_values!2049 newMap!16) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (index!3013 lt!24842) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2066 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!61764 (= lt!25613 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!61764 (= lt!25616 call!4775)))

(assert (=> b!61764 (= e!40563 (+!81 call!4775 (tuple2!2023 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000) (get!1081 (select (arr!1785 (ite c!7884 (_values!2049 newMap!16) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (index!3013 lt!24842) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2066 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!61765 () Bool)

(assert (=> b!61765 (= e!40559 e!40560)))

(declare-fun c!8163 () Bool)

(assert (=> b!61765 (= c!8163 (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(declare-fun bm!4772 () Bool)

(assert (=> bm!4772 (= call!4775 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (ite c!7884 (_values!2049 newMap!16) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (index!3013 lt!24842) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16)))) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2066 newMap!16)))))

(declare-fun b!61766 () Bool)

(declare-fun e!40564 () Bool)

(assert (=> b!61766 (= e!40559 e!40564)))

(assert (=> b!61766 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(declare-fun res!33991 () Bool)

(assert (=> b!61766 (= res!33991 (contains!682 lt!25617 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61766 (=> (not res!33991) (not e!40564))))

(declare-fun b!61767 () Bool)

(declare-fun e!40561 () ListLongMap!1347)

(assert (=> b!61767 (= e!40561 e!40563)))

(declare-fun c!8165 () Bool)

(assert (=> b!61767 (= c!8165 (validKeyInArray!0 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61768 () Bool)

(assert (=> b!61768 (= e!40558 (validKeyInArray!0 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61768 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!61769 () Bool)

(declare-fun res!33993 () Bool)

(assert (=> b!61769 (=> (not res!33993) (not e!40562))))

(assert (=> b!61769 (= res!33993 (not (contains!682 lt!25617 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!61770 () Bool)

(assert (=> b!61770 (= e!40561 (ListLongMap!1348 Nil!1423))))

(declare-fun b!61772 () Bool)

(assert (=> b!61772 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(assert (=> b!61772 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2016 (ite c!7884 (_values!2049 newMap!16) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (index!3013 lt!24842) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16)))))))))

(assert (=> b!61772 (= e!40564 (= (apply!67 lt!25617 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)) (get!1081 (select (arr!1785 (ite c!7884 (_values!2049 newMap!16) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (index!3013 lt!24842) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2066 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!12409 () Bool)

(assert (=> d!12409 e!40562))

(declare-fun res!33990 () Bool)

(assert (=> d!12409 (=> (not res!33990) (not e!40562))))

(assert (=> d!12409 (= res!33990 (not (contains!682 lt!25617 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12409 (= lt!25617 e!40561)))

(declare-fun c!8162 () Bool)

(assert (=> d!12409 (= c!8162 (bvsge #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(assert (=> d!12409 (validMask!0 (mask!5962 newMap!16))))

(assert (=> d!12409 (= (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (ite c!7884 (_values!2049 newMap!16) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (index!3013 lt!24842) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16)))) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)) lt!25617)))

(declare-fun b!61771 () Bool)

(assert (=> b!61771 (= e!40560 (= lt!25617 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (ite c!7884 (_values!2049 newMap!16) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (index!3013 lt!24842) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16)))) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2066 newMap!16))))))

(assert (= (and d!12409 c!8162) b!61770))

(assert (= (and d!12409 (not c!8162)) b!61767))

(assert (= (and b!61767 c!8165) b!61764))

(assert (= (and b!61767 (not c!8165)) b!61761))

(assert (= (or b!61764 b!61761) bm!4772))

(assert (= (and d!12409 res!33990) b!61769))

(assert (= (and b!61769 res!33993) b!61763))

(assert (= (and b!61763 res!33992) b!61768))

(assert (= (and b!61763 c!8164) b!61766))

(assert (= (and b!61763 (not c!8164)) b!61765))

(assert (= (and b!61766 res!33991) b!61772))

(assert (= (and b!61765 c!8163) b!61771))

(assert (= (and b!61765 (not c!8163)) b!61762))

(declare-fun b_lambda!2733 () Bool)

(assert (=> (not b_lambda!2733) (not b!61764)))

(assert (=> b!61764 t!4804))

(declare-fun b_and!3769 () Bool)

(assert (= b_and!3765 (and (=> t!4804 result!2427) b_and!3769)))

(assert (=> b!61764 t!4806))

(declare-fun b_and!3771 () Bool)

(assert (= b_and!3767 (and (=> t!4806 result!2429) b_and!3771)))

(declare-fun b_lambda!2735 () Bool)

(assert (=> (not b_lambda!2735) (not b!61772)))

(assert (=> b!61772 t!4804))

(declare-fun b_and!3773 () Bool)

(assert (= b_and!3769 (and (=> t!4804 result!2427) b_and!3773)))

(assert (=> b!61772 t!4806))

(declare-fun b_and!3775 () Bool)

(assert (= b_and!3771 (and (=> t!4806 result!2429) b_and!3775)))

(assert (=> b!61767 m!53277))

(assert (=> b!61767 m!53277))

(assert (=> b!61767 m!53279))

(assert (=> b!61766 m!53277))

(assert (=> b!61766 m!53277))

(declare-fun m!55031 () Bool)

(assert (=> b!61766 m!55031))

(assert (=> b!61772 m!53387))

(assert (=> b!61772 m!53389))

(assert (=> b!61772 m!53391))

(assert (=> b!61772 m!53387))

(assert (=> b!61772 m!53277))

(assert (=> b!61772 m!53389))

(assert (=> b!61772 m!53277))

(declare-fun m!55033 () Bool)

(assert (=> b!61772 m!55033))

(declare-fun m!55035 () Bool)

(assert (=> bm!4772 m!55035))

(assert (=> b!61771 m!55035))

(declare-fun m!55037 () Bool)

(assert (=> b!61769 m!55037))

(assert (=> b!61764 m!53387))

(assert (=> b!61764 m!53389))

(assert (=> b!61764 m!53391))

(assert (=> b!61764 m!53387))

(assert (=> b!61764 m!53277))

(assert (=> b!61764 m!53389))

(declare-fun m!55039 () Bool)

(assert (=> b!61764 m!55039))

(declare-fun m!55041 () Bool)

(assert (=> b!61764 m!55041))

(declare-fun m!55043 () Bool)

(assert (=> b!61764 m!55043))

(declare-fun m!55045 () Bool)

(assert (=> b!61764 m!55045))

(assert (=> b!61764 m!55039))

(assert (=> b!61768 m!53277))

(assert (=> b!61768 m!53277))

(assert (=> b!61768 m!53279))

(declare-fun m!55047 () Bool)

(assert (=> d!12409 m!55047))

(assert (=> d!12409 m!53287))

(declare-fun m!55049 () Bool)

(assert (=> b!61762 m!55049))

(assert (=> bm!4662 d!12409))

(assert (=> b!61141 d!12103))

(declare-fun e!40578 () SeekEntryResult!222)

(declare-fun b!61791 () Bool)

(assert (=> b!61791 (= e!40578 (Intermediate!222 true (toIndex!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (mask!5962 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!61792 () Bool)

(declare-fun lt!25624 () SeekEntryResult!222)

(assert (=> b!61792 (and (bvsge (index!3014 lt!25624) #b00000000000000000000000000000000) (bvslt (index!3014 lt!25624) (size!2015 (_keys!3694 newMap!16))))))

(declare-fun e!40579 () Bool)

(assert (=> b!61792 (= e!40579 (= (select (arr!1784 (_keys!3694 newMap!16)) (index!3014 lt!25624)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61793 () Bool)

(declare-fun e!40576 () Bool)

(assert (=> b!61793 (= e!40576 (bvsge (x!10156 lt!25624) #b01111111111111111111111111111110))))

(declare-fun e!40577 () SeekEntryResult!222)

(declare-fun b!61794 () Bool)

(assert (=> b!61794 (= e!40577 (Intermediate!222 false (toIndex!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (mask!5962 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!61795 () Bool)

(assert (=> b!61795 (and (bvsge (index!3014 lt!25624) #b00000000000000000000000000000000) (bvslt (index!3014 lt!25624) (size!2015 (_keys!3694 newMap!16))))))

(declare-fun res!34001 () Bool)

(assert (=> b!61795 (= res!34001 (= (select (arr!1784 (_keys!3694 newMap!16)) (index!3014 lt!25624)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61795 (=> res!34001 e!40579)))

(declare-fun b!61796 () Bool)

(assert (=> b!61796 (= e!40578 e!40577)))

(declare-fun lt!25623 () (_ BitVec 64))

(declare-fun c!8174 () Bool)

(assert (=> b!61796 (= c!8174 (or (= lt!25623 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (= (bvadd lt!25623 lt!25623) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!61797 () Bool)

(declare-fun nextIndex!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!61797 (= e!40577 (seekKeyOrZeroOrLongMinValue!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (nextIndex!0 (toIndex!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (mask!5962 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (mask!5962 newMap!16)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (_keys!3694 newMap!16) (mask!5962 newMap!16)))))

(declare-fun b!61798 () Bool)

(assert (=> b!61798 (and (bvsge (index!3014 lt!25624) #b00000000000000000000000000000000) (bvslt (index!3014 lt!25624) (size!2015 (_keys!3694 newMap!16))))))

(declare-fun res!34000 () Bool)

(assert (=> b!61798 (= res!34000 (= (select (arr!1784 (_keys!3694 newMap!16)) (index!3014 lt!25624)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(assert (=> b!61798 (=> res!34000 e!40579)))

(declare-fun e!40575 () Bool)

(assert (=> b!61798 (= e!40575 e!40579)))

(declare-fun b!61799 () Bool)

(assert (=> b!61799 (= e!40576 e!40575)))

(declare-fun res!34002 () Bool)

(assert (=> b!61799 (= res!34002 (and ((_ is Intermediate!222) lt!25624) (not (undefined!1034 lt!25624)) (bvslt (x!10156 lt!25624) #b01111111111111111111111111111110) (bvsge (x!10156 lt!25624) #b00000000000000000000000000000000) (bvsge (x!10156 lt!25624) #b00000000000000000000000000000000)))))

(assert (=> b!61799 (=> (not res!34002) (not e!40575))))

(declare-fun d!12411 () Bool)

(assert (=> d!12411 e!40576))

(declare-fun c!8173 () Bool)

(assert (=> d!12411 (= c!8173 (and ((_ is Intermediate!222) lt!25624) (undefined!1034 lt!25624)))))

(assert (=> d!12411 (= lt!25624 e!40578)))

(declare-fun c!8172 () Bool)

(assert (=> d!12411 (= c!8172 (bvsge #b00000000000000000000000000000000 #b01111111111111111111111111111110))))

(assert (=> d!12411 (= lt!25623 (select (arr!1784 (_keys!3694 newMap!16)) (toIndex!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (mask!5962 newMap!16))))))

(assert (=> d!12411 (validMask!0 (mask!5962 newMap!16))))

(assert (=> d!12411 (= (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (mask!5962 newMap!16)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (_keys!3694 newMap!16) (mask!5962 newMap!16)) lt!25624)))

(assert (= (and d!12411 c!8172) b!61791))

(assert (= (and d!12411 (not c!8172)) b!61796))

(assert (= (and b!61796 c!8174) b!61794))

(assert (= (and b!61796 (not c!8174)) b!61797))

(assert (= (and d!12411 c!8173) b!61793))

(assert (= (and d!12411 (not c!8173)) b!61799))

(assert (= (and b!61799 res!34002) b!61798))

(assert (= (and b!61798 (not res!34000)) b!61795))

(assert (= (and b!61795 (not res!34001)) b!61792))

(assert (=> b!61797 m!53473))

(declare-fun m!55051 () Bool)

(assert (=> b!61797 m!55051))

(assert (=> b!61797 m!55051))

(assert (=> b!61797 m!52989))

(declare-fun m!55053 () Bool)

(assert (=> b!61797 m!55053))

(assert (=> d!12411 m!53473))

(declare-fun m!55055 () Bool)

(assert (=> d!12411 m!55055))

(assert (=> d!12411 m!53287))

(declare-fun m!55057 () Bool)

(assert (=> b!61795 m!55057))

(assert (=> b!61798 m!55057))

(assert (=> b!61792 m!55057))

(assert (=> d!11941 d!12411))

(declare-fun d!12413 () Bool)

(declare-fun lt!25630 () (_ BitVec 32))

(declare-fun lt!25629 () (_ BitVec 32))

(assert (=> d!12413 (= lt!25630 (bvmul (bvxor lt!25629 (bvlshr lt!25629 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))))

(assert (=> d!12413 (= lt!25629 ((_ extract 31 0) (bvand (bvxor (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (bvlshr (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))))

(assert (=> d!12413 (and (bvsge (mask!5962 newMap!16) #b00000000000000000000000000000000) (let ((res!34003 (let ((h!2007 ((_ extract 31 0) (bvand (bvxor (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (bvlshr (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))) (let ((x!10259 (bvmul (bvxor h!2007 (bvlshr h!2007 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))) (bvand (bvxor x!10259 (bvlshr x!10259 #b00000000000000000000000000001101)) (mask!5962 newMap!16)))))) (and (bvslt res!34003 (bvadd (mask!5962 newMap!16) #b00000000000000000000000000000001)) (bvsge res!34003 #b00000000000000000000000000000000))))))

(assert (=> d!12413 (= (toIndex!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (mask!5962 newMap!16)) (bvand (bvxor lt!25630 (bvlshr lt!25630 #b00000000000000000000000000001101)) (mask!5962 newMap!16)))))

(assert (=> d!11941 d!12413))

(assert (=> d!11941 d!12047))

(declare-fun d!12415 () Bool)

(assert (=> d!12415 (= (apply!67 (+!81 lt!25233 (tuple2!2023 lt!25220 (zeroValue!1980 newMap!16))) lt!25221) (apply!67 lt!25233 lt!25221))))

(declare-fun lt!25631 () Unit!1613)

(assert (=> d!12415 (= lt!25631 (choose!326 lt!25233 lt!25220 (zeroValue!1980 newMap!16) lt!25221))))

(declare-fun e!40580 () Bool)

(assert (=> d!12415 e!40580))

(declare-fun res!34004 () Bool)

(assert (=> d!12415 (=> (not res!34004) (not e!40580))))

(assert (=> d!12415 (= res!34004 (contains!682 lt!25233 lt!25221))))

(assert (=> d!12415 (= (addApplyDifferent!43 lt!25233 lt!25220 (zeroValue!1980 newMap!16) lt!25221) lt!25631)))

(declare-fun b!61800 () Bool)

(assert (=> b!61800 (= e!40580 (not (= lt!25221 lt!25220)))))

(assert (= (and d!12415 res!34004) b!61800))

(declare-fun m!55059 () Bool)

(assert (=> d!12415 m!55059))

(assert (=> d!12415 m!53823))

(declare-fun m!55061 () Bool)

(assert (=> d!12415 m!55061))

(assert (=> d!12415 m!53827))

(assert (=> d!12415 m!53829))

(assert (=> d!12415 m!53827))

(assert (=> b!61156 d!12415))

(declare-fun d!12417 () Bool)

(assert (=> d!12417 (= (apply!67 lt!25227 lt!25237) (get!1085 (getValueByKey!126 (toList!689 lt!25227) lt!25237)))))

(declare-fun bs!2686 () Bool)

(assert (= bs!2686 d!12417))

(declare-fun m!55063 () Bool)

(assert (=> bs!2686 m!55063))

(assert (=> bs!2686 m!55063))

(declare-fun m!55065 () Bool)

(assert (=> bs!2686 m!55065))

(assert (=> b!61156 d!12417))

(declare-fun d!12419 () Bool)

(assert (=> d!12419 (contains!682 (+!81 lt!25226 (tuple2!2023 lt!25229 (zeroValue!1980 newMap!16))) lt!25223)))

(declare-fun lt!25632 () Unit!1613)

(assert (=> d!12419 (= lt!25632 (choose!327 lt!25226 lt!25229 (zeroValue!1980 newMap!16) lt!25223))))

(assert (=> d!12419 (contains!682 lt!25226 lt!25223)))

(assert (=> d!12419 (= (addStillContains!43 lt!25226 lt!25229 (zeroValue!1980 newMap!16) lt!25223) lt!25632)))

(declare-fun bs!2687 () Bool)

(assert (= bs!2687 d!12419))

(assert (=> bs!2687 m!53817))

(assert (=> bs!2687 m!53817))

(assert (=> bs!2687 m!53819))

(declare-fun m!55067 () Bool)

(assert (=> bs!2687 m!55067))

(declare-fun m!55069 () Bool)

(assert (=> bs!2687 m!55069))

(assert (=> b!61156 d!12419))

(declare-fun d!12421 () Bool)

(declare-fun e!40581 () Bool)

(assert (=> d!12421 e!40581))

(declare-fun res!34006 () Bool)

(assert (=> d!12421 (=> (not res!34006) (not e!40581))))

(declare-fun lt!25634 () ListLongMap!1347)

(assert (=> d!12421 (= res!34006 (contains!682 lt!25634 (_1!1022 (tuple2!2023 lt!25217 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16))))))))

(declare-fun lt!25636 () List!1426)

(assert (=> d!12421 (= lt!25634 (ListLongMap!1348 lt!25636))))

(declare-fun lt!25635 () Unit!1613)

(declare-fun lt!25633 () Unit!1613)

(assert (=> d!12421 (= lt!25635 lt!25633)))

(assert (=> d!12421 (= (getValueByKey!126 lt!25636 (_1!1022 (tuple2!2023 lt!25217 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16))))) (Some!131 (_2!1022 (tuple2!2023 lt!25217 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16))))))))

(assert (=> d!12421 (= lt!25633 (lemmaContainsTupThenGetReturnValue!43 lt!25636 (_1!1022 (tuple2!2023 lt!25217 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)))) (_2!1022 (tuple2!2023 lt!25217 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16))))))))

(assert (=> d!12421 (= lt!25636 (insertStrictlySorted!46 (toList!689 lt!25227) (_1!1022 (tuple2!2023 lt!25217 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)))) (_2!1022 (tuple2!2023 lt!25217 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16))))))))

(assert (=> d!12421 (= (+!81 lt!25227 (tuple2!2023 lt!25217 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)))) lt!25634)))

(declare-fun b!61801 () Bool)

(declare-fun res!34005 () Bool)

(assert (=> b!61801 (=> (not res!34005) (not e!40581))))

(assert (=> b!61801 (= res!34005 (= (getValueByKey!126 (toList!689 lt!25634) (_1!1022 (tuple2!2023 lt!25217 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16))))) (Some!131 (_2!1022 (tuple2!2023 lt!25217 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)))))))))

(declare-fun b!61802 () Bool)

(assert (=> b!61802 (= e!40581 (contains!685 (toList!689 lt!25634) (tuple2!2023 lt!25217 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)))))))

(assert (= (and d!12421 res!34006) b!61801))

(assert (= (and b!61801 res!34005) b!61802))

(declare-fun m!55071 () Bool)

(assert (=> d!12421 m!55071))

(declare-fun m!55073 () Bool)

(assert (=> d!12421 m!55073))

(declare-fun m!55075 () Bool)

(assert (=> d!12421 m!55075))

(declare-fun m!55077 () Bool)

(assert (=> d!12421 m!55077))

(declare-fun m!55079 () Bool)

(assert (=> b!61801 m!55079))

(declare-fun m!55081 () Bool)

(assert (=> b!61802 m!55081))

(assert (=> b!61156 d!12421))

(declare-fun d!12423 () Bool)

(assert (=> d!12423 (= (apply!67 (+!81 lt!25230 (tuple2!2023 lt!25219 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)))) lt!25225) (apply!67 lt!25230 lt!25225))))

(declare-fun lt!25637 () Unit!1613)

(assert (=> d!12423 (= lt!25637 (choose!326 lt!25230 lt!25219 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)) lt!25225))))

(declare-fun e!40582 () Bool)

(assert (=> d!12423 e!40582))

(declare-fun res!34007 () Bool)

(assert (=> d!12423 (=> (not res!34007) (not e!40582))))

(assert (=> d!12423 (= res!34007 (contains!682 lt!25230 lt!25225))))

(assert (=> d!12423 (= (addApplyDifferent!43 lt!25230 lt!25219 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)) lt!25225) lt!25637)))

(declare-fun b!61803 () Bool)

(assert (=> b!61803 (= e!40582 (not (= lt!25225 lt!25219)))))

(assert (= (and d!12423 res!34007) b!61803))

(declare-fun m!55083 () Bool)

(assert (=> d!12423 m!55083))

(assert (=> d!12423 m!53809))

(declare-fun m!55085 () Bool)

(assert (=> d!12423 m!55085))

(assert (=> d!12423 m!53807))

(assert (=> d!12423 m!53833))

(assert (=> d!12423 m!53807))

(assert (=> b!61156 d!12423))

(declare-fun b!61804 () Bool)

(declare-fun e!40588 () ListLongMap!1347)

(declare-fun call!4776 () ListLongMap!1347)

(assert (=> b!61804 (= e!40588 call!4776)))

(declare-fun b!61805 () Bool)

(declare-fun e!40585 () Bool)

(declare-fun lt!25643 () ListLongMap!1347)

(assert (=> b!61805 (= e!40585 (isEmpty!302 lt!25643))))

(declare-fun b!61806 () Bool)

(declare-fun e!40587 () Bool)

(declare-fun e!40584 () Bool)

(assert (=> b!61806 (= e!40587 e!40584)))

(declare-fun c!8177 () Bool)

(declare-fun e!40583 () Bool)

(assert (=> b!61806 (= c!8177 e!40583)))

(declare-fun res!34010 () Bool)

(assert (=> b!61806 (=> (not res!34010) (not e!40583))))

(assert (=> b!61806 (= res!34010 (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(declare-fun b!61807 () Bool)

(declare-fun lt!25638 () Unit!1613)

(declare-fun lt!25641 () Unit!1613)

(assert (=> b!61807 (= lt!25638 lt!25641)))

(declare-fun lt!25640 () V!2857)

(declare-fun lt!25639 () (_ BitVec 64))

(declare-fun lt!25644 () (_ BitVec 64))

(declare-fun lt!25642 () ListLongMap!1347)

(assert (=> b!61807 (not (contains!682 (+!81 lt!25642 (tuple2!2023 lt!25639 lt!25640)) lt!25644))))

(assert (=> b!61807 (= lt!25641 (addStillNotContains!18 lt!25642 lt!25639 lt!25640 lt!25644))))

(assert (=> b!61807 (= lt!25644 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!61807 (= lt!25640 (get!1081 (select (arr!1785 (ite c!7887 (_values!2049 newMap!16) lt!24849)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2066 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!61807 (= lt!25639 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!61807 (= lt!25642 call!4776)))

(assert (=> b!61807 (= e!40588 (+!81 call!4776 (tuple2!2023 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000) (get!1081 (select (arr!1785 (ite c!7887 (_values!2049 newMap!16) lt!24849)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2066 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!61808 () Bool)

(assert (=> b!61808 (= e!40584 e!40585)))

(declare-fun c!8176 () Bool)

(assert (=> b!61808 (= c!8176 (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(declare-fun bm!4773 () Bool)

(assert (=> bm!4773 (= call!4776 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (ite c!7887 (_values!2049 newMap!16) lt!24849) (mask!5962 newMap!16) (ite c!7887 (ite c!7877 (extraKeys!1949 newMap!16) lt!24831) (extraKeys!1949 newMap!16)) (zeroValue!1980 newMap!16) (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2066 newMap!16)))))

(declare-fun b!61809 () Bool)

(declare-fun e!40589 () Bool)

(assert (=> b!61809 (= e!40584 e!40589)))

(assert (=> b!61809 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(declare-fun res!34009 () Bool)

(assert (=> b!61809 (= res!34009 (contains!682 lt!25643 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61809 (=> (not res!34009) (not e!40589))))

(declare-fun b!61810 () Bool)

(declare-fun e!40586 () ListLongMap!1347)

(assert (=> b!61810 (= e!40586 e!40588)))

(declare-fun c!8178 () Bool)

(assert (=> b!61810 (= c!8178 (validKeyInArray!0 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61811 () Bool)

(assert (=> b!61811 (= e!40583 (validKeyInArray!0 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61811 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!61812 () Bool)

(declare-fun res!34011 () Bool)

(assert (=> b!61812 (=> (not res!34011) (not e!40587))))

(assert (=> b!61812 (= res!34011 (not (contains!682 lt!25643 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!61813 () Bool)

(assert (=> b!61813 (= e!40586 (ListLongMap!1348 Nil!1423))))

(declare-fun b!61815 () Bool)

(assert (=> b!61815 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(assert (=> b!61815 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2016 (ite c!7887 (_values!2049 newMap!16) lt!24849))))))

(assert (=> b!61815 (= e!40589 (= (apply!67 lt!25643 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)) (get!1081 (select (arr!1785 (ite c!7887 (_values!2049 newMap!16) lt!24849)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2066 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun d!12425 () Bool)

(assert (=> d!12425 e!40587))

(declare-fun res!34008 () Bool)

(assert (=> d!12425 (=> (not res!34008) (not e!40587))))

(assert (=> d!12425 (= res!34008 (not (contains!682 lt!25643 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!12425 (= lt!25643 e!40586)))

(declare-fun c!8175 () Bool)

(assert (=> d!12425 (= c!8175 (bvsge #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(assert (=> d!12425 (validMask!0 (mask!5962 newMap!16))))

(assert (=> d!12425 (= (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (ite c!7887 (_values!2049 newMap!16) lt!24849) (mask!5962 newMap!16) (ite c!7887 (ite c!7877 (extraKeys!1949 newMap!16) lt!24831) (extraKeys!1949 newMap!16)) (zeroValue!1980 newMap!16) (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)) lt!25643)))

(declare-fun b!61814 () Bool)

(assert (=> b!61814 (= e!40585 (= lt!25643 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) (ite c!7887 (_values!2049 newMap!16) lt!24849) (mask!5962 newMap!16) (ite c!7887 (ite c!7877 (extraKeys!1949 newMap!16) lt!24831) (extraKeys!1949 newMap!16)) (zeroValue!1980 newMap!16) (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2066 newMap!16))))))

(assert (= (and d!12425 c!8175) b!61813))

(assert (= (and d!12425 (not c!8175)) b!61810))

(assert (= (and b!61810 c!8178) b!61807))

(assert (= (and b!61810 (not c!8178)) b!61804))

(assert (= (or b!61807 b!61804) bm!4773))

(assert (= (and d!12425 res!34008) b!61812))

(assert (= (and b!61812 res!34011) b!61806))

(assert (= (and b!61806 res!34010) b!61811))

(assert (= (and b!61806 c!8177) b!61809))

(assert (= (and b!61806 (not c!8177)) b!61808))

(assert (= (and b!61809 res!34009) b!61815))

(assert (= (and b!61808 c!8176) b!61814))

(assert (= (and b!61808 (not c!8176)) b!61805))

(declare-fun b_lambda!2737 () Bool)

(assert (=> (not b_lambda!2737) (not b!61807)))

(assert (=> b!61807 t!4804))

(declare-fun b_and!3777 () Bool)

(assert (= b_and!3773 (and (=> t!4804 result!2427) b_and!3777)))

(assert (=> b!61807 t!4806))

(declare-fun b_and!3779 () Bool)

(assert (= b_and!3775 (and (=> t!4806 result!2429) b_and!3779)))

(declare-fun b_lambda!2739 () Bool)

(assert (=> (not b_lambda!2739) (not b!61815)))

(assert (=> b!61815 t!4804))

(declare-fun b_and!3781 () Bool)

(assert (= b_and!3777 (and (=> t!4804 result!2427) b_and!3781)))

(assert (=> b!61815 t!4806))

(declare-fun b_and!3783 () Bool)

(assert (= b_and!3779 (and (=> t!4806 result!2429) b_and!3783)))

(assert (=> b!61810 m!53277))

(assert (=> b!61810 m!53277))

(assert (=> b!61810 m!53279))

(assert (=> b!61809 m!53277))

(assert (=> b!61809 m!53277))

(declare-fun m!55087 () Bool)

(assert (=> b!61809 m!55087))

(assert (=> b!61815 m!53789))

(assert (=> b!61815 m!53389))

(assert (=> b!61815 m!53791))

(assert (=> b!61815 m!53789))

(assert (=> b!61815 m!53277))

(assert (=> b!61815 m!53389))

(assert (=> b!61815 m!53277))

(declare-fun m!55089 () Bool)

(assert (=> b!61815 m!55089))

(declare-fun m!55091 () Bool)

(assert (=> bm!4773 m!55091))

(assert (=> b!61814 m!55091))

(declare-fun m!55093 () Bool)

(assert (=> b!61812 m!55093))

(assert (=> b!61807 m!53789))

(assert (=> b!61807 m!53389))

(assert (=> b!61807 m!53791))

(assert (=> b!61807 m!53789))

(assert (=> b!61807 m!53277))

(assert (=> b!61807 m!53389))

(declare-fun m!55095 () Bool)

(assert (=> b!61807 m!55095))

(declare-fun m!55097 () Bool)

(assert (=> b!61807 m!55097))

(declare-fun m!55099 () Bool)

(assert (=> b!61807 m!55099))

(declare-fun m!55101 () Bool)

(assert (=> b!61807 m!55101))

(assert (=> b!61807 m!55095))

(assert (=> b!61811 m!53277))

(assert (=> b!61811 m!53277))

(assert (=> b!61811 m!53279))

(declare-fun m!55103 () Bool)

(assert (=> d!12425 m!55103))

(assert (=> d!12425 m!53287))

(declare-fun m!55105 () Bool)

(assert (=> b!61805 m!55105))

(assert (=> b!61156 d!12425))

(declare-fun d!12427 () Bool)

(declare-fun e!40590 () Bool)

(assert (=> d!12427 e!40590))

(declare-fun res!34013 () Bool)

(assert (=> d!12427 (=> (not res!34013) (not e!40590))))

(declare-fun lt!25646 () ListLongMap!1347)

(assert (=> d!12427 (= res!34013 (contains!682 lt!25646 (_1!1022 (tuple2!2023 lt!25220 (zeroValue!1980 newMap!16)))))))

(declare-fun lt!25648 () List!1426)

(assert (=> d!12427 (= lt!25646 (ListLongMap!1348 lt!25648))))

(declare-fun lt!25647 () Unit!1613)

(declare-fun lt!25645 () Unit!1613)

(assert (=> d!12427 (= lt!25647 lt!25645)))

(assert (=> d!12427 (= (getValueByKey!126 lt!25648 (_1!1022 (tuple2!2023 lt!25220 (zeroValue!1980 newMap!16)))) (Some!131 (_2!1022 (tuple2!2023 lt!25220 (zeroValue!1980 newMap!16)))))))

(assert (=> d!12427 (= lt!25645 (lemmaContainsTupThenGetReturnValue!43 lt!25648 (_1!1022 (tuple2!2023 lt!25220 (zeroValue!1980 newMap!16))) (_2!1022 (tuple2!2023 lt!25220 (zeroValue!1980 newMap!16)))))))

(assert (=> d!12427 (= lt!25648 (insertStrictlySorted!46 (toList!689 lt!25233) (_1!1022 (tuple2!2023 lt!25220 (zeroValue!1980 newMap!16))) (_2!1022 (tuple2!2023 lt!25220 (zeroValue!1980 newMap!16)))))))

(assert (=> d!12427 (= (+!81 lt!25233 (tuple2!2023 lt!25220 (zeroValue!1980 newMap!16))) lt!25646)))

(declare-fun b!61816 () Bool)

(declare-fun res!34012 () Bool)

(assert (=> b!61816 (=> (not res!34012) (not e!40590))))

(assert (=> b!61816 (= res!34012 (= (getValueByKey!126 (toList!689 lt!25646) (_1!1022 (tuple2!2023 lt!25220 (zeroValue!1980 newMap!16)))) (Some!131 (_2!1022 (tuple2!2023 lt!25220 (zeroValue!1980 newMap!16))))))))

(declare-fun b!61817 () Bool)

(assert (=> b!61817 (= e!40590 (contains!685 (toList!689 lt!25646) (tuple2!2023 lt!25220 (zeroValue!1980 newMap!16))))))

(assert (= (and d!12427 res!34013) b!61816))

(assert (= (and b!61816 res!34012) b!61817))

(declare-fun m!55107 () Bool)

(assert (=> d!12427 m!55107))

(declare-fun m!55109 () Bool)

(assert (=> d!12427 m!55109))

(declare-fun m!55111 () Bool)

(assert (=> d!12427 m!55111))

(declare-fun m!55113 () Bool)

(assert (=> d!12427 m!55113))

(declare-fun m!55115 () Bool)

(assert (=> b!61816 m!55115))

(declare-fun m!55117 () Bool)

(assert (=> b!61817 m!55117))

(assert (=> b!61156 d!12427))

(declare-fun d!12429 () Bool)

(assert (=> d!12429 (= (apply!67 lt!25230 lt!25225) (get!1085 (getValueByKey!126 (toList!689 lt!25230) lt!25225)))))

(declare-fun bs!2688 () Bool)

(assert (= bs!2688 d!12429))

(declare-fun m!55119 () Bool)

(assert (=> bs!2688 m!55119))

(assert (=> bs!2688 m!55119))

(declare-fun m!55121 () Bool)

(assert (=> bs!2688 m!55121))

(assert (=> b!61156 d!12429))

(declare-fun d!12431 () Bool)

(assert (=> d!12431 (= (apply!67 (+!81 lt!25227 (tuple2!2023 lt!25217 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)))) lt!25237) (apply!67 lt!25227 lt!25237))))

(declare-fun lt!25649 () Unit!1613)

(assert (=> d!12431 (= lt!25649 (choose!326 lt!25227 lt!25217 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)) lt!25237))))

(declare-fun e!40591 () Bool)

(assert (=> d!12431 e!40591))

(declare-fun res!34014 () Bool)

(assert (=> d!12431 (=> (not res!34014) (not e!40591))))

(assert (=> d!12431 (= res!34014 (contains!682 lt!25227 lt!25237))))

(assert (=> d!12431 (= (addApplyDifferent!43 lt!25227 lt!25217 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)) lt!25237) lt!25649)))

(declare-fun b!61818 () Bool)

(assert (=> b!61818 (= e!40591 (not (= lt!25237 lt!25217)))))

(assert (= (and d!12431 res!34014) b!61818))

(declare-fun m!55123 () Bool)

(assert (=> d!12431 m!55123))

(assert (=> d!12431 m!53805))

(declare-fun m!55125 () Bool)

(assert (=> d!12431 m!55125))

(assert (=> d!12431 m!53821))

(assert (=> d!12431 m!53825))

(assert (=> d!12431 m!53821))

(assert (=> b!61156 d!12431))

(declare-fun d!12433 () Bool)

(assert (=> d!12433 (= (apply!67 (+!81 lt!25227 (tuple2!2023 lt!25217 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)))) lt!25237) (get!1085 (getValueByKey!126 (toList!689 (+!81 lt!25227 (tuple2!2023 lt!25217 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16))))) lt!25237)))))

(declare-fun bs!2689 () Bool)

(assert (= bs!2689 d!12433))

(declare-fun m!55127 () Bool)

(assert (=> bs!2689 m!55127))

(assert (=> bs!2689 m!55127))

(declare-fun m!55129 () Bool)

(assert (=> bs!2689 m!55129))

(assert (=> b!61156 d!12433))

(declare-fun d!12435 () Bool)

(assert (=> d!12435 (= (apply!67 lt!25233 lt!25221) (get!1085 (getValueByKey!126 (toList!689 lt!25233) lt!25221)))))

(declare-fun bs!2690 () Bool)

(assert (= bs!2690 d!12435))

(declare-fun m!55131 () Bool)

(assert (=> bs!2690 m!55131))

(assert (=> bs!2690 m!55131))

(declare-fun m!55133 () Bool)

(assert (=> bs!2690 m!55133))

(assert (=> b!61156 d!12435))

(declare-fun d!12437 () Bool)

(assert (=> d!12437 (= (apply!67 (+!81 lt!25233 (tuple2!2023 lt!25220 (zeroValue!1980 newMap!16))) lt!25221) (get!1085 (getValueByKey!126 (toList!689 (+!81 lt!25233 (tuple2!2023 lt!25220 (zeroValue!1980 newMap!16)))) lt!25221)))))

(declare-fun bs!2691 () Bool)

(assert (= bs!2691 d!12437))

(declare-fun m!55135 () Bool)

(assert (=> bs!2691 m!55135))

(assert (=> bs!2691 m!55135))

(declare-fun m!55137 () Bool)

(assert (=> bs!2691 m!55137))

(assert (=> b!61156 d!12437))

(declare-fun d!12439 () Bool)

(declare-fun e!40593 () Bool)

(assert (=> d!12439 e!40593))

(declare-fun res!34015 () Bool)

(assert (=> d!12439 (=> res!34015 e!40593)))

(declare-fun lt!25652 () Bool)

(assert (=> d!12439 (= res!34015 (not lt!25652))))

(declare-fun lt!25653 () Bool)

(assert (=> d!12439 (= lt!25652 lt!25653)))

(declare-fun lt!25650 () Unit!1613)

(declare-fun e!40592 () Unit!1613)

(assert (=> d!12439 (= lt!25650 e!40592)))

(declare-fun c!8179 () Bool)

(assert (=> d!12439 (= c!8179 lt!25653)))

(assert (=> d!12439 (= lt!25653 (containsKey!129 (toList!689 (+!81 lt!25226 (tuple2!2023 lt!25229 (zeroValue!1980 newMap!16)))) lt!25223))))

(assert (=> d!12439 (= (contains!682 (+!81 lt!25226 (tuple2!2023 lt!25229 (zeroValue!1980 newMap!16))) lt!25223) lt!25652)))

(declare-fun b!61819 () Bool)

(declare-fun lt!25651 () Unit!1613)

(assert (=> b!61819 (= e!40592 lt!25651)))

(assert (=> b!61819 (= lt!25651 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 (+!81 lt!25226 (tuple2!2023 lt!25229 (zeroValue!1980 newMap!16)))) lt!25223))))

(assert (=> b!61819 (isDefined!78 (getValueByKey!126 (toList!689 (+!81 lt!25226 (tuple2!2023 lt!25229 (zeroValue!1980 newMap!16)))) lt!25223))))

(declare-fun b!61820 () Bool)

(declare-fun Unit!1666 () Unit!1613)

(assert (=> b!61820 (= e!40592 Unit!1666)))

(declare-fun b!61821 () Bool)

(assert (=> b!61821 (= e!40593 (isDefined!78 (getValueByKey!126 (toList!689 (+!81 lt!25226 (tuple2!2023 lt!25229 (zeroValue!1980 newMap!16)))) lt!25223)))))

(assert (= (and d!12439 c!8179) b!61819))

(assert (= (and d!12439 (not c!8179)) b!61820))

(assert (= (and d!12439 (not res!34015)) b!61821))

(declare-fun m!55139 () Bool)

(assert (=> d!12439 m!55139))

(declare-fun m!55141 () Bool)

(assert (=> b!61819 m!55141))

(declare-fun m!55143 () Bool)

(assert (=> b!61819 m!55143))

(assert (=> b!61819 m!55143))

(declare-fun m!55145 () Bool)

(assert (=> b!61819 m!55145))

(assert (=> b!61821 m!55143))

(assert (=> b!61821 m!55143))

(assert (=> b!61821 m!55145))

(assert (=> b!61156 d!12439))

(declare-fun d!12441 () Bool)

(declare-fun e!40594 () Bool)

(assert (=> d!12441 e!40594))

(declare-fun res!34017 () Bool)

(assert (=> d!12441 (=> (not res!34017) (not e!40594))))

(declare-fun lt!25655 () ListLongMap!1347)

(assert (=> d!12441 (= res!34017 (contains!682 lt!25655 (_1!1022 (tuple2!2023 lt!25229 (zeroValue!1980 newMap!16)))))))

(declare-fun lt!25657 () List!1426)

(assert (=> d!12441 (= lt!25655 (ListLongMap!1348 lt!25657))))

(declare-fun lt!25656 () Unit!1613)

(declare-fun lt!25654 () Unit!1613)

(assert (=> d!12441 (= lt!25656 lt!25654)))

(assert (=> d!12441 (= (getValueByKey!126 lt!25657 (_1!1022 (tuple2!2023 lt!25229 (zeroValue!1980 newMap!16)))) (Some!131 (_2!1022 (tuple2!2023 lt!25229 (zeroValue!1980 newMap!16)))))))

(assert (=> d!12441 (= lt!25654 (lemmaContainsTupThenGetReturnValue!43 lt!25657 (_1!1022 (tuple2!2023 lt!25229 (zeroValue!1980 newMap!16))) (_2!1022 (tuple2!2023 lt!25229 (zeroValue!1980 newMap!16)))))))

(assert (=> d!12441 (= lt!25657 (insertStrictlySorted!46 (toList!689 lt!25226) (_1!1022 (tuple2!2023 lt!25229 (zeroValue!1980 newMap!16))) (_2!1022 (tuple2!2023 lt!25229 (zeroValue!1980 newMap!16)))))))

(assert (=> d!12441 (= (+!81 lt!25226 (tuple2!2023 lt!25229 (zeroValue!1980 newMap!16))) lt!25655)))

(declare-fun b!61822 () Bool)

(declare-fun res!34016 () Bool)

(assert (=> b!61822 (=> (not res!34016) (not e!40594))))

(assert (=> b!61822 (= res!34016 (= (getValueByKey!126 (toList!689 lt!25655) (_1!1022 (tuple2!2023 lt!25229 (zeroValue!1980 newMap!16)))) (Some!131 (_2!1022 (tuple2!2023 lt!25229 (zeroValue!1980 newMap!16))))))))

(declare-fun b!61823 () Bool)

(assert (=> b!61823 (= e!40594 (contains!685 (toList!689 lt!25655) (tuple2!2023 lt!25229 (zeroValue!1980 newMap!16))))))

(assert (= (and d!12441 res!34017) b!61822))

(assert (= (and b!61822 res!34016) b!61823))

(declare-fun m!55147 () Bool)

(assert (=> d!12441 m!55147))

(declare-fun m!55149 () Bool)

(assert (=> d!12441 m!55149))

(declare-fun m!55151 () Bool)

(assert (=> d!12441 m!55151))

(declare-fun m!55153 () Bool)

(assert (=> d!12441 m!55153))

(declare-fun m!55155 () Bool)

(assert (=> b!61822 m!55155))

(declare-fun m!55157 () Bool)

(assert (=> b!61823 m!55157))

(assert (=> b!61156 d!12441))

(declare-fun d!12443 () Bool)

(declare-fun e!40595 () Bool)

(assert (=> d!12443 e!40595))

(declare-fun res!34019 () Bool)

(assert (=> d!12443 (=> (not res!34019) (not e!40595))))

(declare-fun lt!25659 () ListLongMap!1347)

(assert (=> d!12443 (= res!34019 (contains!682 lt!25659 (_1!1022 (tuple2!2023 lt!25219 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16))))))))

(declare-fun lt!25661 () List!1426)

(assert (=> d!12443 (= lt!25659 (ListLongMap!1348 lt!25661))))

(declare-fun lt!25660 () Unit!1613)

(declare-fun lt!25658 () Unit!1613)

(assert (=> d!12443 (= lt!25660 lt!25658)))

(assert (=> d!12443 (= (getValueByKey!126 lt!25661 (_1!1022 (tuple2!2023 lt!25219 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16))))) (Some!131 (_2!1022 (tuple2!2023 lt!25219 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16))))))))

(assert (=> d!12443 (= lt!25658 (lemmaContainsTupThenGetReturnValue!43 lt!25661 (_1!1022 (tuple2!2023 lt!25219 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)))) (_2!1022 (tuple2!2023 lt!25219 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16))))))))

(assert (=> d!12443 (= lt!25661 (insertStrictlySorted!46 (toList!689 lt!25230) (_1!1022 (tuple2!2023 lt!25219 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)))) (_2!1022 (tuple2!2023 lt!25219 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16))))))))

(assert (=> d!12443 (= (+!81 lt!25230 (tuple2!2023 lt!25219 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)))) lt!25659)))

(declare-fun b!61824 () Bool)

(declare-fun res!34018 () Bool)

(assert (=> b!61824 (=> (not res!34018) (not e!40595))))

(assert (=> b!61824 (= res!34018 (= (getValueByKey!126 (toList!689 lt!25659) (_1!1022 (tuple2!2023 lt!25219 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16))))) (Some!131 (_2!1022 (tuple2!2023 lt!25219 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)))))))))

(declare-fun b!61825 () Bool)

(assert (=> b!61825 (= e!40595 (contains!685 (toList!689 lt!25659) (tuple2!2023 lt!25219 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)))))))

(assert (= (and d!12443 res!34019) b!61824))

(assert (= (and b!61824 res!34018) b!61825))

(declare-fun m!55159 () Bool)

(assert (=> d!12443 m!55159))

(declare-fun m!55161 () Bool)

(assert (=> d!12443 m!55161))

(declare-fun m!55163 () Bool)

(assert (=> d!12443 m!55163))

(declare-fun m!55165 () Bool)

(assert (=> d!12443 m!55165))

(declare-fun m!55167 () Bool)

(assert (=> b!61824 m!55167))

(declare-fun m!55169 () Bool)

(assert (=> b!61825 m!55169))

(assert (=> b!61156 d!12443))

(declare-fun d!12445 () Bool)

(assert (=> d!12445 (= (apply!67 (+!81 lt!25230 (tuple2!2023 lt!25219 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)))) lt!25225) (get!1085 (getValueByKey!126 (toList!689 (+!81 lt!25230 (tuple2!2023 lt!25219 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16))))) lt!25225)))))

(declare-fun bs!2692 () Bool)

(assert (= bs!2692 d!12445))

(declare-fun m!55171 () Bool)

(assert (=> bs!2692 m!55171))

(assert (=> bs!2692 m!55171))

(declare-fun m!55173 () Bool)

(assert (=> bs!2692 m!55173))

(assert (=> b!61156 d!12445))

(declare-fun d!12447 () Bool)

(declare-fun e!40597 () Bool)

(assert (=> d!12447 e!40597))

(declare-fun res!34020 () Bool)

(assert (=> d!12447 (=> res!34020 e!40597)))

(declare-fun lt!25664 () Bool)

(assert (=> d!12447 (= res!34020 (not lt!25664))))

(declare-fun lt!25665 () Bool)

(assert (=> d!12447 (= lt!25664 lt!25665)))

(declare-fun lt!25662 () Unit!1613)

(declare-fun e!40596 () Unit!1613)

(assert (=> d!12447 (= lt!25662 e!40596)))

(declare-fun c!8180 () Bool)

(assert (=> d!12447 (= c!8180 lt!25665)))

(assert (=> d!12447 (= lt!25665 (containsKey!129 (toList!689 (map!1114 (_2!1023 lt!25028))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(assert (=> d!12447 (= (contains!682 (map!1114 (_2!1023 lt!25028)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) lt!25664)))

(declare-fun b!61826 () Bool)

(declare-fun lt!25663 () Unit!1613)

(assert (=> b!61826 (= e!40596 lt!25663)))

(assert (=> b!61826 (= lt!25663 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 (map!1114 (_2!1023 lt!25028))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(assert (=> b!61826 (isDefined!78 (getValueByKey!126 (toList!689 (map!1114 (_2!1023 lt!25028))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(declare-fun b!61827 () Bool)

(declare-fun Unit!1667 () Unit!1613)

(assert (=> b!61827 (= e!40596 Unit!1667)))

(declare-fun b!61828 () Bool)

(assert (=> b!61828 (= e!40597 (isDefined!78 (getValueByKey!126 (toList!689 (map!1114 (_2!1023 lt!25028))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355))))))

(assert (= (and d!12447 c!8180) b!61826))

(assert (= (and d!12447 (not c!8180)) b!61827))

(assert (= (and d!12447 (not res!34020)) b!61828))

(assert (=> d!12447 m!52989))

(declare-fun m!55175 () Bool)

(assert (=> d!12447 m!55175))

(assert (=> b!61826 m!52989))

(declare-fun m!55177 () Bool)

(assert (=> b!61826 m!55177))

(assert (=> b!61826 m!52989))

(declare-fun m!55179 () Bool)

(assert (=> b!61826 m!55179))

(assert (=> b!61826 m!55179))

(declare-fun m!55181 () Bool)

(assert (=> b!61826 m!55181))

(assert (=> b!61828 m!52989))

(assert (=> b!61828 m!55179))

(assert (=> b!61828 m!55179))

(assert (=> b!61828 m!55181))

(assert (=> b!60888 d!12447))

(assert (=> b!60888 d!12213))

(assert (=> b!61131 d!12103))

(declare-fun d!12449 () Bool)

(assert (=> d!12449 (= (apply!67 (+!81 lt!24912 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) lt!24922) (apply!67 lt!24912 lt!24922))))

(assert (=> d!12449 true))

(declare-fun _$34!768 () Unit!1613)

(assert (=> d!12449 (= (choose!326 lt!24912 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992))) lt!24922) _$34!768)))

(declare-fun bs!2693 () Bool)

(assert (= bs!2693 d!12449))

(assert (=> bs!2693 m!53245))

(assert (=> bs!2693 m!53245))

(assert (=> bs!2693 m!53249))

(assert (=> bs!2693 m!53229))

(assert (=> d!11985 d!12449))

(declare-fun d!12451 () Bool)

(declare-fun e!40599 () Bool)

(assert (=> d!12451 e!40599))

(declare-fun res!34021 () Bool)

(assert (=> d!12451 (=> res!34021 e!40599)))

(declare-fun lt!25668 () Bool)

(assert (=> d!12451 (= res!34021 (not lt!25668))))

(declare-fun lt!25669 () Bool)

(assert (=> d!12451 (= lt!25668 lt!25669)))

(declare-fun lt!25666 () Unit!1613)

(declare-fun e!40598 () Unit!1613)

(assert (=> d!12451 (= lt!25666 e!40598)))

(declare-fun c!8181 () Bool)

(assert (=> d!12451 (= c!8181 lt!25669)))

(assert (=> d!12451 (= lt!25669 (containsKey!129 (toList!689 lt!24912) lt!24922))))

(assert (=> d!12451 (= (contains!682 lt!24912 lt!24922) lt!25668)))

(declare-fun b!61829 () Bool)

(declare-fun lt!25667 () Unit!1613)

(assert (=> b!61829 (= e!40598 lt!25667)))

(assert (=> b!61829 (= lt!25667 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 lt!24912) lt!24922))))

(assert (=> b!61829 (isDefined!78 (getValueByKey!126 (toList!689 lt!24912) lt!24922))))

(declare-fun b!61830 () Bool)

(declare-fun Unit!1668 () Unit!1613)

(assert (=> b!61830 (= e!40598 Unit!1668)))

(declare-fun b!61831 () Bool)

(assert (=> b!61831 (= e!40599 (isDefined!78 (getValueByKey!126 (toList!689 lt!24912) lt!24922)))))

(assert (= (and d!12451 c!8181) b!61829))

(assert (= (and d!12451 (not c!8181)) b!61830))

(assert (= (and d!12451 (not res!34021)) b!61831))

(declare-fun m!55183 () Bool)

(assert (=> d!12451 m!55183))

(declare-fun m!55185 () Bool)

(assert (=> b!61829 m!55185))

(assert (=> b!61829 m!53567))

(assert (=> b!61829 m!53567))

(declare-fun m!55187 () Bool)

(assert (=> b!61829 m!55187))

(assert (=> b!61831 m!53567))

(assert (=> b!61831 m!53567))

(assert (=> b!61831 m!55187))

(assert (=> d!11985 d!12451))

(assert (=> d!11985 d!11959))

(assert (=> d!11985 d!11975))

(assert (=> d!11985 d!11981))

(declare-fun d!12453 () Bool)

(assert (=> d!12453 (= (apply!67 lt!25060 lt!25048) (get!1085 (getValueByKey!126 (toList!689 lt!25060) lt!25048)))))

(declare-fun bs!2694 () Bool)

(assert (= bs!2694 d!12453))

(declare-fun m!55189 () Bool)

(assert (=> bs!2694 m!55189))

(assert (=> bs!2694 m!55189))

(declare-fun m!55191 () Bool)

(assert (=> bs!2694 m!55191))

(assert (=> b!60919 d!12453))

(declare-fun d!12455 () Bool)

(declare-fun e!40600 () Bool)

(assert (=> d!12455 e!40600))

(declare-fun res!34023 () Bool)

(assert (=> d!12455 (=> (not res!34023) (not e!40600))))

(declare-fun lt!25671 () ListLongMap!1347)

(assert (=> d!12455 (= res!34023 (contains!682 lt!25671 (_1!1022 (tuple2!2023 lt!25047 (zeroValue!1980 newMap!16)))))))

(declare-fun lt!25673 () List!1426)

(assert (=> d!12455 (= lt!25671 (ListLongMap!1348 lt!25673))))

(declare-fun lt!25672 () Unit!1613)

(declare-fun lt!25670 () Unit!1613)

(assert (=> d!12455 (= lt!25672 lt!25670)))

(assert (=> d!12455 (= (getValueByKey!126 lt!25673 (_1!1022 (tuple2!2023 lt!25047 (zeroValue!1980 newMap!16)))) (Some!131 (_2!1022 (tuple2!2023 lt!25047 (zeroValue!1980 newMap!16)))))))

(assert (=> d!12455 (= lt!25670 (lemmaContainsTupThenGetReturnValue!43 lt!25673 (_1!1022 (tuple2!2023 lt!25047 (zeroValue!1980 newMap!16))) (_2!1022 (tuple2!2023 lt!25047 (zeroValue!1980 newMap!16)))))))

(assert (=> d!12455 (= lt!25673 (insertStrictlySorted!46 (toList!689 lt!25060) (_1!1022 (tuple2!2023 lt!25047 (zeroValue!1980 newMap!16))) (_2!1022 (tuple2!2023 lt!25047 (zeroValue!1980 newMap!16)))))))

(assert (=> d!12455 (= (+!81 lt!25060 (tuple2!2023 lt!25047 (zeroValue!1980 newMap!16))) lt!25671)))

(declare-fun b!61832 () Bool)

(declare-fun res!34022 () Bool)

(assert (=> b!61832 (=> (not res!34022) (not e!40600))))

(assert (=> b!61832 (= res!34022 (= (getValueByKey!126 (toList!689 lt!25671) (_1!1022 (tuple2!2023 lt!25047 (zeroValue!1980 newMap!16)))) (Some!131 (_2!1022 (tuple2!2023 lt!25047 (zeroValue!1980 newMap!16))))))))

(declare-fun b!61833 () Bool)

(assert (=> b!61833 (= e!40600 (contains!685 (toList!689 lt!25671) (tuple2!2023 lt!25047 (zeroValue!1980 newMap!16))))))

(assert (= (and d!12455 res!34023) b!61832))

(assert (= (and b!61832 res!34022) b!61833))

(declare-fun m!55193 () Bool)

(assert (=> d!12455 m!55193))

(declare-fun m!55195 () Bool)

(assert (=> d!12455 m!55195))

(declare-fun m!55197 () Bool)

(assert (=> d!12455 m!55197))

(declare-fun m!55199 () Bool)

(assert (=> d!12455 m!55199))

(declare-fun m!55201 () Bool)

(assert (=> b!61832 m!55201))

(declare-fun m!55203 () Bool)

(assert (=> b!61833 m!55203))

(assert (=> b!60919 d!12455))

(declare-fun d!12457 () Bool)

(assert (=> d!12457 (= (apply!67 lt!25054 lt!25064) (get!1085 (getValueByKey!126 (toList!689 lt!25054) lt!25064)))))

(declare-fun bs!2695 () Bool)

(assert (= bs!2695 d!12457))

(declare-fun m!55205 () Bool)

(assert (=> bs!2695 m!55205))

(assert (=> bs!2695 m!55205))

(declare-fun m!55207 () Bool)

(assert (=> bs!2695 m!55207))

(assert (=> b!60919 d!12457))

(declare-fun d!12459 () Bool)

(assert (=> d!12459 (= (apply!67 (+!81 lt!25060 (tuple2!2023 lt!25047 (zeroValue!1980 newMap!16))) lt!25048) (get!1085 (getValueByKey!126 (toList!689 (+!81 lt!25060 (tuple2!2023 lt!25047 (zeroValue!1980 newMap!16)))) lt!25048)))))

(declare-fun bs!2696 () Bool)

(assert (= bs!2696 d!12459))

(declare-fun m!55209 () Bool)

(assert (=> bs!2696 m!55209))

(assert (=> bs!2696 m!55209))

(declare-fun m!55211 () Bool)

(assert (=> bs!2696 m!55211))

(assert (=> b!60919 d!12459))

(declare-fun d!12461 () Bool)

(assert (=> d!12461 (= (apply!67 (+!81 lt!25060 (tuple2!2023 lt!25047 (zeroValue!1980 newMap!16))) lt!25048) (apply!67 lt!25060 lt!25048))))

(declare-fun lt!25674 () Unit!1613)

(assert (=> d!12461 (= lt!25674 (choose!326 lt!25060 lt!25047 (zeroValue!1980 newMap!16) lt!25048))))

(declare-fun e!40601 () Bool)

(assert (=> d!12461 e!40601))

(declare-fun res!34024 () Bool)

(assert (=> d!12461 (=> (not res!34024) (not e!40601))))

(assert (=> d!12461 (= res!34024 (contains!682 lt!25060 lt!25048))))

(assert (=> d!12461 (= (addApplyDifferent!43 lt!25060 lt!25047 (zeroValue!1980 newMap!16) lt!25048) lt!25674)))

(declare-fun b!61834 () Bool)

(assert (=> b!61834 (= e!40601 (not (= lt!25048 lt!25047)))))

(assert (= (and d!12461 res!34024) b!61834))

(declare-fun m!55213 () Bool)

(assert (=> d!12461 m!55213))

(assert (=> d!12461 m!53423))

(declare-fun m!55215 () Bool)

(assert (=> d!12461 m!55215))

(assert (=> d!12461 m!53427))

(assert (=> d!12461 m!53429))

(assert (=> d!12461 m!53427))

(assert (=> b!60919 d!12461))

(declare-fun d!12463 () Bool)

(assert (=> d!12463 (= (apply!67 lt!25057 lt!25052) (get!1085 (getValueByKey!126 (toList!689 lt!25057) lt!25052)))))

(declare-fun bs!2697 () Bool)

(assert (= bs!2697 d!12463))

(declare-fun m!55217 () Bool)

(assert (=> bs!2697 m!55217))

(assert (=> bs!2697 m!55217))

(declare-fun m!55219 () Bool)

(assert (=> bs!2697 m!55219))

(assert (=> b!60919 d!12463))

(assert (=> b!60919 d!12409))

(declare-fun d!12465 () Bool)

(assert (=> d!12465 (= (apply!67 (+!81 lt!25054 (tuple2!2023 lt!25044 (minValue!1980 newMap!16))) lt!25064) (get!1085 (getValueByKey!126 (toList!689 (+!81 lt!25054 (tuple2!2023 lt!25044 (minValue!1980 newMap!16)))) lt!25064)))))

(declare-fun bs!2698 () Bool)

(assert (= bs!2698 d!12465))

(declare-fun m!55221 () Bool)

(assert (=> bs!2698 m!55221))

(assert (=> bs!2698 m!55221))

(declare-fun m!55223 () Bool)

(assert (=> bs!2698 m!55223))

(assert (=> b!60919 d!12465))

(declare-fun d!12467 () Bool)

(declare-fun e!40602 () Bool)

(assert (=> d!12467 e!40602))

(declare-fun res!34026 () Bool)

(assert (=> d!12467 (=> (not res!34026) (not e!40602))))

(declare-fun lt!25676 () ListLongMap!1347)

(assert (=> d!12467 (= res!34026 (contains!682 lt!25676 (_1!1022 (tuple2!2023 lt!25056 (zeroValue!1980 newMap!16)))))))

(declare-fun lt!25678 () List!1426)

(assert (=> d!12467 (= lt!25676 (ListLongMap!1348 lt!25678))))

(declare-fun lt!25677 () Unit!1613)

(declare-fun lt!25675 () Unit!1613)

(assert (=> d!12467 (= lt!25677 lt!25675)))

(assert (=> d!12467 (= (getValueByKey!126 lt!25678 (_1!1022 (tuple2!2023 lt!25056 (zeroValue!1980 newMap!16)))) (Some!131 (_2!1022 (tuple2!2023 lt!25056 (zeroValue!1980 newMap!16)))))))

(assert (=> d!12467 (= lt!25675 (lemmaContainsTupThenGetReturnValue!43 lt!25678 (_1!1022 (tuple2!2023 lt!25056 (zeroValue!1980 newMap!16))) (_2!1022 (tuple2!2023 lt!25056 (zeroValue!1980 newMap!16)))))))

(assert (=> d!12467 (= lt!25678 (insertStrictlySorted!46 (toList!689 lt!25053) (_1!1022 (tuple2!2023 lt!25056 (zeroValue!1980 newMap!16))) (_2!1022 (tuple2!2023 lt!25056 (zeroValue!1980 newMap!16)))))))

(assert (=> d!12467 (= (+!81 lt!25053 (tuple2!2023 lt!25056 (zeroValue!1980 newMap!16))) lt!25676)))

(declare-fun b!61835 () Bool)

(declare-fun res!34025 () Bool)

(assert (=> b!61835 (=> (not res!34025) (not e!40602))))

(assert (=> b!61835 (= res!34025 (= (getValueByKey!126 (toList!689 lt!25676) (_1!1022 (tuple2!2023 lt!25056 (zeroValue!1980 newMap!16)))) (Some!131 (_2!1022 (tuple2!2023 lt!25056 (zeroValue!1980 newMap!16))))))))

(declare-fun b!61836 () Bool)

(assert (=> b!61836 (= e!40602 (contains!685 (toList!689 lt!25676) (tuple2!2023 lt!25056 (zeroValue!1980 newMap!16))))))

(assert (= (and d!12467 res!34026) b!61835))

(assert (= (and b!61835 res!34025) b!61836))

(declare-fun m!55225 () Bool)

(assert (=> d!12467 m!55225))

(declare-fun m!55227 () Bool)

(assert (=> d!12467 m!55227))

(declare-fun m!55229 () Bool)

(assert (=> d!12467 m!55229))

(declare-fun m!55231 () Bool)

(assert (=> d!12467 m!55231))

(declare-fun m!55233 () Bool)

(assert (=> b!61835 m!55233))

(declare-fun m!55235 () Bool)

(assert (=> b!61836 m!55235))

(assert (=> b!60919 d!12467))

(declare-fun d!12469 () Bool)

(declare-fun e!40604 () Bool)

(assert (=> d!12469 e!40604))

(declare-fun res!34027 () Bool)

(assert (=> d!12469 (=> res!34027 e!40604)))

(declare-fun lt!25681 () Bool)

(assert (=> d!12469 (= res!34027 (not lt!25681))))

(declare-fun lt!25682 () Bool)

(assert (=> d!12469 (= lt!25681 lt!25682)))

(declare-fun lt!25679 () Unit!1613)

(declare-fun e!40603 () Unit!1613)

(assert (=> d!12469 (= lt!25679 e!40603)))

(declare-fun c!8182 () Bool)

(assert (=> d!12469 (= c!8182 lt!25682)))

(assert (=> d!12469 (= lt!25682 (containsKey!129 (toList!689 (+!81 lt!25053 (tuple2!2023 lt!25056 (zeroValue!1980 newMap!16)))) lt!25050))))

(assert (=> d!12469 (= (contains!682 (+!81 lt!25053 (tuple2!2023 lt!25056 (zeroValue!1980 newMap!16))) lt!25050) lt!25681)))

(declare-fun b!61837 () Bool)

(declare-fun lt!25680 () Unit!1613)

(assert (=> b!61837 (= e!40603 lt!25680)))

(assert (=> b!61837 (= lt!25680 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 (+!81 lt!25053 (tuple2!2023 lt!25056 (zeroValue!1980 newMap!16)))) lt!25050))))

(assert (=> b!61837 (isDefined!78 (getValueByKey!126 (toList!689 (+!81 lt!25053 (tuple2!2023 lt!25056 (zeroValue!1980 newMap!16)))) lt!25050))))

(declare-fun b!61838 () Bool)

(declare-fun Unit!1669 () Unit!1613)

(assert (=> b!61838 (= e!40603 Unit!1669)))

(declare-fun b!61839 () Bool)

(assert (=> b!61839 (= e!40604 (isDefined!78 (getValueByKey!126 (toList!689 (+!81 lt!25053 (tuple2!2023 lt!25056 (zeroValue!1980 newMap!16)))) lt!25050)))))

(assert (= (and d!12469 c!8182) b!61837))

(assert (= (and d!12469 (not c!8182)) b!61838))

(assert (= (and d!12469 (not res!34027)) b!61839))

(declare-fun m!55237 () Bool)

(assert (=> d!12469 m!55237))

(declare-fun m!55239 () Bool)

(assert (=> b!61837 m!55239))

(declare-fun m!55241 () Bool)

(assert (=> b!61837 m!55241))

(assert (=> b!61837 m!55241))

(declare-fun m!55243 () Bool)

(assert (=> b!61837 m!55243))

(assert (=> b!61839 m!55241))

(assert (=> b!61839 m!55241))

(assert (=> b!61839 m!55243))

(assert (=> b!60919 d!12469))

(declare-fun d!12471 () Bool)

(assert (=> d!12471 (= (apply!67 (+!81 lt!25054 (tuple2!2023 lt!25044 (minValue!1980 newMap!16))) lt!25064) (apply!67 lt!25054 lt!25064))))

(declare-fun lt!25683 () Unit!1613)

(assert (=> d!12471 (= lt!25683 (choose!326 lt!25054 lt!25044 (minValue!1980 newMap!16) lt!25064))))

(declare-fun e!40605 () Bool)

(assert (=> d!12471 e!40605))

(declare-fun res!34028 () Bool)

(assert (=> d!12471 (=> (not res!34028) (not e!40605))))

(assert (=> d!12471 (= res!34028 (contains!682 lt!25054 lt!25064))))

(assert (=> d!12471 (= (addApplyDifferent!43 lt!25054 lt!25044 (minValue!1980 newMap!16) lt!25064) lt!25683)))

(declare-fun b!61840 () Bool)

(assert (=> b!61840 (= e!40605 (not (= lt!25064 lt!25044)))))

(assert (= (and d!12471 res!34028) b!61840))

(declare-fun m!55245 () Bool)

(assert (=> d!12471 m!55245))

(assert (=> d!12471 m!53405))

(declare-fun m!55247 () Bool)

(assert (=> d!12471 m!55247))

(assert (=> d!12471 m!53421))

(assert (=> d!12471 m!53425))

(assert (=> d!12471 m!53421))

(assert (=> b!60919 d!12471))

(declare-fun d!12473 () Bool)

(assert (=> d!12473 (= (apply!67 (+!81 lt!25057 (tuple2!2023 lt!25046 (minValue!1980 newMap!16))) lt!25052) (apply!67 lt!25057 lt!25052))))

(declare-fun lt!25684 () Unit!1613)

(assert (=> d!12473 (= lt!25684 (choose!326 lt!25057 lt!25046 (minValue!1980 newMap!16) lt!25052))))

(declare-fun e!40606 () Bool)

(assert (=> d!12473 e!40606))

(declare-fun res!34029 () Bool)

(assert (=> d!12473 (=> (not res!34029) (not e!40606))))

(assert (=> d!12473 (= res!34029 (contains!682 lt!25057 lt!25052))))

(assert (=> d!12473 (= (addApplyDifferent!43 lt!25057 lt!25046 (minValue!1980 newMap!16) lt!25052) lt!25684)))

(declare-fun b!61841 () Bool)

(assert (=> b!61841 (= e!40606 (not (= lt!25052 lt!25046)))))

(assert (= (and d!12473 res!34029) b!61841))

(declare-fun m!55249 () Bool)

(assert (=> d!12473 m!55249))

(assert (=> d!12473 m!53409))

(declare-fun m!55251 () Bool)

(assert (=> d!12473 m!55251))

(assert (=> d!12473 m!53407))

(assert (=> d!12473 m!53433))

(assert (=> d!12473 m!53407))

(assert (=> b!60919 d!12473))

(declare-fun d!12475 () Bool)

(declare-fun e!40607 () Bool)

(assert (=> d!12475 e!40607))

(declare-fun res!34031 () Bool)

(assert (=> d!12475 (=> (not res!34031) (not e!40607))))

(declare-fun lt!25686 () ListLongMap!1347)

(assert (=> d!12475 (= res!34031 (contains!682 lt!25686 (_1!1022 (tuple2!2023 lt!25046 (minValue!1980 newMap!16)))))))

(declare-fun lt!25688 () List!1426)

(assert (=> d!12475 (= lt!25686 (ListLongMap!1348 lt!25688))))

(declare-fun lt!25687 () Unit!1613)

(declare-fun lt!25685 () Unit!1613)

(assert (=> d!12475 (= lt!25687 lt!25685)))

(assert (=> d!12475 (= (getValueByKey!126 lt!25688 (_1!1022 (tuple2!2023 lt!25046 (minValue!1980 newMap!16)))) (Some!131 (_2!1022 (tuple2!2023 lt!25046 (minValue!1980 newMap!16)))))))

(assert (=> d!12475 (= lt!25685 (lemmaContainsTupThenGetReturnValue!43 lt!25688 (_1!1022 (tuple2!2023 lt!25046 (minValue!1980 newMap!16))) (_2!1022 (tuple2!2023 lt!25046 (minValue!1980 newMap!16)))))))

(assert (=> d!12475 (= lt!25688 (insertStrictlySorted!46 (toList!689 lt!25057) (_1!1022 (tuple2!2023 lt!25046 (minValue!1980 newMap!16))) (_2!1022 (tuple2!2023 lt!25046 (minValue!1980 newMap!16)))))))

(assert (=> d!12475 (= (+!81 lt!25057 (tuple2!2023 lt!25046 (minValue!1980 newMap!16))) lt!25686)))

(declare-fun b!61842 () Bool)

(declare-fun res!34030 () Bool)

(assert (=> b!61842 (=> (not res!34030) (not e!40607))))

(assert (=> b!61842 (= res!34030 (= (getValueByKey!126 (toList!689 lt!25686) (_1!1022 (tuple2!2023 lt!25046 (minValue!1980 newMap!16)))) (Some!131 (_2!1022 (tuple2!2023 lt!25046 (minValue!1980 newMap!16))))))))

(declare-fun b!61843 () Bool)

(assert (=> b!61843 (= e!40607 (contains!685 (toList!689 lt!25686) (tuple2!2023 lt!25046 (minValue!1980 newMap!16))))))

(assert (= (and d!12475 res!34031) b!61842))

(assert (= (and b!61842 res!34030) b!61843))

(declare-fun m!55253 () Bool)

(assert (=> d!12475 m!55253))

(declare-fun m!55255 () Bool)

(assert (=> d!12475 m!55255))

(declare-fun m!55257 () Bool)

(assert (=> d!12475 m!55257))

(declare-fun m!55259 () Bool)

(assert (=> d!12475 m!55259))

(declare-fun m!55261 () Bool)

(assert (=> b!61842 m!55261))

(declare-fun m!55263 () Bool)

(assert (=> b!61843 m!55263))

(assert (=> b!60919 d!12475))

(declare-fun d!12477 () Bool)

(assert (=> d!12477 (contains!682 (+!81 lt!25053 (tuple2!2023 lt!25056 (zeroValue!1980 newMap!16))) lt!25050)))

(declare-fun lt!25689 () Unit!1613)

(assert (=> d!12477 (= lt!25689 (choose!327 lt!25053 lt!25056 (zeroValue!1980 newMap!16) lt!25050))))

(assert (=> d!12477 (contains!682 lt!25053 lt!25050)))

(assert (=> d!12477 (= (addStillContains!43 lt!25053 lt!25056 (zeroValue!1980 newMap!16) lt!25050) lt!25689)))

(declare-fun bs!2699 () Bool)

(assert (= bs!2699 d!12477))

(assert (=> bs!2699 m!53417))

(assert (=> bs!2699 m!53417))

(assert (=> bs!2699 m!53419))

(declare-fun m!55265 () Bool)

(assert (=> bs!2699 m!55265))

(declare-fun m!55267 () Bool)

(assert (=> bs!2699 m!55267))

(assert (=> b!60919 d!12477))

(declare-fun d!12479 () Bool)

(assert (=> d!12479 (= (apply!67 (+!81 lt!25057 (tuple2!2023 lt!25046 (minValue!1980 newMap!16))) lt!25052) (get!1085 (getValueByKey!126 (toList!689 (+!81 lt!25057 (tuple2!2023 lt!25046 (minValue!1980 newMap!16)))) lt!25052)))))

(declare-fun bs!2700 () Bool)

(assert (= bs!2700 d!12479))

(declare-fun m!55269 () Bool)

(assert (=> bs!2700 m!55269))

(assert (=> bs!2700 m!55269))

(declare-fun m!55271 () Bool)

(assert (=> bs!2700 m!55271))

(assert (=> b!60919 d!12479))

(declare-fun d!12481 () Bool)

(declare-fun e!40608 () Bool)

(assert (=> d!12481 e!40608))

(declare-fun res!34033 () Bool)

(assert (=> d!12481 (=> (not res!34033) (not e!40608))))

(declare-fun lt!25691 () ListLongMap!1347)

(assert (=> d!12481 (= res!34033 (contains!682 lt!25691 (_1!1022 (tuple2!2023 lt!25044 (minValue!1980 newMap!16)))))))

(declare-fun lt!25693 () List!1426)

(assert (=> d!12481 (= lt!25691 (ListLongMap!1348 lt!25693))))

(declare-fun lt!25692 () Unit!1613)

(declare-fun lt!25690 () Unit!1613)

(assert (=> d!12481 (= lt!25692 lt!25690)))

(assert (=> d!12481 (= (getValueByKey!126 lt!25693 (_1!1022 (tuple2!2023 lt!25044 (minValue!1980 newMap!16)))) (Some!131 (_2!1022 (tuple2!2023 lt!25044 (minValue!1980 newMap!16)))))))

(assert (=> d!12481 (= lt!25690 (lemmaContainsTupThenGetReturnValue!43 lt!25693 (_1!1022 (tuple2!2023 lt!25044 (minValue!1980 newMap!16))) (_2!1022 (tuple2!2023 lt!25044 (minValue!1980 newMap!16)))))))

(assert (=> d!12481 (= lt!25693 (insertStrictlySorted!46 (toList!689 lt!25054) (_1!1022 (tuple2!2023 lt!25044 (minValue!1980 newMap!16))) (_2!1022 (tuple2!2023 lt!25044 (minValue!1980 newMap!16)))))))

(assert (=> d!12481 (= (+!81 lt!25054 (tuple2!2023 lt!25044 (minValue!1980 newMap!16))) lt!25691)))

(declare-fun b!61844 () Bool)

(declare-fun res!34032 () Bool)

(assert (=> b!61844 (=> (not res!34032) (not e!40608))))

(assert (=> b!61844 (= res!34032 (= (getValueByKey!126 (toList!689 lt!25691) (_1!1022 (tuple2!2023 lt!25044 (minValue!1980 newMap!16)))) (Some!131 (_2!1022 (tuple2!2023 lt!25044 (minValue!1980 newMap!16))))))))

(declare-fun b!61845 () Bool)

(assert (=> b!61845 (= e!40608 (contains!685 (toList!689 lt!25691) (tuple2!2023 lt!25044 (minValue!1980 newMap!16))))))

(assert (= (and d!12481 res!34033) b!61844))

(assert (= (and b!61844 res!34032) b!61845))

(declare-fun m!55273 () Bool)

(assert (=> d!12481 m!55273))

(declare-fun m!55275 () Bool)

(assert (=> d!12481 m!55275))

(declare-fun m!55277 () Bool)

(assert (=> d!12481 m!55277))

(declare-fun m!55279 () Bool)

(assert (=> d!12481 m!55279))

(declare-fun m!55281 () Bool)

(assert (=> b!61844 m!55281))

(declare-fun m!55283 () Bool)

(assert (=> b!61845 m!55283))

(assert (=> b!60919 d!12481))

(assert (=> b!60904 d!12103))

(assert (=> d!12021 d!12047))

(declare-fun d!12483 () Bool)

(assert (=> d!12483 (= (+!81 (getCurrentListMap!390 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!390 (_keys!3694 newMap!16) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (index!3013 lt!24842) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16))) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(assert (=> d!12483 true))

(declare-fun _$5!65 () Unit!1613)

(assert (=> d!12483 (= (choose!325 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) (index!3013 lt!24842) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2066 newMap!16)) _$5!65)))

(declare-fun bs!2701 () Bool)

(assert (= bs!2701 d!12483))

(assert (=> bs!2701 m!53203))

(assert (=> bs!2701 m!53203))

(assert (=> bs!2701 m!53311))

(assert (=> bs!2701 m!53165))

(assert (=> bs!2701 m!53443))

(assert (=> d!11931 d!12483))

(assert (=> d!11931 d!12047))

(declare-fun d!12485 () Bool)

(assert (=> d!12485 (contains!682 (getCurrentListMap!390 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355))))

(declare-fun lt!25696 () Unit!1613)

(declare-fun choose!334 (array!3729 array!3731 (_ BitVec 32) (_ BitVec 32) V!2857 V!2857 (_ BitVec 64) (_ BitVec 32) Int) Unit!1613)

(assert (=> d!12485 (= lt!25696 (choose!334 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(assert (=> d!12485 (validMask!0 (mask!5962 newMap!16))))

(assert (=> d!12485 (= (lemmaArrayContainsKeyThenInListMap!6 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)) lt!25696)))

(declare-fun bs!2702 () Bool)

(assert (= bs!2702 d!12485))

(assert (=> bs!2702 m!53203))

(assert (=> bs!2702 m!53203))

(assert (=> bs!2702 m!52989))

(assert (=> bs!2702 m!53305))

(assert (=> bs!2702 m!52989))

(declare-fun m!55285 () Bool)

(assert (=> bs!2702 m!55285))

(assert (=> bs!2702 m!53287))

(assert (=> b!60882 d!12485))

(assert (=> b!60882 d!12287))

(assert (=> b!60882 d!12019))

(assert (=> bm!4676 d!12143))

(assert (=> b!60988 d!12183))

(assert (=> b!60988 d!12185))

(declare-fun b!61846 () Bool)

(declare-fun e!40611 () Bool)

(declare-fun e!40612 () Bool)

(assert (=> b!61846 (= e!40611 e!40612)))

(declare-fun c!8183 () Bool)

(assert (=> b!61846 (= c!8183 (validKeyInArray!0 (select (arr!1784 (_keys!3694 (_2!1023 lt!24841))) #b00000000000000000000000000000000)))))

(declare-fun b!61847 () Bool)

(declare-fun call!4777 () Bool)

(assert (=> b!61847 (= e!40612 call!4777)))

(declare-fun bm!4774 () Bool)

(assert (=> bm!4774 (= call!4777 (arrayNoDuplicates!0 (_keys!3694 (_2!1023 lt!24841)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!8183 (Cons!1423 (select (arr!1784 (_keys!3694 (_2!1023 lt!24841))) #b00000000000000000000000000000000) Nil!1424) Nil!1424)))))

(declare-fun b!61848 () Bool)

(declare-fun e!40610 () Bool)

(assert (=> b!61848 (= e!40610 e!40611)))

(declare-fun res!34034 () Bool)

(assert (=> b!61848 (=> (not res!34034) (not e!40611))))

(declare-fun e!40609 () Bool)

(assert (=> b!61848 (= res!34034 (not e!40609))))

(declare-fun res!34036 () Bool)

(assert (=> b!61848 (=> (not res!34036) (not e!40609))))

(assert (=> b!61848 (= res!34036 (validKeyInArray!0 (select (arr!1784 (_keys!3694 (_2!1023 lt!24841))) #b00000000000000000000000000000000)))))

(declare-fun d!12487 () Bool)

(declare-fun res!34035 () Bool)

(assert (=> d!12487 (=> res!34035 e!40610)))

(assert (=> d!12487 (= res!34035 (bvsge #b00000000000000000000000000000000 (size!2015 (_keys!3694 (_2!1023 lt!24841)))))))

(assert (=> d!12487 (= (arrayNoDuplicates!0 (_keys!3694 (_2!1023 lt!24841)) #b00000000000000000000000000000000 Nil!1424) e!40610)))

(declare-fun b!61849 () Bool)

(assert (=> b!61849 (= e!40612 call!4777)))

(declare-fun b!61850 () Bool)

(assert (=> b!61850 (= e!40609 (contains!684 Nil!1424 (select (arr!1784 (_keys!3694 (_2!1023 lt!24841))) #b00000000000000000000000000000000)))))

(assert (= (and d!12487 (not res!34035)) b!61848))

(assert (= (and b!61848 res!34036) b!61850))

(assert (= (and b!61848 res!34034) b!61846))

(assert (= (and b!61846 c!8183) b!61847))

(assert (= (and b!61846 (not c!8183)) b!61849))

(assert (= (or b!61847 b!61849) bm!4774))

(assert (=> b!61846 m!54743))

(assert (=> b!61846 m!54743))

(assert (=> b!61846 m!54751))

(assert (=> bm!4774 m!54743))

(declare-fun m!55287 () Bool)

(assert (=> bm!4774 m!55287))

(assert (=> b!61848 m!54743))

(assert (=> b!61848 m!54743))

(assert (=> b!61848 m!54751))

(assert (=> b!61850 m!54743))

(assert (=> b!61850 m!54743))

(declare-fun m!55289 () Bool)

(assert (=> b!61850 m!55289))

(assert (=> b!61095 d!12487))

(declare-fun d!12489 () Bool)

(declare-fun e!40614 () Bool)

(assert (=> d!12489 e!40614))

(declare-fun res!34037 () Bool)

(assert (=> d!12489 (=> res!34037 e!40614)))

(declare-fun lt!25699 () Bool)

(assert (=> d!12489 (= res!34037 (not lt!25699))))

(declare-fun lt!25700 () Bool)

(assert (=> d!12489 (= lt!25699 lt!25700)))

(declare-fun lt!25697 () Unit!1613)

(declare-fun e!40613 () Unit!1613)

(assert (=> d!12489 (= lt!25697 e!40613)))

(declare-fun c!8184 () Bool)

(assert (=> d!12489 (= c!8184 lt!25700)))

(assert (=> d!12489 (= lt!25700 (containsKey!129 (toList!689 (getCurrentListMap!390 (_keys!3694 newMap!16) lt!24849 (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16))) (select (arr!1784 (_keys!3694 newMap!16)) (index!3013 lt!24842))))))

(assert (=> d!12489 (= (contains!682 (getCurrentListMap!390 (_keys!3694 newMap!16) lt!24849 (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)) (select (arr!1784 (_keys!3694 newMap!16)) (index!3013 lt!24842))) lt!25699)))

(declare-fun b!61851 () Bool)

(declare-fun lt!25698 () Unit!1613)

(assert (=> b!61851 (= e!40613 lt!25698)))

(assert (=> b!61851 (= lt!25698 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 (getCurrentListMap!390 (_keys!3694 newMap!16) lt!24849 (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16))) (select (arr!1784 (_keys!3694 newMap!16)) (index!3013 lt!24842))))))

(assert (=> b!61851 (isDefined!78 (getValueByKey!126 (toList!689 (getCurrentListMap!390 (_keys!3694 newMap!16) lt!24849 (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16))) (select (arr!1784 (_keys!3694 newMap!16)) (index!3013 lt!24842))))))

(declare-fun b!61852 () Bool)

(declare-fun Unit!1670 () Unit!1613)

(assert (=> b!61852 (= e!40613 Unit!1670)))

(declare-fun b!61853 () Bool)

(assert (=> b!61853 (= e!40614 (isDefined!78 (getValueByKey!126 (toList!689 (getCurrentListMap!390 (_keys!3694 newMap!16) lt!24849 (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16))) (select (arr!1784 (_keys!3694 newMap!16)) (index!3013 lt!24842)))))))

(assert (= (and d!12489 c!8184) b!61851))

(assert (= (and d!12489 (not c!8184)) b!61852))

(assert (= (and d!12489 (not res!34037)) b!61853))

(assert (=> d!12489 m!53185))

(declare-fun m!55291 () Bool)

(assert (=> d!12489 m!55291))

(assert (=> b!61851 m!53185))

(declare-fun m!55293 () Bool)

(assert (=> b!61851 m!55293))

(assert (=> b!61851 m!53185))

(declare-fun m!55295 () Bool)

(assert (=> b!61851 m!55295))

(assert (=> b!61851 m!55295))

(declare-fun m!55297 () Bool)

(assert (=> b!61851 m!55297))

(assert (=> b!61853 m!53185))

(assert (=> b!61853 m!55295))

(assert (=> b!61853 m!55295))

(assert (=> b!61853 m!55297))

(assert (=> b!60923 d!12489))

(declare-fun b!61854 () Bool)

(declare-fun res!34040 () Bool)

(declare-fun e!40618 () Bool)

(assert (=> b!61854 (=> (not res!34040) (not e!40618))))

(declare-fun e!40617 () Bool)

(assert (=> b!61854 (= res!34040 e!40617)))

(declare-fun res!34044 () Bool)

(assert (=> b!61854 (=> res!34044 e!40617)))

(declare-fun e!40622 () Bool)

(assert (=> b!61854 (= res!34044 (not e!40622))))

(declare-fun res!34038 () Bool)

(assert (=> b!61854 (=> (not res!34038) (not e!40622))))

(assert (=> b!61854 (= res!34038 (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(declare-fun b!61855 () Bool)

(declare-fun e!40623 () Bool)

(declare-fun call!4783 () Bool)

(assert (=> b!61855 (= e!40623 (not call!4783))))

(declare-fun bm!4775 () Bool)

(declare-fun lt!25717 () ListLongMap!1347)

(assert (=> bm!4775 (= call!4783 (contains!682 lt!25717 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61856 () Bool)

(declare-fun e!40625 () Unit!1613)

(declare-fun Unit!1671 () Unit!1613)

(assert (=> b!61856 (= e!40625 Unit!1671)))

(declare-fun b!61857 () Bool)

(declare-fun e!40615 () Bool)

(assert (=> b!61857 (= e!40623 e!40615)))

(declare-fun res!34043 () Bool)

(assert (=> b!61857 (= res!34043 call!4783)))

(assert (=> b!61857 (=> (not res!34043) (not e!40615))))

(declare-fun b!61858 () Bool)

(declare-fun e!40621 () Bool)

(assert (=> b!61858 (= e!40621 (validKeyInArray!0 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61859 () Bool)

(declare-fun e!40626 () ListLongMap!1347)

(declare-fun call!4780 () ListLongMap!1347)

(assert (=> b!61859 (= e!40626 call!4780)))

(declare-fun call!4782 () ListLongMap!1347)

(declare-fun call!4784 () ListLongMap!1347)

(declare-fun call!4779 () ListLongMap!1347)

(declare-fun c!8187 () Bool)

(declare-fun c!8190 () Bool)

(declare-fun bm!4776 () Bool)

(assert (=> bm!4776 (= call!4784 (+!81 (ite c!8190 call!4779 (ite c!8187 call!4782 call!4780)) (ite (or c!8190 c!8187) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))))))

(declare-fun b!61861 () Bool)

(declare-fun call!4781 () ListLongMap!1347)

(assert (=> b!61861 (= e!40626 call!4781)))

(declare-fun b!61862 () Bool)

(assert (=> b!61862 (= e!40615 (= (apply!67 lt!25717 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1980 newMap!16)))))

(declare-fun b!61863 () Bool)

(declare-fun e!40624 () Bool)

(assert (=> b!61863 (= e!40617 e!40624)))

(declare-fun res!34041 () Bool)

(assert (=> b!61863 (=> (not res!34041) (not e!40624))))

(assert (=> b!61863 (= res!34041 (contains!682 lt!25717 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!61863 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(declare-fun b!61864 () Bool)

(assert (=> b!61864 (= e!40618 e!40623)))

(declare-fun c!8188 () Bool)

(assert (=> b!61864 (= c!8188 (not (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4777 () Bool)

(assert (=> bm!4777 (= call!4781 call!4784)))

(declare-fun b!61865 () Bool)

(declare-fun e!40620 () ListLongMap!1347)

(assert (=> b!61865 (= e!40620 call!4781)))

(declare-fun bm!4778 () Bool)

(declare-fun call!4778 () Bool)

(assert (=> bm!4778 (= call!4778 (contains!682 lt!25717 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61866 () Bool)

(declare-fun e!40616 () ListLongMap!1347)

(assert (=> b!61866 (= e!40616 e!40620)))

(assert (=> b!61866 (= c!8187 (and (not (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!61867 () Bool)

(declare-fun e!40619 () Bool)

(assert (=> b!61867 (= e!40619 (= (apply!67 lt!25717 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1980 newMap!16)))))

(declare-fun b!61868 () Bool)

(declare-fun e!40627 () Bool)

(assert (=> b!61868 (= e!40627 e!40619)))

(declare-fun res!34039 () Bool)

(assert (=> b!61868 (= res!34039 call!4778)))

(assert (=> b!61868 (=> (not res!34039) (not e!40619))))

(declare-fun bm!4779 () Bool)

(assert (=> bm!4779 (= call!4780 call!4782)))

(declare-fun b!61869 () Bool)

(assert (=> b!61869 (= e!40622 (validKeyInArray!0 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!61870 () Bool)

(assert (=> b!61870 (= e!40616 (+!81 call!4784 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))))))

(declare-fun bm!4780 () Bool)

(assert (=> bm!4780 (= call!4779 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) lt!24849 (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun bm!4781 () Bool)

(assert (=> bm!4781 (= call!4782 call!4779)))

(declare-fun b!61871 () Bool)

(declare-fun c!8189 () Bool)

(assert (=> b!61871 (= c!8189 (and (not (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!61871 (= e!40620 e!40626)))

(declare-fun b!61872 () Bool)

(assert (=> b!61872 (= e!40624 (= (apply!67 lt!25717 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)) (get!1081 (select (arr!1785 lt!24849) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2066 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!61872 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2016 lt!24849)))))

(assert (=> b!61872 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(declare-fun d!12491 () Bool)

(assert (=> d!12491 e!40618))

(declare-fun res!34046 () Bool)

(assert (=> d!12491 (=> (not res!34046) (not e!40618))))

(assert (=> d!12491 (= res!34046 (or (bvsge #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))))

(declare-fun lt!25703 () ListLongMap!1347)

(assert (=> d!12491 (= lt!25717 lt!25703)))

(declare-fun lt!25719 () Unit!1613)

(assert (=> d!12491 (= lt!25719 e!40625)))

(declare-fun c!8186 () Bool)

(assert (=> d!12491 (= c!8186 e!40621)))

(declare-fun res!34042 () Bool)

(assert (=> d!12491 (=> (not res!34042) (not e!40621))))

(assert (=> d!12491 (= res!34042 (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 newMap!16))))))

(assert (=> d!12491 (= lt!25703 e!40616)))

(assert (=> d!12491 (= c!8190 (and (not (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12491 (validMask!0 (mask!5962 newMap!16))))

(assert (=> d!12491 (= (getCurrentListMap!390 (_keys!3694 newMap!16) lt!24849 (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)) lt!25717)))

(declare-fun b!61860 () Bool)

(assert (=> b!61860 (= e!40627 (not call!4778))))

(declare-fun b!61873 () Bool)

(declare-fun lt!25709 () Unit!1613)

(assert (=> b!61873 (= e!40625 lt!25709)))

(declare-fun lt!25711 () ListLongMap!1347)

(assert (=> b!61873 (= lt!25711 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) lt!24849 (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25714 () (_ BitVec 64))

(assert (=> b!61873 (= lt!25714 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25708 () (_ BitVec 64))

(assert (=> b!61873 (= lt!25708 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25701 () Unit!1613)

(assert (=> b!61873 (= lt!25701 (addStillContains!43 lt!25711 lt!25714 (zeroValue!1980 newMap!16) lt!25708))))

(assert (=> b!61873 (contains!682 (+!81 lt!25711 (tuple2!2023 lt!25714 (zeroValue!1980 newMap!16))) lt!25708)))

(declare-fun lt!25720 () Unit!1613)

(assert (=> b!61873 (= lt!25720 lt!25701)))

(declare-fun lt!25712 () ListLongMap!1347)

(assert (=> b!61873 (= lt!25712 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) lt!24849 (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25702 () (_ BitVec 64))

(assert (=> b!61873 (= lt!25702 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25722 () (_ BitVec 64))

(assert (=> b!61873 (= lt!25722 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25713 () Unit!1613)

(assert (=> b!61873 (= lt!25713 (addApplyDifferent!43 lt!25712 lt!25702 (minValue!1980 newMap!16) lt!25722))))

(assert (=> b!61873 (= (apply!67 (+!81 lt!25712 (tuple2!2023 lt!25702 (minValue!1980 newMap!16))) lt!25722) (apply!67 lt!25712 lt!25722))))

(declare-fun lt!25707 () Unit!1613)

(assert (=> b!61873 (= lt!25707 lt!25713)))

(declare-fun lt!25718 () ListLongMap!1347)

(assert (=> b!61873 (= lt!25718 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) lt!24849 (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25705 () (_ BitVec 64))

(assert (=> b!61873 (= lt!25705 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25706 () (_ BitVec 64))

(assert (=> b!61873 (= lt!25706 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!25721 () Unit!1613)

(assert (=> b!61873 (= lt!25721 (addApplyDifferent!43 lt!25718 lt!25705 (zeroValue!1980 newMap!16) lt!25706))))

(assert (=> b!61873 (= (apply!67 (+!81 lt!25718 (tuple2!2023 lt!25705 (zeroValue!1980 newMap!16))) lt!25706) (apply!67 lt!25718 lt!25706))))

(declare-fun lt!25716 () Unit!1613)

(assert (=> b!61873 (= lt!25716 lt!25721)))

(declare-fun lt!25715 () ListLongMap!1347)

(assert (=> b!61873 (= lt!25715 (getCurrentListMapNoExtraKeys!45 (_keys!3694 newMap!16) lt!24849 (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2066 newMap!16)))))

(declare-fun lt!25704 () (_ BitVec 64))

(assert (=> b!61873 (= lt!25704 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25710 () (_ BitVec 64))

(assert (=> b!61873 (= lt!25710 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!61873 (= lt!25709 (addApplyDifferent!43 lt!25715 lt!25704 (minValue!1980 newMap!16) lt!25710))))

(assert (=> b!61873 (= (apply!67 (+!81 lt!25715 (tuple2!2023 lt!25704 (minValue!1980 newMap!16))) lt!25710) (apply!67 lt!25715 lt!25710))))

(declare-fun b!61874 () Bool)

(declare-fun res!34045 () Bool)

(assert (=> b!61874 (=> (not res!34045) (not e!40618))))

(assert (=> b!61874 (= res!34045 e!40627)))

(declare-fun c!8185 () Bool)

(assert (=> b!61874 (= c!8185 (not (= (bvand (extraKeys!1949 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (= (and d!12491 c!8190) b!61870))

(assert (= (and d!12491 (not c!8190)) b!61866))

(assert (= (and b!61866 c!8187) b!61865))

(assert (= (and b!61866 (not c!8187)) b!61871))

(assert (= (and b!61871 c!8189) b!61861))

(assert (= (and b!61871 (not c!8189)) b!61859))

(assert (= (or b!61861 b!61859) bm!4779))

(assert (= (or b!61865 bm!4779) bm!4781))

(assert (= (or b!61865 b!61861) bm!4777))

(assert (= (or b!61870 bm!4781) bm!4780))

(assert (= (or b!61870 bm!4777) bm!4776))

(assert (= (and d!12491 res!34042) b!61858))

(assert (= (and d!12491 c!8186) b!61873))

(assert (= (and d!12491 (not c!8186)) b!61856))

(assert (= (and d!12491 res!34046) b!61854))

(assert (= (and b!61854 res!34038) b!61869))

(assert (= (and b!61854 (not res!34044)) b!61863))

(assert (= (and b!61863 res!34041) b!61872))

(assert (= (and b!61854 res!34040) b!61874))

(assert (= (and b!61874 c!8185) b!61868))

(assert (= (and b!61874 (not c!8185)) b!61860))

(assert (= (and b!61868 res!34039) b!61867))

(assert (= (or b!61868 b!61860) bm!4778))

(assert (= (and b!61874 res!34045) b!61864))

(assert (= (and b!61864 c!8188) b!61857))

(assert (= (and b!61864 (not c!8188)) b!61855))

(assert (= (and b!61857 res!34043) b!61862))

(assert (= (or b!61857 b!61855) bm!4775))

(declare-fun b_lambda!2741 () Bool)

(assert (=> (not b_lambda!2741) (not b!61872)))

(assert (=> b!61872 t!4804))

(declare-fun b_and!3785 () Bool)

(assert (= b_and!3781 (and (=> t!4804 result!2427) b_and!3785)))

(assert (=> b!61872 t!4806))

(declare-fun b_and!3787 () Bool)

(assert (= b_and!3783 (and (=> t!4806 result!2429) b_and!3787)))

(assert (=> b!61858 m!53277))

(assert (=> b!61858 m!53277))

(assert (=> b!61858 m!53279))

(assert (=> b!61863 m!53277))

(assert (=> b!61863 m!53277))

(declare-fun m!55299 () Bool)

(assert (=> b!61863 m!55299))

(declare-fun m!55301 () Bool)

(assert (=> bm!4775 m!55301))

(declare-fun m!55303 () Bool)

(assert (=> bm!4778 m!55303))

(declare-fun m!55305 () Bool)

(assert (=> b!61872 m!55305))

(assert (=> b!61872 m!53389))

(declare-fun m!55307 () Bool)

(assert (=> b!61872 m!55307))

(assert (=> b!61872 m!53277))

(assert (=> b!61872 m!53389))

(assert (=> b!61872 m!53277))

(declare-fun m!55309 () Bool)

(assert (=> b!61872 m!55309))

(assert (=> b!61872 m!55305))

(declare-fun m!55311 () Bool)

(assert (=> b!61867 m!55311))

(declare-fun m!55313 () Bool)

(assert (=> b!61862 m!55313))

(assert (=> d!12491 m!53287))

(declare-fun m!55315 () Bool)

(assert (=> bm!4776 m!55315))

(declare-fun m!55317 () Bool)

(assert (=> b!61870 m!55317))

(assert (=> b!61869 m!53277))

(assert (=> b!61869 m!53277))

(assert (=> b!61869 m!53279))

(declare-fun m!55319 () Bool)

(assert (=> bm!4780 m!55319))

(declare-fun m!55321 () Bool)

(assert (=> b!61873 m!55321))

(declare-fun m!55323 () Bool)

(assert (=> b!61873 m!55323))

(declare-fun m!55325 () Bool)

(assert (=> b!61873 m!55325))

(assert (=> b!61873 m!53277))

(declare-fun m!55327 () Bool)

(assert (=> b!61873 m!55327))

(declare-fun m!55329 () Bool)

(assert (=> b!61873 m!55329))

(declare-fun m!55331 () Bool)

(assert (=> b!61873 m!55331))

(declare-fun m!55333 () Bool)

(assert (=> b!61873 m!55333))

(declare-fun m!55335 () Bool)

(assert (=> b!61873 m!55335))

(declare-fun m!55337 () Bool)

(assert (=> b!61873 m!55337))

(declare-fun m!55339 () Bool)

(assert (=> b!61873 m!55339))

(assert (=> b!61873 m!55337))

(declare-fun m!55341 () Bool)

(assert (=> b!61873 m!55341))

(declare-fun m!55343 () Bool)

(assert (=> b!61873 m!55343))

(assert (=> b!61873 m!55343))

(declare-fun m!55345 () Bool)

(assert (=> b!61873 m!55345))

(declare-fun m!55347 () Bool)

(assert (=> b!61873 m!55347))

(assert (=> b!61873 m!55323))

(declare-fun m!55349 () Bool)

(assert (=> b!61873 m!55349))

(assert (=> b!61873 m!55333))

(assert (=> b!61873 m!55319))

(assert (=> b!60923 d!12491))

(declare-fun d!12493 () Bool)

(assert (=> d!12493 (= (get!1085 (getValueByKey!126 (toList!689 lt!24915) lt!24910)) (v!2409 (getValueByKey!126 (toList!689 lt!24915) lt!24910)))))

(assert (=> d!11965 d!12493))

(declare-fun b!61878 () Bool)

(declare-fun e!40629 () Option!132)

(assert (=> b!61878 (= e!40629 None!130)))

(declare-fun b!61876 () Bool)

(declare-fun e!40628 () Option!132)

(assert (=> b!61876 (= e!40628 e!40629)))

(declare-fun c!8192 () Bool)

(assert (=> b!61876 (= c!8192 (and ((_ is Cons!1422) (toList!689 lt!24915)) (not (= (_1!1022 (h!2004 (toList!689 lt!24915))) lt!24910))))))

(declare-fun b!61875 () Bool)

(assert (=> b!61875 (= e!40628 (Some!131 (_2!1022 (h!2004 (toList!689 lt!24915)))))))

(declare-fun b!61877 () Bool)

(assert (=> b!61877 (= e!40629 (getValueByKey!126 (t!4792 (toList!689 lt!24915)) lt!24910))))

(declare-fun d!12495 () Bool)

(declare-fun c!8191 () Bool)

(assert (=> d!12495 (= c!8191 (and ((_ is Cons!1422) (toList!689 lt!24915)) (= (_1!1022 (h!2004 (toList!689 lt!24915))) lt!24910)))))

(assert (=> d!12495 (= (getValueByKey!126 (toList!689 lt!24915) lt!24910) e!40628)))

(assert (= (and d!12495 c!8191) b!61875))

(assert (= (and d!12495 (not c!8191)) b!61876))

(assert (= (and b!61876 c!8192) b!61877))

(assert (= (and b!61876 (not c!8192)) b!61878))

(declare-fun m!55351 () Bool)

(assert (=> b!61877 m!55351))

(assert (=> d!11965 d!12495))

(declare-fun d!12497 () Bool)

(assert (=> d!12497 (isDefined!78 (getValueByKey!126 (toList!689 lt!24917) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun lt!25723 () Unit!1613)

(assert (=> d!12497 (= lt!25723 (choose!331 (toList!689 lt!24917) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!40630 () Bool)

(assert (=> d!12497 e!40630))

(declare-fun res!34047 () Bool)

(assert (=> d!12497 (=> (not res!34047) (not e!40630))))

(assert (=> d!12497 (= res!34047 (isStrictlySorted!272 (toList!689 lt!24917)))))

(assert (=> d!12497 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 lt!24917) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!25723)))

(declare-fun b!61879 () Bool)

(assert (=> b!61879 (= e!40630 (containsKey!129 (toList!689 lt!24917) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!12497 res!34047) b!61879))

(assert (=> d!12497 m!53115))

(assert (=> d!12497 m!53487))

(assert (=> d!12497 m!53487))

(assert (=> d!12497 m!53489))

(assert (=> d!12497 m!53115))

(declare-fun m!55353 () Bool)

(assert (=> d!12497 m!55353))

(assert (=> d!12497 m!53969))

(assert (=> b!61879 m!53115))

(assert (=> b!61879 m!53483))

(assert (=> b!60962 d!12497))

(assert (=> b!60962 d!12137))

(assert (=> b!60962 d!12083))

(assert (=> bm!4699 d!12425))

(declare-fun b!61883 () Bool)

(declare-fun e!40632 () Option!132)

(assert (=> b!61883 (= e!40632 None!130)))

(declare-fun b!61881 () Bool)

(declare-fun e!40631 () Option!132)

(assert (=> b!61881 (= e!40631 e!40632)))

(declare-fun c!8194 () Bool)

(assert (=> b!61881 (= c!8194 (and ((_ is Cons!1422) (toList!689 lt!24932)) (not (= (_1!1022 (h!2004 (toList!689 lt!24932))) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))))

(declare-fun b!61880 () Bool)

(assert (=> b!61880 (= e!40631 (Some!131 (_2!1022 (h!2004 (toList!689 lt!24932)))))))

(declare-fun b!61882 () Bool)

(assert (=> b!61882 (= e!40632 (getValueByKey!126 (t!4792 (toList!689 lt!24932)) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun d!12499 () Bool)

(declare-fun c!8193 () Bool)

(assert (=> d!12499 (= c!8193 (and ((_ is Cons!1422) (toList!689 lt!24932)) (= (_1!1022 (h!2004 (toList!689 lt!24932))) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(assert (=> d!12499 (= (getValueByKey!126 (toList!689 lt!24932) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) e!40631)))

(assert (= (and d!12499 c!8193) b!61880))

(assert (= (and d!12499 (not c!8193)) b!61881))

(assert (= (and b!61881 c!8194) b!61882))

(assert (= (and b!61881 (not c!8194)) b!61883))

(declare-fun m!55355 () Bool)

(assert (=> b!61882 m!55355))

(assert (=> b!60822 d!12499))

(declare-fun d!12501 () Bool)

(declare-fun res!34048 () Bool)

(declare-fun e!40633 () Bool)

(assert (=> d!12501 (=> res!34048 e!40633)))

(assert (=> d!12501 (= res!34048 (and ((_ is Cons!1422) (toList!689 call!4625)) (= (_1!1022 (h!2004 (toList!689 call!4625))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355))))))

(assert (=> d!12501 (= (containsKey!129 (toList!689 call!4625) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) e!40633)))

(declare-fun b!61884 () Bool)

(declare-fun e!40634 () Bool)

(assert (=> b!61884 (= e!40633 e!40634)))

(declare-fun res!34049 () Bool)

(assert (=> b!61884 (=> (not res!34049) (not e!40634))))

(assert (=> b!61884 (= res!34049 (and (or (not ((_ is Cons!1422) (toList!689 call!4625))) (bvsle (_1!1022 (h!2004 (toList!689 call!4625))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355))) ((_ is Cons!1422) (toList!689 call!4625)) (bvslt (_1!1022 (h!2004 (toList!689 call!4625))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355))))))

(declare-fun b!61885 () Bool)

(assert (=> b!61885 (= e!40634 (containsKey!129 (t!4792 (toList!689 call!4625)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(assert (= (and d!12501 (not res!34048)) b!61884))

(assert (= (and b!61884 res!34049) b!61885))

(assert (=> b!61885 m!52989))

(declare-fun m!55357 () Bool)

(assert (=> b!61885 m!55357))

(assert (=> d!12033 d!12501))

(declare-fun d!12503 () Bool)

(declare-fun e!40636 () Bool)

(assert (=> d!12503 e!40636))

(declare-fun res!34050 () Bool)

(assert (=> d!12503 (=> res!34050 e!40636)))

(declare-fun lt!25726 () Bool)

(assert (=> d!12503 (= res!34050 (not lt!25726))))

(declare-fun lt!25727 () Bool)

(assert (=> d!12503 (= lt!25726 lt!25727)))

(declare-fun lt!25724 () Unit!1613)

(declare-fun e!40635 () Unit!1613)

(assert (=> d!12503 (= lt!25724 e!40635)))

(declare-fun c!8195 () Bool)

(assert (=> d!12503 (= c!8195 lt!25727)))

(assert (=> d!12503 (= lt!25727 (containsKey!129 (toList!689 lt!25243) (_1!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(assert (=> d!12503 (= (contains!682 lt!25243 (_1!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))) lt!25726)))

(declare-fun b!61886 () Bool)

(declare-fun lt!25725 () Unit!1613)

(assert (=> b!61886 (= e!40635 lt!25725)))

(assert (=> b!61886 (= lt!25725 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 lt!25243) (_1!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(assert (=> b!61886 (isDefined!78 (getValueByKey!126 (toList!689 lt!25243) (_1!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(declare-fun b!61887 () Bool)

(declare-fun Unit!1672 () Unit!1613)

(assert (=> b!61887 (= e!40635 Unit!1672)))

(declare-fun b!61888 () Bool)

(assert (=> b!61888 (= e!40636 (isDefined!78 (getValueByKey!126 (toList!689 lt!25243) (_1!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))))

(assert (= (and d!12503 c!8195) b!61886))

(assert (= (and d!12503 (not c!8195)) b!61887))

(assert (= (and d!12503 (not res!34050)) b!61888))

(declare-fun m!55359 () Bool)

(assert (=> d!12503 m!55359))

(declare-fun m!55361 () Bool)

(assert (=> b!61886 m!55361))

(assert (=> b!61886 m!53863))

(assert (=> b!61886 m!53863))

(declare-fun m!55363 () Bool)

(assert (=> b!61886 m!55363))

(assert (=> b!61888 m!53863))

(assert (=> b!61888 m!53863))

(assert (=> b!61888 m!55363))

(assert (=> d!12035 d!12503))

(declare-fun b!61892 () Bool)

(declare-fun e!40638 () Option!132)

(assert (=> b!61892 (= e!40638 None!130)))

(declare-fun b!61890 () Bool)

(declare-fun e!40637 () Option!132)

(assert (=> b!61890 (= e!40637 e!40638)))

(declare-fun c!8197 () Bool)

(assert (=> b!61890 (= c!8197 (and ((_ is Cons!1422) lt!25245) (not (= (_1!1022 (h!2004 lt!25245)) (_1!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))))

(declare-fun b!61889 () Bool)

(assert (=> b!61889 (= e!40637 (Some!131 (_2!1022 (h!2004 lt!25245))))))

(declare-fun b!61891 () Bool)

(assert (=> b!61891 (= e!40638 (getValueByKey!126 (t!4792 lt!25245) (_1!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(declare-fun d!12505 () Bool)

(declare-fun c!8196 () Bool)

(assert (=> d!12505 (= c!8196 (and ((_ is Cons!1422) lt!25245) (= (_1!1022 (h!2004 lt!25245)) (_1!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))))

(assert (=> d!12505 (= (getValueByKey!126 lt!25245 (_1!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))) e!40637)))

(assert (= (and d!12505 c!8196) b!61889))

(assert (= (and d!12505 (not c!8196)) b!61890))

(assert (= (and b!61890 c!8197) b!61891))

(assert (= (and b!61890 (not c!8197)) b!61892))

(declare-fun m!55365 () Bool)

(assert (=> b!61891 m!55365))

(assert (=> d!12035 d!12505))

(declare-fun d!12507 () Bool)

(assert (=> d!12507 (= (getValueByKey!126 lt!25245 (_1!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))) (Some!131 (_2!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(declare-fun lt!25728 () Unit!1613)

(assert (=> d!12507 (= lt!25728 (choose!332 lt!25245 (_1!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) (_2!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(declare-fun e!40639 () Bool)

(assert (=> d!12507 e!40639))

(declare-fun res!34051 () Bool)

(assert (=> d!12507 (=> (not res!34051) (not e!40639))))

(assert (=> d!12507 (= res!34051 (isStrictlySorted!272 lt!25245))))

(assert (=> d!12507 (= (lemmaContainsTupThenGetReturnValue!43 lt!25245 (_1!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) (_2!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))) lt!25728)))

(declare-fun b!61893 () Bool)

(declare-fun res!34052 () Bool)

(assert (=> b!61893 (=> (not res!34052) (not e!40639))))

(assert (=> b!61893 (= res!34052 (containsKey!129 lt!25245 (_1!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(declare-fun b!61894 () Bool)

(assert (=> b!61894 (= e!40639 (contains!685 lt!25245 (tuple2!2023 (_1!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) (_2!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))))

(assert (= (and d!12507 res!34051) b!61893))

(assert (= (and b!61893 res!34052) b!61894))

(assert (=> d!12507 m!53857))

(declare-fun m!55367 () Bool)

(assert (=> d!12507 m!55367))

(declare-fun m!55369 () Bool)

(assert (=> d!12507 m!55369))

(declare-fun m!55371 () Bool)

(assert (=> b!61893 m!55371))

(declare-fun m!55373 () Bool)

(assert (=> b!61894 m!55373))

(assert (=> d!12035 d!12507))

(declare-fun bm!4782 () Bool)

(declare-fun call!4787 () List!1426)

(declare-fun call!4785 () List!1426)

(assert (=> bm!4782 (= call!4787 call!4785)))

(declare-fun b!61895 () Bool)

(declare-fun e!40642 () List!1426)

(declare-fun call!4786 () List!1426)

(assert (=> b!61895 (= e!40642 call!4786)))

(declare-fun c!8198 () Bool)

(declare-fun bm!4783 () Bool)

(declare-fun e!40640 () List!1426)

(assert (=> bm!4783 (= call!4785 ($colon$colon!60 e!40640 (ite c!8198 (h!2004 (toList!689 (ite c!7910 call!4641 (ite c!7907 call!4644 call!4642)))) (tuple2!2023 (_1!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) (_2!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))))

(declare-fun c!8200 () Bool)

(assert (=> bm!4783 (= c!8200 c!8198)))

(declare-fun b!61896 () Bool)

(assert (=> b!61896 (= e!40640 (insertStrictlySorted!46 (t!4792 (toList!689 (ite c!7910 call!4641 (ite c!7907 call!4644 call!4642)))) (_1!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) (_2!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(declare-fun b!61897 () Bool)

(declare-fun lt!25729 () List!1426)

(declare-fun e!40641 () Bool)

(assert (=> b!61897 (= e!40641 (contains!685 lt!25729 (tuple2!2023 (_1!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) (_2!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))))

(declare-fun bm!4784 () Bool)

(assert (=> bm!4784 (= call!4786 call!4787)))

(declare-fun b!61898 () Bool)

(declare-fun res!34054 () Bool)

(assert (=> b!61898 (=> (not res!34054) (not e!40641))))

(assert (=> b!61898 (= res!34054 (containsKey!129 lt!25729 (_1!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(declare-fun b!61899 () Bool)

(declare-fun e!40643 () List!1426)

(declare-fun e!40644 () List!1426)

(assert (=> b!61899 (= e!40643 e!40644)))

(declare-fun c!8199 () Bool)

(assert (=> b!61899 (= c!8199 (and ((_ is Cons!1422) (toList!689 (ite c!7910 call!4641 (ite c!7907 call!4644 call!4642)))) (= (_1!1022 (h!2004 (toList!689 (ite c!7910 call!4641 (ite c!7907 call!4644 call!4642))))) (_1!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))))

(declare-fun c!8201 () Bool)

(declare-fun b!61900 () Bool)

(assert (=> b!61900 (= c!8201 (and ((_ is Cons!1422) (toList!689 (ite c!7910 call!4641 (ite c!7907 call!4644 call!4642)))) (bvsgt (_1!1022 (h!2004 (toList!689 (ite c!7910 call!4641 (ite c!7907 call!4644 call!4642))))) (_1!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))))

(assert (=> b!61900 (= e!40644 e!40642)))

(declare-fun d!12509 () Bool)

(assert (=> d!12509 e!40641))

(declare-fun res!34053 () Bool)

(assert (=> d!12509 (=> (not res!34053) (not e!40641))))

(assert (=> d!12509 (= res!34053 (isStrictlySorted!272 lt!25729))))

(assert (=> d!12509 (= lt!25729 e!40643)))

(assert (=> d!12509 (= c!8198 (and ((_ is Cons!1422) (toList!689 (ite c!7910 call!4641 (ite c!7907 call!4644 call!4642)))) (bvslt (_1!1022 (h!2004 (toList!689 (ite c!7910 call!4641 (ite c!7907 call!4644 call!4642))))) (_1!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))))

(assert (=> d!12509 (isStrictlySorted!272 (toList!689 (ite c!7910 call!4641 (ite c!7907 call!4644 call!4642))))))

(assert (=> d!12509 (= (insertStrictlySorted!46 (toList!689 (ite c!7910 call!4641 (ite c!7907 call!4644 call!4642))) (_1!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) (_2!1022 (ite (or c!7910 c!7907) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))) lt!25729)))

(declare-fun b!61901 () Bool)

(assert (=> b!61901 (= e!40640 (ite c!8199 (t!4792 (toList!689 (ite c!7910 call!4641 (ite c!7907 call!4644 call!4642)))) (ite c!8201 (Cons!1422 (h!2004 (toList!689 (ite c!7910 call!4641 (ite c!7907 call!4644 call!4642)))) (t!4792 (toList!689 (ite c!7910 call!4641 (ite c!7907 call!4644 call!4642))))) Nil!1423)))))

(declare-fun b!61902 () Bool)

(assert (=> b!61902 (= e!40643 call!4785)))

(declare-fun b!61903 () Bool)

(assert (=> b!61903 (= e!40644 call!4787)))

(declare-fun b!61904 () Bool)

(assert (=> b!61904 (= e!40642 call!4786)))

(assert (= (and d!12509 c!8198) b!61902))

(assert (= (and d!12509 (not c!8198)) b!61899))

(assert (= (and b!61899 c!8199) b!61903))

(assert (= (and b!61899 (not c!8199)) b!61900))

(assert (= (and b!61900 c!8201) b!61904))

(assert (= (and b!61900 (not c!8201)) b!61895))

(assert (= (or b!61904 b!61895) bm!4784))

(assert (= (or b!61903 bm!4784) bm!4782))

(assert (= (or b!61902 bm!4782) bm!4783))

(assert (= (and bm!4783 c!8200) b!61896))

(assert (= (and bm!4783 (not c!8200)) b!61901))

(assert (= (and d!12509 res!34053) b!61898))

(assert (= (and b!61898 res!34054) b!61897))

(declare-fun m!55375 () Bool)

(assert (=> b!61897 m!55375))

(declare-fun m!55377 () Bool)

(assert (=> bm!4783 m!55377))

(declare-fun m!55379 () Bool)

(assert (=> b!61896 m!55379))

(declare-fun m!55381 () Bool)

(assert (=> d!12509 m!55381))

(declare-fun m!55383 () Bool)

(assert (=> d!12509 m!55383))

(declare-fun m!55385 () Bool)

(assert (=> b!61898 m!55385))

(assert (=> d!12035 d!12509))

(declare-fun lt!25730 () Bool)

(declare-fun d!12511 () Bool)

(assert (=> d!12511 (= lt!25730 (select (content!67 (toList!689 lt!25138)) (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))

(declare-fun e!40646 () Bool)

(assert (=> d!12511 (= lt!25730 e!40646)))

(declare-fun res!34055 () Bool)

(assert (=> d!12511 (=> (not res!34055) (not e!40646))))

(assert (=> d!12511 (= res!34055 ((_ is Cons!1422) (toList!689 lt!25138)))))

(assert (=> d!12511 (= (contains!685 (toList!689 lt!25138) (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992))))) lt!25730)))

(declare-fun b!61905 () Bool)

(declare-fun e!40645 () Bool)

(assert (=> b!61905 (= e!40646 e!40645)))

(declare-fun res!34056 () Bool)

(assert (=> b!61905 (=> res!34056 e!40645)))

(assert (=> b!61905 (= res!34056 (= (h!2004 (toList!689 lt!25138)) (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))

(declare-fun b!61906 () Bool)

(assert (=> b!61906 (= e!40645 (contains!685 (t!4792 (toList!689 lt!25138)) (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))

(assert (= (and d!12511 res!34055) b!61905))

(assert (= (and b!61905 (not res!34056)) b!61906))

(declare-fun m!55387 () Bool)

(assert (=> d!12511 m!55387))

(declare-fun m!55389 () Bool)

(assert (=> d!12511 m!55389))

(declare-fun m!55391 () Bool)

(assert (=> b!61906 m!55391))

(assert (=> b!61005 d!12511))

(assert (=> bm!4685 d!12027))

(declare-fun b!61907 () Bool)

(declare-fun e!40648 () (_ BitVec 32))

(declare-fun call!4788 () (_ BitVec 32))

(assert (=> b!61907 (= e!40648 call!4788)))

(declare-fun d!12513 () Bool)

(declare-fun lt!25731 () (_ BitVec 32))

(assert (=> d!12513 (and (bvsge lt!25731 #b00000000000000000000000000000000) (bvsle lt!25731 (bvsub (size!2015 (_keys!3694 (_2!1023 lt!24841))) #b00000000000000000000000000000000)))))

(declare-fun e!40647 () (_ BitVec 32))

(assert (=> d!12513 (= lt!25731 e!40647)))

(declare-fun c!8203 () Bool)

(assert (=> d!12513 (= c!8203 (bvsge #b00000000000000000000000000000000 (size!2015 (_keys!3694 (_2!1023 lt!24841)))))))

(assert (=> d!12513 (and (bvsle #b00000000000000000000000000000000 (size!2015 (_keys!3694 (_2!1023 lt!24841)))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2015 (_keys!3694 (_2!1023 lt!24841))) (size!2015 (_keys!3694 (_2!1023 lt!24841)))))))

(assert (=> d!12513 (= (arrayCountValidKeys!0 (_keys!3694 (_2!1023 lt!24841)) #b00000000000000000000000000000000 (size!2015 (_keys!3694 (_2!1023 lt!24841)))) lt!25731)))

(declare-fun bm!4785 () Bool)

(assert (=> bm!4785 (= call!4788 (arrayCountValidKeys!0 (_keys!3694 (_2!1023 lt!24841)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2015 (_keys!3694 (_2!1023 lt!24841)))))))

(declare-fun b!61908 () Bool)

(assert (=> b!61908 (= e!40647 e!40648)))

(declare-fun c!8202 () Bool)

(assert (=> b!61908 (= c!8202 (validKeyInArray!0 (select (arr!1784 (_keys!3694 (_2!1023 lt!24841))) #b00000000000000000000000000000000)))))

(declare-fun b!61909 () Bool)

(assert (=> b!61909 (= e!40648 (bvadd #b00000000000000000000000000000001 call!4788))))

(declare-fun b!61910 () Bool)

(assert (=> b!61910 (= e!40647 #b00000000000000000000000000000000)))

(assert (= (and d!12513 c!8203) b!61910))

(assert (= (and d!12513 (not c!8203)) b!61908))

(assert (= (and b!61908 c!8202) b!61909))

(assert (= (and b!61908 (not c!8202)) b!61907))

(assert (= (or b!61909 b!61907) bm!4785))

(declare-fun m!55393 () Bool)

(assert (=> bm!4785 m!55393))

(assert (=> b!61908 m!54743))

(assert (=> b!61908 m!54743))

(assert (=> b!61908 m!54751))

(assert (=> b!61093 d!12513))

(declare-fun d!12515 () Bool)

(declare-fun res!34057 () Bool)

(declare-fun e!40649 () Bool)

(assert (=> d!12515 (=> (not res!34057) (not e!40649))))

(assert (=> d!12515 (= res!34057 (simpleValid!43 (_2!1023 lt!25028)))))

(assert (=> d!12515 (= (valid!266 (_2!1023 lt!25028)) e!40649)))

(declare-fun b!61911 () Bool)

(declare-fun res!34058 () Bool)

(assert (=> b!61911 (=> (not res!34058) (not e!40649))))

(assert (=> b!61911 (= res!34058 (= (arrayCountValidKeys!0 (_keys!3694 (_2!1023 lt!25028)) #b00000000000000000000000000000000 (size!2015 (_keys!3694 (_2!1023 lt!25028)))) (_size!363 (_2!1023 lt!25028))))))

(declare-fun b!61912 () Bool)

(declare-fun res!34059 () Bool)

(assert (=> b!61912 (=> (not res!34059) (not e!40649))))

(assert (=> b!61912 (= res!34059 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!3694 (_2!1023 lt!25028)) (mask!5962 (_2!1023 lt!25028))))))

(declare-fun b!61913 () Bool)

(assert (=> b!61913 (= e!40649 (arrayNoDuplicates!0 (_keys!3694 (_2!1023 lt!25028)) #b00000000000000000000000000000000 Nil!1424))))

(assert (= (and d!12515 res!34057) b!61911))

(assert (= (and b!61911 res!34058) b!61912))

(assert (= (and b!61912 res!34059) b!61913))

(declare-fun m!55395 () Bool)

(assert (=> d!12515 m!55395))

(declare-fun m!55397 () Bool)

(assert (=> b!61911 m!55397))

(declare-fun m!55399 () Bool)

(assert (=> b!61912 m!55399))

(declare-fun m!55401 () Bool)

(assert (=> b!61913 m!55401))

(assert (=> b!60880 d!12515))

(assert (=> b!61033 d!12031))

(declare-fun d!12517 () Bool)

(assert (=> d!12517 (not (contains!682 (+!81 lt!25159 (tuple2!2023 lt!25156 lt!25157)) lt!25161))))

(declare-fun lt!25734 () Unit!1613)

(declare-fun choose!335 (ListLongMap!1347 (_ BitVec 64) V!2857 (_ BitVec 64)) Unit!1613)

(assert (=> d!12517 (= lt!25734 (choose!335 lt!25159 lt!25156 lt!25157 lt!25161))))

(declare-fun e!40652 () Bool)

(assert (=> d!12517 e!40652))

(declare-fun res!34062 () Bool)

(assert (=> d!12517 (=> (not res!34062) (not e!40652))))

(assert (=> d!12517 (= res!34062 (not (contains!682 lt!25159 lt!25161)))))

(assert (=> d!12517 (= (addStillNotContains!18 lt!25159 lt!25156 lt!25157 lt!25161) lt!25734)))

(declare-fun b!61917 () Bool)

(assert (=> b!61917 (= e!40652 (not (= lt!25156 lt!25161)))))

(assert (= (and d!12517 res!34062) b!61917))

(assert (=> d!12517 m!53635))

(assert (=> d!12517 m!53635))

(assert (=> d!12517 m!53637))

(declare-fun m!55403 () Bool)

(assert (=> d!12517 m!55403))

(declare-fun m!55405 () Bool)

(assert (=> d!12517 m!55405))

(assert (=> b!61033 d!12517))

(declare-fun d!12519 () Bool)

(declare-fun e!40654 () Bool)

(assert (=> d!12519 e!40654))

(declare-fun res!34063 () Bool)

(assert (=> d!12519 (=> res!34063 e!40654)))

(declare-fun lt!25737 () Bool)

(assert (=> d!12519 (= res!34063 (not lt!25737))))

(declare-fun lt!25738 () Bool)

(assert (=> d!12519 (= lt!25737 lt!25738)))

(declare-fun lt!25735 () Unit!1613)

(declare-fun e!40653 () Unit!1613)

(assert (=> d!12519 (= lt!25735 e!40653)))

(declare-fun c!8204 () Bool)

(assert (=> d!12519 (= c!8204 lt!25738)))

(assert (=> d!12519 (= lt!25738 (containsKey!129 (toList!689 (+!81 lt!25159 (tuple2!2023 lt!25156 lt!25157))) lt!25161))))

(assert (=> d!12519 (= (contains!682 (+!81 lt!25159 (tuple2!2023 lt!25156 lt!25157)) lt!25161) lt!25737)))

(declare-fun b!61918 () Bool)

(declare-fun lt!25736 () Unit!1613)

(assert (=> b!61918 (= e!40653 lt!25736)))

(assert (=> b!61918 (= lt!25736 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 (+!81 lt!25159 (tuple2!2023 lt!25156 lt!25157))) lt!25161))))

(assert (=> b!61918 (isDefined!78 (getValueByKey!126 (toList!689 (+!81 lt!25159 (tuple2!2023 lt!25156 lt!25157))) lt!25161))))

(declare-fun b!61919 () Bool)

(declare-fun Unit!1673 () Unit!1613)

(assert (=> b!61919 (= e!40653 Unit!1673)))

(declare-fun b!61920 () Bool)

(assert (=> b!61920 (= e!40654 (isDefined!78 (getValueByKey!126 (toList!689 (+!81 lt!25159 (tuple2!2023 lt!25156 lt!25157))) lt!25161)))))

(assert (= (and d!12519 c!8204) b!61918))

(assert (= (and d!12519 (not c!8204)) b!61919))

(assert (= (and d!12519 (not res!34063)) b!61920))

(declare-fun m!55407 () Bool)

(assert (=> d!12519 m!55407))

(declare-fun m!55409 () Bool)

(assert (=> b!61918 m!55409))

(declare-fun m!55411 () Bool)

(assert (=> b!61918 m!55411))

(assert (=> b!61918 m!55411))

(declare-fun m!55413 () Bool)

(assert (=> b!61918 m!55413))

(assert (=> b!61920 m!55411))

(assert (=> b!61920 m!55411))

(assert (=> b!61920 m!55413))

(assert (=> b!61033 d!12519))

(declare-fun d!12521 () Bool)

(declare-fun e!40655 () Bool)

(assert (=> d!12521 e!40655))

(declare-fun res!34065 () Bool)

(assert (=> d!12521 (=> (not res!34065) (not e!40655))))

(declare-fun lt!25740 () ListLongMap!1347)

(assert (=> d!12521 (= res!34065 (contains!682 lt!25740 (_1!1022 (tuple2!2023 lt!25156 lt!25157))))))

(declare-fun lt!25742 () List!1426)

(assert (=> d!12521 (= lt!25740 (ListLongMap!1348 lt!25742))))

(declare-fun lt!25741 () Unit!1613)

(declare-fun lt!25739 () Unit!1613)

(assert (=> d!12521 (= lt!25741 lt!25739)))

(assert (=> d!12521 (= (getValueByKey!126 lt!25742 (_1!1022 (tuple2!2023 lt!25156 lt!25157))) (Some!131 (_2!1022 (tuple2!2023 lt!25156 lt!25157))))))

(assert (=> d!12521 (= lt!25739 (lemmaContainsTupThenGetReturnValue!43 lt!25742 (_1!1022 (tuple2!2023 lt!25156 lt!25157)) (_2!1022 (tuple2!2023 lt!25156 lt!25157))))))

(assert (=> d!12521 (= lt!25742 (insertStrictlySorted!46 (toList!689 lt!25159) (_1!1022 (tuple2!2023 lt!25156 lt!25157)) (_2!1022 (tuple2!2023 lt!25156 lt!25157))))))

(assert (=> d!12521 (= (+!81 lt!25159 (tuple2!2023 lt!25156 lt!25157)) lt!25740)))

(declare-fun b!61921 () Bool)

(declare-fun res!34064 () Bool)

(assert (=> b!61921 (=> (not res!34064) (not e!40655))))

(assert (=> b!61921 (= res!34064 (= (getValueByKey!126 (toList!689 lt!25740) (_1!1022 (tuple2!2023 lt!25156 lt!25157))) (Some!131 (_2!1022 (tuple2!2023 lt!25156 lt!25157)))))))

(declare-fun b!61922 () Bool)

(assert (=> b!61922 (= e!40655 (contains!685 (toList!689 lt!25740) (tuple2!2023 lt!25156 lt!25157)))))

(assert (= (and d!12521 res!34065) b!61921))

(assert (= (and b!61921 res!34064) b!61922))

(declare-fun m!55415 () Bool)

(assert (=> d!12521 m!55415))

(declare-fun m!55417 () Bool)

(assert (=> d!12521 m!55417))

(declare-fun m!55419 () Bool)

(assert (=> d!12521 m!55419))

(declare-fun m!55421 () Bool)

(assert (=> d!12521 m!55421))

(declare-fun m!55423 () Bool)

(assert (=> b!61921 m!55423))

(declare-fun m!55425 () Bool)

(assert (=> b!61922 m!55425))

(assert (=> b!61033 d!12521))

(declare-fun d!12523 () Bool)

(declare-fun e!40656 () Bool)

(assert (=> d!12523 e!40656))

(declare-fun res!34067 () Bool)

(assert (=> d!12523 (=> (not res!34067) (not e!40656))))

(declare-fun lt!25744 () ListLongMap!1347)

(assert (=> d!12523 (= res!34067 (contains!682 lt!25744 (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!25746 () List!1426)

(assert (=> d!12523 (= lt!25744 (ListLongMap!1348 lt!25746))))

(declare-fun lt!25745 () Unit!1613)

(declare-fun lt!25743 () Unit!1613)

(assert (=> d!12523 (= lt!25745 lt!25743)))

(assert (=> d!12523 (= (getValueByKey!126 lt!25746 (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!131 (_2!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12523 (= lt!25743 (lemmaContainsTupThenGetReturnValue!43 lt!25746 (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12523 (= lt!25746 (insertStrictlySorted!46 (toList!689 call!4679) (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!12523 (= (+!81 call!4679 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!25744)))

(declare-fun b!61923 () Bool)

(declare-fun res!34066 () Bool)

(assert (=> b!61923 (=> (not res!34066) (not e!40656))))

(assert (=> b!61923 (= res!34066 (= (getValueByKey!126 (toList!689 lt!25744) (_1!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!131 (_2!1022 (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!61924 () Bool)

(assert (=> b!61924 (= e!40656 (contains!685 (toList!689 lt!25744) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!12523 res!34067) b!61923))

(assert (= (and b!61923 res!34066) b!61924))

(declare-fun m!55427 () Bool)

(assert (=> d!12523 m!55427))

(declare-fun m!55429 () Bool)

(assert (=> d!12523 m!55429))

(declare-fun m!55431 () Bool)

(assert (=> d!12523 m!55431))

(declare-fun m!55433 () Bool)

(assert (=> d!12523 m!55433))

(declare-fun m!55435 () Bool)

(assert (=> b!61923 m!55435))

(declare-fun m!55437 () Bool)

(assert (=> b!61924 m!55437))

(assert (=> b!61033 d!12523))

(declare-fun d!12525 () Bool)

(declare-fun e!40657 () Bool)

(assert (=> d!12525 e!40657))

(declare-fun res!34069 () Bool)

(assert (=> d!12525 (=> (not res!34069) (not e!40657))))

(declare-fun lt!25748 () ListLongMap!1347)

(assert (=> d!12525 (= res!34069 (contains!682 lt!25748 (_1!1022 (ite (or c!7954 c!7951) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))))))))

(declare-fun lt!25750 () List!1426)

(assert (=> d!12525 (= lt!25748 (ListLongMap!1348 lt!25750))))

(declare-fun lt!25749 () Unit!1613)

(declare-fun lt!25747 () Unit!1613)

(assert (=> d!12525 (= lt!25749 lt!25747)))

(assert (=> d!12525 (= (getValueByKey!126 lt!25750 (_1!1022 (ite (or c!7954 c!7951) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))))) (Some!131 (_2!1022 (ite (or c!7954 c!7951) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))))))))

(assert (=> d!12525 (= lt!25747 (lemmaContainsTupThenGetReturnValue!43 lt!25750 (_1!1022 (ite (or c!7954 c!7951) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))) (_2!1022 (ite (or c!7954 c!7951) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))))))))

(assert (=> d!12525 (= lt!25750 (insertStrictlySorted!46 (toList!689 (ite c!7954 call!4671 (ite c!7951 call!4674 call!4672))) (_1!1022 (ite (or c!7954 c!7951) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))) (_2!1022 (ite (or c!7954 c!7951) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))))))))

(assert (=> d!12525 (= (+!81 (ite c!7954 call!4671 (ite c!7951 call!4674 call!4672)) (ite (or c!7954 c!7951) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))) lt!25748)))

(declare-fun b!61925 () Bool)

(declare-fun res!34068 () Bool)

(assert (=> b!61925 (=> (not res!34068) (not e!40657))))

(assert (=> b!61925 (= res!34068 (= (getValueByKey!126 (toList!689 lt!25748) (_1!1022 (ite (or c!7954 c!7951) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))))) (Some!131 (_2!1022 (ite (or c!7954 c!7951) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))))))))

(declare-fun b!61926 () Bool)

(assert (=> b!61926 (= e!40657 (contains!685 (toList!689 lt!25748) (ite (or c!7954 c!7951) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!7887 c!7877) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!1980 newMap!16))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))))))

(assert (= (and d!12525 res!34069) b!61925))

(assert (= (and b!61925 res!34068) b!61926))

(declare-fun m!55439 () Bool)

(assert (=> d!12525 m!55439))

(declare-fun m!55441 () Bool)

(assert (=> d!12525 m!55441))

(declare-fun m!55443 () Bool)

(assert (=> d!12525 m!55443))

(declare-fun m!55445 () Bool)

(assert (=> d!12525 m!55445))

(declare-fun m!55447 () Bool)

(assert (=> b!61925 m!55447))

(declare-fun m!55449 () Bool)

(assert (=> b!61926 m!55449))

(assert (=> bm!4668 d!12525))

(declare-fun d!12527 () Bool)

(declare-fun lt!25751 () Bool)

(assert (=> d!12527 (= lt!25751 (select (content!67 (toList!689 lt!25036)) (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!40659 () Bool)

(assert (=> d!12527 (= lt!25751 e!40659)))

(declare-fun res!34070 () Bool)

(assert (=> d!12527 (=> (not res!34070) (not e!40659))))

(assert (=> d!12527 (= res!34070 ((_ is Cons!1422) (toList!689 lt!25036)))))

(assert (=> d!12527 (= (contains!685 (toList!689 lt!25036) (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!25751)))

(declare-fun b!61927 () Bool)

(declare-fun e!40658 () Bool)

(assert (=> b!61927 (= e!40659 e!40658)))

(declare-fun res!34071 () Bool)

(assert (=> b!61927 (=> res!34071 e!40658)))

(assert (=> b!61927 (= res!34071 (= (h!2004 (toList!689 lt!25036)) (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!61928 () Bool)

(assert (=> b!61928 (= e!40658 (contains!685 (t!4792 (toList!689 lt!25036)) (ite c!7887 (ite c!7877 (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2023 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!12527 res!34070) b!61927))

(assert (= (and b!61927 (not res!34071)) b!61928))

(declare-fun m!55451 () Bool)

(assert (=> d!12527 m!55451))

(declare-fun m!55453 () Bool)

(assert (=> d!12527 m!55453))

(declare-fun m!55455 () Bool)

(assert (=> b!61928 m!55455))

(assert (=> b!60896 d!12527))

(declare-fun d!12529 () Bool)

(assert (=> d!12529 (= (apply!67 lt!25210 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1085 (getValueByKey!126 (toList!689 lt!25210) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2703 () Bool)

(assert (= bs!2703 d!12529))

(declare-fun m!55457 () Bool)

(assert (=> bs!2703 m!55457))

(assert (=> bs!2703 m!55457))

(declare-fun m!55459 () Bool)

(assert (=> bs!2703 m!55459))

(assert (=> b!61124 d!12529))

(declare-fun b!61932 () Bool)

(declare-fun e!40661 () Option!132)

(assert (=> b!61932 (= e!40661 None!130)))

(declare-fun b!61930 () Bool)

(declare-fun e!40660 () Option!132)

(assert (=> b!61930 (= e!40660 e!40661)))

(declare-fun c!8206 () Bool)

(assert (=> b!61930 (= c!8206 (and ((_ is Cons!1422) (toList!689 lt!25133)) (not (= (_1!1022 (h!2004 (toList!689 lt!25133))) (_1!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))))))

(declare-fun b!61929 () Bool)

(assert (=> b!61929 (= e!40660 (Some!131 (_2!1022 (h!2004 (toList!689 lt!25133)))))))

(declare-fun b!61931 () Bool)

(assert (=> b!61931 (= e!40661 (getValueByKey!126 (t!4792 (toList!689 lt!25133)) (_1!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun d!12531 () Bool)

(declare-fun c!8205 () Bool)

(assert (=> d!12531 (= c!8205 (and ((_ is Cons!1422) (toList!689 lt!25133)) (= (_1!1022 (h!2004 (toList!689 lt!25133))) (_1!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(assert (=> d!12531 (= (getValueByKey!126 (toList!689 lt!25133) (_1!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))) e!40660)))

(assert (= (and d!12531 c!8205) b!61929))

(assert (= (and d!12531 (not c!8205)) b!61930))

(assert (= (and b!61930 c!8206) b!61931))

(assert (= (and b!61930 (not c!8206)) b!61932))

(declare-fun m!55461 () Bool)

(assert (=> b!61931 m!55461))

(assert (=> b!61001 d!12531))

(declare-fun d!12533 () Bool)

(assert (=> d!12533 (= (get!1084 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61173 d!12533))

(declare-fun d!12535 () Bool)

(declare-fun lt!25752 () Bool)

(assert (=> d!12535 (= lt!25752 (select (content!67 (toList!689 lt!25129)) (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))))

(declare-fun e!40663 () Bool)

(assert (=> d!12535 (= lt!25752 e!40663)))

(declare-fun res!34072 () Bool)

(assert (=> d!12535 (=> (not res!34072) (not e!40663))))

(assert (=> d!12535 (= res!34072 ((_ is Cons!1422) (toList!689 lt!25129)))))

(assert (=> d!12535 (= (contains!685 (toList!689 lt!25129) (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))) lt!25752)))

(declare-fun b!61933 () Bool)

(declare-fun e!40662 () Bool)

(assert (=> b!61933 (= e!40663 e!40662)))

(declare-fun res!34073 () Bool)

(assert (=> b!61933 (=> res!34073 e!40662)))

(assert (=> b!61933 (= res!34073 (= (h!2004 (toList!689 lt!25129)) (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))))

(declare-fun b!61934 () Bool)

(assert (=> b!61934 (= e!40662 (contains!685 (t!4792 (toList!689 lt!25129)) (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))))

(assert (= (and d!12535 res!34072) b!61933))

(assert (= (and b!61933 (not res!34073)) b!61934))

(declare-fun m!55463 () Bool)

(assert (=> d!12535 m!55463))

(declare-fun m!55465 () Bool)

(assert (=> d!12535 m!55465))

(declare-fun m!55467 () Bool)

(assert (=> b!61934 m!55467))

(assert (=> b!61000 d!12535))

(assert (=> b!61091 d!11879))

(declare-fun b!61947 () Bool)

(declare-fun e!40671 () SeekEntryResult!222)

(assert (=> b!61947 (= e!40671 Undefined!222)))

(declare-fun e!40670 () SeekEntryResult!222)

(declare-fun b!61948 () Bool)

(assert (=> b!61948 (= e!40670 (seekKeyOrZeroReturnVacant!0 (bvadd (x!10156 lt!25088) #b00000000000000000000000000000001) (nextIndex!0 (index!3014 lt!25088) (bvadd (x!10156 lt!25088) #b00000000000000000000000000000001) (mask!5962 newMap!16)) (index!3014 lt!25088) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (_keys!3694 newMap!16) (mask!5962 newMap!16)))))

(declare-fun b!61949 () Bool)

(declare-fun c!8214 () Bool)

(declare-fun lt!25758 () (_ BitVec 64))

(assert (=> b!61949 (= c!8214 (= lt!25758 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!40672 () SeekEntryResult!222)

(assert (=> b!61949 (= e!40672 e!40670)))

(declare-fun d!12537 () Bool)

(declare-fun lt!25757 () SeekEntryResult!222)

(assert (=> d!12537 (and (or ((_ is Undefined!222) lt!25757) (not ((_ is Found!222) lt!25757)) (and (bvsge (index!3013 lt!25757) #b00000000000000000000000000000000) (bvslt (index!3013 lt!25757) (size!2015 (_keys!3694 newMap!16))))) (or ((_ is Undefined!222) lt!25757) ((_ is Found!222) lt!25757) (not ((_ is MissingVacant!222) lt!25757)) (not (= (index!3015 lt!25757) (index!3014 lt!25088))) (and (bvsge (index!3015 lt!25757) #b00000000000000000000000000000000) (bvslt (index!3015 lt!25757) (size!2015 (_keys!3694 newMap!16))))) (or ((_ is Undefined!222) lt!25757) (ite ((_ is Found!222) lt!25757) (= (select (arr!1784 (_keys!3694 newMap!16)) (index!3013 lt!25757)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)) (and ((_ is MissingVacant!222) lt!25757) (= (index!3015 lt!25757) (index!3014 lt!25088)) (= (select (arr!1784 (_keys!3694 newMap!16)) (index!3015 lt!25757)) #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (=> d!12537 (= lt!25757 e!40671)))

(declare-fun c!8213 () Bool)

(assert (=> d!12537 (= c!8213 (bvsge (x!10156 lt!25088) #b01111111111111111111111111111110))))

(assert (=> d!12537 (= lt!25758 (select (arr!1784 (_keys!3694 newMap!16)) (index!3014 lt!25088)))))

(assert (=> d!12537 (validMask!0 (mask!5962 newMap!16))))

(assert (=> d!12537 (= (seekKeyOrZeroReturnVacant!0 (x!10156 lt!25088) (index!3014 lt!25088) (index!3014 lt!25088) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (_keys!3694 newMap!16) (mask!5962 newMap!16)) lt!25757)))

(declare-fun b!61950 () Bool)

(assert (=> b!61950 (= e!40671 e!40672)))

(declare-fun c!8215 () Bool)

(assert (=> b!61950 (= c!8215 (= lt!25758 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(declare-fun b!61951 () Bool)

(assert (=> b!61951 (= e!40672 (Found!222 (index!3014 lt!25088)))))

(declare-fun b!61952 () Bool)

(assert (=> b!61952 (= e!40670 (MissingVacant!222 (index!3014 lt!25088)))))

(assert (= (and d!12537 c!8213) b!61947))

(assert (= (and d!12537 (not c!8213)) b!61950))

(assert (= (and b!61950 c!8215) b!61951))

(assert (= (and b!61950 (not c!8215)) b!61949))

(assert (= (and b!61949 c!8214) b!61952))

(assert (= (and b!61949 (not c!8214)) b!61948))

(declare-fun m!55469 () Bool)

(assert (=> b!61948 m!55469))

(assert (=> b!61948 m!55469))

(assert (=> b!61948 m!52989))

(declare-fun m!55471 () Bool)

(assert (=> b!61948 m!55471))

(declare-fun m!55473 () Bool)

(assert (=> d!12537 m!55473))

(declare-fun m!55475 () Bool)

(assert (=> d!12537 m!55475))

(assert (=> d!12537 m!53469))

(assert (=> d!12537 m!53287))

(assert (=> b!60957 d!12537))

(declare-fun b!61953 () Bool)

(declare-fun e!40675 () Bool)

(declare-fun e!40676 () Bool)

(assert (=> b!61953 (= e!40675 e!40676)))

(declare-fun c!8216 () Bool)

(assert (=> b!61953 (= c!8216 (validKeyInArray!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun b!61954 () Bool)

(declare-fun call!4789 () Bool)

(assert (=> b!61954 (= e!40676 call!4789)))

(declare-fun bm!4786 () Bool)

(assert (=> bm!4786 (= call!4789 (arrayNoDuplicates!0 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!8216 (Cons!1423 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (ite c!7969 (Cons!1423 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7847 (Cons!1423 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) Nil!1424) Nil!1424)) (ite c!7847 (Cons!1423 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) Nil!1424) Nil!1424))) (ite c!7969 (Cons!1423 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7847 (Cons!1423 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) Nil!1424) Nil!1424)) (ite c!7847 (Cons!1423 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) Nil!1424) Nil!1424)))))))

(declare-fun b!61955 () Bool)

(declare-fun e!40674 () Bool)

(assert (=> b!61955 (= e!40674 e!40675)))

(declare-fun res!34074 () Bool)

(assert (=> b!61955 (=> (not res!34074) (not e!40675))))

(declare-fun e!40673 () Bool)

(assert (=> b!61955 (= res!34074 (not e!40673))))

(declare-fun res!34076 () Bool)

(assert (=> b!61955 (=> (not res!34076) (not e!40673))))

(assert (=> b!61955 (= res!34076 (validKeyInArray!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun d!12539 () Bool)

(declare-fun res!34075 () Bool)

(assert (=> d!12539 (=> res!34075 e!40674)))

(assert (=> d!12539 (= res!34075 (bvsge (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992))))))))

(assert (=> d!12539 (= (arrayNoDuplicates!0 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!7969 (Cons!1423 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7847 (Cons!1423 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) Nil!1424) Nil!1424)) (ite c!7847 (Cons!1423 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) Nil!1424) Nil!1424))) e!40674)))

(declare-fun b!61956 () Bool)

(assert (=> b!61956 (= e!40676 call!4789)))

(declare-fun b!61957 () Bool)

(assert (=> b!61957 (= e!40673 (contains!684 (ite c!7969 (Cons!1423 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!7847 (Cons!1423 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) Nil!1424) Nil!1424)) (ite c!7847 (Cons!1423 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) Nil!1424) Nil!1424)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(assert (= (and d!12539 (not res!34075)) b!61955))

(assert (= (and b!61955 res!34076) b!61957))

(assert (= (and b!61955 res!34074) b!61953))

(assert (= (and b!61953 c!8216) b!61954))

(assert (= (and b!61953 (not c!8216)) b!61956))

(assert (= (or b!61954 b!61956) bm!4786))

(declare-fun m!55477 () Bool)

(assert (=> b!61953 m!55477))

(assert (=> b!61953 m!55477))

(declare-fun m!55479 () Bool)

(assert (=> b!61953 m!55479))

(assert (=> bm!4786 m!55477))

(declare-fun m!55481 () Bool)

(assert (=> bm!4786 m!55481))

(assert (=> b!61955 m!55477))

(assert (=> b!61955 m!55477))

(assert (=> b!61955 m!55479))

(assert (=> b!61957 m!55477))

(assert (=> b!61957 m!55477))

(declare-fun m!55483 () Bool)

(assert (=> b!61957 m!55483))

(assert (=> bm!4677 d!12539))

(declare-fun d!12541 () Bool)

(declare-fun e!40677 () Bool)

(assert (=> d!12541 e!40677))

(declare-fun res!34078 () Bool)

(assert (=> d!12541 (=> (not res!34078) (not e!40677))))

(declare-fun lt!25760 () ListLongMap!1347)

(assert (=> d!12541 (= res!34078 (contains!682 lt!25760 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))))))

(declare-fun lt!25762 () List!1426)

(assert (=> d!12541 (= lt!25760 (ListLongMap!1348 lt!25762))))

(declare-fun lt!25761 () Unit!1613)

(declare-fun lt!25759 () Unit!1613)

(assert (=> d!12541 (= lt!25761 lt!25759)))

(assert (=> d!12541 (= (getValueByKey!126 lt!25762 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))) (Some!131 (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))))))

(assert (=> d!12541 (= lt!25759 (lemmaContainsTupThenGetReturnValue!43 lt!25762 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))))))

(assert (=> d!12541 (= lt!25762 (insertStrictlySorted!46 (toList!689 call!4676) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))))))

(assert (=> d!12541 (= (+!81 call!4676 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))) lt!25760)))

(declare-fun b!61958 () Bool)

(declare-fun res!34077 () Bool)

(assert (=> b!61958 (=> (not res!34077) (not e!40677))))

(assert (=> b!61958 (= res!34077 (= (getValueByKey!126 (toList!689 lt!25760) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))) (Some!131 (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))))))))

(declare-fun b!61959 () Bool)

(assert (=> b!61959 (= e!40677 (contains!685 (toList!689 lt!25760) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))))))

(assert (= (and d!12541 res!34078) b!61958))

(assert (= (and b!61958 res!34077) b!61959))

(declare-fun m!55485 () Bool)

(assert (=> d!12541 m!55485))

(declare-fun m!55487 () Bool)

(assert (=> d!12541 m!55487))

(declare-fun m!55489 () Bool)

(assert (=> d!12541 m!55489))

(declare-fun m!55491 () Bool)

(assert (=> d!12541 m!55491))

(declare-fun m!55493 () Bool)

(assert (=> b!61958 m!55493))

(declare-fun m!55495 () Bool)

(assert (=> b!61959 m!55495))

(assert (=> b!60981 d!12541))

(declare-fun d!12543 () Bool)

(declare-fun e!40679 () Bool)

(assert (=> d!12543 e!40679))

(declare-fun res!34079 () Bool)

(assert (=> d!12543 (=> res!34079 e!40679)))

(declare-fun lt!25765 () Bool)

(assert (=> d!12543 (= res!34079 (not lt!25765))))

(declare-fun lt!25766 () Bool)

(assert (=> d!12543 (= lt!25765 lt!25766)))

(declare-fun lt!25763 () Unit!1613)

(declare-fun e!40678 () Unit!1613)

(assert (=> d!12543 (= lt!25763 e!40678)))

(declare-fun c!8217 () Bool)

(assert (=> d!12543 (= c!8217 lt!25766)))

(assert (=> d!12543 (= lt!25766 (containsKey!129 (toList!689 lt!25210) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12543 (= (contains!682 lt!25210 #b1000000000000000000000000000000000000000000000000000000000000000) lt!25765)))

(declare-fun b!61960 () Bool)

(declare-fun lt!25764 () Unit!1613)

(assert (=> b!61960 (= e!40678 lt!25764)))

(assert (=> b!61960 (= lt!25764 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 lt!25210) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!61960 (isDefined!78 (getValueByKey!126 (toList!689 lt!25210) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!61961 () Bool)

(declare-fun Unit!1674 () Unit!1613)

(assert (=> b!61961 (= e!40678 Unit!1674)))

(declare-fun b!61962 () Bool)

(assert (=> b!61962 (= e!40679 (isDefined!78 (getValueByKey!126 (toList!689 lt!25210) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12543 c!8217) b!61960))

(assert (= (and d!12543 (not c!8217)) b!61961))

(assert (= (and d!12543 (not res!34079)) b!61962))

(declare-fun m!55497 () Bool)

(assert (=> d!12543 m!55497))

(declare-fun m!55499 () Bool)

(assert (=> b!61960 m!55499))

(assert (=> b!61960 m!55457))

(assert (=> b!61960 m!55457))

(declare-fun m!55501 () Bool)

(assert (=> b!61960 m!55501))

(assert (=> b!61962 m!55457))

(assert (=> b!61962 m!55457))

(assert (=> b!61962 m!55501))

(assert (=> bm!4687 d!12543))

(declare-fun d!12545 () Bool)

(declare-fun e!40681 () Bool)

(assert (=> d!12545 e!40681))

(declare-fun res!34080 () Bool)

(assert (=> d!12545 (=> res!34080 e!40681)))

(declare-fun lt!25769 () Bool)

(assert (=> d!12545 (= res!34080 (not lt!25769))))

(declare-fun lt!25770 () Bool)

(assert (=> d!12545 (= lt!25769 lt!25770)))

(declare-fun lt!25767 () Unit!1613)

(declare-fun e!40680 () Unit!1613)

(assert (=> d!12545 (= lt!25767 e!40680)))

(declare-fun c!8218 () Bool)

(assert (=> d!12545 (= c!8218 lt!25770)))

(assert (=> d!12545 (= lt!25770 (containsKey!129 (toList!689 lt!25133) (_1!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(assert (=> d!12545 (= (contains!682 lt!25133 (_1!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!25769)))

(declare-fun b!61963 () Bool)

(declare-fun lt!25768 () Unit!1613)

(assert (=> b!61963 (= e!40680 lt!25768)))

(assert (=> b!61963 (= lt!25768 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 lt!25133) (_1!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(assert (=> b!61963 (isDefined!78 (getValueByKey!126 (toList!689 lt!25133) (_1!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun b!61964 () Bool)

(declare-fun Unit!1675 () Unit!1613)

(assert (=> b!61964 (= e!40680 Unit!1675)))

(declare-fun b!61965 () Bool)

(assert (=> b!61965 (= e!40681 (isDefined!78 (getValueByKey!126 (toList!689 lt!25133) (_1!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(assert (= (and d!12545 c!8218) b!61963))

(assert (= (and d!12545 (not c!8218)) b!61964))

(assert (= (and d!12545 (not res!34080)) b!61965))

(declare-fun m!55503 () Bool)

(assert (=> d!12545 m!55503))

(declare-fun m!55505 () Bool)

(assert (=> b!61963 m!55505))

(assert (=> b!61963 m!53599))

(assert (=> b!61963 m!53599))

(declare-fun m!55507 () Bool)

(assert (=> b!61963 m!55507))

(assert (=> b!61965 m!53599))

(assert (=> b!61965 m!53599))

(assert (=> b!61965 m!55507))

(assert (=> d!11967 d!12545))

(declare-fun b!61969 () Bool)

(declare-fun e!40683 () Option!132)

(assert (=> b!61969 (= e!40683 None!130)))

(declare-fun b!61967 () Bool)

(declare-fun e!40682 () Option!132)

(assert (=> b!61967 (= e!40682 e!40683)))

(declare-fun c!8220 () Bool)

(assert (=> b!61967 (= c!8220 (and ((_ is Cons!1422) lt!25135) (not (= (_1!1022 (h!2004 lt!25135)) (_1!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))))))

(declare-fun b!61966 () Bool)

(assert (=> b!61966 (= e!40682 (Some!131 (_2!1022 (h!2004 lt!25135))))))

(declare-fun b!61968 () Bool)

(assert (=> b!61968 (= e!40683 (getValueByKey!126 (t!4792 lt!25135) (_1!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun c!8219 () Bool)

(declare-fun d!12547 () Bool)

(assert (=> d!12547 (= c!8219 (and ((_ is Cons!1422) lt!25135) (= (_1!1022 (h!2004 lt!25135)) (_1!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(assert (=> d!12547 (= (getValueByKey!126 lt!25135 (_1!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))) e!40682)))

(assert (= (and d!12547 c!8219) b!61966))

(assert (= (and d!12547 (not c!8219)) b!61967))

(assert (= (and b!61967 c!8220) b!61968))

(assert (= (and b!61967 (not c!8220)) b!61969))

(declare-fun m!55509 () Bool)

(assert (=> b!61968 m!55509))

(assert (=> d!11967 d!12547))

(declare-fun d!12549 () Bool)

(assert (=> d!12549 (= (getValueByKey!126 lt!25135 (_1!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))) (Some!131 (_2!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun lt!25771 () Unit!1613)

(assert (=> d!12549 (= lt!25771 (choose!332 lt!25135 (_1!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun e!40684 () Bool)

(assert (=> d!12549 e!40684))

(declare-fun res!34081 () Bool)

(assert (=> d!12549 (=> (not res!34081) (not e!40684))))

(assert (=> d!12549 (= res!34081 (isStrictlySorted!272 lt!25135))))

(assert (=> d!12549 (= (lemmaContainsTupThenGetReturnValue!43 lt!25135 (_1!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!25771)))

(declare-fun b!61970 () Bool)

(declare-fun res!34082 () Bool)

(assert (=> b!61970 (=> (not res!34082) (not e!40684))))

(assert (=> b!61970 (= res!34082 (containsKey!129 lt!25135 (_1!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun b!61971 () Bool)

(assert (=> b!61971 (= e!40684 (contains!685 lt!25135 (tuple2!2023 (_1!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(assert (= (and d!12549 res!34081) b!61970))

(assert (= (and b!61970 res!34082) b!61971))

(assert (=> d!12549 m!53593))

(declare-fun m!55511 () Bool)

(assert (=> d!12549 m!55511))

(declare-fun m!55513 () Bool)

(assert (=> d!12549 m!55513))

(declare-fun m!55515 () Bool)

(assert (=> b!61970 m!55515))

(declare-fun m!55517 () Bool)

(assert (=> b!61971 m!55517))

(assert (=> d!11967 d!12549))

(declare-fun bm!4787 () Bool)

(declare-fun call!4792 () List!1426)

(declare-fun call!4790 () List!1426)

(assert (=> bm!4787 (= call!4792 call!4790)))

(declare-fun b!61972 () Bool)

(declare-fun e!40687 () List!1426)

(declare-fun call!4791 () List!1426)

(assert (=> b!61972 (= e!40687 call!4791)))

(declare-fun e!40685 () List!1426)

(declare-fun c!8221 () Bool)

(declare-fun bm!4788 () Bool)

(assert (=> bm!4788 (= call!4790 ($colon$colon!60 e!40685 (ite c!8221 (h!2004 (toList!689 lt!24911)) (tuple2!2023 (_1!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))))))

(declare-fun c!8223 () Bool)

(assert (=> bm!4788 (= c!8223 c!8221)))

(declare-fun b!61973 () Bool)

(assert (=> b!61973 (= e!40685 (insertStrictlySorted!46 (t!4792 (toList!689 lt!24911)) (_1!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun b!61974 () Bool)

(declare-fun e!40686 () Bool)

(declare-fun lt!25772 () List!1426)

(assert (=> b!61974 (= e!40686 (contains!685 lt!25772 (tuple2!2023 (_1!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(declare-fun bm!4789 () Bool)

(assert (=> bm!4789 (= call!4791 call!4792)))

(declare-fun b!61975 () Bool)

(declare-fun res!34084 () Bool)

(assert (=> b!61975 (=> (not res!34084) (not e!40686))))

(assert (=> b!61975 (= res!34084 (containsKey!129 lt!25772 (_1!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun b!61976 () Bool)

(declare-fun e!40688 () List!1426)

(declare-fun e!40689 () List!1426)

(assert (=> b!61976 (= e!40688 e!40689)))

(declare-fun c!8222 () Bool)

(assert (=> b!61976 (= c!8222 (and ((_ is Cons!1422) (toList!689 lt!24911)) (= (_1!1022 (h!2004 (toList!689 lt!24911))) (_1!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(declare-fun b!61977 () Bool)

(declare-fun c!8224 () Bool)

(assert (=> b!61977 (= c!8224 (and ((_ is Cons!1422) (toList!689 lt!24911)) (bvsgt (_1!1022 (h!2004 (toList!689 lt!24911))) (_1!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(assert (=> b!61977 (= e!40689 e!40687)))

(declare-fun d!12551 () Bool)

(assert (=> d!12551 e!40686))

(declare-fun res!34083 () Bool)

(assert (=> d!12551 (=> (not res!34083) (not e!40686))))

(assert (=> d!12551 (= res!34083 (isStrictlySorted!272 lt!25772))))

(assert (=> d!12551 (= lt!25772 e!40688)))

(assert (=> d!12551 (= c!8221 (and ((_ is Cons!1422) (toList!689 lt!24911)) (bvslt (_1!1022 (h!2004 (toList!689 lt!24911))) (_1!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(assert (=> d!12551 (isStrictlySorted!272 (toList!689 lt!24911))))

(assert (=> d!12551 (= (insertStrictlySorted!46 (toList!689 lt!24911) (_1!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))) (_2!1022 (tuple2!2023 lt!24914 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!25772)))

(declare-fun b!61978 () Bool)

(assert (=> b!61978 (= e!40685 (ite c!8222 (t!4792 (toList!689 lt!24911)) (ite c!8224 (Cons!1422 (h!2004 (toList!689 lt!24911)) (t!4792 (toList!689 lt!24911))) Nil!1423)))))

(declare-fun b!61979 () Bool)

(assert (=> b!61979 (= e!40688 call!4790)))

(declare-fun b!61980 () Bool)

(assert (=> b!61980 (= e!40689 call!4792)))

(declare-fun b!61981 () Bool)

(assert (=> b!61981 (= e!40687 call!4791)))

(assert (= (and d!12551 c!8221) b!61979))

(assert (= (and d!12551 (not c!8221)) b!61976))

(assert (= (and b!61976 c!8222) b!61980))

(assert (= (and b!61976 (not c!8222)) b!61977))

(assert (= (and b!61977 c!8224) b!61981))

(assert (= (and b!61977 (not c!8224)) b!61972))

(assert (= (or b!61981 b!61972) bm!4789))

(assert (= (or b!61980 bm!4789) bm!4787))

(assert (= (or b!61979 bm!4787) bm!4788))

(assert (= (and bm!4788 c!8223) b!61973))

(assert (= (and bm!4788 (not c!8223)) b!61978))

(assert (= (and d!12551 res!34083) b!61975))

(assert (= (and b!61975 res!34084) b!61974))

(declare-fun m!55519 () Bool)

(assert (=> b!61974 m!55519))

(declare-fun m!55521 () Bool)

(assert (=> bm!4788 m!55521))

(declare-fun m!55523 () Bool)

(assert (=> b!61973 m!55523))

(declare-fun m!55525 () Bool)

(assert (=> d!12551 m!55525))

(declare-fun m!55527 () Bool)

(assert (=> d!12551 m!55527))

(declare-fun m!55529 () Bool)

(assert (=> b!61975 m!55529))

(assert (=> d!11967 d!12551))

(declare-fun d!12553 () Bool)

(assert (=> d!12553 (= (apply!67 lt!25111 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)) (get!1085 (getValueByKey!126 (toList!689 lt!25111) (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2704 () Bool)

(assert (= bs!2704 d!12553))

(assert (=> bs!2704 m!53277))

(assert (=> bs!2704 m!54659))

(assert (=> bs!2704 m!54659))

(declare-fun m!55531 () Bool)

(assert (=> bs!2704 m!55531))

(assert (=> b!60983 d!12553))

(assert (=> b!60983 d!12237))

(assert (=> b!61060 d!12103))

(declare-fun d!12555 () Bool)

(declare-fun e!40690 () Bool)

(assert (=> d!12555 e!40690))

(declare-fun res!34086 () Bool)

(assert (=> d!12555 (=> (not res!34086) (not e!40690))))

(declare-fun lt!25774 () ListLongMap!1347)

(assert (=> d!12555 (= res!34086 (contains!682 lt!25774 (_1!1022 (ite (or c!7931 c!7928) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))))))))

(declare-fun lt!25776 () List!1426)

(assert (=> d!12555 (= lt!25774 (ListLongMap!1348 lt!25776))))

(declare-fun lt!25775 () Unit!1613)

(declare-fun lt!25773 () Unit!1613)

(assert (=> d!12555 (= lt!25775 lt!25773)))

(assert (=> d!12555 (= (getValueByKey!126 lt!25776 (_1!1022 (ite (or c!7931 c!7928) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))))) (Some!131 (_2!1022 (ite (or c!7931 c!7928) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))))))))

(assert (=> d!12555 (= lt!25773 (lemmaContainsTupThenGetReturnValue!43 lt!25776 (_1!1022 (ite (or c!7931 c!7928) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))) (_2!1022 (ite (or c!7931 c!7928) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))))))))

(assert (=> d!12555 (= lt!25776 (insertStrictlySorted!46 (toList!689 (ite c!7931 call!4661 (ite c!7928 call!4664 call!4662))) (_1!1022 (ite (or c!7931 c!7928) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))) (_2!1022 (ite (or c!7931 c!7928) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))))))))

(assert (=> d!12555 (= (+!81 (ite c!7931 call!4661 (ite c!7928 call!4664 call!4662)) (ite (or c!7931 c!7928) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))) lt!25774)))

(declare-fun b!61982 () Bool)

(declare-fun res!34085 () Bool)

(assert (=> b!61982 (=> (not res!34085) (not e!40690))))

(assert (=> b!61982 (= res!34085 (= (getValueByKey!126 (toList!689 lt!25774) (_1!1022 (ite (or c!7931 c!7928) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))))) (Some!131 (_2!1022 (ite (or c!7931 c!7928) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))))))))

(declare-fun b!61983 () Bool)

(assert (=> b!61983 (= e!40690 (contains!685 (toList!689 lt!25774) (ite (or c!7931 c!7928) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))))))

(assert (= (and d!12555 res!34086) b!61982))

(assert (= (and b!61982 res!34085) b!61983))

(declare-fun m!55533 () Bool)

(assert (=> d!12555 m!55533))

(declare-fun m!55535 () Bool)

(assert (=> d!12555 m!55535))

(declare-fun m!55537 () Bool)

(assert (=> d!12555 m!55537))

(declare-fun m!55539 () Bool)

(assert (=> d!12555 m!55539))

(declare-fun m!55541 () Bool)

(assert (=> b!61982 m!55541))

(declare-fun m!55543 () Bool)

(assert (=> b!61983 m!55543))

(assert (=> bm!4658 d!12555))

(assert (=> b!61176 d!12247))

(assert (=> b!61176 d!12249))

(declare-fun d!12557 () Bool)

(assert (=> d!12557 (= (apply!67 lt!25111 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1085 (getValueByKey!126 (toList!689 lt!25111) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2705 () Bool)

(assert (= bs!2705 d!12557))

(assert (=> bs!2705 m!54667))

(assert (=> bs!2705 m!54667))

(declare-fun m!55545 () Bool)

(assert (=> bs!2705 m!55545))

(assert (=> b!60978 d!12557))

(declare-fun d!12559 () Bool)

(assert (=> d!12559 (= (apply!67 lt!25232 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)) (get!1085 (getValueByKey!126 (toList!689 lt!25232) (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2706 () Bool)

(assert (= bs!2706 d!12559))

(assert (=> bs!2706 m!53277))

(assert (=> bs!2706 m!54003))

(assert (=> bs!2706 m!54003))

(declare-fun m!55547 () Bool)

(assert (=> bs!2706 m!55547))

(assert (=> b!61155 d!12559))

(declare-fun d!12561 () Bool)

(declare-fun c!8225 () Bool)

(assert (=> d!12561 (= c!8225 ((_ is ValueCellFull!860) (select (arr!1785 (ite c!7887 (_values!2049 newMap!16) lt!24849)) #b00000000000000000000000000000000)))))

(declare-fun e!40691 () V!2857)

(assert (=> d!12561 (= (get!1081 (select (arr!1785 (ite c!7887 (_values!2049 newMap!16) lt!24849)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2066 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!40691)))

(declare-fun b!61984 () Bool)

(assert (=> b!61984 (= e!40691 (get!1083 (select (arr!1785 (ite c!7887 (_values!2049 newMap!16) lt!24849)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2066 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!61985 () Bool)

(assert (=> b!61985 (= e!40691 (get!1084 (select (arr!1785 (ite c!7887 (_values!2049 newMap!16) lt!24849)) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2066 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12561 c!8225) b!61984))

(assert (= (and d!12561 (not c!8225)) b!61985))

(assert (=> b!61984 m!53789))

(assert (=> b!61984 m!53389))

(declare-fun m!55549 () Bool)

(assert (=> b!61984 m!55549))

(assert (=> b!61985 m!53789))

(assert (=> b!61985 m!53389))

(declare-fun m!55551 () Bool)

(assert (=> b!61985 m!55551))

(assert (=> b!61155 d!12561))

(declare-fun d!12563 () Bool)

(declare-fun res!34087 () Bool)

(declare-fun e!40692 () Bool)

(assert (=> d!12563 (=> res!34087 e!40692)))

(assert (=> d!12563 (= res!34087 (= (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355)))))

(assert (=> d!12563 (= (arrayContainsKey!0 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) e!40692)))

(declare-fun b!61986 () Bool)

(declare-fun e!40693 () Bool)

(assert (=> b!61986 (= e!40692 e!40693)))

(declare-fun res!34088 () Bool)

(assert (=> b!61986 (=> (not res!34088) (not e!40693))))

(assert (=> b!61986 (= res!34088 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992))))))))

(declare-fun b!61987 () Bool)

(assert (=> b!61987 (= e!40693 (arrayContainsKey!0 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!12563 (not res!34087)) b!61986))

(assert (= (and b!61986 res!34088) b!61987))

(declare-fun m!55553 () Bool)

(assert (=> d!12563 m!55553))

(assert (=> b!61987 m!52989))

(declare-fun m!55555 () Bool)

(assert (=> b!61987 m!55555))

(assert (=> b!61115 d!12563))

(assert (=> d!11997 d!11941))

(declare-fun b!62004 () Bool)

(declare-fun res!34097 () Bool)

(declare-fun lt!25779 () SeekEntryResult!222)

(assert (=> b!62004 (= res!34097 (= (select (arr!1784 (_keys!3694 newMap!16)) (index!3012 lt!25779)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!40705 () Bool)

(assert (=> b!62004 (=> (not res!34097) (not e!40705))))

(declare-fun b!62005 () Bool)

(declare-fun res!34100 () Bool)

(declare-fun e!40703 () Bool)

(assert (=> b!62005 (=> (not res!34100) (not e!40703))))

(declare-fun call!4797 () Bool)

(assert (=> b!62005 (= res!34100 call!4797)))

(declare-fun e!40704 () Bool)

(assert (=> b!62005 (= e!40704 e!40703)))

(declare-fun b!62006 () Bool)

(declare-fun call!4798 () Bool)

(assert (=> b!62006 (= e!40705 (not call!4798))))

(declare-fun b!62007 () Bool)

(assert (=> b!62007 (= e!40703 (not call!4798))))

(declare-fun b!62008 () Bool)

(declare-fun e!40702 () Bool)

(assert (=> b!62008 (= e!40702 e!40705)))

(declare-fun res!34099 () Bool)

(assert (=> b!62008 (= res!34099 call!4797)))

(assert (=> b!62008 (=> (not res!34099) (not e!40705))))

(declare-fun b!62009 () Bool)

(assert (=> b!62009 (= e!40702 e!40704)))

(declare-fun c!8231 () Bool)

(assert (=> b!62009 (= c!8231 ((_ is MissingVacant!222) lt!25779))))

(declare-fun bm!4794 () Bool)

(assert (=> bm!4794 (= call!4798 (arrayContainsKey!0 (_keys!3694 newMap!16) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun bm!4795 () Bool)

(declare-fun c!8230 () Bool)

(assert (=> bm!4795 (= call!4797 (inRange!0 (ite c!8230 (index!3012 lt!25779) (index!3015 lt!25779)) (mask!5962 newMap!16)))))

(declare-fun d!12565 () Bool)

(assert (=> d!12565 e!40702))

(assert (=> d!12565 (= c!8230 ((_ is MissingZero!222) lt!25779))))

(assert (=> d!12565 (= lt!25779 (seekEntryOrOpen!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (_keys!3694 newMap!16) (mask!5962 newMap!16)))))

(assert (=> d!12565 true))

(declare-fun _$34!771 () Unit!1613)

(assert (=> d!12565 (= (choose!329 (_keys!3694 newMap!16) (_values!2049 newMap!16) (mask!5962 newMap!16) (extraKeys!1949 newMap!16) (zeroValue!1980 newMap!16) (minValue!1980 newMap!16) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) from!355) (defaultEntry!2066 newMap!16)) _$34!771)))

(declare-fun b!62010 () Bool)

(assert (=> b!62010 (= e!40704 ((_ is Undefined!222) lt!25779))))

(declare-fun b!62011 () Bool)

(declare-fun res!34098 () Bool)

(assert (=> b!62011 (=> (not res!34098) (not e!40703))))

(assert (=> b!62011 (= res!34098 (= (select (arr!1784 (_keys!3694 newMap!16)) (index!3015 lt!25779)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!12565 c!8230) b!62008))

(assert (= (and d!12565 (not c!8230)) b!62009))

(assert (= (and b!62008 res!34099) b!62004))

(assert (= (and b!62004 res!34097) b!62006))

(assert (= (and b!62009 c!8231) b!62005))

(assert (= (and b!62009 (not c!8231)) b!62010))

(assert (= (and b!62005 res!34100) b!62011))

(assert (= (and b!62011 res!34098) b!62007))

(assert (= (or b!62008 b!62005) bm!4795))

(assert (= (or b!62006 b!62007) bm!4794))

(assert (=> d!12565 m!52989))

(assert (=> d!12565 m!53147))

(declare-fun m!55557 () Bool)

(assert (=> bm!4795 m!55557))

(declare-fun m!55559 () Bool)

(assert (=> b!62004 m!55559))

(assert (=> bm!4794 m!52989))

(assert (=> bm!4794 m!53149))

(declare-fun m!55561 () Bool)

(assert (=> b!62011 m!55561))

(assert (=> d!11997 d!12565))

(assert (=> d!11997 d!12047))

(assert (=> b!60826 d!12103))

(declare-fun d!12567 () Bool)

(assert (=> d!12567 (= (apply!67 lt!25160 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1085 (getValueByKey!126 (toList!689 lt!25160) (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!2707 () Bool)

(assert (= bs!2707 d!12567))

(assert (=> bs!2707 m!53115))

(assert (=> bs!2707 m!54675))

(assert (=> bs!2707 m!54675))

(declare-fun m!55563 () Bool)

(assert (=> bs!2707 m!55563))

(assert (=> b!61041 d!12567))

(assert (=> b!61041 d!12031))

(declare-fun b!62012 () Bool)

(declare-fun e!40707 () (_ BitVec 32))

(declare-fun call!4799 () (_ BitVec 32))

(assert (=> b!62012 (= e!40707 call!4799)))

(declare-fun d!12569 () Bool)

(declare-fun lt!25780 () (_ BitVec 32))

(assert (=> d!12569 (and (bvsge lt!25780 #b00000000000000000000000000000000) (bvsle lt!25780 (bvsub (size!2015 (_keys!3694 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun e!40706 () (_ BitVec 32))

(assert (=> d!12569 (= lt!25780 e!40706)))

(declare-fun c!8233 () Bool)

(assert (=> d!12569 (= c!8233 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2015 (_keys!3694 newMap!16))))))

(assert (=> d!12569 (and (bvsle (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2015 (_keys!3694 newMap!16))) (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvsle (size!2015 (_keys!3694 newMap!16)) (size!2015 (_keys!3694 newMap!16))))))

(assert (=> d!12569 (= (arrayCountValidKeys!0 (_keys!3694 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2015 (_keys!3694 newMap!16))) lt!25780)))

(declare-fun bm!4796 () Bool)

(assert (=> bm!4796 (= call!4799 (arrayCountValidKeys!0 (_keys!3694 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2015 (_keys!3694 newMap!16))))))

(declare-fun b!62013 () Bool)

(assert (=> b!62013 (= e!40706 e!40707)))

(declare-fun c!8232 () Bool)

(assert (=> b!62013 (= c!8232 (validKeyInArray!0 (select (arr!1784 (_keys!3694 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!62014 () Bool)

(assert (=> b!62014 (= e!40707 (bvadd #b00000000000000000000000000000001 call!4799))))

(declare-fun b!62015 () Bool)

(assert (=> b!62015 (= e!40706 #b00000000000000000000000000000000)))

(assert (= (and d!12569 c!8233) b!62015))

(assert (= (and d!12569 (not c!8233)) b!62013))

(assert (= (and b!62013 c!8232) b!62014))

(assert (= (and b!62013 (not c!8232)) b!62012))

(assert (= (or b!62014 b!62012) bm!4796))

(declare-fun m!55565 () Bool)

(assert (=> bm!4796 m!55565))

(assert (=> b!62013 m!54179))

(assert (=> b!62013 m!54179))

(assert (=> b!62013 m!54213))

(assert (=> bm!4666 d!12569))

(assert (=> bm!4656 d!12027))

(declare-fun d!12571 () Bool)

(declare-fun e!40708 () Bool)

(assert (=> d!12571 e!40708))

(declare-fun res!34102 () Bool)

(assert (=> d!12571 (=> (not res!34102) (not e!40708))))

(declare-fun lt!25782 () ListLongMap!1347)

(assert (=> d!12571 (= res!34102 (contains!682 lt!25782 (_1!1022 (ite (or c!7993 c!7990) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)))))))))

(declare-fun lt!25784 () List!1426)

(assert (=> d!12571 (= lt!25782 (ListLongMap!1348 lt!25784))))

(declare-fun lt!25783 () Unit!1613)

(declare-fun lt!25781 () Unit!1613)

(assert (=> d!12571 (= lt!25783 lt!25781)))

(assert (=> d!12571 (= (getValueByKey!126 lt!25784 (_1!1022 (ite (or c!7993 c!7990) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)))))) (Some!131 (_2!1022 (ite (or c!7993 c!7990) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)))))))))

(assert (=> d!12571 (= lt!25781 (lemmaContainsTupThenGetReturnValue!43 lt!25784 (_1!1022 (ite (or c!7993 c!7990) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16))))) (_2!1022 (ite (or c!7993 c!7990) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)))))))))

(assert (=> d!12571 (= lt!25784 (insertStrictlySorted!46 (toList!689 (ite c!7993 call!4698 (ite c!7990 call!4701 call!4699))) (_1!1022 (ite (or c!7993 c!7990) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16))))) (_2!1022 (ite (or c!7993 c!7990) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)))))))))

(assert (=> d!12571 (= (+!81 (ite c!7993 call!4698 (ite c!7990 call!4701 call!4699)) (ite (or c!7993 c!7990) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16))))) lt!25782)))

(declare-fun b!62016 () Bool)

(declare-fun res!34101 () Bool)

(assert (=> b!62016 (=> (not res!34101) (not e!40708))))

(assert (=> b!62016 (= res!34101 (= (getValueByKey!126 (toList!689 lt!25782) (_1!1022 (ite (or c!7993 c!7990) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)))))) (Some!131 (_2!1022 (ite (or c!7993 c!7990) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16))))))))))

(declare-fun b!62017 () Bool)

(assert (=> b!62017 (= e!40708 (contains!685 (toList!689 lt!25782) (ite (or c!7993 c!7990) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 newMap!16)) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16))))))))

(assert (= (and d!12571 res!34102) b!62016))

(assert (= (and b!62016 res!34101) b!62017))

(declare-fun m!55567 () Bool)

(assert (=> d!12571 m!55567))

(declare-fun m!55569 () Bool)

(assert (=> d!12571 m!55569))

(declare-fun m!55571 () Bool)

(assert (=> d!12571 m!55571))

(declare-fun m!55573 () Bool)

(assert (=> d!12571 m!55573))

(declare-fun m!55575 () Bool)

(assert (=> b!62016 m!55575))

(declare-fun m!55577 () Bool)

(assert (=> b!62017 m!55577))

(assert (=> bm!4695 d!12571))

(declare-fun d!12573 () Bool)

(assert (=> d!12573 (= (inRange!0 (index!3013 lt!24939) (mask!5962 newMap!16)) (and (bvsge (index!3013 lt!24939) #b00000000000000000000000000000000) (bvslt (index!3013 lt!24939) (bvadd (mask!5962 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> b!60833 d!12573))

(declare-fun d!12575 () Bool)

(assert (=> d!12575 (= (apply!67 lt!25059 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)) (get!1085 (getValueByKey!126 (toList!689 lt!25059) (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!2708 () Bool)

(assert (= bs!2708 d!12575))

(assert (=> bs!2708 m!53277))

(assert (=> bs!2708 m!53899))

(assert (=> bs!2708 m!53899))

(declare-fun m!55579 () Bool)

(assert (=> bs!2708 m!55579))

(assert (=> b!60918 d!12575))

(declare-fun d!12577 () Bool)

(declare-fun c!8234 () Bool)

(assert (=> d!12577 (= c!8234 ((_ is ValueCellFull!860) (select (arr!1785 (ite c!7884 (_values!2049 newMap!16) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (index!3013 lt!24842) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16))))) #b00000000000000000000000000000000)))))

(declare-fun e!40709 () V!2857)

(assert (=> d!12577 (= (get!1081 (select (arr!1785 (ite c!7884 (_values!2049 newMap!16) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (index!3013 lt!24842) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2066 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!40709)))

(declare-fun b!62018 () Bool)

(assert (=> b!62018 (= e!40709 (get!1083 (select (arr!1785 (ite c!7884 (_values!2049 newMap!16) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (index!3013 lt!24842) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2066 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!62019 () Bool)

(assert (=> b!62019 (= e!40709 (get!1084 (select (arr!1785 (ite c!7884 (_values!2049 newMap!16) (array!3732 (store (arr!1785 (_values!2049 newMap!16)) (index!3013 lt!24842) (ValueCellFull!860 (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2016 (_values!2049 newMap!16))))) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2066 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12577 c!8234) b!62018))

(assert (= (and d!12577 (not c!8234)) b!62019))

(assert (=> b!62018 m!53387))

(assert (=> b!62018 m!53389))

(declare-fun m!55581 () Bool)

(assert (=> b!62018 m!55581))

(assert (=> b!62019 m!53387))

(assert (=> b!62019 m!53389))

(declare-fun m!55583 () Bool)

(assert (=> b!62019 m!55583))

(assert (=> b!60918 d!12577))

(declare-fun d!12579 () Bool)

(declare-fun e!40711 () Bool)

(assert (=> d!12579 e!40711))

(declare-fun res!34103 () Bool)

(assert (=> d!12579 (=> res!34103 e!40711)))

(declare-fun lt!25787 () Bool)

(assert (=> d!12579 (= res!34103 (not lt!25787))))

(declare-fun lt!25788 () Bool)

(assert (=> d!12579 (= lt!25787 lt!25788)))

(declare-fun lt!25785 () Unit!1613)

(declare-fun e!40710 () Unit!1613)

(assert (=> d!12579 (= lt!25785 e!40710)))

(declare-fun c!8235 () Bool)

(assert (=> d!12579 (= c!8235 lt!25788)))

(assert (=> d!12579 (= lt!25788 (containsKey!129 (toList!689 lt!25210) (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!12579 (= (contains!682 lt!25210 (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)) lt!25787)))

(declare-fun b!62020 () Bool)

(declare-fun lt!25786 () Unit!1613)

(assert (=> b!62020 (= e!40710 lt!25786)))

(assert (=> b!62020 (= lt!25786 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 lt!25210) (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!62020 (isDefined!78 (getValueByKey!126 (toList!689 lt!25210) (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!62021 () Bool)

(declare-fun Unit!1676 () Unit!1613)

(assert (=> b!62021 (= e!40710 Unit!1676)))

(declare-fun b!62022 () Bool)

(assert (=> b!62022 (= e!40711 (isDefined!78 (getValueByKey!126 (toList!689 lt!25210) (select (arr!1784 (_keys!3694 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!12579 c!8235) b!62020))

(assert (= (and d!12579 (not c!8235)) b!62021))

(assert (= (and d!12579 (not res!34103)) b!62022))

(assert (=> d!12579 m!53277))

(declare-fun m!55585 () Bool)

(assert (=> d!12579 m!55585))

(assert (=> b!62020 m!53277))

(declare-fun m!55587 () Bool)

(assert (=> b!62020 m!55587))

(assert (=> b!62020 m!53277))

(assert (=> b!62020 m!54397))

(assert (=> b!62020 m!54397))

(declare-fun m!55589 () Bool)

(assert (=> b!62020 m!55589))

(assert (=> b!62022 m!53277))

(assert (=> b!62022 m!54397))

(assert (=> b!62022 m!54397))

(assert (=> b!62022 m!55589))

(assert (=> b!61125 d!12579))

(declare-fun d!12581 () Bool)

(assert (=> d!12581 (= (get!1085 (getValueByKey!126 (toList!689 (+!81 lt!24918 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!24906)) (v!2409 (getValueByKey!126 (toList!689 (+!81 lt!24918 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!24906)))))

(assert (=> d!11979 d!12581))

(declare-fun b!62026 () Bool)

(declare-fun e!40713 () Option!132)

(assert (=> b!62026 (= e!40713 None!130)))

(declare-fun b!62024 () Bool)

(declare-fun e!40712 () Option!132)

(assert (=> b!62024 (= e!40712 e!40713)))

(declare-fun c!8237 () Bool)

(assert (=> b!62024 (= c!8237 (and ((_ is Cons!1422) (toList!689 (+!81 lt!24918 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))) (not (= (_1!1022 (h!2004 (toList!689 (+!81 lt!24918 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))) lt!24906))))))

(declare-fun b!62023 () Bool)

(assert (=> b!62023 (= e!40712 (Some!131 (_2!1022 (h!2004 (toList!689 (+!81 lt!24918 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))))))))

(declare-fun b!62025 () Bool)

(assert (=> b!62025 (= e!40713 (getValueByKey!126 (t!4792 (toList!689 (+!81 lt!24918 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))) lt!24906))))

(declare-fun d!12583 () Bool)

(declare-fun c!8236 () Bool)

(assert (=> d!12583 (= c!8236 (and ((_ is Cons!1422) (toList!689 (+!81 lt!24918 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))))) (= (_1!1022 (h!2004 (toList!689 (+!81 lt!24918 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))))) lt!24906)))))

(assert (=> d!12583 (= (getValueByKey!126 (toList!689 (+!81 lt!24918 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992)))))) lt!24906) e!40712)))

(assert (= (and d!12583 c!8236) b!62023))

(assert (= (and d!12583 (not c!8236)) b!62024))

(assert (= (and b!62024 c!8237) b!62025))

(assert (= (and b!62024 (not c!8237)) b!62026))

(declare-fun m!55591 () Bool)

(assert (=> b!62025 m!55591))

(assert (=> d!11979 d!12583))

(assert (=> b!60837 d!12075))

(assert (=> b!60837 d!12077))

(declare-fun d!12585 () Bool)

(assert (=> d!12585 (= (apply!67 (+!81 lt!24918 (tuple2!2023 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))))) lt!24906) (apply!67 lt!24918 lt!24906))))

(assert (=> d!12585 true))

(declare-fun _$34!772 () Unit!1613)

(assert (=> d!12585 (= (choose!326 lt!24918 lt!24905 (zeroValue!1980 (v!2403 (underlying!230 thiss!992))) lt!24906) _$34!772)))

(declare-fun bs!2709 () Bool)

(assert (= bs!2709 d!12585))

(assert (=> bs!2709 m!53251))

(assert (=> bs!2709 m!53251))

(assert (=> bs!2709 m!53253))

(assert (=> bs!2709 m!53247))

(assert (=> d!11961 d!12585))

(assert (=> d!11961 d!11973))

(assert (=> d!11961 d!11979))

(assert (=> d!11961 d!11963))

(declare-fun d!12587 () Bool)

(declare-fun e!40715 () Bool)

(assert (=> d!12587 e!40715))

(declare-fun res!34104 () Bool)

(assert (=> d!12587 (=> res!34104 e!40715)))

(declare-fun lt!25791 () Bool)

(assert (=> d!12587 (= res!34104 (not lt!25791))))

(declare-fun lt!25792 () Bool)

(assert (=> d!12587 (= lt!25791 lt!25792)))

(declare-fun lt!25789 () Unit!1613)

(declare-fun e!40714 () Unit!1613)

(assert (=> d!12587 (= lt!25789 e!40714)))

(declare-fun c!8238 () Bool)

(assert (=> d!12587 (= c!8238 lt!25792)))

(assert (=> d!12587 (= lt!25792 (containsKey!129 (toList!689 lt!24918) lt!24906))))

(assert (=> d!12587 (= (contains!682 lt!24918 lt!24906) lt!25791)))

(declare-fun b!62027 () Bool)

(declare-fun lt!25790 () Unit!1613)

(assert (=> b!62027 (= e!40714 lt!25790)))

(assert (=> b!62027 (= lt!25790 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 lt!24918) lt!24906))))

(assert (=> b!62027 (isDefined!78 (getValueByKey!126 (toList!689 lt!24918) lt!24906))))

(declare-fun b!62028 () Bool)

(declare-fun Unit!1677 () Unit!1613)

(assert (=> b!62028 (= e!40714 Unit!1677)))

(declare-fun b!62029 () Bool)

(assert (=> b!62029 (= e!40715 (isDefined!78 (getValueByKey!126 (toList!689 lt!24918) lt!24906)))))

(assert (= (and d!12587 c!8238) b!62027))

(assert (= (and d!12587 (not c!8238)) b!62028))

(assert (= (and d!12587 (not res!34104)) b!62029))

(declare-fun m!55593 () Bool)

(assert (=> d!12587 m!55593))

(declare-fun m!55595 () Bool)

(assert (=> b!62027 m!55595))

(assert (=> b!62027 m!53611))

(assert (=> b!62027 m!53611))

(declare-fun m!55597 () Bool)

(assert (=> b!62027 m!55597))

(assert (=> b!62029 m!53611))

(assert (=> b!62029 m!53611))

(assert (=> b!62029 m!55597))

(assert (=> d!11961 d!12587))

(declare-fun d!12589 () Bool)

(declare-fun e!40716 () Bool)

(assert (=> d!12589 e!40716))

(declare-fun res!34106 () Bool)

(assert (=> d!12589 (=> (not res!34106) (not e!40716))))

(declare-fun lt!25794 () ListLongMap!1347)

(assert (=> d!12589 (= res!34106 (contains!682 lt!25794 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16))))))))

(declare-fun lt!25796 () List!1426)

(assert (=> d!12589 (= lt!25794 (ListLongMap!1348 lt!25796))))

(declare-fun lt!25795 () Unit!1613)

(declare-fun lt!25793 () Unit!1613)

(assert (=> d!12589 (= lt!25795 lt!25793)))

(assert (=> d!12589 (= (getValueByKey!126 lt!25796 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16))))) (Some!131 (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16))))))))

(assert (=> d!12589 (= lt!25793 (lemmaContainsTupThenGetReturnValue!43 lt!25796 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16))))))))

(assert (=> d!12589 (= lt!25796 (insertStrictlySorted!46 (toList!689 call!4703) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16))))))))

(assert (=> d!12589 (= (+!81 call!4703 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)))) lt!25794)))

(declare-fun b!62030 () Bool)

(declare-fun res!34105 () Bool)

(assert (=> b!62030 (=> (not res!34105) (not e!40716))))

(assert (=> b!62030 (= res!34105 (= (getValueByKey!126 (toList!689 lt!25794) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16))))) (Some!131 (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)))))))))

(declare-fun b!62031 () Bool)

(assert (=> b!62031 (= e!40716 (contains!685 (toList!689 lt!25794) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!7887 (ite c!7877 (minValue!1980 newMap!16) (get!1081 (select (arr!1785 (_values!2049 (v!2403 (underlying!230 thiss!992)))) from!355) (dynLambda!306 (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!1980 newMap!16)))))))

(assert (= (and d!12589 res!34106) b!62030))

(assert (= (and b!62030 res!34105) b!62031))

(declare-fun m!55599 () Bool)

(assert (=> d!12589 m!55599))

(declare-fun m!55601 () Bool)

(assert (=> d!12589 m!55601))

(declare-fun m!55603 () Bool)

(assert (=> d!12589 m!55603))

(declare-fun m!55605 () Bool)

(assert (=> d!12589 m!55605))

(declare-fun m!55607 () Bool)

(assert (=> b!62030 m!55607))

(declare-fun m!55609 () Bool)

(assert (=> b!62031 m!55609))

(assert (=> b!61153 d!12589))

(declare-fun d!12591 () Bool)

(assert (=> d!12591 (= (apply!67 lt!25059 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1085 (getValueByKey!126 (toList!689 lt!25059) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!2710 () Bool)

(assert (= bs!2710 d!12591))

(assert (=> bs!2710 m!53935))

(assert (=> bs!2710 m!53935))

(declare-fun m!55611 () Bool)

(assert (=> bs!2710 m!55611))

(assert (=> b!60913 d!12591))

(assert (=> b!60994 d!12315))

(assert (=> b!60994 d!12317))

(declare-fun b!62032 () Bool)

(declare-fun e!40719 () Bool)

(declare-fun e!40720 () Bool)

(assert (=> b!62032 (= e!40719 e!40720)))

(declare-fun c!8239 () Bool)

(assert (=> b!62032 (= c!8239 (validKeyInArray!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!62033 () Bool)

(declare-fun call!4800 () Bool)

(assert (=> b!62033 (= e!40720 call!4800)))

(declare-fun bm!4797 () Bool)

(assert (=> bm!4797 (= call!4800 (arrayNoDuplicates!0 (_keys!3694 (v!2403 (underlying!230 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!8239 (Cons!1423 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) #b00000000000000000000000000000000) Nil!1424) Nil!1424)))))

(declare-fun b!62034 () Bool)

(declare-fun e!40718 () Bool)

(assert (=> b!62034 (= e!40718 e!40719)))

(declare-fun res!34107 () Bool)

(assert (=> b!62034 (=> (not res!34107) (not e!40719))))

(declare-fun e!40717 () Bool)

(assert (=> b!62034 (= res!34107 (not e!40717))))

(declare-fun res!34109 () Bool)

(assert (=> b!62034 (=> (not res!34109) (not e!40717))))

(assert (=> b!62034 (= res!34109 (validKeyInArray!0 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun d!12593 () Bool)

(declare-fun res!34108 () Bool)

(assert (=> d!12593 (=> res!34108 e!40718)))

(assert (=> d!12593 (= res!34108 (bvsge #b00000000000000000000000000000000 (size!2015 (_keys!3694 (v!2403 (underlying!230 thiss!992))))))))

(assert (=> d!12593 (= (arrayNoDuplicates!0 (_keys!3694 (v!2403 (underlying!230 thiss!992))) #b00000000000000000000000000000000 Nil!1424) e!40718)))

(declare-fun b!62035 () Bool)

(assert (=> b!62035 (= e!40720 call!4800)))

(declare-fun b!62036 () Bool)

(assert (=> b!62036 (= e!40717 (contains!684 Nil!1424 (select (arr!1784 (_keys!3694 (v!2403 (underlying!230 thiss!992)))) #b00000000000000000000000000000000)))))

(assert (= (and d!12593 (not res!34108)) b!62034))

(assert (= (and b!62034 res!34109) b!62036))

(assert (= (and b!62034 res!34107) b!62032))

(assert (= (and b!62032 c!8239) b!62033))

(assert (= (and b!62032 (not c!8239)) b!62035))

(assert (= (or b!62033 b!62035) bm!4797))

(assert (=> b!62032 m!54297))

(assert (=> b!62032 m!54297))

(assert (=> b!62032 m!54305))

(assert (=> bm!4797 m!54297))

(declare-fun m!55613 () Bool)

(assert (=> bm!4797 m!55613))

(assert (=> b!62034 m!54297))

(assert (=> b!62034 m!54297))

(assert (=> b!62034 m!54305))

(assert (=> b!62036 m!54297))

(assert (=> b!62036 m!54297))

(declare-fun m!55615 () Bool)

(assert (=> b!62036 m!55615))

(assert (=> b!60991 d!12593))

(declare-fun d!12595 () Bool)

(declare-fun e!40721 () Bool)

(assert (=> d!12595 e!40721))

(declare-fun res!34111 () Bool)

(assert (=> d!12595 (=> (not res!34111) (not e!40721))))

(declare-fun lt!25798 () ListLongMap!1347)

(assert (=> d!12595 (= res!34111 (contains!682 lt!25798 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))))))

(declare-fun lt!25800 () List!1426)

(assert (=> d!12595 (= lt!25798 (ListLongMap!1348 lt!25800))))

(declare-fun lt!25799 () Unit!1613)

(declare-fun lt!25797 () Unit!1613)

(assert (=> d!12595 (= lt!25799 lt!25797)))

(assert (=> d!12595 (= (getValueByKey!126 lt!25800 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))) (Some!131 (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))))))

(assert (=> d!12595 (= lt!25797 (lemmaContainsTupThenGetReturnValue!43 lt!25800 (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))))))

(assert (=> d!12595 (= lt!25800 (insertStrictlySorted!46 (toList!689 call!4666) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))) (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))))))

(assert (=> d!12595 (= (+!81 call!4666 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))) lt!25798)))

(declare-fun b!62037 () Bool)

(declare-fun res!34110 () Bool)

(assert (=> b!62037 (=> (not res!34110) (not e!40721))))

(assert (=> b!62037 (= res!34110 (= (getValueByKey!126 (toList!689 lt!25798) (_1!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16)))) (Some!131 (_2!1022 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))))))))

(declare-fun b!62038 () Bool)

(assert (=> b!62038 (= e!40721 (contains!685 (toList!689 lt!25798) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 newMap!16))))))

(assert (= (and d!12595 res!34111) b!62037))

(assert (= (and b!62037 res!34110) b!62038))

(declare-fun m!55617 () Bool)

(assert (=> d!12595 m!55617))

(declare-fun m!55619 () Bool)

(assert (=> d!12595 m!55619))

(declare-fun m!55621 () Bool)

(assert (=> d!12595 m!55621))

(declare-fun m!55623 () Bool)

(assert (=> d!12595 m!55623))

(declare-fun m!55625 () Bool)

(assert (=> b!62037 m!55625))

(declare-fun m!55627 () Bool)

(assert (=> b!62038 m!55627))

(assert (=> b!60916 d!12595))

(declare-fun b!62039 () Bool)

(declare-fun res!34114 () Bool)

(declare-fun e!40725 () Bool)

(assert (=> b!62039 (=> (not res!34114) (not e!40725))))

(declare-fun e!40724 () Bool)

(assert (=> b!62039 (= res!34114 e!40724)))

(declare-fun res!34118 () Bool)

(assert (=> b!62039 (=> res!34118 e!40724)))

(declare-fun e!40729 () Bool)

(assert (=> b!62039 (= res!34118 (not e!40729))))

(declare-fun res!34112 () Bool)

(assert (=> b!62039 (=> (not res!34112) (not e!40729))))

(assert (=> b!62039 (= res!34112 (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 (_2!1023 lt!24841)))))))

(declare-fun b!62040 () Bool)

(declare-fun e!40730 () Bool)

(declare-fun call!4806 () Bool)

(assert (=> b!62040 (= e!40730 (not call!4806))))

(declare-fun bm!4798 () Bool)

(declare-fun lt!25817 () ListLongMap!1347)

(assert (=> bm!4798 (= call!4806 (contains!682 lt!25817 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62041 () Bool)

(declare-fun e!40732 () Unit!1613)

(declare-fun Unit!1678 () Unit!1613)

(assert (=> b!62041 (= e!40732 Unit!1678)))

(declare-fun b!62042 () Bool)

(declare-fun e!40722 () Bool)

(assert (=> b!62042 (= e!40730 e!40722)))

(declare-fun res!34117 () Bool)

(assert (=> b!62042 (= res!34117 call!4806)))

(assert (=> b!62042 (=> (not res!34117) (not e!40722))))

(declare-fun b!62043 () Bool)

(declare-fun e!40728 () Bool)

(assert (=> b!62043 (= e!40728 (validKeyInArray!0 (select (arr!1784 (_keys!3694 (_2!1023 lt!24841))) #b00000000000000000000000000000000)))))

(declare-fun b!62044 () Bool)

(declare-fun e!40733 () ListLongMap!1347)

(declare-fun call!4803 () ListLongMap!1347)

(assert (=> b!62044 (= e!40733 call!4803)))

(declare-fun call!4802 () ListLongMap!1347)

(declare-fun c!8245 () Bool)

(declare-fun call!4805 () ListLongMap!1347)

(declare-fun call!4807 () ListLongMap!1347)

(declare-fun bm!4799 () Bool)

(declare-fun c!8242 () Bool)

(assert (=> bm!4799 (= call!4807 (+!81 (ite c!8245 call!4802 (ite c!8242 call!4805 call!4803)) (ite (or c!8245 c!8242) (tuple2!2023 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!1980 (_2!1023 lt!24841))) (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (_2!1023 lt!24841))))))))

(declare-fun b!62046 () Bool)

(declare-fun call!4804 () ListLongMap!1347)

(assert (=> b!62046 (= e!40733 call!4804)))

(declare-fun b!62047 () Bool)

(assert (=> b!62047 (= e!40722 (= (apply!67 lt!25817 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!1980 (_2!1023 lt!24841))))))

(declare-fun b!62048 () Bool)

(declare-fun e!40731 () Bool)

(assert (=> b!62048 (= e!40724 e!40731)))

(declare-fun res!34115 () Bool)

(assert (=> b!62048 (=> (not res!34115) (not e!40731))))

(assert (=> b!62048 (= res!34115 (contains!682 lt!25817 (select (arr!1784 (_keys!3694 (_2!1023 lt!24841))) #b00000000000000000000000000000000)))))

(assert (=> b!62048 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 (_2!1023 lt!24841)))))))

(declare-fun b!62049 () Bool)

(assert (=> b!62049 (= e!40725 e!40730)))

(declare-fun c!8243 () Bool)

(assert (=> b!62049 (= c!8243 (not (= (bvand (extraKeys!1949 (_2!1023 lt!24841)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun bm!4800 () Bool)

(assert (=> bm!4800 (= call!4804 call!4807)))

(declare-fun b!62050 () Bool)

(declare-fun e!40727 () ListLongMap!1347)

(assert (=> b!62050 (= e!40727 call!4804)))

(declare-fun bm!4801 () Bool)

(declare-fun call!4801 () Bool)

(assert (=> bm!4801 (= call!4801 (contains!682 lt!25817 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62051 () Bool)

(declare-fun e!40723 () ListLongMap!1347)

(assert (=> b!62051 (= e!40723 e!40727)))

(assert (=> b!62051 (= c!8242 (and (not (= (bvand (extraKeys!1949 (_2!1023 lt!24841)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1949 (_2!1023 lt!24841)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!62052 () Bool)

(declare-fun e!40726 () Bool)

(assert (=> b!62052 (= e!40726 (= (apply!67 lt!25817 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!1980 (_2!1023 lt!24841))))))

(declare-fun b!62053 () Bool)

(declare-fun e!40734 () Bool)

(assert (=> b!62053 (= e!40734 e!40726)))

(declare-fun res!34113 () Bool)

(assert (=> b!62053 (= res!34113 call!4801)))

(assert (=> b!62053 (=> (not res!34113) (not e!40726))))

(declare-fun bm!4802 () Bool)

(assert (=> bm!4802 (= call!4803 call!4805)))

(declare-fun b!62054 () Bool)

(assert (=> b!62054 (= e!40729 (validKeyInArray!0 (select (arr!1784 (_keys!3694 (_2!1023 lt!24841))) #b00000000000000000000000000000000)))))

(declare-fun b!62055 () Bool)

(assert (=> b!62055 (= e!40723 (+!81 call!4807 (tuple2!2023 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!1980 (_2!1023 lt!24841)))))))

(declare-fun bm!4803 () Bool)

(assert (=> bm!4803 (= call!4802 (getCurrentListMapNoExtraKeys!45 (_keys!3694 (_2!1023 lt!24841)) (_values!2049 (_2!1023 lt!24841)) (mask!5962 (_2!1023 lt!24841)) (extraKeys!1949 (_2!1023 lt!24841)) (zeroValue!1980 (_2!1023 lt!24841)) (minValue!1980 (_2!1023 lt!24841)) #b00000000000000000000000000000000 (defaultEntry!2066 (_2!1023 lt!24841))))))

(declare-fun bm!4804 () Bool)

(assert (=> bm!4804 (= call!4805 call!4802)))

(declare-fun b!62056 () Bool)

(declare-fun c!8244 () Bool)

(assert (=> b!62056 (= c!8244 (and (not (= (bvand (extraKeys!1949 (_2!1023 lt!24841)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!1949 (_2!1023 lt!24841)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (=> b!62056 (= e!40727 e!40733)))

(declare-fun b!62057 () Bool)

(assert (=> b!62057 (= e!40731 (= (apply!67 lt!25817 (select (arr!1784 (_keys!3694 (_2!1023 lt!24841))) #b00000000000000000000000000000000)) (get!1081 (select (arr!1785 (_values!2049 (_2!1023 lt!24841))) #b00000000000000000000000000000000) (dynLambda!306 (defaultEntry!2066 (_2!1023 lt!24841)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!62057 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2016 (_values!2049 (_2!1023 lt!24841)))))))

(assert (=> b!62057 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 (_2!1023 lt!24841)))))))

(declare-fun d!12597 () Bool)

(assert (=> d!12597 e!40725))

(declare-fun res!34120 () Bool)

(assert (=> d!12597 (=> (not res!34120) (not e!40725))))

(assert (=> d!12597 (= res!34120 (or (bvsge #b00000000000000000000000000000000 (size!2015 (_keys!3694 (_2!1023 lt!24841)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 (_2!1023 lt!24841)))))))))

(declare-fun lt!25803 () ListLongMap!1347)

(assert (=> d!12597 (= lt!25817 lt!25803)))

(declare-fun lt!25819 () Unit!1613)

(assert (=> d!12597 (= lt!25819 e!40732)))

(declare-fun c!8241 () Bool)

(assert (=> d!12597 (= c!8241 e!40728)))

(declare-fun res!34116 () Bool)

(assert (=> d!12597 (=> (not res!34116) (not e!40728))))

(assert (=> d!12597 (= res!34116 (bvslt #b00000000000000000000000000000000 (size!2015 (_keys!3694 (_2!1023 lt!24841)))))))

(assert (=> d!12597 (= lt!25803 e!40723)))

(assert (=> d!12597 (= c!8245 (and (not (= (bvand (extraKeys!1949 (_2!1023 lt!24841)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!1949 (_2!1023 lt!24841)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!12597 (validMask!0 (mask!5962 (_2!1023 lt!24841)))))

(assert (=> d!12597 (= (getCurrentListMap!390 (_keys!3694 (_2!1023 lt!24841)) (_values!2049 (_2!1023 lt!24841)) (mask!5962 (_2!1023 lt!24841)) (extraKeys!1949 (_2!1023 lt!24841)) (zeroValue!1980 (_2!1023 lt!24841)) (minValue!1980 (_2!1023 lt!24841)) #b00000000000000000000000000000000 (defaultEntry!2066 (_2!1023 lt!24841))) lt!25817)))

(declare-fun b!62045 () Bool)

(assert (=> b!62045 (= e!40734 (not call!4801))))

(declare-fun b!62058 () Bool)

(declare-fun lt!25809 () Unit!1613)

(assert (=> b!62058 (= e!40732 lt!25809)))

(declare-fun lt!25811 () ListLongMap!1347)

(assert (=> b!62058 (= lt!25811 (getCurrentListMapNoExtraKeys!45 (_keys!3694 (_2!1023 lt!24841)) (_values!2049 (_2!1023 lt!24841)) (mask!5962 (_2!1023 lt!24841)) (extraKeys!1949 (_2!1023 lt!24841)) (zeroValue!1980 (_2!1023 lt!24841)) (minValue!1980 (_2!1023 lt!24841)) #b00000000000000000000000000000000 (defaultEntry!2066 (_2!1023 lt!24841))))))

(declare-fun lt!25814 () (_ BitVec 64))

(assert (=> b!62058 (= lt!25814 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25808 () (_ BitVec 64))

(assert (=> b!62058 (= lt!25808 (select (arr!1784 (_keys!3694 (_2!1023 lt!24841))) #b00000000000000000000000000000000))))

(declare-fun lt!25801 () Unit!1613)

(assert (=> b!62058 (= lt!25801 (addStillContains!43 lt!25811 lt!25814 (zeroValue!1980 (_2!1023 lt!24841)) lt!25808))))

(assert (=> b!62058 (contains!682 (+!81 lt!25811 (tuple2!2023 lt!25814 (zeroValue!1980 (_2!1023 lt!24841)))) lt!25808)))

(declare-fun lt!25820 () Unit!1613)

(assert (=> b!62058 (= lt!25820 lt!25801)))

(declare-fun lt!25812 () ListLongMap!1347)

(assert (=> b!62058 (= lt!25812 (getCurrentListMapNoExtraKeys!45 (_keys!3694 (_2!1023 lt!24841)) (_values!2049 (_2!1023 lt!24841)) (mask!5962 (_2!1023 lt!24841)) (extraKeys!1949 (_2!1023 lt!24841)) (zeroValue!1980 (_2!1023 lt!24841)) (minValue!1980 (_2!1023 lt!24841)) #b00000000000000000000000000000000 (defaultEntry!2066 (_2!1023 lt!24841))))))

(declare-fun lt!25802 () (_ BitVec 64))

(assert (=> b!62058 (= lt!25802 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25822 () (_ BitVec 64))

(assert (=> b!62058 (= lt!25822 (select (arr!1784 (_keys!3694 (_2!1023 lt!24841))) #b00000000000000000000000000000000))))

(declare-fun lt!25813 () Unit!1613)

(assert (=> b!62058 (= lt!25813 (addApplyDifferent!43 lt!25812 lt!25802 (minValue!1980 (_2!1023 lt!24841)) lt!25822))))

(assert (=> b!62058 (= (apply!67 (+!81 lt!25812 (tuple2!2023 lt!25802 (minValue!1980 (_2!1023 lt!24841)))) lt!25822) (apply!67 lt!25812 lt!25822))))

(declare-fun lt!25807 () Unit!1613)

(assert (=> b!62058 (= lt!25807 lt!25813)))

(declare-fun lt!25818 () ListLongMap!1347)

(assert (=> b!62058 (= lt!25818 (getCurrentListMapNoExtraKeys!45 (_keys!3694 (_2!1023 lt!24841)) (_values!2049 (_2!1023 lt!24841)) (mask!5962 (_2!1023 lt!24841)) (extraKeys!1949 (_2!1023 lt!24841)) (zeroValue!1980 (_2!1023 lt!24841)) (minValue!1980 (_2!1023 lt!24841)) #b00000000000000000000000000000000 (defaultEntry!2066 (_2!1023 lt!24841))))))

(declare-fun lt!25805 () (_ BitVec 64))

(assert (=> b!62058 (= lt!25805 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25806 () (_ BitVec 64))

(assert (=> b!62058 (= lt!25806 (select (arr!1784 (_keys!3694 (_2!1023 lt!24841))) #b00000000000000000000000000000000))))

(declare-fun lt!25821 () Unit!1613)

(assert (=> b!62058 (= lt!25821 (addApplyDifferent!43 lt!25818 lt!25805 (zeroValue!1980 (_2!1023 lt!24841)) lt!25806))))

(assert (=> b!62058 (= (apply!67 (+!81 lt!25818 (tuple2!2023 lt!25805 (zeroValue!1980 (_2!1023 lt!24841)))) lt!25806) (apply!67 lt!25818 lt!25806))))

(declare-fun lt!25816 () Unit!1613)

(assert (=> b!62058 (= lt!25816 lt!25821)))

(declare-fun lt!25815 () ListLongMap!1347)

(assert (=> b!62058 (= lt!25815 (getCurrentListMapNoExtraKeys!45 (_keys!3694 (_2!1023 lt!24841)) (_values!2049 (_2!1023 lt!24841)) (mask!5962 (_2!1023 lt!24841)) (extraKeys!1949 (_2!1023 lt!24841)) (zeroValue!1980 (_2!1023 lt!24841)) (minValue!1980 (_2!1023 lt!24841)) #b00000000000000000000000000000000 (defaultEntry!2066 (_2!1023 lt!24841))))))

(declare-fun lt!25804 () (_ BitVec 64))

(assert (=> b!62058 (= lt!25804 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!25810 () (_ BitVec 64))

(assert (=> b!62058 (= lt!25810 (select (arr!1784 (_keys!3694 (_2!1023 lt!24841))) #b00000000000000000000000000000000))))

(assert (=> b!62058 (= lt!25809 (addApplyDifferent!43 lt!25815 lt!25804 (minValue!1980 (_2!1023 lt!24841)) lt!25810))))

(assert (=> b!62058 (= (apply!67 (+!81 lt!25815 (tuple2!2023 lt!25804 (minValue!1980 (_2!1023 lt!24841)))) lt!25810) (apply!67 lt!25815 lt!25810))))

(declare-fun b!62059 () Bool)

(declare-fun res!34119 () Bool)

(assert (=> b!62059 (=> (not res!34119) (not e!40725))))

(assert (=> b!62059 (= res!34119 e!40734)))

(declare-fun c!8240 () Bool)

(assert (=> b!62059 (= c!8240 (not (= (bvand (extraKeys!1949 (_2!1023 lt!24841)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(assert (= (and d!12597 c!8245) b!62055))

(assert (= (and d!12597 (not c!8245)) b!62051))

(assert (= (and b!62051 c!8242) b!62050))

(assert (= (and b!62051 (not c!8242)) b!62056))

(assert (= (and b!62056 c!8244) b!62046))

(assert (= (and b!62056 (not c!8244)) b!62044))

(assert (= (or b!62046 b!62044) bm!4802))

(assert (= (or b!62050 bm!4802) bm!4804))

(assert (= (or b!62050 b!62046) bm!4800))

(assert (= (or b!62055 bm!4804) bm!4803))

(assert (= (or b!62055 bm!4800) bm!4799))

(assert (= (and d!12597 res!34116) b!62043))

(assert (= (and d!12597 c!8241) b!62058))

(assert (= (and d!12597 (not c!8241)) b!62041))

(assert (= (and d!12597 res!34120) b!62039))

(assert (= (and b!62039 res!34112) b!62054))

(assert (= (and b!62039 (not res!34118)) b!62048))

(assert (= (and b!62048 res!34115) b!62057))

(assert (= (and b!62039 res!34114) b!62059))

(assert (= (and b!62059 c!8240) b!62053))

(assert (= (and b!62059 (not c!8240)) b!62045))

(assert (= (and b!62053 res!34113) b!62052))

(assert (= (or b!62053 b!62045) bm!4801))

(assert (= (and b!62059 res!34119) b!62049))

(assert (= (and b!62049 c!8243) b!62042))

(assert (= (and b!62049 (not c!8243)) b!62040))

(assert (= (and b!62042 res!34117) b!62047))

(assert (= (or b!62042 b!62040) bm!4798))

(declare-fun b_lambda!2743 () Bool)

(assert (=> (not b_lambda!2743) (not b!62057)))

(declare-fun t!4808 () Bool)

(declare-fun tb!1357 () Bool)

(assert (=> (and b!60443 (= (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) (defaultEntry!2066 (_2!1023 lt!24841))) t!4808) tb!1357))

(declare-fun result!2431 () Bool)

(assert (=> tb!1357 (= result!2431 tp_is_empty!2407)))

(assert (=> b!62057 t!4808))

(declare-fun b_and!3789 () Bool)

(assert (= b_and!3785 (and (=> t!4808 result!2431) b_and!3789)))

(declare-fun tb!1359 () Bool)

(declare-fun t!4810 () Bool)

(assert (=> (and b!60445 (= (defaultEntry!2066 newMap!16) (defaultEntry!2066 (_2!1023 lt!24841))) t!4810) tb!1359))

(declare-fun result!2433 () Bool)

(assert (= result!2433 result!2431))

(assert (=> b!62057 t!4810))

(declare-fun b_and!3791 () Bool)

(assert (= b_and!3787 (and (=> t!4810 result!2433) b_and!3791)))

(assert (=> b!62043 m!54743))

(assert (=> b!62043 m!54743))

(assert (=> b!62043 m!54751))

(assert (=> b!62048 m!54743))

(assert (=> b!62048 m!54743))

(declare-fun m!55629 () Bool)

(assert (=> b!62048 m!55629))

(declare-fun m!55631 () Bool)

(assert (=> bm!4798 m!55631))

(declare-fun m!55633 () Bool)

(assert (=> bm!4801 m!55633))

(declare-fun m!55635 () Bool)

(assert (=> b!62057 m!55635))

(declare-fun m!55637 () Bool)

(assert (=> b!62057 m!55637))

(declare-fun m!55639 () Bool)

(assert (=> b!62057 m!55639))

(assert (=> b!62057 m!54743))

(assert (=> b!62057 m!55637))

(assert (=> b!62057 m!54743))

(declare-fun m!55641 () Bool)

(assert (=> b!62057 m!55641))

(assert (=> b!62057 m!55635))

(declare-fun m!55643 () Bool)

(assert (=> b!62052 m!55643))

(declare-fun m!55645 () Bool)

(assert (=> b!62047 m!55645))

(assert (=> d!12597 m!54027))

(declare-fun m!55647 () Bool)

(assert (=> bm!4799 m!55647))

(declare-fun m!55649 () Bool)

(assert (=> b!62055 m!55649))

(assert (=> b!62054 m!54743))

(assert (=> b!62054 m!54743))

(assert (=> b!62054 m!54751))

(declare-fun m!55651 () Bool)

(assert (=> bm!4803 m!55651))

(declare-fun m!55653 () Bool)

(assert (=> b!62058 m!55653))

(declare-fun m!55655 () Bool)

(assert (=> b!62058 m!55655))

(declare-fun m!55657 () Bool)

(assert (=> b!62058 m!55657))

(assert (=> b!62058 m!54743))

(declare-fun m!55659 () Bool)

(assert (=> b!62058 m!55659))

(declare-fun m!55661 () Bool)

(assert (=> b!62058 m!55661))

(declare-fun m!55663 () Bool)

(assert (=> b!62058 m!55663))

(declare-fun m!55665 () Bool)

(assert (=> b!62058 m!55665))

(declare-fun m!55667 () Bool)

(assert (=> b!62058 m!55667))

(declare-fun m!55669 () Bool)

(assert (=> b!62058 m!55669))

(declare-fun m!55671 () Bool)

(assert (=> b!62058 m!55671))

(assert (=> b!62058 m!55669))

(declare-fun m!55673 () Bool)

(assert (=> b!62058 m!55673))

(declare-fun m!55675 () Bool)

(assert (=> b!62058 m!55675))

(assert (=> b!62058 m!55675))

(declare-fun m!55677 () Bool)

(assert (=> b!62058 m!55677))

(declare-fun m!55679 () Bool)

(assert (=> b!62058 m!55679))

(assert (=> b!62058 m!55655))

(declare-fun m!55681 () Bool)

(assert (=> b!62058 m!55681))

(assert (=> b!62058 m!55665))

(assert (=> b!62058 m!55651))

(assert (=> d!11991 d!12597))

(declare-fun b!62063 () Bool)

(declare-fun e!40736 () Option!132)

(assert (=> b!62063 (= e!40736 None!130)))

(declare-fun b!62061 () Bool)

(declare-fun e!40735 () Option!132)

(assert (=> b!62061 (= e!40735 e!40736)))

(declare-fun c!8247 () Bool)

(assert (=> b!62061 (= c!8247 (and ((_ is Cons!1422) (toList!689 lt!25138)) (not (= (_1!1022 (h!2004 (toList!689 lt!25138))) (_1!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))))

(declare-fun b!62060 () Bool)

(assert (=> b!62060 (= e!40735 (Some!131 (_2!1022 (h!2004 (toList!689 lt!25138)))))))

(declare-fun b!62062 () Bool)

(assert (=> b!62062 (= e!40736 (getValueByKey!126 (t!4792 (toList!689 lt!25138)) (_1!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))))))

(declare-fun c!8246 () Bool)

(declare-fun d!12599 () Bool)

(assert (=> d!12599 (= c!8246 (and ((_ is Cons!1422) (toList!689 lt!25138)) (= (_1!1022 (h!2004 (toList!689 lt!25138))) (_1!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992))))))))))

(assert (=> d!12599 (= (getValueByKey!126 (toList!689 lt!25138) (_1!1022 (tuple2!2023 lt!24902 (minValue!1980 (v!2403 (underlying!230 thiss!992)))))) e!40735)))

(assert (= (and d!12599 c!8246) b!62060))

(assert (= (and d!12599 (not c!8246)) b!62061))

(assert (= (and b!62061 c!8247) b!62062))

(assert (= (and b!62061 (not c!8247)) b!62063))

(declare-fun m!55683 () Bool)

(assert (=> b!62062 m!55683))

(assert (=> b!61004 d!12599))

(assert (=> b!61037 d!11953))

(declare-fun d!12601 () Bool)

(declare-fun e!40738 () Bool)

(assert (=> d!12601 e!40738))

(declare-fun res!34121 () Bool)

(assert (=> d!12601 (=> res!34121 e!40738)))

(declare-fun lt!25825 () Bool)

(assert (=> d!12601 (= res!34121 (not lt!25825))))

(declare-fun lt!25826 () Bool)

(assert (=> d!12601 (= lt!25825 lt!25826)))

(declare-fun lt!25823 () Unit!1613)

(declare-fun e!40737 () Unit!1613)

(assert (=> d!12601 (= lt!25823 e!40737)))

(declare-fun c!8248 () Bool)

(assert (=> d!12601 (= c!8248 lt!25826)))

(assert (=> d!12601 (= lt!25826 (containsKey!129 (toList!689 lt!25210) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!12601 (= (contains!682 lt!25210 #b0000000000000000000000000000000000000000000000000000000000000000) lt!25825)))

(declare-fun b!62064 () Bool)

(declare-fun lt!25824 () Unit!1613)

(assert (=> b!62064 (= e!40737 lt!25824)))

(assert (=> b!62064 (= lt!25824 (lemmaContainsKeyImpliesGetValueByKeyDefined!77 (toList!689 lt!25210) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!62064 (isDefined!78 (getValueByKey!126 (toList!689 lt!25210) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!62065 () Bool)

(declare-fun Unit!1679 () Unit!1613)

(assert (=> b!62065 (= e!40737 Unit!1679)))

(declare-fun b!62066 () Bool)

(assert (=> b!62066 (= e!40738 (isDefined!78 (getValueByKey!126 (toList!689 lt!25210) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!12601 c!8248) b!62064))

(assert (= (and d!12601 (not c!8248)) b!62065))

(assert (= (and d!12601 (not res!34121)) b!62066))

(declare-fun m!55685 () Bool)

(assert (=> d!12601 m!55685))

(declare-fun m!55687 () Bool)

(assert (=> b!62064 m!55687))

(assert (=> b!62064 m!54437))

(assert (=> b!62064 m!54437))

(declare-fun m!55689 () Bool)

(assert (=> b!62064 m!55689))

(assert (=> b!62066 m!54437))

(assert (=> b!62066 m!54437))

(assert (=> b!62066 m!55689))

(assert (=> bm!4690 d!12601))

(declare-fun mapNonEmpty!2931 () Bool)

(declare-fun mapRes!2931 () Bool)

(declare-fun tp!8097 () Bool)

(declare-fun e!40740 () Bool)

(assert (=> mapNonEmpty!2931 (= mapRes!2931 (and tp!8097 e!40740))))

(declare-fun mapValue!2931 () ValueCell!860)

(declare-fun mapKey!2931 () (_ BitVec 32))

(declare-fun mapRest!2931 () (Array (_ BitVec 32) ValueCell!860))

(assert (=> mapNonEmpty!2931 (= mapRest!2929 (store mapRest!2931 mapKey!2931 mapValue!2931))))

(declare-fun condMapEmpty!2931 () Bool)

(declare-fun mapDefault!2931 () ValueCell!860)

(assert (=> mapNonEmpty!2929 (= condMapEmpty!2931 (= mapRest!2929 ((as const (Array (_ BitVec 32) ValueCell!860)) mapDefault!2931)))))

(declare-fun e!40739 () Bool)

(assert (=> mapNonEmpty!2929 (= tp!8095 (and e!40739 mapRes!2931))))

(declare-fun b!62068 () Bool)

(assert (=> b!62068 (= e!40739 tp_is_empty!2407)))

(declare-fun b!62067 () Bool)

(assert (=> b!62067 (= e!40740 tp_is_empty!2407)))

(declare-fun mapIsEmpty!2931 () Bool)

(assert (=> mapIsEmpty!2931 mapRes!2931))

(assert (= (and mapNonEmpty!2929 condMapEmpty!2931) mapIsEmpty!2931))

(assert (= (and mapNonEmpty!2929 (not condMapEmpty!2931)) mapNonEmpty!2931))

(assert (= (and mapNonEmpty!2931 ((_ is ValueCellFull!860) mapValue!2931)) b!62067))

(assert (= (and mapNonEmpty!2929 ((_ is ValueCellFull!860) mapDefault!2931)) b!62068))

(declare-fun m!55691 () Bool)

(assert (=> mapNonEmpty!2931 m!55691))

(declare-fun mapNonEmpty!2932 () Bool)

(declare-fun mapRes!2932 () Bool)

(declare-fun tp!8098 () Bool)

(declare-fun e!40742 () Bool)

(assert (=> mapNonEmpty!2932 (= mapRes!2932 (and tp!8098 e!40742))))

(declare-fun mapValue!2932 () ValueCell!860)

(declare-fun mapKey!2932 () (_ BitVec 32))

(declare-fun mapRest!2932 () (Array (_ BitVec 32) ValueCell!860))

(assert (=> mapNonEmpty!2932 (= mapRest!2930 (store mapRest!2932 mapKey!2932 mapValue!2932))))

(declare-fun condMapEmpty!2932 () Bool)

(declare-fun mapDefault!2932 () ValueCell!860)

(assert (=> mapNonEmpty!2930 (= condMapEmpty!2932 (= mapRest!2930 ((as const (Array (_ BitVec 32) ValueCell!860)) mapDefault!2932)))))

(declare-fun e!40741 () Bool)

(assert (=> mapNonEmpty!2930 (= tp!8096 (and e!40741 mapRes!2932))))

(declare-fun b!62070 () Bool)

(assert (=> b!62070 (= e!40741 tp_is_empty!2407)))

(declare-fun b!62069 () Bool)

(assert (=> b!62069 (= e!40742 tp_is_empty!2407)))

(declare-fun mapIsEmpty!2932 () Bool)

(assert (=> mapIsEmpty!2932 mapRes!2932))

(assert (= (and mapNonEmpty!2930 condMapEmpty!2932) mapIsEmpty!2932))

(assert (= (and mapNonEmpty!2930 (not condMapEmpty!2932)) mapNonEmpty!2932))

(assert (= (and mapNonEmpty!2932 ((_ is ValueCellFull!860) mapValue!2932)) b!62069))

(assert (= (and mapNonEmpty!2930 ((_ is ValueCellFull!860) mapDefault!2932)) b!62070))

(declare-fun m!55693 () Bool)

(assert (=> mapNonEmpty!2932 m!55693))

(declare-fun b_lambda!2745 () Bool)

(assert (= b_lambda!2711 (or (and b!60443 b_free!1981 (= (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) (defaultEntry!2066 newMap!16))) (and b!60445 b_free!1983) b_lambda!2745)))

(declare-fun b_lambda!2747 () Bool)

(assert (= b_lambda!2727 (or (and b!60443 b_free!1981 (= (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) (defaultEntry!2066 newMap!16))) (and b!60445 b_free!1983) b_lambda!2747)))

(declare-fun b_lambda!2749 () Bool)

(assert (= b_lambda!2715 (or (and b!60443 b_free!1981) (and b!60445 b_free!1983 (= (defaultEntry!2066 newMap!16) (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))))) b_lambda!2749)))

(declare-fun b_lambda!2751 () Bool)

(assert (= b_lambda!2723 (or (and b!60443 b_free!1981 (= (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) (defaultEntry!2066 newMap!16))) (and b!60445 b_free!1983) b_lambda!2751)))

(declare-fun b_lambda!2753 () Bool)

(assert (= b_lambda!2735 (or (and b!60443 b_free!1981 (= (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) (defaultEntry!2066 newMap!16))) (and b!60445 b_free!1983) b_lambda!2753)))

(declare-fun b_lambda!2755 () Bool)

(assert (= b_lambda!2733 (or (and b!60443 b_free!1981 (= (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) (defaultEntry!2066 newMap!16))) (and b!60445 b_free!1983) b_lambda!2755)))

(declare-fun b_lambda!2757 () Bool)

(assert (= b_lambda!2741 (or (and b!60443 b_free!1981 (= (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) (defaultEntry!2066 newMap!16))) (and b!60445 b_free!1983) b_lambda!2757)))

(declare-fun b_lambda!2759 () Bool)

(assert (= b_lambda!2721 (or (and b!60443 b_free!1981 (= (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) (defaultEntry!2066 newMap!16))) (and b!60445 b_free!1983) b_lambda!2759)))

(declare-fun b_lambda!2761 () Bool)

(assert (= b_lambda!2737 (or (and b!60443 b_free!1981 (= (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) (defaultEntry!2066 newMap!16))) (and b!60445 b_free!1983) b_lambda!2761)))

(declare-fun b_lambda!2763 () Bool)

(assert (= b_lambda!2725 (or (and b!60443 b_free!1981 (= (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) (defaultEntry!2066 newMap!16))) (and b!60445 b_free!1983) b_lambda!2763)))

(declare-fun b_lambda!2765 () Bool)

(assert (= b_lambda!2719 (or (and b!60443 b_free!1981 (= (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) (defaultEntry!2066 newMap!16))) (and b!60445 b_free!1983) b_lambda!2765)))

(declare-fun b_lambda!2767 () Bool)

(assert (= b_lambda!2729 (or (and b!60443 b_free!1981 (= (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) (defaultEntry!2066 newMap!16))) (and b!60445 b_free!1983) b_lambda!2767)))

(declare-fun b_lambda!2769 () Bool)

(assert (= b_lambda!2717 (or (and b!60443 b_free!1981) (and b!60445 b_free!1983 (= (defaultEntry!2066 newMap!16) (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))))) b_lambda!2769)))

(declare-fun b_lambda!2771 () Bool)

(assert (= b_lambda!2713 (or (and b!60443 b_free!1981 (= (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) (defaultEntry!2066 newMap!16))) (and b!60445 b_free!1983) b_lambda!2771)))

(declare-fun b_lambda!2773 () Bool)

(assert (= b_lambda!2731 (or (and b!60443 b_free!1981 (= (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) (defaultEntry!2066 newMap!16))) (and b!60445 b_free!1983) b_lambda!2773)))

(declare-fun b_lambda!2775 () Bool)

(assert (= b_lambda!2739 (or (and b!60443 b_free!1981 (= (defaultEntry!2066 (v!2403 (underlying!230 thiss!992))) (defaultEntry!2066 newMap!16))) (and b!60445 b_free!1983) b_lambda!2775)))

(check-sat (not d!12355) (not bm!4724) (not b!61638) (not b!61369) (not bm!4803) (not d!12375) (not b!61843) (not d!12129) (not b!61577) (not b!61656) (not b!61826) (not bm!4768) (not b!61897) (not d!12507) (not bm!4798) (not d!12527) (not b!61287) (not d!12329) (not b!61725) (not d!12587) (not bm!4797) (not d!12427) (not d!12381) (not b!61368) (not b!61282) (not b!61918) (not b!61973) (not b!61623) (not b!61425) (not mapNonEmpty!2931) (not d!12071) (not b!61955) (not b!61975) (not d!12245) (not b!61555) (not b!61255) (not b!61289) (not d!12417) (not b!61356) (not d!12477) (not d!12429) (not bm!4750) (not b!61454) (not d!12371) (not b_lambda!2743) (not d!12211) (not b!61468) (not b!61519) (not b!61573) (not b!61438) (not d!12085) (not b!61689) (not b_lambda!2765) (not d!12395) (not b_lambda!2699) (not d!12469) (not b!61682) (not b_lambda!2685) (not b!61471) (not b!61397) (not d!12123) (not d!12489) (not b!61758) (not b!61244) (not b!61280) (not bm!4764) (not bm!4772) (not b!61851) (not d!12087) (not b!61663) (not b!62034) (not b!62064) (not b!61514) (not d!12525) (not b!61444) (not d!12243) (not b!61556) (not bm!4713) (not b!62019) (not b!61959) (not b!61601) (not d!12439) (not b!61582) (not d!12255) (not bm!4714) (not bm!4758) (not bm!4708) (not b!61453) (not d!12345) (not bm!4726) (not b!61196) (not b!61720) (not d!12509) (not b!61809) (not d!12097) (not b!61869) (not b_lambda!2775) (not b!61764) (not d!12449) (not b!61288) (not d!12443) (not b!61594) (not b!61424) (not b_lambda!2705) (not b!61193) (not b!61380) (not d!12205) (not d!12147) (not b!61285) (not d!12431) (not d!12197) (not bm!4737) (not bm!4794) (not b_lambda!2709) (not b!61591) (not d!12167) (not bm!4770) (not b!61305) (not d!12311) (not b!61835) (not b!61877) (not d!12133) (not d!12435) (not b!61588) (not d!12369) (not d!12485) (not b!61772) (not b!61839) (not d!12207) (not b!61748) (not b!61275) (not b!61306) (not b!61705) (not b!62020) (not d!12117) (not b!61343) (not b!61641) (not b!61441) (not b!61749) (not b!61443) (not d!12203) (not b!61925) (not bm!4720) (not d!12367) (not b!62016) (not b!61722) (not b!61499) (not b!61913) (not d!12385) (not d!12309) (not d!12299) (not b!61824) (not b!61456) (not bm!4775) (not b!61498) (not b!61873) (not b!61833) (not b!61607) (not b!62038) (not bm!4783) (not b!61654) tp_is_empty!2407 (not bm!4741) (not d!12511) (not bm!4744) (not b!61832) (not b!61284) (not b!61815) (not b!61531) (not bm!4754) (not b!62036) (not d!12313) (not b!61822) (not d!12297) (not d!12383) (not d!12333) (not b!62058) (not bm!4756) (not b!61521) (not b!61709) (not bm!4730) (not b!61984) (not bm!4788) (not b!61629) (not b!61316) (not mapNonEmpty!2932) (not bm!4776) (not d!12523) (not b!61968) (not d!12099) (not b!61948) (not d!12107) (not d!12191) (not d!12259) (not d!12393) (not d!12575) (not b!61421) (not b!61836) (not b!61766) (not b!61198) (not b!61489) (not b!61708) (not d!12343) (not d!12373) (not b!61538) (not bm!4718) (not d!12529) (not d!12293) (not d!12041) (not b!61879) (not b!61768) (not d!12057) (not b!61432) (not b!61613) (not b!61692) (not b!62030) (not b!61563) (not d!12271) (not b!61465) (not b!61189) (not b!62048) (not bm!4795) (not b!62022) (not b!61579) (not b!61347) (not d!12105) (not b!61603) (not d!12219) (not b!61957) (not b!61672) (not d!12315) (not d!12391) (not b!61419) (not b!61685) (not b!61687) (not bm!4780) (not b!61668) (not b!62031) (not d!12183) (not d!12555) (not d!12239) (not d!12075) (not d!12377) (not bm!4738) (not b!61735) (not b!61433) (not d!12423) (not d!12425) (not b!61987) (not b!61259) (not d!12465) (not b!61732) (not b!61632) (not b!61690) (not d!12409) (not b!61491) (not b!61494) (not b!61399) (not b!61814) (not b!61609) (not b_lambda!2753) (not b!61620) (not b!61837) (not d!12341) (not b!61739) (not d!12251) (not b_lambda!2681) (not bm!4760) (not b!61729) (not b!61812) (not d!12551) (not b!62029) (not b!62027) (not b!61461) (not b!61755) (not b_lambda!2767) (not d!12241) (not b!61718) (not b!61963) (not bm!4801) (not d!12407) (not d!12295) (not d!12405) (not b!61829) (not b!61339) (not d!12257) (not d!12285) (not b_lambda!2707) (not b!61311) (not b!61341) (not d!12115) (not b!62066) (not b!61186) (not d!12325) (not b!61727) (not d!12589) (not b!61953) (not d!12351) (not d!12411) (not d!12127) (not b!61604) (not b!62032) (not d!12137) (not b!61510) (not b!61762) (not b!61589) (not b!61568) b_and!3789 (not b!61544) (not b!61348) (not b!61201) (not b!61317) (not b!61610) (not d!12139) (not b!61753) (not b_lambda!2773) (not b!61759) (not d!12179) (not b!61730) (not d!12553) (not b!61802) (not d!12267) (not b!61534) (not b!61811) (not b!61819) (not d!12571) (not d!12199) (not bm!4778) (not d!12437) (not b!62013) (not bm!4765) (not b!61580) (not b!61458) (not b!61898) (not d!12471) (not b!61452) (not b!61700) (not b!61291) (not b!61971) (not d!12403) (not d!12073) (not b!61606) (not d!12515) (not b!61825) (not b!61237) (not d!12521) (not b!61807) (not b!61640) (not d!12131) (not b!61642) (not d!12223) (not d!12591) (not b!61894) (not bm!4746) (not b!61810) (not b!61246) (not d!12565) (not b!61651) (not b!61529) (not b!61455) (not d!12459) (not b!61504) (not b!61428) (not b!61823) (not d!12481) (not d!12517) (not b!61737) (not d!12217) (not b!61485) (not d!12119) (not b_lambda!2769) (not b!61848) (not d!12451) (not b!61886) (not b!61595) (not d!12379) (not bm!4786) (not b!61858) (not b!61962) (not d!12447) (not bm!4740) (not b!62025) (not d!12461) (not b!61853) (not d!12519) (not b!61731) (not d!12415) (not d!12247) (not b!61797) (not b!61445) (not b!61427) (not b!61831) (not d!12307) (not b!61278) (not d!12181) (not b!61382) (not bm!4742) (not b!61911) (not b!61405) (not d!12039) (not d!12053) b_and!3791 (not b!61863) (not bm!4799) (not d!12601) (not b!61371) (not d!12125) (not b!61522) (not b!61706) (not b!61724) (not d!12473) (not b!61459) (not d!12235) (not b!61926) (not b!61487) (not b!61817) (not d!12215) (not b_lambda!2755) (not d!12145) (not d!12467) (not bm!4719) (not b!61667) (not bm!4716) (not b!61655) (not b!61703) (not d!12479) (not d!12503) (not b!61896) (not b!61299) (not b!61630) (not b!61402) (not d!12475) (not d!12389) (not d!12585) (not b!61719) (not b!61891) (not b!62052) (not b!61985) (not d!12065) (not b!61572) (not b!61710) (not b!61212) (not b_lambda!2763) (not d!12457) (not b!61391) (not d!12135) (not b!61928) (not b!61906) (not b!61415) (not b!61921) (not b!61845) (not d!12433) (not bm!4748) (not d!12283) (not b!61337) (not b!61257) (not d!12535) (not b!61247) (not b!62017) (not b!61625) (not d!12301) (not bm!4752) (not b!62062) (not b!61922) (not b_lambda!2751) (not b!61924) (not b!61354) (not b!61373) (not d!12559) (not d!12557) (not d!12595) (not b!61616) (not b!61359) (not b!61266) (not d!12537) (not b!61315) (not b_next!1981) (not b!61254) (not b!62018) (not b!61756) (not d!12483) (not b!61524) (not bm!4728) (not b!61404) (not b!61678) (not b!61559) (not b!61974) (not d!12165) (not b!61694) (not b!62057) (not d!12359) (not b!61422) (not b!61473) (not b!61850) (not d!12335) (not d!12111) (not bm!4711) (not b!61322) (not b!61934) (not b!61558) (not bm!4739) (not bm!4733) (not b!61335) (not b!61691) (not d!12273) (not b!61583) (not d!12189) (not d!12227) (not d!12387) (not b!61587) (not b!61269) (not d!12269) (not d!12113) (not bm!4753) (not b!61738) (not b!61200) (not b!61346) (not d!12109) (not d!12291) (not b!61697) (not b!61675) (not d!12069) (not b!61726) (not b!61596) (not b!61351) (not b!61888) (not d!12567) (not d!12061) (not b!61484) (not b!62055) (not d!12101) (not b!61414) (not b_lambda!2757) (not d!12225) (not b!61478) (not b!61361) (not b_lambda!2747) (not d!12059) (not d!12171) (not b!61677) (not b!61213) (not bm!4731) (not b!61497) (not b_lambda!2745) (not d!12399) (not b!61313) (not d!12543) (not b!61885) (not b_next!1983) (not b!61844) (not b!61970) (not b!61294) (not b!61319) (not d!12365) (not b!61561) (not b!61828) (not b!61477) (not b!61372) (not b!61862) (not b!61344) (not d!12187) (not d!12453) (not d!12321) (not b!61203) (not b!61191) (not b!61481) (not bm!4796) (not b!61637) (not d!12209) (not b!61525) (not b!61342) (not b!61870) (not d!12579) (not b!61314) (not b!61674) (not b!61363) (not b!62043) (not d!12455) (not b!61435) (not b!61272) (not d!12549) (not b!61744) (not b!61387) (not b!61893) (not bm!4766) (not b_lambda!2761) (not b!61842) (not b!61283) (not b!61599) (not b!61982) (not b_lambda!2759) (not b!61440) (not b!61206) (not bm!4773) (not bm!4735) (not d!12421) (not d!12161) (not b!61771) (not bm!4762) (not d!12545) (not b!61816) (not b!61515) (not b!61767) (not b!61543) (not b!61805) (not d!12049) (not b!61536) (not b!61329) (not b!61920) (not b!61801) (not b_lambda!2701) (not b!61923) (not b!61252) (not b!61410) (not d!12213) (not d!12445) (not d!12093) (not b!62037) (not b!61321) (not b!61366) (not d!12419) (not b!61472) (not d!12541) (not b!61882) (not d!12143) (not b!61188) (not b!61912) (not b_lambda!2749) (not b!61236) (not b!61249) (not b!61769) (not b!61635) (not b!61958) (not b!61475) (not b!61983) (not d!12253) (not d!12363) (not d!12287) (not b!61698) (not b!61867) (not bm!4722) (not d!12121) (not b!62047) (not bm!4785) (not d!12497) (not d!12597) (not b!61872) (not b!61960) (not b!61384) (not b!61540) (not b_lambda!2703) (not b!61297) (not b!61846) (not bm!4774) (not d!12441) (not b!61235) (not b!61627) (not b!61258) (not d!12463) (not b!61965) (not d!12491) (not b!62054) (not b!61309) (not b!61908) (not b!61695) (not b!61931) (not b!61312) (not b!61463) (not b_lambda!2771) (not b!61821))
(check-sat b_and!3789 b_and!3791 (not b_next!1981) (not b_next!1983))
