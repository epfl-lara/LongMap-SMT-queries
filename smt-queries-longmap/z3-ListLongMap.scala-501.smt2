; Options: -in -smt2
(set-option :produce-unsat-assumptions true)

(declare-fun start!11498 () Bool)

(assert start!11498)

(declare-fun b!95640 () Bool)

(declare-fun b_free!2405 () Bool)

(declare-fun b_next!2405 () Bool)

(assert (=> b!95640 (= b_free!2405 (not b_next!2405))))

(declare-fun tp!9492 () Bool)

(declare-fun b_and!5847 () Bool)

(assert (=> b!95640 (= tp!9492 b_and!5847)))

(declare-fun b!95639 () Bool)

(declare-fun b_free!2407 () Bool)

(declare-fun b_next!2407 () Bool)

(assert (=> b!95639 (= b_free!2407 (not b_next!2407))))

(declare-fun tp!9490 () Bool)

(declare-fun b_and!5849 () Bool)

(assert (=> b!95639 (= tp!9490 b_and!5849)))

(declare-fun b!95637 () Bool)

(declare-fun e!62411 () Bool)

(declare-fun e!62408 () Bool)

(assert (=> b!95637 (= e!62411 e!62408)))

(declare-fun res!48334 () Bool)

(assert (=> b!95637 (=> (not res!48334) (not e!62408))))

(declare-datatypes ((V!3139 0))(
  ( (V!3140 (val!1354 Int)) )
))
(declare-datatypes ((array!4215 0))(
  ( (array!4216 (arr!2003 (Array (_ BitVec 32) (_ BitVec 64))) (size!2252 (_ BitVec 32))) )
))
(declare-datatypes ((ValueCell!966 0))(
  ( (ValueCellFull!966 (v!2777 V!3139)) (EmptyCell!966) )
))
(declare-datatypes ((array!4217 0))(
  ( (array!4218 (arr!2004 (Array (_ BitVec 32) ValueCell!966)) (size!2253 (_ BitVec 32))) )
))
(declare-datatypes ((LongMapFixedSize!840 0))(
  ( (LongMapFixedSize!841 (defaultEntry!2457 Int) (mask!6542 (_ BitVec 32)) (extraKeys!2282 (_ BitVec 32)) (zeroValue!2342 V!3139) (minValue!2342 V!3139) (_size!469 (_ BitVec 32)) (_keys!4143 array!4215) (_values!2440 array!4217) (_vacant!469 (_ BitVec 32))) )
))
(declare-datatypes ((Cell!640 0))(
  ( (Cell!641 (v!2778 LongMapFixedSize!840)) )
))
(declare-datatypes ((LongMap!640 0))(
  ( (LongMap!641 (underlying!331 Cell!640)) )
))
(declare-fun thiss!992 () LongMap!640)

(declare-datatypes ((tuple2!2322 0))(
  ( (tuple2!2323 (_1!1172 (_ BitVec 64)) (_2!1172 V!3139)) )
))
(declare-datatypes ((List!1573 0))(
  ( (Nil!1570) (Cons!1569 (h!2162 tuple2!2322) (t!5495 List!1573)) )
))
(declare-datatypes ((ListLongMap!1527 0))(
  ( (ListLongMap!1528 (toList!779 List!1573)) )
))
(declare-fun lt!47645 () ListLongMap!1527)

(declare-fun lt!47639 () ListLongMap!1527)

(declare-fun from!355 () (_ BitVec 32))

(assert (=> b!95637 (= res!48334 (and (= lt!47645 lt!47639) (not (= (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun newMap!16 () LongMapFixedSize!840)

(declare-fun map!1247 (LongMapFixedSize!840) ListLongMap!1527)

(assert (=> b!95637 (= lt!47639 (map!1247 newMap!16))))

(declare-fun getCurrentListMap!470 (array!4215 array!4217 (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 (_ BitVec 32) Int) ListLongMap!1527)

(assert (=> b!95637 (= lt!47645 (getCurrentListMap!470 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (_values!2440 (v!2778 (underlying!331 thiss!992))) (mask!6542 (v!2778 (underlying!331 thiss!992))) (extraKeys!2282 (v!2778 (underlying!331 thiss!992))) (zeroValue!2342 (v!2778 (underlying!331 thiss!992))) (minValue!2342 (v!2778 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2457 (v!2778 (underlying!331 thiss!992)))))))

(declare-fun b!95638 () Bool)

(declare-fun res!48333 () Bool)

(assert (=> b!95638 (=> (not res!48333) (not e!62411))))

(assert (=> b!95638 (= res!48333 (and (bvsge from!355 #b00000000000000000000000000000000) (bvslt from!355 (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun tp_is_empty!2619 () Bool)

(declare-fun e!62402 () Bool)

(declare-fun e!62399 () Bool)

(declare-fun array_inv!1249 (array!4215) Bool)

(declare-fun array_inv!1250 (array!4217) Bool)

(assert (=> b!95639 (= e!62402 (and tp!9490 tp_is_empty!2619 (array_inv!1249 (_keys!4143 newMap!16)) (array_inv!1250 (_values!2440 newMap!16)) e!62399))))

(declare-fun e!62407 () Bool)

(declare-fun e!62406 () Bool)

(assert (=> b!95640 (= e!62406 (and tp!9492 tp_is_empty!2619 (array_inv!1249 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (array_inv!1250 (_values!2440 (v!2778 (underlying!331 thiss!992)))) e!62407))))

(declare-fun b!95641 () Bool)

(declare-datatypes ((Unit!2864 0))(
  ( (Unit!2865) )
))
(declare-fun e!62404 () Unit!2864)

(declare-fun Unit!2866 () Unit!2864)

(assert (=> b!95641 (= e!62404 Unit!2866)))

(declare-fun b!95642 () Bool)

(declare-fun e!62396 () Bool)

(assert (=> b!95642 (= e!62396 e!62406)))

(declare-fun b!95643 () Bool)

(declare-fun Unit!2867 () Unit!2864)

(assert (=> b!95643 (= e!62404 Unit!2867)))

(declare-fun lt!47644 () Unit!2864)

(declare-fun lemmaListMapContainsThenArrayContainsFrom!86 (array!4215 array!4217 (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 (_ BitVec 64) (_ BitVec 32) Int) Unit!2864)

(assert (=> b!95643 (= lt!47644 (lemmaListMapContainsThenArrayContainsFrom!86 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (_values!2440 (v!2778 (underlying!331 thiss!992))) (mask!6542 (v!2778 (underlying!331 thiss!992))) (extraKeys!2282 (v!2778 (underlying!331 thiss!992))) (zeroValue!2342 (v!2778 (underlying!331 thiss!992))) (minValue!2342 (v!2778 (underlying!331 thiss!992))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2457 (v!2778 (underlying!331 thiss!992)))))))

(declare-fun arrayContainsKey!0 (array!4215 (_ BitVec 64) (_ BitVec 32)) Bool)

(assert (=> b!95643 (arrayContainsKey!0 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355))))

(declare-fun lt!47642 () Unit!2864)

(declare-fun lemmaNoDuplicateFromThenFromBigger!0 (array!4215 (_ BitVec 32) (_ BitVec 32)) Unit!2864)

(assert (=> b!95643 (= lt!47642 (lemmaNoDuplicateFromThenFromBigger!0 (_keys!4143 (v!2778 (underlying!331 thiss!992))) #b00000000000000000000000000000000 from!355))))

(declare-datatypes ((List!1574 0))(
  ( (Nil!1571) (Cons!1570 (h!2163 (_ BitVec 64)) (t!5496 List!1574)) )
))
(declare-fun arrayNoDuplicates!0 (array!4215 (_ BitVec 32) List!1574) Bool)

(assert (=> b!95643 (arrayNoDuplicates!0 (_keys!4143 (v!2778 (underlying!331 thiss!992))) from!355 Nil!1571)))

(declare-fun lt!47641 () Unit!2864)

(declare-fun lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (array!4215 (_ BitVec 32) (_ BitVec 64) List!1574) Unit!2864)

(assert (=> b!95643 (= lt!47641 (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (Cons!1570 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) Nil!1571)))))

(assert (=> b!95643 false))

(declare-fun b!95644 () Bool)

(declare-fun e!62405 () Bool)

(assert (=> b!95644 (= e!62405 tp_is_empty!2619)))

(declare-fun b!95645 () Bool)

(declare-fun e!62400 () Bool)

(assert (=> b!95645 (= e!62400 e!62396)))

(declare-fun mapIsEmpty!3701 () Bool)

(declare-fun mapRes!3701 () Bool)

(assert (=> mapIsEmpty!3701 mapRes!3701))

(declare-fun b!95646 () Bool)

(declare-fun e!62398 () Bool)

(assert (=> b!95646 (= e!62398 tp_is_empty!2619)))

(declare-fun mapNonEmpty!3701 () Bool)

(declare-fun mapRes!3702 () Bool)

(declare-fun tp!9491 () Bool)

(declare-fun e!62410 () Bool)

(assert (=> mapNonEmpty!3701 (= mapRes!3702 (and tp!9491 e!62410))))

(declare-fun mapRest!3702 () (Array (_ BitVec 32) ValueCell!966))

(declare-fun mapValue!3702 () ValueCell!966)

(declare-fun mapKey!3701 () (_ BitVec 32))

(assert (=> mapNonEmpty!3701 (= (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) (store mapRest!3702 mapKey!3701 mapValue!3702))))

(declare-fun res!48337 () Bool)

(assert (=> start!11498 (=> (not res!48337) (not e!62411))))

(declare-fun valid!378 (LongMap!640) Bool)

(assert (=> start!11498 (= res!48337 (valid!378 thiss!992))))

(assert (=> start!11498 e!62411))

(assert (=> start!11498 e!62400))

(assert (=> start!11498 true))

(assert (=> start!11498 e!62402))

(declare-fun b!95636 () Bool)

(assert (=> b!95636 (= e!62407 (and e!62398 mapRes!3702))))

(declare-fun condMapEmpty!3701 () Bool)

(declare-fun mapDefault!3702 () ValueCell!966)

(assert (=> b!95636 (= condMapEmpty!3701 (= (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) ((as const (Array (_ BitVec 32) ValueCell!966)) mapDefault!3702)))))

(declare-fun mapNonEmpty!3702 () Bool)

(declare-fun tp!9489 () Bool)

(assert (=> mapNonEmpty!3702 (= mapRes!3701 (and tp!9489 e!62405))))

(declare-fun mapRest!3701 () (Array (_ BitVec 32) ValueCell!966))

(declare-fun mapValue!3701 () ValueCell!966)

(declare-fun mapKey!3702 () (_ BitVec 32))

(assert (=> mapNonEmpty!3702 (= (arr!2004 (_values!2440 newMap!16)) (store mapRest!3701 mapKey!3702 mapValue!3701))))

(declare-fun b!95647 () Bool)

(declare-fun e!62397 () Bool)

(assert (=> b!95647 (= e!62399 (and e!62397 mapRes!3701))))

(declare-fun condMapEmpty!3702 () Bool)

(declare-fun mapDefault!3701 () ValueCell!966)

(assert (=> b!95647 (= condMapEmpty!3702 (= (arr!2004 (_values!2440 newMap!16)) ((as const (Array (_ BitVec 32) ValueCell!966)) mapDefault!3701)))))

(declare-fun b!95648 () Bool)

(assert (=> b!95648 (= e!62397 tp_is_empty!2619)))

(declare-fun mapIsEmpty!3702 () Bool)

(assert (=> mapIsEmpty!3702 mapRes!3702))

(declare-fun b!95649 () Bool)

(declare-fun res!48332 () Bool)

(assert (=> b!95649 (=> (not res!48332) (not e!62411))))

(declare-fun valid!379 (LongMapFixedSize!840) Bool)

(assert (=> b!95649 (= res!48332 (valid!379 newMap!16))))

(declare-fun b!95650 () Bool)

(assert (=> b!95650 (= e!62410 tp_is_empty!2619)))

(declare-fun b!95651 () Bool)

(declare-fun res!48336 () Bool)

(declare-fun e!62409 () Bool)

(assert (=> b!95651 (=> (not res!48336) (not e!62409))))

(declare-fun validMask!0 ((_ BitVec 32)) Bool)

(assert (=> b!95651 (= res!48336 (validMask!0 (mask!6542 (v!2778 (underlying!331 thiss!992)))))))

(declare-fun b!95652 () Bool)

(assert (=> b!95652 (= e!62409 (and (= (size!2253 (_values!2440 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 (mask!6542 (v!2778 (underlying!331 thiss!992))))) (not (= (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (size!2253 (_values!2440 (v!2778 (underlying!331 thiss!992))))))))))

(declare-fun b!95653 () Bool)

(declare-fun res!48335 () Bool)

(assert (=> b!95653 (=> (not res!48335) (not e!62411))))

(assert (=> b!95653 (= res!48335 (bvsge (bvadd #b00000000000000000000000000000001 (mask!6542 newMap!16)) (_size!469 (v!2778 (underlying!331 thiss!992)))))))

(declare-fun b!95654 () Bool)

(assert (=> b!95654 (= e!62408 e!62409)))

(declare-fun res!48338 () Bool)

(assert (=> b!95654 (=> (not res!48338) (not e!62409))))

(declare-datatypes ((tuple2!2324 0))(
  ( (tuple2!2325 (_1!1173 Bool) (_2!1173 LongMapFixedSize!840)) )
))
(declare-fun lt!47643 () tuple2!2324)

(assert (=> b!95654 (= res!48338 (and (_1!1173 lt!47643) (bvsle from!355 #b00000000000000000000000000000000)))))

(declare-fun lt!47640 () Unit!2864)

(assert (=> b!95654 (= lt!47640 e!62404)))

(declare-fun c!16066 () Bool)

(declare-fun contains!794 (ListLongMap!1527 (_ BitVec 64)) Bool)

(assert (=> b!95654 (= c!16066 (contains!794 lt!47639 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(declare-fun update!136 (LongMapFixedSize!840 (_ BitVec 64) V!3139) tuple2!2324)

(declare-fun get!1269 (ValueCell!966 V!3139) V!3139)

(declare-fun dynLambda!364 (Int (_ BitVec 64)) V!3139)

(assert (=> b!95654 (= lt!47643 (update!136 newMap!16 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (= (and start!11498 res!48337) b!95638))

(assert (= (and b!95638 res!48333) b!95649))

(assert (= (and b!95649 res!48332) b!95653))

(assert (= (and b!95653 res!48335) b!95637))

(assert (= (and b!95637 res!48334) b!95654))

(assert (= (and b!95654 c!16066) b!95643))

(assert (= (and b!95654 (not c!16066)) b!95641))

(assert (= (and b!95654 res!48338) b!95651))

(assert (= (and b!95651 res!48336) b!95652))

(assert (= (and b!95636 condMapEmpty!3701) mapIsEmpty!3702))

(assert (= (and b!95636 (not condMapEmpty!3701)) mapNonEmpty!3701))

(get-info :version)

(assert (= (and mapNonEmpty!3701 ((_ is ValueCellFull!966) mapValue!3702)) b!95650))

(assert (= (and b!95636 ((_ is ValueCellFull!966) mapDefault!3702)) b!95646))

(assert (= b!95640 b!95636))

(assert (= b!95642 b!95640))

(assert (= b!95645 b!95642))

(assert (= start!11498 b!95645))

(assert (= (and b!95647 condMapEmpty!3702) mapIsEmpty!3701))

(assert (= (and b!95647 (not condMapEmpty!3702)) mapNonEmpty!3702))

(assert (= (and mapNonEmpty!3702 ((_ is ValueCellFull!966) mapValue!3701)) b!95644))

(assert (= (and b!95647 ((_ is ValueCellFull!966) mapDefault!3701)) b!95648))

(assert (= b!95639 b!95647))

(assert (= start!11498 b!95639))

(declare-fun b_lambda!4233 () Bool)

(assert (=> (not b_lambda!4233) (not b!95654)))

(declare-fun t!5492 () Bool)

(declare-fun tb!1889 () Bool)

(assert (=> (and b!95640 (= (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) (defaultEntry!2457 (v!2778 (underlying!331 thiss!992)))) t!5492) tb!1889))

(declare-fun result!3215 () Bool)

(assert (=> tb!1889 (= result!3215 tp_is_empty!2619)))

(assert (=> b!95654 t!5492))

(declare-fun b_and!5851 () Bool)

(assert (= b_and!5847 (and (=> t!5492 result!3215) b_and!5851)))

(declare-fun t!5494 () Bool)

(declare-fun tb!1891 () Bool)

(assert (=> (and b!95639 (= (defaultEntry!2457 newMap!16) (defaultEntry!2457 (v!2778 (underlying!331 thiss!992)))) t!5494) tb!1891))

(declare-fun result!3219 () Bool)

(assert (= result!3219 result!3215))

(assert (=> b!95654 t!5494))

(declare-fun b_and!5853 () Bool)

(assert (= b_and!5849 (and (=> t!5494 result!3219) b_and!5853)))

(declare-fun m!103853 () Bool)

(assert (=> mapNonEmpty!3702 m!103853))

(declare-fun m!103855 () Bool)

(assert (=> mapNonEmpty!3701 m!103855))

(declare-fun m!103857 () Bool)

(assert (=> b!95643 m!103857))

(declare-fun m!103859 () Bool)

(assert (=> b!95643 m!103859))

(declare-fun m!103861 () Bool)

(assert (=> b!95643 m!103861))

(declare-fun m!103863 () Bool)

(assert (=> b!95643 m!103863))

(assert (=> b!95643 m!103861))

(assert (=> b!95643 m!103861))

(declare-fun m!103865 () Bool)

(assert (=> b!95643 m!103865))

(assert (=> b!95643 m!103861))

(declare-fun m!103867 () Bool)

(assert (=> b!95643 m!103867))

(declare-fun m!103869 () Bool)

(assert (=> b!95651 m!103869))

(declare-fun m!103871 () Bool)

(assert (=> b!95639 m!103871))

(declare-fun m!103873 () Bool)

(assert (=> b!95639 m!103873))

(declare-fun m!103875 () Bool)

(assert (=> start!11498 m!103875))

(assert (=> b!95654 m!103861))

(declare-fun m!103877 () Bool)

(assert (=> b!95654 m!103877))

(declare-fun m!103879 () Bool)

(assert (=> b!95654 m!103879))

(declare-fun m!103881 () Bool)

(assert (=> b!95654 m!103881))

(declare-fun m!103883 () Bool)

(assert (=> b!95654 m!103883))

(assert (=> b!95654 m!103861))

(assert (=> b!95654 m!103881))

(assert (=> b!95654 m!103861))

(assert (=> b!95654 m!103883))

(declare-fun m!103885 () Bool)

(assert (=> b!95654 m!103885))

(assert (=> b!95654 m!103879))

(declare-fun m!103887 () Bool)

(assert (=> b!95640 m!103887))

(declare-fun m!103889 () Bool)

(assert (=> b!95640 m!103889))

(declare-fun m!103891 () Bool)

(assert (=> b!95649 m!103891))

(assert (=> b!95637 m!103861))

(declare-fun m!103893 () Bool)

(assert (=> b!95637 m!103893))

(declare-fun m!103895 () Bool)

(assert (=> b!95637 m!103895))

(check-sat (not b!95640) (not b!95643) (not b!95654) (not mapNonEmpty!3701) (not mapNonEmpty!3702) b_and!5853 (not start!11498) (not b!95639) tp_is_empty!2619 (not b_lambda!4233) (not b!95649) b_and!5851 (not b!95637) (not b_next!2405) (not b!95651) (not b_next!2407))
(check-sat b_and!5851 b_and!5853 (not b_next!2405) (not b_next!2407))
(get-model)

(declare-fun b_lambda!4237 () Bool)

(assert (= b_lambda!4233 (or (and b!95640 b_free!2405) (and b!95639 b_free!2407 (= (defaultEntry!2457 newMap!16) (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))))) b_lambda!4237)))

(check-sat (not b!95640) (not b!95643) (not b!95654) (not mapNonEmpty!3701) (not b_lambda!4237) (not mapNonEmpty!3702) b_and!5853 (not start!11498) (not b!95639) tp_is_empty!2619 (not b!95649) b_and!5851 (not b!95637) (not b_next!2405) (not b!95651) (not b_next!2407))
(check-sat b_and!5851 b_and!5853 (not b_next!2405) (not b_next!2407))
(get-model)

(declare-fun d!25267 () Bool)

(assert (=> d!25267 (= (validMask!0 (mask!6542 (v!2778 (underlying!331 thiss!992)))) (and (or (= (mask!6542 (v!2778 (underlying!331 thiss!992))) #b00000000000000000000000000000111) (= (mask!6542 (v!2778 (underlying!331 thiss!992))) #b00000000000000000000000000001111) (= (mask!6542 (v!2778 (underlying!331 thiss!992))) #b00000000000000000000000000011111) (= (mask!6542 (v!2778 (underlying!331 thiss!992))) #b00000000000000000000000000111111) (= (mask!6542 (v!2778 (underlying!331 thiss!992))) #b00000000000000000000000001111111) (= (mask!6542 (v!2778 (underlying!331 thiss!992))) #b00000000000000000000000011111111) (= (mask!6542 (v!2778 (underlying!331 thiss!992))) #b00000000000000000000000111111111) (= (mask!6542 (v!2778 (underlying!331 thiss!992))) #b00000000000000000000001111111111) (= (mask!6542 (v!2778 (underlying!331 thiss!992))) #b00000000000000000000011111111111) (= (mask!6542 (v!2778 (underlying!331 thiss!992))) #b00000000000000000000111111111111) (= (mask!6542 (v!2778 (underlying!331 thiss!992))) #b00000000000000000001111111111111) (= (mask!6542 (v!2778 (underlying!331 thiss!992))) #b00000000000000000011111111111111) (= (mask!6542 (v!2778 (underlying!331 thiss!992))) #b00000000000000000111111111111111) (= (mask!6542 (v!2778 (underlying!331 thiss!992))) #b00000000000000001111111111111111) (= (mask!6542 (v!2778 (underlying!331 thiss!992))) #b00000000000000011111111111111111) (= (mask!6542 (v!2778 (underlying!331 thiss!992))) #b00000000000000111111111111111111) (= (mask!6542 (v!2778 (underlying!331 thiss!992))) #b00000000000001111111111111111111) (= (mask!6542 (v!2778 (underlying!331 thiss!992))) #b00000000000011111111111111111111) (= (mask!6542 (v!2778 (underlying!331 thiss!992))) #b00000000000111111111111111111111) (= (mask!6542 (v!2778 (underlying!331 thiss!992))) #b00000000001111111111111111111111) (= (mask!6542 (v!2778 (underlying!331 thiss!992))) #b00000000011111111111111111111111) (= (mask!6542 (v!2778 (underlying!331 thiss!992))) #b00000000111111111111111111111111) (= (mask!6542 (v!2778 (underlying!331 thiss!992))) #b00000001111111111111111111111111) (= (mask!6542 (v!2778 (underlying!331 thiss!992))) #b00000011111111111111111111111111) (= (mask!6542 (v!2778 (underlying!331 thiss!992))) #b00000111111111111111111111111111) (= (mask!6542 (v!2778 (underlying!331 thiss!992))) #b00001111111111111111111111111111) (= (mask!6542 (v!2778 (underlying!331 thiss!992))) #b00011111111111111111111111111111) (= (mask!6542 (v!2778 (underlying!331 thiss!992))) #b00111111111111111111111111111111)) (bvsle (mask!6542 (v!2778 (underlying!331 thiss!992))) #b00111111111111111111111111111111)))))

(assert (=> b!95651 d!25267))

(declare-fun d!25269 () Bool)

(assert (=> d!25269 (= (array_inv!1249 (_keys!4143 newMap!16)) (bvsge (size!2252 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!95639 d!25269))

(declare-fun d!25271 () Bool)

(assert (=> d!25271 (= (array_inv!1250 (_values!2440 newMap!16)) (bvsge (size!2253 (_values!2440 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!95639 d!25271))

(declare-fun d!25273 () Bool)

(assert (=> d!25273 (= (array_inv!1249 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvsge (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!95640 d!25273))

(declare-fun d!25275 () Bool)

(assert (=> d!25275 (= (array_inv!1250 (_values!2440 (v!2778 (underlying!331 thiss!992)))) (bvsge (size!2253 (_values!2440 (v!2778 (underlying!331 thiss!992)))) #b00000000000000000000000000000000))))

(assert (=> b!95640 d!25275))

(declare-fun d!25277 () Bool)

(declare-fun e!62464 () Bool)

(assert (=> d!25277 e!62464))

(declare-fun res!48362 () Bool)

(assert (=> d!25277 (=> res!48362 e!62464)))

(declare-fun lt!47676 () Bool)

(assert (=> d!25277 (= res!48362 (not lt!47676))))

(declare-fun lt!47675 () Bool)

(assert (=> d!25277 (= lt!47676 lt!47675)))

(declare-fun lt!47677 () Unit!2864)

(declare-fun e!62465 () Unit!2864)

(assert (=> d!25277 (= lt!47677 e!62465)))

(declare-fun c!16072 () Bool)

(assert (=> d!25277 (= c!16072 lt!47675)))

(declare-fun containsKey!153 (List!1573 (_ BitVec 64)) Bool)

(assert (=> d!25277 (= lt!47675 (containsKey!153 (toList!779 lt!47639) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(assert (=> d!25277 (= (contains!794 lt!47639 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) lt!47676)))

(declare-fun b!95722 () Bool)

(declare-fun lt!47678 () Unit!2864)

(assert (=> b!95722 (= e!62465 lt!47678)))

(declare-fun lemmaContainsKeyImpliesGetValueByKeyDefined!101 (List!1573 (_ BitVec 64)) Unit!2864)

(assert (=> b!95722 (= lt!47678 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 lt!47639) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(declare-datatypes ((Option!155 0))(
  ( (Some!154 (v!2782 V!3139)) (None!153) )
))
(declare-fun isDefined!102 (Option!155) Bool)

(declare-fun getValueByKey!149 (List!1573 (_ BitVec 64)) Option!155)

(assert (=> b!95722 (isDefined!102 (getValueByKey!149 (toList!779 lt!47639) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(declare-fun b!95723 () Bool)

(declare-fun Unit!2871 () Unit!2864)

(assert (=> b!95723 (= e!62465 Unit!2871)))

(declare-fun b!95724 () Bool)

(assert (=> b!95724 (= e!62464 (isDefined!102 (getValueByKey!149 (toList!779 lt!47639) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355))))))

(assert (= (and d!25277 c!16072) b!95722))

(assert (= (and d!25277 (not c!16072)) b!95723))

(assert (= (and d!25277 (not res!48362)) b!95724))

(assert (=> d!25277 m!103861))

(declare-fun m!103941 () Bool)

(assert (=> d!25277 m!103941))

(assert (=> b!95722 m!103861))

(declare-fun m!103943 () Bool)

(assert (=> b!95722 m!103943))

(assert (=> b!95722 m!103861))

(declare-fun m!103945 () Bool)

(assert (=> b!95722 m!103945))

(assert (=> b!95722 m!103945))

(declare-fun m!103947 () Bool)

(assert (=> b!95722 m!103947))

(assert (=> b!95724 m!103861))

(assert (=> b!95724 m!103945))

(assert (=> b!95724 m!103945))

(assert (=> b!95724 m!103947))

(assert (=> b!95654 d!25277))

(declare-fun b!95805 () Bool)

(declare-fun c!16106 () Bool)

(declare-datatypes ((SeekEntryResult!252 0))(
  ( (MissingZero!252 (index!3150 (_ BitVec 32))) (Found!252 (index!3151 (_ BitVec 32))) (Intermediate!252 (undefined!1064 Bool) (index!3152 (_ BitVec 32)) (x!12800 (_ BitVec 32))) (Undefined!252) (MissingVacant!252 (index!3153 (_ BitVec 32))) )
))
(declare-fun lt!47759 () SeekEntryResult!252)

(assert (=> b!95805 (= c!16106 ((_ is MissingVacant!252) lt!47759))))

(declare-fun e!62518 () tuple2!2324)

(declare-fun e!62522 () tuple2!2324)

(assert (=> b!95805 (= e!62518 e!62522)))

(declare-fun bm!9661 () Bool)

(declare-fun c!16102 () Bool)

(declare-fun call!9674 () ListLongMap!1527)

(declare-fun lt!47750 () (_ BitVec 32))

(declare-fun lt!47748 () array!4217)

(declare-fun c!16108 () Bool)

(assert (=> bm!9661 (= call!9674 (getCurrentListMap!470 (_keys!4143 newMap!16) (ite c!16102 (_values!2440 newMap!16) lt!47748) (mask!6542 newMap!16) (ite c!16102 (ite c!16108 (extraKeys!2282 newMap!16) lt!47750) (extraKeys!2282 newMap!16)) (zeroValue!2342 newMap!16) (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun b!95806 () Bool)

(declare-fun e!62513 () ListLongMap!1527)

(declare-fun call!9666 () ListLongMap!1527)

(assert (=> b!95806 (= e!62513 call!9666)))

(declare-fun b!95807 () Bool)

(declare-fun lt!47741 () Unit!2864)

(declare-fun lt!47747 () Unit!2864)

(assert (=> b!95807 (= lt!47741 lt!47747)))

(declare-fun call!9671 () ListLongMap!1527)

(declare-fun call!9664 () ListLongMap!1527)

(assert (=> b!95807 (= call!9671 call!9664)))

(declare-fun lemmaChangeLongMinValueKeyThenAddPairToListMap!40 (array!4215 array!4217 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 V!3139 Int) Unit!2864)

(assert (=> b!95807 (= lt!47747 (lemmaChangeLongMinValueKeyThenAddPairToListMap!40 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) lt!47750 (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2457 newMap!16)))))

(assert (=> b!95807 (= lt!47750 (bvor (extraKeys!2282 newMap!16) #b00000000000000000000000000000010))))

(declare-fun e!62528 () tuple2!2324)

(assert (=> b!95807 (= e!62528 (tuple2!2325 true (LongMapFixedSize!841 (defaultEntry!2457 newMap!16) (mask!6542 newMap!16) (bvor (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) (zeroValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (_size!469 newMap!16) (_keys!4143 newMap!16) (_values!2440 newMap!16) (_vacant!469 newMap!16))))))

(declare-fun bm!9662 () Bool)

(declare-fun call!9678 () ListLongMap!1527)

(assert (=> bm!9662 (= call!9666 call!9678)))

(declare-fun bm!9663 () Bool)

(declare-fun call!9679 () ListLongMap!1527)

(declare-fun lt!47744 () tuple2!2324)

(assert (=> bm!9663 (= call!9679 (map!1247 (_2!1173 lt!47744)))))

(declare-fun bm!9664 () Bool)

(declare-fun call!9682 () ListLongMap!1527)

(assert (=> bm!9664 (= call!9682 call!9678)))

(declare-fun lt!47733 () SeekEntryResult!252)

(declare-fun c!16103 () Bool)

(declare-fun call!9683 () Bool)

(declare-fun bm!9666 () Bool)

(declare-fun c!16109 () Bool)

(declare-fun lt!47737 () SeekEntryResult!252)

(declare-fun c!16111 () Bool)

(declare-fun lt!47743 () SeekEntryResult!252)

(declare-fun c!16099 () Bool)

(declare-fun lt!47749 () SeekEntryResult!252)

(declare-fun c!16105 () Bool)

(declare-fun inRange!0 ((_ BitVec 32) (_ BitVec 32)) Bool)

(assert (=> bm!9666 (= call!9683 (inRange!0 (ite c!16103 (ite c!16111 (index!3151 lt!47743) (ite c!16109 (index!3150 lt!47737) (index!3153 lt!47737))) (ite c!16099 (index!3151 lt!47733) (ite c!16105 (index!3150 lt!47749) (index!3153 lt!47749)))) (mask!6542 newMap!16)))))

(declare-fun b!95808 () Bool)

(declare-fun e!62509 () Bool)

(declare-fun call!9665 () ListLongMap!1527)

(assert (=> b!95808 (= e!62509 (= call!9679 call!9665))))

(declare-fun bm!9667 () Bool)

(declare-fun c!16100 () Bool)

(assert (=> bm!9667 (= c!16100 c!16103)))

(declare-fun call!9685 () Bool)

(assert (=> bm!9667 (= call!9685 (contains!794 e!62513 (ite c!16103 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (select (arr!2003 (_keys!4143 newMap!16)) (index!3151 lt!47759)))))))

(declare-fun call!9676 () Bool)

(declare-fun bm!9668 () Bool)

(assert (=> bm!9668 (= call!9676 (arrayContainsKey!0 (_keys!4143 newMap!16) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!95809 () Bool)

(declare-fun e!62519 () Unit!2864)

(declare-fun Unit!2872 () Unit!2864)

(assert (=> b!95809 (= e!62519 Unit!2872)))

(declare-fun lt!47754 () Unit!2864)

(declare-fun call!9684 () Unit!2864)

(assert (=> b!95809 (= lt!47754 call!9684)))

(declare-fun call!9675 () SeekEntryResult!252)

(assert (=> b!95809 (= lt!47743 call!9675)))

(declare-fun res!48403 () Bool)

(assert (=> b!95809 (= res!48403 ((_ is Found!252) lt!47743))))

(declare-fun e!62514 () Bool)

(assert (=> b!95809 (=> (not res!48403) (not e!62514))))

(assert (=> b!95809 e!62514))

(declare-fun lt!47746 () Unit!2864)

(assert (=> b!95809 (= lt!47746 lt!47754)))

(assert (=> b!95809 false))

(declare-fun bm!9669 () Bool)

(assert (=> bm!9669 (= call!9664 call!9674)))

(declare-fun b!95810 () Bool)

(declare-fun e!62523 () Bool)

(assert (=> b!95810 (= e!62523 e!62509)))

(declare-fun c!16110 () Bool)

(assert (=> b!95810 (= c!16110 (_1!1173 lt!47744))))

(declare-fun bm!9670 () Bool)

(declare-fun call!9672 () Bool)

(declare-fun call!9668 () Bool)

(assert (=> bm!9670 (= call!9672 call!9668)))

(declare-fun b!95811 () Bool)

(declare-fun c!16104 () Bool)

(assert (=> b!95811 (= c!16104 ((_ is MissingVacant!252) lt!47737))))

(declare-fun e!62525 () Bool)

(declare-fun e!62526 () Bool)

(assert (=> b!95811 (= e!62525 e!62526)))

(declare-fun bm!9671 () Bool)

(declare-fun call!9680 () Bool)

(assert (=> bm!9671 (= call!9680 call!9676)))

(declare-fun bm!9672 () Bool)

(declare-fun call!9673 () ListLongMap!1527)

(declare-fun +!134 (ListLongMap!1527 tuple2!2322) ListLongMap!1527)

(assert (=> bm!9672 (= call!9673 (+!134 (ite c!16102 (ite c!16108 call!9664 call!9682) call!9666) (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!95812 () Bool)

(declare-fun res!48391 () Bool)

(declare-fun e!62510 () Bool)

(assert (=> b!95812 (=> (not res!48391) (not e!62510))))

(assert (=> b!95812 (= res!48391 (= (select (arr!2003 (_keys!4143 newMap!16)) (index!3150 lt!47737)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!95813 () Bool)

(declare-fun e!62524 () Bool)

(assert (=> b!95813 (= e!62509 e!62524)))

(declare-fun res!48404 () Bool)

(assert (=> b!95813 (= res!48404 (contains!794 call!9679 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(assert (=> b!95813 (=> (not res!48404) (not e!62524))))

(declare-fun bm!9673 () Bool)

(declare-fun call!9667 () Unit!2864)

(declare-fun lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!40 (array!4215 array!4217 (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 (_ BitVec 64) Int) Unit!2864)

(assert (=> bm!9673 (= call!9667 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!40 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (defaultEntry!2457 newMap!16)))))

(declare-fun b!95814 () Bool)

(declare-fun e!62516 () Bool)

(assert (=> b!95814 (= e!62526 e!62516)))

(declare-fun res!48397 () Bool)

(declare-fun call!9686 () Bool)

(assert (=> b!95814 (= res!48397 call!9686)))

(assert (=> b!95814 (=> (not res!48397) (not e!62516))))

(declare-fun bm!9674 () Bool)

(declare-fun call!9687 () Bool)

(assert (=> bm!9674 (= call!9686 call!9687)))

(declare-fun b!95815 () Bool)

(declare-fun res!48396 () Bool)

(assert (=> b!95815 (= res!48396 call!9687)))

(assert (=> b!95815 (=> (not res!48396) (not e!62514))))

(declare-fun b!95816 () Bool)

(declare-fun lt!47739 () Unit!2864)

(assert (=> b!95816 (= e!62519 lt!47739)))

(assert (=> b!95816 (= lt!47739 call!9667)))

(assert (=> b!95816 (= lt!47737 call!9675)))

(assert (=> b!95816 (= c!16109 ((_ is MissingZero!252) lt!47737))))

(assert (=> b!95816 e!62525))

(declare-fun bm!9675 () Bool)

(assert (=> bm!9675 (= call!9665 (map!1247 newMap!16))))

(declare-fun b!95817 () Bool)

(declare-fun e!62521 () Bool)

(declare-fun call!9670 () Bool)

(assert (=> b!95817 (= e!62521 (not call!9670))))

(declare-fun b!95818 () Bool)

(assert (=> b!95818 (= e!62510 (not call!9680))))

(declare-fun bm!9676 () Bool)

(declare-fun lt!47752 () (_ BitVec 32))

(assert (=> bm!9676 (= call!9678 (getCurrentListMap!470 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (ite (and c!16102 c!16108) lt!47752 (extraKeys!2282 newMap!16)) (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun bm!9677 () Bool)

(declare-fun call!9677 () SeekEntryResult!252)

(declare-fun call!9681 () SeekEntryResult!252)

(assert (=> bm!9677 (= call!9677 call!9681)))

(declare-fun bm!9678 () Bool)

(declare-fun lemmaInListMapThenSeekEntryOrOpenFindsIt!40 (array!4215 array!4217 (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 (_ BitVec 64) Int) Unit!2864)

(assert (=> bm!9678 (= call!9684 (lemmaInListMapThenSeekEntryOrOpenFindsIt!40 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (defaultEntry!2457 newMap!16)))))

(declare-fun bm!9679 () Bool)

(declare-fun call!9669 () tuple2!2324)

(declare-fun updateHelperNewKey!40 (LongMapFixedSize!840 (_ BitVec 64) V!3139 (_ BitVec 32)) tuple2!2324)

(assert (=> bm!9679 (= call!9669 (updateHelperNewKey!40 newMap!16 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759))))))

(declare-fun b!95819 () Bool)

(declare-fun e!62511 () Bool)

(declare-fun e!62508 () Bool)

(assert (=> b!95819 (= e!62511 e!62508)))

(declare-fun res!48401 () Bool)

(assert (=> b!95819 (= res!48401 call!9672)))

(assert (=> b!95819 (=> (not res!48401) (not e!62508))))

(declare-fun b!95820 () Bool)

(declare-fun e!62527 () tuple2!2324)

(assert (=> b!95820 (= e!62527 e!62528)))

(assert (=> b!95820 (= c!16108 (= (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!95821 () Bool)

(declare-fun lt!47738 () tuple2!2324)

(assert (=> b!95821 (= lt!47738 call!9669)))

(declare-fun e!62517 () tuple2!2324)

(assert (=> b!95821 (= e!62517 (tuple2!2325 (_1!1173 lt!47738) (_2!1173 lt!47738)))))

(declare-fun b!95822 () Bool)

(assert (=> b!95822 (= e!62511 ((_ is Undefined!252) lt!47749))))

(declare-fun b!95823 () Bool)

(assert (=> b!95823 (= e!62522 e!62517)))

(declare-fun c!16101 () Bool)

(assert (=> b!95823 (= c!16101 ((_ is MissingZero!252) lt!47759))))

(declare-fun b!95824 () Bool)

(assert (=> b!95824 (= e!62513 call!9674)))

(declare-fun b!95825 () Bool)

(assert (=> b!95825 (= e!62526 ((_ is Undefined!252) lt!47737))))

(declare-fun b!95826 () Bool)

(declare-fun e!62512 () Unit!2864)

(declare-fun Unit!2873 () Unit!2864)

(assert (=> b!95826 (= e!62512 Unit!2873)))

(declare-fun lt!47735 () Unit!2864)

(assert (=> b!95826 (= lt!47735 call!9667)))

(assert (=> b!95826 (= lt!47749 call!9677)))

(assert (=> b!95826 (= c!16105 ((_ is MissingZero!252) lt!47749))))

(declare-fun e!62515 () Bool)

(assert (=> b!95826 e!62515))

(declare-fun lt!47734 () Unit!2864)

(assert (=> b!95826 (= lt!47734 lt!47735)))

(assert (=> b!95826 false))

(declare-fun bm!9680 () Bool)

(declare-fun seekEntryOrOpen!0 ((_ BitVec 64) array!4215 (_ BitVec 32)) SeekEntryResult!252)

(assert (=> bm!9680 (= call!9681 (seekEntryOrOpen!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (_keys!4143 newMap!16) (mask!6542 newMap!16)))))

(declare-fun b!95827 () Bool)

(declare-fun res!48400 () Bool)

(assert (=> b!95827 (= res!48400 (= (select (arr!2003 (_keys!4143 newMap!16)) (index!3153 lt!47749)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!95827 (=> (not res!48400) (not e!62508))))

(declare-fun b!95828 () Bool)

(declare-fun lt!47753 () Unit!2864)

(declare-fun lt!47756 () Unit!2864)

(assert (=> b!95828 (= lt!47753 lt!47756)))

(assert (=> b!95828 call!9685))

(declare-fun lemmaValidKeyInArrayIsInListMap!101 (array!4215 array!4217 (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 (_ BitVec 32) Int) Unit!2864)

(assert (=> b!95828 (= lt!47756 (lemmaValidKeyInArrayIsInListMap!101 (_keys!4143 newMap!16) lt!47748 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (index!3151 lt!47759) (defaultEntry!2457 newMap!16)))))

(assert (=> b!95828 (= lt!47748 (array!4218 (store (arr!2004 (_values!2440 newMap!16)) (index!3151 lt!47759) (ValueCellFull!966 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2253 (_values!2440 newMap!16))))))

(declare-fun lt!47740 () Unit!2864)

(declare-fun lt!47742 () Unit!2864)

(assert (=> b!95828 (= lt!47740 lt!47742)))

(assert (=> b!95828 (= call!9673 (getCurrentListMap!470 (_keys!4143 newMap!16) (array!4218 (store (arr!2004 (_values!2440 newMap!16)) (index!3151 lt!47759) (ValueCellFull!966 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2253 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!40 (array!4215 array!4217 (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 (_ BitVec 32) (_ BitVec 64) V!3139 Int) Unit!2864)

(assert (=> b!95828 (= lt!47742 (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!40 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (index!3151 lt!47759) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2457 newMap!16)))))

(declare-fun lt!47745 () Unit!2864)

(assert (=> b!95828 (= lt!47745 e!62512)))

(assert (=> b!95828 (= c!16099 (contains!794 call!9666 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(assert (=> b!95828 (= e!62517 (tuple2!2325 true (LongMapFixedSize!841 (defaultEntry!2457 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (_size!469 newMap!16) (_keys!4143 newMap!16) (array!4218 (store (arr!2004 (_values!2440 newMap!16)) (index!3151 lt!47759) (ValueCellFull!966 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2253 (_values!2440 newMap!16))) (_vacant!469 newMap!16))))))

(declare-fun b!95829 () Bool)

(assert (=> b!95829 (= e!62527 e!62518)))

(assert (=> b!95829 (= lt!47759 (seekEntryOrOpen!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (_keys!4143 newMap!16) (mask!6542 newMap!16)))))

(assert (=> b!95829 (= c!16103 ((_ is Undefined!252) lt!47759))))

(declare-fun bm!9681 () Bool)

(assert (=> bm!9681 (= call!9675 call!9681)))

(declare-fun bm!9682 () Bool)

(assert (=> bm!9682 (= call!9687 call!9683)))

(declare-fun b!95830 () Bool)

(assert (=> b!95830 (= e!62508 (not call!9670))))

(declare-fun b!95831 () Bool)

(declare-fun res!48393 () Bool)

(assert (=> b!95831 (=> (not res!48393) (not e!62510))))

(assert (=> b!95831 (= res!48393 call!9686)))

(assert (=> b!95831 (= e!62525 e!62510)))

(declare-fun b!95832 () Bool)

(declare-fun res!48402 () Bool)

(assert (=> b!95832 (=> (not res!48402) (not e!62521))))

(assert (=> b!95832 (= res!48402 call!9672)))

(assert (=> b!95832 (= e!62515 e!62521)))

(declare-fun b!95833 () Bool)

(declare-fun res!48392 () Bool)

(assert (=> b!95833 (=> (not res!48392) (not e!62521))))

(assert (=> b!95833 (= res!48392 (= (select (arr!2003 (_keys!4143 newMap!16)) (index!3150 lt!47749)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!95834 () Bool)

(declare-fun lt!47757 () Unit!2864)

(declare-fun lt!47751 () Unit!2864)

(assert (=> b!95834 (= lt!47757 lt!47751)))

(assert (=> b!95834 (= call!9671 call!9682)))

(declare-fun lemmaChangeZeroKeyThenAddPairToListMap!40 (array!4215 array!4217 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 V!3139 Int) Unit!2864)

(assert (=> b!95834 (= lt!47751 (lemmaChangeZeroKeyThenAddPairToListMap!40 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) lt!47752 (zeroValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2342 newMap!16) (defaultEntry!2457 newMap!16)))))

(assert (=> b!95834 (= lt!47752 (bvor (extraKeys!2282 newMap!16) #b00000000000000000000000000000001))))

(assert (=> b!95834 (= e!62528 (tuple2!2325 true (LongMapFixedSize!841 (defaultEntry!2457 newMap!16) (mask!6542 newMap!16) (bvor (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2342 newMap!16) (_size!469 newMap!16) (_keys!4143 newMap!16) (_values!2440 newMap!16) (_vacant!469 newMap!16))))))

(declare-fun b!95835 () Bool)

(assert (=> b!95835 (= e!62514 (= (select (arr!2003 (_keys!4143 newMap!16)) (index!3151 lt!47743)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(declare-fun b!95836 () Bool)

(declare-fun lt!47755 () tuple2!2324)

(assert (=> b!95836 (= e!62522 (tuple2!2325 (_1!1173 lt!47755) (_2!1173 lt!47755)))))

(assert (=> b!95836 (= lt!47755 call!9669)))

(declare-fun b!95837 () Bool)

(declare-fun c!16107 () Bool)

(assert (=> b!95837 (= c!16107 ((_ is MissingVacant!252) lt!47749))))

(assert (=> b!95837 (= e!62515 e!62511)))

(declare-fun bm!9683 () Bool)

(assert (=> bm!9683 (= call!9668 call!9683)))

(declare-fun b!95838 () Bool)

(declare-fun res!48399 () Bool)

(assert (=> b!95838 (= res!48399 (= (select (arr!2003 (_keys!4143 newMap!16)) (index!3153 lt!47737)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!95838 (=> (not res!48399) (not e!62516))))

(declare-fun b!95839 () Bool)

(declare-fun e!62520 () Bool)

(assert (=> b!95839 (= e!62520 (= (select (arr!2003 (_keys!4143 newMap!16)) (index!3151 lt!47733)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(declare-fun b!95840 () Bool)

(declare-fun lt!47736 () Unit!2864)

(assert (=> b!95840 (= e!62512 lt!47736)))

(assert (=> b!95840 (= lt!47736 call!9684)))

(assert (=> b!95840 (= lt!47733 call!9677)))

(declare-fun res!48398 () Bool)

(assert (=> b!95840 (= res!48398 ((_ is Found!252) lt!47733))))

(assert (=> b!95840 (=> (not res!48398) (not e!62520))))

(assert (=> b!95840 e!62520))

(declare-fun b!95841 () Bool)

(declare-fun lt!47758 () Unit!2864)

(assert (=> b!95841 (= lt!47758 e!62519)))

(assert (=> b!95841 (= c!16111 call!9685)))

(assert (=> b!95841 (= e!62518 (tuple2!2325 false newMap!16))))

(declare-fun bm!9684 () Bool)

(assert (=> bm!9684 (= call!9670 call!9676)))

(declare-fun b!95842 () Bool)

(declare-fun res!48394 () Bool)

(assert (=> b!95842 (= res!48394 call!9668)))

(assert (=> b!95842 (=> (not res!48394) (not e!62520))))

(declare-fun b!95843 () Bool)

(assert (=> b!95843 (= e!62516 (not call!9680))))

(declare-fun b!95844 () Bool)

(assert (=> b!95844 (= e!62524 (= call!9679 (+!134 call!9665 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun d!25279 () Bool)

(assert (=> d!25279 e!62523))

(declare-fun res!48395 () Bool)

(assert (=> d!25279 (=> (not res!48395) (not e!62523))))

(assert (=> d!25279 (= res!48395 (valid!379 (_2!1173 lt!47744)))))

(assert (=> d!25279 (= lt!47744 e!62527)))

(assert (=> d!25279 (= c!16102 (= (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (bvneg (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355))))))

(assert (=> d!25279 (valid!379 newMap!16)))

(assert (=> d!25279 (= (update!136 newMap!16 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) lt!47744)))

(declare-fun bm!9665 () Bool)

(assert (=> bm!9665 (= call!9671 call!9673)))

(assert (= (and d!25279 c!16102) b!95820))

(assert (= (and d!25279 (not c!16102)) b!95829))

(assert (= (and b!95820 c!16108) b!95834))

(assert (= (and b!95820 (not c!16108)) b!95807))

(assert (= (or b!95834 b!95807) bm!9669))

(assert (= (or b!95834 b!95807) bm!9664))

(assert (= (or b!95834 b!95807) bm!9665))

(assert (= (and b!95829 c!16103) b!95841))

(assert (= (and b!95829 (not c!16103)) b!95805))

(assert (= (and b!95841 c!16111) b!95809))

(assert (= (and b!95841 (not c!16111)) b!95816))

(assert (= (and b!95809 res!48403) b!95815))

(assert (= (and b!95815 res!48396) b!95835))

(assert (= (and b!95816 c!16109) b!95831))

(assert (= (and b!95816 (not c!16109)) b!95811))

(assert (= (and b!95831 res!48393) b!95812))

(assert (= (and b!95812 res!48391) b!95818))

(assert (= (and b!95811 c!16104) b!95814))

(assert (= (and b!95811 (not c!16104)) b!95825))

(assert (= (and b!95814 res!48397) b!95838))

(assert (= (and b!95838 res!48399) b!95843))

(assert (= (or b!95831 b!95814) bm!9674))

(assert (= (or b!95818 b!95843) bm!9671))

(assert (= (or b!95815 bm!9674) bm!9682))

(assert (= (or b!95809 b!95816) bm!9681))

(assert (= (and b!95805 c!16106) b!95836))

(assert (= (and b!95805 (not c!16106)) b!95823))

(assert (= (and b!95823 c!16101) b!95821))

(assert (= (and b!95823 (not c!16101)) b!95828))

(assert (= (and b!95828 c!16099) b!95840))

(assert (= (and b!95828 (not c!16099)) b!95826))

(assert (= (and b!95840 res!48398) b!95842))

(assert (= (and b!95842 res!48394) b!95839))

(assert (= (and b!95826 c!16105) b!95832))

(assert (= (and b!95826 (not c!16105)) b!95837))

(assert (= (and b!95832 res!48402) b!95833))

(assert (= (and b!95833 res!48392) b!95817))

(assert (= (and b!95837 c!16107) b!95819))

(assert (= (and b!95837 (not c!16107)) b!95822))

(assert (= (and b!95819 res!48401) b!95827))

(assert (= (and b!95827 res!48400) b!95830))

(assert (= (or b!95832 b!95819) bm!9670))

(assert (= (or b!95817 b!95830) bm!9684))

(assert (= (or b!95842 bm!9670) bm!9683))

(assert (= (or b!95840 b!95826) bm!9677))

(assert (= (or b!95836 b!95821) bm!9679))

(assert (= (or b!95809 b!95840) bm!9678))

(assert (= (or bm!9681 bm!9677) bm!9680))

(assert (= (or b!95816 b!95826) bm!9673))

(assert (= (or bm!9682 bm!9683) bm!9666))

(assert (= (or bm!9671 bm!9684) bm!9668))

(assert (= (or b!95841 b!95828) bm!9662))

(assert (= (or b!95841 b!95828) bm!9667))

(assert (= (and bm!9667 c!16100) b!95806))

(assert (= (and bm!9667 (not c!16100)) b!95824))

(assert (= (or bm!9664 bm!9662) bm!9676))

(assert (= (or bm!9669 b!95824) bm!9661))

(assert (= (or bm!9665 b!95828) bm!9672))

(assert (= (and d!25279 res!48395) b!95810))

(assert (= (and b!95810 c!16110) b!95813))

(assert (= (and b!95810 (not c!16110)) b!95808))

(assert (= (and b!95813 res!48404) b!95844))

(assert (= (or b!95844 b!95808) bm!9675))

(assert (= (or b!95813 b!95844 b!95808) bm!9663))

(declare-fun m!103949 () Bool)

(assert (=> b!95835 m!103949))

(declare-fun m!103951 () Bool)

(assert (=> b!95812 m!103951))

(assert (=> bm!9673 m!103861))

(declare-fun m!103953 () Bool)

(assert (=> bm!9673 m!103953))

(declare-fun m!103955 () Bool)

(assert (=> b!95838 m!103955))

(assert (=> b!95828 m!103861))

(declare-fun m!103957 () Bool)

(assert (=> b!95828 m!103957))

(declare-fun m!103959 () Bool)

(assert (=> b!95828 m!103959))

(declare-fun m!103961 () Bool)

(assert (=> b!95828 m!103961))

(declare-fun m!103963 () Bool)

(assert (=> b!95828 m!103963))

(assert (=> b!95828 m!103861))

(assert (=> b!95828 m!103883))

(declare-fun m!103965 () Bool)

(assert (=> b!95828 m!103965))

(assert (=> b!95813 m!103861))

(declare-fun m!103967 () Bool)

(assert (=> b!95813 m!103967))

(assert (=> b!95834 m!103883))

(declare-fun m!103969 () Bool)

(assert (=> b!95834 m!103969))

(declare-fun m!103971 () Bool)

(assert (=> bm!9661 m!103971))

(assert (=> bm!9679 m!103861))

(assert (=> bm!9679 m!103883))

(declare-fun m!103973 () Bool)

(assert (=> bm!9679 m!103973))

(declare-fun m!103975 () Bool)

(assert (=> b!95827 m!103975))

(declare-fun m!103977 () Bool)

(assert (=> d!25279 m!103977))

(assert (=> d!25279 m!103891))

(assert (=> bm!9668 m!103861))

(declare-fun m!103979 () Bool)

(assert (=> bm!9668 m!103979))

(assert (=> bm!9680 m!103861))

(declare-fun m!103981 () Bool)

(assert (=> bm!9680 m!103981))

(assert (=> bm!9675 m!103893))

(assert (=> b!95807 m!103883))

(declare-fun m!103983 () Bool)

(assert (=> b!95807 m!103983))

(declare-fun m!103985 () Bool)

(assert (=> b!95844 m!103985))

(declare-fun m!103987 () Bool)

(assert (=> bm!9663 m!103987))

(declare-fun m!103989 () Bool)

(assert (=> bm!9667 m!103989))

(declare-fun m!103991 () Bool)

(assert (=> bm!9667 m!103991))

(declare-fun m!103993 () Bool)

(assert (=> bm!9666 m!103993))

(declare-fun m!103995 () Bool)

(assert (=> b!95839 m!103995))

(declare-fun m!103997 () Bool)

(assert (=> bm!9676 m!103997))

(assert (=> b!95829 m!103861))

(assert (=> b!95829 m!103981))

(declare-fun m!103999 () Bool)

(assert (=> b!95833 m!103999))

(declare-fun m!104001 () Bool)

(assert (=> bm!9672 m!104001))

(assert (=> bm!9678 m!103861))

(declare-fun m!104003 () Bool)

(assert (=> bm!9678 m!104003))

(assert (=> b!95654 d!25279))

(declare-fun d!25281 () Bool)

(declare-fun c!16114 () Bool)

(assert (=> d!25281 (= c!16114 ((_ is ValueCellFull!966) (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(declare-fun e!62531 () V!3139)

(assert (=> d!25281 (= (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!62531)))

(declare-fun b!95849 () Bool)

(declare-fun get!1271 (ValueCell!966 V!3139) V!3139)

(assert (=> b!95849 (= e!62531 (get!1271 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!95850 () Bool)

(declare-fun get!1272 (ValueCell!966 V!3139) V!3139)

(assert (=> b!95850 (= e!62531 (get!1272 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25281 c!16114) b!95849))

(assert (= (and d!25281 (not c!16114)) b!95850))

(assert (=> b!95849 m!103879))

(assert (=> b!95849 m!103881))

(declare-fun m!104005 () Bool)

(assert (=> b!95849 m!104005))

(assert (=> b!95850 m!103879))

(assert (=> b!95850 m!103881))

(declare-fun m!104007 () Bool)

(assert (=> b!95850 m!104007))

(assert (=> b!95654 d!25281))

(declare-fun d!25283 () Bool)

(assert (=> d!25283 (not (arrayContainsKey!0 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!47762 () Unit!2864)

(declare-fun choose!68 (array!4215 (_ BitVec 32) (_ BitVec 64) List!1574) Unit!2864)

(assert (=> d!25283 (= lt!47762 (choose!68 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (Cons!1570 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) Nil!1571)))))

(assert (=> d!25283 (bvslt (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!25283 (= (lemmaArrayNoDuplicateFromNotContainsKeysInAcc!0 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (Cons!1570 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) Nil!1571)) lt!47762)))

(declare-fun bs!3943 () Bool)

(assert (= bs!3943 d!25283))

(assert (=> bs!3943 m!103861))

(assert (=> bs!3943 m!103865))

(assert (=> bs!3943 m!103861))

(declare-fun m!104009 () Bool)

(assert (=> bs!3943 m!104009))

(assert (=> b!95643 d!25283))

(declare-fun d!25285 () Bool)

(assert (=> d!25285 (arrayNoDuplicates!0 (_keys!4143 (v!2778 (underlying!331 thiss!992))) from!355 Nil!1571)))

(declare-fun lt!47765 () Unit!2864)

(declare-fun choose!39 (array!4215 (_ BitVec 32) (_ BitVec 32)) Unit!2864)

(assert (=> d!25285 (= lt!47765 (choose!39 (_keys!4143 (v!2778 (underlying!331 thiss!992))) #b00000000000000000000000000000000 from!355))))

(assert (=> d!25285 (bvslt (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) #b01111111111111111111111111111111)))

(assert (=> d!25285 (= (lemmaNoDuplicateFromThenFromBigger!0 (_keys!4143 (v!2778 (underlying!331 thiss!992))) #b00000000000000000000000000000000 from!355) lt!47765)))

(declare-fun bs!3944 () Bool)

(assert (= bs!3944 d!25285))

(assert (=> bs!3944 m!103859))

(declare-fun m!104011 () Bool)

(assert (=> bs!3944 m!104011))

(assert (=> b!95643 d!25285))

(declare-fun d!25287 () Bool)

(declare-fun res!48409 () Bool)

(declare-fun e!62536 () Bool)

(assert (=> d!25287 (=> res!48409 e!62536)))

(assert (=> d!25287 (= res!48409 (= (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(assert (=> d!25287 (= (arrayContainsKey!0 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)) e!62536)))

(declare-fun b!95855 () Bool)

(declare-fun e!62537 () Bool)

(assert (=> b!95855 (= e!62536 e!62537)))

(declare-fun res!48410 () Bool)

(assert (=> b!95855 (=> (not res!48410) (not e!62537))))

(assert (=> b!95855 (= res!48410 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992))))))))

(declare-fun b!95856 () Bool)

(assert (=> b!95856 (= e!62537 (arrayContainsKey!0 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(assert (= (and d!25287 (not res!48409)) b!95855))

(assert (= (and b!95855 res!48410) b!95856))

(declare-fun m!104013 () Bool)

(assert (=> d!25287 m!104013))

(assert (=> b!95856 m!103861))

(declare-fun m!104015 () Bool)

(assert (=> b!95856 m!104015))

(assert (=> b!95643 d!25287))

(declare-fun d!25289 () Bool)

(declare-fun e!62540 () Bool)

(assert (=> d!25289 e!62540))

(declare-fun c!16117 () Bool)

(assert (=> d!25289 (= c!16117 (and (not (= (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun lt!47768 () Unit!2864)

(declare-fun choose!573 (array!4215 array!4217 (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 (_ BitVec 64) (_ BitVec 32) Int) Unit!2864)

(assert (=> d!25289 (= lt!47768 (choose!573 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (_values!2440 (v!2778 (underlying!331 thiss!992))) (mask!6542 (v!2778 (underlying!331 thiss!992))) (extraKeys!2282 (v!2778 (underlying!331 thiss!992))) (zeroValue!2342 (v!2778 (underlying!331 thiss!992))) (minValue!2342 (v!2778 (underlying!331 thiss!992))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2457 (v!2778 (underlying!331 thiss!992)))))))

(assert (=> d!25289 (validMask!0 (mask!6542 (v!2778 (underlying!331 thiss!992))))))

(assert (=> d!25289 (= (lemmaListMapContainsThenArrayContainsFrom!86 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (_values!2440 (v!2778 (underlying!331 thiss!992))) (mask!6542 (v!2778 (underlying!331 thiss!992))) (extraKeys!2282 (v!2778 (underlying!331 thiss!992))) (zeroValue!2342 (v!2778 (underlying!331 thiss!992))) (minValue!2342 (v!2778 (underlying!331 thiss!992))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2457 (v!2778 (underlying!331 thiss!992)))) lt!47768)))

(declare-fun b!95861 () Bool)

(assert (=> b!95861 (= e!62540 (arrayContainsKey!0 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!95862 () Bool)

(assert (=> b!95862 (= e!62540 (ite (= (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!2282 (v!2778 (underlying!331 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2282 (v!2778 (underlying!331 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!25289 c!16117) b!95861))

(assert (= (and d!25289 (not c!16117)) b!95862))

(assert (=> d!25289 m!103861))

(declare-fun m!104017 () Bool)

(assert (=> d!25289 m!104017))

(assert (=> d!25289 m!103869))

(assert (=> b!95861 m!103861))

(assert (=> b!95861 m!103865))

(assert (=> b!95643 d!25289))

(declare-fun d!25291 () Bool)

(declare-fun res!48419 () Bool)

(declare-fun e!62549 () Bool)

(assert (=> d!25291 (=> res!48419 e!62549)))

(assert (=> d!25291 (= res!48419 (bvsge from!355 (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992))))))))

(assert (=> d!25291 (= (arrayNoDuplicates!0 (_keys!4143 (v!2778 (underlying!331 thiss!992))) from!355 Nil!1571) e!62549)))

(declare-fun b!95873 () Bool)

(declare-fun e!62550 () Bool)

(declare-fun e!62552 () Bool)

(assert (=> b!95873 (= e!62550 e!62552)))

(declare-fun c!16120 () Bool)

(declare-fun validKeyInArray!0 ((_ BitVec 64)) Bool)

(assert (=> b!95873 (= c!16120 (validKeyInArray!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(declare-fun b!95874 () Bool)

(assert (=> b!95874 (= e!62549 e!62550)))

(declare-fun res!48417 () Bool)

(assert (=> b!95874 (=> (not res!48417) (not e!62550))))

(declare-fun e!62551 () Bool)

(assert (=> b!95874 (= res!48417 (not e!62551))))

(declare-fun res!48418 () Bool)

(assert (=> b!95874 (=> (not res!48418) (not e!62551))))

(assert (=> b!95874 (= res!48418 (validKeyInArray!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(declare-fun b!95875 () Bool)

(declare-fun contains!796 (List!1574 (_ BitVec 64)) Bool)

(assert (=> b!95875 (= e!62551 (contains!796 Nil!1571 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(declare-fun bm!9687 () Bool)

(declare-fun call!9690 () Bool)

(assert (=> bm!9687 (= call!9690 (arrayNoDuplicates!0 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!16120 (Cons!1570 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) Nil!1571) Nil!1571)))))

(declare-fun b!95876 () Bool)

(assert (=> b!95876 (= e!62552 call!9690)))

(declare-fun b!95877 () Bool)

(assert (=> b!95877 (= e!62552 call!9690)))

(assert (= (and d!25291 (not res!48419)) b!95874))

(assert (= (and b!95874 res!48418) b!95875))

(assert (= (and b!95874 res!48417) b!95873))

(assert (= (and b!95873 c!16120) b!95876))

(assert (= (and b!95873 (not c!16120)) b!95877))

(assert (= (or b!95876 b!95877) bm!9687))

(assert (=> b!95873 m!103861))

(assert (=> b!95873 m!103861))

(declare-fun m!104019 () Bool)

(assert (=> b!95873 m!104019))

(assert (=> b!95874 m!103861))

(assert (=> b!95874 m!103861))

(assert (=> b!95874 m!104019))

(assert (=> b!95875 m!103861))

(assert (=> b!95875 m!103861))

(declare-fun m!104021 () Bool)

(assert (=> b!95875 m!104021))

(assert (=> bm!9687 m!103861))

(declare-fun m!104023 () Bool)

(assert (=> bm!9687 m!104023))

(assert (=> b!95643 d!25291))

(declare-fun d!25293 () Bool)

(assert (=> d!25293 (= (valid!378 thiss!992) (valid!379 (v!2778 (underlying!331 thiss!992))))))

(declare-fun bs!3945 () Bool)

(assert (= bs!3945 d!25293))

(declare-fun m!104025 () Bool)

(assert (=> bs!3945 m!104025))

(assert (=> start!11498 d!25293))

(declare-fun d!25295 () Bool)

(declare-fun res!48426 () Bool)

(declare-fun e!62555 () Bool)

(assert (=> d!25295 (=> (not res!48426) (not e!62555))))

(declare-fun simpleValid!67 (LongMapFixedSize!840) Bool)

(assert (=> d!25295 (= res!48426 (simpleValid!67 newMap!16))))

(assert (=> d!25295 (= (valid!379 newMap!16) e!62555)))

(declare-fun b!95884 () Bool)

(declare-fun res!48427 () Bool)

(assert (=> b!95884 (=> (not res!48427) (not e!62555))))

(declare-fun arrayCountValidKeys!0 (array!4215 (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!95884 (= res!48427 (= (arrayCountValidKeys!0 (_keys!4143 newMap!16) #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))) (_size!469 newMap!16)))))

(declare-fun b!95885 () Bool)

(declare-fun res!48428 () Bool)

(assert (=> b!95885 (=> (not res!48428) (not e!62555))))

(declare-fun arrayForallSeekEntryOrOpenFound!0 ((_ BitVec 32) array!4215 (_ BitVec 32)) Bool)

(assert (=> b!95885 (= res!48428 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4143 newMap!16) (mask!6542 newMap!16)))))

(declare-fun b!95886 () Bool)

(assert (=> b!95886 (= e!62555 (arrayNoDuplicates!0 (_keys!4143 newMap!16) #b00000000000000000000000000000000 Nil!1571))))

(assert (= (and d!25295 res!48426) b!95884))

(assert (= (and b!95884 res!48427) b!95885))

(assert (= (and b!95885 res!48428) b!95886))

(declare-fun m!104027 () Bool)

(assert (=> d!25295 m!104027))

(declare-fun m!104029 () Bool)

(assert (=> b!95884 m!104029))

(declare-fun m!104031 () Bool)

(assert (=> b!95885 m!104031))

(declare-fun m!104033 () Bool)

(assert (=> b!95886 m!104033))

(assert (=> b!95649 d!25295))

(declare-fun d!25297 () Bool)

(assert (=> d!25297 (= (map!1247 newMap!16) (getCurrentListMap!470 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun bs!3946 () Bool)

(assert (= bs!3946 d!25297))

(declare-fun m!104035 () Bool)

(assert (=> bs!3946 m!104035))

(assert (=> b!95637 d!25297))

(declare-fun b!95929 () Bool)

(declare-fun res!48453 () Bool)

(declare-fun e!62591 () Bool)

(assert (=> b!95929 (=> (not res!48453) (not e!62591))))

(declare-fun e!62592 () Bool)

(assert (=> b!95929 (= res!48453 e!62592)))

(declare-fun c!16137 () Bool)

(assert (=> b!95929 (= c!16137 (not (= (bvand (extraKeys!2282 (v!2778 (underlying!331 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun d!25299 () Bool)

(assert (=> d!25299 e!62591))

(declare-fun res!48454 () Bool)

(assert (=> d!25299 (=> (not res!48454) (not e!62591))))

(assert (=> d!25299 (= res!48454 (or (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992))))) (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992))))))))))

(declare-fun lt!47819 () ListLongMap!1527)

(declare-fun lt!47833 () ListLongMap!1527)

(assert (=> d!25299 (= lt!47819 lt!47833)))

(declare-fun lt!47827 () Unit!2864)

(declare-fun e!62589 () Unit!2864)

(assert (=> d!25299 (= lt!47827 e!62589)))

(declare-fun c!16133 () Bool)

(declare-fun e!62587 () Bool)

(assert (=> d!25299 (= c!16133 e!62587)))

(declare-fun res!48452 () Bool)

(assert (=> d!25299 (=> (not res!48452) (not e!62587))))

(assert (=> d!25299 (= res!48452 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992))))))))

(declare-fun e!62586 () ListLongMap!1527)

(assert (=> d!25299 (= lt!47833 e!62586)))

(declare-fun c!16134 () Bool)

(assert (=> d!25299 (= c!16134 (and (not (= (bvand (extraKeys!2282 (v!2778 (underlying!331 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2282 (v!2778 (underlying!331 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!25299 (validMask!0 (mask!6542 (v!2778 (underlying!331 thiss!992))))))

(assert (=> d!25299 (= (getCurrentListMap!470 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (_values!2440 (v!2778 (underlying!331 thiss!992))) (mask!6542 (v!2778 (underlying!331 thiss!992))) (extraKeys!2282 (v!2778 (underlying!331 thiss!992))) (zeroValue!2342 (v!2778 (underlying!331 thiss!992))) (minValue!2342 (v!2778 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2457 (v!2778 (underlying!331 thiss!992)))) lt!47819)))

(declare-fun bm!9702 () Bool)

(declare-fun call!9707 () ListLongMap!1527)

(declare-fun call!9708 () ListLongMap!1527)

(assert (=> bm!9702 (= call!9707 call!9708)))

(declare-fun bm!9703 () Bool)

(declare-fun call!9705 () ListLongMap!1527)

(declare-fun call!9710 () ListLongMap!1527)

(assert (=> bm!9703 (= call!9705 call!9710)))

(declare-fun b!95930 () Bool)

(declare-fun e!62582 () Bool)

(declare-fun call!9709 () Bool)

(assert (=> b!95930 (= e!62582 (not call!9709))))

(declare-fun bm!9704 () Bool)

(declare-fun getCurrentListMapNoExtraKeys!99 (array!4215 array!4217 (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 (_ BitVec 32) Int) ListLongMap!1527)

(assert (=> bm!9704 (= call!9708 (getCurrentListMapNoExtraKeys!99 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (_values!2440 (v!2778 (underlying!331 thiss!992))) (mask!6542 (v!2778 (underlying!331 thiss!992))) (extraKeys!2282 (v!2778 (underlying!331 thiss!992))) (zeroValue!2342 (v!2778 (underlying!331 thiss!992))) (minValue!2342 (v!2778 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2457 (v!2778 (underlying!331 thiss!992)))))))

(declare-fun bm!9705 () Bool)

(declare-fun call!9706 () ListLongMap!1527)

(assert (=> bm!9705 (= call!9706 call!9707)))

(declare-fun b!95931 () Bool)

(assert (=> b!95931 (= e!62587 (validKeyInArray!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!95932 () Bool)

(declare-fun e!62588 () Bool)

(assert (=> b!95932 (= e!62588 (validKeyInArray!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!95933 () Bool)

(declare-fun e!62585 () Bool)

(declare-fun apply!91 (ListLongMap!1527 (_ BitVec 64)) V!3139)

(assert (=> b!95933 (= e!62585 (= (apply!91 lt!47819 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))

(declare-fun b!95934 () Bool)

(declare-fun e!62583 () ListLongMap!1527)

(assert (=> b!95934 (= e!62583 call!9706)))

(declare-fun b!95935 () Bool)

(declare-fun call!9711 () Bool)

(assert (=> b!95935 (= e!62592 (not call!9711))))

(declare-fun b!95936 () Bool)

(assert (=> b!95936 (= e!62582 e!62585)))

(declare-fun res!48451 () Bool)

(assert (=> b!95936 (= res!48451 call!9709)))

(assert (=> b!95936 (=> (not res!48451) (not e!62585))))

(declare-fun bm!9706 () Bool)

(assert (=> bm!9706 (= call!9709 (contains!794 lt!47819 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!95937 () Bool)

(declare-fun e!62590 () Bool)

(declare-fun e!62593 () Bool)

(assert (=> b!95937 (= e!62590 e!62593)))

(declare-fun res!48448 () Bool)

(assert (=> b!95937 (=> (not res!48448) (not e!62593))))

(assert (=> b!95937 (= res!48448 (contains!794 lt!47819 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!95937 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992))))))))

(declare-fun bm!9707 () Bool)

(declare-fun c!16138 () Bool)

(assert (=> bm!9707 (= call!9710 (+!134 (ite c!16134 call!9708 (ite c!16138 call!9707 call!9706)) (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun b!95938 () Bool)

(declare-fun e!62594 () Bool)

(assert (=> b!95938 (= e!62594 (= (apply!91 lt!47819 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))

(declare-fun b!95939 () Bool)

(assert (=> b!95939 (= e!62591 e!62582)))

(declare-fun c!16136 () Bool)

(assert (=> b!95939 (= c!16136 (not (= (bvand (extraKeys!2282 (v!2778 (underlying!331 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!95940 () Bool)

(declare-fun c!16135 () Bool)

(assert (=> b!95940 (= c!16135 (and (not (= (bvand (extraKeys!2282 (v!2778 (underlying!331 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2282 (v!2778 (underlying!331 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!62584 () ListLongMap!1527)

(assert (=> b!95940 (= e!62584 e!62583)))

(declare-fun b!95941 () Bool)

(assert (=> b!95941 (= e!62583 call!9705)))

(declare-fun b!95942 () Bool)

(declare-fun lt!47821 () Unit!2864)

(assert (=> b!95942 (= e!62589 lt!47821)))

(declare-fun lt!47826 () ListLongMap!1527)

(assert (=> b!95942 (= lt!47826 (getCurrentListMapNoExtraKeys!99 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (_values!2440 (v!2778 (underlying!331 thiss!992))) (mask!6542 (v!2778 (underlying!331 thiss!992))) (extraKeys!2282 (v!2778 (underlying!331 thiss!992))) (zeroValue!2342 (v!2778 (underlying!331 thiss!992))) (minValue!2342 (v!2778 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2457 (v!2778 (underlying!331 thiss!992)))))))

(declare-fun lt!47825 () (_ BitVec 64))

(assert (=> b!95942 (= lt!47825 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!47822 () (_ BitVec 64))

(assert (=> b!95942 (= lt!47822 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!47817 () Unit!2864)

(declare-fun addStillContains!67 (ListLongMap!1527 (_ BitVec 64) V!3139 (_ BitVec 64)) Unit!2864)

(assert (=> b!95942 (= lt!47817 (addStillContains!67 lt!47826 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))) lt!47822))))

(assert (=> b!95942 (contains!794 (+!134 lt!47826 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))) lt!47822)))

(declare-fun lt!47834 () Unit!2864)

(assert (=> b!95942 (= lt!47834 lt!47817)))

(declare-fun lt!47829 () ListLongMap!1527)

(assert (=> b!95942 (= lt!47829 (getCurrentListMapNoExtraKeys!99 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (_values!2440 (v!2778 (underlying!331 thiss!992))) (mask!6542 (v!2778 (underlying!331 thiss!992))) (extraKeys!2282 (v!2778 (underlying!331 thiss!992))) (zeroValue!2342 (v!2778 (underlying!331 thiss!992))) (minValue!2342 (v!2778 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2457 (v!2778 (underlying!331 thiss!992)))))))

(declare-fun lt!47831 () (_ BitVec 64))

(assert (=> b!95942 (= lt!47831 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!47820 () (_ BitVec 64))

(assert (=> b!95942 (= lt!47820 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!47830 () Unit!2864)

(declare-fun addApplyDifferent!67 (ListLongMap!1527 (_ BitVec 64) V!3139 (_ BitVec 64)) Unit!2864)

(assert (=> b!95942 (= lt!47830 (addApplyDifferent!67 lt!47829 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992))) lt!47820))))

(assert (=> b!95942 (= (apply!91 (+!134 lt!47829 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) lt!47820) (apply!91 lt!47829 lt!47820))))

(declare-fun lt!47814 () Unit!2864)

(assert (=> b!95942 (= lt!47814 lt!47830)))

(declare-fun lt!47818 () ListLongMap!1527)

(assert (=> b!95942 (= lt!47818 (getCurrentListMapNoExtraKeys!99 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (_values!2440 (v!2778 (underlying!331 thiss!992))) (mask!6542 (v!2778 (underlying!331 thiss!992))) (extraKeys!2282 (v!2778 (underlying!331 thiss!992))) (zeroValue!2342 (v!2778 (underlying!331 thiss!992))) (minValue!2342 (v!2778 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2457 (v!2778 (underlying!331 thiss!992)))))))

(declare-fun lt!47823 () (_ BitVec 64))

(assert (=> b!95942 (= lt!47823 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!47813 () (_ BitVec 64))

(assert (=> b!95942 (= lt!47813 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun lt!47816 () Unit!2864)

(assert (=> b!95942 (= lt!47816 (addApplyDifferent!67 lt!47818 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))) lt!47813))))

(assert (=> b!95942 (= (apply!91 (+!134 lt!47818 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))) lt!47813) (apply!91 lt!47818 lt!47813))))

(declare-fun lt!47824 () Unit!2864)

(assert (=> b!95942 (= lt!47824 lt!47816)))

(declare-fun lt!47815 () ListLongMap!1527)

(assert (=> b!95942 (= lt!47815 (getCurrentListMapNoExtraKeys!99 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (_values!2440 (v!2778 (underlying!331 thiss!992))) (mask!6542 (v!2778 (underlying!331 thiss!992))) (extraKeys!2282 (v!2778 (underlying!331 thiss!992))) (zeroValue!2342 (v!2778 (underlying!331 thiss!992))) (minValue!2342 (v!2778 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2457 (v!2778 (underlying!331 thiss!992)))))))

(declare-fun lt!47832 () (_ BitVec 64))

(assert (=> b!95942 (= lt!47832 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!47828 () (_ BitVec 64))

(assert (=> b!95942 (= lt!47828 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> b!95942 (= lt!47821 (addApplyDifferent!67 lt!47815 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992))) lt!47828))))

(assert (=> b!95942 (= (apply!91 (+!134 lt!47815 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) lt!47828) (apply!91 lt!47815 lt!47828))))

(declare-fun b!95943 () Bool)

(assert (=> b!95943 (= e!62586 e!62584)))

(assert (=> b!95943 (= c!16138 (and (not (= (bvand (extraKeys!2282 (v!2778 (underlying!331 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2282 (v!2778 (underlying!331 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!95944 () Bool)

(declare-fun res!48450 () Bool)

(assert (=> b!95944 (=> (not res!48450) (not e!62591))))

(assert (=> b!95944 (= res!48450 e!62590)))

(declare-fun res!48449 () Bool)

(assert (=> b!95944 (=> res!48449 e!62590)))

(assert (=> b!95944 (= res!48449 (not e!62588))))

(declare-fun res!48455 () Bool)

(assert (=> b!95944 (=> (not res!48455) (not e!62588))))

(assert (=> b!95944 (= res!48455 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992))))))))

(declare-fun bm!9708 () Bool)

(assert (=> bm!9708 (= call!9711 (contains!794 lt!47819 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!95945 () Bool)

(assert (=> b!95945 (= e!62592 e!62594)))

(declare-fun res!48447 () Bool)

(assert (=> b!95945 (= res!48447 call!9711)))

(assert (=> b!95945 (=> (not res!48447) (not e!62594))))

(declare-fun b!95946 () Bool)

(assert (=> b!95946 (= e!62593 (= (apply!91 lt!47819 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!95946 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2253 (_values!2440 (v!2778 (underlying!331 thiss!992))))))))

(assert (=> b!95946 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992))))))))

(declare-fun b!95947 () Bool)

(declare-fun Unit!2874 () Unit!2864)

(assert (=> b!95947 (= e!62589 Unit!2874)))

(declare-fun b!95948 () Bool)

(assert (=> b!95948 (= e!62586 (+!134 call!9710 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))

(declare-fun b!95949 () Bool)

(assert (=> b!95949 (= e!62584 call!9705)))

(assert (= (and d!25299 c!16134) b!95948))

(assert (= (and d!25299 (not c!16134)) b!95943))

(assert (= (and b!95943 c!16138) b!95949))

(assert (= (and b!95943 (not c!16138)) b!95940))

(assert (= (and b!95940 c!16135) b!95941))

(assert (= (and b!95940 (not c!16135)) b!95934))

(assert (= (or b!95941 b!95934) bm!9705))

(assert (= (or b!95949 bm!9705) bm!9702))

(assert (= (or b!95949 b!95941) bm!9703))

(assert (= (or b!95948 bm!9702) bm!9704))

(assert (= (or b!95948 bm!9703) bm!9707))

(assert (= (and d!25299 res!48452) b!95931))

(assert (= (and d!25299 c!16133) b!95942))

(assert (= (and d!25299 (not c!16133)) b!95947))

(assert (= (and d!25299 res!48454) b!95944))

(assert (= (and b!95944 res!48455) b!95932))

(assert (= (and b!95944 (not res!48449)) b!95937))

(assert (= (and b!95937 res!48448) b!95946))

(assert (= (and b!95944 res!48450) b!95929))

(assert (= (and b!95929 c!16137) b!95945))

(assert (= (and b!95929 (not c!16137)) b!95935))

(assert (= (and b!95945 res!48447) b!95938))

(assert (= (or b!95945 b!95935) bm!9708))

(assert (= (and b!95929 res!48453) b!95939))

(assert (= (and b!95939 c!16136) b!95936))

(assert (= (and b!95939 (not c!16136)) b!95930))

(assert (= (and b!95936 res!48451) b!95933))

(assert (= (or b!95936 b!95930) bm!9706))

(declare-fun b_lambda!4239 () Bool)

(assert (=> (not b_lambda!4239) (not b!95946)))

(assert (=> b!95946 t!5492))

(declare-fun b_and!5863 () Bool)

(assert (= b_and!5851 (and (=> t!5492 result!3215) b_and!5863)))

(assert (=> b!95946 t!5494))

(declare-fun b_and!5865 () Bool)

(assert (= b_and!5853 (and (=> t!5494 result!3219) b_and!5865)))

(declare-fun m!104037 () Bool)

(assert (=> bm!9707 m!104037))

(declare-fun m!104039 () Bool)

(assert (=> b!95938 m!104039))

(declare-fun m!104041 () Bool)

(assert (=> b!95942 m!104041))

(declare-fun m!104043 () Bool)

(assert (=> b!95942 m!104043))

(declare-fun m!104045 () Bool)

(assert (=> b!95942 m!104045))

(declare-fun m!104047 () Bool)

(assert (=> b!95942 m!104047))

(declare-fun m!104049 () Bool)

(assert (=> b!95942 m!104049))

(declare-fun m!104051 () Bool)

(assert (=> b!95942 m!104051))

(declare-fun m!104053 () Bool)

(assert (=> b!95942 m!104053))

(declare-fun m!104055 () Bool)

(assert (=> b!95942 m!104055))

(declare-fun m!104057 () Bool)

(assert (=> b!95942 m!104057))

(declare-fun m!104059 () Bool)

(assert (=> b!95942 m!104059))

(declare-fun m!104061 () Bool)

(assert (=> b!95942 m!104061))

(declare-fun m!104063 () Bool)

(assert (=> b!95942 m!104063))

(declare-fun m!104065 () Bool)

(assert (=> b!95942 m!104065))

(assert (=> b!95942 m!104043))

(declare-fun m!104067 () Bool)

(assert (=> b!95942 m!104067))

(assert (=> b!95942 m!104049))

(declare-fun m!104069 () Bool)

(assert (=> b!95942 m!104069))

(assert (=> b!95942 m!104053))

(declare-fun m!104071 () Bool)

(assert (=> b!95942 m!104071))

(assert (=> b!95942 m!104013))

(assert (=> b!95942 m!104059))

(assert (=> bm!9704 m!104071))

(assert (=> b!95937 m!104013))

(assert (=> b!95937 m!104013))

(declare-fun m!104073 () Bool)

(assert (=> b!95937 m!104073))

(assert (=> b!95932 m!104013))

(assert (=> b!95932 m!104013))

(declare-fun m!104075 () Bool)

(assert (=> b!95932 m!104075))

(declare-fun m!104077 () Bool)

(assert (=> b!95948 m!104077))

(declare-fun m!104079 () Bool)

(assert (=> bm!9708 m!104079))

(declare-fun m!104081 () Bool)

(assert (=> b!95933 m!104081))

(declare-fun m!104083 () Bool)

(assert (=> bm!9706 m!104083))

(assert (=> b!95931 m!104013))

(assert (=> b!95931 m!104013))

(assert (=> b!95931 m!104075))

(declare-fun m!104085 () Bool)

(assert (=> b!95946 m!104085))

(assert (=> b!95946 m!103881))

(declare-fun m!104087 () Bool)

(assert (=> b!95946 m!104087))

(assert (=> b!95946 m!104013))

(assert (=> b!95946 m!103881))

(assert (=> b!95946 m!104013))

(declare-fun m!104089 () Bool)

(assert (=> b!95946 m!104089))

(assert (=> b!95946 m!104085))

(assert (=> d!25299 m!103869))

(assert (=> b!95637 d!25299))

(declare-fun condMapEmpty!3711 () Bool)

(declare-fun mapDefault!3711 () ValueCell!966)

(assert (=> mapNonEmpty!3702 (= condMapEmpty!3711 (= mapRest!3701 ((as const (Array (_ BitVec 32) ValueCell!966)) mapDefault!3711)))))

(declare-fun e!62599 () Bool)

(declare-fun mapRes!3711 () Bool)

(assert (=> mapNonEmpty!3702 (= tp!9489 (and e!62599 mapRes!3711))))

(declare-fun mapIsEmpty!3711 () Bool)

(assert (=> mapIsEmpty!3711 mapRes!3711))

(declare-fun b!95956 () Bool)

(declare-fun e!62600 () Bool)

(assert (=> b!95956 (= e!62600 tp_is_empty!2619)))

(declare-fun mapNonEmpty!3711 () Bool)

(declare-fun tp!9507 () Bool)

(assert (=> mapNonEmpty!3711 (= mapRes!3711 (and tp!9507 e!62600))))

(declare-fun mapRest!3711 () (Array (_ BitVec 32) ValueCell!966))

(declare-fun mapKey!3711 () (_ BitVec 32))

(declare-fun mapValue!3711 () ValueCell!966)

(assert (=> mapNonEmpty!3711 (= mapRest!3701 (store mapRest!3711 mapKey!3711 mapValue!3711))))

(declare-fun b!95957 () Bool)

(assert (=> b!95957 (= e!62599 tp_is_empty!2619)))

(assert (= (and mapNonEmpty!3702 condMapEmpty!3711) mapIsEmpty!3711))

(assert (= (and mapNonEmpty!3702 (not condMapEmpty!3711)) mapNonEmpty!3711))

(assert (= (and mapNonEmpty!3711 ((_ is ValueCellFull!966) mapValue!3711)) b!95956))

(assert (= (and mapNonEmpty!3702 ((_ is ValueCellFull!966) mapDefault!3711)) b!95957))

(declare-fun m!104091 () Bool)

(assert (=> mapNonEmpty!3711 m!104091))

(declare-fun condMapEmpty!3712 () Bool)

(declare-fun mapDefault!3712 () ValueCell!966)

(assert (=> mapNonEmpty!3701 (= condMapEmpty!3712 (= mapRest!3702 ((as const (Array (_ BitVec 32) ValueCell!966)) mapDefault!3712)))))

(declare-fun e!62601 () Bool)

(declare-fun mapRes!3712 () Bool)

(assert (=> mapNonEmpty!3701 (= tp!9491 (and e!62601 mapRes!3712))))

(declare-fun mapIsEmpty!3712 () Bool)

(assert (=> mapIsEmpty!3712 mapRes!3712))

(declare-fun b!95958 () Bool)

(declare-fun e!62602 () Bool)

(assert (=> b!95958 (= e!62602 tp_is_empty!2619)))

(declare-fun mapNonEmpty!3712 () Bool)

(declare-fun tp!9508 () Bool)

(assert (=> mapNonEmpty!3712 (= mapRes!3712 (and tp!9508 e!62602))))

(declare-fun mapRest!3712 () (Array (_ BitVec 32) ValueCell!966))

(declare-fun mapValue!3712 () ValueCell!966)

(declare-fun mapKey!3712 () (_ BitVec 32))

(assert (=> mapNonEmpty!3712 (= mapRest!3702 (store mapRest!3712 mapKey!3712 mapValue!3712))))

(declare-fun b!95959 () Bool)

(assert (=> b!95959 (= e!62601 tp_is_empty!2619)))

(assert (= (and mapNonEmpty!3701 condMapEmpty!3712) mapIsEmpty!3712))

(assert (= (and mapNonEmpty!3701 (not condMapEmpty!3712)) mapNonEmpty!3712))

(assert (= (and mapNonEmpty!3712 ((_ is ValueCellFull!966) mapValue!3712)) b!95958))

(assert (= (and mapNonEmpty!3701 ((_ is ValueCellFull!966) mapDefault!3712)) b!95959))

(declare-fun m!104093 () Bool)

(assert (=> mapNonEmpty!3712 m!104093))

(declare-fun b_lambda!4241 () Bool)

(assert (= b_lambda!4239 (or (and b!95640 b_free!2405) (and b!95639 b_free!2407 (= (defaultEntry!2457 newMap!16) (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))))) b_lambda!4241)))

(check-sat (not b!95937) (not b_next!2405) (not bm!9668) (not b!95813) (not b!95829) (not bm!9675) (not b!95834) (not b!95722) (not bm!9680) (not bm!9673) (not b_next!2407) (not b!95932) (not b!95856) (not d!25279) (not b!95850) (not b_lambda!4241) (not bm!9679) (not b!95886) (not d!25299) (not b!95875) (not b!95828) (not bm!9667) (not b!95948) (not b!95942) (not b!95724) (not bm!9678) (not bm!9708) (not bm!9704) (not mapNonEmpty!3712) (not d!25283) (not b!95885) (not b_lambda!4237) (not mapNonEmpty!3711) (not bm!9672) (not d!25277) (not b!95849) (not bm!9661) (not b!95933) (not b!95946) (not b!95874) (not d!25285) (not bm!9706) (not bm!9666) (not b!95884) (not bm!9663) (not b!95931) (not b!95938) b_and!5865 (not d!25289) (not bm!9676) (not d!25295) (not b!95844) tp_is_empty!2619 b_and!5863 (not b!95861) (not d!25293) (not bm!9707) (not b!95873) (not b!95807) (not bm!9687) (not d!25297))
(check-sat b_and!5863 b_and!5865 (not b_next!2405) (not b_next!2407))
(get-model)

(declare-fun d!25301 () Bool)

(assert (=> d!25301 (= (validKeyInArray!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (and (not (= (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!95932 d!25301))

(declare-fun d!25303 () Bool)

(assert (=> d!25303 (= (+!134 (getCurrentListMap!470 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!470 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) lt!47750 (zeroValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!47837 () Unit!2864)

(declare-fun choose!574 (array!4215 array!4217 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 V!3139 Int) Unit!2864)

(assert (=> d!25303 (= lt!47837 (choose!574 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) lt!47750 (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2457 newMap!16)))))

(assert (=> d!25303 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25303 (= (lemmaChangeLongMinValueKeyThenAddPairToListMap!40 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) lt!47750 (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2457 newMap!16)) lt!47837)))

(declare-fun bs!3947 () Bool)

(assert (= bs!3947 d!25303))

(declare-fun m!104095 () Bool)

(assert (=> bs!3947 m!104095))

(assert (=> bs!3947 m!103883))

(declare-fun m!104097 () Bool)

(assert (=> bs!3947 m!104097))

(assert (=> bs!3947 m!104035))

(declare-fun m!104099 () Bool)

(assert (=> bs!3947 m!104099))

(assert (=> bs!3947 m!103883))

(declare-fun m!104101 () Bool)

(assert (=> bs!3947 m!104101))

(assert (=> bs!3947 m!104035))

(assert (=> b!95807 d!25303))

(declare-fun d!25305 () Bool)

(declare-fun e!62605 () Bool)

(assert (=> d!25305 e!62605))

(declare-fun res!48460 () Bool)

(assert (=> d!25305 (=> (not res!48460) (not e!62605))))

(declare-fun lt!47848 () ListLongMap!1527)

(assert (=> d!25305 (= res!48460 (contains!794 lt!47848 (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun lt!47847 () List!1573)

(assert (=> d!25305 (= lt!47848 (ListLongMap!1528 lt!47847))))

(declare-fun lt!47849 () Unit!2864)

(declare-fun lt!47846 () Unit!2864)

(assert (=> d!25305 (= lt!47849 lt!47846)))

(assert (=> d!25305 (= (getValueByKey!149 lt!47847 (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) (Some!154 (_2!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun lemmaContainsTupThenGetReturnValue!65 (List!1573 (_ BitVec 64) V!3139) Unit!2864)

(assert (=> d!25305 (= lt!47846 (lemmaContainsTupThenGetReturnValue!65 lt!47847 (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun insertStrictlySorted!68 (List!1573 (_ BitVec 64) V!3139) List!1573)

(assert (=> d!25305 (= lt!47847 (insertStrictlySorted!68 (toList!779 call!9710) (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(assert (=> d!25305 (= (+!134 call!9710 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) lt!47848)))

(declare-fun b!95964 () Bool)

(declare-fun res!48461 () Bool)

(assert (=> b!95964 (=> (not res!48461) (not e!62605))))

(assert (=> b!95964 (= res!48461 (= (getValueByKey!149 (toList!779 lt!47848) (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) (Some!154 (_2!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(declare-fun b!95965 () Bool)

(declare-fun contains!797 (List!1573 tuple2!2322) Bool)

(assert (=> b!95965 (= e!62605 (contains!797 (toList!779 lt!47848) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))

(assert (= (and d!25305 res!48460) b!95964))

(assert (= (and b!95964 res!48461) b!95965))

(declare-fun m!104103 () Bool)

(assert (=> d!25305 m!104103))

(declare-fun m!104105 () Bool)

(assert (=> d!25305 m!104105))

(declare-fun m!104107 () Bool)

(assert (=> d!25305 m!104107))

(declare-fun m!104109 () Bool)

(assert (=> d!25305 m!104109))

(declare-fun m!104111 () Bool)

(assert (=> b!95964 m!104111))

(declare-fun m!104113 () Bool)

(assert (=> b!95965 m!104113))

(assert (=> b!95948 d!25305))

(declare-fun d!25307 () Bool)

(assert (=> d!25307 (= (map!1247 (_2!1173 lt!47744)) (getCurrentListMap!470 (_keys!4143 (_2!1173 lt!47744)) (_values!2440 (_2!1173 lt!47744)) (mask!6542 (_2!1173 lt!47744)) (extraKeys!2282 (_2!1173 lt!47744)) (zeroValue!2342 (_2!1173 lt!47744)) (minValue!2342 (_2!1173 lt!47744)) #b00000000000000000000000000000000 (defaultEntry!2457 (_2!1173 lt!47744))))))

(declare-fun bs!3948 () Bool)

(assert (= bs!3948 d!25307))

(declare-fun m!104115 () Bool)

(assert (=> bs!3948 m!104115))

(assert (=> bm!9663 d!25307))

(assert (=> bm!9675 d!25297))

(declare-fun d!25309 () Bool)

(declare-fun res!48462 () Bool)

(declare-fun e!62606 () Bool)

(assert (=> d!25309 (=> res!48462 e!62606)))

(assert (=> d!25309 (= res!48462 (= (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(assert (=> d!25309 (= (arrayContainsKey!0 (_keys!4143 newMap!16) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) #b00000000000000000000000000000000) e!62606)))

(declare-fun b!95966 () Bool)

(declare-fun e!62607 () Bool)

(assert (=> b!95966 (= e!62606 e!62607)))

(declare-fun res!48463 () Bool)

(assert (=> b!95966 (=> (not res!48463) (not e!62607))))

(assert (=> b!95966 (= res!48463 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2252 (_keys!4143 newMap!16))))))

(declare-fun b!95967 () Bool)

(assert (=> b!95967 (= e!62607 (arrayContainsKey!0 (_keys!4143 newMap!16) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!25309 (not res!48462)) b!95966))

(assert (= (and b!95966 res!48463) b!95967))

(declare-fun m!104117 () Bool)

(assert (=> d!25309 m!104117))

(assert (=> b!95967 m!103861))

(declare-fun m!104119 () Bool)

(assert (=> b!95967 m!104119))

(assert (=> bm!9668 d!25309))

(declare-fun b!96002 () Bool)

(declare-fun e!62630 () Bool)

(declare-fun lt!47921 () SeekEntryResult!252)

(assert (=> b!96002 (= e!62630 ((_ is Undefined!252) lt!47921))))

(declare-fun b!96003 () Bool)

(declare-fun c!16148 () Bool)

(assert (=> b!96003 (= c!16148 ((_ is MissingVacant!252) lt!47921))))

(declare-fun e!62631 () Bool)

(assert (=> b!96003 (= e!62631 e!62630)))

(declare-fun bm!9717 () Bool)

(declare-fun call!9721 () Bool)

(declare-fun call!9720 () Bool)

(assert (=> bm!9717 (= call!9721 call!9720)))

(declare-fun lt!47915 () SeekEntryResult!252)

(declare-fun bm!9718 () Bool)

(declare-fun c!16147 () Bool)

(declare-fun c!16150 () Bool)

(assert (=> bm!9718 (= call!9720 (inRange!0 (ite c!16150 (index!3151 lt!47915) (ite c!16147 (index!3150 lt!47921) (index!3153 lt!47921))) (mask!6542 newMap!16)))))

(declare-fun b!96004 () Bool)

(declare-fun e!62626 () Unit!2864)

(declare-fun Unit!2875 () Unit!2864)

(assert (=> b!96004 (= e!62626 Unit!2875)))

(declare-fun lt!47913 () Unit!2864)

(assert (=> b!96004 (= lt!47913 (lemmaInListMapThenSeekEntryOrOpenFindsIt!40 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (defaultEntry!2457 newMap!16)))))

(declare-fun call!9722 () SeekEntryResult!252)

(assert (=> b!96004 (= lt!47915 call!9722)))

(declare-fun res!48489 () Bool)

(assert (=> b!96004 (= res!48489 ((_ is Found!252) lt!47915))))

(declare-fun e!62628 () Bool)

(assert (=> b!96004 (=> (not res!48489) (not e!62628))))

(assert (=> b!96004 e!62628))

(declare-fun lt!47937 () Unit!2864)

(assert (=> b!96004 (= lt!47937 lt!47913)))

(assert (=> b!96004 false))

(declare-fun e!62624 () Bool)

(declare-fun lt!47912 () tuple2!2324)

(declare-fun b!96005 () Bool)

(assert (=> b!96005 (= e!62624 (= (map!1247 (_2!1173 lt!47912)) (+!134 (map!1247 newMap!16) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!96006 () Bool)

(declare-fun res!48490 () Bool)

(declare-fun e!62629 () Bool)

(assert (=> b!96006 (=> (not res!48490) (not e!62629))))

(assert (=> b!96006 (= res!48490 (= (select (arr!2003 (_keys!4143 newMap!16)) (index!3150 lt!47921)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96007 () Bool)

(declare-fun res!48486 () Bool)

(assert (=> b!96007 (= res!48486 (= (select (arr!2003 (_keys!4143 newMap!16)) (index!3153 lt!47921)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!62627 () Bool)

(assert (=> b!96007 (=> (not res!48486) (not e!62627))))

(declare-fun b!96008 () Bool)

(declare-fun call!9723 () Bool)

(assert (=> b!96008 (= e!62627 (not call!9723))))

(declare-fun b!96009 () Bool)

(declare-fun res!48483 () Bool)

(assert (=> b!96009 (=> (not res!48483) (not e!62624))))

(assert (=> b!96009 (= res!48483 (contains!794 (map!1247 (_2!1173 lt!47912)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(declare-fun b!96010 () Bool)

(assert (=> b!96010 (= e!62630 e!62627)))

(declare-fun res!48485 () Bool)

(assert (=> b!96010 (= res!48485 call!9721)))

(assert (=> b!96010 (=> (not res!48485) (not e!62627))))

(declare-fun bm!9719 () Bool)

(assert (=> bm!9719 (= call!9723 (arrayContainsKey!0 (_keys!4143 newMap!16) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!96011 () Bool)

(declare-fun res!48488 () Bool)

(assert (=> b!96011 (= res!48488 call!9720)))

(assert (=> b!96011 (=> (not res!48488) (not e!62628))))

(declare-fun b!96012 () Bool)

(declare-fun res!48487 () Bool)

(assert (=> b!96012 (=> (not res!48487) (not e!62629))))

(assert (=> b!96012 (= res!48487 call!9721)))

(assert (=> b!96012 (= e!62631 e!62629)))

(declare-fun b!96013 () Bool)

(declare-fun e!62625 () Unit!2864)

(declare-fun Unit!2876 () Unit!2864)

(assert (=> b!96013 (= e!62625 Unit!2876)))

(declare-fun b!96014 () Bool)

(assert (=> b!96014 (= e!62629 (not call!9723))))

(declare-fun b!96015 () Bool)

(assert (=> b!96015 (= e!62628 (= (select (arr!2003 (_keys!4143 newMap!16)) (index!3151 lt!47915)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(declare-fun b!96016 () Bool)

(declare-fun res!48482 () Bool)

(assert (=> b!96016 (=> (not res!48482) (not e!62624))))

(assert (=> b!96016 (= res!48482 (valid!379 (_2!1173 lt!47912)))))

(declare-fun bm!9720 () Bool)

(assert (=> bm!9720 (= call!9722 (seekEntryOrOpen!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (_keys!4143 newMap!16) (mask!6542 newMap!16)))))

(declare-fun b!96017 () Bool)

(declare-fun lt!47928 () Unit!2864)

(assert (=> b!96017 (= e!62626 lt!47928)))

(assert (=> b!96017 (= lt!47928 (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!40 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (defaultEntry!2457 newMap!16)))))

(assert (=> b!96017 (= lt!47921 call!9722)))

(assert (=> b!96017 (= c!16147 ((_ is MissingZero!252) lt!47921))))

(assert (=> b!96017 e!62631))

(declare-fun b!96018 () Bool)

(declare-fun Unit!2877 () Unit!2864)

(assert (=> b!96018 (= e!62625 Unit!2877)))

(declare-fun lt!47914 () Unit!2864)

(declare-fun lemmaArrayContainsKeyThenInListMap!24 (array!4215 array!4217 (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 (_ BitVec 64) (_ BitVec 32) Int) Unit!2864)

(assert (=> b!96018 (= lt!47914 (lemmaArrayContainsKeyThenInListMap!24 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(assert (=> b!96018 (contains!794 (getCurrentListMap!470 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355))))

(declare-fun lt!47927 () Unit!2864)

(assert (=> b!96018 (= lt!47927 lt!47914)))

(assert (=> b!96018 false))

(declare-fun d!25311 () Bool)

(assert (=> d!25311 e!62624))

(declare-fun res!48484 () Bool)

(assert (=> d!25311 (=> (not res!48484) (not e!62624))))

(assert (=> d!25311 (= res!48484 (_1!1173 lt!47912))))

(assert (=> d!25311 (= lt!47912 (tuple2!2325 true (LongMapFixedSize!841 (defaultEntry!2457 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (bvadd (_size!469 newMap!16) #b00000000000000000000000000000001) (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16))) (array!4218 (store (arr!2004 (_values!2440 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (ValueCellFull!966 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2253 (_values!2440 newMap!16))) (_vacant!469 newMap!16))))))

(declare-fun lt!47930 () Unit!2864)

(declare-fun lt!47923 () Unit!2864)

(assert (=> d!25311 (= lt!47930 lt!47923)))

(declare-fun lt!47934 () array!4217)

(declare-fun lt!47926 () array!4215)

(assert (=> d!25311 (contains!794 (getCurrentListMap!470 lt!47926 lt!47934 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (select (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759))))))

(assert (=> d!25311 (= lt!47923 (lemmaValidKeyInArrayIsInListMap!101 lt!47926 lt!47934 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (defaultEntry!2457 newMap!16)))))

(assert (=> d!25311 (= lt!47934 (array!4218 (store (arr!2004 (_values!2440 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (ValueCellFull!966 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2253 (_values!2440 newMap!16))))))

(assert (=> d!25311 (= lt!47926 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16))))))

(declare-fun lt!47910 () Unit!2864)

(declare-fun lt!47939 () Unit!2864)

(assert (=> d!25311 (= lt!47910 lt!47939)))

(declare-fun lt!47924 () array!4215)

(assert (=> d!25311 (= (arrayCountValidKeys!0 lt!47924 (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (bvadd (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lemmaValidKeyAtIImpliesCountKeysIsOne!0 (array!4215 (_ BitVec 32)) Unit!2864)

(assert (=> d!25311 (= lt!47939 (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!47924 (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759))))))

(assert (=> d!25311 (= lt!47924 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16))))))

(declare-fun lt!47933 () Unit!2864)

(declare-fun lt!47931 () Unit!2864)

(assert (=> d!25311 (= lt!47933 lt!47931)))

(declare-fun lt!47938 () array!4215)

(assert (=> d!25311 (arrayContainsKey!0 lt!47938 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(declare-fun lemmaArrayContainsFromImpliesContainsFromZero!0 (array!4215 (_ BitVec 64) (_ BitVec 32)) Unit!2864)

(assert (=> d!25311 (= lt!47931 (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!47938 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759))))))

(assert (=> d!25311 (= lt!47938 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16))))))

(declare-fun lt!47917 () Unit!2864)

(declare-fun lt!47935 () Unit!2864)

(assert (=> d!25311 (= lt!47917 lt!47935)))

(assert (=> d!25311 (= (+!134 (getCurrentListMap!470 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!470 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16))) (array!4218 (store (arr!2004 (_values!2440 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (ValueCellFull!966 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2253 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lemmaAddValidKeyToArrayThenAddPairToListMap!24 (array!4215 array!4217 (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 (_ BitVec 32) (_ BitVec 64) V!3139 Int) Unit!2864)

(assert (=> d!25311 (= lt!47935 (lemmaAddValidKeyToArrayThenAddPairToListMap!24 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2457 newMap!16)))))

(declare-fun lt!47920 () Unit!2864)

(declare-fun lt!47936 () Unit!2864)

(assert (=> d!25311 (= lt!47920 lt!47936)))

(assert (=> d!25311 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16))) (mask!6542 newMap!16))))

(declare-fun lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 ((_ BitVec 64) array!4215 (_ BitVec 32) (_ BitVec 32)) Unit!2864)

(assert (=> d!25311 (= lt!47936 (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (_keys!4143 newMap!16) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (mask!6542 newMap!16)))))

(declare-fun lt!47922 () Unit!2864)

(declare-fun lt!47916 () Unit!2864)

(assert (=> d!25311 (= lt!47922 lt!47916)))

(assert (=> d!25311 (= (arrayCountValidKeys!0 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16))) #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!4143 newMap!16) #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))) #b00000000000000000000000000000001))))

(declare-fun lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (array!4215 (_ BitVec 32) (_ BitVec 64)) Unit!2864)

(assert (=> d!25311 (= lt!47916 (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!4143 newMap!16) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(declare-fun lt!47919 () Unit!2864)

(declare-fun lt!47929 () Unit!2864)

(assert (=> d!25311 (= lt!47919 lt!47929)))

(declare-fun lt!47925 () List!1574)

(declare-fun lt!47911 () (_ BitVec 32))

(assert (=> d!25311 (arrayNoDuplicates!0 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16))) lt!47911 lt!47925)))

(declare-fun lemmaPutNewValidKeyPreservesNoDuplicate!0 (array!4215 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1574) Unit!2864)

(assert (=> d!25311 (= lt!47929 (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!4143 newMap!16) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) lt!47911 lt!47925))))

(assert (=> d!25311 (= lt!47925 Nil!1571)))

(assert (=> d!25311 (= lt!47911 #b00000000000000000000000000000000)))

(declare-fun lt!47918 () Unit!2864)

(assert (=> d!25311 (= lt!47918 e!62625)))

(declare-fun c!16149 () Bool)

(assert (=> d!25311 (= c!16149 (arrayContainsKey!0 (_keys!4143 newMap!16) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun lt!47932 () Unit!2864)

(assert (=> d!25311 (= lt!47932 e!62626)))

(assert (=> d!25311 (= c!16150 (contains!794 (getCurrentListMap!470 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(assert (=> d!25311 (valid!379 newMap!16)))

(assert (=> d!25311 (= (updateHelperNewKey!40 newMap!16 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759))) lt!47912)))

(assert (= (and d!25311 c!16150) b!96004))

(assert (= (and d!25311 (not c!16150)) b!96017))

(assert (= (and b!96004 res!48489) b!96011))

(assert (= (and b!96011 res!48488) b!96015))

(assert (= (and b!96017 c!16147) b!96012))

(assert (= (and b!96017 (not c!16147)) b!96003))

(assert (= (and b!96012 res!48487) b!96006))

(assert (= (and b!96006 res!48490) b!96014))

(assert (= (and b!96003 c!16148) b!96010))

(assert (= (and b!96003 (not c!16148)) b!96002))

(assert (= (and b!96010 res!48485) b!96007))

(assert (= (and b!96007 res!48486) b!96008))

(assert (= (or b!96012 b!96010) bm!9717))

(assert (= (or b!96014 b!96008) bm!9719))

(assert (= (or b!96011 bm!9717) bm!9718))

(assert (= (or b!96004 b!96017) bm!9720))

(assert (= (and d!25311 c!16149) b!96018))

(assert (= (and d!25311 (not c!16149)) b!96013))

(assert (= (and d!25311 res!48484) b!96016))

(assert (= (and b!96016 res!48482) b!96009))

(assert (= (and b!96009 res!48483) b!96005))

(assert (=> b!96018 m!103861))

(declare-fun m!104121 () Bool)

(assert (=> b!96018 m!104121))

(assert (=> b!96018 m!104035))

(assert (=> b!96018 m!104035))

(assert (=> b!96018 m!103861))

(declare-fun m!104123 () Bool)

(assert (=> b!96018 m!104123))

(assert (=> b!96017 m!103861))

(assert (=> b!96017 m!103953))

(assert (=> bm!9720 m!103861))

(assert (=> bm!9720 m!103981))

(declare-fun m!104125 () Bool)

(assert (=> b!96007 m!104125))

(declare-fun m!104127 () Bool)

(assert (=> bm!9718 m!104127))

(declare-fun m!104129 () Bool)

(assert (=> b!96009 m!104129))

(assert (=> b!96009 m!104129))

(assert (=> b!96009 m!103861))

(declare-fun m!104131 () Bool)

(assert (=> b!96009 m!104131))

(declare-fun m!104133 () Bool)

(assert (=> b!96015 m!104133))

(declare-fun m!104135 () Bool)

(assert (=> d!25311 m!104135))

(declare-fun m!104137 () Bool)

(assert (=> d!25311 m!104137))

(assert (=> d!25311 m!103861))

(declare-fun m!104139 () Bool)

(assert (=> d!25311 m!104139))

(declare-fun m!104141 () Bool)

(assert (=> d!25311 m!104141))

(assert (=> d!25311 m!103861))

(declare-fun m!104143 () Bool)

(assert (=> d!25311 m!104143))

(assert (=> d!25311 m!104029))

(assert (=> d!25311 m!103861))

(assert (=> d!25311 m!103979))

(declare-fun m!104145 () Bool)

(assert (=> d!25311 m!104145))

(declare-fun m!104147 () Bool)

(assert (=> d!25311 m!104147))

(assert (=> d!25311 m!104035))

(declare-fun m!104149 () Bool)

(assert (=> d!25311 m!104149))

(assert (=> d!25311 m!103861))

(assert (=> d!25311 m!103883))

(declare-fun m!104151 () Bool)

(assert (=> d!25311 m!104151))

(assert (=> d!25311 m!104035))

(declare-fun m!104153 () Bool)

(assert (=> d!25311 m!104153))

(declare-fun m!104155 () Bool)

(assert (=> d!25311 m!104155))

(declare-fun m!104157 () Bool)

(assert (=> d!25311 m!104157))

(assert (=> d!25311 m!104153))

(assert (=> d!25311 m!103861))

(declare-fun m!104159 () Bool)

(assert (=> d!25311 m!104159))

(declare-fun m!104161 () Bool)

(assert (=> d!25311 m!104161))

(assert (=> d!25311 m!103891))

(assert (=> d!25311 m!104155))

(assert (=> d!25311 m!104035))

(assert (=> d!25311 m!103861))

(assert (=> d!25311 m!104123))

(declare-fun m!104163 () Bool)

(assert (=> d!25311 m!104163))

(assert (=> d!25311 m!103861))

(declare-fun m!104165 () Bool)

(assert (=> d!25311 m!104165))

(declare-fun m!104167 () Bool)

(assert (=> d!25311 m!104167))

(declare-fun m!104169 () Bool)

(assert (=> d!25311 m!104169))

(assert (=> d!25311 m!103861))

(declare-fun m!104171 () Bool)

(assert (=> d!25311 m!104171))

(assert (=> b!96005 m!104129))

(assert (=> b!96005 m!103893))

(assert (=> b!96005 m!103893))

(declare-fun m!104173 () Bool)

(assert (=> b!96005 m!104173))

(assert (=> bm!9719 m!103861))

(assert (=> bm!9719 m!103979))

(assert (=> b!96004 m!103861))

(assert (=> b!96004 m!104003))

(declare-fun m!104175 () Bool)

(assert (=> b!96016 m!104175))

(declare-fun m!104177 () Bool)

(assert (=> b!96006 m!104177))

(assert (=> bm!9679 d!25311))

(declare-fun d!25313 () Bool)

(declare-fun res!48495 () Bool)

(declare-fun e!62636 () Bool)

(assert (=> d!25313 (=> res!48495 e!62636)))

(assert (=> d!25313 (= res!48495 (and ((_ is Cons!1569) (toList!779 lt!47639)) (= (_1!1172 (h!2162 (toList!779 lt!47639))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355))))))

(assert (=> d!25313 (= (containsKey!153 (toList!779 lt!47639) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) e!62636)))

(declare-fun b!96023 () Bool)

(declare-fun e!62637 () Bool)

(assert (=> b!96023 (= e!62636 e!62637)))

(declare-fun res!48496 () Bool)

(assert (=> b!96023 (=> (not res!48496) (not e!62637))))

(assert (=> b!96023 (= res!48496 (and (or (not ((_ is Cons!1569) (toList!779 lt!47639))) (bvsle (_1!1172 (h!2162 (toList!779 lt!47639))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355))) ((_ is Cons!1569) (toList!779 lt!47639)) (bvslt (_1!1172 (h!2162 (toList!779 lt!47639))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355))))))

(declare-fun b!96024 () Bool)

(assert (=> b!96024 (= e!62637 (containsKey!153 (t!5495 (toList!779 lt!47639)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(assert (= (and d!25313 (not res!48495)) b!96023))

(assert (= (and b!96023 res!48496) b!96024))

(assert (=> b!96024 m!103861))

(declare-fun m!104179 () Bool)

(assert (=> b!96024 m!104179))

(assert (=> d!25277 d!25313))

(declare-fun d!25315 () Bool)

(declare-fun e!62638 () Bool)

(assert (=> d!25315 e!62638))

(declare-fun res!48497 () Bool)

(assert (=> d!25315 (=> res!48497 e!62638)))

(declare-fun lt!47941 () Bool)

(assert (=> d!25315 (= res!48497 (not lt!47941))))

(declare-fun lt!47940 () Bool)

(assert (=> d!25315 (= lt!47941 lt!47940)))

(declare-fun lt!47942 () Unit!2864)

(declare-fun e!62639 () Unit!2864)

(assert (=> d!25315 (= lt!47942 e!62639)))

(declare-fun c!16151 () Bool)

(assert (=> d!25315 (= c!16151 lt!47940)))

(assert (=> d!25315 (= lt!47940 (containsKey!153 (toList!779 lt!47819) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!25315 (= (contains!794 lt!47819 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!47941)))

(declare-fun b!96025 () Bool)

(declare-fun lt!47943 () Unit!2864)

(assert (=> b!96025 (= e!62639 lt!47943)))

(assert (=> b!96025 (= lt!47943 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 lt!47819) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!96025 (isDefined!102 (getValueByKey!149 (toList!779 lt!47819) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!96026 () Bool)

(declare-fun Unit!2878 () Unit!2864)

(assert (=> b!96026 (= e!62639 Unit!2878)))

(declare-fun b!96027 () Bool)

(assert (=> b!96027 (= e!62638 (isDefined!102 (getValueByKey!149 (toList!779 lt!47819) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!25315 c!16151) b!96025))

(assert (= (and d!25315 (not c!16151)) b!96026))

(assert (= (and d!25315 (not res!48497)) b!96027))

(assert (=> d!25315 m!104013))

(declare-fun m!104181 () Bool)

(assert (=> d!25315 m!104181))

(assert (=> b!96025 m!104013))

(declare-fun m!104183 () Bool)

(assert (=> b!96025 m!104183))

(assert (=> b!96025 m!104013))

(declare-fun m!104185 () Bool)

(assert (=> b!96025 m!104185))

(assert (=> b!96025 m!104185))

(declare-fun m!104187 () Bool)

(assert (=> b!96025 m!104187))

(assert (=> b!96027 m!104013))

(assert (=> b!96027 m!104185))

(assert (=> b!96027 m!104185))

(assert (=> b!96027 m!104187))

(assert (=> b!95937 d!25315))

(declare-fun d!25317 () Bool)

(assert (=> d!25317 (= (+!134 (getCurrentListMap!470 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!470 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) lt!47752 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!47946 () Unit!2864)

(declare-fun choose!575 (array!4215 array!4217 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 V!3139 Int) Unit!2864)

(assert (=> d!25317 (= lt!47946 (choose!575 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) lt!47752 (zeroValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2342 newMap!16) (defaultEntry!2457 newMap!16)))))

(assert (=> d!25317 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25317 (= (lemmaChangeZeroKeyThenAddPairToListMap!40 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) lt!47752 (zeroValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2342 newMap!16) (defaultEntry!2457 newMap!16)) lt!47946)))

(declare-fun bs!3949 () Bool)

(assert (= bs!3949 d!25317))

(assert (=> bs!3949 m!104095))

(assert (=> bs!3949 m!104035))

(assert (=> bs!3949 m!103883))

(declare-fun m!104189 () Bool)

(assert (=> bs!3949 m!104189))

(assert (=> bs!3949 m!104035))

(declare-fun m!104191 () Bool)

(assert (=> bs!3949 m!104191))

(assert (=> bs!3949 m!103883))

(declare-fun m!104193 () Bool)

(assert (=> bs!3949 m!104193))

(assert (=> b!95834 d!25317))

(declare-fun d!25319 () Bool)

(assert (=> d!25319 (= (get!1272 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!95850 d!25319))

(declare-fun d!25321 () Bool)

(declare-fun res!48498 () Bool)

(declare-fun e!62640 () Bool)

(assert (=> d!25321 (=> (not res!48498) (not e!62640))))

(assert (=> d!25321 (= res!48498 (simpleValid!67 (_2!1173 lt!47744)))))

(assert (=> d!25321 (= (valid!379 (_2!1173 lt!47744)) e!62640)))

(declare-fun b!96028 () Bool)

(declare-fun res!48499 () Bool)

(assert (=> b!96028 (=> (not res!48499) (not e!62640))))

(assert (=> b!96028 (= res!48499 (= (arrayCountValidKeys!0 (_keys!4143 (_2!1173 lt!47744)) #b00000000000000000000000000000000 (size!2252 (_keys!4143 (_2!1173 lt!47744)))) (_size!469 (_2!1173 lt!47744))))))

(declare-fun b!96029 () Bool)

(declare-fun res!48500 () Bool)

(assert (=> b!96029 (=> (not res!48500) (not e!62640))))

(assert (=> b!96029 (= res!48500 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4143 (_2!1173 lt!47744)) (mask!6542 (_2!1173 lt!47744))))))

(declare-fun b!96030 () Bool)

(assert (=> b!96030 (= e!62640 (arrayNoDuplicates!0 (_keys!4143 (_2!1173 lt!47744)) #b00000000000000000000000000000000 Nil!1571))))

(assert (= (and d!25321 res!48498) b!96028))

(assert (= (and b!96028 res!48499) b!96029))

(assert (= (and b!96029 res!48500) b!96030))

(declare-fun m!104195 () Bool)

(assert (=> d!25321 m!104195))

(declare-fun m!104197 () Bool)

(assert (=> b!96028 m!104197))

(declare-fun m!104199 () Bool)

(assert (=> b!96029 m!104199))

(declare-fun m!104201 () Bool)

(assert (=> b!96030 m!104201))

(assert (=> d!25279 d!25321))

(assert (=> d!25279 d!25295))

(assert (=> d!25299 d!25267))

(declare-fun d!25323 () Bool)

(declare-fun res!48509 () Bool)

(declare-fun e!62643 () Bool)

(assert (=> d!25323 (=> (not res!48509) (not e!62643))))

(assert (=> d!25323 (= res!48509 (validMask!0 (mask!6542 newMap!16)))))

(assert (=> d!25323 (= (simpleValid!67 newMap!16) e!62643)))

(declare-fun b!96040 () Bool)

(declare-fun res!48512 () Bool)

(assert (=> b!96040 (=> (not res!48512) (not e!62643))))

(declare-fun size!2256 (LongMapFixedSize!840) (_ BitVec 32))

(assert (=> b!96040 (= res!48512 (bvsge (size!2256 newMap!16) (_size!469 newMap!16)))))

(declare-fun b!96042 () Bool)

(assert (=> b!96042 (= e!62643 (and (bvsge (extraKeys!2282 newMap!16) #b00000000000000000000000000000000) (bvsle (extraKeys!2282 newMap!16) #b00000000000000000000000000000011) (bvsge (_vacant!469 newMap!16) #b00000000000000000000000000000000)))))

(declare-fun b!96041 () Bool)

(declare-fun res!48510 () Bool)

(assert (=> b!96041 (=> (not res!48510) (not e!62643))))

(assert (=> b!96041 (= res!48510 (= (size!2256 newMap!16) (bvadd (_size!469 newMap!16) (bvsdiv (bvadd (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!96039 () Bool)

(declare-fun res!48511 () Bool)

(assert (=> b!96039 (=> (not res!48511) (not e!62643))))

(assert (=> b!96039 (= res!48511 (and (= (size!2253 (_values!2440 newMap!16)) (bvadd (mask!6542 newMap!16) #b00000000000000000000000000000001)) (= (size!2252 (_keys!4143 newMap!16)) (size!2253 (_values!2440 newMap!16))) (bvsge (_size!469 newMap!16) #b00000000000000000000000000000000) (bvsle (_size!469 newMap!16) (bvadd (mask!6542 newMap!16) #b00000000000000000000000000000001))))))

(assert (= (and d!25323 res!48509) b!96039))

(assert (= (and b!96039 res!48511) b!96040))

(assert (= (and b!96040 res!48512) b!96041))

(assert (= (and b!96041 res!48510) b!96042))

(assert (=> d!25323 m!104095))

(declare-fun m!104203 () Bool)

(assert (=> b!96040 m!104203))

(assert (=> b!96041 m!104203))

(assert (=> d!25295 d!25323))

(declare-fun d!25325 () Bool)

(assert (=> d!25325 (= (validKeyInArray!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (and (not (= (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!95873 d!25325))

(declare-fun d!25327 () Bool)

(declare-fun e!62644 () Bool)

(assert (=> d!25327 e!62644))

(declare-fun res!48513 () Bool)

(assert (=> d!25327 (=> (not res!48513) (not e!62644))))

(declare-fun lt!47949 () ListLongMap!1527)

(assert (=> d!25327 (= res!48513 (contains!794 lt!47949 (_1!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!47948 () List!1573)

(assert (=> d!25327 (= lt!47949 (ListLongMap!1528 lt!47948))))

(declare-fun lt!47950 () Unit!2864)

(declare-fun lt!47947 () Unit!2864)

(assert (=> d!25327 (= lt!47950 lt!47947)))

(assert (=> d!25327 (= (getValueByKey!149 lt!47948 (_1!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!154 (_2!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!25327 (= lt!47947 (lemmaContainsTupThenGetReturnValue!65 lt!47948 (_1!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!25327 (= lt!47948 (insertStrictlySorted!68 (toList!779 (ite c!16102 (ite c!16108 call!9664 call!9682) call!9666)) (_1!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!25327 (= (+!134 (ite c!16102 (ite c!16108 call!9664 call!9682) call!9666) (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!47949)))

(declare-fun b!96043 () Bool)

(declare-fun res!48514 () Bool)

(assert (=> b!96043 (=> (not res!48514) (not e!62644))))

(assert (=> b!96043 (= res!48514 (= (getValueByKey!149 (toList!779 lt!47949) (_1!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!154 (_2!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!96044 () Bool)

(assert (=> b!96044 (= e!62644 (contains!797 (toList!779 lt!47949) (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!25327 res!48513) b!96043))

(assert (= (and b!96043 res!48514) b!96044))

(declare-fun m!104205 () Bool)

(assert (=> d!25327 m!104205))

(declare-fun m!104207 () Bool)

(assert (=> d!25327 m!104207))

(declare-fun m!104209 () Bool)

(assert (=> d!25327 m!104209))

(declare-fun m!104211 () Bool)

(assert (=> d!25327 m!104211))

(declare-fun m!104213 () Bool)

(assert (=> b!96043 m!104213))

(declare-fun m!104215 () Bool)

(assert (=> b!96044 m!104215))

(assert (=> bm!9672 d!25327))

(declare-fun d!25329 () Bool)

(declare-fun e!62647 () Bool)

(assert (=> d!25329 e!62647))

(declare-fun res!48517 () Bool)

(assert (=> d!25329 (=> (not res!48517) (not e!62647))))

(assert (=> d!25329 (= res!48517 (and (bvsge (index!3151 lt!47759) #b00000000000000000000000000000000) (bvslt (index!3151 lt!47759) (size!2252 (_keys!4143 newMap!16)))))))

(declare-fun lt!47953 () Unit!2864)

(declare-fun choose!576 (array!4215 array!4217 (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 (_ BitVec 32) Int) Unit!2864)

(assert (=> d!25329 (= lt!47953 (choose!576 (_keys!4143 newMap!16) lt!47748 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (index!3151 lt!47759) (defaultEntry!2457 newMap!16)))))

(assert (=> d!25329 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25329 (= (lemmaValidKeyInArrayIsInListMap!101 (_keys!4143 newMap!16) lt!47748 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (index!3151 lt!47759) (defaultEntry!2457 newMap!16)) lt!47953)))

(declare-fun b!96047 () Bool)

(assert (=> b!96047 (= e!62647 (contains!794 (getCurrentListMap!470 (_keys!4143 newMap!16) lt!47748 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (select (arr!2003 (_keys!4143 newMap!16)) (index!3151 lt!47759))))))

(assert (= (and d!25329 res!48517) b!96047))

(declare-fun m!104217 () Bool)

(assert (=> d!25329 m!104217))

(assert (=> d!25329 m!104095))

(declare-fun m!104219 () Bool)

(assert (=> b!96047 m!104219))

(assert (=> b!96047 m!103989))

(assert (=> b!96047 m!104219))

(assert (=> b!96047 m!103989))

(declare-fun m!104221 () Bool)

(assert (=> b!96047 m!104221))

(assert (=> b!95828 d!25329))

(declare-fun b!96048 () Bool)

(declare-fun res!48524 () Bool)

(declare-fun e!62657 () Bool)

(assert (=> b!96048 (=> (not res!48524) (not e!62657))))

(declare-fun e!62658 () Bool)

(assert (=> b!96048 (= res!48524 e!62658)))

(declare-fun c!16156 () Bool)

(assert (=> b!96048 (= c!16156 (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun d!25331 () Bool)

(assert (=> d!25331 e!62657))

(declare-fun res!48525 () Bool)

(assert (=> d!25331 (=> (not res!48525) (not e!62657))))

(assert (=> d!25331 (= res!48525 (or (bvsge #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))))

(declare-fun lt!47960 () ListLongMap!1527)

(declare-fun lt!47974 () ListLongMap!1527)

(assert (=> d!25331 (= lt!47960 lt!47974)))

(declare-fun lt!47968 () Unit!2864)

(declare-fun e!62655 () Unit!2864)

(assert (=> d!25331 (= lt!47968 e!62655)))

(declare-fun c!16152 () Bool)

(declare-fun e!62653 () Bool)

(assert (=> d!25331 (= c!16152 e!62653)))

(declare-fun res!48523 () Bool)

(assert (=> d!25331 (=> (not res!48523) (not e!62653))))

(assert (=> d!25331 (= res!48523 (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun e!62652 () ListLongMap!1527)

(assert (=> d!25331 (= lt!47974 e!62652)))

(declare-fun c!16153 () Bool)

(assert (=> d!25331 (= c!16153 (and (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!25331 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25331 (= (getCurrentListMap!470 (_keys!4143 newMap!16) (array!4218 (store (arr!2004 (_values!2440 newMap!16)) (index!3151 lt!47759) (ValueCellFull!966 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2253 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) lt!47960)))

(declare-fun bm!9721 () Bool)

(declare-fun call!9726 () ListLongMap!1527)

(declare-fun call!9727 () ListLongMap!1527)

(assert (=> bm!9721 (= call!9726 call!9727)))

(declare-fun bm!9722 () Bool)

(declare-fun call!9724 () ListLongMap!1527)

(declare-fun call!9729 () ListLongMap!1527)

(assert (=> bm!9722 (= call!9724 call!9729)))

(declare-fun b!96049 () Bool)

(declare-fun e!62648 () Bool)

(declare-fun call!9728 () Bool)

(assert (=> b!96049 (= e!62648 (not call!9728))))

(declare-fun bm!9723 () Bool)

(assert (=> bm!9723 (= call!9727 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (array!4218 (store (arr!2004 (_values!2440 newMap!16)) (index!3151 lt!47759) (ValueCellFull!966 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2253 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun bm!9724 () Bool)

(declare-fun call!9725 () ListLongMap!1527)

(assert (=> bm!9724 (= call!9725 call!9726)))

(declare-fun b!96050 () Bool)

(assert (=> b!96050 (= e!62653 (validKeyInArray!0 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96051 () Bool)

(declare-fun e!62654 () Bool)

(assert (=> b!96051 (= e!62654 (validKeyInArray!0 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96052 () Bool)

(declare-fun e!62651 () Bool)

(assert (=> b!96052 (= e!62651 (= (apply!91 lt!47960 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2342 newMap!16)))))

(declare-fun b!96053 () Bool)

(declare-fun e!62649 () ListLongMap!1527)

(assert (=> b!96053 (= e!62649 call!9725)))

(declare-fun b!96054 () Bool)

(declare-fun call!9730 () Bool)

(assert (=> b!96054 (= e!62658 (not call!9730))))

(declare-fun b!96055 () Bool)

(assert (=> b!96055 (= e!62648 e!62651)))

(declare-fun res!48522 () Bool)

(assert (=> b!96055 (= res!48522 call!9728)))

(assert (=> b!96055 (=> (not res!48522) (not e!62651))))

(declare-fun bm!9725 () Bool)

(assert (=> bm!9725 (= call!9728 (contains!794 lt!47960 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96056 () Bool)

(declare-fun e!62656 () Bool)

(declare-fun e!62659 () Bool)

(assert (=> b!96056 (= e!62656 e!62659)))

(declare-fun res!48519 () Bool)

(assert (=> b!96056 (=> (not res!48519) (not e!62659))))

(assert (=> b!96056 (= res!48519 (contains!794 lt!47960 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!96056 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun c!16157 () Bool)

(declare-fun bm!9726 () Bool)

(assert (=> bm!9726 (= call!9729 (+!134 (ite c!16153 call!9727 (ite c!16157 call!9726 call!9725)) (ite (or c!16153 c!16157) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(declare-fun b!96057 () Bool)

(declare-fun e!62660 () Bool)

(assert (=> b!96057 (= e!62660 (= (apply!91 lt!47960 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2342 newMap!16)))))

(declare-fun b!96058 () Bool)

(assert (=> b!96058 (= e!62657 e!62648)))

(declare-fun c!16155 () Bool)

(assert (=> b!96058 (= c!16155 (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!96059 () Bool)

(declare-fun c!16154 () Bool)

(assert (=> b!96059 (= c!16154 (and (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!62650 () ListLongMap!1527)

(assert (=> b!96059 (= e!62650 e!62649)))

(declare-fun b!96060 () Bool)

(assert (=> b!96060 (= e!62649 call!9724)))

(declare-fun b!96061 () Bool)

(declare-fun lt!47962 () Unit!2864)

(assert (=> b!96061 (= e!62655 lt!47962)))

(declare-fun lt!47967 () ListLongMap!1527)

(assert (=> b!96061 (= lt!47967 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (array!4218 (store (arr!2004 (_values!2440 newMap!16)) (index!3151 lt!47759) (ValueCellFull!966 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2253 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!47966 () (_ BitVec 64))

(assert (=> b!96061 (= lt!47966 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!47963 () (_ BitVec 64))

(assert (=> b!96061 (= lt!47963 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!47958 () Unit!2864)

(assert (=> b!96061 (= lt!47958 (addStillContains!67 lt!47967 lt!47966 (zeroValue!2342 newMap!16) lt!47963))))

(assert (=> b!96061 (contains!794 (+!134 lt!47967 (tuple2!2323 lt!47966 (zeroValue!2342 newMap!16))) lt!47963)))

(declare-fun lt!47975 () Unit!2864)

(assert (=> b!96061 (= lt!47975 lt!47958)))

(declare-fun lt!47970 () ListLongMap!1527)

(assert (=> b!96061 (= lt!47970 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (array!4218 (store (arr!2004 (_values!2440 newMap!16)) (index!3151 lt!47759) (ValueCellFull!966 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2253 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!47972 () (_ BitVec 64))

(assert (=> b!96061 (= lt!47972 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!47961 () (_ BitVec 64))

(assert (=> b!96061 (= lt!47961 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!47971 () Unit!2864)

(assert (=> b!96061 (= lt!47971 (addApplyDifferent!67 lt!47970 lt!47972 (minValue!2342 newMap!16) lt!47961))))

(assert (=> b!96061 (= (apply!91 (+!134 lt!47970 (tuple2!2323 lt!47972 (minValue!2342 newMap!16))) lt!47961) (apply!91 lt!47970 lt!47961))))

(declare-fun lt!47955 () Unit!2864)

(assert (=> b!96061 (= lt!47955 lt!47971)))

(declare-fun lt!47959 () ListLongMap!1527)

(assert (=> b!96061 (= lt!47959 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (array!4218 (store (arr!2004 (_values!2440 newMap!16)) (index!3151 lt!47759) (ValueCellFull!966 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2253 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!47964 () (_ BitVec 64))

(assert (=> b!96061 (= lt!47964 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!47954 () (_ BitVec 64))

(assert (=> b!96061 (= lt!47954 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!47957 () Unit!2864)

(assert (=> b!96061 (= lt!47957 (addApplyDifferent!67 lt!47959 lt!47964 (zeroValue!2342 newMap!16) lt!47954))))

(assert (=> b!96061 (= (apply!91 (+!134 lt!47959 (tuple2!2323 lt!47964 (zeroValue!2342 newMap!16))) lt!47954) (apply!91 lt!47959 lt!47954))))

(declare-fun lt!47965 () Unit!2864)

(assert (=> b!96061 (= lt!47965 lt!47957)))

(declare-fun lt!47956 () ListLongMap!1527)

(assert (=> b!96061 (= lt!47956 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (array!4218 (store (arr!2004 (_values!2440 newMap!16)) (index!3151 lt!47759) (ValueCellFull!966 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2253 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!47973 () (_ BitVec 64))

(assert (=> b!96061 (= lt!47973 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!47969 () (_ BitVec 64))

(assert (=> b!96061 (= lt!47969 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!96061 (= lt!47962 (addApplyDifferent!67 lt!47956 lt!47973 (minValue!2342 newMap!16) lt!47969))))

(assert (=> b!96061 (= (apply!91 (+!134 lt!47956 (tuple2!2323 lt!47973 (minValue!2342 newMap!16))) lt!47969) (apply!91 lt!47956 lt!47969))))

(declare-fun b!96062 () Bool)

(assert (=> b!96062 (= e!62652 e!62650)))

(assert (=> b!96062 (= c!16157 (and (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!96063 () Bool)

(declare-fun res!48521 () Bool)

(assert (=> b!96063 (=> (not res!48521) (not e!62657))))

(assert (=> b!96063 (= res!48521 e!62656)))

(declare-fun res!48520 () Bool)

(assert (=> b!96063 (=> res!48520 e!62656)))

(assert (=> b!96063 (= res!48520 (not e!62654))))

(declare-fun res!48526 () Bool)

(assert (=> b!96063 (=> (not res!48526) (not e!62654))))

(assert (=> b!96063 (= res!48526 (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun bm!9727 () Bool)

(assert (=> bm!9727 (= call!9730 (contains!794 lt!47960 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96064 () Bool)

(assert (=> b!96064 (= e!62658 e!62660)))

(declare-fun res!48518 () Bool)

(assert (=> b!96064 (= res!48518 call!9730)))

(assert (=> b!96064 (=> (not res!48518) (not e!62660))))

(declare-fun b!96065 () Bool)

(assert (=> b!96065 (= e!62659 (= (apply!91 lt!47960 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) (get!1269 (select (arr!2004 (array!4218 (store (arr!2004 (_values!2440 newMap!16)) (index!3151 lt!47759) (ValueCellFull!966 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2253 (_values!2440 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!364 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!96065 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (array!4218 (store (arr!2004 (_values!2440 newMap!16)) (index!3151 lt!47759) (ValueCellFull!966 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2253 (_values!2440 newMap!16))))))))

(assert (=> b!96065 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun b!96066 () Bool)

(declare-fun Unit!2879 () Unit!2864)

(assert (=> b!96066 (= e!62655 Unit!2879)))

(declare-fun b!96067 () Bool)

(assert (=> b!96067 (= e!62652 (+!134 call!9729 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))

(declare-fun b!96068 () Bool)

(assert (=> b!96068 (= e!62650 call!9724)))

(assert (= (and d!25331 c!16153) b!96067))

(assert (= (and d!25331 (not c!16153)) b!96062))

(assert (= (and b!96062 c!16157) b!96068))

(assert (= (and b!96062 (not c!16157)) b!96059))

(assert (= (and b!96059 c!16154) b!96060))

(assert (= (and b!96059 (not c!16154)) b!96053))

(assert (= (or b!96060 b!96053) bm!9724))

(assert (= (or b!96068 bm!9724) bm!9721))

(assert (= (or b!96068 b!96060) bm!9722))

(assert (= (or b!96067 bm!9721) bm!9723))

(assert (= (or b!96067 bm!9722) bm!9726))

(assert (= (and d!25331 res!48523) b!96050))

(assert (= (and d!25331 c!16152) b!96061))

(assert (= (and d!25331 (not c!16152)) b!96066))

(assert (= (and d!25331 res!48525) b!96063))

(assert (= (and b!96063 res!48526) b!96051))

(assert (= (and b!96063 (not res!48520)) b!96056))

(assert (= (and b!96056 res!48519) b!96065))

(assert (= (and b!96063 res!48521) b!96048))

(assert (= (and b!96048 c!16156) b!96064))

(assert (= (and b!96048 (not c!16156)) b!96054))

(assert (= (and b!96064 res!48518) b!96057))

(assert (= (or b!96064 b!96054) bm!9727))

(assert (= (and b!96048 res!48524) b!96058))

(assert (= (and b!96058 c!16155) b!96055))

(assert (= (and b!96058 (not c!16155)) b!96049))

(assert (= (and b!96055 res!48522) b!96052))

(assert (= (or b!96055 b!96049) bm!9725))

(declare-fun b_lambda!4243 () Bool)

(assert (=> (not b_lambda!4243) (not b!96065)))

(declare-fun tb!1897 () Bool)

(declare-fun t!5504 () Bool)

(assert (=> (and b!95640 (= (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) (defaultEntry!2457 newMap!16)) t!5504) tb!1897))

(declare-fun result!3229 () Bool)

(assert (=> tb!1897 (= result!3229 tp_is_empty!2619)))

(assert (=> b!96065 t!5504))

(declare-fun b_and!5867 () Bool)

(assert (= b_and!5863 (and (=> t!5504 result!3229) b_and!5867)))

(declare-fun t!5506 () Bool)

(declare-fun tb!1899 () Bool)

(assert (=> (and b!95639 (= (defaultEntry!2457 newMap!16) (defaultEntry!2457 newMap!16)) t!5506) tb!1899))

(declare-fun result!3231 () Bool)

(assert (= result!3231 result!3229))

(assert (=> b!96065 t!5506))

(declare-fun b_and!5869 () Bool)

(assert (= b_and!5865 (and (=> t!5506 result!3231) b_and!5869)))

(declare-fun m!104223 () Bool)

(assert (=> bm!9726 m!104223))

(declare-fun m!104225 () Bool)

(assert (=> b!96057 m!104225))

(declare-fun m!104227 () Bool)

(assert (=> b!96061 m!104227))

(declare-fun m!104229 () Bool)

(assert (=> b!96061 m!104229))

(declare-fun m!104231 () Bool)

(assert (=> b!96061 m!104231))

(declare-fun m!104233 () Bool)

(assert (=> b!96061 m!104233))

(declare-fun m!104235 () Bool)

(assert (=> b!96061 m!104235))

(declare-fun m!104237 () Bool)

(assert (=> b!96061 m!104237))

(declare-fun m!104239 () Bool)

(assert (=> b!96061 m!104239))

(declare-fun m!104241 () Bool)

(assert (=> b!96061 m!104241))

(declare-fun m!104243 () Bool)

(assert (=> b!96061 m!104243))

(declare-fun m!104245 () Bool)

(assert (=> b!96061 m!104245))

(declare-fun m!104247 () Bool)

(assert (=> b!96061 m!104247))

(declare-fun m!104249 () Bool)

(assert (=> b!96061 m!104249))

(declare-fun m!104251 () Bool)

(assert (=> b!96061 m!104251))

(assert (=> b!96061 m!104229))

(declare-fun m!104253 () Bool)

(assert (=> b!96061 m!104253))

(assert (=> b!96061 m!104235))

(declare-fun m!104255 () Bool)

(assert (=> b!96061 m!104255))

(assert (=> b!96061 m!104239))

(declare-fun m!104257 () Bool)

(assert (=> b!96061 m!104257))

(assert (=> b!96061 m!104117))

(assert (=> b!96061 m!104245))

(assert (=> bm!9723 m!104257))

(assert (=> b!96056 m!104117))

(assert (=> b!96056 m!104117))

(declare-fun m!104259 () Bool)

(assert (=> b!96056 m!104259))

(assert (=> b!96051 m!104117))

(assert (=> b!96051 m!104117))

(declare-fun m!104261 () Bool)

(assert (=> b!96051 m!104261))

(declare-fun m!104263 () Bool)

(assert (=> b!96067 m!104263))

(declare-fun m!104265 () Bool)

(assert (=> bm!9727 m!104265))

(declare-fun m!104267 () Bool)

(assert (=> b!96052 m!104267))

(declare-fun m!104269 () Bool)

(assert (=> bm!9725 m!104269))

(assert (=> b!96050 m!104117))

(assert (=> b!96050 m!104117))

(assert (=> b!96050 m!104261))

(declare-fun m!104271 () Bool)

(assert (=> b!96065 m!104271))

(declare-fun m!104273 () Bool)

(assert (=> b!96065 m!104273))

(declare-fun m!104275 () Bool)

(assert (=> b!96065 m!104275))

(assert (=> b!96065 m!104117))

(assert (=> b!96065 m!104273))

(assert (=> b!96065 m!104117))

(declare-fun m!104277 () Bool)

(assert (=> b!96065 m!104277))

(assert (=> b!96065 m!104271))

(assert (=> d!25331 m!104095))

(assert (=> b!95828 d!25331))

(declare-fun d!25333 () Bool)

(declare-fun e!62663 () Bool)

(assert (=> d!25333 e!62663))

(declare-fun res!48529 () Bool)

(assert (=> d!25333 (=> (not res!48529) (not e!62663))))

(assert (=> d!25333 (= res!48529 (and (bvsge (index!3151 lt!47759) #b00000000000000000000000000000000) (bvslt (index!3151 lt!47759) (size!2253 (_values!2440 newMap!16)))))))

(declare-fun lt!47978 () Unit!2864)

(declare-fun choose!577 (array!4215 array!4217 (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 (_ BitVec 32) (_ BitVec 64) V!3139 Int) Unit!2864)

(assert (=> d!25333 (= lt!47978 (choose!577 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (index!3151 lt!47759) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2457 newMap!16)))))

(assert (=> d!25333 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25333 (= (lemmaChangeValueExistingKeyToArrayThenAddPairToListMap!40 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (index!3151 lt!47759) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2457 newMap!16)) lt!47978)))

(declare-fun b!96071 () Bool)

(assert (=> b!96071 (= e!62663 (= (+!134 (getCurrentListMap!470 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!470 (_keys!4143 newMap!16) (array!4218 (store (arr!2004 (_values!2440 newMap!16)) (index!3151 lt!47759) (ValueCellFull!966 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2253 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16))))))

(assert (= (and d!25333 res!48529) b!96071))

(assert (=> d!25333 m!103861))

(assert (=> d!25333 m!103883))

(declare-fun m!104279 () Bool)

(assert (=> d!25333 m!104279))

(assert (=> d!25333 m!104095))

(assert (=> b!96071 m!104035))

(assert (=> b!96071 m!104035))

(assert (=> b!96071 m!104149))

(assert (=> b!96071 m!103961))

(assert (=> b!96071 m!103959))

(assert (=> b!95828 d!25333))

(declare-fun d!25335 () Bool)

(declare-fun e!62664 () Bool)

(assert (=> d!25335 e!62664))

(declare-fun res!48530 () Bool)

(assert (=> d!25335 (=> res!48530 e!62664)))

(declare-fun lt!47980 () Bool)

(assert (=> d!25335 (= res!48530 (not lt!47980))))

(declare-fun lt!47979 () Bool)

(assert (=> d!25335 (= lt!47980 lt!47979)))

(declare-fun lt!47981 () Unit!2864)

(declare-fun e!62665 () Unit!2864)

(assert (=> d!25335 (= lt!47981 e!62665)))

(declare-fun c!16158 () Bool)

(assert (=> d!25335 (= c!16158 lt!47979)))

(assert (=> d!25335 (= lt!47979 (containsKey!153 (toList!779 call!9666) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(assert (=> d!25335 (= (contains!794 call!9666 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) lt!47980)))

(declare-fun b!96072 () Bool)

(declare-fun lt!47982 () Unit!2864)

(assert (=> b!96072 (= e!62665 lt!47982)))

(assert (=> b!96072 (= lt!47982 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 call!9666) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(assert (=> b!96072 (isDefined!102 (getValueByKey!149 (toList!779 call!9666) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(declare-fun b!96073 () Bool)

(declare-fun Unit!2880 () Unit!2864)

(assert (=> b!96073 (= e!62665 Unit!2880)))

(declare-fun b!96074 () Bool)

(assert (=> b!96074 (= e!62664 (isDefined!102 (getValueByKey!149 (toList!779 call!9666) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355))))))

(assert (= (and d!25335 c!16158) b!96072))

(assert (= (and d!25335 (not c!16158)) b!96073))

(assert (= (and d!25335 (not res!48530)) b!96074))

(assert (=> d!25335 m!103861))

(declare-fun m!104281 () Bool)

(assert (=> d!25335 m!104281))

(assert (=> b!96072 m!103861))

(declare-fun m!104283 () Bool)

(assert (=> b!96072 m!104283))

(assert (=> b!96072 m!103861))

(declare-fun m!104285 () Bool)

(assert (=> b!96072 m!104285))

(assert (=> b!96072 m!104285))

(declare-fun m!104287 () Bool)

(assert (=> b!96072 m!104287))

(assert (=> b!96074 m!103861))

(assert (=> b!96074 m!104285))

(assert (=> b!96074 m!104285))

(assert (=> b!96074 m!104287))

(assert (=> b!95828 d!25335))

(declare-fun b!96075 () Bool)

(declare-fun res!48537 () Bool)

(declare-fun e!62675 () Bool)

(assert (=> b!96075 (=> (not res!48537) (not e!62675))))

(declare-fun e!62676 () Bool)

(assert (=> b!96075 (= res!48537 e!62676)))

(declare-fun c!16163 () Bool)

(assert (=> b!96075 (= c!16163 (not (= (bvand (ite c!16102 (ite c!16108 (extraKeys!2282 newMap!16) lt!47750) (extraKeys!2282 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun d!25337 () Bool)

(assert (=> d!25337 e!62675))

(declare-fun res!48538 () Bool)

(assert (=> d!25337 (=> (not res!48538) (not e!62675))))

(assert (=> d!25337 (= res!48538 (or (bvsge #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))))

(declare-fun lt!47989 () ListLongMap!1527)

(declare-fun lt!48003 () ListLongMap!1527)

(assert (=> d!25337 (= lt!47989 lt!48003)))

(declare-fun lt!47997 () Unit!2864)

(declare-fun e!62673 () Unit!2864)

(assert (=> d!25337 (= lt!47997 e!62673)))

(declare-fun c!16159 () Bool)

(declare-fun e!62671 () Bool)

(assert (=> d!25337 (= c!16159 e!62671)))

(declare-fun res!48536 () Bool)

(assert (=> d!25337 (=> (not res!48536) (not e!62671))))

(assert (=> d!25337 (= res!48536 (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun e!62670 () ListLongMap!1527)

(assert (=> d!25337 (= lt!48003 e!62670)))

(declare-fun c!16160 () Bool)

(assert (=> d!25337 (= c!16160 (and (not (= (bvand (ite c!16102 (ite c!16108 (extraKeys!2282 newMap!16) lt!47750) (extraKeys!2282 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite c!16102 (ite c!16108 (extraKeys!2282 newMap!16) lt!47750) (extraKeys!2282 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!25337 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25337 (= (getCurrentListMap!470 (_keys!4143 newMap!16) (ite c!16102 (_values!2440 newMap!16) lt!47748) (mask!6542 newMap!16) (ite c!16102 (ite c!16108 (extraKeys!2282 newMap!16) lt!47750) (extraKeys!2282 newMap!16)) (zeroValue!2342 newMap!16) (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) lt!47989)))

(declare-fun bm!9728 () Bool)

(declare-fun call!9733 () ListLongMap!1527)

(declare-fun call!9734 () ListLongMap!1527)

(assert (=> bm!9728 (= call!9733 call!9734)))

(declare-fun bm!9729 () Bool)

(declare-fun call!9731 () ListLongMap!1527)

(declare-fun call!9736 () ListLongMap!1527)

(assert (=> bm!9729 (= call!9731 call!9736)))

(declare-fun b!96076 () Bool)

(declare-fun e!62666 () Bool)

(declare-fun call!9735 () Bool)

(assert (=> b!96076 (= e!62666 (not call!9735))))

(declare-fun bm!9730 () Bool)

(assert (=> bm!9730 (= call!9734 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (ite c!16102 (_values!2440 newMap!16) lt!47748) (mask!6542 newMap!16) (ite c!16102 (ite c!16108 (extraKeys!2282 newMap!16) lt!47750) (extraKeys!2282 newMap!16)) (zeroValue!2342 newMap!16) (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun bm!9731 () Bool)

(declare-fun call!9732 () ListLongMap!1527)

(assert (=> bm!9731 (= call!9732 call!9733)))

(declare-fun b!96077 () Bool)

(assert (=> b!96077 (= e!62671 (validKeyInArray!0 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96078 () Bool)

(declare-fun e!62672 () Bool)

(assert (=> b!96078 (= e!62672 (validKeyInArray!0 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96079 () Bool)

(declare-fun e!62669 () Bool)

(assert (=> b!96079 (= e!62669 (= (apply!91 lt!47989 #b1000000000000000000000000000000000000000000000000000000000000000) (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))))

(declare-fun b!96080 () Bool)

(declare-fun e!62667 () ListLongMap!1527)

(assert (=> b!96080 (= e!62667 call!9732)))

(declare-fun b!96081 () Bool)

(declare-fun call!9737 () Bool)

(assert (=> b!96081 (= e!62676 (not call!9737))))

(declare-fun b!96082 () Bool)

(assert (=> b!96082 (= e!62666 e!62669)))

(declare-fun res!48535 () Bool)

(assert (=> b!96082 (= res!48535 call!9735)))

(assert (=> b!96082 (=> (not res!48535) (not e!62669))))

(declare-fun bm!9732 () Bool)

(assert (=> bm!9732 (= call!9735 (contains!794 lt!47989 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96083 () Bool)

(declare-fun e!62674 () Bool)

(declare-fun e!62677 () Bool)

(assert (=> b!96083 (= e!62674 e!62677)))

(declare-fun res!48532 () Bool)

(assert (=> b!96083 (=> (not res!48532) (not e!62677))))

(assert (=> b!96083 (= res!48532 (contains!794 lt!47989 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!96083 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun bm!9733 () Bool)

(declare-fun c!16164 () Bool)

(assert (=> bm!9733 (= call!9736 (+!134 (ite c!16160 call!9734 (ite c!16164 call!9733 call!9732)) (ite (or c!16160 c!16164) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))))))

(declare-fun b!96084 () Bool)

(declare-fun e!62678 () Bool)

(assert (=> b!96084 (= e!62678 (= (apply!91 lt!47989 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2342 newMap!16)))))

(declare-fun b!96085 () Bool)

(assert (=> b!96085 (= e!62675 e!62666)))

(declare-fun c!16162 () Bool)

(assert (=> b!96085 (= c!16162 (not (= (bvand (ite c!16102 (ite c!16108 (extraKeys!2282 newMap!16) lt!47750) (extraKeys!2282 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun c!16161 () Bool)

(declare-fun b!96086 () Bool)

(assert (=> b!96086 (= c!16161 (and (not (= (bvand (ite c!16102 (ite c!16108 (extraKeys!2282 newMap!16) lt!47750) (extraKeys!2282 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite c!16102 (ite c!16108 (extraKeys!2282 newMap!16) lt!47750) (extraKeys!2282 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!62668 () ListLongMap!1527)

(assert (=> b!96086 (= e!62668 e!62667)))

(declare-fun b!96087 () Bool)

(assert (=> b!96087 (= e!62667 call!9731)))

(declare-fun b!96088 () Bool)

(declare-fun lt!47991 () Unit!2864)

(assert (=> b!96088 (= e!62673 lt!47991)))

(declare-fun lt!47996 () ListLongMap!1527)

(assert (=> b!96088 (= lt!47996 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (ite c!16102 (_values!2440 newMap!16) lt!47748) (mask!6542 newMap!16) (ite c!16102 (ite c!16108 (extraKeys!2282 newMap!16) lt!47750) (extraKeys!2282 newMap!16)) (zeroValue!2342 newMap!16) (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!47995 () (_ BitVec 64))

(assert (=> b!96088 (= lt!47995 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!47992 () (_ BitVec 64))

(assert (=> b!96088 (= lt!47992 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!47987 () Unit!2864)

(assert (=> b!96088 (= lt!47987 (addStillContains!67 lt!47996 lt!47995 (zeroValue!2342 newMap!16) lt!47992))))

(assert (=> b!96088 (contains!794 (+!134 lt!47996 (tuple2!2323 lt!47995 (zeroValue!2342 newMap!16))) lt!47992)))

(declare-fun lt!48004 () Unit!2864)

(assert (=> b!96088 (= lt!48004 lt!47987)))

(declare-fun lt!47999 () ListLongMap!1527)

(assert (=> b!96088 (= lt!47999 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (ite c!16102 (_values!2440 newMap!16) lt!47748) (mask!6542 newMap!16) (ite c!16102 (ite c!16108 (extraKeys!2282 newMap!16) lt!47750) (extraKeys!2282 newMap!16)) (zeroValue!2342 newMap!16) (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48001 () (_ BitVec 64))

(assert (=> b!96088 (= lt!48001 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!47990 () (_ BitVec 64))

(assert (=> b!96088 (= lt!47990 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48000 () Unit!2864)

(assert (=> b!96088 (= lt!48000 (addApplyDifferent!67 lt!47999 lt!48001 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)) lt!47990))))

(assert (=> b!96088 (= (apply!91 (+!134 lt!47999 (tuple2!2323 lt!48001 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))) lt!47990) (apply!91 lt!47999 lt!47990))))

(declare-fun lt!47984 () Unit!2864)

(assert (=> b!96088 (= lt!47984 lt!48000)))

(declare-fun lt!47988 () ListLongMap!1527)

(assert (=> b!96088 (= lt!47988 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (ite c!16102 (_values!2440 newMap!16) lt!47748) (mask!6542 newMap!16) (ite c!16102 (ite c!16108 (extraKeys!2282 newMap!16) lt!47750) (extraKeys!2282 newMap!16)) (zeroValue!2342 newMap!16) (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!47993 () (_ BitVec 64))

(assert (=> b!96088 (= lt!47993 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!47983 () (_ BitVec 64))

(assert (=> b!96088 (= lt!47983 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!47986 () Unit!2864)

(assert (=> b!96088 (= lt!47986 (addApplyDifferent!67 lt!47988 lt!47993 (zeroValue!2342 newMap!16) lt!47983))))

(assert (=> b!96088 (= (apply!91 (+!134 lt!47988 (tuple2!2323 lt!47993 (zeroValue!2342 newMap!16))) lt!47983) (apply!91 lt!47988 lt!47983))))

(declare-fun lt!47994 () Unit!2864)

(assert (=> b!96088 (= lt!47994 lt!47986)))

(declare-fun lt!47985 () ListLongMap!1527)

(assert (=> b!96088 (= lt!47985 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (ite c!16102 (_values!2440 newMap!16) lt!47748) (mask!6542 newMap!16) (ite c!16102 (ite c!16108 (extraKeys!2282 newMap!16) lt!47750) (extraKeys!2282 newMap!16)) (zeroValue!2342 newMap!16) (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48002 () (_ BitVec 64))

(assert (=> b!96088 (= lt!48002 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!47998 () (_ BitVec 64))

(assert (=> b!96088 (= lt!47998 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!96088 (= lt!47991 (addApplyDifferent!67 lt!47985 lt!48002 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)) lt!47998))))

(assert (=> b!96088 (= (apply!91 (+!134 lt!47985 (tuple2!2323 lt!48002 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))) lt!47998) (apply!91 lt!47985 lt!47998))))

(declare-fun b!96089 () Bool)

(assert (=> b!96089 (= e!62670 e!62668)))

(assert (=> b!96089 (= c!16164 (and (not (= (bvand (ite c!16102 (ite c!16108 (extraKeys!2282 newMap!16) lt!47750) (extraKeys!2282 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite c!16102 (ite c!16108 (extraKeys!2282 newMap!16) lt!47750) (extraKeys!2282 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!96090 () Bool)

(declare-fun res!48534 () Bool)

(assert (=> b!96090 (=> (not res!48534) (not e!62675))))

(assert (=> b!96090 (= res!48534 e!62674)))

(declare-fun res!48533 () Bool)

(assert (=> b!96090 (=> res!48533 e!62674)))

(assert (=> b!96090 (= res!48533 (not e!62672))))

(declare-fun res!48539 () Bool)

(assert (=> b!96090 (=> (not res!48539) (not e!62672))))

(assert (=> b!96090 (= res!48539 (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun bm!9734 () Bool)

(assert (=> bm!9734 (= call!9737 (contains!794 lt!47989 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96091 () Bool)

(assert (=> b!96091 (= e!62676 e!62678)))

(declare-fun res!48531 () Bool)

(assert (=> b!96091 (= res!48531 call!9737)))

(assert (=> b!96091 (=> (not res!48531) (not e!62678))))

(declare-fun b!96092 () Bool)

(assert (=> b!96092 (= e!62677 (= (apply!91 lt!47989 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) (get!1269 (select (arr!2004 (ite c!16102 (_values!2440 newMap!16) lt!47748)) #b00000000000000000000000000000000) (dynLambda!364 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!96092 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (ite c!16102 (_values!2440 newMap!16) lt!47748))))))

(assert (=> b!96092 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun b!96093 () Bool)

(declare-fun Unit!2881 () Unit!2864)

(assert (=> b!96093 (= e!62673 Unit!2881)))

(declare-fun b!96094 () Bool)

(assert (=> b!96094 (= e!62670 (+!134 call!9736 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))))))

(declare-fun b!96095 () Bool)

(assert (=> b!96095 (= e!62668 call!9731)))

(assert (= (and d!25337 c!16160) b!96094))

(assert (= (and d!25337 (not c!16160)) b!96089))

(assert (= (and b!96089 c!16164) b!96095))

(assert (= (and b!96089 (not c!16164)) b!96086))

(assert (= (and b!96086 c!16161) b!96087))

(assert (= (and b!96086 (not c!16161)) b!96080))

(assert (= (or b!96087 b!96080) bm!9731))

(assert (= (or b!96095 bm!9731) bm!9728))

(assert (= (or b!96095 b!96087) bm!9729))

(assert (= (or b!96094 bm!9728) bm!9730))

(assert (= (or b!96094 bm!9729) bm!9733))

(assert (= (and d!25337 res!48536) b!96077))

(assert (= (and d!25337 c!16159) b!96088))

(assert (= (and d!25337 (not c!16159)) b!96093))

(assert (= (and d!25337 res!48538) b!96090))

(assert (= (and b!96090 res!48539) b!96078))

(assert (= (and b!96090 (not res!48533)) b!96083))

(assert (= (and b!96083 res!48532) b!96092))

(assert (= (and b!96090 res!48534) b!96075))

(assert (= (and b!96075 c!16163) b!96091))

(assert (= (and b!96075 (not c!16163)) b!96081))

(assert (= (and b!96091 res!48531) b!96084))

(assert (= (or b!96091 b!96081) bm!9734))

(assert (= (and b!96075 res!48537) b!96085))

(assert (= (and b!96085 c!16162) b!96082))

(assert (= (and b!96085 (not c!16162)) b!96076))

(assert (= (and b!96082 res!48535) b!96079))

(assert (= (or b!96082 b!96076) bm!9732))

(declare-fun b_lambda!4245 () Bool)

(assert (=> (not b_lambda!4245) (not b!96092)))

(assert (=> b!96092 t!5504))

(declare-fun b_and!5871 () Bool)

(assert (= b_and!5867 (and (=> t!5504 result!3229) b_and!5871)))

(assert (=> b!96092 t!5506))

(declare-fun b_and!5873 () Bool)

(assert (= b_and!5869 (and (=> t!5506 result!3231) b_and!5873)))

(declare-fun m!104289 () Bool)

(assert (=> bm!9733 m!104289))

(declare-fun m!104291 () Bool)

(assert (=> b!96084 m!104291))

(declare-fun m!104293 () Bool)

(assert (=> b!96088 m!104293))

(declare-fun m!104295 () Bool)

(assert (=> b!96088 m!104295))

(declare-fun m!104297 () Bool)

(assert (=> b!96088 m!104297))

(declare-fun m!104299 () Bool)

(assert (=> b!96088 m!104299))

(declare-fun m!104301 () Bool)

(assert (=> b!96088 m!104301))

(declare-fun m!104303 () Bool)

(assert (=> b!96088 m!104303))

(declare-fun m!104305 () Bool)

(assert (=> b!96088 m!104305))

(declare-fun m!104307 () Bool)

(assert (=> b!96088 m!104307))

(declare-fun m!104309 () Bool)

(assert (=> b!96088 m!104309))

(declare-fun m!104311 () Bool)

(assert (=> b!96088 m!104311))

(declare-fun m!104313 () Bool)

(assert (=> b!96088 m!104313))

(declare-fun m!104315 () Bool)

(assert (=> b!96088 m!104315))

(declare-fun m!104317 () Bool)

(assert (=> b!96088 m!104317))

(assert (=> b!96088 m!104295))

(declare-fun m!104319 () Bool)

(assert (=> b!96088 m!104319))

(assert (=> b!96088 m!104301))

(declare-fun m!104321 () Bool)

(assert (=> b!96088 m!104321))

(assert (=> b!96088 m!104305))

(declare-fun m!104323 () Bool)

(assert (=> b!96088 m!104323))

(assert (=> b!96088 m!104117))

(assert (=> b!96088 m!104311))

(assert (=> bm!9730 m!104323))

(assert (=> b!96083 m!104117))

(assert (=> b!96083 m!104117))

(declare-fun m!104325 () Bool)

(assert (=> b!96083 m!104325))

(assert (=> b!96078 m!104117))

(assert (=> b!96078 m!104117))

(assert (=> b!96078 m!104261))

(declare-fun m!104327 () Bool)

(assert (=> b!96094 m!104327))

(declare-fun m!104329 () Bool)

(assert (=> bm!9734 m!104329))

(declare-fun m!104331 () Bool)

(assert (=> b!96079 m!104331))

(declare-fun m!104333 () Bool)

(assert (=> bm!9732 m!104333))

(assert (=> b!96077 m!104117))

(assert (=> b!96077 m!104117))

(assert (=> b!96077 m!104261))

(declare-fun m!104335 () Bool)

(assert (=> b!96092 m!104335))

(assert (=> b!96092 m!104273))

(declare-fun m!104337 () Bool)

(assert (=> b!96092 m!104337))

(assert (=> b!96092 m!104117))

(assert (=> b!96092 m!104273))

(assert (=> b!96092 m!104117))

(declare-fun m!104339 () Bool)

(assert (=> b!96092 m!104339))

(assert (=> b!96092 m!104335))

(assert (=> d!25337 m!104095))

(assert (=> bm!9661 d!25337))

(declare-fun d!25339 () Bool)

(declare-fun get!1273 (Option!155) V!3139)

(assert (=> d!25339 (= (apply!91 lt!47819 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1273 (getValueByKey!149 (toList!779 lt!47819) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!3950 () Bool)

(assert (= bs!3950 d!25339))

(assert (=> bs!3950 m!104013))

(assert (=> bs!3950 m!104185))

(assert (=> bs!3950 m!104185))

(declare-fun m!104341 () Bool)

(assert (=> bs!3950 m!104341))

(assert (=> b!95946 d!25339))

(declare-fun d!25341 () Bool)

(declare-fun c!16165 () Bool)

(assert (=> d!25341 (= c!16165 ((_ is ValueCellFull!966) (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!62679 () V!3139)

(assert (=> d!25341 (= (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) e!62679)))

(declare-fun b!96096 () Bool)

(assert (=> b!96096 (= e!62679 (get!1271 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!96097 () Bool)

(assert (=> b!96097 (= e!62679 (get!1272 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25341 c!16165) b!96096))

(assert (= (and d!25341 (not c!16165)) b!96097))

(assert (=> b!96096 m!104085))

(assert (=> b!96096 m!103881))

(declare-fun m!104343 () Bool)

(assert (=> b!96096 m!104343))

(assert (=> b!96097 m!104085))

(assert (=> b!96097 m!103881))

(declare-fun m!104345 () Bool)

(assert (=> b!96097 m!104345))

(assert (=> b!95946 d!25341))

(declare-fun b!96110 () Bool)

(declare-fun c!16172 () Bool)

(declare-fun lt!48013 () (_ BitVec 64))

(assert (=> b!96110 (= c!16172 (= lt!48013 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!62686 () SeekEntryResult!252)

(declare-fun e!62688 () SeekEntryResult!252)

(assert (=> b!96110 (= e!62686 e!62688)))

(declare-fun b!96111 () Bool)

(declare-fun lt!48012 () SeekEntryResult!252)

(assert (=> b!96111 (= e!62686 (Found!252 (index!3152 lt!48012)))))

(declare-fun b!96112 () Bool)

(assert (=> b!96112 (= e!62688 (MissingZero!252 (index!3152 lt!48012)))))

(declare-fun b!96113 () Bool)

(declare-fun e!62687 () SeekEntryResult!252)

(assert (=> b!96113 (= e!62687 e!62686)))

(assert (=> b!96113 (= lt!48013 (select (arr!2003 (_keys!4143 newMap!16)) (index!3152 lt!48012)))))

(declare-fun c!16173 () Bool)

(assert (=> b!96113 (= c!16173 (= lt!48013 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(declare-fun b!96114 () Bool)

(declare-fun seekKeyOrZeroReturnVacant!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!4215 (_ BitVec 32)) SeekEntryResult!252)

(assert (=> b!96114 (= e!62688 (seekKeyOrZeroReturnVacant!0 (x!12800 lt!48012) (index!3152 lt!48012) (index!3152 lt!48012) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (_keys!4143 newMap!16) (mask!6542 newMap!16)))))

(declare-fun b!96115 () Bool)

(assert (=> b!96115 (= e!62687 Undefined!252)))

(declare-fun lt!48011 () SeekEntryResult!252)

(declare-fun d!25343 () Bool)

(assert (=> d!25343 (and (or ((_ is Undefined!252) lt!48011) (not ((_ is Found!252) lt!48011)) (and (bvsge (index!3151 lt!48011) #b00000000000000000000000000000000) (bvslt (index!3151 lt!48011) (size!2252 (_keys!4143 newMap!16))))) (or ((_ is Undefined!252) lt!48011) ((_ is Found!252) lt!48011) (not ((_ is MissingZero!252) lt!48011)) (and (bvsge (index!3150 lt!48011) #b00000000000000000000000000000000) (bvslt (index!3150 lt!48011) (size!2252 (_keys!4143 newMap!16))))) (or ((_ is Undefined!252) lt!48011) ((_ is Found!252) lt!48011) ((_ is MissingZero!252) lt!48011) (not ((_ is MissingVacant!252) lt!48011)) (and (bvsge (index!3153 lt!48011) #b00000000000000000000000000000000) (bvslt (index!3153 lt!48011) (size!2252 (_keys!4143 newMap!16))))) (or ((_ is Undefined!252) lt!48011) (ite ((_ is Found!252) lt!48011) (= (select (arr!2003 (_keys!4143 newMap!16)) (index!3151 lt!48011)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (ite ((_ is MissingZero!252) lt!48011) (= (select (arr!2003 (_keys!4143 newMap!16)) (index!3150 lt!48011)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!252) lt!48011) (= (select (arr!2003 (_keys!4143 newMap!16)) (index!3153 lt!48011)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25343 (= lt!48011 e!62687)))

(declare-fun c!16174 () Bool)

(assert (=> d!25343 (= c!16174 (and ((_ is Intermediate!252) lt!48012) (undefined!1064 lt!48012)))))

(declare-fun seekKeyOrZeroOrLongMinValue!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 64) array!4215 (_ BitVec 32)) SeekEntryResult!252)

(declare-fun toIndex!0 ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))

(assert (=> d!25343 (= lt!48012 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (mask!6542 newMap!16)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (_keys!4143 newMap!16) (mask!6542 newMap!16)))))

(assert (=> d!25343 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25343 (= (seekEntryOrOpen!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (_keys!4143 newMap!16) (mask!6542 newMap!16)) lt!48011)))

(assert (= (and d!25343 c!16174) b!96115))

(assert (= (and d!25343 (not c!16174)) b!96113))

(assert (= (and b!96113 c!16173) b!96111))

(assert (= (and b!96113 (not c!16173)) b!96110))

(assert (= (and b!96110 c!16172) b!96112))

(assert (= (and b!96110 (not c!16172)) b!96114))

(declare-fun m!104347 () Bool)

(assert (=> b!96113 m!104347))

(assert (=> b!96114 m!103861))

(declare-fun m!104349 () Bool)

(assert (=> b!96114 m!104349))

(assert (=> d!25343 m!104095))

(declare-fun m!104351 () Bool)

(assert (=> d!25343 m!104351))

(declare-fun m!104353 () Bool)

(assert (=> d!25343 m!104353))

(assert (=> d!25343 m!103861))

(declare-fun m!104355 () Bool)

(assert (=> d!25343 m!104355))

(declare-fun m!104357 () Bool)

(assert (=> d!25343 m!104357))

(declare-fun m!104359 () Bool)

(assert (=> d!25343 m!104359))

(assert (=> d!25343 m!103861))

(assert (=> d!25343 m!104353))

(assert (=> bm!9680 d!25343))

(declare-fun b!96124 () Bool)

(declare-fun e!62696 () Bool)

(declare-fun call!9740 () Bool)

(assert (=> b!96124 (= e!62696 call!9740)))

(declare-fun b!96125 () Bool)

(declare-fun e!62697 () Bool)

(assert (=> b!96125 (= e!62696 e!62697)))

(declare-fun lt!48020 () (_ BitVec 64))

(assert (=> b!96125 (= lt!48020 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48022 () Unit!2864)

(assert (=> b!96125 (= lt!48022 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4143 newMap!16) lt!48020 #b00000000000000000000000000000000))))

(assert (=> b!96125 (arrayContainsKey!0 (_keys!4143 newMap!16) lt!48020 #b00000000000000000000000000000000)))

(declare-fun lt!48021 () Unit!2864)

(assert (=> b!96125 (= lt!48021 lt!48022)))

(declare-fun res!48544 () Bool)

(assert (=> b!96125 (= res!48544 (= (seekEntryOrOpen!0 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000) (_keys!4143 newMap!16) (mask!6542 newMap!16)) (Found!252 #b00000000000000000000000000000000)))))

(assert (=> b!96125 (=> (not res!48544) (not e!62697))))

(declare-fun b!96126 () Bool)

(declare-fun e!62695 () Bool)

(assert (=> b!96126 (= e!62695 e!62696)))

(declare-fun c!16177 () Bool)

(assert (=> b!96126 (= c!16177 (validKeyInArray!0 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun d!25345 () Bool)

(declare-fun res!48545 () Bool)

(assert (=> d!25345 (=> res!48545 e!62695)))

(assert (=> d!25345 (= res!48545 (bvsge #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(assert (=> d!25345 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4143 newMap!16) (mask!6542 newMap!16)) e!62695)))

(declare-fun b!96127 () Bool)

(assert (=> b!96127 (= e!62697 call!9740)))

(declare-fun bm!9737 () Bool)

(assert (=> bm!9737 (= call!9740 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4143 newMap!16) (mask!6542 newMap!16)))))

(assert (= (and d!25345 (not res!48545)) b!96126))

(assert (= (and b!96126 c!16177) b!96125))

(assert (= (and b!96126 (not c!16177)) b!96124))

(assert (= (and b!96125 res!48544) b!96127))

(assert (= (or b!96127 b!96124) bm!9737))

(assert (=> b!96125 m!104117))

(declare-fun m!104361 () Bool)

(assert (=> b!96125 m!104361))

(declare-fun m!104363 () Bool)

(assert (=> b!96125 m!104363))

(assert (=> b!96125 m!104117))

(declare-fun m!104365 () Bool)

(assert (=> b!96125 m!104365))

(assert (=> b!96126 m!104117))

(assert (=> b!96126 m!104117))

(assert (=> b!96126 m!104261))

(declare-fun m!104367 () Bool)

(assert (=> bm!9737 m!104367))

(assert (=> b!95885 d!25345))

(declare-fun d!25347 () Bool)

(declare-fun lt!48025 () Bool)

(define-sort InoxSet (T) (Array T Bool))

(declare-fun content!99 (List!1574) (InoxSet (_ BitVec 64)))

(assert (=> d!25347 (= lt!48025 (select (content!99 Nil!1571) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(declare-fun e!62703 () Bool)

(assert (=> d!25347 (= lt!48025 e!62703)))

(declare-fun res!48551 () Bool)

(assert (=> d!25347 (=> (not res!48551) (not e!62703))))

(assert (=> d!25347 (= res!48551 ((_ is Cons!1570) Nil!1571))))

(assert (=> d!25347 (= (contains!796 Nil!1571 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) lt!48025)))

(declare-fun b!96132 () Bool)

(declare-fun e!62702 () Bool)

(assert (=> b!96132 (= e!62703 e!62702)))

(declare-fun res!48550 () Bool)

(assert (=> b!96132 (=> res!48550 e!62702)))

(assert (=> b!96132 (= res!48550 (= (h!2163 Nil!1571) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(declare-fun b!96133 () Bool)

(assert (=> b!96133 (= e!62702 (contains!796 (t!5496 Nil!1571) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(assert (= (and d!25347 res!48551) b!96132))

(assert (= (and b!96132 (not res!48550)) b!96133))

(declare-fun m!104369 () Bool)

(assert (=> d!25347 m!104369))

(assert (=> d!25347 m!103861))

(declare-fun m!104371 () Bool)

(assert (=> d!25347 m!104371))

(assert (=> b!96133 m!103861))

(declare-fun m!104373 () Bool)

(assert (=> b!96133 m!104373))

(assert (=> b!95875 d!25347))

(declare-fun d!25349 () Bool)

(declare-fun e!62704 () Bool)

(assert (=> d!25349 e!62704))

(declare-fun res!48552 () Bool)

(assert (=> d!25349 (=> res!48552 e!62704)))

(declare-fun lt!48027 () Bool)

(assert (=> d!25349 (= res!48552 (not lt!48027))))

(declare-fun lt!48026 () Bool)

(assert (=> d!25349 (= lt!48027 lt!48026)))

(declare-fun lt!48028 () Unit!2864)

(declare-fun e!62705 () Unit!2864)

(assert (=> d!25349 (= lt!48028 e!62705)))

(declare-fun c!16178 () Bool)

(assert (=> d!25349 (= c!16178 lt!48026)))

(assert (=> d!25349 (= lt!48026 (containsKey!153 (toList!779 call!9679) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(assert (=> d!25349 (= (contains!794 call!9679 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) lt!48027)))

(declare-fun b!96134 () Bool)

(declare-fun lt!48029 () Unit!2864)

(assert (=> b!96134 (= e!62705 lt!48029)))

(assert (=> b!96134 (= lt!48029 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 call!9679) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(assert (=> b!96134 (isDefined!102 (getValueByKey!149 (toList!779 call!9679) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(declare-fun b!96135 () Bool)

(declare-fun Unit!2882 () Unit!2864)

(assert (=> b!96135 (= e!62705 Unit!2882)))

(declare-fun b!96136 () Bool)

(assert (=> b!96136 (= e!62704 (isDefined!102 (getValueByKey!149 (toList!779 call!9679) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355))))))

(assert (= (and d!25349 c!16178) b!96134))

(assert (= (and d!25349 (not c!16178)) b!96135))

(assert (= (and d!25349 (not res!48552)) b!96136))

(assert (=> d!25349 m!103861))

(declare-fun m!104375 () Bool)

(assert (=> d!25349 m!104375))

(assert (=> b!96134 m!103861))

(declare-fun m!104377 () Bool)

(assert (=> b!96134 m!104377))

(assert (=> b!96134 m!103861))

(declare-fun m!104379 () Bool)

(assert (=> b!96134 m!104379))

(assert (=> b!96134 m!104379))

(declare-fun m!104381 () Bool)

(assert (=> b!96134 m!104381))

(assert (=> b!96136 m!103861))

(assert (=> b!96136 m!104379))

(assert (=> b!96136 m!104379))

(assert (=> b!96136 m!104381))

(assert (=> b!95813 d!25349))

(declare-fun d!25351 () Bool)

(declare-fun e!62706 () Bool)

(assert (=> d!25351 e!62706))

(declare-fun res!48553 () Bool)

(assert (=> d!25351 (=> res!48553 e!62706)))

(declare-fun lt!48031 () Bool)

(assert (=> d!25351 (= res!48553 (not lt!48031))))

(declare-fun lt!48030 () Bool)

(assert (=> d!25351 (= lt!48031 lt!48030)))

(declare-fun lt!48032 () Unit!2864)

(declare-fun e!62707 () Unit!2864)

(assert (=> d!25351 (= lt!48032 e!62707)))

(declare-fun c!16179 () Bool)

(assert (=> d!25351 (= c!16179 lt!48030)))

(assert (=> d!25351 (= lt!48030 (containsKey!153 (toList!779 lt!47819) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!25351 (= (contains!794 lt!47819 #b0000000000000000000000000000000000000000000000000000000000000000) lt!48031)))

(declare-fun b!96137 () Bool)

(declare-fun lt!48033 () Unit!2864)

(assert (=> b!96137 (= e!62707 lt!48033)))

(assert (=> b!96137 (= lt!48033 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 lt!47819) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!96137 (isDefined!102 (getValueByKey!149 (toList!779 lt!47819) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96138 () Bool)

(declare-fun Unit!2883 () Unit!2864)

(assert (=> b!96138 (= e!62707 Unit!2883)))

(declare-fun b!96139 () Bool)

(assert (=> b!96139 (= e!62706 (isDefined!102 (getValueByKey!149 (toList!779 lt!47819) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25351 c!16179) b!96137))

(assert (= (and d!25351 (not c!16179)) b!96138))

(assert (= (and d!25351 (not res!48553)) b!96139))

(declare-fun m!104383 () Bool)

(assert (=> d!25351 m!104383))

(declare-fun m!104385 () Bool)

(assert (=> b!96137 m!104385))

(declare-fun m!104387 () Bool)

(assert (=> b!96137 m!104387))

(assert (=> b!96137 m!104387))

(declare-fun m!104389 () Bool)

(assert (=> b!96137 m!104389))

(assert (=> b!96139 m!104387))

(assert (=> b!96139 m!104387))

(assert (=> b!96139 m!104389))

(assert (=> bm!9708 d!25351))

(declare-fun d!25353 () Bool)

(assert (=> d!25353 (= (apply!91 lt!47819 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1273 (getValueByKey!149 (toList!779 lt!47819) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!3951 () Bool)

(assert (= bs!3951 d!25353))

(declare-fun m!104391 () Bool)

(assert (=> bs!3951 m!104391))

(assert (=> bs!3951 m!104391))

(declare-fun m!104393 () Bool)

(assert (=> bs!3951 m!104393))

(assert (=> b!95933 d!25353))

(declare-fun d!25355 () Bool)

(declare-fun e!62710 () Bool)

(assert (=> d!25355 e!62710))

(declare-fun c!16182 () Bool)

(assert (=> d!25355 (= c!16182 (and (not (= (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> d!25355 true))

(declare-fun _$29!123 () Unit!2864)

(assert (=> d!25355 (= (choose!573 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (_values!2440 (v!2778 (underlying!331 thiss!992))) (mask!6542 (v!2778 (underlying!331 thiss!992))) (extraKeys!2282 (v!2778 (underlying!331 thiss!992))) (zeroValue!2342 (v!2778 (underlying!331 thiss!992))) (minValue!2342 (v!2778 (underlying!331 thiss!992))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2457 (v!2778 (underlying!331 thiss!992)))) _$29!123)))

(declare-fun b!96144 () Bool)

(assert (=> b!96144 (= e!62710 (arrayContainsKey!0 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun b!96145 () Bool)

(assert (=> b!96145 (= e!62710 (ite (= (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000000000) (not (= (bvand (extraKeys!2282 (v!2778 (underlying!331 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2282 (v!2778 (underlying!331 thiss!992))) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (= (and d!25355 c!16182) b!96144))

(assert (= (and d!25355 (not c!16182)) b!96145))

(assert (=> b!96144 m!103861))

(assert (=> b!96144 m!103865))

(assert (=> d!25289 d!25355))

(assert (=> d!25289 d!25267))

(assert (=> d!25285 d!25291))

(declare-fun d!25357 () Bool)

(assert (=> d!25357 (arrayNoDuplicates!0 (_keys!4143 (v!2778 (underlying!331 thiss!992))) from!355 Nil!1571)))

(assert (=> d!25357 true))

(declare-fun _$71!129 () Unit!2864)

(assert (=> d!25357 (= (choose!39 (_keys!4143 (v!2778 (underlying!331 thiss!992))) #b00000000000000000000000000000000 from!355) _$71!129)))

(declare-fun bs!3952 () Bool)

(assert (= bs!3952 d!25357))

(assert (=> bs!3952 m!103859))

(assert (=> d!25285 d!25357))

(declare-fun b!96146 () Bool)

(declare-fun res!48560 () Bool)

(declare-fun e!62720 () Bool)

(assert (=> b!96146 (=> (not res!48560) (not e!62720))))

(declare-fun e!62721 () Bool)

(assert (=> b!96146 (= res!48560 e!62721)))

(declare-fun c!16187 () Bool)

(assert (=> b!96146 (= c!16187 (not (= (bvand (ite (and c!16102 c!16108) lt!47752 (extraKeys!2282 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun d!25359 () Bool)

(assert (=> d!25359 e!62720))

(declare-fun res!48561 () Bool)

(assert (=> d!25359 (=> (not res!48561) (not e!62720))))

(assert (=> d!25359 (= res!48561 (or (bvsge #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))))

(declare-fun lt!48040 () ListLongMap!1527)

(declare-fun lt!48054 () ListLongMap!1527)

(assert (=> d!25359 (= lt!48040 lt!48054)))

(declare-fun lt!48048 () Unit!2864)

(declare-fun e!62718 () Unit!2864)

(assert (=> d!25359 (= lt!48048 e!62718)))

(declare-fun c!16183 () Bool)

(declare-fun e!62716 () Bool)

(assert (=> d!25359 (= c!16183 e!62716)))

(declare-fun res!48559 () Bool)

(assert (=> d!25359 (=> (not res!48559) (not e!62716))))

(assert (=> d!25359 (= res!48559 (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun e!62715 () ListLongMap!1527)

(assert (=> d!25359 (= lt!48054 e!62715)))

(declare-fun c!16184 () Bool)

(assert (=> d!25359 (= c!16184 (and (not (= (bvand (ite (and c!16102 c!16108) lt!47752 (extraKeys!2282 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (ite (and c!16102 c!16108) lt!47752 (extraKeys!2282 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!25359 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25359 (= (getCurrentListMap!470 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (ite (and c!16102 c!16108) lt!47752 (extraKeys!2282 newMap!16)) (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) lt!48040)))

(declare-fun bm!9738 () Bool)

(declare-fun call!9743 () ListLongMap!1527)

(declare-fun call!9744 () ListLongMap!1527)

(assert (=> bm!9738 (= call!9743 call!9744)))

(declare-fun bm!9739 () Bool)

(declare-fun call!9741 () ListLongMap!1527)

(declare-fun call!9746 () ListLongMap!1527)

(assert (=> bm!9739 (= call!9741 call!9746)))

(declare-fun b!96147 () Bool)

(declare-fun e!62711 () Bool)

(declare-fun call!9745 () Bool)

(assert (=> b!96147 (= e!62711 (not call!9745))))

(declare-fun bm!9740 () Bool)

(assert (=> bm!9740 (= call!9744 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (ite (and c!16102 c!16108) lt!47752 (extraKeys!2282 newMap!16)) (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun bm!9741 () Bool)

(declare-fun call!9742 () ListLongMap!1527)

(assert (=> bm!9741 (= call!9742 call!9743)))

(declare-fun b!96148 () Bool)

(assert (=> b!96148 (= e!62716 (validKeyInArray!0 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96149 () Bool)

(declare-fun e!62717 () Bool)

(assert (=> b!96149 (= e!62717 (validKeyInArray!0 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96150 () Bool)

(declare-fun e!62714 () Bool)

(assert (=> b!96150 (= e!62714 (= (apply!91 lt!48040 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2342 newMap!16)))))

(declare-fun b!96151 () Bool)

(declare-fun e!62712 () ListLongMap!1527)

(assert (=> b!96151 (= e!62712 call!9742)))

(declare-fun b!96152 () Bool)

(declare-fun call!9747 () Bool)

(assert (=> b!96152 (= e!62721 (not call!9747))))

(declare-fun b!96153 () Bool)

(assert (=> b!96153 (= e!62711 e!62714)))

(declare-fun res!48558 () Bool)

(assert (=> b!96153 (= res!48558 call!9745)))

(assert (=> b!96153 (=> (not res!48558) (not e!62714))))

(declare-fun bm!9742 () Bool)

(assert (=> bm!9742 (= call!9745 (contains!794 lt!48040 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96154 () Bool)

(declare-fun e!62719 () Bool)

(declare-fun e!62722 () Bool)

(assert (=> b!96154 (= e!62719 e!62722)))

(declare-fun res!48555 () Bool)

(assert (=> b!96154 (=> (not res!48555) (not e!62722))))

(assert (=> b!96154 (= res!48555 (contains!794 lt!48040 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!96154 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun bm!9743 () Bool)

(declare-fun c!16188 () Bool)

(assert (=> bm!9743 (= call!9746 (+!134 (ite c!16184 call!9744 (ite c!16188 call!9743 call!9742)) (ite (or c!16184 c!16188) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(declare-fun e!62723 () Bool)

(declare-fun b!96155 () Bool)

(assert (=> b!96155 (= e!62723 (= (apply!91 lt!48040 #b0000000000000000000000000000000000000000000000000000000000000000) (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))))))

(declare-fun b!96156 () Bool)

(assert (=> b!96156 (= e!62720 e!62711)))

(declare-fun c!16186 () Bool)

(assert (=> b!96156 (= c!16186 (not (= (bvand (ite (and c!16102 c!16108) lt!47752 (extraKeys!2282 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!96157 () Bool)

(declare-fun c!16185 () Bool)

(assert (=> b!96157 (= c!16185 (and (not (= (bvand (ite (and c!16102 c!16108) lt!47752 (extraKeys!2282 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (ite (and c!16102 c!16108) lt!47752 (extraKeys!2282 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!62713 () ListLongMap!1527)

(assert (=> b!96157 (= e!62713 e!62712)))

(declare-fun b!96158 () Bool)

(assert (=> b!96158 (= e!62712 call!9741)))

(declare-fun b!96159 () Bool)

(declare-fun lt!48042 () Unit!2864)

(assert (=> b!96159 (= e!62718 lt!48042)))

(declare-fun lt!48047 () ListLongMap!1527)

(assert (=> b!96159 (= lt!48047 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (ite (and c!16102 c!16108) lt!47752 (extraKeys!2282 newMap!16)) (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48046 () (_ BitVec 64))

(assert (=> b!96159 (= lt!48046 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48043 () (_ BitVec 64))

(assert (=> b!96159 (= lt!48043 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48038 () Unit!2864)

(assert (=> b!96159 (= lt!48038 (addStillContains!67 lt!48047 lt!48046 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)) lt!48043))))

(assert (=> b!96159 (contains!794 (+!134 lt!48047 (tuple2!2323 lt!48046 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)))) lt!48043)))

(declare-fun lt!48055 () Unit!2864)

(assert (=> b!96159 (= lt!48055 lt!48038)))

(declare-fun lt!48050 () ListLongMap!1527)

(assert (=> b!96159 (= lt!48050 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (ite (and c!16102 c!16108) lt!47752 (extraKeys!2282 newMap!16)) (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48052 () (_ BitVec 64))

(assert (=> b!96159 (= lt!48052 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48041 () (_ BitVec 64))

(assert (=> b!96159 (= lt!48041 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48051 () Unit!2864)

(assert (=> b!96159 (= lt!48051 (addApplyDifferent!67 lt!48050 lt!48052 (minValue!2342 newMap!16) lt!48041))))

(assert (=> b!96159 (= (apply!91 (+!134 lt!48050 (tuple2!2323 lt!48052 (minValue!2342 newMap!16))) lt!48041) (apply!91 lt!48050 lt!48041))))

(declare-fun lt!48035 () Unit!2864)

(assert (=> b!96159 (= lt!48035 lt!48051)))

(declare-fun lt!48039 () ListLongMap!1527)

(assert (=> b!96159 (= lt!48039 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (ite (and c!16102 c!16108) lt!47752 (extraKeys!2282 newMap!16)) (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48044 () (_ BitVec 64))

(assert (=> b!96159 (= lt!48044 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48034 () (_ BitVec 64))

(assert (=> b!96159 (= lt!48034 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48037 () Unit!2864)

(assert (=> b!96159 (= lt!48037 (addApplyDifferent!67 lt!48039 lt!48044 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)) lt!48034))))

(assert (=> b!96159 (= (apply!91 (+!134 lt!48039 (tuple2!2323 lt!48044 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)))) lt!48034) (apply!91 lt!48039 lt!48034))))

(declare-fun lt!48045 () Unit!2864)

(assert (=> b!96159 (= lt!48045 lt!48037)))

(declare-fun lt!48036 () ListLongMap!1527)

(assert (=> b!96159 (= lt!48036 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (ite (and c!16102 c!16108) lt!47752 (extraKeys!2282 newMap!16)) (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48053 () (_ BitVec 64))

(assert (=> b!96159 (= lt!48053 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48049 () (_ BitVec 64))

(assert (=> b!96159 (= lt!48049 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!96159 (= lt!48042 (addApplyDifferent!67 lt!48036 lt!48053 (minValue!2342 newMap!16) lt!48049))))

(assert (=> b!96159 (= (apply!91 (+!134 lt!48036 (tuple2!2323 lt!48053 (minValue!2342 newMap!16))) lt!48049) (apply!91 lt!48036 lt!48049))))

(declare-fun b!96160 () Bool)

(assert (=> b!96160 (= e!62715 e!62713)))

(assert (=> b!96160 (= c!16188 (and (not (= (bvand (ite (and c!16102 c!16108) lt!47752 (extraKeys!2282 newMap!16)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (ite (and c!16102 c!16108) lt!47752 (extraKeys!2282 newMap!16)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!96161 () Bool)

(declare-fun res!48557 () Bool)

(assert (=> b!96161 (=> (not res!48557) (not e!62720))))

(assert (=> b!96161 (= res!48557 e!62719)))

(declare-fun res!48556 () Bool)

(assert (=> b!96161 (=> res!48556 e!62719)))

(assert (=> b!96161 (= res!48556 (not e!62717))))

(declare-fun res!48562 () Bool)

(assert (=> b!96161 (=> (not res!48562) (not e!62717))))

(assert (=> b!96161 (= res!48562 (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun bm!9744 () Bool)

(assert (=> bm!9744 (= call!9747 (contains!794 lt!48040 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96162 () Bool)

(assert (=> b!96162 (= e!62721 e!62723)))

(declare-fun res!48554 () Bool)

(assert (=> b!96162 (= res!48554 call!9747)))

(assert (=> b!96162 (=> (not res!48554) (not e!62723))))

(declare-fun b!96163 () Bool)

(assert (=> b!96163 (= e!62722 (= (apply!91 lt!48040 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) (get!1269 (select (arr!2004 (_values!2440 newMap!16)) #b00000000000000000000000000000000) (dynLambda!364 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!96163 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (_values!2440 newMap!16))))))

(assert (=> b!96163 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun b!96164 () Bool)

(declare-fun Unit!2884 () Unit!2864)

(assert (=> b!96164 (= e!62718 Unit!2884)))

(declare-fun b!96165 () Bool)

(assert (=> b!96165 (= e!62715 (+!134 call!9746 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))

(declare-fun b!96166 () Bool)

(assert (=> b!96166 (= e!62713 call!9741)))

(assert (= (and d!25359 c!16184) b!96165))

(assert (= (and d!25359 (not c!16184)) b!96160))

(assert (= (and b!96160 c!16188) b!96166))

(assert (= (and b!96160 (not c!16188)) b!96157))

(assert (= (and b!96157 c!16185) b!96158))

(assert (= (and b!96157 (not c!16185)) b!96151))

(assert (= (or b!96158 b!96151) bm!9741))

(assert (= (or b!96166 bm!9741) bm!9738))

(assert (= (or b!96166 b!96158) bm!9739))

(assert (= (or b!96165 bm!9738) bm!9740))

(assert (= (or b!96165 bm!9739) bm!9743))

(assert (= (and d!25359 res!48559) b!96148))

(assert (= (and d!25359 c!16183) b!96159))

(assert (= (and d!25359 (not c!16183)) b!96164))

(assert (= (and d!25359 res!48561) b!96161))

(assert (= (and b!96161 res!48562) b!96149))

(assert (= (and b!96161 (not res!48556)) b!96154))

(assert (= (and b!96154 res!48555) b!96163))

(assert (= (and b!96161 res!48557) b!96146))

(assert (= (and b!96146 c!16187) b!96162))

(assert (= (and b!96146 (not c!16187)) b!96152))

(assert (= (and b!96162 res!48554) b!96155))

(assert (= (or b!96162 b!96152) bm!9744))

(assert (= (and b!96146 res!48560) b!96156))

(assert (= (and b!96156 c!16186) b!96153))

(assert (= (and b!96156 (not c!16186)) b!96147))

(assert (= (and b!96153 res!48558) b!96150))

(assert (= (or b!96153 b!96147) bm!9742))

(declare-fun b_lambda!4247 () Bool)

(assert (=> (not b_lambda!4247) (not b!96163)))

(assert (=> b!96163 t!5504))

(declare-fun b_and!5875 () Bool)

(assert (= b_and!5871 (and (=> t!5504 result!3229) b_and!5875)))

(assert (=> b!96163 t!5506))

(declare-fun b_and!5877 () Bool)

(assert (= b_and!5873 (and (=> t!5506 result!3231) b_and!5877)))

(declare-fun m!104395 () Bool)

(assert (=> bm!9743 m!104395))

(declare-fun m!104397 () Bool)

(assert (=> b!96155 m!104397))

(declare-fun m!104399 () Bool)

(assert (=> b!96159 m!104399))

(declare-fun m!104401 () Bool)

(assert (=> b!96159 m!104401))

(declare-fun m!104403 () Bool)

(assert (=> b!96159 m!104403))

(declare-fun m!104405 () Bool)

(assert (=> b!96159 m!104405))

(declare-fun m!104407 () Bool)

(assert (=> b!96159 m!104407))

(declare-fun m!104409 () Bool)

(assert (=> b!96159 m!104409))

(declare-fun m!104411 () Bool)

(assert (=> b!96159 m!104411))

(declare-fun m!104413 () Bool)

(assert (=> b!96159 m!104413))

(declare-fun m!104415 () Bool)

(assert (=> b!96159 m!104415))

(declare-fun m!104417 () Bool)

(assert (=> b!96159 m!104417))

(declare-fun m!104419 () Bool)

(assert (=> b!96159 m!104419))

(declare-fun m!104421 () Bool)

(assert (=> b!96159 m!104421))

(declare-fun m!104423 () Bool)

(assert (=> b!96159 m!104423))

(assert (=> b!96159 m!104401))

(declare-fun m!104425 () Bool)

(assert (=> b!96159 m!104425))

(assert (=> b!96159 m!104407))

(declare-fun m!104427 () Bool)

(assert (=> b!96159 m!104427))

(assert (=> b!96159 m!104411))

(declare-fun m!104429 () Bool)

(assert (=> b!96159 m!104429))

(assert (=> b!96159 m!104117))

(assert (=> b!96159 m!104417))

(assert (=> bm!9740 m!104429))

(assert (=> b!96154 m!104117))

(assert (=> b!96154 m!104117))

(declare-fun m!104431 () Bool)

(assert (=> b!96154 m!104431))

(assert (=> b!96149 m!104117))

(assert (=> b!96149 m!104117))

(assert (=> b!96149 m!104261))

(declare-fun m!104433 () Bool)

(assert (=> b!96165 m!104433))

(declare-fun m!104435 () Bool)

(assert (=> bm!9744 m!104435))

(declare-fun m!104437 () Bool)

(assert (=> b!96150 m!104437))

(declare-fun m!104439 () Bool)

(assert (=> bm!9742 m!104439))

(assert (=> b!96148 m!104117))

(assert (=> b!96148 m!104117))

(assert (=> b!96148 m!104261))

(declare-fun m!104441 () Bool)

(assert (=> b!96163 m!104441))

(assert (=> b!96163 m!104273))

(declare-fun m!104443 () Bool)

(assert (=> b!96163 m!104443))

(assert (=> b!96163 m!104117))

(assert (=> b!96163 m!104273))

(assert (=> b!96163 m!104117))

(declare-fun m!104445 () Bool)

(assert (=> b!96163 m!104445))

(assert (=> b!96163 m!104441))

(assert (=> d!25359 m!104095))

(assert (=> bm!9676 d!25359))

(declare-fun d!25361 () Bool)

(declare-fun isEmpty!353 (Option!155) Bool)

(assert (=> d!25361 (= (isDefined!102 (getValueByKey!149 (toList!779 lt!47639) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355))) (not (isEmpty!353 (getValueByKey!149 (toList!779 lt!47639) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))))

(declare-fun bs!3953 () Bool)

(assert (= bs!3953 d!25361))

(assert (=> bs!3953 m!103945))

(declare-fun m!104447 () Bool)

(assert (=> bs!3953 m!104447))

(assert (=> b!95724 d!25361))

(declare-fun b!96175 () Bool)

(declare-fun e!62728 () Option!155)

(assert (=> b!96175 (= e!62728 (Some!154 (_2!1172 (h!2162 (toList!779 lt!47639)))))))

(declare-fun b!96178 () Bool)

(declare-fun e!62729 () Option!155)

(assert (=> b!96178 (= e!62729 None!153)))

(declare-fun c!16193 () Bool)

(declare-fun d!25363 () Bool)

(assert (=> d!25363 (= c!16193 (and ((_ is Cons!1569) (toList!779 lt!47639)) (= (_1!1172 (h!2162 (toList!779 lt!47639))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355))))))

(assert (=> d!25363 (= (getValueByKey!149 (toList!779 lt!47639) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) e!62728)))

(declare-fun b!96177 () Bool)

(assert (=> b!96177 (= e!62729 (getValueByKey!149 (t!5495 (toList!779 lt!47639)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(declare-fun b!96176 () Bool)

(assert (=> b!96176 (= e!62728 e!62729)))

(declare-fun c!16194 () Bool)

(assert (=> b!96176 (= c!16194 (and ((_ is Cons!1569) (toList!779 lt!47639)) (not (= (_1!1172 (h!2162 (toList!779 lt!47639))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))))

(assert (= (and d!25363 c!16193) b!96175))

(assert (= (and d!25363 (not c!16193)) b!96176))

(assert (= (and b!96176 c!16194) b!96177))

(assert (= (and b!96176 (not c!16194)) b!96178))

(assert (=> b!96177 m!103861))

(declare-fun m!104449 () Bool)

(assert (=> b!96177 m!104449))

(assert (=> b!95724 d!25363))

(declare-fun e!62745 () Bool)

(declare-fun b!96203 () Bool)

(declare-fun lt!48076 () ListLongMap!1527)

(assert (=> b!96203 (= e!62745 (= lt!48076 (getCurrentListMapNoExtraKeys!99 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (_values!2440 (v!2778 (underlying!331 thiss!992))) (mask!6542 (v!2778 (underlying!331 thiss!992))) (extraKeys!2282 (v!2778 (underlying!331 thiss!992))) (zeroValue!2342 (v!2778 (underlying!331 thiss!992))) (minValue!2342 (v!2778 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))))))))

(declare-fun d!25365 () Bool)

(declare-fun e!62749 () Bool)

(assert (=> d!25365 e!62749))

(declare-fun res!48571 () Bool)

(assert (=> d!25365 (=> (not res!48571) (not e!62749))))

(assert (=> d!25365 (= res!48571 (not (contains!794 lt!48076 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!62747 () ListLongMap!1527)

(assert (=> d!25365 (= lt!48076 e!62747)))

(declare-fun c!16206 () Bool)

(assert (=> d!25365 (= c!16206 (bvsge (bvadd #b00000000000000000000000000000001 from!355) (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992))))))))

(assert (=> d!25365 (validMask!0 (mask!6542 (v!2778 (underlying!331 thiss!992))))))

(assert (=> d!25365 (= (getCurrentListMapNoExtraKeys!99 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (_values!2440 (v!2778 (underlying!331 thiss!992))) (mask!6542 (v!2778 (underlying!331 thiss!992))) (extraKeys!2282 (v!2778 (underlying!331 thiss!992))) (zeroValue!2342 (v!2778 (underlying!331 thiss!992))) (minValue!2342 (v!2778 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (defaultEntry!2457 (v!2778 (underlying!331 thiss!992)))) lt!48076)))

(declare-fun b!96204 () Bool)

(declare-fun e!62750 () Bool)

(assert (=> b!96204 (= e!62750 (validKeyInArray!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!96204 (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000)))

(declare-fun b!96205 () Bool)

(declare-fun lt!48075 () Unit!2864)

(declare-fun lt!48073 () Unit!2864)

(assert (=> b!96205 (= lt!48075 lt!48073)))

(declare-fun lt!48074 () (_ BitVec 64))

(declare-fun lt!48070 () (_ BitVec 64))

(declare-fun lt!48072 () V!3139)

(declare-fun lt!48071 () ListLongMap!1527)

(assert (=> b!96205 (not (contains!794 (+!134 lt!48071 (tuple2!2323 lt!48074 lt!48072)) lt!48070))))

(declare-fun addStillNotContains!39 (ListLongMap!1527 (_ BitVec 64) V!3139 (_ BitVec 64)) Unit!2864)

(assert (=> b!96205 (= lt!48073 (addStillNotContains!39 lt!48071 lt!48074 lt!48072 lt!48070))))

(assert (=> b!96205 (= lt!48070 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!96205 (= lt!48072 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!96205 (= lt!48074 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))

(declare-fun call!9750 () ListLongMap!1527)

(assert (=> b!96205 (= lt!48071 call!9750)))

(declare-fun e!62744 () ListLongMap!1527)

(assert (=> b!96205 (= e!62744 (+!134 call!9750 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun bm!9747 () Bool)

(assert (=> bm!9747 (= call!9750 (getCurrentListMapNoExtraKeys!99 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (_values!2440 (v!2778 (underlying!331 thiss!992))) (mask!6542 (v!2778 (underlying!331 thiss!992))) (extraKeys!2282 (v!2778 (underlying!331 thiss!992))) (zeroValue!2342 (v!2778 (underlying!331 thiss!992))) (minValue!2342 (v!2778 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2457 (v!2778 (underlying!331 thiss!992)))))))

(declare-fun b!96206 () Bool)

(declare-fun e!62746 () Bool)

(assert (=> b!96206 (= e!62746 e!62745)))

(declare-fun c!16203 () Bool)

(assert (=> b!96206 (= c!16203 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992))))))))

(declare-fun b!96207 () Bool)

(assert (=> b!96207 (= e!62747 e!62744)))

(declare-fun c!16204 () Bool)

(assert (=> b!96207 (= c!16204 (validKeyInArray!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!96208 () Bool)

(assert (=> b!96208 (= e!62744 call!9750)))

(declare-fun b!96209 () Bool)

(assert (=> b!96209 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992))))))))

(assert (=> b!96209 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2253 (_values!2440 (v!2778 (underlying!331 thiss!992))))))))

(declare-fun e!62748 () Bool)

(assert (=> b!96209 (= e!62748 (= (apply!91 lt!48076 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!96210 () Bool)

(assert (=> b!96210 (= e!62747 (ListLongMap!1528 Nil!1570))))

(declare-fun b!96211 () Bool)

(assert (=> b!96211 (= e!62749 e!62746)))

(declare-fun c!16205 () Bool)

(assert (=> b!96211 (= c!16205 e!62750)))

(declare-fun res!48573 () Bool)

(assert (=> b!96211 (=> (not res!48573) (not e!62750))))

(assert (=> b!96211 (= res!48573 (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992))))))))

(declare-fun b!96212 () Bool)

(declare-fun isEmpty!354 (ListLongMap!1527) Bool)

(assert (=> b!96212 (= e!62745 (isEmpty!354 lt!48076))))

(declare-fun b!96213 () Bool)

(declare-fun res!48572 () Bool)

(assert (=> b!96213 (=> (not res!48572) (not e!62749))))

(assert (=> b!96213 (= res!48572 (not (contains!794 lt!48076 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!96214 () Bool)

(assert (=> b!96214 (= e!62746 e!62748)))

(assert (=> b!96214 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355) (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992))))))))

(declare-fun res!48574 () Bool)

(assert (=> b!96214 (= res!48574 (contains!794 lt!48076 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!96214 (=> (not res!48574) (not e!62748))))

(assert (= (and d!25365 c!16206) b!96210))

(assert (= (and d!25365 (not c!16206)) b!96207))

(assert (= (and b!96207 c!16204) b!96205))

(assert (= (and b!96207 (not c!16204)) b!96208))

(assert (= (or b!96205 b!96208) bm!9747))

(assert (= (and d!25365 res!48571) b!96213))

(assert (= (and b!96213 res!48572) b!96211))

(assert (= (and b!96211 res!48573) b!96204))

(assert (= (and b!96211 c!16205) b!96214))

(assert (= (and b!96211 (not c!16205)) b!96206))

(assert (= (and b!96214 res!48574) b!96209))

(assert (= (and b!96206 c!16203) b!96203))

(assert (= (and b!96206 (not c!16203)) b!96212))

(declare-fun b_lambda!4249 () Bool)

(assert (=> (not b_lambda!4249) (not b!96205)))

(assert (=> b!96205 t!5492))

(declare-fun b_and!5879 () Bool)

(assert (= b_and!5875 (and (=> t!5492 result!3215) b_and!5879)))

(assert (=> b!96205 t!5494))

(declare-fun b_and!5881 () Bool)

(assert (= b_and!5877 (and (=> t!5494 result!3219) b_and!5881)))

(declare-fun b_lambda!4251 () Bool)

(assert (=> (not b_lambda!4251) (not b!96209)))

(assert (=> b!96209 t!5492))

(declare-fun b_and!5883 () Bool)

(assert (= b_and!5879 (and (=> t!5492 result!3215) b_and!5883)))

(assert (=> b!96209 t!5494))

(declare-fun b_and!5885 () Bool)

(assert (= b_and!5881 (and (=> t!5494 result!3219) b_and!5885)))

(declare-fun m!104451 () Bool)

(assert (=> b!96212 m!104451))

(assert (=> b!96209 m!104013))

(assert (=> b!96209 m!104085))

(assert (=> b!96209 m!103881))

(assert (=> b!96209 m!104013))

(declare-fun m!104453 () Bool)

(assert (=> b!96209 m!104453))

(assert (=> b!96209 m!104085))

(assert (=> b!96209 m!103881))

(assert (=> b!96209 m!104087))

(declare-fun m!104455 () Bool)

(assert (=> b!96203 m!104455))

(assert (=> b!96207 m!104013))

(assert (=> b!96207 m!104013))

(assert (=> b!96207 m!104075))

(declare-fun m!104457 () Bool)

(assert (=> b!96205 m!104457))

(assert (=> b!96205 m!104085))

(declare-fun m!104459 () Bool)

(assert (=> b!96205 m!104459))

(assert (=> b!96205 m!104085))

(assert (=> b!96205 m!103881))

(assert (=> b!96205 m!104087))

(assert (=> b!96205 m!104457))

(declare-fun m!104461 () Bool)

(assert (=> b!96205 m!104461))

(assert (=> b!96205 m!104013))

(declare-fun m!104463 () Bool)

(assert (=> b!96205 m!104463))

(assert (=> b!96205 m!103881))

(declare-fun m!104465 () Bool)

(assert (=> b!96213 m!104465))

(assert (=> b!96204 m!104013))

(assert (=> b!96204 m!104013))

(assert (=> b!96204 m!104075))

(declare-fun m!104467 () Bool)

(assert (=> d!25365 m!104467))

(assert (=> d!25365 m!103869))

(assert (=> bm!9747 m!104455))

(assert (=> b!96214 m!104013))

(assert (=> b!96214 m!104013))

(declare-fun m!104469 () Bool)

(assert (=> b!96214 m!104469))

(assert (=> bm!9704 d!25365))

(declare-fun d!25367 () Bool)

(assert (=> d!25367 (isDefined!102 (getValueByKey!149 (toList!779 lt!47639) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(declare-fun lt!48079 () Unit!2864)

(declare-fun choose!578 (List!1573 (_ BitVec 64)) Unit!2864)

(assert (=> d!25367 (= lt!48079 (choose!578 (toList!779 lt!47639) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(declare-fun e!62753 () Bool)

(assert (=> d!25367 e!62753))

(declare-fun res!48577 () Bool)

(assert (=> d!25367 (=> (not res!48577) (not e!62753))))

(declare-fun isStrictlySorted!303 (List!1573) Bool)

(assert (=> d!25367 (= res!48577 (isStrictlySorted!303 (toList!779 lt!47639)))))

(assert (=> d!25367 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 lt!47639) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) lt!48079)))

(declare-fun b!96217 () Bool)

(assert (=> b!96217 (= e!62753 (containsKey!153 (toList!779 lt!47639) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(assert (= (and d!25367 res!48577) b!96217))

(assert (=> d!25367 m!103861))

(assert (=> d!25367 m!103945))

(assert (=> d!25367 m!103945))

(assert (=> d!25367 m!103947))

(assert (=> d!25367 m!103861))

(declare-fun m!104471 () Bool)

(assert (=> d!25367 m!104471))

(declare-fun m!104473 () Bool)

(assert (=> d!25367 m!104473))

(assert (=> b!96217 m!103861))

(assert (=> b!96217 m!103941))

(assert (=> b!95722 d!25367))

(assert (=> b!95722 d!25361))

(assert (=> b!95722 d!25363))

(assert (=> b!95931 d!25301))

(declare-fun d!25369 () Bool)

(declare-fun e!62754 () Bool)

(assert (=> d!25369 e!62754))

(declare-fun res!48578 () Bool)

(assert (=> d!25369 (=> res!48578 e!62754)))

(declare-fun lt!48081 () Bool)

(assert (=> d!25369 (= res!48578 (not lt!48081))))

(declare-fun lt!48080 () Bool)

(assert (=> d!25369 (= lt!48081 lt!48080)))

(declare-fun lt!48082 () Unit!2864)

(declare-fun e!62755 () Unit!2864)

(assert (=> d!25369 (= lt!48082 e!62755)))

(declare-fun c!16207 () Bool)

(assert (=> d!25369 (= c!16207 lt!48080)))

(assert (=> d!25369 (= lt!48080 (containsKey!153 (toList!779 lt!47819) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!25369 (= (contains!794 lt!47819 #b1000000000000000000000000000000000000000000000000000000000000000) lt!48081)))

(declare-fun b!96218 () Bool)

(declare-fun lt!48083 () Unit!2864)

(assert (=> b!96218 (= e!62755 lt!48083)))

(assert (=> b!96218 (= lt!48083 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 lt!47819) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!96218 (isDefined!102 (getValueByKey!149 (toList!779 lt!47819) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96219 () Bool)

(declare-fun Unit!2885 () Unit!2864)

(assert (=> b!96219 (= e!62755 Unit!2885)))

(declare-fun b!96220 () Bool)

(assert (=> b!96220 (= e!62754 (isDefined!102 (getValueByKey!149 (toList!779 lt!47819) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25369 c!16207) b!96218))

(assert (= (and d!25369 (not c!16207)) b!96219))

(assert (= (and d!25369 (not res!48578)) b!96220))

(declare-fun m!104475 () Bool)

(assert (=> d!25369 m!104475))

(declare-fun m!104477 () Bool)

(assert (=> b!96218 m!104477))

(assert (=> b!96218 m!104391))

(assert (=> b!96218 m!104391))

(declare-fun m!104479 () Bool)

(assert (=> b!96218 m!104479))

(assert (=> b!96220 m!104391))

(assert (=> b!96220 m!104391))

(assert (=> b!96220 m!104479))

(assert (=> bm!9706 d!25369))

(assert (=> b!95861 d!25287))

(declare-fun d!25371 () Bool)

(declare-fun e!62756 () Bool)

(assert (=> d!25371 e!62756))

(declare-fun res!48579 () Bool)

(assert (=> d!25371 (=> (not res!48579) (not e!62756))))

(declare-fun lt!48086 () ListLongMap!1527)

(assert (=> d!25371 (= res!48579 (contains!794 lt!48086 (_1!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(declare-fun lt!48085 () List!1573)

(assert (=> d!25371 (= lt!48086 (ListLongMap!1528 lt!48085))))

(declare-fun lt!48087 () Unit!2864)

(declare-fun lt!48084 () Unit!2864)

(assert (=> d!25371 (= lt!48087 lt!48084)))

(assert (=> d!25371 (= (getValueByKey!149 lt!48085 (_1!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))) (Some!154 (_2!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(assert (=> d!25371 (= lt!48084 (lemmaContainsTupThenGetReturnValue!65 lt!48085 (_1!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) (_2!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(assert (=> d!25371 (= lt!48085 (insertStrictlySorted!68 (toList!779 (ite c!16134 call!9708 (ite c!16138 call!9707 call!9706))) (_1!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) (_2!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(assert (=> d!25371 (= (+!134 (ite c!16134 call!9708 (ite c!16138 call!9707 call!9706)) (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!48086)))

(declare-fun b!96221 () Bool)

(declare-fun res!48580 () Bool)

(assert (=> b!96221 (=> (not res!48580) (not e!62756))))

(assert (=> b!96221 (= res!48580 (= (getValueByKey!149 (toList!779 lt!48086) (_1!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))) (Some!154 (_2!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))))

(declare-fun b!96222 () Bool)

(assert (=> b!96222 (= e!62756 (contains!797 (toList!779 lt!48086) (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(assert (= (and d!25371 res!48579) b!96221))

(assert (= (and b!96221 res!48580) b!96222))

(declare-fun m!104481 () Bool)

(assert (=> d!25371 m!104481))

(declare-fun m!104483 () Bool)

(assert (=> d!25371 m!104483))

(declare-fun m!104485 () Bool)

(assert (=> d!25371 m!104485))

(declare-fun m!104487 () Bool)

(assert (=> d!25371 m!104487))

(declare-fun m!104489 () Bool)

(assert (=> b!96221 m!104489))

(declare-fun m!104491 () Bool)

(assert (=> b!96222 m!104491))

(assert (=> bm!9707 d!25371))

(declare-fun d!25373 () Bool)

(assert (=> d!25373 (= (get!1271 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2777 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(assert (=> b!95849 d!25373))

(declare-fun d!25375 () Bool)

(assert (=> d!25375 (= (inRange!0 (ite c!16103 (ite c!16111 (index!3151 lt!47743) (ite c!16109 (index!3150 lt!47737) (index!3153 lt!47737))) (ite c!16099 (index!3151 lt!47733) (ite c!16105 (index!3150 lt!47749) (index!3153 lt!47749)))) (mask!6542 newMap!16)) (and (bvsge (ite c!16103 (ite c!16111 (index!3151 lt!47743) (ite c!16109 (index!3150 lt!47737) (index!3153 lt!47737))) (ite c!16099 (index!3151 lt!47733) (ite c!16105 (index!3150 lt!47749) (index!3153 lt!47749)))) #b00000000000000000000000000000000) (bvslt (ite c!16103 (ite c!16111 (index!3151 lt!47743) (ite c!16109 (index!3150 lt!47737) (index!3153 lt!47737))) (ite c!16099 (index!3151 lt!47733) (ite c!16105 (index!3150 lt!47749) (index!3153 lt!47749)))) (bvadd (mask!6542 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!9666 d!25375))

(declare-fun b!96223 () Bool)

(declare-fun res!48587 () Bool)

(declare-fun e!62766 () Bool)

(assert (=> b!96223 (=> (not res!48587) (not e!62766))))

(declare-fun e!62767 () Bool)

(assert (=> b!96223 (= res!48587 e!62767)))

(declare-fun c!16212 () Bool)

(assert (=> b!96223 (= c!16212 (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun d!25377 () Bool)

(assert (=> d!25377 e!62766))

(declare-fun res!48588 () Bool)

(assert (=> d!25377 (=> (not res!48588) (not e!62766))))

(assert (=> d!25377 (= res!48588 (or (bvsge #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))))

(declare-fun lt!48094 () ListLongMap!1527)

(declare-fun lt!48108 () ListLongMap!1527)

(assert (=> d!25377 (= lt!48094 lt!48108)))

(declare-fun lt!48102 () Unit!2864)

(declare-fun e!62764 () Unit!2864)

(assert (=> d!25377 (= lt!48102 e!62764)))

(declare-fun c!16208 () Bool)

(declare-fun e!62762 () Bool)

(assert (=> d!25377 (= c!16208 e!62762)))

(declare-fun res!48586 () Bool)

(assert (=> d!25377 (=> (not res!48586) (not e!62762))))

(assert (=> d!25377 (= res!48586 (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun e!62761 () ListLongMap!1527)

(assert (=> d!25377 (= lt!48108 e!62761)))

(declare-fun c!16209 () Bool)

(assert (=> d!25377 (= c!16209 (and (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!25377 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25377 (= (getCurrentListMap!470 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) lt!48094)))

(declare-fun bm!9748 () Bool)

(declare-fun call!9753 () ListLongMap!1527)

(declare-fun call!9754 () ListLongMap!1527)

(assert (=> bm!9748 (= call!9753 call!9754)))

(declare-fun bm!9749 () Bool)

(declare-fun call!9751 () ListLongMap!1527)

(declare-fun call!9756 () ListLongMap!1527)

(assert (=> bm!9749 (= call!9751 call!9756)))

(declare-fun b!96224 () Bool)

(declare-fun e!62757 () Bool)

(declare-fun call!9755 () Bool)

(assert (=> b!96224 (= e!62757 (not call!9755))))

(declare-fun bm!9750 () Bool)

(assert (=> bm!9750 (= call!9754 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun bm!9751 () Bool)

(declare-fun call!9752 () ListLongMap!1527)

(assert (=> bm!9751 (= call!9752 call!9753)))

(declare-fun b!96225 () Bool)

(assert (=> b!96225 (= e!62762 (validKeyInArray!0 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96226 () Bool)

(declare-fun e!62763 () Bool)

(assert (=> b!96226 (= e!62763 (validKeyInArray!0 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96227 () Bool)

(declare-fun e!62760 () Bool)

(assert (=> b!96227 (= e!62760 (= (apply!91 lt!48094 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2342 newMap!16)))))

(declare-fun b!96228 () Bool)

(declare-fun e!62758 () ListLongMap!1527)

(assert (=> b!96228 (= e!62758 call!9752)))

(declare-fun b!96229 () Bool)

(declare-fun call!9757 () Bool)

(assert (=> b!96229 (= e!62767 (not call!9757))))

(declare-fun b!96230 () Bool)

(assert (=> b!96230 (= e!62757 e!62760)))

(declare-fun res!48585 () Bool)

(assert (=> b!96230 (= res!48585 call!9755)))

(assert (=> b!96230 (=> (not res!48585) (not e!62760))))

(declare-fun bm!9752 () Bool)

(assert (=> bm!9752 (= call!9755 (contains!794 lt!48094 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96231 () Bool)

(declare-fun e!62765 () Bool)

(declare-fun e!62768 () Bool)

(assert (=> b!96231 (= e!62765 e!62768)))

(declare-fun res!48582 () Bool)

(assert (=> b!96231 (=> (not res!48582) (not e!62768))))

(assert (=> b!96231 (= res!48582 (contains!794 lt!48094 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!96231 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun bm!9753 () Bool)

(declare-fun c!16213 () Bool)

(assert (=> bm!9753 (= call!9756 (+!134 (ite c!16209 call!9754 (ite c!16213 call!9753 call!9752)) (ite (or c!16209 c!16213) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(declare-fun b!96232 () Bool)

(declare-fun e!62769 () Bool)

(assert (=> b!96232 (= e!62769 (= (apply!91 lt!48094 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2342 newMap!16)))))

(declare-fun b!96233 () Bool)

(assert (=> b!96233 (= e!62766 e!62757)))

(declare-fun c!16211 () Bool)

(assert (=> b!96233 (= c!16211 (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!96234 () Bool)

(declare-fun c!16210 () Bool)

(assert (=> b!96234 (= c!16210 (and (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!62759 () ListLongMap!1527)

(assert (=> b!96234 (= e!62759 e!62758)))

(declare-fun b!96235 () Bool)

(assert (=> b!96235 (= e!62758 call!9751)))

(declare-fun b!96236 () Bool)

(declare-fun lt!48096 () Unit!2864)

(assert (=> b!96236 (= e!62764 lt!48096)))

(declare-fun lt!48101 () ListLongMap!1527)

(assert (=> b!96236 (= lt!48101 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48100 () (_ BitVec 64))

(assert (=> b!96236 (= lt!48100 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48097 () (_ BitVec 64))

(assert (=> b!96236 (= lt!48097 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48092 () Unit!2864)

(assert (=> b!96236 (= lt!48092 (addStillContains!67 lt!48101 lt!48100 (zeroValue!2342 newMap!16) lt!48097))))

(assert (=> b!96236 (contains!794 (+!134 lt!48101 (tuple2!2323 lt!48100 (zeroValue!2342 newMap!16))) lt!48097)))

(declare-fun lt!48109 () Unit!2864)

(assert (=> b!96236 (= lt!48109 lt!48092)))

(declare-fun lt!48104 () ListLongMap!1527)

(assert (=> b!96236 (= lt!48104 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48106 () (_ BitVec 64))

(assert (=> b!96236 (= lt!48106 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48095 () (_ BitVec 64))

(assert (=> b!96236 (= lt!48095 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48105 () Unit!2864)

(assert (=> b!96236 (= lt!48105 (addApplyDifferent!67 lt!48104 lt!48106 (minValue!2342 newMap!16) lt!48095))))

(assert (=> b!96236 (= (apply!91 (+!134 lt!48104 (tuple2!2323 lt!48106 (minValue!2342 newMap!16))) lt!48095) (apply!91 lt!48104 lt!48095))))

(declare-fun lt!48089 () Unit!2864)

(assert (=> b!96236 (= lt!48089 lt!48105)))

(declare-fun lt!48093 () ListLongMap!1527)

(assert (=> b!96236 (= lt!48093 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48098 () (_ BitVec 64))

(assert (=> b!96236 (= lt!48098 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48088 () (_ BitVec 64))

(assert (=> b!96236 (= lt!48088 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48091 () Unit!2864)

(assert (=> b!96236 (= lt!48091 (addApplyDifferent!67 lt!48093 lt!48098 (zeroValue!2342 newMap!16) lt!48088))))

(assert (=> b!96236 (= (apply!91 (+!134 lt!48093 (tuple2!2323 lt!48098 (zeroValue!2342 newMap!16))) lt!48088) (apply!91 lt!48093 lt!48088))))

(declare-fun lt!48099 () Unit!2864)

(assert (=> b!96236 (= lt!48099 lt!48091)))

(declare-fun lt!48090 () ListLongMap!1527)

(assert (=> b!96236 (= lt!48090 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48107 () (_ BitVec 64))

(assert (=> b!96236 (= lt!48107 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48103 () (_ BitVec 64))

(assert (=> b!96236 (= lt!48103 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!96236 (= lt!48096 (addApplyDifferent!67 lt!48090 lt!48107 (minValue!2342 newMap!16) lt!48103))))

(assert (=> b!96236 (= (apply!91 (+!134 lt!48090 (tuple2!2323 lt!48107 (minValue!2342 newMap!16))) lt!48103) (apply!91 lt!48090 lt!48103))))

(declare-fun b!96237 () Bool)

(assert (=> b!96237 (= e!62761 e!62759)))

(assert (=> b!96237 (= c!16213 (and (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!96238 () Bool)

(declare-fun res!48584 () Bool)

(assert (=> b!96238 (=> (not res!48584) (not e!62766))))

(assert (=> b!96238 (= res!48584 e!62765)))

(declare-fun res!48583 () Bool)

(assert (=> b!96238 (=> res!48583 e!62765)))

(assert (=> b!96238 (= res!48583 (not e!62763))))

(declare-fun res!48589 () Bool)

(assert (=> b!96238 (=> (not res!48589) (not e!62763))))

(assert (=> b!96238 (= res!48589 (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun bm!9754 () Bool)

(assert (=> bm!9754 (= call!9757 (contains!794 lt!48094 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96239 () Bool)

(assert (=> b!96239 (= e!62767 e!62769)))

(declare-fun res!48581 () Bool)

(assert (=> b!96239 (= res!48581 call!9757)))

(assert (=> b!96239 (=> (not res!48581) (not e!62769))))

(declare-fun b!96240 () Bool)

(assert (=> b!96240 (= e!62768 (= (apply!91 lt!48094 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) (get!1269 (select (arr!2004 (_values!2440 newMap!16)) #b00000000000000000000000000000000) (dynLambda!364 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!96240 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (_values!2440 newMap!16))))))

(assert (=> b!96240 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun b!96241 () Bool)

(declare-fun Unit!2886 () Unit!2864)

(assert (=> b!96241 (= e!62764 Unit!2886)))

(declare-fun b!96242 () Bool)

(assert (=> b!96242 (= e!62761 (+!134 call!9756 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))

(declare-fun b!96243 () Bool)

(assert (=> b!96243 (= e!62759 call!9751)))

(assert (= (and d!25377 c!16209) b!96242))

(assert (= (and d!25377 (not c!16209)) b!96237))

(assert (= (and b!96237 c!16213) b!96243))

(assert (= (and b!96237 (not c!16213)) b!96234))

(assert (= (and b!96234 c!16210) b!96235))

(assert (= (and b!96234 (not c!16210)) b!96228))

(assert (= (or b!96235 b!96228) bm!9751))

(assert (= (or b!96243 bm!9751) bm!9748))

(assert (= (or b!96243 b!96235) bm!9749))

(assert (= (or b!96242 bm!9748) bm!9750))

(assert (= (or b!96242 bm!9749) bm!9753))

(assert (= (and d!25377 res!48586) b!96225))

(assert (= (and d!25377 c!16208) b!96236))

(assert (= (and d!25377 (not c!16208)) b!96241))

(assert (= (and d!25377 res!48588) b!96238))

(assert (= (and b!96238 res!48589) b!96226))

(assert (= (and b!96238 (not res!48583)) b!96231))

(assert (= (and b!96231 res!48582) b!96240))

(assert (= (and b!96238 res!48584) b!96223))

(assert (= (and b!96223 c!16212) b!96239))

(assert (= (and b!96223 (not c!16212)) b!96229))

(assert (= (and b!96239 res!48581) b!96232))

(assert (= (or b!96239 b!96229) bm!9754))

(assert (= (and b!96223 res!48587) b!96233))

(assert (= (and b!96233 c!16211) b!96230))

(assert (= (and b!96233 (not c!16211)) b!96224))

(assert (= (and b!96230 res!48585) b!96227))

(assert (= (or b!96230 b!96224) bm!9752))

(declare-fun b_lambda!4253 () Bool)

(assert (=> (not b_lambda!4253) (not b!96240)))

(assert (=> b!96240 t!5504))

(declare-fun b_and!5887 () Bool)

(assert (= b_and!5883 (and (=> t!5504 result!3229) b_and!5887)))

(assert (=> b!96240 t!5506))

(declare-fun b_and!5889 () Bool)

(assert (= b_and!5885 (and (=> t!5506 result!3231) b_and!5889)))

(declare-fun m!104493 () Bool)

(assert (=> bm!9753 m!104493))

(declare-fun m!104495 () Bool)

(assert (=> b!96232 m!104495))

(declare-fun m!104497 () Bool)

(assert (=> b!96236 m!104497))

(declare-fun m!104499 () Bool)

(assert (=> b!96236 m!104499))

(declare-fun m!104501 () Bool)

(assert (=> b!96236 m!104501))

(declare-fun m!104503 () Bool)

(assert (=> b!96236 m!104503))

(declare-fun m!104505 () Bool)

(assert (=> b!96236 m!104505))

(declare-fun m!104507 () Bool)

(assert (=> b!96236 m!104507))

(declare-fun m!104509 () Bool)

(assert (=> b!96236 m!104509))

(declare-fun m!104511 () Bool)

(assert (=> b!96236 m!104511))

(declare-fun m!104513 () Bool)

(assert (=> b!96236 m!104513))

(declare-fun m!104515 () Bool)

(assert (=> b!96236 m!104515))

(declare-fun m!104517 () Bool)

(assert (=> b!96236 m!104517))

(declare-fun m!104519 () Bool)

(assert (=> b!96236 m!104519))

(declare-fun m!104521 () Bool)

(assert (=> b!96236 m!104521))

(assert (=> b!96236 m!104499))

(declare-fun m!104523 () Bool)

(assert (=> b!96236 m!104523))

(assert (=> b!96236 m!104505))

(declare-fun m!104525 () Bool)

(assert (=> b!96236 m!104525))

(assert (=> b!96236 m!104509))

(declare-fun m!104527 () Bool)

(assert (=> b!96236 m!104527))

(assert (=> b!96236 m!104117))

(assert (=> b!96236 m!104515))

(assert (=> bm!9750 m!104527))

(assert (=> b!96231 m!104117))

(assert (=> b!96231 m!104117))

(declare-fun m!104529 () Bool)

(assert (=> b!96231 m!104529))

(assert (=> b!96226 m!104117))

(assert (=> b!96226 m!104117))

(assert (=> b!96226 m!104261))

(declare-fun m!104531 () Bool)

(assert (=> b!96242 m!104531))

(declare-fun m!104533 () Bool)

(assert (=> bm!9754 m!104533))

(declare-fun m!104535 () Bool)

(assert (=> b!96227 m!104535))

(declare-fun m!104537 () Bool)

(assert (=> bm!9752 m!104537))

(assert (=> b!96225 m!104117))

(assert (=> b!96225 m!104117))

(assert (=> b!96225 m!104261))

(assert (=> b!96240 m!104441))

(assert (=> b!96240 m!104273))

(assert (=> b!96240 m!104443))

(assert (=> b!96240 m!104117))

(assert (=> b!96240 m!104273))

(assert (=> b!96240 m!104117))

(declare-fun m!104539 () Bool)

(assert (=> b!96240 m!104539))

(assert (=> b!96240 m!104441))

(assert (=> d!25377 m!104095))

(assert (=> d!25297 d!25377))

(declare-fun d!25379 () Bool)

(declare-fun res!48590 () Bool)

(declare-fun e!62770 () Bool)

(assert (=> d!25379 (=> (not res!48590) (not e!62770))))

(assert (=> d!25379 (= res!48590 (simpleValid!67 (v!2778 (underlying!331 thiss!992))))))

(assert (=> d!25379 (= (valid!379 (v!2778 (underlying!331 thiss!992))) e!62770)))

(declare-fun b!96244 () Bool)

(declare-fun res!48591 () Bool)

(assert (=> b!96244 (=> (not res!48591) (not e!62770))))

(assert (=> b!96244 (= res!48591 (= (arrayCountValidKeys!0 (_keys!4143 (v!2778 (underlying!331 thiss!992))) #b00000000000000000000000000000000 (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992))))) (_size!469 (v!2778 (underlying!331 thiss!992)))))))

(declare-fun b!96245 () Bool)

(declare-fun res!48592 () Bool)

(assert (=> b!96245 (=> (not res!48592) (not e!62770))))

(assert (=> b!96245 (= res!48592 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (mask!6542 (v!2778 (underlying!331 thiss!992)))))))

(declare-fun b!96246 () Bool)

(assert (=> b!96246 (= e!62770 (arrayNoDuplicates!0 (_keys!4143 (v!2778 (underlying!331 thiss!992))) #b00000000000000000000000000000000 Nil!1571))))

(assert (= (and d!25379 res!48590) b!96244))

(assert (= (and b!96244 res!48591) b!96245))

(assert (= (and b!96245 res!48592) b!96246))

(declare-fun m!104541 () Bool)

(assert (=> d!25379 m!104541))

(declare-fun m!104543 () Bool)

(assert (=> b!96244 m!104543))

(declare-fun m!104545 () Bool)

(assert (=> b!96245 m!104545))

(declare-fun m!104547 () Bool)

(assert (=> b!96246 m!104547))

(assert (=> d!25293 d!25379))

(declare-fun d!25381 () Bool)

(declare-fun e!62773 () Bool)

(assert (=> d!25381 e!62773))

(declare-fun res!48597 () Bool)

(assert (=> d!25381 (=> (not res!48597) (not e!62773))))

(declare-fun lt!48115 () SeekEntryResult!252)

(assert (=> d!25381 (= res!48597 ((_ is Found!252) lt!48115))))

(assert (=> d!25381 (= lt!48115 (seekEntryOrOpen!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (_keys!4143 newMap!16) (mask!6542 newMap!16)))))

(declare-fun lt!48114 () Unit!2864)

(declare-fun choose!579 (array!4215 array!4217 (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 (_ BitVec 64) Int) Unit!2864)

(assert (=> d!25381 (= lt!48114 (choose!579 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (defaultEntry!2457 newMap!16)))))

(assert (=> d!25381 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25381 (= (lemmaInListMapThenSeekEntryOrOpenFindsIt!40 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (defaultEntry!2457 newMap!16)) lt!48114)))

(declare-fun b!96251 () Bool)

(declare-fun res!48598 () Bool)

(assert (=> b!96251 (=> (not res!48598) (not e!62773))))

(assert (=> b!96251 (= res!48598 (inRange!0 (index!3151 lt!48115) (mask!6542 newMap!16)))))

(declare-fun b!96252 () Bool)

(assert (=> b!96252 (= e!62773 (= (select (arr!2003 (_keys!4143 newMap!16)) (index!3151 lt!48115)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(assert (=> b!96252 (and (bvsge (index!3151 lt!48115) #b00000000000000000000000000000000) (bvslt (index!3151 lt!48115) (size!2252 (_keys!4143 newMap!16))))))

(assert (= (and d!25381 res!48597) b!96251))

(assert (= (and b!96251 res!48598) b!96252))

(assert (=> d!25381 m!103861))

(assert (=> d!25381 m!103981))

(assert (=> d!25381 m!103861))

(declare-fun m!104549 () Bool)

(assert (=> d!25381 m!104549))

(assert (=> d!25381 m!104095))

(declare-fun m!104551 () Bool)

(assert (=> b!96251 m!104551))

(declare-fun m!104553 () Bool)

(assert (=> b!96252 m!104553))

(assert (=> bm!9678 d!25381))

(declare-fun d!25383 () Bool)

(declare-fun e!62774 () Bool)

(assert (=> d!25383 e!62774))

(declare-fun res!48599 () Bool)

(assert (=> d!25383 (=> res!48599 e!62774)))

(declare-fun lt!48117 () Bool)

(assert (=> d!25383 (= res!48599 (not lt!48117))))

(declare-fun lt!48116 () Bool)

(assert (=> d!25383 (= lt!48117 lt!48116)))

(declare-fun lt!48118 () Unit!2864)

(declare-fun e!62775 () Unit!2864)

(assert (=> d!25383 (= lt!48118 e!62775)))

(declare-fun c!16214 () Bool)

(assert (=> d!25383 (= c!16214 lt!48116)))

(assert (=> d!25383 (= lt!48116 (containsKey!153 (toList!779 e!62513) (ite c!16103 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (select (arr!2003 (_keys!4143 newMap!16)) (index!3151 lt!47759)))))))

(assert (=> d!25383 (= (contains!794 e!62513 (ite c!16103 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (select (arr!2003 (_keys!4143 newMap!16)) (index!3151 lt!47759)))) lt!48117)))

(declare-fun b!96253 () Bool)

(declare-fun lt!48119 () Unit!2864)

(assert (=> b!96253 (= e!62775 lt!48119)))

(assert (=> b!96253 (= lt!48119 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 e!62513) (ite c!16103 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (select (arr!2003 (_keys!4143 newMap!16)) (index!3151 lt!47759)))))))

(assert (=> b!96253 (isDefined!102 (getValueByKey!149 (toList!779 e!62513) (ite c!16103 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (select (arr!2003 (_keys!4143 newMap!16)) (index!3151 lt!47759)))))))

(declare-fun b!96254 () Bool)

(declare-fun Unit!2887 () Unit!2864)

(assert (=> b!96254 (= e!62775 Unit!2887)))

(declare-fun b!96255 () Bool)

(assert (=> b!96255 (= e!62774 (isDefined!102 (getValueByKey!149 (toList!779 e!62513) (ite c!16103 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (select (arr!2003 (_keys!4143 newMap!16)) (index!3151 lt!47759))))))))

(assert (= (and d!25383 c!16214) b!96253))

(assert (= (and d!25383 (not c!16214)) b!96254))

(assert (= (and d!25383 (not res!48599)) b!96255))

(declare-fun m!104555 () Bool)

(assert (=> d!25383 m!104555))

(declare-fun m!104557 () Bool)

(assert (=> b!96253 m!104557))

(declare-fun m!104559 () Bool)

(assert (=> b!96253 m!104559))

(assert (=> b!96253 m!104559))

(declare-fun m!104561 () Bool)

(assert (=> b!96253 m!104561))

(assert (=> b!96255 m!104559))

(assert (=> b!96255 m!104559))

(assert (=> b!96255 m!104561))

(assert (=> bm!9667 d!25383))

(declare-fun b!96264 () Bool)

(declare-fun e!62781 () (_ BitVec 32))

(assert (=> b!96264 (= e!62781 #b00000000000000000000000000000000)))

(declare-fun b!96265 () Bool)

(declare-fun e!62780 () (_ BitVec 32))

(assert (=> b!96265 (= e!62781 e!62780)))

(declare-fun c!16219 () Bool)

(assert (=> b!96265 (= c!16219 (validKeyInArray!0 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96266 () Bool)

(declare-fun call!9760 () (_ BitVec 32))

(assert (=> b!96266 (= e!62780 call!9760)))

(declare-fun bm!9757 () Bool)

(assert (=> bm!9757 (= call!9760 (arrayCountValidKeys!0 (_keys!4143 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2252 (_keys!4143 newMap!16))))))

(declare-fun b!96267 () Bool)

(assert (=> b!96267 (= e!62780 (bvadd #b00000000000000000000000000000001 call!9760))))

(declare-fun d!25385 () Bool)

(declare-fun lt!48122 () (_ BitVec 32))

(assert (=> d!25385 (and (bvsge lt!48122 #b00000000000000000000000000000000) (bvsle lt!48122 (bvsub (size!2252 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!25385 (= lt!48122 e!62781)))

(declare-fun c!16220 () Bool)

(assert (=> d!25385 (= c!16220 (bvsge #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(assert (=> d!25385 (and (bvsle #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2252 (_keys!4143 newMap!16)) (size!2252 (_keys!4143 newMap!16))))))

(assert (=> d!25385 (= (arrayCountValidKeys!0 (_keys!4143 newMap!16) #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))) lt!48122)))

(assert (= (and d!25385 c!16220) b!96264))

(assert (= (and d!25385 (not c!16220)) b!96265))

(assert (= (and b!96265 c!16219) b!96267))

(assert (= (and b!96265 (not c!16219)) b!96266))

(assert (= (or b!96267 b!96266) bm!9757))

(assert (=> b!96265 m!104117))

(assert (=> b!96265 m!104117))

(assert (=> b!96265 m!104261))

(declare-fun m!104563 () Bool)

(assert (=> bm!9757 m!104563))

(assert (=> b!95884 d!25385))

(declare-fun d!25387 () Bool)

(assert (=> d!25387 (= (apply!91 lt!47829 lt!47820) (get!1273 (getValueByKey!149 (toList!779 lt!47829) lt!47820)))))

(declare-fun bs!3954 () Bool)

(assert (= bs!3954 d!25387))

(declare-fun m!104565 () Bool)

(assert (=> bs!3954 m!104565))

(assert (=> bs!3954 m!104565))

(declare-fun m!104567 () Bool)

(assert (=> bs!3954 m!104567))

(assert (=> b!95942 d!25387))

(declare-fun d!25389 () Bool)

(declare-fun e!62782 () Bool)

(assert (=> d!25389 e!62782))

(declare-fun res!48600 () Bool)

(assert (=> d!25389 (=> (not res!48600) (not e!62782))))

(declare-fun lt!48125 () ListLongMap!1527)

(assert (=> d!25389 (= res!48600 (contains!794 lt!48125 (_1!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun lt!48124 () List!1573)

(assert (=> d!25389 (= lt!48125 (ListLongMap!1528 lt!48124))))

(declare-fun lt!48126 () Unit!2864)

(declare-fun lt!48123 () Unit!2864)

(assert (=> d!25389 (= lt!48126 lt!48123)))

(assert (=> d!25389 (= (getValueByKey!149 lt!48124 (_1!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) (Some!154 (_2!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(assert (=> d!25389 (= lt!48123 (lemmaContainsTupThenGetReturnValue!65 lt!48124 (_1!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(assert (=> d!25389 (= lt!48124 (insertStrictlySorted!68 (toList!779 lt!47815) (_1!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(assert (=> d!25389 (= (+!134 lt!47815 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) lt!48125)))

(declare-fun b!96268 () Bool)

(declare-fun res!48601 () Bool)

(assert (=> b!96268 (=> (not res!48601) (not e!62782))))

(assert (=> b!96268 (= res!48601 (= (getValueByKey!149 (toList!779 lt!48125) (_1!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) (Some!154 (_2!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(declare-fun b!96269 () Bool)

(assert (=> b!96269 (= e!62782 (contains!797 (toList!779 lt!48125) (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))

(assert (= (and d!25389 res!48600) b!96268))

(assert (= (and b!96268 res!48601) b!96269))

(declare-fun m!104569 () Bool)

(assert (=> d!25389 m!104569))

(declare-fun m!104571 () Bool)

(assert (=> d!25389 m!104571))

(declare-fun m!104573 () Bool)

(assert (=> d!25389 m!104573))

(declare-fun m!104575 () Bool)

(assert (=> d!25389 m!104575))

(declare-fun m!104577 () Bool)

(assert (=> b!96268 m!104577))

(declare-fun m!104579 () Bool)

(assert (=> b!96269 m!104579))

(assert (=> b!95942 d!25389))

(declare-fun d!25391 () Bool)

(assert (=> d!25391 (= (apply!91 lt!47818 lt!47813) (get!1273 (getValueByKey!149 (toList!779 lt!47818) lt!47813)))))

(declare-fun bs!3955 () Bool)

(assert (= bs!3955 d!25391))

(declare-fun m!104581 () Bool)

(assert (=> bs!3955 m!104581))

(assert (=> bs!3955 m!104581))

(declare-fun m!104583 () Bool)

(assert (=> bs!3955 m!104583))

(assert (=> b!95942 d!25391))

(declare-fun d!25393 () Bool)

(assert (=> d!25393 (= (apply!91 lt!47815 lt!47828) (get!1273 (getValueByKey!149 (toList!779 lt!47815) lt!47828)))))

(declare-fun bs!3956 () Bool)

(assert (= bs!3956 d!25393))

(declare-fun m!104585 () Bool)

(assert (=> bs!3956 m!104585))

(assert (=> bs!3956 m!104585))

(declare-fun m!104587 () Bool)

(assert (=> bs!3956 m!104587))

(assert (=> b!95942 d!25393))

(declare-fun d!25395 () Bool)

(assert (=> d!25395 (= (apply!91 (+!134 lt!47818 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))) lt!47813) (get!1273 (getValueByKey!149 (toList!779 (+!134 lt!47818 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!47813)))))

(declare-fun bs!3957 () Bool)

(assert (= bs!3957 d!25395))

(declare-fun m!104589 () Bool)

(assert (=> bs!3957 m!104589))

(assert (=> bs!3957 m!104589))

(declare-fun m!104591 () Bool)

(assert (=> bs!3957 m!104591))

(assert (=> b!95942 d!25395))

(declare-fun d!25397 () Bool)

(assert (=> d!25397 (= (apply!91 (+!134 lt!47818 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))) lt!47813) (apply!91 lt!47818 lt!47813))))

(declare-fun lt!48129 () Unit!2864)

(declare-fun choose!580 (ListLongMap!1527 (_ BitVec 64) V!3139 (_ BitVec 64)) Unit!2864)

(assert (=> d!25397 (= lt!48129 (choose!580 lt!47818 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))) lt!47813))))

(declare-fun e!62785 () Bool)

(assert (=> d!25397 e!62785))

(declare-fun res!48604 () Bool)

(assert (=> d!25397 (=> (not res!48604) (not e!62785))))

(assert (=> d!25397 (= res!48604 (contains!794 lt!47818 lt!47813))))

(assert (=> d!25397 (= (addApplyDifferent!67 lt!47818 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))) lt!47813) lt!48129)))

(declare-fun b!96273 () Bool)

(assert (=> b!96273 (= e!62785 (not (= lt!47813 lt!47823)))))

(assert (= (and d!25397 res!48604) b!96273))

(declare-fun m!104593 () Bool)

(assert (=> d!25397 m!104593))

(assert (=> d!25397 m!104059))

(assert (=> d!25397 m!104069))

(declare-fun m!104595 () Bool)

(assert (=> d!25397 m!104595))

(assert (=> d!25397 m!104059))

(assert (=> d!25397 m!104061))

(assert (=> b!95942 d!25397))

(declare-fun d!25399 () Bool)

(assert (=> d!25399 (= (apply!91 (+!134 lt!47829 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) lt!47820) (apply!91 lt!47829 lt!47820))))

(declare-fun lt!48130 () Unit!2864)

(assert (=> d!25399 (= lt!48130 (choose!580 lt!47829 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992))) lt!47820))))

(declare-fun e!62786 () Bool)

(assert (=> d!25399 e!62786))

(declare-fun res!48605 () Bool)

(assert (=> d!25399 (=> (not res!48605) (not e!62786))))

(assert (=> d!25399 (= res!48605 (contains!794 lt!47829 lt!47820))))

(assert (=> d!25399 (= (addApplyDifferent!67 lt!47829 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992))) lt!47820) lt!48130)))

(declare-fun b!96274 () Bool)

(assert (=> b!96274 (= e!62786 (not (= lt!47820 lt!47831)))))

(assert (= (and d!25399 res!48605) b!96274))

(declare-fun m!104597 () Bool)

(assert (=> d!25399 m!104597))

(assert (=> d!25399 m!104043))

(assert (=> d!25399 m!104065))

(declare-fun m!104599 () Bool)

(assert (=> d!25399 m!104599))

(assert (=> d!25399 m!104043))

(assert (=> d!25399 m!104067))

(assert (=> b!95942 d!25399))

(declare-fun d!25401 () Bool)

(assert (=> d!25401 (contains!794 (+!134 lt!47826 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))) lt!47822)))

(declare-fun lt!48133 () Unit!2864)

(declare-fun choose!581 (ListLongMap!1527 (_ BitVec 64) V!3139 (_ BitVec 64)) Unit!2864)

(assert (=> d!25401 (= lt!48133 (choose!581 lt!47826 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))) lt!47822))))

(assert (=> d!25401 (contains!794 lt!47826 lt!47822)))

(assert (=> d!25401 (= (addStillContains!67 lt!47826 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))) lt!47822) lt!48133)))

(declare-fun bs!3958 () Bool)

(assert (= bs!3958 d!25401))

(assert (=> bs!3958 m!104049))

(assert (=> bs!3958 m!104049))

(assert (=> bs!3958 m!104051))

(declare-fun m!104601 () Bool)

(assert (=> bs!3958 m!104601))

(declare-fun m!104603 () Bool)

(assert (=> bs!3958 m!104603))

(assert (=> b!95942 d!25401))

(declare-fun d!25403 () Bool)

(assert (=> d!25403 (= (apply!91 (+!134 lt!47815 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) lt!47828) (apply!91 lt!47815 lt!47828))))

(declare-fun lt!48134 () Unit!2864)

(assert (=> d!25403 (= lt!48134 (choose!580 lt!47815 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992))) lt!47828))))

(declare-fun e!62787 () Bool)

(assert (=> d!25403 e!62787))

(declare-fun res!48606 () Bool)

(assert (=> d!25403 (=> (not res!48606) (not e!62787))))

(assert (=> d!25403 (= res!48606 (contains!794 lt!47815 lt!47828))))

(assert (=> d!25403 (= (addApplyDifferent!67 lt!47815 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992))) lt!47828) lt!48134)))

(declare-fun b!96276 () Bool)

(assert (=> b!96276 (= e!62787 (not (= lt!47828 lt!47832)))))

(assert (= (and d!25403 res!48606) b!96276))

(declare-fun m!104605 () Bool)

(assert (=> d!25403 m!104605))

(assert (=> d!25403 m!104053))

(assert (=> d!25403 m!104041))

(declare-fun m!104607 () Bool)

(assert (=> d!25403 m!104607))

(assert (=> d!25403 m!104053))

(assert (=> d!25403 m!104055))

(assert (=> b!95942 d!25403))

(assert (=> b!95942 d!25365))

(declare-fun d!25405 () Bool)

(declare-fun e!62788 () Bool)

(assert (=> d!25405 e!62788))

(declare-fun res!48607 () Bool)

(assert (=> d!25405 (=> (not res!48607) (not e!62788))))

(declare-fun lt!48137 () ListLongMap!1527)

(assert (=> d!25405 (= res!48607 (contains!794 lt!48137 (_1!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun lt!48136 () List!1573)

(assert (=> d!25405 (= lt!48137 (ListLongMap!1528 lt!48136))))

(declare-fun lt!48138 () Unit!2864)

(declare-fun lt!48135 () Unit!2864)

(assert (=> d!25405 (= lt!48138 lt!48135)))

(assert (=> d!25405 (= (getValueByKey!149 lt!48136 (_1!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) (Some!154 (_2!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(assert (=> d!25405 (= lt!48135 (lemmaContainsTupThenGetReturnValue!65 lt!48136 (_1!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(assert (=> d!25405 (= lt!48136 (insertStrictlySorted!68 (toList!779 lt!47829) (_1!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(assert (=> d!25405 (= (+!134 lt!47829 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) lt!48137)))

(declare-fun b!96277 () Bool)

(declare-fun res!48608 () Bool)

(assert (=> b!96277 (=> (not res!48608) (not e!62788))))

(assert (=> b!96277 (= res!48608 (= (getValueByKey!149 (toList!779 lt!48137) (_1!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) (Some!154 (_2!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(declare-fun b!96278 () Bool)

(assert (=> b!96278 (= e!62788 (contains!797 (toList!779 lt!48137) (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))

(assert (= (and d!25405 res!48607) b!96277))

(assert (= (and b!96277 res!48608) b!96278))

(declare-fun m!104609 () Bool)

(assert (=> d!25405 m!104609))

(declare-fun m!104611 () Bool)

(assert (=> d!25405 m!104611))

(declare-fun m!104613 () Bool)

(assert (=> d!25405 m!104613))

(declare-fun m!104615 () Bool)

(assert (=> d!25405 m!104615))

(declare-fun m!104617 () Bool)

(assert (=> b!96277 m!104617))

(declare-fun m!104619 () Bool)

(assert (=> b!96278 m!104619))

(assert (=> b!95942 d!25405))

(declare-fun d!25407 () Bool)

(assert (=> d!25407 (= (apply!91 (+!134 lt!47829 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) lt!47820) (get!1273 (getValueByKey!149 (toList!779 (+!134 lt!47829 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!47820)))))

(declare-fun bs!3959 () Bool)

(assert (= bs!3959 d!25407))

(declare-fun m!104621 () Bool)

(assert (=> bs!3959 m!104621))

(assert (=> bs!3959 m!104621))

(declare-fun m!104623 () Bool)

(assert (=> bs!3959 m!104623))

(assert (=> b!95942 d!25407))

(declare-fun d!25409 () Bool)

(declare-fun e!62789 () Bool)

(assert (=> d!25409 e!62789))

(declare-fun res!48609 () Bool)

(assert (=> d!25409 (=> (not res!48609) (not e!62789))))

(declare-fun lt!48141 () ListLongMap!1527)

(assert (=> d!25409 (= res!48609 (contains!794 lt!48141 (_1!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun lt!48140 () List!1573)

(assert (=> d!25409 (= lt!48141 (ListLongMap!1528 lt!48140))))

(declare-fun lt!48142 () Unit!2864)

(declare-fun lt!48139 () Unit!2864)

(assert (=> d!25409 (= lt!48142 lt!48139)))

(assert (=> d!25409 (= (getValueByKey!149 lt!48140 (_1!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))) (Some!154 (_2!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(assert (=> d!25409 (= lt!48139 (lemmaContainsTupThenGetReturnValue!65 lt!48140 (_1!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(assert (=> d!25409 (= lt!48140 (insertStrictlySorted!68 (toList!779 lt!47826) (_1!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(assert (=> d!25409 (= (+!134 lt!47826 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))) lt!48141)))

(declare-fun b!96279 () Bool)

(declare-fun res!48610 () Bool)

(assert (=> b!96279 (=> (not res!48610) (not e!62789))))

(assert (=> b!96279 (= res!48610 (= (getValueByKey!149 (toList!779 lt!48141) (_1!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))) (Some!154 (_2!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(declare-fun b!96280 () Bool)

(assert (=> b!96280 (= e!62789 (contains!797 (toList!779 lt!48141) (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))))

(assert (= (and d!25409 res!48609) b!96279))

(assert (= (and b!96279 res!48610) b!96280))

(declare-fun m!104625 () Bool)

(assert (=> d!25409 m!104625))

(declare-fun m!104627 () Bool)

(assert (=> d!25409 m!104627))

(declare-fun m!104629 () Bool)

(assert (=> d!25409 m!104629))

(declare-fun m!104631 () Bool)

(assert (=> d!25409 m!104631))

(declare-fun m!104633 () Bool)

(assert (=> b!96279 m!104633))

(declare-fun m!104635 () Bool)

(assert (=> b!96280 m!104635))

(assert (=> b!95942 d!25409))

(declare-fun d!25411 () Bool)

(declare-fun e!62790 () Bool)

(assert (=> d!25411 e!62790))

(declare-fun res!48611 () Bool)

(assert (=> d!25411 (=> res!48611 e!62790)))

(declare-fun lt!48144 () Bool)

(assert (=> d!25411 (= res!48611 (not lt!48144))))

(declare-fun lt!48143 () Bool)

(assert (=> d!25411 (= lt!48144 lt!48143)))

(declare-fun lt!48145 () Unit!2864)

(declare-fun e!62791 () Unit!2864)

(assert (=> d!25411 (= lt!48145 e!62791)))

(declare-fun c!16221 () Bool)

(assert (=> d!25411 (= c!16221 lt!48143)))

(assert (=> d!25411 (= lt!48143 (containsKey!153 (toList!779 (+!134 lt!47826 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!47822))))

(assert (=> d!25411 (= (contains!794 (+!134 lt!47826 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))) lt!47822) lt!48144)))

(declare-fun b!96281 () Bool)

(declare-fun lt!48146 () Unit!2864)

(assert (=> b!96281 (= e!62791 lt!48146)))

(assert (=> b!96281 (= lt!48146 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 (+!134 lt!47826 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!47822))))

(assert (=> b!96281 (isDefined!102 (getValueByKey!149 (toList!779 (+!134 lt!47826 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!47822))))

(declare-fun b!96282 () Bool)

(declare-fun Unit!2888 () Unit!2864)

(assert (=> b!96282 (= e!62791 Unit!2888)))

(declare-fun b!96283 () Bool)

(assert (=> b!96283 (= e!62790 (isDefined!102 (getValueByKey!149 (toList!779 (+!134 lt!47826 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!47822)))))

(assert (= (and d!25411 c!16221) b!96281))

(assert (= (and d!25411 (not c!16221)) b!96282))

(assert (= (and d!25411 (not res!48611)) b!96283))

(declare-fun m!104637 () Bool)

(assert (=> d!25411 m!104637))

(declare-fun m!104639 () Bool)

(assert (=> b!96281 m!104639))

(declare-fun m!104641 () Bool)

(assert (=> b!96281 m!104641))

(assert (=> b!96281 m!104641))

(declare-fun m!104643 () Bool)

(assert (=> b!96281 m!104643))

(assert (=> b!96283 m!104641))

(assert (=> b!96283 m!104641))

(assert (=> b!96283 m!104643))

(assert (=> b!95942 d!25411))

(declare-fun d!25413 () Bool)

(assert (=> d!25413 (= (apply!91 (+!134 lt!47815 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) lt!47828) (get!1273 (getValueByKey!149 (toList!779 (+!134 lt!47815 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!47828)))))

(declare-fun bs!3960 () Bool)

(assert (= bs!3960 d!25413))

(declare-fun m!104645 () Bool)

(assert (=> bs!3960 m!104645))

(assert (=> bs!3960 m!104645))

(declare-fun m!104647 () Bool)

(assert (=> bs!3960 m!104647))

(assert (=> b!95942 d!25413))

(declare-fun d!25415 () Bool)

(declare-fun e!62792 () Bool)

(assert (=> d!25415 e!62792))

(declare-fun res!48612 () Bool)

(assert (=> d!25415 (=> (not res!48612) (not e!62792))))

(declare-fun lt!48149 () ListLongMap!1527)

(assert (=> d!25415 (= res!48612 (contains!794 lt!48149 (_1!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun lt!48148 () List!1573)

(assert (=> d!25415 (= lt!48149 (ListLongMap!1528 lt!48148))))

(declare-fun lt!48150 () Unit!2864)

(declare-fun lt!48147 () Unit!2864)

(assert (=> d!25415 (= lt!48150 lt!48147)))

(assert (=> d!25415 (= (getValueByKey!149 lt!48148 (_1!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))) (Some!154 (_2!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(assert (=> d!25415 (= lt!48147 (lemmaContainsTupThenGetReturnValue!65 lt!48148 (_1!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(assert (=> d!25415 (= lt!48148 (insertStrictlySorted!68 (toList!779 lt!47818) (_1!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(assert (=> d!25415 (= (+!134 lt!47818 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))) lt!48149)))

(declare-fun b!96284 () Bool)

(declare-fun res!48613 () Bool)

(assert (=> b!96284 (=> (not res!48613) (not e!62792))))

(assert (=> b!96284 (= res!48613 (= (getValueByKey!149 (toList!779 lt!48149) (_1!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))) (Some!154 (_2!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(declare-fun b!96285 () Bool)

(assert (=> b!96285 (= e!62792 (contains!797 (toList!779 lt!48149) (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))))

(assert (= (and d!25415 res!48612) b!96284))

(assert (= (and b!96284 res!48613) b!96285))

(declare-fun m!104649 () Bool)

(assert (=> d!25415 m!104649))

(declare-fun m!104651 () Bool)

(assert (=> d!25415 m!104651))

(declare-fun m!104653 () Bool)

(assert (=> d!25415 m!104653))

(declare-fun m!104655 () Bool)

(assert (=> d!25415 m!104655))

(declare-fun m!104657 () Bool)

(assert (=> b!96284 m!104657))

(declare-fun m!104659 () Bool)

(assert (=> b!96285 m!104659))

(assert (=> b!95942 d!25415))

(declare-fun d!25417 () Bool)

(assert (=> d!25417 (= (apply!91 lt!47819 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1273 (getValueByKey!149 (toList!779 lt!47819) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!3961 () Bool)

(assert (= bs!3961 d!25417))

(assert (=> bs!3961 m!104387))

(assert (=> bs!3961 m!104387))

(declare-fun m!104661 () Bool)

(assert (=> bs!3961 m!104661))

(assert (=> b!95938 d!25417))

(assert (=> d!25283 d!25287))

(declare-fun d!25419 () Bool)

(assert (=> d!25419 (not (arrayContainsKey!0 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355)))))

(assert (=> d!25419 true))

(declare-fun _$68!88 () Unit!2864)

(assert (=> d!25419 (= (choose!68 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (Cons!1570 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) Nil!1571)) _$68!88)))

(declare-fun bs!3962 () Bool)

(assert (= bs!3962 d!25419))

(assert (=> bs!3962 m!103861))

(assert (=> bs!3962 m!103865))

(assert (=> d!25283 d!25419))

(declare-fun d!25421 () Bool)

(declare-fun res!48614 () Bool)

(declare-fun e!62793 () Bool)

(assert (=> d!25421 (=> res!48614 e!62793)))

(assert (=> d!25421 (= res!48614 (= (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(assert (=> d!25421 (= (arrayContainsKey!0 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) e!62793)))

(declare-fun b!96286 () Bool)

(declare-fun e!62794 () Bool)

(assert (=> b!96286 (= e!62793 e!62794)))

(declare-fun res!48615 () Bool)

(assert (=> b!96286 (=> (not res!48615) (not e!62794))))

(assert (=> b!96286 (= res!48615 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992))))))))

(declare-fun b!96287 () Bool)

(assert (=> b!96287 (= e!62794 (arrayContainsKey!0 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!25421 (not res!48614)) b!96286))

(assert (= (and b!96286 res!48615) b!96287))

(declare-fun m!104663 () Bool)

(assert (=> d!25421 m!104663))

(assert (=> b!96287 m!103861))

(declare-fun m!104665 () Bool)

(assert (=> b!96287 m!104665))

(assert (=> b!95856 d!25421))

(assert (=> b!95829 d!25343))

(assert (=> b!95874 d!25325))

(declare-fun d!25423 () Bool)

(declare-fun res!48618 () Bool)

(declare-fun e!62795 () Bool)

(assert (=> d!25423 (=> res!48618 e!62795)))

(assert (=> d!25423 (= res!48618 (bvsge #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(assert (=> d!25423 (= (arrayNoDuplicates!0 (_keys!4143 newMap!16) #b00000000000000000000000000000000 Nil!1571) e!62795)))

(declare-fun b!96288 () Bool)

(declare-fun e!62796 () Bool)

(declare-fun e!62798 () Bool)

(assert (=> b!96288 (= e!62796 e!62798)))

(declare-fun c!16222 () Bool)

(assert (=> b!96288 (= c!16222 (validKeyInArray!0 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96289 () Bool)

(assert (=> b!96289 (= e!62795 e!62796)))

(declare-fun res!48616 () Bool)

(assert (=> b!96289 (=> (not res!48616) (not e!62796))))

(declare-fun e!62797 () Bool)

(assert (=> b!96289 (= res!48616 (not e!62797))))

(declare-fun res!48617 () Bool)

(assert (=> b!96289 (=> (not res!48617) (not e!62797))))

(assert (=> b!96289 (= res!48617 (validKeyInArray!0 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96290 () Bool)

(assert (=> b!96290 (= e!62797 (contains!796 Nil!1571 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun bm!9758 () Bool)

(declare-fun call!9761 () Bool)

(assert (=> bm!9758 (= call!9761 (arrayNoDuplicates!0 (_keys!4143 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!16222 (Cons!1570 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000) Nil!1571) Nil!1571)))))

(declare-fun b!96291 () Bool)

(assert (=> b!96291 (= e!62798 call!9761)))

(declare-fun b!96292 () Bool)

(assert (=> b!96292 (= e!62798 call!9761)))

(assert (= (and d!25423 (not res!48618)) b!96289))

(assert (= (and b!96289 res!48617) b!96290))

(assert (= (and b!96289 res!48616) b!96288))

(assert (= (and b!96288 c!16222) b!96291))

(assert (= (and b!96288 (not c!16222)) b!96292))

(assert (= (or b!96291 b!96292) bm!9758))

(assert (=> b!96288 m!104117))

(assert (=> b!96288 m!104117))

(assert (=> b!96288 m!104261))

(assert (=> b!96289 m!104117))

(assert (=> b!96289 m!104117))

(assert (=> b!96289 m!104261))

(assert (=> b!96290 m!104117))

(assert (=> b!96290 m!104117))

(declare-fun m!104667 () Bool)

(assert (=> b!96290 m!104667))

(assert (=> bm!9758 m!104117))

(declare-fun m!104669 () Bool)

(assert (=> bm!9758 m!104669))

(assert (=> b!95886 d!25423))

(declare-fun d!25425 () Bool)

(declare-fun e!62799 () Bool)

(assert (=> d!25425 e!62799))

(declare-fun res!48619 () Bool)

(assert (=> d!25425 (=> (not res!48619) (not e!62799))))

(declare-fun lt!48153 () ListLongMap!1527)

(assert (=> d!25425 (= res!48619 (contains!794 lt!48153 (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!48152 () List!1573)

(assert (=> d!25425 (= lt!48153 (ListLongMap!1528 lt!48152))))

(declare-fun lt!48154 () Unit!2864)

(declare-fun lt!48151 () Unit!2864)

(assert (=> d!25425 (= lt!48154 lt!48151)))

(assert (=> d!25425 (= (getValueByKey!149 lt!48152 (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25425 (= lt!48151 (lemmaContainsTupThenGetReturnValue!65 lt!48152 (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25425 (= lt!48152 (insertStrictlySorted!68 (toList!779 call!9665) (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25425 (= (+!134 call!9665 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!48153)))

(declare-fun b!96293 () Bool)

(declare-fun res!48620 () Bool)

(assert (=> b!96293 (=> (not res!48620) (not e!62799))))

(assert (=> b!96293 (= res!48620 (= (getValueByKey!149 (toList!779 lt!48153) (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!96294 () Bool)

(assert (=> b!96294 (= e!62799 (contains!797 (toList!779 lt!48153) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!25425 res!48619) b!96293))

(assert (= (and b!96293 res!48620) b!96294))

(declare-fun m!104671 () Bool)

(assert (=> d!25425 m!104671))

(declare-fun m!104673 () Bool)

(assert (=> d!25425 m!104673))

(declare-fun m!104675 () Bool)

(assert (=> d!25425 m!104675))

(declare-fun m!104677 () Bool)

(assert (=> d!25425 m!104677))

(declare-fun m!104679 () Bool)

(assert (=> b!96293 m!104679))

(declare-fun m!104681 () Bool)

(assert (=> b!96294 m!104681))

(assert (=> b!95844 d!25425))

(declare-fun d!25427 () Bool)

(declare-fun res!48623 () Bool)

(declare-fun e!62800 () Bool)

(assert (=> d!25427 (=> res!48623 e!62800)))

(assert (=> d!25427 (= res!48623 (bvsge (bvadd from!355 #b00000000000000000000000000000001) (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992))))))))

(assert (=> d!25427 (= (arrayNoDuplicates!0 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001) (ite c!16120 (Cons!1570 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) Nil!1571) Nil!1571)) e!62800)))

(declare-fun b!96295 () Bool)

(declare-fun e!62801 () Bool)

(declare-fun e!62803 () Bool)

(assert (=> b!96295 (= e!62801 e!62803)))

(declare-fun c!16223 () Bool)

(assert (=> b!96295 (= c!16223 (validKeyInArray!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!96296 () Bool)

(assert (=> b!96296 (= e!62800 e!62801)))

(declare-fun res!48621 () Bool)

(assert (=> b!96296 (=> (not res!48621) (not e!62801))))

(declare-fun e!62802 () Bool)

(assert (=> b!96296 (= res!48621 (not e!62802))))

(declare-fun res!48622 () Bool)

(assert (=> b!96296 (=> (not res!48622) (not e!62802))))

(assert (=> b!96296 (= res!48622 (validKeyInArray!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!96297 () Bool)

(assert (=> b!96297 (= e!62802 (contains!796 (ite c!16120 (Cons!1570 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) Nil!1571) Nil!1571) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun bm!9759 () Bool)

(declare-fun call!9762 () Bool)

(assert (=> bm!9759 (= call!9762 (arrayNoDuplicates!0 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!16223 (Cons!1570 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16120 (Cons!1570 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) Nil!1571) Nil!1571)) (ite c!16120 (Cons!1570 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) Nil!1571) Nil!1571))))))

(declare-fun b!96298 () Bool)

(assert (=> b!96298 (= e!62803 call!9762)))

(declare-fun b!96299 () Bool)

(assert (=> b!96299 (= e!62803 call!9762)))

(assert (= (and d!25427 (not res!48623)) b!96296))

(assert (= (and b!96296 res!48622) b!96297))

(assert (= (and b!96296 res!48621) b!96295))

(assert (= (and b!96295 c!16223) b!96298))

(assert (= (and b!96295 (not c!16223)) b!96299))

(assert (= (or b!96298 b!96299) bm!9759))

(declare-fun m!104683 () Bool)

(assert (=> b!96295 m!104683))

(assert (=> b!96295 m!104683))

(declare-fun m!104685 () Bool)

(assert (=> b!96295 m!104685))

(assert (=> b!96296 m!104683))

(assert (=> b!96296 m!104683))

(assert (=> b!96296 m!104685))

(assert (=> b!96297 m!104683))

(assert (=> b!96297 m!104683))

(declare-fun m!104687 () Bool)

(assert (=> b!96297 m!104687))

(assert (=> bm!9759 m!104683))

(declare-fun m!104689 () Bool)

(assert (=> bm!9759 m!104689))

(assert (=> bm!9687 d!25427))

(declare-fun b!96316 () Bool)

(declare-fun lt!48160 () SeekEntryResult!252)

(assert (=> b!96316 (and (bvsge (index!3150 lt!48160) #b00000000000000000000000000000000) (bvslt (index!3150 lt!48160) (size!2252 (_keys!4143 newMap!16))))))

(declare-fun res!48633 () Bool)

(assert (=> b!96316 (= res!48633 (= (select (arr!2003 (_keys!4143 newMap!16)) (index!3150 lt!48160)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!62814 () Bool)

(assert (=> b!96316 (=> (not res!48633) (not e!62814))))

(declare-fun b!96317 () Bool)

(declare-fun e!62812 () Bool)

(declare-fun call!9768 () Bool)

(assert (=> b!96317 (= e!62812 (not call!9768))))

(declare-fun call!9767 () Bool)

(declare-fun c!16229 () Bool)

(declare-fun bm!9764 () Bool)

(assert (=> bm!9764 (= call!9767 (inRange!0 (ite c!16229 (index!3150 lt!48160) (index!3153 lt!48160)) (mask!6542 newMap!16)))))

(declare-fun b!96318 () Bool)

(declare-fun e!62815 () Bool)

(assert (=> b!96318 (= e!62815 e!62814)))

(declare-fun res!48635 () Bool)

(assert (=> b!96318 (= res!48635 call!9767)))

(assert (=> b!96318 (=> (not res!48635) (not e!62814))))

(declare-fun b!96320 () Bool)

(declare-fun res!48632 () Bool)

(assert (=> b!96320 (=> (not res!48632) (not e!62812))))

(assert (=> b!96320 (= res!48632 (= (select (arr!2003 (_keys!4143 newMap!16)) (index!3153 lt!48160)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!96320 (and (bvsge (index!3153 lt!48160) #b00000000000000000000000000000000) (bvslt (index!3153 lt!48160) (size!2252 (_keys!4143 newMap!16))))))

(declare-fun b!96321 () Bool)

(declare-fun e!62813 () Bool)

(assert (=> b!96321 (= e!62815 e!62813)))

(declare-fun c!16228 () Bool)

(assert (=> b!96321 (= c!16228 ((_ is MissingVacant!252) lt!48160))))

(declare-fun bm!9765 () Bool)

(assert (=> bm!9765 (= call!9768 (arrayContainsKey!0 (_keys!4143 newMap!16) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!96322 () Bool)

(assert (=> b!96322 (= e!62814 (not call!9768))))

(declare-fun b!96323 () Bool)

(declare-fun res!48634 () Bool)

(assert (=> b!96323 (=> (not res!48634) (not e!62812))))

(assert (=> b!96323 (= res!48634 call!9767)))

(assert (=> b!96323 (= e!62813 e!62812)))

(declare-fun d!25429 () Bool)

(assert (=> d!25429 e!62815))

(assert (=> d!25429 (= c!16229 ((_ is MissingZero!252) lt!48160))))

(assert (=> d!25429 (= lt!48160 (seekEntryOrOpen!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (_keys!4143 newMap!16) (mask!6542 newMap!16)))))

(declare-fun lt!48159 () Unit!2864)

(declare-fun choose!582 (array!4215 array!4217 (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 (_ BitVec 64) Int) Unit!2864)

(assert (=> d!25429 (= lt!48159 (choose!582 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (defaultEntry!2457 newMap!16)))))

(assert (=> d!25429 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25429 (= (lemmaNotInListMapThenSeekEntryOrOpenFindsFreeOrNothing!40 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (defaultEntry!2457 newMap!16)) lt!48159)))

(declare-fun b!96319 () Bool)

(assert (=> b!96319 (= e!62813 ((_ is Undefined!252) lt!48160))))

(assert (= (and d!25429 c!16229) b!96318))

(assert (= (and d!25429 (not c!16229)) b!96321))

(assert (= (and b!96318 res!48635) b!96316))

(assert (= (and b!96316 res!48633) b!96322))

(assert (= (and b!96321 c!16228) b!96323))

(assert (= (and b!96321 (not c!16228)) b!96319))

(assert (= (and b!96323 res!48634) b!96320))

(assert (= (and b!96320 res!48632) b!96317))

(assert (= (or b!96318 b!96323) bm!9764))

(assert (= (or b!96322 b!96317) bm!9765))

(assert (=> d!25429 m!103861))

(assert (=> d!25429 m!103981))

(assert (=> d!25429 m!103861))

(declare-fun m!104691 () Bool)

(assert (=> d!25429 m!104691))

(assert (=> d!25429 m!104095))

(declare-fun m!104693 () Bool)

(assert (=> b!96316 m!104693))

(assert (=> bm!9765 m!103861))

(assert (=> bm!9765 m!103979))

(declare-fun m!104695 () Bool)

(assert (=> bm!9764 m!104695))

(declare-fun m!104697 () Bool)

(assert (=> b!96320 m!104697))

(assert (=> bm!9673 d!25429))

(declare-fun condMapEmpty!3713 () Bool)

(declare-fun mapDefault!3713 () ValueCell!966)

(assert (=> mapNonEmpty!3712 (= condMapEmpty!3713 (= mapRest!3712 ((as const (Array (_ BitVec 32) ValueCell!966)) mapDefault!3713)))))

(declare-fun e!62816 () Bool)

(declare-fun mapRes!3713 () Bool)

(assert (=> mapNonEmpty!3712 (= tp!9508 (and e!62816 mapRes!3713))))

(declare-fun mapIsEmpty!3713 () Bool)

(assert (=> mapIsEmpty!3713 mapRes!3713))

(declare-fun b!96324 () Bool)

(declare-fun e!62817 () Bool)

(assert (=> b!96324 (= e!62817 tp_is_empty!2619)))

(declare-fun mapNonEmpty!3713 () Bool)

(declare-fun tp!9509 () Bool)

(assert (=> mapNonEmpty!3713 (= mapRes!3713 (and tp!9509 e!62817))))

(declare-fun mapValue!3713 () ValueCell!966)

(declare-fun mapRest!3713 () (Array (_ BitVec 32) ValueCell!966))

(declare-fun mapKey!3713 () (_ BitVec 32))

(assert (=> mapNonEmpty!3713 (= mapRest!3712 (store mapRest!3713 mapKey!3713 mapValue!3713))))

(declare-fun b!96325 () Bool)

(assert (=> b!96325 (= e!62816 tp_is_empty!2619)))

(assert (= (and mapNonEmpty!3712 condMapEmpty!3713) mapIsEmpty!3713))

(assert (= (and mapNonEmpty!3712 (not condMapEmpty!3713)) mapNonEmpty!3713))

(assert (= (and mapNonEmpty!3713 ((_ is ValueCellFull!966) mapValue!3713)) b!96324))

(assert (= (and mapNonEmpty!3712 ((_ is ValueCellFull!966) mapDefault!3713)) b!96325))

(declare-fun m!104699 () Bool)

(assert (=> mapNonEmpty!3713 m!104699))

(declare-fun condMapEmpty!3714 () Bool)

(declare-fun mapDefault!3714 () ValueCell!966)

(assert (=> mapNonEmpty!3711 (= condMapEmpty!3714 (= mapRest!3711 ((as const (Array (_ BitVec 32) ValueCell!966)) mapDefault!3714)))))

(declare-fun e!62818 () Bool)

(declare-fun mapRes!3714 () Bool)

(assert (=> mapNonEmpty!3711 (= tp!9507 (and e!62818 mapRes!3714))))

(declare-fun mapIsEmpty!3714 () Bool)

(assert (=> mapIsEmpty!3714 mapRes!3714))

(declare-fun b!96326 () Bool)

(declare-fun e!62819 () Bool)

(assert (=> b!96326 (= e!62819 tp_is_empty!2619)))

(declare-fun mapNonEmpty!3714 () Bool)

(declare-fun tp!9510 () Bool)

(assert (=> mapNonEmpty!3714 (= mapRes!3714 (and tp!9510 e!62819))))

(declare-fun mapKey!3714 () (_ BitVec 32))

(declare-fun mapRest!3714 () (Array (_ BitVec 32) ValueCell!966))

(declare-fun mapValue!3714 () ValueCell!966)

(assert (=> mapNonEmpty!3714 (= mapRest!3711 (store mapRest!3714 mapKey!3714 mapValue!3714))))

(declare-fun b!96327 () Bool)

(assert (=> b!96327 (= e!62818 tp_is_empty!2619)))

(assert (= (and mapNonEmpty!3711 condMapEmpty!3714) mapIsEmpty!3714))

(assert (= (and mapNonEmpty!3711 (not condMapEmpty!3714)) mapNonEmpty!3714))

(assert (= (and mapNonEmpty!3714 ((_ is ValueCellFull!966) mapValue!3714)) b!96326))

(assert (= (and mapNonEmpty!3711 ((_ is ValueCellFull!966) mapDefault!3714)) b!96327))

(declare-fun m!104701 () Bool)

(assert (=> mapNonEmpty!3714 m!104701))

(declare-fun b_lambda!4255 () Bool)

(assert (= b_lambda!4243 (or (and b!95640 b_free!2405 (= (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) (defaultEntry!2457 newMap!16))) (and b!95639 b_free!2407) b_lambda!4255)))

(declare-fun b_lambda!4257 () Bool)

(assert (= b_lambda!4249 (or (and b!95640 b_free!2405) (and b!95639 b_free!2407 (= (defaultEntry!2457 newMap!16) (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))))) b_lambda!4257)))

(declare-fun b_lambda!4259 () Bool)

(assert (= b_lambda!4253 (or (and b!95640 b_free!2405 (= (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) (defaultEntry!2457 newMap!16))) (and b!95639 b_free!2407) b_lambda!4259)))

(declare-fun b_lambda!4261 () Bool)

(assert (= b_lambda!4247 (or (and b!95640 b_free!2405 (= (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) (defaultEntry!2457 newMap!16))) (and b!95639 b_free!2407) b_lambda!4261)))

(declare-fun b_lambda!4263 () Bool)

(assert (= b_lambda!4251 (or (and b!95640 b_free!2405) (and b!95639 b_free!2407 (= (defaultEntry!2457 newMap!16) (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))))) b_lambda!4263)))

(declare-fun b_lambda!4265 () Bool)

(assert (= b_lambda!4245 (or (and b!95640 b_free!2405 (= (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) (defaultEntry!2457 newMap!16))) (and b!95639 b_free!2407) b_lambda!4265)))

(check-sat (not b!96278) (not d!25327) (not b!96051) (not bm!9757) (not b_lambda!4241) (not b!96134) (not b!96204) (not bm!9732) (not b!96017) (not b!95967) (not b!96094) (not d!25323) (not d!25413) (not b!96004) (not d!25383) (not b_lambda!4263) (not d!25347) (not b_next!2405) (not b!96280) (not d!25331) (not bm!9747) (not b!96114) (not b!96287) (not bm!9737) (not d!25343) (not d!25405) (not bm!9744) (not b!96220) (not bm!9743) b_and!5887 (not b!96079) (not b!96061) (not b!95964) (not b!96047) (not d!25397) (not d!25415) (not b!96044) (not b_lambda!4261) (not b!96281) (not d!25403) (not b!96207) (not d!25401) (not d!25399) (not bm!9734) (not d!25353) (not b!96154) (not bm!9718) (not b!96240) (not bm!9753) (not b!96293) (not b!96018) (not bm!9758) (not d!25391) (not b!96159) (not bm!9754) (not bm!9725) (not b!96268) (not bm!9733) (not d!25305) (not d!25357) (not d!25411) (not b!96025) (not b!96029) (not d!25335) (not b!96242) (not b!96165) (not d!25409) (not b!96288) (not d!25417) (not bm!9764) (not b!96203) (not b!96088) (not d!25377) (not b_lambda!4237) (not mapNonEmpty!3714) (not d!25361) (not b!96009) (not d!25379) (not b!96040) (not d!25407) (not b!96043) (not b!96297) (not d!25429) (not d!25339) (not d!25315) (not b!96097) (not d!25389) (not b!96056) (not bm!9742) (not b!96205) (not b!96041) (not b!96236) (not d!25311) (not b!96232) (not b!95965) (not b!96139) (not bm!9719) (not mapNonEmpty!3713) (not b!96296) (not b!96294) (not b!96005) (not d!25337) (not bm!9723) (not d!25321) (not b!96227) (not b!96253) (not b!96137) (not b!96028) (not b!96279) (not b!96225) (not bm!9752) (not b!96231) (not bm!9765) (not b!96052) (not b!96251) (not b!96136) (not b!96209) (not b!96269) (not b!96289) (not b!96126) (not d!25307) (not b!96277) (not b_lambda!4257) (not b!96071) (not d!25333) (not bm!9750) (not b!96144) (not d!25365) (not b!96177) (not b!96077) (not d!25381) (not b!96284) (not b_lambda!4259) (not d!25329) (not b!96150) (not b!96163) (not b!96065) (not b!96050) (not b!96213) (not b!96265) (not bm!9720) b_and!5889 (not bm!9727) (not b!96244) (not b!96030) (not bm!9740) (not b!96295) (not d!25387) (not b!96221) (not bm!9730) (not b!96226) (not d!25303) (not bm!9759) (not b!96149) (not b!96072) (not b!96285) (not d!25419) tp_is_empty!2619 (not bm!9726) (not b!96246) (not d!25395) (not b!96290) (not b!96212) (not b_lambda!4255) (not b!96283) (not b!96057) (not d!25349) (not b_lambda!4265) (not d!25371) (not b!96027) (not d!25369) (not b!96214) (not b!96217) (not b!96218) (not b!96133) (not b!96084) (not d!25393) (not b!96067) (not d!25425) (not b!96255) (not b!96222) (not d!25367) (not b!96155) (not b!96092) (not d!25317) (not b!96083) (not d!25359) (not b!96074) (not b!96096) (not b!96078) (not b!96016) (not b!96024) (not b!96245) (not b!96148) (not b_next!2407) (not b!96125) (not d!25351))
(check-sat b_and!5887 b_and!5889 (not b_next!2405) (not b_next!2407))
(get-model)

(declare-fun d!25431 () Bool)

(assert (=> d!25431 (= (size!2256 newMap!16) (bvadd (_size!469 newMap!16) (bvsdiv (bvadd (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000010)))))

(assert (=> b!96041 d!25431))

(declare-fun d!25433 () Bool)

(declare-fun e!62820 () Bool)

(assert (=> d!25433 e!62820))

(declare-fun res!48636 () Bool)

(assert (=> d!25433 (=> (not res!48636) (not e!62820))))

(declare-fun lt!48163 () ListLongMap!1527)

(assert (=> d!25433 (= res!48636 (contains!794 lt!48163 (_1!1172 (ite (or c!16209 c!16213) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))))

(declare-fun lt!48162 () List!1573)

(assert (=> d!25433 (= lt!48163 (ListLongMap!1528 lt!48162))))

(declare-fun lt!48164 () Unit!2864)

(declare-fun lt!48161 () Unit!2864)

(assert (=> d!25433 (= lt!48164 lt!48161)))

(assert (=> d!25433 (= (getValueByKey!149 lt!48162 (_1!1172 (ite (or c!16209 c!16213) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))) (Some!154 (_2!1172 (ite (or c!16209 c!16213) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))))

(assert (=> d!25433 (= lt!48161 (lemmaContainsTupThenGetReturnValue!65 lt!48162 (_1!1172 (ite (or c!16209 c!16213) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))) (_2!1172 (ite (or c!16209 c!16213) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))))

(assert (=> d!25433 (= lt!48162 (insertStrictlySorted!68 (toList!779 (ite c!16209 call!9754 (ite c!16213 call!9753 call!9752))) (_1!1172 (ite (or c!16209 c!16213) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))) (_2!1172 (ite (or c!16209 c!16213) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))))

(assert (=> d!25433 (= (+!134 (ite c!16209 call!9754 (ite c!16213 call!9753 call!9752)) (ite (or c!16209 c!16213) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))) lt!48163)))

(declare-fun b!96328 () Bool)

(declare-fun res!48637 () Bool)

(assert (=> b!96328 (=> (not res!48637) (not e!62820))))

(assert (=> b!96328 (= res!48637 (= (getValueByKey!149 (toList!779 lt!48163) (_1!1172 (ite (or c!16209 c!16213) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))) (Some!154 (_2!1172 (ite (or c!16209 c!16213) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))))

(declare-fun b!96329 () Bool)

(assert (=> b!96329 (= e!62820 (contains!797 (toList!779 lt!48163) (ite (or c!16209 c!16213) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(assert (= (and d!25433 res!48636) b!96328))

(assert (= (and b!96328 res!48637) b!96329))

(declare-fun m!104703 () Bool)

(assert (=> d!25433 m!104703))

(declare-fun m!104705 () Bool)

(assert (=> d!25433 m!104705))

(declare-fun m!104707 () Bool)

(assert (=> d!25433 m!104707))

(declare-fun m!104709 () Bool)

(assert (=> d!25433 m!104709))

(declare-fun m!104711 () Bool)

(assert (=> b!96328 m!104711))

(declare-fun m!104713 () Bool)

(assert (=> b!96329 m!104713))

(assert (=> bm!9753 d!25433))

(declare-fun d!25435 () Bool)

(assert (=> d!25435 (= (get!1271 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2777 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!96096 d!25435))

(assert (=> b!96204 d!25301))

(declare-fun d!25437 () Bool)

(declare-fun res!48638 () Bool)

(declare-fun e!62821 () Bool)

(assert (=> d!25437 (=> (not res!48638) (not e!62821))))

(assert (=> d!25437 (= res!48638 (validMask!0 (mask!6542 (_2!1173 lt!47744))))))

(assert (=> d!25437 (= (simpleValid!67 (_2!1173 lt!47744)) e!62821)))

(declare-fun b!96331 () Bool)

(declare-fun res!48641 () Bool)

(assert (=> b!96331 (=> (not res!48641) (not e!62821))))

(assert (=> b!96331 (= res!48641 (bvsge (size!2256 (_2!1173 lt!47744)) (_size!469 (_2!1173 lt!47744))))))

(declare-fun b!96333 () Bool)

(assert (=> b!96333 (= e!62821 (and (bvsge (extraKeys!2282 (_2!1173 lt!47744)) #b00000000000000000000000000000000) (bvsle (extraKeys!2282 (_2!1173 lt!47744)) #b00000000000000000000000000000011) (bvsge (_vacant!469 (_2!1173 lt!47744)) #b00000000000000000000000000000000)))))

(declare-fun b!96332 () Bool)

(declare-fun res!48639 () Bool)

(assert (=> b!96332 (=> (not res!48639) (not e!62821))))

(assert (=> b!96332 (= res!48639 (= (size!2256 (_2!1173 lt!47744)) (bvadd (_size!469 (_2!1173 lt!47744)) (bvsdiv (bvadd (extraKeys!2282 (_2!1173 lt!47744)) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!96330 () Bool)

(declare-fun res!48640 () Bool)

(assert (=> b!96330 (=> (not res!48640) (not e!62821))))

(assert (=> b!96330 (= res!48640 (and (= (size!2253 (_values!2440 (_2!1173 lt!47744))) (bvadd (mask!6542 (_2!1173 lt!47744)) #b00000000000000000000000000000001)) (= (size!2252 (_keys!4143 (_2!1173 lt!47744))) (size!2253 (_values!2440 (_2!1173 lt!47744)))) (bvsge (_size!469 (_2!1173 lt!47744)) #b00000000000000000000000000000000) (bvsle (_size!469 (_2!1173 lt!47744)) (bvadd (mask!6542 (_2!1173 lt!47744)) #b00000000000000000000000000000001))))))

(assert (= (and d!25437 res!48638) b!96330))

(assert (= (and b!96330 res!48640) b!96331))

(assert (= (and b!96331 res!48641) b!96332))

(assert (= (and b!96332 res!48639) b!96333))

(declare-fun m!104715 () Bool)

(assert (=> d!25437 m!104715))

(declare-fun m!104717 () Bool)

(assert (=> b!96331 m!104717))

(assert (=> b!96332 m!104717))

(assert (=> d!25321 d!25437))

(assert (=> b!96207 d!25301))

(declare-fun d!25439 () Bool)

(assert (=> d!25439 (= (apply!91 lt!47960 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1273 (getValueByKey!149 (toList!779 lt!47960) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!3963 () Bool)

(assert (= bs!3963 d!25439))

(declare-fun m!104719 () Bool)

(assert (=> bs!3963 m!104719))

(assert (=> bs!3963 m!104719))

(declare-fun m!104721 () Bool)

(assert (=> bs!3963 m!104721))

(assert (=> b!96052 d!25439))

(declare-fun e!62823 () Bool)

(declare-fun b!96334 () Bool)

(declare-fun lt!48171 () ListLongMap!1527)

(assert (=> b!96334 (= e!62823 (= lt!48171 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (ite (and c!16102 c!16108) lt!47752 (extraKeys!2282 newMap!16)) (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)) (minValue!2342 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2457 newMap!16))))))

(declare-fun d!25441 () Bool)

(declare-fun e!62827 () Bool)

(assert (=> d!25441 e!62827))

(declare-fun res!48642 () Bool)

(assert (=> d!25441 (=> (not res!48642) (not e!62827))))

(assert (=> d!25441 (= res!48642 (not (contains!794 lt!48171 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!62825 () ListLongMap!1527)

(assert (=> d!25441 (= lt!48171 e!62825)))

(declare-fun c!16233 () Bool)

(assert (=> d!25441 (= c!16233 (bvsge #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(assert (=> d!25441 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25441 (= (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (ite (and c!16102 c!16108) lt!47752 (extraKeys!2282 newMap!16)) (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) lt!48171)))

(declare-fun b!96335 () Bool)

(declare-fun e!62828 () Bool)

(assert (=> b!96335 (= e!62828 (validKeyInArray!0 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!96335 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!96336 () Bool)

(declare-fun lt!48170 () Unit!2864)

(declare-fun lt!48168 () Unit!2864)

(assert (=> b!96336 (= lt!48170 lt!48168)))

(declare-fun lt!48167 () V!3139)

(declare-fun lt!48166 () ListLongMap!1527)

(declare-fun lt!48169 () (_ BitVec 64))

(declare-fun lt!48165 () (_ BitVec 64))

(assert (=> b!96336 (not (contains!794 (+!134 lt!48166 (tuple2!2323 lt!48169 lt!48167)) lt!48165))))

(assert (=> b!96336 (= lt!48168 (addStillNotContains!39 lt!48166 lt!48169 lt!48167 lt!48165))))

(assert (=> b!96336 (= lt!48165 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!96336 (= lt!48167 (get!1269 (select (arr!2004 (_values!2440 newMap!16)) #b00000000000000000000000000000000) (dynLambda!364 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!96336 (= lt!48169 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun call!9769 () ListLongMap!1527)

(assert (=> b!96336 (= lt!48166 call!9769)))

(declare-fun e!62822 () ListLongMap!1527)

(assert (=> b!96336 (= e!62822 (+!134 call!9769 (tuple2!2323 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000) (get!1269 (select (arr!2004 (_values!2440 newMap!16)) #b00000000000000000000000000000000) (dynLambda!364 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun bm!9766 () Bool)

(assert (=> bm!9766 (= call!9769 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (ite (and c!16102 c!16108) lt!47752 (extraKeys!2282 newMap!16)) (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)) (minValue!2342 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2457 newMap!16)))))

(declare-fun b!96337 () Bool)

(declare-fun e!62824 () Bool)

(assert (=> b!96337 (= e!62824 e!62823)))

(declare-fun c!16230 () Bool)

(assert (=> b!96337 (= c!16230 (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun b!96338 () Bool)

(assert (=> b!96338 (= e!62825 e!62822)))

(declare-fun c!16231 () Bool)

(assert (=> b!96338 (= c!16231 (validKeyInArray!0 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96339 () Bool)

(assert (=> b!96339 (= e!62822 call!9769)))

(declare-fun b!96340 () Bool)

(assert (=> b!96340 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(assert (=> b!96340 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (_values!2440 newMap!16))))))

(declare-fun e!62826 () Bool)

(assert (=> b!96340 (= e!62826 (= (apply!91 lt!48171 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) (get!1269 (select (arr!2004 (_values!2440 newMap!16)) #b00000000000000000000000000000000) (dynLambda!364 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!96341 () Bool)

(assert (=> b!96341 (= e!62825 (ListLongMap!1528 Nil!1570))))

(declare-fun b!96342 () Bool)

(assert (=> b!96342 (= e!62827 e!62824)))

(declare-fun c!16232 () Bool)

(assert (=> b!96342 (= c!16232 e!62828)))

(declare-fun res!48644 () Bool)

(assert (=> b!96342 (=> (not res!48644) (not e!62828))))

(assert (=> b!96342 (= res!48644 (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun b!96343 () Bool)

(assert (=> b!96343 (= e!62823 (isEmpty!354 lt!48171))))

(declare-fun b!96344 () Bool)

(declare-fun res!48643 () Bool)

(assert (=> b!96344 (=> (not res!48643) (not e!62827))))

(assert (=> b!96344 (= res!48643 (not (contains!794 lt!48171 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!96345 () Bool)

(assert (=> b!96345 (= e!62824 e!62826)))

(assert (=> b!96345 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun res!48645 () Bool)

(assert (=> b!96345 (= res!48645 (contains!794 lt!48171 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!96345 (=> (not res!48645) (not e!62826))))

(assert (= (and d!25441 c!16233) b!96341))

(assert (= (and d!25441 (not c!16233)) b!96338))

(assert (= (and b!96338 c!16231) b!96336))

(assert (= (and b!96338 (not c!16231)) b!96339))

(assert (= (or b!96336 b!96339) bm!9766))

(assert (= (and d!25441 res!48642) b!96344))

(assert (= (and b!96344 res!48643) b!96342))

(assert (= (and b!96342 res!48644) b!96335))

(assert (= (and b!96342 c!16232) b!96345))

(assert (= (and b!96342 (not c!16232)) b!96337))

(assert (= (and b!96345 res!48645) b!96340))

(assert (= (and b!96337 c!16230) b!96334))

(assert (= (and b!96337 (not c!16230)) b!96343))

(declare-fun b_lambda!4267 () Bool)

(assert (=> (not b_lambda!4267) (not b!96336)))

(assert (=> b!96336 t!5504))

(declare-fun b_and!5891 () Bool)

(assert (= b_and!5887 (and (=> t!5504 result!3229) b_and!5891)))

(assert (=> b!96336 t!5506))

(declare-fun b_and!5893 () Bool)

(assert (= b_and!5889 (and (=> t!5506 result!3231) b_and!5893)))

(declare-fun b_lambda!4269 () Bool)

(assert (=> (not b_lambda!4269) (not b!96340)))

(assert (=> b!96340 t!5504))

(declare-fun b_and!5895 () Bool)

(assert (= b_and!5891 (and (=> t!5504 result!3229) b_and!5895)))

(assert (=> b!96340 t!5506))

(declare-fun b_and!5897 () Bool)

(assert (= b_and!5893 (and (=> t!5506 result!3231) b_and!5897)))

(declare-fun m!104723 () Bool)

(assert (=> b!96343 m!104723))

(assert (=> b!96340 m!104117))

(assert (=> b!96340 m!104441))

(assert (=> b!96340 m!104273))

(assert (=> b!96340 m!104117))

(declare-fun m!104725 () Bool)

(assert (=> b!96340 m!104725))

(assert (=> b!96340 m!104441))

(assert (=> b!96340 m!104273))

(assert (=> b!96340 m!104443))

(declare-fun m!104727 () Bool)

(assert (=> b!96334 m!104727))

(assert (=> b!96338 m!104117))

(assert (=> b!96338 m!104117))

(assert (=> b!96338 m!104261))

(declare-fun m!104729 () Bool)

(assert (=> b!96336 m!104729))

(assert (=> b!96336 m!104441))

(declare-fun m!104731 () Bool)

(assert (=> b!96336 m!104731))

(assert (=> b!96336 m!104441))

(assert (=> b!96336 m!104273))

(assert (=> b!96336 m!104443))

(assert (=> b!96336 m!104729))

(declare-fun m!104733 () Bool)

(assert (=> b!96336 m!104733))

(assert (=> b!96336 m!104117))

(declare-fun m!104735 () Bool)

(assert (=> b!96336 m!104735))

(assert (=> b!96336 m!104273))

(declare-fun m!104737 () Bool)

(assert (=> b!96344 m!104737))

(assert (=> b!96335 m!104117))

(assert (=> b!96335 m!104117))

(assert (=> b!96335 m!104261))

(declare-fun m!104739 () Bool)

(assert (=> d!25441 m!104739))

(assert (=> d!25441 m!104095))

(assert (=> bm!9766 m!104727))

(assert (=> b!96345 m!104117))

(assert (=> b!96345 m!104117))

(declare-fun m!104741 () Bool)

(assert (=> b!96345 m!104741))

(assert (=> bm!9740 d!25441))

(declare-fun d!25443 () Bool)

(declare-fun res!48646 () Bool)

(declare-fun e!62829 () Bool)

(assert (=> d!25443 (=> res!48646 e!62829)))

(assert (=> d!25443 (= res!48646 (and ((_ is Cons!1569) (toList!779 lt!47819)) (= (_1!1172 (h!2162 (toList!779 lt!47819))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!25443 (= (containsKey!153 (toList!779 lt!47819) #b1000000000000000000000000000000000000000000000000000000000000000) e!62829)))

(declare-fun b!96346 () Bool)

(declare-fun e!62830 () Bool)

(assert (=> b!96346 (= e!62829 e!62830)))

(declare-fun res!48647 () Bool)

(assert (=> b!96346 (=> (not res!48647) (not e!62830))))

(assert (=> b!96346 (= res!48647 (and (or (not ((_ is Cons!1569) (toList!779 lt!47819))) (bvsle (_1!1172 (h!2162 (toList!779 lt!47819))) #b1000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1569) (toList!779 lt!47819)) (bvslt (_1!1172 (h!2162 (toList!779 lt!47819))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!96347 () Bool)

(assert (=> b!96347 (= e!62830 (containsKey!153 (t!5495 (toList!779 lt!47819)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!25443 (not res!48646)) b!96346))

(assert (= (and b!96346 res!48647) b!96347))

(declare-fun m!104743 () Bool)

(assert (=> b!96347 m!104743))

(assert (=> d!25369 d!25443))

(declare-fun d!25445 () Bool)

(declare-fun e!62831 () Bool)

(assert (=> d!25445 e!62831))

(declare-fun res!48648 () Bool)

(assert (=> d!25445 (=> res!48648 e!62831)))

(declare-fun lt!48173 () Bool)

(assert (=> d!25445 (= res!48648 (not lt!48173))))

(declare-fun lt!48172 () Bool)

(assert (=> d!25445 (= lt!48173 lt!48172)))

(declare-fun lt!48174 () Unit!2864)

(declare-fun e!62832 () Unit!2864)

(assert (=> d!25445 (= lt!48174 e!62832)))

(declare-fun c!16234 () Bool)

(assert (=> d!25445 (= c!16234 lt!48172)))

(assert (=> d!25445 (= lt!48172 (containsKey!153 (toList!779 (map!1247 (_2!1173 lt!47912))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(assert (=> d!25445 (= (contains!794 (map!1247 (_2!1173 lt!47912)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) lt!48173)))

(declare-fun b!96348 () Bool)

(declare-fun lt!48175 () Unit!2864)

(assert (=> b!96348 (= e!62832 lt!48175)))

(assert (=> b!96348 (= lt!48175 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 (map!1247 (_2!1173 lt!47912))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(assert (=> b!96348 (isDefined!102 (getValueByKey!149 (toList!779 (map!1247 (_2!1173 lt!47912))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(declare-fun b!96349 () Bool)

(declare-fun Unit!2889 () Unit!2864)

(assert (=> b!96349 (= e!62832 Unit!2889)))

(declare-fun b!96350 () Bool)

(assert (=> b!96350 (= e!62831 (isDefined!102 (getValueByKey!149 (toList!779 (map!1247 (_2!1173 lt!47912))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355))))))

(assert (= (and d!25445 c!16234) b!96348))

(assert (= (and d!25445 (not c!16234)) b!96349))

(assert (= (and d!25445 (not res!48648)) b!96350))

(assert (=> d!25445 m!103861))

(declare-fun m!104745 () Bool)

(assert (=> d!25445 m!104745))

(assert (=> b!96348 m!103861))

(declare-fun m!104747 () Bool)

(assert (=> b!96348 m!104747))

(assert (=> b!96348 m!103861))

(declare-fun m!104749 () Bool)

(assert (=> b!96348 m!104749))

(assert (=> b!96348 m!104749))

(declare-fun m!104751 () Bool)

(assert (=> b!96348 m!104751))

(assert (=> b!96350 m!103861))

(assert (=> b!96350 m!104749))

(assert (=> b!96350 m!104749))

(assert (=> b!96350 m!104751))

(assert (=> b!96009 d!25445))

(declare-fun d!25447 () Bool)

(assert (=> d!25447 (= (map!1247 (_2!1173 lt!47912)) (getCurrentListMap!470 (_keys!4143 (_2!1173 lt!47912)) (_values!2440 (_2!1173 lt!47912)) (mask!6542 (_2!1173 lt!47912)) (extraKeys!2282 (_2!1173 lt!47912)) (zeroValue!2342 (_2!1173 lt!47912)) (minValue!2342 (_2!1173 lt!47912)) #b00000000000000000000000000000000 (defaultEntry!2457 (_2!1173 lt!47912))))))

(declare-fun bs!3964 () Bool)

(assert (= bs!3964 d!25447))

(declare-fun m!104753 () Bool)

(assert (=> bs!3964 m!104753))

(assert (=> b!96009 d!25447))

(declare-fun b!96351 () Bool)

(declare-fun e!62834 () Bool)

(declare-fun call!9770 () Bool)

(assert (=> b!96351 (= e!62834 call!9770)))

(declare-fun b!96352 () Bool)

(declare-fun e!62835 () Bool)

(assert (=> b!96352 (= e!62834 e!62835)))

(declare-fun lt!48176 () (_ BitVec 64))

(assert (=> b!96352 (= lt!48176 (select (arr!2003 (_keys!4143 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(declare-fun lt!48178 () Unit!2864)

(assert (=> b!96352 (= lt!48178 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4143 newMap!16) lt!48176 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (=> b!96352 (arrayContainsKey!0 (_keys!4143 newMap!16) lt!48176 #b00000000000000000000000000000000)))

(declare-fun lt!48177 () Unit!2864)

(assert (=> b!96352 (= lt!48177 lt!48178)))

(declare-fun res!48649 () Bool)

(assert (=> b!96352 (= res!48649 (= (seekEntryOrOpen!0 (select (arr!2003 (_keys!4143 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (_keys!4143 newMap!16) (mask!6542 newMap!16)) (Found!252 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> b!96352 (=> (not res!48649) (not e!62835))))

(declare-fun b!96353 () Bool)

(declare-fun e!62833 () Bool)

(assert (=> b!96353 (= e!62833 e!62834)))

(declare-fun c!16235 () Bool)

(assert (=> b!96353 (= c!16235 (validKeyInArray!0 (select (arr!2003 (_keys!4143 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun d!25449 () Bool)

(declare-fun res!48650 () Bool)

(assert (=> d!25449 (=> res!48650 e!62833)))

(assert (=> d!25449 (= res!48650 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2252 (_keys!4143 newMap!16))))))

(assert (=> d!25449 (= (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4143 newMap!16) (mask!6542 newMap!16)) e!62833)))

(declare-fun b!96354 () Bool)

(assert (=> b!96354 (= e!62835 call!9770)))

(declare-fun bm!9767 () Bool)

(assert (=> bm!9767 (= call!9770 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (_keys!4143 newMap!16) (mask!6542 newMap!16)))))

(assert (= (and d!25449 (not res!48650)) b!96353))

(assert (= (and b!96353 c!16235) b!96352))

(assert (= (and b!96353 (not c!16235)) b!96351))

(assert (= (and b!96352 res!48649) b!96354))

(assert (= (or b!96354 b!96351) bm!9767))

(declare-fun m!104755 () Bool)

(assert (=> b!96352 m!104755))

(declare-fun m!104757 () Bool)

(assert (=> b!96352 m!104757))

(declare-fun m!104759 () Bool)

(assert (=> b!96352 m!104759))

(assert (=> b!96352 m!104755))

(declare-fun m!104761 () Bool)

(assert (=> b!96352 m!104761))

(assert (=> b!96353 m!104755))

(assert (=> b!96353 m!104755))

(declare-fun m!104763 () Bool)

(assert (=> b!96353 m!104763))

(declare-fun m!104765 () Bool)

(assert (=> bm!9767 m!104765))

(assert (=> bm!9737 d!25449))

(declare-fun d!25451 () Bool)

(assert (=> d!25451 (= (apply!91 lt!48040 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1273 (getValueByKey!149 (toList!779 lt!48040) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!3965 () Bool)

(assert (= bs!3965 d!25451))

(declare-fun m!104767 () Bool)

(assert (=> bs!3965 m!104767))

(assert (=> bs!3965 m!104767))

(declare-fun m!104769 () Bool)

(assert (=> bs!3965 m!104769))

(assert (=> b!96150 d!25451))

(declare-fun d!25453 () Bool)

(assert (=> d!25453 (isDefined!102 (getValueByKey!149 (toList!779 e!62513) (ite c!16103 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (select (arr!2003 (_keys!4143 newMap!16)) (index!3151 lt!47759)))))))

(declare-fun lt!48179 () Unit!2864)

(assert (=> d!25453 (= lt!48179 (choose!578 (toList!779 e!62513) (ite c!16103 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (select (arr!2003 (_keys!4143 newMap!16)) (index!3151 lt!47759)))))))

(declare-fun e!62836 () Bool)

(assert (=> d!25453 e!62836))

(declare-fun res!48651 () Bool)

(assert (=> d!25453 (=> (not res!48651) (not e!62836))))

(assert (=> d!25453 (= res!48651 (isStrictlySorted!303 (toList!779 e!62513)))))

(assert (=> d!25453 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 e!62513) (ite c!16103 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (select (arr!2003 (_keys!4143 newMap!16)) (index!3151 lt!47759)))) lt!48179)))

(declare-fun b!96355 () Bool)

(assert (=> b!96355 (= e!62836 (containsKey!153 (toList!779 e!62513) (ite c!16103 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (select (arr!2003 (_keys!4143 newMap!16)) (index!3151 lt!47759)))))))

(assert (= (and d!25453 res!48651) b!96355))

(assert (=> d!25453 m!104559))

(assert (=> d!25453 m!104559))

(assert (=> d!25453 m!104561))

(declare-fun m!104771 () Bool)

(assert (=> d!25453 m!104771))

(declare-fun m!104773 () Bool)

(assert (=> d!25453 m!104773))

(assert (=> b!96355 m!104555))

(assert (=> b!96253 d!25453))

(declare-fun d!25455 () Bool)

(assert (=> d!25455 (= (isDefined!102 (getValueByKey!149 (toList!779 e!62513) (ite c!16103 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (select (arr!2003 (_keys!4143 newMap!16)) (index!3151 lt!47759))))) (not (isEmpty!353 (getValueByKey!149 (toList!779 e!62513) (ite c!16103 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (select (arr!2003 (_keys!4143 newMap!16)) (index!3151 lt!47759)))))))))

(declare-fun bs!3966 () Bool)

(assert (= bs!3966 d!25455))

(assert (=> bs!3966 m!104559))

(declare-fun m!104775 () Bool)

(assert (=> bs!3966 m!104775))

(assert (=> b!96253 d!25455))

(declare-fun b!96356 () Bool)

(declare-fun e!62837 () Option!155)

(assert (=> b!96356 (= e!62837 (Some!154 (_2!1172 (h!2162 (toList!779 e!62513)))))))

(declare-fun b!96359 () Bool)

(declare-fun e!62838 () Option!155)

(assert (=> b!96359 (= e!62838 None!153)))

(declare-fun d!25457 () Bool)

(declare-fun c!16236 () Bool)

(assert (=> d!25457 (= c!16236 (and ((_ is Cons!1569) (toList!779 e!62513)) (= (_1!1172 (h!2162 (toList!779 e!62513))) (ite c!16103 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (select (arr!2003 (_keys!4143 newMap!16)) (index!3151 lt!47759))))))))

(assert (=> d!25457 (= (getValueByKey!149 (toList!779 e!62513) (ite c!16103 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (select (arr!2003 (_keys!4143 newMap!16)) (index!3151 lt!47759)))) e!62837)))

(declare-fun b!96358 () Bool)

(assert (=> b!96358 (= e!62838 (getValueByKey!149 (t!5495 (toList!779 e!62513)) (ite c!16103 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (select (arr!2003 (_keys!4143 newMap!16)) (index!3151 lt!47759)))))))

(declare-fun b!96357 () Bool)

(assert (=> b!96357 (= e!62837 e!62838)))

(declare-fun c!16237 () Bool)

(assert (=> b!96357 (= c!16237 (and ((_ is Cons!1569) (toList!779 e!62513)) (not (= (_1!1172 (h!2162 (toList!779 e!62513))) (ite c!16103 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (select (arr!2003 (_keys!4143 newMap!16)) (index!3151 lt!47759)))))))))

(assert (= (and d!25457 c!16236) b!96356))

(assert (= (and d!25457 (not c!16236)) b!96357))

(assert (= (and b!96357 c!16237) b!96358))

(assert (= (and b!96357 (not c!16237)) b!96359))

(declare-fun m!104777 () Bool)

(assert (=> b!96358 m!104777))

(assert (=> b!96253 d!25457))

(declare-fun d!25459 () Bool)

(declare-fun e!62839 () Bool)

(assert (=> d!25459 e!62839))

(declare-fun res!48652 () Bool)

(assert (=> d!25459 (=> res!48652 e!62839)))

(declare-fun lt!48181 () Bool)

(assert (=> d!25459 (= res!48652 (not lt!48181))))

(declare-fun lt!48180 () Bool)

(assert (=> d!25459 (= lt!48181 lt!48180)))

(declare-fun lt!48182 () Unit!2864)

(declare-fun e!62840 () Unit!2864)

(assert (=> d!25459 (= lt!48182 e!62840)))

(declare-fun c!16238 () Bool)

(assert (=> d!25459 (= c!16238 lt!48180)))

(assert (=> d!25459 (= lt!48180 (containsKey!153 (toList!779 lt!48153) (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25459 (= (contains!794 lt!48153 (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!48181)))

(declare-fun b!96360 () Bool)

(declare-fun lt!48183 () Unit!2864)

(assert (=> b!96360 (= e!62840 lt!48183)))

(assert (=> b!96360 (= lt!48183 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 lt!48153) (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> b!96360 (isDefined!102 (getValueByKey!149 (toList!779 lt!48153) (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!96361 () Bool)

(declare-fun Unit!2890 () Unit!2864)

(assert (=> b!96361 (= e!62840 Unit!2890)))

(declare-fun b!96362 () Bool)

(assert (=> b!96362 (= e!62839 (isDefined!102 (getValueByKey!149 (toList!779 lt!48153) (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!25459 c!16238) b!96360))

(assert (= (and d!25459 (not c!16238)) b!96361))

(assert (= (and d!25459 (not res!48652)) b!96362))

(declare-fun m!104779 () Bool)

(assert (=> d!25459 m!104779))

(declare-fun m!104781 () Bool)

(assert (=> b!96360 m!104781))

(assert (=> b!96360 m!104679))

(assert (=> b!96360 m!104679))

(declare-fun m!104783 () Bool)

(assert (=> b!96360 m!104783))

(assert (=> b!96362 m!104679))

(assert (=> b!96362 m!104679))

(assert (=> b!96362 m!104783))

(assert (=> d!25425 d!25459))

(declare-fun b!96363 () Bool)

(declare-fun e!62841 () Option!155)

(assert (=> b!96363 (= e!62841 (Some!154 (_2!1172 (h!2162 lt!48152))))))

(declare-fun b!96366 () Bool)

(declare-fun e!62842 () Option!155)

(assert (=> b!96366 (= e!62842 None!153)))

(declare-fun c!16239 () Bool)

(declare-fun d!25461 () Bool)

(assert (=> d!25461 (= c!16239 (and ((_ is Cons!1569) lt!48152) (= (_1!1172 (h!2162 lt!48152)) (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!25461 (= (getValueByKey!149 lt!48152 (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!62841)))

(declare-fun b!96365 () Bool)

(assert (=> b!96365 (= e!62842 (getValueByKey!149 (t!5495 lt!48152) (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!96364 () Bool)

(assert (=> b!96364 (= e!62841 e!62842)))

(declare-fun c!16240 () Bool)

(assert (=> b!96364 (= c!16240 (and ((_ is Cons!1569) lt!48152) (not (= (_1!1172 (h!2162 lt!48152)) (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!25461 c!16239) b!96363))

(assert (= (and d!25461 (not c!16239)) b!96364))

(assert (= (and b!96364 c!16240) b!96365))

(assert (= (and b!96364 (not c!16240)) b!96366))

(declare-fun m!104785 () Bool)

(assert (=> b!96365 m!104785))

(assert (=> d!25425 d!25461))

(declare-fun d!25463 () Bool)

(assert (=> d!25463 (= (getValueByKey!149 lt!48152 (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!48186 () Unit!2864)

(declare-fun choose!583 (List!1573 (_ BitVec 64) V!3139) Unit!2864)

(assert (=> d!25463 (= lt!48186 (choose!583 lt!48152 (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!62845 () Bool)

(assert (=> d!25463 e!62845))

(declare-fun res!48657 () Bool)

(assert (=> d!25463 (=> (not res!48657) (not e!62845))))

(assert (=> d!25463 (= res!48657 (isStrictlySorted!303 lt!48152))))

(assert (=> d!25463 (= (lemmaContainsTupThenGetReturnValue!65 lt!48152 (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!48186)))

(declare-fun b!96371 () Bool)

(declare-fun res!48658 () Bool)

(assert (=> b!96371 (=> (not res!48658) (not e!62845))))

(assert (=> b!96371 (= res!48658 (containsKey!153 lt!48152 (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!96372 () Bool)

(assert (=> b!96372 (= e!62845 (contains!797 lt!48152 (tuple2!2323 (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!25463 res!48657) b!96371))

(assert (= (and b!96371 res!48658) b!96372))

(assert (=> d!25463 m!104673))

(declare-fun m!104787 () Bool)

(assert (=> d!25463 m!104787))

(declare-fun m!104789 () Bool)

(assert (=> d!25463 m!104789))

(declare-fun m!104791 () Bool)

(assert (=> b!96371 m!104791))

(declare-fun m!104793 () Bool)

(assert (=> b!96372 m!104793))

(assert (=> d!25425 d!25463))

(declare-fun b!96393 () Bool)

(declare-fun e!62858 () List!1573)

(declare-fun call!9778 () List!1573)

(assert (=> b!96393 (= e!62858 call!9778)))

(declare-fun c!16249 () Bool)

(declare-fun b!96394 () Bool)

(declare-fun e!62856 () List!1573)

(declare-fun c!16250 () Bool)

(assert (=> b!96394 (= e!62856 (ite c!16249 (t!5495 (toList!779 call!9665)) (ite c!16250 (Cons!1569 (h!2162 (toList!779 call!9665)) (t!5495 (toList!779 call!9665))) Nil!1570)))))

(declare-fun bm!9774 () Bool)

(declare-fun call!9779 () List!1573)

(declare-fun call!9777 () List!1573)

(assert (=> bm!9774 (= call!9779 call!9777)))

(declare-fun b!96395 () Bool)

(declare-fun e!62859 () List!1573)

(assert (=> b!96395 (= e!62859 call!9779)))

(declare-fun b!96397 () Bool)

(assert (=> b!96397 (= c!16250 (and ((_ is Cons!1569) (toList!779 call!9665)) (bvsgt (_1!1172 (h!2162 (toList!779 call!9665))) (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!62860 () List!1573)

(assert (=> b!96397 (= e!62860 e!62859)))

(declare-fun b!96398 () Bool)

(assert (=> b!96398 (= e!62860 call!9777)))

(declare-fun c!16252 () Bool)

(declare-fun bm!9775 () Bool)

(declare-fun $colon$colon!77 (List!1573 tuple2!2322) List!1573)

(assert (=> bm!9775 (= call!9778 ($colon$colon!77 e!62856 (ite c!16252 (h!2162 (toList!779 call!9665)) (tuple2!2323 (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun c!16251 () Bool)

(assert (=> bm!9775 (= c!16251 c!16252)))

(declare-fun b!96399 () Bool)

(declare-fun res!48663 () Bool)

(declare-fun e!62857 () Bool)

(assert (=> b!96399 (=> (not res!48663) (not e!62857))))

(declare-fun lt!48189 () List!1573)

(assert (=> b!96399 (= res!48663 (containsKey!153 lt!48189 (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!96400 () Bool)

(assert (=> b!96400 (= e!62856 (insertStrictlySorted!68 (t!5495 (toList!779 call!9665)) (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun bm!9776 () Bool)

(assert (=> bm!9776 (= call!9777 call!9778)))

(declare-fun d!25465 () Bool)

(assert (=> d!25465 e!62857))

(declare-fun res!48664 () Bool)

(assert (=> d!25465 (=> (not res!48664) (not e!62857))))

(assert (=> d!25465 (= res!48664 (isStrictlySorted!303 lt!48189))))

(assert (=> d!25465 (= lt!48189 e!62858)))

(assert (=> d!25465 (= c!16252 (and ((_ is Cons!1569) (toList!779 call!9665)) (bvslt (_1!1172 (h!2162 (toList!779 call!9665))) (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!25465 (isStrictlySorted!303 (toList!779 call!9665))))

(assert (=> d!25465 (= (insertStrictlySorted!68 (toList!779 call!9665) (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!48189)))

(declare-fun b!96396 () Bool)

(assert (=> b!96396 (= e!62859 call!9779)))

(declare-fun b!96401 () Bool)

(assert (=> b!96401 (= e!62857 (contains!797 lt!48189 (tuple2!2323 (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!96402 () Bool)

(assert (=> b!96402 (= e!62858 e!62860)))

(assert (=> b!96402 (= c!16249 (and ((_ is Cons!1569) (toList!779 call!9665)) (= (_1!1172 (h!2162 (toList!779 call!9665))) (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (= (and d!25465 c!16252) b!96393))

(assert (= (and d!25465 (not c!16252)) b!96402))

(assert (= (and b!96402 c!16249) b!96398))

(assert (= (and b!96402 (not c!16249)) b!96397))

(assert (= (and b!96397 c!16250) b!96396))

(assert (= (and b!96397 (not c!16250)) b!96395))

(assert (= (or b!96396 b!96395) bm!9774))

(assert (= (or b!96398 bm!9774) bm!9776))

(assert (= (or b!96393 bm!9776) bm!9775))

(assert (= (and bm!9775 c!16251) b!96400))

(assert (= (and bm!9775 (not c!16251)) b!96394))

(assert (= (and d!25465 res!48664) b!96399))

(assert (= (and b!96399 res!48663) b!96401))

(declare-fun m!104795 () Bool)

(assert (=> b!96401 m!104795))

(declare-fun m!104797 () Bool)

(assert (=> b!96399 m!104797))

(declare-fun m!104799 () Bool)

(assert (=> bm!9775 m!104799))

(declare-fun m!104801 () Bool)

(assert (=> b!96400 m!104801))

(declare-fun m!104803 () Bool)

(assert (=> d!25465 m!104803))

(declare-fun m!104805 () Bool)

(assert (=> d!25465 m!104805))

(assert (=> d!25425 d!25465))

(declare-fun d!25467 () Bool)

(assert (=> d!25467 (= (apply!91 (+!134 lt!47985 (tuple2!2323 lt!48002 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))) lt!47998) (apply!91 lt!47985 lt!47998))))

(declare-fun lt!48190 () Unit!2864)

(assert (=> d!25467 (= lt!48190 (choose!580 lt!47985 lt!48002 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)) lt!47998))))

(declare-fun e!62861 () Bool)

(assert (=> d!25467 e!62861))

(declare-fun res!48665 () Bool)

(assert (=> d!25467 (=> (not res!48665) (not e!62861))))

(assert (=> d!25467 (= res!48665 (contains!794 lt!47985 lt!47998))))

(assert (=> d!25467 (= (addApplyDifferent!67 lt!47985 lt!48002 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)) lt!47998) lt!48190)))

(declare-fun b!96403 () Bool)

(assert (=> b!96403 (= e!62861 (not (= lt!47998 lt!48002)))))

(assert (= (and d!25467 res!48665) b!96403))

(declare-fun m!104807 () Bool)

(assert (=> d!25467 m!104807))

(assert (=> d!25467 m!104305))

(assert (=> d!25467 m!104293))

(declare-fun m!104809 () Bool)

(assert (=> d!25467 m!104809))

(assert (=> d!25467 m!104305))

(assert (=> d!25467 m!104307))

(assert (=> b!96088 d!25467))

(declare-fun d!25469 () Bool)

(declare-fun e!62862 () Bool)

(assert (=> d!25469 e!62862))

(declare-fun res!48666 () Bool)

(assert (=> d!25469 (=> (not res!48666) (not e!62862))))

(declare-fun lt!48193 () ListLongMap!1527)

(assert (=> d!25469 (= res!48666 (contains!794 lt!48193 (_1!1172 (tuple2!2323 lt!48002 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))))))

(declare-fun lt!48192 () List!1573)

(assert (=> d!25469 (= lt!48193 (ListLongMap!1528 lt!48192))))

(declare-fun lt!48194 () Unit!2864)

(declare-fun lt!48191 () Unit!2864)

(assert (=> d!25469 (= lt!48194 lt!48191)))

(assert (=> d!25469 (= (getValueByKey!149 lt!48192 (_1!1172 (tuple2!2323 lt!48002 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))) (Some!154 (_2!1172 (tuple2!2323 lt!48002 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))))))

(assert (=> d!25469 (= lt!48191 (lemmaContainsTupThenGetReturnValue!65 lt!48192 (_1!1172 (tuple2!2323 lt!48002 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))) (_2!1172 (tuple2!2323 lt!48002 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))))))

(assert (=> d!25469 (= lt!48192 (insertStrictlySorted!68 (toList!779 lt!47985) (_1!1172 (tuple2!2323 lt!48002 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))) (_2!1172 (tuple2!2323 lt!48002 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))))))

(assert (=> d!25469 (= (+!134 lt!47985 (tuple2!2323 lt!48002 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))) lt!48193)))

(declare-fun b!96404 () Bool)

(declare-fun res!48667 () Bool)

(assert (=> b!96404 (=> (not res!48667) (not e!62862))))

(assert (=> b!96404 (= res!48667 (= (getValueByKey!149 (toList!779 lt!48193) (_1!1172 (tuple2!2323 lt!48002 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))) (Some!154 (_2!1172 (tuple2!2323 lt!48002 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))))))))

(declare-fun b!96405 () Bool)

(assert (=> b!96405 (= e!62862 (contains!797 (toList!779 lt!48193) (tuple2!2323 lt!48002 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))))))

(assert (= (and d!25469 res!48666) b!96404))

(assert (= (and b!96404 res!48667) b!96405))

(declare-fun m!104811 () Bool)

(assert (=> d!25469 m!104811))

(declare-fun m!104813 () Bool)

(assert (=> d!25469 m!104813))

(declare-fun m!104815 () Bool)

(assert (=> d!25469 m!104815))

(declare-fun m!104817 () Bool)

(assert (=> d!25469 m!104817))

(declare-fun m!104819 () Bool)

(assert (=> b!96404 m!104819))

(declare-fun m!104821 () Bool)

(assert (=> b!96405 m!104821))

(assert (=> b!96088 d!25469))

(declare-fun d!25471 () Bool)

(assert (=> d!25471 (= (apply!91 (+!134 lt!47999 (tuple2!2323 lt!48001 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))) lt!47990) (get!1273 (getValueByKey!149 (toList!779 (+!134 lt!47999 (tuple2!2323 lt!48001 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))) lt!47990)))))

(declare-fun bs!3967 () Bool)

(assert (= bs!3967 d!25471))

(declare-fun m!104823 () Bool)

(assert (=> bs!3967 m!104823))

(assert (=> bs!3967 m!104823))

(declare-fun m!104825 () Bool)

(assert (=> bs!3967 m!104825))

(assert (=> b!96088 d!25471))

(declare-fun d!25473 () Bool)

(declare-fun e!62863 () Bool)

(assert (=> d!25473 e!62863))

(declare-fun res!48668 () Bool)

(assert (=> d!25473 (=> res!48668 e!62863)))

(declare-fun lt!48196 () Bool)

(assert (=> d!25473 (= res!48668 (not lt!48196))))

(declare-fun lt!48195 () Bool)

(assert (=> d!25473 (= lt!48196 lt!48195)))

(declare-fun lt!48197 () Unit!2864)

(declare-fun e!62864 () Unit!2864)

(assert (=> d!25473 (= lt!48197 e!62864)))

(declare-fun c!16253 () Bool)

(assert (=> d!25473 (= c!16253 lt!48195)))

(assert (=> d!25473 (= lt!48195 (containsKey!153 (toList!779 (+!134 lt!47996 (tuple2!2323 lt!47995 (zeroValue!2342 newMap!16)))) lt!47992))))

(assert (=> d!25473 (= (contains!794 (+!134 lt!47996 (tuple2!2323 lt!47995 (zeroValue!2342 newMap!16))) lt!47992) lt!48196)))

(declare-fun b!96406 () Bool)

(declare-fun lt!48198 () Unit!2864)

(assert (=> b!96406 (= e!62864 lt!48198)))

(assert (=> b!96406 (= lt!48198 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 (+!134 lt!47996 (tuple2!2323 lt!47995 (zeroValue!2342 newMap!16)))) lt!47992))))

(assert (=> b!96406 (isDefined!102 (getValueByKey!149 (toList!779 (+!134 lt!47996 (tuple2!2323 lt!47995 (zeroValue!2342 newMap!16)))) lt!47992))))

(declare-fun b!96407 () Bool)

(declare-fun Unit!2891 () Unit!2864)

(assert (=> b!96407 (= e!62864 Unit!2891)))

(declare-fun b!96408 () Bool)

(assert (=> b!96408 (= e!62863 (isDefined!102 (getValueByKey!149 (toList!779 (+!134 lt!47996 (tuple2!2323 lt!47995 (zeroValue!2342 newMap!16)))) lt!47992)))))

(assert (= (and d!25473 c!16253) b!96406))

(assert (= (and d!25473 (not c!16253)) b!96407))

(assert (= (and d!25473 (not res!48668)) b!96408))

(declare-fun m!104827 () Bool)

(assert (=> d!25473 m!104827))

(declare-fun m!104829 () Bool)

(assert (=> b!96406 m!104829))

(declare-fun m!104831 () Bool)

(assert (=> b!96406 m!104831))

(assert (=> b!96406 m!104831))

(declare-fun m!104833 () Bool)

(assert (=> b!96406 m!104833))

(assert (=> b!96408 m!104831))

(assert (=> b!96408 m!104831))

(assert (=> b!96408 m!104833))

(assert (=> b!96088 d!25473))

(declare-fun b!96409 () Bool)

(declare-fun lt!48205 () ListLongMap!1527)

(declare-fun e!62866 () Bool)

(assert (=> b!96409 (= e!62866 (= lt!48205 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (ite c!16102 (_values!2440 newMap!16) lt!47748) (mask!6542 newMap!16) (ite c!16102 (ite c!16108 (extraKeys!2282 newMap!16) lt!47750) (extraKeys!2282 newMap!16)) (zeroValue!2342 newMap!16) (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2457 newMap!16))))))

(declare-fun d!25475 () Bool)

(declare-fun e!62870 () Bool)

(assert (=> d!25475 e!62870))

(declare-fun res!48669 () Bool)

(assert (=> d!25475 (=> (not res!48669) (not e!62870))))

(assert (=> d!25475 (= res!48669 (not (contains!794 lt!48205 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!62868 () ListLongMap!1527)

(assert (=> d!25475 (= lt!48205 e!62868)))

(declare-fun c!16257 () Bool)

(assert (=> d!25475 (= c!16257 (bvsge #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(assert (=> d!25475 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25475 (= (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (ite c!16102 (_values!2440 newMap!16) lt!47748) (mask!6542 newMap!16) (ite c!16102 (ite c!16108 (extraKeys!2282 newMap!16) lt!47750) (extraKeys!2282 newMap!16)) (zeroValue!2342 newMap!16) (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) lt!48205)))

(declare-fun b!96410 () Bool)

(declare-fun e!62871 () Bool)

(assert (=> b!96410 (= e!62871 (validKeyInArray!0 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!96410 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!96411 () Bool)

(declare-fun lt!48204 () Unit!2864)

(declare-fun lt!48202 () Unit!2864)

(assert (=> b!96411 (= lt!48204 lt!48202)))

(declare-fun lt!48199 () (_ BitVec 64))

(declare-fun lt!48201 () V!3139)

(declare-fun lt!48203 () (_ BitVec 64))

(declare-fun lt!48200 () ListLongMap!1527)

(assert (=> b!96411 (not (contains!794 (+!134 lt!48200 (tuple2!2323 lt!48203 lt!48201)) lt!48199))))

(assert (=> b!96411 (= lt!48202 (addStillNotContains!39 lt!48200 lt!48203 lt!48201 lt!48199))))

(assert (=> b!96411 (= lt!48199 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!96411 (= lt!48201 (get!1269 (select (arr!2004 (ite c!16102 (_values!2440 newMap!16) lt!47748)) #b00000000000000000000000000000000) (dynLambda!364 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!96411 (= lt!48203 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun call!9780 () ListLongMap!1527)

(assert (=> b!96411 (= lt!48200 call!9780)))

(declare-fun e!62865 () ListLongMap!1527)

(assert (=> b!96411 (= e!62865 (+!134 call!9780 (tuple2!2323 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000) (get!1269 (select (arr!2004 (ite c!16102 (_values!2440 newMap!16) lt!47748)) #b00000000000000000000000000000000) (dynLambda!364 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun bm!9777 () Bool)

(assert (=> bm!9777 (= call!9780 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (ite c!16102 (_values!2440 newMap!16) lt!47748) (mask!6542 newMap!16) (ite c!16102 (ite c!16108 (extraKeys!2282 newMap!16) lt!47750) (extraKeys!2282 newMap!16)) (zeroValue!2342 newMap!16) (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2457 newMap!16)))))

(declare-fun b!96412 () Bool)

(declare-fun e!62867 () Bool)

(assert (=> b!96412 (= e!62867 e!62866)))

(declare-fun c!16254 () Bool)

(assert (=> b!96412 (= c!16254 (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun b!96413 () Bool)

(assert (=> b!96413 (= e!62868 e!62865)))

(declare-fun c!16255 () Bool)

(assert (=> b!96413 (= c!16255 (validKeyInArray!0 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96414 () Bool)

(assert (=> b!96414 (= e!62865 call!9780)))

(declare-fun b!96415 () Bool)

(assert (=> b!96415 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(assert (=> b!96415 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (ite c!16102 (_values!2440 newMap!16) lt!47748))))))

(declare-fun e!62869 () Bool)

(assert (=> b!96415 (= e!62869 (= (apply!91 lt!48205 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) (get!1269 (select (arr!2004 (ite c!16102 (_values!2440 newMap!16) lt!47748)) #b00000000000000000000000000000000) (dynLambda!364 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!96416 () Bool)

(assert (=> b!96416 (= e!62868 (ListLongMap!1528 Nil!1570))))

(declare-fun b!96417 () Bool)

(assert (=> b!96417 (= e!62870 e!62867)))

(declare-fun c!16256 () Bool)

(assert (=> b!96417 (= c!16256 e!62871)))

(declare-fun res!48671 () Bool)

(assert (=> b!96417 (=> (not res!48671) (not e!62871))))

(assert (=> b!96417 (= res!48671 (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun b!96418 () Bool)

(assert (=> b!96418 (= e!62866 (isEmpty!354 lt!48205))))

(declare-fun b!96419 () Bool)

(declare-fun res!48670 () Bool)

(assert (=> b!96419 (=> (not res!48670) (not e!62870))))

(assert (=> b!96419 (= res!48670 (not (contains!794 lt!48205 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!96420 () Bool)

(assert (=> b!96420 (= e!62867 e!62869)))

(assert (=> b!96420 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun res!48672 () Bool)

(assert (=> b!96420 (= res!48672 (contains!794 lt!48205 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!96420 (=> (not res!48672) (not e!62869))))

(assert (= (and d!25475 c!16257) b!96416))

(assert (= (and d!25475 (not c!16257)) b!96413))

(assert (= (and b!96413 c!16255) b!96411))

(assert (= (and b!96413 (not c!16255)) b!96414))

(assert (= (or b!96411 b!96414) bm!9777))

(assert (= (and d!25475 res!48669) b!96419))

(assert (= (and b!96419 res!48670) b!96417))

(assert (= (and b!96417 res!48671) b!96410))

(assert (= (and b!96417 c!16256) b!96420))

(assert (= (and b!96417 (not c!16256)) b!96412))

(assert (= (and b!96420 res!48672) b!96415))

(assert (= (and b!96412 c!16254) b!96409))

(assert (= (and b!96412 (not c!16254)) b!96418))

(declare-fun b_lambda!4271 () Bool)

(assert (=> (not b_lambda!4271) (not b!96411)))

(assert (=> b!96411 t!5504))

(declare-fun b_and!5899 () Bool)

(assert (= b_and!5895 (and (=> t!5504 result!3229) b_and!5899)))

(assert (=> b!96411 t!5506))

(declare-fun b_and!5901 () Bool)

(assert (= b_and!5897 (and (=> t!5506 result!3231) b_and!5901)))

(declare-fun b_lambda!4273 () Bool)

(assert (=> (not b_lambda!4273) (not b!96415)))

(assert (=> b!96415 t!5504))

(declare-fun b_and!5903 () Bool)

(assert (= b_and!5899 (and (=> t!5504 result!3229) b_and!5903)))

(assert (=> b!96415 t!5506))

(declare-fun b_and!5905 () Bool)

(assert (= b_and!5901 (and (=> t!5506 result!3231) b_and!5905)))

(declare-fun m!104835 () Bool)

(assert (=> b!96418 m!104835))

(assert (=> b!96415 m!104117))

(assert (=> b!96415 m!104335))

(assert (=> b!96415 m!104273))

(assert (=> b!96415 m!104117))

(declare-fun m!104837 () Bool)

(assert (=> b!96415 m!104837))

(assert (=> b!96415 m!104335))

(assert (=> b!96415 m!104273))

(assert (=> b!96415 m!104337))

(declare-fun m!104839 () Bool)

(assert (=> b!96409 m!104839))

(assert (=> b!96413 m!104117))

(assert (=> b!96413 m!104117))

(assert (=> b!96413 m!104261))

(declare-fun m!104841 () Bool)

(assert (=> b!96411 m!104841))

(assert (=> b!96411 m!104335))

(declare-fun m!104843 () Bool)

(assert (=> b!96411 m!104843))

(assert (=> b!96411 m!104335))

(assert (=> b!96411 m!104273))

(assert (=> b!96411 m!104337))

(assert (=> b!96411 m!104841))

(declare-fun m!104845 () Bool)

(assert (=> b!96411 m!104845))

(assert (=> b!96411 m!104117))

(declare-fun m!104847 () Bool)

(assert (=> b!96411 m!104847))

(assert (=> b!96411 m!104273))

(declare-fun m!104849 () Bool)

(assert (=> b!96419 m!104849))

(assert (=> b!96410 m!104117))

(assert (=> b!96410 m!104117))

(assert (=> b!96410 m!104261))

(declare-fun m!104851 () Bool)

(assert (=> d!25475 m!104851))

(assert (=> d!25475 m!104095))

(assert (=> bm!9777 m!104839))

(assert (=> b!96420 m!104117))

(assert (=> b!96420 m!104117))

(declare-fun m!104853 () Bool)

(assert (=> b!96420 m!104853))

(assert (=> b!96088 d!25475))

(declare-fun d!25477 () Bool)

(assert (=> d!25477 (= (apply!91 (+!134 lt!47985 (tuple2!2323 lt!48002 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))) lt!47998) (get!1273 (getValueByKey!149 (toList!779 (+!134 lt!47985 (tuple2!2323 lt!48002 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))) lt!47998)))))

(declare-fun bs!3968 () Bool)

(assert (= bs!3968 d!25477))

(declare-fun m!104855 () Bool)

(assert (=> bs!3968 m!104855))

(assert (=> bs!3968 m!104855))

(declare-fun m!104857 () Bool)

(assert (=> bs!3968 m!104857))

(assert (=> b!96088 d!25477))

(declare-fun d!25479 () Bool)

(declare-fun e!62872 () Bool)

(assert (=> d!25479 e!62872))

(declare-fun res!48673 () Bool)

(assert (=> d!25479 (=> (not res!48673) (not e!62872))))

(declare-fun lt!48208 () ListLongMap!1527)

(assert (=> d!25479 (= res!48673 (contains!794 lt!48208 (_1!1172 (tuple2!2323 lt!47995 (zeroValue!2342 newMap!16)))))))

(declare-fun lt!48207 () List!1573)

(assert (=> d!25479 (= lt!48208 (ListLongMap!1528 lt!48207))))

(declare-fun lt!48209 () Unit!2864)

(declare-fun lt!48206 () Unit!2864)

(assert (=> d!25479 (= lt!48209 lt!48206)))

(assert (=> d!25479 (= (getValueByKey!149 lt!48207 (_1!1172 (tuple2!2323 lt!47995 (zeroValue!2342 newMap!16)))) (Some!154 (_2!1172 (tuple2!2323 lt!47995 (zeroValue!2342 newMap!16)))))))

(assert (=> d!25479 (= lt!48206 (lemmaContainsTupThenGetReturnValue!65 lt!48207 (_1!1172 (tuple2!2323 lt!47995 (zeroValue!2342 newMap!16))) (_2!1172 (tuple2!2323 lt!47995 (zeroValue!2342 newMap!16)))))))

(assert (=> d!25479 (= lt!48207 (insertStrictlySorted!68 (toList!779 lt!47996) (_1!1172 (tuple2!2323 lt!47995 (zeroValue!2342 newMap!16))) (_2!1172 (tuple2!2323 lt!47995 (zeroValue!2342 newMap!16)))))))

(assert (=> d!25479 (= (+!134 lt!47996 (tuple2!2323 lt!47995 (zeroValue!2342 newMap!16))) lt!48208)))

(declare-fun b!96421 () Bool)

(declare-fun res!48674 () Bool)

(assert (=> b!96421 (=> (not res!48674) (not e!62872))))

(assert (=> b!96421 (= res!48674 (= (getValueByKey!149 (toList!779 lt!48208) (_1!1172 (tuple2!2323 lt!47995 (zeroValue!2342 newMap!16)))) (Some!154 (_2!1172 (tuple2!2323 lt!47995 (zeroValue!2342 newMap!16))))))))

(declare-fun b!96422 () Bool)

(assert (=> b!96422 (= e!62872 (contains!797 (toList!779 lt!48208) (tuple2!2323 lt!47995 (zeroValue!2342 newMap!16))))))

(assert (= (and d!25479 res!48673) b!96421))

(assert (= (and b!96421 res!48674) b!96422))

(declare-fun m!104859 () Bool)

(assert (=> d!25479 m!104859))

(declare-fun m!104861 () Bool)

(assert (=> d!25479 m!104861))

(declare-fun m!104863 () Bool)

(assert (=> d!25479 m!104863))

(declare-fun m!104865 () Bool)

(assert (=> d!25479 m!104865))

(declare-fun m!104867 () Bool)

(assert (=> b!96421 m!104867))

(declare-fun m!104869 () Bool)

(assert (=> b!96422 m!104869))

(assert (=> b!96088 d!25479))

(declare-fun d!25481 () Bool)

(assert (=> d!25481 (= (apply!91 (+!134 lt!47988 (tuple2!2323 lt!47993 (zeroValue!2342 newMap!16))) lt!47983) (get!1273 (getValueByKey!149 (toList!779 (+!134 lt!47988 (tuple2!2323 lt!47993 (zeroValue!2342 newMap!16)))) lt!47983)))))

(declare-fun bs!3969 () Bool)

(assert (= bs!3969 d!25481))

(declare-fun m!104871 () Bool)

(assert (=> bs!3969 m!104871))

(assert (=> bs!3969 m!104871))

(declare-fun m!104873 () Bool)

(assert (=> bs!3969 m!104873))

(assert (=> b!96088 d!25481))

(declare-fun d!25483 () Bool)

(assert (=> d!25483 (contains!794 (+!134 lt!47996 (tuple2!2323 lt!47995 (zeroValue!2342 newMap!16))) lt!47992)))

(declare-fun lt!48210 () Unit!2864)

(assert (=> d!25483 (= lt!48210 (choose!581 lt!47996 lt!47995 (zeroValue!2342 newMap!16) lt!47992))))

(assert (=> d!25483 (contains!794 lt!47996 lt!47992)))

(assert (=> d!25483 (= (addStillContains!67 lt!47996 lt!47995 (zeroValue!2342 newMap!16) lt!47992) lt!48210)))

(declare-fun bs!3970 () Bool)

(assert (= bs!3970 d!25483))

(assert (=> bs!3970 m!104301))

(assert (=> bs!3970 m!104301))

(assert (=> bs!3970 m!104303))

(declare-fun m!104875 () Bool)

(assert (=> bs!3970 m!104875))

(declare-fun m!104877 () Bool)

(assert (=> bs!3970 m!104877))

(assert (=> b!96088 d!25483))

(declare-fun d!25485 () Bool)

(assert (=> d!25485 (= (apply!91 (+!134 lt!47999 (tuple2!2323 lt!48001 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))) lt!47990) (apply!91 lt!47999 lt!47990))))

(declare-fun lt!48211 () Unit!2864)

(assert (=> d!25485 (= lt!48211 (choose!580 lt!47999 lt!48001 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)) lt!47990))))

(declare-fun e!62873 () Bool)

(assert (=> d!25485 e!62873))

(declare-fun res!48675 () Bool)

(assert (=> d!25485 (=> (not res!48675) (not e!62873))))

(assert (=> d!25485 (= res!48675 (contains!794 lt!47999 lt!47990))))

(assert (=> d!25485 (= (addApplyDifferent!67 lt!47999 lt!48001 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)) lt!47990) lt!48211)))

(declare-fun b!96423 () Bool)

(assert (=> b!96423 (= e!62873 (not (= lt!47990 lt!48001)))))

(assert (= (and d!25485 res!48675) b!96423))

(declare-fun m!104879 () Bool)

(assert (=> d!25485 m!104879))

(assert (=> d!25485 m!104295))

(assert (=> d!25485 m!104317))

(declare-fun m!104881 () Bool)

(assert (=> d!25485 m!104881))

(assert (=> d!25485 m!104295))

(assert (=> d!25485 m!104319))

(assert (=> b!96088 d!25485))

(declare-fun d!25487 () Bool)

(declare-fun e!62874 () Bool)

(assert (=> d!25487 e!62874))

(declare-fun res!48676 () Bool)

(assert (=> d!25487 (=> (not res!48676) (not e!62874))))

(declare-fun lt!48214 () ListLongMap!1527)

(assert (=> d!25487 (= res!48676 (contains!794 lt!48214 (_1!1172 (tuple2!2323 lt!48001 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))))))

(declare-fun lt!48213 () List!1573)

(assert (=> d!25487 (= lt!48214 (ListLongMap!1528 lt!48213))))

(declare-fun lt!48215 () Unit!2864)

(declare-fun lt!48212 () Unit!2864)

(assert (=> d!25487 (= lt!48215 lt!48212)))

(assert (=> d!25487 (= (getValueByKey!149 lt!48213 (_1!1172 (tuple2!2323 lt!48001 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))) (Some!154 (_2!1172 (tuple2!2323 lt!48001 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))))))

(assert (=> d!25487 (= lt!48212 (lemmaContainsTupThenGetReturnValue!65 lt!48213 (_1!1172 (tuple2!2323 lt!48001 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))) (_2!1172 (tuple2!2323 lt!48001 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))))))

(assert (=> d!25487 (= lt!48213 (insertStrictlySorted!68 (toList!779 lt!47999) (_1!1172 (tuple2!2323 lt!48001 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))) (_2!1172 (tuple2!2323 lt!48001 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))))))

(assert (=> d!25487 (= (+!134 lt!47999 (tuple2!2323 lt!48001 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))) lt!48214)))

(declare-fun b!96424 () Bool)

(declare-fun res!48677 () Bool)

(assert (=> b!96424 (=> (not res!48677) (not e!62874))))

(assert (=> b!96424 (= res!48677 (= (getValueByKey!149 (toList!779 lt!48214) (_1!1172 (tuple2!2323 lt!48001 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))) (Some!154 (_2!1172 (tuple2!2323 lt!48001 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))))))))

(declare-fun b!96425 () Bool)

(assert (=> b!96425 (= e!62874 (contains!797 (toList!779 lt!48214) (tuple2!2323 lt!48001 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))))))

(assert (= (and d!25487 res!48676) b!96424))

(assert (= (and b!96424 res!48677) b!96425))

(declare-fun m!104883 () Bool)

(assert (=> d!25487 m!104883))

(declare-fun m!104885 () Bool)

(assert (=> d!25487 m!104885))

(declare-fun m!104887 () Bool)

(assert (=> d!25487 m!104887))

(declare-fun m!104889 () Bool)

(assert (=> d!25487 m!104889))

(declare-fun m!104891 () Bool)

(assert (=> b!96424 m!104891))

(declare-fun m!104893 () Bool)

(assert (=> b!96425 m!104893))

(assert (=> b!96088 d!25487))

(declare-fun d!25489 () Bool)

(declare-fun e!62875 () Bool)

(assert (=> d!25489 e!62875))

(declare-fun res!48678 () Bool)

(assert (=> d!25489 (=> (not res!48678) (not e!62875))))

(declare-fun lt!48218 () ListLongMap!1527)

(assert (=> d!25489 (= res!48678 (contains!794 lt!48218 (_1!1172 (tuple2!2323 lt!47993 (zeroValue!2342 newMap!16)))))))

(declare-fun lt!48217 () List!1573)

(assert (=> d!25489 (= lt!48218 (ListLongMap!1528 lt!48217))))

(declare-fun lt!48219 () Unit!2864)

(declare-fun lt!48216 () Unit!2864)

(assert (=> d!25489 (= lt!48219 lt!48216)))

(assert (=> d!25489 (= (getValueByKey!149 lt!48217 (_1!1172 (tuple2!2323 lt!47993 (zeroValue!2342 newMap!16)))) (Some!154 (_2!1172 (tuple2!2323 lt!47993 (zeroValue!2342 newMap!16)))))))

(assert (=> d!25489 (= lt!48216 (lemmaContainsTupThenGetReturnValue!65 lt!48217 (_1!1172 (tuple2!2323 lt!47993 (zeroValue!2342 newMap!16))) (_2!1172 (tuple2!2323 lt!47993 (zeroValue!2342 newMap!16)))))))

(assert (=> d!25489 (= lt!48217 (insertStrictlySorted!68 (toList!779 lt!47988) (_1!1172 (tuple2!2323 lt!47993 (zeroValue!2342 newMap!16))) (_2!1172 (tuple2!2323 lt!47993 (zeroValue!2342 newMap!16)))))))

(assert (=> d!25489 (= (+!134 lt!47988 (tuple2!2323 lt!47993 (zeroValue!2342 newMap!16))) lt!48218)))

(declare-fun b!96426 () Bool)

(declare-fun res!48679 () Bool)

(assert (=> b!96426 (=> (not res!48679) (not e!62875))))

(assert (=> b!96426 (= res!48679 (= (getValueByKey!149 (toList!779 lt!48218) (_1!1172 (tuple2!2323 lt!47993 (zeroValue!2342 newMap!16)))) (Some!154 (_2!1172 (tuple2!2323 lt!47993 (zeroValue!2342 newMap!16))))))))

(declare-fun b!96427 () Bool)

(assert (=> b!96427 (= e!62875 (contains!797 (toList!779 lt!48218) (tuple2!2323 lt!47993 (zeroValue!2342 newMap!16))))))

(assert (= (and d!25489 res!48678) b!96426))

(assert (= (and b!96426 res!48679) b!96427))

(declare-fun m!104895 () Bool)

(assert (=> d!25489 m!104895))

(declare-fun m!104897 () Bool)

(assert (=> d!25489 m!104897))

(declare-fun m!104899 () Bool)

(assert (=> d!25489 m!104899))

(declare-fun m!104901 () Bool)

(assert (=> d!25489 m!104901))

(declare-fun m!104903 () Bool)

(assert (=> b!96426 m!104903))

(declare-fun m!104905 () Bool)

(assert (=> b!96427 m!104905))

(assert (=> b!96088 d!25489))

(declare-fun d!25491 () Bool)

(assert (=> d!25491 (= (apply!91 lt!47988 lt!47983) (get!1273 (getValueByKey!149 (toList!779 lt!47988) lt!47983)))))

(declare-fun bs!3971 () Bool)

(assert (= bs!3971 d!25491))

(declare-fun m!104907 () Bool)

(assert (=> bs!3971 m!104907))

(assert (=> bs!3971 m!104907))

(declare-fun m!104909 () Bool)

(assert (=> bs!3971 m!104909))

(assert (=> b!96088 d!25491))

(declare-fun d!25493 () Bool)

(assert (=> d!25493 (= (apply!91 lt!47985 lt!47998) (get!1273 (getValueByKey!149 (toList!779 lt!47985) lt!47998)))))

(declare-fun bs!3972 () Bool)

(assert (= bs!3972 d!25493))

(declare-fun m!104911 () Bool)

(assert (=> bs!3972 m!104911))

(assert (=> bs!3972 m!104911))

(declare-fun m!104913 () Bool)

(assert (=> bs!3972 m!104913))

(assert (=> b!96088 d!25493))

(declare-fun d!25495 () Bool)

(assert (=> d!25495 (= (apply!91 lt!47999 lt!47990) (get!1273 (getValueByKey!149 (toList!779 lt!47999) lt!47990)))))

(declare-fun bs!3973 () Bool)

(assert (= bs!3973 d!25495))

(declare-fun m!104915 () Bool)

(assert (=> bs!3973 m!104915))

(assert (=> bs!3973 m!104915))

(declare-fun m!104917 () Bool)

(assert (=> bs!3973 m!104917))

(assert (=> b!96088 d!25495))

(declare-fun d!25497 () Bool)

(assert (=> d!25497 (= (apply!91 (+!134 lt!47988 (tuple2!2323 lt!47993 (zeroValue!2342 newMap!16))) lt!47983) (apply!91 lt!47988 lt!47983))))

(declare-fun lt!48220 () Unit!2864)

(assert (=> d!25497 (= lt!48220 (choose!580 lt!47988 lt!47993 (zeroValue!2342 newMap!16) lt!47983))))

(declare-fun e!62876 () Bool)

(assert (=> d!25497 e!62876))

(declare-fun res!48680 () Bool)

(assert (=> d!25497 (=> (not res!48680) (not e!62876))))

(assert (=> d!25497 (= res!48680 (contains!794 lt!47988 lt!47983))))

(assert (=> d!25497 (= (addApplyDifferent!67 lt!47988 lt!47993 (zeroValue!2342 newMap!16) lt!47983) lt!48220)))

(declare-fun b!96428 () Bool)

(assert (=> b!96428 (= e!62876 (not (= lt!47983 lt!47993)))))

(assert (= (and d!25497 res!48680) b!96428))

(declare-fun m!104919 () Bool)

(assert (=> d!25497 m!104919))

(assert (=> d!25497 m!104311))

(assert (=> d!25497 m!104321))

(declare-fun m!104921 () Bool)

(assert (=> d!25497 m!104921))

(assert (=> d!25497 m!104311))

(assert (=> d!25497 m!104313))

(assert (=> b!96088 d!25497))

(declare-fun d!25499 () Bool)

(assert (=> d!25499 (= (get!1273 (getValueByKey!149 (toList!779 lt!47818) lt!47813)) (v!2782 (getValueByKey!149 (toList!779 lt!47818) lt!47813)))))

(assert (=> d!25391 d!25499))

(declare-fun b!96429 () Bool)

(declare-fun e!62877 () Option!155)

(assert (=> b!96429 (= e!62877 (Some!154 (_2!1172 (h!2162 (toList!779 lt!47818)))))))

(declare-fun b!96432 () Bool)

(declare-fun e!62878 () Option!155)

(assert (=> b!96432 (= e!62878 None!153)))

(declare-fun d!25501 () Bool)

(declare-fun c!16258 () Bool)

(assert (=> d!25501 (= c!16258 (and ((_ is Cons!1569) (toList!779 lt!47818)) (= (_1!1172 (h!2162 (toList!779 lt!47818))) lt!47813)))))

(assert (=> d!25501 (= (getValueByKey!149 (toList!779 lt!47818) lt!47813) e!62877)))

(declare-fun b!96431 () Bool)

(assert (=> b!96431 (= e!62878 (getValueByKey!149 (t!5495 (toList!779 lt!47818)) lt!47813))))

(declare-fun b!96430 () Bool)

(assert (=> b!96430 (= e!62877 e!62878)))

(declare-fun c!16259 () Bool)

(assert (=> b!96430 (= c!16259 (and ((_ is Cons!1569) (toList!779 lt!47818)) (not (= (_1!1172 (h!2162 (toList!779 lt!47818))) lt!47813))))))

(assert (= (and d!25501 c!16258) b!96429))

(assert (= (and d!25501 (not c!16258)) b!96430))

(assert (= (and b!96430 c!16259) b!96431))

(assert (= (and b!96430 (not c!16259)) b!96432))

(declare-fun m!104923 () Bool)

(assert (=> b!96431 m!104923))

(assert (=> d!25391 d!25501))

(declare-fun d!25503 () Bool)

(declare-fun res!48681 () Bool)

(declare-fun e!62879 () Bool)

(assert (=> d!25503 (=> (not res!48681) (not e!62879))))

(assert (=> d!25503 (= res!48681 (simpleValid!67 (_2!1173 lt!47912)))))

(assert (=> d!25503 (= (valid!379 (_2!1173 lt!47912)) e!62879)))

(declare-fun b!96433 () Bool)

(declare-fun res!48682 () Bool)

(assert (=> b!96433 (=> (not res!48682) (not e!62879))))

(assert (=> b!96433 (= res!48682 (= (arrayCountValidKeys!0 (_keys!4143 (_2!1173 lt!47912)) #b00000000000000000000000000000000 (size!2252 (_keys!4143 (_2!1173 lt!47912)))) (_size!469 (_2!1173 lt!47912))))))

(declare-fun b!96434 () Bool)

(declare-fun res!48683 () Bool)

(assert (=> b!96434 (=> (not res!48683) (not e!62879))))

(assert (=> b!96434 (= res!48683 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4143 (_2!1173 lt!47912)) (mask!6542 (_2!1173 lt!47912))))))

(declare-fun b!96435 () Bool)

(assert (=> b!96435 (= e!62879 (arrayNoDuplicates!0 (_keys!4143 (_2!1173 lt!47912)) #b00000000000000000000000000000000 Nil!1571))))

(assert (= (and d!25503 res!48681) b!96433))

(assert (= (and b!96433 res!48682) b!96434))

(assert (= (and b!96434 res!48683) b!96435))

(declare-fun m!104925 () Bool)

(assert (=> d!25503 m!104925))

(declare-fun m!104927 () Bool)

(assert (=> b!96433 m!104927))

(declare-fun m!104929 () Bool)

(assert (=> b!96434 m!104929))

(declare-fun m!104931 () Bool)

(assert (=> b!96435 m!104931))

(assert (=> b!96016 d!25503))

(assert (=> d!25397 d!25391))

(declare-fun d!25505 () Bool)

(declare-fun e!62880 () Bool)

(assert (=> d!25505 e!62880))

(declare-fun res!48684 () Bool)

(assert (=> d!25505 (=> res!48684 e!62880)))

(declare-fun lt!48222 () Bool)

(assert (=> d!25505 (= res!48684 (not lt!48222))))

(declare-fun lt!48221 () Bool)

(assert (=> d!25505 (= lt!48222 lt!48221)))

(declare-fun lt!48223 () Unit!2864)

(declare-fun e!62881 () Unit!2864)

(assert (=> d!25505 (= lt!48223 e!62881)))

(declare-fun c!16260 () Bool)

(assert (=> d!25505 (= c!16260 lt!48221)))

(assert (=> d!25505 (= lt!48221 (containsKey!153 (toList!779 lt!47818) lt!47813))))

(assert (=> d!25505 (= (contains!794 lt!47818 lt!47813) lt!48222)))

(declare-fun b!96436 () Bool)

(declare-fun lt!48224 () Unit!2864)

(assert (=> b!96436 (= e!62881 lt!48224)))

(assert (=> b!96436 (= lt!48224 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 lt!47818) lt!47813))))

(assert (=> b!96436 (isDefined!102 (getValueByKey!149 (toList!779 lt!47818) lt!47813))))

(declare-fun b!96437 () Bool)

(declare-fun Unit!2892 () Unit!2864)

(assert (=> b!96437 (= e!62881 Unit!2892)))

(declare-fun b!96438 () Bool)

(assert (=> b!96438 (= e!62880 (isDefined!102 (getValueByKey!149 (toList!779 lt!47818) lt!47813)))))

(assert (= (and d!25505 c!16260) b!96436))

(assert (= (and d!25505 (not c!16260)) b!96437))

(assert (= (and d!25505 (not res!48684)) b!96438))

(declare-fun m!104933 () Bool)

(assert (=> d!25505 m!104933))

(declare-fun m!104935 () Bool)

(assert (=> b!96436 m!104935))

(assert (=> b!96436 m!104581))

(assert (=> b!96436 m!104581))

(declare-fun m!104937 () Bool)

(assert (=> b!96436 m!104937))

(assert (=> b!96438 m!104581))

(assert (=> b!96438 m!104581))

(assert (=> b!96438 m!104937))

(assert (=> d!25397 d!25505))

(assert (=> d!25397 d!25395))

(declare-fun d!25507 () Bool)

(assert (=> d!25507 (= (apply!91 (+!134 lt!47818 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))) lt!47813) (apply!91 lt!47818 lt!47813))))

(assert (=> d!25507 true))

(declare-fun _$34!855 () Unit!2864)

(assert (=> d!25507 (= (choose!580 lt!47818 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))) lt!47813) _$34!855)))

(declare-fun bs!3974 () Bool)

(assert (= bs!3974 d!25507))

(assert (=> bs!3974 m!104059))

(assert (=> bs!3974 m!104059))

(assert (=> bs!3974 m!104061))

(assert (=> bs!3974 m!104069))

(assert (=> d!25397 d!25507))

(assert (=> d!25397 d!25415))

(declare-fun d!25509 () Bool)

(declare-fun e!62882 () Bool)

(assert (=> d!25509 e!62882))

(declare-fun res!48685 () Bool)

(assert (=> d!25509 (=> res!48685 e!62882)))

(declare-fun lt!48226 () Bool)

(assert (=> d!25509 (= res!48685 (not lt!48226))))

(declare-fun lt!48225 () Bool)

(assert (=> d!25509 (= lt!48226 lt!48225)))

(declare-fun lt!48227 () Unit!2864)

(declare-fun e!62883 () Unit!2864)

(assert (=> d!25509 (= lt!48227 e!62883)))

(declare-fun c!16261 () Bool)

(assert (=> d!25509 (= c!16261 lt!48225)))

(assert (=> d!25509 (= lt!48225 (containsKey!153 (toList!779 lt!47960) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!25509 (= (contains!794 lt!47960 #b1000000000000000000000000000000000000000000000000000000000000000) lt!48226)))

(declare-fun b!96440 () Bool)

(declare-fun lt!48228 () Unit!2864)

(assert (=> b!96440 (= e!62883 lt!48228)))

(assert (=> b!96440 (= lt!48228 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 lt!47960) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!96440 (isDefined!102 (getValueByKey!149 (toList!779 lt!47960) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96441 () Bool)

(declare-fun Unit!2893 () Unit!2864)

(assert (=> b!96441 (= e!62883 Unit!2893)))

(declare-fun b!96442 () Bool)

(assert (=> b!96442 (= e!62882 (isDefined!102 (getValueByKey!149 (toList!779 lt!47960) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25509 c!16261) b!96440))

(assert (= (and d!25509 (not c!16261)) b!96441))

(assert (= (and d!25509 (not res!48685)) b!96442))

(declare-fun m!104939 () Bool)

(assert (=> d!25509 m!104939))

(declare-fun m!104941 () Bool)

(assert (=> b!96440 m!104941))

(assert (=> b!96440 m!104719))

(assert (=> b!96440 m!104719))

(declare-fun m!104943 () Bool)

(assert (=> b!96440 m!104943))

(assert (=> b!96442 m!104719))

(assert (=> b!96442 m!104719))

(assert (=> b!96442 m!104943))

(assert (=> bm!9725 d!25509))

(declare-fun d!25511 () Bool)

(assert (=> d!25511 (= (apply!91 lt!47989 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1273 (getValueByKey!149 (toList!779 lt!47989) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!3975 () Bool)

(assert (= bs!3975 d!25511))

(declare-fun m!104945 () Bool)

(assert (=> bs!3975 m!104945))

(assert (=> bs!3975 m!104945))

(declare-fun m!104947 () Bool)

(assert (=> bs!3975 m!104947))

(assert (=> b!96084 d!25511))

(declare-fun d!25513 () Bool)

(declare-fun e!62884 () Bool)

(assert (=> d!25513 e!62884))

(declare-fun res!48686 () Bool)

(assert (=> d!25513 (=> res!48686 e!62884)))

(declare-fun lt!48230 () Bool)

(assert (=> d!25513 (= res!48686 (not lt!48230))))

(declare-fun lt!48229 () Bool)

(assert (=> d!25513 (= lt!48230 lt!48229)))

(declare-fun lt!48231 () Unit!2864)

(declare-fun e!62885 () Unit!2864)

(assert (=> d!25513 (= lt!48231 e!62885)))

(declare-fun c!16262 () Bool)

(assert (=> d!25513 (= c!16262 lt!48229)))

(assert (=> d!25513 (= lt!48229 (containsKey!153 (toList!779 lt!48094) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!25513 (= (contains!794 lt!48094 #b0000000000000000000000000000000000000000000000000000000000000000) lt!48230)))

(declare-fun b!96443 () Bool)

(declare-fun lt!48232 () Unit!2864)

(assert (=> b!96443 (= e!62885 lt!48232)))

(assert (=> b!96443 (= lt!48232 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 lt!48094) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!96443 (isDefined!102 (getValueByKey!149 (toList!779 lt!48094) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96444 () Bool)

(declare-fun Unit!2894 () Unit!2864)

(assert (=> b!96444 (= e!62885 Unit!2894)))

(declare-fun b!96445 () Bool)

(assert (=> b!96445 (= e!62884 (isDefined!102 (getValueByKey!149 (toList!779 lt!48094) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25513 c!16262) b!96443))

(assert (= (and d!25513 (not c!16262)) b!96444))

(assert (= (and d!25513 (not res!48686)) b!96445))

(declare-fun m!104949 () Bool)

(assert (=> d!25513 m!104949))

(declare-fun m!104951 () Bool)

(assert (=> b!96443 m!104951))

(declare-fun m!104953 () Bool)

(assert (=> b!96443 m!104953))

(assert (=> b!96443 m!104953))

(declare-fun m!104955 () Bool)

(assert (=> b!96443 m!104955))

(assert (=> b!96445 m!104953))

(assert (=> b!96445 m!104953))

(assert (=> b!96445 m!104955))

(assert (=> bm!9754 d!25513))

(declare-fun d!25515 () Bool)

(declare-fun res!48689 () Bool)

(declare-fun e!62886 () Bool)

(assert (=> d!25515 (=> res!48689 e!62886)))

(assert (=> d!25515 (= res!48689 (bvsge #b00000000000000000000000000000000 (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992))))))))

(assert (=> d!25515 (= (arrayNoDuplicates!0 (_keys!4143 (v!2778 (underlying!331 thiss!992))) #b00000000000000000000000000000000 Nil!1571) e!62886)))

(declare-fun b!96446 () Bool)

(declare-fun e!62887 () Bool)

(declare-fun e!62889 () Bool)

(assert (=> b!96446 (= e!62887 e!62889)))

(declare-fun c!16263 () Bool)

(assert (=> b!96446 (= c!16263 (validKeyInArray!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!96447 () Bool)

(assert (=> b!96447 (= e!62886 e!62887)))

(declare-fun res!48687 () Bool)

(assert (=> b!96447 (=> (not res!48687) (not e!62887))))

(declare-fun e!62888 () Bool)

(assert (=> b!96447 (= res!48687 (not e!62888))))

(declare-fun res!48688 () Bool)

(assert (=> b!96447 (=> (not res!48688) (not e!62888))))

(assert (=> b!96447 (= res!48688 (validKeyInArray!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!96448 () Bool)

(assert (=> b!96448 (= e!62888 (contains!796 Nil!1571 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun bm!9778 () Bool)

(declare-fun call!9781 () Bool)

(assert (=> bm!9778 (= call!9781 (arrayNoDuplicates!0 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!16263 (Cons!1570 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) #b00000000000000000000000000000000) Nil!1571) Nil!1571)))))

(declare-fun b!96449 () Bool)

(assert (=> b!96449 (= e!62889 call!9781)))

(declare-fun b!96450 () Bool)

(assert (=> b!96450 (= e!62889 call!9781)))

(assert (= (and d!25515 (not res!48689)) b!96447))

(assert (= (and b!96447 res!48688) b!96448))

(assert (= (and b!96447 res!48687) b!96446))

(assert (= (and b!96446 c!16263) b!96449))

(assert (= (and b!96446 (not c!16263)) b!96450))

(assert (= (or b!96449 b!96450) bm!9778))

(declare-fun m!104957 () Bool)

(assert (=> b!96446 m!104957))

(assert (=> b!96446 m!104957))

(declare-fun m!104959 () Bool)

(assert (=> b!96446 m!104959))

(assert (=> b!96447 m!104957))

(assert (=> b!96447 m!104957))

(assert (=> b!96447 m!104959))

(assert (=> b!96448 m!104957))

(assert (=> b!96448 m!104957))

(declare-fun m!104961 () Bool)

(assert (=> b!96448 m!104961))

(assert (=> bm!9778 m!104957))

(declare-fun m!104963 () Bool)

(assert (=> bm!9778 m!104963))

(assert (=> b!96246 d!25515))

(declare-fun d!25517 () Bool)

(declare-fun e!62890 () Bool)

(assert (=> d!25517 e!62890))

(declare-fun res!48690 () Bool)

(assert (=> d!25517 (=> (not res!48690) (not e!62890))))

(declare-fun lt!48235 () ListLongMap!1527)

(assert (=> d!25517 (= res!48690 (contains!794 lt!48235 (_1!1172 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!48234 () List!1573)

(assert (=> d!25517 (= lt!48235 (ListLongMap!1528 lt!48234))))

(declare-fun lt!48236 () Unit!2864)

(declare-fun lt!48233 () Unit!2864)

(assert (=> d!25517 (= lt!48236 lt!48233)))

(assert (=> d!25517 (= (getValueByKey!149 lt!48234 (_1!1172 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1172 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25517 (= lt!48233 (lemmaContainsTupThenGetReturnValue!65 lt!48234 (_1!1172 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1172 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25517 (= lt!48234 (insertStrictlySorted!68 (toList!779 (getCurrentListMap!470 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16))) (_1!1172 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1172 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25517 (= (+!134 (getCurrentListMap!470 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!48235)))

(declare-fun b!96451 () Bool)

(declare-fun res!48691 () Bool)

(assert (=> b!96451 (=> (not res!48691) (not e!62890))))

(assert (=> b!96451 (= res!48691 (= (getValueByKey!149 (toList!779 lt!48235) (_1!1172 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1172 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!96452 () Bool)

(assert (=> b!96452 (= e!62890 (contains!797 (toList!779 lt!48235) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!25517 res!48690) b!96451))

(assert (= (and b!96451 res!48691) b!96452))

(declare-fun m!104965 () Bool)

(assert (=> d!25517 m!104965))

(declare-fun m!104967 () Bool)

(assert (=> d!25517 m!104967))

(declare-fun m!104969 () Bool)

(assert (=> d!25517 m!104969))

(declare-fun m!104971 () Bool)

(assert (=> d!25517 m!104971))

(declare-fun m!104973 () Bool)

(assert (=> b!96451 m!104973))

(declare-fun m!104975 () Bool)

(assert (=> b!96452 m!104975))

(assert (=> d!25317 d!25517))

(declare-fun b!96453 () Bool)

(declare-fun res!48698 () Bool)

(declare-fun e!62900 () Bool)

(assert (=> b!96453 (=> (not res!48698) (not e!62900))))

(declare-fun e!62901 () Bool)

(assert (=> b!96453 (= res!48698 e!62901)))

(declare-fun c!16268 () Bool)

(assert (=> b!96453 (= c!16268 (not (= (bvand lt!47752 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun d!25519 () Bool)

(assert (=> d!25519 e!62900))

(declare-fun res!48699 () Bool)

(assert (=> d!25519 (=> (not res!48699) (not e!62900))))

(assert (=> d!25519 (= res!48699 (or (bvsge #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))))

(declare-fun lt!48243 () ListLongMap!1527)

(declare-fun lt!48257 () ListLongMap!1527)

(assert (=> d!25519 (= lt!48243 lt!48257)))

(declare-fun lt!48251 () Unit!2864)

(declare-fun e!62898 () Unit!2864)

(assert (=> d!25519 (= lt!48251 e!62898)))

(declare-fun c!16264 () Bool)

(declare-fun e!62896 () Bool)

(assert (=> d!25519 (= c!16264 e!62896)))

(declare-fun res!48697 () Bool)

(assert (=> d!25519 (=> (not res!48697) (not e!62896))))

(assert (=> d!25519 (= res!48697 (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun e!62895 () ListLongMap!1527)

(assert (=> d!25519 (= lt!48257 e!62895)))

(declare-fun c!16265 () Bool)

(assert (=> d!25519 (= c!16265 (and (not (= (bvand lt!47752 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!47752 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!25519 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25519 (= (getCurrentListMap!470 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) lt!47752 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) lt!48243)))

(declare-fun bm!9779 () Bool)

(declare-fun call!9784 () ListLongMap!1527)

(declare-fun call!9785 () ListLongMap!1527)

(assert (=> bm!9779 (= call!9784 call!9785)))

(declare-fun bm!9780 () Bool)

(declare-fun call!9782 () ListLongMap!1527)

(declare-fun call!9787 () ListLongMap!1527)

(assert (=> bm!9780 (= call!9782 call!9787)))

(declare-fun b!96454 () Bool)

(declare-fun e!62891 () Bool)

(declare-fun call!9786 () Bool)

(assert (=> b!96454 (= e!62891 (not call!9786))))

(declare-fun bm!9781 () Bool)

(assert (=> bm!9781 (= call!9785 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) lt!47752 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun bm!9782 () Bool)

(declare-fun call!9783 () ListLongMap!1527)

(assert (=> bm!9782 (= call!9783 call!9784)))

(declare-fun b!96455 () Bool)

(assert (=> b!96455 (= e!62896 (validKeyInArray!0 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96456 () Bool)

(declare-fun e!62897 () Bool)

(assert (=> b!96456 (= e!62897 (validKeyInArray!0 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96457 () Bool)

(declare-fun e!62894 () Bool)

(assert (=> b!96457 (= e!62894 (= (apply!91 lt!48243 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2342 newMap!16)))))

(declare-fun b!96458 () Bool)

(declare-fun e!62892 () ListLongMap!1527)

(assert (=> b!96458 (= e!62892 call!9783)))

(declare-fun b!96459 () Bool)

(declare-fun call!9788 () Bool)

(assert (=> b!96459 (= e!62901 (not call!9788))))

(declare-fun b!96460 () Bool)

(assert (=> b!96460 (= e!62891 e!62894)))

(declare-fun res!48696 () Bool)

(assert (=> b!96460 (= res!48696 call!9786)))

(assert (=> b!96460 (=> (not res!48696) (not e!62894))))

(declare-fun bm!9783 () Bool)

(assert (=> bm!9783 (= call!9786 (contains!794 lt!48243 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96461 () Bool)

(declare-fun e!62899 () Bool)

(declare-fun e!62902 () Bool)

(assert (=> b!96461 (= e!62899 e!62902)))

(declare-fun res!48693 () Bool)

(assert (=> b!96461 (=> (not res!48693) (not e!62902))))

(assert (=> b!96461 (= res!48693 (contains!794 lt!48243 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!96461 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun c!16269 () Bool)

(declare-fun bm!9784 () Bool)

(assert (=> bm!9784 (= call!9787 (+!134 (ite c!16265 call!9785 (ite c!16269 call!9784 call!9783)) (ite (or c!16265 c!16269) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(declare-fun b!96462 () Bool)

(declare-fun e!62903 () Bool)

(assert (=> b!96462 (= e!62903 (= (apply!91 lt!48243 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!96463 () Bool)

(assert (=> b!96463 (= e!62900 e!62891)))

(declare-fun c!16267 () Bool)

(assert (=> b!96463 (= c!16267 (not (= (bvand lt!47752 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!96464 () Bool)

(declare-fun c!16266 () Bool)

(assert (=> b!96464 (= c!16266 (and (not (= (bvand lt!47752 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!47752 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!62893 () ListLongMap!1527)

(assert (=> b!96464 (= e!62893 e!62892)))

(declare-fun b!96465 () Bool)

(assert (=> b!96465 (= e!62892 call!9782)))

(declare-fun b!96466 () Bool)

(declare-fun lt!48245 () Unit!2864)

(assert (=> b!96466 (= e!62898 lt!48245)))

(declare-fun lt!48250 () ListLongMap!1527)

(assert (=> b!96466 (= lt!48250 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) lt!47752 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48249 () (_ BitVec 64))

(assert (=> b!96466 (= lt!48249 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48246 () (_ BitVec 64))

(assert (=> b!96466 (= lt!48246 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48241 () Unit!2864)

(assert (=> b!96466 (= lt!48241 (addStillContains!67 lt!48250 lt!48249 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!48246))))

(assert (=> b!96466 (contains!794 (+!134 lt!48250 (tuple2!2323 lt!48249 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!48246)))

(declare-fun lt!48258 () Unit!2864)

(assert (=> b!96466 (= lt!48258 lt!48241)))

(declare-fun lt!48253 () ListLongMap!1527)

(assert (=> b!96466 (= lt!48253 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) lt!47752 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48255 () (_ BitVec 64))

(assert (=> b!96466 (= lt!48255 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48244 () (_ BitVec 64))

(assert (=> b!96466 (= lt!48244 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48254 () Unit!2864)

(assert (=> b!96466 (= lt!48254 (addApplyDifferent!67 lt!48253 lt!48255 (minValue!2342 newMap!16) lt!48244))))

(assert (=> b!96466 (= (apply!91 (+!134 lt!48253 (tuple2!2323 lt!48255 (minValue!2342 newMap!16))) lt!48244) (apply!91 lt!48253 lt!48244))))

(declare-fun lt!48238 () Unit!2864)

(assert (=> b!96466 (= lt!48238 lt!48254)))

(declare-fun lt!48242 () ListLongMap!1527)

(assert (=> b!96466 (= lt!48242 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) lt!47752 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48247 () (_ BitVec 64))

(assert (=> b!96466 (= lt!48247 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48237 () (_ BitVec 64))

(assert (=> b!96466 (= lt!48237 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48240 () Unit!2864)

(assert (=> b!96466 (= lt!48240 (addApplyDifferent!67 lt!48242 lt!48247 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!48237))))

(assert (=> b!96466 (= (apply!91 (+!134 lt!48242 (tuple2!2323 lt!48247 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!48237) (apply!91 lt!48242 lt!48237))))

(declare-fun lt!48248 () Unit!2864)

(assert (=> b!96466 (= lt!48248 lt!48240)))

(declare-fun lt!48239 () ListLongMap!1527)

(assert (=> b!96466 (= lt!48239 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) lt!47752 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48256 () (_ BitVec 64))

(assert (=> b!96466 (= lt!48256 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48252 () (_ BitVec 64))

(assert (=> b!96466 (= lt!48252 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!96466 (= lt!48245 (addApplyDifferent!67 lt!48239 lt!48256 (minValue!2342 newMap!16) lt!48252))))

(assert (=> b!96466 (= (apply!91 (+!134 lt!48239 (tuple2!2323 lt!48256 (minValue!2342 newMap!16))) lt!48252) (apply!91 lt!48239 lt!48252))))

(declare-fun b!96467 () Bool)

(assert (=> b!96467 (= e!62895 e!62893)))

(assert (=> b!96467 (= c!16269 (and (not (= (bvand lt!47752 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!47752 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!96468 () Bool)

(declare-fun res!48695 () Bool)

(assert (=> b!96468 (=> (not res!48695) (not e!62900))))

(assert (=> b!96468 (= res!48695 e!62899)))

(declare-fun res!48694 () Bool)

(assert (=> b!96468 (=> res!48694 e!62899)))

(assert (=> b!96468 (= res!48694 (not e!62897))))

(declare-fun res!48700 () Bool)

(assert (=> b!96468 (=> (not res!48700) (not e!62897))))

(assert (=> b!96468 (= res!48700 (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun bm!9785 () Bool)

(assert (=> bm!9785 (= call!9788 (contains!794 lt!48243 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96469 () Bool)

(assert (=> b!96469 (= e!62901 e!62903)))

(declare-fun res!48692 () Bool)

(assert (=> b!96469 (= res!48692 call!9788)))

(assert (=> b!96469 (=> (not res!48692) (not e!62903))))

(declare-fun b!96470 () Bool)

(assert (=> b!96470 (= e!62902 (= (apply!91 lt!48243 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) (get!1269 (select (arr!2004 (_values!2440 newMap!16)) #b00000000000000000000000000000000) (dynLambda!364 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!96470 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (_values!2440 newMap!16))))))

(assert (=> b!96470 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun b!96471 () Bool)

(declare-fun Unit!2895 () Unit!2864)

(assert (=> b!96471 (= e!62898 Unit!2895)))

(declare-fun b!96472 () Bool)

(assert (=> b!96472 (= e!62895 (+!134 call!9787 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))

(declare-fun b!96473 () Bool)

(assert (=> b!96473 (= e!62893 call!9782)))

(assert (= (and d!25519 c!16265) b!96472))

(assert (= (and d!25519 (not c!16265)) b!96467))

(assert (= (and b!96467 c!16269) b!96473))

(assert (= (and b!96467 (not c!16269)) b!96464))

(assert (= (and b!96464 c!16266) b!96465))

(assert (= (and b!96464 (not c!16266)) b!96458))

(assert (= (or b!96465 b!96458) bm!9782))

(assert (= (or b!96473 bm!9782) bm!9779))

(assert (= (or b!96473 b!96465) bm!9780))

(assert (= (or b!96472 bm!9779) bm!9781))

(assert (= (or b!96472 bm!9780) bm!9784))

(assert (= (and d!25519 res!48697) b!96455))

(assert (= (and d!25519 c!16264) b!96466))

(assert (= (and d!25519 (not c!16264)) b!96471))

(assert (= (and d!25519 res!48699) b!96468))

(assert (= (and b!96468 res!48700) b!96456))

(assert (= (and b!96468 (not res!48694)) b!96461))

(assert (= (and b!96461 res!48693) b!96470))

(assert (= (and b!96468 res!48695) b!96453))

(assert (= (and b!96453 c!16268) b!96469))

(assert (= (and b!96453 (not c!16268)) b!96459))

(assert (= (and b!96469 res!48692) b!96462))

(assert (= (or b!96469 b!96459) bm!9785))

(assert (= (and b!96453 res!48698) b!96463))

(assert (= (and b!96463 c!16267) b!96460))

(assert (= (and b!96463 (not c!16267)) b!96454))

(assert (= (and b!96460 res!48696) b!96457))

(assert (= (or b!96460 b!96454) bm!9783))

(declare-fun b_lambda!4275 () Bool)

(assert (=> (not b_lambda!4275) (not b!96470)))

(assert (=> b!96470 t!5504))

(declare-fun b_and!5907 () Bool)

(assert (= b_and!5903 (and (=> t!5504 result!3229) b_and!5907)))

(assert (=> b!96470 t!5506))

(declare-fun b_and!5909 () Bool)

(assert (= b_and!5905 (and (=> t!5506 result!3231) b_and!5909)))

(declare-fun m!104977 () Bool)

(assert (=> bm!9784 m!104977))

(declare-fun m!104979 () Bool)

(assert (=> b!96462 m!104979))

(declare-fun m!104981 () Bool)

(assert (=> b!96466 m!104981))

(declare-fun m!104983 () Bool)

(assert (=> b!96466 m!104983))

(assert (=> b!96466 m!103883))

(declare-fun m!104985 () Bool)

(assert (=> b!96466 m!104985))

(assert (=> b!96466 m!103883))

(declare-fun m!104987 () Bool)

(assert (=> b!96466 m!104987))

(declare-fun m!104989 () Bool)

(assert (=> b!96466 m!104989))

(declare-fun m!104991 () Bool)

(assert (=> b!96466 m!104991))

(declare-fun m!104993 () Bool)

(assert (=> b!96466 m!104993))

(declare-fun m!104995 () Bool)

(assert (=> b!96466 m!104995))

(declare-fun m!104997 () Bool)

(assert (=> b!96466 m!104997))

(declare-fun m!104999 () Bool)

(assert (=> b!96466 m!104999))

(declare-fun m!105001 () Bool)

(assert (=> b!96466 m!105001))

(declare-fun m!105003 () Bool)

(assert (=> b!96466 m!105003))

(declare-fun m!105005 () Bool)

(assert (=> b!96466 m!105005))

(assert (=> b!96466 m!104983))

(declare-fun m!105007 () Bool)

(assert (=> b!96466 m!105007))

(assert (=> b!96466 m!104989))

(declare-fun m!105009 () Bool)

(assert (=> b!96466 m!105009))

(assert (=> b!96466 m!104993))

(assert (=> b!96466 m!103883))

(declare-fun m!105011 () Bool)

(assert (=> b!96466 m!105011))

(assert (=> b!96466 m!104117))

(assert (=> b!96466 m!104999))

(assert (=> bm!9781 m!103883))

(assert (=> bm!9781 m!105011))

(assert (=> b!96461 m!104117))

(assert (=> b!96461 m!104117))

(declare-fun m!105013 () Bool)

(assert (=> b!96461 m!105013))

(assert (=> b!96456 m!104117))

(assert (=> b!96456 m!104117))

(assert (=> b!96456 m!104261))

(declare-fun m!105015 () Bool)

(assert (=> b!96472 m!105015))

(declare-fun m!105017 () Bool)

(assert (=> bm!9785 m!105017))

(declare-fun m!105019 () Bool)

(assert (=> b!96457 m!105019))

(declare-fun m!105021 () Bool)

(assert (=> bm!9783 m!105021))

(assert (=> b!96455 m!104117))

(assert (=> b!96455 m!104117))

(assert (=> b!96455 m!104261))

(assert (=> b!96470 m!104441))

(assert (=> b!96470 m!104273))

(assert (=> b!96470 m!104443))

(assert (=> b!96470 m!104117))

(assert (=> b!96470 m!104273))

(assert (=> b!96470 m!104117))

(declare-fun m!105023 () Bool)

(assert (=> b!96470 m!105023))

(assert (=> b!96470 m!104441))

(assert (=> d!25519 m!104095))

(assert (=> d!25317 d!25519))

(declare-fun d!25521 () Bool)

(assert (=> d!25521 (= (+!134 (getCurrentListMap!470 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!470 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) lt!47752 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(assert (=> d!25521 true))

(declare-fun _$7!80 () Unit!2864)

(assert (=> d!25521 (= (choose!575 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) lt!47752 (zeroValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (minValue!2342 newMap!16) (defaultEntry!2457 newMap!16)) _$7!80)))

(declare-fun bs!3976 () Bool)

(assert (= bs!3976 d!25521))

(assert (=> bs!3976 m!104035))

(assert (=> bs!3976 m!104035))

(assert (=> bs!3976 m!104191))

(assert (=> bs!3976 m!103883))

(assert (=> bs!3976 m!104189))

(assert (=> d!25317 d!25521))

(assert (=> d!25317 d!25377))

(declare-fun d!25523 () Bool)

(assert (=> d!25523 (= (validMask!0 (mask!6542 newMap!16)) (and (or (= (mask!6542 newMap!16) #b00000000000000000000000000000111) (= (mask!6542 newMap!16) #b00000000000000000000000000001111) (= (mask!6542 newMap!16) #b00000000000000000000000000011111) (= (mask!6542 newMap!16) #b00000000000000000000000000111111) (= (mask!6542 newMap!16) #b00000000000000000000000001111111) (= (mask!6542 newMap!16) #b00000000000000000000000011111111) (= (mask!6542 newMap!16) #b00000000000000000000000111111111) (= (mask!6542 newMap!16) #b00000000000000000000001111111111) (= (mask!6542 newMap!16) #b00000000000000000000011111111111) (= (mask!6542 newMap!16) #b00000000000000000000111111111111) (= (mask!6542 newMap!16) #b00000000000000000001111111111111) (= (mask!6542 newMap!16) #b00000000000000000011111111111111) (= (mask!6542 newMap!16) #b00000000000000000111111111111111) (= (mask!6542 newMap!16) #b00000000000000001111111111111111) (= (mask!6542 newMap!16) #b00000000000000011111111111111111) (= (mask!6542 newMap!16) #b00000000000000111111111111111111) (= (mask!6542 newMap!16) #b00000000000001111111111111111111) (= (mask!6542 newMap!16) #b00000000000011111111111111111111) (= (mask!6542 newMap!16) #b00000000000111111111111111111111) (= (mask!6542 newMap!16) #b00000000001111111111111111111111) (= (mask!6542 newMap!16) #b00000000011111111111111111111111) (= (mask!6542 newMap!16) #b00000000111111111111111111111111) (= (mask!6542 newMap!16) #b00000001111111111111111111111111) (= (mask!6542 newMap!16) #b00000011111111111111111111111111) (= (mask!6542 newMap!16) #b00000111111111111111111111111111) (= (mask!6542 newMap!16) #b00001111111111111111111111111111) (= (mask!6542 newMap!16) #b00011111111111111111111111111111) (= (mask!6542 newMap!16) #b00111111111111111111111111111111)) (bvsle (mask!6542 newMap!16) #b00111111111111111111111111111111)))))

(assert (=> d!25317 d!25523))

(declare-fun d!25525 () Bool)

(declare-fun e!62904 () Bool)

(assert (=> d!25525 e!62904))

(declare-fun res!48701 () Bool)

(assert (=> d!25525 (=> res!48701 e!62904)))

(declare-fun lt!48260 () Bool)

(assert (=> d!25525 (= res!48701 (not lt!48260))))

(declare-fun lt!48259 () Bool)

(assert (=> d!25525 (= lt!48260 lt!48259)))

(declare-fun lt!48261 () Unit!2864)

(declare-fun e!62905 () Unit!2864)

(assert (=> d!25525 (= lt!48261 e!62905)))

(declare-fun c!16270 () Bool)

(assert (=> d!25525 (= c!16270 lt!48259)))

(assert (=> d!25525 (= lt!48259 (containsKey!153 (toList!779 lt!48040) (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!25525 (= (contains!794 lt!48040 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) lt!48260)))

(declare-fun b!96474 () Bool)

(declare-fun lt!48262 () Unit!2864)

(assert (=> b!96474 (= e!62905 lt!48262)))

(assert (=> b!96474 (= lt!48262 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 lt!48040) (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!96474 (isDefined!102 (getValueByKey!149 (toList!779 lt!48040) (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96475 () Bool)

(declare-fun Unit!2896 () Unit!2864)

(assert (=> b!96475 (= e!62905 Unit!2896)))

(declare-fun b!96476 () Bool)

(assert (=> b!96476 (= e!62904 (isDefined!102 (getValueByKey!149 (toList!779 lt!48040) (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!25525 c!16270) b!96474))

(assert (= (and d!25525 (not c!16270)) b!96475))

(assert (= (and d!25525 (not res!48701)) b!96476))

(assert (=> d!25525 m!104117))

(declare-fun m!105025 () Bool)

(assert (=> d!25525 m!105025))

(assert (=> b!96474 m!104117))

(declare-fun m!105027 () Bool)

(assert (=> b!96474 m!105027))

(assert (=> b!96474 m!104117))

(declare-fun m!105029 () Bool)

(assert (=> b!96474 m!105029))

(assert (=> b!96474 m!105029))

(declare-fun m!105031 () Bool)

(assert (=> b!96474 m!105031))

(assert (=> b!96476 m!104117))

(assert (=> b!96476 m!105029))

(assert (=> b!96476 m!105029))

(assert (=> b!96476 m!105031))

(assert (=> b!96154 d!25525))

(declare-fun d!25527 () Bool)

(assert (=> d!25527 (= (get!1273 (getValueByKey!149 (toList!779 lt!47819) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (v!2782 (getValueByKey!149 (toList!779 lt!47819) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!25339 d!25527))

(declare-fun b!96477 () Bool)

(declare-fun e!62906 () Option!155)

(assert (=> b!96477 (= e!62906 (Some!154 (_2!1172 (h!2162 (toList!779 lt!47819)))))))

(declare-fun b!96480 () Bool)

(declare-fun e!62907 () Option!155)

(assert (=> b!96480 (= e!62907 None!153)))

(declare-fun c!16271 () Bool)

(declare-fun d!25529 () Bool)

(assert (=> d!25529 (= c!16271 (and ((_ is Cons!1569) (toList!779 lt!47819)) (= (_1!1172 (h!2162 (toList!779 lt!47819))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!25529 (= (getValueByKey!149 (toList!779 lt!47819) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!62906)))

(declare-fun b!96479 () Bool)

(assert (=> b!96479 (= e!62907 (getValueByKey!149 (t!5495 (toList!779 lt!47819)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!96478 () Bool)

(assert (=> b!96478 (= e!62906 e!62907)))

(declare-fun c!16272 () Bool)

(assert (=> b!96478 (= c!16272 (and ((_ is Cons!1569) (toList!779 lt!47819)) (not (= (_1!1172 (h!2162 (toList!779 lt!47819))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(assert (= (and d!25529 c!16271) b!96477))

(assert (= (and d!25529 (not c!16271)) b!96478))

(assert (= (and b!96478 c!16272) b!96479))

(assert (= (and b!96478 (not c!16272)) b!96480))

(assert (=> b!96479 m!104013))

(declare-fun m!105033 () Bool)

(assert (=> b!96479 m!105033))

(assert (=> d!25339 d!25529))

(declare-fun d!25531 () Bool)

(declare-fun res!48702 () Bool)

(declare-fun e!62908 () Bool)

(assert (=> d!25531 (=> res!48702 e!62908)))

(assert (=> d!25531 (= res!48702 (and ((_ is Cons!1569) (toList!779 lt!47819)) (= (_1!1172 (h!2162 (toList!779 lt!47819))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (=> d!25531 (= (containsKey!153 (toList!779 lt!47819) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) e!62908)))

(declare-fun b!96481 () Bool)

(declare-fun e!62909 () Bool)

(assert (=> b!96481 (= e!62908 e!62909)))

(declare-fun res!48703 () Bool)

(assert (=> b!96481 (=> (not res!48703) (not e!62909))))

(assert (=> b!96481 (= res!48703 (and (or (not ((_ is Cons!1569) (toList!779 lt!47819))) (bvsle (_1!1172 (h!2162 (toList!779 lt!47819))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) ((_ is Cons!1569) (toList!779 lt!47819)) (bvslt (_1!1172 (h!2162 (toList!779 lt!47819))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun b!96482 () Bool)

(assert (=> b!96482 (= e!62909 (containsKey!153 (t!5495 (toList!779 lt!47819)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!25531 (not res!48702)) b!96481))

(assert (= (and b!96481 res!48703) b!96482))

(assert (=> b!96482 m!104013))

(declare-fun m!105035 () Bool)

(assert (=> b!96482 m!105035))

(assert (=> d!25315 d!25531))

(declare-fun d!25533 () Bool)

(assert (=> d!25533 (isDefined!102 (getValueByKey!149 (toList!779 lt!47819) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!48263 () Unit!2864)

(assert (=> d!25533 (= lt!48263 (choose!578 (toList!779 lt!47819) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!62910 () Bool)

(assert (=> d!25533 e!62910))

(declare-fun res!48704 () Bool)

(assert (=> d!25533 (=> (not res!48704) (not e!62910))))

(assert (=> d!25533 (= res!48704 (isStrictlySorted!303 (toList!779 lt!47819)))))

(assert (=> d!25533 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 lt!47819) #b1000000000000000000000000000000000000000000000000000000000000000) lt!48263)))

(declare-fun b!96483 () Bool)

(assert (=> b!96483 (= e!62910 (containsKey!153 (toList!779 lt!47819) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!25533 res!48704) b!96483))

(assert (=> d!25533 m!104391))

(assert (=> d!25533 m!104391))

(assert (=> d!25533 m!104479))

(declare-fun m!105037 () Bool)

(assert (=> d!25533 m!105037))

(declare-fun m!105039 () Bool)

(assert (=> d!25533 m!105039))

(assert (=> b!96483 m!104475))

(assert (=> b!96218 d!25533))

(declare-fun d!25535 () Bool)

(assert (=> d!25535 (= (isDefined!102 (getValueByKey!149 (toList!779 lt!47819) #b1000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!353 (getValueByKey!149 (toList!779 lt!47819) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!3977 () Bool)

(assert (= bs!3977 d!25535))

(assert (=> bs!3977 m!104391))

(declare-fun m!105041 () Bool)

(assert (=> bs!3977 m!105041))

(assert (=> b!96218 d!25535))

(declare-fun b!96484 () Bool)

(declare-fun e!62911 () Option!155)

(assert (=> b!96484 (= e!62911 (Some!154 (_2!1172 (h!2162 (toList!779 lt!47819)))))))

(declare-fun b!96487 () Bool)

(declare-fun e!62912 () Option!155)

(assert (=> b!96487 (= e!62912 None!153)))

(declare-fun d!25537 () Bool)

(declare-fun c!16273 () Bool)

(assert (=> d!25537 (= c!16273 (and ((_ is Cons!1569) (toList!779 lt!47819)) (= (_1!1172 (h!2162 (toList!779 lt!47819))) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!25537 (= (getValueByKey!149 (toList!779 lt!47819) #b1000000000000000000000000000000000000000000000000000000000000000) e!62911)))

(declare-fun b!96486 () Bool)

(assert (=> b!96486 (= e!62912 (getValueByKey!149 (t!5495 (toList!779 lt!47819)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96485 () Bool)

(assert (=> b!96485 (= e!62911 e!62912)))

(declare-fun c!16274 () Bool)

(assert (=> b!96485 (= c!16274 (and ((_ is Cons!1569) (toList!779 lt!47819)) (not (= (_1!1172 (h!2162 (toList!779 lt!47819))) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (= (and d!25537 c!16273) b!96484))

(assert (= (and d!25537 (not c!16273)) b!96485))

(assert (= (and b!96485 c!16274) b!96486))

(assert (= (and b!96485 (not c!16274)) b!96487))

(declare-fun m!105043 () Bool)

(assert (=> b!96486 m!105043))

(assert (=> b!96218 d!25537))

(declare-fun d!25539 () Bool)

(assert (=> d!25539 (= (apply!91 lt!47989 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) (get!1273 (getValueByKey!149 (toList!779 lt!47989) (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!3978 () Bool)

(assert (= bs!3978 d!25539))

(assert (=> bs!3978 m!104117))

(declare-fun m!105045 () Bool)

(assert (=> bs!3978 m!105045))

(assert (=> bs!3978 m!105045))

(declare-fun m!105047 () Bool)

(assert (=> bs!3978 m!105047))

(assert (=> b!96092 d!25539))

(declare-fun c!16275 () Bool)

(declare-fun d!25541 () Bool)

(assert (=> d!25541 (= c!16275 ((_ is ValueCellFull!966) (select (arr!2004 (ite c!16102 (_values!2440 newMap!16) lt!47748)) #b00000000000000000000000000000000)))))

(declare-fun e!62913 () V!3139)

(assert (=> d!25541 (= (get!1269 (select (arr!2004 (ite c!16102 (_values!2440 newMap!16) lt!47748)) #b00000000000000000000000000000000) (dynLambda!364 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!62913)))

(declare-fun b!96488 () Bool)

(assert (=> b!96488 (= e!62913 (get!1271 (select (arr!2004 (ite c!16102 (_values!2440 newMap!16) lt!47748)) #b00000000000000000000000000000000) (dynLambda!364 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!96489 () Bool)

(assert (=> b!96489 (= e!62913 (get!1272 (select (arr!2004 (ite c!16102 (_values!2440 newMap!16) lt!47748)) #b00000000000000000000000000000000) (dynLambda!364 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25541 c!16275) b!96488))

(assert (= (and d!25541 (not c!16275)) b!96489))

(assert (=> b!96488 m!104335))

(assert (=> b!96488 m!104273))

(declare-fun m!105049 () Bool)

(assert (=> b!96488 m!105049))

(assert (=> b!96489 m!104335))

(assert (=> b!96489 m!104273))

(declare-fun m!105051 () Bool)

(assert (=> b!96489 m!105051))

(assert (=> b!96092 d!25541))

(declare-fun d!25543 () Bool)

(assert (=> d!25543 (= (validKeyInArray!0 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) (and (not (= (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!96265 d!25543))

(assert (=> bm!9720 d!25343))

(declare-fun b!96490 () Bool)

(declare-fun e!62914 () Option!155)

(assert (=> b!96490 (= e!62914 (Some!154 (_2!1172 (h!2162 (t!5495 (toList!779 lt!47639))))))))

(declare-fun b!96493 () Bool)

(declare-fun e!62915 () Option!155)

(assert (=> b!96493 (= e!62915 None!153)))

(declare-fun c!16276 () Bool)

(declare-fun d!25545 () Bool)

(assert (=> d!25545 (= c!16276 (and ((_ is Cons!1569) (t!5495 (toList!779 lt!47639))) (= (_1!1172 (h!2162 (t!5495 (toList!779 lt!47639)))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355))))))

(assert (=> d!25545 (= (getValueByKey!149 (t!5495 (toList!779 lt!47639)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) e!62914)))

(declare-fun b!96492 () Bool)

(assert (=> b!96492 (= e!62915 (getValueByKey!149 (t!5495 (t!5495 (toList!779 lt!47639))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(declare-fun b!96491 () Bool)

(assert (=> b!96491 (= e!62914 e!62915)))

(declare-fun c!16277 () Bool)

(assert (=> b!96491 (= c!16277 (and ((_ is Cons!1569) (t!5495 (toList!779 lt!47639))) (not (= (_1!1172 (h!2162 (t!5495 (toList!779 lt!47639)))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))))

(assert (= (and d!25545 c!16276) b!96490))

(assert (= (and d!25545 (not c!16276)) b!96491))

(assert (= (and b!96491 c!16277) b!96492))

(assert (= (and b!96491 (not c!16277)) b!96493))

(assert (=> b!96492 m!103861))

(declare-fun m!105053 () Bool)

(assert (=> b!96492 m!105053))

(assert (=> b!96177 d!25545))

(declare-fun d!25547 () Bool)

(declare-fun lt!48266 () Bool)

(declare-fun content!100 (List!1573) (InoxSet tuple2!2322))

(assert (=> d!25547 (= lt!48266 (select (content!100 (toList!779 lt!48153)) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!62920 () Bool)

(assert (=> d!25547 (= lt!48266 e!62920)))

(declare-fun res!48709 () Bool)

(assert (=> d!25547 (=> (not res!48709) (not e!62920))))

(assert (=> d!25547 (= res!48709 ((_ is Cons!1569) (toList!779 lt!48153)))))

(assert (=> d!25547 (= (contains!797 (toList!779 lt!48153) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!48266)))

(declare-fun b!96498 () Bool)

(declare-fun e!62921 () Bool)

(assert (=> b!96498 (= e!62920 e!62921)))

(declare-fun res!48710 () Bool)

(assert (=> b!96498 (=> res!48710 e!62921)))

(assert (=> b!96498 (= res!48710 (= (h!2162 (toList!779 lt!48153)) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!96499 () Bool)

(assert (=> b!96499 (= e!62921 (contains!797 (t!5495 (toList!779 lt!48153)) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!25547 res!48709) b!96498))

(assert (= (and b!96498 (not res!48710)) b!96499))

(declare-fun m!105055 () Bool)

(assert (=> d!25547 m!105055))

(declare-fun m!105057 () Bool)

(assert (=> d!25547 m!105057))

(declare-fun m!105059 () Bool)

(assert (=> b!96499 m!105059))

(assert (=> b!96294 d!25547))

(declare-fun d!25549 () Bool)

(assert (=> d!25549 (contains!794 (getCurrentListMap!470 (_keys!4143 newMap!16) lt!47748 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (select (arr!2003 (_keys!4143 newMap!16)) (index!3151 lt!47759)))))

(assert (=> d!25549 true))

(declare-fun _$16!114 () Unit!2864)

(assert (=> d!25549 (= (choose!576 (_keys!4143 newMap!16) lt!47748 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (index!3151 lt!47759) (defaultEntry!2457 newMap!16)) _$16!114)))

(declare-fun bs!3979 () Bool)

(assert (= bs!3979 d!25549))

(assert (=> bs!3979 m!104219))

(assert (=> bs!3979 m!103989))

(assert (=> bs!3979 m!104219))

(assert (=> bs!3979 m!103989))

(assert (=> bs!3979 m!104221))

(assert (=> d!25329 d!25549))

(assert (=> d!25329 d!25523))

(assert (=> b!96225 d!25543))

(declare-fun d!25551 () Bool)

(declare-fun e!62922 () Bool)

(assert (=> d!25551 e!62922))

(declare-fun res!48711 () Bool)

(assert (=> d!25551 (=> (not res!48711) (not e!62922))))

(declare-fun lt!48269 () ListLongMap!1527)

(assert (=> d!25551 (= res!48711 (contains!794 lt!48269 (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!48268 () List!1573)

(assert (=> d!25551 (= lt!48269 (ListLongMap!1528 lt!48268))))

(declare-fun lt!48270 () Unit!2864)

(declare-fun lt!48267 () Unit!2864)

(assert (=> d!25551 (= lt!48270 lt!48267)))

(assert (=> d!25551 (= (getValueByKey!149 lt!48268 (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25551 (= lt!48267 (lemmaContainsTupThenGetReturnValue!65 lt!48268 (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25551 (= lt!48268 (insertStrictlySorted!68 (toList!779 (getCurrentListMap!470 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16))) (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25551 (= (+!134 (getCurrentListMap!470 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!48269)))

(declare-fun b!96500 () Bool)

(declare-fun res!48712 () Bool)

(assert (=> b!96500 (=> (not res!48712) (not e!62922))))

(assert (=> b!96500 (= res!48712 (= (getValueByKey!149 (toList!779 lt!48269) (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!96501 () Bool)

(assert (=> b!96501 (= e!62922 (contains!797 (toList!779 lt!48269) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!25551 res!48711) b!96500))

(assert (= (and b!96500 res!48712) b!96501))

(declare-fun m!105061 () Bool)

(assert (=> d!25551 m!105061))

(declare-fun m!105063 () Bool)

(assert (=> d!25551 m!105063))

(declare-fun m!105065 () Bool)

(assert (=> d!25551 m!105065))

(declare-fun m!105067 () Bool)

(assert (=> d!25551 m!105067))

(declare-fun m!105069 () Bool)

(assert (=> b!96500 m!105069))

(declare-fun m!105071 () Bool)

(assert (=> b!96501 m!105071))

(assert (=> d!25303 d!25551))

(declare-fun b!96502 () Bool)

(declare-fun res!48719 () Bool)

(declare-fun e!62932 () Bool)

(assert (=> b!96502 (=> (not res!48719) (not e!62932))))

(declare-fun e!62933 () Bool)

(assert (=> b!96502 (= res!48719 e!62933)))

(declare-fun c!16282 () Bool)

(assert (=> b!96502 (= c!16282 (not (= (bvand lt!47750 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun d!25553 () Bool)

(assert (=> d!25553 e!62932))

(declare-fun res!48720 () Bool)

(assert (=> d!25553 (=> (not res!48720) (not e!62932))))

(assert (=> d!25553 (= res!48720 (or (bvsge #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))))

(declare-fun lt!48277 () ListLongMap!1527)

(declare-fun lt!48291 () ListLongMap!1527)

(assert (=> d!25553 (= lt!48277 lt!48291)))

(declare-fun lt!48285 () Unit!2864)

(declare-fun e!62930 () Unit!2864)

(assert (=> d!25553 (= lt!48285 e!62930)))

(declare-fun c!16278 () Bool)

(declare-fun e!62928 () Bool)

(assert (=> d!25553 (= c!16278 e!62928)))

(declare-fun res!48718 () Bool)

(assert (=> d!25553 (=> (not res!48718) (not e!62928))))

(assert (=> d!25553 (= res!48718 (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun e!62927 () ListLongMap!1527)

(assert (=> d!25553 (= lt!48291 e!62927)))

(declare-fun c!16279 () Bool)

(assert (=> d!25553 (= c!16279 (and (not (= (bvand lt!47750 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand lt!47750 #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!25553 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25553 (= (getCurrentListMap!470 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) lt!47750 (zeroValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) lt!48277)))

(declare-fun bm!9786 () Bool)

(declare-fun call!9791 () ListLongMap!1527)

(declare-fun call!9792 () ListLongMap!1527)

(assert (=> bm!9786 (= call!9791 call!9792)))

(declare-fun bm!9787 () Bool)

(declare-fun call!9789 () ListLongMap!1527)

(declare-fun call!9794 () ListLongMap!1527)

(assert (=> bm!9787 (= call!9789 call!9794)))

(declare-fun b!96503 () Bool)

(declare-fun e!62923 () Bool)

(declare-fun call!9793 () Bool)

(assert (=> b!96503 (= e!62923 (not call!9793))))

(declare-fun bm!9788 () Bool)

(assert (=> bm!9788 (= call!9792 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) lt!47750 (zeroValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun bm!9789 () Bool)

(declare-fun call!9790 () ListLongMap!1527)

(assert (=> bm!9789 (= call!9790 call!9791)))

(declare-fun b!96504 () Bool)

(assert (=> b!96504 (= e!62928 (validKeyInArray!0 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96505 () Bool)

(declare-fun e!62929 () Bool)

(assert (=> b!96505 (= e!62929 (validKeyInArray!0 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!62926 () Bool)

(declare-fun b!96506 () Bool)

(assert (=> b!96506 (= e!62926 (= (apply!91 lt!48277 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!96507 () Bool)

(declare-fun e!62924 () ListLongMap!1527)

(assert (=> b!96507 (= e!62924 call!9790)))

(declare-fun b!96508 () Bool)

(declare-fun call!9795 () Bool)

(assert (=> b!96508 (= e!62933 (not call!9795))))

(declare-fun b!96509 () Bool)

(assert (=> b!96509 (= e!62923 e!62926)))

(declare-fun res!48717 () Bool)

(assert (=> b!96509 (= res!48717 call!9793)))

(assert (=> b!96509 (=> (not res!48717) (not e!62926))))

(declare-fun bm!9790 () Bool)

(assert (=> bm!9790 (= call!9793 (contains!794 lt!48277 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96510 () Bool)

(declare-fun e!62931 () Bool)

(declare-fun e!62934 () Bool)

(assert (=> b!96510 (= e!62931 e!62934)))

(declare-fun res!48714 () Bool)

(assert (=> b!96510 (=> (not res!48714) (not e!62934))))

(assert (=> b!96510 (= res!48714 (contains!794 lt!48277 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!96510 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun c!16283 () Bool)

(declare-fun bm!9791 () Bool)

(assert (=> bm!9791 (= call!9794 (+!134 (ite c!16279 call!9792 (ite c!16283 call!9791 call!9790)) (ite (or c!16279 c!16283) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!96511 () Bool)

(declare-fun e!62935 () Bool)

(assert (=> b!96511 (= e!62935 (= (apply!91 lt!48277 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2342 newMap!16)))))

(declare-fun b!96512 () Bool)

(assert (=> b!96512 (= e!62932 e!62923)))

(declare-fun c!16281 () Bool)

(assert (=> b!96512 (= c!16281 (not (= (bvand lt!47750 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!96513 () Bool)

(declare-fun c!16280 () Bool)

(assert (=> b!96513 (= c!16280 (and (not (= (bvand lt!47750 #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand lt!47750 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!62925 () ListLongMap!1527)

(assert (=> b!96513 (= e!62925 e!62924)))

(declare-fun b!96514 () Bool)

(assert (=> b!96514 (= e!62924 call!9789)))

(declare-fun b!96515 () Bool)

(declare-fun lt!48279 () Unit!2864)

(assert (=> b!96515 (= e!62930 lt!48279)))

(declare-fun lt!48284 () ListLongMap!1527)

(assert (=> b!96515 (= lt!48284 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) lt!47750 (zeroValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48283 () (_ BitVec 64))

(assert (=> b!96515 (= lt!48283 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48280 () (_ BitVec 64))

(assert (=> b!96515 (= lt!48280 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48275 () Unit!2864)

(assert (=> b!96515 (= lt!48275 (addStillContains!67 lt!48284 lt!48283 (zeroValue!2342 newMap!16) lt!48280))))

(assert (=> b!96515 (contains!794 (+!134 lt!48284 (tuple2!2323 lt!48283 (zeroValue!2342 newMap!16))) lt!48280)))

(declare-fun lt!48292 () Unit!2864)

(assert (=> b!96515 (= lt!48292 lt!48275)))

(declare-fun lt!48287 () ListLongMap!1527)

(assert (=> b!96515 (= lt!48287 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) lt!47750 (zeroValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48289 () (_ BitVec 64))

(assert (=> b!96515 (= lt!48289 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48278 () (_ BitVec 64))

(assert (=> b!96515 (= lt!48278 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48288 () Unit!2864)

(assert (=> b!96515 (= lt!48288 (addApplyDifferent!67 lt!48287 lt!48289 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!48278))))

(assert (=> b!96515 (= (apply!91 (+!134 lt!48287 (tuple2!2323 lt!48289 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!48278) (apply!91 lt!48287 lt!48278))))

(declare-fun lt!48272 () Unit!2864)

(assert (=> b!96515 (= lt!48272 lt!48288)))

(declare-fun lt!48276 () ListLongMap!1527)

(assert (=> b!96515 (= lt!48276 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) lt!47750 (zeroValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48281 () (_ BitVec 64))

(assert (=> b!96515 (= lt!48281 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48271 () (_ BitVec 64))

(assert (=> b!96515 (= lt!48271 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48274 () Unit!2864)

(assert (=> b!96515 (= lt!48274 (addApplyDifferent!67 lt!48276 lt!48281 (zeroValue!2342 newMap!16) lt!48271))))

(assert (=> b!96515 (= (apply!91 (+!134 lt!48276 (tuple2!2323 lt!48281 (zeroValue!2342 newMap!16))) lt!48271) (apply!91 lt!48276 lt!48271))))

(declare-fun lt!48282 () Unit!2864)

(assert (=> b!96515 (= lt!48282 lt!48274)))

(declare-fun lt!48273 () ListLongMap!1527)

(assert (=> b!96515 (= lt!48273 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) lt!47750 (zeroValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48290 () (_ BitVec 64))

(assert (=> b!96515 (= lt!48290 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48286 () (_ BitVec 64))

(assert (=> b!96515 (= lt!48286 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!96515 (= lt!48279 (addApplyDifferent!67 lt!48273 lt!48290 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) lt!48286))))

(assert (=> b!96515 (= (apply!91 (+!134 lt!48273 (tuple2!2323 lt!48290 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!48286) (apply!91 lt!48273 lt!48286))))

(declare-fun b!96516 () Bool)

(assert (=> b!96516 (= e!62927 e!62925)))

(assert (=> b!96516 (= c!16283 (and (not (= (bvand lt!47750 #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand lt!47750 #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!96517 () Bool)

(declare-fun res!48716 () Bool)

(assert (=> b!96517 (=> (not res!48716) (not e!62932))))

(assert (=> b!96517 (= res!48716 e!62931)))

(declare-fun res!48715 () Bool)

(assert (=> b!96517 (=> res!48715 e!62931)))

(assert (=> b!96517 (= res!48715 (not e!62929))))

(declare-fun res!48721 () Bool)

(assert (=> b!96517 (=> (not res!48721) (not e!62929))))

(assert (=> b!96517 (= res!48721 (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun bm!9792 () Bool)

(assert (=> bm!9792 (= call!9795 (contains!794 lt!48277 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96518 () Bool)

(assert (=> b!96518 (= e!62933 e!62935)))

(declare-fun res!48713 () Bool)

(assert (=> b!96518 (= res!48713 call!9795)))

(assert (=> b!96518 (=> (not res!48713) (not e!62935))))

(declare-fun b!96519 () Bool)

(assert (=> b!96519 (= e!62934 (= (apply!91 lt!48277 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) (get!1269 (select (arr!2004 (_values!2440 newMap!16)) #b00000000000000000000000000000000) (dynLambda!364 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!96519 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (_values!2440 newMap!16))))))

(assert (=> b!96519 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun b!96520 () Bool)

(declare-fun Unit!2897 () Unit!2864)

(assert (=> b!96520 (= e!62930 Unit!2897)))

(declare-fun b!96521 () Bool)

(assert (=> b!96521 (= e!62927 (+!134 call!9794 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun b!96522 () Bool)

(assert (=> b!96522 (= e!62925 call!9789)))

(assert (= (and d!25553 c!16279) b!96521))

(assert (= (and d!25553 (not c!16279)) b!96516))

(assert (= (and b!96516 c!16283) b!96522))

(assert (= (and b!96516 (not c!16283)) b!96513))

(assert (= (and b!96513 c!16280) b!96514))

(assert (= (and b!96513 (not c!16280)) b!96507))

(assert (= (or b!96514 b!96507) bm!9789))

(assert (= (or b!96522 bm!9789) bm!9786))

(assert (= (or b!96522 b!96514) bm!9787))

(assert (= (or b!96521 bm!9786) bm!9788))

(assert (= (or b!96521 bm!9787) bm!9791))

(assert (= (and d!25553 res!48718) b!96504))

(assert (= (and d!25553 c!16278) b!96515))

(assert (= (and d!25553 (not c!16278)) b!96520))

(assert (= (and d!25553 res!48720) b!96517))

(assert (= (and b!96517 res!48721) b!96505))

(assert (= (and b!96517 (not res!48715)) b!96510))

(assert (= (and b!96510 res!48714) b!96519))

(assert (= (and b!96517 res!48716) b!96502))

(assert (= (and b!96502 c!16282) b!96518))

(assert (= (and b!96502 (not c!16282)) b!96508))

(assert (= (and b!96518 res!48713) b!96511))

(assert (= (or b!96518 b!96508) bm!9792))

(assert (= (and b!96502 res!48719) b!96512))

(assert (= (and b!96512 c!16281) b!96509))

(assert (= (and b!96512 (not c!16281)) b!96503))

(assert (= (and b!96509 res!48717) b!96506))

(assert (= (or b!96509 b!96503) bm!9790))

(declare-fun b_lambda!4277 () Bool)

(assert (=> (not b_lambda!4277) (not b!96519)))

(assert (=> b!96519 t!5504))

(declare-fun b_and!5911 () Bool)

(assert (= b_and!5907 (and (=> t!5504 result!3229) b_and!5911)))

(assert (=> b!96519 t!5506))

(declare-fun b_and!5913 () Bool)

(assert (= b_and!5909 (and (=> t!5506 result!3231) b_and!5913)))

(declare-fun m!105073 () Bool)

(assert (=> bm!9791 m!105073))

(declare-fun m!105075 () Bool)

(assert (=> b!96511 m!105075))

(declare-fun m!105077 () Bool)

(assert (=> b!96515 m!105077))

(declare-fun m!105079 () Bool)

(assert (=> b!96515 m!105079))

(declare-fun m!105081 () Bool)

(assert (=> b!96515 m!105081))

(declare-fun m!105083 () Bool)

(assert (=> b!96515 m!105083))

(declare-fun m!105085 () Bool)

(assert (=> b!96515 m!105085))

(declare-fun m!105087 () Bool)

(assert (=> b!96515 m!105087))

(declare-fun m!105089 () Bool)

(assert (=> b!96515 m!105089))

(declare-fun m!105091 () Bool)

(assert (=> b!96515 m!105091))

(assert (=> b!96515 m!103883))

(declare-fun m!105093 () Bool)

(assert (=> b!96515 m!105093))

(declare-fun m!105095 () Bool)

(assert (=> b!96515 m!105095))

(declare-fun m!105097 () Bool)

(assert (=> b!96515 m!105097))

(assert (=> b!96515 m!103883))

(declare-fun m!105099 () Bool)

(assert (=> b!96515 m!105099))

(declare-fun m!105101 () Bool)

(assert (=> b!96515 m!105101))

(assert (=> b!96515 m!105079))

(declare-fun m!105103 () Bool)

(assert (=> b!96515 m!105103))

(assert (=> b!96515 m!105085))

(declare-fun m!105105 () Bool)

(assert (=> b!96515 m!105105))

(assert (=> b!96515 m!105089))

(assert (=> b!96515 m!103883))

(declare-fun m!105107 () Bool)

(assert (=> b!96515 m!105107))

(assert (=> b!96515 m!104117))

(assert (=> b!96515 m!105095))

(assert (=> bm!9788 m!103883))

(assert (=> bm!9788 m!105107))

(assert (=> b!96510 m!104117))

(assert (=> b!96510 m!104117))

(declare-fun m!105109 () Bool)

(assert (=> b!96510 m!105109))

(assert (=> b!96505 m!104117))

(assert (=> b!96505 m!104117))

(assert (=> b!96505 m!104261))

(declare-fun m!105111 () Bool)

(assert (=> b!96521 m!105111))

(declare-fun m!105113 () Bool)

(assert (=> bm!9792 m!105113))

(declare-fun m!105115 () Bool)

(assert (=> b!96506 m!105115))

(declare-fun m!105117 () Bool)

(assert (=> bm!9790 m!105117))

(assert (=> b!96504 m!104117))

(assert (=> b!96504 m!104117))

(assert (=> b!96504 m!104261))

(assert (=> b!96519 m!104441))

(assert (=> b!96519 m!104273))

(assert (=> b!96519 m!104443))

(assert (=> b!96519 m!104117))

(assert (=> b!96519 m!104273))

(assert (=> b!96519 m!104117))

(declare-fun m!105119 () Bool)

(assert (=> b!96519 m!105119))

(assert (=> b!96519 m!104441))

(assert (=> d!25553 m!104095))

(assert (=> d!25303 d!25553))

(assert (=> d!25303 d!25377))

(assert (=> d!25303 d!25523))

(declare-fun d!25555 () Bool)

(assert (=> d!25555 (= (+!134 (getCurrentListMap!470 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!470 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) lt!47750 (zeroValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(assert (=> d!25555 true))

(declare-fun _$8!82 () Unit!2864)

(assert (=> d!25555 (= (choose!574 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) lt!47750 (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2457 newMap!16)) _$8!82)))

(declare-fun bs!3980 () Bool)

(assert (= bs!3980 d!25555))

(assert (=> bs!3980 m!104035))

(assert (=> bs!3980 m!104035))

(assert (=> bs!3980 m!104099))

(assert (=> bs!3980 m!103883))

(assert (=> bs!3980 m!104097))

(assert (=> d!25303 d!25555))

(declare-fun e!62937 () Bool)

(declare-fun b!96523 () Bool)

(declare-fun lt!48299 () ListLongMap!1527)

(assert (=> b!96523 (= e!62937 (= lt!48299 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (array!4218 (store (arr!2004 (_values!2440 newMap!16)) (index!3151 lt!47759) (ValueCellFull!966 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2253 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2457 newMap!16))))))

(declare-fun d!25557 () Bool)

(declare-fun e!62941 () Bool)

(assert (=> d!25557 e!62941))

(declare-fun res!48722 () Bool)

(assert (=> d!25557 (=> (not res!48722) (not e!62941))))

(assert (=> d!25557 (= res!48722 (not (contains!794 lt!48299 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!62939 () ListLongMap!1527)

(assert (=> d!25557 (= lt!48299 e!62939)))

(declare-fun c!16287 () Bool)

(assert (=> d!25557 (= c!16287 (bvsge #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(assert (=> d!25557 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25557 (= (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (array!4218 (store (arr!2004 (_values!2440 newMap!16)) (index!3151 lt!47759) (ValueCellFull!966 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2253 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) lt!48299)))

(declare-fun b!96524 () Bool)

(declare-fun e!62942 () Bool)

(assert (=> b!96524 (= e!62942 (validKeyInArray!0 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!96524 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!96525 () Bool)

(declare-fun lt!48298 () Unit!2864)

(declare-fun lt!48296 () Unit!2864)

(assert (=> b!96525 (= lt!48298 lt!48296)))

(declare-fun lt!48294 () ListLongMap!1527)

(declare-fun lt!48293 () (_ BitVec 64))

(declare-fun lt!48295 () V!3139)

(declare-fun lt!48297 () (_ BitVec 64))

(assert (=> b!96525 (not (contains!794 (+!134 lt!48294 (tuple2!2323 lt!48297 lt!48295)) lt!48293))))

(assert (=> b!96525 (= lt!48296 (addStillNotContains!39 lt!48294 lt!48297 lt!48295 lt!48293))))

(assert (=> b!96525 (= lt!48293 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!96525 (= lt!48295 (get!1269 (select (arr!2004 (array!4218 (store (arr!2004 (_values!2440 newMap!16)) (index!3151 lt!47759) (ValueCellFull!966 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2253 (_values!2440 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!364 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!96525 (= lt!48297 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun call!9796 () ListLongMap!1527)

(assert (=> b!96525 (= lt!48294 call!9796)))

(declare-fun e!62936 () ListLongMap!1527)

(assert (=> b!96525 (= e!62936 (+!134 call!9796 (tuple2!2323 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000) (get!1269 (select (arr!2004 (array!4218 (store (arr!2004 (_values!2440 newMap!16)) (index!3151 lt!47759) (ValueCellFull!966 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2253 (_values!2440 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!364 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun bm!9793 () Bool)

(assert (=> bm!9793 (= call!9796 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (array!4218 (store (arr!2004 (_values!2440 newMap!16)) (index!3151 lt!47759) (ValueCellFull!966 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2253 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2457 newMap!16)))))

(declare-fun b!96526 () Bool)

(declare-fun e!62938 () Bool)

(assert (=> b!96526 (= e!62938 e!62937)))

(declare-fun c!16284 () Bool)

(assert (=> b!96526 (= c!16284 (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun b!96527 () Bool)

(assert (=> b!96527 (= e!62939 e!62936)))

(declare-fun c!16285 () Bool)

(assert (=> b!96527 (= c!16285 (validKeyInArray!0 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96528 () Bool)

(assert (=> b!96528 (= e!62936 call!9796)))

(declare-fun b!96529 () Bool)

(assert (=> b!96529 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(assert (=> b!96529 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (array!4218 (store (arr!2004 (_values!2440 newMap!16)) (index!3151 lt!47759) (ValueCellFull!966 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2253 (_values!2440 newMap!16))))))))

(declare-fun e!62940 () Bool)

(assert (=> b!96529 (= e!62940 (= (apply!91 lt!48299 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) (get!1269 (select (arr!2004 (array!4218 (store (arr!2004 (_values!2440 newMap!16)) (index!3151 lt!47759) (ValueCellFull!966 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2253 (_values!2440 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!364 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!96530 () Bool)

(assert (=> b!96530 (= e!62939 (ListLongMap!1528 Nil!1570))))

(declare-fun b!96531 () Bool)

(assert (=> b!96531 (= e!62941 e!62938)))

(declare-fun c!16286 () Bool)

(assert (=> b!96531 (= c!16286 e!62942)))

(declare-fun res!48724 () Bool)

(assert (=> b!96531 (=> (not res!48724) (not e!62942))))

(assert (=> b!96531 (= res!48724 (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun b!96532 () Bool)

(assert (=> b!96532 (= e!62937 (isEmpty!354 lt!48299))))

(declare-fun b!96533 () Bool)

(declare-fun res!48723 () Bool)

(assert (=> b!96533 (=> (not res!48723) (not e!62941))))

(assert (=> b!96533 (= res!48723 (not (contains!794 lt!48299 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!96534 () Bool)

(assert (=> b!96534 (= e!62938 e!62940)))

(assert (=> b!96534 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun res!48725 () Bool)

(assert (=> b!96534 (= res!48725 (contains!794 lt!48299 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!96534 (=> (not res!48725) (not e!62940))))

(assert (= (and d!25557 c!16287) b!96530))

(assert (= (and d!25557 (not c!16287)) b!96527))

(assert (= (and b!96527 c!16285) b!96525))

(assert (= (and b!96527 (not c!16285)) b!96528))

(assert (= (or b!96525 b!96528) bm!9793))

(assert (= (and d!25557 res!48722) b!96533))

(assert (= (and b!96533 res!48723) b!96531))

(assert (= (and b!96531 res!48724) b!96524))

(assert (= (and b!96531 c!16286) b!96534))

(assert (= (and b!96531 (not c!16286)) b!96526))

(assert (= (and b!96534 res!48725) b!96529))

(assert (= (and b!96526 c!16284) b!96523))

(assert (= (and b!96526 (not c!16284)) b!96532))

(declare-fun b_lambda!4279 () Bool)

(assert (=> (not b_lambda!4279) (not b!96525)))

(assert (=> b!96525 t!5504))

(declare-fun b_and!5915 () Bool)

(assert (= b_and!5911 (and (=> t!5504 result!3229) b_and!5915)))

(assert (=> b!96525 t!5506))

(declare-fun b_and!5917 () Bool)

(assert (= b_and!5913 (and (=> t!5506 result!3231) b_and!5917)))

(declare-fun b_lambda!4281 () Bool)

(assert (=> (not b_lambda!4281) (not b!96529)))

(assert (=> b!96529 t!5504))

(declare-fun b_and!5919 () Bool)

(assert (= b_and!5915 (and (=> t!5504 result!3229) b_and!5919)))

(assert (=> b!96529 t!5506))

(declare-fun b_and!5921 () Bool)

(assert (= b_and!5917 (and (=> t!5506 result!3231) b_and!5921)))

(declare-fun m!105121 () Bool)

(assert (=> b!96532 m!105121))

(assert (=> b!96529 m!104117))

(assert (=> b!96529 m!104271))

(assert (=> b!96529 m!104273))

(assert (=> b!96529 m!104117))

(declare-fun m!105123 () Bool)

(assert (=> b!96529 m!105123))

(assert (=> b!96529 m!104271))

(assert (=> b!96529 m!104273))

(assert (=> b!96529 m!104275))

(declare-fun m!105125 () Bool)

(assert (=> b!96523 m!105125))

(assert (=> b!96527 m!104117))

(assert (=> b!96527 m!104117))

(assert (=> b!96527 m!104261))

(declare-fun m!105127 () Bool)

(assert (=> b!96525 m!105127))

(assert (=> b!96525 m!104271))

(declare-fun m!105129 () Bool)

(assert (=> b!96525 m!105129))

(assert (=> b!96525 m!104271))

(assert (=> b!96525 m!104273))

(assert (=> b!96525 m!104275))

(assert (=> b!96525 m!105127))

(declare-fun m!105131 () Bool)

(assert (=> b!96525 m!105131))

(assert (=> b!96525 m!104117))

(declare-fun m!105133 () Bool)

(assert (=> b!96525 m!105133))

(assert (=> b!96525 m!104273))

(declare-fun m!105135 () Bool)

(assert (=> b!96533 m!105135))

(assert (=> b!96524 m!104117))

(assert (=> b!96524 m!104117))

(assert (=> b!96524 m!104261))

(declare-fun m!105137 () Bool)

(assert (=> d!25557 m!105137))

(assert (=> d!25557 m!104095))

(assert (=> bm!9793 m!105125))

(assert (=> b!96534 m!104117))

(assert (=> b!96534 m!104117))

(declare-fun m!105139 () Bool)

(assert (=> b!96534 m!105139))

(assert (=> bm!9723 d!25557))

(assert (=> d!25401 d!25411))

(assert (=> d!25401 d!25409))

(declare-fun d!25559 () Bool)

(assert (=> d!25559 (contains!794 (+!134 lt!47826 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))) lt!47822)))

(assert (=> d!25559 true))

(declare-fun _$35!336 () Unit!2864)

(assert (=> d!25559 (= (choose!581 lt!47826 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))) lt!47822) _$35!336)))

(declare-fun bs!3981 () Bool)

(assert (= bs!3981 d!25559))

(assert (=> bs!3981 m!104049))

(assert (=> bs!3981 m!104049))

(assert (=> bs!3981 m!104051))

(assert (=> d!25401 d!25559))

(declare-fun d!25561 () Bool)

(declare-fun e!62943 () Bool)

(assert (=> d!25561 e!62943))

(declare-fun res!48726 () Bool)

(assert (=> d!25561 (=> res!48726 e!62943)))

(declare-fun lt!48301 () Bool)

(assert (=> d!25561 (= res!48726 (not lt!48301))))

(declare-fun lt!48300 () Bool)

(assert (=> d!25561 (= lt!48301 lt!48300)))

(declare-fun lt!48302 () Unit!2864)

(declare-fun e!62944 () Unit!2864)

(assert (=> d!25561 (= lt!48302 e!62944)))

(declare-fun c!16288 () Bool)

(assert (=> d!25561 (= c!16288 lt!48300)))

(assert (=> d!25561 (= lt!48300 (containsKey!153 (toList!779 lt!47826) lt!47822))))

(assert (=> d!25561 (= (contains!794 lt!47826 lt!47822) lt!48301)))

(declare-fun b!96536 () Bool)

(declare-fun lt!48303 () Unit!2864)

(assert (=> b!96536 (= e!62944 lt!48303)))

(assert (=> b!96536 (= lt!48303 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 lt!47826) lt!47822))))

(assert (=> b!96536 (isDefined!102 (getValueByKey!149 (toList!779 lt!47826) lt!47822))))

(declare-fun b!96537 () Bool)

(declare-fun Unit!2898 () Unit!2864)

(assert (=> b!96537 (= e!62944 Unit!2898)))

(declare-fun b!96538 () Bool)

(assert (=> b!96538 (= e!62943 (isDefined!102 (getValueByKey!149 (toList!779 lt!47826) lt!47822)))))

(assert (= (and d!25561 c!16288) b!96536))

(assert (= (and d!25561 (not c!16288)) b!96537))

(assert (= (and d!25561 (not res!48726)) b!96538))

(declare-fun m!105141 () Bool)

(assert (=> d!25561 m!105141))

(declare-fun m!105143 () Bool)

(assert (=> b!96536 m!105143))

(declare-fun m!105145 () Bool)

(assert (=> b!96536 m!105145))

(assert (=> b!96536 m!105145))

(declare-fun m!105147 () Bool)

(assert (=> b!96536 m!105147))

(assert (=> b!96538 m!105145))

(assert (=> b!96538 m!105145))

(assert (=> b!96538 m!105147))

(assert (=> d!25401 d!25561))

(assert (=> b!96078 d!25543))

(assert (=> b!96005 d!25447))

(declare-fun d!25563 () Bool)

(declare-fun e!62945 () Bool)

(assert (=> d!25563 e!62945))

(declare-fun res!48727 () Bool)

(assert (=> d!25563 (=> (not res!48727) (not e!62945))))

(declare-fun lt!48306 () ListLongMap!1527)

(assert (=> d!25563 (= res!48727 (contains!794 lt!48306 (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!48305 () List!1573)

(assert (=> d!25563 (= lt!48306 (ListLongMap!1528 lt!48305))))

(declare-fun lt!48307 () Unit!2864)

(declare-fun lt!48304 () Unit!2864)

(assert (=> d!25563 (= lt!48307 lt!48304)))

(assert (=> d!25563 (= (getValueByKey!149 lt!48305 (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25563 (= lt!48304 (lemmaContainsTupThenGetReturnValue!65 lt!48305 (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25563 (= lt!48305 (insertStrictlySorted!68 (toList!779 (map!1247 newMap!16)) (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25563 (= (+!134 (map!1247 newMap!16) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!48306)))

(declare-fun b!96539 () Bool)

(declare-fun res!48728 () Bool)

(assert (=> b!96539 (=> (not res!48728) (not e!62945))))

(assert (=> b!96539 (= res!48728 (= (getValueByKey!149 (toList!779 lt!48306) (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!96540 () Bool)

(assert (=> b!96540 (= e!62945 (contains!797 (toList!779 lt!48306) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!25563 res!48727) b!96539))

(assert (= (and b!96539 res!48728) b!96540))

(declare-fun m!105149 () Bool)

(assert (=> d!25563 m!105149))

(declare-fun m!105151 () Bool)

(assert (=> d!25563 m!105151))

(declare-fun m!105153 () Bool)

(assert (=> d!25563 m!105153))

(declare-fun m!105155 () Bool)

(assert (=> d!25563 m!105155))

(declare-fun m!105157 () Bool)

(assert (=> b!96539 m!105157))

(declare-fun m!105159 () Bool)

(assert (=> b!96540 m!105159))

(assert (=> b!96005 d!25563))

(assert (=> b!96005 d!25297))

(declare-fun lt!48313 () SeekEntryResult!252)

(declare-fun d!25565 () Bool)

(assert (=> d!25565 (and (or ((_ is Undefined!252) lt!48313) (not ((_ is Found!252) lt!48313)) (and (bvsge (index!3151 lt!48313) #b00000000000000000000000000000000) (bvslt (index!3151 lt!48313) (size!2252 (_keys!4143 newMap!16))))) (or ((_ is Undefined!252) lt!48313) ((_ is Found!252) lt!48313) (not ((_ is MissingVacant!252) lt!48313)) (not (= (index!3153 lt!48313) (index!3152 lt!48012))) (and (bvsge (index!3153 lt!48313) #b00000000000000000000000000000000) (bvslt (index!3153 lt!48313) (size!2252 (_keys!4143 newMap!16))))) (or ((_ is Undefined!252) lt!48313) (ite ((_ is Found!252) lt!48313) (= (select (arr!2003 (_keys!4143 newMap!16)) (index!3151 lt!48313)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (and ((_ is MissingVacant!252) lt!48313) (= (index!3153 lt!48313) (index!3152 lt!48012)) (= (select (arr!2003 (_keys!4143 newMap!16)) (index!3153 lt!48313)) #b1000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun e!62953 () SeekEntryResult!252)

(assert (=> d!25565 (= lt!48313 e!62953)))

(declare-fun c!16295 () Bool)

(assert (=> d!25565 (= c!16295 (bvsge (x!12800 lt!48012) #b01111111111111111111111111111110))))

(declare-fun lt!48312 () (_ BitVec 64))

(assert (=> d!25565 (= lt!48312 (select (arr!2003 (_keys!4143 newMap!16)) (index!3152 lt!48012)))))

(assert (=> d!25565 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25565 (= (seekKeyOrZeroReturnVacant!0 (x!12800 lt!48012) (index!3152 lt!48012) (index!3152 lt!48012) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (_keys!4143 newMap!16) (mask!6542 newMap!16)) lt!48313)))

(declare-fun b!96553 () Bool)

(declare-fun c!16296 () Bool)

(assert (=> b!96553 (= c!16296 (= lt!48312 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!62952 () SeekEntryResult!252)

(declare-fun e!62954 () SeekEntryResult!252)

(assert (=> b!96553 (= e!62952 e!62954)))

(declare-fun b!96554 () Bool)

(assert (=> b!96554 (= e!62952 (Found!252 (index!3152 lt!48012)))))

(declare-fun b!96555 () Bool)

(assert (=> b!96555 (= e!62953 e!62952)))

(declare-fun c!16297 () Bool)

(assert (=> b!96555 (= c!16297 (= lt!48312 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(declare-fun b!96556 () Bool)

(assert (=> b!96556 (= e!62953 Undefined!252)))

(declare-fun b!96557 () Bool)

(declare-fun nextIndex!0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))

(assert (=> b!96557 (= e!62954 (seekKeyOrZeroReturnVacant!0 (bvadd (x!12800 lt!48012) #b00000000000000000000000000000001) (nextIndex!0 (index!3152 lt!48012) (x!12800 lt!48012) (mask!6542 newMap!16)) (index!3152 lt!48012) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (_keys!4143 newMap!16) (mask!6542 newMap!16)))))

(declare-fun b!96558 () Bool)

(assert (=> b!96558 (= e!62954 (MissingVacant!252 (index!3152 lt!48012)))))

(assert (= (and d!25565 c!16295) b!96556))

(assert (= (and d!25565 (not c!16295)) b!96555))

(assert (= (and b!96555 c!16297) b!96554))

(assert (= (and b!96555 (not c!16297)) b!96553))

(assert (= (and b!96553 c!16296) b!96558))

(assert (= (and b!96553 (not c!16296)) b!96557))

(declare-fun m!105161 () Bool)

(assert (=> d!25565 m!105161))

(declare-fun m!105163 () Bool)

(assert (=> d!25565 m!105163))

(assert (=> d!25565 m!104347))

(assert (=> d!25565 m!104095))

(declare-fun m!105165 () Bool)

(assert (=> b!96557 m!105165))

(assert (=> b!96557 m!105165))

(assert (=> b!96557 m!103861))

(declare-fun m!105167 () Bool)

(assert (=> b!96557 m!105167))

(assert (=> b!96114 d!25565))

(declare-fun d!25567 () Bool)

(declare-fun e!62955 () Bool)

(assert (=> d!25567 e!62955))

(declare-fun res!48729 () Bool)

(assert (=> d!25567 (=> res!48729 e!62955)))

(declare-fun lt!48315 () Bool)

(assert (=> d!25567 (= res!48729 (not lt!48315))))

(declare-fun lt!48314 () Bool)

(assert (=> d!25567 (= lt!48315 lt!48314)))

(declare-fun lt!48316 () Unit!2864)

(declare-fun e!62956 () Unit!2864)

(assert (=> d!25567 (= lt!48316 e!62956)))

(declare-fun c!16298 () Bool)

(assert (=> d!25567 (= c!16298 lt!48314)))

(assert (=> d!25567 (= lt!48314 (containsKey!153 (toList!779 lt!47848) (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(assert (=> d!25567 (= (contains!794 lt!47848 (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!48315)))

(declare-fun b!96559 () Bool)

(declare-fun lt!48317 () Unit!2864)

(assert (=> b!96559 (= e!62956 lt!48317)))

(assert (=> b!96559 (= lt!48317 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 lt!47848) (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(assert (=> b!96559 (isDefined!102 (getValueByKey!149 (toList!779 lt!47848) (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun b!96560 () Bool)

(declare-fun Unit!2899 () Unit!2864)

(assert (=> b!96560 (= e!62956 Unit!2899)))

(declare-fun b!96561 () Bool)

(assert (=> b!96561 (= e!62955 (isDefined!102 (getValueByKey!149 (toList!779 lt!47848) (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(assert (= (and d!25567 c!16298) b!96559))

(assert (= (and d!25567 (not c!16298)) b!96560))

(assert (= (and d!25567 (not res!48729)) b!96561))

(declare-fun m!105169 () Bool)

(assert (=> d!25567 m!105169))

(declare-fun m!105171 () Bool)

(assert (=> b!96559 m!105171))

(assert (=> b!96559 m!104111))

(assert (=> b!96559 m!104111))

(declare-fun m!105173 () Bool)

(assert (=> b!96559 m!105173))

(assert (=> b!96561 m!104111))

(assert (=> b!96561 m!104111))

(assert (=> b!96561 m!105173))

(assert (=> d!25305 d!25567))

(declare-fun b!96562 () Bool)

(declare-fun e!62957 () Option!155)

(assert (=> b!96562 (= e!62957 (Some!154 (_2!1172 (h!2162 lt!47847))))))

(declare-fun b!96565 () Bool)

(declare-fun e!62958 () Option!155)

(assert (=> b!96565 (= e!62958 None!153)))

(declare-fun d!25569 () Bool)

(declare-fun c!16299 () Bool)

(assert (=> d!25569 (= c!16299 (and ((_ is Cons!1569) lt!47847) (= (_1!1172 (h!2162 lt!47847)) (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(assert (=> d!25569 (= (getValueByKey!149 lt!47847 (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) e!62957)))

(declare-fun b!96564 () Bool)

(assert (=> b!96564 (= e!62958 (getValueByKey!149 (t!5495 lt!47847) (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun b!96563 () Bool)

(assert (=> b!96563 (= e!62957 e!62958)))

(declare-fun c!16300 () Bool)

(assert (=> b!96563 (= c!16300 (and ((_ is Cons!1569) lt!47847) (not (= (_1!1172 (h!2162 lt!47847)) (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))))

(assert (= (and d!25569 c!16299) b!96562))

(assert (= (and d!25569 (not c!16299)) b!96563))

(assert (= (and b!96563 c!16300) b!96564))

(assert (= (and b!96563 (not c!16300)) b!96565))

(declare-fun m!105175 () Bool)

(assert (=> b!96564 m!105175))

(assert (=> d!25305 d!25569))

(declare-fun d!25571 () Bool)

(assert (=> d!25571 (= (getValueByKey!149 lt!47847 (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) (Some!154 (_2!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun lt!48318 () Unit!2864)

(assert (=> d!25571 (= lt!48318 (choose!583 lt!47847 (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun e!62959 () Bool)

(assert (=> d!25571 e!62959))

(declare-fun res!48730 () Bool)

(assert (=> d!25571 (=> (not res!48730) (not e!62959))))

(assert (=> d!25571 (= res!48730 (isStrictlySorted!303 lt!47847))))

(assert (=> d!25571 (= (lemmaContainsTupThenGetReturnValue!65 lt!47847 (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!48318)))

(declare-fun b!96566 () Bool)

(declare-fun res!48731 () Bool)

(assert (=> b!96566 (=> (not res!48731) (not e!62959))))

(assert (=> b!96566 (= res!48731 (containsKey!153 lt!47847 (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun b!96567 () Bool)

(assert (=> b!96567 (= e!62959 (contains!797 lt!47847 (tuple2!2323 (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(assert (= (and d!25571 res!48730) b!96566))

(assert (= (and b!96566 res!48731) b!96567))

(assert (=> d!25571 m!104105))

(declare-fun m!105177 () Bool)

(assert (=> d!25571 m!105177))

(declare-fun m!105179 () Bool)

(assert (=> d!25571 m!105179))

(declare-fun m!105181 () Bool)

(assert (=> b!96566 m!105181))

(declare-fun m!105183 () Bool)

(assert (=> b!96567 m!105183))

(assert (=> d!25305 d!25571))

(declare-fun b!96568 () Bool)

(declare-fun e!62962 () List!1573)

(declare-fun call!9798 () List!1573)

(assert (=> b!96568 (= e!62962 call!9798)))

(declare-fun c!16301 () Bool)

(declare-fun b!96569 () Bool)

(declare-fun e!62960 () List!1573)

(declare-fun c!16302 () Bool)

(assert (=> b!96569 (= e!62960 (ite c!16301 (t!5495 (toList!779 call!9710)) (ite c!16302 (Cons!1569 (h!2162 (toList!779 call!9710)) (t!5495 (toList!779 call!9710))) Nil!1570)))))

(declare-fun bm!9794 () Bool)

(declare-fun call!9799 () List!1573)

(declare-fun call!9797 () List!1573)

(assert (=> bm!9794 (= call!9799 call!9797)))

(declare-fun b!96570 () Bool)

(declare-fun e!62963 () List!1573)

(assert (=> b!96570 (= e!62963 call!9799)))

(declare-fun b!96572 () Bool)

(assert (=> b!96572 (= c!16302 (and ((_ is Cons!1569) (toList!779 call!9710)) (bvsgt (_1!1172 (h!2162 (toList!779 call!9710))) (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(declare-fun e!62964 () List!1573)

(assert (=> b!96572 (= e!62964 e!62963)))

(declare-fun b!96573 () Bool)

(assert (=> b!96573 (= e!62964 call!9797)))

(declare-fun c!16304 () Bool)

(declare-fun bm!9795 () Bool)

(assert (=> bm!9795 (= call!9798 ($colon$colon!77 e!62960 (ite c!16304 (h!2162 (toList!779 call!9710)) (tuple2!2323 (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))))

(declare-fun c!16303 () Bool)

(assert (=> bm!9795 (= c!16303 c!16304)))

(declare-fun b!96574 () Bool)

(declare-fun res!48732 () Bool)

(declare-fun e!62961 () Bool)

(assert (=> b!96574 (=> (not res!48732) (not e!62961))))

(declare-fun lt!48319 () List!1573)

(assert (=> b!96574 (= res!48732 (containsKey!153 lt!48319 (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun b!96575 () Bool)

(assert (=> b!96575 (= e!62960 (insertStrictlySorted!68 (t!5495 (toList!779 call!9710)) (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun bm!9796 () Bool)

(assert (=> bm!9796 (= call!9797 call!9798)))

(declare-fun d!25573 () Bool)

(assert (=> d!25573 e!62961))

(declare-fun res!48733 () Bool)

(assert (=> d!25573 (=> (not res!48733) (not e!62961))))

(assert (=> d!25573 (= res!48733 (isStrictlySorted!303 lt!48319))))

(assert (=> d!25573 (= lt!48319 e!62962)))

(assert (=> d!25573 (= c!16304 (and ((_ is Cons!1569) (toList!779 call!9710)) (bvslt (_1!1172 (h!2162 (toList!779 call!9710))) (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(assert (=> d!25573 (isStrictlySorted!303 (toList!779 call!9710))))

(assert (=> d!25573 (= (insertStrictlySorted!68 (toList!779 call!9710) (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!48319)))

(declare-fun b!96571 () Bool)

(assert (=> b!96571 (= e!62963 call!9799)))

(declare-fun b!96576 () Bool)

(assert (=> b!96576 (= e!62961 (contains!797 lt!48319 (tuple2!2323 (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(declare-fun b!96577 () Bool)

(assert (=> b!96577 (= e!62962 e!62964)))

(assert (=> b!96577 (= c!16301 (and ((_ is Cons!1569) (toList!779 call!9710)) (= (_1!1172 (h!2162 (toList!779 call!9710))) (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(assert (= (and d!25573 c!16304) b!96568))

(assert (= (and d!25573 (not c!16304)) b!96577))

(assert (= (and b!96577 c!16301) b!96573))

(assert (= (and b!96577 (not c!16301)) b!96572))

(assert (= (and b!96572 c!16302) b!96571))

(assert (= (and b!96572 (not c!16302)) b!96570))

(assert (= (or b!96571 b!96570) bm!9794))

(assert (= (or b!96573 bm!9794) bm!9796))

(assert (= (or b!96568 bm!9796) bm!9795))

(assert (= (and bm!9795 c!16303) b!96575))

(assert (= (and bm!9795 (not c!16303)) b!96569))

(assert (= (and d!25573 res!48733) b!96574))

(assert (= (and b!96574 res!48732) b!96576))

(declare-fun m!105185 () Bool)

(assert (=> b!96576 m!105185))

(declare-fun m!105187 () Bool)

(assert (=> b!96574 m!105187))

(declare-fun m!105189 () Bool)

(assert (=> bm!9795 m!105189))

(declare-fun m!105191 () Bool)

(assert (=> b!96575 m!105191))

(declare-fun m!105193 () Bool)

(assert (=> d!25573 m!105193))

(declare-fun m!105195 () Bool)

(assert (=> d!25573 m!105195))

(assert (=> d!25305 d!25573))

(declare-fun d!25575 () Bool)

(assert (=> d!25575 (isDefined!102 (getValueByKey!149 (toList!779 (+!134 lt!47826 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!47822))))

(declare-fun lt!48320 () Unit!2864)

(assert (=> d!25575 (= lt!48320 (choose!578 (toList!779 (+!134 lt!47826 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!47822))))

(declare-fun e!62965 () Bool)

(assert (=> d!25575 e!62965))

(declare-fun res!48734 () Bool)

(assert (=> d!25575 (=> (not res!48734) (not e!62965))))

(assert (=> d!25575 (= res!48734 (isStrictlySorted!303 (toList!779 (+!134 lt!47826 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(assert (=> d!25575 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 (+!134 lt!47826 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!47822) lt!48320)))

(declare-fun b!96578 () Bool)

(assert (=> b!96578 (= e!62965 (containsKey!153 (toList!779 (+!134 lt!47826 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!47822))))

(assert (= (and d!25575 res!48734) b!96578))

(assert (=> d!25575 m!104641))

(assert (=> d!25575 m!104641))

(assert (=> d!25575 m!104643))

(declare-fun m!105197 () Bool)

(assert (=> d!25575 m!105197))

(declare-fun m!105199 () Bool)

(assert (=> d!25575 m!105199))

(assert (=> b!96578 m!104637))

(assert (=> b!96281 d!25575))

(declare-fun d!25577 () Bool)

(assert (=> d!25577 (= (isDefined!102 (getValueByKey!149 (toList!779 (+!134 lt!47826 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!47822)) (not (isEmpty!353 (getValueByKey!149 (toList!779 (+!134 lt!47826 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!47822))))))

(declare-fun bs!3982 () Bool)

(assert (= bs!3982 d!25577))

(assert (=> bs!3982 m!104641))

(declare-fun m!105201 () Bool)

(assert (=> bs!3982 m!105201))

(assert (=> b!96281 d!25577))

(declare-fun e!62966 () Option!155)

(declare-fun b!96579 () Bool)

(assert (=> b!96579 (= e!62966 (Some!154 (_2!1172 (h!2162 (toList!779 (+!134 lt!47826 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))))))))

(declare-fun b!96582 () Bool)

(declare-fun e!62967 () Option!155)

(assert (=> b!96582 (= e!62967 None!153)))

(declare-fun d!25579 () Bool)

(declare-fun c!16305 () Bool)

(assert (=> d!25579 (= c!16305 (and ((_ is Cons!1569) (toList!779 (+!134 lt!47826 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))) (= (_1!1172 (h!2162 (toList!779 (+!134 lt!47826 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))) lt!47822)))))

(assert (=> d!25579 (= (getValueByKey!149 (toList!779 (+!134 lt!47826 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!47822) e!62966)))

(declare-fun b!96581 () Bool)

(assert (=> b!96581 (= e!62967 (getValueByKey!149 (t!5495 (toList!779 (+!134 lt!47826 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))) lt!47822))))

(declare-fun b!96580 () Bool)

(assert (=> b!96580 (= e!62966 e!62967)))

(declare-fun c!16306 () Bool)

(assert (=> b!96580 (= c!16306 (and ((_ is Cons!1569) (toList!779 (+!134 lt!47826 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))) (not (= (_1!1172 (h!2162 (toList!779 (+!134 lt!47826 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))) lt!47822))))))

(assert (= (and d!25579 c!16305) b!96579))

(assert (= (and d!25579 (not c!16305)) b!96580))

(assert (= (and b!96580 c!16306) b!96581))

(assert (= (and b!96580 (not c!16306)) b!96582))

(declare-fun m!105203 () Bool)

(assert (=> b!96581 m!105203))

(assert (=> b!96281 d!25579))

(declare-fun d!25581 () Bool)

(assert (=> d!25581 (= (get!1273 (getValueByKey!149 (toList!779 lt!47819) #b0000000000000000000000000000000000000000000000000000000000000000)) (v!2782 (getValueByKey!149 (toList!779 lt!47819) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!25417 d!25581))

(declare-fun b!96583 () Bool)

(declare-fun e!62968 () Option!155)

(assert (=> b!96583 (= e!62968 (Some!154 (_2!1172 (h!2162 (toList!779 lt!47819)))))))

(declare-fun b!96586 () Bool)

(declare-fun e!62969 () Option!155)

(assert (=> b!96586 (= e!62969 None!153)))

(declare-fun d!25583 () Bool)

(declare-fun c!16307 () Bool)

(assert (=> d!25583 (= c!16307 (and ((_ is Cons!1569) (toList!779 lt!47819)) (= (_1!1172 (h!2162 (toList!779 lt!47819))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!25583 (= (getValueByKey!149 (toList!779 lt!47819) #b0000000000000000000000000000000000000000000000000000000000000000) e!62968)))

(declare-fun b!96585 () Bool)

(assert (=> b!96585 (= e!62969 (getValueByKey!149 (t!5495 (toList!779 lt!47819)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96584 () Bool)

(assert (=> b!96584 (= e!62968 e!62969)))

(declare-fun c!16308 () Bool)

(assert (=> b!96584 (= c!16308 (and ((_ is Cons!1569) (toList!779 lt!47819)) (not (= (_1!1172 (h!2162 (toList!779 lt!47819))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (= (and d!25583 c!16307) b!96583))

(assert (= (and d!25583 (not c!16307)) b!96584))

(assert (= (and b!96584 c!16308) b!96585))

(assert (= (and b!96584 (not c!16308)) b!96586))

(declare-fun m!105205 () Bool)

(assert (=> b!96585 m!105205))

(assert (=> d!25417 d!25583))

(assert (=> d!25323 d!25523))

(declare-fun d!25585 () Bool)

(declare-fun res!48737 () Bool)

(declare-fun e!62970 () Bool)

(assert (=> d!25585 (=> res!48737 e!62970)))

(assert (=> d!25585 (= res!48737 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2252 (_keys!4143 newMap!16))))))

(assert (=> d!25585 (= (arrayNoDuplicates!0 (_keys!4143 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!16222 (Cons!1570 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000) Nil!1571) Nil!1571)) e!62970)))

(declare-fun b!96587 () Bool)

(declare-fun e!62971 () Bool)

(declare-fun e!62973 () Bool)

(assert (=> b!96587 (= e!62971 e!62973)))

(declare-fun c!16309 () Bool)

(assert (=> b!96587 (= c!16309 (validKeyInArray!0 (select (arr!2003 (_keys!4143 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!96588 () Bool)

(assert (=> b!96588 (= e!62970 e!62971)))

(declare-fun res!48735 () Bool)

(assert (=> b!96588 (=> (not res!48735) (not e!62971))))

(declare-fun e!62972 () Bool)

(assert (=> b!96588 (= res!48735 (not e!62972))))

(declare-fun res!48736 () Bool)

(assert (=> b!96588 (=> (not res!48736) (not e!62972))))

(assert (=> b!96588 (= res!48736 (validKeyInArray!0 (select (arr!2003 (_keys!4143 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!96589 () Bool)

(assert (=> b!96589 (= e!62972 (contains!796 (ite c!16222 (Cons!1570 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000) Nil!1571) Nil!1571) (select (arr!2003 (_keys!4143 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun bm!9797 () Bool)

(declare-fun call!9800 () Bool)

(assert (=> bm!9797 (= call!9800 (arrayNoDuplicates!0 (_keys!4143 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!16309 (Cons!1570 (select (arr!2003 (_keys!4143 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (ite c!16222 (Cons!1570 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000) Nil!1571) Nil!1571)) (ite c!16222 (Cons!1570 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000) Nil!1571) Nil!1571))))))

(declare-fun b!96590 () Bool)

(assert (=> b!96590 (= e!62973 call!9800)))

(declare-fun b!96591 () Bool)

(assert (=> b!96591 (= e!62973 call!9800)))

(assert (= (and d!25585 (not res!48737)) b!96588))

(assert (= (and b!96588 res!48736) b!96589))

(assert (= (and b!96588 res!48735) b!96587))

(assert (= (and b!96587 c!16309) b!96590))

(assert (= (and b!96587 (not c!16309)) b!96591))

(assert (= (or b!96590 b!96591) bm!9797))

(assert (=> b!96587 m!104755))

(assert (=> b!96587 m!104755))

(assert (=> b!96587 m!104763))

(assert (=> b!96588 m!104755))

(assert (=> b!96588 m!104755))

(assert (=> b!96588 m!104763))

(assert (=> b!96589 m!104755))

(assert (=> b!96589 m!104755))

(declare-fun m!105207 () Bool)

(assert (=> b!96589 m!105207))

(assert (=> bm!9797 m!104755))

(declare-fun m!105209 () Bool)

(assert (=> bm!9797 m!105209))

(assert (=> bm!9758 d!25585))

(declare-fun d!25587 () Bool)

(assert (=> d!25587 (= (validKeyInArray!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) (and (not (= (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (= (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) #b1000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!96296 d!25587))

(declare-fun d!25589 () Bool)

(assert (=> d!25589 (= (get!1273 (getValueByKey!149 (toList!779 lt!47819) #b1000000000000000000000000000000000000000000000000000000000000000)) (v!2782 (getValueByKey!149 (toList!779 lt!47819) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!25353 d!25589))

(assert (=> d!25353 d!25537))

(declare-fun d!25591 () Bool)

(declare-fun e!62974 () Bool)

(assert (=> d!25591 e!62974))

(declare-fun res!48738 () Bool)

(assert (=> d!25591 (=> res!48738 e!62974)))

(declare-fun lt!48322 () Bool)

(assert (=> d!25591 (= res!48738 (not lt!48322))))

(declare-fun lt!48321 () Bool)

(assert (=> d!25591 (= lt!48322 lt!48321)))

(declare-fun lt!48323 () Unit!2864)

(declare-fun e!62975 () Unit!2864)

(assert (=> d!25591 (= lt!48323 e!62975)))

(declare-fun c!16310 () Bool)

(assert (=> d!25591 (= c!16310 lt!48321)))

(assert (=> d!25591 (= lt!48321 (containsKey!153 (toList!779 lt!47989) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!25591 (= (contains!794 lt!47989 #b1000000000000000000000000000000000000000000000000000000000000000) lt!48322)))

(declare-fun b!96592 () Bool)

(declare-fun lt!48324 () Unit!2864)

(assert (=> b!96592 (= e!62975 lt!48324)))

(assert (=> b!96592 (= lt!48324 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 lt!47989) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!96592 (isDefined!102 (getValueByKey!149 (toList!779 lt!47989) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96593 () Bool)

(declare-fun Unit!2900 () Unit!2864)

(assert (=> b!96593 (= e!62975 Unit!2900)))

(declare-fun b!96594 () Bool)

(assert (=> b!96594 (= e!62974 (isDefined!102 (getValueByKey!149 (toList!779 lt!47989) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25591 c!16310) b!96592))

(assert (= (and d!25591 (not c!16310)) b!96593))

(assert (= (and d!25591 (not res!48738)) b!96594))

(declare-fun m!105211 () Bool)

(assert (=> d!25591 m!105211))

(declare-fun m!105213 () Bool)

(assert (=> b!96592 m!105213))

(declare-fun m!105215 () Bool)

(assert (=> b!96592 m!105215))

(assert (=> b!96592 m!105215))

(declare-fun m!105217 () Bool)

(assert (=> b!96592 m!105217))

(assert (=> b!96594 m!105215))

(assert (=> b!96594 m!105215))

(assert (=> b!96594 m!105217))

(assert (=> bm!9732 d!25591))

(declare-fun d!25593 () Bool)

(assert (=> d!25593 (= (apply!91 lt!48094 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1273 (getValueByKey!149 (toList!779 lt!48094) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!3983 () Bool)

(assert (= bs!3983 d!25593))

(assert (=> bs!3983 m!104953))

(assert (=> bs!3983 m!104953))

(declare-fun m!105219 () Bool)

(assert (=> bs!3983 m!105219))

(assert (=> b!96232 d!25593))

(declare-fun b!96595 () Bool)

(declare-fun e!62976 () Option!155)

(assert (=> b!96595 (= e!62976 (Some!154 (_2!1172 (h!2162 (toList!779 lt!47848)))))))

(declare-fun b!96598 () Bool)

(declare-fun e!62977 () Option!155)

(assert (=> b!96598 (= e!62977 None!153)))

(declare-fun d!25595 () Bool)

(declare-fun c!16311 () Bool)

(assert (=> d!25595 (= c!16311 (and ((_ is Cons!1569) (toList!779 lt!47848)) (= (_1!1172 (h!2162 (toList!779 lt!47848))) (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(assert (=> d!25595 (= (getValueByKey!149 (toList!779 lt!47848) (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) e!62976)))

(declare-fun b!96597 () Bool)

(assert (=> b!96597 (= e!62977 (getValueByKey!149 (t!5495 (toList!779 lt!47848)) (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun b!96596 () Bool)

(assert (=> b!96596 (= e!62976 e!62977)))

(declare-fun c!16312 () Bool)

(assert (=> b!96596 (= c!16312 (and ((_ is Cons!1569) (toList!779 lt!47848)) (not (= (_1!1172 (h!2162 (toList!779 lt!47848))) (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))))

(assert (= (and d!25595 c!16311) b!96595))

(assert (= (and d!25595 (not c!16311)) b!96596))

(assert (= (and b!96596 c!16312) b!96597))

(assert (= (and b!96596 (not c!16312)) b!96598))

(declare-fun m!105221 () Bool)

(assert (=> b!96597 m!105221))

(assert (=> b!95964 d!25595))

(declare-fun d!25597 () Bool)

(declare-fun e!62978 () Bool)

(assert (=> d!25597 e!62978))

(declare-fun res!48739 () Bool)

(assert (=> d!25597 (=> res!48739 e!62978)))

(declare-fun lt!48326 () Bool)

(assert (=> d!25597 (= res!48739 (not lt!48326))))

(declare-fun lt!48325 () Bool)

(assert (=> d!25597 (= lt!48326 lt!48325)))

(declare-fun lt!48327 () Unit!2864)

(declare-fun e!62979 () Unit!2864)

(assert (=> d!25597 (= lt!48327 e!62979)))

(declare-fun c!16313 () Bool)

(assert (=> d!25597 (= c!16313 lt!48325)))

(assert (=> d!25597 (= lt!48325 (containsKey!153 (toList!779 lt!48137) (_1!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(assert (=> d!25597 (= (contains!794 lt!48137 (_1!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!48326)))

(declare-fun b!96599 () Bool)

(declare-fun lt!48328 () Unit!2864)

(assert (=> b!96599 (= e!62979 lt!48328)))

(assert (=> b!96599 (= lt!48328 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 lt!48137) (_1!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(assert (=> b!96599 (isDefined!102 (getValueByKey!149 (toList!779 lt!48137) (_1!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun b!96600 () Bool)

(declare-fun Unit!2901 () Unit!2864)

(assert (=> b!96600 (= e!62979 Unit!2901)))

(declare-fun b!96601 () Bool)

(assert (=> b!96601 (= e!62978 (isDefined!102 (getValueByKey!149 (toList!779 lt!48137) (_1!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(assert (= (and d!25597 c!16313) b!96599))

(assert (= (and d!25597 (not c!16313)) b!96600))

(assert (= (and d!25597 (not res!48739)) b!96601))

(declare-fun m!105223 () Bool)

(assert (=> d!25597 m!105223))

(declare-fun m!105225 () Bool)

(assert (=> b!96599 m!105225))

(assert (=> b!96599 m!104617))

(assert (=> b!96599 m!104617))

(declare-fun m!105227 () Bool)

(assert (=> b!96599 m!105227))

(assert (=> b!96601 m!104617))

(assert (=> b!96601 m!104617))

(assert (=> b!96601 m!105227))

(assert (=> d!25405 d!25597))

(declare-fun b!96602 () Bool)

(declare-fun e!62980 () Option!155)

(assert (=> b!96602 (= e!62980 (Some!154 (_2!1172 (h!2162 lt!48136))))))

(declare-fun b!96605 () Bool)

(declare-fun e!62981 () Option!155)

(assert (=> b!96605 (= e!62981 None!153)))

(declare-fun d!25599 () Bool)

(declare-fun c!16314 () Bool)

(assert (=> d!25599 (= c!16314 (and ((_ is Cons!1569) lt!48136) (= (_1!1172 (h!2162 lt!48136)) (_1!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(assert (=> d!25599 (= (getValueByKey!149 lt!48136 (_1!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) e!62980)))

(declare-fun b!96604 () Bool)

(assert (=> b!96604 (= e!62981 (getValueByKey!149 (t!5495 lt!48136) (_1!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun b!96603 () Bool)

(assert (=> b!96603 (= e!62980 e!62981)))

(declare-fun c!16315 () Bool)

(assert (=> b!96603 (= c!16315 (and ((_ is Cons!1569) lt!48136) (not (= (_1!1172 (h!2162 lt!48136)) (_1!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))))

(assert (= (and d!25599 c!16314) b!96602))

(assert (= (and d!25599 (not c!16314)) b!96603))

(assert (= (and b!96603 c!16315) b!96604))

(assert (= (and b!96603 (not c!16315)) b!96605))

(declare-fun m!105229 () Bool)

(assert (=> b!96604 m!105229))

(assert (=> d!25405 d!25599))

(declare-fun d!25601 () Bool)

(assert (=> d!25601 (= (getValueByKey!149 lt!48136 (_1!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) (Some!154 (_2!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun lt!48329 () Unit!2864)

(assert (=> d!25601 (= lt!48329 (choose!583 lt!48136 (_1!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun e!62982 () Bool)

(assert (=> d!25601 e!62982))

(declare-fun res!48740 () Bool)

(assert (=> d!25601 (=> (not res!48740) (not e!62982))))

(assert (=> d!25601 (= res!48740 (isStrictlySorted!303 lt!48136))))

(assert (=> d!25601 (= (lemmaContainsTupThenGetReturnValue!65 lt!48136 (_1!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!48329)))

(declare-fun b!96606 () Bool)

(declare-fun res!48741 () Bool)

(assert (=> b!96606 (=> (not res!48741) (not e!62982))))

(assert (=> b!96606 (= res!48741 (containsKey!153 lt!48136 (_1!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun b!96607 () Bool)

(assert (=> b!96607 (= e!62982 (contains!797 lt!48136 (tuple2!2323 (_1!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(assert (= (and d!25601 res!48740) b!96606))

(assert (= (and b!96606 res!48741) b!96607))

(assert (=> d!25601 m!104611))

(declare-fun m!105231 () Bool)

(assert (=> d!25601 m!105231))

(declare-fun m!105233 () Bool)

(assert (=> d!25601 m!105233))

(declare-fun m!105235 () Bool)

(assert (=> b!96606 m!105235))

(declare-fun m!105237 () Bool)

(assert (=> b!96607 m!105237))

(assert (=> d!25405 d!25601))

(declare-fun b!96608 () Bool)

(declare-fun e!62985 () List!1573)

(declare-fun call!9802 () List!1573)

(assert (=> b!96608 (= e!62985 call!9802)))

(declare-fun b!96609 () Bool)

(declare-fun c!16317 () Bool)

(declare-fun c!16316 () Bool)

(declare-fun e!62983 () List!1573)

(assert (=> b!96609 (= e!62983 (ite c!16316 (t!5495 (toList!779 lt!47829)) (ite c!16317 (Cons!1569 (h!2162 (toList!779 lt!47829)) (t!5495 (toList!779 lt!47829))) Nil!1570)))))

(declare-fun bm!9798 () Bool)

(declare-fun call!9803 () List!1573)

(declare-fun call!9801 () List!1573)

(assert (=> bm!9798 (= call!9803 call!9801)))

(declare-fun b!96610 () Bool)

(declare-fun e!62986 () List!1573)

(assert (=> b!96610 (= e!62986 call!9803)))

(declare-fun b!96612 () Bool)

(assert (=> b!96612 (= c!16317 (and ((_ is Cons!1569) (toList!779 lt!47829)) (bvsgt (_1!1172 (h!2162 (toList!779 lt!47829))) (_1!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(declare-fun e!62987 () List!1573)

(assert (=> b!96612 (= e!62987 e!62986)))

(declare-fun b!96613 () Bool)

(assert (=> b!96613 (= e!62987 call!9801)))

(declare-fun bm!9799 () Bool)

(declare-fun c!16319 () Bool)

(assert (=> bm!9799 (= call!9802 ($colon$colon!77 e!62983 (ite c!16319 (h!2162 (toList!779 lt!47829)) (tuple2!2323 (_1!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))))

(declare-fun c!16318 () Bool)

(assert (=> bm!9799 (= c!16318 c!16319)))

(declare-fun b!96614 () Bool)

(declare-fun res!48742 () Bool)

(declare-fun e!62984 () Bool)

(assert (=> b!96614 (=> (not res!48742) (not e!62984))))

(declare-fun lt!48330 () List!1573)

(assert (=> b!96614 (= res!48742 (containsKey!153 lt!48330 (_1!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun b!96615 () Bool)

(assert (=> b!96615 (= e!62983 (insertStrictlySorted!68 (t!5495 (toList!779 lt!47829)) (_1!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun bm!9800 () Bool)

(assert (=> bm!9800 (= call!9801 call!9802)))

(declare-fun d!25603 () Bool)

(assert (=> d!25603 e!62984))

(declare-fun res!48743 () Bool)

(assert (=> d!25603 (=> (not res!48743) (not e!62984))))

(assert (=> d!25603 (= res!48743 (isStrictlySorted!303 lt!48330))))

(assert (=> d!25603 (= lt!48330 e!62985)))

(assert (=> d!25603 (= c!16319 (and ((_ is Cons!1569) (toList!779 lt!47829)) (bvslt (_1!1172 (h!2162 (toList!779 lt!47829))) (_1!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(assert (=> d!25603 (isStrictlySorted!303 (toList!779 lt!47829))))

(assert (=> d!25603 (= (insertStrictlySorted!68 (toList!779 lt!47829) (_1!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!48330)))

(declare-fun b!96611 () Bool)

(assert (=> b!96611 (= e!62986 call!9803)))

(declare-fun b!96616 () Bool)

(assert (=> b!96616 (= e!62984 (contains!797 lt!48330 (tuple2!2323 (_1!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(declare-fun b!96617 () Bool)

(assert (=> b!96617 (= e!62985 e!62987)))

(assert (=> b!96617 (= c!16316 (and ((_ is Cons!1569) (toList!779 lt!47829)) (= (_1!1172 (h!2162 (toList!779 lt!47829))) (_1!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(assert (= (and d!25603 c!16319) b!96608))

(assert (= (and d!25603 (not c!16319)) b!96617))

(assert (= (and b!96617 c!16316) b!96613))

(assert (= (and b!96617 (not c!16316)) b!96612))

(assert (= (and b!96612 c!16317) b!96611))

(assert (= (and b!96612 (not c!16317)) b!96610))

(assert (= (or b!96611 b!96610) bm!9798))

(assert (= (or b!96613 bm!9798) bm!9800))

(assert (= (or b!96608 bm!9800) bm!9799))

(assert (= (and bm!9799 c!16318) b!96615))

(assert (= (and bm!9799 (not c!16318)) b!96609))

(assert (= (and d!25603 res!48743) b!96614))

(assert (= (and b!96614 res!48742) b!96616))

(declare-fun m!105239 () Bool)

(assert (=> b!96616 m!105239))

(declare-fun m!105241 () Bool)

(assert (=> b!96614 m!105241))

(declare-fun m!105243 () Bool)

(assert (=> bm!9799 m!105243))

(declare-fun m!105245 () Bool)

(assert (=> b!96615 m!105245))

(declare-fun m!105247 () Bool)

(assert (=> d!25603 m!105247))

(declare-fun m!105249 () Bool)

(assert (=> d!25603 m!105249))

(assert (=> d!25405 d!25603))

(assert (=> b!96205 d!25341))

(declare-fun d!25605 () Bool)

(declare-fun e!62988 () Bool)

(assert (=> d!25605 e!62988))

(declare-fun res!48744 () Bool)

(assert (=> d!25605 (=> (not res!48744) (not e!62988))))

(declare-fun lt!48333 () ListLongMap!1527)

(assert (=> d!25605 (= res!48744 (contains!794 lt!48333 (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!48332 () List!1573)

(assert (=> d!25605 (= lt!48333 (ListLongMap!1528 lt!48332))))

(declare-fun lt!48334 () Unit!2864)

(declare-fun lt!48331 () Unit!2864)

(assert (=> d!25605 (= lt!48334 lt!48331)))

(assert (=> d!25605 (= (getValueByKey!149 lt!48332 (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25605 (= lt!48331 (lemmaContainsTupThenGetReturnValue!65 lt!48332 (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25605 (= lt!48332 (insertStrictlySorted!68 (toList!779 call!9750) (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25605 (= (+!134 call!9750 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!48333)))

(declare-fun b!96618 () Bool)

(declare-fun res!48745 () Bool)

(assert (=> b!96618 (=> (not res!48745) (not e!62988))))

(assert (=> b!96618 (= res!48745 (= (getValueByKey!149 (toList!779 lt!48333) (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!96619 () Bool)

(assert (=> b!96619 (= e!62988 (contains!797 (toList!779 lt!48333) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!25605 res!48744) b!96618))

(assert (= (and b!96618 res!48745) b!96619))

(declare-fun m!105251 () Bool)

(assert (=> d!25605 m!105251))

(declare-fun m!105253 () Bool)

(assert (=> d!25605 m!105253))

(declare-fun m!105255 () Bool)

(assert (=> d!25605 m!105255))

(declare-fun m!105257 () Bool)

(assert (=> d!25605 m!105257))

(declare-fun m!105259 () Bool)

(assert (=> b!96618 m!105259))

(declare-fun m!105261 () Bool)

(assert (=> b!96619 m!105261))

(assert (=> b!96205 d!25605))

(declare-fun d!25607 () Bool)

(declare-fun e!62989 () Bool)

(assert (=> d!25607 e!62989))

(declare-fun res!48746 () Bool)

(assert (=> d!25607 (=> (not res!48746) (not e!62989))))

(declare-fun lt!48337 () ListLongMap!1527)

(assert (=> d!25607 (= res!48746 (contains!794 lt!48337 (_1!1172 (tuple2!2323 lt!48074 lt!48072))))))

(declare-fun lt!48336 () List!1573)

(assert (=> d!25607 (= lt!48337 (ListLongMap!1528 lt!48336))))

(declare-fun lt!48338 () Unit!2864)

(declare-fun lt!48335 () Unit!2864)

(assert (=> d!25607 (= lt!48338 lt!48335)))

(assert (=> d!25607 (= (getValueByKey!149 lt!48336 (_1!1172 (tuple2!2323 lt!48074 lt!48072))) (Some!154 (_2!1172 (tuple2!2323 lt!48074 lt!48072))))))

(assert (=> d!25607 (= lt!48335 (lemmaContainsTupThenGetReturnValue!65 lt!48336 (_1!1172 (tuple2!2323 lt!48074 lt!48072)) (_2!1172 (tuple2!2323 lt!48074 lt!48072))))))

(assert (=> d!25607 (= lt!48336 (insertStrictlySorted!68 (toList!779 lt!48071) (_1!1172 (tuple2!2323 lt!48074 lt!48072)) (_2!1172 (tuple2!2323 lt!48074 lt!48072))))))

(assert (=> d!25607 (= (+!134 lt!48071 (tuple2!2323 lt!48074 lt!48072)) lt!48337)))

(declare-fun b!96620 () Bool)

(declare-fun res!48747 () Bool)

(assert (=> b!96620 (=> (not res!48747) (not e!62989))))

(assert (=> b!96620 (= res!48747 (= (getValueByKey!149 (toList!779 lt!48337) (_1!1172 (tuple2!2323 lt!48074 lt!48072))) (Some!154 (_2!1172 (tuple2!2323 lt!48074 lt!48072)))))))

(declare-fun b!96621 () Bool)

(assert (=> b!96621 (= e!62989 (contains!797 (toList!779 lt!48337) (tuple2!2323 lt!48074 lt!48072)))))

(assert (= (and d!25607 res!48746) b!96620))

(assert (= (and b!96620 res!48747) b!96621))

(declare-fun m!105263 () Bool)

(assert (=> d!25607 m!105263))

(declare-fun m!105265 () Bool)

(assert (=> d!25607 m!105265))

(declare-fun m!105267 () Bool)

(assert (=> d!25607 m!105267))

(declare-fun m!105269 () Bool)

(assert (=> d!25607 m!105269))

(declare-fun m!105271 () Bool)

(assert (=> b!96620 m!105271))

(declare-fun m!105273 () Bool)

(assert (=> b!96621 m!105273))

(assert (=> b!96205 d!25607))

(declare-fun d!25609 () Bool)

(assert (=> d!25609 (not (contains!794 (+!134 lt!48071 (tuple2!2323 lt!48074 lt!48072)) lt!48070))))

(declare-fun lt!48341 () Unit!2864)

(declare-fun choose!584 (ListLongMap!1527 (_ BitVec 64) V!3139 (_ BitVec 64)) Unit!2864)

(assert (=> d!25609 (= lt!48341 (choose!584 lt!48071 lt!48074 lt!48072 lt!48070))))

(declare-fun e!62992 () Bool)

(assert (=> d!25609 e!62992))

(declare-fun res!48750 () Bool)

(assert (=> d!25609 (=> (not res!48750) (not e!62992))))

(assert (=> d!25609 (= res!48750 (not (contains!794 lt!48071 lt!48070)))))

(assert (=> d!25609 (= (addStillNotContains!39 lt!48071 lt!48074 lt!48072 lt!48070) lt!48341)))

(declare-fun b!96625 () Bool)

(assert (=> b!96625 (= e!62992 (not (= lt!48074 lt!48070)))))

(assert (= (and d!25609 res!48750) b!96625))

(assert (=> d!25609 m!104457))

(assert (=> d!25609 m!104457))

(assert (=> d!25609 m!104461))

(declare-fun m!105275 () Bool)

(assert (=> d!25609 m!105275))

(declare-fun m!105277 () Bool)

(assert (=> d!25609 m!105277))

(assert (=> b!96205 d!25609))

(declare-fun d!25611 () Bool)

(declare-fun e!62993 () Bool)

(assert (=> d!25611 e!62993))

(declare-fun res!48751 () Bool)

(assert (=> d!25611 (=> res!48751 e!62993)))

(declare-fun lt!48343 () Bool)

(assert (=> d!25611 (= res!48751 (not lt!48343))))

(declare-fun lt!48342 () Bool)

(assert (=> d!25611 (= lt!48343 lt!48342)))

(declare-fun lt!48344 () Unit!2864)

(declare-fun e!62994 () Unit!2864)

(assert (=> d!25611 (= lt!48344 e!62994)))

(declare-fun c!16320 () Bool)

(assert (=> d!25611 (= c!16320 lt!48342)))

(assert (=> d!25611 (= lt!48342 (containsKey!153 (toList!779 (+!134 lt!48071 (tuple2!2323 lt!48074 lt!48072))) lt!48070))))

(assert (=> d!25611 (= (contains!794 (+!134 lt!48071 (tuple2!2323 lt!48074 lt!48072)) lt!48070) lt!48343)))

(declare-fun b!96626 () Bool)

(declare-fun lt!48345 () Unit!2864)

(assert (=> b!96626 (= e!62994 lt!48345)))

(assert (=> b!96626 (= lt!48345 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 (+!134 lt!48071 (tuple2!2323 lt!48074 lt!48072))) lt!48070))))

(assert (=> b!96626 (isDefined!102 (getValueByKey!149 (toList!779 (+!134 lt!48071 (tuple2!2323 lt!48074 lt!48072))) lt!48070))))

(declare-fun b!96627 () Bool)

(declare-fun Unit!2902 () Unit!2864)

(assert (=> b!96627 (= e!62994 Unit!2902)))

(declare-fun b!96628 () Bool)

(assert (=> b!96628 (= e!62993 (isDefined!102 (getValueByKey!149 (toList!779 (+!134 lt!48071 (tuple2!2323 lt!48074 lt!48072))) lt!48070)))))

(assert (= (and d!25611 c!16320) b!96626))

(assert (= (and d!25611 (not c!16320)) b!96627))

(assert (= (and d!25611 (not res!48751)) b!96628))

(declare-fun m!105279 () Bool)

(assert (=> d!25611 m!105279))

(declare-fun m!105281 () Bool)

(assert (=> b!96626 m!105281))

(declare-fun m!105283 () Bool)

(assert (=> b!96626 m!105283))

(assert (=> b!96626 m!105283))

(declare-fun m!105285 () Bool)

(assert (=> b!96626 m!105285))

(assert (=> b!96628 m!105283))

(assert (=> b!96628 m!105283))

(assert (=> b!96628 m!105285))

(assert (=> b!96205 d!25611))

(declare-fun d!25613 () Bool)

(assert (=> d!25613 (= (inRange!0 (ite c!16229 (index!3150 lt!48160) (index!3153 lt!48160)) (mask!6542 newMap!16)) (and (bvsge (ite c!16229 (index!3150 lt!48160) (index!3153 lt!48160)) #b00000000000000000000000000000000) (bvslt (ite c!16229 (index!3150 lt!48160) (index!3153 lt!48160)) (bvadd (mask!6542 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!9764 d!25613))

(declare-fun d!25615 () Bool)

(declare-fun e!62995 () Bool)

(assert (=> d!25615 e!62995))

(declare-fun res!48752 () Bool)

(assert (=> d!25615 (=> res!48752 e!62995)))

(declare-fun lt!48347 () Bool)

(assert (=> d!25615 (= res!48752 (not lt!48347))))

(declare-fun lt!48346 () Bool)

(assert (=> d!25615 (= lt!48347 lt!48346)))

(declare-fun lt!48348 () Unit!2864)

(declare-fun e!62996 () Unit!2864)

(assert (=> d!25615 (= lt!48348 e!62996)))

(declare-fun c!16321 () Bool)

(assert (=> d!25615 (= c!16321 lt!48346)))

(assert (=> d!25615 (= lt!48346 (containsKey!153 (toList!779 lt!48040) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!25615 (= (contains!794 lt!48040 #b0000000000000000000000000000000000000000000000000000000000000000) lt!48347)))

(declare-fun b!96629 () Bool)

(declare-fun lt!48349 () Unit!2864)

(assert (=> b!96629 (= e!62996 lt!48349)))

(assert (=> b!96629 (= lt!48349 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 lt!48040) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!96629 (isDefined!102 (getValueByKey!149 (toList!779 lt!48040) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96630 () Bool)

(declare-fun Unit!2903 () Unit!2864)

(assert (=> b!96630 (= e!62996 Unit!2903)))

(declare-fun b!96631 () Bool)

(assert (=> b!96631 (= e!62995 (isDefined!102 (getValueByKey!149 (toList!779 lt!48040) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25615 c!16321) b!96629))

(assert (= (and d!25615 (not c!16321)) b!96630))

(assert (= (and d!25615 (not res!48752)) b!96631))

(declare-fun m!105287 () Bool)

(assert (=> d!25615 m!105287))

(declare-fun m!105289 () Bool)

(assert (=> b!96629 m!105289))

(declare-fun m!105291 () Bool)

(assert (=> b!96629 m!105291))

(assert (=> b!96629 m!105291))

(declare-fun m!105293 () Bool)

(assert (=> b!96629 m!105293))

(assert (=> b!96631 m!105291))

(assert (=> b!96631 m!105291))

(assert (=> b!96631 m!105293))

(assert (=> bm!9744 d!25615))

(declare-fun b!96632 () Bool)

(declare-fun e!62998 () (_ BitVec 32))

(assert (=> b!96632 (= e!62998 #b00000000000000000000000000000000)))

(declare-fun b!96633 () Bool)

(declare-fun e!62997 () (_ BitVec 32))

(assert (=> b!96633 (= e!62998 e!62997)))

(declare-fun c!16322 () Bool)

(assert (=> b!96633 (= c!16322 (validKeyInArray!0 (select (arr!2003 (_keys!4143 (_2!1173 lt!47744))) #b00000000000000000000000000000000)))))

(declare-fun b!96634 () Bool)

(declare-fun call!9804 () (_ BitVec 32))

(assert (=> b!96634 (= e!62997 call!9804)))

(declare-fun bm!9801 () Bool)

(assert (=> bm!9801 (= call!9804 (arrayCountValidKeys!0 (_keys!4143 (_2!1173 lt!47744)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2252 (_keys!4143 (_2!1173 lt!47744)))))))

(declare-fun b!96635 () Bool)

(assert (=> b!96635 (= e!62997 (bvadd #b00000000000000000000000000000001 call!9804))))

(declare-fun d!25617 () Bool)

(declare-fun lt!48350 () (_ BitVec 32))

(assert (=> d!25617 (and (bvsge lt!48350 #b00000000000000000000000000000000) (bvsle lt!48350 (bvsub (size!2252 (_keys!4143 (_2!1173 lt!47744))) #b00000000000000000000000000000000)))))

(assert (=> d!25617 (= lt!48350 e!62998)))

(declare-fun c!16323 () Bool)

(assert (=> d!25617 (= c!16323 (bvsge #b00000000000000000000000000000000 (size!2252 (_keys!4143 (_2!1173 lt!47744)))))))

(assert (=> d!25617 (and (bvsle #b00000000000000000000000000000000 (size!2252 (_keys!4143 (_2!1173 lt!47744)))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2252 (_keys!4143 (_2!1173 lt!47744))) (size!2252 (_keys!4143 (_2!1173 lt!47744)))))))

(assert (=> d!25617 (= (arrayCountValidKeys!0 (_keys!4143 (_2!1173 lt!47744)) #b00000000000000000000000000000000 (size!2252 (_keys!4143 (_2!1173 lt!47744)))) lt!48350)))

(assert (= (and d!25617 c!16323) b!96632))

(assert (= (and d!25617 (not c!16323)) b!96633))

(assert (= (and b!96633 c!16322) b!96635))

(assert (= (and b!96633 (not c!16322)) b!96634))

(assert (= (or b!96635 b!96634) bm!9801))

(declare-fun m!105295 () Bool)

(assert (=> b!96633 m!105295))

(assert (=> b!96633 m!105295))

(declare-fun m!105297 () Bool)

(assert (=> b!96633 m!105297))

(declare-fun m!105299 () Bool)

(assert (=> bm!9801 m!105299))

(assert (=> b!96028 d!25617))

(declare-fun d!25619 () Bool)

(declare-fun e!62999 () Bool)

(assert (=> d!25619 e!62999))

(declare-fun res!48753 () Bool)

(assert (=> d!25619 (=> (not res!48753) (not e!62999))))

(declare-fun lt!48353 () ListLongMap!1527)

(assert (=> d!25619 (= res!48753 (contains!794 lt!48353 (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(declare-fun lt!48352 () List!1573)

(assert (=> d!25619 (= lt!48353 (ListLongMap!1528 lt!48352))))

(declare-fun lt!48354 () Unit!2864)

(declare-fun lt!48351 () Unit!2864)

(assert (=> d!25619 (= lt!48354 lt!48351)))

(assert (=> d!25619 (= (getValueByKey!149 lt!48352 (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))) (Some!154 (_2!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(assert (=> d!25619 (= lt!48351 (lemmaContainsTupThenGetReturnValue!65 lt!48352 (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))) (_2!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(assert (=> d!25619 (= lt!48352 (insertStrictlySorted!68 (toList!779 call!9746) (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))) (_2!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(assert (=> d!25619 (= (+!134 call!9746 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))) lt!48353)))

(declare-fun b!96636 () Bool)

(declare-fun res!48754 () Bool)

(assert (=> b!96636 (=> (not res!48754) (not e!62999))))

(assert (=> b!96636 (= res!48754 (= (getValueByKey!149 (toList!779 lt!48353) (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))) (Some!154 (_2!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))))

(declare-fun b!96637 () Bool)

(assert (=> b!96637 (= e!62999 (contains!797 (toList!779 lt!48353) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))

(assert (= (and d!25619 res!48753) b!96636))

(assert (= (and b!96636 res!48754) b!96637))

(declare-fun m!105301 () Bool)

(assert (=> d!25619 m!105301))

(declare-fun m!105303 () Bool)

(assert (=> d!25619 m!105303))

(declare-fun m!105305 () Bool)

(assert (=> d!25619 m!105305))

(declare-fun m!105307 () Bool)

(assert (=> d!25619 m!105307))

(declare-fun m!105309 () Bool)

(assert (=> b!96636 m!105309))

(declare-fun m!105311 () Bool)

(assert (=> b!96637 m!105311))

(assert (=> b!96165 d!25619))

(declare-fun d!25621 () Bool)

(assert (=> d!25621 (isDefined!102 (getValueByKey!149 (toList!779 lt!47819) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun lt!48355 () Unit!2864)

(assert (=> d!25621 (= lt!48355 (choose!578 (toList!779 lt!47819) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun e!63000 () Bool)

(assert (=> d!25621 e!63000))

(declare-fun res!48755 () Bool)

(assert (=> d!25621 (=> (not res!48755) (not e!63000))))

(assert (=> d!25621 (= res!48755 (isStrictlySorted!303 (toList!779 lt!47819)))))

(assert (=> d!25621 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 lt!47819) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!48355)))

(declare-fun b!96638 () Bool)

(assert (=> b!96638 (= e!63000 (containsKey!153 (toList!779 lt!47819) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (= (and d!25621 res!48755) b!96638))

(assert (=> d!25621 m!104013))

(assert (=> d!25621 m!104185))

(assert (=> d!25621 m!104185))

(assert (=> d!25621 m!104187))

(assert (=> d!25621 m!104013))

(declare-fun m!105313 () Bool)

(assert (=> d!25621 m!105313))

(assert (=> d!25621 m!105039))

(assert (=> b!96638 m!104013))

(assert (=> b!96638 m!104181))

(assert (=> b!96025 d!25621))

(declare-fun d!25623 () Bool)

(assert (=> d!25623 (= (isDefined!102 (getValueByKey!149 (toList!779 lt!47819) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))) (not (isEmpty!353 (getValueByKey!149 (toList!779 lt!47819) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))))

(declare-fun bs!3984 () Bool)

(assert (= bs!3984 d!25623))

(assert (=> bs!3984 m!104185))

(declare-fun m!105315 () Bool)

(assert (=> bs!3984 m!105315))

(assert (=> b!96025 d!25623))

(assert (=> b!96025 d!25529))

(assert (=> d!25419 d!25287))

(declare-fun d!25625 () Bool)

(declare-fun res!48756 () Bool)

(declare-fun e!63001 () Bool)

(assert (=> d!25625 (=> res!48756 e!63001)))

(assert (=> d!25625 (= res!48756 (and ((_ is Cons!1569) (toList!779 call!9679)) (= (_1!1172 (h!2162 (toList!779 call!9679))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355))))))

(assert (=> d!25625 (= (containsKey!153 (toList!779 call!9679) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) e!63001)))

(declare-fun b!96639 () Bool)

(declare-fun e!63002 () Bool)

(assert (=> b!96639 (= e!63001 e!63002)))

(declare-fun res!48757 () Bool)

(assert (=> b!96639 (=> (not res!48757) (not e!63002))))

(assert (=> b!96639 (= res!48757 (and (or (not ((_ is Cons!1569) (toList!779 call!9679))) (bvsle (_1!1172 (h!2162 (toList!779 call!9679))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355))) ((_ is Cons!1569) (toList!779 call!9679)) (bvslt (_1!1172 (h!2162 (toList!779 call!9679))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355))))))

(declare-fun b!96640 () Bool)

(assert (=> b!96640 (= e!63002 (containsKey!153 (t!5495 (toList!779 call!9679)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(assert (= (and d!25625 (not res!48756)) b!96639))

(assert (= (and b!96639 res!48757) b!96640))

(assert (=> b!96640 m!103861))

(declare-fun m!105317 () Bool)

(assert (=> b!96640 m!105317))

(assert (=> d!25349 d!25625))

(declare-fun d!25627 () Bool)

(declare-fun res!48758 () Bool)

(declare-fun e!63003 () Bool)

(assert (=> d!25627 (=> res!48758 e!63003)))

(assert (=> d!25627 (= res!48758 (and ((_ is Cons!1569) (toList!779 lt!47819)) (= (_1!1172 (h!2162 (toList!779 lt!47819))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> d!25627 (= (containsKey!153 (toList!779 lt!47819) #b0000000000000000000000000000000000000000000000000000000000000000) e!63003)))

(declare-fun b!96641 () Bool)

(declare-fun e!63004 () Bool)

(assert (=> b!96641 (= e!63003 e!63004)))

(declare-fun res!48759 () Bool)

(assert (=> b!96641 (=> (not res!48759) (not e!63004))))

(assert (=> b!96641 (= res!48759 (and (or (not ((_ is Cons!1569) (toList!779 lt!47819))) (bvsle (_1!1172 (h!2162 (toList!779 lt!47819))) #b0000000000000000000000000000000000000000000000000000000000000000)) ((_ is Cons!1569) (toList!779 lt!47819)) (bvslt (_1!1172 (h!2162 (toList!779 lt!47819))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!96642 () Bool)

(assert (=> b!96642 (= e!63004 (containsKey!153 (t!5495 (toList!779 lt!47819)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!25627 (not res!48758)) b!96641))

(assert (= (and b!96641 res!48759) b!96642))

(declare-fun m!105319 () Bool)

(assert (=> b!96642 m!105319))

(assert (=> d!25351 d!25627))

(declare-fun d!25629 () Bool)

(assert (=> d!25629 (= (isDefined!102 (getValueByKey!149 (toList!779 call!9666) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355))) (not (isEmpty!353 (getValueByKey!149 (toList!779 call!9666) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))))

(declare-fun bs!3985 () Bool)

(assert (= bs!3985 d!25629))

(assert (=> bs!3985 m!104285))

(declare-fun m!105321 () Bool)

(assert (=> bs!3985 m!105321))

(assert (=> b!96074 d!25629))

(declare-fun b!96643 () Bool)

(declare-fun e!63005 () Option!155)

(assert (=> b!96643 (= e!63005 (Some!154 (_2!1172 (h!2162 (toList!779 call!9666)))))))

(declare-fun b!96646 () Bool)

(declare-fun e!63006 () Option!155)

(assert (=> b!96646 (= e!63006 None!153)))

(declare-fun c!16324 () Bool)

(declare-fun d!25631 () Bool)

(assert (=> d!25631 (= c!16324 (and ((_ is Cons!1569) (toList!779 call!9666)) (= (_1!1172 (h!2162 (toList!779 call!9666))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355))))))

(assert (=> d!25631 (= (getValueByKey!149 (toList!779 call!9666) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) e!63005)))

(declare-fun b!96645 () Bool)

(assert (=> b!96645 (= e!63006 (getValueByKey!149 (t!5495 (toList!779 call!9666)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(declare-fun b!96644 () Bool)

(assert (=> b!96644 (= e!63005 e!63006)))

(declare-fun c!16325 () Bool)

(assert (=> b!96644 (= c!16325 (and ((_ is Cons!1569) (toList!779 call!9666)) (not (= (_1!1172 (h!2162 (toList!779 call!9666))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))))

(assert (= (and d!25631 c!16324) b!96643))

(assert (= (and d!25631 (not c!16324)) b!96644))

(assert (= (and b!96644 c!16325) b!96645))

(assert (= (and b!96644 (not c!16325)) b!96646))

(assert (=> b!96645 m!103861))

(declare-fun m!105323 () Bool)

(assert (=> b!96645 m!105323))

(assert (=> b!96074 d!25631))

(declare-fun d!25633 () Bool)

(assert (=> d!25633 (= (apply!91 (+!134 lt!48093 (tuple2!2323 lt!48098 (zeroValue!2342 newMap!16))) lt!48088) (get!1273 (getValueByKey!149 (toList!779 (+!134 lt!48093 (tuple2!2323 lt!48098 (zeroValue!2342 newMap!16)))) lt!48088)))))

(declare-fun bs!3986 () Bool)

(assert (= bs!3986 d!25633))

(declare-fun m!105325 () Bool)

(assert (=> bs!3986 m!105325))

(assert (=> bs!3986 m!105325))

(declare-fun m!105327 () Bool)

(assert (=> bs!3986 m!105327))

(assert (=> b!96236 d!25633))

(declare-fun d!25635 () Bool)

(declare-fun e!63007 () Bool)

(assert (=> d!25635 e!63007))

(declare-fun res!48760 () Bool)

(assert (=> d!25635 (=> res!48760 e!63007)))

(declare-fun lt!48357 () Bool)

(assert (=> d!25635 (= res!48760 (not lt!48357))))

(declare-fun lt!48356 () Bool)

(assert (=> d!25635 (= lt!48357 lt!48356)))

(declare-fun lt!48358 () Unit!2864)

(declare-fun e!63008 () Unit!2864)

(assert (=> d!25635 (= lt!48358 e!63008)))

(declare-fun c!16326 () Bool)

(assert (=> d!25635 (= c!16326 lt!48356)))

(assert (=> d!25635 (= lt!48356 (containsKey!153 (toList!779 (+!134 lt!48101 (tuple2!2323 lt!48100 (zeroValue!2342 newMap!16)))) lt!48097))))

(assert (=> d!25635 (= (contains!794 (+!134 lt!48101 (tuple2!2323 lt!48100 (zeroValue!2342 newMap!16))) lt!48097) lt!48357)))

(declare-fun b!96647 () Bool)

(declare-fun lt!48359 () Unit!2864)

(assert (=> b!96647 (= e!63008 lt!48359)))

(assert (=> b!96647 (= lt!48359 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 (+!134 lt!48101 (tuple2!2323 lt!48100 (zeroValue!2342 newMap!16)))) lt!48097))))

(assert (=> b!96647 (isDefined!102 (getValueByKey!149 (toList!779 (+!134 lt!48101 (tuple2!2323 lt!48100 (zeroValue!2342 newMap!16)))) lt!48097))))

(declare-fun b!96648 () Bool)

(declare-fun Unit!2904 () Unit!2864)

(assert (=> b!96648 (= e!63008 Unit!2904)))

(declare-fun b!96649 () Bool)

(assert (=> b!96649 (= e!63007 (isDefined!102 (getValueByKey!149 (toList!779 (+!134 lt!48101 (tuple2!2323 lt!48100 (zeroValue!2342 newMap!16)))) lt!48097)))))

(assert (= (and d!25635 c!16326) b!96647))

(assert (= (and d!25635 (not c!16326)) b!96648))

(assert (= (and d!25635 (not res!48760)) b!96649))

(declare-fun m!105329 () Bool)

(assert (=> d!25635 m!105329))

(declare-fun m!105331 () Bool)

(assert (=> b!96647 m!105331))

(declare-fun m!105333 () Bool)

(assert (=> b!96647 m!105333))

(assert (=> b!96647 m!105333))

(declare-fun m!105335 () Bool)

(assert (=> b!96647 m!105335))

(assert (=> b!96649 m!105333))

(assert (=> b!96649 m!105333))

(assert (=> b!96649 m!105335))

(assert (=> b!96236 d!25635))

(declare-fun d!25637 () Bool)

(assert (=> d!25637 (= (apply!91 (+!134 lt!48093 (tuple2!2323 lt!48098 (zeroValue!2342 newMap!16))) lt!48088) (apply!91 lt!48093 lt!48088))))

(declare-fun lt!48360 () Unit!2864)

(assert (=> d!25637 (= lt!48360 (choose!580 lt!48093 lt!48098 (zeroValue!2342 newMap!16) lt!48088))))

(declare-fun e!63009 () Bool)

(assert (=> d!25637 e!63009))

(declare-fun res!48761 () Bool)

(assert (=> d!25637 (=> (not res!48761) (not e!63009))))

(assert (=> d!25637 (= res!48761 (contains!794 lt!48093 lt!48088))))

(assert (=> d!25637 (= (addApplyDifferent!67 lt!48093 lt!48098 (zeroValue!2342 newMap!16) lt!48088) lt!48360)))

(declare-fun b!96650 () Bool)

(assert (=> b!96650 (= e!63009 (not (= lt!48088 lt!48098)))))

(assert (= (and d!25637 res!48761) b!96650))

(declare-fun m!105337 () Bool)

(assert (=> d!25637 m!105337))

(assert (=> d!25637 m!104515))

(assert (=> d!25637 m!104525))

(declare-fun m!105339 () Bool)

(assert (=> d!25637 m!105339))

(assert (=> d!25637 m!104515))

(assert (=> d!25637 m!104517))

(assert (=> b!96236 d!25637))

(declare-fun d!25639 () Bool)

(assert (=> d!25639 (= (apply!91 lt!48093 lt!48088) (get!1273 (getValueByKey!149 (toList!779 lt!48093) lt!48088)))))

(declare-fun bs!3987 () Bool)

(assert (= bs!3987 d!25639))

(declare-fun m!105341 () Bool)

(assert (=> bs!3987 m!105341))

(assert (=> bs!3987 m!105341))

(declare-fun m!105343 () Bool)

(assert (=> bs!3987 m!105343))

(assert (=> b!96236 d!25639))

(declare-fun d!25641 () Bool)

(assert (=> d!25641 (= (apply!91 lt!48104 lt!48095) (get!1273 (getValueByKey!149 (toList!779 lt!48104) lt!48095)))))

(declare-fun bs!3988 () Bool)

(assert (= bs!3988 d!25641))

(declare-fun m!105345 () Bool)

(assert (=> bs!3988 m!105345))

(assert (=> bs!3988 m!105345))

(declare-fun m!105347 () Bool)

(assert (=> bs!3988 m!105347))

(assert (=> b!96236 d!25641))

(declare-fun b!96651 () Bool)

(declare-fun e!63011 () Bool)

(declare-fun lt!48367 () ListLongMap!1527)

(assert (=> b!96651 (= e!63011 (= lt!48367 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2457 newMap!16))))))

(declare-fun d!25643 () Bool)

(declare-fun e!63015 () Bool)

(assert (=> d!25643 e!63015))

(declare-fun res!48762 () Bool)

(assert (=> d!25643 (=> (not res!48762) (not e!63015))))

(assert (=> d!25643 (= res!48762 (not (contains!794 lt!48367 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!63013 () ListLongMap!1527)

(assert (=> d!25643 (= lt!48367 e!63013)))

(declare-fun c!16330 () Bool)

(assert (=> d!25643 (= c!16330 (bvsge #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(assert (=> d!25643 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25643 (= (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) lt!48367)))

(declare-fun b!96652 () Bool)

(declare-fun e!63016 () Bool)

(assert (=> b!96652 (= e!63016 (validKeyInArray!0 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!96652 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(declare-fun b!96653 () Bool)

(declare-fun lt!48366 () Unit!2864)

(declare-fun lt!48364 () Unit!2864)

(assert (=> b!96653 (= lt!48366 lt!48364)))

(declare-fun lt!48363 () V!3139)

(declare-fun lt!48365 () (_ BitVec 64))

(declare-fun lt!48362 () ListLongMap!1527)

(declare-fun lt!48361 () (_ BitVec 64))

(assert (=> b!96653 (not (contains!794 (+!134 lt!48362 (tuple2!2323 lt!48365 lt!48363)) lt!48361))))

(assert (=> b!96653 (= lt!48364 (addStillNotContains!39 lt!48362 lt!48365 lt!48363 lt!48361))))

(assert (=> b!96653 (= lt!48361 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!96653 (= lt!48363 (get!1269 (select (arr!2004 (_values!2440 newMap!16)) #b00000000000000000000000000000000) (dynLambda!364 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!96653 (= lt!48365 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun call!9805 () ListLongMap!1527)

(assert (=> b!96653 (= lt!48362 call!9805)))

(declare-fun e!63010 () ListLongMap!1527)

(assert (=> b!96653 (= e!63010 (+!134 call!9805 (tuple2!2323 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000) (get!1269 (select (arr!2004 (_values!2440 newMap!16)) #b00000000000000000000000000000000) (dynLambda!364 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun bm!9802 () Bool)

(assert (=> bm!9802 (= call!9805 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (defaultEntry!2457 newMap!16)))))

(declare-fun b!96654 () Bool)

(declare-fun e!63012 () Bool)

(assert (=> b!96654 (= e!63012 e!63011)))

(declare-fun c!16327 () Bool)

(assert (=> b!96654 (= c!16327 (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun b!96655 () Bool)

(assert (=> b!96655 (= e!63013 e!63010)))

(declare-fun c!16328 () Bool)

(assert (=> b!96655 (= c!16328 (validKeyInArray!0 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96656 () Bool)

(assert (=> b!96656 (= e!63010 call!9805)))

(declare-fun b!96657 () Bool)

(assert (=> b!96657 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(assert (=> b!96657 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (_values!2440 newMap!16))))))

(declare-fun e!63014 () Bool)

(assert (=> b!96657 (= e!63014 (= (apply!91 lt!48367 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) (get!1269 (select (arr!2004 (_values!2440 newMap!16)) #b00000000000000000000000000000000) (dynLambda!364 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!96658 () Bool)

(assert (=> b!96658 (= e!63013 (ListLongMap!1528 Nil!1570))))

(declare-fun b!96659 () Bool)

(assert (=> b!96659 (= e!63015 e!63012)))

(declare-fun c!16329 () Bool)

(assert (=> b!96659 (= c!16329 e!63016)))

(declare-fun res!48764 () Bool)

(assert (=> b!96659 (=> (not res!48764) (not e!63016))))

(assert (=> b!96659 (= res!48764 (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun b!96660 () Bool)

(assert (=> b!96660 (= e!63011 (isEmpty!354 lt!48367))))

(declare-fun b!96661 () Bool)

(declare-fun res!48763 () Bool)

(assert (=> b!96661 (=> (not res!48763) (not e!63015))))

(assert (=> b!96661 (= res!48763 (not (contains!794 lt!48367 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!96662 () Bool)

(assert (=> b!96662 (= e!63012 e!63014)))

(assert (=> b!96662 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun res!48765 () Bool)

(assert (=> b!96662 (= res!48765 (contains!794 lt!48367 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!96662 (=> (not res!48765) (not e!63014))))

(assert (= (and d!25643 c!16330) b!96658))

(assert (= (and d!25643 (not c!16330)) b!96655))

(assert (= (and b!96655 c!16328) b!96653))

(assert (= (and b!96655 (not c!16328)) b!96656))

(assert (= (or b!96653 b!96656) bm!9802))

(assert (= (and d!25643 res!48762) b!96661))

(assert (= (and b!96661 res!48763) b!96659))

(assert (= (and b!96659 res!48764) b!96652))

(assert (= (and b!96659 c!16329) b!96662))

(assert (= (and b!96659 (not c!16329)) b!96654))

(assert (= (and b!96662 res!48765) b!96657))

(assert (= (and b!96654 c!16327) b!96651))

(assert (= (and b!96654 (not c!16327)) b!96660))

(declare-fun b_lambda!4283 () Bool)

(assert (=> (not b_lambda!4283) (not b!96653)))

(assert (=> b!96653 t!5504))

(declare-fun b_and!5923 () Bool)

(assert (= b_and!5919 (and (=> t!5504 result!3229) b_and!5923)))

(assert (=> b!96653 t!5506))

(declare-fun b_and!5925 () Bool)

(assert (= b_and!5921 (and (=> t!5506 result!3231) b_and!5925)))

(declare-fun b_lambda!4285 () Bool)

(assert (=> (not b_lambda!4285) (not b!96657)))

(assert (=> b!96657 t!5504))

(declare-fun b_and!5927 () Bool)

(assert (= b_and!5923 (and (=> t!5504 result!3229) b_and!5927)))

(assert (=> b!96657 t!5506))

(declare-fun b_and!5929 () Bool)

(assert (= b_and!5925 (and (=> t!5506 result!3231) b_and!5929)))

(declare-fun m!105349 () Bool)

(assert (=> b!96660 m!105349))

(assert (=> b!96657 m!104117))

(assert (=> b!96657 m!104441))

(assert (=> b!96657 m!104273))

(assert (=> b!96657 m!104117))

(declare-fun m!105351 () Bool)

(assert (=> b!96657 m!105351))

(assert (=> b!96657 m!104441))

(assert (=> b!96657 m!104273))

(assert (=> b!96657 m!104443))

(declare-fun m!105353 () Bool)

(assert (=> b!96651 m!105353))

(assert (=> b!96655 m!104117))

(assert (=> b!96655 m!104117))

(assert (=> b!96655 m!104261))

(declare-fun m!105355 () Bool)

(assert (=> b!96653 m!105355))

(assert (=> b!96653 m!104441))

(declare-fun m!105357 () Bool)

(assert (=> b!96653 m!105357))

(assert (=> b!96653 m!104441))

(assert (=> b!96653 m!104273))

(assert (=> b!96653 m!104443))

(assert (=> b!96653 m!105355))

(declare-fun m!105359 () Bool)

(assert (=> b!96653 m!105359))

(assert (=> b!96653 m!104117))

(declare-fun m!105361 () Bool)

(assert (=> b!96653 m!105361))

(assert (=> b!96653 m!104273))

(declare-fun m!105363 () Bool)

(assert (=> b!96661 m!105363))

(assert (=> b!96652 m!104117))

(assert (=> b!96652 m!104117))

(assert (=> b!96652 m!104261))

(declare-fun m!105365 () Bool)

(assert (=> d!25643 m!105365))

(assert (=> d!25643 m!104095))

(assert (=> bm!9802 m!105353))

(assert (=> b!96662 m!104117))

(assert (=> b!96662 m!104117))

(declare-fun m!105367 () Bool)

(assert (=> b!96662 m!105367))

(assert (=> b!96236 d!25643))

(declare-fun d!25645 () Bool)

(declare-fun e!63017 () Bool)

(assert (=> d!25645 e!63017))

(declare-fun res!48766 () Bool)

(assert (=> d!25645 (=> (not res!48766) (not e!63017))))

(declare-fun lt!48370 () ListLongMap!1527)

(assert (=> d!25645 (= res!48766 (contains!794 lt!48370 (_1!1172 (tuple2!2323 lt!48107 (minValue!2342 newMap!16)))))))

(declare-fun lt!48369 () List!1573)

(assert (=> d!25645 (= lt!48370 (ListLongMap!1528 lt!48369))))

(declare-fun lt!48371 () Unit!2864)

(declare-fun lt!48368 () Unit!2864)

(assert (=> d!25645 (= lt!48371 lt!48368)))

(assert (=> d!25645 (= (getValueByKey!149 lt!48369 (_1!1172 (tuple2!2323 lt!48107 (minValue!2342 newMap!16)))) (Some!154 (_2!1172 (tuple2!2323 lt!48107 (minValue!2342 newMap!16)))))))

(assert (=> d!25645 (= lt!48368 (lemmaContainsTupThenGetReturnValue!65 lt!48369 (_1!1172 (tuple2!2323 lt!48107 (minValue!2342 newMap!16))) (_2!1172 (tuple2!2323 lt!48107 (minValue!2342 newMap!16)))))))

(assert (=> d!25645 (= lt!48369 (insertStrictlySorted!68 (toList!779 lt!48090) (_1!1172 (tuple2!2323 lt!48107 (minValue!2342 newMap!16))) (_2!1172 (tuple2!2323 lt!48107 (minValue!2342 newMap!16)))))))

(assert (=> d!25645 (= (+!134 lt!48090 (tuple2!2323 lt!48107 (minValue!2342 newMap!16))) lt!48370)))

(declare-fun b!96663 () Bool)

(declare-fun res!48767 () Bool)

(assert (=> b!96663 (=> (not res!48767) (not e!63017))))

(assert (=> b!96663 (= res!48767 (= (getValueByKey!149 (toList!779 lt!48370) (_1!1172 (tuple2!2323 lt!48107 (minValue!2342 newMap!16)))) (Some!154 (_2!1172 (tuple2!2323 lt!48107 (minValue!2342 newMap!16))))))))

(declare-fun b!96664 () Bool)

(assert (=> b!96664 (= e!63017 (contains!797 (toList!779 lt!48370) (tuple2!2323 lt!48107 (minValue!2342 newMap!16))))))

(assert (= (and d!25645 res!48766) b!96663))

(assert (= (and b!96663 res!48767) b!96664))

(declare-fun m!105369 () Bool)

(assert (=> d!25645 m!105369))

(declare-fun m!105371 () Bool)

(assert (=> d!25645 m!105371))

(declare-fun m!105373 () Bool)

(assert (=> d!25645 m!105373))

(declare-fun m!105375 () Bool)

(assert (=> d!25645 m!105375))

(declare-fun m!105377 () Bool)

(assert (=> b!96663 m!105377))

(declare-fun m!105379 () Bool)

(assert (=> b!96664 m!105379))

(assert (=> b!96236 d!25645))

(declare-fun d!25647 () Bool)

(assert (=> d!25647 (= (apply!91 lt!48090 lt!48103) (get!1273 (getValueByKey!149 (toList!779 lt!48090) lt!48103)))))

(declare-fun bs!3989 () Bool)

(assert (= bs!3989 d!25647))

(declare-fun m!105381 () Bool)

(assert (=> bs!3989 m!105381))

(assert (=> bs!3989 m!105381))

(declare-fun m!105383 () Bool)

(assert (=> bs!3989 m!105383))

(assert (=> b!96236 d!25647))

(declare-fun d!25649 () Bool)

(assert (=> d!25649 (= (apply!91 (+!134 lt!48104 (tuple2!2323 lt!48106 (minValue!2342 newMap!16))) lt!48095) (apply!91 lt!48104 lt!48095))))

(declare-fun lt!48372 () Unit!2864)

(assert (=> d!25649 (= lt!48372 (choose!580 lt!48104 lt!48106 (minValue!2342 newMap!16) lt!48095))))

(declare-fun e!63018 () Bool)

(assert (=> d!25649 e!63018))

(declare-fun res!48768 () Bool)

(assert (=> d!25649 (=> (not res!48768) (not e!63018))))

(assert (=> d!25649 (= res!48768 (contains!794 lt!48104 lt!48095))))

(assert (=> d!25649 (= (addApplyDifferent!67 lt!48104 lt!48106 (minValue!2342 newMap!16) lt!48095) lt!48372)))

(declare-fun b!96665 () Bool)

(assert (=> b!96665 (= e!63018 (not (= lt!48095 lt!48106)))))

(assert (= (and d!25649 res!48768) b!96665))

(declare-fun m!105385 () Bool)

(assert (=> d!25649 m!105385))

(assert (=> d!25649 m!104499))

(assert (=> d!25649 m!104521))

(declare-fun m!105387 () Bool)

(assert (=> d!25649 m!105387))

(assert (=> d!25649 m!104499))

(assert (=> d!25649 m!104523))

(assert (=> b!96236 d!25649))

(declare-fun d!25651 () Bool)

(declare-fun e!63019 () Bool)

(assert (=> d!25651 e!63019))

(declare-fun res!48769 () Bool)

(assert (=> d!25651 (=> (not res!48769) (not e!63019))))

(declare-fun lt!48375 () ListLongMap!1527)

(assert (=> d!25651 (= res!48769 (contains!794 lt!48375 (_1!1172 (tuple2!2323 lt!48106 (minValue!2342 newMap!16)))))))

(declare-fun lt!48374 () List!1573)

(assert (=> d!25651 (= lt!48375 (ListLongMap!1528 lt!48374))))

(declare-fun lt!48376 () Unit!2864)

(declare-fun lt!48373 () Unit!2864)

(assert (=> d!25651 (= lt!48376 lt!48373)))

(assert (=> d!25651 (= (getValueByKey!149 lt!48374 (_1!1172 (tuple2!2323 lt!48106 (minValue!2342 newMap!16)))) (Some!154 (_2!1172 (tuple2!2323 lt!48106 (minValue!2342 newMap!16)))))))

(assert (=> d!25651 (= lt!48373 (lemmaContainsTupThenGetReturnValue!65 lt!48374 (_1!1172 (tuple2!2323 lt!48106 (minValue!2342 newMap!16))) (_2!1172 (tuple2!2323 lt!48106 (minValue!2342 newMap!16)))))))

(assert (=> d!25651 (= lt!48374 (insertStrictlySorted!68 (toList!779 lt!48104) (_1!1172 (tuple2!2323 lt!48106 (minValue!2342 newMap!16))) (_2!1172 (tuple2!2323 lt!48106 (minValue!2342 newMap!16)))))))

(assert (=> d!25651 (= (+!134 lt!48104 (tuple2!2323 lt!48106 (minValue!2342 newMap!16))) lt!48375)))

(declare-fun b!96666 () Bool)

(declare-fun res!48770 () Bool)

(assert (=> b!96666 (=> (not res!48770) (not e!63019))))

(assert (=> b!96666 (= res!48770 (= (getValueByKey!149 (toList!779 lt!48375) (_1!1172 (tuple2!2323 lt!48106 (minValue!2342 newMap!16)))) (Some!154 (_2!1172 (tuple2!2323 lt!48106 (minValue!2342 newMap!16))))))))

(declare-fun b!96667 () Bool)

(assert (=> b!96667 (= e!63019 (contains!797 (toList!779 lt!48375) (tuple2!2323 lt!48106 (minValue!2342 newMap!16))))))

(assert (= (and d!25651 res!48769) b!96666))

(assert (= (and b!96666 res!48770) b!96667))

(declare-fun m!105389 () Bool)

(assert (=> d!25651 m!105389))

(declare-fun m!105391 () Bool)

(assert (=> d!25651 m!105391))

(declare-fun m!105393 () Bool)

(assert (=> d!25651 m!105393))

(declare-fun m!105395 () Bool)

(assert (=> d!25651 m!105395))

(declare-fun m!105397 () Bool)

(assert (=> b!96666 m!105397))

(declare-fun m!105399 () Bool)

(assert (=> b!96667 m!105399))

(assert (=> b!96236 d!25651))

(declare-fun d!25653 () Bool)

(declare-fun e!63020 () Bool)

(assert (=> d!25653 e!63020))

(declare-fun res!48771 () Bool)

(assert (=> d!25653 (=> (not res!48771) (not e!63020))))

(declare-fun lt!48379 () ListLongMap!1527)

(assert (=> d!25653 (= res!48771 (contains!794 lt!48379 (_1!1172 (tuple2!2323 lt!48098 (zeroValue!2342 newMap!16)))))))

(declare-fun lt!48378 () List!1573)

(assert (=> d!25653 (= lt!48379 (ListLongMap!1528 lt!48378))))

(declare-fun lt!48380 () Unit!2864)

(declare-fun lt!48377 () Unit!2864)

(assert (=> d!25653 (= lt!48380 lt!48377)))

(assert (=> d!25653 (= (getValueByKey!149 lt!48378 (_1!1172 (tuple2!2323 lt!48098 (zeroValue!2342 newMap!16)))) (Some!154 (_2!1172 (tuple2!2323 lt!48098 (zeroValue!2342 newMap!16)))))))

(assert (=> d!25653 (= lt!48377 (lemmaContainsTupThenGetReturnValue!65 lt!48378 (_1!1172 (tuple2!2323 lt!48098 (zeroValue!2342 newMap!16))) (_2!1172 (tuple2!2323 lt!48098 (zeroValue!2342 newMap!16)))))))

(assert (=> d!25653 (= lt!48378 (insertStrictlySorted!68 (toList!779 lt!48093) (_1!1172 (tuple2!2323 lt!48098 (zeroValue!2342 newMap!16))) (_2!1172 (tuple2!2323 lt!48098 (zeroValue!2342 newMap!16)))))))

(assert (=> d!25653 (= (+!134 lt!48093 (tuple2!2323 lt!48098 (zeroValue!2342 newMap!16))) lt!48379)))

(declare-fun b!96668 () Bool)

(declare-fun res!48772 () Bool)

(assert (=> b!96668 (=> (not res!48772) (not e!63020))))

(assert (=> b!96668 (= res!48772 (= (getValueByKey!149 (toList!779 lt!48379) (_1!1172 (tuple2!2323 lt!48098 (zeroValue!2342 newMap!16)))) (Some!154 (_2!1172 (tuple2!2323 lt!48098 (zeroValue!2342 newMap!16))))))))

(declare-fun b!96669 () Bool)

(assert (=> b!96669 (= e!63020 (contains!797 (toList!779 lt!48379) (tuple2!2323 lt!48098 (zeroValue!2342 newMap!16))))))

(assert (= (and d!25653 res!48771) b!96668))

(assert (= (and b!96668 res!48772) b!96669))

(declare-fun m!105401 () Bool)

(assert (=> d!25653 m!105401))

(declare-fun m!105403 () Bool)

(assert (=> d!25653 m!105403))

(declare-fun m!105405 () Bool)

(assert (=> d!25653 m!105405))

(declare-fun m!105407 () Bool)

(assert (=> d!25653 m!105407))

(declare-fun m!105409 () Bool)

(assert (=> b!96668 m!105409))

(declare-fun m!105411 () Bool)

(assert (=> b!96669 m!105411))

(assert (=> b!96236 d!25653))

(declare-fun d!25655 () Bool)

(assert (=> d!25655 (= (apply!91 (+!134 lt!48090 (tuple2!2323 lt!48107 (minValue!2342 newMap!16))) lt!48103) (apply!91 lt!48090 lt!48103))))

(declare-fun lt!48381 () Unit!2864)

(assert (=> d!25655 (= lt!48381 (choose!580 lt!48090 lt!48107 (minValue!2342 newMap!16) lt!48103))))

(declare-fun e!63021 () Bool)

(assert (=> d!25655 e!63021))

(declare-fun res!48773 () Bool)

(assert (=> d!25655 (=> (not res!48773) (not e!63021))))

(assert (=> d!25655 (= res!48773 (contains!794 lt!48090 lt!48103))))

(assert (=> d!25655 (= (addApplyDifferent!67 lt!48090 lt!48107 (minValue!2342 newMap!16) lt!48103) lt!48381)))

(declare-fun b!96670 () Bool)

(assert (=> b!96670 (= e!63021 (not (= lt!48103 lt!48107)))))

(assert (= (and d!25655 res!48773) b!96670))

(declare-fun m!105413 () Bool)

(assert (=> d!25655 m!105413))

(assert (=> d!25655 m!104509))

(assert (=> d!25655 m!104497))

(declare-fun m!105415 () Bool)

(assert (=> d!25655 m!105415))

(assert (=> d!25655 m!104509))

(assert (=> d!25655 m!104511))

(assert (=> b!96236 d!25655))

(declare-fun d!25657 () Bool)

(declare-fun e!63022 () Bool)

(assert (=> d!25657 e!63022))

(declare-fun res!48774 () Bool)

(assert (=> d!25657 (=> (not res!48774) (not e!63022))))

(declare-fun lt!48384 () ListLongMap!1527)

(assert (=> d!25657 (= res!48774 (contains!794 lt!48384 (_1!1172 (tuple2!2323 lt!48100 (zeroValue!2342 newMap!16)))))))

(declare-fun lt!48383 () List!1573)

(assert (=> d!25657 (= lt!48384 (ListLongMap!1528 lt!48383))))

(declare-fun lt!48385 () Unit!2864)

(declare-fun lt!48382 () Unit!2864)

(assert (=> d!25657 (= lt!48385 lt!48382)))

(assert (=> d!25657 (= (getValueByKey!149 lt!48383 (_1!1172 (tuple2!2323 lt!48100 (zeroValue!2342 newMap!16)))) (Some!154 (_2!1172 (tuple2!2323 lt!48100 (zeroValue!2342 newMap!16)))))))

(assert (=> d!25657 (= lt!48382 (lemmaContainsTupThenGetReturnValue!65 lt!48383 (_1!1172 (tuple2!2323 lt!48100 (zeroValue!2342 newMap!16))) (_2!1172 (tuple2!2323 lt!48100 (zeroValue!2342 newMap!16)))))))

(assert (=> d!25657 (= lt!48383 (insertStrictlySorted!68 (toList!779 lt!48101) (_1!1172 (tuple2!2323 lt!48100 (zeroValue!2342 newMap!16))) (_2!1172 (tuple2!2323 lt!48100 (zeroValue!2342 newMap!16)))))))

(assert (=> d!25657 (= (+!134 lt!48101 (tuple2!2323 lt!48100 (zeroValue!2342 newMap!16))) lt!48384)))

(declare-fun b!96671 () Bool)

(declare-fun res!48775 () Bool)

(assert (=> b!96671 (=> (not res!48775) (not e!63022))))

(assert (=> b!96671 (= res!48775 (= (getValueByKey!149 (toList!779 lt!48384) (_1!1172 (tuple2!2323 lt!48100 (zeroValue!2342 newMap!16)))) (Some!154 (_2!1172 (tuple2!2323 lt!48100 (zeroValue!2342 newMap!16))))))))

(declare-fun b!96672 () Bool)

(assert (=> b!96672 (= e!63022 (contains!797 (toList!779 lt!48384) (tuple2!2323 lt!48100 (zeroValue!2342 newMap!16))))))

(assert (= (and d!25657 res!48774) b!96671))

(assert (= (and b!96671 res!48775) b!96672))

(declare-fun m!105417 () Bool)

(assert (=> d!25657 m!105417))

(declare-fun m!105419 () Bool)

(assert (=> d!25657 m!105419))

(declare-fun m!105421 () Bool)

(assert (=> d!25657 m!105421))

(declare-fun m!105423 () Bool)

(assert (=> d!25657 m!105423))

(declare-fun m!105425 () Bool)

(assert (=> b!96671 m!105425))

(declare-fun m!105427 () Bool)

(assert (=> b!96672 m!105427))

(assert (=> b!96236 d!25657))

(declare-fun d!25659 () Bool)

(assert (=> d!25659 (contains!794 (+!134 lt!48101 (tuple2!2323 lt!48100 (zeroValue!2342 newMap!16))) lt!48097)))

(declare-fun lt!48386 () Unit!2864)

(assert (=> d!25659 (= lt!48386 (choose!581 lt!48101 lt!48100 (zeroValue!2342 newMap!16) lt!48097))))

(assert (=> d!25659 (contains!794 lt!48101 lt!48097)))

(assert (=> d!25659 (= (addStillContains!67 lt!48101 lt!48100 (zeroValue!2342 newMap!16) lt!48097) lt!48386)))

(declare-fun bs!3990 () Bool)

(assert (= bs!3990 d!25659))

(assert (=> bs!3990 m!104505))

(assert (=> bs!3990 m!104505))

(assert (=> bs!3990 m!104507))

(declare-fun m!105429 () Bool)

(assert (=> bs!3990 m!105429))

(declare-fun m!105431 () Bool)

(assert (=> bs!3990 m!105431))

(assert (=> b!96236 d!25659))

(declare-fun d!25661 () Bool)

(assert (=> d!25661 (= (apply!91 (+!134 lt!48090 (tuple2!2323 lt!48107 (minValue!2342 newMap!16))) lt!48103) (get!1273 (getValueByKey!149 (toList!779 (+!134 lt!48090 (tuple2!2323 lt!48107 (minValue!2342 newMap!16)))) lt!48103)))))

(declare-fun bs!3991 () Bool)

(assert (= bs!3991 d!25661))

(declare-fun m!105433 () Bool)

(assert (=> bs!3991 m!105433))

(assert (=> bs!3991 m!105433))

(declare-fun m!105435 () Bool)

(assert (=> bs!3991 m!105435))

(assert (=> b!96236 d!25661))

(declare-fun d!25663 () Bool)

(assert (=> d!25663 (= (apply!91 (+!134 lt!48104 (tuple2!2323 lt!48106 (minValue!2342 newMap!16))) lt!48095) (get!1273 (getValueByKey!149 (toList!779 (+!134 lt!48104 (tuple2!2323 lt!48106 (minValue!2342 newMap!16)))) lt!48095)))))

(declare-fun bs!3992 () Bool)

(assert (= bs!3992 d!25663))

(declare-fun m!105437 () Bool)

(assert (=> bs!3992 m!105437))

(assert (=> bs!3992 m!105437))

(declare-fun m!105439 () Bool)

(assert (=> bs!3992 m!105439))

(assert (=> b!96236 d!25663))

(declare-fun d!25665 () Bool)

(declare-fun res!48776 () Bool)

(declare-fun e!63023 () Bool)

(assert (=> d!25665 (=> res!48776 e!63023)))

(assert (=> d!25665 (= res!48776 (and ((_ is Cons!1569) (t!5495 (toList!779 lt!47639))) (= (_1!1172 (h!2162 (t!5495 (toList!779 lt!47639)))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355))))))

(assert (=> d!25665 (= (containsKey!153 (t!5495 (toList!779 lt!47639)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) e!63023)))

(declare-fun b!96673 () Bool)

(declare-fun e!63024 () Bool)

(assert (=> b!96673 (= e!63023 e!63024)))

(declare-fun res!48777 () Bool)

(assert (=> b!96673 (=> (not res!48777) (not e!63024))))

(assert (=> b!96673 (= res!48777 (and (or (not ((_ is Cons!1569) (t!5495 (toList!779 lt!47639)))) (bvsle (_1!1172 (h!2162 (t!5495 (toList!779 lt!47639)))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355))) ((_ is Cons!1569) (t!5495 (toList!779 lt!47639))) (bvslt (_1!1172 (h!2162 (t!5495 (toList!779 lt!47639)))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355))))))

(declare-fun b!96674 () Bool)

(assert (=> b!96674 (= e!63024 (containsKey!153 (t!5495 (t!5495 (toList!779 lt!47639))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(assert (= (and d!25665 (not res!48776)) b!96673))

(assert (= (and b!96673 res!48777) b!96674))

(assert (=> b!96674 m!103861))

(declare-fun m!105441 () Bool)

(assert (=> b!96674 m!105441))

(assert (=> b!96024 d!25665))

(assert (=> d!25359 d!25523))

(declare-fun d!25667 () Bool)

(assert (=> d!25667 (= (get!1272 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!96097 d!25667))

(declare-fun d!25669 () Bool)

(declare-fun e!63025 () Bool)

(assert (=> d!25669 e!63025))

(declare-fun res!48778 () Bool)

(assert (=> d!25669 (=> res!48778 e!63025)))

(declare-fun lt!48388 () Bool)

(assert (=> d!25669 (= res!48778 (not lt!48388))))

(declare-fun lt!48387 () Bool)

(assert (=> d!25669 (= lt!48388 lt!48387)))

(declare-fun lt!48389 () Unit!2864)

(declare-fun e!63026 () Unit!2864)

(assert (=> d!25669 (= lt!48389 e!63026)))

(declare-fun c!16331 () Bool)

(assert (=> d!25669 (= c!16331 lt!48387)))

(assert (=> d!25669 (= lt!48387 (containsKey!153 (toList!779 lt!47960) (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!25669 (= (contains!794 lt!47960 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) lt!48388)))

(declare-fun b!96675 () Bool)

(declare-fun lt!48390 () Unit!2864)

(assert (=> b!96675 (= e!63026 lt!48390)))

(assert (=> b!96675 (= lt!48390 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 lt!47960) (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!96675 (isDefined!102 (getValueByKey!149 (toList!779 lt!47960) (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96676 () Bool)

(declare-fun Unit!2905 () Unit!2864)

(assert (=> b!96676 (= e!63026 Unit!2905)))

(declare-fun b!96677 () Bool)

(assert (=> b!96677 (= e!63025 (isDefined!102 (getValueByKey!149 (toList!779 lt!47960) (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!25669 c!16331) b!96675))

(assert (= (and d!25669 (not c!16331)) b!96676))

(assert (= (and d!25669 (not res!48778)) b!96677))

(assert (=> d!25669 m!104117))

(declare-fun m!105443 () Bool)

(assert (=> d!25669 m!105443))

(assert (=> b!96675 m!104117))

(declare-fun m!105445 () Bool)

(assert (=> b!96675 m!105445))

(assert (=> b!96675 m!104117))

(declare-fun m!105447 () Bool)

(assert (=> b!96675 m!105447))

(assert (=> b!96675 m!105447))

(declare-fun m!105449 () Bool)

(assert (=> b!96675 m!105449))

(assert (=> b!96677 m!104117))

(assert (=> b!96677 m!105447))

(assert (=> b!96677 m!105447))

(assert (=> b!96677 m!105449))

(assert (=> b!96056 d!25669))

(declare-fun b!96678 () Bool)

(declare-fun e!63027 () Option!155)

(assert (=> b!96678 (= e!63027 (Some!154 (_2!1172 (h!2162 (toList!779 lt!48137)))))))

(declare-fun b!96681 () Bool)

(declare-fun e!63028 () Option!155)

(assert (=> b!96681 (= e!63028 None!153)))

(declare-fun c!16332 () Bool)

(declare-fun d!25671 () Bool)

(assert (=> d!25671 (= c!16332 (and ((_ is Cons!1569) (toList!779 lt!48137)) (= (_1!1172 (h!2162 (toList!779 lt!48137))) (_1!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(assert (=> d!25671 (= (getValueByKey!149 (toList!779 lt!48137) (_1!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) e!63027)))

(declare-fun b!96680 () Bool)

(assert (=> b!96680 (= e!63028 (getValueByKey!149 (t!5495 (toList!779 lt!48137)) (_1!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun b!96679 () Bool)

(assert (=> b!96679 (= e!63027 e!63028)))

(declare-fun c!16333 () Bool)

(assert (=> b!96679 (= c!16333 (and ((_ is Cons!1569) (toList!779 lt!48137)) (not (= (_1!1172 (h!2162 (toList!779 lt!48137))) (_1!1172 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))))

(assert (= (and d!25671 c!16332) b!96678))

(assert (= (and d!25671 (not c!16332)) b!96679))

(assert (= (and b!96679 c!16333) b!96680))

(assert (= (and b!96679 (not c!16333)) b!96681))

(declare-fun m!105451 () Bool)

(assert (=> b!96680 m!105451))

(assert (=> b!96277 d!25671))

(declare-fun d!25673 () Bool)

(declare-fun isEmpty!355 (List!1573) Bool)

(assert (=> d!25673 (= (isEmpty!354 lt!48076) (isEmpty!355 (toList!779 lt!48076)))))

(declare-fun bs!3993 () Bool)

(assert (= bs!3993 d!25673))

(declare-fun m!105453 () Bool)

(assert (=> bs!3993 m!105453))

(assert (=> b!96212 d!25673))

(declare-fun d!25675 () Bool)

(assert (=> d!25675 (= (content!99 Nil!1571) ((as const (Array (_ BitVec 64) Bool)) false))))

(assert (=> d!25347 d!25675))

(declare-fun b!96682 () Bool)

(declare-fun e!63029 () Option!155)

(assert (=> b!96682 (= e!63029 (Some!154 (_2!1172 (h!2162 (toList!779 lt!48125)))))))

(declare-fun b!96685 () Bool)

(declare-fun e!63030 () Option!155)

(assert (=> b!96685 (= e!63030 None!153)))

(declare-fun c!16334 () Bool)

(declare-fun d!25677 () Bool)

(assert (=> d!25677 (= c!16334 (and ((_ is Cons!1569) (toList!779 lt!48125)) (= (_1!1172 (h!2162 (toList!779 lt!48125))) (_1!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(assert (=> d!25677 (= (getValueByKey!149 (toList!779 lt!48125) (_1!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) e!63029)))

(declare-fun b!96684 () Bool)

(assert (=> b!96684 (= e!63030 (getValueByKey!149 (t!5495 (toList!779 lt!48125)) (_1!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun b!96683 () Bool)

(assert (=> b!96683 (= e!63029 e!63030)))

(declare-fun c!16335 () Bool)

(assert (=> b!96683 (= c!16335 (and ((_ is Cons!1569) (toList!779 lt!48125)) (not (= (_1!1172 (h!2162 (toList!779 lt!48125))) (_1!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))))

(assert (= (and d!25677 c!16334) b!96682))

(assert (= (and d!25677 (not c!16334)) b!96683))

(assert (= (and b!96683 c!16335) b!96684))

(assert (= (and b!96683 (not c!16335)) b!96685))

(declare-fun m!105455 () Bool)

(assert (=> b!96684 m!105455))

(assert (=> b!96268 d!25677))

(declare-fun d!25679 () Bool)

(assert (=> d!25679 (isDefined!102 (getValueByKey!149 (toList!779 call!9679) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(declare-fun lt!48391 () Unit!2864)

(assert (=> d!25679 (= lt!48391 (choose!578 (toList!779 call!9679) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(declare-fun e!63031 () Bool)

(assert (=> d!25679 e!63031))

(declare-fun res!48779 () Bool)

(assert (=> d!25679 (=> (not res!48779) (not e!63031))))

(assert (=> d!25679 (= res!48779 (isStrictlySorted!303 (toList!779 call!9679)))))

(assert (=> d!25679 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 call!9679) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) lt!48391)))

(declare-fun b!96686 () Bool)

(assert (=> b!96686 (= e!63031 (containsKey!153 (toList!779 call!9679) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(assert (= (and d!25679 res!48779) b!96686))

(assert (=> d!25679 m!103861))

(assert (=> d!25679 m!104379))

(assert (=> d!25679 m!104379))

(assert (=> d!25679 m!104381))

(assert (=> d!25679 m!103861))

(declare-fun m!105457 () Bool)

(assert (=> d!25679 m!105457))

(declare-fun m!105459 () Bool)

(assert (=> d!25679 m!105459))

(assert (=> b!96686 m!103861))

(assert (=> b!96686 m!104375))

(assert (=> b!96134 d!25679))

(declare-fun d!25681 () Bool)

(assert (=> d!25681 (= (isDefined!102 (getValueByKey!149 (toList!779 call!9679) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355))) (not (isEmpty!353 (getValueByKey!149 (toList!779 call!9679) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))))

(declare-fun bs!3994 () Bool)

(assert (= bs!3994 d!25681))

(assert (=> bs!3994 m!104379))

(declare-fun m!105461 () Bool)

(assert (=> bs!3994 m!105461))

(assert (=> b!96134 d!25681))

(declare-fun b!96687 () Bool)

(declare-fun e!63032 () Option!155)

(assert (=> b!96687 (= e!63032 (Some!154 (_2!1172 (h!2162 (toList!779 call!9679)))))))

(declare-fun b!96690 () Bool)

(declare-fun e!63033 () Option!155)

(assert (=> b!96690 (= e!63033 None!153)))

(declare-fun c!16336 () Bool)

(declare-fun d!25683 () Bool)

(assert (=> d!25683 (= c!16336 (and ((_ is Cons!1569) (toList!779 call!9679)) (= (_1!1172 (h!2162 (toList!779 call!9679))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355))))))

(assert (=> d!25683 (= (getValueByKey!149 (toList!779 call!9679) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) e!63032)))

(declare-fun b!96689 () Bool)

(assert (=> b!96689 (= e!63033 (getValueByKey!149 (t!5495 (toList!779 call!9679)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(declare-fun b!96688 () Bool)

(assert (=> b!96688 (= e!63032 e!63033)))

(declare-fun c!16337 () Bool)

(assert (=> b!96688 (= c!16337 (and ((_ is Cons!1569) (toList!779 call!9679)) (not (= (_1!1172 (h!2162 (toList!779 call!9679))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))))

(assert (= (and d!25683 c!16336) b!96687))

(assert (= (and d!25683 (not c!16336)) b!96688))

(assert (= (and b!96688 c!16337) b!96689))

(assert (= (and b!96688 (not c!16337)) b!96690))

(assert (=> b!96689 m!103861))

(declare-fun m!105463 () Bool)

(assert (=> b!96689 m!105463))

(assert (=> b!96134 d!25683))

(declare-fun d!25685 () Bool)

(assert (=> d!25685 (isDefined!102 (getValueByKey!149 (toList!779 lt!47819) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun lt!48392 () Unit!2864)

(assert (=> d!25685 (= lt!48392 (choose!578 (toList!779 lt!47819) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!63034 () Bool)

(assert (=> d!25685 e!63034))

(declare-fun res!48780 () Bool)

(assert (=> d!25685 (=> (not res!48780) (not e!63034))))

(assert (=> d!25685 (= res!48780 (isStrictlySorted!303 (toList!779 lt!47819)))))

(assert (=> d!25685 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 lt!47819) #b0000000000000000000000000000000000000000000000000000000000000000) lt!48392)))

(declare-fun b!96691 () Bool)

(assert (=> b!96691 (= e!63034 (containsKey!153 (toList!779 lt!47819) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!25685 res!48780) b!96691))

(assert (=> d!25685 m!104387))

(assert (=> d!25685 m!104387))

(assert (=> d!25685 m!104389))

(declare-fun m!105465 () Bool)

(assert (=> d!25685 m!105465))

(assert (=> d!25685 m!105039))

(assert (=> b!96691 m!104383))

(assert (=> b!96137 d!25685))

(declare-fun d!25687 () Bool)

(assert (=> d!25687 (= (isDefined!102 (getValueByKey!149 (toList!779 lt!47819) #b0000000000000000000000000000000000000000000000000000000000000000)) (not (isEmpty!353 (getValueByKey!149 (toList!779 lt!47819) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun bs!3995 () Bool)

(assert (= bs!3995 d!25687))

(assert (=> bs!3995 m!104387))

(declare-fun m!105467 () Bool)

(assert (=> bs!3995 m!105467))

(assert (=> b!96137 d!25687))

(assert (=> b!96137 d!25583))

(assert (=> d!25429 d!25343))

(declare-fun b!96708 () Bool)

(declare-fun e!63043 () Bool)

(declare-fun call!9810 () Bool)

(assert (=> b!96708 (= e!63043 (not call!9810))))

(declare-fun b!96709 () Bool)

(declare-fun res!48792 () Bool)

(declare-fun lt!48395 () SeekEntryResult!252)

(assert (=> b!96709 (= res!48792 (= (select (arr!2003 (_keys!4143 newMap!16)) (index!3150 lt!48395)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!96709 (=> (not res!48792) (not e!63043))))

(declare-fun b!96710 () Bool)

(declare-fun res!48790 () Bool)

(declare-fun e!63045 () Bool)

(assert (=> b!96710 (=> (not res!48790) (not e!63045))))

(declare-fun call!9811 () Bool)

(assert (=> b!96710 (= res!48790 call!9811)))

(declare-fun e!63046 () Bool)

(assert (=> b!96710 (= e!63046 e!63045)))

(declare-fun c!16342 () Bool)

(declare-fun bm!9807 () Bool)

(assert (=> bm!9807 (= call!9811 (inRange!0 (ite c!16342 (index!3150 lt!48395) (index!3153 lt!48395)) (mask!6542 newMap!16)))))

(declare-fun d!25689 () Bool)

(declare-fun e!63044 () Bool)

(assert (=> d!25689 e!63044))

(assert (=> d!25689 (= c!16342 ((_ is MissingZero!252) lt!48395))))

(assert (=> d!25689 (= lt!48395 (seekEntryOrOpen!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (_keys!4143 newMap!16) (mask!6542 newMap!16)))))

(assert (=> d!25689 true))

(declare-fun _$34!858 () Unit!2864)

(assert (=> d!25689 (= (choose!582 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (defaultEntry!2457 newMap!16)) _$34!858)))

(declare-fun b!96711 () Bool)

(assert (=> b!96711 (= e!63046 ((_ is Undefined!252) lt!48395))))

(declare-fun bm!9808 () Bool)

(assert (=> bm!9808 (= call!9810 (arrayContainsKey!0 (_keys!4143 newMap!16) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) #b00000000000000000000000000000000))))

(declare-fun b!96712 () Bool)

(assert (=> b!96712 (= e!63044 e!63046)))

(declare-fun c!16343 () Bool)

(assert (=> b!96712 (= c!16343 ((_ is MissingVacant!252) lt!48395))))

(declare-fun b!96713 () Bool)

(assert (=> b!96713 (= e!63044 e!63043)))

(declare-fun res!48789 () Bool)

(assert (=> b!96713 (= res!48789 call!9811)))

(assert (=> b!96713 (=> (not res!48789) (not e!63043))))

(declare-fun b!96714 () Bool)

(assert (=> b!96714 (= e!63045 (not call!9810))))

(declare-fun b!96715 () Bool)

(declare-fun res!48791 () Bool)

(assert (=> b!96715 (=> (not res!48791) (not e!63045))))

(assert (=> b!96715 (= res!48791 (= (select (arr!2003 (_keys!4143 newMap!16)) (index!3153 lt!48395)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (= (and d!25689 c!16342) b!96713))

(assert (= (and d!25689 (not c!16342)) b!96712))

(assert (= (and b!96713 res!48789) b!96709))

(assert (= (and b!96709 res!48792) b!96708))

(assert (= (and b!96712 c!16343) b!96710))

(assert (= (and b!96712 (not c!16343)) b!96711))

(assert (= (and b!96710 res!48790) b!96715))

(assert (= (and b!96715 res!48791) b!96714))

(assert (= (or b!96713 b!96710) bm!9807))

(assert (= (or b!96708 b!96714) bm!9808))

(declare-fun m!105469 () Bool)

(assert (=> b!96709 m!105469))

(declare-fun m!105471 () Bool)

(assert (=> b!96715 m!105471))

(assert (=> bm!9808 m!103861))

(assert (=> bm!9808 m!103979))

(assert (=> d!25689 m!103861))

(assert (=> d!25689 m!103981))

(declare-fun m!105473 () Bool)

(assert (=> bm!9807 m!105473))

(assert (=> d!25429 d!25689))

(assert (=> d!25429 d!25523))

(declare-fun d!25691 () Bool)

(declare-fun e!63047 () Bool)

(assert (=> d!25691 e!63047))

(declare-fun res!48793 () Bool)

(assert (=> d!25691 (=> res!48793 e!63047)))

(declare-fun lt!48397 () Bool)

(assert (=> d!25691 (= res!48793 (not lt!48397))))

(declare-fun lt!48396 () Bool)

(assert (=> d!25691 (= lt!48397 lt!48396)))

(declare-fun lt!48398 () Unit!2864)

(declare-fun e!63048 () Unit!2864)

(assert (=> d!25691 (= lt!48398 e!63048)))

(declare-fun c!16344 () Bool)

(assert (=> d!25691 (= c!16344 lt!48396)))

(assert (=> d!25691 (= lt!48396 (containsKey!153 (toList!779 lt!47960) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!25691 (= (contains!794 lt!47960 #b0000000000000000000000000000000000000000000000000000000000000000) lt!48397)))

(declare-fun b!96716 () Bool)

(declare-fun lt!48399 () Unit!2864)

(assert (=> b!96716 (= e!63048 lt!48399)))

(assert (=> b!96716 (= lt!48399 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 lt!47960) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!96716 (isDefined!102 (getValueByKey!149 (toList!779 lt!47960) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96717 () Bool)

(declare-fun Unit!2906 () Unit!2864)

(assert (=> b!96717 (= e!63048 Unit!2906)))

(declare-fun b!96718 () Bool)

(assert (=> b!96718 (= e!63047 (isDefined!102 (getValueByKey!149 (toList!779 lt!47960) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25691 c!16344) b!96716))

(assert (= (and d!25691 (not c!16344)) b!96717))

(assert (= (and d!25691 (not res!48793)) b!96718))

(declare-fun m!105475 () Bool)

(assert (=> d!25691 m!105475))

(declare-fun m!105477 () Bool)

(assert (=> b!96716 m!105477))

(declare-fun m!105479 () Bool)

(assert (=> b!96716 m!105479))

(assert (=> b!96716 m!105479))

(declare-fun m!105481 () Bool)

(assert (=> b!96716 m!105481))

(assert (=> b!96718 m!105479))

(assert (=> b!96718 m!105479))

(assert (=> b!96718 m!105481))

(assert (=> bm!9727 d!25691))

(declare-fun d!25693 () Bool)

(assert (=> d!25693 (= (apply!91 lt!48094 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) (get!1273 (getValueByKey!149 (toList!779 lt!48094) (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!3996 () Bool)

(assert (= bs!3996 d!25693))

(assert (=> bs!3996 m!104117))

(declare-fun m!105483 () Bool)

(assert (=> bs!3996 m!105483))

(assert (=> bs!3996 m!105483))

(declare-fun m!105485 () Bool)

(assert (=> bs!3996 m!105485))

(assert (=> b!96240 d!25693))

(declare-fun d!25695 () Bool)

(declare-fun c!16345 () Bool)

(assert (=> d!25695 (= c!16345 ((_ is ValueCellFull!966) (select (arr!2004 (_values!2440 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!63049 () V!3139)

(assert (=> d!25695 (= (get!1269 (select (arr!2004 (_values!2440 newMap!16)) #b00000000000000000000000000000000) (dynLambda!364 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!63049)))

(declare-fun b!96719 () Bool)

(assert (=> b!96719 (= e!63049 (get!1271 (select (arr!2004 (_values!2440 newMap!16)) #b00000000000000000000000000000000) (dynLambda!364 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!96720 () Bool)

(assert (=> b!96720 (= e!63049 (get!1272 (select (arr!2004 (_values!2440 newMap!16)) #b00000000000000000000000000000000) (dynLambda!364 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25695 c!16345) b!96719))

(assert (= (and d!25695 (not c!16345)) b!96720))

(assert (=> b!96719 m!104441))

(assert (=> b!96719 m!104273))

(declare-fun m!105487 () Bool)

(assert (=> b!96719 m!105487))

(assert (=> b!96720 m!104441))

(assert (=> b!96720 m!104273))

(declare-fun m!105489 () Bool)

(assert (=> b!96720 m!105489))

(assert (=> b!96240 d!25695))

(assert (=> b!96226 d!25543))

(assert (=> b!96017 d!25429))

(declare-fun d!25697 () Bool)

(declare-fun e!63050 () Bool)

(assert (=> d!25697 e!63050))

(declare-fun res!48794 () Bool)

(assert (=> d!25697 (=> res!48794 e!63050)))

(declare-fun lt!48401 () Bool)

(assert (=> d!25697 (= res!48794 (not lt!48401))))

(declare-fun lt!48400 () Bool)

(assert (=> d!25697 (= lt!48401 lt!48400)))

(declare-fun lt!48402 () Unit!2864)

(declare-fun e!63051 () Unit!2864)

(assert (=> d!25697 (= lt!48402 e!63051)))

(declare-fun c!16346 () Bool)

(assert (=> d!25697 (= c!16346 lt!48400)))

(assert (=> d!25697 (= lt!48400 (containsKey!153 (toList!779 (getCurrentListMap!470 (_keys!4143 newMap!16) lt!47748 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16))) (select (arr!2003 (_keys!4143 newMap!16)) (index!3151 lt!47759))))))

(assert (=> d!25697 (= (contains!794 (getCurrentListMap!470 (_keys!4143 newMap!16) lt!47748 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (select (arr!2003 (_keys!4143 newMap!16)) (index!3151 lt!47759))) lt!48401)))

(declare-fun b!96721 () Bool)

(declare-fun lt!48403 () Unit!2864)

(assert (=> b!96721 (= e!63051 lt!48403)))

(assert (=> b!96721 (= lt!48403 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 (getCurrentListMap!470 (_keys!4143 newMap!16) lt!47748 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16))) (select (arr!2003 (_keys!4143 newMap!16)) (index!3151 lt!47759))))))

(assert (=> b!96721 (isDefined!102 (getValueByKey!149 (toList!779 (getCurrentListMap!470 (_keys!4143 newMap!16) lt!47748 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16))) (select (arr!2003 (_keys!4143 newMap!16)) (index!3151 lt!47759))))))

(declare-fun b!96722 () Bool)

(declare-fun Unit!2907 () Unit!2864)

(assert (=> b!96722 (= e!63051 Unit!2907)))

(declare-fun b!96723 () Bool)

(assert (=> b!96723 (= e!63050 (isDefined!102 (getValueByKey!149 (toList!779 (getCurrentListMap!470 (_keys!4143 newMap!16) lt!47748 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16))) (select (arr!2003 (_keys!4143 newMap!16)) (index!3151 lt!47759)))))))

(assert (= (and d!25697 c!16346) b!96721))

(assert (= (and d!25697 (not c!16346)) b!96722))

(assert (= (and d!25697 (not res!48794)) b!96723))

(assert (=> d!25697 m!103989))

(declare-fun m!105491 () Bool)

(assert (=> d!25697 m!105491))

(assert (=> b!96721 m!103989))

(declare-fun m!105493 () Bool)

(assert (=> b!96721 m!105493))

(assert (=> b!96721 m!103989))

(declare-fun m!105495 () Bool)

(assert (=> b!96721 m!105495))

(assert (=> b!96721 m!105495))

(declare-fun m!105497 () Bool)

(assert (=> b!96721 m!105497))

(assert (=> b!96723 m!103989))

(assert (=> b!96723 m!105495))

(assert (=> b!96723 m!105495))

(assert (=> b!96723 m!105497))

(assert (=> b!96047 d!25697))

(declare-fun b!96724 () Bool)

(declare-fun res!48801 () Bool)

(declare-fun e!63061 () Bool)

(assert (=> b!96724 (=> (not res!48801) (not e!63061))))

(declare-fun e!63062 () Bool)

(assert (=> b!96724 (= res!48801 e!63062)))

(declare-fun c!16351 () Bool)

(assert (=> b!96724 (= c!16351 (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun d!25699 () Bool)

(assert (=> d!25699 e!63061))

(declare-fun res!48802 () Bool)

(assert (=> d!25699 (=> (not res!48802) (not e!63061))))

(assert (=> d!25699 (= res!48802 (or (bvsge #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))))

(declare-fun lt!48410 () ListLongMap!1527)

(declare-fun lt!48424 () ListLongMap!1527)

(assert (=> d!25699 (= lt!48410 lt!48424)))

(declare-fun lt!48418 () Unit!2864)

(declare-fun e!63059 () Unit!2864)

(assert (=> d!25699 (= lt!48418 e!63059)))

(declare-fun c!16347 () Bool)

(declare-fun e!63057 () Bool)

(assert (=> d!25699 (= c!16347 e!63057)))

(declare-fun res!48800 () Bool)

(assert (=> d!25699 (=> (not res!48800) (not e!63057))))

(assert (=> d!25699 (= res!48800 (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun e!63056 () ListLongMap!1527)

(assert (=> d!25699 (= lt!48424 e!63056)))

(declare-fun c!16348 () Bool)

(assert (=> d!25699 (= c!16348 (and (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!25699 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25699 (= (getCurrentListMap!470 (_keys!4143 newMap!16) lt!47748 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) lt!48410)))

(declare-fun bm!9809 () Bool)

(declare-fun call!9814 () ListLongMap!1527)

(declare-fun call!9815 () ListLongMap!1527)

(assert (=> bm!9809 (= call!9814 call!9815)))

(declare-fun bm!9810 () Bool)

(declare-fun call!9812 () ListLongMap!1527)

(declare-fun call!9817 () ListLongMap!1527)

(assert (=> bm!9810 (= call!9812 call!9817)))

(declare-fun b!96725 () Bool)

(declare-fun e!63052 () Bool)

(declare-fun call!9816 () Bool)

(assert (=> b!96725 (= e!63052 (not call!9816))))

(declare-fun bm!9811 () Bool)

(assert (=> bm!9811 (= call!9815 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) lt!47748 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun bm!9812 () Bool)

(declare-fun call!9813 () ListLongMap!1527)

(assert (=> bm!9812 (= call!9813 call!9814)))

(declare-fun b!96726 () Bool)

(assert (=> b!96726 (= e!63057 (validKeyInArray!0 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96727 () Bool)

(declare-fun e!63058 () Bool)

(assert (=> b!96727 (= e!63058 (validKeyInArray!0 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96728 () Bool)

(declare-fun e!63055 () Bool)

(assert (=> b!96728 (= e!63055 (= (apply!91 lt!48410 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2342 newMap!16)))))

(declare-fun b!96729 () Bool)

(declare-fun e!63053 () ListLongMap!1527)

(assert (=> b!96729 (= e!63053 call!9813)))

(declare-fun b!96730 () Bool)

(declare-fun call!9818 () Bool)

(assert (=> b!96730 (= e!63062 (not call!9818))))

(declare-fun b!96731 () Bool)

(assert (=> b!96731 (= e!63052 e!63055)))

(declare-fun res!48799 () Bool)

(assert (=> b!96731 (= res!48799 call!9816)))

(assert (=> b!96731 (=> (not res!48799) (not e!63055))))

(declare-fun bm!9813 () Bool)

(assert (=> bm!9813 (= call!9816 (contains!794 lt!48410 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96732 () Bool)

(declare-fun e!63060 () Bool)

(declare-fun e!63063 () Bool)

(assert (=> b!96732 (= e!63060 e!63063)))

(declare-fun res!48796 () Bool)

(assert (=> b!96732 (=> (not res!48796) (not e!63063))))

(assert (=> b!96732 (= res!48796 (contains!794 lt!48410 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!96732 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun bm!9814 () Bool)

(declare-fun c!16352 () Bool)

(assert (=> bm!9814 (= call!9817 (+!134 (ite c!16348 call!9815 (ite c!16352 call!9814 call!9813)) (ite (or c!16348 c!16352) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(declare-fun b!96733 () Bool)

(declare-fun e!63064 () Bool)

(assert (=> b!96733 (= e!63064 (= (apply!91 lt!48410 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2342 newMap!16)))))

(declare-fun b!96734 () Bool)

(assert (=> b!96734 (= e!63061 e!63052)))

(declare-fun c!16350 () Bool)

(assert (=> b!96734 (= c!16350 (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!96735 () Bool)

(declare-fun c!16349 () Bool)

(assert (=> b!96735 (= c!16349 (and (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!63054 () ListLongMap!1527)

(assert (=> b!96735 (= e!63054 e!63053)))

(declare-fun b!96736 () Bool)

(assert (=> b!96736 (= e!63053 call!9812)))

(declare-fun b!96737 () Bool)

(declare-fun lt!48412 () Unit!2864)

(assert (=> b!96737 (= e!63059 lt!48412)))

(declare-fun lt!48417 () ListLongMap!1527)

(assert (=> b!96737 (= lt!48417 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) lt!47748 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48416 () (_ BitVec 64))

(assert (=> b!96737 (= lt!48416 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48413 () (_ BitVec 64))

(assert (=> b!96737 (= lt!48413 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48408 () Unit!2864)

(assert (=> b!96737 (= lt!48408 (addStillContains!67 lt!48417 lt!48416 (zeroValue!2342 newMap!16) lt!48413))))

(assert (=> b!96737 (contains!794 (+!134 lt!48417 (tuple2!2323 lt!48416 (zeroValue!2342 newMap!16))) lt!48413)))

(declare-fun lt!48425 () Unit!2864)

(assert (=> b!96737 (= lt!48425 lt!48408)))

(declare-fun lt!48420 () ListLongMap!1527)

(assert (=> b!96737 (= lt!48420 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) lt!47748 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48422 () (_ BitVec 64))

(assert (=> b!96737 (= lt!48422 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48411 () (_ BitVec 64))

(assert (=> b!96737 (= lt!48411 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48421 () Unit!2864)

(assert (=> b!96737 (= lt!48421 (addApplyDifferent!67 lt!48420 lt!48422 (minValue!2342 newMap!16) lt!48411))))

(assert (=> b!96737 (= (apply!91 (+!134 lt!48420 (tuple2!2323 lt!48422 (minValue!2342 newMap!16))) lt!48411) (apply!91 lt!48420 lt!48411))))

(declare-fun lt!48405 () Unit!2864)

(assert (=> b!96737 (= lt!48405 lt!48421)))

(declare-fun lt!48409 () ListLongMap!1527)

(assert (=> b!96737 (= lt!48409 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) lt!47748 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48414 () (_ BitVec 64))

(assert (=> b!96737 (= lt!48414 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48404 () (_ BitVec 64))

(assert (=> b!96737 (= lt!48404 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun lt!48407 () Unit!2864)

(assert (=> b!96737 (= lt!48407 (addApplyDifferent!67 lt!48409 lt!48414 (zeroValue!2342 newMap!16) lt!48404))))

(assert (=> b!96737 (= (apply!91 (+!134 lt!48409 (tuple2!2323 lt!48414 (zeroValue!2342 newMap!16))) lt!48404) (apply!91 lt!48409 lt!48404))))

(declare-fun lt!48415 () Unit!2864)

(assert (=> b!96737 (= lt!48415 lt!48407)))

(declare-fun lt!48406 () ListLongMap!1527)

(assert (=> b!96737 (= lt!48406 (getCurrentListMapNoExtraKeys!99 (_keys!4143 newMap!16) lt!47748 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48423 () (_ BitVec 64))

(assert (=> b!96737 (= lt!48423 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48419 () (_ BitVec 64))

(assert (=> b!96737 (= lt!48419 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))

(assert (=> b!96737 (= lt!48412 (addApplyDifferent!67 lt!48406 lt!48423 (minValue!2342 newMap!16) lt!48419))))

(assert (=> b!96737 (= (apply!91 (+!134 lt!48406 (tuple2!2323 lt!48423 (minValue!2342 newMap!16))) lt!48419) (apply!91 lt!48406 lt!48419))))

(declare-fun b!96738 () Bool)

(assert (=> b!96738 (= e!63056 e!63054)))

(assert (=> b!96738 (= c!16352 (and (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!96739 () Bool)

(declare-fun res!48798 () Bool)

(assert (=> b!96739 (=> (not res!48798) (not e!63061))))

(assert (=> b!96739 (= res!48798 e!63060)))

(declare-fun res!48797 () Bool)

(assert (=> b!96739 (=> res!48797 e!63060)))

(assert (=> b!96739 (= res!48797 (not e!63058))))

(declare-fun res!48803 () Bool)

(assert (=> b!96739 (=> (not res!48803) (not e!63058))))

(assert (=> b!96739 (= res!48803 (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun bm!9815 () Bool)

(assert (=> bm!9815 (= call!9818 (contains!794 lt!48410 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96740 () Bool)

(assert (=> b!96740 (= e!63062 e!63064)))

(declare-fun res!48795 () Bool)

(assert (=> b!96740 (= res!48795 call!9818)))

(assert (=> b!96740 (=> (not res!48795) (not e!63064))))

(declare-fun b!96741 () Bool)

(assert (=> b!96741 (= e!63063 (= (apply!91 lt!48410 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) (get!1269 (select (arr!2004 lt!47748) #b00000000000000000000000000000000) (dynLambda!364 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!96741 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 lt!47748)))))

(assert (=> b!96741 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(declare-fun b!96742 () Bool)

(declare-fun Unit!2908 () Unit!2864)

(assert (=> b!96742 (= e!63059 Unit!2908)))

(declare-fun b!96743 () Bool)

(assert (=> b!96743 (= e!63056 (+!134 call!9817 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))

(declare-fun b!96744 () Bool)

(assert (=> b!96744 (= e!63054 call!9812)))

(assert (= (and d!25699 c!16348) b!96743))

(assert (= (and d!25699 (not c!16348)) b!96738))

(assert (= (and b!96738 c!16352) b!96744))

(assert (= (and b!96738 (not c!16352)) b!96735))

(assert (= (and b!96735 c!16349) b!96736))

(assert (= (and b!96735 (not c!16349)) b!96729))

(assert (= (or b!96736 b!96729) bm!9812))

(assert (= (or b!96744 bm!9812) bm!9809))

(assert (= (or b!96744 b!96736) bm!9810))

(assert (= (or b!96743 bm!9809) bm!9811))

(assert (= (or b!96743 bm!9810) bm!9814))

(assert (= (and d!25699 res!48800) b!96726))

(assert (= (and d!25699 c!16347) b!96737))

(assert (= (and d!25699 (not c!16347)) b!96742))

(assert (= (and d!25699 res!48802) b!96739))

(assert (= (and b!96739 res!48803) b!96727))

(assert (= (and b!96739 (not res!48797)) b!96732))

(assert (= (and b!96732 res!48796) b!96741))

(assert (= (and b!96739 res!48798) b!96724))

(assert (= (and b!96724 c!16351) b!96740))

(assert (= (and b!96724 (not c!16351)) b!96730))

(assert (= (and b!96740 res!48795) b!96733))

(assert (= (or b!96740 b!96730) bm!9815))

(assert (= (and b!96724 res!48801) b!96734))

(assert (= (and b!96734 c!16350) b!96731))

(assert (= (and b!96734 (not c!16350)) b!96725))

(assert (= (and b!96731 res!48799) b!96728))

(assert (= (or b!96731 b!96725) bm!9813))

(declare-fun b_lambda!4287 () Bool)

(assert (=> (not b_lambda!4287) (not b!96741)))

(assert (=> b!96741 t!5504))

(declare-fun b_and!5931 () Bool)

(assert (= b_and!5927 (and (=> t!5504 result!3229) b_and!5931)))

(assert (=> b!96741 t!5506))

(declare-fun b_and!5933 () Bool)

(assert (= b_and!5929 (and (=> t!5506 result!3231) b_and!5933)))

(declare-fun m!105499 () Bool)

(assert (=> bm!9814 m!105499))

(declare-fun m!105501 () Bool)

(assert (=> b!96733 m!105501))

(declare-fun m!105503 () Bool)

(assert (=> b!96737 m!105503))

(declare-fun m!105505 () Bool)

(assert (=> b!96737 m!105505))

(declare-fun m!105507 () Bool)

(assert (=> b!96737 m!105507))

(declare-fun m!105509 () Bool)

(assert (=> b!96737 m!105509))

(declare-fun m!105511 () Bool)

(assert (=> b!96737 m!105511))

(declare-fun m!105513 () Bool)

(assert (=> b!96737 m!105513))

(declare-fun m!105515 () Bool)

(assert (=> b!96737 m!105515))

(declare-fun m!105517 () Bool)

(assert (=> b!96737 m!105517))

(declare-fun m!105519 () Bool)

(assert (=> b!96737 m!105519))

(declare-fun m!105521 () Bool)

(assert (=> b!96737 m!105521))

(declare-fun m!105523 () Bool)

(assert (=> b!96737 m!105523))

(declare-fun m!105525 () Bool)

(assert (=> b!96737 m!105525))

(declare-fun m!105527 () Bool)

(assert (=> b!96737 m!105527))

(assert (=> b!96737 m!105505))

(declare-fun m!105529 () Bool)

(assert (=> b!96737 m!105529))

(assert (=> b!96737 m!105511))

(declare-fun m!105531 () Bool)

(assert (=> b!96737 m!105531))

(assert (=> b!96737 m!105515))

(declare-fun m!105533 () Bool)

(assert (=> b!96737 m!105533))

(assert (=> b!96737 m!104117))

(assert (=> b!96737 m!105521))

(assert (=> bm!9811 m!105533))

(assert (=> b!96732 m!104117))

(assert (=> b!96732 m!104117))

(declare-fun m!105535 () Bool)

(assert (=> b!96732 m!105535))

(assert (=> b!96727 m!104117))

(assert (=> b!96727 m!104117))

(assert (=> b!96727 m!104261))

(declare-fun m!105537 () Bool)

(assert (=> b!96743 m!105537))

(declare-fun m!105539 () Bool)

(assert (=> bm!9815 m!105539))

(declare-fun m!105541 () Bool)

(assert (=> b!96728 m!105541))

(declare-fun m!105543 () Bool)

(assert (=> bm!9813 m!105543))

(assert (=> b!96726 m!104117))

(assert (=> b!96726 m!104117))

(assert (=> b!96726 m!104261))

(declare-fun m!105545 () Bool)

(assert (=> b!96741 m!105545))

(assert (=> b!96741 m!104273))

(declare-fun m!105547 () Bool)

(assert (=> b!96741 m!105547))

(assert (=> b!96741 m!104117))

(assert (=> b!96741 m!104273))

(assert (=> b!96741 m!104117))

(declare-fun m!105549 () Bool)

(assert (=> b!96741 m!105549))

(assert (=> b!96741 m!105545))

(assert (=> d!25699 m!104095))

(assert (=> b!96047 d!25699))

(declare-fun d!25701 () Bool)

(declare-fun e!63065 () Bool)

(assert (=> d!25701 e!63065))

(declare-fun res!48804 () Bool)

(assert (=> d!25701 (=> (not res!48804) (not e!63065))))

(declare-fun lt!48428 () ListLongMap!1527)

(assert (=> d!25701 (= res!48804 (contains!794 lt!48428 (_1!1172 (ite (or c!16184 c!16188) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))))

(declare-fun lt!48427 () List!1573)

(assert (=> d!25701 (= lt!48428 (ListLongMap!1528 lt!48427))))

(declare-fun lt!48429 () Unit!2864)

(declare-fun lt!48426 () Unit!2864)

(assert (=> d!25701 (= lt!48429 lt!48426)))

(assert (=> d!25701 (= (getValueByKey!149 lt!48427 (_1!1172 (ite (or c!16184 c!16188) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))) (Some!154 (_2!1172 (ite (or c!16184 c!16188) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))))

(assert (=> d!25701 (= lt!48426 (lemmaContainsTupThenGetReturnValue!65 lt!48427 (_1!1172 (ite (or c!16184 c!16188) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))) (_2!1172 (ite (or c!16184 c!16188) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))))

(assert (=> d!25701 (= lt!48427 (insertStrictlySorted!68 (toList!779 (ite c!16184 call!9744 (ite c!16188 call!9743 call!9742))) (_1!1172 (ite (or c!16184 c!16188) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))) (_2!1172 (ite (or c!16184 c!16188) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))))

(assert (=> d!25701 (= (+!134 (ite c!16184 call!9744 (ite c!16188 call!9743 call!9742)) (ite (or c!16184 c!16188) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))) lt!48428)))

(declare-fun b!96745 () Bool)

(declare-fun res!48805 () Bool)

(assert (=> b!96745 (=> (not res!48805) (not e!63065))))

(assert (=> b!96745 (= res!48805 (= (getValueByKey!149 (toList!779 lt!48428) (_1!1172 (ite (or c!16184 c!16188) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))) (Some!154 (_2!1172 (ite (or c!16184 c!16188) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))))

(declare-fun b!96746 () Bool)

(assert (=> b!96746 (= e!63065 (contains!797 (toList!779 lt!48428) (ite (or c!16184 c!16188) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(assert (= (and d!25701 res!48804) b!96745))

(assert (= (and b!96745 res!48805) b!96746))

(declare-fun m!105551 () Bool)

(assert (=> d!25701 m!105551))

(declare-fun m!105553 () Bool)

(assert (=> d!25701 m!105553))

(declare-fun m!105555 () Bool)

(assert (=> d!25701 m!105555))

(declare-fun m!105557 () Bool)

(assert (=> d!25701 m!105557))

(declare-fun m!105559 () Bool)

(assert (=> b!96745 m!105559))

(declare-fun m!105561 () Bool)

(assert (=> b!96746 m!105561))

(assert (=> bm!9743 d!25701))

(declare-fun b!96747 () Bool)

(declare-fun e!63066 () Option!155)

(assert (=> b!96747 (= e!63066 (Some!154 (_2!1172 (h!2162 (toList!779 lt!48141)))))))

(declare-fun b!96750 () Bool)

(declare-fun e!63067 () Option!155)

(assert (=> b!96750 (= e!63067 None!153)))

(declare-fun d!25703 () Bool)

(declare-fun c!16353 () Bool)

(assert (=> d!25703 (= c!16353 (and ((_ is Cons!1569) (toList!779 lt!48141)) (= (_1!1172 (h!2162 (toList!779 lt!48141))) (_1!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(assert (=> d!25703 (= (getValueByKey!149 (toList!779 lt!48141) (_1!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))) e!63066)))

(declare-fun b!96749 () Bool)

(assert (=> b!96749 (= e!63067 (getValueByKey!149 (t!5495 (toList!779 lt!48141)) (_1!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun b!96748 () Bool)

(assert (=> b!96748 (= e!63066 e!63067)))

(declare-fun c!16354 () Bool)

(assert (=> b!96748 (= c!16354 (and ((_ is Cons!1569) (toList!779 lt!48141)) (not (= (_1!1172 (h!2162 (toList!779 lt!48141))) (_1!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))))))

(assert (= (and d!25703 c!16353) b!96747))

(assert (= (and d!25703 (not c!16353)) b!96748))

(assert (= (and b!96748 c!16354) b!96749))

(assert (= (and b!96748 (not c!16354)) b!96750))

(declare-fun m!105563 () Bool)

(assert (=> b!96749 m!105563))

(assert (=> b!96279 d!25703))

(declare-fun d!25705 () Bool)

(declare-fun e!63068 () Bool)

(assert (=> d!25705 e!63068))

(declare-fun res!48806 () Bool)

(assert (=> d!25705 (=> (not res!48806) (not e!63068))))

(declare-fun lt!48432 () ListLongMap!1527)

(assert (=> d!25705 (= res!48806 (contains!794 lt!48432 (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(declare-fun lt!48431 () List!1573)

(assert (=> d!25705 (= lt!48432 (ListLongMap!1528 lt!48431))))

(declare-fun lt!48433 () Unit!2864)

(declare-fun lt!48430 () Unit!2864)

(assert (=> d!25705 (= lt!48433 lt!48430)))

(assert (=> d!25705 (= (getValueByKey!149 lt!48431 (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))) (Some!154 (_2!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(assert (=> d!25705 (= lt!48430 (lemmaContainsTupThenGetReturnValue!65 lt!48431 (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))) (_2!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(assert (=> d!25705 (= lt!48431 (insertStrictlySorted!68 (toList!779 call!9729) (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))) (_2!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(assert (=> d!25705 (= (+!134 call!9729 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))) lt!48432)))

(declare-fun b!96751 () Bool)

(declare-fun res!48807 () Bool)

(assert (=> b!96751 (=> (not res!48807) (not e!63068))))

(assert (=> b!96751 (= res!48807 (= (getValueByKey!149 (toList!779 lt!48432) (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))) (Some!154 (_2!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))))

(declare-fun b!96752 () Bool)

(assert (=> b!96752 (= e!63068 (contains!797 (toList!779 lt!48432) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))

(assert (= (and d!25705 res!48806) b!96751))

(assert (= (and b!96751 res!48807) b!96752))

(declare-fun m!105565 () Bool)

(assert (=> d!25705 m!105565))

(declare-fun m!105567 () Bool)

(assert (=> d!25705 m!105567))

(declare-fun m!105569 () Bool)

(assert (=> d!25705 m!105569))

(declare-fun m!105571 () Bool)

(assert (=> d!25705 m!105571))

(declare-fun m!105573 () Bool)

(assert (=> b!96751 m!105573))

(declare-fun m!105575 () Bool)

(assert (=> b!96752 m!105575))

(assert (=> b!96067 d!25705))

(declare-fun d!25707 () Bool)

(assert (=> d!25707 (= (apply!91 lt!47989 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1273 (getValueByKey!149 (toList!779 lt!47989) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!3997 () Bool)

(assert (= bs!3997 d!25707))

(assert (=> bs!3997 m!105215))

(assert (=> bs!3997 m!105215))

(declare-fun m!105577 () Bool)

(assert (=> bs!3997 m!105577))

(assert (=> b!96079 d!25707))

(assert (=> d!25331 d!25523))

(declare-fun d!25709 () Bool)

(assert (not d!25709))

(assert (=> b!96133 d!25709))

(assert (=> b!96288 d!25543))

(declare-fun d!25711 () Bool)

(assert (=> d!25711 (arrayContainsKey!0 (_keys!4143 newMap!16) lt!48020 #b00000000000000000000000000000000)))

(declare-fun lt!48436 () Unit!2864)

(declare-fun choose!13 (array!4215 (_ BitVec 64) (_ BitVec 32)) Unit!2864)

(assert (=> d!25711 (= lt!48436 (choose!13 (_keys!4143 newMap!16) lt!48020 #b00000000000000000000000000000000))))

(assert (=> d!25711 (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000)))

(assert (=> d!25711 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4143 newMap!16) lt!48020 #b00000000000000000000000000000000) lt!48436)))

(declare-fun bs!3998 () Bool)

(assert (= bs!3998 d!25711))

(assert (=> bs!3998 m!104363))

(declare-fun m!105579 () Bool)

(assert (=> bs!3998 m!105579))

(assert (=> b!96125 d!25711))

(declare-fun d!25713 () Bool)

(declare-fun res!48808 () Bool)

(declare-fun e!63069 () Bool)

(assert (=> d!25713 (=> res!48808 e!63069)))

(assert (=> d!25713 (= res!48808 (= (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000) lt!48020))))

(assert (=> d!25713 (= (arrayContainsKey!0 (_keys!4143 newMap!16) lt!48020 #b00000000000000000000000000000000) e!63069)))

(declare-fun b!96753 () Bool)

(declare-fun e!63070 () Bool)

(assert (=> b!96753 (= e!63069 e!63070)))

(declare-fun res!48809 () Bool)

(assert (=> b!96753 (=> (not res!48809) (not e!63070))))

(assert (=> b!96753 (= res!48809 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2252 (_keys!4143 newMap!16))))))

(declare-fun b!96754 () Bool)

(assert (=> b!96754 (= e!63070 (arrayContainsKey!0 (_keys!4143 newMap!16) lt!48020 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!25713 (not res!48808)) b!96753))

(assert (= (and b!96753 res!48809) b!96754))

(assert (=> d!25713 m!104117))

(declare-fun m!105581 () Bool)

(assert (=> b!96754 m!105581))

(assert (=> b!96125 d!25713))

(declare-fun b!96755 () Bool)

(declare-fun c!16355 () Bool)

(declare-fun lt!48439 () (_ BitVec 64))

(assert (=> b!96755 (= c!16355 (= lt!48439 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun e!63071 () SeekEntryResult!252)

(declare-fun e!63073 () SeekEntryResult!252)

(assert (=> b!96755 (= e!63071 e!63073)))

(declare-fun b!96756 () Bool)

(declare-fun lt!48438 () SeekEntryResult!252)

(assert (=> b!96756 (= e!63071 (Found!252 (index!3152 lt!48438)))))

(declare-fun b!96757 () Bool)

(assert (=> b!96757 (= e!63073 (MissingZero!252 (index!3152 lt!48438)))))

(declare-fun b!96758 () Bool)

(declare-fun e!63072 () SeekEntryResult!252)

(assert (=> b!96758 (= e!63072 e!63071)))

(assert (=> b!96758 (= lt!48439 (select (arr!2003 (_keys!4143 newMap!16)) (index!3152 lt!48438)))))

(declare-fun c!16356 () Bool)

(assert (=> b!96758 (= c!16356 (= lt!48439 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96759 () Bool)

(assert (=> b!96759 (= e!63073 (seekKeyOrZeroReturnVacant!0 (x!12800 lt!48438) (index!3152 lt!48438) (index!3152 lt!48438) (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000) (_keys!4143 newMap!16) (mask!6542 newMap!16)))))

(declare-fun b!96760 () Bool)

(assert (=> b!96760 (= e!63072 Undefined!252)))

(declare-fun d!25715 () Bool)

(declare-fun lt!48437 () SeekEntryResult!252)

(assert (=> d!25715 (and (or ((_ is Undefined!252) lt!48437) (not ((_ is Found!252) lt!48437)) (and (bvsge (index!3151 lt!48437) #b00000000000000000000000000000000) (bvslt (index!3151 lt!48437) (size!2252 (_keys!4143 newMap!16))))) (or ((_ is Undefined!252) lt!48437) ((_ is Found!252) lt!48437) (not ((_ is MissingZero!252) lt!48437)) (and (bvsge (index!3150 lt!48437) #b00000000000000000000000000000000) (bvslt (index!3150 lt!48437) (size!2252 (_keys!4143 newMap!16))))) (or ((_ is Undefined!252) lt!48437) ((_ is Found!252) lt!48437) ((_ is MissingZero!252) lt!48437) (not ((_ is MissingVacant!252) lt!48437)) (and (bvsge (index!3153 lt!48437) #b00000000000000000000000000000000) (bvslt (index!3153 lt!48437) (size!2252 (_keys!4143 newMap!16))))) (or ((_ is Undefined!252) lt!48437) (ite ((_ is Found!252) lt!48437) (= (select (arr!2003 (_keys!4143 newMap!16)) (index!3151 lt!48437)) (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) (ite ((_ is MissingZero!252) lt!48437) (= (select (arr!2003 (_keys!4143 newMap!16)) (index!3150 lt!48437)) #b0000000000000000000000000000000000000000000000000000000000000000) (and ((_ is MissingVacant!252) lt!48437) (= (select (arr!2003 (_keys!4143 newMap!16)) (index!3153 lt!48437)) #b1000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25715 (= lt!48437 e!63072)))

(declare-fun c!16357 () Bool)

(assert (=> d!25715 (= c!16357 (and ((_ is Intermediate!252) lt!48438) (undefined!1064 lt!48438)))))

(assert (=> d!25715 (= lt!48438 (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000) (mask!6542 newMap!16)) (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000) (_keys!4143 newMap!16) (mask!6542 newMap!16)))))

(assert (=> d!25715 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25715 (= (seekEntryOrOpen!0 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000) (_keys!4143 newMap!16) (mask!6542 newMap!16)) lt!48437)))

(assert (= (and d!25715 c!16357) b!96760))

(assert (= (and d!25715 (not c!16357)) b!96758))

(assert (= (and b!96758 c!16356) b!96756))

(assert (= (and b!96758 (not c!16356)) b!96755))

(assert (= (and b!96755 c!16355) b!96757))

(assert (= (and b!96755 (not c!16355)) b!96759))

(declare-fun m!105583 () Bool)

(assert (=> b!96758 m!105583))

(assert (=> b!96759 m!104117))

(declare-fun m!105585 () Bool)

(assert (=> b!96759 m!105585))

(assert (=> d!25715 m!104095))

(declare-fun m!105587 () Bool)

(assert (=> d!25715 m!105587))

(declare-fun m!105589 () Bool)

(assert (=> d!25715 m!105589))

(assert (=> d!25715 m!104117))

(declare-fun m!105591 () Bool)

(assert (=> d!25715 m!105591))

(declare-fun m!105593 () Bool)

(assert (=> d!25715 m!105593))

(declare-fun m!105595 () Bool)

(assert (=> d!25715 m!105595))

(assert (=> d!25715 m!104117))

(assert (=> d!25715 m!105589))

(assert (=> b!96125 d!25715))

(assert (=> bm!9730 d!25475))

(declare-fun d!25717 () Bool)

(declare-fun e!63074 () Bool)

(assert (=> d!25717 e!63074))

(declare-fun res!48810 () Bool)

(assert (=> d!25717 (=> res!48810 e!63074)))

(declare-fun lt!48441 () Bool)

(assert (=> d!25717 (= res!48810 (not lt!48441))))

(declare-fun lt!48440 () Bool)

(assert (=> d!25717 (= lt!48441 lt!48440)))

(declare-fun lt!48442 () Unit!2864)

(declare-fun e!63075 () Unit!2864)

(assert (=> d!25717 (= lt!48442 e!63075)))

(declare-fun c!16358 () Bool)

(assert (=> d!25717 (= c!16358 lt!48440)))

(assert (=> d!25717 (= lt!48440 (containsKey!153 (toList!779 lt!48076) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!25717 (= (contains!794 lt!48076 #b0000000000000000000000000000000000000000000000000000000000000000) lt!48441)))

(declare-fun b!96761 () Bool)

(declare-fun lt!48443 () Unit!2864)

(assert (=> b!96761 (= e!63075 lt!48443)))

(assert (=> b!96761 (= lt!48443 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 lt!48076) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!96761 (isDefined!102 (getValueByKey!149 (toList!779 lt!48076) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96762 () Bool)

(declare-fun Unit!2909 () Unit!2864)

(assert (=> b!96762 (= e!63075 Unit!2909)))

(declare-fun b!96763 () Bool)

(assert (=> b!96763 (= e!63074 (isDefined!102 (getValueByKey!149 (toList!779 lt!48076) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25717 c!16358) b!96761))

(assert (= (and d!25717 (not c!16358)) b!96762))

(assert (= (and d!25717 (not res!48810)) b!96763))

(declare-fun m!105597 () Bool)

(assert (=> d!25717 m!105597))

(declare-fun m!105599 () Bool)

(assert (=> b!96761 m!105599))

(declare-fun m!105601 () Bool)

(assert (=> b!96761 m!105601))

(assert (=> b!96761 m!105601))

(declare-fun m!105603 () Bool)

(assert (=> b!96761 m!105603))

(assert (=> b!96763 m!105601))

(assert (=> b!96763 m!105601))

(assert (=> b!96763 m!105603))

(assert (=> d!25365 d!25717))

(assert (=> d!25365 d!25267))

(declare-fun d!25719 () Bool)

(assert (=> d!25719 (= (get!1273 (getValueByKey!149 (toList!779 (+!134 lt!47818 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!47813)) (v!2782 (getValueByKey!149 (toList!779 (+!134 lt!47818 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!47813)))))

(assert (=> d!25395 d!25719))

(declare-fun e!63076 () Option!155)

(declare-fun b!96764 () Bool)

(assert (=> b!96764 (= e!63076 (Some!154 (_2!1172 (h!2162 (toList!779 (+!134 lt!47818 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))))))))

(declare-fun b!96767 () Bool)

(declare-fun e!63077 () Option!155)

(assert (=> b!96767 (= e!63077 None!153)))

(declare-fun c!16359 () Bool)

(declare-fun d!25721 () Bool)

(assert (=> d!25721 (= c!16359 (and ((_ is Cons!1569) (toList!779 (+!134 lt!47818 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))) (= (_1!1172 (h!2162 (toList!779 (+!134 lt!47818 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))) lt!47813)))))

(assert (=> d!25721 (= (getValueByKey!149 (toList!779 (+!134 lt!47818 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!47813) e!63076)))

(declare-fun b!96766 () Bool)

(assert (=> b!96766 (= e!63077 (getValueByKey!149 (t!5495 (toList!779 (+!134 lt!47818 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))) lt!47813))))

(declare-fun b!96765 () Bool)

(assert (=> b!96765 (= e!63076 e!63077)))

(declare-fun c!16360 () Bool)

(assert (=> b!96765 (= c!16360 (and ((_ is Cons!1569) (toList!779 (+!134 lt!47818 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))) (not (= (_1!1172 (h!2162 (toList!779 (+!134 lt!47818 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))) lt!47813))))))

(assert (= (and d!25721 c!16359) b!96764))

(assert (= (and d!25721 (not c!16359)) b!96765))

(assert (= (and b!96765 c!16360) b!96766))

(assert (= (and b!96765 (not c!16360)) b!96767))

(declare-fun m!105605 () Bool)

(assert (=> b!96766 m!105605))

(assert (=> d!25395 d!25721))

(declare-fun d!25723 () Bool)

(declare-fun lt!48444 () Bool)

(assert (=> d!25723 (= lt!48444 (select (content!99 (ite c!16120 (Cons!1570 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) Nil!1571) Nil!1571)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun e!63079 () Bool)

(assert (=> d!25723 (= lt!48444 e!63079)))

(declare-fun res!48812 () Bool)

(assert (=> d!25723 (=> (not res!48812) (not e!63079))))

(assert (=> d!25723 (= res!48812 ((_ is Cons!1570) (ite c!16120 (Cons!1570 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) Nil!1571) Nil!1571)))))

(assert (=> d!25723 (= (contains!796 (ite c!16120 (Cons!1570 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) Nil!1571) Nil!1571) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))) lt!48444)))

(declare-fun b!96768 () Bool)

(declare-fun e!63078 () Bool)

(assert (=> b!96768 (= e!63079 e!63078)))

(declare-fun res!48811 () Bool)

(assert (=> b!96768 (=> res!48811 e!63078)))

(assert (=> b!96768 (= res!48811 (= (h!2163 (ite c!16120 (Cons!1570 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) Nil!1571) Nil!1571)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(declare-fun b!96769 () Bool)

(assert (=> b!96769 (= e!63078 (contains!796 (t!5496 (ite c!16120 (Cons!1570 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) Nil!1571) Nil!1571)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001))))))

(assert (= (and d!25723 res!48812) b!96768))

(assert (= (and b!96768 (not res!48811)) b!96769))

(declare-fun m!105607 () Bool)

(assert (=> d!25723 m!105607))

(assert (=> d!25723 m!104683))

(declare-fun m!105609 () Bool)

(assert (=> d!25723 m!105609))

(assert (=> b!96769 m!104683))

(declare-fun m!105611 () Bool)

(assert (=> b!96769 m!105611))

(assert (=> b!96297 d!25723))

(declare-fun lt!48451 () ListLongMap!1527)

(declare-fun b!96770 () Bool)

(declare-fun e!63081 () Bool)

(assert (=> b!96770 (= e!63081 (= lt!48451 (getCurrentListMapNoExtraKeys!99 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (_values!2440 (v!2778 (underlying!331 thiss!992))) (mask!6542 (v!2778 (underlying!331 thiss!992))) (extraKeys!2282 (v!2778 (underlying!331 thiss!992))) (zeroValue!2342 (v!2778 (underlying!331 thiss!992))) (minValue!2342 (v!2778 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))))))))

(declare-fun d!25725 () Bool)

(declare-fun e!63085 () Bool)

(assert (=> d!25725 e!63085))

(declare-fun res!48813 () Bool)

(assert (=> d!25725 (=> (not res!48813) (not e!63085))))

(assert (=> d!25725 (= res!48813 (not (contains!794 lt!48451 #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun e!63083 () ListLongMap!1527)

(assert (=> d!25725 (= lt!48451 e!63083)))

(declare-fun c!16364 () Bool)

(assert (=> d!25725 (= c!16364 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992))))))))

(assert (=> d!25725 (validMask!0 (mask!6542 (v!2778 (underlying!331 thiss!992))))))

(assert (=> d!25725 (= (getCurrentListMapNoExtraKeys!99 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (_values!2440 (v!2778 (underlying!331 thiss!992))) (mask!6542 (v!2778 (underlying!331 thiss!992))) (extraKeys!2282 (v!2778 (underlying!331 thiss!992))) (zeroValue!2342 (v!2778 (underlying!331 thiss!992))) (minValue!2342 (v!2778 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (defaultEntry!2457 (v!2778 (underlying!331 thiss!992)))) lt!48451)))

(declare-fun b!96771 () Bool)

(declare-fun e!63086 () Bool)

(assert (=> b!96771 (= e!63086 (validKeyInArray!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!96771 (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000)))

(declare-fun b!96772 () Bool)

(declare-fun lt!48450 () Unit!2864)

(declare-fun lt!48448 () Unit!2864)

(assert (=> b!96772 (= lt!48450 lt!48448)))

(declare-fun lt!48449 () (_ BitVec 64))

(declare-fun lt!48445 () (_ BitVec 64))

(declare-fun lt!48446 () ListLongMap!1527)

(declare-fun lt!48447 () V!3139)

(assert (=> b!96772 (not (contains!794 (+!134 lt!48446 (tuple2!2323 lt!48449 lt!48447)) lt!48445))))

(assert (=> b!96772 (= lt!48448 (addStillNotContains!39 lt!48446 lt!48449 lt!48447 lt!48445))))

(assert (=> b!96772 (= lt!48445 #b0000000000000000000000000000000000000000000000000000000000000000)))

(assert (=> b!96772 (= lt!48447 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (=> b!96772 (= lt!48449 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)))))

(declare-fun call!9819 () ListLongMap!1527)

(assert (=> b!96772 (= lt!48446 call!9819)))

(declare-fun e!63080 () ListLongMap!1527)

(assert (=> b!96772 (= e!63080 (+!134 call!9819 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(declare-fun bm!9816 () Bool)

(assert (=> bm!9816 (= call!9819 (getCurrentListMapNoExtraKeys!99 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (_values!2440 (v!2778 (underlying!331 thiss!992))) (mask!6542 (v!2778 (underlying!331 thiss!992))) (extraKeys!2282 (v!2778 (underlying!331 thiss!992))) (zeroValue!2342 (v!2778 (underlying!331 thiss!992))) (minValue!2342 (v!2778 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (defaultEntry!2457 (v!2778 (underlying!331 thiss!992)))))))

(declare-fun b!96773 () Bool)

(declare-fun e!63082 () Bool)

(assert (=> b!96773 (= e!63082 e!63081)))

(declare-fun c!16361 () Bool)

(assert (=> b!96773 (= c!16361 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992))))))))

(declare-fun b!96774 () Bool)

(assert (=> b!96774 (= e!63083 e!63080)))

(declare-fun c!16362 () Bool)

(assert (=> b!96774 (= c!16362 (validKeyInArray!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(declare-fun b!96775 () Bool)

(assert (=> b!96775 (= e!63080 call!9819)))

(declare-fun b!96776 () Bool)

(assert (=> b!96776 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992))))))))

(assert (=> b!96776 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2253 (_values!2440 (v!2778 (underlying!331 thiss!992))))))))

(declare-fun e!63084 () Bool)

(assert (=> b!96776 (= e!63084 (= (apply!91 lt!48451 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001)) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(declare-fun b!96777 () Bool)

(assert (=> b!96777 (= e!63083 (ListLongMap!1528 Nil!1570))))

(declare-fun b!96778 () Bool)

(assert (=> b!96778 (= e!63085 e!63082)))

(declare-fun c!16363 () Bool)

(assert (=> b!96778 (= c!16363 e!63086)))

(declare-fun res!48815 () Bool)

(assert (=> b!96778 (=> (not res!48815) (not e!63086))))

(assert (=> b!96778 (= res!48815 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992))))))))

(declare-fun b!96779 () Bool)

(assert (=> b!96779 (= e!63081 (isEmpty!354 lt!48451))))

(declare-fun b!96780 () Bool)

(declare-fun res!48814 () Bool)

(assert (=> b!96780 (=> (not res!48814) (not e!63085))))

(assert (=> b!96780 (= res!48814 (not (contains!794 lt!48451 #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!96781 () Bool)

(assert (=> b!96781 (= e!63082 e!63084)))

(assert (=> b!96781 (and (bvsge (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001) (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992))))))))

(declare-fun res!48816 () Bool)

(assert (=> b!96781 (= res!48816 (contains!794 lt!48451 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001))))))

(assert (=> b!96781 (=> (not res!48816) (not e!63084))))

(assert (= (and d!25725 c!16364) b!96777))

(assert (= (and d!25725 (not c!16364)) b!96774))

(assert (= (and b!96774 c!16362) b!96772))

(assert (= (and b!96774 (not c!16362)) b!96775))

(assert (= (or b!96772 b!96775) bm!9816))

(assert (= (and d!25725 res!48813) b!96780))

(assert (= (and b!96780 res!48814) b!96778))

(assert (= (and b!96778 res!48815) b!96771))

(assert (= (and b!96778 c!16363) b!96781))

(assert (= (and b!96778 (not c!16363)) b!96773))

(assert (= (and b!96781 res!48816) b!96776))

(assert (= (and b!96773 c!16361) b!96770))

(assert (= (and b!96773 (not c!16361)) b!96779))

(declare-fun b_lambda!4289 () Bool)

(assert (=> (not b_lambda!4289) (not b!96772)))

(assert (=> b!96772 t!5492))

(declare-fun b_and!5935 () Bool)

(assert (= b_and!5931 (and (=> t!5492 result!3215) b_and!5935)))

(assert (=> b!96772 t!5494))

(declare-fun b_and!5937 () Bool)

(assert (= b_and!5933 (and (=> t!5494 result!3219) b_and!5937)))

(declare-fun b_lambda!4291 () Bool)

(assert (=> (not b_lambda!4291) (not b!96776)))

(assert (=> b!96776 t!5492))

(declare-fun b_and!5939 () Bool)

(assert (= b_and!5935 (and (=> t!5492 result!3215) b_and!5939)))

(assert (=> b!96776 t!5494))

(declare-fun b_and!5941 () Bool)

(assert (= b_and!5937 (and (=> t!5494 result!3219) b_and!5941)))

(declare-fun m!105613 () Bool)

(assert (=> b!96779 m!105613))

(assert (=> b!96776 m!104663))

(declare-fun m!105615 () Bool)

(assert (=> b!96776 m!105615))

(assert (=> b!96776 m!103881))

(assert (=> b!96776 m!104663))

(declare-fun m!105617 () Bool)

(assert (=> b!96776 m!105617))

(assert (=> b!96776 m!105615))

(assert (=> b!96776 m!103881))

(declare-fun m!105619 () Bool)

(assert (=> b!96776 m!105619))

(declare-fun m!105621 () Bool)

(assert (=> b!96770 m!105621))

(assert (=> b!96774 m!104663))

(assert (=> b!96774 m!104663))

(declare-fun m!105623 () Bool)

(assert (=> b!96774 m!105623))

(declare-fun m!105625 () Bool)

(assert (=> b!96772 m!105625))

(assert (=> b!96772 m!105615))

(declare-fun m!105627 () Bool)

(assert (=> b!96772 m!105627))

(assert (=> b!96772 m!105615))

(assert (=> b!96772 m!103881))

(assert (=> b!96772 m!105619))

(assert (=> b!96772 m!105625))

(declare-fun m!105629 () Bool)

(assert (=> b!96772 m!105629))

(assert (=> b!96772 m!104663))

(declare-fun m!105631 () Bool)

(assert (=> b!96772 m!105631))

(assert (=> b!96772 m!103881))

(declare-fun m!105633 () Bool)

(assert (=> b!96780 m!105633))

(assert (=> b!96771 m!104663))

(assert (=> b!96771 m!104663))

(assert (=> b!96771 m!105623))

(declare-fun m!105635 () Bool)

(assert (=> d!25725 m!105635))

(assert (=> d!25725 m!103869))

(assert (=> bm!9816 m!105621))

(assert (=> b!96781 m!104663))

(assert (=> b!96781 m!104663))

(declare-fun m!105637 () Bool)

(assert (=> b!96781 m!105637))

(assert (=> bm!9747 d!25725))

(assert (=> d!25381 d!25343))

(declare-fun d!25727 () Bool)

(declare-fun e!63089 () Bool)

(assert (=> d!25727 e!63089))

(declare-fun res!48822 () Bool)

(assert (=> d!25727 (=> (not res!48822) (not e!63089))))

(declare-fun lt!48454 () SeekEntryResult!252)

(assert (=> d!25727 (= res!48822 ((_ is Found!252) lt!48454))))

(assert (=> d!25727 (= lt!48454 (seekEntryOrOpen!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (_keys!4143 newMap!16) (mask!6542 newMap!16)))))

(assert (=> d!25727 true))

(declare-fun _$33!78 () Unit!2864)

(assert (=> d!25727 (= (choose!579 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (defaultEntry!2457 newMap!16)) _$33!78)))

(declare-fun b!96786 () Bool)

(declare-fun res!48821 () Bool)

(assert (=> b!96786 (=> (not res!48821) (not e!63089))))

(assert (=> b!96786 (= res!48821 (inRange!0 (index!3151 lt!48454) (mask!6542 newMap!16)))))

(declare-fun b!96787 () Bool)

(assert (=> b!96787 (= e!63089 (= (select (arr!2003 (_keys!4143 newMap!16)) (index!3151 lt!48454)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(assert (= (and d!25727 res!48822) b!96786))

(assert (= (and b!96786 res!48821) b!96787))

(assert (=> d!25727 m!103861))

(assert (=> d!25727 m!103981))

(declare-fun m!105639 () Bool)

(assert (=> b!96786 m!105639))

(declare-fun m!105641 () Bool)

(assert (=> b!96787 m!105641))

(assert (=> d!25381 d!25727))

(assert (=> d!25381 d!25523))

(assert (=> b!96283 d!25577))

(assert (=> b!96283 d!25579))

(declare-fun d!25729 () Bool)

(declare-fun e!63090 () Bool)

(assert (=> d!25729 e!63090))

(declare-fun res!48823 () Bool)

(assert (=> d!25729 (=> res!48823 e!63090)))

(declare-fun lt!48456 () Bool)

(assert (=> d!25729 (= res!48823 (not lt!48456))))

(declare-fun lt!48455 () Bool)

(assert (=> d!25729 (= lt!48456 lt!48455)))

(declare-fun lt!48457 () Unit!2864)

(declare-fun e!63091 () Unit!2864)

(assert (=> d!25729 (= lt!48457 e!63091)))

(declare-fun c!16365 () Bool)

(assert (=> d!25729 (= c!16365 lt!48455)))

(assert (=> d!25729 (= lt!48455 (containsKey!153 (toList!779 lt!47989) (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!25729 (= (contains!794 lt!47989 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) lt!48456)))

(declare-fun b!96788 () Bool)

(declare-fun lt!48458 () Unit!2864)

(assert (=> b!96788 (= e!63091 lt!48458)))

(assert (=> b!96788 (= lt!48458 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 lt!47989) (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!96788 (isDefined!102 (getValueByKey!149 (toList!779 lt!47989) (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!96789 () Bool)

(declare-fun Unit!2910 () Unit!2864)

(assert (=> b!96789 (= e!63091 Unit!2910)))

(declare-fun b!96790 () Bool)

(assert (=> b!96790 (= e!63090 (isDefined!102 (getValueByKey!149 (toList!779 lt!47989) (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!25729 c!16365) b!96788))

(assert (= (and d!25729 (not c!16365)) b!96789))

(assert (= (and d!25729 (not res!48823)) b!96790))

(assert (=> d!25729 m!104117))

(declare-fun m!105643 () Bool)

(assert (=> d!25729 m!105643))

(assert (=> b!96788 m!104117))

(declare-fun m!105645 () Bool)

(assert (=> b!96788 m!105645))

(assert (=> b!96788 m!104117))

(assert (=> b!96788 m!105045))

(assert (=> b!96788 m!105045))

(declare-fun m!105647 () Bool)

(assert (=> b!96788 m!105647))

(assert (=> b!96790 m!104117))

(assert (=> b!96790 m!105045))

(assert (=> b!96790 m!105045))

(assert (=> b!96790 m!105647))

(assert (=> b!96083 d!25729))

(assert (=> bm!9719 d!25309))

(declare-fun d!25731 () Bool)

(declare-fun lt!48459 () Bool)

(assert (=> d!25731 (= lt!48459 (select (content!100 (toList!779 lt!47848)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))

(declare-fun e!63092 () Bool)

(assert (=> d!25731 (= lt!48459 e!63092)))

(declare-fun res!48824 () Bool)

(assert (=> d!25731 (=> (not res!48824) (not e!63092))))

(assert (=> d!25731 (= res!48824 ((_ is Cons!1569) (toList!779 lt!47848)))))

(assert (=> d!25731 (= (contains!797 (toList!779 lt!47848) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) lt!48459)))

(declare-fun b!96791 () Bool)

(declare-fun e!63093 () Bool)

(assert (=> b!96791 (= e!63092 e!63093)))

(declare-fun res!48825 () Bool)

(assert (=> b!96791 (=> res!48825 e!63093)))

(assert (=> b!96791 (= res!48825 (= (h!2162 (toList!779 lt!47848)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))

(declare-fun b!96792 () Bool)

(assert (=> b!96792 (= e!63093 (contains!797 (t!5495 (toList!779 lt!47848)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))

(assert (= (and d!25731 res!48824) b!96791))

(assert (= (and b!96791 (not res!48825)) b!96792))

(declare-fun m!105649 () Bool)

(assert (=> d!25731 m!105649))

(declare-fun m!105651 () Bool)

(assert (=> d!25731 m!105651))

(declare-fun m!105653 () Bool)

(assert (=> b!96792 m!105653))

(assert (=> b!95965 d!25731))

(declare-fun d!25733 () Bool)

(declare-fun e!63094 () Bool)

(assert (=> d!25733 e!63094))

(declare-fun res!48826 () Bool)

(assert (=> d!25733 (=> res!48826 e!63094)))

(declare-fun lt!48461 () Bool)

(assert (=> d!25733 (= res!48826 (not lt!48461))))

(declare-fun lt!48460 () Bool)

(assert (=> d!25733 (= lt!48461 lt!48460)))

(declare-fun lt!48462 () Unit!2864)

(declare-fun e!63095 () Unit!2864)

(assert (=> d!25733 (= lt!48462 e!63095)))

(declare-fun c!16366 () Bool)

(assert (=> d!25733 (= c!16366 lt!48460)))

(assert (=> d!25733 (= lt!48460 (containsKey!153 (toList!779 lt!48086) (_1!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(assert (=> d!25733 (= (contains!794 lt!48086 (_1!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))) lt!48461)))

(declare-fun b!96793 () Bool)

(declare-fun lt!48463 () Unit!2864)

(assert (=> b!96793 (= e!63095 lt!48463)))

(assert (=> b!96793 (= lt!48463 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 lt!48086) (_1!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(assert (=> b!96793 (isDefined!102 (getValueByKey!149 (toList!779 lt!48086) (_1!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(declare-fun b!96794 () Bool)

(declare-fun Unit!2911 () Unit!2864)

(assert (=> b!96794 (= e!63095 Unit!2911)))

(declare-fun b!96795 () Bool)

(assert (=> b!96795 (= e!63094 (isDefined!102 (getValueByKey!149 (toList!779 lt!48086) (_1!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))))

(assert (= (and d!25733 c!16366) b!96793))

(assert (= (and d!25733 (not c!16366)) b!96794))

(assert (= (and d!25733 (not res!48826)) b!96795))

(declare-fun m!105655 () Bool)

(assert (=> d!25733 m!105655))

(declare-fun m!105657 () Bool)

(assert (=> b!96793 m!105657))

(assert (=> b!96793 m!104489))

(assert (=> b!96793 m!104489))

(declare-fun m!105659 () Bool)

(assert (=> b!96793 m!105659))

(assert (=> b!96795 m!104489))

(assert (=> b!96795 m!104489))

(assert (=> b!96795 m!105659))

(assert (=> d!25371 d!25733))

(declare-fun b!96796 () Bool)

(declare-fun e!63096 () Option!155)

(assert (=> b!96796 (= e!63096 (Some!154 (_2!1172 (h!2162 lt!48085))))))

(declare-fun b!96799 () Bool)

(declare-fun e!63097 () Option!155)

(assert (=> b!96799 (= e!63097 None!153)))

(declare-fun d!25735 () Bool)

(declare-fun c!16367 () Bool)

(assert (=> d!25735 (= c!16367 (and ((_ is Cons!1569) lt!48085) (= (_1!1172 (h!2162 lt!48085)) (_1!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))))

(assert (=> d!25735 (= (getValueByKey!149 lt!48085 (_1!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))) e!63096)))

(declare-fun b!96798 () Bool)

(assert (=> b!96798 (= e!63097 (getValueByKey!149 (t!5495 lt!48085) (_1!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(declare-fun b!96797 () Bool)

(assert (=> b!96797 (= e!63096 e!63097)))

(declare-fun c!16368 () Bool)

(assert (=> b!96797 (= c!16368 (and ((_ is Cons!1569) lt!48085) (not (= (_1!1172 (h!2162 lt!48085)) (_1!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))))

(assert (= (and d!25735 c!16367) b!96796))

(assert (= (and d!25735 (not c!16367)) b!96797))

(assert (= (and b!96797 c!16368) b!96798))

(assert (= (and b!96797 (not c!16368)) b!96799))

(declare-fun m!105661 () Bool)

(assert (=> b!96798 m!105661))

(assert (=> d!25371 d!25735))

(declare-fun d!25737 () Bool)

(assert (=> d!25737 (= (getValueByKey!149 lt!48085 (_1!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))) (Some!154 (_2!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(declare-fun lt!48464 () Unit!2864)

(assert (=> d!25737 (= lt!48464 (choose!583 lt!48085 (_1!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) (_2!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(declare-fun e!63098 () Bool)

(assert (=> d!25737 e!63098))

(declare-fun res!48827 () Bool)

(assert (=> d!25737 (=> (not res!48827) (not e!63098))))

(assert (=> d!25737 (= res!48827 (isStrictlySorted!303 lt!48085))))

(assert (=> d!25737 (= (lemmaContainsTupThenGetReturnValue!65 lt!48085 (_1!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) (_2!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))) lt!48464)))

(declare-fun b!96800 () Bool)

(declare-fun res!48828 () Bool)

(assert (=> b!96800 (=> (not res!48828) (not e!63098))))

(assert (=> b!96800 (= res!48828 (containsKey!153 lt!48085 (_1!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(declare-fun b!96801 () Bool)

(assert (=> b!96801 (= e!63098 (contains!797 lt!48085 (tuple2!2323 (_1!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) (_2!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))))

(assert (= (and d!25737 res!48827) b!96800))

(assert (= (and b!96800 res!48828) b!96801))

(assert (=> d!25737 m!104483))

(declare-fun m!105663 () Bool)

(assert (=> d!25737 m!105663))

(declare-fun m!105665 () Bool)

(assert (=> d!25737 m!105665))

(declare-fun m!105667 () Bool)

(assert (=> b!96800 m!105667))

(declare-fun m!105669 () Bool)

(assert (=> b!96801 m!105669))

(assert (=> d!25371 d!25737))

(declare-fun b!96802 () Bool)

(declare-fun e!63101 () List!1573)

(declare-fun call!9821 () List!1573)

(assert (=> b!96802 (= e!63101 call!9821)))

(declare-fun c!16370 () Bool)

(declare-fun b!96803 () Bool)

(declare-fun c!16369 () Bool)

(declare-fun e!63099 () List!1573)

(assert (=> b!96803 (= e!63099 (ite c!16369 (t!5495 (toList!779 (ite c!16134 call!9708 (ite c!16138 call!9707 call!9706)))) (ite c!16370 (Cons!1569 (h!2162 (toList!779 (ite c!16134 call!9708 (ite c!16138 call!9707 call!9706)))) (t!5495 (toList!779 (ite c!16134 call!9708 (ite c!16138 call!9707 call!9706))))) Nil!1570)))))

(declare-fun bm!9817 () Bool)

(declare-fun call!9822 () List!1573)

(declare-fun call!9820 () List!1573)

(assert (=> bm!9817 (= call!9822 call!9820)))

(declare-fun b!96804 () Bool)

(declare-fun e!63102 () List!1573)

(assert (=> b!96804 (= e!63102 call!9822)))

(declare-fun b!96806 () Bool)

(assert (=> b!96806 (= c!16370 (and ((_ is Cons!1569) (toList!779 (ite c!16134 call!9708 (ite c!16138 call!9707 call!9706)))) (bvsgt (_1!1172 (h!2162 (toList!779 (ite c!16134 call!9708 (ite c!16138 call!9707 call!9706))))) (_1!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))))

(declare-fun e!63103 () List!1573)

(assert (=> b!96806 (= e!63103 e!63102)))

(declare-fun b!96807 () Bool)

(assert (=> b!96807 (= e!63103 call!9820)))

(declare-fun bm!9818 () Bool)

(declare-fun c!16372 () Bool)

(assert (=> bm!9818 (= call!9821 ($colon$colon!77 e!63099 (ite c!16372 (h!2162 (toList!779 (ite c!16134 call!9708 (ite c!16138 call!9707 call!9706)))) (tuple2!2323 (_1!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) (_2!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))))

(declare-fun c!16371 () Bool)

(assert (=> bm!9818 (= c!16371 c!16372)))

(declare-fun b!96808 () Bool)

(declare-fun res!48829 () Bool)

(declare-fun e!63100 () Bool)

(assert (=> b!96808 (=> (not res!48829) (not e!63100))))

(declare-fun lt!48465 () List!1573)

(assert (=> b!96808 (= res!48829 (containsKey!153 lt!48465 (_1!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(declare-fun b!96809 () Bool)

(assert (=> b!96809 (= e!63099 (insertStrictlySorted!68 (t!5495 (toList!779 (ite c!16134 call!9708 (ite c!16138 call!9707 call!9706)))) (_1!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) (_2!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(declare-fun bm!9819 () Bool)

(assert (=> bm!9819 (= call!9820 call!9821)))

(declare-fun d!25739 () Bool)

(assert (=> d!25739 e!63100))

(declare-fun res!48830 () Bool)

(assert (=> d!25739 (=> (not res!48830) (not e!63100))))

(assert (=> d!25739 (= res!48830 (isStrictlySorted!303 lt!48465))))

(assert (=> d!25739 (= lt!48465 e!63101)))

(assert (=> d!25739 (= c!16372 (and ((_ is Cons!1569) (toList!779 (ite c!16134 call!9708 (ite c!16138 call!9707 call!9706)))) (bvslt (_1!1172 (h!2162 (toList!779 (ite c!16134 call!9708 (ite c!16138 call!9707 call!9706))))) (_1!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))))

(assert (=> d!25739 (isStrictlySorted!303 (toList!779 (ite c!16134 call!9708 (ite c!16138 call!9707 call!9706))))))

(assert (=> d!25739 (= (insertStrictlySorted!68 (toList!779 (ite c!16134 call!9708 (ite c!16138 call!9707 call!9706))) (_1!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) (_2!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))) lt!48465)))

(declare-fun b!96805 () Bool)

(assert (=> b!96805 (= e!63102 call!9822)))

(declare-fun b!96810 () Bool)

(assert (=> b!96810 (= e!63100 (contains!797 lt!48465 (tuple2!2323 (_1!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) (_2!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))))

(declare-fun b!96811 () Bool)

(assert (=> b!96811 (= e!63101 e!63103)))

(assert (=> b!96811 (= c!16369 (and ((_ is Cons!1569) (toList!779 (ite c!16134 call!9708 (ite c!16138 call!9707 call!9706)))) (= (_1!1172 (h!2162 (toList!779 (ite c!16134 call!9708 (ite c!16138 call!9707 call!9706))))) (_1!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))))

(assert (= (and d!25739 c!16372) b!96802))

(assert (= (and d!25739 (not c!16372)) b!96811))

(assert (= (and b!96811 c!16369) b!96807))

(assert (= (and b!96811 (not c!16369)) b!96806))

(assert (= (and b!96806 c!16370) b!96805))

(assert (= (and b!96806 (not c!16370)) b!96804))

(assert (= (or b!96805 b!96804) bm!9817))

(assert (= (or b!96807 bm!9817) bm!9819))

(assert (= (or b!96802 bm!9819) bm!9818))

(assert (= (and bm!9818 c!16371) b!96809))

(assert (= (and bm!9818 (not c!16371)) b!96803))

(assert (= (and d!25739 res!48830) b!96808))

(assert (= (and b!96808 res!48829) b!96810))

(declare-fun m!105671 () Bool)

(assert (=> b!96810 m!105671))

(declare-fun m!105673 () Bool)

(assert (=> b!96808 m!105673))

(declare-fun m!105675 () Bool)

(assert (=> bm!9818 m!105675))

(declare-fun m!105677 () Bool)

(assert (=> b!96809 m!105677))

(declare-fun m!105679 () Bool)

(assert (=> d!25739 m!105679))

(declare-fun m!105681 () Bool)

(assert (=> d!25739 m!105681))

(assert (=> d!25371 d!25739))

(assert (=> b!96126 d!25543))

(declare-fun d!25741 () Bool)

(declare-fun res!48831 () Bool)

(declare-fun e!63104 () Bool)

(assert (=> d!25741 (=> res!48831 e!63104)))

(assert (=> d!25741 (= res!48831 (= (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(assert (=> d!25741 (= (arrayContainsKey!0 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) e!63104)))

(declare-fun b!96812 () Bool)

(declare-fun e!63105 () Bool)

(assert (=> b!96812 (= e!63104 e!63105)))

(declare-fun res!48832 () Bool)

(assert (=> b!96812 (=> (not res!48832) (not e!63105))))

(assert (=> b!96812 (= res!48832 (bvslt (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992))))))))

(declare-fun b!96813 () Bool)

(assert (=> b!96813 (= e!63105 (arrayContainsKey!0 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000001 from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!25741 (not res!48831)) b!96812))

(assert (= (and b!96812 res!48832) b!96813))

(declare-fun m!105683 () Bool)

(assert (=> d!25741 m!105683))

(assert (=> b!96813 m!103861))

(declare-fun m!105685 () Bool)

(assert (=> b!96813 m!105685))

(assert (=> b!96287 d!25741))

(declare-fun b!96814 () Bool)

(declare-fun e!63106 () Option!155)

(assert (=> b!96814 (= e!63106 (Some!154 (_2!1172 (h!2162 (toList!779 lt!48149)))))))

(declare-fun b!96817 () Bool)

(declare-fun e!63107 () Option!155)

(assert (=> b!96817 (= e!63107 None!153)))

(declare-fun c!16373 () Bool)

(declare-fun d!25743 () Bool)

(assert (=> d!25743 (= c!16373 (and ((_ is Cons!1569) (toList!779 lt!48149)) (= (_1!1172 (h!2162 (toList!779 lt!48149))) (_1!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(assert (=> d!25743 (= (getValueByKey!149 (toList!779 lt!48149) (_1!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))) e!63106)))

(declare-fun b!96816 () Bool)

(assert (=> b!96816 (= e!63107 (getValueByKey!149 (t!5495 (toList!779 lt!48149)) (_1!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun b!96815 () Bool)

(assert (=> b!96815 (= e!63106 e!63107)))

(declare-fun c!16374 () Bool)

(assert (=> b!96815 (= c!16374 (and ((_ is Cons!1569) (toList!779 lt!48149)) (not (= (_1!1172 (h!2162 (toList!779 lt!48149))) (_1!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))))))

(assert (= (and d!25743 c!16373) b!96814))

(assert (= (and d!25743 (not c!16373)) b!96815))

(assert (= (and b!96815 c!16374) b!96816))

(assert (= (and b!96815 (not c!16374)) b!96817))

(declare-fun m!105687 () Bool)

(assert (=> b!96816 m!105687))

(assert (=> b!96284 d!25743))

(declare-fun d!25745 () Bool)

(declare-fun e!63108 () Bool)

(assert (=> d!25745 e!63108))

(declare-fun res!48833 () Bool)

(assert (=> d!25745 (=> res!48833 e!63108)))

(declare-fun lt!48467 () Bool)

(assert (=> d!25745 (= res!48833 (not lt!48467))))

(declare-fun lt!48466 () Bool)

(assert (=> d!25745 (= lt!48467 lt!48466)))

(declare-fun lt!48468 () Unit!2864)

(declare-fun e!63109 () Unit!2864)

(assert (=> d!25745 (= lt!48468 e!63109)))

(declare-fun c!16375 () Bool)

(assert (=> d!25745 (= c!16375 lt!48466)))

(assert (=> d!25745 (= lt!48466 (containsKey!153 (toList!779 lt!48125) (_1!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(assert (=> d!25745 (= (contains!794 lt!48125 (_1!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!48467)))

(declare-fun b!96818 () Bool)

(declare-fun lt!48469 () Unit!2864)

(assert (=> b!96818 (= e!63109 lt!48469)))

(assert (=> b!96818 (= lt!48469 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 lt!48125) (_1!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(assert (=> b!96818 (isDefined!102 (getValueByKey!149 (toList!779 lt!48125) (_1!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun b!96819 () Bool)

(declare-fun Unit!2912 () Unit!2864)

(assert (=> b!96819 (= e!63109 Unit!2912)))

(declare-fun b!96820 () Bool)

(assert (=> b!96820 (= e!63108 (isDefined!102 (getValueByKey!149 (toList!779 lt!48125) (_1!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(assert (= (and d!25745 c!16375) b!96818))

(assert (= (and d!25745 (not c!16375)) b!96819))

(assert (= (and d!25745 (not res!48833)) b!96820))

(declare-fun m!105689 () Bool)

(assert (=> d!25745 m!105689))

(declare-fun m!105691 () Bool)

(assert (=> b!96818 m!105691))

(assert (=> b!96818 m!104577))

(assert (=> b!96818 m!104577))

(declare-fun m!105693 () Bool)

(assert (=> b!96818 m!105693))

(assert (=> b!96820 m!104577))

(assert (=> b!96820 m!104577))

(assert (=> b!96820 m!105693))

(assert (=> d!25389 d!25745))

(declare-fun b!96821 () Bool)

(declare-fun e!63110 () Option!155)

(assert (=> b!96821 (= e!63110 (Some!154 (_2!1172 (h!2162 lt!48124))))))

(declare-fun b!96824 () Bool)

(declare-fun e!63111 () Option!155)

(assert (=> b!96824 (= e!63111 None!153)))

(declare-fun c!16376 () Bool)

(declare-fun d!25747 () Bool)

(assert (=> d!25747 (= c!16376 (and ((_ is Cons!1569) lt!48124) (= (_1!1172 (h!2162 lt!48124)) (_1!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(assert (=> d!25747 (= (getValueByKey!149 lt!48124 (_1!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) e!63110)))

(declare-fun b!96823 () Bool)

(assert (=> b!96823 (= e!63111 (getValueByKey!149 (t!5495 lt!48124) (_1!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun b!96822 () Bool)

(assert (=> b!96822 (= e!63110 e!63111)))

(declare-fun c!16377 () Bool)

(assert (=> b!96822 (= c!16377 (and ((_ is Cons!1569) lt!48124) (not (= (_1!1172 (h!2162 lt!48124)) (_1!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))))

(assert (= (and d!25747 c!16376) b!96821))

(assert (= (and d!25747 (not c!16376)) b!96822))

(assert (= (and b!96822 c!16377) b!96823))

(assert (= (and b!96822 (not c!16377)) b!96824))

(declare-fun m!105695 () Bool)

(assert (=> b!96823 m!105695))

(assert (=> d!25389 d!25747))

(declare-fun d!25749 () Bool)

(assert (=> d!25749 (= (getValueByKey!149 lt!48124 (_1!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) (Some!154 (_2!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun lt!48470 () Unit!2864)

(assert (=> d!25749 (= lt!48470 (choose!583 lt!48124 (_1!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun e!63112 () Bool)

(assert (=> d!25749 e!63112))

(declare-fun res!48834 () Bool)

(assert (=> d!25749 (=> (not res!48834) (not e!63112))))

(assert (=> d!25749 (= res!48834 (isStrictlySorted!303 lt!48124))))

(assert (=> d!25749 (= (lemmaContainsTupThenGetReturnValue!65 lt!48124 (_1!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!48470)))

(declare-fun b!96825 () Bool)

(declare-fun res!48835 () Bool)

(assert (=> b!96825 (=> (not res!48835) (not e!63112))))

(assert (=> b!96825 (= res!48835 (containsKey!153 lt!48124 (_1!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun b!96826 () Bool)

(assert (=> b!96826 (= e!63112 (contains!797 lt!48124 (tuple2!2323 (_1!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(assert (= (and d!25749 res!48834) b!96825))

(assert (= (and b!96825 res!48835) b!96826))

(assert (=> d!25749 m!104571))

(declare-fun m!105697 () Bool)

(assert (=> d!25749 m!105697))

(declare-fun m!105699 () Bool)

(assert (=> d!25749 m!105699))

(declare-fun m!105701 () Bool)

(assert (=> b!96825 m!105701))

(declare-fun m!105703 () Bool)

(assert (=> b!96826 m!105703))

(assert (=> d!25389 d!25749))

(declare-fun b!96827 () Bool)

(declare-fun e!63115 () List!1573)

(declare-fun call!9824 () List!1573)

(assert (=> b!96827 (= e!63115 call!9824)))

(declare-fun e!63113 () List!1573)

(declare-fun c!16378 () Bool)

(declare-fun b!96828 () Bool)

(declare-fun c!16379 () Bool)

(assert (=> b!96828 (= e!63113 (ite c!16378 (t!5495 (toList!779 lt!47815)) (ite c!16379 (Cons!1569 (h!2162 (toList!779 lt!47815)) (t!5495 (toList!779 lt!47815))) Nil!1570)))))

(declare-fun bm!9820 () Bool)

(declare-fun call!9825 () List!1573)

(declare-fun call!9823 () List!1573)

(assert (=> bm!9820 (= call!9825 call!9823)))

(declare-fun b!96829 () Bool)

(declare-fun e!63116 () List!1573)

(assert (=> b!96829 (= e!63116 call!9825)))

(declare-fun b!96831 () Bool)

(assert (=> b!96831 (= c!16379 (and ((_ is Cons!1569) (toList!779 lt!47815)) (bvsgt (_1!1172 (h!2162 (toList!779 lt!47815))) (_1!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(declare-fun e!63117 () List!1573)

(assert (=> b!96831 (= e!63117 e!63116)))

(declare-fun b!96832 () Bool)

(assert (=> b!96832 (= e!63117 call!9823)))

(declare-fun bm!9821 () Bool)

(declare-fun c!16381 () Bool)

(assert (=> bm!9821 (= call!9824 ($colon$colon!77 e!63113 (ite c!16381 (h!2162 (toList!779 lt!47815)) (tuple2!2323 (_1!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))))

(declare-fun c!16380 () Bool)

(assert (=> bm!9821 (= c!16380 c!16381)))

(declare-fun b!96833 () Bool)

(declare-fun res!48836 () Bool)

(declare-fun e!63114 () Bool)

(assert (=> b!96833 (=> (not res!48836) (not e!63114))))

(declare-fun lt!48471 () List!1573)

(assert (=> b!96833 (= res!48836 (containsKey!153 lt!48471 (_1!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun b!96834 () Bool)

(assert (=> b!96834 (= e!63113 (insertStrictlySorted!68 (t!5495 (toList!779 lt!47815)) (_1!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun bm!9822 () Bool)

(assert (=> bm!9822 (= call!9823 call!9824)))

(declare-fun d!25751 () Bool)

(assert (=> d!25751 e!63114))

(declare-fun res!48837 () Bool)

(assert (=> d!25751 (=> (not res!48837) (not e!63114))))

(assert (=> d!25751 (= res!48837 (isStrictlySorted!303 lt!48471))))

(assert (=> d!25751 (= lt!48471 e!63115)))

(assert (=> d!25751 (= c!16381 (and ((_ is Cons!1569) (toList!779 lt!47815)) (bvslt (_1!1172 (h!2162 (toList!779 lt!47815))) (_1!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(assert (=> d!25751 (isStrictlySorted!303 (toList!779 lt!47815))))

(assert (=> d!25751 (= (insertStrictlySorted!68 (toList!779 lt!47815) (_1!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!48471)))

(declare-fun b!96830 () Bool)

(assert (=> b!96830 (= e!63116 call!9825)))

(declare-fun b!96835 () Bool)

(assert (=> b!96835 (= e!63114 (contains!797 lt!48471 (tuple2!2323 (_1!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(declare-fun b!96836 () Bool)

(assert (=> b!96836 (= e!63115 e!63117)))

(assert (=> b!96836 (= c!16378 (and ((_ is Cons!1569) (toList!779 lt!47815)) (= (_1!1172 (h!2162 (toList!779 lt!47815))) (_1!1172 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(assert (= (and d!25751 c!16381) b!96827))

(assert (= (and d!25751 (not c!16381)) b!96836))

(assert (= (and b!96836 c!16378) b!96832))

(assert (= (and b!96836 (not c!16378)) b!96831))

(assert (= (and b!96831 c!16379) b!96830))

(assert (= (and b!96831 (not c!16379)) b!96829))

(assert (= (or b!96830 b!96829) bm!9820))

(assert (= (or b!96832 bm!9820) bm!9822))

(assert (= (or b!96827 bm!9822) bm!9821))

(assert (= (and bm!9821 c!16380) b!96834))

(assert (= (and bm!9821 (not c!16380)) b!96828))

(assert (= (and d!25751 res!48837) b!96833))

(assert (= (and b!96833 res!48836) b!96835))

(declare-fun m!105705 () Bool)

(assert (=> b!96835 m!105705))

(declare-fun m!105707 () Bool)

(assert (=> b!96833 m!105707))

(declare-fun m!105709 () Bool)

(assert (=> bm!9821 m!105709))

(declare-fun m!105711 () Bool)

(assert (=> b!96834 m!105711))

(declare-fun m!105713 () Bool)

(assert (=> d!25751 m!105713))

(declare-fun m!105715 () Bool)

(assert (=> d!25751 m!105715))

(assert (=> d!25389 d!25751))

(declare-fun d!25753 () Bool)

(declare-fun res!48838 () Bool)

(declare-fun e!63118 () Bool)

(assert (=> d!25753 (=> res!48838 e!63118)))

(assert (=> d!25753 (= res!48838 (= (select (arr!2003 (_keys!4143 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(assert (=> d!25753 (= (arrayContainsKey!0 (_keys!4143 newMap!16) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)) e!63118)))

(declare-fun b!96837 () Bool)

(declare-fun e!63119 () Bool)

(assert (=> b!96837 (= e!63118 e!63119)))

(declare-fun res!48839 () Bool)

(assert (=> b!96837 (=> (not res!48839) (not e!63119))))

(assert (=> b!96837 (= res!48839 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2252 (_keys!4143 newMap!16))))))

(declare-fun b!96838 () Bool)

(assert (=> b!96838 (= e!63119 (arrayContainsKey!0 (_keys!4143 newMap!16) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001)))))

(assert (= (and d!25753 (not res!48838)) b!96837))

(assert (= (and b!96837 res!48839) b!96838))

(assert (=> d!25753 m!104755))

(assert (=> b!96838 m!103861))

(declare-fun m!105717 () Bool)

(assert (=> b!96838 m!105717))

(assert (=> b!95967 d!25753))

(assert (=> bm!9765 d!25309))

(declare-fun d!25755 () Bool)

(declare-fun res!48840 () Bool)

(declare-fun e!63120 () Bool)

(assert (=> d!25755 (=> (not res!48840) (not e!63120))))

(assert (=> d!25755 (= res!48840 (validMask!0 (mask!6542 (v!2778 (underlying!331 thiss!992)))))))

(assert (=> d!25755 (= (simpleValid!67 (v!2778 (underlying!331 thiss!992))) e!63120)))

(declare-fun b!96840 () Bool)

(declare-fun res!48843 () Bool)

(assert (=> b!96840 (=> (not res!48843) (not e!63120))))

(assert (=> b!96840 (= res!48843 (bvsge (size!2256 (v!2778 (underlying!331 thiss!992))) (_size!469 (v!2778 (underlying!331 thiss!992)))))))

(declare-fun b!96842 () Bool)

(assert (=> b!96842 (= e!63120 (and (bvsge (extraKeys!2282 (v!2778 (underlying!331 thiss!992))) #b00000000000000000000000000000000) (bvsle (extraKeys!2282 (v!2778 (underlying!331 thiss!992))) #b00000000000000000000000000000011) (bvsge (_vacant!469 (v!2778 (underlying!331 thiss!992))) #b00000000000000000000000000000000)))))

(declare-fun b!96841 () Bool)

(declare-fun res!48841 () Bool)

(assert (=> b!96841 (=> (not res!48841) (not e!63120))))

(assert (=> b!96841 (= res!48841 (= (size!2256 (v!2778 (underlying!331 thiss!992))) (bvadd (_size!469 (v!2778 (underlying!331 thiss!992))) (bvsdiv (bvadd (extraKeys!2282 (v!2778 (underlying!331 thiss!992))) #b00000000000000000000000000000001) #b00000000000000000000000000000010))))))

(declare-fun b!96839 () Bool)

(declare-fun res!48842 () Bool)

(assert (=> b!96839 (=> (not res!48842) (not e!63120))))

(assert (=> b!96839 (= res!48842 (and (= (size!2253 (_values!2440 (v!2778 (underlying!331 thiss!992)))) (bvadd (mask!6542 (v!2778 (underlying!331 thiss!992))) #b00000000000000000000000000000001)) (= (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (size!2253 (_values!2440 (v!2778 (underlying!331 thiss!992))))) (bvsge (_size!469 (v!2778 (underlying!331 thiss!992))) #b00000000000000000000000000000000) (bvsle (_size!469 (v!2778 (underlying!331 thiss!992))) (bvadd (mask!6542 (v!2778 (underlying!331 thiss!992))) #b00000000000000000000000000000001))))))

(assert (= (and d!25755 res!48840) b!96839))

(assert (= (and b!96839 res!48842) b!96840))

(assert (= (and b!96840 res!48843) b!96841))

(assert (= (and b!96841 res!48841) b!96842))

(assert (=> d!25755 m!103869))

(declare-fun m!105719 () Bool)

(assert (=> b!96840 m!105719))

(assert (=> b!96841 m!105719))

(assert (=> d!25379 d!25755))

(declare-fun d!25757 () Bool)

(assert (=> d!25757 (= (apply!91 lt!48076 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) (get!1273 (getValueByKey!149 (toList!779 lt!48076) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(declare-fun bs!3999 () Bool)

(assert (= bs!3999 d!25757))

(assert (=> bs!3999 m!104013))

(declare-fun m!105721 () Bool)

(assert (=> bs!3999 m!105721))

(assert (=> bs!3999 m!105721))

(declare-fun m!105723 () Bool)

(assert (=> bs!3999 m!105723))

(assert (=> b!96209 d!25757))

(assert (=> b!96209 d!25341))

(assert (=> b!96148 d!25543))

(declare-fun d!25759 () Bool)

(declare-fun lt!48472 () Bool)

(assert (=> d!25759 (= lt!48472 (select (content!100 (toList!779 lt!48137)) (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))

(declare-fun e!63121 () Bool)

(assert (=> d!25759 (= lt!48472 e!63121)))

(declare-fun res!48844 () Bool)

(assert (=> d!25759 (=> (not res!48844) (not e!63121))))

(assert (=> d!25759 (= res!48844 ((_ is Cons!1569) (toList!779 lt!48137)))))

(assert (=> d!25759 (= (contains!797 (toList!779 lt!48137) (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) lt!48472)))

(declare-fun b!96843 () Bool)

(declare-fun e!63122 () Bool)

(assert (=> b!96843 (= e!63121 e!63122)))

(declare-fun res!48845 () Bool)

(assert (=> b!96843 (=> res!48845 e!63122)))

(assert (=> b!96843 (= res!48845 (= (h!2162 (toList!779 lt!48137)) (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))

(declare-fun b!96844 () Bool)

(assert (=> b!96844 (= e!63122 (contains!797 (t!5495 (toList!779 lt!48137)) (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))

(assert (= (and d!25759 res!48844) b!96843))

(assert (= (and b!96843 (not res!48845)) b!96844))

(declare-fun m!105725 () Bool)

(assert (=> d!25759 m!105725))

(declare-fun m!105727 () Bool)

(assert (=> d!25759 m!105727))

(declare-fun m!105729 () Bool)

(assert (=> b!96844 m!105729))

(assert (=> b!96278 d!25759))

(declare-fun d!25761 () Bool)

(declare-fun e!63123 () Bool)

(assert (=> d!25761 e!63123))

(declare-fun res!48846 () Bool)

(assert (=> d!25761 (=> res!48846 e!63123)))

(declare-fun lt!48474 () Bool)

(assert (=> d!25761 (= res!48846 (not lt!48474))))

(declare-fun lt!48473 () Bool)

(assert (=> d!25761 (= lt!48474 lt!48473)))

(declare-fun lt!48475 () Unit!2864)

(declare-fun e!63124 () Unit!2864)

(assert (=> d!25761 (= lt!48475 e!63124)))

(declare-fun c!16382 () Bool)

(assert (=> d!25761 (= c!16382 lt!48473)))

(assert (=> d!25761 (= lt!48473 (containsKey!153 (toList!779 lt!48141) (_1!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(assert (=> d!25761 (= (contains!794 lt!48141 (_1!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!48474)))

(declare-fun b!96845 () Bool)

(declare-fun lt!48476 () Unit!2864)

(assert (=> b!96845 (= e!63124 lt!48476)))

(assert (=> b!96845 (= lt!48476 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 lt!48141) (_1!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(assert (=> b!96845 (isDefined!102 (getValueByKey!149 (toList!779 lt!48141) (_1!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun b!96846 () Bool)

(declare-fun Unit!2913 () Unit!2864)

(assert (=> b!96846 (= e!63124 Unit!2913)))

(declare-fun b!96847 () Bool)

(assert (=> b!96847 (= e!63123 (isDefined!102 (getValueByKey!149 (toList!779 lt!48141) (_1!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(assert (= (and d!25761 c!16382) b!96845))

(assert (= (and d!25761 (not c!16382)) b!96846))

(assert (= (and d!25761 (not res!48846)) b!96847))

(declare-fun m!105731 () Bool)

(assert (=> d!25761 m!105731))

(declare-fun m!105733 () Bool)

(assert (=> b!96845 m!105733))

(assert (=> b!96845 m!104633))

(assert (=> b!96845 m!104633))

(declare-fun m!105735 () Bool)

(assert (=> b!96845 m!105735))

(assert (=> b!96847 m!104633))

(assert (=> b!96847 m!104633))

(assert (=> b!96847 m!105735))

(assert (=> d!25409 d!25761))

(declare-fun b!96848 () Bool)

(declare-fun e!63125 () Option!155)

(assert (=> b!96848 (= e!63125 (Some!154 (_2!1172 (h!2162 lt!48140))))))

(declare-fun b!96851 () Bool)

(declare-fun e!63126 () Option!155)

(assert (=> b!96851 (= e!63126 None!153)))

(declare-fun c!16383 () Bool)

(declare-fun d!25763 () Bool)

(assert (=> d!25763 (= c!16383 (and ((_ is Cons!1569) lt!48140) (= (_1!1172 (h!2162 lt!48140)) (_1!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(assert (=> d!25763 (= (getValueByKey!149 lt!48140 (_1!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))) e!63125)))

(declare-fun b!96850 () Bool)

(assert (=> b!96850 (= e!63126 (getValueByKey!149 (t!5495 lt!48140) (_1!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun b!96849 () Bool)

(assert (=> b!96849 (= e!63125 e!63126)))

(declare-fun c!16384 () Bool)

(assert (=> b!96849 (= c!16384 (and ((_ is Cons!1569) lt!48140) (not (= (_1!1172 (h!2162 lt!48140)) (_1!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))))))

(assert (= (and d!25763 c!16383) b!96848))

(assert (= (and d!25763 (not c!16383)) b!96849))

(assert (= (and b!96849 c!16384) b!96850))

(assert (= (and b!96849 (not c!16384)) b!96851))

(declare-fun m!105737 () Bool)

(assert (=> b!96850 m!105737))

(assert (=> d!25409 d!25763))

(declare-fun d!25765 () Bool)

(assert (=> d!25765 (= (getValueByKey!149 lt!48140 (_1!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))) (Some!154 (_2!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun lt!48477 () Unit!2864)

(assert (=> d!25765 (= lt!48477 (choose!583 lt!48140 (_1!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun e!63127 () Bool)

(assert (=> d!25765 e!63127))

(declare-fun res!48847 () Bool)

(assert (=> d!25765 (=> (not res!48847) (not e!63127))))

(assert (=> d!25765 (= res!48847 (isStrictlySorted!303 lt!48140))))

(assert (=> d!25765 (= (lemmaContainsTupThenGetReturnValue!65 lt!48140 (_1!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!48477)))

(declare-fun b!96852 () Bool)

(declare-fun res!48848 () Bool)

(assert (=> b!96852 (=> (not res!48848) (not e!63127))))

(assert (=> b!96852 (= res!48848 (containsKey!153 lt!48140 (_1!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun b!96853 () Bool)

(assert (=> b!96853 (= e!63127 (contains!797 lt!48140 (tuple2!2323 (_1!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(assert (= (and d!25765 res!48847) b!96852))

(assert (= (and b!96852 res!48848) b!96853))

(assert (=> d!25765 m!104627))

(declare-fun m!105739 () Bool)

(assert (=> d!25765 m!105739))

(declare-fun m!105741 () Bool)

(assert (=> d!25765 m!105741))

(declare-fun m!105743 () Bool)

(assert (=> b!96852 m!105743))

(declare-fun m!105745 () Bool)

(assert (=> b!96853 m!105745))

(assert (=> d!25409 d!25765))

(declare-fun b!96854 () Bool)

(declare-fun e!63130 () List!1573)

(declare-fun call!9827 () List!1573)

(assert (=> b!96854 (= e!63130 call!9827)))

(declare-fun c!16385 () Bool)

(declare-fun b!96855 () Bool)

(declare-fun e!63128 () List!1573)

(declare-fun c!16386 () Bool)

(assert (=> b!96855 (= e!63128 (ite c!16385 (t!5495 (toList!779 lt!47826)) (ite c!16386 (Cons!1569 (h!2162 (toList!779 lt!47826)) (t!5495 (toList!779 lt!47826))) Nil!1570)))))

(declare-fun bm!9823 () Bool)

(declare-fun call!9828 () List!1573)

(declare-fun call!9826 () List!1573)

(assert (=> bm!9823 (= call!9828 call!9826)))

(declare-fun b!96856 () Bool)

(declare-fun e!63131 () List!1573)

(assert (=> b!96856 (= e!63131 call!9828)))

(declare-fun b!96858 () Bool)

(assert (=> b!96858 (= c!16386 (and ((_ is Cons!1569) (toList!779 lt!47826)) (bvsgt (_1!1172 (h!2162 (toList!779 lt!47826))) (_1!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(declare-fun e!63132 () List!1573)

(assert (=> b!96858 (= e!63132 e!63131)))

(declare-fun b!96859 () Bool)

(assert (=> b!96859 (= e!63132 call!9826)))

(declare-fun bm!9824 () Bool)

(declare-fun c!16388 () Bool)

(assert (=> bm!9824 (= call!9827 ($colon$colon!77 e!63128 (ite c!16388 (h!2162 (toList!779 lt!47826)) (tuple2!2323 (_1!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))))))

(declare-fun c!16387 () Bool)

(assert (=> bm!9824 (= c!16387 c!16388)))

(declare-fun b!96860 () Bool)

(declare-fun res!48849 () Bool)

(declare-fun e!63129 () Bool)

(assert (=> b!96860 (=> (not res!48849) (not e!63129))))

(declare-fun lt!48478 () List!1573)

(assert (=> b!96860 (= res!48849 (containsKey!153 lt!48478 (_1!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun b!96861 () Bool)

(assert (=> b!96861 (= e!63128 (insertStrictlySorted!68 (t!5495 (toList!779 lt!47826)) (_1!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun bm!9825 () Bool)

(assert (=> bm!9825 (= call!9826 call!9827)))

(declare-fun d!25767 () Bool)

(assert (=> d!25767 e!63129))

(declare-fun res!48850 () Bool)

(assert (=> d!25767 (=> (not res!48850) (not e!63129))))

(assert (=> d!25767 (= res!48850 (isStrictlySorted!303 lt!48478))))

(assert (=> d!25767 (= lt!48478 e!63130)))

(assert (=> d!25767 (= c!16388 (and ((_ is Cons!1569) (toList!779 lt!47826)) (bvslt (_1!1172 (h!2162 (toList!779 lt!47826))) (_1!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(assert (=> d!25767 (isStrictlySorted!303 (toList!779 lt!47826))))

(assert (=> d!25767 (= (insertStrictlySorted!68 (toList!779 lt!47826) (_1!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!48478)))

(declare-fun b!96857 () Bool)

(assert (=> b!96857 (= e!63131 call!9828)))

(declare-fun b!96862 () Bool)

(assert (=> b!96862 (= e!63129 (contains!797 lt!48478 (tuple2!2323 (_1!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(declare-fun b!96863 () Bool)

(assert (=> b!96863 (= e!63130 e!63132)))

(assert (=> b!96863 (= c!16385 (and ((_ is Cons!1569) (toList!779 lt!47826)) (= (_1!1172 (h!2162 (toList!779 lt!47826))) (_1!1172 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(assert (= (and d!25767 c!16388) b!96854))

(assert (= (and d!25767 (not c!16388)) b!96863))

(assert (= (and b!96863 c!16385) b!96859))

(assert (= (and b!96863 (not c!16385)) b!96858))

(assert (= (and b!96858 c!16386) b!96857))

(assert (= (and b!96858 (not c!16386)) b!96856))

(assert (= (or b!96857 b!96856) bm!9823))

(assert (= (or b!96859 bm!9823) bm!9825))

(assert (= (or b!96854 bm!9825) bm!9824))

(assert (= (and bm!9824 c!16387) b!96861))

(assert (= (and bm!9824 (not c!16387)) b!96855))

(assert (= (and d!25767 res!48850) b!96860))

(assert (= (and b!96860 res!48849) b!96862))

(declare-fun m!105747 () Bool)

(assert (=> b!96862 m!105747))

(declare-fun m!105749 () Bool)

(assert (=> b!96860 m!105749))

(declare-fun m!105751 () Bool)

(assert (=> bm!9824 m!105751))

(declare-fun m!105753 () Bool)

(assert (=> b!96861 m!105753))

(declare-fun m!105755 () Bool)

(assert (=> d!25767 m!105755))

(declare-fun m!105757 () Bool)

(assert (=> d!25767 m!105757))

(assert (=> d!25409 d!25767))

(declare-fun d!25769 () Bool)

(declare-fun e!63133 () Bool)

(assert (=> d!25769 e!63133))

(declare-fun res!48851 () Bool)

(assert (=> d!25769 (=> res!48851 e!63133)))

(declare-fun lt!48480 () Bool)

(assert (=> d!25769 (= res!48851 (not lt!48480))))

(declare-fun lt!48479 () Bool)

(assert (=> d!25769 (= lt!48480 lt!48479)))

(declare-fun lt!48481 () Unit!2864)

(declare-fun e!63134 () Unit!2864)

(assert (=> d!25769 (= lt!48481 e!63134)))

(declare-fun c!16389 () Bool)

(assert (=> d!25769 (= c!16389 lt!48479)))

(assert (=> d!25769 (= lt!48479 (containsKey!153 (toList!779 lt!48076) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!25769 (= (contains!794 lt!48076 #b1000000000000000000000000000000000000000000000000000000000000000) lt!48480)))

(declare-fun b!96864 () Bool)

(declare-fun lt!48482 () Unit!2864)

(assert (=> b!96864 (= e!63134 lt!48482)))

(assert (=> b!96864 (= lt!48482 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 lt!48076) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!96864 (isDefined!102 (getValueByKey!149 (toList!779 lt!48076) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96865 () Bool)

(declare-fun Unit!2914 () Unit!2864)

(assert (=> b!96865 (= e!63134 Unit!2914)))

(declare-fun b!96866 () Bool)

(assert (=> b!96866 (= e!63133 (isDefined!102 (getValueByKey!149 (toList!779 lt!48076) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25769 c!16389) b!96864))

(assert (= (and d!25769 (not c!16389)) b!96865))

(assert (= (and d!25769 (not res!48851)) b!96866))

(declare-fun m!105759 () Bool)

(assert (=> d!25769 m!105759))

(declare-fun m!105761 () Bool)

(assert (=> b!96864 m!105761))

(declare-fun m!105763 () Bool)

(assert (=> b!96864 m!105763))

(assert (=> b!96864 m!105763))

(declare-fun m!105765 () Bool)

(assert (=> b!96864 m!105765))

(assert (=> b!96866 m!105763))

(assert (=> b!96866 m!105763))

(assert (=> b!96866 m!105765))

(assert (=> b!96213 d!25769))

(declare-fun b!96867 () Bool)

(declare-fun e!63136 () Bool)

(declare-fun call!9829 () Bool)

(assert (=> b!96867 (= e!63136 call!9829)))

(declare-fun b!96868 () Bool)

(declare-fun e!63137 () Bool)

(assert (=> b!96868 (= e!63136 e!63137)))

(declare-fun lt!48483 () (_ BitVec 64))

(assert (=> b!96868 (= lt!48483 (select (arr!2003 (_keys!4143 (_2!1173 lt!47744))) #b00000000000000000000000000000000))))

(declare-fun lt!48485 () Unit!2864)

(assert (=> b!96868 (= lt!48485 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4143 (_2!1173 lt!47744)) lt!48483 #b00000000000000000000000000000000))))

(assert (=> b!96868 (arrayContainsKey!0 (_keys!4143 (_2!1173 lt!47744)) lt!48483 #b00000000000000000000000000000000)))

(declare-fun lt!48484 () Unit!2864)

(assert (=> b!96868 (= lt!48484 lt!48485)))

(declare-fun res!48852 () Bool)

(assert (=> b!96868 (= res!48852 (= (seekEntryOrOpen!0 (select (arr!2003 (_keys!4143 (_2!1173 lt!47744))) #b00000000000000000000000000000000) (_keys!4143 (_2!1173 lt!47744)) (mask!6542 (_2!1173 lt!47744))) (Found!252 #b00000000000000000000000000000000)))))

(assert (=> b!96868 (=> (not res!48852) (not e!63137))))

(declare-fun b!96869 () Bool)

(declare-fun e!63135 () Bool)

(assert (=> b!96869 (= e!63135 e!63136)))

(declare-fun c!16390 () Bool)

(assert (=> b!96869 (= c!16390 (validKeyInArray!0 (select (arr!2003 (_keys!4143 (_2!1173 lt!47744))) #b00000000000000000000000000000000)))))

(declare-fun d!25771 () Bool)

(declare-fun res!48853 () Bool)

(assert (=> d!25771 (=> res!48853 e!63135)))

(assert (=> d!25771 (= res!48853 (bvsge #b00000000000000000000000000000000 (size!2252 (_keys!4143 (_2!1173 lt!47744)))))))

(assert (=> d!25771 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4143 (_2!1173 lt!47744)) (mask!6542 (_2!1173 lt!47744))) e!63135)))

(declare-fun b!96870 () Bool)

(assert (=> b!96870 (= e!63137 call!9829)))

(declare-fun bm!9826 () Bool)

(assert (=> bm!9826 (= call!9829 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4143 (_2!1173 lt!47744)) (mask!6542 (_2!1173 lt!47744))))))

(assert (= (and d!25771 (not res!48853)) b!96869))

(assert (= (and b!96869 c!16390) b!96868))

(assert (= (and b!96869 (not c!16390)) b!96867))

(assert (= (and b!96868 res!48852) b!96870))

(assert (= (or b!96870 b!96867) bm!9826))

(assert (=> b!96868 m!105295))

(declare-fun m!105767 () Bool)

(assert (=> b!96868 m!105767))

(declare-fun m!105769 () Bool)

(assert (=> b!96868 m!105769))

(assert (=> b!96868 m!105295))

(declare-fun m!105771 () Bool)

(assert (=> b!96868 m!105771))

(assert (=> b!96869 m!105295))

(assert (=> b!96869 m!105295))

(assert (=> b!96869 m!105297))

(declare-fun m!105773 () Bool)

(assert (=> bm!9826 m!105773))

(assert (=> b!96029 d!25771))

(assert (=> b!96255 d!25455))

(assert (=> b!96255 d!25457))

(declare-fun b!96871 () Bool)

(declare-fun e!63138 () Option!155)

(assert (=> b!96871 (= e!63138 (Some!154 (_2!1172 (h!2162 (toList!779 lt!48086)))))))

(declare-fun b!96874 () Bool)

(declare-fun e!63139 () Option!155)

(assert (=> b!96874 (= e!63139 None!153)))

(declare-fun d!25773 () Bool)

(declare-fun c!16391 () Bool)

(assert (=> d!25773 (= c!16391 (and ((_ is Cons!1569) (toList!779 lt!48086)) (= (_1!1172 (h!2162 (toList!779 lt!48086))) (_1!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))))

(assert (=> d!25773 (= (getValueByKey!149 (toList!779 lt!48086) (_1!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))) e!63138)))

(declare-fun b!96873 () Bool)

(assert (=> b!96873 (= e!63139 (getValueByKey!149 (t!5495 (toList!779 lt!48086)) (_1!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(declare-fun b!96872 () Bool)

(assert (=> b!96872 (= e!63138 e!63139)))

(declare-fun c!16392 () Bool)

(assert (=> b!96872 (= c!16392 (and ((_ is Cons!1569) (toList!779 lt!48086)) (not (= (_1!1172 (h!2162 (toList!779 lt!48086))) (_1!1172 (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))))

(assert (= (and d!25773 c!16391) b!96871))

(assert (= (and d!25773 (not c!16391)) b!96872))

(assert (= (and b!96872 c!16392) b!96873))

(assert (= (and b!96872 (not c!16392)) b!96874))

(declare-fun m!105775 () Bool)

(assert (=> b!96873 m!105775))

(assert (=> b!96221 d!25773))

(declare-fun d!25775 () Bool)

(declare-fun e!63140 () Bool)

(assert (=> d!25775 e!63140))

(declare-fun res!48854 () Bool)

(assert (=> d!25775 (=> (not res!48854) (not e!63140))))

(declare-fun lt!48488 () ListLongMap!1527)

(assert (=> d!25775 (= res!48854 (contains!794 lt!48488 (_1!1172 (ite (or c!16153 c!16157) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))))

(declare-fun lt!48487 () List!1573)

(assert (=> d!25775 (= lt!48488 (ListLongMap!1528 lt!48487))))

(declare-fun lt!48489 () Unit!2864)

(declare-fun lt!48486 () Unit!2864)

(assert (=> d!25775 (= lt!48489 lt!48486)))

(assert (=> d!25775 (= (getValueByKey!149 lt!48487 (_1!1172 (ite (or c!16153 c!16157) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))) (Some!154 (_2!1172 (ite (or c!16153 c!16157) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))))

(assert (=> d!25775 (= lt!48486 (lemmaContainsTupThenGetReturnValue!65 lt!48487 (_1!1172 (ite (or c!16153 c!16157) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))) (_2!1172 (ite (or c!16153 c!16157) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))))

(assert (=> d!25775 (= lt!48487 (insertStrictlySorted!68 (toList!779 (ite c!16153 call!9727 (ite c!16157 call!9726 call!9725))) (_1!1172 (ite (or c!16153 c!16157) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))) (_2!1172 (ite (or c!16153 c!16157) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))))

(assert (=> d!25775 (= (+!134 (ite c!16153 call!9727 (ite c!16157 call!9726 call!9725)) (ite (or c!16153 c!16157) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))) lt!48488)))

(declare-fun b!96875 () Bool)

(declare-fun res!48855 () Bool)

(assert (=> b!96875 (=> (not res!48855) (not e!63140))))

(assert (=> b!96875 (= res!48855 (= (getValueByKey!149 (toList!779 lt!48488) (_1!1172 (ite (or c!16153 c!16157) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))) (Some!154 (_2!1172 (ite (or c!16153 c!16157) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))))

(declare-fun b!96876 () Bool)

(assert (=> b!96876 (= e!63140 (contains!797 (toList!779 lt!48488) (ite (or c!16153 c!16157) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(assert (= (and d!25775 res!48854) b!96875))

(assert (= (and b!96875 res!48855) b!96876))

(declare-fun m!105777 () Bool)

(assert (=> d!25775 m!105777))

(declare-fun m!105779 () Bool)

(assert (=> d!25775 m!105779))

(declare-fun m!105781 () Bool)

(assert (=> d!25775 m!105781))

(declare-fun m!105783 () Bool)

(assert (=> d!25775 m!105783))

(declare-fun m!105785 () Bool)

(assert (=> b!96875 m!105785))

(declare-fun m!105787 () Bool)

(assert (=> b!96876 m!105787))

(assert (=> bm!9726 d!25775))

(declare-fun d!25777 () Bool)

(assert (=> d!25777 (contains!794 (getCurrentListMap!470 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355))))

(declare-fun lt!48492 () Unit!2864)

(declare-fun choose!585 (array!4215 array!4217 (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 (_ BitVec 64) (_ BitVec 32) Int) Unit!2864)

(assert (=> d!25777 (= lt!48492 (choose!585 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(assert (=> d!25777 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25777 (= (lemmaArrayContainsKeyThenInListMap!24 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) lt!48492)))

(declare-fun bs!4000 () Bool)

(assert (= bs!4000 d!25777))

(assert (=> bs!4000 m!104035))

(assert (=> bs!4000 m!104035))

(assert (=> bs!4000 m!103861))

(assert (=> bs!4000 m!104123))

(assert (=> bs!4000 m!103861))

(declare-fun m!105789 () Bool)

(assert (=> bs!4000 m!105789))

(assert (=> bs!4000 m!104095))

(assert (=> b!96018 d!25777))

(declare-fun d!25779 () Bool)

(declare-fun e!63141 () Bool)

(assert (=> d!25779 e!63141))

(declare-fun res!48856 () Bool)

(assert (=> d!25779 (=> res!48856 e!63141)))

(declare-fun lt!48494 () Bool)

(assert (=> d!25779 (= res!48856 (not lt!48494))))

(declare-fun lt!48493 () Bool)

(assert (=> d!25779 (= lt!48494 lt!48493)))

(declare-fun lt!48495 () Unit!2864)

(declare-fun e!63142 () Unit!2864)

(assert (=> d!25779 (= lt!48495 e!63142)))

(declare-fun c!16393 () Bool)

(assert (=> d!25779 (= c!16393 lt!48493)))

(assert (=> d!25779 (= lt!48493 (containsKey!153 (toList!779 (getCurrentListMap!470 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(assert (=> d!25779 (= (contains!794 (getCurrentListMap!470 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) lt!48494)))

(declare-fun b!96877 () Bool)

(declare-fun lt!48496 () Unit!2864)

(assert (=> b!96877 (= e!63142 lt!48496)))

(assert (=> b!96877 (= lt!48496 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 (getCurrentListMap!470 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(assert (=> b!96877 (isDefined!102 (getValueByKey!149 (toList!779 (getCurrentListMap!470 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(declare-fun b!96878 () Bool)

(declare-fun Unit!2915 () Unit!2864)

(assert (=> b!96878 (= e!63142 Unit!2915)))

(declare-fun b!96879 () Bool)

(assert (=> b!96879 (= e!63141 (isDefined!102 (getValueByKey!149 (toList!779 (getCurrentListMap!470 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355))))))

(assert (= (and d!25779 c!16393) b!96877))

(assert (= (and d!25779 (not c!16393)) b!96878))

(assert (= (and d!25779 (not res!48856)) b!96879))

(assert (=> d!25779 m!103861))

(declare-fun m!105791 () Bool)

(assert (=> d!25779 m!105791))

(assert (=> b!96877 m!103861))

(declare-fun m!105793 () Bool)

(assert (=> b!96877 m!105793))

(assert (=> b!96877 m!103861))

(declare-fun m!105795 () Bool)

(assert (=> b!96877 m!105795))

(assert (=> b!96877 m!105795))

(declare-fun m!105797 () Bool)

(assert (=> b!96877 m!105797))

(assert (=> b!96879 m!103861))

(assert (=> b!96879 m!105795))

(assert (=> b!96879 m!105795))

(assert (=> b!96879 m!105797))

(assert (=> b!96018 d!25779))

(assert (=> b!96018 d!25377))

(declare-fun lt!48497 () Bool)

(declare-fun d!25781 () Bool)

(assert (=> d!25781 (= lt!48497 (select (content!100 (toList!779 lt!48125)) (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))

(declare-fun e!63143 () Bool)

(assert (=> d!25781 (= lt!48497 e!63143)))

(declare-fun res!48857 () Bool)

(assert (=> d!25781 (=> (not res!48857) (not e!63143))))

(assert (=> d!25781 (= res!48857 ((_ is Cons!1569) (toList!779 lt!48125)))))

(assert (=> d!25781 (= (contains!797 (toList!779 lt!48125) (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) lt!48497)))

(declare-fun b!96880 () Bool)

(declare-fun e!63144 () Bool)

(assert (=> b!96880 (= e!63143 e!63144)))

(declare-fun res!48858 () Bool)

(assert (=> b!96880 (=> res!48858 e!63144)))

(assert (=> b!96880 (= res!48858 (= (h!2162 (toList!779 lt!48125)) (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))

(declare-fun b!96881 () Bool)

(assert (=> b!96881 (= e!63144 (contains!797 (t!5495 (toList!779 lt!48125)) (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))

(assert (= (and d!25781 res!48857) b!96880))

(assert (= (and b!96880 (not res!48858)) b!96881))

(declare-fun m!105799 () Bool)

(assert (=> d!25781 m!105799))

(declare-fun m!105801 () Bool)

(assert (=> d!25781 m!105801))

(declare-fun m!105803 () Bool)

(assert (=> b!96881 m!105803))

(assert (=> b!96269 d!25781))

(declare-fun d!25783 () Bool)

(assert (=> d!25783 (= (get!1273 (getValueByKey!149 (toList!779 lt!47815) lt!47828)) (v!2782 (getValueByKey!149 (toList!779 lt!47815) lt!47828)))))

(assert (=> d!25393 d!25783))

(declare-fun b!96882 () Bool)

(declare-fun e!63145 () Option!155)

(assert (=> b!96882 (= e!63145 (Some!154 (_2!1172 (h!2162 (toList!779 lt!47815)))))))

(declare-fun b!96885 () Bool)

(declare-fun e!63146 () Option!155)

(assert (=> b!96885 (= e!63146 None!153)))

(declare-fun d!25785 () Bool)

(declare-fun c!16394 () Bool)

(assert (=> d!25785 (= c!16394 (and ((_ is Cons!1569) (toList!779 lt!47815)) (= (_1!1172 (h!2162 (toList!779 lt!47815))) lt!47828)))))

(assert (=> d!25785 (= (getValueByKey!149 (toList!779 lt!47815) lt!47828) e!63145)))

(declare-fun b!96884 () Bool)

(assert (=> b!96884 (= e!63146 (getValueByKey!149 (t!5495 (toList!779 lt!47815)) lt!47828))))

(declare-fun b!96883 () Bool)

(assert (=> b!96883 (= e!63145 e!63146)))

(declare-fun c!16395 () Bool)

(assert (=> b!96883 (= c!16395 (and ((_ is Cons!1569) (toList!779 lt!47815)) (not (= (_1!1172 (h!2162 (toList!779 lt!47815))) lt!47828))))))

(assert (= (and d!25785 c!16394) b!96882))

(assert (= (and d!25785 (not c!16394)) b!96883))

(assert (= (and b!96883 c!16395) b!96884))

(assert (= (and b!96883 (not c!16395)) b!96885))

(declare-fun m!105805 () Bool)

(assert (=> b!96884 m!105805))

(assert (=> d!25393 d!25785))

(assert (=> bm!9750 d!25643))

(declare-fun d!25787 () Bool)

(declare-fun e!63147 () Bool)

(assert (=> d!25787 e!63147))

(declare-fun res!48859 () Bool)

(assert (=> d!25787 (=> (not res!48859) (not e!63147))))

(declare-fun lt!48500 () ListLongMap!1527)

(assert (=> d!25787 (= res!48859 (contains!794 lt!48500 (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun lt!48499 () List!1573)

(assert (=> d!25787 (= lt!48500 (ListLongMap!1528 lt!48499))))

(declare-fun lt!48501 () Unit!2864)

(declare-fun lt!48498 () Unit!2864)

(assert (=> d!25787 (= lt!48501 lt!48498)))

(assert (=> d!25787 (= (getValueByKey!149 lt!48499 (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25787 (= lt!48498 (lemmaContainsTupThenGetReturnValue!65 lt!48499 (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25787 (= lt!48499 (insertStrictlySorted!68 (toList!779 (getCurrentListMap!470 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16))) (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (_2!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (=> d!25787 (= (+!134 (getCurrentListMap!470 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) lt!48500)))

(declare-fun b!96886 () Bool)

(declare-fun res!48860 () Bool)

(assert (=> b!96886 (=> (not res!48860) (not e!63147))))

(assert (=> b!96886 (= res!48860 (= (getValueByKey!149 (toList!779 lt!48500) (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (Some!154 (_2!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!96887 () Bool)

(assert (=> b!96887 (= e!63147 (contains!797 (toList!779 lt!48500) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))

(assert (= (and d!25787 res!48859) b!96886))

(assert (= (and b!96886 res!48860) b!96887))

(declare-fun m!105807 () Bool)

(assert (=> d!25787 m!105807))

(declare-fun m!105809 () Bool)

(assert (=> d!25787 m!105809))

(declare-fun m!105811 () Bool)

(assert (=> d!25787 m!105811))

(declare-fun m!105813 () Bool)

(assert (=> d!25787 m!105813))

(declare-fun m!105815 () Bool)

(assert (=> b!96886 m!105815))

(declare-fun m!105817 () Bool)

(assert (=> b!96887 m!105817))

(assert (=> b!96071 d!25787))

(assert (=> b!96071 d!25377))

(assert (=> b!96071 d!25331))

(declare-fun b!96888 () Bool)

(declare-fun e!63149 () (_ BitVec 32))

(assert (=> b!96888 (= e!63149 #b00000000000000000000000000000000)))

(declare-fun b!96889 () Bool)

(declare-fun e!63148 () (_ BitVec 32))

(assert (=> b!96889 (= e!63149 e!63148)))

(declare-fun c!16396 () Bool)

(assert (=> b!96889 (= c!16396 (validKeyInArray!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun b!96890 () Bool)

(declare-fun call!9830 () (_ BitVec 32))

(assert (=> b!96890 (= e!63148 call!9830)))

(declare-fun bm!9827 () Bool)

(assert (=> bm!9827 (= call!9830 (arrayCountValidKeys!0 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992))))))))

(declare-fun b!96891 () Bool)

(assert (=> b!96891 (= e!63148 (bvadd #b00000000000000000000000000000001 call!9830))))

(declare-fun d!25789 () Bool)

(declare-fun lt!48502 () (_ BitVec 32))

(assert (=> d!25789 (and (bvsge lt!48502 #b00000000000000000000000000000000) (bvsle lt!48502 (bvsub (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) #b00000000000000000000000000000000)))))

(assert (=> d!25789 (= lt!48502 e!63149)))

(declare-fun c!16397 () Bool)

(assert (=> d!25789 (= c!16397 (bvsge #b00000000000000000000000000000000 (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992))))))))

(assert (=> d!25789 (and (bvsle #b00000000000000000000000000000000 (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992))))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992))))))))

(assert (=> d!25789 (= (arrayCountValidKeys!0 (_keys!4143 (v!2778 (underlying!331 thiss!992))) #b00000000000000000000000000000000 (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992))))) lt!48502)))

(assert (= (and d!25789 c!16397) b!96888))

(assert (= (and d!25789 (not c!16397)) b!96889))

(assert (= (and b!96889 c!16396) b!96891))

(assert (= (and b!96889 (not c!16396)) b!96890))

(assert (= (or b!96891 b!96890) bm!9827))

(assert (=> b!96889 m!104957))

(assert (=> b!96889 m!104957))

(assert (=> b!96889 m!104959))

(declare-fun m!105819 () Bool)

(assert (=> bm!9827 m!105819))

(assert (=> b!96244 d!25789))

(declare-fun d!25791 () Bool)

(declare-fun e!63150 () Bool)

(assert (=> d!25791 e!63150))

(declare-fun res!48861 () Bool)

(assert (=> d!25791 (=> res!48861 e!63150)))

(declare-fun lt!48504 () Bool)

(assert (=> d!25791 (= res!48861 (not lt!48504))))

(declare-fun lt!48503 () Bool)

(assert (=> d!25791 (= lt!48504 lt!48503)))

(declare-fun lt!48505 () Unit!2864)

(declare-fun e!63151 () Unit!2864)

(assert (=> d!25791 (= lt!48505 e!63151)))

(declare-fun c!16398 () Bool)

(assert (=> d!25791 (= c!16398 lt!48503)))

(assert (=> d!25791 (= lt!48503 (containsKey!153 (toList!779 lt!48076) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> d!25791 (= (contains!794 lt!48076 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))) lt!48504)))

(declare-fun b!96892 () Bool)

(declare-fun lt!48506 () Unit!2864)

(assert (=> b!96892 (= e!63151 lt!48506)))

(assert (=> b!96892 (= lt!48506 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 lt!48076) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(assert (=> b!96892 (isDefined!102 (getValueByKey!149 (toList!779 lt!48076) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355))))))

(declare-fun b!96893 () Bool)

(declare-fun Unit!2916 () Unit!2864)

(assert (=> b!96893 (= e!63151 Unit!2916)))

(declare-fun b!96894 () Bool)

(assert (=> b!96894 (= e!63150 (isDefined!102 (getValueByKey!149 (toList!779 lt!48076) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd #b00000000000000000000000000000001 from!355)))))))

(assert (= (and d!25791 c!16398) b!96892))

(assert (= (and d!25791 (not c!16398)) b!96893))

(assert (= (and d!25791 (not res!48861)) b!96894))

(assert (=> d!25791 m!104013))

(declare-fun m!105821 () Bool)

(assert (=> d!25791 m!105821))

(assert (=> b!96892 m!104013))

(declare-fun m!105823 () Bool)

(assert (=> b!96892 m!105823))

(assert (=> b!96892 m!104013))

(assert (=> b!96892 m!105721))

(assert (=> b!96892 m!105721))

(declare-fun m!105825 () Bool)

(assert (=> b!96892 m!105825))

(assert (=> b!96894 m!104013))

(assert (=> b!96894 m!105721))

(assert (=> b!96894 m!105721))

(assert (=> b!96894 m!105825))

(assert (=> b!96214 d!25791))

(declare-fun d!25793 () Bool)

(assert (=> d!25793 (= (+!134 (getCurrentListMap!470 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!470 (_keys!4143 newMap!16) (array!4218 (store (arr!2004 (_values!2440 newMap!16)) (index!3151 lt!47759) (ValueCellFull!966 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2253 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(assert (=> d!25793 true))

(declare-fun _$5!98 () Unit!2864)

(assert (=> d!25793 (= (choose!577 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (index!3151 lt!47759) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2457 newMap!16)) _$5!98)))

(declare-fun bs!4001 () Bool)

(assert (= bs!4001 d!25793))

(assert (=> bs!4001 m!104035))

(assert (=> bs!4001 m!104035))

(assert (=> bs!4001 m!104149))

(assert (=> bs!4001 m!103961))

(assert (=> bs!4001 m!103959))

(assert (=> d!25333 d!25793))

(assert (=> d!25333 d!25523))

(declare-fun b!96913 () Bool)

(declare-fun e!63164 () SeekEntryResult!252)

(declare-fun e!63163 () SeekEntryResult!252)

(assert (=> b!96913 (= e!63164 e!63163)))

(declare-fun c!16407 () Bool)

(declare-fun lt!48512 () (_ BitVec 64))

(assert (=> b!96913 (= c!16407 (or (= lt!48512 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (= (bvadd lt!48512 lt!48512) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!96914 () Bool)

(declare-fun e!63166 () Bool)

(declare-fun lt!48511 () SeekEntryResult!252)

(assert (=> b!96914 (= e!63166 (bvsge (x!12800 lt!48511) #b01111111111111111111111111111110))))

(declare-fun b!96915 () Bool)

(assert (=> b!96915 (and (bvsge (index!3152 lt!48511) #b00000000000000000000000000000000) (bvslt (index!3152 lt!48511) (size!2252 (_keys!4143 newMap!16))))))

(declare-fun res!48870 () Bool)

(assert (=> b!96915 (= res!48870 (= (select (arr!2003 (_keys!4143 newMap!16)) (index!3152 lt!48511)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(declare-fun e!63162 () Bool)

(assert (=> b!96915 (=> res!48870 e!63162)))

(declare-fun e!63165 () Bool)

(assert (=> b!96915 (= e!63165 e!63162)))

(declare-fun b!96916 () Bool)

(assert (=> b!96916 (and (bvsge (index!3152 lt!48511) #b00000000000000000000000000000000) (bvslt (index!3152 lt!48511) (size!2252 (_keys!4143 newMap!16))))))

(declare-fun res!48869 () Bool)

(assert (=> b!96916 (= res!48869 (= (select (arr!2003 (_keys!4143 newMap!16)) (index!3152 lt!48511)) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!96916 (=> res!48869 e!63162)))

(declare-fun b!96917 () Bool)

(assert (=> b!96917 (= e!63163 (Intermediate!252 false (toIndex!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (mask!6542 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!96918 () Bool)

(assert (=> b!96918 (and (bvsge (index!3152 lt!48511) #b00000000000000000000000000000000) (bvslt (index!3152 lt!48511) (size!2252 (_keys!4143 newMap!16))))))

(assert (=> b!96918 (= e!63162 (= (select (arr!2003 (_keys!4143 newMap!16)) (index!3152 lt!48511)) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun d!25795 () Bool)

(assert (=> d!25795 e!63166))

(declare-fun c!16406 () Bool)

(assert (=> d!25795 (= c!16406 (and ((_ is Intermediate!252) lt!48511) (undefined!1064 lt!48511)))))

(assert (=> d!25795 (= lt!48511 e!63164)))

(declare-fun c!16405 () Bool)

(assert (=> d!25795 (= c!16405 (bvsge #b00000000000000000000000000000000 #b01111111111111111111111111111110))))

(assert (=> d!25795 (= lt!48512 (select (arr!2003 (_keys!4143 newMap!16)) (toIndex!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (mask!6542 newMap!16))))))

(assert (=> d!25795 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25795 (= (seekKeyOrZeroOrLongMinValue!0 #b00000000000000000000000000000000 (toIndex!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (mask!6542 newMap!16)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (_keys!4143 newMap!16) (mask!6542 newMap!16)) lt!48511)))

(declare-fun b!96919 () Bool)

(assert (=> b!96919 (= e!63164 (Intermediate!252 true (toIndex!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (mask!6542 newMap!16)) #b00000000000000000000000000000000))))

(declare-fun b!96920 () Bool)

(assert (=> b!96920 (= e!63166 e!63165)))

(declare-fun res!48868 () Bool)

(assert (=> b!96920 (= res!48868 (and ((_ is Intermediate!252) lt!48511) (not (undefined!1064 lt!48511)) (bvslt (x!12800 lt!48511) #b01111111111111111111111111111110) (bvsge (x!12800 lt!48511) #b00000000000000000000000000000000) (bvsge (x!12800 lt!48511) #b00000000000000000000000000000000)))))

(assert (=> b!96920 (=> (not res!48868) (not e!63165))))

(declare-fun b!96921 () Bool)

(assert (=> b!96921 (= e!63163 (seekKeyOrZeroOrLongMinValue!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (nextIndex!0 (toIndex!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (mask!6542 newMap!16)) #b00000000000000000000000000000000 (mask!6542 newMap!16)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (_keys!4143 newMap!16) (mask!6542 newMap!16)))))

(assert (= (and d!25795 c!16405) b!96919))

(assert (= (and d!25795 (not c!16405)) b!96913))

(assert (= (and b!96913 c!16407) b!96917))

(assert (= (and b!96913 (not c!16407)) b!96921))

(assert (= (and d!25795 c!16406) b!96914))

(assert (= (and d!25795 (not c!16406)) b!96920))

(assert (= (and b!96920 res!48868) b!96915))

(assert (= (and b!96915 (not res!48870)) b!96916))

(assert (= (and b!96916 (not res!48869)) b!96918))

(declare-fun m!105827 () Bool)

(assert (=> b!96915 m!105827))

(assert (=> b!96918 m!105827))

(assert (=> b!96916 m!105827))

(assert (=> d!25795 m!104353))

(declare-fun m!105829 () Bool)

(assert (=> d!25795 m!105829))

(assert (=> d!25795 m!104095))

(assert (=> b!96921 m!104353))

(declare-fun m!105831 () Bool)

(assert (=> b!96921 m!105831))

(assert (=> b!96921 m!105831))

(assert (=> b!96921 m!103861))

(declare-fun m!105833 () Bool)

(assert (=> b!96921 m!105833))

(assert (=> d!25343 d!25795))

(declare-fun d!25797 () Bool)

(declare-fun lt!48518 () (_ BitVec 32))

(declare-fun lt!48517 () (_ BitVec 32))

(assert (=> d!25797 (= lt!48518 (bvmul (bvxor lt!48517 (bvlshr lt!48517 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))))

(assert (=> d!25797 (= lt!48517 ((_ extract 31 0) (bvand (bvxor (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (bvlshr (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))))

(assert (=> d!25797 (and (bvsge (mask!6542 newMap!16) #b00000000000000000000000000000000) (let ((res!48871 (let ((h!2166 ((_ extract 31 0) (bvand (bvxor (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (bvlshr (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) #b0000000000000000000000000000000000000000000000000000000000100000)) #b0000000000000000000000000000000011111111111111111111111111111111)))) (let ((x!12904 (bvmul (bvxor h!2166 (bvlshr h!2166 #b00000000000000000000000000010000)) #b10000101111010111100101001101011))) (bvand (bvxor x!12904 (bvlshr x!12904 #b00000000000000000000000000001101)) (mask!6542 newMap!16)))))) (and (bvslt res!48871 (bvadd (mask!6542 newMap!16) #b00000000000000000000000000000001)) (bvsge res!48871 #b00000000000000000000000000000000))))))

(assert (=> d!25797 (= (toIndex!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (mask!6542 newMap!16)) (bvand (bvxor lt!48518 (bvlshr lt!48518 #b00000000000000000000000000001101)) (mask!6542 newMap!16)))))

(assert (=> d!25343 d!25797))

(assert (=> d!25343 d!25523))

(declare-fun d!25799 () Bool)

(assert (=> d!25799 (= (apply!91 lt!48040 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1273 (getValueByKey!149 (toList!779 lt!48040) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4002 () Bool)

(assert (= bs!4002 d!25799))

(assert (=> bs!4002 m!105291))

(assert (=> bs!4002 m!105291))

(declare-fun m!105835 () Bool)

(assert (=> bs!4002 m!105835))

(assert (=> b!96155 d!25799))

(declare-fun d!25801 () Bool)

(declare-fun e!63167 () Bool)

(assert (=> d!25801 e!63167))

(declare-fun res!48872 () Bool)

(assert (=> d!25801 (=> (not res!48872) (not e!63167))))

(declare-fun lt!48521 () ListLongMap!1527)

(assert (=> d!25801 (= res!48872 (contains!794 lt!48521 (_1!1172 (tuple2!2323 lt!47964 (zeroValue!2342 newMap!16)))))))

(declare-fun lt!48520 () List!1573)

(assert (=> d!25801 (= lt!48521 (ListLongMap!1528 lt!48520))))

(declare-fun lt!48522 () Unit!2864)

(declare-fun lt!48519 () Unit!2864)

(assert (=> d!25801 (= lt!48522 lt!48519)))

(assert (=> d!25801 (= (getValueByKey!149 lt!48520 (_1!1172 (tuple2!2323 lt!47964 (zeroValue!2342 newMap!16)))) (Some!154 (_2!1172 (tuple2!2323 lt!47964 (zeroValue!2342 newMap!16)))))))

(assert (=> d!25801 (= lt!48519 (lemmaContainsTupThenGetReturnValue!65 lt!48520 (_1!1172 (tuple2!2323 lt!47964 (zeroValue!2342 newMap!16))) (_2!1172 (tuple2!2323 lt!47964 (zeroValue!2342 newMap!16)))))))

(assert (=> d!25801 (= lt!48520 (insertStrictlySorted!68 (toList!779 lt!47959) (_1!1172 (tuple2!2323 lt!47964 (zeroValue!2342 newMap!16))) (_2!1172 (tuple2!2323 lt!47964 (zeroValue!2342 newMap!16)))))))

(assert (=> d!25801 (= (+!134 lt!47959 (tuple2!2323 lt!47964 (zeroValue!2342 newMap!16))) lt!48521)))

(declare-fun b!96922 () Bool)

(declare-fun res!48873 () Bool)

(assert (=> b!96922 (=> (not res!48873) (not e!63167))))

(assert (=> b!96922 (= res!48873 (= (getValueByKey!149 (toList!779 lt!48521) (_1!1172 (tuple2!2323 lt!47964 (zeroValue!2342 newMap!16)))) (Some!154 (_2!1172 (tuple2!2323 lt!47964 (zeroValue!2342 newMap!16))))))))

(declare-fun b!96923 () Bool)

(assert (=> b!96923 (= e!63167 (contains!797 (toList!779 lt!48521) (tuple2!2323 lt!47964 (zeroValue!2342 newMap!16))))))

(assert (= (and d!25801 res!48872) b!96922))

(assert (= (and b!96922 res!48873) b!96923))

(declare-fun m!105837 () Bool)

(assert (=> d!25801 m!105837))

(declare-fun m!105839 () Bool)

(assert (=> d!25801 m!105839))

(declare-fun m!105841 () Bool)

(assert (=> d!25801 m!105841))

(declare-fun m!105843 () Bool)

(assert (=> d!25801 m!105843))

(declare-fun m!105845 () Bool)

(assert (=> b!96922 m!105845))

(declare-fun m!105847 () Bool)

(assert (=> b!96923 m!105847))

(assert (=> b!96061 d!25801))

(declare-fun d!25803 () Bool)

(assert (=> d!25803 (= (apply!91 (+!134 lt!47970 (tuple2!2323 lt!47972 (minValue!2342 newMap!16))) lt!47961) (get!1273 (getValueByKey!149 (toList!779 (+!134 lt!47970 (tuple2!2323 lt!47972 (minValue!2342 newMap!16)))) lt!47961)))))

(declare-fun bs!4003 () Bool)

(assert (= bs!4003 d!25803))

(declare-fun m!105849 () Bool)

(assert (=> bs!4003 m!105849))

(assert (=> bs!4003 m!105849))

(declare-fun m!105851 () Bool)

(assert (=> bs!4003 m!105851))

(assert (=> b!96061 d!25803))

(assert (=> b!96061 d!25557))

(declare-fun d!25805 () Bool)

(assert (=> d!25805 (contains!794 (+!134 lt!47967 (tuple2!2323 lt!47966 (zeroValue!2342 newMap!16))) lt!47963)))

(declare-fun lt!48523 () Unit!2864)

(assert (=> d!25805 (= lt!48523 (choose!581 lt!47967 lt!47966 (zeroValue!2342 newMap!16) lt!47963))))

(assert (=> d!25805 (contains!794 lt!47967 lt!47963)))

(assert (=> d!25805 (= (addStillContains!67 lt!47967 lt!47966 (zeroValue!2342 newMap!16) lt!47963) lt!48523)))

(declare-fun bs!4004 () Bool)

(assert (= bs!4004 d!25805))

(assert (=> bs!4004 m!104235))

(assert (=> bs!4004 m!104235))

(assert (=> bs!4004 m!104237))

(declare-fun m!105853 () Bool)

(assert (=> bs!4004 m!105853))

(declare-fun m!105855 () Bool)

(assert (=> bs!4004 m!105855))

(assert (=> b!96061 d!25805))

(declare-fun d!25807 () Bool)

(assert (=> d!25807 (= (apply!91 lt!47970 lt!47961) (get!1273 (getValueByKey!149 (toList!779 lt!47970) lt!47961)))))

(declare-fun bs!4005 () Bool)

(assert (= bs!4005 d!25807))

(declare-fun m!105857 () Bool)

(assert (=> bs!4005 m!105857))

(assert (=> bs!4005 m!105857))

(declare-fun m!105859 () Bool)

(assert (=> bs!4005 m!105859))

(assert (=> b!96061 d!25807))

(declare-fun d!25809 () Bool)

(declare-fun e!63168 () Bool)

(assert (=> d!25809 e!63168))

(declare-fun res!48874 () Bool)

(assert (=> d!25809 (=> (not res!48874) (not e!63168))))

(declare-fun lt!48526 () ListLongMap!1527)

(assert (=> d!25809 (= res!48874 (contains!794 lt!48526 (_1!1172 (tuple2!2323 lt!47966 (zeroValue!2342 newMap!16)))))))

(declare-fun lt!48525 () List!1573)

(assert (=> d!25809 (= lt!48526 (ListLongMap!1528 lt!48525))))

(declare-fun lt!48527 () Unit!2864)

(declare-fun lt!48524 () Unit!2864)

(assert (=> d!25809 (= lt!48527 lt!48524)))

(assert (=> d!25809 (= (getValueByKey!149 lt!48525 (_1!1172 (tuple2!2323 lt!47966 (zeroValue!2342 newMap!16)))) (Some!154 (_2!1172 (tuple2!2323 lt!47966 (zeroValue!2342 newMap!16)))))))

(assert (=> d!25809 (= lt!48524 (lemmaContainsTupThenGetReturnValue!65 lt!48525 (_1!1172 (tuple2!2323 lt!47966 (zeroValue!2342 newMap!16))) (_2!1172 (tuple2!2323 lt!47966 (zeroValue!2342 newMap!16)))))))

(assert (=> d!25809 (= lt!48525 (insertStrictlySorted!68 (toList!779 lt!47967) (_1!1172 (tuple2!2323 lt!47966 (zeroValue!2342 newMap!16))) (_2!1172 (tuple2!2323 lt!47966 (zeroValue!2342 newMap!16)))))))

(assert (=> d!25809 (= (+!134 lt!47967 (tuple2!2323 lt!47966 (zeroValue!2342 newMap!16))) lt!48526)))

(declare-fun b!96924 () Bool)

(declare-fun res!48875 () Bool)

(assert (=> b!96924 (=> (not res!48875) (not e!63168))))

(assert (=> b!96924 (= res!48875 (= (getValueByKey!149 (toList!779 lt!48526) (_1!1172 (tuple2!2323 lt!47966 (zeroValue!2342 newMap!16)))) (Some!154 (_2!1172 (tuple2!2323 lt!47966 (zeroValue!2342 newMap!16))))))))

(declare-fun b!96925 () Bool)

(assert (=> b!96925 (= e!63168 (contains!797 (toList!779 lt!48526) (tuple2!2323 lt!47966 (zeroValue!2342 newMap!16))))))

(assert (= (and d!25809 res!48874) b!96924))

(assert (= (and b!96924 res!48875) b!96925))

(declare-fun m!105861 () Bool)

(assert (=> d!25809 m!105861))

(declare-fun m!105863 () Bool)

(assert (=> d!25809 m!105863))

(declare-fun m!105865 () Bool)

(assert (=> d!25809 m!105865))

(declare-fun m!105867 () Bool)

(assert (=> d!25809 m!105867))

(declare-fun m!105869 () Bool)

(assert (=> b!96924 m!105869))

(declare-fun m!105871 () Bool)

(assert (=> b!96925 m!105871))

(assert (=> b!96061 d!25809))

(declare-fun d!25811 () Bool)

(declare-fun e!63169 () Bool)

(assert (=> d!25811 e!63169))

(declare-fun res!48876 () Bool)

(assert (=> d!25811 (=> (not res!48876) (not e!63169))))

(declare-fun lt!48530 () ListLongMap!1527)

(assert (=> d!25811 (= res!48876 (contains!794 lt!48530 (_1!1172 (tuple2!2323 lt!47972 (minValue!2342 newMap!16)))))))

(declare-fun lt!48529 () List!1573)

(assert (=> d!25811 (= lt!48530 (ListLongMap!1528 lt!48529))))

(declare-fun lt!48531 () Unit!2864)

(declare-fun lt!48528 () Unit!2864)

(assert (=> d!25811 (= lt!48531 lt!48528)))

(assert (=> d!25811 (= (getValueByKey!149 lt!48529 (_1!1172 (tuple2!2323 lt!47972 (minValue!2342 newMap!16)))) (Some!154 (_2!1172 (tuple2!2323 lt!47972 (minValue!2342 newMap!16)))))))

(assert (=> d!25811 (= lt!48528 (lemmaContainsTupThenGetReturnValue!65 lt!48529 (_1!1172 (tuple2!2323 lt!47972 (minValue!2342 newMap!16))) (_2!1172 (tuple2!2323 lt!47972 (minValue!2342 newMap!16)))))))

(assert (=> d!25811 (= lt!48529 (insertStrictlySorted!68 (toList!779 lt!47970) (_1!1172 (tuple2!2323 lt!47972 (minValue!2342 newMap!16))) (_2!1172 (tuple2!2323 lt!47972 (minValue!2342 newMap!16)))))))

(assert (=> d!25811 (= (+!134 lt!47970 (tuple2!2323 lt!47972 (minValue!2342 newMap!16))) lt!48530)))

(declare-fun b!96926 () Bool)

(declare-fun res!48877 () Bool)

(assert (=> b!96926 (=> (not res!48877) (not e!63169))))

(assert (=> b!96926 (= res!48877 (= (getValueByKey!149 (toList!779 lt!48530) (_1!1172 (tuple2!2323 lt!47972 (minValue!2342 newMap!16)))) (Some!154 (_2!1172 (tuple2!2323 lt!47972 (minValue!2342 newMap!16))))))))

(declare-fun b!96927 () Bool)

(assert (=> b!96927 (= e!63169 (contains!797 (toList!779 lt!48530) (tuple2!2323 lt!47972 (minValue!2342 newMap!16))))))

(assert (= (and d!25811 res!48876) b!96926))

(assert (= (and b!96926 res!48877) b!96927))

(declare-fun m!105873 () Bool)

(assert (=> d!25811 m!105873))

(declare-fun m!105875 () Bool)

(assert (=> d!25811 m!105875))

(declare-fun m!105877 () Bool)

(assert (=> d!25811 m!105877))

(declare-fun m!105879 () Bool)

(assert (=> d!25811 m!105879))

(declare-fun m!105881 () Bool)

(assert (=> b!96926 m!105881))

(declare-fun m!105883 () Bool)

(assert (=> b!96927 m!105883))

(assert (=> b!96061 d!25811))

(declare-fun d!25813 () Bool)

(declare-fun e!63170 () Bool)

(assert (=> d!25813 e!63170))

(declare-fun res!48878 () Bool)

(assert (=> d!25813 (=> (not res!48878) (not e!63170))))

(declare-fun lt!48534 () ListLongMap!1527)

(assert (=> d!25813 (= res!48878 (contains!794 lt!48534 (_1!1172 (tuple2!2323 lt!47973 (minValue!2342 newMap!16)))))))

(declare-fun lt!48533 () List!1573)

(assert (=> d!25813 (= lt!48534 (ListLongMap!1528 lt!48533))))

(declare-fun lt!48535 () Unit!2864)

(declare-fun lt!48532 () Unit!2864)

(assert (=> d!25813 (= lt!48535 lt!48532)))

(assert (=> d!25813 (= (getValueByKey!149 lt!48533 (_1!1172 (tuple2!2323 lt!47973 (minValue!2342 newMap!16)))) (Some!154 (_2!1172 (tuple2!2323 lt!47973 (minValue!2342 newMap!16)))))))

(assert (=> d!25813 (= lt!48532 (lemmaContainsTupThenGetReturnValue!65 lt!48533 (_1!1172 (tuple2!2323 lt!47973 (minValue!2342 newMap!16))) (_2!1172 (tuple2!2323 lt!47973 (minValue!2342 newMap!16)))))))

(assert (=> d!25813 (= lt!48533 (insertStrictlySorted!68 (toList!779 lt!47956) (_1!1172 (tuple2!2323 lt!47973 (minValue!2342 newMap!16))) (_2!1172 (tuple2!2323 lt!47973 (minValue!2342 newMap!16)))))))

(assert (=> d!25813 (= (+!134 lt!47956 (tuple2!2323 lt!47973 (minValue!2342 newMap!16))) lt!48534)))

(declare-fun b!96928 () Bool)

(declare-fun res!48879 () Bool)

(assert (=> b!96928 (=> (not res!48879) (not e!63170))))

(assert (=> b!96928 (= res!48879 (= (getValueByKey!149 (toList!779 lt!48534) (_1!1172 (tuple2!2323 lt!47973 (minValue!2342 newMap!16)))) (Some!154 (_2!1172 (tuple2!2323 lt!47973 (minValue!2342 newMap!16))))))))

(declare-fun b!96929 () Bool)

(assert (=> b!96929 (= e!63170 (contains!797 (toList!779 lt!48534) (tuple2!2323 lt!47973 (minValue!2342 newMap!16))))))

(assert (= (and d!25813 res!48878) b!96928))

(assert (= (and b!96928 res!48879) b!96929))

(declare-fun m!105885 () Bool)

(assert (=> d!25813 m!105885))

(declare-fun m!105887 () Bool)

(assert (=> d!25813 m!105887))

(declare-fun m!105889 () Bool)

(assert (=> d!25813 m!105889))

(declare-fun m!105891 () Bool)

(assert (=> d!25813 m!105891))

(declare-fun m!105893 () Bool)

(assert (=> b!96928 m!105893))

(declare-fun m!105895 () Bool)

(assert (=> b!96929 m!105895))

(assert (=> b!96061 d!25813))

(declare-fun d!25815 () Bool)

(assert (=> d!25815 (= (apply!91 (+!134 lt!47959 (tuple2!2323 lt!47964 (zeroValue!2342 newMap!16))) lt!47954) (get!1273 (getValueByKey!149 (toList!779 (+!134 lt!47959 (tuple2!2323 lt!47964 (zeroValue!2342 newMap!16)))) lt!47954)))))

(declare-fun bs!4006 () Bool)

(assert (= bs!4006 d!25815))

(declare-fun m!105897 () Bool)

(assert (=> bs!4006 m!105897))

(assert (=> bs!4006 m!105897))

(declare-fun m!105899 () Bool)

(assert (=> bs!4006 m!105899))

(assert (=> b!96061 d!25815))

(declare-fun d!25817 () Bool)

(declare-fun e!63171 () Bool)

(assert (=> d!25817 e!63171))

(declare-fun res!48880 () Bool)

(assert (=> d!25817 (=> res!48880 e!63171)))

(declare-fun lt!48537 () Bool)

(assert (=> d!25817 (= res!48880 (not lt!48537))))

(declare-fun lt!48536 () Bool)

(assert (=> d!25817 (= lt!48537 lt!48536)))

(declare-fun lt!48538 () Unit!2864)

(declare-fun e!63172 () Unit!2864)

(assert (=> d!25817 (= lt!48538 e!63172)))

(declare-fun c!16408 () Bool)

(assert (=> d!25817 (= c!16408 lt!48536)))

(assert (=> d!25817 (= lt!48536 (containsKey!153 (toList!779 (+!134 lt!47967 (tuple2!2323 lt!47966 (zeroValue!2342 newMap!16)))) lt!47963))))

(assert (=> d!25817 (= (contains!794 (+!134 lt!47967 (tuple2!2323 lt!47966 (zeroValue!2342 newMap!16))) lt!47963) lt!48537)))

(declare-fun b!96930 () Bool)

(declare-fun lt!48539 () Unit!2864)

(assert (=> b!96930 (= e!63172 lt!48539)))

(assert (=> b!96930 (= lt!48539 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 (+!134 lt!47967 (tuple2!2323 lt!47966 (zeroValue!2342 newMap!16)))) lt!47963))))

(assert (=> b!96930 (isDefined!102 (getValueByKey!149 (toList!779 (+!134 lt!47967 (tuple2!2323 lt!47966 (zeroValue!2342 newMap!16)))) lt!47963))))

(declare-fun b!96931 () Bool)

(declare-fun Unit!2917 () Unit!2864)

(assert (=> b!96931 (= e!63172 Unit!2917)))

(declare-fun b!96932 () Bool)

(assert (=> b!96932 (= e!63171 (isDefined!102 (getValueByKey!149 (toList!779 (+!134 lt!47967 (tuple2!2323 lt!47966 (zeroValue!2342 newMap!16)))) lt!47963)))))

(assert (= (and d!25817 c!16408) b!96930))

(assert (= (and d!25817 (not c!16408)) b!96931))

(assert (= (and d!25817 (not res!48880)) b!96932))

(declare-fun m!105901 () Bool)

(assert (=> d!25817 m!105901))

(declare-fun m!105903 () Bool)

(assert (=> b!96930 m!105903))

(declare-fun m!105905 () Bool)

(assert (=> b!96930 m!105905))

(assert (=> b!96930 m!105905))

(declare-fun m!105907 () Bool)

(assert (=> b!96930 m!105907))

(assert (=> b!96932 m!105905))

(assert (=> b!96932 m!105905))

(assert (=> b!96932 m!105907))

(assert (=> b!96061 d!25817))

(declare-fun d!25819 () Bool)

(assert (=> d!25819 (= (apply!91 (+!134 lt!47970 (tuple2!2323 lt!47972 (minValue!2342 newMap!16))) lt!47961) (apply!91 lt!47970 lt!47961))))

(declare-fun lt!48540 () Unit!2864)

(assert (=> d!25819 (= lt!48540 (choose!580 lt!47970 lt!47972 (minValue!2342 newMap!16) lt!47961))))

(declare-fun e!63173 () Bool)

(assert (=> d!25819 e!63173))

(declare-fun res!48881 () Bool)

(assert (=> d!25819 (=> (not res!48881) (not e!63173))))

(assert (=> d!25819 (= res!48881 (contains!794 lt!47970 lt!47961))))

(assert (=> d!25819 (= (addApplyDifferent!67 lt!47970 lt!47972 (minValue!2342 newMap!16) lt!47961) lt!48540)))

(declare-fun b!96933 () Bool)

(assert (=> b!96933 (= e!63173 (not (= lt!47961 lt!47972)))))

(assert (= (and d!25819 res!48881) b!96933))

(declare-fun m!105909 () Bool)

(assert (=> d!25819 m!105909))

(assert (=> d!25819 m!104229))

(assert (=> d!25819 m!104251))

(declare-fun m!105911 () Bool)

(assert (=> d!25819 m!105911))

(assert (=> d!25819 m!104229))

(assert (=> d!25819 m!104253))

(assert (=> b!96061 d!25819))

(declare-fun d!25821 () Bool)

(assert (=> d!25821 (= (apply!91 (+!134 lt!47956 (tuple2!2323 lt!47973 (minValue!2342 newMap!16))) lt!47969) (get!1273 (getValueByKey!149 (toList!779 (+!134 lt!47956 (tuple2!2323 lt!47973 (minValue!2342 newMap!16)))) lt!47969)))))

(declare-fun bs!4007 () Bool)

(assert (= bs!4007 d!25821))

(declare-fun m!105913 () Bool)

(assert (=> bs!4007 m!105913))

(assert (=> bs!4007 m!105913))

(declare-fun m!105915 () Bool)

(assert (=> bs!4007 m!105915))

(assert (=> b!96061 d!25821))

(declare-fun d!25823 () Bool)

(assert (=> d!25823 (= (apply!91 (+!134 lt!47959 (tuple2!2323 lt!47964 (zeroValue!2342 newMap!16))) lt!47954) (apply!91 lt!47959 lt!47954))))

(declare-fun lt!48541 () Unit!2864)

(assert (=> d!25823 (= lt!48541 (choose!580 lt!47959 lt!47964 (zeroValue!2342 newMap!16) lt!47954))))

(declare-fun e!63174 () Bool)

(assert (=> d!25823 e!63174))

(declare-fun res!48882 () Bool)

(assert (=> d!25823 (=> (not res!48882) (not e!63174))))

(assert (=> d!25823 (= res!48882 (contains!794 lt!47959 lt!47954))))

(assert (=> d!25823 (= (addApplyDifferent!67 lt!47959 lt!47964 (zeroValue!2342 newMap!16) lt!47954) lt!48541)))

(declare-fun b!96934 () Bool)

(assert (=> b!96934 (= e!63174 (not (= lt!47954 lt!47964)))))

(assert (= (and d!25823 res!48882) b!96934))

(declare-fun m!105917 () Bool)

(assert (=> d!25823 m!105917))

(assert (=> d!25823 m!104245))

(assert (=> d!25823 m!104255))

(declare-fun m!105919 () Bool)

(assert (=> d!25823 m!105919))

(assert (=> d!25823 m!104245))

(assert (=> d!25823 m!104247))

(assert (=> b!96061 d!25823))

(declare-fun d!25825 () Bool)

(assert (=> d!25825 (= (apply!91 lt!47956 lt!47969) (get!1273 (getValueByKey!149 (toList!779 lt!47956) lt!47969)))))

(declare-fun bs!4008 () Bool)

(assert (= bs!4008 d!25825))

(declare-fun m!105921 () Bool)

(assert (=> bs!4008 m!105921))

(assert (=> bs!4008 m!105921))

(declare-fun m!105923 () Bool)

(assert (=> bs!4008 m!105923))

(assert (=> b!96061 d!25825))

(declare-fun d!25827 () Bool)

(assert (=> d!25827 (= (apply!91 (+!134 lt!47956 (tuple2!2323 lt!47973 (minValue!2342 newMap!16))) lt!47969) (apply!91 lt!47956 lt!47969))))

(declare-fun lt!48542 () Unit!2864)

(assert (=> d!25827 (= lt!48542 (choose!580 lt!47956 lt!47973 (minValue!2342 newMap!16) lt!47969))))

(declare-fun e!63175 () Bool)

(assert (=> d!25827 e!63175))

(declare-fun res!48883 () Bool)

(assert (=> d!25827 (=> (not res!48883) (not e!63175))))

(assert (=> d!25827 (= res!48883 (contains!794 lt!47956 lt!47969))))

(assert (=> d!25827 (= (addApplyDifferent!67 lt!47956 lt!47973 (minValue!2342 newMap!16) lt!47969) lt!48542)))

(declare-fun b!96935 () Bool)

(assert (=> b!96935 (= e!63175 (not (= lt!47969 lt!47973)))))

(assert (= (and d!25827 res!48883) b!96935))

(declare-fun m!105925 () Bool)

(assert (=> d!25827 m!105925))

(assert (=> d!25827 m!104239))

(assert (=> d!25827 m!104227))

(declare-fun m!105927 () Bool)

(assert (=> d!25827 m!105927))

(assert (=> d!25827 m!104239))

(assert (=> d!25827 m!104241))

(assert (=> b!96061 d!25827))

(declare-fun d!25829 () Bool)

(assert (=> d!25829 (= (apply!91 lt!47959 lt!47954) (get!1273 (getValueByKey!149 (toList!779 lt!47959) lt!47954)))))

(declare-fun bs!4009 () Bool)

(assert (= bs!4009 d!25829))

(declare-fun m!105929 () Bool)

(assert (=> bs!4009 m!105929))

(assert (=> bs!4009 m!105929))

(declare-fun m!105931 () Bool)

(assert (=> bs!4009 m!105931))

(assert (=> b!96061 d!25829))

(assert (=> b!96220 d!25535))

(assert (=> b!96220 d!25537))

(declare-fun d!25831 () Bool)

(declare-fun e!63176 () Bool)

(assert (=> d!25831 e!63176))

(declare-fun res!48884 () Bool)

(assert (=> d!25831 (=> res!48884 e!63176)))

(declare-fun lt!48544 () Bool)

(assert (=> d!25831 (= res!48884 (not lt!48544))))

(declare-fun lt!48543 () Bool)

(assert (=> d!25831 (= lt!48544 lt!48543)))

(declare-fun lt!48545 () Unit!2864)

(declare-fun e!63177 () Unit!2864)

(assert (=> d!25831 (= lt!48545 e!63177)))

(declare-fun c!16409 () Bool)

(assert (=> d!25831 (= c!16409 lt!48543)))

(assert (=> d!25831 (= lt!48543 (containsKey!153 (toList!779 lt!47989) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!25831 (= (contains!794 lt!47989 #b0000000000000000000000000000000000000000000000000000000000000000) lt!48544)))

(declare-fun b!96936 () Bool)

(declare-fun lt!48546 () Unit!2864)

(assert (=> b!96936 (= e!63177 lt!48546)))

(assert (=> b!96936 (= lt!48546 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 lt!47989) #b0000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!96936 (isDefined!102 (getValueByKey!149 (toList!779 lt!47989) #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96937 () Bool)

(declare-fun Unit!2918 () Unit!2864)

(assert (=> b!96937 (= e!63177 Unit!2918)))

(declare-fun b!96938 () Bool)

(assert (=> b!96938 (= e!63176 (isDefined!102 (getValueByKey!149 (toList!779 lt!47989) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25831 c!16409) b!96936))

(assert (= (and d!25831 (not c!16409)) b!96937))

(assert (= (and d!25831 (not res!48884)) b!96938))

(declare-fun m!105933 () Bool)

(assert (=> d!25831 m!105933))

(declare-fun m!105935 () Bool)

(assert (=> b!96936 m!105935))

(assert (=> b!96936 m!104945))

(assert (=> b!96936 m!104945))

(declare-fun m!105937 () Bool)

(assert (=> b!96936 m!105937))

(assert (=> b!96938 m!104945))

(assert (=> b!96938 m!104945))

(assert (=> b!96938 m!105937))

(assert (=> bm!9734 d!25831))

(declare-fun b!96939 () Bool)

(declare-fun e!63179 () (_ BitVec 32))

(assert (=> b!96939 (= e!63179 #b00000000000000000000000000000000)))

(declare-fun b!96940 () Bool)

(declare-fun e!63178 () (_ BitVec 32))

(assert (=> b!96940 (= e!63179 e!63178)))

(declare-fun c!16410 () Bool)

(assert (=> b!96940 (= c!16410 (validKeyInArray!0 (select (arr!2003 (_keys!4143 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(declare-fun b!96941 () Bool)

(declare-fun call!9831 () (_ BitVec 32))

(assert (=> b!96941 (= e!63178 call!9831)))

(declare-fun bm!9828 () Bool)

(assert (=> bm!9828 (= call!9831 (arrayCountValidKeys!0 (_keys!4143 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2252 (_keys!4143 newMap!16))))))

(declare-fun b!96942 () Bool)

(assert (=> b!96942 (= e!63178 (bvadd #b00000000000000000000000000000001 call!9831))))

(declare-fun d!25833 () Bool)

(declare-fun lt!48547 () (_ BitVec 32))

(assert (=> d!25833 (and (bvsge lt!48547 #b00000000000000000000000000000000) (bvsle lt!48547 (bvsub (size!2252 (_keys!4143 newMap!16)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001))))))

(assert (=> d!25833 (= lt!48547 e!63179)))

(declare-fun c!16411 () Bool)

(assert (=> d!25833 (= c!16411 (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2252 (_keys!4143 newMap!16))))))

(assert (=> d!25833 (and (bvsle (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2252 (_keys!4143 newMap!16))) (bvsge (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) #b00000000000000000000000000000000) (bvsle (size!2252 (_keys!4143 newMap!16)) (size!2252 (_keys!4143 newMap!16))))))

(assert (=> d!25833 (= (arrayCountValidKeys!0 (_keys!4143 newMap!16) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2252 (_keys!4143 newMap!16))) lt!48547)))

(assert (= (and d!25833 c!16411) b!96939))

(assert (= (and d!25833 (not c!16411)) b!96940))

(assert (= (and b!96940 c!16410) b!96942))

(assert (= (and b!96940 (not c!16410)) b!96941))

(assert (= (or b!96942 b!96941) bm!9828))

(assert (=> b!96940 m!104755))

(assert (=> b!96940 m!104755))

(assert (=> b!96940 m!104763))

(declare-fun m!105939 () Bool)

(assert (=> bm!9828 m!105939))

(assert (=> bm!9757 d!25833))

(declare-fun d!25835 () Bool)

(declare-fun res!48885 () Bool)

(declare-fun e!63180 () Bool)

(assert (=> d!25835 (=> res!48885 e!63180)))

(assert (=> d!25835 (= res!48885 (and ((_ is Cons!1569) (toList!779 call!9666)) (= (_1!1172 (h!2162 (toList!779 call!9666))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355))))))

(assert (=> d!25835 (= (containsKey!153 (toList!779 call!9666) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) e!63180)))

(declare-fun b!96943 () Bool)

(declare-fun e!63181 () Bool)

(assert (=> b!96943 (= e!63180 e!63181)))

(declare-fun res!48886 () Bool)

(assert (=> b!96943 (=> (not res!48886) (not e!63181))))

(assert (=> b!96943 (= res!48886 (and (or (not ((_ is Cons!1569) (toList!779 call!9666))) (bvsle (_1!1172 (h!2162 (toList!779 call!9666))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355))) ((_ is Cons!1569) (toList!779 call!9666)) (bvslt (_1!1172 (h!2162 (toList!779 call!9666))) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355))))))

(declare-fun b!96944 () Bool)

(assert (=> b!96944 (= e!63181 (containsKey!153 (t!5495 (toList!779 call!9666)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(assert (= (and d!25835 (not res!48885)) b!96943))

(assert (= (and b!96943 res!48886) b!96944))

(assert (=> b!96944 m!103861))

(declare-fun m!105941 () Bool)

(assert (=> b!96944 m!105941))

(assert (=> d!25335 d!25835))

(declare-fun d!25837 () Bool)

(declare-fun e!63182 () Bool)

(assert (=> d!25837 e!63182))

(declare-fun res!48887 () Bool)

(assert (=> d!25837 (=> res!48887 e!63182)))

(declare-fun lt!48549 () Bool)

(assert (=> d!25837 (= res!48887 (not lt!48549))))

(declare-fun lt!48548 () Bool)

(assert (=> d!25837 (= lt!48549 lt!48548)))

(declare-fun lt!48550 () Unit!2864)

(declare-fun e!63183 () Unit!2864)

(assert (=> d!25837 (= lt!48550 e!63183)))

(declare-fun c!16412 () Bool)

(assert (=> d!25837 (= c!16412 lt!48548)))

(assert (=> d!25837 (= lt!48548 (containsKey!153 (toList!779 lt!48149) (_1!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(assert (=> d!25837 (= (contains!794 lt!48149 (_1!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!48549)))

(declare-fun b!96945 () Bool)

(declare-fun lt!48551 () Unit!2864)

(assert (=> b!96945 (= e!63183 lt!48551)))

(assert (=> b!96945 (= lt!48551 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 lt!48149) (_1!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(assert (=> b!96945 (isDefined!102 (getValueByKey!149 (toList!779 lt!48149) (_1!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun b!96946 () Bool)

(declare-fun Unit!2919 () Unit!2864)

(assert (=> b!96946 (= e!63183 Unit!2919)))

(declare-fun b!96947 () Bool)

(assert (=> b!96947 (= e!63182 (isDefined!102 (getValueByKey!149 (toList!779 lt!48149) (_1!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(assert (= (and d!25837 c!16412) b!96945))

(assert (= (and d!25837 (not c!16412)) b!96946))

(assert (= (and d!25837 (not res!48887)) b!96947))

(declare-fun m!105943 () Bool)

(assert (=> d!25837 m!105943))

(declare-fun m!105945 () Bool)

(assert (=> b!96945 m!105945))

(assert (=> b!96945 m!104657))

(assert (=> b!96945 m!104657))

(declare-fun m!105947 () Bool)

(assert (=> b!96945 m!105947))

(assert (=> b!96947 m!104657))

(assert (=> b!96947 m!104657))

(assert (=> b!96947 m!105947))

(assert (=> d!25415 d!25837))

(declare-fun b!96948 () Bool)

(declare-fun e!63184 () Option!155)

(assert (=> b!96948 (= e!63184 (Some!154 (_2!1172 (h!2162 lt!48148))))))

(declare-fun b!96951 () Bool)

(declare-fun e!63185 () Option!155)

(assert (=> b!96951 (= e!63185 None!153)))

(declare-fun c!16413 () Bool)

(declare-fun d!25839 () Bool)

(assert (=> d!25839 (= c!16413 (and ((_ is Cons!1569) lt!48148) (= (_1!1172 (h!2162 lt!48148)) (_1!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(assert (=> d!25839 (= (getValueByKey!149 lt!48148 (_1!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))) e!63184)))

(declare-fun b!96950 () Bool)

(assert (=> b!96950 (= e!63185 (getValueByKey!149 (t!5495 lt!48148) (_1!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun b!96949 () Bool)

(assert (=> b!96949 (= e!63184 e!63185)))

(declare-fun c!16414 () Bool)

(assert (=> b!96949 (= c!16414 (and ((_ is Cons!1569) lt!48148) (not (= (_1!1172 (h!2162 lt!48148)) (_1!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))))))

(assert (= (and d!25839 c!16413) b!96948))

(assert (= (and d!25839 (not c!16413)) b!96949))

(assert (= (and b!96949 c!16414) b!96950))

(assert (= (and b!96949 (not c!16414)) b!96951))

(declare-fun m!105949 () Bool)

(assert (=> b!96950 m!105949))

(assert (=> d!25415 d!25839))

(declare-fun d!25841 () Bool)

(assert (=> d!25841 (= (getValueByKey!149 lt!48148 (_1!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))) (Some!154 (_2!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun lt!48552 () Unit!2864)

(assert (=> d!25841 (= lt!48552 (choose!583 lt!48148 (_1!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun e!63186 () Bool)

(assert (=> d!25841 e!63186))

(declare-fun res!48888 () Bool)

(assert (=> d!25841 (=> (not res!48888) (not e!63186))))

(assert (=> d!25841 (= res!48888 (isStrictlySorted!303 lt!48148))))

(assert (=> d!25841 (= (lemmaContainsTupThenGetReturnValue!65 lt!48148 (_1!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!48552)))

(declare-fun b!96952 () Bool)

(declare-fun res!48889 () Bool)

(assert (=> b!96952 (=> (not res!48889) (not e!63186))))

(assert (=> b!96952 (= res!48889 (containsKey!153 lt!48148 (_1!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun b!96953 () Bool)

(assert (=> b!96953 (= e!63186 (contains!797 lt!48148 (tuple2!2323 (_1!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(assert (= (and d!25841 res!48888) b!96952))

(assert (= (and b!96952 res!48889) b!96953))

(assert (=> d!25841 m!104651))

(declare-fun m!105951 () Bool)

(assert (=> d!25841 m!105951))

(declare-fun m!105953 () Bool)

(assert (=> d!25841 m!105953))

(declare-fun m!105955 () Bool)

(assert (=> b!96952 m!105955))

(declare-fun m!105957 () Bool)

(assert (=> b!96953 m!105957))

(assert (=> d!25415 d!25841))

(declare-fun b!96954 () Bool)

(declare-fun e!63189 () List!1573)

(declare-fun call!9833 () List!1573)

(assert (=> b!96954 (= e!63189 call!9833)))

(declare-fun c!16415 () Bool)

(declare-fun e!63187 () List!1573)

(declare-fun b!96955 () Bool)

(declare-fun c!16416 () Bool)

(assert (=> b!96955 (= e!63187 (ite c!16415 (t!5495 (toList!779 lt!47818)) (ite c!16416 (Cons!1569 (h!2162 (toList!779 lt!47818)) (t!5495 (toList!779 lt!47818))) Nil!1570)))))

(declare-fun bm!9829 () Bool)

(declare-fun call!9834 () List!1573)

(declare-fun call!9832 () List!1573)

(assert (=> bm!9829 (= call!9834 call!9832)))

(declare-fun b!96956 () Bool)

(declare-fun e!63190 () List!1573)

(assert (=> b!96956 (= e!63190 call!9834)))

(declare-fun b!96958 () Bool)

(assert (=> b!96958 (= c!16416 (and ((_ is Cons!1569) (toList!779 lt!47818)) (bvsgt (_1!1172 (h!2162 (toList!779 lt!47818))) (_1!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(declare-fun e!63191 () List!1573)

(assert (=> b!96958 (= e!63191 e!63190)))

(declare-fun b!96959 () Bool)

(assert (=> b!96959 (= e!63191 call!9832)))

(declare-fun c!16418 () Bool)

(declare-fun bm!9830 () Bool)

(assert (=> bm!9830 (= call!9833 ($colon$colon!77 e!63187 (ite c!16418 (h!2162 (toList!779 lt!47818)) (tuple2!2323 (_1!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))))))

(declare-fun c!16417 () Bool)

(assert (=> bm!9830 (= c!16417 c!16418)))

(declare-fun b!96960 () Bool)

(declare-fun res!48890 () Bool)

(declare-fun e!63188 () Bool)

(assert (=> b!96960 (=> (not res!48890) (not e!63188))))

(declare-fun lt!48553 () List!1573)

(assert (=> b!96960 (= res!48890 (containsKey!153 lt!48553 (_1!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun b!96961 () Bool)

(assert (=> b!96961 (= e!63187 (insertStrictlySorted!68 (t!5495 (toList!779 lt!47818)) (_1!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun bm!9831 () Bool)

(assert (=> bm!9831 (= call!9832 call!9833)))

(declare-fun d!25843 () Bool)

(assert (=> d!25843 e!63188))

(declare-fun res!48891 () Bool)

(assert (=> d!25843 (=> (not res!48891) (not e!63188))))

(assert (=> d!25843 (= res!48891 (isStrictlySorted!303 lt!48553))))

(assert (=> d!25843 (= lt!48553 e!63189)))

(assert (=> d!25843 (= c!16418 (and ((_ is Cons!1569) (toList!779 lt!47818)) (bvslt (_1!1172 (h!2162 (toList!779 lt!47818))) (_1!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(assert (=> d!25843 (isStrictlySorted!303 (toList!779 lt!47818))))

(assert (=> d!25843 (= (insertStrictlySorted!68 (toList!779 lt!47818) (_1!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!48553)))

(declare-fun b!96957 () Bool)

(assert (=> b!96957 (= e!63190 call!9834)))

(declare-fun b!96962 () Bool)

(assert (=> b!96962 (= e!63188 (contains!797 lt!48553 (tuple2!2323 (_1!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))) (_2!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(declare-fun b!96963 () Bool)

(assert (=> b!96963 (= e!63189 e!63191)))

(assert (=> b!96963 (= c!16415 (and ((_ is Cons!1569) (toList!779 lt!47818)) (= (_1!1172 (h!2162 (toList!779 lt!47818))) (_1!1172 (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))))))

(assert (= (and d!25843 c!16418) b!96954))

(assert (= (and d!25843 (not c!16418)) b!96963))

(assert (= (and b!96963 c!16415) b!96959))

(assert (= (and b!96963 (not c!16415)) b!96958))

(assert (= (and b!96958 c!16416) b!96957))

(assert (= (and b!96958 (not c!16416)) b!96956))

(assert (= (or b!96957 b!96956) bm!9829))

(assert (= (or b!96959 bm!9829) bm!9831))

(assert (= (or b!96954 bm!9831) bm!9830))

(assert (= (and bm!9830 c!16417) b!96961))

(assert (= (and bm!9830 (not c!16417)) b!96955))

(assert (= (and d!25843 res!48891) b!96960))

(assert (= (and b!96960 res!48890) b!96962))

(declare-fun m!105959 () Bool)

(assert (=> b!96962 m!105959))

(declare-fun m!105961 () Bool)

(assert (=> b!96960 m!105961))

(declare-fun m!105963 () Bool)

(assert (=> bm!9830 m!105963))

(declare-fun m!105965 () Bool)

(assert (=> b!96961 m!105965))

(declare-fun m!105967 () Bool)

(assert (=> d!25843 m!105967))

(declare-fun m!105969 () Bool)

(assert (=> d!25843 m!105969))

(assert (=> d!25415 d!25843))

(assert (=> b!96217 d!25313))

(assert (=> b!96289 d!25543))

(assert (=> b!96050 d!25543))

(declare-fun d!25845 () Bool)

(assert (=> d!25845 (= (apply!91 lt!48094 #b1000000000000000000000000000000000000000000000000000000000000000) (get!1273 (getValueByKey!149 (toList!779 lt!48094) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4010 () Bool)

(assert (= bs!4010 d!25845))

(declare-fun m!105971 () Bool)

(assert (=> bs!4010 m!105971))

(assert (=> bs!4010 m!105971))

(declare-fun m!105973 () Bool)

(assert (=> bs!4010 m!105973))

(assert (=> b!96227 d!25845))

(assert (=> d!25357 d!25291))

(declare-fun d!25847 () Bool)

(declare-fun res!48894 () Bool)

(declare-fun e!63192 () Bool)

(assert (=> d!25847 (=> res!48894 e!63192)))

(assert (=> d!25847 (= res!48894 (bvsge (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992))))))))

(assert (=> d!25847 (= (arrayNoDuplicates!0 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!16223 (Cons!1570 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16120 (Cons!1570 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) Nil!1571) Nil!1571)) (ite c!16120 (Cons!1570 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) Nil!1571) Nil!1571))) e!63192)))

(declare-fun b!96964 () Bool)

(declare-fun e!63193 () Bool)

(declare-fun e!63195 () Bool)

(assert (=> b!96964 (= e!63193 e!63195)))

(declare-fun c!16419 () Bool)

(assert (=> b!96964 (= c!16419 (validKeyInArray!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun b!96965 () Bool)

(assert (=> b!96965 (= e!63192 e!63193)))

(declare-fun res!48892 () Bool)

(assert (=> b!96965 (=> (not res!48892) (not e!63193))))

(declare-fun e!63194 () Bool)

(assert (=> b!96965 (= res!48892 (not e!63194))))

(declare-fun res!48893 () Bool)

(assert (=> b!96965 (=> (not res!48893) (not e!63194))))

(assert (=> b!96965 (= res!48893 (validKeyInArray!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun b!96966 () Bool)

(assert (=> b!96966 (= e!63194 (contains!796 (ite c!16223 (Cons!1570 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16120 (Cons!1570 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) Nil!1571) Nil!1571)) (ite c!16120 (Cons!1570 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) Nil!1571) Nil!1571)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001))))))

(declare-fun call!9835 () Bool)

(declare-fun bm!9832 () Bool)

(assert (=> bm!9832 (= call!9835 (arrayNoDuplicates!0 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001 #b00000000000000000000000000000001) (ite c!16419 (Cons!1570 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001 #b00000000000000000000000000000001)) (ite c!16223 (Cons!1570 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16120 (Cons!1570 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) Nil!1571) Nil!1571)) (ite c!16120 (Cons!1570 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) Nil!1571) Nil!1571))) (ite c!16223 (Cons!1570 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) (bvadd from!355 #b00000000000000000000000000000001)) (ite c!16120 (Cons!1570 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) Nil!1571) Nil!1571)) (ite c!16120 (Cons!1570 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) Nil!1571) Nil!1571)))))))

(declare-fun b!96967 () Bool)

(assert (=> b!96967 (= e!63195 call!9835)))

(declare-fun b!96968 () Bool)

(assert (=> b!96968 (= e!63195 call!9835)))

(assert (= (and d!25847 (not res!48894)) b!96965))

(assert (= (and b!96965 res!48893) b!96966))

(assert (= (and b!96965 res!48892) b!96964))

(assert (= (and b!96964 c!16419) b!96967))

(assert (= (and b!96964 (not c!16419)) b!96968))

(assert (= (or b!96967 b!96968) bm!9832))

(declare-fun m!105975 () Bool)

(assert (=> b!96964 m!105975))

(assert (=> b!96964 m!105975))

(declare-fun m!105977 () Bool)

(assert (=> b!96964 m!105977))

(assert (=> b!96965 m!105975))

(assert (=> b!96965 m!105975))

(assert (=> b!96965 m!105977))

(assert (=> b!96966 m!105975))

(assert (=> b!96966 m!105975))

(declare-fun m!105979 () Bool)

(assert (=> b!96966 m!105979))

(assert (=> bm!9832 m!105975))

(declare-fun m!105981 () Bool)

(assert (=> bm!9832 m!105981))

(assert (=> bm!9759 d!25847))

(declare-fun d!25849 () Bool)

(declare-fun e!63196 () Bool)

(assert (=> d!25849 e!63196))

(declare-fun res!48895 () Bool)

(assert (=> d!25849 (=> res!48895 e!63196)))

(declare-fun lt!48555 () Bool)

(assert (=> d!25849 (= res!48895 (not lt!48555))))

(declare-fun lt!48554 () Bool)

(assert (=> d!25849 (= lt!48555 lt!48554)))

(declare-fun lt!48556 () Unit!2864)

(declare-fun e!63197 () Unit!2864)

(assert (=> d!25849 (= lt!48556 e!63197)))

(declare-fun c!16420 () Bool)

(assert (=> d!25849 (= c!16420 lt!48554)))

(assert (=> d!25849 (= lt!48554 (containsKey!153 (toList!779 lt!48094) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!25849 (= (contains!794 lt!48094 #b1000000000000000000000000000000000000000000000000000000000000000) lt!48555)))

(declare-fun b!96969 () Bool)

(declare-fun lt!48557 () Unit!2864)

(assert (=> b!96969 (= e!63197 lt!48557)))

(assert (=> b!96969 (= lt!48557 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 lt!48094) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!96969 (isDefined!102 (getValueByKey!149 (toList!779 lt!48094) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!96970 () Bool)

(declare-fun Unit!2920 () Unit!2864)

(assert (=> b!96970 (= e!63197 Unit!2920)))

(declare-fun b!96971 () Bool)

(assert (=> b!96971 (= e!63196 (isDefined!102 (getValueByKey!149 (toList!779 lt!48094) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25849 c!16420) b!96969))

(assert (= (and d!25849 (not c!16420)) b!96970))

(assert (= (and d!25849 (not res!48895)) b!96971))

(declare-fun m!105983 () Bool)

(assert (=> d!25849 m!105983))

(declare-fun m!105985 () Bool)

(assert (=> b!96969 m!105985))

(assert (=> b!96969 m!105971))

(assert (=> b!96969 m!105971))

(declare-fun m!105987 () Bool)

(assert (=> b!96969 m!105987))

(assert (=> b!96971 m!105971))

(assert (=> b!96971 m!105971))

(assert (=> b!96971 m!105987))

(assert (=> bm!9752 d!25849))

(declare-fun d!25851 () Bool)

(declare-fun e!63198 () Bool)

(assert (=> d!25851 e!63198))

(declare-fun res!48896 () Bool)

(assert (=> d!25851 (=> (not res!48896) (not e!63198))))

(declare-fun lt!48560 () ListLongMap!1527)

(assert (=> d!25851 (= res!48896 (contains!794 lt!48560 (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))))))

(declare-fun lt!48559 () List!1573)

(assert (=> d!25851 (= lt!48560 (ListLongMap!1528 lt!48559))))

(declare-fun lt!48561 () Unit!2864)

(declare-fun lt!48558 () Unit!2864)

(assert (=> d!25851 (= lt!48561 lt!48558)))

(assert (=> d!25851 (= (getValueByKey!149 lt!48559 (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))) (Some!154 (_2!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))))))

(assert (=> d!25851 (= lt!48558 (lemmaContainsTupThenGetReturnValue!65 lt!48559 (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))) (_2!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))))))

(assert (=> d!25851 (= lt!48559 (insertStrictlySorted!68 (toList!779 call!9736) (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))) (_2!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))))))

(assert (=> d!25851 (= (+!134 call!9736 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))) lt!48560)))

(declare-fun b!96972 () Bool)

(declare-fun res!48897 () Bool)

(assert (=> b!96972 (=> (not res!48897) (not e!63198))))

(assert (=> b!96972 (= res!48897 (= (getValueByKey!149 (toList!779 lt!48560) (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))) (Some!154 (_2!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))))))))

(declare-fun b!96973 () Bool)

(assert (=> b!96973 (= e!63198 (contains!797 (toList!779 lt!48560) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))))))

(assert (= (and d!25851 res!48896) b!96972))

(assert (= (and b!96972 res!48897) b!96973))

(declare-fun m!105989 () Bool)

(assert (=> d!25851 m!105989))

(declare-fun m!105991 () Bool)

(assert (=> d!25851 m!105991))

(declare-fun m!105993 () Bool)

(assert (=> d!25851 m!105993))

(declare-fun m!105995 () Bool)

(assert (=> d!25851 m!105995))

(declare-fun m!105997 () Bool)

(assert (=> b!96972 m!105997))

(declare-fun m!105999 () Bool)

(assert (=> b!96973 m!105999))

(assert (=> b!96094 d!25851))

(declare-fun d!25853 () Bool)

(assert (=> d!25853 (= (inRange!0 (ite c!16150 (index!3151 lt!47915) (ite c!16147 (index!3150 lt!47921) (index!3153 lt!47921))) (mask!6542 newMap!16)) (and (bvsge (ite c!16150 (index!3151 lt!47915) (ite c!16147 (index!3150 lt!47921) (index!3153 lt!47921))) #b00000000000000000000000000000000) (bvslt (ite c!16150 (index!3151 lt!47915) (ite c!16147 (index!3150 lt!47921) (index!3153 lt!47921))) (bvadd (mask!6542 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> bm!9718 d!25853))

(declare-fun lt!48562 () Bool)

(declare-fun d!25855 () Bool)

(assert (=> d!25855 (= lt!48562 (select (content!100 (toList!779 lt!48141)) (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))))

(declare-fun e!63199 () Bool)

(assert (=> d!25855 (= lt!48562 e!63199)))

(declare-fun res!48898 () Bool)

(assert (=> d!25855 (=> (not res!48898) (not e!63199))))

(assert (=> d!25855 (= res!48898 ((_ is Cons!1569) (toList!779 lt!48141)))))

(assert (=> d!25855 (= (contains!797 (toList!779 lt!48141) (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))) lt!48562)))

(declare-fun b!96974 () Bool)

(declare-fun e!63200 () Bool)

(assert (=> b!96974 (= e!63199 e!63200)))

(declare-fun res!48899 () Bool)

(assert (=> b!96974 (=> res!48899 e!63200)))

(assert (=> b!96974 (= res!48899 (= (h!2162 (toList!779 lt!48141)) (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))))

(declare-fun b!96975 () Bool)

(assert (=> b!96975 (= e!63200 (contains!797 (t!5495 (toList!779 lt!48141)) (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))))

(assert (= (and d!25855 res!48898) b!96974))

(assert (= (and b!96974 (not res!48899)) b!96975))

(declare-fun m!106001 () Bool)

(assert (=> d!25855 m!106001))

(declare-fun m!106003 () Bool)

(assert (=> d!25855 m!106003))

(declare-fun m!106005 () Bool)

(assert (=> b!96975 m!106005))

(assert (=> b!96280 d!25855))

(assert (=> d!25337 d!25523))

(declare-fun b!96976 () Bool)

(declare-fun e!63201 () Option!155)

(assert (=> b!96976 (= e!63201 (Some!154 (_2!1172 (h!2162 (toList!779 lt!47949)))))))

(declare-fun b!96979 () Bool)

(declare-fun e!63202 () Option!155)

(assert (=> b!96979 (= e!63202 None!153)))

(declare-fun d!25857 () Bool)

(declare-fun c!16421 () Bool)

(assert (=> d!25857 (= c!16421 (and ((_ is Cons!1569) (toList!779 lt!47949)) (= (_1!1172 (h!2162 (toList!779 lt!47949))) (_1!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!25857 (= (getValueByKey!149 (toList!779 lt!47949) (_1!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!63201)))

(declare-fun b!96978 () Bool)

(assert (=> b!96978 (= e!63202 (getValueByKey!149 (t!5495 (toList!779 lt!47949)) (_1!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!96977 () Bool)

(assert (=> b!96977 (= e!63201 e!63202)))

(declare-fun c!16422 () Bool)

(assert (=> b!96977 (= c!16422 (and ((_ is Cons!1569) (toList!779 lt!47949)) (not (= (_1!1172 (h!2162 (toList!779 lt!47949))) (_1!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(assert (= (and d!25857 c!16421) b!96976))

(assert (= (and d!25857 (not c!16421)) b!96977))

(assert (= (and b!96977 c!16422) b!96978))

(assert (= (and b!96977 (not c!16422)) b!96979))

(declare-fun m!106007 () Bool)

(assert (=> b!96978 m!106007))

(assert (=> b!96043 d!25857))

(declare-fun d!25859 () Bool)

(assert (=> d!25859 (= (apply!91 (+!134 lt!48050 (tuple2!2323 lt!48052 (minValue!2342 newMap!16))) lt!48041) (apply!91 lt!48050 lt!48041))))

(declare-fun lt!48563 () Unit!2864)

(assert (=> d!25859 (= lt!48563 (choose!580 lt!48050 lt!48052 (minValue!2342 newMap!16) lt!48041))))

(declare-fun e!63203 () Bool)

(assert (=> d!25859 e!63203))

(declare-fun res!48900 () Bool)

(assert (=> d!25859 (=> (not res!48900) (not e!63203))))

(assert (=> d!25859 (= res!48900 (contains!794 lt!48050 lt!48041))))

(assert (=> d!25859 (= (addApplyDifferent!67 lt!48050 lt!48052 (minValue!2342 newMap!16) lt!48041) lt!48563)))

(declare-fun b!96980 () Bool)

(assert (=> b!96980 (= e!63203 (not (= lt!48041 lt!48052)))))

(assert (= (and d!25859 res!48900) b!96980))

(declare-fun m!106009 () Bool)

(assert (=> d!25859 m!106009))

(assert (=> d!25859 m!104401))

(assert (=> d!25859 m!104423))

(declare-fun m!106011 () Bool)

(assert (=> d!25859 m!106011))

(assert (=> d!25859 m!104401))

(assert (=> d!25859 m!104425))

(assert (=> b!96159 d!25859))

(declare-fun d!25861 () Bool)

(assert (=> d!25861 (= (apply!91 (+!134 lt!48036 (tuple2!2323 lt!48053 (minValue!2342 newMap!16))) lt!48049) (get!1273 (getValueByKey!149 (toList!779 (+!134 lt!48036 (tuple2!2323 lt!48053 (minValue!2342 newMap!16)))) lt!48049)))))

(declare-fun bs!4011 () Bool)

(assert (= bs!4011 d!25861))

(declare-fun m!106013 () Bool)

(assert (=> bs!4011 m!106013))

(assert (=> bs!4011 m!106013))

(declare-fun m!106015 () Bool)

(assert (=> bs!4011 m!106015))

(assert (=> b!96159 d!25861))

(declare-fun d!25863 () Bool)

(assert (=> d!25863 (= (apply!91 lt!48050 lt!48041) (get!1273 (getValueByKey!149 (toList!779 lt!48050) lt!48041)))))

(declare-fun bs!4012 () Bool)

(assert (= bs!4012 d!25863))

(declare-fun m!106017 () Bool)

(assert (=> bs!4012 m!106017))

(assert (=> bs!4012 m!106017))

(declare-fun m!106019 () Bool)

(assert (=> bs!4012 m!106019))

(assert (=> b!96159 d!25863))

(declare-fun d!25865 () Bool)

(declare-fun e!63204 () Bool)

(assert (=> d!25865 e!63204))

(declare-fun res!48901 () Bool)

(assert (=> d!25865 (=> (not res!48901) (not e!63204))))

(declare-fun lt!48566 () ListLongMap!1527)

(assert (=> d!25865 (= res!48901 (contains!794 lt!48566 (_1!1172 (tuple2!2323 lt!48052 (minValue!2342 newMap!16)))))))

(declare-fun lt!48565 () List!1573)

(assert (=> d!25865 (= lt!48566 (ListLongMap!1528 lt!48565))))

(declare-fun lt!48567 () Unit!2864)

(declare-fun lt!48564 () Unit!2864)

(assert (=> d!25865 (= lt!48567 lt!48564)))

(assert (=> d!25865 (= (getValueByKey!149 lt!48565 (_1!1172 (tuple2!2323 lt!48052 (minValue!2342 newMap!16)))) (Some!154 (_2!1172 (tuple2!2323 lt!48052 (minValue!2342 newMap!16)))))))

(assert (=> d!25865 (= lt!48564 (lemmaContainsTupThenGetReturnValue!65 lt!48565 (_1!1172 (tuple2!2323 lt!48052 (minValue!2342 newMap!16))) (_2!1172 (tuple2!2323 lt!48052 (minValue!2342 newMap!16)))))))

(assert (=> d!25865 (= lt!48565 (insertStrictlySorted!68 (toList!779 lt!48050) (_1!1172 (tuple2!2323 lt!48052 (minValue!2342 newMap!16))) (_2!1172 (tuple2!2323 lt!48052 (minValue!2342 newMap!16)))))))

(assert (=> d!25865 (= (+!134 lt!48050 (tuple2!2323 lt!48052 (minValue!2342 newMap!16))) lt!48566)))

(declare-fun b!96981 () Bool)

(declare-fun res!48902 () Bool)

(assert (=> b!96981 (=> (not res!48902) (not e!63204))))

(assert (=> b!96981 (= res!48902 (= (getValueByKey!149 (toList!779 lt!48566) (_1!1172 (tuple2!2323 lt!48052 (minValue!2342 newMap!16)))) (Some!154 (_2!1172 (tuple2!2323 lt!48052 (minValue!2342 newMap!16))))))))

(declare-fun b!96982 () Bool)

(assert (=> b!96982 (= e!63204 (contains!797 (toList!779 lt!48566) (tuple2!2323 lt!48052 (minValue!2342 newMap!16))))))

(assert (= (and d!25865 res!48901) b!96981))

(assert (= (and b!96981 res!48902) b!96982))

(declare-fun m!106021 () Bool)

(assert (=> d!25865 m!106021))

(declare-fun m!106023 () Bool)

(assert (=> d!25865 m!106023))

(declare-fun m!106025 () Bool)

(assert (=> d!25865 m!106025))

(declare-fun m!106027 () Bool)

(assert (=> d!25865 m!106027))

(declare-fun m!106029 () Bool)

(assert (=> b!96981 m!106029))

(declare-fun m!106031 () Bool)

(assert (=> b!96982 m!106031))

(assert (=> b!96159 d!25865))

(declare-fun d!25867 () Bool)

(declare-fun e!63205 () Bool)

(assert (=> d!25867 e!63205))

(declare-fun res!48903 () Bool)

(assert (=> d!25867 (=> (not res!48903) (not e!63205))))

(declare-fun lt!48570 () ListLongMap!1527)

(assert (=> d!25867 (= res!48903 (contains!794 lt!48570 (_1!1172 (tuple2!2323 lt!48053 (minValue!2342 newMap!16)))))))

(declare-fun lt!48569 () List!1573)

(assert (=> d!25867 (= lt!48570 (ListLongMap!1528 lt!48569))))

(declare-fun lt!48571 () Unit!2864)

(declare-fun lt!48568 () Unit!2864)

(assert (=> d!25867 (= lt!48571 lt!48568)))

(assert (=> d!25867 (= (getValueByKey!149 lt!48569 (_1!1172 (tuple2!2323 lt!48053 (minValue!2342 newMap!16)))) (Some!154 (_2!1172 (tuple2!2323 lt!48053 (minValue!2342 newMap!16)))))))

(assert (=> d!25867 (= lt!48568 (lemmaContainsTupThenGetReturnValue!65 lt!48569 (_1!1172 (tuple2!2323 lt!48053 (minValue!2342 newMap!16))) (_2!1172 (tuple2!2323 lt!48053 (minValue!2342 newMap!16)))))))

(assert (=> d!25867 (= lt!48569 (insertStrictlySorted!68 (toList!779 lt!48036) (_1!1172 (tuple2!2323 lt!48053 (minValue!2342 newMap!16))) (_2!1172 (tuple2!2323 lt!48053 (minValue!2342 newMap!16)))))))

(assert (=> d!25867 (= (+!134 lt!48036 (tuple2!2323 lt!48053 (minValue!2342 newMap!16))) lt!48570)))

(declare-fun b!96983 () Bool)

(declare-fun res!48904 () Bool)

(assert (=> b!96983 (=> (not res!48904) (not e!63205))))

(assert (=> b!96983 (= res!48904 (= (getValueByKey!149 (toList!779 lt!48570) (_1!1172 (tuple2!2323 lt!48053 (minValue!2342 newMap!16)))) (Some!154 (_2!1172 (tuple2!2323 lt!48053 (minValue!2342 newMap!16))))))))

(declare-fun b!96984 () Bool)

(assert (=> b!96984 (= e!63205 (contains!797 (toList!779 lt!48570) (tuple2!2323 lt!48053 (minValue!2342 newMap!16))))))

(assert (= (and d!25867 res!48903) b!96983))

(assert (= (and b!96983 res!48904) b!96984))

(declare-fun m!106033 () Bool)

(assert (=> d!25867 m!106033))

(declare-fun m!106035 () Bool)

(assert (=> d!25867 m!106035))

(declare-fun m!106037 () Bool)

(assert (=> d!25867 m!106037))

(declare-fun m!106039 () Bool)

(assert (=> d!25867 m!106039))

(declare-fun m!106041 () Bool)

(assert (=> b!96983 m!106041))

(declare-fun m!106043 () Bool)

(assert (=> b!96984 m!106043))

(assert (=> b!96159 d!25867))

(declare-fun d!25869 () Bool)

(declare-fun e!63206 () Bool)

(assert (=> d!25869 e!63206))

(declare-fun res!48905 () Bool)

(assert (=> d!25869 (=> (not res!48905) (not e!63206))))

(declare-fun lt!48574 () ListLongMap!1527)

(assert (=> d!25869 (= res!48905 (contains!794 lt!48574 (_1!1172 (tuple2!2323 lt!48044 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))))))))

(declare-fun lt!48573 () List!1573)

(assert (=> d!25869 (= lt!48574 (ListLongMap!1528 lt!48573))))

(declare-fun lt!48575 () Unit!2864)

(declare-fun lt!48572 () Unit!2864)

(assert (=> d!25869 (= lt!48575 lt!48572)))

(assert (=> d!25869 (= (getValueByKey!149 lt!48573 (_1!1172 (tuple2!2323 lt!48044 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))))) (Some!154 (_2!1172 (tuple2!2323 lt!48044 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))))))))

(assert (=> d!25869 (= lt!48572 (lemmaContainsTupThenGetReturnValue!65 lt!48573 (_1!1172 (tuple2!2323 lt!48044 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)))) (_2!1172 (tuple2!2323 lt!48044 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))))))))

(assert (=> d!25869 (= lt!48573 (insertStrictlySorted!68 (toList!779 lt!48039) (_1!1172 (tuple2!2323 lt!48044 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)))) (_2!1172 (tuple2!2323 lt!48044 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))))))))

(assert (=> d!25869 (= (+!134 lt!48039 (tuple2!2323 lt!48044 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)))) lt!48574)))

(declare-fun b!96985 () Bool)

(declare-fun res!48906 () Bool)

(assert (=> b!96985 (=> (not res!48906) (not e!63206))))

(assert (=> b!96985 (= res!48906 (= (getValueByKey!149 (toList!779 lt!48574) (_1!1172 (tuple2!2323 lt!48044 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))))) (Some!154 (_2!1172 (tuple2!2323 lt!48044 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)))))))))

(declare-fun b!96986 () Bool)

(assert (=> b!96986 (= e!63206 (contains!797 (toList!779 lt!48574) (tuple2!2323 lt!48044 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)))))))

(assert (= (and d!25869 res!48905) b!96985))

(assert (= (and b!96985 res!48906) b!96986))

(declare-fun m!106045 () Bool)

(assert (=> d!25869 m!106045))

(declare-fun m!106047 () Bool)

(assert (=> d!25869 m!106047))

(declare-fun m!106049 () Bool)

(assert (=> d!25869 m!106049))

(declare-fun m!106051 () Bool)

(assert (=> d!25869 m!106051))

(declare-fun m!106053 () Bool)

(assert (=> b!96985 m!106053))

(declare-fun m!106055 () Bool)

(assert (=> b!96986 m!106055))

(assert (=> b!96159 d!25869))

(declare-fun d!25871 () Bool)

(declare-fun e!63207 () Bool)

(assert (=> d!25871 e!63207))

(declare-fun res!48907 () Bool)

(assert (=> d!25871 (=> res!48907 e!63207)))

(declare-fun lt!48577 () Bool)

(assert (=> d!25871 (= res!48907 (not lt!48577))))

(declare-fun lt!48576 () Bool)

(assert (=> d!25871 (= lt!48577 lt!48576)))

(declare-fun lt!48578 () Unit!2864)

(declare-fun e!63208 () Unit!2864)

(assert (=> d!25871 (= lt!48578 e!63208)))

(declare-fun c!16423 () Bool)

(assert (=> d!25871 (= c!16423 lt!48576)))

(assert (=> d!25871 (= lt!48576 (containsKey!153 (toList!779 (+!134 lt!48047 (tuple2!2323 lt!48046 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))))) lt!48043))))

(assert (=> d!25871 (= (contains!794 (+!134 lt!48047 (tuple2!2323 lt!48046 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)))) lt!48043) lt!48577)))

(declare-fun b!96987 () Bool)

(declare-fun lt!48579 () Unit!2864)

(assert (=> b!96987 (= e!63208 lt!48579)))

(assert (=> b!96987 (= lt!48579 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 (+!134 lt!48047 (tuple2!2323 lt!48046 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))))) lt!48043))))

(assert (=> b!96987 (isDefined!102 (getValueByKey!149 (toList!779 (+!134 lt!48047 (tuple2!2323 lt!48046 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))))) lt!48043))))

(declare-fun b!96988 () Bool)

(declare-fun Unit!2921 () Unit!2864)

(assert (=> b!96988 (= e!63208 Unit!2921)))

(declare-fun b!96989 () Bool)

(assert (=> b!96989 (= e!63207 (isDefined!102 (getValueByKey!149 (toList!779 (+!134 lt!48047 (tuple2!2323 lt!48046 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))))) lt!48043)))))

(assert (= (and d!25871 c!16423) b!96987))

(assert (= (and d!25871 (not c!16423)) b!96988))

(assert (= (and d!25871 (not res!48907)) b!96989))

(declare-fun m!106057 () Bool)

(assert (=> d!25871 m!106057))

(declare-fun m!106059 () Bool)

(assert (=> b!96987 m!106059))

(declare-fun m!106061 () Bool)

(assert (=> b!96987 m!106061))

(assert (=> b!96987 m!106061))

(declare-fun m!106063 () Bool)

(assert (=> b!96987 m!106063))

(assert (=> b!96989 m!106061))

(assert (=> b!96989 m!106061))

(assert (=> b!96989 m!106063))

(assert (=> b!96159 d!25871))

(declare-fun d!25873 () Bool)

(assert (=> d!25873 (= (apply!91 (+!134 lt!48050 (tuple2!2323 lt!48052 (minValue!2342 newMap!16))) lt!48041) (get!1273 (getValueByKey!149 (toList!779 (+!134 lt!48050 (tuple2!2323 lt!48052 (minValue!2342 newMap!16)))) lt!48041)))))

(declare-fun bs!4013 () Bool)

(assert (= bs!4013 d!25873))

(declare-fun m!106065 () Bool)

(assert (=> bs!4013 m!106065))

(assert (=> bs!4013 m!106065))

(declare-fun m!106067 () Bool)

(assert (=> bs!4013 m!106067))

(assert (=> b!96159 d!25873))

(declare-fun d!25875 () Bool)

(assert (=> d!25875 (= (apply!91 lt!48039 lt!48034) (get!1273 (getValueByKey!149 (toList!779 lt!48039) lt!48034)))))

(declare-fun bs!4014 () Bool)

(assert (= bs!4014 d!25875))

(declare-fun m!106069 () Bool)

(assert (=> bs!4014 m!106069))

(assert (=> bs!4014 m!106069))

(declare-fun m!106071 () Bool)

(assert (=> bs!4014 m!106071))

(assert (=> b!96159 d!25875))

(assert (=> b!96159 d!25441))

(declare-fun d!25877 () Bool)

(assert (=> d!25877 (= (apply!91 lt!48036 lt!48049) (get!1273 (getValueByKey!149 (toList!779 lt!48036) lt!48049)))))

(declare-fun bs!4015 () Bool)

(assert (= bs!4015 d!25877))

(declare-fun m!106073 () Bool)

(assert (=> bs!4015 m!106073))

(assert (=> bs!4015 m!106073))

(declare-fun m!106075 () Bool)

(assert (=> bs!4015 m!106075))

(assert (=> b!96159 d!25877))

(declare-fun d!25879 () Bool)

(declare-fun e!63209 () Bool)

(assert (=> d!25879 e!63209))

(declare-fun res!48908 () Bool)

(assert (=> d!25879 (=> (not res!48908) (not e!63209))))

(declare-fun lt!48582 () ListLongMap!1527)

(assert (=> d!25879 (= res!48908 (contains!794 lt!48582 (_1!1172 (tuple2!2323 lt!48046 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))))))))

(declare-fun lt!48581 () List!1573)

(assert (=> d!25879 (= lt!48582 (ListLongMap!1528 lt!48581))))

(declare-fun lt!48583 () Unit!2864)

(declare-fun lt!48580 () Unit!2864)

(assert (=> d!25879 (= lt!48583 lt!48580)))

(assert (=> d!25879 (= (getValueByKey!149 lt!48581 (_1!1172 (tuple2!2323 lt!48046 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))))) (Some!154 (_2!1172 (tuple2!2323 lt!48046 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))))))))

(assert (=> d!25879 (= lt!48580 (lemmaContainsTupThenGetReturnValue!65 lt!48581 (_1!1172 (tuple2!2323 lt!48046 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)))) (_2!1172 (tuple2!2323 lt!48046 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))))))))

(assert (=> d!25879 (= lt!48581 (insertStrictlySorted!68 (toList!779 lt!48047) (_1!1172 (tuple2!2323 lt!48046 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)))) (_2!1172 (tuple2!2323 lt!48046 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))))))))

(assert (=> d!25879 (= (+!134 lt!48047 (tuple2!2323 lt!48046 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)))) lt!48582)))

(declare-fun b!96990 () Bool)

(declare-fun res!48909 () Bool)

(assert (=> b!96990 (=> (not res!48909) (not e!63209))))

(assert (=> b!96990 (= res!48909 (= (getValueByKey!149 (toList!779 lt!48582) (_1!1172 (tuple2!2323 lt!48046 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))))) (Some!154 (_2!1172 (tuple2!2323 lt!48046 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)))))))))

(declare-fun b!96991 () Bool)

(assert (=> b!96991 (= e!63209 (contains!797 (toList!779 lt!48582) (tuple2!2323 lt!48046 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)))))))

(assert (= (and d!25879 res!48908) b!96990))

(assert (= (and b!96990 res!48909) b!96991))

(declare-fun m!106077 () Bool)

(assert (=> d!25879 m!106077))

(declare-fun m!106079 () Bool)

(assert (=> d!25879 m!106079))

(declare-fun m!106081 () Bool)

(assert (=> d!25879 m!106081))

(declare-fun m!106083 () Bool)

(assert (=> d!25879 m!106083))

(declare-fun m!106085 () Bool)

(assert (=> b!96990 m!106085))

(declare-fun m!106087 () Bool)

(assert (=> b!96991 m!106087))

(assert (=> b!96159 d!25879))

(declare-fun d!25881 () Bool)

(assert (=> d!25881 (= (apply!91 (+!134 lt!48036 (tuple2!2323 lt!48053 (minValue!2342 newMap!16))) lt!48049) (apply!91 lt!48036 lt!48049))))

(declare-fun lt!48584 () Unit!2864)

(assert (=> d!25881 (= lt!48584 (choose!580 lt!48036 lt!48053 (minValue!2342 newMap!16) lt!48049))))

(declare-fun e!63210 () Bool)

(assert (=> d!25881 e!63210))

(declare-fun res!48910 () Bool)

(assert (=> d!25881 (=> (not res!48910) (not e!63210))))

(assert (=> d!25881 (= res!48910 (contains!794 lt!48036 lt!48049))))

(assert (=> d!25881 (= (addApplyDifferent!67 lt!48036 lt!48053 (minValue!2342 newMap!16) lt!48049) lt!48584)))

(declare-fun b!96992 () Bool)

(assert (=> b!96992 (= e!63210 (not (= lt!48049 lt!48053)))))

(assert (= (and d!25881 res!48910) b!96992))

(declare-fun m!106089 () Bool)

(assert (=> d!25881 m!106089))

(assert (=> d!25881 m!104411))

(assert (=> d!25881 m!104399))

(declare-fun m!106091 () Bool)

(assert (=> d!25881 m!106091))

(assert (=> d!25881 m!104411))

(assert (=> d!25881 m!104413))

(assert (=> b!96159 d!25881))

(declare-fun d!25883 () Bool)

(assert (=> d!25883 (contains!794 (+!134 lt!48047 (tuple2!2323 lt!48046 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)))) lt!48043)))

(declare-fun lt!48585 () Unit!2864)

(assert (=> d!25883 (= lt!48585 (choose!581 lt!48047 lt!48046 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)) lt!48043))))

(assert (=> d!25883 (contains!794 lt!48047 lt!48043)))

(assert (=> d!25883 (= (addStillContains!67 lt!48047 lt!48046 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)) lt!48043) lt!48585)))

(declare-fun bs!4016 () Bool)

(assert (= bs!4016 d!25883))

(assert (=> bs!4016 m!104407))

(assert (=> bs!4016 m!104407))

(assert (=> bs!4016 m!104409))

(declare-fun m!106093 () Bool)

(assert (=> bs!4016 m!106093))

(declare-fun m!106095 () Bool)

(assert (=> bs!4016 m!106095))

(assert (=> b!96159 d!25883))

(declare-fun d!25885 () Bool)

(assert (=> d!25885 (= (apply!91 (+!134 lt!48039 (tuple2!2323 lt!48044 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)))) lt!48034) (get!1273 (getValueByKey!149 (toList!779 (+!134 lt!48039 (tuple2!2323 lt!48044 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16))))) lt!48034)))))

(declare-fun bs!4017 () Bool)

(assert (= bs!4017 d!25885))

(declare-fun m!106097 () Bool)

(assert (=> bs!4017 m!106097))

(assert (=> bs!4017 m!106097))

(declare-fun m!106099 () Bool)

(assert (=> bs!4017 m!106099))

(assert (=> b!96159 d!25885))

(declare-fun d!25887 () Bool)

(assert (=> d!25887 (= (apply!91 (+!134 lt!48039 (tuple2!2323 lt!48044 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)))) lt!48034) (apply!91 lt!48039 lt!48034))))

(declare-fun lt!48586 () Unit!2864)

(assert (=> d!25887 (= lt!48586 (choose!580 lt!48039 lt!48044 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)) lt!48034))))

(declare-fun e!63211 () Bool)

(assert (=> d!25887 e!63211))

(declare-fun res!48911 () Bool)

(assert (=> d!25887 (=> (not res!48911) (not e!63211))))

(assert (=> d!25887 (= res!48911 (contains!794 lt!48039 lt!48034))))

(assert (=> d!25887 (= (addApplyDifferent!67 lt!48039 lt!48044 (ite (and c!16102 c!16108) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (zeroValue!2342 newMap!16)) lt!48034) lt!48586)))

(declare-fun b!96993 () Bool)

(assert (=> b!96993 (= e!63211 (not (= lt!48034 lt!48044)))))

(assert (= (and d!25887 res!48911) b!96993))

(declare-fun m!106101 () Bool)

(assert (=> d!25887 m!106101))

(assert (=> d!25887 m!104417))

(assert (=> d!25887 m!104427))

(declare-fun m!106103 () Bool)

(assert (=> d!25887 m!106103))

(assert (=> d!25887 m!104417))

(assert (=> d!25887 m!104419))

(assert (=> b!96159 d!25887))

(assert (=> d!25367 d!25361))

(assert (=> d!25367 d!25363))

(declare-fun d!25889 () Bool)

(assert (=> d!25889 (isDefined!102 (getValueByKey!149 (toList!779 lt!47639) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(assert (=> d!25889 true))

(declare-fun _$12!341 () Unit!2864)

(assert (=> d!25889 (= (choose!578 (toList!779 lt!47639) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) _$12!341)))

(declare-fun bs!4018 () Bool)

(assert (= bs!4018 d!25889))

(assert (=> bs!4018 m!103861))

(assert (=> bs!4018 m!103945))

(assert (=> bs!4018 m!103945))

(assert (=> bs!4018 m!103947))

(assert (=> d!25367 d!25889))

(declare-fun d!25891 () Bool)

(declare-fun res!48916 () Bool)

(declare-fun e!63216 () Bool)

(assert (=> d!25891 (=> res!48916 e!63216)))

(assert (=> d!25891 (= res!48916 (or ((_ is Nil!1570) (toList!779 lt!47639)) ((_ is Nil!1570) (t!5495 (toList!779 lt!47639)))))))

(assert (=> d!25891 (= (isStrictlySorted!303 (toList!779 lt!47639)) e!63216)))

(declare-fun b!96998 () Bool)

(declare-fun e!63217 () Bool)

(assert (=> b!96998 (= e!63216 e!63217)))

(declare-fun res!48917 () Bool)

(assert (=> b!96998 (=> (not res!48917) (not e!63217))))

(assert (=> b!96998 (= res!48917 (bvslt (_1!1172 (h!2162 (toList!779 lt!47639))) (_1!1172 (h!2162 (t!5495 (toList!779 lt!47639))))))))

(declare-fun b!96999 () Bool)

(assert (=> b!96999 (= e!63217 (isStrictlySorted!303 (t!5495 (toList!779 lt!47639))))))

(assert (= (and d!25891 (not res!48916)) b!96998))

(assert (= (and b!96998 res!48917) b!96999))

(declare-fun m!106105 () Bool)

(assert (=> b!96999 m!106105))

(assert (=> d!25367 d!25891))

(declare-fun d!25893 () Bool)

(assert (=> d!25893 (= (apply!91 lt!48040 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) (get!1273 (getValueByKey!149 (toList!779 lt!48040) (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!4019 () Bool)

(assert (= bs!4019 d!25893))

(assert (=> bs!4019 m!104117))

(assert (=> bs!4019 m!105029))

(assert (=> bs!4019 m!105029))

(declare-fun m!106107 () Bool)

(assert (=> bs!4019 m!106107))

(assert (=> b!96163 d!25893))

(assert (=> b!96163 d!25695))

(assert (=> b!96027 d!25623))

(assert (=> b!96027 d!25529))

(declare-fun d!25895 () Bool)

(assert (=> d!25895 (= (isEmpty!353 (getValueByKey!149 (toList!779 lt!47639) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355))) (not ((_ is Some!154) (getValueByKey!149 (toList!779 lt!47639) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))))

(assert (=> d!25361 d!25895))

(declare-fun d!25897 () Bool)

(declare-fun e!63218 () Bool)

(assert (=> d!25897 e!63218))

(declare-fun res!48918 () Bool)

(assert (=> d!25897 (=> (not res!48918) (not e!63218))))

(declare-fun lt!48589 () ListLongMap!1527)

(assert (=> d!25897 (= res!48918 (contains!794 lt!48589 (_1!1172 (ite (or c!16160 c!16164) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))))))))

(declare-fun lt!48588 () List!1573)

(assert (=> d!25897 (= lt!48589 (ListLongMap!1528 lt!48588))))

(declare-fun lt!48590 () Unit!2864)

(declare-fun lt!48587 () Unit!2864)

(assert (=> d!25897 (= lt!48590 lt!48587)))

(assert (=> d!25897 (= (getValueByKey!149 lt!48588 (_1!1172 (ite (or c!16160 c!16164) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))))) (Some!154 (_2!1172 (ite (or c!16160 c!16164) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))))))))

(assert (=> d!25897 (= lt!48587 (lemmaContainsTupThenGetReturnValue!65 lt!48588 (_1!1172 (ite (or c!16160 c!16164) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))) (_2!1172 (ite (or c!16160 c!16164) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))))))))

(assert (=> d!25897 (= lt!48588 (insertStrictlySorted!68 (toList!779 (ite c!16160 call!9734 (ite c!16164 call!9733 call!9732))) (_1!1172 (ite (or c!16160 c!16164) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))) (_2!1172 (ite (or c!16160 c!16164) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))))))))

(assert (=> d!25897 (= (+!134 (ite c!16160 call!9734 (ite c!16164 call!9733 call!9732)) (ite (or c!16160 c!16164) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))) lt!48589)))

(declare-fun b!97000 () Bool)

(declare-fun res!48919 () Bool)

(assert (=> b!97000 (=> (not res!48919) (not e!63218))))

(assert (=> b!97000 (= res!48919 (= (getValueByKey!149 (toList!779 lt!48589) (_1!1172 (ite (or c!16160 c!16164) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16)))))) (Some!154 (_2!1172 (ite (or c!16160 c!16164) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))))))))

(declare-fun b!97001 () Bool)

(assert (=> b!97001 (= e!63218 (contains!797 (toList!779 lt!48589) (ite (or c!16160 c!16164) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (ite c!16102 (ite c!16108 (minValue!2342 newMap!16) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (minValue!2342 newMap!16))))))))

(assert (= (and d!25897 res!48918) b!97000))

(assert (= (and b!97000 res!48919) b!97001))

(declare-fun m!106109 () Bool)

(assert (=> d!25897 m!106109))

(declare-fun m!106111 () Bool)

(assert (=> d!25897 m!106111))

(declare-fun m!106113 () Bool)

(assert (=> d!25897 m!106113))

(declare-fun m!106115 () Bool)

(assert (=> d!25897 m!106115))

(declare-fun m!106117 () Bool)

(assert (=> b!97000 m!106117))

(declare-fun m!106119 () Bool)

(assert (=> b!97001 m!106119))

(assert (=> bm!9733 d!25897))

(declare-fun d!25899 () Bool)

(declare-fun e!63219 () Bool)

(assert (=> d!25899 e!63219))

(declare-fun res!48920 () Bool)

(assert (=> d!25899 (=> res!48920 e!63219)))

(declare-fun lt!48592 () Bool)

(assert (=> d!25899 (= res!48920 (not lt!48592))))

(declare-fun lt!48591 () Bool)

(assert (=> d!25899 (= lt!48592 lt!48591)))

(declare-fun lt!48593 () Unit!2864)

(declare-fun e!63220 () Unit!2864)

(assert (=> d!25899 (= lt!48593 e!63220)))

(declare-fun c!16424 () Bool)

(assert (=> d!25899 (= c!16424 lt!48591)))

(assert (=> d!25899 (= lt!48591 (containsKey!153 (toList!779 lt!48094) (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> d!25899 (= (contains!794 lt!48094 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) lt!48592)))

(declare-fun b!97002 () Bool)

(declare-fun lt!48594 () Unit!2864)

(assert (=> b!97002 (= e!63220 lt!48594)))

(assert (=> b!97002 (= lt!48594 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 lt!48094) (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (=> b!97002 (isDefined!102 (getValueByKey!149 (toList!779 lt!48094) (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!97003 () Bool)

(declare-fun Unit!2922 () Unit!2864)

(assert (=> b!97003 (= e!63220 Unit!2922)))

(declare-fun b!97004 () Bool)

(assert (=> b!97004 (= e!63219 (isDefined!102 (getValueByKey!149 (toList!779 lt!48094) (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))))

(assert (= (and d!25899 c!16424) b!97002))

(assert (= (and d!25899 (not c!16424)) b!97003))

(assert (= (and d!25899 (not res!48920)) b!97004))

(assert (=> d!25899 m!104117))

(declare-fun m!106121 () Bool)

(assert (=> d!25899 m!106121))

(assert (=> b!97002 m!104117))

(declare-fun m!106123 () Bool)

(assert (=> b!97002 m!106123))

(assert (=> b!97002 m!104117))

(assert (=> b!97002 m!105483))

(assert (=> b!97002 m!105483))

(declare-fun m!106125 () Bool)

(assert (=> b!97002 m!106125))

(assert (=> b!97004 m!104117))

(assert (=> b!97004 m!105483))

(assert (=> b!97004 m!105483))

(assert (=> b!97004 m!106125))

(assert (=> b!96231 d!25899))

(assert (=> b!96051 d!25543))

(declare-fun d!25901 () Bool)

(assert (=> d!25901 (= (get!1273 (getValueByKey!149 (toList!779 (+!134 lt!47829 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!47820)) (v!2782 (getValueByKey!149 (toList!779 (+!134 lt!47829 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!47820)))))

(assert (=> d!25407 d!25901))

(declare-fun e!63221 () Option!155)

(declare-fun b!97005 () Bool)

(assert (=> b!97005 (= e!63221 (Some!154 (_2!1172 (h!2162 (toList!779 (+!134 lt!47829 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))))

(declare-fun b!97008 () Bool)

(declare-fun e!63222 () Option!155)

(assert (=> b!97008 (= e!63222 None!153)))

(declare-fun d!25903 () Bool)

(declare-fun c!16425 () Bool)

(assert (=> d!25903 (= c!16425 (and ((_ is Cons!1569) (toList!779 (+!134 lt!47829 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))) (= (_1!1172 (h!2162 (toList!779 (+!134 lt!47829 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))) lt!47820)))))

(assert (=> d!25903 (= (getValueByKey!149 (toList!779 (+!134 lt!47829 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!47820) e!63221)))

(declare-fun b!97007 () Bool)

(assert (=> b!97007 (= e!63222 (getValueByKey!149 (t!5495 (toList!779 (+!134 lt!47829 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))) lt!47820))))

(declare-fun b!97006 () Bool)

(assert (=> b!97006 (= e!63221 e!63222)))

(declare-fun c!16426 () Bool)

(assert (=> b!97006 (= c!16426 (and ((_ is Cons!1569) (toList!779 (+!134 lt!47829 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))) (not (= (_1!1172 (h!2162 (toList!779 (+!134 lt!47829 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))) lt!47820))))))

(assert (= (and d!25903 c!16425) b!97005))

(assert (= (and d!25903 (not c!16425)) b!97006))

(assert (= (and b!97006 c!16426) b!97007))

(assert (= (and b!97006 (not c!16426)) b!97008))

(declare-fun m!106127 () Bool)

(assert (=> b!97007 m!106127))

(assert (=> d!25407 d!25903))

(assert (=> b!96040 d!25431))

(declare-fun d!25905 () Bool)

(assert (=> d!25905 (= (apply!91 lt!47960 #b0000000000000000000000000000000000000000000000000000000000000000) (get!1273 (getValueByKey!149 (toList!779 lt!47960) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun bs!4020 () Bool)

(assert (= bs!4020 d!25905))

(assert (=> bs!4020 m!105479))

(assert (=> bs!4020 m!105479))

(declare-fun m!106129 () Bool)

(assert (=> bs!4020 m!106129))

(assert (=> b!96057 d!25905))

(assert (=> b!96149 d!25543))

(declare-fun lt!48595 () Bool)

(declare-fun d!25907 () Bool)

(assert (=> d!25907 (= lt!48595 (select (content!100 (toList!779 lt!48149)) (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))))

(declare-fun e!63223 () Bool)

(assert (=> d!25907 (= lt!48595 e!63223)))

(declare-fun res!48921 () Bool)

(assert (=> d!25907 (=> (not res!48921) (not e!63223))))

(assert (=> d!25907 (= res!48921 ((_ is Cons!1569) (toList!779 lt!48149)))))

(assert (=> d!25907 (= (contains!797 (toList!779 lt!48149) (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))) lt!48595)))

(declare-fun b!97009 () Bool)

(declare-fun e!63224 () Bool)

(assert (=> b!97009 (= e!63223 e!63224)))

(declare-fun res!48922 () Bool)

(assert (=> b!97009 (=> res!48922 e!63224)))

(assert (=> b!97009 (= res!48922 (= (h!2162 (toList!779 lt!48149)) (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))))

(declare-fun b!97010 () Bool)

(assert (=> b!97010 (= e!63224 (contains!797 (t!5495 (toList!779 lt!48149)) (tuple2!2323 lt!47823 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))))

(assert (= (and d!25907 res!48921) b!97009))

(assert (= (and b!97009 (not res!48922)) b!97010))

(declare-fun m!106131 () Bool)

(assert (=> d!25907 m!106131))

(declare-fun m!106133 () Bool)

(assert (=> d!25907 m!106133))

(declare-fun m!106135 () Bool)

(assert (=> b!97010 m!106135))

(assert (=> b!96285 d!25907))

(declare-fun d!25909 () Bool)

(declare-fun e!63225 () Bool)

(assert (=> d!25909 e!63225))

(declare-fun res!48923 () Bool)

(assert (=> d!25909 (=> res!48923 e!63225)))

(declare-fun lt!48597 () Bool)

(assert (=> d!25909 (= res!48923 (not lt!48597))))

(declare-fun lt!48596 () Bool)

(assert (=> d!25909 (= lt!48597 lt!48596)))

(declare-fun lt!48598 () Unit!2864)

(declare-fun e!63226 () Unit!2864)

(assert (=> d!25909 (= lt!48598 e!63226)))

(declare-fun c!16427 () Bool)

(assert (=> d!25909 (= c!16427 lt!48596)))

(assert (=> d!25909 (= lt!48596 (containsKey!153 (toList!779 lt!47949) (_1!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!25909 (= (contains!794 lt!47949 (_1!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!48597)))

(declare-fun b!97011 () Bool)

(declare-fun lt!48599 () Unit!2864)

(assert (=> b!97011 (= e!63226 lt!48599)))

(assert (=> b!97011 (= lt!48599 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 lt!47949) (_1!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> b!97011 (isDefined!102 (getValueByKey!149 (toList!779 lt!47949) (_1!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!97012 () Bool)

(declare-fun Unit!2923 () Unit!2864)

(assert (=> b!97012 (= e!63226 Unit!2923)))

(declare-fun b!97013 () Bool)

(assert (=> b!97013 (= e!63225 (isDefined!102 (getValueByKey!149 (toList!779 lt!47949) (_1!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!25909 c!16427) b!97011))

(assert (= (and d!25909 (not c!16427)) b!97012))

(assert (= (and d!25909 (not res!48923)) b!97013))

(declare-fun m!106137 () Bool)

(assert (=> d!25909 m!106137))

(declare-fun m!106139 () Bool)

(assert (=> b!97011 m!106139))

(assert (=> b!97011 m!104213))

(assert (=> b!97011 m!104213))

(declare-fun m!106141 () Bool)

(assert (=> b!97011 m!106141))

(assert (=> b!97013 m!104213))

(assert (=> b!97013 m!104213))

(assert (=> b!97013 m!106141))

(assert (=> d!25327 d!25909))

(declare-fun b!97014 () Bool)

(declare-fun e!63227 () Option!155)

(assert (=> b!97014 (= e!63227 (Some!154 (_2!1172 (h!2162 lt!47948))))))

(declare-fun b!97017 () Bool)

(declare-fun e!63228 () Option!155)

(assert (=> b!97017 (= e!63228 None!153)))

(declare-fun d!25911 () Bool)

(declare-fun c!16428 () Bool)

(assert (=> d!25911 (= c!16428 (and ((_ is Cons!1569) lt!47948) (= (_1!1172 (h!2162 lt!47948)) (_1!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!25911 (= (getValueByKey!149 lt!47948 (_1!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) e!63227)))

(declare-fun b!97016 () Bool)

(assert (=> b!97016 (= e!63228 (getValueByKey!149 (t!5495 lt!47948) (_1!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!97015 () Bool)

(assert (=> b!97015 (= e!63227 e!63228)))

(declare-fun c!16429 () Bool)

(assert (=> b!97015 (= c!16429 (and ((_ is Cons!1569) lt!47948) (not (= (_1!1172 (h!2162 lt!47948)) (_1!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(assert (= (and d!25911 c!16428) b!97014))

(assert (= (and d!25911 (not c!16428)) b!97015))

(assert (= (and b!97015 c!16429) b!97016))

(assert (= (and b!97015 (not c!16429)) b!97017))

(declare-fun m!106143 () Bool)

(assert (=> b!97016 m!106143))

(assert (=> d!25327 d!25911))

(declare-fun d!25913 () Bool)

(assert (=> d!25913 (= (getValueByKey!149 lt!47948 (_1!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) (Some!154 (_2!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun lt!48600 () Unit!2864)

(assert (=> d!25913 (= lt!48600 (choose!583 lt!47948 (_1!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun e!63229 () Bool)

(assert (=> d!25913 e!63229))

(declare-fun res!48924 () Bool)

(assert (=> d!25913 (=> (not res!48924) (not e!63229))))

(assert (=> d!25913 (= res!48924 (isStrictlySorted!303 lt!47948))))

(assert (=> d!25913 (= (lemmaContainsTupThenGetReturnValue!65 lt!47948 (_1!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!48600)))

(declare-fun b!97018 () Bool)

(declare-fun res!48925 () Bool)

(assert (=> b!97018 (=> (not res!48925) (not e!63229))))

(assert (=> b!97018 (= res!48925 (containsKey!153 lt!47948 (_1!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!97019 () Bool)

(assert (=> b!97019 (= e!63229 (contains!797 lt!47948 (tuple2!2323 (_1!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!25913 res!48924) b!97018))

(assert (= (and b!97018 res!48925) b!97019))

(assert (=> d!25913 m!104207))

(declare-fun m!106145 () Bool)

(assert (=> d!25913 m!106145))

(declare-fun m!106147 () Bool)

(assert (=> d!25913 m!106147))

(declare-fun m!106149 () Bool)

(assert (=> b!97018 m!106149))

(declare-fun m!106151 () Bool)

(assert (=> b!97019 m!106151))

(assert (=> d!25327 d!25913))

(declare-fun b!97020 () Bool)

(declare-fun e!63232 () List!1573)

(declare-fun call!9837 () List!1573)

(assert (=> b!97020 (= e!63232 call!9837)))

(declare-fun b!97021 () Bool)

(declare-fun c!16430 () Bool)

(declare-fun c!16431 () Bool)

(declare-fun e!63230 () List!1573)

(assert (=> b!97021 (= e!63230 (ite c!16430 (t!5495 (toList!779 (ite c!16102 (ite c!16108 call!9664 call!9682) call!9666))) (ite c!16431 (Cons!1569 (h!2162 (toList!779 (ite c!16102 (ite c!16108 call!9664 call!9682) call!9666))) (t!5495 (toList!779 (ite c!16102 (ite c!16108 call!9664 call!9682) call!9666)))) Nil!1570)))))

(declare-fun bm!9833 () Bool)

(declare-fun call!9838 () List!1573)

(declare-fun call!9836 () List!1573)

(assert (=> bm!9833 (= call!9838 call!9836)))

(declare-fun b!97022 () Bool)

(declare-fun e!63233 () List!1573)

(assert (=> b!97022 (= e!63233 call!9838)))

(declare-fun b!97024 () Bool)

(assert (=> b!97024 (= c!16431 (and ((_ is Cons!1569) (toList!779 (ite c!16102 (ite c!16108 call!9664 call!9682) call!9666))) (bvsgt (_1!1172 (h!2162 (toList!779 (ite c!16102 (ite c!16108 call!9664 call!9682) call!9666)))) (_1!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun e!63234 () List!1573)

(assert (=> b!97024 (= e!63234 e!63233)))

(declare-fun b!97025 () Bool)

(assert (=> b!97025 (= e!63234 call!9836)))

(declare-fun c!16433 () Bool)

(declare-fun bm!9834 () Bool)

(assert (=> bm!9834 (= call!9837 ($colon$colon!77 e!63230 (ite c!16433 (h!2162 (toList!779 (ite c!16102 (ite c!16108 call!9664 call!9682) call!9666))) (tuple2!2323 (_1!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))))

(declare-fun c!16432 () Bool)

(assert (=> bm!9834 (= c!16432 c!16433)))

(declare-fun b!97026 () Bool)

(declare-fun res!48926 () Bool)

(declare-fun e!63231 () Bool)

(assert (=> b!97026 (=> (not res!48926) (not e!63231))))

(declare-fun lt!48601 () List!1573)

(assert (=> b!97026 (= res!48926 (containsKey!153 lt!48601 (_1!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun b!97027 () Bool)

(assert (=> b!97027 (= e!63230 (insertStrictlySorted!68 (t!5495 (toList!779 (ite c!16102 (ite c!16108 call!9664 call!9682) call!9666))) (_1!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(declare-fun bm!9835 () Bool)

(assert (=> bm!9835 (= call!9836 call!9837)))

(declare-fun d!25915 () Bool)

(assert (=> d!25915 e!63231))

(declare-fun res!48927 () Bool)

(assert (=> d!25915 (=> (not res!48927) (not e!63231))))

(assert (=> d!25915 (= res!48927 (isStrictlySorted!303 lt!48601))))

(assert (=> d!25915 (= lt!48601 e!63232)))

(assert (=> d!25915 (= c!16433 (and ((_ is Cons!1569) (toList!779 (ite c!16102 (ite c!16108 call!9664 call!9682) call!9666))) (bvslt (_1!1172 (h!2162 (toList!779 (ite c!16102 (ite c!16108 call!9664 call!9682) call!9666)))) (_1!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (=> d!25915 (isStrictlySorted!303 (toList!779 (ite c!16102 (ite c!16108 call!9664 call!9682) call!9666)))))

(assert (=> d!25915 (= (insertStrictlySorted!68 (toList!779 (ite c!16102 (ite c!16108 call!9664 call!9682) call!9666)) (_1!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))) lt!48601)))

(declare-fun b!97023 () Bool)

(assert (=> b!97023 (= e!63233 call!9838)))

(declare-fun b!97028 () Bool)

(assert (=> b!97028 (= e!63231 (contains!797 lt!48601 (tuple2!2323 (_1!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) (_2!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(declare-fun b!97029 () Bool)

(assert (=> b!97029 (= e!63232 e!63234)))

(assert (=> b!97029 (= c!16430 (and ((_ is Cons!1569) (toList!779 (ite c!16102 (ite c!16108 call!9664 call!9682) call!9666))) (= (_1!1172 (h!2162 (toList!779 (ite c!16102 (ite c!16108 call!9664 call!9682) call!9666)))) (_1!1172 (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!25915 c!16433) b!97020))

(assert (= (and d!25915 (not c!16433)) b!97029))

(assert (= (and b!97029 c!16430) b!97025))

(assert (= (and b!97029 (not c!16430)) b!97024))

(assert (= (and b!97024 c!16431) b!97023))

(assert (= (and b!97024 (not c!16431)) b!97022))

(assert (= (or b!97023 b!97022) bm!9833))

(assert (= (or b!97025 bm!9833) bm!9835))

(assert (= (or b!97020 bm!9835) bm!9834))

(assert (= (and bm!9834 c!16432) b!97027))

(assert (= (and bm!9834 (not c!16432)) b!97021))

(assert (= (and d!25915 res!48927) b!97026))

(assert (= (and b!97026 res!48926) b!97028))

(declare-fun m!106153 () Bool)

(assert (=> b!97028 m!106153))

(declare-fun m!106155 () Bool)

(assert (=> b!97026 m!106155))

(declare-fun m!106157 () Bool)

(assert (=> bm!9834 m!106157))

(declare-fun m!106159 () Bool)

(assert (=> b!97027 m!106159))

(declare-fun m!106161 () Bool)

(assert (=> d!25915 m!106161))

(declare-fun m!106163 () Bool)

(assert (=> d!25915 m!106163))

(assert (=> d!25327 d!25915))

(declare-fun d!25917 () Bool)

(assert (=> d!25917 (= (inRange!0 (index!3151 lt!48115) (mask!6542 newMap!16)) (and (bvsge (index!3151 lt!48115) #b00000000000000000000000000000000) (bvslt (index!3151 lt!48115) (bvadd (mask!6542 newMap!16) #b00000000000000000000000000000001))))))

(assert (=> b!96251 d!25917))

(declare-fun d!25919 () Bool)

(declare-fun lt!48602 () Bool)

(assert (=> d!25919 (= lt!48602 (select (content!100 (toList!779 lt!48086)) (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun e!63235 () Bool)

(assert (=> d!25919 (= lt!48602 e!63235)))

(declare-fun res!48928 () Bool)

(assert (=> d!25919 (=> (not res!48928) (not e!63235))))

(assert (=> d!25919 (= res!48928 ((_ is Cons!1569) (toList!779 lt!48086)))))

(assert (=> d!25919 (= (contains!797 (toList!779 lt!48086) (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!48602)))

(declare-fun b!97030 () Bool)

(declare-fun e!63236 () Bool)

(assert (=> b!97030 (= e!63235 e!63236)))

(declare-fun res!48929 () Bool)

(assert (=> b!97030 (=> res!48929 e!63236)))

(assert (=> b!97030 (= res!48929 (= (h!2162 (toList!779 lt!48086)) (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(declare-fun b!97031 () Bool)

(assert (=> b!97031 (= e!63236 (contains!797 (t!5495 (toList!779 lt!48086)) (ite (or c!16134 c!16138) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))))

(assert (= (and d!25919 res!48928) b!97030))

(assert (= (and b!97030 (not res!48929)) b!97031))

(declare-fun m!106165 () Bool)

(assert (=> d!25919 m!106165))

(declare-fun m!106167 () Bool)

(assert (=> d!25919 m!106167))

(declare-fun m!106169 () Bool)

(assert (=> b!97031 m!106169))

(assert (=> b!96222 d!25919))

(declare-fun d!25921 () Bool)

(assert (=> d!25921 (isDefined!102 (getValueByKey!149 (toList!779 call!9666) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(declare-fun lt!48603 () Unit!2864)

(assert (=> d!25921 (= lt!48603 (choose!578 (toList!779 call!9666) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(declare-fun e!63237 () Bool)

(assert (=> d!25921 e!63237))

(declare-fun res!48930 () Bool)

(assert (=> d!25921 (=> (not res!48930) (not e!63237))))

(assert (=> d!25921 (= res!48930 (isStrictlySorted!303 (toList!779 call!9666)))))

(assert (=> d!25921 (= (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 call!9666) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) lt!48603)))

(declare-fun b!97032 () Bool)

(assert (=> b!97032 (= e!63237 (containsKey!153 (toList!779 call!9666) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(assert (= (and d!25921 res!48930) b!97032))

(assert (=> d!25921 m!103861))

(assert (=> d!25921 m!104285))

(assert (=> d!25921 m!104285))

(assert (=> d!25921 m!104287))

(assert (=> d!25921 m!103861))

(declare-fun m!106171 () Bool)

(assert (=> d!25921 m!106171))

(declare-fun m!106173 () Bool)

(assert (=> d!25921 m!106173))

(assert (=> b!97032 m!103861))

(assert (=> b!97032 m!104281))

(assert (=> b!96072 d!25921))

(assert (=> b!96072 d!25629))

(assert (=> b!96072 d!25631))

(declare-fun d!25923 () Bool)

(declare-fun res!48933 () Bool)

(declare-fun e!63238 () Bool)

(assert (=> d!25923 (=> res!48933 e!63238)))

(assert (=> d!25923 (= res!48933 (bvsge #b00000000000000000000000000000000 (size!2252 (_keys!4143 (_2!1173 lt!47744)))))))

(assert (=> d!25923 (= (arrayNoDuplicates!0 (_keys!4143 (_2!1173 lt!47744)) #b00000000000000000000000000000000 Nil!1571) e!63238)))

(declare-fun b!97033 () Bool)

(declare-fun e!63239 () Bool)

(declare-fun e!63241 () Bool)

(assert (=> b!97033 (= e!63239 e!63241)))

(declare-fun c!16434 () Bool)

(assert (=> b!97033 (= c!16434 (validKeyInArray!0 (select (arr!2003 (_keys!4143 (_2!1173 lt!47744))) #b00000000000000000000000000000000)))))

(declare-fun b!97034 () Bool)

(assert (=> b!97034 (= e!63238 e!63239)))

(declare-fun res!48931 () Bool)

(assert (=> b!97034 (=> (not res!48931) (not e!63239))))

(declare-fun e!63240 () Bool)

(assert (=> b!97034 (= res!48931 (not e!63240))))

(declare-fun res!48932 () Bool)

(assert (=> b!97034 (=> (not res!48932) (not e!63240))))

(assert (=> b!97034 (= res!48932 (validKeyInArray!0 (select (arr!2003 (_keys!4143 (_2!1173 lt!47744))) #b00000000000000000000000000000000)))))

(declare-fun b!97035 () Bool)

(assert (=> b!97035 (= e!63240 (contains!796 Nil!1571 (select (arr!2003 (_keys!4143 (_2!1173 lt!47744))) #b00000000000000000000000000000000)))))

(declare-fun bm!9836 () Bool)

(declare-fun call!9839 () Bool)

(assert (=> bm!9836 (= call!9839 (arrayNoDuplicates!0 (_keys!4143 (_2!1173 lt!47744)) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (ite c!16434 (Cons!1570 (select (arr!2003 (_keys!4143 (_2!1173 lt!47744))) #b00000000000000000000000000000000) Nil!1571) Nil!1571)))))

(declare-fun b!97036 () Bool)

(assert (=> b!97036 (= e!63241 call!9839)))

(declare-fun b!97037 () Bool)

(assert (=> b!97037 (= e!63241 call!9839)))

(assert (= (and d!25923 (not res!48933)) b!97034))

(assert (= (and b!97034 res!48932) b!97035))

(assert (= (and b!97034 res!48931) b!97033))

(assert (= (and b!97033 c!16434) b!97036))

(assert (= (and b!97033 (not c!16434)) b!97037))

(assert (= (or b!97036 b!97037) bm!9836))

(assert (=> b!97033 m!105295))

(assert (=> b!97033 m!105295))

(assert (=> b!97033 m!105297))

(assert (=> b!97034 m!105295))

(assert (=> b!97034 m!105295))

(assert (=> b!97034 m!105297))

(assert (=> b!97035 m!105295))

(assert (=> b!97035 m!105295))

(declare-fun m!106175 () Bool)

(assert (=> b!97035 m!106175))

(assert (=> bm!9836 m!105295))

(declare-fun m!106177 () Bool)

(assert (=> bm!9836 m!106177))

(assert (=> b!96030 d!25923))

(assert (=> d!25399 d!25387))

(declare-fun d!25925 () Bool)

(declare-fun e!63242 () Bool)

(assert (=> d!25925 e!63242))

(declare-fun res!48934 () Bool)

(assert (=> d!25925 (=> res!48934 e!63242)))

(declare-fun lt!48605 () Bool)

(assert (=> d!25925 (= res!48934 (not lt!48605))))

(declare-fun lt!48604 () Bool)

(assert (=> d!25925 (= lt!48605 lt!48604)))

(declare-fun lt!48606 () Unit!2864)

(declare-fun e!63243 () Unit!2864)

(assert (=> d!25925 (= lt!48606 e!63243)))

(declare-fun c!16435 () Bool)

(assert (=> d!25925 (= c!16435 lt!48604)))

(assert (=> d!25925 (= lt!48604 (containsKey!153 (toList!779 lt!47829) lt!47820))))

(assert (=> d!25925 (= (contains!794 lt!47829 lt!47820) lt!48605)))

(declare-fun b!97038 () Bool)

(declare-fun lt!48607 () Unit!2864)

(assert (=> b!97038 (= e!63243 lt!48607)))

(assert (=> b!97038 (= lt!48607 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 lt!47829) lt!47820))))

(assert (=> b!97038 (isDefined!102 (getValueByKey!149 (toList!779 lt!47829) lt!47820))))

(declare-fun b!97039 () Bool)

(declare-fun Unit!2924 () Unit!2864)

(assert (=> b!97039 (= e!63243 Unit!2924)))

(declare-fun b!97040 () Bool)

(assert (=> b!97040 (= e!63242 (isDefined!102 (getValueByKey!149 (toList!779 lt!47829) lt!47820)))))

(assert (= (and d!25925 c!16435) b!97038))

(assert (= (and d!25925 (not c!16435)) b!97039))

(assert (= (and d!25925 (not res!48934)) b!97040))

(declare-fun m!106179 () Bool)

(assert (=> d!25925 m!106179))

(declare-fun m!106181 () Bool)

(assert (=> b!97038 m!106181))

(assert (=> b!97038 m!104565))

(assert (=> b!97038 m!104565))

(declare-fun m!106183 () Bool)

(assert (=> b!97038 m!106183))

(assert (=> b!97040 m!104565))

(assert (=> b!97040 m!104565))

(assert (=> b!97040 m!106183))

(assert (=> d!25399 d!25925))

(declare-fun d!25927 () Bool)

(assert (=> d!25927 (= (apply!91 (+!134 lt!47829 (tuple2!2323 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) lt!47820) (apply!91 lt!47829 lt!47820))))

(assert (=> d!25927 true))

(declare-fun _$34!859 () Unit!2864)

(assert (=> d!25927 (= (choose!580 lt!47829 lt!47831 (minValue!2342 (v!2778 (underlying!331 thiss!992))) lt!47820) _$34!859)))

(declare-fun bs!4021 () Bool)

(assert (= bs!4021 d!25927))

(assert (=> bs!4021 m!104043))

(assert (=> bs!4021 m!104043))

(assert (=> bs!4021 m!104067))

(assert (=> bs!4021 m!104065))

(assert (=> d!25399 d!25927))

(assert (=> d!25399 d!25405))

(assert (=> d!25399 d!25407))

(declare-fun d!25929 () Bool)

(declare-fun e!63244 () Bool)

(assert (=> d!25929 e!63244))

(declare-fun res!48935 () Bool)

(assert (=> d!25929 (=> (not res!48935) (not e!63244))))

(declare-fun lt!48610 () ListLongMap!1527)

(assert (=> d!25929 (= res!48935 (contains!794 lt!48610 (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(declare-fun lt!48609 () List!1573)

(assert (=> d!25929 (= lt!48610 (ListLongMap!1528 lt!48609))))

(declare-fun lt!48611 () Unit!2864)

(declare-fun lt!48608 () Unit!2864)

(assert (=> d!25929 (= lt!48611 lt!48608)))

(assert (=> d!25929 (= (getValueByKey!149 lt!48609 (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))) (Some!154 (_2!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(assert (=> d!25929 (= lt!48608 (lemmaContainsTupThenGetReturnValue!65 lt!48609 (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))) (_2!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(assert (=> d!25929 (= lt!48609 (insertStrictlySorted!68 (toList!779 call!9756) (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))) (_2!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(assert (=> d!25929 (= (+!134 call!9756 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))) lt!48610)))

(declare-fun b!97041 () Bool)

(declare-fun res!48936 () Bool)

(assert (=> b!97041 (=> (not res!48936) (not e!63244))))

(assert (=> b!97041 (= res!48936 (= (getValueByKey!149 (toList!779 lt!48610) (_1!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))) (Some!154 (_2!1172 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))))

(declare-fun b!97042 () Bool)

(assert (=> b!97042 (= e!63244 (contains!797 (toList!779 lt!48610) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))

(assert (= (and d!25929 res!48935) b!97041))

(assert (= (and b!97041 res!48936) b!97042))

(declare-fun m!106185 () Bool)

(assert (=> d!25929 m!106185))

(declare-fun m!106187 () Bool)

(assert (=> d!25929 m!106187))

(declare-fun m!106189 () Bool)

(assert (=> d!25929 m!106189))

(declare-fun m!106191 () Bool)

(assert (=> d!25929 m!106191))

(declare-fun m!106193 () Bool)

(assert (=> b!97041 m!106193))

(declare-fun m!106195 () Bool)

(assert (=> b!97042 m!106195))

(assert (=> b!96242 d!25929))

(assert (=> b!96144 d!25287))

(assert (=> d!25403 d!25389))

(declare-fun d!25931 () Bool)

(assert (=> d!25931 (= (apply!91 (+!134 lt!47815 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992))))) lt!47828) (apply!91 lt!47815 lt!47828))))

(assert (=> d!25931 true))

(declare-fun _$34!860 () Unit!2864)

(assert (=> d!25931 (= (choose!580 lt!47815 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992))) lt!47828) _$34!860)))

(declare-fun bs!4022 () Bool)

(assert (= bs!4022 d!25931))

(assert (=> bs!4022 m!104053))

(assert (=> bs!4022 m!104053))

(assert (=> bs!4022 m!104055))

(assert (=> bs!4022 m!104041))

(assert (=> d!25403 d!25931))

(assert (=> d!25403 d!25393))

(declare-fun d!25933 () Bool)

(declare-fun e!63245 () Bool)

(assert (=> d!25933 e!63245))

(declare-fun res!48937 () Bool)

(assert (=> d!25933 (=> res!48937 e!63245)))

(declare-fun lt!48613 () Bool)

(assert (=> d!25933 (= res!48937 (not lt!48613))))

(declare-fun lt!48612 () Bool)

(assert (=> d!25933 (= lt!48613 lt!48612)))

(declare-fun lt!48614 () Unit!2864)

(declare-fun e!63246 () Unit!2864)

(assert (=> d!25933 (= lt!48614 e!63246)))

(declare-fun c!16436 () Bool)

(assert (=> d!25933 (= c!16436 lt!48612)))

(assert (=> d!25933 (= lt!48612 (containsKey!153 (toList!779 lt!47815) lt!47828))))

(assert (=> d!25933 (= (contains!794 lt!47815 lt!47828) lt!48613)))

(declare-fun b!97043 () Bool)

(declare-fun lt!48615 () Unit!2864)

(assert (=> b!97043 (= e!63246 lt!48615)))

(assert (=> b!97043 (= lt!48615 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 lt!47815) lt!47828))))

(assert (=> b!97043 (isDefined!102 (getValueByKey!149 (toList!779 lt!47815) lt!47828))))

(declare-fun b!97044 () Bool)

(declare-fun Unit!2925 () Unit!2864)

(assert (=> b!97044 (= e!63246 Unit!2925)))

(declare-fun b!97045 () Bool)

(assert (=> b!97045 (= e!63245 (isDefined!102 (getValueByKey!149 (toList!779 lt!47815) lt!47828)))))

(assert (= (and d!25933 c!16436) b!97043))

(assert (= (and d!25933 (not c!16436)) b!97044))

(assert (= (and d!25933 (not res!48937)) b!97045))

(declare-fun m!106197 () Bool)

(assert (=> d!25933 m!106197))

(declare-fun m!106199 () Bool)

(assert (=> b!97043 m!106199))

(assert (=> b!97043 m!104585))

(assert (=> b!97043 m!104585))

(declare-fun m!106201 () Bool)

(assert (=> b!97043 m!106201))

(assert (=> b!97045 m!104585))

(assert (=> b!97045 m!104585))

(assert (=> b!97045 m!106201))

(assert (=> d!25403 d!25933))

(assert (=> d!25403 d!25413))

(declare-fun b!97046 () Bool)

(declare-fun res!48944 () Bool)

(declare-fun e!63256 () Bool)

(assert (=> b!97046 (=> (not res!48944) (not e!63256))))

(declare-fun e!63257 () Bool)

(assert (=> b!97046 (= res!48944 e!63257)))

(declare-fun c!16441 () Bool)

(assert (=> b!97046 (= c!16441 (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun d!25935 () Bool)

(assert (=> d!25935 e!63256))

(declare-fun res!48945 () Bool)

(assert (=> d!25935 (=> (not res!48945) (not e!63256))))

(assert (=> d!25935 (= res!48945 (or (bvsge #b00000000000000000000000000000000 (size!2252 lt!47926)) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 lt!47926)))))))

(declare-fun lt!48622 () ListLongMap!1527)

(declare-fun lt!48636 () ListLongMap!1527)

(assert (=> d!25935 (= lt!48622 lt!48636)))

(declare-fun lt!48630 () Unit!2864)

(declare-fun e!63254 () Unit!2864)

(assert (=> d!25935 (= lt!48630 e!63254)))

(declare-fun c!16437 () Bool)

(declare-fun e!63252 () Bool)

(assert (=> d!25935 (= c!16437 e!63252)))

(declare-fun res!48943 () Bool)

(assert (=> d!25935 (=> (not res!48943) (not e!63252))))

(assert (=> d!25935 (= res!48943 (bvslt #b00000000000000000000000000000000 (size!2252 lt!47926)))))

(declare-fun e!63251 () ListLongMap!1527)

(assert (=> d!25935 (= lt!48636 e!63251)))

(declare-fun c!16438 () Bool)

(assert (=> d!25935 (= c!16438 (and (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!25935 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25935 (= (getCurrentListMap!470 lt!47926 lt!47934 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) lt!48622)))

(declare-fun bm!9837 () Bool)

(declare-fun call!9842 () ListLongMap!1527)

(declare-fun call!9843 () ListLongMap!1527)

(assert (=> bm!9837 (= call!9842 call!9843)))

(declare-fun bm!9838 () Bool)

(declare-fun call!9840 () ListLongMap!1527)

(declare-fun call!9845 () ListLongMap!1527)

(assert (=> bm!9838 (= call!9840 call!9845)))

(declare-fun b!97047 () Bool)

(declare-fun e!63247 () Bool)

(declare-fun call!9844 () Bool)

(assert (=> b!97047 (= e!63247 (not call!9844))))

(declare-fun bm!9839 () Bool)

(assert (=> bm!9839 (= call!9843 (getCurrentListMapNoExtraKeys!99 lt!47926 lt!47934 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun bm!9840 () Bool)

(declare-fun call!9841 () ListLongMap!1527)

(assert (=> bm!9840 (= call!9841 call!9842)))

(declare-fun b!97048 () Bool)

(assert (=> b!97048 (= e!63252 (validKeyInArray!0 (select (arr!2003 lt!47926) #b00000000000000000000000000000000)))))

(declare-fun b!97049 () Bool)

(declare-fun e!63253 () Bool)

(assert (=> b!97049 (= e!63253 (validKeyInArray!0 (select (arr!2003 lt!47926) #b00000000000000000000000000000000)))))

(declare-fun b!97050 () Bool)

(declare-fun e!63250 () Bool)

(assert (=> b!97050 (= e!63250 (= (apply!91 lt!48622 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2342 newMap!16)))))

(declare-fun b!97051 () Bool)

(declare-fun e!63248 () ListLongMap!1527)

(assert (=> b!97051 (= e!63248 call!9841)))

(declare-fun b!97052 () Bool)

(declare-fun call!9846 () Bool)

(assert (=> b!97052 (= e!63257 (not call!9846))))

(declare-fun b!97053 () Bool)

(assert (=> b!97053 (= e!63247 e!63250)))

(declare-fun res!48942 () Bool)

(assert (=> b!97053 (= res!48942 call!9844)))

(assert (=> b!97053 (=> (not res!48942) (not e!63250))))

(declare-fun bm!9841 () Bool)

(assert (=> bm!9841 (= call!9844 (contains!794 lt!48622 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97054 () Bool)

(declare-fun e!63255 () Bool)

(declare-fun e!63258 () Bool)

(assert (=> b!97054 (= e!63255 e!63258)))

(declare-fun res!48939 () Bool)

(assert (=> b!97054 (=> (not res!48939) (not e!63258))))

(assert (=> b!97054 (= res!48939 (contains!794 lt!48622 (select (arr!2003 lt!47926) #b00000000000000000000000000000000)))))

(assert (=> b!97054 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 lt!47926)))))

(declare-fun c!16442 () Bool)

(declare-fun bm!9842 () Bool)

(assert (=> bm!9842 (= call!9845 (+!134 (ite c!16438 call!9843 (ite c!16442 call!9842 call!9841)) (ite (or c!16438 c!16442) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(declare-fun b!97055 () Bool)

(declare-fun e!63259 () Bool)

(assert (=> b!97055 (= e!63259 (= (apply!91 lt!48622 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2342 newMap!16)))))

(declare-fun b!97056 () Bool)

(assert (=> b!97056 (= e!63256 e!63247)))

(declare-fun c!16440 () Bool)

(assert (=> b!97056 (= c!16440 (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!97057 () Bool)

(declare-fun c!16439 () Bool)

(assert (=> b!97057 (= c!16439 (and (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!63249 () ListLongMap!1527)

(assert (=> b!97057 (= e!63249 e!63248)))

(declare-fun b!97058 () Bool)

(assert (=> b!97058 (= e!63248 call!9840)))

(declare-fun b!97059 () Bool)

(declare-fun lt!48624 () Unit!2864)

(assert (=> b!97059 (= e!63254 lt!48624)))

(declare-fun lt!48629 () ListLongMap!1527)

(assert (=> b!97059 (= lt!48629 (getCurrentListMapNoExtraKeys!99 lt!47926 lt!47934 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48628 () (_ BitVec 64))

(assert (=> b!97059 (= lt!48628 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48625 () (_ BitVec 64))

(assert (=> b!97059 (= lt!48625 (select (arr!2003 lt!47926) #b00000000000000000000000000000000))))

(declare-fun lt!48620 () Unit!2864)

(assert (=> b!97059 (= lt!48620 (addStillContains!67 lt!48629 lt!48628 (zeroValue!2342 newMap!16) lt!48625))))

(assert (=> b!97059 (contains!794 (+!134 lt!48629 (tuple2!2323 lt!48628 (zeroValue!2342 newMap!16))) lt!48625)))

(declare-fun lt!48637 () Unit!2864)

(assert (=> b!97059 (= lt!48637 lt!48620)))

(declare-fun lt!48632 () ListLongMap!1527)

(assert (=> b!97059 (= lt!48632 (getCurrentListMapNoExtraKeys!99 lt!47926 lt!47934 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48634 () (_ BitVec 64))

(assert (=> b!97059 (= lt!48634 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48623 () (_ BitVec 64))

(assert (=> b!97059 (= lt!48623 (select (arr!2003 lt!47926) #b00000000000000000000000000000000))))

(declare-fun lt!48633 () Unit!2864)

(assert (=> b!97059 (= lt!48633 (addApplyDifferent!67 lt!48632 lt!48634 (minValue!2342 newMap!16) lt!48623))))

(assert (=> b!97059 (= (apply!91 (+!134 lt!48632 (tuple2!2323 lt!48634 (minValue!2342 newMap!16))) lt!48623) (apply!91 lt!48632 lt!48623))))

(declare-fun lt!48617 () Unit!2864)

(assert (=> b!97059 (= lt!48617 lt!48633)))

(declare-fun lt!48621 () ListLongMap!1527)

(assert (=> b!97059 (= lt!48621 (getCurrentListMapNoExtraKeys!99 lt!47926 lt!47934 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48626 () (_ BitVec 64))

(assert (=> b!97059 (= lt!48626 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48616 () (_ BitVec 64))

(assert (=> b!97059 (= lt!48616 (select (arr!2003 lt!47926) #b00000000000000000000000000000000))))

(declare-fun lt!48619 () Unit!2864)

(assert (=> b!97059 (= lt!48619 (addApplyDifferent!67 lt!48621 lt!48626 (zeroValue!2342 newMap!16) lt!48616))))

(assert (=> b!97059 (= (apply!91 (+!134 lt!48621 (tuple2!2323 lt!48626 (zeroValue!2342 newMap!16))) lt!48616) (apply!91 lt!48621 lt!48616))))

(declare-fun lt!48627 () Unit!2864)

(assert (=> b!97059 (= lt!48627 lt!48619)))

(declare-fun lt!48618 () ListLongMap!1527)

(assert (=> b!97059 (= lt!48618 (getCurrentListMapNoExtraKeys!99 lt!47926 lt!47934 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48635 () (_ BitVec 64))

(assert (=> b!97059 (= lt!48635 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48631 () (_ BitVec 64))

(assert (=> b!97059 (= lt!48631 (select (arr!2003 lt!47926) #b00000000000000000000000000000000))))

(assert (=> b!97059 (= lt!48624 (addApplyDifferent!67 lt!48618 lt!48635 (minValue!2342 newMap!16) lt!48631))))

(assert (=> b!97059 (= (apply!91 (+!134 lt!48618 (tuple2!2323 lt!48635 (minValue!2342 newMap!16))) lt!48631) (apply!91 lt!48618 lt!48631))))

(declare-fun b!97060 () Bool)

(assert (=> b!97060 (= e!63251 e!63249)))

(assert (=> b!97060 (= c!16442 (and (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!97061 () Bool)

(declare-fun res!48941 () Bool)

(assert (=> b!97061 (=> (not res!48941) (not e!63256))))

(assert (=> b!97061 (= res!48941 e!63255)))

(declare-fun res!48940 () Bool)

(assert (=> b!97061 (=> res!48940 e!63255)))

(assert (=> b!97061 (= res!48940 (not e!63253))))

(declare-fun res!48946 () Bool)

(assert (=> b!97061 (=> (not res!48946) (not e!63253))))

(assert (=> b!97061 (= res!48946 (bvslt #b00000000000000000000000000000000 (size!2252 lt!47926)))))

(declare-fun bm!9843 () Bool)

(assert (=> bm!9843 (= call!9846 (contains!794 lt!48622 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97062 () Bool)

(assert (=> b!97062 (= e!63257 e!63259)))

(declare-fun res!48938 () Bool)

(assert (=> b!97062 (= res!48938 call!9846)))

(assert (=> b!97062 (=> (not res!48938) (not e!63259))))

(declare-fun b!97063 () Bool)

(assert (=> b!97063 (= e!63258 (= (apply!91 lt!48622 (select (arr!2003 lt!47926) #b00000000000000000000000000000000)) (get!1269 (select (arr!2004 lt!47934) #b00000000000000000000000000000000) (dynLambda!364 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!97063 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 lt!47934)))))

(assert (=> b!97063 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 lt!47926)))))

(declare-fun b!97064 () Bool)

(declare-fun Unit!2926 () Unit!2864)

(assert (=> b!97064 (= e!63254 Unit!2926)))

(declare-fun b!97065 () Bool)

(assert (=> b!97065 (= e!63251 (+!134 call!9845 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))

(declare-fun b!97066 () Bool)

(assert (=> b!97066 (= e!63249 call!9840)))

(assert (= (and d!25935 c!16438) b!97065))

(assert (= (and d!25935 (not c!16438)) b!97060))

(assert (= (and b!97060 c!16442) b!97066))

(assert (= (and b!97060 (not c!16442)) b!97057))

(assert (= (and b!97057 c!16439) b!97058))

(assert (= (and b!97057 (not c!16439)) b!97051))

(assert (= (or b!97058 b!97051) bm!9840))

(assert (= (or b!97066 bm!9840) bm!9837))

(assert (= (or b!97066 b!97058) bm!9838))

(assert (= (or b!97065 bm!9837) bm!9839))

(assert (= (or b!97065 bm!9838) bm!9842))

(assert (= (and d!25935 res!48943) b!97048))

(assert (= (and d!25935 c!16437) b!97059))

(assert (= (and d!25935 (not c!16437)) b!97064))

(assert (= (and d!25935 res!48945) b!97061))

(assert (= (and b!97061 res!48946) b!97049))

(assert (= (and b!97061 (not res!48940)) b!97054))

(assert (= (and b!97054 res!48939) b!97063))

(assert (= (and b!97061 res!48941) b!97046))

(assert (= (and b!97046 c!16441) b!97062))

(assert (= (and b!97046 (not c!16441)) b!97052))

(assert (= (and b!97062 res!48938) b!97055))

(assert (= (or b!97062 b!97052) bm!9843))

(assert (= (and b!97046 res!48944) b!97056))

(assert (= (and b!97056 c!16440) b!97053))

(assert (= (and b!97056 (not c!16440)) b!97047))

(assert (= (and b!97053 res!48942) b!97050))

(assert (= (or b!97053 b!97047) bm!9841))

(declare-fun b_lambda!4293 () Bool)

(assert (=> (not b_lambda!4293) (not b!97063)))

(assert (=> b!97063 t!5504))

(declare-fun b_and!5943 () Bool)

(assert (= b_and!5939 (and (=> t!5504 result!3229) b_and!5943)))

(assert (=> b!97063 t!5506))

(declare-fun b_and!5945 () Bool)

(assert (= b_and!5941 (and (=> t!5506 result!3231) b_and!5945)))

(declare-fun m!106203 () Bool)

(assert (=> bm!9842 m!106203))

(declare-fun m!106205 () Bool)

(assert (=> b!97055 m!106205))

(declare-fun m!106207 () Bool)

(assert (=> b!97059 m!106207))

(declare-fun m!106209 () Bool)

(assert (=> b!97059 m!106209))

(declare-fun m!106211 () Bool)

(assert (=> b!97059 m!106211))

(declare-fun m!106213 () Bool)

(assert (=> b!97059 m!106213))

(declare-fun m!106215 () Bool)

(assert (=> b!97059 m!106215))

(declare-fun m!106217 () Bool)

(assert (=> b!97059 m!106217))

(declare-fun m!106219 () Bool)

(assert (=> b!97059 m!106219))

(declare-fun m!106221 () Bool)

(assert (=> b!97059 m!106221))

(declare-fun m!106223 () Bool)

(assert (=> b!97059 m!106223))

(declare-fun m!106225 () Bool)

(assert (=> b!97059 m!106225))

(declare-fun m!106227 () Bool)

(assert (=> b!97059 m!106227))

(declare-fun m!106229 () Bool)

(assert (=> b!97059 m!106229))

(declare-fun m!106231 () Bool)

(assert (=> b!97059 m!106231))

(assert (=> b!97059 m!106209))

(declare-fun m!106233 () Bool)

(assert (=> b!97059 m!106233))

(assert (=> b!97059 m!106215))

(declare-fun m!106235 () Bool)

(assert (=> b!97059 m!106235))

(assert (=> b!97059 m!106219))

(declare-fun m!106237 () Bool)

(assert (=> b!97059 m!106237))

(declare-fun m!106239 () Bool)

(assert (=> b!97059 m!106239))

(assert (=> b!97059 m!106225))

(assert (=> bm!9839 m!106237))

(assert (=> b!97054 m!106239))

(assert (=> b!97054 m!106239))

(declare-fun m!106241 () Bool)

(assert (=> b!97054 m!106241))

(assert (=> b!97049 m!106239))

(assert (=> b!97049 m!106239))

(declare-fun m!106243 () Bool)

(assert (=> b!97049 m!106243))

(declare-fun m!106245 () Bool)

(assert (=> b!97065 m!106245))

(declare-fun m!106247 () Bool)

(assert (=> bm!9843 m!106247))

(declare-fun m!106249 () Bool)

(assert (=> b!97050 m!106249))

(declare-fun m!106251 () Bool)

(assert (=> bm!9841 m!106251))

(assert (=> b!97048 m!106239))

(assert (=> b!97048 m!106239))

(assert (=> b!97048 m!106243))

(declare-fun m!106253 () Bool)

(assert (=> b!97063 m!106253))

(assert (=> b!97063 m!104273))

(declare-fun m!106255 () Bool)

(assert (=> b!97063 m!106255))

(assert (=> b!97063 m!106239))

(assert (=> b!97063 m!104273))

(assert (=> b!97063 m!106239))

(declare-fun m!106257 () Bool)

(assert (=> b!97063 m!106257))

(assert (=> b!97063 m!106253))

(assert (=> d!25935 m!104095))

(assert (=> d!25311 d!25935))

(declare-fun d!25937 () Bool)

(declare-fun e!63260 () Bool)

(assert (=> d!25937 e!63260))

(declare-fun res!48947 () Bool)

(assert (=> d!25937 (=> (not res!48947) (not e!63260))))

(assert (=> d!25937 (= res!48947 (and (bvsge (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) #b00000000000000000000000000000000) (bvslt (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (size!2252 lt!47926))))))

(declare-fun lt!48638 () Unit!2864)

(assert (=> d!25937 (= lt!48638 (choose!576 lt!47926 lt!47934 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (defaultEntry!2457 newMap!16)))))

(assert (=> d!25937 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25937 (= (lemmaValidKeyInArrayIsInListMap!101 lt!47926 lt!47934 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (defaultEntry!2457 newMap!16)) lt!48638)))

(declare-fun b!97067 () Bool)

(assert (=> b!97067 (= e!63260 (contains!794 (getCurrentListMap!470 lt!47926 lt!47934 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (select (arr!2003 lt!47926) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)))))))

(assert (= (and d!25937 res!48947) b!97067))

(declare-fun m!106259 () Bool)

(assert (=> d!25937 m!106259))

(assert (=> d!25937 m!104095))

(assert (=> b!97067 m!104153))

(declare-fun m!106261 () Bool)

(assert (=> b!97067 m!106261))

(assert (=> b!97067 m!104153))

(assert (=> b!97067 m!106261))

(declare-fun m!106263 () Bool)

(assert (=> b!97067 m!106263))

(assert (=> d!25311 d!25937))

(assert (=> d!25311 d!25779))

(assert (=> d!25311 d!25295))

(declare-fun b!97068 () Bool)

(declare-fun e!63262 () (_ BitVec 32))

(assert (=> b!97068 (= e!63262 #b00000000000000000000000000000000)))

(declare-fun b!97069 () Bool)

(declare-fun e!63261 () (_ BitVec 32))

(assert (=> b!97069 (= e!63262 e!63261)))

(declare-fun c!16443 () Bool)

(assert (=> b!97069 (= c!16443 (validKeyInArray!0 (select (arr!2003 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!97070 () Bool)

(declare-fun call!9847 () (_ BitVec 32))

(assert (=> b!97070 (= e!63261 call!9847)))

(declare-fun bm!9844 () Bool)

(assert (=> bm!9844 (= call!9847 (arrayCountValidKeys!0 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16))) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2252 (_keys!4143 newMap!16))))))

(declare-fun b!97071 () Bool)

(assert (=> b!97071 (= e!63261 (bvadd #b00000000000000000000000000000001 call!9847))))

(declare-fun lt!48639 () (_ BitVec 32))

(declare-fun d!25939 () Bool)

(assert (=> d!25939 (and (bvsge lt!48639 #b00000000000000000000000000000000) (bvsle lt!48639 (bvsub (size!2252 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> d!25939 (= lt!48639 e!63262)))

(declare-fun c!16444 () Bool)

(assert (=> d!25939 (= c!16444 (bvsge #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))))))

(assert (=> d!25939 (and (bvsle #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))) (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvsle (size!2252 (_keys!4143 newMap!16)) (size!2252 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16))))))))

(assert (=> d!25939 (= (arrayCountValidKeys!0 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16))) #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))) lt!48639)))

(assert (= (and d!25939 c!16444) b!97068))

(assert (= (and d!25939 (not c!16444)) b!97069))

(assert (= (and b!97069 c!16443) b!97071))

(assert (= (and b!97069 (not c!16443)) b!97070))

(assert (= (or b!97071 b!97070) bm!9844))

(declare-fun m!106265 () Bool)

(assert (=> b!97069 m!106265))

(assert (=> b!97069 m!106265))

(declare-fun m!106267 () Bool)

(assert (=> b!97069 m!106267))

(declare-fun m!106269 () Bool)

(assert (=> bm!9844 m!106269))

(assert (=> d!25311 d!25939))

(assert (=> d!25311 d!25309))

(declare-fun d!25941 () Bool)

(declare-fun res!48950 () Bool)

(declare-fun e!63263 () Bool)

(assert (=> d!25941 (=> res!48950 e!63263)))

(assert (=> d!25941 (= res!48950 (bvsge lt!47911 (size!2252 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16))))))))

(assert (=> d!25941 (= (arrayNoDuplicates!0 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16))) lt!47911 lt!47925) e!63263)))

(declare-fun b!97072 () Bool)

(declare-fun e!63264 () Bool)

(declare-fun e!63266 () Bool)

(assert (=> b!97072 (= e!63264 e!63266)))

(declare-fun c!16445 () Bool)

(assert (=> b!97072 (= c!16445 (validKeyInArray!0 (select (arr!2003 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16)))) lt!47911)))))

(declare-fun b!97073 () Bool)

(assert (=> b!97073 (= e!63263 e!63264)))

(declare-fun res!48948 () Bool)

(assert (=> b!97073 (=> (not res!48948) (not e!63264))))

(declare-fun e!63265 () Bool)

(assert (=> b!97073 (= res!48948 (not e!63265))))

(declare-fun res!48949 () Bool)

(assert (=> b!97073 (=> (not res!48949) (not e!63265))))

(assert (=> b!97073 (= res!48949 (validKeyInArray!0 (select (arr!2003 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16)))) lt!47911)))))

(declare-fun b!97074 () Bool)

(assert (=> b!97074 (= e!63265 (contains!796 lt!47925 (select (arr!2003 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16)))) lt!47911)))))

(declare-fun call!9848 () Bool)

(declare-fun bm!9845 () Bool)

(assert (=> bm!9845 (= call!9848 (arrayNoDuplicates!0 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16))) (bvadd lt!47911 #b00000000000000000000000000000001) (ite c!16445 (Cons!1570 (select (arr!2003 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16)))) lt!47911) lt!47925) lt!47925)))))

(declare-fun b!97075 () Bool)

(assert (=> b!97075 (= e!63266 call!9848)))

(declare-fun b!97076 () Bool)

(assert (=> b!97076 (= e!63266 call!9848)))

(assert (= (and d!25941 (not res!48950)) b!97073))

(assert (= (and b!97073 res!48949) b!97074))

(assert (= (and b!97073 res!48948) b!97072))

(assert (= (and b!97072 c!16445) b!97075))

(assert (= (and b!97072 (not c!16445)) b!97076))

(assert (= (or b!97075 b!97076) bm!9845))

(declare-fun m!106271 () Bool)

(assert (=> b!97072 m!106271))

(assert (=> b!97072 m!106271))

(declare-fun m!106273 () Bool)

(assert (=> b!97072 m!106273))

(assert (=> b!97073 m!106271))

(assert (=> b!97073 m!106271))

(assert (=> b!97073 m!106273))

(assert (=> b!97074 m!106271))

(assert (=> b!97074 m!106271))

(declare-fun m!106275 () Bool)

(assert (=> b!97074 m!106275))

(assert (=> bm!9845 m!106271))

(declare-fun m!106277 () Bool)

(assert (=> bm!9845 m!106277))

(assert (=> d!25311 d!25941))

(declare-fun d!25943 () Bool)

(declare-fun e!63269 () Bool)

(assert (=> d!25943 e!63269))

(declare-fun res!48953 () Bool)

(assert (=> d!25943 (=> (not res!48953) (not e!63269))))

(assert (=> d!25943 (= res!48953 (and (bvsge (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) #b00000000000000000000000000000000) (bvslt (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (size!2252 (_keys!4143 newMap!16))) (bvslt (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (size!2253 (_values!2440 newMap!16)))))))

(declare-fun lt!48642 () Unit!2864)

(declare-fun choose!586 (array!4215 array!4217 (_ BitVec 32) (_ BitVec 32) V!3139 V!3139 (_ BitVec 32) (_ BitVec 64) V!3139 Int) Unit!2864)

(assert (=> d!25943 (= lt!48642 (choose!586 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2457 newMap!16)))))

(assert (=> d!25943 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25943 (= (lemmaAddValidKeyToArrayThenAddPairToListMap!24 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)) (defaultEntry!2457 newMap!16)) lt!48642)))

(declare-fun b!97079 () Bool)

(assert (=> b!97079 (= e!63269 (= (+!134 (getCurrentListMap!470 (_keys!4143 newMap!16) (_values!2440 newMap!16) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (getCurrentListMap!470 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16))) (array!4218 (store (arr!2004 (_values!2440 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (ValueCellFull!966 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2253 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16))))))

(assert (= (and d!25943 res!48953) b!97079))

(assert (=> d!25943 m!103861))

(assert (=> d!25943 m!103883))

(declare-fun m!106279 () Bool)

(assert (=> d!25943 m!106279))

(assert (=> d!25943 m!104095))

(assert (=> b!97079 m!104167))

(assert (=> b!97079 m!104135))

(assert (=> b!97079 m!104169))

(assert (=> b!97079 m!104035))

(assert (=> b!97079 m!104035))

(assert (=> b!97079 m!104149))

(assert (=> d!25311 d!25943))

(declare-fun b!97080 () Bool)

(declare-fun e!63271 () (_ BitVec 32))

(assert (=> b!97080 (= e!63271 #b00000000000000000000000000000000)))

(declare-fun b!97081 () Bool)

(declare-fun e!63270 () (_ BitVec 32))

(assert (=> b!97081 (= e!63271 e!63270)))

(declare-fun c!16446 () Bool)

(assert (=> b!97081 (= c!16446 (validKeyInArray!0 (select (arr!2003 lt!47924) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)))))))

(declare-fun b!97082 () Bool)

(declare-fun call!9849 () (_ BitVec 32))

(assert (=> b!97082 (= e!63270 call!9849)))

(declare-fun bm!9846 () Bool)

(assert (=> bm!9846 (= call!9849 (arrayCountValidKeys!0 lt!47924 (bvadd (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) #b00000000000000000000000000000001) (bvadd (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) #b00000000000000000000000000000001)))))

(declare-fun b!97083 () Bool)

(assert (=> b!97083 (= e!63270 (bvadd #b00000000000000000000000000000001 call!9849))))

(declare-fun lt!48643 () (_ BitVec 32))

(declare-fun d!25945 () Bool)

(assert (=> d!25945 (and (bvsge lt!48643 #b00000000000000000000000000000000) (bvsle lt!48643 (bvsub (size!2252 lt!47924) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)))))))

(assert (=> d!25945 (= lt!48643 e!63271)))

(declare-fun c!16447 () Bool)

(assert (=> d!25945 (= c!16447 (bvsge (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (bvadd (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) #b00000000000000000000000000000001)))))

(assert (=> d!25945 (and (bvsle (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (bvadd (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) #b00000000000000000000000000000001)) (bvsge (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) #b00000000000000000000000000000000) (bvsle (bvadd (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) #b00000000000000000000000000000001) (size!2252 lt!47924)))))

(assert (=> d!25945 (= (arrayCountValidKeys!0 lt!47924 (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (bvadd (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) #b00000000000000000000000000000001)) lt!48643)))

(assert (= (and d!25945 c!16447) b!97080))

(assert (= (and d!25945 (not c!16447)) b!97081))

(assert (= (and b!97081 c!16446) b!97083))

(assert (= (and b!97081 (not c!16446)) b!97082))

(assert (= (or b!97083 b!97082) bm!9846))

(declare-fun m!106281 () Bool)

(assert (=> b!97081 m!106281))

(assert (=> b!97081 m!106281))

(declare-fun m!106283 () Bool)

(assert (=> b!97081 m!106283))

(declare-fun m!106285 () Bool)

(assert (=> bm!9846 m!106285))

(assert (=> d!25311 d!25945))

(assert (=> d!25311 d!25787))

(declare-fun b!97084 () Bool)

(declare-fun res!48960 () Bool)

(declare-fun e!63281 () Bool)

(assert (=> b!97084 (=> (not res!48960) (not e!63281))))

(declare-fun e!63282 () Bool)

(assert (=> b!97084 (= res!48960 e!63282)))

(declare-fun c!16452 () Bool)

(assert (=> b!97084 (= c!16452 (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun d!25947 () Bool)

(assert (=> d!25947 e!63281))

(declare-fun res!48961 () Bool)

(assert (=> d!25947 (=> (not res!48961) (not e!63281))))

(assert (=> d!25947 (= res!48961 (or (bvsge #b00000000000000000000000000000000 (size!2252 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16))))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16))))))))))

(declare-fun lt!48650 () ListLongMap!1527)

(declare-fun lt!48664 () ListLongMap!1527)

(assert (=> d!25947 (= lt!48650 lt!48664)))

(declare-fun lt!48658 () Unit!2864)

(declare-fun e!63279 () Unit!2864)

(assert (=> d!25947 (= lt!48658 e!63279)))

(declare-fun c!16448 () Bool)

(declare-fun e!63277 () Bool)

(assert (=> d!25947 (= c!16448 e!63277)))

(declare-fun res!48959 () Bool)

(assert (=> d!25947 (=> (not res!48959) (not e!63277))))

(assert (=> d!25947 (= res!48959 (bvslt #b00000000000000000000000000000000 (size!2252 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16))))))))

(declare-fun e!63276 () ListLongMap!1527)

(assert (=> d!25947 (= lt!48664 e!63276)))

(declare-fun c!16449 () Bool)

(assert (=> d!25947 (= c!16449 (and (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!25947 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25947 (= (getCurrentListMap!470 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16))) (array!4218 (store (arr!2004 (_values!2440 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (ValueCellFull!966 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2253 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) lt!48650)))

(declare-fun bm!9847 () Bool)

(declare-fun call!9852 () ListLongMap!1527)

(declare-fun call!9853 () ListLongMap!1527)

(assert (=> bm!9847 (= call!9852 call!9853)))

(declare-fun bm!9848 () Bool)

(declare-fun call!9850 () ListLongMap!1527)

(declare-fun call!9855 () ListLongMap!1527)

(assert (=> bm!9848 (= call!9850 call!9855)))

(declare-fun b!97085 () Bool)

(declare-fun e!63272 () Bool)

(declare-fun call!9854 () Bool)

(assert (=> b!97085 (= e!63272 (not call!9854))))

(declare-fun bm!9849 () Bool)

(assert (=> bm!9849 (= call!9853 (getCurrentListMapNoExtraKeys!99 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16))) (array!4218 (store (arr!2004 (_values!2440 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (ValueCellFull!966 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2253 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun bm!9850 () Bool)

(declare-fun call!9851 () ListLongMap!1527)

(assert (=> bm!9850 (= call!9851 call!9852)))

(declare-fun b!97086 () Bool)

(assert (=> b!97086 (= e!63277 (validKeyInArray!0 (select (arr!2003 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun e!63278 () Bool)

(declare-fun b!97087 () Bool)

(assert (=> b!97087 (= e!63278 (validKeyInArray!0 (select (arr!2003 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun b!97088 () Bool)

(declare-fun e!63275 () Bool)

(assert (=> b!97088 (= e!63275 (= (apply!91 lt!48650 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2342 newMap!16)))))

(declare-fun b!97089 () Bool)

(declare-fun e!63273 () ListLongMap!1527)

(assert (=> b!97089 (= e!63273 call!9851)))

(declare-fun b!97090 () Bool)

(declare-fun call!9856 () Bool)

(assert (=> b!97090 (= e!63282 (not call!9856))))

(declare-fun b!97091 () Bool)

(assert (=> b!97091 (= e!63272 e!63275)))

(declare-fun res!48958 () Bool)

(assert (=> b!97091 (= res!48958 call!9854)))

(assert (=> b!97091 (=> (not res!48958) (not e!63275))))

(declare-fun bm!9851 () Bool)

(assert (=> bm!9851 (= call!9854 (contains!794 lt!48650 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97092 () Bool)

(declare-fun e!63280 () Bool)

(declare-fun e!63283 () Bool)

(assert (=> b!97092 (= e!63280 e!63283)))

(declare-fun res!48955 () Bool)

(assert (=> b!97092 (=> (not res!48955) (not e!63283))))

(assert (=> b!97092 (= res!48955 (contains!794 lt!48650 (select (arr!2003 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16)))) #b00000000000000000000000000000000)))))

(assert (=> b!97092 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16))))))))

(declare-fun c!16453 () Bool)

(declare-fun bm!9852 () Bool)

(assert (=> bm!9852 (= call!9855 (+!134 (ite c!16449 call!9853 (ite c!16453 call!9852 call!9851)) (ite (or c!16449 c!16453) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 newMap!16)) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16)))))))

(declare-fun b!97093 () Bool)

(declare-fun e!63284 () Bool)

(assert (=> b!97093 (= e!63284 (= (apply!91 lt!48650 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2342 newMap!16)))))

(declare-fun b!97094 () Bool)

(assert (=> b!97094 (= e!63281 e!63272)))

(declare-fun c!16451 () Bool)

(assert (=> b!97094 (= c!16451 (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!97095 () Bool)

(declare-fun c!16450 () Bool)

(assert (=> b!97095 (= c!16450 (and (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!63274 () ListLongMap!1527)

(assert (=> b!97095 (= e!63274 e!63273)))

(declare-fun b!97096 () Bool)

(assert (=> b!97096 (= e!63273 call!9850)))

(declare-fun b!97097 () Bool)

(declare-fun lt!48652 () Unit!2864)

(assert (=> b!97097 (= e!63279 lt!48652)))

(declare-fun lt!48657 () ListLongMap!1527)

(assert (=> b!97097 (= lt!48657 (getCurrentListMapNoExtraKeys!99 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16))) (array!4218 (store (arr!2004 (_values!2440 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (ValueCellFull!966 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2253 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48656 () (_ BitVec 64))

(assert (=> b!97097 (= lt!48656 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48653 () (_ BitVec 64))

(assert (=> b!97097 (= lt!48653 (select (arr!2003 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!48648 () Unit!2864)

(assert (=> b!97097 (= lt!48648 (addStillContains!67 lt!48657 lt!48656 (zeroValue!2342 newMap!16) lt!48653))))

(assert (=> b!97097 (contains!794 (+!134 lt!48657 (tuple2!2323 lt!48656 (zeroValue!2342 newMap!16))) lt!48653)))

(declare-fun lt!48665 () Unit!2864)

(assert (=> b!97097 (= lt!48665 lt!48648)))

(declare-fun lt!48660 () ListLongMap!1527)

(assert (=> b!97097 (= lt!48660 (getCurrentListMapNoExtraKeys!99 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16))) (array!4218 (store (arr!2004 (_values!2440 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (ValueCellFull!966 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2253 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48662 () (_ BitVec 64))

(assert (=> b!97097 (= lt!48662 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48651 () (_ BitVec 64))

(assert (=> b!97097 (= lt!48651 (select (arr!2003 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!48661 () Unit!2864)

(assert (=> b!97097 (= lt!48661 (addApplyDifferent!67 lt!48660 lt!48662 (minValue!2342 newMap!16) lt!48651))))

(assert (=> b!97097 (= (apply!91 (+!134 lt!48660 (tuple2!2323 lt!48662 (minValue!2342 newMap!16))) lt!48651) (apply!91 lt!48660 lt!48651))))

(declare-fun lt!48645 () Unit!2864)

(assert (=> b!97097 (= lt!48645 lt!48661)))

(declare-fun lt!48649 () ListLongMap!1527)

(assert (=> b!97097 (= lt!48649 (getCurrentListMapNoExtraKeys!99 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16))) (array!4218 (store (arr!2004 (_values!2440 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (ValueCellFull!966 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2253 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48654 () (_ BitVec 64))

(assert (=> b!97097 (= lt!48654 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48644 () (_ BitVec 64))

(assert (=> b!97097 (= lt!48644 (select (arr!2003 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!48647 () Unit!2864)

(assert (=> b!97097 (= lt!48647 (addApplyDifferent!67 lt!48649 lt!48654 (zeroValue!2342 newMap!16) lt!48644))))

(assert (=> b!97097 (= (apply!91 (+!134 lt!48649 (tuple2!2323 lt!48654 (zeroValue!2342 newMap!16))) lt!48644) (apply!91 lt!48649 lt!48644))))

(declare-fun lt!48655 () Unit!2864)

(assert (=> b!97097 (= lt!48655 lt!48647)))

(declare-fun lt!48646 () ListLongMap!1527)

(assert (=> b!97097 (= lt!48646 (getCurrentListMapNoExtraKeys!99 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16))) (array!4218 (store (arr!2004 (_values!2440 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (ValueCellFull!966 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2253 (_values!2440 newMap!16))) (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)))))

(declare-fun lt!48663 () (_ BitVec 64))

(assert (=> b!97097 (= lt!48663 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48659 () (_ BitVec 64))

(assert (=> b!97097 (= lt!48659 (select (arr!2003 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16)))) #b00000000000000000000000000000000))))

(assert (=> b!97097 (= lt!48652 (addApplyDifferent!67 lt!48646 lt!48663 (minValue!2342 newMap!16) lt!48659))))

(assert (=> b!97097 (= (apply!91 (+!134 lt!48646 (tuple2!2323 lt!48663 (minValue!2342 newMap!16))) lt!48659) (apply!91 lt!48646 lt!48659))))

(declare-fun b!97098 () Bool)

(assert (=> b!97098 (= e!63276 e!63274)))

(assert (=> b!97098 (= c!16453 (and (not (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2282 newMap!16) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!97099 () Bool)

(declare-fun res!48957 () Bool)

(assert (=> b!97099 (=> (not res!48957) (not e!63281))))

(assert (=> b!97099 (= res!48957 e!63280)))

(declare-fun res!48956 () Bool)

(assert (=> b!97099 (=> res!48956 e!63280)))

(assert (=> b!97099 (= res!48956 (not e!63278))))

(declare-fun res!48962 () Bool)

(assert (=> b!97099 (=> (not res!48962) (not e!63278))))

(assert (=> b!97099 (= res!48962 (bvslt #b00000000000000000000000000000000 (size!2252 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16))))))))

(declare-fun bm!9853 () Bool)

(assert (=> bm!9853 (= call!9856 (contains!794 lt!48650 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97100 () Bool)

(assert (=> b!97100 (= e!63282 e!63284)))

(declare-fun res!48954 () Bool)

(assert (=> b!97100 (= res!48954 call!9856)))

(assert (=> b!97100 (=> (not res!48954) (not e!63284))))

(declare-fun b!97101 () Bool)

(assert (=> b!97101 (= e!63283 (= (apply!91 lt!48650 (select (arr!2003 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16)))) #b00000000000000000000000000000000)) (get!1269 (select (arr!2004 (array!4218 (store (arr!2004 (_values!2440 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (ValueCellFull!966 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2253 (_values!2440 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!364 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!97101 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (array!4218 (store (arr!2004 (_values!2440 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (ValueCellFull!966 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2253 (_values!2440 newMap!16))))))))

(assert (=> b!97101 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16))))))))

(declare-fun b!97102 () Bool)

(declare-fun Unit!2927 () Unit!2864)

(assert (=> b!97102 (= e!63279 Unit!2927)))

(declare-fun b!97103 () Bool)

(assert (=> b!97103 (= e!63276 (+!134 call!9855 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 newMap!16))))))

(declare-fun b!97104 () Bool)

(assert (=> b!97104 (= e!63274 call!9850)))

(assert (= (and d!25947 c!16449) b!97103))

(assert (= (and d!25947 (not c!16449)) b!97098))

(assert (= (and b!97098 c!16453) b!97104))

(assert (= (and b!97098 (not c!16453)) b!97095))

(assert (= (and b!97095 c!16450) b!97096))

(assert (= (and b!97095 (not c!16450)) b!97089))

(assert (= (or b!97096 b!97089) bm!9850))

(assert (= (or b!97104 bm!9850) bm!9847))

(assert (= (or b!97104 b!97096) bm!9848))

(assert (= (or b!97103 bm!9847) bm!9849))

(assert (= (or b!97103 bm!9848) bm!9852))

(assert (= (and d!25947 res!48959) b!97086))

(assert (= (and d!25947 c!16448) b!97097))

(assert (= (and d!25947 (not c!16448)) b!97102))

(assert (= (and d!25947 res!48961) b!97099))

(assert (= (and b!97099 res!48962) b!97087))

(assert (= (and b!97099 (not res!48956)) b!97092))

(assert (= (and b!97092 res!48955) b!97101))

(assert (= (and b!97099 res!48957) b!97084))

(assert (= (and b!97084 c!16452) b!97100))

(assert (= (and b!97084 (not c!16452)) b!97090))

(assert (= (and b!97100 res!48954) b!97093))

(assert (= (or b!97100 b!97090) bm!9853))

(assert (= (and b!97084 res!48960) b!97094))

(assert (= (and b!97094 c!16451) b!97091))

(assert (= (and b!97094 (not c!16451)) b!97085))

(assert (= (and b!97091 res!48958) b!97088))

(assert (= (or b!97091 b!97085) bm!9851))

(declare-fun b_lambda!4295 () Bool)

(assert (=> (not b_lambda!4295) (not b!97101)))

(assert (=> b!97101 t!5504))

(declare-fun b_and!5947 () Bool)

(assert (= b_and!5943 (and (=> t!5504 result!3229) b_and!5947)))

(assert (=> b!97101 t!5506))

(declare-fun b_and!5949 () Bool)

(assert (= b_and!5945 (and (=> t!5506 result!3231) b_and!5949)))

(declare-fun m!106287 () Bool)

(assert (=> bm!9852 m!106287))

(declare-fun m!106289 () Bool)

(assert (=> b!97093 m!106289))

(declare-fun m!106291 () Bool)

(assert (=> b!97097 m!106291))

(declare-fun m!106293 () Bool)

(assert (=> b!97097 m!106293))

(declare-fun m!106295 () Bool)

(assert (=> b!97097 m!106295))

(declare-fun m!106297 () Bool)

(assert (=> b!97097 m!106297))

(declare-fun m!106299 () Bool)

(assert (=> b!97097 m!106299))

(declare-fun m!106301 () Bool)

(assert (=> b!97097 m!106301))

(declare-fun m!106303 () Bool)

(assert (=> b!97097 m!106303))

(declare-fun m!106305 () Bool)

(assert (=> b!97097 m!106305))

(declare-fun m!106307 () Bool)

(assert (=> b!97097 m!106307))

(declare-fun m!106309 () Bool)

(assert (=> b!97097 m!106309))

(declare-fun m!106311 () Bool)

(assert (=> b!97097 m!106311))

(declare-fun m!106313 () Bool)

(assert (=> b!97097 m!106313))

(declare-fun m!106315 () Bool)

(assert (=> b!97097 m!106315))

(assert (=> b!97097 m!106293))

(declare-fun m!106317 () Bool)

(assert (=> b!97097 m!106317))

(assert (=> b!97097 m!106299))

(declare-fun m!106319 () Bool)

(assert (=> b!97097 m!106319))

(assert (=> b!97097 m!106303))

(declare-fun m!106321 () Bool)

(assert (=> b!97097 m!106321))

(assert (=> b!97097 m!106265))

(assert (=> b!97097 m!106309))

(assert (=> bm!9849 m!106321))

(assert (=> b!97092 m!106265))

(assert (=> b!97092 m!106265))

(declare-fun m!106323 () Bool)

(assert (=> b!97092 m!106323))

(assert (=> b!97087 m!106265))

(assert (=> b!97087 m!106265))

(assert (=> b!97087 m!106267))

(declare-fun m!106325 () Bool)

(assert (=> b!97103 m!106325))

(declare-fun m!106327 () Bool)

(assert (=> bm!9853 m!106327))

(declare-fun m!106329 () Bool)

(assert (=> b!97088 m!106329))

(declare-fun m!106331 () Bool)

(assert (=> bm!9851 m!106331))

(assert (=> b!97086 m!106265))

(assert (=> b!97086 m!106265))

(assert (=> b!97086 m!106267))

(declare-fun m!106333 () Bool)

(assert (=> b!97101 m!106333))

(assert (=> b!97101 m!104273))

(declare-fun m!106335 () Bool)

(assert (=> b!97101 m!106335))

(assert (=> b!97101 m!106265))

(assert (=> b!97101 m!104273))

(assert (=> b!97101 m!106265))

(declare-fun m!106337 () Bool)

(assert (=> b!97101 m!106337))

(assert (=> b!97101 m!106333))

(assert (=> d!25947 m!104095))

(assert (=> d!25311 d!25947))

(declare-fun d!25949 () Bool)

(declare-fun res!48963 () Bool)

(declare-fun e!63285 () Bool)

(assert (=> d!25949 (=> res!48963 e!63285)))

(assert (=> d!25949 (= res!48963 (= (select (arr!2003 lt!47938) #b00000000000000000000000000000000) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(assert (=> d!25949 (= (arrayContainsKey!0 lt!47938 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) #b00000000000000000000000000000000) e!63285)))

(declare-fun b!97105 () Bool)

(declare-fun e!63286 () Bool)

(assert (=> b!97105 (= e!63285 e!63286)))

(declare-fun res!48964 () Bool)

(assert (=> b!97105 (=> (not res!48964) (not e!63286))))

(assert (=> b!97105 (= res!48964 (bvslt (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (size!2252 lt!47938)))))

(declare-fun b!97106 () Bool)

(assert (=> b!97106 (= e!63286 (arrayContainsKey!0 lt!47938 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001)))))

(assert (= (and d!25949 (not res!48963)) b!97105))

(assert (= (and b!97105 res!48964) b!97106))

(declare-fun m!106339 () Bool)

(assert (=> d!25949 m!106339))

(assert (=> b!97106 m!103861))

(declare-fun m!106341 () Bool)

(assert (=> b!97106 m!106341))

(assert (=> d!25311 d!25949))

(declare-fun d!25951 () Bool)

(assert (=> d!25951 (arrayContainsKey!0 lt!47938 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) #b00000000000000000000000000000000)))

(declare-fun lt!48666 () Unit!2864)

(assert (=> d!25951 (= lt!48666 (choose!13 lt!47938 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759))))))

(assert (=> d!25951 (bvsge (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) #b00000000000000000000000000000000)))

(assert (=> d!25951 (= (lemmaArrayContainsFromImpliesContainsFromZero!0 lt!47938 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759))) lt!48666)))

(declare-fun bs!4023 () Bool)

(assert (= bs!4023 d!25951))

(assert (=> bs!4023 m!103861))

(assert (=> bs!4023 m!104165))

(assert (=> bs!4023 m!103861))

(declare-fun m!106343 () Bool)

(assert (=> bs!4023 m!106343))

(assert (=> d!25311 d!25951))

(assert (=> d!25311 d!25377))

(declare-fun d!25953 () Bool)

(declare-fun e!63289 () Bool)

(assert (=> d!25953 e!63289))

(declare-fun res!48967 () Bool)

(assert (=> d!25953 (=> (not res!48967) (not e!63289))))

(assert (=> d!25953 (= res!48967 (and (bvsge (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) #b00000000000000000000000000000000) (bvslt (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (size!2252 (_keys!4143 newMap!16)))))))

(declare-fun lt!48669 () Unit!2864)

(declare-fun choose!41 (array!4215 (_ BitVec 64) (_ BitVec 32) (_ BitVec 32) List!1574) Unit!2864)

(assert (=> d!25953 (= lt!48669 (choose!41 (_keys!4143 newMap!16) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) lt!47911 lt!47925))))

(assert (=> d!25953 (bvslt (size!2252 (_keys!4143 newMap!16)) #b01111111111111111111111111111111)))

(assert (=> d!25953 (= (lemmaPutNewValidKeyPreservesNoDuplicate!0 (_keys!4143 newMap!16) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) lt!47911 lt!47925) lt!48669)))

(declare-fun b!97109 () Bool)

(assert (=> b!97109 (= e!63289 (arrayNoDuplicates!0 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16))) lt!47911 lt!47925))))

(assert (= (and d!25953 res!48967) b!97109))

(assert (=> d!25953 m!103861))

(declare-fun m!106345 () Bool)

(assert (=> d!25953 m!106345))

(assert (=> b!97109 m!104169))

(assert (=> b!97109 m!104141))

(assert (=> d!25311 d!25953))

(declare-fun d!25955 () Bool)

(declare-fun e!63290 () Bool)

(assert (=> d!25955 e!63290))

(declare-fun res!48968 () Bool)

(assert (=> d!25955 (=> res!48968 e!63290)))

(declare-fun lt!48671 () Bool)

(assert (=> d!25955 (= res!48968 (not lt!48671))))

(declare-fun lt!48670 () Bool)

(assert (=> d!25955 (= lt!48671 lt!48670)))

(declare-fun lt!48672 () Unit!2864)

(declare-fun e!63291 () Unit!2864)

(assert (=> d!25955 (= lt!48672 e!63291)))

(declare-fun c!16454 () Bool)

(assert (=> d!25955 (= c!16454 lt!48670)))

(assert (=> d!25955 (= lt!48670 (containsKey!153 (toList!779 (getCurrentListMap!470 lt!47926 lt!47934 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16))) (select (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)))))))

(assert (=> d!25955 (= (contains!794 (getCurrentListMap!470 lt!47926 lt!47934 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16)) (select (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)))) lt!48671)))

(declare-fun b!97110 () Bool)

(declare-fun lt!48673 () Unit!2864)

(assert (=> b!97110 (= e!63291 lt!48673)))

(assert (=> b!97110 (= lt!48673 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 (getCurrentListMap!470 lt!47926 lt!47934 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16))) (select (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)))))))

(assert (=> b!97110 (isDefined!102 (getValueByKey!149 (toList!779 (getCurrentListMap!470 lt!47926 lt!47934 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16))) (select (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)))))))

(declare-fun b!97111 () Bool)

(declare-fun Unit!2928 () Unit!2864)

(assert (=> b!97111 (= e!63291 Unit!2928)))

(declare-fun b!97112 () Bool)

(assert (=> b!97112 (= e!63290 (isDefined!102 (getValueByKey!149 (toList!779 (getCurrentListMap!470 lt!47926 lt!47934 (mask!6542 newMap!16) (extraKeys!2282 newMap!16) (zeroValue!2342 newMap!16) (minValue!2342 newMap!16) #b00000000000000000000000000000000 (defaultEntry!2457 newMap!16))) (select (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759))))))))

(assert (= (and d!25955 c!16454) b!97110))

(assert (= (and d!25955 (not c!16454)) b!97111))

(assert (= (and d!25955 (not res!48968)) b!97112))

(assert (=> d!25955 m!104155))

(declare-fun m!106347 () Bool)

(assert (=> d!25955 m!106347))

(assert (=> b!97110 m!104155))

(declare-fun m!106349 () Bool)

(assert (=> b!97110 m!106349))

(assert (=> b!97110 m!104155))

(declare-fun m!106351 () Bool)

(assert (=> b!97110 m!106351))

(assert (=> b!97110 m!106351))

(declare-fun m!106353 () Bool)

(assert (=> b!97110 m!106353))

(assert (=> b!97112 m!104155))

(assert (=> b!97112 m!106351))

(assert (=> b!97112 m!106351))

(assert (=> b!97112 m!106353))

(assert (=> d!25311 d!25955))

(assert (=> d!25311 d!25385))

(declare-fun d!25957 () Bool)

(declare-fun e!63294 () Bool)

(assert (=> d!25957 e!63294))

(declare-fun res!48971 () Bool)

(assert (=> d!25957 (=> (not res!48971) (not e!63294))))

(assert (=> d!25957 (= res!48971 (and (bvsge (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) #b00000000000000000000000000000000) (bvslt (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (size!2252 (_keys!4143 newMap!16)))))))

(declare-fun lt!48676 () Unit!2864)

(declare-fun choose!102 ((_ BitVec 64) array!4215 (_ BitVec 32) (_ BitVec 32)) Unit!2864)

(assert (=> d!25957 (= lt!48676 (choose!102 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (_keys!4143 newMap!16) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (mask!6542 newMap!16)))))

(assert (=> d!25957 (validMask!0 (mask!6542 newMap!16))))

(assert (=> d!25957 (= (lemmaPutValidKeyPreservesForallSeekEntryOrOpen!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (_keys!4143 newMap!16) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (mask!6542 newMap!16)) lt!48676)))

(declare-fun b!97115 () Bool)

(assert (=> b!97115 (= e!63294 (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16))) (mask!6542 newMap!16)))))

(assert (= (and d!25957 res!48971) b!97115))

(assert (=> d!25957 m!103861))

(declare-fun m!106355 () Bool)

(assert (=> d!25957 m!106355))

(assert (=> d!25957 m!104095))

(assert (=> b!97115 m!104169))

(assert (=> b!97115 m!104137))

(assert (=> d!25311 d!25957))

(declare-fun b!97124 () Bool)

(declare-fun res!48980 () Bool)

(declare-fun e!63299 () Bool)

(assert (=> b!97124 (=> (not res!48980) (not e!63299))))

(assert (=> b!97124 (= res!48980 (not (validKeyInArray!0 (select (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759))))))))

(declare-fun b!97125 () Bool)

(declare-fun res!48982 () Bool)

(assert (=> b!97125 (=> (not res!48982) (not e!63299))))

(assert (=> b!97125 (= res!48982 (validKeyInArray!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(declare-fun e!63300 () Bool)

(declare-fun b!97127 () Bool)

(assert (=> b!97127 (= e!63300 (= (arrayCountValidKeys!0 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16))) #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))) (bvadd (arrayCountValidKeys!0 (_keys!4143 newMap!16) #b00000000000000000000000000000000 (size!2252 (_keys!4143 newMap!16))) #b00000000000000000000000000000001)))))

(declare-fun b!97126 () Bool)

(assert (=> b!97126 (= e!63299 (bvslt (size!2252 (_keys!4143 newMap!16)) #b01111111111111111111111111111111))))

(declare-fun d!25959 () Bool)

(assert (=> d!25959 e!63300))

(declare-fun res!48983 () Bool)

(assert (=> d!25959 (=> (not res!48983) (not e!63300))))

(assert (=> d!25959 (= res!48983 (and (bvsge (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) #b00000000000000000000000000000000) (bvslt (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (size!2252 (_keys!4143 newMap!16)))))))

(declare-fun lt!48679 () Unit!2864)

(declare-fun choose!1 (array!4215 (_ BitVec 32) (_ BitVec 64)) Unit!2864)

(assert (=> d!25959 (= lt!48679 (choose!1 (_keys!4143 newMap!16) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)))))

(assert (=> d!25959 e!63299))

(declare-fun res!48981 () Bool)

(assert (=> d!25959 (=> (not res!48981) (not e!63299))))

(assert (=> d!25959 (= res!48981 (and (bvsge (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) #b00000000000000000000000000000000) (bvslt (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (size!2252 (_keys!4143 newMap!16)))))))

(assert (=> d!25959 (= (lemmaAddValidKeyIncreasesNumberOfValidKeysInArray!0 (_keys!4143 newMap!16) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) lt!48679)))

(assert (= (and d!25959 res!48981) b!97124))

(assert (= (and b!97124 res!48980) b!97125))

(assert (= (and b!97125 res!48982) b!97126))

(assert (= (and d!25959 res!48983) b!97127))

(declare-fun m!106357 () Bool)

(assert (=> b!97124 m!106357))

(assert (=> b!97124 m!106357))

(declare-fun m!106359 () Bool)

(assert (=> b!97124 m!106359))

(assert (=> b!97125 m!103861))

(assert (=> b!97125 m!104019))

(assert (=> b!97127 m!104169))

(assert (=> b!97127 m!104145))

(assert (=> b!97127 m!104029))

(assert (=> d!25959 m!103861))

(declare-fun m!106361 () Bool)

(assert (=> d!25959 m!106361))

(assert (=> d!25311 d!25959))

(declare-fun b!97128 () Bool)

(declare-fun e!63302 () Bool)

(declare-fun call!9857 () Bool)

(assert (=> b!97128 (= e!63302 call!9857)))

(declare-fun b!97129 () Bool)

(declare-fun e!63303 () Bool)

(assert (=> b!97129 (= e!63302 e!63303)))

(declare-fun lt!48680 () (_ BitVec 64))

(assert (=> b!97129 (= lt!48680 (select (arr!2003 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16)))) #b00000000000000000000000000000000))))

(declare-fun lt!48682 () Unit!2864)

(assert (=> b!97129 (= lt!48682 (lemmaArrayContainsFromImpliesContainsFromZero!0 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16))) lt!48680 #b00000000000000000000000000000000))))

(assert (=> b!97129 (arrayContainsKey!0 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16))) lt!48680 #b00000000000000000000000000000000)))

(declare-fun lt!48681 () Unit!2864)

(assert (=> b!97129 (= lt!48681 lt!48682)))

(declare-fun res!48984 () Bool)

(assert (=> b!97129 (= res!48984 (= (seekEntryOrOpen!0 (select (arr!2003 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16)))) #b00000000000000000000000000000000) (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16))) (mask!6542 newMap!16)) (Found!252 #b00000000000000000000000000000000)))))

(assert (=> b!97129 (=> (not res!48984) (not e!63303))))

(declare-fun b!97130 () Bool)

(declare-fun e!63301 () Bool)

(assert (=> b!97130 (= e!63301 e!63302)))

(declare-fun c!16455 () Bool)

(assert (=> b!97130 (= c!16455 (validKeyInArray!0 (select (arr!2003 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun d!25961 () Bool)

(declare-fun res!48985 () Bool)

(assert (=> d!25961 (=> res!48985 e!63301)))

(assert (=> d!25961 (= res!48985 (bvsge #b00000000000000000000000000000000 (size!2252 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16))))))))

(assert (=> d!25961 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16))) (mask!6542 newMap!16)) e!63301)))

(declare-fun b!97131 () Bool)

(assert (=> b!97131 (= e!63303 call!9857)))

(declare-fun bm!9854 () Bool)

(assert (=> bm!9854 (= call!9857 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (array!4216 (store (arr!2003 (_keys!4143 newMap!16)) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355)) (size!2252 (_keys!4143 newMap!16))) (mask!6542 newMap!16)))))

(assert (= (and d!25961 (not res!48985)) b!97130))

(assert (= (and b!97130 c!16455) b!97129))

(assert (= (and b!97130 (not c!16455)) b!97128))

(assert (= (and b!97129 res!48984) b!97131))

(assert (= (or b!97131 b!97128) bm!9854))

(assert (=> b!97129 m!106265))

(declare-fun m!106363 () Bool)

(assert (=> b!97129 m!106363))

(declare-fun m!106365 () Bool)

(assert (=> b!97129 m!106365))

(assert (=> b!97129 m!106265))

(declare-fun m!106367 () Bool)

(assert (=> b!97129 m!106367))

(assert (=> b!97130 m!106265))

(assert (=> b!97130 m!106265))

(assert (=> b!97130 m!106267))

(declare-fun m!106369 () Bool)

(assert (=> bm!9854 m!106369))

(assert (=> d!25311 d!25961))

(declare-fun d!25963 () Bool)

(assert (=> d!25963 (= (arrayCountValidKeys!0 lt!47924 (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (bvadd (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) #b00000000000000000000000000000001)) #b00000000000000000000000000000001)))

(declare-fun lt!48685 () Unit!2864)

(declare-fun choose!2 (array!4215 (_ BitVec 32)) Unit!2864)

(assert (=> d!25963 (= lt!48685 (choose!2 lt!47924 (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759))))))

(declare-fun e!63306 () Bool)

(assert (=> d!25963 e!63306))

(declare-fun res!48990 () Bool)

(assert (=> d!25963 (=> (not res!48990) (not e!63306))))

(assert (=> d!25963 (= res!48990 (and (bvsge (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) #b00000000000000000000000000000000) (bvslt (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)) (size!2252 lt!47924))))))

(assert (=> d!25963 (= (lemmaValidKeyAtIImpliesCountKeysIsOne!0 lt!47924 (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759))) lt!48685)))

(declare-fun b!97136 () Bool)

(declare-fun res!48991 () Bool)

(assert (=> b!97136 (=> (not res!48991) (not e!63306))))

(assert (=> b!97136 (= res!48991 (validKeyInArray!0 (select (arr!2003 lt!47924) (ite c!16106 (index!3153 lt!47759) (index!3150 lt!47759)))))))

(declare-fun b!97137 () Bool)

(assert (=> b!97137 (= e!63306 (bvslt (size!2252 lt!47924) #b01111111111111111111111111111111))))

(assert (= (and d!25963 res!48990) b!97136))

(assert (= (and b!97136 res!48991) b!97137))

(assert (=> d!25963 m!104163))

(declare-fun m!106371 () Bool)

(assert (=> d!25963 m!106371))

(assert (=> b!97136 m!106281))

(assert (=> b!97136 m!106281))

(assert (=> b!97136 m!106283))

(assert (=> d!25311 d!25963))

(declare-fun b!97138 () Bool)

(declare-fun e!63308 () Bool)

(declare-fun call!9858 () Bool)

(assert (=> b!97138 (= e!63308 call!9858)))

(declare-fun b!97139 () Bool)

(declare-fun e!63309 () Bool)

(assert (=> b!97139 (= e!63308 e!63309)))

(declare-fun lt!48686 () (_ BitVec 64))

(assert (=> b!97139 (= lt!48686 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) #b00000000000000000000000000000000))))

(declare-fun lt!48688 () Unit!2864)

(assert (=> b!97139 (= lt!48688 (lemmaArrayContainsFromImpliesContainsFromZero!0 (_keys!4143 (v!2778 (underlying!331 thiss!992))) lt!48686 #b00000000000000000000000000000000))))

(assert (=> b!97139 (arrayContainsKey!0 (_keys!4143 (v!2778 (underlying!331 thiss!992))) lt!48686 #b00000000000000000000000000000000)))

(declare-fun lt!48687 () Unit!2864)

(assert (=> b!97139 (= lt!48687 lt!48688)))

(declare-fun res!48992 () Bool)

(assert (=> b!97139 (= res!48992 (= (seekEntryOrOpen!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) #b00000000000000000000000000000000) (_keys!4143 (v!2778 (underlying!331 thiss!992))) (mask!6542 (v!2778 (underlying!331 thiss!992)))) (Found!252 #b00000000000000000000000000000000)))))

(assert (=> b!97139 (=> (not res!48992) (not e!63309))))

(declare-fun b!97140 () Bool)

(declare-fun e!63307 () Bool)

(assert (=> b!97140 (= e!63307 e!63308)))

(declare-fun c!16456 () Bool)

(assert (=> b!97140 (= c!16456 (validKeyInArray!0 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) #b00000000000000000000000000000000)))))

(declare-fun d!25965 () Bool)

(declare-fun res!48993 () Bool)

(assert (=> d!25965 (=> res!48993 e!63307)))

(assert (=> d!25965 (= res!48993 (bvsge #b00000000000000000000000000000000 (size!2252 (_keys!4143 (v!2778 (underlying!331 thiss!992))))))))

(assert (=> d!25965 (= (arrayForallSeekEntryOrOpenFound!0 #b00000000000000000000000000000000 (_keys!4143 (v!2778 (underlying!331 thiss!992))) (mask!6542 (v!2778 (underlying!331 thiss!992)))) e!63307)))

(declare-fun b!97141 () Bool)

(assert (=> b!97141 (= e!63309 call!9858)))

(declare-fun bm!9855 () Bool)

(assert (=> bm!9855 (= call!9858 (arrayForallSeekEntryOrOpenFound!0 (bvadd #b00000000000000000000000000000000 #b00000000000000000000000000000001) (_keys!4143 (v!2778 (underlying!331 thiss!992))) (mask!6542 (v!2778 (underlying!331 thiss!992)))))))

(assert (= (and d!25965 (not res!48993)) b!97140))

(assert (= (and b!97140 c!16456) b!97139))

(assert (= (and b!97140 (not c!16456)) b!97138))

(assert (= (and b!97139 res!48992) b!97141))

(assert (= (or b!97141 b!97138) bm!9855))

(assert (=> b!97139 m!104957))

(declare-fun m!106373 () Bool)

(assert (=> b!97139 m!106373))

(declare-fun m!106375 () Bool)

(assert (=> b!97139 m!106375))

(assert (=> b!97139 m!104957))

(declare-fun m!106377 () Bool)

(assert (=> b!97139 m!106377))

(assert (=> b!97140 m!104957))

(assert (=> b!97140 m!104957))

(assert (=> b!97140 m!104959))

(declare-fun m!106379 () Bool)

(assert (=> bm!9855 m!106379))

(assert (=> b!96245 d!25965))

(declare-fun d!25967 () Bool)

(declare-fun res!48994 () Bool)

(declare-fun e!63310 () Bool)

(assert (=> d!25967 (=> res!48994 e!63310)))

(assert (=> d!25967 (= res!48994 (and ((_ is Cons!1569) (toList!779 (+!134 lt!47826 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))) (= (_1!1172 (h!2162 (toList!779 (+!134 lt!47826 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))) lt!47822)))))

(assert (=> d!25967 (= (containsKey!153 (toList!779 (+!134 lt!47826 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!47822) e!63310)))

(declare-fun b!97142 () Bool)

(declare-fun e!63311 () Bool)

(assert (=> b!97142 (= e!63310 e!63311)))

(declare-fun res!48995 () Bool)

(assert (=> b!97142 (=> (not res!48995) (not e!63311))))

(assert (=> b!97142 (= res!48995 (and (or (not ((_ is Cons!1569) (toList!779 (+!134 lt!47826 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))) (bvsle (_1!1172 (h!2162 (toList!779 (+!134 lt!47826 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))) lt!47822)) ((_ is Cons!1569) (toList!779 (+!134 lt!47826 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))) (bvslt (_1!1172 (h!2162 (toList!779 (+!134 lt!47826 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992)))))))) lt!47822)))))

(declare-fun b!97143 () Bool)

(assert (=> b!97143 (= e!63311 (containsKey!153 (t!5495 (toList!779 (+!134 lt!47826 (tuple2!2323 lt!47825 (zeroValue!2342 (v!2778 (underlying!331 thiss!992))))))) lt!47822))))

(assert (= (and d!25967 (not res!48994)) b!97142))

(assert (= (and b!97142 res!48995) b!97143))

(declare-fun m!106381 () Bool)

(assert (=> b!97143 m!106381))

(assert (=> d!25411 d!25967))

(declare-fun d!25969 () Bool)

(declare-fun e!63312 () Bool)

(assert (=> d!25969 e!63312))

(declare-fun res!48996 () Bool)

(assert (=> d!25969 (=> res!48996 e!63312)))

(declare-fun lt!48690 () Bool)

(assert (=> d!25969 (= res!48996 (not lt!48690))))

(declare-fun lt!48689 () Bool)

(assert (=> d!25969 (= lt!48690 lt!48689)))

(declare-fun lt!48691 () Unit!2864)

(declare-fun e!63313 () Unit!2864)

(assert (=> d!25969 (= lt!48691 e!63313)))

(declare-fun c!16457 () Bool)

(assert (=> d!25969 (= c!16457 lt!48689)))

(assert (=> d!25969 (= lt!48689 (containsKey!153 (toList!779 lt!48040) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> d!25969 (= (contains!794 lt!48040 #b1000000000000000000000000000000000000000000000000000000000000000) lt!48690)))

(declare-fun b!97144 () Bool)

(declare-fun lt!48692 () Unit!2864)

(assert (=> b!97144 (= e!63313 lt!48692)))

(assert (=> b!97144 (= lt!48692 (lemmaContainsKeyImpliesGetValueByKeyDefined!101 (toList!779 lt!48040) #b1000000000000000000000000000000000000000000000000000000000000000))))

(assert (=> b!97144 (isDefined!102 (getValueByKey!149 (toList!779 lt!48040) #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97145 () Bool)

(declare-fun Unit!2929 () Unit!2864)

(assert (=> b!97145 (= e!63313 Unit!2929)))

(declare-fun b!97146 () Bool)

(assert (=> b!97146 (= e!63312 (isDefined!102 (getValueByKey!149 (toList!779 lt!48040) #b1000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25969 c!16457) b!97144))

(assert (= (and d!25969 (not c!16457)) b!97145))

(assert (= (and d!25969 (not res!48996)) b!97146))

(declare-fun m!106383 () Bool)

(assert (=> d!25969 m!106383))

(declare-fun m!106385 () Bool)

(assert (=> b!97144 m!106385))

(assert (=> b!97144 m!104767))

(assert (=> b!97144 m!104767))

(declare-fun m!106387 () Bool)

(assert (=> b!97144 m!106387))

(assert (=> b!97146 m!104767))

(assert (=> b!97146 m!104767))

(assert (=> b!97146 m!106387))

(assert (=> bm!9742 d!25969))

(declare-fun d!25971 () Bool)

(assert (=> d!25971 (= (get!1273 (getValueByKey!149 (toList!779 (+!134 lt!47815 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!47828)) (v!2782 (getValueByKey!149 (toList!779 (+!134 lt!47815 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!47828)))))

(assert (=> d!25413 d!25971))

(declare-fun b!97147 () Bool)

(declare-fun e!63314 () Option!155)

(assert (=> b!97147 (= e!63314 (Some!154 (_2!1172 (h!2162 (toList!779 (+!134 lt!47815 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))))))))

(declare-fun b!97150 () Bool)

(declare-fun e!63315 () Option!155)

(assert (=> b!97150 (= e!63315 None!153)))

(declare-fun c!16458 () Bool)

(declare-fun d!25973 () Bool)

(assert (=> d!25973 (= c!16458 (and ((_ is Cons!1569) (toList!779 (+!134 lt!47815 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))) (= (_1!1172 (h!2162 (toList!779 (+!134 lt!47815 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))) lt!47828)))))

(assert (=> d!25973 (= (getValueByKey!149 (toList!779 (+!134 lt!47815 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))) lt!47828) e!63314)))

(declare-fun b!97149 () Bool)

(assert (=> b!97149 (= e!63315 (getValueByKey!149 (t!5495 (toList!779 (+!134 lt!47815 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))) lt!47828))))

(declare-fun b!97148 () Bool)

(assert (=> b!97148 (= e!63314 e!63315)))

(declare-fun c!16459 () Bool)

(assert (=> b!97148 (= c!16459 (and ((_ is Cons!1569) (toList!779 (+!134 lt!47815 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992))))))) (not (= (_1!1172 (h!2162 (toList!779 (+!134 lt!47815 (tuple2!2323 lt!47832 (minValue!2342 (v!2778 (underlying!331 thiss!992)))))))) lt!47828))))))

(assert (= (and d!25973 c!16458) b!97147))

(assert (= (and d!25973 (not c!16458)) b!97148))

(assert (= (and b!97148 c!16459) b!97149))

(assert (= (and b!97148 (not c!16459)) b!97150))

(declare-fun m!106389 () Bool)

(assert (=> b!97149 m!106389))

(assert (=> d!25413 d!25973))

(assert (=> d!25377 d!25523))

(declare-fun b!97151 () Bool)

(declare-fun e!63316 () Option!155)

(assert (=> b!97151 (= e!63316 (Some!154 (_2!1172 (h!2162 (toList!779 lt!48153)))))))

(declare-fun b!97154 () Bool)

(declare-fun e!63317 () Option!155)

(assert (=> b!97154 (= e!63317 None!153)))

(declare-fun c!16460 () Bool)

(declare-fun d!25975 () Bool)

(assert (=> d!25975 (= c!16460 (and ((_ is Cons!1569) (toList!779 lt!48153)) (= (_1!1172 (h!2162 (toList!779 lt!48153))) (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))))))))

(assert (=> d!25975 (= (getValueByKey!149 (toList!779 lt!48153) (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) e!63316)))

(declare-fun b!97153 () Bool)

(assert (=> b!97153 (= e!63317 (getValueByKey!149 (t!5495 (toList!779 lt!48153)) (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!97152 () Bool)

(assert (=> b!97152 (= e!63316 e!63317)))

(declare-fun c!16461 () Bool)

(assert (=> b!97152 (= c!16461 (and ((_ is Cons!1569) (toList!779 lt!48153)) (not (= (_1!1172 (h!2162 (toList!779 lt!48153))) (_1!1172 (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))))

(assert (= (and d!25975 c!16460) b!97151))

(assert (= (and d!25975 (not c!16460)) b!97152))

(assert (= (and b!97152 c!16461) b!97153))

(assert (= (and b!97152 (not c!16461)) b!97154))

(declare-fun m!106391 () Bool)

(assert (=> b!97153 m!106391))

(assert (=> b!96293 d!25975))

(assert (=> b!96136 d!25681))

(assert (=> b!96136 d!25683))

(assert (=> b!96139 d!25687))

(assert (=> b!96139 d!25583))

(assert (=> b!96004 d!25381))

(declare-fun d!25977 () Bool)

(assert (=> d!25977 (= (get!1273 (getValueByKey!149 (toList!779 lt!47829) lt!47820)) (v!2782 (getValueByKey!149 (toList!779 lt!47829) lt!47820)))))

(assert (=> d!25387 d!25977))

(declare-fun b!97155 () Bool)

(declare-fun e!63318 () Option!155)

(assert (=> b!97155 (= e!63318 (Some!154 (_2!1172 (h!2162 (toList!779 lt!47829)))))))

(declare-fun b!97158 () Bool)

(declare-fun e!63319 () Option!155)

(assert (=> b!97158 (= e!63319 None!153)))

(declare-fun d!25979 () Bool)

(declare-fun c!16462 () Bool)

(assert (=> d!25979 (= c!16462 (and ((_ is Cons!1569) (toList!779 lt!47829)) (= (_1!1172 (h!2162 (toList!779 lt!47829))) lt!47820)))))

(assert (=> d!25979 (= (getValueByKey!149 (toList!779 lt!47829) lt!47820) e!63318)))

(declare-fun b!97157 () Bool)

(assert (=> b!97157 (= e!63319 (getValueByKey!149 (t!5495 (toList!779 lt!47829)) lt!47820))))

(declare-fun b!97156 () Bool)

(assert (=> b!97156 (= e!63318 e!63319)))

(declare-fun c!16463 () Bool)

(assert (=> b!97156 (= c!16463 (and ((_ is Cons!1569) (toList!779 lt!47829)) (not (= (_1!1172 (h!2162 (toList!779 lt!47829))) lt!47820))))))

(assert (= (and d!25979 c!16462) b!97155))

(assert (= (and d!25979 (not c!16462)) b!97156))

(assert (= (and b!97156 c!16463) b!97157))

(assert (= (and b!97156 (not c!16463)) b!97158))

(declare-fun m!106393 () Bool)

(assert (=> b!97157 m!106393))

(assert (=> d!25387 d!25979))

(declare-fun d!25981 () Bool)

(declare-fun lt!48693 () Bool)

(assert (=> d!25981 (= lt!48693 (select (content!99 Nil!1571) (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun e!63321 () Bool)

(assert (=> d!25981 (= lt!48693 e!63321)))

(declare-fun res!48998 () Bool)

(assert (=> d!25981 (=> (not res!48998) (not e!63321))))

(assert (=> d!25981 (= res!48998 ((_ is Cons!1570) Nil!1571))))

(assert (=> d!25981 (= (contains!796 Nil!1571 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) lt!48693)))

(declare-fun b!97159 () Bool)

(declare-fun e!63320 () Bool)

(assert (=> b!97159 (= e!63321 e!63320)))

(declare-fun res!48997 () Bool)

(assert (=> b!97159 (=> res!48997 e!63320)))

(assert (=> b!97159 (= res!48997 (= (h!2163 Nil!1571) (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(declare-fun b!97160 () Bool)

(assert (=> b!97160 (= e!63320 (contains!796 (t!5496 Nil!1571) (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)))))

(assert (= (and d!25981 res!48998) b!97159))

(assert (= (and b!97159 (not res!48997)) b!97160))

(assert (=> d!25981 m!104369))

(assert (=> d!25981 m!104117))

(declare-fun m!106395 () Bool)

(assert (=> d!25981 m!106395))

(assert (=> b!97160 m!104117))

(declare-fun m!106397 () Bool)

(assert (=> b!97160 m!106397))

(assert (=> b!96290 d!25981))

(declare-fun lt!48694 () Bool)

(declare-fun d!25983 () Bool)

(assert (=> d!25983 (= lt!48694 (select (content!100 (toList!779 lt!47949)) (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun e!63322 () Bool)

(assert (=> d!25983 (= lt!48694 e!63322)))

(declare-fun res!48999 () Bool)

(assert (=> d!25983 (=> (not res!48999) (not e!63322))))

(assert (=> d!25983 (= res!48999 ((_ is Cons!1569) (toList!779 lt!47949)))))

(assert (=> d!25983 (= (contains!797 (toList!779 lt!47949) (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))) lt!48694)))

(declare-fun b!97161 () Bool)

(declare-fun e!63323 () Bool)

(assert (=> b!97161 (= e!63322 e!63323)))

(declare-fun res!49000 () Bool)

(assert (=> b!97161 (=> res!49000 e!63323)))

(assert (=> b!97161 (= res!49000 (= (h!2162 (toList!779 lt!47949)) (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(declare-fun b!97162 () Bool)

(assert (=> b!97162 (= e!63323 (contains!797 (t!5495 (toList!779 lt!47949)) (ite c!16102 (ite c!16108 (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (tuple2!2323 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000))))))))

(assert (= (and d!25983 res!48999) b!97161))

(assert (= (and b!97161 (not res!49000)) b!97162))

(declare-fun m!106399 () Bool)

(assert (=> d!25983 m!106399))

(declare-fun m!106401 () Bool)

(assert (=> d!25983 m!106401))

(declare-fun m!106403 () Bool)

(assert (=> b!97162 m!106403))

(assert (=> b!96044 d!25983))

(assert (=> b!96295 d!25587))

(assert (=> b!96203 d!25725))

(declare-fun d!25985 () Bool)

(assert (=> d!25985 (= (apply!91 lt!47960 (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000)) (get!1273 (getValueByKey!149 (toList!779 lt!47960) (select (arr!2003 (_keys!4143 newMap!16)) #b00000000000000000000000000000000))))))

(declare-fun bs!4024 () Bool)

(assert (= bs!4024 d!25985))

(assert (=> bs!4024 m!104117))

(assert (=> bs!4024 m!105447))

(assert (=> bs!4024 m!105447))

(declare-fun m!106405 () Bool)

(assert (=> bs!4024 m!106405))

(assert (=> b!96065 d!25985))

(declare-fun d!25987 () Bool)

(declare-fun c!16464 () Bool)

(assert (=> d!25987 (= c!16464 ((_ is ValueCellFull!966) (select (arr!2004 (array!4218 (store (arr!2004 (_values!2440 newMap!16)) (index!3151 lt!47759) (ValueCellFull!966 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2253 (_values!2440 newMap!16)))) #b00000000000000000000000000000000)))))

(declare-fun e!63324 () V!3139)

(assert (=> d!25987 (= (get!1269 (select (arr!2004 (array!4218 (store (arr!2004 (_values!2440 newMap!16)) (index!3151 lt!47759) (ValueCellFull!966 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2253 (_values!2440 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!364 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)) e!63324)))

(declare-fun b!97163 () Bool)

(assert (=> b!97163 (= e!63324 (get!1271 (select (arr!2004 (array!4218 (store (arr!2004 (_values!2440 newMap!16)) (index!3151 lt!47759) (ValueCellFull!966 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2253 (_values!2440 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!364 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(declare-fun b!97164 () Bool)

(assert (=> b!97164 (= e!63324 (get!1272 (select (arr!2004 (array!4218 (store (arr!2004 (_values!2440 newMap!16)) (index!3151 lt!47759) (ValueCellFull!966 (get!1269 (select (arr!2004 (_values!2440 (v!2778 (underlying!331 thiss!992)))) from!355) (dynLambda!364 (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) #b0000000000000000000000000000000000000000000000000000000000000000)))) (size!2253 (_values!2440 newMap!16)))) #b00000000000000000000000000000000) (dynLambda!364 (defaultEntry!2457 newMap!16) #b0000000000000000000000000000000000000000000000000000000000000000)))))

(assert (= (and d!25987 c!16464) b!97163))

(assert (= (and d!25987 (not c!16464)) b!97164))

(assert (=> b!97163 m!104271))

(assert (=> b!97163 m!104273))

(declare-fun m!106407 () Bool)

(assert (=> b!97163 m!106407))

(assert (=> b!97164 m!104271))

(assert (=> b!97164 m!104273))

(declare-fun m!106409 () Bool)

(assert (=> b!97164 m!106409))

(assert (=> b!96065 d!25987))

(declare-fun d!25989 () Bool)

(declare-fun res!49001 () Bool)

(declare-fun e!63325 () Bool)

(assert (=> d!25989 (=> res!49001 e!63325)))

(assert (=> d!25989 (= res!49001 (and ((_ is Cons!1569) (toList!779 e!62513)) (= (_1!1172 (h!2162 (toList!779 e!62513))) (ite c!16103 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (select (arr!2003 (_keys!4143 newMap!16)) (index!3151 lt!47759))))))))

(assert (=> d!25989 (= (containsKey!153 (toList!779 e!62513) (ite c!16103 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (select (arr!2003 (_keys!4143 newMap!16)) (index!3151 lt!47759)))) e!63325)))

(declare-fun b!97165 () Bool)

(declare-fun e!63326 () Bool)

(assert (=> b!97165 (= e!63325 e!63326)))

(declare-fun res!49002 () Bool)

(assert (=> b!97165 (=> (not res!49002) (not e!63326))))

(assert (=> b!97165 (= res!49002 (and (or (not ((_ is Cons!1569) (toList!779 e!62513))) (bvsle (_1!1172 (h!2162 (toList!779 e!62513))) (ite c!16103 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (select (arr!2003 (_keys!4143 newMap!16)) (index!3151 lt!47759))))) ((_ is Cons!1569) (toList!779 e!62513)) (bvslt (_1!1172 (h!2162 (toList!779 e!62513))) (ite c!16103 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (select (arr!2003 (_keys!4143 newMap!16)) (index!3151 lt!47759))))))))

(declare-fun b!97166 () Bool)

(assert (=> b!97166 (= e!63326 (containsKey!153 (t!5495 (toList!779 e!62513)) (ite c!16103 (select (arr!2003 (_keys!4143 (v!2778 (underlying!331 thiss!992)))) from!355) (select (arr!2003 (_keys!4143 newMap!16)) (index!3151 lt!47759)))))))

(assert (= (and d!25989 (not res!49001)) b!97165))

(assert (= (and b!97165 res!49002) b!97166))

(declare-fun m!106411 () Bool)

(assert (=> b!97166 m!106411))

(assert (=> d!25383 d!25989))

(assert (=> b!96077 d!25543))

(declare-fun b!97167 () Bool)

(declare-fun res!49009 () Bool)

(declare-fun e!63336 () Bool)

(assert (=> b!97167 (=> (not res!49009) (not e!63336))))

(declare-fun e!63337 () Bool)

(assert (=> b!97167 (= res!49009 e!63337)))

(declare-fun c!16469 () Bool)

(assert (=> b!97167 (= c!16469 (not (= (bvand (extraKeys!2282 (_2!1173 lt!47744)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun d!25991 () Bool)

(assert (=> d!25991 e!63336))

(declare-fun res!49010 () Bool)

(assert (=> d!25991 (=> (not res!49010) (not e!63336))))

(assert (=> d!25991 (= res!49010 (or (bvsge #b00000000000000000000000000000000 (size!2252 (_keys!4143 (_2!1173 lt!47744)))) (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 (_2!1173 lt!47744)))))))))

(declare-fun lt!48701 () ListLongMap!1527)

(declare-fun lt!48715 () ListLongMap!1527)

(assert (=> d!25991 (= lt!48701 lt!48715)))

(declare-fun lt!48709 () Unit!2864)

(declare-fun e!63334 () Unit!2864)

(assert (=> d!25991 (= lt!48709 e!63334)))

(declare-fun c!16465 () Bool)

(declare-fun e!63332 () Bool)

(assert (=> d!25991 (= c!16465 e!63332)))

(declare-fun res!49008 () Bool)

(assert (=> d!25991 (=> (not res!49008) (not e!63332))))

(assert (=> d!25991 (= res!49008 (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 (_2!1173 lt!47744)))))))

(declare-fun e!63331 () ListLongMap!1527)

(assert (=> d!25991 (= lt!48715 e!63331)))

(declare-fun c!16466 () Bool)

(assert (=> d!25991 (= c!16466 (and (not (= (bvand (extraKeys!2282 (_2!1173 lt!47744)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (not (= (bvand (extraKeys!2282 (_2!1173 lt!47744)) #b00000000000000000000000000000010) #b00000000000000000000000000000000))))))

(assert (=> d!25991 (validMask!0 (mask!6542 (_2!1173 lt!47744)))))

(assert (=> d!25991 (= (getCurrentListMap!470 (_keys!4143 (_2!1173 lt!47744)) (_values!2440 (_2!1173 lt!47744)) (mask!6542 (_2!1173 lt!47744)) (extraKeys!2282 (_2!1173 lt!47744)) (zeroValue!2342 (_2!1173 lt!47744)) (minValue!2342 (_2!1173 lt!47744)) #b00000000000000000000000000000000 (defaultEntry!2457 (_2!1173 lt!47744))) lt!48701)))

(declare-fun bm!9856 () Bool)

(declare-fun call!9861 () ListLongMap!1527)

(declare-fun call!9862 () ListLongMap!1527)

(assert (=> bm!9856 (= call!9861 call!9862)))

(declare-fun bm!9857 () Bool)

(declare-fun call!9859 () ListLongMap!1527)

(declare-fun call!9864 () ListLongMap!1527)

(assert (=> bm!9857 (= call!9859 call!9864)))

(declare-fun b!97168 () Bool)

(declare-fun e!63327 () Bool)

(declare-fun call!9863 () Bool)

(assert (=> b!97168 (= e!63327 (not call!9863))))

(declare-fun bm!9858 () Bool)

(assert (=> bm!9858 (= call!9862 (getCurrentListMapNoExtraKeys!99 (_keys!4143 (_2!1173 lt!47744)) (_values!2440 (_2!1173 lt!47744)) (mask!6542 (_2!1173 lt!47744)) (extraKeys!2282 (_2!1173 lt!47744)) (zeroValue!2342 (_2!1173 lt!47744)) (minValue!2342 (_2!1173 lt!47744)) #b00000000000000000000000000000000 (defaultEntry!2457 (_2!1173 lt!47744))))))

(declare-fun bm!9859 () Bool)

(declare-fun call!9860 () ListLongMap!1527)

(assert (=> bm!9859 (= call!9860 call!9861)))

(declare-fun b!97169 () Bool)

(assert (=> b!97169 (= e!63332 (validKeyInArray!0 (select (arr!2003 (_keys!4143 (_2!1173 lt!47744))) #b00000000000000000000000000000000)))))

(declare-fun b!97170 () Bool)

(declare-fun e!63333 () Bool)

(assert (=> b!97170 (= e!63333 (validKeyInArray!0 (select (arr!2003 (_keys!4143 (_2!1173 lt!47744))) #b00000000000000000000000000000000)))))

(declare-fun b!97171 () Bool)

(declare-fun e!63330 () Bool)

(assert (=> b!97171 (= e!63330 (= (apply!91 lt!48701 #b1000000000000000000000000000000000000000000000000000000000000000) (minValue!2342 (_2!1173 lt!47744))))))

(declare-fun b!97172 () Bool)

(declare-fun e!63328 () ListLongMap!1527)

(assert (=> b!97172 (= e!63328 call!9860)))

(declare-fun b!97173 () Bool)

(declare-fun call!9865 () Bool)

(assert (=> b!97173 (= e!63337 (not call!9865))))

(declare-fun b!97174 () Bool)

(assert (=> b!97174 (= e!63327 e!63330)))

(declare-fun res!49007 () Bool)

(assert (=> b!97174 (= res!49007 call!9863)))

(assert (=> b!97174 (=> (not res!49007) (not e!63330))))

(declare-fun bm!9860 () Bool)

(assert (=> bm!9860 (= call!9863 (contains!794 lt!48701 #b1000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97175 () Bool)

(declare-fun e!63335 () Bool)

(declare-fun e!63338 () Bool)

(assert (=> b!97175 (= e!63335 e!63338)))

(declare-fun res!49004 () Bool)

(assert (=> b!97175 (=> (not res!49004) (not e!63338))))

(assert (=> b!97175 (= res!49004 (contains!794 lt!48701 (select (arr!2003 (_keys!4143 (_2!1173 lt!47744))) #b00000000000000000000000000000000)))))

(assert (=> b!97175 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 (_2!1173 lt!47744)))))))

(declare-fun c!16470 () Bool)

(declare-fun bm!9861 () Bool)

(assert (=> bm!9861 (= call!9864 (+!134 (ite c!16466 call!9862 (ite c!16470 call!9861 call!9860)) (ite (or c!16466 c!16470) (tuple2!2323 #b0000000000000000000000000000000000000000000000000000000000000000 (zeroValue!2342 (_2!1173 lt!47744))) (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (_2!1173 lt!47744))))))))

(declare-fun b!97176 () Bool)

(declare-fun e!63339 () Bool)

(assert (=> b!97176 (= e!63339 (= (apply!91 lt!48701 #b0000000000000000000000000000000000000000000000000000000000000000) (zeroValue!2342 (_2!1173 lt!47744))))))

(declare-fun b!97177 () Bool)

(assert (=> b!97177 (= e!63336 e!63327)))

(declare-fun c!16468 () Bool)

(assert (=> b!97177 (= c!16468 (not (= (bvand (extraKeys!2282 (_2!1173 lt!47744)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!97178 () Bool)

(declare-fun c!16467 () Bool)

(assert (=> b!97178 (= c!16467 (and (not (= (bvand (extraKeys!2282 (_2!1173 lt!47744)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2282 (_2!1173 lt!47744)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)))))

(declare-fun e!63329 () ListLongMap!1527)

(assert (=> b!97178 (= e!63329 e!63328)))

(declare-fun b!97179 () Bool)

(assert (=> b!97179 (= e!63328 call!9859)))

(declare-fun b!97180 () Bool)

(declare-fun lt!48703 () Unit!2864)

(assert (=> b!97180 (= e!63334 lt!48703)))

(declare-fun lt!48708 () ListLongMap!1527)

(assert (=> b!97180 (= lt!48708 (getCurrentListMapNoExtraKeys!99 (_keys!4143 (_2!1173 lt!47744)) (_values!2440 (_2!1173 lt!47744)) (mask!6542 (_2!1173 lt!47744)) (extraKeys!2282 (_2!1173 lt!47744)) (zeroValue!2342 (_2!1173 lt!47744)) (minValue!2342 (_2!1173 lt!47744)) #b00000000000000000000000000000000 (defaultEntry!2457 (_2!1173 lt!47744))))))

(declare-fun lt!48707 () (_ BitVec 64))

(assert (=> b!97180 (= lt!48707 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48704 () (_ BitVec 64))

(assert (=> b!97180 (= lt!48704 (select (arr!2003 (_keys!4143 (_2!1173 lt!47744))) #b00000000000000000000000000000000))))

(declare-fun lt!48699 () Unit!2864)

(assert (=> b!97180 (= lt!48699 (addStillContains!67 lt!48708 lt!48707 (zeroValue!2342 (_2!1173 lt!47744)) lt!48704))))

(assert (=> b!97180 (contains!794 (+!134 lt!48708 (tuple2!2323 lt!48707 (zeroValue!2342 (_2!1173 lt!47744)))) lt!48704)))

(declare-fun lt!48716 () Unit!2864)

(assert (=> b!97180 (= lt!48716 lt!48699)))

(declare-fun lt!48711 () ListLongMap!1527)

(assert (=> b!97180 (= lt!48711 (getCurrentListMapNoExtraKeys!99 (_keys!4143 (_2!1173 lt!47744)) (_values!2440 (_2!1173 lt!47744)) (mask!6542 (_2!1173 lt!47744)) (extraKeys!2282 (_2!1173 lt!47744)) (zeroValue!2342 (_2!1173 lt!47744)) (minValue!2342 (_2!1173 lt!47744)) #b00000000000000000000000000000000 (defaultEntry!2457 (_2!1173 lt!47744))))))

(declare-fun lt!48713 () (_ BitVec 64))

(assert (=> b!97180 (= lt!48713 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48702 () (_ BitVec 64))

(assert (=> b!97180 (= lt!48702 (select (arr!2003 (_keys!4143 (_2!1173 lt!47744))) #b00000000000000000000000000000000))))

(declare-fun lt!48712 () Unit!2864)

(assert (=> b!97180 (= lt!48712 (addApplyDifferent!67 lt!48711 lt!48713 (minValue!2342 (_2!1173 lt!47744)) lt!48702))))

(assert (=> b!97180 (= (apply!91 (+!134 lt!48711 (tuple2!2323 lt!48713 (minValue!2342 (_2!1173 lt!47744)))) lt!48702) (apply!91 lt!48711 lt!48702))))

(declare-fun lt!48696 () Unit!2864)

(assert (=> b!97180 (= lt!48696 lt!48712)))

(declare-fun lt!48700 () ListLongMap!1527)

(assert (=> b!97180 (= lt!48700 (getCurrentListMapNoExtraKeys!99 (_keys!4143 (_2!1173 lt!47744)) (_values!2440 (_2!1173 lt!47744)) (mask!6542 (_2!1173 lt!47744)) (extraKeys!2282 (_2!1173 lt!47744)) (zeroValue!2342 (_2!1173 lt!47744)) (minValue!2342 (_2!1173 lt!47744)) #b00000000000000000000000000000000 (defaultEntry!2457 (_2!1173 lt!47744))))))

(declare-fun lt!48705 () (_ BitVec 64))

(assert (=> b!97180 (= lt!48705 #b0000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48695 () (_ BitVec 64))

(assert (=> b!97180 (= lt!48695 (select (arr!2003 (_keys!4143 (_2!1173 lt!47744))) #b00000000000000000000000000000000))))

(declare-fun lt!48698 () Unit!2864)

(assert (=> b!97180 (= lt!48698 (addApplyDifferent!67 lt!48700 lt!48705 (zeroValue!2342 (_2!1173 lt!47744)) lt!48695))))

(assert (=> b!97180 (= (apply!91 (+!134 lt!48700 (tuple2!2323 lt!48705 (zeroValue!2342 (_2!1173 lt!47744)))) lt!48695) (apply!91 lt!48700 lt!48695))))

(declare-fun lt!48706 () Unit!2864)

(assert (=> b!97180 (= lt!48706 lt!48698)))

(declare-fun lt!48697 () ListLongMap!1527)

(assert (=> b!97180 (= lt!48697 (getCurrentListMapNoExtraKeys!99 (_keys!4143 (_2!1173 lt!47744)) (_values!2440 (_2!1173 lt!47744)) (mask!6542 (_2!1173 lt!47744)) (extraKeys!2282 (_2!1173 lt!47744)) (zeroValue!2342 (_2!1173 lt!47744)) (minValue!2342 (_2!1173 lt!47744)) #b00000000000000000000000000000000 (defaultEntry!2457 (_2!1173 lt!47744))))))

(declare-fun lt!48714 () (_ BitVec 64))

(assert (=> b!97180 (= lt!48714 #b1000000000000000000000000000000000000000000000000000000000000000)))

(declare-fun lt!48710 () (_ BitVec 64))

(assert (=> b!97180 (= lt!48710 (select (arr!2003 (_keys!4143 (_2!1173 lt!47744))) #b00000000000000000000000000000000))))

(assert (=> b!97180 (= lt!48703 (addApplyDifferent!67 lt!48697 lt!48714 (minValue!2342 (_2!1173 lt!47744)) lt!48710))))

(assert (=> b!97180 (= (apply!91 (+!134 lt!48697 (tuple2!2323 lt!48714 (minValue!2342 (_2!1173 lt!47744)))) lt!48710) (apply!91 lt!48697 lt!48710))))

(declare-fun b!97181 () Bool)

(assert (=> b!97181 (= e!63331 e!63329)))

(assert (=> b!97181 (= c!16470 (and (not (= (bvand (extraKeys!2282 (_2!1173 lt!47744)) #b00000000000000000000000000000001) #b00000000000000000000000000000000)) (= (bvand (extraKeys!2282 (_2!1173 lt!47744)) #b00000000000000000000000000000010) #b00000000000000000000000000000000)))))

(declare-fun b!97182 () Bool)

(declare-fun res!49006 () Bool)

(assert (=> b!97182 (=> (not res!49006) (not e!63336))))

(assert (=> b!97182 (= res!49006 e!63335)))

(declare-fun res!49005 () Bool)

(assert (=> b!97182 (=> res!49005 e!63335)))

(assert (=> b!97182 (= res!49005 (not e!63333))))

(declare-fun res!49011 () Bool)

(assert (=> b!97182 (=> (not res!49011) (not e!63333))))

(assert (=> b!97182 (= res!49011 (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 (_2!1173 lt!47744)))))))

(declare-fun bm!9862 () Bool)

(assert (=> bm!9862 (= call!9865 (contains!794 lt!48701 #b0000000000000000000000000000000000000000000000000000000000000000))))

(declare-fun b!97183 () Bool)

(assert (=> b!97183 (= e!63337 e!63339)))

(declare-fun res!49003 () Bool)

(assert (=> b!97183 (= res!49003 call!9865)))

(assert (=> b!97183 (=> (not res!49003) (not e!63339))))

(declare-fun b!97184 () Bool)

(assert (=> b!97184 (= e!63338 (= (apply!91 lt!48701 (select (arr!2003 (_keys!4143 (_2!1173 lt!47744))) #b00000000000000000000000000000000)) (get!1269 (select (arr!2004 (_values!2440 (_2!1173 lt!47744))) #b00000000000000000000000000000000) (dynLambda!364 (defaultEntry!2457 (_2!1173 lt!47744)) #b0000000000000000000000000000000000000000000000000000000000000000))))))

(assert (=> b!97184 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2253 (_values!2440 (_2!1173 lt!47744)))))))

(assert (=> b!97184 (and (bvsge #b00000000000000000000000000000000 #b00000000000000000000000000000000) (bvslt #b00000000000000000000000000000000 (size!2252 (_keys!4143 (_2!1173 lt!47744)))))))

(declare-fun b!97185 () Bool)

(declare-fun Unit!2930 () Unit!2864)

(assert (=> b!97185 (= e!63334 Unit!2930)))

(declare-fun b!97186 () Bool)

(assert (=> b!97186 (= e!63331 (+!134 call!9864 (tuple2!2323 #b1000000000000000000000000000000000000000000000000000000000000000 (minValue!2342 (_2!1173 lt!47744)))))))

(declare-fun b!97187 () Bool)

(assert (=> b!97187 (= e!63329 call!9859)))

(assert (= (and d!25991 c!16466) b!97186))

(assert (= (and d!25991 (not c!16466)) b!97181))

(assert (= (and b!97181 c!16470) b!97187))

(assert (= (and b!97181 (not c!16470)) b!97178))

(assert (= (and b!97178 c!16467) b!97179))

(assert (= (and b!97178 (not c!16467)) b!97172))

(assert (= (or b!97179 b!97172) bm!9859))

(assert (= (or b!97187 bm!9859) bm!9856))

(assert (= (or b!97187 b!97179) bm!9857))

(assert (= (or b!97186 bm!9856) bm!9858))

(assert (= (or b!97186 bm!9857) bm!9861))

(assert (= (and d!25991 res!49008) b!97169))

(assert (= (and d!25991 c!16465) b!97180))

(assert (= (and d!25991 (not c!16465)) b!97185))

(assert (= (and d!25991 res!49010) b!97182))

(assert (= (and b!97182 res!49011) b!97170))

(assert (= (and b!97182 (not res!49005)) b!97175))

(assert (= (and b!97175 res!49004) b!97184))

(assert (= (and b!97182 res!49006) b!97167))

(assert (= (and b!97167 c!16469) b!97183))

(assert (= (and b!97167 (not c!16469)) b!97173))

(assert (= (and b!97183 res!49003) b!97176))

(assert (= (or b!97183 b!97173) bm!9862))

(assert (= (and b!97167 res!49009) b!97177))

(assert (= (and b!97177 c!16468) b!97174))

(assert (= (and b!97177 (not c!16468)) b!97168))

(assert (= (and b!97174 res!49007) b!97171))

(assert (= (or b!97174 b!97168) bm!9860))

(declare-fun b_lambda!4297 () Bool)

(assert (=> (not b_lambda!4297) (not b!97184)))

(declare-fun t!5508 () Bool)

(declare-fun tb!1901 () Bool)

(assert (=> (and b!95640 (= (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) (defaultEntry!2457 (_2!1173 lt!47744))) t!5508) tb!1901))

(declare-fun result!3233 () Bool)

(assert (=> tb!1901 (= result!3233 tp_is_empty!2619)))

(assert (=> b!97184 t!5508))

(declare-fun b_and!5951 () Bool)

(assert (= b_and!5947 (and (=> t!5508 result!3233) b_and!5951)))

(declare-fun tb!1903 () Bool)

(declare-fun t!5510 () Bool)

(assert (=> (and b!95639 (= (defaultEntry!2457 newMap!16) (defaultEntry!2457 (_2!1173 lt!47744))) t!5510) tb!1903))

(declare-fun result!3235 () Bool)

(assert (= result!3235 result!3233))

(assert (=> b!97184 t!5510))

(declare-fun b_and!5953 () Bool)

(assert (= b_and!5949 (and (=> t!5510 result!3235) b_and!5953)))

(declare-fun m!106413 () Bool)

(assert (=> bm!9861 m!106413))

(declare-fun m!106415 () Bool)

(assert (=> b!97176 m!106415))

(declare-fun m!106417 () Bool)

(assert (=> b!97180 m!106417))

(declare-fun m!106419 () Bool)

(assert (=> b!97180 m!106419))

(declare-fun m!106421 () Bool)

(assert (=> b!97180 m!106421))

(declare-fun m!106423 () Bool)

(assert (=> b!97180 m!106423))

(declare-fun m!106425 () Bool)

(assert (=> b!97180 m!106425))

(declare-fun m!106427 () Bool)

(assert (=> b!97180 m!106427))

(declare-fun m!106429 () Bool)

(assert (=> b!97180 m!106429))

(declare-fun m!106431 () Bool)

(assert (=> b!97180 m!106431))

(declare-fun m!106433 () Bool)

(assert (=> b!97180 m!106433))

(declare-fun m!106435 () Bool)

(assert (=> b!97180 m!106435))

(declare-fun m!106437 () Bool)

(assert (=> b!97180 m!106437))

(declare-fun m!106439 () Bool)

(assert (=> b!97180 m!106439))

(declare-fun m!106441 () Bool)

(assert (=> b!97180 m!106441))

(assert (=> b!97180 m!106419))

(declare-fun m!106443 () Bool)

(assert (=> b!97180 m!106443))

(assert (=> b!97180 m!106425))

(declare-fun m!106445 () Bool)

(assert (=> b!97180 m!106445))

(assert (=> b!97180 m!106429))

(declare-fun m!106447 () Bool)

(assert (=> b!97180 m!106447))

(assert (=> b!97180 m!105295))

(assert (=> b!97180 m!106435))

(assert (=> bm!9858 m!106447))

(assert (=> b!97175 m!105295))

(assert (=> b!97175 m!105295))

(declare-fun m!106449 () Bool)

(assert (=> b!97175 m!106449))

(assert (=> b!97170 m!105295))

(assert (=> b!97170 m!105295))

(assert (=> b!97170 m!105297))

(declare-fun m!106451 () Bool)

(assert (=> b!97186 m!106451))

(declare-fun m!106453 () Bool)

(assert (=> bm!9862 m!106453))

(declare-fun m!106455 () Bool)

(assert (=> b!97171 m!106455))

(declare-fun m!106457 () Bool)

(assert (=> bm!9860 m!106457))

(assert (=> b!97169 m!105295))

(assert (=> b!97169 m!105295))

(assert (=> b!97169 m!105297))

(declare-fun m!106459 () Bool)

(assert (=> b!97184 m!106459))

(declare-fun m!106461 () Bool)

(assert (=> b!97184 m!106461))

(declare-fun m!106463 () Bool)

(assert (=> b!97184 m!106463))

(assert (=> b!97184 m!105295))

(assert (=> b!97184 m!106461))

(assert (=> b!97184 m!105295))

(declare-fun m!106465 () Bool)

(assert (=> b!97184 m!106465))

(assert (=> b!97184 m!106459))

(assert (=> d!25991 m!104715))

(assert (=> d!25307 d!25991))

(declare-fun condMapEmpty!3715 () Bool)

(declare-fun mapDefault!3715 () ValueCell!966)

(assert (=> mapNonEmpty!3713 (= condMapEmpty!3715 (= mapRest!3713 ((as const (Array (_ BitVec 32) ValueCell!966)) mapDefault!3715)))))

(declare-fun e!63340 () Bool)

(declare-fun mapRes!3715 () Bool)

(assert (=> mapNonEmpty!3713 (= tp!9509 (and e!63340 mapRes!3715))))

(declare-fun mapIsEmpty!3715 () Bool)

(assert (=> mapIsEmpty!3715 mapRes!3715))

(declare-fun b!97188 () Bool)

(declare-fun e!63341 () Bool)

(assert (=> b!97188 (= e!63341 tp_is_empty!2619)))

(declare-fun mapNonEmpty!3715 () Bool)

(declare-fun tp!9511 () Bool)

(assert (=> mapNonEmpty!3715 (= mapRes!3715 (and tp!9511 e!63341))))

(declare-fun mapRest!3715 () (Array (_ BitVec 32) ValueCell!966))

(declare-fun mapValue!3715 () ValueCell!966)

(declare-fun mapKey!3715 () (_ BitVec 32))

(assert (=> mapNonEmpty!3715 (= mapRest!3713 (store mapRest!3715 mapKey!3715 mapValue!3715))))

(declare-fun b!97189 () Bool)

(assert (=> b!97189 (= e!63340 tp_is_empty!2619)))

(assert (= (and mapNonEmpty!3713 condMapEmpty!3715) mapIsEmpty!3715))

(assert (= (and mapNonEmpty!3713 (not condMapEmpty!3715)) mapNonEmpty!3715))

(assert (= (and mapNonEmpty!3715 ((_ is ValueCellFull!966) mapValue!3715)) b!97188))

(assert (= (and mapNonEmpty!3713 ((_ is ValueCellFull!966) mapDefault!3715)) b!97189))

(declare-fun m!106467 () Bool)

(assert (=> mapNonEmpty!3715 m!106467))

(declare-fun condMapEmpty!3716 () Bool)

(declare-fun mapDefault!3716 () ValueCell!966)

(assert (=> mapNonEmpty!3714 (= condMapEmpty!3716 (= mapRest!3714 ((as const (Array (_ BitVec 32) ValueCell!966)) mapDefault!3716)))))

(declare-fun e!63342 () Bool)

(declare-fun mapRes!3716 () Bool)

(assert (=> mapNonEmpty!3714 (= tp!9510 (and e!63342 mapRes!3716))))

(declare-fun mapIsEmpty!3716 () Bool)

(assert (=> mapIsEmpty!3716 mapRes!3716))

(declare-fun b!97190 () Bool)

(declare-fun e!63343 () Bool)

(assert (=> b!97190 (= e!63343 tp_is_empty!2619)))

(declare-fun mapNonEmpty!3716 () Bool)

(declare-fun tp!9512 () Bool)

(assert (=> mapNonEmpty!3716 (= mapRes!3716 (and tp!9512 e!63343))))

(declare-fun mapRest!3716 () (Array (_ BitVec 32) ValueCell!966))

(declare-fun mapValue!3716 () ValueCell!966)

(declare-fun mapKey!3716 () (_ BitVec 32))

(assert (=> mapNonEmpty!3716 (= mapRest!3714 (store mapRest!3716 mapKey!3716 mapValue!3716))))

(declare-fun b!97191 () Bool)

(assert (=> b!97191 (= e!63342 tp_is_empty!2619)))

(assert (= (and mapNonEmpty!3714 condMapEmpty!3716) mapIsEmpty!3716))

(assert (= (and mapNonEmpty!3714 (not condMapEmpty!3716)) mapNonEmpty!3716))

(assert (= (and mapNonEmpty!3716 ((_ is ValueCellFull!966) mapValue!3716)) b!97190))

(assert (= (and mapNonEmpty!3714 ((_ is ValueCellFull!966) mapDefault!3716)) b!97191))

(declare-fun m!106469 () Bool)

(assert (=> mapNonEmpty!3716 m!106469))

(declare-fun b_lambda!4299 () Bool)

(assert (= b_lambda!4295 (or (and b!95640 b_free!2405 (= (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) (defaultEntry!2457 newMap!16))) (and b!95639 b_free!2407) b_lambda!4299)))

(declare-fun b_lambda!4301 () Bool)

(assert (= b_lambda!4269 (or (and b!95640 b_free!2405 (= (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) (defaultEntry!2457 newMap!16))) (and b!95639 b_free!2407) b_lambda!4301)))

(declare-fun b_lambda!4303 () Bool)

(assert (= b_lambda!4289 (or (and b!95640 b_free!2405) (and b!95639 b_free!2407 (= (defaultEntry!2457 newMap!16) (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))))) b_lambda!4303)))

(declare-fun b_lambda!4305 () Bool)

(assert (= b_lambda!4279 (or (and b!95640 b_free!2405 (= (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) (defaultEntry!2457 newMap!16))) (and b!95639 b_free!2407) b_lambda!4305)))

(declare-fun b_lambda!4307 () Bool)

(assert (= b_lambda!4283 (or (and b!95640 b_free!2405 (= (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) (defaultEntry!2457 newMap!16))) (and b!95639 b_free!2407) b_lambda!4307)))

(declare-fun b_lambda!4309 () Bool)

(assert (= b_lambda!4273 (or (and b!95640 b_free!2405 (= (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) (defaultEntry!2457 newMap!16))) (and b!95639 b_free!2407) b_lambda!4309)))

(declare-fun b_lambda!4311 () Bool)

(assert (= b_lambda!4285 (or (and b!95640 b_free!2405 (= (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) (defaultEntry!2457 newMap!16))) (and b!95639 b_free!2407) b_lambda!4311)))

(declare-fun b_lambda!4313 () Bool)

(assert (= b_lambda!4291 (or (and b!95640 b_free!2405) (and b!95639 b_free!2407 (= (defaultEntry!2457 newMap!16) (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))))) b_lambda!4313)))

(declare-fun b_lambda!4315 () Bool)

(assert (= b_lambda!4287 (or (and b!95640 b_free!2405 (= (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) (defaultEntry!2457 newMap!16))) (and b!95639 b_free!2407) b_lambda!4315)))

(declare-fun b_lambda!4317 () Bool)

(assert (= b_lambda!4277 (or (and b!95640 b_free!2405 (= (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) (defaultEntry!2457 newMap!16))) (and b!95639 b_free!2407) b_lambda!4317)))

(declare-fun b_lambda!4319 () Bool)

(assert (= b_lambda!4281 (or (and b!95640 b_free!2405 (= (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) (defaultEntry!2457 newMap!16))) (and b!95639 b_free!2407) b_lambda!4319)))

(declare-fun b_lambda!4321 () Bool)

(assert (= b_lambda!4271 (or (and b!95640 b_free!2405 (= (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) (defaultEntry!2457 newMap!16))) (and b!95639 b_free!2407) b_lambda!4321)))

(declare-fun b_lambda!4323 () Bool)

(assert (= b_lambda!4293 (or (and b!95640 b_free!2405 (= (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) (defaultEntry!2457 newMap!16))) (and b!95639 b_free!2407) b_lambda!4323)))

(declare-fun b_lambda!4325 () Bool)

(assert (= b_lambda!4275 (or (and b!95640 b_free!2405 (= (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) (defaultEntry!2457 newMap!16))) (and b!95639 b_free!2407) b_lambda!4325)))

(declare-fun b_lambda!4327 () Bool)

(assert (= b_lambda!4267 (or (and b!95640 b_free!2405 (= (defaultEntry!2457 (v!2778 (underlying!331 thiss!992))) (defaultEntry!2457 newMap!16))) (and b!95639 b_free!2407) b_lambda!4327)))

(check-sat (not b!96674) b_and!5951 (not b!96779) (not b!96566) (not b!96662) (not b!96443) (not b!96447) (not b_lambda!4299) (not b!96557) (not d!25787) (not b!96889) (not b!96987) (not b!96511) (not b!96426) (not b!96720) (not b!97000) (not b!96587) (not d!25623) (not bm!9832) (not d!25829) (not b_lambda!4323) (not d!25691) (not d!25715) (not d!25951) (not d!25567) (not d!25859) (not b!96340) (not b!96879) (not b!96877) (not b_lambda!4241) (not d!25837) (not b!97092) (not d!25473) (not b!96578) (not d!25509) (not b!96345) (not b!96350) (not d!25707) (not b!96795) (not b!96331) (not b!96965) (not d!25905) (not b!96652) (not d!25795) (not b!97010) (not b!96365) (not b!96923) (not b!96838) (not b!96406) (not b!97055) (not b!97034) (not b!96422) (not bm!9849) (not b!96335) (not bm!9834) (not b!97028) (not d!25597) (not d!25991) (not d!25649) (not b!96411) (not d!25615) (not bm!9841) (not b!96926) (not b!96594) (not b!97124) (not b!96680) (not d!25943) (not b!96667) (not b!96466) (not b!96721) (not b!96472) (not b!96894) (not b!97130) (not b!96728) (not b!96334) (not b!96820) (not b!96409) (not d!25935) (not d!25559) (not b!96661) (not bm!9844) (not d!25953) (not b!96486) (not b!96961) (not b!96434) (not b!97169) (not b_lambda!4263) (not d!25889) (not b!96989) (not b_next!2405) (not b!96732) (not b!96982) (not d!25561) (not b!96567) (not b!96945) (not d!25745) (not d!25661) (not b!96860) (not b!97074) (not b!96844) (not b_lambda!4317) (not b!97129) (not d!25577) (not b_lambda!4315) (not b!96922) (not b!96538) (not b!96597) (not b_lambda!4319) (not b!96344) (not b!96684) (not d!25503) (not b!96869) (not b!96614) (not b!96944) (not d!25791) (not d!25469) (not b!96482) (not b_lambda!4305) (not d!25793) (not d!25525) (not mapNonEmpty!3716) (not b!96372) (not b!96581) (not b!97097) (not b!96352) (not d!25655) (not b_lambda!4261) (not d!25519) (not b!96445) (not b!96953) (not b!97139) (not d!25729) (not bm!9828) (not b!96887) (not b!97043) (not bm!9802) (not b!96925) (not b!96808) (not bm!9816) (not b!96348) (not b!96524) (not b!96400) (not b!96991) (not b!96532) (not b!96833) (not bm!9860) (not b!96657) (not d!25555) (not d!25819) (not d!25611) (not b!96620) (not d!25811) (not b!96474) (not b!96618) (not d!25843) (not b!97176) (not b!96823) (not d!25705) (not b!97110) (not d!25603) (not d!25641) (not bm!9843) (not d!25751) (not b!96424) (not b!96983) (not b!96492) (not b!96984) (not b!96592) (not b!97041) (not b!96415) (not d!25851) (not d!25447) (not b!96371) (not d!25909) (not d!25647) (not d!25849) (not d!25921) (not b!97153) (not b!96499) (not bm!9824) (not b!97049) (not b!97042) (not b!97184) (not b!96525) (not d!25815) (not d!25881) (not d!25727) (not b!96686) (not d!25479) (not d!25521) (not b!96575) (not d!25875) (not b!96660) (not b!96969) (not b!97093) (not d!25863) (not bm!9775) (not b!96628) (not b!96470) (not b!96405) (not b!97032) (not d!25651) (not d!25439) (not b!96788) (not d!25817) (not bm!9842) (not d!25643) (not b!96505) (not d!25929) (not d!25571) (not b!96647) (not b!97125) (not d!25733) (not b!96985) (not b!96588) (not b!96431) (not b!96746) (not b!97106) (not b!96401) (not b!96642) (not b!97073) (not b!96950) (not b_lambda!4237) (not b!96629) (not b!96745) (not b!96489) (not b!97040) (not b!96442) (not d!25495) (not b!96881) (not b!96404) (not d!25535) (not b!97160) (not b!96771) (not b!96960) (not d!25867) (not b!96669) (not b!97038) (not d!25659) (not b!96500) (not d!25737) (not b!96462) (not b!96455) (not b!96607) (not d!25517) (not b!96876) (not bm!9854) (not b!96853) (not bm!9836) (not bm!9839) (not b_lambda!4313) (not b!96810) (not d!25687) (not b!96677) (not d!25553) (not b!96798) (not b!96766) (not bm!9777) (not b!96835) (not d!25481) (not b!96666) (not b!97027) (not b!96539) (not b!96727) (not bm!9811) (not b!96615) (not b!97136) (not b!96862) (not b!96640) (not b!96362) (not b!97007) (not b!96446) (not d!25685) (not b!97112) (not d!25451) (not b!97004) (not d!25861) (not bm!9799) (not b!96834) (not d!25605) (not d!25681) (not b!97045) (not b!96792) (not b!96329) (not b!96845) (not b_lambda!4311) (not d!25759) (not b!96589) (not b!96813) (not b!96999) (not b!96653) (not b_lambda!4301) (not d!25885) (not b!97019) (not b!96606) (not b!97054) (not d!25633) (not b!96427) (not bm!9858) (not d!25497) (not d!25983) (not b!97144) (not b!96515) (not d!25591) (not b!96504) (not b!97072) (not d!25621) (not b!96651) (not b!96599) (not b_lambda!4307) (not d!25483) (not b_lambda!4303) (not b!96774) (not d!25511) (not b!96718) (not b!96966) (not b!96973) (not d!25855) (not b!96852) (not b!96488) (not b!96457) (not b!97016) (not b!96332) (not b!96864) (not b!97162) (not d!25761) (not bm!9778) (not d!25549) (not b!96952) (not b!97050) (not b!96476) (not b!96436) (not b!96456) (not b!96928) (not d!25919) (not d!25825) (not d!25609) (not d!25475) (not d!25471) (not b!96866) (not d!25871) (not b!96418) (not d!25807) (not d!25865) (not d!25507) (not bm!9814) (not b!97079) (not d!25725) (not bm!9813) (not d!25557) (not b_lambda!4327) (not b!97069) (not b!97088) (not b!96338) (not b!97140) (not b!96559) (not d!25607) (not d!25455) (not d!25601) (not b!96638) (not b!96752) (not bm!9795) (not d!25823) (not d!25487) (not b!96749) (not b!96435) (not bm!9801) (not b!96519) (not b!97087) (not b!96671) (not bm!9826) (not b!97163) (not b!96751) (not b!96353) (not b!96347) (not b!96972) (not b!97109) (not b!96840) (not d!25947) (not b!97103) (not b!96772) (not bm!9851) (not b!96770) (not d!25955) (not b!96761) (not d!25913) (not d!25981) (not d!25629) (not d!25551) (not b!96355) (not b!96892) (not b!97065) (not b!97127) (not mapNonEmpty!3715) (not bm!9861) (not d!25937) (not b_lambda!4297) (not b!96800) (not d!25927) (not b!96534) (not b_lambda!4257) (not d!25493) (not d!25573) (not d!25799) (not d!25957) (not b!96675) (not d!25575) (not d!25767) (not b!96343) (not d!25869) (not d!25731) (not b!96645) (not b!97033) (not b!96440) (not b!96776) (not b!97101) (not b!96801) (not d!25477) (not b_lambda!4309) (not b!97146) (not b!96884) (not b_lambda!4259) (not d!25673) (not b!96689) (not d!25453) (not b!96978) (not b!96604) (not b!96938) (not bm!9855) (not b!96601) (not bm!9818) (not bm!9788) (not bm!9827) (not b!96448) (not d!25893) (not b!96726) (not d!25711) (not b!96826) (not b!97186) (not bm!9852) (not b!96793) (not d!25803) (not b!96924) (not d!25723) (not b!97166) (not b!96930) (not b!97059) (not b!96981) (not d!25907) (not bm!9853) (not b!96940) (not d!25873) (not bm!9783) (not d!25887) (not d!25963) (not d!25781) (not b!96723) (not b!96875) (not d!25959) (not bm!9845) (not b!96561) (not d!25653) (not b!96809) (not b!96668) (not d!25635) (not b!96479) (not bm!9830) (not d!25689) (not b!96616) (not b!97018) (not b!96818) (not b!96964) (not bm!9792) (not b!96786) (not b!96754) (not d!25485) b_and!5953 (not bm!9766) (not d!25563) (not d!25593) (not b!96886) (not d!25693) (not bm!9862) (not b!97157) (not b!96619) (not b!96947) (not b!96621) (not b!96868) (not d!25619) (not bm!9815) (not d!25897) (not b!96420) (not bm!9807) (not b!96769) (not d!25739) (not b!97001) (not b!96523) (not bm!9781) (not d!25533) (not b!96419) (not d!25915) (not b!97067) (not d!25489) (not b!97035) (not bm!9791) (not b!96510) (not d!25877) (not b!96790) (not b!96410) (not d!25899) (not b!96655) (not d!25801) (not bm!9808) (not bm!9790) (not d!25777) (not b!96501) (not d!25679) (not b!96408) (not b!96921) (not d!25821) (not d!25657) (not d!25459) (not d!25717) (not b!97115) (not d!25539) (not b!96451) (not d!25437) (not b!96737) (not d!25827) (not b!96873) (not b!96399) (not d!25883) (not b!96861) (not b!96691) (not b!96574) (not b!96413) (not d!25441) (not d!25755) (not b!96664) (not b!96636) (not d!25639) (not d!25505) (not b!96733) (not d!25663) (not d!25669) (not b_lambda!4255) (not d!25765) tp_is_empty!2619 (not d!25985) (not b!96328) (not d!25933) (not b!96506) (not b_lambda!4265) (not bm!9846) (not b!97013) (not b!96850) (not d!25465) (not d!25463) (not d!25831) (not b!97175) (not d!25757) (not b!96962) (not d!25769) (not b!96741) (not b!96461) (not d!25969) (not d!25879) (not b!96847) (not b!97011) (not b!96421) (not b!96521) (not b!97164) (not d!25565) (not b!97149) (not b!96841) (not b!96576) (not b!96637) (not d!25699) (not b!96540) (not b!97026) (not b!96483) (not b!97063) (not b!96990) (not b!96932) (not b!96719) (not b!96633) (not d!25645) (not b!97031) (not d!25931) (not b_lambda!4321) (not bm!9797) (not b!97170) (not b!96358) (not b!96743) (not b!96971) (not b!97002) (not bm!9785) (not b!96759) (not d!25845) (not b!96929) (not b!96433) (not d!25813) (not d!25841) (not d!25697) (not b!96533) (not b!97143) (not d!25547) (not d!25637) (not b!96425) (not b!96536) (not b!96438) (not b!96649) (not bm!9821) (not d!25925) (not d!25809) (not b!96825) (not b!96336) (not d!25805) (not b!96816) (not b!96927) (not b!96975) (not d!25433) (not bm!9767) (not b!96780) (not b!96986) (not d!25467) (not b!96763) (not b!97171) (not b!97086) (not b!97081) (not b!96936) (not b!96781) (not bm!9793) (not b!96529) (not d!25701) (not b!97048) (not b!96626) (not d!25445) (not bm!9784) (not b!96360) (not b_lambda!4325) (not b!96716) (not b!96452) (not d!25779) (not b!96663) (not b!96631) (not b!96672) (not b_next!2407) (not d!25749) (not d!25775) (not d!25491) (not b!96527) (not b!96564) (not b!96585) (not d!25513) (not b!97180))
(check-sat b_and!5951 b_and!5953 (not b_next!2405) (not b_next!2407))
